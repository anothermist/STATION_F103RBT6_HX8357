
STATION_F103RB_HX8357.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d410  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011d74  0800d520  0800d520  0001d520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f294  0801f294  000301e0  2**0
                  CONTENTS
  4 .ARM          00000000  0801f294  0801f294  000301e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801f294  0801f294  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f294  0801f294  0002f294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f298  0801f298  0002f298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801f29c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a0  200001e0  0801f47c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000980  0801f47c  00030980  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022374  00000000  00000000  00030209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002468  00000000  00000000  0005257d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001bbe6  00000000  00000000  000549e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  000705d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00009290  00000000  00000000  00070620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001202c  00000000  00000000  000798b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000912a6  00000000  00000000  0008b8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011cb82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fd8  00000000  00000000  0011cbd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00019c4d  00000000  00000000  0011ebac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d508 	.word	0x0800d508

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800d508 	.word	0x0800d508

08000150 <HAL_Delay>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000150:	4a03      	ldr	r2, [pc, #12]	; (8000160 <HAL_Delay+0x10>)
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait += (uint32_t)(uwTickFreq);
 8000152:	3001      	adds	r0, #1
  return uwTick;
 8000154:	6811      	ldr	r1, [r2, #0]
 8000156:	6813      	ldr	r3, [r2, #0]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000158:	1a5b      	subs	r3, r3, r1
 800015a:	4283      	cmp	r3, r0
 800015c:	d3fb      	bcc.n	8000156 <HAL_Delay+0x6>
  {
  }
}
 800015e:	4770      	bx	lr
 8000160:	20000200 	.word	0x20000200

08000164 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000164:	4918      	ldr	r1, [pc, #96]	; (80001c8 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x64>)
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8000166:	b430      	push	{r4, r5}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000168:	684c      	ldr	r4, [r1, #4]
 800016a:	6963      	ldr	r3, [r4, #20]
 800016c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8000170:	d127      	bne.n	80001c2 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x5e>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000172:	6962      	ldr	r2, [r4, #20]
 8000174:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8000178:	d111      	bne.n	800019e <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x3a>
  return uwTick;
 800017a:	680b      	ldr	r3, [r1, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800017c:	1a1b      	subs	r3, r3, r0
 800017e:	2b64      	cmp	r3, #100	; 0x64
 8000180:	d9f3      	bls.n	800016a <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x6>
        hi2c->State             = HAL_I2C_STATE_READY;
 8000182:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000184:	634a      	str	r2, [r1, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8000186:	f881 3041 	strb.w	r3, [r1, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800018a:	f881 2042 	strb.w	r2, [r1, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800018e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000190:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000192:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8000196:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800019a:	644b      	str	r3, [r1, #68]	; 0x44
 800019c:	e00f      	b.n	80001be <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x5a>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800019e:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80001a0:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      return HAL_ERROR;
 80001a4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80001a6:	6165      	str	r5, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80001a8:	634b      	str	r3, [r1, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 80001aa:	f881 2041 	strb.w	r2, [r1, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80001ae:	f881 3042 	strb.w	r3, [r1, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80001b2:	6c4a      	ldr	r2, [r1, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80001b4:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80001b8:	f042 0204 	orr.w	r2, r2, #4
 80001bc:	644a      	str	r2, [r1, #68]	; 0x44
}
 80001be:	bc30      	pop	{r4, r5}
 80001c0:	4770      	bx	lr
  return HAL_OK;
 80001c2:	2000      	movs	r0, #0
 80001c4:	e7fb      	b.n	80001be <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x5a>
 80001c6:	bf00      	nop
 80001c8:	20000200 	.word	0x20000200

080001cc <LCD_Bus>:
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
}

inline static void LCD_Bus(uint16_t val)
{
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 80001cc:	0bc3      	lsrs	r3, r0, #15
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 80001ce:	bf14      	ite	ne
 80001d0:	2202      	movne	r2, #2
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001d2:	f44f 3200 	moveq.w	r2, #131072	; 0x20000
 80001d6:	4b37      	ldr	r3, [pc, #220]	; (80002b4 <LCD_Bus+0xe8>)
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 80001d8:	0441      	lsls	r1, r0, #17
 80001da:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001dc:	bf4c      	ite	mi
 80001de:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001e0:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 80001e4:	4b33      	ldr	r3, [pc, #204]	; (80002b4 <LCD_Bus+0xe8>)
 80001e6:	611a      	str	r2, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 80001e8:	0482      	lsls	r2, r0, #18
    GPIOx->BSRR = GPIO_Pin;
 80001ea:	bf4c      	ite	mi
 80001ec:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001ee:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 80001f2:	4b31      	ldr	r3, [pc, #196]	; (80002b8 <LCD_Bus+0xec>)
 80001f4:	611a      	str	r2, [r3, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 80001f6:	04c3      	lsls	r3, r0, #19
    GPIOx->BSRR = GPIO_Pin;
 80001f8:	bf4c      	ite	mi
 80001fa:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001fc:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 8000200:	4b2d      	ldr	r3, [pc, #180]	; (80002b8 <LCD_Bus+0xec>)
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8000202:	0501      	lsls	r1, r0, #20
 8000204:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000206:	bf4c      	ite	mi
 8000208:	2202      	movmi	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800020a:	f44f 3200 	movpl.w	r2, #131072	; 0x20000
 800020e:	4b2a      	ldr	r3, [pc, #168]	; (80002b8 <LCD_Bus+0xec>)
 8000210:	611a      	str	r2, [r3, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8000212:	0542      	lsls	r2, r0, #21
    GPIOx->BSRR = GPIO_Pin;
 8000214:	bf4c      	ite	mi
 8000216:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000218:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 800021c:	4b26      	ldr	r3, [pc, #152]	; (80002b8 <LCD_Bus+0xec>)
 800021e:	611a      	str	r2, [r3, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8000220:	0583      	lsls	r3, r0, #22
    GPIOx->BSRR = GPIO_Pin;
 8000222:	bf4c      	ite	mi
 8000224:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000228:	f04f 4200 	movpl.w	r2, #2147483648	; 0x80000000
 800022c:	4b22      	ldr	r3, [pc, #136]	; (80002b8 <LCD_Bus+0xec>)
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 800022e:	05c1      	lsls	r1, r0, #23
 8000230:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000232:	bf4c      	ite	mi
 8000234:	f44f 4280 	movmi.w	r2, #16384	; 0x4000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000238:	f04f 4280 	movpl.w	r2, #1073741824	; 0x40000000
 800023c:	4b1e      	ldr	r3, [pc, #120]	; (80002b8 <LCD_Bus+0xec>)
 800023e:	611a      	str	r2, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000240:	0602      	lsls	r2, r0, #24
    GPIOx->BSRR = GPIO_Pin;
 8000242:	bf4c      	ite	mi
 8000244:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000246:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 800024a:	4b1a      	ldr	r3, [pc, #104]	; (80002b4 <LCD_Bus+0xe8>)
 800024c:	611a      	str	r2, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800024e:	0643      	lsls	r3, r0, #25
    GPIOx->BSRR = GPIO_Pin;
 8000250:	bf4c      	ite	mi
 8000252:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000254:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 8000258:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <LCD_Bus+0xe8>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800025a:	0681      	lsls	r1, r0, #26
 800025c:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800025e:	bf4c      	ite	mi
 8000260:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000262:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000266:	4b13      	ldr	r3, [pc, #76]	; (80002b4 <LCD_Bus+0xe8>)
 8000268:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800026a:	06c2      	lsls	r2, r0, #27
    GPIOx->BSRR = GPIO_Pin;
 800026c:	bf4c      	ite	mi
 800026e:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000270:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000274:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <LCD_Bus+0xe8>)
 8000276:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000278:	0703      	lsls	r3, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 800027a:	bf4c      	ite	mi
 800027c:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800027e:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 8000282:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <LCD_Bus+0xe8>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000284:	0741      	lsls	r1, r0, #29
 8000286:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000288:	bf4c      	ite	mi
 800028a:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800028c:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 8000290:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <LCD_Bus+0xe8>)
 8000292:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000294:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 8000296:	bf4c      	ite	mi
 8000298:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800029a:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 800029e:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <LCD_Bus+0xec>)
 80002a0:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80002a2:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 80002a4:	bf4c      	ite	mi
 80002a6:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002a8:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80002ac:	4b02      	ldr	r3, [pc, #8]	; (80002b8 <LCD_Bus+0xec>)
 80002ae:	611a      	str	r2, [r3, #16]
}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40010800 	.word	0x40010800
 80002b8:	40011000 	.word	0x40011000

080002bc <LCD_Send_Cmd>:

inline static void LCD_Send_Cmd(uint16_t cmd)
{
 80002bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80002c0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80002c4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80002c8:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 80002cc:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80002d0:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 80002d4:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 80002d8:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 80002dc:	4b24      	ldr	r3, [pc, #144]	; (8000370 <LCD_Send_Cmd+0xb4>)
 80002de:	4a25      	ldr	r2, [pc, #148]	; (8000374 <LCD_Send_Cmd+0xb8>)
 80002e0:	4f25      	ldr	r7, [pc, #148]	; (8000378 <LCD_Send_Cmd+0xbc>)
 80002e2:	6139      	str	r1, [r7, #16]
 80002e4:	f8c7 8010 	str.w	r8, [r7, #16]
 80002e8:	6116      	str	r6, [r2, #16]
 80002ea:	6111      	str	r1, [r2, #16]
 80002ec:	611c      	str	r4, [r3, #16]
 80002ee:	611d      	str	r5, [r3, #16]
 80002f0:	611e      	str	r6, [r3, #16]
 80002f2:	6119      	str	r1, [r3, #16]
 80002f4:	f8c3 e010 	str.w	lr, [r3, #16]
 80002f8:	f8c3 c010 	str.w	ip, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	6115      	str	r5, [r2, #16]
 8000300:	6114      	str	r4, [r2, #16]
 8000302:	d02e      	beq.n	8000362 <LCD_Send_Cmd+0xa6>
    GPIOx->BSRR = GPIO_Pin;
 8000304:	2110      	movs	r1, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000306:	0903      	lsrs	r3, r0, #4
 8000308:	2b02      	cmp	r3, #2
 800030a:	6111      	str	r1, [r2, #16]
 800030c:	d12c      	bne.n	8000368 <LCD_Send_Cmd+0xac>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800030e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000312:	6113      	str	r3, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000314:	0704      	lsls	r4, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 8000316:	bf4c      	ite	mi
 8000318:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800031a:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 800031e:	4b15      	ldr	r3, [pc, #84]	; (8000374 <LCD_Send_Cmd+0xb8>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000320:	0741      	lsls	r1, r0, #29
 8000322:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000324:	bf4c      	ite	mi
 8000326:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000328:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <LCD_Send_Cmd+0xb8>)
    GPIOx->BSRR = GPIO_Pin;
 800032e:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000330:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000332:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 8000334:	bf4c      	ite	mi
 8000336:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000338:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <LCD_Send_Cmd+0xb4>)
 800033e:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000340:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 8000342:	bf4c      	ite	mi
 8000344:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000346:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 800034a:	4b09      	ldr	r3, [pc, #36]	; (8000370 <LCD_Send_Cmd+0xb4>)
 800034c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000350:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000352:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <LCD_Send_Cmd+0xbc>)
 8000358:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800035a:	6119      	str	r1, [r3, #16]
 800035c:	611a      	str	r2, [r3, #16]
	LCD_Bus(cmd);
	LCD_WR_R
	//_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 800035e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000362:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000366:	6113      	str	r3, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000368:	2220      	movs	r2, #32
 800036a:	4b02      	ldr	r3, [pc, #8]	; (8000374 <LCD_Send_Cmd+0xb8>)
 800036c:	611a      	str	r2, [r3, #16]
  }
}
 800036e:	e7d1      	b.n	8000314 <LCD_Send_Cmd+0x58>
 8000370:	40011000 	.word	0x40011000
 8000374:	40010800 	.word	0x40010800
 8000378:	40010c00 	.word	0x40010c00

0800037c <LCD_Send_Dat>:
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800037c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000380:	2101      	movs	r1, #1
 8000382:	4b3f      	ldr	r3, [pc, #252]	; (8000480 <LCD_Send_Dat+0x104>)
 8000384:	6119      	str	r1, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000386:	611a      	str	r2, [r3, #16]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8000388:	0bc3      	lsrs	r3, r0, #15
    GPIOx->BSRR = GPIO_Pin;
 800038a:	bf14      	ite	ne
 800038c:	2202      	movne	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800038e:	f44f 3200 	moveq.w	r2, #131072	; 0x20000
 8000392:	4b3c      	ldr	r3, [pc, #240]	; (8000484 <LCD_Send_Dat+0x108>)
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8000394:	0441      	lsls	r1, r0, #17
 8000396:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000398:	bf4c      	ite	mi
 800039a:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800039c:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 80003a0:	4b38      	ldr	r3, [pc, #224]	; (8000484 <LCD_Send_Dat+0x108>)
 80003a2:	611a      	str	r2, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 80003a4:	0482      	lsls	r2, r0, #18
    GPIOx->BSRR = GPIO_Pin;
 80003a6:	bf4c      	ite	mi
 80003a8:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003aa:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 80003ae:	4b36      	ldr	r3, [pc, #216]	; (8000488 <LCD_Send_Dat+0x10c>)
 80003b0:	611a      	str	r2, [r3, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 80003b2:	04c3      	lsls	r3, r0, #19
    GPIOx->BSRR = GPIO_Pin;
 80003b4:	bf4c      	ite	mi
 80003b6:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003b8:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 80003bc:	4b32      	ldr	r3, [pc, #200]	; (8000488 <LCD_Send_Dat+0x10c>)
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 80003be:	0501      	lsls	r1, r0, #20
 80003c0:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80003c2:	bf4c      	ite	mi
 80003c4:	2202      	movmi	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003c6:	f44f 3200 	movpl.w	r2, #131072	; 0x20000
 80003ca:	4b2f      	ldr	r3, [pc, #188]	; (8000488 <LCD_Send_Dat+0x10c>)
 80003cc:	611a      	str	r2, [r3, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 80003ce:	0542      	lsls	r2, r0, #21
    GPIOx->BSRR = GPIO_Pin;
 80003d0:	bf4c      	ite	mi
 80003d2:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003d4:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 80003d8:	4b2b      	ldr	r3, [pc, #172]	; (8000488 <LCD_Send_Dat+0x10c>)
 80003da:	611a      	str	r2, [r3, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 80003dc:	0583      	lsls	r3, r0, #22
    GPIOx->BSRR = GPIO_Pin;
 80003de:	bf4c      	ite	mi
 80003e0:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003e4:	f04f 4200 	movpl.w	r2, #2147483648	; 0x80000000
 80003e8:	4b27      	ldr	r3, [pc, #156]	; (8000488 <LCD_Send_Dat+0x10c>)
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80003ea:	05c1      	lsls	r1, r0, #23
 80003ec:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80003ee:	bf4c      	ite	mi
 80003f0:	f44f 4280 	movmi.w	r2, #16384	; 0x4000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003f4:	f04f 4280 	movpl.w	r2, #1073741824	; 0x40000000
 80003f8:	4b23      	ldr	r3, [pc, #140]	; (8000488 <LCD_Send_Dat+0x10c>)
 80003fa:	611a      	str	r2, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80003fc:	0602      	lsls	r2, r0, #24
    GPIOx->BSRR = GPIO_Pin;
 80003fe:	bf4c      	ite	mi
 8000400:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000402:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 8000406:	4b1f      	ldr	r3, [pc, #124]	; (8000484 <LCD_Send_Dat+0x108>)
 8000408:	611a      	str	r2, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800040a:	0643      	lsls	r3, r0, #25
    GPIOx->BSRR = GPIO_Pin;
 800040c:	bf4c      	ite	mi
 800040e:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000410:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <LCD_Send_Dat+0x108>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000416:	0681      	lsls	r1, r0, #26
 8000418:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800041a:	bf4c      	ite	mi
 800041c:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800041e:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000422:	4b18      	ldr	r3, [pc, #96]	; (8000484 <LCD_Send_Dat+0x108>)
 8000424:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000426:	06c2      	lsls	r2, r0, #27
    GPIOx->BSRR = GPIO_Pin;
 8000428:	bf4c      	ite	mi
 800042a:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800042c:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <LCD_Send_Dat+0x108>)
 8000432:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000434:	0703      	lsls	r3, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 8000436:	bf4c      	ite	mi
 8000438:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800043a:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 800043e:	4b11      	ldr	r3, [pc, #68]	; (8000484 <LCD_Send_Dat+0x108>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000440:	0741      	lsls	r1, r0, #29
 8000442:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000444:	bf4c      	ite	mi
 8000446:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000448:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 800044c:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <LCD_Send_Dat+0x108>)
    GPIOx->BSRR = GPIO_Pin;
 800044e:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000450:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000452:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 8000454:	bf4c      	ite	mi
 8000456:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000458:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 800045c:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <LCD_Send_Dat+0x10c>)
 800045e:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000460:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 8000462:	bf4c      	ite	mi
 8000464:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000466:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 800046a:	4b07      	ldr	r3, [pc, #28]	; (8000488 <LCD_Send_Dat+0x10c>)
 800046c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000470:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000472:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000476:	4b02      	ldr	r3, [pc, #8]	; (8000480 <LCD_Send_Dat+0x104>)
 8000478:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800047a:	6119      	str	r1, [r3, #16]
 800047c:	611a      	str	r2, [r3, #16]
	LCD_Bus(dat);
	LCD_WR_R
//	_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 800047e:	4770      	bx	lr
 8000480:	40010c00 	.word	0x40010c00
 8000484:	40010800 	.word	0x40010800
 8000488:	40011000 	.word	0x40011000

0800048c <LCD_Window>:


inline static void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{		
 800048c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000490:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8000494:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8000498:	468b      	mov	fp, r1
 800049a:	49ab      	ldr	r1, [pc, #684]	; (8000748 <LCD_Window+0x2bc>)
 800049c:	b085      	sub	sp, #20
 800049e:	9301      	str	r3, [sp, #4]
 80004a0:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 80004a4:	610d      	str	r5, [r1, #16]
 80004a6:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80004aa:	610c      	str	r4, [r1, #16]
 80004ac:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80004b0:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80004b4:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80004b8:	f04f 0810 	mov.w	r8, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004bc:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80004c0:	4ba2      	ldr	r3, [pc, #648]	; (800074c <LCD_Window+0x2c0>)
 80004c2:	4696      	mov	lr, r2
 80004c4:	4aa2      	ldr	r2, [pc, #648]	; (8000750 <LCD_Window+0x2c4>)
 80004c6:	6116      	str	r6, [r2, #16]
 80004c8:	6115      	str	r5, [r2, #16]
 80004ca:	f8c3 c010 	str.w	ip, [r3, #16]
 80004ce:	611f      	str	r7, [r3, #16]
 80004d0:	611e      	str	r6, [r3, #16]
 80004d2:	611d      	str	r5, [r3, #16]
 80004d4:	f8c3 9010 	str.w	r9, [r3, #16]
 80004d8:	f8c3 a010 	str.w	sl, [r3, #16]
 80004dc:	6117      	str	r7, [r2, #16]
 80004de:	f8c2 c010 	str.w	ip, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 80004e2:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004e6:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 80004e8:	2440      	movs	r4, #64	; 0x40
 80004ea:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004ec:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 80004f0:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 80004f2:	f8c3 8010 	str.w	r8, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004f6:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80004fa:	f04f 0802 	mov.w	r8, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004fe:	611c      	str	r4, [r3, #16]
 8000500:	610e      	str	r6, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000502:	f8c1 8010 	str.w	r8, [r1, #16]
 8000506:	f44f 6880 	mov.w	r8, #1024	; 0x400
 800050a:	f8c1 8010 	str.w	r8, [r1, #16]
 800050e:	f04f 0801 	mov.w	r8, #1
 8000512:	f8c1 8010 	str.w	r8, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000516:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 800051a:	f8c1 8010 	str.w	r8, [r1, #16]
 800051e:	6116      	str	r6, [r2, #16]
 8000520:	6115      	str	r5, [r2, #16]
 8000522:	f8c3 c010 	str.w	ip, [r3, #16]
 8000526:	611f      	str	r7, [r3, #16]
 8000528:	611e      	str	r6, [r3, #16]
 800052a:	611d      	str	r5, [r3, #16]
	uint8_t data[4] = { 0 };
	data[0] = x1 >> 8;
  data[1] = x1 & 0xFF;
  data[2] = x2 >> 8;
  data[3] = x2 & 0xFF;
 800052c:	fa5f f58e 	uxtb.w	r5, lr
 8000530:	f8c3 9010 	str.w	r9, [r3, #16]
 8000534:	f8c3 a010 	str.w	sl, [r3, #16]
 8000538:	9502      	str	r5, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800053a:	0bc5      	lsrs	r5, r0, #15
    GPIOx->BSRR = GPIO_Pin;
 800053c:	bf18      	it	ne
 800053e:	2504      	movne	r5, #4
	data[0] = x1 >> 8;
 8000540:	ea4f 2410 	mov.w	r4, r0, lsr #8
 8000544:	bf14      	ite	ne
 8000546:	6115      	strne	r5, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000548:	6117      	streq	r7, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800054a:	0667      	lsls	r7, r4, #25
 800054c:	bf54      	ite	pl
 800054e:	f44f 2500 	movpl.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000552:	2508      	movmi	r5, #8
 8000554:	4a7e      	ldr	r2, [pc, #504]	; (8000750 <LCD_Window+0x2c4>)
	data[0] = x1 >> 8;
 8000556:	4621      	mov	r1, r4
 8000558:	6115      	str	r5, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800055a:	06a5      	lsls	r5, r4, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800055c:	bf54      	ite	pl
 800055e:	f44f 1580 	movpl.w	r5, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000562:	2510      	movmi	r5, #16
 8000564:	4a7a      	ldr	r2, [pc, #488]	; (8000750 <LCD_Window+0x2c4>)
 8000566:	f04f 0a02 	mov.w	sl, #2
 800056a:	6115      	str	r5, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800056c:	06e2      	lsls	r2, r4, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800056e:	bf54      	ite	pl
 8000570:	f44f 1500 	movpl.w	r5, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000574:	2520      	movmi	r5, #32
 8000576:	4a76      	ldr	r2, [pc, #472]	; (8000750 <LCD_Window+0x2c4>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000578:	0727      	lsls	r7, r4, #28
 800057a:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800057c:	bf54      	ite	pl
 800057e:	f44f 0580 	movpl.w	r5, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000582:	2540      	movmi	r5, #64	; 0x40
 8000584:	4a72      	ldr	r2, [pc, #456]	; (8000750 <LCD_Window+0x2c4>)
 8000586:	f44f 6980 	mov.w	r9, #1024	; 0x400
 800058a:	6115      	str	r5, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800058c:	0765      	lsls	r5, r4, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800058e:	bf54      	ite	pl
 8000590:	f44f 0500 	movpl.w	r5, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000594:	2580      	movmi	r5, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000596:	07a4      	lsls	r4, r4, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000598:	bf54      	ite	pl
 800059a:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800059e:	2410      	movmi	r4, #16
 80005a0:	4a6b      	ldr	r2, [pc, #428]	; (8000750 <LCD_Window+0x2c4>)
 80005a2:	f04f 0801 	mov.w	r8, #1
 80005a6:	6115      	str	r5, [r2, #16]
 80005a8:	4a68      	ldr	r2, [pc, #416]	; (800074c <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005aa:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80005ae:	6114      	str	r4, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80005b0:	07ca      	lsls	r2, r1, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005b2:	bf54      	ite	pl
 80005b4:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80005b8:	2120      	movmi	r1, #32
 80005ba:	4a64      	ldr	r2, [pc, #400]	; (800074c <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005bc:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 80005c0:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005c2:	4961      	ldr	r1, [pc, #388]	; (8000748 <LCD_Window+0x2bc>)
 80005c4:	4a61      	ldr	r2, [pc, #388]	; (800074c <LCD_Window+0x2c0>)
 80005c6:	610d      	str	r5, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 80005c8:	f8c1 a010 	str.w	sl, [r1, #16]
 80005cc:	f8c1 9010 	str.w	r9, [r1, #16]
 80005d0:	f8c1 8010 	str.w	r8, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005d4:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 80005d8:	f8c1 8010 	str.w	r8, [r1, #16]
 80005dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80005e0:	4c5b      	ldr	r4, [pc, #364]	; (8000750 <LCD_Window+0x2c4>)
 80005e2:	f44f 2c80 	mov.w	ip, #262144	; 0x40000
 80005e6:	6125      	str	r5, [r4, #16]
 80005e8:	6127      	str	r7, [r4, #16]
 80005ea:	6111      	str	r1, [r2, #16]
 80005ec:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80005f0:	f8c2 c010 	str.w	ip, [r2, #16]
 80005f4:	6115      	str	r5, [r2, #16]
 80005f6:	6117      	str	r7, [r2, #16]
 80005f8:	6111      	str	r1, [r2, #16]
 80005fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  data[1] = x1 & 0xFF;
 80005fe:	b2c6      	uxtb	r6, r0
 8000600:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000602:	09f2      	lsrs	r2, r6, #7
    GPIOx->BSRR = GPIO_Pin;
 8000604:	bf16      	itet	ne
 8000606:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000608:	f8c4 c010 	streq.w	ip, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 800060c:	6122      	strne	r2, [r4, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800060e:	0647      	lsls	r7, r0, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000610:	bf54      	ite	pl
 8000612:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000616:	2108      	movmi	r1, #8
 8000618:	4a4d      	ldr	r2, [pc, #308]	; (8000750 <LCD_Window+0x2c4>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800061a:	0685      	lsls	r5, r0, #26
 800061c:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800061e:	bf54      	ite	pl
 8000620:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000624:	2110      	movmi	r1, #16
 8000626:	4a4a      	ldr	r2, [pc, #296]	; (8000750 <LCD_Window+0x2c4>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000628:	06c4      	lsls	r4, r0, #27
 800062a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800062c:	bf54      	ite	pl
 800062e:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000632:	2120      	movmi	r1, #32
 8000634:	4a46      	ldr	r2, [pc, #280]	; (8000750 <LCD_Window+0x2c4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000636:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 800063a:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800063c:	0701      	lsls	r1, r0, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800063e:	bf54      	ite	pl
 8000640:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000644:	2140      	movmi	r1, #64	; 0x40
 8000646:	4a42      	ldr	r2, [pc, #264]	; (8000750 <LCD_Window+0x2c4>)
 8000648:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 800064c:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800064e:	0742      	lsls	r2, r0, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000650:	bf54      	ite	pl
 8000652:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000656:	2180      	movmi	r1, #128	; 0x80
 8000658:	4a3d      	ldr	r2, [pc, #244]	; (8000750 <LCD_Window+0x2c4>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800065a:	0787      	lsls	r7, r0, #30
 800065c:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800065e:	bf54      	ite	pl
 8000660:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000664:	2110      	movmi	r1, #16
 8000666:	4a39      	ldr	r2, [pc, #228]	; (800074c <LCD_Window+0x2c0>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000668:	07f5      	lsls	r5, r6, #31
 800066a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800066c:	bf54      	ite	pl
 800066e:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000672:	2120      	movmi	r1, #32
 8000674:	2702      	movs	r7, #2
 8000676:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800067a:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 800067e:	4a33      	ldr	r2, [pc, #204]	; (800074c <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000680:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000684:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000686:	4930      	ldr	r1, [pc, #192]	; (8000748 <LCD_Window+0x2bc>)
 8000688:	4a30      	ldr	r2, [pc, #192]	; (800074c <LCD_Window+0x2c0>)
 800068a:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800068c:	610f      	str	r7, [r1, #16]
 800068e:	f8c1 a010 	str.w	sl, [r1, #16]
 8000692:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000696:	f8c1 8010 	str.w	r8, [r1, #16]
 800069a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800069e:	482c      	ldr	r0, [pc, #176]	; (8000750 <LCD_Window+0x2c4>)
 80006a0:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80006a4:	6104      	str	r4, [r0, #16]
 80006a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80006aa:	6105      	str	r5, [r0, #16]
 80006ac:	6111      	str	r1, [r2, #16]
 80006ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80006b2:	6116      	str	r6, [r2, #16]
 80006b4:	6114      	str	r4, [r2, #16]
 80006b6:	6115      	str	r5, [r2, #16]
 80006b8:	f8c2 c010 	str.w	ip, [r2, #16]
 80006bc:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80006be:	ea5f 32de 	movs.w	r2, lr, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 80006c2:	bf18      	it	ne
 80006c4:	2204      	movne	r2, #4
  data[2] = x2 >> 8;
 80006c6:	ea4f 231e 	mov.w	r3, lr, lsr #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006ca:	bf0c      	ite	eq
 80006cc:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 80006ce:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80006d0:	065c      	lsls	r4, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006d2:	bf54      	ite	pl
 80006d4:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80006d8:	2108      	movmi	r1, #8
 80006da:	4a1d      	ldr	r2, [pc, #116]	; (8000750 <LCD_Window+0x2c4>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80006dc:	0698      	lsls	r0, r3, #26
 80006de:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006e0:	bf54      	ite	pl
 80006e2:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80006e6:	2110      	movmi	r1, #16
 80006e8:	4a19      	ldr	r2, [pc, #100]	; (8000750 <LCD_Window+0x2c4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006ea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80006ee:	6111      	str	r1, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80006f0:	06d9      	lsls	r1, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006f2:	bf54      	ite	pl
 80006f4:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80006f8:	2120      	movmi	r1, #32
 80006fa:	4a15      	ldr	r2, [pc, #84]	; (8000750 <LCD_Window+0x2c4>)
 80006fc:	f04f 0a02 	mov.w	sl, #2
 8000700:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000702:	071a      	lsls	r2, r3, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000704:	bf54      	ite	pl
 8000706:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800070a:	2140      	movmi	r1, #64	; 0x40
 800070c:	4a10      	ldr	r2, [pc, #64]	; (8000750 <LCD_Window+0x2c4>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800070e:	075f      	lsls	r7, r3, #29
 8000710:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000712:	bf54      	ite	pl
 8000714:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000718:	2180      	movmi	r1, #128	; 0x80
 800071a:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <LCD_Window+0x2c4>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800071c:	079e      	lsls	r6, r3, #30
 800071e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000720:	bf54      	ite	pl
 8000722:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000726:	2210      	movmi	r2, #16
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <LCD_Window+0x2c0>)
 800072a:	f44f 6980 	mov.w	r9, #1024	; 0x400
 800072e:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000730:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8000734:	f013 0f01 	tst.w	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000738:	bf0c      	ite	eq
 800073a:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800073e:	2220      	movne	r2, #32
 8000740:	f04f 0801 	mov.w	r8, #1
 8000744:	e006      	b.n	8000754 <LCD_Window+0x2c8>
 8000746:	bf00      	nop
 8000748:	40010c00 	.word	0x40010c00
 800074c:	40011000 	.word	0x40011000
 8000750:	40010800 	.word	0x40010800
 8000754:	4bac      	ldr	r3, [pc, #688]	; (8000a08 <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000756:	f44f 2580 	mov.w	r5, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 800075a:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800075c:	4aab      	ldr	r2, [pc, #684]	; (8000a0c <LCD_Window+0x580>)
 800075e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8000762:	6110      	str	r0, [r2, #16]
 8000764:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000768:	f8c2 a010 	str.w	sl, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800076c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000770:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000774:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000778:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800077c:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000780:	4ba1      	ldr	r3, [pc, #644]	; (8000a08 <LCD_Window+0x57c>)
 8000782:	49a3      	ldr	r1, [pc, #652]	; (8000a10 <LCD_Window+0x584>)
 8000784:	f8c2 8010 	str.w	r8, [r2, #16]
 8000788:	6108      	str	r0, [r1, #16]
 800078a:	610c      	str	r4, [r1, #16]
 800078c:	f8c3 c010 	str.w	ip, [r3, #16]
 8000790:	611d      	str	r5, [r3, #16]
 8000792:	6118      	str	r0, [r3, #16]
 8000794:	611c      	str	r4, [r3, #16]
 8000796:	611f      	str	r7, [r3, #16]
 8000798:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800079a:	fa5f f38e 	uxtb.w	r3, lr
 800079e:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 80007a0:	bf16      	itet	ne
 80007a2:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007a4:	610d      	streq	r5, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 80007a6:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80007a8:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80007ac:	bf14      	ite	ne
 80007ae:	2208      	movne	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007b0:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80007b4:	4b96      	ldr	r3, [pc, #600]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80007b6:	f01e 0f20 	tst.w	lr, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007ba:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80007bc:	bf14      	ite	ne
 80007be:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007c0:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80007c4:	4b92      	ldr	r3, [pc, #584]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80007c6:	f01e 0f10 	tst.w	lr, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007ca:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80007cc:	bf14      	ite	ne
 80007ce:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007d0:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80007d4:	4b8e      	ldr	r3, [pc, #568]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80007d6:	f01e 0f08 	tst.w	lr, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007da:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80007dc:	bf14      	ite	ne
 80007de:	2240      	movne	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007e0:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80007e4:	4b8a      	ldr	r3, [pc, #552]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80007e6:	f01e 0f04 	tst.w	lr, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007ea:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80007ec:	bf14      	ite	ne
 80007ee:	2280      	movne	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007f0:	f44f 0200 	moveq.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80007f4:	4b86      	ldr	r3, [pc, #536]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80007f6:	f01e 0f02 	tst.w	lr, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007fa:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80007fc:	bf14      	ite	ne
 80007fe:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000800:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8000804:	4b80      	ldr	r3, [pc, #512]	; (8000a08 <LCD_Window+0x57c>)
 8000806:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800080a:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800080c:	9b02      	ldr	r3, [sp, #8]
 800080e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8000812:	07dd      	lsls	r5, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 8000814:	bf4c      	ite	mi
 8000816:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000818:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 800081c:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8000820:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000824:	f04f 0802 	mov.w	r8, #2
 8000828:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800082c:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
 8000830:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8000834:	4b74      	ldr	r3, [pc, #464]	; (8000a08 <LCD_Window+0x57c>)
 8000836:	4975      	ldr	r1, [pc, #468]	; (8000a0c <LCD_Window+0x580>)
 8000838:	611a      	str	r2, [r3, #16]
 800083a:	4b73      	ldr	r3, [pc, #460]	; (8000a08 <LCD_Window+0x57c>)
 800083c:	4a74      	ldr	r2, [pc, #464]	; (8000a10 <LCD_Window+0x584>)
 800083e:	6108      	str	r0, [r1, #16]
 8000840:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000844:	f8c1 8010 	str.w	r8, [r1, #16]
 8000848:	f04f 0910 	mov.w	r9, #16
 800084c:	f8c1 e010 	str.w	lr, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000850:	610c      	str	r4, [r1, #16]
 8000852:	f8c1 c010 	str.w	ip, [r1, #16]
 8000856:	6110      	str	r0, [r2, #16]
 8000858:	6114      	str	r4, [r2, #16]
 800085a:	611d      	str	r5, [r3, #16]
 800085c:	611e      	str	r6, [r3, #16]
 800085e:	6118      	str	r0, [r3, #16]
 8000860:	611c      	str	r4, [r3, #16]
 8000862:	611f      	str	r7, [r3, #16]
 8000864:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 8000868:	f8c3 a010 	str.w	sl, [r3, #16]
 800086c:	6116      	str	r6, [r2, #16]
 800086e:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000870:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000874:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000876:	2740      	movs	r7, #64	; 0x40
 8000878:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800087a:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
 800087e:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000880:	2720      	movs	r7, #32
 8000882:	f8c3 9010 	str.w	r9, [r3, #16]
 8000886:	611f      	str	r7, [r3, #16]
 8000888:	2701      	movs	r7, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800088a:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800088c:	f8c1 8010 	str.w	r8, [r1, #16]
 8000890:	f8c1 e010 	str.w	lr, [r1, #16]
 8000894:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000896:	f8c1 c010 	str.w	ip, [r1, #16]
 800089a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800089e:	6110      	str	r0, [r2, #16]
 80008a0:	6114      	str	r4, [r2, #16]
 80008a2:	611d      	str	r5, [r3, #16]
 80008a4:	611e      	str	r6, [r3, #16]
 80008a6:	6118      	str	r0, [r3, #16]
 80008a8:	611c      	str	r4, [r3, #16]
	LCD_Send_Cmd(HX8357_CASET);
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
	data[0] = y1 >> 8;
  data[1] = y1;
  data[2] = y2 >> 8;
 80008aa:	9c01      	ldr	r4, [sp, #4]
 80008ac:	6119      	str	r1, [r3, #16]
 80008ae:	f8c3 a010 	str.w	sl, [r3, #16]
 80008b2:	0a23      	lsrs	r3, r4, #8
  data[3] = y2;
 80008b4:	b2e4      	uxtb	r4, r4
 80008b6:	9402      	str	r4, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80008b8:	ea5f 34db 	movs.w	r4, fp, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 80008bc:	bf18      	it	ne
 80008be:	2404      	movne	r4, #4
	data[0] = y1 >> 8;
 80008c0:	ea4f 211b 	mov.w	r1, fp, lsr #8
  data[2] = y2 >> 8;
 80008c4:	9303      	str	r3, [sp, #12]
 80008c6:	bf14      	ite	ne
 80008c8:	6114      	strne	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008ca:	6116      	streq	r6, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80008cc:	064c      	lsls	r4, r1, #25
 80008ce:	bf54      	ite	pl
 80008d0:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80008d4:	2408      	movmi	r4, #8
 80008d6:	4a4e      	ldr	r2, [pc, #312]	; (8000a10 <LCD_Window+0x584>)
	data[0] = y1 >> 8;
 80008d8:	4608      	mov	r0, r1
 80008da:	6114      	str	r4, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80008dc:	068a      	lsls	r2, r1, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008de:	bf54      	ite	pl
 80008e0:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80008e4:	2410      	movmi	r4, #16
 80008e6:	4a4a      	ldr	r2, [pc, #296]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80008e8:	06cf      	lsls	r7, r1, #27
 80008ea:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008ec:	bf54      	ite	pl
 80008ee:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80008f2:	2420      	movmi	r4, #32
 80008f4:	4a46      	ldr	r2, [pc, #280]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80008f6:	070e      	lsls	r6, r1, #28
 80008f8:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008fa:	bf54      	ite	pl
 80008fc:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000900:	2440      	movmi	r4, #64	; 0x40
 8000902:	4a43      	ldr	r2, [pc, #268]	; (8000a10 <LCD_Window+0x584>)
 8000904:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000908:	6114      	str	r4, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800090a:	074c      	lsls	r4, r1, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800090c:	bf54      	ite	pl
 800090e:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000912:	2480      	movmi	r4, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000914:	0789      	lsls	r1, r1, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000916:	bf54      	ite	pl
 8000918:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800091c:	2110      	movmi	r1, #16
 800091e:	4a3c      	ldr	r2, [pc, #240]	; (8000a10 <LCD_Window+0x584>)
 8000920:	f04f 0901 	mov.w	r9, #1
 8000924:	6114      	str	r4, [r2, #16]
 8000926:	4a38      	ldr	r2, [pc, #224]	; (8000a08 <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000928:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 800092c:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800092e:	07c2      	lsls	r2, r0, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000930:	bf54      	ite	pl
 8000932:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000936:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000938:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 800093c:	f04f 0c02 	mov.w	ip, #2
 8000940:	4a31      	ldr	r2, [pc, #196]	; (8000a08 <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000942:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000946:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000948:	4930      	ldr	r1, [pc, #192]	; (8000a0c <LCD_Window+0x580>)
 800094a:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800094e:	610c      	str	r4, [r1, #16]
 8000950:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000954:	f8c1 c010 	str.w	ip, [r1, #16]
 8000958:	f8c1 a010 	str.w	sl, [r1, #16]
 800095c:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000960:	f8c1 8010 	str.w	r8, [r1, #16]
 8000964:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000968:	4a27      	ldr	r2, [pc, #156]	; (8000a08 <LCD_Window+0x57c>)
 800096a:	4829      	ldr	r0, [pc, #164]	; (8000a10 <LCD_Window+0x584>)
  data[1] = y1;
 800096c:	fa5f f58b 	uxtb.w	r5, fp
 8000970:	6104      	str	r4, [r0, #16]
 8000972:	6106      	str	r6, [r0, #16]
 8000974:	f8c2 e010 	str.w	lr, [r2, #16]
 8000978:	6117      	str	r7, [r2, #16]
 800097a:	6114      	str	r4, [r2, #16]
 800097c:	6116      	str	r6, [r2, #16]
 800097e:	6111      	str	r1, [r2, #16]
 8000980:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000984:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000986:	09ea      	lsrs	r2, r5, #7
    GPIOx->BSRR = GPIO_Pin;
 8000988:	bf16      	itet	ne
 800098a:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800098c:	6107      	streq	r7, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 800098e:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000990:	f01b 0f40 	tst.w	fp, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000994:	bf0c      	ite	eq
 8000996:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800099a:	2108      	movne	r1, #8
 800099c:	4a1c      	ldr	r2, [pc, #112]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800099e:	f01b 0f20 	tst.w	fp, #32
 80009a2:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009a4:	bf0c      	ite	eq
 80009a6:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80009aa:	2110      	movne	r1, #16
 80009ac:	4a18      	ldr	r2, [pc, #96]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80009ae:	f01b 0f10 	tst.w	fp, #16
 80009b2:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009b4:	bf0c      	ite	eq
 80009b6:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80009ba:	2120      	movne	r1, #32
 80009bc:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80009be:	f01b 0f08 	tst.w	fp, #8
 80009c2:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009c4:	bf0c      	ite	eq
 80009c6:	f44f 0180 	moveq.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80009ca:	2140      	movne	r1, #64	; 0x40
 80009cc:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80009ce:	f01b 0f04 	tst.w	fp, #4
 80009d2:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009d4:	bf0c      	ite	eq
 80009d6:	f44f 0100 	moveq.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80009da:	2180      	movne	r1, #128	; 0x80
 80009dc:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <LCD_Window+0x584>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80009de:	f01b 0f02 	tst.w	fp, #2
 80009e2:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009e4:	bf0c      	ite	eq
 80009e6:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80009ea:	2110      	movne	r1, #16
 80009ec:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <LCD_Window+0x57c>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80009ee:	07ef      	lsls	r7, r5, #31
 80009f0:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009f2:	bf54      	ite	pl
 80009f4:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80009f8:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009fa:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 80009fe:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8000a02:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8000a06:	e005      	b.n	8000a14 <LCD_Window+0x588>
 8000a08:	40011000 	.word	0x40011000
 8000a0c:	40010c00 	.word	0x40010c00
 8000a10:	40010800 	.word	0x40010800
 8000a14:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000a18:	f04f 0b02 	mov.w	fp, #2
 8000a1c:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000a20:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a24:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000a28:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8000a2c:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000a30:	4a7d      	ldr	r2, [pc, #500]	; (8000c28 <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a32:	487e      	ldr	r0, [pc, #504]	; (8000c2c <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 8000a34:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a36:	497e      	ldr	r1, [pc, #504]	; (8000c30 <LCD_Window+0x7a4>)
 8000a38:	4a7b      	ldr	r2, [pc, #492]	; (8000c28 <LCD_Window+0x79c>)
 8000a3a:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000a3c:	f8c1 b010 	str.w	fp, [r1, #16]
 8000a40:	f8c1 a010 	str.w	sl, [r1, #16]
 8000a44:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a48:	f8c1 8010 	str.w	r8, [r1, #16]
 8000a4c:	6104      	str	r4, [r0, #16]
 8000a4e:	6105      	str	r5, [r0, #16]
 8000a50:	f8c2 e010 	str.w	lr, [r2, #16]
 8000a54:	6116      	str	r6, [r2, #16]
 8000a56:	6114      	str	r4, [r2, #16]
 8000a58:	6115      	str	r5, [r2, #16]
 8000a5a:	f8c2 c010 	str.w	ip, [r2, #16]
 8000a5e:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000a60:	9a01      	ldr	r2, [sp, #4]
    GPIOx->BSRR = GPIO_Pin;
 8000a62:	f04f 0a02 	mov.w	sl, #2
 8000a66:	0bd2      	lsrs	r2, r2, #15
 8000a68:	bf16      	itet	ne
 8000a6a:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a6c:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000a6e:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000a70:	065e      	lsls	r6, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a72:	bf54      	ite	pl
 8000a74:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000a78:	2108      	movmi	r1, #8
 8000a7a:	4a6c      	ldr	r2, [pc, #432]	; (8000c2c <LCD_Window+0x7a0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000a7c:	069d      	lsls	r5, r3, #26
 8000a7e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a80:	bf54      	ite	pl
 8000a82:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000a86:	2110      	movmi	r1, #16
 8000a88:	4a68      	ldr	r2, [pc, #416]	; (8000c2c <LCD_Window+0x7a0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000a8a:	06dc      	lsls	r4, r3, #27
 8000a8c:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a8e:	bf54      	ite	pl
 8000a90:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000a94:	2120      	movmi	r1, #32
 8000a96:	4a65      	ldr	r2, [pc, #404]	; (8000c2c <LCD_Window+0x7a0>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000a98:	0718      	lsls	r0, r3, #28
 8000a9a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a9c:	bf54      	ite	pl
 8000a9e:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000aa2:	2140      	movmi	r1, #64	; 0x40
 8000aa4:	4a61      	ldr	r2, [pc, #388]	; (8000c2c <LCD_Window+0x7a0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aa6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000aaa:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000aac:	0759      	lsls	r1, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aae:	bf54      	ite	pl
 8000ab0:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000ab4:	2180      	movmi	r1, #128	; 0x80
 8000ab6:	4a5d      	ldr	r2, [pc, #372]	; (8000c2c <LCD_Window+0x7a0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000ab8:	079b      	lsls	r3, r3, #30
 8000aba:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000abc:	bf54      	ite	pl
 8000abe:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000ac2:	2210      	movmi	r2, #16
 8000ac4:	4b58      	ldr	r3, [pc, #352]	; (8000c28 <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ac6:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000aca:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000acc:	9b03      	ldr	r3, [sp, #12]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ace:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8000ad2:	07df      	lsls	r7, r3, #31
 8000ad4:	bf54      	ite	pl
 8000ad6:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000ada:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000adc:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000ae0:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8000ae4:	f04f 0801 	mov.w	r8, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ae8:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8000aec:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000af0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000af4:	4b4c      	ldr	r3, [pc, #304]	; (8000c28 <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000af6:	494d      	ldr	r1, [pc, #308]	; (8000c2c <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 8000af8:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000afa:	4a4d      	ldr	r2, [pc, #308]	; (8000c30 <LCD_Window+0x7a4>)
 8000afc:	4b4a      	ldr	r3, [pc, #296]	; (8000c28 <LCD_Window+0x79c>)
 8000afe:	6110      	str	r0, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b00:	f8c2 a010 	str.w	sl, [r2, #16]
 8000b04:	f8c2 9010 	str.w	r9, [r2, #16]
 8000b08:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b0c:	f8c2 e010 	str.w	lr, [r2, #16]
 8000b10:	6108      	str	r0, [r1, #16]
 8000b12:	610c      	str	r4, [r1, #16]
 8000b14:	f8c3 c010 	str.w	ip, [r3, #16]
 8000b18:	611d      	str	r5, [r3, #16]
 8000b1a:	6118      	str	r0, [r3, #16]
 8000b1c:	611c      	str	r4, [r3, #16]
 8000b1e:	611f      	str	r7, [r3, #16]
 8000b20:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000b22:	9b02      	ldr	r3, [sp, #8]
 8000b24:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b28:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 8000b2a:	bf1c      	itt	ne
 8000b2c:	2304      	movne	r3, #4
 8000b2e:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000b30:	9b01      	ldr	r3, [sp, #4]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b32:	bf08      	it	eq
 8000b34:	610d      	streq	r5, [r1, #16]
 8000b36:	065e      	lsls	r6, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 8000b38:	bf4c      	ite	mi
 8000b3a:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b3c:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 8000b40:	4b3a      	ldr	r3, [pc, #232]	; (8000c2c <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 8000b42:	2602      	movs	r6, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b44:	611a      	str	r2, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000b46:	9b01      	ldr	r3, [sp, #4]
 8000b48:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 8000b4c:	069d      	lsls	r5, r3, #26
    GPIOx->BSRR = GPIO_Pin;
 8000b4e:	bf4c      	ite	mi
 8000b50:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b52:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000b56:	4b35      	ldr	r3, [pc, #212]	; (8000c2c <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 8000b58:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b5c:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000b5e:	9b01      	ldr	r3, [sp, #4]
 8000b60:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 8000b64:	06dc      	lsls	r4, r3, #27
    GPIOx->BSRR = GPIO_Pin;
 8000b66:	bf4c      	ite	mi
 8000b68:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b6a:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000b6e:	4b2f      	ldr	r3, [pc, #188]	; (8000c2c <LCD_Window+0x7a0>)
 8000b70:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8000b74:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000b76:	9b01      	ldr	r3, [sp, #4]
 8000b78:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 8000b7c:	0718      	lsls	r0, r3, #28
    GPIOx->BSRR = GPIO_Pin;
 8000b7e:	bf4c      	ite	mi
 8000b80:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b82:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 8000b86:	4b29      	ldr	r3, [pc, #164]	; (8000c2c <LCD_Window+0x7a0>)
 8000b88:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b8c:	611a      	str	r2, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000b8e:	9b01      	ldr	r3, [sp, #4]
 8000b90:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000b94:	0759      	lsls	r1, r3, #29
    GPIOx->BSRR = GPIO_Pin;
 8000b96:	bf4c      	ite	mi
 8000b98:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b9a:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 8000b9e:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <LCD_Window+0x7a0>)
 8000ba0:	4922      	ldr	r1, [pc, #136]	; (8000c2c <LCD_Window+0x7a0>)
 8000ba2:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000ba4:	9b01      	ldr	r3, [sp, #4]
    GPIOx->BSRR = GPIO_Pin;
 8000ba6:	f04f 0910 	mov.w	r9, #16
 8000baa:	079a      	lsls	r2, r3, #30
 8000bac:	bf4c      	ite	mi
 8000bae:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bb0:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <LCD_Window+0x79c>)
    GPIOx->BSRR = GPIO_Pin;
 8000bb6:	f04f 0840 	mov.w	r8, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bba:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000bbc:	9b02      	ldr	r3, [sp, #8]
 8000bbe:	07db      	lsls	r3, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 8000bc0:	bf4c      	ite	mi
 8000bc2:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bc4:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <LCD_Window+0x79c>)
 8000bca:	611a      	str	r2, [r3, #16]
 8000bcc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <LCD_Window+0x7a4>)
 8000bd2:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000bd4:	611e      	str	r6, [r3, #16]
 8000bd6:	611d      	str	r5, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bd8:	611c      	str	r4, [r3, #16]
 8000bda:	611a      	str	r2, [r3, #16]
 8000bdc:	f102 5270 	add.w	r2, r2, #1006632960	; 0x3c000000
 8000be0:	f502 3288 	add.w	r2, r2, #69632	; 0x11000
 8000be4:	6108      	str	r0, [r1, #16]
 8000be6:	610c      	str	r4, [r1, #16]
 8000be8:	f8c2 c010 	str.w	ip, [r2, #16]
 8000bec:	f8c2 e010 	str.w	lr, [r2, #16]
 8000bf0:	6110      	str	r0, [r2, #16]
 8000bf2:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000bf4:	2480      	movs	r4, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bf6:	f8c2 b010 	str.w	fp, [r2, #16]
 8000bfa:	f8c2 a010 	str.w	sl, [r2, #16]
 8000bfe:	f8c1 e010 	str.w	lr, [r1, #16]
 8000c02:	f8c1 c010 	str.w	ip, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c06:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c0a:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c0c:	f8c1 8010 	str.w	r8, [r1, #16]
 8000c10:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c12:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000c16:	6111      	str	r1, [r2, #16]
 8000c18:	6117      	str	r7, [r2, #16]
 8000c1a:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c1c:	611e      	str	r6, [r3, #16]
 8000c1e:	611d      	str	r5, [r3, #16]
	LCD_Send_Cmd(HX8357_PASET);
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
  LCD_Send_Cmd(HX83h7_RAMWR);
}
 8000c20:	b005      	add	sp, #20
 8000c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c26:	bf00      	nop
 8000c28:	40011000 	.word	0x40011000
 8000c2c:	40010800 	.word	0x40010800
 8000c30:	40010c00 	.word	0x40010c00

08000c34 <LCD_Rect_Fill>:
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(0, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 8000c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c38:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8000c3c:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
 8000c40:	4caf      	ldr	r4, [pc, #700]	; (8000f00 <LCD_Rect_Fill+0x2cc>)
 8000c42:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8000c46:	6125      	str	r5, [r4, #16]
 8000c48:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000c4c:	f8c4 a010 	str.w	sl, [r4, #16]
 8000c50:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000c54:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8000c58:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000c5c:	4681      	mov	r9, r0
 8000c5e:	4696      	mov	lr, r2
 8000c60:	48a8      	ldr	r0, [pc, #672]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
 8000c62:	4aa9      	ldr	r2, [pc, #676]	; (8000f08 <LCD_Rect_Fill+0x2d4>)
 8000c64:	6106      	str	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c66:	f04f 0b10 	mov.w	fp, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c6a:	6105      	str	r5, [r0, #16]
 8000c6c:	f8c2 c010 	str.w	ip, [r2, #16]
 8000c70:	6117      	str	r7, [r2, #16]
 8000c72:	6116      	str	r6, [r2, #16]
 8000c74:	6115      	str	r5, [r2, #16]
 8000c76:	f8c2 8010 	str.w	r8, [r2, #16]
 8000c7a:	f8c2 a010 	str.w	sl, [r2, #16]
 8000c7e:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
 8000c82:	6107      	str	r7, [r0, #16]
 8000c84:	f8c0 c010 	str.w	ip, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c88:	f8c0 b010 	str.w	fp, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c8c:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c90:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8000c94:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c98:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
 8000c9c:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ca0:	f8c2 b010 	str.w	fp, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ca4:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000ca8:	f04f 0b02 	mov.w	fp, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cac:	f8c2 a010 	str.w	sl, [r2, #16]
 8000cb0:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000cb2:	f8c4 b010 	str.w	fp, [r4, #16]
 8000cb6:	f44f 6b80 	mov.w	fp, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cba:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000cbe:	f8c4 b010 	str.w	fp, [r4, #16]
 8000cc2:	f04f 0b01 	mov.w	fp, #1
 8000cc6:	f8c4 b010 	str.w	fp, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cca:	f8c4 a010 	str.w	sl, [r4, #16]
 8000cce:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000cd2:	6106      	str	r6, [r0, #16]
 8000cd4:	6105      	str	r5, [r0, #16]
 8000cd6:	f8c2 c010 	str.w	ip, [r2, #16]
 8000cda:	6117      	str	r7, [r2, #16]
 8000cdc:	6116      	str	r6, [r2, #16]
 8000cde:	6115      	str	r5, [r2, #16]
	uint32_t i = 0;
	uint32_t j = (uint32_t) w * (uint32_t) h;
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000ce0:	1e4d      	subs	r5, r1, #1
 8000ce2:	441d      	add	r5, r3
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8000ce4:	fb03 f30e 	mul.w	r3, r3, lr
 8000ce8:	f8c2 8010 	str.w	r8, [r2, #16]
 8000cec:	f8c2 a010 	str.w	sl, [r2, #16]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000cf0:	f109 32ff 	add.w	r2, r9, #4294967295
{
 8000cf4:	b08f      	sub	sp, #60	; 0x3c
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000cf6:	4472      	add	r2, lr
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8000cf8:	9301      	str	r3, [sp, #4]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000cfa:	b293      	uxth	r3, r2
 8000cfc:	9302      	str	r3, [sp, #8]
  data[2] = x2 >> 8;
 8000cfe:	f3c5 2207 	ubfx	r2, r5, #8, #8
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000d02:	b2ab      	uxth	r3, r5
  data[3] = x2 & 0xFF;
 8000d04:	b2ed      	uxtb	r5, r5
 8000d06:	9503      	str	r5, [sp, #12]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000d08:	0bcd      	lsrs	r5, r1, #15
    GPIOx->BSRR = GPIO_Pin;
 8000d0a:	bf18      	it	ne
 8000d0c:	2504      	movne	r5, #4
	data[0] = x1 >> 8;
 8000d0e:	ea4f 2411 	mov.w	r4, r1, lsr #8
  data[2] = x2 >> 8;
 8000d12:	9204      	str	r2, [sp, #16]
 8000d14:	bf14      	ite	ne
 8000d16:	6105      	strne	r5, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d18:	6107      	streq	r7, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000d1a:	0667      	lsls	r7, r4, #25
 8000d1c:	bf54      	ite	pl
 8000d1e:	f44f 2500 	movpl.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000d22:	2508      	movmi	r5, #8
 8000d24:	4877      	ldr	r0, [pc, #476]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
	data[0] = x1 >> 8;
 8000d26:	4626      	mov	r6, r4
 8000d28:	6105      	str	r5, [r0, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000d2a:	06a5      	lsls	r5, r4, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d2c:	bf54      	ite	pl
 8000d2e:	f44f 1580 	movpl.w	r5, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000d32:	2510      	movmi	r5, #16
 8000d34:	4873      	ldr	r0, [pc, #460]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
 8000d36:	f04f 0b02 	mov.w	fp, #2
 8000d3a:	6105      	str	r5, [r0, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000d3c:	06e0      	lsls	r0, r4, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d3e:	bf54      	ite	pl
 8000d40:	f44f 1500 	movpl.w	r5, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000d44:	2520      	movmi	r5, #32
 8000d46:	486f      	ldr	r0, [pc, #444]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000d48:	0727      	lsls	r7, r4, #28
 8000d4a:	6105      	str	r5, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d4c:	bf54      	ite	pl
 8000d4e:	f44f 0580 	movpl.w	r5, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000d52:	2540      	movmi	r5, #64	; 0x40
 8000d54:	486b      	ldr	r0, [pc, #428]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
 8000d56:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000d5a:	6105      	str	r5, [r0, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000d5c:	0765      	lsls	r5, r4, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d5e:	bf54      	ite	pl
 8000d60:	f44f 0500 	movpl.w	r5, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000d64:	2580      	movmi	r5, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000d66:	07a4      	lsls	r4, r4, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d68:	bf54      	ite	pl
 8000d6a:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000d6e:	2410      	movmi	r4, #16
 8000d70:	4864      	ldr	r0, [pc, #400]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d72:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000d76:	6105      	str	r5, [r0, #16]
 8000d78:	4863      	ldr	r0, [pc, #396]	; (8000f08 <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d7a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000d7e:	6104      	str	r4, [r0, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000d80:	07f0      	lsls	r0, r6, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d82:	bf54      	ite	pl
 8000d84:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000d88:	2420      	movmi	r4, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d8a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000d8e:	485e      	ldr	r0, [pc, #376]	; (8000f08 <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d90:	4d5c      	ldr	r5, [pc, #368]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = GPIO_Pin;
 8000d92:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d94:	4c5a      	ldr	r4, [pc, #360]	; (8000f00 <LCD_Rect_Fill+0x2cc>)
 8000d96:	485c      	ldr	r0, [pc, #368]	; (8000f08 <LCD_Rect_Fill+0x2d4>)
 8000d98:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000d9a:	f8c4 b010 	str.w	fp, [r4, #16]
 8000d9e:	f8c4 a010 	str.w	sl, [r4, #16]
 8000da2:	f04f 0a01 	mov.w	sl, #1
 8000da6:	f8c4 a010 	str.w	sl, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000daa:	f8c4 8010 	str.w	r8, [r4, #16]
 8000dae:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8000db2:	612e      	str	r6, [r5, #16]
 8000db4:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 8000db8:	612f      	str	r7, [r5, #16]
 8000dba:	6104      	str	r4, [r0, #16]
 8000dbc:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8000dc0:	f8c0 e010 	str.w	lr, [r0, #16]
 8000dc4:	6106      	str	r6, [r0, #16]
 8000dc6:	6107      	str	r7, [r0, #16]
 8000dc8:	6104      	str	r4, [r0, #16]
 8000dca:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  data[1] = x1 & 0xFF;
 8000dce:	fa5f fc81 	uxtb.w	ip, r1
 8000dd2:	6104      	str	r4, [r0, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000dd4:	ea5f 10dc 	movs.w	r0, ip, lsr #7
    GPIOx->BSRR = GPIO_Pin;
 8000dd8:	bf16      	itet	ne
 8000dda:	2004      	movne	r0, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ddc:	f8c5 e010 	streq.w	lr, [r5, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000de0:	6128      	strne	r0, [r5, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000de2:	064f      	lsls	r7, r1, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000de4:	bf54      	ite	pl
 8000de6:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000dea:	2408      	movmi	r4, #8
 8000dec:	4845      	ldr	r0, [pc, #276]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000dee:	068e      	lsls	r6, r1, #26
 8000df0:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000df2:	bf54      	ite	pl
 8000df4:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000df8:	2410      	movmi	r4, #16
 8000dfa:	4842      	ldr	r0, [pc, #264]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000dfc:	06cd      	lsls	r5, r1, #27
 8000dfe:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e00:	bf54      	ite	pl
 8000e02:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000e06:	2420      	movmi	r4, #32
 8000e08:	483e      	ldr	r0, [pc, #248]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e0a:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000e0e:	6104      	str	r4, [r0, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000e10:	070c      	lsls	r4, r1, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e12:	bf54      	ite	pl
 8000e14:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000e18:	2440      	movmi	r4, #64	; 0x40
 8000e1a:	483a      	ldr	r0, [pc, #232]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
 8000e1c:	f04f 0b02 	mov.w	fp, #2
 8000e20:	6104      	str	r4, [r0, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000e22:	0748      	lsls	r0, r1, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e24:	bf54      	ite	pl
 8000e26:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000e2a:	2480      	movmi	r4, #128	; 0x80
 8000e2c:	4835      	ldr	r0, [pc, #212]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000e2e:	078f      	lsls	r7, r1, #30
 8000e30:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e32:	bf54      	ite	pl
 8000e34:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000e38:	2010      	movmi	r0, #16
 8000e3a:	4933      	ldr	r1, [pc, #204]	; (8000f08 <LCD_Rect_Fill+0x2d4>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000e3c:	f01c 0f01 	tst.w	ip, #1
 8000e40:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e42:	bf0c      	ite	eq
 8000e44:	f44f 1000 	moveq.w	r0, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000e48:	2020      	movne	r0, #32
 8000e4a:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000e4e:	492e      	ldr	r1, [pc, #184]	; (8000f08 <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e50:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000e54:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e56:	482a      	ldr	r0, [pc, #168]	; (8000f00 <LCD_Rect_Fill+0x2cc>)
 8000e58:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8000e5c:	6105      	str	r5, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e5e:	f8c0 b010 	str.w	fp, [r0, #16]
 8000e62:	f8c0 a010 	str.w	sl, [r0, #16]
 8000e66:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e6a:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000e6e:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e72:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8000e76:	f8c0 8010 	str.w	r8, [r0, #16]
 8000e7a:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8000e7e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000e82:	4921      	ldr	r1, [pc, #132]	; (8000f08 <LCD_Rect_Fill+0x2d4>)
 8000e84:	4c1f      	ldr	r4, [pc, #124]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = GPIO_Pin;
 8000e86:	f04f 0b02 	mov.w	fp, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e8a:	6125      	str	r5, [r4, #16]
 8000e8c:	6126      	str	r6, [r4, #16]
 8000e8e:	f8c1 e010 	str.w	lr, [r1, #16]
 8000e92:	610f      	str	r7, [r1, #16]
 8000e94:	610d      	str	r5, [r1, #16]
 8000e96:	610e      	str	r6, [r1, #16]
 8000e98:	6108      	str	r0, [r1, #16]
 8000e9a:	f8c1 c010 	str.w	ip, [r1, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000e9e:	0bd9      	lsrs	r1, r3, #15
    GPIOx->BSRR = GPIO_Pin;
 8000ea0:	bf16      	itet	ne
 8000ea2:	2104      	movne	r1, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ea4:	6127      	streq	r7, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ea6:	6121      	strne	r1, [r4, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000ea8:	0656      	lsls	r6, r2, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eaa:	bf54      	ite	pl
 8000eac:	f44f 2000 	movpl.w	r0, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000eb0:	2008      	movmi	r0, #8
 8000eb2:	4914      	ldr	r1, [pc, #80]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000eb4:	0695      	lsls	r5, r2, #26
 8000eb6:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eb8:	bf54      	ite	pl
 8000eba:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000ebe:	2010      	movmi	r0, #16
 8000ec0:	4910      	ldr	r1, [pc, #64]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000ec2:	06d4      	lsls	r4, r2, #27
 8000ec4:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ec6:	bf54      	ite	pl
 8000ec8:	f44f 1000 	movpl.w	r0, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000ecc:	2020      	movmi	r0, #32
 8000ece:	490d      	ldr	r1, [pc, #52]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ed0:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000ed4:	6108      	str	r0, [r1, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000ed6:	0710      	lsls	r0, r2, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ed8:	bf54      	ite	pl
 8000eda:	f44f 0080 	movpl.w	r0, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000ede:	2040      	movmi	r0, #64	; 0x40
 8000ee0:	4908      	ldr	r1, [pc, #32]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
 8000ee2:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000ee6:	6108      	str	r0, [r1, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000ee8:	0751      	lsls	r1, r2, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eea:	bf54      	ite	pl
 8000eec:	f44f 0000 	movpl.w	r0, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000ef0:	2080      	movmi	r0, #128	; 0x80
 8000ef2:	4904      	ldr	r1, [pc, #16]	; (8000f04 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000ef4:	0797      	lsls	r7, r2, #30
 8000ef6:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ef8:	bf58      	it	pl
 8000efa:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 8000efe:	e005      	b.n	8000f0c <LCD_Rect_Fill+0x2d8>
 8000f00:	40010c00 	.word	0x40010c00
 8000f04:	40010800 	.word	0x40010800
 8000f08:	40011000 	.word	0x40011000
    GPIOx->BSRR = GPIO_Pin;
 8000f0c:	bf48      	it	mi
 8000f0e:	2110      	movmi	r1, #16
 8000f10:	4aa9      	ldr	r2, [pc, #676]	; (80011b8 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f12:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000f16:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000f18:	9a04      	ldr	r2, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f1a:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8000f1e:	07d6      	lsls	r6, r2, #31
 8000f20:	bf54      	ite	pl
 8000f22:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000f26:	2120      	movmi	r1, #32
 8000f28:	4aa3      	ldr	r2, [pc, #652]	; (80011b8 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f2a:	f44f 2680 	mov.w	r6, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000f2e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f30:	49a2      	ldr	r1, [pc, #648]	; (80011bc <LCD_Rect_Fill+0x588>)
 8000f32:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000f36:	610c      	str	r4, [r1, #16]
 8000f38:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000f3c:	f8c1 b010 	str.w	fp, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f40:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000f44:	f8c1 a010 	str.w	sl, [r1, #16]
 8000f48:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f4c:	4a9a      	ldr	r2, [pc, #616]	; (80011b8 <LCD_Rect_Fill+0x584>)
 8000f4e:	489c      	ldr	r0, [pc, #624]	; (80011c0 <LCD_Rect_Fill+0x58c>)
    GPIOx->BSRR = GPIO_Pin;
 8000f50:	f8c1 a010 	str.w	sl, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f54:	f8c1 8010 	str.w	r8, [r1, #16]
 8000f58:	6104      	str	r4, [r0, #16]
 8000f5a:	6105      	str	r5, [r0, #16]
 8000f5c:	f8c2 e010 	str.w	lr, [r2, #16]
 8000f60:	6116      	str	r6, [r2, #16]
 8000f62:	6114      	str	r4, [r2, #16]
 8000f64:	6115      	str	r5, [r2, #16]
 8000f66:	f8c2 c010 	str.w	ip, [r2, #16]
 8000f6a:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000f6c:	9a03      	ldr	r2, [sp, #12]
    GPIOx->BSRR = GPIO_Pin;
 8000f6e:	f04f 0e02 	mov.w	lr, #2
 8000f72:	09d2      	lsrs	r2, r2, #7
 8000f74:	bf16      	itet	ne
 8000f76:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f78:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000f7a:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000f7c:	065d      	lsls	r5, r3, #25
 8000f7e:	bf4c      	ite	mi
 8000f80:	2108      	movmi	r1, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f82:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
 8000f86:	4a8e      	ldr	r2, [pc, #568]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000f88:	069c      	lsls	r4, r3, #26
 8000f8a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000f8c:	bf4c      	ite	mi
 8000f8e:	2110      	movmi	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f90:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 8000f94:	4a8a      	ldr	r2, [pc, #552]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000f96:	06d8      	lsls	r0, r3, #27
 8000f98:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000f9a:	bf4c      	ite	mi
 8000f9c:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f9e:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
 8000fa2:	4a87      	ldr	r2, [pc, #540]	; (80011c0 <LCD_Rect_Fill+0x58c>)
 8000fa4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000fa8:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000faa:	0719      	lsls	r1, r3, #28
    GPIOx->BSRR = GPIO_Pin;
 8000fac:	bf4c      	ite	mi
 8000fae:	2140      	movmi	r1, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fb0:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
 8000fb4:	4a82      	ldr	r2, [pc, #520]	; (80011c0 <LCD_Rect_Fill+0x58c>)
 8000fb6:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8000fba:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000fbc:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = GPIO_Pin;
 8000fbe:	bf4c      	ite	mi
 8000fc0:	2180      	movmi	r1, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fc2:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
 8000fc6:	4a7e      	ldr	r2, [pc, #504]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000fc8:	079f      	lsls	r7, r3, #30
 8000fca:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000fcc:	bf4c      	ite	mi
 8000fce:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fd0:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000fd4:	4b78      	ldr	r3, [pc, #480]	; (80011b8 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = GPIO_Pin;
 8000fd6:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fda:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000fdc:	9b03      	ldr	r3, [sp, #12]
 8000fde:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
 8000fe2:	f013 0f01 	tst.w	r3, #1
    GPIOx->BSRR = GPIO_Pin;
 8000fe6:	bf14      	ite	ne
 8000fe8:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fea:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000fee:	4973      	ldr	r1, [pc, #460]	; (80011bc <LCD_Rect_Fill+0x588>)
    GPIOx->BSRR = GPIO_Pin;
 8000ff0:	4b71      	ldr	r3, [pc, #452]	; (80011b8 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ff2:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8000ff6:	611a      	str	r2, [r3, #16]
 8000ff8:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8000ffc:	6108      	str	r0, [r1, #16]
 8000ffe:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8001002:	f8c1 e010 	str.w	lr, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001006:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 800100a:	f8c1 c010 	str.w	ip, [r1, #16]
 800100e:	f04f 0810 	mov.w	r8, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001012:	610c      	str	r4, [r1, #16]
 8001014:	610f      	str	r7, [r1, #16]
 8001016:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 800101a:	4b67      	ldr	r3, [pc, #412]	; (80011b8 <LCD_Rect_Fill+0x584>)
 800101c:	4a68      	ldr	r2, [pc, #416]	; (80011c0 <LCD_Rect_Fill+0x58c>)
 800101e:	6110      	str	r0, [r2, #16]
 8001020:	6114      	str	r4, [r2, #16]
 8001022:	611d      	str	r5, [r3, #16]
 8001024:	611e      	str	r6, [r3, #16]
 8001026:	6118      	str	r0, [r3, #16]
 8001028:	611c      	str	r4, [r3, #16]
 800102a:	f8c3 a010 	str.w	sl, [r3, #16]
 800102e:	f8c3 b010 	str.w	fp, [r3, #16]
 8001032:	6116      	str	r6, [r2, #16]
 8001034:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001036:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800103a:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800103c:	2740      	movs	r7, #64	; 0x40
 800103e:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001040:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
 8001044:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001046:	2720      	movs	r7, #32
 8001048:	f8c3 8010 	str.w	r8, [r3, #16]
 800104c:	611f      	str	r7, [r3, #16]
 800104e:	2701      	movs	r7, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001050:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001052:	f8c1 e010 	str.w	lr, [r1, #16]
 8001056:	f8c1 c010 	str.w	ip, [r1, #16]
 800105a:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800105c:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
 8001060:	610f      	str	r7, [r1, #16]
 8001062:	6110      	str	r0, [r2, #16]
 8001064:	6114      	str	r4, [r2, #16]
 8001066:	611d      	str	r5, [r3, #16]
 8001068:	611e      	str	r6, [r3, #16]
 800106a:	6118      	str	r0, [r3, #16]
 800106c:	611c      	str	r4, [r3, #16]
  data[2] = y2 >> 8;
 800106e:	9c02      	ldr	r4, [sp, #8]
 8001070:	f8c3 a010 	str.w	sl, [r3, #16]
 8001074:	f8c3 b010 	str.w	fp, [r3, #16]
 8001078:	0a23      	lsrs	r3, r4, #8
  data[3] = y2;
 800107a:	b2e4      	uxtb	r4, r4
 800107c:	9403      	str	r4, [sp, #12]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800107e:	ea5f 34d9 	movs.w	r4, r9, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8001082:	bf18      	it	ne
 8001084:	2404      	movne	r4, #4
	data[0] = y1 >> 8;
 8001086:	ea4f 2119 	mov.w	r1, r9, lsr #8
  data[2] = y2 >> 8;
 800108a:	9304      	str	r3, [sp, #16]
 800108c:	bf14      	ite	ne
 800108e:	6114      	strne	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001090:	6116      	streq	r6, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001092:	064e      	lsls	r6, r1, #25
 8001094:	bf54      	ite	pl
 8001096:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800109a:	2408      	movmi	r4, #8
 800109c:	4a48      	ldr	r2, [pc, #288]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	data[0] = y1 >> 8;
 800109e:	4608      	mov	r0, r1
 80010a0:	6114      	str	r4, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80010a2:	068c      	lsls	r4, r1, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010a4:	bf54      	ite	pl
 80010a6:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80010aa:	2410      	movmi	r4, #16
 80010ac:	4a44      	ldr	r2, [pc, #272]	; (80011c0 <LCD_Rect_Fill+0x58c>)
 80010ae:	f04f 0b02 	mov.w	fp, #2
 80010b2:	6114      	str	r4, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80010b4:	06ca      	lsls	r2, r1, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010b6:	bf54      	ite	pl
 80010b8:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80010bc:	2420      	movmi	r4, #32
 80010be:	4a40      	ldr	r2, [pc, #256]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80010c0:	070f      	lsls	r7, r1, #28
 80010c2:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010c4:	bf54      	ite	pl
 80010c6:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80010ca:	2440      	movmi	r4, #64	; 0x40
 80010cc:	4a3c      	ldr	r2, [pc, #240]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80010ce:	074e      	lsls	r6, r1, #29
 80010d0:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010d2:	bf54      	ite	pl
 80010d4:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80010d8:	2480      	movmi	r4, #128	; 0x80
 80010da:	4a39      	ldr	r2, [pc, #228]	; (80011c0 <LCD_Rect_Fill+0x58c>)
 80010dc:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80010e0:	6114      	str	r4, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80010e2:	078c      	lsls	r4, r1, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010e4:	bf54      	ite	pl
 80010e6:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80010ea:	2110      	movmi	r1, #16
 80010ec:	4a32      	ldr	r2, [pc, #200]	; (80011b8 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010ee:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80010f2:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80010f4:	07c1      	lsls	r1, r0, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010f6:	bf54      	ite	pl
 80010f8:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80010fc:	2120      	movmi	r1, #32
 80010fe:	4a2e      	ldr	r2, [pc, #184]	; (80011b8 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001100:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8001104:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001106:	492d      	ldr	r1, [pc, #180]	; (80011bc <LCD_Rect_Fill+0x588>)
 8001108:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800110c:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800110e:	f8c1 b010 	str.w	fp, [r1, #16]
 8001112:	f8c1 a010 	str.w	sl, [r1, #16]
 8001116:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800111a:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 800111e:	f8c1 a010 	str.w	sl, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001122:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8001126:	f8c1 8010 	str.w	r8, [r1, #16]
 800112a:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 800112e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001132:	4a21      	ldr	r2, [pc, #132]	; (80011b8 <LCD_Rect_Fill+0x584>)
 8001134:	4822      	ldr	r0, [pc, #136]	; (80011c0 <LCD_Rect_Fill+0x58c>)
  data[1] = y1;
 8001136:	fa5f f589 	uxtb.w	r5, r9
 800113a:	6104      	str	r4, [r0, #16]
 800113c:	6106      	str	r6, [r0, #16]
 800113e:	f8c2 e010 	str.w	lr, [r2, #16]
 8001142:	6117      	str	r7, [r2, #16]
 8001144:	6114      	str	r4, [r2, #16]
 8001146:	6116      	str	r6, [r2, #16]
 8001148:	6111      	str	r1, [r2, #16]
 800114a:	f8c2 c010 	str.w	ip, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800114e:	09ea      	lsrs	r2, r5, #7
    GPIOx->BSRR = GPIO_Pin;
 8001150:	bf16      	itet	ne
 8001152:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001154:	6107      	streq	r7, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001156:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001158:	f019 0f40 	tst.w	r9, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800115c:	bf0c      	ite	eq
 800115e:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8001162:	2108      	movne	r1, #8
 8001164:	4a16      	ldr	r2, [pc, #88]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001166:	f019 0f20 	tst.w	r9, #32
 800116a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800116c:	bf0c      	ite	eq
 800116e:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001172:	2110      	movne	r1, #16
 8001174:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001176:	f019 0f10 	tst.w	r9, #16
 800117a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800117c:	bf0c      	ite	eq
 800117e:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001182:	2120      	movne	r1, #32
 8001184:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001186:	f019 0f08 	tst.w	r9, #8
 800118a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800118c:	bf0c      	ite	eq
 800118e:	f44f 0180 	moveq.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001192:	2140      	movne	r1, #64	; 0x40
 8001194:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001196:	f019 0f04 	tst.w	r9, #4
 800119a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800119c:	bf0c      	ite	eq
 800119e:	f44f 0100 	moveq.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80011a2:	2180      	movne	r1, #128	; 0x80
 80011a4:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80011a6:	f019 0f02 	tst.w	r9, #2
 80011aa:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ac:	bf0c      	ite	eq
 80011ae:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80011b2:	2110      	movne	r1, #16
 80011b4:	e006      	b.n	80011c4 <LCD_Rect_Fill+0x590>
 80011b6:	bf00      	nop
 80011b8:	40011000 	.word	0x40011000
 80011bc:	40010c00 	.word	0x40010c00
 80011c0:	40010800 	.word	0x40010800
 80011c4:	4ab5      	ldr	r2, [pc, #724]	; (800149c <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011c6:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80011ca:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80011cc:	07ea      	lsls	r2, r5, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ce:	bf54      	ite	pl
 80011d0:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80011d4:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011d6:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80011da:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80011de:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80011e2:	f04f 0b02 	mov.w	fp, #2
 80011e6:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80011ea:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ee:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 80011f2:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 80011f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 80011fa:	4aa8      	ldr	r2, [pc, #672]	; (800149c <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011fc:	48a8      	ldr	r0, [pc, #672]	; (80014a0 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = GPIO_Pin;
 80011fe:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001200:	49a8      	ldr	r1, [pc, #672]	; (80014a4 <LCD_Rect_Fill+0x870>)
 8001202:	4aa6      	ldr	r2, [pc, #664]	; (800149c <LCD_Rect_Fill+0x868>)
 8001204:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001206:	f8c1 b010 	str.w	fp, [r1, #16]
 800120a:	f8c1 a010 	str.w	sl, [r1, #16]
 800120e:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001212:	f8c1 8010 	str.w	r8, [r1, #16]
 8001216:	6104      	str	r4, [r0, #16]
 8001218:	6105      	str	r5, [r0, #16]
 800121a:	f8c2 e010 	str.w	lr, [r2, #16]
 800121e:	6116      	str	r6, [r2, #16]
 8001220:	6114      	str	r4, [r2, #16]
 8001222:	6115      	str	r5, [r2, #16]
 8001224:	f8c2 c010 	str.w	ip, [r2, #16]
 8001228:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800122a:	9a02      	ldr	r2, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 800122c:	f04f 0a02 	mov.w	sl, #2
 8001230:	0bd2      	lsrs	r2, r2, #15
 8001232:	bf16      	itet	ne
 8001234:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001236:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001238:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800123a:	065f      	lsls	r7, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800123c:	bf54      	ite	pl
 800123e:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8001242:	2108      	movmi	r1, #8
 8001244:	4a96      	ldr	r2, [pc, #600]	; (80014a0 <LCD_Rect_Fill+0x86c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001246:	069e      	lsls	r6, r3, #26
 8001248:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800124a:	bf54      	ite	pl
 800124c:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001250:	2110      	movmi	r1, #16
 8001252:	4a93      	ldr	r2, [pc, #588]	; (80014a0 <LCD_Rect_Fill+0x86c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001254:	06dd      	lsls	r5, r3, #27
 8001256:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001258:	bf54      	ite	pl
 800125a:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800125e:	2120      	movmi	r1, #32
 8001260:	4a8f      	ldr	r2, [pc, #572]	; (80014a0 <LCD_Rect_Fill+0x86c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001262:	071c      	lsls	r4, r3, #28
 8001264:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001266:	bf54      	ite	pl
 8001268:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800126c:	2140      	movmi	r1, #64	; 0x40
 800126e:	4a8c      	ldr	r2, [pc, #560]	; (80014a0 <LCD_Rect_Fill+0x86c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001270:	0758      	lsls	r0, r3, #29
 8001272:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001274:	bf54      	ite	pl
 8001276:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800127a:	2180      	movmi	r1, #128	; 0x80
 800127c:	4a88      	ldr	r2, [pc, #544]	; (80014a0 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800127e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8001282:	6111      	str	r1, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001284:	0799      	lsls	r1, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001286:	bf54      	ite	pl
 8001288:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800128c:	2210      	movmi	r2, #16
 800128e:	4b83      	ldr	r3, [pc, #524]	; (800149c <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001290:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8001294:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001296:	9b04      	ldr	r3, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001298:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 800129c:	f013 0f01 	tst.w	r3, #1
 80012a0:	bf0c      	ite	eq
 80012a2:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80012a6:	2220      	movne	r2, #32
 80012a8:	f44f 6980 	mov.w	r9, #1024	; 0x400
 80012ac:	f04f 0801 	mov.w	r8, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012b0:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 80012b4:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80012b8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80012bc:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80012c0:	4b76      	ldr	r3, [pc, #472]	; (800149c <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012c2:	4977      	ldr	r1, [pc, #476]	; (80014a0 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = GPIO_Pin;
 80012c4:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012c6:	4a77      	ldr	r2, [pc, #476]	; (80014a4 <LCD_Rect_Fill+0x870>)
 80012c8:	4b74      	ldr	r3, [pc, #464]	; (800149c <LCD_Rect_Fill+0x868>)
 80012ca:	6110      	str	r0, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 80012cc:	f8c2 a010 	str.w	sl, [r2, #16]
 80012d0:	f8c2 9010 	str.w	r9, [r2, #16]
 80012d4:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012d8:	f8c2 e010 	str.w	lr, [r2, #16]
 80012dc:	6108      	str	r0, [r1, #16]
 80012de:	610c      	str	r4, [r1, #16]
 80012e0:	f8c3 c010 	str.w	ip, [r3, #16]
 80012e4:	611d      	str	r5, [r3, #16]
 80012e6:	6118      	str	r0, [r3, #16]
 80012e8:	611c      	str	r4, [r3, #16]
 80012ea:	611f      	str	r7, [r3, #16]
 80012ec:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80012ee:	9b03      	ldr	r3, [sp, #12]
 80012f0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012f4:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 80012f6:	bf1c      	itt	ne
 80012f8:	2304      	movne	r3, #4
 80012fa:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80012fc:	9b02      	ldr	r3, [sp, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012fe:	bf08      	it	eq
 8001300:	610d      	streq	r5, [r1, #16]
 8001302:	f013 0f40 	tst.w	r3, #64	; 0x40
    GPIOx->BSRR = GPIO_Pin;
 8001306:	bf14      	ite	ne
 8001308:	2208      	movne	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800130a:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800130e:	4b64      	ldr	r3, [pc, #400]	; (80014a0 <LCD_Rect_Fill+0x86c>)
 8001310:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001314:	611a      	str	r2, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001316:	9b02      	ldr	r3, [sp, #8]
 8001318:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800131c:	f013 0f20 	tst.w	r3, #32
    GPIOx->BSRR = GPIO_Pin;
 8001320:	bf14      	ite	ne
 8001322:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001324:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001328:	4b5d      	ldr	r3, [pc, #372]	; (80014a0 <LCD_Rect_Fill+0x86c>)
 800132a:	2402      	movs	r4, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800132c:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800132e:	9b02      	ldr	r3, [sp, #8]
 8001330:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8001334:	f013 0f10 	tst.w	r3, #16
    GPIOx->BSRR = GPIO_Pin;
 8001338:	bf14      	ite	ne
 800133a:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800133c:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001340:	4b57      	ldr	r3, [pc, #348]	; (80014a0 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001342:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8001346:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001348:	9b02      	ldr	r3, [sp, #8]
 800134a:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 800134e:	f013 0f08 	tst.w	r3, #8
    GPIOx->BSRR = GPIO_Pin;
 8001352:	bf14      	ite	ne
 8001354:	2240      	movne	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001356:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800135a:	4b51      	ldr	r3, [pc, #324]	; (80014a0 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800135c:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8001360:	611a      	str	r2, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001362:	9b02      	ldr	r3, [sp, #8]
 8001364:	494f      	ldr	r1, [pc, #316]	; (80014a4 <LCD_Rect_Fill+0x870>)
 8001366:	f013 0f04 	tst.w	r3, #4
    GPIOx->BSRR = GPIO_Pin;
 800136a:	bf14      	ite	ne
 800136c:	2280      	movne	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800136e:	f44f 0200 	moveq.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001372:	4b4b      	ldr	r3, [pc, #300]	; (80014a0 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001374:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8001378:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800137a:	9b02      	ldr	r3, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 800137c:	f04f 0910 	mov.w	r9, #16
 8001380:	079a      	lsls	r2, r3, #30
 8001382:	bf4c      	ite	mi
 8001384:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001386:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 800138a:	4b44      	ldr	r3, [pc, #272]	; (800149c <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = GPIO_Pin;
 800138c:	f04f 0840 	mov.w	r8, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001390:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001392:	9b03      	ldr	r3, [sp, #12]
 8001394:	07db      	lsls	r3, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 8001396:	bf4c      	ite	mi
 8001398:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800139a:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 800139e:	4b3f      	ldr	r3, [pc, #252]	; (800149c <LCD_Rect_Fill+0x868>)
 80013a0:	611a      	str	r2, [r3, #16]
 80013a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013a6:	6108      	str	r0, [r1, #16]
 80013a8:	4a3c      	ldr	r2, [pc, #240]	; (800149c <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = GPIO_Pin;
 80013aa:	610c      	str	r4, [r1, #16]
 80013ac:	610d      	str	r5, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013ae:	f8c1 e010 	str.w	lr, [r1, #16]
 80013b2:	610b      	str	r3, [r1, #16]
 80013b4:	f103 5370 	add.w	r3, r3, #1006632960	; 0x3c000000
 80013b8:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80013bc:	6118      	str	r0, [r3, #16]
 80013be:	f8c3 e010 	str.w	lr, [r3, #16]
 80013c2:	f8c2 c010 	str.w	ip, [r2, #16]
 80013c6:	6117      	str	r7, [r2, #16]
 80013c8:	6110      	str	r0, [r2, #16]
 80013ca:	f8c2 e010 	str.w	lr, [r2, #16]
 80013ce:	f8c2 b010 	str.w	fp, [r2, #16]
 80013d2:	f8c2 a010 	str.w	sl, [r2, #16]
 80013d6:	611f      	str	r7, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80013d8:	2780      	movs	r7, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013da:	f8c3 c010 	str.w	ip, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80013de:	f8c3 9010 	str.w	r9, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013e2:	611e      	str	r6, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80013e4:	f8c3 8010 	str.w	r8, [r3, #16]
 80013e8:	611f      	str	r7, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013ea:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 80013ee:	6117      	str	r7, [r2, #16]
 80013f0:	6116      	str	r6, [r2, #16]
 80013f2:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 80013f4:	610c      	str	r4, [r1, #16]
 80013f6:	610d      	str	r5, [r1, #16]
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80013f8:	9d01      	ldr	r5, [sp, #4]
 80013fa:	2d00      	cmp	r5, #0
 80013fc:	f000 80c8 	beq.w	8001590 <LCD_Rect_Fill+0x95c>
 8001400:	2500      	movs	r5, #0
 8001402:	2601      	movs	r6, #1
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8001404:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8001406:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 800140a:	f3c7 2785 	ubfx	r7, r7, #10, #6
 800140e:	f3cc 4cc4 	ubfx	ip, ip, #19, #5
 8001412:	017f      	lsls	r7, r7, #5
 8001414:	ea47 27cc 	orr.w	r7, r7, ip, lsl #11
 8001418:	f3c7 3880 	ubfx	r8, r7, #14, #1
 800141c:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8001420:	f8cd 8008 	str.w	r8, [sp, #8]
 8001424:	f3c7 3840 	ubfx	r8, r7, #13, #1
 8001428:	f8cd 800c 	str.w	r8, [sp, #12]
 800142c:	f3c7 3800 	ubfx	r8, r7, #12, #1
 8001430:	f3c9 1940 	ubfx	r9, r9, #5, #1
 8001434:	f8cd 8010 	str.w	r8, [sp, #16]
 8001438:	f3c7 28c0 	ubfx	r8, r7, #11, #1
 800143c:	f8cd 8014 	str.w	r8, [sp, #20]
 8001440:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8001444:	f3c7 2880 	ubfx	r8, r7, #10, #1
 8001448:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 800144c:	f8cd 8018 	str.w	r8, [sp, #24]
 8001450:	f3c7 2840 	ubfx	r8, r7, #9, #1
 8001454:	f3c9 1900 	ubfx	r9, r9, #4, #1
 8001458:	f8cd 801c 	str.w	r8, [sp, #28]
 800145c:	f3c7 2800 	ubfx	r8, r7, #8, #1
 8001460:	f8cd 8020 	str.w	r8, [sp, #32]
 8001464:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8001468:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800146c:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8001470:	f3c8 18c0 	ubfx	r8, r8, #7, #1
 8001474:	f3c7 1ac0 	ubfx	sl, r7, #7, #1
 8001478:	f3c7 1b80 	ubfx	fp, r7, #6, #1
 800147c:	f3c9 09c0 	ubfx	r9, r9, #3, #1
 8001480:	f3c7 1740 	ubfx	r7, r7, #5, #1
 8001484:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8001488:	e9cd 970c 	strd	r9, r7, [sp, #48]	; 0x30
 800148c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001490:	f3cc 1c10 	ubfx	ip, ip, #4, #17
 8001494:	f3c8 1880 	ubfx	r8, r8, #6, #1
 8001498:	e006      	b.n	80014a8 <LCD_Rect_Fill+0x874>
 800149a:	bf00      	nop
 800149c:	40011000 	.word	0x40011000
 80014a0:	40010800 	.word	0x40010800
 80014a4:	40010c00 	.word	0x40010c00
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014a8:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 80014ac:	610e      	str	r6, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014ae:	610f      	str	r7, [r1, #16]
 80014b0:	f1bc 0f00 	cmp.w	ip, #0
 80014b4:	f000 80ac 	beq.w	8001610 <LCD_Rect_Fill+0x9dc>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 80014b8:	9f02      	ldr	r7, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 80014ba:	611c      	str	r4, [r3, #16]
 80014bc:	2f00      	cmp	r7, #0
 80014be:	f000 80ac 	beq.w	800161a <LCD_Rect_Fill+0x9e6>
 80014c2:	611e      	str	r6, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 80014c4:	9f03      	ldr	r7, [sp, #12]
 80014c6:	2f00      	cmp	r7, #0
 80014c8:	f000 809e 	beq.w	8001608 <LCD_Rect_Fill+0x9d4>
 80014cc:	f04f 0908 	mov.w	r9, #8
 80014d0:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 80014d4:	9f04      	ldr	r7, [sp, #16]
 80014d6:	2f00      	cmp	r7, #0
 80014d8:	f000 8091 	beq.w	80015fe <LCD_Rect_Fill+0x9ca>
 80014dc:	f04f 0904 	mov.w	r9, #4
 80014e0:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 80014e4:	9f05      	ldr	r7, [sp, #20]
 80014e6:	2f00      	cmp	r7, #0
 80014e8:	f000 8087 	beq.w	80015fa <LCD_Rect_Fill+0x9c6>
 80014ec:	6114      	str	r4, [r2, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 80014ee:	9f06      	ldr	r7, [sp, #24]
 80014f0:	2f00      	cmp	r7, #0
 80014f2:	d07f      	beq.n	80015f4 <LCD_Rect_Fill+0x9c0>
 80014f4:	6116      	str	r6, [r2, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 80014f6:	9f07      	ldr	r7, [sp, #28]
 80014f8:	2f00      	cmp	r7, #0
 80014fa:	d076      	beq.n	80015ea <LCD_Rect_Fill+0x9b6>
 80014fc:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 8001500:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001504:	9f08      	ldr	r7, [sp, #32]
 8001506:	2f00      	cmp	r7, #0
 8001508:	d06a      	beq.n	80015e0 <LCD_Rect_Fill+0x9ac>
 800150a:	f44f 4980 	mov.w	r9, #16384	; 0x4000
 800150e:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001512:	f1ba 0f00 	cmp.w	sl, #0
 8001516:	d05e      	beq.n	80015d6 <LCD_Rect_Fill+0x9a2>
 8001518:	f04f 0904 	mov.w	r9, #4
 800151c:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001520:	f1bb 0f00 	cmp.w	fp, #0
 8001524:	d053      	beq.n	80015ce <LCD_Rect_Fill+0x99a>
 8001526:	f04f 0908 	mov.w	r9, #8
 800152a:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800152e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8001530:	2f00      	cmp	r7, #0
 8001532:	d047      	beq.n	80015c4 <LCD_Rect_Fill+0x990>
 8001534:	f04f 0910 	mov.w	r9, #16
 8001538:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800153c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800153e:	2f00      	cmp	r7, #0
 8001540:	d03b      	beq.n	80015ba <LCD_Rect_Fill+0x986>
 8001542:	f04f 0920 	mov.w	r9, #32
 8001546:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800154a:	f1b8 0f00 	cmp.w	r8, #0
 800154e:	d02f      	beq.n	80015b0 <LCD_Rect_Fill+0x97c>
 8001550:	f04f 0940 	mov.w	r9, #64	; 0x40
 8001554:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001558:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800155a:	b327      	cbz	r7, 80015a6 <LCD_Rect_Fill+0x972>
 800155c:	f04f 0980 	mov.w	r9, #128	; 0x80
 8001560:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001564:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8001566:	b1cf      	cbz	r7, 800159c <LCD_Rect_Fill+0x968>
 8001568:	f04f 0910 	mov.w	r9, #16
 800156c:	f8c2 9010 	str.w	r9, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001570:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8001572:	3501      	adds	r5, #1
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001574:	b17f      	cbz	r7, 8001596 <LCD_Rect_Fill+0x962>
 8001576:	f04f 0920 	mov.w	r9, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800157a:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800157e:	f44f 6980 	mov.w	r9, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8001582:	9f01      	ldr	r7, [sp, #4]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001584:	6108      	str	r0, [r1, #16]
 8001586:	42af      	cmp	r7, r5
    GPIOx->BSRR = GPIO_Pin;
 8001588:	610c      	str	r4, [r1, #16]
 800158a:	f8c1 9010 	str.w	r9, [r1, #16]
 800158e:	d18b      	bne.n	80014a8 <LCD_Rect_Fill+0x874>
}
 8001590:	b00f      	add	sp, #60	; 0x3c
 8001592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001596:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
 800159a:	e7ee      	b.n	800157a <LCD_Rect_Fill+0x946>
 800159c:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
 80015a0:	f8c2 9010 	str.w	r9, [r2, #16]
}
 80015a4:	e7e4      	b.n	8001570 <LCD_Rect_Fill+0x93c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015a6:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
 80015aa:	f8c3 9010 	str.w	r9, [r3, #16]
}
 80015ae:	e7d9      	b.n	8001564 <LCD_Rect_Fill+0x930>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015b0:	f44f 0980 	mov.w	r9, #4194304	; 0x400000
 80015b4:	f8c3 9010 	str.w	r9, [r3, #16]
}
 80015b8:	e7ce      	b.n	8001558 <LCD_Rect_Fill+0x924>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015ba:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
 80015be:	f8c3 9010 	str.w	r9, [r3, #16]
}
 80015c2:	e7c2      	b.n	800154a <LCD_Rect_Fill+0x916>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015c4:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
 80015c8:	f8c3 9010 	str.w	r9, [r3, #16]
}
 80015cc:	e7b6      	b.n	800153c <LCD_Rect_Fill+0x908>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015ce:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 80015d2:	611f      	str	r7, [r3, #16]
}
 80015d4:	e7ab      	b.n	800152e <LCD_Rect_Fill+0x8fa>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015d6:	f44f 2980 	mov.w	r9, #262144	; 0x40000
 80015da:	f8c3 9010 	str.w	r9, [r3, #16]
}
 80015de:	e79f      	b.n	8001520 <LCD_Rect_Fill+0x8ec>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015e0:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 80015e4:	f8c2 9010 	str.w	r9, [r2, #16]
}
 80015e8:	e793      	b.n	8001512 <LCD_Rect_Fill+0x8de>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015ea:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80015ee:	f8c2 9010 	str.w	r9, [r2, #16]
}
 80015f2:	e787      	b.n	8001504 <LCD_Rect_Fill+0x8d0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015f4:	f8c2 e010 	str.w	lr, [r2, #16]
}
 80015f8:	e77d      	b.n	80014f6 <LCD_Rect_Fill+0x8c2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015fa:	6110      	str	r0, [r2, #16]
}
 80015fc:	e777      	b.n	80014ee <LCD_Rect_Fill+0x8ba>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015fe:	f44f 2980 	mov.w	r9, #262144	; 0x40000
 8001602:	f8c2 9010 	str.w	r9, [r2, #16]
}
 8001606:	e76d      	b.n	80014e4 <LCD_Rect_Fill+0x8b0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001608:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 800160c:	6117      	str	r7, [r2, #16]
}
 800160e:	e761      	b.n	80014d4 <LCD_Rect_Fill+0x8a0>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001610:	9f02      	ldr	r7, [sp, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001612:	6118      	str	r0, [r3, #16]
 8001614:	2f00      	cmp	r7, #0
 8001616:	f47f af54 	bne.w	80014c2 <LCD_Rect_Fill+0x88e>
 800161a:	f8c3 e010 	str.w	lr, [r3, #16]
}
 800161e:	e751      	b.n	80014c4 <LCD_Rect_Fill+0x890>

08001620 <LCD_Circle.constprop.0>:
			s += rx2 * ((4 * y) + 6);
		}
	}
}

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 8001620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	int a_, b_, P;
	a_ = 0;
	b_ = radius;
	P = 1 - radius;
 8001624:	2601      	movs	r6, #1
 8001626:	2300      	movs	r3, #0
void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 8001628:	b089      	sub	sp, #36	; 0x24
 800162a:	e9cd 0105 	strd	r0, r1, [sp, #20]
 800162e:	4615      	mov	r5, r2
	P = 1 - radius;
 8001630:	1a32      	subs	r2, r6, r0
 8001632:	9304      	str	r3, [sp, #16]
 8001634:	9203      	str	r2, [sp, #12]
 8001636:	fa1f fb80 	uxth.w	fp, r0
 800163a:	1e73      	subs	r3, r6, #1
 800163c:	9307      	str	r3, [sp, #28]
	while (a_ <= b_)
	{
		if (fill == 1)
 800163e:	9b06      	ldr	r3, [sp, #24]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d070      	beq.n	8001726 <LCD_Circle.constprop.0+0x106>
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8001644:	2301      	movs	r3, #1
 8001646:	b2b4      	uxth	r4, r6
 8001648:	f104 09ab 	add.w	r9, r4, #171	; 0xab
 800164c:	f10b 084b 	add.w	r8, fp, #75	; 0x4b
 8001650:	fa1f f989 	uxth.w	r9, r9
 8001654:	fa1f f888 	uxth.w	r8, r8
 8001658:	4641      	mov	r1, r8
 800165a:	4648      	mov	r0, r9
 800165c:	461a      	mov	r2, r3
 800165e:	9500      	str	r5, [sp, #0]
 8001660:	f7ff fae8 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8001664:	2301      	movs	r3, #1
 8001666:	f104 074a 	add.w	r7, r4, #74	; 0x4a
 800166a:	f10b 0aac 	add.w	sl, fp, #172	; 0xac
 800166e:	b2bf      	uxth	r7, r7
 8001670:	fa1f fa8a 	uxth.w	sl, sl
 8001674:	4639      	mov	r1, r7
 8001676:	461a      	mov	r2, r3
 8001678:	4650      	mov	r0, sl
 800167a:	9500      	str	r5, [sp, #0]
 800167c:	f7ff fada 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8001680:	2301      	movs	r3, #1
 8001682:	4641      	mov	r1, r8
 8001684:	f1c4 08ad 	rsb	r8, r4, #173	; 0xad
 8001688:	fa1f f888 	uxth.w	r8, r8
 800168c:	461a      	mov	r2, r3
 800168e:	4640      	mov	r0, r8
 8001690:	9500      	str	r5, [sp, #0]
 8001692:	f7ff facf 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8001696:	2301      	movs	r3, #1
 8001698:	4639      	mov	r1, r7
 800169a:	f1cb 07ac 	rsb	r7, fp, #172	; 0xac
 800169e:	b2bf      	uxth	r7, r7
 80016a0:	461a      	mov	r2, r3
 80016a2:	4638      	mov	r0, r7
 80016a4:	9500      	str	r5, [sp, #0]
 80016a6:	f7ff fac5 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 80016aa:	2301      	movs	r3, #1
 80016ac:	f1c4 044c 	rsb	r4, r4, #76	; 0x4c
 80016b0:	b2a4      	uxth	r4, r4
 80016b2:	461a      	mov	r2, r3
 80016b4:	4650      	mov	r0, sl
 80016b6:	4621      	mov	r1, r4
 80016b8:	9500      	str	r5, [sp, #0]
 80016ba:	f7ff fabb 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 80016be:	2301      	movs	r3, #1
 80016c0:	4648      	mov	r0, r9
 80016c2:	f1cb 094b 	rsb	r9, fp, #75	; 0x4b
 80016c6:	fa1f f989 	uxth.w	r9, r9
 80016ca:	461a      	mov	r2, r3
 80016cc:	4649      	mov	r1, r9
 80016ce:	9500      	str	r5, [sp, #0]
 80016d0:	f7ff fab0 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 80016d4:	2301      	movs	r3, #1
 80016d6:	4649      	mov	r1, r9
 80016d8:	461a      	mov	r2, r3
 80016da:	4640      	mov	r0, r8
 80016dc:	9500      	str	r5, [sp, #0]
 80016de:	f7ff faa9 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 80016e2:	2301      	movs	r3, #1
 80016e4:	4621      	mov	r1, r4
 80016e6:	461a      	mov	r2, r3
 80016e8:	4638      	mov	r0, r7
 80016ea:	9500      	str	r5, [sp, #0]
 80016ec:	f7ff faa2 	bl	8000c34 <LCD_Rect_Fill>
		}
		if (P < 0)
 80016f0:	9a03      	ldr	r2, [sp, #12]
 80016f2:	2a00      	cmp	r2, #0
 80016f4:	db3a      	blt.n	800176c <LCD_Circle.constprop.0+0x14c>
 80016f6:	4611      	mov	r1, r2
			P = (P + 3) + (2 * a_);
			a_++;
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 80016f8:	9805      	ldr	r0, [sp, #20]
 80016fa:	1e73      	subs	r3, r6, #1
 80016fc:	1a1b      	subs	r3, r3, r0
 80016fe:	3105      	adds	r1, #5
 8001700:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8001704:	9303      	str	r3, [sp, #12]
	while (a_ <= b_)
 8001706:	9b04      	ldr	r3, [sp, #16]
			a_++;
			b_--;
 8001708:	3801      	subs	r0, #1
	while (a_ <= b_)
 800170a:	3302      	adds	r3, #2
 800170c:	4286      	cmp	r6, r0
			b_--;
 800170e:	9005      	str	r0, [sp, #20]
	while (a_ <= b_)
 8001710:	9304      	str	r3, [sp, #16]
 8001712:	f106 0601 	add.w	r6, r6, #1
 8001716:	dc35      	bgt.n	8001784 <LCD_Circle.constprop.0+0x164>
 8001718:	1e73      	subs	r3, r6, #1
 800171a:	9307      	str	r3, [sp, #28]
		if (fill == 1)
 800171c:	9b06      	ldr	r3, [sp, #24]
 800171e:	fa1f fb80 	uxth.w	fp, r0
 8001722:	2b01      	cmp	r3, #1
 8001724:	d18e      	bne.n	8001644 <LCD_Circle.constprop.0+0x24>
 8001726:	9b04      	ldr	r3, [sp, #16]
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8001728:	ea4f 044b 	mov.w	r4, fp, lsl #1
 800172c:	b2b7      	uxth	r7, r6
 800172e:	f103 0801 	add.w	r8, r3, #1
 8001732:	3401      	adds	r4, #1
 8001734:	fa1f f888 	uxth.w	r8, r8
 8001738:	b2a4      	uxth	r4, r4
 800173a:	f1cb 014b 	rsb	r1, fp, #75	; 0x4b
 800173e:	f1c7 00ad 	rsb	r0, r7, #173	; 0xad
 8001742:	4623      	mov	r3, r4
 8001744:	4642      	mov	r2, r8
 8001746:	b289      	uxth	r1, r1
 8001748:	b280      	uxth	r0, r0
 800174a:	9500      	str	r5, [sp, #0]
 800174c:	f7ff fa72 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8001750:	f1c7 014c 	rsb	r1, r7, #76	; 0x4c
 8001754:	f1cb 00ac 	rsb	r0, fp, #172	; 0xac
 8001758:	4622      	mov	r2, r4
 800175a:	4643      	mov	r3, r8
 800175c:	9500      	str	r5, [sp, #0]
 800175e:	b289      	uxth	r1, r1
 8001760:	b280      	uxth	r0, r0
 8001762:	f7ff fa67 	bl	8000c34 <LCD_Rect_Fill>
		if (P < 0)
 8001766:	9a03      	ldr	r2, [sp, #12]
 8001768:	2a00      	cmp	r2, #0
 800176a:	dac4      	bge.n	80016f6 <LCD_Circle.constprop.0+0xd6>
			P = (P + 3) + (2 * a_);
 800176c:	9904      	ldr	r1, [sp, #16]
 800176e:	3203      	adds	r2, #3
 8001770:	188a      	adds	r2, r1, r2
 8001772:	9203      	str	r2, [sp, #12]
	while (a_ <= b_)
 8001774:	1c8a      	adds	r2, r1, #2
 8001776:	9204      	str	r2, [sp, #16]
 8001778:	9a05      	ldr	r2, [sp, #20]
 800177a:	4296      	cmp	r6, r2
 800177c:	f106 0601 	add.w	r6, r6, #1
 8001780:	f77f af5b 	ble.w	800163a <LCD_Circle.constprop.0+0x1a>
		}
	}
}
 8001784:	b009      	add	sp, #36	; 0x24
 8001786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800178a:	bf00      	nop

0800178c <LCD_Circle.constprop.1>:
void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 800178c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	P = 1 - radius;
 8001790:	2601      	movs	r6, #1
 8001792:	2300      	movs	r3, #0
void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 8001794:	b089      	sub	sp, #36	; 0x24
 8001796:	e9cd 0105 	strd	r0, r1, [sp, #20]
 800179a:	4615      	mov	r5, r2
	P = 1 - radius;
 800179c:	1a32      	subs	r2, r6, r0
 800179e:	9304      	str	r3, [sp, #16]
 80017a0:	9203      	str	r2, [sp, #12]
 80017a2:	fa1f fb80 	uxth.w	fp, r0
 80017a6:	1e73      	subs	r3, r6, #1
 80017a8:	9307      	str	r3, [sp, #28]
		if (fill == 1)
 80017aa:	9b06      	ldr	r3, [sp, #24]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d070      	beq.n	8001892 <LCD_Circle.constprop.1+0x106>
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 80017b0:	2301      	movs	r3, #1
 80017b2:	b2b4      	uxth	r4, r6
 80017b4:	f104 09ab 	add.w	r9, r4, #171	; 0xab
 80017b8:	f10b 0823 	add.w	r8, fp, #35	; 0x23
 80017bc:	fa1f f989 	uxth.w	r9, r9
 80017c0:	fa1f f888 	uxth.w	r8, r8
 80017c4:	4641      	mov	r1, r8
 80017c6:	4648      	mov	r0, r9
 80017c8:	461a      	mov	r2, r3
 80017ca:	9500      	str	r5, [sp, #0]
 80017cc:	f7ff fa32 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 80017d0:	2301      	movs	r3, #1
 80017d2:	f104 0722 	add.w	r7, r4, #34	; 0x22
 80017d6:	f10b 0aac 	add.w	sl, fp, #172	; 0xac
 80017da:	b2bf      	uxth	r7, r7
 80017dc:	fa1f fa8a 	uxth.w	sl, sl
 80017e0:	4639      	mov	r1, r7
 80017e2:	461a      	mov	r2, r3
 80017e4:	4650      	mov	r0, sl
 80017e6:	9500      	str	r5, [sp, #0]
 80017e8:	f7ff fa24 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 80017ec:	2301      	movs	r3, #1
 80017ee:	4641      	mov	r1, r8
 80017f0:	f1c4 08ad 	rsb	r8, r4, #173	; 0xad
 80017f4:	fa1f f888 	uxth.w	r8, r8
 80017f8:	461a      	mov	r2, r3
 80017fa:	4640      	mov	r0, r8
 80017fc:	9500      	str	r5, [sp, #0]
 80017fe:	f7ff fa19 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8001802:	2301      	movs	r3, #1
 8001804:	4639      	mov	r1, r7
 8001806:	f1cb 07ac 	rsb	r7, fp, #172	; 0xac
 800180a:	b2bf      	uxth	r7, r7
 800180c:	461a      	mov	r2, r3
 800180e:	4638      	mov	r0, r7
 8001810:	9500      	str	r5, [sp, #0]
 8001812:	f7ff fa0f 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8001816:	2301      	movs	r3, #1
 8001818:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
 800181c:	b2a4      	uxth	r4, r4
 800181e:	461a      	mov	r2, r3
 8001820:	4650      	mov	r0, sl
 8001822:	4621      	mov	r1, r4
 8001824:	9500      	str	r5, [sp, #0]
 8001826:	f7ff fa05 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 800182a:	2301      	movs	r3, #1
 800182c:	4648      	mov	r0, r9
 800182e:	f1cb 0923 	rsb	r9, fp, #35	; 0x23
 8001832:	fa1f f989 	uxth.w	r9, r9
 8001836:	461a      	mov	r2, r3
 8001838:	4649      	mov	r1, r9
 800183a:	9500      	str	r5, [sp, #0]
 800183c:	f7ff f9fa 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8001840:	2301      	movs	r3, #1
 8001842:	4649      	mov	r1, r9
 8001844:	461a      	mov	r2, r3
 8001846:	4640      	mov	r0, r8
 8001848:	9500      	str	r5, [sp, #0]
 800184a:	f7ff f9f3 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 800184e:	2301      	movs	r3, #1
 8001850:	4621      	mov	r1, r4
 8001852:	461a      	mov	r2, r3
 8001854:	4638      	mov	r0, r7
 8001856:	9500      	str	r5, [sp, #0]
 8001858:	f7ff f9ec 	bl	8000c34 <LCD_Rect_Fill>
		if (P < 0)
 800185c:	9a03      	ldr	r2, [sp, #12]
 800185e:	2a00      	cmp	r2, #0
 8001860:	db3a      	blt.n	80018d8 <LCD_Circle.constprop.1+0x14c>
 8001862:	4611      	mov	r1, r2
			P = (P + 5) + (2 * (a_ - b_));
 8001864:	9805      	ldr	r0, [sp, #20]
 8001866:	1e73      	subs	r3, r6, #1
 8001868:	1a1b      	subs	r3, r3, r0
 800186a:	3105      	adds	r1, #5
 800186c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8001870:	9303      	str	r3, [sp, #12]
	while (a_ <= b_)
 8001872:	9b04      	ldr	r3, [sp, #16]
			b_--;
 8001874:	3801      	subs	r0, #1
	while (a_ <= b_)
 8001876:	3302      	adds	r3, #2
 8001878:	4286      	cmp	r6, r0
			b_--;
 800187a:	9005      	str	r0, [sp, #20]
	while (a_ <= b_)
 800187c:	9304      	str	r3, [sp, #16]
 800187e:	f106 0601 	add.w	r6, r6, #1
 8001882:	dc35      	bgt.n	80018f0 <LCD_Circle.constprop.1+0x164>
 8001884:	1e73      	subs	r3, r6, #1
 8001886:	9307      	str	r3, [sp, #28]
		if (fill == 1)
 8001888:	9b06      	ldr	r3, [sp, #24]
 800188a:	fa1f fb80 	uxth.w	fp, r0
 800188e:	2b01      	cmp	r3, #1
 8001890:	d18e      	bne.n	80017b0 <LCD_Circle.constprop.1+0x24>
 8001892:	9b04      	ldr	r3, [sp, #16]
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8001894:	ea4f 044b 	mov.w	r4, fp, lsl #1
 8001898:	b2b7      	uxth	r7, r6
 800189a:	f103 0801 	add.w	r8, r3, #1
 800189e:	3401      	adds	r4, #1
 80018a0:	fa1f f888 	uxth.w	r8, r8
 80018a4:	b2a4      	uxth	r4, r4
 80018a6:	f1cb 0123 	rsb	r1, fp, #35	; 0x23
 80018aa:	f1c7 00ad 	rsb	r0, r7, #173	; 0xad
 80018ae:	4623      	mov	r3, r4
 80018b0:	4642      	mov	r2, r8
 80018b2:	b289      	uxth	r1, r1
 80018b4:	b280      	uxth	r0, r0
 80018b6:	9500      	str	r5, [sp, #0]
 80018b8:	f7ff f9bc 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 80018bc:	f1c7 0124 	rsb	r1, r7, #36	; 0x24
 80018c0:	f1cb 00ac 	rsb	r0, fp, #172	; 0xac
 80018c4:	4622      	mov	r2, r4
 80018c6:	4643      	mov	r3, r8
 80018c8:	9500      	str	r5, [sp, #0]
 80018ca:	b289      	uxth	r1, r1
 80018cc:	b280      	uxth	r0, r0
 80018ce:	f7ff f9b1 	bl	8000c34 <LCD_Rect_Fill>
		if (P < 0)
 80018d2:	9a03      	ldr	r2, [sp, #12]
 80018d4:	2a00      	cmp	r2, #0
 80018d6:	dac4      	bge.n	8001862 <LCD_Circle.constprop.1+0xd6>
			P = (P + 3) + (2 * a_);
 80018d8:	9904      	ldr	r1, [sp, #16]
 80018da:	3203      	adds	r2, #3
 80018dc:	188a      	adds	r2, r1, r2
 80018de:	9203      	str	r2, [sp, #12]
	while (a_ <= b_)
 80018e0:	1c8a      	adds	r2, r1, #2
 80018e2:	9204      	str	r2, [sp, #16]
 80018e4:	9a05      	ldr	r2, [sp, #20]
 80018e6:	4296      	cmp	r6, r2
 80018e8:	f106 0601 	add.w	r6, r6, #1
 80018ec:	f77f af5b 	ble.w	80017a6 <LCD_Circle.constprop.1+0x1a>
}
 80018f0:	b009      	add	sp, #36	; 0x24
 80018f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018f6:	bf00      	nop

080018f8 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018f8:	6a43      	ldr	r3, [r0, #36]	; 0x24

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	6950      	ldr	r0, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80018fe:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
 8001902:	2921      	cmp	r1, #33	; 0x21
 8001904:	d009      	beq.n	800191a <UART_DMAError+0x22>
    huart->TxXferCount = 0x00U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001906:	6950      	ldr	r0, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001908:	f893 103e 	ldrb.w	r1, [r3, #62]	; 0x3e
 800190c:	2922      	cmp	r1, #34	; 0x22
 800190e:	d014      	beq.n	800193a <UART_DMAError+0x42>
  {
    huart->RxXferCount = 0x00U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001912:	f042 0210 	orr.w	r2, r2, #16
 8001916:	641a      	str	r2, [r3, #64]	; 0x40
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001918:	4770      	bx	lr
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800191a:	0600      	lsls	r0, r0, #24
 800191c:	d5f3      	bpl.n	8001906 <UART_DMAError+0xe>
    huart->TxXferCount = 0x00U;
 800191e:	2100      	movs	r1, #0
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001920:	2020      	movs	r0, #32
    huart->TxXferCount = 0x00U;
 8001922:	84d9      	strh	r1, [r3, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001924:	68d1      	ldr	r1, [r2, #12]
 8001926:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800192a:	60d1      	str	r1, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 800192c:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001930:	6950      	ldr	r0, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001932:	f893 103e 	ldrb.w	r1, [r3, #62]	; 0x3e
 8001936:	2922      	cmp	r1, #34	; 0x22
 8001938:	d1ea      	bne.n	8001910 <UART_DMAError+0x18>
 800193a:	0641      	lsls	r1, r0, #25
 800193c:	d5e8      	bpl.n	8001910 <UART_DMAError+0x18>
    huart->RxXferCount = 0x00U;
 800193e:	2100      	movs	r1, #0
 8001940:	85d9      	strh	r1, [r3, #46]	; 0x2e
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001942:	68d1      	ldr	r1, [r2, #12]
 8001944:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8001948:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800194a:	6951      	ldr	r1, [r2, #20]
 800194c:	f021 0101 	bic.w	r1, r1, #1
 8001950:	6151      	str	r1, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001952:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001954:	2901      	cmp	r1, #1
 8001956:	d103      	bne.n	8001960 <UART_DMAError+0x68>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001958:	68d1      	ldr	r1, [r2, #12]
 800195a:	f021 0110 	bic.w	r1, r1, #16
 800195e:	60d1      	str	r1, [r2, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001960:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8001962:	2120      	movs	r1, #32
 8001964:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001968:	631a      	str	r2, [r3, #48]	; 0x30
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800196a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800196c:	f042 0210 	orr.w	r2, r2, #16
 8001970:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001972:	4770      	bx	lr

08001974 <HAL_DMA_Init.constprop.0>:
  *         parameters in the DMA_InitTypeDef and initialize the associated handle.
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
 8001974:	4603      	mov	r3, r0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001976:	f44f 7c80 	mov.w	ip, #256	; 0x100
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
 800197a:	b430      	push	{r4, r5}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800197c:	2500      	movs	r5, #0
  hdma->DmaBaseAddress = DMA1;
 800197e:	4c0f      	ldr	r4, [pc, #60]	; (80019bc <HAL_DMA_Init.constprop.0+0x48>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001980:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <HAL_DMA_Init.constprop.0+0x4c>)
  hdma->DmaBaseAddress = DMA1;
 8001982:	63c4      	str	r4, [r0, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001984:	6804      	ldr	r4, [r0, #0]
 8001986:	490f      	ldr	r1, [pc, #60]	; (80019c4 <HAL_DMA_Init.constprop.0+0x50>)
 8001988:	4422      	add	r2, r4
 800198a:	fba1 1202 	umull	r1, r2, r1, r2
 800198e:	0912      	lsrs	r2, r2, #4
  tmp = hdma->Instance->CCR;
 8001990:	6821      	ldr	r1, [r4, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001992:	0092      	lsls	r2, r2, #2
 8001994:	6402      	str	r2, [r0, #64]	; 0x40
 8001996:	6842      	ldr	r2, [r0, #4]
 8001998:	6900      	ldr	r0, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800199a:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 800199e:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80019a2:	4302      	orrs	r2, r0
 80019a4:	430a      	orrs	r2, r1
 80019a6:	6959      	ldr	r1, [r3, #20]

  return HAL_OK;
}
 80019a8:	4628      	mov	r0, r5
 80019aa:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Direction        |
 80019ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  hdma->Instance->CCR = tmp;
 80019b0:	6022      	str	r2, [r4, #0]
  hdma->Lock = HAL_UNLOCKED;
 80019b2:	f8a3 c020 	strh.w	ip, [r3, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019b6:	639d      	str	r5, [r3, #56]	; 0x38
}
 80019b8:	bc30      	pop	{r4, r5}
 80019ba:	4770      	bx	lr
 80019bc:	40020000 	.word	0x40020000
 80019c0:	bffdfff8 	.word	0xbffdfff8
 80019c4:	cccccccd 	.word	0xcccccccd

080019c8 <HAL_GPIO_Init>:
{
 80019c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019cc:	680e      	ldr	r6, [r1, #0]
{
 80019ce:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d0:	2e00      	cmp	r6, #0
 80019d2:	f000 80b2 	beq.w	8001b3a <HAL_GPIO_Init+0x172>
 80019d6:	2200      	movs	r2, #0
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019d8:	4f74      	ldr	r7, [pc, #464]	; (8001bac <HAL_GPIO_Init+0x1e4>)
  uint32_t config = 0x00u;
 80019da:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 80019dc:	4613      	mov	r3, r2
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019de:	4d74      	ldr	r5, [pc, #464]	; (8001bb0 <HAL_GPIO_Init+0x1e8>)
      switch (GPIO_Init->Mode)
 80019e0:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8001bb4 <HAL_GPIO_Init+0x1ec>
 80019e4:	e006      	b.n	80019f4 <HAL_GPIO_Init+0x2c>
	position++;
 80019e6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e8:	fa36 f403 	lsrs.w	r4, r6, r3
 80019ec:	f102 0204 	add.w	r2, r2, #4
 80019f0:	f000 80a3 	beq.w	8001b3a <HAL_GPIO_Init+0x172>
    ioposition = (0x01uL << position);
 80019f4:	2401      	movs	r4, #1
 80019f6:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 80019f8:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fc:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8001a00:	d1f1      	bne.n	80019e6 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8001a02:	684e      	ldr	r6, [r1, #4]
 8001a04:	2e12      	cmp	r6, #18
 8001a06:	f200 809b 	bhi.w	8001b40 <HAL_GPIO_Init+0x178>
 8001a0a:	2e12      	cmp	r6, #18
 8001a0c:	d81a      	bhi.n	8001a44 <HAL_GPIO_Init+0x7c>
 8001a0e:	e8df f006 	tbb	[pc, r6]
 8001a12:	baa4      	.short	0xbaa4
 8001a14:	1919c3b6 	.word	0x1919c3b6
 8001a18:	19191919 	.word	0x19191919
 8001a1c:	19191919 	.word	0x19191919
 8001a20:	ae191919 	.word	0xae191919
 8001a24:	b2          	.byte	0xb2
 8001a25:	00          	.byte	0x00
 8001a26:	f8df e190 	ldr.w	lr, [pc, #400]	; 8001bb8 <HAL_GPIO_Init+0x1f0>
 8001a2a:	4576      	cmp	r6, lr
 8001a2c:	f000 8095 	beq.w	8001b5a <HAL_GPIO_Init+0x192>
 8001a30:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8001a34:	4576      	cmp	r6, lr
 8001a36:	f000 8090 	beq.w	8001b5a <HAL_GPIO_Init+0x192>
 8001a3a:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8001a3e:	4576      	cmp	r6, lr
 8001a40:	f000 808b 	beq.w	8001b5a <HAL_GPIO_Init+0x192>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a44:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8001a48:	bf9c      	itt	ls
 8001a4a:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a4c:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a4e:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a52:	bf84      	itt	hi
 8001a54:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a58:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a5c:	f8de 4000 	ldr.w	r4, [lr]
 8001a60:	fa0a f90b 	lsl.w	r9, sl, fp
 8001a64:	fa06 fb0b 	lsl.w	fp, r6, fp
 8001a68:	ea24 040b 	bic.w	r4, r4, fp
 8001a6c:	ea44 0409 	orr.w	r4, r4, r9
 8001a70:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a74:	684c      	ldr	r4, [r1, #4]
 8001a76:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001a7a:	d076      	beq.n	8001b6a <HAL_GPIO_Init+0x1a2>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a7c:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a80:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a84:	f04e 0e01 	orr.w	lr, lr, #1
 8001a88:	f8c7 e018 	str.w	lr, [r7, #24]
 8001a8c:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a90:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a94:	f00e 0e01 	and.w	lr, lr, #1
 8001a98:	f8cd e004 	str.w	lr, [sp, #4]
 8001a9c:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001aa0:	f023 0e03 	bic.w	lr, r3, #3
 8001aa4:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8001aa8:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001aac:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ab0:	fa06 f609 	lsl.w	r6, r6, r9
 8001ab4:	ea2b 0b06 	bic.w	fp, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ab8:	4e40      	ldr	r6, [pc, #256]	; (8001bbc <HAL_GPIO_Init+0x1f4>)
 8001aba:	42b0      	cmp	r0, r6
 8001abc:	d068      	beq.n	8001b90 <HAL_GPIO_Init+0x1c8>
 8001abe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ac2:	42b0      	cmp	r0, r6
 8001ac4:	d066      	beq.n	8001b94 <HAL_GPIO_Init+0x1cc>
 8001ac6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001aca:	42b0      	cmp	r0, r6
 8001acc:	d05e      	beq.n	8001b8c <HAL_GPIO_Init+0x1c4>
 8001ace:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ad2:	42b0      	cmp	r0, r6
 8001ad4:	bf0c      	ite	eq
 8001ad6:	2603      	moveq	r6, #3
 8001ad8:	2604      	movne	r6, #4
 8001ada:	fa06 f609 	lsl.w	r6, r6, r9
 8001ade:	ea46 060b 	orr.w	r6, r6, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8001ae2:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001ae6:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ae8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001aec:	bf14      	ite	ne
 8001aee:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001af2:	ea26 060c 	biceq.w	r6, r6, ip
 8001af6:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001af8:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001afa:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001afe:	bf14      	ite	ne
 8001b00:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b04:	ea26 060c 	biceq.w	r6, r6, ip
 8001b08:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b0a:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b0c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b10:	bf14      	ite	ne
 8001b12:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b16:	ea26 060c 	biceq.w	r6, r6, ip
 8001b1a:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b1c:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b20:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b22:	d01f      	beq.n	8001b64 <HAL_GPIO_Init+0x19c>
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b24:	ea44 040c 	orr.w	r4, r4, ip
 8001b28:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2a:	680e      	ldr	r6, [r1, #0]
	position++;
 8001b2c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2e:	fa36 f403 	lsrs.w	r4, r6, r3
 8001b32:	f102 0204 	add.w	r2, r2, #4
 8001b36:	f47f af5d 	bne.w	80019f4 <HAL_GPIO_Init+0x2c>
}
 8001b3a:	b003      	add	sp, #12
 8001b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001b40:	4546      	cmp	r6, r8
 8001b42:	d00a      	beq.n	8001b5a <HAL_GPIO_Init+0x192>
 8001b44:	f67f af6f 	bls.w	8001a26 <HAL_GPIO_Init+0x5e>
 8001b48:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001bc0 <HAL_GPIO_Init+0x1f8>
 8001b4c:	4576      	cmp	r6, lr
 8001b4e:	d004      	beq.n	8001b5a <HAL_GPIO_Init+0x192>
 8001b50:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001b54:	4576      	cmp	r6, lr
 8001b56:	f47f af75 	bne.w	8001a44 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b5a:	688e      	ldr	r6, [r1, #8]
 8001b5c:	b9fe      	cbnz	r6, 8001b9e <HAL_GPIO_Init+0x1d6>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b5e:	f04f 0a04 	mov.w	sl, #4
 8001b62:	e76f      	b.n	8001a44 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b64:	ea24 040c 	bic.w	r4, r4, ip
 8001b68:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6a:	680e      	ldr	r6, [r1, #0]
 8001b6c:	e73b      	b.n	80019e6 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b6e:	68cc      	ldr	r4, [r1, #12]
 8001b70:	f104 0a04 	add.w	sl, r4, #4
          break;
 8001b74:	e766      	b.n	8001a44 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b76:	68cc      	ldr	r4, [r1, #12]
 8001b78:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8001b7c:	e762      	b.n	8001a44 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b7e:	68cc      	ldr	r4, [r1, #12]
 8001b80:	f104 0a08 	add.w	sl, r4, #8
          break;
 8001b84:	e75e      	b.n	8001a44 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b86:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8001b8a:	e75b      	b.n	8001a44 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b8c:	2602      	movs	r6, #2
 8001b8e:	e7a4      	b.n	8001ada <HAL_GPIO_Init+0x112>
 8001b90:	2600      	movs	r6, #0
 8001b92:	e7a2      	b.n	8001ada <HAL_GPIO_Init+0x112>
 8001b94:	2601      	movs	r6, #1
 8001b96:	e7a0      	b.n	8001ada <HAL_GPIO_Init+0x112>
      switch (GPIO_Init->Mode)
 8001b98:	f04f 0a00 	mov.w	sl, #0
 8001b9c:	e752      	b.n	8001a44 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b9e:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ba0:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8001ba4:	bf0c      	ite	eq
 8001ba6:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8001ba8:	6144      	strne	r4, [r0, #20]
 8001baa:	e74b      	b.n	8001a44 <HAL_GPIO_Init+0x7c>
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40010400 	.word	0x40010400
 8001bb4:	10220000 	.word	0x10220000
 8001bb8:	10120000 	.word	0x10120000
 8001bbc:	40010800 	.word	0x40010800
 8001bc0:	10310000 	.word	0x10310000

08001bc4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4905      	ldr	r1, [pc, #20]	; (8001be0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001bcc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001bd0:	5ccb      	ldrb	r3, [r1, r3]
 8001bd2:	6810      	ldr	r0, [r2, #0]
}
 8001bd4:	40d8      	lsrs	r0, r3
 8001bd6:	4770      	bx	lr
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	0800d520 	.word	0x0800d520

08001be4 <UART_DMATransmitCplt>:
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001be4:	6803      	ldr	r3, [r0, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f013 0320 	ands.w	r3, r3, #32
 8001bec:	d10a      	bne.n	8001c04 <UART_DMATransmitCplt+0x20>
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bee:	6a41      	ldr	r1, [r0, #36]	; 0x24
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001bf0:	680a      	ldr	r2, [r1, #0]
    huart->TxXferCount = 0x00U;
 8001bf2:	84cb      	strh	r3, [r1, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001bf4:	6953      	ldr	r3, [r2, #20]
 8001bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bfa:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001bfc:	68d3      	ldr	r3, [r2, #12]
 8001bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c02:	60d3      	str	r3, [r2, #12]
}
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop

08001c08 <UART_DMATxHalfCplt>:
}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop

08001c0c <HAL_RCC_OscConfig.constprop.0>:
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c0c:	4a91      	ldr	r2, [pc, #580]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 8001c0e:	b470      	push	{r4, r5, r6}
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c10:	6853      	ldr	r3, [r2, #4]
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 8001c12:	b083      	sub	sp, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	f000 80ee 	beq.w	8001dfa <HAL_RCC_OscConfig.constprop.0+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c1e:	6853      	ldr	r3, [r2, #4]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	f000 80e4 	beq.w	8001df2 <HAL_RCC_OscConfig.constprop.0+0x1e6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2a:	498a      	ldr	r1, [pc, #552]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001c2c:	4b8a      	ldr	r3, [pc, #552]	; (8001e58 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001c2e:	680a      	ldr	r2, [r1, #0]
 8001c30:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c34:	600a      	str	r2, [r1, #0]
 8001c36:	681c      	ldr	r4, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c38:	e003      	b.n	8001c42 <HAL_RCC_OscConfig.constprop.0+0x36>
 8001c3a:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c3c:	1b12      	subs	r2, r2, r4
 8001c3e:	2a64      	cmp	r2, #100	; 0x64
 8001c40:	d87a      	bhi.n	8001d38 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	680a      	ldr	r2, [r1, #0]
 8001c44:	0395      	lsls	r5, r2, #14
 8001c46:	d5f8      	bpl.n	8001c3a <HAL_RCC_OscConfig.constprop.0+0x2e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c48:	6803      	ldr	r3, [r0, #0]
 8001c4a:	0799      	lsls	r1, r3, #30
 8001c4c:	d525      	bpl.n	8001c9a <HAL_RCC_OscConfig.constprop.0+0x8e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c4e:	4b81      	ldr	r3, [pc, #516]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	f012 0f0c 	tst.w	r2, #12
 8001c56:	f000 80a6 	beq.w	8001da6 <HAL_RCC_OscConfig.constprop.0+0x19a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	f002 020c 	and.w	r2, r2, #12
 8001c60:	2a08      	cmp	r2, #8
 8001c62:	f000 809c 	beq.w	8001d9e <HAL_RCC_OscConfig.constprop.0+0x192>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c66:	6902      	ldr	r2, [r0, #16]
 8001c68:	2a00      	cmp	r2, #0
 8001c6a:	f000 80ea 	beq.w	8001e42 <HAL_RCC_OscConfig.constprop.0+0x236>
        __HAL_RCC_HSI_ENABLE();
 8001c6e:	2401      	movs	r4, #1
 8001c70:	4a7a      	ldr	r2, [pc, #488]	; (8001e5c <HAL_RCC_OscConfig.constprop.0+0x250>)
 8001c72:	4b79      	ldr	r3, [pc, #484]	; (8001e58 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001c74:	6014      	str	r4, [r2, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c76:	4977      	ldr	r1, [pc, #476]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001c78:	681c      	ldr	r4, [r3, #0]
 8001c7a:	e003      	b.n	8001c84 <HAL_RCC_OscConfig.constprop.0+0x78>
 8001c7c:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7e:	1b12      	subs	r2, r2, r4
 8001c80:	2a02      	cmp	r2, #2
 8001c82:	d859      	bhi.n	8001d38 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c84:	680a      	ldr	r2, [r1, #0]
 8001c86:	0796      	lsls	r6, r2, #30
 8001c88:	d5f8      	bpl.n	8001c7c <HAL_RCC_OscConfig.constprop.0+0x70>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8a:	680b      	ldr	r3, [r1, #0]
 8001c8c:	6942      	ldr	r2, [r0, #20]
 8001c8e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c92:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c96:	600b      	str	r3, [r1, #0]
 8001c98:	6803      	ldr	r3, [r0, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9a:	071a      	lsls	r2, r3, #28
 8001c9c:	d520      	bpl.n	8001ce0 <HAL_RCC_OscConfig.constprop.0+0xd4>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c9e:	6982      	ldr	r2, [r0, #24]
 8001ca0:	2a00      	cmp	r2, #0
 8001ca2:	f000 8089 	beq.w	8001db8 <HAL_RCC_OscConfig.constprop.0+0x1ac>
      __HAL_RCC_LSI_ENABLE();
 8001ca6:	2401      	movs	r4, #1
 8001ca8:	4a6c      	ldr	r2, [pc, #432]	; (8001e5c <HAL_RCC_OscConfig.constprop.0+0x250>)
 8001caa:	4b6b      	ldr	r3, [pc, #428]	; (8001e58 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001cac:	f8c2 4480 	str.w	r4, [r2, #1152]	; 0x480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb0:	4968      	ldr	r1, [pc, #416]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001cb2:	681c      	ldr	r4, [r3, #0]
 8001cb4:	e003      	b.n	8001cbe <HAL_RCC_OscConfig.constprop.0+0xb2>
 8001cb6:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb8:	1b12      	subs	r2, r2, r4
 8001cba:	2a02      	cmp	r2, #2
 8001cbc:	d83c      	bhi.n	8001d38 <HAL_RCC_OscConfig.constprop.0+0x12c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbe:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001cc0:	0795      	lsls	r5, r2, #30
 8001cc2:	d5f8      	bpl.n	8001cb6 <HAL_RCC_OscConfig.constprop.0+0xaa>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cc4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001cc8:	4b65      	ldr	r3, [pc, #404]	; (8001e60 <HAL_RCC_OscConfig.constprop.0+0x254>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cd0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001cd2:	bf00      	nop
  }
  while (Delay --);
 8001cd4:	9b01      	ldr	r3, [sp, #4]
 8001cd6:	1e5a      	subs	r2, r3, #1
 8001cd8:	9201      	str	r2, [sp, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f9      	bne.n	8001cd2 <HAL_RCC_OscConfig.constprop.0+0xc6>
 8001cde:	6803      	ldr	r3, [r0, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce0:	075e      	lsls	r6, r3, #29
 8001ce2:	d541      	bpl.n	8001d68 <HAL_RCC_OscConfig.constprop.0+0x15c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce4:	4b5b      	ldr	r3, [pc, #364]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001ce6:	69da      	ldr	r2, [r3, #28]
 8001ce8:	00d6      	lsls	r6, r2, #3
 8001cea:	d577      	bpl.n	8001ddc <HAL_RCC_OscConfig.constprop.0+0x1d0>
    FlagStatus       pwrclkchanged = RESET;
 8001cec:	2400      	movs	r4, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cee:	495d      	ldr	r1, [pc, #372]	; (8001e64 <HAL_RCC_OscConfig.constprop.0+0x258>)
 8001cf0:	680b      	ldr	r3, [r1, #0]
 8001cf2:	05dd      	lsls	r5, r3, #23
 8001cf4:	d513      	bpl.n	8001d1e <HAL_RCC_OscConfig.constprop.0+0x112>
 8001cf6:	4b58      	ldr	r3, [pc, #352]	; (8001e58 <HAL_RCC_OscConfig.constprop.0+0x24c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf8:	68c2      	ldr	r2, [r0, #12]
 8001cfa:	2a01      	cmp	r2, #1
 8001cfc:	d020      	beq.n	8001d40 <HAL_RCC_OscConfig.constprop.0+0x134>
 8001cfe:	2a00      	cmp	r2, #0
 8001d00:	f000 8088 	beq.w	8001e14 <HAL_RCC_OscConfig.constprop.0+0x208>
 8001d04:	2a05      	cmp	r2, #5
 8001d06:	4a53      	ldr	r2, [pc, #332]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001d08:	6a11      	ldr	r1, [r2, #32]
 8001d0a:	f000 80cb 	beq.w	8001ea4 <HAL_RCC_OscConfig.constprop.0+0x298>
 8001d0e:	f021 0101 	bic.w	r1, r1, #1
 8001d12:	6211      	str	r1, [r2, #32]
 8001d14:	6a11      	ldr	r1, [r2, #32]
 8001d16:	f021 0104 	bic.w	r1, r1, #4
 8001d1a:	6211      	str	r1, [r2, #32]
 8001d1c:	e015      	b.n	8001d4a <HAL_RCC_OscConfig.constprop.0+0x13e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d1e:	680a      	ldr	r2, [r1, #0]
 8001d20:	4b4d      	ldr	r3, [pc, #308]	; (8001e58 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d26:	600a      	str	r2, [r1, #0]
 8001d28:	681d      	ldr	r5, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2a:	680a      	ldr	r2, [r1, #0]
 8001d2c:	05d2      	lsls	r2, r2, #23
 8001d2e:	d4e3      	bmi.n	8001cf8 <HAL_RCC_OscConfig.constprop.0+0xec>
 8001d30:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d32:	1b52      	subs	r2, r2, r5
 8001d34:	2a64      	cmp	r2, #100	; 0x64
 8001d36:	d9f8      	bls.n	8001d2a <HAL_RCC_OscConfig.constprop.0+0x11e>
            return HAL_TIMEOUT;
 8001d38:	2003      	movs	r0, #3
}
 8001d3a:	b003      	add	sp, #12
 8001d3c:	bc70      	pop	{r4, r5, r6}
 8001d3e:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d40:	4944      	ldr	r1, [pc, #272]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001d42:	6a0a      	ldr	r2, [r1, #32]
 8001d44:	f042 0201 	orr.w	r2, r2, #1
 8001d48:	620a      	str	r2, [r1, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4a:	f241 3c88 	movw	ip, #5000	; 0x1388
 8001d4e:	681d      	ldr	r5, [r3, #0]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d50:	4940      	ldr	r1, [pc, #256]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001d52:	e003      	b.n	8001d5c <HAL_RCC_OscConfig.constprop.0+0x150>
 8001d54:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d56:	1b52      	subs	r2, r2, r5
 8001d58:	4562      	cmp	r2, ip
 8001d5a:	d8ed      	bhi.n	8001d38 <HAL_RCC_OscConfig.constprop.0+0x12c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5c:	6a0a      	ldr	r2, [r1, #32]
 8001d5e:	0796      	lsls	r6, r2, #30
 8001d60:	d5f8      	bpl.n	8001d54 <HAL_RCC_OscConfig.constprop.0+0x148>
    if (pwrclkchanged == SET)
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	f040 8098 	bne.w	8001e98 <HAL_RCC_OscConfig.constprop.0+0x28c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d68:	69c3      	ldr	r3, [r0, #28]
 8001d6a:	b1b3      	cbz	r3, 8001d9a <HAL_RCC_OscConfig.constprop.0+0x18e>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d6c:	4939      	ldr	r1, [pc, #228]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001d6e:	684a      	ldr	r2, [r1, #4]
 8001d70:	f002 020c 	and.w	r2, r2, #12
 8001d74:	2a08      	cmp	r2, #8
 8001d76:	f000 8081 	beq.w	8001e7c <HAL_RCC_OscConfig.constprop.0+0x270>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	f000 809c 	beq.w	8001eb8 <HAL_RCC_OscConfig.constprop.0+0x2ac>
        __HAL_RCC_PLL_DISABLE();
 8001d80:	2000      	movs	r0, #0
 8001d82:	4a36      	ldr	r2, [pc, #216]	; (8001e5c <HAL_RCC_OscConfig.constprop.0+0x250>)
 8001d84:	4b34      	ldr	r3, [pc, #208]	; (8001e58 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001d86:	6610      	str	r0, [r2, #96]	; 0x60
 8001d88:	6818      	ldr	r0, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8a:	e003      	b.n	8001d94 <HAL_RCC_OscConfig.constprop.0+0x188>
 8001d8c:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8e:	1a12      	subs	r2, r2, r0
 8001d90:	2a02      	cmp	r2, #2
 8001d92:	d8d1      	bhi.n	8001d38 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d94:	680a      	ldr	r2, [r1, #0]
 8001d96:	0192      	lsls	r2, r2, #6
 8001d98:	d4f8      	bmi.n	8001d8c <HAL_RCC_OscConfig.constprop.0+0x180>
  return HAL_OK;
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	e7cd      	b.n	8001d3a <HAL_RCC_OscConfig.constprop.0+0x12e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	03da      	lsls	r2, r3, #15
 8001da2:	f53f af60 	bmi.w	8001c66 <HAL_RCC_OscConfig.constprop.0+0x5a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	079b      	lsls	r3, r3, #30
 8001dac:	d528      	bpl.n	8001e00 <HAL_RCC_OscConfig.constprop.0+0x1f4>
 8001dae:	6903      	ldr	r3, [r0, #16]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d025      	beq.n	8001e00 <HAL_RCC_OscConfig.constprop.0+0x1f4>
          return HAL_ERROR;
 8001db4:	2001      	movs	r0, #1
 8001db6:	e7c0      	b.n	8001d3a <HAL_RCC_OscConfig.constprop.0+0x12e>
      __HAL_RCC_LSI_DISABLE();
 8001db8:	4928      	ldr	r1, [pc, #160]	; (8001e5c <HAL_RCC_OscConfig.constprop.0+0x250>)
 8001dba:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001dbc:	f8c1 2480 	str.w	r2, [r1, #1152]	; 0x480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc0:	f1a1 710f 	sub.w	r1, r1, #37486592	; 0x23c0000
 8001dc4:	681c      	ldr	r4, [r3, #0]
 8001dc6:	f5a1 317c 	sub.w	r1, r1, #258048	; 0x3f000
 8001dca:	e003      	b.n	8001dd4 <HAL_RCC_OscConfig.constprop.0+0x1c8>
 8001dcc:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dce:	1b12      	subs	r2, r2, r4
 8001dd0:	2a02      	cmp	r2, #2
 8001dd2:	d8b1      	bhi.n	8001d38 <HAL_RCC_OscConfig.constprop.0+0x12c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001dd6:	0792      	lsls	r2, r2, #30
 8001dd8:	d4f8      	bmi.n	8001dcc <HAL_RCC_OscConfig.constprop.0+0x1c0>
 8001dda:	e780      	b.n	8001cde <HAL_RCC_OscConfig.constprop.0+0xd2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ddc:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8001dde:	2401      	movs	r4, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001de4:	61da      	str	r2, [r3, #28]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	9b00      	ldr	r3, [sp, #0]
 8001df0:	e77d      	b.n	8001cee <HAL_RCC_OscConfig.constprop.0+0xe2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001df2:	6853      	ldr	r3, [r2, #4]
 8001df4:	03de      	lsls	r6, r3, #15
 8001df6:	f57f af18 	bpl.w	8001c2a <HAL_RCC_OscConfig.constprop.0+0x1e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	e723      	b.n	8001c48 <HAL_RCC_OscConfig.constprop.0+0x3c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e00:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001e02:	6941      	ldr	r1, [r0, #20]
 8001e04:	6813      	ldr	r3, [r2, #0]
 8001e06:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e0a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	6803      	ldr	r3, [r0, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e12:	e742      	b.n	8001c9a <HAL_RCC_OscConfig.constprop.0+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e14:	490f      	ldr	r1, [pc, #60]	; (8001e54 <HAL_RCC_OscConfig.constprop.0+0x248>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f241 3588 	movw	r5, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e1a:	6a0a      	ldr	r2, [r1, #32]
 8001e1c:	f022 0201 	bic.w	r2, r2, #1
 8001e20:	620a      	str	r2, [r1, #32]
 8001e22:	6a0a      	ldr	r2, [r1, #32]
 8001e24:	f022 0204 	bic.w	r2, r2, #4
 8001e28:	620a      	str	r2, [r1, #32]
 8001e2a:	681e      	ldr	r6, [r3, #0]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2c:	e003      	b.n	8001e36 <HAL_RCC_OscConfig.constprop.0+0x22a>
 8001e2e:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e30:	1b92      	subs	r2, r2, r6
 8001e32:	42aa      	cmp	r2, r5
 8001e34:	d880      	bhi.n	8001d38 <HAL_RCC_OscConfig.constprop.0+0x12c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e36:	6a0a      	ldr	r2, [r1, #32]
 8001e38:	0792      	lsls	r2, r2, #30
 8001e3a:	d4f8      	bmi.n	8001e2e <HAL_RCC_OscConfig.constprop.0+0x222>
    if (pwrclkchanged == SET)
 8001e3c:	2c00      	cmp	r4, #0
 8001e3e:	d093      	beq.n	8001d68 <HAL_RCC_OscConfig.constprop.0+0x15c>
 8001e40:	e02a      	b.n	8001e98 <HAL_RCC_OscConfig.constprop.0+0x28c>
        __HAL_RCC_HSI_DISABLE();
 8001e42:	4906      	ldr	r1, [pc, #24]	; (8001e5c <HAL_RCC_OscConfig.constprop.0+0x250>)
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001e46:	600a      	str	r2, [r1, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e48:	f1a1 710f 	sub.w	r1, r1, #37486592	; 0x23c0000
 8001e4c:	681c      	ldr	r4, [r3, #0]
 8001e4e:	f5a1 317c 	sub.w	r1, r1, #258048	; 0x3f000
 8001e52:	e00e      	b.n	8001e72 <HAL_RCC_OscConfig.constprop.0+0x266>
 8001e54:	40021000 	.word	0x40021000
 8001e58:	20000200 	.word	0x20000200
 8001e5c:	42420000 	.word	0x42420000
 8001e60:	20000000 	.word	0x20000000
 8001e64:	40007000 	.word	0x40007000
 8001e68:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6a:	1b12      	subs	r2, r2, r4
 8001e6c:	2a02      	cmp	r2, #2
 8001e6e:	f63f af63 	bhi.w	8001d38 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e72:	680a      	ldr	r2, [r1, #0]
 8001e74:	0795      	lsls	r5, r2, #30
 8001e76:	d4f7      	bmi.n	8001e68 <HAL_RCC_OscConfig.constprop.0+0x25c>
 8001e78:	6803      	ldr	r3, [r0, #0]
 8001e7a:	e70e      	b.n	8001c9a <HAL_RCC_OscConfig.constprop.0+0x8e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d019      	beq.n	8001eb4 <HAL_RCC_OscConfig.constprop.0+0x2a8>
        pll_config = RCC->CFGR;
 8001e80:	684b      	ldr	r3, [r1, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e82:	6a02      	ldr	r2, [r0, #32]
 8001e84:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001e88:	4291      	cmp	r1, r2
 8001e8a:	d193      	bne.n	8001db4 <HAL_RCC_OscConfig.constprop.0+0x1a8>
 8001e8c:	6a42      	ldr	r2, [r0, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e8e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d081      	beq.n	8001d9a <HAL_RCC_OscConfig.constprop.0+0x18e>
 8001e96:	e78d      	b.n	8001db4 <HAL_RCC_OscConfig.constprop.0+0x1a8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e98:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <HAL_RCC_OscConfig.constprop.0+0x308>)
 8001e9a:	69d3      	ldr	r3, [r2, #28]
 8001e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	61d3      	str	r3, [r2, #28]
 8001ea2:	e761      	b.n	8001d68 <HAL_RCC_OscConfig.constprop.0+0x15c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea4:	f041 0104 	orr.w	r1, r1, #4
 8001ea8:	6211      	str	r1, [r2, #32]
 8001eaa:	6a11      	ldr	r1, [r2, #32]
 8001eac:	f041 0101 	orr.w	r1, r1, #1
 8001eb0:	6211      	str	r1, [r2, #32]
 8001eb2:	e74a      	b.n	8001d4a <HAL_RCC_OscConfig.constprop.0+0x13e>
        return HAL_ERROR;
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	e740      	b.n	8001d3a <HAL_RCC_OscConfig.constprop.0+0x12e>
        __HAL_RCC_PLL_DISABLE();
 8001eb8:	2400      	movs	r4, #0
 8001eba:	4a17      	ldr	r2, [pc, #92]	; (8001f18 <HAL_RCC_OscConfig.constprop.0+0x30c>)
 8001ebc:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <HAL_RCC_OscConfig.constprop.0+0x310>)
 8001ebe:	6614      	str	r4, [r2, #96]	; 0x60
 8001ec0:	681c      	ldr	r4, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec2:	e004      	b.n	8001ece <HAL_RCC_OscConfig.constprop.0+0x2c2>
 8001ec4:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec6:	1b12      	subs	r2, r2, r4
 8001ec8:	2a02      	cmp	r2, #2
 8001eca:	f63f af35 	bhi.w	8001d38 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ece:	680a      	ldr	r2, [r1, #0]
 8001ed0:	0195      	lsls	r5, r2, #6
 8001ed2:	d4f7      	bmi.n	8001ec4 <HAL_RCC_OscConfig.constprop.0+0x2b8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ed4:	6a02      	ldr	r2, [r0, #32]
 8001ed6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001eda:	d105      	bne.n	8001ee8 <HAL_RCC_OscConfig.constprop.0+0x2dc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001edc:	684c      	ldr	r4, [r1, #4]
 8001ede:	6885      	ldr	r5, [r0, #8]
 8001ee0:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
 8001ee4:	432c      	orrs	r4, r5
 8001ee6:	604c      	str	r4, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ee8:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eea:	490a      	ldr	r1, [pc, #40]	; (8001f14 <HAL_RCC_OscConfig.constprop.0+0x308>)
 8001eec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8001eee:	6848      	ldr	r0, [r1, #4]
 8001ef0:	4322      	orrs	r2, r4
 8001ef2:	f420 1074 	bic.w	r0, r0, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8001ef6:	4c08      	ldr	r4, [pc, #32]	; (8001f18 <HAL_RCC_OscConfig.constprop.0+0x30c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef8:	4302      	orrs	r2, r0
 8001efa:	604a      	str	r2, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001efc:	6625      	str	r5, [r4, #96]	; 0x60
 8001efe:	6818      	ldr	r0, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f00:	e004      	b.n	8001f0c <HAL_RCC_OscConfig.constprop.0+0x300>
 8001f02:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f04:	1a12      	subs	r2, r2, r0
 8001f06:	2a02      	cmp	r2, #2
 8001f08:	f63f af16 	bhi.w	8001d38 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f0c:	680a      	ldr	r2, [r1, #0]
 8001f0e:	0194      	lsls	r4, r2, #6
 8001f10:	d5f7      	bpl.n	8001f02 <HAL_RCC_OscConfig.constprop.0+0x2f6>
 8001f12:	e742      	b.n	8001d9a <HAL_RCC_OscConfig.constprop.0+0x18e>
 8001f14:	40021000 	.word	0x40021000
 8001f18:	42420000 	.word	0x42420000
 8001f1c:	20000200 	.word	0x20000200

08001f20 <TIM_Base_SetConfig.constprop.0>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f20:	4a22      	ldr	r2, [pc, #136]	; (8001fac <TIM_Base_SetConfig.constprop.0+0x8c>)
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
 8001f22:	b410      	push	{r4}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f24:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 8001f26:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f28:	d02b      	beq.n	8001f82 <TIM_Base_SetConfig.constprop.0+0x62>
 8001f2a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f2e:	d015      	beq.n	8001f5c <TIM_Base_SetConfig.constprop.0+0x3c>
 8001f30:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001f34:	4290      	cmp	r0, r2
 8001f36:	d011      	beq.n	8001f5c <TIM_Base_SetConfig.constprop.0+0x3c>
 8001f38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f3c:	4290      	cmp	r0, r2
 8001f3e:	d00d      	beq.n	8001f5c <TIM_Base_SetConfig.constprop.0+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f40:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <TIM_Base_SetConfig.constprop.0+0x90>)
 8001f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f46:	6f14      	ldr	r4, [r2, #112]	; 0x70

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f48:	6e51      	ldr	r1, [r2, #100]	; 0x64

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f4a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f4c:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8001f4e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f50:	62c1      	str	r1, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001f52:	6282      	str	r2, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f54:	2301      	movs	r3, #1
}
 8001f56:	bc10      	pop	{r4}
  TIMx->EGR = TIM_EGR_UG;
 8001f58:	6143      	str	r3, [r0, #20]
}
 8001f5a:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8001f5c:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <TIM_Base_SetConfig.constprop.0+0x90>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001f62:	6e11      	ldr	r1, [r2, #96]	; 0x60
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f64:	6e94      	ldr	r4, [r2, #104]	; 0x68
    tmpcr1 |= Structure->CounterMode;
 8001f66:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f6c:	6f11      	ldr	r1, [r2, #112]	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f6e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f74:	430b      	orrs	r3, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f76:	6e51      	ldr	r1, [r2, #100]	; 0x64
  TIMx->PSC = Structure->Prescaler;
 8001f78:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  TIMx->CR1 = tmpcr1;
 8001f7a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f7c:	62c1      	str	r1, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001f7e:	6282      	str	r2, [r0, #40]	; 0x28
 8001f80:	e7e8      	b.n	8001f54 <TIM_Base_SetConfig.constprop.0+0x34>
    tmpcr1 |= Structure->CounterMode;
 8001f82:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <TIM_Base_SetConfig.constprop.0+0x90>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001f88:	6e14      	ldr	r4, [r2, #96]	; 0x60
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f8a:	6e91      	ldr	r1, [r2, #104]	; 0x68
    tmpcr1 |= Structure->CounterMode;
 8001f8c:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f92:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f94:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001f96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f9a:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8001f9c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f9e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8001fa0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001fa2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001fa4:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001fa6:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8001fa8:	6303      	str	r3, [r0, #48]	; 0x30
 8001faa:	e7d3      	b.n	8001f54 <TIM_Base_SetConfig.constprop.0+0x34>
 8001fac:	40012c00 	.word	0x40012c00
 8001fb0:	20000200 	.word	0x20000200

08001fb4 <HAL_TIM_MspPostInit.constprop.0>:

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	2300      	movs	r3, #0
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
 8001fb6:	b570      	push	{r4, r5, r6, lr}
  if(htim->Instance==TIM1)
 8001fb8:	4912      	ldr	r1, [pc, #72]	; (8002004 <HAL_TIM_MspPostInit.constprop.0+0x50>)
 8001fba:	4a13      	ldr	r2, [pc, #76]	; (8002008 <HAL_TIM_MspPostInit.constprop.0+0x54>)
 8001fbc:	6d89      	ldr	r1, [r1, #88]	; 0x58
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
 8001fbe:	b086      	sub	sp, #24
  if(htim->Instance==TIM1)
 8001fc0:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001fc6:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM1)
 8001fca:	d001      	beq.n	8001fd0 <HAL_TIM_MspPostInit.constprop.0+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fcc:	b006      	add	sp, #24
 8001fce:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fd0:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001fd4:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2602      	movs	r6, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fdc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001fe0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	480a      	ldr	r0, [pc, #40]	; (800200c <HAL_TIM_MspPostInit.constprop.0+0x58>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe4:	f042 0204 	orr.w	r2, r2, #4
 8001fe8:	619a      	str	r2, [r3, #24]
 8001fea:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fec:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ff4:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffc:	f7ff fce4 	bl	80019c8 <HAL_GPIO_Init>
}
 8002000:	e7e4      	b.n	8001fcc <HAL_TIM_MspPostInit.constprop.0+0x18>
 8002002:	bf00      	nop
 8002004:	20000200 	.word	0x20000200
 8002008:	40012c00 	.word	0x40012c00
 800200c:	40010800 	.word	0x40010800

08002010 <HAL_NVIC_SetPriority.constprop.0>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002010:	4b14      	ldr	r3, [pc, #80]	; (8002064 <HAL_NVIC_SetPriority.constprop.0+0x54>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002018:	f1c3 0c07 	rsb	ip, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201c:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800201e:	f1bc 0f04 	cmp.w	ip, #4
 8002022:	bf28      	it	cs
 8002024:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002028:	2a06      	cmp	r2, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202a:	f04f 32ff 	mov.w	r2, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	bf98      	it	ls
 8002030:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002032:	fa02 f20c 	lsl.w	r2, r2, ip
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002036:	bf88      	it	hi
 8002038:	3b03      	subhi	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203a:	ea21 0102 	bic.w	r1, r1, r2
 800203e:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002040:	1c43      	adds	r3, r0, #1
 8002042:	d008      	beq.n	8002056 <HAL_NVIC_SetPriority.constprop.0+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002044:	0109      	lsls	r1, r1, #4
 8002046:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800204a:	b2c9      	uxtb	r1, r1
 800204c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002050:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8002054:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002056:	4b03      	ldr	r3, [pc, #12]	; (8002064 <HAL_NVIC_SetPriority.constprop.0+0x54>)
 8002058:	0109      	lsls	r1, r1, #4
 800205a:	b2c9      	uxtb	r1, r1
 800205c:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <LCD_Line.constprop.0>:
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8002068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800206c:	b0a7      	sub	sp, #156	; 0x9c
 800206e:	460a      	mov	r2, r1
 8002070:	2301      	movs	r3, #1
 8002072:	9123      	str	r1, [sp, #140]	; 0x8c
	int deltaX = abs(x2 - x1);
 8002074:	4601      	mov	r1, r0
 8002076:	9318      	str	r3, [sp, #96]	; 0x60
 8002078:	1a13      	subs	r3, r2, r0
	int signX = x1 < x2 ? 1 : -1;
 800207a:	428a      	cmp	r2, r1
 800207c:	bf8c      	ite	hi
 800207e:	2201      	movhi	r2, #1
 8002080:	f04f 32ff 	movls.w	r2, #4294967295
 8002084:	f04f 0c00 	mov.w	ip, #0
	int error = deltaX - deltaY;
 8002088:	f04f 08bf 	mov.w	r8, #191	; 0xbf
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800208c:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8002090:	f04f 6980 	mov.w	r9, #67108864	; 0x4000000
 8002094:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8002098:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 800209c:	f44f 2680 	mov.w	r6, #262144	; 0x40000
	int signX = x1 < x2 ? 1 : -1;
 80020a0:	9225      	str	r2, [sp, #148]	; 0x94
 80020a2:	0a0a      	lsrs	r2, r1, #8
 80020a4:	920f      	str	r2, [sp, #60]	; 0x3c
 80020a6:	0bca      	lsrs	r2, r1, #15
 80020a8:	9216      	str	r2, [sp, #88]	; 0x58
 80020aa:	0b8a      	lsrs	r2, r1, #14
 80020ac:	9215      	str	r2, [sp, #84]	; 0x54
 80020ae:	0b4a      	lsrs	r2, r1, #13
 80020b0:	9214      	str	r2, [sp, #80]	; 0x50
 80020b2:	0b0a      	lsrs	r2, r1, #12
 80020b4:	9213      	str	r2, [sp, #76]	; 0x4c
 80020b6:	0aca      	lsrs	r2, r1, #11
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 80020b8:	900d      	str	r0, [sp, #52]	; 0x34
 80020ba:	9212      	str	r2, [sp, #72]	; 0x48
	int deltaX = abs(x2 - x1);
 80020bc:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 80020c0:	0a8a      	lsrs	r2, r1, #10
 80020c2:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 80020c6:	9211      	str	r2, [sp, #68]	; 0x44
 80020c8:	f001 0301 	and.w	r3, r1, #1
 80020cc:	0a4a      	lsrs	r2, r1, #9
 80020ce:	e9cd cc1f 	strd	ip, ip, [sp, #124]	; 0x7c
 80020d2:	e9cd cc1d 	strd	ip, ip, [sp, #116]	; 0x74
 80020d6:	e9cd cc1b 	strd	ip, ip, [sp, #108]	; 0x6c
 80020da:	9210      	str	r2, [sp, #64]	; 0x40
 80020dc:	930e      	str	r3, [sp, #56]	; 0x38
 80020de:	b2ca      	uxtb	r2, r1
	int error = deltaX - deltaY;
 80020e0:	f1a0 037e 	sub.w	r3, r0, #126	; 0x7e
 80020e4:	f8df e30c 	ldr.w	lr, [pc, #780]	; 80023f4 <LCD_Line.constprop.0+0x38c>
 80020e8:	f8df b30c 	ldr.w	fp, [pc, #780]	; 80023f8 <LCD_Line.constprop.0+0x390>
 80020ec:	f8df a30c 	ldr.w	sl, [pc, #780]	; 80023fc <LCD_Line.constprop.0+0x394>
 80020f0:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 80020f4:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 80020f8:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
 80020fc:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
	int deltaX = abs(x2 - x1);
 8002100:	9024      	str	r0, [sp, #144]	; 0x90
 8002102:	9217      	str	r2, [sp, #92]	; 0x5c
	int error = deltaX - deltaY;
 8002104:	9301      	str	r3, [sp, #4]
 8002106:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800210a:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800210e:	f8ce 4010 	str.w	r4, [lr, #16]
 8002112:	fa1f f088 	uxth.w	r0, r8
 8002116:	f8ce 9010 	str.w	r9, [lr, #16]
 800211a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800211e:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002122:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002124:	f8cb 4010 	str.w	r4, [fp, #16]
 8002128:	f8ca 7010 	str.w	r7, [sl, #16]
 800212c:	f8ca 6010 	str.w	r6, [sl, #16]
 8002130:	f8ca 5010 	str.w	r5, [sl, #16]
 8002134:	f8ca 4010 	str.w	r4, [sl, #16]
 8002138:	f8ca 3010 	str.w	r3, [sl, #16]
 800213c:	900c      	str	r0, [sp, #48]	; 0x30
 800213e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002142:	2040      	movs	r0, #64	; 0x40
	data[0] = x1 >> 8;
 8002144:	f8bd c064 	ldrh.w	ip, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002148:	f8ca 1010 	str.w	r1, [sl, #16]
 800214c:	f8cb 6010 	str.w	r6, [fp, #16]
 8002150:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002154:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002158:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800215c:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002160:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002164:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002168:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800216c:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002170:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002172:	f8ce 5010 	str.w	r5, [lr, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002176:	f8ce 3010 	str.w	r3, [lr, #16]
 800217a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800217e:	f8ce 3010 	str.w	r3, [lr, #16]
 8002182:	2301      	movs	r3, #1
 8002184:	f8ce 3010 	str.w	r3, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002188:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800218c:	f8ce 9010 	str.w	r9, [lr, #16]
 8002190:	f8cb 5010 	str.w	r5, [fp, #16]
 8002194:	f8cb 4010 	str.w	r4, [fp, #16]
 8002198:	f8ca 7010 	str.w	r7, [sl, #16]
 800219c:	f8ca 6010 	str.w	r6, [sl, #16]
 80021a0:	f8ca 5010 	str.w	r5, [sl, #16]
 80021a4:	f8ca 4010 	str.w	r4, [sl, #16]
 80021a8:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80021ac:	4643      	mov	r3, r8
 80021ae:	f8ca 1010 	str.w	r1, [sl, #16]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 847f 	beq.w	8002ab6 <LCD_Line.constprop.0+0xa4e>
    GPIOx->BSRR = GPIO_Pin;
 80021b8:	2304      	movs	r3, #4
 80021ba:	f8cb 3010 	str.w	r3, [fp, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80021be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80021c0:	f013 0001 	ands.w	r0, r3, #1
 80021c4:	bf1c      	itt	ne
 80021c6:	2308      	movne	r3, #8
 80021c8:	f8cb 3010 	strne.w	r3, [fp, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80021cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021ce:	bf08      	it	eq
 80021d0:	f8cb 7010 	streq.w	r7, [fp, #16]
 80021d4:	f013 0301 	ands.w	r3, r3, #1
 80021d8:	9307      	str	r3, [sp, #28]
 80021da:	bf0c      	ite	eq
 80021dc:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80021e0:	2310      	movne	r3, #16
 80021e2:	f8cb 3010 	str.w	r3, [fp, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80021e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80021e8:	f013 0301 	ands.w	r3, r3, #1
 80021ec:	9308      	str	r3, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021ee:	bf0c      	ite	eq
 80021f0:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80021f4:	2320      	movne	r3, #32
 80021f6:	f8cb 3010 	str.w	r3, [fp, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80021fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80021fc:	f013 0301 	ands.w	r3, r3, #1
 8002200:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002202:	bf0c      	ite	eq
 8002204:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8002208:	2340      	movne	r3, #64	; 0x40
 800220a:	f8cb 3010 	str.w	r3, [fp, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800220e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002210:	f013 0301 	ands.w	r3, r3, #1
 8002214:	9300      	str	r3, [sp, #0]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002216:	bf0c      	ite	eq
 8002218:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800221c:	2380      	movne	r3, #128	; 0x80
 800221e:	f8cb 3010 	str.w	r3, [fp, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002222:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002224:	f013 0301 	ands.w	r3, r3, #1
 8002228:	9302      	str	r3, [sp, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800222a:	bf0c      	ite	eq
 800222c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002230:	2310      	movne	r3, #16
 8002232:	f8ca 3010 	str.w	r3, [sl, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002236:	f01c 0301 	ands.w	r3, ip, #1
 800223a:	9303      	str	r3, [sp, #12]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800223c:	bf0c      	ite	eq
 800223e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002242:	2320      	movne	r3, #32
 8002244:	f8ca 3010 	str.w	r3, [sl, #16]
 8002248:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800224a:	f8ce 5010 	str.w	r5, [lr, #16]
    GPIOx->BSRR = GPIO_Pin;
 800224e:	f8ce 3010 	str.w	r3, [lr, #16]
 8002252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002256:	f8ce 3010 	str.w	r3, [lr, #16]
 800225a:	2301      	movs	r3, #1
 800225c:	f8ce 3010 	str.w	r3, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002260:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002264:	f8ce 9010 	str.w	r9, [lr, #16]
 8002268:	f8cb 5010 	str.w	r5, [fp, #16]
 800226c:	f8cb 4010 	str.w	r4, [fp, #16]
 8002270:	f8ca 7010 	str.w	r7, [sl, #16]
 8002274:	f8ca 6010 	str.w	r6, [sl, #16]
 8002278:	f8ca 5010 	str.w	r5, [sl, #16]
 800227c:	f8ca 4010 	str.w	r4, [sl, #16]
 8002280:	f8ca 3010 	str.w	r3, [sl, #16]
 8002284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002288:	f8ca 3010 	str.w	r3, [sl, #16]
 800228c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800228e:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002290:	09d2      	lsrs	r2, r2, #7
 8002292:	9204      	str	r2, [sp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002294:	bf1c      	itt	ne
 8002296:	2204      	movne	r2, #4
 8002298:	f8cb 2010 	strne.w	r2, [fp, #16]
 800229c:	f3c3 1280 	ubfx	r2, r3, #6, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022a0:	bf08      	it	eq
 80022a2:	f8cb 6010 	streq.w	r6, [fp, #16]
 80022a6:	9205      	str	r2, [sp, #20]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80022a8:	065a      	lsls	r2, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 80022aa:	bf4a      	itet	mi
 80022ac:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022ae:	f8cb 7010 	strpl.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80022b2:	f8cb 2010 	strmi.w	r2, [fp, #16]
 80022b6:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80022ba:	0699      	lsls	r1, r3, #26
 80022bc:	9206      	str	r2, [sp, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022be:	bf54      	ite	pl
 80022c0:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80022c4:	2210      	movmi	r2, #16
 80022c6:	f8cb 2010 	str.w	r2, [fp, #16]
 80022ca:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80022ce:	4690      	mov	r8, r2
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80022d0:	06da      	lsls	r2, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022d2:	bf54      	ite	pl
 80022d4:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80022d8:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80022da:	0719      	lsls	r1, r3, #28
 80022dc:	f8cb 2010 	str.w	r2, [fp, #16]
 80022e0:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 80022e4:	920b      	str	r2, [sp, #44]	; 0x2c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022e6:	bf54      	ite	pl
 80022e8:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80022ec:	2240      	movmi	r2, #64	; 0x40
 80022ee:	f8cb 2010 	str.w	r2, [fp, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80022f2:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022f4:	bf54      	ite	pl
 80022f6:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80022fa:	2280      	movmi	r2, #128	; 0x80
 80022fc:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8002300:	f8cb 2010 	str.w	r2, [fp, #16]
 8002304:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002308:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800230a:	bf54      	ite	pl
 800230c:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002310:	2310      	movmi	r3, #16
 8002312:	f8ca 3010 	str.w	r3, [sl, #16]
 8002316:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002318:	fa1f fc83 	uxth.w	ip, r3
 800231c:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002320:	2b00      	cmp	r3, #0
 8002322:	f040 83c3 	bne.w	8002aac <LCD_Line.constprop.0+0xa44>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002326:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 800232a:	f8ca c010 	str.w	ip, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800232e:	f04f 0c02 	mov.w	ip, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002332:	f8ce 5010 	str.w	r5, [lr, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002336:	f8ce c010 	str.w	ip, [lr, #16]
 800233a:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 800233e:	f8ce c010 	str.w	ip, [lr, #16]
 8002342:	f04f 0c01 	mov.w	ip, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002346:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 800234a:	f8ce c010 	str.w	ip, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800234e:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8002352:	f8ce 9010 	str.w	r9, [lr, #16]
 8002356:	f8cb 5010 	str.w	r5, [fp, #16]
 800235a:	f8cb 4010 	str.w	r4, [fp, #16]
 800235e:	f8ca 7010 	str.w	r7, [sl, #16]
 8002362:	f8ca 6010 	str.w	r6, [sl, #16]
 8002366:	f8ca 5010 	str.w	r5, [sl, #16]
 800236a:	f8ca 4010 	str.w	r4, [sl, #16]
 800236e:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002374:	f8ca c010 	str.w	ip, [sl, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 8394 	beq.w	8002aa6 <LCD_Line.constprop.0+0xa3e>
    GPIOx->BSRR = GPIO_Pin;
 800237e:	f04f 0c04 	mov.w	ip, #4
 8002382:	f8cb c010 	str.w	ip, [fp, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002386:	2800      	cmp	r0, #0
 8002388:	f040 8389 	bne.w	8002a9e <LCD_Line.constprop.0+0xa36>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800238c:	f8cb 7010 	str.w	r7, [fp, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002390:	9b07      	ldr	r3, [sp, #28]
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 837f 	bne.w	8002a96 <LCD_Line.constprop.0+0xa2e>
 8002398:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800239c:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80023a0:	9b08      	ldr	r3, [sp, #32]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f040 8373 	bne.w	8002a8e <LCD_Line.constprop.0+0xa26>
 80023a8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80023ac:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80023b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f040 8367 	bne.w	8002a86 <LCD_Line.constprop.0+0xa1e>
 80023b8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80023bc:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80023c0:	9b00      	ldr	r3, [sp, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f040 835b 	bne.w	8002a7e <LCD_Line.constprop.0+0xa16>
 80023c8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80023cc:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80023d0:	9b02      	ldr	r3, [sp, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f040 834f 	bne.w	8002a76 <LCD_Line.constprop.0+0xa0e>
 80023d8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80023dc:	f8ca 0010 	str.w	r0, [sl, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80023e0:	9b03      	ldr	r3, [sp, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f040 8343 	bne.w	8002a6e <LCD_Line.constprop.0+0xa06>
 80023e8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80023ec:	f8ca 0010 	str.w	r0, [sl, #16]
 80023f0:	e006      	b.n	8002400 <LCD_Line.constprop.0+0x398>
 80023f2:	bf00      	nop
 80023f4:	40010c00 	.word	0x40010c00
 80023f8:	40010800 	.word	0x40010800
 80023fc:	40011000 	.word	0x40011000
    GPIOx->BSRR = GPIO_Pin;
 8002400:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002402:	f8ce 5010 	str.w	r5, [lr, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002406:	f8ce 0010 	str.w	r0, [lr, #16]
 800240a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800240e:	f8ce 0010 	str.w	r0, [lr, #16]
 8002412:	2001      	movs	r0, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002414:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8002418:	f8ce 0010 	str.w	r0, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800241c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002420:	f8ce 9010 	str.w	r9, [lr, #16]
 8002424:	f8cb 5010 	str.w	r5, [fp, #16]
 8002428:	f8cb 4010 	str.w	r4, [fp, #16]
 800242c:	f8ca 7010 	str.w	r7, [sl, #16]
 8002430:	f8ca 6010 	str.w	r6, [sl, #16]
 8002434:	f8ca 5010 	str.w	r5, [sl, #16]
 8002438:	f8ca 4010 	str.w	r4, [sl, #16]
 800243c:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002440:	9b04      	ldr	r3, [sp, #16]
 8002442:	f8ca 0010 	str.w	r0, [sl, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 830e 	beq.w	8002a68 <LCD_Line.constprop.0+0xa00>
    GPIOx->BSRR = GPIO_Pin;
 800244c:	2004      	movs	r0, #4
 800244e:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002452:	9b05      	ldr	r3, [sp, #20]
 8002454:	2b00      	cmp	r3, #0
 8002456:	f040 8303 	bne.w	8002a60 <LCD_Line.constprop.0+0x9f8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800245a:	f8cb 7010 	str.w	r7, [fp, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800245e:	9b06      	ldr	r3, [sp, #24]
 8002460:	2b00      	cmp	r3, #0
 8002462:	f040 82f9 	bne.w	8002a58 <LCD_Line.constprop.0+0x9f0>
 8002466:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800246a:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800246e:	4643      	mov	r3, r8
 8002470:	2b00      	cmp	r3, #0
 8002472:	f040 82ed 	bne.w	8002a50 <LCD_Line.constprop.0+0x9e8>
 8002476:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800247a:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800247e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002480:	2b00      	cmp	r3, #0
 8002482:	f040 82e1 	bne.w	8002a48 <LCD_Line.constprop.0+0x9e0>
 8002486:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800248a:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800248e:	2900      	cmp	r1, #0
 8002490:	f040 82d6 	bne.w	8002a40 <LCD_Line.constprop.0+0x9d8>
 8002494:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8002498:	f8cb 1010 	str.w	r1, [fp, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800249c:	2a00      	cmp	r2, #0
 800249e:	f040 82cb 	bne.w	8002a38 <LCD_Line.constprop.0+0x9d0>
 80024a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024a6:	f8ca 2010 	str.w	r2, [sl, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80024aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f040 82bf 	bne.w	8002a30 <LCD_Line.constprop.0+0x9c8>
 80024b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024b6:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80024ba:	2202      	movs	r2, #2
 80024bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024c0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80024c4:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80024c8:	f8bd 8058 	ldrh.w	r8, [sp, #88]	; 0x58
 80024cc:	f8ce 5010 	str.w	r5, [lr, #16]
    GPIOx->BSRR = GPIO_Pin;
 80024d0:	2110      	movs	r1, #16
 80024d2:	f8cd 8000 	str.w	r8, [sp]
	data[0] = y1 >> 8;
 80024d6:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
 80024da:	f8ce 2010 	str.w	r2, [lr, #16]
 80024de:	f8ce 3010 	str.w	r3, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024e2:	f8ce 4010 	str.w	r4, [lr, #16]
 80024e6:	f8ce 9010 	str.w	r9, [lr, #16]
 80024ea:	f8cb 5010 	str.w	r5, [fp, #16]
 80024ee:	f8cb 4010 	str.w	r4, [fp, #16]
 80024f2:	f8ca 7010 	str.w	r7, [sl, #16]
 80024f6:	f8ca 6010 	str.w	r6, [sl, #16]
 80024fa:	f8ca 5010 	str.w	r5, [sl, #16]
 80024fe:	f8ca 4010 	str.w	r4, [sl, #16]
 8002502:	f8ca 0010 	str.w	r0, [sl, #16]
 8002506:	f8ca c010 	str.w	ip, [sl, #16]
 800250a:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 800250e:	f8cb 6010 	str.w	r6, [fp, #16]
 8002512:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002516:	f8cb 1010 	str.w	r1, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800251a:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800251e:	f04f 0c40 	mov.w	ip, #64	; 0x40
 8002522:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002526:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800252a:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800252e:	f8ca 1010 	str.w	r1, [sl, #16]
 8002532:	2120      	movs	r1, #32
 8002534:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002538:	f8ce 5010 	str.w	r5, [lr, #16]
    GPIOx->BSRR = GPIO_Pin;
 800253c:	f8ce 2010 	str.w	r2, [lr, #16]
 8002540:	f8ce 3010 	str.w	r3, [lr, #16]
 8002544:	2201      	movs	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 800254a:	f8ce 2010 	str.w	r2, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800254e:	f8ce 9010 	str.w	r9, [lr, #16]
 8002552:	f8cb 5010 	str.w	r5, [fp, #16]
 8002556:	f8cb 4010 	str.w	r4, [fp, #16]
 800255a:	f8ca 7010 	str.w	r7, [sl, #16]
 800255e:	f8ca 6010 	str.w	r6, [sl, #16]
 8002562:	f8ca 5010 	str.w	r5, [sl, #16]
 8002566:	f8ca 4010 	str.w	r4, [sl, #16]
 800256a:	f8ca 0010 	str.w	r0, [sl, #16]
 800256e:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002572:	9b00      	ldr	r3, [sp, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 8258 	beq.w	8002a2a <LCD_Line.constprop.0+0x9c2>
    GPIOx->BSRR = GPIO_Pin;
 800257a:	2304      	movs	r3, #4
 800257c:	f8cb 3010 	str.w	r3, [fp, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002580:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002582:	f013 0c01 	ands.w	ip, r3, #1
 8002586:	bf1c      	itt	ne
 8002588:	2308      	movne	r3, #8
 800258a:	f8cb 3010 	strne.w	r3, [fp, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800258e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002590:	bf08      	it	eq
 8002592:	f8cb 7010 	streq.w	r7, [fp, #16]
 8002596:	f013 0301 	ands.w	r3, r3, #1
 800259a:	930a      	str	r3, [sp, #40]	; 0x28
 800259c:	bf0c      	ite	eq
 800259e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80025a2:	2310      	movne	r3, #16
 80025a4:	f8cb 3010 	str.w	r3, [fp, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80025a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80025aa:	f013 0301 	ands.w	r3, r3, #1
 80025ae:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025b0:	bf0c      	ite	eq
 80025b2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80025b6:	2320      	movne	r3, #32
 80025b8:	f8cb 3010 	str.w	r3, [fp, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80025bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80025be:	f013 0301 	ands.w	r3, r3, #1
 80025c2:	9308      	str	r3, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025c4:	bf0c      	ite	eq
 80025c6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80025ca:	2340      	movne	r3, #64	; 0x40
 80025cc:	f8cb 3010 	str.w	r3, [fp, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80025d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80025d2:	f013 0301 	ands.w	r3, r3, #1
 80025d6:	9307      	str	r3, [sp, #28]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025d8:	bf0c      	ite	eq
 80025da:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80025de:	2380      	movne	r3, #128	; 0x80
 80025e0:	f8cb 3010 	str.w	r3, [fp, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80025e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80025e6:	f013 0301 	ands.w	r3, r3, #1
 80025ea:	9306      	str	r3, [sp, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025ec:	bf0c      	ite	eq
 80025ee:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80025f2:	2310      	movne	r3, #16
 80025f4:	f8ca 3010 	str.w	r3, [sl, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80025f8:	f018 0301 	ands.w	r3, r8, #1
 80025fc:	9305      	str	r3, [sp, #20]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025fe:	bf0c      	ite	eq
 8002600:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002604:	2320      	movne	r3, #32
 8002606:	f8ca 3010 	str.w	r3, [sl, #16]
 800260a:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800260c:	f8ce 5010 	str.w	r5, [lr, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002610:	f8ce 3010 	str.w	r3, [lr, #16]
 8002614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002618:	f8ce 3010 	str.w	r3, [lr, #16]
 800261c:	2301      	movs	r3, #1
 800261e:	f8ce 3010 	str.w	r3, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002622:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002626:	f8ce 9010 	str.w	r9, [lr, #16]
 800262a:	f8cb 5010 	str.w	r5, [fp, #16]
 800262e:	f8cb 4010 	str.w	r4, [fp, #16]
 8002632:	f8ca 7010 	str.w	r7, [sl, #16]
 8002636:	f8ca 6010 	str.w	r6, [sl, #16]
 800263a:	f8ca 5010 	str.w	r5, [sl, #16]
 800263e:	f8ca 4010 	str.w	r4, [sl, #16]
 8002642:	f8ca 3010 	str.w	r3, [sl, #16]
 8002646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800264a:	f8ca 3010 	str.w	r3, [sl, #16]
 800264e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8002650:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002652:	09d2      	lsrs	r2, r2, #7
 8002654:	9204      	str	r2, [sp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002656:	bf16      	itet	ne
 8002658:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800265a:	f8cb 6010 	streq.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800265e:	f8cb 2010 	strne.w	r2, [fp, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002662:	0659      	lsls	r1, r3, #25
 8002664:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8002668:	9203      	str	r2, [sp, #12]
 800266a:	bf44      	itt	mi
 800266c:	2208      	movmi	r2, #8
 800266e:	f8cb 2010 	strmi.w	r2, [fp, #16]
 8002672:	f3c3 1240 	ubfx	r2, r3, #5, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002676:	bf58      	it	pl
 8002678:	f8cb 7010 	strpl.w	r7, [fp, #16]
 800267c:	9202      	str	r2, [sp, #8]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800267e:	069a      	lsls	r2, r3, #26
 8002680:	bf54      	ite	pl
 8002682:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002686:	2210      	movmi	r2, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002688:	06d8      	lsls	r0, r3, #27
 800268a:	f8cb 2010 	str.w	r2, [fp, #16]
 800268e:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8002692:	920b      	str	r2, [sp, #44]	; 0x2c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002694:	bf54      	ite	pl
 8002696:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800269a:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800269c:	0719      	lsls	r1, r3, #28
 800269e:	f8cb 2010 	str.w	r2, [fp, #16]
 80026a2:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 80026a6:	4690      	mov	r8, r2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026a8:	bf54      	ite	pl
 80026aa:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80026ae:	2240      	movmi	r2, #64	; 0x40
 80026b0:	f8cb 2010 	str.w	r2, [fp, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80026b4:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026b6:	bf54      	ite	pl
 80026b8:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80026bc:	2280      	movmi	r2, #128	; 0x80
 80026be:	f3c3 0180 	ubfx	r1, r3, #2, #1
 80026c2:	f8cb 2010 	str.w	r2, [fp, #16]
 80026c6:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80026ca:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026cc:	bf54      	ite	pl
 80026ce:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80026d2:	2310      	movmi	r3, #16
 80026d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80026d6:	f8ca 3010 	str.w	r3, [sl, #16]
 80026da:	b283      	uxth	r3, r0
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80026dc:	2800      	cmp	r0, #0
 80026de:	f040 81a0 	bne.w	8002a22 <LCD_Line.constprop.0+0x9ba>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026e2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80026e6:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80026ea:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026ec:	f8ce 5010 	str.w	r5, [lr, #16]
    GPIOx->BSRR = GPIO_Pin;
 80026f0:	f8ce 0010 	str.w	r0, [lr, #16]
 80026f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026f8:	f8ce 0010 	str.w	r0, [lr, #16]
 80026fc:	2001      	movs	r0, #1
 80026fe:	f8ce 0010 	str.w	r0, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002702:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002706:	f8ce 9010 	str.w	r9, [lr, #16]
 800270a:	f8cb 5010 	str.w	r5, [fp, #16]
 800270e:	f8cb 4010 	str.w	r4, [fp, #16]
 8002712:	f8ca 7010 	str.w	r7, [sl, #16]
 8002716:	f8ca 6010 	str.w	r6, [sl, #16]
 800271a:	f8ca 5010 	str.w	r5, [sl, #16]
 800271e:	f8ca 4010 	str.w	r4, [sl, #16]
 8002722:	f8ca 0010 	str.w	r0, [sl, #16]
 8002726:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800272a:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800272e:	9800      	ldr	r0, [sp, #0]
 8002730:	2800      	cmp	r0, #0
 8002732:	f000 8173 	beq.w	8002a1c <LCD_Line.constprop.0+0x9b4>
    GPIOx->BSRR = GPIO_Pin;
 8002736:	2004      	movs	r0, #4
 8002738:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800273c:	f1bc 0f00 	cmp.w	ip, #0
 8002740:	f040 8168 	bne.w	8002a14 <LCD_Line.constprop.0+0x9ac>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002744:	f8cb 7010 	str.w	r7, [fp, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002748:	980a      	ldr	r0, [sp, #40]	; 0x28
 800274a:	2800      	cmp	r0, #0
 800274c:	f040 815e 	bne.w	8002a0c <LCD_Line.constprop.0+0x9a4>
 8002750:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002754:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002758:	9809      	ldr	r0, [sp, #36]	; 0x24
 800275a:	2800      	cmp	r0, #0
 800275c:	f040 8152 	bne.w	8002a04 <LCD_Line.constprop.0+0x99c>
 8002760:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002764:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002768:	9808      	ldr	r0, [sp, #32]
 800276a:	2800      	cmp	r0, #0
 800276c:	f040 8146 	bne.w	80029fc <LCD_Line.constprop.0+0x994>
 8002770:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002774:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002778:	9807      	ldr	r0, [sp, #28]
 800277a:	2800      	cmp	r0, #0
 800277c:	f040 813a 	bne.w	80029f4 <LCD_Line.constprop.0+0x98c>
 8002780:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002784:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002788:	9806      	ldr	r0, [sp, #24]
 800278a:	2800      	cmp	r0, #0
 800278c:	f040 812e 	bne.w	80029ec <LCD_Line.constprop.0+0x984>
 8002790:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002794:	f8ca 0010 	str.w	r0, [sl, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002798:	9805      	ldr	r0, [sp, #20]
 800279a:	2800      	cmp	r0, #0
 800279c:	f040 8122 	bne.w	80029e4 <LCD_Line.constprop.0+0x97c>
 80027a0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80027a4:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80027a8:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027aa:	f8ce 5010 	str.w	r5, [lr, #16]
    GPIOx->BSRR = GPIO_Pin;
 80027ae:	f8ce 0010 	str.w	r0, [lr, #16]
 80027b2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80027b6:	f8ce 0010 	str.w	r0, [lr, #16]
 80027ba:	2001      	movs	r0, #1
 80027bc:	f8ce 0010 	str.w	r0, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027c0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80027c4:	f8ce 9010 	str.w	r9, [lr, #16]
 80027c8:	f8cb 5010 	str.w	r5, [fp, #16]
 80027cc:	f8cb 4010 	str.w	r4, [fp, #16]
 80027d0:	f8ca 7010 	str.w	r7, [sl, #16]
 80027d4:	f8ca 6010 	str.w	r6, [sl, #16]
 80027d8:	f8ca 5010 	str.w	r5, [sl, #16]
 80027dc:	f8ca 4010 	str.w	r4, [sl, #16]
 80027e0:	f8ca 0010 	str.w	r0, [sl, #16]
 80027e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80027e8:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80027ec:	9804      	ldr	r0, [sp, #16]
 80027ee:	2800      	cmp	r0, #0
 80027f0:	f000 80f5 	beq.w	80029de <LCD_Line.constprop.0+0x976>
    GPIOx->BSRR = GPIO_Pin;
 80027f4:	2004      	movs	r0, #4
 80027f6:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80027fa:	9803      	ldr	r0, [sp, #12]
 80027fc:	2800      	cmp	r0, #0
 80027fe:	f040 80ea 	bne.w	80029d6 <LCD_Line.constprop.0+0x96e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002802:	f8cb 7010 	str.w	r7, [fp, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002806:	9802      	ldr	r0, [sp, #8]
 8002808:	2800      	cmp	r0, #0
 800280a:	f040 80e0 	bne.w	80029ce <LCD_Line.constprop.0+0x966>
 800280e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002812:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002816:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002818:	2800      	cmp	r0, #0
 800281a:	f040 80d4 	bne.w	80029c6 <LCD_Line.constprop.0+0x95e>
 800281e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002822:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002826:	4640      	mov	r0, r8
 8002828:	2800      	cmp	r0, #0
 800282a:	f040 80c8 	bne.w	80029be <LCD_Line.constprop.0+0x956>
 800282e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002832:	f8cb 0010 	str.w	r0, [fp, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002836:	2900      	cmp	r1, #0
 8002838:	f040 80bd 	bne.w	80029b6 <LCD_Line.constprop.0+0x94e>
 800283c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8002840:	f8cb 1010 	str.w	r1, [fp, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002844:	2a00      	cmp	r2, #0
 8002846:	f040 80ac 	bne.w	80029a2 <LCD_Line.constprop.0+0x93a>
 800284a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800284e:	f8ca 2010 	str.w	r2, [sl, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002852:	2b00      	cmp	r3, #0
 8002854:	f040 80ab 	bne.w	80029ae <LCD_Line.constprop.0+0x946>
 8002858:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800285c:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002860:	2002      	movs	r0, #2
 8002862:	f44f 6180 	mov.w	r1, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002866:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800286a:	f8ce 5010 	str.w	r5, [lr, #16]
 800286e:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8002872:	f8ce 0010 	str.w	r0, [lr, #16]
 8002876:	f8ce 1010 	str.w	r1, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800287a:	f8ce 4010 	str.w	r4, [lr, #16]
 800287e:	f8ce 9010 	str.w	r9, [lr, #16]
 8002882:	f8cb 5010 	str.w	r5, [fp, #16]
 8002886:	f8cb 4010 	str.w	r4, [fp, #16]
 800288a:	f8ca 7010 	str.w	r7, [sl, #16]
 800288e:	f8ca 6010 	str.w	r6, [sl, #16]
 8002892:	f8ca 5010 	str.w	r5, [sl, #16]
 8002896:	f8ca 4010 	str.w	r4, [sl, #16]
 800289a:	f8ca 8010 	str.w	r8, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800289e:	f04f 0810 	mov.w	r8, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028a2:	f8ca c010 	str.w	ip, [sl, #16]
 80028a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028aa:	f8cb 6010 	str.w	r6, [fp, #16]
 80028ae:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80028b2:	f8cb 8010 	str.w	r8, [fp, #16]
 80028b6:	f04f 0840 	mov.w	r8, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ba:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80028be:	f8cb 8010 	str.w	r8, [fp, #16]
 80028c2:	f04f 0880 	mov.w	r8, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80028ca:	f8cb 8010 	str.w	r8, [fp, #16]
 80028ce:	f04f 0801 	mov.w	r8, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028d2:	f8ca 2010 	str.w	r2, [sl, #16]
 80028d6:	f8ca 3010 	str.w	r3, [sl, #16]
 80028da:	f8ce 5010 	str.w	r5, [lr, #16]
    GPIOx->BSRR = GPIO_Pin;
 80028de:	f8ce 0010 	str.w	r0, [lr, #16]
 80028e2:	f8ce 1010 	str.w	r1, [lr, #16]
 80028e6:	f8ce 8010 	str.w	r8, [lr, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ea:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80028ee:	f8ce 9010 	str.w	r9, [lr, #16]
 80028f2:	f8cb 5010 	str.w	r5, [fp, #16]
 80028f6:	f8cb 4010 	str.w	r4, [fp, #16]
 80028fa:	f8ca 7010 	str.w	r7, [sl, #16]
 80028fe:	f8ca 6010 	str.w	r6, [sl, #16]
 8002902:	f8ca 5010 	str.w	r5, [sl, #16]
 8002906:	f8ca 4010 	str.w	r4, [sl, #16]
 800290a:	f8ca 8010 	str.w	r8, [sl, #16]
 800290e:	f8ca c010 	str.w	ip, [sl, #16]
 8002912:	f44f 0c80 	mov.w	ip, #4194304	; 0x400000
 8002916:	f8cb 6010 	str.w	r6, [fp, #16]
 800291a:	f8cb 7010 	str.w	r7, [fp, #16]
 800291e:	f8cb 2010 	str.w	r2, [fp, #16]
 8002922:	f8cb 3010 	str.w	r3, [fp, #16]
 8002926:	f8cb c010 	str.w	ip, [fp, #16]
 800292a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800292e:	f8cb c010 	str.w	ip, [fp, #16]
 8002932:	f8ca 2010 	str.w	r2, [sl, #16]
 8002936:	f8ca 3010 	str.w	r3, [sl, #16]
		if (x1 == x2 && y1 == y2)
 800293a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800293c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800293e:	f8ce 5010 	str.w	r5, [lr, #16]
 8002942:	4293      	cmp	r3, r2
    GPIOx->BSRR = GPIO_Pin;
 8002944:	f8ce 0010 	str.w	r0, [lr, #16]
 8002948:	f8ce 1010 	str.w	r1, [lr, #16]
 800294c:	f000 80f4 	beq.w	8002b38 <LCD_Line.constprop.0+0xad0>
		error2 = error * 2;
 8002950:	9901      	ldr	r1, [sp, #4]
 8002952:	004b      	lsls	r3, r1, #1
		if (error2 > -deltaY)
 8002954:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
 8002958:	f2c0 80c7 	blt.w	8002aea <LCD_Line.constprop.0+0xa82>
			x1 += signX;
 800295c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
			error -= deltaY;
 800295e:	397e      	subs	r1, #126	; 0x7e
			x1 += signX;
 8002960:	9825      	ldr	r0, [sp, #148]	; 0x94
			error -= deltaY;
 8002962:	9101      	str	r1, [sp, #4]
		if (error2 < deltaX)
 8002964:	9924      	ldr	r1, [sp, #144]	; 0x90
			x1 += signX;
 8002966:	4402      	add	r2, r0
 8002968:	b292      	uxth	r2, r2
		if (error2 < deltaX)
 800296a:	4299      	cmp	r1, r3
			x1 += signX;
 800296c:	920d      	str	r2, [sp, #52]	; 0x34
		if (error2 < deltaX)
 800296e:	f300 80a6 	bgt.w	8002abe <LCD_Line.constprop.0+0xa56>
 8002972:	4613      	mov	r3, r2
 8002974:	0a12      	lsrs	r2, r2, #8
 8002976:	920f      	str	r2, [sp, #60]	; 0x3c
 8002978:	0bda      	lsrs	r2, r3, #15
 800297a:	9216      	str	r2, [sp, #88]	; 0x58
 800297c:	0b9a      	lsrs	r2, r3, #14
 800297e:	9215      	str	r2, [sp, #84]	; 0x54
 8002980:	0b5a      	lsrs	r2, r3, #13
 8002982:	9214      	str	r2, [sp, #80]	; 0x50
 8002984:	0b1a      	lsrs	r2, r3, #12
 8002986:	9213      	str	r2, [sp, #76]	; 0x4c
 8002988:	0ada      	lsrs	r2, r3, #11
 800298a:	9212      	str	r2, [sp, #72]	; 0x48
 800298c:	0a9a      	lsrs	r2, r3, #10
 800298e:	9211      	str	r2, [sp, #68]	; 0x44
 8002990:	0a5a      	lsrs	r2, r3, #9
 8002992:	9210      	str	r2, [sp, #64]	; 0x40
 8002994:	b2da      	uxtb	r2, r3
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	9217      	str	r2, [sp, #92]	; 0x5c
 800299c:	930e      	str	r3, [sp, #56]	; 0x38
 800299e:	f7ff bbb2 	b.w	8002106 <LCD_Line.constprop.0+0x9e>
 80029a2:	2210      	movs	r2, #16
 80029a4:	f8ca 2010 	str.w	r2, [sl, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f43f af55 	beq.w	8002858 <LCD_Line.constprop.0+0x7f0>
 80029ae:	2320      	movs	r3, #32
 80029b0:	f8ca 3010 	str.w	r3, [sl, #16]
 80029b4:	e754      	b.n	8002860 <LCD_Line.constprop.0+0x7f8>
 80029b6:	2180      	movs	r1, #128	; 0x80
 80029b8:	f8cb 1010 	str.w	r1, [fp, #16]
 80029bc:	e742      	b.n	8002844 <LCD_Line.constprop.0+0x7dc>
 80029be:	2040      	movs	r0, #64	; 0x40
 80029c0:	f8cb 0010 	str.w	r0, [fp, #16]
 80029c4:	e737      	b.n	8002836 <LCD_Line.constprop.0+0x7ce>
 80029c6:	2020      	movs	r0, #32
 80029c8:	f8cb 0010 	str.w	r0, [fp, #16]
 80029cc:	e72b      	b.n	8002826 <LCD_Line.constprop.0+0x7be>
 80029ce:	2010      	movs	r0, #16
 80029d0:	f8cb 0010 	str.w	r0, [fp, #16]
 80029d4:	e71f      	b.n	8002816 <LCD_Line.constprop.0+0x7ae>
 80029d6:	2008      	movs	r0, #8
 80029d8:	f8cb 0010 	str.w	r0, [fp, #16]
 80029dc:	e713      	b.n	8002806 <LCD_Line.constprop.0+0x79e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029de:	f8cb 6010 	str.w	r6, [fp, #16]
 80029e2:	e70a      	b.n	80027fa <LCD_Line.constprop.0+0x792>
    GPIOx->BSRR = GPIO_Pin;
 80029e4:	2020      	movs	r0, #32
 80029e6:	f8ca 0010 	str.w	r0, [sl, #16]
 80029ea:	e6dd      	b.n	80027a8 <LCD_Line.constprop.0+0x740>
 80029ec:	2010      	movs	r0, #16
 80029ee:	f8ca 0010 	str.w	r0, [sl, #16]
 80029f2:	e6d1      	b.n	8002798 <LCD_Line.constprop.0+0x730>
 80029f4:	2080      	movs	r0, #128	; 0x80
 80029f6:	f8cb 0010 	str.w	r0, [fp, #16]
 80029fa:	e6c5      	b.n	8002788 <LCD_Line.constprop.0+0x720>
 80029fc:	2040      	movs	r0, #64	; 0x40
 80029fe:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a02:	e6b9      	b.n	8002778 <LCD_Line.constprop.0+0x710>
 8002a04:	2020      	movs	r0, #32
 8002a06:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a0a:	e6ad      	b.n	8002768 <LCD_Line.constprop.0+0x700>
 8002a0c:	2010      	movs	r0, #16
 8002a0e:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a12:	e6a1      	b.n	8002758 <LCD_Line.constprop.0+0x6f0>
 8002a14:	2008      	movs	r0, #8
 8002a16:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a1a:	e695      	b.n	8002748 <LCD_Line.constprop.0+0x6e0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a1c:	f8cb 6010 	str.w	r6, [fp, #16]
 8002a20:	e68c      	b.n	800273c <LCD_Line.constprop.0+0x6d4>
    GPIOx->BSRR = GPIO_Pin;
 8002a22:	2020      	movs	r0, #32
 8002a24:	f8ca 0010 	str.w	r0, [sl, #16]
 8002a28:	e65f      	b.n	80026ea <LCD_Line.constprop.0+0x682>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a2a:	f8cb 6010 	str.w	r6, [fp, #16]
 8002a2e:	e5a7      	b.n	8002580 <LCD_Line.constprop.0+0x518>
    GPIOx->BSRR = GPIO_Pin;
 8002a30:	2320      	movs	r3, #32
 8002a32:	f8ca 3010 	str.w	r3, [sl, #16]
 8002a36:	e540      	b.n	80024ba <LCD_Line.constprop.0+0x452>
 8002a38:	2210      	movs	r2, #16
 8002a3a:	f8ca 2010 	str.w	r2, [sl, #16]
 8002a3e:	e534      	b.n	80024aa <LCD_Line.constprop.0+0x442>
 8002a40:	2180      	movs	r1, #128	; 0x80
 8002a42:	f8cb 1010 	str.w	r1, [fp, #16]
 8002a46:	e529      	b.n	800249c <LCD_Line.constprop.0+0x434>
 8002a48:	2040      	movs	r0, #64	; 0x40
 8002a4a:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a4e:	e51e      	b.n	800248e <LCD_Line.constprop.0+0x426>
 8002a50:	2020      	movs	r0, #32
 8002a52:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a56:	e512      	b.n	800247e <LCD_Line.constprop.0+0x416>
 8002a58:	2010      	movs	r0, #16
 8002a5a:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a5e:	e506      	b.n	800246e <LCD_Line.constprop.0+0x406>
 8002a60:	2008      	movs	r0, #8
 8002a62:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a66:	e4fa      	b.n	800245e <LCD_Line.constprop.0+0x3f6>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a68:	f8cb 6010 	str.w	r6, [fp, #16]
 8002a6c:	e4f1      	b.n	8002452 <LCD_Line.constprop.0+0x3ea>
    GPIOx->BSRR = GPIO_Pin;
 8002a6e:	2020      	movs	r0, #32
 8002a70:	f8ca 0010 	str.w	r0, [sl, #16]
 8002a74:	e4c4      	b.n	8002400 <LCD_Line.constprop.0+0x398>
 8002a76:	2010      	movs	r0, #16
 8002a78:	f8ca 0010 	str.w	r0, [sl, #16]
 8002a7c:	e4b0      	b.n	80023e0 <LCD_Line.constprop.0+0x378>
 8002a7e:	2080      	movs	r0, #128	; 0x80
 8002a80:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a84:	e4a4      	b.n	80023d0 <LCD_Line.constprop.0+0x368>
 8002a86:	2040      	movs	r0, #64	; 0x40
 8002a88:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a8c:	e498      	b.n	80023c0 <LCD_Line.constprop.0+0x358>
 8002a8e:	2020      	movs	r0, #32
 8002a90:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a94:	e48c      	b.n	80023b0 <LCD_Line.constprop.0+0x348>
 8002a96:	2010      	movs	r0, #16
 8002a98:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a9c:	e480      	b.n	80023a0 <LCD_Line.constprop.0+0x338>
 8002a9e:	2008      	movs	r0, #8
 8002aa0:	f8cb 0010 	str.w	r0, [fp, #16]
 8002aa4:	e474      	b.n	8002390 <LCD_Line.constprop.0+0x328>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002aa6:	f8cb 6010 	str.w	r6, [fp, #16]
 8002aaa:	e46c      	b.n	8002386 <LCD_Line.constprop.0+0x31e>
    GPIOx->BSRR = GPIO_Pin;
 8002aac:	f04f 0c20 	mov.w	ip, #32
 8002ab0:	f8ca c010 	str.w	ip, [sl, #16]
 8002ab4:	e43b      	b.n	800232e <LCD_Line.constprop.0+0x2c6>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ab6:	f8cb 6010 	str.w	r6, [fp, #16]
 8002aba:	f7ff bb80 	b.w	80021be <LCD_Line.constprop.0+0x156>
 8002abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ac0:	0a1a      	lsrs	r2, r3, #8
 8002ac2:	920f      	str	r2, [sp, #60]	; 0x3c
 8002ac4:	0bda      	lsrs	r2, r3, #15
 8002ac6:	9216      	str	r2, [sp, #88]	; 0x58
 8002ac8:	0b9a      	lsrs	r2, r3, #14
 8002aca:	9215      	str	r2, [sp, #84]	; 0x54
 8002acc:	0b5a      	lsrs	r2, r3, #13
 8002ace:	9214      	str	r2, [sp, #80]	; 0x50
 8002ad0:	0b1a      	lsrs	r2, r3, #12
 8002ad2:	9213      	str	r2, [sp, #76]	; 0x4c
 8002ad4:	0ada      	lsrs	r2, r3, #11
 8002ad6:	9212      	str	r2, [sp, #72]	; 0x48
 8002ad8:	0a9a      	lsrs	r2, r3, #10
 8002ada:	9211      	str	r2, [sp, #68]	; 0x44
 8002adc:	0a5a      	lsrs	r2, r3, #9
 8002ade:	9210      	str	r2, [sp, #64]	; 0x40
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	9217      	str	r2, [sp, #92]	; 0x5c
 8002ae8:	930e      	str	r3, [sp, #56]	; 0x38
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8002aea:	9b22      	ldr	r3, [sp, #136]	; 0x88
			error += deltaX;
 8002aec:	9a01      	ldr	r2, [sp, #4]
 8002aee:	9924      	ldr	r1, [sp, #144]	; 0x90
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8002af0:	3301      	adds	r3, #1
			error += deltaX;
 8002af2:	440a      	add	r2, r1
 8002af4:	9201      	str	r2, [sp, #4]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	9222      	str	r2, [sp, #136]	; 0x88
 8002afa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002afe:	9219      	str	r2, [sp, #100]	; 0x64
 8002b00:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002b04:	9220      	str	r2, [sp, #128]	; 0x80
 8002b06:	f3c3 3281 	ubfx	r2, r3, #14, #2
 8002b0a:	921f      	str	r2, [sp, #124]	; 0x7c
 8002b0c:	f3c3 3242 	ubfx	r2, r3, #13, #3
 8002b10:	921e      	str	r2, [sp, #120]	; 0x78
 8002b12:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8002b16:	921d      	str	r2, [sp, #116]	; 0x74
 8002b18:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 8002b1c:	921c      	str	r2, [sp, #112]	; 0x70
 8002b1e:	f3c3 2285 	ubfx	r2, r3, #10, #6
 8002b22:	921b      	str	r2, [sp, #108]	; 0x6c
 8002b24:	f3c3 2246 	ubfx	r2, r3, #9, #7
 8002b28:	921a      	str	r2, [sp, #104]	; 0x68
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	9221      	str	r2, [sp, #132]	; 0x84
 8002b32:	9318      	str	r3, [sp, #96]	; 0x60
 8002b34:	f7ff bae7 	b.w	8002106 <LCD_Line.constprop.0+0x9e>
		if (x1 == x2 && y1 == y2)
 8002b38:	f240 133d 	movw	r3, #317	; 0x13d
 8002b3c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	f47f af06 	bne.w	8002950 <LCD_Line.constprop.0+0x8e8>
}
 8002b44:	b027      	add	sp, #156	; 0x9c
 8002b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b4a:	bf00      	nop

08002b4c <LCD_Line.constprop.1>:
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8002b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b50:	4686      	mov	lr, r0
 8002b52:	b0bb      	sub	sp, #236	; 0xec
	int deltaX = abs(x2 - x1);
 8002b54:	9202      	str	r2, [sp, #8]
 8002b56:	eba2 020e 	sub.w	r2, r2, lr
 8002b5a:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 8002b5e:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
	int deltaY = abs(y2 - y1);
 8002b62:	f5c1 729e 	rsb	r2, r1, #316	; 0x13c
 8002b66:	3201      	adds	r2, #1
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8002b68:	9135      	str	r1, [sp, #212]	; 0xd4
	int deltaX = abs(x2 - x1);
 8002b6a:	9537      	str	r5, [sp, #220]	; 0xdc
	int deltaY = abs(y2 - y1);
 8002b6c:	460d      	mov	r5, r1
 8002b6e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 8002b72:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
	int signX = x1 < x2 ? 1 : -1;
 8002b76:	9a02      	ldr	r2, [sp, #8]
	int deltaY = abs(y2 - y1);
 8002b78:	9134      	str	r1, [sp, #208]	; 0xd0
	int signX = x1 < x2 ? 1 : -1;
 8002b7a:	4572      	cmp	r2, lr
 8002b7c:	bf8c      	ite	hi
 8002b7e:	2201      	movhi	r2, #1
 8002b80:	f04f 32ff 	movls.w	r2, #4294967295
	int signY = y1 < y2 ? 1 : -1;
 8002b84:	f5b5 7f9e 	cmp.w	r5, #316	; 0x13c
	int signX = x1 < x2 ? 1 : -1;
 8002b88:	9238      	str	r2, [sp, #224]	; 0xe0
	int signY = y1 < y2 ? 1 : -1;
 8002b8a:	bf94      	ite	ls
 8002b8c:	2201      	movls	r2, #1
 8002b8e:	f04f 32ff 	movhi.w	r2, #4294967295
 8002b92:	9239      	str	r2, [sp, #228]	; 0xe4
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8002b94:	f3c3 2285 	ubfx	r2, r3, #10, #6
 8002b98:	f3c3 41c4 	ubfx	r1, r3, #19, #5
 8002b9c:	0152      	lsls	r2, r2, #5
 8002b9e:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8002ba2:	f3c1 1110 	ubfx	r1, r1, #4, #17
 8002ba6:	9136      	str	r1, [sp, #216]	; 0xd8
 8002ba8:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8002bac:	f3c2 3180 	ubfx	r1, r2, #14, #1
 8002bb0:	f04f 6b80 	mov.w	fp, #67108864	; 0x4000000
 8002bb4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002bb8:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8002bbc:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8002bc0:	2602      	movs	r6, #2
 8002bc2:	9103      	str	r1, [sp, #12]
 8002bc4:	f3c2 3140 	ubfx	r1, r2, #13, #1
 8002bc8:	9104      	str	r1, [sp, #16]
 8002bca:	f3c2 3100 	ubfx	r1, r2, #12, #1
 8002bce:	9105      	str	r1, [sp, #20]
 8002bd0:	f3c2 21c0 	ubfx	r1, r2, #11, #1
 8002bd4:	9106      	str	r1, [sp, #24]
 8002bd6:	f3c2 2180 	ubfx	r1, r2, #10, #1
 8002bda:	9107      	str	r1, [sp, #28]
 8002bdc:	f3c2 2140 	ubfx	r1, r2, #9, #1
 8002be0:	9108      	str	r1, [sp, #32]
 8002be2:	f3c2 2100 	ubfx	r1, r2, #8, #1
 8002be6:	9109      	str	r1, [sp, #36]	; 0x24
 8002be8:	f3c2 11c0 	ubfx	r1, r2, #7, #1
 8002bec:	910a      	str	r1, [sp, #40]	; 0x28
 8002bee:	f3c2 1180 	ubfx	r1, r2, #6, #1
 8002bf2:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8002bf6:	920c      	str	r2, [sp, #48]	; 0x30
 8002bf8:	f3c3 12c0 	ubfx	r2, r3, #7, #1
 8002bfc:	920d      	str	r2, [sp, #52]	; 0x34
 8002bfe:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8002c02:	920e      	str	r2, [sp, #56]	; 0x38
 8002c04:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8002c08:	920f      	str	r2, [sp, #60]	; 0x3c
 8002c0a:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8002c0e:	9210      	str	r2, [sp, #64]	; 0x40
 8002c10:	0a2a      	lsrs	r2, r5, #8
 8002c12:	9225      	str	r2, [sp, #148]	; 0x94
 8002c14:	0bea      	lsrs	r2, r5, #15
 8002c16:	9233      	str	r2, [sp, #204]	; 0xcc
 8002c18:	0baa      	lsrs	r2, r5, #14
 8002c1a:	9231      	str	r2, [sp, #196]	; 0xc4
 8002c1c:	0b6a      	lsrs	r2, r5, #13
 8002c1e:	922f      	str	r2, [sp, #188]	; 0xbc
 8002c20:	0b2a      	lsrs	r2, r5, #12
 8002c22:	922d      	str	r2, [sp, #180]	; 0xb4
 8002c24:	0aea      	lsrs	r2, r5, #11
 8002c26:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002c2a:	922b      	str	r2, [sp, #172]	; 0xac
 8002c2c:	0aaa      	lsrs	r2, r5, #10
 8002c2e:	9311      	str	r3, [sp, #68]	; 0x44
 8002c30:	9229      	str	r2, [sp, #164]	; 0xa4
 8002c32:	f005 0301 	and.w	r3, r5, #1
 8002c36:	0a6a      	lsrs	r2, r5, #9
 8002c38:	910b      	str	r1, [sp, #44]	; 0x2c
 8002c3a:	9227      	str	r2, [sp, #156]	; 0x9c
	int error = deltaX - deltaY;
 8002c3c:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8002c3e:	9323      	str	r3, [sp, #140]	; 0x8c
 8002c40:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8002c44:	9324      	str	r3, [sp, #144]	; 0x90
 8002c46:	ea4f 33de 	mov.w	r3, lr, lsr #15
 8002c4a:	9332      	str	r3, [sp, #200]	; 0xc8
 8002c4c:	ea4f 339e 	mov.w	r3, lr, lsr #14
 8002c50:	9330      	str	r3, [sp, #192]	; 0xc0
 8002c52:	ea4f 335e 	mov.w	r3, lr, lsr #13
 8002c56:	932e      	str	r3, [sp, #184]	; 0xb8
 8002c58:	ea4f 331e 	mov.w	r3, lr, lsr #12
 8002c5c:	932c      	str	r3, [sp, #176]	; 0xb0
 8002c5e:	ea4f 23de 	mov.w	r3, lr, lsr #11
 8002c62:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8002c64:	932a      	str	r3, [sp, #168]	; 0xa8
 8002c66:	ea4f 239e 	mov.w	r3, lr, lsr #10
 8002c6a:	9328      	str	r3, [sp, #160]	; 0xa0
 8002c6c:	ea4f 235e 	mov.w	r3, lr, lsr #9
 8002c70:	1a52      	subs	r2, r2, r1
 8002c72:	9326      	str	r3, [sp, #152]	; 0x98
 8002c74:	fa5f f38e 	uxtb.w	r3, lr
 8002c78:	9212      	str	r2, [sp, #72]	; 0x48
 8002c7a:	9320      	str	r3, [sp, #128]	; 0x80
 8002c7c:	b2ea      	uxtb	r2, r5
 8002c7e:	f00e 0301 	and.w	r3, lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c82:	f8df a358 	ldr.w	sl, [pc, #856]	; 8002fdc <LCD_Line.constprop.1+0x490>
 8002c86:	f8df 9358 	ldr.w	r9, [pc, #856]	; 8002fe0 <LCD_Line.constprop.1+0x494>
 8002c8a:	f8df 8358 	ldr.w	r8, [pc, #856]	; 8002fe4 <LCD_Line.constprop.1+0x498>
 8002c8e:	9221      	str	r2, [sp, #132]	; 0x84
 8002c90:	9322      	str	r3, [sp, #136]	; 0x88
 8002c92:	f8cd e004 	str.w	lr, [sp, #4]
	data[0] = x1 >> 8;
 8002c96:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
 8002c9a:	f8ca c010 	str.w	ip, [sl, #16]
 8002c9e:	f8ca b010 	str.w	fp, [sl, #16]
 8002ca2:	f8c9 0010 	str.w	r0, [r9, #16]
 8002ca6:	f8c9 c010 	str.w	ip, [r9, #16]
 8002caa:	f8c8 4010 	str.w	r4, [r8, #16]
 8002cae:	f8c8 7010 	str.w	r7, [r8, #16]
 8002cb2:	f8c8 0010 	str.w	r0, [r8, #16]
 8002cb6:	f8c8 c010 	str.w	ip, [r8, #16]
 8002cba:	9513      	str	r5, [sp, #76]	; 0x4c
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002cbc:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 8002cbe:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8002cc2:	b2ab      	uxth	r3, r5
 8002cc4:	9315      	str	r3, [sp, #84]	; 0x54
 8002cc6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8002cca:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ccc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cd0:	f8c8 e010 	str.w	lr, [r8, #16]
 8002cd4:	f8c8 1010 	str.w	r1, [r8, #16]
 8002cd8:	f8c9 7010 	str.w	r7, [r9, #16]
 8002cdc:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002ce0:	f8c9 2010 	str.w	r2, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ce4:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002ce8:	2340      	movs	r3, #64	; 0x40
 8002cea:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cee:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002cf2:	f8c9 3010 	str.w	r3, [r9, #16]
 8002cf6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002cfa:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cfe:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d06:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002d0a:	f8ca 6010 	str.w	r6, [sl, #16]
 8002d0e:	f8ca 3010 	str.w	r3, [sl, #16]
 8002d12:	2301      	movs	r3, #1
 8002d14:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d18:	f8ca b010 	str.w	fp, [sl, #16]
 8002d1c:	f8c9 0010 	str.w	r0, [r9, #16]
 8002d20:	f8c9 c010 	str.w	ip, [r9, #16]
 8002d24:	f8c8 4010 	str.w	r4, [r8, #16]
 8002d28:	f8c8 7010 	str.w	r7, [r8, #16]
 8002d2c:	f8c8 0010 	str.w	r0, [r8, #16]
 8002d30:	f8c8 c010 	str.w	ip, [r8, #16]
 8002d34:	f8c8 e010 	str.w	lr, [r8, #16]
 8002d38:	f8c8 1010 	str.w	r1, [r8, #16]
 8002d3c:	2d00      	cmp	r5, #0
 8002d3e:	f000 855f 	beq.w	8003800 <LCD_Line.constprop.1+0xcb4>
    GPIOx->BSRR = GPIO_Pin;
 8002d42:	2304      	movs	r3, #4
 8002d44:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002d48:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8002d4a:	f013 0301 	ands.w	r3, r3, #1
 8002d4e:	9316      	str	r3, [sp, #88]	; 0x58
 8002d50:	bf1c      	itt	ne
 8002d52:	2308      	movne	r3, #8
 8002d54:	f8c9 3010 	strne.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002d58:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d5a:	bf08      	it	eq
 8002d5c:	f8c9 4010 	streq.w	r4, [r9, #16]
 8002d60:	f013 0301 	ands.w	r3, r3, #1
 8002d64:	9317      	str	r3, [sp, #92]	; 0x5c
 8002d66:	bf0c      	ite	eq
 8002d68:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002d6c:	2310      	movne	r3, #16
 8002d6e:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002d72:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8002d74:	f013 0301 	ands.w	r3, r3, #1
 8002d78:	9318      	str	r3, [sp, #96]	; 0x60
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d7a:	bf0c      	ite	eq
 8002d7c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002d80:	2320      	movne	r3, #32
 8002d82:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002d86:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8002d88:	f013 0301 	ands.w	r3, r3, #1
 8002d8c:	9319      	str	r3, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d8e:	bf0c      	ite	eq
 8002d90:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8002d94:	2340      	movne	r3, #64	; 0x40
 8002d96:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002d9a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8002d9c:	f013 0301 	ands.w	r3, r3, #1
 8002da0:	9314      	str	r3, [sp, #80]	; 0x50
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002da2:	bf0c      	ite	eq
 8002da4:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8002da8:	2380      	movne	r3, #128	; 0x80
 8002daa:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002dae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8002db0:	f013 0301 	ands.w	r3, r3, #1
 8002db4:	931a      	str	r3, [sp, #104]	; 0x68
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002db6:	bf0c      	ite	eq
 8002db8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002dbc:	2310      	movne	r3, #16
 8002dbe:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002dc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002dc4:	f013 0301 	ands.w	r3, r3, #1
 8002dc8:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dca:	bf0c      	ite	eq
 8002dcc:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002dd0:	2320      	movne	r3, #32
 8002dd2:	f8c8 3010 	str.w	r3, [r8, #16]
 8002dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dda:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002dde:	f8ca 6010 	str.w	r6, [sl, #16]
 8002de2:	f8ca 3010 	str.w	r3, [sl, #16]
 8002de6:	2301      	movs	r3, #1
 8002de8:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002df0:	f8ca b010 	str.w	fp, [sl, #16]
 8002df4:	f8c9 0010 	str.w	r0, [r9, #16]
 8002df8:	f8c9 c010 	str.w	ip, [r9, #16]
 8002dfc:	f8c8 4010 	str.w	r4, [r8, #16]
 8002e00:	f8c8 7010 	str.w	r7, [r8, #16]
 8002e04:	f8c8 0010 	str.w	r0, [r8, #16]
 8002e08:	f8c8 c010 	str.w	ip, [r8, #16]
 8002e0c:	f8c8 3010 	str.w	r3, [r8, #16]
 8002e10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e14:	f8c8 3010 	str.w	r3, [r8, #16]
 8002e18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002e1a:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8002e1c:	fa1f fe83 	uxth.w	lr, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002e20:	09db      	lsrs	r3, r3, #7
 8002e22:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIOx->BSRR = GPIO_Pin;
 8002e24:	bf16      	itet	ne
 8002e26:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e28:	f8c9 7010 	streq.w	r7, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002e2c:	f8c9 3010 	strne.w	r3, [r9, #16]
 8002e30:	f3ce 1380 	ubfx	r3, lr, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002e34:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8002e38:	931d      	str	r3, [sp, #116]	; 0x74
 8002e3a:	bf16      	itet	ne
 8002e3c:	2308      	movne	r3, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e3e:	f8c9 4010 	streq.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002e42:	f8c9 3010 	strne.w	r3, [r9, #16]
 8002e46:	f3ce 1340 	ubfx	r3, lr, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002e4a:	f01e 0f20 	tst.w	lr, #32
 8002e4e:	931e      	str	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e50:	bf0c      	ite	eq
 8002e52:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002e56:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002e58:	f01e 0f10 	tst.w	lr, #16
 8002e5c:	f8c9 3010 	str.w	r3, [r9, #16]
 8002e60:	f3ce 1300 	ubfx	r3, lr, #4, #1
 8002e64:	931c      	str	r3, [sp, #112]	; 0x70
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e66:	bf0c      	ite	eq
 8002e68:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002e6c:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002e6e:	f01e 0f08 	tst.w	lr, #8
 8002e72:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e76:	bf0c      	ite	eq
 8002e78:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8002e7c:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002e7e:	f01e 0f04 	tst.w	lr, #4
 8002e82:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e86:	bf0c      	ite	eq
 8002e88:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8002e8c:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002e8e:	f01e 0f02 	tst.w	lr, #2
 8002e92:	f3ce 01c0 	ubfx	r1, lr, #3, #1
 8002e96:	f3ce 0280 	ubfx	r2, lr, #2, #1
 8002e9a:	f8c9 3010 	str.w	r3, [r9, #16]
 8002e9e:	f3ce 0340 	ubfx	r3, lr, #1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ea2:	bf0c      	ite	eq
 8002ea4:	f44f 1e80 	moveq.w	lr, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002ea8:	f04f 0e10 	movne.w	lr, #16
 8002eac:	f8c8 e010 	str.w	lr, [r8, #16]
 8002eb0:	fa1f fe85 	uxth.w	lr, r5
 8002eb4:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002eb8:	2d00      	cmp	r5, #0
 8002eba:	f040 849b 	bne.w	80037f4 <LCD_Line.constprop.1+0xca8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ebe:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8002ec2:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002ec6:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8002eca:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ece:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002ed2:	f8ca 6010 	str.w	r6, [sl, #16]
 8002ed6:	f8ca 5010 	str.w	r5, [sl, #16]
 8002eda:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ede:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8002ee2:	f8ca b010 	str.w	fp, [sl, #16]
 8002ee6:	f8c9 0010 	str.w	r0, [r9, #16]
 8002eea:	f8c9 c010 	str.w	ip, [r9, #16]
 8002eee:	f8c8 4010 	str.w	r4, [r8, #16]
 8002ef2:	f8c8 7010 	str.w	r7, [r8, #16]
 8002ef6:	f8c8 0010 	str.w	r0, [r8, #16]
 8002efa:	f8c8 c010 	str.w	ip, [r8, #16]
 8002efe:	f8c8 e010 	str.w	lr, [r8, #16]
 8002f02:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002f06:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8002f08:	f8c8 e010 	str.w	lr, [r8, #16]
 8002f0c:	2d00      	cmp	r5, #0
 8002f0e:	f000 846d 	beq.w	80037ec <LCD_Line.constprop.1+0xca0>
    GPIOx->BSRR = GPIO_Pin;
 8002f12:	f04f 0e04 	mov.w	lr, #4
 8002f16:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002f1a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8002f1c:	2d00      	cmp	r5, #0
 8002f1e:	f040 845f 	bne.w	80037e0 <LCD_Line.constprop.1+0xc94>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f22:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002f26:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8002f28:	2d00      	cmp	r5, #0
 8002f2a:	f040 8453 	bne.w	80037d4 <LCD_Line.constprop.1+0xc88>
 8002f2e:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8002f32:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002f36:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8002f38:	2d00      	cmp	r5, #0
 8002f3a:	f040 8445 	bne.w	80037c8 <LCD_Line.constprop.1+0xc7c>
 8002f3e:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8002f42:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002f46:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8002f48:	2d00      	cmp	r5, #0
 8002f4a:	f040 8437 	bne.w	80037bc <LCD_Line.constprop.1+0xc70>
 8002f4e:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 8002f52:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002f56:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8002f58:	2d00      	cmp	r5, #0
 8002f5a:	f040 8429 	bne.w	80037b0 <LCD_Line.constprop.1+0xc64>
 8002f5e:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
 8002f62:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002f66:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8002f68:	2d00      	cmp	r5, #0
 8002f6a:	f040 841b 	bne.w	80037a4 <LCD_Line.constprop.1+0xc58>
 8002f6e:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8002f72:	f8c8 e010 	str.w	lr, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002f76:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8002f78:	2d00      	cmp	r5, #0
 8002f7a:	f040 840d 	bne.w	8003798 <LCD_Line.constprop.1+0xc4c>
 8002f7e:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8002f82:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002f86:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8002f8a:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f8e:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002f92:	f8ca 6010 	str.w	r6, [sl, #16]
 8002f96:	f8ca 5010 	str.w	r5, [sl, #16]
 8002f9a:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f9e:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8002fa2:	f8ca b010 	str.w	fp, [sl, #16]
 8002fa6:	f8c9 0010 	str.w	r0, [r9, #16]
 8002faa:	f8c9 c010 	str.w	ip, [r9, #16]
 8002fae:	f8c8 4010 	str.w	r4, [r8, #16]
 8002fb2:	f8c8 7010 	str.w	r7, [r8, #16]
 8002fb6:	f8c8 0010 	str.w	r0, [r8, #16]
 8002fba:	f8c8 c010 	str.w	ip, [r8, #16]
 8002fbe:	f8c8 e010 	str.w	lr, [r8, #16]
 8002fc2:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002fc6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8002fc8:	f8c8 e010 	str.w	lr, [r8, #16]
 8002fcc:	2d00      	cmp	r5, #0
 8002fce:	f000 83e0 	beq.w	8003792 <LCD_Line.constprop.1+0xc46>
    GPIOx->BSRR = GPIO_Pin;
 8002fd2:	f04f 0e04 	mov.w	lr, #4
 8002fd6:	f8c9 e010 	str.w	lr, [r9, #16]
 8002fda:	e005      	b.n	8002fe8 <LCD_Line.constprop.1+0x49c>
 8002fdc:	40010c00 	.word	0x40010c00
 8002fe0:	40010800 	.word	0x40010800
 8002fe4:	40011000 	.word	0x40011000
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002fe8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8002fea:	2d00      	cmp	r5, #0
 8002fec:	f040 83cc 	bne.w	8003788 <LCD_Line.constprop.1+0xc3c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ff0:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002ff4:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8002ff6:	2d00      	cmp	r5, #0
 8002ff8:	f040 83c1 	bne.w	800377e <LCD_Line.constprop.1+0xc32>
 8002ffc:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8003000:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003004:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8003006:	2d00      	cmp	r5, #0
 8003008:	f040 83b4 	bne.w	8003774 <LCD_Line.constprop.1+0xc28>
 800300c:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8003010:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003014:	2900      	cmp	r1, #0
 8003016:	f040 83a9 	bne.w	800376c <LCD_Line.constprop.1+0xc20>
 800301a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800301e:	f8c9 1010 	str.w	r1, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003022:	2a00      	cmp	r2, #0
 8003024:	f040 839e 	bne.w	8003764 <LCD_Line.constprop.1+0xc18>
 8003028:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800302c:	f8c9 2010 	str.w	r2, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003030:	2b00      	cmp	r3, #0
 8003032:	f040 8393 	bne.w	800375c <LCD_Line.constprop.1+0xc10>
 8003036:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800303a:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800303e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003040:	2b00      	cmp	r3, #0
 8003042:	f040 8387 	bne.w	8003754 <LCD_Line.constprop.1+0xc08>
 8003046:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800304a:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800304e:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003052:	9d32      	ldr	r5, [sp, #200]	; 0xc8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003054:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003058:	f8ca 6010 	str.w	r6, [sl, #16]
 800305c:	f8ca 3010 	str.w	r3, [sl, #16]
 8003060:	b2ab      	uxth	r3, r5
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003062:	f8ca c010 	str.w	ip, [sl, #16]
 8003066:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800306a:	f8ca b010 	str.w	fp, [sl, #16]
 800306e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003072:	f8c9 0010 	str.w	r0, [r9, #16]
 8003076:	f8c9 c010 	str.w	ip, [r9, #16]
 800307a:	f8c8 4010 	str.w	r4, [r8, #16]
 800307e:	f8c8 7010 	str.w	r7, [r8, #16]
 8003082:	f8c8 0010 	str.w	r0, [r8, #16]
 8003086:	f8c8 c010 	str.w	ip, [r8, #16]
 800308a:	931c      	str	r3, [sp, #112]	; 0x70
    GPIOx->BSRR = GPIO_Pin;
 800308c:	2310      	movs	r3, #16
	data[0] = y1 >> 8;
 800308e:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003092:	f8c8 1010 	str.w	r1, [r8, #16]
 8003096:	f8c8 2010 	str.w	r2, [r8, #16]
 800309a:	f8c9 7010 	str.w	r7, [r9, #16]
 800309e:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80030a2:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030aa:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80030ae:	2340      	movs	r3, #64	; 0x40
 80030b0:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80030b8:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80030bc:	2310      	movs	r3, #16
 80030be:	f8c8 3010 	str.w	r3, [r8, #16]
 80030c2:	2320      	movs	r3, #32
 80030c4:	f8c8 3010 	str.w	r3, [r8, #16]
 80030c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030cc:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80030d0:	f8ca 6010 	str.w	r6, [sl, #16]
 80030d4:	f8ca 3010 	str.w	r3, [sl, #16]
 80030d8:	2301      	movs	r3, #1
 80030da:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030de:	f8ca b010 	str.w	fp, [sl, #16]
 80030e2:	f8c9 0010 	str.w	r0, [r9, #16]
 80030e6:	f8c9 c010 	str.w	ip, [r9, #16]
 80030ea:	f8c8 4010 	str.w	r4, [r8, #16]
 80030ee:	f8c8 7010 	str.w	r7, [r8, #16]
 80030f2:	f8c8 0010 	str.w	r0, [r8, #16]
 80030f6:	f8c8 c010 	str.w	ip, [r8, #16]
 80030fa:	f8c8 1010 	str.w	r1, [r8, #16]
 80030fe:	f8c8 2010 	str.w	r2, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003102:	2d00      	cmp	r5, #0
 8003104:	f000 8323 	beq.w	800374e <LCD_Line.constprop.1+0xc02>
    GPIOx->BSRR = GPIO_Pin;
 8003108:	2304      	movs	r3, #4
 800310a:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800310e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8003110:	f013 0301 	ands.w	r3, r3, #1
 8003114:	931b      	str	r3, [sp, #108]	; 0x6c
 8003116:	bf1c      	itt	ne
 8003118:	2308      	movne	r3, #8
 800311a:	f8c9 3010 	strne.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800311e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003120:	bf08      	it	eq
 8003122:	f8c9 4010 	streq.w	r4, [r9, #16]
 8003126:	f013 0301 	ands.w	r3, r3, #1
 800312a:	931a      	str	r3, [sp, #104]	; 0x68
 800312c:	bf0c      	ite	eq
 800312e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003132:	2310      	movne	r3, #16
 8003134:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003138:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800313a:	f013 0301 	ands.w	r3, r3, #1
 800313e:	9319      	str	r3, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003140:	bf0c      	ite	eq
 8003142:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8003146:	2320      	movne	r3, #32
 8003148:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800314c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800314e:	f013 0301 	ands.w	r3, r3, #1
 8003152:	9318      	str	r3, [sp, #96]	; 0x60
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003154:	bf0c      	ite	eq
 8003156:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800315a:	2340      	movne	r3, #64	; 0x40
 800315c:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003160:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003162:	f013 0301 	ands.w	r3, r3, #1
 8003166:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003168:	bf0c      	ite	eq
 800316a:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800316e:	2380      	movne	r3, #128	; 0x80
 8003170:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003174:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003176:	f013 0301 	ands.w	r3, r3, #1
 800317a:	9316      	str	r3, [sp, #88]	; 0x58
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800317c:	bf0c      	ite	eq
 800317e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003182:	2310      	movne	r3, #16
 8003184:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003188:	f01e 0301 	ands.w	r3, lr, #1
 800318c:	9315      	str	r3, [sp, #84]	; 0x54
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800318e:	bf0c      	ite	eq
 8003190:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8003194:	2320      	movne	r3, #32
 8003196:	f8c8 3010 	str.w	r3, [r8, #16]
 800319a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800319e:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80031a2:	f8ca 6010 	str.w	r6, [sl, #16]
 80031a6:	f8ca 3010 	str.w	r3, [sl, #16]
 80031aa:	2301      	movs	r3, #1
 80031ac:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80031b4:	f8ca b010 	str.w	fp, [sl, #16]
 80031b8:	f8c9 0010 	str.w	r0, [r9, #16]
 80031bc:	f8c9 c010 	str.w	ip, [r9, #16]
 80031c0:	f8c8 4010 	str.w	r4, [r8, #16]
 80031c4:	f8c8 7010 	str.w	r7, [r8, #16]
 80031c8:	f8c8 0010 	str.w	r0, [r8, #16]
 80031cc:	f8c8 c010 	str.w	ip, [r8, #16]
 80031d0:	f8c8 3010 	str.w	r3, [r8, #16]
 80031d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031d8:	f8c8 3010 	str.w	r3, [r8, #16]
 80031dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80031de:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80031e0:	fa1f fe83 	uxth.w	lr, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80031e4:	09db      	lsrs	r3, r3, #7
 80031e6:	931e      	str	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = GPIO_Pin;
 80031e8:	bf16      	itet	ne
 80031ea:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031ec:	f8c9 7010 	streq.w	r7, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80031f0:	f8c9 3010 	strne.w	r3, [r9, #16]
 80031f4:	f3ce 1380 	ubfx	r3, lr, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80031f8:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80031fc:	9314      	str	r3, [sp, #80]	; 0x50
 80031fe:	bf16      	itet	ne
 8003200:	2308      	movne	r3, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003202:	f8c9 4010 	streq.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003206:	f8c9 3010 	strne.w	r3, [r9, #16]
 800320a:	f3ce 1340 	ubfx	r3, lr, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800320e:	f01e 0f20 	tst.w	lr, #32
 8003212:	931d      	str	r3, [sp, #116]	; 0x74
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003214:	bf0c      	ite	eq
 8003216:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800321a:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800321c:	f01e 0f10 	tst.w	lr, #16
 8003220:	f8c9 3010 	str.w	r3, [r9, #16]
 8003224:	f3ce 1300 	ubfx	r3, lr, #4, #1
 8003228:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800322a:	bf0c      	ite	eq
 800322c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8003230:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003232:	f01e 0f08 	tst.w	lr, #8
 8003236:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800323a:	bf0c      	ite	eq
 800323c:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8003240:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003242:	f01e 0f04 	tst.w	lr, #4
 8003246:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800324a:	bf0c      	ite	eq
 800324c:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8003250:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003252:	f01e 0f02 	tst.w	lr, #2
 8003256:	f3ce 01c0 	ubfx	r1, lr, #3, #1
 800325a:	f3ce 0280 	ubfx	r2, lr, #2, #1
 800325e:	f8c9 3010 	str.w	r3, [r9, #16]
 8003262:	f3ce 0340 	ubfx	r3, lr, #1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003266:	bf0c      	ite	eq
 8003268:	f44f 1e80 	moveq.w	lr, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800326c:	f04f 0e10 	movne.w	lr, #16
 8003270:	f8c8 e010 	str.w	lr, [r8, #16]
 8003274:	fa1f fe85 	uxth.w	lr, r5
 8003278:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800327c:	2d00      	cmp	r5, #0
 800327e:	f040 8261 	bne.w	8003744 <LCD_Line.constprop.1+0xbf8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003282:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8003286:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800328a:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800328e:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003292:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003296:	f8ca 6010 	str.w	r6, [sl, #16]
 800329a:	f8ca 5010 	str.w	r5, [sl, #16]
 800329e:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032a2:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 80032a6:	f8ca b010 	str.w	fp, [sl, #16]
 80032aa:	f8c9 0010 	str.w	r0, [r9, #16]
 80032ae:	f8c9 c010 	str.w	ip, [r9, #16]
 80032b2:	f8c8 4010 	str.w	r4, [r8, #16]
 80032b6:	f8c8 7010 	str.w	r7, [r8, #16]
 80032ba:	f8c8 0010 	str.w	r0, [r8, #16]
 80032be:	f8c8 c010 	str.w	ip, [r8, #16]
 80032c2:	f8c8 e010 	str.w	lr, [r8, #16]
 80032c6:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80032ca:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80032cc:	f8c8 e010 	str.w	lr, [r8, #16]
 80032d0:	2d00      	cmp	r5, #0
 80032d2:	f000 8234 	beq.w	800373e <LCD_Line.constprop.1+0xbf2>
    GPIOx->BSRR = GPIO_Pin;
 80032d6:	f04f 0e04 	mov.w	lr, #4
 80032da:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80032de:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	f040 8227 	bne.w	8003734 <LCD_Line.constprop.1+0xbe8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032e6:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80032ea:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80032ec:	2d00      	cmp	r5, #0
 80032ee:	f040 821c 	bne.w	800372a <LCD_Line.constprop.1+0xbde>
 80032f2:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 80032f6:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80032fa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80032fc:	2d00      	cmp	r5, #0
 80032fe:	f040 820f 	bne.w	8003720 <LCD_Line.constprop.1+0xbd4>
 8003302:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8003306:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800330a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800330c:	2d00      	cmp	r5, #0
 800330e:	f040 8202 	bne.w	8003716 <LCD_Line.constprop.1+0xbca>
 8003312:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 8003316:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800331a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800331c:	2d00      	cmp	r5, #0
 800331e:	f040 81f5 	bne.w	800370c <LCD_Line.constprop.1+0xbc0>
 8003322:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
 8003326:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800332a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800332c:	2d00      	cmp	r5, #0
 800332e:	f040 81e8 	bne.w	8003702 <LCD_Line.constprop.1+0xbb6>
 8003332:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8003336:	f8c8 e010 	str.w	lr, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800333a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800333c:	2d00      	cmp	r5, #0
 800333e:	f040 81db 	bne.w	80036f8 <LCD_Line.constprop.1+0xbac>
 8003342:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8003346:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800334a:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800334e:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003352:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003356:	f8ca 6010 	str.w	r6, [sl, #16]
 800335a:	f8ca 5010 	str.w	r5, [sl, #16]
 800335e:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003362:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8003366:	f8ca b010 	str.w	fp, [sl, #16]
 800336a:	f8c9 0010 	str.w	r0, [r9, #16]
 800336e:	f8c9 c010 	str.w	ip, [r9, #16]
 8003372:	f8c8 4010 	str.w	r4, [r8, #16]
 8003376:	f8c8 7010 	str.w	r7, [r8, #16]
 800337a:	f8c8 0010 	str.w	r0, [r8, #16]
 800337e:	f8c8 c010 	str.w	ip, [r8, #16]
 8003382:	f8c8 e010 	str.w	lr, [r8, #16]
 8003386:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800338a:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800338c:	f8c8 e010 	str.w	lr, [r8, #16]
 8003390:	2d00      	cmp	r5, #0
 8003392:	f000 81ae 	beq.w	80036f2 <LCD_Line.constprop.1+0xba6>
    GPIOx->BSRR = GPIO_Pin;
 8003396:	f04f 0e04 	mov.w	lr, #4
 800339a:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800339e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80033a0:	2d00      	cmp	r5, #0
 80033a2:	f040 81a1 	bne.w	80036e8 <LCD_Line.constprop.1+0xb9c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033a6:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80033aa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80033ac:	2d00      	cmp	r5, #0
 80033ae:	f040 8196 	bne.w	80036de <LCD_Line.constprop.1+0xb92>
 80033b2:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 80033b6:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80033ba:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80033bc:	2d00      	cmp	r5, #0
 80033be:	f040 8189 	bne.w	80036d4 <LCD_Line.constprop.1+0xb88>
 80033c2:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 80033c6:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80033ca:	2900      	cmp	r1, #0
 80033cc:	f040 817e 	bne.w	80036cc <LCD_Line.constprop.1+0xb80>
 80033d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033d4:	f8c9 1010 	str.w	r1, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80033d8:	2a00      	cmp	r2, #0
 80033da:	f040 8173 	bne.w	80036c4 <LCD_Line.constprop.1+0xb78>
 80033de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80033e2:	f8c9 2010 	str.w	r2, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f040 8168 	bne.w	80036bc <LCD_Line.constprop.1+0xb70>
 80033ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033f0:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80033f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f040 815c 	bne.w	80036b4 <LCD_Line.constprop.1+0xb68>
 80033fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003400:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003404:	f44f 6180 	mov.w	r1, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003408:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800340c:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003410:	f8ca 6010 	str.w	r6, [sl, #16]
 8003414:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003418:	f8ca c010 	str.w	ip, [sl, #16]
 800341c:	f8ca b010 	str.w	fp, [sl, #16]
 8003420:	f8c9 0010 	str.w	r0, [r9, #16]
 8003424:	f8c9 c010 	str.w	ip, [r9, #16]
 8003428:	f8c8 4010 	str.w	r4, [r8, #16]
 800342c:	f8c8 7010 	str.w	r7, [r8, #16]
 8003430:	f8c8 0010 	str.w	r0, [r8, #16]
 8003434:	f8c8 c010 	str.w	ip, [r8, #16]
 8003438:	f8c8 2010 	str.w	r2, [r8, #16]
 800343c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003440:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003444:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003446:	f8c9 7010 	str.w	r7, [r9, #16]
 800344a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800344e:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003452:	f8c9 2010 	str.w	r2, [r9, #16]
 8003456:	2240      	movs	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003458:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 800345c:	f8c9 2010 	str.w	r2, [r9, #16]
 8003460:	2280      	movs	r2, #128	; 0x80
 8003462:	f8c9 2010 	str.w	r2, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003466:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800346a:	f8c8 2010 	str.w	r2, [r8, #16]
 800346e:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003472:	2301      	movs	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003474:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003478:	f8ca 6010 	str.w	r6, [sl, #16]
 800347c:	f8ca 1010 	str.w	r1, [sl, #16]
 8003480:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8003484:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003486:	f8ca b010 	str.w	fp, [sl, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 810f 	beq.w	80036ae <LCD_Line.constprop.1+0xb62>
    GPIOx->BSRR = GPIO_Pin;
 8003490:	f8c9 6010 	str.w	r6, [r9, #16]
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8003494:	9b03      	ldr	r3, [sp, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 8106 	beq.w	80036a8 <LCD_Line.constprop.1+0xb5c>
 800349c:	2301      	movs	r3, #1
 800349e:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 80034a2:	9b04      	ldr	r3, [sp, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80fc 	beq.w	80036a2 <LCD_Line.constprop.1+0xb56>
 80034aa:	2308      	movs	r3, #8
 80034ac:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 80034b0:	9b05      	ldr	r3, [sp, #20]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80f2 	beq.w	800369c <LCD_Line.constprop.1+0xb50>
 80034b8:	2304      	movs	r3, #4
 80034ba:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 80034be:	9b06      	ldr	r3, [sp, #24]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 80e8 	beq.w	8003696 <LCD_Line.constprop.1+0xb4a>
 80034c6:	f8c8 6010 	str.w	r6, [r8, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 80034ca:	9b07      	ldr	r3, [sp, #28]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80df 	beq.w	8003690 <LCD_Line.constprop.1+0xb44>
 80034d2:	2301      	movs	r3, #1
 80034d4:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 80034d8:	9b08      	ldr	r3, [sp, #32]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 80d3 	beq.w	8003686 <LCD_Line.constprop.1+0xb3a>
 80034e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034e4:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80034e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 80c6 	beq.w	800367c <LCD_Line.constprop.1+0xb30>
 80034f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034f4:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80034f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 80bb 	beq.w	8003676 <LCD_Line.constprop.1+0xb2a>
 8003500:	2304      	movs	r3, #4
 8003502:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80b1 	beq.w	8003670 <LCD_Line.constprop.1+0xb24>
 800350e:	2308      	movs	r3, #8
 8003510:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 80a5 	beq.w	8003666 <LCD_Line.constprop.1+0xb1a>
 800351c:	2310      	movs	r3, #16
 800351e:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 8099 	beq.w	800365c <LCD_Line.constprop.1+0xb10>
 800352a:	2320      	movs	r3, #32
 800352c:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 808d 	beq.w	8003652 <LCD_Line.constprop.1+0xb06>
 8003538:	2340      	movs	r3, #64	; 0x40
 800353a:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800353e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 8081 	beq.w	8003648 <LCD_Line.constprop.1+0xafc>
 8003546:	2380      	movs	r3, #128	; 0x80
 8003548:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800354c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800354e:	2b00      	cmp	r3, #0
 8003550:	d075      	beq.n	800363e <LCD_Line.constprop.1+0xaf2>
 8003552:	2310      	movs	r3, #16
 8003554:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003558:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800355a:	2b00      	cmp	r3, #0
 800355c:	d06a      	beq.n	8003634 <LCD_Line.constprop.1+0xae8>
 800355e:	2320      	movs	r3, #32
 8003560:	f8c8 3010 	str.w	r3, [r8, #16]
 8003564:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003568:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800356c:	f8ca 6010 	str.w	r6, [sl, #16]
 8003570:	f8ca 3010 	str.w	r3, [sl, #16]
		if (x1 == x2 && y1 == y2)
 8003574:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8003578:	4293      	cmp	r3, r2
 800357a:	f000 8145 	beq.w	8003808 <LCD_Line.constprop.1+0xcbc>
		if (error2 > -deltaY)
 800357e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
		error2 = error * 2;
 8003580:	9912      	ldr	r1, [sp, #72]	; 0x48
		if (error2 > -deltaY)
 8003582:	425b      	negs	r3, r3
 8003584:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
		error2 = error * 2;
 8003588:	ea4f 0241 	mov.w	r2, r1, lsl #1
		if (error2 > -deltaY)
 800358c:	da27      	bge.n	80035de <LCD_Line.constprop.1+0xa92>
			x1 += signX;
 800358e:	9d01      	ldr	r5, [sp, #4]
 8003590:	f8dd e0e0 	ldr.w	lr, [sp, #224]	; 0xe0
 8003594:	4475      	add	r5, lr
 8003596:	462b      	mov	r3, r5
			error -= deltaY;
 8003598:	460d      	mov	r5, r1
 800359a:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800359c:	1a69      	subs	r1, r5, r1
 800359e:	9112      	str	r1, [sp, #72]	; 0x48
			x1 += signX;
 80035a0:	b299      	uxth	r1, r3
 80035a2:	9101      	str	r1, [sp, #4]
 80035a4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80035a8:	9124      	str	r1, [sp, #144]	; 0x90
 80035aa:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 80035ae:	9132      	str	r1, [sp, #200]	; 0xc8
 80035b0:	f3c3 3181 	ubfx	r1, r3, #14, #2
 80035b4:	9130      	str	r1, [sp, #192]	; 0xc0
 80035b6:	f3c3 3142 	ubfx	r1, r3, #13, #3
 80035ba:	912e      	str	r1, [sp, #184]	; 0xb8
 80035bc:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80035c0:	912c      	str	r1, [sp, #176]	; 0xb0
 80035c2:	f3c3 21c4 	ubfx	r1, r3, #11, #5
 80035c6:	912a      	str	r1, [sp, #168]	; 0xa8
 80035c8:	f3c3 2185 	ubfx	r1, r3, #10, #6
 80035cc:	9128      	str	r1, [sp, #160]	; 0xa0
 80035ce:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80035d2:	9126      	str	r1, [sp, #152]	; 0x98
 80035d4:	b2d9      	uxtb	r1, r3
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	9120      	str	r1, [sp, #128]	; 0x80
 80035dc:	9322      	str	r3, [sp, #136]	; 0x88
		if (error2 < deltaX)
 80035de:	9937      	ldr	r1, [sp, #220]	; 0xdc
 80035e0:	4291      	cmp	r1, r2
 80035e2:	f77f ab58 	ble.w	8002c96 <LCD_Line.constprop.1+0x14a>
			y1 += signY;
 80035e6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80035e8:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 80035ea:	4413      	add	r3, r2
			error += deltaX;
 80035ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80035ee:	440a      	add	r2, r1
 80035f0:	9212      	str	r2, [sp, #72]	; 0x48
			y1 += signY;
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	9235      	str	r2, [sp, #212]	; 0xd4
 80035f6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80035fa:	9225      	str	r2, [sp, #148]	; 0x94
 80035fc:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8003600:	9233      	str	r2, [sp, #204]	; 0xcc
 8003602:	f3c3 3281 	ubfx	r2, r3, #14, #2
 8003606:	9231      	str	r2, [sp, #196]	; 0xc4
 8003608:	f3c3 3242 	ubfx	r2, r3, #13, #3
 800360c:	922f      	str	r2, [sp, #188]	; 0xbc
 800360e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8003612:	922d      	str	r2, [sp, #180]	; 0xb4
 8003614:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 8003618:	922b      	str	r2, [sp, #172]	; 0xac
 800361a:	f3c3 2285 	ubfx	r2, r3, #10, #6
 800361e:	9229      	str	r2, [sp, #164]	; 0xa4
 8003620:	f3c3 2246 	ubfx	r2, r3, #9, #7
 8003624:	9227      	str	r2, [sp, #156]	; 0x9c
 8003626:	b2da      	uxtb	r2, r3
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	9221      	str	r2, [sp, #132]	; 0x84
 800362e:	9323      	str	r3, [sp, #140]	; 0x8c
 8003630:	f7ff bb31 	b.w	8002c96 <LCD_Line.constprop.1+0x14a>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003634:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003638:	f8c8 3010 	str.w	r3, [r8, #16]
}
 800363c:	e792      	b.n	8003564 <LCD_Line.constprop.1+0xa18>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800363e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003642:	f8c8 3010 	str.w	r3, [r8, #16]
}
 8003646:	e787      	b.n	8003558 <LCD_Line.constprop.1+0xa0c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003648:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800364c:	f8c9 3010 	str.w	r3, [r9, #16]
}
 8003650:	e77c      	b.n	800354c <LCD_Line.constprop.1+0xa00>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003656:	f8c9 3010 	str.w	r3, [r9, #16]
}
 800365a:	e770      	b.n	800353e <LCD_Line.constprop.1+0x9f2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800365c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003660:	f8c9 3010 	str.w	r3, [r9, #16]
}
 8003664:	e764      	b.n	8003530 <LCD_Line.constprop.1+0x9e4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003666:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800366a:	f8c9 3010 	str.w	r3, [r9, #16]
}
 800366e:	e758      	b.n	8003522 <LCD_Line.constprop.1+0x9d6>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003670:	f8c9 4010 	str.w	r4, [r9, #16]
}
 8003674:	e74e      	b.n	8003514 <LCD_Line.constprop.1+0x9c8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003676:	f8c9 7010 	str.w	r7, [r9, #16]
}
 800367a:	e744      	b.n	8003506 <LCD_Line.constprop.1+0x9ba>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800367c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003680:	f8c8 3010 	str.w	r3, [r8, #16]
}
 8003684:	e738      	b.n	80034f8 <LCD_Line.constprop.1+0x9ac>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003686:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800368a:	f8c8 3010 	str.w	r3, [r8, #16]
}
 800368e:	e72b      	b.n	80034e8 <LCD_Line.constprop.1+0x99c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003690:	f8c8 c010 	str.w	ip, [r8, #16]
}
 8003694:	e720      	b.n	80034d8 <LCD_Line.constprop.1+0x98c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003696:	f8c8 0010 	str.w	r0, [r8, #16]
}
 800369a:	e716      	b.n	80034ca <LCD_Line.constprop.1+0x97e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800369c:	f8c8 7010 	str.w	r7, [r8, #16]
}
 80036a0:	e70d      	b.n	80034be <LCD_Line.constprop.1+0x972>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036a2:	f8c8 4010 	str.w	r4, [r8, #16]
}
 80036a6:	e703      	b.n	80034b0 <LCD_Line.constprop.1+0x964>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036a8:	f8c9 c010 	str.w	ip, [r9, #16]
}
 80036ac:	e6f9      	b.n	80034a2 <LCD_Line.constprop.1+0x956>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036ae:	f8c9 0010 	str.w	r0, [r9, #16]
}
 80036b2:	e6ef      	b.n	8003494 <LCD_Line.constprop.1+0x948>
    GPIOx->BSRR = GPIO_Pin;
 80036b4:	2320      	movs	r3, #32
 80036b6:	f8c8 3010 	str.w	r3, [r8, #16]
 80036ba:	e6a3      	b.n	8003404 <LCD_Line.constprop.1+0x8b8>
 80036bc:	2310      	movs	r3, #16
 80036be:	f8c8 3010 	str.w	r3, [r8, #16]
 80036c2:	e697      	b.n	80033f4 <LCD_Line.constprop.1+0x8a8>
 80036c4:	2280      	movs	r2, #128	; 0x80
 80036c6:	f8c9 2010 	str.w	r2, [r9, #16]
 80036ca:	e68c      	b.n	80033e6 <LCD_Line.constprop.1+0x89a>
 80036cc:	2140      	movs	r1, #64	; 0x40
 80036ce:	f8c9 1010 	str.w	r1, [r9, #16]
 80036d2:	e681      	b.n	80033d8 <LCD_Line.constprop.1+0x88c>
 80036d4:	f04f 0e20 	mov.w	lr, #32
 80036d8:	f8c9 e010 	str.w	lr, [r9, #16]
 80036dc:	e675      	b.n	80033ca <LCD_Line.constprop.1+0x87e>
 80036de:	f04f 0e10 	mov.w	lr, #16
 80036e2:	f8c9 e010 	str.w	lr, [r9, #16]
 80036e6:	e668      	b.n	80033ba <LCD_Line.constprop.1+0x86e>
 80036e8:	f04f 0e08 	mov.w	lr, #8
 80036ec:	f8c9 e010 	str.w	lr, [r9, #16]
 80036f0:	e65b      	b.n	80033aa <LCD_Line.constprop.1+0x85e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036f2:	f8c9 7010 	str.w	r7, [r9, #16]
 80036f6:	e652      	b.n	800339e <LCD_Line.constprop.1+0x852>
    GPIOx->BSRR = GPIO_Pin;
 80036f8:	f04f 0e20 	mov.w	lr, #32
 80036fc:	f8c8 e010 	str.w	lr, [r8, #16]
 8003700:	e623      	b.n	800334a <LCD_Line.constprop.1+0x7fe>
 8003702:	f04f 0e10 	mov.w	lr, #16
 8003706:	f8c8 e010 	str.w	lr, [r8, #16]
 800370a:	e616      	b.n	800333a <LCD_Line.constprop.1+0x7ee>
 800370c:	f04f 0e80 	mov.w	lr, #128	; 0x80
 8003710:	f8c9 e010 	str.w	lr, [r9, #16]
 8003714:	e609      	b.n	800332a <LCD_Line.constprop.1+0x7de>
 8003716:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800371a:	f8c9 e010 	str.w	lr, [r9, #16]
 800371e:	e5fc      	b.n	800331a <LCD_Line.constprop.1+0x7ce>
 8003720:	f04f 0e20 	mov.w	lr, #32
 8003724:	f8c9 e010 	str.w	lr, [r9, #16]
 8003728:	e5ef      	b.n	800330a <LCD_Line.constprop.1+0x7be>
 800372a:	f04f 0e10 	mov.w	lr, #16
 800372e:	f8c9 e010 	str.w	lr, [r9, #16]
 8003732:	e5e2      	b.n	80032fa <LCD_Line.constprop.1+0x7ae>
 8003734:	f04f 0e08 	mov.w	lr, #8
 8003738:	f8c9 e010 	str.w	lr, [r9, #16]
 800373c:	e5d5      	b.n	80032ea <LCD_Line.constprop.1+0x79e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800373e:	f8c9 7010 	str.w	r7, [r9, #16]
 8003742:	e5cc      	b.n	80032de <LCD_Line.constprop.1+0x792>
    GPIOx->BSRR = GPIO_Pin;
 8003744:	f04f 0e20 	mov.w	lr, #32
 8003748:	f8c8 e010 	str.w	lr, [r8, #16]
 800374c:	e59d      	b.n	800328a <LCD_Line.constprop.1+0x73e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800374e:	f8c9 7010 	str.w	r7, [r9, #16]
 8003752:	e4dc      	b.n	800310e <LCD_Line.constprop.1+0x5c2>
    GPIOx->BSRR = GPIO_Pin;
 8003754:	2320      	movs	r3, #32
 8003756:	f8c8 3010 	str.w	r3, [r8, #16]
 800375a:	e478      	b.n	800304e <LCD_Line.constprop.1+0x502>
 800375c:	2310      	movs	r3, #16
 800375e:	f8c8 3010 	str.w	r3, [r8, #16]
 8003762:	e46c      	b.n	800303e <LCD_Line.constprop.1+0x4f2>
 8003764:	2280      	movs	r2, #128	; 0x80
 8003766:	f8c9 2010 	str.w	r2, [r9, #16]
 800376a:	e461      	b.n	8003030 <LCD_Line.constprop.1+0x4e4>
 800376c:	2140      	movs	r1, #64	; 0x40
 800376e:	f8c9 1010 	str.w	r1, [r9, #16]
 8003772:	e456      	b.n	8003022 <LCD_Line.constprop.1+0x4d6>
 8003774:	f04f 0e20 	mov.w	lr, #32
 8003778:	f8c9 e010 	str.w	lr, [r9, #16]
 800377c:	e44a      	b.n	8003014 <LCD_Line.constprop.1+0x4c8>
 800377e:	f04f 0e10 	mov.w	lr, #16
 8003782:	f8c9 e010 	str.w	lr, [r9, #16]
 8003786:	e43d      	b.n	8003004 <LCD_Line.constprop.1+0x4b8>
 8003788:	f04f 0e08 	mov.w	lr, #8
 800378c:	f8c9 e010 	str.w	lr, [r9, #16]
 8003790:	e430      	b.n	8002ff4 <LCD_Line.constprop.1+0x4a8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003792:	f8c9 7010 	str.w	r7, [r9, #16]
 8003796:	e427      	b.n	8002fe8 <LCD_Line.constprop.1+0x49c>
    GPIOx->BSRR = GPIO_Pin;
 8003798:	f04f 0e20 	mov.w	lr, #32
 800379c:	f8c8 e010 	str.w	lr, [r8, #16]
 80037a0:	f7ff bbf1 	b.w	8002f86 <LCD_Line.constprop.1+0x43a>
 80037a4:	f04f 0e10 	mov.w	lr, #16
 80037a8:	f8c8 e010 	str.w	lr, [r8, #16]
 80037ac:	f7ff bbe3 	b.w	8002f76 <LCD_Line.constprop.1+0x42a>
 80037b0:	f04f 0e80 	mov.w	lr, #128	; 0x80
 80037b4:	f8c9 e010 	str.w	lr, [r9, #16]
 80037b8:	f7ff bbd5 	b.w	8002f66 <LCD_Line.constprop.1+0x41a>
 80037bc:	f04f 0e40 	mov.w	lr, #64	; 0x40
 80037c0:	f8c9 e010 	str.w	lr, [r9, #16]
 80037c4:	f7ff bbc7 	b.w	8002f56 <LCD_Line.constprop.1+0x40a>
 80037c8:	f04f 0e20 	mov.w	lr, #32
 80037cc:	f8c9 e010 	str.w	lr, [r9, #16]
 80037d0:	f7ff bbb9 	b.w	8002f46 <LCD_Line.constprop.1+0x3fa>
 80037d4:	f04f 0e10 	mov.w	lr, #16
 80037d8:	f8c9 e010 	str.w	lr, [r9, #16]
 80037dc:	f7ff bbab 	b.w	8002f36 <LCD_Line.constprop.1+0x3ea>
 80037e0:	f04f 0e08 	mov.w	lr, #8
 80037e4:	f8c9 e010 	str.w	lr, [r9, #16]
 80037e8:	f7ff bb9d 	b.w	8002f26 <LCD_Line.constprop.1+0x3da>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037ec:	f8c9 7010 	str.w	r7, [r9, #16]
 80037f0:	f7ff bb93 	b.w	8002f1a <LCD_Line.constprop.1+0x3ce>
    GPIOx->BSRR = GPIO_Pin;
 80037f4:	f04f 0e20 	mov.w	lr, #32
 80037f8:	f8c8 e010 	str.w	lr, [r8, #16]
 80037fc:	f7ff bb63 	b.w	8002ec6 <LCD_Line.constprop.1+0x37a>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003800:	f8c9 7010 	str.w	r7, [r9, #16]
 8003804:	f7ff baa0 	b.w	8002d48 <LCD_Line.constprop.1+0x1fc>
		if (x1 == x2 && y1 == y2)
 8003808:	f240 133d 	movw	r3, #317	; 0x13d
 800380c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800380e:	429a      	cmp	r2, r3
 8003810:	f47f aeb5 	bne.w	800357e <LCD_Line.constprop.1+0xa32>
}
 8003814:	b03b      	add	sp, #236	; 0xec
 8003816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800381a:	bf00      	nop

0800381c <LCD_Line.constprop.2>:
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 800381c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003820:	b0ab      	sub	sp, #172	; 0xac
 8003822:	9123      	str	r1, [sp, #140]	; 0x8c
 8003824:	4619      	mov	r1, r3
 8003826:	9329      	str	r3, [sp, #164]	; 0xa4
	int deltaX = abs(x2 - x1);
 8003828:	1a13      	subs	r3, r2, r0
 800382a:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
 800382e:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
	int deltaY = abs(y2 - y1);
 8003832:	9b23      	ldr	r3, [sp, #140]	; 0x8c
	int deltaX = abs(x2 - x1);
 8003834:	9224      	str	r2, [sp, #144]	; 0x90
	int deltaY = abs(y2 - y1);
 8003836:	1acb      	subs	r3, r1, r3
 8003838:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800383c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003840:	9225      	str	r2, [sp, #148]	; 0x94
	int signX = x1 < x2 ? 1 : -1;
 8003842:	9a24      	ldr	r2, [sp, #144]	; 0x90
	int signY = y1 < y2 ? 1 : -1;
 8003844:	9b23      	ldr	r3, [sp, #140]	; 0x8c
	int signX = x1 < x2 ? 1 : -1;
 8003846:	4282      	cmp	r2, r0
 8003848:	bf8c      	ite	hi
 800384a:	2201      	movhi	r2, #1
 800384c:	f04f 32ff 	movls.w	r2, #4294967295
	int signY = y1 < y2 ? 1 : -1;
 8003850:	4299      	cmp	r1, r3
 8003852:	bf8c      	ite	hi
 8003854:	2101      	movhi	r1, #1
 8003856:	f04f 31ff 	movls.w	r1, #4294967295
	int signX = x1 < x2 ? 1 : -1;
 800385a:	9227      	str	r2, [sp, #156]	; 0x9c
 800385c:	0a1a      	lsrs	r2, r3, #8
 800385e:	9214      	str	r2, [sp, #80]	; 0x50
 8003860:	0bda      	lsrs	r2, r3, #15
 8003862:	9201      	str	r2, [sp, #4]
 8003864:	0b9a      	lsrs	r2, r3, #14
 8003866:	9220      	str	r2, [sp, #128]	; 0x80
 8003868:	0b5a      	lsrs	r2, r3, #13
 800386a:	921e      	str	r2, [sp, #120]	; 0x78
 800386c:	0b1a      	lsrs	r2, r3, #12
 800386e:	921c      	str	r2, [sp, #112]	; 0x70
 8003870:	0ada      	lsrs	r2, r3, #11
 8003872:	921a      	str	r2, [sp, #104]	; 0x68
 8003874:	0a9a      	lsrs	r2, r3, #10
	int signY = y1 < y2 ? 1 : -1;
 8003876:	9128      	str	r1, [sp, #160]	; 0xa0
 8003878:	9218      	str	r2, [sp, #96]	; 0x60
 800387a:	b2d9      	uxtb	r1, r3
 800387c:	0a5a      	lsrs	r2, r3, #9
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	9312      	str	r3, [sp, #72]	; 0x48
 8003884:	f000 0301 	and.w	r3, r0, #1
 8003888:	9311      	str	r3, [sp, #68]	; 0x44
	int error = deltaX - deltaY;
 800388a:	4663      	mov	r3, ip
 800388c:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8003890:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8003894:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8003898:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 800389c:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80038a0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80038a4:	9216      	str	r2, [sp, #88]	; 0x58
 80038a6:	0a02      	lsrs	r2, r0, #8
 80038a8:	9213      	str	r2, [sp, #76]	; 0x4c
 80038aa:	0bc2      	lsrs	r2, r0, #15
 80038ac:	9200      	str	r2, [sp, #0]
 80038ae:	0b82      	lsrs	r2, r0, #14
 80038b0:	921f      	str	r2, [sp, #124]	; 0x7c
 80038b2:	0b42      	lsrs	r2, r0, #13
 80038b4:	921d      	str	r2, [sp, #116]	; 0x74
 80038b6:	0b02      	lsrs	r2, r0, #12
 80038b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80038ba:	0ac2      	lsrs	r2, r0, #11
 80038bc:	9219      	str	r2, [sp, #100]	; 0x64
 80038be:	0a82      	lsrs	r2, r0, #10
 80038c0:	9122      	str	r1, [sp, #136]	; 0x88
 80038c2:	9217      	str	r2, [sp, #92]	; 0x5c
 80038c4:	b2c1      	uxtb	r1, r0
 80038c6:	0a42      	lsrs	r2, r0, #9
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 80038c8:	9010      	str	r0, [sp, #64]	; 0x40
	int deltaX = abs(x2 - x1);
 80038ca:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
 80038ce:	9215      	str	r2, [sp, #84]	; 0x54
 80038d0:	9121      	str	r1, [sp, #132]	; 0x84
	int error = deltaX - deltaY;
 80038d2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80038d4:	f8df b350 	ldr.w	fp, [pc, #848]	; 8003c28 <LCD_Line.constprop.2+0x40c>
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	f8df a350 	ldr.w	sl, [pc, #848]	; 8003c2c <LCD_Line.constprop.2+0x410>
 80038de:	f8df 9350 	ldr.w	r9, [pc, #848]	; 8003c30 <LCD_Line.constprop.2+0x414>
 80038e2:	9302      	str	r3, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80038e4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80038e8:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80038ec:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038ee:	f8cb e010 	str.w	lr, [fp, #16]
 80038f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80038f6:	f8ca 7010 	str.w	r7, [sl, #16]
 80038fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80038fe:	f8ca 4010 	str.w	r4, [sl, #16]
 8003902:	f8c9 6010 	str.w	r6, [r9, #16]
 8003906:	f8c9 5010 	str.w	r5, [r9, #16]
 800390a:	f8c9 7010 	str.w	r7, [r9, #16]
 800390e:	f8c9 4010 	str.w	r4, [r9, #16]
 8003912:	f8c9 8010 	str.w	r8, [r9, #16]
 8003916:	900b      	str	r0, [sp, #44]	; 0x2c
    GPIOx->BSRR = GPIO_Pin;
 8003918:	2040      	movs	r0, #64	; 0x40
	data[0] = x1 >> 8;
 800391a:	f8bd c050 	ldrh.w	ip, [sp, #80]	; 0x50
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800391e:	f8c9 1010 	str.w	r1, [r9, #16]
 8003922:	f8ca 5010 	str.w	r5, [sl, #16]
 8003926:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800392a:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800392e:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003932:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003936:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800393a:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800393e:	f8c9 2010 	str.w	r2, [r9, #16]
 8003942:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003944:	f8c9 3010 	str.w	r3, [r9, #16]
 8003948:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800394c:	f8cb 2010 	str.w	r2, [fp, #16]
 8003950:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003954:	f8cb 2010 	str.w	r2, [fp, #16]
 8003958:	2201      	movs	r2, #1
 800395a:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800395e:	f8cb e010 	str.w	lr, [fp, #16]
 8003962:	f8ca 7010 	str.w	r7, [sl, #16]
 8003966:	f8ca 4010 	str.w	r4, [sl, #16]
 800396a:	f8c9 6010 	str.w	r6, [r9, #16]
 800396e:	f8c9 5010 	str.w	r5, [r9, #16]
 8003972:	f8c9 7010 	str.w	r7, [r9, #16]
 8003976:	f8c9 4010 	str.w	r4, [r9, #16]
 800397a:	f8c9 8010 	str.w	r8, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800397e:	9b01      	ldr	r3, [sp, #4]
 8003980:	f8c9 1010 	str.w	r1, [r9, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 849f 	beq.w	80042c8 <LCD_Line.constprop.2+0xaac>
    GPIOx->BSRR = GPIO_Pin;
 800398a:	2304      	movs	r3, #4
 800398c:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003990:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003992:	f013 0001 	ands.w	r0, r3, #1
 8003996:	bf1c      	itt	ne
 8003998:	2308      	movne	r3, #8
 800399a:	f8ca 3010 	strne.w	r3, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800399e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039a0:	bf08      	it	eq
 80039a2:	f8ca 6010 	streq.w	r6, [sl, #16]
 80039a6:	f013 0301 	ands.w	r3, r3, #1
 80039aa:	9303      	str	r3, [sp, #12]
 80039ac:	bf0c      	ite	eq
 80039ae:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80039b2:	2310      	movne	r3, #16
 80039b4:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80039b8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80039ba:	f013 0301 	ands.w	r3, r3, #1
 80039be:	9304      	str	r3, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039c0:	bf0c      	ite	eq
 80039c2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80039c6:	2320      	movne	r3, #32
 80039c8:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80039cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80039ce:	f013 0301 	ands.w	r3, r3, #1
 80039d2:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039d4:	bf0c      	ite	eq
 80039d6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80039da:	2340      	movne	r3, #64	; 0x40
 80039dc:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80039e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80039e2:	f013 0301 	ands.w	r3, r3, #1
 80039e6:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039e8:	bf0c      	ite	eq
 80039ea:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80039ee:	2380      	movne	r3, #128	; 0x80
 80039f0:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80039f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80039f6:	f013 0301 	ands.w	r3, r3, #1
 80039fa:	9305      	str	r3, [sp, #20]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039fc:	bf0c      	ite	eq
 80039fe:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003a02:	2310      	movne	r3, #16
 8003a04:	f8c9 3010 	str.w	r3, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003a08:	f01c 0301 	ands.w	r3, ip, #1
 8003a0c:	9306      	str	r3, [sp, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a0e:	bf0c      	ite	eq
 8003a10:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8003a14:	2320      	movne	r3, #32
 8003a16:	f8c9 3010 	str.w	r3, [r9, #16]
 8003a1a:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a1c:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003a20:	f8cb 3010 	str.w	r3, [fp, #16]
 8003a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a28:	f8cb 3010 	str.w	r3, [fp, #16]
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a36:	f8cb e010 	str.w	lr, [fp, #16]
 8003a3a:	f8ca 7010 	str.w	r7, [sl, #16]
 8003a3e:	f8ca 4010 	str.w	r4, [sl, #16]
 8003a42:	f8c9 6010 	str.w	r6, [r9, #16]
 8003a46:	f8c9 5010 	str.w	r5, [r9, #16]
 8003a4a:	f8c9 7010 	str.w	r7, [r9, #16]
 8003a4e:	f8c9 4010 	str.w	r4, [r9, #16]
 8003a52:	f8c9 8010 	str.w	r8, [r9, #16]
 8003a56:	f8c9 3010 	str.w	r3, [r9, #16]
 8003a5a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003a5c:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003a5e:	09d2      	lsrs	r2, r2, #7
 8003a60:	9207      	str	r2, [sp, #28]
    GPIOx->BSRR = GPIO_Pin;
 8003a62:	bf1c      	itt	ne
 8003a64:	2204      	movne	r2, #4
 8003a66:	f8ca 2010 	strne.w	r2, [sl, #16]
 8003a6a:	f3c3 1280 	ubfx	r2, r3, #6, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a6e:	bf08      	it	eq
 8003a70:	f8ca 5010 	streq.w	r5, [sl, #16]
 8003a74:	920c      	str	r2, [sp, #48]	; 0x30
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003a76:	065a      	lsls	r2, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 8003a78:	bf4a      	itet	mi
 8003a7a:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a7c:	f8ca 6010 	strpl.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003a80:	f8ca 2010 	strmi.w	r2, [sl, #16]
 8003a84:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003a88:	0699      	lsls	r1, r3, #26
 8003a8a:	9208      	str	r2, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a8c:	bf54      	ite	pl
 8003a8e:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003a92:	2210      	movmi	r2, #16
 8003a94:	f8ca 2010 	str.w	r2, [sl, #16]
 8003a98:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8003a9c:	920d      	str	r2, [sp, #52]	; 0x34
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003a9e:	06da      	lsls	r2, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003aa0:	bf54      	ite	pl
 8003aa2:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8003aa6:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003aa8:	0719      	lsls	r1, r3, #28
 8003aaa:	f8ca 2010 	str.w	r2, [sl, #16]
 8003aae:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8003ab2:	920e      	str	r2, [sp, #56]	; 0x38
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ab4:	bf54      	ite	pl
 8003ab6:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8003aba:	2240      	movmi	r2, #64	; 0x40
 8003abc:	f8ca 2010 	str.w	r2, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003ac0:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ac2:	bf54      	ite	pl
 8003ac4:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8003ac8:	2280      	movmi	r2, #128	; 0x80
 8003aca:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8003ace:	f8ca 2010 	str.w	r2, [sl, #16]
 8003ad2:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003ad6:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ad8:	bf54      	ite	pl
 8003ada:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003ade:	2310      	movmi	r3, #16
 8003ae0:	f8c9 3010 	str.w	r3, [r9, #16]
 8003ae4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003ae6:	fa1f fc83 	uxth.w	ip, r3
 8003aea:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f040 83e5 	bne.w	80042be <LCD_Line.constprop.2+0xaa2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003af4:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 8003af8:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003afc:	f04f 0c02 	mov.w	ip, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b00:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003b04:	f8cb c010 	str.w	ip, [fp, #16]
 8003b08:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8003b0c:	f8cb c010 	str.w	ip, [fp, #16]
 8003b10:	f04f 0c01 	mov.w	ip, #1
 8003b14:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b18:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003b1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b1e:	f8cb e010 	str.w	lr, [fp, #16]
 8003b22:	f8ca 7010 	str.w	r7, [sl, #16]
 8003b26:	f8ca 4010 	str.w	r4, [sl, #16]
 8003b2a:	f8c9 6010 	str.w	r6, [r9, #16]
 8003b2e:	f8c9 5010 	str.w	r5, [r9, #16]
 8003b32:	f8c9 7010 	str.w	r7, [r9, #16]
 8003b36:	f8c9 4010 	str.w	r4, [r9, #16]
 8003b3a:	f8c9 8010 	str.w	r8, [r9, #16]
 8003b3e:	f8c9 c010 	str.w	ip, [r9, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 83b8 	beq.w	80042b8 <LCD_Line.constprop.2+0xa9c>
    GPIOx->BSRR = GPIO_Pin;
 8003b48:	f04f 0c04 	mov.w	ip, #4
 8003b4c:	f8ca c010 	str.w	ip, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003b50:	2800      	cmp	r0, #0
 8003b52:	f040 83ad 	bne.w	80042b0 <LCD_Line.constprop.2+0xa94>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b56:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003b5a:	9b03      	ldr	r3, [sp, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f040 83a3 	bne.w	80042a8 <LCD_Line.constprop.2+0xa8c>
 8003b62:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003b66:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003b6a:	9b04      	ldr	r3, [sp, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f040 8397 	bne.w	80042a0 <LCD_Line.constprop.2+0xa84>
 8003b72:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003b76:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f040 838b 	bne.w	8004298 <LCD_Line.constprop.2+0xa7c>
 8003b82:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003b86:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f040 837f 	bne.w	8004290 <LCD_Line.constprop.2+0xa74>
 8003b92:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003b96:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003b9a:	9b05      	ldr	r3, [sp, #20]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f040 8373 	bne.w	8004288 <LCD_Line.constprop.2+0xa6c>
 8003ba2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003ba6:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003baa:	9b06      	ldr	r3, [sp, #24]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f040 8367 	bne.w	8004280 <LCD_Line.constprop.2+0xa64>
 8003bb2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003bb6:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003bba:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003bbc:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003bc0:	f8cb 0010 	str.w	r0, [fp, #16]
 8003bc4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003bc8:	f8cb 0010 	str.w	r0, [fp, #16]
 8003bcc:	2001      	movs	r0, #1
 8003bce:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003bd2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003bd6:	9b07      	ldr	r3, [sp, #28]
 8003bd8:	f8cb e010 	str.w	lr, [fp, #16]
 8003bdc:	f8ca 7010 	str.w	r7, [sl, #16]
 8003be0:	f8ca 4010 	str.w	r4, [sl, #16]
 8003be4:	f8c9 6010 	str.w	r6, [r9, #16]
 8003be8:	f8c9 5010 	str.w	r5, [r9, #16]
 8003bec:	f8c9 7010 	str.w	r7, [r9, #16]
 8003bf0:	f8c9 4010 	str.w	r4, [r9, #16]
 8003bf4:	f8c9 8010 	str.w	r8, [r9, #16]
 8003bf8:	f8c9 0010 	str.w	r0, [r9, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 833c 	beq.w	800427a <LCD_Line.constprop.2+0xa5e>
    GPIOx->BSRR = GPIO_Pin;
 8003c02:	2004      	movs	r0, #4
 8003c04:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003c08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f040 8331 	bne.w	8004272 <LCD_Line.constprop.2+0xa56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c10:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003c14:	9b08      	ldr	r3, [sp, #32]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f040 8327 	bne.w	800426a <LCD_Line.constprop.2+0xa4e>
 8003c1c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003c20:	f8ca 0010 	str.w	r0, [sl, #16]
 8003c24:	e006      	b.n	8003c34 <LCD_Line.constprop.2+0x418>
 8003c26:	bf00      	nop
 8003c28:	40010c00 	.word	0x40010c00
 8003c2c:	40010800 	.word	0x40010800
 8003c30:	40011000 	.word	0x40011000
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003c34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f040 8313 	bne.w	8004262 <LCD_Line.constprop.2+0xa46>
 8003c3c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003c40:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003c44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f040 8307 	bne.w	800425a <LCD_Line.constprop.2+0xa3e>
 8003c4c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003c50:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003c54:	2900      	cmp	r1, #0
 8003c56:	f040 82fc 	bne.w	8004252 <LCD_Line.constprop.2+0xa36>
 8003c5a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8003c5e:	f8ca 1010 	str.w	r1, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003c62:	2a00      	cmp	r2, #0
 8003c64:	f040 82f1 	bne.w	800424a <LCD_Line.constprop.2+0xa2e>
 8003c68:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c6c:	f8c9 2010 	str.w	r2, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003c70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f040 82e5 	bne.w	8004242 <LCD_Line.constprop.2+0xa26>
 8003c78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c7c:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003c80:	f8bd 2000 	ldrh.w	r2, [sp]
 8003c84:	f8cb 7010 	str.w	r7, [fp, #16]
 8003c88:	920d      	str	r2, [sp, #52]	; 0x34
    GPIOx->BSRR = GPIO_Pin;
 8003c8a:	2202      	movs	r2, #2
	data[0] = y1 >> 8;
 8003c8c:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
 8003c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c94:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c98:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8003c9c:	2110      	movs	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c9e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8003ca2:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ca6:	f8cb 4010 	str.w	r4, [fp, #16]
 8003caa:	f8cb e010 	str.w	lr, [fp, #16]
 8003cae:	f8ca 7010 	str.w	r7, [sl, #16]
 8003cb2:	f8ca 4010 	str.w	r4, [sl, #16]
 8003cb6:	f8c9 6010 	str.w	r6, [r9, #16]
 8003cba:	f8c9 5010 	str.w	r5, [r9, #16]
 8003cbe:	f8c9 7010 	str.w	r7, [r9, #16]
 8003cc2:	f8c9 4010 	str.w	r4, [r9, #16]
 8003cc6:	f8c9 8010 	str.w	r8, [r9, #16]
 8003cca:	f8c9 0010 	str.w	r0, [r9, #16]
 8003cce:	f8ca 5010 	str.w	r5, [sl, #16]
 8003cd2:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003cd6:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003cda:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003cde:	2240      	movs	r2, #64	; 0x40
 8003ce0:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ce4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003ce8:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003cec:	2220      	movs	r2, #32
 8003cee:	f8c9 1010 	str.w	r1, [r9, #16]
 8003cf2:	f8c9 2010 	str.w	r2, [r9, #16]
 8003cf6:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003cf8:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003cfc:	f8cb 2010 	str.w	r2, [fp, #16]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f8cb 3010 	str.w	r3, [fp, #16]
 8003d06:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d0a:	f8cb e010 	str.w	lr, [fp, #16]
 8003d0e:	f8ca 7010 	str.w	r7, [sl, #16]
 8003d12:	f8ca 4010 	str.w	r4, [sl, #16]
 8003d16:	f8c9 6010 	str.w	r6, [r9, #16]
 8003d1a:	f8c9 5010 	str.w	r5, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003d1e:	9b00      	ldr	r3, [sp, #0]
 8003d20:	f8c9 7010 	str.w	r7, [r9, #16]
 8003d24:	f8c9 4010 	str.w	r4, [r9, #16]
 8003d28:	f8c9 8010 	str.w	r8, [r9, #16]
 8003d2c:	f8c9 0010 	str.w	r0, [r9, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8283 	beq.w	800423c <LCD_Line.constprop.2+0xa20>
    GPIOx->BSRR = GPIO_Pin;
 8003d36:	2304      	movs	r3, #4
 8003d38:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003d3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003d3e:	f013 0001 	ands.w	r0, r3, #1
 8003d42:	bf1c      	itt	ne
 8003d44:	2308      	movne	r3, #8
 8003d46:	f8ca 3010 	strne.w	r3, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003d4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d4c:	bf08      	it	eq
 8003d4e:	f8ca 6010 	streq.w	r6, [sl, #16]
 8003d52:	f013 0301 	ands.w	r3, r3, #1
 8003d56:	930c      	str	r3, [sp, #48]	; 0x30
 8003d58:	bf0c      	ite	eq
 8003d5a:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003d5e:	2310      	movne	r3, #16
 8003d60:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003d64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003d66:	f013 0301 	ands.w	r3, r3, #1
 8003d6a:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d6c:	bf0c      	ite	eq
 8003d6e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8003d72:	2320      	movne	r3, #32
 8003d74:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003d78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003d7a:	f013 0301 	ands.w	r3, r3, #1
 8003d7e:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d80:	bf0c      	ite	eq
 8003d82:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8003d86:	2340      	movne	r3, #64	; 0x40
 8003d88:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003d8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003d8e:	f013 0301 	ands.w	r3, r3, #1
 8003d92:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d94:	bf0c      	ite	eq
 8003d96:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8003d9a:	2380      	movne	r3, #128	; 0x80
 8003d9c:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003da0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003da2:	f013 0301 	ands.w	r3, r3, #1
 8003da6:	9308      	str	r3, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003da8:	bf0c      	ite	eq
 8003daa:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003dae:	2310      	movne	r3, #16
 8003db0:	f8c9 3010 	str.w	r3, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003db4:	f01c 0301 	ands.w	r3, ip, #1
 8003db8:	9307      	str	r3, [sp, #28]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003dba:	bf0c      	ite	eq
 8003dbc:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8003dc0:	2320      	movne	r3, #32
 8003dc2:	f8c9 3010 	str.w	r3, [r9, #16]
 8003dc6:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003dc8:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003dcc:	f8cb 3010 	str.w	r3, [fp, #16]
 8003dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dd4:	f8cb 3010 	str.w	r3, [fp, #16]
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003dde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003de2:	f8cb e010 	str.w	lr, [fp, #16]
 8003de6:	f8ca 7010 	str.w	r7, [sl, #16]
 8003dea:	f8ca 4010 	str.w	r4, [sl, #16]
 8003dee:	f8c9 6010 	str.w	r6, [r9, #16]
 8003df2:	f8c9 5010 	str.w	r5, [r9, #16]
 8003df6:	f8c9 7010 	str.w	r7, [r9, #16]
 8003dfa:	f8c9 4010 	str.w	r4, [r9, #16]
 8003dfe:	f8c9 8010 	str.w	r8, [r9, #16]
 8003e02:	f8c9 3010 	str.w	r3, [r9, #16]
 8003e06:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003e08:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003e0a:	09d2      	lsrs	r2, r2, #7
 8003e0c:	9206      	str	r2, [sp, #24]
    GPIOx->BSRR = GPIO_Pin;
 8003e0e:	bf1c      	itt	ne
 8003e10:	2204      	movne	r2, #4
 8003e12:	f8ca 2010 	strne.w	r2, [sl, #16]
 8003e16:	f3c3 1280 	ubfx	r2, r3, #6, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e1a:	bf08      	it	eq
 8003e1c:	f8ca 5010 	streq.w	r5, [sl, #16]
 8003e20:	9205      	str	r2, [sp, #20]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003e22:	065a      	lsls	r2, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 8003e24:	bf4a      	itet	mi
 8003e26:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e28:	f8ca 6010 	strpl.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003e2c:	f8ca 2010 	strmi.w	r2, [sl, #16]
 8003e30:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003e34:	0699      	lsls	r1, r3, #26
 8003e36:	9204      	str	r2, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e38:	bf54      	ite	pl
 8003e3a:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003e3e:	2210      	movmi	r2, #16
 8003e40:	f8ca 2010 	str.w	r2, [sl, #16]
 8003e44:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8003e48:	9203      	str	r2, [sp, #12]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003e4a:	06da      	lsls	r2, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e4c:	bf54      	ite	pl
 8003e4e:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8003e52:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003e54:	0719      	lsls	r1, r3, #28
 8003e56:	f8ca 2010 	str.w	r2, [sl, #16]
 8003e5a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8003e5e:	920f      	str	r2, [sp, #60]	; 0x3c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e60:	bf54      	ite	pl
 8003e62:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8003e66:	2240      	movmi	r2, #64	; 0x40
 8003e68:	f8ca 2010 	str.w	r2, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003e6c:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e6e:	bf54      	ite	pl
 8003e70:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8003e74:	2280      	movmi	r2, #128	; 0x80
 8003e76:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8003e7a:	f8ca 2010 	str.w	r2, [sl, #16]
 8003e7e:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003e82:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e84:	bf54      	ite	pl
 8003e86:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8003e8a:	2310      	movmi	r3, #16
 8003e8c:	f8c9 3010 	str.w	r3, [r9, #16]
 8003e90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e92:	fa1f fc83 	uxth.w	ip, r3
 8003e96:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f040 81c9 	bne.w	8004232 <LCD_Line.constprop.2+0xa16>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ea0:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 8003ea4:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003ea8:	f04f 0c02 	mov.w	ip, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003eac:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003eb0:	f8cb c010 	str.w	ip, [fp, #16]
 8003eb4:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8003eb8:	f8cb c010 	str.w	ip, [fp, #16]
 8003ebc:	f04f 0c01 	mov.w	ip, #1
 8003ec0:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ec4:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003ec8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003eca:	f8cb e010 	str.w	lr, [fp, #16]
 8003ece:	f8ca 7010 	str.w	r7, [sl, #16]
 8003ed2:	f8ca 4010 	str.w	r4, [sl, #16]
 8003ed6:	f8c9 6010 	str.w	r6, [r9, #16]
 8003eda:	f8c9 5010 	str.w	r5, [r9, #16]
 8003ede:	f8c9 7010 	str.w	r7, [r9, #16]
 8003ee2:	f8c9 4010 	str.w	r4, [r9, #16]
 8003ee6:	f8c9 8010 	str.w	r8, [r9, #16]
 8003eea:	f8c9 c010 	str.w	ip, [r9, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 819c 	beq.w	800422c <LCD_Line.constprop.2+0xa10>
    GPIOx->BSRR = GPIO_Pin;
 8003ef4:	f04f 0c04 	mov.w	ip, #4
 8003ef8:	f8ca c010 	str.w	ip, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003efc:	2800      	cmp	r0, #0
 8003efe:	f040 8191 	bne.w	8004224 <LCD_Line.constprop.2+0xa08>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f02:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003f06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f040 8187 	bne.w	800421c <LCD_Line.constprop.2+0xa00>
 8003f0e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003f12:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003f16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f040 817b 	bne.w	8004214 <LCD_Line.constprop.2+0x9f8>
 8003f1e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003f22:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f040 816f 	bne.w	800420c <LCD_Line.constprop.2+0x9f0>
 8003f2e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003f32:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f040 8163 	bne.w	8004204 <LCD_Line.constprop.2+0x9e8>
 8003f3e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003f42:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003f46:	9b08      	ldr	r3, [sp, #32]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f040 8157 	bne.w	80041fc <LCD_Line.constprop.2+0x9e0>
 8003f4e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003f52:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8003f56:	9b07      	ldr	r3, [sp, #28]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f040 814b 	bne.w	80041f4 <LCD_Line.constprop.2+0x9d8>
 8003f5e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003f62:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003f66:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f68:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8003f6c:	f8cb 0010 	str.w	r0, [fp, #16]
 8003f70:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003f74:	f8cb 0010 	str.w	r0, [fp, #16]
 8003f78:	2001      	movs	r0, #1
 8003f7a:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f7e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8003f82:	9b06      	ldr	r3, [sp, #24]
 8003f84:	f8cb e010 	str.w	lr, [fp, #16]
 8003f88:	f8ca 7010 	str.w	r7, [sl, #16]
 8003f8c:	f8ca 4010 	str.w	r4, [sl, #16]
 8003f90:	f8c9 6010 	str.w	r6, [r9, #16]
 8003f94:	f8c9 5010 	str.w	r5, [r9, #16]
 8003f98:	f8c9 7010 	str.w	r7, [r9, #16]
 8003f9c:	f8c9 4010 	str.w	r4, [r9, #16]
 8003fa0:	f8c9 8010 	str.w	r8, [r9, #16]
 8003fa4:	f8c9 0010 	str.w	r0, [r9, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 8120 	beq.w	80041ee <LCD_Line.constprop.2+0x9d2>
    GPIOx->BSRR = GPIO_Pin;
 8003fae:	2004      	movs	r0, #4
 8003fb0:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8003fb4:	9b05      	ldr	r3, [sp, #20]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f040 8115 	bne.w	80041e6 <LCD_Line.constprop.2+0x9ca>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fbc:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8003fc0:	9b04      	ldr	r3, [sp, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f040 810b 	bne.w	80041de <LCD_Line.constprop.2+0x9c2>
 8003fc8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003fcc:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8003fd0:	9b03      	ldr	r3, [sp, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f040 80ff 	bne.w	80041d6 <LCD_Line.constprop.2+0x9ba>
 8003fd8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003fdc:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8003fe0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f040 80f3 	bne.w	80041ce <LCD_Line.constprop.2+0x9b2>
 8003fe8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003fec:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8003ff0:	2900      	cmp	r1, #0
 8003ff2:	f040 80e8 	bne.w	80041c6 <LCD_Line.constprop.2+0x9aa>
 8003ff6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8003ffa:	f8ca 1010 	str.w	r1, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8003ffe:	2a00      	cmp	r2, #0
 8004000:	f040 80dd 	bne.w	80041be <LCD_Line.constprop.2+0x9a2>
 8004004:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004008:	f8c9 2010 	str.w	r2, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800400c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800400e:	2b00      	cmp	r3, #0
 8004010:	f040 80d1 	bne.w	80041b6 <LCD_Line.constprop.2+0x99a>
 8004014:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004018:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 800401c:	2202      	movs	r2, #2
 800401e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004022:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004026:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800402a:	f8cb 2010 	str.w	r2, [fp, #16]
 800402e:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004032:	f8cb 4010 	str.w	r4, [fp, #16]
 8004036:	f8cb e010 	str.w	lr, [fp, #16]
 800403a:	f8ca 7010 	str.w	r7, [sl, #16]
 800403e:	f8ca 4010 	str.w	r4, [sl, #16]
 8004042:	f8c9 6010 	str.w	r6, [r9, #16]
 8004046:	f8c9 5010 	str.w	r5, [r9, #16]
 800404a:	f8c9 7010 	str.w	r7, [r9, #16]
 800404e:	f8c9 4010 	str.w	r4, [r9, #16]
 8004052:	f8c9 8010 	str.w	r8, [r9, #16]
 8004056:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 800405a:	2010      	movs	r0, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800405c:	f8ca 5010 	str.w	r5, [sl, #16]
 8004060:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004064:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004068:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800406c:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004070:	2040      	movs	r0, #64	; 0x40
 8004072:	f8ca 0010 	str.w	r0, [sl, #16]
 8004076:	2080      	movs	r0, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004078:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800407c:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004080:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004084:	f8c9 1010 	str.w	r1, [r9, #16]
 8004088:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 800408c:	2001      	movs	r0, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800408e:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004092:	f8cb 2010 	str.w	r2, [fp, #16]
 8004096:	f8cb 3010 	str.w	r3, [fp, #16]
 800409a:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800409e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80040a2:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80040a6:	f04f 0c20 	mov.w	ip, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80040aa:	f8ca 7010 	str.w	r7, [sl, #16]
 80040ae:	f8ca 4010 	str.w	r4, [sl, #16]
 80040b2:	f8c9 6010 	str.w	r6, [r9, #16]
 80040b6:	f8c9 5010 	str.w	r5, [r9, #16]
 80040ba:	f8c9 7010 	str.w	r7, [r9, #16]
 80040be:	f8c9 4010 	str.w	r4, [r9, #16]
 80040c2:	f8c9 8010 	str.w	r8, [r9, #16]
 80040c6:	f8c9 0010 	str.w	r0, [r9, #16]
 80040ca:	f8ca 5010 	str.w	r5, [sl, #16]
 80040ce:	f8ca 6010 	str.w	r6, [sl, #16]
 80040d2:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80040d6:	2140      	movs	r1, #64	; 0x40
 80040d8:	f8ca c010 	str.w	ip, [sl, #16]
 80040dc:	2010      	movs	r0, #16
 80040de:	f8ca 1010 	str.w	r1, [sl, #16]
 80040e2:	2180      	movs	r1, #128	; 0x80
 80040e4:	f8ca 1010 	str.w	r1, [sl, #16]
 80040e8:	f8c9 0010 	str.w	r0, [r9, #16]
 80040ec:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80040f0:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80040f4:	f8cb 2010 	str.w	r2, [fp, #16]
		if (x1 == x2 && y1 == y2)
 80040f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80040fa:	f8cb 3010 	str.w	r3, [fp, #16]
 80040fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004100:	4293      	cmp	r3, r2
 8004102:	f000 80e5 	beq.w	80042d0 <LCD_Line.constprop.2+0xab4>
		if (error2 > -deltaY)
 8004106:	9825      	ldr	r0, [sp, #148]	; 0x94
		error2 = error * 2;
 8004108:	9902      	ldr	r1, [sp, #8]
		if (error2 > -deltaY)
 800410a:	4243      	negs	r3, r0
 800410c:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
		error2 = error * 2;
 8004110:	ea4f 0241 	mov.w	r2, r1, lsl #1
		if (error2 > -deltaY)
 8004114:	da24      	bge.n	8004160 <LCD_Line.constprop.2+0x944>
			x1 += signX;
 8004116:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004118:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
			error -= deltaY;
 800411c:	1a09      	subs	r1, r1, r0
			x1 += signX;
 800411e:	4463      	add	r3, ip
			error -= deltaY;
 8004120:	9102      	str	r1, [sp, #8]
			x1 += signX;
 8004122:	b299      	uxth	r1, r3
 8004124:	9110      	str	r1, [sp, #64]	; 0x40
 8004126:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800412a:	9113      	str	r1, [sp, #76]	; 0x4c
 800412c:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 8004130:	9100      	str	r1, [sp, #0]
 8004132:	f3c3 3181 	ubfx	r1, r3, #14, #2
 8004136:	911f      	str	r1, [sp, #124]	; 0x7c
 8004138:	f3c3 3142 	ubfx	r1, r3, #13, #3
 800413c:	911d      	str	r1, [sp, #116]	; 0x74
 800413e:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8004142:	911b      	str	r1, [sp, #108]	; 0x6c
 8004144:	f3c3 21c4 	ubfx	r1, r3, #11, #5
 8004148:	9119      	str	r1, [sp, #100]	; 0x64
 800414a:	f3c3 2185 	ubfx	r1, r3, #10, #6
 800414e:	9117      	str	r1, [sp, #92]	; 0x5c
 8004150:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8004154:	9115      	str	r1, [sp, #84]	; 0x54
 8004156:	b2d9      	uxtb	r1, r3
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	9121      	str	r1, [sp, #132]	; 0x84
 800415e:	9311      	str	r3, [sp, #68]	; 0x44
		if (error2 < deltaX)
 8004160:	9926      	ldr	r1, [sp, #152]	; 0x98
 8004162:	4291      	cmp	r1, r2
 8004164:	f77f abbe 	ble.w	80038e4 <LCD_Line.constprop.2+0xc8>
			y1 += signY;
 8004168:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800416a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800416c:	4413      	add	r3, r2
			error += deltaX;
 800416e:	9a02      	ldr	r2, [sp, #8]
 8004170:	440a      	add	r2, r1
 8004172:	9202      	str	r2, [sp, #8]
			y1 += signY;
 8004174:	b29a      	uxth	r2, r3
 8004176:	9223      	str	r2, [sp, #140]	; 0x8c
 8004178:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800417c:	9214      	str	r2, [sp, #80]	; 0x50
 800417e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8004182:	9201      	str	r2, [sp, #4]
 8004184:	f3c3 3281 	ubfx	r2, r3, #14, #2
 8004188:	9220      	str	r2, [sp, #128]	; 0x80
 800418a:	f3c3 3242 	ubfx	r2, r3, #13, #3
 800418e:	921e      	str	r2, [sp, #120]	; 0x78
 8004190:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8004194:	921c      	str	r2, [sp, #112]	; 0x70
 8004196:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 800419a:	921a      	str	r2, [sp, #104]	; 0x68
 800419c:	f3c3 2285 	ubfx	r2, r3, #10, #6
 80041a0:	9218      	str	r2, [sp, #96]	; 0x60
 80041a2:	f3c3 2246 	ubfx	r2, r3, #9, #7
 80041a6:	9216      	str	r2, [sp, #88]	; 0x58
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	9222      	str	r2, [sp, #136]	; 0x88
 80041b0:	9312      	str	r3, [sp, #72]	; 0x48
 80041b2:	f7ff bb97 	b.w	80038e4 <LCD_Line.constprop.2+0xc8>
 80041b6:	2320      	movs	r3, #32
 80041b8:	f8c9 3010 	str.w	r3, [r9, #16]
 80041bc:	e72e      	b.n	800401c <LCD_Line.constprop.2+0x800>
 80041be:	2210      	movs	r2, #16
 80041c0:	f8c9 2010 	str.w	r2, [r9, #16]
 80041c4:	e722      	b.n	800400c <LCD_Line.constprop.2+0x7f0>
 80041c6:	2180      	movs	r1, #128	; 0x80
 80041c8:	f8ca 1010 	str.w	r1, [sl, #16]
 80041cc:	e717      	b.n	8003ffe <LCD_Line.constprop.2+0x7e2>
 80041ce:	2040      	movs	r0, #64	; 0x40
 80041d0:	f8ca 0010 	str.w	r0, [sl, #16]
 80041d4:	e70c      	b.n	8003ff0 <LCD_Line.constprop.2+0x7d4>
 80041d6:	2020      	movs	r0, #32
 80041d8:	f8ca 0010 	str.w	r0, [sl, #16]
 80041dc:	e700      	b.n	8003fe0 <LCD_Line.constprop.2+0x7c4>
 80041de:	2010      	movs	r0, #16
 80041e0:	f8ca 0010 	str.w	r0, [sl, #16]
 80041e4:	e6f4      	b.n	8003fd0 <LCD_Line.constprop.2+0x7b4>
 80041e6:	2008      	movs	r0, #8
 80041e8:	f8ca 0010 	str.w	r0, [sl, #16]
 80041ec:	e6e8      	b.n	8003fc0 <LCD_Line.constprop.2+0x7a4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041ee:	f8ca 5010 	str.w	r5, [sl, #16]
 80041f2:	e6df      	b.n	8003fb4 <LCD_Line.constprop.2+0x798>
    GPIOx->BSRR = GPIO_Pin;
 80041f4:	2020      	movs	r0, #32
 80041f6:	f8c9 0010 	str.w	r0, [r9, #16]
 80041fa:	e6b4      	b.n	8003f66 <LCD_Line.constprop.2+0x74a>
 80041fc:	2010      	movs	r0, #16
 80041fe:	f8c9 0010 	str.w	r0, [r9, #16]
 8004202:	e6a8      	b.n	8003f56 <LCD_Line.constprop.2+0x73a>
 8004204:	2080      	movs	r0, #128	; 0x80
 8004206:	f8ca 0010 	str.w	r0, [sl, #16]
 800420a:	e69c      	b.n	8003f46 <LCD_Line.constprop.2+0x72a>
 800420c:	2040      	movs	r0, #64	; 0x40
 800420e:	f8ca 0010 	str.w	r0, [sl, #16]
 8004212:	e690      	b.n	8003f36 <LCD_Line.constprop.2+0x71a>
 8004214:	2020      	movs	r0, #32
 8004216:	f8ca 0010 	str.w	r0, [sl, #16]
 800421a:	e684      	b.n	8003f26 <LCD_Line.constprop.2+0x70a>
 800421c:	2010      	movs	r0, #16
 800421e:	f8ca 0010 	str.w	r0, [sl, #16]
 8004222:	e678      	b.n	8003f16 <LCD_Line.constprop.2+0x6fa>
 8004224:	2008      	movs	r0, #8
 8004226:	f8ca 0010 	str.w	r0, [sl, #16]
 800422a:	e66c      	b.n	8003f06 <LCD_Line.constprop.2+0x6ea>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800422c:	f8ca 5010 	str.w	r5, [sl, #16]
 8004230:	e664      	b.n	8003efc <LCD_Line.constprop.2+0x6e0>
    GPIOx->BSRR = GPIO_Pin;
 8004232:	f04f 0c20 	mov.w	ip, #32
 8004236:	f8c9 c010 	str.w	ip, [r9, #16]
 800423a:	e635      	b.n	8003ea8 <LCD_Line.constprop.2+0x68c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800423c:	f8ca 5010 	str.w	r5, [sl, #16]
 8004240:	e57c      	b.n	8003d3c <LCD_Line.constprop.2+0x520>
    GPIOx->BSRR = GPIO_Pin;
 8004242:	2320      	movs	r3, #32
 8004244:	f8c9 3010 	str.w	r3, [r9, #16]
 8004248:	e51a      	b.n	8003c80 <LCD_Line.constprop.2+0x464>
 800424a:	2210      	movs	r2, #16
 800424c:	f8c9 2010 	str.w	r2, [r9, #16]
 8004250:	e50e      	b.n	8003c70 <LCD_Line.constprop.2+0x454>
 8004252:	2180      	movs	r1, #128	; 0x80
 8004254:	f8ca 1010 	str.w	r1, [sl, #16]
 8004258:	e503      	b.n	8003c62 <LCD_Line.constprop.2+0x446>
 800425a:	2040      	movs	r0, #64	; 0x40
 800425c:	f8ca 0010 	str.w	r0, [sl, #16]
 8004260:	e4f8      	b.n	8003c54 <LCD_Line.constprop.2+0x438>
 8004262:	2020      	movs	r0, #32
 8004264:	f8ca 0010 	str.w	r0, [sl, #16]
 8004268:	e4ec      	b.n	8003c44 <LCD_Line.constprop.2+0x428>
 800426a:	2010      	movs	r0, #16
 800426c:	f8ca 0010 	str.w	r0, [sl, #16]
 8004270:	e4e0      	b.n	8003c34 <LCD_Line.constprop.2+0x418>
 8004272:	2008      	movs	r0, #8
 8004274:	f8ca 0010 	str.w	r0, [sl, #16]
 8004278:	e4cc      	b.n	8003c14 <LCD_Line.constprop.2+0x3f8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800427a:	f8ca 5010 	str.w	r5, [sl, #16]
 800427e:	e4c3      	b.n	8003c08 <LCD_Line.constprop.2+0x3ec>
    GPIOx->BSRR = GPIO_Pin;
 8004280:	2020      	movs	r0, #32
 8004282:	f8c9 0010 	str.w	r0, [r9, #16]
 8004286:	e498      	b.n	8003bba <LCD_Line.constprop.2+0x39e>
 8004288:	2010      	movs	r0, #16
 800428a:	f8c9 0010 	str.w	r0, [r9, #16]
 800428e:	e48c      	b.n	8003baa <LCD_Line.constprop.2+0x38e>
 8004290:	2080      	movs	r0, #128	; 0x80
 8004292:	f8ca 0010 	str.w	r0, [sl, #16]
 8004296:	e480      	b.n	8003b9a <LCD_Line.constprop.2+0x37e>
 8004298:	2040      	movs	r0, #64	; 0x40
 800429a:	f8ca 0010 	str.w	r0, [sl, #16]
 800429e:	e474      	b.n	8003b8a <LCD_Line.constprop.2+0x36e>
 80042a0:	2020      	movs	r0, #32
 80042a2:	f8ca 0010 	str.w	r0, [sl, #16]
 80042a6:	e468      	b.n	8003b7a <LCD_Line.constprop.2+0x35e>
 80042a8:	2010      	movs	r0, #16
 80042aa:	f8ca 0010 	str.w	r0, [sl, #16]
 80042ae:	e45c      	b.n	8003b6a <LCD_Line.constprop.2+0x34e>
 80042b0:	2008      	movs	r0, #8
 80042b2:	f8ca 0010 	str.w	r0, [sl, #16]
 80042b6:	e450      	b.n	8003b5a <LCD_Line.constprop.2+0x33e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042b8:	f8ca 5010 	str.w	r5, [sl, #16]
 80042bc:	e448      	b.n	8003b50 <LCD_Line.constprop.2+0x334>
    GPIOx->BSRR = GPIO_Pin;
 80042be:	f04f 0c20 	mov.w	ip, #32
 80042c2:	f8c9 c010 	str.w	ip, [r9, #16]
 80042c6:	e419      	b.n	8003afc <LCD_Line.constprop.2+0x2e0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042c8:	f8ca 5010 	str.w	r5, [sl, #16]
 80042cc:	f7ff bb60 	b.w	8003990 <LCD_Line.constprop.2+0x174>
		if (x1 == x2 && y1 == y2)
 80042d0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80042d2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80042d4:	4293      	cmp	r3, r2
 80042d6:	f47f af16 	bne.w	8004106 <LCD_Line.constprop.2+0x8ea>
}
 80042da:	b02b      	add	sp, #172	; 0xac
 80042dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080042e0 <LCD_Rect.constprop.0>:
	LCD_Line(x, y, x + w, y, size, color24);
 80042e0:	23bd      	movs	r3, #189	; 0xbd
void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
 80042e2:	b570      	push	{r4, r5, r6, lr}
	LCD_Line(x, y, x + w, y, size, color24);
 80042e4:	f100 049d 	add.w	r4, r0, #157	; 0x9d
 80042e8:	b2a4      	uxth	r4, r4
 80042ea:	4619      	mov	r1, r3
 80042ec:	4622      	mov	r2, r4
void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
 80042ee:	4605      	mov	r5, r0
	LCD_Line(x, y, x + w, y, size, color24);
 80042f0:	f7ff fa94 	bl	800381c <LCD_Line.constprop.2>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 80042f4:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80042f8:	4622      	mov	r2, r4
 80042fa:	4628      	mov	r0, r5
 80042fc:	4619      	mov	r1, r3
 80042fe:	f7ff fa8d 	bl	800381c <LCD_Line.constprop.2>
	LCD_Line(x, y, x, y + h, size, color24);
 8004302:	462a      	mov	r2, r5
 8004304:	4628      	mov	r0, r5
 8004306:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800430a:	21bd      	movs	r1, #189	; 0xbd
 800430c:	f7ff fa86 	bl	800381c <LCD_Line.constprop.2>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8004310:	4622      	mov	r2, r4
 8004312:	4620      	mov	r0, r4
}
 8004314:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8004318:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800431c:	21bd      	movs	r1, #189	; 0xbd
 800431e:	f7ff ba7d 	b.w	800381c <LCD_Line.constprop.2>
 8004322:	bf00      	nop

08004324 <I2C_RequestMemoryWrite.constprop.0>:
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
 8004324:	b470      	push	{r4, r5, r6}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004326:	4c6c      	ldr	r4, [pc, #432]	; (80044d8 <I2C_RequestMemoryWrite.constprop.0+0x1b4>)
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
 8004328:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800432a:	6862      	ldr	r2, [r4, #4]
 800432c:	6813      	ldr	r3, [r2, #0]
 800432e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	e003      	b.n	800433e <I2C_RequestMemoryWrite.constprop.0+0x1a>
 8004336:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004338:	1a5b      	subs	r3, r3, r1
 800433a:	2b64      	cmp	r3, #100	; 0x64
 800433c:	d834      	bhi.n	80043a8 <I2C_RequestMemoryWrite.constprop.0+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800433e:	6953      	ldr	r3, [r2, #20]
 8004340:	07db      	lsls	r3, r3, #31
 8004342:	d5f8      	bpl.n	8004336 <I2C_RequestMemoryWrite.constprop.0+0x12>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004344:	23ae      	movs	r3, #174	; 0xae
 8004346:	6113      	str	r3, [r2, #16]
 8004348:	e00a      	b.n	8004360 <I2C_RequestMemoryWrite.constprop.0+0x3c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800434a:	6953      	ldr	r3, [r2, #20]
 800434c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8004350:	d157      	bne.n	8004402 <I2C_RequestMemoryWrite.constprop.0+0xde>
 8004352:	6825      	ldr	r5, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004354:	eba5 0c01 	sub.w	ip, r5, r1
 8004358:	f1bc 0f64 	cmp.w	ip, #100	; 0x64
 800435c:	f200 80a0 	bhi.w	80044a0 <I2C_RequestMemoryWrite.constprop.0+0x17c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004360:	6953      	ldr	r3, [r2, #20]
 8004362:	43db      	mvns	r3, r3
 8004364:	f013 0302 	ands.w	r3, r3, #2
 8004368:	d1ef      	bne.n	800434a <I2C_RequestMemoryWrite.constprop.0+0x26>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	6953      	ldr	r3, [r2, #20]
 800436e:	9301      	str	r3, [sp, #4]
 8004370:	6993      	ldr	r3, [r2, #24]
 8004372:	9301      	str	r3, [sp, #4]
 8004374:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004376:	6953      	ldr	r3, [r2, #20]
 8004378:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800437c:	d159      	bne.n	8004432 <I2C_RequestMemoryWrite.constprop.0+0x10e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800437e:	6955      	ldr	r5, [r2, #20]
 8004380:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
 8004384:	d127      	bne.n	80043d6 <I2C_RequestMemoryWrite.constprop.0+0xb2>
 8004386:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004388:	1a5b      	subs	r3, r3, r1
 800438a:	2b64      	cmp	r3, #100	; 0x64
 800438c:	d9f3      	bls.n	8004376 <I2C_RequestMemoryWrite.constprop.0+0x52>
        hi2c->State             = HAL_I2C_STATE_READY;
 800438e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004390:	6365      	str	r5, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8004392:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004396:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800439a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800439c:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043a0:	f043 0320 	orr.w	r3, r3, #32
 80043a4:	6463      	str	r3, [r4, #68]	; 0x44
 80043a6:	e025      	b.n	80043f4 <I2C_RequestMemoryWrite.constprop.0+0xd0>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043a8:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80043aa:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043ac:	6361      	str	r1, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 80043ae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043b2:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80043b8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043bc:	f043 0320 	orr.w	r3, r3, #32
 80043c0:	6463      	str	r3, [r4, #68]	; 0x44
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043c2:	6813      	ldr	r3, [r2, #0]
 80043c4:	05da      	lsls	r2, r3, #23
 80043c6:	d54f      	bpl.n	8004468 <I2C_RequestMemoryWrite.constprop.0+0x144>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043c8:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 80043cc:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043ce:	6463      	str	r3, [r4, #68]	; 0x44
}
 80043d0:	b003      	add	sp, #12
 80043d2:	bc70      	pop	{r4, r5, r6}
 80043d4:	4770      	bx	lr
    hi2c->State               = HAL_I2C_STATE_READY;
 80043d6:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043d8:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 80043dc:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80043de:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 80043e0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043e8:	6c61      	ldr	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80043ea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043ee:	f041 0104 	orr.w	r1, r1, #4
 80043f2:	6461      	str	r1, [r4, #68]	; 0x44
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d067      	beq.n	80044ca <I2C_RequestMemoryWrite.constprop.0+0x1a6>
    return HAL_ERROR;
 80043fa:	2001      	movs	r0, #1
}
 80043fc:	b003      	add	sp, #12
 80043fe:	bc70      	pop	{r4, r5, r6}
 8004400:	4770      	bx	lr
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004402:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004404:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8004408:	2520      	movs	r5, #32
    return HAL_ERROR;
 800440a:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440c:	6813      	ldr	r3, [r2, #0]
 800440e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004412:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004414:	6156      	str	r6, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004416:	6361      	str	r1, [r4, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8004418:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800441c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004420:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004422:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004426:	f043 0304 	orr.w	r3, r3, #4
 800442a:	6463      	str	r3, [r4, #68]	; 0x44
}
 800442c:	b003      	add	sp, #12
 800442e:	bc70      	pop	{r4, r5, r6}
 8004430:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004432:	0a03      	lsrs	r3, r0, #8
 8004434:	6113      	str	r3, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004436:	6953      	ldr	r3, [r2, #20]
 8004438:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800443c:	d13f      	bne.n	80044be <I2C_RequestMemoryWrite.constprop.0+0x19a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800443e:	6955      	ldr	r5, [r2, #20]
 8004440:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
 8004444:	d114      	bne.n	8004470 <I2C_RequestMemoryWrite.constprop.0+0x14c>
 8004446:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004448:	1a5b      	subs	r3, r3, r1
 800444a:	2b64      	cmp	r3, #100	; 0x64
 800444c:	d9f3      	bls.n	8004436 <I2C_RequestMemoryWrite.constprop.0+0x112>
        hi2c->State             = HAL_I2C_STATE_READY;
 800444e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004450:	6365      	str	r5, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8004452:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004456:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800445a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800445c:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004460:	f043 0320 	orr.w	r3, r3, #32
 8004464:	6463      	str	r3, [r4, #68]	; 0x44
 8004466:	e012      	b.n	800448e <I2C_RequestMemoryWrite.constprop.0+0x16a>
    return HAL_TIMEOUT;
 8004468:	2003      	movs	r0, #3
}
 800446a:	b003      	add	sp, #12
 800446c:	bc70      	pop	{r4, r5, r6}
 800446e:	4770      	bx	lr
    hi2c->State               = HAL_I2C_STATE_READY;
 8004470:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004472:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8004476:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004478:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 800447a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800447e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004482:	6c61      	ldr	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8004484:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004488:	f041 0104 	orr.w	r1, r1, #4
 800448c:	6461      	str	r1, [r4, #68]	; 0x44
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800448e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004490:	2b04      	cmp	r3, #4
 8004492:	d1b2      	bne.n	80043fa <I2C_RequestMemoryWrite.constprop.0+0xd6>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004494:	6813      	ldr	r3, [r2, #0]
      return HAL_ERROR;
 8004496:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004498:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e7c5      	b.n	800442c <I2C_RequestMemoryWrite.constprop.0+0x108>
        hi2c->State               = HAL_I2C_STATE_READY;
 80044a0:	2220      	movs	r2, #32
    return HAL_ERROR;
 80044a2:	2001      	movs	r0, #1
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044a4:	6363      	str	r3, [r4, #52]	; 0x34
        hi2c->State               = HAL_I2C_STATE_READY;
 80044a6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80044ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80044b4:	4313      	orrs	r3, r2
 80044b6:	6463      	str	r3, [r4, #68]	; 0x44
}
 80044b8:	b003      	add	sp, #12
 80044ba:	bc70      	pop	{r4, r5, r6}
 80044bc:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044be:	b2c3      	uxtb	r3, r0
  return HAL_OK;
 80044c0:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044c2:	6113      	str	r3, [r2, #16]
}
 80044c4:	b003      	add	sp, #12
 80044c6:	bc70      	pop	{r4, r5, r6}
 80044c8:	4770      	bx	lr
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ca:	6813      	ldr	r3, [r2, #0]
    return HAL_ERROR;
 80044cc:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	e7aa      	b.n	800442c <I2C_RequestMemoryWrite.constprop.0+0x108>
 80044d6:	bf00      	nop
 80044d8:	20000200 	.word	0x20000200

080044dc <HAL_I2C_Mem_Read.constprop.0.isra.0>:
  __IO uint32_t count = 0U;
 80044dc:	2200      	movs	r2, #0
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 80044de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044e0:	4ba1      	ldr	r3, [pc, #644]	; (8004768 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x28c>)
 80044e2:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 80044e4:	9200      	str	r2, [sp, #0]
 80044e6:	681d      	ldr	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e8:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80044ec:	2a20      	cmp	r2, #32
 80044ee:	d001      	beq.n	80044f4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x18>
}
 80044f0:	b007      	add	sp, #28
 80044f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	e003      	b.n	8004500 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x24>
 80044f8:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fa:	1b64      	subs	r4, r4, r5
 80044fc:	2c19      	cmp	r4, #25
 80044fe:	d86a      	bhi.n	80045d6 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004500:	6994      	ldr	r4, [r2, #24]
 8004502:	ea6f 0c04 	mvn.w	ip, r4
 8004506:	f01c 0c02 	ands.w	ip, ip, #2
 800450a:	d0f5      	beq.n	80044f8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1c>
    __HAL_LOCK(hi2c);
 800450c:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
 8004510:	2c01      	cmp	r4, #1
 8004512:	d0ed      	beq.n	80044f0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
 8004514:	2401      	movs	r4, #1
 8004516:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800451a:	6814      	ldr	r4, [r2, #0]
 800451c:	07e7      	lsls	r7, r4, #31
 800451e:	d555      	bpl.n	80045cc <HAL_I2C_Mem_Read.constprop.0.isra.0+0xf0>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004520:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004524:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004528:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 800452a:	2601      	movs	r6, #1
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800452c:	6814      	ldr	r4, [r2, #0]
 800452e:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8004532:	6014      	str	r4, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004534:	4c8d      	ldr	r4, [pc, #564]	; (800476c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x290>)
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004536:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800453a:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800453e:	645f      	str	r7, [r3, #68]	; 0x44
    hi2c->XferCount   = Size;
 8004540:	85de      	strh	r6, [r3, #46]	; 0x2e
    hi2c->pBuffPtr    = pData;
 8004542:	6299      	str	r1, [r3, #40]	; 0x28
    hi2c->XferSize    = hi2c->XferCount;
 8004544:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004546:	631c      	str	r4, [r3, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004548:	6814      	ldr	r4, [r2, #0]
    hi2c->XferSize    = hi2c->XferCount;
 800454a:	b289      	uxth	r1, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800454c:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    hi2c->XferSize    = hi2c->XferCount;
 8004550:	8599      	strh	r1, [r3, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004552:	6014      	str	r4, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004554:	6814      	ldr	r4, [r2, #0]
 8004556:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800455a:	6014      	str	r4, [r2, #0]
 800455c:	e003      	b.n	8004566 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x8a>
 800455e:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004560:	1b64      	subs	r4, r4, r5
 8004562:	2c64      	cmp	r4, #100	; 0x64
 8004564:	d85e      	bhi.n	8004624 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004566:	6954      	ldr	r4, [r2, #20]
 8004568:	07e6      	lsls	r6, r4, #31
 800456a:	d5f8      	bpl.n	800455e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800456c:	24ae      	movs	r4, #174	; 0xae
 800456e:	6114      	str	r4, [r2, #16]
 8004570:	e008      	b.n	8004584 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xa8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004572:	6954      	ldr	r4, [r2, #20]
 8004574:	f414 6480 	ands.w	r4, r4, #1024	; 0x400
 8004578:	d169      	bne.n	800464e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x172>
 800457a:	681e      	ldr	r6, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457c:	1b76      	subs	r6, r6, r5
 800457e:	2e64      	cmp	r6, #100	; 0x64
 8004580:	f200 8089 	bhi.w	8004696 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004584:	6954      	ldr	r4, [r2, #20]
 8004586:	43e4      	mvns	r4, r4
 8004588:	f014 0402 	ands.w	r4, r4, #2
 800458c:	d1f1      	bne.n	8004572 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x96>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458e:	9405      	str	r4, [sp, #20]
 8004590:	6954      	ldr	r4, [r2, #20]
 8004592:	9405      	str	r4, [sp, #20]
 8004594:	6994      	ldr	r4, [r2, #24]
 8004596:	9405      	str	r4, [sp, #20]
 8004598:	9c05      	ldr	r4, [sp, #20]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800459a:	6954      	ldr	r4, [r2, #20]
 800459c:	f014 0480 	ands.w	r4, r4, #128	; 0x80
 80045a0:	d16a      	bne.n	8004678 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x19c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045a2:	6956      	ldr	r6, [r2, #20]
 80045a4:	f416 6680 	ands.w	r6, r6, #1024	; 0x400
 80045a8:	d124      	bne.n	80045f4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x118>
 80045aa:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ac:	1b64      	subs	r4, r4, r5
 80045ae:	2c64      	cmp	r4, #100	; 0x64
 80045b0:	d9f3      	bls.n	800459a <HAL_I2C_Mem_Read.constprop.0.isra.0+0xbe>
        hi2c->State             = HAL_I2C_STATE_READY;
 80045b2:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045b4:	635e      	str	r6, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 80045b6:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045ba:	f883 6042 	strb.w	r6, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045be:	6c59      	ldr	r1, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80045c0:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045c4:	f041 0120 	orr.w	r1, r1, #32
 80045c8:	6459      	str	r1, [r3, #68]	; 0x44
 80045ca:	e022      	b.n	8004612 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x136>
      __HAL_I2C_ENABLE(hi2c);
 80045cc:	6814      	ldr	r4, [r2, #0]
 80045ce:	f044 0401 	orr.w	r4, r4, #1
 80045d2:	6014      	str	r4, [r2, #0]
 80045d4:	e7a4      	b.n	8004520 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x44>
        hi2c->State             = HAL_I2C_STATE_READY;
 80045d6:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045d8:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045e0:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80045e6:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045ea:	f042 0220 	orr.w	r2, r2, #32
 80045ee:	645a      	str	r2, [r3, #68]	; 0x44
}
 80045f0:	b007      	add	sp, #28
 80045f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State               = HAL_I2C_STATE_READY;
 80045f4:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045f6:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 80045fa:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80045fc:	635c      	str	r4, [r3, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 80045fe:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004602:	f883 4042 	strb.w	r4, [r3, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004606:	6c59      	ldr	r1, [r3, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8004608:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800460c:	f041 0104 	orr.w	r1, r1, #4
 8004610:	6459      	str	r1, [r3, #68]	; 0x44
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004614:	2b04      	cmp	r3, #4
 8004616:	f47f af6b 	bne.w	80044f0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461a:	6813      	ldr	r3, [r2, #0]
 800461c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	e765      	b.n	80044f0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004624:	2000      	movs	r0, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004626:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004628:	6358      	str	r0, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 800462a:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800462e:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004632:	6c59      	ldr	r1, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004634:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004638:	f041 0120 	orr.w	r1, r1, #32
 800463c:	6459      	str	r1, [r3, #68]	; 0x44
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	05d5      	lsls	r5, r2, #23
 8004642:	f57f af55 	bpl.w	80044f0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800464a:	645a      	str	r2, [r3, #68]	; 0x44
 800464c:	e750      	b.n	80044f0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800464e:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004650:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8004654:	2420      	movs	r4, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004656:	6810      	ldr	r0, [r2, #0]
 8004658:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 800465c:	6010      	str	r0, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800465e:	6155      	str	r5, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004660:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8004662:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004666:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800466a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800466c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004670:	f042 0204 	orr.w	r2, r2, #4
 8004674:	645a      	str	r2, [r3, #68]	; 0x44
 8004676:	e73b      	b.n	80044f0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004678:	0a04      	lsrs	r4, r0, #8
 800467a:	6114      	str	r4, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800467c:	6954      	ldr	r4, [r2, #20]
 800467e:	f014 0480 	ands.w	r4, r4, #128	; 0x80
 8004682:	d115      	bne.n	80046b0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1d4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004684:	6956      	ldr	r6, [r2, #20]
 8004686:	f416 6680 	ands.w	r6, r6, #1024	; 0x400
 800468a:	d1b3      	bne.n	80045f4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x118>
 800468c:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800468e:	1b64      	subs	r4, r4, r5
 8004690:	2c64      	cmp	r4, #100	; 0x64
 8004692:	d9f3      	bls.n	800467c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1a0>
 8004694:	e78d      	b.n	80045b2 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xd6>
        hi2c->State               = HAL_I2C_STATE_READY;
 8004696:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004698:	635c      	str	r4, [r3, #52]	; 0x34
        hi2c->State               = HAL_I2C_STATE_READY;
 800469a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800469e:	f883 4042 	strb.w	r4, [r3, #66]	; 0x42
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80046a4:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046a8:	f042 0220 	orr.w	r2, r2, #32
 80046ac:	645a      	str	r2, [r3, #68]	; 0x44
 80046ae:	e71f      	b.n	80044f0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046b0:	b2c0      	uxtb	r0, r0
 80046b2:	6110      	str	r0, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046b4:	6950      	ldr	r0, [r2, #20]
 80046b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80046ba:	d124      	bne.n	8004706 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x22a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046bc:	6954      	ldr	r4, [r2, #20]
 80046be:	f414 6480 	ands.w	r4, r4, #1024	; 0x400
 80046c2:	d110      	bne.n	80046e6 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x20a>
 80046c4:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c6:	1b40      	subs	r0, r0, r5
 80046c8:	2864      	cmp	r0, #100	; 0x64
 80046ca:	d9f3      	bls.n	80046b4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1d8>
        hi2c->State             = HAL_I2C_STATE_READY;
 80046cc:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046ce:	635c      	str	r4, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 80046d0:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046d4:	f883 4042 	strb.w	r4, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046d8:	6c59      	ldr	r1, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80046da:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046de:	f041 0120 	orr.w	r1, r1, #32
 80046e2:	6459      	str	r1, [r3, #68]	; 0x44
 80046e4:	e795      	b.n	8004612 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x136>
    hi2c->State               = HAL_I2C_STATE_READY;
 80046e6:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e8:	f46f 6480 	mvn.w	r4, #1024	; 0x400
 80046ec:	6154      	str	r4, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80046ee:	6358      	str	r0, [r3, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 80046f0:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f4:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046f8:	6c59      	ldr	r1, [r3, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80046fa:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046fe:	f041 0104 	orr.w	r1, r1, #4
 8004702:	6459      	str	r1, [r3, #68]	; 0x44
 8004704:	e785      	b.n	8004612 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x136>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004706:	6810      	ldr	r0, [r2, #0]
 8004708:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800470c:	6010      	str	r0, [r2, #0]
 800470e:	e003      	b.n	8004718 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x23c>
 8004710:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004712:	1b40      	subs	r0, r0, r5
 8004714:	2864      	cmp	r0, #100	; 0x64
 8004716:	d885      	bhi.n	8004624 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004718:	6950      	ldr	r0, [r2, #20]
 800471a:	07c4      	lsls	r4, r0, #31
 800471c:	d5f8      	bpl.n	8004710 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x234>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800471e:	20af      	movs	r0, #175	; 0xaf
 8004720:	6110      	str	r0, [r2, #16]
 8004722:	e007      	b.n	8004734 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x258>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004724:	6950      	ldr	r0, [r2, #20]
 8004726:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800472a:	d190      	bne.n	800464e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x172>
 800472c:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472e:	1b64      	subs	r4, r4, r5
 8004730:	2c64      	cmp	r4, #100	; 0x64
 8004732:	d81d      	bhi.n	8004770 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x294>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004734:	6950      	ldr	r0, [r2, #20]
 8004736:	43c0      	mvns	r0, r0
 8004738:	f010 0002 	ands.w	r0, r0, #2
 800473c:	d1f2      	bne.n	8004724 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x248>
    if (hi2c->XferSize == 0U)
 800473e:	bb29      	cbnz	r1, 800478c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2b0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004740:	9104      	str	r1, [sp, #16]
 8004742:	6951      	ldr	r1, [r2, #20]
 8004744:	9104      	str	r1, [sp, #16]
 8004746:	6991      	ldr	r1, [r2, #24]
 8004748:	9104      	str	r1, [sp, #16]
 800474a:	9904      	ldr	r1, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800474c:	6811      	ldr	r1, [r2, #0]
 800474e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004752:	6011      	str	r1, [r2, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004754:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004756:	2120      	movs	r1, #32
    __HAL_UNLOCK(hi2c);
 8004758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800475c:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    return HAL_OK;
 8004764:	e6c4      	b.n	80044f0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
 8004766:	bf00      	nop
 8004768:	20000200 	.word	0x20000200
 800476c:	ffff0000 	.word	0xffff0000
        hi2c->State             = HAL_I2C_STATE_READY;
 8004770:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004772:	6358      	str	r0, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004778:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800477c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800477e:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004782:	f042 0220 	orr.w	r2, r2, #32
 8004786:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004788:	b007      	add	sp, #28
 800478a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (hi2c->XferSize == 1U)
 800478c:	2901      	cmp	r1, #1
 800478e:	f000 80d8 	beq.w	8004942 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x466>
    else if (hi2c->XferSize == 2U)
 8004792:	2902      	cmp	r1, #2
 8004794:	f000 80ec 	beq.w	8004970 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x494>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004798:	6814      	ldr	r4, [r2, #0]
 800479a:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 800479e:	6014      	str	r4, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a0:	9001      	str	r0, [sp, #4]
 80047a2:	6950      	ldr	r0, [r2, #20]
 80047a4:	9001      	str	r0, [sp, #4]
 80047a6:	6990      	ldr	r0, [r2, #24]
 80047a8:	9001      	str	r0, [sp, #4]
 80047aa:	9801      	ldr	r0, [sp, #4]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80047ac:	4e79      	ldr	r6, [pc, #484]	; (8004994 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4b8>)
 80047ae:	4c7a      	ldr	r4, [pc, #488]	; (8004998 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4bc>)
      if (hi2c->XferSize <= 3U)
 80047b0:	2903      	cmp	r1, #3
 80047b2:	d83c      	bhi.n	800482e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x352>
        if (hi2c->XferSize == 1U)
 80047b4:	2901      	cmp	r1, #1
 80047b6:	f000 809a 	beq.w	80048ee <HAL_I2C_Mem_Read.constprop.0.isra.0+0x412>
        else if (hi2c->XferSize == 2U)
 80047ba:	2902      	cmp	r1, #2
 80047bc:	d005      	beq.n	80047ca <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2ee>
 80047be:	e053      	b.n	8004868 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x38c>
 80047c0:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c2:	1b49      	subs	r1, r1, r5
 80047c4:	2964      	cmp	r1, #100	; 0x64
 80047c6:	f200 8097 	bhi.w	80048f8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x41c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ca:	6951      	ldr	r1, [r2, #20]
 80047cc:	0748      	lsls	r0, r1, #29
 80047ce:	d5f7      	bpl.n	80047c0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2e4>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047d0:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d2:	685a      	ldr	r2, [r3, #4]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d4:	6a98      	ldr	r0, [r3, #40]	; 0x28
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d6:	6811      	ldr	r1, [r2, #0]
 80047d8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80047dc:	6011      	str	r1, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047de:	6912      	ldr	r2, [r2, #16]
 80047e0:	7002      	strb	r2, [r0, #0]
          hi2c->pBuffPtr++;
 80047e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047e4:	3201      	adds	r2, #1
 80047e6:	629a      	str	r2, [r3, #40]	; 0x28
          hi2c->XferSize--;
 80047e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047ea:	3a01      	subs	r2, #1
 80047ec:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 80047ee:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80047f0:	3a01      	subs	r2, #1
 80047f2:	b292      	uxth	r2, r2
 80047f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  __ASM volatile ("cpsie i" : : : "memory");
 80047f6:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	6911      	ldr	r1, [r2, #16]
 80047fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047fe:	7011      	strb	r1, [r2, #0]
          hi2c->pBuffPtr++;
 8004800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
          hi2c->XferSize--;
 8004802:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 8004804:	3201      	adds	r2, #1
 8004806:	629a      	str	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004808:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
          hi2c->XferSize--;
 800480a:	3901      	subs	r1, #1
          hi2c->XferCount--;
 800480c:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 800480e:	b289      	uxth	r1, r1
          hi2c->XferCount--;
 8004810:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 8004812:	8599      	strh	r1, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 8004814:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (hi2c->XferSize > 0U)
 8004816:	2900      	cmp	r1, #0
 8004818:	d09c      	beq.n	8004754 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x278>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	e7c8      	b.n	80047b0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2d4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800481e:	6950      	ldr	r0, [r2, #20]
 8004820:	f010 0010 	ands.w	r0, r0, #16
 8004824:	d177      	bne.n	8004916 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x43a>
 8004826:	6819      	ldr	r1, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004828:	1b49      	subs	r1, r1, r5
 800482a:	2964      	cmp	r1, #100	; 0x64
 800482c:	d8a0      	bhi.n	8004770 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x294>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800482e:	6951      	ldr	r1, [r2, #20]
 8004830:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 8004834:	d0f3      	beq.n	800481e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x342>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004836:	6911      	ldr	r1, [r2, #16]
 8004838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800483a:	7011      	strb	r1, [r2, #0]
        hi2c->XferCount--;
 800483c:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
        hi2c->pBuffPtr++;
 800483e:	6a98      	ldr	r0, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004840:	3a01      	subs	r2, #1
 8004842:	b292      	uxth	r2, r2
 8004844:	85da      	strh	r2, [r3, #46]	; 0x2e
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004846:	685a      	ldr	r2, [r3, #4]
        hi2c->XferSize--;
 8004848:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
        hi2c->pBuffPtr++;
 800484a:	1c47      	adds	r7, r0, #1
 800484c:	629f      	str	r7, [r3, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800484e:	6957      	ldr	r7, [r2, #20]
        hi2c->XferSize--;
 8004850:	3901      	subs	r1, #1
 8004852:	b289      	uxth	r1, r1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004854:	077f      	lsls	r7, r7, #29
        hi2c->XferSize--;
 8004856:	8599      	strh	r1, [r3, #44]	; 0x2c
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004858:	d5dd      	bpl.n	8004816 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x33a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800485a:	6912      	ldr	r2, [r2, #16]
 800485c:	7042      	strb	r2, [r0, #1]
 800485e:	e7cf      	b.n	8004800 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x324>
 8004860:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004862:	1b49      	subs	r1, r1, r5
 8004864:	2964      	cmp	r1, #100	; 0x64
 8004866:	d847      	bhi.n	80048f8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x41c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004868:	6951      	ldr	r1, [r2, #20]
 800486a:	0749      	lsls	r1, r1, #29
 800486c:	d5f8      	bpl.n	8004860 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x384>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486e:	6811      	ldr	r1, [r2, #0]
 8004870:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004874:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004876:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	6910      	ldr	r0, [r2, #16]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800487c:	6832      	ldr	r2, [r6, #0]
 800487e:	08d2      	lsrs	r2, r2, #3
 8004880:	fba4 1202 	umull	r1, r2, r4, r2
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004884:	6a99      	ldr	r1, [r3, #40]	; 0x28
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004886:	0a12      	lsrs	r2, r2, #8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004888:	7008      	strb	r0, [r1, #0]
          hi2c->XferCount--;
 800488a:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800488c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
          hi2c->XferCount--;
 8004890:	3901      	subs	r1, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004892:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
          hi2c->XferCount--;
 8004896:	b289      	uxth	r1, r1
 8004898:	85d9      	strh	r1, [r3, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800489a:	9200      	str	r2, [sp, #0]
          hi2c->XferSize--;
 800489c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 800489e:	6a98      	ldr	r0, [r3, #40]	; 0x28
          hi2c->XferSize--;
 80048a0:	3a01      	subs	r2, #1
 80048a2:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 80048a4:	1c42      	adds	r2, r0, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80048a6:	6859      	ldr	r1, [r3, #4]
          hi2c->pBuffPtr++;
 80048a8:	629a      	str	r2, [r3, #40]	; 0x28
 80048aa:	e002      	b.n	80048b2 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x3d6>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80048ac:	694a      	ldr	r2, [r1, #20]
 80048ae:	0752      	lsls	r2, r2, #29
 80048b0:	d440      	bmi.n	8004934 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x458>
            count--;
 80048b2:	9a00      	ldr	r2, [sp, #0]
 80048b4:	3a01      	subs	r2, #1
 80048b6:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 80048b8:	9a00      	ldr	r2, [sp, #0]
 80048ba:	2a00      	cmp	r2, #0
 80048bc:	d1f6      	bne.n	80048ac <HAL_I2C_Mem_Read.constprop.0.isra.0+0x3d0>
              hi2c->State               = HAL_I2C_STATE_READY;
 80048be:	2120      	movs	r1, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80048c0:	635a      	str	r2, [r3, #52]	; 0x34
              hi2c->State               = HAL_I2C_STATE_READY;
 80048c2:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ca:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80048cc:	f041 0120 	orr.w	r1, r1, #32
 80048d0:	6459      	str	r1, [r3, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 80048d2:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80048d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80048d8:	b007      	add	sp, #28
 80048da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048dc:	6950      	ldr	r0, [r2, #20]
 80048de:	f010 0010 	ands.w	r0, r0, #16
 80048e2:	d118      	bne.n	8004916 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x43a>
 80048e4:	6819      	ldr	r1, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e6:	1b49      	subs	r1, r1, r5
 80048e8:	2964      	cmp	r1, #100	; 0x64
 80048ea:	f63f af41 	bhi.w	8004770 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x294>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048ee:	6951      	ldr	r1, [r2, #20]
 80048f0:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 80048f4:	d0f2      	beq.n	80048dc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x400>
 80048f6:	e780      	b.n	80047fa <HAL_I2C_Mem_Read.constprop.0.isra.0+0x31e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048f8:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80048fa:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048fc:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 80048fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004902:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004906:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004908:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800490c:	f042 0220 	orr.w	r2, r2, #32
 8004910:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004912:	b007      	add	sp, #28
 8004914:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004916:	f06f 0410 	mvn.w	r4, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 800491a:	2020      	movs	r0, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800491c:	6154      	str	r4, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800491e:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8004920:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004924:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800492a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800492e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004930:	b007      	add	sp, #28
 8004932:	bdf0      	pop	{r4, r5, r6, r7, pc}
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004934:	680a      	ldr	r2, [r1, #0]
 8004936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800493a:	600a      	str	r2, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800493c:	690a      	ldr	r2, [r1, #16]
 800493e:	7042      	strb	r2, [r0, #1]
 8004940:	e74f      	b.n	80047e2 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x306>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004942:	6811      	ldr	r1, [r2, #0]
 8004944:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004948:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800494a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	9003      	str	r0, [sp, #12]
 8004950:	6951      	ldr	r1, [r2, #20]
 8004952:	9103      	str	r1, [sp, #12]
 8004954:	6991      	ldr	r1, [r2, #24]
 8004956:	9103      	str	r1, [sp, #12]
 8004958:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495a:	6811      	ldr	r1, [r2, #0]
 800495c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004960:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004962:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 8004964:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8004966:	2900      	cmp	r1, #0
 8004968:	f43f aef4 	beq.w	8004754 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x278>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	e71d      	b.n	80047ac <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2d0>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004970:	6811      	ldr	r1, [r2, #0]
 8004972:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004976:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004978:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	9002      	str	r0, [sp, #8]
 800497e:	6951      	ldr	r1, [r2, #20]
 8004980:	9102      	str	r1, [sp, #8]
 8004982:	6991      	ldr	r1, [r2, #24]
 8004984:	9102      	str	r1, [sp, #8]
 8004986:	9902      	ldr	r1, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004988:	6811      	ldr	r1, [r2, #0]
 800498a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800498e:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004990:	b662      	cpsie	i
}
 8004992:	e7e7      	b.n	8004964 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x488>
 8004994:	20000000 	.word	0x20000000
 8004998:	14f8b589 	.word	0x14f8b589

0800499c <AT24XX_Read>:
    } else
        return false;
}

uint8_t AT24XX_Read(uint16_t address) {
    uint16_t dt[1] = {0};
 800499c:	2300      	movs	r3, #0
uint8_t AT24XX_Read(uint16_t address) {
 800499e:	b500      	push	{lr}
 80049a0:	b083      	sub	sp, #12
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80049a2:	a901      	add	r1, sp, #4
    uint16_t dt[1] = {0};
 80049a4:	f8ad 3004 	strh.w	r3, [sp, #4]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80049a8:	f7ff fd98 	bl	80044dc <HAL_I2C_Mem_Read.constprop.0.isra.0>
    AT24XX_Load(address, dt, 1);
    return dt[0];
}
 80049ac:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80049b0:	b003      	add	sp, #12
 80049b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80049b6:	bf00      	nop

080049b8 <AT24XX_Update>:
    uint16_t dt[1] = {0};
 80049b8:	2300      	movs	r3, #0
void AT24XX_Write(uint16_t address, uint8_t val) {
    uint8_t save[] = {val};
    AT24XX_Save(address, save, 1);
}

void AT24XX_Update(uint16_t address, uint8_t val) {
 80049ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049bc:	460d      	mov	r5, r1
 80049be:	b083      	sub	sp, #12
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80049c0:	a901      	add	r1, sp, #4
    uint16_t dt[1] = {0};
 80049c2:	f8ad 3004 	strh.w	r3, [sp, #4]
void AT24XX_Update(uint16_t address, uint8_t val) {
 80049c6:	4606      	mov	r6, r0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80049c8:	f7ff fd88 	bl	80044dc <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 80049cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80049d0:	429d      	cmp	r5, r3
 80049d2:	d101      	bne.n	80049d8 <AT24XX_Update+0x20>
}
 80049d4:	b003      	add	sp, #12
 80049d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d8:	4c61      	ldr	r4, [pc, #388]	; (8004b60 <AT24XX_Update+0x1a8>)
    uint8_t save[] = {val};
 80049da:	f88d 5004 	strb.w	r5, [sp, #4]
 80049de:	6825      	ldr	r5, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80049e0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80049e4:	2b20      	cmp	r3, #32
 80049e6:	d1f5      	bne.n	80049d4 <AT24XX_Update+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049e8:	6861      	ldr	r1, [r4, #4]
 80049ea:	e004      	b.n	80049f6 <AT24XX_Update+0x3e>
 80049ec:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ee:	1b52      	subs	r2, r2, r5
 80049f0:	2a19      	cmp	r2, #25
 80049f2:	f200 80a7 	bhi.w	8004b44 <AT24XX_Update+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049f6:	698b      	ldr	r3, [r1, #24]
 80049f8:	43db      	mvns	r3, r3
 80049fa:	f013 0302 	ands.w	r3, r3, #2
 80049fe:	d0f5      	beq.n	80049ec <AT24XX_Update+0x34>
    __HAL_LOCK(hi2c);
 8004a00:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d0e5      	beq.n	80049d4 <AT24XX_Update+0x1c>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a0e:	680b      	ldr	r3, [r1, #0]
 8004a10:	07da      	lsls	r2, r3, #31
 8004a12:	d403      	bmi.n	8004a1c <AT24XX_Update+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8004a14:	680b      	ldr	r3, [r1, #0]
 8004a16:	f043 0301 	orr.w	r3, r3, #1
 8004a1a:	600b      	str	r3, [r1, #0]
    hi2c->XferCount   = Size;
 8004a1c:	2201      	movs	r2, #1
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a1e:	4630      	mov	r0, r6
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a20:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a24:	2740      	movs	r7, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a26:	2600      	movs	r6, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a28:	680b      	ldr	r3, [r1, #0]
 8004a2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a2e:	600b      	str	r3, [r1, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a30:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
    hi2c->pBuffPtr    = pData;
 8004a34:	ab01      	add	r3, sp, #4
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a36:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a3a:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8004a3c:	85e2      	strh	r2, [r4, #46]	; 0x2e
    hi2c->XferSize    = hi2c->XferCount;
 8004a3e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    hi2c->pBuffPtr    = pData;
 8004a40:	62a3      	str	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a42:	4b48      	ldr	r3, [pc, #288]	; (8004b64 <AT24XX_Update+0x1ac>)
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a44:	4629      	mov	r1, r5
    hi2c->XferSize    = hi2c->XferCount;
 8004a46:	85a2      	strh	r2, [r4, #44]	; 0x2c
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a48:	6323      	str	r3, [r4, #48]	; 0x30
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a4a:	f7ff fc6b 	bl	8004324 <I2C_RequestMemoryWrite.constprop.0>
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	d1c0      	bne.n	80049d4 <AT24XX_Update+0x1c>
    while (hi2c->XferSize > 0U)
 8004a52:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8004a54:	2800      	cmp	r0, #0
 8004a56:	f000 8081 	beq.w	8004b5c <AT24XX_Update+0x1a4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a5a:	6861      	ldr	r1, [r4, #4]
 8004a5c:	694b      	ldr	r3, [r1, #20]
 8004a5e:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8004a62:	d114      	bne.n	8004a8e <AT24XX_Update+0xd6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a64:	694a      	ldr	r2, [r1, #20]
 8004a66:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8004a6a:	d130      	bne.n	8004ace <AT24XX_Update+0x116>
 8004a6c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6e:	1b5b      	subs	r3, r3, r5
 8004a70:	2b64      	cmp	r3, #100	; 0x64
 8004a72:	d9f3      	bls.n	8004a5c <AT24XX_Update+0xa4>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a74:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a76:	6362      	str	r2, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a78:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a7c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a80:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004a82:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a86:	f043 0320 	orr.w	r3, r3, #32
 8004a8a:	6463      	str	r3, [r4, #68]	; 0x44
 8004a8c:	e02e      	b.n	8004aec <AT24XX_Update+0x134>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
      hi2c->XferSize--;
 8004a90:	1e42      	subs	r2, r0, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a92:	4633      	mov	r3, r6
 8004a94:	f813 7b01 	ldrb.w	r7, [r3], #1
      hi2c->XferSize--;
 8004a98:	b292      	uxth	r2, r2
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a9a:	610f      	str	r7, [r1, #16]
      hi2c->pBuffPtr++;
 8004a9c:	62a3      	str	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004a9e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
      hi2c->XferSize--;
 8004aa0:	85a2      	strh	r2, [r4, #44]	; 0x2c
      hi2c->XferCount--;
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004aa8:	694b      	ldr	r3, [r1, #20]
 8004aaa:	075b      	lsls	r3, r3, #29
 8004aac:	d427      	bmi.n	8004afe <AT24XX_Update+0x146>
      hi2c->XferSize--;
 8004aae:	4610      	mov	r0, r2
    while (hi2c->XferSize > 0U)
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d1d3      	bne.n	8004a5c <AT24XX_Update+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ab4:	694b      	ldr	r3, [r1, #20]
 8004ab6:	f013 0304 	ands.w	r3, r3, #4
 8004aba:	d130      	bne.n	8004b1e <AT24XX_Update+0x166>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004abc:	694a      	ldr	r2, [r1, #20]
 8004abe:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8004ac2:	d104      	bne.n	8004ace <AT24XX_Update+0x116>
 8004ac4:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac6:	1b5b      	subs	r3, r3, r5
 8004ac8:	2b64      	cmp	r3, #100	; 0x64
 8004aca:	d9f3      	bls.n	8004ab4 <AT24XX_Update+0xfc>
 8004acc:	e7d2      	b.n	8004a74 <AT24XX_Update+0xbc>
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ace:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ad0:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8004ad4:	6148      	str	r0, [r1, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad6:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ad8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ae0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8004ae2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ae6:	f042 0204 	orr.w	r2, r2, #4
 8004aea:	6462      	str	r2, [r4, #68]	; 0x44
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	f47f af70 	bne.w	80049d4 <AT24XX_Update+0x1c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af4:	680b      	ldr	r3, [r1, #0]
 8004af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004afa:	600b      	str	r3, [r1, #0]
 8004afc:	e76a      	b.n	80049d4 <AT24XX_Update+0x1c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004afe:	2a00      	cmp	r2, #0
 8004b00:	d0d8      	beq.n	8004ab4 <AT24XX_Update+0xfc>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b02:	7873      	ldrb	r3, [r6, #1]
        hi2c->XferSize--;
 8004b04:	3802      	subs	r0, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b06:	610b      	str	r3, [r1, #16]
        hi2c->XferCount--;
 8004b08:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        hi2c->XferSize--;
 8004b0a:	b280      	uxth	r0, r0
        hi2c->XferCount--;
 8004b0c:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 8004b0e:	3602      	adds	r6, #2
        hi2c->XferCount--;
 8004b10:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8004b12:	62a6      	str	r6, [r4, #40]	; 0x28
        hi2c->XferSize--;
 8004b14:	85a0      	strh	r0, [r4, #44]	; 0x2c
        hi2c->XferCount--;
 8004b16:	85e3      	strh	r3, [r4, #46]	; 0x2e
    while (hi2c->XferSize > 0U)
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	d19f      	bne.n	8004a5c <AT24XX_Update+0xa4>
 8004b1c:	e7ca      	b.n	8004ab4 <AT24XX_Update+0xfc>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1e:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004b20:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b22:	680b      	ldr	r3, [r1, #0]
 8004b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b28:	600b      	str	r3, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b2a:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004b32:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8004b36:	6822      	ldr	r2, [r4, #0]
 8004b38:	6823      	ldr	r3, [r4, #0]
  while ((HAL_GetTick() - tickstart) < wait)
 8004b3a:	1a9b      	subs	r3, r3, r2
 8004b3c:	2b05      	cmp	r3, #5
 8004b3e:	d9fb      	bls.n	8004b38 <AT24XX_Update+0x180>
}
 8004b40:	b003      	add	sp, #12
 8004b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b44:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b46:	6363      	str	r3, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b48:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004b50:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b54:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004b56:	4313      	orrs	r3, r2
 8004b58:	6463      	str	r3, [r4, #68]	; 0x44
 8004b5a:	e73b      	b.n	80049d4 <AT24XX_Update+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b5c:	6861      	ldr	r1, [r4, #4]
 8004b5e:	e7a9      	b.n	8004ab4 <AT24XX_Update+0xfc>
 8004b60:	20000200 	.word	0x20000200
 8004b64:	ffff0000 	.word	0xffff0000

08004b68 <HAL_I2C_Master_Receive.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8004b68:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8004b6a:	2400      	movs	r4, #0
  return uwTick;
 8004b6c:	4b8b      	ldr	r3, [pc, #556]	; (8004d9c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x234>)
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8004b6e:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 8004b70:	9400      	str	r4, [sp, #0]
 8004b72:	681e      	ldr	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b74:	f893 4041 	ldrb.w	r4, [r3, #65]	; 0x41
 8004b78:	2c20      	cmp	r4, #32
 8004b7a:	d001      	beq.n	8004b80 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x18>
}
 8004b7c:	b007      	add	sp, #28
 8004b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b80:	685c      	ldr	r4, [r3, #4]
 8004b82:	e004      	b.n	8004b8e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x26>
 8004b84:	681d      	ldr	r5, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b86:	1bad      	subs	r5, r5, r6
 8004b88:	2d19      	cmp	r5, #25
 8004b8a:	f200 80b3 	bhi.w	8004cf4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b8e:	69a5      	ldr	r5, [r4, #24]
 8004b90:	ea6f 0c05 	mvn.w	ip, r5
 8004b94:	f01c 0c02 	ands.w	ip, ip, #2
 8004b98:	d0f4      	beq.n	8004b84 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1c>
    __HAL_LOCK(hi2c);
 8004b9a:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
 8004b9e:	2d01      	cmp	r5, #1
 8004ba0:	d0ec      	beq.n	8004b7c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
 8004ba2:	2501      	movs	r5, #1
 8004ba4:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ba8:	6825      	ldr	r5, [r4, #0]
 8004baa:	07ed      	lsls	r5, r5, #31
 8004bac:	d55d      	bpl.n	8004c6a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x102>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004bae:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bb2:	f04f 0c10 	mov.w	ip, #16
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bb6:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bb8:	6825      	ldr	r5, [r4, #0]
 8004bba:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8004bbe:	6025      	str	r5, [r4, #0]
    hi2c->pBuffPtr    = pData;
 8004bc0:	6299      	str	r1, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bc2:	4977      	ldr	r1, [pc, #476]	; (8004da0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x238>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004bc4:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bc8:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bcc:	645f      	str	r7, [r3, #68]	; 0x44
    hi2c->XferCount   = Size;
 8004bce:	85da      	strh	r2, [r3, #46]	; 0x2e
    hi2c->XferSize    = hi2c->XferCount;
 8004bd0:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bd2:	6319      	str	r1, [r3, #48]	; 0x30
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bd4:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bd6:	6821      	ldr	r1, [r4, #0]
    hi2c->XferSize    = hi2c->XferCount;
 8004bd8:	b292      	uxth	r2, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bda:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004bde:	2d08      	cmp	r5, #8
    hi2c->XferSize    = hi2c->XferCount;
 8004be0:	859a      	strh	r2, [r3, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be2:	6021      	str	r1, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004be4:	d007      	beq.n	8004bf6 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8e>
 8004be6:	2d01      	cmp	r5, #1
 8004be8:	d005      	beq.n	8004bf6 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8e>
 8004bea:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8004bee:	d002      	beq.n	8004bf6 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004bf0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004bf2:	2911      	cmp	r1, #17
 8004bf4:	d109      	bne.n	8004c0a <HAL_I2C_Master_Receive.constprop.0.isra.0+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bf6:	6821      	ldr	r1, [r4, #0]
 8004bf8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004bfc:	6021      	str	r1, [r4, #0]
 8004bfe:	e004      	b.n	8004c0a <HAL_I2C_Master_Receive.constprop.0.isra.0+0xa2>
 8004c00:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c02:	1b89      	subs	r1, r1, r6
 8004c04:	2964      	cmp	r1, #100	; 0x64
 8004c06:	f200 8084 	bhi.w	8004d12 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1aa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c0a:	6961      	ldr	r1, [r4, #20]
 8004c0c:	07cf      	lsls	r7, r1, #31
 8004c0e:	d5f7      	bpl.n	8004c00 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x98>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c10:	6959      	ldr	r1, [r3, #20]
 8004c12:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004c16:	d12d      	bne.n	8004c74 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x10c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c18:	f040 0001 	orr.w	r0, r0, #1
 8004c1c:	b2c0      	uxtb	r0, r0
 8004c1e:	6120      	str	r0, [r4, #16]
 8004c20:	e008      	b.n	8004c34 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xcc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c22:	6961      	ldr	r1, [r4, #20]
 8004c24:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8004c28:	f040 8088 	bne.w	8004d3c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d4>
 8004c2c:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2e:	1b80      	subs	r0, r0, r6
 8004c30:	2864      	cmp	r0, #100	; 0x64
 8004c32:	d851      	bhi.n	8004cd8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c34:	6961      	ldr	r1, [r4, #20]
 8004c36:	43c9      	mvns	r1, r1
 8004c38:	f011 0102 	ands.w	r1, r1, #2
 8004c3c:	d1f1      	bne.n	8004c22 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xba>
    if (hi2c->XferSize == 0U)
 8004c3e:	2a00      	cmp	r2, #0
 8004c40:	f040 8092 	bne.w	8004d68 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x200>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c44:	9204      	str	r2, [sp, #16]
 8004c46:	6962      	ldr	r2, [r4, #20]
 8004c48:	9204      	str	r2, [sp, #16]
 8004c4a:	69a2      	ldr	r2, [r4, #24]
 8004c4c:	9204      	str	r2, [sp, #16]
 8004c4e:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c50:	6822      	ldr	r2, [r4, #0]
 8004c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c56:	6022      	str	r2, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c58:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004c5a:	2120      	movs	r1, #32
    __HAL_UNLOCK(hi2c);
 8004c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8004c60:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    return HAL_OK;
 8004c68:	e788      	b.n	8004b7c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
      __HAL_I2C_ENABLE(hi2c);
 8004c6a:	6825      	ldr	r5, [r4, #0]
 8004c6c:	f045 0501 	orr.w	r5, r5, #1
 8004c70:	6025      	str	r5, [r4, #0]
 8004c72:	e79c      	b.n	8004bae <HAL_I2C_Master_Receive.constprop.0.isra.0+0x46>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c74:	21f0      	movs	r1, #240	; 0xf0
 8004c76:	6121      	str	r1, [r4, #16]
 8004c78:	e007      	b.n	8004c8a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x122>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c7a:	6961      	ldr	r1, [r4, #20]
 8004c7c:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8004c80:	d15c      	bne.n	8004d3c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d4>
 8004c82:	681d      	ldr	r5, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c84:	1bad      	subs	r5, r5, r6
 8004c86:	2d64      	cmp	r5, #100	; 0x64
 8004c88:	d826      	bhi.n	8004cd8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c8a:	6961      	ldr	r1, [r4, #20]
 8004c8c:	070d      	lsls	r5, r1, #28
 8004c8e:	d5f4      	bpl.n	8004c7a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x112>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c90:	6120      	str	r0, [r4, #16]
 8004c92:	e007      	b.n	8004ca4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x13c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c94:	6961      	ldr	r1, [r4, #20]
 8004c96:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8004c9a:	d14f      	bne.n	8004d3c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d4>
 8004c9c:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9e:	1b80      	subs	r0, r0, r6
 8004ca0:	2864      	cmp	r0, #100	; 0x64
 8004ca2:	d819      	bhi.n	8004cd8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ca4:	6961      	ldr	r1, [r4, #20]
 8004ca6:	43c9      	mvns	r1, r1
 8004ca8:	f011 0102 	ands.w	r1, r1, #2
 8004cac:	d1f2      	bne.n	8004c94 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x12c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cae:	9105      	str	r1, [sp, #20]
 8004cb0:	6961      	ldr	r1, [r4, #20]
 8004cb2:	9105      	str	r1, [sp, #20]
 8004cb4:	69a1      	ldr	r1, [r4, #24]
 8004cb6:	9105      	str	r1, [sp, #20]
 8004cb8:	9905      	ldr	r1, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cba:	6821      	ldr	r1, [r4, #0]
 8004cbc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004cc0:	6021      	str	r1, [r4, #0]
 8004cc2:	e003      	b.n	8004ccc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x164>
 8004cc4:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc6:	1b89      	subs	r1, r1, r6
 8004cc8:	2964      	cmp	r1, #100	; 0x64
 8004cca:	d822      	bhi.n	8004d12 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1aa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ccc:	6961      	ldr	r1, [r4, #20]
 8004cce:	07c9      	lsls	r1, r1, #31
 8004cd0:	d5f8      	bpl.n	8004cc4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x15c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004cd2:	21f1      	movs	r1, #241	; 0xf1
 8004cd4:	6121      	str	r1, [r4, #16]
 8004cd6:	e7ad      	b.n	8004c34 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xcc>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cd8:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004cda:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ce0:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004ce6:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cea:	f042 0220 	orr.w	r2, r2, #32
 8004cee:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004cf0:	b007      	add	sp, #28
 8004cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cf4:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004cf6:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cfe:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004d04:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d08:	f042 0220 	orr.w	r2, r2, #32
 8004d0c:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004d0e:	b007      	add	sp, #28
 8004d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d12:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d14:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d16:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d1c:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004d22:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d26:	f042 0220 	orr.w	r2, r2, #32
 8004d2a:	645a      	str	r2, [r3, #68]	; 0x44
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d2c:	6822      	ldr	r2, [r4, #0]
 8004d2e:	05d0      	lsls	r0, r2, #23
 8004d30:	f57f af24 	bpl.w	8004b7c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d38:	645a      	str	r2, [r3, #68]	; 0x44
 8004d3a:	e71f      	b.n	8004b7c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3c:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d3e:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d42:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d44:	6822      	ldr	r2, [r4, #0]
 8004d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d4a:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d4c:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d4e:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d50:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d54:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004d5a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d5e:	f042 0204 	orr.w	r2, r2, #4
 8004d62:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004d64:	b007      	add	sp, #28
 8004d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (hi2c->XferSize == 1U)
 8004d68:	2a01      	cmp	r2, #1
 8004d6a:	f000 80fc 	beq.w	8004f66 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3fe>
    else if (hi2c->XferSize == 2U)
 8004d6e:	2a02      	cmp	r2, #2
 8004d70:	f000 80be 	beq.w	8004ef0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x388>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d74:	6820      	ldr	r0, [r4, #0]
 8004d76:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8004d7a:	6020      	str	r0, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d7c:	9101      	str	r1, [sp, #4]
 8004d7e:	6961      	ldr	r1, [r4, #20]
 8004d80:	9101      	str	r1, [sp, #4]
 8004d82:	69a1      	ldr	r1, [r4, #24]
 8004d84:	9101      	str	r1, [sp, #4]
 8004d86:	9901      	ldr	r1, [sp, #4]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d88:	4d06      	ldr	r5, [pc, #24]	; (8004da4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x23c>)
 8004d8a:	4807      	ldr	r0, [pc, #28]	; (8004da8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x240>)
      if (hi2c->XferSize <= 3U)
 8004d8c:	2a03      	cmp	r2, #3
 8004d8e:	d847      	bhi.n	8004e20 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2b8>
        if (hi2c->XferSize == 1U)
 8004d90:	2a01      	cmp	r2, #1
 8004d92:	f000 80a5 	beq.w	8004ee0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x378>
        else if (hi2c->XferSize == 2U)
 8004d96:	2a02      	cmp	r2, #2
 8004d98:	d00d      	beq.n	8004db6 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x24e>
 8004d9a:	e05e      	b.n	8004e5a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2f2>
 8004d9c:	20000200 	.word	0x20000200
 8004da0:	ffff0000 	.word	0xffff0000
 8004da4:	20000000 	.word	0x20000000
 8004da8:	14f8b589 	.word	0x14f8b589
 8004dac:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dae:	1b92      	subs	r2, r2, r6
 8004db0:	2a64      	cmp	r2, #100	; 0x64
 8004db2:	f200 80b4 	bhi.w	8004f1e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004db6:	6962      	ldr	r2, [r4, #20]
 8004db8:	0757      	lsls	r7, r2, #29
 8004dba:	d5f7      	bpl.n	8004dac <HAL_I2C_Master_Receive.constprop.0.isra.0+0x244>
  __ASM volatile ("cpsid i" : : : "memory");
 8004dbc:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dbe:	685a      	ldr	r2, [r3, #4]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc2:	6811      	ldr	r1, [r2, #0]
 8004dc4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004dc8:	6011      	str	r1, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dca:	6912      	ldr	r2, [r2, #16]
 8004dcc:	7022      	strb	r2, [r4, #0]
          hi2c->pBuffPtr++;
 8004dce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dd0:	3201      	adds	r2, #1
 8004dd2:	629a      	str	r2, [r3, #40]	; 0x28
          hi2c->XferSize--;
 8004dd4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dd6:	3a01      	subs	r2, #1
 8004dd8:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 8004dda:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8004ddc:	3a01      	subs	r2, #1
 8004dde:	b292      	uxth	r2, r2
 8004de0:	85da      	strh	r2, [r3, #46]	; 0x2e
  __ASM volatile ("cpsie i" : : : "memory");
 8004de2:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	6911      	ldr	r1, [r2, #16]
 8004de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dea:	7011      	strb	r1, [r2, #0]
          hi2c->pBuffPtr++;
 8004dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dee:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
          hi2c->pBuffPtr++;
 8004df0:	3201      	adds	r2, #1
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28
          hi2c->XferSize--;
 8004df4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 8004df6:	3901      	subs	r1, #1
          hi2c->XferSize--;
 8004df8:	3a01      	subs	r2, #1
 8004dfa:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8004dfc:	b289      	uxth	r1, r1
          hi2c->XferSize--;
 8004dfe:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 8004e00:	85d9      	strh	r1, [r3, #46]	; 0x2e
    while (hi2c->XferSize > 0U)
 8004e02:	2a00      	cmp	r2, #0
 8004e04:	f43f af28 	beq.w	8004c58 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e08:	685c      	ldr	r4, [r3, #4]
 8004e0a:	e7bf      	b.n	8004d8c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x224>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e0c:	6961      	ldr	r1, [r4, #20]
 8004e0e:	f011 0110 	ands.w	r1, r1, #16
 8004e12:	f040 8093 	bne.w	8004f3c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3d4>
 8004e16:	681a      	ldr	r2, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e18:	1b92      	subs	r2, r2, r6
 8004e1a:	2a64      	cmp	r2, #100	; 0x64
 8004e1c:	f63f af5c 	bhi.w	8004cd8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e20:	6962      	ldr	r2, [r4, #20]
 8004e22:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8004e26:	d0f1      	beq.n	8004e0c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2a4>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e28:	6921      	ldr	r1, [r4, #16]
 8004e2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e2c:	7011      	strb	r1, [r2, #0]
        hi2c->XferCount--;
 8004e2e:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
        hi2c->pBuffPtr++;
 8004e30:	6a99      	ldr	r1, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e32:	3a01      	subs	r2, #1
 8004e34:	b292      	uxth	r2, r2
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e36:	685c      	ldr	r4, [r3, #4]
        hi2c->XferCount--;
 8004e38:	85da      	strh	r2, [r3, #46]	; 0x2e
        hi2c->pBuffPtr++;
 8004e3a:	1c4f      	adds	r7, r1, #1
        hi2c->XferSize--;
 8004e3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
        hi2c->pBuffPtr++;
 8004e3e:	629f      	str	r7, [r3, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e40:	6967      	ldr	r7, [r4, #20]
        hi2c->XferSize--;
 8004e42:	3a01      	subs	r2, #1
 8004e44:	b292      	uxth	r2, r2
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e46:	077f      	lsls	r7, r7, #29
        hi2c->XferSize--;
 8004e48:	859a      	strh	r2, [r3, #44]	; 0x2c
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e4a:	d5da      	bpl.n	8004e02 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x29a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4c:	6922      	ldr	r2, [r4, #16]
 8004e4e:	704a      	strb	r2, [r1, #1]
 8004e50:	e7cc      	b.n	8004dec <HAL_I2C_Master_Receive.constprop.0.isra.0+0x284>
 8004e52:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e54:	1b92      	subs	r2, r2, r6
 8004e56:	2a64      	cmp	r2, #100	; 0x64
 8004e58:	d861      	bhi.n	8004f1e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e5a:	6962      	ldr	r2, [r4, #20]
 8004e5c:	0751      	lsls	r1, r2, #29
 8004e5e:	d5f8      	bpl.n	8004e52 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2ea>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e60:	6822      	ldr	r2, [r4, #0]
 8004e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e66:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e68:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	6914      	ldr	r4, [r2, #16]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e6e:	682a      	ldr	r2, [r5, #0]
 8004e70:	08d2      	lsrs	r2, r2, #3
 8004e72:	fba0 1202 	umull	r1, r2, r0, r2
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e76:	6a99      	ldr	r1, [r3, #40]	; 0x28
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e78:	0a12      	lsrs	r2, r2, #8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7a:	700c      	strb	r4, [r1, #0]
          hi2c->XferCount--;
 8004e7c:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e7e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
          hi2c->XferCount--;
 8004e82:	3901      	subs	r1, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e84:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
          hi2c->XferCount--;
 8004e88:	b289      	uxth	r1, r1
 8004e8a:	85d9      	strh	r1, [r3, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e8c:	9200      	str	r2, [sp, #0]
          hi2c->XferSize--;
 8004e8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 8004e90:	6a9c      	ldr	r4, [r3, #40]	; 0x28
          hi2c->XferSize--;
 8004e92:	3a01      	subs	r2, #1
 8004e94:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 8004e96:	1c62      	adds	r2, r4, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004e98:	6859      	ldr	r1, [r3, #4]
          hi2c->pBuffPtr++;
 8004e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8004e9c:	e002      	b.n	8004ea4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x33c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004e9e:	694a      	ldr	r2, [r1, #20]
 8004ea0:	0752      	lsls	r2, r2, #29
 8004ea2:	d459      	bmi.n	8004f58 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3f0>
            count--;
 8004ea4:	9a00      	ldr	r2, [sp, #0]
 8004ea6:	3a01      	subs	r2, #1
 8004ea8:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 8004eaa:	9a00      	ldr	r2, [sp, #0]
 8004eac:	2a00      	cmp	r2, #0
 8004eae:	d1f6      	bne.n	8004e9e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x336>
              hi2c->State               = HAL_I2C_STATE_READY;
 8004eb0:	2120      	movs	r1, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004eb2:	635a      	str	r2, [r3, #52]	; 0x34
              hi2c->State               = HAL_I2C_STATE_READY;
 8004eb4:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ebc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004ebe:	f041 0120 	orr.w	r1, r1, #32
 8004ec2:	6459      	str	r1, [r3, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8004ec4:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8004ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004eca:	b007      	add	sp, #28
 8004ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ece:	6961      	ldr	r1, [r4, #20]
 8004ed0:	f011 0110 	ands.w	r1, r1, #16
 8004ed4:	d132      	bne.n	8004f3c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3d4>
 8004ed6:	681a      	ldr	r2, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed8:	1b92      	subs	r2, r2, r6
 8004eda:	2a64      	cmp	r2, #100	; 0x64
 8004edc:	f63f aefc 	bhi.w	8004cd8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ee0:	6962      	ldr	r2, [r4, #20]
 8004ee2:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8004ee6:	d0f2      	beq.n	8004ece <HAL_I2C_Master_Receive.constprop.0.isra.0+0x366>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee8:	6921      	ldr	r1, [r4, #16]
 8004eea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eec:	7011      	strb	r1, [r2, #0]
 8004eee:	e77d      	b.n	8004dec <HAL_I2C_Master_Receive.constprop.0.isra.0+0x284>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ef0:	6822      	ldr	r2, [r4, #0]
 8004ef2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ef6:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ef8:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	9102      	str	r1, [sp, #8]
 8004efe:	6951      	ldr	r1, [r2, #20]
 8004f00:	9102      	str	r1, [sp, #8]
 8004f02:	6991      	ldr	r1, [r2, #24]
 8004f04:	9102      	str	r1, [sp, #8]
 8004f06:	9902      	ldr	r1, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f08:	6811      	ldr	r1, [r2, #0]
 8004f0a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004f0e:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004f10:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 8004f12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f14:	2a00      	cmp	r2, #0
 8004f16:	f43f ae9f 	beq.w	8004c58 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f1a:	685c      	ldr	r4, [r3, #4]
 8004f1c:	e734      	b.n	8004d88 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x220>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f1e:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f20:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f22:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f28:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004f2e:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f32:	f042 0220 	orr.w	r2, r2, #32
 8004f36:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004f38:	b007      	add	sp, #28
 8004f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f3c:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f3e:	f06f 0010 	mvn.w	r0, #16
 8004f42:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f44:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f46:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f4e:	6c59      	ldr	r1, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f54:	6459      	str	r1, [r3, #68]	; 0x44
 8004f56:	e611      	b.n	8004b7c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f58:	680a      	ldr	r2, [r1, #0]
 8004f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5e:	600a      	str	r2, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f60:	690a      	ldr	r2, [r1, #16]
 8004f62:	7062      	strb	r2, [r4, #1]
 8004f64:	e733      	b.n	8004dce <HAL_I2C_Master_Receive.constprop.0.isra.0+0x266>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f66:	6822      	ldr	r2, [r4, #0]
 8004f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f6c:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f6e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	9103      	str	r1, [sp, #12]
 8004f74:	6951      	ldr	r1, [r2, #20]
 8004f76:	9103      	str	r1, [sp, #12]
 8004f78:	6991      	ldr	r1, [r2, #24]
 8004f7a:	9103      	str	r1, [sp, #12]
 8004f7c:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f7e:	6811      	ldr	r1, [r2, #0]
 8004f80:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004f84:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004f86:	b662      	cpsie	i
}
 8004f88:	e7c3      	b.n	8004f12 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3aa>
 8004f8a:	bf00      	nop

08004f8c <HAL_I2C_Master_Transmit.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8004f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f8e:	4b97      	ldr	r3, [pc, #604]	; (80051ec <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x260>)
 8004f90:	b083      	sub	sp, #12
 8004f92:	681e      	ldr	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f94:	f893 4041 	ldrb.w	r4, [r3, #65]	; 0x41
 8004f98:	2c20      	cmp	r4, #32
 8004f9a:	d001      	beq.n	8004fa0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x14>
}
 8004f9c:	b003      	add	sp, #12
 8004f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fa0:	685c      	ldr	r4, [r3, #4]
 8004fa2:	e004      	b.n	8004fae <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22>
 8004fa4:	681d      	ldr	r5, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa6:	1bad      	subs	r5, r5, r6
 8004fa8:	2d19      	cmp	r5, #25
 8004faa:	f200 80cc 	bhi.w	8005146 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fae:	69a5      	ldr	r5, [r4, #24]
 8004fb0:	ea6f 0c05 	mvn.w	ip, r5
 8004fb4:	f01c 0c02 	ands.w	ip, ip, #2
 8004fb8:	d0f4      	beq.n	8004fa4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18>
    __HAL_LOCK(hi2c);
 8004fba:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
 8004fbe:	2d01      	cmp	r5, #1
 8004fc0:	d0ec      	beq.n	8004f9c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
 8004fc2:	2501      	movs	r5, #1
 8004fc4:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fc8:	6825      	ldr	r5, [r4, #0]
 8004fca:	07ed      	lsls	r5, r5, #31
 8004fcc:	f140 80a7 	bpl.w	800511e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x192>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004fd0:	f04f 0e21 	mov.w	lr, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fd4:	f04f 0c10 	mov.w	ip, #16
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fd8:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fda:	6825      	ldr	r5, [r4, #0]
 8004fdc:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8004fe0:	6025      	str	r5, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004fe2:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fe6:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fea:	645f      	str	r7, [r3, #68]	; 0x44
    hi2c->XferCount   = Size;
 8004fec:	85da      	strh	r2, [r3, #46]	; 0x2e
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fee:	4a80      	ldr	r2, [pc, #512]	; (80051f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x264>)
    hi2c->XferSize    = hi2c->XferCount;
 8004ff0:	8ddd      	ldrh	r5, [r3, #46]	; 0x2e
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    hi2c->XferSize    = hi2c->XferCount;
 8004ff6:	b2ad      	uxth	r5, r5
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ff8:	2a08      	cmp	r2, #8
    hi2c->pBuffPtr    = pData;
 8004ffa:	6299      	str	r1, [r3, #40]	; 0x28
    hi2c->XferSize    = hi2c->XferCount;
 8004ffc:	859d      	strh	r5, [r3, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ffe:	d007      	beq.n	8005010 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
 8005000:	2a01      	cmp	r2, #1
 8005002:	d005      	beq.n	8005010 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
 8005004:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8005008:	d002      	beq.n	8005010 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800500a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800500c:	2a12      	cmp	r2, #18
 800500e:	d109      	bne.n	8005024 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x98>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005010:	6822      	ldr	r2, [r4, #0]
 8005012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005016:	6022      	str	r2, [r4, #0]
 8005018:	e004      	b.n	8005024 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x98>
 800501a:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800501c:	1b92      	subs	r2, r2, r6
 800501e:	2a64      	cmp	r2, #100	; 0x64
 8005020:	f200 80a0 	bhi.w	8005164 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1d8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005024:	6962      	ldr	r2, [r4, #20]
 8005026:	07d2      	lsls	r2, r2, #31
 8005028:	d5f7      	bpl.n	800501a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x8e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800502a:	695a      	ldr	r2, [r3, #20]
 800502c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005030:	d17a      	bne.n	8005128 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x19c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005032:	6120      	str	r0, [r4, #16]
 8005034:	e009      	b.n	800504a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xbe>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005036:	6962      	ldr	r2, [r4, #20]
 8005038:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 800503c:	f040 80a7 	bne.w	800518e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x202>
 8005040:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005042:	1b89      	subs	r1, r1, r6
 8005044:	2964      	cmp	r1, #100	; 0x64
 8005046:	f200 80b8 	bhi.w	80051ba <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800504a:	6962      	ldr	r2, [r4, #20]
 800504c:	43d2      	mvns	r2, r2
 800504e:	f012 0202 	ands.w	r2, r2, #2
 8005052:	d1f0      	bne.n	8005036 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xaa>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005054:	9201      	str	r2, [sp, #4]
 8005056:	6962      	ldr	r2, [r4, #20]
 8005058:	9201      	str	r2, [sp, #4]
 800505a:	69a2      	ldr	r2, [r4, #24]
 800505c:	9201      	str	r2, [sp, #4]
 800505e:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8005060:	2d00      	cmp	r5, #0
 8005062:	f000 80b6 	beq.w	80051d2 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005066:	6962      	ldr	r2, [r4, #20]
 8005068:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 800506c:	d12c      	bne.n	80050c8 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x13c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800506e:	6961      	ldr	r1, [r4, #20]
 8005070:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8005074:	d110      	bne.n	8005098 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10c>
 8005076:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005078:	1b92      	subs	r2, r2, r6
 800507a:	2a64      	cmp	r2, #100	; 0x64
 800507c:	d9f3      	bls.n	8005066 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xda>
        hi2c->State             = HAL_I2C_STATE_READY;
 800507e:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005080:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8005082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005086:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800508a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800508c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005090:	f042 0220 	orr.w	r2, r2, #32
 8005094:	645a      	str	r2, [r3, #68]	; 0x44
 8005096:	e00e      	b.n	80050b6 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x12a>
    hi2c->State               = HAL_I2C_STATE_READY;
 8005098:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800509a:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 800509e:	6160      	str	r0, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80050a0:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 80050a2:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050aa:	6c59      	ldr	r1, [r3, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80050ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050b0:	f041 0104 	orr.w	r1, r1, #4
 80050b4:	6459      	str	r1, [r3, #68]	; 0x44
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	f47f af6f 	bne.w	8004f9c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050c4:	6023      	str	r3, [r4, #0]
 80050c6:	e769      	b.n	8004f9c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050c8:	6a9f      	ldr	r7, [r3, #40]	; 0x28
      hi2c->XferSize--;
 80050ca:	1e6a      	subs	r2, r5, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050cc:	4638      	mov	r0, r7
 80050ce:	f810 1b01 	ldrb.w	r1, [r0], #1
      hi2c->XferSize--;
 80050d2:	b292      	uxth	r2, r2
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050d4:	6121      	str	r1, [r4, #16]
      hi2c->XferCount--;
 80050d6:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
      hi2c->pBuffPtr++;
 80050d8:	6298      	str	r0, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050da:	3901      	subs	r1, #1
 80050dc:	b289      	uxth	r1, r1
 80050de:	85d9      	strh	r1, [r3, #46]	; 0x2e
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050e0:	6961      	ldr	r1, [r4, #20]
      hi2c->XferSize--;
 80050e2:	859a      	strh	r2, [r3, #44]	; 0x2c
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050e4:	0749      	lsls	r1, r1, #29
 80050e6:	d518      	bpl.n	800511a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18e>
 80050e8:	b1ba      	cbz	r2, 800511a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050ea:	787a      	ldrb	r2, [r7, #1]
        hi2c->XferSize--;
 80050ec:	3d02      	subs	r5, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050ee:	6122      	str	r2, [r4, #16]
        hi2c->XferCount--;
 80050f0:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
        hi2c->XferSize--;
 80050f2:	b2ad      	uxth	r5, r5
        hi2c->XferCount--;
 80050f4:	3a01      	subs	r2, #1
        hi2c->pBuffPtr++;
 80050f6:	3702      	adds	r7, #2
        hi2c->XferCount--;
 80050f8:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 80050fa:	629f      	str	r7, [r3, #40]	; 0x28
        hi2c->XferSize--;
 80050fc:	859d      	strh	r5, [r3, #44]	; 0x2c
        hi2c->XferCount--;
 80050fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005100:	6962      	ldr	r2, [r4, #20]
 8005102:	f012 0204 	ands.w	r2, r2, #4
 8005106:	d1ab      	bne.n	8005060 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xd4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005108:	6961      	ldr	r1, [r4, #20]
 800510a:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 800510e:	d1c3      	bne.n	8005098 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10c>
 8005110:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005112:	1b92      	subs	r2, r2, r6
 8005114:	2a64      	cmp	r2, #100	; 0x64
 8005116:	d9f3      	bls.n	8005100 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x174>
 8005118:	e7b1      	b.n	800507e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xf2>
 800511a:	4615      	mov	r5, r2
 800511c:	e7f0      	b.n	8005100 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x174>
      __HAL_I2C_ENABLE(hi2c);
 800511e:	6825      	ldr	r5, [r4, #0]
 8005120:	f045 0501 	orr.w	r5, r5, #1
 8005124:	6025      	str	r5, [r4, #0]
 8005126:	e753      	b.n	8004fd0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x44>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005128:	22f0      	movs	r2, #240	; 0xf0
 800512a:	6122      	str	r2, [r4, #16]
 800512c:	e007      	b.n	800513e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1b2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800512e:	6962      	ldr	r2, [r4, #20]
 8005130:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8005134:	d12b      	bne.n	800518e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x202>
 8005136:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005138:	1b89      	subs	r1, r1, r6
 800513a:	2964      	cmp	r1, #100	; 0x64
 800513c:	d83d      	bhi.n	80051ba <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800513e:	6962      	ldr	r2, [r4, #20]
 8005140:	0717      	lsls	r7, r2, #28
 8005142:	d5f4      	bpl.n	800512e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1a2>
 8005144:	e775      	b.n	8005032 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
        hi2c->State             = HAL_I2C_STATE_READY;
 8005146:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005148:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 800514c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005150:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005156:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800515a:	f042 0220 	orr.w	r2, r2, #32
 800515e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8005160:	b003      	add	sp, #12
 8005162:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005164:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005166:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005168:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 800516a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800516e:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005172:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005174:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005178:	f042 0220 	orr.w	r2, r2, #32
 800517c:	645a      	str	r2, [r3, #68]	; 0x44
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800517e:	6822      	ldr	r2, [r4, #0]
 8005180:	05d1      	lsls	r1, r2, #23
 8005182:	f57f af0b 	bpl.w	8004f9c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005186:	f44f 7200 	mov.w	r2, #512	; 0x200
 800518a:	645a      	str	r2, [r3, #68]	; 0x44
 800518c:	e706      	b.n	8004f9c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800518e:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005190:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8005194:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005196:	6822      	ldr	r2, [r4, #0]
 8005198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800519c:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800519e:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80051a0:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 80051a2:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051a6:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80051ac:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051b0:	f042 0204 	orr.w	r2, r2, #4
 80051b4:	645a      	str	r2, [r3, #68]	; 0x44
}
 80051b6:	b003      	add	sp, #12
 80051b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State               = HAL_I2C_STATE_READY;
 80051ba:	2120      	movs	r1, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051bc:	635a      	str	r2, [r3, #52]	; 0x34
        hi2c->State               = HAL_I2C_STATE_READY;
 80051be:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80051c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051cc:	430a      	orrs	r2, r1
 80051ce:	645a      	str	r2, [r3, #68]	; 0x44
 80051d0:	e6e4      	b.n	8004f9c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d2:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80051d4:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d6:	6822      	ldr	r2, [r4, #0]
 80051d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051dc:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80051de:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80051e2:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e6:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
    return HAL_OK;
 80051ea:	e6d7      	b.n	8004f9c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
 80051ec:	20000200 	.word	0x20000200
 80051f0:	ffff0000 	.word	0xffff0000

080051f4 <DS3231_Update>:
uint8_t bcdToDec(uint8_t val) {
    return ((val / 16 * 10) + (val % 16));
}

void DS3231_Update(void) {
    uint8_t cmd = 0;
 80051f4:	2300      	movs	r3, #0
void DS3231_Update(void) {
 80051f6:	b510      	push	{r4, lr}
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 80051f8:	4c0f      	ldr	r4, [pc, #60]	; (8005238 <DS3231_Update+0x44>)
void DS3231_Update(void) {
 80051fa:	b082      	sub	sp, #8
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 80051fc:	f10d 0107 	add.w	r1, sp, #7
 8005200:	2201      	movs	r2, #1
 8005202:	20d0      	movs	r0, #208	; 0xd0
    uint8_t cmd = 0;
 8005204:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8005208:	f7ff fec0 	bl	8004f8c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 800520c:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 8005210:	2213      	movs	r2, #19
 8005212:	20d0      	movs	r0, #208	; 0xd0
 8005214:	f7ff fca8 	bl	8004b68 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    rtcBufferSet[1] = rtcBuffer[0];
 8005218:	e9d4 0229 	ldrd	r0, r2, [r4, #164]	; 0xa4
 800521c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8005220:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8005224:	f8c4 00b9 	str.w	r0, [r4, #185]	; 0xb9
 8005228:	f8c4 10b5 	str.w	r1, [r4, #181]	; 0xb5
 800522c:	f8c4 20bd 	str.w	r2, [r4, #189]	; 0xbd
 8005230:	f8c4 30c1 	str.w	r3, [r4, #193]	; 0xc1
    rtcBufferSet[12] = rtcBuffer[11];
    rtcBufferSet[13] = rtcBuffer[12];
    rtcBufferSet[14] = rtcBuffer[13];
    rtcBufferSet[15] = rtcBuffer[14];
    rtcBufferSet[16] = rtcBuffer[15];
}
 8005234:	b002      	add	sp, #8
 8005236:	bd10      	pop	{r4, pc}
 8005238:	20000200 	.word	0x20000200

0800523c <LCD_Char.constprop.0.isra.0>:
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
}

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
 800523c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005240:	469b      	mov	fp, r3
	uint8_t  *bitmap = font -> bitmap;
	uint16_t bo = glyph -> bitmapOffset;
	uint8_t bits = 0, bit = 0;
	uint16_t set_pixels = 0;
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8005242:	78d3      	ldrb	r3, [r2, #3]
static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
 8005244:	b085      	sub	sp, #20
 8005246:	e9cd 0102 	strd	r0, r1, [sp, #8]
	uint16_t bo = glyph -> bitmapOffset;
 800524a:	f8b2 8000 	ldrh.w	r8, [r2]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 800524e:	b38b      	cbz	r3, 80052b4 <LCD_Char.constprop.0.isra.0+0x78>
	uint8_t bits = 0, bit = 0;
 8005250:	2600      	movs	r6, #0
 8005252:	4691      	mov	r9, r2
 8005254:	4637      	mov	r7, r6
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8005256:	46b2      	mov	sl, r6
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8005258:	f899 1002 	ldrb.w	r1, [r9, #2]
 800525c:	b351      	cbz	r1, 80052b4 <LCD_Char.constprop.0.isra.0+0x78>
 800525e:	2400      	movs	r4, #0
 8005260:	4622      	mov	r2, r4
		{
			if(bit == 0)
 8005262:	2e00      	cmp	r6, #0
 8005264:	d045      	beq.n	80052f2 <LCD_Char.constprop.0.isra.0+0xb6>
			else if (set_pixels > 0)
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
				set_pixels = 0;
			}
			bit >>= 1;
 8005266:	4633      	mov	r3, r6
 8005268:	0876      	lsrs	r6, r6, #1
			if(bits & bit)
 800526a:	ea17 0503 	ands.w	r5, r7, r3
				set_pixels++;
 800526e:	f102 0301 	add.w	r3, r2, #1
			if(bits & bit)
 8005272:	d022      	beq.n	80052ba <LCD_Char.constprop.0.isra.0+0x7e>
				set_pixels++;
 8005274:	b29a      	uxth	r2, r3
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8005276:	3401      	adds	r4, #1
 8005278:	b2e4      	uxtb	r4, r4
 800527a:	42a1      	cmp	r1, r4
 800527c:	d8f1      	bhi.n	8005262 <LCD_Char.constprop.0.isra.0+0x26>
		}
		if (set_pixels > 0)
 800527e:	b18a      	cbz	r2, 80052a4 <LCD_Char.constprop.0.isra.0+0x68>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8005280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	f999 0005 	ldrsb.w	r0, [r9, #5]
 8005288:	9b02      	ldr	r3, [sp, #8]
 800528a:	4420      	add	r0, r4
 800528c:	f999 1006 	ldrsb.w	r1, [r9, #6]
 8005290:	1a80      	subs	r0, r0, r2
 8005292:	4418      	add	r0, r3
 8005294:	9b03      	ldr	r3, [sp, #12]
 8005296:	4451      	add	r1, sl
 8005298:	4419      	add	r1, r3
 800529a:	b280      	uxth	r0, r0
 800529c:	2301      	movs	r3, #1
 800529e:	b289      	uxth	r1, r1
 80052a0:	f7fb fcc8 	bl	8000c34 <LCD_Rect_Fill>
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80052a4:	f899 3003 	ldrb.w	r3, [r9, #3]
 80052a8:	f10a 0a01 	add.w	sl, sl, #1
 80052ac:	fa5f fa8a 	uxtb.w	sl, sl
 80052b0:	459a      	cmp	sl, r3
 80052b2:	d3d1      	bcc.n	8005258 <LCD_Char.constprop.0.isra.0+0x1c>
			set_pixels = 0;
		}
	}
}
 80052b4:	b005      	add	sp, #20
 80052b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else if (set_pixels > 0)
 80052ba:	2a00      	cmp	r2, #0
 80052bc:	d0db      	beq.n	8005276 <LCD_Char.constprop.0.isra.0+0x3a>
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80052be:	f999 1006 	ldrsb.w	r1, [r9, #6]
 80052c2:	f999 0005 	ldrsb.w	r0, [r9, #5]
 80052c6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80052ca:	4451      	add	r1, sl
 80052cc:	4461      	add	r1, ip
 80052ce:	4420      	add	r0, r4
 80052d0:	f8dd c008 	ldr.w	ip, [sp, #8]
 80052d4:	1a80      	subs	r0, r0, r2
 80052d6:	4460      	add	r0, ip
 80052d8:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 80052dc:	b289      	uxth	r1, r1
 80052de:	2301      	movs	r3, #1
 80052e0:	f8cd c000 	str.w	ip, [sp]
 80052e4:	b280      	uxth	r0, r0
 80052e6:	f7fb fca5 	bl	8000c34 <LCD_Rect_Fill>
				set_pixels = 0;
 80052ea:	462a      	mov	r2, r5
 80052ec:	f899 1002 	ldrb.w	r1, [r9, #2]
 80052f0:	e7c1      	b.n	8005276 <LCD_Char.constprop.0.isra.0+0x3a>
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 80052f2:	f108 0001 	add.w	r0, r8, #1
 80052f6:	f81b 7008 	ldrb.w	r7, [fp, r8]
				bit  = 0x80;
 80052fa:	2380      	movs	r3, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 80052fc:	2640      	movs	r6, #64	; 0x40
 80052fe:	fa1f f880 	uxth.w	r8, r0
 8005302:	e7b2      	b.n	800526a <LCD_Char.constprop.0.isra.0+0x2e>

08005304 <HAL_UART_Transmit.part.0.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8005304:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005306:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005308:	2521      	movs	r5, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530a:	4c32      	ldr	r4, [pc, #200]	; (80053d4 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xd0>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800530c:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005310:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005314:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005318:	f884 5105 	strb.w	r5, [r4, #261]	; 0x105
    huart->TxXferSize = Size;
 800531c:	f8a4 10ec 	strh.w	r1, [r4, #236]	; 0xec
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8005320:	4605      	mov	r5, r0
 8005322:	6820      	ldr	r0, [r4, #0]
    huart->TxXferCount = Size;
 8005324:	f8a4 10ee 	strh.w	r1, [r4, #238]	; 0xee
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005328:	d049      	beq.n	80053be <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xba>
      pdata16bits = NULL;
 800532a:	469c      	mov	ip, r3
    __HAL_UNLOCK(huart);
 800532c:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800532e:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    __HAL_UNLOCK(huart);
 8005332:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    while (huart->TxXferCount > 0U)
 8005336:	b29b      	uxth	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d047      	beq.n	80053cc <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xc8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800533c:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8005340:	e003      	b.n	800534a <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x46>
 8005342:	6822      	ldr	r2, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005344:	1a12      	subs	r2, r2, r0
 8005346:	2a64      	cmp	r2, #100	; 0x64
 8005348:	d823      	bhi.n	8005392 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x8e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800534a:	680b      	ldr	r3, [r1, #0]
 800534c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8005350:	d0f7      	beq.n	8005342 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x3e>
      if (pdata8bits == NULL)
 8005352:	b37d      	cbz	r5, 80053b4 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xb0>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005354:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005358:	604b      	str	r3, [r1, #4]
      huart->TxXferCount--;
 800535a:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
 800535e:	3b01      	subs	r3, #1
 8005360:	b29b      	uxth	r3, r3
 8005362:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    while (huart->TxXferCount > 0U)
 8005366:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
 800536a:	b29b      	uxth	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1ec      	bne.n	800534a <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x46>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005370:	680b      	ldr	r3, [r1, #0]
 8005372:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005376:	d107      	bne.n	8005388 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x84>
 8005378:	6822      	ldr	r2, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800537a:	1a12      	subs	r2, r2, r0
 800537c:	2a64      	cmp	r2, #100	; 0x64
 800537e:	d808      	bhi.n	8005392 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x8e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005380:	680b      	ldr	r3, [r1, #0]
 8005382:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005386:	d0f7      	beq.n	8005378 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x74>
    huart->gState = HAL_UART_STATE_READY;
 8005388:	2320      	movs	r3, #32
 800538a:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
}
 800538e:	bc30      	pop	{r4, r5}
 8005390:	4770      	bx	lr
        huart->gState  = HAL_UART_STATE_READY;
 8005392:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005394:	68ca      	ldr	r2, [r1, #12]
 8005396:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800539a:	60ca      	str	r2, [r1, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539c:	694a      	ldr	r2, [r1, #20]
 800539e:	f022 0201 	bic.w	r2, r2, #1
 80053a2:	614a      	str	r2, [r1, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80053a4:	f884 0105 	strb.w	r0, [r4, #261]	; 0x105
        __HAL_UNLOCK(huart);
 80053a8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
        huart->RxState = HAL_UART_STATE_READY;
 80053ac:	f884 0106 	strb.w	r0, [r4, #262]	; 0x106
}
 80053b0:	bc30      	pop	{r4, r5}
 80053b2:	4770      	bx	lr
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053b4:	f83c 3b02 	ldrh.w	r3, [ip], #2
 80053b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053bc:	e7cc      	b.n	8005358 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x54>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053be:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 80053c2:	2a00      	cmp	r2, #0
 80053c4:	d1b1      	bne.n	800532a <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x26>
      pdata16bits = (uint16_t *) pData;
 80053c6:	46ac      	mov	ip, r5
      pdata8bits  = NULL;
 80053c8:	4615      	mov	r5, r2
 80053ca:	e7af      	b.n	800532c <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x28>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053cc:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 80053d0:	e7d6      	b.n	8005380 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x7c>
 80053d2:	bf00      	nop
 80053d4:	20000200 	.word	0x20000200

080053d8 <HAL_InitTick.isra.0>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 80053d8:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80053da:	4d10      	ldr	r5, [pc, #64]	; (800541c <HAL_InitTick.isra.0+0x44>)
 80053dc:	4a10      	ldr	r2, [pc, #64]	; (8005420 <HAL_InitTick.isra.0+0x48>)
 80053de:	682b      	ldr	r3, [r5, #0]
 80053e0:	fba2 2303 	umull	r2, r3, r2, r3
 80053e4:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053e6:	3b01      	subs	r3, #1
 80053e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053ec:	d20e      	bcs.n	800540c <HAL_InitTick.isra.0+0x34>
 80053ee:	4604      	mov	r4, r0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053f0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053f4:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053f8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053fa:	2107      	movs	r1, #7
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053fc:	4e09      	ldr	r6, [pc, #36]	; (8005424 <HAL_InitTick.isra.0+0x4c>)
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053fe:	2c0f      	cmp	r4, #15
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005400:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005402:	f886 c023 	strb.w	ip, [r6, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005406:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005408:	6111      	str	r1, [r2, #16]
 800540a:	d900      	bls.n	800540e <HAL_InitTick.isra.0+0x36>
}
 800540c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800540e:	4621      	mov	r1, r4
 8005410:	f04f 30ff 	mov.w	r0, #4294967295
 8005414:	f7fc fdfc 	bl	8002010 <HAL_NVIC_SetPriority.constprop.0>
    uwTickPrio = TickPriority;
 8005418:	606c      	str	r4, [r5, #4]
}
 800541a:	bd70      	pop	{r4, r5, r6, pc}
 800541c:	20000000 	.word	0x20000000
 8005420:	10624dd3 	.word	0x10624dd3
 8005424:	e000ed00 	.word	0xe000ed00

08005428 <HAL_TIM_PWM_ConfigChannel.constprop.0>:
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
 8005428:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 800542a:	4c1f      	ldr	r4, [pc, #124]	; (80054a8 <HAL_TIM_PWM_ConfigChannel.constprop.0+0x80>)
 800542c:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8005430:	2b01      	cmp	r3, #1
 8005432:	d036      	beq.n	80054a2 <HAL_TIM_PWM_ConfigChannel.constprop.0+0x7a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005434:	6da3      	ldr	r3, [r4, #88]	; 0x58

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005436:	6806      	ldr	r6, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005438:	6a1a      	ldr	r2, [r3, #32]
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005440:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005442:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005444:	6999      	ldr	r1, [r3, #24]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005446:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800544a:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800544e:	4331      	orrs	r1, r6
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005450:	6886      	ldr	r6, [r0, #8]
 8005452:	4332      	orrs	r2, r6

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005454:	4e15      	ldr	r6, [pc, #84]	; (80054ac <HAL_TIM_PWM_ConfigChannel.constprop.0+0x84>)
 8005456:	42b3      	cmp	r3, r6
 8005458:	d016      	beq.n	8005488 <HAL_TIM_PWM_ConfigChannel.constprop.0+0x60>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800545a:	605d      	str	r5, [r3, #4]
  __HAL_UNLOCK(htim);
 800545c:	2500      	movs	r5, #0

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800545e:	6199      	str	r1, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005460:	6841      	ldr	r1, [r0, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005462:	6900      	ldr	r0, [r0, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8005464:	6359      	str	r1, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005466:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005468:	6999      	ldr	r1, [r3, #24]
 800546a:	f041 0108 	orr.w	r1, r1, #8
 800546e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005470:	6999      	ldr	r1, [r3, #24]
 8005472:	f021 0104 	bic.w	r1, r1, #4
 8005476:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005478:	699a      	ldr	r2, [r3, #24]
 800547a:	4302      	orrs	r2, r0
  return HAL_OK;
 800547c:	4628      	mov	r0, r5
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800547e:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005480:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
}
 8005484:	bcf0      	pop	{r4, r5, r6, r7}
 8005486:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8005488:	68c6      	ldr	r6, [r0, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800548a:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 800548e:	4332      	orrs	r2, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005490:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005494:	e9d0 6705 	ldrd	r6, r7, [r0, #20]
 8005498:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 800549a:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800549e:	4335      	orrs	r5, r6
 80054a0:	e7db      	b.n	800545a <HAL_TIM_PWM_ConfigChannel.constprop.0+0x32>
  __HAL_LOCK(htim);
 80054a2:	2002      	movs	r0, #2
 80054a4:	e7ee      	b.n	8005484 <HAL_TIM_PWM_ConfigChannel.constprop.0+0x5c>
 80054a6:	bf00      	nop
 80054a8:	20000200 	.word	0x20000200
 80054ac:	40012c00 	.word	0x40012c00

080054b0 <LCD_Font.constprop.0>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80054b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	int16_t cursor_x = x;
 80054b4:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80054b8:	b085      	sub	sp, #20
	int16_t cursor_y = y;
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80054ba:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80054bc:	460d      	mov	r5, r1
 80054be:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80054c0:	f000 fc84 	bl	8005dcc <strlen>
 80054c4:	b3b8      	cbz	r0, 8005536 <LCD_Font.constprop.0+0x86>
 80054c6:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 80054c8:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 80054ca:	2691      	movs	r6, #145	; 0x91
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80054cc:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
		}
		else if(c >= font.first && c <= font.last && c != '\r')
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80054ce:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800553c <LCD_Font.constprop.0+0x8c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80054d2:	4b1b      	ldr	r3, [pc, #108]	; (8005540 <LCD_Font.constprop.0+0x90>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80054d4:	f10d 0b08 	add.w	fp, sp, #8
 80054d8:	e01d      	b.n	8005516 <LCD_Font.constprop.0+0x66>
 80054da:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 80054de:	295e      	cmp	r1, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80054e0:	f102 0208 	add.w	r2, r2, #8
		else if(c >= font.first && c <= font.last && c != '\r')
 80054e4:	d812      	bhi.n	800550c <LCD_Font.constprop.0+0x5c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80054e6:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80054ea:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80054ee:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80054f0:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80054f4:	4638      	mov	r0, r7
 80054f6:	4631      	mov	r1, r6
 80054f8:	f7ff fea0 	bl	800523c <LCD_Char.constprop.0.isra.0>
			cursor_x += glyph.xAdvance * size;
 80054fc:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005500:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 8005502:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005504:	f000 fc62 	bl	8005dcc <strlen>
 8005508:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <LCD_Font.constprop.0+0x90>)
			cursor_x += glyph.xAdvance * size;
 800550a:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800550c:	3401      	adds	r4, #1
 800550e:	b2a4      	uxth	r4, r4
 8005510:	4284      	cmp	r4, r0
 8005512:	4622      	mov	r2, r4
 8005514:	d20f      	bcs.n	8005536 <LCD_Font.constprop.0+0x86>
		char c = text[text_pos];
 8005516:	f815 c002 	ldrb.w	ip, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 800551a:	f1ac 0220 	sub.w	r2, ip, #32
		if(c == '\n')
 800551e:	f1bc 0f0a 	cmp.w	ip, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 8005522:	b2d1      	uxtb	r1, r2
		if(c == '\n')
 8005524:	d1d9      	bne.n	80054da <LCD_Font.constprop.0+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005526:	3401      	adds	r4, #1
 8005528:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 800552a:	3639      	adds	r6, #57	; 0x39
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800552c:	4284      	cmp	r4, r0
			cursor_x = x;
 800552e:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005530:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 8005532:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005534:	d3ef      	bcc.n	8005516 <LCD_Font.constprop.0+0x66>
		}
	}
}
 8005536:	b005      	add	sp, #20
 8005538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800553c:	0800d520 	.word	0x0800d520
 8005540:	0801ca78 	.word	0x0801ca78

08005544 <LCD_Font.constprop.1>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 8005548:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 800554c:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800554e:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005550:	460d      	mov	r5, r1
 8005552:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005554:	f000 fc3a 	bl	8005dcc <strlen>
 8005558:	b3b8      	cbz	r0, 80055ca <LCD_Font.constprop.1+0x86>
 800555a:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 800555c:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 800555e:	2664      	movs	r6, #100	; 0x64
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005560:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005562:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80055d0 <LCD_Font.constprop.1+0x8c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005566:	4b1b      	ldr	r3, [pc, #108]	; (80055d4 <LCD_Font.constprop.1+0x90>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005568:	f10d 0b08 	add.w	fp, sp, #8
 800556c:	e01d      	b.n	80055aa <LCD_Font.constprop.1+0x66>
 800556e:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 8005572:	295e      	cmp	r1, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005574:	f502 723e 	add.w	r2, r2, #760	; 0x2f8
		else if(c >= font.first && c <= font.last && c != '\r')
 8005578:	d812      	bhi.n	80055a0 <LCD_Font.constprop.1+0x5c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800557a:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800557e:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005582:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005584:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005588:	4638      	mov	r0, r7
 800558a:	4631      	mov	r1, r6
 800558c:	f7ff fe56 	bl	800523c <LCD_Char.constprop.0.isra.0>
			cursor_x += glyph.xAdvance * size;
 8005590:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005594:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 8005596:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005598:	f000 fc18 	bl	8005dcc <strlen>
 800559c:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <LCD_Font.constprop.1+0x90>)
			cursor_x += glyph.xAdvance * size;
 800559e:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055a0:	3401      	adds	r4, #1
 80055a2:	b2a4      	uxth	r4, r4
 80055a4:	4284      	cmp	r4, r0
 80055a6:	4622      	mov	r2, r4
 80055a8:	d20f      	bcs.n	80055ca <LCD_Font.constprop.1+0x86>
		char c = text[text_pos];
 80055aa:	f815 c002 	ldrb.w	ip, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 80055ae:	f1ac 0220 	sub.w	r2, ip, #32
		if(c == '\n')
 80055b2:	f1bc 0f0a 	cmp.w	ip, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 80055b6:	b2d1      	uxtb	r1, r2
		if(c == '\n')
 80055b8:	d1d9      	bne.n	800556e <LCD_Font.constprop.1+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055ba:	3401      	adds	r4, #1
 80055bc:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 80055be:	3696      	adds	r6, #150	; 0x96
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055c0:	4284      	cmp	r4, r0
			cursor_x = x;
 80055c2:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055c4:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 80055c6:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055c8:	d3ef      	bcc.n	80055aa <LCD_Font.constprop.1+0x66>
}
 80055ca:	b005      	add	sp, #20
 80055cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d0:	0800d520 	.word	0x0800d520
 80055d4:	0800db64 	.word	0x0800db64

080055d8 <LCD_Font.constprop.2>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80055d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 80055dc:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80055e0:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055e2:	4610      	mov	r0, r2
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80055e4:	4616      	mov	r6, r2
 80055e6:	469a      	mov	sl, r3
	int16_t cursor_y = y;
 80055e8:	b20d      	sxth	r5, r1
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055ea:	f000 fbef 	bl	8005dcc <strlen>
 80055ee:	b3b0      	cbz	r0, 800565e <LCD_Font.constprop.2+0x86>
 80055f0:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 80055f2:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055f4:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80055f6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8005664 <LCD_Font.constprop.2+0x8c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80055fa:	4b1b      	ldr	r3, [pc, #108]	; (8005668 <LCD_Font.constprop.2+0x90>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80055fc:	f10d 0b08 	add.w	fp, sp, #8
 8005600:	e01d      	b.n	800563e <LCD_Font.constprop.2+0x66>
 8005602:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 8005606:	295e      	cmp	r1, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005608:	f102 0208 	add.w	r2, r2, #8
		else if(c >= font.first && c <= font.last && c != '\r')
 800560c:	d812      	bhi.n	8005634 <LCD_Font.constprop.2+0x5c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800560e:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005612:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005616:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005618:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800561c:	4638      	mov	r0, r7
 800561e:	4629      	mov	r1, r5
 8005620:	f7ff fe0c 	bl	800523c <LCD_Char.constprop.0.isra.0>
			cursor_x += glyph.xAdvance * size;
 8005624:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005628:	4630      	mov	r0, r6
			cursor_x += glyph.xAdvance * size;
 800562a:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800562c:	f000 fbce 	bl	8005dcc <strlen>
 8005630:	4b0d      	ldr	r3, [pc, #52]	; (8005668 <LCD_Font.constprop.2+0x90>)
			cursor_x += glyph.xAdvance * size;
 8005632:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005634:	3401      	adds	r4, #1
 8005636:	b2a4      	uxth	r4, r4
 8005638:	4284      	cmp	r4, r0
 800563a:	4622      	mov	r2, r4
 800563c:	d20f      	bcs.n	800565e <LCD_Font.constprop.2+0x86>
		char c = text[text_pos];
 800563e:	f816 c002 	ldrb.w	ip, [r6, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 8005642:	f1ac 0220 	sub.w	r2, ip, #32
		if(c == '\n')
 8005646:	f1bc 0f0a 	cmp.w	ip, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 800564a:	b2d1      	uxtb	r1, r2
		if(c == '\n')
 800564c:	d1d9      	bne.n	8005602 <LCD_Font.constprop.2+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800564e:	3401      	adds	r4, #1
 8005650:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 8005652:	3539      	adds	r5, #57	; 0x39
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005654:	4284      	cmp	r4, r0
			cursor_x = x;
 8005656:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005658:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 800565a:	b22d      	sxth	r5, r5
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800565c:	d3ef      	bcc.n	800563e <LCD_Font.constprop.2+0x66>
}
 800565e:	b005      	add	sp, #20
 8005660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005664:	0800d520 	.word	0x0800d520
 8005668:	0801ca78 	.word	0x0801ca78

0800566c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800566c:	e7fe      	b.n	800566c <NMI_Handler>
 800566e:	bf00      	nop

08005670 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005670:	e7fe      	b.n	8005670 <HardFault_Handler>
 8005672:	bf00      	nop

08005674 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005674:	e7fe      	b.n	8005674 <MemManage_Handler>
 8005676:	bf00      	nop

08005678 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005678:	e7fe      	b.n	8005678 <BusFault_Handler>
 800567a:	bf00      	nop

0800567c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800567c:	e7fe      	b.n	800567c <UsageFault_Handler>
 800567e:	bf00      	nop

08005680 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop

08005684 <DebugMon_Handler>:
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop

08005688 <PendSV_Handler>:
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop

0800568c <SysTick_Handler>:
  uwTick += uwTickFreq;
 800568c:	4a02      	ldr	r2, [pc, #8]	; (8005698 <SysTick_Handler+0xc>)
 800568e:	6813      	ldr	r3, [r2, #0]
 8005690:	3301      	adds	r3, #1
 8005692:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	20000200 	.word	0x20000200

0800569c <DMA1_Channel2_IRQHandler>:
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800569c:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800569e:	4b4d      	ldr	r3, [pc, #308]	; (80057d4 <DMA1_Channel2_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80056a0:	b470      	push	{r4, r5, r6}
 80056a2:	f8d3 6258 	ldr.w	r6, [r3, #600]	; 0x258
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80056a6:	f8d3 025c 	ldr.w	r0, [r3, #604]	; 0x25c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80056aa:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80056ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80056b0:	4081      	lsls	r1, r0
 80056b2:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 80056b4:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80056b6:	d01f      	beq.n	80056f8 <DMA1_Channel2_IRQHandler+0x5c>
 80056b8:	0769      	lsls	r1, r5, #29
 80056ba:	d51d      	bpl.n	80056f8 <DMA1_Channel2_IRQHandler+0x5c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056bc:	6811      	ldr	r1, [r2, #0]
 80056be:	0688      	lsls	r0, r1, #26
 80056c0:	d403      	bmi.n	80056ca <DMA1_Channel2_IRQHandler+0x2e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056c2:	6811      	ldr	r1, [r2, #0]
 80056c4:	f021 0104 	bic.w	r1, r1, #4
 80056c8:	6011      	str	r1, [r2, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80056ca:	4943      	ldr	r1, [pc, #268]	; (80057d8 <DMA1_Channel2_IRQHandler+0x13c>)
 80056cc:	428a      	cmp	r2, r1
 80056ce:	d060      	beq.n	8005792 <DMA1_Channel2_IRQHandler+0xf6>
 80056d0:	3114      	adds	r1, #20
 80056d2:	428a      	cmp	r2, r1
 80056d4:	d067      	beq.n	80057a6 <DMA1_Channel2_IRQHandler+0x10a>
 80056d6:	3114      	adds	r1, #20
 80056d8:	428a      	cmp	r2, r1
 80056da:	d06e      	beq.n	80057ba <DMA1_Channel2_IRQHandler+0x11e>
 80056dc:	3114      	adds	r1, #20
 80056de:	428a      	cmp	r2, r1
 80056e0:	d071      	beq.n	80057c6 <DMA1_Channel2_IRQHandler+0x12a>
 80056e2:	3114      	adds	r1, #20
 80056e4:	428a      	cmp	r2, r1
 80056e6:	d063      	beq.n	80057b0 <DMA1_Channel2_IRQHandler+0x114>
 80056e8:	3114      	adds	r1, #20
 80056ea:	428a      	cmp	r2, r1
 80056ec:	bf0c      	ite	eq
 80056ee:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 80056f2:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 80056f6:	e04d      	b.n	8005794 <DMA1_Channel2_IRQHandler+0xf8>
      hdma->XferHalfCpltCallback(hdma);
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80056f8:	2102      	movs	r1, #2
 80056fa:	4081      	lsls	r1, r0
 80056fc:	4221      	tst	r1, r4
 80056fe:	d022      	beq.n	8005746 <DMA1_Channel2_IRQHandler+0xaa>
 8005700:	07a9      	lsls	r1, r5, #30
 8005702:	d520      	bpl.n	8005746 <DMA1_Channel2_IRQHandler+0xaa>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005704:	6811      	ldr	r1, [r2, #0]
 8005706:	0688      	lsls	r0, r1, #26
 8005708:	d406      	bmi.n	8005718 <DMA1_Channel2_IRQHandler+0x7c>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800570a:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800570c:	6811      	ldr	r1, [r2, #0]
 800570e:	f021 010a 	bic.w	r1, r1, #10
 8005712:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005714:	f883 023d 	strb.w	r0, [r3, #573]	; 0x23d
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005718:	492f      	ldr	r1, [pc, #188]	; (80057d8 <DMA1_Channel2_IRQHandler+0x13c>)
 800571a:	428a      	cmp	r2, r1
 800571c:	d02d      	beq.n	800577a <DMA1_Channel2_IRQHandler+0xde>
 800571e:	3114      	adds	r1, #20
 8005720:	428a      	cmp	r2, r1
 8005722:	d048      	beq.n	80057b6 <DMA1_Channel2_IRQHandler+0x11a>
 8005724:	3114      	adds	r1, #20
 8005726:	428a      	cmp	r2, r1
 8005728:	d04a      	beq.n	80057c0 <DMA1_Channel2_IRQHandler+0x124>
 800572a:	3114      	adds	r1, #20
 800572c:	428a      	cmp	r2, r1
 800572e:	d03c      	beq.n	80057aa <DMA1_Channel2_IRQHandler+0x10e>
 8005730:	3114      	adds	r1, #20
 8005732:	428a      	cmp	r2, r1
 8005734:	d04a      	beq.n	80057cc <DMA1_Channel2_IRQHandler+0x130>
 8005736:	3114      	adds	r1, #20
 8005738:	428a      	cmp	r2, r1
 800573a:	bf0c      	ite	eq
 800573c:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8005740:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8005744:	e01a      	b.n	800577c <DMA1_Channel2_IRQHandler+0xe0>
      hdma->XferCpltCallback(hdma);
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005746:	2108      	movs	r1, #8
 8005748:	4081      	lsls	r1, r0
 800574a:	4221      	tst	r1, r4
 800574c:	d01f      	beq.n	800578e <DMA1_Channel2_IRQHandler+0xf2>
 800574e:	0729      	lsls	r1, r5, #28
 8005750:	d51d      	bpl.n	800578e <DMA1_Channel2_IRQHandler+0xf2>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005752:	6811      	ldr	r1, [r2, #0]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005754:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005758:	f021 010e 	bic.w	r1, r1, #14
 800575c:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800575e:	2201      	movs	r2, #1

    if (hdma->XferErrorCallback != NULL)
 8005760:	f8d3 124c 	ldr.w	r1, [r3, #588]	; 0x24c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005764:	fa02 f000 	lsl.w	r0, r2, r0
 8005768:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800576a:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
    __HAL_UNLOCK(hdma);
 800576e:	f8a3 423c 	strh.w	r4, [r3, #572]	; 0x23c
    if (hdma->XferErrorCallback != NULL)
 8005772:	b161      	cbz	r1, 800578e <DMA1_Channel2_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005774:	bc70      	pop	{r4, r5, r6}
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005776:	4819      	ldr	r0, [pc, #100]	; (80057dc <DMA1_Channel2_IRQHandler+0x140>)
 8005778:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800577a:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 800577c:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800577e:	4c18      	ldr	r4, [pc, #96]	; (80057e0 <DMA1_Channel2_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8005780:	f8d3 1244 	ldr.w	r1, [r3, #580]	; 0x244
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005784:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8005786:	f883 023c 	strb.w	r0, [r3, #572]	; 0x23c
    if(hdma->XferCpltCallback != NULL)
 800578a:	2900      	cmp	r1, #0
 800578c:	d1f2      	bne.n	8005774 <DMA1_Channel2_IRQHandler+0xd8>
 800578e:	bc70      	pop	{r4, r5, r6}
 8005790:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005792:	2204      	movs	r2, #4
 8005794:	4912      	ldr	r1, [pc, #72]	; (80057e0 <DMA1_Channel2_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 8005796:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800579a:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0f6      	beq.n	800578e <DMA1_Channel2_IRQHandler+0xf2>
 80057a0:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 80057a2:	480e      	ldr	r0, [pc, #56]	; (80057dc <DMA1_Channel2_IRQHandler+0x140>)
 80057a4:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80057a6:	2240      	movs	r2, #64	; 0x40
 80057a8:	e7f4      	b.n	8005794 <DMA1_Channel2_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80057aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057ae:	e7e5      	b.n	800577c <DMA1_Channel2_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80057b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80057b4:	e7ee      	b.n	8005794 <DMA1_Channel2_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80057b6:	2220      	movs	r2, #32
 80057b8:	e7e0      	b.n	800577c <DMA1_Channel2_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80057ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057be:	e7e9      	b.n	8005794 <DMA1_Channel2_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80057c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c4:	e7da      	b.n	800577c <DMA1_Channel2_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80057c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80057ca:	e7e3      	b.n	8005794 <DMA1_Channel2_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80057cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057d0:	e7d4      	b.n	800577c <DMA1_Channel2_IRQHandler+0xe0>
 80057d2:	bf00      	nop
 80057d4:	20000200 	.word	0x20000200
 80057d8:	40020008 	.word	0x40020008
 80057dc:	2000041c 	.word	0x2000041c
 80057e0:	40020000 	.word	0x40020000

080057e4 <DMA1_Channel4_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80057e4:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80057e6:	4b4d      	ldr	r3, [pc, #308]	; (800591c <DMA1_Channel4_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80057e8:	b470      	push	{r4, r5, r6}
 80057ea:	f8d3 61d0 	ldr.w	r6, [r3, #464]	; 0x1d0
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80057ee:	f8d3 01d4 	ldr.w	r0, [r3, #468]	; 0x1d4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80057f2:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80057f4:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80057f8:	4081      	lsls	r1, r0
 80057fa:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 80057fc:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80057fe:	d01f      	beq.n	8005840 <DMA1_Channel4_IRQHandler+0x5c>
 8005800:	0769      	lsls	r1, r5, #29
 8005802:	d51d      	bpl.n	8005840 <DMA1_Channel4_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005804:	6811      	ldr	r1, [r2, #0]
 8005806:	0688      	lsls	r0, r1, #26
 8005808:	d403      	bmi.n	8005812 <DMA1_Channel4_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800580a:	6811      	ldr	r1, [r2, #0]
 800580c:	f021 0104 	bic.w	r1, r1, #4
 8005810:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005812:	4943      	ldr	r1, [pc, #268]	; (8005920 <DMA1_Channel4_IRQHandler+0x13c>)
 8005814:	428a      	cmp	r2, r1
 8005816:	d060      	beq.n	80058da <DMA1_Channel4_IRQHandler+0xf6>
 8005818:	3114      	adds	r1, #20
 800581a:	428a      	cmp	r2, r1
 800581c:	d067      	beq.n	80058ee <DMA1_Channel4_IRQHandler+0x10a>
 800581e:	3114      	adds	r1, #20
 8005820:	428a      	cmp	r2, r1
 8005822:	d06e      	beq.n	8005902 <DMA1_Channel4_IRQHandler+0x11e>
 8005824:	3114      	adds	r1, #20
 8005826:	428a      	cmp	r2, r1
 8005828:	d071      	beq.n	800590e <DMA1_Channel4_IRQHandler+0x12a>
 800582a:	3114      	adds	r1, #20
 800582c:	428a      	cmp	r2, r1
 800582e:	d063      	beq.n	80058f8 <DMA1_Channel4_IRQHandler+0x114>
 8005830:	3114      	adds	r1, #20
 8005832:	428a      	cmp	r2, r1
 8005834:	bf0c      	ite	eq
 8005836:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 800583a:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 800583e:	e04d      	b.n	80058dc <DMA1_Channel4_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005840:	2102      	movs	r1, #2
 8005842:	4081      	lsls	r1, r0
 8005844:	4221      	tst	r1, r4
 8005846:	d022      	beq.n	800588e <DMA1_Channel4_IRQHandler+0xaa>
 8005848:	07a9      	lsls	r1, r5, #30
 800584a:	d520      	bpl.n	800588e <DMA1_Channel4_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800584c:	6811      	ldr	r1, [r2, #0]
 800584e:	0688      	lsls	r0, r1, #26
 8005850:	d406      	bmi.n	8005860 <DMA1_Channel4_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 8005852:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005854:	6811      	ldr	r1, [r2, #0]
 8005856:	f021 010a 	bic.w	r1, r1, #10
 800585a:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800585c:	f883 01b5 	strb.w	r0, [r3, #437]	; 0x1b5
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005860:	492f      	ldr	r1, [pc, #188]	; (8005920 <DMA1_Channel4_IRQHandler+0x13c>)
 8005862:	428a      	cmp	r2, r1
 8005864:	d02d      	beq.n	80058c2 <DMA1_Channel4_IRQHandler+0xde>
 8005866:	3114      	adds	r1, #20
 8005868:	428a      	cmp	r2, r1
 800586a:	d048      	beq.n	80058fe <DMA1_Channel4_IRQHandler+0x11a>
 800586c:	3114      	adds	r1, #20
 800586e:	428a      	cmp	r2, r1
 8005870:	d04a      	beq.n	8005908 <DMA1_Channel4_IRQHandler+0x124>
 8005872:	3114      	adds	r1, #20
 8005874:	428a      	cmp	r2, r1
 8005876:	d03c      	beq.n	80058f2 <DMA1_Channel4_IRQHandler+0x10e>
 8005878:	3114      	adds	r1, #20
 800587a:	428a      	cmp	r2, r1
 800587c:	d04a      	beq.n	8005914 <DMA1_Channel4_IRQHandler+0x130>
 800587e:	3114      	adds	r1, #20
 8005880:	428a      	cmp	r2, r1
 8005882:	bf0c      	ite	eq
 8005884:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8005888:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 800588c:	e01a      	b.n	80058c4 <DMA1_Channel4_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800588e:	2108      	movs	r1, #8
 8005890:	4081      	lsls	r1, r0
 8005892:	4221      	tst	r1, r4
 8005894:	d01f      	beq.n	80058d6 <DMA1_Channel4_IRQHandler+0xf2>
 8005896:	0729      	lsls	r1, r5, #28
 8005898:	d51d      	bpl.n	80058d6 <DMA1_Channel4_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800589a:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 800589c:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058a0:	f021 010e 	bic.w	r1, r1, #14
 80058a4:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80058a6:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 80058a8:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80058ac:	fa02 f000 	lsl.w	r0, r2, r0
 80058b0:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80058b2:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
    __HAL_UNLOCK(hdma);
 80058b6:	f8a3 41b4 	strh.w	r4, [r3, #436]	; 0x1b4
    if (hdma->XferErrorCallback != NULL)
 80058ba:	b161      	cbz	r1, 80058d6 <DMA1_Channel4_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80058bc:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80058be:	4819      	ldr	r0, [pc, #100]	; (8005924 <DMA1_Channel4_IRQHandler+0x140>)
 80058c0:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80058c2:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 80058c4:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80058c6:	4c18      	ldr	r4, [pc, #96]	; (8005928 <DMA1_Channel4_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 80058c8:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80058cc:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80058ce:	f883 01b4 	strb.w	r0, [r3, #436]	; 0x1b4
    if(hdma->XferCpltCallback != NULL)
 80058d2:	2900      	cmp	r1, #0
 80058d4:	d1f2      	bne.n	80058bc <DMA1_Channel4_IRQHandler+0xd8>
 80058d6:	bc70      	pop	{r4, r5, r6}
 80058d8:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80058da:	2204      	movs	r2, #4
 80058dc:	4912      	ldr	r1, [pc, #72]	; (8005928 <DMA1_Channel4_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 80058de:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80058e2:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0f6      	beq.n	80058d6 <DMA1_Channel4_IRQHandler+0xf2>
 80058e8:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 80058ea:	480e      	ldr	r0, [pc, #56]	; (8005924 <DMA1_Channel4_IRQHandler+0x140>)
 80058ec:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80058ee:	2240      	movs	r2, #64	; 0x40
 80058f0:	e7f4      	b.n	80058dc <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80058f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058f6:	e7e5      	b.n	80058c4 <DMA1_Channel4_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80058f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80058fc:	e7ee      	b.n	80058dc <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80058fe:	2220      	movs	r2, #32
 8005900:	e7e0      	b.n	80058c4 <DMA1_Channel4_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005902:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005906:	e7e9      	b.n	80058dc <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800590c:	e7da      	b.n	80058c4 <DMA1_Channel4_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800590e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005912:	e7e3      	b.n	80058dc <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005914:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005918:	e7d4      	b.n	80058c4 <DMA1_Channel4_IRQHandler+0xe0>
 800591a:	bf00      	nop
 800591c:	20000200 	.word	0x20000200
 8005920:	40020008 	.word	0x40020008
 8005924:	20000394 	.word	0x20000394
 8005928:	40020000 	.word	0x40020000

0800592c <DMA1_Channel5_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800592c:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800592e:	4b4d      	ldr	r3, [pc, #308]	; (8005a64 <DMA1_Channel5_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005930:	b470      	push	{r4, r5, r6}
 8005932:	f8d3 6214 	ldr.w	r6, [r3, #532]	; 0x214
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005936:	f8d3 0218 	ldr.w	r0, [r3, #536]	; 0x218
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800593a:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800593c:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005940:	4081      	lsls	r1, r0
 8005942:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005944:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005946:	d01f      	beq.n	8005988 <DMA1_Channel5_IRQHandler+0x5c>
 8005948:	0769      	lsls	r1, r5, #29
 800594a:	d51d      	bpl.n	8005988 <DMA1_Channel5_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800594c:	6811      	ldr	r1, [r2, #0]
 800594e:	0688      	lsls	r0, r1, #26
 8005950:	d403      	bmi.n	800595a <DMA1_Channel5_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005952:	6811      	ldr	r1, [r2, #0]
 8005954:	f021 0104 	bic.w	r1, r1, #4
 8005958:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800595a:	4943      	ldr	r1, [pc, #268]	; (8005a68 <DMA1_Channel5_IRQHandler+0x13c>)
 800595c:	428a      	cmp	r2, r1
 800595e:	d060      	beq.n	8005a22 <DMA1_Channel5_IRQHandler+0xf6>
 8005960:	3114      	adds	r1, #20
 8005962:	428a      	cmp	r2, r1
 8005964:	d067      	beq.n	8005a36 <DMA1_Channel5_IRQHandler+0x10a>
 8005966:	3114      	adds	r1, #20
 8005968:	428a      	cmp	r2, r1
 800596a:	d06e      	beq.n	8005a4a <DMA1_Channel5_IRQHandler+0x11e>
 800596c:	3114      	adds	r1, #20
 800596e:	428a      	cmp	r2, r1
 8005970:	d071      	beq.n	8005a56 <DMA1_Channel5_IRQHandler+0x12a>
 8005972:	3114      	adds	r1, #20
 8005974:	428a      	cmp	r2, r1
 8005976:	d063      	beq.n	8005a40 <DMA1_Channel5_IRQHandler+0x114>
 8005978:	3114      	adds	r1, #20
 800597a:	428a      	cmp	r2, r1
 800597c:	bf0c      	ite	eq
 800597e:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8005982:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8005986:	e04d      	b.n	8005a24 <DMA1_Channel5_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005988:	2102      	movs	r1, #2
 800598a:	4081      	lsls	r1, r0
 800598c:	4221      	tst	r1, r4
 800598e:	d022      	beq.n	80059d6 <DMA1_Channel5_IRQHandler+0xaa>
 8005990:	07a9      	lsls	r1, r5, #30
 8005992:	d520      	bpl.n	80059d6 <DMA1_Channel5_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005994:	6811      	ldr	r1, [r2, #0]
 8005996:	0688      	lsls	r0, r1, #26
 8005998:	d406      	bmi.n	80059a8 <DMA1_Channel5_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 800599a:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800599c:	6811      	ldr	r1, [r2, #0]
 800599e:	f021 010a 	bic.w	r1, r1, #10
 80059a2:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80059a4:	f883 01f9 	strb.w	r0, [r3, #505]	; 0x1f9
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80059a8:	492f      	ldr	r1, [pc, #188]	; (8005a68 <DMA1_Channel5_IRQHandler+0x13c>)
 80059aa:	428a      	cmp	r2, r1
 80059ac:	d02d      	beq.n	8005a0a <DMA1_Channel5_IRQHandler+0xde>
 80059ae:	3114      	adds	r1, #20
 80059b0:	428a      	cmp	r2, r1
 80059b2:	d048      	beq.n	8005a46 <DMA1_Channel5_IRQHandler+0x11a>
 80059b4:	3114      	adds	r1, #20
 80059b6:	428a      	cmp	r2, r1
 80059b8:	d04a      	beq.n	8005a50 <DMA1_Channel5_IRQHandler+0x124>
 80059ba:	3114      	adds	r1, #20
 80059bc:	428a      	cmp	r2, r1
 80059be:	d03c      	beq.n	8005a3a <DMA1_Channel5_IRQHandler+0x10e>
 80059c0:	3114      	adds	r1, #20
 80059c2:	428a      	cmp	r2, r1
 80059c4:	d04a      	beq.n	8005a5c <DMA1_Channel5_IRQHandler+0x130>
 80059c6:	3114      	adds	r1, #20
 80059c8:	428a      	cmp	r2, r1
 80059ca:	bf0c      	ite	eq
 80059cc:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 80059d0:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 80059d4:	e01a      	b.n	8005a0c <DMA1_Channel5_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80059d6:	2108      	movs	r1, #8
 80059d8:	4081      	lsls	r1, r0
 80059da:	4221      	tst	r1, r4
 80059dc:	d01f      	beq.n	8005a1e <DMA1_Channel5_IRQHandler+0xf2>
 80059de:	0729      	lsls	r1, r5, #28
 80059e0:	d51d      	bpl.n	8005a1e <DMA1_Channel5_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059e2:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 80059e4:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059e8:	f021 010e 	bic.w	r1, r1, #14
 80059ec:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80059ee:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 80059f0:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80059f4:	fa02 f000 	lsl.w	r0, r2, r0
 80059f8:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80059fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    __HAL_UNLOCK(hdma);
 80059fe:	f8a3 41f8 	strh.w	r4, [r3, #504]	; 0x1f8
    if (hdma->XferErrorCallback != NULL)
 8005a02:	b161      	cbz	r1, 8005a1e <DMA1_Channel5_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005a04:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005a06:	4819      	ldr	r0, [pc, #100]	; (8005a6c <DMA1_Channel5_IRQHandler+0x140>)
 8005a08:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005a0a:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8005a0c:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005a0e:	4c18      	ldr	r4, [pc, #96]	; (8005a70 <DMA1_Channel5_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8005a10:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005a14:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8005a16:	f883 01f8 	strb.w	r0, [r3, #504]	; 0x1f8
    if(hdma->XferCpltCallback != NULL)
 8005a1a:	2900      	cmp	r1, #0
 8005a1c:	d1f2      	bne.n	8005a04 <DMA1_Channel5_IRQHandler+0xd8>
 8005a1e:	bc70      	pop	{r4, r5, r6}
 8005a20:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005a22:	2204      	movs	r2, #4
 8005a24:	4912      	ldr	r1, [pc, #72]	; (8005a70 <DMA1_Channel5_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 8005a26:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005a2a:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0f6      	beq.n	8005a1e <DMA1_Channel5_IRQHandler+0xf2>
 8005a30:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 8005a32:	480e      	ldr	r0, [pc, #56]	; (8005a6c <DMA1_Channel5_IRQHandler+0x140>)
 8005a34:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005a36:	2240      	movs	r2, #64	; 0x40
 8005a38:	e7f4      	b.n	8005a24 <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005a3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a3e:	e7e5      	b.n	8005a0c <DMA1_Channel5_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005a40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005a44:	e7ee      	b.n	8005a24 <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005a46:	2220      	movs	r2, #32
 8005a48:	e7e0      	b.n	8005a0c <DMA1_Channel5_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a4e:	e7e9      	b.n	8005a24 <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a54:	e7da      	b.n	8005a0c <DMA1_Channel5_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005a56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a5a:	e7e3      	b.n	8005a24 <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005a5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a60:	e7d4      	b.n	8005a0c <DMA1_Channel5_IRQHandler+0xe0>
 8005a62:	bf00      	nop
 8005a64:	20000200 	.word	0x20000200
 8005a68:	40020008 	.word	0x40020008
 8005a6c:	200003d8 	.word	0x200003d8
 8005a70:	40020000 	.word	0x40020000

08005a74 <DMA1_Channel6_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005a74:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a76:	4b4d      	ldr	r3, [pc, #308]	; (8005bac <DMA1_Channel6_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005a78:	b470      	push	{r4, r5, r6}
 8005a7a:	f8d3 6148 	ldr.w	r6, [r3, #328]	; 0x148
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005a7e:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a82:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005a84:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005a88:	4081      	lsls	r1, r0
 8005a8a:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005a8c:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005a8e:	d01f      	beq.n	8005ad0 <DMA1_Channel6_IRQHandler+0x5c>
 8005a90:	0769      	lsls	r1, r5, #29
 8005a92:	d51d      	bpl.n	8005ad0 <DMA1_Channel6_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a94:	6811      	ldr	r1, [r2, #0]
 8005a96:	0688      	lsls	r0, r1, #26
 8005a98:	d403      	bmi.n	8005aa2 <DMA1_Channel6_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a9a:	6811      	ldr	r1, [r2, #0]
 8005a9c:	f021 0104 	bic.w	r1, r1, #4
 8005aa0:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005aa2:	4943      	ldr	r1, [pc, #268]	; (8005bb0 <DMA1_Channel6_IRQHandler+0x13c>)
 8005aa4:	428a      	cmp	r2, r1
 8005aa6:	d060      	beq.n	8005b6a <DMA1_Channel6_IRQHandler+0xf6>
 8005aa8:	3114      	adds	r1, #20
 8005aaa:	428a      	cmp	r2, r1
 8005aac:	d067      	beq.n	8005b7e <DMA1_Channel6_IRQHandler+0x10a>
 8005aae:	3114      	adds	r1, #20
 8005ab0:	428a      	cmp	r2, r1
 8005ab2:	d06e      	beq.n	8005b92 <DMA1_Channel6_IRQHandler+0x11e>
 8005ab4:	3114      	adds	r1, #20
 8005ab6:	428a      	cmp	r2, r1
 8005ab8:	d071      	beq.n	8005b9e <DMA1_Channel6_IRQHandler+0x12a>
 8005aba:	3114      	adds	r1, #20
 8005abc:	428a      	cmp	r2, r1
 8005abe:	d063      	beq.n	8005b88 <DMA1_Channel6_IRQHandler+0x114>
 8005ac0:	3114      	adds	r1, #20
 8005ac2:	428a      	cmp	r2, r1
 8005ac4:	bf0c      	ite	eq
 8005ac6:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8005aca:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8005ace:	e04d      	b.n	8005b6c <DMA1_Channel6_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005ad0:	2102      	movs	r1, #2
 8005ad2:	4081      	lsls	r1, r0
 8005ad4:	4221      	tst	r1, r4
 8005ad6:	d022      	beq.n	8005b1e <DMA1_Channel6_IRQHandler+0xaa>
 8005ad8:	07a9      	lsls	r1, r5, #30
 8005ada:	d520      	bpl.n	8005b1e <DMA1_Channel6_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005adc:	6811      	ldr	r1, [r2, #0]
 8005ade:	0688      	lsls	r0, r1, #26
 8005ae0:	d406      	bmi.n	8005af0 <DMA1_Channel6_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 8005ae2:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005ae4:	6811      	ldr	r1, [r2, #0]
 8005ae6:	f021 010a 	bic.w	r1, r1, #10
 8005aea:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005aec:	f883 012d 	strb.w	r0, [r3, #301]	; 0x12d
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005af0:	492f      	ldr	r1, [pc, #188]	; (8005bb0 <DMA1_Channel6_IRQHandler+0x13c>)
 8005af2:	428a      	cmp	r2, r1
 8005af4:	d02d      	beq.n	8005b52 <DMA1_Channel6_IRQHandler+0xde>
 8005af6:	3114      	adds	r1, #20
 8005af8:	428a      	cmp	r2, r1
 8005afa:	d048      	beq.n	8005b8e <DMA1_Channel6_IRQHandler+0x11a>
 8005afc:	3114      	adds	r1, #20
 8005afe:	428a      	cmp	r2, r1
 8005b00:	d04a      	beq.n	8005b98 <DMA1_Channel6_IRQHandler+0x124>
 8005b02:	3114      	adds	r1, #20
 8005b04:	428a      	cmp	r2, r1
 8005b06:	d03c      	beq.n	8005b82 <DMA1_Channel6_IRQHandler+0x10e>
 8005b08:	3114      	adds	r1, #20
 8005b0a:	428a      	cmp	r2, r1
 8005b0c:	d04a      	beq.n	8005ba4 <DMA1_Channel6_IRQHandler+0x130>
 8005b0e:	3114      	adds	r1, #20
 8005b10:	428a      	cmp	r2, r1
 8005b12:	bf0c      	ite	eq
 8005b14:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8005b18:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8005b1c:	e01a      	b.n	8005b54 <DMA1_Channel6_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005b1e:	2108      	movs	r1, #8
 8005b20:	4081      	lsls	r1, r0
 8005b22:	4221      	tst	r1, r4
 8005b24:	d01f      	beq.n	8005b66 <DMA1_Channel6_IRQHandler+0xf2>
 8005b26:	0729      	lsls	r1, r5, #28
 8005b28:	d51d      	bpl.n	8005b66 <DMA1_Channel6_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b2a:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 8005b2c:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b30:	f021 010e 	bic.w	r1, r1, #14
 8005b34:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005b36:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8005b38:	f8d3 113c 	ldr.w	r1, [r3, #316]	; 0x13c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005b3c:	fa02 f000 	lsl.w	r0, r2, r0
 8005b40:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b42:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    __HAL_UNLOCK(hdma);
 8005b46:	f8a3 412c 	strh.w	r4, [r3, #300]	; 0x12c
    if (hdma->XferErrorCallback != NULL)
 8005b4a:	b161      	cbz	r1, 8005b66 <DMA1_Channel6_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005b4c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005b4e:	4819      	ldr	r0, [pc, #100]	; (8005bb4 <DMA1_Channel6_IRQHandler+0x140>)
 8005b50:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005b52:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8005b54:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005b56:	4c18      	ldr	r4, [pc, #96]	; (8005bb8 <DMA1_Channel6_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8005b58:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005b5c:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8005b5e:	f883 012c 	strb.w	r0, [r3, #300]	; 0x12c
    if(hdma->XferCpltCallback != NULL)
 8005b62:	2900      	cmp	r1, #0
 8005b64:	d1f2      	bne.n	8005b4c <DMA1_Channel6_IRQHandler+0xd8>
 8005b66:	bc70      	pop	{r4, r5, r6}
 8005b68:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005b6a:	2204      	movs	r2, #4
 8005b6c:	4912      	ldr	r1, [pc, #72]	; (8005bb8 <DMA1_Channel6_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 8005b6e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005b72:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0f6      	beq.n	8005b66 <DMA1_Channel6_IRQHandler+0xf2>
 8005b78:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 8005b7a:	480e      	ldr	r0, [pc, #56]	; (8005bb4 <DMA1_Channel6_IRQHandler+0x140>)
 8005b7c:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005b7e:	2240      	movs	r2, #64	; 0x40
 8005b80:	e7f4      	b.n	8005b6c <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b86:	e7e5      	b.n	8005b54 <DMA1_Channel6_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005b88:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005b8c:	e7ee      	b.n	8005b6c <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005b8e:	2220      	movs	r2, #32
 8005b90:	e7e0      	b.n	8005b54 <DMA1_Channel6_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b96:	e7e9      	b.n	8005b6c <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b9c:	e7da      	b.n	8005b54 <DMA1_Channel6_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005b9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ba2:	e7e3      	b.n	8005b6c <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ba4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ba8:	e7d4      	b.n	8005b54 <DMA1_Channel6_IRQHandler+0xe0>
 8005baa:	bf00      	nop
 8005bac:	20000200 	.word	0x20000200
 8005bb0:	40020008 	.word	0x40020008
 8005bb4:	2000030c 	.word	0x2000030c
 8005bb8:	40020000 	.word	0x40020000

08005bbc <DMA1_Channel7_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005bbc:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005bbe:	4b4d      	ldr	r3, [pc, #308]	; (8005cf4 <DMA1_Channel7_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005bc0:	b470      	push	{r4, r5, r6}
 8005bc2:	f8d3 618c 	ldr.w	r6, [r3, #396]	; 0x18c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005bc6:	f8d3 0190 	ldr.w	r0, [r3, #400]	; 0x190
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005bca:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005bcc:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005bd0:	4081      	lsls	r1, r0
 8005bd2:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005bd4:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005bd6:	d01f      	beq.n	8005c18 <DMA1_Channel7_IRQHandler+0x5c>
 8005bd8:	0769      	lsls	r1, r5, #29
 8005bda:	d51d      	bpl.n	8005c18 <DMA1_Channel7_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bdc:	6811      	ldr	r1, [r2, #0]
 8005bde:	0688      	lsls	r0, r1, #26
 8005be0:	d403      	bmi.n	8005bea <DMA1_Channel7_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005be2:	6811      	ldr	r1, [r2, #0]
 8005be4:	f021 0104 	bic.w	r1, r1, #4
 8005be8:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005bea:	4943      	ldr	r1, [pc, #268]	; (8005cf8 <DMA1_Channel7_IRQHandler+0x13c>)
 8005bec:	428a      	cmp	r2, r1
 8005bee:	d060      	beq.n	8005cb2 <DMA1_Channel7_IRQHandler+0xf6>
 8005bf0:	3114      	adds	r1, #20
 8005bf2:	428a      	cmp	r2, r1
 8005bf4:	d067      	beq.n	8005cc6 <DMA1_Channel7_IRQHandler+0x10a>
 8005bf6:	3114      	adds	r1, #20
 8005bf8:	428a      	cmp	r2, r1
 8005bfa:	d06e      	beq.n	8005cda <DMA1_Channel7_IRQHandler+0x11e>
 8005bfc:	3114      	adds	r1, #20
 8005bfe:	428a      	cmp	r2, r1
 8005c00:	d071      	beq.n	8005ce6 <DMA1_Channel7_IRQHandler+0x12a>
 8005c02:	3114      	adds	r1, #20
 8005c04:	428a      	cmp	r2, r1
 8005c06:	d063      	beq.n	8005cd0 <DMA1_Channel7_IRQHandler+0x114>
 8005c08:	3114      	adds	r1, #20
 8005c0a:	428a      	cmp	r2, r1
 8005c0c:	bf0c      	ite	eq
 8005c0e:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8005c12:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8005c16:	e04d      	b.n	8005cb4 <DMA1_Channel7_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005c18:	2102      	movs	r1, #2
 8005c1a:	4081      	lsls	r1, r0
 8005c1c:	4221      	tst	r1, r4
 8005c1e:	d022      	beq.n	8005c66 <DMA1_Channel7_IRQHandler+0xaa>
 8005c20:	07a9      	lsls	r1, r5, #30
 8005c22:	d520      	bpl.n	8005c66 <DMA1_Channel7_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c24:	6811      	ldr	r1, [r2, #0]
 8005c26:	0688      	lsls	r0, r1, #26
 8005c28:	d406      	bmi.n	8005c38 <DMA1_Channel7_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 8005c2a:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005c2c:	6811      	ldr	r1, [r2, #0]
 8005c2e:	f021 010a 	bic.w	r1, r1, #10
 8005c32:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005c34:	f883 0171 	strb.w	r0, [r3, #369]	; 0x171
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005c38:	492f      	ldr	r1, [pc, #188]	; (8005cf8 <DMA1_Channel7_IRQHandler+0x13c>)
 8005c3a:	428a      	cmp	r2, r1
 8005c3c:	d02d      	beq.n	8005c9a <DMA1_Channel7_IRQHandler+0xde>
 8005c3e:	3114      	adds	r1, #20
 8005c40:	428a      	cmp	r2, r1
 8005c42:	d048      	beq.n	8005cd6 <DMA1_Channel7_IRQHandler+0x11a>
 8005c44:	3114      	adds	r1, #20
 8005c46:	428a      	cmp	r2, r1
 8005c48:	d04a      	beq.n	8005ce0 <DMA1_Channel7_IRQHandler+0x124>
 8005c4a:	3114      	adds	r1, #20
 8005c4c:	428a      	cmp	r2, r1
 8005c4e:	d03c      	beq.n	8005cca <DMA1_Channel7_IRQHandler+0x10e>
 8005c50:	3114      	adds	r1, #20
 8005c52:	428a      	cmp	r2, r1
 8005c54:	d04a      	beq.n	8005cec <DMA1_Channel7_IRQHandler+0x130>
 8005c56:	3114      	adds	r1, #20
 8005c58:	428a      	cmp	r2, r1
 8005c5a:	bf0c      	ite	eq
 8005c5c:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8005c60:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8005c64:	e01a      	b.n	8005c9c <DMA1_Channel7_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005c66:	2108      	movs	r1, #8
 8005c68:	4081      	lsls	r1, r0
 8005c6a:	4221      	tst	r1, r4
 8005c6c:	d01f      	beq.n	8005cae <DMA1_Channel7_IRQHandler+0xf2>
 8005c6e:	0729      	lsls	r1, r5, #28
 8005c70:	d51d      	bpl.n	8005cae <DMA1_Channel7_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c72:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 8005c74:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c78:	f021 010e 	bic.w	r1, r1, #14
 8005c7c:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005c7e:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8005c80:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005c84:	fa02 f000 	lsl.w	r0, r2, r0
 8005c88:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c8a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    __HAL_UNLOCK(hdma);
 8005c8e:	f8a3 4170 	strh.w	r4, [r3, #368]	; 0x170
    if (hdma->XferErrorCallback != NULL)
 8005c92:	b161      	cbz	r1, 8005cae <DMA1_Channel7_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005c94:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005c96:	4819      	ldr	r0, [pc, #100]	; (8005cfc <DMA1_Channel7_IRQHandler+0x140>)
 8005c98:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005c9a:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8005c9c:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005c9e:	4c18      	ldr	r4, [pc, #96]	; (8005d00 <DMA1_Channel7_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8005ca0:	f8d3 1178 	ldr.w	r1, [r3, #376]	; 0x178
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ca4:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8005ca6:	f883 0170 	strb.w	r0, [r3, #368]	; 0x170
    if(hdma->XferCpltCallback != NULL)
 8005caa:	2900      	cmp	r1, #0
 8005cac:	d1f2      	bne.n	8005c94 <DMA1_Channel7_IRQHandler+0xd8>
 8005cae:	bc70      	pop	{r4, r5, r6}
 8005cb0:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005cb2:	2204      	movs	r2, #4
 8005cb4:	4912      	ldr	r1, [pc, #72]	; (8005d00 <DMA1_Channel7_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 8005cb6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005cba:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0f6      	beq.n	8005cae <DMA1_Channel7_IRQHandler+0xf2>
 8005cc0:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 8005cc2:	480e      	ldr	r0, [pc, #56]	; (8005cfc <DMA1_Channel7_IRQHandler+0x140>)
 8005cc4:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005cc6:	2240      	movs	r2, #64	; 0x40
 8005cc8:	e7f4      	b.n	8005cb4 <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005cca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cce:	e7e5      	b.n	8005c9c <DMA1_Channel7_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005cd0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005cd4:	e7ee      	b.n	8005cb4 <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	e7e0      	b.n	8005c9c <DMA1_Channel7_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005cda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005cde:	e7e9      	b.n	8005cb4 <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ce4:	e7da      	b.n	8005c9c <DMA1_Channel7_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005ce6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005cea:	e7e3      	b.n	8005cb4 <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005cec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005cf0:	e7d4      	b.n	8005c9c <DMA1_Channel7_IRQHandler+0xe0>
 8005cf2:	bf00      	nop
 8005cf4:	20000200 	.word	0x20000200
 8005cf8:	40020008 	.word	0x40020008
 8005cfc:	20000350 	.word	0x20000350
 8005d00:	40020000 	.word	0x40020000

08005d04 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005d04:	2001      	movs	r0, #1
 8005d06:	4770      	bx	lr

08005d08 <_kill>:

int _kill(int pid, int sig)
{
 8005d08:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005d0a:	f002 ff0d 	bl	8008b28 <__errno>
 8005d0e:	2216      	movs	r2, #22
 8005d10:	4603      	mov	r3, r0
	return -1;
}
 8005d12:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8005d16:	601a      	str	r2, [r3, #0]
}
 8005d18:	bd08      	pop	{r3, pc}
 8005d1a:	bf00      	nop

08005d1c <_exit>:

void _exit (int status)
{
 8005d1c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005d1e:	f002 ff03 	bl	8008b28 <__errno>
 8005d22:	2316      	movs	r3, #22
 8005d24:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8005d26:	e7fe      	b.n	8005d26 <_exit+0xa>

08005d28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005d28:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d2a:	1e16      	subs	r6, r2, #0
 8005d2c:	dd07      	ble.n	8005d3e <_read+0x16>
 8005d2e:	460c      	mov	r4, r1
 8005d30:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8005d32:	f3af 8000 	nop.w
 8005d36:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d3a:	42a5      	cmp	r5, r4
 8005d3c:	d1f9      	bne.n	8005d32 <_read+0xa>
	}

return len;
}
 8005d3e:	4630      	mov	r0, r6
 8005d40:	bd70      	pop	{r4, r5, r6, pc}
 8005d42:	bf00      	nop

08005d44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005d44:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d46:	1e16      	subs	r6, r2, #0
 8005d48:	dd07      	ble.n	8005d5a <_write+0x16>
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8005d4e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005d52:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d56:	42ac      	cmp	r4, r5
 8005d58:	d1f9      	bne.n	8005d4e <_write+0xa>
	}
	return len;
}
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	bd70      	pop	{r4, r5, r6, pc}
 8005d5e:	bf00      	nop

08005d60 <_close>:

int _close(int file)
{
	return -1;
}
 8005d60:	f04f 30ff 	mov.w	r0, #4294967295
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop

08005d68 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8005d6c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8005d6e:	604b      	str	r3, [r1, #4]
}
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop

08005d74 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005d74:	2001      	movs	r0, #1
 8005d76:	4770      	bx	lr

08005d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005d78:	2000      	movs	r0, #0
 8005d7a:	4770      	bx	lr

08005d7c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005d7c:	490e      	ldr	r1, [pc, #56]	; (8005db8 <_sbrk+0x3c>)
{
 8005d7e:	4603      	mov	r3, r0
 8005d80:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005d82:	4a0e      	ldr	r2, [pc, #56]	; (8005dbc <_sbrk+0x40>)
 8005d84:	4c0e      	ldr	r4, [pc, #56]	; (8005dc0 <_sbrk+0x44>)
  if (NULL == __sbrk_heap_end)
 8005d86:	f8d1 076c 	ldr.w	r0, [r1, #1900]	; 0x76c
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005d8a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8005d8c:	b128      	cbz	r0, 8005d9a <_sbrk+0x1e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005d8e:	4403      	add	r3, r0
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d809      	bhi.n	8005da8 <_sbrk+0x2c>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8005d94:	f8c1 376c 	str.w	r3, [r1, #1900]	; 0x76c

  return (void *)prev_heap_end;
}
 8005d98:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8005d9a:	4c0a      	ldr	r4, [pc, #40]	; (8005dc4 <_sbrk+0x48>)
 8005d9c:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8005d9e:	4403      	add	r3, r0
 8005da0:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8005da2:	f8c1 476c 	str.w	r4, [r1, #1900]	; 0x76c
  if (__sbrk_heap_end + incr > max_heap)
 8005da6:	d9f5      	bls.n	8005d94 <_sbrk+0x18>
    errno = ENOMEM;
 8005da8:	f002 febe 	bl	8008b28 <__errno>
 8005dac:	220c      	movs	r2, #12
 8005dae:	4603      	mov	r3, r0
 8005db0:	f04f 30ff 	mov.w	r0, #4294967295
 8005db4:	601a      	str	r2, [r3, #0]
}
 8005db6:	bd10      	pop	{r4, pc}
 8005db8:	20000200 	.word	0x20000200
 8005dbc:	20005000 	.word	0x20005000
 8005dc0:	00000400 	.word	0x00000400
 8005dc4:	20000980 	.word	0x20000980

08005dc8 <SystemInit>:
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop

08005dcc <strlen>:
 8005dcc:	4603      	mov	r3, r0
 8005dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dd2:	2a00      	cmp	r2, #0
 8005dd4:	d1fb      	bne.n	8005dce <strlen+0x2>
 8005dd6:	1a18      	subs	r0, r3, r0
 8005dd8:	3801      	subs	r0, #1
 8005dda:	4770      	bx	lr

08005ddc <__aeabi_drsub>:
 8005ddc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005de0:	e002      	b.n	8005de8 <__adddf3>
 8005de2:	bf00      	nop

08005de4 <__aeabi_dsub>:
 8005de4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005de8 <__adddf3>:
 8005de8:	b530      	push	{r4, r5, lr}
 8005dea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005dee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005df2:	ea94 0f05 	teq	r4, r5
 8005df6:	bf08      	it	eq
 8005df8:	ea90 0f02 	teqeq	r0, r2
 8005dfc:	bf1f      	itttt	ne
 8005dfe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005e02:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005e06:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005e0a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005e0e:	f000 80e2 	beq.w	8005fd6 <__adddf3+0x1ee>
 8005e12:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005e16:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005e1a:	bfb8      	it	lt
 8005e1c:	426d      	neglt	r5, r5
 8005e1e:	dd0c      	ble.n	8005e3a <__adddf3+0x52>
 8005e20:	442c      	add	r4, r5
 8005e22:	ea80 0202 	eor.w	r2, r0, r2
 8005e26:	ea81 0303 	eor.w	r3, r1, r3
 8005e2a:	ea82 0000 	eor.w	r0, r2, r0
 8005e2e:	ea83 0101 	eor.w	r1, r3, r1
 8005e32:	ea80 0202 	eor.w	r2, r0, r2
 8005e36:	ea81 0303 	eor.w	r3, r1, r3
 8005e3a:	2d36      	cmp	r5, #54	; 0x36
 8005e3c:	bf88      	it	hi
 8005e3e:	bd30      	pophi	{r4, r5, pc}
 8005e40:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005e44:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005e48:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8005e4c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005e50:	d002      	beq.n	8005e58 <__adddf3+0x70>
 8005e52:	4240      	negs	r0, r0
 8005e54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005e58:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8005e5c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005e60:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005e64:	d002      	beq.n	8005e6c <__adddf3+0x84>
 8005e66:	4252      	negs	r2, r2
 8005e68:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005e6c:	ea94 0f05 	teq	r4, r5
 8005e70:	f000 80a7 	beq.w	8005fc2 <__adddf3+0x1da>
 8005e74:	f1a4 0401 	sub.w	r4, r4, #1
 8005e78:	f1d5 0e20 	rsbs	lr, r5, #32
 8005e7c:	db0d      	blt.n	8005e9a <__adddf3+0xb2>
 8005e7e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005e82:	fa22 f205 	lsr.w	r2, r2, r5
 8005e86:	1880      	adds	r0, r0, r2
 8005e88:	f141 0100 	adc.w	r1, r1, #0
 8005e8c:	fa03 f20e 	lsl.w	r2, r3, lr
 8005e90:	1880      	adds	r0, r0, r2
 8005e92:	fa43 f305 	asr.w	r3, r3, r5
 8005e96:	4159      	adcs	r1, r3
 8005e98:	e00e      	b.n	8005eb8 <__adddf3+0xd0>
 8005e9a:	f1a5 0520 	sub.w	r5, r5, #32
 8005e9e:	f10e 0e20 	add.w	lr, lr, #32
 8005ea2:	2a01      	cmp	r2, #1
 8005ea4:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005ea8:	bf28      	it	cs
 8005eaa:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005eae:	fa43 f305 	asr.w	r3, r3, r5
 8005eb2:	18c0      	adds	r0, r0, r3
 8005eb4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005eb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005ebc:	d507      	bpl.n	8005ece <__adddf3+0xe6>
 8005ebe:	f04f 0e00 	mov.w	lr, #0
 8005ec2:	f1dc 0c00 	rsbs	ip, ip, #0
 8005ec6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005eca:	eb6e 0101 	sbc.w	r1, lr, r1
 8005ece:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005ed2:	d31b      	bcc.n	8005f0c <__adddf3+0x124>
 8005ed4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005ed8:	d30c      	bcc.n	8005ef4 <__adddf3+0x10c>
 8005eda:	0849      	lsrs	r1, r1, #1
 8005edc:	ea5f 0030 	movs.w	r0, r0, rrx
 8005ee0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005ee4:	f104 0401 	add.w	r4, r4, #1
 8005ee8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005eec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005ef0:	f080 809a 	bcs.w	8006028 <__adddf3+0x240>
 8005ef4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005ef8:	bf08      	it	eq
 8005efa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005efe:	f150 0000 	adcs.w	r0, r0, #0
 8005f02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005f06:	ea41 0105 	orr.w	r1, r1, r5
 8005f0a:	bd30      	pop	{r4, r5, pc}
 8005f0c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005f10:	4140      	adcs	r0, r0
 8005f12:	eb41 0101 	adc.w	r1, r1, r1
 8005f16:	3c01      	subs	r4, #1
 8005f18:	bf28      	it	cs
 8005f1a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8005f1e:	d2e9      	bcs.n	8005ef4 <__adddf3+0x10c>
 8005f20:	f091 0f00 	teq	r1, #0
 8005f24:	bf04      	itt	eq
 8005f26:	4601      	moveq	r1, r0
 8005f28:	2000      	moveq	r0, #0
 8005f2a:	fab1 f381 	clz	r3, r1
 8005f2e:	bf08      	it	eq
 8005f30:	3320      	addeq	r3, #32
 8005f32:	f1a3 030b 	sub.w	r3, r3, #11
 8005f36:	f1b3 0220 	subs.w	r2, r3, #32
 8005f3a:	da0c      	bge.n	8005f56 <__adddf3+0x16e>
 8005f3c:	320c      	adds	r2, #12
 8005f3e:	dd08      	ble.n	8005f52 <__adddf3+0x16a>
 8005f40:	f102 0c14 	add.w	ip, r2, #20
 8005f44:	f1c2 020c 	rsb	r2, r2, #12
 8005f48:	fa01 f00c 	lsl.w	r0, r1, ip
 8005f4c:	fa21 f102 	lsr.w	r1, r1, r2
 8005f50:	e00c      	b.n	8005f6c <__adddf3+0x184>
 8005f52:	f102 0214 	add.w	r2, r2, #20
 8005f56:	bfd8      	it	le
 8005f58:	f1c2 0c20 	rsble	ip, r2, #32
 8005f5c:	fa01 f102 	lsl.w	r1, r1, r2
 8005f60:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005f64:	bfdc      	itt	le
 8005f66:	ea41 010c 	orrle.w	r1, r1, ip
 8005f6a:	4090      	lslle	r0, r2
 8005f6c:	1ae4      	subs	r4, r4, r3
 8005f6e:	bfa2      	ittt	ge
 8005f70:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005f74:	4329      	orrge	r1, r5
 8005f76:	bd30      	popge	{r4, r5, pc}
 8005f78:	ea6f 0404 	mvn.w	r4, r4
 8005f7c:	3c1f      	subs	r4, #31
 8005f7e:	da1c      	bge.n	8005fba <__adddf3+0x1d2>
 8005f80:	340c      	adds	r4, #12
 8005f82:	dc0e      	bgt.n	8005fa2 <__adddf3+0x1ba>
 8005f84:	f104 0414 	add.w	r4, r4, #20
 8005f88:	f1c4 0220 	rsb	r2, r4, #32
 8005f8c:	fa20 f004 	lsr.w	r0, r0, r4
 8005f90:	fa01 f302 	lsl.w	r3, r1, r2
 8005f94:	ea40 0003 	orr.w	r0, r0, r3
 8005f98:	fa21 f304 	lsr.w	r3, r1, r4
 8005f9c:	ea45 0103 	orr.w	r1, r5, r3
 8005fa0:	bd30      	pop	{r4, r5, pc}
 8005fa2:	f1c4 040c 	rsb	r4, r4, #12
 8005fa6:	f1c4 0220 	rsb	r2, r4, #32
 8005faa:	fa20 f002 	lsr.w	r0, r0, r2
 8005fae:	fa01 f304 	lsl.w	r3, r1, r4
 8005fb2:	ea40 0003 	orr.w	r0, r0, r3
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	bd30      	pop	{r4, r5, pc}
 8005fba:	fa21 f004 	lsr.w	r0, r1, r4
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	bd30      	pop	{r4, r5, pc}
 8005fc2:	f094 0f00 	teq	r4, #0
 8005fc6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005fca:	bf06      	itte	eq
 8005fcc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005fd0:	3401      	addeq	r4, #1
 8005fd2:	3d01      	subne	r5, #1
 8005fd4:	e74e      	b.n	8005e74 <__adddf3+0x8c>
 8005fd6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005fda:	bf18      	it	ne
 8005fdc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005fe0:	d029      	beq.n	8006036 <__adddf3+0x24e>
 8005fe2:	ea94 0f05 	teq	r4, r5
 8005fe6:	bf08      	it	eq
 8005fe8:	ea90 0f02 	teqeq	r0, r2
 8005fec:	d005      	beq.n	8005ffa <__adddf3+0x212>
 8005fee:	ea54 0c00 	orrs.w	ip, r4, r0
 8005ff2:	bf04      	itt	eq
 8005ff4:	4619      	moveq	r1, r3
 8005ff6:	4610      	moveq	r0, r2
 8005ff8:	bd30      	pop	{r4, r5, pc}
 8005ffa:	ea91 0f03 	teq	r1, r3
 8005ffe:	bf1e      	ittt	ne
 8006000:	2100      	movne	r1, #0
 8006002:	2000      	movne	r0, #0
 8006004:	bd30      	popne	{r4, r5, pc}
 8006006:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800600a:	d105      	bne.n	8006018 <__adddf3+0x230>
 800600c:	0040      	lsls	r0, r0, #1
 800600e:	4149      	adcs	r1, r1
 8006010:	bf28      	it	cs
 8006012:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006016:	bd30      	pop	{r4, r5, pc}
 8006018:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800601c:	bf3c      	itt	cc
 800601e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006022:	bd30      	popcc	{r4, r5, pc}
 8006024:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006028:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800602c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006030:	f04f 0000 	mov.w	r0, #0
 8006034:	bd30      	pop	{r4, r5, pc}
 8006036:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800603a:	bf1a      	itte	ne
 800603c:	4619      	movne	r1, r3
 800603e:	4610      	movne	r0, r2
 8006040:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006044:	bf1c      	itt	ne
 8006046:	460b      	movne	r3, r1
 8006048:	4602      	movne	r2, r0
 800604a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800604e:	bf06      	itte	eq
 8006050:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006054:	ea91 0f03 	teqeq	r1, r3
 8006058:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800605c:	bd30      	pop	{r4, r5, pc}
 800605e:	bf00      	nop

08006060 <__aeabi_ui2d>:
 8006060:	f090 0f00 	teq	r0, #0
 8006064:	bf04      	itt	eq
 8006066:	2100      	moveq	r1, #0
 8006068:	4770      	bxeq	lr
 800606a:	b530      	push	{r4, r5, lr}
 800606c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006070:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006074:	f04f 0500 	mov.w	r5, #0
 8006078:	f04f 0100 	mov.w	r1, #0
 800607c:	e750      	b.n	8005f20 <__adddf3+0x138>
 800607e:	bf00      	nop

08006080 <__aeabi_i2d>:
 8006080:	f090 0f00 	teq	r0, #0
 8006084:	bf04      	itt	eq
 8006086:	2100      	moveq	r1, #0
 8006088:	4770      	bxeq	lr
 800608a:	b530      	push	{r4, r5, lr}
 800608c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006090:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006094:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006098:	bf48      	it	mi
 800609a:	4240      	negmi	r0, r0
 800609c:	f04f 0100 	mov.w	r1, #0
 80060a0:	e73e      	b.n	8005f20 <__adddf3+0x138>
 80060a2:	bf00      	nop

080060a4 <__aeabi_f2d>:
 80060a4:	0042      	lsls	r2, r0, #1
 80060a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80060aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80060ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80060b2:	bf1f      	itttt	ne
 80060b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80060b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80060bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80060c0:	4770      	bxne	lr
 80060c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80060c6:	bf08      	it	eq
 80060c8:	4770      	bxeq	lr
 80060ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80060ce:	bf04      	itt	eq
 80060d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80060d4:	4770      	bxeq	lr
 80060d6:	b530      	push	{r4, r5, lr}
 80060d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80060dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80060e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80060e4:	e71c      	b.n	8005f20 <__adddf3+0x138>
 80060e6:	bf00      	nop

080060e8 <__aeabi_ul2d>:
 80060e8:	ea50 0201 	orrs.w	r2, r0, r1
 80060ec:	bf08      	it	eq
 80060ee:	4770      	bxeq	lr
 80060f0:	b530      	push	{r4, r5, lr}
 80060f2:	f04f 0500 	mov.w	r5, #0
 80060f6:	e00a      	b.n	800610e <__aeabi_l2d+0x16>

080060f8 <__aeabi_l2d>:
 80060f8:	ea50 0201 	orrs.w	r2, r0, r1
 80060fc:	bf08      	it	eq
 80060fe:	4770      	bxeq	lr
 8006100:	b530      	push	{r4, r5, lr}
 8006102:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006106:	d502      	bpl.n	800610e <__aeabi_l2d+0x16>
 8006108:	4240      	negs	r0, r0
 800610a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800610e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006112:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006116:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800611a:	f43f aed8 	beq.w	8005ece <__adddf3+0xe6>
 800611e:	f04f 0203 	mov.w	r2, #3
 8006122:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006126:	bf18      	it	ne
 8006128:	3203      	addne	r2, #3
 800612a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800612e:	bf18      	it	ne
 8006130:	3203      	addne	r2, #3
 8006132:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006136:	f1c2 0320 	rsb	r3, r2, #32
 800613a:	fa00 fc03 	lsl.w	ip, r0, r3
 800613e:	fa20 f002 	lsr.w	r0, r0, r2
 8006142:	fa01 fe03 	lsl.w	lr, r1, r3
 8006146:	ea40 000e 	orr.w	r0, r0, lr
 800614a:	fa21 f102 	lsr.w	r1, r1, r2
 800614e:	4414      	add	r4, r2
 8006150:	e6bd      	b.n	8005ece <__adddf3+0xe6>
 8006152:	bf00      	nop

08006154 <__aeabi_dmul>:
 8006154:	b570      	push	{r4, r5, r6, lr}
 8006156:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800615a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800615e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006162:	bf1d      	ittte	ne
 8006164:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006168:	ea94 0f0c 	teqne	r4, ip
 800616c:	ea95 0f0c 	teqne	r5, ip
 8006170:	f000 f8de 	bleq	8006330 <__aeabi_dmul+0x1dc>
 8006174:	442c      	add	r4, r5
 8006176:	ea81 0603 	eor.w	r6, r1, r3
 800617a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800617e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006182:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006186:	bf18      	it	ne
 8006188:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800618c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006190:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006194:	d038      	beq.n	8006208 <__aeabi_dmul+0xb4>
 8006196:	fba0 ce02 	umull	ip, lr, r0, r2
 800619a:	f04f 0500 	mov.w	r5, #0
 800619e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80061a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80061a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80061aa:	f04f 0600 	mov.w	r6, #0
 80061ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80061b2:	f09c 0f00 	teq	ip, #0
 80061b6:	bf18      	it	ne
 80061b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80061bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80061c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80061c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80061c8:	d204      	bcs.n	80061d4 <__aeabi_dmul+0x80>
 80061ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80061ce:	416d      	adcs	r5, r5
 80061d0:	eb46 0606 	adc.w	r6, r6, r6
 80061d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80061d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80061dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80061e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80061e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80061e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80061ec:	bf88      	it	hi
 80061ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80061f2:	d81e      	bhi.n	8006232 <__aeabi_dmul+0xde>
 80061f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80061f8:	bf08      	it	eq
 80061fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80061fe:	f150 0000 	adcs.w	r0, r0, #0
 8006202:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006206:	bd70      	pop	{r4, r5, r6, pc}
 8006208:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800620c:	ea46 0101 	orr.w	r1, r6, r1
 8006210:	ea40 0002 	orr.w	r0, r0, r2
 8006214:	ea81 0103 	eor.w	r1, r1, r3
 8006218:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800621c:	bfc2      	ittt	gt
 800621e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006222:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006226:	bd70      	popgt	{r4, r5, r6, pc}
 8006228:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800622c:	f04f 0e00 	mov.w	lr, #0
 8006230:	3c01      	subs	r4, #1
 8006232:	f300 80ab 	bgt.w	800638c <__aeabi_dmul+0x238>
 8006236:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800623a:	bfde      	ittt	le
 800623c:	2000      	movle	r0, #0
 800623e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8006242:	bd70      	pople	{r4, r5, r6, pc}
 8006244:	f1c4 0400 	rsb	r4, r4, #0
 8006248:	3c20      	subs	r4, #32
 800624a:	da35      	bge.n	80062b8 <__aeabi_dmul+0x164>
 800624c:	340c      	adds	r4, #12
 800624e:	dc1b      	bgt.n	8006288 <__aeabi_dmul+0x134>
 8006250:	f104 0414 	add.w	r4, r4, #20
 8006254:	f1c4 0520 	rsb	r5, r4, #32
 8006258:	fa00 f305 	lsl.w	r3, r0, r5
 800625c:	fa20 f004 	lsr.w	r0, r0, r4
 8006260:	fa01 f205 	lsl.w	r2, r1, r5
 8006264:	ea40 0002 	orr.w	r0, r0, r2
 8006268:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800626c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006270:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006274:	fa21 f604 	lsr.w	r6, r1, r4
 8006278:	eb42 0106 	adc.w	r1, r2, r6
 800627c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006280:	bf08      	it	eq
 8006282:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006286:	bd70      	pop	{r4, r5, r6, pc}
 8006288:	f1c4 040c 	rsb	r4, r4, #12
 800628c:	f1c4 0520 	rsb	r5, r4, #32
 8006290:	fa00 f304 	lsl.w	r3, r0, r4
 8006294:	fa20 f005 	lsr.w	r0, r0, r5
 8006298:	fa01 f204 	lsl.w	r2, r1, r4
 800629c:	ea40 0002 	orr.w	r0, r0, r2
 80062a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80062a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80062a8:	f141 0100 	adc.w	r1, r1, #0
 80062ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80062b0:	bf08      	it	eq
 80062b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
 80062b8:	f1c4 0520 	rsb	r5, r4, #32
 80062bc:	fa00 f205 	lsl.w	r2, r0, r5
 80062c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80062c4:	fa20 f304 	lsr.w	r3, r0, r4
 80062c8:	fa01 f205 	lsl.w	r2, r1, r5
 80062cc:	ea43 0302 	orr.w	r3, r3, r2
 80062d0:	fa21 f004 	lsr.w	r0, r1, r4
 80062d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80062d8:	fa21 f204 	lsr.w	r2, r1, r4
 80062dc:	ea20 0002 	bic.w	r0, r0, r2
 80062e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80062e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80062e8:	bf08      	it	eq
 80062ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80062ee:	bd70      	pop	{r4, r5, r6, pc}
 80062f0:	f094 0f00 	teq	r4, #0
 80062f4:	d10f      	bne.n	8006316 <__aeabi_dmul+0x1c2>
 80062f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80062fa:	0040      	lsls	r0, r0, #1
 80062fc:	eb41 0101 	adc.w	r1, r1, r1
 8006300:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006304:	bf08      	it	eq
 8006306:	3c01      	subeq	r4, #1
 8006308:	d0f7      	beq.n	80062fa <__aeabi_dmul+0x1a6>
 800630a:	ea41 0106 	orr.w	r1, r1, r6
 800630e:	f095 0f00 	teq	r5, #0
 8006312:	bf18      	it	ne
 8006314:	4770      	bxne	lr
 8006316:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800631a:	0052      	lsls	r2, r2, #1
 800631c:	eb43 0303 	adc.w	r3, r3, r3
 8006320:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006324:	bf08      	it	eq
 8006326:	3d01      	subeq	r5, #1
 8006328:	d0f7      	beq.n	800631a <__aeabi_dmul+0x1c6>
 800632a:	ea43 0306 	orr.w	r3, r3, r6
 800632e:	4770      	bx	lr
 8006330:	ea94 0f0c 	teq	r4, ip
 8006334:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006338:	bf18      	it	ne
 800633a:	ea95 0f0c 	teqne	r5, ip
 800633e:	d00c      	beq.n	800635a <__aeabi_dmul+0x206>
 8006340:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006344:	bf18      	it	ne
 8006346:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800634a:	d1d1      	bne.n	80062f0 <__aeabi_dmul+0x19c>
 800634c:	ea81 0103 	eor.w	r1, r1, r3
 8006350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006354:	f04f 0000 	mov.w	r0, #0
 8006358:	bd70      	pop	{r4, r5, r6, pc}
 800635a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800635e:	bf06      	itte	eq
 8006360:	4610      	moveq	r0, r2
 8006362:	4619      	moveq	r1, r3
 8006364:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006368:	d019      	beq.n	800639e <__aeabi_dmul+0x24a>
 800636a:	ea94 0f0c 	teq	r4, ip
 800636e:	d102      	bne.n	8006376 <__aeabi_dmul+0x222>
 8006370:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006374:	d113      	bne.n	800639e <__aeabi_dmul+0x24a>
 8006376:	ea95 0f0c 	teq	r5, ip
 800637a:	d105      	bne.n	8006388 <__aeabi_dmul+0x234>
 800637c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006380:	bf1c      	itt	ne
 8006382:	4610      	movne	r0, r2
 8006384:	4619      	movne	r1, r3
 8006386:	d10a      	bne.n	800639e <__aeabi_dmul+0x24a>
 8006388:	ea81 0103 	eor.w	r1, r1, r3
 800638c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006390:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006394:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006398:	f04f 0000 	mov.w	r0, #0
 800639c:	bd70      	pop	{r4, r5, r6, pc}
 800639e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80063a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80063a6:	bd70      	pop	{r4, r5, r6, pc}

080063a8 <__aeabi_ddiv>:
 80063a8:	b570      	push	{r4, r5, r6, lr}
 80063aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80063ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80063b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80063b6:	bf1d      	ittte	ne
 80063b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80063bc:	ea94 0f0c 	teqne	r4, ip
 80063c0:	ea95 0f0c 	teqne	r5, ip
 80063c4:	f000 f8a7 	bleq	8006516 <__aeabi_ddiv+0x16e>
 80063c8:	eba4 0405 	sub.w	r4, r4, r5
 80063cc:	ea81 0e03 	eor.w	lr, r1, r3
 80063d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80063d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80063d8:	f000 8088 	beq.w	80064ec <__aeabi_ddiv+0x144>
 80063dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80063e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80063e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80063e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80063ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80063f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80063f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80063f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80063fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006400:	429d      	cmp	r5, r3
 8006402:	bf08      	it	eq
 8006404:	4296      	cmpeq	r6, r2
 8006406:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800640a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800640e:	d202      	bcs.n	8006416 <__aeabi_ddiv+0x6e>
 8006410:	085b      	lsrs	r3, r3, #1
 8006412:	ea4f 0232 	mov.w	r2, r2, rrx
 8006416:	1ab6      	subs	r6, r6, r2
 8006418:	eb65 0503 	sbc.w	r5, r5, r3
 800641c:	085b      	lsrs	r3, r3, #1
 800641e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006422:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006426:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800642a:	ebb6 0e02 	subs.w	lr, r6, r2
 800642e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006432:	bf22      	ittt	cs
 8006434:	1ab6      	subcs	r6, r6, r2
 8006436:	4675      	movcs	r5, lr
 8006438:	ea40 000c 	orrcs.w	r0, r0, ip
 800643c:	085b      	lsrs	r3, r3, #1
 800643e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006442:	ebb6 0e02 	subs.w	lr, r6, r2
 8006446:	eb75 0e03 	sbcs.w	lr, r5, r3
 800644a:	bf22      	ittt	cs
 800644c:	1ab6      	subcs	r6, r6, r2
 800644e:	4675      	movcs	r5, lr
 8006450:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006454:	085b      	lsrs	r3, r3, #1
 8006456:	ea4f 0232 	mov.w	r2, r2, rrx
 800645a:	ebb6 0e02 	subs.w	lr, r6, r2
 800645e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006462:	bf22      	ittt	cs
 8006464:	1ab6      	subcs	r6, r6, r2
 8006466:	4675      	movcs	r5, lr
 8006468:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800646c:	085b      	lsrs	r3, r3, #1
 800646e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006472:	ebb6 0e02 	subs.w	lr, r6, r2
 8006476:	eb75 0e03 	sbcs.w	lr, r5, r3
 800647a:	bf22      	ittt	cs
 800647c:	1ab6      	subcs	r6, r6, r2
 800647e:	4675      	movcs	r5, lr
 8006480:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006484:	ea55 0e06 	orrs.w	lr, r5, r6
 8006488:	d018      	beq.n	80064bc <__aeabi_ddiv+0x114>
 800648a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800648e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006492:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006496:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800649a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800649e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80064a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80064a6:	d1c0      	bne.n	800642a <__aeabi_ddiv+0x82>
 80064a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80064ac:	d10b      	bne.n	80064c6 <__aeabi_ddiv+0x11e>
 80064ae:	ea41 0100 	orr.w	r1, r1, r0
 80064b2:	f04f 0000 	mov.w	r0, #0
 80064b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80064ba:	e7b6      	b.n	800642a <__aeabi_ddiv+0x82>
 80064bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80064c0:	bf04      	itt	eq
 80064c2:	4301      	orreq	r1, r0
 80064c4:	2000      	moveq	r0, #0
 80064c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80064ca:	bf88      	it	hi
 80064cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80064d0:	f63f aeaf 	bhi.w	8006232 <__aeabi_dmul+0xde>
 80064d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80064d8:	bf04      	itt	eq
 80064da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80064de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80064e2:	f150 0000 	adcs.w	r0, r0, #0
 80064e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80064ea:	bd70      	pop	{r4, r5, r6, pc}
 80064ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80064f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80064f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80064f8:	bfc2      	ittt	gt
 80064fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80064fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006502:	bd70      	popgt	{r4, r5, r6, pc}
 8006504:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006508:	f04f 0e00 	mov.w	lr, #0
 800650c:	3c01      	subs	r4, #1
 800650e:	e690      	b.n	8006232 <__aeabi_dmul+0xde>
 8006510:	ea45 0e06 	orr.w	lr, r5, r6
 8006514:	e68d      	b.n	8006232 <__aeabi_dmul+0xde>
 8006516:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800651a:	ea94 0f0c 	teq	r4, ip
 800651e:	bf08      	it	eq
 8006520:	ea95 0f0c 	teqeq	r5, ip
 8006524:	f43f af3b 	beq.w	800639e <__aeabi_dmul+0x24a>
 8006528:	ea94 0f0c 	teq	r4, ip
 800652c:	d10a      	bne.n	8006544 <__aeabi_ddiv+0x19c>
 800652e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006532:	f47f af34 	bne.w	800639e <__aeabi_dmul+0x24a>
 8006536:	ea95 0f0c 	teq	r5, ip
 800653a:	f47f af25 	bne.w	8006388 <__aeabi_dmul+0x234>
 800653e:	4610      	mov	r0, r2
 8006540:	4619      	mov	r1, r3
 8006542:	e72c      	b.n	800639e <__aeabi_dmul+0x24a>
 8006544:	ea95 0f0c 	teq	r5, ip
 8006548:	d106      	bne.n	8006558 <__aeabi_ddiv+0x1b0>
 800654a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800654e:	f43f aefd 	beq.w	800634c <__aeabi_dmul+0x1f8>
 8006552:	4610      	mov	r0, r2
 8006554:	4619      	mov	r1, r3
 8006556:	e722      	b.n	800639e <__aeabi_dmul+0x24a>
 8006558:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800655c:	bf18      	it	ne
 800655e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006562:	f47f aec5 	bne.w	80062f0 <__aeabi_dmul+0x19c>
 8006566:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800656a:	f47f af0d 	bne.w	8006388 <__aeabi_dmul+0x234>
 800656e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006572:	f47f aeeb 	bne.w	800634c <__aeabi_dmul+0x1f8>
 8006576:	e712      	b.n	800639e <__aeabi_dmul+0x24a>

08006578 <__gedf2>:
 8006578:	f04f 3cff 	mov.w	ip, #4294967295
 800657c:	e006      	b.n	800658c <__cmpdf2+0x4>
 800657e:	bf00      	nop

08006580 <__ledf2>:
 8006580:	f04f 0c01 	mov.w	ip, #1
 8006584:	e002      	b.n	800658c <__cmpdf2+0x4>
 8006586:	bf00      	nop

08006588 <__cmpdf2>:
 8006588:	f04f 0c01 	mov.w	ip, #1
 800658c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006590:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006594:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006598:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800659c:	bf18      	it	ne
 800659e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80065a2:	d01b      	beq.n	80065dc <__cmpdf2+0x54>
 80065a4:	b001      	add	sp, #4
 80065a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80065aa:	bf0c      	ite	eq
 80065ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80065b0:	ea91 0f03 	teqne	r1, r3
 80065b4:	bf02      	ittt	eq
 80065b6:	ea90 0f02 	teqeq	r0, r2
 80065ba:	2000      	moveq	r0, #0
 80065bc:	4770      	bxeq	lr
 80065be:	f110 0f00 	cmn.w	r0, #0
 80065c2:	ea91 0f03 	teq	r1, r3
 80065c6:	bf58      	it	pl
 80065c8:	4299      	cmppl	r1, r3
 80065ca:	bf08      	it	eq
 80065cc:	4290      	cmpeq	r0, r2
 80065ce:	bf2c      	ite	cs
 80065d0:	17d8      	asrcs	r0, r3, #31
 80065d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80065d6:	f040 0001 	orr.w	r0, r0, #1
 80065da:	4770      	bx	lr
 80065dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80065e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80065e4:	d102      	bne.n	80065ec <__cmpdf2+0x64>
 80065e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80065ea:	d107      	bne.n	80065fc <__cmpdf2+0x74>
 80065ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80065f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80065f4:	d1d6      	bne.n	80065a4 <__cmpdf2+0x1c>
 80065f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80065fa:	d0d3      	beq.n	80065a4 <__cmpdf2+0x1c>
 80065fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop

08006604 <__aeabi_cdrcmple>:
 8006604:	4684      	mov	ip, r0
 8006606:	4610      	mov	r0, r2
 8006608:	4662      	mov	r2, ip
 800660a:	468c      	mov	ip, r1
 800660c:	4619      	mov	r1, r3
 800660e:	4663      	mov	r3, ip
 8006610:	e000      	b.n	8006614 <__aeabi_cdcmpeq>
 8006612:	bf00      	nop

08006614 <__aeabi_cdcmpeq>:
 8006614:	b501      	push	{r0, lr}
 8006616:	f7ff ffb7 	bl	8006588 <__cmpdf2>
 800661a:	2800      	cmp	r0, #0
 800661c:	bf48      	it	mi
 800661e:	f110 0f00 	cmnmi.w	r0, #0
 8006622:	bd01      	pop	{r0, pc}

08006624 <__aeabi_dcmpeq>:
 8006624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006628:	f7ff fff4 	bl	8006614 <__aeabi_cdcmpeq>
 800662c:	bf0c      	ite	eq
 800662e:	2001      	moveq	r0, #1
 8006630:	2000      	movne	r0, #0
 8006632:	f85d fb08 	ldr.w	pc, [sp], #8
 8006636:	bf00      	nop

08006638 <__aeabi_dcmplt>:
 8006638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800663c:	f7ff ffea 	bl	8006614 <__aeabi_cdcmpeq>
 8006640:	bf34      	ite	cc
 8006642:	2001      	movcc	r0, #1
 8006644:	2000      	movcs	r0, #0
 8006646:	f85d fb08 	ldr.w	pc, [sp], #8
 800664a:	bf00      	nop

0800664c <__aeabi_dcmple>:
 800664c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006650:	f7ff ffe0 	bl	8006614 <__aeabi_cdcmpeq>
 8006654:	bf94      	ite	ls
 8006656:	2001      	movls	r0, #1
 8006658:	2000      	movhi	r0, #0
 800665a:	f85d fb08 	ldr.w	pc, [sp], #8
 800665e:	bf00      	nop

08006660 <__aeabi_dcmpge>:
 8006660:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006664:	f7ff ffce 	bl	8006604 <__aeabi_cdrcmple>
 8006668:	bf94      	ite	ls
 800666a:	2001      	movls	r0, #1
 800666c:	2000      	movhi	r0, #0
 800666e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006672:	bf00      	nop

08006674 <__aeabi_dcmpgt>:
 8006674:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006678:	f7ff ffc4 	bl	8006604 <__aeabi_cdrcmple>
 800667c:	bf34      	ite	cc
 800667e:	2001      	movcc	r0, #1
 8006680:	2000      	movcs	r0, #0
 8006682:	f85d fb08 	ldr.w	pc, [sp], #8
 8006686:	bf00      	nop

08006688 <__aeabi_dcmpun>:
 8006688:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800668c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006690:	d102      	bne.n	8006698 <__aeabi_dcmpun+0x10>
 8006692:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006696:	d10a      	bne.n	80066ae <__aeabi_dcmpun+0x26>
 8006698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800669c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80066a0:	d102      	bne.n	80066a8 <__aeabi_dcmpun+0x20>
 80066a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80066a6:	d102      	bne.n	80066ae <__aeabi_dcmpun+0x26>
 80066a8:	f04f 0000 	mov.w	r0, #0
 80066ac:	4770      	bx	lr
 80066ae:	f04f 0001 	mov.w	r0, #1
 80066b2:	4770      	bx	lr

080066b4 <__aeabi_d2iz>:
 80066b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80066b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80066bc:	d215      	bcs.n	80066ea <__aeabi_d2iz+0x36>
 80066be:	d511      	bpl.n	80066e4 <__aeabi_d2iz+0x30>
 80066c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80066c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80066c8:	d912      	bls.n	80066f0 <__aeabi_d2iz+0x3c>
 80066ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80066ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80066d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80066da:	fa23 f002 	lsr.w	r0, r3, r2
 80066de:	bf18      	it	ne
 80066e0:	4240      	negne	r0, r0
 80066e2:	4770      	bx	lr
 80066e4:	f04f 0000 	mov.w	r0, #0
 80066e8:	4770      	bx	lr
 80066ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80066ee:	d105      	bne.n	80066fc <__aeabi_d2iz+0x48>
 80066f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80066f4:	bf08      	it	eq
 80066f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80066fa:	4770      	bx	lr
 80066fc:	f04f 0000 	mov.w	r0, #0
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop

08006704 <__aeabi_d2uiz>:
 8006704:	004a      	lsls	r2, r1, #1
 8006706:	d211      	bcs.n	800672c <__aeabi_d2uiz+0x28>
 8006708:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800670c:	d211      	bcs.n	8006732 <__aeabi_d2uiz+0x2e>
 800670e:	d50d      	bpl.n	800672c <__aeabi_d2uiz+0x28>
 8006710:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006714:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006718:	d40e      	bmi.n	8006738 <__aeabi_d2uiz+0x34>
 800671a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800671e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006722:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006726:	fa23 f002 	lsr.w	r0, r3, r2
 800672a:	4770      	bx	lr
 800672c:	f04f 0000 	mov.w	r0, #0
 8006730:	4770      	bx	lr
 8006732:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006736:	d102      	bne.n	800673e <__aeabi_d2uiz+0x3a>
 8006738:	f04f 30ff 	mov.w	r0, #4294967295
 800673c:	4770      	bx	lr
 800673e:	f04f 0000 	mov.w	r0, #0
 8006742:	4770      	bx	lr

08006744 <__aeabi_d2f>:
 8006744:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006748:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800674c:	bf24      	itt	cs
 800674e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8006752:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8006756:	d90d      	bls.n	8006774 <__aeabi_d2f+0x30>
 8006758:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800675c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006760:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8006764:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8006768:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800676c:	bf08      	it	eq
 800676e:	f020 0001 	biceq.w	r0, r0, #1
 8006772:	4770      	bx	lr
 8006774:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8006778:	d121      	bne.n	80067be <__aeabi_d2f+0x7a>
 800677a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800677e:	bfbc      	itt	lt
 8006780:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8006784:	4770      	bxlt	lr
 8006786:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800678a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800678e:	f1c2 0218 	rsb	r2, r2, #24
 8006792:	f1c2 0c20 	rsb	ip, r2, #32
 8006796:	fa10 f30c 	lsls.w	r3, r0, ip
 800679a:	fa20 f002 	lsr.w	r0, r0, r2
 800679e:	bf18      	it	ne
 80067a0:	f040 0001 	orrne.w	r0, r0, #1
 80067a4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80067a8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80067ac:	fa03 fc0c 	lsl.w	ip, r3, ip
 80067b0:	ea40 000c 	orr.w	r0, r0, ip
 80067b4:	fa23 f302 	lsr.w	r3, r3, r2
 80067b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80067bc:	e7cc      	b.n	8006758 <__aeabi_d2f+0x14>
 80067be:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80067c2:	d107      	bne.n	80067d4 <__aeabi_d2f+0x90>
 80067c4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80067c8:	bf1e      	ittt	ne
 80067ca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80067ce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80067d2:	4770      	bxne	lr
 80067d4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80067d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80067dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop

080067e4 <__gesf2>:
 80067e4:	f04f 3cff 	mov.w	ip, #4294967295
 80067e8:	e006      	b.n	80067f8 <__cmpsf2+0x4>
 80067ea:	bf00      	nop

080067ec <__lesf2>:
 80067ec:	f04f 0c01 	mov.w	ip, #1
 80067f0:	e002      	b.n	80067f8 <__cmpsf2+0x4>
 80067f2:	bf00      	nop

080067f4 <__cmpsf2>:
 80067f4:	f04f 0c01 	mov.w	ip, #1
 80067f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80067fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8006800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8006804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8006808:	bf18      	it	ne
 800680a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800680e:	d011      	beq.n	8006834 <__cmpsf2+0x40>
 8006810:	b001      	add	sp, #4
 8006812:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8006816:	bf18      	it	ne
 8006818:	ea90 0f01 	teqne	r0, r1
 800681c:	bf58      	it	pl
 800681e:	ebb2 0003 	subspl.w	r0, r2, r3
 8006822:	bf88      	it	hi
 8006824:	17c8      	asrhi	r0, r1, #31
 8006826:	bf38      	it	cc
 8006828:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800682c:	bf18      	it	ne
 800682e:	f040 0001 	orrne.w	r0, r0, #1
 8006832:	4770      	bx	lr
 8006834:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8006838:	d102      	bne.n	8006840 <__cmpsf2+0x4c>
 800683a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800683e:	d105      	bne.n	800684c <__cmpsf2+0x58>
 8006840:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8006844:	d1e4      	bne.n	8006810 <__cmpsf2+0x1c>
 8006846:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800684a:	d0e1      	beq.n	8006810 <__cmpsf2+0x1c>
 800684c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop

08006854 <__aeabi_cfrcmple>:
 8006854:	4684      	mov	ip, r0
 8006856:	4608      	mov	r0, r1
 8006858:	4661      	mov	r1, ip
 800685a:	e7ff      	b.n	800685c <__aeabi_cfcmpeq>

0800685c <__aeabi_cfcmpeq>:
 800685c:	b50f      	push	{r0, r1, r2, r3, lr}
 800685e:	f7ff ffc9 	bl	80067f4 <__cmpsf2>
 8006862:	2800      	cmp	r0, #0
 8006864:	bf48      	it	mi
 8006866:	f110 0f00 	cmnmi.w	r0, #0
 800686a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800686c <__aeabi_fcmpeq>:
 800686c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006870:	f7ff fff4 	bl	800685c <__aeabi_cfcmpeq>
 8006874:	bf0c      	ite	eq
 8006876:	2001      	moveq	r0, #1
 8006878:	2000      	movne	r0, #0
 800687a:	f85d fb08 	ldr.w	pc, [sp], #8
 800687e:	bf00      	nop

08006880 <__aeabi_fcmplt>:
 8006880:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006884:	f7ff ffea 	bl	800685c <__aeabi_cfcmpeq>
 8006888:	bf34      	ite	cc
 800688a:	2001      	movcc	r0, #1
 800688c:	2000      	movcs	r0, #0
 800688e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006892:	bf00      	nop

08006894 <__aeabi_fcmple>:
 8006894:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006898:	f7ff ffe0 	bl	800685c <__aeabi_cfcmpeq>
 800689c:	bf94      	ite	ls
 800689e:	2001      	movls	r0, #1
 80068a0:	2000      	movhi	r0, #0
 80068a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80068a6:	bf00      	nop

080068a8 <__aeabi_fcmpge>:
 80068a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80068ac:	f7ff ffd2 	bl	8006854 <__aeabi_cfrcmple>
 80068b0:	bf94      	ite	ls
 80068b2:	2001      	movls	r0, #1
 80068b4:	2000      	movhi	r0, #0
 80068b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80068ba:	bf00      	nop

080068bc <__aeabi_fcmpgt>:
 80068bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80068c0:	f7ff ffc8 	bl	8006854 <__aeabi_cfrcmple>
 80068c4:	bf34      	ite	cc
 80068c6:	2001      	movcc	r0, #1
 80068c8:	2000      	movcs	r0, #0
 80068ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80068ce:	bf00      	nop

080068d0 <__aeabi_d2lz>:
 80068d0:	b538      	push	{r3, r4, r5, lr}
 80068d2:	4605      	mov	r5, r0
 80068d4:	460c      	mov	r4, r1
 80068d6:	2200      	movs	r2, #0
 80068d8:	2300      	movs	r3, #0
 80068da:	4628      	mov	r0, r5
 80068dc:	4621      	mov	r1, r4
 80068de:	f7ff feab 	bl	8006638 <__aeabi_dcmplt>
 80068e2:	b928      	cbnz	r0, 80068f0 <__aeabi_d2lz+0x20>
 80068e4:	4628      	mov	r0, r5
 80068e6:	4621      	mov	r1, r4
 80068e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068ec:	f000 b80a 	b.w	8006904 <__aeabi_d2ulz>
 80068f0:	4628      	mov	r0, r5
 80068f2:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80068f6:	f000 f805 	bl	8006904 <__aeabi_d2ulz>
 80068fa:	4240      	negs	r0, r0
 80068fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006900:	bd38      	pop	{r3, r4, r5, pc}
 8006902:	bf00      	nop

08006904 <__aeabi_d2ulz>:
 8006904:	b5d0      	push	{r4, r6, r7, lr}
 8006906:	2200      	movs	r2, #0
 8006908:	4b0b      	ldr	r3, [pc, #44]	; (8006938 <__aeabi_d2ulz+0x34>)
 800690a:	4606      	mov	r6, r0
 800690c:	460f      	mov	r7, r1
 800690e:	f7ff fc21 	bl	8006154 <__aeabi_dmul>
 8006912:	f7ff fef7 	bl	8006704 <__aeabi_d2uiz>
 8006916:	4604      	mov	r4, r0
 8006918:	f7ff fba2 	bl	8006060 <__aeabi_ui2d>
 800691c:	2200      	movs	r2, #0
 800691e:	4b07      	ldr	r3, [pc, #28]	; (800693c <__aeabi_d2ulz+0x38>)
 8006920:	f7ff fc18 	bl	8006154 <__aeabi_dmul>
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	4630      	mov	r0, r6
 800692a:	4639      	mov	r1, r7
 800692c:	f7ff fa5a 	bl	8005de4 <__aeabi_dsub>
 8006930:	f7ff fee8 	bl	8006704 <__aeabi_d2uiz>
 8006934:	4621      	mov	r1, r4
 8006936:	bdd0      	pop	{r4, r6, r7, pc}
 8006938:	3df00000 	.word	0x3df00000
 800693c:	41f00000 	.word	0x41f00000

08006940 <__aeabi_fmul>:
 8006940:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006944:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8006948:	bf1e      	ittt	ne
 800694a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800694e:	ea92 0f0c 	teqne	r2, ip
 8006952:	ea93 0f0c 	teqne	r3, ip
 8006956:	d06f      	beq.n	8006a38 <__aeabi_fmul+0xf8>
 8006958:	441a      	add	r2, r3
 800695a:	ea80 0c01 	eor.w	ip, r0, r1
 800695e:	0240      	lsls	r0, r0, #9
 8006960:	bf18      	it	ne
 8006962:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8006966:	d01e      	beq.n	80069a6 <__aeabi_fmul+0x66>
 8006968:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800696c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8006970:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8006974:	fba0 3101 	umull	r3, r1, r0, r1
 8006978:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800697c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8006980:	bf3e      	ittt	cc
 8006982:	0049      	lslcc	r1, r1, #1
 8006984:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8006988:	005b      	lslcc	r3, r3, #1
 800698a:	ea40 0001 	orr.w	r0, r0, r1
 800698e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8006992:	2afd      	cmp	r2, #253	; 0xfd
 8006994:	d81d      	bhi.n	80069d2 <__aeabi_fmul+0x92>
 8006996:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800699a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800699e:	bf08      	it	eq
 80069a0:	f020 0001 	biceq.w	r0, r0, #1
 80069a4:	4770      	bx	lr
 80069a6:	f090 0f00 	teq	r0, #0
 80069aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80069ae:	bf08      	it	eq
 80069b0:	0249      	lsleq	r1, r1, #9
 80069b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80069b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80069ba:	3a7f      	subs	r2, #127	; 0x7f
 80069bc:	bfc2      	ittt	gt
 80069be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80069c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80069c6:	4770      	bxgt	lr
 80069c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80069cc:	f04f 0300 	mov.w	r3, #0
 80069d0:	3a01      	subs	r2, #1
 80069d2:	dc5d      	bgt.n	8006a90 <__aeabi_fmul+0x150>
 80069d4:	f112 0f19 	cmn.w	r2, #25
 80069d8:	bfdc      	itt	le
 80069da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80069de:	4770      	bxle	lr
 80069e0:	f1c2 0200 	rsb	r2, r2, #0
 80069e4:	0041      	lsls	r1, r0, #1
 80069e6:	fa21 f102 	lsr.w	r1, r1, r2
 80069ea:	f1c2 0220 	rsb	r2, r2, #32
 80069ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80069f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80069f6:	f140 0000 	adc.w	r0, r0, #0
 80069fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80069fe:	bf08      	it	eq
 8006a00:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8006a04:	4770      	bx	lr
 8006a06:	f092 0f00 	teq	r2, #0
 8006a0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8006a0e:	bf02      	ittt	eq
 8006a10:	0040      	lsleq	r0, r0, #1
 8006a12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8006a16:	3a01      	subeq	r2, #1
 8006a18:	d0f9      	beq.n	8006a0e <__aeabi_fmul+0xce>
 8006a1a:	ea40 000c 	orr.w	r0, r0, ip
 8006a1e:	f093 0f00 	teq	r3, #0
 8006a22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006a26:	bf02      	ittt	eq
 8006a28:	0049      	lsleq	r1, r1, #1
 8006a2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8006a2e:	3b01      	subeq	r3, #1
 8006a30:	d0f9      	beq.n	8006a26 <__aeabi_fmul+0xe6>
 8006a32:	ea41 010c 	orr.w	r1, r1, ip
 8006a36:	e78f      	b.n	8006958 <__aeabi_fmul+0x18>
 8006a38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8006a3c:	ea92 0f0c 	teq	r2, ip
 8006a40:	bf18      	it	ne
 8006a42:	ea93 0f0c 	teqne	r3, ip
 8006a46:	d00a      	beq.n	8006a5e <__aeabi_fmul+0x11e>
 8006a48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8006a4c:	bf18      	it	ne
 8006a4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8006a52:	d1d8      	bne.n	8006a06 <__aeabi_fmul+0xc6>
 8006a54:	ea80 0001 	eor.w	r0, r0, r1
 8006a58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006a5c:	4770      	bx	lr
 8006a5e:	f090 0f00 	teq	r0, #0
 8006a62:	bf17      	itett	ne
 8006a64:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8006a68:	4608      	moveq	r0, r1
 8006a6a:	f091 0f00 	teqne	r1, #0
 8006a6e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8006a72:	d014      	beq.n	8006a9e <__aeabi_fmul+0x15e>
 8006a74:	ea92 0f0c 	teq	r2, ip
 8006a78:	d101      	bne.n	8006a7e <__aeabi_fmul+0x13e>
 8006a7a:	0242      	lsls	r2, r0, #9
 8006a7c:	d10f      	bne.n	8006a9e <__aeabi_fmul+0x15e>
 8006a7e:	ea93 0f0c 	teq	r3, ip
 8006a82:	d103      	bne.n	8006a8c <__aeabi_fmul+0x14c>
 8006a84:	024b      	lsls	r3, r1, #9
 8006a86:	bf18      	it	ne
 8006a88:	4608      	movne	r0, r1
 8006a8a:	d108      	bne.n	8006a9e <__aeabi_fmul+0x15e>
 8006a8c:	ea80 0001 	eor.w	r0, r0, r1
 8006a90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006a94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006a98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006a9c:	4770      	bx	lr
 8006a9e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006aa2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8006aa6:	4770      	bx	lr

08006aa8 <__aeabi_frsub>:
 8006aa8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8006aac:	e002      	b.n	8006ab4 <__addsf3>
 8006aae:	bf00      	nop

08006ab0 <__aeabi_fsub>:
 8006ab0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08006ab4 <__addsf3>:
 8006ab4:	0042      	lsls	r2, r0, #1
 8006ab6:	bf1f      	itttt	ne
 8006ab8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8006abc:	ea92 0f03 	teqne	r2, r3
 8006ac0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8006ac4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8006ac8:	d06a      	beq.n	8006ba0 <__addsf3+0xec>
 8006aca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8006ace:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8006ad2:	bfc1      	itttt	gt
 8006ad4:	18d2      	addgt	r2, r2, r3
 8006ad6:	4041      	eorgt	r1, r0
 8006ad8:	4048      	eorgt	r0, r1
 8006ada:	4041      	eorgt	r1, r0
 8006adc:	bfb8      	it	lt
 8006ade:	425b      	neglt	r3, r3
 8006ae0:	2b19      	cmp	r3, #25
 8006ae2:	bf88      	it	hi
 8006ae4:	4770      	bxhi	lr
 8006ae6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8006aea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006aee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006af2:	bf18      	it	ne
 8006af4:	4240      	negne	r0, r0
 8006af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006afa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8006afe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8006b02:	bf18      	it	ne
 8006b04:	4249      	negne	r1, r1
 8006b06:	ea92 0f03 	teq	r2, r3
 8006b0a:	d03f      	beq.n	8006b8c <__addsf3+0xd8>
 8006b0c:	f1a2 0201 	sub.w	r2, r2, #1
 8006b10:	fa41 fc03 	asr.w	ip, r1, r3
 8006b14:	eb10 000c 	adds.w	r0, r0, ip
 8006b18:	f1c3 0320 	rsb	r3, r3, #32
 8006b1c:	fa01 f103 	lsl.w	r1, r1, r3
 8006b20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006b24:	d502      	bpl.n	8006b2c <__addsf3+0x78>
 8006b26:	4249      	negs	r1, r1
 8006b28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8006b2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006b30:	d313      	bcc.n	8006b5a <__addsf3+0xa6>
 8006b32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006b36:	d306      	bcc.n	8006b46 <__addsf3+0x92>
 8006b38:	0840      	lsrs	r0, r0, #1
 8006b3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8006b3e:	f102 0201 	add.w	r2, r2, #1
 8006b42:	2afe      	cmp	r2, #254	; 0xfe
 8006b44:	d251      	bcs.n	8006bea <__addsf3+0x136>
 8006b46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8006b4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8006b4e:	bf08      	it	eq
 8006b50:	f020 0001 	biceq.w	r0, r0, #1
 8006b54:	ea40 0003 	orr.w	r0, r0, r3
 8006b58:	4770      	bx	lr
 8006b5a:	0049      	lsls	r1, r1, #1
 8006b5c:	eb40 0000 	adc.w	r0, r0, r0
 8006b60:	3a01      	subs	r2, #1
 8006b62:	bf28      	it	cs
 8006b64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8006b68:	d2ed      	bcs.n	8006b46 <__addsf3+0x92>
 8006b6a:	fab0 fc80 	clz	ip, r0
 8006b6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8006b72:	ebb2 020c 	subs.w	r2, r2, ip
 8006b76:	fa00 f00c 	lsl.w	r0, r0, ip
 8006b7a:	bfaa      	itet	ge
 8006b7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8006b80:	4252      	neglt	r2, r2
 8006b82:	4318      	orrge	r0, r3
 8006b84:	bfbc      	itt	lt
 8006b86:	40d0      	lsrlt	r0, r2
 8006b88:	4318      	orrlt	r0, r3
 8006b8a:	4770      	bx	lr
 8006b8c:	f092 0f00 	teq	r2, #0
 8006b90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8006b94:	bf06      	itte	eq
 8006b96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8006b9a:	3201      	addeq	r2, #1
 8006b9c:	3b01      	subne	r3, #1
 8006b9e:	e7b5      	b.n	8006b0c <__addsf3+0x58>
 8006ba0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8006ba4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8006ba8:	bf18      	it	ne
 8006baa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8006bae:	d021      	beq.n	8006bf4 <__addsf3+0x140>
 8006bb0:	ea92 0f03 	teq	r2, r3
 8006bb4:	d004      	beq.n	8006bc0 <__addsf3+0x10c>
 8006bb6:	f092 0f00 	teq	r2, #0
 8006bba:	bf08      	it	eq
 8006bbc:	4608      	moveq	r0, r1
 8006bbe:	4770      	bx	lr
 8006bc0:	ea90 0f01 	teq	r0, r1
 8006bc4:	bf1c      	itt	ne
 8006bc6:	2000      	movne	r0, #0
 8006bc8:	4770      	bxne	lr
 8006bca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8006bce:	d104      	bne.n	8006bda <__addsf3+0x126>
 8006bd0:	0040      	lsls	r0, r0, #1
 8006bd2:	bf28      	it	cs
 8006bd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8006bd8:	4770      	bx	lr
 8006bda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8006bde:	bf3c      	itt	cc
 8006be0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8006be4:	4770      	bxcc	lr
 8006be6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006bea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8006bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006bf2:	4770      	bx	lr
 8006bf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8006bf8:	bf16      	itet	ne
 8006bfa:	4608      	movne	r0, r1
 8006bfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8006c00:	4601      	movne	r1, r0
 8006c02:	0242      	lsls	r2, r0, #9
 8006c04:	bf06      	itte	eq
 8006c06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8006c0a:	ea90 0f01 	teqeq	r0, r1
 8006c0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8006c12:	4770      	bx	lr

08006c14 <__aeabi_ui2f>:
 8006c14:	f04f 0300 	mov.w	r3, #0
 8006c18:	e004      	b.n	8006c24 <__aeabi_i2f+0x8>
 8006c1a:	bf00      	nop

08006c1c <__aeabi_i2f>:
 8006c1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8006c20:	bf48      	it	mi
 8006c22:	4240      	negmi	r0, r0
 8006c24:	ea5f 0c00 	movs.w	ip, r0
 8006c28:	bf08      	it	eq
 8006c2a:	4770      	bxeq	lr
 8006c2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8006c30:	4601      	mov	r1, r0
 8006c32:	f04f 0000 	mov.w	r0, #0
 8006c36:	e01c      	b.n	8006c72 <__aeabi_l2f+0x2a>

08006c38 <__aeabi_ul2f>:
 8006c38:	ea50 0201 	orrs.w	r2, r0, r1
 8006c3c:	bf08      	it	eq
 8006c3e:	4770      	bxeq	lr
 8006c40:	f04f 0300 	mov.w	r3, #0
 8006c44:	e00a      	b.n	8006c5c <__aeabi_l2f+0x14>
 8006c46:	bf00      	nop

08006c48 <__aeabi_l2f>:
 8006c48:	ea50 0201 	orrs.w	r2, r0, r1
 8006c4c:	bf08      	it	eq
 8006c4e:	4770      	bxeq	lr
 8006c50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8006c54:	d502      	bpl.n	8006c5c <__aeabi_l2f+0x14>
 8006c56:	4240      	negs	r0, r0
 8006c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006c5c:	ea5f 0c01 	movs.w	ip, r1
 8006c60:	bf02      	ittt	eq
 8006c62:	4684      	moveq	ip, r0
 8006c64:	4601      	moveq	r1, r0
 8006c66:	2000      	moveq	r0, #0
 8006c68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8006c6c:	bf08      	it	eq
 8006c6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8006c72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8006c76:	fabc f28c 	clz	r2, ip
 8006c7a:	3a08      	subs	r2, #8
 8006c7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8006c80:	db10      	blt.n	8006ca4 <__aeabi_l2f+0x5c>
 8006c82:	fa01 fc02 	lsl.w	ip, r1, r2
 8006c86:	4463      	add	r3, ip
 8006c88:	fa00 fc02 	lsl.w	ip, r0, r2
 8006c8c:	f1c2 0220 	rsb	r2, r2, #32
 8006c90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006c94:	fa20 f202 	lsr.w	r2, r0, r2
 8006c98:	eb43 0002 	adc.w	r0, r3, r2
 8006c9c:	bf08      	it	eq
 8006c9e:	f020 0001 	biceq.w	r0, r0, #1
 8006ca2:	4770      	bx	lr
 8006ca4:	f102 0220 	add.w	r2, r2, #32
 8006ca8:	fa01 fc02 	lsl.w	ip, r1, r2
 8006cac:	f1c2 0220 	rsb	r2, r2, #32
 8006cb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8006cb4:	fa21 f202 	lsr.w	r2, r1, r2
 8006cb8:	eb43 0002 	adc.w	r0, r3, r2
 8006cbc:	bf08      	it	eq
 8006cbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8006cc2:	4770      	bx	lr

08006cc4 <__aeabi_f2uiz>:
 8006cc4:	0042      	lsls	r2, r0, #1
 8006cc6:	d20e      	bcs.n	8006ce6 <__aeabi_f2uiz+0x22>
 8006cc8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8006ccc:	d30b      	bcc.n	8006ce6 <__aeabi_f2uiz+0x22>
 8006cce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8006cd2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8006cd6:	d409      	bmi.n	8006cec <__aeabi_f2uiz+0x28>
 8006cd8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8006cdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ce0:	fa23 f002 	lsr.w	r0, r3, r2
 8006ce4:	4770      	bx	lr
 8006ce6:	f04f 0000 	mov.w	r0, #0
 8006cea:	4770      	bx	lr
 8006cec:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8006cf0:	d101      	bne.n	8006cf6 <__aeabi_f2uiz+0x32>
 8006cf2:	0242      	lsls	r2, r0, #9
 8006cf4:	d102      	bne.n	8006cfc <__aeabi_f2uiz+0x38>
 8006cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cfa:	4770      	bx	lr
 8006cfc:	f04f 0000 	mov.w	r0, #0
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	0000      	movs	r0, r0
	...

08006d08 <main>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d08:	f64f 05ff 	movw	r5, #63743	; 0xf8ff
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d0c:	4c39      	ldr	r4, [pc, #228]	; (8006df4 <main+0xec>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d0e:	493a      	ldr	r1, [pc, #232]	; (8006df8 <main+0xf0>)
 8006d10:	6822      	ldr	r2, [r4, #0]
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8006d12:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8006d16:	f042 0210 	orr.w	r2, r2, #16
 8006d1a:	6022      	str	r2, [r4, #0]
 8006d1c:	68ca      	ldr	r2, [r1, #12]
  reg_value  =  (reg_value                                   |
 8006d1e:	4b37      	ldr	r3, [pc, #220]	; (8006dfc <main+0xf4>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d20:	402a      	ands	r2, r5
  reg_value  =  (reg_value                                   |
 8006d22:	4313      	orrs	r3, r2
 8006d24:	b0a7      	sub	sp, #156	; 0x9c
  SCB->AIRCR =  reg_value;
 8006d26:	60cb      	str	r3, [r1, #12]
  HAL_InitTick(TICK_INT_PRIORITY);
 8006d28:	200f      	movs	r0, #15
 8006d2a:	f7fe fb55 	bl	80053d8 <HAL_InitTick.isra.0>
  __HAL_RCC_AFIO_CLK_ENABLE();
 8006d2e:	4b34      	ldr	r3, [pc, #208]	; (8006e00 <main+0xf8>)
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006d30:	4934      	ldr	r1, [pc, #208]	; (8006e04 <main+0xfc>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8006d32:	699a      	ldr	r2, [r3, #24]
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006d34:	2001      	movs	r0, #1
 8006d36:	f042 0201 	orr.w	r2, r2, #1
 8006d3a:	619a      	str	r2, [r3, #24]
 8006d3c:	699a      	ldr	r2, [r3, #24]
 8006d3e:	f002 0201 	and.w	r2, r2, #1
 8006d42:	920c      	str	r2, [sp, #48]	; 0x30
 8006d44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d46:	69da      	ldr	r2, [r3, #28]
 8006d48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006d4c:	61da      	str	r2, [r3, #28]
 8006d4e:	69db      	ldr	r3, [r3, #28]
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006d50:	2200      	movs	r2, #0
 8006d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d56:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006d5a:	684b      	ldr	r3, [r1, #4]
 8006d5c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006d60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006d64:	604b      	str	r3, [r1, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006d66:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006d6a:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006d6e:	f44f 10e0 	mov.w	r0, #1835008	; 0x1c0000
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006d72:	2101      	movs	r1, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006d78:	e9cd 221e 	strd	r2, r2, [sp, #120]	; 0x78
 8006d7c:	e9cd 2221 	strd	r2, r2, [sp, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006d80:	2202      	movs	r2, #2
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006d82:	9025      	str	r0, [sp, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d84:	a81c      	add	r0, sp, #112	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006d86:	9120      	str	r1, [sp, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006d88:	9223      	str	r2, [sp, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006d8a:	9324      	str	r3, [sp, #144]	; 0x90
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d8c:	f7fa ff3e 	bl	8001c0c <HAL_RCC_OscConfig.constprop.0>
 8006d90:	b108      	cbz	r0, 8006d96 <main+0x8e>
  __ASM volatile ("cpsid i" : : : "memory");
 8006d92:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8006d94:	e7fe      	b.n	8006d94 <main+0x8c>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	f013 0f06 	tst.w	r3, #6
 8006d9c:	d10c      	bne.n	8006db8 <main+0xb0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	f023 0307 	bic.w	r3, r3, #7
 8006da4:	f043 0302 	orr.w	r3, r3, #2
 8006da8:	6023      	str	r3, [r4, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	f003 0307 	and.w	r3, r3, #7
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d001      	beq.n	8006db8 <main+0xb0>
 8006db4:	b672      	cpsid	i
 8006db6:	e7fe      	b.n	8006db6 <main+0xae>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006db8:	4a11      	ldr	r2, [pc, #68]	; (8006e00 <main+0xf8>)
 8006dba:	6853      	ldr	r3, [r2, #4]
 8006dbc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006dc0:	6053      	str	r3, [r2, #4]
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006dc2:	6853      	ldr	r3, [r2, #4]
 8006dc4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006dc8:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dca:	6853      	ldr	r3, [r2, #4]
 8006dcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dd0:	6053      	str	r3, [r2, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dd2:	6813      	ldr	r3, [r2, #0]
 8006dd4:	0199      	lsls	r1, r3, #6
 8006dd6:	d5ed      	bpl.n	8006db4 <main+0xac>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dd8:	6853      	ldr	r3, [r2, #4]
  return uwTick;
 8006dda:	f8df b02c 	ldr.w	fp, [pc, #44]	; 8006e08 <main+0x100>
 8006dde:	f023 0303 	bic.w	r3, r3, #3
 8006de2:	f043 0302 	orr.w	r3, r3, #2
 8006de6:	6053      	str	r3, [r2, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006de8:	f241 3188 	movw	r1, #5000	; 0x1388
 8006dec:	f8db 0000 	ldr.w	r0, [fp]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006df0:	e011      	b.n	8006e16 <main+0x10e>
 8006df2:	bf00      	nop
 8006df4:	40022000 	.word	0x40022000
 8006df8:	e000ed00 	.word	0xe000ed00
 8006dfc:	05fa0300 	.word	0x05fa0300
 8006e00:	40021000 	.word	0x40021000
 8006e04:	40010000 	.word	0x40010000
 8006e08:	20000200 	.word	0x20000200
 8006e0c:	f8db 3000 	ldr.w	r3, [fp]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e10:	1a1b      	subs	r3, r3, r0
 8006e12:	428b      	cmp	r3, r1
 8006e14:	d8ce      	bhi.n	8006db4 <main+0xac>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e16:	6853      	ldr	r3, [r2, #4]
 8006e18:	f003 030c 	and.w	r3, r3, #12
 8006e1c:	2b08      	cmp	r3, #8
 8006e1e:	d1f5      	bne.n	8006e0c <main+0x104>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e20:	4ab3      	ldr	r2, [pc, #716]	; (80070f0 <main+0x3e8>)
 8006e22:	6813      	ldr	r3, [r2, #0]
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d90a      	bls.n	8006e42 <main+0x13a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e2c:	6813      	ldr	r3, [r2, #0]
 8006e2e:	f023 0307 	bic.w	r3, r3, #7
 8006e32:	f043 0302 	orr.w	r3, r3, #2
 8006e36:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e38:	6813      	ldr	r3, [r2, #0]
 8006e3a:	f003 0307 	and.w	r3, r3, #7
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d1b8      	bne.n	8006db4 <main+0xac>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e42:	4cac      	ldr	r4, [pc, #688]	; (80070f4 <main+0x3ec>)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006e44:	4aac      	ldr	r2, [pc, #688]	; (80070f8 <main+0x3f0>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e46:	6863      	ldr	r3, [r4, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006e48:	ad18      	add	r5, sp, #96	; 0x60
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e4a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006e4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e52:	6063      	str	r3, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e54:	6863      	ldr	r3, [r4, #4]
 8006e56:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006e5a:	6063      	str	r3, [r4, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006e5c:	f240 2301 	movw	r3, #513	; 0x201
 8006e60:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006e64:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8006e66:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8006e6a:	6863      	ldr	r3, [r4, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8006e6c:	f003 020c 	and.w	r2, r3, #12
 8006e70:	2a08      	cmp	r2, #8
 8006e72:	f000 8258 	beq.w	8007326 <main+0x61e>
      sysclockfreq = HSE_VALUE;
 8006e76:	4ea1      	ldr	r6, [pc, #644]	; (80070fc <main+0x3f4>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e78:	2500      	movs	r5, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e7a:	4c9e      	ldr	r4, [pc, #632]	; (80070f4 <main+0x3ec>)
 8006e7c:	4aa0      	ldr	r2, [pc, #640]	; (8007100 <main+0x3f8>)
 8006e7e:	6863      	ldr	r3, [r4, #4]
 8006e80:	4fa0      	ldr	r7, [pc, #640]	; (8007104 <main+0x3fc>)
 8006e82:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006e86:	4413      	add	r3, r2
 8006e88:	f893 35e8 	ldrb.w	r3, [r3, #1512]	; 0x5e8
 8006e8c:	f8df a278 	ldr.w	sl, [pc, #632]	; 8007108 <main+0x400>
 8006e90:	40de      	lsrs	r6, r3
 8006e92:	4b9e      	ldr	r3, [pc, #632]	; (800710c <main+0x404>)
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8006e94:	f04f 0903 	mov.w	r9, #3
  HAL_InitTick(uwTickPrio);
 8006e98:	6858      	ldr	r0, [r3, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e9a:	601e      	str	r6, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8006e9c:	f7fe fa9c 	bl	80053d8 <HAL_InitTick.isra.0>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ea0:	951e      	str	r5, [sp, #120]	; 0x78
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8006ea2:	69a3      	ldr	r3, [r4, #24]
 8006ea4:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8006ea8:	f043 0310 	orr.w	r3, r3, #16
 8006eac:	61a3      	str	r3, [r4, #24]
 8006eae:	69a3      	ldr	r3, [r4, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eb0:	2202      	movs	r2, #2
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8006eb2:	f003 0310 	and.w	r3, r3, #16
 8006eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8006eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8006eba:	69a3      	ldr	r3, [r4, #24]
 8006ebc:	4894      	ldr	r0, [pc, #592]	; (8007110 <main+0x408>)
 8006ebe:	f043 0320 	orr.w	r3, r3, #32
 8006ec2:	61a3      	str	r3, [r4, #24]
 8006ec4:	69a3      	ldr	r3, [r4, #24]
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8006ec6:	f04f 0800 	mov.w	r8, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8006eca:	f003 0320 	and.w	r3, r3, #32
 8006ece:	9309      	str	r3, [sp, #36]	; 0x24
 8006ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006ed2:	69a3      	ldr	r3, [r4, #24]
 8006ed4:	f043 0304 	orr.w	r3, r3, #4
 8006ed8:	61a3      	str	r3, [r4, #24]
 8006eda:	69a3      	ldr	r3, [r4, #24]
 8006edc:	f003 0304 	and.w	r3, r3, #4
 8006ee0:	9308      	str	r3, [sp, #32]
 8006ee2:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8006ee4:	69a3      	ldr	r3, [r4, #24]
 8006ee6:	f043 0308 	orr.w	r3, r3, #8
 8006eea:	61a3      	str	r3, [r4, #24]
 8006eec:	69a3      	ldr	r3, [r4, #24]
 8006eee:	f003 0308 	and.w	r3, r3, #8
 8006ef2:	9307      	str	r3, [sp, #28]
 8006ef4:	9b07      	ldr	r3, [sp, #28]
 8006ef6:	4b87      	ldr	r3, [pc, #540]	; (8007114 <main+0x40c>)
 8006ef8:	6103      	str	r3, [r0, #16]
 8006efa:	4b87      	ldr	r3, [pc, #540]	; (8007118 <main+0x410>)
 8006efc:	f8ca 1010 	str.w	r1, [sl, #16]
 8006f00:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pin = LED_Pin;
 8006f02:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f04:	921f      	str	r2, [sp, #124]	; 0x7c
	GPIO_InitStruct.Pin = LED_Pin;
 8006f06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8006f0a:	a91c      	add	r1, sp, #112	; 0x70
	GPIO_InitStruct.Pin = LED_Pin;
 8006f0c:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8006f10:	f7fa fd5a 	bl	80019c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8006f14:	f24c 023f 	movw	r2, #49215	; 0xc03f
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 8006f1e:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f22:	f7fa fd51 	bl	80019c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8006f26:	22ff      	movs	r2, #255	; 0xff
 8006f28:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f2a:	4650      	mov	r0, sl
	GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8006f2c:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8006f30:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f34:	f7fa fd48 	bl	80019c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8006f38:	f640 4203 	movw	r2, #3075	; 0xc03
 8006f3c:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f3e:	4638      	mov	r0, r7
	GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8006f40:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8006f44:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f48:	f7fa fd3e 	bl	80019c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	2204      	movs	r2, #4
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f50:	951e      	str	r5, [sp, #120]	; 0x78
	GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 8006f52:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	HAL_GPIO_Init(SYSTEM_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8006f56:	f7fa fd37 	bl	80019c8 <HAL_GPIO_Init>
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006f5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	hi2c1.Init.ClockSpeed = 400000;
 8006f5e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 800711c <main+0x414>
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006f62:	f8cb 3014 	str.w	r3, [fp, #20]
	hi2c1.Init.ClockSpeed = 400000;
 8006f66:	4b6e      	ldr	r3, [pc, #440]	; (8007120 <main+0x418>)
	hi2c1.Init.OwnAddress1 = 0;
 8006f68:	e9cb 5503 	strd	r5, r5, [fp, #12]
	hi2c1.Init.ClockSpeed = 400000;
 8006f6c:	e9cb 9301 	strd	r9, r3, [fp, #4]
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f70:	f89b 3041 	ldrb.w	r3, [fp, #65]	; 0x41
	hi2c1.Init.OwnAddress2 = 0;
 8006f74:	e9cb 5506 	strd	r5, r5, [fp, #24]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006f78:	e9cb 5508 	strd	r5, r5, [fp, #32]
 8006f7c:	f003 07ff 	and.w	r7, r3, #255	; 0xff
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 81e6 	beq.w	8007352 <main+0x64a>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f86:	2324      	movs	r3, #36	; 0x24
 8006f88:	f88b 3041 	strb.w	r3, [fp, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006f8c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	f022 0201 	bic.w	r2, r2, #1
 8006f96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fa6:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006fa8:	f7fa fe0c 	bl	8001bc4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006fac:	4b5d      	ldr	r3, [pc, #372]	; (8007124 <main+0x41c>)
 8006fae:	f8db 5008 	ldr.w	r5, [fp, #8]
 8006fb2:	429d      	cmp	r5, r3
 8006fb4:	bf94      	ite	ls
 8006fb6:	4b5c      	ldrls	r3, [pc, #368]	; (8007128 <main+0x420>)
 8006fb8:	4b5c      	ldrhi	r3, [pc, #368]	; (800712c <main+0x424>)
 8006fba:	4298      	cmp	r0, r3
 8006fbc:	bf8c      	ite	hi
 8006fbe:	2300      	movhi	r3, #0
 8006fc0:	2301      	movls	r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f040 81ad 	bne.w	8007322 <main+0x61a>
  freqrange = I2C_FREQRANGE(pclk1);
 8006fc8:	4c59      	ldr	r4, [pc, #356]	; (8007130 <main+0x428>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006fca:	f8db 2004 	ldr.w	r2, [fp, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8006fce:	fbb0 f4f4 	udiv	r4, r0, r4
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006fd2:	6853      	ldr	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006fd4:	4f53      	ldr	r7, [pc, #332]	; (8007124 <main+0x41c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006fd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006fda:	4323      	orrs	r3, r4
 8006fdc:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006fde:	6a11      	ldr	r1, [r2, #32]
 8006fe0:	42bd      	cmp	r5, r7
 8006fe2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8006fe6:	f200 8203 	bhi.w	80073f0 <main+0x6e8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006fea:	1e43      	subs	r3, r0, #1
 8006fec:	006d      	lsls	r5, r5, #1
 8006fee:	fbb3 f3f5 	udiv	r3, r3, r5
 8006ff2:	f640 70fc 	movw	r0, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006ff6:	3401      	adds	r4, #1
 8006ff8:	4321      	orrs	r1, r4
 8006ffa:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006ffc:	69d1      	ldr	r1, [r2, #28]
 8006ffe:	3301      	adds	r3, #1
 8007000:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8007004:	4203      	tst	r3, r0
 8007006:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800700a:	f040 8221 	bne.w	8007450 <main+0x748>
 800700e:	2304      	movs	r3, #4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007010:	2400      	movs	r4, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8007012:	2020      	movs	r0, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007014:	430b      	orrs	r3, r1
 8007016:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007018:	6815      	ldr	r5, [r2, #0]
 800701a:	e9db 3108 	ldrd	r3, r1, [fp, #32]
 800701e:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8007022:	430b      	orrs	r3, r1
 8007024:	432b      	orrs	r3, r5
 8007026:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007028:	6895      	ldr	r5, [r2, #8]
 800702a:	e9db 1304 	ldrd	r1, r3, [fp, #16]
 800702e:	f425 4503 	bic.w	r5, r5, #33536	; 0x8300
 8007032:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007036:	430b      	orrs	r3, r1
 8007038:	432b      	orrs	r3, r5
 800703a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800703c:	68d5      	ldr	r5, [r2, #12]
 800703e:	e9db 3106 	ldrd	r3, r1, [fp, #24]
 8007042:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007046:	430b      	orrs	r3, r1
 8007048:	432b      	orrs	r3, r5
 800704a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800704c:	6813      	ldr	r3, [r2, #0]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800704e:	4f29      	ldr	r7, [pc, #164]	; (80070f4 <main+0x3ec>)
 8007050:	f043 0301 	orr.w	r3, r3, #1
 8007054:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007056:	f8cb 4044 	str.w	r4, [fp, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800705a:	f88b 0041 	strb.w	r0, [fp, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800705e:	f8cb 4034 	str.w	r4, [fp, #52]	; 0x34
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007062:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
 8007066:	697b      	ldr	r3, [r7, #20]
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007068:	4621      	mov	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 800706a:	f043 0301 	orr.w	r3, r3, #1
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	697b      	ldr	r3, [r7, #20]
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007072:	200c      	movs	r0, #12
	__HAL_RCC_DMA1_CLK_ENABLE();
 8007074:	f003 0301 	and.w	r3, r3, #1
 8007078:	9306      	str	r3, [sp, #24]
 800707a:	9b06      	ldr	r3, [sp, #24]
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800707c:	f7fa ffc8 	bl	8002010 <HAL_NVIC_SetPriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007084:	4d2b      	ldr	r5, [pc, #172]	; (8007134 <main+0x42c>)
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8007086:	4621      	mov	r1, r4
 8007088:	602b      	str	r3, [r5, #0]
 800708a:	200e      	movs	r0, #14
 800708c:	f7fa ffc0 	bl	8002010 <HAL_NVIC_SetPriority.constprop.0>
 8007090:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8007094:	4621      	mov	r1, r4
 8007096:	602b      	str	r3, [r5, #0]
 8007098:	200f      	movs	r0, #15
 800709a:	f7fa ffb9 	bl	8002010 <HAL_NVIC_SetPriority.constprop.0>
 800709e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80070a2:	4621      	mov	r1, r4
 80070a4:	602b      	str	r3, [r5, #0]
 80070a6:	2010      	movs	r0, #16
 80070a8:	f7fa ffb2 	bl	8002010 <HAL_NVIC_SetPriority.constprop.0>
 80070ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80070b0:	4621      	mov	r1, r4
 80070b2:	602b      	str	r3, [r5, #0]
 80070b4:	2011      	movs	r0, #17
 80070b6:	f7fa ffab 	bl	8002010 <HAL_NVIC_SetPriority.constprop.0>
 80070ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	huart1.Init.StopBits = UART_STOPBITS_1;
 80070be:	e9cb 4434 	strd	r4, r4, [fp, #208]	; 0xd0
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80070c2:	e9cb 4438 	strd	r4, r4, [fp, #224]	; 0xe0
	huart1.Init.Parity = UART_PARITY_NONE;
 80070c6:	f8cb 40d8 	str.w	r4, [fp, #216]	; 0xd8
 80070ca:	602b      	str	r3, [r5, #0]
	huart1.Init.BaudRate = 115200;
 80070cc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80070d0:	f8cb 30cc 	str.w	r3, [fp, #204]	; 0xcc
	huart1.Init.Mode = UART_MODE_TX_RX;
 80070d4:	230c      	movs	r3, #12
 80070d6:	f8cb 30dc 	str.w	r3, [fp, #220]	; 0xdc
	huart1.Instance = USART1;
 80070da:	4b17      	ldr	r3, [pc, #92]	; (8007138 <main+0x430>)
 80070dc:	f8cb 30c8 	str.w	r3, [fp, #200]	; 0xc8
  if (huart->gState == HAL_UART_STATE_RESET)
 80070e0:	f89b 3105 	ldrb.w	r3, [fp, #261]	; 0x105
 80070e4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 81d7 	beq.w	800749c <main+0x794>
 80070ee:	e025      	b.n	800713c <main+0x434>
 80070f0:	40022000 	.word	0x40022000
 80070f4:	40021000 	.word	0x40021000
 80070f8:	0801ed60 	.word	0x0801ed60
 80070fc:	007a1200 	.word	0x007a1200
 8007100:	0800d520 	.word	0x0800d520
 8007104:	40010c00 	.word	0x40010c00
 8007108:	40010800 	.word	0x40010800
 800710c:	20000000 	.word	0x20000000
 8007110:	40011000 	.word	0x40011000
 8007114:	e03f0000 	.word	0xe03f0000
 8007118:	0c030000 	.word	0x0c030000
 800711c:	40005400 	.word	0x40005400
 8007120:	00061a80 	.word	0x00061a80
 8007124:	000186a0 	.word	0x000186a0
 8007128:	001e847f 	.word	0x001e847f
 800712c:	003d08ff 	.word	0x003d08ff
 8007130:	000f4240 	.word	0x000f4240
 8007134:	e000e100 	.word	0xe000e100
 8007138:	40013800 	.word	0x40013800
  huart->gState = HAL_UART_STATE_BUSY;
 800713c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800713e:	f8db 20c8 	ldr.w	r2, [fp, #200]	; 0xc8
  huart->gState = HAL_UART_STATE_BUSY;
 8007142:	f88b 3105 	strb.w	r3, [fp, #261]	; 0x105
  __HAL_UART_DISABLE(huart);
 8007146:	68d3      	ldr	r3, [r2, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007148:	f8db 10d4 	ldr.w	r1, [fp, #212]	; 0xd4
  __HAL_UART_DISABLE(huart);
 800714c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007150:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007152:	6913      	ldr	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007154:	f8db 00d8 	ldr.w	r0, [fp, #216]	; 0xd8
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007158:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800715c:	430b      	orrs	r3, r1
 800715e:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007160:	f8db 30d0 	ldr.w	r3, [fp, #208]	; 0xd0
  MODIFY_REG(huart->Instance->CR1,
 8007164:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007166:	4303      	orrs	r3, r0
 8007168:	f8db 00dc 	ldr.w	r0, [fp, #220]	; 0xdc
  MODIFY_REG(huart->Instance->CR1,
 800716c:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8007170:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007174:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8007176:	430b      	orrs	r3, r1
 8007178:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800717a:	6953      	ldr	r3, [r2, #20]
 800717c:	f8db 10e0 	ldr.w	r1, [fp, #224]	; 0xe0
 8007180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007184:	430b      	orrs	r3, r1
 8007186:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8007188:	4bbc      	ldr	r3, [pc, #752]	; (800747c <main+0x774>)
 800718a:	429a      	cmp	r2, r3
 800718c:	f000 81db 	beq.w	8007546 <main+0x83e>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007190:	f7fa fd18 	bl	8001bc4 <HAL_RCC_GetPCLK1Freq>
 8007194:	4606      	mov	r6, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007196:	2319      	movs	r3, #25
 8007198:	fb03 f606 	mul.w	r6, r3, r6
 800719c:	f8db 30cc 	ldr.w	r3, [fp, #204]	; 0xcc
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a0:	2200      	movs	r2, #0
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	fbb6 f3f3 	udiv	r3, r6, r3
 80071a8:	2664      	movs	r6, #100	; 0x64
	htim1.Instance = TIM1;
 80071aa:	4db5      	ldr	r5, [pc, #724]	; (8007480 <main+0x778>)
  huart->gState = HAL_UART_STATE_READY;
 80071ac:	2020      	movs	r0, #32
	htim1.Init.Prescaler = 0;
 80071ae:	e9cb 5216 	strd	r5, r2, [fp, #88]	; 0x58
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071b2:	fbb3 f5f6 	udiv	r5, r3, r6
 80071b6:	fb06 3315 	mls	r3, r6, r5, r3
 80071ba:	011b      	lsls	r3, r3, #4
 80071bc:	3332      	adds	r3, #50	; 0x32
 80071be:	fbb3 f3f6 	udiv	r3, r3, r6
	htim1.Init.Period = 65535;
 80071c2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80071c6:	f8db 10c8 	ldr.w	r1, [fp, #200]	; 0xc8
 80071ca:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 80071ce:	608b      	str	r3, [r1, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071d0:	690b      	ldr	r3, [r1, #16]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071d2:	f8cb 2060 	str.w	r2, [fp, #96]	; 0x60
 80071d6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80071da:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071dc:	694b      	ldr	r3, [r1, #20]
 80071de:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80071e2:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE(huart);
 80071e4:	68cb      	ldr	r3, [r1, #12]
 80071e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80071ea:	60cb      	str	r3, [r1, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ec:	f8cb 2108 	str.w	r2, [fp, #264]	; 0x108
  huart->gState = HAL_UART_STATE_READY;
 80071f0:	f88b 0105 	strb.w	r0, [fp, #261]	; 0x105
  huart->RxState = HAL_UART_STATE_READY;
 80071f4:	f88b 0106 	strb.w	r0, [fp, #262]	; 0x106
  if (htim->State == HAL_TIM_STATE_RESET)
 80071f8:	f89b 3095 	ldrb.w	r3, [fp, #149]	; 0x95
	TIM_OC_InitTypeDef sConfigOC = {0};
 80071fc:	e9cd 221c 	strd	r2, r2, [sp, #112]	; 0x70
 8007200:	e9cd 221e 	strd	r2, r2, [sp, #120]	; 0x78
 8007204:	e9cd 2220 	strd	r2, r2, [sp, #128]	; 0x80
	htim1.Init.RepetitionCounter = 0;
 8007208:	e9cb 221a 	strd	r2, r2, [fp, #104]	; 0x68
	htim1.Init.Period = 65535;
 800720c:	f8cb 4064 	str.w	r4, [fp, #100]	; 0x64
	TIM_OC_InitTypeDef sConfigOC = {0};
 8007210:	9222      	str	r2, [sp, #136]	; 0x88
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007212:	f8cb 2070 	str.w	r2, [fp, #112]	; 0x70
 8007216:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 81a7 	beq.w	800756e <main+0x866>
  htim->State = HAL_TIM_STATE_BUSY;
 8007220:	2602      	movs	r6, #2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007222:	2401      	movs	r4, #1
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007224:	4d96      	ldr	r5, [pc, #600]	; (8007480 <main+0x778>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007226:	f88b 6095 	strb.w	r6, [fp, #149]	; 0x95
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800722a:	4628      	mov	r0, r5
 800722c:	f7fa fe78 	bl	8001f20 <TIM_Base_SetConfig.constprop.0>
  __HAL_LOCK(htim);
 8007230:	f89b 3094 	ldrb.w	r3, [fp, #148]	; 0x94
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007234:	f88b 409e 	strb.w	r4, [fp, #158]	; 0x9e
  __HAL_LOCK(htim);
 8007238:	42a3      	cmp	r3, r4
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800723a:	f88b 4096 	strb.w	r4, [fp, #150]	; 0x96
 800723e:	f88b 4097 	strb.w	r4, [fp, #151]	; 0x97
 8007242:	f88b 4098 	strb.w	r4, [fp, #152]	; 0x98
 8007246:	f88b 4099 	strb.w	r4, [fp, #153]	; 0x99
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800724a:	f88b 409a 	strb.w	r4, [fp, #154]	; 0x9a
 800724e:	f88b 409b 	strb.w	r4, [fp, #155]	; 0x9b
 8007252:	f88b 409c 	strb.w	r4, [fp, #156]	; 0x9c
 8007256:	f88b 409d 	strb.w	r4, [fp, #157]	; 0x9d
  htim->State = HAL_TIM_STATE_READY;
 800725a:	f88b 4095 	strb.w	r4, [fp, #149]	; 0x95
  __HAL_LOCK(htim);
 800725e:	f000 81bc 	beq.w	80075da <main+0x8d2>
  __HAL_UNLOCK(htim);
 8007262:	2200      	movs	r2, #0
  tmpsmcr = htim->Instance->SMCR;
 8007264:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  htim->State = HAL_TIM_STATE_BUSY;
 8007268:	f88b 6095 	strb.w	r6, [fp, #149]	; 0x95
  tmpsmcr = htim->Instance->SMCR;
 800726c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800726e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007272:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007276:	6083      	str	r3, [r0, #8]
  htim->State = HAL_TIM_STATE_READY;
 8007278:	f88b 4095 	strb.w	r4, [fp, #149]	; 0x95
  if (htim->State == HAL_TIM_STATE_RESET)
 800727c:	f89b 3095 	ldrb.w	r3, [fp, #149]	; 0x95
  __HAL_UNLOCK(htim);
 8007280:	f88b 2094 	strb.w	r2, [fp, #148]	; 0x94
  htim->State = HAL_TIM_STATE_BUSY;
 8007284:	f88b 6095 	strb.w	r6, [fp, #149]	; 0x95
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007288:	f7fa fe4a 	bl	8001f20 <TIM_Base_SetConfig.constprop.0>
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800728c:	f89b 3094 	ldrb.w	r3, [fp, #148]	; 0x94
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007290:	f88b 409e 	strb.w	r4, [fp, #158]	; 0x9e
 8007294:	42a3      	cmp	r3, r4
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007296:	f88b 4096 	strb.w	r4, [fp, #150]	; 0x96
 800729a:	f88b 4097 	strb.w	r4, [fp, #151]	; 0x97
 800729e:	f88b 4098 	strb.w	r4, [fp, #152]	; 0x98
 80072a2:	f88b 4099 	strb.w	r4, [fp, #153]	; 0x99
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072a6:	f88b 409a 	strb.w	r4, [fp, #154]	; 0x9a
 80072aa:	f88b 409b 	strb.w	r4, [fp, #155]	; 0x9b
 80072ae:	f88b 409c 	strb.w	r4, [fp, #156]	; 0x9c
 80072b2:	f88b 409d 	strb.w	r4, [fp, #157]	; 0x9d
  htim->State = HAL_TIM_STATE_READY;
 80072b6:	f88b 4095 	strb.w	r4, [fp, #149]	; 0x95
 80072ba:	f000 8198 	beq.w	80075ee <main+0x8e6>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072be:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
  htim->State = HAL_TIM_STATE_BUSY;
 80072c2:	f88b 6095 	strb.w	r6, [fp, #149]	; 0x95
  tmpcr2 = htim->Instance->CR2;
 80072c6:	6859      	ldr	r1, [r3, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072c8:	42ab      	cmp	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 80072ca:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr = htim->Instance->SMCR;
 80072ce:	689a      	ldr	r2, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 80072d0:	6059      	str	r1, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072d2:	f000 8188 	beq.w	80075e6 <main+0x8de>
 80072d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072da:	f000 8184 	beq.w	80075e6 <main+0x8de>
 80072de:	4969      	ldr	r1, [pc, #420]	; (8007484 <main+0x77c>)
 80072e0:	428b      	cmp	r3, r1
 80072e2:	f000 8180 	beq.w	80075e6 <main+0x8de>
 80072e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80072ea:	428b      	cmp	r3, r1
 80072ec:	f000 817b 	beq.w	80075e6 <main+0x8de>
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80072f0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80072f2:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 80072f4:	f88b 3094 	strb.w	r3, [fp, #148]	; 0x94
  htim->State = HAL_TIM_STATE_READY;
 80072f8:	f88b 2095 	strb.w	r2, [fp, #149]	; 0x95
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80072fc:	9322      	str	r3, [sp, #136]	; 0x88
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80072fe:	2200      	movs	r2, #0
 8007300:	2300      	movs	r3, #0
 8007302:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8007306:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 800730a:	2260      	movs	r2, #96	; 0x60
 800730c:	2300      	movs	r3, #0
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800730e:	a81c      	add	r0, sp, #112	; 0x70
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007310:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007314:	f7fe f888 	bl	8005428 <HAL_TIM_PWM_ConfigChannel.constprop.0>
 8007318:	2800      	cmp	r0, #0
 800731a:	f000 817d 	beq.w	8007618 <main+0x910>
 800731e:	b672      	cpsid	i
	while (1)
 8007320:	e7fe      	b.n	8007320 <main+0x618>
 8007322:	b672      	cpsid	i
 8007324:	e7fe      	b.n	8007324 <main+0x61c>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007326:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800732a:	3298      	adds	r2, #152	; 0x98
 800732c:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800732e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007330:	f812 6c38 	ldrb.w	r6, [r2, #-56]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007334:	f140 8088 	bpl.w	8007448 <main+0x740>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007338:	6863      	ldr	r3, [r4, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800733a:	4a53      	ldr	r2, [pc, #332]	; (8007488 <main+0x780>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800733c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007340:	fb02 f606 	mul.w	r6, r2, r6
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007344:	3398      	adds	r3, #152	; 0x98
 8007346:	446b      	add	r3, sp
 8007348:	f813 3c44 	ldrb.w	r3, [r3, #-68]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800734c:	fbb6 f6f3 	udiv	r6, r6, r3
 8007350:	e592      	b.n	8006e78 <main+0x170>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007352:	2203      	movs	r2, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007354:	971e      	str	r7, [sp, #120]	; 0x78
    hi2c->Lock = HAL_UNLOCKED;
 8007356:	f88b 7040 	strb.w	r7, [fp, #64]	; 0x40
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800735a:	69a3      	ldr	r3, [r4, #24]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800735c:	2580      	movs	r5, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800735e:	f043 0308 	orr.w	r3, r3, #8
 8007362:	61a3      	str	r3, [r4, #24]
 8007364:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007366:	921f      	str	r2, [sp, #124]	; 0x7c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007368:	f003 0308 	and.w	r3, r3, #8
 800736c:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800736e:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007372:	2312      	movs	r3, #18
 8007374:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007378:	f7fa fb26 	bl	80019c8 <HAL_GPIO_Init>
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800737c:	2310      	movs	r3, #16
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800737e:	e9cb 7545 	strd	r7, r5, [fp, #276]	; 0x114
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007382:	e9cb 7747 	strd	r7, r7, [fp, #284]	; 0x11c
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007386:	e9cb 7749 	strd	r7, r7, [fp, #292]	; 0x124
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800738a:	f8cb 3110 	str.w	r3, [fp, #272]	; 0x110
    __HAL_RCC_I2C1_CLK_ENABLE();
 800738e:	69e3      	ldr	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8007390:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800748c <main+0x784>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007394:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007398:	61e3      	str	r3, [r4, #28]
 800739a:	69e3      	ldr	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800739c:	4640      	mov	r0, r8
    __HAL_RCC_I2C1_CLK_ENABLE();
 800739e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073a2:	930d      	str	r3, [sp, #52]	; 0x34
 80073a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80073a6:	4b3a      	ldr	r3, [pc, #232]	; (8007490 <main+0x788>)
 80073a8:	f8cb 310c 	str.w	r3, [fp, #268]	; 0x10c
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80073ac:	f7fa fae2 	bl	8001974 <HAL_DMA_Init.constprop.0>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d15e      	bne.n	8007472 <main+0x76a>
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80073b4:	4b37      	ldr	r3, [pc, #220]	; (8007494 <main+0x78c>)
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80073b6:	f8cb 515c 	str.w	r5, [fp, #348]	; 0x15c
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80073ba:	f108 0544 	add.w	r5, r8, #68	; 0x44
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80073be:	e9cb 0055 	strd	r0, r0, [fp, #340]	; 0x154
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80073c2:	e9cb 0058 	strd	r0, r0, [fp, #352]	; 0x160
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80073c6:	e9cb 005a 	strd	r0, r0, [fp, #360]	; 0x168
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80073ca:	f5a8 7484 	sub.w	r4, r8, #264	; 0x108
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80073ce:	4628      	mov	r0, r5
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80073d0:	f8cb 8038 	str.w	r8, [fp, #56]	; 0x38
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80073d4:	f8cb 3150 	str.w	r3, [fp, #336]	; 0x150
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80073d8:	f8cb 4130 	str.w	r4, [fp, #304]	; 0x130
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80073dc:	f7fa faca 	bl	8001974 <HAL_DMA_Init.constprop.0>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	f040 85ea 	bne.w	8007fba <main+0x12b2>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80073e6:	f8cb 503c 	str.w	r5, [fp, #60]	; 0x3c
 80073ea:	f8cb 4174 	str.w	r4, [fp, #372]	; 0x174
}
 80073ee:	e5ca      	b.n	8006f86 <main+0x27e>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80073f0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80073f4:	fb04 f303 	mul.w	r3, r4, r3
 80073f8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80073fc:	fbb3 f3f4 	udiv	r3, r3, r4
 8007400:	3301      	adds	r3, #1
 8007402:	430b      	orrs	r3, r1
 8007404:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007406:	69d1      	ldr	r1, [r2, #28]
 8007408:	f8db 700c 	ldr.w	r7, [fp, #12]
 800740c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8007410:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8007414:	b9ff      	cbnz	r7, 8007456 <main+0x74e>
 8007416:	3801      	subs	r0, #1
 8007418:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800741c:	fbb0 f4f4 	udiv	r4, r0, r4
 8007420:	0524      	lsls	r4, r4, #20
 8007422:	f514 1f80 	cmn.w	r4, #1048576	; 0x100000
 8007426:	bf14      	ite	ne
 8007428:	2400      	movne	r4, #0
 800742a:	2401      	moveq	r4, #1
 800742c:	006b      	lsls	r3, r5, #1
 800742e:	bb14      	cbnz	r4, 8007476 <main+0x76e>
 8007430:	2f00      	cmp	r7, #0
 8007432:	f040 8091 	bne.w	8007558 <main+0x850>
 8007436:	442b      	add	r3, r5
 8007438:	fbb0 f3f3 	udiv	r3, r0, r3
 800743c:	3301      	adds	r3, #1
 800743e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007446:	e5e3      	b.n	8007010 <main+0x308>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007448:	4b13      	ldr	r3, [pc, #76]	; (8007498 <main+0x790>)
 800744a:	fb03 f606 	mul.w	r6, r3, r6
 800744e:	e513      	b.n	8006e78 <main+0x170>
 8007450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007454:	e5dc      	b.n	8007010 <main+0x308>
 8007456:	2419      	movs	r4, #25
 8007458:	fb05 f404 	mul.w	r4, r5, r4
 800745c:	3801      	subs	r0, #1
 800745e:	fbb0 f4f4 	udiv	r4, r0, r4
 8007462:	0524      	lsls	r4, r4, #20
 8007464:	f514 1f80 	cmn.w	r4, #1048576	; 0x100000
 8007468:	bf14      	ite	ne
 800746a:	2400      	movne	r4, #0
 800746c:	2401      	moveq	r4, #1
 800746e:	006b      	lsls	r3, r5, #1
 8007470:	e7dd      	b.n	800742e <main+0x726>
 8007472:	b672      	cpsid	i
 8007474:	e7fe      	b.n	8007474 <main+0x76c>
 8007476:	2301      	movs	r3, #1
 8007478:	e5ca      	b.n	8007010 <main+0x308>
 800747a:	bf00      	nop
 800747c:	40013800 	.word	0x40013800
 8007480:	40012c00 	.word	0x40012c00
 8007484:	40000400 	.word	0x40000400
 8007488:	007a1200 	.word	0x007a1200
 800748c:	2000030c 	.word	0x2000030c
 8007490:	4002006c 	.word	0x4002006c
 8007494:	40020080 	.word	0x40020080
 8007498:	003d0900 	.word	0x003d0900
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800749c:	2203      	movs	r2, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800749e:	951e      	str	r5, [sp, #120]	; 0x78
    huart->Lock = HAL_UNLOCKED;
 80074a0:	f88b 5104 	strb.w	r5, [fp, #260]	; 0x104
    __HAL_RCC_USART1_CLK_ENABLE();
 80074a4:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074a6:	4853      	ldr	r0, [pc, #332]	; (80075f4 <main+0x8ec>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80074a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074ac:	61bb      	str	r3, [r7, #24]
 80074ae:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074b0:	a91c      	add	r1, sp, #112	; 0x70
    __HAL_RCC_USART1_CLK_ENABLE();
 80074b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074b6:	9310      	str	r3, [sp, #64]	; 0x40
 80074b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074ba:	69bb      	ldr	r3, [r7, #24]
    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80074bc:	2480      	movs	r4, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074be:	f043 0304 	orr.w	r3, r3, #4
 80074c2:	61bb      	str	r3, [r7, #24]
 80074c4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80074c6:	921f      	str	r2, [sp, #124]	; 0x7c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074c8:	f003 0304 	and.w	r3, r3, #4
 80074cc:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80074ce:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80074d4:	2302      	movs	r3, #2
 80074d6:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074da:	f7fa fa75 	bl	80019c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80074de:	2300      	movs	r3, #0
 80074e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e4:	951e      	str	r5, [sp, #120]	; 0x78
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80074e6:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ea:	f7fa fa6d 	bl	80019c8 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80074ee:	e9cb 5467 	strd	r5, r4, [fp, #412]	; 0x19c
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80074f2:	e9cb 5569 	strd	r5, r5, [fp, #420]	; 0x1a4
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80074f6:	e9cb 556b 	strd	r5, r5, [fp, #428]	; 0x1ac
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80074fa:	2510      	movs	r5, #16
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80074fc:	4f3e      	ldr	r7, [pc, #248]	; (80075f8 <main+0x8f0>)
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80074fe:	4b3f      	ldr	r3, [pc, #252]	; (80075fc <main+0x8f4>)
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007500:	4638      	mov	r0, r7
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007502:	e9cb 3565 	strd	r3, r5, [fp, #404]	; 0x194
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007506:	f7fa fa35 	bl	8001974 <HAL_DMA_Init.constprop.0>
 800750a:	2800      	cmp	r0, #0
 800750c:	d169      	bne.n	80075e2 <main+0x8da>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800750e:	4b3c      	ldr	r3, [pc, #240]	; (8007600 <main+0x8f8>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007510:	f8cb 41e4 	str.w	r4, [fp, #484]	; 0x1e4
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007514:	f107 0444 	add.w	r4, r7, #68	; 0x44
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007518:	e9cb 0077 	strd	r0, r0, [fp, #476]	; 0x1dc
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800751c:	e9cb 007a 	strd	r0, r0, [fp, #488]	; 0x1e8
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007520:	e9cb 007c 	strd	r0, r0, [fp, #496]	; 0x1f0
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007524:	f8cb 70fc 	str.w	r7, [fp, #252]	; 0xfc
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007528:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800752a:	3fcc      	subs	r7, #204	; 0xcc
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800752c:	f8cb 31d8 	str.w	r3, [fp, #472]	; 0x1d8
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007530:	f8cb 71b8 	str.w	r7, [fp, #440]	; 0x1b8
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007534:	f7fa fa1e 	bl	8001974 <HAL_DMA_Init.constprop.0>
 8007538:	2800      	cmp	r0, #0
 800753a:	d150      	bne.n	80075de <main+0x8d6>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800753c:	f8cb 4100 	str.w	r4, [fp, #256]	; 0x100
 8007540:	f8cb 71fc 	str.w	r7, [fp, #508]	; 0x1fc
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007544:	e5fa      	b.n	800713c <main+0x434>
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007546:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	4a2d      	ldr	r2, [pc, #180]	; (8007604 <main+0x8fc>)
 800754e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007552:	5cd3      	ldrb	r3, [r2, r3]
 8007554:	40de      	lsrs	r6, r3
 8007556:	e61e      	b.n	8007196 <main+0x48e>
 8007558:	2319      	movs	r3, #25
 800755a:	fb05 f303 	mul.w	r3, r5, r3
 800755e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007562:	3301      	adds	r3, #1
 8007564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007568:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800756c:	e550      	b.n	8007010 <main+0x308>
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800756e:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007572:	2280      	movs	r2, #128	; 0x80
  hdma->Lock = HAL_UNLOCKED;
 8007574:	f8ab 323c 	strh.w	r3, [fp, #572]	; 0x23c
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007578:	e9cb 238a 	strd	r2, r3, [fp, #552]	; 0x228
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800757c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007580:	f8cb 3230 	str.w	r3, [fp, #560]	; 0x230
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007584:	2304      	movs	r3, #4
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007586:	e9cb 0088 	strd	r0, r0, [fp, #544]	; 0x220
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800758a:	e9cb 008d 	strd	r0, r0, [fp, #564]	; 0x234
 800758e:	f8cb 325c 	str.w	r3, [fp, #604]	; 0x25c
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007592:	4b1d      	ldr	r3, [pc, #116]	; (8007608 <main+0x900>)
    htim->Lock = HAL_UNLOCKED;
 8007594:	f88b 0094 	strb.w	r0, [fp, #148]	; 0x94
 8007598:	6999      	ldr	r1, [r3, #24]
  hdma->DmaBaseAddress = DMA1;
 800759a:	4a1c      	ldr	r2, [pc, #112]	; (800760c <main+0x904>)
 800759c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80075a0:	f8cb 2258 	str.w	r2, [fp, #600]	; 0x258
 80075a4:	6199      	str	r1, [r3, #24]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075ac:	9311      	str	r3, [sp, #68]	; 0x44
 80075ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
  tmp = hdma->Instance->CCR;
 80075b0:	69d3      	ldr	r3, [r2, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80075b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80075b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80075ba:	f443 63b0 	orr.w	r3, r3, #1408	; 0x580
  hdma->Instance->CCR = tmp;
 80075be:	61d3      	str	r3, [r2, #28]
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80075c0:	4b13      	ldr	r3, [pc, #76]	; (8007610 <main+0x908>)
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075c2:	f8cb 0254 	str.w	r0, [fp, #596]	; 0x254
 80075c6:	f8cb 307c 	str.w	r3, [fp, #124]	; 0x7c
 80075ca:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80075ce:	f8cb 3240 	str.w	r3, [fp, #576]	; 0x240
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80075d2:	4b10      	ldr	r3, [pc, #64]	; (8007614 <main+0x90c>)
 80075d4:	f8cb 321c 	str.w	r3, [fp, #540]	; 0x21c
}
 80075d8:	e622      	b.n	8007220 <main+0x518>
 80075da:	b672      	cpsid	i
 80075dc:	e7fe      	b.n	80075dc <main+0x8d4>
 80075de:	b672      	cpsid	i
 80075e0:	e7fe      	b.n	80075e0 <main+0x8d8>
 80075e2:	b672      	cpsid	i
 80075e4:	e7fe      	b.n	80075e4 <main+0x8dc>
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    htim->Instance->SMCR = tmpsmcr;
 80075ea:	609a      	str	r2, [r3, #8]
 80075ec:	e680      	b.n	80072f0 <main+0x5e8>
 80075ee:	b672      	cpsid	i
 80075f0:	e7fe      	b.n	80075f0 <main+0x8e8>
 80075f2:	bf00      	nop
 80075f4:	40010800 	.word	0x40010800
 80075f8:	20000394 	.word	0x20000394
 80075fc:	40020044 	.word	0x40020044
 8007600:	40020058 	.word	0x40020058
 8007604:	0800d520 	.word	0x0800d520
 8007608:	40021000 	.word	0x40021000
 800760c:	40020000 	.word	0x40020000
 8007610:	2000041c 	.word	0x2000041c
 8007614:	4002001c 	.word	0x4002001c
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007618:	f89b 2094 	ldrb.w	r2, [fp, #148]	; 0x94
 800761c:	2a01      	cmp	r2, #1
 800761e:	f000 84ce 	beq.w	8007fbe <main+0x12b6>
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007622:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007626:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58

  __HAL_UNLOCK(htim);
 800762a:	f88b 0094 	strb.w	r0, [fp, #148]	; 0x94
  htim->Instance->BDTR = tmpbdtr;
 800762e:	645a      	str	r2, [r3, #68]	; 0x44
	HAL_TIM_MspPostInit(&htim1);
 8007630:	f7fa fcc0 	bl	8001fb4 <HAL_TIM_MspPostInit.constprop.0>
 8007634:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007638:	4bd5      	ldr	r3, [pc, #852]	; (8007990 <main+0xc88>)
 800763a:	611a      	str	r2, [r3, #16]
 800763c:	f8db 2000 	ldr.w	r2, [fp]
 8007640:	f8db 3000 	ldr.w	r3, [fp]
  while ((HAL_GetTick() - tickstart) < wait)
 8007644:	1a9b      	subs	r3, r3, r2
 8007646:	2bc8      	cmp	r3, #200	; 0xc8
 8007648:	d9fa      	bls.n	8007640 <main+0x938>
    GPIOx->BSRR = GPIO_Pin;
 800764a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800764e:	4dd0      	ldr	r5, [pc, #832]	; (8007990 <main+0xc88>)
{	
	LCD_RST_R
	HAL_Delay(200);
	LCD_RST_S
	
  LCD_Send_Cmd(HX8357_SLPOUT);
 8007650:	2011      	movs	r0, #17
 8007652:	612b      	str	r3, [r5, #16]
 8007654:	f7f8 fe32 	bl	80002bc <LCD_Send_Cmd>
  HAL_Delay(120);
 8007658:	2078      	movs	r0, #120	; 0x78
 800765a:	f7f8 fd79 	bl	8000150 <HAL_Delay>
	LCD_Send_Cmd(HX8357_COLMOD);
 800765e:	203a      	movs	r0, #58	; 0x3a
 8007660:	f7f8 fe2c 	bl	80002bc <LCD_Send_Cmd>
	LCD_Send_Dat(0x55);
 8007664:	2055      	movs	r0, #85	; 0x55
 8007666:	f7f8 fe89 	bl	800037c <LCD_Send_Dat>
  HAL_Delay(5);
 800766a:	2005      	movs	r0, #5
 800766c:	f7f8 fd70 	bl	8000150 <HAL_Delay>
  LCD_Send_Cmd(HX8357_DISPON);
 8007670:	2029      	movs	r0, #41	; 0x29
 8007672:	f7f8 fe23 	bl	80002bc <LCD_Send_Cmd>
	LCD_Orientation(DEFAULT_ORIENTATION);
}

void LCD_Orientation(uint8_t orientation)
{
	LCD_Send_Cmd(HX8357_MADCTL);
 8007676:	2036      	movs	r0, #54	; 0x36
 8007678:	f7f8 fe20 	bl	80002bc <LCD_Send_Cmd>
	switch (orientation)
	{
	case 0:
	if (BGR) LCD_Send_Dat(MADCTL_BGR);
 800767c:	2008      	movs	r0, #8
 800767e:	f7f8 fe7d 	bl	800037c <LCD_Send_Dat>
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8007682:	2100      	movs	r1, #0
 8007684:	f240 13df 	movw	r3, #479	; 0x1df
 8007688:	f240 123f 	movw	r2, #319	; 0x13f
 800768c:	4608      	mov	r0, r1
 800768e:	f44f 3416 	mov.w	r4, #153600	; 0x25800
 8007692:	2701      	movs	r7, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007694:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 8007698:	f7f8 fef8 	bl	800048c <LCD_Window>
    GPIOx->BSRR = GPIO_Pin;
 800769c:	612f      	str	r7, [r5, #16]
	LCD_Bus(dat);
 800769e:	201f      	movs	r0, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80076a0:	612e      	str	r6, [r5, #16]
 80076a2:	f7f8 fd93 	bl	80001cc <LCD_Bus>
 80076a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80076aa:	612b      	str	r3, [r5, #16]
    GPIOx->BSRR = GPIO_Pin;
 80076ac:	2302      	movs	r3, #2
 80076ae:	612b      	str	r3, [r5, #16]
 80076b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80076b4:	3c01      	subs	r4, #1
 80076b6:	612b      	str	r3, [r5, #16]
 80076b8:	d1f0      	bne.n	800769c <main+0x994>
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80076ba:	2101      	movs	r1, #1
 80076bc:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 80076c0:	f44f 729f 	mov.w	r2, #318	; 0x13e
 80076c4:	4608      	mov	r0, r1
 80076c6:	460f      	mov	r7, r1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80076c8:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 80076cc:	4db1      	ldr	r5, [pc, #708]	; (8007994 <main+0xc8c>)
    GPIOx->BSRR = GPIO_Pin;
 80076ce:	4cb0      	ldr	r4, [pc, #704]	; (8007990 <main+0xc88>)
 80076d0:	f7f8 fedc 	bl	800048c <LCD_Window>
 80076d4:	6127      	str	r7, [r4, #16]
	LCD_Bus(dat);
 80076d6:	2000      	movs	r0, #0
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80076d8:	6126      	str	r6, [r4, #16]
 80076da:	f7f8 fd77 	bl	80001cc <LCD_Bus>
 80076de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80076e2:	6123      	str	r3, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 80076e4:	2302      	movs	r3, #2
 80076e6:	6123      	str	r3, [r4, #16]
 80076e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80076ec:	3d01      	subs	r5, #1
 80076ee:	6123      	str	r3, [r4, #16]
 80076f0:	d1f0      	bne.n	80076d4 <main+0x9cc>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_48, 1, RED);
 80076f2:	217f      	movs	r1, #127	; 0x7f
 80076f4:	2014      	movs	r0, #20
 80076f6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80076fa:	4aa7      	ldr	r2, [pc, #668]	; (8007998 <main+0xc90>)
 80076fc:	f7fd ff6c 	bl	80055d8 <LCD_Font.constprop.2>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_48, 1, BLACK);
 8007700:	462b      	mov	r3, r5
 8007702:	217f      	movs	r1, #127	; 0x7f
 8007704:	2014      	movs	r0, #20
 8007706:	4aa4      	ldr	r2, [pc, #656]	; (8007998 <main+0xc90>)
 8007708:	f7fd ff66 	bl	80055d8 <LCD_Font.constprop.2>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, RED);
 800770c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8007710:	217f      	movs	r1, #127	; 0x7f
 8007712:	2014      	movs	r0, #20
 8007714:	4aa1      	ldr	r2, [pc, #644]	; (800799c <main+0xc94>)
 8007716:	f7fd ff5f 	bl	80055d8 <LCD_Font.constprop.2>
 800771a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800771e:	4ea0      	ldr	r6, [pc, #640]	; (80079a0 <main+0xc98>)
	for (uint16_t i = 0; i < 156; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8007720:	4620      	mov	r0, r4
 8007722:	f7fd f93b 	bl	800499c <AT24XX_Read>
 8007726:	4605      	mov	r5, r0
 8007728:	1c60      	adds	r0, r4, #1
 800772a:	b280      	uxth	r0, r0
 800772c:	f7fd f936 	bl	800499c <AT24XX_Read>
 8007730:	3402      	adds	r4, #2
 8007732:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 8007734:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
	for (uint16_t i = 0; i < 156; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8007738:	f5b4 6fa4 	cmp.w	r4, #1312	; 0x520
 800773c:	f826 5b02 	strh.w	r5, [r6], #2
 8007740:	d1ee      	bne.n	8007720 <main+0xa18>
 8007742:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	for (uint16_t i = 0; i < 156; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8007746:	f640 1708 	movw	r7, #2312	; 0x908
	for (uint16_t i = 0; i < 156; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 800774a:	4e96      	ldr	r6, [pc, #600]	; (80079a4 <main+0xc9c>)
	for (uint16_t i = 0; i < 156; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 800774c:	4620      	mov	r0, r4
 800774e:	f7fd f925 	bl	800499c <AT24XX_Read>
 8007752:	4605      	mov	r5, r0
 8007754:	1c60      	adds	r0, r4, #1
 8007756:	b280      	uxth	r0, r0
 8007758:	f7fd f920 	bl	800499c <AT24XX_Read>
 800775c:	3402      	adds	r4, #2
 800775e:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 8007760:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
	for (uint16_t i = 0; i < 156; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8007764:	42bc      	cmp	r4, r7
 8007766:	f826 5b02 	strh.w	r5, [r6], #2
 800776a:	d1ef      	bne.n	800774c <main+0xa44>
 800776c:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8007770:	4e8d      	ldr	r6, [pc, #564]	; (80079a8 <main+0xca0>)
	for (uint16_t i = 0; i < 156; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8007772:	4620      	mov	r0, r4
 8007774:	f7fd f912 	bl	800499c <AT24XX_Read>
 8007778:	4605      	mov	r5, r0
 800777a:	1c60      	adds	r0, r4, #1
 800777c:	b280      	uxth	r0, r0
 800777e:	f7fd f90d 	bl	800499c <AT24XX_Read>
 8007782:	3402      	adds	r4, #2
 8007784:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 8007786:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
	for (uint16_t i = 0; i < 156; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 800778a:	f5b4 6f4f 	cmp.w	r4, #3312	; 0xcf0
 800778e:	f826 5b02 	strh.w	r5, [r6], #2
 8007792:	d1ee      	bne.n	8007772 <main+0xa6a>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, BLACK);
 8007794:	2300      	movs	r3, #0
 8007796:	217f      	movs	r1, #127	; 0x7f
 8007798:	2014      	movs	r0, #20
 800779a:	4a80      	ldr	r2, [pc, #512]	; (800799c <main+0xc94>)
 800779c:	f7fd ff1c 	bl	80055d8 <LCD_Font.constprop.2>
}

void BME280_Init(void) {
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 80077a0:	f240 53f2 	movw	r3, #1522	; 0x5f2
    cmd[1] = 0x05; // Humidity oversampling x16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80077a4:	2202      	movs	r2, #2
 80077a6:	20ec      	movs	r0, #236	; 0xec
 80077a8:	a91c      	add	r1, sp, #112	; 0x70
    cmd[0] = 0xF2; // ctrl_hum
 80077aa:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80077ae:	f7fd fbed 	bl	8004f8c <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF4; // ctrl_meas
 80077b2:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80077b6:	2202      	movs	r2, #2
 80077b8:	20ec      	movs	r0, #236	; 0xec
 80077ba:	a91c      	add	r1, sp, #112	; 0x70
    cmd[0] = 0xF4; // ctrl_meas
 80077bc:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80077c0:	f7fd fbe4 	bl	8004f8c <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF5; // config
 80077c4:	f24a 03f5 	movw	r3, #41205	; 0xa0f5
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80077c8:	2202      	movs	r2, #2
 80077ca:	20ec      	movs	r0, #236	; 0xec
 80077cc:	a91c      	add	r1, sp, #112	; 0x70
    cmd[0] = 0xF5; // config
 80077ce:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80077d2:	f7fd fbdb 	bl	8004f8c <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0x88; // read dig_T regs
 80077d6:	2388      	movs	r3, #136	; 0x88
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80077d8:	2201      	movs	r2, #1
 80077da:	20ec      	movs	r0, #236	; 0xec
 80077dc:	a91c      	add	r1, sp, #112	; 0x70
    cmd[0] = 0x88; // read dig_T regs
 80077de:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80077e2:	f7fd fbd3 	bl	8004f8c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 80077e6:	2206      	movs	r2, #6
 80077e8:	20ec      	movs	r0, #236	; 0xec
 80077ea:	a91c      	add	r1, sp, #112	; 0x70
 80077ec:	f7fd f9bc 	bl	8004b68 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_T1 = (cmd[1] << 8) | cmd[0];
    dig_T2 = (cmd[3] << 8) | cmd[2];
    dig_T3 = (cmd[5] << 8) | cmd[4];

    cmd[0] = 0x8E; // read dig_P regs
 80077f0:	238e      	movs	r3, #142	; 0x8e
    dig_T1 = (cmd[1] << 8) | cmd[0];
 80077f2:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
    cmd[0] = 0x8E; // read dig_P regs
 80077f6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    dig_T2 = (cmd[3] << 8) | cmd[2];
 80077fa:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80077fe:	20ec      	movs	r0, #236	; 0xec
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8007800:	f8ab 360a 	strh.w	r3, [fp, #1546]	; 0x60a
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8007804:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8007808:	f8ab 2608 	strh.w	r2, [fp, #1544]	; 0x608
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800780c:	a91c      	add	r1, sp, #112	; 0x70
 800780e:	2201      	movs	r2, #1
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8007810:	f8ab 360c 	strh.w	r3, [fp, #1548]	; 0x60c
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007814:	f7fd fbba 	bl	8004f8c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 8007818:	2212      	movs	r2, #18
 800781a:	20ec      	movs	r0, #236	; 0xec
 800781c:	a91c      	add	r1, sp, #112	; 0x70
 800781e:	f7fd f9a3 	bl	8004b68 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    dig_P6 = (cmd[11] << 8) | cmd[10];
    dig_P7 = (cmd[13] << 8) | cmd[12];
    dig_P8 = (cmd[15] << 8) | cmd[14];
    dig_P9 = (cmd[17] << 8) | cmd[16];

    cmd[0] = 0xA1; // read dig_H regs
 8007822:	23a1      	movs	r3, #161	; 0xa1
    dig_P1 = (cmd[1] << 8) | cmd[0];
 8007824:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
    cmd[0] = 0xA1; // read dig_H regs
 8007828:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    dig_P2 = (cmd[3] << 8) | cmd[2];
 800782c:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007830:	20ec      	movs	r0, #236	; 0xec
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8007832:	f8ab 3610 	strh.w	r3, [fp, #1552]	; 0x610
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8007836:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
    dig_P1 = (cmd[1] << 8) | cmd[0];
 800783a:	f8ab 260e 	strh.w	r2, [fp, #1550]	; 0x60e
    dig_P3 = (cmd[5] << 8) | cmd[4];
 800783e:	f8ab 3612 	strh.w	r3, [fp, #1554]	; 0x612
    dig_P4 = (cmd[7] << 8) | cmd[6];
 8007842:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007846:	2201      	movs	r2, #1
    dig_P4 = (cmd[7] << 8) | cmd[6];
 8007848:	f8ab 3614 	strh.w	r3, [fp, #1556]	; 0x614
    dig_P5 = (cmd[9] << 8) | cmd[8];
 800784c:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007850:	a91c      	add	r1, sp, #112	; 0x70
    dig_P5 = (cmd[9] << 8) | cmd[8];
 8007852:	f8ab 3616 	strh.w	r3, [fp, #1558]	; 0x616
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8007856:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800785a:	f8ab 3618 	strh.w	r3, [fp, #1560]	; 0x618
    dig_P7 = (cmd[13] << 8) | cmd[12];
 800785e:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8007862:	f8ab 361a 	strh.w	r3, [fp, #1562]	; 0x61a
    dig_P8 = (cmd[15] << 8) | cmd[14];
 8007866:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
 800786a:	f8ab 361c 	strh.w	r3, [fp, #1564]	; 0x61c
    dig_P9 = (cmd[17] << 8) | cmd[16];
 800786e:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8007872:	f8ab 361e 	strh.w	r3, [fp, #1566]	; 0x61e
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007876:	f7fd fb89 	bl	8004f8c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800787a:	2201      	movs	r2, #1
 800787c:	20ec      	movs	r0, #236	; 0xec
 800787e:	a91c      	add	r1, sp, #112	; 0x70
 8007880:	f7fd f972 	bl	8004b68 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    cmd[1] = 0xE1; // read dig_H regs
 8007884:	23e1      	movs	r3, #225	; 0xe1

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8007886:	2201      	movs	r2, #1
 8007888:	20ec      	movs	r0, #236	; 0xec
 800788a:	f10d 0171 	add.w	r1, sp, #113	; 0x71
    cmd[1] = 0xE1; // read dig_H regs
 800788e:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8007892:	f7fd fb7b 	bl	8004f8c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 8007896:	2207      	movs	r2, #7
 8007898:	20ec      	movs	r0, #236	; 0xec
 800789a:	f10d 0171 	add.w	r1, sp, #113	; 0x71
 800789e:	f7fd f963 	bl	8004b68 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_H1 = cmd[0];
 80078a2:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
    dig_H2 = (cmd[2] << 8) | cmd[1];
    dig_H3 = cmd[3];
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80078a6:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
    dig_H1 = cmd[0];
 80078aa:	f8ab 2620 	strh.w	r2, [fp, #1568]	; 0x620
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80078ae:	f8bd 2071 	ldrh.w	r2, [sp, #113]	; 0x71
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80078b2:	f89d 4074 	ldrb.w	r4, [sp, #116]	; 0x74
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80078b6:	f8ab 2622 	strh.w	r2, [fp, #1570]	; 0x622
    dig_H3 = cmd[3];
 80078ba:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80078be:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
    dig_H3 = cmd[3];
 80078c2:	f8ab 2624 	strh.w	r2, [fp, #1572]	; 0x624
    dig_H6 = cmd[7];
 80078c6:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078ca:	f89b 1096 	ldrb.w	r1, [fp, #150]	; 0x96
 80078ce:	f8ab 262a 	strh.w	r2, [fp, #1578]	; 0x62a
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80078d2:	f003 020f 	and.w	r2, r3, #15
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80078d6:	091b      	lsrs	r3, r3, #4
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80078d8:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80078dc:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80078e0:	2901      	cmp	r1, #1
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80078e2:	f8ab 2626 	strh.w	r2, [fp, #1574]	; 0x626
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80078e6:	f8ab 3628 	strh.w	r3, [fp, #1576]	; 0x628
 80078ea:	d121      	bne.n	8007930 <main+0xc28>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ec:	2302      	movs	r3, #2
 80078ee:	f88b 3096 	strb.w	r3, [fp, #150]	; 0x96
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078f2:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078f6:	492d      	ldr	r1, [pc, #180]	; (80079ac <main+0xca4>)
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078f8:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078fa:	428b      	cmp	r3, r1
  TIMx->CCER &= ~tmp;
 80078fc:	f022 0201 	bic.w	r2, r2, #1
 8007900:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007902:	6a1a      	ldr	r2, [r3, #32]
 8007904:	f042 0201 	orr.w	r2, r2, #1
 8007908:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800790a:	f001 805e 	beq.w	80089ca <main+0x1cc2>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800790e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007912:	f001 805e 	beq.w	80089d2 <main+0x1cca>
 8007916:	4a26      	ldr	r2, [pc, #152]	; (80079b0 <main+0xca8>)
 8007918:	4293      	cmp	r3, r2
 800791a:	f001 805a 	beq.w	80089d2 <main+0x1cca>
 800791e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007922:	4293      	cmp	r3, r2
 8007924:	f001 8055 	beq.w	80089d2 <main+0x1cca>
    __HAL_TIM_ENABLE(htim);
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	f042 0201 	orr.w	r2, r2, #1
 800792e:	601a      	str	r2, [r3, #0]
  if (huart->RxState == HAL_UART_STATE_READY)
 8007930:	f89b 3106 	ldrb.w	r3, [fp, #262]	; 0x106
 8007934:	2b20      	cmp	r3, #32
 8007936:	d122      	bne.n	800797e <main+0xc76>
    __HAL_LOCK(huart);
 8007938:	f89b 3104 	ldrb.w	r3, [fp, #260]	; 0x104
 800793c:	2b01      	cmp	r3, #1
 800793e:	d01e      	beq.n	800797e <main+0xc76>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007940:	2200      	movs	r2, #0
  huart->RxXferSize = Size;
 8007942:	2101      	movs	r1, #1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007944:	2022      	movs	r0, #34	; 0x22
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007946:	f8db 30c8 	ldr.w	r3, [fp, #200]	; 0xc8
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800794a:	f8cb 20f8 	str.w	r2, [fp, #248]	; 0xf8
  __HAL_UNLOCK(huart);
 800794e:	f88b 2104 	strb.w	r2, [fp, #260]	; 0x104
  huart->RxXferCount = Size;
 8007952:	f8ab 10f6 	strh.w	r1, [fp, #246]	; 0xf6
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007956:	f8cb 2108 	str.w	r2, [fp, #264]	; 0x108
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800795a:	f88b 0106 	strb.w	r0, [fp, #262]	; 0x106
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800795e:	68da      	ldr	r2, [r3, #12]
  huart->pRxBuffPtr = pData;
 8007960:	4c14      	ldr	r4, [pc, #80]	; (80079b4 <main+0xcac>)
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  huart->pRxBuffPtr = pData;
 8007966:	f8cb 40f0 	str.w	r4, [fp, #240]	; 0xf0
  huart->RxXferSize = Size;
 800796a:	f8ab 10f4 	strh.w	r1, [fp, #244]	; 0xf4
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800796e:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007970:	695a      	ldr	r2, [r3, #20]
 8007972:	430a      	orrs	r2, r1
 8007974:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007976:	68da      	ldr	r2, [r3, #12]
 8007978:	f042 0220 	orr.w	r2, r2, #32
 800797c:	60da      	str	r2, [r3, #12]
	uint8_t uartTransmit[] = "UART OK\r\n";
 800797e:	4a0e      	ldr	r2, [pc, #56]	; (80079b8 <main+0xcb0>)
 8007980:	ab12      	add	r3, sp, #72	; 0x48
 8007982:	ca07      	ldmia	r2, {r0, r1, r2}
  if (huart->gState == HAL_UART_STATE_READY)
 8007984:	f89b 4105 	ldrb.w	r4, [fp, #261]	; 0x105
 8007988:	c303      	stmia	r3!, {r0, r1}
 800798a:	2c20      	cmp	r4, #32
 800798c:	e016      	b.n	80079bc <main+0xcb4>
 800798e:	bf00      	nop
 8007990:	40010c00 	.word	0x40010c00
 8007994:	000251c4 	.word	0x000251c4
 8007998:	0801ed04 	.word	0x0801ed04
 800799c:	0801ed14 	.word	0x0801ed14
 80079a0:	20000460 	.word	0x20000460
 80079a4:	20000598 	.word	0x20000598
 80079a8:	200006d0 	.word	0x200006d0
 80079ac:	40012c00 	.word	0x40012c00
 80079b0:	40000400 	.word	0x40000400
 80079b4:	2000082c 	.word	0x2000082c
 80079b8:	0801ed74 	.word	0x0801ed74
 80079bc:	801a      	strh	r2, [r3, #0]
 80079be:	d107      	bne.n	80079d0 <main+0xcc8>
    __HAL_LOCK(huart);
 80079c0:	f89b 3104 	ldrb.w	r3, [fp, #260]	; 0x104
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d003      	beq.n	80079d0 <main+0xcc8>
 80079c8:	210a      	movs	r1, #10
 80079ca:	a812      	add	r0, sp, #72	; 0x48
 80079cc:	f7fd fc9a 	bl	8005304 <HAL_UART_Transmit.part.0.constprop.0.isra.0>
	uint8_t uartTransmitDMA[] = "UART DMA OK\r\n";
 80079d0:	4bd1      	ldr	r3, [pc, #836]	; (8007d18 <main+0x1010>)
 80079d2:	ac18      	add	r4, sp, #96	; 0x60
 80079d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80079d6:	c407      	stmia	r4!, {r0, r1, r2}
  if (huart->gState == HAL_UART_STATE_READY)
 80079d8:	f89b 5105 	ldrb.w	r5, [fp, #261]	; 0x105
 80079dc:	8023      	strh	r3, [r4, #0]
 80079de:	2d20      	cmp	r5, #32
 80079e0:	d154      	bne.n	8007a8c <main+0xd84>
    __HAL_LOCK(huart);
 80079e2:	f89b 3104 	ldrb.w	r3, [fp, #260]	; 0x104
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d050      	beq.n	8007a8c <main+0xd84>
    huart->TxXferSize = Size;
 80079ea:	200e      	movs	r0, #14
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ec:	2100      	movs	r1, #0
    __HAL_LOCK(huart);
 80079ee:	2401      	movs	r4, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079f0:	f04f 0c21 	mov.w	ip, #33	; 0x21
    huart->pTxBuffPtr = pData;
 80079f4:	ab18      	add	r3, sp, #96	; 0x60
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80079f6:	4dc9      	ldr	r5, [pc, #804]	; (8007d1c <main+0x1014>)
    huart->pTxBuffPtr = pData;
 80079f8:	f8cb 30e8 	str.w	r3, [fp, #232]	; 0xe8
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80079fc:	f8db 30fc 	ldr.w	r3, [fp, #252]	; 0xfc
    huart->TxXferCount = Size;
 8007a00:	f8ab 00ee 	strh.w	r0, [fp, #238]	; 0xee
    __HAL_LOCK(huart);
 8007a04:	f88b 4104 	strb.w	r4, [fp, #260]	; 0x104
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a08:	f8cb 1108 	str.w	r1, [fp, #264]	; 0x108
    huart->TxXferSize = Size;
 8007a0c:	f8ab 00ec 	strh.w	r0, [fp, #236]	; 0xec
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a10:	f88b c105 	strb.w	ip, [fp, #261]	; 0x105
    huart->hdmatx->XferAbortCallback = NULL;
 8007a14:	e9c3 510c 	strd	r5, r1, [r3, #48]	; 0x30
  __HAL_LOCK(hdma);
 8007a18:	f893 5020 	ldrb.w	r5, [r3, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007a1c:	4fc0      	ldr	r7, [pc, #768]	; (8007d20 <main+0x1018>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007a1e:	4ec1      	ldr	r6, [pc, #772]	; (8007d24 <main+0x101c>)
 8007a20:	42a5      	cmp	r5, r4
 8007a22:	e9c3 760a 	strd	r7, r6, [r3, #40]	; 0x28
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007a26:	f8db 20c8 	ldr.w	r2, [fp, #200]	; 0xc8
 8007a2a:	d025      	beq.n	8007a78 <main+0xd70>
  if(HAL_DMA_STATE_READY == hdma->State)
 8007a2c:	f893 5021 	ldrb.w	r5, [r3, #33]	; 0x21
  __HAL_LOCK(hdma);
 8007a30:	f883 4020 	strb.w	r4, [r3, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8007a34:	42a5      	cmp	r5, r4
 8007a36:	f040 86b3 	bne.w	80087a0 <main+0x1a98>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a3a:	6399      	str	r1, [r3, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a3c:	2102      	movs	r1, #2
    __HAL_DMA_DISABLE(hdma);
 8007a3e:	681c      	ldr	r4, [r3, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a40:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007a44:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007a46:	408d      	lsls	r5, r1
    __HAL_DMA_DISABLE(hdma);
 8007a48:	6821      	ldr	r1, [r4, #0]
 8007a4a:	f021 0101 	bic.w	r1, r1, #1
 8007a4e:	6021      	str	r1, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007a50:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007a52:	604d      	str	r5, [r1, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a54:	6859      	ldr	r1, [r3, #4]
 8007a56:	1d13      	adds	r3, r2, #4
 8007a58:	2910      	cmp	r1, #16
  hdma->Instance->CNDTR = DataLength;
 8007a5a:	6060      	str	r0, [r4, #4]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8007a5c:	bf13      	iteet	ne
 8007a5e:	a918      	addne	r1, sp, #96	; 0x60
    hdma->Instance->CPAR = DstAddress;
 8007a60:	60a3      	streq	r3, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8007a62:	ab18      	addeq	r3, sp, #96	; 0x60
    hdma->Instance->CPAR = SrcAddress;
 8007a64:	60a1      	strne	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8007a66:	60e3      	str	r3, [r4, #12]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a68:	6823      	ldr	r3, [r4, #0]
 8007a6a:	f043 030e 	orr.w	r3, r3, #14
 8007a6e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	f043 0301 	orr.w	r3, r3, #1
 8007a76:	6023      	str	r3, [r4, #0]
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007a78:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8007a7c:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(huart);
 8007a7e:	2300      	movs	r3, #0
 8007a80:	f88b 3104 	strb.w	r3, [fp, #260]	; 0x104
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a84:	6953      	ldr	r3, [r2, #20]
 8007a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a8a:	6153      	str	r3, [r2, #20]
 8007a8c:	f8df a298 	ldr.w	sl, [pc, #664]	; 8007d28 <main+0x1020>
		if (rx_index != 0) {
 8007a90:	f89b 362d 	ldrb.w	r3, [fp, #1581]	; 0x62d
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f040 85bf 	bne.w	8008618 <main+0x1910>

uint8_t DS3231_getSec(void) {
	DS3231_Update();
 8007a9a:	f7fd fbab 	bl	80051f4 <DS3231_Update>
    return bcdToDec(rtcBuffer[0]);
 8007a9e:	f89b 30a0 	ldrb.w	r3, [fp, #160]	; 0xa0
		if (rtcSecLast != rtcSec) {
 8007aa2:	4aa2      	ldr	r2, [pc, #648]	; (8007d2c <main+0x1024>)
    return ((val / 16 * 10) + (val % 16));
 8007aa4:	091c      	lsrs	r4, r3, #4
 8007aa6:	7a11      	ldrb	r1, [r2, #8]
 8007aa8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8007aac:	f003 040f 	and.w	r4, r3, #15
 8007ab0:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8007ab4:	b2e4      	uxtb	r4, r4
 8007ab6:	42a1      	cmp	r1, r4
		rtcSec = DS3231_getSec();
 8007ab8:	f88b 462e 	strb.w	r4, [fp, #1582]	; 0x62e
		if (rtcSecLast != rtcSec) {
 8007abc:	d0e8      	beq.n	8007a90 <main+0xd88>
}

uint8_t DS3231_getMin(void) {
	DS3231_Update();
 8007abe:	f7fd fb99 	bl	80051f4 <DS3231_Update>
    return bcdToDec(rtcBuffer[1]);
 8007ac2:	f89b 30a1 	ldrb.w	r3, [fp, #161]	; 0xa1
			LCD_Circle(172, 35, 8, 0, 1, ORANGE);
 8007ac6:	2100      	movs	r1, #0
    return ((val / 16 * 10) + (val % 16));
 8007ac8:	091a      	lsrs	r2, r3, #4
 8007aca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007ace:	f003 030f 	and.w	r3, r3, #15
 8007ad2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2008      	movs	r0, #8
 8007ada:	4a95      	ldr	r2, [pc, #596]	; (8007d30 <main+0x1028>)
 8007adc:	9303      	str	r3, [sp, #12]
			rtcMin = DS3231_getMin();
 8007ade:	f88b 3730 	strb.w	r3, [fp, #1840]	; 0x730
			LCD_Circle(172, 35, 8, 0, 1, ORANGE);
 8007ae2:	f7f9 fe53 	bl	800178c <LCD_Circle.constprop.1>
			LCD_Circle(172, 75, 8, 0, 1, ORANGE);
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	2008      	movs	r0, #8
 8007aea:	4a91      	ldr	r2, [pc, #580]	; (8007d30 <main+0x1028>)
 8007aec:	f7f9 fd98 	bl	8001620 <LCD_Circle.constprop.0>
			if (rtcSec % 2 != 0) {
 8007af0:	f014 0401 	ands.w	r4, r4, #1
 8007af4:	f000 83ba 	beq.w	800826c <main+0x1564>
				LCD_Circle(172, 35, 7, 1, 1, ORANGE);
 8007af8:	2101      	movs	r1, #1
 8007afa:	2007      	movs	r0, #7
 8007afc:	4a8c      	ldr	r2, [pc, #560]	; (8007d30 <main+0x1028>)
 8007afe:	f7f9 fe45 	bl	800178c <LCD_Circle.constprop.1>
				LCD_Circle(172, 75, 7, 1, 1, ORANGE);
 8007b02:	4a8b      	ldr	r2, [pc, #556]	; (8007d30 <main+0x1028>)
 8007b04:	2101      	movs	r1, #1
 8007b06:	2007      	movs	r0, #7
 8007b08:	f7f9 fd8a 	bl	8001620 <LCD_Circle.constprop.0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007b0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007b10:	4b88      	ldr	r3, [pc, #544]	; (8007d34 <main+0x102c>)
 8007b12:	611a      	str	r2, [r3, #16]
			if (rtcMinLast != rtcMin) {
 8007b14:	4d85      	ldr	r5, [pc, #532]	; (8007d2c <main+0x1024>)
 8007b16:	9b03      	ldr	r3, [sp, #12]
 8007b18:	7a6c      	ldrb	r4, [r5, #9]
 8007b1a:	429c      	cmp	r4, r3
 8007b1c:	f000 8248 	beq.w	8007fb0 <main+0x12a8>
}

uint8_t DS3231_getHrs(void) {
	DS3231_Update();
 8007b20:	f7fd fb68 	bl	80051f4 <DS3231_Update>
    return bcdToDec(rtcBuffer[2]);
 8007b24:	f89b 30a2 	ldrb.w	r3, [fp, #162]	; 0xa2
				sprintf(clockPrint, "%02d", rtcMinLast);
 8007b28:	4622      	mov	r2, r4
    return ((val / 16 * 10) + (val % 16));
 8007b2a:	0918      	lsrs	r0, r3, #4
 8007b2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007b30:	f003 030f 	and.w	r3, r3, #15
 8007b34:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007b38:	497f      	ldr	r1, [pc, #508]	; (8007d38 <main+0x1030>)
 8007b3a:	a81c      	add	r0, sp, #112	; 0x70
				rtcHrs = DS3231_getHrs();
 8007b3c:	f88b 3731 	strb.w	r3, [fp, #1841]	; 0x731
				sprintf(clockPrint, "%02d", rtcMinLast);
 8007b40:	f001 fe96 	bl	8009870 <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8007b44:	2200      	movs	r2, #0
 8007b46:	20b4      	movs	r0, #180	; 0xb4
 8007b48:	a91c      	add	r1, sp, #112	; 0x70
 8007b4a:	f7fd fcfb 	bl	8005544 <LCD_Font.constprop.1>
				sprintf(clockPrint, "%02d", rtcMin);
 8007b4e:	f89b 2730 	ldrb.w	r2, [fp, #1840]	; 0x730
 8007b52:	4979      	ldr	r1, [pc, #484]	; (8007d38 <main+0x1030>)
 8007b54:	a81c      	add	r0, sp, #112	; 0x70
 8007b56:	f001 fe8b 	bl	8009870 <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8007b5a:	20b4      	movs	r0, #180	; 0xb4
 8007b5c:	4a74      	ldr	r2, [pc, #464]	; (8007d30 <main+0x1028>)
 8007b5e:	a91c      	add	r1, sp, #112	; 0x70
 8007b60:	f7fd fcf0 	bl	8005544 <LCD_Font.constprop.1>
				if (rtcHrsLast != rtcHrs) {
 8007b64:	7aac      	ldrb	r4, [r5, #10]
 8007b66:	f89b 3731 	ldrb.w	r3, [fp, #1841]	; 0x731
 8007b6a:	42a3      	cmp	r3, r4
 8007b6c:	f040 8459 	bne.w	8008422 <main+0x171a>
    cmd[0] = 0xFA; // temp_msb
 8007b70:	23fa      	movs	r3, #250	; 0xfa
				rtcMinLast = rtcMin;
 8007b72:	4a6e      	ldr	r2, [pc, #440]	; (8007d2c <main+0x1024>)
 8007b74:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8007b78:	f89b 3730 	ldrb.w	r3, [fp, #1840]	; 0x730
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007b7c:	20ec      	movs	r0, #236	; 0xec
 8007b7e:	7253      	strb	r3, [r2, #9]
 8007b80:	a915      	add	r1, sp, #84	; 0x54
 8007b82:	2201      	movs	r2, #1
 8007b84:	f7fd fa02 	bl	8004f8c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8007b88:	2203      	movs	r2, #3
 8007b8a:	20ec      	movs	r0, #236	; 0xec
 8007b8c:	f10d 0155 	add.w	r1, sp, #85	; 0x55
 8007b90:	f7fc ffea 	bl	8004b68 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8007b94:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8007b98:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8007b9c:	011b      	lsls	r3, r3, #4
 8007b9e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007ba2:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8007ba6:	f8bb 2608 	ldrh.w	r2, [fp, #1544]	; 0x608
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8007baa:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8007bae:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
 8007bb2:	fb03 f303 	mul.w	r3, r3, r3
 8007bb6:	0b1c      	lsrs	r4, r3, #12
 8007bb8:	f9bb 360c 	ldrsh.w	r3, [fp, #1548]	; 0x60c
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8007bbc:	0052      	lsls	r2, r2, #1
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8007bbe:	fb03 f404 	mul.w	r4, r3, r4
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8007bc2:	f9bb 360a 	ldrsh.w	r3, [fp, #1546]	; 0x60a
 8007bc6:	ebc2 02d1 	rsb	r2, r2, r1, lsr #3
 8007bca:	fb02 f303 	mul.w	r3, r2, r3
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8007bce:	0ba4      	lsrs	r4, r4, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8007bd0:	eb04 24d3 	add.w	r4, r4, r3, lsr #11
    temp = (temp * 5 + 128) >> 8;
 8007bd4:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8007bd8:	3080      	adds	r0, #128	; 0x80
    tempf = (float) temp;
 8007bda:	1200      	asrs	r0, r0, #8
    t_fine = temp;
 8007bdc:	f8cb 473c 	str.w	r4, [fp, #1852]	; 0x73c
    tempf = (float) temp;
 8007be0:	f7ff f81c 	bl	8006c1c <__aeabi_i2f>
    return round_nth((tempf / 100.0f), n);
 8007be4:	4955      	ldr	r1, [pc, #340]	; (8007d3c <main+0x1034>)
 8007be6:	f7fe feab 	bl	8006940 <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8007bea:	f7fe fa5b 	bl	80060a4 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8007bee:	2200      	movs	r2, #0
 8007bf0:	4b53      	ldr	r3, [pc, #332]	; (8007d40 <main+0x1038>)
 8007bf2:	f7fe faaf 	bl	8006154 <__aeabi_dmul>
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	4b52      	ldr	r3, [pc, #328]	; (8007d44 <main+0x103c>)
 8007bfa:	f7fe f8f5 	bl	8005de8 <__adddf3>
 8007bfe:	f005 fc03 	bl	800d408 <floor>
 8007c02:	a343      	add	r3, pc, #268	; (adr r3, 8007d10 <main+0x1008>)
 8007c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c08:	f7fe faa4 	bl	8006154 <__aeabi_dmul>
 8007c0c:	f7fe fd9a 	bl	8006744 <__aeabi_d2f>
 8007c10:	4680      	mov	r8, r0
				temperature = BME280_getTemperature(-1);
 8007c12:	f7fe fa47 	bl	80060a4 <__aeabi_f2d>
    cmd[0] = 0xFD; // hum_msb
 8007c16:	23fd      	movs	r3, #253	; 0xfd
 8007c18:	4606      	mov	r6, r0
 8007c1a:	460f      	mov	r7, r1
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	20ec      	movs	r0, #236	; 0xec
 8007c20:	a915      	add	r1, sp, #84	; 0x54
    cmd[0] = 0xFD; // hum_msb
 8007c22:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8007c26:	e9ca 6700 	strd	r6, r7, [sl]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007c2a:	f7fd f9af 	bl	8004f8c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 8007c2e:	2202      	movs	r2, #2
 8007c30:	20ec      	movs	r0, #236	; 0xec
 8007c32:	f10d 0155 	add.w	r1, sp, #85	; 0x55
 8007c36:	f7fc ff97 	bl	8004b68 <HAL_I2C_Master_Receive.constprop.0.isra.0>
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8007c3a:	f8bb 3624 	ldrh.w	r3, [fp, #1572]	; 0x624
    v_x1 = t_fine - 76800;
 8007c3e:	f5a4 3196 	sub.w	r1, r4, #76800	; 0x12c00
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8007c42:	f9bb 262a 	ldrsh.w	r2, [fp, #1578]	; 0x62a
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8007c46:	fb01 f303 	mul.w	r3, r1, r3
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8007c4a:	fb01 f202 	mul.w	r2, r1, r2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8007c4e:	12db      	asrs	r3, r3, #11
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8007c50:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8007c52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8007c56:	fb02 f303 	mul.w	r3, r2, r3
    hum_raw = (cmd[1] << 8) | cmd[2];
 8007c5a:	f8bd 2055 	ldrh.w	r2, [sp, #85]	; 0x55
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8007c5e:	129b      	asrs	r3, r3, #10
    hum_raw = (cmd[1] << 8) | cmd[2];
 8007c60:	ba52      	rev16	r2, r2
 8007c62:	b290      	uxth	r0, r2
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8007c64:	f9bb 2626 	ldrsh.w	r2, [fp, #1574]	; 0x626
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8007c68:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8007c6c:	0512      	lsls	r2, r2, #20
 8007c6e:	ebc2 3280 	rsb	r2, r2, r0, lsl #14
                                            (int32_t) dig_H2 + 8192) >> 14));
 8007c72:	f9bb 0622 	ldrsh.w	r0, [fp, #1570]	; 0x622
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8007c76:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8007c7a:	fb00 f303 	mul.w	r3, r0, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8007c7e:	f9bb 0628 	ldrsh.w	r0, [fp, #1576]	; 0x628
                                            (int32_t) dig_H2 + 8192) >> 14));
 8007c82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8007c86:	fb01 2210 	mls	r2, r1, r0, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 8007c8a:	139b      	asrs	r3, r3, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8007c8c:	0bd2      	lsrs	r2, r2, #15
 8007c8e:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8007c92:	13da      	asrs	r2, r3, #15
 8007c94:	fb02 f202 	mul.w	r2, r2, r2
 8007c98:	f8bb 1620 	ldrh.w	r1, [fp, #1568]	; 0x620
 8007c9c:	11d0      	asrs	r0, r2, #7
 8007c9e:	fb01 f000 	mul.w	r0, r1, r0
 8007ca2:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 8007ca6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 8007caa:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 8007cae:	bfa8      	it	ge
 8007cb0:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
    humf = (float) (v_x1 >> 12);
 8007cb4:	1300      	asrs	r0, r0, #12
 8007cb6:	f7fe ffb1 	bl	8006c1c <__aeabi_i2f>
    return round_nth((humf / 1024.0f), n);
 8007cba:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 8007cbe:	f7fe fe3f 	bl	8006940 <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8007cc2:	f7fe f9ef 	bl	80060a4 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	4b1d      	ldr	r3, [pc, #116]	; (8007d40 <main+0x1038>)
 8007cca:	f7fe fa43 	bl	8006154 <__aeabi_dmul>
 8007cce:	2200      	movs	r2, #0
 8007cd0:	4b1c      	ldr	r3, [pc, #112]	; (8007d44 <main+0x103c>)
 8007cd2:	f7fe f889 	bl	8005de8 <__adddf3>
 8007cd6:	f005 fb97 	bl	800d408 <floor>
 8007cda:	a30d      	add	r3, pc, #52	; (adr r3, 8007d10 <main+0x1008>)
 8007cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce0:	f7fe fa38 	bl	8006154 <__aeabi_dmul>
 8007ce4:	f7fe fd2e 	bl	8006744 <__aeabi_d2f>
 8007ce8:	4605      	mov	r5, r0
				humidity = BME280_getHumidity(-1);
 8007cea:	f7fe f9db 	bl	80060a4 <__aeabi_f2d>
 8007cee:	4b16      	ldr	r3, [pc, #88]	; (8007d48 <main+0x1040>)
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	e943 0102 	strd	r0, r1, [r3, #-8]
    cmd[0] = 0xF7; // press_msb
 8007cf6:	23f7      	movs	r3, #247	; 0xf7
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007cf8:	20ec      	movs	r0, #236	; 0xec
 8007cfa:	a915      	add	r1, sp, #84	; 0x54
    cmd[0] = 0xF7; // press_msb
 8007cfc:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007d00:	f7fd f944 	bl	8004f8c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8007d04:	2203      	movs	r2, #3
 8007d06:	20ec      	movs	r0, #236	; 0xec
 8007d08:	f10d 0155 	add.w	r1, sp, #85	; 0x55
 8007d0c:	e01e      	b.n	8007d4c <main+0x1044>
 8007d0e:	bf00      	nop
 8007d10:	9999999a 	.word	0x9999999a
 8007d14:	3fb99999 	.word	0x3fb99999
 8007d18:	0801ed80 	.word	0x0801ed80
 8007d1c:	080018f9 	.word	0x080018f9
 8007d20:	08001be5 	.word	0x08001be5
 8007d24:	08001c09 	.word	0x08001c09
 8007d28:	20000940 	.word	0x20000940
 8007d2c:	20000000 	.word	0x20000000
 8007d30:	00ffa500 	.word	0x00ffa500
 8007d34:	40011000 	.word	0x40011000
 8007d38:	0801ed24 	.word	0x0801ed24
 8007d3c:	3c23d70a 	.word	0x3c23d70a
 8007d40:	40240000 	.word	0x40240000
 8007d44:	3fe00000 	.word	0x3fe00000
 8007d48:	20000950 	.word	0x20000950
 8007d4c:	f7fc ff0c 	bl	8004b68 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    var1 = (t_fine >> 1) - 64000;
 8007d50:	1061      	asrs	r1, r4, #1
 8007d52:	f5a1 417a 	sub.w	r1, r1, #64000	; 0xfa00
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8007d56:	1088      	asrs	r0, r1, #2
 8007d58:	fb00 f000 	mul.w	r0, r0, r0
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 8007d5c:	f9bb 3610 	ldrsh.w	r3, [fp, #1552]	; 0x610
 8007d60:	f9bb 2612 	ldrsh.w	r2, [fp, #1554]	; 0x612
 8007d64:	fb01 f303 	mul.w	r3, r1, r3
 8007d68:	1344      	asrs	r4, r0, #13
 8007d6a:	fb04 f202 	mul.w	r2, r4, r2
 8007d6e:	105b      	asrs	r3, r3, #1
 8007d70:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 8007d74:	149b      	asrs	r3, r3, #18
    var1 = ((32768 + var1) * dig_P1) >> 15;
 8007d76:	f8bb 260e 	ldrh.w	r2, [fp, #1550]	; 0x60e
 8007d7a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007d7e:	fb02 f303 	mul.w	r3, r2, r3
    if (var1 == 0) {
 8007d82:	13da      	asrs	r2, r3, #15
 8007d84:	f000 834a 	beq.w	800841c <main+0x1714>
    var2 = var2 + ((var1 * dig_P5) << 1);
 8007d88:	f9bb 3616 	ldrsh.w	r3, [fp, #1558]	; 0x616
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8007d8c:	12c0      	asrs	r0, r0, #11
    var2 = var2 + ((var1 * dig_P5) << 1);
 8007d8e:	fb03 f101 	mul.w	r1, r3, r1
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8007d92:	f9bb 3618 	ldrsh.w	r3, [fp, #1560]	; 0x618
    var2 = var2 + ((var1 * dig_P5) << 1);
 8007d96:	0049      	lsls	r1, r1, #1
 8007d98:	fb03 1100 	mla	r1, r3, r0, r1
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8007d9c:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
 8007da0:	f89d 0056 	ldrb.w	r0, [sp, #86]	; 0x56
 8007da4:	091b      	lsrs	r3, r3, #4
 8007da6:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8007daa:	f9bb 0614 	ldrsh.w	r0, [fp, #1556]	; 0x614
 8007dae:	0400      	lsls	r0, r0, #16
 8007db0:	eb00 01a1 	add.w	r1, r0, r1, asr #2
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8007db4:	f89d 0055 	ldrb.w	r0, [sp, #85]	; 0x55
 8007db8:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 8007dbc:	eb03 3321 	add.w	r3, r3, r1, asr #12
 8007dc0:	4980      	ldr	r1, [pc, #512]	; (8007fc4 <main+0x12bc>)
 8007dc2:	fb01 f303 	mul.w	r3, r1, r3
 8007dc6:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8007dca:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    if (press < 0x80000000) {
 8007dce:	2b00      	cmp	r3, #0
        press = (press / var1) * 2;
 8007dd0:	bfb3      	iteet	lt
 8007dd2:	fbb3 f3f2 	udivlt	r3, r3, r2
        press = (press << 1) / var1;
 8007dd6:	005b      	lslge	r3, r3, #1
 8007dd8:	fbb3 f3f2 	udivge	r3, r3, r2
        press = (press / var1) * 2;
 8007ddc:	005b      	lsllt	r3, r3, #1
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8007dde:	08da      	lsrs	r2, r3, #3
 8007de0:	fb02 f202 	mul.w	r2, r2, r2
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8007de4:	f9bb 161c 	ldrsh.w	r1, [fp, #1564]	; 0x61c
 8007de8:	0898      	lsrs	r0, r3, #2
 8007dea:	fb01 f000 	mul.w	r0, r1, r0
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8007dee:	f9bb 161e 	ldrsh.w	r1, [fp, #1566]	; 0x61e
 8007df2:	0b52      	lsrs	r2, r2, #13
 8007df4:	fb01 f202 	mul.w	r2, r1, r2
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8007df8:	1340      	asrs	r0, r0, #13
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8007dfa:	eb00 3022 	add.w	r0, r0, r2, asr #12
 8007dfe:	f9bb 261a 	ldrsh.w	r2, [fp, #1562]	; 0x61a
 8007e02:	4410      	add	r0, r2
    pressf = (float) press;
 8007e04:	eb03 1020 	add.w	r0, r3, r0, asr #4
 8007e08:	f7fe ff04 	bl	8006c14 <__aeabi_ui2f>
    return (pressf / 100.0f);
 8007e0c:	496e      	ldr	r1, [pc, #440]	; (8007fc8 <main+0x12c0>)
 8007e0e:	f7fe fd97 	bl	8006940 <__aeabi_fmul>
				pressure = (uint16_t)BME280_getPressure();
 8007e12:	f7fe ff57 	bl	8006cc4 <__aeabi_f2uiz>
				if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8007e16:	f46f 7196 	mvn.w	r1, #300	; 0x12c
 8007e1a:	f240 321e 	movw	r2, #798	; 0x31e
				pressure = (uint16_t)BME280_getPressure();
 8007e1e:	b283      	uxth	r3, r0
 8007e20:	f8ab 3750 	strh.w	r3, [fp, #1872]	; 0x750
				if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8007e24:	440b      	add	r3, r1
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	f200 80c1 	bhi.w	8007fb0 <main+0x12a8>
 8007e2e:	4640      	mov	r0, r8
 8007e30:	4966      	ldr	r1, [pc, #408]	; (8007fcc <main+0x12c4>)
 8007e32:	f7fe fd25 	bl	8006880 <__aeabi_fcmplt>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	f000 80ba 	beq.w	8007fb0 <main+0x12a8>
 8007e3c:	4640      	mov	r0, r8
 8007e3e:	4964      	ldr	r1, [pc, #400]	; (8007fd0 <main+0x12c8>)
 8007e40:	f7fe fd3c 	bl	80068bc <__aeabi_fcmpgt>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	f000 80b3 	beq.w	8007fb0 <main+0x12a8>
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	f7fe fd35 	bl	80068bc <__aeabi_fcmpgt>
 8007e52:	2800      	cmp	r0, #0
 8007e54:	f000 80ac 	beq.w	8007fb0 <main+0x12a8>
 8007e58:	4628      	mov	r0, r5
 8007e5a:	495e      	ldr	r1, [pc, #376]	; (8007fd4 <main+0x12cc>)
 8007e5c:	f7fe fd10 	bl	8006880 <__aeabi_fcmplt>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	f000 80a5 	beq.w	8007fb0 <main+0x12a8>
					if (temperature != temperatureLast) {
 8007e66:	4b5c      	ldr	r3, [pc, #368]	; (8007fd8 <main+0x12d0>)
 8007e68:	4630      	mov	r0, r6
 8007e6a:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 8007e6e:	4639      	mov	r1, r7
 8007e70:	4622      	mov	r2, r4
 8007e72:	462b      	mov	r3, r5
 8007e74:	f7fe fbd6 	bl	8006624 <__aeabi_dcmpeq>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	d14e      	bne.n	8007f1a <main+0x1212>
						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	4620      	mov	r0, r4
 8007e80:	4629      	mov	r1, r5
 8007e82:	4b56      	ldr	r3, [pc, #344]	; (8007fdc <main+0x12d4>)
 8007e84:	f7fe fbec 	bl	8006660 <__aeabi_dcmpge>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	f040 8619 	bne.w	8008ac0 <main+0x1db8>
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2300      	movs	r3, #0
 8007e92:	4620      	mov	r0, r4
 8007e94:	4629      	mov	r1, r5
 8007e96:	f7fe fbcf 	bl	8006638 <__aeabi_dcmplt>
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	f040 85d4 	bne.w	8008a4a <main+0x1d42>
						else if (temperatureLast < 10 && temperatureLast > 0) {
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	f7fe fbe4 	bl	8006674 <__aeabi_dcmpgt>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	f040 85f9 	bne.w	8008aa4 <main+0x1d9c>
						else if (temperatureLast <= -10) {
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	4b49      	ldr	r3, [pc, #292]	; (8007fe0 <main+0x12d8>)
 8007eba:	f7fe fbc7 	bl	800664c <__aeabi_dcmple>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	f040 85d0 	bne.w	8008a64 <main+0x1d5c>
						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8007ec4:	e9da 4500 	ldrd	r4, r5, [sl]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	4620      	mov	r0, r4
 8007ecc:	4629      	mov	r1, r5
 8007ece:	4b43      	ldr	r3, [pc, #268]	; (8007fdc <main+0x12d4>)
 8007ed0:	f7fe fbc6 	bl	8006660 <__aeabi_dcmpge>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	f040 85b1 	bne.w	8008a3c <main+0x1d34>
 8007eda:	2200      	movs	r2, #0
 8007edc:	2300      	movs	r3, #0
 8007ede:	4620      	mov	r0, r4
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	f7fe fba9 	bl	8006638 <__aeabi_dcmplt>
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	f040 857a 	bne.w	80089e2 <main+0x1cda>
						else if (temperature < 10 && temperature > 0) {
 8007eee:	2300      	movs	r3, #0
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	f7fe fbbe 	bl	8006674 <__aeabi_dcmpgt>
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	f040 8591 	bne.w	8008a20 <main+0x1d18>
						else if (temperature <= -10) {
 8007efe:	2200      	movs	r2, #0
 8007f00:	4620      	mov	r0, r4
 8007f02:	4629      	mov	r1, r5
 8007f04:	4b36      	ldr	r3, [pc, #216]	; (8007fe0 <main+0x12d8>)
 8007f06:	f7fe fba1 	bl	800664c <__aeabi_dcmple>
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	f040 8576 	bne.w	80089fc <main+0x1cf4>
						temperatureLast = temperature;
 8007f10:	e9da 2300 	ldrd	r2, r3, [sl]
 8007f14:	4930      	ldr	r1, [pc, #192]	; (8007fd8 <main+0x12d0>)
 8007f16:	e941 2302 	strd	r2, r3, [r1, #-8]
					if (humidity != humidityLast) {
 8007f1a:	4b2f      	ldr	r3, [pc, #188]	; (8007fd8 <main+0x12d0>)
 8007f1c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007f20:	e953 0106 	ldrd	r0, r1, [r3, #-24]
 8007f24:	4632      	mov	r2, r6
 8007f26:	463b      	mov	r3, r7
 8007f28:	f7fe fb7c 	bl	8006624 <__aeabi_dcmpeq>
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	f000 8165 	beq.w	80081fe <main+0x14f6>
					if (pressureLast != pressure) {
 8007f34:	f8bb 2768 	ldrh.w	r2, [fp, #1896]	; 0x768
 8007f38:	f8bb 3750 	ldrh.w	r3, [fp, #1872]	; 0x750
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d02b      	beq.n	8007f98 <main+0x1290>
						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d", pressureLast);
 8007f40:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8007f44:	bf2c      	ite	cs
 8007f46:	4927      	ldrcs	r1, [pc, #156]	; (8007fe4 <main+0x12dc>)
						else sprintf(weatherPrintP, "0%02dP", pressureLast);
 8007f48:	4927      	ldrcc	r1, [pc, #156]	; (8007fe8 <main+0x12e0>)
						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d", pressureLast);
 8007f4a:	a815      	add	r0, sp, #84	; 0x54
						else sprintf(weatherPrintP, "0%02dP", pressureLast);
 8007f4c:	f001 fc90 	bl	8009870 <siprintf>
						LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 8007f50:	21bb      	movs	r1, #187	; 0xbb
 8007f52:	2300      	movs	r3, #0
 8007f54:	f240 1041 	movw	r0, #321	; 0x141
 8007f58:	aa15      	add	r2, sp, #84	; 0x54
 8007f5a:	f7fd fb3d 	bl	80055d8 <LCD_Font.constprop.2>
						if (pressure >= 1000) sprintf(weatherPrintP, "%02d", pressure);
 8007f5e:	f8bb 2750 	ldrh.w	r2, [fp, #1872]	; 0x750
 8007f62:	a815      	add	r0, sp, #84	; 0x54
 8007f64:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8007f68:	bf2c      	ite	cs
 8007f6a:	491e      	ldrcs	r1, [pc, #120]	; (8007fe4 <main+0x12dc>)
						else sprintf(weatherPrintP, "0%02dP", pressure);
 8007f6c:	491e      	ldrcc	r1, [pc, #120]	; (8007fe8 <main+0x12e0>)
 8007f6e:	f001 fc7f 	bl	8009870 <siprintf>
						LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 8007f72:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8007f76:	21bb      	movs	r1, #187	; 0xbb
 8007f78:	f240 1041 	movw	r0, #321	; 0x141
 8007f7c:	aa15      	add	r2, sp, #84	; 0x54
 8007f7e:	f7fd fb2b 	bl	80055d8 <LCD_Font.constprop.2>
						LCD_Font(321, 187, "0", &DejaVu_Sans_48, 1, BLACK);
 8007f82:	2300      	movs	r3, #0
 8007f84:	21bb      	movs	r1, #187	; 0xbb
 8007f86:	f240 1041 	movw	r0, #321	; 0x141
 8007f8a:	4a18      	ldr	r2, [pc, #96]	; (8007fec <main+0x12e4>)
 8007f8c:	f7fd fb24 	bl	80055d8 <LCD_Font.constprop.2>
						pressureLast = pressure;
 8007f90:	f8bb 3750 	ldrh.w	r3, [fp, #1872]	; 0x750
 8007f94:	f8ab 3768 	strh.w	r3, [fp, #1896]	; 0x768
					if (AT24XX_Read(0) != rtcHrs) {
 8007f98:	2000      	movs	r0, #0
 8007f9a:	f7fc fcff 	bl	800499c <AT24XX_Read>
 8007f9e:	f89b 1731 	ldrb.w	r1, [fp, #1841]	; 0x731
 8007fa2:	4288      	cmp	r0, r1
 8007fa4:	d126      	bne.n	8007ff4 <main+0x12ec>
					if (!viewGraphs) {
 8007fa6:	f89b 376a 	ldrb.w	r3, [fp, #1898]	; 0x76a
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 80cd 	beq.w	800814a <main+0x1442>
			rtcSecLast = rtcSec;
 8007fb0:	f89b 362e 	ldrb.w	r3, [fp, #1582]	; 0x62e
 8007fb4:	4a0e      	ldr	r2, [pc, #56]	; (8007ff0 <main+0x12e8>)
 8007fb6:	7213      	strb	r3, [r2, #8]
	{
 8007fb8:	e56a      	b.n	8007a90 <main+0xd88>
 8007fba:	b672      	cpsid	i
	while (1)
 8007fbc:	e7fe      	b.n	8007fbc <main+0x12b4>
 8007fbe:	b672      	cpsid	i
 8007fc0:	e7fe      	b.n	8007fc0 <main+0x12b8>
 8007fc2:	bf00      	nop
 8007fc4:	fffff3cb 	.word	0xfffff3cb
 8007fc8:	3c23d70a 	.word	0x3c23d70a
 8007fcc:	42aa0000 	.word	0x42aa0000
 8007fd0:	c2200000 	.word	0xc2200000
 8007fd4:	42c80000 	.word	0x42c80000
 8007fd8:	20000960 	.word	0x20000960
 8007fdc:	40240000 	.word	0x40240000
 8007fe0:	c0240000 	.word	0xc0240000
 8007fe4:	0801ed24 	.word	0x0801ed24
 8007fe8:	0801ed58 	.word	0x0801ed58
 8007fec:	0801ed2c 	.word	0x0801ed2c
 8007ff0:	20000000 	.word	0x20000000
						AT24XX_Update(0, rtcHrs);
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	f7fc fcdf 	bl	80049b8 <AT24XX_Update>
 8007ffa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8007ffe:	f240 571e 	movw	r7, #1310	; 0x51e
						AT24XX_Update(0, rtcHrs);
 8008002:	4ebf      	ldr	r6, [pc, #764]	; (8008300 <main+0x15f8>)
						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8008004:	4620      	mov	r0, r4
 8008006:	f7fc fcc9 	bl	800499c <AT24XX_Read>
 800800a:	4605      	mov	r5, r0
 800800c:	1c60      	adds	r0, r4, #1
 800800e:	b280      	uxth	r0, r0
 8008010:	f7fc fcc4 	bl	800499c <AT24XX_Read>
 8008014:	3402      	adds	r4, #2
 8008016:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 8008018:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 800801c:	42bc      	cmp	r4, r7
 800801e:	f826 5b02 	strh.w	r5, [r6], #2
 8008022:	d1ef      	bne.n	8008004 <main+0x12fc>
						for (uint16_t i = 1; i < 154; i++) hT[i] = hT[i + 1];
 8008024:	49b7      	ldr	r1, [pc, #732]	; (8008304 <main+0x15fc>)
 8008026:	f44f 7299 	mov.w	r2, #306	; 0x132
 800802a:	1e88      	subs	r0, r1, #2
 800802c:	f004 fc62 	bl	800c8f4 <memmove>
						hT[155] = (uint16_t) (temperature * 10);
 8008030:	e9da 0100 	ldrd	r0, r1, [sl]
 8008034:	2200      	movs	r2, #0
 8008036:	4bb4      	ldr	r3, [pc, #720]	; (8008308 <main+0x1600>)
 8008038:	f7fe f88c 	bl	8006154 <__aeabi_dmul>
 800803c:	f7fe fb62 	bl	8006704 <__aeabi_d2uiz>
 8008040:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
						for (uint16_t i = 0; i < 155; i++) {
 8008044:	f240 571e 	movw	r7, #1310	; 0x51e
						hT[155] = (uint16_t) (temperature * 10);
 8008048:	4dad      	ldr	r5, [pc, #692]	; (8008300 <main+0x15f8>)
 800804a:	f8ab 0396 	strh.w	r0, [fp, #918]	; 0x396
							AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 800804e:	f935 6b02 	ldrsh.w	r6, [r5], #2
 8008052:	4620      	mov	r0, r4
 8008054:	b2f1      	uxtb	r1, r6
 8008056:	f7fc fcaf 	bl	80049b8 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 800805a:	1c60      	adds	r0, r4, #1
						for (uint16_t i = 0; i < 155; i++) {
 800805c:	3402      	adds	r4, #2
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 800805e:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8008062:	b280      	uxth	r0, r0
						for (uint16_t i = 0; i < 155; i++) {
 8008064:	b2a4      	uxth	r4, r4
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 8008066:	f7fc fca7 	bl	80049b8 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 800806a:	42bc      	cmp	r4, r7
 800806c:	d1ef      	bne.n	800804e <main+0x1346>
 800806e:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8008072:	f640 1706 	movw	r7, #2310	; 0x906
 8008076:	4ea5      	ldr	r6, [pc, #660]	; (800830c <main+0x1604>)
 8008078:	4620      	mov	r0, r4
 800807a:	f7fc fc8f 	bl	800499c <AT24XX_Read>
 800807e:	4605      	mov	r5, r0
 8008080:	1c60      	adds	r0, r4, #1
 8008082:	b280      	uxth	r0, r0
 8008084:	f7fc fc8a 	bl	800499c <AT24XX_Read>
 8008088:	3402      	adds	r4, #2
 800808a:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 800808c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8008090:	42bc      	cmp	r4, r7
 8008092:	f826 5b02 	strh.w	r5, [r6], #2
 8008096:	d1ef      	bne.n	8008078 <main+0x1370>
						for (uint16_t i = 1; i < 154; i++) hH[i] = hH[i + 1];
 8008098:	499d      	ldr	r1, [pc, #628]	; (8008310 <main+0x1608>)
						hH[155] = (uint16_t) (humidity * 10);
 800809a:	4d9c      	ldr	r5, [pc, #624]	; (800830c <main+0x1604>)
						for (uint16_t i = 1; i < 154; i++) hH[i] = hH[i + 1];
 800809c:	f44f 7299 	mov.w	r2, #306	; 0x132
 80080a0:	1e88      	subs	r0, r1, #2
 80080a2:	f004 fc27 	bl	800c8f4 <memmove>
						hH[155] = (uint16_t) (humidity * 10);
 80080a6:	e9d5 01ec 	ldrd	r0, r1, [r5, #944]	; 0x3b0
 80080aa:	2200      	movs	r2, #0
 80080ac:	4b96      	ldr	r3, [pc, #600]	; (8008308 <main+0x1600>)
 80080ae:	f7fe f851 	bl	8006154 <__aeabi_dmul>
 80080b2:	f7fe fb27 	bl	8006704 <__aeabi_d2uiz>
 80080b6:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
						for (uint16_t i = 0; i < 155; i++) {
 80080ba:	f640 1706 	movw	r7, #2310	; 0x906
						hH[155] = (uint16_t) (humidity * 10);
 80080be:	f8ab 04ce 	strh.w	r0, [fp, #1230]	; 0x4ce
							AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 80080c2:	f935 6b02 	ldrsh.w	r6, [r5], #2
 80080c6:	4620      	mov	r0, r4
 80080c8:	b2f1      	uxtb	r1, r6
 80080ca:	f7fc fc75 	bl	80049b8 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 80080ce:	1c60      	adds	r0, r4, #1
						for (uint16_t i = 0; i < 155; i++) {
 80080d0:	3402      	adds	r4, #2
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 80080d2:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80080d6:	b280      	uxth	r0, r0
						for (uint16_t i = 0; i < 155; i++) {
 80080d8:	b2a4      	uxth	r4, r4
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 80080da:	f7fc fc6d 	bl	80049b8 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 80080de:	42bc      	cmp	r4, r7
 80080e0:	d1ef      	bne.n	80080c2 <main+0x13ba>
 80080e2:	f640 34b8 	movw	r4, #3000	; 0xbb8
						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 80080e6:	f640 47ee 	movw	r7, #3310	; 0xcee
 80080ea:	4e8a      	ldr	r6, [pc, #552]	; (8008314 <main+0x160c>)
 80080ec:	4620      	mov	r0, r4
 80080ee:	f7fc fc55 	bl	800499c <AT24XX_Read>
 80080f2:	4605      	mov	r5, r0
 80080f4:	1c60      	adds	r0, r4, #1
 80080f6:	b280      	uxth	r0, r0
 80080f8:	f7fc fc50 	bl	800499c <AT24XX_Read>
 80080fc:	3402      	adds	r4, #2
 80080fe:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 8008100:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8008104:	42bc      	cmp	r4, r7
 8008106:	f826 5b02 	strh.w	r5, [r6], #2
 800810a:	d1ef      	bne.n	80080ec <main+0x13e4>
						hP[155] = (uint16_t)pressure;
 800810c:	f640 34b8 	movw	r4, #3000	; 0xbb8
						for (uint16_t i = 0; i < 155; i++) {
 8008110:	f640 47ee 	movw	r7, #3310	; 0xcee
						hP[155] = (uint16_t)pressure;
 8008114:	4d7f      	ldr	r5, [pc, #508]	; (8008314 <main+0x160c>)
						for (uint16_t i = 1; i < 154; i++) hP[i] = hP[i + 1];
 8008116:	f44f 7299 	mov.w	r2, #306	; 0x132
 800811a:	1d29      	adds	r1, r5, #4
 800811c:	1e88      	subs	r0, r1, #2
 800811e:	f004 fbe9 	bl	800c8f4 <memmove>
						hP[155] = (uint16_t)pressure;
 8008122:	f8bb 3750 	ldrh.w	r3, [fp, #1872]	; 0x750
 8008126:	f8ab 3606 	strh.w	r3, [fp, #1542]	; 0x606
							AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 800812a:	f935 6b02 	ldrsh.w	r6, [r5], #2
 800812e:	4620      	mov	r0, r4
 8008130:	b2f1      	uxtb	r1, r6
 8008132:	f7fc fc41 	bl	80049b8 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8008136:	1c60      	adds	r0, r4, #1
						for (uint16_t i = 0; i < 155; i++) {
 8008138:	3402      	adds	r4, #2
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 800813a:	f3c6 2107 	ubfx	r1, r6, #8, #8
 800813e:	b280      	uxth	r0, r0
						for (uint16_t i = 0; i < 155; i++) {
 8008140:	b2a4      	uxth	r4, r4
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8008142:	f7fc fc39 	bl	80049b8 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8008146:	42bc      	cmp	r4, r7
 8008148:	d1ef      	bne.n	800812a <main+0x1422>
						LCD_Rect(2, 189, 157, 129, 1, BLUE);
 800814a:	2002      	movs	r0, #2
 800814c:	f7fc f8c8 	bl	80042e0 <LCD_Rect.constprop.0>
 8008150:	2703      	movs	r7, #3
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008152:	2650      	movs	r6, #80	; 0x50
						LCD_Rect(2, 189, 157, 129, 1, BLUE);
 8008154:	4d6a      	ldr	r5, [pc, #424]	; (8008300 <main+0x15f8>)
 8008156:	e003      	b.n	8008160 <main+0x1458>
						for (uint16_t i = 0; i < 156 ; i++) {
 8008158:	3701      	adds	r7, #1
 800815a:	b2bf      	uxth	r7, r7
 800815c:	2f9f      	cmp	r7, #159	; 0x9f
 800815e:	d01f      	beq.n	80081a0 <main+0x1498>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008160:	f835 4b02 	ldrh.w	r4, [r5], #2
							LCD_Line(3 + i, 191, 3 + i, 317, 1, BLACK);
 8008164:	4639      	mov	r1, r7
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008166:	3cd2      	subs	r4, #210	; 0xd2
 8008168:	01e4      	lsls	r4, r4, #7
 800816a:	fb94 f4f6 	sdiv	r4, r4, r6
							LCD_Line(3 + i, 191, 3 + i, 317, 1, BLACK);
 800816e:	4638      	mov	r0, r7
							int16_t val = map(((int16_t)hT[i]), MIN_TEMPERATURE*10, MAX_TEMPERATURE*10, 0, 128);
 8008170:	b224      	sxth	r4, r4
							LCD_Line(3 + i, 191, 3 + i, 317, 1, BLACK);
 8008172:	f7f9 ff79 	bl	8002068 <LCD_Line.constprop.0>
							if (val) LCD_Line(3 + i, 191 + (127 - val), 3 + i, 317, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 8008176:	2c00      	cmp	r4, #0
 8008178:	ddee      	ble.n	8008158 <main+0x1450>
 800817a:	2c7f      	cmp	r4, #127	; 0x7f
 800817c:	bfa8      	it	ge
 800817e:	247f      	movge	r4, #127	; 0x7f
 8008180:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	b2db      	uxtb	r3, r3
 8008188:	f5c4 749f 	rsb	r4, r4, #318	; 0x13e
 800818c:	b2a1      	uxth	r1, r4
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 800818e:	f083 04ff 	eor.w	r4, r3, #255	; 0xff
 8008192:	463a      	mov	r2, r7
 8008194:	4638      	mov	r0, r7
 8008196:	eb03 4304 	add.w	r3, r3, r4, lsl #16
 800819a:	f7fa fcd7 	bl	8002b4c <LCD_Line.constprop.1>
 800819e:	e7db      	b.n	8008158 <main+0x1450>
						LCD_Rect(161, 189, 157, 129, 1, BLUE);
 80081a0:	20a1      	movs	r0, #161	; 0xa1
 80081a2:	f7fc f89d 	bl	80042e0 <LCD_Rect.constprop.0>
 80081a6:	27a2      	movs	r7, #162	; 0xa2
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80081a8:	f44f 7620 	mov.w	r6, #640	; 0x280
						LCD_Rect(161, 189, 157, 129, 1, BLUE);
 80081ac:	4d57      	ldr	r5, [pc, #348]	; (800830c <main+0x1604>)
 80081ae:	e005      	b.n	80081bc <main+0x14b4>
						for (uint16_t i = 0; i < 156 ; i++) {
 80081b0:	3701      	adds	r7, #1
 80081b2:	b2bf      	uxth	r7, r7
 80081b4:	f5b7 7f9f 	cmp.w	r7, #318	; 0x13e
 80081b8:	f000 80ff 	beq.w	80083ba <main+0x16b2>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80081bc:	f835 4b02 	ldrh.w	r4, [r5], #2
							LCD_Line(162 + i, 191, 162 + i, 317, 1, BLACK);
 80081c0:	4639      	mov	r1, r7
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80081c2:	3c64      	subs	r4, #100	; 0x64
							LCD_Line(162 + i, 191, 162 + i, 317, 1, BLACK);
 80081c4:	4638      	mov	r0, r7
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80081c6:	01e4      	lsls	r4, r4, #7
							LCD_Line(162 + i, 191, 162 + i, 317, 1, BLACK);
 80081c8:	f7f9 ff4e 	bl	8002068 <LCD_Line.constprop.0>
							if (val) LCD_Line(162 + i, 191 + (127 - val), 162 + i, 317, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 80081cc:	f5b4 7f20 	cmp.w	r4, #640	; 0x280
 80081d0:	dbee      	blt.n	80081b0 <main+0x14a8>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80081d2:	fb94 f1f6 	sdiv	r1, r4, r6
 80081d6:	b209      	sxth	r1, r1
 80081d8:	297f      	cmp	r1, #127	; 0x7f
 80081da:	bfa8      	it	ge
 80081dc:	217f      	movge	r1, #127	; 0x7f
							if (val) LCD_Line(162 + i, 191 + (127 - val), 162 + i, 317, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 80081de:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	f083 04ff 	eor.w	r4, r3, #255	; 0xff
 80081ea:	f5c1 719f 	rsb	r1, r1, #318	; 0x13e
 80081ee:	463a      	mov	r2, r7
 80081f0:	4638      	mov	r0, r7
 80081f2:	b289      	uxth	r1, r1
 80081f4:	eb03 4304 	add.w	r3, r3, r4, lsl #16
 80081f8:	f7fa fca8 	bl	8002b4c <LCD_Line.constprop.1>
 80081fc:	e7d8      	b.n	80081b0 <main+0x14a8>
						sprintf(weatherPrintH, "%.1f'H", humidityLast);
 80081fe:	4632      	mov	r2, r6
 8008200:	463b      	mov	r3, r7
 8008202:	4945      	ldr	r1, [pc, #276]	; (8008318 <main+0x1610>)
 8008204:	a815      	add	r0, sp, #84	; 0x54
 8008206:	f001 fb33 	bl	8009870 <siprintf>
						if (humidityLast >= 10)
 800820a:	4944      	ldr	r1, [pc, #272]	; (800831c <main+0x1614>)
 800820c:	4b3e      	ldr	r3, [pc, #248]	; (8008308 <main+0x1600>)
 800820e:	2200      	movs	r2, #0
 8008210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008214:	f7fe fa24 	bl	8006660 <__aeabi_dcmpge>
 8008218:	4603      	mov	r3, r0
 800821a:	2800      	cmp	r0, #0
 800821c:	f000 80c7 	beq.w	80083ae <main+0x16a6>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8008220:	4623      	mov	r3, r4
 8008222:	21bb      	movs	r1, #187	; 0xbb
 8008224:	20a0      	movs	r0, #160	; 0xa0
 8008226:	aa15      	add	r2, sp, #84	; 0x54
 8008228:	f7fd f9d6 	bl	80055d8 <LCD_Font.constprop.2>
						sprintf(weatherPrintH, "%.1f'H", humidity);
 800822c:	4b3c      	ldr	r3, [pc, #240]	; (8008320 <main+0x1618>)
 800822e:	493a      	ldr	r1, [pc, #232]	; (8008318 <main+0x1610>)
 8008230:	461c      	mov	r4, r3
 8008232:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008236:	a815      	add	r0, sp, #84	; 0x54
 8008238:	f001 fb1a 	bl	8009870 <siprintf>
						if (humidity >= 10)
 800823c:	f1a4 0508 	sub.w	r5, r4, #8
 8008240:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008244:	2200      	movs	r2, #0
 8008246:	4629      	mov	r1, r5
 8008248:	4b2f      	ldr	r3, [pc, #188]	; (8008308 <main+0x1600>)
 800824a:	4620      	mov	r0, r4
 800824c:	f7fe fa08 	bl	8006660 <__aeabi_dcmpge>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8008250:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008254:	21bb      	movs	r1, #187	; 0xbb
 8008256:	aa15      	add	r2, sp, #84	; 0x54
						if (humidity >= 10)
 8008258:	2800      	cmp	r0, #0
 800825a:	f000 80a4 	beq.w	80083a6 <main+0x169e>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 800825e:	20a0      	movs	r0, #160	; 0xa0
 8008260:	f7fd f9ba 	bl	80055d8 <LCD_Font.constprop.2>
						humidityLast = humidity;
 8008264:	4b2d      	ldr	r3, [pc, #180]	; (800831c <main+0x1614>)
 8008266:	e9c3 4500 	strd	r4, r5, [r3]
 800826a:	e663      	b.n	8007f34 <main+0x122c>
 800826c:	46a0      	mov	r8, r4
 800826e:	2501      	movs	r5, #1
	P = 1 - radius;
 8008270:	f06f 0405 	mvn.w	r4, #5
	b_ = radius;
 8008274:	f04f 0907 	mov.w	r9, #7
 8008278:	e00e      	b.n	8008298 <main+0x1590>
			P = (P + 5) + (2 * (a_ - b_));
 800827a:	1e6b      	subs	r3, r5, #1
 800827c:	eba3 0309 	sub.w	r3, r3, r9
 8008280:	3405      	adds	r4, #5
 8008282:	eb04 0443 	add.w	r4, r4, r3, lsl #1
			a_++;
 8008286:	462b      	mov	r3, r5
			b_--;
 8008288:	f109 39ff 	add.w	r9, r9, #4294967295
	while (a_ <= b_)
 800828c:	454b      	cmp	r3, r9
 800828e:	f105 0501 	add.w	r5, r5, #1
 8008292:	f108 0802 	add.w	r8, r8, #2
 8008296:	dc2b      	bgt.n	80082f0 <main+0x15e8>
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8008298:	2300      	movs	r3, #0
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	fa1f f389 	uxth.w	r3, r9
 80082a0:	005f      	lsls	r7, r3, #1
 80082a2:	b2ae      	uxth	r6, r5
 80082a4:	3701      	adds	r7, #1
 80082a6:	b2bf      	uxth	r7, r7
 80082a8:	f1c3 0123 	rsb	r1, r3, #35	; 0x23
 80082ac:	f1c6 00ad 	rsb	r0, r6, #173	; 0xad
 80082b0:	f108 0201 	add.w	r2, r8, #1
 80082b4:	b292      	uxth	r2, r2
 80082b6:	9304      	str	r3, [sp, #16]
 80082b8:	b289      	uxth	r1, r1
 80082ba:	463b      	mov	r3, r7
 80082bc:	b280      	uxth	r0, r0
 80082be:	9205      	str	r2, [sp, #20]
 80082c0:	f7f8 fcb8 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 80082c4:	f1c6 0124 	rsb	r1, r6, #36	; 0x24
 80082c8:	2600      	movs	r6, #0
 80082ca:	9b04      	ldr	r3, [sp, #16]
 80082cc:	9a05      	ldr	r2, [sp, #20]
 80082ce:	f1c3 00ac 	rsb	r0, r3, #172	; 0xac
 80082d2:	9600      	str	r6, [sp, #0]
 80082d4:	4613      	mov	r3, r2
 80082d6:	b289      	uxth	r1, r1
 80082d8:	463a      	mov	r2, r7
 80082da:	b280      	uxth	r0, r0
 80082dc:	f7f8 fcaa 	bl	8000c34 <LCD_Rect_Fill>
		if (P < 0)
 80082e0:	42b4      	cmp	r4, r6
			P = (P + 3) + (2 * a_);
 80082e2:	f104 0303 	add.w	r3, r4, #3
		if (P < 0)
 80082e6:	dac8      	bge.n	800827a <main+0x1572>
			P = (P + 3) + (2 * a_);
 80082e8:	eb08 0403 	add.w	r4, r8, r3
			a_++;
 80082ec:	462b      	mov	r3, r5
 80082ee:	e7cd      	b.n	800828c <main+0x1584>
 80082f0:	f04f 0800 	mov.w	r8, #0
 80082f4:	2501      	movs	r5, #1
	P = 1 - radius;
 80082f6:	f06f 0405 	mvn.w	r4, #5
	b_ = radius;
 80082fa:	f04f 0907 	mov.w	r9, #7
 80082fe:	e020      	b.n	8008342 <main+0x163a>
 8008300:	20000460 	.word	0x20000460
 8008304:	20000464 	.word	0x20000464
 8008308:	40240000 	.word	0x40240000
 800830c:	20000598 	.word	0x20000598
 8008310:	2000059c 	.word	0x2000059c
 8008314:	200006d0 	.word	0x200006d0
 8008318:	0801ed50 	.word	0x0801ed50
 800831c:	20000960 	.word	0x20000960
 8008320:	20000950 	.word	0x20000950
			P = (P + 5) + (2 * (a_ - b_));
 8008324:	1e6b      	subs	r3, r5, #1
 8008326:	eba3 0309 	sub.w	r3, r3, r9
 800832a:	3405      	adds	r4, #5
 800832c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
			a_++;
 8008330:	462b      	mov	r3, r5
			b_--;
 8008332:	f109 39ff 	add.w	r9, r9, #4294967295
	while (a_ <= b_)
 8008336:	4599      	cmp	r9, r3
 8008338:	f105 0501 	add.w	r5, r5, #1
 800833c:	f108 0802 	add.w	r8, r8, #2
 8008340:	db2b      	blt.n	800839a <main+0x1692>
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8008342:	2300      	movs	r3, #0
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	fa1f f389 	uxth.w	r3, r9
 800834a:	005f      	lsls	r7, r3, #1
 800834c:	b2ae      	uxth	r6, r5
 800834e:	3701      	adds	r7, #1
 8008350:	b2bf      	uxth	r7, r7
 8008352:	f1c3 014b 	rsb	r1, r3, #75	; 0x4b
 8008356:	f1c6 00ad 	rsb	r0, r6, #173	; 0xad
 800835a:	f108 0201 	add.w	r2, r8, #1
 800835e:	b292      	uxth	r2, r2
 8008360:	9304      	str	r3, [sp, #16]
 8008362:	b289      	uxth	r1, r1
 8008364:	463b      	mov	r3, r7
 8008366:	b280      	uxth	r0, r0
 8008368:	9205      	str	r2, [sp, #20]
 800836a:	f7f8 fc63 	bl	8000c34 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 800836e:	f1c6 014c 	rsb	r1, r6, #76	; 0x4c
 8008372:	2600      	movs	r6, #0
 8008374:	9b04      	ldr	r3, [sp, #16]
 8008376:	9a05      	ldr	r2, [sp, #20]
 8008378:	f1c3 00ac 	rsb	r0, r3, #172	; 0xac
 800837c:	9600      	str	r6, [sp, #0]
 800837e:	4613      	mov	r3, r2
 8008380:	b289      	uxth	r1, r1
 8008382:	463a      	mov	r2, r7
 8008384:	b280      	uxth	r0, r0
 8008386:	f7f8 fc55 	bl	8000c34 <LCD_Rect_Fill>
		if (P < 0)
 800838a:	42b4      	cmp	r4, r6
			P = (P + 3) + (2 * a_);
 800838c:	f104 0303 	add.w	r3, r4, #3
		if (P < 0)
 8008390:	dac8      	bge.n	8008324 <main+0x161c>
			P = (P + 3) + (2 * a_);
 8008392:	eb08 0403 	add.w	r4, r8, r3
			a_++;
 8008396:	462b      	mov	r3, r5
 8008398:	e7cd      	b.n	8008336 <main+0x162e>
    GPIOx->BSRR = GPIO_Pin;
 800839a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800839e:	4bb4      	ldr	r3, [pc, #720]	; (8008670 <main+0x1968>)
 80083a0:	611a      	str	r2, [r3, #16]
 80083a2:	f7ff bbb7 	b.w	8007b14 <main+0xe0c>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 80083a6:	20ba      	movs	r0, #186	; 0xba
 80083a8:	f7fd f916 	bl	80055d8 <LCD_Font.constprop.2>
 80083ac:	e75a      	b.n	8008264 <main+0x155c>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 80083ae:	21bb      	movs	r1, #187	; 0xbb
 80083b0:	20ba      	movs	r0, #186	; 0xba
 80083b2:	aa15      	add	r2, sp, #84	; 0x54
 80083b4:	f7fd f910 	bl	80055d8 <LCD_Font.constprop.2>
 80083b8:	e738      	b.n	800822c <main+0x1524>
						LCD_Rect(320, 189, 157, 129, 1, BLUE);
 80083ba:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80083be:	f7fb ff8f 	bl	80042e0 <LCD_Rect.constprop.0>
 80083c2:	f240 1741 	movw	r7, #321	; 0x141
						for (uint16_t i = 0; i < 156 ; i++) {
 80083c6:	f240 16dd 	movw	r6, #477	; 0x1dd
						LCD_Rect(320, 189, 157, 129, 1, BLUE);
 80083ca:	4daa      	ldr	r5, [pc, #680]	; (8008674 <main+0x196c>)
 80083cc:	e003      	b.n	80083d6 <main+0x16ce>
						for (uint16_t i = 0; i < 156 ; i++) {
 80083ce:	3701      	adds	r7, #1
 80083d0:	b2bf      	uxth	r7, r7
 80083d2:	42b7      	cmp	r7, r6
 80083d4:	d01e      	beq.n	8008414 <main+0x170c>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80083d6:	f46f 736a 	mvn.w	r3, #936	; 0x3a8
 80083da:	f835 4b02 	ldrh.w	r4, [r5], #2
							LCD_Line(321 + i, 191, 321 + i, 317, 1, BLACK);
 80083de:	4639      	mov	r1, r7
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80083e0:	441c      	add	r4, r3
							LCD_Line(321 + i, 191, 321 + i, 317, 1, BLACK);
 80083e2:	4638      	mov	r0, r7
							int16_t val = map(((int16_t)hP[i]), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 80083e4:	b224      	sxth	r4, r4
							LCD_Line(321 + i, 191, 321 + i, 317, 1, BLACK);
 80083e6:	f7f9 fe3f 	bl	8002068 <LCD_Line.constprop.0>
							if (val) LCD_Line(321 + i, 191 + (127 - val), 321 + i, 317, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 80083ea:	2c00      	cmp	r4, #0
 80083ec:	ddef      	ble.n	80083ce <main+0x16c6>
 80083ee:	2c7f      	cmp	r4, #127	; 0x7f
 80083f0:	bfa8      	it	ge
 80083f2:	247f      	movge	r4, #127	; 0x7f
 80083f4:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
 80083f8:	005b      	lsls	r3, r3, #1
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	f5c4 749f 	rsb	r4, r4, #318	; 0x13e
 8008400:	b2a1      	uxth	r1, r4
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8008402:	f083 04ff 	eor.w	r4, r3, #255	; 0xff
 8008406:	463a      	mov	r2, r7
 8008408:	4638      	mov	r0, r7
 800840a:	eb03 4304 	add.w	r3, r3, r4, lsl #16
 800840e:	f7fa fb9d 	bl	8002b4c <LCD_Line.constprop.1>
 8008412:	e7dc      	b.n	80083ce <main+0x16c6>
						viewGraphs = 1;
 8008414:	2301      	movs	r3, #1
 8008416:	f88b 376a 	strb.w	r3, [fp, #1898]	; 0x76a
 800841a:	e5c9      	b.n	8007fb0 <main+0x12a8>
				pressure = (uint16_t)BME280_getPressure();
 800841c:	f8ab 2750 	strh.w	r2, [fp, #1872]	; 0x750
				if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8008420:	e5c6      	b.n	8007fb0 <main+0x12a8>
}

uint8_t DS3231_getDay(void) {
	DS3231_Update();
 8008422:	f7fc fee7 	bl	80051f4 <DS3231_Update>
    return bcdToDec(rtcBuffer[3]);
 8008426:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    return ((val / 16 * 10) + (val % 16));
 800842a:	091a      	lsrs	r2, r3, #4
 800842c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008430:	f003 030f 	and.w	r3, r3, #15
 8008434:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					rtcDay = DS3231_getDay();
 8008438:	f88b 3732 	strb.w	r3, [fp, #1842]	; 0x732
}

uint8_t DS3231_getDate(void) {
	DS3231_Update();
 800843c:	f7fc feda 	bl	80051f4 <DS3231_Update>
    return bcdToDec(rtcBuffer[4]);
 8008440:	f89b 30a4 	ldrb.w	r3, [fp, #164]	; 0xa4
    return ((val / 16 * 10) + (val % 16));
 8008444:	091a      	lsrs	r2, r3, #4
 8008446:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800844a:	f003 030f 	and.w	r3, r3, #15
 800844e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					rtcDate = DS3231_getDate();
 8008452:	f88b 3733 	strb.w	r3, [fp, #1843]	; 0x733
}

uint8_t DS3231_getMonth(void) {
	DS3231_Update();
 8008456:	f7fc fecd 	bl	80051f4 <DS3231_Update>
    return bcdToDec(rtcBuffer[5]);
 800845a:	f89b 30a5 	ldrb.w	r3, [fp, #165]	; 0xa5
    return ((val / 16 * 10) + (val % 16));
 800845e:	091a      	lsrs	r2, r3, #4
 8008460:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008464:	f003 030f 	and.w	r3, r3, #15
 8008468:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					rtcMonth = DS3231_getMonth();
 800846c:	f88b 3734 	strb.w	r3, [fp, #1844]	; 0x734
}

uint8_t DS3231_getYear(void) {
	DS3231_Update();
 8008470:	f7fc fec0 	bl	80051f4 <DS3231_Update>
    return bcdToDec(rtcBuffer[6]);
 8008474:	f89b 30a6 	ldrb.w	r3, [fp, #166]	; 0xa6
					sprintf(clockPrint, "%02d", rtcHrsLast);
 8008478:	4622      	mov	r2, r4
    return ((val / 16 * 10) + (val % 16));
 800847a:	0918      	lsrs	r0, r3, #4
 800847c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008480:	f003 030f 	and.w	r3, r3, #15
 8008484:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008488:	497b      	ldr	r1, [pc, #492]	; (8008678 <main+0x1970>)
 800848a:	a81c      	add	r0, sp, #112	; 0x70
					rtcYear = DS3231_getYear();
 800848c:	f88b 3735 	strb.w	r3, [fp, #1845]	; 0x735
					sprintf(clockPrint, "%02d", rtcHrsLast);
 8008490:	f001 f9ee 	bl	8009870 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8008494:	2200      	movs	r2, #0
 8008496:	a91c      	add	r1, sp, #112	; 0x70
 8008498:	4610      	mov	r0, r2
 800849a:	f7fd f853 	bl	8005544 <LCD_Font.constprop.1>
					sprintf(clockPrint, "%02d", rtcHrs);
 800849e:	f89b 2731 	ldrb.w	r2, [fp, #1841]	; 0x731
 80084a2:	4975      	ldr	r1, [pc, #468]	; (8008678 <main+0x1970>)
 80084a4:	a81c      	add	r0, sp, #112	; 0x70
 80084a6:	f001 f9e3 	bl	8009870 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 80084aa:	4a74      	ldr	r2, [pc, #464]	; (800867c <main+0x1974>)
 80084ac:	2000      	movs	r0, #0
 80084ae:	a91c      	add	r1, sp, #112	; 0x70
 80084b0:	f7fd f848 	bl	8005544 <LCD_Font.constprop.1>
					if (rtcDayLast != rtcDay) {
 80084b4:	f89b 2736 	ldrb.w	r2, [fp, #1846]	; 0x736
 80084b8:	f89b 3732 	ldrb.w	r3, [fp, #1842]	; 0x732
 80084bc:	429a      	cmp	r2, r3
 80084be:	f000 808e 	beq.w	80085de <main+0x18d6>
						sprintf(clockPrint, "%02d", rtcDateLast);
 80084c2:	f89b 2737 	ldrb.w	r2, [fp, #1847]	; 0x737
 80084c6:	496c      	ldr	r1, [pc, #432]	; (8008678 <main+0x1970>)
 80084c8:	a81c      	add	r0, sp, #112	; 0x70
 80084ca:	f001 f9d1 	bl	8009870 <siprintf>
						LCD_Font(380, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 80084ce:	2300      	movs	r3, #0
 80084d0:	2128      	movs	r1, #40	; 0x28
 80084d2:	f44f 70be 	mov.w	r0, #380	; 0x17c
 80084d6:	aa1c      	add	r2, sp, #112	; 0x70
 80084d8:	f7fd f87e 	bl	80055d8 <LCD_Font.constprop.2>
						sprintf(clockPrint, "%02d", rtcDate);
 80084dc:	f89b 2733 	ldrb.w	r2, [fp, #1843]	; 0x733
 80084e0:	4965      	ldr	r1, [pc, #404]	; (8008678 <main+0x1970>)
 80084e2:	a81c      	add	r0, sp, #112	; 0x70
 80084e4:	f001 f9c4 	bl	8009870 <siprintf>
						LCD_Font(380, 40, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 80084e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80084ec:	2128      	movs	r1, #40	; 0x28
 80084ee:	f44f 70be 	mov.w	r0, #380	; 0x17c
 80084f2:	aa1c      	add	r2, sp, #112	; 0x70
 80084f4:	f7fd f870 	bl	80055d8 <LCD_Font.constprop.2>
						if (rtcDate < 10) LCD_Font(380, 40, "0", &DejaVu_Sans_48, 1, BLACK);
 80084f8:	f89b 3733 	ldrb.w	r3, [fp, #1843]	; 0x733
 80084fc:	2b09      	cmp	r3, #9
 80084fe:	f240 8083 	bls.w	8008608 <main+0x1900>
						LCD_Font(370, 90, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 8008502:	250c      	movs	r5, #12
 8008504:	f89b 6734 	ldrb.w	r6, [fp, #1844]	; 0x734
 8008508:	2300      	movs	r3, #0
 800850a:	f106 020a 	add.w	r2, r6, #10
 800850e:	fbb2 f7f5 	udiv	r7, r2, r5
 8008512:	fb05 2217 	mls	r2, r5, r7, r2
 8008516:	4f5a      	ldr	r7, [pc, #360]	; (8008680 <main+0x1978>)
 8008518:	215a      	movs	r1, #90	; 0x5a
 800851a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800851e:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8008522:	f8d2 25f8 	ldr.w	r2, [r2, #1528]	; 0x5f8
 8008526:	f7fd f857 	bl	80055d8 <LCD_Font.constprop.2>
						LCD_Font(370, 90, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 800852a:	f106 030b 	add.w	r3, r6, #11
 800852e:	fbb3 f2f5 	udiv	r2, r3, r5
						LCD_Font(20, 145, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 8008532:	2407      	movs	r4, #7
						LCD_Font(370, 90, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8008534:	fb05 3312 	mls	r3, r5, r2, r3
 8008538:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800853c:	f8d3 25f8 	ldr.w	r2, [r3, #1528]	; 0x5f8
 8008540:	215a      	movs	r1, #90	; 0x5a
 8008542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008546:	f44f 70b9 	mov.w	r0, #370	; 0x172
 800854a:	f7fd f845 	bl	80055d8 <LCD_Font.constprop.2>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast +2000);
 800854e:	f89b 3739 	ldrb.w	r3, [fp, #1849]	; 0x739
 8008552:	f89b 2737 	ldrb.w	r2, [fp, #1847]	; 0x737
 8008556:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800855a:	494a      	ldr	r1, [pc, #296]	; (8008684 <main+0x197c>)
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	a81c      	add	r0, sp, #112	; 0x70
 8008560:	f89b 3738 	ldrb.w	r3, [fp, #1848]	; 0x738
 8008564:	f001 f984 	bl	8009870 <siprintf>
						LCD_Font(180, 145, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8008568:	2200      	movs	r2, #0
 800856a:	20b4      	movs	r0, #180	; 0xb4
 800856c:	a91c      	add	r1, sp, #112	; 0x70
 800856e:	f7fc ff9f 	bl	80054b0 <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear +2000);
 8008572:	f89b 3735 	ldrb.w	r3, [fp, #1845]	; 0x735
 8008576:	f89b 2733 	ldrb.w	r2, [fp, #1843]	; 0x733
 800857a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800857e:	4941      	ldr	r1, [pc, #260]	; (8008684 <main+0x197c>)
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	a81c      	add	r0, sp, #112	; 0x70
 8008584:	f89b 3734 	ldrb.w	r3, [fp, #1844]	; 0x734
 8008588:	f001 f972 	bl	8009870 <siprintf>
						LCD_Font(180, 145, clockPrint, &DejaVu_Sans_48, 1, BLUE);
 800858c:	22ff      	movs	r2, #255	; 0xff
 800858e:	20b4      	movs	r0, #180	; 0xb4
 8008590:	a91c      	add	r1, sp, #112	; 0x70
 8008592:	f7fc ff8d 	bl	80054b0 <LCD_Font.constprop.0>
						LCD_Font(20, 145, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 8008596:	f89b 5732 	ldrb.w	r5, [fp, #1842]	; 0x732
 800859a:	2200      	movs	r2, #0
 800859c:	1d6b      	adds	r3, r5, #5
 800859e:	fbb3 f1f4 	udiv	r1, r3, r4
 80085a2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80085a6:	1a5b      	subs	r3, r3, r1
 80085a8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80085ac:	f8d3 1628 	ldr.w	r1, [r3, #1576]	; 0x628
 80085b0:	2014      	movs	r0, #20
 80085b2:	f7fc ff7d 	bl	80054b0 <LCD_Font.constprop.0>
						LCD_Font(20, 145, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 80085b6:	1dab      	adds	r3, r5, #6
 80085b8:	fbb3 f4f4 	udiv	r4, r3, r4
 80085bc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80085c0:	1b1b      	subs	r3, r3, r4
 80085c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80085c6:	f8d3 1628 	ldr.w	r1, [r3, #1576]	; 0x628
 80085ca:	22ff      	movs	r2, #255	; 0xff
 80085cc:	2014      	movs	r0, #20
 80085ce:	f7fc ff6f 	bl	80054b0 <LCD_Font.constprop.0>
						rtcDateLast = rtcDate;
 80085d2:	f89b 3733 	ldrb.w	r3, [fp, #1843]	; 0x733
						rtcDayLast = rtcDay;
 80085d6:	f88b 5736 	strb.w	r5, [fp, #1846]	; 0x736
						rtcDateLast = rtcDate;
 80085da:	f88b 3737 	strb.w	r3, [fp, #1847]	; 0x737
	b_ = radius;
 80085de:	2300      	movs	r3, #0
					for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 80085e0:	4a29      	ldr	r2, [pc, #164]	; (8008688 <main+0x1980>)
 80085e2:	6353      	str	r3, [r2, #52]	; 0x34
 80085e4:	3301      	adds	r3, #1
 80085e6:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80085ea:	d1fa      	bne.n	80085e2 <main+0x18da>
					rtcMonthLast = rtcMonth;
 80085ec:	f89b 3734 	ldrb.w	r3, [fp, #1844]	; 0x734
					rtcHrsLast = rtcHrs;
 80085f0:	4a26      	ldr	r2, [pc, #152]	; (800868c <main+0x1984>)
					rtcMonthLast = rtcMonth;
 80085f2:	f88b 3738 	strb.w	r3, [fp, #1848]	; 0x738
					rtcYearLast = rtcYear;
 80085f6:	f89b 3735 	ldrb.w	r3, [fp, #1845]	; 0x735
 80085fa:	f88b 3739 	strb.w	r3, [fp, #1849]	; 0x739
					rtcHrsLast = rtcHrs;
 80085fe:	f89b 3731 	ldrb.w	r3, [fp, #1841]	; 0x731
 8008602:	7293      	strb	r3, [r2, #10]
 8008604:	f7ff bab4 	b.w	8007b70 <main+0xe68>
						if (rtcDate < 10) LCD_Font(380, 40, "0", &DejaVu_Sans_48, 1, BLACK);
 8008608:	2300      	movs	r3, #0
 800860a:	2128      	movs	r1, #40	; 0x28
 800860c:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8008610:	4a1f      	ldr	r2, [pc, #124]	; (8008690 <main+0x1988>)
 8008612:	f7fc ffe1 	bl	80055d8 <LCD_Font.constprop.2>
 8008616:	e774      	b.n	8008502 <main+0x17fa>
  return uwTick;
 8008618:	f8db 2000 	ldr.w	r2, [fp]
 800861c:	f8db 3000 	ldr.w	r3, [fp]
  while ((HAL_GetTick() - tickstart) < wait)
 8008620:	1a9b      	subs	r3, r3, r2
 8008622:	2bc8      	cmp	r3, #200	; 0xc8
 8008624:	d9fa      	bls.n	800861c <main+0x1914>
	if (memcmp(rx_buffer, "CE", 2) == 0) {
 8008626:	f244 5343 	movw	r3, #17731	; 0x4543
			rx_index = 0;
 800862a:	2600      	movs	r6, #0
	if (memcmp(rx_buffer, "CE", 2) == 0) {
 800862c:	f8bb 2630 	ldrh.w	r2, [fp, #1584]	; 0x630
			rx_index = 0;
 8008630:	f88b 662d 	strb.w	r6, [fp, #1581]	; 0x62d
	if (memcmp(rx_buffer, "CE", 2) == 0) {
 8008634:	429a      	cmp	r2, r3
 8008636:	f040 80a6 	bne.w	8008786 <main+0x1a7e>
    __HAL_LOCK(hi2c);
 800863a:	2401      	movs	r4, #1
    uint16_t dt[1] = {0};
 800863c:	4637      	mov	r7, r6
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800863e:	4d15      	ldr	r5, [pc, #84]	; (8008694 <main+0x198c>)
 8008640:	fa1f f986 	uxth.w	r9, r6
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8008644:	4648      	mov	r0, r9
 8008646:	a91c      	add	r1, sp, #112	; 0x70
    uint16_t dt[1] = {0};
 8008648:	f8ad 7070 	strh.w	r7, [sp, #112]	; 0x70
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800864c:	f7fb ff46 	bl	80044dc <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8008650:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 8008654:	2b00      	cmp	r3, #0
 8008656:	d07f      	beq.n	8008758 <main+0x1a50>
  return uwTick;
 8008658:	f8db 8000 	ldr.w	r8, [fp]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800865c:	f89b 3041 	ldrb.w	r3, [fp, #65]	; 0x41
    uint8_t save[] = {val};
 8008660:	f88d 7070 	strb.w	r7, [sp, #112]	; 0x70
 8008664:	2b20      	cmp	r3, #32
 8008666:	d177      	bne.n	8008758 <main+0x1a50>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008668:	f8db 2004 	ldr.w	r2, [fp, #4]
 800866c:	e01b      	b.n	80086a6 <main+0x199e>
 800866e:	bf00      	nop
 8008670:	40011000 	.word	0x40011000
 8008674:	200006d0 	.word	0x200006d0
 8008678:	0801ed24 	.word	0x0801ed24
 800867c:	00ffa500 	.word	0x00ffa500
 8008680:	0800d520 	.word	0x0800d520
 8008684:	0801ed30 	.word	0x0801ed30
 8008688:	40012c00 	.word	0x40012c00
 800868c:	20000000 	.word	0x20000000
 8008690:	0801ed2c 	.word	0x0801ed2c
 8008694:	ffff0000 	.word	0xffff0000
 8008698:	f8db 1000 	ldr.w	r1, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800869c:	eba1 0108 	sub.w	r1, r1, r8
 80086a0:	2919      	cmp	r1, #25
 80086a2:	f200 80e0 	bhi.w	8008866 <main+0x1b5e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086a6:	6993      	ldr	r3, [r2, #24]
 80086a8:	43db      	mvns	r3, r3
 80086aa:	f013 0302 	ands.w	r3, r3, #2
 80086ae:	d0f3      	beq.n	8008698 <main+0x1990>
    __HAL_LOCK(hi2c);
 80086b0:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d04f      	beq.n	8008758 <main+0x1a50>
 80086b8:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80086bc:	6813      	ldr	r3, [r2, #0]
 80086be:	07d8      	lsls	r0, r3, #31
 80086c0:	d403      	bmi.n	80086ca <main+0x19c2>
      __HAL_I2C_ENABLE(hi2c);
 80086c2:	6813      	ldr	r3, [r2, #0]
 80086c4:	f043 0301 	orr.w	r3, r3, #1
 80086c8:	6013      	str	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80086ca:	2140      	movs	r1, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80086cc:	f04f 0c21 	mov.w	ip, #33	; 0x21
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086d0:	6813      	ldr	r3, [r2, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80086d2:	4648      	mov	r0, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086d8:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80086da:	f88b c041 	strb.w	ip, [fp, #65]	; 0x41
    hi2c->pBuffPtr    = pData;
 80086de:	ab1c      	add	r3, sp, #112	; 0x70
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80086e0:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086e4:	f8cb 7044 	str.w	r7, [fp, #68]	; 0x44
    hi2c->XferCount   = Size;
 80086e8:	f8ab 402e 	strh.w	r4, [fp, #46]	; 0x2e
    hi2c->pBuffPtr    = pData;
 80086ec:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
    hi2c->XferSize    = hi2c->XferCount;
 80086f0:	f8bb 302e 	ldrh.w	r3, [fp, #46]	; 0x2e
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80086f4:	4641      	mov	r1, r8
    hi2c->XferSize    = hi2c->XferCount;
 80086f6:	f8ab 302c 	strh.w	r3, [fp, #44]	; 0x2c
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086fa:	f8cb 5030 	str.w	r5, [fp, #48]	; 0x30
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80086fe:	f7fb fe11 	bl	8004324 <I2C_RequestMemoryWrite.constprop.0>
 8008702:	bb48      	cbnz	r0, 8008758 <main+0x1a50>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008704:	f8db 3004 	ldr.w	r3, [fp, #4]
    while (hi2c->XferSize > 0U)
 8008708:	f8bb 002c 	ldrh.w	r0, [fp, #44]	; 0x2c
 800870c:	2800      	cmp	r0, #0
 800870e:	d04b      	beq.n	80087a8 <main+0x1aa0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008710:	6959      	ldr	r1, [r3, #20]
 8008712:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8008716:	d156      	bne.n	80087c6 <main+0x1abe>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008718:	695a      	ldr	r2, [r3, #20]
 800871a:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 800871e:	d17c      	bne.n	800881a <main+0x1b12>
 8008720:	f8db 1000 	ldr.w	r1, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008724:	eba1 0108 	sub.w	r1, r1, r8
 8008728:	2964      	cmp	r1, #100	; 0x64
 800872a:	d9f1      	bls.n	8008710 <main+0x1a08>
        hi2c->State             = HAL_I2C_STATE_READY;
 800872c:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800872e:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8008732:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008736:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800873a:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800873e:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 8008742:	430a      	orrs	r2, r1
 8008744:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008748:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 800874c:	2a04      	cmp	r2, #4
 800874e:	d103      	bne.n	8008758 <main+0x1a50>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008756:	601a      	str	r2, [r3, #0]
		for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 8008758:	3601      	adds	r6, #1
 800875a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 800875e:	f47f af6f 	bne.w	8008640 <main+0x1938>
		uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 8008762:	4dc9      	ldr	r5, [pc, #804]	; (8008a88 <main+0x1d80>)
 8008764:	ac1c      	add	r4, sp, #112	; 0x70
 8008766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  if (huart->gState == HAL_UART_STATE_READY)
 800876a:	f89b 6105 	ldrb.w	r6, [fp, #261]	; 0x105
 800876e:	682b      	ldr	r3, [r5, #0]
 8008770:	2e20      	cmp	r6, #32
 8008772:	6023      	str	r3, [r4, #0]
 8008774:	d107      	bne.n	8008786 <main+0x1a7e>
    __HAL_LOCK(huart);
 8008776:	f89b 3104 	ldrb.w	r3, [fp, #260]	; 0x104
 800877a:	2b01      	cmp	r3, #1
 800877c:	d003      	beq.n	8008786 <main+0x1a7e>
 800877e:	2114      	movs	r1, #20
 8008780:	a81c      	add	r0, sp, #112	; 0x70
 8008782:	f7fc fdbf 	bl	8005304 <HAL_UART_Transmit.part.0.constprop.0.isra.0>
	if (memcmp(rx_buffer, "RT", 2) == 0) {
 8008786:	f245 4352 	movw	r3, #21586	; 0x5452
 800878a:	f8bb 2630 	ldrh.w	r2, [fp, #1584]	; 0x630
 800878e:	429a      	cmp	r2, r3
 8008790:	d078      	beq.n	8008884 <main+0x1b7c>
	for (uint8_t i = 0; i < 255; i++) rx_buffer[i] = 0;
 8008792:	22ff      	movs	r2, #255	; 0xff
 8008794:	2100      	movs	r1, #0
 8008796:	48bd      	ldr	r0, [pc, #756]	; (8008a8c <main+0x1d84>)
 8008798:	f000 f9f0 	bl	8008b7c <memset>
 800879c:	f7ff b97d 	b.w	8007a9a <main+0xd92>
    __HAL_UNLOCK(hdma); 
 80087a0:	f883 1020 	strb.w	r1, [r3, #32]
 80087a4:	f7ff b968 	b.w	8007a78 <main+0xd70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80087a8:	6959      	ldr	r1, [r3, #20]
 80087aa:	f011 0104 	ands.w	r1, r1, #4
 80087ae:	d147      	bne.n	8008840 <main+0x1b38>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087b0:	695a      	ldr	r2, [r3, #20]
 80087b2:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 80087b6:	d130      	bne.n	800881a <main+0x1b12>
 80087b8:	f8db 1000 	ldr.w	r1, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087bc:	eba1 0108 	sub.w	r1, r1, r8
 80087c0:	2964      	cmp	r1, #100	; 0x64
 80087c2:	d9f1      	bls.n	80087a8 <main+0x1aa0>
 80087c4:	e7b2      	b.n	800872c <main+0x1a24>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087c6:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
      hi2c->XferSize--;
 80087ca:	f100 3cff 	add.w	ip, r0, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087ce:	4611      	mov	r1, r2
 80087d0:	f811 eb01 	ldrb.w	lr, [r1], #1
      hi2c->XferSize--;
 80087d4:	fa1f fc8c 	uxth.w	ip, ip
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087d8:	f8c3 e010 	str.w	lr, [r3, #16]
      hi2c->pBuffPtr++;
 80087dc:	f8cb 1028 	str.w	r1, [fp, #40]	; 0x28
      hi2c->XferCount--;
 80087e0:	f8bb 102e 	ldrh.w	r1, [fp, #46]	; 0x2e
      hi2c->XferSize--;
 80087e4:	f8ab c02c 	strh.w	ip, [fp, #44]	; 0x2c
      hi2c->XferCount--;
 80087e8:	3901      	subs	r1, #1
 80087ea:	b289      	uxth	r1, r1
 80087ec:	f8ab 102e 	strh.w	r1, [fp, #46]	; 0x2e
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80087f0:	6959      	ldr	r1, [r3, #20]
 80087f2:	0749      	lsls	r1, r1, #29
 80087f4:	d588      	bpl.n	8008708 <main+0x1a00>
 80087f6:	f1bc 0f00 	cmp.w	ip, #0
 80087fa:	d085      	beq.n	8008708 <main+0x1a00>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087fc:	7851      	ldrb	r1, [r2, #1]
        hi2c->pBuffPtr++;
 80087fe:	3202      	adds	r2, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008800:	6119      	str	r1, [r3, #16]
        hi2c->pBuffPtr++;
 8008802:	f8cb 2028 	str.w	r2, [fp, #40]	; 0x28
        hi2c->XferCount--;
 8008806:	f8bb 202e 	ldrh.w	r2, [fp, #46]	; 0x2e
        hi2c->XferSize--;
 800880a:	3802      	subs	r0, #2
        hi2c->XferCount--;
 800880c:	3a01      	subs	r2, #1
 800880e:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 8008810:	f8ab 002c 	strh.w	r0, [fp, #44]	; 0x2c
        hi2c->XferCount--;
 8008814:	f8ab 202e 	strh.w	r2, [fp, #46]	; 0x2e
 8008818:	e776      	b.n	8008708 <main+0x1a00>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800881a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800881e:	615a      	str	r2, [r3, #20]
    hi2c->State               = HAL_I2C_STATE_READY;
 8008820:	2220      	movs	r2, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8008822:	f8cb 1034 	str.w	r1, [fp, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 8008826:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800882a:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800882e:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8008832:	f88b 1040 	strb.w	r1, [fp, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008836:	f042 0204 	orr.w	r2, r2, #4
 800883a:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
 800883e:	e783      	b.n	8008748 <main+0x1a40>
    hi2c->State = HAL_I2C_STATE_READY;
 8008840:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008848:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800884a:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800884e:	f88b 7042 	strb.w	r7, [fp, #66]	; 0x42
 8008852:	f8db 2000 	ldr.w	r2, [fp]
    __HAL_UNLOCK(hi2c);
 8008856:	f88b 7040 	strb.w	r7, [fp, #64]	; 0x40
 800885a:	f8db 3000 	ldr.w	r3, [fp]
  while ((HAL_GetTick() - tickstart) < wait)
 800885e:	1a9b      	subs	r3, r3, r2
 8008860:	2b05      	cmp	r3, #5
 8008862:	d9fa      	bls.n	800885a <main+0x1b52>
 8008864:	e778      	b.n	8008758 <main+0x1a50>
        hi2c->State             = HAL_I2C_STATE_READY;
 8008866:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008868:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 800886c:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008870:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8008874:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008878:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
 800887c:	4313      	orrs	r3, r2
 800887e:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
 8008882:	e769      	b.n	8008758 <main+0x1a50>
		val[0] = rx_buffer[2];
 8008884:	f8bb 3632 	ldrh.w	r3, [fp, #1586]	; 0x632
		DS3231_setHrs(atoi(val));
 8008888:	a81c      	add	r0, sp, #112	; 0x70
		val[0] = rx_buffer[2];
 800888a:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		DS3231_setHrs(atoi(val));
 800888e:	f000 f946 	bl	8008b1e <atoi>
    return ((val / 10 * 16) + (val % 10));
 8008892:	240a      	movs	r4, #10
 8008894:	b2c5      	uxtb	r5, r0
    rtcBufferSet[2] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
}

void DS3231_setHrs(uint8_t value) {
    DS3231_Update();
 8008896:	f7fc fcad 	bl	80051f4 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 800889a:	fbb5 f6f4 	udiv	r6, r5, r4
 800889e:	fb04 5316 	mls	r3, r4, r6, r5
    rtcBufferSet[3] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80088a2:	2211      	movs	r2, #17
 80088a4:	497a      	ldr	r1, [pc, #488]	; (8008a90 <main+0x1d88>)
    return ((val / 10 * 16) + (val % 10));
 80088a6:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80088aa:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[3] = decToBcd(value);
 80088ac:	f88b 30b7 	strb.w	r3, [fp, #183]	; 0xb7
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80088b0:	f7fc fb6c 	bl	8004f8c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[0] = rx_buffer[4];
 80088b4:	f8bb 3634 	ldrh.w	r3, [fp, #1588]	; 0x634
		DS3231_setMin(atoi(val));
 80088b8:	a81c      	add	r0, sp, #112	; 0x70
		val[0] = rx_buffer[4];
 80088ba:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		DS3231_setMin(atoi(val));
 80088be:	f000 f92e 	bl	8008b1e <atoi>
 80088c2:	b2c5      	uxtb	r5, r0
    DS3231_Update();
 80088c4:	f7fc fc96 	bl	80051f4 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80088c8:	fbb5 f6f4 	udiv	r6, r5, r4
 80088cc:	fb04 5316 	mls	r3, r4, r6, r5
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80088d0:	2211      	movs	r2, #17
 80088d2:	496f      	ldr	r1, [pc, #444]	; (8008a90 <main+0x1d88>)
    return ((val / 10 * 16) + (val % 10));
 80088d4:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80088d8:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[2] = decToBcd(value);
 80088da:	f88b 30b6 	strb.w	r3, [fp, #182]	; 0xb6
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80088de:	f7fc fb55 	bl	8004f8c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[0] = rx_buffer[6];
 80088e2:	f8bb 3636 	ldrh.w	r3, [fp, #1590]	; 0x636
		DS3231_setSec(atoi(val));
 80088e6:	a81c      	add	r0, sp, #112	; 0x70
		val[0] = rx_buffer[6];
 80088e8:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		DS3231_setSec(atoi(val));
 80088ec:	f000 f917 	bl	8008b1e <atoi>
 80088f0:	b2c5      	uxtb	r5, r0
    DS3231_Update();
 80088f2:	f7fc fc7f 	bl	80051f4 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80088f6:	fbb5 f6f4 	udiv	r6, r5, r4
 80088fa:	fb04 5316 	mls	r3, r4, r6, r5
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80088fe:	2211      	movs	r2, #17
 8008900:	4963      	ldr	r1, [pc, #396]	; (8008a90 <main+0x1d88>)
    return ((val / 10 * 16) + (val % 10));
 8008902:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008906:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[1] = decToBcd(value);
 8008908:	f88b 30b5 	strb.w	r3, [fp, #181]	; 0xb5
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800890c:	f7fc fb3e 	bl	8004f8c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[0] = rx_buffer[8];
 8008910:	f8bb 3638 	ldrh.w	r3, [fp, #1592]	; 0x638
		DS3231_setDate(atoi(val));
 8008914:	a81c      	add	r0, sp, #112	; 0x70
		val[0] = rx_buffer[8];
 8008916:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		DS3231_setDate(atoi(val));
 800891a:	f000 f900 	bl	8008b1e <atoi>
 800891e:	b2c5      	uxtb	r5, r0
    rtcBufferSet[4] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
}

void DS3231_setDate(uint8_t value) {
    DS3231_Update();
 8008920:	f7fc fc68 	bl	80051f4 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8008924:	fbb5 f6f4 	udiv	r6, r5, r4
 8008928:	fb04 5316 	mls	r3, r4, r6, r5
    rtcBufferSet[5] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800892c:	2211      	movs	r2, #17
 800892e:	4958      	ldr	r1, [pc, #352]	; (8008a90 <main+0x1d88>)
    return ((val / 10 * 16) + (val % 10));
 8008930:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008934:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[5] = decToBcd(value);
 8008936:	f88b 30b9 	strb.w	r3, [fp, #185]	; 0xb9
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800893a:	f7fc fb27 	bl	8004f8c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[0] = rx_buffer[10];
 800893e:	f8bb 363a 	ldrh.w	r3, [fp, #1594]	; 0x63a
		DS3231_setMonth(atoi(val));
 8008942:	a81c      	add	r0, sp, #112	; 0x70
		val[0] = rx_buffer[10];
 8008944:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		DS3231_setMonth(atoi(val));
 8008948:	f000 f8e9 	bl	8008b1e <atoi>
 800894c:	b2c5      	uxtb	r5, r0
}

void DS3231_setMonth(uint8_t value) {
    DS3231_Update();
 800894e:	f7fc fc51 	bl	80051f4 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8008952:	fbb5 f6f4 	udiv	r6, r5, r4
 8008956:	fb04 5316 	mls	r3, r4, r6, r5
    rtcBufferSet[6] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800895a:	2211      	movs	r2, #17
 800895c:	494c      	ldr	r1, [pc, #304]	; (8008a90 <main+0x1d88>)
    return ((val / 10 * 16) + (val % 10));
 800895e:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008962:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[6] = decToBcd(value);
 8008964:	f88b 30ba 	strb.w	r3, [fp, #186]	; 0xba
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008968:	f7fc fb10 	bl	8004f8c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[0] = rx_buffer[12];
 800896c:	f8bb 363c 	ldrh.w	r3, [fp, #1596]	; 0x63c
		DS3231_setYear(atoi(val));
 8008970:	a81c      	add	r0, sp, #112	; 0x70
		val[0] = rx_buffer[12];
 8008972:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		DS3231_setYear(atoi(val));
 8008976:	f000 f8d2 	bl	8008b1e <atoi>
 800897a:	b2c5      	uxtb	r5, r0
}

void DS3231_setYear(uint8_t value) {
    DS3231_Update();
 800897c:	f7fc fc3a 	bl	80051f4 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8008980:	fbb5 f6f4 	udiv	r6, r5, r4
 8008984:	fb04 5316 	mls	r3, r4, r6, r5
    rtcBufferSet[7] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008988:	2211      	movs	r2, #17
 800898a:	4941      	ldr	r1, [pc, #260]	; (8008a90 <main+0x1d88>)
    return ((val / 10 * 16) + (val % 10));
 800898c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008990:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[7] = decToBcd(value);
 8008992:	f88b 30bb 	strb.w	r3, [fp, #187]	; 0xbb
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008996:	f7fc faf9 	bl	8004f8c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[1] = rx_buffer[14];
 800899a:	f89b 363e 	ldrb.w	r3, [fp, #1598]	; 0x63e
		DS3231_setDay(atoi(val));
 800899e:	a81c      	add	r0, sp, #112	; 0x70
		val[1] = rx_buffer[14];
 80089a0:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
		DS3231_setDay(atoi(val));
 80089a4:	f000 f8bb 	bl	8008b1e <atoi>
 80089a8:	b2c5      	uxtb	r5, r0
    DS3231_Update();
 80089aa:	f7fc fc23 	bl	80051f4 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80089ae:	fbb5 f2f4 	udiv	r2, r5, r4
 80089b2:	fb04 5312 	mls	r3, r4, r2, r5
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80089b6:	20d0      	movs	r0, #208	; 0xd0
    return ((val / 10 * 16) + (val % 10));
 80089b8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80089bc:	4934      	ldr	r1, [pc, #208]	; (8008a90 <main+0x1d88>)
 80089be:	2211      	movs	r2, #17
    rtcBufferSet[4] = decToBcd(value);
 80089c0:	f88b 30b8 	strb.w	r3, [fp, #184]	; 0xb8
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80089c4:	f7fc fae2 	bl	8004f8c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
 80089c8:	e6e3      	b.n	8008792 <main+0x1a8a>
    __HAL_TIM_MOE_ENABLE(htim);
 80089ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089d0:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089d2:	689a      	ldr	r2, [r3, #8]
 80089d4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089d8:	2a06      	cmp	r2, #6
 80089da:	f47e afa5 	bne.w	8007928 <main+0xc20>
 80089de:	f7fe bfa7 	b.w	8007930 <main+0xc28>
						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 80089e2:	4620      	mov	r0, r4
 80089e4:	4629      	mov	r1, r5
 80089e6:	4b2b      	ldr	r3, [pc, #172]	; (8008a94 <main+0x1d8c>)
 80089e8:	f7fd fe44 	bl	8006674 <__aeabi_dcmpgt>
 80089ec:	bb30      	cbnz	r0, 8008a3c <main+0x1d34>
						else if (temperature < 10 && temperature > 0) {
 80089ee:	2200      	movs	r2, #0
 80089f0:	2300      	movs	r3, #0
 80089f2:	4620      	mov	r0, r4
 80089f4:	4629      	mov	r1, r5
 80089f6:	f7fd fe3d 	bl	8006674 <__aeabi_dcmpgt>
 80089fa:	b988      	cbnz	r0, 8008a20 <main+0x1d18>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 80089fc:	4629      	mov	r1, r5
 80089fe:	4620      	mov	r0, r4
 8008a00:	f7fd fe58 	bl	80066b4 <__aeabi_d2iz>
 8008a04:	4602      	mov	r2, r0
 8008a06:	4924      	ldr	r1, [pc, #144]	; (8008a98 <main+0x1d90>)
 8008a08:	a815      	add	r0, sp, #84	; 0x54
 8008a0a:	b252      	sxtb	r2, r2
 8008a0c:	f000 ff30 	bl	8009870 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8008a10:	21bb      	movs	r1, #187	; 0xbb
 8008a12:	2001      	movs	r0, #1
 8008a14:	4b21      	ldr	r3, [pc, #132]	; (8008a9c <main+0x1d94>)
 8008a16:	aa15      	add	r2, sp, #84	; 0x54
 8008a18:	f7fc fdde 	bl	80055d8 <LCD_Font.constprop.2>
 8008a1c:	f7ff ba78 	b.w	8007f10 <main+0x1208>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8008a20:	4622      	mov	r2, r4
 8008a22:	462b      	mov	r3, r5
 8008a24:	491e      	ldr	r1, [pc, #120]	; (8008aa0 <main+0x1d98>)
 8008a26:	a815      	add	r0, sp, #84	; 0x54
 8008a28:	f000 ff22 	bl	8009870 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8008a2c:	21bb      	movs	r1, #187	; 0xbb
 8008a2e:	201b      	movs	r0, #27
 8008a30:	4b1a      	ldr	r3, [pc, #104]	; (8008a9c <main+0x1d94>)
 8008a32:	aa15      	add	r2, sp, #84	; 0x54
 8008a34:	f7fc fdd0 	bl	80055d8 <LCD_Font.constprop.2>
 8008a38:	f7ff ba6a 	b.w	8007f10 <main+0x1208>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8008a3c:	4622      	mov	r2, r4
 8008a3e:	462b      	mov	r3, r5
 8008a40:	4917      	ldr	r1, [pc, #92]	; (8008aa0 <main+0x1d98>)
 8008a42:	a815      	add	r0, sp, #84	; 0x54
 8008a44:	f000 ff14 	bl	8009870 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8008a48:	e7e2      	b.n	8008a10 <main+0x1d08>
						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	4629      	mov	r1, r5
 8008a4e:	4b11      	ldr	r3, [pc, #68]	; (8008a94 <main+0x1d8c>)
 8008a50:	f7fd fe10 	bl	8006674 <__aeabi_dcmpgt>
 8008a54:	bba0      	cbnz	r0, 8008ac0 <main+0x1db8>
						else if (temperatureLast < 10 && temperatureLast > 0) {
 8008a56:	2200      	movs	r2, #0
 8008a58:	2300      	movs	r3, #0
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	f7fd fe09 	bl	8006674 <__aeabi_dcmpgt>
 8008a62:	b9f8      	cbnz	r0, 8008aa4 <main+0x1d9c>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 8008a64:	4629      	mov	r1, r5
 8008a66:	4620      	mov	r0, r4
 8008a68:	f7fd fe24 	bl	80066b4 <__aeabi_d2iz>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	490a      	ldr	r1, [pc, #40]	; (8008a98 <main+0x1d90>)
 8008a70:	a815      	add	r0, sp, #84	; 0x54
 8008a72:	b252      	sxtb	r2, r2
 8008a74:	f000 fefc 	bl	8009870 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8008a78:	2300      	movs	r3, #0
 8008a7a:	21bb      	movs	r1, #187	; 0xbb
 8008a7c:	2001      	movs	r0, #1
 8008a7e:	aa15      	add	r2, sp, #84	; 0x54
 8008a80:	f7fc fdaa 	bl	80055d8 <LCD_Font.constprop.2>
 8008a84:	f7ff ba1e 	b.w	8007ec4 <main+0x11bc>
 8008a88:	0801ed90 	.word	0x0801ed90
 8008a8c:	20000830 	.word	0x20000830
 8008a90:	200002b4 	.word	0x200002b4
 8008a94:	c0240000 	.word	0xc0240000
 8008a98:	0801ed48 	.word	0x0801ed48
 8008a9c:	00ffa500 	.word	0x00ffa500
 8008aa0:	0801ed40 	.word	0x0801ed40
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8008aa4:	4622      	mov	r2, r4
 8008aa6:	462b      	mov	r3, r5
 8008aa8:	4909      	ldr	r1, [pc, #36]	; (8008ad0 <main+0x1dc8>)
 8008aaa:	a815      	add	r0, sp, #84	; 0x54
 8008aac:	f000 fee0 	bl	8009870 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	21bb      	movs	r1, #187	; 0xbb
 8008ab4:	201b      	movs	r0, #27
 8008ab6:	aa15      	add	r2, sp, #84	; 0x54
 8008ab8:	f7fc fd8e 	bl	80055d8 <LCD_Font.constprop.2>
 8008abc:	f7ff ba02 	b.w	8007ec4 <main+0x11bc>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8008ac0:	4622      	mov	r2, r4
 8008ac2:	462b      	mov	r3, r5
 8008ac4:	4902      	ldr	r1, [pc, #8]	; (8008ad0 <main+0x1dc8>)
 8008ac6:	a815      	add	r0, sp, #84	; 0x54
 8008ac8:	f000 fed2 	bl	8009870 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8008acc:	e7d4      	b.n	8008a78 <main+0x1d70>
 8008ace:	bf00      	nop
 8008ad0:	0801ed40 	.word	0x0801ed40

08008ad4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008ad4:	480c      	ldr	r0, [pc, #48]	; (8008b08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008ad6:	490d      	ldr	r1, [pc, #52]	; (8008b0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008ad8:	4a0d      	ldr	r2, [pc, #52]	; (8008b10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008adc:	e002      	b.n	8008ae4 <LoopCopyDataInit>

08008ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008ae2:	3304      	adds	r3, #4

08008ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008ae8:	d3f9      	bcc.n	8008ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008aea:	4a0a      	ldr	r2, [pc, #40]	; (8008b14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008aec:	4c0a      	ldr	r4, [pc, #40]	; (8008b18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008af0:	e001      	b.n	8008af6 <LoopFillZerobss>

08008af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008af4:	3204      	adds	r2, #4

08008af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008af8:	d3fb      	bcc.n	8008af2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008afa:	f7fd f965 	bl	8005dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008afe:	f000 f819 	bl	8008b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008b02:	f7fe f901 	bl	8006d08 <main>
  bx lr
 8008b06:	4770      	bx	lr
  ldr r0, =_sdata
 8008b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008b0c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8008b10:	0801f29c 	.word	0x0801f29c
  ldr r2, =_sbss
 8008b14:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8008b18:	20000980 	.word	0x20000980

08008b1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008b1c:	e7fe      	b.n	8008b1c <ADC1_2_IRQHandler>

08008b1e <atoi>:
 8008b1e:	220a      	movs	r2, #10
 8008b20:	2100      	movs	r1, #0
 8008b22:	f001 bd55 	b.w	800a5d0 <strtol>
	...

08008b28 <__errno>:
 8008b28:	4b01      	ldr	r3, [pc, #4]	; (8008b30 <__errno+0x8>)
 8008b2a:	6818      	ldr	r0, [r3, #0]
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	2000000c 	.word	0x2000000c

08008b34 <__libc_init_array>:
 8008b34:	b570      	push	{r4, r5, r6, lr}
 8008b36:	2600      	movs	r6, #0
 8008b38:	4d0c      	ldr	r5, [pc, #48]	; (8008b6c <__libc_init_array+0x38>)
 8008b3a:	4c0d      	ldr	r4, [pc, #52]	; (8008b70 <__libc_init_array+0x3c>)
 8008b3c:	1b64      	subs	r4, r4, r5
 8008b3e:	10a4      	asrs	r4, r4, #2
 8008b40:	42a6      	cmp	r6, r4
 8008b42:	d109      	bne.n	8008b58 <__libc_init_array+0x24>
 8008b44:	f004 fce0 	bl	800d508 <_init>
 8008b48:	2600      	movs	r6, #0
 8008b4a:	4d0a      	ldr	r5, [pc, #40]	; (8008b74 <__libc_init_array+0x40>)
 8008b4c:	4c0a      	ldr	r4, [pc, #40]	; (8008b78 <__libc_init_array+0x44>)
 8008b4e:	1b64      	subs	r4, r4, r5
 8008b50:	10a4      	asrs	r4, r4, #2
 8008b52:	42a6      	cmp	r6, r4
 8008b54:	d105      	bne.n	8008b62 <__libc_init_array+0x2e>
 8008b56:	bd70      	pop	{r4, r5, r6, pc}
 8008b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b5c:	4798      	blx	r3
 8008b5e:	3601      	adds	r6, #1
 8008b60:	e7ee      	b.n	8008b40 <__libc_init_array+0xc>
 8008b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b66:	4798      	blx	r3
 8008b68:	3601      	adds	r6, #1
 8008b6a:	e7f2      	b.n	8008b52 <__libc_init_array+0x1e>
 8008b6c:	0801f294 	.word	0x0801f294
 8008b70:	0801f294 	.word	0x0801f294
 8008b74:	0801f294 	.word	0x0801f294
 8008b78:	0801f298 	.word	0x0801f298

08008b7c <memset>:
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	4402      	add	r2, r0
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d100      	bne.n	8008b86 <memset+0xa>
 8008b84:	4770      	bx	lr
 8008b86:	f803 1b01 	strb.w	r1, [r3], #1
 8008b8a:	e7f9      	b.n	8008b80 <memset+0x4>

08008b8c <__cvt>:
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b92:	461f      	mov	r7, r3
 8008b94:	bfbb      	ittet	lt
 8008b96:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008b9a:	461f      	movlt	r7, r3
 8008b9c:	2300      	movge	r3, #0
 8008b9e:	232d      	movlt	r3, #45	; 0x2d
 8008ba0:	b088      	sub	sp, #32
 8008ba2:	4614      	mov	r4, r2
 8008ba4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ba6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008ba8:	7013      	strb	r3, [r2, #0]
 8008baa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008bac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008bb0:	f023 0820 	bic.w	r8, r3, #32
 8008bb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008bb8:	d005      	beq.n	8008bc6 <__cvt+0x3a>
 8008bba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008bbe:	d100      	bne.n	8008bc2 <__cvt+0x36>
 8008bc0:	3501      	adds	r5, #1
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	e000      	b.n	8008bc8 <__cvt+0x3c>
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	aa07      	add	r2, sp, #28
 8008bca:	9204      	str	r2, [sp, #16]
 8008bcc:	aa06      	add	r2, sp, #24
 8008bce:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008bd2:	e9cd 3500 	strd	r3, r5, [sp]
 8008bd6:	4622      	mov	r2, r4
 8008bd8:	463b      	mov	r3, r7
 8008bda:	f001 fd91 	bl	800a700 <_dtoa_r>
 8008bde:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008be2:	4606      	mov	r6, r0
 8008be4:	d102      	bne.n	8008bec <__cvt+0x60>
 8008be6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008be8:	07db      	lsls	r3, r3, #31
 8008bea:	d522      	bpl.n	8008c32 <__cvt+0xa6>
 8008bec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008bf0:	eb06 0905 	add.w	r9, r6, r5
 8008bf4:	d110      	bne.n	8008c18 <__cvt+0x8c>
 8008bf6:	7833      	ldrb	r3, [r6, #0]
 8008bf8:	2b30      	cmp	r3, #48	; 0x30
 8008bfa:	d10a      	bne.n	8008c12 <__cvt+0x86>
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	2300      	movs	r3, #0
 8008c00:	4620      	mov	r0, r4
 8008c02:	4639      	mov	r1, r7
 8008c04:	f7fd fd0e 	bl	8006624 <__aeabi_dcmpeq>
 8008c08:	b918      	cbnz	r0, 8008c12 <__cvt+0x86>
 8008c0a:	f1c5 0501 	rsb	r5, r5, #1
 8008c0e:	f8ca 5000 	str.w	r5, [sl]
 8008c12:	f8da 3000 	ldr.w	r3, [sl]
 8008c16:	4499      	add	r9, r3
 8008c18:	2200      	movs	r2, #0
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	4639      	mov	r1, r7
 8008c20:	f7fd fd00 	bl	8006624 <__aeabi_dcmpeq>
 8008c24:	b108      	cbz	r0, 8008c2a <__cvt+0x9e>
 8008c26:	f8cd 901c 	str.w	r9, [sp, #28]
 8008c2a:	2230      	movs	r2, #48	; 0x30
 8008c2c:	9b07      	ldr	r3, [sp, #28]
 8008c2e:	454b      	cmp	r3, r9
 8008c30:	d307      	bcc.n	8008c42 <__cvt+0xb6>
 8008c32:	4630      	mov	r0, r6
 8008c34:	9b07      	ldr	r3, [sp, #28]
 8008c36:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008c38:	1b9b      	subs	r3, r3, r6
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	b008      	add	sp, #32
 8008c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c42:	1c59      	adds	r1, r3, #1
 8008c44:	9107      	str	r1, [sp, #28]
 8008c46:	701a      	strb	r2, [r3, #0]
 8008c48:	e7f0      	b.n	8008c2c <__cvt+0xa0>

08008c4a <__exponent>:
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c4e:	2900      	cmp	r1, #0
 8008c50:	f803 2b02 	strb.w	r2, [r3], #2
 8008c54:	bfb6      	itet	lt
 8008c56:	222d      	movlt	r2, #45	; 0x2d
 8008c58:	222b      	movge	r2, #43	; 0x2b
 8008c5a:	4249      	neglt	r1, r1
 8008c5c:	2909      	cmp	r1, #9
 8008c5e:	7042      	strb	r2, [r0, #1]
 8008c60:	dd2b      	ble.n	8008cba <__exponent+0x70>
 8008c62:	f10d 0407 	add.w	r4, sp, #7
 8008c66:	46a4      	mov	ip, r4
 8008c68:	270a      	movs	r7, #10
 8008c6a:	fb91 f6f7 	sdiv	r6, r1, r7
 8008c6e:	460a      	mov	r2, r1
 8008c70:	46a6      	mov	lr, r4
 8008c72:	fb07 1516 	mls	r5, r7, r6, r1
 8008c76:	2a63      	cmp	r2, #99	; 0x63
 8008c78:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008c7c:	4631      	mov	r1, r6
 8008c7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008c82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008c86:	dcf0      	bgt.n	8008c6a <__exponent+0x20>
 8008c88:	3130      	adds	r1, #48	; 0x30
 8008c8a:	f1ae 0502 	sub.w	r5, lr, #2
 8008c8e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008c92:	4629      	mov	r1, r5
 8008c94:	1c44      	adds	r4, r0, #1
 8008c96:	4561      	cmp	r1, ip
 8008c98:	d30a      	bcc.n	8008cb0 <__exponent+0x66>
 8008c9a:	f10d 0209 	add.w	r2, sp, #9
 8008c9e:	eba2 020e 	sub.w	r2, r2, lr
 8008ca2:	4565      	cmp	r5, ip
 8008ca4:	bf88      	it	hi
 8008ca6:	2200      	movhi	r2, #0
 8008ca8:	4413      	add	r3, r2
 8008caa:	1a18      	subs	r0, r3, r0
 8008cac:	b003      	add	sp, #12
 8008cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cb0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cb4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008cb8:	e7ed      	b.n	8008c96 <__exponent+0x4c>
 8008cba:	2330      	movs	r3, #48	; 0x30
 8008cbc:	3130      	adds	r1, #48	; 0x30
 8008cbe:	7083      	strb	r3, [r0, #2]
 8008cc0:	70c1      	strb	r1, [r0, #3]
 8008cc2:	1d03      	adds	r3, r0, #4
 8008cc4:	e7f1      	b.n	8008caa <__exponent+0x60>
	...

08008cc8 <_printf_float>:
 8008cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ccc:	b091      	sub	sp, #68	; 0x44
 8008cce:	460c      	mov	r4, r1
 8008cd0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008cd4:	4616      	mov	r6, r2
 8008cd6:	461f      	mov	r7, r3
 8008cd8:	4605      	mov	r5, r0
 8008cda:	f002 fe65 	bl	800b9a8 <_localeconv_r>
 8008cde:	6803      	ldr	r3, [r0, #0]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce4:	f7fd f872 	bl	8005dcc <strlen>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	930e      	str	r3, [sp, #56]	; 0x38
 8008cec:	f8d8 3000 	ldr.w	r3, [r8]
 8008cf0:	900a      	str	r0, [sp, #40]	; 0x28
 8008cf2:	3307      	adds	r3, #7
 8008cf4:	f023 0307 	bic.w	r3, r3, #7
 8008cf8:	f103 0208 	add.w	r2, r3, #8
 8008cfc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008d00:	f8d4 b000 	ldr.w	fp, [r4]
 8008d04:	f8c8 2000 	str.w	r2, [r8]
 8008d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008d10:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008d14:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008d18:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1e:	4640      	mov	r0, r8
 8008d20:	4b9c      	ldr	r3, [pc, #624]	; (8008f94 <_printf_float+0x2cc>)
 8008d22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d24:	f7fd fcb0 	bl	8006688 <__aeabi_dcmpun>
 8008d28:	bb70      	cbnz	r0, 8008d88 <_printf_float+0xc0>
 8008d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d2e:	4640      	mov	r0, r8
 8008d30:	4b98      	ldr	r3, [pc, #608]	; (8008f94 <_printf_float+0x2cc>)
 8008d32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d34:	f7fd fc8a 	bl	800664c <__aeabi_dcmple>
 8008d38:	bb30      	cbnz	r0, 8008d88 <_printf_float+0xc0>
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	4640      	mov	r0, r8
 8008d40:	4651      	mov	r1, sl
 8008d42:	f7fd fc79 	bl	8006638 <__aeabi_dcmplt>
 8008d46:	b110      	cbz	r0, 8008d4e <_printf_float+0x86>
 8008d48:	232d      	movs	r3, #45	; 0x2d
 8008d4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d4e:	4b92      	ldr	r3, [pc, #584]	; (8008f98 <_printf_float+0x2d0>)
 8008d50:	4892      	ldr	r0, [pc, #584]	; (8008f9c <_printf_float+0x2d4>)
 8008d52:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008d56:	bf94      	ite	ls
 8008d58:	4698      	movls	r8, r3
 8008d5a:	4680      	movhi	r8, r0
 8008d5c:	2303      	movs	r3, #3
 8008d5e:	f04f 0a00 	mov.w	sl, #0
 8008d62:	6123      	str	r3, [r4, #16]
 8008d64:	f02b 0304 	bic.w	r3, fp, #4
 8008d68:	6023      	str	r3, [r4, #0]
 8008d6a:	4633      	mov	r3, r6
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	4628      	mov	r0, r5
 8008d70:	9700      	str	r7, [sp, #0]
 8008d72:	aa0f      	add	r2, sp, #60	; 0x3c
 8008d74:	f000 f9d4 	bl	8009120 <_printf_common>
 8008d78:	3001      	adds	r0, #1
 8008d7a:	f040 8090 	bne.w	8008e9e <_printf_float+0x1d6>
 8008d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d82:	b011      	add	sp, #68	; 0x44
 8008d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d88:	4642      	mov	r2, r8
 8008d8a:	4653      	mov	r3, sl
 8008d8c:	4640      	mov	r0, r8
 8008d8e:	4651      	mov	r1, sl
 8008d90:	f7fd fc7a 	bl	8006688 <__aeabi_dcmpun>
 8008d94:	b148      	cbz	r0, 8008daa <_printf_float+0xe2>
 8008d96:	f1ba 0f00 	cmp.w	sl, #0
 8008d9a:	bfb8      	it	lt
 8008d9c:	232d      	movlt	r3, #45	; 0x2d
 8008d9e:	4880      	ldr	r0, [pc, #512]	; (8008fa0 <_printf_float+0x2d8>)
 8008da0:	bfb8      	it	lt
 8008da2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008da6:	4b7f      	ldr	r3, [pc, #508]	; (8008fa4 <_printf_float+0x2dc>)
 8008da8:	e7d3      	b.n	8008d52 <_printf_float+0x8a>
 8008daa:	6863      	ldr	r3, [r4, #4]
 8008dac:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008db0:	1c5a      	adds	r2, r3, #1
 8008db2:	d142      	bne.n	8008e3a <_printf_float+0x172>
 8008db4:	2306      	movs	r3, #6
 8008db6:	6063      	str	r3, [r4, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	9206      	str	r2, [sp, #24]
 8008dbc:	aa0e      	add	r2, sp, #56	; 0x38
 8008dbe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008dc2:	aa0d      	add	r2, sp, #52	; 0x34
 8008dc4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008dc8:	9203      	str	r2, [sp, #12]
 8008dca:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008dce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008dd2:	6023      	str	r3, [r4, #0]
 8008dd4:	6863      	ldr	r3, [r4, #4]
 8008dd6:	4642      	mov	r2, r8
 8008dd8:	9300      	str	r3, [sp, #0]
 8008dda:	4628      	mov	r0, r5
 8008ddc:	4653      	mov	r3, sl
 8008dde:	910b      	str	r1, [sp, #44]	; 0x2c
 8008de0:	f7ff fed4 	bl	8008b8c <__cvt>
 8008de4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008de6:	4680      	mov	r8, r0
 8008de8:	2947      	cmp	r1, #71	; 0x47
 8008dea:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008dec:	d108      	bne.n	8008e00 <_printf_float+0x138>
 8008dee:	1cc8      	adds	r0, r1, #3
 8008df0:	db02      	blt.n	8008df8 <_printf_float+0x130>
 8008df2:	6863      	ldr	r3, [r4, #4]
 8008df4:	4299      	cmp	r1, r3
 8008df6:	dd40      	ble.n	8008e7a <_printf_float+0x1b2>
 8008df8:	f1a9 0902 	sub.w	r9, r9, #2
 8008dfc:	fa5f f989 	uxtb.w	r9, r9
 8008e00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008e04:	d81f      	bhi.n	8008e46 <_printf_float+0x17e>
 8008e06:	464a      	mov	r2, r9
 8008e08:	3901      	subs	r1, #1
 8008e0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008e0e:	910d      	str	r1, [sp, #52]	; 0x34
 8008e10:	f7ff ff1b 	bl	8008c4a <__exponent>
 8008e14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e16:	4682      	mov	sl, r0
 8008e18:	1813      	adds	r3, r2, r0
 8008e1a:	2a01      	cmp	r2, #1
 8008e1c:	6123      	str	r3, [r4, #16]
 8008e1e:	dc02      	bgt.n	8008e26 <_printf_float+0x15e>
 8008e20:	6822      	ldr	r2, [r4, #0]
 8008e22:	07d2      	lsls	r2, r2, #31
 8008e24:	d501      	bpl.n	8008e2a <_printf_float+0x162>
 8008e26:	3301      	adds	r3, #1
 8008e28:	6123      	str	r3, [r4, #16]
 8008e2a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d09b      	beq.n	8008d6a <_printf_float+0xa2>
 8008e32:	232d      	movs	r3, #45	; 0x2d
 8008e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e38:	e797      	b.n	8008d6a <_printf_float+0xa2>
 8008e3a:	2947      	cmp	r1, #71	; 0x47
 8008e3c:	d1bc      	bne.n	8008db8 <_printf_float+0xf0>
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1ba      	bne.n	8008db8 <_printf_float+0xf0>
 8008e42:	2301      	movs	r3, #1
 8008e44:	e7b7      	b.n	8008db6 <_printf_float+0xee>
 8008e46:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008e4a:	d118      	bne.n	8008e7e <_printf_float+0x1b6>
 8008e4c:	2900      	cmp	r1, #0
 8008e4e:	6863      	ldr	r3, [r4, #4]
 8008e50:	dd0b      	ble.n	8008e6a <_printf_float+0x1a2>
 8008e52:	6121      	str	r1, [r4, #16]
 8008e54:	b913      	cbnz	r3, 8008e5c <_printf_float+0x194>
 8008e56:	6822      	ldr	r2, [r4, #0]
 8008e58:	07d0      	lsls	r0, r2, #31
 8008e5a:	d502      	bpl.n	8008e62 <_printf_float+0x19a>
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	440b      	add	r3, r1
 8008e60:	6123      	str	r3, [r4, #16]
 8008e62:	f04f 0a00 	mov.w	sl, #0
 8008e66:	65a1      	str	r1, [r4, #88]	; 0x58
 8008e68:	e7df      	b.n	8008e2a <_printf_float+0x162>
 8008e6a:	b913      	cbnz	r3, 8008e72 <_printf_float+0x1aa>
 8008e6c:	6822      	ldr	r2, [r4, #0]
 8008e6e:	07d2      	lsls	r2, r2, #31
 8008e70:	d501      	bpl.n	8008e76 <_printf_float+0x1ae>
 8008e72:	3302      	adds	r3, #2
 8008e74:	e7f4      	b.n	8008e60 <_printf_float+0x198>
 8008e76:	2301      	movs	r3, #1
 8008e78:	e7f2      	b.n	8008e60 <_printf_float+0x198>
 8008e7a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008e7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e80:	4299      	cmp	r1, r3
 8008e82:	db05      	blt.n	8008e90 <_printf_float+0x1c8>
 8008e84:	6823      	ldr	r3, [r4, #0]
 8008e86:	6121      	str	r1, [r4, #16]
 8008e88:	07d8      	lsls	r0, r3, #31
 8008e8a:	d5ea      	bpl.n	8008e62 <_printf_float+0x19a>
 8008e8c:	1c4b      	adds	r3, r1, #1
 8008e8e:	e7e7      	b.n	8008e60 <_printf_float+0x198>
 8008e90:	2900      	cmp	r1, #0
 8008e92:	bfcc      	ite	gt
 8008e94:	2201      	movgt	r2, #1
 8008e96:	f1c1 0202 	rsble	r2, r1, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	e7e0      	b.n	8008e60 <_printf_float+0x198>
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	055a      	lsls	r2, r3, #21
 8008ea2:	d407      	bmi.n	8008eb4 <_printf_float+0x1ec>
 8008ea4:	6923      	ldr	r3, [r4, #16]
 8008ea6:	4642      	mov	r2, r8
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	4628      	mov	r0, r5
 8008eac:	47b8      	blx	r7
 8008eae:	3001      	adds	r0, #1
 8008eb0:	d12b      	bne.n	8008f0a <_printf_float+0x242>
 8008eb2:	e764      	b.n	8008d7e <_printf_float+0xb6>
 8008eb4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008eb8:	f240 80dd 	bls.w	8009076 <_printf_float+0x3ae>
 8008ebc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	f7fd fbae 	bl	8006624 <__aeabi_dcmpeq>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d033      	beq.n	8008f34 <_printf_float+0x26c>
 8008ecc:	2301      	movs	r3, #1
 8008ece:	4631      	mov	r1, r6
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	4a35      	ldr	r2, [pc, #212]	; (8008fa8 <_printf_float+0x2e0>)
 8008ed4:	47b8      	blx	r7
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	f43f af51 	beq.w	8008d7e <_printf_float+0xb6>
 8008edc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	db02      	blt.n	8008eea <_printf_float+0x222>
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	07d8      	lsls	r0, r3, #31
 8008ee8:	d50f      	bpl.n	8008f0a <_printf_float+0x242>
 8008eea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008eee:	4631      	mov	r1, r6
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	47b8      	blx	r7
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	f43f af42 	beq.w	8008d7e <_printf_float+0xb6>
 8008efa:	f04f 0800 	mov.w	r8, #0
 8008efe:	f104 091a 	add.w	r9, r4, #26
 8008f02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f04:	3b01      	subs	r3, #1
 8008f06:	4543      	cmp	r3, r8
 8008f08:	dc09      	bgt.n	8008f1e <_printf_float+0x256>
 8008f0a:	6823      	ldr	r3, [r4, #0]
 8008f0c:	079b      	lsls	r3, r3, #30
 8008f0e:	f100 8102 	bmi.w	8009116 <_printf_float+0x44e>
 8008f12:	68e0      	ldr	r0, [r4, #12]
 8008f14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f16:	4298      	cmp	r0, r3
 8008f18:	bfb8      	it	lt
 8008f1a:	4618      	movlt	r0, r3
 8008f1c:	e731      	b.n	8008d82 <_printf_float+0xba>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	464a      	mov	r2, r9
 8008f22:	4631      	mov	r1, r6
 8008f24:	4628      	mov	r0, r5
 8008f26:	47b8      	blx	r7
 8008f28:	3001      	adds	r0, #1
 8008f2a:	f43f af28 	beq.w	8008d7e <_printf_float+0xb6>
 8008f2e:	f108 0801 	add.w	r8, r8, #1
 8008f32:	e7e6      	b.n	8008f02 <_printf_float+0x23a>
 8008f34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	dc38      	bgt.n	8008fac <_printf_float+0x2e4>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	4631      	mov	r1, r6
 8008f3e:	4628      	mov	r0, r5
 8008f40:	4a19      	ldr	r2, [pc, #100]	; (8008fa8 <_printf_float+0x2e0>)
 8008f42:	47b8      	blx	r7
 8008f44:	3001      	adds	r0, #1
 8008f46:	f43f af1a 	beq.w	8008d7e <_printf_float+0xb6>
 8008f4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	d102      	bne.n	8008f58 <_printf_float+0x290>
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	07d9      	lsls	r1, r3, #31
 8008f56:	d5d8      	bpl.n	8008f0a <_printf_float+0x242>
 8008f58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f5c:	4631      	mov	r1, r6
 8008f5e:	4628      	mov	r0, r5
 8008f60:	47b8      	blx	r7
 8008f62:	3001      	adds	r0, #1
 8008f64:	f43f af0b 	beq.w	8008d7e <_printf_float+0xb6>
 8008f68:	f04f 0900 	mov.w	r9, #0
 8008f6c:	f104 0a1a 	add.w	sl, r4, #26
 8008f70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f72:	425b      	negs	r3, r3
 8008f74:	454b      	cmp	r3, r9
 8008f76:	dc01      	bgt.n	8008f7c <_printf_float+0x2b4>
 8008f78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f7a:	e794      	b.n	8008ea6 <_printf_float+0x1de>
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	4652      	mov	r2, sl
 8008f80:	4631      	mov	r1, r6
 8008f82:	4628      	mov	r0, r5
 8008f84:	47b8      	blx	r7
 8008f86:	3001      	adds	r0, #1
 8008f88:	f43f aef9 	beq.w	8008d7e <_printf_float+0xb6>
 8008f8c:	f109 0901 	add.w	r9, r9, #1
 8008f90:	e7ee      	b.n	8008f70 <_printf_float+0x2a8>
 8008f92:	bf00      	nop
 8008f94:	7fefffff 	.word	0x7fefffff
 8008f98:	0801edf4 	.word	0x0801edf4
 8008f9c:	0801edf8 	.word	0x0801edf8
 8008fa0:	0801ee00 	.word	0x0801ee00
 8008fa4:	0801edfc 	.word	0x0801edfc
 8008fa8:	0801ee04 	.word	0x0801ee04
 8008fac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	bfa8      	it	ge
 8008fb4:	461a      	movge	r2, r3
 8008fb6:	2a00      	cmp	r2, #0
 8008fb8:	4691      	mov	r9, r2
 8008fba:	dc37      	bgt.n	800902c <_printf_float+0x364>
 8008fbc:	f04f 0b00 	mov.w	fp, #0
 8008fc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fc4:	f104 021a 	add.w	r2, r4, #26
 8008fc8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008fcc:	ebaa 0309 	sub.w	r3, sl, r9
 8008fd0:	455b      	cmp	r3, fp
 8008fd2:	dc33      	bgt.n	800903c <_printf_float+0x374>
 8008fd4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	db3b      	blt.n	8009054 <_printf_float+0x38c>
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	07da      	lsls	r2, r3, #31
 8008fe0:	d438      	bmi.n	8009054 <_printf_float+0x38c>
 8008fe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fe4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008fe6:	eba3 020a 	sub.w	r2, r3, sl
 8008fea:	eba3 0901 	sub.w	r9, r3, r1
 8008fee:	4591      	cmp	r9, r2
 8008ff0:	bfa8      	it	ge
 8008ff2:	4691      	movge	r9, r2
 8008ff4:	f1b9 0f00 	cmp.w	r9, #0
 8008ff8:	dc34      	bgt.n	8009064 <_printf_float+0x39c>
 8008ffa:	f04f 0800 	mov.w	r8, #0
 8008ffe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009002:	f104 0a1a 	add.w	sl, r4, #26
 8009006:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800900a:	1a9b      	subs	r3, r3, r2
 800900c:	eba3 0309 	sub.w	r3, r3, r9
 8009010:	4543      	cmp	r3, r8
 8009012:	f77f af7a 	ble.w	8008f0a <_printf_float+0x242>
 8009016:	2301      	movs	r3, #1
 8009018:	4652      	mov	r2, sl
 800901a:	4631      	mov	r1, r6
 800901c:	4628      	mov	r0, r5
 800901e:	47b8      	blx	r7
 8009020:	3001      	adds	r0, #1
 8009022:	f43f aeac 	beq.w	8008d7e <_printf_float+0xb6>
 8009026:	f108 0801 	add.w	r8, r8, #1
 800902a:	e7ec      	b.n	8009006 <_printf_float+0x33e>
 800902c:	4613      	mov	r3, r2
 800902e:	4631      	mov	r1, r6
 8009030:	4642      	mov	r2, r8
 8009032:	4628      	mov	r0, r5
 8009034:	47b8      	blx	r7
 8009036:	3001      	adds	r0, #1
 8009038:	d1c0      	bne.n	8008fbc <_printf_float+0x2f4>
 800903a:	e6a0      	b.n	8008d7e <_printf_float+0xb6>
 800903c:	2301      	movs	r3, #1
 800903e:	4631      	mov	r1, r6
 8009040:	4628      	mov	r0, r5
 8009042:	920b      	str	r2, [sp, #44]	; 0x2c
 8009044:	47b8      	blx	r7
 8009046:	3001      	adds	r0, #1
 8009048:	f43f ae99 	beq.w	8008d7e <_printf_float+0xb6>
 800904c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800904e:	f10b 0b01 	add.w	fp, fp, #1
 8009052:	e7b9      	b.n	8008fc8 <_printf_float+0x300>
 8009054:	4631      	mov	r1, r6
 8009056:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800905a:	4628      	mov	r0, r5
 800905c:	47b8      	blx	r7
 800905e:	3001      	adds	r0, #1
 8009060:	d1bf      	bne.n	8008fe2 <_printf_float+0x31a>
 8009062:	e68c      	b.n	8008d7e <_printf_float+0xb6>
 8009064:	464b      	mov	r3, r9
 8009066:	4631      	mov	r1, r6
 8009068:	4628      	mov	r0, r5
 800906a:	eb08 020a 	add.w	r2, r8, sl
 800906e:	47b8      	blx	r7
 8009070:	3001      	adds	r0, #1
 8009072:	d1c2      	bne.n	8008ffa <_printf_float+0x332>
 8009074:	e683      	b.n	8008d7e <_printf_float+0xb6>
 8009076:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009078:	2a01      	cmp	r2, #1
 800907a:	dc01      	bgt.n	8009080 <_printf_float+0x3b8>
 800907c:	07db      	lsls	r3, r3, #31
 800907e:	d537      	bpl.n	80090f0 <_printf_float+0x428>
 8009080:	2301      	movs	r3, #1
 8009082:	4642      	mov	r2, r8
 8009084:	4631      	mov	r1, r6
 8009086:	4628      	mov	r0, r5
 8009088:	47b8      	blx	r7
 800908a:	3001      	adds	r0, #1
 800908c:	f43f ae77 	beq.w	8008d7e <_printf_float+0xb6>
 8009090:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009094:	4631      	mov	r1, r6
 8009096:	4628      	mov	r0, r5
 8009098:	47b8      	blx	r7
 800909a:	3001      	adds	r0, #1
 800909c:	f43f ae6f 	beq.w	8008d7e <_printf_float+0xb6>
 80090a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090a4:	2200      	movs	r2, #0
 80090a6:	2300      	movs	r3, #0
 80090a8:	f7fd fabc 	bl	8006624 <__aeabi_dcmpeq>
 80090ac:	b9d8      	cbnz	r0, 80090e6 <_printf_float+0x41e>
 80090ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090b0:	f108 0201 	add.w	r2, r8, #1
 80090b4:	3b01      	subs	r3, #1
 80090b6:	4631      	mov	r1, r6
 80090b8:	4628      	mov	r0, r5
 80090ba:	47b8      	blx	r7
 80090bc:	3001      	adds	r0, #1
 80090be:	d10e      	bne.n	80090de <_printf_float+0x416>
 80090c0:	e65d      	b.n	8008d7e <_printf_float+0xb6>
 80090c2:	2301      	movs	r3, #1
 80090c4:	464a      	mov	r2, r9
 80090c6:	4631      	mov	r1, r6
 80090c8:	4628      	mov	r0, r5
 80090ca:	47b8      	blx	r7
 80090cc:	3001      	adds	r0, #1
 80090ce:	f43f ae56 	beq.w	8008d7e <_printf_float+0xb6>
 80090d2:	f108 0801 	add.w	r8, r8, #1
 80090d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090d8:	3b01      	subs	r3, #1
 80090da:	4543      	cmp	r3, r8
 80090dc:	dcf1      	bgt.n	80090c2 <_printf_float+0x3fa>
 80090de:	4653      	mov	r3, sl
 80090e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80090e4:	e6e0      	b.n	8008ea8 <_printf_float+0x1e0>
 80090e6:	f04f 0800 	mov.w	r8, #0
 80090ea:	f104 091a 	add.w	r9, r4, #26
 80090ee:	e7f2      	b.n	80090d6 <_printf_float+0x40e>
 80090f0:	2301      	movs	r3, #1
 80090f2:	4642      	mov	r2, r8
 80090f4:	e7df      	b.n	80090b6 <_printf_float+0x3ee>
 80090f6:	2301      	movs	r3, #1
 80090f8:	464a      	mov	r2, r9
 80090fa:	4631      	mov	r1, r6
 80090fc:	4628      	mov	r0, r5
 80090fe:	47b8      	blx	r7
 8009100:	3001      	adds	r0, #1
 8009102:	f43f ae3c 	beq.w	8008d7e <_printf_float+0xb6>
 8009106:	f108 0801 	add.w	r8, r8, #1
 800910a:	68e3      	ldr	r3, [r4, #12]
 800910c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800910e:	1a5b      	subs	r3, r3, r1
 8009110:	4543      	cmp	r3, r8
 8009112:	dcf0      	bgt.n	80090f6 <_printf_float+0x42e>
 8009114:	e6fd      	b.n	8008f12 <_printf_float+0x24a>
 8009116:	f04f 0800 	mov.w	r8, #0
 800911a:	f104 0919 	add.w	r9, r4, #25
 800911e:	e7f4      	b.n	800910a <_printf_float+0x442>

08009120 <_printf_common>:
 8009120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009124:	4616      	mov	r6, r2
 8009126:	4699      	mov	r9, r3
 8009128:	688a      	ldr	r2, [r1, #8]
 800912a:	690b      	ldr	r3, [r1, #16]
 800912c:	4607      	mov	r7, r0
 800912e:	4293      	cmp	r3, r2
 8009130:	bfb8      	it	lt
 8009132:	4613      	movlt	r3, r2
 8009134:	6033      	str	r3, [r6, #0]
 8009136:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800913a:	460c      	mov	r4, r1
 800913c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009140:	b10a      	cbz	r2, 8009146 <_printf_common+0x26>
 8009142:	3301      	adds	r3, #1
 8009144:	6033      	str	r3, [r6, #0]
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	0699      	lsls	r1, r3, #26
 800914a:	bf42      	ittt	mi
 800914c:	6833      	ldrmi	r3, [r6, #0]
 800914e:	3302      	addmi	r3, #2
 8009150:	6033      	strmi	r3, [r6, #0]
 8009152:	6825      	ldr	r5, [r4, #0]
 8009154:	f015 0506 	ands.w	r5, r5, #6
 8009158:	d106      	bne.n	8009168 <_printf_common+0x48>
 800915a:	f104 0a19 	add.w	sl, r4, #25
 800915e:	68e3      	ldr	r3, [r4, #12]
 8009160:	6832      	ldr	r2, [r6, #0]
 8009162:	1a9b      	subs	r3, r3, r2
 8009164:	42ab      	cmp	r3, r5
 8009166:	dc28      	bgt.n	80091ba <_printf_common+0x9a>
 8009168:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800916c:	1e13      	subs	r3, r2, #0
 800916e:	6822      	ldr	r2, [r4, #0]
 8009170:	bf18      	it	ne
 8009172:	2301      	movne	r3, #1
 8009174:	0692      	lsls	r2, r2, #26
 8009176:	d42d      	bmi.n	80091d4 <_printf_common+0xb4>
 8009178:	4649      	mov	r1, r9
 800917a:	4638      	mov	r0, r7
 800917c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009180:	47c0      	blx	r8
 8009182:	3001      	adds	r0, #1
 8009184:	d020      	beq.n	80091c8 <_printf_common+0xa8>
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	68e5      	ldr	r5, [r4, #12]
 800918a:	f003 0306 	and.w	r3, r3, #6
 800918e:	2b04      	cmp	r3, #4
 8009190:	bf18      	it	ne
 8009192:	2500      	movne	r5, #0
 8009194:	6832      	ldr	r2, [r6, #0]
 8009196:	f04f 0600 	mov.w	r6, #0
 800919a:	68a3      	ldr	r3, [r4, #8]
 800919c:	bf08      	it	eq
 800919e:	1aad      	subeq	r5, r5, r2
 80091a0:	6922      	ldr	r2, [r4, #16]
 80091a2:	bf08      	it	eq
 80091a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091a8:	4293      	cmp	r3, r2
 80091aa:	bfc4      	itt	gt
 80091ac:	1a9b      	subgt	r3, r3, r2
 80091ae:	18ed      	addgt	r5, r5, r3
 80091b0:	341a      	adds	r4, #26
 80091b2:	42b5      	cmp	r5, r6
 80091b4:	d11a      	bne.n	80091ec <_printf_common+0xcc>
 80091b6:	2000      	movs	r0, #0
 80091b8:	e008      	b.n	80091cc <_printf_common+0xac>
 80091ba:	2301      	movs	r3, #1
 80091bc:	4652      	mov	r2, sl
 80091be:	4649      	mov	r1, r9
 80091c0:	4638      	mov	r0, r7
 80091c2:	47c0      	blx	r8
 80091c4:	3001      	adds	r0, #1
 80091c6:	d103      	bne.n	80091d0 <_printf_common+0xb0>
 80091c8:	f04f 30ff 	mov.w	r0, #4294967295
 80091cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091d0:	3501      	adds	r5, #1
 80091d2:	e7c4      	b.n	800915e <_printf_common+0x3e>
 80091d4:	2030      	movs	r0, #48	; 0x30
 80091d6:	18e1      	adds	r1, r4, r3
 80091d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091dc:	1c5a      	adds	r2, r3, #1
 80091de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091e2:	4422      	add	r2, r4
 80091e4:	3302      	adds	r3, #2
 80091e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091ea:	e7c5      	b.n	8009178 <_printf_common+0x58>
 80091ec:	2301      	movs	r3, #1
 80091ee:	4622      	mov	r2, r4
 80091f0:	4649      	mov	r1, r9
 80091f2:	4638      	mov	r0, r7
 80091f4:	47c0      	blx	r8
 80091f6:	3001      	adds	r0, #1
 80091f8:	d0e6      	beq.n	80091c8 <_printf_common+0xa8>
 80091fa:	3601      	adds	r6, #1
 80091fc:	e7d9      	b.n	80091b2 <_printf_common+0x92>
	...

08009200 <_printf_i>:
 8009200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009204:	7e0f      	ldrb	r7, [r1, #24]
 8009206:	4691      	mov	r9, r2
 8009208:	2f78      	cmp	r7, #120	; 0x78
 800920a:	4680      	mov	r8, r0
 800920c:	460c      	mov	r4, r1
 800920e:	469a      	mov	sl, r3
 8009210:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009212:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009216:	d807      	bhi.n	8009228 <_printf_i+0x28>
 8009218:	2f62      	cmp	r7, #98	; 0x62
 800921a:	d80a      	bhi.n	8009232 <_printf_i+0x32>
 800921c:	2f00      	cmp	r7, #0
 800921e:	f000 80d9 	beq.w	80093d4 <_printf_i+0x1d4>
 8009222:	2f58      	cmp	r7, #88	; 0x58
 8009224:	f000 80a4 	beq.w	8009370 <_printf_i+0x170>
 8009228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800922c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009230:	e03a      	b.n	80092a8 <_printf_i+0xa8>
 8009232:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009236:	2b15      	cmp	r3, #21
 8009238:	d8f6      	bhi.n	8009228 <_printf_i+0x28>
 800923a:	a101      	add	r1, pc, #4	; (adr r1, 8009240 <_printf_i+0x40>)
 800923c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009240:	08009299 	.word	0x08009299
 8009244:	080092ad 	.word	0x080092ad
 8009248:	08009229 	.word	0x08009229
 800924c:	08009229 	.word	0x08009229
 8009250:	08009229 	.word	0x08009229
 8009254:	08009229 	.word	0x08009229
 8009258:	080092ad 	.word	0x080092ad
 800925c:	08009229 	.word	0x08009229
 8009260:	08009229 	.word	0x08009229
 8009264:	08009229 	.word	0x08009229
 8009268:	08009229 	.word	0x08009229
 800926c:	080093bb 	.word	0x080093bb
 8009270:	080092dd 	.word	0x080092dd
 8009274:	0800939d 	.word	0x0800939d
 8009278:	08009229 	.word	0x08009229
 800927c:	08009229 	.word	0x08009229
 8009280:	080093dd 	.word	0x080093dd
 8009284:	08009229 	.word	0x08009229
 8009288:	080092dd 	.word	0x080092dd
 800928c:	08009229 	.word	0x08009229
 8009290:	08009229 	.word	0x08009229
 8009294:	080093a5 	.word	0x080093a5
 8009298:	682b      	ldr	r3, [r5, #0]
 800929a:	1d1a      	adds	r2, r3, #4
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	602a      	str	r2, [r5, #0]
 80092a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092a8:	2301      	movs	r3, #1
 80092aa:	e0a4      	b.n	80093f6 <_printf_i+0x1f6>
 80092ac:	6820      	ldr	r0, [r4, #0]
 80092ae:	6829      	ldr	r1, [r5, #0]
 80092b0:	0606      	lsls	r6, r0, #24
 80092b2:	f101 0304 	add.w	r3, r1, #4
 80092b6:	d50a      	bpl.n	80092ce <_printf_i+0xce>
 80092b8:	680e      	ldr	r6, [r1, #0]
 80092ba:	602b      	str	r3, [r5, #0]
 80092bc:	2e00      	cmp	r6, #0
 80092be:	da03      	bge.n	80092c8 <_printf_i+0xc8>
 80092c0:	232d      	movs	r3, #45	; 0x2d
 80092c2:	4276      	negs	r6, r6
 80092c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092c8:	230a      	movs	r3, #10
 80092ca:	485e      	ldr	r0, [pc, #376]	; (8009444 <_printf_i+0x244>)
 80092cc:	e019      	b.n	8009302 <_printf_i+0x102>
 80092ce:	680e      	ldr	r6, [r1, #0]
 80092d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092d4:	602b      	str	r3, [r5, #0]
 80092d6:	bf18      	it	ne
 80092d8:	b236      	sxthne	r6, r6
 80092da:	e7ef      	b.n	80092bc <_printf_i+0xbc>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	6820      	ldr	r0, [r4, #0]
 80092e0:	1d19      	adds	r1, r3, #4
 80092e2:	6029      	str	r1, [r5, #0]
 80092e4:	0601      	lsls	r1, r0, #24
 80092e6:	d501      	bpl.n	80092ec <_printf_i+0xec>
 80092e8:	681e      	ldr	r6, [r3, #0]
 80092ea:	e002      	b.n	80092f2 <_printf_i+0xf2>
 80092ec:	0646      	lsls	r6, r0, #25
 80092ee:	d5fb      	bpl.n	80092e8 <_printf_i+0xe8>
 80092f0:	881e      	ldrh	r6, [r3, #0]
 80092f2:	2f6f      	cmp	r7, #111	; 0x6f
 80092f4:	bf0c      	ite	eq
 80092f6:	2308      	moveq	r3, #8
 80092f8:	230a      	movne	r3, #10
 80092fa:	4852      	ldr	r0, [pc, #328]	; (8009444 <_printf_i+0x244>)
 80092fc:	2100      	movs	r1, #0
 80092fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009302:	6865      	ldr	r5, [r4, #4]
 8009304:	2d00      	cmp	r5, #0
 8009306:	bfa8      	it	ge
 8009308:	6821      	ldrge	r1, [r4, #0]
 800930a:	60a5      	str	r5, [r4, #8]
 800930c:	bfa4      	itt	ge
 800930e:	f021 0104 	bicge.w	r1, r1, #4
 8009312:	6021      	strge	r1, [r4, #0]
 8009314:	b90e      	cbnz	r6, 800931a <_printf_i+0x11a>
 8009316:	2d00      	cmp	r5, #0
 8009318:	d04d      	beq.n	80093b6 <_printf_i+0x1b6>
 800931a:	4615      	mov	r5, r2
 800931c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009320:	fb03 6711 	mls	r7, r3, r1, r6
 8009324:	5dc7      	ldrb	r7, [r0, r7]
 8009326:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800932a:	4637      	mov	r7, r6
 800932c:	42bb      	cmp	r3, r7
 800932e:	460e      	mov	r6, r1
 8009330:	d9f4      	bls.n	800931c <_printf_i+0x11c>
 8009332:	2b08      	cmp	r3, #8
 8009334:	d10b      	bne.n	800934e <_printf_i+0x14e>
 8009336:	6823      	ldr	r3, [r4, #0]
 8009338:	07de      	lsls	r6, r3, #31
 800933a:	d508      	bpl.n	800934e <_printf_i+0x14e>
 800933c:	6923      	ldr	r3, [r4, #16]
 800933e:	6861      	ldr	r1, [r4, #4]
 8009340:	4299      	cmp	r1, r3
 8009342:	bfde      	ittt	le
 8009344:	2330      	movle	r3, #48	; 0x30
 8009346:	f805 3c01 	strble.w	r3, [r5, #-1]
 800934a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800934e:	1b52      	subs	r2, r2, r5
 8009350:	6122      	str	r2, [r4, #16]
 8009352:	464b      	mov	r3, r9
 8009354:	4621      	mov	r1, r4
 8009356:	4640      	mov	r0, r8
 8009358:	f8cd a000 	str.w	sl, [sp]
 800935c:	aa03      	add	r2, sp, #12
 800935e:	f7ff fedf 	bl	8009120 <_printf_common>
 8009362:	3001      	adds	r0, #1
 8009364:	d14c      	bne.n	8009400 <_printf_i+0x200>
 8009366:	f04f 30ff 	mov.w	r0, #4294967295
 800936a:	b004      	add	sp, #16
 800936c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009370:	4834      	ldr	r0, [pc, #208]	; (8009444 <_printf_i+0x244>)
 8009372:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009376:	6829      	ldr	r1, [r5, #0]
 8009378:	6823      	ldr	r3, [r4, #0]
 800937a:	f851 6b04 	ldr.w	r6, [r1], #4
 800937e:	6029      	str	r1, [r5, #0]
 8009380:	061d      	lsls	r5, r3, #24
 8009382:	d514      	bpl.n	80093ae <_printf_i+0x1ae>
 8009384:	07df      	lsls	r7, r3, #31
 8009386:	bf44      	itt	mi
 8009388:	f043 0320 	orrmi.w	r3, r3, #32
 800938c:	6023      	strmi	r3, [r4, #0]
 800938e:	b91e      	cbnz	r6, 8009398 <_printf_i+0x198>
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	f023 0320 	bic.w	r3, r3, #32
 8009396:	6023      	str	r3, [r4, #0]
 8009398:	2310      	movs	r3, #16
 800939a:	e7af      	b.n	80092fc <_printf_i+0xfc>
 800939c:	6823      	ldr	r3, [r4, #0]
 800939e:	f043 0320 	orr.w	r3, r3, #32
 80093a2:	6023      	str	r3, [r4, #0]
 80093a4:	2378      	movs	r3, #120	; 0x78
 80093a6:	4828      	ldr	r0, [pc, #160]	; (8009448 <_printf_i+0x248>)
 80093a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093ac:	e7e3      	b.n	8009376 <_printf_i+0x176>
 80093ae:	0659      	lsls	r1, r3, #25
 80093b0:	bf48      	it	mi
 80093b2:	b2b6      	uxthmi	r6, r6
 80093b4:	e7e6      	b.n	8009384 <_printf_i+0x184>
 80093b6:	4615      	mov	r5, r2
 80093b8:	e7bb      	b.n	8009332 <_printf_i+0x132>
 80093ba:	682b      	ldr	r3, [r5, #0]
 80093bc:	6826      	ldr	r6, [r4, #0]
 80093be:	1d18      	adds	r0, r3, #4
 80093c0:	6961      	ldr	r1, [r4, #20]
 80093c2:	6028      	str	r0, [r5, #0]
 80093c4:	0635      	lsls	r5, r6, #24
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	d501      	bpl.n	80093ce <_printf_i+0x1ce>
 80093ca:	6019      	str	r1, [r3, #0]
 80093cc:	e002      	b.n	80093d4 <_printf_i+0x1d4>
 80093ce:	0670      	lsls	r0, r6, #25
 80093d0:	d5fb      	bpl.n	80093ca <_printf_i+0x1ca>
 80093d2:	8019      	strh	r1, [r3, #0]
 80093d4:	2300      	movs	r3, #0
 80093d6:	4615      	mov	r5, r2
 80093d8:	6123      	str	r3, [r4, #16]
 80093da:	e7ba      	b.n	8009352 <_printf_i+0x152>
 80093dc:	682b      	ldr	r3, [r5, #0]
 80093de:	2100      	movs	r1, #0
 80093e0:	1d1a      	adds	r2, r3, #4
 80093e2:	602a      	str	r2, [r5, #0]
 80093e4:	681d      	ldr	r5, [r3, #0]
 80093e6:	6862      	ldr	r2, [r4, #4]
 80093e8:	4628      	mov	r0, r5
 80093ea:	f002 fafb 	bl	800b9e4 <memchr>
 80093ee:	b108      	cbz	r0, 80093f4 <_printf_i+0x1f4>
 80093f0:	1b40      	subs	r0, r0, r5
 80093f2:	6060      	str	r0, [r4, #4]
 80093f4:	6863      	ldr	r3, [r4, #4]
 80093f6:	6123      	str	r3, [r4, #16]
 80093f8:	2300      	movs	r3, #0
 80093fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093fe:	e7a8      	b.n	8009352 <_printf_i+0x152>
 8009400:	462a      	mov	r2, r5
 8009402:	4649      	mov	r1, r9
 8009404:	4640      	mov	r0, r8
 8009406:	6923      	ldr	r3, [r4, #16]
 8009408:	47d0      	blx	sl
 800940a:	3001      	adds	r0, #1
 800940c:	d0ab      	beq.n	8009366 <_printf_i+0x166>
 800940e:	6823      	ldr	r3, [r4, #0]
 8009410:	079b      	lsls	r3, r3, #30
 8009412:	d413      	bmi.n	800943c <_printf_i+0x23c>
 8009414:	68e0      	ldr	r0, [r4, #12]
 8009416:	9b03      	ldr	r3, [sp, #12]
 8009418:	4298      	cmp	r0, r3
 800941a:	bfb8      	it	lt
 800941c:	4618      	movlt	r0, r3
 800941e:	e7a4      	b.n	800936a <_printf_i+0x16a>
 8009420:	2301      	movs	r3, #1
 8009422:	4632      	mov	r2, r6
 8009424:	4649      	mov	r1, r9
 8009426:	4640      	mov	r0, r8
 8009428:	47d0      	blx	sl
 800942a:	3001      	adds	r0, #1
 800942c:	d09b      	beq.n	8009366 <_printf_i+0x166>
 800942e:	3501      	adds	r5, #1
 8009430:	68e3      	ldr	r3, [r4, #12]
 8009432:	9903      	ldr	r1, [sp, #12]
 8009434:	1a5b      	subs	r3, r3, r1
 8009436:	42ab      	cmp	r3, r5
 8009438:	dcf2      	bgt.n	8009420 <_printf_i+0x220>
 800943a:	e7eb      	b.n	8009414 <_printf_i+0x214>
 800943c:	2500      	movs	r5, #0
 800943e:	f104 0619 	add.w	r6, r4, #25
 8009442:	e7f5      	b.n	8009430 <_printf_i+0x230>
 8009444:	0801ee06 	.word	0x0801ee06
 8009448:	0801ee17 	.word	0x0801ee17

0800944c <_scanf_float>:
 800944c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009450:	b087      	sub	sp, #28
 8009452:	9303      	str	r3, [sp, #12]
 8009454:	688b      	ldr	r3, [r1, #8]
 8009456:	4617      	mov	r7, r2
 8009458:	1e5a      	subs	r2, r3, #1
 800945a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800945e:	bf85      	ittet	hi
 8009460:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009464:	195b      	addhi	r3, r3, r5
 8009466:	2300      	movls	r3, #0
 8009468:	9302      	strhi	r3, [sp, #8]
 800946a:	bf88      	it	hi
 800946c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009470:	468b      	mov	fp, r1
 8009472:	f04f 0500 	mov.w	r5, #0
 8009476:	bf8c      	ite	hi
 8009478:	608b      	strhi	r3, [r1, #8]
 800947a:	9302      	strls	r3, [sp, #8]
 800947c:	680b      	ldr	r3, [r1, #0]
 800947e:	4680      	mov	r8, r0
 8009480:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009484:	f84b 3b1c 	str.w	r3, [fp], #28
 8009488:	460c      	mov	r4, r1
 800948a:	465e      	mov	r6, fp
 800948c:	46aa      	mov	sl, r5
 800948e:	46a9      	mov	r9, r5
 8009490:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009494:	9501      	str	r5, [sp, #4]
 8009496:	68a2      	ldr	r2, [r4, #8]
 8009498:	b152      	cbz	r2, 80094b0 <_scanf_float+0x64>
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	2b4e      	cmp	r3, #78	; 0x4e
 80094a0:	d864      	bhi.n	800956c <_scanf_float+0x120>
 80094a2:	2b40      	cmp	r3, #64	; 0x40
 80094a4:	d83c      	bhi.n	8009520 <_scanf_float+0xd4>
 80094a6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80094aa:	b2c8      	uxtb	r0, r1
 80094ac:	280e      	cmp	r0, #14
 80094ae:	d93a      	bls.n	8009526 <_scanf_float+0xda>
 80094b0:	f1b9 0f00 	cmp.w	r9, #0
 80094b4:	d003      	beq.n	80094be <_scanf_float+0x72>
 80094b6:	6823      	ldr	r3, [r4, #0]
 80094b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094bc:	6023      	str	r3, [r4, #0]
 80094be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094c2:	f1ba 0f01 	cmp.w	sl, #1
 80094c6:	f200 8113 	bhi.w	80096f0 <_scanf_float+0x2a4>
 80094ca:	455e      	cmp	r6, fp
 80094cc:	f200 8105 	bhi.w	80096da <_scanf_float+0x28e>
 80094d0:	2501      	movs	r5, #1
 80094d2:	4628      	mov	r0, r5
 80094d4:	b007      	add	sp, #28
 80094d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094da:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80094de:	2a0d      	cmp	r2, #13
 80094e0:	d8e6      	bhi.n	80094b0 <_scanf_float+0x64>
 80094e2:	a101      	add	r1, pc, #4	; (adr r1, 80094e8 <_scanf_float+0x9c>)
 80094e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80094e8:	08009627 	.word	0x08009627
 80094ec:	080094b1 	.word	0x080094b1
 80094f0:	080094b1 	.word	0x080094b1
 80094f4:	080094b1 	.word	0x080094b1
 80094f8:	08009687 	.word	0x08009687
 80094fc:	0800965f 	.word	0x0800965f
 8009500:	080094b1 	.word	0x080094b1
 8009504:	080094b1 	.word	0x080094b1
 8009508:	08009635 	.word	0x08009635
 800950c:	080094b1 	.word	0x080094b1
 8009510:	080094b1 	.word	0x080094b1
 8009514:	080094b1 	.word	0x080094b1
 8009518:	080094b1 	.word	0x080094b1
 800951c:	080095ed 	.word	0x080095ed
 8009520:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009524:	e7db      	b.n	80094de <_scanf_float+0x92>
 8009526:	290e      	cmp	r1, #14
 8009528:	d8c2      	bhi.n	80094b0 <_scanf_float+0x64>
 800952a:	a001      	add	r0, pc, #4	; (adr r0, 8009530 <_scanf_float+0xe4>)
 800952c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009530:	080095df 	.word	0x080095df
 8009534:	080094b1 	.word	0x080094b1
 8009538:	080095df 	.word	0x080095df
 800953c:	08009673 	.word	0x08009673
 8009540:	080094b1 	.word	0x080094b1
 8009544:	0800958d 	.word	0x0800958d
 8009548:	080095c9 	.word	0x080095c9
 800954c:	080095c9 	.word	0x080095c9
 8009550:	080095c9 	.word	0x080095c9
 8009554:	080095c9 	.word	0x080095c9
 8009558:	080095c9 	.word	0x080095c9
 800955c:	080095c9 	.word	0x080095c9
 8009560:	080095c9 	.word	0x080095c9
 8009564:	080095c9 	.word	0x080095c9
 8009568:	080095c9 	.word	0x080095c9
 800956c:	2b6e      	cmp	r3, #110	; 0x6e
 800956e:	d809      	bhi.n	8009584 <_scanf_float+0x138>
 8009570:	2b60      	cmp	r3, #96	; 0x60
 8009572:	d8b2      	bhi.n	80094da <_scanf_float+0x8e>
 8009574:	2b54      	cmp	r3, #84	; 0x54
 8009576:	d077      	beq.n	8009668 <_scanf_float+0x21c>
 8009578:	2b59      	cmp	r3, #89	; 0x59
 800957a:	d199      	bne.n	80094b0 <_scanf_float+0x64>
 800957c:	2d07      	cmp	r5, #7
 800957e:	d197      	bne.n	80094b0 <_scanf_float+0x64>
 8009580:	2508      	movs	r5, #8
 8009582:	e029      	b.n	80095d8 <_scanf_float+0x18c>
 8009584:	2b74      	cmp	r3, #116	; 0x74
 8009586:	d06f      	beq.n	8009668 <_scanf_float+0x21c>
 8009588:	2b79      	cmp	r3, #121	; 0x79
 800958a:	e7f6      	b.n	800957a <_scanf_float+0x12e>
 800958c:	6821      	ldr	r1, [r4, #0]
 800958e:	05c8      	lsls	r0, r1, #23
 8009590:	d51a      	bpl.n	80095c8 <_scanf_float+0x17c>
 8009592:	9b02      	ldr	r3, [sp, #8]
 8009594:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009598:	6021      	str	r1, [r4, #0]
 800959a:	f109 0901 	add.w	r9, r9, #1
 800959e:	b11b      	cbz	r3, 80095a8 <_scanf_float+0x15c>
 80095a0:	3b01      	subs	r3, #1
 80095a2:	3201      	adds	r2, #1
 80095a4:	9302      	str	r3, [sp, #8]
 80095a6:	60a2      	str	r2, [r4, #8]
 80095a8:	68a3      	ldr	r3, [r4, #8]
 80095aa:	3b01      	subs	r3, #1
 80095ac:	60a3      	str	r3, [r4, #8]
 80095ae:	6923      	ldr	r3, [r4, #16]
 80095b0:	3301      	adds	r3, #1
 80095b2:	6123      	str	r3, [r4, #16]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	3b01      	subs	r3, #1
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	607b      	str	r3, [r7, #4]
 80095bc:	f340 8084 	ble.w	80096c8 <_scanf_float+0x27c>
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	3301      	adds	r3, #1
 80095c4:	603b      	str	r3, [r7, #0]
 80095c6:	e766      	b.n	8009496 <_scanf_float+0x4a>
 80095c8:	eb1a 0f05 	cmn.w	sl, r5
 80095cc:	f47f af70 	bne.w	80094b0 <_scanf_float+0x64>
 80095d0:	6822      	ldr	r2, [r4, #0]
 80095d2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80095d6:	6022      	str	r2, [r4, #0]
 80095d8:	f806 3b01 	strb.w	r3, [r6], #1
 80095dc:	e7e4      	b.n	80095a8 <_scanf_float+0x15c>
 80095de:	6822      	ldr	r2, [r4, #0]
 80095e0:	0610      	lsls	r0, r2, #24
 80095e2:	f57f af65 	bpl.w	80094b0 <_scanf_float+0x64>
 80095e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095ea:	e7f4      	b.n	80095d6 <_scanf_float+0x18a>
 80095ec:	f1ba 0f00 	cmp.w	sl, #0
 80095f0:	d10e      	bne.n	8009610 <_scanf_float+0x1c4>
 80095f2:	f1b9 0f00 	cmp.w	r9, #0
 80095f6:	d10e      	bne.n	8009616 <_scanf_float+0x1ca>
 80095f8:	6822      	ldr	r2, [r4, #0]
 80095fa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80095fe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009602:	d108      	bne.n	8009616 <_scanf_float+0x1ca>
 8009604:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009608:	f04f 0a01 	mov.w	sl, #1
 800960c:	6022      	str	r2, [r4, #0]
 800960e:	e7e3      	b.n	80095d8 <_scanf_float+0x18c>
 8009610:	f1ba 0f02 	cmp.w	sl, #2
 8009614:	d055      	beq.n	80096c2 <_scanf_float+0x276>
 8009616:	2d01      	cmp	r5, #1
 8009618:	d002      	beq.n	8009620 <_scanf_float+0x1d4>
 800961a:	2d04      	cmp	r5, #4
 800961c:	f47f af48 	bne.w	80094b0 <_scanf_float+0x64>
 8009620:	3501      	adds	r5, #1
 8009622:	b2ed      	uxtb	r5, r5
 8009624:	e7d8      	b.n	80095d8 <_scanf_float+0x18c>
 8009626:	f1ba 0f01 	cmp.w	sl, #1
 800962a:	f47f af41 	bne.w	80094b0 <_scanf_float+0x64>
 800962e:	f04f 0a02 	mov.w	sl, #2
 8009632:	e7d1      	b.n	80095d8 <_scanf_float+0x18c>
 8009634:	b97d      	cbnz	r5, 8009656 <_scanf_float+0x20a>
 8009636:	f1b9 0f00 	cmp.w	r9, #0
 800963a:	f47f af3c 	bne.w	80094b6 <_scanf_float+0x6a>
 800963e:	6822      	ldr	r2, [r4, #0]
 8009640:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009644:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009648:	f47f af39 	bne.w	80094be <_scanf_float+0x72>
 800964c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009650:	2501      	movs	r5, #1
 8009652:	6022      	str	r2, [r4, #0]
 8009654:	e7c0      	b.n	80095d8 <_scanf_float+0x18c>
 8009656:	2d03      	cmp	r5, #3
 8009658:	d0e2      	beq.n	8009620 <_scanf_float+0x1d4>
 800965a:	2d05      	cmp	r5, #5
 800965c:	e7de      	b.n	800961c <_scanf_float+0x1d0>
 800965e:	2d02      	cmp	r5, #2
 8009660:	f47f af26 	bne.w	80094b0 <_scanf_float+0x64>
 8009664:	2503      	movs	r5, #3
 8009666:	e7b7      	b.n	80095d8 <_scanf_float+0x18c>
 8009668:	2d06      	cmp	r5, #6
 800966a:	f47f af21 	bne.w	80094b0 <_scanf_float+0x64>
 800966e:	2507      	movs	r5, #7
 8009670:	e7b2      	b.n	80095d8 <_scanf_float+0x18c>
 8009672:	6822      	ldr	r2, [r4, #0]
 8009674:	0591      	lsls	r1, r2, #22
 8009676:	f57f af1b 	bpl.w	80094b0 <_scanf_float+0x64>
 800967a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800967e:	6022      	str	r2, [r4, #0]
 8009680:	f8cd 9004 	str.w	r9, [sp, #4]
 8009684:	e7a8      	b.n	80095d8 <_scanf_float+0x18c>
 8009686:	6822      	ldr	r2, [r4, #0]
 8009688:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800968c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009690:	d006      	beq.n	80096a0 <_scanf_float+0x254>
 8009692:	0550      	lsls	r0, r2, #21
 8009694:	f57f af0c 	bpl.w	80094b0 <_scanf_float+0x64>
 8009698:	f1b9 0f00 	cmp.w	r9, #0
 800969c:	f43f af0f 	beq.w	80094be <_scanf_float+0x72>
 80096a0:	0591      	lsls	r1, r2, #22
 80096a2:	bf58      	it	pl
 80096a4:	9901      	ldrpl	r1, [sp, #4]
 80096a6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80096aa:	bf58      	it	pl
 80096ac:	eba9 0101 	subpl.w	r1, r9, r1
 80096b0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80096b4:	f04f 0900 	mov.w	r9, #0
 80096b8:	bf58      	it	pl
 80096ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80096be:	6022      	str	r2, [r4, #0]
 80096c0:	e78a      	b.n	80095d8 <_scanf_float+0x18c>
 80096c2:	f04f 0a03 	mov.w	sl, #3
 80096c6:	e787      	b.n	80095d8 <_scanf_float+0x18c>
 80096c8:	4639      	mov	r1, r7
 80096ca:	4640      	mov	r0, r8
 80096cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80096d0:	4798      	blx	r3
 80096d2:	2800      	cmp	r0, #0
 80096d4:	f43f aedf 	beq.w	8009496 <_scanf_float+0x4a>
 80096d8:	e6ea      	b.n	80094b0 <_scanf_float+0x64>
 80096da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096de:	463a      	mov	r2, r7
 80096e0:	4640      	mov	r0, r8
 80096e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80096e6:	4798      	blx	r3
 80096e8:	6923      	ldr	r3, [r4, #16]
 80096ea:	3b01      	subs	r3, #1
 80096ec:	6123      	str	r3, [r4, #16]
 80096ee:	e6ec      	b.n	80094ca <_scanf_float+0x7e>
 80096f0:	1e6b      	subs	r3, r5, #1
 80096f2:	2b06      	cmp	r3, #6
 80096f4:	d825      	bhi.n	8009742 <_scanf_float+0x2f6>
 80096f6:	2d02      	cmp	r5, #2
 80096f8:	d836      	bhi.n	8009768 <_scanf_float+0x31c>
 80096fa:	455e      	cmp	r6, fp
 80096fc:	f67f aee8 	bls.w	80094d0 <_scanf_float+0x84>
 8009700:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009704:	463a      	mov	r2, r7
 8009706:	4640      	mov	r0, r8
 8009708:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800970c:	4798      	blx	r3
 800970e:	6923      	ldr	r3, [r4, #16]
 8009710:	3b01      	subs	r3, #1
 8009712:	6123      	str	r3, [r4, #16]
 8009714:	e7f1      	b.n	80096fa <_scanf_float+0x2ae>
 8009716:	9802      	ldr	r0, [sp, #8]
 8009718:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800971c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009720:	463a      	mov	r2, r7
 8009722:	9002      	str	r0, [sp, #8]
 8009724:	4640      	mov	r0, r8
 8009726:	4798      	blx	r3
 8009728:	6923      	ldr	r3, [r4, #16]
 800972a:	3b01      	subs	r3, #1
 800972c:	6123      	str	r3, [r4, #16]
 800972e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009732:	fa5f fa8a 	uxtb.w	sl, sl
 8009736:	f1ba 0f02 	cmp.w	sl, #2
 800973a:	d1ec      	bne.n	8009716 <_scanf_float+0x2ca>
 800973c:	3d03      	subs	r5, #3
 800973e:	b2ed      	uxtb	r5, r5
 8009740:	1b76      	subs	r6, r6, r5
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	05da      	lsls	r2, r3, #23
 8009746:	d52f      	bpl.n	80097a8 <_scanf_float+0x35c>
 8009748:	055b      	lsls	r3, r3, #21
 800974a:	d510      	bpl.n	800976e <_scanf_float+0x322>
 800974c:	455e      	cmp	r6, fp
 800974e:	f67f aebf 	bls.w	80094d0 <_scanf_float+0x84>
 8009752:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009756:	463a      	mov	r2, r7
 8009758:	4640      	mov	r0, r8
 800975a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800975e:	4798      	blx	r3
 8009760:	6923      	ldr	r3, [r4, #16]
 8009762:	3b01      	subs	r3, #1
 8009764:	6123      	str	r3, [r4, #16]
 8009766:	e7f1      	b.n	800974c <_scanf_float+0x300>
 8009768:	46aa      	mov	sl, r5
 800976a:	9602      	str	r6, [sp, #8]
 800976c:	e7df      	b.n	800972e <_scanf_float+0x2e2>
 800976e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009772:	6923      	ldr	r3, [r4, #16]
 8009774:	2965      	cmp	r1, #101	; 0x65
 8009776:	f103 33ff 	add.w	r3, r3, #4294967295
 800977a:	f106 35ff 	add.w	r5, r6, #4294967295
 800977e:	6123      	str	r3, [r4, #16]
 8009780:	d00c      	beq.n	800979c <_scanf_float+0x350>
 8009782:	2945      	cmp	r1, #69	; 0x45
 8009784:	d00a      	beq.n	800979c <_scanf_float+0x350>
 8009786:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800978a:	463a      	mov	r2, r7
 800978c:	4640      	mov	r0, r8
 800978e:	4798      	blx	r3
 8009790:	6923      	ldr	r3, [r4, #16]
 8009792:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009796:	3b01      	subs	r3, #1
 8009798:	1eb5      	subs	r5, r6, #2
 800979a:	6123      	str	r3, [r4, #16]
 800979c:	463a      	mov	r2, r7
 800979e:	4640      	mov	r0, r8
 80097a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097a4:	4798      	blx	r3
 80097a6:	462e      	mov	r6, r5
 80097a8:	6825      	ldr	r5, [r4, #0]
 80097aa:	f015 0510 	ands.w	r5, r5, #16
 80097ae:	d155      	bne.n	800985c <_scanf_float+0x410>
 80097b0:	7035      	strb	r5, [r6, #0]
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80097b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097bc:	d11b      	bne.n	80097f6 <_scanf_float+0x3aa>
 80097be:	9b01      	ldr	r3, [sp, #4]
 80097c0:	454b      	cmp	r3, r9
 80097c2:	eba3 0209 	sub.w	r2, r3, r9
 80097c6:	d123      	bne.n	8009810 <_scanf_float+0x3c4>
 80097c8:	2200      	movs	r2, #0
 80097ca:	4659      	mov	r1, fp
 80097cc:	4640      	mov	r0, r8
 80097ce:	f000 fe7b 	bl	800a4c8 <_strtod_r>
 80097d2:	6822      	ldr	r2, [r4, #0]
 80097d4:	9b03      	ldr	r3, [sp, #12]
 80097d6:	f012 0f02 	tst.w	r2, #2
 80097da:	4606      	mov	r6, r0
 80097dc:	460f      	mov	r7, r1
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	d021      	beq.n	8009826 <_scanf_float+0x3da>
 80097e2:	1d1a      	adds	r2, r3, #4
 80097e4:	9903      	ldr	r1, [sp, #12]
 80097e6:	600a      	str	r2, [r1, #0]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	e9c3 6700 	strd	r6, r7, [r3]
 80097ee:	68e3      	ldr	r3, [r4, #12]
 80097f0:	3301      	adds	r3, #1
 80097f2:	60e3      	str	r3, [r4, #12]
 80097f4:	e66d      	b.n	80094d2 <_scanf_float+0x86>
 80097f6:	9b04      	ldr	r3, [sp, #16]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d0e5      	beq.n	80097c8 <_scanf_float+0x37c>
 80097fc:	9905      	ldr	r1, [sp, #20]
 80097fe:	230a      	movs	r3, #10
 8009800:	462a      	mov	r2, r5
 8009802:	4640      	mov	r0, r8
 8009804:	3101      	adds	r1, #1
 8009806:	f000 fee1 	bl	800a5cc <_strtol_r>
 800980a:	9b04      	ldr	r3, [sp, #16]
 800980c:	9e05      	ldr	r6, [sp, #20]
 800980e:	1ac2      	subs	r2, r0, r3
 8009810:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009814:	429e      	cmp	r6, r3
 8009816:	bf28      	it	cs
 8009818:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800981c:	4630      	mov	r0, r6
 800981e:	4910      	ldr	r1, [pc, #64]	; (8009860 <_scanf_float+0x414>)
 8009820:	f000 f826 	bl	8009870 <siprintf>
 8009824:	e7d0      	b.n	80097c8 <_scanf_float+0x37c>
 8009826:	f012 0f04 	tst.w	r2, #4
 800982a:	f103 0204 	add.w	r2, r3, #4
 800982e:	d1d9      	bne.n	80097e4 <_scanf_float+0x398>
 8009830:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009834:	f8cc 2000 	str.w	r2, [ip]
 8009838:	f8d3 8000 	ldr.w	r8, [r3]
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	f7fc ff22 	bl	8006688 <__aeabi_dcmpun>
 8009844:	b128      	cbz	r0, 8009852 <_scanf_float+0x406>
 8009846:	4807      	ldr	r0, [pc, #28]	; (8009864 <_scanf_float+0x418>)
 8009848:	f000 f80e 	bl	8009868 <nanf>
 800984c:	f8c8 0000 	str.w	r0, [r8]
 8009850:	e7cd      	b.n	80097ee <_scanf_float+0x3a2>
 8009852:	4630      	mov	r0, r6
 8009854:	4639      	mov	r1, r7
 8009856:	f7fc ff75 	bl	8006744 <__aeabi_d2f>
 800985a:	e7f7      	b.n	800984c <_scanf_float+0x400>
 800985c:	2500      	movs	r5, #0
 800985e:	e638      	b.n	80094d2 <_scanf_float+0x86>
 8009860:	0801ee28 	.word	0x0801ee28
 8009864:	0801f230 	.word	0x0801f230

08009868 <nanf>:
 8009868:	4800      	ldr	r0, [pc, #0]	; (800986c <nanf+0x4>)
 800986a:	4770      	bx	lr
 800986c:	7fc00000 	.word	0x7fc00000

08009870 <siprintf>:
 8009870:	b40e      	push	{r1, r2, r3}
 8009872:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009876:	b500      	push	{lr}
 8009878:	b09c      	sub	sp, #112	; 0x70
 800987a:	ab1d      	add	r3, sp, #116	; 0x74
 800987c:	9002      	str	r0, [sp, #8]
 800987e:	9006      	str	r0, [sp, #24]
 8009880:	9107      	str	r1, [sp, #28]
 8009882:	9104      	str	r1, [sp, #16]
 8009884:	4808      	ldr	r0, [pc, #32]	; (80098a8 <siprintf+0x38>)
 8009886:	4909      	ldr	r1, [pc, #36]	; (80098ac <siprintf+0x3c>)
 8009888:	f853 2b04 	ldr.w	r2, [r3], #4
 800988c:	9105      	str	r1, [sp, #20]
 800988e:	6800      	ldr	r0, [r0, #0]
 8009890:	a902      	add	r1, sp, #8
 8009892:	9301      	str	r3, [sp, #4]
 8009894:	f002 fec6 	bl	800c624 <_svfiprintf_r>
 8009898:	2200      	movs	r2, #0
 800989a:	9b02      	ldr	r3, [sp, #8]
 800989c:	701a      	strb	r2, [r3, #0]
 800989e:	b01c      	add	sp, #112	; 0x70
 80098a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80098a4:	b003      	add	sp, #12
 80098a6:	4770      	bx	lr
 80098a8:	2000000c 	.word	0x2000000c
 80098ac:	ffff0208 	.word	0xffff0208

080098b0 <sulp>:
 80098b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098b4:	460f      	mov	r7, r1
 80098b6:	4690      	mov	r8, r2
 80098b8:	f002 fc20 	bl	800c0fc <__ulp>
 80098bc:	4604      	mov	r4, r0
 80098be:	460d      	mov	r5, r1
 80098c0:	f1b8 0f00 	cmp.w	r8, #0
 80098c4:	d011      	beq.n	80098ea <sulp+0x3a>
 80098c6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80098ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	dd0b      	ble.n	80098ea <sulp+0x3a>
 80098d2:	2400      	movs	r4, #0
 80098d4:	051b      	lsls	r3, r3, #20
 80098d6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80098da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80098de:	4622      	mov	r2, r4
 80098e0:	462b      	mov	r3, r5
 80098e2:	f7fc fc37 	bl	8006154 <__aeabi_dmul>
 80098e6:	4604      	mov	r4, r0
 80098e8:	460d      	mov	r5, r1
 80098ea:	4620      	mov	r0, r4
 80098ec:	4629      	mov	r1, r5
 80098ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098f2:	0000      	movs	r0, r0
 80098f4:	0000      	movs	r0, r0
	...

080098f8 <_strtod_l>:
 80098f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fc:	469b      	mov	fp, r3
 80098fe:	2300      	movs	r3, #0
 8009900:	b09f      	sub	sp, #124	; 0x7c
 8009902:	931a      	str	r3, [sp, #104]	; 0x68
 8009904:	4b9e      	ldr	r3, [pc, #632]	; (8009b80 <_strtod_l+0x288>)
 8009906:	4682      	mov	sl, r0
 8009908:	681f      	ldr	r7, [r3, #0]
 800990a:	460e      	mov	r6, r1
 800990c:	4638      	mov	r0, r7
 800990e:	9215      	str	r2, [sp, #84]	; 0x54
 8009910:	f7fc fa5c 	bl	8005dcc <strlen>
 8009914:	f04f 0800 	mov.w	r8, #0
 8009918:	4604      	mov	r4, r0
 800991a:	f04f 0900 	mov.w	r9, #0
 800991e:	9619      	str	r6, [sp, #100]	; 0x64
 8009920:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009922:	781a      	ldrb	r2, [r3, #0]
 8009924:	2a2b      	cmp	r2, #43	; 0x2b
 8009926:	d04c      	beq.n	80099c2 <_strtod_l+0xca>
 8009928:	d83a      	bhi.n	80099a0 <_strtod_l+0xa8>
 800992a:	2a0d      	cmp	r2, #13
 800992c:	d833      	bhi.n	8009996 <_strtod_l+0x9e>
 800992e:	2a08      	cmp	r2, #8
 8009930:	d833      	bhi.n	800999a <_strtod_l+0xa2>
 8009932:	2a00      	cmp	r2, #0
 8009934:	d03d      	beq.n	80099b2 <_strtod_l+0xba>
 8009936:	2300      	movs	r3, #0
 8009938:	930a      	str	r3, [sp, #40]	; 0x28
 800993a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800993c:	782b      	ldrb	r3, [r5, #0]
 800993e:	2b30      	cmp	r3, #48	; 0x30
 8009940:	f040 80aa 	bne.w	8009a98 <_strtod_l+0x1a0>
 8009944:	786b      	ldrb	r3, [r5, #1]
 8009946:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800994a:	2b58      	cmp	r3, #88	; 0x58
 800994c:	d166      	bne.n	8009a1c <_strtod_l+0x124>
 800994e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009950:	4650      	mov	r0, sl
 8009952:	9301      	str	r3, [sp, #4]
 8009954:	ab1a      	add	r3, sp, #104	; 0x68
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	4a8a      	ldr	r2, [pc, #552]	; (8009b84 <_strtod_l+0x28c>)
 800995a:	f8cd b008 	str.w	fp, [sp, #8]
 800995e:	ab1b      	add	r3, sp, #108	; 0x6c
 8009960:	a919      	add	r1, sp, #100	; 0x64
 8009962:	f001 fd23 	bl	800b3ac <__gethex>
 8009966:	f010 0607 	ands.w	r6, r0, #7
 800996a:	4604      	mov	r4, r0
 800996c:	d005      	beq.n	800997a <_strtod_l+0x82>
 800996e:	2e06      	cmp	r6, #6
 8009970:	d129      	bne.n	80099c6 <_strtod_l+0xce>
 8009972:	2300      	movs	r3, #0
 8009974:	3501      	adds	r5, #1
 8009976:	9519      	str	r5, [sp, #100]	; 0x64
 8009978:	930a      	str	r3, [sp, #40]	; 0x28
 800997a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800997c:	2b00      	cmp	r3, #0
 800997e:	f040 858a 	bne.w	800a496 <_strtod_l+0xb9e>
 8009982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009984:	b1d3      	cbz	r3, 80099bc <_strtod_l+0xc4>
 8009986:	4642      	mov	r2, r8
 8009988:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800998c:	4610      	mov	r0, r2
 800998e:	4619      	mov	r1, r3
 8009990:	b01f      	add	sp, #124	; 0x7c
 8009992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009996:	2a20      	cmp	r2, #32
 8009998:	d1cd      	bne.n	8009936 <_strtod_l+0x3e>
 800999a:	3301      	adds	r3, #1
 800999c:	9319      	str	r3, [sp, #100]	; 0x64
 800999e:	e7bf      	b.n	8009920 <_strtod_l+0x28>
 80099a0:	2a2d      	cmp	r2, #45	; 0x2d
 80099a2:	d1c8      	bne.n	8009936 <_strtod_l+0x3e>
 80099a4:	2201      	movs	r2, #1
 80099a6:	920a      	str	r2, [sp, #40]	; 0x28
 80099a8:	1c5a      	adds	r2, r3, #1
 80099aa:	9219      	str	r2, [sp, #100]	; 0x64
 80099ac:	785b      	ldrb	r3, [r3, #1]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1c3      	bne.n	800993a <_strtod_l+0x42>
 80099b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099b4:	9619      	str	r6, [sp, #100]	; 0x64
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	f040 856b 	bne.w	800a492 <_strtod_l+0xb9a>
 80099bc:	4642      	mov	r2, r8
 80099be:	464b      	mov	r3, r9
 80099c0:	e7e4      	b.n	800998c <_strtod_l+0x94>
 80099c2:	2200      	movs	r2, #0
 80099c4:	e7ef      	b.n	80099a6 <_strtod_l+0xae>
 80099c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80099c8:	b13a      	cbz	r2, 80099da <_strtod_l+0xe2>
 80099ca:	2135      	movs	r1, #53	; 0x35
 80099cc:	a81c      	add	r0, sp, #112	; 0x70
 80099ce:	f002 fc99 	bl	800c304 <__copybits>
 80099d2:	4650      	mov	r0, sl
 80099d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80099d6:	f002 f861 	bl	800ba9c <_Bfree>
 80099da:	3e01      	subs	r6, #1
 80099dc:	2e04      	cmp	r6, #4
 80099de:	d806      	bhi.n	80099ee <_strtod_l+0xf6>
 80099e0:	e8df f006 	tbb	[pc, r6]
 80099e4:	1714030a 	.word	0x1714030a
 80099e8:	0a          	.byte	0x0a
 80099e9:	00          	.byte	0x00
 80099ea:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80099ee:	0721      	lsls	r1, r4, #28
 80099f0:	d5c3      	bpl.n	800997a <_strtod_l+0x82>
 80099f2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80099f6:	e7c0      	b.n	800997a <_strtod_l+0x82>
 80099f8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80099fa:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80099fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009a02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009a06:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009a0a:	e7f0      	b.n	80099ee <_strtod_l+0xf6>
 8009a0c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009b88 <_strtod_l+0x290>
 8009a10:	e7ed      	b.n	80099ee <_strtod_l+0xf6>
 8009a12:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009a16:	f04f 38ff 	mov.w	r8, #4294967295
 8009a1a:	e7e8      	b.n	80099ee <_strtod_l+0xf6>
 8009a1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a1e:	1c5a      	adds	r2, r3, #1
 8009a20:	9219      	str	r2, [sp, #100]	; 0x64
 8009a22:	785b      	ldrb	r3, [r3, #1]
 8009a24:	2b30      	cmp	r3, #48	; 0x30
 8009a26:	d0f9      	beq.n	8009a1c <_strtod_l+0x124>
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d0a6      	beq.n	800997a <_strtod_l+0x82>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	9307      	str	r3, [sp, #28]
 8009a30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a32:	220a      	movs	r2, #10
 8009a34:	9308      	str	r3, [sp, #32]
 8009a36:	2300      	movs	r3, #0
 8009a38:	469b      	mov	fp, r3
 8009a3a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009a3e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009a40:	7805      	ldrb	r5, [r0, #0]
 8009a42:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009a46:	b2d9      	uxtb	r1, r3
 8009a48:	2909      	cmp	r1, #9
 8009a4a:	d927      	bls.n	8009a9c <_strtod_l+0x1a4>
 8009a4c:	4622      	mov	r2, r4
 8009a4e:	4639      	mov	r1, r7
 8009a50:	f002 fefe 	bl	800c850 <strncmp>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d033      	beq.n	8009ac0 <_strtod_l+0x1c8>
 8009a58:	2000      	movs	r0, #0
 8009a5a:	462a      	mov	r2, r5
 8009a5c:	465c      	mov	r4, fp
 8009a5e:	4603      	mov	r3, r0
 8009a60:	9004      	str	r0, [sp, #16]
 8009a62:	2a65      	cmp	r2, #101	; 0x65
 8009a64:	d001      	beq.n	8009a6a <_strtod_l+0x172>
 8009a66:	2a45      	cmp	r2, #69	; 0x45
 8009a68:	d114      	bne.n	8009a94 <_strtod_l+0x19c>
 8009a6a:	b91c      	cbnz	r4, 8009a74 <_strtod_l+0x17c>
 8009a6c:	9a07      	ldr	r2, [sp, #28]
 8009a6e:	4302      	orrs	r2, r0
 8009a70:	d09f      	beq.n	80099b2 <_strtod_l+0xba>
 8009a72:	2400      	movs	r4, #0
 8009a74:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009a76:	1c72      	adds	r2, r6, #1
 8009a78:	9219      	str	r2, [sp, #100]	; 0x64
 8009a7a:	7872      	ldrb	r2, [r6, #1]
 8009a7c:	2a2b      	cmp	r2, #43	; 0x2b
 8009a7e:	d079      	beq.n	8009b74 <_strtod_l+0x27c>
 8009a80:	2a2d      	cmp	r2, #45	; 0x2d
 8009a82:	f000 8083 	beq.w	8009b8c <_strtod_l+0x294>
 8009a86:	2700      	movs	r7, #0
 8009a88:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009a8c:	2909      	cmp	r1, #9
 8009a8e:	f240 8083 	bls.w	8009b98 <_strtod_l+0x2a0>
 8009a92:	9619      	str	r6, [sp, #100]	; 0x64
 8009a94:	2500      	movs	r5, #0
 8009a96:	e09f      	b.n	8009bd8 <_strtod_l+0x2e0>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	e7c8      	b.n	8009a2e <_strtod_l+0x136>
 8009a9c:	f1bb 0f08 	cmp.w	fp, #8
 8009aa0:	bfd5      	itete	le
 8009aa2:	9906      	ldrle	r1, [sp, #24]
 8009aa4:	9905      	ldrgt	r1, [sp, #20]
 8009aa6:	fb02 3301 	mlale	r3, r2, r1, r3
 8009aaa:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009aae:	f100 0001 	add.w	r0, r0, #1
 8009ab2:	bfd4      	ite	le
 8009ab4:	9306      	strle	r3, [sp, #24]
 8009ab6:	9305      	strgt	r3, [sp, #20]
 8009ab8:	f10b 0b01 	add.w	fp, fp, #1
 8009abc:	9019      	str	r0, [sp, #100]	; 0x64
 8009abe:	e7be      	b.n	8009a3e <_strtod_l+0x146>
 8009ac0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ac2:	191a      	adds	r2, r3, r4
 8009ac4:	9219      	str	r2, [sp, #100]	; 0x64
 8009ac6:	5d1a      	ldrb	r2, [r3, r4]
 8009ac8:	f1bb 0f00 	cmp.w	fp, #0
 8009acc:	d036      	beq.n	8009b3c <_strtod_l+0x244>
 8009ace:	465c      	mov	r4, fp
 8009ad0:	9004      	str	r0, [sp, #16]
 8009ad2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009ad6:	2b09      	cmp	r3, #9
 8009ad8:	d912      	bls.n	8009b00 <_strtod_l+0x208>
 8009ada:	2301      	movs	r3, #1
 8009adc:	e7c1      	b.n	8009a62 <_strtod_l+0x16a>
 8009ade:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ae0:	3001      	adds	r0, #1
 8009ae2:	1c5a      	adds	r2, r3, #1
 8009ae4:	9219      	str	r2, [sp, #100]	; 0x64
 8009ae6:	785a      	ldrb	r2, [r3, #1]
 8009ae8:	2a30      	cmp	r2, #48	; 0x30
 8009aea:	d0f8      	beq.n	8009ade <_strtod_l+0x1e6>
 8009aec:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009af0:	2b08      	cmp	r3, #8
 8009af2:	f200 84d5 	bhi.w	800a4a0 <_strtod_l+0xba8>
 8009af6:	9004      	str	r0, [sp, #16]
 8009af8:	2000      	movs	r0, #0
 8009afa:	4604      	mov	r4, r0
 8009afc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009afe:	9308      	str	r3, [sp, #32]
 8009b00:	3a30      	subs	r2, #48	; 0x30
 8009b02:	f100 0301 	add.w	r3, r0, #1
 8009b06:	d013      	beq.n	8009b30 <_strtod_l+0x238>
 8009b08:	9904      	ldr	r1, [sp, #16]
 8009b0a:	1905      	adds	r5, r0, r4
 8009b0c:	4419      	add	r1, r3
 8009b0e:	9104      	str	r1, [sp, #16]
 8009b10:	4623      	mov	r3, r4
 8009b12:	210a      	movs	r1, #10
 8009b14:	42ab      	cmp	r3, r5
 8009b16:	d113      	bne.n	8009b40 <_strtod_l+0x248>
 8009b18:	1823      	adds	r3, r4, r0
 8009b1a:	2b08      	cmp	r3, #8
 8009b1c:	f104 0401 	add.w	r4, r4, #1
 8009b20:	4404      	add	r4, r0
 8009b22:	dc1b      	bgt.n	8009b5c <_strtod_l+0x264>
 8009b24:	230a      	movs	r3, #10
 8009b26:	9906      	ldr	r1, [sp, #24]
 8009b28:	fb03 2301 	mla	r3, r3, r1, r2
 8009b2c:	9306      	str	r3, [sp, #24]
 8009b2e:	2300      	movs	r3, #0
 8009b30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009b32:	4618      	mov	r0, r3
 8009b34:	1c51      	adds	r1, r2, #1
 8009b36:	9119      	str	r1, [sp, #100]	; 0x64
 8009b38:	7852      	ldrb	r2, [r2, #1]
 8009b3a:	e7ca      	b.n	8009ad2 <_strtod_l+0x1da>
 8009b3c:	4658      	mov	r0, fp
 8009b3e:	e7d3      	b.n	8009ae8 <_strtod_l+0x1f0>
 8009b40:	2b08      	cmp	r3, #8
 8009b42:	dc04      	bgt.n	8009b4e <_strtod_l+0x256>
 8009b44:	9f06      	ldr	r7, [sp, #24]
 8009b46:	434f      	muls	r7, r1
 8009b48:	9706      	str	r7, [sp, #24]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	e7e2      	b.n	8009b14 <_strtod_l+0x21c>
 8009b4e:	1c5f      	adds	r7, r3, #1
 8009b50:	2f10      	cmp	r7, #16
 8009b52:	bfde      	ittt	le
 8009b54:	9f05      	ldrle	r7, [sp, #20]
 8009b56:	434f      	mulle	r7, r1
 8009b58:	9705      	strle	r7, [sp, #20]
 8009b5a:	e7f6      	b.n	8009b4a <_strtod_l+0x252>
 8009b5c:	2c10      	cmp	r4, #16
 8009b5e:	bfdf      	itttt	le
 8009b60:	230a      	movle	r3, #10
 8009b62:	9905      	ldrle	r1, [sp, #20]
 8009b64:	fb03 2301 	mlale	r3, r3, r1, r2
 8009b68:	9305      	strle	r3, [sp, #20]
 8009b6a:	e7e0      	b.n	8009b2e <_strtod_l+0x236>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	9304      	str	r3, [sp, #16]
 8009b70:	2301      	movs	r3, #1
 8009b72:	e77b      	b.n	8009a6c <_strtod_l+0x174>
 8009b74:	2700      	movs	r7, #0
 8009b76:	1cb2      	adds	r2, r6, #2
 8009b78:	9219      	str	r2, [sp, #100]	; 0x64
 8009b7a:	78b2      	ldrb	r2, [r6, #2]
 8009b7c:	e784      	b.n	8009a88 <_strtod_l+0x190>
 8009b7e:	bf00      	nop
 8009b80:	0801f078 	.word	0x0801f078
 8009b84:	0801ee30 	.word	0x0801ee30
 8009b88:	7ff00000 	.word	0x7ff00000
 8009b8c:	2701      	movs	r7, #1
 8009b8e:	e7f2      	b.n	8009b76 <_strtod_l+0x27e>
 8009b90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009b92:	1c51      	adds	r1, r2, #1
 8009b94:	9119      	str	r1, [sp, #100]	; 0x64
 8009b96:	7852      	ldrb	r2, [r2, #1]
 8009b98:	2a30      	cmp	r2, #48	; 0x30
 8009b9a:	d0f9      	beq.n	8009b90 <_strtod_l+0x298>
 8009b9c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009ba0:	2908      	cmp	r1, #8
 8009ba2:	f63f af77 	bhi.w	8009a94 <_strtod_l+0x19c>
 8009ba6:	f04f 0e0a 	mov.w	lr, #10
 8009baa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009bae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009bb0:	9209      	str	r2, [sp, #36]	; 0x24
 8009bb2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009bb4:	1c51      	adds	r1, r2, #1
 8009bb6:	9119      	str	r1, [sp, #100]	; 0x64
 8009bb8:	7852      	ldrb	r2, [r2, #1]
 8009bba:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009bbe:	2d09      	cmp	r5, #9
 8009bc0:	d935      	bls.n	8009c2e <_strtod_l+0x336>
 8009bc2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009bc4:	1b49      	subs	r1, r1, r5
 8009bc6:	2908      	cmp	r1, #8
 8009bc8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009bcc:	dc02      	bgt.n	8009bd4 <_strtod_l+0x2dc>
 8009bce:	4565      	cmp	r5, ip
 8009bd0:	bfa8      	it	ge
 8009bd2:	4665      	movge	r5, ip
 8009bd4:	b107      	cbz	r7, 8009bd8 <_strtod_l+0x2e0>
 8009bd6:	426d      	negs	r5, r5
 8009bd8:	2c00      	cmp	r4, #0
 8009bda:	d14c      	bne.n	8009c76 <_strtod_l+0x37e>
 8009bdc:	9907      	ldr	r1, [sp, #28]
 8009bde:	4301      	orrs	r1, r0
 8009be0:	f47f aecb 	bne.w	800997a <_strtod_l+0x82>
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f47f aee4 	bne.w	80099b2 <_strtod_l+0xba>
 8009bea:	2a69      	cmp	r2, #105	; 0x69
 8009bec:	d026      	beq.n	8009c3c <_strtod_l+0x344>
 8009bee:	dc23      	bgt.n	8009c38 <_strtod_l+0x340>
 8009bf0:	2a49      	cmp	r2, #73	; 0x49
 8009bf2:	d023      	beq.n	8009c3c <_strtod_l+0x344>
 8009bf4:	2a4e      	cmp	r2, #78	; 0x4e
 8009bf6:	f47f aedc 	bne.w	80099b2 <_strtod_l+0xba>
 8009bfa:	499d      	ldr	r1, [pc, #628]	; (8009e70 <_strtod_l+0x578>)
 8009bfc:	a819      	add	r0, sp, #100	; 0x64
 8009bfe:	f001 fe23 	bl	800b848 <__match>
 8009c02:	2800      	cmp	r0, #0
 8009c04:	f43f aed5 	beq.w	80099b2 <_strtod_l+0xba>
 8009c08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	2b28      	cmp	r3, #40	; 0x28
 8009c0e:	d12c      	bne.n	8009c6a <_strtod_l+0x372>
 8009c10:	4998      	ldr	r1, [pc, #608]	; (8009e74 <_strtod_l+0x57c>)
 8009c12:	aa1c      	add	r2, sp, #112	; 0x70
 8009c14:	a819      	add	r0, sp, #100	; 0x64
 8009c16:	f001 fe2b 	bl	800b870 <__hexnan>
 8009c1a:	2805      	cmp	r0, #5
 8009c1c:	d125      	bne.n	8009c6a <_strtod_l+0x372>
 8009c1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c20:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009c24:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009c28:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009c2c:	e6a5      	b.n	800997a <_strtod_l+0x82>
 8009c2e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8009c32:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009c36:	e7bc      	b.n	8009bb2 <_strtod_l+0x2ba>
 8009c38:	2a6e      	cmp	r2, #110	; 0x6e
 8009c3a:	e7dc      	b.n	8009bf6 <_strtod_l+0x2fe>
 8009c3c:	498e      	ldr	r1, [pc, #568]	; (8009e78 <_strtod_l+0x580>)
 8009c3e:	a819      	add	r0, sp, #100	; 0x64
 8009c40:	f001 fe02 	bl	800b848 <__match>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	f43f aeb4 	beq.w	80099b2 <_strtod_l+0xba>
 8009c4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c4c:	498b      	ldr	r1, [pc, #556]	; (8009e7c <_strtod_l+0x584>)
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	a819      	add	r0, sp, #100	; 0x64
 8009c52:	9319      	str	r3, [sp, #100]	; 0x64
 8009c54:	f001 fdf8 	bl	800b848 <__match>
 8009c58:	b910      	cbnz	r0, 8009c60 <_strtod_l+0x368>
 8009c5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	9319      	str	r3, [sp, #100]	; 0x64
 8009c60:	f04f 0800 	mov.w	r8, #0
 8009c64:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009e80 <_strtod_l+0x588>
 8009c68:	e687      	b.n	800997a <_strtod_l+0x82>
 8009c6a:	4886      	ldr	r0, [pc, #536]	; (8009e84 <_strtod_l+0x58c>)
 8009c6c:	f002 fdda 	bl	800c824 <nan>
 8009c70:	4680      	mov	r8, r0
 8009c72:	4689      	mov	r9, r1
 8009c74:	e681      	b.n	800997a <_strtod_l+0x82>
 8009c76:	9b04      	ldr	r3, [sp, #16]
 8009c78:	f1bb 0f00 	cmp.w	fp, #0
 8009c7c:	bf08      	it	eq
 8009c7e:	46a3      	moveq	fp, r4
 8009c80:	1aeb      	subs	r3, r5, r3
 8009c82:	2c10      	cmp	r4, #16
 8009c84:	9806      	ldr	r0, [sp, #24]
 8009c86:	4626      	mov	r6, r4
 8009c88:	9307      	str	r3, [sp, #28]
 8009c8a:	bfa8      	it	ge
 8009c8c:	2610      	movge	r6, #16
 8009c8e:	f7fc f9e7 	bl	8006060 <__aeabi_ui2d>
 8009c92:	2c09      	cmp	r4, #9
 8009c94:	4680      	mov	r8, r0
 8009c96:	4689      	mov	r9, r1
 8009c98:	dd13      	ble.n	8009cc2 <_strtod_l+0x3ca>
 8009c9a:	4b7b      	ldr	r3, [pc, #492]	; (8009e88 <_strtod_l+0x590>)
 8009c9c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ca0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009ca4:	f7fc fa56 	bl	8006154 <__aeabi_dmul>
 8009ca8:	4680      	mov	r8, r0
 8009caa:	9805      	ldr	r0, [sp, #20]
 8009cac:	4689      	mov	r9, r1
 8009cae:	f7fc f9d7 	bl	8006060 <__aeabi_ui2d>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	4640      	mov	r0, r8
 8009cb8:	4649      	mov	r1, r9
 8009cba:	f7fc f895 	bl	8005de8 <__adddf3>
 8009cbe:	4680      	mov	r8, r0
 8009cc0:	4689      	mov	r9, r1
 8009cc2:	2c0f      	cmp	r4, #15
 8009cc4:	dc36      	bgt.n	8009d34 <_strtod_l+0x43c>
 8009cc6:	9b07      	ldr	r3, [sp, #28]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f43f ae56 	beq.w	800997a <_strtod_l+0x82>
 8009cce:	dd22      	ble.n	8009d16 <_strtod_l+0x41e>
 8009cd0:	2b16      	cmp	r3, #22
 8009cd2:	dc09      	bgt.n	8009ce8 <_strtod_l+0x3f0>
 8009cd4:	496c      	ldr	r1, [pc, #432]	; (8009e88 <_strtod_l+0x590>)
 8009cd6:	4642      	mov	r2, r8
 8009cd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009cdc:	464b      	mov	r3, r9
 8009cde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ce2:	f7fc fa37 	bl	8006154 <__aeabi_dmul>
 8009ce6:	e7c3      	b.n	8009c70 <_strtod_l+0x378>
 8009ce8:	9a07      	ldr	r2, [sp, #28]
 8009cea:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	db20      	blt.n	8009d34 <_strtod_l+0x43c>
 8009cf2:	4d65      	ldr	r5, [pc, #404]	; (8009e88 <_strtod_l+0x590>)
 8009cf4:	f1c4 040f 	rsb	r4, r4, #15
 8009cf8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009cfc:	4642      	mov	r2, r8
 8009cfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d02:	464b      	mov	r3, r9
 8009d04:	f7fc fa26 	bl	8006154 <__aeabi_dmul>
 8009d08:	9b07      	ldr	r3, [sp, #28]
 8009d0a:	1b1c      	subs	r4, r3, r4
 8009d0c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009d10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d14:	e7e5      	b.n	8009ce2 <_strtod_l+0x3ea>
 8009d16:	9b07      	ldr	r3, [sp, #28]
 8009d18:	3316      	adds	r3, #22
 8009d1a:	db0b      	blt.n	8009d34 <_strtod_l+0x43c>
 8009d1c:	9b04      	ldr	r3, [sp, #16]
 8009d1e:	4640      	mov	r0, r8
 8009d20:	1b5d      	subs	r5, r3, r5
 8009d22:	4b59      	ldr	r3, [pc, #356]	; (8009e88 <_strtod_l+0x590>)
 8009d24:	4649      	mov	r1, r9
 8009d26:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009d2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d2e:	f7fc fb3b 	bl	80063a8 <__aeabi_ddiv>
 8009d32:	e79d      	b.n	8009c70 <_strtod_l+0x378>
 8009d34:	9b07      	ldr	r3, [sp, #28]
 8009d36:	1ba6      	subs	r6, r4, r6
 8009d38:	441e      	add	r6, r3
 8009d3a:	2e00      	cmp	r6, #0
 8009d3c:	dd74      	ble.n	8009e28 <_strtod_l+0x530>
 8009d3e:	f016 030f 	ands.w	r3, r6, #15
 8009d42:	d00a      	beq.n	8009d5a <_strtod_l+0x462>
 8009d44:	4950      	ldr	r1, [pc, #320]	; (8009e88 <_strtod_l+0x590>)
 8009d46:	4642      	mov	r2, r8
 8009d48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d50:	464b      	mov	r3, r9
 8009d52:	f7fc f9ff 	bl	8006154 <__aeabi_dmul>
 8009d56:	4680      	mov	r8, r0
 8009d58:	4689      	mov	r9, r1
 8009d5a:	f036 060f 	bics.w	r6, r6, #15
 8009d5e:	d052      	beq.n	8009e06 <_strtod_l+0x50e>
 8009d60:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009d64:	dd27      	ble.n	8009db6 <_strtod_l+0x4be>
 8009d66:	f04f 0b00 	mov.w	fp, #0
 8009d6a:	f8cd b010 	str.w	fp, [sp, #16]
 8009d6e:	f8cd b020 	str.w	fp, [sp, #32]
 8009d72:	f8cd b018 	str.w	fp, [sp, #24]
 8009d76:	2322      	movs	r3, #34	; 0x22
 8009d78:	f04f 0800 	mov.w	r8, #0
 8009d7c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009e80 <_strtod_l+0x588>
 8009d80:	f8ca 3000 	str.w	r3, [sl]
 8009d84:	9b08      	ldr	r3, [sp, #32]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f43f adf7 	beq.w	800997a <_strtod_l+0x82>
 8009d8c:	4650      	mov	r0, sl
 8009d8e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009d90:	f001 fe84 	bl	800ba9c <_Bfree>
 8009d94:	4650      	mov	r0, sl
 8009d96:	9906      	ldr	r1, [sp, #24]
 8009d98:	f001 fe80 	bl	800ba9c <_Bfree>
 8009d9c:	4650      	mov	r0, sl
 8009d9e:	9904      	ldr	r1, [sp, #16]
 8009da0:	f001 fe7c 	bl	800ba9c <_Bfree>
 8009da4:	4650      	mov	r0, sl
 8009da6:	9908      	ldr	r1, [sp, #32]
 8009da8:	f001 fe78 	bl	800ba9c <_Bfree>
 8009dac:	4659      	mov	r1, fp
 8009dae:	4650      	mov	r0, sl
 8009db0:	f001 fe74 	bl	800ba9c <_Bfree>
 8009db4:	e5e1      	b.n	800997a <_strtod_l+0x82>
 8009db6:	4b35      	ldr	r3, [pc, #212]	; (8009e8c <_strtod_l+0x594>)
 8009db8:	4640      	mov	r0, r8
 8009dba:	9305      	str	r3, [sp, #20]
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	461f      	mov	r7, r3
 8009dc2:	1136      	asrs	r6, r6, #4
 8009dc4:	2e01      	cmp	r6, #1
 8009dc6:	dc21      	bgt.n	8009e0c <_strtod_l+0x514>
 8009dc8:	b10b      	cbz	r3, 8009dce <_strtod_l+0x4d6>
 8009dca:	4680      	mov	r8, r0
 8009dcc:	4689      	mov	r9, r1
 8009dce:	4b2f      	ldr	r3, [pc, #188]	; (8009e8c <_strtod_l+0x594>)
 8009dd0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009dd4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009dd8:	4642      	mov	r2, r8
 8009dda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009dde:	464b      	mov	r3, r9
 8009de0:	f7fc f9b8 	bl	8006154 <__aeabi_dmul>
 8009de4:	4b26      	ldr	r3, [pc, #152]	; (8009e80 <_strtod_l+0x588>)
 8009de6:	460a      	mov	r2, r1
 8009de8:	400b      	ands	r3, r1
 8009dea:	4929      	ldr	r1, [pc, #164]	; (8009e90 <_strtod_l+0x598>)
 8009dec:	4680      	mov	r8, r0
 8009dee:	428b      	cmp	r3, r1
 8009df0:	d8b9      	bhi.n	8009d66 <_strtod_l+0x46e>
 8009df2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009df6:	428b      	cmp	r3, r1
 8009df8:	bf86      	itte	hi
 8009dfa:	f04f 38ff 	movhi.w	r8, #4294967295
 8009dfe:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009e94 <_strtod_l+0x59c>
 8009e02:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009e06:	2300      	movs	r3, #0
 8009e08:	9305      	str	r3, [sp, #20]
 8009e0a:	e07f      	b.n	8009f0c <_strtod_l+0x614>
 8009e0c:	07f2      	lsls	r2, r6, #31
 8009e0e:	d505      	bpl.n	8009e1c <_strtod_l+0x524>
 8009e10:	9b05      	ldr	r3, [sp, #20]
 8009e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e16:	f7fc f99d 	bl	8006154 <__aeabi_dmul>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	9a05      	ldr	r2, [sp, #20]
 8009e1e:	3701      	adds	r7, #1
 8009e20:	3208      	adds	r2, #8
 8009e22:	1076      	asrs	r6, r6, #1
 8009e24:	9205      	str	r2, [sp, #20]
 8009e26:	e7cd      	b.n	8009dc4 <_strtod_l+0x4cc>
 8009e28:	d0ed      	beq.n	8009e06 <_strtod_l+0x50e>
 8009e2a:	4276      	negs	r6, r6
 8009e2c:	f016 020f 	ands.w	r2, r6, #15
 8009e30:	d00a      	beq.n	8009e48 <_strtod_l+0x550>
 8009e32:	4b15      	ldr	r3, [pc, #84]	; (8009e88 <_strtod_l+0x590>)
 8009e34:	4640      	mov	r0, r8
 8009e36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e40:	f7fc fab2 	bl	80063a8 <__aeabi_ddiv>
 8009e44:	4680      	mov	r8, r0
 8009e46:	4689      	mov	r9, r1
 8009e48:	1136      	asrs	r6, r6, #4
 8009e4a:	d0dc      	beq.n	8009e06 <_strtod_l+0x50e>
 8009e4c:	2e1f      	cmp	r6, #31
 8009e4e:	dd23      	ble.n	8009e98 <_strtod_l+0x5a0>
 8009e50:	f04f 0b00 	mov.w	fp, #0
 8009e54:	f8cd b010 	str.w	fp, [sp, #16]
 8009e58:	f8cd b020 	str.w	fp, [sp, #32]
 8009e5c:	f8cd b018 	str.w	fp, [sp, #24]
 8009e60:	2322      	movs	r3, #34	; 0x22
 8009e62:	f04f 0800 	mov.w	r8, #0
 8009e66:	f04f 0900 	mov.w	r9, #0
 8009e6a:	f8ca 3000 	str.w	r3, [sl]
 8009e6e:	e789      	b.n	8009d84 <_strtod_l+0x48c>
 8009e70:	0801ee01 	.word	0x0801ee01
 8009e74:	0801ee44 	.word	0x0801ee44
 8009e78:	0801edf9 	.word	0x0801edf9
 8009e7c:	0801ef84 	.word	0x0801ef84
 8009e80:	7ff00000 	.word	0x7ff00000
 8009e84:	0801f230 	.word	0x0801f230
 8009e88:	0801f110 	.word	0x0801f110
 8009e8c:	0801f0e8 	.word	0x0801f0e8
 8009e90:	7ca00000 	.word	0x7ca00000
 8009e94:	7fefffff 	.word	0x7fefffff
 8009e98:	f016 0310 	ands.w	r3, r6, #16
 8009e9c:	bf18      	it	ne
 8009e9e:	236a      	movne	r3, #106	; 0x6a
 8009ea0:	4640      	mov	r0, r8
 8009ea2:	9305      	str	r3, [sp, #20]
 8009ea4:	4649      	mov	r1, r9
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	4fb0      	ldr	r7, [pc, #704]	; (800a16c <_strtod_l+0x874>)
 8009eaa:	07f2      	lsls	r2, r6, #31
 8009eac:	d504      	bpl.n	8009eb8 <_strtod_l+0x5c0>
 8009eae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eb2:	f7fc f94f 	bl	8006154 <__aeabi_dmul>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	1076      	asrs	r6, r6, #1
 8009eba:	f107 0708 	add.w	r7, r7, #8
 8009ebe:	d1f4      	bne.n	8009eaa <_strtod_l+0x5b2>
 8009ec0:	b10b      	cbz	r3, 8009ec6 <_strtod_l+0x5ce>
 8009ec2:	4680      	mov	r8, r0
 8009ec4:	4689      	mov	r9, r1
 8009ec6:	9b05      	ldr	r3, [sp, #20]
 8009ec8:	b1c3      	cbz	r3, 8009efc <_strtod_l+0x604>
 8009eca:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009ece:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	4649      	mov	r1, r9
 8009ed6:	dd11      	ble.n	8009efc <_strtod_l+0x604>
 8009ed8:	2b1f      	cmp	r3, #31
 8009eda:	f340 8127 	ble.w	800a12c <_strtod_l+0x834>
 8009ede:	2b34      	cmp	r3, #52	; 0x34
 8009ee0:	bfd8      	it	le
 8009ee2:	f04f 33ff 	movle.w	r3, #4294967295
 8009ee6:	f04f 0800 	mov.w	r8, #0
 8009eea:	bfcf      	iteee	gt
 8009eec:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009ef0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009ef4:	fa03 f202 	lslle.w	r2, r3, r2
 8009ef8:	ea02 0901 	andle.w	r9, r2, r1
 8009efc:	2200      	movs	r2, #0
 8009efe:	2300      	movs	r3, #0
 8009f00:	4640      	mov	r0, r8
 8009f02:	4649      	mov	r1, r9
 8009f04:	f7fc fb8e 	bl	8006624 <__aeabi_dcmpeq>
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	d1a1      	bne.n	8009e50 <_strtod_l+0x558>
 8009f0c:	9b06      	ldr	r3, [sp, #24]
 8009f0e:	465a      	mov	r2, fp
 8009f10:	9300      	str	r3, [sp, #0]
 8009f12:	4650      	mov	r0, sl
 8009f14:	4623      	mov	r3, r4
 8009f16:	9908      	ldr	r1, [sp, #32]
 8009f18:	f001 fe28 	bl	800bb6c <__s2b>
 8009f1c:	9008      	str	r0, [sp, #32]
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	f43f af21 	beq.w	8009d66 <_strtod_l+0x46e>
 8009f24:	9b04      	ldr	r3, [sp, #16]
 8009f26:	f04f 0b00 	mov.w	fp, #0
 8009f2a:	1b5d      	subs	r5, r3, r5
 8009f2c:	9b07      	ldr	r3, [sp, #28]
 8009f2e:	f8cd b010 	str.w	fp, [sp, #16]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	bfb4      	ite	lt
 8009f36:	462b      	movlt	r3, r5
 8009f38:	2300      	movge	r3, #0
 8009f3a:	930e      	str	r3, [sp, #56]	; 0x38
 8009f3c:	9b07      	ldr	r3, [sp, #28]
 8009f3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009f42:	9314      	str	r3, [sp, #80]	; 0x50
 8009f44:	9b08      	ldr	r3, [sp, #32]
 8009f46:	4650      	mov	r0, sl
 8009f48:	6859      	ldr	r1, [r3, #4]
 8009f4a:	f001 fd67 	bl	800ba1c <_Balloc>
 8009f4e:	9006      	str	r0, [sp, #24]
 8009f50:	2800      	cmp	r0, #0
 8009f52:	f43f af10 	beq.w	8009d76 <_strtod_l+0x47e>
 8009f56:	9b08      	ldr	r3, [sp, #32]
 8009f58:	300c      	adds	r0, #12
 8009f5a:	691a      	ldr	r2, [r3, #16]
 8009f5c:	f103 010c 	add.w	r1, r3, #12
 8009f60:	3202      	adds	r2, #2
 8009f62:	0092      	lsls	r2, r2, #2
 8009f64:	f001 fd4c 	bl	800ba00 <memcpy>
 8009f68:	ab1c      	add	r3, sp, #112	; 0x70
 8009f6a:	9301      	str	r3, [sp, #4]
 8009f6c:	ab1b      	add	r3, sp, #108	; 0x6c
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	4642      	mov	r2, r8
 8009f72:	464b      	mov	r3, r9
 8009f74:	4650      	mov	r0, sl
 8009f76:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8009f7a:	f002 f939 	bl	800c1f0 <__d2b>
 8009f7e:	901a      	str	r0, [sp, #104]	; 0x68
 8009f80:	2800      	cmp	r0, #0
 8009f82:	f43f aef8 	beq.w	8009d76 <_strtod_l+0x47e>
 8009f86:	2101      	movs	r1, #1
 8009f88:	4650      	mov	r0, sl
 8009f8a:	f001 fe87 	bl	800bc9c <__i2b>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	9004      	str	r0, [sp, #16]
 8009f92:	2800      	cmp	r0, #0
 8009f94:	f43f aeef 	beq.w	8009d76 <_strtod_l+0x47e>
 8009f98:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009f9a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009f9c:	2d00      	cmp	r5, #0
 8009f9e:	bfab      	itete	ge
 8009fa0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009fa2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8009fa4:	18ee      	addge	r6, r5, r3
 8009fa6:	1b5c      	sublt	r4, r3, r5
 8009fa8:	9b05      	ldr	r3, [sp, #20]
 8009faa:	bfa8      	it	ge
 8009fac:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8009fae:	eba5 0503 	sub.w	r5, r5, r3
 8009fb2:	4415      	add	r5, r2
 8009fb4:	4b6e      	ldr	r3, [pc, #440]	; (800a170 <_strtod_l+0x878>)
 8009fb6:	f105 35ff 	add.w	r5, r5, #4294967295
 8009fba:	bfb8      	it	lt
 8009fbc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009fbe:	429d      	cmp	r5, r3
 8009fc0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009fc4:	f280 80c4 	bge.w	800a150 <_strtod_l+0x858>
 8009fc8:	1b5b      	subs	r3, r3, r5
 8009fca:	2b1f      	cmp	r3, #31
 8009fcc:	f04f 0701 	mov.w	r7, #1
 8009fd0:	eba2 0203 	sub.w	r2, r2, r3
 8009fd4:	f300 80b1 	bgt.w	800a13a <_strtod_l+0x842>
 8009fd8:	2500      	movs	r5, #0
 8009fda:	fa07 f303 	lsl.w	r3, r7, r3
 8009fde:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fe0:	18b7      	adds	r7, r6, r2
 8009fe2:	9b05      	ldr	r3, [sp, #20]
 8009fe4:	42be      	cmp	r6, r7
 8009fe6:	4414      	add	r4, r2
 8009fe8:	441c      	add	r4, r3
 8009fea:	4633      	mov	r3, r6
 8009fec:	bfa8      	it	ge
 8009fee:	463b      	movge	r3, r7
 8009ff0:	42a3      	cmp	r3, r4
 8009ff2:	bfa8      	it	ge
 8009ff4:	4623      	movge	r3, r4
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	bfc2      	ittt	gt
 8009ffa:	1aff      	subgt	r7, r7, r3
 8009ffc:	1ae4      	subgt	r4, r4, r3
 8009ffe:	1af6      	subgt	r6, r6, r3
 800a000:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a002:	2b00      	cmp	r3, #0
 800a004:	dd17      	ble.n	800a036 <_strtod_l+0x73e>
 800a006:	461a      	mov	r2, r3
 800a008:	4650      	mov	r0, sl
 800a00a:	9904      	ldr	r1, [sp, #16]
 800a00c:	f001 ff04 	bl	800be18 <__pow5mult>
 800a010:	9004      	str	r0, [sp, #16]
 800a012:	2800      	cmp	r0, #0
 800a014:	f43f aeaf 	beq.w	8009d76 <_strtod_l+0x47e>
 800a018:	4601      	mov	r1, r0
 800a01a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a01c:	4650      	mov	r0, sl
 800a01e:	f001 fe53 	bl	800bcc8 <__multiply>
 800a022:	9009      	str	r0, [sp, #36]	; 0x24
 800a024:	2800      	cmp	r0, #0
 800a026:	f43f aea6 	beq.w	8009d76 <_strtod_l+0x47e>
 800a02a:	4650      	mov	r0, sl
 800a02c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a02e:	f001 fd35 	bl	800ba9c <_Bfree>
 800a032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a034:	931a      	str	r3, [sp, #104]	; 0x68
 800a036:	2f00      	cmp	r7, #0
 800a038:	f300 808e 	bgt.w	800a158 <_strtod_l+0x860>
 800a03c:	9b07      	ldr	r3, [sp, #28]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	dd08      	ble.n	800a054 <_strtod_l+0x75c>
 800a042:	4650      	mov	r0, sl
 800a044:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a046:	9906      	ldr	r1, [sp, #24]
 800a048:	f001 fee6 	bl	800be18 <__pow5mult>
 800a04c:	9006      	str	r0, [sp, #24]
 800a04e:	2800      	cmp	r0, #0
 800a050:	f43f ae91 	beq.w	8009d76 <_strtod_l+0x47e>
 800a054:	2c00      	cmp	r4, #0
 800a056:	dd08      	ble.n	800a06a <_strtod_l+0x772>
 800a058:	4622      	mov	r2, r4
 800a05a:	4650      	mov	r0, sl
 800a05c:	9906      	ldr	r1, [sp, #24]
 800a05e:	f001 ff35 	bl	800becc <__lshift>
 800a062:	9006      	str	r0, [sp, #24]
 800a064:	2800      	cmp	r0, #0
 800a066:	f43f ae86 	beq.w	8009d76 <_strtod_l+0x47e>
 800a06a:	2e00      	cmp	r6, #0
 800a06c:	dd08      	ble.n	800a080 <_strtod_l+0x788>
 800a06e:	4632      	mov	r2, r6
 800a070:	4650      	mov	r0, sl
 800a072:	9904      	ldr	r1, [sp, #16]
 800a074:	f001 ff2a 	bl	800becc <__lshift>
 800a078:	9004      	str	r0, [sp, #16]
 800a07a:	2800      	cmp	r0, #0
 800a07c:	f43f ae7b 	beq.w	8009d76 <_strtod_l+0x47e>
 800a080:	4650      	mov	r0, sl
 800a082:	9a06      	ldr	r2, [sp, #24]
 800a084:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a086:	f001 ffad 	bl	800bfe4 <__mdiff>
 800a08a:	4683      	mov	fp, r0
 800a08c:	2800      	cmp	r0, #0
 800a08e:	f43f ae72 	beq.w	8009d76 <_strtod_l+0x47e>
 800a092:	2400      	movs	r4, #0
 800a094:	68c3      	ldr	r3, [r0, #12]
 800a096:	9904      	ldr	r1, [sp, #16]
 800a098:	60c4      	str	r4, [r0, #12]
 800a09a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a09c:	f001 ff86 	bl	800bfac <__mcmp>
 800a0a0:	42a0      	cmp	r0, r4
 800a0a2:	da6b      	bge.n	800a17c <_strtod_l+0x884>
 800a0a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0a6:	ea53 0308 	orrs.w	r3, r3, r8
 800a0aa:	f040 8091 	bne.w	800a1d0 <_strtod_l+0x8d8>
 800a0ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	f040 808c 	bne.w	800a1d0 <_strtod_l+0x8d8>
 800a0b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0bc:	0d1b      	lsrs	r3, r3, #20
 800a0be:	051b      	lsls	r3, r3, #20
 800a0c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a0c4:	f240 8084 	bls.w	800a1d0 <_strtod_l+0x8d8>
 800a0c8:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a0cc:	b91b      	cbnz	r3, 800a0d6 <_strtod_l+0x7de>
 800a0ce:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	dd7c      	ble.n	800a1d0 <_strtod_l+0x8d8>
 800a0d6:	4659      	mov	r1, fp
 800a0d8:	2201      	movs	r2, #1
 800a0da:	4650      	mov	r0, sl
 800a0dc:	f001 fef6 	bl	800becc <__lshift>
 800a0e0:	9904      	ldr	r1, [sp, #16]
 800a0e2:	4683      	mov	fp, r0
 800a0e4:	f001 ff62 	bl	800bfac <__mcmp>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	dd71      	ble.n	800a1d0 <_strtod_l+0x8d8>
 800a0ec:	9905      	ldr	r1, [sp, #20]
 800a0ee:	464b      	mov	r3, r9
 800a0f0:	4a20      	ldr	r2, [pc, #128]	; (800a174 <_strtod_l+0x87c>)
 800a0f2:	2900      	cmp	r1, #0
 800a0f4:	f000 808c 	beq.w	800a210 <_strtod_l+0x918>
 800a0f8:	ea02 0109 	and.w	r1, r2, r9
 800a0fc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a100:	f300 8086 	bgt.w	800a210 <_strtod_l+0x918>
 800a104:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a108:	f77f aeaa 	ble.w	8009e60 <_strtod_l+0x568>
 800a10c:	4640      	mov	r0, r8
 800a10e:	4649      	mov	r1, r9
 800a110:	4b19      	ldr	r3, [pc, #100]	; (800a178 <_strtod_l+0x880>)
 800a112:	2200      	movs	r2, #0
 800a114:	f7fc f81e 	bl	8006154 <__aeabi_dmul>
 800a118:	460b      	mov	r3, r1
 800a11a:	4303      	orrs	r3, r0
 800a11c:	bf08      	it	eq
 800a11e:	2322      	moveq	r3, #34	; 0x22
 800a120:	4680      	mov	r8, r0
 800a122:	4689      	mov	r9, r1
 800a124:	bf08      	it	eq
 800a126:	f8ca 3000 	streq.w	r3, [sl]
 800a12a:	e62f      	b.n	8009d8c <_strtod_l+0x494>
 800a12c:	f04f 32ff 	mov.w	r2, #4294967295
 800a130:	fa02 f303 	lsl.w	r3, r2, r3
 800a134:	ea03 0808 	and.w	r8, r3, r8
 800a138:	e6e0      	b.n	8009efc <_strtod_l+0x604>
 800a13a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a13e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a142:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a146:	35e2      	adds	r5, #226	; 0xe2
 800a148:	fa07 f505 	lsl.w	r5, r7, r5
 800a14c:	970f      	str	r7, [sp, #60]	; 0x3c
 800a14e:	e747      	b.n	8009fe0 <_strtod_l+0x6e8>
 800a150:	2301      	movs	r3, #1
 800a152:	2500      	movs	r5, #0
 800a154:	930f      	str	r3, [sp, #60]	; 0x3c
 800a156:	e743      	b.n	8009fe0 <_strtod_l+0x6e8>
 800a158:	463a      	mov	r2, r7
 800a15a:	4650      	mov	r0, sl
 800a15c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a15e:	f001 feb5 	bl	800becc <__lshift>
 800a162:	901a      	str	r0, [sp, #104]	; 0x68
 800a164:	2800      	cmp	r0, #0
 800a166:	f47f af69 	bne.w	800a03c <_strtod_l+0x744>
 800a16a:	e604      	b.n	8009d76 <_strtod_l+0x47e>
 800a16c:	0801ee58 	.word	0x0801ee58
 800a170:	fffffc02 	.word	0xfffffc02
 800a174:	7ff00000 	.word	0x7ff00000
 800a178:	39500000 	.word	0x39500000
 800a17c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a180:	d165      	bne.n	800a24e <_strtod_l+0x956>
 800a182:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a184:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a188:	b35a      	cbz	r2, 800a1e2 <_strtod_l+0x8ea>
 800a18a:	4a99      	ldr	r2, [pc, #612]	; (800a3f0 <_strtod_l+0xaf8>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d12b      	bne.n	800a1e8 <_strtod_l+0x8f0>
 800a190:	9b05      	ldr	r3, [sp, #20]
 800a192:	4641      	mov	r1, r8
 800a194:	b303      	cbz	r3, 800a1d8 <_strtod_l+0x8e0>
 800a196:	464a      	mov	r2, r9
 800a198:	4b96      	ldr	r3, [pc, #600]	; (800a3f4 <_strtod_l+0xafc>)
 800a19a:	4013      	ands	r3, r2
 800a19c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a4:	d81b      	bhi.n	800a1de <_strtod_l+0x8e6>
 800a1a6:	0d1b      	lsrs	r3, r3, #20
 800a1a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a1ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b0:	4299      	cmp	r1, r3
 800a1b2:	d119      	bne.n	800a1e8 <_strtod_l+0x8f0>
 800a1b4:	4b90      	ldr	r3, [pc, #576]	; (800a3f8 <_strtod_l+0xb00>)
 800a1b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d102      	bne.n	800a1c2 <_strtod_l+0x8ca>
 800a1bc:	3101      	adds	r1, #1
 800a1be:	f43f adda 	beq.w	8009d76 <_strtod_l+0x47e>
 800a1c2:	f04f 0800 	mov.w	r8, #0
 800a1c6:	4b8b      	ldr	r3, [pc, #556]	; (800a3f4 <_strtod_l+0xafc>)
 800a1c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1ca:	401a      	ands	r2, r3
 800a1cc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a1d0:	9b05      	ldr	r3, [sp, #20]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d19a      	bne.n	800a10c <_strtod_l+0x814>
 800a1d6:	e5d9      	b.n	8009d8c <_strtod_l+0x494>
 800a1d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1dc:	e7e8      	b.n	800a1b0 <_strtod_l+0x8b8>
 800a1de:	4613      	mov	r3, r2
 800a1e0:	e7e6      	b.n	800a1b0 <_strtod_l+0x8b8>
 800a1e2:	ea53 0308 	orrs.w	r3, r3, r8
 800a1e6:	d081      	beq.n	800a0ec <_strtod_l+0x7f4>
 800a1e8:	b1e5      	cbz	r5, 800a224 <_strtod_l+0x92c>
 800a1ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ec:	421d      	tst	r5, r3
 800a1ee:	d0ef      	beq.n	800a1d0 <_strtod_l+0x8d8>
 800a1f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1f2:	4640      	mov	r0, r8
 800a1f4:	4649      	mov	r1, r9
 800a1f6:	9a05      	ldr	r2, [sp, #20]
 800a1f8:	b1c3      	cbz	r3, 800a22c <_strtod_l+0x934>
 800a1fa:	f7ff fb59 	bl	80098b0 <sulp>
 800a1fe:	4602      	mov	r2, r0
 800a200:	460b      	mov	r3, r1
 800a202:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a206:	f7fb fdef 	bl	8005de8 <__adddf3>
 800a20a:	4680      	mov	r8, r0
 800a20c:	4689      	mov	r9, r1
 800a20e:	e7df      	b.n	800a1d0 <_strtod_l+0x8d8>
 800a210:	4013      	ands	r3, r2
 800a212:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a216:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a21a:	f04f 38ff 	mov.w	r8, #4294967295
 800a21e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a222:	e7d5      	b.n	800a1d0 <_strtod_l+0x8d8>
 800a224:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a226:	ea13 0f08 	tst.w	r3, r8
 800a22a:	e7e0      	b.n	800a1ee <_strtod_l+0x8f6>
 800a22c:	f7ff fb40 	bl	80098b0 <sulp>
 800a230:	4602      	mov	r2, r0
 800a232:	460b      	mov	r3, r1
 800a234:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a238:	f7fb fdd4 	bl	8005de4 <__aeabi_dsub>
 800a23c:	2200      	movs	r2, #0
 800a23e:	2300      	movs	r3, #0
 800a240:	4680      	mov	r8, r0
 800a242:	4689      	mov	r9, r1
 800a244:	f7fc f9ee 	bl	8006624 <__aeabi_dcmpeq>
 800a248:	2800      	cmp	r0, #0
 800a24a:	d0c1      	beq.n	800a1d0 <_strtod_l+0x8d8>
 800a24c:	e608      	b.n	8009e60 <_strtod_l+0x568>
 800a24e:	4658      	mov	r0, fp
 800a250:	9904      	ldr	r1, [sp, #16]
 800a252:	f002 f829 	bl	800c2a8 <__ratio>
 800a256:	2200      	movs	r2, #0
 800a258:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a25c:	4606      	mov	r6, r0
 800a25e:	460f      	mov	r7, r1
 800a260:	f7fc f9f4 	bl	800664c <__aeabi_dcmple>
 800a264:	2800      	cmp	r0, #0
 800a266:	d070      	beq.n	800a34a <_strtod_l+0xa52>
 800a268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d042      	beq.n	800a2f4 <_strtod_l+0x9fc>
 800a26e:	2600      	movs	r6, #0
 800a270:	4f62      	ldr	r7, [pc, #392]	; (800a3fc <_strtod_l+0xb04>)
 800a272:	4d62      	ldr	r5, [pc, #392]	; (800a3fc <_strtod_l+0xb04>)
 800a274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a276:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a27a:	0d1b      	lsrs	r3, r3, #20
 800a27c:	051b      	lsls	r3, r3, #20
 800a27e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a280:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a282:	4b5f      	ldr	r3, [pc, #380]	; (800a400 <_strtod_l+0xb08>)
 800a284:	429a      	cmp	r2, r3
 800a286:	f040 80c3 	bne.w	800a410 <_strtod_l+0xb18>
 800a28a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a28c:	4640      	mov	r0, r8
 800a28e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a292:	4649      	mov	r1, r9
 800a294:	f001 ff32 	bl	800c0fc <__ulp>
 800a298:	4602      	mov	r2, r0
 800a29a:	460b      	mov	r3, r1
 800a29c:	4630      	mov	r0, r6
 800a29e:	4639      	mov	r1, r7
 800a2a0:	f7fb ff58 	bl	8006154 <__aeabi_dmul>
 800a2a4:	4642      	mov	r2, r8
 800a2a6:	464b      	mov	r3, r9
 800a2a8:	f7fb fd9e 	bl	8005de8 <__adddf3>
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	4951      	ldr	r1, [pc, #324]	; (800a3f4 <_strtod_l+0xafc>)
 800a2b0:	4a54      	ldr	r2, [pc, #336]	; (800a404 <_strtod_l+0xb0c>)
 800a2b2:	4019      	ands	r1, r3
 800a2b4:	4291      	cmp	r1, r2
 800a2b6:	4680      	mov	r8, r0
 800a2b8:	d95d      	bls.n	800a376 <_strtod_l+0xa7e>
 800a2ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2bc:	4b4e      	ldr	r3, [pc, #312]	; (800a3f8 <_strtod_l+0xb00>)
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d103      	bne.n	800a2ca <_strtod_l+0x9d2>
 800a2c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	f43f ad56 	beq.w	8009d76 <_strtod_l+0x47e>
 800a2ca:	f04f 38ff 	mov.w	r8, #4294967295
 800a2ce:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a3f8 <_strtod_l+0xb00>
 800a2d2:	4650      	mov	r0, sl
 800a2d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a2d6:	f001 fbe1 	bl	800ba9c <_Bfree>
 800a2da:	4650      	mov	r0, sl
 800a2dc:	9906      	ldr	r1, [sp, #24]
 800a2de:	f001 fbdd 	bl	800ba9c <_Bfree>
 800a2e2:	4650      	mov	r0, sl
 800a2e4:	9904      	ldr	r1, [sp, #16]
 800a2e6:	f001 fbd9 	bl	800ba9c <_Bfree>
 800a2ea:	4659      	mov	r1, fp
 800a2ec:	4650      	mov	r0, sl
 800a2ee:	f001 fbd5 	bl	800ba9c <_Bfree>
 800a2f2:	e627      	b.n	8009f44 <_strtod_l+0x64c>
 800a2f4:	f1b8 0f00 	cmp.w	r8, #0
 800a2f8:	d119      	bne.n	800a32e <_strtod_l+0xa36>
 800a2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a300:	b9e3      	cbnz	r3, 800a33c <_strtod_l+0xa44>
 800a302:	2200      	movs	r2, #0
 800a304:	4630      	mov	r0, r6
 800a306:	4639      	mov	r1, r7
 800a308:	4b3c      	ldr	r3, [pc, #240]	; (800a3fc <_strtod_l+0xb04>)
 800a30a:	f7fc f995 	bl	8006638 <__aeabi_dcmplt>
 800a30e:	b9c8      	cbnz	r0, 800a344 <_strtod_l+0xa4c>
 800a310:	2200      	movs	r2, #0
 800a312:	4630      	mov	r0, r6
 800a314:	4639      	mov	r1, r7
 800a316:	4b3c      	ldr	r3, [pc, #240]	; (800a408 <_strtod_l+0xb10>)
 800a318:	f7fb ff1c 	bl	8006154 <__aeabi_dmul>
 800a31c:	4604      	mov	r4, r0
 800a31e:	460d      	mov	r5, r1
 800a320:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a324:	9416      	str	r4, [sp, #88]	; 0x58
 800a326:	9317      	str	r3, [sp, #92]	; 0x5c
 800a328:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800a32c:	e7a2      	b.n	800a274 <_strtod_l+0x97c>
 800a32e:	f1b8 0f01 	cmp.w	r8, #1
 800a332:	d103      	bne.n	800a33c <_strtod_l+0xa44>
 800a334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a336:	2b00      	cmp	r3, #0
 800a338:	f43f ad92 	beq.w	8009e60 <_strtod_l+0x568>
 800a33c:	2600      	movs	r6, #0
 800a33e:	2400      	movs	r4, #0
 800a340:	4f32      	ldr	r7, [pc, #200]	; (800a40c <_strtod_l+0xb14>)
 800a342:	e796      	b.n	800a272 <_strtod_l+0x97a>
 800a344:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a346:	4d30      	ldr	r5, [pc, #192]	; (800a408 <_strtod_l+0xb10>)
 800a348:	e7ea      	b.n	800a320 <_strtod_l+0xa28>
 800a34a:	4b2f      	ldr	r3, [pc, #188]	; (800a408 <_strtod_l+0xb10>)
 800a34c:	2200      	movs	r2, #0
 800a34e:	4630      	mov	r0, r6
 800a350:	4639      	mov	r1, r7
 800a352:	f7fb feff 	bl	8006154 <__aeabi_dmul>
 800a356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a358:	4604      	mov	r4, r0
 800a35a:	460d      	mov	r5, r1
 800a35c:	b933      	cbnz	r3, 800a36c <_strtod_l+0xa74>
 800a35e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a362:	9010      	str	r0, [sp, #64]	; 0x40
 800a364:	9311      	str	r3, [sp, #68]	; 0x44
 800a366:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a36a:	e783      	b.n	800a274 <_strtod_l+0x97c>
 800a36c:	4602      	mov	r2, r0
 800a36e:	460b      	mov	r3, r1
 800a370:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a374:	e7f7      	b.n	800a366 <_strtod_l+0xa6e>
 800a376:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a37a:	9b05      	ldr	r3, [sp, #20]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d1a8      	bne.n	800a2d2 <_strtod_l+0x9da>
 800a380:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a384:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a386:	0d1b      	lsrs	r3, r3, #20
 800a388:	051b      	lsls	r3, r3, #20
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d1a1      	bne.n	800a2d2 <_strtod_l+0x9da>
 800a38e:	4620      	mov	r0, r4
 800a390:	4629      	mov	r1, r5
 800a392:	f7fc fa9d 	bl	80068d0 <__aeabi_d2lz>
 800a396:	f7fb feaf 	bl	80060f8 <__aeabi_l2d>
 800a39a:	4602      	mov	r2, r0
 800a39c:	460b      	mov	r3, r1
 800a39e:	4620      	mov	r0, r4
 800a3a0:	4629      	mov	r1, r5
 800a3a2:	f7fb fd1f 	bl	8005de4 <__aeabi_dsub>
 800a3a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a3ac:	ea43 0308 	orr.w	r3, r3, r8
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	460d      	mov	r5, r1
 800a3b6:	d066      	beq.n	800a486 <_strtod_l+0xb8e>
 800a3b8:	a309      	add	r3, pc, #36	; (adr r3, 800a3e0 <_strtod_l+0xae8>)
 800a3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3be:	f7fc f93b 	bl	8006638 <__aeabi_dcmplt>
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	f47f ace2 	bne.w	8009d8c <_strtod_l+0x494>
 800a3c8:	a307      	add	r3, pc, #28	; (adr r3, 800a3e8 <_strtod_l+0xaf0>)
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	f7fc f94f 	bl	8006674 <__aeabi_dcmpgt>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	f43f af7b 	beq.w	800a2d2 <_strtod_l+0x9da>
 800a3dc:	e4d6      	b.n	8009d8c <_strtod_l+0x494>
 800a3de:	bf00      	nop
 800a3e0:	94a03595 	.word	0x94a03595
 800a3e4:	3fdfffff 	.word	0x3fdfffff
 800a3e8:	35afe535 	.word	0x35afe535
 800a3ec:	3fe00000 	.word	0x3fe00000
 800a3f0:	000fffff 	.word	0x000fffff
 800a3f4:	7ff00000 	.word	0x7ff00000
 800a3f8:	7fefffff 	.word	0x7fefffff
 800a3fc:	3ff00000 	.word	0x3ff00000
 800a400:	7fe00000 	.word	0x7fe00000
 800a404:	7c9fffff 	.word	0x7c9fffff
 800a408:	3fe00000 	.word	0x3fe00000
 800a40c:	bff00000 	.word	0xbff00000
 800a410:	9b05      	ldr	r3, [sp, #20]
 800a412:	b313      	cbz	r3, 800a45a <_strtod_l+0xb62>
 800a414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a416:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a41a:	d81e      	bhi.n	800a45a <_strtod_l+0xb62>
 800a41c:	a326      	add	r3, pc, #152	; (adr r3, 800a4b8 <_strtod_l+0xbc0>)
 800a41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a422:	4620      	mov	r0, r4
 800a424:	4629      	mov	r1, r5
 800a426:	f7fc f911 	bl	800664c <__aeabi_dcmple>
 800a42a:	b190      	cbz	r0, 800a452 <_strtod_l+0xb5a>
 800a42c:	4629      	mov	r1, r5
 800a42e:	4620      	mov	r0, r4
 800a430:	f7fc f968 	bl	8006704 <__aeabi_d2uiz>
 800a434:	2801      	cmp	r0, #1
 800a436:	bf38      	it	cc
 800a438:	2001      	movcc	r0, #1
 800a43a:	f7fb fe11 	bl	8006060 <__aeabi_ui2d>
 800a43e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a440:	4604      	mov	r4, r0
 800a442:	460d      	mov	r5, r1
 800a444:	b9d3      	cbnz	r3, 800a47c <_strtod_l+0xb84>
 800a446:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a44a:	9012      	str	r0, [sp, #72]	; 0x48
 800a44c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a44e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a452:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a454:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a458:	1a9f      	subs	r7, r3, r2
 800a45a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a45e:	f001 fe4d 	bl	800c0fc <__ulp>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	4630      	mov	r0, r6
 800a468:	4639      	mov	r1, r7
 800a46a:	f7fb fe73 	bl	8006154 <__aeabi_dmul>
 800a46e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a472:	f7fb fcb9 	bl	8005de8 <__adddf3>
 800a476:	4680      	mov	r8, r0
 800a478:	4689      	mov	r9, r1
 800a47a:	e77e      	b.n	800a37a <_strtod_l+0xa82>
 800a47c:	4602      	mov	r2, r0
 800a47e:	460b      	mov	r3, r1
 800a480:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a484:	e7e3      	b.n	800a44e <_strtod_l+0xb56>
 800a486:	a30e      	add	r3, pc, #56	; (adr r3, 800a4c0 <_strtod_l+0xbc8>)
 800a488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48c:	f7fc f8d4 	bl	8006638 <__aeabi_dcmplt>
 800a490:	e7a1      	b.n	800a3d6 <_strtod_l+0xade>
 800a492:	2300      	movs	r3, #0
 800a494:	930a      	str	r3, [sp, #40]	; 0x28
 800a496:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a498:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a49a:	6013      	str	r3, [r2, #0]
 800a49c:	f7ff ba71 	b.w	8009982 <_strtod_l+0x8a>
 800a4a0:	2a65      	cmp	r2, #101	; 0x65
 800a4a2:	f43f ab63 	beq.w	8009b6c <_strtod_l+0x274>
 800a4a6:	2a45      	cmp	r2, #69	; 0x45
 800a4a8:	f43f ab60 	beq.w	8009b6c <_strtod_l+0x274>
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	f7ff bb95 	b.w	8009bdc <_strtod_l+0x2e4>
 800a4b2:	bf00      	nop
 800a4b4:	f3af 8000 	nop.w
 800a4b8:	ffc00000 	.word	0xffc00000
 800a4bc:	41dfffff 	.word	0x41dfffff
 800a4c0:	94a03595 	.word	0x94a03595
 800a4c4:	3fcfffff 	.word	0x3fcfffff

0800a4c8 <_strtod_r>:
 800a4c8:	4b01      	ldr	r3, [pc, #4]	; (800a4d0 <_strtod_r+0x8>)
 800a4ca:	f7ff ba15 	b.w	80098f8 <_strtod_l>
 800a4ce:	bf00      	nop
 800a4d0:	20000074 	.word	0x20000074

0800a4d4 <_strtol_l.constprop.0>:
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4da:	4680      	mov	r8, r0
 800a4dc:	d001      	beq.n	800a4e2 <_strtol_l.constprop.0+0xe>
 800a4de:	2b24      	cmp	r3, #36	; 0x24
 800a4e0:	d906      	bls.n	800a4f0 <_strtol_l.constprop.0+0x1c>
 800a4e2:	f7fe fb21 	bl	8008b28 <__errno>
 800a4e6:	2316      	movs	r3, #22
 800a4e8:	6003      	str	r3, [r0, #0]
 800a4ea:	2000      	movs	r0, #0
 800a4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4f0:	460d      	mov	r5, r1
 800a4f2:	4f35      	ldr	r7, [pc, #212]	; (800a5c8 <_strtol_l.constprop.0+0xf4>)
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4fa:	5de6      	ldrb	r6, [r4, r7]
 800a4fc:	f016 0608 	ands.w	r6, r6, #8
 800a500:	d1f8      	bne.n	800a4f4 <_strtol_l.constprop.0+0x20>
 800a502:	2c2d      	cmp	r4, #45	; 0x2d
 800a504:	d12f      	bne.n	800a566 <_strtol_l.constprop.0+0x92>
 800a506:	2601      	movs	r6, #1
 800a508:	782c      	ldrb	r4, [r5, #0]
 800a50a:	1c85      	adds	r5, r0, #2
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d057      	beq.n	800a5c0 <_strtol_l.constprop.0+0xec>
 800a510:	2b10      	cmp	r3, #16
 800a512:	d109      	bne.n	800a528 <_strtol_l.constprop.0+0x54>
 800a514:	2c30      	cmp	r4, #48	; 0x30
 800a516:	d107      	bne.n	800a528 <_strtol_l.constprop.0+0x54>
 800a518:	7828      	ldrb	r0, [r5, #0]
 800a51a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a51e:	2858      	cmp	r0, #88	; 0x58
 800a520:	d149      	bne.n	800a5b6 <_strtol_l.constprop.0+0xe2>
 800a522:	2310      	movs	r3, #16
 800a524:	786c      	ldrb	r4, [r5, #1]
 800a526:	3502      	adds	r5, #2
 800a528:	2700      	movs	r7, #0
 800a52a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a52e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a532:	fbbe f9f3 	udiv	r9, lr, r3
 800a536:	4638      	mov	r0, r7
 800a538:	fb03 ea19 	mls	sl, r3, r9, lr
 800a53c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a540:	f1bc 0f09 	cmp.w	ip, #9
 800a544:	d814      	bhi.n	800a570 <_strtol_l.constprop.0+0x9c>
 800a546:	4664      	mov	r4, ip
 800a548:	42a3      	cmp	r3, r4
 800a54a:	dd22      	ble.n	800a592 <_strtol_l.constprop.0+0xbe>
 800a54c:	2f00      	cmp	r7, #0
 800a54e:	db1d      	blt.n	800a58c <_strtol_l.constprop.0+0xb8>
 800a550:	4581      	cmp	r9, r0
 800a552:	d31b      	bcc.n	800a58c <_strtol_l.constprop.0+0xb8>
 800a554:	d101      	bne.n	800a55a <_strtol_l.constprop.0+0x86>
 800a556:	45a2      	cmp	sl, r4
 800a558:	db18      	blt.n	800a58c <_strtol_l.constprop.0+0xb8>
 800a55a:	2701      	movs	r7, #1
 800a55c:	fb00 4003 	mla	r0, r0, r3, r4
 800a560:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a564:	e7ea      	b.n	800a53c <_strtol_l.constprop.0+0x68>
 800a566:	2c2b      	cmp	r4, #43	; 0x2b
 800a568:	bf04      	itt	eq
 800a56a:	782c      	ldrbeq	r4, [r5, #0]
 800a56c:	1c85      	addeq	r5, r0, #2
 800a56e:	e7cd      	b.n	800a50c <_strtol_l.constprop.0+0x38>
 800a570:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a574:	f1bc 0f19 	cmp.w	ip, #25
 800a578:	d801      	bhi.n	800a57e <_strtol_l.constprop.0+0xaa>
 800a57a:	3c37      	subs	r4, #55	; 0x37
 800a57c:	e7e4      	b.n	800a548 <_strtol_l.constprop.0+0x74>
 800a57e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a582:	f1bc 0f19 	cmp.w	ip, #25
 800a586:	d804      	bhi.n	800a592 <_strtol_l.constprop.0+0xbe>
 800a588:	3c57      	subs	r4, #87	; 0x57
 800a58a:	e7dd      	b.n	800a548 <_strtol_l.constprop.0+0x74>
 800a58c:	f04f 37ff 	mov.w	r7, #4294967295
 800a590:	e7e6      	b.n	800a560 <_strtol_l.constprop.0+0x8c>
 800a592:	2f00      	cmp	r7, #0
 800a594:	da07      	bge.n	800a5a6 <_strtol_l.constprop.0+0xd2>
 800a596:	2322      	movs	r3, #34	; 0x22
 800a598:	4670      	mov	r0, lr
 800a59a:	f8c8 3000 	str.w	r3, [r8]
 800a59e:	2a00      	cmp	r2, #0
 800a5a0:	d0a4      	beq.n	800a4ec <_strtol_l.constprop.0+0x18>
 800a5a2:	1e69      	subs	r1, r5, #1
 800a5a4:	e005      	b.n	800a5b2 <_strtol_l.constprop.0+0xde>
 800a5a6:	b106      	cbz	r6, 800a5aa <_strtol_l.constprop.0+0xd6>
 800a5a8:	4240      	negs	r0, r0
 800a5aa:	2a00      	cmp	r2, #0
 800a5ac:	d09e      	beq.n	800a4ec <_strtol_l.constprop.0+0x18>
 800a5ae:	2f00      	cmp	r7, #0
 800a5b0:	d1f7      	bne.n	800a5a2 <_strtol_l.constprop.0+0xce>
 800a5b2:	6011      	str	r1, [r2, #0]
 800a5b4:	e79a      	b.n	800a4ec <_strtol_l.constprop.0+0x18>
 800a5b6:	2430      	movs	r4, #48	; 0x30
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d1b5      	bne.n	800a528 <_strtol_l.constprop.0+0x54>
 800a5bc:	2308      	movs	r3, #8
 800a5be:	e7b3      	b.n	800a528 <_strtol_l.constprop.0+0x54>
 800a5c0:	2c30      	cmp	r4, #48	; 0x30
 800a5c2:	d0a9      	beq.n	800a518 <_strtol_l.constprop.0+0x44>
 800a5c4:	230a      	movs	r3, #10
 800a5c6:	e7af      	b.n	800a528 <_strtol_l.constprop.0+0x54>
 800a5c8:	0801ee81 	.word	0x0801ee81

0800a5cc <_strtol_r>:
 800a5cc:	f7ff bf82 	b.w	800a4d4 <_strtol_l.constprop.0>

0800a5d0 <strtol>:
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	460a      	mov	r2, r1
 800a5d4:	4601      	mov	r1, r0
 800a5d6:	4802      	ldr	r0, [pc, #8]	; (800a5e0 <strtol+0x10>)
 800a5d8:	6800      	ldr	r0, [r0, #0]
 800a5da:	f7ff bf7b 	b.w	800a4d4 <_strtol_l.constprop.0>
 800a5de:	bf00      	nop
 800a5e0:	2000000c 	.word	0x2000000c

0800a5e4 <quorem>:
 800a5e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e8:	6903      	ldr	r3, [r0, #16]
 800a5ea:	690c      	ldr	r4, [r1, #16]
 800a5ec:	4607      	mov	r7, r0
 800a5ee:	42a3      	cmp	r3, r4
 800a5f0:	f2c0 8082 	blt.w	800a6f8 <quorem+0x114>
 800a5f4:	3c01      	subs	r4, #1
 800a5f6:	f100 0514 	add.w	r5, r0, #20
 800a5fa:	f101 0814 	add.w	r8, r1, #20
 800a5fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a602:	9301      	str	r3, [sp, #4]
 800a604:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a608:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a60c:	3301      	adds	r3, #1
 800a60e:	429a      	cmp	r2, r3
 800a610:	fbb2 f6f3 	udiv	r6, r2, r3
 800a614:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a618:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a61c:	d331      	bcc.n	800a682 <quorem+0x9e>
 800a61e:	f04f 0e00 	mov.w	lr, #0
 800a622:	4640      	mov	r0, r8
 800a624:	46ac      	mov	ip, r5
 800a626:	46f2      	mov	sl, lr
 800a628:	f850 2b04 	ldr.w	r2, [r0], #4
 800a62c:	b293      	uxth	r3, r2
 800a62e:	fb06 e303 	mla	r3, r6, r3, lr
 800a632:	0c12      	lsrs	r2, r2, #16
 800a634:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a638:	b29b      	uxth	r3, r3
 800a63a:	fb06 e202 	mla	r2, r6, r2, lr
 800a63e:	ebaa 0303 	sub.w	r3, sl, r3
 800a642:	f8dc a000 	ldr.w	sl, [ip]
 800a646:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a64a:	fa1f fa8a 	uxth.w	sl, sl
 800a64e:	4453      	add	r3, sl
 800a650:	f8dc a000 	ldr.w	sl, [ip]
 800a654:	b292      	uxth	r2, r2
 800a656:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a65a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a65e:	b29b      	uxth	r3, r3
 800a660:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a664:	4581      	cmp	r9, r0
 800a666:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a66a:	f84c 3b04 	str.w	r3, [ip], #4
 800a66e:	d2db      	bcs.n	800a628 <quorem+0x44>
 800a670:	f855 300b 	ldr.w	r3, [r5, fp]
 800a674:	b92b      	cbnz	r3, 800a682 <quorem+0x9e>
 800a676:	9b01      	ldr	r3, [sp, #4]
 800a678:	3b04      	subs	r3, #4
 800a67a:	429d      	cmp	r5, r3
 800a67c:	461a      	mov	r2, r3
 800a67e:	d32f      	bcc.n	800a6e0 <quorem+0xfc>
 800a680:	613c      	str	r4, [r7, #16]
 800a682:	4638      	mov	r0, r7
 800a684:	f001 fc92 	bl	800bfac <__mcmp>
 800a688:	2800      	cmp	r0, #0
 800a68a:	db25      	blt.n	800a6d8 <quorem+0xf4>
 800a68c:	4628      	mov	r0, r5
 800a68e:	f04f 0c00 	mov.w	ip, #0
 800a692:	3601      	adds	r6, #1
 800a694:	f858 1b04 	ldr.w	r1, [r8], #4
 800a698:	f8d0 e000 	ldr.w	lr, [r0]
 800a69c:	b28b      	uxth	r3, r1
 800a69e:	ebac 0303 	sub.w	r3, ip, r3
 800a6a2:	fa1f f28e 	uxth.w	r2, lr
 800a6a6:	4413      	add	r3, r2
 800a6a8:	0c0a      	lsrs	r2, r1, #16
 800a6aa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a6ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6b8:	45c1      	cmp	r9, r8
 800a6ba:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a6be:	f840 3b04 	str.w	r3, [r0], #4
 800a6c2:	d2e7      	bcs.n	800a694 <quorem+0xb0>
 800a6c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6cc:	b922      	cbnz	r2, 800a6d8 <quorem+0xf4>
 800a6ce:	3b04      	subs	r3, #4
 800a6d0:	429d      	cmp	r5, r3
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	d30a      	bcc.n	800a6ec <quorem+0x108>
 800a6d6:	613c      	str	r4, [r7, #16]
 800a6d8:	4630      	mov	r0, r6
 800a6da:	b003      	add	sp, #12
 800a6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e0:	6812      	ldr	r2, [r2, #0]
 800a6e2:	3b04      	subs	r3, #4
 800a6e4:	2a00      	cmp	r2, #0
 800a6e6:	d1cb      	bne.n	800a680 <quorem+0x9c>
 800a6e8:	3c01      	subs	r4, #1
 800a6ea:	e7c6      	b.n	800a67a <quorem+0x96>
 800a6ec:	6812      	ldr	r2, [r2, #0]
 800a6ee:	3b04      	subs	r3, #4
 800a6f0:	2a00      	cmp	r2, #0
 800a6f2:	d1f0      	bne.n	800a6d6 <quorem+0xf2>
 800a6f4:	3c01      	subs	r4, #1
 800a6f6:	e7eb      	b.n	800a6d0 <quorem+0xec>
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	e7ee      	b.n	800a6da <quorem+0xf6>
 800a6fc:	0000      	movs	r0, r0
	...

0800a700 <_dtoa_r>:
 800a700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a704:	4616      	mov	r6, r2
 800a706:	461f      	mov	r7, r3
 800a708:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a70a:	b099      	sub	sp, #100	; 0x64
 800a70c:	4605      	mov	r5, r0
 800a70e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a712:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a716:	b974      	cbnz	r4, 800a736 <_dtoa_r+0x36>
 800a718:	2010      	movs	r0, #16
 800a71a:	f001 f949 	bl	800b9b0 <malloc>
 800a71e:	4602      	mov	r2, r0
 800a720:	6268      	str	r0, [r5, #36]	; 0x24
 800a722:	b920      	cbnz	r0, 800a72e <_dtoa_r+0x2e>
 800a724:	21ea      	movs	r1, #234	; 0xea
 800a726:	4ba8      	ldr	r3, [pc, #672]	; (800a9c8 <_dtoa_r+0x2c8>)
 800a728:	48a8      	ldr	r0, [pc, #672]	; (800a9cc <_dtoa_r+0x2cc>)
 800a72a:	f002 f8b3 	bl	800c894 <__assert_func>
 800a72e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a732:	6004      	str	r4, [r0, #0]
 800a734:	60c4      	str	r4, [r0, #12]
 800a736:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a738:	6819      	ldr	r1, [r3, #0]
 800a73a:	b151      	cbz	r1, 800a752 <_dtoa_r+0x52>
 800a73c:	685a      	ldr	r2, [r3, #4]
 800a73e:	2301      	movs	r3, #1
 800a740:	4093      	lsls	r3, r2
 800a742:	604a      	str	r2, [r1, #4]
 800a744:	608b      	str	r3, [r1, #8]
 800a746:	4628      	mov	r0, r5
 800a748:	f001 f9a8 	bl	800ba9c <_Bfree>
 800a74c:	2200      	movs	r2, #0
 800a74e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a750:	601a      	str	r2, [r3, #0]
 800a752:	1e3b      	subs	r3, r7, #0
 800a754:	bfaf      	iteee	ge
 800a756:	2300      	movge	r3, #0
 800a758:	2201      	movlt	r2, #1
 800a75a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a75e:	9305      	strlt	r3, [sp, #20]
 800a760:	bfa8      	it	ge
 800a762:	f8c8 3000 	strge.w	r3, [r8]
 800a766:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a76a:	4b99      	ldr	r3, [pc, #612]	; (800a9d0 <_dtoa_r+0x2d0>)
 800a76c:	bfb8      	it	lt
 800a76e:	f8c8 2000 	strlt.w	r2, [r8]
 800a772:	ea33 0309 	bics.w	r3, r3, r9
 800a776:	d119      	bne.n	800a7ac <_dtoa_r+0xac>
 800a778:	f242 730f 	movw	r3, #9999	; 0x270f
 800a77c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a77e:	6013      	str	r3, [r2, #0]
 800a780:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a784:	4333      	orrs	r3, r6
 800a786:	f000 857f 	beq.w	800b288 <_dtoa_r+0xb88>
 800a78a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a78c:	b953      	cbnz	r3, 800a7a4 <_dtoa_r+0xa4>
 800a78e:	4b91      	ldr	r3, [pc, #580]	; (800a9d4 <_dtoa_r+0x2d4>)
 800a790:	e022      	b.n	800a7d8 <_dtoa_r+0xd8>
 800a792:	4b91      	ldr	r3, [pc, #580]	; (800a9d8 <_dtoa_r+0x2d8>)
 800a794:	9303      	str	r3, [sp, #12]
 800a796:	3308      	adds	r3, #8
 800a798:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a79a:	6013      	str	r3, [r2, #0]
 800a79c:	9803      	ldr	r0, [sp, #12]
 800a79e:	b019      	add	sp, #100	; 0x64
 800a7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a4:	4b8b      	ldr	r3, [pc, #556]	; (800a9d4 <_dtoa_r+0x2d4>)
 800a7a6:	9303      	str	r3, [sp, #12]
 800a7a8:	3303      	adds	r3, #3
 800a7aa:	e7f5      	b.n	800a798 <_dtoa_r+0x98>
 800a7ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a7b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a7b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	f7fb ff32 	bl	8006624 <__aeabi_dcmpeq>
 800a7c0:	4680      	mov	r8, r0
 800a7c2:	b158      	cbz	r0, 800a7dc <_dtoa_r+0xdc>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a7c8:	6013      	str	r3, [r2, #0]
 800a7ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f000 8558 	beq.w	800b282 <_dtoa_r+0xb82>
 800a7d2:	4882      	ldr	r0, [pc, #520]	; (800a9dc <_dtoa_r+0x2dc>)
 800a7d4:	6018      	str	r0, [r3, #0]
 800a7d6:	1e43      	subs	r3, r0, #1
 800a7d8:	9303      	str	r3, [sp, #12]
 800a7da:	e7df      	b.n	800a79c <_dtoa_r+0x9c>
 800a7dc:	ab16      	add	r3, sp, #88	; 0x58
 800a7de:	9301      	str	r3, [sp, #4]
 800a7e0:	ab17      	add	r3, sp, #92	; 0x5c
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	4628      	mov	r0, r5
 800a7e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a7ea:	f001 fd01 	bl	800c1f0 <__d2b>
 800a7ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a7f2:	4683      	mov	fp, r0
 800a7f4:	2c00      	cmp	r4, #0
 800a7f6:	d07f      	beq.n	800a8f8 <_dtoa_r+0x1f8>
 800a7f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7fe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a802:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a806:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a80a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a80e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a812:	2200      	movs	r2, #0
 800a814:	4b72      	ldr	r3, [pc, #456]	; (800a9e0 <_dtoa_r+0x2e0>)
 800a816:	f7fb fae5 	bl	8005de4 <__aeabi_dsub>
 800a81a:	a365      	add	r3, pc, #404	; (adr r3, 800a9b0 <_dtoa_r+0x2b0>)
 800a81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a820:	f7fb fc98 	bl	8006154 <__aeabi_dmul>
 800a824:	a364      	add	r3, pc, #400	; (adr r3, 800a9b8 <_dtoa_r+0x2b8>)
 800a826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82a:	f7fb fadd 	bl	8005de8 <__adddf3>
 800a82e:	4606      	mov	r6, r0
 800a830:	4620      	mov	r0, r4
 800a832:	460f      	mov	r7, r1
 800a834:	f7fb fc24 	bl	8006080 <__aeabi_i2d>
 800a838:	a361      	add	r3, pc, #388	; (adr r3, 800a9c0 <_dtoa_r+0x2c0>)
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	f7fb fc89 	bl	8006154 <__aeabi_dmul>
 800a842:	4602      	mov	r2, r0
 800a844:	460b      	mov	r3, r1
 800a846:	4630      	mov	r0, r6
 800a848:	4639      	mov	r1, r7
 800a84a:	f7fb facd 	bl	8005de8 <__adddf3>
 800a84e:	4606      	mov	r6, r0
 800a850:	460f      	mov	r7, r1
 800a852:	f7fb ff2f 	bl	80066b4 <__aeabi_d2iz>
 800a856:	2200      	movs	r2, #0
 800a858:	4682      	mov	sl, r0
 800a85a:	2300      	movs	r3, #0
 800a85c:	4630      	mov	r0, r6
 800a85e:	4639      	mov	r1, r7
 800a860:	f7fb feea 	bl	8006638 <__aeabi_dcmplt>
 800a864:	b148      	cbz	r0, 800a87a <_dtoa_r+0x17a>
 800a866:	4650      	mov	r0, sl
 800a868:	f7fb fc0a 	bl	8006080 <__aeabi_i2d>
 800a86c:	4632      	mov	r2, r6
 800a86e:	463b      	mov	r3, r7
 800a870:	f7fb fed8 	bl	8006624 <__aeabi_dcmpeq>
 800a874:	b908      	cbnz	r0, 800a87a <_dtoa_r+0x17a>
 800a876:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a87a:	f1ba 0f16 	cmp.w	sl, #22
 800a87e:	d858      	bhi.n	800a932 <_dtoa_r+0x232>
 800a880:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a884:	4b57      	ldr	r3, [pc, #348]	; (800a9e4 <_dtoa_r+0x2e4>)
 800a886:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88e:	f7fb fed3 	bl	8006638 <__aeabi_dcmplt>
 800a892:	2800      	cmp	r0, #0
 800a894:	d04f      	beq.n	800a936 <_dtoa_r+0x236>
 800a896:	2300      	movs	r3, #0
 800a898:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a89c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a89e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a8a0:	1b1c      	subs	r4, r3, r4
 800a8a2:	1e63      	subs	r3, r4, #1
 800a8a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8a6:	bf49      	itett	mi
 800a8a8:	f1c4 0301 	rsbmi	r3, r4, #1
 800a8ac:	2300      	movpl	r3, #0
 800a8ae:	9306      	strmi	r3, [sp, #24]
 800a8b0:	2300      	movmi	r3, #0
 800a8b2:	bf54      	ite	pl
 800a8b4:	9306      	strpl	r3, [sp, #24]
 800a8b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a8b8:	f1ba 0f00 	cmp.w	sl, #0
 800a8bc:	db3d      	blt.n	800a93a <_dtoa_r+0x23a>
 800a8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8c0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a8c4:	4453      	add	r3, sl
 800a8c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	930a      	str	r3, [sp, #40]	; 0x28
 800a8cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8ce:	2b09      	cmp	r3, #9
 800a8d0:	f200 808c 	bhi.w	800a9ec <_dtoa_r+0x2ec>
 800a8d4:	2b05      	cmp	r3, #5
 800a8d6:	bfc4      	itt	gt
 800a8d8:	3b04      	subgt	r3, #4
 800a8da:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a8dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8de:	bfc8      	it	gt
 800a8e0:	2400      	movgt	r4, #0
 800a8e2:	f1a3 0302 	sub.w	r3, r3, #2
 800a8e6:	bfd8      	it	le
 800a8e8:	2401      	movle	r4, #1
 800a8ea:	2b03      	cmp	r3, #3
 800a8ec:	f200 808a 	bhi.w	800aa04 <_dtoa_r+0x304>
 800a8f0:	e8df f003 	tbb	[pc, r3]
 800a8f4:	5b4d4f2d 	.word	0x5b4d4f2d
 800a8f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a8fc:	441c      	add	r4, r3
 800a8fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a902:	2b20      	cmp	r3, #32
 800a904:	bfc3      	ittte	gt
 800a906:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a90a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a90e:	fa09 f303 	lslgt.w	r3, r9, r3
 800a912:	f1c3 0320 	rsble	r3, r3, #32
 800a916:	bfc6      	itte	gt
 800a918:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a91c:	4318      	orrgt	r0, r3
 800a91e:	fa06 f003 	lslle.w	r0, r6, r3
 800a922:	f7fb fb9d 	bl	8006060 <__aeabi_ui2d>
 800a926:	2301      	movs	r3, #1
 800a928:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a92c:	3c01      	subs	r4, #1
 800a92e:	9313      	str	r3, [sp, #76]	; 0x4c
 800a930:	e76f      	b.n	800a812 <_dtoa_r+0x112>
 800a932:	2301      	movs	r3, #1
 800a934:	e7b2      	b.n	800a89c <_dtoa_r+0x19c>
 800a936:	900f      	str	r0, [sp, #60]	; 0x3c
 800a938:	e7b1      	b.n	800a89e <_dtoa_r+0x19e>
 800a93a:	9b06      	ldr	r3, [sp, #24]
 800a93c:	eba3 030a 	sub.w	r3, r3, sl
 800a940:	9306      	str	r3, [sp, #24]
 800a942:	f1ca 0300 	rsb	r3, sl, #0
 800a946:	930a      	str	r3, [sp, #40]	; 0x28
 800a948:	2300      	movs	r3, #0
 800a94a:	930e      	str	r3, [sp, #56]	; 0x38
 800a94c:	e7be      	b.n	800a8cc <_dtoa_r+0x1cc>
 800a94e:	2300      	movs	r3, #0
 800a950:	930b      	str	r3, [sp, #44]	; 0x2c
 800a952:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a954:	2b00      	cmp	r3, #0
 800a956:	dc58      	bgt.n	800aa0a <_dtoa_r+0x30a>
 800a958:	f04f 0901 	mov.w	r9, #1
 800a95c:	464b      	mov	r3, r9
 800a95e:	f8cd 9020 	str.w	r9, [sp, #32]
 800a962:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a966:	2200      	movs	r2, #0
 800a968:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a96a:	6042      	str	r2, [r0, #4]
 800a96c:	2204      	movs	r2, #4
 800a96e:	f102 0614 	add.w	r6, r2, #20
 800a972:	429e      	cmp	r6, r3
 800a974:	6841      	ldr	r1, [r0, #4]
 800a976:	d94e      	bls.n	800aa16 <_dtoa_r+0x316>
 800a978:	4628      	mov	r0, r5
 800a97a:	f001 f84f 	bl	800ba1c <_Balloc>
 800a97e:	9003      	str	r0, [sp, #12]
 800a980:	2800      	cmp	r0, #0
 800a982:	d14c      	bne.n	800aa1e <_dtoa_r+0x31e>
 800a984:	4602      	mov	r2, r0
 800a986:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a98a:	4b17      	ldr	r3, [pc, #92]	; (800a9e8 <_dtoa_r+0x2e8>)
 800a98c:	e6cc      	b.n	800a728 <_dtoa_r+0x28>
 800a98e:	2301      	movs	r3, #1
 800a990:	e7de      	b.n	800a950 <_dtoa_r+0x250>
 800a992:	2300      	movs	r3, #0
 800a994:	930b      	str	r3, [sp, #44]	; 0x2c
 800a996:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a998:	eb0a 0903 	add.w	r9, sl, r3
 800a99c:	f109 0301 	add.w	r3, r9, #1
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	9308      	str	r3, [sp, #32]
 800a9a4:	bfb8      	it	lt
 800a9a6:	2301      	movlt	r3, #1
 800a9a8:	e7dd      	b.n	800a966 <_dtoa_r+0x266>
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e7f2      	b.n	800a994 <_dtoa_r+0x294>
 800a9ae:	bf00      	nop
 800a9b0:	636f4361 	.word	0x636f4361
 800a9b4:	3fd287a7 	.word	0x3fd287a7
 800a9b8:	8b60c8b3 	.word	0x8b60c8b3
 800a9bc:	3fc68a28 	.word	0x3fc68a28
 800a9c0:	509f79fb 	.word	0x509f79fb
 800a9c4:	3fd34413 	.word	0x3fd34413
 800a9c8:	0801ef8e 	.word	0x0801ef8e
 800a9cc:	0801efa5 	.word	0x0801efa5
 800a9d0:	7ff00000 	.word	0x7ff00000
 800a9d4:	0801ef8a 	.word	0x0801ef8a
 800a9d8:	0801ef81 	.word	0x0801ef81
 800a9dc:	0801ee05 	.word	0x0801ee05
 800a9e0:	3ff80000 	.word	0x3ff80000
 800a9e4:	0801f110 	.word	0x0801f110
 800a9e8:	0801f000 	.word	0x0801f000
 800a9ec:	2401      	movs	r4, #1
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	940b      	str	r4, [sp, #44]	; 0x2c
 800a9f2:	9322      	str	r3, [sp, #136]	; 0x88
 800a9f4:	f04f 39ff 	mov.w	r9, #4294967295
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	2312      	movs	r3, #18
 800a9fc:	f8cd 9020 	str.w	r9, [sp, #32]
 800aa00:	9223      	str	r2, [sp, #140]	; 0x8c
 800aa02:	e7b0      	b.n	800a966 <_dtoa_r+0x266>
 800aa04:	2301      	movs	r3, #1
 800aa06:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa08:	e7f4      	b.n	800a9f4 <_dtoa_r+0x2f4>
 800aa0a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800aa0e:	464b      	mov	r3, r9
 800aa10:	f8cd 9020 	str.w	r9, [sp, #32]
 800aa14:	e7a7      	b.n	800a966 <_dtoa_r+0x266>
 800aa16:	3101      	adds	r1, #1
 800aa18:	6041      	str	r1, [r0, #4]
 800aa1a:	0052      	lsls	r2, r2, #1
 800aa1c:	e7a7      	b.n	800a96e <_dtoa_r+0x26e>
 800aa1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa20:	9a03      	ldr	r2, [sp, #12]
 800aa22:	601a      	str	r2, [r3, #0]
 800aa24:	9b08      	ldr	r3, [sp, #32]
 800aa26:	2b0e      	cmp	r3, #14
 800aa28:	f200 80a8 	bhi.w	800ab7c <_dtoa_r+0x47c>
 800aa2c:	2c00      	cmp	r4, #0
 800aa2e:	f000 80a5 	beq.w	800ab7c <_dtoa_r+0x47c>
 800aa32:	f1ba 0f00 	cmp.w	sl, #0
 800aa36:	dd34      	ble.n	800aaa2 <_dtoa_r+0x3a2>
 800aa38:	4a9a      	ldr	r2, [pc, #616]	; (800aca4 <_dtoa_r+0x5a4>)
 800aa3a:	f00a 030f 	and.w	r3, sl, #15
 800aa3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aa42:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800aa46:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800aa4e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800aa52:	d016      	beq.n	800aa82 <_dtoa_r+0x382>
 800aa54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa58:	4b93      	ldr	r3, [pc, #588]	; (800aca8 <_dtoa_r+0x5a8>)
 800aa5a:	2703      	movs	r7, #3
 800aa5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa60:	f7fb fca2 	bl	80063a8 <__aeabi_ddiv>
 800aa64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa68:	f004 040f 	and.w	r4, r4, #15
 800aa6c:	4e8e      	ldr	r6, [pc, #568]	; (800aca8 <_dtoa_r+0x5a8>)
 800aa6e:	b954      	cbnz	r4, 800aa86 <_dtoa_r+0x386>
 800aa70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aa74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa78:	f7fb fc96 	bl	80063a8 <__aeabi_ddiv>
 800aa7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa80:	e029      	b.n	800aad6 <_dtoa_r+0x3d6>
 800aa82:	2702      	movs	r7, #2
 800aa84:	e7f2      	b.n	800aa6c <_dtoa_r+0x36c>
 800aa86:	07e1      	lsls	r1, r4, #31
 800aa88:	d508      	bpl.n	800aa9c <_dtoa_r+0x39c>
 800aa8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa92:	f7fb fb5f 	bl	8006154 <__aeabi_dmul>
 800aa96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aa9a:	3701      	adds	r7, #1
 800aa9c:	1064      	asrs	r4, r4, #1
 800aa9e:	3608      	adds	r6, #8
 800aaa0:	e7e5      	b.n	800aa6e <_dtoa_r+0x36e>
 800aaa2:	f000 80a5 	beq.w	800abf0 <_dtoa_r+0x4f0>
 800aaa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aaaa:	f1ca 0400 	rsb	r4, sl, #0
 800aaae:	4b7d      	ldr	r3, [pc, #500]	; (800aca4 <_dtoa_r+0x5a4>)
 800aab0:	f004 020f 	and.w	r2, r4, #15
 800aab4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabc:	f7fb fb4a 	bl	8006154 <__aeabi_dmul>
 800aac0:	2702      	movs	r7, #2
 800aac2:	2300      	movs	r3, #0
 800aac4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aac8:	4e77      	ldr	r6, [pc, #476]	; (800aca8 <_dtoa_r+0x5a8>)
 800aaca:	1124      	asrs	r4, r4, #4
 800aacc:	2c00      	cmp	r4, #0
 800aace:	f040 8084 	bne.w	800abda <_dtoa_r+0x4da>
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d1d2      	bne.n	800aa7c <_dtoa_r+0x37c>
 800aad6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f000 808b 	beq.w	800abf4 <_dtoa_r+0x4f4>
 800aade:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800aae2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800aae6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aaea:	2200      	movs	r2, #0
 800aaec:	4b6f      	ldr	r3, [pc, #444]	; (800acac <_dtoa_r+0x5ac>)
 800aaee:	f7fb fda3 	bl	8006638 <__aeabi_dcmplt>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	d07e      	beq.n	800abf4 <_dtoa_r+0x4f4>
 800aaf6:	9b08      	ldr	r3, [sp, #32]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d07b      	beq.n	800abf4 <_dtoa_r+0x4f4>
 800aafc:	f1b9 0f00 	cmp.w	r9, #0
 800ab00:	dd38      	ble.n	800ab74 <_dtoa_r+0x474>
 800ab02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab06:	2200      	movs	r2, #0
 800ab08:	4b69      	ldr	r3, [pc, #420]	; (800acb0 <_dtoa_r+0x5b0>)
 800ab0a:	f7fb fb23 	bl	8006154 <__aeabi_dmul>
 800ab0e:	464c      	mov	r4, r9
 800ab10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab14:	f10a 38ff 	add.w	r8, sl, #4294967295
 800ab18:	3701      	adds	r7, #1
 800ab1a:	4638      	mov	r0, r7
 800ab1c:	f7fb fab0 	bl	8006080 <__aeabi_i2d>
 800ab20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab24:	f7fb fb16 	bl	8006154 <__aeabi_dmul>
 800ab28:	2200      	movs	r2, #0
 800ab2a:	4b62      	ldr	r3, [pc, #392]	; (800acb4 <_dtoa_r+0x5b4>)
 800ab2c:	f7fb f95c 	bl	8005de8 <__adddf3>
 800ab30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ab34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ab38:	9611      	str	r6, [sp, #68]	; 0x44
 800ab3a:	2c00      	cmp	r4, #0
 800ab3c:	d15d      	bne.n	800abfa <_dtoa_r+0x4fa>
 800ab3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab42:	2200      	movs	r2, #0
 800ab44:	4b5c      	ldr	r3, [pc, #368]	; (800acb8 <_dtoa_r+0x5b8>)
 800ab46:	f7fb f94d 	bl	8005de4 <__aeabi_dsub>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab52:	4633      	mov	r3, r6
 800ab54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab56:	f7fb fd8d 	bl	8006674 <__aeabi_dcmpgt>
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	f040 829c 	bne.w	800b098 <_dtoa_r+0x998>
 800ab60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab66:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ab6a:	f7fb fd65 	bl	8006638 <__aeabi_dcmplt>
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	f040 8290 	bne.w	800b094 <_dtoa_r+0x994>
 800ab74:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ab78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ab7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f2c0 8152 	blt.w	800ae28 <_dtoa_r+0x728>
 800ab84:	f1ba 0f0e 	cmp.w	sl, #14
 800ab88:	f300 814e 	bgt.w	800ae28 <_dtoa_r+0x728>
 800ab8c:	4b45      	ldr	r3, [pc, #276]	; (800aca4 <_dtoa_r+0x5a4>)
 800ab8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab92:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab96:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ab9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f280 80db 	bge.w	800ad58 <_dtoa_r+0x658>
 800aba2:	9b08      	ldr	r3, [sp, #32]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f300 80d7 	bgt.w	800ad58 <_dtoa_r+0x658>
 800abaa:	f040 8272 	bne.w	800b092 <_dtoa_r+0x992>
 800abae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abb2:	2200      	movs	r2, #0
 800abb4:	4b40      	ldr	r3, [pc, #256]	; (800acb8 <_dtoa_r+0x5b8>)
 800abb6:	f7fb facd 	bl	8006154 <__aeabi_dmul>
 800abba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abbe:	f7fb fd4f 	bl	8006660 <__aeabi_dcmpge>
 800abc2:	9c08      	ldr	r4, [sp, #32]
 800abc4:	4626      	mov	r6, r4
 800abc6:	2800      	cmp	r0, #0
 800abc8:	f040 8248 	bne.w	800b05c <_dtoa_r+0x95c>
 800abcc:	2331      	movs	r3, #49	; 0x31
 800abce:	9f03      	ldr	r7, [sp, #12]
 800abd0:	f10a 0a01 	add.w	sl, sl, #1
 800abd4:	f807 3b01 	strb.w	r3, [r7], #1
 800abd8:	e244      	b.n	800b064 <_dtoa_r+0x964>
 800abda:	07e2      	lsls	r2, r4, #31
 800abdc:	d505      	bpl.n	800abea <_dtoa_r+0x4ea>
 800abde:	e9d6 2300 	ldrd	r2, r3, [r6]
 800abe2:	f7fb fab7 	bl	8006154 <__aeabi_dmul>
 800abe6:	2301      	movs	r3, #1
 800abe8:	3701      	adds	r7, #1
 800abea:	1064      	asrs	r4, r4, #1
 800abec:	3608      	adds	r6, #8
 800abee:	e76d      	b.n	800aacc <_dtoa_r+0x3cc>
 800abf0:	2702      	movs	r7, #2
 800abf2:	e770      	b.n	800aad6 <_dtoa_r+0x3d6>
 800abf4:	46d0      	mov	r8, sl
 800abf6:	9c08      	ldr	r4, [sp, #32]
 800abf8:	e78f      	b.n	800ab1a <_dtoa_r+0x41a>
 800abfa:	9903      	ldr	r1, [sp, #12]
 800abfc:	4b29      	ldr	r3, [pc, #164]	; (800aca4 <_dtoa_r+0x5a4>)
 800abfe:	4421      	add	r1, r4
 800ac00:	9112      	str	r1, [sp, #72]	; 0x48
 800ac02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac08:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ac0c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac10:	2900      	cmp	r1, #0
 800ac12:	d055      	beq.n	800acc0 <_dtoa_r+0x5c0>
 800ac14:	2000      	movs	r0, #0
 800ac16:	4929      	ldr	r1, [pc, #164]	; (800acbc <_dtoa_r+0x5bc>)
 800ac18:	f7fb fbc6 	bl	80063a8 <__aeabi_ddiv>
 800ac1c:	463b      	mov	r3, r7
 800ac1e:	4632      	mov	r2, r6
 800ac20:	f7fb f8e0 	bl	8005de4 <__aeabi_dsub>
 800ac24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ac28:	9f03      	ldr	r7, [sp, #12]
 800ac2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac2e:	f7fb fd41 	bl	80066b4 <__aeabi_d2iz>
 800ac32:	4604      	mov	r4, r0
 800ac34:	f7fb fa24 	bl	8006080 <__aeabi_i2d>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac40:	f7fb f8d0 	bl	8005de4 <__aeabi_dsub>
 800ac44:	4602      	mov	r2, r0
 800ac46:	460b      	mov	r3, r1
 800ac48:	3430      	adds	r4, #48	; 0x30
 800ac4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac52:	f807 4b01 	strb.w	r4, [r7], #1
 800ac56:	f7fb fcef 	bl	8006638 <__aeabi_dcmplt>
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	d174      	bne.n	800ad48 <_dtoa_r+0x648>
 800ac5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac62:	2000      	movs	r0, #0
 800ac64:	4911      	ldr	r1, [pc, #68]	; (800acac <_dtoa_r+0x5ac>)
 800ac66:	f7fb f8bd 	bl	8005de4 <__aeabi_dsub>
 800ac6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac6e:	f7fb fce3 	bl	8006638 <__aeabi_dcmplt>
 800ac72:	2800      	cmp	r0, #0
 800ac74:	f040 80b7 	bne.w	800ade6 <_dtoa_r+0x6e6>
 800ac78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac7a:	429f      	cmp	r7, r3
 800ac7c:	f43f af7a 	beq.w	800ab74 <_dtoa_r+0x474>
 800ac80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac84:	2200      	movs	r2, #0
 800ac86:	4b0a      	ldr	r3, [pc, #40]	; (800acb0 <_dtoa_r+0x5b0>)
 800ac88:	f7fb fa64 	bl	8006154 <__aeabi_dmul>
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ac92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac96:	4b06      	ldr	r3, [pc, #24]	; (800acb0 <_dtoa_r+0x5b0>)
 800ac98:	f7fb fa5c 	bl	8006154 <__aeabi_dmul>
 800ac9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aca0:	e7c3      	b.n	800ac2a <_dtoa_r+0x52a>
 800aca2:	bf00      	nop
 800aca4:	0801f110 	.word	0x0801f110
 800aca8:	0801f0e8 	.word	0x0801f0e8
 800acac:	3ff00000 	.word	0x3ff00000
 800acb0:	40240000 	.word	0x40240000
 800acb4:	401c0000 	.word	0x401c0000
 800acb8:	40140000 	.word	0x40140000
 800acbc:	3fe00000 	.word	0x3fe00000
 800acc0:	4630      	mov	r0, r6
 800acc2:	4639      	mov	r1, r7
 800acc4:	f7fb fa46 	bl	8006154 <__aeabi_dmul>
 800acc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800acca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800acce:	9c03      	ldr	r4, [sp, #12]
 800acd0:	9314      	str	r3, [sp, #80]	; 0x50
 800acd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acd6:	f7fb fced 	bl	80066b4 <__aeabi_d2iz>
 800acda:	9015      	str	r0, [sp, #84]	; 0x54
 800acdc:	f7fb f9d0 	bl	8006080 <__aeabi_i2d>
 800ace0:	4602      	mov	r2, r0
 800ace2:	460b      	mov	r3, r1
 800ace4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ace8:	f7fb f87c 	bl	8005de4 <__aeabi_dsub>
 800acec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acee:	4606      	mov	r6, r0
 800acf0:	3330      	adds	r3, #48	; 0x30
 800acf2:	f804 3b01 	strb.w	r3, [r4], #1
 800acf6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800acf8:	460f      	mov	r7, r1
 800acfa:	429c      	cmp	r4, r3
 800acfc:	f04f 0200 	mov.w	r2, #0
 800ad00:	d124      	bne.n	800ad4c <_dtoa_r+0x64c>
 800ad02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ad06:	4bb0      	ldr	r3, [pc, #704]	; (800afc8 <_dtoa_r+0x8c8>)
 800ad08:	f7fb f86e 	bl	8005de8 <__adddf3>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	460b      	mov	r3, r1
 800ad10:	4630      	mov	r0, r6
 800ad12:	4639      	mov	r1, r7
 800ad14:	f7fb fcae 	bl	8006674 <__aeabi_dcmpgt>
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d163      	bne.n	800ade4 <_dtoa_r+0x6e4>
 800ad1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad20:	2000      	movs	r0, #0
 800ad22:	49a9      	ldr	r1, [pc, #676]	; (800afc8 <_dtoa_r+0x8c8>)
 800ad24:	f7fb f85e 	bl	8005de4 <__aeabi_dsub>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	4639      	mov	r1, r7
 800ad30:	f7fb fc82 	bl	8006638 <__aeabi_dcmplt>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	f43f af1d 	beq.w	800ab74 <_dtoa_r+0x474>
 800ad3a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ad3c:	1e7b      	subs	r3, r7, #1
 800ad3e:	9314      	str	r3, [sp, #80]	; 0x50
 800ad40:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800ad44:	2b30      	cmp	r3, #48	; 0x30
 800ad46:	d0f8      	beq.n	800ad3a <_dtoa_r+0x63a>
 800ad48:	46c2      	mov	sl, r8
 800ad4a:	e03b      	b.n	800adc4 <_dtoa_r+0x6c4>
 800ad4c:	4b9f      	ldr	r3, [pc, #636]	; (800afcc <_dtoa_r+0x8cc>)
 800ad4e:	f7fb fa01 	bl	8006154 <__aeabi_dmul>
 800ad52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad56:	e7bc      	b.n	800acd2 <_dtoa_r+0x5d2>
 800ad58:	9f03      	ldr	r7, [sp, #12]
 800ad5a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ad5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad62:	4640      	mov	r0, r8
 800ad64:	4649      	mov	r1, r9
 800ad66:	f7fb fb1f 	bl	80063a8 <__aeabi_ddiv>
 800ad6a:	f7fb fca3 	bl	80066b4 <__aeabi_d2iz>
 800ad6e:	4604      	mov	r4, r0
 800ad70:	f7fb f986 	bl	8006080 <__aeabi_i2d>
 800ad74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad78:	f7fb f9ec 	bl	8006154 <__aeabi_dmul>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	460b      	mov	r3, r1
 800ad80:	4640      	mov	r0, r8
 800ad82:	4649      	mov	r1, r9
 800ad84:	f7fb f82e 	bl	8005de4 <__aeabi_dsub>
 800ad88:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800ad8c:	f807 6b01 	strb.w	r6, [r7], #1
 800ad90:	9e03      	ldr	r6, [sp, #12]
 800ad92:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ad96:	1bbe      	subs	r6, r7, r6
 800ad98:	45b4      	cmp	ip, r6
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	460b      	mov	r3, r1
 800ad9e:	d136      	bne.n	800ae0e <_dtoa_r+0x70e>
 800ada0:	f7fb f822 	bl	8005de8 <__adddf3>
 800ada4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ada8:	4680      	mov	r8, r0
 800adaa:	4689      	mov	r9, r1
 800adac:	f7fb fc62 	bl	8006674 <__aeabi_dcmpgt>
 800adb0:	bb58      	cbnz	r0, 800ae0a <_dtoa_r+0x70a>
 800adb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800adb6:	4640      	mov	r0, r8
 800adb8:	4649      	mov	r1, r9
 800adba:	f7fb fc33 	bl	8006624 <__aeabi_dcmpeq>
 800adbe:	b108      	cbz	r0, 800adc4 <_dtoa_r+0x6c4>
 800adc0:	07e1      	lsls	r1, r4, #31
 800adc2:	d422      	bmi.n	800ae0a <_dtoa_r+0x70a>
 800adc4:	4628      	mov	r0, r5
 800adc6:	4659      	mov	r1, fp
 800adc8:	f000 fe68 	bl	800ba9c <_Bfree>
 800adcc:	2300      	movs	r3, #0
 800adce:	703b      	strb	r3, [r7, #0]
 800add0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800add2:	f10a 0001 	add.w	r0, sl, #1
 800add6:	6018      	str	r0, [r3, #0]
 800add8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800adda:	2b00      	cmp	r3, #0
 800addc:	f43f acde 	beq.w	800a79c <_dtoa_r+0x9c>
 800ade0:	601f      	str	r7, [r3, #0]
 800ade2:	e4db      	b.n	800a79c <_dtoa_r+0x9c>
 800ade4:	4627      	mov	r7, r4
 800ade6:	463b      	mov	r3, r7
 800ade8:	461f      	mov	r7, r3
 800adea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adee:	2a39      	cmp	r2, #57	; 0x39
 800adf0:	d107      	bne.n	800ae02 <_dtoa_r+0x702>
 800adf2:	9a03      	ldr	r2, [sp, #12]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d1f7      	bne.n	800ade8 <_dtoa_r+0x6e8>
 800adf8:	2230      	movs	r2, #48	; 0x30
 800adfa:	9903      	ldr	r1, [sp, #12]
 800adfc:	f108 0801 	add.w	r8, r8, #1
 800ae00:	700a      	strb	r2, [r1, #0]
 800ae02:	781a      	ldrb	r2, [r3, #0]
 800ae04:	3201      	adds	r2, #1
 800ae06:	701a      	strb	r2, [r3, #0]
 800ae08:	e79e      	b.n	800ad48 <_dtoa_r+0x648>
 800ae0a:	46d0      	mov	r8, sl
 800ae0c:	e7eb      	b.n	800ade6 <_dtoa_r+0x6e6>
 800ae0e:	2200      	movs	r2, #0
 800ae10:	4b6e      	ldr	r3, [pc, #440]	; (800afcc <_dtoa_r+0x8cc>)
 800ae12:	f7fb f99f 	bl	8006154 <__aeabi_dmul>
 800ae16:	2200      	movs	r2, #0
 800ae18:	2300      	movs	r3, #0
 800ae1a:	4680      	mov	r8, r0
 800ae1c:	4689      	mov	r9, r1
 800ae1e:	f7fb fc01 	bl	8006624 <__aeabi_dcmpeq>
 800ae22:	2800      	cmp	r0, #0
 800ae24:	d09b      	beq.n	800ad5e <_dtoa_r+0x65e>
 800ae26:	e7cd      	b.n	800adc4 <_dtoa_r+0x6c4>
 800ae28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae2a:	2a00      	cmp	r2, #0
 800ae2c:	f000 80d0 	beq.w	800afd0 <_dtoa_r+0x8d0>
 800ae30:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ae32:	2a01      	cmp	r2, #1
 800ae34:	f300 80ae 	bgt.w	800af94 <_dtoa_r+0x894>
 800ae38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ae3a:	2a00      	cmp	r2, #0
 800ae3c:	f000 80a6 	beq.w	800af8c <_dtoa_r+0x88c>
 800ae40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ae46:	9f06      	ldr	r7, [sp, #24]
 800ae48:	9a06      	ldr	r2, [sp, #24]
 800ae4a:	2101      	movs	r1, #1
 800ae4c:	441a      	add	r2, r3
 800ae4e:	9206      	str	r2, [sp, #24]
 800ae50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae52:	4628      	mov	r0, r5
 800ae54:	441a      	add	r2, r3
 800ae56:	9209      	str	r2, [sp, #36]	; 0x24
 800ae58:	f000 ff20 	bl	800bc9c <__i2b>
 800ae5c:	4606      	mov	r6, r0
 800ae5e:	2f00      	cmp	r7, #0
 800ae60:	dd0c      	ble.n	800ae7c <_dtoa_r+0x77c>
 800ae62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	dd09      	ble.n	800ae7c <_dtoa_r+0x77c>
 800ae68:	42bb      	cmp	r3, r7
 800ae6a:	bfa8      	it	ge
 800ae6c:	463b      	movge	r3, r7
 800ae6e:	9a06      	ldr	r2, [sp, #24]
 800ae70:	1aff      	subs	r7, r7, r3
 800ae72:	1ad2      	subs	r2, r2, r3
 800ae74:	9206      	str	r2, [sp, #24]
 800ae76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae78:	1ad3      	subs	r3, r2, r3
 800ae7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae7e:	b1f3      	cbz	r3, 800aebe <_dtoa_r+0x7be>
 800ae80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f000 80a8 	beq.w	800afd8 <_dtoa_r+0x8d8>
 800ae88:	2c00      	cmp	r4, #0
 800ae8a:	dd10      	ble.n	800aeae <_dtoa_r+0x7ae>
 800ae8c:	4631      	mov	r1, r6
 800ae8e:	4622      	mov	r2, r4
 800ae90:	4628      	mov	r0, r5
 800ae92:	f000 ffc1 	bl	800be18 <__pow5mult>
 800ae96:	465a      	mov	r2, fp
 800ae98:	4601      	mov	r1, r0
 800ae9a:	4606      	mov	r6, r0
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	f000 ff13 	bl	800bcc8 <__multiply>
 800aea2:	4680      	mov	r8, r0
 800aea4:	4659      	mov	r1, fp
 800aea6:	4628      	mov	r0, r5
 800aea8:	f000 fdf8 	bl	800ba9c <_Bfree>
 800aeac:	46c3      	mov	fp, r8
 800aeae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeb0:	1b1a      	subs	r2, r3, r4
 800aeb2:	d004      	beq.n	800aebe <_dtoa_r+0x7be>
 800aeb4:	4659      	mov	r1, fp
 800aeb6:	4628      	mov	r0, r5
 800aeb8:	f000 ffae 	bl	800be18 <__pow5mult>
 800aebc:	4683      	mov	fp, r0
 800aebe:	2101      	movs	r1, #1
 800aec0:	4628      	mov	r0, r5
 800aec2:	f000 feeb 	bl	800bc9c <__i2b>
 800aec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aec8:	4604      	mov	r4, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f340 8086 	ble.w	800afdc <_dtoa_r+0x8dc>
 800aed0:	461a      	mov	r2, r3
 800aed2:	4601      	mov	r1, r0
 800aed4:	4628      	mov	r0, r5
 800aed6:	f000 ff9f 	bl	800be18 <__pow5mult>
 800aeda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aedc:	4604      	mov	r4, r0
 800aede:	2b01      	cmp	r3, #1
 800aee0:	dd7f      	ble.n	800afe2 <_dtoa_r+0x8e2>
 800aee2:	f04f 0800 	mov.w	r8, #0
 800aee6:	6923      	ldr	r3, [r4, #16]
 800aee8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aeec:	6918      	ldr	r0, [r3, #16]
 800aeee:	f000 fe87 	bl	800bc00 <__hi0bits>
 800aef2:	f1c0 0020 	rsb	r0, r0, #32
 800aef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aef8:	4418      	add	r0, r3
 800aefa:	f010 001f 	ands.w	r0, r0, #31
 800aefe:	f000 8092 	beq.w	800b026 <_dtoa_r+0x926>
 800af02:	f1c0 0320 	rsb	r3, r0, #32
 800af06:	2b04      	cmp	r3, #4
 800af08:	f340 808a 	ble.w	800b020 <_dtoa_r+0x920>
 800af0c:	f1c0 001c 	rsb	r0, r0, #28
 800af10:	9b06      	ldr	r3, [sp, #24]
 800af12:	4407      	add	r7, r0
 800af14:	4403      	add	r3, r0
 800af16:	9306      	str	r3, [sp, #24]
 800af18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af1a:	4403      	add	r3, r0
 800af1c:	9309      	str	r3, [sp, #36]	; 0x24
 800af1e:	9b06      	ldr	r3, [sp, #24]
 800af20:	2b00      	cmp	r3, #0
 800af22:	dd05      	ble.n	800af30 <_dtoa_r+0x830>
 800af24:	4659      	mov	r1, fp
 800af26:	461a      	mov	r2, r3
 800af28:	4628      	mov	r0, r5
 800af2a:	f000 ffcf 	bl	800becc <__lshift>
 800af2e:	4683      	mov	fp, r0
 800af30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af32:	2b00      	cmp	r3, #0
 800af34:	dd05      	ble.n	800af42 <_dtoa_r+0x842>
 800af36:	4621      	mov	r1, r4
 800af38:	461a      	mov	r2, r3
 800af3a:	4628      	mov	r0, r5
 800af3c:	f000 ffc6 	bl	800becc <__lshift>
 800af40:	4604      	mov	r4, r0
 800af42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af44:	2b00      	cmp	r3, #0
 800af46:	d070      	beq.n	800b02a <_dtoa_r+0x92a>
 800af48:	4621      	mov	r1, r4
 800af4a:	4658      	mov	r0, fp
 800af4c:	f001 f82e 	bl	800bfac <__mcmp>
 800af50:	2800      	cmp	r0, #0
 800af52:	da6a      	bge.n	800b02a <_dtoa_r+0x92a>
 800af54:	2300      	movs	r3, #0
 800af56:	4659      	mov	r1, fp
 800af58:	220a      	movs	r2, #10
 800af5a:	4628      	mov	r0, r5
 800af5c:	f000 fdc0 	bl	800bae0 <__multadd>
 800af60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af62:	4683      	mov	fp, r0
 800af64:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af68:	2b00      	cmp	r3, #0
 800af6a:	f000 8194 	beq.w	800b296 <_dtoa_r+0xb96>
 800af6e:	4631      	mov	r1, r6
 800af70:	2300      	movs	r3, #0
 800af72:	220a      	movs	r2, #10
 800af74:	4628      	mov	r0, r5
 800af76:	f000 fdb3 	bl	800bae0 <__multadd>
 800af7a:	f1b9 0f00 	cmp.w	r9, #0
 800af7e:	4606      	mov	r6, r0
 800af80:	f300 8093 	bgt.w	800b0aa <_dtoa_r+0x9aa>
 800af84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af86:	2b02      	cmp	r3, #2
 800af88:	dc57      	bgt.n	800b03a <_dtoa_r+0x93a>
 800af8a:	e08e      	b.n	800b0aa <_dtoa_r+0x9aa>
 800af8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800af8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af92:	e757      	b.n	800ae44 <_dtoa_r+0x744>
 800af94:	9b08      	ldr	r3, [sp, #32]
 800af96:	1e5c      	subs	r4, r3, #1
 800af98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af9a:	42a3      	cmp	r3, r4
 800af9c:	bfb7      	itett	lt
 800af9e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800afa0:	1b1c      	subge	r4, r3, r4
 800afa2:	1ae2      	sublt	r2, r4, r3
 800afa4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800afa6:	bfbe      	ittt	lt
 800afa8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800afaa:	189b      	addlt	r3, r3, r2
 800afac:	930e      	strlt	r3, [sp, #56]	; 0x38
 800afae:	9b08      	ldr	r3, [sp, #32]
 800afb0:	bfb8      	it	lt
 800afb2:	2400      	movlt	r4, #0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	bfbb      	ittet	lt
 800afb8:	9b06      	ldrlt	r3, [sp, #24]
 800afba:	9a08      	ldrlt	r2, [sp, #32]
 800afbc:	9f06      	ldrge	r7, [sp, #24]
 800afbe:	1a9f      	sublt	r7, r3, r2
 800afc0:	bfac      	ite	ge
 800afc2:	9b08      	ldrge	r3, [sp, #32]
 800afc4:	2300      	movlt	r3, #0
 800afc6:	e73f      	b.n	800ae48 <_dtoa_r+0x748>
 800afc8:	3fe00000 	.word	0x3fe00000
 800afcc:	40240000 	.word	0x40240000
 800afd0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800afd2:	9f06      	ldr	r7, [sp, #24]
 800afd4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800afd6:	e742      	b.n	800ae5e <_dtoa_r+0x75e>
 800afd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afda:	e76b      	b.n	800aeb4 <_dtoa_r+0x7b4>
 800afdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afde:	2b01      	cmp	r3, #1
 800afe0:	dc19      	bgt.n	800b016 <_dtoa_r+0x916>
 800afe2:	9b04      	ldr	r3, [sp, #16]
 800afe4:	b9bb      	cbnz	r3, 800b016 <_dtoa_r+0x916>
 800afe6:	9b05      	ldr	r3, [sp, #20]
 800afe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afec:	b99b      	cbnz	r3, 800b016 <_dtoa_r+0x916>
 800afee:	9b05      	ldr	r3, [sp, #20]
 800aff0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aff4:	0d1b      	lsrs	r3, r3, #20
 800aff6:	051b      	lsls	r3, r3, #20
 800aff8:	b183      	cbz	r3, 800b01c <_dtoa_r+0x91c>
 800affa:	f04f 0801 	mov.w	r8, #1
 800affe:	9b06      	ldr	r3, [sp, #24]
 800b000:	3301      	adds	r3, #1
 800b002:	9306      	str	r3, [sp, #24]
 800b004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b006:	3301      	adds	r3, #1
 800b008:	9309      	str	r3, [sp, #36]	; 0x24
 800b00a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f47f af6a 	bne.w	800aee6 <_dtoa_r+0x7e6>
 800b012:	2001      	movs	r0, #1
 800b014:	e76f      	b.n	800aef6 <_dtoa_r+0x7f6>
 800b016:	f04f 0800 	mov.w	r8, #0
 800b01a:	e7f6      	b.n	800b00a <_dtoa_r+0x90a>
 800b01c:	4698      	mov	r8, r3
 800b01e:	e7f4      	b.n	800b00a <_dtoa_r+0x90a>
 800b020:	f43f af7d 	beq.w	800af1e <_dtoa_r+0x81e>
 800b024:	4618      	mov	r0, r3
 800b026:	301c      	adds	r0, #28
 800b028:	e772      	b.n	800af10 <_dtoa_r+0x810>
 800b02a:	9b08      	ldr	r3, [sp, #32]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	dc36      	bgt.n	800b09e <_dtoa_r+0x99e>
 800b030:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b032:	2b02      	cmp	r3, #2
 800b034:	dd33      	ble.n	800b09e <_dtoa_r+0x99e>
 800b036:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b03a:	f1b9 0f00 	cmp.w	r9, #0
 800b03e:	d10d      	bne.n	800b05c <_dtoa_r+0x95c>
 800b040:	4621      	mov	r1, r4
 800b042:	464b      	mov	r3, r9
 800b044:	2205      	movs	r2, #5
 800b046:	4628      	mov	r0, r5
 800b048:	f000 fd4a 	bl	800bae0 <__multadd>
 800b04c:	4601      	mov	r1, r0
 800b04e:	4604      	mov	r4, r0
 800b050:	4658      	mov	r0, fp
 800b052:	f000 ffab 	bl	800bfac <__mcmp>
 800b056:	2800      	cmp	r0, #0
 800b058:	f73f adb8 	bgt.w	800abcc <_dtoa_r+0x4cc>
 800b05c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b05e:	9f03      	ldr	r7, [sp, #12]
 800b060:	ea6f 0a03 	mvn.w	sl, r3
 800b064:	f04f 0800 	mov.w	r8, #0
 800b068:	4621      	mov	r1, r4
 800b06a:	4628      	mov	r0, r5
 800b06c:	f000 fd16 	bl	800ba9c <_Bfree>
 800b070:	2e00      	cmp	r6, #0
 800b072:	f43f aea7 	beq.w	800adc4 <_dtoa_r+0x6c4>
 800b076:	f1b8 0f00 	cmp.w	r8, #0
 800b07a:	d005      	beq.n	800b088 <_dtoa_r+0x988>
 800b07c:	45b0      	cmp	r8, r6
 800b07e:	d003      	beq.n	800b088 <_dtoa_r+0x988>
 800b080:	4641      	mov	r1, r8
 800b082:	4628      	mov	r0, r5
 800b084:	f000 fd0a 	bl	800ba9c <_Bfree>
 800b088:	4631      	mov	r1, r6
 800b08a:	4628      	mov	r0, r5
 800b08c:	f000 fd06 	bl	800ba9c <_Bfree>
 800b090:	e698      	b.n	800adc4 <_dtoa_r+0x6c4>
 800b092:	2400      	movs	r4, #0
 800b094:	4626      	mov	r6, r4
 800b096:	e7e1      	b.n	800b05c <_dtoa_r+0x95c>
 800b098:	46c2      	mov	sl, r8
 800b09a:	4626      	mov	r6, r4
 800b09c:	e596      	b.n	800abcc <_dtoa_r+0x4cc>
 800b09e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f000 80fd 	beq.w	800b2a4 <_dtoa_r+0xba4>
 800b0aa:	2f00      	cmp	r7, #0
 800b0ac:	dd05      	ble.n	800b0ba <_dtoa_r+0x9ba>
 800b0ae:	4631      	mov	r1, r6
 800b0b0:	463a      	mov	r2, r7
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	f000 ff0a 	bl	800becc <__lshift>
 800b0b8:	4606      	mov	r6, r0
 800b0ba:	f1b8 0f00 	cmp.w	r8, #0
 800b0be:	d05c      	beq.n	800b17a <_dtoa_r+0xa7a>
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	6871      	ldr	r1, [r6, #4]
 800b0c4:	f000 fcaa 	bl	800ba1c <_Balloc>
 800b0c8:	4607      	mov	r7, r0
 800b0ca:	b928      	cbnz	r0, 800b0d8 <_dtoa_r+0x9d8>
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b0d2:	4b7f      	ldr	r3, [pc, #508]	; (800b2d0 <_dtoa_r+0xbd0>)
 800b0d4:	f7ff bb28 	b.w	800a728 <_dtoa_r+0x28>
 800b0d8:	6932      	ldr	r2, [r6, #16]
 800b0da:	f106 010c 	add.w	r1, r6, #12
 800b0de:	3202      	adds	r2, #2
 800b0e0:	0092      	lsls	r2, r2, #2
 800b0e2:	300c      	adds	r0, #12
 800b0e4:	f000 fc8c 	bl	800ba00 <memcpy>
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	4639      	mov	r1, r7
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	f000 feed 	bl	800becc <__lshift>
 800b0f2:	46b0      	mov	r8, r6
 800b0f4:	4606      	mov	r6, r0
 800b0f6:	9b03      	ldr	r3, [sp, #12]
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	9308      	str	r3, [sp, #32]
 800b0fc:	9b03      	ldr	r3, [sp, #12]
 800b0fe:	444b      	add	r3, r9
 800b100:	930a      	str	r3, [sp, #40]	; 0x28
 800b102:	9b04      	ldr	r3, [sp, #16]
 800b104:	f003 0301 	and.w	r3, r3, #1
 800b108:	9309      	str	r3, [sp, #36]	; 0x24
 800b10a:	9b08      	ldr	r3, [sp, #32]
 800b10c:	4621      	mov	r1, r4
 800b10e:	3b01      	subs	r3, #1
 800b110:	4658      	mov	r0, fp
 800b112:	9304      	str	r3, [sp, #16]
 800b114:	f7ff fa66 	bl	800a5e4 <quorem>
 800b118:	4603      	mov	r3, r0
 800b11a:	4641      	mov	r1, r8
 800b11c:	3330      	adds	r3, #48	; 0x30
 800b11e:	9006      	str	r0, [sp, #24]
 800b120:	4658      	mov	r0, fp
 800b122:	930b      	str	r3, [sp, #44]	; 0x2c
 800b124:	f000 ff42 	bl	800bfac <__mcmp>
 800b128:	4632      	mov	r2, r6
 800b12a:	4681      	mov	r9, r0
 800b12c:	4621      	mov	r1, r4
 800b12e:	4628      	mov	r0, r5
 800b130:	f000 ff58 	bl	800bfe4 <__mdiff>
 800b134:	68c2      	ldr	r2, [r0, #12]
 800b136:	4607      	mov	r7, r0
 800b138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b13a:	bb02      	cbnz	r2, 800b17e <_dtoa_r+0xa7e>
 800b13c:	4601      	mov	r1, r0
 800b13e:	4658      	mov	r0, fp
 800b140:	f000 ff34 	bl	800bfac <__mcmp>
 800b144:	4602      	mov	r2, r0
 800b146:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b148:	4639      	mov	r1, r7
 800b14a:	4628      	mov	r0, r5
 800b14c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b150:	f000 fca4 	bl	800ba9c <_Bfree>
 800b154:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b156:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b158:	9f08      	ldr	r7, [sp, #32]
 800b15a:	ea43 0102 	orr.w	r1, r3, r2
 800b15e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b160:	430b      	orrs	r3, r1
 800b162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b164:	d10d      	bne.n	800b182 <_dtoa_r+0xa82>
 800b166:	2b39      	cmp	r3, #57	; 0x39
 800b168:	d029      	beq.n	800b1be <_dtoa_r+0xabe>
 800b16a:	f1b9 0f00 	cmp.w	r9, #0
 800b16e:	dd01      	ble.n	800b174 <_dtoa_r+0xa74>
 800b170:	9b06      	ldr	r3, [sp, #24]
 800b172:	3331      	adds	r3, #49	; 0x31
 800b174:	9a04      	ldr	r2, [sp, #16]
 800b176:	7013      	strb	r3, [r2, #0]
 800b178:	e776      	b.n	800b068 <_dtoa_r+0x968>
 800b17a:	4630      	mov	r0, r6
 800b17c:	e7b9      	b.n	800b0f2 <_dtoa_r+0x9f2>
 800b17e:	2201      	movs	r2, #1
 800b180:	e7e2      	b.n	800b148 <_dtoa_r+0xa48>
 800b182:	f1b9 0f00 	cmp.w	r9, #0
 800b186:	db06      	blt.n	800b196 <_dtoa_r+0xa96>
 800b188:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b18a:	ea41 0909 	orr.w	r9, r1, r9
 800b18e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b190:	ea59 0101 	orrs.w	r1, r9, r1
 800b194:	d120      	bne.n	800b1d8 <_dtoa_r+0xad8>
 800b196:	2a00      	cmp	r2, #0
 800b198:	ddec      	ble.n	800b174 <_dtoa_r+0xa74>
 800b19a:	4659      	mov	r1, fp
 800b19c:	2201      	movs	r2, #1
 800b19e:	4628      	mov	r0, r5
 800b1a0:	9308      	str	r3, [sp, #32]
 800b1a2:	f000 fe93 	bl	800becc <__lshift>
 800b1a6:	4621      	mov	r1, r4
 800b1a8:	4683      	mov	fp, r0
 800b1aa:	f000 feff 	bl	800bfac <__mcmp>
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	9b08      	ldr	r3, [sp, #32]
 800b1b2:	dc02      	bgt.n	800b1ba <_dtoa_r+0xaba>
 800b1b4:	d1de      	bne.n	800b174 <_dtoa_r+0xa74>
 800b1b6:	07da      	lsls	r2, r3, #31
 800b1b8:	d5dc      	bpl.n	800b174 <_dtoa_r+0xa74>
 800b1ba:	2b39      	cmp	r3, #57	; 0x39
 800b1bc:	d1d8      	bne.n	800b170 <_dtoa_r+0xa70>
 800b1be:	2339      	movs	r3, #57	; 0x39
 800b1c0:	9a04      	ldr	r2, [sp, #16]
 800b1c2:	7013      	strb	r3, [r2, #0]
 800b1c4:	463b      	mov	r3, r7
 800b1c6:	461f      	mov	r7, r3
 800b1c8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	2a39      	cmp	r2, #57	; 0x39
 800b1d0:	d050      	beq.n	800b274 <_dtoa_r+0xb74>
 800b1d2:	3201      	adds	r2, #1
 800b1d4:	701a      	strb	r2, [r3, #0]
 800b1d6:	e747      	b.n	800b068 <_dtoa_r+0x968>
 800b1d8:	2a00      	cmp	r2, #0
 800b1da:	dd03      	ble.n	800b1e4 <_dtoa_r+0xae4>
 800b1dc:	2b39      	cmp	r3, #57	; 0x39
 800b1de:	d0ee      	beq.n	800b1be <_dtoa_r+0xabe>
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	e7c7      	b.n	800b174 <_dtoa_r+0xa74>
 800b1e4:	9a08      	ldr	r2, [sp, #32]
 800b1e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b1e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b1ec:	428a      	cmp	r2, r1
 800b1ee:	d02a      	beq.n	800b246 <_dtoa_r+0xb46>
 800b1f0:	4659      	mov	r1, fp
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	220a      	movs	r2, #10
 800b1f6:	4628      	mov	r0, r5
 800b1f8:	f000 fc72 	bl	800bae0 <__multadd>
 800b1fc:	45b0      	cmp	r8, r6
 800b1fe:	4683      	mov	fp, r0
 800b200:	f04f 0300 	mov.w	r3, #0
 800b204:	f04f 020a 	mov.w	r2, #10
 800b208:	4641      	mov	r1, r8
 800b20a:	4628      	mov	r0, r5
 800b20c:	d107      	bne.n	800b21e <_dtoa_r+0xb1e>
 800b20e:	f000 fc67 	bl	800bae0 <__multadd>
 800b212:	4680      	mov	r8, r0
 800b214:	4606      	mov	r6, r0
 800b216:	9b08      	ldr	r3, [sp, #32]
 800b218:	3301      	adds	r3, #1
 800b21a:	9308      	str	r3, [sp, #32]
 800b21c:	e775      	b.n	800b10a <_dtoa_r+0xa0a>
 800b21e:	f000 fc5f 	bl	800bae0 <__multadd>
 800b222:	4631      	mov	r1, r6
 800b224:	4680      	mov	r8, r0
 800b226:	2300      	movs	r3, #0
 800b228:	220a      	movs	r2, #10
 800b22a:	4628      	mov	r0, r5
 800b22c:	f000 fc58 	bl	800bae0 <__multadd>
 800b230:	4606      	mov	r6, r0
 800b232:	e7f0      	b.n	800b216 <_dtoa_r+0xb16>
 800b234:	f1b9 0f00 	cmp.w	r9, #0
 800b238:	bfcc      	ite	gt
 800b23a:	464f      	movgt	r7, r9
 800b23c:	2701      	movle	r7, #1
 800b23e:	f04f 0800 	mov.w	r8, #0
 800b242:	9a03      	ldr	r2, [sp, #12]
 800b244:	4417      	add	r7, r2
 800b246:	4659      	mov	r1, fp
 800b248:	2201      	movs	r2, #1
 800b24a:	4628      	mov	r0, r5
 800b24c:	9308      	str	r3, [sp, #32]
 800b24e:	f000 fe3d 	bl	800becc <__lshift>
 800b252:	4621      	mov	r1, r4
 800b254:	4683      	mov	fp, r0
 800b256:	f000 fea9 	bl	800bfac <__mcmp>
 800b25a:	2800      	cmp	r0, #0
 800b25c:	dcb2      	bgt.n	800b1c4 <_dtoa_r+0xac4>
 800b25e:	d102      	bne.n	800b266 <_dtoa_r+0xb66>
 800b260:	9b08      	ldr	r3, [sp, #32]
 800b262:	07db      	lsls	r3, r3, #31
 800b264:	d4ae      	bmi.n	800b1c4 <_dtoa_r+0xac4>
 800b266:	463b      	mov	r3, r7
 800b268:	461f      	mov	r7, r3
 800b26a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b26e:	2a30      	cmp	r2, #48	; 0x30
 800b270:	d0fa      	beq.n	800b268 <_dtoa_r+0xb68>
 800b272:	e6f9      	b.n	800b068 <_dtoa_r+0x968>
 800b274:	9a03      	ldr	r2, [sp, #12]
 800b276:	429a      	cmp	r2, r3
 800b278:	d1a5      	bne.n	800b1c6 <_dtoa_r+0xac6>
 800b27a:	2331      	movs	r3, #49	; 0x31
 800b27c:	f10a 0a01 	add.w	sl, sl, #1
 800b280:	e779      	b.n	800b176 <_dtoa_r+0xa76>
 800b282:	4b14      	ldr	r3, [pc, #80]	; (800b2d4 <_dtoa_r+0xbd4>)
 800b284:	f7ff baa8 	b.w	800a7d8 <_dtoa_r+0xd8>
 800b288:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f47f aa81 	bne.w	800a792 <_dtoa_r+0x92>
 800b290:	4b11      	ldr	r3, [pc, #68]	; (800b2d8 <_dtoa_r+0xbd8>)
 800b292:	f7ff baa1 	b.w	800a7d8 <_dtoa_r+0xd8>
 800b296:	f1b9 0f00 	cmp.w	r9, #0
 800b29a:	dc03      	bgt.n	800b2a4 <_dtoa_r+0xba4>
 800b29c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	f73f aecb 	bgt.w	800b03a <_dtoa_r+0x93a>
 800b2a4:	9f03      	ldr	r7, [sp, #12]
 800b2a6:	4621      	mov	r1, r4
 800b2a8:	4658      	mov	r0, fp
 800b2aa:	f7ff f99b 	bl	800a5e4 <quorem>
 800b2ae:	9a03      	ldr	r2, [sp, #12]
 800b2b0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b2b4:	f807 3b01 	strb.w	r3, [r7], #1
 800b2b8:	1aba      	subs	r2, r7, r2
 800b2ba:	4591      	cmp	r9, r2
 800b2bc:	ddba      	ble.n	800b234 <_dtoa_r+0xb34>
 800b2be:	4659      	mov	r1, fp
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	220a      	movs	r2, #10
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	f000 fc0b 	bl	800bae0 <__multadd>
 800b2ca:	4683      	mov	fp, r0
 800b2cc:	e7eb      	b.n	800b2a6 <_dtoa_r+0xba6>
 800b2ce:	bf00      	nop
 800b2d0:	0801f000 	.word	0x0801f000
 800b2d4:	0801ee04 	.word	0x0801ee04
 800b2d8:	0801ef81 	.word	0x0801ef81

0800b2dc <rshift>:
 800b2dc:	6903      	ldr	r3, [r0, #16]
 800b2de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b2e6:	f100 0414 	add.w	r4, r0, #20
 800b2ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b2ee:	dd46      	ble.n	800b37e <rshift+0xa2>
 800b2f0:	f011 011f 	ands.w	r1, r1, #31
 800b2f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b2f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b2fc:	d10c      	bne.n	800b318 <rshift+0x3c>
 800b2fe:	4629      	mov	r1, r5
 800b300:	f100 0710 	add.w	r7, r0, #16
 800b304:	42b1      	cmp	r1, r6
 800b306:	d335      	bcc.n	800b374 <rshift+0x98>
 800b308:	1a9b      	subs	r3, r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	1eea      	subs	r2, r5, #3
 800b30e:	4296      	cmp	r6, r2
 800b310:	bf38      	it	cc
 800b312:	2300      	movcc	r3, #0
 800b314:	4423      	add	r3, r4
 800b316:	e015      	b.n	800b344 <rshift+0x68>
 800b318:	46a1      	mov	r9, r4
 800b31a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b31e:	f1c1 0820 	rsb	r8, r1, #32
 800b322:	40cf      	lsrs	r7, r1
 800b324:	f105 0e04 	add.w	lr, r5, #4
 800b328:	4576      	cmp	r6, lr
 800b32a:	46f4      	mov	ip, lr
 800b32c:	d816      	bhi.n	800b35c <rshift+0x80>
 800b32e:	1a9a      	subs	r2, r3, r2
 800b330:	0092      	lsls	r2, r2, #2
 800b332:	3a04      	subs	r2, #4
 800b334:	3501      	adds	r5, #1
 800b336:	42ae      	cmp	r6, r5
 800b338:	bf38      	it	cc
 800b33a:	2200      	movcc	r2, #0
 800b33c:	18a3      	adds	r3, r4, r2
 800b33e:	50a7      	str	r7, [r4, r2]
 800b340:	b107      	cbz	r7, 800b344 <rshift+0x68>
 800b342:	3304      	adds	r3, #4
 800b344:	42a3      	cmp	r3, r4
 800b346:	eba3 0204 	sub.w	r2, r3, r4
 800b34a:	bf08      	it	eq
 800b34c:	2300      	moveq	r3, #0
 800b34e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b352:	6102      	str	r2, [r0, #16]
 800b354:	bf08      	it	eq
 800b356:	6143      	streq	r3, [r0, #20]
 800b358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b35c:	f8dc c000 	ldr.w	ip, [ip]
 800b360:	fa0c fc08 	lsl.w	ip, ip, r8
 800b364:	ea4c 0707 	orr.w	r7, ip, r7
 800b368:	f849 7b04 	str.w	r7, [r9], #4
 800b36c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b370:	40cf      	lsrs	r7, r1
 800b372:	e7d9      	b.n	800b328 <rshift+0x4c>
 800b374:	f851 cb04 	ldr.w	ip, [r1], #4
 800b378:	f847 cf04 	str.w	ip, [r7, #4]!
 800b37c:	e7c2      	b.n	800b304 <rshift+0x28>
 800b37e:	4623      	mov	r3, r4
 800b380:	e7e0      	b.n	800b344 <rshift+0x68>

0800b382 <__hexdig_fun>:
 800b382:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b386:	2b09      	cmp	r3, #9
 800b388:	d802      	bhi.n	800b390 <__hexdig_fun+0xe>
 800b38a:	3820      	subs	r0, #32
 800b38c:	b2c0      	uxtb	r0, r0
 800b38e:	4770      	bx	lr
 800b390:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b394:	2b05      	cmp	r3, #5
 800b396:	d801      	bhi.n	800b39c <__hexdig_fun+0x1a>
 800b398:	3847      	subs	r0, #71	; 0x47
 800b39a:	e7f7      	b.n	800b38c <__hexdig_fun+0xa>
 800b39c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b3a0:	2b05      	cmp	r3, #5
 800b3a2:	d801      	bhi.n	800b3a8 <__hexdig_fun+0x26>
 800b3a4:	3827      	subs	r0, #39	; 0x27
 800b3a6:	e7f1      	b.n	800b38c <__hexdig_fun+0xa>
 800b3a8:	2000      	movs	r0, #0
 800b3aa:	4770      	bx	lr

0800b3ac <__gethex>:
 800b3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b0:	b08b      	sub	sp, #44	; 0x2c
 800b3b2:	9305      	str	r3, [sp, #20]
 800b3b4:	4bb2      	ldr	r3, [pc, #712]	; (800b680 <__gethex+0x2d4>)
 800b3b6:	9002      	str	r0, [sp, #8]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	468b      	mov	fp, r1
 800b3bc:	4618      	mov	r0, r3
 800b3be:	4690      	mov	r8, r2
 800b3c0:	9303      	str	r3, [sp, #12]
 800b3c2:	f7fa fd03 	bl	8005dcc <strlen>
 800b3c6:	4682      	mov	sl, r0
 800b3c8:	9b03      	ldr	r3, [sp, #12]
 800b3ca:	f8db 2000 	ldr.w	r2, [fp]
 800b3ce:	4403      	add	r3, r0
 800b3d0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b3d4:	9306      	str	r3, [sp, #24]
 800b3d6:	1c93      	adds	r3, r2, #2
 800b3d8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b3dc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b3e0:	32fe      	adds	r2, #254	; 0xfe
 800b3e2:	18d1      	adds	r1, r2, r3
 800b3e4:	461f      	mov	r7, r3
 800b3e6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b3ea:	9101      	str	r1, [sp, #4]
 800b3ec:	2830      	cmp	r0, #48	; 0x30
 800b3ee:	d0f8      	beq.n	800b3e2 <__gethex+0x36>
 800b3f0:	f7ff ffc7 	bl	800b382 <__hexdig_fun>
 800b3f4:	4604      	mov	r4, r0
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	d13a      	bne.n	800b470 <__gethex+0xc4>
 800b3fa:	4652      	mov	r2, sl
 800b3fc:	4638      	mov	r0, r7
 800b3fe:	9903      	ldr	r1, [sp, #12]
 800b400:	f001 fa26 	bl	800c850 <strncmp>
 800b404:	4605      	mov	r5, r0
 800b406:	2800      	cmp	r0, #0
 800b408:	d166      	bne.n	800b4d8 <__gethex+0x12c>
 800b40a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b40e:	eb07 060a 	add.w	r6, r7, sl
 800b412:	f7ff ffb6 	bl	800b382 <__hexdig_fun>
 800b416:	2800      	cmp	r0, #0
 800b418:	d060      	beq.n	800b4dc <__gethex+0x130>
 800b41a:	4633      	mov	r3, r6
 800b41c:	7818      	ldrb	r0, [r3, #0]
 800b41e:	461f      	mov	r7, r3
 800b420:	2830      	cmp	r0, #48	; 0x30
 800b422:	f103 0301 	add.w	r3, r3, #1
 800b426:	d0f9      	beq.n	800b41c <__gethex+0x70>
 800b428:	f7ff ffab 	bl	800b382 <__hexdig_fun>
 800b42c:	2301      	movs	r3, #1
 800b42e:	fab0 f480 	clz	r4, r0
 800b432:	4635      	mov	r5, r6
 800b434:	0964      	lsrs	r4, r4, #5
 800b436:	9301      	str	r3, [sp, #4]
 800b438:	463a      	mov	r2, r7
 800b43a:	4616      	mov	r6, r2
 800b43c:	7830      	ldrb	r0, [r6, #0]
 800b43e:	3201      	adds	r2, #1
 800b440:	f7ff ff9f 	bl	800b382 <__hexdig_fun>
 800b444:	2800      	cmp	r0, #0
 800b446:	d1f8      	bne.n	800b43a <__gethex+0x8e>
 800b448:	4652      	mov	r2, sl
 800b44a:	4630      	mov	r0, r6
 800b44c:	9903      	ldr	r1, [sp, #12]
 800b44e:	f001 f9ff 	bl	800c850 <strncmp>
 800b452:	b980      	cbnz	r0, 800b476 <__gethex+0xca>
 800b454:	b94d      	cbnz	r5, 800b46a <__gethex+0xbe>
 800b456:	eb06 050a 	add.w	r5, r6, sl
 800b45a:	462a      	mov	r2, r5
 800b45c:	4616      	mov	r6, r2
 800b45e:	7830      	ldrb	r0, [r6, #0]
 800b460:	3201      	adds	r2, #1
 800b462:	f7ff ff8e 	bl	800b382 <__hexdig_fun>
 800b466:	2800      	cmp	r0, #0
 800b468:	d1f8      	bne.n	800b45c <__gethex+0xb0>
 800b46a:	1bad      	subs	r5, r5, r6
 800b46c:	00ad      	lsls	r5, r5, #2
 800b46e:	e004      	b.n	800b47a <__gethex+0xce>
 800b470:	2400      	movs	r4, #0
 800b472:	4625      	mov	r5, r4
 800b474:	e7e0      	b.n	800b438 <__gethex+0x8c>
 800b476:	2d00      	cmp	r5, #0
 800b478:	d1f7      	bne.n	800b46a <__gethex+0xbe>
 800b47a:	7833      	ldrb	r3, [r6, #0]
 800b47c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b480:	2b50      	cmp	r3, #80	; 0x50
 800b482:	d139      	bne.n	800b4f8 <__gethex+0x14c>
 800b484:	7873      	ldrb	r3, [r6, #1]
 800b486:	2b2b      	cmp	r3, #43	; 0x2b
 800b488:	d02a      	beq.n	800b4e0 <__gethex+0x134>
 800b48a:	2b2d      	cmp	r3, #45	; 0x2d
 800b48c:	d02c      	beq.n	800b4e8 <__gethex+0x13c>
 800b48e:	f04f 0900 	mov.w	r9, #0
 800b492:	1c71      	adds	r1, r6, #1
 800b494:	7808      	ldrb	r0, [r1, #0]
 800b496:	f7ff ff74 	bl	800b382 <__hexdig_fun>
 800b49a:	1e43      	subs	r3, r0, #1
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	2b18      	cmp	r3, #24
 800b4a0:	d82a      	bhi.n	800b4f8 <__gethex+0x14c>
 800b4a2:	f1a0 0210 	sub.w	r2, r0, #16
 800b4a6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b4aa:	f7ff ff6a 	bl	800b382 <__hexdig_fun>
 800b4ae:	1e43      	subs	r3, r0, #1
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	2b18      	cmp	r3, #24
 800b4b4:	d91b      	bls.n	800b4ee <__gethex+0x142>
 800b4b6:	f1b9 0f00 	cmp.w	r9, #0
 800b4ba:	d000      	beq.n	800b4be <__gethex+0x112>
 800b4bc:	4252      	negs	r2, r2
 800b4be:	4415      	add	r5, r2
 800b4c0:	f8cb 1000 	str.w	r1, [fp]
 800b4c4:	b1d4      	cbz	r4, 800b4fc <__gethex+0x150>
 800b4c6:	9b01      	ldr	r3, [sp, #4]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	bf14      	ite	ne
 800b4cc:	2700      	movne	r7, #0
 800b4ce:	2706      	moveq	r7, #6
 800b4d0:	4638      	mov	r0, r7
 800b4d2:	b00b      	add	sp, #44	; 0x2c
 800b4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4d8:	463e      	mov	r6, r7
 800b4da:	4625      	mov	r5, r4
 800b4dc:	2401      	movs	r4, #1
 800b4de:	e7cc      	b.n	800b47a <__gethex+0xce>
 800b4e0:	f04f 0900 	mov.w	r9, #0
 800b4e4:	1cb1      	adds	r1, r6, #2
 800b4e6:	e7d5      	b.n	800b494 <__gethex+0xe8>
 800b4e8:	f04f 0901 	mov.w	r9, #1
 800b4ec:	e7fa      	b.n	800b4e4 <__gethex+0x138>
 800b4ee:	230a      	movs	r3, #10
 800b4f0:	fb03 0202 	mla	r2, r3, r2, r0
 800b4f4:	3a10      	subs	r2, #16
 800b4f6:	e7d6      	b.n	800b4a6 <__gethex+0xfa>
 800b4f8:	4631      	mov	r1, r6
 800b4fa:	e7e1      	b.n	800b4c0 <__gethex+0x114>
 800b4fc:	4621      	mov	r1, r4
 800b4fe:	1bf3      	subs	r3, r6, r7
 800b500:	3b01      	subs	r3, #1
 800b502:	2b07      	cmp	r3, #7
 800b504:	dc0a      	bgt.n	800b51c <__gethex+0x170>
 800b506:	9802      	ldr	r0, [sp, #8]
 800b508:	f000 fa88 	bl	800ba1c <_Balloc>
 800b50c:	4604      	mov	r4, r0
 800b50e:	b940      	cbnz	r0, 800b522 <__gethex+0x176>
 800b510:	4602      	mov	r2, r0
 800b512:	21de      	movs	r1, #222	; 0xde
 800b514:	4b5b      	ldr	r3, [pc, #364]	; (800b684 <__gethex+0x2d8>)
 800b516:	485c      	ldr	r0, [pc, #368]	; (800b688 <__gethex+0x2dc>)
 800b518:	f001 f9bc 	bl	800c894 <__assert_func>
 800b51c:	3101      	adds	r1, #1
 800b51e:	105b      	asrs	r3, r3, #1
 800b520:	e7ef      	b.n	800b502 <__gethex+0x156>
 800b522:	f04f 0b00 	mov.w	fp, #0
 800b526:	f100 0914 	add.w	r9, r0, #20
 800b52a:	f1ca 0301 	rsb	r3, sl, #1
 800b52e:	f8cd 9010 	str.w	r9, [sp, #16]
 800b532:	f8cd b004 	str.w	fp, [sp, #4]
 800b536:	9308      	str	r3, [sp, #32]
 800b538:	42b7      	cmp	r7, r6
 800b53a:	d33f      	bcc.n	800b5bc <__gethex+0x210>
 800b53c:	9f04      	ldr	r7, [sp, #16]
 800b53e:	9b01      	ldr	r3, [sp, #4]
 800b540:	f847 3b04 	str.w	r3, [r7], #4
 800b544:	eba7 0709 	sub.w	r7, r7, r9
 800b548:	10bf      	asrs	r7, r7, #2
 800b54a:	6127      	str	r7, [r4, #16]
 800b54c:	4618      	mov	r0, r3
 800b54e:	f000 fb57 	bl	800bc00 <__hi0bits>
 800b552:	017f      	lsls	r7, r7, #5
 800b554:	f8d8 6000 	ldr.w	r6, [r8]
 800b558:	1a3f      	subs	r7, r7, r0
 800b55a:	42b7      	cmp	r7, r6
 800b55c:	dd62      	ble.n	800b624 <__gethex+0x278>
 800b55e:	1bbf      	subs	r7, r7, r6
 800b560:	4639      	mov	r1, r7
 800b562:	4620      	mov	r0, r4
 800b564:	f000 fef1 	bl	800c34a <__any_on>
 800b568:	4682      	mov	sl, r0
 800b56a:	b1a8      	cbz	r0, 800b598 <__gethex+0x1ec>
 800b56c:	f04f 0a01 	mov.w	sl, #1
 800b570:	1e7b      	subs	r3, r7, #1
 800b572:	1159      	asrs	r1, r3, #5
 800b574:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b578:	f003 021f 	and.w	r2, r3, #31
 800b57c:	fa0a f202 	lsl.w	r2, sl, r2
 800b580:	420a      	tst	r2, r1
 800b582:	d009      	beq.n	800b598 <__gethex+0x1ec>
 800b584:	4553      	cmp	r3, sl
 800b586:	dd05      	ble.n	800b594 <__gethex+0x1e8>
 800b588:	4620      	mov	r0, r4
 800b58a:	1eb9      	subs	r1, r7, #2
 800b58c:	f000 fedd 	bl	800c34a <__any_on>
 800b590:	2800      	cmp	r0, #0
 800b592:	d144      	bne.n	800b61e <__gethex+0x272>
 800b594:	f04f 0a02 	mov.w	sl, #2
 800b598:	4639      	mov	r1, r7
 800b59a:	4620      	mov	r0, r4
 800b59c:	f7ff fe9e 	bl	800b2dc <rshift>
 800b5a0:	443d      	add	r5, r7
 800b5a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5a6:	42ab      	cmp	r3, r5
 800b5a8:	da4a      	bge.n	800b640 <__gethex+0x294>
 800b5aa:	4621      	mov	r1, r4
 800b5ac:	9802      	ldr	r0, [sp, #8]
 800b5ae:	f000 fa75 	bl	800ba9c <_Bfree>
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5b6:	27a3      	movs	r7, #163	; 0xa3
 800b5b8:	6013      	str	r3, [r2, #0]
 800b5ba:	e789      	b.n	800b4d0 <__gethex+0x124>
 800b5bc:	1e73      	subs	r3, r6, #1
 800b5be:	9a06      	ldr	r2, [sp, #24]
 800b5c0:	9307      	str	r3, [sp, #28]
 800b5c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d019      	beq.n	800b5fe <__gethex+0x252>
 800b5ca:	f1bb 0f20 	cmp.w	fp, #32
 800b5ce:	d107      	bne.n	800b5e0 <__gethex+0x234>
 800b5d0:	9b04      	ldr	r3, [sp, #16]
 800b5d2:	9a01      	ldr	r2, [sp, #4]
 800b5d4:	f843 2b04 	str.w	r2, [r3], #4
 800b5d8:	9304      	str	r3, [sp, #16]
 800b5da:	2300      	movs	r3, #0
 800b5dc:	469b      	mov	fp, r3
 800b5de:	9301      	str	r3, [sp, #4]
 800b5e0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b5e4:	f7ff fecd 	bl	800b382 <__hexdig_fun>
 800b5e8:	9b01      	ldr	r3, [sp, #4]
 800b5ea:	f000 000f 	and.w	r0, r0, #15
 800b5ee:	fa00 f00b 	lsl.w	r0, r0, fp
 800b5f2:	4303      	orrs	r3, r0
 800b5f4:	9301      	str	r3, [sp, #4]
 800b5f6:	f10b 0b04 	add.w	fp, fp, #4
 800b5fa:	9b07      	ldr	r3, [sp, #28]
 800b5fc:	e00d      	b.n	800b61a <__gethex+0x26e>
 800b5fe:	9a08      	ldr	r2, [sp, #32]
 800b600:	1e73      	subs	r3, r6, #1
 800b602:	4413      	add	r3, r2
 800b604:	42bb      	cmp	r3, r7
 800b606:	d3e0      	bcc.n	800b5ca <__gethex+0x21e>
 800b608:	4618      	mov	r0, r3
 800b60a:	4652      	mov	r2, sl
 800b60c:	9903      	ldr	r1, [sp, #12]
 800b60e:	9309      	str	r3, [sp, #36]	; 0x24
 800b610:	f001 f91e 	bl	800c850 <strncmp>
 800b614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b616:	2800      	cmp	r0, #0
 800b618:	d1d7      	bne.n	800b5ca <__gethex+0x21e>
 800b61a:	461e      	mov	r6, r3
 800b61c:	e78c      	b.n	800b538 <__gethex+0x18c>
 800b61e:	f04f 0a03 	mov.w	sl, #3
 800b622:	e7b9      	b.n	800b598 <__gethex+0x1ec>
 800b624:	da09      	bge.n	800b63a <__gethex+0x28e>
 800b626:	1bf7      	subs	r7, r6, r7
 800b628:	4621      	mov	r1, r4
 800b62a:	463a      	mov	r2, r7
 800b62c:	9802      	ldr	r0, [sp, #8]
 800b62e:	f000 fc4d 	bl	800becc <__lshift>
 800b632:	4604      	mov	r4, r0
 800b634:	1bed      	subs	r5, r5, r7
 800b636:	f100 0914 	add.w	r9, r0, #20
 800b63a:	f04f 0a00 	mov.w	sl, #0
 800b63e:	e7b0      	b.n	800b5a2 <__gethex+0x1f6>
 800b640:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b644:	42a8      	cmp	r0, r5
 800b646:	dd72      	ble.n	800b72e <__gethex+0x382>
 800b648:	1b45      	subs	r5, r0, r5
 800b64a:	42ae      	cmp	r6, r5
 800b64c:	dc35      	bgt.n	800b6ba <__gethex+0x30e>
 800b64e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b652:	2b02      	cmp	r3, #2
 800b654:	d029      	beq.n	800b6aa <__gethex+0x2fe>
 800b656:	2b03      	cmp	r3, #3
 800b658:	d02b      	beq.n	800b6b2 <__gethex+0x306>
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d11c      	bne.n	800b698 <__gethex+0x2ec>
 800b65e:	42ae      	cmp	r6, r5
 800b660:	d11a      	bne.n	800b698 <__gethex+0x2ec>
 800b662:	2e01      	cmp	r6, #1
 800b664:	d112      	bne.n	800b68c <__gethex+0x2e0>
 800b666:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b66a:	9a05      	ldr	r2, [sp, #20]
 800b66c:	2762      	movs	r7, #98	; 0x62
 800b66e:	6013      	str	r3, [r2, #0]
 800b670:	2301      	movs	r3, #1
 800b672:	6123      	str	r3, [r4, #16]
 800b674:	f8c9 3000 	str.w	r3, [r9]
 800b678:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b67a:	601c      	str	r4, [r3, #0]
 800b67c:	e728      	b.n	800b4d0 <__gethex+0x124>
 800b67e:	bf00      	nop
 800b680:	0801f078 	.word	0x0801f078
 800b684:	0801f000 	.word	0x0801f000
 800b688:	0801f011 	.word	0x0801f011
 800b68c:	4620      	mov	r0, r4
 800b68e:	1e71      	subs	r1, r6, #1
 800b690:	f000 fe5b 	bl	800c34a <__any_on>
 800b694:	2800      	cmp	r0, #0
 800b696:	d1e6      	bne.n	800b666 <__gethex+0x2ba>
 800b698:	4621      	mov	r1, r4
 800b69a:	9802      	ldr	r0, [sp, #8]
 800b69c:	f000 f9fe 	bl	800ba9c <_Bfree>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b6a4:	2750      	movs	r7, #80	; 0x50
 800b6a6:	6013      	str	r3, [r2, #0]
 800b6a8:	e712      	b.n	800b4d0 <__gethex+0x124>
 800b6aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1f3      	bne.n	800b698 <__gethex+0x2ec>
 800b6b0:	e7d9      	b.n	800b666 <__gethex+0x2ba>
 800b6b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d1d6      	bne.n	800b666 <__gethex+0x2ba>
 800b6b8:	e7ee      	b.n	800b698 <__gethex+0x2ec>
 800b6ba:	1e6f      	subs	r7, r5, #1
 800b6bc:	f1ba 0f00 	cmp.w	sl, #0
 800b6c0:	d132      	bne.n	800b728 <__gethex+0x37c>
 800b6c2:	b127      	cbz	r7, 800b6ce <__gethex+0x322>
 800b6c4:	4639      	mov	r1, r7
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	f000 fe3f 	bl	800c34a <__any_on>
 800b6cc:	4682      	mov	sl, r0
 800b6ce:	2101      	movs	r1, #1
 800b6d0:	117b      	asrs	r3, r7, #5
 800b6d2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b6d6:	f007 071f 	and.w	r7, r7, #31
 800b6da:	fa01 f707 	lsl.w	r7, r1, r7
 800b6de:	421f      	tst	r7, r3
 800b6e0:	f04f 0702 	mov.w	r7, #2
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	bf18      	it	ne
 800b6ea:	f04a 0a02 	orrne.w	sl, sl, #2
 800b6ee:	1b76      	subs	r6, r6, r5
 800b6f0:	f7ff fdf4 	bl	800b2dc <rshift>
 800b6f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b6f8:	f1ba 0f00 	cmp.w	sl, #0
 800b6fc:	d048      	beq.n	800b790 <__gethex+0x3e4>
 800b6fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b702:	2b02      	cmp	r3, #2
 800b704:	d015      	beq.n	800b732 <__gethex+0x386>
 800b706:	2b03      	cmp	r3, #3
 800b708:	d017      	beq.n	800b73a <__gethex+0x38e>
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d109      	bne.n	800b722 <__gethex+0x376>
 800b70e:	f01a 0f02 	tst.w	sl, #2
 800b712:	d006      	beq.n	800b722 <__gethex+0x376>
 800b714:	f8d9 0000 	ldr.w	r0, [r9]
 800b718:	ea4a 0a00 	orr.w	sl, sl, r0
 800b71c:	f01a 0f01 	tst.w	sl, #1
 800b720:	d10e      	bne.n	800b740 <__gethex+0x394>
 800b722:	f047 0710 	orr.w	r7, r7, #16
 800b726:	e033      	b.n	800b790 <__gethex+0x3e4>
 800b728:	f04f 0a01 	mov.w	sl, #1
 800b72c:	e7cf      	b.n	800b6ce <__gethex+0x322>
 800b72e:	2701      	movs	r7, #1
 800b730:	e7e2      	b.n	800b6f8 <__gethex+0x34c>
 800b732:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b734:	f1c3 0301 	rsb	r3, r3, #1
 800b738:	9315      	str	r3, [sp, #84]	; 0x54
 800b73a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d0f0      	beq.n	800b722 <__gethex+0x376>
 800b740:	f04f 0c00 	mov.w	ip, #0
 800b744:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b748:	f104 0314 	add.w	r3, r4, #20
 800b74c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b750:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b754:	4618      	mov	r0, r3
 800b756:	f853 2b04 	ldr.w	r2, [r3], #4
 800b75a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b75e:	d01c      	beq.n	800b79a <__gethex+0x3ee>
 800b760:	3201      	adds	r2, #1
 800b762:	6002      	str	r2, [r0, #0]
 800b764:	2f02      	cmp	r7, #2
 800b766:	f104 0314 	add.w	r3, r4, #20
 800b76a:	d13d      	bne.n	800b7e8 <__gethex+0x43c>
 800b76c:	f8d8 2000 	ldr.w	r2, [r8]
 800b770:	3a01      	subs	r2, #1
 800b772:	42b2      	cmp	r2, r6
 800b774:	d10a      	bne.n	800b78c <__gethex+0x3e0>
 800b776:	2201      	movs	r2, #1
 800b778:	1171      	asrs	r1, r6, #5
 800b77a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b77e:	f006 061f 	and.w	r6, r6, #31
 800b782:	fa02 f606 	lsl.w	r6, r2, r6
 800b786:	421e      	tst	r6, r3
 800b788:	bf18      	it	ne
 800b78a:	4617      	movne	r7, r2
 800b78c:	f047 0720 	orr.w	r7, r7, #32
 800b790:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b792:	601c      	str	r4, [r3, #0]
 800b794:	9b05      	ldr	r3, [sp, #20]
 800b796:	601d      	str	r5, [r3, #0]
 800b798:	e69a      	b.n	800b4d0 <__gethex+0x124>
 800b79a:	4299      	cmp	r1, r3
 800b79c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b7a0:	d8d8      	bhi.n	800b754 <__gethex+0x3a8>
 800b7a2:	68a3      	ldr	r3, [r4, #8]
 800b7a4:	459b      	cmp	fp, r3
 800b7a6:	db17      	blt.n	800b7d8 <__gethex+0x42c>
 800b7a8:	6861      	ldr	r1, [r4, #4]
 800b7aa:	9802      	ldr	r0, [sp, #8]
 800b7ac:	3101      	adds	r1, #1
 800b7ae:	f000 f935 	bl	800ba1c <_Balloc>
 800b7b2:	4681      	mov	r9, r0
 800b7b4:	b918      	cbnz	r0, 800b7be <__gethex+0x412>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	2184      	movs	r1, #132	; 0x84
 800b7ba:	4b19      	ldr	r3, [pc, #100]	; (800b820 <__gethex+0x474>)
 800b7bc:	e6ab      	b.n	800b516 <__gethex+0x16a>
 800b7be:	6922      	ldr	r2, [r4, #16]
 800b7c0:	f104 010c 	add.w	r1, r4, #12
 800b7c4:	3202      	adds	r2, #2
 800b7c6:	0092      	lsls	r2, r2, #2
 800b7c8:	300c      	adds	r0, #12
 800b7ca:	f000 f919 	bl	800ba00 <memcpy>
 800b7ce:	4621      	mov	r1, r4
 800b7d0:	9802      	ldr	r0, [sp, #8]
 800b7d2:	f000 f963 	bl	800ba9c <_Bfree>
 800b7d6:	464c      	mov	r4, r9
 800b7d8:	6923      	ldr	r3, [r4, #16]
 800b7da:	1c5a      	adds	r2, r3, #1
 800b7dc:	6122      	str	r2, [r4, #16]
 800b7de:	2201      	movs	r2, #1
 800b7e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7e4:	615a      	str	r2, [r3, #20]
 800b7e6:	e7bd      	b.n	800b764 <__gethex+0x3b8>
 800b7e8:	6922      	ldr	r2, [r4, #16]
 800b7ea:	455a      	cmp	r2, fp
 800b7ec:	dd0b      	ble.n	800b806 <__gethex+0x45a>
 800b7ee:	2101      	movs	r1, #1
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f7ff fd73 	bl	800b2dc <rshift>
 800b7f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b7fa:	3501      	adds	r5, #1
 800b7fc:	42ab      	cmp	r3, r5
 800b7fe:	f6ff aed4 	blt.w	800b5aa <__gethex+0x1fe>
 800b802:	2701      	movs	r7, #1
 800b804:	e7c2      	b.n	800b78c <__gethex+0x3e0>
 800b806:	f016 061f 	ands.w	r6, r6, #31
 800b80a:	d0fa      	beq.n	800b802 <__gethex+0x456>
 800b80c:	4453      	add	r3, sl
 800b80e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b812:	f000 f9f5 	bl	800bc00 <__hi0bits>
 800b816:	f1c6 0620 	rsb	r6, r6, #32
 800b81a:	42b0      	cmp	r0, r6
 800b81c:	dbe7      	blt.n	800b7ee <__gethex+0x442>
 800b81e:	e7f0      	b.n	800b802 <__gethex+0x456>
 800b820:	0801f000 	.word	0x0801f000

0800b824 <L_shift>:
 800b824:	f1c2 0208 	rsb	r2, r2, #8
 800b828:	0092      	lsls	r2, r2, #2
 800b82a:	b570      	push	{r4, r5, r6, lr}
 800b82c:	f1c2 0620 	rsb	r6, r2, #32
 800b830:	6843      	ldr	r3, [r0, #4]
 800b832:	6804      	ldr	r4, [r0, #0]
 800b834:	fa03 f506 	lsl.w	r5, r3, r6
 800b838:	432c      	orrs	r4, r5
 800b83a:	40d3      	lsrs	r3, r2
 800b83c:	6004      	str	r4, [r0, #0]
 800b83e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b842:	4288      	cmp	r0, r1
 800b844:	d3f4      	bcc.n	800b830 <L_shift+0xc>
 800b846:	bd70      	pop	{r4, r5, r6, pc}

0800b848 <__match>:
 800b848:	b530      	push	{r4, r5, lr}
 800b84a:	6803      	ldr	r3, [r0, #0]
 800b84c:	3301      	adds	r3, #1
 800b84e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b852:	b914      	cbnz	r4, 800b85a <__match+0x12>
 800b854:	6003      	str	r3, [r0, #0]
 800b856:	2001      	movs	r0, #1
 800b858:	bd30      	pop	{r4, r5, pc}
 800b85a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b85e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b862:	2d19      	cmp	r5, #25
 800b864:	bf98      	it	ls
 800b866:	3220      	addls	r2, #32
 800b868:	42a2      	cmp	r2, r4
 800b86a:	d0f0      	beq.n	800b84e <__match+0x6>
 800b86c:	2000      	movs	r0, #0
 800b86e:	e7f3      	b.n	800b858 <__match+0x10>

0800b870 <__hexnan>:
 800b870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b874:	2500      	movs	r5, #0
 800b876:	680b      	ldr	r3, [r1, #0]
 800b878:	4682      	mov	sl, r0
 800b87a:	115e      	asrs	r6, r3, #5
 800b87c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b880:	f013 031f 	ands.w	r3, r3, #31
 800b884:	bf18      	it	ne
 800b886:	3604      	addne	r6, #4
 800b888:	1f37      	subs	r7, r6, #4
 800b88a:	46b9      	mov	r9, r7
 800b88c:	463c      	mov	r4, r7
 800b88e:	46ab      	mov	fp, r5
 800b890:	b087      	sub	sp, #28
 800b892:	4690      	mov	r8, r2
 800b894:	6802      	ldr	r2, [r0, #0]
 800b896:	9301      	str	r3, [sp, #4]
 800b898:	f846 5c04 	str.w	r5, [r6, #-4]
 800b89c:	9502      	str	r5, [sp, #8]
 800b89e:	7851      	ldrb	r1, [r2, #1]
 800b8a0:	1c53      	adds	r3, r2, #1
 800b8a2:	9303      	str	r3, [sp, #12]
 800b8a4:	b341      	cbz	r1, 800b8f8 <__hexnan+0x88>
 800b8a6:	4608      	mov	r0, r1
 800b8a8:	9205      	str	r2, [sp, #20]
 800b8aa:	9104      	str	r1, [sp, #16]
 800b8ac:	f7ff fd69 	bl	800b382 <__hexdig_fun>
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	d14f      	bne.n	800b954 <__hexnan+0xe4>
 800b8b4:	9904      	ldr	r1, [sp, #16]
 800b8b6:	9a05      	ldr	r2, [sp, #20]
 800b8b8:	2920      	cmp	r1, #32
 800b8ba:	d818      	bhi.n	800b8ee <__hexnan+0x7e>
 800b8bc:	9b02      	ldr	r3, [sp, #8]
 800b8be:	459b      	cmp	fp, r3
 800b8c0:	dd13      	ble.n	800b8ea <__hexnan+0x7a>
 800b8c2:	454c      	cmp	r4, r9
 800b8c4:	d206      	bcs.n	800b8d4 <__hexnan+0x64>
 800b8c6:	2d07      	cmp	r5, #7
 800b8c8:	dc04      	bgt.n	800b8d4 <__hexnan+0x64>
 800b8ca:	462a      	mov	r2, r5
 800b8cc:	4649      	mov	r1, r9
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f7ff ffa8 	bl	800b824 <L_shift>
 800b8d4:	4544      	cmp	r4, r8
 800b8d6:	d950      	bls.n	800b97a <__hexnan+0x10a>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	f1a4 0904 	sub.w	r9, r4, #4
 800b8de:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8e2:	461d      	mov	r5, r3
 800b8e4:	464c      	mov	r4, r9
 800b8e6:	f8cd b008 	str.w	fp, [sp, #8]
 800b8ea:	9a03      	ldr	r2, [sp, #12]
 800b8ec:	e7d7      	b.n	800b89e <__hexnan+0x2e>
 800b8ee:	2929      	cmp	r1, #41	; 0x29
 800b8f0:	d156      	bne.n	800b9a0 <__hexnan+0x130>
 800b8f2:	3202      	adds	r2, #2
 800b8f4:	f8ca 2000 	str.w	r2, [sl]
 800b8f8:	f1bb 0f00 	cmp.w	fp, #0
 800b8fc:	d050      	beq.n	800b9a0 <__hexnan+0x130>
 800b8fe:	454c      	cmp	r4, r9
 800b900:	d206      	bcs.n	800b910 <__hexnan+0xa0>
 800b902:	2d07      	cmp	r5, #7
 800b904:	dc04      	bgt.n	800b910 <__hexnan+0xa0>
 800b906:	462a      	mov	r2, r5
 800b908:	4649      	mov	r1, r9
 800b90a:	4620      	mov	r0, r4
 800b90c:	f7ff ff8a 	bl	800b824 <L_shift>
 800b910:	4544      	cmp	r4, r8
 800b912:	d934      	bls.n	800b97e <__hexnan+0x10e>
 800b914:	4623      	mov	r3, r4
 800b916:	f1a8 0204 	sub.w	r2, r8, #4
 800b91a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b91e:	429f      	cmp	r7, r3
 800b920:	f842 1f04 	str.w	r1, [r2, #4]!
 800b924:	d2f9      	bcs.n	800b91a <__hexnan+0xaa>
 800b926:	1b3b      	subs	r3, r7, r4
 800b928:	f023 0303 	bic.w	r3, r3, #3
 800b92c:	3304      	adds	r3, #4
 800b92e:	3401      	adds	r4, #1
 800b930:	3e03      	subs	r6, #3
 800b932:	42b4      	cmp	r4, r6
 800b934:	bf88      	it	hi
 800b936:	2304      	movhi	r3, #4
 800b938:	2200      	movs	r2, #0
 800b93a:	4443      	add	r3, r8
 800b93c:	f843 2b04 	str.w	r2, [r3], #4
 800b940:	429f      	cmp	r7, r3
 800b942:	d2fb      	bcs.n	800b93c <__hexnan+0xcc>
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	b91b      	cbnz	r3, 800b950 <__hexnan+0xe0>
 800b948:	4547      	cmp	r7, r8
 800b94a:	d127      	bne.n	800b99c <__hexnan+0x12c>
 800b94c:	2301      	movs	r3, #1
 800b94e:	603b      	str	r3, [r7, #0]
 800b950:	2005      	movs	r0, #5
 800b952:	e026      	b.n	800b9a2 <__hexnan+0x132>
 800b954:	3501      	adds	r5, #1
 800b956:	2d08      	cmp	r5, #8
 800b958:	f10b 0b01 	add.w	fp, fp, #1
 800b95c:	dd06      	ble.n	800b96c <__hexnan+0xfc>
 800b95e:	4544      	cmp	r4, r8
 800b960:	d9c3      	bls.n	800b8ea <__hexnan+0x7a>
 800b962:	2300      	movs	r3, #0
 800b964:	2501      	movs	r5, #1
 800b966:	f844 3c04 	str.w	r3, [r4, #-4]
 800b96a:	3c04      	subs	r4, #4
 800b96c:	6822      	ldr	r2, [r4, #0]
 800b96e:	f000 000f 	and.w	r0, r0, #15
 800b972:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b976:	6022      	str	r2, [r4, #0]
 800b978:	e7b7      	b.n	800b8ea <__hexnan+0x7a>
 800b97a:	2508      	movs	r5, #8
 800b97c:	e7b5      	b.n	800b8ea <__hexnan+0x7a>
 800b97e:	9b01      	ldr	r3, [sp, #4]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d0df      	beq.n	800b944 <__hexnan+0xd4>
 800b984:	f04f 32ff 	mov.w	r2, #4294967295
 800b988:	f1c3 0320 	rsb	r3, r3, #32
 800b98c:	fa22 f303 	lsr.w	r3, r2, r3
 800b990:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b994:	401a      	ands	r2, r3
 800b996:	f846 2c04 	str.w	r2, [r6, #-4]
 800b99a:	e7d3      	b.n	800b944 <__hexnan+0xd4>
 800b99c:	3f04      	subs	r7, #4
 800b99e:	e7d1      	b.n	800b944 <__hexnan+0xd4>
 800b9a0:	2004      	movs	r0, #4
 800b9a2:	b007      	add	sp, #28
 800b9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b9a8 <_localeconv_r>:
 800b9a8:	4800      	ldr	r0, [pc, #0]	; (800b9ac <_localeconv_r+0x4>)
 800b9aa:	4770      	bx	lr
 800b9ac:	20000164 	.word	0x20000164

0800b9b0 <malloc>:
 800b9b0:	4b02      	ldr	r3, [pc, #8]	; (800b9bc <malloc+0xc>)
 800b9b2:	4601      	mov	r1, r0
 800b9b4:	6818      	ldr	r0, [r3, #0]
 800b9b6:	f000 bd65 	b.w	800c484 <_malloc_r>
 800b9ba:	bf00      	nop
 800b9bc:	2000000c 	.word	0x2000000c

0800b9c0 <__ascii_mbtowc>:
 800b9c0:	b082      	sub	sp, #8
 800b9c2:	b901      	cbnz	r1, 800b9c6 <__ascii_mbtowc+0x6>
 800b9c4:	a901      	add	r1, sp, #4
 800b9c6:	b142      	cbz	r2, 800b9da <__ascii_mbtowc+0x1a>
 800b9c8:	b14b      	cbz	r3, 800b9de <__ascii_mbtowc+0x1e>
 800b9ca:	7813      	ldrb	r3, [r2, #0]
 800b9cc:	600b      	str	r3, [r1, #0]
 800b9ce:	7812      	ldrb	r2, [r2, #0]
 800b9d0:	1e10      	subs	r0, r2, #0
 800b9d2:	bf18      	it	ne
 800b9d4:	2001      	movne	r0, #1
 800b9d6:	b002      	add	sp, #8
 800b9d8:	4770      	bx	lr
 800b9da:	4610      	mov	r0, r2
 800b9dc:	e7fb      	b.n	800b9d6 <__ascii_mbtowc+0x16>
 800b9de:	f06f 0001 	mvn.w	r0, #1
 800b9e2:	e7f8      	b.n	800b9d6 <__ascii_mbtowc+0x16>

0800b9e4 <memchr>:
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	b510      	push	{r4, lr}
 800b9e8:	b2c9      	uxtb	r1, r1
 800b9ea:	4402      	add	r2, r0
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	d101      	bne.n	800b9f6 <memchr+0x12>
 800b9f2:	2000      	movs	r0, #0
 800b9f4:	e003      	b.n	800b9fe <memchr+0x1a>
 800b9f6:	7804      	ldrb	r4, [r0, #0]
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	428c      	cmp	r4, r1
 800b9fc:	d1f6      	bne.n	800b9ec <memchr+0x8>
 800b9fe:	bd10      	pop	{r4, pc}

0800ba00 <memcpy>:
 800ba00:	440a      	add	r2, r1
 800ba02:	4291      	cmp	r1, r2
 800ba04:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba08:	d100      	bne.n	800ba0c <memcpy+0xc>
 800ba0a:	4770      	bx	lr
 800ba0c:	b510      	push	{r4, lr}
 800ba0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba12:	4291      	cmp	r1, r2
 800ba14:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba18:	d1f9      	bne.n	800ba0e <memcpy+0xe>
 800ba1a:	bd10      	pop	{r4, pc}

0800ba1c <_Balloc>:
 800ba1c:	b570      	push	{r4, r5, r6, lr}
 800ba1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba20:	4604      	mov	r4, r0
 800ba22:	460d      	mov	r5, r1
 800ba24:	b976      	cbnz	r6, 800ba44 <_Balloc+0x28>
 800ba26:	2010      	movs	r0, #16
 800ba28:	f7ff ffc2 	bl	800b9b0 <malloc>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	6260      	str	r0, [r4, #36]	; 0x24
 800ba30:	b920      	cbnz	r0, 800ba3c <_Balloc+0x20>
 800ba32:	2166      	movs	r1, #102	; 0x66
 800ba34:	4b17      	ldr	r3, [pc, #92]	; (800ba94 <_Balloc+0x78>)
 800ba36:	4818      	ldr	r0, [pc, #96]	; (800ba98 <_Balloc+0x7c>)
 800ba38:	f000 ff2c 	bl	800c894 <__assert_func>
 800ba3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba40:	6006      	str	r6, [r0, #0]
 800ba42:	60c6      	str	r6, [r0, #12]
 800ba44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba46:	68f3      	ldr	r3, [r6, #12]
 800ba48:	b183      	cbz	r3, 800ba6c <_Balloc+0x50>
 800ba4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba52:	b9b8      	cbnz	r0, 800ba84 <_Balloc+0x68>
 800ba54:	2101      	movs	r1, #1
 800ba56:	fa01 f605 	lsl.w	r6, r1, r5
 800ba5a:	1d72      	adds	r2, r6, #5
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	0092      	lsls	r2, r2, #2
 800ba60:	f000 fc94 	bl	800c38c <_calloc_r>
 800ba64:	b160      	cbz	r0, 800ba80 <_Balloc+0x64>
 800ba66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba6a:	e00e      	b.n	800ba8a <_Balloc+0x6e>
 800ba6c:	2221      	movs	r2, #33	; 0x21
 800ba6e:	2104      	movs	r1, #4
 800ba70:	4620      	mov	r0, r4
 800ba72:	f000 fc8b 	bl	800c38c <_calloc_r>
 800ba76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba78:	60f0      	str	r0, [r6, #12]
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d1e4      	bne.n	800ba4a <_Balloc+0x2e>
 800ba80:	2000      	movs	r0, #0
 800ba82:	bd70      	pop	{r4, r5, r6, pc}
 800ba84:	6802      	ldr	r2, [r0, #0]
 800ba86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba90:	e7f7      	b.n	800ba82 <_Balloc+0x66>
 800ba92:	bf00      	nop
 800ba94:	0801ef8e 	.word	0x0801ef8e
 800ba98:	0801f08c 	.word	0x0801f08c

0800ba9c <_Bfree>:
 800ba9c:	b570      	push	{r4, r5, r6, lr}
 800ba9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800baa0:	4605      	mov	r5, r0
 800baa2:	460c      	mov	r4, r1
 800baa4:	b976      	cbnz	r6, 800bac4 <_Bfree+0x28>
 800baa6:	2010      	movs	r0, #16
 800baa8:	f7ff ff82 	bl	800b9b0 <malloc>
 800baac:	4602      	mov	r2, r0
 800baae:	6268      	str	r0, [r5, #36]	; 0x24
 800bab0:	b920      	cbnz	r0, 800babc <_Bfree+0x20>
 800bab2:	218a      	movs	r1, #138	; 0x8a
 800bab4:	4b08      	ldr	r3, [pc, #32]	; (800bad8 <_Bfree+0x3c>)
 800bab6:	4809      	ldr	r0, [pc, #36]	; (800badc <_Bfree+0x40>)
 800bab8:	f000 feec 	bl	800c894 <__assert_func>
 800babc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bac0:	6006      	str	r6, [r0, #0]
 800bac2:	60c6      	str	r6, [r0, #12]
 800bac4:	b13c      	cbz	r4, 800bad6 <_Bfree+0x3a>
 800bac6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bac8:	6862      	ldr	r2, [r4, #4]
 800baca:	68db      	ldr	r3, [r3, #12]
 800bacc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bad0:	6021      	str	r1, [r4, #0]
 800bad2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bad6:	bd70      	pop	{r4, r5, r6, pc}
 800bad8:	0801ef8e 	.word	0x0801ef8e
 800badc:	0801f08c 	.word	0x0801f08c

0800bae0 <__multadd>:
 800bae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae4:	4607      	mov	r7, r0
 800bae6:	460c      	mov	r4, r1
 800bae8:	461e      	mov	r6, r3
 800baea:	2000      	movs	r0, #0
 800baec:	690d      	ldr	r5, [r1, #16]
 800baee:	f101 0c14 	add.w	ip, r1, #20
 800baf2:	f8dc 3000 	ldr.w	r3, [ip]
 800baf6:	3001      	adds	r0, #1
 800baf8:	b299      	uxth	r1, r3
 800bafa:	fb02 6101 	mla	r1, r2, r1, r6
 800bafe:	0c1e      	lsrs	r6, r3, #16
 800bb00:	0c0b      	lsrs	r3, r1, #16
 800bb02:	fb02 3306 	mla	r3, r2, r6, r3
 800bb06:	b289      	uxth	r1, r1
 800bb08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb0c:	4285      	cmp	r5, r0
 800bb0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb12:	f84c 1b04 	str.w	r1, [ip], #4
 800bb16:	dcec      	bgt.n	800baf2 <__multadd+0x12>
 800bb18:	b30e      	cbz	r6, 800bb5e <__multadd+0x7e>
 800bb1a:	68a3      	ldr	r3, [r4, #8]
 800bb1c:	42ab      	cmp	r3, r5
 800bb1e:	dc19      	bgt.n	800bb54 <__multadd+0x74>
 800bb20:	6861      	ldr	r1, [r4, #4]
 800bb22:	4638      	mov	r0, r7
 800bb24:	3101      	adds	r1, #1
 800bb26:	f7ff ff79 	bl	800ba1c <_Balloc>
 800bb2a:	4680      	mov	r8, r0
 800bb2c:	b928      	cbnz	r0, 800bb3a <__multadd+0x5a>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	21b5      	movs	r1, #181	; 0xb5
 800bb32:	4b0c      	ldr	r3, [pc, #48]	; (800bb64 <__multadd+0x84>)
 800bb34:	480c      	ldr	r0, [pc, #48]	; (800bb68 <__multadd+0x88>)
 800bb36:	f000 fead 	bl	800c894 <__assert_func>
 800bb3a:	6922      	ldr	r2, [r4, #16]
 800bb3c:	f104 010c 	add.w	r1, r4, #12
 800bb40:	3202      	adds	r2, #2
 800bb42:	0092      	lsls	r2, r2, #2
 800bb44:	300c      	adds	r0, #12
 800bb46:	f7ff ff5b 	bl	800ba00 <memcpy>
 800bb4a:	4621      	mov	r1, r4
 800bb4c:	4638      	mov	r0, r7
 800bb4e:	f7ff ffa5 	bl	800ba9c <_Bfree>
 800bb52:	4644      	mov	r4, r8
 800bb54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb58:	3501      	adds	r5, #1
 800bb5a:	615e      	str	r6, [r3, #20]
 800bb5c:	6125      	str	r5, [r4, #16]
 800bb5e:	4620      	mov	r0, r4
 800bb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb64:	0801f000 	.word	0x0801f000
 800bb68:	0801f08c 	.word	0x0801f08c

0800bb6c <__s2b>:
 800bb6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb70:	4615      	mov	r5, r2
 800bb72:	2209      	movs	r2, #9
 800bb74:	461f      	mov	r7, r3
 800bb76:	3308      	adds	r3, #8
 800bb78:	460c      	mov	r4, r1
 800bb7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb7e:	4606      	mov	r6, r0
 800bb80:	2201      	movs	r2, #1
 800bb82:	2100      	movs	r1, #0
 800bb84:	429a      	cmp	r2, r3
 800bb86:	db09      	blt.n	800bb9c <__s2b+0x30>
 800bb88:	4630      	mov	r0, r6
 800bb8a:	f7ff ff47 	bl	800ba1c <_Balloc>
 800bb8e:	b940      	cbnz	r0, 800bba2 <__s2b+0x36>
 800bb90:	4602      	mov	r2, r0
 800bb92:	21ce      	movs	r1, #206	; 0xce
 800bb94:	4b18      	ldr	r3, [pc, #96]	; (800bbf8 <__s2b+0x8c>)
 800bb96:	4819      	ldr	r0, [pc, #100]	; (800bbfc <__s2b+0x90>)
 800bb98:	f000 fe7c 	bl	800c894 <__assert_func>
 800bb9c:	0052      	lsls	r2, r2, #1
 800bb9e:	3101      	adds	r1, #1
 800bba0:	e7f0      	b.n	800bb84 <__s2b+0x18>
 800bba2:	9b08      	ldr	r3, [sp, #32]
 800bba4:	2d09      	cmp	r5, #9
 800bba6:	6143      	str	r3, [r0, #20]
 800bba8:	f04f 0301 	mov.w	r3, #1
 800bbac:	6103      	str	r3, [r0, #16]
 800bbae:	dd16      	ble.n	800bbde <__s2b+0x72>
 800bbb0:	f104 0909 	add.w	r9, r4, #9
 800bbb4:	46c8      	mov	r8, r9
 800bbb6:	442c      	add	r4, r5
 800bbb8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bbbc:	4601      	mov	r1, r0
 800bbbe:	220a      	movs	r2, #10
 800bbc0:	4630      	mov	r0, r6
 800bbc2:	3b30      	subs	r3, #48	; 0x30
 800bbc4:	f7ff ff8c 	bl	800bae0 <__multadd>
 800bbc8:	45a0      	cmp	r8, r4
 800bbca:	d1f5      	bne.n	800bbb8 <__s2b+0x4c>
 800bbcc:	f1a5 0408 	sub.w	r4, r5, #8
 800bbd0:	444c      	add	r4, r9
 800bbd2:	1b2d      	subs	r5, r5, r4
 800bbd4:	1963      	adds	r3, r4, r5
 800bbd6:	42bb      	cmp	r3, r7
 800bbd8:	db04      	blt.n	800bbe4 <__s2b+0x78>
 800bbda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbde:	2509      	movs	r5, #9
 800bbe0:	340a      	adds	r4, #10
 800bbe2:	e7f6      	b.n	800bbd2 <__s2b+0x66>
 800bbe4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bbe8:	4601      	mov	r1, r0
 800bbea:	220a      	movs	r2, #10
 800bbec:	4630      	mov	r0, r6
 800bbee:	3b30      	subs	r3, #48	; 0x30
 800bbf0:	f7ff ff76 	bl	800bae0 <__multadd>
 800bbf4:	e7ee      	b.n	800bbd4 <__s2b+0x68>
 800bbf6:	bf00      	nop
 800bbf8:	0801f000 	.word	0x0801f000
 800bbfc:	0801f08c 	.word	0x0801f08c

0800bc00 <__hi0bits>:
 800bc00:	0c02      	lsrs	r2, r0, #16
 800bc02:	0412      	lsls	r2, r2, #16
 800bc04:	4603      	mov	r3, r0
 800bc06:	b9ca      	cbnz	r2, 800bc3c <__hi0bits+0x3c>
 800bc08:	0403      	lsls	r3, r0, #16
 800bc0a:	2010      	movs	r0, #16
 800bc0c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bc10:	bf04      	itt	eq
 800bc12:	021b      	lsleq	r3, r3, #8
 800bc14:	3008      	addeq	r0, #8
 800bc16:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bc1a:	bf04      	itt	eq
 800bc1c:	011b      	lsleq	r3, r3, #4
 800bc1e:	3004      	addeq	r0, #4
 800bc20:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bc24:	bf04      	itt	eq
 800bc26:	009b      	lsleq	r3, r3, #2
 800bc28:	3002      	addeq	r0, #2
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	db05      	blt.n	800bc3a <__hi0bits+0x3a>
 800bc2e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bc32:	f100 0001 	add.w	r0, r0, #1
 800bc36:	bf08      	it	eq
 800bc38:	2020      	moveq	r0, #32
 800bc3a:	4770      	bx	lr
 800bc3c:	2000      	movs	r0, #0
 800bc3e:	e7e5      	b.n	800bc0c <__hi0bits+0xc>

0800bc40 <__lo0bits>:
 800bc40:	6803      	ldr	r3, [r0, #0]
 800bc42:	4602      	mov	r2, r0
 800bc44:	f013 0007 	ands.w	r0, r3, #7
 800bc48:	d00b      	beq.n	800bc62 <__lo0bits+0x22>
 800bc4a:	07d9      	lsls	r1, r3, #31
 800bc4c:	d421      	bmi.n	800bc92 <__lo0bits+0x52>
 800bc4e:	0798      	lsls	r0, r3, #30
 800bc50:	bf49      	itett	mi
 800bc52:	085b      	lsrmi	r3, r3, #1
 800bc54:	089b      	lsrpl	r3, r3, #2
 800bc56:	2001      	movmi	r0, #1
 800bc58:	6013      	strmi	r3, [r2, #0]
 800bc5a:	bf5c      	itt	pl
 800bc5c:	2002      	movpl	r0, #2
 800bc5e:	6013      	strpl	r3, [r2, #0]
 800bc60:	4770      	bx	lr
 800bc62:	b299      	uxth	r1, r3
 800bc64:	b909      	cbnz	r1, 800bc6a <__lo0bits+0x2a>
 800bc66:	2010      	movs	r0, #16
 800bc68:	0c1b      	lsrs	r3, r3, #16
 800bc6a:	b2d9      	uxtb	r1, r3
 800bc6c:	b909      	cbnz	r1, 800bc72 <__lo0bits+0x32>
 800bc6e:	3008      	adds	r0, #8
 800bc70:	0a1b      	lsrs	r3, r3, #8
 800bc72:	0719      	lsls	r1, r3, #28
 800bc74:	bf04      	itt	eq
 800bc76:	091b      	lsreq	r3, r3, #4
 800bc78:	3004      	addeq	r0, #4
 800bc7a:	0799      	lsls	r1, r3, #30
 800bc7c:	bf04      	itt	eq
 800bc7e:	089b      	lsreq	r3, r3, #2
 800bc80:	3002      	addeq	r0, #2
 800bc82:	07d9      	lsls	r1, r3, #31
 800bc84:	d403      	bmi.n	800bc8e <__lo0bits+0x4e>
 800bc86:	085b      	lsrs	r3, r3, #1
 800bc88:	f100 0001 	add.w	r0, r0, #1
 800bc8c:	d003      	beq.n	800bc96 <__lo0bits+0x56>
 800bc8e:	6013      	str	r3, [r2, #0]
 800bc90:	4770      	bx	lr
 800bc92:	2000      	movs	r0, #0
 800bc94:	4770      	bx	lr
 800bc96:	2020      	movs	r0, #32
 800bc98:	4770      	bx	lr
	...

0800bc9c <__i2b>:
 800bc9c:	b510      	push	{r4, lr}
 800bc9e:	460c      	mov	r4, r1
 800bca0:	2101      	movs	r1, #1
 800bca2:	f7ff febb 	bl	800ba1c <_Balloc>
 800bca6:	4602      	mov	r2, r0
 800bca8:	b928      	cbnz	r0, 800bcb6 <__i2b+0x1a>
 800bcaa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bcae:	4b04      	ldr	r3, [pc, #16]	; (800bcc0 <__i2b+0x24>)
 800bcb0:	4804      	ldr	r0, [pc, #16]	; (800bcc4 <__i2b+0x28>)
 800bcb2:	f000 fdef 	bl	800c894 <__assert_func>
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	6144      	str	r4, [r0, #20]
 800bcba:	6103      	str	r3, [r0, #16]
 800bcbc:	bd10      	pop	{r4, pc}
 800bcbe:	bf00      	nop
 800bcc0:	0801f000 	.word	0x0801f000
 800bcc4:	0801f08c 	.word	0x0801f08c

0800bcc8 <__multiply>:
 800bcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bccc:	4691      	mov	r9, r2
 800bcce:	690a      	ldr	r2, [r1, #16]
 800bcd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bcd4:	460c      	mov	r4, r1
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	bfbe      	ittt	lt
 800bcda:	460b      	movlt	r3, r1
 800bcdc:	464c      	movlt	r4, r9
 800bcde:	4699      	movlt	r9, r3
 800bce0:	6927      	ldr	r7, [r4, #16]
 800bce2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bce6:	68a3      	ldr	r3, [r4, #8]
 800bce8:	6861      	ldr	r1, [r4, #4]
 800bcea:	eb07 060a 	add.w	r6, r7, sl
 800bcee:	42b3      	cmp	r3, r6
 800bcf0:	b085      	sub	sp, #20
 800bcf2:	bfb8      	it	lt
 800bcf4:	3101      	addlt	r1, #1
 800bcf6:	f7ff fe91 	bl	800ba1c <_Balloc>
 800bcfa:	b930      	cbnz	r0, 800bd0a <__multiply+0x42>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	f240 115d 	movw	r1, #349	; 0x15d
 800bd02:	4b43      	ldr	r3, [pc, #268]	; (800be10 <__multiply+0x148>)
 800bd04:	4843      	ldr	r0, [pc, #268]	; (800be14 <__multiply+0x14c>)
 800bd06:	f000 fdc5 	bl	800c894 <__assert_func>
 800bd0a:	f100 0514 	add.w	r5, r0, #20
 800bd0e:	462b      	mov	r3, r5
 800bd10:	2200      	movs	r2, #0
 800bd12:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd16:	4543      	cmp	r3, r8
 800bd18:	d321      	bcc.n	800bd5e <__multiply+0x96>
 800bd1a:	f104 0314 	add.w	r3, r4, #20
 800bd1e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd22:	f109 0314 	add.w	r3, r9, #20
 800bd26:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd2a:	9202      	str	r2, [sp, #8]
 800bd2c:	1b3a      	subs	r2, r7, r4
 800bd2e:	3a15      	subs	r2, #21
 800bd30:	f022 0203 	bic.w	r2, r2, #3
 800bd34:	3204      	adds	r2, #4
 800bd36:	f104 0115 	add.w	r1, r4, #21
 800bd3a:	428f      	cmp	r7, r1
 800bd3c:	bf38      	it	cc
 800bd3e:	2204      	movcc	r2, #4
 800bd40:	9201      	str	r2, [sp, #4]
 800bd42:	9a02      	ldr	r2, [sp, #8]
 800bd44:	9303      	str	r3, [sp, #12]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d80c      	bhi.n	800bd64 <__multiply+0x9c>
 800bd4a:	2e00      	cmp	r6, #0
 800bd4c:	dd03      	ble.n	800bd56 <__multiply+0x8e>
 800bd4e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d059      	beq.n	800be0a <__multiply+0x142>
 800bd56:	6106      	str	r6, [r0, #16]
 800bd58:	b005      	add	sp, #20
 800bd5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd5e:	f843 2b04 	str.w	r2, [r3], #4
 800bd62:	e7d8      	b.n	800bd16 <__multiply+0x4e>
 800bd64:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd68:	f1ba 0f00 	cmp.w	sl, #0
 800bd6c:	d023      	beq.n	800bdb6 <__multiply+0xee>
 800bd6e:	46a9      	mov	r9, r5
 800bd70:	f04f 0c00 	mov.w	ip, #0
 800bd74:	f104 0e14 	add.w	lr, r4, #20
 800bd78:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd7c:	f8d9 1000 	ldr.w	r1, [r9]
 800bd80:	fa1f fb82 	uxth.w	fp, r2
 800bd84:	b289      	uxth	r1, r1
 800bd86:	fb0a 110b 	mla	r1, sl, fp, r1
 800bd8a:	4461      	add	r1, ip
 800bd8c:	f8d9 c000 	ldr.w	ip, [r9]
 800bd90:	0c12      	lsrs	r2, r2, #16
 800bd92:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bd96:	fb0a c202 	mla	r2, sl, r2, ip
 800bd9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd9e:	b289      	uxth	r1, r1
 800bda0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bda4:	4577      	cmp	r7, lr
 800bda6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdaa:	f849 1b04 	str.w	r1, [r9], #4
 800bdae:	d8e3      	bhi.n	800bd78 <__multiply+0xb0>
 800bdb0:	9a01      	ldr	r2, [sp, #4]
 800bdb2:	f845 c002 	str.w	ip, [r5, r2]
 800bdb6:	9a03      	ldr	r2, [sp, #12]
 800bdb8:	3304      	adds	r3, #4
 800bdba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bdbe:	f1b9 0f00 	cmp.w	r9, #0
 800bdc2:	d020      	beq.n	800be06 <__multiply+0x13e>
 800bdc4:	46ae      	mov	lr, r5
 800bdc6:	f04f 0a00 	mov.w	sl, #0
 800bdca:	6829      	ldr	r1, [r5, #0]
 800bdcc:	f104 0c14 	add.w	ip, r4, #20
 800bdd0:	f8bc b000 	ldrh.w	fp, [ip]
 800bdd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bdd8:	b289      	uxth	r1, r1
 800bdda:	fb09 220b 	mla	r2, r9, fp, r2
 800bdde:	4492      	add	sl, r2
 800bde0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bde4:	f84e 1b04 	str.w	r1, [lr], #4
 800bde8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bdec:	f8be 1000 	ldrh.w	r1, [lr]
 800bdf0:	0c12      	lsrs	r2, r2, #16
 800bdf2:	fb09 1102 	mla	r1, r9, r2, r1
 800bdf6:	4567      	cmp	r7, ip
 800bdf8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bdfc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be00:	d8e6      	bhi.n	800bdd0 <__multiply+0x108>
 800be02:	9a01      	ldr	r2, [sp, #4]
 800be04:	50a9      	str	r1, [r5, r2]
 800be06:	3504      	adds	r5, #4
 800be08:	e79b      	b.n	800bd42 <__multiply+0x7a>
 800be0a:	3e01      	subs	r6, #1
 800be0c:	e79d      	b.n	800bd4a <__multiply+0x82>
 800be0e:	bf00      	nop
 800be10:	0801f000 	.word	0x0801f000
 800be14:	0801f08c 	.word	0x0801f08c

0800be18 <__pow5mult>:
 800be18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be1c:	4615      	mov	r5, r2
 800be1e:	f012 0203 	ands.w	r2, r2, #3
 800be22:	4606      	mov	r6, r0
 800be24:	460f      	mov	r7, r1
 800be26:	d007      	beq.n	800be38 <__pow5mult+0x20>
 800be28:	4c25      	ldr	r4, [pc, #148]	; (800bec0 <__pow5mult+0xa8>)
 800be2a:	3a01      	subs	r2, #1
 800be2c:	2300      	movs	r3, #0
 800be2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be32:	f7ff fe55 	bl	800bae0 <__multadd>
 800be36:	4607      	mov	r7, r0
 800be38:	10ad      	asrs	r5, r5, #2
 800be3a:	d03d      	beq.n	800beb8 <__pow5mult+0xa0>
 800be3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be3e:	b97c      	cbnz	r4, 800be60 <__pow5mult+0x48>
 800be40:	2010      	movs	r0, #16
 800be42:	f7ff fdb5 	bl	800b9b0 <malloc>
 800be46:	4602      	mov	r2, r0
 800be48:	6270      	str	r0, [r6, #36]	; 0x24
 800be4a:	b928      	cbnz	r0, 800be58 <__pow5mult+0x40>
 800be4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be50:	4b1c      	ldr	r3, [pc, #112]	; (800bec4 <__pow5mult+0xac>)
 800be52:	481d      	ldr	r0, [pc, #116]	; (800bec8 <__pow5mult+0xb0>)
 800be54:	f000 fd1e 	bl	800c894 <__assert_func>
 800be58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be5c:	6004      	str	r4, [r0, #0]
 800be5e:	60c4      	str	r4, [r0, #12]
 800be60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be68:	b94c      	cbnz	r4, 800be7e <__pow5mult+0x66>
 800be6a:	f240 2171 	movw	r1, #625	; 0x271
 800be6e:	4630      	mov	r0, r6
 800be70:	f7ff ff14 	bl	800bc9c <__i2b>
 800be74:	2300      	movs	r3, #0
 800be76:	4604      	mov	r4, r0
 800be78:	f8c8 0008 	str.w	r0, [r8, #8]
 800be7c:	6003      	str	r3, [r0, #0]
 800be7e:	f04f 0900 	mov.w	r9, #0
 800be82:	07eb      	lsls	r3, r5, #31
 800be84:	d50a      	bpl.n	800be9c <__pow5mult+0x84>
 800be86:	4639      	mov	r1, r7
 800be88:	4622      	mov	r2, r4
 800be8a:	4630      	mov	r0, r6
 800be8c:	f7ff ff1c 	bl	800bcc8 <__multiply>
 800be90:	4680      	mov	r8, r0
 800be92:	4639      	mov	r1, r7
 800be94:	4630      	mov	r0, r6
 800be96:	f7ff fe01 	bl	800ba9c <_Bfree>
 800be9a:	4647      	mov	r7, r8
 800be9c:	106d      	asrs	r5, r5, #1
 800be9e:	d00b      	beq.n	800beb8 <__pow5mult+0xa0>
 800bea0:	6820      	ldr	r0, [r4, #0]
 800bea2:	b938      	cbnz	r0, 800beb4 <__pow5mult+0x9c>
 800bea4:	4622      	mov	r2, r4
 800bea6:	4621      	mov	r1, r4
 800bea8:	4630      	mov	r0, r6
 800beaa:	f7ff ff0d 	bl	800bcc8 <__multiply>
 800beae:	6020      	str	r0, [r4, #0]
 800beb0:	f8c0 9000 	str.w	r9, [r0]
 800beb4:	4604      	mov	r4, r0
 800beb6:	e7e4      	b.n	800be82 <__pow5mult+0x6a>
 800beb8:	4638      	mov	r0, r7
 800beba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bebe:	bf00      	nop
 800bec0:	0801f1d8 	.word	0x0801f1d8
 800bec4:	0801ef8e 	.word	0x0801ef8e
 800bec8:	0801f08c 	.word	0x0801f08c

0800becc <__lshift>:
 800becc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bed0:	460c      	mov	r4, r1
 800bed2:	4607      	mov	r7, r0
 800bed4:	4691      	mov	r9, r2
 800bed6:	6923      	ldr	r3, [r4, #16]
 800bed8:	6849      	ldr	r1, [r1, #4]
 800beda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bede:	68a3      	ldr	r3, [r4, #8]
 800bee0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bee4:	f108 0601 	add.w	r6, r8, #1
 800bee8:	42b3      	cmp	r3, r6
 800beea:	db0b      	blt.n	800bf04 <__lshift+0x38>
 800beec:	4638      	mov	r0, r7
 800beee:	f7ff fd95 	bl	800ba1c <_Balloc>
 800bef2:	4605      	mov	r5, r0
 800bef4:	b948      	cbnz	r0, 800bf0a <__lshift+0x3e>
 800bef6:	4602      	mov	r2, r0
 800bef8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800befc:	4b29      	ldr	r3, [pc, #164]	; (800bfa4 <__lshift+0xd8>)
 800befe:	482a      	ldr	r0, [pc, #168]	; (800bfa8 <__lshift+0xdc>)
 800bf00:	f000 fcc8 	bl	800c894 <__assert_func>
 800bf04:	3101      	adds	r1, #1
 800bf06:	005b      	lsls	r3, r3, #1
 800bf08:	e7ee      	b.n	800bee8 <__lshift+0x1c>
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	f100 0114 	add.w	r1, r0, #20
 800bf10:	f100 0210 	add.w	r2, r0, #16
 800bf14:	4618      	mov	r0, r3
 800bf16:	4553      	cmp	r3, sl
 800bf18:	db37      	blt.n	800bf8a <__lshift+0xbe>
 800bf1a:	6920      	ldr	r0, [r4, #16]
 800bf1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf20:	f104 0314 	add.w	r3, r4, #20
 800bf24:	f019 091f 	ands.w	r9, r9, #31
 800bf28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bf30:	d02f      	beq.n	800bf92 <__lshift+0xc6>
 800bf32:	468a      	mov	sl, r1
 800bf34:	f04f 0c00 	mov.w	ip, #0
 800bf38:	f1c9 0e20 	rsb	lr, r9, #32
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	fa02 f209 	lsl.w	r2, r2, r9
 800bf42:	ea42 020c 	orr.w	r2, r2, ip
 800bf46:	f84a 2b04 	str.w	r2, [sl], #4
 800bf4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf4e:	4298      	cmp	r0, r3
 800bf50:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bf54:	d8f2      	bhi.n	800bf3c <__lshift+0x70>
 800bf56:	1b03      	subs	r3, r0, r4
 800bf58:	3b15      	subs	r3, #21
 800bf5a:	f023 0303 	bic.w	r3, r3, #3
 800bf5e:	3304      	adds	r3, #4
 800bf60:	f104 0215 	add.w	r2, r4, #21
 800bf64:	4290      	cmp	r0, r2
 800bf66:	bf38      	it	cc
 800bf68:	2304      	movcc	r3, #4
 800bf6a:	f841 c003 	str.w	ip, [r1, r3]
 800bf6e:	f1bc 0f00 	cmp.w	ip, #0
 800bf72:	d001      	beq.n	800bf78 <__lshift+0xac>
 800bf74:	f108 0602 	add.w	r6, r8, #2
 800bf78:	3e01      	subs	r6, #1
 800bf7a:	4638      	mov	r0, r7
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	612e      	str	r6, [r5, #16]
 800bf80:	f7ff fd8c 	bl	800ba9c <_Bfree>
 800bf84:	4628      	mov	r0, r5
 800bf86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf8a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf8e:	3301      	adds	r3, #1
 800bf90:	e7c1      	b.n	800bf16 <__lshift+0x4a>
 800bf92:	3904      	subs	r1, #4
 800bf94:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf98:	4298      	cmp	r0, r3
 800bf9a:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf9e:	d8f9      	bhi.n	800bf94 <__lshift+0xc8>
 800bfa0:	e7ea      	b.n	800bf78 <__lshift+0xac>
 800bfa2:	bf00      	nop
 800bfa4:	0801f000 	.word	0x0801f000
 800bfa8:	0801f08c 	.word	0x0801f08c

0800bfac <__mcmp>:
 800bfac:	4603      	mov	r3, r0
 800bfae:	690a      	ldr	r2, [r1, #16]
 800bfb0:	6900      	ldr	r0, [r0, #16]
 800bfb2:	b530      	push	{r4, r5, lr}
 800bfb4:	1a80      	subs	r0, r0, r2
 800bfb6:	d10d      	bne.n	800bfd4 <__mcmp+0x28>
 800bfb8:	3314      	adds	r3, #20
 800bfba:	3114      	adds	r1, #20
 800bfbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bfc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bfc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bfc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bfcc:	4295      	cmp	r5, r2
 800bfce:	d002      	beq.n	800bfd6 <__mcmp+0x2a>
 800bfd0:	d304      	bcc.n	800bfdc <__mcmp+0x30>
 800bfd2:	2001      	movs	r0, #1
 800bfd4:	bd30      	pop	{r4, r5, pc}
 800bfd6:	42a3      	cmp	r3, r4
 800bfd8:	d3f4      	bcc.n	800bfc4 <__mcmp+0x18>
 800bfda:	e7fb      	b.n	800bfd4 <__mcmp+0x28>
 800bfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe0:	e7f8      	b.n	800bfd4 <__mcmp+0x28>
	...

0800bfe4 <__mdiff>:
 800bfe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe8:	460d      	mov	r5, r1
 800bfea:	4607      	mov	r7, r0
 800bfec:	4611      	mov	r1, r2
 800bfee:	4628      	mov	r0, r5
 800bff0:	4614      	mov	r4, r2
 800bff2:	f7ff ffdb 	bl	800bfac <__mcmp>
 800bff6:	1e06      	subs	r6, r0, #0
 800bff8:	d111      	bne.n	800c01e <__mdiff+0x3a>
 800bffa:	4631      	mov	r1, r6
 800bffc:	4638      	mov	r0, r7
 800bffe:	f7ff fd0d 	bl	800ba1c <_Balloc>
 800c002:	4602      	mov	r2, r0
 800c004:	b928      	cbnz	r0, 800c012 <__mdiff+0x2e>
 800c006:	f240 2132 	movw	r1, #562	; 0x232
 800c00a:	4b3a      	ldr	r3, [pc, #232]	; (800c0f4 <__mdiff+0x110>)
 800c00c:	483a      	ldr	r0, [pc, #232]	; (800c0f8 <__mdiff+0x114>)
 800c00e:	f000 fc41 	bl	800c894 <__assert_func>
 800c012:	2301      	movs	r3, #1
 800c014:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c018:	4610      	mov	r0, r2
 800c01a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c01e:	bfa4      	itt	ge
 800c020:	4623      	movge	r3, r4
 800c022:	462c      	movge	r4, r5
 800c024:	4638      	mov	r0, r7
 800c026:	6861      	ldr	r1, [r4, #4]
 800c028:	bfa6      	itte	ge
 800c02a:	461d      	movge	r5, r3
 800c02c:	2600      	movge	r6, #0
 800c02e:	2601      	movlt	r6, #1
 800c030:	f7ff fcf4 	bl	800ba1c <_Balloc>
 800c034:	4602      	mov	r2, r0
 800c036:	b918      	cbnz	r0, 800c040 <__mdiff+0x5c>
 800c038:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c03c:	4b2d      	ldr	r3, [pc, #180]	; (800c0f4 <__mdiff+0x110>)
 800c03e:	e7e5      	b.n	800c00c <__mdiff+0x28>
 800c040:	f102 0814 	add.w	r8, r2, #20
 800c044:	46c2      	mov	sl, r8
 800c046:	f04f 0c00 	mov.w	ip, #0
 800c04a:	6927      	ldr	r7, [r4, #16]
 800c04c:	60c6      	str	r6, [r0, #12]
 800c04e:	692e      	ldr	r6, [r5, #16]
 800c050:	f104 0014 	add.w	r0, r4, #20
 800c054:	f105 0914 	add.w	r9, r5, #20
 800c058:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c05c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c060:	3410      	adds	r4, #16
 800c062:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c066:	f859 3b04 	ldr.w	r3, [r9], #4
 800c06a:	fa1f f18b 	uxth.w	r1, fp
 800c06e:	448c      	add	ip, r1
 800c070:	b299      	uxth	r1, r3
 800c072:	0c1b      	lsrs	r3, r3, #16
 800c074:	ebac 0101 	sub.w	r1, ip, r1
 800c078:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c07c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c080:	b289      	uxth	r1, r1
 800c082:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c086:	454e      	cmp	r6, r9
 800c088:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c08c:	f84a 3b04 	str.w	r3, [sl], #4
 800c090:	d8e7      	bhi.n	800c062 <__mdiff+0x7e>
 800c092:	1b73      	subs	r3, r6, r5
 800c094:	3b15      	subs	r3, #21
 800c096:	f023 0303 	bic.w	r3, r3, #3
 800c09a:	3515      	adds	r5, #21
 800c09c:	3304      	adds	r3, #4
 800c09e:	42ae      	cmp	r6, r5
 800c0a0:	bf38      	it	cc
 800c0a2:	2304      	movcc	r3, #4
 800c0a4:	4418      	add	r0, r3
 800c0a6:	4443      	add	r3, r8
 800c0a8:	461e      	mov	r6, r3
 800c0aa:	4605      	mov	r5, r0
 800c0ac:	4575      	cmp	r5, lr
 800c0ae:	d30e      	bcc.n	800c0ce <__mdiff+0xea>
 800c0b0:	f10e 0103 	add.w	r1, lr, #3
 800c0b4:	1a09      	subs	r1, r1, r0
 800c0b6:	f021 0103 	bic.w	r1, r1, #3
 800c0ba:	3803      	subs	r0, #3
 800c0bc:	4586      	cmp	lr, r0
 800c0be:	bf38      	it	cc
 800c0c0:	2100      	movcc	r1, #0
 800c0c2:	4419      	add	r1, r3
 800c0c4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c0c8:	b18b      	cbz	r3, 800c0ee <__mdiff+0x10a>
 800c0ca:	6117      	str	r7, [r2, #16]
 800c0cc:	e7a4      	b.n	800c018 <__mdiff+0x34>
 800c0ce:	f855 8b04 	ldr.w	r8, [r5], #4
 800c0d2:	fa1f f188 	uxth.w	r1, r8
 800c0d6:	4461      	add	r1, ip
 800c0d8:	140c      	asrs	r4, r1, #16
 800c0da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c0de:	b289      	uxth	r1, r1
 800c0e0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c0e4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c0e8:	f846 1b04 	str.w	r1, [r6], #4
 800c0ec:	e7de      	b.n	800c0ac <__mdiff+0xc8>
 800c0ee:	3f01      	subs	r7, #1
 800c0f0:	e7e8      	b.n	800c0c4 <__mdiff+0xe0>
 800c0f2:	bf00      	nop
 800c0f4:	0801f000 	.word	0x0801f000
 800c0f8:	0801f08c 	.word	0x0801f08c

0800c0fc <__ulp>:
 800c0fc:	4b11      	ldr	r3, [pc, #68]	; (800c144 <__ulp+0x48>)
 800c0fe:	400b      	ands	r3, r1
 800c100:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c104:	2b00      	cmp	r3, #0
 800c106:	dd02      	ble.n	800c10e <__ulp+0x12>
 800c108:	2000      	movs	r0, #0
 800c10a:	4619      	mov	r1, r3
 800c10c:	4770      	bx	lr
 800c10e:	425b      	negs	r3, r3
 800c110:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c114:	f04f 0000 	mov.w	r0, #0
 800c118:	f04f 0100 	mov.w	r1, #0
 800c11c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c120:	da04      	bge.n	800c12c <__ulp+0x30>
 800c122:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c126:	fa43 f102 	asr.w	r1, r3, r2
 800c12a:	4770      	bx	lr
 800c12c:	f1a2 0314 	sub.w	r3, r2, #20
 800c130:	2b1e      	cmp	r3, #30
 800c132:	bfd6      	itet	le
 800c134:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c138:	2301      	movgt	r3, #1
 800c13a:	fa22 f303 	lsrle.w	r3, r2, r3
 800c13e:	4618      	mov	r0, r3
 800c140:	4770      	bx	lr
 800c142:	bf00      	nop
 800c144:	7ff00000 	.word	0x7ff00000

0800c148 <__b2d>:
 800c148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c14c:	6907      	ldr	r7, [r0, #16]
 800c14e:	f100 0914 	add.w	r9, r0, #20
 800c152:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c156:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c15a:	f1a7 0804 	sub.w	r8, r7, #4
 800c15e:	4630      	mov	r0, r6
 800c160:	f7ff fd4e 	bl	800bc00 <__hi0bits>
 800c164:	f1c0 0320 	rsb	r3, r0, #32
 800c168:	280a      	cmp	r0, #10
 800c16a:	600b      	str	r3, [r1, #0]
 800c16c:	491f      	ldr	r1, [pc, #124]	; (800c1ec <__b2d+0xa4>)
 800c16e:	dc17      	bgt.n	800c1a0 <__b2d+0x58>
 800c170:	45c1      	cmp	r9, r8
 800c172:	bf28      	it	cs
 800c174:	2200      	movcs	r2, #0
 800c176:	f1c0 0c0b 	rsb	ip, r0, #11
 800c17a:	fa26 f30c 	lsr.w	r3, r6, ip
 800c17e:	bf38      	it	cc
 800c180:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c184:	ea43 0501 	orr.w	r5, r3, r1
 800c188:	f100 0315 	add.w	r3, r0, #21
 800c18c:	fa06 f303 	lsl.w	r3, r6, r3
 800c190:	fa22 f20c 	lsr.w	r2, r2, ip
 800c194:	ea43 0402 	orr.w	r4, r3, r2
 800c198:	4620      	mov	r0, r4
 800c19a:	4629      	mov	r1, r5
 800c19c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1a0:	45c1      	cmp	r9, r8
 800c1a2:	bf2e      	itee	cs
 800c1a4:	2200      	movcs	r2, #0
 800c1a6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c1aa:	f1a7 0808 	subcc.w	r8, r7, #8
 800c1ae:	f1b0 030b 	subs.w	r3, r0, #11
 800c1b2:	d016      	beq.n	800c1e2 <__b2d+0x9a>
 800c1b4:	f1c3 0720 	rsb	r7, r3, #32
 800c1b8:	fa22 f107 	lsr.w	r1, r2, r7
 800c1bc:	45c8      	cmp	r8, r9
 800c1be:	fa06 f603 	lsl.w	r6, r6, r3
 800c1c2:	ea46 0601 	orr.w	r6, r6, r1
 800c1c6:	bf94      	ite	ls
 800c1c8:	2100      	movls	r1, #0
 800c1ca:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c1ce:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c1d2:	fa02 f003 	lsl.w	r0, r2, r3
 800c1d6:	40f9      	lsrs	r1, r7
 800c1d8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c1dc:	ea40 0401 	orr.w	r4, r0, r1
 800c1e0:	e7da      	b.n	800c198 <__b2d+0x50>
 800c1e2:	4614      	mov	r4, r2
 800c1e4:	ea46 0501 	orr.w	r5, r6, r1
 800c1e8:	e7d6      	b.n	800c198 <__b2d+0x50>
 800c1ea:	bf00      	nop
 800c1ec:	3ff00000 	.word	0x3ff00000

0800c1f0 <__d2b>:
 800c1f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c1f4:	2101      	movs	r1, #1
 800c1f6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c1fa:	4690      	mov	r8, r2
 800c1fc:	461d      	mov	r5, r3
 800c1fe:	f7ff fc0d 	bl	800ba1c <_Balloc>
 800c202:	4604      	mov	r4, r0
 800c204:	b930      	cbnz	r0, 800c214 <__d2b+0x24>
 800c206:	4602      	mov	r2, r0
 800c208:	f240 310a 	movw	r1, #778	; 0x30a
 800c20c:	4b24      	ldr	r3, [pc, #144]	; (800c2a0 <__d2b+0xb0>)
 800c20e:	4825      	ldr	r0, [pc, #148]	; (800c2a4 <__d2b+0xb4>)
 800c210:	f000 fb40 	bl	800c894 <__assert_func>
 800c214:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c218:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c21c:	bb2d      	cbnz	r5, 800c26a <__d2b+0x7a>
 800c21e:	9301      	str	r3, [sp, #4]
 800c220:	f1b8 0300 	subs.w	r3, r8, #0
 800c224:	d026      	beq.n	800c274 <__d2b+0x84>
 800c226:	4668      	mov	r0, sp
 800c228:	9300      	str	r3, [sp, #0]
 800c22a:	f7ff fd09 	bl	800bc40 <__lo0bits>
 800c22e:	9900      	ldr	r1, [sp, #0]
 800c230:	b1f0      	cbz	r0, 800c270 <__d2b+0x80>
 800c232:	9a01      	ldr	r2, [sp, #4]
 800c234:	f1c0 0320 	rsb	r3, r0, #32
 800c238:	fa02 f303 	lsl.w	r3, r2, r3
 800c23c:	430b      	orrs	r3, r1
 800c23e:	40c2      	lsrs	r2, r0
 800c240:	6163      	str	r3, [r4, #20]
 800c242:	9201      	str	r2, [sp, #4]
 800c244:	9b01      	ldr	r3, [sp, #4]
 800c246:	2b00      	cmp	r3, #0
 800c248:	bf14      	ite	ne
 800c24a:	2102      	movne	r1, #2
 800c24c:	2101      	moveq	r1, #1
 800c24e:	61a3      	str	r3, [r4, #24]
 800c250:	6121      	str	r1, [r4, #16]
 800c252:	b1c5      	cbz	r5, 800c286 <__d2b+0x96>
 800c254:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c258:	4405      	add	r5, r0
 800c25a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c25e:	603d      	str	r5, [r7, #0]
 800c260:	6030      	str	r0, [r6, #0]
 800c262:	4620      	mov	r0, r4
 800c264:	b002      	add	sp, #8
 800c266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c26a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c26e:	e7d6      	b.n	800c21e <__d2b+0x2e>
 800c270:	6161      	str	r1, [r4, #20]
 800c272:	e7e7      	b.n	800c244 <__d2b+0x54>
 800c274:	a801      	add	r0, sp, #4
 800c276:	f7ff fce3 	bl	800bc40 <__lo0bits>
 800c27a:	2101      	movs	r1, #1
 800c27c:	9b01      	ldr	r3, [sp, #4]
 800c27e:	6121      	str	r1, [r4, #16]
 800c280:	6163      	str	r3, [r4, #20]
 800c282:	3020      	adds	r0, #32
 800c284:	e7e5      	b.n	800c252 <__d2b+0x62>
 800c286:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c28a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c28e:	6038      	str	r0, [r7, #0]
 800c290:	6918      	ldr	r0, [r3, #16]
 800c292:	f7ff fcb5 	bl	800bc00 <__hi0bits>
 800c296:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c29a:	6031      	str	r1, [r6, #0]
 800c29c:	e7e1      	b.n	800c262 <__d2b+0x72>
 800c29e:	bf00      	nop
 800c2a0:	0801f000 	.word	0x0801f000
 800c2a4:	0801f08c 	.word	0x0801f08c

0800c2a8 <__ratio>:
 800c2a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ac:	4688      	mov	r8, r1
 800c2ae:	4669      	mov	r1, sp
 800c2b0:	4681      	mov	r9, r0
 800c2b2:	f7ff ff49 	bl	800c148 <__b2d>
 800c2b6:	460f      	mov	r7, r1
 800c2b8:	4604      	mov	r4, r0
 800c2ba:	460d      	mov	r5, r1
 800c2bc:	4640      	mov	r0, r8
 800c2be:	a901      	add	r1, sp, #4
 800c2c0:	f7ff ff42 	bl	800c148 <__b2d>
 800c2c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c2c8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c2cc:	468b      	mov	fp, r1
 800c2ce:	eba3 0c02 	sub.w	ip, r3, r2
 800c2d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c2d6:	1a9b      	subs	r3, r3, r2
 800c2d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	bfd5      	itete	le
 800c2e0:	460a      	movle	r2, r1
 800c2e2:	462a      	movgt	r2, r5
 800c2e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c2e8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c2ec:	bfd8      	it	le
 800c2ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c2f2:	465b      	mov	r3, fp
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	4639      	mov	r1, r7
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	f7fa f855 	bl	80063a8 <__aeabi_ddiv>
 800c2fe:	b003      	add	sp, #12
 800c300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c304 <__copybits>:
 800c304:	3901      	subs	r1, #1
 800c306:	b570      	push	{r4, r5, r6, lr}
 800c308:	1149      	asrs	r1, r1, #5
 800c30a:	6914      	ldr	r4, [r2, #16]
 800c30c:	3101      	adds	r1, #1
 800c30e:	f102 0314 	add.w	r3, r2, #20
 800c312:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c316:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c31a:	1f05      	subs	r5, r0, #4
 800c31c:	42a3      	cmp	r3, r4
 800c31e:	d30c      	bcc.n	800c33a <__copybits+0x36>
 800c320:	1aa3      	subs	r3, r4, r2
 800c322:	3b11      	subs	r3, #17
 800c324:	f023 0303 	bic.w	r3, r3, #3
 800c328:	3211      	adds	r2, #17
 800c32a:	42a2      	cmp	r2, r4
 800c32c:	bf88      	it	hi
 800c32e:	2300      	movhi	r3, #0
 800c330:	4418      	add	r0, r3
 800c332:	2300      	movs	r3, #0
 800c334:	4288      	cmp	r0, r1
 800c336:	d305      	bcc.n	800c344 <__copybits+0x40>
 800c338:	bd70      	pop	{r4, r5, r6, pc}
 800c33a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c33e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c342:	e7eb      	b.n	800c31c <__copybits+0x18>
 800c344:	f840 3b04 	str.w	r3, [r0], #4
 800c348:	e7f4      	b.n	800c334 <__copybits+0x30>

0800c34a <__any_on>:
 800c34a:	f100 0214 	add.w	r2, r0, #20
 800c34e:	6900      	ldr	r0, [r0, #16]
 800c350:	114b      	asrs	r3, r1, #5
 800c352:	4298      	cmp	r0, r3
 800c354:	b510      	push	{r4, lr}
 800c356:	db11      	blt.n	800c37c <__any_on+0x32>
 800c358:	dd0a      	ble.n	800c370 <__any_on+0x26>
 800c35a:	f011 011f 	ands.w	r1, r1, #31
 800c35e:	d007      	beq.n	800c370 <__any_on+0x26>
 800c360:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c364:	fa24 f001 	lsr.w	r0, r4, r1
 800c368:	fa00 f101 	lsl.w	r1, r0, r1
 800c36c:	428c      	cmp	r4, r1
 800c36e:	d10b      	bne.n	800c388 <__any_on+0x3e>
 800c370:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c374:	4293      	cmp	r3, r2
 800c376:	d803      	bhi.n	800c380 <__any_on+0x36>
 800c378:	2000      	movs	r0, #0
 800c37a:	bd10      	pop	{r4, pc}
 800c37c:	4603      	mov	r3, r0
 800c37e:	e7f7      	b.n	800c370 <__any_on+0x26>
 800c380:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c384:	2900      	cmp	r1, #0
 800c386:	d0f5      	beq.n	800c374 <__any_on+0x2a>
 800c388:	2001      	movs	r0, #1
 800c38a:	e7f6      	b.n	800c37a <__any_on+0x30>

0800c38c <_calloc_r>:
 800c38c:	b570      	push	{r4, r5, r6, lr}
 800c38e:	fba1 5402 	umull	r5, r4, r1, r2
 800c392:	b934      	cbnz	r4, 800c3a2 <_calloc_r+0x16>
 800c394:	4629      	mov	r1, r5
 800c396:	f000 f875 	bl	800c484 <_malloc_r>
 800c39a:	4606      	mov	r6, r0
 800c39c:	b928      	cbnz	r0, 800c3aa <_calloc_r+0x1e>
 800c39e:	4630      	mov	r0, r6
 800c3a0:	bd70      	pop	{r4, r5, r6, pc}
 800c3a2:	220c      	movs	r2, #12
 800c3a4:	2600      	movs	r6, #0
 800c3a6:	6002      	str	r2, [r0, #0]
 800c3a8:	e7f9      	b.n	800c39e <_calloc_r+0x12>
 800c3aa:	462a      	mov	r2, r5
 800c3ac:	4621      	mov	r1, r4
 800c3ae:	f7fc fbe5 	bl	8008b7c <memset>
 800c3b2:	e7f4      	b.n	800c39e <_calloc_r+0x12>

0800c3b4 <_free_r>:
 800c3b4:	b538      	push	{r3, r4, r5, lr}
 800c3b6:	4605      	mov	r5, r0
 800c3b8:	2900      	cmp	r1, #0
 800c3ba:	d040      	beq.n	800c43e <_free_r+0x8a>
 800c3bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3c0:	1f0c      	subs	r4, r1, #4
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	bfb8      	it	lt
 800c3c6:	18e4      	addlt	r4, r4, r3
 800c3c8:	f000 faae 	bl	800c928 <__malloc_lock>
 800c3cc:	4a1c      	ldr	r2, [pc, #112]	; (800c440 <_free_r+0x8c>)
 800c3ce:	6813      	ldr	r3, [r2, #0]
 800c3d0:	b933      	cbnz	r3, 800c3e0 <_free_r+0x2c>
 800c3d2:	6063      	str	r3, [r4, #4]
 800c3d4:	6014      	str	r4, [r2, #0]
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3dc:	f000 baaa 	b.w	800c934 <__malloc_unlock>
 800c3e0:	42a3      	cmp	r3, r4
 800c3e2:	d908      	bls.n	800c3f6 <_free_r+0x42>
 800c3e4:	6820      	ldr	r0, [r4, #0]
 800c3e6:	1821      	adds	r1, r4, r0
 800c3e8:	428b      	cmp	r3, r1
 800c3ea:	bf01      	itttt	eq
 800c3ec:	6819      	ldreq	r1, [r3, #0]
 800c3ee:	685b      	ldreq	r3, [r3, #4]
 800c3f0:	1809      	addeq	r1, r1, r0
 800c3f2:	6021      	streq	r1, [r4, #0]
 800c3f4:	e7ed      	b.n	800c3d2 <_free_r+0x1e>
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	b10b      	cbz	r3, 800c400 <_free_r+0x4c>
 800c3fc:	42a3      	cmp	r3, r4
 800c3fe:	d9fa      	bls.n	800c3f6 <_free_r+0x42>
 800c400:	6811      	ldr	r1, [r2, #0]
 800c402:	1850      	adds	r0, r2, r1
 800c404:	42a0      	cmp	r0, r4
 800c406:	d10b      	bne.n	800c420 <_free_r+0x6c>
 800c408:	6820      	ldr	r0, [r4, #0]
 800c40a:	4401      	add	r1, r0
 800c40c:	1850      	adds	r0, r2, r1
 800c40e:	4283      	cmp	r3, r0
 800c410:	6011      	str	r1, [r2, #0]
 800c412:	d1e0      	bne.n	800c3d6 <_free_r+0x22>
 800c414:	6818      	ldr	r0, [r3, #0]
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	4401      	add	r1, r0
 800c41a:	6011      	str	r1, [r2, #0]
 800c41c:	6053      	str	r3, [r2, #4]
 800c41e:	e7da      	b.n	800c3d6 <_free_r+0x22>
 800c420:	d902      	bls.n	800c428 <_free_r+0x74>
 800c422:	230c      	movs	r3, #12
 800c424:	602b      	str	r3, [r5, #0]
 800c426:	e7d6      	b.n	800c3d6 <_free_r+0x22>
 800c428:	6820      	ldr	r0, [r4, #0]
 800c42a:	1821      	adds	r1, r4, r0
 800c42c:	428b      	cmp	r3, r1
 800c42e:	bf01      	itttt	eq
 800c430:	6819      	ldreq	r1, [r3, #0]
 800c432:	685b      	ldreq	r3, [r3, #4]
 800c434:	1809      	addeq	r1, r1, r0
 800c436:	6021      	streq	r1, [r4, #0]
 800c438:	6063      	str	r3, [r4, #4]
 800c43a:	6054      	str	r4, [r2, #4]
 800c43c:	e7cb      	b.n	800c3d6 <_free_r+0x22>
 800c43e:	bd38      	pop	{r3, r4, r5, pc}
 800c440:	20000970 	.word	0x20000970

0800c444 <sbrk_aligned>:
 800c444:	b570      	push	{r4, r5, r6, lr}
 800c446:	4e0e      	ldr	r6, [pc, #56]	; (800c480 <sbrk_aligned+0x3c>)
 800c448:	460c      	mov	r4, r1
 800c44a:	6831      	ldr	r1, [r6, #0]
 800c44c:	4605      	mov	r5, r0
 800c44e:	b911      	cbnz	r1, 800c456 <sbrk_aligned+0x12>
 800c450:	f000 f9ee 	bl	800c830 <_sbrk_r>
 800c454:	6030      	str	r0, [r6, #0]
 800c456:	4621      	mov	r1, r4
 800c458:	4628      	mov	r0, r5
 800c45a:	f000 f9e9 	bl	800c830 <_sbrk_r>
 800c45e:	1c43      	adds	r3, r0, #1
 800c460:	d00a      	beq.n	800c478 <sbrk_aligned+0x34>
 800c462:	1cc4      	adds	r4, r0, #3
 800c464:	f024 0403 	bic.w	r4, r4, #3
 800c468:	42a0      	cmp	r0, r4
 800c46a:	d007      	beq.n	800c47c <sbrk_aligned+0x38>
 800c46c:	1a21      	subs	r1, r4, r0
 800c46e:	4628      	mov	r0, r5
 800c470:	f000 f9de 	bl	800c830 <_sbrk_r>
 800c474:	3001      	adds	r0, #1
 800c476:	d101      	bne.n	800c47c <sbrk_aligned+0x38>
 800c478:	f04f 34ff 	mov.w	r4, #4294967295
 800c47c:	4620      	mov	r0, r4
 800c47e:	bd70      	pop	{r4, r5, r6, pc}
 800c480:	20000974 	.word	0x20000974

0800c484 <_malloc_r>:
 800c484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c488:	1ccd      	adds	r5, r1, #3
 800c48a:	f025 0503 	bic.w	r5, r5, #3
 800c48e:	3508      	adds	r5, #8
 800c490:	2d0c      	cmp	r5, #12
 800c492:	bf38      	it	cc
 800c494:	250c      	movcc	r5, #12
 800c496:	2d00      	cmp	r5, #0
 800c498:	4607      	mov	r7, r0
 800c49a:	db01      	blt.n	800c4a0 <_malloc_r+0x1c>
 800c49c:	42a9      	cmp	r1, r5
 800c49e:	d905      	bls.n	800c4ac <_malloc_r+0x28>
 800c4a0:	230c      	movs	r3, #12
 800c4a2:	2600      	movs	r6, #0
 800c4a4:	603b      	str	r3, [r7, #0]
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4ac:	4e2e      	ldr	r6, [pc, #184]	; (800c568 <_malloc_r+0xe4>)
 800c4ae:	f000 fa3b 	bl	800c928 <__malloc_lock>
 800c4b2:	6833      	ldr	r3, [r6, #0]
 800c4b4:	461c      	mov	r4, r3
 800c4b6:	bb34      	cbnz	r4, 800c506 <_malloc_r+0x82>
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	4638      	mov	r0, r7
 800c4bc:	f7ff ffc2 	bl	800c444 <sbrk_aligned>
 800c4c0:	1c43      	adds	r3, r0, #1
 800c4c2:	4604      	mov	r4, r0
 800c4c4:	d14d      	bne.n	800c562 <_malloc_r+0xde>
 800c4c6:	6834      	ldr	r4, [r6, #0]
 800c4c8:	4626      	mov	r6, r4
 800c4ca:	2e00      	cmp	r6, #0
 800c4cc:	d140      	bne.n	800c550 <_malloc_r+0xcc>
 800c4ce:	6823      	ldr	r3, [r4, #0]
 800c4d0:	4631      	mov	r1, r6
 800c4d2:	4638      	mov	r0, r7
 800c4d4:	eb04 0803 	add.w	r8, r4, r3
 800c4d8:	f000 f9aa 	bl	800c830 <_sbrk_r>
 800c4dc:	4580      	cmp	r8, r0
 800c4de:	d13a      	bne.n	800c556 <_malloc_r+0xd2>
 800c4e0:	6821      	ldr	r1, [r4, #0]
 800c4e2:	3503      	adds	r5, #3
 800c4e4:	1a6d      	subs	r5, r5, r1
 800c4e6:	f025 0503 	bic.w	r5, r5, #3
 800c4ea:	3508      	adds	r5, #8
 800c4ec:	2d0c      	cmp	r5, #12
 800c4ee:	bf38      	it	cc
 800c4f0:	250c      	movcc	r5, #12
 800c4f2:	4638      	mov	r0, r7
 800c4f4:	4629      	mov	r1, r5
 800c4f6:	f7ff ffa5 	bl	800c444 <sbrk_aligned>
 800c4fa:	3001      	adds	r0, #1
 800c4fc:	d02b      	beq.n	800c556 <_malloc_r+0xd2>
 800c4fe:	6823      	ldr	r3, [r4, #0]
 800c500:	442b      	add	r3, r5
 800c502:	6023      	str	r3, [r4, #0]
 800c504:	e00e      	b.n	800c524 <_malloc_r+0xa0>
 800c506:	6822      	ldr	r2, [r4, #0]
 800c508:	1b52      	subs	r2, r2, r5
 800c50a:	d41e      	bmi.n	800c54a <_malloc_r+0xc6>
 800c50c:	2a0b      	cmp	r2, #11
 800c50e:	d916      	bls.n	800c53e <_malloc_r+0xba>
 800c510:	1961      	adds	r1, r4, r5
 800c512:	42a3      	cmp	r3, r4
 800c514:	6025      	str	r5, [r4, #0]
 800c516:	bf18      	it	ne
 800c518:	6059      	strne	r1, [r3, #4]
 800c51a:	6863      	ldr	r3, [r4, #4]
 800c51c:	bf08      	it	eq
 800c51e:	6031      	streq	r1, [r6, #0]
 800c520:	5162      	str	r2, [r4, r5]
 800c522:	604b      	str	r3, [r1, #4]
 800c524:	4638      	mov	r0, r7
 800c526:	f104 060b 	add.w	r6, r4, #11
 800c52a:	f000 fa03 	bl	800c934 <__malloc_unlock>
 800c52e:	f026 0607 	bic.w	r6, r6, #7
 800c532:	1d23      	adds	r3, r4, #4
 800c534:	1af2      	subs	r2, r6, r3
 800c536:	d0b6      	beq.n	800c4a6 <_malloc_r+0x22>
 800c538:	1b9b      	subs	r3, r3, r6
 800c53a:	50a3      	str	r3, [r4, r2]
 800c53c:	e7b3      	b.n	800c4a6 <_malloc_r+0x22>
 800c53e:	6862      	ldr	r2, [r4, #4]
 800c540:	42a3      	cmp	r3, r4
 800c542:	bf0c      	ite	eq
 800c544:	6032      	streq	r2, [r6, #0]
 800c546:	605a      	strne	r2, [r3, #4]
 800c548:	e7ec      	b.n	800c524 <_malloc_r+0xa0>
 800c54a:	4623      	mov	r3, r4
 800c54c:	6864      	ldr	r4, [r4, #4]
 800c54e:	e7b2      	b.n	800c4b6 <_malloc_r+0x32>
 800c550:	4634      	mov	r4, r6
 800c552:	6876      	ldr	r6, [r6, #4]
 800c554:	e7b9      	b.n	800c4ca <_malloc_r+0x46>
 800c556:	230c      	movs	r3, #12
 800c558:	4638      	mov	r0, r7
 800c55a:	603b      	str	r3, [r7, #0]
 800c55c:	f000 f9ea 	bl	800c934 <__malloc_unlock>
 800c560:	e7a1      	b.n	800c4a6 <_malloc_r+0x22>
 800c562:	6025      	str	r5, [r4, #0]
 800c564:	e7de      	b.n	800c524 <_malloc_r+0xa0>
 800c566:	bf00      	nop
 800c568:	20000970 	.word	0x20000970

0800c56c <__ssputs_r>:
 800c56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c570:	688e      	ldr	r6, [r1, #8]
 800c572:	4682      	mov	sl, r0
 800c574:	429e      	cmp	r6, r3
 800c576:	460c      	mov	r4, r1
 800c578:	4690      	mov	r8, r2
 800c57a:	461f      	mov	r7, r3
 800c57c:	d838      	bhi.n	800c5f0 <__ssputs_r+0x84>
 800c57e:	898a      	ldrh	r2, [r1, #12]
 800c580:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c584:	d032      	beq.n	800c5ec <__ssputs_r+0x80>
 800c586:	6825      	ldr	r5, [r4, #0]
 800c588:	6909      	ldr	r1, [r1, #16]
 800c58a:	3301      	adds	r3, #1
 800c58c:	eba5 0901 	sub.w	r9, r5, r1
 800c590:	6965      	ldr	r5, [r4, #20]
 800c592:	444b      	add	r3, r9
 800c594:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c598:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c59c:	106d      	asrs	r5, r5, #1
 800c59e:	429d      	cmp	r5, r3
 800c5a0:	bf38      	it	cc
 800c5a2:	461d      	movcc	r5, r3
 800c5a4:	0553      	lsls	r3, r2, #21
 800c5a6:	d531      	bpl.n	800c60c <__ssputs_r+0xa0>
 800c5a8:	4629      	mov	r1, r5
 800c5aa:	f7ff ff6b 	bl	800c484 <_malloc_r>
 800c5ae:	4606      	mov	r6, r0
 800c5b0:	b950      	cbnz	r0, 800c5c8 <__ssputs_r+0x5c>
 800c5b2:	230c      	movs	r3, #12
 800c5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b8:	f8ca 3000 	str.w	r3, [sl]
 800c5bc:	89a3      	ldrh	r3, [r4, #12]
 800c5be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5c2:	81a3      	strh	r3, [r4, #12]
 800c5c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5c8:	464a      	mov	r2, r9
 800c5ca:	6921      	ldr	r1, [r4, #16]
 800c5cc:	f7ff fa18 	bl	800ba00 <memcpy>
 800c5d0:	89a3      	ldrh	r3, [r4, #12]
 800c5d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5da:	81a3      	strh	r3, [r4, #12]
 800c5dc:	6126      	str	r6, [r4, #16]
 800c5de:	444e      	add	r6, r9
 800c5e0:	6026      	str	r6, [r4, #0]
 800c5e2:	463e      	mov	r6, r7
 800c5e4:	6165      	str	r5, [r4, #20]
 800c5e6:	eba5 0509 	sub.w	r5, r5, r9
 800c5ea:	60a5      	str	r5, [r4, #8]
 800c5ec:	42be      	cmp	r6, r7
 800c5ee:	d900      	bls.n	800c5f2 <__ssputs_r+0x86>
 800c5f0:	463e      	mov	r6, r7
 800c5f2:	4632      	mov	r2, r6
 800c5f4:	4641      	mov	r1, r8
 800c5f6:	6820      	ldr	r0, [r4, #0]
 800c5f8:	f000 f97c 	bl	800c8f4 <memmove>
 800c5fc:	68a3      	ldr	r3, [r4, #8]
 800c5fe:	2000      	movs	r0, #0
 800c600:	1b9b      	subs	r3, r3, r6
 800c602:	60a3      	str	r3, [r4, #8]
 800c604:	6823      	ldr	r3, [r4, #0]
 800c606:	4433      	add	r3, r6
 800c608:	6023      	str	r3, [r4, #0]
 800c60a:	e7db      	b.n	800c5c4 <__ssputs_r+0x58>
 800c60c:	462a      	mov	r2, r5
 800c60e:	f000 f997 	bl	800c940 <_realloc_r>
 800c612:	4606      	mov	r6, r0
 800c614:	2800      	cmp	r0, #0
 800c616:	d1e1      	bne.n	800c5dc <__ssputs_r+0x70>
 800c618:	4650      	mov	r0, sl
 800c61a:	6921      	ldr	r1, [r4, #16]
 800c61c:	f7ff feca 	bl	800c3b4 <_free_r>
 800c620:	e7c7      	b.n	800c5b2 <__ssputs_r+0x46>
	...

0800c624 <_svfiprintf_r>:
 800c624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c628:	4698      	mov	r8, r3
 800c62a:	898b      	ldrh	r3, [r1, #12]
 800c62c:	4607      	mov	r7, r0
 800c62e:	061b      	lsls	r3, r3, #24
 800c630:	460d      	mov	r5, r1
 800c632:	4614      	mov	r4, r2
 800c634:	b09d      	sub	sp, #116	; 0x74
 800c636:	d50e      	bpl.n	800c656 <_svfiprintf_r+0x32>
 800c638:	690b      	ldr	r3, [r1, #16]
 800c63a:	b963      	cbnz	r3, 800c656 <_svfiprintf_r+0x32>
 800c63c:	2140      	movs	r1, #64	; 0x40
 800c63e:	f7ff ff21 	bl	800c484 <_malloc_r>
 800c642:	6028      	str	r0, [r5, #0]
 800c644:	6128      	str	r0, [r5, #16]
 800c646:	b920      	cbnz	r0, 800c652 <_svfiprintf_r+0x2e>
 800c648:	230c      	movs	r3, #12
 800c64a:	603b      	str	r3, [r7, #0]
 800c64c:	f04f 30ff 	mov.w	r0, #4294967295
 800c650:	e0d1      	b.n	800c7f6 <_svfiprintf_r+0x1d2>
 800c652:	2340      	movs	r3, #64	; 0x40
 800c654:	616b      	str	r3, [r5, #20]
 800c656:	2300      	movs	r3, #0
 800c658:	9309      	str	r3, [sp, #36]	; 0x24
 800c65a:	2320      	movs	r3, #32
 800c65c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c660:	2330      	movs	r3, #48	; 0x30
 800c662:	f04f 0901 	mov.w	r9, #1
 800c666:	f8cd 800c 	str.w	r8, [sp, #12]
 800c66a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c810 <_svfiprintf_r+0x1ec>
 800c66e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c672:	4623      	mov	r3, r4
 800c674:	469a      	mov	sl, r3
 800c676:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c67a:	b10a      	cbz	r2, 800c680 <_svfiprintf_r+0x5c>
 800c67c:	2a25      	cmp	r2, #37	; 0x25
 800c67e:	d1f9      	bne.n	800c674 <_svfiprintf_r+0x50>
 800c680:	ebba 0b04 	subs.w	fp, sl, r4
 800c684:	d00b      	beq.n	800c69e <_svfiprintf_r+0x7a>
 800c686:	465b      	mov	r3, fp
 800c688:	4622      	mov	r2, r4
 800c68a:	4629      	mov	r1, r5
 800c68c:	4638      	mov	r0, r7
 800c68e:	f7ff ff6d 	bl	800c56c <__ssputs_r>
 800c692:	3001      	adds	r0, #1
 800c694:	f000 80aa 	beq.w	800c7ec <_svfiprintf_r+0x1c8>
 800c698:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c69a:	445a      	add	r2, fp
 800c69c:	9209      	str	r2, [sp, #36]	; 0x24
 800c69e:	f89a 3000 	ldrb.w	r3, [sl]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	f000 80a2 	beq.w	800c7ec <_svfiprintf_r+0x1c8>
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6b2:	f10a 0a01 	add.w	sl, sl, #1
 800c6b6:	9304      	str	r3, [sp, #16]
 800c6b8:	9307      	str	r3, [sp, #28]
 800c6ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6be:	931a      	str	r3, [sp, #104]	; 0x68
 800c6c0:	4654      	mov	r4, sl
 800c6c2:	2205      	movs	r2, #5
 800c6c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6c8:	4851      	ldr	r0, [pc, #324]	; (800c810 <_svfiprintf_r+0x1ec>)
 800c6ca:	f7ff f98b 	bl	800b9e4 <memchr>
 800c6ce:	9a04      	ldr	r2, [sp, #16]
 800c6d0:	b9d8      	cbnz	r0, 800c70a <_svfiprintf_r+0xe6>
 800c6d2:	06d0      	lsls	r0, r2, #27
 800c6d4:	bf44      	itt	mi
 800c6d6:	2320      	movmi	r3, #32
 800c6d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6dc:	0711      	lsls	r1, r2, #28
 800c6de:	bf44      	itt	mi
 800c6e0:	232b      	movmi	r3, #43	; 0x2b
 800c6e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6e6:	f89a 3000 	ldrb.w	r3, [sl]
 800c6ea:	2b2a      	cmp	r3, #42	; 0x2a
 800c6ec:	d015      	beq.n	800c71a <_svfiprintf_r+0xf6>
 800c6ee:	4654      	mov	r4, sl
 800c6f0:	2000      	movs	r0, #0
 800c6f2:	f04f 0c0a 	mov.w	ip, #10
 800c6f6:	9a07      	ldr	r2, [sp, #28]
 800c6f8:	4621      	mov	r1, r4
 800c6fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6fe:	3b30      	subs	r3, #48	; 0x30
 800c700:	2b09      	cmp	r3, #9
 800c702:	d94e      	bls.n	800c7a2 <_svfiprintf_r+0x17e>
 800c704:	b1b0      	cbz	r0, 800c734 <_svfiprintf_r+0x110>
 800c706:	9207      	str	r2, [sp, #28]
 800c708:	e014      	b.n	800c734 <_svfiprintf_r+0x110>
 800c70a:	eba0 0308 	sub.w	r3, r0, r8
 800c70e:	fa09 f303 	lsl.w	r3, r9, r3
 800c712:	4313      	orrs	r3, r2
 800c714:	46a2      	mov	sl, r4
 800c716:	9304      	str	r3, [sp, #16]
 800c718:	e7d2      	b.n	800c6c0 <_svfiprintf_r+0x9c>
 800c71a:	9b03      	ldr	r3, [sp, #12]
 800c71c:	1d19      	adds	r1, r3, #4
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	9103      	str	r1, [sp, #12]
 800c722:	2b00      	cmp	r3, #0
 800c724:	bfbb      	ittet	lt
 800c726:	425b      	neglt	r3, r3
 800c728:	f042 0202 	orrlt.w	r2, r2, #2
 800c72c:	9307      	strge	r3, [sp, #28]
 800c72e:	9307      	strlt	r3, [sp, #28]
 800c730:	bfb8      	it	lt
 800c732:	9204      	strlt	r2, [sp, #16]
 800c734:	7823      	ldrb	r3, [r4, #0]
 800c736:	2b2e      	cmp	r3, #46	; 0x2e
 800c738:	d10c      	bne.n	800c754 <_svfiprintf_r+0x130>
 800c73a:	7863      	ldrb	r3, [r4, #1]
 800c73c:	2b2a      	cmp	r3, #42	; 0x2a
 800c73e:	d135      	bne.n	800c7ac <_svfiprintf_r+0x188>
 800c740:	9b03      	ldr	r3, [sp, #12]
 800c742:	3402      	adds	r4, #2
 800c744:	1d1a      	adds	r2, r3, #4
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	9203      	str	r2, [sp, #12]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	bfb8      	it	lt
 800c74e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c752:	9305      	str	r3, [sp, #20]
 800c754:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c814 <_svfiprintf_r+0x1f0>
 800c758:	2203      	movs	r2, #3
 800c75a:	4650      	mov	r0, sl
 800c75c:	7821      	ldrb	r1, [r4, #0]
 800c75e:	f7ff f941 	bl	800b9e4 <memchr>
 800c762:	b140      	cbz	r0, 800c776 <_svfiprintf_r+0x152>
 800c764:	2340      	movs	r3, #64	; 0x40
 800c766:	eba0 000a 	sub.w	r0, r0, sl
 800c76a:	fa03 f000 	lsl.w	r0, r3, r0
 800c76e:	9b04      	ldr	r3, [sp, #16]
 800c770:	3401      	adds	r4, #1
 800c772:	4303      	orrs	r3, r0
 800c774:	9304      	str	r3, [sp, #16]
 800c776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c77a:	2206      	movs	r2, #6
 800c77c:	4826      	ldr	r0, [pc, #152]	; (800c818 <_svfiprintf_r+0x1f4>)
 800c77e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c782:	f7ff f92f 	bl	800b9e4 <memchr>
 800c786:	2800      	cmp	r0, #0
 800c788:	d038      	beq.n	800c7fc <_svfiprintf_r+0x1d8>
 800c78a:	4b24      	ldr	r3, [pc, #144]	; (800c81c <_svfiprintf_r+0x1f8>)
 800c78c:	bb1b      	cbnz	r3, 800c7d6 <_svfiprintf_r+0x1b2>
 800c78e:	9b03      	ldr	r3, [sp, #12]
 800c790:	3307      	adds	r3, #7
 800c792:	f023 0307 	bic.w	r3, r3, #7
 800c796:	3308      	adds	r3, #8
 800c798:	9303      	str	r3, [sp, #12]
 800c79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c79c:	4433      	add	r3, r6
 800c79e:	9309      	str	r3, [sp, #36]	; 0x24
 800c7a0:	e767      	b.n	800c672 <_svfiprintf_r+0x4e>
 800c7a2:	460c      	mov	r4, r1
 800c7a4:	2001      	movs	r0, #1
 800c7a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7aa:	e7a5      	b.n	800c6f8 <_svfiprintf_r+0xd4>
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	f04f 0c0a 	mov.w	ip, #10
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	3401      	adds	r4, #1
 800c7b6:	9305      	str	r3, [sp, #20]
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7be:	3a30      	subs	r2, #48	; 0x30
 800c7c0:	2a09      	cmp	r2, #9
 800c7c2:	d903      	bls.n	800c7cc <_svfiprintf_r+0x1a8>
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d0c5      	beq.n	800c754 <_svfiprintf_r+0x130>
 800c7c8:	9105      	str	r1, [sp, #20]
 800c7ca:	e7c3      	b.n	800c754 <_svfiprintf_r+0x130>
 800c7cc:	4604      	mov	r4, r0
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7d4:	e7f0      	b.n	800c7b8 <_svfiprintf_r+0x194>
 800c7d6:	ab03      	add	r3, sp, #12
 800c7d8:	9300      	str	r3, [sp, #0]
 800c7da:	462a      	mov	r2, r5
 800c7dc:	4638      	mov	r0, r7
 800c7de:	4b10      	ldr	r3, [pc, #64]	; (800c820 <_svfiprintf_r+0x1fc>)
 800c7e0:	a904      	add	r1, sp, #16
 800c7e2:	f7fc fa71 	bl	8008cc8 <_printf_float>
 800c7e6:	1c42      	adds	r2, r0, #1
 800c7e8:	4606      	mov	r6, r0
 800c7ea:	d1d6      	bne.n	800c79a <_svfiprintf_r+0x176>
 800c7ec:	89ab      	ldrh	r3, [r5, #12]
 800c7ee:	065b      	lsls	r3, r3, #25
 800c7f0:	f53f af2c 	bmi.w	800c64c <_svfiprintf_r+0x28>
 800c7f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7f6:	b01d      	add	sp, #116	; 0x74
 800c7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7fc:	ab03      	add	r3, sp, #12
 800c7fe:	9300      	str	r3, [sp, #0]
 800c800:	462a      	mov	r2, r5
 800c802:	4638      	mov	r0, r7
 800c804:	4b06      	ldr	r3, [pc, #24]	; (800c820 <_svfiprintf_r+0x1fc>)
 800c806:	a904      	add	r1, sp, #16
 800c808:	f7fc fcfa 	bl	8009200 <_printf_i>
 800c80c:	e7eb      	b.n	800c7e6 <_svfiprintf_r+0x1c2>
 800c80e:	bf00      	nop
 800c810:	0801f1e4 	.word	0x0801f1e4
 800c814:	0801f1ea 	.word	0x0801f1ea
 800c818:	0801f1ee 	.word	0x0801f1ee
 800c81c:	08008cc9 	.word	0x08008cc9
 800c820:	0800c56d 	.word	0x0800c56d

0800c824 <nan>:
 800c824:	2000      	movs	r0, #0
 800c826:	4901      	ldr	r1, [pc, #4]	; (800c82c <nan+0x8>)
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	7ff80000 	.word	0x7ff80000

0800c830 <_sbrk_r>:
 800c830:	b538      	push	{r3, r4, r5, lr}
 800c832:	2300      	movs	r3, #0
 800c834:	4d05      	ldr	r5, [pc, #20]	; (800c84c <_sbrk_r+0x1c>)
 800c836:	4604      	mov	r4, r0
 800c838:	4608      	mov	r0, r1
 800c83a:	602b      	str	r3, [r5, #0]
 800c83c:	f7f9 fa9e 	bl	8005d7c <_sbrk>
 800c840:	1c43      	adds	r3, r0, #1
 800c842:	d102      	bne.n	800c84a <_sbrk_r+0x1a>
 800c844:	682b      	ldr	r3, [r5, #0]
 800c846:	b103      	cbz	r3, 800c84a <_sbrk_r+0x1a>
 800c848:	6023      	str	r3, [r4, #0]
 800c84a:	bd38      	pop	{r3, r4, r5, pc}
 800c84c:	20000978 	.word	0x20000978

0800c850 <strncmp>:
 800c850:	4603      	mov	r3, r0
 800c852:	b510      	push	{r4, lr}
 800c854:	b172      	cbz	r2, 800c874 <strncmp+0x24>
 800c856:	3901      	subs	r1, #1
 800c858:	1884      	adds	r4, r0, r2
 800c85a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c85e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c862:	4290      	cmp	r0, r2
 800c864:	d101      	bne.n	800c86a <strncmp+0x1a>
 800c866:	42a3      	cmp	r3, r4
 800c868:	d101      	bne.n	800c86e <strncmp+0x1e>
 800c86a:	1a80      	subs	r0, r0, r2
 800c86c:	bd10      	pop	{r4, pc}
 800c86e:	2800      	cmp	r0, #0
 800c870:	d1f3      	bne.n	800c85a <strncmp+0xa>
 800c872:	e7fa      	b.n	800c86a <strncmp+0x1a>
 800c874:	4610      	mov	r0, r2
 800c876:	e7f9      	b.n	800c86c <strncmp+0x1c>

0800c878 <__ascii_wctomb>:
 800c878:	4603      	mov	r3, r0
 800c87a:	4608      	mov	r0, r1
 800c87c:	b141      	cbz	r1, 800c890 <__ascii_wctomb+0x18>
 800c87e:	2aff      	cmp	r2, #255	; 0xff
 800c880:	d904      	bls.n	800c88c <__ascii_wctomb+0x14>
 800c882:	228a      	movs	r2, #138	; 0x8a
 800c884:	f04f 30ff 	mov.w	r0, #4294967295
 800c888:	601a      	str	r2, [r3, #0]
 800c88a:	4770      	bx	lr
 800c88c:	2001      	movs	r0, #1
 800c88e:	700a      	strb	r2, [r1, #0]
 800c890:	4770      	bx	lr
	...

0800c894 <__assert_func>:
 800c894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c896:	4614      	mov	r4, r2
 800c898:	461a      	mov	r2, r3
 800c89a:	4b09      	ldr	r3, [pc, #36]	; (800c8c0 <__assert_func+0x2c>)
 800c89c:	4605      	mov	r5, r0
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	68d8      	ldr	r0, [r3, #12]
 800c8a2:	b14c      	cbz	r4, 800c8b8 <__assert_func+0x24>
 800c8a4:	4b07      	ldr	r3, [pc, #28]	; (800c8c4 <__assert_func+0x30>)
 800c8a6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8aa:	9100      	str	r1, [sp, #0]
 800c8ac:	462b      	mov	r3, r5
 800c8ae:	4906      	ldr	r1, [pc, #24]	; (800c8c8 <__assert_func+0x34>)
 800c8b0:	f000 f80e 	bl	800c8d0 <fiprintf>
 800c8b4:	f000 fa8a 	bl	800cdcc <abort>
 800c8b8:	4b04      	ldr	r3, [pc, #16]	; (800c8cc <__assert_func+0x38>)
 800c8ba:	461c      	mov	r4, r3
 800c8bc:	e7f3      	b.n	800c8a6 <__assert_func+0x12>
 800c8be:	bf00      	nop
 800c8c0:	2000000c 	.word	0x2000000c
 800c8c4:	0801f1f5 	.word	0x0801f1f5
 800c8c8:	0801f202 	.word	0x0801f202
 800c8cc:	0801f230 	.word	0x0801f230

0800c8d0 <fiprintf>:
 800c8d0:	b40e      	push	{r1, r2, r3}
 800c8d2:	b503      	push	{r0, r1, lr}
 800c8d4:	4601      	mov	r1, r0
 800c8d6:	ab03      	add	r3, sp, #12
 800c8d8:	4805      	ldr	r0, [pc, #20]	; (800c8f0 <fiprintf+0x20>)
 800c8da:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8de:	6800      	ldr	r0, [r0, #0]
 800c8e0:	9301      	str	r3, [sp, #4]
 800c8e2:	f000 f883 	bl	800c9ec <_vfiprintf_r>
 800c8e6:	b002      	add	sp, #8
 800c8e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8ec:	b003      	add	sp, #12
 800c8ee:	4770      	bx	lr
 800c8f0:	2000000c 	.word	0x2000000c

0800c8f4 <memmove>:
 800c8f4:	4288      	cmp	r0, r1
 800c8f6:	b510      	push	{r4, lr}
 800c8f8:	eb01 0402 	add.w	r4, r1, r2
 800c8fc:	d902      	bls.n	800c904 <memmove+0x10>
 800c8fe:	4284      	cmp	r4, r0
 800c900:	4623      	mov	r3, r4
 800c902:	d807      	bhi.n	800c914 <memmove+0x20>
 800c904:	1e43      	subs	r3, r0, #1
 800c906:	42a1      	cmp	r1, r4
 800c908:	d008      	beq.n	800c91c <memmove+0x28>
 800c90a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c90e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c912:	e7f8      	b.n	800c906 <memmove+0x12>
 800c914:	4601      	mov	r1, r0
 800c916:	4402      	add	r2, r0
 800c918:	428a      	cmp	r2, r1
 800c91a:	d100      	bne.n	800c91e <memmove+0x2a>
 800c91c:	bd10      	pop	{r4, pc}
 800c91e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c922:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c926:	e7f7      	b.n	800c918 <memmove+0x24>

0800c928 <__malloc_lock>:
 800c928:	4801      	ldr	r0, [pc, #4]	; (800c930 <__malloc_lock+0x8>)
 800c92a:	f000 bc0b 	b.w	800d144 <__retarget_lock_acquire_recursive>
 800c92e:	bf00      	nop
 800c930:	2000097c 	.word	0x2000097c

0800c934 <__malloc_unlock>:
 800c934:	4801      	ldr	r0, [pc, #4]	; (800c93c <__malloc_unlock+0x8>)
 800c936:	f000 bc06 	b.w	800d146 <__retarget_lock_release_recursive>
 800c93a:	bf00      	nop
 800c93c:	2000097c 	.word	0x2000097c

0800c940 <_realloc_r>:
 800c940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c944:	4680      	mov	r8, r0
 800c946:	4614      	mov	r4, r2
 800c948:	460e      	mov	r6, r1
 800c94a:	b921      	cbnz	r1, 800c956 <_realloc_r+0x16>
 800c94c:	4611      	mov	r1, r2
 800c94e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c952:	f7ff bd97 	b.w	800c484 <_malloc_r>
 800c956:	b92a      	cbnz	r2, 800c964 <_realloc_r+0x24>
 800c958:	f7ff fd2c 	bl	800c3b4 <_free_r>
 800c95c:	4625      	mov	r5, r4
 800c95e:	4628      	mov	r0, r5
 800c960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c964:	f000 fc56 	bl	800d214 <_malloc_usable_size_r>
 800c968:	4284      	cmp	r4, r0
 800c96a:	4607      	mov	r7, r0
 800c96c:	d802      	bhi.n	800c974 <_realloc_r+0x34>
 800c96e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c972:	d812      	bhi.n	800c99a <_realloc_r+0x5a>
 800c974:	4621      	mov	r1, r4
 800c976:	4640      	mov	r0, r8
 800c978:	f7ff fd84 	bl	800c484 <_malloc_r>
 800c97c:	4605      	mov	r5, r0
 800c97e:	2800      	cmp	r0, #0
 800c980:	d0ed      	beq.n	800c95e <_realloc_r+0x1e>
 800c982:	42bc      	cmp	r4, r7
 800c984:	4622      	mov	r2, r4
 800c986:	4631      	mov	r1, r6
 800c988:	bf28      	it	cs
 800c98a:	463a      	movcs	r2, r7
 800c98c:	f7ff f838 	bl	800ba00 <memcpy>
 800c990:	4631      	mov	r1, r6
 800c992:	4640      	mov	r0, r8
 800c994:	f7ff fd0e 	bl	800c3b4 <_free_r>
 800c998:	e7e1      	b.n	800c95e <_realloc_r+0x1e>
 800c99a:	4635      	mov	r5, r6
 800c99c:	e7df      	b.n	800c95e <_realloc_r+0x1e>

0800c99e <__sfputc_r>:
 800c99e:	6893      	ldr	r3, [r2, #8]
 800c9a0:	b410      	push	{r4}
 800c9a2:	3b01      	subs	r3, #1
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	6093      	str	r3, [r2, #8]
 800c9a8:	da07      	bge.n	800c9ba <__sfputc_r+0x1c>
 800c9aa:	6994      	ldr	r4, [r2, #24]
 800c9ac:	42a3      	cmp	r3, r4
 800c9ae:	db01      	blt.n	800c9b4 <__sfputc_r+0x16>
 800c9b0:	290a      	cmp	r1, #10
 800c9b2:	d102      	bne.n	800c9ba <__sfputc_r+0x1c>
 800c9b4:	bc10      	pop	{r4}
 800c9b6:	f000 b949 	b.w	800cc4c <__swbuf_r>
 800c9ba:	6813      	ldr	r3, [r2, #0]
 800c9bc:	1c58      	adds	r0, r3, #1
 800c9be:	6010      	str	r0, [r2, #0]
 800c9c0:	7019      	strb	r1, [r3, #0]
 800c9c2:	4608      	mov	r0, r1
 800c9c4:	bc10      	pop	{r4}
 800c9c6:	4770      	bx	lr

0800c9c8 <__sfputs_r>:
 800c9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ca:	4606      	mov	r6, r0
 800c9cc:	460f      	mov	r7, r1
 800c9ce:	4614      	mov	r4, r2
 800c9d0:	18d5      	adds	r5, r2, r3
 800c9d2:	42ac      	cmp	r4, r5
 800c9d4:	d101      	bne.n	800c9da <__sfputs_r+0x12>
 800c9d6:	2000      	movs	r0, #0
 800c9d8:	e007      	b.n	800c9ea <__sfputs_r+0x22>
 800c9da:	463a      	mov	r2, r7
 800c9dc:	4630      	mov	r0, r6
 800c9de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9e2:	f7ff ffdc 	bl	800c99e <__sfputc_r>
 800c9e6:	1c43      	adds	r3, r0, #1
 800c9e8:	d1f3      	bne.n	800c9d2 <__sfputs_r+0xa>
 800c9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c9ec <_vfiprintf_r>:
 800c9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f0:	460d      	mov	r5, r1
 800c9f2:	4614      	mov	r4, r2
 800c9f4:	4698      	mov	r8, r3
 800c9f6:	4606      	mov	r6, r0
 800c9f8:	b09d      	sub	sp, #116	; 0x74
 800c9fa:	b118      	cbz	r0, 800ca04 <_vfiprintf_r+0x18>
 800c9fc:	6983      	ldr	r3, [r0, #24]
 800c9fe:	b90b      	cbnz	r3, 800ca04 <_vfiprintf_r+0x18>
 800ca00:	f000 fb02 	bl	800d008 <__sinit>
 800ca04:	4b89      	ldr	r3, [pc, #548]	; (800cc2c <_vfiprintf_r+0x240>)
 800ca06:	429d      	cmp	r5, r3
 800ca08:	d11b      	bne.n	800ca42 <_vfiprintf_r+0x56>
 800ca0a:	6875      	ldr	r5, [r6, #4]
 800ca0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca0e:	07d9      	lsls	r1, r3, #31
 800ca10:	d405      	bmi.n	800ca1e <_vfiprintf_r+0x32>
 800ca12:	89ab      	ldrh	r3, [r5, #12]
 800ca14:	059a      	lsls	r2, r3, #22
 800ca16:	d402      	bmi.n	800ca1e <_vfiprintf_r+0x32>
 800ca18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca1a:	f000 fb93 	bl	800d144 <__retarget_lock_acquire_recursive>
 800ca1e:	89ab      	ldrh	r3, [r5, #12]
 800ca20:	071b      	lsls	r3, r3, #28
 800ca22:	d501      	bpl.n	800ca28 <_vfiprintf_r+0x3c>
 800ca24:	692b      	ldr	r3, [r5, #16]
 800ca26:	b9eb      	cbnz	r3, 800ca64 <_vfiprintf_r+0x78>
 800ca28:	4629      	mov	r1, r5
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	f000 f960 	bl	800ccf0 <__swsetup_r>
 800ca30:	b1c0      	cbz	r0, 800ca64 <_vfiprintf_r+0x78>
 800ca32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca34:	07dc      	lsls	r4, r3, #31
 800ca36:	d50e      	bpl.n	800ca56 <_vfiprintf_r+0x6a>
 800ca38:	f04f 30ff 	mov.w	r0, #4294967295
 800ca3c:	b01d      	add	sp, #116	; 0x74
 800ca3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca42:	4b7b      	ldr	r3, [pc, #492]	; (800cc30 <_vfiprintf_r+0x244>)
 800ca44:	429d      	cmp	r5, r3
 800ca46:	d101      	bne.n	800ca4c <_vfiprintf_r+0x60>
 800ca48:	68b5      	ldr	r5, [r6, #8]
 800ca4a:	e7df      	b.n	800ca0c <_vfiprintf_r+0x20>
 800ca4c:	4b79      	ldr	r3, [pc, #484]	; (800cc34 <_vfiprintf_r+0x248>)
 800ca4e:	429d      	cmp	r5, r3
 800ca50:	bf08      	it	eq
 800ca52:	68f5      	ldreq	r5, [r6, #12]
 800ca54:	e7da      	b.n	800ca0c <_vfiprintf_r+0x20>
 800ca56:	89ab      	ldrh	r3, [r5, #12]
 800ca58:	0598      	lsls	r0, r3, #22
 800ca5a:	d4ed      	bmi.n	800ca38 <_vfiprintf_r+0x4c>
 800ca5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca5e:	f000 fb72 	bl	800d146 <__retarget_lock_release_recursive>
 800ca62:	e7e9      	b.n	800ca38 <_vfiprintf_r+0x4c>
 800ca64:	2300      	movs	r3, #0
 800ca66:	9309      	str	r3, [sp, #36]	; 0x24
 800ca68:	2320      	movs	r3, #32
 800ca6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca6e:	2330      	movs	r3, #48	; 0x30
 800ca70:	f04f 0901 	mov.w	r9, #1
 800ca74:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca78:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800cc38 <_vfiprintf_r+0x24c>
 800ca7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca80:	4623      	mov	r3, r4
 800ca82:	469a      	mov	sl, r3
 800ca84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca88:	b10a      	cbz	r2, 800ca8e <_vfiprintf_r+0xa2>
 800ca8a:	2a25      	cmp	r2, #37	; 0x25
 800ca8c:	d1f9      	bne.n	800ca82 <_vfiprintf_r+0x96>
 800ca8e:	ebba 0b04 	subs.w	fp, sl, r4
 800ca92:	d00b      	beq.n	800caac <_vfiprintf_r+0xc0>
 800ca94:	465b      	mov	r3, fp
 800ca96:	4622      	mov	r2, r4
 800ca98:	4629      	mov	r1, r5
 800ca9a:	4630      	mov	r0, r6
 800ca9c:	f7ff ff94 	bl	800c9c8 <__sfputs_r>
 800caa0:	3001      	adds	r0, #1
 800caa2:	f000 80aa 	beq.w	800cbfa <_vfiprintf_r+0x20e>
 800caa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caa8:	445a      	add	r2, fp
 800caaa:	9209      	str	r2, [sp, #36]	; 0x24
 800caac:	f89a 3000 	ldrb.w	r3, [sl]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	f000 80a2 	beq.w	800cbfa <_vfiprintf_r+0x20e>
 800cab6:	2300      	movs	r3, #0
 800cab8:	f04f 32ff 	mov.w	r2, #4294967295
 800cabc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cac0:	f10a 0a01 	add.w	sl, sl, #1
 800cac4:	9304      	str	r3, [sp, #16]
 800cac6:	9307      	str	r3, [sp, #28]
 800cac8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cacc:	931a      	str	r3, [sp, #104]	; 0x68
 800cace:	4654      	mov	r4, sl
 800cad0:	2205      	movs	r2, #5
 800cad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cad6:	4858      	ldr	r0, [pc, #352]	; (800cc38 <_vfiprintf_r+0x24c>)
 800cad8:	f7fe ff84 	bl	800b9e4 <memchr>
 800cadc:	9a04      	ldr	r2, [sp, #16]
 800cade:	b9d8      	cbnz	r0, 800cb18 <_vfiprintf_r+0x12c>
 800cae0:	06d1      	lsls	r1, r2, #27
 800cae2:	bf44      	itt	mi
 800cae4:	2320      	movmi	r3, #32
 800cae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caea:	0713      	lsls	r3, r2, #28
 800caec:	bf44      	itt	mi
 800caee:	232b      	movmi	r3, #43	; 0x2b
 800caf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caf4:	f89a 3000 	ldrb.w	r3, [sl]
 800caf8:	2b2a      	cmp	r3, #42	; 0x2a
 800cafa:	d015      	beq.n	800cb28 <_vfiprintf_r+0x13c>
 800cafc:	4654      	mov	r4, sl
 800cafe:	2000      	movs	r0, #0
 800cb00:	f04f 0c0a 	mov.w	ip, #10
 800cb04:	9a07      	ldr	r2, [sp, #28]
 800cb06:	4621      	mov	r1, r4
 800cb08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb0c:	3b30      	subs	r3, #48	; 0x30
 800cb0e:	2b09      	cmp	r3, #9
 800cb10:	d94e      	bls.n	800cbb0 <_vfiprintf_r+0x1c4>
 800cb12:	b1b0      	cbz	r0, 800cb42 <_vfiprintf_r+0x156>
 800cb14:	9207      	str	r2, [sp, #28]
 800cb16:	e014      	b.n	800cb42 <_vfiprintf_r+0x156>
 800cb18:	eba0 0308 	sub.w	r3, r0, r8
 800cb1c:	fa09 f303 	lsl.w	r3, r9, r3
 800cb20:	4313      	orrs	r3, r2
 800cb22:	46a2      	mov	sl, r4
 800cb24:	9304      	str	r3, [sp, #16]
 800cb26:	e7d2      	b.n	800cace <_vfiprintf_r+0xe2>
 800cb28:	9b03      	ldr	r3, [sp, #12]
 800cb2a:	1d19      	adds	r1, r3, #4
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	9103      	str	r1, [sp, #12]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	bfbb      	ittet	lt
 800cb34:	425b      	neglt	r3, r3
 800cb36:	f042 0202 	orrlt.w	r2, r2, #2
 800cb3a:	9307      	strge	r3, [sp, #28]
 800cb3c:	9307      	strlt	r3, [sp, #28]
 800cb3e:	bfb8      	it	lt
 800cb40:	9204      	strlt	r2, [sp, #16]
 800cb42:	7823      	ldrb	r3, [r4, #0]
 800cb44:	2b2e      	cmp	r3, #46	; 0x2e
 800cb46:	d10c      	bne.n	800cb62 <_vfiprintf_r+0x176>
 800cb48:	7863      	ldrb	r3, [r4, #1]
 800cb4a:	2b2a      	cmp	r3, #42	; 0x2a
 800cb4c:	d135      	bne.n	800cbba <_vfiprintf_r+0x1ce>
 800cb4e:	9b03      	ldr	r3, [sp, #12]
 800cb50:	3402      	adds	r4, #2
 800cb52:	1d1a      	adds	r2, r3, #4
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	9203      	str	r2, [sp, #12]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	bfb8      	it	lt
 800cb5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb60:	9305      	str	r3, [sp, #20]
 800cb62:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800cc3c <_vfiprintf_r+0x250>
 800cb66:	2203      	movs	r2, #3
 800cb68:	4650      	mov	r0, sl
 800cb6a:	7821      	ldrb	r1, [r4, #0]
 800cb6c:	f7fe ff3a 	bl	800b9e4 <memchr>
 800cb70:	b140      	cbz	r0, 800cb84 <_vfiprintf_r+0x198>
 800cb72:	2340      	movs	r3, #64	; 0x40
 800cb74:	eba0 000a 	sub.w	r0, r0, sl
 800cb78:	fa03 f000 	lsl.w	r0, r3, r0
 800cb7c:	9b04      	ldr	r3, [sp, #16]
 800cb7e:	3401      	adds	r4, #1
 800cb80:	4303      	orrs	r3, r0
 800cb82:	9304      	str	r3, [sp, #16]
 800cb84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb88:	2206      	movs	r2, #6
 800cb8a:	482d      	ldr	r0, [pc, #180]	; (800cc40 <_vfiprintf_r+0x254>)
 800cb8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb90:	f7fe ff28 	bl	800b9e4 <memchr>
 800cb94:	2800      	cmp	r0, #0
 800cb96:	d03f      	beq.n	800cc18 <_vfiprintf_r+0x22c>
 800cb98:	4b2a      	ldr	r3, [pc, #168]	; (800cc44 <_vfiprintf_r+0x258>)
 800cb9a:	bb1b      	cbnz	r3, 800cbe4 <_vfiprintf_r+0x1f8>
 800cb9c:	9b03      	ldr	r3, [sp, #12]
 800cb9e:	3307      	adds	r3, #7
 800cba0:	f023 0307 	bic.w	r3, r3, #7
 800cba4:	3308      	adds	r3, #8
 800cba6:	9303      	str	r3, [sp, #12]
 800cba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbaa:	443b      	add	r3, r7
 800cbac:	9309      	str	r3, [sp, #36]	; 0x24
 800cbae:	e767      	b.n	800ca80 <_vfiprintf_r+0x94>
 800cbb0:	460c      	mov	r4, r1
 800cbb2:	2001      	movs	r0, #1
 800cbb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbb8:	e7a5      	b.n	800cb06 <_vfiprintf_r+0x11a>
 800cbba:	2300      	movs	r3, #0
 800cbbc:	f04f 0c0a 	mov.w	ip, #10
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	3401      	adds	r4, #1
 800cbc4:	9305      	str	r3, [sp, #20]
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbcc:	3a30      	subs	r2, #48	; 0x30
 800cbce:	2a09      	cmp	r2, #9
 800cbd0:	d903      	bls.n	800cbda <_vfiprintf_r+0x1ee>
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d0c5      	beq.n	800cb62 <_vfiprintf_r+0x176>
 800cbd6:	9105      	str	r1, [sp, #20]
 800cbd8:	e7c3      	b.n	800cb62 <_vfiprintf_r+0x176>
 800cbda:	4604      	mov	r4, r0
 800cbdc:	2301      	movs	r3, #1
 800cbde:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbe2:	e7f0      	b.n	800cbc6 <_vfiprintf_r+0x1da>
 800cbe4:	ab03      	add	r3, sp, #12
 800cbe6:	9300      	str	r3, [sp, #0]
 800cbe8:	462a      	mov	r2, r5
 800cbea:	4630      	mov	r0, r6
 800cbec:	4b16      	ldr	r3, [pc, #88]	; (800cc48 <_vfiprintf_r+0x25c>)
 800cbee:	a904      	add	r1, sp, #16
 800cbf0:	f7fc f86a 	bl	8008cc8 <_printf_float>
 800cbf4:	4607      	mov	r7, r0
 800cbf6:	1c78      	adds	r0, r7, #1
 800cbf8:	d1d6      	bne.n	800cba8 <_vfiprintf_r+0x1bc>
 800cbfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbfc:	07d9      	lsls	r1, r3, #31
 800cbfe:	d405      	bmi.n	800cc0c <_vfiprintf_r+0x220>
 800cc00:	89ab      	ldrh	r3, [r5, #12]
 800cc02:	059a      	lsls	r2, r3, #22
 800cc04:	d402      	bmi.n	800cc0c <_vfiprintf_r+0x220>
 800cc06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc08:	f000 fa9d 	bl	800d146 <__retarget_lock_release_recursive>
 800cc0c:	89ab      	ldrh	r3, [r5, #12]
 800cc0e:	065b      	lsls	r3, r3, #25
 800cc10:	f53f af12 	bmi.w	800ca38 <_vfiprintf_r+0x4c>
 800cc14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc16:	e711      	b.n	800ca3c <_vfiprintf_r+0x50>
 800cc18:	ab03      	add	r3, sp, #12
 800cc1a:	9300      	str	r3, [sp, #0]
 800cc1c:	462a      	mov	r2, r5
 800cc1e:	4630      	mov	r0, r6
 800cc20:	4b09      	ldr	r3, [pc, #36]	; (800cc48 <_vfiprintf_r+0x25c>)
 800cc22:	a904      	add	r1, sp, #16
 800cc24:	f7fc faec 	bl	8009200 <_printf_i>
 800cc28:	e7e4      	b.n	800cbf4 <_vfiprintf_r+0x208>
 800cc2a:	bf00      	nop
 800cc2c:	0801f254 	.word	0x0801f254
 800cc30:	0801f274 	.word	0x0801f274
 800cc34:	0801f234 	.word	0x0801f234
 800cc38:	0801f1e4 	.word	0x0801f1e4
 800cc3c:	0801f1ea 	.word	0x0801f1ea
 800cc40:	0801f1ee 	.word	0x0801f1ee
 800cc44:	08008cc9 	.word	0x08008cc9
 800cc48:	0800c9c9 	.word	0x0800c9c9

0800cc4c <__swbuf_r>:
 800cc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4e:	460e      	mov	r6, r1
 800cc50:	4614      	mov	r4, r2
 800cc52:	4605      	mov	r5, r0
 800cc54:	b118      	cbz	r0, 800cc5e <__swbuf_r+0x12>
 800cc56:	6983      	ldr	r3, [r0, #24]
 800cc58:	b90b      	cbnz	r3, 800cc5e <__swbuf_r+0x12>
 800cc5a:	f000 f9d5 	bl	800d008 <__sinit>
 800cc5e:	4b21      	ldr	r3, [pc, #132]	; (800cce4 <__swbuf_r+0x98>)
 800cc60:	429c      	cmp	r4, r3
 800cc62:	d12b      	bne.n	800ccbc <__swbuf_r+0x70>
 800cc64:	686c      	ldr	r4, [r5, #4]
 800cc66:	69a3      	ldr	r3, [r4, #24]
 800cc68:	60a3      	str	r3, [r4, #8]
 800cc6a:	89a3      	ldrh	r3, [r4, #12]
 800cc6c:	071a      	lsls	r2, r3, #28
 800cc6e:	d52f      	bpl.n	800ccd0 <__swbuf_r+0x84>
 800cc70:	6923      	ldr	r3, [r4, #16]
 800cc72:	b36b      	cbz	r3, 800ccd0 <__swbuf_r+0x84>
 800cc74:	6923      	ldr	r3, [r4, #16]
 800cc76:	6820      	ldr	r0, [r4, #0]
 800cc78:	b2f6      	uxtb	r6, r6
 800cc7a:	1ac0      	subs	r0, r0, r3
 800cc7c:	6963      	ldr	r3, [r4, #20]
 800cc7e:	4637      	mov	r7, r6
 800cc80:	4283      	cmp	r3, r0
 800cc82:	dc04      	bgt.n	800cc8e <__swbuf_r+0x42>
 800cc84:	4621      	mov	r1, r4
 800cc86:	4628      	mov	r0, r5
 800cc88:	f000 f92a 	bl	800cee0 <_fflush_r>
 800cc8c:	bb30      	cbnz	r0, 800ccdc <__swbuf_r+0x90>
 800cc8e:	68a3      	ldr	r3, [r4, #8]
 800cc90:	3001      	adds	r0, #1
 800cc92:	3b01      	subs	r3, #1
 800cc94:	60a3      	str	r3, [r4, #8]
 800cc96:	6823      	ldr	r3, [r4, #0]
 800cc98:	1c5a      	adds	r2, r3, #1
 800cc9a:	6022      	str	r2, [r4, #0]
 800cc9c:	701e      	strb	r6, [r3, #0]
 800cc9e:	6963      	ldr	r3, [r4, #20]
 800cca0:	4283      	cmp	r3, r0
 800cca2:	d004      	beq.n	800ccae <__swbuf_r+0x62>
 800cca4:	89a3      	ldrh	r3, [r4, #12]
 800cca6:	07db      	lsls	r3, r3, #31
 800cca8:	d506      	bpl.n	800ccb8 <__swbuf_r+0x6c>
 800ccaa:	2e0a      	cmp	r6, #10
 800ccac:	d104      	bne.n	800ccb8 <__swbuf_r+0x6c>
 800ccae:	4621      	mov	r1, r4
 800ccb0:	4628      	mov	r0, r5
 800ccb2:	f000 f915 	bl	800cee0 <_fflush_r>
 800ccb6:	b988      	cbnz	r0, 800ccdc <__swbuf_r+0x90>
 800ccb8:	4638      	mov	r0, r7
 800ccba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccbc:	4b0a      	ldr	r3, [pc, #40]	; (800cce8 <__swbuf_r+0x9c>)
 800ccbe:	429c      	cmp	r4, r3
 800ccc0:	d101      	bne.n	800ccc6 <__swbuf_r+0x7a>
 800ccc2:	68ac      	ldr	r4, [r5, #8]
 800ccc4:	e7cf      	b.n	800cc66 <__swbuf_r+0x1a>
 800ccc6:	4b09      	ldr	r3, [pc, #36]	; (800ccec <__swbuf_r+0xa0>)
 800ccc8:	429c      	cmp	r4, r3
 800ccca:	bf08      	it	eq
 800cccc:	68ec      	ldreq	r4, [r5, #12]
 800ccce:	e7ca      	b.n	800cc66 <__swbuf_r+0x1a>
 800ccd0:	4621      	mov	r1, r4
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	f000 f80c 	bl	800ccf0 <__swsetup_r>
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	d0cb      	beq.n	800cc74 <__swbuf_r+0x28>
 800ccdc:	f04f 37ff 	mov.w	r7, #4294967295
 800cce0:	e7ea      	b.n	800ccb8 <__swbuf_r+0x6c>
 800cce2:	bf00      	nop
 800cce4:	0801f254 	.word	0x0801f254
 800cce8:	0801f274 	.word	0x0801f274
 800ccec:	0801f234 	.word	0x0801f234

0800ccf0 <__swsetup_r>:
 800ccf0:	4b32      	ldr	r3, [pc, #200]	; (800cdbc <__swsetup_r+0xcc>)
 800ccf2:	b570      	push	{r4, r5, r6, lr}
 800ccf4:	681d      	ldr	r5, [r3, #0]
 800ccf6:	4606      	mov	r6, r0
 800ccf8:	460c      	mov	r4, r1
 800ccfa:	b125      	cbz	r5, 800cd06 <__swsetup_r+0x16>
 800ccfc:	69ab      	ldr	r3, [r5, #24]
 800ccfe:	b913      	cbnz	r3, 800cd06 <__swsetup_r+0x16>
 800cd00:	4628      	mov	r0, r5
 800cd02:	f000 f981 	bl	800d008 <__sinit>
 800cd06:	4b2e      	ldr	r3, [pc, #184]	; (800cdc0 <__swsetup_r+0xd0>)
 800cd08:	429c      	cmp	r4, r3
 800cd0a:	d10f      	bne.n	800cd2c <__swsetup_r+0x3c>
 800cd0c:	686c      	ldr	r4, [r5, #4]
 800cd0e:	89a3      	ldrh	r3, [r4, #12]
 800cd10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd14:	0719      	lsls	r1, r3, #28
 800cd16:	d42c      	bmi.n	800cd72 <__swsetup_r+0x82>
 800cd18:	06dd      	lsls	r5, r3, #27
 800cd1a:	d411      	bmi.n	800cd40 <__swsetup_r+0x50>
 800cd1c:	2309      	movs	r3, #9
 800cd1e:	6033      	str	r3, [r6, #0]
 800cd20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd24:	f04f 30ff 	mov.w	r0, #4294967295
 800cd28:	81a3      	strh	r3, [r4, #12]
 800cd2a:	e03e      	b.n	800cdaa <__swsetup_r+0xba>
 800cd2c:	4b25      	ldr	r3, [pc, #148]	; (800cdc4 <__swsetup_r+0xd4>)
 800cd2e:	429c      	cmp	r4, r3
 800cd30:	d101      	bne.n	800cd36 <__swsetup_r+0x46>
 800cd32:	68ac      	ldr	r4, [r5, #8]
 800cd34:	e7eb      	b.n	800cd0e <__swsetup_r+0x1e>
 800cd36:	4b24      	ldr	r3, [pc, #144]	; (800cdc8 <__swsetup_r+0xd8>)
 800cd38:	429c      	cmp	r4, r3
 800cd3a:	bf08      	it	eq
 800cd3c:	68ec      	ldreq	r4, [r5, #12]
 800cd3e:	e7e6      	b.n	800cd0e <__swsetup_r+0x1e>
 800cd40:	0758      	lsls	r0, r3, #29
 800cd42:	d512      	bpl.n	800cd6a <__swsetup_r+0x7a>
 800cd44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd46:	b141      	cbz	r1, 800cd5a <__swsetup_r+0x6a>
 800cd48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd4c:	4299      	cmp	r1, r3
 800cd4e:	d002      	beq.n	800cd56 <__swsetup_r+0x66>
 800cd50:	4630      	mov	r0, r6
 800cd52:	f7ff fb2f 	bl	800c3b4 <_free_r>
 800cd56:	2300      	movs	r3, #0
 800cd58:	6363      	str	r3, [r4, #52]	; 0x34
 800cd5a:	89a3      	ldrh	r3, [r4, #12]
 800cd5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd60:	81a3      	strh	r3, [r4, #12]
 800cd62:	2300      	movs	r3, #0
 800cd64:	6063      	str	r3, [r4, #4]
 800cd66:	6923      	ldr	r3, [r4, #16]
 800cd68:	6023      	str	r3, [r4, #0]
 800cd6a:	89a3      	ldrh	r3, [r4, #12]
 800cd6c:	f043 0308 	orr.w	r3, r3, #8
 800cd70:	81a3      	strh	r3, [r4, #12]
 800cd72:	6923      	ldr	r3, [r4, #16]
 800cd74:	b94b      	cbnz	r3, 800cd8a <__swsetup_r+0x9a>
 800cd76:	89a3      	ldrh	r3, [r4, #12]
 800cd78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd80:	d003      	beq.n	800cd8a <__swsetup_r+0x9a>
 800cd82:	4621      	mov	r1, r4
 800cd84:	4630      	mov	r0, r6
 800cd86:	f000 fa05 	bl	800d194 <__smakebuf_r>
 800cd8a:	89a0      	ldrh	r0, [r4, #12]
 800cd8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd90:	f010 0301 	ands.w	r3, r0, #1
 800cd94:	d00a      	beq.n	800cdac <__swsetup_r+0xbc>
 800cd96:	2300      	movs	r3, #0
 800cd98:	60a3      	str	r3, [r4, #8]
 800cd9a:	6963      	ldr	r3, [r4, #20]
 800cd9c:	425b      	negs	r3, r3
 800cd9e:	61a3      	str	r3, [r4, #24]
 800cda0:	6923      	ldr	r3, [r4, #16]
 800cda2:	b943      	cbnz	r3, 800cdb6 <__swsetup_r+0xc6>
 800cda4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cda8:	d1ba      	bne.n	800cd20 <__swsetup_r+0x30>
 800cdaa:	bd70      	pop	{r4, r5, r6, pc}
 800cdac:	0781      	lsls	r1, r0, #30
 800cdae:	bf58      	it	pl
 800cdb0:	6963      	ldrpl	r3, [r4, #20]
 800cdb2:	60a3      	str	r3, [r4, #8]
 800cdb4:	e7f4      	b.n	800cda0 <__swsetup_r+0xb0>
 800cdb6:	2000      	movs	r0, #0
 800cdb8:	e7f7      	b.n	800cdaa <__swsetup_r+0xba>
 800cdba:	bf00      	nop
 800cdbc:	2000000c 	.word	0x2000000c
 800cdc0:	0801f254 	.word	0x0801f254
 800cdc4:	0801f274 	.word	0x0801f274
 800cdc8:	0801f234 	.word	0x0801f234

0800cdcc <abort>:
 800cdcc:	2006      	movs	r0, #6
 800cdce:	b508      	push	{r3, lr}
 800cdd0:	f000 fa50 	bl	800d274 <raise>
 800cdd4:	2001      	movs	r0, #1
 800cdd6:	f7f8 ffa1 	bl	8005d1c <_exit>
	...

0800cddc <__sflush_r>:
 800cddc:	898a      	ldrh	r2, [r1, #12]
 800cdde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cde0:	4605      	mov	r5, r0
 800cde2:	0710      	lsls	r0, r2, #28
 800cde4:	460c      	mov	r4, r1
 800cde6:	d457      	bmi.n	800ce98 <__sflush_r+0xbc>
 800cde8:	684b      	ldr	r3, [r1, #4]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	dc04      	bgt.n	800cdf8 <__sflush_r+0x1c>
 800cdee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	dc01      	bgt.n	800cdf8 <__sflush_r+0x1c>
 800cdf4:	2000      	movs	r0, #0
 800cdf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cdfa:	2e00      	cmp	r6, #0
 800cdfc:	d0fa      	beq.n	800cdf4 <__sflush_r+0x18>
 800cdfe:	2300      	movs	r3, #0
 800ce00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce04:	682f      	ldr	r7, [r5, #0]
 800ce06:	602b      	str	r3, [r5, #0]
 800ce08:	d032      	beq.n	800ce70 <__sflush_r+0x94>
 800ce0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce0c:	89a3      	ldrh	r3, [r4, #12]
 800ce0e:	075a      	lsls	r2, r3, #29
 800ce10:	d505      	bpl.n	800ce1e <__sflush_r+0x42>
 800ce12:	6863      	ldr	r3, [r4, #4]
 800ce14:	1ac0      	subs	r0, r0, r3
 800ce16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce18:	b10b      	cbz	r3, 800ce1e <__sflush_r+0x42>
 800ce1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce1c:	1ac0      	subs	r0, r0, r3
 800ce1e:	2300      	movs	r3, #0
 800ce20:	4602      	mov	r2, r0
 800ce22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce24:	4628      	mov	r0, r5
 800ce26:	6a21      	ldr	r1, [r4, #32]
 800ce28:	47b0      	blx	r6
 800ce2a:	1c43      	adds	r3, r0, #1
 800ce2c:	89a3      	ldrh	r3, [r4, #12]
 800ce2e:	d106      	bne.n	800ce3e <__sflush_r+0x62>
 800ce30:	6829      	ldr	r1, [r5, #0]
 800ce32:	291d      	cmp	r1, #29
 800ce34:	d82c      	bhi.n	800ce90 <__sflush_r+0xb4>
 800ce36:	4a29      	ldr	r2, [pc, #164]	; (800cedc <__sflush_r+0x100>)
 800ce38:	40ca      	lsrs	r2, r1
 800ce3a:	07d6      	lsls	r6, r2, #31
 800ce3c:	d528      	bpl.n	800ce90 <__sflush_r+0xb4>
 800ce3e:	2200      	movs	r2, #0
 800ce40:	6062      	str	r2, [r4, #4]
 800ce42:	6922      	ldr	r2, [r4, #16]
 800ce44:	04d9      	lsls	r1, r3, #19
 800ce46:	6022      	str	r2, [r4, #0]
 800ce48:	d504      	bpl.n	800ce54 <__sflush_r+0x78>
 800ce4a:	1c42      	adds	r2, r0, #1
 800ce4c:	d101      	bne.n	800ce52 <__sflush_r+0x76>
 800ce4e:	682b      	ldr	r3, [r5, #0]
 800ce50:	b903      	cbnz	r3, 800ce54 <__sflush_r+0x78>
 800ce52:	6560      	str	r0, [r4, #84]	; 0x54
 800ce54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce56:	602f      	str	r7, [r5, #0]
 800ce58:	2900      	cmp	r1, #0
 800ce5a:	d0cb      	beq.n	800cdf4 <__sflush_r+0x18>
 800ce5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce60:	4299      	cmp	r1, r3
 800ce62:	d002      	beq.n	800ce6a <__sflush_r+0x8e>
 800ce64:	4628      	mov	r0, r5
 800ce66:	f7ff faa5 	bl	800c3b4 <_free_r>
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	6360      	str	r0, [r4, #52]	; 0x34
 800ce6e:	e7c2      	b.n	800cdf6 <__sflush_r+0x1a>
 800ce70:	6a21      	ldr	r1, [r4, #32]
 800ce72:	2301      	movs	r3, #1
 800ce74:	4628      	mov	r0, r5
 800ce76:	47b0      	blx	r6
 800ce78:	1c41      	adds	r1, r0, #1
 800ce7a:	d1c7      	bne.n	800ce0c <__sflush_r+0x30>
 800ce7c:	682b      	ldr	r3, [r5, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d0c4      	beq.n	800ce0c <__sflush_r+0x30>
 800ce82:	2b1d      	cmp	r3, #29
 800ce84:	d001      	beq.n	800ce8a <__sflush_r+0xae>
 800ce86:	2b16      	cmp	r3, #22
 800ce88:	d101      	bne.n	800ce8e <__sflush_r+0xb2>
 800ce8a:	602f      	str	r7, [r5, #0]
 800ce8c:	e7b2      	b.n	800cdf4 <__sflush_r+0x18>
 800ce8e:	89a3      	ldrh	r3, [r4, #12]
 800ce90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce94:	81a3      	strh	r3, [r4, #12]
 800ce96:	e7ae      	b.n	800cdf6 <__sflush_r+0x1a>
 800ce98:	690f      	ldr	r7, [r1, #16]
 800ce9a:	2f00      	cmp	r7, #0
 800ce9c:	d0aa      	beq.n	800cdf4 <__sflush_r+0x18>
 800ce9e:	0793      	lsls	r3, r2, #30
 800cea0:	bf18      	it	ne
 800cea2:	2300      	movne	r3, #0
 800cea4:	680e      	ldr	r6, [r1, #0]
 800cea6:	bf08      	it	eq
 800cea8:	694b      	ldreq	r3, [r1, #20]
 800ceaa:	1bf6      	subs	r6, r6, r7
 800ceac:	600f      	str	r7, [r1, #0]
 800ceae:	608b      	str	r3, [r1, #8]
 800ceb0:	2e00      	cmp	r6, #0
 800ceb2:	dd9f      	ble.n	800cdf4 <__sflush_r+0x18>
 800ceb4:	4633      	mov	r3, r6
 800ceb6:	463a      	mov	r2, r7
 800ceb8:	4628      	mov	r0, r5
 800ceba:	6a21      	ldr	r1, [r4, #32]
 800cebc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800cec0:	47e0      	blx	ip
 800cec2:	2800      	cmp	r0, #0
 800cec4:	dc06      	bgt.n	800ced4 <__sflush_r+0xf8>
 800cec6:	89a3      	ldrh	r3, [r4, #12]
 800cec8:	f04f 30ff 	mov.w	r0, #4294967295
 800cecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ced0:	81a3      	strh	r3, [r4, #12]
 800ced2:	e790      	b.n	800cdf6 <__sflush_r+0x1a>
 800ced4:	4407      	add	r7, r0
 800ced6:	1a36      	subs	r6, r6, r0
 800ced8:	e7ea      	b.n	800ceb0 <__sflush_r+0xd4>
 800ceda:	bf00      	nop
 800cedc:	20400001 	.word	0x20400001

0800cee0 <_fflush_r>:
 800cee0:	b538      	push	{r3, r4, r5, lr}
 800cee2:	690b      	ldr	r3, [r1, #16]
 800cee4:	4605      	mov	r5, r0
 800cee6:	460c      	mov	r4, r1
 800cee8:	b913      	cbnz	r3, 800cef0 <_fflush_r+0x10>
 800ceea:	2500      	movs	r5, #0
 800ceec:	4628      	mov	r0, r5
 800ceee:	bd38      	pop	{r3, r4, r5, pc}
 800cef0:	b118      	cbz	r0, 800cefa <_fflush_r+0x1a>
 800cef2:	6983      	ldr	r3, [r0, #24]
 800cef4:	b90b      	cbnz	r3, 800cefa <_fflush_r+0x1a>
 800cef6:	f000 f887 	bl	800d008 <__sinit>
 800cefa:	4b14      	ldr	r3, [pc, #80]	; (800cf4c <_fflush_r+0x6c>)
 800cefc:	429c      	cmp	r4, r3
 800cefe:	d11b      	bne.n	800cf38 <_fflush_r+0x58>
 800cf00:	686c      	ldr	r4, [r5, #4]
 800cf02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d0ef      	beq.n	800ceea <_fflush_r+0xa>
 800cf0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf0c:	07d0      	lsls	r0, r2, #31
 800cf0e:	d404      	bmi.n	800cf1a <_fflush_r+0x3a>
 800cf10:	0599      	lsls	r1, r3, #22
 800cf12:	d402      	bmi.n	800cf1a <_fflush_r+0x3a>
 800cf14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf16:	f000 f915 	bl	800d144 <__retarget_lock_acquire_recursive>
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	4621      	mov	r1, r4
 800cf1e:	f7ff ff5d 	bl	800cddc <__sflush_r>
 800cf22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf24:	4605      	mov	r5, r0
 800cf26:	07da      	lsls	r2, r3, #31
 800cf28:	d4e0      	bmi.n	800ceec <_fflush_r+0xc>
 800cf2a:	89a3      	ldrh	r3, [r4, #12]
 800cf2c:	059b      	lsls	r3, r3, #22
 800cf2e:	d4dd      	bmi.n	800ceec <_fflush_r+0xc>
 800cf30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf32:	f000 f908 	bl	800d146 <__retarget_lock_release_recursive>
 800cf36:	e7d9      	b.n	800ceec <_fflush_r+0xc>
 800cf38:	4b05      	ldr	r3, [pc, #20]	; (800cf50 <_fflush_r+0x70>)
 800cf3a:	429c      	cmp	r4, r3
 800cf3c:	d101      	bne.n	800cf42 <_fflush_r+0x62>
 800cf3e:	68ac      	ldr	r4, [r5, #8]
 800cf40:	e7df      	b.n	800cf02 <_fflush_r+0x22>
 800cf42:	4b04      	ldr	r3, [pc, #16]	; (800cf54 <_fflush_r+0x74>)
 800cf44:	429c      	cmp	r4, r3
 800cf46:	bf08      	it	eq
 800cf48:	68ec      	ldreq	r4, [r5, #12]
 800cf4a:	e7da      	b.n	800cf02 <_fflush_r+0x22>
 800cf4c:	0801f254 	.word	0x0801f254
 800cf50:	0801f274 	.word	0x0801f274
 800cf54:	0801f234 	.word	0x0801f234

0800cf58 <std>:
 800cf58:	2300      	movs	r3, #0
 800cf5a:	b510      	push	{r4, lr}
 800cf5c:	4604      	mov	r4, r0
 800cf5e:	e9c0 3300 	strd	r3, r3, [r0]
 800cf62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf66:	6083      	str	r3, [r0, #8]
 800cf68:	8181      	strh	r1, [r0, #12]
 800cf6a:	6643      	str	r3, [r0, #100]	; 0x64
 800cf6c:	81c2      	strh	r2, [r0, #14]
 800cf6e:	6183      	str	r3, [r0, #24]
 800cf70:	4619      	mov	r1, r3
 800cf72:	2208      	movs	r2, #8
 800cf74:	305c      	adds	r0, #92	; 0x5c
 800cf76:	f7fb fe01 	bl	8008b7c <memset>
 800cf7a:	4b05      	ldr	r3, [pc, #20]	; (800cf90 <std+0x38>)
 800cf7c:	6224      	str	r4, [r4, #32]
 800cf7e:	6263      	str	r3, [r4, #36]	; 0x24
 800cf80:	4b04      	ldr	r3, [pc, #16]	; (800cf94 <std+0x3c>)
 800cf82:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf84:	4b04      	ldr	r3, [pc, #16]	; (800cf98 <std+0x40>)
 800cf86:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf88:	4b04      	ldr	r3, [pc, #16]	; (800cf9c <std+0x44>)
 800cf8a:	6323      	str	r3, [r4, #48]	; 0x30
 800cf8c:	bd10      	pop	{r4, pc}
 800cf8e:	bf00      	nop
 800cf90:	0800d2ad 	.word	0x0800d2ad
 800cf94:	0800d2cf 	.word	0x0800d2cf
 800cf98:	0800d307 	.word	0x0800d307
 800cf9c:	0800d32b 	.word	0x0800d32b

0800cfa0 <_cleanup_r>:
 800cfa0:	4901      	ldr	r1, [pc, #4]	; (800cfa8 <_cleanup_r+0x8>)
 800cfa2:	f000 b8af 	b.w	800d104 <_fwalk_reent>
 800cfa6:	bf00      	nop
 800cfa8:	0800cee1 	.word	0x0800cee1

0800cfac <__sfmoreglue>:
 800cfac:	2268      	movs	r2, #104	; 0x68
 800cfae:	b570      	push	{r4, r5, r6, lr}
 800cfb0:	1e4d      	subs	r5, r1, #1
 800cfb2:	4355      	muls	r5, r2
 800cfb4:	460e      	mov	r6, r1
 800cfb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cfba:	f7ff fa63 	bl	800c484 <_malloc_r>
 800cfbe:	4604      	mov	r4, r0
 800cfc0:	b140      	cbz	r0, 800cfd4 <__sfmoreglue+0x28>
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	e9c0 1600 	strd	r1, r6, [r0]
 800cfc8:	300c      	adds	r0, #12
 800cfca:	60a0      	str	r0, [r4, #8]
 800cfcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cfd0:	f7fb fdd4 	bl	8008b7c <memset>
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	bd70      	pop	{r4, r5, r6, pc}

0800cfd8 <__sfp_lock_acquire>:
 800cfd8:	4801      	ldr	r0, [pc, #4]	; (800cfe0 <__sfp_lock_acquire+0x8>)
 800cfda:	f000 b8b3 	b.w	800d144 <__retarget_lock_acquire_recursive>
 800cfde:	bf00      	nop
 800cfe0:	2000097d 	.word	0x2000097d

0800cfe4 <__sfp_lock_release>:
 800cfe4:	4801      	ldr	r0, [pc, #4]	; (800cfec <__sfp_lock_release+0x8>)
 800cfe6:	f000 b8ae 	b.w	800d146 <__retarget_lock_release_recursive>
 800cfea:	bf00      	nop
 800cfec:	2000097d 	.word	0x2000097d

0800cff0 <__sinit_lock_acquire>:
 800cff0:	4801      	ldr	r0, [pc, #4]	; (800cff8 <__sinit_lock_acquire+0x8>)
 800cff2:	f000 b8a7 	b.w	800d144 <__retarget_lock_acquire_recursive>
 800cff6:	bf00      	nop
 800cff8:	2000097e 	.word	0x2000097e

0800cffc <__sinit_lock_release>:
 800cffc:	4801      	ldr	r0, [pc, #4]	; (800d004 <__sinit_lock_release+0x8>)
 800cffe:	f000 b8a2 	b.w	800d146 <__retarget_lock_release_recursive>
 800d002:	bf00      	nop
 800d004:	2000097e 	.word	0x2000097e

0800d008 <__sinit>:
 800d008:	b510      	push	{r4, lr}
 800d00a:	4604      	mov	r4, r0
 800d00c:	f7ff fff0 	bl	800cff0 <__sinit_lock_acquire>
 800d010:	69a3      	ldr	r3, [r4, #24]
 800d012:	b11b      	cbz	r3, 800d01c <__sinit+0x14>
 800d014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d018:	f7ff bff0 	b.w	800cffc <__sinit_lock_release>
 800d01c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d020:	6523      	str	r3, [r4, #80]	; 0x50
 800d022:	4b13      	ldr	r3, [pc, #76]	; (800d070 <__sinit+0x68>)
 800d024:	4a13      	ldr	r2, [pc, #76]	; (800d074 <__sinit+0x6c>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	62a2      	str	r2, [r4, #40]	; 0x28
 800d02a:	42a3      	cmp	r3, r4
 800d02c:	bf08      	it	eq
 800d02e:	2301      	moveq	r3, #1
 800d030:	4620      	mov	r0, r4
 800d032:	bf08      	it	eq
 800d034:	61a3      	streq	r3, [r4, #24]
 800d036:	f000 f81f 	bl	800d078 <__sfp>
 800d03a:	6060      	str	r0, [r4, #4]
 800d03c:	4620      	mov	r0, r4
 800d03e:	f000 f81b 	bl	800d078 <__sfp>
 800d042:	60a0      	str	r0, [r4, #8]
 800d044:	4620      	mov	r0, r4
 800d046:	f000 f817 	bl	800d078 <__sfp>
 800d04a:	2200      	movs	r2, #0
 800d04c:	2104      	movs	r1, #4
 800d04e:	60e0      	str	r0, [r4, #12]
 800d050:	6860      	ldr	r0, [r4, #4]
 800d052:	f7ff ff81 	bl	800cf58 <std>
 800d056:	2201      	movs	r2, #1
 800d058:	2109      	movs	r1, #9
 800d05a:	68a0      	ldr	r0, [r4, #8]
 800d05c:	f7ff ff7c 	bl	800cf58 <std>
 800d060:	2202      	movs	r2, #2
 800d062:	2112      	movs	r1, #18
 800d064:	68e0      	ldr	r0, [r4, #12]
 800d066:	f7ff ff77 	bl	800cf58 <std>
 800d06a:	2301      	movs	r3, #1
 800d06c:	61a3      	str	r3, [r4, #24]
 800d06e:	e7d1      	b.n	800d014 <__sinit+0xc>
 800d070:	0801edf0 	.word	0x0801edf0
 800d074:	0800cfa1 	.word	0x0800cfa1

0800d078 <__sfp>:
 800d078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d07a:	4607      	mov	r7, r0
 800d07c:	f7ff ffac 	bl	800cfd8 <__sfp_lock_acquire>
 800d080:	4b1e      	ldr	r3, [pc, #120]	; (800d0fc <__sfp+0x84>)
 800d082:	681e      	ldr	r6, [r3, #0]
 800d084:	69b3      	ldr	r3, [r6, #24]
 800d086:	b913      	cbnz	r3, 800d08e <__sfp+0x16>
 800d088:	4630      	mov	r0, r6
 800d08a:	f7ff ffbd 	bl	800d008 <__sinit>
 800d08e:	3648      	adds	r6, #72	; 0x48
 800d090:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d094:	3b01      	subs	r3, #1
 800d096:	d503      	bpl.n	800d0a0 <__sfp+0x28>
 800d098:	6833      	ldr	r3, [r6, #0]
 800d09a:	b30b      	cbz	r3, 800d0e0 <__sfp+0x68>
 800d09c:	6836      	ldr	r6, [r6, #0]
 800d09e:	e7f7      	b.n	800d090 <__sfp+0x18>
 800d0a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d0a4:	b9d5      	cbnz	r5, 800d0dc <__sfp+0x64>
 800d0a6:	4b16      	ldr	r3, [pc, #88]	; (800d100 <__sfp+0x88>)
 800d0a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d0ac:	60e3      	str	r3, [r4, #12]
 800d0ae:	6665      	str	r5, [r4, #100]	; 0x64
 800d0b0:	f000 f847 	bl	800d142 <__retarget_lock_init_recursive>
 800d0b4:	f7ff ff96 	bl	800cfe4 <__sfp_lock_release>
 800d0b8:	2208      	movs	r2, #8
 800d0ba:	4629      	mov	r1, r5
 800d0bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d0c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d0c4:	6025      	str	r5, [r4, #0]
 800d0c6:	61a5      	str	r5, [r4, #24]
 800d0c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d0cc:	f7fb fd56 	bl	8008b7c <memset>
 800d0d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d0d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d0d8:	4620      	mov	r0, r4
 800d0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0dc:	3468      	adds	r4, #104	; 0x68
 800d0de:	e7d9      	b.n	800d094 <__sfp+0x1c>
 800d0e0:	2104      	movs	r1, #4
 800d0e2:	4638      	mov	r0, r7
 800d0e4:	f7ff ff62 	bl	800cfac <__sfmoreglue>
 800d0e8:	4604      	mov	r4, r0
 800d0ea:	6030      	str	r0, [r6, #0]
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	d1d5      	bne.n	800d09c <__sfp+0x24>
 800d0f0:	f7ff ff78 	bl	800cfe4 <__sfp_lock_release>
 800d0f4:	230c      	movs	r3, #12
 800d0f6:	603b      	str	r3, [r7, #0]
 800d0f8:	e7ee      	b.n	800d0d8 <__sfp+0x60>
 800d0fa:	bf00      	nop
 800d0fc:	0801edf0 	.word	0x0801edf0
 800d100:	ffff0001 	.word	0xffff0001

0800d104 <_fwalk_reent>:
 800d104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d108:	4606      	mov	r6, r0
 800d10a:	4688      	mov	r8, r1
 800d10c:	2700      	movs	r7, #0
 800d10e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d112:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d116:	f1b9 0901 	subs.w	r9, r9, #1
 800d11a:	d505      	bpl.n	800d128 <_fwalk_reent+0x24>
 800d11c:	6824      	ldr	r4, [r4, #0]
 800d11e:	2c00      	cmp	r4, #0
 800d120:	d1f7      	bne.n	800d112 <_fwalk_reent+0xe>
 800d122:	4638      	mov	r0, r7
 800d124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d128:	89ab      	ldrh	r3, [r5, #12]
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d907      	bls.n	800d13e <_fwalk_reent+0x3a>
 800d12e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d132:	3301      	adds	r3, #1
 800d134:	d003      	beq.n	800d13e <_fwalk_reent+0x3a>
 800d136:	4629      	mov	r1, r5
 800d138:	4630      	mov	r0, r6
 800d13a:	47c0      	blx	r8
 800d13c:	4307      	orrs	r7, r0
 800d13e:	3568      	adds	r5, #104	; 0x68
 800d140:	e7e9      	b.n	800d116 <_fwalk_reent+0x12>

0800d142 <__retarget_lock_init_recursive>:
 800d142:	4770      	bx	lr

0800d144 <__retarget_lock_acquire_recursive>:
 800d144:	4770      	bx	lr

0800d146 <__retarget_lock_release_recursive>:
 800d146:	4770      	bx	lr

0800d148 <__swhatbuf_r>:
 800d148:	b570      	push	{r4, r5, r6, lr}
 800d14a:	460e      	mov	r6, r1
 800d14c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d150:	4614      	mov	r4, r2
 800d152:	2900      	cmp	r1, #0
 800d154:	461d      	mov	r5, r3
 800d156:	b096      	sub	sp, #88	; 0x58
 800d158:	da08      	bge.n	800d16c <__swhatbuf_r+0x24>
 800d15a:	2200      	movs	r2, #0
 800d15c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d160:	602a      	str	r2, [r5, #0]
 800d162:	061a      	lsls	r2, r3, #24
 800d164:	d410      	bmi.n	800d188 <__swhatbuf_r+0x40>
 800d166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d16a:	e00e      	b.n	800d18a <__swhatbuf_r+0x42>
 800d16c:	466a      	mov	r2, sp
 800d16e:	f000 f903 	bl	800d378 <_fstat_r>
 800d172:	2800      	cmp	r0, #0
 800d174:	dbf1      	blt.n	800d15a <__swhatbuf_r+0x12>
 800d176:	9a01      	ldr	r2, [sp, #4]
 800d178:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d17c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d180:	425a      	negs	r2, r3
 800d182:	415a      	adcs	r2, r3
 800d184:	602a      	str	r2, [r5, #0]
 800d186:	e7ee      	b.n	800d166 <__swhatbuf_r+0x1e>
 800d188:	2340      	movs	r3, #64	; 0x40
 800d18a:	2000      	movs	r0, #0
 800d18c:	6023      	str	r3, [r4, #0]
 800d18e:	b016      	add	sp, #88	; 0x58
 800d190:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d194 <__smakebuf_r>:
 800d194:	898b      	ldrh	r3, [r1, #12]
 800d196:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d198:	079d      	lsls	r5, r3, #30
 800d19a:	4606      	mov	r6, r0
 800d19c:	460c      	mov	r4, r1
 800d19e:	d507      	bpl.n	800d1b0 <__smakebuf_r+0x1c>
 800d1a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d1a4:	6023      	str	r3, [r4, #0]
 800d1a6:	6123      	str	r3, [r4, #16]
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	6163      	str	r3, [r4, #20]
 800d1ac:	b002      	add	sp, #8
 800d1ae:	bd70      	pop	{r4, r5, r6, pc}
 800d1b0:	466a      	mov	r2, sp
 800d1b2:	ab01      	add	r3, sp, #4
 800d1b4:	f7ff ffc8 	bl	800d148 <__swhatbuf_r>
 800d1b8:	9900      	ldr	r1, [sp, #0]
 800d1ba:	4605      	mov	r5, r0
 800d1bc:	4630      	mov	r0, r6
 800d1be:	f7ff f961 	bl	800c484 <_malloc_r>
 800d1c2:	b948      	cbnz	r0, 800d1d8 <__smakebuf_r+0x44>
 800d1c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1c8:	059a      	lsls	r2, r3, #22
 800d1ca:	d4ef      	bmi.n	800d1ac <__smakebuf_r+0x18>
 800d1cc:	f023 0303 	bic.w	r3, r3, #3
 800d1d0:	f043 0302 	orr.w	r3, r3, #2
 800d1d4:	81a3      	strh	r3, [r4, #12]
 800d1d6:	e7e3      	b.n	800d1a0 <__smakebuf_r+0xc>
 800d1d8:	4b0d      	ldr	r3, [pc, #52]	; (800d210 <__smakebuf_r+0x7c>)
 800d1da:	62b3      	str	r3, [r6, #40]	; 0x28
 800d1dc:	89a3      	ldrh	r3, [r4, #12]
 800d1de:	6020      	str	r0, [r4, #0]
 800d1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1e4:	81a3      	strh	r3, [r4, #12]
 800d1e6:	9b00      	ldr	r3, [sp, #0]
 800d1e8:	6120      	str	r0, [r4, #16]
 800d1ea:	6163      	str	r3, [r4, #20]
 800d1ec:	9b01      	ldr	r3, [sp, #4]
 800d1ee:	b15b      	cbz	r3, 800d208 <__smakebuf_r+0x74>
 800d1f0:	4630      	mov	r0, r6
 800d1f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1f6:	f000 f8d1 	bl	800d39c <_isatty_r>
 800d1fa:	b128      	cbz	r0, 800d208 <__smakebuf_r+0x74>
 800d1fc:	89a3      	ldrh	r3, [r4, #12]
 800d1fe:	f023 0303 	bic.w	r3, r3, #3
 800d202:	f043 0301 	orr.w	r3, r3, #1
 800d206:	81a3      	strh	r3, [r4, #12]
 800d208:	89a0      	ldrh	r0, [r4, #12]
 800d20a:	4305      	orrs	r5, r0
 800d20c:	81a5      	strh	r5, [r4, #12]
 800d20e:	e7cd      	b.n	800d1ac <__smakebuf_r+0x18>
 800d210:	0800cfa1 	.word	0x0800cfa1

0800d214 <_malloc_usable_size_r>:
 800d214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d218:	1f18      	subs	r0, r3, #4
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	bfbc      	itt	lt
 800d21e:	580b      	ldrlt	r3, [r1, r0]
 800d220:	18c0      	addlt	r0, r0, r3
 800d222:	4770      	bx	lr

0800d224 <_raise_r>:
 800d224:	291f      	cmp	r1, #31
 800d226:	b538      	push	{r3, r4, r5, lr}
 800d228:	4604      	mov	r4, r0
 800d22a:	460d      	mov	r5, r1
 800d22c:	d904      	bls.n	800d238 <_raise_r+0x14>
 800d22e:	2316      	movs	r3, #22
 800d230:	6003      	str	r3, [r0, #0]
 800d232:	f04f 30ff 	mov.w	r0, #4294967295
 800d236:	bd38      	pop	{r3, r4, r5, pc}
 800d238:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d23a:	b112      	cbz	r2, 800d242 <_raise_r+0x1e>
 800d23c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d240:	b94b      	cbnz	r3, 800d256 <_raise_r+0x32>
 800d242:	4620      	mov	r0, r4
 800d244:	f000 f830 	bl	800d2a8 <_getpid_r>
 800d248:	462a      	mov	r2, r5
 800d24a:	4601      	mov	r1, r0
 800d24c:	4620      	mov	r0, r4
 800d24e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d252:	f000 b817 	b.w	800d284 <_kill_r>
 800d256:	2b01      	cmp	r3, #1
 800d258:	d00a      	beq.n	800d270 <_raise_r+0x4c>
 800d25a:	1c59      	adds	r1, r3, #1
 800d25c:	d103      	bne.n	800d266 <_raise_r+0x42>
 800d25e:	2316      	movs	r3, #22
 800d260:	6003      	str	r3, [r0, #0]
 800d262:	2001      	movs	r0, #1
 800d264:	e7e7      	b.n	800d236 <_raise_r+0x12>
 800d266:	2400      	movs	r4, #0
 800d268:	4628      	mov	r0, r5
 800d26a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d26e:	4798      	blx	r3
 800d270:	2000      	movs	r0, #0
 800d272:	e7e0      	b.n	800d236 <_raise_r+0x12>

0800d274 <raise>:
 800d274:	4b02      	ldr	r3, [pc, #8]	; (800d280 <raise+0xc>)
 800d276:	4601      	mov	r1, r0
 800d278:	6818      	ldr	r0, [r3, #0]
 800d27a:	f7ff bfd3 	b.w	800d224 <_raise_r>
 800d27e:	bf00      	nop
 800d280:	2000000c 	.word	0x2000000c

0800d284 <_kill_r>:
 800d284:	b538      	push	{r3, r4, r5, lr}
 800d286:	2300      	movs	r3, #0
 800d288:	4d06      	ldr	r5, [pc, #24]	; (800d2a4 <_kill_r+0x20>)
 800d28a:	4604      	mov	r4, r0
 800d28c:	4608      	mov	r0, r1
 800d28e:	4611      	mov	r1, r2
 800d290:	602b      	str	r3, [r5, #0]
 800d292:	f7f8 fd39 	bl	8005d08 <_kill>
 800d296:	1c43      	adds	r3, r0, #1
 800d298:	d102      	bne.n	800d2a0 <_kill_r+0x1c>
 800d29a:	682b      	ldr	r3, [r5, #0]
 800d29c:	b103      	cbz	r3, 800d2a0 <_kill_r+0x1c>
 800d29e:	6023      	str	r3, [r4, #0]
 800d2a0:	bd38      	pop	{r3, r4, r5, pc}
 800d2a2:	bf00      	nop
 800d2a4:	20000978 	.word	0x20000978

0800d2a8 <_getpid_r>:
 800d2a8:	f7f8 bd2c 	b.w	8005d04 <_getpid>

0800d2ac <__sread>:
 800d2ac:	b510      	push	{r4, lr}
 800d2ae:	460c      	mov	r4, r1
 800d2b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2b4:	f000 f894 	bl	800d3e0 <_read_r>
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	bfab      	itete	ge
 800d2bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d2be:	89a3      	ldrhlt	r3, [r4, #12]
 800d2c0:	181b      	addge	r3, r3, r0
 800d2c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d2c6:	bfac      	ite	ge
 800d2c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d2ca:	81a3      	strhlt	r3, [r4, #12]
 800d2cc:	bd10      	pop	{r4, pc}

0800d2ce <__swrite>:
 800d2ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2d2:	461f      	mov	r7, r3
 800d2d4:	898b      	ldrh	r3, [r1, #12]
 800d2d6:	4605      	mov	r5, r0
 800d2d8:	05db      	lsls	r3, r3, #23
 800d2da:	460c      	mov	r4, r1
 800d2dc:	4616      	mov	r6, r2
 800d2de:	d505      	bpl.n	800d2ec <__swrite+0x1e>
 800d2e0:	2302      	movs	r3, #2
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2e8:	f000 f868 	bl	800d3bc <_lseek_r>
 800d2ec:	89a3      	ldrh	r3, [r4, #12]
 800d2ee:	4632      	mov	r2, r6
 800d2f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d2f4:	81a3      	strh	r3, [r4, #12]
 800d2f6:	4628      	mov	r0, r5
 800d2f8:	463b      	mov	r3, r7
 800d2fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d302:	f000 b817 	b.w	800d334 <_write_r>

0800d306 <__sseek>:
 800d306:	b510      	push	{r4, lr}
 800d308:	460c      	mov	r4, r1
 800d30a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d30e:	f000 f855 	bl	800d3bc <_lseek_r>
 800d312:	1c43      	adds	r3, r0, #1
 800d314:	89a3      	ldrh	r3, [r4, #12]
 800d316:	bf15      	itete	ne
 800d318:	6560      	strne	r0, [r4, #84]	; 0x54
 800d31a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d31e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d322:	81a3      	strheq	r3, [r4, #12]
 800d324:	bf18      	it	ne
 800d326:	81a3      	strhne	r3, [r4, #12]
 800d328:	bd10      	pop	{r4, pc}

0800d32a <__sclose>:
 800d32a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d32e:	f000 b813 	b.w	800d358 <_close_r>
	...

0800d334 <_write_r>:
 800d334:	b538      	push	{r3, r4, r5, lr}
 800d336:	4604      	mov	r4, r0
 800d338:	4608      	mov	r0, r1
 800d33a:	4611      	mov	r1, r2
 800d33c:	2200      	movs	r2, #0
 800d33e:	4d05      	ldr	r5, [pc, #20]	; (800d354 <_write_r+0x20>)
 800d340:	602a      	str	r2, [r5, #0]
 800d342:	461a      	mov	r2, r3
 800d344:	f7f8 fcfe 	bl	8005d44 <_write>
 800d348:	1c43      	adds	r3, r0, #1
 800d34a:	d102      	bne.n	800d352 <_write_r+0x1e>
 800d34c:	682b      	ldr	r3, [r5, #0]
 800d34e:	b103      	cbz	r3, 800d352 <_write_r+0x1e>
 800d350:	6023      	str	r3, [r4, #0]
 800d352:	bd38      	pop	{r3, r4, r5, pc}
 800d354:	20000978 	.word	0x20000978

0800d358 <_close_r>:
 800d358:	b538      	push	{r3, r4, r5, lr}
 800d35a:	2300      	movs	r3, #0
 800d35c:	4d05      	ldr	r5, [pc, #20]	; (800d374 <_close_r+0x1c>)
 800d35e:	4604      	mov	r4, r0
 800d360:	4608      	mov	r0, r1
 800d362:	602b      	str	r3, [r5, #0]
 800d364:	f7f8 fcfc 	bl	8005d60 <_close>
 800d368:	1c43      	adds	r3, r0, #1
 800d36a:	d102      	bne.n	800d372 <_close_r+0x1a>
 800d36c:	682b      	ldr	r3, [r5, #0]
 800d36e:	b103      	cbz	r3, 800d372 <_close_r+0x1a>
 800d370:	6023      	str	r3, [r4, #0]
 800d372:	bd38      	pop	{r3, r4, r5, pc}
 800d374:	20000978 	.word	0x20000978

0800d378 <_fstat_r>:
 800d378:	b538      	push	{r3, r4, r5, lr}
 800d37a:	2300      	movs	r3, #0
 800d37c:	4d06      	ldr	r5, [pc, #24]	; (800d398 <_fstat_r+0x20>)
 800d37e:	4604      	mov	r4, r0
 800d380:	4608      	mov	r0, r1
 800d382:	4611      	mov	r1, r2
 800d384:	602b      	str	r3, [r5, #0]
 800d386:	f7f8 fcef 	bl	8005d68 <_fstat>
 800d38a:	1c43      	adds	r3, r0, #1
 800d38c:	d102      	bne.n	800d394 <_fstat_r+0x1c>
 800d38e:	682b      	ldr	r3, [r5, #0]
 800d390:	b103      	cbz	r3, 800d394 <_fstat_r+0x1c>
 800d392:	6023      	str	r3, [r4, #0]
 800d394:	bd38      	pop	{r3, r4, r5, pc}
 800d396:	bf00      	nop
 800d398:	20000978 	.word	0x20000978

0800d39c <_isatty_r>:
 800d39c:	b538      	push	{r3, r4, r5, lr}
 800d39e:	2300      	movs	r3, #0
 800d3a0:	4d05      	ldr	r5, [pc, #20]	; (800d3b8 <_isatty_r+0x1c>)
 800d3a2:	4604      	mov	r4, r0
 800d3a4:	4608      	mov	r0, r1
 800d3a6:	602b      	str	r3, [r5, #0]
 800d3a8:	f7f8 fce4 	bl	8005d74 <_isatty>
 800d3ac:	1c43      	adds	r3, r0, #1
 800d3ae:	d102      	bne.n	800d3b6 <_isatty_r+0x1a>
 800d3b0:	682b      	ldr	r3, [r5, #0]
 800d3b2:	b103      	cbz	r3, 800d3b6 <_isatty_r+0x1a>
 800d3b4:	6023      	str	r3, [r4, #0]
 800d3b6:	bd38      	pop	{r3, r4, r5, pc}
 800d3b8:	20000978 	.word	0x20000978

0800d3bc <_lseek_r>:
 800d3bc:	b538      	push	{r3, r4, r5, lr}
 800d3be:	4604      	mov	r4, r0
 800d3c0:	4608      	mov	r0, r1
 800d3c2:	4611      	mov	r1, r2
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	4d05      	ldr	r5, [pc, #20]	; (800d3dc <_lseek_r+0x20>)
 800d3c8:	602a      	str	r2, [r5, #0]
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	f7f8 fcd4 	bl	8005d78 <_lseek>
 800d3d0:	1c43      	adds	r3, r0, #1
 800d3d2:	d102      	bne.n	800d3da <_lseek_r+0x1e>
 800d3d4:	682b      	ldr	r3, [r5, #0]
 800d3d6:	b103      	cbz	r3, 800d3da <_lseek_r+0x1e>
 800d3d8:	6023      	str	r3, [r4, #0]
 800d3da:	bd38      	pop	{r3, r4, r5, pc}
 800d3dc:	20000978 	.word	0x20000978

0800d3e0 <_read_r>:
 800d3e0:	b538      	push	{r3, r4, r5, lr}
 800d3e2:	4604      	mov	r4, r0
 800d3e4:	4608      	mov	r0, r1
 800d3e6:	4611      	mov	r1, r2
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	4d05      	ldr	r5, [pc, #20]	; (800d400 <_read_r+0x20>)
 800d3ec:	602a      	str	r2, [r5, #0]
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	f7f8 fc9a 	bl	8005d28 <_read>
 800d3f4:	1c43      	adds	r3, r0, #1
 800d3f6:	d102      	bne.n	800d3fe <_read_r+0x1e>
 800d3f8:	682b      	ldr	r3, [r5, #0]
 800d3fa:	b103      	cbz	r3, 800d3fe <_read_r+0x1e>
 800d3fc:	6023      	str	r3, [r4, #0]
 800d3fe:	bd38      	pop	{r3, r4, r5, pc}
 800d400:	20000978 	.word	0x20000978
 800d404:	00000000 	.word	0x00000000

0800d408 <floor>:
 800d408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d40c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800d410:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800d414:	2e13      	cmp	r6, #19
 800d416:	4602      	mov	r2, r0
 800d418:	460b      	mov	r3, r1
 800d41a:	4607      	mov	r7, r0
 800d41c:	460c      	mov	r4, r1
 800d41e:	4605      	mov	r5, r0
 800d420:	dc33      	bgt.n	800d48a <floor+0x82>
 800d422:	2e00      	cmp	r6, #0
 800d424:	da14      	bge.n	800d450 <floor+0x48>
 800d426:	a334      	add	r3, pc, #208	; (adr r3, 800d4f8 <floor+0xf0>)
 800d428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42c:	f7f8 fcdc 	bl	8005de8 <__adddf3>
 800d430:	2200      	movs	r2, #0
 800d432:	2300      	movs	r3, #0
 800d434:	f7f9 f91e 	bl	8006674 <__aeabi_dcmpgt>
 800d438:	b138      	cbz	r0, 800d44a <floor+0x42>
 800d43a:	2c00      	cmp	r4, #0
 800d43c:	da58      	bge.n	800d4f0 <floor+0xe8>
 800d43e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d442:	431d      	orrs	r5, r3
 800d444:	d001      	beq.n	800d44a <floor+0x42>
 800d446:	2500      	movs	r5, #0
 800d448:	4c2d      	ldr	r4, [pc, #180]	; (800d500 <floor+0xf8>)
 800d44a:	4623      	mov	r3, r4
 800d44c:	462f      	mov	r7, r5
 800d44e:	e025      	b.n	800d49c <floor+0x94>
 800d450:	4a2c      	ldr	r2, [pc, #176]	; (800d504 <floor+0xfc>)
 800d452:	fa42 f806 	asr.w	r8, r2, r6
 800d456:	ea01 0208 	and.w	r2, r1, r8
 800d45a:	4302      	orrs	r2, r0
 800d45c:	d01e      	beq.n	800d49c <floor+0x94>
 800d45e:	a326      	add	r3, pc, #152	; (adr r3, 800d4f8 <floor+0xf0>)
 800d460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d464:	f7f8 fcc0 	bl	8005de8 <__adddf3>
 800d468:	2200      	movs	r2, #0
 800d46a:	2300      	movs	r3, #0
 800d46c:	f7f9 f902 	bl	8006674 <__aeabi_dcmpgt>
 800d470:	2800      	cmp	r0, #0
 800d472:	d0ea      	beq.n	800d44a <floor+0x42>
 800d474:	2c00      	cmp	r4, #0
 800d476:	bfbe      	ittt	lt
 800d478:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d47c:	fa43 f606 	asrlt.w	r6, r3, r6
 800d480:	19a4      	addlt	r4, r4, r6
 800d482:	2500      	movs	r5, #0
 800d484:	ea24 0408 	bic.w	r4, r4, r8
 800d488:	e7df      	b.n	800d44a <floor+0x42>
 800d48a:	2e33      	cmp	r6, #51	; 0x33
 800d48c:	dd0a      	ble.n	800d4a4 <floor+0x9c>
 800d48e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d492:	d103      	bne.n	800d49c <floor+0x94>
 800d494:	f7f8 fca8 	bl	8005de8 <__adddf3>
 800d498:	4607      	mov	r7, r0
 800d49a:	460b      	mov	r3, r1
 800d49c:	4638      	mov	r0, r7
 800d49e:	4619      	mov	r1, r3
 800d4a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800d4ac:	fa22 f808 	lsr.w	r8, r2, r8
 800d4b0:	ea18 0f00 	tst.w	r8, r0
 800d4b4:	d0f2      	beq.n	800d49c <floor+0x94>
 800d4b6:	a310      	add	r3, pc, #64	; (adr r3, 800d4f8 <floor+0xf0>)
 800d4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4bc:	f7f8 fc94 	bl	8005de8 <__adddf3>
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	f7f9 f8d6 	bl	8006674 <__aeabi_dcmpgt>
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	d0be      	beq.n	800d44a <floor+0x42>
 800d4cc:	2c00      	cmp	r4, #0
 800d4ce:	da02      	bge.n	800d4d6 <floor+0xce>
 800d4d0:	2e14      	cmp	r6, #20
 800d4d2:	d103      	bne.n	800d4dc <floor+0xd4>
 800d4d4:	3401      	adds	r4, #1
 800d4d6:	ea25 0508 	bic.w	r5, r5, r8
 800d4da:	e7b6      	b.n	800d44a <floor+0x42>
 800d4dc:	2301      	movs	r3, #1
 800d4de:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d4e2:	fa03 f606 	lsl.w	r6, r3, r6
 800d4e6:	4435      	add	r5, r6
 800d4e8:	42bd      	cmp	r5, r7
 800d4ea:	bf38      	it	cc
 800d4ec:	18e4      	addcc	r4, r4, r3
 800d4ee:	e7f2      	b.n	800d4d6 <floor+0xce>
 800d4f0:	2500      	movs	r5, #0
 800d4f2:	462c      	mov	r4, r5
 800d4f4:	e7a9      	b.n	800d44a <floor+0x42>
 800d4f6:	bf00      	nop
 800d4f8:	8800759c 	.word	0x8800759c
 800d4fc:	7e37e43c 	.word	0x7e37e43c
 800d500:	bff00000 	.word	0xbff00000
 800d504:	000fffff 	.word	0x000fffff

0800d508 <_init>:
 800d508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d50a:	bf00      	nop
 800d50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d50e:	bc08      	pop	{r3}
 800d510:	469e      	mov	lr, r3
 800d512:	4770      	bx	lr

0800d514 <_fini>:
 800d514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d516:	bf00      	nop
 800d518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d51a:	bc08      	pop	{r3}
 800d51c:	469e      	mov	lr, r3
 800d51e:	4770      	bx	lr
