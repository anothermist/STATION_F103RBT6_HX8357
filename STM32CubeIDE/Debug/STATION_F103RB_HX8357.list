
STATION_F103RB_HX8357.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7f8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00010e74  0800c908  0800c908  0001c908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d77c  0801d77c  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  0801d77c  0801d77c  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801d77c  0801d77c  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d77c  0801d77c  0002d77c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d780  0801d780  0002d780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801d784  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014f8  200001e8  0801d968  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200016e0  0801d968  000316e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de53  00000000  00000000  0003020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d08  00000000  00000000  0004e060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001dd27  00000000  00000000  0004fd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  0006da90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000b0a8  00000000  00000000  0006dae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011354  00000000  00000000  00078b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088db1  00000000  00000000  00089edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00112c8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ca4  00000000  00000000  00112ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00018d48  00000000  00000000  00114984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c8f0 	.word	0x0800c8f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800c8f0 	.word	0x0800c8f0

08000150 <HAL_Delay>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000150:	4a03      	ldr	r2, [pc, #12]	; (8000160 <HAL_Delay+0x10>)
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait += (uint32_t)(uwTickFreq);
 8000152:	3001      	adds	r0, #1
  return uwTick;
 8000154:	6811      	ldr	r1, [r2, #0]
 8000156:	6813      	ldr	r3, [r2, #0]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000158:	1a5b      	subs	r3, r3, r1
 800015a:	4283      	cmp	r3, r0
 800015c:	d3fb      	bcc.n	8000156 <HAL_Delay+0x6>
  {
  }
}
 800015e:	4770      	bx	lr
 8000160:	20000208 	.word	0x20000208

08000164 <LCD_Send_Cmd>:
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
	if ((val&0x01)==1)        DB_00_S else DB_00_R
}

inline static void LCD_Send_Cmd(uint16_t cmd)
{
 8000164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000168:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800016c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000170:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8000174:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8000178:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 800017c:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8000180:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8000184:	4b24      	ldr	r3, [pc, #144]	; (8000218 <LCD_Send_Cmd+0xb4>)
 8000186:	4a25      	ldr	r2, [pc, #148]	; (800021c <LCD_Send_Cmd+0xb8>)
 8000188:	4f25      	ldr	r7, [pc, #148]	; (8000220 <LCD_Send_Cmd+0xbc>)
 800018a:	6139      	str	r1, [r7, #16]
 800018c:	f8c7 8010 	str.w	r8, [r7, #16]
 8000190:	6116      	str	r6, [r2, #16]
 8000192:	6111      	str	r1, [r2, #16]
 8000194:	611c      	str	r4, [r3, #16]
 8000196:	611d      	str	r5, [r3, #16]
 8000198:	611e      	str	r6, [r3, #16]
 800019a:	6119      	str	r1, [r3, #16]
 800019c:	f8c3 e010 	str.w	lr, [r3, #16]
 80001a0:	f8c3 c010 	str.w	ip, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80001a4:	0943      	lsrs	r3, r0, #5
 80001a6:	6115      	str	r5, [r2, #16]
 80001a8:	6114      	str	r4, [r2, #16]
 80001aa:	d02e      	beq.n	800020a <LCD_Send_Cmd+0xa6>
    GPIOx->BSRR = GPIO_Pin;
 80001ac:	2110      	movs	r1, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80001ae:	0903      	lsrs	r3, r0, #4
 80001b0:	2b02      	cmp	r3, #2
 80001b2:	6111      	str	r1, [r2, #16]
 80001b4:	d12c      	bne.n	8000210 <LCD_Send_Cmd+0xac>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80001ba:	6113      	str	r3, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80001bc:	0704      	lsls	r4, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 80001be:	bf4c      	ite	mi
 80001c0:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001c2:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 80001c6:	4b15      	ldr	r3, [pc, #84]	; (800021c <LCD_Send_Cmd+0xb8>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80001c8:	0741      	lsls	r1, r0, #29
 80001ca:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001cc:	bf4c      	ite	mi
 80001ce:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001d0:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 80001d4:	4b11      	ldr	r3, [pc, #68]	; (800021c <LCD_Send_Cmd+0xb8>)
    GPIOx->BSRR = GPIO_Pin;
 80001d6:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001d8:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80001da:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 80001dc:	bf4c      	ite	mi
 80001de:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001e0:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80001e4:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <LCD_Send_Cmd+0xb4>)
 80001e6:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80001e8:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 80001ea:	bf4c      	ite	mi
 80001ec:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001ee:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80001f2:	4b09      	ldr	r3, [pc, #36]	; (8000218 <LCD_Send_Cmd+0xb4>)
 80001f4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80001f8:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001fe:	4b08      	ldr	r3, [pc, #32]	; (8000220 <LCD_Send_Cmd+0xbc>)
 8000200:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000202:	6119      	str	r1, [r3, #16]
 8000204:	611a      	str	r2, [r3, #16]
	LCD_Bus(cmd);
	LCD_WR_R
	//_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 8000206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800020a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800020e:	6113      	str	r3, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000210:	2220      	movs	r2, #32
 8000212:	4b02      	ldr	r3, [pc, #8]	; (800021c <LCD_Send_Cmd+0xb8>)
 8000214:	611a      	str	r2, [r3, #16]
  }
}
 8000216:	e7d1      	b.n	80001bc <LCD_Send_Cmd+0x58>
 8000218:	40011000 	.word	0x40011000
 800021c:	40010800 	.word	0x40010800
 8000220:	40010c00 	.word	0x40010c00

08000224 <LCD_Send_Dat>:
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000224:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000228:	2101      	movs	r1, #1
 800022a:	4b3f      	ldr	r3, [pc, #252]	; (8000328 <LCD_Send_Dat+0x104>)
 800022c:	6119      	str	r1, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800022e:	611a      	str	r2, [r3, #16]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8000230:	0bc3      	lsrs	r3, r0, #15
    GPIOx->BSRR = GPIO_Pin;
 8000232:	bf14      	ite	ne
 8000234:	2202      	movne	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000236:	f44f 3200 	moveq.w	r2, #131072	; 0x20000
 800023a:	4b3c      	ldr	r3, [pc, #240]	; (800032c <LCD_Send_Dat+0x108>)
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800023c:	0441      	lsls	r1, r0, #17
 800023e:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000240:	bf4c      	ite	mi
 8000242:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000244:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 8000248:	4b38      	ldr	r3, [pc, #224]	; (800032c <LCD_Send_Dat+0x108>)
 800024a:	611a      	str	r2, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 800024c:	0482      	lsls	r2, r0, #18
    GPIOx->BSRR = GPIO_Pin;
 800024e:	bf4c      	ite	mi
 8000250:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000252:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 8000256:	4b36      	ldr	r3, [pc, #216]	; (8000330 <LCD_Send_Dat+0x10c>)
 8000258:	611a      	str	r2, [r3, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 800025a:	04c3      	lsls	r3, r0, #19
    GPIOx->BSRR = GPIO_Pin;
 800025c:	bf4c      	ite	mi
 800025e:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000260:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 8000264:	4b32      	ldr	r3, [pc, #200]	; (8000330 <LCD_Send_Dat+0x10c>)
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8000266:	0501      	lsls	r1, r0, #20
 8000268:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800026a:	bf4c      	ite	mi
 800026c:	2202      	movmi	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800026e:	f44f 3200 	movpl.w	r2, #131072	; 0x20000
 8000272:	4b2f      	ldr	r3, [pc, #188]	; (8000330 <LCD_Send_Dat+0x10c>)
 8000274:	611a      	str	r2, [r3, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8000276:	0542      	lsls	r2, r0, #21
    GPIOx->BSRR = GPIO_Pin;
 8000278:	bf4c      	ite	mi
 800027a:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800027c:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 8000280:	4b2b      	ldr	r3, [pc, #172]	; (8000330 <LCD_Send_Dat+0x10c>)
 8000282:	611a      	str	r2, [r3, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8000284:	0583      	lsls	r3, r0, #22
    GPIOx->BSRR = GPIO_Pin;
 8000286:	bf4c      	ite	mi
 8000288:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800028c:	f04f 4200 	movpl.w	r2, #2147483648	; 0x80000000
 8000290:	4b27      	ldr	r3, [pc, #156]	; (8000330 <LCD_Send_Dat+0x10c>)
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8000292:	05c1      	lsls	r1, r0, #23
 8000294:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000296:	bf4c      	ite	mi
 8000298:	f44f 4280 	movmi.w	r2, #16384	; 0x4000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800029c:	f04f 4280 	movpl.w	r2, #1073741824	; 0x40000000
 80002a0:	4b23      	ldr	r3, [pc, #140]	; (8000330 <LCD_Send_Dat+0x10c>)
 80002a2:	611a      	str	r2, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80002a4:	0602      	lsls	r2, r0, #24
    GPIOx->BSRR = GPIO_Pin;
 80002a6:	bf4c      	ite	mi
 80002a8:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002aa:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 80002ae:	4b1f      	ldr	r3, [pc, #124]	; (800032c <LCD_Send_Dat+0x108>)
 80002b0:	611a      	str	r2, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80002b2:	0643      	lsls	r3, r0, #25
    GPIOx->BSRR = GPIO_Pin;
 80002b4:	bf4c      	ite	mi
 80002b6:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002b8:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <LCD_Send_Dat+0x108>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80002be:	0681      	lsls	r1, r0, #26
 80002c0:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80002c2:	bf4c      	ite	mi
 80002c4:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002c6:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80002ca:	4b18      	ldr	r3, [pc, #96]	; (800032c <LCD_Send_Dat+0x108>)
 80002cc:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80002ce:	06c2      	lsls	r2, r0, #27
    GPIOx->BSRR = GPIO_Pin;
 80002d0:	bf4c      	ite	mi
 80002d2:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002d4:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80002d8:	4b14      	ldr	r3, [pc, #80]	; (800032c <LCD_Send_Dat+0x108>)
 80002da:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80002dc:	0703      	lsls	r3, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 80002de:	bf4c      	ite	mi
 80002e0:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002e2:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 80002e6:	4b11      	ldr	r3, [pc, #68]	; (800032c <LCD_Send_Dat+0x108>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80002e8:	0741      	lsls	r1, r0, #29
 80002ea:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80002ec:	bf4c      	ite	mi
 80002ee:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002f0:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 80002f4:	4b0d      	ldr	r3, [pc, #52]	; (800032c <LCD_Send_Dat+0x108>)
    GPIOx->BSRR = GPIO_Pin;
 80002f6:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002f8:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80002fa:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 80002fc:	bf4c      	ite	mi
 80002fe:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000300:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000304:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <LCD_Send_Dat+0x10c>)
 8000306:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000308:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 800030a:	bf4c      	ite	mi
 800030c:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800030e:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000312:	4b07      	ldr	r3, [pc, #28]	; (8000330 <LCD_Send_Dat+0x10c>)
 8000314:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000318:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800031a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800031e:	4b02      	ldr	r3, [pc, #8]	; (8000328 <LCD_Send_Dat+0x104>)
 8000320:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000322:	6119      	str	r1, [r3, #16]
 8000324:	611a      	str	r2, [r3, #16]
	LCD_Bus(dat);
	LCD_WR_R
//	_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 8000326:	4770      	bx	lr
 8000328:	40010c00 	.word	0x40010c00
 800032c:	40010800 	.word	0x40010800
 8000330:	40011000 	.word	0x40011000

08000334 <LCD_Window>:


inline static void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{		
 8000334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000338:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800033c:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8000340:	468b      	mov	fp, r1
 8000342:	49ab      	ldr	r1, [pc, #684]	; (80005f0 <LCD_Window+0x2bc>)
 8000344:	b085      	sub	sp, #20
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800034c:	610d      	str	r5, [r1, #16]
 800034e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000352:	610c      	str	r4, [r1, #16]
 8000354:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000358:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800035c:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000360:	f04f 0810 	mov.w	r8, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000364:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8000368:	4ba2      	ldr	r3, [pc, #648]	; (80005f4 <LCD_Window+0x2c0>)
 800036a:	4696      	mov	lr, r2
 800036c:	4aa2      	ldr	r2, [pc, #648]	; (80005f8 <LCD_Window+0x2c4>)
 800036e:	6116      	str	r6, [r2, #16]
 8000370:	6115      	str	r5, [r2, #16]
 8000372:	f8c3 c010 	str.w	ip, [r3, #16]
 8000376:	611f      	str	r7, [r3, #16]
 8000378:	611e      	str	r6, [r3, #16]
 800037a:	611d      	str	r5, [r3, #16]
 800037c:	f8c3 9010 	str.w	r9, [r3, #16]
 8000380:	f8c3 a010 	str.w	sl, [r3, #16]
 8000384:	6117      	str	r7, [r2, #16]
 8000386:	f8c2 c010 	str.w	ip, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800038a:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800038e:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000390:	2440      	movs	r4, #64	; 0x40
 8000392:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000394:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 8000398:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800039a:	f8c3 8010 	str.w	r8, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800039e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80003a2:	f04f 0802 	mov.w	r8, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003a6:	611c      	str	r4, [r3, #16]
 80003a8:	610e      	str	r6, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 80003aa:	f8c1 8010 	str.w	r8, [r1, #16]
 80003ae:	f44f 6880 	mov.w	r8, #1024	; 0x400
 80003b2:	f8c1 8010 	str.w	r8, [r1, #16]
 80003b6:	f04f 0801 	mov.w	r8, #1
 80003ba:	f8c1 8010 	str.w	r8, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003be:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 80003c2:	f8c1 8010 	str.w	r8, [r1, #16]
 80003c6:	6116      	str	r6, [r2, #16]
 80003c8:	6115      	str	r5, [r2, #16]
 80003ca:	f8c3 c010 	str.w	ip, [r3, #16]
 80003ce:	611f      	str	r7, [r3, #16]
 80003d0:	611e      	str	r6, [r3, #16]
 80003d2:	611d      	str	r5, [r3, #16]
	uint8_t data[4] = { 0 };
	data[0] = x1 >> 8;
  data[1] = x1 & 0xFF;
  data[2] = x2 >> 8;
  data[3] = x2 & 0xFF;
 80003d4:	fa5f f58e 	uxtb.w	r5, lr
 80003d8:	f8c3 9010 	str.w	r9, [r3, #16]
 80003dc:	f8c3 a010 	str.w	sl, [r3, #16]
 80003e0:	9502      	str	r5, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80003e2:	0bc5      	lsrs	r5, r0, #15
    GPIOx->BSRR = GPIO_Pin;
 80003e4:	bf18      	it	ne
 80003e6:	2504      	movne	r5, #4
	data[0] = x1 >> 8;
 80003e8:	ea4f 2410 	mov.w	r4, r0, lsr #8
 80003ec:	bf14      	ite	ne
 80003ee:	6115      	strne	r5, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003f0:	6117      	streq	r7, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80003f2:	0667      	lsls	r7, r4, #25
 80003f4:	bf54      	ite	pl
 80003f6:	f44f 2500 	movpl.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80003fa:	2508      	movmi	r5, #8
 80003fc:	4a7e      	ldr	r2, [pc, #504]	; (80005f8 <LCD_Window+0x2c4>)
	data[0] = x1 >> 8;
 80003fe:	4621      	mov	r1, r4
 8000400:	6115      	str	r5, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000402:	06a5      	lsls	r5, r4, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000404:	bf54      	ite	pl
 8000406:	f44f 1580 	movpl.w	r5, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800040a:	2510      	movmi	r5, #16
 800040c:	4a7a      	ldr	r2, [pc, #488]	; (80005f8 <LCD_Window+0x2c4>)
 800040e:	f04f 0a02 	mov.w	sl, #2
 8000412:	6115      	str	r5, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000414:	06e2      	lsls	r2, r4, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000416:	bf54      	ite	pl
 8000418:	f44f 1500 	movpl.w	r5, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800041c:	2520      	movmi	r5, #32
 800041e:	4a76      	ldr	r2, [pc, #472]	; (80005f8 <LCD_Window+0x2c4>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000420:	0727      	lsls	r7, r4, #28
 8000422:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000424:	bf54      	ite	pl
 8000426:	f44f 0580 	movpl.w	r5, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800042a:	2540      	movmi	r5, #64	; 0x40
 800042c:	4a72      	ldr	r2, [pc, #456]	; (80005f8 <LCD_Window+0x2c4>)
 800042e:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8000432:	6115      	str	r5, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000434:	0765      	lsls	r5, r4, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000436:	bf54      	ite	pl
 8000438:	f44f 0500 	movpl.w	r5, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800043c:	2580      	movmi	r5, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800043e:	07a4      	lsls	r4, r4, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000440:	bf54      	ite	pl
 8000442:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000446:	2410      	movmi	r4, #16
 8000448:	4a6b      	ldr	r2, [pc, #428]	; (80005f8 <LCD_Window+0x2c4>)
 800044a:	f04f 0801 	mov.w	r8, #1
 800044e:	6115      	str	r5, [r2, #16]
 8000450:	4a68      	ldr	r2, [pc, #416]	; (80005f4 <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000452:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000456:	6114      	str	r4, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000458:	07ca      	lsls	r2, r1, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800045a:	bf54      	ite	pl
 800045c:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000460:	2120      	movmi	r1, #32
 8000462:	4a64      	ldr	r2, [pc, #400]	; (80005f4 <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000464:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000468:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800046a:	4961      	ldr	r1, [pc, #388]	; (80005f0 <LCD_Window+0x2bc>)
 800046c:	4a61      	ldr	r2, [pc, #388]	; (80005f4 <LCD_Window+0x2c0>)
 800046e:	610d      	str	r5, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000470:	f8c1 a010 	str.w	sl, [r1, #16]
 8000474:	f8c1 9010 	str.w	r9, [r1, #16]
 8000478:	f8c1 8010 	str.w	r8, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800047c:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000480:	f8c1 8010 	str.w	r8, [r1, #16]
 8000484:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000488:	4c5b      	ldr	r4, [pc, #364]	; (80005f8 <LCD_Window+0x2c4>)
 800048a:	f44f 2c80 	mov.w	ip, #262144	; 0x40000
 800048e:	6125      	str	r5, [r4, #16]
 8000490:	6127      	str	r7, [r4, #16]
 8000492:	6111      	str	r1, [r2, #16]
 8000494:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000498:	f8c2 c010 	str.w	ip, [r2, #16]
 800049c:	6115      	str	r5, [r2, #16]
 800049e:	6117      	str	r7, [r2, #16]
 80004a0:	6111      	str	r1, [r2, #16]
 80004a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  data[1] = x1 & 0xFF;
 80004a6:	b2c6      	uxtb	r6, r0
 80004a8:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80004aa:	09f2      	lsrs	r2, r6, #7
    GPIOx->BSRR = GPIO_Pin;
 80004ac:	bf16      	itet	ne
 80004ae:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004b0:	f8c4 c010 	streq.w	ip, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 80004b4:	6122      	strne	r2, [r4, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80004b6:	0647      	lsls	r7, r0, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004b8:	bf54      	ite	pl
 80004ba:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80004be:	2108      	movmi	r1, #8
 80004c0:	4a4d      	ldr	r2, [pc, #308]	; (80005f8 <LCD_Window+0x2c4>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80004c2:	0685      	lsls	r5, r0, #26
 80004c4:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004c6:	bf54      	ite	pl
 80004c8:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80004cc:	2110      	movmi	r1, #16
 80004ce:	4a4a      	ldr	r2, [pc, #296]	; (80005f8 <LCD_Window+0x2c4>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80004d0:	06c4      	lsls	r4, r0, #27
 80004d2:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004d4:	bf54      	ite	pl
 80004d6:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80004da:	2120      	movmi	r1, #32
 80004dc:	4a46      	ldr	r2, [pc, #280]	; (80005f8 <LCD_Window+0x2c4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004de:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80004e2:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80004e4:	0701      	lsls	r1, r0, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004e6:	bf54      	ite	pl
 80004e8:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80004ec:	2140      	movmi	r1, #64	; 0x40
 80004ee:	4a42      	ldr	r2, [pc, #264]	; (80005f8 <LCD_Window+0x2c4>)
 80004f0:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80004f4:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80004f6:	0742      	lsls	r2, r0, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004f8:	bf54      	ite	pl
 80004fa:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80004fe:	2180      	movmi	r1, #128	; 0x80
 8000500:	4a3d      	ldr	r2, [pc, #244]	; (80005f8 <LCD_Window+0x2c4>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000502:	0787      	lsls	r7, r0, #30
 8000504:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000506:	bf54      	ite	pl
 8000508:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800050c:	2110      	movmi	r1, #16
 800050e:	4a39      	ldr	r2, [pc, #228]	; (80005f4 <LCD_Window+0x2c0>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000510:	07f5      	lsls	r5, r6, #31
 8000512:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000514:	bf54      	ite	pl
 8000516:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800051a:	2120      	movmi	r1, #32
 800051c:	2702      	movs	r7, #2
 800051e:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000522:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000526:	4a33      	ldr	r2, [pc, #204]	; (80005f4 <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000528:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 800052c:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800052e:	4930      	ldr	r1, [pc, #192]	; (80005f0 <LCD_Window+0x2bc>)
 8000530:	4a30      	ldr	r2, [pc, #192]	; (80005f4 <LCD_Window+0x2c0>)
 8000532:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000534:	610f      	str	r7, [r1, #16]
 8000536:	f8c1 a010 	str.w	sl, [r1, #16]
 800053a:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800053e:	f8c1 8010 	str.w	r8, [r1, #16]
 8000542:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000546:	482c      	ldr	r0, [pc, #176]	; (80005f8 <LCD_Window+0x2c4>)
 8000548:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 800054c:	6104      	str	r4, [r0, #16]
 800054e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000552:	6105      	str	r5, [r0, #16]
 8000554:	6111      	str	r1, [r2, #16]
 8000556:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800055a:	6116      	str	r6, [r2, #16]
 800055c:	6114      	str	r4, [r2, #16]
 800055e:	6115      	str	r5, [r2, #16]
 8000560:	f8c2 c010 	str.w	ip, [r2, #16]
 8000564:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000566:	ea5f 32de 	movs.w	r2, lr, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 800056a:	bf18      	it	ne
 800056c:	2204      	movne	r2, #4
  data[2] = x2 >> 8;
 800056e:	ea4f 231e 	mov.w	r3, lr, lsr #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000572:	bf0c      	ite	eq
 8000574:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000576:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000578:	065c      	lsls	r4, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800057a:	bf54      	ite	pl
 800057c:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000580:	2108      	movmi	r1, #8
 8000582:	4a1d      	ldr	r2, [pc, #116]	; (80005f8 <LCD_Window+0x2c4>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000584:	0698      	lsls	r0, r3, #26
 8000586:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000588:	bf54      	ite	pl
 800058a:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800058e:	2110      	movmi	r1, #16
 8000590:	4a19      	ldr	r2, [pc, #100]	; (80005f8 <LCD_Window+0x2c4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000592:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000596:	6111      	str	r1, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000598:	06d9      	lsls	r1, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800059a:	bf54      	ite	pl
 800059c:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80005a0:	2120      	movmi	r1, #32
 80005a2:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <LCD_Window+0x2c4>)
 80005a4:	f04f 0a02 	mov.w	sl, #2
 80005a8:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80005aa:	071a      	lsls	r2, r3, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005ac:	bf54      	ite	pl
 80005ae:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80005b2:	2140      	movmi	r1, #64	; 0x40
 80005b4:	4a10      	ldr	r2, [pc, #64]	; (80005f8 <LCD_Window+0x2c4>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80005b6:	075f      	lsls	r7, r3, #29
 80005b8:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005ba:	bf54      	ite	pl
 80005bc:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80005c0:	2180      	movmi	r1, #128	; 0x80
 80005c2:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <LCD_Window+0x2c4>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80005c4:	079e      	lsls	r6, r3, #30
 80005c6:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005c8:	bf54      	ite	pl
 80005ca:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80005ce:	2210      	movmi	r2, #16
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <LCD_Window+0x2c0>)
 80005d2:	f44f 6980 	mov.w	r9, #1024	; 0x400
 80005d6:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80005d8:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80005dc:	f013 0f01 	tst.w	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005e0:	bf0c      	ite	eq
 80005e2:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80005e6:	2220      	movne	r2, #32
 80005e8:	f04f 0801 	mov.w	r8, #1
 80005ec:	e006      	b.n	80005fc <LCD_Window+0x2c8>
 80005ee:	bf00      	nop
 80005f0:	40010c00 	.word	0x40010c00
 80005f4:	40011000 	.word	0x40011000
 80005f8:	40010800 	.word	0x40010800
 80005fc:	4bac      	ldr	r3, [pc, #688]	; (80008b0 <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005fe:	f44f 2580 	mov.w	r5, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000602:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000604:	4aab      	ldr	r2, [pc, #684]	; (80008b4 <LCD_Window+0x580>)
 8000606:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800060a:	6110      	str	r0, [r2, #16]
 800060c:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000610:	f8c2 a010 	str.w	sl, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000614:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000618:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800061c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000620:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000624:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000628:	4ba1      	ldr	r3, [pc, #644]	; (80008b0 <LCD_Window+0x57c>)
 800062a:	49a3      	ldr	r1, [pc, #652]	; (80008b8 <LCD_Window+0x584>)
 800062c:	f8c2 8010 	str.w	r8, [r2, #16]
 8000630:	6108      	str	r0, [r1, #16]
 8000632:	610c      	str	r4, [r1, #16]
 8000634:	f8c3 c010 	str.w	ip, [r3, #16]
 8000638:	611d      	str	r5, [r3, #16]
 800063a:	6118      	str	r0, [r3, #16]
 800063c:	611c      	str	r4, [r3, #16]
 800063e:	611f      	str	r7, [r3, #16]
 8000640:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000642:	fa5f f38e 	uxtb.w	r3, lr
 8000646:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 8000648:	bf16      	itet	ne
 800064a:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800064c:	610d      	streq	r5, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800064e:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000650:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8000654:	bf14      	ite	ne
 8000656:	2208      	movne	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000658:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800065c:	4b96      	ldr	r3, [pc, #600]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800065e:	f01e 0f20 	tst.w	lr, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000662:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000664:	bf14      	ite	ne
 8000666:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000668:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800066c:	4b92      	ldr	r3, [pc, #584]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800066e:	f01e 0f10 	tst.w	lr, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000672:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000674:	bf14      	ite	ne
 8000676:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000678:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800067c:	4b8e      	ldr	r3, [pc, #568]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800067e:	f01e 0f08 	tst.w	lr, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000682:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000684:	bf14      	ite	ne
 8000686:	2240      	movne	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000688:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800068c:	4b8a      	ldr	r3, [pc, #552]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800068e:	f01e 0f04 	tst.w	lr, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000692:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000694:	bf14      	ite	ne
 8000696:	2280      	movne	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000698:	f44f 0200 	moveq.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800069c:	4b86      	ldr	r3, [pc, #536]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800069e:	f01e 0f02 	tst.w	lr, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006a2:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80006a4:	bf14      	ite	ne
 80006a6:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006a8:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 80006ac:	4b80      	ldr	r3, [pc, #512]	; (80008b0 <LCD_Window+0x57c>)
 80006ae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80006b2:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80006b4:	9b02      	ldr	r3, [sp, #8]
 80006b6:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80006ba:	07dd      	lsls	r5, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 80006bc:	bf4c      	ite	mi
 80006be:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006c0:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80006c4:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80006c8:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80006cc:	f04f 0802 	mov.w	r8, #2
 80006d0:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006d4:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
 80006d8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80006dc:	4b74      	ldr	r3, [pc, #464]	; (80008b0 <LCD_Window+0x57c>)
 80006de:	4975      	ldr	r1, [pc, #468]	; (80008b4 <LCD_Window+0x580>)
 80006e0:	611a      	str	r2, [r3, #16]
 80006e2:	4b73      	ldr	r3, [pc, #460]	; (80008b0 <LCD_Window+0x57c>)
 80006e4:	4a74      	ldr	r2, [pc, #464]	; (80008b8 <LCD_Window+0x584>)
 80006e6:	6108      	str	r0, [r1, #16]
 80006e8:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80006ec:	f8c1 8010 	str.w	r8, [r1, #16]
 80006f0:	f04f 0910 	mov.w	r9, #16
 80006f4:	f8c1 e010 	str.w	lr, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006f8:	610c      	str	r4, [r1, #16]
 80006fa:	f8c1 c010 	str.w	ip, [r1, #16]
 80006fe:	6110      	str	r0, [r2, #16]
 8000700:	6114      	str	r4, [r2, #16]
 8000702:	611d      	str	r5, [r3, #16]
 8000704:	611e      	str	r6, [r3, #16]
 8000706:	6118      	str	r0, [r3, #16]
 8000708:	611c      	str	r4, [r3, #16]
 800070a:	611f      	str	r7, [r3, #16]
 800070c:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 8000710:	f8c3 a010 	str.w	sl, [r3, #16]
 8000714:	6116      	str	r6, [r2, #16]
 8000716:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000718:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800071c:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800071e:	2740      	movs	r7, #64	; 0x40
 8000720:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000722:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
 8000726:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000728:	2720      	movs	r7, #32
 800072a:	f8c3 9010 	str.w	r9, [r3, #16]
 800072e:	611f      	str	r7, [r3, #16]
 8000730:	2701      	movs	r7, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000732:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000734:	f8c1 8010 	str.w	r8, [r1, #16]
 8000738:	f8c1 e010 	str.w	lr, [r1, #16]
 800073c:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800073e:	f8c1 c010 	str.w	ip, [r1, #16]
 8000742:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000746:	6110      	str	r0, [r2, #16]
 8000748:	6114      	str	r4, [r2, #16]
 800074a:	611d      	str	r5, [r3, #16]
 800074c:	611e      	str	r6, [r3, #16]
 800074e:	6118      	str	r0, [r3, #16]
 8000750:	611c      	str	r4, [r3, #16]
	LCD_Send_Cmd(HX8357_CASET);
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
	data[0] = y1 >> 8;
  data[1] = y1;
  data[2] = y2 >> 8;
 8000752:	9c01      	ldr	r4, [sp, #4]
 8000754:	6119      	str	r1, [r3, #16]
 8000756:	f8c3 a010 	str.w	sl, [r3, #16]
 800075a:	0a23      	lsrs	r3, r4, #8
  data[3] = y2;
 800075c:	b2e4      	uxtb	r4, r4
 800075e:	9402      	str	r4, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000760:	ea5f 34db 	movs.w	r4, fp, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8000764:	bf18      	it	ne
 8000766:	2404      	movne	r4, #4
	data[0] = y1 >> 8;
 8000768:	ea4f 211b 	mov.w	r1, fp, lsr #8
  data[2] = y2 >> 8;
 800076c:	9303      	str	r3, [sp, #12]
 800076e:	bf14      	ite	ne
 8000770:	6114      	strne	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000772:	6116      	streq	r6, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000774:	064c      	lsls	r4, r1, #25
 8000776:	bf54      	ite	pl
 8000778:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800077c:	2408      	movmi	r4, #8
 800077e:	4a4e      	ldr	r2, [pc, #312]	; (80008b8 <LCD_Window+0x584>)
	data[0] = y1 >> 8;
 8000780:	4608      	mov	r0, r1
 8000782:	6114      	str	r4, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000784:	068a      	lsls	r2, r1, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000786:	bf54      	ite	pl
 8000788:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800078c:	2410      	movmi	r4, #16
 800078e:	4a4a      	ldr	r2, [pc, #296]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000790:	06cf      	lsls	r7, r1, #27
 8000792:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000794:	bf54      	ite	pl
 8000796:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800079a:	2420      	movmi	r4, #32
 800079c:	4a46      	ldr	r2, [pc, #280]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800079e:	070e      	lsls	r6, r1, #28
 80007a0:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007a2:	bf54      	ite	pl
 80007a4:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80007a8:	2440      	movmi	r4, #64	; 0x40
 80007aa:	4a43      	ldr	r2, [pc, #268]	; (80008b8 <LCD_Window+0x584>)
 80007ac:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80007b0:	6114      	str	r4, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80007b2:	074c      	lsls	r4, r1, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007b4:	bf54      	ite	pl
 80007b6:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80007ba:	2480      	movmi	r4, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80007bc:	0789      	lsls	r1, r1, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007be:	bf54      	ite	pl
 80007c0:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80007c4:	2110      	movmi	r1, #16
 80007c6:	4a3c      	ldr	r2, [pc, #240]	; (80008b8 <LCD_Window+0x584>)
 80007c8:	f04f 0901 	mov.w	r9, #1
 80007cc:	6114      	str	r4, [r2, #16]
 80007ce:	4a38      	ldr	r2, [pc, #224]	; (80008b0 <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007d0:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80007d4:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80007d6:	07c2      	lsls	r2, r0, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007d8:	bf54      	ite	pl
 80007da:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80007de:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007e0:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 80007e4:	f04f 0c02 	mov.w	ip, #2
 80007e8:	4a31      	ldr	r2, [pc, #196]	; (80008b0 <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007ea:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80007ee:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007f0:	4930      	ldr	r1, [pc, #192]	; (80008b4 <LCD_Window+0x580>)
 80007f2:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80007f6:	610c      	str	r4, [r1, #16]
 80007f8:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80007fc:	f8c1 c010 	str.w	ip, [r1, #16]
 8000800:	f8c1 a010 	str.w	sl, [r1, #16]
 8000804:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000808:	f8c1 8010 	str.w	r8, [r1, #16]
 800080c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000810:	4a27      	ldr	r2, [pc, #156]	; (80008b0 <LCD_Window+0x57c>)
 8000812:	4829      	ldr	r0, [pc, #164]	; (80008b8 <LCD_Window+0x584>)
  data[1] = y1;
 8000814:	fa5f f58b 	uxtb.w	r5, fp
 8000818:	6104      	str	r4, [r0, #16]
 800081a:	6106      	str	r6, [r0, #16]
 800081c:	f8c2 e010 	str.w	lr, [r2, #16]
 8000820:	6117      	str	r7, [r2, #16]
 8000822:	6114      	str	r4, [r2, #16]
 8000824:	6116      	str	r6, [r2, #16]
 8000826:	6111      	str	r1, [r2, #16]
 8000828:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800082c:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800082e:	09ea      	lsrs	r2, r5, #7
    GPIOx->BSRR = GPIO_Pin;
 8000830:	bf16      	itet	ne
 8000832:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000834:	6107      	streq	r7, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000836:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000838:	f01b 0f40 	tst.w	fp, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800083c:	bf0c      	ite	eq
 800083e:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000842:	2108      	movne	r1, #8
 8000844:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000846:	f01b 0f20 	tst.w	fp, #32
 800084a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800084c:	bf0c      	ite	eq
 800084e:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000852:	2110      	movne	r1, #16
 8000854:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000856:	f01b 0f10 	tst.w	fp, #16
 800085a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800085c:	bf0c      	ite	eq
 800085e:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000862:	2120      	movne	r1, #32
 8000864:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000866:	f01b 0f08 	tst.w	fp, #8
 800086a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800086c:	bf0c      	ite	eq
 800086e:	f44f 0180 	moveq.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000872:	2140      	movne	r1, #64	; 0x40
 8000874:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000876:	f01b 0f04 	tst.w	fp, #4
 800087a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800087c:	bf0c      	ite	eq
 800087e:	f44f 0100 	moveq.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000882:	2180      	movne	r1, #128	; 0x80
 8000884:	4a0c      	ldr	r2, [pc, #48]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000886:	f01b 0f02 	tst.w	fp, #2
 800088a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800088c:	bf0c      	ite	eq
 800088e:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000892:	2110      	movne	r1, #16
 8000894:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <LCD_Window+0x57c>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000896:	07ef      	lsls	r7, r5, #31
 8000898:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800089a:	bf54      	ite	pl
 800089c:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80008a0:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008a2:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 80008a6:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80008aa:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80008ae:	e005      	b.n	80008bc <LCD_Window+0x588>
 80008b0:	40011000 	.word	0x40011000
 80008b4:	40010c00 	.word	0x40010c00
 80008b8:	40010800 	.word	0x40010800
 80008bc:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80008c0:	f04f 0b02 	mov.w	fp, #2
 80008c4:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80008c8:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008cc:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 80008d0:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 80008d4:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 80008d8:	4a7d      	ldr	r2, [pc, #500]	; (8000ad0 <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008da:	487e      	ldr	r0, [pc, #504]	; (8000ad4 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 80008dc:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008de:	497e      	ldr	r1, [pc, #504]	; (8000ad8 <LCD_Window+0x7a4>)
 80008e0:	4a7b      	ldr	r2, [pc, #492]	; (8000ad0 <LCD_Window+0x79c>)
 80008e2:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 80008e4:	f8c1 b010 	str.w	fp, [r1, #16]
 80008e8:	f8c1 a010 	str.w	sl, [r1, #16]
 80008ec:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008f0:	f8c1 8010 	str.w	r8, [r1, #16]
 80008f4:	6104      	str	r4, [r0, #16]
 80008f6:	6105      	str	r5, [r0, #16]
 80008f8:	f8c2 e010 	str.w	lr, [r2, #16]
 80008fc:	6116      	str	r6, [r2, #16]
 80008fe:	6114      	str	r4, [r2, #16]
 8000900:	6115      	str	r5, [r2, #16]
 8000902:	f8c2 c010 	str.w	ip, [r2, #16]
 8000906:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000908:	9a01      	ldr	r2, [sp, #4]
    GPIOx->BSRR = GPIO_Pin;
 800090a:	f04f 0a02 	mov.w	sl, #2
 800090e:	0bd2      	lsrs	r2, r2, #15
 8000910:	bf16      	itet	ne
 8000912:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000914:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000916:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000918:	065e      	lsls	r6, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800091a:	bf54      	ite	pl
 800091c:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000920:	2108      	movmi	r1, #8
 8000922:	4a6c      	ldr	r2, [pc, #432]	; (8000ad4 <LCD_Window+0x7a0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000924:	069d      	lsls	r5, r3, #26
 8000926:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000928:	bf54      	ite	pl
 800092a:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800092e:	2110      	movmi	r1, #16
 8000930:	4a68      	ldr	r2, [pc, #416]	; (8000ad4 <LCD_Window+0x7a0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000932:	06dc      	lsls	r4, r3, #27
 8000934:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000936:	bf54      	ite	pl
 8000938:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800093c:	2120      	movmi	r1, #32
 800093e:	4a65      	ldr	r2, [pc, #404]	; (8000ad4 <LCD_Window+0x7a0>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000940:	0718      	lsls	r0, r3, #28
 8000942:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000944:	bf54      	ite	pl
 8000946:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800094a:	2140      	movmi	r1, #64	; 0x40
 800094c:	4a61      	ldr	r2, [pc, #388]	; (8000ad4 <LCD_Window+0x7a0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800094e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000952:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000954:	0759      	lsls	r1, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000956:	bf54      	ite	pl
 8000958:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800095c:	2180      	movmi	r1, #128	; 0x80
 800095e:	4a5d      	ldr	r2, [pc, #372]	; (8000ad4 <LCD_Window+0x7a0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000960:	079b      	lsls	r3, r3, #30
 8000962:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000964:	bf54      	ite	pl
 8000966:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800096a:	2210      	movmi	r2, #16
 800096c:	4b58      	ldr	r3, [pc, #352]	; (8000ad0 <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800096e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000972:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000974:	9b03      	ldr	r3, [sp, #12]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000976:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 800097a:	07df      	lsls	r7, r3, #31
 800097c:	bf54      	ite	pl
 800097e:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000982:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000984:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000988:	f44f 6980 	mov.w	r9, #1024	; 0x400
 800098c:	f04f 0801 	mov.w	r8, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000990:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8000994:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000998:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 800099c:	4b4c      	ldr	r3, [pc, #304]	; (8000ad0 <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800099e:	494d      	ldr	r1, [pc, #308]	; (8000ad4 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 80009a0:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009a2:	4a4d      	ldr	r2, [pc, #308]	; (8000ad8 <LCD_Window+0x7a4>)
 80009a4:	4b4a      	ldr	r3, [pc, #296]	; (8000ad0 <LCD_Window+0x79c>)
 80009a6:	6110      	str	r0, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 80009a8:	f8c2 a010 	str.w	sl, [r2, #16]
 80009ac:	f8c2 9010 	str.w	r9, [r2, #16]
 80009b0:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009b4:	f8c2 e010 	str.w	lr, [r2, #16]
 80009b8:	6108      	str	r0, [r1, #16]
 80009ba:	610c      	str	r4, [r1, #16]
 80009bc:	f8c3 c010 	str.w	ip, [r3, #16]
 80009c0:	611d      	str	r5, [r3, #16]
 80009c2:	6118      	str	r0, [r3, #16]
 80009c4:	611c      	str	r4, [r3, #16]
 80009c6:	611f      	str	r7, [r3, #16]
 80009c8:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80009ca:	9b02      	ldr	r3, [sp, #8]
 80009cc:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009d0:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 80009d2:	bf1c      	itt	ne
 80009d4:	2304      	movne	r3, #4
 80009d6:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80009d8:	9b01      	ldr	r3, [sp, #4]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009da:	bf08      	it	eq
 80009dc:	610d      	streq	r5, [r1, #16]
 80009de:	065e      	lsls	r6, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 80009e0:	bf4c      	ite	mi
 80009e2:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009e4:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 80009e8:	4b3a      	ldr	r3, [pc, #232]	; (8000ad4 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 80009ea:	2602      	movs	r6, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009ec:	611a      	str	r2, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80009ee:	9b01      	ldr	r3, [sp, #4]
 80009f0:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 80009f4:	069d      	lsls	r5, r3, #26
    GPIOx->BSRR = GPIO_Pin;
 80009f6:	bf4c      	ite	mi
 80009f8:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009fa:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80009fe:	4b35      	ldr	r3, [pc, #212]	; (8000ad4 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 8000a00:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a04:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000a06:	9b01      	ldr	r3, [sp, #4]
 8000a08:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 8000a0c:	06dc      	lsls	r4, r3, #27
    GPIOx->BSRR = GPIO_Pin;
 8000a0e:	bf4c      	ite	mi
 8000a10:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a12:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000a16:	4b2f      	ldr	r3, [pc, #188]	; (8000ad4 <LCD_Window+0x7a0>)
 8000a18:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8000a1c:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000a1e:	9b01      	ldr	r3, [sp, #4]
 8000a20:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 8000a24:	0718      	lsls	r0, r3, #28
    GPIOx->BSRR = GPIO_Pin;
 8000a26:	bf4c      	ite	mi
 8000a28:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a2a:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 8000a2e:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <LCD_Window+0x7a0>)
 8000a30:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a34:	611a      	str	r2, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000a36:	9b01      	ldr	r3, [sp, #4]
 8000a38:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000a3c:	0759      	lsls	r1, r3, #29
    GPIOx->BSRR = GPIO_Pin;
 8000a3e:	bf4c      	ite	mi
 8000a40:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a42:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 8000a46:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <LCD_Window+0x7a0>)
 8000a48:	4922      	ldr	r1, [pc, #136]	; (8000ad4 <LCD_Window+0x7a0>)
 8000a4a:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000a4c:	9b01      	ldr	r3, [sp, #4]
    GPIOx->BSRR = GPIO_Pin;
 8000a4e:	f04f 0910 	mov.w	r9, #16
 8000a52:	079a      	lsls	r2, r3, #30
 8000a54:	bf4c      	ite	mi
 8000a56:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a58:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <LCD_Window+0x79c>)
    GPIOx->BSRR = GPIO_Pin;
 8000a5e:	f04f 0840 	mov.w	r8, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a62:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000a64:	9b02      	ldr	r3, [sp, #8]
 8000a66:	07db      	lsls	r3, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 8000a68:	bf4c      	ite	mi
 8000a6a:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a6c:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <LCD_Window+0x79c>)
 8000a72:	611a      	str	r2, [r3, #16]
 8000a74:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <LCD_Window+0x7a4>)
 8000a7a:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000a7c:	611e      	str	r6, [r3, #16]
 8000a7e:	611d      	str	r5, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a80:	611c      	str	r4, [r3, #16]
 8000a82:	611a      	str	r2, [r3, #16]
 8000a84:	f102 5270 	add.w	r2, r2, #1006632960	; 0x3c000000
 8000a88:	f502 3288 	add.w	r2, r2, #69632	; 0x11000
 8000a8c:	6108      	str	r0, [r1, #16]
 8000a8e:	610c      	str	r4, [r1, #16]
 8000a90:	f8c2 c010 	str.w	ip, [r2, #16]
 8000a94:	f8c2 e010 	str.w	lr, [r2, #16]
 8000a98:	6110      	str	r0, [r2, #16]
 8000a9a:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000a9c:	2480      	movs	r4, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a9e:	f8c2 b010 	str.w	fp, [r2, #16]
 8000aa2:	f8c2 a010 	str.w	sl, [r2, #16]
 8000aa6:	f8c1 e010 	str.w	lr, [r1, #16]
 8000aaa:	f8c1 c010 	str.w	ip, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000aae:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ab2:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ab4:	f8c1 8010 	str.w	r8, [r1, #16]
 8000ab8:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aba:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000abe:	6111      	str	r1, [r2, #16]
 8000ac0:	6117      	str	r7, [r2, #16]
 8000ac2:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ac4:	611e      	str	r6, [r3, #16]
 8000ac6:	611d      	str	r5, [r3, #16]
	LCD_Send_Cmd(HX8357_PASET);
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
  LCD_Send_Cmd(HX83h7_RAMWR);
}
 8000ac8:	b005      	add	sp, #20
 8000aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ace:	bf00      	nop
 8000ad0:	40011000 	.word	0x40011000
 8000ad4:	40010800 	.word	0x40010800
 8000ad8:	40010c00 	.word	0x40010c00

08000adc <LCD_Rect_Fill>:
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(0, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 8000adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ae0:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8000ae4:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
 8000ae8:	4caf      	ldr	r4, [pc, #700]	; (8000da8 <LCD_Rect_Fill+0x2cc>)
 8000aea:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8000aee:	6125      	str	r5, [r4, #16]
 8000af0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000af4:	f8c4 a010 	str.w	sl, [r4, #16]
 8000af8:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000afc:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8000b00:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000b04:	4681      	mov	r9, r0
 8000b06:	4696      	mov	lr, r2
 8000b08:	48a8      	ldr	r0, [pc, #672]	; (8000dac <LCD_Rect_Fill+0x2d0>)
 8000b0a:	4aa9      	ldr	r2, [pc, #676]	; (8000db0 <LCD_Rect_Fill+0x2d4>)
 8000b0c:	6106      	str	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b0e:	f04f 0b10 	mov.w	fp, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b12:	6105      	str	r5, [r0, #16]
 8000b14:	f8c2 c010 	str.w	ip, [r2, #16]
 8000b18:	6117      	str	r7, [r2, #16]
 8000b1a:	6116      	str	r6, [r2, #16]
 8000b1c:	6115      	str	r5, [r2, #16]
 8000b1e:	f8c2 8010 	str.w	r8, [r2, #16]
 8000b22:	f8c2 a010 	str.w	sl, [r2, #16]
 8000b26:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
 8000b2a:	6107      	str	r7, [r0, #16]
 8000b2c:	f8c0 c010 	str.w	ip, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b30:	f8c0 b010 	str.w	fp, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b34:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b38:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8000b3c:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b40:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
 8000b44:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b48:	f8c2 b010 	str.w	fp, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b4c:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000b50:	f04f 0b02 	mov.w	fp, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b54:	f8c2 a010 	str.w	sl, [r2, #16]
 8000b58:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b5a:	f8c4 b010 	str.w	fp, [r4, #16]
 8000b5e:	f44f 6b80 	mov.w	fp, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b62:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000b66:	f8c4 b010 	str.w	fp, [r4, #16]
 8000b6a:	f04f 0b01 	mov.w	fp, #1
 8000b6e:	f8c4 b010 	str.w	fp, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b72:	f8c4 a010 	str.w	sl, [r4, #16]
 8000b76:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000b7a:	6106      	str	r6, [r0, #16]
 8000b7c:	6105      	str	r5, [r0, #16]
 8000b7e:	f8c2 c010 	str.w	ip, [r2, #16]
 8000b82:	6117      	str	r7, [r2, #16]
 8000b84:	6116      	str	r6, [r2, #16]
 8000b86:	6115      	str	r5, [r2, #16]
	uint32_t i = 0;
	uint32_t j = (uint32_t) w * (uint32_t) h;
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000b88:	1e4d      	subs	r5, r1, #1
 8000b8a:	441d      	add	r5, r3
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8000b8c:	fb03 f30e 	mul.w	r3, r3, lr
 8000b90:	f8c2 8010 	str.w	r8, [r2, #16]
 8000b94:	f8c2 a010 	str.w	sl, [r2, #16]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000b98:	f109 32ff 	add.w	r2, r9, #4294967295
{
 8000b9c:	b08f      	sub	sp, #60	; 0x3c
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000b9e:	4472      	add	r2, lr
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8000ba0:	9301      	str	r3, [sp, #4]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000ba2:	b293      	uxth	r3, r2
 8000ba4:	9302      	str	r3, [sp, #8]
  data[2] = x2 >> 8;
 8000ba6:	f3c5 2207 	ubfx	r2, r5, #8, #8
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000baa:	b2ab      	uxth	r3, r5
  data[3] = x2 & 0xFF;
 8000bac:	b2ed      	uxtb	r5, r5
 8000bae:	9503      	str	r5, [sp, #12]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000bb0:	0bcd      	lsrs	r5, r1, #15
    GPIOx->BSRR = GPIO_Pin;
 8000bb2:	bf18      	it	ne
 8000bb4:	2504      	movne	r5, #4
	data[0] = x1 >> 8;
 8000bb6:	ea4f 2411 	mov.w	r4, r1, lsr #8
  data[2] = x2 >> 8;
 8000bba:	9204      	str	r2, [sp, #16]
 8000bbc:	bf14      	ite	ne
 8000bbe:	6105      	strne	r5, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bc0:	6107      	streq	r7, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000bc2:	0667      	lsls	r7, r4, #25
 8000bc4:	bf54      	ite	pl
 8000bc6:	f44f 2500 	movpl.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000bca:	2508      	movmi	r5, #8
 8000bcc:	4877      	ldr	r0, [pc, #476]	; (8000dac <LCD_Rect_Fill+0x2d0>)
	data[0] = x1 >> 8;
 8000bce:	4626      	mov	r6, r4
 8000bd0:	6105      	str	r5, [r0, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000bd2:	06a5      	lsls	r5, r4, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bd4:	bf54      	ite	pl
 8000bd6:	f44f 1580 	movpl.w	r5, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000bda:	2510      	movmi	r5, #16
 8000bdc:	4873      	ldr	r0, [pc, #460]	; (8000dac <LCD_Rect_Fill+0x2d0>)
 8000bde:	f04f 0b02 	mov.w	fp, #2
 8000be2:	6105      	str	r5, [r0, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000be4:	06e0      	lsls	r0, r4, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000be6:	bf54      	ite	pl
 8000be8:	f44f 1500 	movpl.w	r5, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000bec:	2520      	movmi	r5, #32
 8000bee:	486f      	ldr	r0, [pc, #444]	; (8000dac <LCD_Rect_Fill+0x2d0>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000bf0:	0727      	lsls	r7, r4, #28
 8000bf2:	6105      	str	r5, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bf4:	bf54      	ite	pl
 8000bf6:	f44f 0580 	movpl.w	r5, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000bfa:	2540      	movmi	r5, #64	; 0x40
 8000bfc:	486b      	ldr	r0, [pc, #428]	; (8000dac <LCD_Rect_Fill+0x2d0>)
 8000bfe:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000c02:	6105      	str	r5, [r0, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000c04:	0765      	lsls	r5, r4, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c06:	bf54      	ite	pl
 8000c08:	f44f 0500 	movpl.w	r5, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000c0c:	2580      	movmi	r5, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000c0e:	07a4      	lsls	r4, r4, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c10:	bf54      	ite	pl
 8000c12:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000c16:	2410      	movmi	r4, #16
 8000c18:	4864      	ldr	r0, [pc, #400]	; (8000dac <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c1a:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000c1e:	6105      	str	r5, [r0, #16]
 8000c20:	4863      	ldr	r0, [pc, #396]	; (8000db0 <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c22:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000c26:	6104      	str	r4, [r0, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000c28:	07f0      	lsls	r0, r6, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c2a:	bf54      	ite	pl
 8000c2c:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000c30:	2420      	movmi	r4, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c32:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000c36:	485e      	ldr	r0, [pc, #376]	; (8000db0 <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c38:	4d5c      	ldr	r5, [pc, #368]	; (8000dac <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = GPIO_Pin;
 8000c3a:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c3c:	4c5a      	ldr	r4, [pc, #360]	; (8000da8 <LCD_Rect_Fill+0x2cc>)
 8000c3e:	485c      	ldr	r0, [pc, #368]	; (8000db0 <LCD_Rect_Fill+0x2d4>)
 8000c40:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c42:	f8c4 b010 	str.w	fp, [r4, #16]
 8000c46:	f8c4 a010 	str.w	sl, [r4, #16]
 8000c4a:	f04f 0a01 	mov.w	sl, #1
 8000c4e:	f8c4 a010 	str.w	sl, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c52:	f8c4 8010 	str.w	r8, [r4, #16]
 8000c56:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8000c5a:	612e      	str	r6, [r5, #16]
 8000c5c:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 8000c60:	612f      	str	r7, [r5, #16]
 8000c62:	6104      	str	r4, [r0, #16]
 8000c64:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8000c68:	f8c0 e010 	str.w	lr, [r0, #16]
 8000c6c:	6106      	str	r6, [r0, #16]
 8000c6e:	6107      	str	r7, [r0, #16]
 8000c70:	6104      	str	r4, [r0, #16]
 8000c72:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  data[1] = x1 & 0xFF;
 8000c76:	fa5f fc81 	uxtb.w	ip, r1
 8000c7a:	6104      	str	r4, [r0, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000c7c:	ea5f 10dc 	movs.w	r0, ip, lsr #7
    GPIOx->BSRR = GPIO_Pin;
 8000c80:	bf16      	itet	ne
 8000c82:	2004      	movne	r0, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c84:	f8c5 e010 	streq.w	lr, [r5, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c88:	6128      	strne	r0, [r5, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000c8a:	064f      	lsls	r7, r1, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c8c:	bf54      	ite	pl
 8000c8e:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000c92:	2408      	movmi	r4, #8
 8000c94:	4845      	ldr	r0, [pc, #276]	; (8000dac <LCD_Rect_Fill+0x2d0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000c96:	068e      	lsls	r6, r1, #26
 8000c98:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c9a:	bf54      	ite	pl
 8000c9c:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000ca0:	2410      	movmi	r4, #16
 8000ca2:	4842      	ldr	r0, [pc, #264]	; (8000dac <LCD_Rect_Fill+0x2d0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000ca4:	06cd      	lsls	r5, r1, #27
 8000ca6:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ca8:	bf54      	ite	pl
 8000caa:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000cae:	2420      	movmi	r4, #32
 8000cb0:	483e      	ldr	r0, [pc, #248]	; (8000dac <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cb2:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000cb6:	6104      	str	r4, [r0, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000cb8:	070c      	lsls	r4, r1, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cba:	bf54      	ite	pl
 8000cbc:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000cc0:	2440      	movmi	r4, #64	; 0x40
 8000cc2:	483a      	ldr	r0, [pc, #232]	; (8000dac <LCD_Rect_Fill+0x2d0>)
 8000cc4:	f04f 0b02 	mov.w	fp, #2
 8000cc8:	6104      	str	r4, [r0, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000cca:	0748      	lsls	r0, r1, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ccc:	bf54      	ite	pl
 8000cce:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000cd2:	2480      	movmi	r4, #128	; 0x80
 8000cd4:	4835      	ldr	r0, [pc, #212]	; (8000dac <LCD_Rect_Fill+0x2d0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000cd6:	078f      	lsls	r7, r1, #30
 8000cd8:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cda:	bf54      	ite	pl
 8000cdc:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000ce0:	2010      	movmi	r0, #16
 8000ce2:	4933      	ldr	r1, [pc, #204]	; (8000db0 <LCD_Rect_Fill+0x2d4>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000ce4:	f01c 0f01 	tst.w	ip, #1
 8000ce8:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cea:	bf0c      	ite	eq
 8000cec:	f44f 1000 	moveq.w	r0, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000cf0:	2020      	movne	r0, #32
 8000cf2:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000cf6:	492e      	ldr	r1, [pc, #184]	; (8000db0 <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cf8:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000cfc:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cfe:	482a      	ldr	r0, [pc, #168]	; (8000da8 <LCD_Rect_Fill+0x2cc>)
 8000d00:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8000d04:	6105      	str	r5, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000d06:	f8c0 b010 	str.w	fp, [r0, #16]
 8000d0a:	f8c0 a010 	str.w	sl, [r0, #16]
 8000d0e:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d12:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000d16:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d1a:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8000d1e:	f8c0 8010 	str.w	r8, [r0, #16]
 8000d22:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8000d26:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000d2a:	4921      	ldr	r1, [pc, #132]	; (8000db0 <LCD_Rect_Fill+0x2d4>)
 8000d2c:	4c1f      	ldr	r4, [pc, #124]	; (8000dac <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = GPIO_Pin;
 8000d2e:	f04f 0b02 	mov.w	fp, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d32:	6125      	str	r5, [r4, #16]
 8000d34:	6126      	str	r6, [r4, #16]
 8000d36:	f8c1 e010 	str.w	lr, [r1, #16]
 8000d3a:	610f      	str	r7, [r1, #16]
 8000d3c:	610d      	str	r5, [r1, #16]
 8000d3e:	610e      	str	r6, [r1, #16]
 8000d40:	6108      	str	r0, [r1, #16]
 8000d42:	f8c1 c010 	str.w	ip, [r1, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000d46:	0bd9      	lsrs	r1, r3, #15
    GPIOx->BSRR = GPIO_Pin;
 8000d48:	bf16      	itet	ne
 8000d4a:	2104      	movne	r1, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d4c:	6127      	streq	r7, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000d4e:	6121      	strne	r1, [r4, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000d50:	0656      	lsls	r6, r2, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d52:	bf54      	ite	pl
 8000d54:	f44f 2000 	movpl.w	r0, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000d58:	2008      	movmi	r0, #8
 8000d5a:	4914      	ldr	r1, [pc, #80]	; (8000dac <LCD_Rect_Fill+0x2d0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000d5c:	0695      	lsls	r5, r2, #26
 8000d5e:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d60:	bf54      	ite	pl
 8000d62:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000d66:	2010      	movmi	r0, #16
 8000d68:	4910      	ldr	r1, [pc, #64]	; (8000dac <LCD_Rect_Fill+0x2d0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000d6a:	06d4      	lsls	r4, r2, #27
 8000d6c:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d6e:	bf54      	ite	pl
 8000d70:	f44f 1000 	movpl.w	r0, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000d74:	2020      	movmi	r0, #32
 8000d76:	490d      	ldr	r1, [pc, #52]	; (8000dac <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d78:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000d7c:	6108      	str	r0, [r1, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000d7e:	0710      	lsls	r0, r2, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d80:	bf54      	ite	pl
 8000d82:	f44f 0080 	movpl.w	r0, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000d86:	2040      	movmi	r0, #64	; 0x40
 8000d88:	4908      	ldr	r1, [pc, #32]	; (8000dac <LCD_Rect_Fill+0x2d0>)
 8000d8a:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000d8e:	6108      	str	r0, [r1, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000d90:	0751      	lsls	r1, r2, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d92:	bf54      	ite	pl
 8000d94:	f44f 0000 	movpl.w	r0, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000d98:	2080      	movmi	r0, #128	; 0x80
 8000d9a:	4904      	ldr	r1, [pc, #16]	; (8000dac <LCD_Rect_Fill+0x2d0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000d9c:	0797      	lsls	r7, r2, #30
 8000d9e:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000da0:	bf58      	it	pl
 8000da2:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 8000da6:	e005      	b.n	8000db4 <LCD_Rect_Fill+0x2d8>
 8000da8:	40010c00 	.word	0x40010c00
 8000dac:	40010800 	.word	0x40010800
 8000db0:	40011000 	.word	0x40011000
    GPIOx->BSRR = GPIO_Pin;
 8000db4:	bf48      	it	mi
 8000db6:	2110      	movmi	r1, #16
 8000db8:	4aa9      	ldr	r2, [pc, #676]	; (8001060 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dba:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000dbe:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000dc0:	9a04      	ldr	r2, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dc2:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8000dc6:	07d6      	lsls	r6, r2, #31
 8000dc8:	bf54      	ite	pl
 8000dca:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000dce:	2120      	movmi	r1, #32
 8000dd0:	4aa3      	ldr	r2, [pc, #652]	; (8001060 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dd2:	f44f 2680 	mov.w	r6, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000dd6:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dd8:	49a2      	ldr	r1, [pc, #648]	; (8001064 <LCD_Rect_Fill+0x588>)
 8000dda:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000dde:	610c      	str	r4, [r1, #16]
 8000de0:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000de4:	f8c1 b010 	str.w	fp, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000de8:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000dec:	f8c1 a010 	str.w	sl, [r1, #16]
 8000df0:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000df4:	4a9a      	ldr	r2, [pc, #616]	; (8001060 <LCD_Rect_Fill+0x584>)
 8000df6:	489c      	ldr	r0, [pc, #624]	; (8001068 <LCD_Rect_Fill+0x58c>)
    GPIOx->BSRR = GPIO_Pin;
 8000df8:	f8c1 a010 	str.w	sl, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dfc:	f8c1 8010 	str.w	r8, [r1, #16]
 8000e00:	6104      	str	r4, [r0, #16]
 8000e02:	6105      	str	r5, [r0, #16]
 8000e04:	f8c2 e010 	str.w	lr, [r2, #16]
 8000e08:	6116      	str	r6, [r2, #16]
 8000e0a:	6114      	str	r4, [r2, #16]
 8000e0c:	6115      	str	r5, [r2, #16]
 8000e0e:	f8c2 c010 	str.w	ip, [r2, #16]
 8000e12:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000e14:	9a03      	ldr	r2, [sp, #12]
    GPIOx->BSRR = GPIO_Pin;
 8000e16:	f04f 0e02 	mov.w	lr, #2
 8000e1a:	09d2      	lsrs	r2, r2, #7
 8000e1c:	bf16      	itet	ne
 8000e1e:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e20:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e22:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000e24:	065d      	lsls	r5, r3, #25
 8000e26:	bf4c      	ite	mi
 8000e28:	2108      	movmi	r1, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e2a:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
 8000e2e:	4a8e      	ldr	r2, [pc, #568]	; (8001068 <LCD_Rect_Fill+0x58c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000e30:	069c      	lsls	r4, r3, #26
 8000e32:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e34:	bf4c      	ite	mi
 8000e36:	2110      	movmi	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e38:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 8000e3c:	4a8a      	ldr	r2, [pc, #552]	; (8001068 <LCD_Rect_Fill+0x58c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000e3e:	06d8      	lsls	r0, r3, #27
 8000e40:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e42:	bf4c      	ite	mi
 8000e44:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e46:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
 8000e4a:	4a87      	ldr	r2, [pc, #540]	; (8001068 <LCD_Rect_Fill+0x58c>)
 8000e4c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e50:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000e52:	0719      	lsls	r1, r3, #28
    GPIOx->BSRR = GPIO_Pin;
 8000e54:	bf4c      	ite	mi
 8000e56:	2140      	movmi	r1, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e58:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
 8000e5c:	4a82      	ldr	r2, [pc, #520]	; (8001068 <LCD_Rect_Fill+0x58c>)
 8000e5e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8000e62:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000e64:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = GPIO_Pin;
 8000e66:	bf4c      	ite	mi
 8000e68:	2180      	movmi	r1, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e6a:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
 8000e6e:	4a7e      	ldr	r2, [pc, #504]	; (8001068 <LCD_Rect_Fill+0x58c>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000e70:	079f      	lsls	r7, r3, #30
 8000e72:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e74:	bf4c      	ite	mi
 8000e76:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e78:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000e7c:	4b78      	ldr	r3, [pc, #480]	; (8001060 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = GPIO_Pin;
 8000e7e:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e82:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000e84:	9b03      	ldr	r3, [sp, #12]
 8000e86:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
 8000e8a:	f013 0f01 	tst.w	r3, #1
    GPIOx->BSRR = GPIO_Pin;
 8000e8e:	bf14      	ite	ne
 8000e90:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e92:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000e96:	4973      	ldr	r1, [pc, #460]	; (8001064 <LCD_Rect_Fill+0x588>)
    GPIOx->BSRR = GPIO_Pin;
 8000e98:	4b71      	ldr	r3, [pc, #452]	; (8001060 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e9a:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8000ea4:	6108      	str	r0, [r1, #16]
 8000ea6:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000eaa:	f8c1 e010 	str.w	lr, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eae:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000eb2:	f8c1 c010 	str.w	ip, [r1, #16]
 8000eb6:	f04f 0810 	mov.w	r8, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eba:	610c      	str	r4, [r1, #16]
 8000ebc:	610f      	str	r7, [r1, #16]
 8000ebe:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 8000ec2:	4b67      	ldr	r3, [pc, #412]	; (8001060 <LCD_Rect_Fill+0x584>)
 8000ec4:	4a68      	ldr	r2, [pc, #416]	; (8001068 <LCD_Rect_Fill+0x58c>)
 8000ec6:	6110      	str	r0, [r2, #16]
 8000ec8:	6114      	str	r4, [r2, #16]
 8000eca:	611d      	str	r5, [r3, #16]
 8000ecc:	611e      	str	r6, [r3, #16]
 8000ece:	6118      	str	r0, [r3, #16]
 8000ed0:	611c      	str	r4, [r3, #16]
 8000ed2:	f8c3 a010 	str.w	sl, [r3, #16]
 8000ed6:	f8c3 b010 	str.w	fp, [r3, #16]
 8000eda:	6116      	str	r6, [r2, #16]
 8000edc:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ede:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ee2:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ee4:	2740      	movs	r7, #64	; 0x40
 8000ee6:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ee8:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
 8000eec:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000eee:	2720      	movs	r7, #32
 8000ef0:	f8c3 8010 	str.w	r8, [r3, #16]
 8000ef4:	611f      	str	r7, [r3, #16]
 8000ef6:	2701      	movs	r7, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ef8:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000efa:	f8c1 e010 	str.w	lr, [r1, #16]
 8000efe:	f8c1 c010 	str.w	ip, [r1, #16]
 8000f02:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f04:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
 8000f08:	610f      	str	r7, [r1, #16]
 8000f0a:	6110      	str	r0, [r2, #16]
 8000f0c:	6114      	str	r4, [r2, #16]
 8000f0e:	611d      	str	r5, [r3, #16]
 8000f10:	611e      	str	r6, [r3, #16]
 8000f12:	6118      	str	r0, [r3, #16]
 8000f14:	611c      	str	r4, [r3, #16]
  data[2] = y2 >> 8;
 8000f16:	9c02      	ldr	r4, [sp, #8]
 8000f18:	f8c3 a010 	str.w	sl, [r3, #16]
 8000f1c:	f8c3 b010 	str.w	fp, [r3, #16]
 8000f20:	0a23      	lsrs	r3, r4, #8
  data[3] = y2;
 8000f22:	b2e4      	uxtb	r4, r4
 8000f24:	9403      	str	r4, [sp, #12]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000f26:	ea5f 34d9 	movs.w	r4, r9, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8000f2a:	bf18      	it	ne
 8000f2c:	2404      	movne	r4, #4
	data[0] = y1 >> 8;
 8000f2e:	ea4f 2119 	mov.w	r1, r9, lsr #8
  data[2] = y2 >> 8;
 8000f32:	9304      	str	r3, [sp, #16]
 8000f34:	bf14      	ite	ne
 8000f36:	6114      	strne	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f38:	6116      	streq	r6, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000f3a:	064e      	lsls	r6, r1, #25
 8000f3c:	bf54      	ite	pl
 8000f3e:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000f42:	2408      	movmi	r4, #8
 8000f44:	4a48      	ldr	r2, [pc, #288]	; (8001068 <LCD_Rect_Fill+0x58c>)
	data[0] = y1 >> 8;
 8000f46:	4608      	mov	r0, r1
 8000f48:	6114      	str	r4, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000f4a:	068c      	lsls	r4, r1, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f4c:	bf54      	ite	pl
 8000f4e:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000f52:	2410      	movmi	r4, #16
 8000f54:	4a44      	ldr	r2, [pc, #272]	; (8001068 <LCD_Rect_Fill+0x58c>)
 8000f56:	f04f 0b02 	mov.w	fp, #2
 8000f5a:	6114      	str	r4, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000f5c:	06ca      	lsls	r2, r1, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f5e:	bf54      	ite	pl
 8000f60:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000f64:	2420      	movmi	r4, #32
 8000f66:	4a40      	ldr	r2, [pc, #256]	; (8001068 <LCD_Rect_Fill+0x58c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000f68:	070f      	lsls	r7, r1, #28
 8000f6a:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f6c:	bf54      	ite	pl
 8000f6e:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000f72:	2440      	movmi	r4, #64	; 0x40
 8000f74:	4a3c      	ldr	r2, [pc, #240]	; (8001068 <LCD_Rect_Fill+0x58c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000f76:	074e      	lsls	r6, r1, #29
 8000f78:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f7a:	bf54      	ite	pl
 8000f7c:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000f80:	2480      	movmi	r4, #128	; 0x80
 8000f82:	4a39      	ldr	r2, [pc, #228]	; (8001068 <LCD_Rect_Fill+0x58c>)
 8000f84:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000f88:	6114      	str	r4, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000f8a:	078c      	lsls	r4, r1, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f8c:	bf54      	ite	pl
 8000f8e:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000f92:	2110      	movmi	r1, #16
 8000f94:	4a32      	ldr	r2, [pc, #200]	; (8001060 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f96:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000f9a:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000f9c:	07c1      	lsls	r1, r0, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f9e:	bf54      	ite	pl
 8000fa0:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000fa4:	2120      	movmi	r1, #32
 8000fa6:	4a2e      	ldr	r2, [pc, #184]	; (8001060 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fa8:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000fac:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fae:	492d      	ldr	r1, [pc, #180]	; (8001064 <LCD_Rect_Fill+0x588>)
 8000fb0:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8000fb4:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000fb6:	f8c1 b010 	str.w	fp, [r1, #16]
 8000fba:	f8c1 a010 	str.w	sl, [r1, #16]
 8000fbe:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fc2:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000fc6:	f8c1 a010 	str.w	sl, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fca:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8000fce:	f8c1 8010 	str.w	r8, [r1, #16]
 8000fd2:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8000fd6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000fda:	4a21      	ldr	r2, [pc, #132]	; (8001060 <LCD_Rect_Fill+0x584>)
 8000fdc:	4822      	ldr	r0, [pc, #136]	; (8001068 <LCD_Rect_Fill+0x58c>)
  data[1] = y1;
 8000fde:	fa5f f589 	uxtb.w	r5, r9
 8000fe2:	6104      	str	r4, [r0, #16]
 8000fe4:	6106      	str	r6, [r0, #16]
 8000fe6:	f8c2 e010 	str.w	lr, [r2, #16]
 8000fea:	6117      	str	r7, [r2, #16]
 8000fec:	6114      	str	r4, [r2, #16]
 8000fee:	6116      	str	r6, [r2, #16]
 8000ff0:	6111      	str	r1, [r2, #16]
 8000ff2:	f8c2 c010 	str.w	ip, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000ff6:	09ea      	lsrs	r2, r5, #7
    GPIOx->BSRR = GPIO_Pin;
 8000ff8:	bf16      	itet	ne
 8000ffa:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ffc:	6107      	streq	r7, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ffe:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001000:	f019 0f40 	tst.w	r9, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001004:	bf0c      	ite	eq
 8001006:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800100a:	2108      	movne	r1, #8
 800100c:	4a16      	ldr	r2, [pc, #88]	; (8001068 <LCD_Rect_Fill+0x58c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800100e:	f019 0f20 	tst.w	r9, #32
 8001012:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001014:	bf0c      	ite	eq
 8001016:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800101a:	2110      	movne	r1, #16
 800101c:	4a12      	ldr	r2, [pc, #72]	; (8001068 <LCD_Rect_Fill+0x58c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800101e:	f019 0f10 	tst.w	r9, #16
 8001022:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001024:	bf0c      	ite	eq
 8001026:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800102a:	2120      	movne	r1, #32
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <LCD_Rect_Fill+0x58c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800102e:	f019 0f08 	tst.w	r9, #8
 8001032:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001034:	bf0c      	ite	eq
 8001036:	f44f 0180 	moveq.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800103a:	2140      	movne	r1, #64	; 0x40
 800103c:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <LCD_Rect_Fill+0x58c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800103e:	f019 0f04 	tst.w	r9, #4
 8001042:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001044:	bf0c      	ite	eq
 8001046:	f44f 0100 	moveq.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800104a:	2180      	movne	r1, #128	; 0x80
 800104c:	4a06      	ldr	r2, [pc, #24]	; (8001068 <LCD_Rect_Fill+0x58c>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800104e:	f019 0f02 	tst.w	r9, #2
 8001052:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001054:	bf0c      	ite	eq
 8001056:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800105a:	2110      	movne	r1, #16
 800105c:	e006      	b.n	800106c <LCD_Rect_Fill+0x590>
 800105e:	bf00      	nop
 8001060:	40011000 	.word	0x40011000
 8001064:	40010c00 	.word	0x40010c00
 8001068:	40010800 	.word	0x40010800
 800106c:	4ab5      	ldr	r2, [pc, #724]	; (8001344 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800106e:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8001072:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001074:	07ea      	lsls	r2, r5, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001076:	bf54      	ite	pl
 8001078:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800107c:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800107e:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8001082:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8001086:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 800108a:	f04f 0b02 	mov.w	fp, #2
 800108e:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8001092:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001096:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 800109a:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 800109e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 80010a2:	4aa8      	ldr	r2, [pc, #672]	; (8001344 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010a4:	48a8      	ldr	r0, [pc, #672]	; (8001348 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = GPIO_Pin;
 80010a6:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010a8:	49a8      	ldr	r1, [pc, #672]	; (800134c <LCD_Rect_Fill+0x870>)
 80010aa:	4aa6      	ldr	r2, [pc, #664]	; (8001344 <LCD_Rect_Fill+0x868>)
 80010ac:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 80010ae:	f8c1 b010 	str.w	fp, [r1, #16]
 80010b2:	f8c1 a010 	str.w	sl, [r1, #16]
 80010b6:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010ba:	f8c1 8010 	str.w	r8, [r1, #16]
 80010be:	6104      	str	r4, [r0, #16]
 80010c0:	6105      	str	r5, [r0, #16]
 80010c2:	f8c2 e010 	str.w	lr, [r2, #16]
 80010c6:	6116      	str	r6, [r2, #16]
 80010c8:	6114      	str	r4, [r2, #16]
 80010ca:	6115      	str	r5, [r2, #16]
 80010cc:	f8c2 c010 	str.w	ip, [r2, #16]
 80010d0:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80010d2:	9a02      	ldr	r2, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 80010d4:	f04f 0a02 	mov.w	sl, #2
 80010d8:	0bd2      	lsrs	r2, r2, #15
 80010da:	bf16      	itet	ne
 80010dc:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010de:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 80010e0:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80010e2:	065f      	lsls	r7, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010e4:	bf54      	ite	pl
 80010e6:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80010ea:	2108      	movmi	r1, #8
 80010ec:	4a96      	ldr	r2, [pc, #600]	; (8001348 <LCD_Rect_Fill+0x86c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80010ee:	069e      	lsls	r6, r3, #26
 80010f0:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010f2:	bf54      	ite	pl
 80010f4:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80010f8:	2110      	movmi	r1, #16
 80010fa:	4a93      	ldr	r2, [pc, #588]	; (8001348 <LCD_Rect_Fill+0x86c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80010fc:	06dd      	lsls	r5, r3, #27
 80010fe:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001100:	bf54      	ite	pl
 8001102:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001106:	2120      	movmi	r1, #32
 8001108:	4a8f      	ldr	r2, [pc, #572]	; (8001348 <LCD_Rect_Fill+0x86c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800110a:	071c      	lsls	r4, r3, #28
 800110c:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800110e:	bf54      	ite	pl
 8001110:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001114:	2140      	movmi	r1, #64	; 0x40
 8001116:	4a8c      	ldr	r2, [pc, #560]	; (8001348 <LCD_Rect_Fill+0x86c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001118:	0758      	lsls	r0, r3, #29
 800111a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800111c:	bf54      	ite	pl
 800111e:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001122:	2180      	movmi	r1, #128	; 0x80
 8001124:	4a88      	ldr	r2, [pc, #544]	; (8001348 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001126:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 800112a:	6111      	str	r1, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800112c:	0799      	lsls	r1, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800112e:	bf54      	ite	pl
 8001130:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001134:	2210      	movmi	r2, #16
 8001136:	4b83      	ldr	r3, [pc, #524]	; (8001344 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001138:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 800113c:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800113e:	9b04      	ldr	r3, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001140:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8001144:	f013 0f01 	tst.w	r3, #1
 8001148:	bf0c      	ite	eq
 800114a:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800114e:	2220      	movne	r2, #32
 8001150:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8001154:	f04f 0801 	mov.w	r8, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001158:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 800115c:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8001160:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8001164:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8001168:	4b76      	ldr	r3, [pc, #472]	; (8001344 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800116a:	4977      	ldr	r1, [pc, #476]	; (8001348 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = GPIO_Pin;
 800116c:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800116e:	4a77      	ldr	r2, [pc, #476]	; (800134c <LCD_Rect_Fill+0x870>)
 8001170:	4b74      	ldr	r3, [pc, #464]	; (8001344 <LCD_Rect_Fill+0x868>)
 8001172:	6110      	str	r0, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001174:	f8c2 a010 	str.w	sl, [r2, #16]
 8001178:	f8c2 9010 	str.w	r9, [r2, #16]
 800117c:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001180:	f8c2 e010 	str.w	lr, [r2, #16]
 8001184:	6108      	str	r0, [r1, #16]
 8001186:	610c      	str	r4, [r1, #16]
 8001188:	f8c3 c010 	str.w	ip, [r3, #16]
 800118c:	611d      	str	r5, [r3, #16]
 800118e:	6118      	str	r0, [r3, #16]
 8001190:	611c      	str	r4, [r3, #16]
 8001192:	611f      	str	r7, [r3, #16]
 8001194:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001196:	9b03      	ldr	r3, [sp, #12]
 8001198:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800119c:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 800119e:	bf1c      	itt	ne
 80011a0:	2304      	movne	r3, #4
 80011a2:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80011a4:	9b02      	ldr	r3, [sp, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011a6:	bf08      	it	eq
 80011a8:	610d      	streq	r5, [r1, #16]
 80011aa:	f013 0f40 	tst.w	r3, #64	; 0x40
    GPIOx->BSRR = GPIO_Pin;
 80011ae:	bf14      	ite	ne
 80011b0:	2208      	movne	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011b2:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80011b6:	4b64      	ldr	r3, [pc, #400]	; (8001348 <LCD_Rect_Fill+0x86c>)
 80011b8:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011bc:	611a      	str	r2, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80011be:	9b02      	ldr	r3, [sp, #8]
 80011c0:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 80011c4:	f013 0f20 	tst.w	r3, #32
    GPIOx->BSRR = GPIO_Pin;
 80011c8:	bf14      	ite	ne
 80011ca:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011cc:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80011d0:	4b5d      	ldr	r3, [pc, #372]	; (8001348 <LCD_Rect_Fill+0x86c>)
 80011d2:	2402      	movs	r4, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011d4:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80011d6:	9b02      	ldr	r3, [sp, #8]
 80011d8:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 80011dc:	f013 0f10 	tst.w	r3, #16
    GPIOx->BSRR = GPIO_Pin;
 80011e0:	bf14      	ite	ne
 80011e2:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011e4:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80011e8:	4b57      	ldr	r3, [pc, #348]	; (8001348 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80011ee:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80011f0:	9b02      	ldr	r3, [sp, #8]
 80011f2:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 80011f6:	f013 0f08 	tst.w	r3, #8
    GPIOx->BSRR = GPIO_Pin;
 80011fa:	bf14      	ite	ne
 80011fc:	2240      	movne	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011fe:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001202:	4b51      	ldr	r3, [pc, #324]	; (8001348 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001204:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8001208:	611a      	str	r2, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800120a:	9b02      	ldr	r3, [sp, #8]
 800120c:	494f      	ldr	r1, [pc, #316]	; (800134c <LCD_Rect_Fill+0x870>)
 800120e:	f013 0f04 	tst.w	r3, #4
    GPIOx->BSRR = GPIO_Pin;
 8001212:	bf14      	ite	ne
 8001214:	2280      	movne	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001216:	f44f 0200 	moveq.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800121a:	4b4b      	ldr	r3, [pc, #300]	; (8001348 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800121c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8001220:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001222:	9b02      	ldr	r3, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 8001224:	f04f 0910 	mov.w	r9, #16
 8001228:	079a      	lsls	r2, r3, #30
 800122a:	bf4c      	ite	mi
 800122c:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800122e:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8001232:	4b44      	ldr	r3, [pc, #272]	; (8001344 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = GPIO_Pin;
 8001234:	f04f 0840 	mov.w	r8, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001238:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800123a:	9b03      	ldr	r3, [sp, #12]
 800123c:	07db      	lsls	r3, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 800123e:	bf4c      	ite	mi
 8001240:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001242:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8001246:	4b3f      	ldr	r3, [pc, #252]	; (8001344 <LCD_Rect_Fill+0x868>)
 8001248:	611a      	str	r2, [r3, #16]
 800124a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800124e:	6108      	str	r0, [r1, #16]
 8001250:	4a3c      	ldr	r2, [pc, #240]	; (8001344 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = GPIO_Pin;
 8001252:	610c      	str	r4, [r1, #16]
 8001254:	610d      	str	r5, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001256:	f8c1 e010 	str.w	lr, [r1, #16]
 800125a:	610b      	str	r3, [r1, #16]
 800125c:	f103 5370 	add.w	r3, r3, #1006632960	; 0x3c000000
 8001260:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001264:	6118      	str	r0, [r3, #16]
 8001266:	f8c3 e010 	str.w	lr, [r3, #16]
 800126a:	f8c2 c010 	str.w	ip, [r2, #16]
 800126e:	6117      	str	r7, [r2, #16]
 8001270:	6110      	str	r0, [r2, #16]
 8001272:	f8c2 e010 	str.w	lr, [r2, #16]
 8001276:	f8c2 b010 	str.w	fp, [r2, #16]
 800127a:	f8c2 a010 	str.w	sl, [r2, #16]
 800127e:	611f      	str	r7, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001280:	2780      	movs	r7, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001282:	f8c3 c010 	str.w	ip, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001286:	f8c3 9010 	str.w	r9, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800128a:	611e      	str	r6, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800128c:	f8c3 8010 	str.w	r8, [r3, #16]
 8001290:	611f      	str	r7, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001292:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 8001296:	6117      	str	r7, [r2, #16]
 8001298:	6116      	str	r6, [r2, #16]
 800129a:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800129c:	610c      	str	r4, [r1, #16]
 800129e:	610d      	str	r5, [r1, #16]
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80012a0:	9d01      	ldr	r5, [sp, #4]
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	f000 80c8 	beq.w	8001438 <LCD_Rect_Fill+0x95c>
 80012a8:	2500      	movs	r5, #0
 80012aa:	2601      	movs	r6, #1
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 80012ac:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80012ae:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80012b2:	f3c7 2785 	ubfx	r7, r7, #10, #6
 80012b6:	f3cc 4cc4 	ubfx	ip, ip, #19, #5
 80012ba:	017f      	lsls	r7, r7, #5
 80012bc:	ea47 27cc 	orr.w	r7, r7, ip, lsl #11
 80012c0:	f3c7 3880 	ubfx	r8, r7, #14, #1
 80012c4:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80012c8:	f8cd 8008 	str.w	r8, [sp, #8]
 80012cc:	f3c7 3840 	ubfx	r8, r7, #13, #1
 80012d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80012d4:	f3c7 3800 	ubfx	r8, r7, #12, #1
 80012d8:	f3c9 1940 	ubfx	r9, r9, #5, #1
 80012dc:	f8cd 8010 	str.w	r8, [sp, #16]
 80012e0:	f3c7 28c0 	ubfx	r8, r7, #11, #1
 80012e4:	f8cd 8014 	str.w	r8, [sp, #20]
 80012e8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80012ec:	f3c7 2880 	ubfx	r8, r7, #10, #1
 80012f0:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80012f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80012f8:	f3c7 2840 	ubfx	r8, r7, #9, #1
 80012fc:	f3c9 1900 	ubfx	r9, r9, #4, #1
 8001300:	f8cd 801c 	str.w	r8, [sp, #28]
 8001304:	f3c7 2800 	ubfx	r8, r7, #8, #1
 8001308:	f8cd 8020 	str.w	r8, [sp, #32]
 800130c:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8001310:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8001314:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8001318:	f3c8 18c0 	ubfx	r8, r8, #7, #1
 800131c:	f3c7 1ac0 	ubfx	sl, r7, #7, #1
 8001320:	f3c7 1b80 	ubfx	fp, r7, #6, #1
 8001324:	f3c9 09c0 	ubfx	r9, r9, #3, #1
 8001328:	f3c7 1740 	ubfx	r7, r7, #5, #1
 800132c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8001330:	e9cd 970c 	strd	r9, r7, [sp, #48]	; 0x30
 8001334:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001338:	f3cc 1c10 	ubfx	ip, ip, #4, #17
 800133c:	f3c8 1880 	ubfx	r8, r8, #6, #1
 8001340:	e006      	b.n	8001350 <LCD_Rect_Fill+0x874>
 8001342:	bf00      	nop
 8001344:	40011000 	.word	0x40011000
 8001348:	40010800 	.word	0x40010800
 800134c:	40010c00 	.word	0x40010c00
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001350:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8001354:	610e      	str	r6, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001356:	610f      	str	r7, [r1, #16]
 8001358:	f1bc 0f00 	cmp.w	ip, #0
 800135c:	f000 80ac 	beq.w	80014b8 <LCD_Rect_Fill+0x9dc>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001360:	9f02      	ldr	r7, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 8001362:	611c      	str	r4, [r3, #16]
 8001364:	2f00      	cmp	r7, #0
 8001366:	f000 80ac 	beq.w	80014c2 <LCD_Rect_Fill+0x9e6>
 800136a:	611e      	str	r6, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 800136c:	9f03      	ldr	r7, [sp, #12]
 800136e:	2f00      	cmp	r7, #0
 8001370:	f000 809e 	beq.w	80014b0 <LCD_Rect_Fill+0x9d4>
 8001374:	f04f 0908 	mov.w	r9, #8
 8001378:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 800137c:	9f04      	ldr	r7, [sp, #16]
 800137e:	2f00      	cmp	r7, #0
 8001380:	f000 8091 	beq.w	80014a6 <LCD_Rect_Fill+0x9ca>
 8001384:	f04f 0904 	mov.w	r9, #4
 8001388:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 800138c:	9f05      	ldr	r7, [sp, #20]
 800138e:	2f00      	cmp	r7, #0
 8001390:	f000 8087 	beq.w	80014a2 <LCD_Rect_Fill+0x9c6>
 8001394:	6114      	str	r4, [r2, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001396:	9f06      	ldr	r7, [sp, #24]
 8001398:	2f00      	cmp	r7, #0
 800139a:	d07f      	beq.n	800149c <LCD_Rect_Fill+0x9c0>
 800139c:	6116      	str	r6, [r2, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 800139e:	9f07      	ldr	r7, [sp, #28]
 80013a0:	2f00      	cmp	r7, #0
 80013a2:	d076      	beq.n	8001492 <LCD_Rect_Fill+0x9b6>
 80013a4:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 80013a8:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80013ac:	9f08      	ldr	r7, [sp, #32]
 80013ae:	2f00      	cmp	r7, #0
 80013b0:	d06a      	beq.n	8001488 <LCD_Rect_Fill+0x9ac>
 80013b2:	f44f 4980 	mov.w	r9, #16384	; 0x4000
 80013b6:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80013ba:	f1ba 0f00 	cmp.w	sl, #0
 80013be:	d05e      	beq.n	800147e <LCD_Rect_Fill+0x9a2>
 80013c0:	f04f 0904 	mov.w	r9, #4
 80013c4:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80013c8:	f1bb 0f00 	cmp.w	fp, #0
 80013cc:	d053      	beq.n	8001476 <LCD_Rect_Fill+0x99a>
 80013ce:	f04f 0908 	mov.w	r9, #8
 80013d2:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80013d6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80013d8:	2f00      	cmp	r7, #0
 80013da:	d047      	beq.n	800146c <LCD_Rect_Fill+0x990>
 80013dc:	f04f 0910 	mov.w	r9, #16
 80013e0:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80013e4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80013e6:	2f00      	cmp	r7, #0
 80013e8:	d03b      	beq.n	8001462 <LCD_Rect_Fill+0x986>
 80013ea:	f04f 0920 	mov.w	r9, #32
 80013ee:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80013f2:	f1b8 0f00 	cmp.w	r8, #0
 80013f6:	d02f      	beq.n	8001458 <LCD_Rect_Fill+0x97c>
 80013f8:	f04f 0940 	mov.w	r9, #64	; 0x40
 80013fc:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001400:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8001402:	b327      	cbz	r7, 800144e <LCD_Rect_Fill+0x972>
 8001404:	f04f 0980 	mov.w	r9, #128	; 0x80
 8001408:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800140c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800140e:	b1cf      	cbz	r7, 8001444 <LCD_Rect_Fill+0x968>
 8001410:	f04f 0910 	mov.w	r9, #16
 8001414:	f8c2 9010 	str.w	r9, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001418:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 800141a:	3501      	adds	r5, #1
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800141c:	b17f      	cbz	r7, 800143e <LCD_Rect_Fill+0x962>
 800141e:	f04f 0920 	mov.w	r9, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001422:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001426:	f44f 6980 	mov.w	r9, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 800142a:	9f01      	ldr	r7, [sp, #4]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800142c:	6108      	str	r0, [r1, #16]
 800142e:	42af      	cmp	r7, r5
    GPIOx->BSRR = GPIO_Pin;
 8001430:	610c      	str	r4, [r1, #16]
 8001432:	f8c1 9010 	str.w	r9, [r1, #16]
 8001436:	d18b      	bne.n	8001350 <LCD_Rect_Fill+0x874>
}
 8001438:	b00f      	add	sp, #60	; 0x3c
 800143a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800143e:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
 8001442:	e7ee      	b.n	8001422 <LCD_Rect_Fill+0x946>
 8001444:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
 8001448:	f8c2 9010 	str.w	r9, [r2, #16]
}
 800144c:	e7e4      	b.n	8001418 <LCD_Rect_Fill+0x93c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800144e:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
 8001452:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001456:	e7d9      	b.n	800140c <LCD_Rect_Fill+0x930>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001458:	f44f 0980 	mov.w	r9, #4194304	; 0x400000
 800145c:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001460:	e7ce      	b.n	8001400 <LCD_Rect_Fill+0x924>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001462:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
 8001466:	f8c3 9010 	str.w	r9, [r3, #16]
}
 800146a:	e7c2      	b.n	80013f2 <LCD_Rect_Fill+0x916>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800146c:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
 8001470:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001474:	e7b6      	b.n	80013e4 <LCD_Rect_Fill+0x908>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001476:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 800147a:	611f      	str	r7, [r3, #16]
}
 800147c:	e7ab      	b.n	80013d6 <LCD_Rect_Fill+0x8fa>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800147e:	f44f 2980 	mov.w	r9, #262144	; 0x40000
 8001482:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001486:	e79f      	b.n	80013c8 <LCD_Rect_Fill+0x8ec>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001488:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 800148c:	f8c2 9010 	str.w	r9, [r2, #16]
}
 8001490:	e793      	b.n	80013ba <LCD_Rect_Fill+0x8de>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001492:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8001496:	f8c2 9010 	str.w	r9, [r2, #16]
}
 800149a:	e787      	b.n	80013ac <LCD_Rect_Fill+0x8d0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800149c:	f8c2 e010 	str.w	lr, [r2, #16]
}
 80014a0:	e77d      	b.n	800139e <LCD_Rect_Fill+0x8c2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014a2:	6110      	str	r0, [r2, #16]
}
 80014a4:	e777      	b.n	8001396 <LCD_Rect_Fill+0x8ba>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014a6:	f44f 2980 	mov.w	r9, #262144	; 0x40000
 80014aa:	f8c2 9010 	str.w	r9, [r2, #16]
}
 80014ae:	e76d      	b.n	800138c <LCD_Rect_Fill+0x8b0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014b0:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 80014b4:	6117      	str	r7, [r2, #16]
}
 80014b6:	e761      	b.n	800137c <LCD_Rect_Fill+0x8a0>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 80014b8:	9f02      	ldr	r7, [sp, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014ba:	6118      	str	r0, [r3, #16]
 80014bc:	2f00      	cmp	r7, #0
 80014be:	f47f af54 	bne.w	800136a <LCD_Rect_Fill+0x88e>
 80014c2:	f8c3 e010 	str.w	lr, [r3, #16]
}
 80014c6:	e751      	b.n	800136c <LCD_Rect_Fill+0x890>

080014c8 <HAL_GPIO_Init>:
{
 80014c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014cc:	680e      	ldr	r6, [r1, #0]
{
 80014ce:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d0:	2e00      	cmp	r6, #0
 80014d2:	f000 80b2 	beq.w	800163a <HAL_GPIO_Init+0x172>
 80014d6:	2200      	movs	r2, #0
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014d8:	4f74      	ldr	r7, [pc, #464]	; (80016ac <HAL_GPIO_Init+0x1e4>)
  uint32_t config = 0x00u;
 80014da:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 80014dc:	4613      	mov	r3, r2
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014de:	4d74      	ldr	r5, [pc, #464]	; (80016b0 <HAL_GPIO_Init+0x1e8>)
      switch (GPIO_Init->Mode)
 80014e0:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 80016b4 <HAL_GPIO_Init+0x1ec>
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x2c>
	position++;
 80014e6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e8:	fa36 f403 	lsrs.w	r4, r6, r3
 80014ec:	f102 0204 	add.w	r2, r2, #4
 80014f0:	f000 80a3 	beq.w	800163a <HAL_GPIO_Init+0x172>
    ioposition = (0x01uL << position);
 80014f4:	2401      	movs	r4, #1
 80014f6:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 80014f8:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fc:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8001500:	d1f1      	bne.n	80014e6 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8001502:	684e      	ldr	r6, [r1, #4]
 8001504:	2e12      	cmp	r6, #18
 8001506:	f200 809b 	bhi.w	8001640 <HAL_GPIO_Init+0x178>
 800150a:	2e12      	cmp	r6, #18
 800150c:	d81a      	bhi.n	8001544 <HAL_GPIO_Init+0x7c>
 800150e:	e8df f006 	tbb	[pc, r6]
 8001512:	baa4      	.short	0xbaa4
 8001514:	1919c3b6 	.word	0x1919c3b6
 8001518:	19191919 	.word	0x19191919
 800151c:	19191919 	.word	0x19191919
 8001520:	ae191919 	.word	0xae191919
 8001524:	b2          	.byte	0xb2
 8001525:	00          	.byte	0x00
 8001526:	f8df e190 	ldr.w	lr, [pc, #400]	; 80016b8 <HAL_GPIO_Init+0x1f0>
 800152a:	4576      	cmp	r6, lr
 800152c:	f000 8095 	beq.w	800165a <HAL_GPIO_Init+0x192>
 8001530:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8001534:	4576      	cmp	r6, lr
 8001536:	f000 8090 	beq.w	800165a <HAL_GPIO_Init+0x192>
 800153a:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800153e:	4576      	cmp	r6, lr
 8001540:	f000 808b 	beq.w	800165a <HAL_GPIO_Init+0x192>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001544:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8001548:	bf9c      	itt	ls
 800154a:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800154c:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800154e:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001552:	bf84      	itt	hi
 8001554:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001558:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800155c:	f8de 4000 	ldr.w	r4, [lr]
 8001560:	fa0a f90b 	lsl.w	r9, sl, fp
 8001564:	fa06 fb0b 	lsl.w	fp, r6, fp
 8001568:	ea24 040b 	bic.w	r4, r4, fp
 800156c:	ea44 0409 	orr.w	r4, r4, r9
 8001570:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001574:	684c      	ldr	r4, [r1, #4]
 8001576:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800157a:	d076      	beq.n	800166a <HAL_GPIO_Init+0x1a2>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800157c:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001580:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001584:	f04e 0e01 	orr.w	lr, lr, #1
 8001588:	f8c7 e018 	str.w	lr, [r7, #24]
 800158c:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001590:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001594:	f00e 0e01 	and.w	lr, lr, #1
 8001598:	f8cd e004 	str.w	lr, [sp, #4]
 800159c:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80015a0:	f023 0e03 	bic.w	lr, r3, #3
 80015a4:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 80015a8:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 80015ac:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015b0:	fa06 f609 	lsl.w	r6, r6, r9
 80015b4:	ea2b 0b06 	bic.w	fp, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015b8:	4e40      	ldr	r6, [pc, #256]	; (80016bc <HAL_GPIO_Init+0x1f4>)
 80015ba:	42b0      	cmp	r0, r6
 80015bc:	d068      	beq.n	8001690 <HAL_GPIO_Init+0x1c8>
 80015be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015c2:	42b0      	cmp	r0, r6
 80015c4:	d066      	beq.n	8001694 <HAL_GPIO_Init+0x1cc>
 80015c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015ca:	42b0      	cmp	r0, r6
 80015cc:	d05e      	beq.n	800168c <HAL_GPIO_Init+0x1c4>
 80015ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015d2:	42b0      	cmp	r0, r6
 80015d4:	bf0c      	ite	eq
 80015d6:	2603      	moveq	r6, #3
 80015d8:	2604      	movne	r6, #4
 80015da:	fa06 f609 	lsl.w	r6, r6, r9
 80015de:	ea46 060b 	orr.w	r6, r6, fp
        AFIO->EXTICR[position >> 2u] = temp;
 80015e2:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80015e6:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015e8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80015ec:	bf14      	ite	ne
 80015ee:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015f2:	ea26 060c 	biceq.w	r6, r6, ip
 80015f6:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80015f8:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015fa:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80015fe:	bf14      	ite	ne
 8001600:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001604:	ea26 060c 	biceq.w	r6, r6, ip
 8001608:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800160a:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800160c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001610:	bf14      	ite	ne
 8001612:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001616:	ea26 060c 	biceq.w	r6, r6, ip
 800161a:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800161c:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001620:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001622:	d01f      	beq.n	8001664 <HAL_GPIO_Init+0x19c>
          SET_BIT(EXTI->FTSR, iocurrent);
 8001624:	ea44 040c 	orr.w	r4, r4, ip
 8001628:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162a:	680e      	ldr	r6, [r1, #0]
	position++;
 800162c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162e:	fa36 f403 	lsrs.w	r4, r6, r3
 8001632:	f102 0204 	add.w	r2, r2, #4
 8001636:	f47f af5d 	bne.w	80014f4 <HAL_GPIO_Init+0x2c>
}
 800163a:	b003      	add	sp, #12
 800163c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001640:	4546      	cmp	r6, r8
 8001642:	d00a      	beq.n	800165a <HAL_GPIO_Init+0x192>
 8001644:	f67f af6f 	bls.w	8001526 <HAL_GPIO_Init+0x5e>
 8001648:	f8df e074 	ldr.w	lr, [pc, #116]	; 80016c0 <HAL_GPIO_Init+0x1f8>
 800164c:	4576      	cmp	r6, lr
 800164e:	d004      	beq.n	800165a <HAL_GPIO_Init+0x192>
 8001650:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001654:	4576      	cmp	r6, lr
 8001656:	f47f af75 	bne.w	8001544 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800165a:	688e      	ldr	r6, [r1, #8]
 800165c:	b9fe      	cbnz	r6, 800169e <HAL_GPIO_Init+0x1d6>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800165e:	f04f 0a04 	mov.w	sl, #4
 8001662:	e76f      	b.n	8001544 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001664:	ea24 040c 	bic.w	r4, r4, ip
 8001668:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166a:	680e      	ldr	r6, [r1, #0]
 800166c:	e73b      	b.n	80014e6 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800166e:	68cc      	ldr	r4, [r1, #12]
 8001670:	f104 0a04 	add.w	sl, r4, #4
          break;
 8001674:	e766      	b.n	8001544 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001676:	68cc      	ldr	r4, [r1, #12]
 8001678:	f104 0a0c 	add.w	sl, r4, #12
          break;
 800167c:	e762      	b.n	8001544 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800167e:	68cc      	ldr	r4, [r1, #12]
 8001680:	f104 0a08 	add.w	sl, r4, #8
          break;
 8001684:	e75e      	b.n	8001544 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001686:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 800168a:	e75b      	b.n	8001544 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800168c:	2602      	movs	r6, #2
 800168e:	e7a4      	b.n	80015da <HAL_GPIO_Init+0x112>
 8001690:	2600      	movs	r6, #0
 8001692:	e7a2      	b.n	80015da <HAL_GPIO_Init+0x112>
 8001694:	2601      	movs	r6, #1
 8001696:	e7a0      	b.n	80015da <HAL_GPIO_Init+0x112>
      switch (GPIO_Init->Mode)
 8001698:	f04f 0a00 	mov.w	sl, #0
 800169c:	e752      	b.n	8001544 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800169e:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016a0:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 80016a4:	bf0c      	ite	eq
 80016a6:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 80016a8:	6144      	strne	r4, [r0, #20]
 80016aa:	e74b      	b.n	8001544 <HAL_GPIO_Init+0x7c>
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010400 	.word	0x40010400
 80016b4:	10220000 	.word	0x10220000
 80016b8:	10120000 	.word	0x10120000
 80016bc:	40010800 	.word	0x40010800
 80016c0:	10310000 	.word	0x10310000

080016c4 <LCD_Line.constprop.0>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 80016c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016c8:	4686      	mov	lr, r0
 80016ca:	b0bb      	sub	sp, #236	; 0xec
{
	int deltaX = abs(x2 - x1);
 80016cc:	9202      	str	r2, [sp, #8]
 80016ce:	eba2 020e 	sub.w	r2, r2, lr
 80016d2:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 80016d6:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
	int deltaY = abs(y2 - y1);
 80016da:	f5c1 729f 	rsb	r2, r1, #318	; 0x13e
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 80016de:	9135      	str	r1, [sp, #212]	; 0xd4
	int deltaX = abs(x2 - x1);
 80016e0:	9537      	str	r5, [sp, #220]	; 0xdc
	int deltaY = abs(y2 - y1);
 80016e2:	460d      	mov	r5, r1
 80016e4:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 80016e8:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
	int signX = x1 < x2 ? 1 : -1;
 80016ec:	9a02      	ldr	r2, [sp, #8]
	int deltaY = abs(y2 - y1);
 80016ee:	9134      	str	r1, [sp, #208]	; 0xd0
	int signX = x1 < x2 ? 1 : -1;
 80016f0:	4572      	cmp	r2, lr
 80016f2:	bf8c      	ite	hi
 80016f4:	2201      	movhi	r2, #1
 80016f6:	f04f 32ff 	movls.w	r2, #4294967295
	int signY = y1 < y2 ? 1 : -1;
 80016fa:	f5b5 7f9f 	cmp.w	r5, #318	; 0x13e
	int signX = x1 < x2 ? 1 : -1;
 80016fe:	9238      	str	r2, [sp, #224]	; 0xe0
	int signY = y1 < y2 ? 1 : -1;
 8001700:	bf34      	ite	cc
 8001702:	2201      	movcc	r2, #1
 8001704:	f04f 32ff 	movcs.w	r2, #4294967295
 8001708:	9239      	str	r2, [sp, #228]	; 0xe4
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 800170a:	f3c3 2285 	ubfx	r2, r3, #10, #6
 800170e:	f3c3 41c4 	ubfx	r1, r3, #19, #5
 8001712:	0152      	lsls	r2, r2, #5
 8001714:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001718:	f3c1 1110 	ubfx	r1, r1, #4, #17
 800171c:	9136      	str	r1, [sp, #216]	; 0xd8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800171e:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8001722:	f3c2 3180 	ubfx	r1, r2, #14, #1
 8001726:	f04f 6b80 	mov.w	fp, #67108864	; 0x4000000
 800172a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800172e:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8001732:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8001736:	2602      	movs	r6, #2
 8001738:	9103      	str	r1, [sp, #12]
 800173a:	f3c2 3140 	ubfx	r1, r2, #13, #1
 800173e:	9104      	str	r1, [sp, #16]
 8001740:	f3c2 3100 	ubfx	r1, r2, #12, #1
 8001744:	9105      	str	r1, [sp, #20]
 8001746:	f3c2 21c0 	ubfx	r1, r2, #11, #1
 800174a:	9106      	str	r1, [sp, #24]
 800174c:	f3c2 2180 	ubfx	r1, r2, #10, #1
 8001750:	9107      	str	r1, [sp, #28]
 8001752:	f3c2 2140 	ubfx	r1, r2, #9, #1
 8001756:	9108      	str	r1, [sp, #32]
 8001758:	f3c2 2100 	ubfx	r1, r2, #8, #1
 800175c:	9109      	str	r1, [sp, #36]	; 0x24
 800175e:	f3c2 11c0 	ubfx	r1, r2, #7, #1
 8001762:	910a      	str	r1, [sp, #40]	; 0x28
 8001764:	f3c2 1180 	ubfx	r1, r2, #6, #1
 8001768:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800176c:	920c      	str	r2, [sp, #48]	; 0x30
 800176e:	f3c3 12c0 	ubfx	r2, r3, #7, #1
 8001772:	920d      	str	r2, [sp, #52]	; 0x34
 8001774:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8001778:	920e      	str	r2, [sp, #56]	; 0x38
 800177a:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800177e:	920f      	str	r2, [sp, #60]	; 0x3c
 8001780:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8001784:	9210      	str	r2, [sp, #64]	; 0x40
 8001786:	0a2a      	lsrs	r2, r5, #8
 8001788:	9225      	str	r2, [sp, #148]	; 0x94
 800178a:	0bea      	lsrs	r2, r5, #15
 800178c:	9233      	str	r2, [sp, #204]	; 0xcc
 800178e:	0baa      	lsrs	r2, r5, #14
 8001790:	9231      	str	r2, [sp, #196]	; 0xc4
 8001792:	0b6a      	lsrs	r2, r5, #13
 8001794:	922f      	str	r2, [sp, #188]	; 0xbc
 8001796:	0b2a      	lsrs	r2, r5, #12
 8001798:	922d      	str	r2, [sp, #180]	; 0xb4
 800179a:	0aea      	lsrs	r2, r5, #11
 800179c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80017a0:	922b      	str	r2, [sp, #172]	; 0xac
 80017a2:	0aaa      	lsrs	r2, r5, #10
 80017a4:	9311      	str	r3, [sp, #68]	; 0x44
 80017a6:	9229      	str	r2, [sp, #164]	; 0xa4
 80017a8:	f005 0301 	and.w	r3, r5, #1
 80017ac:	0a6a      	lsrs	r2, r5, #9
 80017ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80017b0:	9227      	str	r2, [sp, #156]	; 0x9c
	int error = deltaX - deltaY;
 80017b2:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80017b4:	9323      	str	r3, [sp, #140]	; 0x8c
 80017b6:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80017ba:	9324      	str	r3, [sp, #144]	; 0x90
 80017bc:	ea4f 33de 	mov.w	r3, lr, lsr #15
 80017c0:	9332      	str	r3, [sp, #200]	; 0xc8
 80017c2:	ea4f 339e 	mov.w	r3, lr, lsr #14
 80017c6:	9330      	str	r3, [sp, #192]	; 0xc0
 80017c8:	ea4f 335e 	mov.w	r3, lr, lsr #13
 80017cc:	932e      	str	r3, [sp, #184]	; 0xb8
 80017ce:	ea4f 331e 	mov.w	r3, lr, lsr #12
 80017d2:	932c      	str	r3, [sp, #176]	; 0xb0
 80017d4:	ea4f 23de 	mov.w	r3, lr, lsr #11
 80017d8:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80017da:	932a      	str	r3, [sp, #168]	; 0xa8
 80017dc:	ea4f 239e 	mov.w	r3, lr, lsr #10
 80017e0:	9328      	str	r3, [sp, #160]	; 0xa0
 80017e2:	ea4f 235e 	mov.w	r3, lr, lsr #9
 80017e6:	1a52      	subs	r2, r2, r1
 80017e8:	9326      	str	r3, [sp, #152]	; 0x98
 80017ea:	fa5f f38e 	uxtb.w	r3, lr
 80017ee:	9212      	str	r2, [sp, #72]	; 0x48
 80017f0:	9320      	str	r3, [sp, #128]	; 0x80
 80017f2:	b2ea      	uxtb	r2, r5
 80017f4:	f00e 0301 	and.w	r3, lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017f8:	f8df a358 	ldr.w	sl, [pc, #856]	; 8001b54 <LCD_Line.constprop.0+0x490>
 80017fc:	f8df 9358 	ldr.w	r9, [pc, #856]	; 8001b58 <LCD_Line.constprop.0+0x494>
 8001800:	f8df 8358 	ldr.w	r8, [pc, #856]	; 8001b5c <LCD_Line.constprop.0+0x498>
 8001804:	9221      	str	r2, [sp, #132]	; 0x84
 8001806:	9322      	str	r3, [sp, #136]	; 0x88
 8001808:	f8cd e004 	str.w	lr, [sp, #4]
	data[0] = x1 >> 8;
 800180c:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
 8001810:	f8ca c010 	str.w	ip, [sl, #16]
 8001814:	f8ca b010 	str.w	fp, [sl, #16]
 8001818:	f8c9 0010 	str.w	r0, [r9, #16]
 800181c:	f8c9 c010 	str.w	ip, [r9, #16]
 8001820:	f8c8 4010 	str.w	r4, [r8, #16]
 8001824:	f8c8 7010 	str.w	r7, [r8, #16]
 8001828:	f8c8 0010 	str.w	r0, [r8, #16]
 800182c:	f8c8 c010 	str.w	ip, [r8, #16]
 8001830:	9513      	str	r5, [sp, #76]	; 0x4c
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001832:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 8001834:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001838:	b2ab      	uxth	r3, r5
 800183a:	9315      	str	r3, [sp, #84]	; 0x54
 800183c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8001840:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001842:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001846:	f8c8 e010 	str.w	lr, [r8, #16]
 800184a:	f8c8 1010 	str.w	r1, [r8, #16]
 800184e:	f8c9 7010 	str.w	r7, [r9, #16]
 8001852:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001856:	f8c9 2010 	str.w	r2, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800185a:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 800185e:	2340      	movs	r3, #64	; 0x40
 8001860:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001864:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001868:	f8c9 3010 	str.w	r3, [r9, #16]
 800186c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001870:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001874:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001878:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800187c:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001880:	f8ca 6010 	str.w	r6, [sl, #16]
 8001884:	f8ca 3010 	str.w	r3, [sl, #16]
 8001888:	2301      	movs	r3, #1
 800188a:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800188e:	f8ca b010 	str.w	fp, [sl, #16]
 8001892:	f8c9 0010 	str.w	r0, [r9, #16]
 8001896:	f8c9 c010 	str.w	ip, [r9, #16]
 800189a:	f8c8 4010 	str.w	r4, [r8, #16]
 800189e:	f8c8 7010 	str.w	r7, [r8, #16]
 80018a2:	f8c8 0010 	str.w	r0, [r8, #16]
 80018a6:	f8c8 c010 	str.w	ip, [r8, #16]
 80018aa:	f8c8 e010 	str.w	lr, [r8, #16]
 80018ae:	f8c8 1010 	str.w	r1, [r8, #16]
 80018b2:	2d00      	cmp	r5, #0
 80018b4:	f000 8560 	beq.w	8002378 <LCD_Line.constprop.0+0xcb4>
    GPIOx->BSRR = GPIO_Pin;
 80018b8:	2304      	movs	r3, #4
 80018ba:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80018be:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80018c0:	f013 0301 	ands.w	r3, r3, #1
 80018c4:	9316      	str	r3, [sp, #88]	; 0x58
 80018c6:	bf1c      	itt	ne
 80018c8:	2308      	movne	r3, #8
 80018ca:	f8c9 3010 	strne.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80018ce:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018d0:	bf08      	it	eq
 80018d2:	f8c9 4010 	streq.w	r4, [r9, #16]
 80018d6:	f013 0301 	ands.w	r3, r3, #1
 80018da:	9317      	str	r3, [sp, #92]	; 0x5c
 80018dc:	bf0c      	ite	eq
 80018de:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80018e2:	2310      	movne	r3, #16
 80018e4:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80018e8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80018ea:	f013 0301 	ands.w	r3, r3, #1
 80018ee:	9318      	str	r3, [sp, #96]	; 0x60
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018f0:	bf0c      	ite	eq
 80018f2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80018f6:	2320      	movne	r3, #32
 80018f8:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80018fc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80018fe:	f013 0301 	ands.w	r3, r3, #1
 8001902:	9319      	str	r3, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001904:	bf0c      	ite	eq
 8001906:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800190a:	2340      	movne	r3, #64	; 0x40
 800190c:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001910:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8001912:	f013 0301 	ands.w	r3, r3, #1
 8001916:	9314      	str	r3, [sp, #80]	; 0x50
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001918:	bf0c      	ite	eq
 800191a:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800191e:	2380      	movne	r3, #128	; 0x80
 8001920:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001924:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001926:	f013 0301 	ands.w	r3, r3, #1
 800192a:	931a      	str	r3, [sp, #104]	; 0x68
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800192c:	bf0c      	ite	eq
 800192e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001932:	2310      	movne	r3, #16
 8001934:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001938:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800193a:	f013 0301 	ands.w	r3, r3, #1
 800193e:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001940:	bf0c      	ite	eq
 8001942:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001946:	2320      	movne	r3, #32
 8001948:	f8c8 3010 	str.w	r3, [r8, #16]
 800194c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001950:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001954:	f8ca 6010 	str.w	r6, [sl, #16]
 8001958:	f8ca 3010 	str.w	r3, [sl, #16]
 800195c:	2301      	movs	r3, #1
 800195e:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001962:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001966:	f8ca b010 	str.w	fp, [sl, #16]
 800196a:	f8c9 0010 	str.w	r0, [r9, #16]
 800196e:	f8c9 c010 	str.w	ip, [r9, #16]
 8001972:	f8c8 4010 	str.w	r4, [r8, #16]
 8001976:	f8c8 7010 	str.w	r7, [r8, #16]
 800197a:	f8c8 0010 	str.w	r0, [r8, #16]
 800197e:	f8c8 c010 	str.w	ip, [r8, #16]
 8001982:	f8c8 3010 	str.w	r3, [r8, #16]
 8001986:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800198a:	f8c8 3010 	str.w	r3, [r8, #16]
 800198e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001990:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8001992:	fa1f fe83 	uxth.w	lr, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001996:	09db      	lsrs	r3, r3, #7
 8001998:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIOx->BSRR = GPIO_Pin;
 800199a:	bf16      	itet	ne
 800199c:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800199e:	f8c9 7010 	streq.w	r7, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80019a2:	f8c9 3010 	strne.w	r3, [r9, #16]
 80019a6:	f3ce 1380 	ubfx	r3, lr, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80019aa:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80019ae:	931d      	str	r3, [sp, #116]	; 0x74
 80019b0:	bf16      	itet	ne
 80019b2:	2308      	movne	r3, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019b4:	f8c9 4010 	streq.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80019b8:	f8c9 3010 	strne.w	r3, [r9, #16]
 80019bc:	f3ce 1340 	ubfx	r3, lr, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80019c0:	f01e 0f20 	tst.w	lr, #32
 80019c4:	931e      	str	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019c6:	bf0c      	ite	eq
 80019c8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80019cc:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80019ce:	f01e 0f10 	tst.w	lr, #16
 80019d2:	f8c9 3010 	str.w	r3, [r9, #16]
 80019d6:	f3ce 1300 	ubfx	r3, lr, #4, #1
 80019da:	931c      	str	r3, [sp, #112]	; 0x70
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019dc:	bf0c      	ite	eq
 80019de:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80019e2:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80019e4:	f01e 0f08 	tst.w	lr, #8
 80019e8:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019ec:	bf0c      	ite	eq
 80019ee:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80019f2:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80019f4:	f01e 0f04 	tst.w	lr, #4
 80019f8:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019fc:	bf0c      	ite	eq
 80019fe:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001a02:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001a04:	f01e 0f02 	tst.w	lr, #2
 8001a08:	f3ce 01c0 	ubfx	r1, lr, #3, #1
 8001a0c:	f3ce 0280 	ubfx	r2, lr, #2, #1
 8001a10:	f8c9 3010 	str.w	r3, [r9, #16]
 8001a14:	f3ce 0340 	ubfx	r3, lr, #1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a18:	bf0c      	ite	eq
 8001a1a:	f44f 1e80 	moveq.w	lr, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001a1e:	f04f 0e10 	movne.w	lr, #16
 8001a22:	f8c8 e010 	str.w	lr, [r8, #16]
 8001a26:	fa1f fe85 	uxth.w	lr, r5
 8001a2a:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001a2e:	2d00      	cmp	r5, #0
 8001a30:	f040 849c 	bne.w	800236c <LCD_Line.constprop.0+0xca8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a34:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001a38:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001a3c:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001a40:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a44:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001a48:	f8ca 6010 	str.w	r6, [sl, #16]
 8001a4c:	f8ca 5010 	str.w	r5, [sl, #16]
 8001a50:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a54:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001a58:	f8ca b010 	str.w	fp, [sl, #16]
 8001a5c:	f8c9 0010 	str.w	r0, [r9, #16]
 8001a60:	f8c9 c010 	str.w	ip, [r9, #16]
 8001a64:	f8c8 4010 	str.w	r4, [r8, #16]
 8001a68:	f8c8 7010 	str.w	r7, [r8, #16]
 8001a6c:	f8c8 0010 	str.w	r0, [r8, #16]
 8001a70:	f8c8 c010 	str.w	ip, [r8, #16]
 8001a74:	f8c8 e010 	str.w	lr, [r8, #16]
 8001a78:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001a7c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001a7e:	f8c8 e010 	str.w	lr, [r8, #16]
 8001a82:	2d00      	cmp	r5, #0
 8001a84:	f000 846e 	beq.w	8002364 <LCD_Line.constprop.0+0xca0>
    GPIOx->BSRR = GPIO_Pin;
 8001a88:	f04f 0e04 	mov.w	lr, #4
 8001a8c:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001a90:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8001a92:	2d00      	cmp	r5, #0
 8001a94:	f040 8460 	bne.w	8002358 <LCD_Line.constprop.0+0xc94>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a98:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001a9c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8001a9e:	2d00      	cmp	r5, #0
 8001aa0:	f040 8454 	bne.w	800234c <LCD_Line.constprop.0+0xc88>
 8001aa4:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001aa8:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001aac:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8001aae:	2d00      	cmp	r5, #0
 8001ab0:	f040 8446 	bne.w	8002340 <LCD_Line.constprop.0+0xc7c>
 8001ab4:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001ab8:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001abc:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8001abe:	2d00      	cmp	r5, #0
 8001ac0:	f040 8438 	bne.w	8002334 <LCD_Line.constprop.0+0xc70>
 8001ac4:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 8001ac8:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001acc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8001ace:	2d00      	cmp	r5, #0
 8001ad0:	f040 842a 	bne.w	8002328 <LCD_Line.constprop.0+0xc64>
 8001ad4:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
 8001ad8:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001adc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8001ade:	2d00      	cmp	r5, #0
 8001ae0:	f040 841c 	bne.w	800231c <LCD_Line.constprop.0+0xc58>
 8001ae4:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001ae8:	f8c8 e010 	str.w	lr, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001aec:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8001aee:	2d00      	cmp	r5, #0
 8001af0:	f040 840e 	bne.w	8002310 <LCD_Line.constprop.0+0xc4c>
 8001af4:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001af8:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001afc:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001b00:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b04:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001b08:	f8ca 6010 	str.w	r6, [sl, #16]
 8001b0c:	f8ca 5010 	str.w	r5, [sl, #16]
 8001b10:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b14:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001b18:	f8ca b010 	str.w	fp, [sl, #16]
 8001b1c:	f8c9 0010 	str.w	r0, [r9, #16]
 8001b20:	f8c9 c010 	str.w	ip, [r9, #16]
 8001b24:	f8c8 4010 	str.w	r4, [r8, #16]
 8001b28:	f8c8 7010 	str.w	r7, [r8, #16]
 8001b2c:	f8c8 0010 	str.w	r0, [r8, #16]
 8001b30:	f8c8 c010 	str.w	ip, [r8, #16]
 8001b34:	f8c8 e010 	str.w	lr, [r8, #16]
 8001b38:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001b3c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8001b3e:	f8c8 e010 	str.w	lr, [r8, #16]
 8001b42:	2d00      	cmp	r5, #0
 8001b44:	f000 83e1 	beq.w	800230a <LCD_Line.constprop.0+0xc46>
    GPIOx->BSRR = GPIO_Pin;
 8001b48:	f04f 0e04 	mov.w	lr, #4
 8001b4c:	f8c9 e010 	str.w	lr, [r9, #16]
 8001b50:	e006      	b.n	8001b60 <LCD_Line.constprop.0+0x49c>
 8001b52:	bf00      	nop
 8001b54:	40010c00 	.word	0x40010c00
 8001b58:	40010800 	.word	0x40010800
 8001b5c:	40011000 	.word	0x40011000
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001b60:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8001b62:	2d00      	cmp	r5, #0
 8001b64:	f040 83cc 	bne.w	8002300 <LCD_Line.constprop.0+0xc3c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b68:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001b6c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8001b6e:	2d00      	cmp	r5, #0
 8001b70:	f040 83c1 	bne.w	80022f6 <LCD_Line.constprop.0+0xc32>
 8001b74:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001b78:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001b7c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8001b7e:	2d00      	cmp	r5, #0
 8001b80:	f040 83b4 	bne.w	80022ec <LCD_Line.constprop.0+0xc28>
 8001b84:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001b88:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001b8c:	2900      	cmp	r1, #0
 8001b8e:	f040 83a9 	bne.w	80022e4 <LCD_Line.constprop.0+0xc20>
 8001b92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001b96:	f8c9 1010 	str.w	r1, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001b9a:	2a00      	cmp	r2, #0
 8001b9c:	f040 839e 	bne.w	80022dc <LCD_Line.constprop.0+0xc18>
 8001ba0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ba4:	f8c9 2010 	str.w	r2, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f040 8393 	bne.w	80022d4 <LCD_Line.constprop.0+0xc10>
 8001bae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001bb2:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001bb6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f040 8387 	bne.w	80022cc <LCD_Line.constprop.0+0xc08>
 8001bbe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bc2:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001bca:	9d32      	ldr	r5, [sp, #200]	; 0xc8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bcc:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001bd0:	f8ca 6010 	str.w	r6, [sl, #16]
 8001bd4:	f8ca 3010 	str.w	r3, [sl, #16]
 8001bd8:	b2ab      	uxth	r3, r5
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bda:	f8ca c010 	str.w	ip, [sl, #16]
 8001bde:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001be2:	f8ca b010 	str.w	fp, [sl, #16]
 8001be6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bea:	f8c9 0010 	str.w	r0, [r9, #16]
 8001bee:	f8c9 c010 	str.w	ip, [r9, #16]
 8001bf2:	f8c8 4010 	str.w	r4, [r8, #16]
 8001bf6:	f8c8 7010 	str.w	r7, [r8, #16]
 8001bfa:	f8c8 0010 	str.w	r0, [r8, #16]
 8001bfe:	f8c8 c010 	str.w	ip, [r8, #16]
 8001c02:	931c      	str	r3, [sp, #112]	; 0x70
    GPIOx->BSRR = GPIO_Pin;
 8001c04:	2310      	movs	r3, #16
	data[0] = y1 >> 8;
 8001c06:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c0a:	f8c8 1010 	str.w	r1, [r8, #16]
 8001c0e:	f8c8 2010 	str.w	r2, [r8, #16]
 8001c12:	f8c9 7010 	str.w	r7, [r9, #16]
 8001c16:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001c1a:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c1e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c22:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001c26:	2340      	movs	r3, #64	; 0x40
 8001c28:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c2c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001c30:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001c34:	2310      	movs	r3, #16
 8001c36:	f8c8 3010 	str.w	r3, [r8, #16]
 8001c3a:	2320      	movs	r3, #32
 8001c3c:	f8c8 3010 	str.w	r3, [r8, #16]
 8001c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c44:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001c48:	f8ca 6010 	str.w	r6, [sl, #16]
 8001c4c:	f8ca 3010 	str.w	r3, [sl, #16]
 8001c50:	2301      	movs	r3, #1
 8001c52:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c56:	f8ca b010 	str.w	fp, [sl, #16]
 8001c5a:	f8c9 0010 	str.w	r0, [r9, #16]
 8001c5e:	f8c9 c010 	str.w	ip, [r9, #16]
 8001c62:	f8c8 4010 	str.w	r4, [r8, #16]
 8001c66:	f8c8 7010 	str.w	r7, [r8, #16]
 8001c6a:	f8c8 0010 	str.w	r0, [r8, #16]
 8001c6e:	f8c8 c010 	str.w	ip, [r8, #16]
 8001c72:	f8c8 1010 	str.w	r1, [r8, #16]
 8001c76:	f8c8 2010 	str.w	r2, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001c7a:	2d00      	cmp	r5, #0
 8001c7c:	f000 8323 	beq.w	80022c6 <LCD_Line.constprop.0+0xc02>
    GPIOx->BSRR = GPIO_Pin;
 8001c80:	2304      	movs	r3, #4
 8001c82:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001c86:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8001c88:	f013 0301 	ands.w	r3, r3, #1
 8001c8c:	931b      	str	r3, [sp, #108]	; 0x6c
 8001c8e:	bf1c      	itt	ne
 8001c90:	2308      	movne	r3, #8
 8001c92:	f8c9 3010 	strne.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001c96:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c98:	bf08      	it	eq
 8001c9a:	f8c9 4010 	streq.w	r4, [r9, #16]
 8001c9e:	f013 0301 	ands.w	r3, r3, #1
 8001ca2:	931a      	str	r3, [sp, #104]	; 0x68
 8001ca4:	bf0c      	ite	eq
 8001ca6:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001caa:	2310      	movne	r3, #16
 8001cac:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001cb0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001cb2:	f013 0301 	ands.w	r3, r3, #1
 8001cb6:	9319      	str	r3, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cb8:	bf0c      	ite	eq
 8001cba:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001cbe:	2320      	movne	r3, #32
 8001cc0:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001cc4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8001cc6:	f013 0301 	ands.w	r3, r3, #1
 8001cca:	9318      	str	r3, [sp, #96]	; 0x60
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ccc:	bf0c      	ite	eq
 8001cce:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001cd2:	2340      	movne	r3, #64	; 0x40
 8001cd4:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001cd8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001cda:	f013 0301 	ands.w	r3, r3, #1
 8001cde:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ce0:	bf0c      	ite	eq
 8001ce2:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001ce6:	2380      	movne	r3, #128	; 0x80
 8001ce8:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001cec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001cee:	f013 0301 	ands.w	r3, r3, #1
 8001cf2:	9316      	str	r3, [sp, #88]	; 0x58
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cf4:	bf0c      	ite	eq
 8001cf6:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001cfa:	2310      	movne	r3, #16
 8001cfc:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001d00:	f01e 0301 	ands.w	r3, lr, #1
 8001d04:	9315      	str	r3, [sp, #84]	; 0x54
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d06:	bf0c      	ite	eq
 8001d08:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001d0c:	2320      	movne	r3, #32
 8001d0e:	f8c8 3010 	str.w	r3, [r8, #16]
 8001d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d16:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001d1a:	f8ca 6010 	str.w	r6, [sl, #16]
 8001d1e:	f8ca 3010 	str.w	r3, [sl, #16]
 8001d22:	2301      	movs	r3, #1
 8001d24:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001d2c:	f8ca b010 	str.w	fp, [sl, #16]
 8001d30:	f8c9 0010 	str.w	r0, [r9, #16]
 8001d34:	f8c9 c010 	str.w	ip, [r9, #16]
 8001d38:	f8c8 4010 	str.w	r4, [r8, #16]
 8001d3c:	f8c8 7010 	str.w	r7, [r8, #16]
 8001d40:	f8c8 0010 	str.w	r0, [r8, #16]
 8001d44:	f8c8 c010 	str.w	ip, [r8, #16]
 8001d48:	f8c8 3010 	str.w	r3, [r8, #16]
 8001d4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d50:	f8c8 3010 	str.w	r3, [r8, #16]
 8001d54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001d56:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8001d58:	fa1f fe83 	uxth.w	lr, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001d5c:	09db      	lsrs	r3, r3, #7
 8001d5e:	931e      	str	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = GPIO_Pin;
 8001d60:	bf16      	itet	ne
 8001d62:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d64:	f8c9 7010 	streq.w	r7, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001d68:	f8c9 3010 	strne.w	r3, [r9, #16]
 8001d6c:	f3ce 1380 	ubfx	r3, lr, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001d70:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8001d74:	9314      	str	r3, [sp, #80]	; 0x50
 8001d76:	bf16      	itet	ne
 8001d78:	2308      	movne	r3, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d7a:	f8c9 4010 	streq.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001d7e:	f8c9 3010 	strne.w	r3, [r9, #16]
 8001d82:	f3ce 1340 	ubfx	r3, lr, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001d86:	f01e 0f20 	tst.w	lr, #32
 8001d8a:	931d      	str	r3, [sp, #116]	; 0x74
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d8c:	bf0c      	ite	eq
 8001d8e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001d92:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001d94:	f01e 0f10 	tst.w	lr, #16
 8001d98:	f8c9 3010 	str.w	r3, [r9, #16]
 8001d9c:	f3ce 1300 	ubfx	r3, lr, #4, #1
 8001da0:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001da2:	bf0c      	ite	eq
 8001da4:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001da8:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001daa:	f01e 0f08 	tst.w	lr, #8
 8001dae:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001db2:	bf0c      	ite	eq
 8001db4:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001db8:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001dba:	f01e 0f04 	tst.w	lr, #4
 8001dbe:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dc2:	bf0c      	ite	eq
 8001dc4:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001dc8:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001dca:	f01e 0f02 	tst.w	lr, #2
 8001dce:	f3ce 01c0 	ubfx	r1, lr, #3, #1
 8001dd2:	f3ce 0280 	ubfx	r2, lr, #2, #1
 8001dd6:	f8c9 3010 	str.w	r3, [r9, #16]
 8001dda:	f3ce 0340 	ubfx	r3, lr, #1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dde:	bf0c      	ite	eq
 8001de0:	f44f 1e80 	moveq.w	lr, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001de4:	f04f 0e10 	movne.w	lr, #16
 8001de8:	f8c8 e010 	str.w	lr, [r8, #16]
 8001dec:	fa1f fe85 	uxth.w	lr, r5
 8001df0:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001df4:	2d00      	cmp	r5, #0
 8001df6:	f040 8261 	bne.w	80022bc <LCD_Line.constprop.0+0xbf8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dfa:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001dfe:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001e02:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001e06:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e0a:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001e0e:	f8ca 6010 	str.w	r6, [sl, #16]
 8001e12:	f8ca 5010 	str.w	r5, [sl, #16]
 8001e16:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e1a:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001e1e:	f8ca b010 	str.w	fp, [sl, #16]
 8001e22:	f8c9 0010 	str.w	r0, [r9, #16]
 8001e26:	f8c9 c010 	str.w	ip, [r9, #16]
 8001e2a:	f8c8 4010 	str.w	r4, [r8, #16]
 8001e2e:	f8c8 7010 	str.w	r7, [r8, #16]
 8001e32:	f8c8 0010 	str.w	r0, [r8, #16]
 8001e36:	f8c8 c010 	str.w	ip, [r8, #16]
 8001e3a:	f8c8 e010 	str.w	lr, [r8, #16]
 8001e3e:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001e42:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8001e44:	f8c8 e010 	str.w	lr, [r8, #16]
 8001e48:	2d00      	cmp	r5, #0
 8001e4a:	f000 8234 	beq.w	80022b6 <LCD_Line.constprop.0+0xbf2>
    GPIOx->BSRR = GPIO_Pin;
 8001e4e:	f04f 0e04 	mov.w	lr, #4
 8001e52:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001e56:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8001e58:	2d00      	cmp	r5, #0
 8001e5a:	f040 8227 	bne.w	80022ac <LCD_Line.constprop.0+0xbe8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e5e:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001e62:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8001e64:	2d00      	cmp	r5, #0
 8001e66:	f040 821c 	bne.w	80022a2 <LCD_Line.constprop.0+0xbde>
 8001e6a:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001e6e:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001e72:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8001e74:	2d00      	cmp	r5, #0
 8001e76:	f040 820f 	bne.w	8002298 <LCD_Line.constprop.0+0xbd4>
 8001e7a:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001e7e:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001e82:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8001e84:	2d00      	cmp	r5, #0
 8001e86:	f040 8202 	bne.w	800228e <LCD_Line.constprop.0+0xbca>
 8001e8a:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 8001e8e:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001e92:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8001e94:	2d00      	cmp	r5, #0
 8001e96:	f040 81f5 	bne.w	8002284 <LCD_Line.constprop.0+0xbc0>
 8001e9a:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
 8001e9e:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001ea2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8001ea4:	2d00      	cmp	r5, #0
 8001ea6:	f040 81e8 	bne.w	800227a <LCD_Line.constprop.0+0xbb6>
 8001eaa:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001eae:	f8c8 e010 	str.w	lr, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001eb2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001eb4:	2d00      	cmp	r5, #0
 8001eb6:	f040 81db 	bne.w	8002270 <LCD_Line.constprop.0+0xbac>
 8001eba:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001ebe:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001ec2:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001ec6:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eca:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001ece:	f8ca 6010 	str.w	r6, [sl, #16]
 8001ed2:	f8ca 5010 	str.w	r5, [sl, #16]
 8001ed6:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eda:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001ede:	f8ca b010 	str.w	fp, [sl, #16]
 8001ee2:	f8c9 0010 	str.w	r0, [r9, #16]
 8001ee6:	f8c9 c010 	str.w	ip, [r9, #16]
 8001eea:	f8c8 4010 	str.w	r4, [r8, #16]
 8001eee:	f8c8 7010 	str.w	r7, [r8, #16]
 8001ef2:	f8c8 0010 	str.w	r0, [r8, #16]
 8001ef6:	f8c8 c010 	str.w	ip, [r8, #16]
 8001efa:	f8c8 e010 	str.w	lr, [r8, #16]
 8001efe:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001f02:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8001f04:	f8c8 e010 	str.w	lr, [r8, #16]
 8001f08:	2d00      	cmp	r5, #0
 8001f0a:	f000 81ae 	beq.w	800226a <LCD_Line.constprop.0+0xba6>
    GPIOx->BSRR = GPIO_Pin;
 8001f0e:	f04f 0e04 	mov.w	lr, #4
 8001f12:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001f16:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8001f18:	2d00      	cmp	r5, #0
 8001f1a:	f040 81a1 	bne.w	8002260 <LCD_Line.constprop.0+0xb9c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f1e:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001f22:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8001f24:	2d00      	cmp	r5, #0
 8001f26:	f040 8196 	bne.w	8002256 <LCD_Line.constprop.0+0xb92>
 8001f2a:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001f2e:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001f32:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8001f34:	2d00      	cmp	r5, #0
 8001f36:	f040 8189 	bne.w	800224c <LCD_Line.constprop.0+0xb88>
 8001f3a:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001f3e:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001f42:	2900      	cmp	r1, #0
 8001f44:	f040 817e 	bne.w	8002244 <LCD_Line.constprop.0+0xb80>
 8001f48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001f4c:	f8c9 1010 	str.w	r1, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	f040 8173 	bne.w	800223c <LCD_Line.constprop.0+0xb78>
 8001f56:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f5a:	f8c9 2010 	str.w	r2, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 8168 	bne.w	8002234 <LCD_Line.constprop.0+0xb70>
 8001f64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f68:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001f6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 815c 	bne.w	800222c <LCD_Line.constprop.0+0xb68>
 8001f74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f78:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001f7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f84:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001f88:	f8ca 6010 	str.w	r6, [sl, #16]
 8001f8c:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f90:	f8ca c010 	str.w	ip, [sl, #16]
 8001f94:	f8ca b010 	str.w	fp, [sl, #16]
 8001f98:	f8c9 0010 	str.w	r0, [r9, #16]
 8001f9c:	f8c9 c010 	str.w	ip, [r9, #16]
 8001fa0:	f8c8 4010 	str.w	r4, [r8, #16]
 8001fa4:	f8c8 7010 	str.w	r7, [r8, #16]
 8001fa8:	f8c8 0010 	str.w	r0, [r8, #16]
 8001fac:	f8c8 c010 	str.w	ip, [r8, #16]
 8001fb0:	f8c8 2010 	str.w	r2, [r8, #16]
 8001fb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fb8:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001fbc:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fbe:	f8c9 7010 	str.w	r7, [r9, #16]
 8001fc2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fc6:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001fca:	f8c9 2010 	str.w	r2, [r9, #16]
 8001fce:	2240      	movs	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fd0:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001fd4:	f8c9 2010 	str.w	r2, [r9, #16]
 8001fd8:	2280      	movs	r2, #128	; 0x80
 8001fda:	f8c9 2010 	str.w	r2, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001fe2:	f8c8 2010 	str.w	r2, [r8, #16]
 8001fe6:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001fea:	2301      	movs	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fec:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001ff0:	f8ca 6010 	str.w	r6, [sl, #16]
 8001ff4:	f8ca 1010 	str.w	r1, [sl, #16]
 8001ff8:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001ffc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ffe:	f8ca b010 	str.w	fp, [sl, #16]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 810f 	beq.w	8002226 <LCD_Line.constprop.0+0xb62>
    GPIOx->BSRR = GPIO_Pin;
 8002008:	f8c9 6010 	str.w	r6, [r9, #16]
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800200c:	9b03      	ldr	r3, [sp, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8106 	beq.w	8002220 <LCD_Line.constprop.0+0xb5c>
 8002014:	2301      	movs	r3, #1
 8002016:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 800201a:	9b04      	ldr	r3, [sp, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80fc 	beq.w	800221a <LCD_Line.constprop.0+0xb56>
 8002022:	2308      	movs	r3, #8
 8002024:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8002028:	9b05      	ldr	r3, [sp, #20]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80f2 	beq.w	8002214 <LCD_Line.constprop.0+0xb50>
 8002030:	2304      	movs	r3, #4
 8002032:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8002036:	9b06      	ldr	r3, [sp, #24]
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80e8 	beq.w	800220e <LCD_Line.constprop.0+0xb4a>
 800203e:	f8c8 6010 	str.w	r6, [r8, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8002042:	9b07      	ldr	r3, [sp, #28]
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80df 	beq.w	8002208 <LCD_Line.constprop.0+0xb44>
 800204a:	2301      	movs	r3, #1
 800204c:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8002050:	9b08      	ldr	r3, [sp, #32]
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 80d3 	beq.w	80021fe <LCD_Line.constprop.0+0xb3a>
 8002058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800205c:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8002060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 80c6 	beq.w	80021f4 <LCD_Line.constprop.0+0xb30>
 8002068:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800206c:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 80bb 	beq.w	80021ee <LCD_Line.constprop.0+0xb2a>
 8002078:	2304      	movs	r3, #4
 800207a:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800207e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80b1 	beq.w	80021e8 <LCD_Line.constprop.0+0xb24>
 8002086:	2308      	movs	r3, #8
 8002088:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800208c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 80a5 	beq.w	80021de <LCD_Line.constprop.0+0xb1a>
 8002094:	2310      	movs	r3, #16
 8002096:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800209a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 8099 	beq.w	80021d4 <LCD_Line.constprop.0+0xb10>
 80020a2:	2320      	movs	r3, #32
 80020a4:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80020a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 808d 	beq.w	80021ca <LCD_Line.constprop.0+0xb06>
 80020b0:	2340      	movs	r3, #64	; 0x40
 80020b2:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80020b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 8081 	beq.w	80021c0 <LCD_Line.constprop.0+0xafc>
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80020c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d075      	beq.n	80021b6 <LCD_Line.constprop.0+0xaf2>
 80020ca:	2310      	movs	r3, #16
 80020cc:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80020d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d06a      	beq.n	80021ac <LCD_Line.constprop.0+0xae8>
 80020d6:	2320      	movs	r3, #32
 80020d8:	f8c8 3010 	str.w	r3, [r8, #16]
 80020dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020e0:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80020e4:	f8ca 6010 	str.w	r6, [sl, #16]
 80020e8:	f8ca 3010 	str.w	r3, [sl, #16]
	int error2 = 0;
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
		if (x1 == x2 && y1 == y2)
 80020ec:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80020f0:	4293      	cmp	r3, r2
 80020f2:	f000 8145 	beq.w	8002380 <LCD_Line.constprop.0+0xcbc>
		break;
		error2 = error * 2;
		if (error2 > -deltaY)
 80020f6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
		error2 = error * 2;
 80020f8:	9912      	ldr	r1, [sp, #72]	; 0x48
		if (error2 > -deltaY)
 80020fa:	425b      	negs	r3, r3
 80020fc:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
		error2 = error * 2;
 8002100:	ea4f 0241 	mov.w	r2, r1, lsl #1
		if (error2 > -deltaY)
 8002104:	da27      	bge.n	8002156 <LCD_Line.constprop.0+0xa92>
		{
			error -= deltaY;
			x1 += signX;
 8002106:	9d01      	ldr	r5, [sp, #4]
 8002108:	f8dd e0e0 	ldr.w	lr, [sp, #224]	; 0xe0
 800210c:	4475      	add	r5, lr
 800210e:	462b      	mov	r3, r5
			error -= deltaY;
 8002110:	460d      	mov	r5, r1
 8002112:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8002114:	1a69      	subs	r1, r5, r1
 8002116:	9112      	str	r1, [sp, #72]	; 0x48
			x1 += signX;
 8002118:	b299      	uxth	r1, r3
 800211a:	9101      	str	r1, [sp, #4]
 800211c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002120:	9124      	str	r1, [sp, #144]	; 0x90
 8002122:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 8002126:	9132      	str	r1, [sp, #200]	; 0xc8
 8002128:	f3c3 3181 	ubfx	r1, r3, #14, #2
 800212c:	9130      	str	r1, [sp, #192]	; 0xc0
 800212e:	f3c3 3142 	ubfx	r1, r3, #13, #3
 8002132:	912e      	str	r1, [sp, #184]	; 0xb8
 8002134:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8002138:	912c      	str	r1, [sp, #176]	; 0xb0
 800213a:	f3c3 21c4 	ubfx	r1, r3, #11, #5
 800213e:	912a      	str	r1, [sp, #168]	; 0xa8
 8002140:	f3c3 2185 	ubfx	r1, r3, #10, #6
 8002144:	9128      	str	r1, [sp, #160]	; 0xa0
 8002146:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800214a:	9126      	str	r1, [sp, #152]	; 0x98
 800214c:	b2d9      	uxtb	r1, r3
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	9120      	str	r1, [sp, #128]	; 0x80
 8002154:	9322      	str	r3, [sp, #136]	; 0x88
		}
		if (error2 < deltaX)
 8002156:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8002158:	4291      	cmp	r1, r2
 800215a:	f77f ab57 	ble.w	800180c <LCD_Line.constprop.0+0x148>
		{
			error += deltaX;
			y1 += signY;
 800215e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8002160:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8002162:	4413      	add	r3, r2
			error += deltaX;
 8002164:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002166:	440a      	add	r2, r1
 8002168:	9212      	str	r2, [sp, #72]	; 0x48
			y1 += signY;
 800216a:	b29a      	uxth	r2, r3
 800216c:	9235      	str	r2, [sp, #212]	; 0xd4
 800216e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002172:	9225      	str	r2, [sp, #148]	; 0x94
 8002174:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002178:	9233      	str	r2, [sp, #204]	; 0xcc
 800217a:	f3c3 3281 	ubfx	r2, r3, #14, #2
 800217e:	9231      	str	r2, [sp, #196]	; 0xc4
 8002180:	f3c3 3242 	ubfx	r2, r3, #13, #3
 8002184:	922f      	str	r2, [sp, #188]	; 0xbc
 8002186:	f3c3 3203 	ubfx	r2, r3, #12, #4
 800218a:	922d      	str	r2, [sp, #180]	; 0xb4
 800218c:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 8002190:	922b      	str	r2, [sp, #172]	; 0xac
 8002192:	f3c3 2285 	ubfx	r2, r3, #10, #6
 8002196:	9229      	str	r2, [sp, #164]	; 0xa4
 8002198:	f3c3 2246 	ubfx	r2, r3, #9, #7
 800219c:	9227      	str	r2, [sp, #156]	; 0x9c
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	9221      	str	r2, [sp, #132]	; 0x84
 80021a6:	9323      	str	r3, [sp, #140]	; 0x8c
 80021a8:	f7ff bb30 	b.w	800180c <LCD_Line.constprop.0+0x148>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021b0:	f8c8 3010 	str.w	r3, [r8, #16]
}
 80021b4:	e792      	b.n	80020dc <LCD_Line.constprop.0+0xa18>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021ba:	f8c8 3010 	str.w	r3, [r8, #16]
}
 80021be:	e787      	b.n	80020d0 <LCD_Line.constprop.0+0xa0c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80021c4:	f8c9 3010 	str.w	r3, [r9, #16]
}
 80021c8:	e77c      	b.n	80020c4 <LCD_Line.constprop.0+0xa00>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021ce:	f8c9 3010 	str.w	r3, [r9, #16]
}
 80021d2:	e770      	b.n	80020b6 <LCD_Line.constprop.0+0x9f2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021d8:	f8c9 3010 	str.w	r3, [r9, #16]
}
 80021dc:	e764      	b.n	80020a8 <LCD_Line.constprop.0+0x9e4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021e2:	f8c9 3010 	str.w	r3, [r9, #16]
}
 80021e6:	e758      	b.n	800209a <LCD_Line.constprop.0+0x9d6>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021e8:	f8c9 4010 	str.w	r4, [r9, #16]
}
 80021ec:	e74e      	b.n	800208c <LCD_Line.constprop.0+0x9c8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021ee:	f8c9 7010 	str.w	r7, [r9, #16]
}
 80021f2:	e744      	b.n	800207e <LCD_Line.constprop.0+0x9ba>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021f8:	f8c8 3010 	str.w	r3, [r8, #16]
}
 80021fc:	e738      	b.n	8002070 <LCD_Line.constprop.0+0x9ac>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002202:	f8c8 3010 	str.w	r3, [r8, #16]
}
 8002206:	e72b      	b.n	8002060 <LCD_Line.constprop.0+0x99c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002208:	f8c8 c010 	str.w	ip, [r8, #16]
}
 800220c:	e720      	b.n	8002050 <LCD_Line.constprop.0+0x98c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800220e:	f8c8 0010 	str.w	r0, [r8, #16]
}
 8002212:	e716      	b.n	8002042 <LCD_Line.constprop.0+0x97e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002214:	f8c8 7010 	str.w	r7, [r8, #16]
}
 8002218:	e70d      	b.n	8002036 <LCD_Line.constprop.0+0x972>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800221a:	f8c8 4010 	str.w	r4, [r8, #16]
}
 800221e:	e703      	b.n	8002028 <LCD_Line.constprop.0+0x964>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002220:	f8c9 c010 	str.w	ip, [r9, #16]
}
 8002224:	e6f9      	b.n	800201a <LCD_Line.constprop.0+0x956>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002226:	f8c9 0010 	str.w	r0, [r9, #16]
}
 800222a:	e6ef      	b.n	800200c <LCD_Line.constprop.0+0x948>
    GPIOx->BSRR = GPIO_Pin;
 800222c:	2320      	movs	r3, #32
 800222e:	f8c8 3010 	str.w	r3, [r8, #16]
 8002232:	e6a3      	b.n	8001f7c <LCD_Line.constprop.0+0x8b8>
 8002234:	2310      	movs	r3, #16
 8002236:	f8c8 3010 	str.w	r3, [r8, #16]
 800223a:	e697      	b.n	8001f6c <LCD_Line.constprop.0+0x8a8>
 800223c:	2280      	movs	r2, #128	; 0x80
 800223e:	f8c9 2010 	str.w	r2, [r9, #16]
 8002242:	e68c      	b.n	8001f5e <LCD_Line.constprop.0+0x89a>
 8002244:	2140      	movs	r1, #64	; 0x40
 8002246:	f8c9 1010 	str.w	r1, [r9, #16]
 800224a:	e681      	b.n	8001f50 <LCD_Line.constprop.0+0x88c>
 800224c:	f04f 0e20 	mov.w	lr, #32
 8002250:	f8c9 e010 	str.w	lr, [r9, #16]
 8002254:	e675      	b.n	8001f42 <LCD_Line.constprop.0+0x87e>
 8002256:	f04f 0e10 	mov.w	lr, #16
 800225a:	f8c9 e010 	str.w	lr, [r9, #16]
 800225e:	e668      	b.n	8001f32 <LCD_Line.constprop.0+0x86e>
 8002260:	f04f 0e08 	mov.w	lr, #8
 8002264:	f8c9 e010 	str.w	lr, [r9, #16]
 8002268:	e65b      	b.n	8001f22 <LCD_Line.constprop.0+0x85e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800226a:	f8c9 7010 	str.w	r7, [r9, #16]
 800226e:	e652      	b.n	8001f16 <LCD_Line.constprop.0+0x852>
    GPIOx->BSRR = GPIO_Pin;
 8002270:	f04f 0e20 	mov.w	lr, #32
 8002274:	f8c8 e010 	str.w	lr, [r8, #16]
 8002278:	e623      	b.n	8001ec2 <LCD_Line.constprop.0+0x7fe>
 800227a:	f04f 0e10 	mov.w	lr, #16
 800227e:	f8c8 e010 	str.w	lr, [r8, #16]
 8002282:	e616      	b.n	8001eb2 <LCD_Line.constprop.0+0x7ee>
 8002284:	f04f 0e80 	mov.w	lr, #128	; 0x80
 8002288:	f8c9 e010 	str.w	lr, [r9, #16]
 800228c:	e609      	b.n	8001ea2 <LCD_Line.constprop.0+0x7de>
 800228e:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8002292:	f8c9 e010 	str.w	lr, [r9, #16]
 8002296:	e5fc      	b.n	8001e92 <LCD_Line.constprop.0+0x7ce>
 8002298:	f04f 0e20 	mov.w	lr, #32
 800229c:	f8c9 e010 	str.w	lr, [r9, #16]
 80022a0:	e5ef      	b.n	8001e82 <LCD_Line.constprop.0+0x7be>
 80022a2:	f04f 0e10 	mov.w	lr, #16
 80022a6:	f8c9 e010 	str.w	lr, [r9, #16]
 80022aa:	e5e2      	b.n	8001e72 <LCD_Line.constprop.0+0x7ae>
 80022ac:	f04f 0e08 	mov.w	lr, #8
 80022b0:	f8c9 e010 	str.w	lr, [r9, #16]
 80022b4:	e5d5      	b.n	8001e62 <LCD_Line.constprop.0+0x79e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022b6:	f8c9 7010 	str.w	r7, [r9, #16]
 80022ba:	e5cc      	b.n	8001e56 <LCD_Line.constprop.0+0x792>
    GPIOx->BSRR = GPIO_Pin;
 80022bc:	f04f 0e20 	mov.w	lr, #32
 80022c0:	f8c8 e010 	str.w	lr, [r8, #16]
 80022c4:	e59d      	b.n	8001e02 <LCD_Line.constprop.0+0x73e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022c6:	f8c9 7010 	str.w	r7, [r9, #16]
 80022ca:	e4dc      	b.n	8001c86 <LCD_Line.constprop.0+0x5c2>
    GPIOx->BSRR = GPIO_Pin;
 80022cc:	2320      	movs	r3, #32
 80022ce:	f8c8 3010 	str.w	r3, [r8, #16]
 80022d2:	e478      	b.n	8001bc6 <LCD_Line.constprop.0+0x502>
 80022d4:	2310      	movs	r3, #16
 80022d6:	f8c8 3010 	str.w	r3, [r8, #16]
 80022da:	e46c      	b.n	8001bb6 <LCD_Line.constprop.0+0x4f2>
 80022dc:	2280      	movs	r2, #128	; 0x80
 80022de:	f8c9 2010 	str.w	r2, [r9, #16]
 80022e2:	e461      	b.n	8001ba8 <LCD_Line.constprop.0+0x4e4>
 80022e4:	2140      	movs	r1, #64	; 0x40
 80022e6:	f8c9 1010 	str.w	r1, [r9, #16]
 80022ea:	e456      	b.n	8001b9a <LCD_Line.constprop.0+0x4d6>
 80022ec:	f04f 0e20 	mov.w	lr, #32
 80022f0:	f8c9 e010 	str.w	lr, [r9, #16]
 80022f4:	e44a      	b.n	8001b8c <LCD_Line.constprop.0+0x4c8>
 80022f6:	f04f 0e10 	mov.w	lr, #16
 80022fa:	f8c9 e010 	str.w	lr, [r9, #16]
 80022fe:	e43d      	b.n	8001b7c <LCD_Line.constprop.0+0x4b8>
 8002300:	f04f 0e08 	mov.w	lr, #8
 8002304:	f8c9 e010 	str.w	lr, [r9, #16]
 8002308:	e430      	b.n	8001b6c <LCD_Line.constprop.0+0x4a8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800230a:	f8c9 7010 	str.w	r7, [r9, #16]
 800230e:	e427      	b.n	8001b60 <LCD_Line.constprop.0+0x49c>
    GPIOx->BSRR = GPIO_Pin;
 8002310:	f04f 0e20 	mov.w	lr, #32
 8002314:	f8c8 e010 	str.w	lr, [r8, #16]
 8002318:	f7ff bbf0 	b.w	8001afc <LCD_Line.constprop.0+0x438>
 800231c:	f04f 0e10 	mov.w	lr, #16
 8002320:	f8c8 e010 	str.w	lr, [r8, #16]
 8002324:	f7ff bbe2 	b.w	8001aec <LCD_Line.constprop.0+0x428>
 8002328:	f04f 0e80 	mov.w	lr, #128	; 0x80
 800232c:	f8c9 e010 	str.w	lr, [r9, #16]
 8002330:	f7ff bbd4 	b.w	8001adc <LCD_Line.constprop.0+0x418>
 8002334:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8002338:	f8c9 e010 	str.w	lr, [r9, #16]
 800233c:	f7ff bbc6 	b.w	8001acc <LCD_Line.constprop.0+0x408>
 8002340:	f04f 0e20 	mov.w	lr, #32
 8002344:	f8c9 e010 	str.w	lr, [r9, #16]
 8002348:	f7ff bbb8 	b.w	8001abc <LCD_Line.constprop.0+0x3f8>
 800234c:	f04f 0e10 	mov.w	lr, #16
 8002350:	f8c9 e010 	str.w	lr, [r9, #16]
 8002354:	f7ff bbaa 	b.w	8001aac <LCD_Line.constprop.0+0x3e8>
 8002358:	f04f 0e08 	mov.w	lr, #8
 800235c:	f8c9 e010 	str.w	lr, [r9, #16]
 8002360:	f7ff bb9c 	b.w	8001a9c <LCD_Line.constprop.0+0x3d8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002364:	f8c9 7010 	str.w	r7, [r9, #16]
 8002368:	f7ff bb92 	b.w	8001a90 <LCD_Line.constprop.0+0x3cc>
    GPIOx->BSRR = GPIO_Pin;
 800236c:	f04f 0e20 	mov.w	lr, #32
 8002370:	f8c8 e010 	str.w	lr, [r8, #16]
 8002374:	f7ff bb62 	b.w	8001a3c <LCD_Line.constprop.0+0x378>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002378:	f8c9 7010 	str.w	r7, [r9, #16]
 800237c:	f7ff ba9f 	b.w	80018be <LCD_Line.constprop.0+0x1fa>
		if (x1 == x2 && y1 == y2)
 8002380:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8002382:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8002386:	f47f aeb6 	bne.w	80020f6 <LCD_Line.constprop.0+0xa32>
		}
	}
}
 800238a:	b03b      	add	sp, #236	; 0xec
 800238c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002390 <LCD_Line.constprop.1>:
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8002390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002394:	b0ab      	sub	sp, #172	; 0xac
 8002396:	9123      	str	r1, [sp, #140]	; 0x8c
 8002398:	4619      	mov	r1, r3
 800239a:	9329      	str	r3, [sp, #164]	; 0xa4
	int deltaX = abs(x2 - x1);
 800239c:	1a13      	subs	r3, r2, r0
 800239e:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
 80023a2:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
	int deltaY = abs(y2 - y1);
 80023a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
	int deltaX = abs(x2 - x1);
 80023a8:	9224      	str	r2, [sp, #144]	; 0x90
	int deltaY = abs(y2 - y1);
 80023aa:	1acb      	subs	r3, r1, r3
 80023ac:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80023b0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80023b4:	9225      	str	r2, [sp, #148]	; 0x94
	int signX = x1 < x2 ? 1 : -1;
 80023b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
	int signY = y1 < y2 ? 1 : -1;
 80023b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
	int signX = x1 < x2 ? 1 : -1;
 80023ba:	4282      	cmp	r2, r0
 80023bc:	bf8c      	ite	hi
 80023be:	2201      	movhi	r2, #1
 80023c0:	f04f 32ff 	movls.w	r2, #4294967295
	int signY = y1 < y2 ? 1 : -1;
 80023c4:	4299      	cmp	r1, r3
 80023c6:	bf8c      	ite	hi
 80023c8:	2101      	movhi	r1, #1
 80023ca:	f04f 31ff 	movls.w	r1, #4294967295
	int signX = x1 < x2 ? 1 : -1;
 80023ce:	9227      	str	r2, [sp, #156]	; 0x9c
 80023d0:	0a1a      	lsrs	r2, r3, #8
 80023d2:	9214      	str	r2, [sp, #80]	; 0x50
 80023d4:	0bda      	lsrs	r2, r3, #15
 80023d6:	9201      	str	r2, [sp, #4]
 80023d8:	0b9a      	lsrs	r2, r3, #14
 80023da:	9220      	str	r2, [sp, #128]	; 0x80
 80023dc:	0b5a      	lsrs	r2, r3, #13
 80023de:	921e      	str	r2, [sp, #120]	; 0x78
 80023e0:	0b1a      	lsrs	r2, r3, #12
 80023e2:	921c      	str	r2, [sp, #112]	; 0x70
 80023e4:	0ada      	lsrs	r2, r3, #11
 80023e6:	921a      	str	r2, [sp, #104]	; 0x68
 80023e8:	0a9a      	lsrs	r2, r3, #10
	int signY = y1 < y2 ? 1 : -1;
 80023ea:	9128      	str	r1, [sp, #160]	; 0xa0
 80023ec:	9218      	str	r2, [sp, #96]	; 0x60
 80023ee:	b2d9      	uxtb	r1, r3
 80023f0:	0a5a      	lsrs	r2, r3, #9
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	9312      	str	r3, [sp, #72]	; 0x48
 80023f8:	f000 0301 	and.w	r3, r0, #1
 80023fc:	9311      	str	r3, [sp, #68]	; 0x44
	int error = deltaX - deltaY;
 80023fe:	4663      	mov	r3, ip
 8002400:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8002404:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8002408:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 800240c:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 8002410:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8002414:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8002418:	9216      	str	r2, [sp, #88]	; 0x58
 800241a:	0a02      	lsrs	r2, r0, #8
 800241c:	9213      	str	r2, [sp, #76]	; 0x4c
 800241e:	0bc2      	lsrs	r2, r0, #15
 8002420:	9200      	str	r2, [sp, #0]
 8002422:	0b82      	lsrs	r2, r0, #14
 8002424:	921f      	str	r2, [sp, #124]	; 0x7c
 8002426:	0b42      	lsrs	r2, r0, #13
 8002428:	921d      	str	r2, [sp, #116]	; 0x74
 800242a:	0b02      	lsrs	r2, r0, #12
 800242c:	921b      	str	r2, [sp, #108]	; 0x6c
 800242e:	0ac2      	lsrs	r2, r0, #11
 8002430:	9219      	str	r2, [sp, #100]	; 0x64
 8002432:	0a82      	lsrs	r2, r0, #10
 8002434:	9122      	str	r1, [sp, #136]	; 0x88
 8002436:	9217      	str	r2, [sp, #92]	; 0x5c
 8002438:	b2c1      	uxtb	r1, r0
 800243a:	0a42      	lsrs	r2, r0, #9
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 800243c:	9010      	str	r0, [sp, #64]	; 0x40
	int deltaX = abs(x2 - x1);
 800243e:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
 8002442:	9215      	str	r2, [sp, #84]	; 0x54
 8002444:	9121      	str	r1, [sp, #132]	; 0x84
	int error = deltaX - deltaY;
 8002446:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8002448:	f8df b350 	ldr.w	fp, [pc, #848]	; 800279c <LCD_Line.constprop.1+0x40c>
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	f8df a350 	ldr.w	sl, [pc, #848]	; 80027a0 <LCD_Line.constprop.1+0x410>
 8002452:	f8df 9350 	ldr.w	r9, [pc, #848]	; 80027a4 <LCD_Line.constprop.1+0x414>
 8002456:	9302      	str	r3, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002458:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800245c:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002460:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002462:	f8cb e010 	str.w	lr, [fp, #16]
 8002466:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800246a:	f8ca 7010 	str.w	r7, [sl, #16]
 800246e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002472:	f8ca 4010 	str.w	r4, [sl, #16]
 8002476:	f8c9 6010 	str.w	r6, [r9, #16]
 800247a:	f8c9 5010 	str.w	r5, [r9, #16]
 800247e:	f8c9 7010 	str.w	r7, [r9, #16]
 8002482:	f8c9 4010 	str.w	r4, [r9, #16]
 8002486:	f8c9 8010 	str.w	r8, [r9, #16]
 800248a:	900b      	str	r0, [sp, #44]	; 0x2c
    GPIOx->BSRR = GPIO_Pin;
 800248c:	2040      	movs	r0, #64	; 0x40
	data[0] = x1 >> 8;
 800248e:	f8bd c050 	ldrh.w	ip, [sp, #80]	; 0x50
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002492:	f8c9 1010 	str.w	r1, [r9, #16]
 8002496:	f8ca 5010 	str.w	r5, [sl, #16]
 800249a:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800249e:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024a2:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80024a6:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024aa:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80024ae:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80024b2:	f8c9 2010 	str.w	r2, [r9, #16]
 80024b6:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024b8:	f8c9 3010 	str.w	r3, [r9, #16]
 80024bc:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80024c0:	f8cb 2010 	str.w	r2, [fp, #16]
 80024c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024c8:	f8cb 2010 	str.w	r2, [fp, #16]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024d2:	f8cb e010 	str.w	lr, [fp, #16]
 80024d6:	f8ca 7010 	str.w	r7, [sl, #16]
 80024da:	f8ca 4010 	str.w	r4, [sl, #16]
 80024de:	f8c9 6010 	str.w	r6, [r9, #16]
 80024e2:	f8c9 5010 	str.w	r5, [r9, #16]
 80024e6:	f8c9 7010 	str.w	r7, [r9, #16]
 80024ea:	f8c9 4010 	str.w	r4, [r9, #16]
 80024ee:	f8c9 8010 	str.w	r8, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80024f2:	9b01      	ldr	r3, [sp, #4]
 80024f4:	f8c9 1010 	str.w	r1, [r9, #16]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 849f 	beq.w	8002e3c <LCD_Line.constprop.1+0xaac>
    GPIOx->BSRR = GPIO_Pin;
 80024fe:	2304      	movs	r3, #4
 8002500:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002504:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002506:	f013 0001 	ands.w	r0, r3, #1
 800250a:	bf1c      	itt	ne
 800250c:	2308      	movne	r3, #8
 800250e:	f8ca 3010 	strne.w	r3, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002512:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002514:	bf08      	it	eq
 8002516:	f8ca 6010 	streq.w	r6, [sl, #16]
 800251a:	f013 0301 	ands.w	r3, r3, #1
 800251e:	9303      	str	r3, [sp, #12]
 8002520:	bf0c      	ite	eq
 8002522:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002526:	2310      	movne	r3, #16
 8002528:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800252c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800252e:	f013 0301 	ands.w	r3, r3, #1
 8002532:	9304      	str	r3, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002534:	bf0c      	ite	eq
 8002536:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800253a:	2320      	movne	r3, #32
 800253c:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002540:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002542:	f013 0301 	ands.w	r3, r3, #1
 8002546:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002548:	bf0c      	ite	eq
 800254a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800254e:	2340      	movne	r3, #64	; 0x40
 8002550:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002554:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002556:	f013 0301 	ands.w	r3, r3, #1
 800255a:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800255c:	bf0c      	ite	eq
 800255e:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8002562:	2380      	movne	r3, #128	; 0x80
 8002564:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002568:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800256a:	f013 0301 	ands.w	r3, r3, #1
 800256e:	9305      	str	r3, [sp, #20]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002570:	bf0c      	ite	eq
 8002572:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002576:	2310      	movne	r3, #16
 8002578:	f8c9 3010 	str.w	r3, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800257c:	f01c 0301 	ands.w	r3, ip, #1
 8002580:	9306      	str	r3, [sp, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002582:	bf0c      	ite	eq
 8002584:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002588:	2320      	movne	r3, #32
 800258a:	f8c9 3010 	str.w	r3, [r9, #16]
 800258e:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002590:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002594:	f8cb 3010 	str.w	r3, [fp, #16]
 8002598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800259c:	f8cb 3010 	str.w	r3, [fp, #16]
 80025a0:	2301      	movs	r3, #1
 80025a2:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025aa:	f8cb e010 	str.w	lr, [fp, #16]
 80025ae:	f8ca 7010 	str.w	r7, [sl, #16]
 80025b2:	f8ca 4010 	str.w	r4, [sl, #16]
 80025b6:	f8c9 6010 	str.w	r6, [r9, #16]
 80025ba:	f8c9 5010 	str.w	r5, [r9, #16]
 80025be:	f8c9 7010 	str.w	r7, [r9, #16]
 80025c2:	f8c9 4010 	str.w	r4, [r9, #16]
 80025c6:	f8c9 8010 	str.w	r8, [r9, #16]
 80025ca:	f8c9 3010 	str.w	r3, [r9, #16]
 80025ce:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80025d0:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80025d2:	09d2      	lsrs	r2, r2, #7
 80025d4:	9207      	str	r2, [sp, #28]
    GPIOx->BSRR = GPIO_Pin;
 80025d6:	bf1c      	itt	ne
 80025d8:	2204      	movne	r2, #4
 80025da:	f8ca 2010 	strne.w	r2, [sl, #16]
 80025de:	f3c3 1280 	ubfx	r2, r3, #6, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025e2:	bf08      	it	eq
 80025e4:	f8ca 5010 	streq.w	r5, [sl, #16]
 80025e8:	920c      	str	r2, [sp, #48]	; 0x30
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80025ea:	065a      	lsls	r2, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 80025ec:	bf4a      	itet	mi
 80025ee:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025f0:	f8ca 6010 	strpl.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80025f4:	f8ca 2010 	strmi.w	r2, [sl, #16]
 80025f8:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80025fc:	0699      	lsls	r1, r3, #26
 80025fe:	9208      	str	r2, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002600:	bf54      	ite	pl
 8002602:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002606:	2210      	movmi	r2, #16
 8002608:	f8ca 2010 	str.w	r2, [sl, #16]
 800260c:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8002610:	920d      	str	r2, [sp, #52]	; 0x34
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002612:	06da      	lsls	r2, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002614:	bf54      	ite	pl
 8002616:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800261a:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800261c:	0719      	lsls	r1, r3, #28
 800261e:	f8ca 2010 	str.w	r2, [sl, #16]
 8002622:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8002626:	920e      	str	r2, [sp, #56]	; 0x38
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002628:	bf54      	ite	pl
 800262a:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800262e:	2240      	movmi	r2, #64	; 0x40
 8002630:	f8ca 2010 	str.w	r2, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002634:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002636:	bf54      	ite	pl
 8002638:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800263c:	2280      	movmi	r2, #128	; 0x80
 800263e:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8002642:	f8ca 2010 	str.w	r2, [sl, #16]
 8002646:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800264a:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800264c:	bf54      	ite	pl
 800264e:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002652:	2310      	movmi	r3, #16
 8002654:	f8c9 3010 	str.w	r3, [r9, #16]
 8002658:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800265a:	fa1f fc83 	uxth.w	ip, r3
 800265e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002662:	2b00      	cmp	r3, #0
 8002664:	f040 83e5 	bne.w	8002e32 <LCD_Line.constprop.1+0xaa2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002668:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 800266c:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002670:	f04f 0c02 	mov.w	ip, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002674:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002678:	f8cb c010 	str.w	ip, [fp, #16]
 800267c:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8002680:	f8cb c010 	str.w	ip, [fp, #16]
 8002684:	f04f 0c01 	mov.w	ip, #1
 8002688:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800268c:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002692:	f8cb e010 	str.w	lr, [fp, #16]
 8002696:	f8ca 7010 	str.w	r7, [sl, #16]
 800269a:	f8ca 4010 	str.w	r4, [sl, #16]
 800269e:	f8c9 6010 	str.w	r6, [r9, #16]
 80026a2:	f8c9 5010 	str.w	r5, [r9, #16]
 80026a6:	f8c9 7010 	str.w	r7, [r9, #16]
 80026aa:	f8c9 4010 	str.w	r4, [r9, #16]
 80026ae:	f8c9 8010 	str.w	r8, [r9, #16]
 80026b2:	f8c9 c010 	str.w	ip, [r9, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 83b8 	beq.w	8002e2c <LCD_Line.constprop.1+0xa9c>
    GPIOx->BSRR = GPIO_Pin;
 80026bc:	f04f 0c04 	mov.w	ip, #4
 80026c0:	f8ca c010 	str.w	ip, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80026c4:	2800      	cmp	r0, #0
 80026c6:	f040 83ad 	bne.w	8002e24 <LCD_Line.constprop.1+0xa94>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026ca:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80026ce:	9b03      	ldr	r3, [sp, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f040 83a3 	bne.w	8002e1c <LCD_Line.constprop.1+0xa8c>
 80026d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80026da:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80026de:	9b04      	ldr	r3, [sp, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f040 8397 	bne.w	8002e14 <LCD_Line.constprop.1+0xa84>
 80026e6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80026ea:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80026ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f040 838b 	bne.w	8002e0c <LCD_Line.constprop.1+0xa7c>
 80026f6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80026fa:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80026fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002700:	2b00      	cmp	r3, #0
 8002702:	f040 837f 	bne.w	8002e04 <LCD_Line.constprop.1+0xa74>
 8002706:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800270a:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800270e:	9b05      	ldr	r3, [sp, #20]
 8002710:	2b00      	cmp	r3, #0
 8002712:	f040 8373 	bne.w	8002dfc <LCD_Line.constprop.1+0xa6c>
 8002716:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800271a:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800271e:	9b06      	ldr	r3, [sp, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	f040 8367 	bne.w	8002df4 <LCD_Line.constprop.1+0xa64>
 8002726:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800272a:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 800272e:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002730:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002734:	f8cb 0010 	str.w	r0, [fp, #16]
 8002738:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800273c:	f8cb 0010 	str.w	r0, [fp, #16]
 8002740:	2001      	movs	r0, #1
 8002742:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002746:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800274a:	9b07      	ldr	r3, [sp, #28]
 800274c:	f8cb e010 	str.w	lr, [fp, #16]
 8002750:	f8ca 7010 	str.w	r7, [sl, #16]
 8002754:	f8ca 4010 	str.w	r4, [sl, #16]
 8002758:	f8c9 6010 	str.w	r6, [r9, #16]
 800275c:	f8c9 5010 	str.w	r5, [r9, #16]
 8002760:	f8c9 7010 	str.w	r7, [r9, #16]
 8002764:	f8c9 4010 	str.w	r4, [r9, #16]
 8002768:	f8c9 8010 	str.w	r8, [r9, #16]
 800276c:	f8c9 0010 	str.w	r0, [r9, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 833c 	beq.w	8002dee <LCD_Line.constprop.1+0xa5e>
    GPIOx->BSRR = GPIO_Pin;
 8002776:	2004      	movs	r0, #4
 8002778:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800277c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800277e:	2b00      	cmp	r3, #0
 8002780:	f040 8331 	bne.w	8002de6 <LCD_Line.constprop.1+0xa56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002784:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002788:	9b08      	ldr	r3, [sp, #32]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 8327 	bne.w	8002dde <LCD_Line.constprop.1+0xa4e>
 8002790:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002794:	f8ca 0010 	str.w	r0, [sl, #16]
 8002798:	e006      	b.n	80027a8 <LCD_Line.constprop.1+0x418>
 800279a:	bf00      	nop
 800279c:	40010c00 	.word	0x40010c00
 80027a0:	40010800 	.word	0x40010800
 80027a4:	40011000 	.word	0x40011000
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80027a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f040 8313 	bne.w	8002dd6 <LCD_Line.constprop.1+0xa46>
 80027b0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80027b4:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80027b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f040 8307 	bne.w	8002dce <LCD_Line.constprop.1+0xa3e>
 80027c0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80027c4:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80027c8:	2900      	cmp	r1, #0
 80027ca:	f040 82fc 	bne.w	8002dc6 <LCD_Line.constprop.1+0xa36>
 80027ce:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80027d2:	f8ca 1010 	str.w	r1, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80027d6:	2a00      	cmp	r2, #0
 80027d8:	f040 82f1 	bne.w	8002dbe <LCD_Line.constprop.1+0xa2e>
 80027dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027e0:	f8c9 2010 	str.w	r2, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80027e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f040 82e5 	bne.w	8002db6 <LCD_Line.constprop.1+0xa26>
 80027ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027f0:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80027f4:	f8bd 2000 	ldrh.w	r2, [sp]
 80027f8:	f8cb 7010 	str.w	r7, [fp, #16]
 80027fc:	920d      	str	r2, [sp, #52]	; 0x34
    GPIOx->BSRR = GPIO_Pin;
 80027fe:	2202      	movs	r2, #2
	data[0] = y1 >> 8;
 8002800:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
 8002804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002808:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800280c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8002810:	2110      	movs	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002812:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002816:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800281a:	f8cb 4010 	str.w	r4, [fp, #16]
 800281e:	f8cb e010 	str.w	lr, [fp, #16]
 8002822:	f8ca 7010 	str.w	r7, [sl, #16]
 8002826:	f8ca 4010 	str.w	r4, [sl, #16]
 800282a:	f8c9 6010 	str.w	r6, [r9, #16]
 800282e:	f8c9 5010 	str.w	r5, [r9, #16]
 8002832:	f8c9 7010 	str.w	r7, [r9, #16]
 8002836:	f8c9 4010 	str.w	r4, [r9, #16]
 800283a:	f8c9 8010 	str.w	r8, [r9, #16]
 800283e:	f8c9 0010 	str.w	r0, [r9, #16]
 8002842:	f8ca 5010 	str.w	r5, [sl, #16]
 8002846:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800284a:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800284e:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002852:	2240      	movs	r2, #64	; 0x40
 8002854:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002858:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800285c:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002860:	2220      	movs	r2, #32
 8002862:	f8c9 1010 	str.w	r1, [r9, #16]
 8002866:	f8c9 2010 	str.w	r2, [r9, #16]
 800286a:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800286c:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002870:	f8cb 2010 	str.w	r2, [fp, #16]
 8002874:	2201      	movs	r2, #1
 8002876:	f8cb 3010 	str.w	r3, [fp, #16]
 800287a:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800287e:	f8cb e010 	str.w	lr, [fp, #16]
 8002882:	f8ca 7010 	str.w	r7, [sl, #16]
 8002886:	f8ca 4010 	str.w	r4, [sl, #16]
 800288a:	f8c9 6010 	str.w	r6, [r9, #16]
 800288e:	f8c9 5010 	str.w	r5, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002892:	9b00      	ldr	r3, [sp, #0]
 8002894:	f8c9 7010 	str.w	r7, [r9, #16]
 8002898:	f8c9 4010 	str.w	r4, [r9, #16]
 800289c:	f8c9 8010 	str.w	r8, [r9, #16]
 80028a0:	f8c9 0010 	str.w	r0, [r9, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 8283 	beq.w	8002db0 <LCD_Line.constprop.1+0xa20>
    GPIOx->BSRR = GPIO_Pin;
 80028aa:	2304      	movs	r3, #4
 80028ac:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80028b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80028b2:	f013 0001 	ands.w	r0, r3, #1
 80028b6:	bf1c      	itt	ne
 80028b8:	2308      	movne	r3, #8
 80028ba:	f8ca 3010 	strne.w	r3, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80028be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028c0:	bf08      	it	eq
 80028c2:	f8ca 6010 	streq.w	r6, [sl, #16]
 80028c6:	f013 0301 	ands.w	r3, r3, #1
 80028ca:	930c      	str	r3, [sp, #48]	; 0x30
 80028cc:	bf0c      	ite	eq
 80028ce:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80028d2:	2310      	movne	r3, #16
 80028d4:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80028d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80028da:	f013 0301 	ands.w	r3, r3, #1
 80028de:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028e0:	bf0c      	ite	eq
 80028e2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80028e6:	2320      	movne	r3, #32
 80028e8:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80028ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80028ee:	f013 0301 	ands.w	r3, r3, #1
 80028f2:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028f4:	bf0c      	ite	eq
 80028f6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80028fa:	2340      	movne	r3, #64	; 0x40
 80028fc:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002902:	f013 0301 	ands.w	r3, r3, #1
 8002906:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002908:	bf0c      	ite	eq
 800290a:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800290e:	2380      	movne	r3, #128	; 0x80
 8002910:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002914:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002916:	f013 0301 	ands.w	r3, r3, #1
 800291a:	9308      	str	r3, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800291c:	bf0c      	ite	eq
 800291e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002922:	2310      	movne	r3, #16
 8002924:	f8c9 3010 	str.w	r3, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002928:	f01c 0301 	ands.w	r3, ip, #1
 800292c:	9307      	str	r3, [sp, #28]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800292e:	bf0c      	ite	eq
 8002930:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002934:	2320      	movne	r3, #32
 8002936:	f8c9 3010 	str.w	r3, [r9, #16]
 800293a:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800293c:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002940:	f8cb 3010 	str.w	r3, [fp, #16]
 8002944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002948:	f8cb 3010 	str.w	r3, [fp, #16]
 800294c:	2301      	movs	r3, #1
 800294e:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002952:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002956:	f8cb e010 	str.w	lr, [fp, #16]
 800295a:	f8ca 7010 	str.w	r7, [sl, #16]
 800295e:	f8ca 4010 	str.w	r4, [sl, #16]
 8002962:	f8c9 6010 	str.w	r6, [r9, #16]
 8002966:	f8c9 5010 	str.w	r5, [r9, #16]
 800296a:	f8c9 7010 	str.w	r7, [r9, #16]
 800296e:	f8c9 4010 	str.w	r4, [r9, #16]
 8002972:	f8c9 8010 	str.w	r8, [r9, #16]
 8002976:	f8c9 3010 	str.w	r3, [r9, #16]
 800297a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800297c:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800297e:	09d2      	lsrs	r2, r2, #7
 8002980:	9206      	str	r2, [sp, #24]
    GPIOx->BSRR = GPIO_Pin;
 8002982:	bf1c      	itt	ne
 8002984:	2204      	movne	r2, #4
 8002986:	f8ca 2010 	strne.w	r2, [sl, #16]
 800298a:	f3c3 1280 	ubfx	r2, r3, #6, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800298e:	bf08      	it	eq
 8002990:	f8ca 5010 	streq.w	r5, [sl, #16]
 8002994:	9205      	str	r2, [sp, #20]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002996:	065a      	lsls	r2, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 8002998:	bf4a      	itet	mi
 800299a:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800299c:	f8ca 6010 	strpl.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80029a0:	f8ca 2010 	strmi.w	r2, [sl, #16]
 80029a4:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80029a8:	0699      	lsls	r1, r3, #26
 80029aa:	9204      	str	r2, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029ac:	bf54      	ite	pl
 80029ae:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80029b2:	2210      	movmi	r2, #16
 80029b4:	f8ca 2010 	str.w	r2, [sl, #16]
 80029b8:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80029bc:	9203      	str	r2, [sp, #12]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80029be:	06da      	lsls	r2, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029c0:	bf54      	ite	pl
 80029c2:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80029c6:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80029c8:	0719      	lsls	r1, r3, #28
 80029ca:	f8ca 2010 	str.w	r2, [sl, #16]
 80029ce:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 80029d2:	920f      	str	r2, [sp, #60]	; 0x3c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029d4:	bf54      	ite	pl
 80029d6:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80029da:	2240      	movmi	r2, #64	; 0x40
 80029dc:	f8ca 2010 	str.w	r2, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80029e0:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029e2:	bf54      	ite	pl
 80029e4:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80029e8:	2280      	movmi	r2, #128	; 0x80
 80029ea:	f3c3 0180 	ubfx	r1, r3, #2, #1
 80029ee:	f8ca 2010 	str.w	r2, [sl, #16]
 80029f2:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80029f6:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029f8:	bf54      	ite	pl
 80029fa:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80029fe:	2310      	movmi	r3, #16
 8002a00:	f8c9 3010 	str.w	r3, [r9, #16]
 8002a04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a06:	fa1f fc83 	uxth.w	ip, r3
 8002a0a:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f040 81c9 	bne.w	8002da6 <LCD_Line.constprop.1+0xa16>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a14:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 8002a18:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002a1c:	f04f 0c02 	mov.w	ip, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a20:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002a24:	f8cb c010 	str.w	ip, [fp, #16]
 8002a28:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8002a2c:	f8cb c010 	str.w	ip, [fp, #16]
 8002a30:	f04f 0c01 	mov.w	ip, #1
 8002a34:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a38:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002a3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002a3e:	f8cb e010 	str.w	lr, [fp, #16]
 8002a42:	f8ca 7010 	str.w	r7, [sl, #16]
 8002a46:	f8ca 4010 	str.w	r4, [sl, #16]
 8002a4a:	f8c9 6010 	str.w	r6, [r9, #16]
 8002a4e:	f8c9 5010 	str.w	r5, [r9, #16]
 8002a52:	f8c9 7010 	str.w	r7, [r9, #16]
 8002a56:	f8c9 4010 	str.w	r4, [r9, #16]
 8002a5a:	f8c9 8010 	str.w	r8, [r9, #16]
 8002a5e:	f8c9 c010 	str.w	ip, [r9, #16]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 819c 	beq.w	8002da0 <LCD_Line.constprop.1+0xa10>
    GPIOx->BSRR = GPIO_Pin;
 8002a68:	f04f 0c04 	mov.w	ip, #4
 8002a6c:	f8ca c010 	str.w	ip, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002a70:	2800      	cmp	r0, #0
 8002a72:	f040 8191 	bne.w	8002d98 <LCD_Line.constprop.1+0xa08>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a76:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002a7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f040 8187 	bne.w	8002d90 <LCD_Line.constprop.1+0xa00>
 8002a82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002a86:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f040 817b 	bne.w	8002d88 <LCD_Line.constprop.1+0x9f8>
 8002a92:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002a96:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f040 816f 	bne.w	8002d80 <LCD_Line.constprop.1+0x9f0>
 8002aa2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002aa6:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f040 8163 	bne.w	8002d78 <LCD_Line.constprop.1+0x9e8>
 8002ab2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002ab6:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002aba:	9b08      	ldr	r3, [sp, #32]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 8157 	bne.w	8002d70 <LCD_Line.constprop.1+0x9e0>
 8002ac2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002ac6:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002aca:	9b07      	ldr	r3, [sp, #28]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f040 814b 	bne.w	8002d68 <LCD_Line.constprop.1+0x9d8>
 8002ad2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002ad6:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002ada:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002adc:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002ae0:	f8cb 0010 	str.w	r0, [fp, #16]
 8002ae4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002ae8:	f8cb 0010 	str.w	r0, [fp, #16]
 8002aec:	2001      	movs	r0, #1
 8002aee:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002af2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002af6:	9b06      	ldr	r3, [sp, #24]
 8002af8:	f8cb e010 	str.w	lr, [fp, #16]
 8002afc:	f8ca 7010 	str.w	r7, [sl, #16]
 8002b00:	f8ca 4010 	str.w	r4, [sl, #16]
 8002b04:	f8c9 6010 	str.w	r6, [r9, #16]
 8002b08:	f8c9 5010 	str.w	r5, [r9, #16]
 8002b0c:	f8c9 7010 	str.w	r7, [r9, #16]
 8002b10:	f8c9 4010 	str.w	r4, [r9, #16]
 8002b14:	f8c9 8010 	str.w	r8, [r9, #16]
 8002b18:	f8c9 0010 	str.w	r0, [r9, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 8120 	beq.w	8002d62 <LCD_Line.constprop.1+0x9d2>
    GPIOx->BSRR = GPIO_Pin;
 8002b22:	2004      	movs	r0, #4
 8002b24:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002b28:	9b05      	ldr	r3, [sp, #20]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f040 8115 	bne.w	8002d5a <LCD_Line.constprop.1+0x9ca>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b30:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002b34:	9b04      	ldr	r3, [sp, #16]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f040 810b 	bne.w	8002d52 <LCD_Line.constprop.1+0x9c2>
 8002b3c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b40:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002b44:	9b03      	ldr	r3, [sp, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f040 80ff 	bne.w	8002d4a <LCD_Line.constprop.1+0x9ba>
 8002b4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002b50:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002b54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 80f3 	bne.w	8002d42 <LCD_Line.constprop.1+0x9b2>
 8002b5c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002b60:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002b64:	2900      	cmp	r1, #0
 8002b66:	f040 80e8 	bne.w	8002d3a <LCD_Line.constprop.1+0x9aa>
 8002b6a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8002b6e:	f8ca 1010 	str.w	r1, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002b72:	2a00      	cmp	r2, #0
 8002b74:	f040 80dd 	bne.w	8002d32 <LCD_Line.constprop.1+0x9a2>
 8002b78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b7c:	f8c9 2010 	str.w	r2, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002b80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f040 80d1 	bne.w	8002d2a <LCD_Line.constprop.1+0x99a>
 8002b88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b8c:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002b90:	2202      	movs	r2, #2
 8002b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002b9a:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002b9e:	f8cb 2010 	str.w	r2, [fp, #16]
 8002ba2:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ba6:	f8cb 4010 	str.w	r4, [fp, #16]
 8002baa:	f8cb e010 	str.w	lr, [fp, #16]
 8002bae:	f8ca 7010 	str.w	r7, [sl, #16]
 8002bb2:	f8ca 4010 	str.w	r4, [sl, #16]
 8002bb6:	f8c9 6010 	str.w	r6, [r9, #16]
 8002bba:	f8c9 5010 	str.w	r5, [r9, #16]
 8002bbe:	f8c9 7010 	str.w	r7, [r9, #16]
 8002bc2:	f8c9 4010 	str.w	r4, [r9, #16]
 8002bc6:	f8c9 8010 	str.w	r8, [r9, #16]
 8002bca:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002bce:	2010      	movs	r0, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bd0:	f8ca 5010 	str.w	r5, [sl, #16]
 8002bd4:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002bd8:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bdc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002be0:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002be4:	2040      	movs	r0, #64	; 0x40
 8002be6:	f8ca 0010 	str.w	r0, [sl, #16]
 8002bea:	2080      	movs	r0, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bec:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002bf0:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bf4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002bf8:	f8c9 1010 	str.w	r1, [r9, #16]
 8002bfc:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002c00:	2001      	movs	r0, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c02:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002c06:	f8cb 2010 	str.w	r2, [fp, #16]
 8002c0a:	f8cb 3010 	str.w	r3, [fp, #16]
 8002c0e:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c12:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c16:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002c1a:	f04f 0c20 	mov.w	ip, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c1e:	f8ca 7010 	str.w	r7, [sl, #16]
 8002c22:	f8ca 4010 	str.w	r4, [sl, #16]
 8002c26:	f8c9 6010 	str.w	r6, [r9, #16]
 8002c2a:	f8c9 5010 	str.w	r5, [r9, #16]
 8002c2e:	f8c9 7010 	str.w	r7, [r9, #16]
 8002c32:	f8c9 4010 	str.w	r4, [r9, #16]
 8002c36:	f8c9 8010 	str.w	r8, [r9, #16]
 8002c3a:	f8c9 0010 	str.w	r0, [r9, #16]
 8002c3e:	f8ca 5010 	str.w	r5, [sl, #16]
 8002c42:	f8ca 6010 	str.w	r6, [sl, #16]
 8002c46:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002c4a:	2140      	movs	r1, #64	; 0x40
 8002c4c:	f8ca c010 	str.w	ip, [sl, #16]
 8002c50:	2010      	movs	r0, #16
 8002c52:	f8ca 1010 	str.w	r1, [sl, #16]
 8002c56:	2180      	movs	r1, #128	; 0x80
 8002c58:	f8ca 1010 	str.w	r1, [sl, #16]
 8002c5c:	f8c9 0010 	str.w	r0, [r9, #16]
 8002c60:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c64:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002c68:	f8cb 2010 	str.w	r2, [fp, #16]
		if (x1 == x2 && y1 == y2)
 8002c6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002c6e:	f8cb 3010 	str.w	r3, [fp, #16]
 8002c72:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002c74:	4293      	cmp	r3, r2
 8002c76:	f000 80e5 	beq.w	8002e44 <LCD_Line.constprop.1+0xab4>
		if (error2 > -deltaY)
 8002c7a:	9825      	ldr	r0, [sp, #148]	; 0x94
		error2 = error * 2;
 8002c7c:	9902      	ldr	r1, [sp, #8]
		if (error2 > -deltaY)
 8002c7e:	4243      	negs	r3, r0
 8002c80:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
		error2 = error * 2;
 8002c84:	ea4f 0241 	mov.w	r2, r1, lsl #1
		if (error2 > -deltaY)
 8002c88:	da24      	bge.n	8002cd4 <LCD_Line.constprop.1+0x944>
			x1 += signX;
 8002c8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002c8c:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
			error -= deltaY;
 8002c90:	1a09      	subs	r1, r1, r0
			x1 += signX;
 8002c92:	4463      	add	r3, ip
			error -= deltaY;
 8002c94:	9102      	str	r1, [sp, #8]
			x1 += signX;
 8002c96:	b299      	uxth	r1, r3
 8002c98:	9110      	str	r1, [sp, #64]	; 0x40
 8002c9a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002c9e:	9113      	str	r1, [sp, #76]	; 0x4c
 8002ca0:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 8002ca4:	9100      	str	r1, [sp, #0]
 8002ca6:	f3c3 3181 	ubfx	r1, r3, #14, #2
 8002caa:	911f      	str	r1, [sp, #124]	; 0x7c
 8002cac:	f3c3 3142 	ubfx	r1, r3, #13, #3
 8002cb0:	911d      	str	r1, [sp, #116]	; 0x74
 8002cb2:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8002cb6:	911b      	str	r1, [sp, #108]	; 0x6c
 8002cb8:	f3c3 21c4 	ubfx	r1, r3, #11, #5
 8002cbc:	9119      	str	r1, [sp, #100]	; 0x64
 8002cbe:	f3c3 2185 	ubfx	r1, r3, #10, #6
 8002cc2:	9117      	str	r1, [sp, #92]	; 0x5c
 8002cc4:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8002cc8:	9115      	str	r1, [sp, #84]	; 0x54
 8002cca:	b2d9      	uxtb	r1, r3
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	9121      	str	r1, [sp, #132]	; 0x84
 8002cd2:	9311      	str	r3, [sp, #68]	; 0x44
		if (error2 < deltaX)
 8002cd4:	9926      	ldr	r1, [sp, #152]	; 0x98
 8002cd6:	4291      	cmp	r1, r2
 8002cd8:	f77f abbe 	ble.w	8002458 <LCD_Line.constprop.1+0xc8>
			y1 += signY;
 8002cdc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002cde:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002ce0:	4413      	add	r3, r2
			error += deltaX;
 8002ce2:	9a02      	ldr	r2, [sp, #8]
 8002ce4:	440a      	add	r2, r1
 8002ce6:	9202      	str	r2, [sp, #8]
			y1 += signY;
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	9223      	str	r2, [sp, #140]	; 0x8c
 8002cec:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002cf0:	9214      	str	r2, [sp, #80]	; 0x50
 8002cf2:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002cf6:	9201      	str	r2, [sp, #4]
 8002cf8:	f3c3 3281 	ubfx	r2, r3, #14, #2
 8002cfc:	9220      	str	r2, [sp, #128]	; 0x80
 8002cfe:	f3c3 3242 	ubfx	r2, r3, #13, #3
 8002d02:	921e      	str	r2, [sp, #120]	; 0x78
 8002d04:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8002d08:	921c      	str	r2, [sp, #112]	; 0x70
 8002d0a:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 8002d0e:	921a      	str	r2, [sp, #104]	; 0x68
 8002d10:	f3c3 2285 	ubfx	r2, r3, #10, #6
 8002d14:	9218      	str	r2, [sp, #96]	; 0x60
 8002d16:	f3c3 2246 	ubfx	r2, r3, #9, #7
 8002d1a:	9216      	str	r2, [sp, #88]	; 0x58
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	9222      	str	r2, [sp, #136]	; 0x88
 8002d24:	9312      	str	r3, [sp, #72]	; 0x48
 8002d26:	f7ff bb97 	b.w	8002458 <LCD_Line.constprop.1+0xc8>
 8002d2a:	2320      	movs	r3, #32
 8002d2c:	f8c9 3010 	str.w	r3, [r9, #16]
 8002d30:	e72e      	b.n	8002b90 <LCD_Line.constprop.1+0x800>
 8002d32:	2210      	movs	r2, #16
 8002d34:	f8c9 2010 	str.w	r2, [r9, #16]
 8002d38:	e722      	b.n	8002b80 <LCD_Line.constprop.1+0x7f0>
 8002d3a:	2180      	movs	r1, #128	; 0x80
 8002d3c:	f8ca 1010 	str.w	r1, [sl, #16]
 8002d40:	e717      	b.n	8002b72 <LCD_Line.constprop.1+0x7e2>
 8002d42:	2040      	movs	r0, #64	; 0x40
 8002d44:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d48:	e70c      	b.n	8002b64 <LCD_Line.constprop.1+0x7d4>
 8002d4a:	2020      	movs	r0, #32
 8002d4c:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d50:	e700      	b.n	8002b54 <LCD_Line.constprop.1+0x7c4>
 8002d52:	2010      	movs	r0, #16
 8002d54:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d58:	e6f4      	b.n	8002b44 <LCD_Line.constprop.1+0x7b4>
 8002d5a:	2008      	movs	r0, #8
 8002d5c:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d60:	e6e8      	b.n	8002b34 <LCD_Line.constprop.1+0x7a4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d62:	f8ca 5010 	str.w	r5, [sl, #16]
 8002d66:	e6df      	b.n	8002b28 <LCD_Line.constprop.1+0x798>
    GPIOx->BSRR = GPIO_Pin;
 8002d68:	2020      	movs	r0, #32
 8002d6a:	f8c9 0010 	str.w	r0, [r9, #16]
 8002d6e:	e6b4      	b.n	8002ada <LCD_Line.constprop.1+0x74a>
 8002d70:	2010      	movs	r0, #16
 8002d72:	f8c9 0010 	str.w	r0, [r9, #16]
 8002d76:	e6a8      	b.n	8002aca <LCD_Line.constprop.1+0x73a>
 8002d78:	2080      	movs	r0, #128	; 0x80
 8002d7a:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d7e:	e69c      	b.n	8002aba <LCD_Line.constprop.1+0x72a>
 8002d80:	2040      	movs	r0, #64	; 0x40
 8002d82:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d86:	e690      	b.n	8002aaa <LCD_Line.constprop.1+0x71a>
 8002d88:	2020      	movs	r0, #32
 8002d8a:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d8e:	e684      	b.n	8002a9a <LCD_Line.constprop.1+0x70a>
 8002d90:	2010      	movs	r0, #16
 8002d92:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d96:	e678      	b.n	8002a8a <LCD_Line.constprop.1+0x6fa>
 8002d98:	2008      	movs	r0, #8
 8002d9a:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d9e:	e66c      	b.n	8002a7a <LCD_Line.constprop.1+0x6ea>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002da0:	f8ca 5010 	str.w	r5, [sl, #16]
 8002da4:	e664      	b.n	8002a70 <LCD_Line.constprop.1+0x6e0>
    GPIOx->BSRR = GPIO_Pin;
 8002da6:	f04f 0c20 	mov.w	ip, #32
 8002daa:	f8c9 c010 	str.w	ip, [r9, #16]
 8002dae:	e635      	b.n	8002a1c <LCD_Line.constprop.1+0x68c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002db0:	f8ca 5010 	str.w	r5, [sl, #16]
 8002db4:	e57c      	b.n	80028b0 <LCD_Line.constprop.1+0x520>
    GPIOx->BSRR = GPIO_Pin;
 8002db6:	2320      	movs	r3, #32
 8002db8:	f8c9 3010 	str.w	r3, [r9, #16]
 8002dbc:	e51a      	b.n	80027f4 <LCD_Line.constprop.1+0x464>
 8002dbe:	2210      	movs	r2, #16
 8002dc0:	f8c9 2010 	str.w	r2, [r9, #16]
 8002dc4:	e50e      	b.n	80027e4 <LCD_Line.constprop.1+0x454>
 8002dc6:	2180      	movs	r1, #128	; 0x80
 8002dc8:	f8ca 1010 	str.w	r1, [sl, #16]
 8002dcc:	e503      	b.n	80027d6 <LCD_Line.constprop.1+0x446>
 8002dce:	2040      	movs	r0, #64	; 0x40
 8002dd0:	f8ca 0010 	str.w	r0, [sl, #16]
 8002dd4:	e4f8      	b.n	80027c8 <LCD_Line.constprop.1+0x438>
 8002dd6:	2020      	movs	r0, #32
 8002dd8:	f8ca 0010 	str.w	r0, [sl, #16]
 8002ddc:	e4ec      	b.n	80027b8 <LCD_Line.constprop.1+0x428>
 8002dde:	2010      	movs	r0, #16
 8002de0:	f8ca 0010 	str.w	r0, [sl, #16]
 8002de4:	e4e0      	b.n	80027a8 <LCD_Line.constprop.1+0x418>
 8002de6:	2008      	movs	r0, #8
 8002de8:	f8ca 0010 	str.w	r0, [sl, #16]
 8002dec:	e4cc      	b.n	8002788 <LCD_Line.constprop.1+0x3f8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dee:	f8ca 5010 	str.w	r5, [sl, #16]
 8002df2:	e4c3      	b.n	800277c <LCD_Line.constprop.1+0x3ec>
    GPIOx->BSRR = GPIO_Pin;
 8002df4:	2020      	movs	r0, #32
 8002df6:	f8c9 0010 	str.w	r0, [r9, #16]
 8002dfa:	e498      	b.n	800272e <LCD_Line.constprop.1+0x39e>
 8002dfc:	2010      	movs	r0, #16
 8002dfe:	f8c9 0010 	str.w	r0, [r9, #16]
 8002e02:	e48c      	b.n	800271e <LCD_Line.constprop.1+0x38e>
 8002e04:	2080      	movs	r0, #128	; 0x80
 8002e06:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e0a:	e480      	b.n	800270e <LCD_Line.constprop.1+0x37e>
 8002e0c:	2040      	movs	r0, #64	; 0x40
 8002e0e:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e12:	e474      	b.n	80026fe <LCD_Line.constprop.1+0x36e>
 8002e14:	2020      	movs	r0, #32
 8002e16:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e1a:	e468      	b.n	80026ee <LCD_Line.constprop.1+0x35e>
 8002e1c:	2010      	movs	r0, #16
 8002e1e:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e22:	e45c      	b.n	80026de <LCD_Line.constprop.1+0x34e>
 8002e24:	2008      	movs	r0, #8
 8002e26:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e2a:	e450      	b.n	80026ce <LCD_Line.constprop.1+0x33e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e2c:	f8ca 5010 	str.w	r5, [sl, #16]
 8002e30:	e448      	b.n	80026c4 <LCD_Line.constprop.1+0x334>
    GPIOx->BSRR = GPIO_Pin;
 8002e32:	f04f 0c20 	mov.w	ip, #32
 8002e36:	f8c9 c010 	str.w	ip, [r9, #16]
 8002e3a:	e419      	b.n	8002670 <LCD_Line.constprop.1+0x2e0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e3c:	f8ca 5010 	str.w	r5, [sl, #16]
 8002e40:	f7ff bb60 	b.w	8002504 <LCD_Line.constprop.1+0x174>
		if (x1 == x2 && y1 == y2)
 8002e44:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8002e46:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	f47f af16 	bne.w	8002c7a <LCD_Line.constprop.1+0x8ea>
}
 8002e4e:	b02b      	add	sp, #172	; 0xac
 8002e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002e54 <I2C_RequestMemoryWrite.constprop.0>:
  * @param  MemAddSize Size of internal memory address
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
 8002e54:	b470      	push	{r4, r5, r6}
{
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e56:	4c6c      	ldr	r4, [pc, #432]	; (8003008 <I2C_RequestMemoryWrite.constprop.0+0x1b4>)
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
 8002e58:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e5a:	6862      	ldr	r2, [r4, #4]
 8002e5c:	6813      	ldr	r3, [r2, #0]
 8002e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	e003      	b.n	8002e6e <I2C_RequestMemoryWrite.constprop.0+0x1a>
  return uwTick;
 8002e66:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e68:	1a5b      	subs	r3, r3, r1
 8002e6a:	2b64      	cmp	r3, #100	; 0x64
 8002e6c:	d834      	bhi.n	8002ed8 <I2C_RequestMemoryWrite.constprop.0+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e6e:	6953      	ldr	r3, [r2, #20]
 8002e70:	07db      	lsls	r3, r3, #31
 8002e72:	d5f8      	bpl.n	8002e66 <I2C_RequestMemoryWrite.constprop.0+0x12>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e74:	23ae      	movs	r3, #174	; 0xae
 8002e76:	6113      	str	r3, [r2, #16]
 8002e78:	e00a      	b.n	8002e90 <I2C_RequestMemoryWrite.constprop.0+0x3c>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e7a:	6953      	ldr	r3, [r2, #20]
 8002e7c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002e80:	d157      	bne.n	8002f32 <I2C_RequestMemoryWrite.constprop.0+0xde>
 8002e82:	6825      	ldr	r5, [r4, #0]
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e84:	eba5 0c01 	sub.w	ip, r5, r1
 8002e88:	f1bc 0f64 	cmp.w	ip, #100	; 0x64
 8002e8c:	f200 80a0 	bhi.w	8002fd0 <I2C_RequestMemoryWrite.constprop.0+0x17c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e90:	6953      	ldr	r3, [r2, #20]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	f013 0302 	ands.w	r3, r3, #2
 8002e98:	d1ef      	bne.n	8002e7a <I2C_RequestMemoryWrite.constprop.0+0x26>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	6953      	ldr	r3, [r2, #20]
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	6993      	ldr	r3, [r2, #24]
 8002ea2:	9301      	str	r3, [sp, #4]
 8002ea4:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ea6:	6953      	ldr	r3, [r2, #20]
 8002ea8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8002eac:	d159      	bne.n	8002f62 <I2C_RequestMemoryWrite.constprop.0+0x10e>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eae:	6955      	ldr	r5, [r2, #20]
 8002eb0:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
 8002eb4:	d127      	bne.n	8002f06 <I2C_RequestMemoryWrite.constprop.0+0xb2>
 8002eb6:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb8:	1a5b      	subs	r3, r3, r1
 8002eba:	2b64      	cmp	r3, #100	; 0x64
 8002ebc:	d9f3      	bls.n	8002ea6 <I2C_RequestMemoryWrite.constprop.0+0x52>
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ebe:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ec0:	6365      	str	r5, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ec2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ec6:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002eca:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002ecc:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ed0:	f043 0320 	orr.w	r3, r3, #32
 8002ed4:	6463      	str	r3, [r4, #68]	; 0x44
 8002ed6:	e025      	b.n	8002f24 <I2C_RequestMemoryWrite.constprop.0+0xd0>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ed8:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002eda:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002edc:	6361      	str	r1, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ede:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ee2:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ee6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002ee8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002eec:	f043 0320 	orr.w	r3, r3, #32
 8002ef0:	6463      	str	r3, [r4, #68]	; 0x44
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ef2:	6813      	ldr	r3, [r2, #0]
 8002ef4:	05da      	lsls	r2, r3, #23
 8002ef6:	d54f      	bpl.n	8002f98 <I2C_RequestMemoryWrite.constprop.0+0x144>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ef8:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8002efc:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002efe:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002f00:	b003      	add	sp, #12
 8002f02:	bc70      	pop	{r4, r5, r6}
 8002f04:	4770      	bx	lr
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f06:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f08:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8002f0c:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0e:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f10:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f18:	6c61      	ldr	r1, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f1a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f1e:	f041 0104 	orr.w	r1, r1, #4
 8002f22:	6461      	str	r1, [r4, #68]	; 0x44
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f24:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d067      	beq.n	8002ffa <I2C_RequestMemoryWrite.constprop.0+0x1a6>
    return HAL_ERROR;
 8002f2a:	2001      	movs	r0, #1
}
 8002f2c:	b003      	add	sp, #12
 8002f2e:	bc70      	pop	{r4, r5, r6}
 8002f30:	4770      	bx	lr
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f32:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f34:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f38:	2520      	movs	r5, #32
    return HAL_ERROR;
 8002f3a:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3c:	6813      	ldr	r3, [r2, #0]
 8002f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f42:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f44:	6156      	str	r6, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f46:	6361      	str	r1, [r4, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f48:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f50:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002f52:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f56:	f043 0304 	orr.w	r3, r3, #4
 8002f5a:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002f5c:	b003      	add	sp, #12
 8002f5e:	bc70      	pop	{r4, r5, r6}
 8002f60:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f62:	0a03      	lsrs	r3, r0, #8
 8002f64:	6113      	str	r3, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f66:	6953      	ldr	r3, [r2, #20]
 8002f68:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8002f6c:	d13f      	bne.n	8002fee <I2C_RequestMemoryWrite.constprop.0+0x19a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f6e:	6955      	ldr	r5, [r2, #20]
 8002f70:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
 8002f74:	d114      	bne.n	8002fa0 <I2C_RequestMemoryWrite.constprop.0+0x14c>
 8002f76:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f78:	1a5b      	subs	r3, r3, r1
 8002f7a:	2b64      	cmp	r3, #100	; 0x64
 8002f7c:	d9f3      	bls.n	8002f66 <I2C_RequestMemoryWrite.constprop.0+0x112>
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f7e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f80:	6365      	str	r5, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f86:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002f8c:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f90:	f043 0320 	orr.w	r3, r3, #32
 8002f94:	6463      	str	r3, [r4, #68]	; 0x44
 8002f96:	e012      	b.n	8002fbe <I2C_RequestMemoryWrite.constprop.0+0x16a>
    return HAL_TIMEOUT;
 8002f98:	2003      	movs	r0, #3
}
 8002f9a:	b003      	add	sp, #12
 8002f9c:	bc70      	pop	{r4, r5, r6}
 8002f9e:	4770      	bx	lr
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fa0:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa2:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8002fa6:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa8:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 8002faa:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fb2:	6c61      	ldr	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8002fb4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fb8:	f041 0104 	orr.w	r1, r1, #4
 8002fbc:	6461      	str	r1, [r4, #68]	; 0x44
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d1b2      	bne.n	8002f2a <I2C_RequestMemoryWrite.constprop.0+0xd6>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc4:	6813      	ldr	r3, [r2, #0]
      return HAL_ERROR;
 8002fc6:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	e7c5      	b.n	8002f5c <I2C_RequestMemoryWrite.constprop.0+0x108>
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fd0:	2220      	movs	r2, #32
    return HAL_ERROR;
 8002fd2:	2001      	movs	r0, #1
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd4:	6363      	str	r3, [r4, #52]	; 0x34
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fd6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002fde:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fe2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002fe8:	b003      	add	sp, #12
 8002fea:	bc70      	pop	{r4, r5, r6}
 8002fec:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fee:	b2c3      	uxtb	r3, r0
  return HAL_OK;
 8002ff0:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ff2:	6113      	str	r3, [r2, #16]
}
 8002ff4:	b003      	add	sp, #12
 8002ff6:	bc70      	pop	{r4, r5, r6}
 8002ff8:	4770      	bx	lr
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffa:	6813      	ldr	r3, [r2, #0]
    return HAL_ERROR;
 8002ffc:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	e7aa      	b.n	8002f5c <I2C_RequestMemoryWrite.constprop.0+0x108>
 8003006:	bf00      	nop
 8003008:	20000208 	.word	0x20000208

0800300c <HAL_I2C_Mem_Read.constprop.0.isra.0>:
  __IO uint32_t count = 0U;
 800300c:	2200      	movs	r2, #0
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 800300e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003010:	4ba1      	ldr	r3, [pc, #644]	; (8003298 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x28c>)
 8003012:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 8003014:	9200      	str	r2, [sp, #0]
 8003016:	681d      	ldr	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003018:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800301c:	2a20      	cmp	r2, #32
 800301e:	d001      	beq.n	8003024 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x18>
}
 8003020:	b007      	add	sp, #28
 8003022:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	e003      	b.n	8003030 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x24>
 8003028:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302a:	1b64      	subs	r4, r4, r5
 800302c:	2c19      	cmp	r4, #25
 800302e:	d86a      	bhi.n	8003106 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003030:	6994      	ldr	r4, [r2, #24]
 8003032:	ea6f 0c04 	mvn.w	ip, r4
 8003036:	f01c 0c02 	ands.w	ip, ip, #2
 800303a:	d0f5      	beq.n	8003028 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1c>
    __HAL_LOCK(hi2c);
 800303c:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
 8003040:	2c01      	cmp	r4, #1
 8003042:	d0ed      	beq.n	8003020 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
 8003044:	2401      	movs	r4, #1
 8003046:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800304a:	6814      	ldr	r4, [r2, #0]
 800304c:	07e7      	lsls	r7, r4, #31
 800304e:	d555      	bpl.n	80030fc <HAL_I2C_Mem_Read.constprop.0.isra.0+0xf0>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003050:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003054:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003058:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 800305a:	2601      	movs	r6, #1
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800305c:	6814      	ldr	r4, [r2, #0]
 800305e:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8003062:	6014      	str	r4, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003064:	4c8d      	ldr	r4, [pc, #564]	; (800329c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x290>)
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003066:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800306a:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800306e:	645f      	str	r7, [r3, #68]	; 0x44
    hi2c->XferCount   = Size;
 8003070:	85de      	strh	r6, [r3, #46]	; 0x2e
    hi2c->pBuffPtr    = pData;
 8003072:	6299      	str	r1, [r3, #40]	; 0x28
    hi2c->XferSize    = hi2c->XferCount;
 8003074:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003076:	631c      	str	r4, [r3, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003078:	6814      	ldr	r4, [r2, #0]
    hi2c->XferSize    = hi2c->XferCount;
 800307a:	b289      	uxth	r1, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800307c:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    hi2c->XferSize    = hi2c->XferCount;
 8003080:	8599      	strh	r1, [r3, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003082:	6014      	str	r4, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003084:	6814      	ldr	r4, [r2, #0]
 8003086:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800308a:	6014      	str	r4, [r2, #0]
 800308c:	e003      	b.n	8003096 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x8a>
 800308e:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003090:	1b64      	subs	r4, r4, r5
 8003092:	2c64      	cmp	r4, #100	; 0x64
 8003094:	d85e      	bhi.n	8003154 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003096:	6954      	ldr	r4, [r2, #20]
 8003098:	07e6      	lsls	r6, r4, #31
 800309a:	d5f8      	bpl.n	800308e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800309c:	24ae      	movs	r4, #174	; 0xae
 800309e:	6114      	str	r4, [r2, #16]
 80030a0:	e008      	b.n	80030b4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xa8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030a2:	6954      	ldr	r4, [r2, #20]
 80030a4:	f414 6480 	ands.w	r4, r4, #1024	; 0x400
 80030a8:	d169      	bne.n	800317e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x172>
 80030aa:	681e      	ldr	r6, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ac:	1b76      	subs	r6, r6, r5
 80030ae:	2e64      	cmp	r6, #100	; 0x64
 80030b0:	f200 8089 	bhi.w	80031c6 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030b4:	6954      	ldr	r4, [r2, #20]
 80030b6:	43e4      	mvns	r4, r4
 80030b8:	f014 0402 	ands.w	r4, r4, #2
 80030bc:	d1f1      	bne.n	80030a2 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x96>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030be:	9405      	str	r4, [sp, #20]
 80030c0:	6954      	ldr	r4, [r2, #20]
 80030c2:	9405      	str	r4, [sp, #20]
 80030c4:	6994      	ldr	r4, [r2, #24]
 80030c6:	9405      	str	r4, [sp, #20]
 80030c8:	9c05      	ldr	r4, [sp, #20]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030ca:	6954      	ldr	r4, [r2, #20]
 80030cc:	f014 0480 	ands.w	r4, r4, #128	; 0x80
 80030d0:	d16a      	bne.n	80031a8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x19c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030d2:	6956      	ldr	r6, [r2, #20]
 80030d4:	f416 6680 	ands.w	r6, r6, #1024	; 0x400
 80030d8:	d124      	bne.n	8003124 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x118>
 80030da:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030dc:	1b64      	subs	r4, r4, r5
 80030de:	2c64      	cmp	r4, #100	; 0x64
 80030e0:	d9f3      	bls.n	80030ca <HAL_I2C_Mem_Read.constprop.0.isra.0+0xbe>
        hi2c->State             = HAL_I2C_STATE_READY;
 80030e2:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030e4:	635e      	str	r6, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 80030e6:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030ea:	f883 6042 	strb.w	r6, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030ee:	6c59      	ldr	r1, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80030f0:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030f4:	f041 0120 	orr.w	r1, r1, #32
 80030f8:	6459      	str	r1, [r3, #68]	; 0x44
 80030fa:	e022      	b.n	8003142 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x136>
      __HAL_I2C_ENABLE(hi2c);
 80030fc:	6814      	ldr	r4, [r2, #0]
 80030fe:	f044 0401 	orr.w	r4, r4, #1
 8003102:	6014      	str	r4, [r2, #0]
 8003104:	e7a4      	b.n	8003050 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x44>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003106:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003108:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003110:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003116:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800311a:	f042 0220 	orr.w	r2, r2, #32
 800311e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003120:	b007      	add	sp, #28
 8003122:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State               = HAL_I2C_STATE_READY;
 8003124:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003126:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 800312a:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800312c:	635c      	str	r4, [r3, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 800312e:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003132:	f883 4042 	strb.w	r4, [r3, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003136:	6c59      	ldr	r1, [r3, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8003138:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800313c:	f041 0104 	orr.w	r1, r1, #4
 8003140:	6459      	str	r1, [r3, #68]	; 0x44
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	2b04      	cmp	r3, #4
 8003146:	f47f af6b 	bne.w	8003020 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314a:	6813      	ldr	r3, [r2, #0]
 800314c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	e765      	b.n	8003020 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003154:	2000      	movs	r0, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003156:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003158:	6358      	str	r0, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 800315a:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800315e:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003162:	6c59      	ldr	r1, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003164:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003168:	f041 0120 	orr.w	r1, r1, #32
 800316c:	6459      	str	r1, [r3, #68]	; 0x44
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	05d5      	lsls	r5, r2, #23
 8003172:	f57f af55 	bpl.w	8003020 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800317a:	645a      	str	r2, [r3, #68]	; 0x44
 800317c:	e750      	b.n	8003020 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800317e:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003180:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003184:	2420      	movs	r4, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003186:	6810      	ldr	r0, [r2, #0]
 8003188:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 800318c:	6010      	str	r0, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800318e:	6155      	str	r5, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003190:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8003192:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003196:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800319a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800319c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031a0:	f042 0204 	orr.w	r2, r2, #4
 80031a4:	645a      	str	r2, [r3, #68]	; 0x44
 80031a6:	e73b      	b.n	8003020 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031a8:	0a04      	lsrs	r4, r0, #8
 80031aa:	6114      	str	r4, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ac:	6954      	ldr	r4, [r2, #20]
 80031ae:	f014 0480 	ands.w	r4, r4, #128	; 0x80
 80031b2:	d115      	bne.n	80031e0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1d4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031b4:	6956      	ldr	r6, [r2, #20]
 80031b6:	f416 6680 	ands.w	r6, r6, #1024	; 0x400
 80031ba:	d1b3      	bne.n	8003124 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x118>
 80031bc:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031be:	1b64      	subs	r4, r4, r5
 80031c0:	2c64      	cmp	r4, #100	; 0x64
 80031c2:	d9f3      	bls.n	80031ac <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1a0>
 80031c4:	e78d      	b.n	80030e2 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xd6>
        hi2c->State               = HAL_I2C_STATE_READY;
 80031c6:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031c8:	635c      	str	r4, [r3, #52]	; 0x34
        hi2c->State               = HAL_I2C_STATE_READY;
 80031ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ce:	f883 4042 	strb.w	r4, [r3, #66]	; 0x42
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80031d4:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d8:	f042 0220 	orr.w	r2, r2, #32
 80031dc:	645a      	str	r2, [r3, #68]	; 0x44
 80031de:	e71f      	b.n	8003020 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031e0:	b2c0      	uxtb	r0, r0
 80031e2:	6110      	str	r0, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031e4:	6950      	ldr	r0, [r2, #20]
 80031e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80031ea:	d124      	bne.n	8003236 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x22a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031ec:	6954      	ldr	r4, [r2, #20]
 80031ee:	f414 6480 	ands.w	r4, r4, #1024	; 0x400
 80031f2:	d110      	bne.n	8003216 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x20a>
 80031f4:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f6:	1b40      	subs	r0, r0, r5
 80031f8:	2864      	cmp	r0, #100	; 0x64
 80031fa:	d9f3      	bls.n	80031e4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1d8>
        hi2c->State             = HAL_I2C_STATE_READY;
 80031fc:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031fe:	635c      	str	r4, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003200:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003204:	f883 4042 	strb.w	r4, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003208:	6c59      	ldr	r1, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800320a:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800320e:	f041 0120 	orr.w	r1, r1, #32
 8003212:	6459      	str	r1, [r3, #68]	; 0x44
 8003214:	e795      	b.n	8003142 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x136>
    hi2c->State               = HAL_I2C_STATE_READY;
 8003216:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003218:	f46f 6480 	mvn.w	r4, #1024	; 0x400
 800321c:	6154      	str	r4, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800321e:	6358      	str	r0, [r3, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 8003220:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003224:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003228:	6c59      	ldr	r1, [r3, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800322a:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800322e:	f041 0104 	orr.w	r1, r1, #4
 8003232:	6459      	str	r1, [r3, #68]	; 0x44
 8003234:	e785      	b.n	8003142 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x136>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003236:	6810      	ldr	r0, [r2, #0]
 8003238:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800323c:	6010      	str	r0, [r2, #0]
 800323e:	e003      	b.n	8003248 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x23c>
 8003240:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003242:	1b40      	subs	r0, r0, r5
 8003244:	2864      	cmp	r0, #100	; 0x64
 8003246:	d885      	bhi.n	8003154 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003248:	6950      	ldr	r0, [r2, #20]
 800324a:	07c4      	lsls	r4, r0, #31
 800324c:	d5f8      	bpl.n	8003240 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x234>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800324e:	20af      	movs	r0, #175	; 0xaf
 8003250:	6110      	str	r0, [r2, #16]
 8003252:	e007      	b.n	8003264 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x258>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003254:	6950      	ldr	r0, [r2, #20]
 8003256:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800325a:	d190      	bne.n	800317e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x172>
 800325c:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800325e:	1b64      	subs	r4, r4, r5
 8003260:	2c64      	cmp	r4, #100	; 0x64
 8003262:	d81d      	bhi.n	80032a0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x294>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003264:	6950      	ldr	r0, [r2, #20]
 8003266:	43c0      	mvns	r0, r0
 8003268:	f010 0002 	ands.w	r0, r0, #2
 800326c:	d1f2      	bne.n	8003254 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x248>
    if (hi2c->XferSize == 0U)
 800326e:	bb29      	cbnz	r1, 80032bc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2b0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003270:	9104      	str	r1, [sp, #16]
 8003272:	6951      	ldr	r1, [r2, #20]
 8003274:	9104      	str	r1, [sp, #16]
 8003276:	6991      	ldr	r1, [r2, #24]
 8003278:	9104      	str	r1, [sp, #16]
 800327a:	9904      	ldr	r1, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327c:	6811      	ldr	r1, [r2, #0]
 800327e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003282:	6011      	str	r1, [r2, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003284:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003286:	2120      	movs	r1, #32
    __HAL_UNLOCK(hi2c);
 8003288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800328c:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    return HAL_OK;
 8003294:	e6c4      	b.n	8003020 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
 8003296:	bf00      	nop
 8003298:	20000208 	.word	0x20000208
 800329c:	ffff0000 	.word	0xffff0000
        hi2c->State             = HAL_I2C_STATE_READY;
 80032a0:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032a2:	6358      	str	r0, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 80032a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032a8:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80032ae:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032b2:	f042 0220 	orr.w	r2, r2, #32
 80032b6:	645a      	str	r2, [r3, #68]	; 0x44
}
 80032b8:	b007      	add	sp, #28
 80032ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (hi2c->XferSize == 1U)
 80032bc:	2901      	cmp	r1, #1
 80032be:	f000 80d8 	beq.w	8003472 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x466>
    else if (hi2c->XferSize == 2U)
 80032c2:	2902      	cmp	r1, #2
 80032c4:	f000 80ec 	beq.w	80034a0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x494>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c8:	6814      	ldr	r4, [r2, #0]
 80032ca:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 80032ce:	6014      	str	r4, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d0:	9001      	str	r0, [sp, #4]
 80032d2:	6950      	ldr	r0, [r2, #20]
 80032d4:	9001      	str	r0, [sp, #4]
 80032d6:	6990      	ldr	r0, [r2, #24]
 80032d8:	9001      	str	r0, [sp, #4]
 80032da:	9801      	ldr	r0, [sp, #4]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80032dc:	4e79      	ldr	r6, [pc, #484]	; (80034c4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4b8>)
 80032de:	4c7a      	ldr	r4, [pc, #488]	; (80034c8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4bc>)
      if (hi2c->XferSize <= 3U)
 80032e0:	2903      	cmp	r1, #3
 80032e2:	d83c      	bhi.n	800335e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x352>
        if (hi2c->XferSize == 1U)
 80032e4:	2901      	cmp	r1, #1
 80032e6:	f000 809a 	beq.w	800341e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x412>
        else if (hi2c->XferSize == 2U)
 80032ea:	2902      	cmp	r1, #2
 80032ec:	d005      	beq.n	80032fa <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2ee>
 80032ee:	e053      	b.n	8003398 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x38c>
 80032f0:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f2:	1b49      	subs	r1, r1, r5
 80032f4:	2964      	cmp	r1, #100	; 0x64
 80032f6:	f200 8097 	bhi.w	8003428 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x41c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032fa:	6951      	ldr	r1, [r2, #20]
 80032fc:	0748      	lsls	r0, r1, #29
 80032fe:	d5f7      	bpl.n	80032f0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2e4>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003300:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003302:	685a      	ldr	r2, [r3, #4]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003304:	6a98      	ldr	r0, [r3, #40]	; 0x28
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003306:	6811      	ldr	r1, [r2, #0]
 8003308:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800330c:	6011      	str	r1, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330e:	6912      	ldr	r2, [r2, #16]
 8003310:	7002      	strb	r2, [r0, #0]
          hi2c->pBuffPtr++;
 8003312:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003314:	3201      	adds	r2, #1
 8003316:	629a      	str	r2, [r3, #40]	; 0x28
          hi2c->XferSize--;
 8003318:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800331a:	3a01      	subs	r2, #1
 800331c:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 800331e:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8003320:	3a01      	subs	r2, #1
 8003322:	b292      	uxth	r2, r2
 8003324:	85da      	strh	r2, [r3, #46]	; 0x2e
  __ASM volatile ("cpsie i" : : : "memory");
 8003326:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	6911      	ldr	r1, [r2, #16]
 800332c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800332e:	7011      	strb	r1, [r2, #0]
          hi2c->pBuffPtr++;
 8003330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
          hi2c->XferSize--;
 8003332:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 8003334:	3201      	adds	r2, #1
 8003336:	629a      	str	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003338:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
          hi2c->XferSize--;
 800333a:	3901      	subs	r1, #1
          hi2c->XferCount--;
 800333c:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 800333e:	b289      	uxth	r1, r1
          hi2c->XferCount--;
 8003340:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 8003342:	8599      	strh	r1, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 8003344:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (hi2c->XferSize > 0U)
 8003346:	2900      	cmp	r1, #0
 8003348:	d09c      	beq.n	8003284 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x278>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	e7c8      	b.n	80032e0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2d4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800334e:	6950      	ldr	r0, [r2, #20]
 8003350:	f010 0010 	ands.w	r0, r0, #16
 8003354:	d177      	bne.n	8003446 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x43a>
 8003356:	6819      	ldr	r1, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003358:	1b49      	subs	r1, r1, r5
 800335a:	2964      	cmp	r1, #100	; 0x64
 800335c:	d8a0      	bhi.n	80032a0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x294>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800335e:	6951      	ldr	r1, [r2, #20]
 8003360:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 8003364:	d0f3      	beq.n	800334e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x342>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003366:	6911      	ldr	r1, [r2, #16]
 8003368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800336a:	7011      	strb	r1, [r2, #0]
        hi2c->XferCount--;
 800336c:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
        hi2c->pBuffPtr++;
 800336e:	6a98      	ldr	r0, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003370:	3a01      	subs	r2, #1
 8003372:	b292      	uxth	r2, r2
 8003374:	85da      	strh	r2, [r3, #46]	; 0x2e
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003376:	685a      	ldr	r2, [r3, #4]
        hi2c->XferSize--;
 8003378:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
        hi2c->pBuffPtr++;
 800337a:	1c47      	adds	r7, r0, #1
 800337c:	629f      	str	r7, [r3, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800337e:	6957      	ldr	r7, [r2, #20]
        hi2c->XferSize--;
 8003380:	3901      	subs	r1, #1
 8003382:	b289      	uxth	r1, r1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003384:	077f      	lsls	r7, r7, #29
        hi2c->XferSize--;
 8003386:	8599      	strh	r1, [r3, #44]	; 0x2c
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003388:	d5dd      	bpl.n	8003346 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x33a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338a:	6912      	ldr	r2, [r2, #16]
 800338c:	7042      	strb	r2, [r0, #1]
 800338e:	e7cf      	b.n	8003330 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x324>
 8003390:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003392:	1b49      	subs	r1, r1, r5
 8003394:	2964      	cmp	r1, #100	; 0x64
 8003396:	d847      	bhi.n	8003428 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x41c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003398:	6951      	ldr	r1, [r2, #20]
 800339a:	0749      	lsls	r1, r1, #29
 800339c:	d5f8      	bpl.n	8003390 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x384>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339e:	6811      	ldr	r1, [r2, #0]
 80033a0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80033a4:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033a6:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	6910      	ldr	r0, [r2, #16]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033ac:	6832      	ldr	r2, [r6, #0]
 80033ae:	08d2      	lsrs	r2, r2, #3
 80033b0:	fba4 1202 	umull	r1, r2, r4, r2
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b4:	6a99      	ldr	r1, [r3, #40]	; 0x28
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033b6:	0a12      	lsrs	r2, r2, #8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b8:	7008      	strb	r0, [r1, #0]
          hi2c->XferCount--;
 80033ba:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033bc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
          hi2c->XferCount--;
 80033c0:	3901      	subs	r1, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033c2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
          hi2c->XferCount--;
 80033c6:	b289      	uxth	r1, r1
 80033c8:	85d9      	strh	r1, [r3, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033ca:	9200      	str	r2, [sp, #0]
          hi2c->XferSize--;
 80033cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 80033ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
          hi2c->XferSize--;
 80033d0:	3a01      	subs	r2, #1
 80033d2:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 80033d4:	1c42      	adds	r2, r0, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80033d6:	6859      	ldr	r1, [r3, #4]
          hi2c->pBuffPtr++;
 80033d8:	629a      	str	r2, [r3, #40]	; 0x28
 80033da:	e002      	b.n	80033e2 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x3d6>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80033dc:	694a      	ldr	r2, [r1, #20]
 80033de:	0752      	lsls	r2, r2, #29
 80033e0:	d440      	bmi.n	8003464 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x458>
            count--;
 80033e2:	9a00      	ldr	r2, [sp, #0]
 80033e4:	3a01      	subs	r2, #1
 80033e6:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 80033e8:	9a00      	ldr	r2, [sp, #0]
 80033ea:	2a00      	cmp	r2, #0
 80033ec:	d1f6      	bne.n	80033dc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x3d0>
              hi2c->State               = HAL_I2C_STATE_READY;
 80033ee:	2120      	movs	r1, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80033f0:	635a      	str	r2, [r3, #52]	; 0x34
              hi2c->State               = HAL_I2C_STATE_READY;
 80033f2:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033fa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80033fc:	f041 0120 	orr.w	r1, r1, #32
 8003400:	6459      	str	r1, [r3, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8003402:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8003404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003408:	b007      	add	sp, #28
 800340a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800340c:	6950      	ldr	r0, [r2, #20]
 800340e:	f010 0010 	ands.w	r0, r0, #16
 8003412:	d118      	bne.n	8003446 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x43a>
 8003414:	6819      	ldr	r1, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003416:	1b49      	subs	r1, r1, r5
 8003418:	2964      	cmp	r1, #100	; 0x64
 800341a:	f63f af41 	bhi.w	80032a0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x294>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800341e:	6951      	ldr	r1, [r2, #20]
 8003420:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 8003424:	d0f2      	beq.n	800340c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x400>
 8003426:	e780      	b.n	800332a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x31e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003428:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800342a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800342c:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 800342e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003432:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003436:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003438:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800343c:	f042 0220 	orr.w	r2, r2, #32
 8003440:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003442:	b007      	add	sp, #28
 8003444:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003446:	f06f 0410 	mvn.w	r4, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 800344a:	2020      	movs	r0, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800344c:	6154      	str	r4, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800344e:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8003450:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003454:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800345a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800345e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003460:	b007      	add	sp, #28
 8003462:	bdf0      	pop	{r4, r5, r6, r7, pc}
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003464:	680a      	ldr	r2, [r1, #0]
 8003466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346a:	600a      	str	r2, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800346c:	690a      	ldr	r2, [r1, #16]
 800346e:	7042      	strb	r2, [r0, #1]
 8003470:	e74f      	b.n	8003312 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x306>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003472:	6811      	ldr	r1, [r2, #0]
 8003474:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003478:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800347a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	9003      	str	r0, [sp, #12]
 8003480:	6951      	ldr	r1, [r2, #20]
 8003482:	9103      	str	r1, [sp, #12]
 8003484:	6991      	ldr	r1, [r2, #24]
 8003486:	9103      	str	r1, [sp, #12]
 8003488:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348a:	6811      	ldr	r1, [r2, #0]
 800348c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003490:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003492:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 8003494:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8003496:	2900      	cmp	r1, #0
 8003498:	f43f aef4 	beq.w	8003284 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x278>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	e71d      	b.n	80032dc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2d0>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034a0:	6811      	ldr	r1, [r2, #0]
 80034a2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80034a6:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034a8:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	9002      	str	r0, [sp, #8]
 80034ae:	6951      	ldr	r1, [r2, #20]
 80034b0:	9102      	str	r1, [sp, #8]
 80034b2:	6991      	ldr	r1, [r2, #24]
 80034b4:	9102      	str	r1, [sp, #8]
 80034b6:	9902      	ldr	r1, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b8:	6811      	ldr	r1, [r2, #0]
 80034ba:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80034be:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034c0:	b662      	cpsie	i
}
 80034c2:	e7e7      	b.n	8003494 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x488>
 80034c4:	20000000 	.word	0x20000000
 80034c8:	14f8b589 	.word	0x14f8b589

080034cc <AT24XX_Update>:
    } else
        return false;
}

uint8_t AT24XX_Read(uint16_t address) {
    uint16_t dt[1] = {0};
 80034cc:	2300      	movs	r3, #0
void AT24XX_Write(uint16_t address, uint8_t val) {
    uint8_t save[] = {val};
    AT24XX_Save(address, save, 1);
}

void AT24XX_Update(uint16_t address, uint8_t val) {
 80034ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034d0:	460d      	mov	r5, r1
 80034d2:	b083      	sub	sp, #12
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80034d4:	a901      	add	r1, sp, #4
    uint16_t dt[1] = {0};
 80034d6:	f8ad 3004 	strh.w	r3, [sp, #4]
void AT24XX_Update(uint16_t address, uint8_t val) {
 80034da:	4606      	mov	r6, r0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80034dc:	f7ff fd96 	bl	800300c <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 80034e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80034e4:	429d      	cmp	r5, r3
 80034e6:	d101      	bne.n	80034ec <AT24XX_Update+0x20>
}
 80034e8:	b003      	add	sp, #12
 80034ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ec:	4c61      	ldr	r4, [pc, #388]	; (8003674 <AT24XX_Update+0x1a8>)
    uint8_t save[] = {val};
 80034ee:	f88d 5004 	strb.w	r5, [sp, #4]
 80034f2:	6825      	ldr	r5, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	d1f5      	bne.n	80034e8 <AT24XX_Update+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034fc:	6861      	ldr	r1, [r4, #4]
 80034fe:	e004      	b.n	800350a <AT24XX_Update+0x3e>
 8003500:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003502:	1b52      	subs	r2, r2, r5
 8003504:	2a19      	cmp	r2, #25
 8003506:	f200 80a7 	bhi.w	8003658 <AT24XX_Update+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800350a:	698b      	ldr	r3, [r1, #24]
 800350c:	43db      	mvns	r3, r3
 800350e:	f013 0302 	ands.w	r3, r3, #2
 8003512:	d0f5      	beq.n	8003500 <AT24XX_Update+0x34>
    __HAL_LOCK(hi2c);
 8003514:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003518:	2b01      	cmp	r3, #1
 800351a:	d0e5      	beq.n	80034e8 <AT24XX_Update+0x1c>
 800351c:	2301      	movs	r3, #1
 800351e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003522:	680b      	ldr	r3, [r1, #0]
 8003524:	07da      	lsls	r2, r3, #31
 8003526:	d403      	bmi.n	8003530 <AT24XX_Update+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8003528:	680b      	ldr	r3, [r1, #0]
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	600b      	str	r3, [r1, #0]
    hi2c->XferCount   = Size;
 8003530:	2201      	movs	r2, #1
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003532:	4630      	mov	r0, r6
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003534:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003538:	2740      	movs	r7, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800353a:	2600      	movs	r6, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800353c:	680b      	ldr	r3, [r1, #0]
 800353e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003542:	600b      	str	r3, [r1, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003544:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
    hi2c->pBuffPtr    = pData;
 8003548:	ab01      	add	r3, sp, #4
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800354a:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800354e:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8003550:	85e2      	strh	r2, [r4, #46]	; 0x2e
    hi2c->XferSize    = hi2c->XferCount;
 8003552:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    hi2c->pBuffPtr    = pData;
 8003554:	62a3      	str	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003556:	4b48      	ldr	r3, [pc, #288]	; (8003678 <AT24XX_Update+0x1ac>)
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003558:	4629      	mov	r1, r5
    hi2c->XferSize    = hi2c->XferCount;
 800355a:	85a2      	strh	r2, [r4, #44]	; 0x2c
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800355c:	6323      	str	r3, [r4, #48]	; 0x30
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800355e:	f7ff fc79 	bl	8002e54 <I2C_RequestMemoryWrite.constprop.0>
 8003562:	2800      	cmp	r0, #0
 8003564:	d1c0      	bne.n	80034e8 <AT24XX_Update+0x1c>
    while (hi2c->XferSize > 0U)
 8003566:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8003568:	2800      	cmp	r0, #0
 800356a:	f000 8081 	beq.w	8003670 <AT24XX_Update+0x1a4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800356e:	6861      	ldr	r1, [r4, #4]
 8003570:	694b      	ldr	r3, [r1, #20]
 8003572:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003576:	d114      	bne.n	80035a2 <AT24XX_Update+0xd6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003578:	694a      	ldr	r2, [r1, #20]
 800357a:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 800357e:	d130      	bne.n	80035e2 <AT24XX_Update+0x116>
 8003580:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003582:	1b5b      	subs	r3, r3, r5
 8003584:	2b64      	cmp	r3, #100	; 0x64
 8003586:	d9f3      	bls.n	8003570 <AT24XX_Update+0xa4>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003588:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800358a:	6362      	str	r2, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 800358c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003590:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003594:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003596:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800359a:	f043 0320 	orr.w	r3, r3, #32
 800359e:	6463      	str	r3, [r4, #68]	; 0x44
 80035a0:	e02e      	b.n	8003600 <AT24XX_Update+0x134>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
      hi2c->XferSize--;
 80035a4:	1e42      	subs	r2, r0, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035a6:	4633      	mov	r3, r6
 80035a8:	f813 7b01 	ldrb.w	r7, [r3], #1
      hi2c->XferSize--;
 80035ac:	b292      	uxth	r2, r2
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ae:	610f      	str	r7, [r1, #16]
      hi2c->pBuffPtr++;
 80035b0:	62a3      	str	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80035b2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
      hi2c->XferSize--;
 80035b4:	85a2      	strh	r2, [r4, #44]	; 0x2c
      hi2c->XferCount--;
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035bc:	694b      	ldr	r3, [r1, #20]
 80035be:	075b      	lsls	r3, r3, #29
 80035c0:	d427      	bmi.n	8003612 <AT24XX_Update+0x146>
      hi2c->XferSize--;
 80035c2:	4610      	mov	r0, r2
    while (hi2c->XferSize > 0U)
 80035c4:	2800      	cmp	r0, #0
 80035c6:	d1d3      	bne.n	8003570 <AT24XX_Update+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035c8:	694b      	ldr	r3, [r1, #20]
 80035ca:	f013 0304 	ands.w	r3, r3, #4
 80035ce:	d130      	bne.n	8003632 <AT24XX_Update+0x166>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035d0:	694a      	ldr	r2, [r1, #20]
 80035d2:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 80035d6:	d104      	bne.n	80035e2 <AT24XX_Update+0x116>
 80035d8:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035da:	1b5b      	subs	r3, r3, r5
 80035dc:	2b64      	cmp	r3, #100	; 0x64
 80035de:	d9f3      	bls.n	80035c8 <AT24XX_Update+0xfc>
 80035e0:	e7d2      	b.n	8003588 <AT24XX_Update+0xbc>
    hi2c->State               = HAL_I2C_STATE_READY;
 80035e2:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035e4:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 80035e8:	6148      	str	r0, [r1, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80035ea:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 80035ec:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80035f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035fa:	f042 0204 	orr.w	r2, r2, #4
 80035fe:	6462      	str	r2, [r4, #68]	; 0x44
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003600:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003602:	2b04      	cmp	r3, #4
 8003604:	f47f af70 	bne.w	80034e8 <AT24XX_Update+0x1c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003608:	680b      	ldr	r3, [r1, #0]
 800360a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800360e:	600b      	str	r3, [r1, #0]
 8003610:	e76a      	b.n	80034e8 <AT24XX_Update+0x1c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003612:	2a00      	cmp	r2, #0
 8003614:	d0d8      	beq.n	80035c8 <AT24XX_Update+0xfc>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003616:	7873      	ldrb	r3, [r6, #1]
        hi2c->XferSize--;
 8003618:	3802      	subs	r0, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800361a:	610b      	str	r3, [r1, #16]
        hi2c->XferCount--;
 800361c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        hi2c->XferSize--;
 800361e:	b280      	uxth	r0, r0
        hi2c->XferCount--;
 8003620:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 8003622:	3602      	adds	r6, #2
        hi2c->XferCount--;
 8003624:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8003626:	62a6      	str	r6, [r4, #40]	; 0x28
        hi2c->XferSize--;
 8003628:	85a0      	strh	r0, [r4, #44]	; 0x2c
        hi2c->XferCount--;
 800362a:	85e3      	strh	r3, [r4, #46]	; 0x2e
    while (hi2c->XferSize > 0U)
 800362c:	2800      	cmp	r0, #0
 800362e:	d19f      	bne.n	8003570 <AT24XX_Update+0xa4>
 8003630:	e7ca      	b.n	80035c8 <AT24XX_Update+0xfc>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003632:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003634:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003636:	680b      	ldr	r3, [r1, #0]
 8003638:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800363c:	600b      	str	r3, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800363e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003642:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003646:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 800364a:	6822      	ldr	r2, [r4, #0]
 800364c:	6823      	ldr	r3, [r4, #0]
  while ((HAL_GetTick() - tickstart) < wait)
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	2b05      	cmp	r3, #5
 8003652:	d9fb      	bls.n	800364c <AT24XX_Update+0x180>
}
 8003654:	b003      	add	sp, #12
 8003656:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 8003658:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800365a:	6363      	str	r3, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 800365c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003660:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003664:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003668:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800366a:	4313      	orrs	r3, r2
 800366c:	6463      	str	r3, [r4, #68]	; 0x44
 800366e:	e73b      	b.n	80034e8 <AT24XX_Update+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003670:	6861      	ldr	r1, [r4, #4]
 8003672:	e7a9      	b.n	80035c8 <AT24XX_Update+0xfc>
 8003674:	20000208 	.word	0x20000208
 8003678:	ffff0000 	.word	0xffff0000

0800367c <HAL_I2C_Master_Receive.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 800367c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800367e:	2400      	movs	r4, #0
  return uwTick;
 8003680:	4b8b      	ldr	r3, [pc, #556]	; (80038b0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x234>)
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8003682:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 8003684:	9400      	str	r4, [sp, #0]
 8003686:	681e      	ldr	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003688:	f893 4041 	ldrb.w	r4, [r3, #65]	; 0x41
 800368c:	2c20      	cmp	r4, #32
 800368e:	d001      	beq.n	8003694 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x18>
}
 8003690:	b007      	add	sp, #28
 8003692:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003694:	685c      	ldr	r4, [r3, #4]
 8003696:	e004      	b.n	80036a2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x26>
 8003698:	681d      	ldr	r5, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369a:	1bad      	subs	r5, r5, r6
 800369c:	2d19      	cmp	r5, #25
 800369e:	f200 80b3 	bhi.w	8003808 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036a2:	69a5      	ldr	r5, [r4, #24]
 80036a4:	ea6f 0c05 	mvn.w	ip, r5
 80036a8:	f01c 0c02 	ands.w	ip, ip, #2
 80036ac:	d0f4      	beq.n	8003698 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1c>
    __HAL_LOCK(hi2c);
 80036ae:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
 80036b2:	2d01      	cmp	r5, #1
 80036b4:	d0ec      	beq.n	8003690 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
 80036b6:	2501      	movs	r5, #1
 80036b8:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036bc:	6825      	ldr	r5, [r4, #0]
 80036be:	07ed      	lsls	r5, r5, #31
 80036c0:	d55d      	bpl.n	800377e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x102>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80036c2:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036c6:	f04f 0c10 	mov.w	ip, #16
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036ca:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036cc:	6825      	ldr	r5, [r4, #0]
 80036ce:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 80036d2:	6025      	str	r5, [r4, #0]
    hi2c->pBuffPtr    = pData;
 80036d4:	6299      	str	r1, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036d6:	4977      	ldr	r1, [pc, #476]	; (80038b4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x238>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80036d8:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036dc:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036e0:	645f      	str	r7, [r3, #68]	; 0x44
    hi2c->XferCount   = Size;
 80036e2:	85da      	strh	r2, [r3, #46]	; 0x2e
    hi2c->XferSize    = hi2c->XferCount;
 80036e4:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036e6:	6319      	str	r1, [r3, #48]	; 0x30
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036e8:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ea:	6821      	ldr	r1, [r4, #0]
    hi2c->XferSize    = hi2c->XferCount;
 80036ec:	b292      	uxth	r2, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ee:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036f2:	2d08      	cmp	r5, #8
    hi2c->XferSize    = hi2c->XferCount;
 80036f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f6:	6021      	str	r1, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036f8:	d007      	beq.n	800370a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8e>
 80036fa:	2d01      	cmp	r5, #1
 80036fc:	d005      	beq.n	800370a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8e>
 80036fe:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8003702:	d002      	beq.n	800370a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003704:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003706:	2911      	cmp	r1, #17
 8003708:	d109      	bne.n	800371e <HAL_I2C_Master_Receive.constprop.0.isra.0+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800370a:	6821      	ldr	r1, [r4, #0]
 800370c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003710:	6021      	str	r1, [r4, #0]
 8003712:	e004      	b.n	800371e <HAL_I2C_Master_Receive.constprop.0.isra.0+0xa2>
 8003714:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003716:	1b89      	subs	r1, r1, r6
 8003718:	2964      	cmp	r1, #100	; 0x64
 800371a:	f200 8084 	bhi.w	8003826 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1aa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800371e:	6961      	ldr	r1, [r4, #20]
 8003720:	07cf      	lsls	r7, r1, #31
 8003722:	d5f7      	bpl.n	8003714 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x98>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003724:	6959      	ldr	r1, [r3, #20]
 8003726:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800372a:	d12d      	bne.n	8003788 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x10c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800372c:	f040 0001 	orr.w	r0, r0, #1
 8003730:	b2c0      	uxtb	r0, r0
 8003732:	6120      	str	r0, [r4, #16]
 8003734:	e008      	b.n	8003748 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xcc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003736:	6961      	ldr	r1, [r4, #20]
 8003738:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 800373c:	f040 8088 	bne.w	8003850 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d4>
 8003740:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003742:	1b80      	subs	r0, r0, r6
 8003744:	2864      	cmp	r0, #100	; 0x64
 8003746:	d851      	bhi.n	80037ec <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003748:	6961      	ldr	r1, [r4, #20]
 800374a:	43c9      	mvns	r1, r1
 800374c:	f011 0102 	ands.w	r1, r1, #2
 8003750:	d1f1      	bne.n	8003736 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xba>
    if (hi2c->XferSize == 0U)
 8003752:	2a00      	cmp	r2, #0
 8003754:	f040 8092 	bne.w	800387c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x200>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003758:	9204      	str	r2, [sp, #16]
 800375a:	6962      	ldr	r2, [r4, #20]
 800375c:	9204      	str	r2, [sp, #16]
 800375e:	69a2      	ldr	r2, [r4, #24]
 8003760:	9204      	str	r2, [sp, #16]
 8003762:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003764:	6822      	ldr	r2, [r4, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376a:	6022      	str	r2, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800376c:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800376e:	2120      	movs	r1, #32
    __HAL_UNLOCK(hi2c);
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003774:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    return HAL_OK;
 800377c:	e788      	b.n	8003690 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
      __HAL_I2C_ENABLE(hi2c);
 800377e:	6825      	ldr	r5, [r4, #0]
 8003780:	f045 0501 	orr.w	r5, r5, #1
 8003784:	6025      	str	r5, [r4, #0]
 8003786:	e79c      	b.n	80036c2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x46>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003788:	21f0      	movs	r1, #240	; 0xf0
 800378a:	6121      	str	r1, [r4, #16]
 800378c:	e007      	b.n	800379e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x122>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800378e:	6961      	ldr	r1, [r4, #20]
 8003790:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003794:	d15c      	bne.n	8003850 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d4>
 8003796:	681d      	ldr	r5, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003798:	1bad      	subs	r5, r5, r6
 800379a:	2d64      	cmp	r5, #100	; 0x64
 800379c:	d826      	bhi.n	80037ec <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800379e:	6961      	ldr	r1, [r4, #20]
 80037a0:	070d      	lsls	r5, r1, #28
 80037a2:	d5f4      	bpl.n	800378e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x112>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037a4:	6120      	str	r0, [r4, #16]
 80037a6:	e007      	b.n	80037b8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x13c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037a8:	6961      	ldr	r1, [r4, #20]
 80037aa:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 80037ae:	d14f      	bne.n	8003850 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d4>
 80037b0:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b2:	1b80      	subs	r0, r0, r6
 80037b4:	2864      	cmp	r0, #100	; 0x64
 80037b6:	d819      	bhi.n	80037ec <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037b8:	6961      	ldr	r1, [r4, #20]
 80037ba:	43c9      	mvns	r1, r1
 80037bc:	f011 0102 	ands.w	r1, r1, #2
 80037c0:	d1f2      	bne.n	80037a8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x12c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c2:	9105      	str	r1, [sp, #20]
 80037c4:	6961      	ldr	r1, [r4, #20]
 80037c6:	9105      	str	r1, [sp, #20]
 80037c8:	69a1      	ldr	r1, [r4, #24]
 80037ca:	9105      	str	r1, [sp, #20]
 80037cc:	9905      	ldr	r1, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ce:	6821      	ldr	r1, [r4, #0]
 80037d0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80037d4:	6021      	str	r1, [r4, #0]
 80037d6:	e003      	b.n	80037e0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x164>
 80037d8:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037da:	1b89      	subs	r1, r1, r6
 80037dc:	2964      	cmp	r1, #100	; 0x64
 80037de:	d822      	bhi.n	8003826 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1aa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e0:	6961      	ldr	r1, [r4, #20]
 80037e2:	07c9      	lsls	r1, r1, #31
 80037e4:	d5f8      	bpl.n	80037d8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x15c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80037e6:	21f1      	movs	r1, #241	; 0xf1
 80037e8:	6121      	str	r1, [r4, #16]
 80037ea:	e7ad      	b.n	8003748 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xcc>
        hi2c->State             = HAL_I2C_STATE_READY;
 80037ec:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037ee:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037f4:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80037fa:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037fe:	f042 0220 	orr.w	r2, r2, #32
 8003802:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003804:	b007      	add	sp, #28
 8003806:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 8003808:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800380a:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 800380e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003812:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003816:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003818:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800381c:	f042 0220 	orr.w	r2, r2, #32
 8003820:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003822:	b007      	add	sp, #28
 8003824:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003826:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003828:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800382a:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003830:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003836:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800383a:	f042 0220 	orr.w	r2, r2, #32
 800383e:	645a      	str	r2, [r3, #68]	; 0x44
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003840:	6822      	ldr	r2, [r4, #0]
 8003842:	05d0      	lsls	r0, r2, #23
 8003844:	f57f af24 	bpl.w	8003690 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800384c:	645a      	str	r2, [r3, #68]	; 0x44
 800384e:	e71f      	b.n	8003690 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003850:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003852:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003856:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003858:	6822      	ldr	r2, [r4, #0]
 800385a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800385e:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003860:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003862:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8003864:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003868:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800386c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800386e:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003872:	f042 0204 	orr.w	r2, r2, #4
 8003876:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003878:	b007      	add	sp, #28
 800387a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (hi2c->XferSize == 1U)
 800387c:	2a01      	cmp	r2, #1
 800387e:	f000 80fc 	beq.w	8003a7a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3fe>
    else if (hi2c->XferSize == 2U)
 8003882:	2a02      	cmp	r2, #2
 8003884:	f000 80be 	beq.w	8003a04 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x388>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003888:	6820      	ldr	r0, [r4, #0]
 800388a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 800388e:	6020      	str	r0, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003890:	9101      	str	r1, [sp, #4]
 8003892:	6961      	ldr	r1, [r4, #20]
 8003894:	9101      	str	r1, [sp, #4]
 8003896:	69a1      	ldr	r1, [r4, #24]
 8003898:	9101      	str	r1, [sp, #4]
 800389a:	9901      	ldr	r1, [sp, #4]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800389c:	4d06      	ldr	r5, [pc, #24]	; (80038b8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x23c>)
 800389e:	4807      	ldr	r0, [pc, #28]	; (80038bc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x240>)
      if (hi2c->XferSize <= 3U)
 80038a0:	2a03      	cmp	r2, #3
 80038a2:	d847      	bhi.n	8003934 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2b8>
        if (hi2c->XferSize == 1U)
 80038a4:	2a01      	cmp	r2, #1
 80038a6:	f000 80a5 	beq.w	80039f4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x378>
        else if (hi2c->XferSize == 2U)
 80038aa:	2a02      	cmp	r2, #2
 80038ac:	d00d      	beq.n	80038ca <HAL_I2C_Master_Receive.constprop.0.isra.0+0x24e>
 80038ae:	e05e      	b.n	800396e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2f2>
 80038b0:	20000208 	.word	0x20000208
 80038b4:	ffff0000 	.word	0xffff0000
 80038b8:	20000000 	.word	0x20000000
 80038bc:	14f8b589 	.word	0x14f8b589
 80038c0:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c2:	1b92      	subs	r2, r2, r6
 80038c4:	2a64      	cmp	r2, #100	; 0x64
 80038c6:	f200 80b4 	bhi.w	8003a32 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038ca:	6962      	ldr	r2, [r4, #20]
 80038cc:	0757      	lsls	r7, r2, #29
 80038ce:	d5f7      	bpl.n	80038c0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x244>
  __ASM volatile ("cpsid i" : : : "memory");
 80038d0:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d2:	685a      	ldr	r2, [r3, #4]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d6:	6811      	ldr	r1, [r2, #0]
 80038d8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80038dc:	6011      	str	r1, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038de:	6912      	ldr	r2, [r2, #16]
 80038e0:	7022      	strb	r2, [r4, #0]
          hi2c->pBuffPtr++;
 80038e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038e4:	3201      	adds	r2, #1
 80038e6:	629a      	str	r2, [r3, #40]	; 0x28
          hi2c->XferSize--;
 80038e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038ea:	3a01      	subs	r2, #1
 80038ec:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 80038ee:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80038f0:	3a01      	subs	r2, #1
 80038f2:	b292      	uxth	r2, r2
 80038f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  __ASM volatile ("cpsie i" : : : "memory");
 80038f6:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	6911      	ldr	r1, [r2, #16]
 80038fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038fe:	7011      	strb	r1, [r2, #0]
          hi2c->pBuffPtr++;
 8003900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003902:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
          hi2c->pBuffPtr++;
 8003904:	3201      	adds	r2, #1
 8003906:	629a      	str	r2, [r3, #40]	; 0x28
          hi2c->XferSize--;
 8003908:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 800390a:	3901      	subs	r1, #1
          hi2c->XferSize--;
 800390c:	3a01      	subs	r2, #1
 800390e:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8003910:	b289      	uxth	r1, r1
          hi2c->XferSize--;
 8003912:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 8003914:	85d9      	strh	r1, [r3, #46]	; 0x2e
    while (hi2c->XferSize > 0U)
 8003916:	2a00      	cmp	r2, #0
 8003918:	f43f af28 	beq.w	800376c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800391c:	685c      	ldr	r4, [r3, #4]
 800391e:	e7bf      	b.n	80038a0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x224>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003920:	6961      	ldr	r1, [r4, #20]
 8003922:	f011 0110 	ands.w	r1, r1, #16
 8003926:	f040 8093 	bne.w	8003a50 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3d4>
 800392a:	681a      	ldr	r2, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800392c:	1b92      	subs	r2, r2, r6
 800392e:	2a64      	cmp	r2, #100	; 0x64
 8003930:	f63f af5c 	bhi.w	80037ec <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003934:	6962      	ldr	r2, [r4, #20]
 8003936:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800393a:	d0f1      	beq.n	8003920 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2a4>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800393c:	6921      	ldr	r1, [r4, #16]
 800393e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003940:	7011      	strb	r1, [r2, #0]
        hi2c->XferCount--;
 8003942:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
        hi2c->pBuffPtr++;
 8003944:	6a99      	ldr	r1, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003946:	3a01      	subs	r2, #1
 8003948:	b292      	uxth	r2, r2
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800394a:	685c      	ldr	r4, [r3, #4]
        hi2c->XferCount--;
 800394c:	85da      	strh	r2, [r3, #46]	; 0x2e
        hi2c->pBuffPtr++;
 800394e:	1c4f      	adds	r7, r1, #1
        hi2c->XferSize--;
 8003950:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
        hi2c->pBuffPtr++;
 8003952:	629f      	str	r7, [r3, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003954:	6967      	ldr	r7, [r4, #20]
        hi2c->XferSize--;
 8003956:	3a01      	subs	r2, #1
 8003958:	b292      	uxth	r2, r2
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800395a:	077f      	lsls	r7, r7, #29
        hi2c->XferSize--;
 800395c:	859a      	strh	r2, [r3, #44]	; 0x2c
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800395e:	d5da      	bpl.n	8003916 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x29a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003960:	6922      	ldr	r2, [r4, #16]
 8003962:	704a      	strb	r2, [r1, #1]
 8003964:	e7cc      	b.n	8003900 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x284>
 8003966:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003968:	1b92      	subs	r2, r2, r6
 800396a:	2a64      	cmp	r2, #100	; 0x64
 800396c:	d861      	bhi.n	8003a32 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800396e:	6962      	ldr	r2, [r4, #20]
 8003970:	0751      	lsls	r1, r2, #29
 8003972:	d5f8      	bpl.n	8003966 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2ea>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003974:	6822      	ldr	r2, [r4, #0]
 8003976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397a:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800397c:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	6914      	ldr	r4, [r2, #16]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003982:	682a      	ldr	r2, [r5, #0]
 8003984:	08d2      	lsrs	r2, r2, #3
 8003986:	fba0 1202 	umull	r1, r2, r0, r2
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398a:	6a99      	ldr	r1, [r3, #40]	; 0x28
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800398c:	0a12      	lsrs	r2, r2, #8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398e:	700c      	strb	r4, [r1, #0]
          hi2c->XferCount--;
 8003990:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003992:	eb02 0282 	add.w	r2, r2, r2, lsl #2
          hi2c->XferCount--;
 8003996:	3901      	subs	r1, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003998:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
          hi2c->XferCount--;
 800399c:	b289      	uxth	r1, r1
 800399e:	85d9      	strh	r1, [r3, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039a0:	9200      	str	r2, [sp, #0]
          hi2c->XferSize--;
 80039a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 80039a4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
          hi2c->XferSize--;
 80039a6:	3a01      	subs	r2, #1
 80039a8:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 80039aa:	1c62      	adds	r2, r4, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80039ac:	6859      	ldr	r1, [r3, #4]
          hi2c->pBuffPtr++;
 80039ae:	629a      	str	r2, [r3, #40]	; 0x28
 80039b0:	e002      	b.n	80039b8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x33c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80039b2:	694a      	ldr	r2, [r1, #20]
 80039b4:	0752      	lsls	r2, r2, #29
 80039b6:	d459      	bmi.n	8003a6c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3f0>
            count--;
 80039b8:	9a00      	ldr	r2, [sp, #0]
 80039ba:	3a01      	subs	r2, #1
 80039bc:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 80039be:	9a00      	ldr	r2, [sp, #0]
 80039c0:	2a00      	cmp	r2, #0
 80039c2:	d1f6      	bne.n	80039b2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x336>
              hi2c->State               = HAL_I2C_STATE_READY;
 80039c4:	2120      	movs	r1, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80039c6:	635a      	str	r2, [r3, #52]	; 0x34
              hi2c->State               = HAL_I2C_STATE_READY;
 80039c8:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80039d2:	f041 0120 	orr.w	r1, r1, #32
 80039d6:	6459      	str	r1, [r3, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 80039d8:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80039da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80039de:	b007      	add	sp, #28
 80039e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039e2:	6961      	ldr	r1, [r4, #20]
 80039e4:	f011 0110 	ands.w	r1, r1, #16
 80039e8:	d132      	bne.n	8003a50 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3d4>
 80039ea:	681a      	ldr	r2, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ec:	1b92      	subs	r2, r2, r6
 80039ee:	2a64      	cmp	r2, #100	; 0x64
 80039f0:	f63f aefc 	bhi.w	80037ec <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039f4:	6962      	ldr	r2, [r4, #20]
 80039f6:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80039fa:	d0f2      	beq.n	80039e2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x366>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fc:	6921      	ldr	r1, [r4, #16]
 80039fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a00:	7011      	strb	r1, [r2, #0]
 8003a02:	e77d      	b.n	8003900 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x284>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a04:	6822      	ldr	r2, [r4, #0]
 8003a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a0a:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a0c:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	9102      	str	r1, [sp, #8]
 8003a12:	6951      	ldr	r1, [r2, #20]
 8003a14:	9102      	str	r1, [sp, #8]
 8003a16:	6991      	ldr	r1, [r2, #24]
 8003a18:	9102      	str	r1, [sp, #8]
 8003a1a:	9902      	ldr	r1, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a1c:	6811      	ldr	r1, [r2, #0]
 8003a1e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003a22:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a24:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 8003a26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a28:	2a00      	cmp	r2, #0
 8003a2a:	f43f ae9f 	beq.w	800376c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a2e:	685c      	ldr	r4, [r3, #4]
 8003a30:	e734      	b.n	800389c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x220>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a32:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a34:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a36:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a3c:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003a42:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a46:	f042 0220 	orr.w	r2, r2, #32
 8003a4a:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003a4c:	b007      	add	sp, #28
 8003a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a50:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a52:	f06f 0010 	mvn.w	r0, #16
 8003a56:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a58:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a5a:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a62:	6c59      	ldr	r1, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a68:	6459      	str	r1, [r3, #68]	; 0x44
 8003a6a:	e611      	b.n	8003690 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6c:	680a      	ldr	r2, [r1, #0]
 8003a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a72:	600a      	str	r2, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a74:	690a      	ldr	r2, [r1, #16]
 8003a76:	7062      	strb	r2, [r4, #1]
 8003a78:	e733      	b.n	80038e2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x266>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a7a:	6822      	ldr	r2, [r4, #0]
 8003a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a80:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a82:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	9103      	str	r1, [sp, #12]
 8003a88:	6951      	ldr	r1, [r2, #20]
 8003a8a:	9103      	str	r1, [sp, #12]
 8003a8c:	6991      	ldr	r1, [r2, #24]
 8003a8e:	9103      	str	r1, [sp, #12]
 8003a90:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a92:	6811      	ldr	r1, [r2, #0]
 8003a94:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003a98:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a9a:	b662      	cpsie	i
}
 8003a9c:	e7c3      	b.n	8003a26 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3aa>
 8003a9e:	bf00      	nop

08003aa0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8003aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa2:	4b97      	ldr	r3, [pc, #604]	; (8003d00 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x260>)
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	681e      	ldr	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa8:	f893 4041 	ldrb.w	r4, [r3, #65]	; 0x41
 8003aac:	2c20      	cmp	r4, #32
 8003aae:	d001      	beq.n	8003ab4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x14>
}
 8003ab0:	b003      	add	sp, #12
 8003ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ab4:	685c      	ldr	r4, [r3, #4]
 8003ab6:	e004      	b.n	8003ac2 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22>
 8003ab8:	681d      	ldr	r5, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aba:	1bad      	subs	r5, r5, r6
 8003abc:	2d19      	cmp	r5, #25
 8003abe:	f200 80cc 	bhi.w	8003c5a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ac2:	69a5      	ldr	r5, [r4, #24]
 8003ac4:	ea6f 0c05 	mvn.w	ip, r5
 8003ac8:	f01c 0c02 	ands.w	ip, ip, #2
 8003acc:	d0f4      	beq.n	8003ab8 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18>
    __HAL_LOCK(hi2c);
 8003ace:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
 8003ad2:	2d01      	cmp	r5, #1
 8003ad4:	d0ec      	beq.n	8003ab0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
 8003ad6:	2501      	movs	r5, #1
 8003ad8:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003adc:	6825      	ldr	r5, [r4, #0]
 8003ade:	07ed      	lsls	r5, r5, #31
 8003ae0:	f140 80a7 	bpl.w	8003c32 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x192>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ae4:	f04f 0e21 	mov.w	lr, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ae8:	f04f 0c10 	mov.w	ip, #16
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003aec:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aee:	6825      	ldr	r5, [r4, #0]
 8003af0:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8003af4:	6025      	str	r5, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003af6:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003afa:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003afe:	645f      	str	r7, [r3, #68]	; 0x44
    hi2c->XferCount   = Size;
 8003b00:	85da      	strh	r2, [r3, #46]	; 0x2e
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b02:	4a80      	ldr	r2, [pc, #512]	; (8003d04 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x264>)
    hi2c->XferSize    = hi2c->XferCount;
 8003b04:	8ddd      	ldrh	r5, [r3, #46]	; 0x2e
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    hi2c->XferSize    = hi2c->XferCount;
 8003b0a:	b2ad      	uxth	r5, r5
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b0c:	2a08      	cmp	r2, #8
    hi2c->pBuffPtr    = pData;
 8003b0e:	6299      	str	r1, [r3, #40]	; 0x28
    hi2c->XferSize    = hi2c->XferCount;
 8003b10:	859d      	strh	r5, [r3, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b12:	d007      	beq.n	8003b24 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
 8003b14:	2a01      	cmp	r2, #1
 8003b16:	d005      	beq.n	8003b24 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
 8003b18:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003b1c:	d002      	beq.n	8003b24 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b20:	2a12      	cmp	r2, #18
 8003b22:	d109      	bne.n	8003b38 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x98>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b24:	6822      	ldr	r2, [r4, #0]
 8003b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b2a:	6022      	str	r2, [r4, #0]
 8003b2c:	e004      	b.n	8003b38 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x98>
 8003b2e:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b30:	1b92      	subs	r2, r2, r6
 8003b32:	2a64      	cmp	r2, #100	; 0x64
 8003b34:	f200 80a0 	bhi.w	8003c78 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1d8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b38:	6962      	ldr	r2, [r4, #20]
 8003b3a:	07d2      	lsls	r2, r2, #31
 8003b3c:	d5f7      	bpl.n	8003b2e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x8e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003b44:	d17a      	bne.n	8003c3c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x19c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b46:	6120      	str	r0, [r4, #16]
 8003b48:	e009      	b.n	8003b5e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xbe>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b4a:	6962      	ldr	r2, [r4, #20]
 8003b4c:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8003b50:	f040 80a7 	bne.w	8003ca2 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x202>
 8003b54:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b56:	1b89      	subs	r1, r1, r6
 8003b58:	2964      	cmp	r1, #100	; 0x64
 8003b5a:	f200 80b8 	bhi.w	8003cce <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b5e:	6962      	ldr	r2, [r4, #20]
 8003b60:	43d2      	mvns	r2, r2
 8003b62:	f012 0202 	ands.w	r2, r2, #2
 8003b66:	d1f0      	bne.n	8003b4a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xaa>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b68:	9201      	str	r2, [sp, #4]
 8003b6a:	6962      	ldr	r2, [r4, #20]
 8003b6c:	9201      	str	r2, [sp, #4]
 8003b6e:	69a2      	ldr	r2, [r4, #24]
 8003b70:	9201      	str	r2, [sp, #4]
 8003b72:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8003b74:	2d00      	cmp	r5, #0
 8003b76:	f000 80b6 	beq.w	8003ce6 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b7a:	6962      	ldr	r2, [r4, #20]
 8003b7c:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8003b80:	d12c      	bne.n	8003bdc <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x13c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b82:	6961      	ldr	r1, [r4, #20]
 8003b84:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003b88:	d110      	bne.n	8003bac <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10c>
 8003b8a:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8c:	1b92      	subs	r2, r2, r6
 8003b8e:	2a64      	cmp	r2, #100	; 0x64
 8003b90:	d9f3      	bls.n	8003b7a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xda>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b92:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b94:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b9a:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003ba0:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ba4:	f042 0220 	orr.w	r2, r2, #32
 8003ba8:	645a      	str	r2, [r3, #68]	; 0x44
 8003baa:	e00e      	b.n	8003bca <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x12a>
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bac:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bae:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8003bb2:	6160      	str	r0, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb4:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bb6:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bbe:	6c59      	ldr	r1, [r3, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8003bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bc4:	f041 0104 	orr.w	r1, r1, #4
 8003bc8:	6459      	str	r1, [r3, #68]	; 0x44
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	f47f af6f 	bne.w	8003ab0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bd8:	6023      	str	r3, [r4, #0]
 8003bda:	e769      	b.n	8003ab0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bdc:	6a9f      	ldr	r7, [r3, #40]	; 0x28
      hi2c->XferSize--;
 8003bde:	1e6a      	subs	r2, r5, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003be0:	4638      	mov	r0, r7
 8003be2:	f810 1b01 	ldrb.w	r1, [r0], #1
      hi2c->XferSize--;
 8003be6:	b292      	uxth	r2, r2
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003be8:	6121      	str	r1, [r4, #16]
      hi2c->XferCount--;
 8003bea:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
      hi2c->pBuffPtr++;
 8003bec:	6298      	str	r0, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bee:	3901      	subs	r1, #1
 8003bf0:	b289      	uxth	r1, r1
 8003bf2:	85d9      	strh	r1, [r3, #46]	; 0x2e
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bf4:	6961      	ldr	r1, [r4, #20]
      hi2c->XferSize--;
 8003bf6:	859a      	strh	r2, [r3, #44]	; 0x2c
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bf8:	0749      	lsls	r1, r1, #29
 8003bfa:	d518      	bpl.n	8003c2e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18e>
 8003bfc:	b1ba      	cbz	r2, 8003c2e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bfe:	787a      	ldrb	r2, [r7, #1]
        hi2c->XferSize--;
 8003c00:	3d02      	subs	r5, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c02:	6122      	str	r2, [r4, #16]
        hi2c->XferCount--;
 8003c04:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
        hi2c->XferSize--;
 8003c06:	b2ad      	uxth	r5, r5
        hi2c->XferCount--;
 8003c08:	3a01      	subs	r2, #1
        hi2c->pBuffPtr++;
 8003c0a:	3702      	adds	r7, #2
        hi2c->XferCount--;
 8003c0c:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8003c0e:	629f      	str	r7, [r3, #40]	; 0x28
        hi2c->XferSize--;
 8003c10:	859d      	strh	r5, [r3, #44]	; 0x2c
        hi2c->XferCount--;
 8003c12:	85da      	strh	r2, [r3, #46]	; 0x2e
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c14:	6962      	ldr	r2, [r4, #20]
 8003c16:	f012 0204 	ands.w	r2, r2, #4
 8003c1a:	d1ab      	bne.n	8003b74 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xd4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c1c:	6961      	ldr	r1, [r4, #20]
 8003c1e:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003c22:	d1c3      	bne.n	8003bac <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10c>
 8003c24:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c26:	1b92      	subs	r2, r2, r6
 8003c28:	2a64      	cmp	r2, #100	; 0x64
 8003c2a:	d9f3      	bls.n	8003c14 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x174>
 8003c2c:	e7b1      	b.n	8003b92 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xf2>
 8003c2e:	4615      	mov	r5, r2
 8003c30:	e7f0      	b.n	8003c14 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x174>
      __HAL_I2C_ENABLE(hi2c);
 8003c32:	6825      	ldr	r5, [r4, #0]
 8003c34:	f045 0501 	orr.w	r5, r5, #1
 8003c38:	6025      	str	r5, [r4, #0]
 8003c3a:	e753      	b.n	8003ae4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x44>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c3c:	22f0      	movs	r2, #240	; 0xf0
 8003c3e:	6122      	str	r2, [r4, #16]
 8003c40:	e007      	b.n	8003c52 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1b2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c42:	6962      	ldr	r2, [r4, #20]
 8003c44:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8003c48:	d12b      	bne.n	8003ca2 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x202>
 8003c4a:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4c:	1b89      	subs	r1, r1, r6
 8003c4e:	2964      	cmp	r1, #100	; 0x64
 8003c50:	d83d      	bhi.n	8003cce <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c52:	6962      	ldr	r2, [r4, #20]
 8003c54:	0717      	lsls	r7, r2, #28
 8003c56:	d5f4      	bpl.n	8003c42 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1a2>
 8003c58:	e775      	b.n	8003b46 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c5a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c5c:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c64:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003c6a:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c6e:	f042 0220 	orr.w	r2, r2, #32
 8003c72:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003c74:	b003      	add	sp, #12
 8003c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c78:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c7a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c7c:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c82:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003c88:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c8c:	f042 0220 	orr.w	r2, r2, #32
 8003c90:	645a      	str	r2, [r3, #68]	; 0x44
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c92:	6822      	ldr	r2, [r4, #0]
 8003c94:	05d1      	lsls	r1, r2, #23
 8003c96:	f57f af0b 	bpl.w	8003ab0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c9e:	645a      	str	r2, [r3, #68]	; 0x44
 8003ca0:	e706      	b.n	8003ab0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca2:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ca4:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ca8:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003caa:	6822      	ldr	r2, [r4, #0]
 8003cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb0:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb2:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb4:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cb6:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cba:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003cc0:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cc4:	f042 0204 	orr.w	r2, r2, #4
 8003cc8:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003cca:	b003      	add	sp, #12
 8003ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cce:	2120      	movs	r1, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd0:	635a      	str	r2, [r3, #52]	; 0x34
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cd2:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	645a      	str	r2, [r3, #68]	; 0x44
 8003ce4:	e6e4      	b.n	8003ab0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce6:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003ce8:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cea:	6822      	ldr	r2, [r4, #0]
 8003cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf0:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003cf2:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003cf6:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfa:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
    return HAL_OK;
 8003cfe:	e6d7      	b.n	8003ab0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
 8003d00:	20000208 	.word	0x20000208
 8003d04:	ffff0000 	.word	0xffff0000

08003d08 <DS3231_Update>:
uint8_t bcdToDec(uint8_t val) {
    return ((val / 16 * 10) + (val % 16));
}

void DS3231_Update(void) {
    uint8_t cmd = 0;
 8003d08:	2300      	movs	r3, #0
void DS3231_Update(void) {
 8003d0a:	b500      	push	{lr}
 8003d0c:	b083      	sub	sp, #12
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8003d0e:	f10d 0107 	add.w	r1, sp, #7
 8003d12:	2201      	movs	r2, #1
 8003d14:	20d0      	movs	r0, #208	; 0xd0
    uint8_t cmd = 0;
 8003d16:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8003d1a:	f7ff fec1 	bl	8003aa0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8003d1e:	2213      	movs	r2, #19
 8003d20:	20d0      	movs	r0, #208	; 0xd0
 8003d22:	4903      	ldr	r1, [pc, #12]	; (8003d30 <DS3231_Update+0x28>)
 8003d24:	f7ff fcaa 	bl	800367c <HAL_I2C_Master_Receive.constprop.0.isra.0>
    rtcBufferSet[12] = rtcBuffer[11];
    rtcBufferSet[13] = rtcBuffer[12];
    rtcBufferSet[14] = rtcBuffer[13];
    rtcBufferSet[15] = rtcBuffer[14];
    rtcBufferSet[16] = rtcBuffer[15];
}
 8003d28:	b003      	add	sp, #12
 8003d2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d2e:	bf00      	nop
 8003d30:	20000260 	.word	0x20000260

08003d34 <LCD_Char.constprop.1.isra.0>:
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
}

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
 8003d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d38:	469b      	mov	fp, r3
	uint8_t  *bitmap = font -> bitmap;
	uint16_t bo = glyph -> bitmapOffset;
	uint8_t bits = 0, bit = 0;
	uint16_t set_pixels = 0;
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003d3a:	78d3      	ldrb	r3, [r2, #3]
static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
 8003d3c:	b085      	sub	sp, #20
 8003d3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
	uint16_t bo = glyph -> bitmapOffset;
 8003d42:	f8b2 8000 	ldrh.w	r8, [r2]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003d46:	b38b      	cbz	r3, 8003dac <LCD_Char.constprop.1.isra.0+0x78>
	uint8_t bits = 0, bit = 0;
 8003d48:	2600      	movs	r6, #0
 8003d4a:	4691      	mov	r9, r2
 8003d4c:	4637      	mov	r7, r6
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003d4e:	46b2      	mov	sl, r6
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8003d50:	f899 1002 	ldrb.w	r1, [r9, #2]
 8003d54:	b351      	cbz	r1, 8003dac <LCD_Char.constprop.1.isra.0+0x78>
 8003d56:	2400      	movs	r4, #0
 8003d58:	4622      	mov	r2, r4
		{
			if(bit == 0)
 8003d5a:	2e00      	cmp	r6, #0
 8003d5c:	d045      	beq.n	8003dea <LCD_Char.constprop.1.isra.0+0xb6>
			else if (set_pixels > 0)
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
				set_pixels = 0;
			}
			bit >>= 1;
 8003d5e:	4633      	mov	r3, r6
 8003d60:	0876      	lsrs	r6, r6, #1
			if(bits & bit)
 8003d62:	ea17 0503 	ands.w	r5, r7, r3
				set_pixels++;
 8003d66:	f102 0301 	add.w	r3, r2, #1
			if(bits & bit)
 8003d6a:	d022      	beq.n	8003db2 <LCD_Char.constprop.1.isra.0+0x7e>
				set_pixels++;
 8003d6c:	b29a      	uxth	r2, r3
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8003d6e:	3401      	adds	r4, #1
 8003d70:	b2e4      	uxtb	r4, r4
 8003d72:	42a1      	cmp	r1, r4
 8003d74:	d8f1      	bhi.n	8003d5a <LCD_Char.constprop.1.isra.0+0x26>
		}
		if (set_pixels > 0)
 8003d76:	b18a      	cbz	r2, 8003d9c <LCD_Char.constprop.1.isra.0+0x68>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8003d78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	f999 0005 	ldrsb.w	r0, [r9, #5]
 8003d80:	9b02      	ldr	r3, [sp, #8]
 8003d82:	4420      	add	r0, r4
 8003d84:	f999 1006 	ldrsb.w	r1, [r9, #6]
 8003d88:	1a80      	subs	r0, r0, r2
 8003d8a:	4418      	add	r0, r3
 8003d8c:	9b03      	ldr	r3, [sp, #12]
 8003d8e:	4451      	add	r1, sl
 8003d90:	4419      	add	r1, r3
 8003d92:	b280      	uxth	r0, r0
 8003d94:	2301      	movs	r3, #1
 8003d96:	b289      	uxth	r1, r1
 8003d98:	f7fc fea0 	bl	8000adc <LCD_Rect_Fill>
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003d9c:	f899 3003 	ldrb.w	r3, [r9, #3]
 8003da0:	f10a 0a01 	add.w	sl, sl, #1
 8003da4:	fa5f fa8a 	uxtb.w	sl, sl
 8003da8:	459a      	cmp	sl, r3
 8003daa:	d3d1      	bcc.n	8003d50 <LCD_Char.constprop.1.isra.0+0x1c>
			set_pixels = 0;
		}
	}
}
 8003dac:	b005      	add	sp, #20
 8003dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else if (set_pixels > 0)
 8003db2:	2a00      	cmp	r2, #0
 8003db4:	d0db      	beq.n	8003d6e <LCD_Char.constprop.1.isra.0+0x3a>
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8003db6:	f999 1006 	ldrsb.w	r1, [r9, #6]
 8003dba:	f999 0005 	ldrsb.w	r0, [r9, #5]
 8003dbe:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003dc2:	4451      	add	r1, sl
 8003dc4:	4461      	add	r1, ip
 8003dc6:	4420      	add	r0, r4
 8003dc8:	f8dd c008 	ldr.w	ip, [sp, #8]
 8003dcc:	1a80      	subs	r0, r0, r2
 8003dce:	4460      	add	r0, ip
 8003dd0:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8003dd4:	b289      	uxth	r1, r1
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f8cd c000 	str.w	ip, [sp]
 8003ddc:	b280      	uxth	r0, r0
 8003dde:	f7fc fe7d 	bl	8000adc <LCD_Rect_Fill>
				set_pixels = 0;
 8003de2:	462a      	mov	r2, r5
 8003de4:	f899 1002 	ldrb.w	r1, [r9, #2]
 8003de8:	e7c1      	b.n	8003d6e <LCD_Char.constprop.1.isra.0+0x3a>
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8003dea:	f108 0001 	add.w	r0, r8, #1
 8003dee:	f81b 7008 	ldrb.w	r7, [fp, r8]
				bit  = 0x80;
 8003df2:	2380      	movs	r3, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8003df4:	2640      	movs	r6, #64	; 0x40
 8003df6:	fa1f f880 	uxth.w	r8, r0
 8003dfa:	e7b2      	b.n	8003d62 <LCD_Char.constprop.1.isra.0+0x2e>

08003dfc <HAL_InitTick.isra.0>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 8003dfc:	b470      	push	{r4, r5, r6}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dfe:	4c19      	ldr	r4, [pc, #100]	; (8003e64 <HAL_InitTick.isra.0+0x68>)
 8003e00:	4a19      	ldr	r2, [pc, #100]	; (8003e68 <HAL_InitTick.isra.0+0x6c>)
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	fba2 2303 	umull	r2, r3, r2, r3
 8003e08:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e10:	d20d      	bcs.n	8003e2e <HAL_InitTick.isra.0+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e12:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e16:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e1a:	2100      	movs	r1, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e1c:	2607      	movs	r6, #7
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e1e:	4d13      	ldr	r5, [pc, #76]	; (8003e6c <HAL_InitTick.isra.0+0x70>)
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e20:	280f      	cmp	r0, #15
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e22:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e24:	f885 c023 	strb.w	ip, [r5, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e28:	6191      	str	r1, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e2a:	6116      	str	r6, [r2, #16]
 8003e2c:	d901      	bls.n	8003e32 <HAL_InitTick.isra.0+0x36>
}
 8003e2e:	bc70      	pop	{r4, r5, r6}
 8003e30:	4770      	bx	lr
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e32:	68eb      	ldr	r3, [r5, #12]
    uwTickPrio = TickPriority;
 8003e34:	6060      	str	r0, [r4, #4]
 8003e36:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e3a:	1af2      	subs	r2, r6, r3
 8003e3c:	2a04      	cmp	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e3e:	f103 0504 	add.w	r5, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e42:	bf28      	it	cs
 8003e44:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e46:	2d06      	cmp	r5, #6
 8003e48:	bf88      	it	hi
 8003e4a:	1ed9      	subhi	r1, r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e50:	4093      	lsls	r3, r2
 8003e52:	ea20 0003 	bic.w	r0, r0, r3
 8003e56:	4088      	lsls	r0, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e58:	4c04      	ldr	r4, [pc, #16]	; (8003e6c <HAL_InitTick.isra.0+0x70>)
 8003e5a:	0100      	lsls	r0, r0, #4
 8003e5c:	b2c0      	uxtb	r0, r0
 8003e5e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 8003e62:	e7e4      	b.n	8003e2e <HAL_InitTick.isra.0+0x32>
 8003e64:	20000000 	.word	0x20000000
 8003e68:	10624dd3 	.word	0x10624dd3
 8003e6c:	e000ed00 	.word	0xe000ed00

08003e70 <LCD_Font.constprop.0>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8003e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	int16_t cursor_x = x;
 8003e74:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8003e78:	b085      	sub	sp, #20
	int16_t cursor_y = y;
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003e7a:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8003e7c:	460d      	mov	r5, r1
 8003e7e:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003e80:	f001 face 	bl	8005420 <strlen>
 8003e84:	b3a8      	cbz	r0, 8003ef2 <LCD_Font.constprop.0+0x82>
 8003e86:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 8003e88:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 8003e8a:	2682      	movs	r6, #130	; 0x82
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003e8c:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
		}
		else if(c >= font.first && c <= font.last && c != '\r')
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003e8e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8003ef8 <LCD_Font.constprop.0+0x88>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8003e92:	4b1a      	ldr	r3, [pc, #104]	; (8003efc <LCD_Font.constprop.0+0x8c>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003e94:	f10d 0b08 	add.w	fp, sp, #8
 8003e98:	e01c      	b.n	8003ed4 <LCD_Font.constprop.0+0x64>
		else if(c >= font.first && c <= font.last && c != '\r')
 8003e9a:	f1bc 0f5e 	cmp.w	ip, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003e9e:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 8003ea2:	d812      	bhi.n	8003eca <LCD_Font.constprop.0+0x5a>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8003ea4:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003ea8:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8003eac:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003eae:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8003eb2:	4638      	mov	r0, r7
 8003eb4:	4631      	mov	r1, r6
 8003eb6:	f7ff ff3d 	bl	8003d34 <LCD_Char.constprop.1.isra.0>
			cursor_x += glyph.xAdvance * size;
 8003eba:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003ebe:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 8003ec0:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003ec2:	f001 faad 	bl	8005420 <strlen>
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <LCD_Font.constprop.0+0x8c>)
			cursor_x += glyph.xAdvance * size;
 8003ec8:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003eca:	3401      	adds	r4, #1
 8003ecc:	b2a4      	uxth	r4, r4
 8003ece:	4284      	cmp	r4, r0
 8003ed0:	4622      	mov	r2, r4
 8003ed2:	d20e      	bcs.n	8003ef2 <LCD_Font.constprop.0+0x82>
		char c = text[text_pos];
 8003ed4:	5ca9      	ldrb	r1, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 8003ed6:	f1a1 0220 	sub.w	r2, r1, #32
		if(c == '\n')
 8003eda:	290a      	cmp	r1, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 8003edc:	fa5f fc82 	uxtb.w	ip, r2
		if(c == '\n')
 8003ee0:	d1db      	bne.n	8003e9a <LCD_Font.constprop.0+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003ee2:	3401      	adds	r4, #1
 8003ee4:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 8003ee6:	362b      	adds	r6, #43	; 0x2b
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003ee8:	4284      	cmp	r4, r0
			cursor_x = x;
 8003eea:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003eec:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 8003eee:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003ef0:	d3f0      	bcc.n	8003ed4 <LCD_Font.constprop.0+0x64>
		}
	}
}
 8003ef2:	b005      	add	sp, #20
 8003ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef8:	0800c908 	.word	0x0800c908
 8003efc:	0801be60 	.word	0x0801be60

08003f00 <LCD_Font.constprop.1>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8003f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 8003f04:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8003f08:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f0a:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8003f0c:	460d      	mov	r5, r1
 8003f0e:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f10:	f001 fa86 	bl	8005420 <strlen>
 8003f14:	b3b8      	cbz	r0, 8003f86 <LCD_Font.constprop.1+0x86>
 8003f16:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 8003f18:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 8003f1a:	2664      	movs	r6, #100	; 0x64
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f1c:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003f1e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8003f8c <LCD_Font.constprop.1+0x8c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8003f22:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <LCD_Font.constprop.1+0x90>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003f24:	f10d 0b08 	add.w	fp, sp, #8
 8003f28:	e01d      	b.n	8003f66 <LCD_Font.constprop.1+0x66>
 8003f2a:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 8003f2e:	295e      	cmp	r1, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003f30:	f502 723c 	add.w	r2, r2, #752	; 0x2f0
		else if(c >= font.first && c <= font.last && c != '\r')
 8003f34:	d812      	bhi.n	8003f5c <LCD_Font.constprop.1+0x5c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8003f36:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003f3a:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8003f3e:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003f40:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8003f44:	4638      	mov	r0, r7
 8003f46:	4631      	mov	r1, r6
 8003f48:	f7ff fef4 	bl	8003d34 <LCD_Char.constprop.1.isra.0>
			cursor_x += glyph.xAdvance * size;
 8003f4c:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f50:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 8003f52:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f54:	f001 fa64 	bl	8005420 <strlen>
 8003f58:	4b0d      	ldr	r3, [pc, #52]	; (8003f90 <LCD_Font.constprop.1+0x90>)
			cursor_x += glyph.xAdvance * size;
 8003f5a:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f5c:	3401      	adds	r4, #1
 8003f5e:	b2a4      	uxth	r4, r4
 8003f60:	4284      	cmp	r4, r0
 8003f62:	4622      	mov	r2, r4
 8003f64:	d20f      	bcs.n	8003f86 <LCD_Font.constprop.1+0x86>
		char c = text[text_pos];
 8003f66:	f815 c002 	ldrb.w	ip, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 8003f6a:	f1ac 0220 	sub.w	r2, ip, #32
		if(c == '\n')
 8003f6e:	f1bc 0f0a 	cmp.w	ip, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 8003f72:	b2d1      	uxtb	r1, r2
		if(c == '\n')
 8003f74:	d1d9      	bne.n	8003f2a <LCD_Font.constprop.1+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f76:	3401      	adds	r4, #1
 8003f78:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 8003f7a:	3696      	adds	r6, #150	; 0x96
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f7c:	4284      	cmp	r4, r0
			cursor_x = x;
 8003f7e:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f80:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 8003f82:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f84:	d3ef      	bcc.n	8003f66 <LCD_Font.constprop.1+0x66>
}
 8003f86:	b005      	add	sp, #20
 8003f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f8c:	0800c908 	.word	0x0800c908
 8003f90:	0800cf4c 	.word	0x0800cf4c

08003f94 <LCD_Font.constprop.2>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8003f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_y = y;
 8003f98:	b20b      	sxth	r3, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8003f9a:	b09f      	sub	sp, #124	; 0x7c
	int16_t cursor_x = x;
 8003f9c:	b204      	sxth	r4, r0
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f9e:	4610      	mov	r0, r2
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8003fa0:	9216      	str	r2, [sp, #88]	; 0x58
	int16_t cursor_x = x;
 8003fa2:	9418      	str	r4, [sp, #96]	; 0x60
	int16_t cursor_y = y;
 8003fa4:	9308      	str	r3, [sp, #32]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003fa6:	f001 fa3b 	bl	8005420 <strlen>
 8003faa:	2800      	cmp	r0, #0
 8003fac:	d068      	beq.n	8004080 <LCD_Font.constprop.2+0xec>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8004088 <LCD_Font.constprop.2+0xf4>
 8003fb4:	4f35      	ldr	r7, [pc, #212]	; (800408c <LCD_Font.constprop.2+0xf8>)
 8003fb6:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8004090 <LCD_Font.constprop.2+0xfc>
 8003fba:	9307      	str	r3, [sp, #28]
		char c = text[text_pos];
 8003fbc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003fbe:	5cd3      	ldrb	r3, [r2, r3]
		if(c == '\n')
 8003fc0:	2b0a      	cmp	r3, #10
 8003fc2:	d052      	beq.n	800406a <LCD_Font.constprop.2+0xd6>
		else if(c >= font.first && c <= font.last && c != '\r')
 8003fc4:	3b20      	subs	r3, #32
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	2a5e      	cmp	r2, #94	; 0x5e
 8003fca:	d853      	bhi.n	8004074 <LCD_Font.constprop.2+0xe0>
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003fcc:	4a31      	ldr	r2, [pc, #196]	; (8004094 <LCD_Font.constprop.2+0x100>)
 8003fce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003fd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003fd6:	ab1e      	add	r3, sp, #120	; 0x78
 8003fd8:	e903 0003 	stmdb	r3, {r0, r1}
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003fdc:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
	uint16_t bo = glyph -> bitmapOffset;
 8003fe0:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003fe4:	9317      	str	r3, [sp, #92]	; 0x5c
	uint16_t bo = glyph -> bitmapOffset;
 8003fe6:	9205      	str	r2, [sp, #20]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f001 8151 	beq.w	8005290 <LCD_Font.constprop.2+0x12fc>
			cursor_x += glyph.xAdvance * size;
 8003fee:	b2a3      	uxth	r3, r4
 8003ff0:	9315      	str	r3, [sp, #84]	; 0x54
 8003ff2:	2300      	movs	r3, #0
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8003ff4:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
	uint8_t bits = 0, bit = 0;
 8003ff8:	e9cd 3301 	strd	r3, r3, [sp, #4]
			cursor_x += glyph.xAdvance * size;
 8003ffc:	9306      	str	r3, [sp, #24]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8003ffe:	9204      	str	r2, [sp, #16]
 8004000:	9b04      	ldr	r3, [sp, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 846d 	beq.w	80048e2 <LCD_Font.constprop.2+0x94e>
 8004008:	2300      	movs	r3, #0
 800400a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800400e:	469e      	mov	lr, r3
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	e011      	b.n	8004038 <LCD_Font.constprop.2+0xa4>
			bit >>= 1;
 8004014:	0852      	lsrs	r2, r2, #1
 8004016:	9201      	str	r2, [sp, #4]
			if(bits & bit)
 8004018:	9a02      	ldr	r2, [sp, #8]
 800401a:	421a      	tst	r2, r3
 800401c:	d01d      	beq.n	800405a <LCD_Font.constprop.2+0xc6>
				set_pixels++;
 800401e:	f10e 0201 	add.w	r2, lr, #1
 8004022:	4673      	mov	r3, lr
 8004024:	fa1f fe82 	uxth.w	lr, r2
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8004028:	9a00      	ldr	r2, [sp, #0]
 800402a:	9904      	ldr	r1, [sp, #16]
 800402c:	3201      	adds	r2, #1
 800402e:	9200      	str	r2, [sp, #0]
 8004030:	b2d2      	uxtb	r2, r2
 8004032:	428a      	cmp	r2, r1
 8004034:	f080 8451 	bcs.w	80048da <LCD_Font.constprop.2+0x946>
			if(bit == 0)
 8004038:	9a01      	ldr	r2, [sp, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	2a00      	cmp	r2, #0
 800403e:	d1e9      	bne.n	8004014 <LCD_Font.constprop.2+0x80>
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8004040:	2340      	movs	r3, #64	; 0x40
 8004042:	9301      	str	r3, [sp, #4]
				bit  = 0x80;
 8004044:	2380      	movs	r3, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8004046:	9905      	ldr	r1, [sp, #20]
 8004048:	4813      	ldr	r0, [pc, #76]	; (8004098 <LCD_Font.constprop.2+0x104>)
 800404a:	1c4a      	adds	r2, r1, #1
 800404c:	5c09      	ldrb	r1, [r1, r0]
 800404e:	b292      	uxth	r2, r2
 8004050:	9102      	str	r1, [sp, #8]
 8004052:	9205      	str	r2, [sp, #20]
			if(bits & bit)
 8004054:	9a02      	ldr	r2, [sp, #8]
 8004056:	421a      	tst	r2, r3
 8004058:	d1e1      	bne.n	800401e <LCD_Font.constprop.2+0x8a>
			else if (set_pixels > 0)
 800405a:	f1be 0f00 	cmp.w	lr, #0
 800405e:	d11d      	bne.n	800409c <LCD_Font.constprop.2+0x108>
				set_pixels++;
 8004060:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004064:	f04f 0e00 	mov.w	lr, #0
 8004068:	e7de      	b.n	8004028 <LCD_Font.constprop.2+0x94>
			cursor_y += font.yAdvance * size;
 800406a:	9b08      	ldr	r3, [sp, #32]
			cursor_x = x;
 800406c:	9c18      	ldr	r4, [sp, #96]	; 0x60
			cursor_y += font.yAdvance * size;
 800406e:	332b      	adds	r3, #43	; 0x2b
 8004070:	b21b      	sxth	r3, r3
 8004072:	9308      	str	r3, [sp, #32]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004074:	9b07      	ldr	r3, [sp, #28]
 8004076:	3301      	adds	r3, #1
 8004078:	b29b      	uxth	r3, r3
 800407a:	4283      	cmp	r3, r0
 800407c:	9307      	str	r3, [sp, #28]
 800407e:	d39d      	bcc.n	8003fbc <LCD_Font.constprop.2+0x28>
}
 8004080:	b01f      	add	sp, #124	; 0x7c
 8004082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004086:	bf00      	nop
 8004088:	40010c00 	.word	0x40010c00
 800408c:	40010800 	.word	0x40010800
 8004090:	40011000 	.word	0x40011000
 8004094:	0800c908 	.word	0x0800c908
 8004098:	0801be60 	.word	0x0801be60
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 800409c:	9c00      	ldr	r4, [sp, #0]
 800409e:	f99d 3075 	ldrsb.w	r3, [sp, #117]	; 0x75
 80040a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80040a6:	4423      	add	r3, r4
 80040a8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80040aa:	eba3 030e 	sub.w	r3, r3, lr
 80040ae:	4423      	add	r3, r4
 80040b0:	fa1f fa83 	uxth.w	sl, r3
 80040b4:	9c06      	ldr	r4, [sp, #24]
 80040b6:	f99d 3076 	ldrsb.w	r3, [sp, #118]	; 0x76
 80040ba:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80040be:	4423      	add	r3, r4
 80040c0:	9c08      	ldr	r4, [sp, #32]
 80040c2:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80040c6:	4423      	add	r3, r4
 80040c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80040cc:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
 80040d0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80040d4:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80040d8:	f04f 0910 	mov.w	r9, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80040dc:	f8cb c010 	str.w	ip, [fp, #16]
 80040e0:	613e      	str	r6, [r7, #16]
 80040e2:	613a      	str	r2, [r7, #16]
 80040e4:	f8c8 0010 	str.w	r0, [r8, #16]
 80040e8:	f8c8 1010 	str.w	r1, [r8, #16]
 80040ec:	f8c8 6010 	str.w	r6, [r8, #16]
 80040f0:	f8c8 2010 	str.w	r2, [r8, #16]
 80040f4:	f8c8 5010 	str.w	r5, [r8, #16]
 80040f8:	f8c8 4010 	str.w	r4, [r8, #16]
 80040fc:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8004100:	6139      	str	r1, [r7, #16]
 8004102:	6138      	str	r0, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004104:	f8c7 9010 	str.w	r9, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004108:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 800410a:	2440      	movs	r4, #64	; 0x40
 800410c:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800410e:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 8004112:	613c      	str	r4, [r7, #16]
 8004114:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004118:	f8c8 9010 	str.w	r9, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800411c:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004120:	2402      	movs	r4, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004122:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004126:	f8cb 4010 	str.w	r4, [fp, #16]
 800412a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800412e:	f8cb 4010 	str.w	r4, [fp, #16]
 8004132:	2401      	movs	r4, #1
 8004134:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004138:	f8cb c010 	str.w	ip, [fp, #16]
 800413c:	613e      	str	r6, [r7, #16]
 800413e:	613a      	str	r2, [r7, #16]
 8004140:	f8c8 0010 	str.w	r0, [r8, #16]
 8004144:	f8c8 1010 	str.w	r1, [r8, #16]
 8004148:	f8c8 6010 	str.w	r6, [r8, #16]
 800414c:	f8c8 2010 	str.w	r2, [r8, #16]
 8004150:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004154:	f8c8 5010 	str.w	r5, [r8, #16]
 8004158:	f8c8 2010 	str.w	r2, [r8, #16]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 800415c:	f10e 32ff 	add.w	r2, lr, #4294967295
 8004160:	4452      	add	r2, sl
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004162:	f3c3 34c0 	ubfx	r4, r3, #15, #1
	data[0] = x1 >> 8;
 8004166:	f3c3 2007 	ubfx	r0, r3, #8, #8
	LCD_Window(y, x, y + h - 1, x + w - 1);
 800416a:	fa1f f982 	uxth.w	r9, r2
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 800416e:	b29a      	uxth	r2, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004170:	041b      	lsls	r3, r3, #16
    GPIOx->BSRR = GPIO_Pin;
 8004172:	bf48      	it	mi
 8004174:	2304      	movmi	r3, #4
 8004176:	9403      	str	r4, [sp, #12]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004178:	bf54      	ite	pl
 800417a:	6139      	strpl	r1, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 800417c:	613b      	strmi	r3, [r7, #16]
 800417e:	f3c2 3380 	ubfx	r3, r2, #14, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004182:	0455      	lsls	r5, r2, #17
 8004184:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004186:	bf54      	ite	pl
 8004188:	f44f 2300 	movpl.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800418c:	2308      	movmi	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800418e:	0494      	lsls	r4, r2, #18
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	f3c2 3340 	ubfx	r3, r2, #13, #1
 8004196:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004198:	bf54      	ite	pl
 800419a:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800419e:	2310      	movmi	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80041a0:	04d1      	lsls	r1, r2, #19
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	f3c2 3300 	ubfx	r3, r2, #12, #1
 80041a8:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041aa:	bf54      	ite	pl
 80041ac:	f44f 1300 	movpl.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80041b0:	2320      	movmi	r3, #32
 80041b2:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80041b4:	0513      	lsls	r3, r2, #20
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041b6:	bf54      	ite	pl
 80041b8:	f44f 0380 	movpl.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80041bc:	2340      	movmi	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80041be:	0555      	lsls	r5, r2, #21
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	f3c2 2380 	ubfx	r3, r2, #10, #1
 80041c6:	9310      	str	r3, [sp, #64]	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041c8:	bf54      	ite	pl
 80041ca:	f44f 0300 	movpl.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80041ce:	2380      	movmi	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80041d0:	0594      	lsls	r4, r2, #22
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	f3c2 2340 	ubfx	r3, r2, #9, #1
 80041d8:	9311      	str	r3, [sp, #68]	; 0x44
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041da:	bf54      	ite	pl
 80041dc:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80041e0:	2310      	movmi	r3, #16
 80041e2:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80041e6:	f010 0301 	ands.w	r3, r0, #1
 80041ea:	9312      	str	r3, [sp, #72]	; 0x48
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041ec:	bf0c      	ite	eq
 80041ee:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80041f2:	2320      	movne	r3, #32
 80041f4:	f8c8 3010 	str.w	r3, [r8, #16]
 80041f8:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041fa:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80041fe:	f8cb 3010 	str.w	r3, [fp, #16]
 8004202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004206:	f8cb 3010 	str.w	r3, [fp, #16]
 800420a:	2301      	movs	r3, #1
 800420c:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004210:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004214:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004218:	f8cb 3010 	str.w	r3, [fp, #16]
 800421c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004220:	f44f 2300 	mov.w	r3, #524288	; 0x80000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004224:	f3c2 14c0 	ubfx	r4, r2, #7, #1
 8004228:	613e      	str	r6, [r7, #16]
 800422a:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800422e:	6139      	str	r1, [r7, #16]
 8004230:	f8c8 3010 	str.w	r3, [r8, #16]
 8004234:	9413      	str	r4, [sp, #76]	; 0x4c
 8004236:	f8c8 0010 	str.w	r0, [r8, #16]
 800423a:	f8c8 6010 	str.w	r6, [r8, #16]
 800423e:	f8c8 1010 	str.w	r1, [r8, #16]
 8004242:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004246:	f8c8 5010 	str.w	r5, [r8, #16]
 800424a:	f8c8 1010 	str.w	r1, [r8, #16]
 800424e:	0611      	lsls	r1, r2, #24
    GPIOx->BSRR = GPIO_Pin;
 8004250:	bf48      	it	mi
 8004252:	2104      	movmi	r1, #4
 8004254:	b2d3      	uxtb	r3, r2
 8004256:	bf4c      	ite	mi
 8004258:	6139      	strmi	r1, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800425a:	6138      	strpl	r0, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800425c:	065d      	lsls	r5, r3, #25
 800425e:	bf54      	ite	pl
 8004260:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004264:	2108      	movmi	r1, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004266:	0698      	lsls	r0, r3, #26
 8004268:	6139      	str	r1, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800426a:	bf54      	ite	pl
 800426c:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004270:	2110      	movmi	r1, #16
 8004272:	6139      	str	r1, [r7, #16]
 8004274:	f3c3 1100 	ubfx	r1, r3, #4, #1
 8004278:	9114      	str	r1, [sp, #80]	; 0x50
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800427a:	06d9      	lsls	r1, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800427c:	bf54      	ite	pl
 800427e:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004282:	2120      	movmi	r1, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004284:	0718      	lsls	r0, r3, #28
 8004286:	6139      	str	r1, [r7, #16]
 8004288:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 800428c:	910e      	str	r1, [sp, #56]	; 0x38
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800428e:	bf54      	ite	pl
 8004290:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004294:	2140      	movmi	r1, #64	; 0x40
 8004296:	6139      	str	r1, [r7, #16]
 8004298:	f3c3 0180 	ubfx	r1, r3, #2, #1
 800429c:	910d      	str	r1, [sp, #52]	; 0x34
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800429e:	0759      	lsls	r1, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042a0:	bf54      	ite	pl
 80042a2:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80042a6:	2180      	movmi	r1, #128	; 0x80
 80042a8:	f3c3 1480 	ubfx	r4, r3, #6, #1
 80042ac:	6139      	str	r1, [r7, #16]
 80042ae:	f3c3 1540 	ubfx	r5, r3, #5, #1
 80042b2:	f3c3 0140 	ubfx	r1, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80042b6:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042b8:	bf54      	ite	pl
 80042ba:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80042be:	2310      	movmi	r3, #16
 80042c0:	910b      	str	r1, [sp, #44]	; 0x2c
 80042c2:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80042c6:	f012 0301 	ands.w	r3, r2, #1
 80042ca:	930c      	str	r3, [sp, #48]	; 0x30
 80042cc:	f3c2 2cc0 	ubfx	ip, r2, #11, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042d0:	bf0c      	ite	eq
 80042d2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80042d6:	2320      	movne	r3, #32
 80042d8:	2202      	movs	r2, #2
 80042da:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042de:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80042e2:	f8cb 2010 	str.w	r2, [fp, #16]
 80042e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042ea:	f8cb 2010 	str.w	r2, [fp, #16]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80042f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042fc:	f8cb 2010 	str.w	r2, [fp, #16]
 8004300:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004304:	613e      	str	r6, [r7, #16]
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	f8c8 2010 	str.w	r2, [r8, #16]
 800430c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004310:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004314:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004318:	f8c8 2010 	str.w	r2, [r8, #16]
 800431c:	f8c8 6010 	str.w	r6, [r8, #16]
 8004320:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004324:	9b03      	ldr	r3, [sp, #12]
 8004326:	f8c8 0010 	str.w	r0, [r8, #16]
 800432a:	f8c8 1010 	str.w	r1, [r8, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 8721 	beq.w	8005176 <LCD_Font.constprop.2+0x11e2>
    GPIOx->BSRR = GPIO_Pin;
 8004334:	2304      	movs	r3, #4
 8004336:	613b      	str	r3, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800433a:	2b00      	cmp	r3, #0
 800433c:	f040 8720 	bne.w	8005180 <LCD_Font.constprop.2+0x11ec>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004340:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004344:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004348:	2b00      	cmp	r3, #0
 800434a:	f040 871f 	bne.w	800518c <LCD_Font.constprop.2+0x11f8>
 800434e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004352:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004354:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004356:	2b00      	cmp	r3, #0
 8004358:	f040 871e 	bne.w	8005198 <LCD_Font.constprop.2+0x1204>
 800435c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004360:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004362:	f1bc 0f00 	cmp.w	ip, #0
 8004366:	f040 871d 	bne.w	80051a4 <LCD_Font.constprop.2+0x1210>
 800436a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800436e:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004370:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004372:	2b00      	cmp	r3, #0
 8004374:	f040 871c 	bne.w	80051b0 <LCD_Font.constprop.2+0x121c>
 8004378:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800437c:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800437e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004380:	2b00      	cmp	r3, #0
 8004382:	f040 871b 	bne.w	80051bc <LCD_Font.constprop.2+0x1228>
 8004386:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800438a:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800438e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004390:	2b00      	cmp	r3, #0
 8004392:	f040 871a 	bne.w	80051ca <LCD_Font.constprop.2+0x1236>
 8004396:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800439a:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800439e:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043a0:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80043a4:	f8cb 2010 	str.w	r2, [fp, #16]
 80043a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043ac:	f8cb 2010 	str.w	r2, [fp, #16]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80043ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043be:	f8cb 2010 	str.w	r2, [fp, #16]
 80043c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80043c6:	613e      	str	r6, [r7, #16]
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	f8c8 2010 	str.w	r2, [r8, #16]
 80043ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80043d2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80043d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80043da:	f8c8 2010 	str.w	r2, [r8, #16]
 80043de:	f8c8 6010 	str.w	r6, [r8, #16]
 80043e2:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80043e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80043e8:	f8c8 0010 	str.w	r0, [r8, #16]
 80043ec:	f8c8 1010 	str.w	r1, [r8, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 8718 	beq.w	8005226 <LCD_Font.constprop.2+0x1292>
    GPIOx->BSRR = GPIO_Pin;
 80043f6:	2304      	movs	r3, #4
 80043f8:	613b      	str	r3, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80043fa:	2c00      	cmp	r4, #0
 80043fc:	f040 86ea 	bne.w	80051d4 <LCD_Font.constprop.2+0x1240>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004400:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004404:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004406:	2d00      	cmp	r5, #0
 8004408:	f040 86e9 	bne.w	80051de <LCD_Font.constprop.2+0x124a>
 800440c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004410:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004412:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004414:	2b00      	cmp	r3, #0
 8004416:	f040 86e8 	bne.w	80051ea <LCD_Font.constprop.2+0x1256>
 800441a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800441e:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004422:	2b00      	cmp	r3, #0
 8004424:	f040 86e7 	bne.w	80051f6 <LCD_Font.constprop.2+0x1262>
 8004428:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800442c:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800442e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004430:	2b00      	cmp	r3, #0
 8004432:	f040 86e6 	bne.w	8005202 <LCD_Font.constprop.2+0x126e>
 8004436:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800443a:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800443c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800443e:	2b00      	cmp	r3, #0
 8004440:	f040 86e5 	bne.w	800520e <LCD_Font.constprop.2+0x127a>
 8004444:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004448:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800444c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800444e:	2b00      	cmp	r3, #0
 8004450:	f040 86e4 	bne.w	800521c <LCD_Font.constprop.2+0x1288>
 8004454:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004458:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800445c:	2502      	movs	r5, #2
 800445e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004462:	f8cb 6010 	str.w	r6, [fp, #16]
 8004466:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 800446a:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800446e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004472:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004476:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800447a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800447e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004482:	f8cb 3010 	str.w	r3, [fp, #16]
 8004486:	f8cb 0010 	str.w	r0, [fp, #16]
 800448a:	613e      	str	r6, [r7, #16]
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	f8c8 1010 	str.w	r1, [r8, #16]
 8004492:	f8c8 2010 	str.w	r2, [r8, #16]
 8004496:	f8c8 6010 	str.w	r6, [r8, #16]
 800449a:	f8c8 3010 	str.w	r3, [r8, #16]
 800449e:	f8c8 4010 	str.w	r4, [r8, #16]
 80044a2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80044a6:	f04f 0c10 	mov.w	ip, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044aa:	f8c8 4010 	str.w	r4, [r8, #16]
 80044ae:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80044b2:	613a      	str	r2, [r7, #16]
 80044b4:	6139      	str	r1, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80044b6:	f8c7 c010 	str.w	ip, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044ba:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80044bc:	2440      	movs	r4, #64	; 0x40
 80044be:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044c0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 80044c4:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80044c6:	f8c8 c010 	str.w	ip, [r8, #16]
 80044ca:	f04f 0c20 	mov.w	ip, #32
 80044ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80044d2:	f8c8 c010 	str.w	ip, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044d6:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80044da:	f8cb 5010 	str.w	r5, [fp, #16]
 80044de:	2501      	movs	r5, #1
 80044e0:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044e4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 80044e8:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044ec:	f8cb 0010 	str.w	r0, [fp, #16]
 80044f0:	613e      	str	r6, [r7, #16]
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	f8c8 1010 	str.w	r1, [r8, #16]
 80044f8:	f8c8 2010 	str.w	r2, [r8, #16]
 80044fc:	f8c8 6010 	str.w	r6, [r8, #16]
 8004500:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004504:	ea5f 33da 	movs.w	r3, sl, lsr #15
 8004508:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800450c:	bf18      	it	ne
 800450e:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004510:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8004514:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004518:	bf14      	ite	ne
 800451a:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800451c:	613a      	streq	r2, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800451e:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
 8004522:	bf0c      	ite	eq
 8004524:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004528:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800452a:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 800452e:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004530:	bf0c      	ite	eq
 8004532:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004536:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004538:	f41a 5f80 	tst.w	sl, #4096	; 0x1000
 800453c:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800453e:	bf0c      	ite	eq
 8004540:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004544:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004546:	f41a 6f00 	tst.w	sl, #2048	; 0x800
 800454a:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800454c:	bf0c      	ite	eq
 800454e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004552:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004554:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8004558:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800455a:	bf0c      	ite	eq
 800455c:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004560:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004562:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8004566:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004568:	bf0c      	ite	eq
 800456a:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800456e:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004570:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004574:	f8c8 3010 	str.w	r3, [r8, #16]
 8004578:	f04f 0202 	mov.w	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800457c:	bf0c      	ite	eq
 800457e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004582:	2320      	movne	r3, #32
 8004584:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004588:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800458c:	f8cb 2010 	str.w	r2, [fp, #16]
 8004590:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004594:	f8cb 2010 	str.w	r2, [fp, #16]
 8004598:	2201      	movs	r2, #1
 800459a:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800459e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80045a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045a6:	f8cb 2010 	str.w	r2, [fp, #16]
 80045aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80045ae:	613e      	str	r6, [r7, #16]
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	f8c8 2010 	str.w	r2, [r8, #16]
 80045b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80045ba:	f01a 0f80 	tst.w	sl, #128	; 0x80
 80045be:	f8c8 2010 	str.w	r2, [r8, #16]
 80045c2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80045c6:	f8c8 6010 	str.w	r6, [r8, #16]
 80045ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80045ce:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80045d2:	bf18      	it	ne
 80045d4:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045d6:	f8c8 0010 	str.w	r0, [r8, #16]
 80045da:	f8c8 1010 	str.w	r1, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80045de:	bf14      	ite	ne
 80045e0:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045e2:	613a      	streq	r2, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80045e4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80045e8:	bf0c      	ite	eq
 80045ea:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80045ee:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80045f0:	f01a 0f20 	tst.w	sl, #32
 80045f4:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045f6:	bf0c      	ite	eq
 80045f8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80045fc:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80045fe:	f01a 0f10 	tst.w	sl, #16
 8004602:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004604:	bf0c      	ite	eq
 8004606:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800460a:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800460c:	f01a 0f08 	tst.w	sl, #8
 8004610:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004612:	bf0c      	ite	eq
 8004614:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004618:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800461a:	f01a 0f04 	tst.w	sl, #4
 800461e:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004620:	bf0c      	ite	eq
 8004622:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004626:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004628:	f01a 0f02 	tst.w	sl, #2
 800462c:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800462e:	bf0c      	ite	eq
 8004630:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004634:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004636:	f01a 0f01 	tst.w	sl, #1
 800463a:	f8c8 3010 	str.w	r3, [r8, #16]
 800463e:	f04f 0202 	mov.w	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004642:	bf0c      	ite	eq
 8004644:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004648:	2320      	movne	r3, #32
 800464a:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800464e:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004652:	f8cb 2010 	str.w	r2, [fp, #16]
 8004656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800465a:	f8cb 2010 	str.w	r2, [fp, #16]
 800465e:	2201      	movs	r2, #1
 8004660:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004664:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800466c:	f8cb 2010 	str.w	r2, [fp, #16]
 8004670:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004674:	613e      	str	r6, [r7, #16]
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	f8c8 2010 	str.w	r2, [r8, #16]
 800467c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004680:	f8c8 2010 	str.w	r2, [r8, #16]
 8004684:	f8c8 6010 	str.w	r6, [r8, #16]
 8004688:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800468c:	ea5f 33d9 	movs.w	r3, r9, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8004690:	bf18      	it	ne
 8004692:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004694:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004698:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800469c:	f8c8 0010 	str.w	r0, [r8, #16]
 80046a0:	f8c8 1010 	str.w	r1, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80046a4:	bf14      	ite	ne
 80046a6:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046a8:	613a      	streq	r2, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80046aa:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 80046ae:	bf0c      	ite	eq
 80046b0:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80046b4:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80046b6:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 80046ba:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046bc:	bf0c      	ite	eq
 80046be:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80046c2:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80046c4:	f419 5f80 	tst.w	r9, #4096	; 0x1000
 80046c8:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046ca:	bf0c      	ite	eq
 80046cc:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80046d0:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80046d2:	f419 6f00 	tst.w	r9, #2048	; 0x800
 80046d6:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046d8:	bf0c      	ite	eq
 80046da:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80046de:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80046e0:	f419 6f80 	tst.w	r9, #1024	; 0x400
 80046e4:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046e6:	bf0c      	ite	eq
 80046e8:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80046ec:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80046ee:	f419 7f00 	tst.w	r9, #512	; 0x200
 80046f2:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046f4:	bf0c      	ite	eq
 80046f6:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80046fa:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80046fc:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004700:	f8c8 3010 	str.w	r3, [r8, #16]
 8004704:	f04f 0202 	mov.w	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004708:	bf0c      	ite	eq
 800470a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800470e:	2320      	movne	r3, #32
 8004710:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004714:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004718:	f8cb 2010 	str.w	r2, [fp, #16]
 800471c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004720:	f8cb 2010 	str.w	r2, [fp, #16]
 8004724:	2201      	movs	r2, #1
 8004726:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800472a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800472e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004732:	f8cb 2010 	str.w	r2, [fp, #16]
 8004736:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800473a:	613e      	str	r6, [r7, #16]
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	f8c8 2010 	str.w	r2, [r8, #16]
 8004742:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004746:	f019 0f80 	tst.w	r9, #128	; 0x80
 800474a:	f8c8 2010 	str.w	r2, [r8, #16]
 800474e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004752:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004756:	f8c8 6010 	str.w	r6, [r8, #16]
 800475a:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800475e:	bf18      	it	ne
 8004760:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004762:	f8c8 0010 	str.w	r0, [r8, #16]
 8004766:	f8c8 1010 	str.w	r1, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800476a:	bf14      	ite	ne
 800476c:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800476e:	613a      	streq	r2, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004770:	f019 0f40 	tst.w	r9, #64	; 0x40
 8004774:	bf0c      	ite	eq
 8004776:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800477a:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800477c:	f019 0f20 	tst.w	r9, #32
 8004780:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004782:	bf0c      	ite	eq
 8004784:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004788:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800478a:	f019 0f10 	tst.w	r9, #16
 800478e:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004790:	bf0c      	ite	eq
 8004792:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004796:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004798:	f019 0f08 	tst.w	r9, #8
 800479c:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800479e:	bf0c      	ite	eq
 80047a0:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80047a4:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80047a6:	f019 0f04 	tst.w	r9, #4
 80047aa:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047ac:	bf0c      	ite	eq
 80047ae:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80047b2:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80047b4:	f019 0f02 	tst.w	r9, #2
 80047b8:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047ba:	bf0c      	ite	eq
 80047bc:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80047c0:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80047c2:	f019 0f01 	tst.w	r9, #1
 80047c6:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047ca:	bf0c      	ite	eq
 80047cc:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80047d0:	2320      	movne	r3, #32
 80047d2:	f04f 0902 	mov.w	r9, #2
 80047d6:	f8c8 3010 	str.w	r3, [r8, #16]
 80047da:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047e2:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 80047e6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80047ea:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80047ee:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80047f2:	f8cb 9010 	str.w	r9, [fp, #16]
 80047f6:	f8cb a010 	str.w	sl, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047fa:	f8cb 3010 	str.w	r3, [fp, #16]
 80047fe:	f8cb 0010 	str.w	r0, [fp, #16]
 8004802:	613e      	str	r6, [r7, #16]
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	f8c8 4010 	str.w	r4, [r8, #16]
 800480a:	f8c8 1010 	str.w	r1, [r8, #16]
 800480e:	f8c8 6010 	str.w	r6, [r8, #16]
 8004812:	f8c8 3010 	str.w	r3, [r8, #16]
 8004816:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800481a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 800481e:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004822:	2310      	movs	r3, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004824:	f8c8 5010 	str.w	r5, [r8, #16]
 8004828:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800482c:	6139      	str	r1, [r7, #16]
 800482e:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	2340      	movs	r3, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004834:	613a      	str	r2, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	2380      	movs	r3, #128	; 0x80
 800483a:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800483c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8004840:	f04f 0c00 	mov.w	ip, #0
 8004844:	f8c8 3010 	str.w	r3, [r8, #16]
 8004848:	f8c8 2010 	str.w	r2, [r8, #16]
 800484c:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004850:	f8cb 9010 	str.w	r9, [fp, #16]
 8004854:	f8cb a010 	str.w	sl, [fp, #16]
 8004858:	f8cd e00c 	str.w	lr, [sp, #12]
 800485c:	2301      	movs	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800485e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004862:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004866:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800486a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800486e:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8004872:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 8004876:	f8cb 3010 	str.w	r3, [fp, #16]
 800487a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800487e:	613e      	str	r6, [r7, #16]
 8004880:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004884:	6138      	str	r0, [r7, #16]
 8004886:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
 800488a:	f8c8 4010 	str.w	r4, [r8, #16]
 800488e:	f8c8 1010 	str.w	r1, [r8, #16]
 8004892:	f8c8 6010 	str.w	r6, [r8, #16]
 8004896:	f8c8 0010 	str.w	r0, [r8, #16]
 800489a:	f8c8 a010 	str.w	sl, [r8, #16]
 800489e:	f8c8 9010 	str.w	r9, [r8, #16]
 80048a2:	6139      	str	r1, [r7, #16]
 80048a4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80048a8:	613c      	str	r4, [r7, #16]
 80048aa:	613a      	str	r2, [r7, #16]
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	613d      	str	r5, [r7, #16]
 80048b0:	6139      	str	r1, [r7, #16]
 80048b2:	f8c8 2010 	str.w	r2, [r8, #16]
 80048b6:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80048ba:	2302      	movs	r3, #2
 80048bc:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048c0:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80048c4:	f8cb 3010 	str.w	r3, [fp, #16]
 80048c8:	9b03      	ldr	r3, [sp, #12]
 80048ca:	f10c 0c01 	add.w	ip, ip, #1
 80048ce:	4563      	cmp	r3, ip
 80048d0:	f8cb e010 	str.w	lr, [fp, #16]
 80048d4:	d1c2      	bne.n	800485c <LCD_Font.constprop.2+0x8c8>
 80048d6:	f7ff bbc3 	b.w	8004060 <LCD_Font.constprop.2+0xcc>
		if (set_pixels > 0)
 80048da:	4672      	mov	r2, lr
 80048dc:	f8cd e000 	str.w	lr, [sp]
 80048e0:	b98a      	cbnz	r2, 8004906 <LCD_Font.constprop.2+0x972>
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80048e2:	9b06      	ldr	r3, [sp, #24]
 80048e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80048e6:	3301      	adds	r3, #1
 80048e8:	9306      	str	r3, [sp, #24]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	429a      	cmp	r2, r3
 80048ee:	f63f ab87 	bhi.w	8004000 <LCD_Font.constprop.2+0x6c>
			cursor_x += glyph.xAdvance * size;
 80048f2:	f89d 4074 	ldrb.w	r4, [sp, #116]	; 0x74
 80048f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80048f8:	9816      	ldr	r0, [sp, #88]	; 0x58
			cursor_x += glyph.xAdvance * size;
 80048fa:	4423      	add	r3, r4
 80048fc:	b21c      	sxth	r4, r3
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80048fe:	f000 fd8f 	bl	8005420 <strlen>
 8004902:	f7ff bbb7 	b.w	8004074 <LCD_Font.constprop.2+0xe0>
 8004906:	460e      	mov	r6, r1
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004908:	f99d 2075 	ldrsb.w	r2, [sp, #117]	; 0x75
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800490c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004910:	4432      	add	r2, r6
 8004912:	9e00      	ldr	r6, [sp, #0]
 8004914:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004918:	1b92      	subs	r2, r2, r6
 800491a:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800491c:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8004920:	4432      	add	r2, r6
 8004922:	fa1f fa82 	uxth.w	sl, r2
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8004926:	4453      	add	r3, sl
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004928:	f99d 2076 	ldrsb.w	r2, [sp, #118]	; 0x76
	LCD_Window(y, x, y + h - 1, x + w - 1);
 800492c:	fa1f f983 	uxth.w	r9, r3
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004930:	9b06      	ldr	r3, [sp, #24]
 8004932:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8004936:	441a      	add	r2, r3
 8004938:	9b08      	ldr	r3, [sp, #32]
 800493a:	f8cb 1010 	str.w	r1, [fp, #16]
 800493e:	441a      	add	r2, r3
 8004940:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004944:	f8cb 3010 	str.w	r3, [fp, #16]
 8004948:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800494c:	6138      	str	r0, [r7, #16]
 800494e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8004952:	6139      	str	r1, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004954:	f04f 0e10 	mov.w	lr, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004958:	f8c8 5010 	str.w	r5, [r8, #16]
 800495c:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 8004960:	f8c8 4010 	str.w	r4, [r8, #16]
 8004964:	f8c8 0010 	str.w	r0, [r8, #16]
 8004968:	f8c8 1010 	str.w	r1, [r8, #16]
 800496c:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004970:	2340      	movs	r3, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004972:	f8c8 6010 	str.w	r6, [r8, #16]
 8004976:	613c      	str	r4, [r7, #16]
 8004978:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 800497a:	f8c7 e010 	str.w	lr, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800497e:	f8c7 c010 	str.w	ip, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004982:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004984:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004988:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 800498a:	2302      	movs	r3, #2
 800498c:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004990:	f8c8 c010 	str.w	ip, [r8, #16]
 8004994:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004998:	f8cb 3010 	str.w	r3, [fp, #16]
 800499c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049a0:	f8cb 3010 	str.w	r3, [fp, #16]
 80049a4:	2301      	movs	r3, #1
 80049a6:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80049ae:	f8cb 3010 	str.w	r3, [fp, #16]
 80049b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049b6:	6138      	str	r0, [r7, #16]
 80049b8:	6139      	str	r1, [r7, #16]
 80049ba:	f8c8 5010 	str.w	r5, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80049be:	0415      	lsls	r5, r2, #16
 80049c0:	f8c8 4010 	str.w	r4, [r8, #16]
 80049c4:	f8c8 0010 	str.w	r0, [r8, #16]
 80049c8:	f8c8 1010 	str.w	r1, [r8, #16]
 80049cc:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 80049d0:	f8c8 3010 	str.w	r3, [r8, #16]
	data[0] = x1 >> 8;
 80049d4:	f3c2 2107 	ubfx	r1, r2, #8, #8
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80049d8:	b293      	uxth	r3, r2
    GPIOx->BSRR = GPIO_Pin;
 80049da:	bf48      	it	mi
 80049dc:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049de:	f8c8 6010 	str.w	r6, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80049e2:	900f      	str	r0, [sp, #60]	; 0x3c
 80049e4:	bf54      	ite	pl
 80049e6:	613c      	strpl	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80049e8:	613a      	strmi	r2, [r7, #16]
 80049ea:	f3c3 3280 	ubfx	r2, r3, #14, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80049ee:	0458      	lsls	r0, r3, #17
 80049f0:	9219      	str	r2, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049f2:	bf54      	ite	pl
 80049f4:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80049f8:	2208      	movmi	r2, #8
 80049fa:	613a      	str	r2, [r7, #16]
 80049fc:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8004a00:	9214      	str	r2, [sp, #80]	; 0x50
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004a02:	049a      	lsls	r2, r3, #18
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a04:	bf54      	ite	pl
 8004a06:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004a0a:	2210      	movmi	r2, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004a0c:	04de      	lsls	r6, r3, #19
 8004a0e:	613a      	str	r2, [r7, #16]
 8004a10:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8004a14:	920e      	str	r2, [sp, #56]	; 0x38
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a16:	bf54      	ite	pl
 8004a18:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004a1c:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004a1e:	051d      	lsls	r5, r3, #20
 8004a20:	613a      	str	r2, [r7, #16]
 8004a22:	f3c3 22c0 	ubfx	r2, r3, #11, #1
 8004a26:	9213      	str	r2, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a28:	bf54      	ite	pl
 8004a2a:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004a2e:	2240      	movmi	r2, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004a30:	055c      	lsls	r4, r3, #21
 8004a32:	613a      	str	r2, [r7, #16]
 8004a34:	f3c3 2280 	ubfx	r2, r3, #10, #1
 8004a38:	920d      	str	r2, [sp, #52]	; 0x34
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a3a:	bf54      	ite	pl
 8004a3c:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004a40:	2280      	movmi	r2, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004a42:	0598      	lsls	r0, r3, #22
 8004a44:	613a      	str	r2, [r7, #16]
 8004a46:	f3c3 2240 	ubfx	r2, r3, #9, #1
 8004a4a:	9212      	str	r2, [sp, #72]	; 0x48
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a4c:	bf54      	ite	pl
 8004a4e:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004a52:	2210      	movmi	r2, #16
 8004a54:	f8c8 2010 	str.w	r2, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004a58:	f011 0201 	ands.w	r2, r1, #1
 8004a5c:	921a      	str	r2, [sp, #104]	; 0x68
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a5e:	bf0c      	ite	eq
 8004a60:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004a64:	2220      	movne	r2, #32
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004a66:	f3c3 15c0 	ubfx	r5, r3, #7, #1
 8004a6a:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a6e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8004a72:	950c      	str	r5, [sp, #48]	; 0x30
    GPIOx->BSRR = GPIO_Pin;
 8004a74:	2502      	movs	r5, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a76:	f8cb 1010 	str.w	r1, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004a7a:	f8cb 5010 	str.w	r5, [fp, #16]
 8004a7e:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a82:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8004a86:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a8a:	f44f 2480 	mov.w	r4, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004a8e:	2501      	movs	r5, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a90:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8004a94:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004a98:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a9c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004aa0:	f8cb e010 	str.w	lr, [fp, #16]
 8004aa4:	6139      	str	r1, [r7, #16]
 8004aa6:	6138      	str	r0, [r7, #16]
 8004aa8:	f8c8 c010 	str.w	ip, [r8, #16]
 8004aac:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ab0:	f8c8 1010 	str.w	r1, [r8, #16]
 8004ab4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004ab8:	f8c8 0010 	str.w	r0, [r8, #16]
 8004abc:	f8c8 6010 	str.w	r6, [r8, #16]
 8004ac0:	f8c8 1010 	str.w	r1, [r8, #16]
 8004ac4:	0619      	lsls	r1, r3, #24
    GPIOx->BSRR = GPIO_Pin;
 8004ac6:	bf48      	it	mi
 8004ac8:	2104      	movmi	r1, #4
 8004aca:	b2da      	uxtb	r2, r3
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004acc:	bf54      	ite	pl
 8004ace:	613c      	strpl	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004ad0:	6139      	strmi	r1, [r7, #16]
 8004ad2:	f3c2 1180 	ubfx	r1, r2, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004ad6:	0656      	lsls	r6, r2, #25
 8004ad8:	9111      	str	r1, [sp, #68]	; 0x44
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ada:	bf54      	ite	pl
 8004adc:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004ae0:	2108      	movmi	r1, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004ae2:	0695      	lsls	r5, r2, #26
 8004ae4:	6139      	str	r1, [r7, #16]
 8004ae6:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8004aea:	910b      	str	r1, [sp, #44]	; 0x2c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004aec:	bf54      	ite	pl
 8004aee:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004af2:	2110      	movmi	r1, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004af4:	06d4      	lsls	r4, r2, #27
 8004af6:	6139      	str	r1, [r7, #16]
 8004af8:	f3c2 1100 	ubfx	r1, r2, #4, #1
 8004afc:	9110      	str	r1, [sp, #64]	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004afe:	bf54      	ite	pl
 8004b00:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004b04:	2120      	movmi	r1, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004b06:	0710      	lsls	r0, r2, #28
 8004b08:	6139      	str	r1, [r7, #16]
 8004b0a:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 8004b0e:	910a      	str	r1, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b10:	bf54      	ite	pl
 8004b12:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004b16:	2140      	movmi	r1, #64	; 0x40
 8004b18:	6139      	str	r1, [r7, #16]
 8004b1a:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8004b1e:	911b      	str	r1, [sp, #108]	; 0x6c
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004b20:	0751      	lsls	r1, r2, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b22:	bf54      	ite	pl
 8004b24:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004b28:	2180      	movmi	r1, #128	; 0x80
 8004b2a:	6139      	str	r1, [r7, #16]
 8004b2c:	f3c2 0140 	ubfx	r1, r2, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004b30:	0792      	lsls	r2, r2, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b32:	bf54      	ite	pl
 8004b34:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004b38:	2210      	movmi	r2, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004b3a:	f013 0301 	ands.w	r3, r3, #1
 8004b3e:	9109      	str	r1, [sp, #36]	; 0x24
 8004b40:	f8c8 2010 	str.w	r2, [r8, #16]
 8004b44:	9303      	str	r3, [sp, #12]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b46:	bf0c      	ite	eq
 8004b48:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004b4c:	2320      	movne	r3, #32
 8004b4e:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8004b52:	f8c8 3010 	str.w	r3, [r8, #16]
 8004b56:	f04f 0e02 	mov.w	lr, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004b62:	f8cb 3010 	str.w	r3, [fp, #16]
 8004b66:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8004b6a:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b6e:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004b72:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b76:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004b7a:	f04f 0c01 	mov.w	ip, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b7e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004b82:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8004b86:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b8a:	f8cb 6010 	str.w	r6, [fp, #16]
 8004b8e:	613b      	str	r3, [r7, #16]
 8004b90:	613a      	str	r2, [r7, #16]
 8004b92:	f8c8 5010 	str.w	r5, [r8, #16]
 8004b96:	f8c8 1010 	str.w	r1, [r8, #16]
 8004b9a:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004b9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ba0:	f8c8 2010 	str.w	r2, [r8, #16]
 8004ba4:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ba8:	f8c8 0010 	str.w	r0, [r8, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 836d 	beq.w	800528c <LCD_Font.constprop.2+0x12f8>
    GPIOx->BSRR = GPIO_Pin;
 8004bb2:	2304      	movs	r3, #4
 8004bb4:	613b      	str	r3, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004bb6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f040 8364 	bne.w	8005286 <LCD_Font.constprop.2+0x12f2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004bbe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004bc2:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004bc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f040 835a 	bne.w	8005280 <LCD_Font.constprop.2+0x12ec>
 8004bcc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004bd0:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004bd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f040 8350 	bne.w	800527a <LCD_Font.constprop.2+0x12e6>
 8004bda:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004bde:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004be0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f040 8346 	bne.w	8005274 <LCD_Font.constprop.2+0x12e0>
 8004be8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bec:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004bee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f040 833c 	bne.w	800526e <LCD_Font.constprop.2+0x12da>
 8004bf6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004bfa:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004bfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f040 8331 	bne.w	8005266 <LCD_Font.constprop.2+0x12d2>
 8004c04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004c08:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004c0c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f040 8325 	bne.w	800525e <LCD_Font.constprop.2+0x12ca>
 8004c14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c18:	f8c8 3010 	str.w	r3, [r8, #16]
 8004c1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8004c20:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8004c24:	f04f 0e02 	mov.w	lr, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c28:	f8cb 3010 	str.w	r3, [fp, #16]
 8004c2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8004c30:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c34:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8004c38:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c3c:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8004c40:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004c44:	f04f 0c01 	mov.w	ip, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c48:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004c4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8004c50:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c54:	f8cb 6010 	str.w	r6, [fp, #16]
 8004c58:	613b      	str	r3, [r7, #16]
 8004c5a:	613a      	str	r2, [r7, #16]
 8004c5c:	f8c8 5010 	str.w	r5, [r8, #16]
 8004c60:	f8c8 1010 	str.w	r1, [r8, #16]
 8004c64:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004c68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c6a:	f8c8 2010 	str.w	r2, [r8, #16]
 8004c6e:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c72:	f8c8 0010 	str.w	r0, [r8, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 82ef 	beq.w	800525a <LCD_Font.constprop.2+0x12c6>
    GPIOx->BSRR = GPIO_Pin;
 8004c7c:	2304      	movs	r3, #4
 8004c7e:	613b      	str	r3, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004c80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f040 82e6 	bne.w	8005254 <LCD_Font.constprop.2+0x12c0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004c8c:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004c8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f040 82dc 	bne.w	800524e <LCD_Font.constprop.2+0x12ba>
 8004c96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004c9a:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004c9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f040 82d2 	bne.w	8005248 <LCD_Font.constprop.2+0x12b4>
 8004ca4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ca8:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f040 82c8 	bne.w	8005242 <LCD_Font.constprop.2+0x12ae>
 8004cb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004cb6:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004cb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f040 82be 	bne.w	800523c <LCD_Font.constprop.2+0x12a8>
 8004cc0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004cc4:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f040 82b3 	bne.w	8005234 <LCD_Font.constprop.2+0x12a0>
 8004cce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004cd2:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004cd6:	9b03      	ldr	r3, [sp, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f040 82a7 	bne.w	800522c <LCD_Font.constprop.2+0x1298>
 8004cde:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ce2:	f8c8 3010 	str.w	r3, [r8, #16]
 8004ce6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8004cea:	2602      	movs	r6, #2
 8004cec:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cf0:	f8cb 3010 	str.w	r3, [fp, #16]
 8004cf4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8004cf8:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cfc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004d00:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d04:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004d08:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8004d0c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8004d10:	f8cb 2010 	str.w	r2, [fp, #16]
 8004d14:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 8004d18:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004d1c:	f04f 0c10 	mov.w	ip, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	613a      	str	r2, [r7, #16]
 8004d24:	f8c8 0010 	str.w	r0, [r8, #16]
 8004d28:	f8c8 1010 	str.w	r1, [r8, #16]
 8004d2c:	f8c8 3010 	str.w	r3, [r8, #16]
 8004d30:	f8c8 2010 	str.w	r2, [r8, #16]
 8004d34:	f8c8 5010 	str.w	r5, [r8, #16]
 8004d38:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
 8004d3c:	f8c8 e010 	str.w	lr, [r8, #16]
 8004d40:	6139      	str	r1, [r7, #16]
 8004d42:	6138      	str	r0, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004d44:	f8c7 c010 	str.w	ip, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d48:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004d4a:	2540      	movs	r5, #64	; 0x40
 8004d4c:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d4e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
 8004d52:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004d54:	f8c8 c010 	str.w	ip, [r8, #16]
 8004d58:	f04f 0c20 	mov.w	ip, #32
 8004d5c:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8004d60:	f8c8 c010 	str.w	ip, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d64:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004d68:	f8cb 6010 	str.w	r6, [fp, #16]
 8004d6c:	2601      	movs	r6, #1
 8004d6e:	f8cb 5010 	str.w	r5, [fp, #16]
 8004d72:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d76:	f8cb 4010 	str.w	r4, [fp, #16]
 8004d7a:	613b      	str	r3, [r7, #16]
 8004d7c:	613a      	str	r2, [r7, #16]
 8004d7e:	f8c8 0010 	str.w	r0, [r8, #16]
 8004d82:	f8c8 1010 	str.w	r1, [r8, #16]
 8004d86:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004d8a:	ea5f 33da 	movs.w	r3, sl, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8004d8e:	bf18      	it	ne
 8004d90:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d92:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8004d96:	f8c8 2010 	str.w	r2, [r8, #16]
 8004d9a:	f8c8 5010 	str.w	r5, [r8, #16]
 8004d9e:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004da2:	bf14      	ite	ne
 8004da4:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004da6:	6139      	streq	r1, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004da8:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
 8004dac:	bf0c      	ite	eq
 8004dae:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004db2:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004db4:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8004db8:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004dba:	bf0c      	ite	eq
 8004dbc:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004dc0:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004dc2:	f41a 5f80 	tst.w	sl, #4096	; 0x1000
 8004dc6:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004dc8:	bf0c      	ite	eq
 8004dca:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004dce:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004dd0:	f41a 6f00 	tst.w	sl, #2048	; 0x800
 8004dd4:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004dd6:	bf0c      	ite	eq
 8004dd8:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004ddc:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004dde:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8004de2:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004de4:	bf0c      	ite	eq
 8004de6:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004dea:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004dec:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8004df0:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004df2:	bf0c      	ite	eq
 8004df4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004df8:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004dfa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004dfe:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e02:	bf0c      	ite	eq
 8004e04:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004e08:	2320      	movne	r3, #32
 8004e0a:	f04f 0e02 	mov.w	lr, #2
 8004e0e:	f8c8 3010 	str.w	r3, [r8, #16]
 8004e12:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e1e:	f8cb 3010 	str.w	r3, [fp, #16]
 8004e22:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004e26:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e2a:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8004e2e:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e32:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004e36:	f04f 0c01 	mov.w	ip, #1
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004e3a:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8004e3e:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e42:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004e46:	f8cb 6010 	str.w	r6, [fp, #16]
 8004e4a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	613a      	str	r2, [r7, #16]
 8004e52:	f8c8 5010 	str.w	r5, [r8, #16]
 8004e56:	f8c8 1010 	str.w	r1, [r8, #16]
 8004e5a:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004e5e:	bf18      	it	ne
 8004e60:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e62:	f8c8 2010 	str.w	r2, [r8, #16]
 8004e66:	f8c8 4010 	str.w	r4, [r8, #16]
 8004e6a:	f8c8 0010 	str.w	r0, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004e6e:	bf14      	ite	ne
 8004e70:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e72:	6139      	streq	r1, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004e74:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8004e78:	bf0c      	ite	eq
 8004e7a:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004e7e:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004e80:	f01a 0f20 	tst.w	sl, #32
 8004e84:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e86:	bf0c      	ite	eq
 8004e88:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004e8c:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004e8e:	f01a 0f10 	tst.w	sl, #16
 8004e92:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e94:	bf0c      	ite	eq
 8004e96:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004e9a:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004e9c:	f01a 0f08 	tst.w	sl, #8
 8004ea0:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ea2:	bf0c      	ite	eq
 8004ea4:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004ea8:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004eaa:	f01a 0f04 	tst.w	sl, #4
 8004eae:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004eb0:	bf0c      	ite	eq
 8004eb2:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004eb6:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004eb8:	f01a 0f02 	tst.w	sl, #2
 8004ebc:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ebe:	bf0c      	ite	eq
 8004ec0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004ec4:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004ec6:	f01a 0f01 	tst.w	sl, #1
 8004eca:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ece:	bf0c      	ite	eq
 8004ed0:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004ed4:	2320      	movne	r3, #32
 8004ed6:	f04f 0e02 	mov.w	lr, #2
 8004eda:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8004ede:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ee2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ee6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004eea:	f8cb 3010 	str.w	r3, [fp, #16]
 8004eee:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004ef2:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ef6:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8004efa:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004efe:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004f02:	f04f 0c01 	mov.w	ip, #1
 8004f06:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f0a:	f8cb 6010 	str.w	r6, [fp, #16]
 8004f0e:	613b      	str	r3, [r7, #16]
 8004f10:	613a      	str	r2, [r7, #16]
 8004f12:	f8c8 5010 	str.w	r5, [r8, #16]
 8004f16:	f8c8 1010 	str.w	r1, [r8, #16]
 8004f1a:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004f1e:	ea5f 33d9 	movs.w	r3, r9, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8004f22:	bf18      	it	ne
 8004f24:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f26:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004f2a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004f2e:	f8c8 2010 	str.w	r2, [r8, #16]
 8004f32:	f8c8 4010 	str.w	r4, [r8, #16]
 8004f36:	f8c8 0010 	str.w	r0, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004f3a:	bf14      	ite	ne
 8004f3c:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f3e:	6139      	streq	r1, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004f40:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8004f44:	bf0c      	ite	eq
 8004f46:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004f4a:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004f4c:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8004f50:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f52:	bf0c      	ite	eq
 8004f54:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004f58:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004f5a:	f419 5f80 	tst.w	r9, #4096	; 0x1000
 8004f5e:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f60:	bf0c      	ite	eq
 8004f62:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004f66:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004f68:	f419 6f00 	tst.w	r9, #2048	; 0x800
 8004f6c:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f6e:	bf0c      	ite	eq
 8004f70:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004f74:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004f76:	f419 6f80 	tst.w	r9, #1024	; 0x400
 8004f7a:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f7c:	bf0c      	ite	eq
 8004f7e:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004f82:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004f84:	f419 7f00 	tst.w	r9, #512	; 0x200
 8004f88:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f8a:	bf0c      	ite	eq
 8004f8c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004f90:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004f92:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004f96:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f9a:	bf0c      	ite	eq
 8004f9c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004fa0:	2320      	movne	r3, #32
 8004fa2:	f04f 0e02 	mov.w	lr, #2
 8004fa6:	f8c8 3010 	str.w	r3, [r8, #16]
 8004faa:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004fb6:	f8cb 3010 	str.w	r3, [fp, #16]
 8004fba:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004fbe:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fc2:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8004fc6:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fca:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004fce:	f04f 0c01 	mov.w	ip, #1
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004fd2:	f019 0f80 	tst.w	r9, #128	; 0x80
 8004fd6:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fda:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004fde:	f8cb 6010 	str.w	r6, [fp, #16]
 8004fe2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	613a      	str	r2, [r7, #16]
 8004fea:	f8c8 5010 	str.w	r5, [r8, #16]
 8004fee:	f8c8 1010 	str.w	r1, [r8, #16]
 8004ff2:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004ff6:	bf18      	it	ne
 8004ff8:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ffa:	f8c8 2010 	str.w	r2, [r8, #16]
 8004ffe:	f8c8 4010 	str.w	r4, [r8, #16]
 8005002:	f8c8 0010 	str.w	r0, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005006:	bf14      	ite	ne
 8005008:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800500a:	6139      	streq	r1, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800500c:	f019 0f40 	tst.w	r9, #64	; 0x40
 8005010:	bf0c      	ite	eq
 8005012:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8005016:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8005018:	f019 0f20 	tst.w	r9, #32
 800501c:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800501e:	bf0c      	ite	eq
 8005020:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8005024:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8005026:	f019 0f10 	tst.w	r9, #16
 800502a:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800502c:	bf0c      	ite	eq
 800502e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8005032:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8005034:	f019 0f08 	tst.w	r9, #8
 8005038:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800503a:	bf0c      	ite	eq
 800503c:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8005040:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8005042:	f019 0f04 	tst.w	r9, #4
 8005046:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005048:	bf0c      	ite	eq
 800504a:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800504e:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8005050:	f019 0f02 	tst.w	r9, #2
 8005054:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005056:	bf0c      	ite	eq
 8005058:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800505c:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800505e:	f019 0f01 	tst.w	r9, #1
 8005062:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005066:	bf0c      	ite	eq
 8005068:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800506c:	2320      	movne	r3, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800506e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8005072:	f8c8 3010 	str.w	r3, [r8, #16]
 8005076:	f04f 0902 	mov.w	r9, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800507a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 800507e:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005082:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8005086:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800508a:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 800508e:	f8cb 3010 	str.w	r3, [fp, #16]
 8005092:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8005096:	f8cb 9010 	str.w	r9, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800509a:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 800509e:	f8cb a010 	str.w	sl, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050a2:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 80050a6:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80050aa:	2610      	movs	r6, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050ac:	f8cb 4010 	str.w	r4, [fp, #16]
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	613a      	str	r2, [r7, #16]
 80050b4:	f8c8 5010 	str.w	r5, [r8, #16]
 80050b8:	f8c8 0010 	str.w	r0, [r8, #16]
 80050bc:	f8c8 3010 	str.w	r3, [r8, #16]
 80050c0:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80050c4:	2240      	movs	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050c6:	f8c8 e010 	str.w	lr, [r8, #16]
 80050ca:	f8c8 c010 	str.w	ip, [r8, #16]
 80050ce:	6138      	str	r0, [r7, #16]
 80050d0:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80050d2:	613e      	str	r6, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050d4:	6139      	str	r1, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80050d6:	613a      	str	r2, [r7, #16]
 80050d8:	2280      	movs	r2, #128	; 0x80
 80050da:	613a      	str	r2, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80050e0:	f04f 0c00 	mov.w	ip, #0
 80050e4:	f8c8 2010 	str.w	r2, [r8, #16]
 80050e8:	f8c8 1010 	str.w	r1, [r8, #16]
 80050ec:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80050f0:	f8cb 9010 	str.w	r9, [fp, #16]
 80050f4:	f8cb a010 	str.w	sl, [fp, #16]
 80050f8:	2201      	movs	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050fa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80050fe:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005102:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8005106:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800510a:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800510e:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 8005112:	f8cb 2010 	str.w	r2, [fp, #16]
 8005116:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800511a:	613b      	str	r3, [r7, #16]
 800511c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005120:	613c      	str	r4, [r7, #16]
 8005122:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 8005126:	f8c8 5010 	str.w	r5, [r8, #16]
 800512a:	f8c8 0010 	str.w	r0, [r8, #16]
 800512e:	f8c8 3010 	str.w	r3, [r8, #16]
 8005132:	f8c8 4010 	str.w	r4, [r8, #16]
 8005136:	f8c8 9010 	str.w	r9, [r8, #16]
 800513a:	f8c8 e010 	str.w	lr, [r8, #16]
 800513e:	6138      	str	r0, [r7, #16]
 8005140:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005144:	613d      	str	r5, [r7, #16]
 8005146:	6139      	str	r1, [r7, #16]
 8005148:	613a      	str	r2, [r7, #16]
 800514a:	613e      	str	r6, [r7, #16]
 800514c:	6138      	str	r0, [r7, #16]
 800514e:	f8c8 1010 	str.w	r1, [r8, #16]
 8005152:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005156:	2202      	movs	r2, #2
 8005158:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800515c:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005160:	f8cb 2010 	str.w	r2, [fp, #16]
 8005164:	9a00      	ldr	r2, [sp, #0]
 8005166:	f10c 0c01 	add.w	ip, ip, #1
 800516a:	4562      	cmp	r2, ip
 800516c:	f8cb a010 	str.w	sl, [fp, #16]
 8005170:	d1c2      	bne.n	80050f8 <LCD_Font.constprop.2+0x1164>
 8005172:	f7ff bbb6 	b.w	80048e2 <LCD_Font.constprop.2+0x94e>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8005176:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005178:	613a      	str	r2, [r7, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	f43f a8e0 	beq.w	8004340 <LCD_Font.constprop.2+0x3ac>
    GPIOx->BSRR = GPIO_Pin;
 8005180:	2308      	movs	r3, #8
 8005182:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8005184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005186:	2b00      	cmp	r3, #0
 8005188:	f43f a8e1 	beq.w	800434e <LCD_Font.constprop.2+0x3ba>
 800518c:	2310      	movs	r3, #16
 800518e:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8005190:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005192:	2b00      	cmp	r3, #0
 8005194:	f43f a8e2 	beq.w	800435c <LCD_Font.constprop.2+0x3c8>
 8005198:	2320      	movs	r3, #32
 800519a:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800519c:	f1bc 0f00 	cmp.w	ip, #0
 80051a0:	f43f a8e3 	beq.w	800436a <LCD_Font.constprop.2+0x3d6>
 80051a4:	2340      	movs	r3, #64	; 0x40
 80051a6:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80051a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f43f a8e4 	beq.w	8004378 <LCD_Font.constprop.2+0x3e4>
 80051b0:	2380      	movs	r3, #128	; 0x80
 80051b2:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80051b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f43f a8e5 	beq.w	8004386 <LCD_Font.constprop.2+0x3f2>
 80051bc:	2310      	movs	r3, #16
 80051be:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80051c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f43f a8e6 	beq.w	8004396 <LCD_Font.constprop.2+0x402>
 80051ca:	2320      	movs	r3, #32
 80051cc:	f8c8 3010 	str.w	r3, [r8, #16]
 80051d0:	f7ff b8e5 	b.w	800439e <LCD_Font.constprop.2+0x40a>
 80051d4:	2308      	movs	r3, #8
 80051d6:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80051d8:	2d00      	cmp	r5, #0
 80051da:	f43f a917 	beq.w	800440c <LCD_Font.constprop.2+0x478>
 80051de:	2310      	movs	r3, #16
 80051e0:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80051e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f43f a918 	beq.w	800441a <LCD_Font.constprop.2+0x486>
 80051ea:	2320      	movs	r3, #32
 80051ec:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80051ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f43f a919 	beq.w	8004428 <LCD_Font.constprop.2+0x494>
 80051f6:	2340      	movs	r3, #64	; 0x40
 80051f8:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80051fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f43f a91a 	beq.w	8004436 <LCD_Font.constprop.2+0x4a2>
 8005202:	2380      	movs	r3, #128	; 0x80
 8005204:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8005206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005208:	2b00      	cmp	r3, #0
 800520a:	f43f a91b 	beq.w	8004444 <LCD_Font.constprop.2+0x4b0>
 800520e:	2310      	movs	r3, #16
 8005210:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8005214:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005216:	2b00      	cmp	r3, #0
 8005218:	f43f a91c 	beq.w	8004454 <LCD_Font.constprop.2+0x4c0>
 800521c:	2320      	movs	r3, #32
 800521e:	f8c8 3010 	str.w	r3, [r8, #16]
 8005222:	f7ff b91b 	b.w	800445c <LCD_Font.constprop.2+0x4c8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005226:	613a      	str	r2, [r7, #16]
 8005228:	f7ff b8e7 	b.w	80043fa <LCD_Font.constprop.2+0x466>
    GPIOx->BSRR = GPIO_Pin;
 800522c:	2320      	movs	r3, #32
 800522e:	f8c8 3010 	str.w	r3, [r8, #16]
 8005232:	e558      	b.n	8004ce6 <LCD_Font.constprop.2+0xd52>
 8005234:	2310      	movs	r3, #16
 8005236:	f8c8 3010 	str.w	r3, [r8, #16]
 800523a:	e54c      	b.n	8004cd6 <LCD_Font.constprop.2+0xd42>
 800523c:	2380      	movs	r3, #128	; 0x80
 800523e:	613b      	str	r3, [r7, #16]
 8005240:	e541      	b.n	8004cc6 <LCD_Font.constprop.2+0xd32>
 8005242:	2340      	movs	r3, #64	; 0x40
 8005244:	613b      	str	r3, [r7, #16]
 8005246:	e537      	b.n	8004cb8 <LCD_Font.constprop.2+0xd24>
 8005248:	2320      	movs	r3, #32
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	e52d      	b.n	8004caa <LCD_Font.constprop.2+0xd16>
 800524e:	2310      	movs	r3, #16
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	e523      	b.n	8004c9c <LCD_Font.constprop.2+0xd08>
 8005254:	2308      	movs	r3, #8
 8005256:	613b      	str	r3, [r7, #16]
 8005258:	e519      	b.n	8004c8e <LCD_Font.constprop.2+0xcfa>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800525a:	6139      	str	r1, [r7, #16]
 800525c:	e510      	b.n	8004c80 <LCD_Font.constprop.2+0xcec>
    GPIOx->BSRR = GPIO_Pin;
 800525e:	2320      	movs	r3, #32
 8005260:	f8c8 3010 	str.w	r3, [r8, #16]
 8005264:	e4da      	b.n	8004c1c <LCD_Font.constprop.2+0xc88>
 8005266:	2310      	movs	r3, #16
 8005268:	f8c8 3010 	str.w	r3, [r8, #16]
 800526c:	e4ce      	b.n	8004c0c <LCD_Font.constprop.2+0xc78>
 800526e:	2380      	movs	r3, #128	; 0x80
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	e4c3      	b.n	8004bfc <LCD_Font.constprop.2+0xc68>
 8005274:	2340      	movs	r3, #64	; 0x40
 8005276:	613b      	str	r3, [r7, #16]
 8005278:	e4b9      	b.n	8004bee <LCD_Font.constprop.2+0xc5a>
 800527a:	2320      	movs	r3, #32
 800527c:	613b      	str	r3, [r7, #16]
 800527e:	e4af      	b.n	8004be0 <LCD_Font.constprop.2+0xc4c>
 8005280:	2310      	movs	r3, #16
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	e4a5      	b.n	8004bd2 <LCD_Font.constprop.2+0xc3e>
 8005286:	2308      	movs	r3, #8
 8005288:	613b      	str	r3, [r7, #16]
 800528a:	e49b      	b.n	8004bc4 <LCD_Font.constprop.2+0xc30>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800528c:	6139      	str	r1, [r7, #16]
 800528e:	e492      	b.n	8004bb6 <LCD_Font.constprop.2+0xc22>
			cursor_x += glyph.xAdvance * size;
 8005290:	b2a3      	uxth	r3, r4
 8005292:	9315      	str	r3, [sp, #84]	; 0x54
 8005294:	f7ff bb2d 	b.w	80048f2 <LCD_Font.constprop.2+0x95e>

08005298 <LCD_Font.constprop.3>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 800529c:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80052a0:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80052a2:	4610      	mov	r0, r2
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80052a4:	4616      	mov	r6, r2
 80052a6:	469a      	mov	sl, r3
	int16_t cursor_y = y;
 80052a8:	b20d      	sxth	r5, r1
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80052aa:	f000 f8b9 	bl	8005420 <strlen>
 80052ae:	b3a0      	cbz	r0, 800531a <LCD_Font.constprop.3+0x82>
 80052b0:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 80052b2:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80052b4:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80052b6:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8005320 <LCD_Font.constprop.3+0x88>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80052ba:	4b1a      	ldr	r3, [pc, #104]	; (8005324 <LCD_Font.constprop.3+0x8c>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80052bc:	f10d 0b08 	add.w	fp, sp, #8
 80052c0:	e01c      	b.n	80052fc <LCD_Font.constprop.3+0x64>
		else if(c >= font.first && c <= font.last && c != '\r')
 80052c2:	f1bc 0f5e 	cmp.w	ip, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80052c6:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 80052ca:	d812      	bhi.n	80052f2 <LCD_Font.constprop.3+0x5a>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80052cc:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80052d0:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80052d4:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80052d6:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80052da:	4638      	mov	r0, r7
 80052dc:	4629      	mov	r1, r5
 80052de:	f7fe fd29 	bl	8003d34 <LCD_Char.constprop.1.isra.0>
			cursor_x += glyph.xAdvance * size;
 80052e2:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80052e6:	4630      	mov	r0, r6
			cursor_x += glyph.xAdvance * size;
 80052e8:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80052ea:	f000 f899 	bl	8005420 <strlen>
 80052ee:	4b0d      	ldr	r3, [pc, #52]	; (8005324 <LCD_Font.constprop.3+0x8c>)
			cursor_x += glyph.xAdvance * size;
 80052f0:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80052f2:	3401      	adds	r4, #1
 80052f4:	b2a4      	uxth	r4, r4
 80052f6:	4284      	cmp	r4, r0
 80052f8:	4622      	mov	r2, r4
 80052fa:	d20e      	bcs.n	800531a <LCD_Font.constprop.3+0x82>
		char c = text[text_pos];
 80052fc:	5cb1      	ldrb	r1, [r6, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 80052fe:	f1a1 0220 	sub.w	r2, r1, #32
		if(c == '\n')
 8005302:	290a      	cmp	r1, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 8005304:	fa5f fc82 	uxtb.w	ip, r2
		if(c == '\n')
 8005308:	d1db      	bne.n	80052c2 <LCD_Font.constprop.3+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800530a:	3401      	adds	r4, #1
 800530c:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 800530e:	352b      	adds	r5, #43	; 0x2b
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005310:	4284      	cmp	r4, r0
			cursor_x = x;
 8005312:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005314:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 8005316:	b22d      	sxth	r5, r5
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005318:	d3f0      	bcc.n	80052fc <LCD_Font.constprop.3+0x64>
}
 800531a:	b005      	add	sp, #20
 800531c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005320:	0800c908 	.word	0x0800c908
 8005324:	0801be60 	.word	0x0801be60

08005328 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005328:	e7fe      	b.n	8005328 <NMI_Handler>
 800532a:	bf00      	nop

0800532c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800532c:	e7fe      	b.n	800532c <HardFault_Handler>
 800532e:	bf00      	nop

08005330 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005330:	e7fe      	b.n	8005330 <MemManage_Handler>
 8005332:	bf00      	nop

08005334 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005334:	e7fe      	b.n	8005334 <BusFault_Handler>
 8005336:	bf00      	nop

08005338 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005338:	e7fe      	b.n	8005338 <UsageFault_Handler>
 800533a:	bf00      	nop

0800533c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop

08005340 <DebugMon_Handler>:
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop

08005344 <PendSV_Handler>:
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop

08005348 <SysTick_Handler>:
  uwTick += uwTickFreq;
 8005348:	4a02      	ldr	r2, [pc, #8]	; (8005354 <SysTick_Handler+0xc>)
 800534a:	6813      	ldr	r3, [r2, #0]
 800534c:	3301      	adds	r3, #1
 800534e:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	20000208 	.word	0x20000208

08005358 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005358:	2001      	movs	r0, #1
 800535a:	4770      	bx	lr

0800535c <_kill>:

int _kill(int pid, int sig)
{
 800535c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800535e:	f002 fde5 	bl	8007f2c <__errno>
 8005362:	2216      	movs	r2, #22
 8005364:	4603      	mov	r3, r0
	return -1;
}
 8005366:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 800536a:	601a      	str	r2, [r3, #0]
}
 800536c:	bd08      	pop	{r3, pc}
 800536e:	bf00      	nop

08005370 <_exit>:

void _exit (int status)
{
 8005370:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005372:	f002 fddb 	bl	8007f2c <__errno>
 8005376:	2316      	movs	r3, #22
 8005378:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800537a:	e7fe      	b.n	800537a <_exit+0xa>

0800537c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800537c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800537e:	1e16      	subs	r6, r2, #0
 8005380:	dd07      	ble.n	8005392 <_read+0x16>
 8005382:	460c      	mov	r4, r1
 8005384:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8005386:	f3af 8000 	nop.w
 800538a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800538e:	42a5      	cmp	r5, r4
 8005390:	d1f9      	bne.n	8005386 <_read+0xa>
	}

return len;
}
 8005392:	4630      	mov	r0, r6
 8005394:	bd70      	pop	{r4, r5, r6, pc}
 8005396:	bf00      	nop

08005398 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005398:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800539a:	1e16      	subs	r6, r2, #0
 800539c:	dd07      	ble.n	80053ae <_write+0x16>
 800539e:	460c      	mov	r4, r1
 80053a0:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80053a2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80053a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053aa:	42ac      	cmp	r4, r5
 80053ac:	d1f9      	bne.n	80053a2 <_write+0xa>
	}
	return len;
}
 80053ae:	4630      	mov	r0, r6
 80053b0:	bd70      	pop	{r4, r5, r6, pc}
 80053b2:	bf00      	nop

080053b4 <_close>:

int _close(int file)
{
	return -1;
}
 80053b4:	f04f 30ff 	mov.w	r0, #4294967295
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop

080053bc <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80053bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80053c0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80053c2:	604b      	str	r3, [r1, #4]
}
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop

080053c8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80053c8:	2001      	movs	r0, #1
 80053ca:	4770      	bx	lr

080053cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80053cc:	2000      	movs	r0, #0
 80053ce:	4770      	bx	lr

080053d0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80053d0:	490e      	ldr	r1, [pc, #56]	; (800540c <_sbrk+0x3c>)
{
 80053d2:	4603      	mov	r3, r0
 80053d4:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053d6:	4a0e      	ldr	r2, [pc, #56]	; (8005410 <_sbrk+0x40>)
 80053d8:	4c0e      	ldr	r4, [pc, #56]	; (8005414 <_sbrk+0x44>)
  if (NULL == __sbrk_heap_end)
 80053da:	f8d1 04c4 	ldr.w	r0, [r1, #1220]	; 0x4c4
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053de:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80053e0:	b128      	cbz	r0, 80053ee <_sbrk+0x1e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053e2:	4403      	add	r3, r0
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d809      	bhi.n	80053fc <_sbrk+0x2c>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80053e8:	f8c1 34c4 	str.w	r3, [r1, #1220]	; 0x4c4

  return (void *)prev_heap_end;
}
 80053ec:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80053ee:	4c0a      	ldr	r4, [pc, #40]	; (8005418 <_sbrk+0x48>)
 80053f0:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 80053f2:	4403      	add	r3, r0
 80053f4:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 80053f6:	f8c1 44c4 	str.w	r4, [r1, #1220]	; 0x4c4
  if (__sbrk_heap_end + incr > max_heap)
 80053fa:	d9f5      	bls.n	80053e8 <_sbrk+0x18>
    errno = ENOMEM;
 80053fc:	f002 fd96 	bl	8007f2c <__errno>
 8005400:	220c      	movs	r2, #12
 8005402:	4603      	mov	r3, r0
 8005404:	f04f 30ff 	mov.w	r0, #4294967295
 8005408:	601a      	str	r2, [r3, #0]
}
 800540a:	bd10      	pop	{r4, pc}
 800540c:	20000208 	.word	0x20000208
 8005410:	20005000 	.word	0x20005000
 8005414:	00000400 	.word	0x00000400
 8005418:	200016e0 	.word	0x200016e0

0800541c <SystemInit>:
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop

08005420 <strlen>:
 8005420:	4603      	mov	r3, r0
 8005422:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005426:	2a00      	cmp	r2, #0
 8005428:	d1fb      	bne.n	8005422 <strlen+0x2>
 800542a:	1a18      	subs	r0, r3, r0
 800542c:	3801      	subs	r0, #1
 800542e:	4770      	bx	lr

08005430 <__aeabi_drsub>:
 8005430:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005434:	e002      	b.n	800543c <__adddf3>
 8005436:	bf00      	nop

08005438 <__aeabi_dsub>:
 8005438:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800543c <__adddf3>:
 800543c:	b530      	push	{r4, r5, lr}
 800543e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005442:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005446:	ea94 0f05 	teq	r4, r5
 800544a:	bf08      	it	eq
 800544c:	ea90 0f02 	teqeq	r0, r2
 8005450:	bf1f      	itttt	ne
 8005452:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005456:	ea55 0c02 	orrsne.w	ip, r5, r2
 800545a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800545e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005462:	f000 80e2 	beq.w	800562a <__adddf3+0x1ee>
 8005466:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800546a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800546e:	bfb8      	it	lt
 8005470:	426d      	neglt	r5, r5
 8005472:	dd0c      	ble.n	800548e <__adddf3+0x52>
 8005474:	442c      	add	r4, r5
 8005476:	ea80 0202 	eor.w	r2, r0, r2
 800547a:	ea81 0303 	eor.w	r3, r1, r3
 800547e:	ea82 0000 	eor.w	r0, r2, r0
 8005482:	ea83 0101 	eor.w	r1, r3, r1
 8005486:	ea80 0202 	eor.w	r2, r0, r2
 800548a:	ea81 0303 	eor.w	r3, r1, r3
 800548e:	2d36      	cmp	r5, #54	; 0x36
 8005490:	bf88      	it	hi
 8005492:	bd30      	pophi	{r4, r5, pc}
 8005494:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005498:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800549c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80054a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80054a4:	d002      	beq.n	80054ac <__adddf3+0x70>
 80054a6:	4240      	negs	r0, r0
 80054a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80054ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80054b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80054b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80054b8:	d002      	beq.n	80054c0 <__adddf3+0x84>
 80054ba:	4252      	negs	r2, r2
 80054bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80054c0:	ea94 0f05 	teq	r4, r5
 80054c4:	f000 80a7 	beq.w	8005616 <__adddf3+0x1da>
 80054c8:	f1a4 0401 	sub.w	r4, r4, #1
 80054cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80054d0:	db0d      	blt.n	80054ee <__adddf3+0xb2>
 80054d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80054d6:	fa22 f205 	lsr.w	r2, r2, r5
 80054da:	1880      	adds	r0, r0, r2
 80054dc:	f141 0100 	adc.w	r1, r1, #0
 80054e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80054e4:	1880      	adds	r0, r0, r2
 80054e6:	fa43 f305 	asr.w	r3, r3, r5
 80054ea:	4159      	adcs	r1, r3
 80054ec:	e00e      	b.n	800550c <__adddf3+0xd0>
 80054ee:	f1a5 0520 	sub.w	r5, r5, #32
 80054f2:	f10e 0e20 	add.w	lr, lr, #32
 80054f6:	2a01      	cmp	r2, #1
 80054f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80054fc:	bf28      	it	cs
 80054fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005502:	fa43 f305 	asr.w	r3, r3, r5
 8005506:	18c0      	adds	r0, r0, r3
 8005508:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800550c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005510:	d507      	bpl.n	8005522 <__adddf3+0xe6>
 8005512:	f04f 0e00 	mov.w	lr, #0
 8005516:	f1dc 0c00 	rsbs	ip, ip, #0
 800551a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800551e:	eb6e 0101 	sbc.w	r1, lr, r1
 8005522:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005526:	d31b      	bcc.n	8005560 <__adddf3+0x124>
 8005528:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800552c:	d30c      	bcc.n	8005548 <__adddf3+0x10c>
 800552e:	0849      	lsrs	r1, r1, #1
 8005530:	ea5f 0030 	movs.w	r0, r0, rrx
 8005534:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005538:	f104 0401 	add.w	r4, r4, #1
 800553c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005540:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005544:	f080 809a 	bcs.w	800567c <__adddf3+0x240>
 8005548:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800554c:	bf08      	it	eq
 800554e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005552:	f150 0000 	adcs.w	r0, r0, #0
 8005556:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800555a:	ea41 0105 	orr.w	r1, r1, r5
 800555e:	bd30      	pop	{r4, r5, pc}
 8005560:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005564:	4140      	adcs	r0, r0
 8005566:	eb41 0101 	adc.w	r1, r1, r1
 800556a:	3c01      	subs	r4, #1
 800556c:	bf28      	it	cs
 800556e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8005572:	d2e9      	bcs.n	8005548 <__adddf3+0x10c>
 8005574:	f091 0f00 	teq	r1, #0
 8005578:	bf04      	itt	eq
 800557a:	4601      	moveq	r1, r0
 800557c:	2000      	moveq	r0, #0
 800557e:	fab1 f381 	clz	r3, r1
 8005582:	bf08      	it	eq
 8005584:	3320      	addeq	r3, #32
 8005586:	f1a3 030b 	sub.w	r3, r3, #11
 800558a:	f1b3 0220 	subs.w	r2, r3, #32
 800558e:	da0c      	bge.n	80055aa <__adddf3+0x16e>
 8005590:	320c      	adds	r2, #12
 8005592:	dd08      	ble.n	80055a6 <__adddf3+0x16a>
 8005594:	f102 0c14 	add.w	ip, r2, #20
 8005598:	f1c2 020c 	rsb	r2, r2, #12
 800559c:	fa01 f00c 	lsl.w	r0, r1, ip
 80055a0:	fa21 f102 	lsr.w	r1, r1, r2
 80055a4:	e00c      	b.n	80055c0 <__adddf3+0x184>
 80055a6:	f102 0214 	add.w	r2, r2, #20
 80055aa:	bfd8      	it	le
 80055ac:	f1c2 0c20 	rsble	ip, r2, #32
 80055b0:	fa01 f102 	lsl.w	r1, r1, r2
 80055b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80055b8:	bfdc      	itt	le
 80055ba:	ea41 010c 	orrle.w	r1, r1, ip
 80055be:	4090      	lslle	r0, r2
 80055c0:	1ae4      	subs	r4, r4, r3
 80055c2:	bfa2      	ittt	ge
 80055c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80055c8:	4329      	orrge	r1, r5
 80055ca:	bd30      	popge	{r4, r5, pc}
 80055cc:	ea6f 0404 	mvn.w	r4, r4
 80055d0:	3c1f      	subs	r4, #31
 80055d2:	da1c      	bge.n	800560e <__adddf3+0x1d2>
 80055d4:	340c      	adds	r4, #12
 80055d6:	dc0e      	bgt.n	80055f6 <__adddf3+0x1ba>
 80055d8:	f104 0414 	add.w	r4, r4, #20
 80055dc:	f1c4 0220 	rsb	r2, r4, #32
 80055e0:	fa20 f004 	lsr.w	r0, r0, r4
 80055e4:	fa01 f302 	lsl.w	r3, r1, r2
 80055e8:	ea40 0003 	orr.w	r0, r0, r3
 80055ec:	fa21 f304 	lsr.w	r3, r1, r4
 80055f0:	ea45 0103 	orr.w	r1, r5, r3
 80055f4:	bd30      	pop	{r4, r5, pc}
 80055f6:	f1c4 040c 	rsb	r4, r4, #12
 80055fa:	f1c4 0220 	rsb	r2, r4, #32
 80055fe:	fa20 f002 	lsr.w	r0, r0, r2
 8005602:	fa01 f304 	lsl.w	r3, r1, r4
 8005606:	ea40 0003 	orr.w	r0, r0, r3
 800560a:	4629      	mov	r1, r5
 800560c:	bd30      	pop	{r4, r5, pc}
 800560e:	fa21 f004 	lsr.w	r0, r1, r4
 8005612:	4629      	mov	r1, r5
 8005614:	bd30      	pop	{r4, r5, pc}
 8005616:	f094 0f00 	teq	r4, #0
 800561a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800561e:	bf06      	itte	eq
 8005620:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005624:	3401      	addeq	r4, #1
 8005626:	3d01      	subne	r5, #1
 8005628:	e74e      	b.n	80054c8 <__adddf3+0x8c>
 800562a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800562e:	bf18      	it	ne
 8005630:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005634:	d029      	beq.n	800568a <__adddf3+0x24e>
 8005636:	ea94 0f05 	teq	r4, r5
 800563a:	bf08      	it	eq
 800563c:	ea90 0f02 	teqeq	r0, r2
 8005640:	d005      	beq.n	800564e <__adddf3+0x212>
 8005642:	ea54 0c00 	orrs.w	ip, r4, r0
 8005646:	bf04      	itt	eq
 8005648:	4619      	moveq	r1, r3
 800564a:	4610      	moveq	r0, r2
 800564c:	bd30      	pop	{r4, r5, pc}
 800564e:	ea91 0f03 	teq	r1, r3
 8005652:	bf1e      	ittt	ne
 8005654:	2100      	movne	r1, #0
 8005656:	2000      	movne	r0, #0
 8005658:	bd30      	popne	{r4, r5, pc}
 800565a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800565e:	d105      	bne.n	800566c <__adddf3+0x230>
 8005660:	0040      	lsls	r0, r0, #1
 8005662:	4149      	adcs	r1, r1
 8005664:	bf28      	it	cs
 8005666:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800566a:	bd30      	pop	{r4, r5, pc}
 800566c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005670:	bf3c      	itt	cc
 8005672:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8005676:	bd30      	popcc	{r4, r5, pc}
 8005678:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800567c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8005680:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005684:	f04f 0000 	mov.w	r0, #0
 8005688:	bd30      	pop	{r4, r5, pc}
 800568a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800568e:	bf1a      	itte	ne
 8005690:	4619      	movne	r1, r3
 8005692:	4610      	movne	r0, r2
 8005694:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8005698:	bf1c      	itt	ne
 800569a:	460b      	movne	r3, r1
 800569c:	4602      	movne	r2, r0
 800569e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80056a2:	bf06      	itte	eq
 80056a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80056a8:	ea91 0f03 	teqeq	r1, r3
 80056ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80056b0:	bd30      	pop	{r4, r5, pc}
 80056b2:	bf00      	nop

080056b4 <__aeabi_ui2d>:
 80056b4:	f090 0f00 	teq	r0, #0
 80056b8:	bf04      	itt	eq
 80056ba:	2100      	moveq	r1, #0
 80056bc:	4770      	bxeq	lr
 80056be:	b530      	push	{r4, r5, lr}
 80056c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80056c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80056c8:	f04f 0500 	mov.w	r5, #0
 80056cc:	f04f 0100 	mov.w	r1, #0
 80056d0:	e750      	b.n	8005574 <__adddf3+0x138>
 80056d2:	bf00      	nop

080056d4 <__aeabi_i2d>:
 80056d4:	f090 0f00 	teq	r0, #0
 80056d8:	bf04      	itt	eq
 80056da:	2100      	moveq	r1, #0
 80056dc:	4770      	bxeq	lr
 80056de:	b530      	push	{r4, r5, lr}
 80056e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80056e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80056e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80056ec:	bf48      	it	mi
 80056ee:	4240      	negmi	r0, r0
 80056f0:	f04f 0100 	mov.w	r1, #0
 80056f4:	e73e      	b.n	8005574 <__adddf3+0x138>
 80056f6:	bf00      	nop

080056f8 <__aeabi_f2d>:
 80056f8:	0042      	lsls	r2, r0, #1
 80056fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80056fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8005702:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005706:	bf1f      	itttt	ne
 8005708:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800570c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005710:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005714:	4770      	bxne	lr
 8005716:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800571a:	bf08      	it	eq
 800571c:	4770      	bxeq	lr
 800571e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8005722:	bf04      	itt	eq
 8005724:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8005728:	4770      	bxeq	lr
 800572a:	b530      	push	{r4, r5, lr}
 800572c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005730:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005734:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005738:	e71c      	b.n	8005574 <__adddf3+0x138>
 800573a:	bf00      	nop

0800573c <__aeabi_ul2d>:
 800573c:	ea50 0201 	orrs.w	r2, r0, r1
 8005740:	bf08      	it	eq
 8005742:	4770      	bxeq	lr
 8005744:	b530      	push	{r4, r5, lr}
 8005746:	f04f 0500 	mov.w	r5, #0
 800574a:	e00a      	b.n	8005762 <__aeabi_l2d+0x16>

0800574c <__aeabi_l2d>:
 800574c:	ea50 0201 	orrs.w	r2, r0, r1
 8005750:	bf08      	it	eq
 8005752:	4770      	bxeq	lr
 8005754:	b530      	push	{r4, r5, lr}
 8005756:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800575a:	d502      	bpl.n	8005762 <__aeabi_l2d+0x16>
 800575c:	4240      	negs	r0, r0
 800575e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005762:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005766:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800576a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800576e:	f43f aed8 	beq.w	8005522 <__adddf3+0xe6>
 8005772:	f04f 0203 	mov.w	r2, #3
 8005776:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800577a:	bf18      	it	ne
 800577c:	3203      	addne	r2, #3
 800577e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005782:	bf18      	it	ne
 8005784:	3203      	addne	r2, #3
 8005786:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800578a:	f1c2 0320 	rsb	r3, r2, #32
 800578e:	fa00 fc03 	lsl.w	ip, r0, r3
 8005792:	fa20 f002 	lsr.w	r0, r0, r2
 8005796:	fa01 fe03 	lsl.w	lr, r1, r3
 800579a:	ea40 000e 	orr.w	r0, r0, lr
 800579e:	fa21 f102 	lsr.w	r1, r1, r2
 80057a2:	4414      	add	r4, r2
 80057a4:	e6bd      	b.n	8005522 <__adddf3+0xe6>
 80057a6:	bf00      	nop

080057a8 <__aeabi_dmul>:
 80057a8:	b570      	push	{r4, r5, r6, lr}
 80057aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80057ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80057b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80057b6:	bf1d      	ittte	ne
 80057b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80057bc:	ea94 0f0c 	teqne	r4, ip
 80057c0:	ea95 0f0c 	teqne	r5, ip
 80057c4:	f000 f8de 	bleq	8005984 <__aeabi_dmul+0x1dc>
 80057c8:	442c      	add	r4, r5
 80057ca:	ea81 0603 	eor.w	r6, r1, r3
 80057ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80057d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80057d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80057da:	bf18      	it	ne
 80057dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80057e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80057e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057e8:	d038      	beq.n	800585c <__aeabi_dmul+0xb4>
 80057ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80057ee:	f04f 0500 	mov.w	r5, #0
 80057f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80057f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80057fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80057fe:	f04f 0600 	mov.w	r6, #0
 8005802:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005806:	f09c 0f00 	teq	ip, #0
 800580a:	bf18      	it	ne
 800580c:	f04e 0e01 	orrne.w	lr, lr, #1
 8005810:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005814:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005818:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800581c:	d204      	bcs.n	8005828 <__aeabi_dmul+0x80>
 800581e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005822:	416d      	adcs	r5, r5
 8005824:	eb46 0606 	adc.w	r6, r6, r6
 8005828:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800582c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005830:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005834:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005838:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800583c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005840:	bf88      	it	hi
 8005842:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005846:	d81e      	bhi.n	8005886 <__aeabi_dmul+0xde>
 8005848:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800584c:	bf08      	it	eq
 800584e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005852:	f150 0000 	adcs.w	r0, r0, #0
 8005856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800585a:	bd70      	pop	{r4, r5, r6, pc}
 800585c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005860:	ea46 0101 	orr.w	r1, r6, r1
 8005864:	ea40 0002 	orr.w	r0, r0, r2
 8005868:	ea81 0103 	eor.w	r1, r1, r3
 800586c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8005870:	bfc2      	ittt	gt
 8005872:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005876:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800587a:	bd70      	popgt	{r4, r5, r6, pc}
 800587c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005880:	f04f 0e00 	mov.w	lr, #0
 8005884:	3c01      	subs	r4, #1
 8005886:	f300 80ab 	bgt.w	80059e0 <__aeabi_dmul+0x238>
 800588a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800588e:	bfde      	ittt	le
 8005890:	2000      	movle	r0, #0
 8005892:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8005896:	bd70      	pople	{r4, r5, r6, pc}
 8005898:	f1c4 0400 	rsb	r4, r4, #0
 800589c:	3c20      	subs	r4, #32
 800589e:	da35      	bge.n	800590c <__aeabi_dmul+0x164>
 80058a0:	340c      	adds	r4, #12
 80058a2:	dc1b      	bgt.n	80058dc <__aeabi_dmul+0x134>
 80058a4:	f104 0414 	add.w	r4, r4, #20
 80058a8:	f1c4 0520 	rsb	r5, r4, #32
 80058ac:	fa00 f305 	lsl.w	r3, r0, r5
 80058b0:	fa20 f004 	lsr.w	r0, r0, r4
 80058b4:	fa01 f205 	lsl.w	r2, r1, r5
 80058b8:	ea40 0002 	orr.w	r0, r0, r2
 80058bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80058c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80058c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80058c8:	fa21 f604 	lsr.w	r6, r1, r4
 80058cc:	eb42 0106 	adc.w	r1, r2, r6
 80058d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80058d4:	bf08      	it	eq
 80058d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80058da:	bd70      	pop	{r4, r5, r6, pc}
 80058dc:	f1c4 040c 	rsb	r4, r4, #12
 80058e0:	f1c4 0520 	rsb	r5, r4, #32
 80058e4:	fa00 f304 	lsl.w	r3, r0, r4
 80058e8:	fa20 f005 	lsr.w	r0, r0, r5
 80058ec:	fa01 f204 	lsl.w	r2, r1, r4
 80058f0:	ea40 0002 	orr.w	r0, r0, r2
 80058f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80058f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80058fc:	f141 0100 	adc.w	r1, r1, #0
 8005900:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005904:	bf08      	it	eq
 8005906:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800590a:	bd70      	pop	{r4, r5, r6, pc}
 800590c:	f1c4 0520 	rsb	r5, r4, #32
 8005910:	fa00 f205 	lsl.w	r2, r0, r5
 8005914:	ea4e 0e02 	orr.w	lr, lr, r2
 8005918:	fa20 f304 	lsr.w	r3, r0, r4
 800591c:	fa01 f205 	lsl.w	r2, r1, r5
 8005920:	ea43 0302 	orr.w	r3, r3, r2
 8005924:	fa21 f004 	lsr.w	r0, r1, r4
 8005928:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800592c:	fa21 f204 	lsr.w	r2, r1, r4
 8005930:	ea20 0002 	bic.w	r0, r0, r2
 8005934:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005938:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800593c:	bf08      	it	eq
 800593e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005942:	bd70      	pop	{r4, r5, r6, pc}
 8005944:	f094 0f00 	teq	r4, #0
 8005948:	d10f      	bne.n	800596a <__aeabi_dmul+0x1c2>
 800594a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800594e:	0040      	lsls	r0, r0, #1
 8005950:	eb41 0101 	adc.w	r1, r1, r1
 8005954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005958:	bf08      	it	eq
 800595a:	3c01      	subeq	r4, #1
 800595c:	d0f7      	beq.n	800594e <__aeabi_dmul+0x1a6>
 800595e:	ea41 0106 	orr.w	r1, r1, r6
 8005962:	f095 0f00 	teq	r5, #0
 8005966:	bf18      	it	ne
 8005968:	4770      	bxne	lr
 800596a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800596e:	0052      	lsls	r2, r2, #1
 8005970:	eb43 0303 	adc.w	r3, r3, r3
 8005974:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005978:	bf08      	it	eq
 800597a:	3d01      	subeq	r5, #1
 800597c:	d0f7      	beq.n	800596e <__aeabi_dmul+0x1c6>
 800597e:	ea43 0306 	orr.w	r3, r3, r6
 8005982:	4770      	bx	lr
 8005984:	ea94 0f0c 	teq	r4, ip
 8005988:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800598c:	bf18      	it	ne
 800598e:	ea95 0f0c 	teqne	r5, ip
 8005992:	d00c      	beq.n	80059ae <__aeabi_dmul+0x206>
 8005994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005998:	bf18      	it	ne
 800599a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800599e:	d1d1      	bne.n	8005944 <__aeabi_dmul+0x19c>
 80059a0:	ea81 0103 	eor.w	r1, r1, r3
 80059a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80059a8:	f04f 0000 	mov.w	r0, #0
 80059ac:	bd70      	pop	{r4, r5, r6, pc}
 80059ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80059b2:	bf06      	itte	eq
 80059b4:	4610      	moveq	r0, r2
 80059b6:	4619      	moveq	r1, r3
 80059b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80059bc:	d019      	beq.n	80059f2 <__aeabi_dmul+0x24a>
 80059be:	ea94 0f0c 	teq	r4, ip
 80059c2:	d102      	bne.n	80059ca <__aeabi_dmul+0x222>
 80059c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80059c8:	d113      	bne.n	80059f2 <__aeabi_dmul+0x24a>
 80059ca:	ea95 0f0c 	teq	r5, ip
 80059ce:	d105      	bne.n	80059dc <__aeabi_dmul+0x234>
 80059d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80059d4:	bf1c      	itt	ne
 80059d6:	4610      	movne	r0, r2
 80059d8:	4619      	movne	r1, r3
 80059da:	d10a      	bne.n	80059f2 <__aeabi_dmul+0x24a>
 80059dc:	ea81 0103 	eor.w	r1, r1, r3
 80059e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80059e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80059e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80059ec:	f04f 0000 	mov.w	r0, #0
 80059f0:	bd70      	pop	{r4, r5, r6, pc}
 80059f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80059f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80059fa:	bd70      	pop	{r4, r5, r6, pc}

080059fc <__aeabi_ddiv>:
 80059fc:	b570      	push	{r4, r5, r6, lr}
 80059fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005a02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005a06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005a0a:	bf1d      	ittte	ne
 8005a0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005a10:	ea94 0f0c 	teqne	r4, ip
 8005a14:	ea95 0f0c 	teqne	r5, ip
 8005a18:	f000 f8a7 	bleq	8005b6a <__aeabi_ddiv+0x16e>
 8005a1c:	eba4 0405 	sub.w	r4, r4, r5
 8005a20:	ea81 0e03 	eor.w	lr, r1, r3
 8005a24:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005a28:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005a2c:	f000 8088 	beq.w	8005b40 <__aeabi_ddiv+0x144>
 8005a30:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005a34:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005a38:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005a3c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005a40:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005a44:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005a48:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005a4c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005a50:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005a54:	429d      	cmp	r5, r3
 8005a56:	bf08      	it	eq
 8005a58:	4296      	cmpeq	r6, r2
 8005a5a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8005a5e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005a62:	d202      	bcs.n	8005a6a <__aeabi_ddiv+0x6e>
 8005a64:	085b      	lsrs	r3, r3, #1
 8005a66:	ea4f 0232 	mov.w	r2, r2, rrx
 8005a6a:	1ab6      	subs	r6, r6, r2
 8005a6c:	eb65 0503 	sbc.w	r5, r5, r3
 8005a70:	085b      	lsrs	r3, r3, #1
 8005a72:	ea4f 0232 	mov.w	r2, r2, rrx
 8005a76:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005a7a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8005a7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8005a82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005a86:	bf22      	ittt	cs
 8005a88:	1ab6      	subcs	r6, r6, r2
 8005a8a:	4675      	movcs	r5, lr
 8005a8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8005a90:	085b      	lsrs	r3, r3, #1
 8005a92:	ea4f 0232 	mov.w	r2, r2, rrx
 8005a96:	ebb6 0e02 	subs.w	lr, r6, r2
 8005a9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005a9e:	bf22      	ittt	cs
 8005aa0:	1ab6      	subcs	r6, r6, r2
 8005aa2:	4675      	movcs	r5, lr
 8005aa4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005aa8:	085b      	lsrs	r3, r3, #1
 8005aaa:	ea4f 0232 	mov.w	r2, r2, rrx
 8005aae:	ebb6 0e02 	subs.w	lr, r6, r2
 8005ab2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005ab6:	bf22      	ittt	cs
 8005ab8:	1ab6      	subcs	r6, r6, r2
 8005aba:	4675      	movcs	r5, lr
 8005abc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005ac0:	085b      	lsrs	r3, r3, #1
 8005ac2:	ea4f 0232 	mov.w	r2, r2, rrx
 8005ac6:	ebb6 0e02 	subs.w	lr, r6, r2
 8005aca:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005ace:	bf22      	ittt	cs
 8005ad0:	1ab6      	subcs	r6, r6, r2
 8005ad2:	4675      	movcs	r5, lr
 8005ad4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005ad8:	ea55 0e06 	orrs.w	lr, r5, r6
 8005adc:	d018      	beq.n	8005b10 <__aeabi_ddiv+0x114>
 8005ade:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005ae2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8005ae6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8005aea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005aee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005af2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8005af6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8005afa:	d1c0      	bne.n	8005a7e <__aeabi_ddiv+0x82>
 8005afc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005b00:	d10b      	bne.n	8005b1a <__aeabi_ddiv+0x11e>
 8005b02:	ea41 0100 	orr.w	r1, r1, r0
 8005b06:	f04f 0000 	mov.w	r0, #0
 8005b0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005b0e:	e7b6      	b.n	8005a7e <__aeabi_ddiv+0x82>
 8005b10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005b14:	bf04      	itt	eq
 8005b16:	4301      	orreq	r1, r0
 8005b18:	2000      	moveq	r0, #0
 8005b1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005b1e:	bf88      	it	hi
 8005b20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005b24:	f63f aeaf 	bhi.w	8005886 <__aeabi_dmul+0xde>
 8005b28:	ebb5 0c03 	subs.w	ip, r5, r3
 8005b2c:	bf04      	itt	eq
 8005b2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005b32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005b36:	f150 0000 	adcs.w	r0, r0, #0
 8005b3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005b3e:	bd70      	pop	{r4, r5, r6, pc}
 8005b40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005b44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005b48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005b4c:	bfc2      	ittt	gt
 8005b4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005b52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005b56:	bd70      	popgt	{r4, r5, r6, pc}
 8005b58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005b5c:	f04f 0e00 	mov.w	lr, #0
 8005b60:	3c01      	subs	r4, #1
 8005b62:	e690      	b.n	8005886 <__aeabi_dmul+0xde>
 8005b64:	ea45 0e06 	orr.w	lr, r5, r6
 8005b68:	e68d      	b.n	8005886 <__aeabi_dmul+0xde>
 8005b6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005b6e:	ea94 0f0c 	teq	r4, ip
 8005b72:	bf08      	it	eq
 8005b74:	ea95 0f0c 	teqeq	r5, ip
 8005b78:	f43f af3b 	beq.w	80059f2 <__aeabi_dmul+0x24a>
 8005b7c:	ea94 0f0c 	teq	r4, ip
 8005b80:	d10a      	bne.n	8005b98 <__aeabi_ddiv+0x19c>
 8005b82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005b86:	f47f af34 	bne.w	80059f2 <__aeabi_dmul+0x24a>
 8005b8a:	ea95 0f0c 	teq	r5, ip
 8005b8e:	f47f af25 	bne.w	80059dc <__aeabi_dmul+0x234>
 8005b92:	4610      	mov	r0, r2
 8005b94:	4619      	mov	r1, r3
 8005b96:	e72c      	b.n	80059f2 <__aeabi_dmul+0x24a>
 8005b98:	ea95 0f0c 	teq	r5, ip
 8005b9c:	d106      	bne.n	8005bac <__aeabi_ddiv+0x1b0>
 8005b9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005ba2:	f43f aefd 	beq.w	80059a0 <__aeabi_dmul+0x1f8>
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	4619      	mov	r1, r3
 8005baa:	e722      	b.n	80059f2 <__aeabi_dmul+0x24a>
 8005bac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005bb0:	bf18      	it	ne
 8005bb2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005bb6:	f47f aec5 	bne.w	8005944 <__aeabi_dmul+0x19c>
 8005bba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8005bbe:	f47f af0d 	bne.w	80059dc <__aeabi_dmul+0x234>
 8005bc2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8005bc6:	f47f aeeb 	bne.w	80059a0 <__aeabi_dmul+0x1f8>
 8005bca:	e712      	b.n	80059f2 <__aeabi_dmul+0x24a>

08005bcc <__gedf2>:
 8005bcc:	f04f 3cff 	mov.w	ip, #4294967295
 8005bd0:	e006      	b.n	8005be0 <__cmpdf2+0x4>
 8005bd2:	bf00      	nop

08005bd4 <__ledf2>:
 8005bd4:	f04f 0c01 	mov.w	ip, #1
 8005bd8:	e002      	b.n	8005be0 <__cmpdf2+0x4>
 8005bda:	bf00      	nop

08005bdc <__cmpdf2>:
 8005bdc:	f04f 0c01 	mov.w	ip, #1
 8005be0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005be4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005be8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005bec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005bf0:	bf18      	it	ne
 8005bf2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8005bf6:	d01b      	beq.n	8005c30 <__cmpdf2+0x54>
 8005bf8:	b001      	add	sp, #4
 8005bfa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8005bfe:	bf0c      	ite	eq
 8005c00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8005c04:	ea91 0f03 	teqne	r1, r3
 8005c08:	bf02      	ittt	eq
 8005c0a:	ea90 0f02 	teqeq	r0, r2
 8005c0e:	2000      	moveq	r0, #0
 8005c10:	4770      	bxeq	lr
 8005c12:	f110 0f00 	cmn.w	r0, #0
 8005c16:	ea91 0f03 	teq	r1, r3
 8005c1a:	bf58      	it	pl
 8005c1c:	4299      	cmppl	r1, r3
 8005c1e:	bf08      	it	eq
 8005c20:	4290      	cmpeq	r0, r2
 8005c22:	bf2c      	ite	cs
 8005c24:	17d8      	asrcs	r0, r3, #31
 8005c26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8005c2a:	f040 0001 	orr.w	r0, r0, #1
 8005c2e:	4770      	bx	lr
 8005c30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005c34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005c38:	d102      	bne.n	8005c40 <__cmpdf2+0x64>
 8005c3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005c3e:	d107      	bne.n	8005c50 <__cmpdf2+0x74>
 8005c40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005c44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005c48:	d1d6      	bne.n	8005bf8 <__cmpdf2+0x1c>
 8005c4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005c4e:	d0d3      	beq.n	8005bf8 <__cmpdf2+0x1c>
 8005c50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop

08005c58 <__aeabi_cdrcmple>:
 8005c58:	4684      	mov	ip, r0
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	4662      	mov	r2, ip
 8005c5e:	468c      	mov	ip, r1
 8005c60:	4619      	mov	r1, r3
 8005c62:	4663      	mov	r3, ip
 8005c64:	e000      	b.n	8005c68 <__aeabi_cdcmpeq>
 8005c66:	bf00      	nop

08005c68 <__aeabi_cdcmpeq>:
 8005c68:	b501      	push	{r0, lr}
 8005c6a:	f7ff ffb7 	bl	8005bdc <__cmpdf2>
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	bf48      	it	mi
 8005c72:	f110 0f00 	cmnmi.w	r0, #0
 8005c76:	bd01      	pop	{r0, pc}

08005c78 <__aeabi_dcmpeq>:
 8005c78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005c7c:	f7ff fff4 	bl	8005c68 <__aeabi_cdcmpeq>
 8005c80:	bf0c      	ite	eq
 8005c82:	2001      	moveq	r0, #1
 8005c84:	2000      	movne	r0, #0
 8005c86:	f85d fb08 	ldr.w	pc, [sp], #8
 8005c8a:	bf00      	nop

08005c8c <__aeabi_dcmplt>:
 8005c8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005c90:	f7ff ffea 	bl	8005c68 <__aeabi_cdcmpeq>
 8005c94:	bf34      	ite	cc
 8005c96:	2001      	movcc	r0, #1
 8005c98:	2000      	movcs	r0, #0
 8005c9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8005c9e:	bf00      	nop

08005ca0 <__aeabi_dcmple>:
 8005ca0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005ca4:	f7ff ffe0 	bl	8005c68 <__aeabi_cdcmpeq>
 8005ca8:	bf94      	ite	ls
 8005caa:	2001      	movls	r0, #1
 8005cac:	2000      	movhi	r0, #0
 8005cae:	f85d fb08 	ldr.w	pc, [sp], #8
 8005cb2:	bf00      	nop

08005cb4 <__aeabi_dcmpge>:
 8005cb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005cb8:	f7ff ffce 	bl	8005c58 <__aeabi_cdrcmple>
 8005cbc:	bf94      	ite	ls
 8005cbe:	2001      	movls	r0, #1
 8005cc0:	2000      	movhi	r0, #0
 8005cc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8005cc6:	bf00      	nop

08005cc8 <__aeabi_dcmpgt>:
 8005cc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005ccc:	f7ff ffc4 	bl	8005c58 <__aeabi_cdrcmple>
 8005cd0:	bf34      	ite	cc
 8005cd2:	2001      	movcc	r0, #1
 8005cd4:	2000      	movcs	r0, #0
 8005cd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8005cda:	bf00      	nop

08005cdc <__aeabi_dcmpun>:
 8005cdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005ce0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005ce4:	d102      	bne.n	8005cec <__aeabi_dcmpun+0x10>
 8005ce6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005cea:	d10a      	bne.n	8005d02 <__aeabi_dcmpun+0x26>
 8005cec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005cf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005cf4:	d102      	bne.n	8005cfc <__aeabi_dcmpun+0x20>
 8005cf6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005cfa:	d102      	bne.n	8005d02 <__aeabi_dcmpun+0x26>
 8005cfc:	f04f 0000 	mov.w	r0, #0
 8005d00:	4770      	bx	lr
 8005d02:	f04f 0001 	mov.w	r0, #1
 8005d06:	4770      	bx	lr

08005d08 <__aeabi_d2iz>:
 8005d08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005d0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005d10:	d215      	bcs.n	8005d3e <__aeabi_d2iz+0x36>
 8005d12:	d511      	bpl.n	8005d38 <__aeabi_d2iz+0x30>
 8005d14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8005d18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005d1c:	d912      	bls.n	8005d44 <__aeabi_d2iz+0x3c>
 8005d1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005d22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005d2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005d2e:	fa23 f002 	lsr.w	r0, r3, r2
 8005d32:	bf18      	it	ne
 8005d34:	4240      	negne	r0, r0
 8005d36:	4770      	bx	lr
 8005d38:	f04f 0000 	mov.w	r0, #0
 8005d3c:	4770      	bx	lr
 8005d3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005d42:	d105      	bne.n	8005d50 <__aeabi_d2iz+0x48>
 8005d44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8005d48:	bf08      	it	eq
 8005d4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8005d4e:	4770      	bx	lr
 8005d50:	f04f 0000 	mov.w	r0, #0
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop

08005d58 <__aeabi_d2uiz>:
 8005d58:	004a      	lsls	r2, r1, #1
 8005d5a:	d211      	bcs.n	8005d80 <__aeabi_d2uiz+0x28>
 8005d5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005d60:	d211      	bcs.n	8005d86 <__aeabi_d2uiz+0x2e>
 8005d62:	d50d      	bpl.n	8005d80 <__aeabi_d2uiz+0x28>
 8005d64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8005d68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005d6c:	d40e      	bmi.n	8005d8c <__aeabi_d2uiz+0x34>
 8005d6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005d72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005d7a:	fa23 f002 	lsr.w	r0, r3, r2
 8005d7e:	4770      	bx	lr
 8005d80:	f04f 0000 	mov.w	r0, #0
 8005d84:	4770      	bx	lr
 8005d86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005d8a:	d102      	bne.n	8005d92 <__aeabi_d2uiz+0x3a>
 8005d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d90:	4770      	bx	lr
 8005d92:	f04f 0000 	mov.w	r0, #0
 8005d96:	4770      	bx	lr

08005d98 <__aeabi_d2f>:
 8005d98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005d9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8005da0:	bf24      	itt	cs
 8005da2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8005da6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8005daa:	d90d      	bls.n	8005dc8 <__aeabi_d2f+0x30>
 8005dac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005db0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8005db4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005db8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005dbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005dc0:	bf08      	it	eq
 8005dc2:	f020 0001 	biceq.w	r0, r0, #1
 8005dc6:	4770      	bx	lr
 8005dc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005dcc:	d121      	bne.n	8005e12 <__aeabi_d2f+0x7a>
 8005dce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8005dd2:	bfbc      	itt	lt
 8005dd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8005dd8:	4770      	bxlt	lr
 8005dda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005dde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005de2:	f1c2 0218 	rsb	r2, r2, #24
 8005de6:	f1c2 0c20 	rsb	ip, r2, #32
 8005dea:	fa10 f30c 	lsls.w	r3, r0, ip
 8005dee:	fa20 f002 	lsr.w	r0, r0, r2
 8005df2:	bf18      	it	ne
 8005df4:	f040 0001 	orrne.w	r0, r0, #1
 8005df8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005dfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005e00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005e04:	ea40 000c 	orr.w	r0, r0, ip
 8005e08:	fa23 f302 	lsr.w	r3, r3, r2
 8005e0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005e10:	e7cc      	b.n	8005dac <__aeabi_d2f+0x14>
 8005e12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8005e16:	d107      	bne.n	8005e28 <__aeabi_d2f+0x90>
 8005e18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005e1c:	bf1e      	ittt	ne
 8005e1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8005e22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8005e26:	4770      	bxne	lr
 8005e28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8005e2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005e30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop

08005e38 <__gesf2>:
 8005e38:	f04f 3cff 	mov.w	ip, #4294967295
 8005e3c:	e006      	b.n	8005e4c <__cmpsf2+0x4>
 8005e3e:	bf00      	nop

08005e40 <__lesf2>:
 8005e40:	f04f 0c01 	mov.w	ip, #1
 8005e44:	e002      	b.n	8005e4c <__cmpsf2+0x4>
 8005e46:	bf00      	nop

08005e48 <__cmpsf2>:
 8005e48:	f04f 0c01 	mov.w	ip, #1
 8005e4c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005e50:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005e54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005e58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005e5c:	bf18      	it	ne
 8005e5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005e62:	d011      	beq.n	8005e88 <__cmpsf2+0x40>
 8005e64:	b001      	add	sp, #4
 8005e66:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8005e6a:	bf18      	it	ne
 8005e6c:	ea90 0f01 	teqne	r0, r1
 8005e70:	bf58      	it	pl
 8005e72:	ebb2 0003 	subspl.w	r0, r2, r3
 8005e76:	bf88      	it	hi
 8005e78:	17c8      	asrhi	r0, r1, #31
 8005e7a:	bf38      	it	cc
 8005e7c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8005e80:	bf18      	it	ne
 8005e82:	f040 0001 	orrne.w	r0, r0, #1
 8005e86:	4770      	bx	lr
 8005e88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005e8c:	d102      	bne.n	8005e94 <__cmpsf2+0x4c>
 8005e8e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8005e92:	d105      	bne.n	8005ea0 <__cmpsf2+0x58>
 8005e94:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8005e98:	d1e4      	bne.n	8005e64 <__cmpsf2+0x1c>
 8005e9a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8005e9e:	d0e1      	beq.n	8005e64 <__cmpsf2+0x1c>
 8005ea0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop

08005ea8 <__aeabi_cfrcmple>:
 8005ea8:	4684      	mov	ip, r0
 8005eaa:	4608      	mov	r0, r1
 8005eac:	4661      	mov	r1, ip
 8005eae:	e7ff      	b.n	8005eb0 <__aeabi_cfcmpeq>

08005eb0 <__aeabi_cfcmpeq>:
 8005eb0:	b50f      	push	{r0, r1, r2, r3, lr}
 8005eb2:	f7ff ffc9 	bl	8005e48 <__cmpsf2>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	bf48      	it	mi
 8005eba:	f110 0f00 	cmnmi.w	r0, #0
 8005ebe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08005ec0 <__aeabi_fcmpeq>:
 8005ec0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005ec4:	f7ff fff4 	bl	8005eb0 <__aeabi_cfcmpeq>
 8005ec8:	bf0c      	ite	eq
 8005eca:	2001      	moveq	r0, #1
 8005ecc:	2000      	movne	r0, #0
 8005ece:	f85d fb08 	ldr.w	pc, [sp], #8
 8005ed2:	bf00      	nop

08005ed4 <__aeabi_fcmplt>:
 8005ed4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005ed8:	f7ff ffea 	bl	8005eb0 <__aeabi_cfcmpeq>
 8005edc:	bf34      	ite	cc
 8005ede:	2001      	movcc	r0, #1
 8005ee0:	2000      	movcs	r0, #0
 8005ee2:	f85d fb08 	ldr.w	pc, [sp], #8
 8005ee6:	bf00      	nop

08005ee8 <__aeabi_fcmple>:
 8005ee8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005eec:	f7ff ffe0 	bl	8005eb0 <__aeabi_cfcmpeq>
 8005ef0:	bf94      	ite	ls
 8005ef2:	2001      	movls	r0, #1
 8005ef4:	2000      	movhi	r0, #0
 8005ef6:	f85d fb08 	ldr.w	pc, [sp], #8
 8005efa:	bf00      	nop

08005efc <__aeabi_fcmpge>:
 8005efc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005f00:	f7ff ffd2 	bl	8005ea8 <__aeabi_cfrcmple>
 8005f04:	bf94      	ite	ls
 8005f06:	2001      	movls	r0, #1
 8005f08:	2000      	movhi	r0, #0
 8005f0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8005f0e:	bf00      	nop

08005f10 <__aeabi_fcmpgt>:
 8005f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005f14:	f7ff ffc8 	bl	8005ea8 <__aeabi_cfrcmple>
 8005f18:	bf34      	ite	cc
 8005f1a:	2001      	movcc	r0, #1
 8005f1c:	2000      	movcs	r0, #0
 8005f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8005f22:	bf00      	nop

08005f24 <__aeabi_d2lz>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4605      	mov	r5, r0
 8005f28:	460c      	mov	r4, r1
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	4628      	mov	r0, r5
 8005f30:	4621      	mov	r1, r4
 8005f32:	f7ff feab 	bl	8005c8c <__aeabi_dcmplt>
 8005f36:	b928      	cbnz	r0, 8005f44 <__aeabi_d2lz+0x20>
 8005f38:	4628      	mov	r0, r5
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f40:	f000 b80a 	b.w	8005f58 <__aeabi_d2ulz>
 8005f44:	4628      	mov	r0, r5
 8005f46:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8005f4a:	f000 f805 	bl	8005f58 <__aeabi_d2ulz>
 8005f4e:	4240      	negs	r0, r0
 8005f50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005f54:	bd38      	pop	{r3, r4, r5, pc}
 8005f56:	bf00      	nop

08005f58 <__aeabi_d2ulz>:
 8005f58:	b5d0      	push	{r4, r6, r7, lr}
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <__aeabi_d2ulz+0x34>)
 8005f5e:	4606      	mov	r6, r0
 8005f60:	460f      	mov	r7, r1
 8005f62:	f7ff fc21 	bl	80057a8 <__aeabi_dmul>
 8005f66:	f7ff fef7 	bl	8005d58 <__aeabi_d2uiz>
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	f7ff fba2 	bl	80056b4 <__aeabi_ui2d>
 8005f70:	2200      	movs	r2, #0
 8005f72:	4b07      	ldr	r3, [pc, #28]	; (8005f90 <__aeabi_d2ulz+0x38>)
 8005f74:	f7ff fc18 	bl	80057a8 <__aeabi_dmul>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	4639      	mov	r1, r7
 8005f80:	f7ff fa5a 	bl	8005438 <__aeabi_dsub>
 8005f84:	f7ff fee8 	bl	8005d58 <__aeabi_d2uiz>
 8005f88:	4621      	mov	r1, r4
 8005f8a:	bdd0      	pop	{r4, r6, r7, pc}
 8005f8c:	3df00000 	.word	0x3df00000
 8005f90:	41f00000 	.word	0x41f00000

08005f94 <__aeabi_fmul>:
 8005f94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005f98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8005f9c:	bf1e      	ittt	ne
 8005f9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8005fa2:	ea92 0f0c 	teqne	r2, ip
 8005fa6:	ea93 0f0c 	teqne	r3, ip
 8005faa:	d06f      	beq.n	800608c <__aeabi_fmul+0xf8>
 8005fac:	441a      	add	r2, r3
 8005fae:	ea80 0c01 	eor.w	ip, r0, r1
 8005fb2:	0240      	lsls	r0, r0, #9
 8005fb4:	bf18      	it	ne
 8005fb6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8005fba:	d01e      	beq.n	8005ffa <__aeabi_fmul+0x66>
 8005fbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fc0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8005fc4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8005fc8:	fba0 3101 	umull	r3, r1, r0, r1
 8005fcc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8005fd0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8005fd4:	bf3e      	ittt	cc
 8005fd6:	0049      	lslcc	r1, r1, #1
 8005fd8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8005fdc:	005b      	lslcc	r3, r3, #1
 8005fde:	ea40 0001 	orr.w	r0, r0, r1
 8005fe2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8005fe6:	2afd      	cmp	r2, #253	; 0xfd
 8005fe8:	d81d      	bhi.n	8006026 <__aeabi_fmul+0x92>
 8005fea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8005ff2:	bf08      	it	eq
 8005ff4:	f020 0001 	biceq.w	r0, r0, #1
 8005ff8:	4770      	bx	lr
 8005ffa:	f090 0f00 	teq	r0, #0
 8005ffe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8006002:	bf08      	it	eq
 8006004:	0249      	lsleq	r1, r1, #9
 8006006:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800600a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800600e:	3a7f      	subs	r2, #127	; 0x7f
 8006010:	bfc2      	ittt	gt
 8006012:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8006016:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800601a:	4770      	bxgt	lr
 800601c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	3a01      	subs	r2, #1
 8006026:	dc5d      	bgt.n	80060e4 <__aeabi_fmul+0x150>
 8006028:	f112 0f19 	cmn.w	r2, #25
 800602c:	bfdc      	itt	le
 800602e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8006032:	4770      	bxle	lr
 8006034:	f1c2 0200 	rsb	r2, r2, #0
 8006038:	0041      	lsls	r1, r0, #1
 800603a:	fa21 f102 	lsr.w	r1, r1, r2
 800603e:	f1c2 0220 	rsb	r2, r2, #32
 8006042:	fa00 fc02 	lsl.w	ip, r0, r2
 8006046:	ea5f 0031 	movs.w	r0, r1, rrx
 800604a:	f140 0000 	adc.w	r0, r0, #0
 800604e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8006052:	bf08      	it	eq
 8006054:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8006058:	4770      	bx	lr
 800605a:	f092 0f00 	teq	r2, #0
 800605e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8006062:	bf02      	ittt	eq
 8006064:	0040      	lsleq	r0, r0, #1
 8006066:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800606a:	3a01      	subeq	r2, #1
 800606c:	d0f9      	beq.n	8006062 <__aeabi_fmul+0xce>
 800606e:	ea40 000c 	orr.w	r0, r0, ip
 8006072:	f093 0f00 	teq	r3, #0
 8006076:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800607a:	bf02      	ittt	eq
 800607c:	0049      	lsleq	r1, r1, #1
 800607e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8006082:	3b01      	subeq	r3, #1
 8006084:	d0f9      	beq.n	800607a <__aeabi_fmul+0xe6>
 8006086:	ea41 010c 	orr.w	r1, r1, ip
 800608a:	e78f      	b.n	8005fac <__aeabi_fmul+0x18>
 800608c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8006090:	ea92 0f0c 	teq	r2, ip
 8006094:	bf18      	it	ne
 8006096:	ea93 0f0c 	teqne	r3, ip
 800609a:	d00a      	beq.n	80060b2 <__aeabi_fmul+0x11e>
 800609c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80060a0:	bf18      	it	ne
 80060a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80060a6:	d1d8      	bne.n	800605a <__aeabi_fmul+0xc6>
 80060a8:	ea80 0001 	eor.w	r0, r0, r1
 80060ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80060b0:	4770      	bx	lr
 80060b2:	f090 0f00 	teq	r0, #0
 80060b6:	bf17      	itett	ne
 80060b8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80060bc:	4608      	moveq	r0, r1
 80060be:	f091 0f00 	teqne	r1, #0
 80060c2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80060c6:	d014      	beq.n	80060f2 <__aeabi_fmul+0x15e>
 80060c8:	ea92 0f0c 	teq	r2, ip
 80060cc:	d101      	bne.n	80060d2 <__aeabi_fmul+0x13e>
 80060ce:	0242      	lsls	r2, r0, #9
 80060d0:	d10f      	bne.n	80060f2 <__aeabi_fmul+0x15e>
 80060d2:	ea93 0f0c 	teq	r3, ip
 80060d6:	d103      	bne.n	80060e0 <__aeabi_fmul+0x14c>
 80060d8:	024b      	lsls	r3, r1, #9
 80060da:	bf18      	it	ne
 80060dc:	4608      	movne	r0, r1
 80060de:	d108      	bne.n	80060f2 <__aeabi_fmul+0x15e>
 80060e0:	ea80 0001 	eor.w	r0, r0, r1
 80060e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80060e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80060ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80060f0:	4770      	bx	lr
 80060f2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80060f6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80060fa:	4770      	bx	lr

080060fc <__aeabi_frsub>:
 80060fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8006100:	e002      	b.n	8006108 <__addsf3>
 8006102:	bf00      	nop

08006104 <__aeabi_fsub>:
 8006104:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08006108 <__addsf3>:
 8006108:	0042      	lsls	r2, r0, #1
 800610a:	bf1f      	itttt	ne
 800610c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8006110:	ea92 0f03 	teqne	r2, r3
 8006114:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8006118:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800611c:	d06a      	beq.n	80061f4 <__addsf3+0xec>
 800611e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8006122:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8006126:	bfc1      	itttt	gt
 8006128:	18d2      	addgt	r2, r2, r3
 800612a:	4041      	eorgt	r1, r0
 800612c:	4048      	eorgt	r0, r1
 800612e:	4041      	eorgt	r1, r0
 8006130:	bfb8      	it	lt
 8006132:	425b      	neglt	r3, r3
 8006134:	2b19      	cmp	r3, #25
 8006136:	bf88      	it	hi
 8006138:	4770      	bxhi	lr
 800613a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800613e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006142:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006146:	bf18      	it	ne
 8006148:	4240      	negne	r0, r0
 800614a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800614e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8006152:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8006156:	bf18      	it	ne
 8006158:	4249      	negne	r1, r1
 800615a:	ea92 0f03 	teq	r2, r3
 800615e:	d03f      	beq.n	80061e0 <__addsf3+0xd8>
 8006160:	f1a2 0201 	sub.w	r2, r2, #1
 8006164:	fa41 fc03 	asr.w	ip, r1, r3
 8006168:	eb10 000c 	adds.w	r0, r0, ip
 800616c:	f1c3 0320 	rsb	r3, r3, #32
 8006170:	fa01 f103 	lsl.w	r1, r1, r3
 8006174:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006178:	d502      	bpl.n	8006180 <__addsf3+0x78>
 800617a:	4249      	negs	r1, r1
 800617c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8006180:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006184:	d313      	bcc.n	80061ae <__addsf3+0xa6>
 8006186:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800618a:	d306      	bcc.n	800619a <__addsf3+0x92>
 800618c:	0840      	lsrs	r0, r0, #1
 800618e:	ea4f 0131 	mov.w	r1, r1, rrx
 8006192:	f102 0201 	add.w	r2, r2, #1
 8006196:	2afe      	cmp	r2, #254	; 0xfe
 8006198:	d251      	bcs.n	800623e <__addsf3+0x136>
 800619a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800619e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80061a2:	bf08      	it	eq
 80061a4:	f020 0001 	biceq.w	r0, r0, #1
 80061a8:	ea40 0003 	orr.w	r0, r0, r3
 80061ac:	4770      	bx	lr
 80061ae:	0049      	lsls	r1, r1, #1
 80061b0:	eb40 0000 	adc.w	r0, r0, r0
 80061b4:	3a01      	subs	r2, #1
 80061b6:	bf28      	it	cs
 80061b8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80061bc:	d2ed      	bcs.n	800619a <__addsf3+0x92>
 80061be:	fab0 fc80 	clz	ip, r0
 80061c2:	f1ac 0c08 	sub.w	ip, ip, #8
 80061c6:	ebb2 020c 	subs.w	r2, r2, ip
 80061ca:	fa00 f00c 	lsl.w	r0, r0, ip
 80061ce:	bfaa      	itet	ge
 80061d0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80061d4:	4252      	neglt	r2, r2
 80061d6:	4318      	orrge	r0, r3
 80061d8:	bfbc      	itt	lt
 80061da:	40d0      	lsrlt	r0, r2
 80061dc:	4318      	orrlt	r0, r3
 80061de:	4770      	bx	lr
 80061e0:	f092 0f00 	teq	r2, #0
 80061e4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80061e8:	bf06      	itte	eq
 80061ea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80061ee:	3201      	addeq	r2, #1
 80061f0:	3b01      	subne	r3, #1
 80061f2:	e7b5      	b.n	8006160 <__addsf3+0x58>
 80061f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80061f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80061fc:	bf18      	it	ne
 80061fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8006202:	d021      	beq.n	8006248 <__addsf3+0x140>
 8006204:	ea92 0f03 	teq	r2, r3
 8006208:	d004      	beq.n	8006214 <__addsf3+0x10c>
 800620a:	f092 0f00 	teq	r2, #0
 800620e:	bf08      	it	eq
 8006210:	4608      	moveq	r0, r1
 8006212:	4770      	bx	lr
 8006214:	ea90 0f01 	teq	r0, r1
 8006218:	bf1c      	itt	ne
 800621a:	2000      	movne	r0, #0
 800621c:	4770      	bxne	lr
 800621e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8006222:	d104      	bne.n	800622e <__addsf3+0x126>
 8006224:	0040      	lsls	r0, r0, #1
 8006226:	bf28      	it	cs
 8006228:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800622c:	4770      	bx	lr
 800622e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8006232:	bf3c      	itt	cc
 8006234:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8006238:	4770      	bxcc	lr
 800623a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800623e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8006242:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006246:	4770      	bx	lr
 8006248:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800624c:	bf16      	itet	ne
 800624e:	4608      	movne	r0, r1
 8006250:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8006254:	4601      	movne	r1, r0
 8006256:	0242      	lsls	r2, r0, #9
 8006258:	bf06      	itte	eq
 800625a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800625e:	ea90 0f01 	teqeq	r0, r1
 8006262:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8006266:	4770      	bx	lr

08006268 <__aeabi_ui2f>:
 8006268:	f04f 0300 	mov.w	r3, #0
 800626c:	e004      	b.n	8006278 <__aeabi_i2f+0x8>
 800626e:	bf00      	nop

08006270 <__aeabi_i2f>:
 8006270:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8006274:	bf48      	it	mi
 8006276:	4240      	negmi	r0, r0
 8006278:	ea5f 0c00 	movs.w	ip, r0
 800627c:	bf08      	it	eq
 800627e:	4770      	bxeq	lr
 8006280:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8006284:	4601      	mov	r1, r0
 8006286:	f04f 0000 	mov.w	r0, #0
 800628a:	e01c      	b.n	80062c6 <__aeabi_l2f+0x2a>

0800628c <__aeabi_ul2f>:
 800628c:	ea50 0201 	orrs.w	r2, r0, r1
 8006290:	bf08      	it	eq
 8006292:	4770      	bxeq	lr
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	e00a      	b.n	80062b0 <__aeabi_l2f+0x14>
 800629a:	bf00      	nop

0800629c <__aeabi_l2f>:
 800629c:	ea50 0201 	orrs.w	r2, r0, r1
 80062a0:	bf08      	it	eq
 80062a2:	4770      	bxeq	lr
 80062a4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80062a8:	d502      	bpl.n	80062b0 <__aeabi_l2f+0x14>
 80062aa:	4240      	negs	r0, r0
 80062ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80062b0:	ea5f 0c01 	movs.w	ip, r1
 80062b4:	bf02      	ittt	eq
 80062b6:	4684      	moveq	ip, r0
 80062b8:	4601      	moveq	r1, r0
 80062ba:	2000      	moveq	r0, #0
 80062bc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80062c0:	bf08      	it	eq
 80062c2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80062c6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80062ca:	fabc f28c 	clz	r2, ip
 80062ce:	3a08      	subs	r2, #8
 80062d0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80062d4:	db10      	blt.n	80062f8 <__aeabi_l2f+0x5c>
 80062d6:	fa01 fc02 	lsl.w	ip, r1, r2
 80062da:	4463      	add	r3, ip
 80062dc:	fa00 fc02 	lsl.w	ip, r0, r2
 80062e0:	f1c2 0220 	rsb	r2, r2, #32
 80062e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80062e8:	fa20 f202 	lsr.w	r2, r0, r2
 80062ec:	eb43 0002 	adc.w	r0, r3, r2
 80062f0:	bf08      	it	eq
 80062f2:	f020 0001 	biceq.w	r0, r0, #1
 80062f6:	4770      	bx	lr
 80062f8:	f102 0220 	add.w	r2, r2, #32
 80062fc:	fa01 fc02 	lsl.w	ip, r1, r2
 8006300:	f1c2 0220 	rsb	r2, r2, #32
 8006304:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8006308:	fa21 f202 	lsr.w	r2, r1, r2
 800630c:	eb43 0002 	adc.w	r0, r3, r2
 8006310:	bf08      	it	eq
 8006312:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8006316:	4770      	bx	lr

08006318 <__aeabi_f2uiz>:
 8006318:	0042      	lsls	r2, r0, #1
 800631a:	d20e      	bcs.n	800633a <__aeabi_f2uiz+0x22>
 800631c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8006320:	d30b      	bcc.n	800633a <__aeabi_f2uiz+0x22>
 8006322:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8006326:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800632a:	d409      	bmi.n	8006340 <__aeabi_f2uiz+0x28>
 800632c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8006330:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006334:	fa23 f002 	lsr.w	r0, r3, r2
 8006338:	4770      	bx	lr
 800633a:	f04f 0000 	mov.w	r0, #0
 800633e:	4770      	bx	lr
 8006340:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8006344:	d101      	bne.n	800634a <__aeabi_f2uiz+0x32>
 8006346:	0242      	lsls	r2, r0, #9
 8006348:	d102      	bne.n	8006350 <__aeabi_f2uiz+0x38>
 800634a:	f04f 30ff 	mov.w	r0, #4294967295
 800634e:	4770      	bx	lr
 8006350:	f04f 0000 	mov.w	r0, #0
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop

08006358 <main>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006358:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800635c:	4858      	ldr	r0, [pc, #352]	; (80064c0 <main+0x168>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800635e:	4959      	ldr	r1, [pc, #356]	; (80064c4 <main+0x16c>)
 8006360:	6802      	ldr	r2, [r0, #0]
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8006362:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8006366:	f042 0210 	orr.w	r2, r2, #16
 800636a:	6002      	str	r2, [r0, #0]
 800636c:	68ca      	ldr	r2, [r1, #12]
  reg_value  =  (reg_value                                   |
 800636e:	4b56      	ldr	r3, [pc, #344]	; (80064c8 <main+0x170>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006370:	4022      	ands	r2, r4
  reg_value  =  (reg_value                                   |
 8006372:	4313      	orrs	r3, r2
 8006374:	b09f      	sub	sp, #124	; 0x7c
  SCB->AIRCR =  reg_value;
 8006376:	60cb      	str	r3, [r1, #12]
  HAL_InitTick(TICK_INT_PRIORITY);
 8006378:	200f      	movs	r0, #15
 800637a:	f7fd fd3f 	bl	8003dfc <HAL_InitTick.isra.0>
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800637e:	4b53      	ldr	r3, [pc, #332]	; (80064cc <main+0x174>)

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006380:	4953      	ldr	r1, [pc, #332]	; (80064d0 <main+0x178>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8006382:	699a      	ldr	r2, [r3, #24]
 8006384:	f042 0201 	orr.w	r2, r2, #1
 8006388:	619a      	str	r2, [r3, #24]
 800638a:	699a      	ldr	r2, [r3, #24]
 800638c:	f002 0201 	and.w	r2, r2, #1
 8006390:	9210      	str	r2, [sp, #64]	; 0x40
 8006392:	9a10      	ldr	r2, [sp, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8006394:	69da      	ldr	r2, [r3, #28]
 8006396:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800639a:	61da      	str	r2, [r3, #28]
 800639c:	69da      	ldr	r2, [r3, #28]
 800639e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80063a2:	920f      	str	r2, [sp, #60]	; 0x3c
 80063a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80063a6:	684a      	ldr	r2, [r1, #4]
 80063a8:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80063ac:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80063b0:	604a      	str	r2, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	f002 020c 	and.w	r2, r2, #12
 80063b8:	2a04      	cmp	r2, #4
 80063ba:	d060      	beq.n	800647e <main+0x126>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	f002 020c 	and.w	r2, r2, #12
 80063c2:	2a08      	cmp	r2, #8
 80063c4:	d058      	beq.n	8006478 <main+0x120>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063c6:	4a41      	ldr	r2, [pc, #260]	; (80064cc <main+0x174>)
  return uwTick;
 80063c8:	4842      	ldr	r0, [pc, #264]	; (80064d4 <main+0x17c>)
 80063ca:	6813      	ldr	r3, [r2, #0]
 80063cc:	9007      	str	r0, [sp, #28]
 80063ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063d2:	6013      	str	r3, [r2, #0]
 80063d4:	6801      	ldr	r1, [r0, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063d6:	e003      	b.n	80063e0 <main+0x88>
 80063d8:	6803      	ldr	r3, [r0, #0]
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063da:	1a5b      	subs	r3, r3, r1
 80063dc:	2b64      	cmp	r3, #100	; 0x64
 80063de:	d849      	bhi.n	8006474 <main+0x11c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063e0:	6813      	ldr	r3, [r2, #0]
 80063e2:	039d      	lsls	r5, r3, #14
 80063e4:	d5f8      	bpl.n	80063d8 <main+0x80>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063e6:	4b39      	ldr	r3, [pc, #228]	; (80064cc <main+0x174>)
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	f002 020c 	and.w	r2, r2, #12
 80063ee:	2a08      	cmp	r2, #8
 80063f0:	d038      	beq.n	8006464 <main+0x10c>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063f2:	2100      	movs	r1, #0
 80063f4:	4a38      	ldr	r2, [pc, #224]	; (80064d8 <main+0x180>)
 80063f6:	6611      	str	r1, [r2, #96]	; 0x60
 80063f8:	9a07      	ldr	r2, [sp, #28]
 80063fa:	6811      	ldr	r1, [r2, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063fc:	e004      	b.n	8006408 <main+0xb0>
 80063fe:	9a07      	ldr	r2, [sp, #28]
 8006400:	6812      	ldr	r2, [r2, #0]
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006402:	1a52      	subs	r2, r2, r1
 8006404:	2a02      	cmp	r2, #2
 8006406:	d835      	bhi.n	8006474 <main+0x11c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	0194      	lsls	r4, r2, #6
 800640c:	d4f7      	bmi.n	80063fe <main+0xa6>

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800640e:	2001      	movs	r0, #1
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006410:	685a      	ldr	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8006412:	4931      	ldr	r1, [pc, #196]	; (80064d8 <main+0x180>)
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006414:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006418:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800641a:	685a      	ldr	r2, [r3, #4]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800641c:	4c2b      	ldr	r4, [pc, #172]	; (80064cc <main+0x174>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800641e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8006422:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8006426:	605a      	str	r2, [r3, #4]
 8006428:	9b07      	ldr	r3, [sp, #28]
        __HAL_RCC_PLL_ENABLE();
 800642a:	6608      	str	r0, [r1, #96]	; 0x60
 800642c:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800642e:	e004      	b.n	800643a <main+0xe2>
 8006430:	9b07      	ldr	r3, [sp, #28]
 8006432:	681b      	ldr	r3, [r3, #0]
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006434:	1a9b      	subs	r3, r3, r2
 8006436:	2b02      	cmp	r3, #2
 8006438:	d81c      	bhi.n	8006474 <main+0x11c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	0198      	lsls	r0, r3, #6
 800643e:	d5f7      	bpl.n	8006430 <main+0xd8>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006440:	4a1f      	ldr	r2, [pc, #124]	; (80064c0 <main+0x168>)
 8006442:	6813      	ldr	r3, [r2, #0]
 8006444:	f013 0f06 	tst.w	r3, #6
 8006448:	d11e      	bne.n	8006488 <main+0x130>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800644a:	6813      	ldr	r3, [r2, #0]
 800644c:	f023 0307 	bic.w	r3, r3, #7
 8006450:	f043 0302 	orr.w	r3, r3, #2
 8006454:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006456:	6813      	ldr	r3, [r2, #0]
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	2b02      	cmp	r3, #2
 800645e:	d013      	beq.n	8006488 <main+0x130>
  __ASM volatile ("cpsid i" : : : "memory");
 8006460:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8006462:	e7fe      	b.n	8006462 <main+0x10a>
        pll_config = RCC->CFGR;
 8006464:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006466:	03d9      	lsls	r1, r3, #15
 8006468:	d504      	bpl.n	8006474 <main+0x11c>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800646a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800646e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006472:	d0e5      	beq.n	8006440 <main+0xe8>
 8006474:	b672      	cpsid	i
 8006476:	e7fe      	b.n	8006476 <main+0x11e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	03de      	lsls	r6, r3, #15
 800647c:	d5a3      	bpl.n	80063c6 <main+0x6e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800647e:	4b13      	ldr	r3, [pc, #76]	; (80064cc <main+0x174>)
 8006480:	4a14      	ldr	r2, [pc, #80]	; (80064d4 <main+0x17c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	9207      	str	r2, [sp, #28]
 8006486:	e7ae      	b.n	80063e6 <main+0x8e>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006488:	4b10      	ldr	r3, [pc, #64]	; (80064cc <main+0x174>)
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006490:	605a      	str	r2, [r3, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8006498:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80064a0:	605a      	str	r2, [r3, #4]
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	0192      	lsls	r2, r2, #6
 80064a6:	d5db      	bpl.n	8006460 <main+0x108>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	9c07      	ldr	r4, [sp, #28]
 80064ac:	f022 0203 	bic.w	r2, r2, #3
 80064b0:	f042 0202 	orr.w	r2, r2, #2
 80064b4:	605a      	str	r2, [r3, #4]
    /* Get Start Tick */
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064b6:	f241 3088 	movw	r0, #5000	; 0x1388
 80064ba:	6821      	ldr	r1, [r4, #0]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064bc:	e012      	b.n	80064e4 <main+0x18c>
 80064be:	bf00      	nop
 80064c0:	40022000 	.word	0x40022000
 80064c4:	e000ed00 	.word	0xe000ed00
 80064c8:	05fa0300 	.word	0x05fa0300
 80064cc:	40021000 	.word	0x40021000
 80064d0:	40010000 	.word	0x40010000
 80064d4:	20000208 	.word	0x20000208
 80064d8:	42420000 	.word	0x42420000
 80064dc:	6822      	ldr	r2, [r4, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064de:	1a52      	subs	r2, r2, r1
 80064e0:	4282      	cmp	r2, r0
 80064e2:	d8bd      	bhi.n	8006460 <main+0x108>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	f002 020c 	and.w	r2, r2, #12
 80064ea:	2a08      	cmp	r2, #8
 80064ec:	d1f6      	bne.n	80064dc <main+0x184>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064ee:	4abb      	ldr	r2, [pc, #748]	; (80067dc <main+0x484>)
 80064f0:	6813      	ldr	r3, [r2, #0]
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d90a      	bls.n	8006510 <main+0x1b8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064fa:	6813      	ldr	r3, [r2, #0]
 80064fc:	f023 0307 	bic.w	r3, r3, #7
 8006500:	f043 0302 	orr.w	r3, r3, #2
 8006504:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006506:	6813      	ldr	r3, [r2, #0]
 8006508:	f003 0307 	and.w	r3, r3, #7
 800650c:	2b02      	cmp	r3, #2
 800650e:	d1a7      	bne.n	8006460 <main+0x108>

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006510:	4cb3      	ldr	r4, [pc, #716]	; (80067e0 <main+0x488>)
{
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006512:	4ab4      	ldr	r2, [pc, #720]	; (80067e4 <main+0x48c>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006514:	6863      	ldr	r3, [r4, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006516:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800651a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800651e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006522:	6063      	str	r3, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006524:	6863      	ldr	r3, [r4, #4]
 8006526:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800652a:	6063      	str	r3, [r4, #4]
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800652c:	f240 2301 	movw	r3, #513	; 0x201
 8006530:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006534:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8006536:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
  uint32_t sysclockfreq = 0U;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800653a:	6863      	ldr	r3, [r4, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800653c:	f003 020c 	and.w	r2, r3, #12
 8006540:	2a08      	cmp	r2, #8
 8006542:	f001 8381 	beq.w	8007c48 <main+0x18f0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006546:	4da8      	ldr	r5, [pc, #672]	; (80067e8 <main+0x490>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006548:	2600      	movs	r6, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800654a:	4ca5      	ldr	r4, [pc, #660]	; (80067e0 <main+0x488>)
 800654c:	4aa7      	ldr	r2, [pc, #668]	; (80067ec <main+0x494>)
 800654e:	6863      	ldr	r3, [r4, #4]
 8006550:	f8df a29c 	ldr.w	sl, [pc, #668]	; 80067f0 <main+0x498>
 8006554:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006558:	4413      	add	r3, r2
 800655a:	f893 35e0 	ldrb.w	r3, [r3, #1504]	; 0x5e0
 800655e:	4fa5      	ldr	r7, [pc, #660]	; (80067f4 <main+0x49c>)
 8006560:	40dd      	lsrs	r5, r3
 8006562:	4ba5      	ldr	r3, [pc, #660]	; (80067f8 <main+0x4a0>)
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8006564:	f04f 0800 	mov.w	r8, #0
  HAL_InitTick(uwTickPrio);
 8006568:	6858      	ldr	r0, [r3, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800656a:	601d      	str	r5, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800656c:	f7fd fc46 	bl	8003dfc <HAL_InitTick.isra.0>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006570:	961a      	str	r6, [sp, #104]	; 0x68
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8006572:	69a3      	ldr	r3, [r4, #24]
 8006574:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8006578:	f043 0310 	orr.w	r3, r3, #16
 800657c:	61a3      	str	r3, [r4, #24]
 800657e:	69a3      	ldr	r3, [r4, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006580:	2202      	movs	r2, #2
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8006582:	f003 0310 	and.w	r3, r3, #16
 8006586:	930e      	str	r3, [sp, #56]	; 0x38
 8006588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800658a:	69a3      	ldr	r3, [r4, #24]
 800658c:	489b      	ldr	r0, [pc, #620]	; (80067fc <main+0x4a4>)
 800658e:	f043 0320 	orr.w	r3, r3, #32
 8006592:	61a3      	str	r3, [r4, #24]
 8006594:	69a3      	ldr	r3, [r4, #24]
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8006596:	f04f 0903 	mov.w	r9, #3
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	930d      	str	r3, [sp, #52]	; 0x34
 80065a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80065a2:	69a3      	ldr	r3, [r4, #24]
 80065a4:	f043 0304 	orr.w	r3, r3, #4
 80065a8:	61a3      	str	r3, [r4, #24]
 80065aa:	69a3      	ldr	r3, [r4, #24]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	930c      	str	r3, [sp, #48]	; 0x30
 80065b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80065b4:	69a3      	ldr	r3, [r4, #24]
 80065b6:	f043 0308 	orr.w	r3, r3, #8
 80065ba:	61a3      	str	r3, [r4, #24]
 80065bc:	69a3      	ldr	r3, [r4, #24]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80065c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065c6:	4b8e      	ldr	r3, [pc, #568]	; (8006800 <main+0x4a8>)
 80065c8:	6103      	str	r3, [r0, #16]
 80065ca:	4b8e      	ldr	r3, [pc, #568]	; (8006804 <main+0x4ac>)
 80065cc:	f8ca 1010 	str.w	r1, [sl, #16]
 80065d0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pin = LED_Pin;
 80065d2:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065d4:	921b      	str	r2, [sp, #108]	; 0x6c
	GPIO_InitStruct.Pin = LED_Pin;
 80065d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80065da:	4659      	mov	r1, fp
	GPIO_InitStruct.Pin = LED_Pin;
 80065dc:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80065e0:	f7fa ff72 	bl	80014c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 80065e4:	f24c 023f 	movw	r2, #49215	; 0xc03f
 80065e8:	2301      	movs	r3, #1
 80065ea:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
 80065ee:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065f2:	f7fa ff69 	bl	80014c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 80065f6:	22ff      	movs	r2, #255	; 0xff
 80065f8:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065fa:	4650      	mov	r0, sl
	GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 80065fc:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8006600:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006604:	f7fa ff60 	bl	80014c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8006608:	f640 4203 	movw	r2, #3075	; 0xc03
 800660c:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800660e:	4638      	mov	r0, r7
	GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8006610:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8006614:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006618:	f7fa ff56 	bl	80014c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 800661c:	2204      	movs	r2, #4
 800661e:	2300      	movs	r3, #0
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006620:	961a      	str	r6, [sp, #104]	; 0x68
	GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 8006622:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	HAL_GPIO_Init(SYSTEM_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8006626:	f7fa ff4f 	bl	80014c8 <HAL_GPIO_Init>
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800662a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800662e:	9a07      	ldr	r2, [sp, #28]
	hi2c1.Init.ClockSpeed = 400000;
 8006630:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8006808 <main+0x4b0>
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006634:	6153      	str	r3, [r2, #20]
	hi2c1.Init.ClockSpeed = 400000;
 8006636:	4b75      	ldr	r3, [pc, #468]	; (800680c <main+0x4b4>)
	hi2c1.Init.OwnAddress1 = 0;
 8006638:	e9c2 6603 	strd	r6, r6, [r2, #12]
	hi2c1.Init.ClockSpeed = 400000;
 800663c:	e9c2 8301 	strd	r8, r3, [r2, #4]
	hi2c1.Init.OwnAddress2 = 0;
 8006640:	e9c2 6606 	strd	r6, r6, [r2, #24]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006644:	e9c2 6608 	strd	r6, r6, [r2, #32]
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006648:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 800664c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8006650:	2a00      	cmp	r2, #0
 8006652:	f001 82d9 	beq.w	8007c08 <main+0x18b0>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006656:	2324      	movs	r3, #36	; 0x24
 8006658:	9807      	ldr	r0, [sp, #28]
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800665a:	4961      	ldr	r1, [pc, #388]	; (80067e0 <main+0x488>)
 800665c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006660:	6843      	ldr	r3, [r0, #4]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006662:	6886      	ldr	r6, [r0, #8]
  __HAL_I2C_DISABLE(hi2c);
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	f022 0201 	bic.w	r2, r2, #1
 800666a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006672:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	684a      	ldr	r2, [r1, #4]
 800667e:	495b      	ldr	r1, [pc, #364]	; (80067ec <main+0x494>)
 8006680:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8006684:	440a      	add	r2, r1
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006686:	4962      	ldr	r1, [pc, #392]	; (8006810 <main+0x4b8>)
 8006688:	f892 25f0 	ldrb.w	r2, [r2, #1520]	; 0x5f0
 800668c:	428e      	cmp	r6, r1
 800668e:	bf94      	ite	ls
 8006690:	4960      	ldrls	r1, [pc, #384]	; (8006814 <main+0x4bc>)
 8006692:	4961      	ldrhi	r1, [pc, #388]	; (8006818 <main+0x4c0>)
 8006694:	fa25 f202 	lsr.w	r2, r5, r2
 8006698:	428a      	cmp	r2, r1
 800669a:	bf8c      	ite	hi
 800669c:	2100      	movhi	r1, #0
 800669e:	2101      	movls	r1, #1
 80066a0:	2900      	cmp	r1, #0
 80066a2:	f041 825f 	bne.w	8007b64 <main+0x180c>
  freqrange = I2C_FREQRANGE(pclk1);
 80066a6:	495d      	ldr	r1, [pc, #372]	; (800681c <main+0x4c4>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066a8:	6858      	ldr	r0, [r3, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80066aa:	fbb2 f1f1 	udiv	r1, r2, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066ae:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80066b2:	4308      	orrs	r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066b4:	4c56      	ldr	r4, [pc, #344]	; (8006810 <main+0x4b8>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066b6:	6058      	str	r0, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066b8:	6a18      	ldr	r0, [r3, #32]
 80066ba:	42a6      	cmp	r6, r4
 80066bc:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80066c0:	f201 82d8 	bhi.w	8007c74 <main+0x191c>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066c4:	3a01      	subs	r2, #1
 80066c6:	0076      	lsls	r6, r6, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066c8:	3101      	adds	r1, #1
 80066ca:	4301      	orrs	r1, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066cc:	fbb2 f2f6 	udiv	r2, r2, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066d0:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066d2:	f640 71fc 	movw	r1, #4092	; 0xffc
 80066d6:	69d8      	ldr	r0, [r3, #28]
 80066d8:	3201      	adds	r2, #1
 80066da:	f420 404f 	bic.w	r0, r0, #52992	; 0xcf00
 80066de:	420a      	tst	r2, r1
 80066e0:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80066e4:	f041 8307 	bne.w	8007cf6 <main+0x199e>
 80066e8:	2204      	movs	r2, #4
 80066ea:	4302      	orrs	r2, r0
 80066ec:	61da      	str	r2, [r3, #28]
  hi2c->State = HAL_I2C_STATE_READY;
 80066ee:	2020      	movs	r0, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066f0:	2200      	movs	r2, #0
	huart1.Init.BaudRate = 115200;
 80066f2:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
	huart1.Init.Mode = UART_MODE_TX_RX;
 80066f6:	260c      	movs	r6, #12
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80066f8:	6819      	ldr	r1, [r3, #0]
 80066fa:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80066fe:	f021 0cc0 	bic.w	ip, r1, #192	; 0xc0
 8006702:	e9de 1408 	ldrd	r1, r4, [lr, #32]
 8006706:	4321      	orrs	r1, r4
 8006708:	ea41 010c 	orr.w	r1, r1, ip
 800670c:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800670e:	6899      	ldr	r1, [r3, #8]
 8006710:	f421 4c03 	bic.w	ip, r1, #33536	; 0x8300
 8006714:	f02c 0cff 	bic.w	ip, ip, #255	; 0xff
 8006718:	e9de 4104 	ldrd	r4, r1, [lr, #16]
 800671c:	4321      	orrs	r1, r4
 800671e:	ea41 010c 	orr.w	r1, r1, ip
 8006722:	6099      	str	r1, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006724:	68d9      	ldr	r1, [r3, #12]
 8006726:	f021 0cff 	bic.w	ip, r1, #255	; 0xff
 800672a:	e9de 1406 	ldrd	r1, r4, [lr, #24]
 800672e:	4321      	orrs	r1, r4
 8006730:	ea41 010c 	orr.w	r1, r1, ip
 8006734:	60d9      	str	r1, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 8006736:	6819      	ldr	r1, [r3, #0]
 8006738:	f041 0101 	orr.w	r1, r1, #1
 800673c:	6019      	str	r1, [r3, #0]
	huart1.Instance = USART1;
 800673e:	4b38      	ldr	r3, [pc, #224]	; (8006820 <main+0x4c8>)
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006740:	f8ce 2044 	str.w	r2, [lr, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006744:	f88e 0041 	strb.w	r0, [lr, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006748:	f8ce 2034 	str.w	r2, [lr, #52]	; 0x34
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800674c:	f88e 2042 	strb.w	r2, [lr, #66]	; 0x42
 8006750:	f8ce 306c 	str.w	r3, [lr, #108]	; 0x6c
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006754:	f89e 30a9 	ldrb.w	r3, [lr, #169]	; 0xa9
	huart1.Init.StopBits = UART_STOPBITS_1;
 8006758:	e9ce 221d 	strd	r2, r2, [lr, #116]	; 0x74
	huart1.Init.BaudRate = 115200;
 800675c:	f8ce 7070 	str.w	r7, [lr, #112]	; 0x70
	huart1.Init.Mode = UART_MODE_TX_RX;
 8006760:	f8ce 6080 	str.w	r6, [lr, #128]	; 0x80
	huart1.Init.Parity = UART_PARITY_NONE;
 8006764:	f8ce 207c 	str.w	r2, [lr, #124]	; 0x7c
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006768:	f8ce 2084 	str.w	r2, [lr, #132]	; 0x84
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800676c:	f8ce 2088 	str.w	r2, [lr, #136]	; 0x88
 8006770:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8006774:	2b00      	cmp	r3, #0
 8006776:	f001 82d3 	beq.w	8007d20 <main+0x19c8>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800677a:	2324      	movs	r3, #36	; 0x24
 800677c:	9c07      	ldr	r4, [sp, #28]

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800677e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  huart->gState = HAL_UART_STATE_BUSY;
 8006780:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
  __HAL_UART_DISABLE(huart);
 8006784:	68d3      	ldr	r3, [r2, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006786:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8006788:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800678c:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800678e:	6913      	ldr	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006790:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006792:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006796:	430b      	orrs	r3, r1
 8006798:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800679a:	6f63      	ldr	r3, [r4, #116]	; 0x74
  MODIFY_REG(huart->Instance->CR1,
 800679c:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800679e:	4303      	orrs	r3, r0
 80067a0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
  MODIFY_REG(huart->Instance->CR1,
 80067a4:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80067a8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80067ac:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80067ae:	430b      	orrs	r3, r1
 80067b0:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067b2:	6953      	ldr	r3, [r2, #20]
 80067b4:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80067b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067bc:	430b      	orrs	r3, r1
 80067be:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80067c0:	4b17      	ldr	r3, [pc, #92]	; (8006820 <main+0x4c8>)
 80067c2:	429a      	cmp	r2, r3
 80067c4:	f001 82a0 	beq.w	8007d08 <main+0x19b0>
 80067c8:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <main+0x488>)
 80067ca:	4908      	ldr	r1, [pc, #32]	; (80067ec <main+0x494>)
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80067d2:	440b      	add	r3, r1
 80067d4:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 80067d8:	e024      	b.n	8006824 <main+0x4cc>
 80067da:	bf00      	nop
 80067dc:	40022000 	.word	0x40022000
 80067e0:	40021000 	.word	0x40021000
 80067e4:	0801d26c 	.word	0x0801d26c
 80067e8:	007a1200 	.word	0x007a1200
 80067ec:	0800c908 	.word	0x0800c908
 80067f0:	40010800 	.word	0x40010800
 80067f4:	40010c00 	.word	0x40010c00
 80067f8:	20000000 	.word	0x20000000
 80067fc:	40011000 	.word	0x40011000
 8006800:	e03f0000 	.word	0xe03f0000
 8006804:	0c030000 	.word	0x0c030000
 8006808:	40005400 	.word	0x40005400
 800680c:	00061a80 	.word	0x00061a80
 8006810:	000186a0 	.word	0x000186a0
 8006814:	001e847f 	.word	0x001e847f
 8006818:	003d08ff 	.word	0x003d08ff
 800681c:	000f4240 	.word	0x000f4240
 8006820:	40013800 	.word	0x40013800
 8006824:	40dd      	lsrs	r5, r3
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006826:	2319      	movs	r3, #25
 8006828:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800682c:	fb03 f505 	mul.w	r5, r3, r5
 8006830:	f8dc 3070 	ldr.w	r3, [ip, #112]	; 0x70
 8006834:	2764      	movs	r7, #100	; 0x64
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	fbb5 f3f3 	udiv	r3, r5, r3
 800683c:	fbb3 f6f7 	udiv	r6, r3, r7
 8006840:	fb07 3316 	mls	r3, r7, r6, r3
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	3332      	adds	r3, #50	; 0x32
 8006848:	fbb3 f3f7 	udiv	r3, r3, r7
  huart->gState = HAL_UART_STATE_READY;
 800684c:	2120      	movs	r1, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800684e:	2400      	movs	r4, #0
 8006850:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006854:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8006858:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800685a:	6913      	ldr	r3, [r2, #16]
 800685c:	f8df 837c 	ldr.w	r8, [pc, #892]	; 8006bdc <main+0x884>
 8006860:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006864:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006866:	6953      	ldr	r3, [r2, #20]

void LCD_Init(void)
{	
	LCD_RST_R
	HAL_Delay(200);
 8006868:	20c8      	movs	r0, #200	; 0xc8
 800686a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800686e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8006870:	68d3      	ldr	r3, [r2, #12]
 8006872:	f8df a36c 	ldr.w	sl, [pc, #876]	; 8006be0 <main+0x888>
 8006876:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800687a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800687c:	f8cc 40ac 	str.w	r4, [ip, #172]	; 0xac
  huart->gState = HAL_UART_STATE_READY;
 8006880:	f88c 10a9 	strb.w	r1, [ip, #169]	; 0xa9
  huart->RxState = HAL_UART_STATE_READY;
 8006884:	f88c 10aa 	strb.w	r1, [ip, #170]	; 0xaa
 8006888:	f8c8 5010 	str.w	r5, [r8, #16]
 800688c:	f7f9 fc60 	bl	8000150 <HAL_Delay>
    GPIOx->BSRR = GPIO_Pin;
 8006890:	f44f 6300 	mov.w	r3, #2048	; 0x800
	LCD_RST_S
	
  LCD_Send_Cmd(HX8357_SLPOUT);
 8006894:	2011      	movs	r0, #17
 8006896:	f8c8 3010 	str.w	r3, [r8, #16]
 800689a:	f7f9 fc63 	bl	8000164 <LCD_Send_Cmd>
  HAL_Delay(120);
 800689e:	2078      	movs	r0, #120	; 0x78
 80068a0:	f7f9 fc56 	bl	8000150 <HAL_Delay>
	LCD_Send_Cmd(HX8357_COLMOD);
 80068a4:	203a      	movs	r0, #58	; 0x3a
 80068a6:	f7f9 fc5d 	bl	8000164 <LCD_Send_Cmd>
	LCD_Send_Dat(0x55);
 80068aa:	2055      	movs	r0, #85	; 0x55
 80068ac:	f7f9 fcba 	bl	8000224 <LCD_Send_Dat>
  HAL_Delay(5);
 80068b0:	2005      	movs	r0, #5
 80068b2:	f7f9 fc4d 	bl	8000150 <HAL_Delay>
  LCD_Send_Cmd(HX8357_DISPON);
 80068b6:	2029      	movs	r0, #41	; 0x29
 80068b8:	f7f9 fc54 	bl	8000164 <LCD_Send_Cmd>
	LCD_Orientation(DEFAULT_ORIENTATION);
}

void LCD_Orientation(uint8_t orientation)
{
	LCD_Send_Cmd(HX8357_MADCTL);
 80068bc:	2036      	movs	r0, #54	; 0x36
 80068be:	f7f9 fc51 	bl	8000164 <LCD_Send_Cmd>
	switch (orientation)
	{
	case 0:
	if (BGR) LCD_Send_Dat(MADCTL_BGR);
 80068c2:	2008      	movs	r0, #8
 80068c4:	f7f9 fcae 	bl	8000224 <LCD_Send_Dat>
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80068c8:	f240 13df 	movw	r3, #479	; 0x1df
 80068cc:	4621      	mov	r1, r4
 80068ce:	4620      	mov	r0, r4
 80068d0:	f240 123f 	movw	r2, #319	; 0x13f
 80068d4:	f7f9 fd2e 	bl	8000334 <LCD_Window>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80068d8:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80068dc:	f44f 3c16 	mov.w	ip, #153600	; 0x25800
 80068e0:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 80068e4:	4bbf      	ldr	r3, [pc, #764]	; (8006be4 <main+0x88c>)
    GPIOx->BSRR = GPIO_Pin;
 80068e6:	2201      	movs	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80068e8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80068ec:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80068f0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80068f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80068f8:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80068fc:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 8006900:	f8c8 2010 	str.w	r2, [r8, #16]
 8006904:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 8006908:	611d      	str	r5, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800690a:	2220      	movs	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800690c:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800690e:	2640      	movs	r6, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006910:	f8ca 4010 	str.w	r4, [sl, #16]
 8006914:	f8ca 1010 	str.w	r1, [sl, #16]
 8006918:	f8ca 5010 	str.w	r5, [sl, #16]
 800691c:	f8ca 0010 	str.w	r0, [sl, #16]
 8006920:	f8ca 9010 	str.w	r9, [sl, #16]
 8006924:	f8ca e010 	str.w	lr, [sl, #16]
 8006928:	6119      	str	r1, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800692a:	2180      	movs	r1, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800692c:	611c      	str	r4, [r3, #16]
 800692e:	611f      	str	r7, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8006930:	611a      	str	r2, [r3, #16]
 8006932:	611e      	str	r6, [r3, #16]
 8006934:	6119      	str	r1, [r3, #16]
 8006936:	2110      	movs	r1, #16
 8006938:	f8ca 1010 	str.w	r1, [sl, #16]
 800693c:	f8ca 2010 	str.w	r2, [sl, #16]
 8006940:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006942:	f8c8 5010 	str.w	r5, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8006946:	f8c8 2010 	str.w	r2, [r8, #16]
 800694a:	f44f 6280 	mov.w	r2, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 800694e:	f1bc 0c01 	subs.w	ip, ip, #1
 8006952:	f8c8 2010 	str.w	r2, [r8, #16]
 8006956:	d1c6      	bne.n	80068e6 <main+0x58e>
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8006958:	2101      	movs	r1, #1
 800695a:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 800695e:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8006962:	4608      	mov	r0, r1
 8006964:	f7f9 fce6 	bl	8000334 <LCD_Window>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006968:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 800696c:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 8006970:	4e9d      	ldr	r6, [pc, #628]	; (8006be8 <main+0x890>)
    GPIOx->BSRR = GPIO_Pin;
 8006972:	f8df a268 	ldr.w	sl, [pc, #616]	; 8006bdc <main+0x884>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006976:	4a9b      	ldr	r2, [pc, #620]	; (8006be4 <main+0x88c>)
 8006978:	4b99      	ldr	r3, [pc, #612]	; (8006be0 <main+0x888>)
    GPIOx->BSRR = GPIO_Pin;
 800697a:	2101      	movs	r1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800697c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8006980:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006984:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8006988:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800698c:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8006990:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8006994:	f8ca 1010 	str.w	r1, [sl, #16]
 8006998:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800699c:	f8c2 c010 	str.w	ip, [r2, #16]
 80069a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069a4:	6115      	str	r5, [r2, #16]
 80069a6:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 80069aa:	611f      	str	r7, [r3, #16]
 80069ac:	611c      	str	r4, [r3, #16]
 80069ae:	f8c3 c010 	str.w	ip, [r3, #16]
 80069b2:	611d      	str	r5, [r3, #16]
 80069b4:	f8c3 9010 	str.w	r9, [r3, #16]
 80069b8:	f8c3 8010 	str.w	r8, [r3, #16]
 80069bc:	6114      	str	r4, [r2, #16]
 80069be:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 80069c2:	6117      	str	r7, [r2, #16]
 80069c4:	6110      	str	r0, [r2, #16]
 80069c6:	6111      	str	r1, [r2, #16]
 80069c8:	f8c2 e010 	str.w	lr, [r2, #16]
 80069cc:	6114      	str	r4, [r2, #16]
 80069ce:	6118      	str	r0, [r3, #16]
 80069d0:	6119      	str	r1, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80069d2:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80069d4:	f8ca c010 	str.w	ip, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80069d8:	f8ca 1010 	str.w	r1, [sl, #16]
 80069dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80069e0:	3e01      	subs	r6, #1
 80069e2:	f8ca 1010 	str.w	r1, [sl, #16]
 80069e6:	d1c8      	bne.n	800697a <main+0x622>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_36, 1, RED);
 80069e8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80069ec:	217f      	movs	r1, #127	; 0x7f
 80069ee:	2014      	movs	r0, #20
 80069f0:	4a7e      	ldr	r2, [pc, #504]	; (8006bec <main+0x894>)
 80069f2:	f7fe fc51 	bl	8005298 <LCD_Font.constprop.3>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_36, 1, BLACK);
 80069f6:	217f      	movs	r1, #127	; 0x7f
 80069f8:	2014      	movs	r0, #20
 80069fa:	4a7c      	ldr	r2, [pc, #496]	; (8006bec <main+0x894>)
 80069fc:	f7fd faca 	bl	8003f94 <LCD_Font.constprop.2>
	LCD_Font(20, 127, "Waiting for I2C devices", &DejaVu_Sans_36, 1, RED);
 8006a00:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8006a04:	217f      	movs	r1, #127	; 0x7f
 8006a06:	2014      	movs	r0, #20
 8006a08:	4a79      	ldr	r2, [pc, #484]	; (8006bf0 <main+0x898>)
 8006a0a:	4634      	mov	r4, r6
 8006a0c:	f7fe fc44 	bl	8005298 <LCD_Font.constprop.3>
 8006a10:	4d78      	ldr	r5, [pc, #480]	; (8006bf4 <main+0x89c>)
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8006a12:	b2a0      	uxth	r0, r4
 8006a14:	4659      	mov	r1, fp
    uint16_t dt[1] = {0};
 8006a16:	f8ad 6060 	strh.w	r6, [sp, #96]	; 0x60
	for (uint16_t i = 0; i < 4096; i++) eeprom[i] = AT24XX_Read(i);
 8006a1a:	3401      	adds	r4, #1
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8006a1c:	f7fc faf6 	bl	800300c <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8006a20:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8006a24:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8006a28:	f805 3f01 	strb.w	r3, [r5, #1]!
 8006a2c:	d1f1      	bne.n	8006a12 <main+0x6ba>
	LCD_Font(20, 127, "Waiting for I2C devices", &DejaVu_Sans_36, 1, BLACK);
 8006a2e:	217f      	movs	r1, #127	; 0x7f
 8006a30:	2014      	movs	r0, #20
 8006a32:	4a6f      	ldr	r2, [pc, #444]	; (8006bf0 <main+0x898>)
 8006a34:	f7fd faae 	bl	8003f94 <LCD_Font.constprop.2>
}

void BME280_Init(void) {
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 8006a38:	f240 53f2 	movw	r3, #1522	; 0x5f2
    cmd[1] = 0x05; // Humidity oversampling x16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	4659      	mov	r1, fp
 8006a40:	20ec      	movs	r0, #236	; 0xec
    cmd[0] = 0xF2; // ctrl_hum
 8006a42:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006a46:	f7fd f82b 	bl	8003aa0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF4; // ctrl_meas
 8006a4a:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006a4e:	2202      	movs	r2, #2
 8006a50:	4659      	mov	r1, fp
 8006a52:	20ec      	movs	r0, #236	; 0xec
    cmd[0] = 0xF4; // ctrl_meas
 8006a54:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006a58:	f7fd f822 	bl	8003aa0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF5; // config
 8006a5c:	f24a 03f5 	movw	r3, #41205	; 0xa0f5
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006a60:	2202      	movs	r2, #2
 8006a62:	4659      	mov	r1, fp
 8006a64:	20ec      	movs	r0, #236	; 0xec
    cmd[0] = 0xF5; // config
 8006a66:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006a6a:	f7fd f819 	bl	8003aa0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0x88; // read dig_T regs
 8006a6e:	2388      	movs	r3, #136	; 0x88
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006a70:	2201      	movs	r2, #1
 8006a72:	4659      	mov	r1, fp
 8006a74:	20ec      	movs	r0, #236	; 0xec
    cmd[0] = 0x88; // read dig_T regs
 8006a76:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006a7a:	f7fd f811 	bl	8003aa0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 8006a7e:	2206      	movs	r2, #6
 8006a80:	4659      	mov	r1, fp
 8006a82:	20ec      	movs	r0, #236	; 0xec
 8006a84:	f7fc fdfa 	bl	800367c <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_T1 = (cmd[1] << 8) | cmd[0];
    dig_T2 = (cmd[3] << 8) | cmd[2];
    dig_T3 = (cmd[5] << 8) | cmd[4];

    cmd[0] = 0x8E; // read dig_P regs
 8006a88:	238e      	movs	r3, #142	; 0x8e
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8006a8a:	9d07      	ldr	r5, [sp, #28]
 8006a8c:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
    cmd[0] = 0x8E; // read dig_P regs
 8006a90:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8006a94:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006a98:	4659      	mov	r1, fp
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8006a9a:	f8a5 30b2 	strh.w	r3, [r5, #178]	; 0xb2
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8006a9e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006aa2:	20ec      	movs	r0, #236	; 0xec
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8006aa4:	f8a5 20b0 	strh.w	r2, [r5, #176]	; 0xb0
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006aa8:	2201      	movs	r2, #1
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8006aaa:	f8a5 30b4 	strh.w	r3, [r5, #180]	; 0xb4
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006aae:	f7fc fff7 	bl	8003aa0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 8006ab2:	2212      	movs	r2, #18
 8006ab4:	4659      	mov	r1, fp
 8006ab6:	20ec      	movs	r0, #236	; 0xec
 8006ab8:	f7fc fde0 	bl	800367c <HAL_I2C_Master_Receive.constprop.0.isra.0>
    dig_P6 = (cmd[11] << 8) | cmd[10];
    dig_P7 = (cmd[13] << 8) | cmd[12];
    dig_P8 = (cmd[15] << 8) | cmd[14];
    dig_P9 = (cmd[17] << 8) | cmd[16];

    cmd[0] = 0xA1; // read dig_H regs
 8006abc:	23a1      	movs	r3, #161	; 0xa1
    dig_P1 = (cmd[1] << 8) | cmd[0];
 8006abe:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
    cmd[0] = 0xA1; // read dig_H regs
 8006ac2:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8006ac6:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006aca:	4659      	mov	r1, fp
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8006acc:	f8a5 30b8 	strh.w	r3, [r5, #184]	; 0xb8
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8006ad0:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006ad4:	20ec      	movs	r0, #236	; 0xec
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8006ad6:	f8a5 30ba 	strh.w	r3, [r5, #186]	; 0xba
    dig_P4 = (cmd[7] << 8) | cmd[6];
 8006ada:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    dig_P1 = (cmd[1] << 8) | cmd[0];
 8006ade:	f8a5 20b6 	strh.w	r2, [r5, #182]	; 0xb6
    dig_P4 = (cmd[7] << 8) | cmd[6];
 8006ae2:	f8a5 30bc 	strh.w	r3, [r5, #188]	; 0xbc
    dig_P5 = (cmd[9] << 8) | cmd[8];
 8006ae6:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006aea:	2201      	movs	r2, #1
    dig_P5 = (cmd[9] << 8) | cmd[8];
 8006aec:	f8a5 30be 	strh.w	r3, [r5, #190]	; 0xbe
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8006af0:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
	uint8_t uartTransmit[] = "UART OK\r\n";
 8006af4:	af15      	add	r7, sp, #84	; 0x54
 8006af6:	f8a5 30c0 	strh.w	r3, [r5, #192]	; 0xc0
    dig_P7 = (cmd[13] << 8) | cmd[12];
 8006afa:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8006afe:	f8a5 30c2 	strh.w	r3, [r5, #194]	; 0xc2
    dig_P8 = (cmd[15] << 8) | cmd[14];
 8006b02:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 8006b06:	f8a5 30c4 	strh.w	r3, [r5, #196]	; 0xc4
    dig_P9 = (cmd[17] << 8) | cmd[16];
 8006b0a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8006b0e:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006b12:	f7fc ffc5 	bl	8003aa0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006b16:	2201      	movs	r2, #1
 8006b18:	4659      	mov	r1, fp
 8006b1a:	20ec      	movs	r0, #236	; 0xec
 8006b1c:	f7fc fdae 	bl	800367c <HAL_I2C_Master_Receive.constprop.0.isra.0>

    cmd[1] = 0xE1; // read dig_H regs
 8006b20:	23e1      	movs	r3, #225	; 0xe1

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8006b22:	2201      	movs	r2, #1
 8006b24:	20ec      	movs	r0, #236	; 0xec
 8006b26:	f10d 0161 	add.w	r1, sp, #97	; 0x61
    cmd[1] = 0xE1; // read dig_H regs
 8006b2a:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8006b2e:	f7fc ffb7 	bl	8003aa0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 8006b32:	2207      	movs	r2, #7
 8006b34:	20ec      	movs	r0, #236	; 0xec
 8006b36:	f10d 0161 	add.w	r1, sp, #97	; 0x61
 8006b3a:	f7fc fd9f 	bl	800367c <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_H1 = cmd[0];
 8006b3e:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    dig_H2 = (cmd[2] << 8) | cmd[1];
    dig_H3 = cmd[3];
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8006b42:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
    dig_H1 = cmd[0];
 8006b46:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
    dig_H2 = (cmd[2] << 8) | cmd[1];
 8006b4a:	f8bd 2061 	ldrh.w	r2, [sp, #97]	; 0x61
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8006b4e:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
    dig_H2 = (cmd[2] << 8) | cmd[1];
 8006b52:	f8a5 20ca 	strh.w	r2, [r5, #202]	; 0xca
    dig_H3 = cmd[3];
 8006b56:	f89d 2063 	ldrb.w	r2, [sp, #99]	; 0x63
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8006b5a:	f89d 1066 	ldrb.w	r1, [sp, #102]	; 0x66
    dig_H3 = cmd[3];
 8006b5e:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
    dig_H6 = cmd[7];
 8006b62:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 8006b66:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8006b6a:	f003 020f 	and.w	r2, r3, #15
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8006b6e:	091b      	lsrs	r3, r3, #4
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8006b70:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8006b74:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8006b78:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8006b7c:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
	DS3231_Update();
 8006b80:	f7fd f8c2 	bl	8003d08 <DS3231_Update>
	uint8_t uartTransmit[] = "UART OK\r\n";
 8006b84:	463b      	mov	r3, r7
 8006b86:	4a1c      	ldr	r2, [pc, #112]	; (8006bf8 <main+0x8a0>)
  if (huart->gState == HAL_UART_STATE_READY)
 8006b88:	f895 40a9 	ldrb.w	r4, [r5, #169]	; 0xa9
 8006b8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8006b8e:	c303      	stmia	r3!, {r0, r1}
 8006b90:	2c20      	cmp	r4, #32
 8006b92:	801a      	strh	r2, [r3, #0]
 8006b94:	f040 8678 	bne.w	8007888 <main+0x1530>
    __HAL_LOCK(huart);
 8006b98:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	f000 8673 	beq.w	8007888 <main+0x1530>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ba2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba4:	f8c5 60ac 	str.w	r6, [r5, #172]	; 0xac
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ba8:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
    huart->TxXferSize = Size;
 8006bac:	230a      	movs	r3, #10
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bae:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 8006bb0:	682c      	ldr	r4, [r5, #0]
 8006bb2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferSize = Size;
 8006bb6:	f8a5 3090 	strh.w	r3, [r5, #144]	; 0x90
    huart->TxXferCount = Size;
 8006bba:	f8a5 3092 	strh.w	r3, [r5, #146]	; 0x92
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bbe:	f001 80e7 	beq.w	8007d90 <main+0x1a38>
      pdata16bits = NULL;
 8006bc2:	2500      	movs	r5, #0
    __HAL_UNLOCK(huart);
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	9807      	ldr	r0, [sp, #28]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc8:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
    __HAL_UNLOCK(huart);
 8006bca:	f880 30a8 	strb.w	r3, [r0, #168]	; 0xa8
    while (huart->TxXferCount > 0U)
 8006bce:	f8b0 3092 	ldrh.w	r3, [r0, #146]	; 0x92
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	b9bb      	cbnz	r3, 8006c06 <main+0x8ae>
 8006bd6:	f000 becb 	b.w	8007970 <main+0x1618>
 8006bda:	bf00      	nop
 8006bdc:	40010c00 	.word	0x40010c00
 8006be0:	40011000 	.word	0x40011000
 8006be4:	40010800 	.word	0x40010800
 8006be8:	000251c4 	.word	0x000251c4
 8006bec:	0801d1f8 	.word	0x0801d1f8
 8006bf0:	0801d208 	.word	0x0801d208
 8006bf4:	200006cf 	.word	0x200006cf
 8006bf8:	0801d280 	.word	0x0801d280
 8006bfc:	6803      	ldr	r3, [r0, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006bfe:	1b1b      	subs	r3, r3, r4
 8006c00:	2b64      	cmp	r3, #100	; 0x64
 8006c02:	f200 879e 	bhi.w	8007b42 <main+0x17ea>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c06:	680a      	ldr	r2, [r1, #0]
 8006c08:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8006c0c:	d0f6      	beq.n	8006bfc <main+0x8a4>
      if (pdata8bits == NULL)
 8006c0e:	2f00      	cmp	r7, #0
 8006c10:	f000 87eb 	beq.w	8007bea <main+0x1892>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c14:	f817 3b01 	ldrb.w	r3, [r7], #1
 8006c18:	604b      	str	r3, [r1, #4]
      huart->TxXferCount--;
 8006c1a:	f8b0 3092 	ldrh.w	r3, [r0, #146]	; 0x92
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	f8a0 3092 	strh.w	r3, [r0, #146]	; 0x92
 8006c26:	e7d2      	b.n	8006bce <main+0x876>
    cmd[0] = 0xFA; // temp_msb
 8006c28:	23fa      	movs	r3, #250	; 0xfa
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	4659      	mov	r1, fp
 8006c2e:	20ec      	movs	r0, #236	; 0xec
    cmd[0] = 0xFA; // temp_msb
 8006c30:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006c34:	f7fc ff34 	bl	8003aa0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8006c38:	2203      	movs	r2, #3
 8006c3a:	20ec      	movs	r0, #236	; 0xec
 8006c3c:	f10d 0161 	add.w	r1, sp, #97	; 0x61
 8006c40:	f7fc fd1c 	bl	800367c <HAL_I2C_Master_Receive.constprop.0.isra.0>
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8006c44:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8006c48:	f8dd 801c 	ldr.w	r8, [sp, #28]
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8006c4c:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 8006c50:	011b      	lsls	r3, r3, #4
 8006c52:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006c56:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8006c5a:	f8b8 20b0 	ldrh.w	r2, [r8, #176]	; 0xb0
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8006c5e:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8006c62:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
 8006c66:	fb03 f303 	mul.w	r3, r3, r3
 8006c6a:	0b1e      	lsrs	r6, r3, #12
 8006c6c:	f9b8 30b4 	ldrsh.w	r3, [r8, #180]	; 0xb4
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8006c70:	0052      	lsls	r2, r2, #1
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8006c72:	fb03 f606 	mul.w	r6, r3, r6
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8006c76:	f9b8 30b2 	ldrsh.w	r3, [r8, #178]	; 0xb2
 8006c7a:	ebc2 02d1 	rsb	r2, r2, r1, lsr #3
 8006c7e:	fb02 f303 	mul.w	r3, r2, r3
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8006c82:	0bb6      	lsrs	r6, r6, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8006c84:	eb06 26d3 	add.w	r6, r6, r3, lsr #11
    temp = (temp * 5 + 128) >> 8;
 8006c88:	eb06 0086 	add.w	r0, r6, r6, lsl #2
 8006c8c:	3080      	adds	r0, #128	; 0x80
    t_fine = temp;
 8006c8e:	f8c8 60dc 	str.w	r6, [r8, #220]	; 0xdc
    tempf = (float) temp;
 8006c92:	1200      	asrs	r0, r0, #8
 8006c94:	f7ff faec 	bl	8006270 <__aeabi_i2f>
    return round_nth((tempf / 100.0f), n);
 8006c98:	49d5      	ldr	r1, [pc, #852]	; (8006ff0 <main+0xc98>)
 8006c9a:	f7ff f97b 	bl	8005f94 <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8006c9e:	f7fe fd2b 	bl	80056f8 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	4bd3      	ldr	r3, [pc, #844]	; (8006ff4 <main+0xc9c>)
 8006ca6:	f7fe fd7f 	bl	80057a8 <__aeabi_dmul>
 8006caa:	2200      	movs	r2, #0
 8006cac:	4bd2      	ldr	r3, [pc, #840]	; (8006ff8 <main+0xca0>)
 8006cae:	f7fe fbc5 	bl	800543c <__adddf3>
 8006cb2:	f005 fd9d 	bl	800c7f0 <floor>
 8006cb6:	a3cc      	add	r3, pc, #816	; (adr r3, 8006fe8 <main+0xc90>)
 8006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbc:	f7fe fd74 	bl	80057a8 <__aeabi_dmul>
 8006cc0:	f7ff f86a 	bl	8005d98 <__aeabi_d2f>
 8006cc4:	4607      	mov	r7, r0
	temperature = BME280_getTemperature(-1);
 8006cc6:	f7fe fd17 	bl	80056f8 <__aeabi_f2d>
    cmd[0] = 0xFD; // hum_msb
 8006cca:	23fd      	movs	r3, #253	; 0xfd
 8006ccc:	4604      	mov	r4, r0
 8006cce:	460d      	mov	r5, r1
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	4659      	mov	r1, fp
 8006cd4:	20ec      	movs	r0, #236	; 0xec
    cmd[0] = 0xFD; // hum_msb
 8006cd6:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8006cda:	e9c8 4538 	strd	r4, r5, [r8, #224]	; 0xe0
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006cde:	f7fc fedf 	bl	8003aa0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	20ec      	movs	r0, #236	; 0xec
 8006ce6:	f10d 0161 	add.w	r1, sp, #97	; 0x61
 8006cea:	f7fc fcc7 	bl	800367c <HAL_I2C_Master_Receive.constprop.0.isra.0>
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8006cee:	f8b8 30cc 	ldrh.w	r3, [r8, #204]	; 0xcc
    v_x1 = t_fine - 76800;
 8006cf2:	f5a6 3296 	sub.w	r2, r6, #76800	; 0x12c00
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8006cf6:	f9b8 10d2 	ldrsh.w	r1, [r8, #210]	; 0xd2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8006cfa:	fb02 f303 	mul.w	r3, r2, r3
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8006cfe:	fb02 f101 	mul.w	r1, r2, r1
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8006d02:	12db      	asrs	r3, r3, #11
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8006d04:	1289      	asrs	r1, r1, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8006d06:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8006d0a:	fb01 f303 	mul.w	r3, r1, r3
    hum_raw = (cmd[1] << 8) | cmd[2];
 8006d0e:	f8bd 1061 	ldrh.w	r1, [sp, #97]	; 0x61
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8006d12:	129b      	asrs	r3, r3, #10
    hum_raw = (cmd[1] << 8) | cmd[2];
 8006d14:	ba49      	rev16	r1, r1
 8006d16:	b288      	uxth	r0, r1
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8006d18:	f9b8 10ce 	ldrsh.w	r1, [r8, #206]	; 0xce
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8006d1c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8006d20:	0509      	lsls	r1, r1, #20
 8006d22:	ebc1 3180 	rsb	r1, r1, r0, lsl #14
                                            (int32_t) dig_H2 + 8192) >> 14));
 8006d26:	f9b8 00ca 	ldrsh.w	r0, [r8, #202]	; 0xca
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8006d2a:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8006d2e:	fb00 f303 	mul.w	r3, r0, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8006d32:	f9b8 00d0 	ldrsh.w	r0, [r8, #208]	; 0xd0
                                            (int32_t) dig_H2 + 8192) >> 14));
 8006d36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8006d3a:	fb02 1210 	mls	r2, r2, r0, r1
                                            (int32_t) dig_H2 + 8192) >> 14));
 8006d3e:	139b      	asrs	r3, r3, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8006d40:	0bd2      	lsrs	r2, r2, #15
 8006d42:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8006d46:	13da      	asrs	r2, r3, #15
 8006d48:	fb02 f202 	mul.w	r2, r2, r2
 8006d4c:	f8b8 10c8 	ldrh.w	r1, [r8, #200]	; 0xc8
 8006d50:	11d0      	asrs	r0, r2, #7
 8006d52:	fb01 f000 	mul.w	r0, r1, r0
 8006d56:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 8006d5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 8006d5e:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 8006d62:	bfa8      	it	ge
 8006d64:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
    humf = (float) (v_x1 >> 12);
 8006d68:	1300      	asrs	r0, r0, #12
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8006d6a:	f8cd 801c 	str.w	r8, [sp, #28]
    humf = (float) (v_x1 >> 12);
 8006d6e:	f7ff fa7f 	bl	8006270 <__aeabi_i2f>
    return round_nth((humf / 1024.0f), n);
 8006d72:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 8006d76:	f7ff f90d 	bl	8005f94 <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8006d7a:	f7fe fcbd 	bl	80056f8 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8006d7e:	2200      	movs	r2, #0
 8006d80:	4b9c      	ldr	r3, [pc, #624]	; (8006ff4 <main+0xc9c>)
 8006d82:	f7fe fd11 	bl	80057a8 <__aeabi_dmul>
 8006d86:	2200      	movs	r2, #0
 8006d88:	4b9b      	ldr	r3, [pc, #620]	; (8006ff8 <main+0xca0>)
 8006d8a:	f7fe fb57 	bl	800543c <__adddf3>
 8006d8e:	f005 fd2f 	bl	800c7f0 <floor>
 8006d92:	a395      	add	r3, pc, #596	; (adr r3, 8006fe8 <main+0xc90>)
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	f7fe fd06 	bl	80057a8 <__aeabi_dmul>
 8006d9c:	f7fe fffc 	bl	8005d98 <__aeabi_d2f>
 8006da0:	4682      	mov	sl, r0
	humidity = BME280_getHumidity(-1);
 8006da2:	f7fe fca9 	bl	80056f8 <__aeabi_f2d>
    cmd[0] = 0xF7; // press_msb
 8006da6:	23f7      	movs	r3, #247	; 0xf7
 8006da8:	4680      	mov	r8, r0
 8006daa:	4689      	mov	r9, r1
 8006dac:	f8dd c01c 	ldr.w	ip, [sp, #28]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006db0:	2201      	movs	r2, #1
 8006db2:	4659      	mov	r1, fp
 8006db4:	20ec      	movs	r0, #236	; 0xec
 8006db6:	e9cc 893a 	strd	r8, r9, [ip, #232]	; 0xe8
    cmd[0] = 0xF7; // press_msb
 8006dba:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006dbe:	f7fc fe6f 	bl	8003aa0 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8006dc2:	2203      	movs	r2, #3
 8006dc4:	20ec      	movs	r0, #236	; 0xec
 8006dc6:	f10d 0161 	add.w	r1, sp, #97	; 0x61
 8006dca:	f7fc fc57 	bl	800367c <HAL_I2C_Master_Receive.constprop.0.isra.0>
    var1 = (t_fine >> 1) - 64000;
 8006dce:	1072      	asrs	r2, r6, #1
 8006dd0:	f5a2 427a 	sub.w	r2, r2, #64000	; 0xfa00
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8006dd4:	1091      	asrs	r1, r2, #2
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 8006dd6:	f8dd c01c 	ldr.w	ip, [sp, #28]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8006dda:	fb01 f101 	mul.w	r1, r1, r1
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 8006dde:	f9bc 30b8 	ldrsh.w	r3, [ip, #184]	; 0xb8
 8006de2:	f9bc 00ba 	ldrsh.w	r0, [ip, #186]	; 0xba
 8006de6:	fb02 f303 	mul.w	r3, r2, r3
 8006dea:	134e      	asrs	r6, r1, #13
 8006dec:	fb06 f000 	mul.w	r0, r6, r0
 8006df0:	105b      	asrs	r3, r3, #1
 8006df2:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8006df6:	149b      	asrs	r3, r3, #18
    var1 = ((32768 + var1) * dig_P1) >> 15;
 8006df8:	f8bc 00b6 	ldrh.w	r0, [ip, #182]	; 0xb6
 8006dfc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006e00:	fb00 f303 	mul.w	r3, r0, r3
    if (var1 == 0) {
 8006e04:	13db      	asrs	r3, r3, #15
 8006e06:	f000 8699 	beq.w	8007b3c <main+0x17e4>
    var2 = var2 + ((var1 * dig_P5) << 1);
 8006e0a:	f9bc 00be 	ldrsh.w	r0, [ip, #190]	; 0xbe
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8006e0e:	12c9      	asrs	r1, r1, #11
    var2 = var2 + ((var1 * dig_P5) << 1);
 8006e10:	fb00 f202 	mul.w	r2, r0, r2
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8006e14:	f9bc 00c0 	ldrsh.w	r0, [ip, #192]	; 0xc0
    var2 = var2 + ((var1 * dig_P5) << 1);
 8006e18:	0052      	lsls	r2, r2, #1
 8006e1a:	fb00 2001 	mla	r0, r0, r1, r2
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8006e1e:	f89d 2063 	ldrb.w	r2, [sp, #99]	; 0x63
 8006e22:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8006e26:	0912      	lsrs	r2, r2, #4
 8006e28:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8006e2c:	f9bc 10bc 	ldrsh.w	r1, [ip, #188]	; 0xbc
 8006e30:	4666      	mov	r6, ip
 8006e32:	0409      	lsls	r1, r1, #16
 8006e34:	eb01 01a0 	add.w	r1, r1, r0, asr #2
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8006e38:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
 8006e3c:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 8006e40:	eb02 3221 	add.w	r2, r2, r1, asr #12
 8006e44:	496d      	ldr	r1, [pc, #436]	; (8006ffc <main+0xca4>)
 8006e46:	fb01 f202 	mul.w	r2, r1, r2
 8006e4a:	f102 4243 	add.w	r2, r2, #3271557120	; 0xc3000000
 8006e4e:	f502 02a0 	add.w	r2, r2, #5242880	; 0x500000
    if (press < 0x80000000) {
 8006e52:	2a00      	cmp	r2, #0
        press = (press / var1) * 2;
 8006e54:	bfb3      	iteet	lt
 8006e56:	fbb2 f3f3 	udivlt	r3, r2, r3
        press = (press << 1) / var1;
 8006e5a:	0052      	lslge	r2, r2, #1
 8006e5c:	fbb2 f3f3 	udivge	r3, r2, r3
        press = (press / var1) * 2;
 8006e60:	005b      	lsllt	r3, r3, #1
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8006e62:	08da      	lsrs	r2, r3, #3
 8006e64:	fb02 f202 	mul.w	r2, r2, r2
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8006e68:	f9bc 10c4 	ldrsh.w	r1, [ip, #196]	; 0xc4
 8006e6c:	0898      	lsrs	r0, r3, #2
 8006e6e:	fb01 f000 	mul.w	r0, r1, r0
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8006e72:	f9bc 10c6 	ldrsh.w	r1, [ip, #198]	; 0xc6
 8006e76:	0b52      	lsrs	r2, r2, #13
 8006e78:	fb01 f202 	mul.w	r2, r1, r2
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8006e7c:	1340      	asrs	r0, r0, #13
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8006e7e:	eb00 3022 	add.w	r0, r0, r2, asr #12
 8006e82:	f9bc 20c2 	ldrsh.w	r2, [ip, #194]	; 0xc2
 8006e86:	4410      	add	r0, r2
    pressf = (float) press;
 8006e88:	eb03 1020 	add.w	r0, r3, r0, asr #4
 8006e8c:	f7ff f9ec 	bl	8006268 <__aeabi_ui2f>
    return (pressf / 100.0f);
 8006e90:	4957      	ldr	r1, [pc, #348]	; (8006ff0 <main+0xc98>)
 8006e92:	f7ff f87f 	bl	8005f94 <__aeabi_fmul>
	pressure = (uint16_t)BME280_getPressure();
 8006e96:	f7ff fa3f 	bl	8006318 <__aeabi_f2uiz>
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8006e9a:	f46f 7c96 	mvn.w	ip, #300	; 0x12c
 8006e9e:	f240 321e 	movw	r2, #798	; 0x31e
	pressure = (uint16_t)BME280_getPressure();
 8006ea2:	b283      	uxth	r3, r0
 8006ea4:	f8a6 30f0 	strh.w	r3, [r6, #240]	; 0xf0
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8006ea8:	4463      	add	r3, ip
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	4293      	cmp	r3, r2
 8006eae:	f200 82a1 	bhi.w	80073f4 <main+0x109c>
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	4952      	ldr	r1, [pc, #328]	; (8007000 <main+0xca8>)
 8006eb6:	f7ff f80d 	bl	8005ed4 <__aeabi_fcmplt>
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	f000 829a 	beq.w	80073f4 <main+0x109c>
 8006ec0:	4638      	mov	r0, r7
 8006ec2:	4950      	ldr	r1, [pc, #320]	; (8007004 <main+0xcac>)
 8006ec4:	f7ff f824 	bl	8005f10 <__aeabi_fcmpgt>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	f000 8293 	beq.w	80073f4 <main+0x109c>
 8006ece:	4650      	mov	r0, sl
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	f7ff f81d 	bl	8005f10 <__aeabi_fcmpgt>
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	f000 828c 	beq.w	80073f4 <main+0x109c>
 8006edc:	4650      	mov	r0, sl
 8006ede:	494a      	ldr	r1, [pc, #296]	; (8007008 <main+0xcb0>)
 8006ee0:	f7fe fff8 	bl	8005ed4 <__aeabi_fcmplt>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	f000 8285 	beq.w	80073f4 <main+0x109c>
		if (temperature != temperatureLast && temperature >= -40 && temperature <= 40) {
 8006eea:	4620      	mov	r0, r4
 8006eec:	4629      	mov	r1, r5
 8006eee:	e9d6 453e 	ldrd	r4, r5, [r6, #248]	; 0xf8
 8006ef2:	4622      	mov	r2, r4
 8006ef4:	462b      	mov	r3, r5
 8006ef6:	f7fe febf 	bl	8005c78 <__aeabi_dcmpeq>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	f040 8634 	bne.w	8007b68 <main+0x1810>
 8006f00:	4638      	mov	r0, r7
 8006f02:	4942      	ldr	r1, [pc, #264]	; (800700c <main+0xcb4>)
 8006f04:	f7fe fff0 	bl	8005ee8 <__aeabi_fcmple>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	f000 862d 	beq.w	8007b68 <main+0x1810>
			if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8006f0e:	2200      	movs	r2, #0
 8006f10:	4620      	mov	r0, r4
 8006f12:	4629      	mov	r1, r5
 8006f14:	4b37      	ldr	r3, [pc, #220]	; (8006ff4 <main+0xc9c>)
 8006f16:	f7fe fecd 	bl	8005cb4 <__aeabi_dcmpge>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	f040 87c9 	bne.w	8007eb2 <main+0x1b5a>
 8006f20:	2200      	movs	r2, #0
 8006f22:	2300      	movs	r3, #0
 8006f24:	4620      	mov	r0, r4
 8006f26:	4629      	mov	r1, r5
 8006f28:	f7fe feb0 	bl	8005c8c <__aeabi_dcmplt>
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	f040 8794 	bne.w	8007e5c <main+0x1b04>
			else if (temperatureLast < 10 && temperatureLast > 0) {
 8006f34:	2300      	movs	r3, #0
 8006f36:	4620      	mov	r0, r4
 8006f38:	4629      	mov	r1, r5
 8006f3a:	f7fe fec5 	bl	8005cc8 <__aeabi_dcmpgt>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	f040 87aa 	bne.w	8007e98 <main+0x1b40>
			else if (temperatureLast <= -10) {
 8006f44:	2200      	movs	r2, #0
 8006f46:	4620      	mov	r0, r4
 8006f48:	4629      	mov	r1, r5
 8006f4a:	4b31      	ldr	r3, [pc, #196]	; (8007010 <main+0xcb8>)
 8006f4c:	f7fe fea8 	bl	8005ca0 <__aeabi_dcmple>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	f040 8790 	bne.w	8007e76 <main+0x1b1e>
			if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8006f56:	9907      	ldr	r1, [sp, #28]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	e9d1 4538 	ldrd	r4, r5, [r1, #224]	; 0xe0
 8006f5e:	4b25      	ldr	r3, [pc, #148]	; (8006ff4 <main+0xc9c>)
 8006f60:	4620      	mov	r0, r4
 8006f62:	4629      	mov	r1, r5
 8006f64:	f7fe fea6 	bl	8005cb4 <__aeabi_dcmpge>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	f040 8770 	bne.w	8007e4e <main+0x1af6>
 8006f6e:	2200      	movs	r2, #0
 8006f70:	2300      	movs	r3, #0
 8006f72:	4620      	mov	r0, r4
 8006f74:	4629      	mov	r1, r5
 8006f76:	f7fe fe89 	bl	8005c8c <__aeabi_dcmplt>
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	f040 8739 	bne.w	8007df4 <main+0x1a9c>
			else if (temperature < 10 && temperature > 0) {
 8006f82:	2300      	movs	r3, #0
 8006f84:	4620      	mov	r0, r4
 8006f86:	4629      	mov	r1, r5
 8006f88:	f7fe fe9e 	bl	8005cc8 <__aeabi_dcmpgt>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	f040 8750 	bne.w	8007e32 <main+0x1ada>
			else if (temperature <= -10) {
 8006f92:	2200      	movs	r2, #0
 8006f94:	4620      	mov	r0, r4
 8006f96:	4629      	mov	r1, r5
 8006f98:	4b1d      	ldr	r3, [pc, #116]	; (8007010 <main+0xcb8>)
 8006f9a:	f7fe fe81 	bl	8005ca0 <__aeabi_dcmple>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	f040 8735 	bne.w	8007e0e <main+0x1ab6>
		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 8006fa4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8006fa8:	e9dc 673a 	ldrd	r6, r7, [ip, #232]	; 0xe8
 8006fac:	e9dc 4540 	ldrd	r4, r5, [ip, #256]	; 0x100
			temperatureLast = temperature;
 8006fb0:	e9dc 8938 	ldrd	r8, r9, [ip, #224]	; 0xe0
		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	4622      	mov	r2, r4
 8006fba:	462b      	mov	r3, r5
			temperatureLast = temperature;
 8006fbc:	e9cc 893e 	strd	r8, r9, [ip, #248]	; 0xf8
		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 8006fc0:	f7fe fe5a 	bl	8005c78 <__aeabi_dcmpeq>
 8006fc4:	bb40      	cbnz	r0, 8007018 <main+0xcc0>
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	2300      	movs	r3, #0
 8006fca:	4630      	mov	r0, r6
 8006fcc:	4639      	mov	r1, r7
 8006fce:	f7fe fe71 	bl	8005cb4 <__aeabi_dcmpge>
 8006fd2:	b308      	cbz	r0, 8007018 <main+0xcc0>
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	4639      	mov	r1, r7
 8006fd8:	2200      	movs	r2, #0
 8006fda:	4b0e      	ldr	r3, [pc, #56]	; (8007014 <main+0xcbc>)
 8006fdc:	f7fe fe56 	bl	8005c8c <__aeabi_dcmplt>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	f040 85cd 	bne.w	8007b80 <main+0x1828>
 8006fe6:	e017      	b.n	8007018 <main+0xcc0>
 8006fe8:	9999999a 	.word	0x9999999a
 8006fec:	3fb99999 	.word	0x3fb99999
 8006ff0:	3c23d70a 	.word	0x3c23d70a
 8006ff4:	40240000 	.word	0x40240000
 8006ff8:	3fe00000 	.word	0x3fe00000
 8006ffc:	fffff3cb 	.word	0xfffff3cb
 8007000:	42aa0000 	.word	0x42aa0000
 8007004:	c2200000 	.word	0xc2200000
 8007008:	42c80000 	.word	0x42c80000
 800700c:	42200000 	.word	0x42200000
 8007010:	c0240000 	.word	0xc0240000
 8007014:	40590000 	.word	0x40590000
		if (pressureLast != pressure) {
 8007018:	9b07      	ldr	r3, [sp, #28]
 800701a:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 800701e:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8007022:	4293      	cmp	r3, r2
 8007024:	d024      	beq.n	8007070 <main+0xd18>
			if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d HP", pressureLast);
 8007026:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800702a:	bf2c      	ite	cs
 800702c:	49cb      	ldrcs	r1, [pc, #812]	; (800735c <main+0x1004>)
			else sprintf(weatherPrintP, " %02d HP", pressureLast);
 800702e:	49cc      	ldrcc	r1, [pc, #816]	; (8007360 <main+0x1008>)
			if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d HP", pressureLast);
 8007030:	4658      	mov	r0, fp
			else sprintf(weatherPrintP, " %02d HP", pressureLast);
 8007032:	f001 fe1f 	bl	8008c74 <siprintf>
			LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_36, 1, BLACK);
 8007036:	21bb      	movs	r1, #187	; 0xbb
 8007038:	465a      	mov	r2, fp
 800703a:	f240 1041 	movw	r0, #321	; 0x141
 800703e:	f7fc ffa9 	bl	8003f94 <LCD_Font.constprop.2>
			if (pressure >= 1000) sprintf(weatherPrintP, "%02d HP", pressure);
 8007042:	9b07      	ldr	r3, [sp, #28]
 8007044:	4658      	mov	r0, fp
 8007046:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 800704a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800704e:	bf2c      	ite	cs
 8007050:	49c2      	ldrcs	r1, [pc, #776]	; (800735c <main+0x1004>)
			else sprintf(weatherPrintP, " %02d HP", pressure);
 8007052:	49c3      	ldrcc	r1, [pc, #780]	; (8007360 <main+0x1008>)
 8007054:	f001 fe0e 	bl	8008c74 <siprintf>
			LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_36, 1, GRAY);
 8007058:	465a      	mov	r2, fp
 800705a:	4bc2      	ldr	r3, [pc, #776]	; (8007364 <main+0x100c>)
 800705c:	21bb      	movs	r1, #187	; 0xbb
 800705e:	f240 1041 	movw	r0, #321	; 0x141
 8007062:	f7fe f919 	bl	8005298 <LCD_Font.constprop.3>
			pressureLast = pressure;
 8007066:	9a07      	ldr	r2, [sp, #28]
 8007068:	f8b2 30f0 	ldrh.w	r3, [r2, #240]	; 0xf0
 800706c:	f8a2 3108 	strh.w	r3, [r2, #264]	; 0x108
		if (updateTime != rtcHrs) {
 8007070:	9907      	ldr	r1, [sp, #28]
 8007072:	4dbd      	ldr	r5, [pc, #756]	; (8007368 <main+0x1010>)
 8007074:	f891 30d6 	ldrb.w	r3, [r1, #214]	; 0xd6
 8007078:	896a      	ldrh	r2, [r5, #10]
 800707a:	4619      	mov	r1, r3
 800707c:	429a      	cmp	r2, r3
 800707e:	f000 85bb 	beq.w	8007bf8 <main+0x18a0>
			AT24XX_Update(0, rtcHrs);
 8007082:	2000      	movs	r0, #0
 8007084:	f7fc fa22 	bl	80034cc <AT24XX_Update>
    uint16_t dt[1] = {0};
 8007088:	2000      	movs	r0, #0
 800708a:	4cb8      	ldr	r4, [pc, #736]	; (800736c <main+0x1014>)
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800708c:	4659      	mov	r1, fp
    uint16_t dt[1] = {0};
 800708e:	f8ad 0060 	strh.w	r0, [sp, #96]	; 0x60
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007092:	f7fb ffbb 	bl	800300c <HAL_I2C_Mem_Read.constprop.0.isra.0>
			updateTime = AT24XX_Read(0);
 8007096:	4623      	mov	r3, r4
 8007098:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800709c:	49b4      	ldr	r1, [pc, #720]	; (8007370 <main+0x1018>)
 800709e:	816a      	strh	r2, [r5, #10]
	return (byteH << 8) | byteL;
 80070a0:	f893 03e9 	ldrb.w	r0, [r3, #1001]	; 0x3e9
 80070a4:	f893 23e8 	ldrb.w	r2, [r3, #1000]	; 0x3e8
			for (uint16_t i = 0; i < 157; i++) {
 80070a8:	3302      	adds	r3, #2
	return (byteH << 8) | byteL;
 80070aa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				hourlyTemperature[i] = byteS(eeprom[i * 2 + 1000], eeprom[i * 2 + 1 + 1000]);
 80070ae:	f821 2f02 	strh.w	r2, [r1, #2]!
			for (uint16_t i = 0; i < 157; i++) {
 80070b2:	4ab0      	ldr	r2, [pc, #704]	; (8007374 <main+0x101c>)
 80070b4:	428a      	cmp	r2, r1
 80070b6:	d1f3      	bne.n	80070a0 <main+0xd48>
			for (uint16_t i = 1; i < 156; i++) hourlyTemperature[i] = hourlyTemperature[i + 1];
 80070b8:	f5a2 719a 	sub.w	r1, r2, #308	; 0x134
 80070bc:	1e88      	subs	r0, r1, #2
 80070be:	f44f 729b 	mov.w	r2, #310	; 0x136
 80070c2:	f004 fe0b 	bl	800bcdc <memmove>
			hourlyTemperature[155] = (uint16_t) (temperature * 10);
 80070c6:	9e07      	ldr	r6, [sp, #28]
 80070c8:	2200      	movs	r2, #0
 80070ca:	e9d6 0138 	ldrd	r0, r1, [r6, #224]	; 0xe0
 80070ce:	4baa      	ldr	r3, [pc, #680]	; (8007378 <main+0x1020>)
 80070d0:	f7fe fb6a 	bl	80057a8 <__aeabi_dmul>
 80070d4:	f7fe fe40 	bl	8005d58 <__aeabi_d2uiz>
 80070d8:	4da5      	ldr	r5, [pc, #660]	; (8007370 <main+0x1018>)
 80070da:	f8a6 0242 	strh.w	r0, [r6, #578]	; 0x242
			for (uint16_t i = 0; i < 157; i++) {
 80070de:	b2af      	uxth	r7, r5
				AT24XX_Update(i * 2 + 1 + 1000, byteH(hourlyTemperature[i]));
 80070e0:	f5c7 7879 	rsb	r8, r7, #996	; 0x3e4
 80070e4:	f108 0803 	add.w	r8, r8, #3
 80070e8:	f5c7 777a 	rsb	r7, r7, #1000	; 0x3e8
				AT24XX_Update(i * 2 + 1000, byteL(hourlyTemperature[i]));
 80070ec:	1978      	adds	r0, r7, r5
 80070ee:	f835 6f02 	ldrh.w	r6, [r5, #2]!
 80070f2:	b280      	uxth	r0, r0
 80070f4:	b2f1      	uxtb	r1, r6
 80070f6:	f7fc f9e9 	bl	80034cc <AT24XX_Update>
				AT24XX_Update(i * 2 + 1 + 1000, byteH(hourlyTemperature[i]));
 80070fa:	eb08 0005 	add.w	r0, r8, r5
 80070fe:	0a31      	lsrs	r1, r6, #8
 8007100:	b280      	uxth	r0, r0
 8007102:	f7fc f9e3 	bl	80034cc <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 8007106:	4b9b      	ldr	r3, [pc, #620]	; (8007374 <main+0x101c>)
 8007108:	42ab      	cmp	r3, r5
 800710a:	d1ef      	bne.n	80070ec <main+0xd94>
 800710c:	1c99      	adds	r1, r3, #2
 800710e:	4b97      	ldr	r3, [pc, #604]	; (800736c <main+0x1014>)
	return (byteH << 8) | byteL;
 8007110:	f893 07d1 	ldrb.w	r0, [r3, #2001]	; 0x7d1
 8007114:	f893 27d0 	ldrb.w	r2, [r3, #2000]	; 0x7d0
			for (uint16_t i = 0; i < 157; i++) {
 8007118:	3302      	adds	r3, #2
	return (byteH << 8) | byteL;
 800711a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				hourlyHumidity[i] = byteS(eeprom[i * 2 + 2000], eeprom[i * 2 + 1 + 2000]);
 800711e:	f821 2f02 	strh.w	r2, [r1, #2]!
			for (uint16_t i = 0; i < 157; i++) {
 8007122:	4a96      	ldr	r2, [pc, #600]	; (800737c <main+0x1024>)
 8007124:	428a      	cmp	r2, r1
 8007126:	d1f3      	bne.n	8007110 <main+0xdb8>
			for (uint16_t i = 1; i < 156; i++) hourlyHumidity[i] = hourlyHumidity[i + 1];
 8007128:	f5a2 719a 	sub.w	r1, r2, #308	; 0x134
 800712c:	1e88      	subs	r0, r1, #2
 800712e:	f44f 729b 	mov.w	r2, #310	; 0x136
 8007132:	f004 fdd3 	bl	800bcdc <memmove>
			hourlyHumidity[155] = (uint16_t) (humidity * 10);
 8007136:	9e07      	ldr	r6, [sp, #28]
 8007138:	2200      	movs	r2, #0
 800713a:	e9d6 013a 	ldrd	r0, r1, [r6, #232]	; 0xe8
 800713e:	4b8e      	ldr	r3, [pc, #568]	; (8007378 <main+0x1020>)
 8007140:	f7fe fb32 	bl	80057a8 <__aeabi_dmul>
 8007144:	f7fe fe08 	bl	8005d58 <__aeabi_d2uiz>
 8007148:	4d8d      	ldr	r5, [pc, #564]	; (8007380 <main+0x1028>)
 800714a:	f8a6 037e 	strh.w	r0, [r6, #894]	; 0x37e
			for (uint16_t i = 0; i < 157; i++) {
 800714e:	b2af      	uxth	r7, r5
				AT24XX_Update(i * 2 + 1 + 2000, byteH(hourlyHumidity[i]));
 8007150:	f5c7 68f9 	rsb	r8, r7, #1992	; 0x7c8
 8007154:	f108 0807 	add.w	r8, r8, #7
 8007158:	f5c7 67fa 	rsb	r7, r7, #2000	; 0x7d0
				AT24XX_Update(i * 2 + 2000, byteL(hourlyHumidity[i]));
 800715c:	1978      	adds	r0, r7, r5
 800715e:	f835 6f02 	ldrh.w	r6, [r5, #2]!
 8007162:	b280      	uxth	r0, r0
 8007164:	b2f1      	uxtb	r1, r6
 8007166:	f7fc f9b1 	bl	80034cc <AT24XX_Update>
				AT24XX_Update(i * 2 + 1 + 2000, byteH(hourlyHumidity[i]));
 800716a:	eb08 0005 	add.w	r0, r8, r5
 800716e:	0a31      	lsrs	r1, r6, #8
 8007170:	b280      	uxth	r0, r0
 8007172:	f7fc f9ab 	bl	80034cc <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 8007176:	4b81      	ldr	r3, [pc, #516]	; (800737c <main+0x1024>)
 8007178:	42ab      	cmp	r3, r5
 800717a:	d1ef      	bne.n	800715c <main+0xe04>
 800717c:	1c9a      	adds	r2, r3, #2
	return (byteH << 8) | byteL;
 800717e:	f894 1bb9 	ldrb.w	r1, [r4, #3001]	; 0xbb9
 8007182:	f894 3bb8 	ldrb.w	r3, [r4, #3000]	; 0xbb8
			for (uint16_t i = 0; i < 157; i++) {
 8007186:	3402      	adds	r4, #2
	return (byteH << 8) | byteL;
 8007188:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				hourlyPressure[i] = byteS(eeprom[i * 2 + 3000], eeprom[i * 2 + 1 + 3000]);
 800718c:	f822 3f02 	strh.w	r3, [r2, #2]!
			for (uint16_t i = 0; i < 157; i++) {
 8007190:	4b7c      	ldr	r3, [pc, #496]	; (8007384 <main+0x102c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d1f3      	bne.n	800717e <main+0xe26>
			hourlyPressure[155] = (uint16_t)pressure;
 8007196:	f5a3 749d 	sub.w	r4, r3, #314	; 0x13a
 800719a:	b2a6      	uxth	r6, r4
 800719c:	f5c6 673b 	rsb	r7, r6, #2992	; 0xbb0
				AT24XX_Update(i * 2 + 1 + 3000, byteH(hourlyPressure[i]));
 80071a0:	463e      	mov	r6, r7
			for (uint16_t i = 1; i < 156; i++) hourlyPressure[i] = hourlyPressure[i + 1];
 80071a2:	f5a3 719a 	sub.w	r1, r3, #308	; 0x134
 80071a6:	f44f 729b 	mov.w	r2, #310	; 0x136
 80071aa:	1e88      	subs	r0, r1, #2
 80071ac:	f004 fd96 	bl	800bcdc <memmove>
			hourlyPressure[155] = (uint16_t)pressure;
 80071b0:	9a07      	ldr	r2, [sp, #28]
 80071b2:	3708      	adds	r7, #8
 80071b4:	f8b2 30f0 	ldrh.w	r3, [r2, #240]	; 0xf0
				AT24XX_Update(i * 2 + 1 + 3000, byteH(hourlyPressure[i]));
 80071b8:	3607      	adds	r6, #7
			hourlyPressure[155] = (uint16_t)pressure;
 80071ba:	f8a2 34ba 	strh.w	r3, [r2, #1210]	; 0x4ba
				AT24XX_Update(i * 2 + 3000, byteL(hourlyPressure[i]));
 80071be:	1938      	adds	r0, r7, r4
 80071c0:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 80071c4:	b280      	uxth	r0, r0
 80071c6:	b2e9      	uxtb	r1, r5
 80071c8:	f7fc f980 	bl	80034cc <AT24XX_Update>
				AT24XX_Update(i * 2 + 1 + 3000, byteH(hourlyPressure[i]));
 80071cc:	1930      	adds	r0, r6, r4
 80071ce:	0a29      	lsrs	r1, r5, #8
 80071d0:	b280      	uxth	r0, r0
 80071d2:	f7fc f97b 	bl	80034cc <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 80071d6:	4b6b      	ldr	r3, [pc, #428]	; (8007384 <main+0x102c>)
 80071d8:	42a3      	cmp	r3, r4
 80071da:	d1f0      	bne.n	80071be <main+0xe66>
	LCD_Line(x, y, x + w, y, size, color24);
 80071dc:	23be      	movs	r3, #190	; 0xbe
 80071de:	229f      	movs	r2, #159	; 0x9f
 80071e0:	4619      	mov	r1, r3
 80071e2:	2002      	movs	r0, #2
 80071e4:	f7fb f8d4 	bl	8002390 <LCD_Line.constprop.1>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 80071e8:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80071ec:	229f      	movs	r2, #159	; 0x9f
 80071ee:	4619      	mov	r1, r3
 80071f0:	2002      	movs	r0, #2
 80071f2:	f7fb f8cd 	bl	8002390 <LCD_Line.constprop.1>
	LCD_Line(x, y, x, y + h, size, color24);
 80071f6:	2202      	movs	r2, #2
 80071f8:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80071fc:	4610      	mov	r0, r2
 80071fe:	21be      	movs	r1, #190	; 0xbe
 8007200:	f7fb f8c6 	bl	8002390 <LCD_Line.constprop.1>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8007204:	229f      	movs	r2, #159	; 0x9f
 8007206:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800720a:	21be      	movs	r1, #190	; 0xbe
 800720c:	4610      	mov	r0, r2
 800720e:	2503      	movs	r5, #3
 8007210:	4e57      	ldr	r6, [pc, #348]	; (8007370 <main+0x1018>)
				int16_t val = map(((int16_t)hourlyTemperature[i] / 10), MIN_TEMPERATURE, MAX_TEMPERATURE, 0, 127);
 8007212:	4f5d      	ldr	r7, [pc, #372]	; (8007388 <main+0x1030>)
 8007214:	f7fb f8bc 	bl	8002390 <LCD_Line.constprop.1>
 8007218:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
				LCD_Line(3 + i, 191, 3 + i, 318, 1, BLACK);
 800721c:	462a      	mov	r2, r5
				int16_t val = map(((int16_t)hourlyTemperature[i] / 10), MIN_TEMPERATURE, MAX_TEMPERATURE, 0, 127);
 800721e:	fb87 0103 	smull	r0, r1, r7, r3
 8007222:	17db      	asrs	r3, r3, #31
 8007224:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8007228:	b29b      	uxth	r3, r3
 800722a:	3b14      	subs	r3, #20
 800722c:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 8007230:	fb87 0103 	smull	r0, r1, r7, r3
 8007234:	17dc      	asrs	r4, r3, #31
 8007236:	ebc4 04a1 	rsb	r4, r4, r1, asr #2
 800723a:	b224      	sxth	r4, r4
				LCD_Line(3 + i, 191, 3 + i, 318, 1, BLACK);
 800723c:	4628      	mov	r0, r5
 800723e:	2300      	movs	r3, #0
 8007240:	21bf      	movs	r1, #191	; 0xbf
 8007242:	f384 0407 	usat	r4, #7, r4
 8007246:	f7fa fa3d 	bl	80016c4 <LCD_Line.constprop.0>
				LCD_Line(3 + i, 191 + (127 - val), 3 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 800724a:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
 800724e:	005b      	lsls	r3, r3, #1
 8007250:	b2db      	uxtb	r3, r3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8007252:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 8007256:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 800725a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800725e:	4628      	mov	r0, r5
 8007260:	462a      	mov	r2, r5
 8007262:	b289      	uxth	r1, r1
 8007264:	f7fa fa2e 	bl	80016c4 <LCD_Line.constprop.0>
			for (uint16_t i = 0; i < 155 ; i++) {
 8007268:	4b48      	ldr	r3, [pc, #288]	; (800738c <main+0x1034>)
 800726a:	3501      	adds	r5, #1
 800726c:	42b3      	cmp	r3, r6
 800726e:	b2ad      	uxth	r5, r5
 8007270:	d1d2      	bne.n	8007218 <main+0xec0>
	LCD_Line(x, y, x + w, y, size, color24);
 8007272:	23be      	movs	r3, #190	; 0xbe
 8007274:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8007278:	4619      	mov	r1, r3
 800727a:	20a1      	movs	r0, #161	; 0xa1
 800727c:	f7fb f888 	bl	8002390 <LCD_Line.constprop.1>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8007280:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8007284:	20a1      	movs	r0, #161	; 0xa1
 8007286:	461a      	mov	r2, r3
 8007288:	4619      	mov	r1, r3
 800728a:	f7fb f881 	bl	8002390 <LCD_Line.constprop.1>
	LCD_Line(x, y, x, y + h, size, color24);
 800728e:	22a1      	movs	r2, #161	; 0xa1
 8007290:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8007294:	4610      	mov	r0, r2
 8007296:	21be      	movs	r1, #190	; 0xbe
 8007298:	f7fb f87a 	bl	8002390 <LCD_Line.constprop.1>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 800729c:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80072a0:	21be      	movs	r1, #190	; 0xbe
 80072a2:	461a      	mov	r2, r3
 80072a4:	4618      	mov	r0, r3
 80072a6:	25a2      	movs	r5, #162	; 0xa2
 80072a8:	4e35      	ldr	r6, [pc, #212]	; (8007380 <main+0x1028>)
				int16_t val = map(((int16_t)hourlyHumidity[i] / 10), MIN_HUMIDITY, MAX_HUMIDITY, 0, 127);
 80072aa:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8007388 <main+0x1030>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80072ae:	4f38      	ldr	r7, [pc, #224]	; (8007390 <main+0x1038>)
 80072b0:	f7fb f86e 	bl	8002390 <LCD_Line.constprop.1>
				int16_t val = map(((int16_t)hourlyHumidity[i] / 10), MIN_HUMIDITY, MAX_HUMIDITY, 0, 127);
 80072b4:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
				LCD_Line(162 + i, 191, 162 + i, 318, 1, BLACK);
 80072b8:	462a      	mov	r2, r5
				int16_t val = map(((int16_t)hourlyHumidity[i] / 10), MIN_HUMIDITY, MAX_HUMIDITY, 0, 127);
 80072ba:	fb88 0103 	smull	r0, r1, r8, r3
 80072be:	17db      	asrs	r3, r3, #31
 80072c0:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	3b14      	subs	r3, #20
 80072c8:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 80072cc:	fb87 0103 	smull	r0, r1, r7, r3
 80072d0:	17dc      	asrs	r4, r3, #31
 80072d2:	4419      	add	r1, r3
 80072d4:	ebc4 1461 	rsb	r4, r4, r1, asr #5
 80072d8:	b224      	sxth	r4, r4
				LCD_Line(162 + i, 191, 162 + i, 318, 1, BLACK);
 80072da:	4628      	mov	r0, r5
 80072dc:	2300      	movs	r3, #0
 80072de:	21bf      	movs	r1, #191	; 0xbf
 80072e0:	f384 0407 	usat	r4, #7, r4
 80072e4:	f7fa f9ee 	bl	80016c4 <LCD_Line.constprop.0>
				LCD_Line(162 + i, 191 + (127 - val), 162 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 80072e8:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	b2db      	uxtb	r3, r3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 80072f0:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 80072f4:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 80072f8:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80072fc:	4628      	mov	r0, r5
 80072fe:	462a      	mov	r2, r5
 8007300:	b289      	uxth	r1, r1
 8007302:	f7fa f9df 	bl	80016c4 <LCD_Line.constprop.0>
			for (uint16_t i = 0; i < 155 ; i++) {
 8007306:	4b23      	ldr	r3, [pc, #140]	; (8007394 <main+0x103c>)
 8007308:	3501      	adds	r5, #1
 800730a:	42b3      	cmp	r3, r6
 800730c:	b2ad      	uxth	r5, r5
 800730e:	d1d1      	bne.n	80072b4 <main+0xf5c>
	LCD_Line(x, y, x + w, y, size, color24);
 8007310:	23be      	movs	r3, #190	; 0xbe
 8007312:	f240 12dd 	movw	r2, #477	; 0x1dd
 8007316:	4619      	mov	r1, r3
 8007318:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800731c:	f7fb f838 	bl	8002390 <LCD_Line.constprop.1>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8007320:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8007324:	f240 12dd 	movw	r2, #477	; 0x1dd
 8007328:	4619      	mov	r1, r3
 800732a:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800732e:	f7fb f82f 	bl	8002390 <LCD_Line.constprop.1>
	LCD_Line(x, y, x, y + h, size, color24);
 8007332:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007336:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800733a:	4610      	mov	r0, r2
 800733c:	21be      	movs	r1, #190	; 0xbe
 800733e:	f7fb f827 	bl	8002390 <LCD_Line.constprop.1>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8007342:	f240 12dd 	movw	r2, #477	; 0x1dd
 8007346:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800734a:	21be      	movs	r1, #190	; 0xbe
 800734c:	4610      	mov	r0, r2
 800734e:	f44f 75a1 	mov.w	r5, #322	; 0x142
 8007352:	4e11      	ldr	r6, [pc, #68]	; (8007398 <main+0x1040>)
 8007354:	f7fb f81c 	bl	8002390 <LCD_Line.constprop.1>
 8007358:	e020      	b.n	800739c <main+0x1044>
 800735a:	bf00      	nop
 800735c:	0801d240 	.word	0x0801d240
 8007360:	0801d248 	.word	0x0801d248
 8007364:	007f7f7f 	.word	0x007f7f7f
 8007368:	20000000 	.word	0x20000000
 800736c:	200006d0 	.word	0x200006d0
 8007370:	20000312 	.word	0x20000312
 8007374:	2000044c 	.word	0x2000044c
 8007378:	40240000 	.word	0x40240000
 800737c:	20000588 	.word	0x20000588
 8007380:	2000044e 	.word	0x2000044e
 8007384:	200006c4 	.word	0x200006c4
 8007388:	66666667 	.word	0x66666667
 800738c:	20000448 	.word	0x20000448
 8007390:	88888889 	.word	0x88888889
 8007394:	20000584 	.word	0x20000584
 8007398:	2000058a 	.word	0x2000058a
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800739c:	f836 4f02 	ldrh.w	r4, [r6, #2]!
				LCD_Line(322 + i, 191, 322 + i, 318, 1, BLACK);
 80073a0:	462a      	mov	r2, r5
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80073a2:	f5a4 7466 	sub.w	r4, r4, #920	; 0x398
 80073a6:	b224      	sxth	r4, r4
				LCD_Line(322 + i, 191, 322 + i, 318, 1, BLACK);
 80073a8:	4628      	mov	r0, r5
 80073aa:	2300      	movs	r3, #0
 80073ac:	21bf      	movs	r1, #191	; 0xbf
 80073ae:	f384 0407 	usat	r4, #7, r4
 80073b2:	f7fa f987 	bl	80016c4 <LCD_Line.constprop.0>
				LCD_Line(322 + i, 191 + (127 - val), 322 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 80073b6:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
 80073ba:	005b      	lsls	r3, r3, #1
 80073bc:	b2db      	uxtb	r3, r3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 80073be:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 80073c2:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 80073c6:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80073ca:	4628      	mov	r0, r5
 80073cc:	462a      	mov	r2, r5
 80073ce:	b289      	uxth	r1, r1
 80073d0:	f7fa f978 	bl	80016c4 <LCD_Line.constprop.0>
			for (uint16_t i = 0; i < 155 ; i++) {
 80073d4:	4bcb      	ldr	r3, [pc, #812]	; (8007704 <main+0x13ac>)
 80073d6:	3501      	adds	r5, #1
 80073d8:	42b3      	cmp	r3, r6
 80073da:	b2ad      	uxth	r5, r5
 80073dc:	d1de      	bne.n	800739c <main+0x1044>
			graphViewed = 1;
 80073de:	2301      	movs	r3, #1
 80073e0:	9a07      	ldr	r2, [sp, #28]
 80073e2:	f882 34be 	strb.w	r3, [r2, #1214]	; 0x4be
			if (rtcSec % 2 != 0) {
 80073e6:	4613      	mov	r3, r2
 80073e8:	f892 20d4 	ldrb.w	r2, [r2, #212]	; 0xd4
			if (rtcMinLast != rtcMin) {
 80073ec:	f893 30d5 	ldrb.w	r3, [r3, #213]	; 0xd5
			if (rtcSec % 2 != 0) {
 80073f0:	9208      	str	r2, [sp, #32]
			if (rtcMinLast != rtcMin) {
 80073f2:	9309      	str	r3, [sp, #36]	; 0x24
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 80073f4:	2200      	movs	r2, #0
 80073f6:	2308      	movs	r3, #8
 80073f8:	2001      	movs	r0, #1
 80073fa:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80073fe:	f06f 0206 	mvn.w	r2, #6
 8007402:	e9cd 0205 	strd	r0, r2, [sp, #20]
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8007406:	4dc0      	ldr	r5, [pc, #768]	; (8007708 <main+0x13b0>)
 8007408:	9302      	str	r3, [sp, #8]
 800740a:	2301      	movs	r3, #1
 800740c:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8007410:	9e02      	ldr	r6, [sp, #8]
 8007412:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 8007416:	f106 0723 	add.w	r7, r6, #35	; 0x23
 800741a:	b2bf      	uxth	r7, r7
 800741c:	fa1f f989 	uxth.w	r9, r9
 8007420:	4639      	mov	r1, r7
 8007422:	461a      	mov	r2, r3
 8007424:	4648      	mov	r0, r9
 8007426:	9500      	str	r5, [sp, #0]
 8007428:	f7f9 fb58 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 800742c:	2301      	movs	r3, #1
 800742e:	9602      	str	r6, [sp, #8]
 8007430:	f104 0a23 	add.w	sl, r4, #35	; 0x23
 8007434:	36ac      	adds	r6, #172	; 0xac
 8007436:	b2b6      	uxth	r6, r6
 8007438:	fa1f fa8a 	uxth.w	sl, sl
 800743c:	4630      	mov	r0, r6
 800743e:	461a      	mov	r2, r3
 8007440:	4651      	mov	r1, sl
 8007442:	9500      	str	r5, [sp, #0]
 8007444:	f7f9 fb4a 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8007448:	2301      	movs	r3, #1
 800744a:	f1c4 08ac 	rsb	r8, r4, #172	; 0xac
 800744e:	fa1f f888 	uxth.w	r8, r8
 8007452:	4639      	mov	r1, r7
 8007454:	461a      	mov	r2, r3
 8007456:	4640      	mov	r0, r8
 8007458:	9500      	str	r5, [sp, #0]
 800745a:	f7f9 fb3f 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 800745e:	2301      	movs	r3, #1
 8007460:	9a02      	ldr	r2, [sp, #8]
 8007462:	4651      	mov	r1, sl
 8007464:	f1c2 07ac 	rsb	r7, r2, #172	; 0xac
 8007468:	b2bf      	uxth	r7, r7
 800746a:	461a      	mov	r2, r3
 800746c:	4638      	mov	r0, r7
 800746e:	9500      	str	r5, [sp, #0]
 8007470:	f7f9 fb34 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8007474:	2301      	movs	r3, #1
 8007476:	f1c4 0423 	rsb	r4, r4, #35	; 0x23
 800747a:	b2a4      	uxth	r4, r4
 800747c:	4621      	mov	r1, r4
 800747e:	4630      	mov	r0, r6
 8007480:	461a      	mov	r2, r3
 8007482:	9500      	str	r5, [sp, #0]
 8007484:	f7f9 fb2a 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8007488:	2301      	movs	r3, #1
 800748a:	9a02      	ldr	r2, [sp, #8]
 800748c:	4648      	mov	r0, r9
 800748e:	f1c2 0623 	rsb	r6, r2, #35	; 0x23
 8007492:	b2b6      	uxth	r6, r6
 8007494:	4631      	mov	r1, r6
 8007496:	461a      	mov	r2, r3
 8007498:	9500      	str	r5, [sp, #0]
 800749a:	f7f9 fb1f 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 800749e:	2301      	movs	r3, #1
 80074a0:	4631      	mov	r1, r6
 80074a2:	461a      	mov	r2, r3
 80074a4:	4640      	mov	r0, r8
 80074a6:	9500      	str	r5, [sp, #0]
 80074a8:	f7f9 fb18 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 80074ac:	2301      	movs	r3, #1
 80074ae:	4621      	mov	r1, r4
 80074b0:	461a      	mov	r2, r3
 80074b2:	4638      	mov	r0, r7
 80074b4:	9500      	str	r5, [sp, #0]
 80074b6:	f7f9 fb11 	bl	8000adc <LCD_Rect_Fill>
			P = (P + 5) + (2 * (a_ - b_));
 80074ba:	e9dd 4603 	ldrd	r4, r6, [sp, #12]
 80074be:	9b06      	ldr	r3, [sp, #24]
 80074c0:	1ba1      	subs	r1, r4, r6
		if (P < 0)
 80074c2:	2b00      	cmp	r3, #0
			P = (P + 5) + (2 * (a_ - b_));
 80074c4:	f103 0205 	add.w	r2, r3, #5
			P = (P + 3) + (2 * a_);
 80074c8:	f103 0003 	add.w	r0, r3, #3
		if (P < 0)
 80074cc:	f2c0 8302 	blt.w	8007ad4 <main+0x177c>
			a_++;
 80074d0:	9c05      	ldr	r4, [sp, #20]
			P = (P + 5) + (2 * (a_ - b_));
 80074d2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			a_++;
 80074d6:	4623      	mov	r3, r4
			P = (P + 5) + (2 * (a_ - b_));
 80074d8:	9206      	str	r2, [sp, #24]
	while (a_ <= b_)
 80074da:	9a03      	ldr	r2, [sp, #12]
			b_--;
 80074dc:	1e70      	subs	r0, r6, #1
	while (a_ <= b_)
 80074de:	3201      	adds	r2, #1
 80074e0:	9203      	str	r2, [sp, #12]
 80074e2:	3301      	adds	r3, #1
 80074e4:	b282      	uxth	r2, r0
 80074e6:	4284      	cmp	r4, r0
			b_--;
 80074e8:	9004      	str	r0, [sp, #16]
 80074ea:	9202      	str	r2, [sp, #8]
	while (a_ <= b_)
 80074ec:	9305      	str	r3, [sp, #20]
 80074ee:	dd8c      	ble.n	800740a <main+0x10b2>
 80074f0:	2200      	movs	r2, #0
 80074f2:	2308      	movs	r3, #8
 80074f4:	2101      	movs	r1, #1
 80074f6:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80074fa:	f06f 0206 	mvn.w	r2, #6
 80074fe:	e9cd 1205 	strd	r1, r2, [sp, #20]
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8007502:	4d81      	ldr	r5, [pc, #516]	; (8007708 <main+0x13b0>)
 8007504:	9302      	str	r3, [sp, #8]
 8007506:	2301      	movs	r3, #1
 8007508:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 800750c:	9e02      	ldr	r6, [sp, #8]
 800750e:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 8007512:	f106 074b 	add.w	r7, r6, #75	; 0x4b
 8007516:	b2bf      	uxth	r7, r7
 8007518:	fa1f f989 	uxth.w	r9, r9
 800751c:	4639      	mov	r1, r7
 800751e:	461a      	mov	r2, r3
 8007520:	4648      	mov	r0, r9
 8007522:	9500      	str	r5, [sp, #0]
 8007524:	f7f9 fada 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8007528:	2301      	movs	r3, #1
 800752a:	9602      	str	r6, [sp, #8]
 800752c:	f104 0a4b 	add.w	sl, r4, #75	; 0x4b
 8007530:	36ac      	adds	r6, #172	; 0xac
 8007532:	b2b6      	uxth	r6, r6
 8007534:	fa1f fa8a 	uxth.w	sl, sl
 8007538:	4630      	mov	r0, r6
 800753a:	461a      	mov	r2, r3
 800753c:	4651      	mov	r1, sl
 800753e:	9500      	str	r5, [sp, #0]
 8007540:	f7f9 facc 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8007544:	2301      	movs	r3, #1
 8007546:	f1c4 08ac 	rsb	r8, r4, #172	; 0xac
 800754a:	fa1f f888 	uxth.w	r8, r8
 800754e:	4639      	mov	r1, r7
 8007550:	461a      	mov	r2, r3
 8007552:	4640      	mov	r0, r8
 8007554:	9500      	str	r5, [sp, #0]
 8007556:	f7f9 fac1 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 800755a:	2301      	movs	r3, #1
 800755c:	9a02      	ldr	r2, [sp, #8]
 800755e:	4651      	mov	r1, sl
 8007560:	f1c2 07ac 	rsb	r7, r2, #172	; 0xac
 8007564:	b2bf      	uxth	r7, r7
 8007566:	461a      	mov	r2, r3
 8007568:	4638      	mov	r0, r7
 800756a:	9500      	str	r5, [sp, #0]
 800756c:	f7f9 fab6 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8007570:	2301      	movs	r3, #1
 8007572:	f1c4 044b 	rsb	r4, r4, #75	; 0x4b
 8007576:	b2a4      	uxth	r4, r4
 8007578:	4621      	mov	r1, r4
 800757a:	4630      	mov	r0, r6
 800757c:	461a      	mov	r2, r3
 800757e:	9500      	str	r5, [sp, #0]
 8007580:	f7f9 faac 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8007584:	2301      	movs	r3, #1
 8007586:	9a02      	ldr	r2, [sp, #8]
 8007588:	4648      	mov	r0, r9
 800758a:	f1c2 064b 	rsb	r6, r2, #75	; 0x4b
 800758e:	b2b6      	uxth	r6, r6
 8007590:	4631      	mov	r1, r6
 8007592:	461a      	mov	r2, r3
 8007594:	9500      	str	r5, [sp, #0]
 8007596:	f7f9 faa1 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 800759a:	2301      	movs	r3, #1
 800759c:	4631      	mov	r1, r6
 800759e:	461a      	mov	r2, r3
 80075a0:	4640      	mov	r0, r8
 80075a2:	9500      	str	r5, [sp, #0]
 80075a4:	f7f9 fa9a 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 80075a8:	2301      	movs	r3, #1
 80075aa:	4621      	mov	r1, r4
 80075ac:	461a      	mov	r2, r3
 80075ae:	4638      	mov	r0, r7
 80075b0:	9500      	str	r5, [sp, #0]
 80075b2:	f7f9 fa93 	bl	8000adc <LCD_Rect_Fill>
			P = (P + 5) + (2 * (a_ - b_));
 80075b6:	e9dd 4603 	ldrd	r4, r6, [sp, #12]
 80075ba:	9b06      	ldr	r3, [sp, #24]
 80075bc:	1ba1      	subs	r1, r4, r6
		if (P < 0)
 80075be:	2b00      	cmp	r3, #0
			P = (P + 5) + (2 * (a_ - b_));
 80075c0:	f103 0205 	add.w	r2, r3, #5
			P = (P + 3) + (2 * a_);
 80075c4:	f103 0003 	add.w	r0, r3, #3
		if (P < 0)
 80075c8:	f2c0 81ec 	blt.w	80079a4 <main+0x164c>
			a_++;
 80075cc:	9c05      	ldr	r4, [sp, #20]
			P = (P + 5) + (2 * (a_ - b_));
 80075ce:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			a_++;
 80075d2:	4623      	mov	r3, r4
			P = (P + 5) + (2 * (a_ - b_));
 80075d4:	9206      	str	r2, [sp, #24]
	while (a_ <= b_)
 80075d6:	9a03      	ldr	r2, [sp, #12]
			b_--;
 80075d8:	1e70      	subs	r0, r6, #1
	while (a_ <= b_)
 80075da:	3201      	adds	r2, #1
 80075dc:	9203      	str	r2, [sp, #12]
 80075de:	3301      	adds	r3, #1
 80075e0:	b282      	uxth	r2, r0
 80075e2:	4284      	cmp	r4, r0
			b_--;
 80075e4:	9004      	str	r0, [sp, #16]
 80075e6:	9202      	str	r2, [sp, #8]
	while (a_ <= b_)
 80075e8:	9305      	str	r3, [sp, #20]
 80075ea:	dd8c      	ble.n	8007506 <main+0x11ae>
			if (rtcSec % 2 != 0) {
 80075ec:	9b08      	ldr	r3, [sp, #32]
 80075ee:	f013 0801 	ands.w	r8, r3, #1
 80075f2:	f000 81e8 	beq.w	80079c6 <main+0x166e>
	b_ = radius;
 80075f6:	f04f 0807 	mov.w	r8, #7
 80075fa:	f04f 0a00 	mov.w	sl, #0
 80075fe:	2601      	movs	r6, #1
	P = 1 - radius;
 8007600:	f06f 0705 	mvn.w	r7, #5
 8007604:	46c1      	mov	r9, r8
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8007606:	ea4f 0449 	mov.w	r4, r9, lsl #1
 800760a:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8007708 <main+0x13b0>
 800760e:	b2b5      	uxth	r5, r6
 8007610:	3401      	adds	r4, #1
 8007612:	b2a4      	uxth	r4, r4
 8007614:	f10a 0201 	add.w	r2, sl, #1
 8007618:	f1c9 0123 	rsb	r1, r9, #35	; 0x23
 800761c:	f1c5 00ad 	rsb	r0, r5, #173	; 0xad
 8007620:	4623      	mov	r3, r4
 8007622:	b292      	uxth	r2, r2
 8007624:	b289      	uxth	r1, r1
 8007626:	b280      	uxth	r0, r0
 8007628:	f8cd c000 	str.w	ip, [sp]
 800762c:	9202      	str	r2, [sp, #8]
 800762e:	f7f9 fa55 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8007632:	9a02      	ldr	r2, [sp, #8]
 8007634:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 8007708 <main+0x13b0>
 8007638:	f1c9 00ac 	rsb	r0, r9, #172	; 0xac
 800763c:	f1c5 0124 	rsb	r1, r5, #36	; 0x24
 8007640:	4613      	mov	r3, r2
 8007642:	b289      	uxth	r1, r1
 8007644:	4622      	mov	r2, r4
 8007646:	f8cd c000 	str.w	ip, [sp]
 800764a:	b280      	uxth	r0, r0
 800764c:	f7f9 fa46 	bl	8000adc <LCD_Rect_Fill>
 8007650:	1e74      	subs	r4, r6, #1
		if (P < 0)
 8007652:	2f00      	cmp	r7, #0
			P = (P + 5) + (2 * (a_ - b_));
 8007654:	eba4 0408 	sub.w	r4, r4, r8
 8007658:	f107 0205 	add.w	r2, r7, #5
			P = (P + 3) + (2 * a_);
 800765c:	f107 0103 	add.w	r1, r7, #3
		if (P < 0)
 8007660:	f2c0 824f 	blt.w	8007b02 <main+0x17aa>
			b_--;
 8007664:	f108 38ff 	add.w	r8, r8, #4294967295
	while (a_ <= b_)
 8007668:	4546      	cmp	r6, r8
			P = (P + 5) + (2 * (a_ - b_));
 800766a:	eb02 0744 	add.w	r7, r2, r4, lsl #1
	while (a_ <= b_)
 800766e:	f10a 0a02 	add.w	sl, sl, #2
 8007672:	fa1f f988 	uxth.w	r9, r8
 8007676:	f106 0601 	add.w	r6, r6, #1
 800767a:	ddc4      	ble.n	8007606 <main+0x12ae>
 800767c:	f04f 0807 	mov.w	r8, #7
 8007680:	f04f 0a00 	mov.w	sl, #0
 8007684:	2601      	movs	r6, #1
 8007686:	f06f 0705 	mvn.w	r7, #5
 800768a:	46c1      	mov	r9, r8
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 800768c:	ea4f 0449 	mov.w	r4, r9, lsl #1
 8007690:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007708 <main+0x13b0>
 8007694:	b2b5      	uxth	r5, r6
 8007696:	3401      	adds	r4, #1
 8007698:	b2a4      	uxth	r4, r4
 800769a:	f10a 0201 	add.w	r2, sl, #1
 800769e:	f1c9 014b 	rsb	r1, r9, #75	; 0x4b
 80076a2:	f1c5 00ad 	rsb	r0, r5, #173	; 0xad
 80076a6:	4623      	mov	r3, r4
 80076a8:	b292      	uxth	r2, r2
 80076aa:	b289      	uxth	r1, r1
 80076ac:	b280      	uxth	r0, r0
 80076ae:	f8cd c000 	str.w	ip, [sp]
 80076b2:	9202      	str	r2, [sp, #8]
 80076b4:	f7f9 fa12 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 80076b8:	9a02      	ldr	r2, [sp, #8]
 80076ba:	f8df c04c 	ldr.w	ip, [pc, #76]	; 8007708 <main+0x13b0>
 80076be:	f1c9 00ac 	rsb	r0, r9, #172	; 0xac
 80076c2:	f1c5 014c 	rsb	r1, r5, #76	; 0x4c
 80076c6:	4613      	mov	r3, r2
 80076c8:	b289      	uxth	r1, r1
 80076ca:	4622      	mov	r2, r4
 80076cc:	f8cd c000 	str.w	ip, [sp]
 80076d0:	b280      	uxth	r0, r0
 80076d2:	f7f9 fa03 	bl	8000adc <LCD_Rect_Fill>
 80076d6:	1e74      	subs	r4, r6, #1
		if (P < 0)
 80076d8:	2f00      	cmp	r7, #0
			P = (P + 5) + (2 * (a_ - b_));
 80076da:	eba4 0408 	sub.w	r4, r4, r8
 80076de:	f107 0205 	add.w	r2, r7, #5
			P = (P + 3) + (2 * a_);
 80076e2:	f107 0103 	add.w	r1, r7, #3
		if (P < 0)
 80076e6:	f2c0 8202 	blt.w	8007aee <main+0x1796>
			b_--;
 80076ea:	f108 38ff 	add.w	r8, r8, #4294967295
	while (a_ <= b_)
 80076ee:	4546      	cmp	r6, r8
			P = (P + 5) + (2 * (a_ - b_));
 80076f0:	eb02 0744 	add.w	r7, r2, r4, lsl #1
	while (a_ <= b_)
 80076f4:	f10a 0a02 	add.w	sl, sl, #2
 80076f8:	fa1f f988 	uxth.w	r9, r8
 80076fc:	f106 0601 	add.w	r6, r6, #1
 8007700:	ddc4      	ble.n	800768c <main+0x1334>
 8007702:	e003      	b.n	800770c <main+0x13b4>
 8007704:	200006c0 	.word	0x200006c0
 8007708:	00ffbf00 	.word	0x00ffbf00
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800770c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007710:	4b9c      	ldr	r3, [pc, #624]	; (8007984 <main+0x162c>)
 8007712:	611a      	str	r2, [r3, #16]
			if (rtcMinLast != rtcMin) {
 8007714:	4c9c      	ldr	r4, [pc, #624]	; (8007988 <main+0x1630>)
 8007716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007718:	7b22      	ldrb	r2, [r4, #12]
 800771a:	429a      	cmp	r2, r3
 800771c:	f000 80b1 	beq.w	8007882 <main+0x152a>
				sprintf(clockPrint, "%02d", rtcMinLast);
 8007720:	499a      	ldr	r1, [pc, #616]	; (800798c <main+0x1634>)
 8007722:	4658      	mov	r0, fp
 8007724:	f001 faa6 	bl	8008c74 <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8007728:	2200      	movs	r2, #0
 800772a:	4659      	mov	r1, fp
 800772c:	20b4      	movs	r0, #180	; 0xb4
 800772e:	f7fc fbe7 	bl	8003f00 <LCD_Font.constprop.1>
				sprintf(clockPrint, "%02d", rtcMin);
 8007732:	9f07      	ldr	r7, [sp, #28]
 8007734:	4995      	ldr	r1, [pc, #596]	; (800798c <main+0x1634>)
 8007736:	f897 20d5 	ldrb.w	r2, [r7, #213]	; 0xd5
 800773a:	4658      	mov	r0, fp
 800773c:	f001 fa9a 	bl	8008c74 <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, HUE_14);
 8007740:	4a93      	ldr	r2, [pc, #588]	; (8007990 <main+0x1638>)
 8007742:	4659      	mov	r1, fp
 8007744:	20b4      	movs	r0, #180	; 0xb4
 8007746:	f7fc fbdb 	bl	8003f00 <LCD_Font.constprop.1>
				if (rtcHrsLast != rtcHrs) {
 800774a:	7b62      	ldrb	r2, [r4, #13]
 800774c:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8007750:	4293      	cmp	r3, r2
 8007752:	f000 808e 	beq.w	8007872 <main+0x151a>
					sprintf(clockPrint, "%02d", rtcHrsLast);
 8007756:	498d      	ldr	r1, [pc, #564]	; (800798c <main+0x1634>)
 8007758:	4658      	mov	r0, fp
 800775a:	f001 fa8b 	bl	8008c74 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 800775e:	2200      	movs	r2, #0
 8007760:	4659      	mov	r1, fp
 8007762:	4610      	mov	r0, r2
 8007764:	f7fc fbcc 	bl	8003f00 <LCD_Font.constprop.1>
					sprintf(clockPrint, "%02d", rtcHrs);
 8007768:	f897 20d6 	ldrb.w	r2, [r7, #214]	; 0xd6
 800776c:	4987      	ldr	r1, [pc, #540]	; (800798c <main+0x1634>)
 800776e:	4658      	mov	r0, fp
 8007770:	f001 fa80 	bl	8008c74 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, HUE_14);
 8007774:	4659      	mov	r1, fp
 8007776:	2000      	movs	r0, #0
 8007778:	4a85      	ldr	r2, [pc, #532]	; (8007990 <main+0x1638>)
 800777a:	f7fc fbc1 	bl	8003f00 <LCD_Font.constprop.1>
					if (rtcDayLast != rtcDay) {
 800777e:	f897 40d7 	ldrb.w	r4, [r7, #215]	; 0xd7
 8007782:	f897 34bf 	ldrb.w	r3, [r7, #1215]	; 0x4bf
 8007786:	42a3      	cmp	r3, r4
 8007788:	d062      	beq.n	8007850 <main+0x14f8>
						LCD_Font(2, 130, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_36, 1, BLACK);
 800778a:	2607      	movs	r6, #7
 800778c:	1d63      	adds	r3, r4, #5
 800778e:	fbb3 f1f6 	udiv	r1, r3, r6
 8007792:	f8df 8200 	ldr.w	r8, [pc, #512]	; 8007994 <main+0x163c>
 8007796:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800779a:	1a5b      	subs	r3, r3, r1
 800779c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80077a0:	f8d3 15f8 	ldr.w	r1, [r3, #1528]	; 0x5f8
 80077a4:	2200      	movs	r2, #0
 80077a6:	2002      	movs	r0, #2
						LCD_Font(2, 130, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_36, 1, GRAY);
 80077a8:	3406      	adds	r4, #6
						LCD_Font(2, 130, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_36, 1, BLACK);
 80077aa:	f7fc fb61 	bl	8003e70 <LCD_Font.constprop.0>
						LCD_Font(2, 130, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_36, 1, GRAY);
 80077ae:	fbb4 f6f6 	udiv	r6, r4, r6
						LCD_Font(280, 130, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_36, 1, BLACK);
 80077b2:	250c      	movs	r5, #12
						LCD_Font(2, 130, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_36, 1, GRAY);
 80077b4:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 80077b8:	1ba4      	subs	r4, r4, r6
 80077ba:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80077be:	f8d3 15f8 	ldr.w	r1, [r3, #1528]	; 0x5f8
 80077c2:	2002      	movs	r0, #2
 80077c4:	4a74      	ldr	r2, [pc, #464]	; (8007998 <main+0x1640>)
 80077c6:	f7fc fb53 	bl	8003e70 <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 80077ca:	f897 34c2 	ldrb.w	r3, [r7, #1218]	; 0x4c2
 80077ce:	4973      	ldr	r1, [pc, #460]	; (800799c <main+0x1644>)
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	f897 34c0 	ldrb.w	r3, [r7, #1216]	; 0x4c0
 80077d6:	f897 24c1 	ldrb.w	r2, [r7, #1217]	; 0x4c1
 80077da:	4658      	mov	r0, fp
 80077dc:	f001 fa4a 	bl	8008c74 <siprintf>
						LCD_Font(100, 130, clockPrint, &DejaVu_Sans_36, 1, BLACK);
 80077e0:	2200      	movs	r2, #0
 80077e2:	4659      	mov	r1, fp
 80077e4:	2064      	movs	r0, #100	; 0x64
 80077e6:	f7fc fb43 	bl	8003e70 <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear);
 80077ea:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80077ee:	496b      	ldr	r1, [pc, #428]	; (800799c <main+0x1644>)
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 80077f6:	f897 20d8 	ldrb.w	r2, [r7, #216]	; 0xd8
 80077fa:	4658      	mov	r0, fp
 80077fc:	f001 fa3a 	bl	8008c74 <siprintf>
						LCD_Font(100, 130, clockPrint, &DejaVu_Sans_36, 1, GRAY);
 8007800:	4659      	mov	r1, fp
 8007802:	2064      	movs	r0, #100	; 0x64
 8007804:	4a64      	ldr	r2, [pc, #400]	; (8007998 <main+0x1640>)
 8007806:	f7fc fb33 	bl	8003e70 <LCD_Font.constprop.0>
						LCD_Font(280, 130, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_36, 1, BLACK);
 800780a:	f897 40d9 	ldrb.w	r4, [r7, #217]	; 0xd9
 800780e:	2200      	movs	r2, #0
 8007810:	f104 030a 	add.w	r3, r4, #10
 8007814:	fbb3 f1f5 	udiv	r1, r3, r5
 8007818:	fb05 3311 	mls	r3, r5, r1, r3
 800781c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8007820:	f8d3 1614 	ldr.w	r1, [r3, #1556]	; 0x614
 8007824:	f44f 708c 	mov.w	r0, #280	; 0x118
						LCD_Font(280, 130, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_36, 1, GRAY);
 8007828:	340b      	adds	r4, #11
						LCD_Font(280, 130, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_36, 1, BLACK);
 800782a:	f7fc fb21 	bl	8003e70 <LCD_Font.constprop.0>
						LCD_Font(280, 130, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_36, 1, GRAY);
 800782e:	fbb4 f3f5 	udiv	r3, r4, r5
 8007832:	fb05 4413 	mls	r4, r5, r3, r4
 8007836:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800783a:	f8d3 1614 	ldr.w	r1, [r3, #1556]	; 0x614
 800783e:	f44f 708c 	mov.w	r0, #280	; 0x118
 8007842:	4a55      	ldr	r2, [pc, #340]	; (8007998 <main+0x1640>)
 8007844:	f7fc fb14 	bl	8003e70 <LCD_Font.constprop.0>
						rtcDayLast = rtcDay;
 8007848:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800784c:	f887 34bf 	strb.w	r3, [r7, #1215]	; 0x4bf
					rtcDateLast = rtcDate;
 8007850:	9a07      	ldr	r2, [sp, #28]
 8007852:	f892 30d8 	ldrb.w	r3, [r2, #216]	; 0xd8
 8007856:	f882 34c1 	strb.w	r3, [r2, #1217]	; 0x4c1
					rtcMonthLast = rtcMonth;
 800785a:	f892 30d9 	ldrb.w	r3, [r2, #217]	; 0xd9
 800785e:	f882 34c0 	strb.w	r3, [r2, #1216]	; 0x4c0
					rtcYearLast = rtcYear;
 8007862:	f892 30da 	ldrb.w	r3, [r2, #218]	; 0xda
 8007866:	f882 34c2 	strb.w	r3, [r2, #1218]	; 0x4c2
					rtcHrsLast = rtcHrs;
 800786a:	f892 30d6 	ldrb.w	r3, [r2, #214]	; 0xd6
 800786e:	4a46      	ldr	r2, [pc, #280]	; (8007988 <main+0x1630>)
 8007870:	7353      	strb	r3, [r2, #13]
				rtcMinLast = rtcMin;
 8007872:	9a07      	ldr	r2, [sp, #28]
 8007874:	4944      	ldr	r1, [pc, #272]	; (8007988 <main+0x1630>)
 8007876:	f892 30d5 	ldrb.w	r3, [r2, #213]	; 0xd5
 800787a:	730b      	strb	r3, [r1, #12]
			rtcSecLast = rtcSec;
 800787c:	f892 30d4 	ldrb.w	r3, [r2, #212]	; 0xd4
 8007880:	9308      	str	r3, [sp, #32]
 8007882:	4a41      	ldr	r2, [pc, #260]	; (8007988 <main+0x1630>)
 8007884:	9b08      	ldr	r3, [sp, #32]
 8007886:	7213      	strb	r3, [r2, #8]
		DS3231_Update();
 8007888:	f7fc fa3e 	bl	8003d08 <DS3231_Update>

uint8_t DS3231_getSec(void) {
    return bcdToDec(rtcBuffer[0]);
 800788c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8007890:	f89c 6058 	ldrb.w	r6, [ip, #88]	; 0x58
}

uint8_t DS3231_getMin(void) {
    return bcdToDec(rtcBuffer[1]);
 8007894:	f89c 5059 	ldrb.w	r5, [ip, #89]	; 0x59
    return ((val / 16 * 10) + (val % 16));
 8007898:	0937      	lsrs	r7, r6, #4
 800789a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800789e:	f006 060f 	and.w	r6, r6, #15
 80078a2:	eb06 0647 	add.w	r6, r6, r7, lsl #1
		rtcSec = DS3231_getSec();
 80078a6:	4667      	mov	r7, ip
 80078a8:	b2f6      	uxtb	r6, r6
}

uint8_t DS3231_getHrs(void) {
    return bcdToDec(rtcBuffer[2]);
 80078aa:	f89c 405a 	ldrb.w	r4, [ip, #90]	; 0x5a
}

uint8_t DS3231_getDay(void) {
    return bcdToDec(rtcBuffer[3]);
 80078ae:	f89c 005b 	ldrb.w	r0, [ip, #91]	; 0x5b
}

uint8_t DS3231_getDate(void) {
    return bcdToDec(rtcBuffer[4]);
 80078b2:	f89c 105c 	ldrb.w	r1, [ip, #92]	; 0x5c
}

uint8_t DS3231_getMonth(void) {
    return bcdToDec(rtcBuffer[5]);
 80078b6:	f89c 205d 	ldrb.w	r2, [ip, #93]	; 0x5d
}

uint8_t DS3231_getYear(void) {
    return bcdToDec(rtcBuffer[6]);
 80078ba:	f89c 305e 	ldrb.w	r3, [ip, #94]	; 0x5e
 80078be:	46b4      	mov	ip, r6
    return ((val / 16 * 10) + (val % 16));
 80078c0:	9608      	str	r6, [sp, #32]
 80078c2:	f887 60d4 	strb.w	r6, [r7, #212]	; 0xd4
 80078c6:	092e      	lsrs	r6, r5, #4
 80078c8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80078cc:	f005 050f 	and.w	r5, r5, #15
 80078d0:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 80078d4:	b2ed      	uxtb	r5, r5
 80078d6:	9509      	str	r5, [sp, #36]	; 0x24
		rtcMin = DS3231_getMin();
 80078d8:	f887 50d5 	strb.w	r5, [r7, #213]	; 0xd5
 80078dc:	0925      	lsrs	r5, r4, #4
 80078de:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80078e2:	f004 040f 	and.w	r4, r4, #15
 80078e6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
		rtcHrs = DS3231_getHrs();
 80078ea:	f887 40d6 	strb.w	r4, [r7, #214]	; 0xd6
 80078ee:	0904      	lsrs	r4, r0, #4
 80078f0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80078f4:	f000 000f 	and.w	r0, r0, #15
 80078f8:	eb00 0044 	add.w	r0, r0, r4, lsl #1
		rtcDay = DS3231_getDay();
 80078fc:	f887 00d7 	strb.w	r0, [r7, #215]	; 0xd7
 8007900:	0908      	lsrs	r0, r1, #4
 8007902:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007906:	f001 010f 	and.w	r1, r1, #15
 800790a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
		rtcDate = DS3231_getDate();
 800790e:	f887 10d8 	strb.w	r1, [r7, #216]	; 0xd8
 8007912:	0911      	lsrs	r1, r2, #4
 8007914:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007918:	f002 020f 	and.w	r2, r2, #15
 800791c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
		rtcMonth = DS3231_getMonth();
 8007920:	f887 20d9 	strb.w	r2, [r7, #217]	; 0xd9
 8007924:	091a      	lsrs	r2, r3, #4
 8007926:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800792a:	f003 030f 	and.w	r3, r3, #15
 800792e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
		rtcYear = DS3231_getYear();
 8007932:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
		if (rtcSecLast != rtcSec) {
 8007936:	4b14      	ldr	r3, [pc, #80]	; (8007988 <main+0x1630>)
 8007938:	7a1b      	ldrb	r3, [r3, #8]
 800793a:	4563      	cmp	r3, ip
 800793c:	d0a4      	beq.n	8007888 <main+0x1530>
 800793e:	2400      	movs	r4, #0
    uint16_t dt[1] = {0};
 8007940:	4626      	mov	r6, r4
 8007942:	4d17      	ldr	r5, [pc, #92]	; (80079a0 <main+0x1648>)
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007944:	b2a0      	uxth	r0, r4
 8007946:	4659      	mov	r1, fp
    uint16_t dt[1] = {0};
 8007948:	f8ad 6060 	strh.w	r6, [sp, #96]	; 0x60
			for (uint16_t i = 0; i < 4096; i++) eeprom[i] = AT24XX_Read(i);
 800794c:	3401      	adds	r4, #1
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800794e:	f7fb fb5d 	bl	800300c <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8007952:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8007956:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800795a:	f805 3f01 	strb.w	r3, [r5, #1]!
 800795e:	d1f1      	bne.n	8007944 <main+0x15ec>
 8007960:	f7ff b962 	b.w	8006c28 <main+0x8d0>
 8007964:	9a07      	ldr	r2, [sp, #28]
 8007966:	6812      	ldr	r2, [r2, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007968:	1b12      	subs	r2, r2, r4
 800796a:	2a64      	cmp	r2, #100	; 0x64
 800796c:	f200 8219 	bhi.w	8007da2 <main+0x1a4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007970:	680b      	ldr	r3, [r1, #0]
 8007972:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8007976:	d0f5      	beq.n	8007964 <main+0x160c>
    huart->gState = HAL_UART_STATE_READY;
 8007978:	2320      	movs	r3, #32
 800797a:	9a07      	ldr	r2, [sp, #28]
 800797c:	f882 30a9 	strb.w	r3, [r2, #169]	; 0xa9
    return HAL_OK;
 8007980:	e782      	b.n	8007888 <main+0x1530>
 8007982:	bf00      	nop
 8007984:	40011000 	.word	0x40011000
 8007988:	20000000 	.word	0x20000000
 800798c:	0801d254 	.word	0x0801d254
 8007990:	00ffbf00 	.word	0x00ffbf00
 8007994:	0800c908 	.word	0x0800c908
 8007998:	007f7f7f 	.word	0x007f7f7f
 800799c:	0801d25c 	.word	0x0801d25c
 80079a0:	200006cf 	.word	0x200006cf
			a_++;
 80079a4:	9905      	ldr	r1, [sp, #20]
			P = (P + 3) + (2 * a_);
 80079a6:	eb00 0244 	add.w	r2, r0, r4, lsl #1
			a_++;
 80079aa:	460b      	mov	r3, r1
			P = (P + 3) + (2 * a_);
 80079ac:	9206      	str	r2, [sp, #24]
	while (a_ <= b_)
 80079ae:	3301      	adds	r3, #1
 80079b0:	1c62      	adds	r2, r4, #1
 80079b2:	428e      	cmp	r6, r1
 80079b4:	9203      	str	r2, [sp, #12]
 80079b6:	9305      	str	r3, [sp, #20]
 80079b8:	f6bf ada5 	bge.w	8007506 <main+0x11ae>
			if (rtcSec % 2 != 0) {
 80079bc:	9b08      	ldr	r3, [sp, #32]
 80079be:	f013 0801 	ands.w	r8, r3, #1
 80079c2:	f47f ae18 	bne.w	80075f6 <main+0x129e>
	b_ = radius;
 80079c6:	f04f 0907 	mov.w	r9, #7
 80079ca:	2601      	movs	r6, #1
	P = 1 - radius;
 80079cc:	f06f 0705 	mvn.w	r7, #5
 80079d0:	46ca      	mov	sl, r9
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 80079d2:	f04f 0c00 	mov.w	ip, #0
 80079d6:	ea4f 044a 	mov.w	r4, sl, lsl #1
 80079da:	b2b5      	uxth	r5, r6
 80079dc:	3401      	adds	r4, #1
 80079de:	b2a4      	uxth	r4, r4
 80079e0:	f108 0201 	add.w	r2, r8, #1
 80079e4:	f1ca 0123 	rsb	r1, sl, #35	; 0x23
 80079e8:	f1c5 00ad 	rsb	r0, r5, #173	; 0xad
 80079ec:	4623      	mov	r3, r4
 80079ee:	b292      	uxth	r2, r2
 80079f0:	b289      	uxth	r1, r1
 80079f2:	b280      	uxth	r0, r0
 80079f4:	f8cd c000 	str.w	ip, [sp]
 80079f8:	9202      	str	r2, [sp, #8]
 80079fa:	f7f9 f86f 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 80079fe:	f04f 0c00 	mov.w	ip, #0
 8007a02:	9a02      	ldr	r2, [sp, #8]
 8007a04:	f1ca 00ac 	rsb	r0, sl, #172	; 0xac
 8007a08:	f1c5 0124 	rsb	r1, r5, #36	; 0x24
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	b289      	uxth	r1, r1
 8007a10:	4622      	mov	r2, r4
 8007a12:	f8cd c000 	str.w	ip, [sp]
 8007a16:	b280      	uxth	r0, r0
 8007a18:	f7f9 f860 	bl	8000adc <LCD_Rect_Fill>
 8007a1c:	1e74      	subs	r4, r6, #1
		if (P < 0)
 8007a1e:	2f00      	cmp	r7, #0
			P = (P + 5) + (2 * (a_ - b_));
 8007a20:	eba4 0409 	sub.w	r4, r4, r9
 8007a24:	f107 0205 	add.w	r2, r7, #5
			P = (P + 3) + (2 * a_);
 8007a28:	f107 0103 	add.w	r1, r7, #3
		if (P < 0)
 8007a2c:	db7c      	blt.n	8007b28 <main+0x17d0>
			b_--;
 8007a2e:	f109 39ff 	add.w	r9, r9, #4294967295
	while (a_ <= b_)
 8007a32:	454e      	cmp	r6, r9
			P = (P + 5) + (2 * (a_ - b_));
 8007a34:	eb02 0744 	add.w	r7, r2, r4, lsl #1
	while (a_ <= b_)
 8007a38:	f108 0802 	add.w	r8, r8, #2
 8007a3c:	fa1f fa89 	uxth.w	sl, r9
 8007a40:	f106 0601 	add.w	r6, r6, #1
 8007a44:	ddc5      	ble.n	80079d2 <main+0x167a>
 8007a46:	f04f 0807 	mov.w	r8, #7
 8007a4a:	f04f 0a00 	mov.w	sl, #0
 8007a4e:	2601      	movs	r6, #1
 8007a50:	f06f 0705 	mvn.w	r7, #5
 8007a54:	46c1      	mov	r9, r8
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8007a56:	f04f 0c00 	mov.w	ip, #0
 8007a5a:	ea4f 0449 	mov.w	r4, r9, lsl #1
 8007a5e:	b2b5      	uxth	r5, r6
 8007a60:	3401      	adds	r4, #1
 8007a62:	b2a4      	uxth	r4, r4
 8007a64:	f10a 0201 	add.w	r2, sl, #1
 8007a68:	f1c9 014b 	rsb	r1, r9, #75	; 0x4b
 8007a6c:	f1c5 00ad 	rsb	r0, r5, #173	; 0xad
 8007a70:	4623      	mov	r3, r4
 8007a72:	b292      	uxth	r2, r2
 8007a74:	b289      	uxth	r1, r1
 8007a76:	b280      	uxth	r0, r0
 8007a78:	f8cd c000 	str.w	ip, [sp]
 8007a7c:	9202      	str	r2, [sp, #8]
 8007a7e:	f7f9 f82d 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8007a82:	f04f 0c00 	mov.w	ip, #0
 8007a86:	9a02      	ldr	r2, [sp, #8]
 8007a88:	f1c9 00ac 	rsb	r0, r9, #172	; 0xac
 8007a8c:	f1c5 014c 	rsb	r1, r5, #76	; 0x4c
 8007a90:	4613      	mov	r3, r2
 8007a92:	b289      	uxth	r1, r1
 8007a94:	4622      	mov	r2, r4
 8007a96:	f8cd c000 	str.w	ip, [sp]
 8007a9a:	b280      	uxth	r0, r0
 8007a9c:	f7f9 f81e 	bl	8000adc <LCD_Rect_Fill>
 8007aa0:	1e74      	subs	r4, r6, #1
		if (P < 0)
 8007aa2:	2f00      	cmp	r7, #0
			P = (P + 5) + (2 * (a_ - b_));
 8007aa4:	eba4 0408 	sub.w	r4, r4, r8
 8007aa8:	f107 0205 	add.w	r2, r7, #5
			P = (P + 3) + (2 * a_);
 8007aac:	f107 0103 	add.w	r1, r7, #3
		if (P < 0)
 8007ab0:	db31      	blt.n	8007b16 <main+0x17be>
			b_--;
 8007ab2:	f108 38ff 	add.w	r8, r8, #4294967295
	while (a_ <= b_)
 8007ab6:	4546      	cmp	r6, r8
			P = (P + 5) + (2 * (a_ - b_));
 8007ab8:	eb02 0744 	add.w	r7, r2, r4, lsl #1
	while (a_ <= b_)
 8007abc:	f10a 0a02 	add.w	sl, sl, #2
 8007ac0:	fa1f f988 	uxth.w	r9, r8
 8007ac4:	f106 0601 	add.w	r6, r6, #1
 8007ac8:	ddc5      	ble.n	8007a56 <main+0x16fe>
    GPIOx->BSRR = GPIO_Pin;
 8007aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007ace:	4bbf      	ldr	r3, [pc, #764]	; (8007dcc <main+0x1a74>)
 8007ad0:	611a      	str	r2, [r3, #16]
 8007ad2:	e61f      	b.n	8007714 <main+0x13bc>
			a_++;
 8007ad4:	9905      	ldr	r1, [sp, #20]
			P = (P + 3) + (2 * a_);
 8007ad6:	eb00 0244 	add.w	r2, r0, r4, lsl #1
			a_++;
 8007ada:	460b      	mov	r3, r1
			P = (P + 3) + (2 * a_);
 8007adc:	9206      	str	r2, [sp, #24]
	while (a_ <= b_)
 8007ade:	3301      	adds	r3, #1
 8007ae0:	1c62      	adds	r2, r4, #1
 8007ae2:	428e      	cmp	r6, r1
 8007ae4:	9203      	str	r2, [sp, #12]
 8007ae6:	9305      	str	r3, [sp, #20]
 8007ae8:	f6bf ac8f 	bge.w	800740a <main+0x10b2>
 8007aec:	e500      	b.n	80074f0 <main+0x1198>
 8007aee:	45b0      	cmp	r8, r6
			P = (P + 3) + (2 * a_);
 8007af0:	eb0a 0701 	add.w	r7, sl, r1
	while (a_ <= b_)
 8007af4:	f106 0601 	add.w	r6, r6, #1
 8007af8:	f10a 0a02 	add.w	sl, sl, #2
 8007afc:	f6bf adc6 	bge.w	800768c <main+0x1334>
 8007b00:	e604      	b.n	800770c <main+0x13b4>
 8007b02:	45b0      	cmp	r8, r6
			P = (P + 3) + (2 * a_);
 8007b04:	eb0a 0701 	add.w	r7, sl, r1
	while (a_ <= b_)
 8007b08:	f106 0601 	add.w	r6, r6, #1
 8007b0c:	f10a 0a02 	add.w	sl, sl, #2
 8007b10:	f6bf ad79 	bge.w	8007606 <main+0x12ae>
 8007b14:	e5b2      	b.n	800767c <main+0x1324>
 8007b16:	45b0      	cmp	r8, r6
			P = (P + 3) + (2 * a_);
 8007b18:	eb0a 0701 	add.w	r7, sl, r1
	while (a_ <= b_)
 8007b1c:	f106 0601 	add.w	r6, r6, #1
 8007b20:	f10a 0a02 	add.w	sl, sl, #2
 8007b24:	da97      	bge.n	8007a56 <main+0x16fe>
 8007b26:	e7d0      	b.n	8007aca <main+0x1772>
 8007b28:	45b1      	cmp	r9, r6
			P = (P + 3) + (2 * a_);
 8007b2a:	eb08 0701 	add.w	r7, r8, r1
	while (a_ <= b_)
 8007b2e:	f106 0601 	add.w	r6, r6, #1
 8007b32:	f108 0802 	add.w	r8, r8, #2
 8007b36:	f6bf af4c 	bge.w	80079d2 <main+0x167a>
 8007b3a:	e784      	b.n	8007a46 <main+0x16ee>
	pressure = (uint16_t)BME280_getPressure();
 8007b3c:	f8ac 30f0 	strh.w	r3, [ip, #240]	; 0xf0
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8007b40:	e458      	b.n	80073f4 <main+0x109c>
        huart->gState  = HAL_UART_STATE_READY;
 8007b42:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b44:	68cb      	ldr	r3, [r1, #12]
 8007b46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b4a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b4c:	694b      	ldr	r3, [r1, #20]
 8007b4e:	f023 0301 	bic.w	r3, r3, #1
 8007b52:	614b      	str	r3, [r1, #20]
        __HAL_UNLOCK(huart);
 8007b54:	9b07      	ldr	r3, [sp, #28]
        huart->gState  = HAL_UART_STATE_READY;
 8007b56:	f883 00a9 	strb.w	r0, [r3, #169]	; 0xa9
        __HAL_UNLOCK(huart);
 8007b5a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        huart->RxState = HAL_UART_STATE_READY;
 8007b5e:	f883 00aa 	strb.w	r0, [r3, #170]	; 0xaa
 8007b62:	e691      	b.n	8007888 <main+0x1530>
 8007b64:	b672      	cpsid	i
	while (1)
 8007b66:	e7fe      	b.n	8007b66 <main+0x180e>
		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 8007b68:	9907      	ldr	r1, [sp, #28]
 8007b6a:	4642      	mov	r2, r8
 8007b6c:	e9d1 4540 	ldrd	r4, r5, [r1, #256]	; 0x100
 8007b70:	464b      	mov	r3, r9
 8007b72:	4620      	mov	r0, r4
 8007b74:	4629      	mov	r1, r5
 8007b76:	f7fe f87f 	bl	8005c78 <__aeabi_dcmpeq>
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	f47f aa4c 	bne.w	8007018 <main+0xcc0>
			sprintf(weatherPrintH, "%.1f %%H", humidityLast);
 8007b80:	4622      	mov	r2, r4
 8007b82:	462b      	mov	r3, r5
 8007b84:	4992      	ldr	r1, [pc, #584]	; (8007dd0 <main+0x1a78>)
 8007b86:	4658      	mov	r0, fp
 8007b88:	f001 f874 	bl	8008c74 <siprintf>
			if (humidityLast >= 10)
 8007b8c:	9907      	ldr	r1, [sp, #28]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	e9d1 0140 	ldrd	r0, r1, [r1, #256]	; 0x100
 8007b94:	4b8f      	ldr	r3, [pc, #572]	; (8007dd4 <main+0x1a7c>)
 8007b96:	f7fe f88d 	bl	8005cb4 <__aeabi_dcmpge>
				LCD_Font(162, 187, weatherPrintH, &DejaVu_Sans_36, 1, BLACK);
 8007b9a:	465a      	mov	r2, fp
 8007b9c:	21bb      	movs	r1, #187	; 0xbb
			if (humidityLast >= 10)
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	f000 8124 	beq.w	8007dec <main+0x1a94>
				LCD_Font(162, 187, weatherPrintH, &DejaVu_Sans_36, 1, BLACK);
 8007ba4:	20a2      	movs	r0, #162	; 0xa2
 8007ba6:	f7fc f9f5 	bl	8003f94 <LCD_Font.constprop.2>
			sprintf(weatherPrintH, "%.1f %%H", humidity);
 8007baa:	9c07      	ldr	r4, [sp, #28]
 8007bac:	4988      	ldr	r1, [pc, #544]	; (8007dd0 <main+0x1a78>)
 8007bae:	e9d4 233a 	ldrd	r2, r3, [r4, #232]	; 0xe8
 8007bb2:	4658      	mov	r0, fp
 8007bb4:	f001 f85e 	bl	8008c74 <siprintf>
			if (humidity >= 10)
 8007bb8:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
 8007bbc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	4b83      	ldr	r3, [pc, #524]	; (8007dd4 <main+0x1a7c>)
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f7fe f874 	bl	8005cb4 <__aeabi_dcmpge>
				LCD_Font(162, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 8007bcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007bd0:	465a      	mov	r2, fp
 8007bd2:	21bb      	movs	r1, #187	; 0xbb
			if (humidity >= 10)
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	f000 80f5 	beq.w	8007dc4 <main+0x1a6c>
				LCD_Font(162, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 8007bda:	20a2      	movs	r0, #162	; 0xa2
 8007bdc:	f7fd fb5c 	bl	8005298 <LCD_Font.constprop.3>
			humidityLast = humidity;
 8007be0:	9b07      	ldr	r3, [sp, #28]
 8007be2:	e9c3 4540 	strd	r4, r5, [r3, #256]	; 0x100
 8007be6:	f7ff ba17 	b.w	8007018 <main+0xcc0>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bea:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bf2:	604b      	str	r3, [r1, #4]
 8007bf4:	f7ff b811 	b.w	8006c1a <main+0x8c2>
		if (!graphViewed) {
 8007bf8:	9a07      	ldr	r2, [sp, #28]
 8007bfa:	f892 34be 	ldrb.w	r3, [r2, #1214]	; 0x4be
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f47f abf1 	bne.w	80073e6 <main+0x108e>
 8007c04:	f7ff baea 	b.w	80071dc <main+0xe84>
    hi2c->Lock = HAL_UNLOCKED;
 8007c08:	9a07      	ldr	r2, [sp, #28]
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c0a:	931a      	str	r3, [sp, #104]	; 0x68
 8007c0c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007c10:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c12:	69a3      	ldr	r3, [r4, #24]
 8007c14:	f043 0308 	orr.w	r3, r3, #8
 8007c18:	61a3      	str	r3, [r4, #24]
 8007c1a:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007c1c:	921b      	str	r2, [sp, #108]	; 0x6c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c1e:	f003 0308 	and.w	r3, r3, #8
 8007c22:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007c24:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c26:	9b12      	ldr	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007c28:	2312      	movs	r3, #18
 8007c2a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c2e:	f7f9 fc4b 	bl	80014c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007c32:	69e3      	ldr	r3, [r4, #28]
 8007c34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c38:	61e3      	str	r3, [r4, #28]
 8007c3a:	69e3      	ldr	r3, [r4, #28]
 8007c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c40:	9311      	str	r3, [sp, #68]	; 0x44
 8007c42:	9b11      	ldr	r3, [sp, #68]	; 0x44
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007c44:	f7fe bd07 	b.w	8006656 <main+0x2fe>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007c48:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8007c4c:	3278      	adds	r2, #120	; 0x78
 8007c4e:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007c50:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007c52:	f812 5c18 	ldrb.w	r5, [r2, #-24]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007c56:	d552      	bpl.n	8007cfe <main+0x19a6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007c58:	6863      	ldr	r3, [r4, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007c5a:	4a5f      	ldr	r2, [pc, #380]	; (8007dd8 <main+0x1a80>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007c5c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007c60:	fb02 f505 	mul.w	r5, r2, r5
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007c64:	3378      	adds	r3, #120	; 0x78
 8007c66:	446b      	add	r3, sp
 8007c68:	f813 3c24 	ldrb.w	r3, [r3, #-36]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007c6c:	fbb5 f5f3 	udiv	r5, r5, r3
 8007c70:	f7fe bc6a 	b.w	8006548 <main+0x1f0>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007c74:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8007c78:	fb04 f101 	mul.w	r1, r4, r1
 8007c7c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8007c80:	fbb1 f1f4 	udiv	r1, r1, r4
 8007c84:	3101      	adds	r1, #1
 8007c86:	4301      	orrs	r1, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007c88:	9c07      	ldr	r4, [sp, #28]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007c8a:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007c8c:	69d8      	ldr	r0, [r3, #28]
 8007c8e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8007c92:	f420 404f 	bic.w	r0, r0, #52992	; 0xcf00
 8007c96:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8007c9a:	f1bc 0f00 	cmp.w	ip, #0
 8007c9e:	d11c      	bne.n	8007cda <main+0x1982>
 8007ca0:	1e57      	subs	r7, r2, #1
 8007ca2:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 8007ca6:	fbb7 f4f4 	udiv	r4, r7, r4
 8007caa:	0524      	lsls	r4, r4, #20
 8007cac:	f514 1f80 	cmn.w	r4, #1048576	; 0x100000
 8007cb0:	bf14      	ite	ne
 8007cb2:	2400      	movne	r4, #0
 8007cb4:	2401      	moveq	r4, #1
 8007cb6:	0071      	lsls	r1, r6, #1
 8007cb8:	b964      	cbnz	r4, 8007cd4 <main+0x197c>
 8007cba:	f1bc 0f00 	cmp.w	ip, #0
 8007cbe:	d15b      	bne.n	8007d78 <main+0x1a20>
 8007cc0:	198a      	adds	r2, r1, r6
 8007cc2:	fbb7 f2f2 	udiv	r2, r7, r2
 8007cc6:	3201      	adds	r2, #1
 8007cc8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007ccc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cd0:	f7fe bd0b 	b.w	80066ea <main+0x392>
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f7fe bd08 	b.w	80066ea <main+0x392>
 8007cda:	2419      	movs	r4, #25
 8007cdc:	fb06 f404 	mul.w	r4, r6, r4
 8007ce0:	1e57      	subs	r7, r2, #1
 8007ce2:	fbb7 f4f4 	udiv	r4, r7, r4
 8007ce6:	0524      	lsls	r4, r4, #20
 8007ce8:	f514 1f80 	cmn.w	r4, #1048576	; 0x100000
 8007cec:	bf14      	ite	ne
 8007cee:	2400      	movne	r4, #0
 8007cf0:	2401      	moveq	r4, #1
 8007cf2:	0071      	lsls	r1, r6, #1
 8007cf4:	e7e0      	b.n	8007cb8 <main+0x1960>
 8007cf6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007cfa:	f7fe bcf6 	b.w	80066ea <main+0x392>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007cfe:	4b37      	ldr	r3, [pc, #220]	; (8007ddc <main+0x1a84>)
 8007d00:	fb03 f505 	mul.w	r5, r3, r5
 8007d04:	f7fe bc20 	b.w	8006548 <main+0x1f0>
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007d08:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	4934      	ldr	r1, [pc, #208]	; (8007de0 <main+0x1a88>)
 8007d10:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007d14:	440b      	add	r3, r1
 8007d16:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 8007d1a:	40dd      	lsrs	r5, r3
 8007d1c:	f7fe bd83 	b.w	8006826 <main+0x4ce>
    huart->Lock = HAL_UNLOCKED;
 8007d20:	9b07      	ldr	r3, [sp, #28]
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d22:	941a      	str	r4, [sp, #104]	; 0x68
 8007d24:	f883 40a8 	strb.w	r4, [r3, #168]	; 0xa8
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007d28:	4b2e      	ldr	r3, [pc, #184]	; (8007de4 <main+0x1a8c>)
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007d2a:	2003      	movs	r0, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8007d2c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d2e:	4659      	mov	r1, fp
    __HAL_RCC_USART1_CLK_ENABLE();
 8007d30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d34:	619a      	str	r2, [r3, #24]
 8007d36:	699a      	ldr	r2, [r3, #24]
 8007d38:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007d3c:	9214      	str	r2, [sp, #80]	; 0x50
 8007d3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d40:	699a      	ldr	r2, [r3, #24]
 8007d42:	f042 0204 	orr.w	r2, r2, #4
 8007d46:	619a      	str	r2, [r3, #24]
 8007d48:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d4e:	f003 0304 	and.w	r3, r3, #4
 8007d52:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007d56:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007d58:	901b      	str	r0, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d5a:	4823      	ldr	r0, [pc, #140]	; (8007de8 <main+0x1a90>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007d5c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d60:	f7f9 fbb2 	bl	80014c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007d64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d68:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d6a:	941a      	str	r4, [sp, #104]	; 0x68
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007d6c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d70:	f7f9 fbaa 	bl	80014c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007d74:	f7fe bd01 	b.w	800677a <main+0x422>
 8007d78:	2219      	movs	r2, #25
 8007d7a:	fb06 f202 	mul.w	r2, r6, r2
 8007d7e:	fbb7 f2f2 	udiv	r2, r7, r2
 8007d82:	3201      	adds	r2, #1
 8007d84:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007d88:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007d8c:	f7fe bcad 	b.w	80066ea <main+0x392>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d90:	9b07      	ldr	r3, [sp, #28]
 8007d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
      pdata16bits = (uint16_t *) pData;
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	bf0a      	itet	eq
 8007d98:	463d      	moveq	r5, r7
 8007d9a:	2500      	movne	r5, #0
 8007d9c:	2700      	moveq	r7, #0
 8007d9e:	f7fe bf11 	b.w	8006bc4 <main+0x86c>
        huart->gState  = HAL_UART_STATE_READY;
 8007da2:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007da4:	68ca      	ldr	r2, [r1, #12]
 8007da6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007daa:	60ca      	str	r2, [r1, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dac:	694a      	ldr	r2, [r1, #20]
 8007dae:	f022 0201 	bic.w	r2, r2, #1
 8007db2:	614a      	str	r2, [r1, #20]
        __HAL_UNLOCK(huart);
 8007db4:	9a07      	ldr	r2, [sp, #28]
        huart->gState  = HAL_UART_STATE_READY;
 8007db6:	f882 00a9 	strb.w	r0, [r2, #169]	; 0xa9
        __HAL_UNLOCK(huart);
 8007dba:	f882 30a8 	strb.w	r3, [r2, #168]	; 0xa8
        huart->RxState = HAL_UART_STATE_READY;
 8007dbe:	f882 00aa 	strb.w	r0, [r2, #170]	; 0xaa
 8007dc2:	e561      	b.n	8007888 <main+0x1530>
			else LCD_Font(188, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 8007dc4:	20bc      	movs	r0, #188	; 0xbc
 8007dc6:	f7fd fa67 	bl	8005298 <LCD_Font.constprop.3>
 8007dca:	e709      	b.n	8007be0 <main+0x1888>
 8007dcc:	40011000 	.word	0x40011000
 8007dd0:	0801d234 	.word	0x0801d234
 8007dd4:	40240000 	.word	0x40240000
 8007dd8:	007a1200 	.word	0x007a1200
 8007ddc:	003d0900 	.word	0x003d0900
 8007de0:	0800c908 	.word	0x0800c908
 8007de4:	40021000 	.word	0x40021000
 8007de8:	40010800 	.word	0x40010800
			else LCD_Font(188, 187, weatherPrintH, &DejaVu_Sans_36, 1, BLACK);
 8007dec:	20bc      	movs	r0, #188	; 0xbc
 8007dee:	f7fc f8d1 	bl	8003f94 <LCD_Font.constprop.2>
 8007df2:	e6da      	b.n	8007baa <main+0x1852>
			if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8007df4:	4620      	mov	r0, r4
 8007df6:	4629      	mov	r1, r5
 8007df8:	4b34      	ldr	r3, [pc, #208]	; (8007ecc <main+0x1b74>)
 8007dfa:	f7fd ff65 	bl	8005cc8 <__aeabi_dcmpgt>
 8007dfe:	bb30      	cbnz	r0, 8007e4e <main+0x1af6>
			else if (temperature < 10 && temperature > 0) {
 8007e00:	2200      	movs	r2, #0
 8007e02:	2300      	movs	r3, #0
 8007e04:	4620      	mov	r0, r4
 8007e06:	4629      	mov	r1, r5
 8007e08:	f7fd ff5e 	bl	8005cc8 <__aeabi_dcmpgt>
 8007e0c:	b988      	cbnz	r0, 8007e32 <main+0x1ada>
				sprintf(weatherPrintT, "%2d 'C", (int8_t)temperature);
 8007e0e:	4629      	mov	r1, r5
 8007e10:	4620      	mov	r0, r4
 8007e12:	f7fd ff79 	bl	8005d08 <__aeabi_d2iz>
 8007e16:	4602      	mov	r2, r0
 8007e18:	492d      	ldr	r1, [pc, #180]	; (8007ed0 <main+0x1b78>)
 8007e1a:	4658      	mov	r0, fp
 8007e1c:	b252      	sxtb	r2, r2
 8007e1e:	f000 ff29 	bl	8008c74 <siprintf>
				LCD_Font(3, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
 8007e22:	465a      	mov	r2, fp
 8007e24:	21bb      	movs	r1, #187	; 0xbb
 8007e26:	2003      	movs	r0, #3
 8007e28:	4b2a      	ldr	r3, [pc, #168]	; (8007ed4 <main+0x1b7c>)
 8007e2a:	f7fd fa35 	bl	8005298 <LCD_Font.constprop.3>
 8007e2e:	f7ff b8b9 	b.w	8006fa4 <main+0xc4c>
				sprintf(weatherPrintT, "%.1f 'C", temperature);
 8007e32:	4622      	mov	r2, r4
 8007e34:	462b      	mov	r3, r5
 8007e36:	4658      	mov	r0, fp
 8007e38:	4927      	ldr	r1, [pc, #156]	; (8007ed8 <main+0x1b80>)
 8007e3a:	f000 ff1b 	bl	8008c74 <siprintf>
				LCD_Font(29, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
 8007e3e:	465a      	mov	r2, fp
 8007e40:	21bb      	movs	r1, #187	; 0xbb
 8007e42:	201d      	movs	r0, #29
 8007e44:	4b23      	ldr	r3, [pc, #140]	; (8007ed4 <main+0x1b7c>)
 8007e46:	f7fd fa27 	bl	8005298 <LCD_Font.constprop.3>
 8007e4a:	f7ff b8ab 	b.w	8006fa4 <main+0xc4c>
				sprintf(weatherPrintT, "%.1f 'C", temperature);
 8007e4e:	4622      	mov	r2, r4
 8007e50:	462b      	mov	r3, r5
 8007e52:	4658      	mov	r0, fp
 8007e54:	4920      	ldr	r1, [pc, #128]	; (8007ed8 <main+0x1b80>)
 8007e56:	f000 ff0d 	bl	8008c74 <siprintf>
				LCD_Font(3, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
 8007e5a:	e7e2      	b.n	8007e22 <main+0x1aca>
			if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	4629      	mov	r1, r5
 8007e60:	4b1a      	ldr	r3, [pc, #104]	; (8007ecc <main+0x1b74>)
 8007e62:	f7fd ff31 	bl	8005cc8 <__aeabi_dcmpgt>
 8007e66:	bb20      	cbnz	r0, 8007eb2 <main+0x1b5a>
			else if (temperatureLast < 10 && temperatureLast > 0) {
 8007e68:	2200      	movs	r2, #0
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	4629      	mov	r1, r5
 8007e70:	f7fd ff2a 	bl	8005cc8 <__aeabi_dcmpgt>
 8007e74:	b980      	cbnz	r0, 8007e98 <main+0x1b40>
				sprintf(weatherPrintT, "%2d", (int8_t)temperatureLast);
 8007e76:	4629      	mov	r1, r5
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f7fd ff45 	bl	8005d08 <__aeabi_d2iz>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	4916      	ldr	r1, [pc, #88]	; (8007edc <main+0x1b84>)
 8007e82:	4658      	mov	r0, fp
 8007e84:	b252      	sxtb	r2, r2
 8007e86:	f000 fef5 	bl	8008c74 <siprintf>
				LCD_Font(3, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
 8007e8a:	465a      	mov	r2, fp
 8007e8c:	21bb      	movs	r1, #187	; 0xbb
 8007e8e:	2003      	movs	r0, #3
 8007e90:	f7fc f880 	bl	8003f94 <LCD_Font.constprop.2>
 8007e94:	f7ff b85f 	b.w	8006f56 <main+0xbfe>
				sprintf(weatherPrintT, "%.1f 'C", temperatureLast);
 8007e98:	4622      	mov	r2, r4
 8007e9a:	462b      	mov	r3, r5
 8007e9c:	4658      	mov	r0, fp
 8007e9e:	490e      	ldr	r1, [pc, #56]	; (8007ed8 <main+0x1b80>)
 8007ea0:	f000 fee8 	bl	8008c74 <siprintf>
				LCD_Font(29, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
 8007ea4:	465a      	mov	r2, fp
 8007ea6:	21bb      	movs	r1, #187	; 0xbb
 8007ea8:	201d      	movs	r0, #29
 8007eaa:	f7fc f873 	bl	8003f94 <LCD_Font.constprop.2>
 8007eae:	f7ff b852 	b.w	8006f56 <main+0xbfe>
				sprintf(weatherPrintT, "%.1f 'C", temperatureLast);
 8007eb2:	4622      	mov	r2, r4
 8007eb4:	462b      	mov	r3, r5
 8007eb6:	4658      	mov	r0, fp
 8007eb8:	4907      	ldr	r1, [pc, #28]	; (8007ed8 <main+0x1b80>)
 8007eba:	f000 fedb 	bl	8008c74 <siprintf>
				LCD_Font(3, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
 8007ebe:	465a      	mov	r2, fp
 8007ec0:	21bb      	movs	r1, #187	; 0xbb
 8007ec2:	2003      	movs	r0, #3
 8007ec4:	f7fc f866 	bl	8003f94 <LCD_Font.constprop.2>
 8007ec8:	f7ff b845 	b.w	8006f56 <main+0xbfe>
 8007ecc:	c0240000 	.word	0xc0240000
 8007ed0:	0801d22c 	.word	0x0801d22c
 8007ed4:	00ffa500 	.word	0x00ffa500
 8007ed8:	0801d220 	.word	0x0801d220
 8007edc:	0801d228 	.word	0x0801d228

08007ee0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007ee0:	480c      	ldr	r0, [pc, #48]	; (8007f14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007ee2:	490d      	ldr	r1, [pc, #52]	; (8007f18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007ee4:	4a0d      	ldr	r2, [pc, #52]	; (8007f1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007ee8:	e002      	b.n	8007ef0 <LoopCopyDataInit>

08007eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007eee:	3304      	adds	r3, #4

08007ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007ef4:	d3f9      	bcc.n	8007eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007ef6:	4a0a      	ldr	r2, [pc, #40]	; (8007f20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007ef8:	4c0a      	ldr	r4, [pc, #40]	; (8007f24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007efc:	e001      	b.n	8007f02 <LoopFillZerobss>

08007efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007f00:	3204      	adds	r2, #4

08007f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007f04:	d3fb      	bcc.n	8007efe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007f06:	f7fd fa89 	bl	800541c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007f0a:	f000 f815 	bl	8007f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007f0e:	f7fe fa23 	bl	8006358 <main>
  bx lr
 8007f12:	4770      	bx	lr
  ldr r0, =_sdata
 8007f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007f18:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8007f1c:	0801d784 	.word	0x0801d784
  ldr r2, =_sbss
 8007f20:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8007f24:	200016e0 	.word	0x200016e0

08007f28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007f28:	e7fe      	b.n	8007f28 <ADC1_2_IRQHandler>
	...

08007f2c <__errno>:
 8007f2c:	4b01      	ldr	r3, [pc, #4]	; (8007f34 <__errno+0x8>)
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	20000010 	.word	0x20000010

08007f38 <__libc_init_array>:
 8007f38:	b570      	push	{r4, r5, r6, lr}
 8007f3a:	2600      	movs	r6, #0
 8007f3c:	4d0c      	ldr	r5, [pc, #48]	; (8007f70 <__libc_init_array+0x38>)
 8007f3e:	4c0d      	ldr	r4, [pc, #52]	; (8007f74 <__libc_init_array+0x3c>)
 8007f40:	1b64      	subs	r4, r4, r5
 8007f42:	10a4      	asrs	r4, r4, #2
 8007f44:	42a6      	cmp	r6, r4
 8007f46:	d109      	bne.n	8007f5c <__libc_init_array+0x24>
 8007f48:	f004 fcd2 	bl	800c8f0 <_init>
 8007f4c:	2600      	movs	r6, #0
 8007f4e:	4d0a      	ldr	r5, [pc, #40]	; (8007f78 <__libc_init_array+0x40>)
 8007f50:	4c0a      	ldr	r4, [pc, #40]	; (8007f7c <__libc_init_array+0x44>)
 8007f52:	1b64      	subs	r4, r4, r5
 8007f54:	10a4      	asrs	r4, r4, #2
 8007f56:	42a6      	cmp	r6, r4
 8007f58:	d105      	bne.n	8007f66 <__libc_init_array+0x2e>
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}
 8007f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f60:	4798      	blx	r3
 8007f62:	3601      	adds	r6, #1
 8007f64:	e7ee      	b.n	8007f44 <__libc_init_array+0xc>
 8007f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f6a:	4798      	blx	r3
 8007f6c:	3601      	adds	r6, #1
 8007f6e:	e7f2      	b.n	8007f56 <__libc_init_array+0x1e>
 8007f70:	0801d77c 	.word	0x0801d77c
 8007f74:	0801d77c 	.word	0x0801d77c
 8007f78:	0801d77c 	.word	0x0801d77c
 8007f7c:	0801d780 	.word	0x0801d780

08007f80 <memset>:
 8007f80:	4603      	mov	r3, r0
 8007f82:	4402      	add	r2, r0
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d100      	bne.n	8007f8a <memset+0xa>
 8007f88:	4770      	bx	lr
 8007f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f8e:	e7f9      	b.n	8007f84 <memset+0x4>

08007f90 <__cvt>:
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f96:	461f      	mov	r7, r3
 8007f98:	bfbb      	ittet	lt
 8007f9a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007f9e:	461f      	movlt	r7, r3
 8007fa0:	2300      	movge	r3, #0
 8007fa2:	232d      	movlt	r3, #45	; 0x2d
 8007fa4:	b088      	sub	sp, #32
 8007fa6:	4614      	mov	r4, r2
 8007fa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007faa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007fac:	7013      	strb	r3, [r2, #0]
 8007fae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fb0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007fb4:	f023 0820 	bic.w	r8, r3, #32
 8007fb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fbc:	d005      	beq.n	8007fca <__cvt+0x3a>
 8007fbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007fc2:	d100      	bne.n	8007fc6 <__cvt+0x36>
 8007fc4:	3501      	adds	r5, #1
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	e000      	b.n	8007fcc <__cvt+0x3c>
 8007fca:	2303      	movs	r3, #3
 8007fcc:	aa07      	add	r2, sp, #28
 8007fce:	9204      	str	r2, [sp, #16]
 8007fd0:	aa06      	add	r2, sp, #24
 8007fd2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007fd6:	e9cd 3500 	strd	r3, r5, [sp]
 8007fda:	4622      	mov	r2, r4
 8007fdc:	463b      	mov	r3, r7
 8007fde:	f001 fd83 	bl	8009ae8 <_dtoa_r>
 8007fe2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007fe6:	4606      	mov	r6, r0
 8007fe8:	d102      	bne.n	8007ff0 <__cvt+0x60>
 8007fea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fec:	07db      	lsls	r3, r3, #31
 8007fee:	d522      	bpl.n	8008036 <__cvt+0xa6>
 8007ff0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ff4:	eb06 0905 	add.w	r9, r6, r5
 8007ff8:	d110      	bne.n	800801c <__cvt+0x8c>
 8007ffa:	7833      	ldrb	r3, [r6, #0]
 8007ffc:	2b30      	cmp	r3, #48	; 0x30
 8007ffe:	d10a      	bne.n	8008016 <__cvt+0x86>
 8008000:	2200      	movs	r2, #0
 8008002:	2300      	movs	r3, #0
 8008004:	4620      	mov	r0, r4
 8008006:	4639      	mov	r1, r7
 8008008:	f7fd fe36 	bl	8005c78 <__aeabi_dcmpeq>
 800800c:	b918      	cbnz	r0, 8008016 <__cvt+0x86>
 800800e:	f1c5 0501 	rsb	r5, r5, #1
 8008012:	f8ca 5000 	str.w	r5, [sl]
 8008016:	f8da 3000 	ldr.w	r3, [sl]
 800801a:	4499      	add	r9, r3
 800801c:	2200      	movs	r2, #0
 800801e:	2300      	movs	r3, #0
 8008020:	4620      	mov	r0, r4
 8008022:	4639      	mov	r1, r7
 8008024:	f7fd fe28 	bl	8005c78 <__aeabi_dcmpeq>
 8008028:	b108      	cbz	r0, 800802e <__cvt+0x9e>
 800802a:	f8cd 901c 	str.w	r9, [sp, #28]
 800802e:	2230      	movs	r2, #48	; 0x30
 8008030:	9b07      	ldr	r3, [sp, #28]
 8008032:	454b      	cmp	r3, r9
 8008034:	d307      	bcc.n	8008046 <__cvt+0xb6>
 8008036:	4630      	mov	r0, r6
 8008038:	9b07      	ldr	r3, [sp, #28]
 800803a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800803c:	1b9b      	subs	r3, r3, r6
 800803e:	6013      	str	r3, [r2, #0]
 8008040:	b008      	add	sp, #32
 8008042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008046:	1c59      	adds	r1, r3, #1
 8008048:	9107      	str	r1, [sp, #28]
 800804a:	701a      	strb	r2, [r3, #0]
 800804c:	e7f0      	b.n	8008030 <__cvt+0xa0>

0800804e <__exponent>:
 800804e:	4603      	mov	r3, r0
 8008050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008052:	2900      	cmp	r1, #0
 8008054:	f803 2b02 	strb.w	r2, [r3], #2
 8008058:	bfb6      	itet	lt
 800805a:	222d      	movlt	r2, #45	; 0x2d
 800805c:	222b      	movge	r2, #43	; 0x2b
 800805e:	4249      	neglt	r1, r1
 8008060:	2909      	cmp	r1, #9
 8008062:	7042      	strb	r2, [r0, #1]
 8008064:	dd2b      	ble.n	80080be <__exponent+0x70>
 8008066:	f10d 0407 	add.w	r4, sp, #7
 800806a:	46a4      	mov	ip, r4
 800806c:	270a      	movs	r7, #10
 800806e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008072:	460a      	mov	r2, r1
 8008074:	46a6      	mov	lr, r4
 8008076:	fb07 1516 	mls	r5, r7, r6, r1
 800807a:	2a63      	cmp	r2, #99	; 0x63
 800807c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008080:	4631      	mov	r1, r6
 8008082:	f104 34ff 	add.w	r4, r4, #4294967295
 8008086:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800808a:	dcf0      	bgt.n	800806e <__exponent+0x20>
 800808c:	3130      	adds	r1, #48	; 0x30
 800808e:	f1ae 0502 	sub.w	r5, lr, #2
 8008092:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008096:	4629      	mov	r1, r5
 8008098:	1c44      	adds	r4, r0, #1
 800809a:	4561      	cmp	r1, ip
 800809c:	d30a      	bcc.n	80080b4 <__exponent+0x66>
 800809e:	f10d 0209 	add.w	r2, sp, #9
 80080a2:	eba2 020e 	sub.w	r2, r2, lr
 80080a6:	4565      	cmp	r5, ip
 80080a8:	bf88      	it	hi
 80080aa:	2200      	movhi	r2, #0
 80080ac:	4413      	add	r3, r2
 80080ae:	1a18      	subs	r0, r3, r0
 80080b0:	b003      	add	sp, #12
 80080b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080b8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80080bc:	e7ed      	b.n	800809a <__exponent+0x4c>
 80080be:	2330      	movs	r3, #48	; 0x30
 80080c0:	3130      	adds	r1, #48	; 0x30
 80080c2:	7083      	strb	r3, [r0, #2]
 80080c4:	70c1      	strb	r1, [r0, #3]
 80080c6:	1d03      	adds	r3, r0, #4
 80080c8:	e7f1      	b.n	80080ae <__exponent+0x60>
	...

080080cc <_printf_float>:
 80080cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d0:	b091      	sub	sp, #68	; 0x44
 80080d2:	460c      	mov	r4, r1
 80080d4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80080d8:	4616      	mov	r6, r2
 80080da:	461f      	mov	r7, r3
 80080dc:	4605      	mov	r5, r0
 80080de:	f002 fe57 	bl	800ad90 <_localeconv_r>
 80080e2:	6803      	ldr	r3, [r0, #0]
 80080e4:	4618      	mov	r0, r3
 80080e6:	9309      	str	r3, [sp, #36]	; 0x24
 80080e8:	f7fd f99a 	bl	8005420 <strlen>
 80080ec:	2300      	movs	r3, #0
 80080ee:	930e      	str	r3, [sp, #56]	; 0x38
 80080f0:	f8d8 3000 	ldr.w	r3, [r8]
 80080f4:	900a      	str	r0, [sp, #40]	; 0x28
 80080f6:	3307      	adds	r3, #7
 80080f8:	f023 0307 	bic.w	r3, r3, #7
 80080fc:	f103 0208 	add.w	r2, r3, #8
 8008100:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008104:	f8d4 b000 	ldr.w	fp, [r4]
 8008108:	f8c8 2000 	str.w	r2, [r8]
 800810c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008110:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008114:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008118:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800811c:	930b      	str	r3, [sp, #44]	; 0x2c
 800811e:	f04f 32ff 	mov.w	r2, #4294967295
 8008122:	4640      	mov	r0, r8
 8008124:	4b9c      	ldr	r3, [pc, #624]	; (8008398 <_printf_float+0x2cc>)
 8008126:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008128:	f7fd fdd8 	bl	8005cdc <__aeabi_dcmpun>
 800812c:	bb70      	cbnz	r0, 800818c <_printf_float+0xc0>
 800812e:	f04f 32ff 	mov.w	r2, #4294967295
 8008132:	4640      	mov	r0, r8
 8008134:	4b98      	ldr	r3, [pc, #608]	; (8008398 <_printf_float+0x2cc>)
 8008136:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008138:	f7fd fdb2 	bl	8005ca0 <__aeabi_dcmple>
 800813c:	bb30      	cbnz	r0, 800818c <_printf_float+0xc0>
 800813e:	2200      	movs	r2, #0
 8008140:	2300      	movs	r3, #0
 8008142:	4640      	mov	r0, r8
 8008144:	4651      	mov	r1, sl
 8008146:	f7fd fda1 	bl	8005c8c <__aeabi_dcmplt>
 800814a:	b110      	cbz	r0, 8008152 <_printf_float+0x86>
 800814c:	232d      	movs	r3, #45	; 0x2d
 800814e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008152:	4b92      	ldr	r3, [pc, #584]	; (800839c <_printf_float+0x2d0>)
 8008154:	4892      	ldr	r0, [pc, #584]	; (80083a0 <_printf_float+0x2d4>)
 8008156:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800815a:	bf94      	ite	ls
 800815c:	4698      	movls	r8, r3
 800815e:	4680      	movhi	r8, r0
 8008160:	2303      	movs	r3, #3
 8008162:	f04f 0a00 	mov.w	sl, #0
 8008166:	6123      	str	r3, [r4, #16]
 8008168:	f02b 0304 	bic.w	r3, fp, #4
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	4633      	mov	r3, r6
 8008170:	4621      	mov	r1, r4
 8008172:	4628      	mov	r0, r5
 8008174:	9700      	str	r7, [sp, #0]
 8008176:	aa0f      	add	r2, sp, #60	; 0x3c
 8008178:	f000 f9d4 	bl	8008524 <_printf_common>
 800817c:	3001      	adds	r0, #1
 800817e:	f040 8090 	bne.w	80082a2 <_printf_float+0x1d6>
 8008182:	f04f 30ff 	mov.w	r0, #4294967295
 8008186:	b011      	add	sp, #68	; 0x44
 8008188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818c:	4642      	mov	r2, r8
 800818e:	4653      	mov	r3, sl
 8008190:	4640      	mov	r0, r8
 8008192:	4651      	mov	r1, sl
 8008194:	f7fd fda2 	bl	8005cdc <__aeabi_dcmpun>
 8008198:	b148      	cbz	r0, 80081ae <_printf_float+0xe2>
 800819a:	f1ba 0f00 	cmp.w	sl, #0
 800819e:	bfb8      	it	lt
 80081a0:	232d      	movlt	r3, #45	; 0x2d
 80081a2:	4880      	ldr	r0, [pc, #512]	; (80083a4 <_printf_float+0x2d8>)
 80081a4:	bfb8      	it	lt
 80081a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80081aa:	4b7f      	ldr	r3, [pc, #508]	; (80083a8 <_printf_float+0x2dc>)
 80081ac:	e7d3      	b.n	8008156 <_printf_float+0x8a>
 80081ae:	6863      	ldr	r3, [r4, #4]
 80081b0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80081b4:	1c5a      	adds	r2, r3, #1
 80081b6:	d142      	bne.n	800823e <_printf_float+0x172>
 80081b8:	2306      	movs	r3, #6
 80081ba:	6063      	str	r3, [r4, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	9206      	str	r2, [sp, #24]
 80081c0:	aa0e      	add	r2, sp, #56	; 0x38
 80081c2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80081c6:	aa0d      	add	r2, sp, #52	; 0x34
 80081c8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80081cc:	9203      	str	r2, [sp, #12]
 80081ce:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80081d2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80081d6:	6023      	str	r3, [r4, #0]
 80081d8:	6863      	ldr	r3, [r4, #4]
 80081da:	4642      	mov	r2, r8
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	4628      	mov	r0, r5
 80081e0:	4653      	mov	r3, sl
 80081e2:	910b      	str	r1, [sp, #44]	; 0x2c
 80081e4:	f7ff fed4 	bl	8007f90 <__cvt>
 80081e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081ea:	4680      	mov	r8, r0
 80081ec:	2947      	cmp	r1, #71	; 0x47
 80081ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80081f0:	d108      	bne.n	8008204 <_printf_float+0x138>
 80081f2:	1cc8      	adds	r0, r1, #3
 80081f4:	db02      	blt.n	80081fc <_printf_float+0x130>
 80081f6:	6863      	ldr	r3, [r4, #4]
 80081f8:	4299      	cmp	r1, r3
 80081fa:	dd40      	ble.n	800827e <_printf_float+0x1b2>
 80081fc:	f1a9 0902 	sub.w	r9, r9, #2
 8008200:	fa5f f989 	uxtb.w	r9, r9
 8008204:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008208:	d81f      	bhi.n	800824a <_printf_float+0x17e>
 800820a:	464a      	mov	r2, r9
 800820c:	3901      	subs	r1, #1
 800820e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008212:	910d      	str	r1, [sp, #52]	; 0x34
 8008214:	f7ff ff1b 	bl	800804e <__exponent>
 8008218:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800821a:	4682      	mov	sl, r0
 800821c:	1813      	adds	r3, r2, r0
 800821e:	2a01      	cmp	r2, #1
 8008220:	6123      	str	r3, [r4, #16]
 8008222:	dc02      	bgt.n	800822a <_printf_float+0x15e>
 8008224:	6822      	ldr	r2, [r4, #0]
 8008226:	07d2      	lsls	r2, r2, #31
 8008228:	d501      	bpl.n	800822e <_printf_float+0x162>
 800822a:	3301      	adds	r3, #1
 800822c:	6123      	str	r3, [r4, #16]
 800822e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008232:	2b00      	cmp	r3, #0
 8008234:	d09b      	beq.n	800816e <_printf_float+0xa2>
 8008236:	232d      	movs	r3, #45	; 0x2d
 8008238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800823c:	e797      	b.n	800816e <_printf_float+0xa2>
 800823e:	2947      	cmp	r1, #71	; 0x47
 8008240:	d1bc      	bne.n	80081bc <_printf_float+0xf0>
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1ba      	bne.n	80081bc <_printf_float+0xf0>
 8008246:	2301      	movs	r3, #1
 8008248:	e7b7      	b.n	80081ba <_printf_float+0xee>
 800824a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800824e:	d118      	bne.n	8008282 <_printf_float+0x1b6>
 8008250:	2900      	cmp	r1, #0
 8008252:	6863      	ldr	r3, [r4, #4]
 8008254:	dd0b      	ble.n	800826e <_printf_float+0x1a2>
 8008256:	6121      	str	r1, [r4, #16]
 8008258:	b913      	cbnz	r3, 8008260 <_printf_float+0x194>
 800825a:	6822      	ldr	r2, [r4, #0]
 800825c:	07d0      	lsls	r0, r2, #31
 800825e:	d502      	bpl.n	8008266 <_printf_float+0x19a>
 8008260:	3301      	adds	r3, #1
 8008262:	440b      	add	r3, r1
 8008264:	6123      	str	r3, [r4, #16]
 8008266:	f04f 0a00 	mov.w	sl, #0
 800826a:	65a1      	str	r1, [r4, #88]	; 0x58
 800826c:	e7df      	b.n	800822e <_printf_float+0x162>
 800826e:	b913      	cbnz	r3, 8008276 <_printf_float+0x1aa>
 8008270:	6822      	ldr	r2, [r4, #0]
 8008272:	07d2      	lsls	r2, r2, #31
 8008274:	d501      	bpl.n	800827a <_printf_float+0x1ae>
 8008276:	3302      	adds	r3, #2
 8008278:	e7f4      	b.n	8008264 <_printf_float+0x198>
 800827a:	2301      	movs	r3, #1
 800827c:	e7f2      	b.n	8008264 <_printf_float+0x198>
 800827e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008284:	4299      	cmp	r1, r3
 8008286:	db05      	blt.n	8008294 <_printf_float+0x1c8>
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	6121      	str	r1, [r4, #16]
 800828c:	07d8      	lsls	r0, r3, #31
 800828e:	d5ea      	bpl.n	8008266 <_printf_float+0x19a>
 8008290:	1c4b      	adds	r3, r1, #1
 8008292:	e7e7      	b.n	8008264 <_printf_float+0x198>
 8008294:	2900      	cmp	r1, #0
 8008296:	bfcc      	ite	gt
 8008298:	2201      	movgt	r2, #1
 800829a:	f1c1 0202 	rsble	r2, r1, #2
 800829e:	4413      	add	r3, r2
 80082a0:	e7e0      	b.n	8008264 <_printf_float+0x198>
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	055a      	lsls	r2, r3, #21
 80082a6:	d407      	bmi.n	80082b8 <_printf_float+0x1ec>
 80082a8:	6923      	ldr	r3, [r4, #16]
 80082aa:	4642      	mov	r2, r8
 80082ac:	4631      	mov	r1, r6
 80082ae:	4628      	mov	r0, r5
 80082b0:	47b8      	blx	r7
 80082b2:	3001      	adds	r0, #1
 80082b4:	d12b      	bne.n	800830e <_printf_float+0x242>
 80082b6:	e764      	b.n	8008182 <_printf_float+0xb6>
 80082b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80082bc:	f240 80dd 	bls.w	800847a <_printf_float+0x3ae>
 80082c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082c4:	2200      	movs	r2, #0
 80082c6:	2300      	movs	r3, #0
 80082c8:	f7fd fcd6 	bl	8005c78 <__aeabi_dcmpeq>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d033      	beq.n	8008338 <_printf_float+0x26c>
 80082d0:	2301      	movs	r3, #1
 80082d2:	4631      	mov	r1, r6
 80082d4:	4628      	mov	r0, r5
 80082d6:	4a35      	ldr	r2, [pc, #212]	; (80083ac <_printf_float+0x2e0>)
 80082d8:	47b8      	blx	r7
 80082da:	3001      	adds	r0, #1
 80082dc:	f43f af51 	beq.w	8008182 <_printf_float+0xb6>
 80082e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80082e4:	429a      	cmp	r2, r3
 80082e6:	db02      	blt.n	80082ee <_printf_float+0x222>
 80082e8:	6823      	ldr	r3, [r4, #0]
 80082ea:	07d8      	lsls	r0, r3, #31
 80082ec:	d50f      	bpl.n	800830e <_printf_float+0x242>
 80082ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082f2:	4631      	mov	r1, r6
 80082f4:	4628      	mov	r0, r5
 80082f6:	47b8      	blx	r7
 80082f8:	3001      	adds	r0, #1
 80082fa:	f43f af42 	beq.w	8008182 <_printf_float+0xb6>
 80082fe:	f04f 0800 	mov.w	r8, #0
 8008302:	f104 091a 	add.w	r9, r4, #26
 8008306:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008308:	3b01      	subs	r3, #1
 800830a:	4543      	cmp	r3, r8
 800830c:	dc09      	bgt.n	8008322 <_printf_float+0x256>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	079b      	lsls	r3, r3, #30
 8008312:	f100 8102 	bmi.w	800851a <_printf_float+0x44e>
 8008316:	68e0      	ldr	r0, [r4, #12]
 8008318:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800831a:	4298      	cmp	r0, r3
 800831c:	bfb8      	it	lt
 800831e:	4618      	movlt	r0, r3
 8008320:	e731      	b.n	8008186 <_printf_float+0xba>
 8008322:	2301      	movs	r3, #1
 8008324:	464a      	mov	r2, r9
 8008326:	4631      	mov	r1, r6
 8008328:	4628      	mov	r0, r5
 800832a:	47b8      	blx	r7
 800832c:	3001      	adds	r0, #1
 800832e:	f43f af28 	beq.w	8008182 <_printf_float+0xb6>
 8008332:	f108 0801 	add.w	r8, r8, #1
 8008336:	e7e6      	b.n	8008306 <_printf_float+0x23a>
 8008338:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800833a:	2b00      	cmp	r3, #0
 800833c:	dc38      	bgt.n	80083b0 <_printf_float+0x2e4>
 800833e:	2301      	movs	r3, #1
 8008340:	4631      	mov	r1, r6
 8008342:	4628      	mov	r0, r5
 8008344:	4a19      	ldr	r2, [pc, #100]	; (80083ac <_printf_float+0x2e0>)
 8008346:	47b8      	blx	r7
 8008348:	3001      	adds	r0, #1
 800834a:	f43f af1a 	beq.w	8008182 <_printf_float+0xb6>
 800834e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008352:	4313      	orrs	r3, r2
 8008354:	d102      	bne.n	800835c <_printf_float+0x290>
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	07d9      	lsls	r1, r3, #31
 800835a:	d5d8      	bpl.n	800830e <_printf_float+0x242>
 800835c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008360:	4631      	mov	r1, r6
 8008362:	4628      	mov	r0, r5
 8008364:	47b8      	blx	r7
 8008366:	3001      	adds	r0, #1
 8008368:	f43f af0b 	beq.w	8008182 <_printf_float+0xb6>
 800836c:	f04f 0900 	mov.w	r9, #0
 8008370:	f104 0a1a 	add.w	sl, r4, #26
 8008374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008376:	425b      	negs	r3, r3
 8008378:	454b      	cmp	r3, r9
 800837a:	dc01      	bgt.n	8008380 <_printf_float+0x2b4>
 800837c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800837e:	e794      	b.n	80082aa <_printf_float+0x1de>
 8008380:	2301      	movs	r3, #1
 8008382:	4652      	mov	r2, sl
 8008384:	4631      	mov	r1, r6
 8008386:	4628      	mov	r0, r5
 8008388:	47b8      	blx	r7
 800838a:	3001      	adds	r0, #1
 800838c:	f43f aef9 	beq.w	8008182 <_printf_float+0xb6>
 8008390:	f109 0901 	add.w	r9, r9, #1
 8008394:	e7ee      	b.n	8008374 <_printf_float+0x2a8>
 8008396:	bf00      	nop
 8008398:	7fefffff 	.word	0x7fefffff
 800839c:	0801d2dc 	.word	0x0801d2dc
 80083a0:	0801d2e0 	.word	0x0801d2e0
 80083a4:	0801d2e8 	.word	0x0801d2e8
 80083a8:	0801d2e4 	.word	0x0801d2e4
 80083ac:	0801d2ec 	.word	0x0801d2ec
 80083b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083b4:	429a      	cmp	r2, r3
 80083b6:	bfa8      	it	ge
 80083b8:	461a      	movge	r2, r3
 80083ba:	2a00      	cmp	r2, #0
 80083bc:	4691      	mov	r9, r2
 80083be:	dc37      	bgt.n	8008430 <_printf_float+0x364>
 80083c0:	f04f 0b00 	mov.w	fp, #0
 80083c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083c8:	f104 021a 	add.w	r2, r4, #26
 80083cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80083d0:	ebaa 0309 	sub.w	r3, sl, r9
 80083d4:	455b      	cmp	r3, fp
 80083d6:	dc33      	bgt.n	8008440 <_printf_float+0x374>
 80083d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80083dc:	429a      	cmp	r2, r3
 80083de:	db3b      	blt.n	8008458 <_printf_float+0x38c>
 80083e0:	6823      	ldr	r3, [r4, #0]
 80083e2:	07da      	lsls	r2, r3, #31
 80083e4:	d438      	bmi.n	8008458 <_printf_float+0x38c>
 80083e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80083ea:	eba3 020a 	sub.w	r2, r3, sl
 80083ee:	eba3 0901 	sub.w	r9, r3, r1
 80083f2:	4591      	cmp	r9, r2
 80083f4:	bfa8      	it	ge
 80083f6:	4691      	movge	r9, r2
 80083f8:	f1b9 0f00 	cmp.w	r9, #0
 80083fc:	dc34      	bgt.n	8008468 <_printf_float+0x39c>
 80083fe:	f04f 0800 	mov.w	r8, #0
 8008402:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008406:	f104 0a1a 	add.w	sl, r4, #26
 800840a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800840e:	1a9b      	subs	r3, r3, r2
 8008410:	eba3 0309 	sub.w	r3, r3, r9
 8008414:	4543      	cmp	r3, r8
 8008416:	f77f af7a 	ble.w	800830e <_printf_float+0x242>
 800841a:	2301      	movs	r3, #1
 800841c:	4652      	mov	r2, sl
 800841e:	4631      	mov	r1, r6
 8008420:	4628      	mov	r0, r5
 8008422:	47b8      	blx	r7
 8008424:	3001      	adds	r0, #1
 8008426:	f43f aeac 	beq.w	8008182 <_printf_float+0xb6>
 800842a:	f108 0801 	add.w	r8, r8, #1
 800842e:	e7ec      	b.n	800840a <_printf_float+0x33e>
 8008430:	4613      	mov	r3, r2
 8008432:	4631      	mov	r1, r6
 8008434:	4642      	mov	r2, r8
 8008436:	4628      	mov	r0, r5
 8008438:	47b8      	blx	r7
 800843a:	3001      	adds	r0, #1
 800843c:	d1c0      	bne.n	80083c0 <_printf_float+0x2f4>
 800843e:	e6a0      	b.n	8008182 <_printf_float+0xb6>
 8008440:	2301      	movs	r3, #1
 8008442:	4631      	mov	r1, r6
 8008444:	4628      	mov	r0, r5
 8008446:	920b      	str	r2, [sp, #44]	; 0x2c
 8008448:	47b8      	blx	r7
 800844a:	3001      	adds	r0, #1
 800844c:	f43f ae99 	beq.w	8008182 <_printf_float+0xb6>
 8008450:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008452:	f10b 0b01 	add.w	fp, fp, #1
 8008456:	e7b9      	b.n	80083cc <_printf_float+0x300>
 8008458:	4631      	mov	r1, r6
 800845a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800845e:	4628      	mov	r0, r5
 8008460:	47b8      	blx	r7
 8008462:	3001      	adds	r0, #1
 8008464:	d1bf      	bne.n	80083e6 <_printf_float+0x31a>
 8008466:	e68c      	b.n	8008182 <_printf_float+0xb6>
 8008468:	464b      	mov	r3, r9
 800846a:	4631      	mov	r1, r6
 800846c:	4628      	mov	r0, r5
 800846e:	eb08 020a 	add.w	r2, r8, sl
 8008472:	47b8      	blx	r7
 8008474:	3001      	adds	r0, #1
 8008476:	d1c2      	bne.n	80083fe <_printf_float+0x332>
 8008478:	e683      	b.n	8008182 <_printf_float+0xb6>
 800847a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800847c:	2a01      	cmp	r2, #1
 800847e:	dc01      	bgt.n	8008484 <_printf_float+0x3b8>
 8008480:	07db      	lsls	r3, r3, #31
 8008482:	d537      	bpl.n	80084f4 <_printf_float+0x428>
 8008484:	2301      	movs	r3, #1
 8008486:	4642      	mov	r2, r8
 8008488:	4631      	mov	r1, r6
 800848a:	4628      	mov	r0, r5
 800848c:	47b8      	blx	r7
 800848e:	3001      	adds	r0, #1
 8008490:	f43f ae77 	beq.w	8008182 <_printf_float+0xb6>
 8008494:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008498:	4631      	mov	r1, r6
 800849a:	4628      	mov	r0, r5
 800849c:	47b8      	blx	r7
 800849e:	3001      	adds	r0, #1
 80084a0:	f43f ae6f 	beq.w	8008182 <_printf_float+0xb6>
 80084a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084a8:	2200      	movs	r2, #0
 80084aa:	2300      	movs	r3, #0
 80084ac:	f7fd fbe4 	bl	8005c78 <__aeabi_dcmpeq>
 80084b0:	b9d8      	cbnz	r0, 80084ea <_printf_float+0x41e>
 80084b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084b4:	f108 0201 	add.w	r2, r8, #1
 80084b8:	3b01      	subs	r3, #1
 80084ba:	4631      	mov	r1, r6
 80084bc:	4628      	mov	r0, r5
 80084be:	47b8      	blx	r7
 80084c0:	3001      	adds	r0, #1
 80084c2:	d10e      	bne.n	80084e2 <_printf_float+0x416>
 80084c4:	e65d      	b.n	8008182 <_printf_float+0xb6>
 80084c6:	2301      	movs	r3, #1
 80084c8:	464a      	mov	r2, r9
 80084ca:	4631      	mov	r1, r6
 80084cc:	4628      	mov	r0, r5
 80084ce:	47b8      	blx	r7
 80084d0:	3001      	adds	r0, #1
 80084d2:	f43f ae56 	beq.w	8008182 <_printf_float+0xb6>
 80084d6:	f108 0801 	add.w	r8, r8, #1
 80084da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084dc:	3b01      	subs	r3, #1
 80084de:	4543      	cmp	r3, r8
 80084e0:	dcf1      	bgt.n	80084c6 <_printf_float+0x3fa>
 80084e2:	4653      	mov	r3, sl
 80084e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80084e8:	e6e0      	b.n	80082ac <_printf_float+0x1e0>
 80084ea:	f04f 0800 	mov.w	r8, #0
 80084ee:	f104 091a 	add.w	r9, r4, #26
 80084f2:	e7f2      	b.n	80084da <_printf_float+0x40e>
 80084f4:	2301      	movs	r3, #1
 80084f6:	4642      	mov	r2, r8
 80084f8:	e7df      	b.n	80084ba <_printf_float+0x3ee>
 80084fa:	2301      	movs	r3, #1
 80084fc:	464a      	mov	r2, r9
 80084fe:	4631      	mov	r1, r6
 8008500:	4628      	mov	r0, r5
 8008502:	47b8      	blx	r7
 8008504:	3001      	adds	r0, #1
 8008506:	f43f ae3c 	beq.w	8008182 <_printf_float+0xb6>
 800850a:	f108 0801 	add.w	r8, r8, #1
 800850e:	68e3      	ldr	r3, [r4, #12]
 8008510:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008512:	1a5b      	subs	r3, r3, r1
 8008514:	4543      	cmp	r3, r8
 8008516:	dcf0      	bgt.n	80084fa <_printf_float+0x42e>
 8008518:	e6fd      	b.n	8008316 <_printf_float+0x24a>
 800851a:	f04f 0800 	mov.w	r8, #0
 800851e:	f104 0919 	add.w	r9, r4, #25
 8008522:	e7f4      	b.n	800850e <_printf_float+0x442>

08008524 <_printf_common>:
 8008524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008528:	4616      	mov	r6, r2
 800852a:	4699      	mov	r9, r3
 800852c:	688a      	ldr	r2, [r1, #8]
 800852e:	690b      	ldr	r3, [r1, #16]
 8008530:	4607      	mov	r7, r0
 8008532:	4293      	cmp	r3, r2
 8008534:	bfb8      	it	lt
 8008536:	4613      	movlt	r3, r2
 8008538:	6033      	str	r3, [r6, #0]
 800853a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800853e:	460c      	mov	r4, r1
 8008540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008544:	b10a      	cbz	r2, 800854a <_printf_common+0x26>
 8008546:	3301      	adds	r3, #1
 8008548:	6033      	str	r3, [r6, #0]
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	0699      	lsls	r1, r3, #26
 800854e:	bf42      	ittt	mi
 8008550:	6833      	ldrmi	r3, [r6, #0]
 8008552:	3302      	addmi	r3, #2
 8008554:	6033      	strmi	r3, [r6, #0]
 8008556:	6825      	ldr	r5, [r4, #0]
 8008558:	f015 0506 	ands.w	r5, r5, #6
 800855c:	d106      	bne.n	800856c <_printf_common+0x48>
 800855e:	f104 0a19 	add.w	sl, r4, #25
 8008562:	68e3      	ldr	r3, [r4, #12]
 8008564:	6832      	ldr	r2, [r6, #0]
 8008566:	1a9b      	subs	r3, r3, r2
 8008568:	42ab      	cmp	r3, r5
 800856a:	dc28      	bgt.n	80085be <_printf_common+0x9a>
 800856c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008570:	1e13      	subs	r3, r2, #0
 8008572:	6822      	ldr	r2, [r4, #0]
 8008574:	bf18      	it	ne
 8008576:	2301      	movne	r3, #1
 8008578:	0692      	lsls	r2, r2, #26
 800857a:	d42d      	bmi.n	80085d8 <_printf_common+0xb4>
 800857c:	4649      	mov	r1, r9
 800857e:	4638      	mov	r0, r7
 8008580:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008584:	47c0      	blx	r8
 8008586:	3001      	adds	r0, #1
 8008588:	d020      	beq.n	80085cc <_printf_common+0xa8>
 800858a:	6823      	ldr	r3, [r4, #0]
 800858c:	68e5      	ldr	r5, [r4, #12]
 800858e:	f003 0306 	and.w	r3, r3, #6
 8008592:	2b04      	cmp	r3, #4
 8008594:	bf18      	it	ne
 8008596:	2500      	movne	r5, #0
 8008598:	6832      	ldr	r2, [r6, #0]
 800859a:	f04f 0600 	mov.w	r6, #0
 800859e:	68a3      	ldr	r3, [r4, #8]
 80085a0:	bf08      	it	eq
 80085a2:	1aad      	subeq	r5, r5, r2
 80085a4:	6922      	ldr	r2, [r4, #16]
 80085a6:	bf08      	it	eq
 80085a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085ac:	4293      	cmp	r3, r2
 80085ae:	bfc4      	itt	gt
 80085b0:	1a9b      	subgt	r3, r3, r2
 80085b2:	18ed      	addgt	r5, r5, r3
 80085b4:	341a      	adds	r4, #26
 80085b6:	42b5      	cmp	r5, r6
 80085b8:	d11a      	bne.n	80085f0 <_printf_common+0xcc>
 80085ba:	2000      	movs	r0, #0
 80085bc:	e008      	b.n	80085d0 <_printf_common+0xac>
 80085be:	2301      	movs	r3, #1
 80085c0:	4652      	mov	r2, sl
 80085c2:	4649      	mov	r1, r9
 80085c4:	4638      	mov	r0, r7
 80085c6:	47c0      	blx	r8
 80085c8:	3001      	adds	r0, #1
 80085ca:	d103      	bne.n	80085d4 <_printf_common+0xb0>
 80085cc:	f04f 30ff 	mov.w	r0, #4294967295
 80085d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d4:	3501      	adds	r5, #1
 80085d6:	e7c4      	b.n	8008562 <_printf_common+0x3e>
 80085d8:	2030      	movs	r0, #48	; 0x30
 80085da:	18e1      	adds	r1, r4, r3
 80085dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085e0:	1c5a      	adds	r2, r3, #1
 80085e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085e6:	4422      	add	r2, r4
 80085e8:	3302      	adds	r3, #2
 80085ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085ee:	e7c5      	b.n	800857c <_printf_common+0x58>
 80085f0:	2301      	movs	r3, #1
 80085f2:	4622      	mov	r2, r4
 80085f4:	4649      	mov	r1, r9
 80085f6:	4638      	mov	r0, r7
 80085f8:	47c0      	blx	r8
 80085fa:	3001      	adds	r0, #1
 80085fc:	d0e6      	beq.n	80085cc <_printf_common+0xa8>
 80085fe:	3601      	adds	r6, #1
 8008600:	e7d9      	b.n	80085b6 <_printf_common+0x92>
	...

08008604 <_printf_i>:
 8008604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008608:	7e0f      	ldrb	r7, [r1, #24]
 800860a:	4691      	mov	r9, r2
 800860c:	2f78      	cmp	r7, #120	; 0x78
 800860e:	4680      	mov	r8, r0
 8008610:	460c      	mov	r4, r1
 8008612:	469a      	mov	sl, r3
 8008614:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008616:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800861a:	d807      	bhi.n	800862c <_printf_i+0x28>
 800861c:	2f62      	cmp	r7, #98	; 0x62
 800861e:	d80a      	bhi.n	8008636 <_printf_i+0x32>
 8008620:	2f00      	cmp	r7, #0
 8008622:	f000 80d9 	beq.w	80087d8 <_printf_i+0x1d4>
 8008626:	2f58      	cmp	r7, #88	; 0x58
 8008628:	f000 80a4 	beq.w	8008774 <_printf_i+0x170>
 800862c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008630:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008634:	e03a      	b.n	80086ac <_printf_i+0xa8>
 8008636:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800863a:	2b15      	cmp	r3, #21
 800863c:	d8f6      	bhi.n	800862c <_printf_i+0x28>
 800863e:	a101      	add	r1, pc, #4	; (adr r1, 8008644 <_printf_i+0x40>)
 8008640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008644:	0800869d 	.word	0x0800869d
 8008648:	080086b1 	.word	0x080086b1
 800864c:	0800862d 	.word	0x0800862d
 8008650:	0800862d 	.word	0x0800862d
 8008654:	0800862d 	.word	0x0800862d
 8008658:	0800862d 	.word	0x0800862d
 800865c:	080086b1 	.word	0x080086b1
 8008660:	0800862d 	.word	0x0800862d
 8008664:	0800862d 	.word	0x0800862d
 8008668:	0800862d 	.word	0x0800862d
 800866c:	0800862d 	.word	0x0800862d
 8008670:	080087bf 	.word	0x080087bf
 8008674:	080086e1 	.word	0x080086e1
 8008678:	080087a1 	.word	0x080087a1
 800867c:	0800862d 	.word	0x0800862d
 8008680:	0800862d 	.word	0x0800862d
 8008684:	080087e1 	.word	0x080087e1
 8008688:	0800862d 	.word	0x0800862d
 800868c:	080086e1 	.word	0x080086e1
 8008690:	0800862d 	.word	0x0800862d
 8008694:	0800862d 	.word	0x0800862d
 8008698:	080087a9 	.word	0x080087a9
 800869c:	682b      	ldr	r3, [r5, #0]
 800869e:	1d1a      	adds	r2, r3, #4
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	602a      	str	r2, [r5, #0]
 80086a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086ac:	2301      	movs	r3, #1
 80086ae:	e0a4      	b.n	80087fa <_printf_i+0x1f6>
 80086b0:	6820      	ldr	r0, [r4, #0]
 80086b2:	6829      	ldr	r1, [r5, #0]
 80086b4:	0606      	lsls	r6, r0, #24
 80086b6:	f101 0304 	add.w	r3, r1, #4
 80086ba:	d50a      	bpl.n	80086d2 <_printf_i+0xce>
 80086bc:	680e      	ldr	r6, [r1, #0]
 80086be:	602b      	str	r3, [r5, #0]
 80086c0:	2e00      	cmp	r6, #0
 80086c2:	da03      	bge.n	80086cc <_printf_i+0xc8>
 80086c4:	232d      	movs	r3, #45	; 0x2d
 80086c6:	4276      	negs	r6, r6
 80086c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086cc:	230a      	movs	r3, #10
 80086ce:	485e      	ldr	r0, [pc, #376]	; (8008848 <_printf_i+0x244>)
 80086d0:	e019      	b.n	8008706 <_printf_i+0x102>
 80086d2:	680e      	ldr	r6, [r1, #0]
 80086d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086d8:	602b      	str	r3, [r5, #0]
 80086da:	bf18      	it	ne
 80086dc:	b236      	sxthne	r6, r6
 80086de:	e7ef      	b.n	80086c0 <_printf_i+0xbc>
 80086e0:	682b      	ldr	r3, [r5, #0]
 80086e2:	6820      	ldr	r0, [r4, #0]
 80086e4:	1d19      	adds	r1, r3, #4
 80086e6:	6029      	str	r1, [r5, #0]
 80086e8:	0601      	lsls	r1, r0, #24
 80086ea:	d501      	bpl.n	80086f0 <_printf_i+0xec>
 80086ec:	681e      	ldr	r6, [r3, #0]
 80086ee:	e002      	b.n	80086f6 <_printf_i+0xf2>
 80086f0:	0646      	lsls	r6, r0, #25
 80086f2:	d5fb      	bpl.n	80086ec <_printf_i+0xe8>
 80086f4:	881e      	ldrh	r6, [r3, #0]
 80086f6:	2f6f      	cmp	r7, #111	; 0x6f
 80086f8:	bf0c      	ite	eq
 80086fa:	2308      	moveq	r3, #8
 80086fc:	230a      	movne	r3, #10
 80086fe:	4852      	ldr	r0, [pc, #328]	; (8008848 <_printf_i+0x244>)
 8008700:	2100      	movs	r1, #0
 8008702:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008706:	6865      	ldr	r5, [r4, #4]
 8008708:	2d00      	cmp	r5, #0
 800870a:	bfa8      	it	ge
 800870c:	6821      	ldrge	r1, [r4, #0]
 800870e:	60a5      	str	r5, [r4, #8]
 8008710:	bfa4      	itt	ge
 8008712:	f021 0104 	bicge.w	r1, r1, #4
 8008716:	6021      	strge	r1, [r4, #0]
 8008718:	b90e      	cbnz	r6, 800871e <_printf_i+0x11a>
 800871a:	2d00      	cmp	r5, #0
 800871c:	d04d      	beq.n	80087ba <_printf_i+0x1b6>
 800871e:	4615      	mov	r5, r2
 8008720:	fbb6 f1f3 	udiv	r1, r6, r3
 8008724:	fb03 6711 	mls	r7, r3, r1, r6
 8008728:	5dc7      	ldrb	r7, [r0, r7]
 800872a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800872e:	4637      	mov	r7, r6
 8008730:	42bb      	cmp	r3, r7
 8008732:	460e      	mov	r6, r1
 8008734:	d9f4      	bls.n	8008720 <_printf_i+0x11c>
 8008736:	2b08      	cmp	r3, #8
 8008738:	d10b      	bne.n	8008752 <_printf_i+0x14e>
 800873a:	6823      	ldr	r3, [r4, #0]
 800873c:	07de      	lsls	r6, r3, #31
 800873e:	d508      	bpl.n	8008752 <_printf_i+0x14e>
 8008740:	6923      	ldr	r3, [r4, #16]
 8008742:	6861      	ldr	r1, [r4, #4]
 8008744:	4299      	cmp	r1, r3
 8008746:	bfde      	ittt	le
 8008748:	2330      	movle	r3, #48	; 0x30
 800874a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800874e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008752:	1b52      	subs	r2, r2, r5
 8008754:	6122      	str	r2, [r4, #16]
 8008756:	464b      	mov	r3, r9
 8008758:	4621      	mov	r1, r4
 800875a:	4640      	mov	r0, r8
 800875c:	f8cd a000 	str.w	sl, [sp]
 8008760:	aa03      	add	r2, sp, #12
 8008762:	f7ff fedf 	bl	8008524 <_printf_common>
 8008766:	3001      	adds	r0, #1
 8008768:	d14c      	bne.n	8008804 <_printf_i+0x200>
 800876a:	f04f 30ff 	mov.w	r0, #4294967295
 800876e:	b004      	add	sp, #16
 8008770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008774:	4834      	ldr	r0, [pc, #208]	; (8008848 <_printf_i+0x244>)
 8008776:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800877a:	6829      	ldr	r1, [r5, #0]
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008782:	6029      	str	r1, [r5, #0]
 8008784:	061d      	lsls	r5, r3, #24
 8008786:	d514      	bpl.n	80087b2 <_printf_i+0x1ae>
 8008788:	07df      	lsls	r7, r3, #31
 800878a:	bf44      	itt	mi
 800878c:	f043 0320 	orrmi.w	r3, r3, #32
 8008790:	6023      	strmi	r3, [r4, #0]
 8008792:	b91e      	cbnz	r6, 800879c <_printf_i+0x198>
 8008794:	6823      	ldr	r3, [r4, #0]
 8008796:	f023 0320 	bic.w	r3, r3, #32
 800879a:	6023      	str	r3, [r4, #0]
 800879c:	2310      	movs	r3, #16
 800879e:	e7af      	b.n	8008700 <_printf_i+0xfc>
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	f043 0320 	orr.w	r3, r3, #32
 80087a6:	6023      	str	r3, [r4, #0]
 80087a8:	2378      	movs	r3, #120	; 0x78
 80087aa:	4828      	ldr	r0, [pc, #160]	; (800884c <_printf_i+0x248>)
 80087ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087b0:	e7e3      	b.n	800877a <_printf_i+0x176>
 80087b2:	0659      	lsls	r1, r3, #25
 80087b4:	bf48      	it	mi
 80087b6:	b2b6      	uxthmi	r6, r6
 80087b8:	e7e6      	b.n	8008788 <_printf_i+0x184>
 80087ba:	4615      	mov	r5, r2
 80087bc:	e7bb      	b.n	8008736 <_printf_i+0x132>
 80087be:	682b      	ldr	r3, [r5, #0]
 80087c0:	6826      	ldr	r6, [r4, #0]
 80087c2:	1d18      	adds	r0, r3, #4
 80087c4:	6961      	ldr	r1, [r4, #20]
 80087c6:	6028      	str	r0, [r5, #0]
 80087c8:	0635      	lsls	r5, r6, #24
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	d501      	bpl.n	80087d2 <_printf_i+0x1ce>
 80087ce:	6019      	str	r1, [r3, #0]
 80087d0:	e002      	b.n	80087d8 <_printf_i+0x1d4>
 80087d2:	0670      	lsls	r0, r6, #25
 80087d4:	d5fb      	bpl.n	80087ce <_printf_i+0x1ca>
 80087d6:	8019      	strh	r1, [r3, #0]
 80087d8:	2300      	movs	r3, #0
 80087da:	4615      	mov	r5, r2
 80087dc:	6123      	str	r3, [r4, #16]
 80087de:	e7ba      	b.n	8008756 <_printf_i+0x152>
 80087e0:	682b      	ldr	r3, [r5, #0]
 80087e2:	2100      	movs	r1, #0
 80087e4:	1d1a      	adds	r2, r3, #4
 80087e6:	602a      	str	r2, [r5, #0]
 80087e8:	681d      	ldr	r5, [r3, #0]
 80087ea:	6862      	ldr	r2, [r4, #4]
 80087ec:	4628      	mov	r0, r5
 80087ee:	f002 faed 	bl	800adcc <memchr>
 80087f2:	b108      	cbz	r0, 80087f8 <_printf_i+0x1f4>
 80087f4:	1b40      	subs	r0, r0, r5
 80087f6:	6060      	str	r0, [r4, #4]
 80087f8:	6863      	ldr	r3, [r4, #4]
 80087fa:	6123      	str	r3, [r4, #16]
 80087fc:	2300      	movs	r3, #0
 80087fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008802:	e7a8      	b.n	8008756 <_printf_i+0x152>
 8008804:	462a      	mov	r2, r5
 8008806:	4649      	mov	r1, r9
 8008808:	4640      	mov	r0, r8
 800880a:	6923      	ldr	r3, [r4, #16]
 800880c:	47d0      	blx	sl
 800880e:	3001      	adds	r0, #1
 8008810:	d0ab      	beq.n	800876a <_printf_i+0x166>
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	079b      	lsls	r3, r3, #30
 8008816:	d413      	bmi.n	8008840 <_printf_i+0x23c>
 8008818:	68e0      	ldr	r0, [r4, #12]
 800881a:	9b03      	ldr	r3, [sp, #12]
 800881c:	4298      	cmp	r0, r3
 800881e:	bfb8      	it	lt
 8008820:	4618      	movlt	r0, r3
 8008822:	e7a4      	b.n	800876e <_printf_i+0x16a>
 8008824:	2301      	movs	r3, #1
 8008826:	4632      	mov	r2, r6
 8008828:	4649      	mov	r1, r9
 800882a:	4640      	mov	r0, r8
 800882c:	47d0      	blx	sl
 800882e:	3001      	adds	r0, #1
 8008830:	d09b      	beq.n	800876a <_printf_i+0x166>
 8008832:	3501      	adds	r5, #1
 8008834:	68e3      	ldr	r3, [r4, #12]
 8008836:	9903      	ldr	r1, [sp, #12]
 8008838:	1a5b      	subs	r3, r3, r1
 800883a:	42ab      	cmp	r3, r5
 800883c:	dcf2      	bgt.n	8008824 <_printf_i+0x220>
 800883e:	e7eb      	b.n	8008818 <_printf_i+0x214>
 8008840:	2500      	movs	r5, #0
 8008842:	f104 0619 	add.w	r6, r4, #25
 8008846:	e7f5      	b.n	8008834 <_printf_i+0x230>
 8008848:	0801d2ee 	.word	0x0801d2ee
 800884c:	0801d2ff 	.word	0x0801d2ff

08008850 <_scanf_float>:
 8008850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008854:	b087      	sub	sp, #28
 8008856:	9303      	str	r3, [sp, #12]
 8008858:	688b      	ldr	r3, [r1, #8]
 800885a:	4617      	mov	r7, r2
 800885c:	1e5a      	subs	r2, r3, #1
 800885e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008862:	bf85      	ittet	hi
 8008864:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008868:	195b      	addhi	r3, r3, r5
 800886a:	2300      	movls	r3, #0
 800886c:	9302      	strhi	r3, [sp, #8]
 800886e:	bf88      	it	hi
 8008870:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008874:	468b      	mov	fp, r1
 8008876:	f04f 0500 	mov.w	r5, #0
 800887a:	bf8c      	ite	hi
 800887c:	608b      	strhi	r3, [r1, #8]
 800887e:	9302      	strls	r3, [sp, #8]
 8008880:	680b      	ldr	r3, [r1, #0]
 8008882:	4680      	mov	r8, r0
 8008884:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008888:	f84b 3b1c 	str.w	r3, [fp], #28
 800888c:	460c      	mov	r4, r1
 800888e:	465e      	mov	r6, fp
 8008890:	46aa      	mov	sl, r5
 8008892:	46a9      	mov	r9, r5
 8008894:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008898:	9501      	str	r5, [sp, #4]
 800889a:	68a2      	ldr	r2, [r4, #8]
 800889c:	b152      	cbz	r2, 80088b4 <_scanf_float+0x64>
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	2b4e      	cmp	r3, #78	; 0x4e
 80088a4:	d864      	bhi.n	8008970 <_scanf_float+0x120>
 80088a6:	2b40      	cmp	r3, #64	; 0x40
 80088a8:	d83c      	bhi.n	8008924 <_scanf_float+0xd4>
 80088aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80088ae:	b2c8      	uxtb	r0, r1
 80088b0:	280e      	cmp	r0, #14
 80088b2:	d93a      	bls.n	800892a <_scanf_float+0xda>
 80088b4:	f1b9 0f00 	cmp.w	r9, #0
 80088b8:	d003      	beq.n	80088c2 <_scanf_float+0x72>
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088c6:	f1ba 0f01 	cmp.w	sl, #1
 80088ca:	f200 8113 	bhi.w	8008af4 <_scanf_float+0x2a4>
 80088ce:	455e      	cmp	r6, fp
 80088d0:	f200 8105 	bhi.w	8008ade <_scanf_float+0x28e>
 80088d4:	2501      	movs	r5, #1
 80088d6:	4628      	mov	r0, r5
 80088d8:	b007      	add	sp, #28
 80088da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80088e2:	2a0d      	cmp	r2, #13
 80088e4:	d8e6      	bhi.n	80088b4 <_scanf_float+0x64>
 80088e6:	a101      	add	r1, pc, #4	; (adr r1, 80088ec <_scanf_float+0x9c>)
 80088e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80088ec:	08008a2b 	.word	0x08008a2b
 80088f0:	080088b5 	.word	0x080088b5
 80088f4:	080088b5 	.word	0x080088b5
 80088f8:	080088b5 	.word	0x080088b5
 80088fc:	08008a8b 	.word	0x08008a8b
 8008900:	08008a63 	.word	0x08008a63
 8008904:	080088b5 	.word	0x080088b5
 8008908:	080088b5 	.word	0x080088b5
 800890c:	08008a39 	.word	0x08008a39
 8008910:	080088b5 	.word	0x080088b5
 8008914:	080088b5 	.word	0x080088b5
 8008918:	080088b5 	.word	0x080088b5
 800891c:	080088b5 	.word	0x080088b5
 8008920:	080089f1 	.word	0x080089f1
 8008924:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008928:	e7db      	b.n	80088e2 <_scanf_float+0x92>
 800892a:	290e      	cmp	r1, #14
 800892c:	d8c2      	bhi.n	80088b4 <_scanf_float+0x64>
 800892e:	a001      	add	r0, pc, #4	; (adr r0, 8008934 <_scanf_float+0xe4>)
 8008930:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008934:	080089e3 	.word	0x080089e3
 8008938:	080088b5 	.word	0x080088b5
 800893c:	080089e3 	.word	0x080089e3
 8008940:	08008a77 	.word	0x08008a77
 8008944:	080088b5 	.word	0x080088b5
 8008948:	08008991 	.word	0x08008991
 800894c:	080089cd 	.word	0x080089cd
 8008950:	080089cd 	.word	0x080089cd
 8008954:	080089cd 	.word	0x080089cd
 8008958:	080089cd 	.word	0x080089cd
 800895c:	080089cd 	.word	0x080089cd
 8008960:	080089cd 	.word	0x080089cd
 8008964:	080089cd 	.word	0x080089cd
 8008968:	080089cd 	.word	0x080089cd
 800896c:	080089cd 	.word	0x080089cd
 8008970:	2b6e      	cmp	r3, #110	; 0x6e
 8008972:	d809      	bhi.n	8008988 <_scanf_float+0x138>
 8008974:	2b60      	cmp	r3, #96	; 0x60
 8008976:	d8b2      	bhi.n	80088de <_scanf_float+0x8e>
 8008978:	2b54      	cmp	r3, #84	; 0x54
 800897a:	d077      	beq.n	8008a6c <_scanf_float+0x21c>
 800897c:	2b59      	cmp	r3, #89	; 0x59
 800897e:	d199      	bne.n	80088b4 <_scanf_float+0x64>
 8008980:	2d07      	cmp	r5, #7
 8008982:	d197      	bne.n	80088b4 <_scanf_float+0x64>
 8008984:	2508      	movs	r5, #8
 8008986:	e029      	b.n	80089dc <_scanf_float+0x18c>
 8008988:	2b74      	cmp	r3, #116	; 0x74
 800898a:	d06f      	beq.n	8008a6c <_scanf_float+0x21c>
 800898c:	2b79      	cmp	r3, #121	; 0x79
 800898e:	e7f6      	b.n	800897e <_scanf_float+0x12e>
 8008990:	6821      	ldr	r1, [r4, #0]
 8008992:	05c8      	lsls	r0, r1, #23
 8008994:	d51a      	bpl.n	80089cc <_scanf_float+0x17c>
 8008996:	9b02      	ldr	r3, [sp, #8]
 8008998:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800899c:	6021      	str	r1, [r4, #0]
 800899e:	f109 0901 	add.w	r9, r9, #1
 80089a2:	b11b      	cbz	r3, 80089ac <_scanf_float+0x15c>
 80089a4:	3b01      	subs	r3, #1
 80089a6:	3201      	adds	r2, #1
 80089a8:	9302      	str	r3, [sp, #8]
 80089aa:	60a2      	str	r2, [r4, #8]
 80089ac:	68a3      	ldr	r3, [r4, #8]
 80089ae:	3b01      	subs	r3, #1
 80089b0:	60a3      	str	r3, [r4, #8]
 80089b2:	6923      	ldr	r3, [r4, #16]
 80089b4:	3301      	adds	r3, #1
 80089b6:	6123      	str	r3, [r4, #16]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	3b01      	subs	r3, #1
 80089bc:	2b00      	cmp	r3, #0
 80089be:	607b      	str	r3, [r7, #4]
 80089c0:	f340 8084 	ble.w	8008acc <_scanf_float+0x27c>
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	3301      	adds	r3, #1
 80089c8:	603b      	str	r3, [r7, #0]
 80089ca:	e766      	b.n	800889a <_scanf_float+0x4a>
 80089cc:	eb1a 0f05 	cmn.w	sl, r5
 80089d0:	f47f af70 	bne.w	80088b4 <_scanf_float+0x64>
 80089d4:	6822      	ldr	r2, [r4, #0]
 80089d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80089da:	6022      	str	r2, [r4, #0]
 80089dc:	f806 3b01 	strb.w	r3, [r6], #1
 80089e0:	e7e4      	b.n	80089ac <_scanf_float+0x15c>
 80089e2:	6822      	ldr	r2, [r4, #0]
 80089e4:	0610      	lsls	r0, r2, #24
 80089e6:	f57f af65 	bpl.w	80088b4 <_scanf_float+0x64>
 80089ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089ee:	e7f4      	b.n	80089da <_scanf_float+0x18a>
 80089f0:	f1ba 0f00 	cmp.w	sl, #0
 80089f4:	d10e      	bne.n	8008a14 <_scanf_float+0x1c4>
 80089f6:	f1b9 0f00 	cmp.w	r9, #0
 80089fa:	d10e      	bne.n	8008a1a <_scanf_float+0x1ca>
 80089fc:	6822      	ldr	r2, [r4, #0]
 80089fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a02:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a06:	d108      	bne.n	8008a1a <_scanf_float+0x1ca>
 8008a08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a0c:	f04f 0a01 	mov.w	sl, #1
 8008a10:	6022      	str	r2, [r4, #0]
 8008a12:	e7e3      	b.n	80089dc <_scanf_float+0x18c>
 8008a14:	f1ba 0f02 	cmp.w	sl, #2
 8008a18:	d055      	beq.n	8008ac6 <_scanf_float+0x276>
 8008a1a:	2d01      	cmp	r5, #1
 8008a1c:	d002      	beq.n	8008a24 <_scanf_float+0x1d4>
 8008a1e:	2d04      	cmp	r5, #4
 8008a20:	f47f af48 	bne.w	80088b4 <_scanf_float+0x64>
 8008a24:	3501      	adds	r5, #1
 8008a26:	b2ed      	uxtb	r5, r5
 8008a28:	e7d8      	b.n	80089dc <_scanf_float+0x18c>
 8008a2a:	f1ba 0f01 	cmp.w	sl, #1
 8008a2e:	f47f af41 	bne.w	80088b4 <_scanf_float+0x64>
 8008a32:	f04f 0a02 	mov.w	sl, #2
 8008a36:	e7d1      	b.n	80089dc <_scanf_float+0x18c>
 8008a38:	b97d      	cbnz	r5, 8008a5a <_scanf_float+0x20a>
 8008a3a:	f1b9 0f00 	cmp.w	r9, #0
 8008a3e:	f47f af3c 	bne.w	80088ba <_scanf_float+0x6a>
 8008a42:	6822      	ldr	r2, [r4, #0]
 8008a44:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a48:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a4c:	f47f af39 	bne.w	80088c2 <_scanf_float+0x72>
 8008a50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a54:	2501      	movs	r5, #1
 8008a56:	6022      	str	r2, [r4, #0]
 8008a58:	e7c0      	b.n	80089dc <_scanf_float+0x18c>
 8008a5a:	2d03      	cmp	r5, #3
 8008a5c:	d0e2      	beq.n	8008a24 <_scanf_float+0x1d4>
 8008a5e:	2d05      	cmp	r5, #5
 8008a60:	e7de      	b.n	8008a20 <_scanf_float+0x1d0>
 8008a62:	2d02      	cmp	r5, #2
 8008a64:	f47f af26 	bne.w	80088b4 <_scanf_float+0x64>
 8008a68:	2503      	movs	r5, #3
 8008a6a:	e7b7      	b.n	80089dc <_scanf_float+0x18c>
 8008a6c:	2d06      	cmp	r5, #6
 8008a6e:	f47f af21 	bne.w	80088b4 <_scanf_float+0x64>
 8008a72:	2507      	movs	r5, #7
 8008a74:	e7b2      	b.n	80089dc <_scanf_float+0x18c>
 8008a76:	6822      	ldr	r2, [r4, #0]
 8008a78:	0591      	lsls	r1, r2, #22
 8008a7a:	f57f af1b 	bpl.w	80088b4 <_scanf_float+0x64>
 8008a7e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008a82:	6022      	str	r2, [r4, #0]
 8008a84:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a88:	e7a8      	b.n	80089dc <_scanf_float+0x18c>
 8008a8a:	6822      	ldr	r2, [r4, #0]
 8008a8c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008a90:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008a94:	d006      	beq.n	8008aa4 <_scanf_float+0x254>
 8008a96:	0550      	lsls	r0, r2, #21
 8008a98:	f57f af0c 	bpl.w	80088b4 <_scanf_float+0x64>
 8008a9c:	f1b9 0f00 	cmp.w	r9, #0
 8008aa0:	f43f af0f 	beq.w	80088c2 <_scanf_float+0x72>
 8008aa4:	0591      	lsls	r1, r2, #22
 8008aa6:	bf58      	it	pl
 8008aa8:	9901      	ldrpl	r1, [sp, #4]
 8008aaa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008aae:	bf58      	it	pl
 8008ab0:	eba9 0101 	subpl.w	r1, r9, r1
 8008ab4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008ab8:	f04f 0900 	mov.w	r9, #0
 8008abc:	bf58      	it	pl
 8008abe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008ac2:	6022      	str	r2, [r4, #0]
 8008ac4:	e78a      	b.n	80089dc <_scanf_float+0x18c>
 8008ac6:	f04f 0a03 	mov.w	sl, #3
 8008aca:	e787      	b.n	80089dc <_scanf_float+0x18c>
 8008acc:	4639      	mov	r1, r7
 8008ace:	4640      	mov	r0, r8
 8008ad0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008ad4:	4798      	blx	r3
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	f43f aedf 	beq.w	800889a <_scanf_float+0x4a>
 8008adc:	e6ea      	b.n	80088b4 <_scanf_float+0x64>
 8008ade:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ae2:	463a      	mov	r2, r7
 8008ae4:	4640      	mov	r0, r8
 8008ae6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008aea:	4798      	blx	r3
 8008aec:	6923      	ldr	r3, [r4, #16]
 8008aee:	3b01      	subs	r3, #1
 8008af0:	6123      	str	r3, [r4, #16]
 8008af2:	e6ec      	b.n	80088ce <_scanf_float+0x7e>
 8008af4:	1e6b      	subs	r3, r5, #1
 8008af6:	2b06      	cmp	r3, #6
 8008af8:	d825      	bhi.n	8008b46 <_scanf_float+0x2f6>
 8008afa:	2d02      	cmp	r5, #2
 8008afc:	d836      	bhi.n	8008b6c <_scanf_float+0x31c>
 8008afe:	455e      	cmp	r6, fp
 8008b00:	f67f aee8 	bls.w	80088d4 <_scanf_float+0x84>
 8008b04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b08:	463a      	mov	r2, r7
 8008b0a:	4640      	mov	r0, r8
 8008b0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b10:	4798      	blx	r3
 8008b12:	6923      	ldr	r3, [r4, #16]
 8008b14:	3b01      	subs	r3, #1
 8008b16:	6123      	str	r3, [r4, #16]
 8008b18:	e7f1      	b.n	8008afe <_scanf_float+0x2ae>
 8008b1a:	9802      	ldr	r0, [sp, #8]
 8008b1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b20:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008b24:	463a      	mov	r2, r7
 8008b26:	9002      	str	r0, [sp, #8]
 8008b28:	4640      	mov	r0, r8
 8008b2a:	4798      	blx	r3
 8008b2c:	6923      	ldr	r3, [r4, #16]
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	6123      	str	r3, [r4, #16]
 8008b32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b36:	fa5f fa8a 	uxtb.w	sl, sl
 8008b3a:	f1ba 0f02 	cmp.w	sl, #2
 8008b3e:	d1ec      	bne.n	8008b1a <_scanf_float+0x2ca>
 8008b40:	3d03      	subs	r5, #3
 8008b42:	b2ed      	uxtb	r5, r5
 8008b44:	1b76      	subs	r6, r6, r5
 8008b46:	6823      	ldr	r3, [r4, #0]
 8008b48:	05da      	lsls	r2, r3, #23
 8008b4a:	d52f      	bpl.n	8008bac <_scanf_float+0x35c>
 8008b4c:	055b      	lsls	r3, r3, #21
 8008b4e:	d510      	bpl.n	8008b72 <_scanf_float+0x322>
 8008b50:	455e      	cmp	r6, fp
 8008b52:	f67f aebf 	bls.w	80088d4 <_scanf_float+0x84>
 8008b56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b5a:	463a      	mov	r2, r7
 8008b5c:	4640      	mov	r0, r8
 8008b5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b62:	4798      	blx	r3
 8008b64:	6923      	ldr	r3, [r4, #16]
 8008b66:	3b01      	subs	r3, #1
 8008b68:	6123      	str	r3, [r4, #16]
 8008b6a:	e7f1      	b.n	8008b50 <_scanf_float+0x300>
 8008b6c:	46aa      	mov	sl, r5
 8008b6e:	9602      	str	r6, [sp, #8]
 8008b70:	e7df      	b.n	8008b32 <_scanf_float+0x2e2>
 8008b72:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008b76:	6923      	ldr	r3, [r4, #16]
 8008b78:	2965      	cmp	r1, #101	; 0x65
 8008b7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b7e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008b82:	6123      	str	r3, [r4, #16]
 8008b84:	d00c      	beq.n	8008ba0 <_scanf_float+0x350>
 8008b86:	2945      	cmp	r1, #69	; 0x45
 8008b88:	d00a      	beq.n	8008ba0 <_scanf_float+0x350>
 8008b8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b8e:	463a      	mov	r2, r7
 8008b90:	4640      	mov	r0, r8
 8008b92:	4798      	blx	r3
 8008b94:	6923      	ldr	r3, [r4, #16]
 8008b96:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	1eb5      	subs	r5, r6, #2
 8008b9e:	6123      	str	r3, [r4, #16]
 8008ba0:	463a      	mov	r2, r7
 8008ba2:	4640      	mov	r0, r8
 8008ba4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ba8:	4798      	blx	r3
 8008baa:	462e      	mov	r6, r5
 8008bac:	6825      	ldr	r5, [r4, #0]
 8008bae:	f015 0510 	ands.w	r5, r5, #16
 8008bb2:	d155      	bne.n	8008c60 <_scanf_float+0x410>
 8008bb4:	7035      	strb	r5, [r6, #0]
 8008bb6:	6823      	ldr	r3, [r4, #0]
 8008bb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bc0:	d11b      	bne.n	8008bfa <_scanf_float+0x3aa>
 8008bc2:	9b01      	ldr	r3, [sp, #4]
 8008bc4:	454b      	cmp	r3, r9
 8008bc6:	eba3 0209 	sub.w	r2, r3, r9
 8008bca:	d123      	bne.n	8008c14 <_scanf_float+0x3c4>
 8008bcc:	2200      	movs	r2, #0
 8008bce:	4659      	mov	r1, fp
 8008bd0:	4640      	mov	r0, r8
 8008bd2:	f000 fe79 	bl	80098c8 <_strtod_r>
 8008bd6:	6822      	ldr	r2, [r4, #0]
 8008bd8:	9b03      	ldr	r3, [sp, #12]
 8008bda:	f012 0f02 	tst.w	r2, #2
 8008bde:	4606      	mov	r6, r0
 8008be0:	460f      	mov	r7, r1
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	d021      	beq.n	8008c2a <_scanf_float+0x3da>
 8008be6:	1d1a      	adds	r2, r3, #4
 8008be8:	9903      	ldr	r1, [sp, #12]
 8008bea:	600a      	str	r2, [r1, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	e9c3 6700 	strd	r6, r7, [r3]
 8008bf2:	68e3      	ldr	r3, [r4, #12]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	60e3      	str	r3, [r4, #12]
 8008bf8:	e66d      	b.n	80088d6 <_scanf_float+0x86>
 8008bfa:	9b04      	ldr	r3, [sp, #16]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d0e5      	beq.n	8008bcc <_scanf_float+0x37c>
 8008c00:	9905      	ldr	r1, [sp, #20]
 8008c02:	230a      	movs	r3, #10
 8008c04:	462a      	mov	r2, r5
 8008c06:	4640      	mov	r0, r8
 8008c08:	3101      	adds	r1, #1
 8008c0a:	f000 fedf 	bl	80099cc <_strtol_r>
 8008c0e:	9b04      	ldr	r3, [sp, #16]
 8008c10:	9e05      	ldr	r6, [sp, #20]
 8008c12:	1ac2      	subs	r2, r0, r3
 8008c14:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008c18:	429e      	cmp	r6, r3
 8008c1a:	bf28      	it	cs
 8008c1c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008c20:	4630      	mov	r0, r6
 8008c22:	4910      	ldr	r1, [pc, #64]	; (8008c64 <_scanf_float+0x414>)
 8008c24:	f000 f826 	bl	8008c74 <siprintf>
 8008c28:	e7d0      	b.n	8008bcc <_scanf_float+0x37c>
 8008c2a:	f012 0f04 	tst.w	r2, #4
 8008c2e:	f103 0204 	add.w	r2, r3, #4
 8008c32:	d1d9      	bne.n	8008be8 <_scanf_float+0x398>
 8008c34:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008c38:	f8cc 2000 	str.w	r2, [ip]
 8008c3c:	f8d3 8000 	ldr.w	r8, [r3]
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	f7fd f84a 	bl	8005cdc <__aeabi_dcmpun>
 8008c48:	b128      	cbz	r0, 8008c56 <_scanf_float+0x406>
 8008c4a:	4807      	ldr	r0, [pc, #28]	; (8008c68 <_scanf_float+0x418>)
 8008c4c:	f000 f80e 	bl	8008c6c <nanf>
 8008c50:	f8c8 0000 	str.w	r0, [r8]
 8008c54:	e7cd      	b.n	8008bf2 <_scanf_float+0x3a2>
 8008c56:	4630      	mov	r0, r6
 8008c58:	4639      	mov	r1, r7
 8008c5a:	f7fd f89d 	bl	8005d98 <__aeabi_d2f>
 8008c5e:	e7f7      	b.n	8008c50 <_scanf_float+0x400>
 8008c60:	2500      	movs	r5, #0
 8008c62:	e638      	b.n	80088d6 <_scanf_float+0x86>
 8008c64:	0801d310 	.word	0x0801d310
 8008c68:	0801d718 	.word	0x0801d718

08008c6c <nanf>:
 8008c6c:	4800      	ldr	r0, [pc, #0]	; (8008c70 <nanf+0x4>)
 8008c6e:	4770      	bx	lr
 8008c70:	7fc00000 	.word	0x7fc00000

08008c74 <siprintf>:
 8008c74:	b40e      	push	{r1, r2, r3}
 8008c76:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c7a:	b500      	push	{lr}
 8008c7c:	b09c      	sub	sp, #112	; 0x70
 8008c7e:	ab1d      	add	r3, sp, #116	; 0x74
 8008c80:	9002      	str	r0, [sp, #8]
 8008c82:	9006      	str	r0, [sp, #24]
 8008c84:	9107      	str	r1, [sp, #28]
 8008c86:	9104      	str	r1, [sp, #16]
 8008c88:	4808      	ldr	r0, [pc, #32]	; (8008cac <siprintf+0x38>)
 8008c8a:	4909      	ldr	r1, [pc, #36]	; (8008cb0 <siprintf+0x3c>)
 8008c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c90:	9105      	str	r1, [sp, #20]
 8008c92:	6800      	ldr	r0, [r0, #0]
 8008c94:	a902      	add	r1, sp, #8
 8008c96:	9301      	str	r3, [sp, #4]
 8008c98:	f002 feb8 	bl	800ba0c <_svfiprintf_r>
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	9b02      	ldr	r3, [sp, #8]
 8008ca0:	701a      	strb	r2, [r3, #0]
 8008ca2:	b01c      	add	sp, #112	; 0x70
 8008ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ca8:	b003      	add	sp, #12
 8008caa:	4770      	bx	lr
 8008cac:	20000010 	.word	0x20000010
 8008cb0:	ffff0208 	.word	0xffff0208

08008cb4 <sulp>:
 8008cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb8:	460f      	mov	r7, r1
 8008cba:	4690      	mov	r8, r2
 8008cbc:	f002 fc12 	bl	800b4e4 <__ulp>
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	460d      	mov	r5, r1
 8008cc4:	f1b8 0f00 	cmp.w	r8, #0
 8008cc8:	d011      	beq.n	8008cee <sulp+0x3a>
 8008cca:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008cce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	dd0b      	ble.n	8008cee <sulp+0x3a>
 8008cd6:	2400      	movs	r4, #0
 8008cd8:	051b      	lsls	r3, r3, #20
 8008cda:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008cde:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008ce2:	4622      	mov	r2, r4
 8008ce4:	462b      	mov	r3, r5
 8008ce6:	f7fc fd5f 	bl	80057a8 <__aeabi_dmul>
 8008cea:	4604      	mov	r4, r0
 8008cec:	460d      	mov	r5, r1
 8008cee:	4620      	mov	r0, r4
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008cf8 <_strtod_l>:
 8008cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cfc:	469b      	mov	fp, r3
 8008cfe:	2300      	movs	r3, #0
 8008d00:	b09f      	sub	sp, #124	; 0x7c
 8008d02:	931a      	str	r3, [sp, #104]	; 0x68
 8008d04:	4b9e      	ldr	r3, [pc, #632]	; (8008f80 <_strtod_l+0x288>)
 8008d06:	4682      	mov	sl, r0
 8008d08:	681f      	ldr	r7, [r3, #0]
 8008d0a:	460e      	mov	r6, r1
 8008d0c:	4638      	mov	r0, r7
 8008d0e:	9215      	str	r2, [sp, #84]	; 0x54
 8008d10:	f7fc fb86 	bl	8005420 <strlen>
 8008d14:	f04f 0800 	mov.w	r8, #0
 8008d18:	4604      	mov	r4, r0
 8008d1a:	f04f 0900 	mov.w	r9, #0
 8008d1e:	9619      	str	r6, [sp, #100]	; 0x64
 8008d20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d22:	781a      	ldrb	r2, [r3, #0]
 8008d24:	2a2b      	cmp	r2, #43	; 0x2b
 8008d26:	d04c      	beq.n	8008dc2 <_strtod_l+0xca>
 8008d28:	d83a      	bhi.n	8008da0 <_strtod_l+0xa8>
 8008d2a:	2a0d      	cmp	r2, #13
 8008d2c:	d833      	bhi.n	8008d96 <_strtod_l+0x9e>
 8008d2e:	2a08      	cmp	r2, #8
 8008d30:	d833      	bhi.n	8008d9a <_strtod_l+0xa2>
 8008d32:	2a00      	cmp	r2, #0
 8008d34:	d03d      	beq.n	8008db2 <_strtod_l+0xba>
 8008d36:	2300      	movs	r3, #0
 8008d38:	930a      	str	r3, [sp, #40]	; 0x28
 8008d3a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008d3c:	782b      	ldrb	r3, [r5, #0]
 8008d3e:	2b30      	cmp	r3, #48	; 0x30
 8008d40:	f040 80aa 	bne.w	8008e98 <_strtod_l+0x1a0>
 8008d44:	786b      	ldrb	r3, [r5, #1]
 8008d46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d4a:	2b58      	cmp	r3, #88	; 0x58
 8008d4c:	d166      	bne.n	8008e1c <_strtod_l+0x124>
 8008d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d50:	4650      	mov	r0, sl
 8008d52:	9301      	str	r3, [sp, #4]
 8008d54:	ab1a      	add	r3, sp, #104	; 0x68
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	4a8a      	ldr	r2, [pc, #552]	; (8008f84 <_strtod_l+0x28c>)
 8008d5a:	f8cd b008 	str.w	fp, [sp, #8]
 8008d5e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008d60:	a919      	add	r1, sp, #100	; 0x64
 8008d62:	f001 fd17 	bl	800a794 <__gethex>
 8008d66:	f010 0607 	ands.w	r6, r0, #7
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	d005      	beq.n	8008d7a <_strtod_l+0x82>
 8008d6e:	2e06      	cmp	r6, #6
 8008d70:	d129      	bne.n	8008dc6 <_strtod_l+0xce>
 8008d72:	2300      	movs	r3, #0
 8008d74:	3501      	adds	r5, #1
 8008d76:	9519      	str	r5, [sp, #100]	; 0x64
 8008d78:	930a      	str	r3, [sp, #40]	; 0x28
 8008d7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f040 858a 	bne.w	8009896 <_strtod_l+0xb9e>
 8008d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d84:	b1d3      	cbz	r3, 8008dbc <_strtod_l+0xc4>
 8008d86:	4642      	mov	r2, r8
 8008d88:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008d8c:	4610      	mov	r0, r2
 8008d8e:	4619      	mov	r1, r3
 8008d90:	b01f      	add	sp, #124	; 0x7c
 8008d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d96:	2a20      	cmp	r2, #32
 8008d98:	d1cd      	bne.n	8008d36 <_strtod_l+0x3e>
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	9319      	str	r3, [sp, #100]	; 0x64
 8008d9e:	e7bf      	b.n	8008d20 <_strtod_l+0x28>
 8008da0:	2a2d      	cmp	r2, #45	; 0x2d
 8008da2:	d1c8      	bne.n	8008d36 <_strtod_l+0x3e>
 8008da4:	2201      	movs	r2, #1
 8008da6:	920a      	str	r2, [sp, #40]	; 0x28
 8008da8:	1c5a      	adds	r2, r3, #1
 8008daa:	9219      	str	r2, [sp, #100]	; 0x64
 8008dac:	785b      	ldrb	r3, [r3, #1]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1c3      	bne.n	8008d3a <_strtod_l+0x42>
 8008db2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008db4:	9619      	str	r6, [sp, #100]	; 0x64
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f040 856b 	bne.w	8009892 <_strtod_l+0xb9a>
 8008dbc:	4642      	mov	r2, r8
 8008dbe:	464b      	mov	r3, r9
 8008dc0:	e7e4      	b.n	8008d8c <_strtod_l+0x94>
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	e7ef      	b.n	8008da6 <_strtod_l+0xae>
 8008dc6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008dc8:	b13a      	cbz	r2, 8008dda <_strtod_l+0xe2>
 8008dca:	2135      	movs	r1, #53	; 0x35
 8008dcc:	a81c      	add	r0, sp, #112	; 0x70
 8008dce:	f002 fc8d 	bl	800b6ec <__copybits>
 8008dd2:	4650      	mov	r0, sl
 8008dd4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008dd6:	f002 f855 	bl	800ae84 <_Bfree>
 8008dda:	3e01      	subs	r6, #1
 8008ddc:	2e04      	cmp	r6, #4
 8008dde:	d806      	bhi.n	8008dee <_strtod_l+0xf6>
 8008de0:	e8df f006 	tbb	[pc, r6]
 8008de4:	1714030a 	.word	0x1714030a
 8008de8:	0a          	.byte	0x0a
 8008de9:	00          	.byte	0x00
 8008dea:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008dee:	0721      	lsls	r1, r4, #28
 8008df0:	d5c3      	bpl.n	8008d7a <_strtod_l+0x82>
 8008df2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008df6:	e7c0      	b.n	8008d7a <_strtod_l+0x82>
 8008df8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008dfa:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008dfe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008e02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008e06:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008e0a:	e7f0      	b.n	8008dee <_strtod_l+0xf6>
 8008e0c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008f88 <_strtod_l+0x290>
 8008e10:	e7ed      	b.n	8008dee <_strtod_l+0xf6>
 8008e12:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008e16:	f04f 38ff 	mov.w	r8, #4294967295
 8008e1a:	e7e8      	b.n	8008dee <_strtod_l+0xf6>
 8008e1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e1e:	1c5a      	adds	r2, r3, #1
 8008e20:	9219      	str	r2, [sp, #100]	; 0x64
 8008e22:	785b      	ldrb	r3, [r3, #1]
 8008e24:	2b30      	cmp	r3, #48	; 0x30
 8008e26:	d0f9      	beq.n	8008e1c <_strtod_l+0x124>
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d0a6      	beq.n	8008d7a <_strtod_l+0x82>
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	9307      	str	r3, [sp, #28]
 8008e30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e32:	220a      	movs	r2, #10
 8008e34:	9308      	str	r3, [sp, #32]
 8008e36:	2300      	movs	r3, #0
 8008e38:	469b      	mov	fp, r3
 8008e3a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008e3e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008e40:	7805      	ldrb	r5, [r0, #0]
 8008e42:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008e46:	b2d9      	uxtb	r1, r3
 8008e48:	2909      	cmp	r1, #9
 8008e4a:	d927      	bls.n	8008e9c <_strtod_l+0x1a4>
 8008e4c:	4622      	mov	r2, r4
 8008e4e:	4639      	mov	r1, r7
 8008e50:	f002 fef2 	bl	800bc38 <strncmp>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	d033      	beq.n	8008ec0 <_strtod_l+0x1c8>
 8008e58:	2000      	movs	r0, #0
 8008e5a:	462a      	mov	r2, r5
 8008e5c:	465c      	mov	r4, fp
 8008e5e:	4603      	mov	r3, r0
 8008e60:	9004      	str	r0, [sp, #16]
 8008e62:	2a65      	cmp	r2, #101	; 0x65
 8008e64:	d001      	beq.n	8008e6a <_strtod_l+0x172>
 8008e66:	2a45      	cmp	r2, #69	; 0x45
 8008e68:	d114      	bne.n	8008e94 <_strtod_l+0x19c>
 8008e6a:	b91c      	cbnz	r4, 8008e74 <_strtod_l+0x17c>
 8008e6c:	9a07      	ldr	r2, [sp, #28]
 8008e6e:	4302      	orrs	r2, r0
 8008e70:	d09f      	beq.n	8008db2 <_strtod_l+0xba>
 8008e72:	2400      	movs	r4, #0
 8008e74:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008e76:	1c72      	adds	r2, r6, #1
 8008e78:	9219      	str	r2, [sp, #100]	; 0x64
 8008e7a:	7872      	ldrb	r2, [r6, #1]
 8008e7c:	2a2b      	cmp	r2, #43	; 0x2b
 8008e7e:	d079      	beq.n	8008f74 <_strtod_l+0x27c>
 8008e80:	2a2d      	cmp	r2, #45	; 0x2d
 8008e82:	f000 8083 	beq.w	8008f8c <_strtod_l+0x294>
 8008e86:	2700      	movs	r7, #0
 8008e88:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008e8c:	2909      	cmp	r1, #9
 8008e8e:	f240 8083 	bls.w	8008f98 <_strtod_l+0x2a0>
 8008e92:	9619      	str	r6, [sp, #100]	; 0x64
 8008e94:	2500      	movs	r5, #0
 8008e96:	e09f      	b.n	8008fd8 <_strtod_l+0x2e0>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	e7c8      	b.n	8008e2e <_strtod_l+0x136>
 8008e9c:	f1bb 0f08 	cmp.w	fp, #8
 8008ea0:	bfd5      	itete	le
 8008ea2:	9906      	ldrle	r1, [sp, #24]
 8008ea4:	9905      	ldrgt	r1, [sp, #20]
 8008ea6:	fb02 3301 	mlale	r3, r2, r1, r3
 8008eaa:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008eae:	f100 0001 	add.w	r0, r0, #1
 8008eb2:	bfd4      	ite	le
 8008eb4:	9306      	strle	r3, [sp, #24]
 8008eb6:	9305      	strgt	r3, [sp, #20]
 8008eb8:	f10b 0b01 	add.w	fp, fp, #1
 8008ebc:	9019      	str	r0, [sp, #100]	; 0x64
 8008ebe:	e7be      	b.n	8008e3e <_strtod_l+0x146>
 8008ec0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ec2:	191a      	adds	r2, r3, r4
 8008ec4:	9219      	str	r2, [sp, #100]	; 0x64
 8008ec6:	5d1a      	ldrb	r2, [r3, r4]
 8008ec8:	f1bb 0f00 	cmp.w	fp, #0
 8008ecc:	d036      	beq.n	8008f3c <_strtod_l+0x244>
 8008ece:	465c      	mov	r4, fp
 8008ed0:	9004      	str	r0, [sp, #16]
 8008ed2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008ed6:	2b09      	cmp	r3, #9
 8008ed8:	d912      	bls.n	8008f00 <_strtod_l+0x208>
 8008eda:	2301      	movs	r3, #1
 8008edc:	e7c1      	b.n	8008e62 <_strtod_l+0x16a>
 8008ede:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	1c5a      	adds	r2, r3, #1
 8008ee4:	9219      	str	r2, [sp, #100]	; 0x64
 8008ee6:	785a      	ldrb	r2, [r3, #1]
 8008ee8:	2a30      	cmp	r2, #48	; 0x30
 8008eea:	d0f8      	beq.n	8008ede <_strtod_l+0x1e6>
 8008eec:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008ef0:	2b08      	cmp	r3, #8
 8008ef2:	f200 84d5 	bhi.w	80098a0 <_strtod_l+0xba8>
 8008ef6:	9004      	str	r0, [sp, #16]
 8008ef8:	2000      	movs	r0, #0
 8008efa:	4604      	mov	r4, r0
 8008efc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008efe:	9308      	str	r3, [sp, #32]
 8008f00:	3a30      	subs	r2, #48	; 0x30
 8008f02:	f100 0301 	add.w	r3, r0, #1
 8008f06:	d013      	beq.n	8008f30 <_strtod_l+0x238>
 8008f08:	9904      	ldr	r1, [sp, #16]
 8008f0a:	1905      	adds	r5, r0, r4
 8008f0c:	4419      	add	r1, r3
 8008f0e:	9104      	str	r1, [sp, #16]
 8008f10:	4623      	mov	r3, r4
 8008f12:	210a      	movs	r1, #10
 8008f14:	42ab      	cmp	r3, r5
 8008f16:	d113      	bne.n	8008f40 <_strtod_l+0x248>
 8008f18:	1823      	adds	r3, r4, r0
 8008f1a:	2b08      	cmp	r3, #8
 8008f1c:	f104 0401 	add.w	r4, r4, #1
 8008f20:	4404      	add	r4, r0
 8008f22:	dc1b      	bgt.n	8008f5c <_strtod_l+0x264>
 8008f24:	230a      	movs	r3, #10
 8008f26:	9906      	ldr	r1, [sp, #24]
 8008f28:	fb03 2301 	mla	r3, r3, r1, r2
 8008f2c:	9306      	str	r3, [sp, #24]
 8008f2e:	2300      	movs	r3, #0
 8008f30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f32:	4618      	mov	r0, r3
 8008f34:	1c51      	adds	r1, r2, #1
 8008f36:	9119      	str	r1, [sp, #100]	; 0x64
 8008f38:	7852      	ldrb	r2, [r2, #1]
 8008f3a:	e7ca      	b.n	8008ed2 <_strtod_l+0x1da>
 8008f3c:	4658      	mov	r0, fp
 8008f3e:	e7d3      	b.n	8008ee8 <_strtod_l+0x1f0>
 8008f40:	2b08      	cmp	r3, #8
 8008f42:	dc04      	bgt.n	8008f4e <_strtod_l+0x256>
 8008f44:	9f06      	ldr	r7, [sp, #24]
 8008f46:	434f      	muls	r7, r1
 8008f48:	9706      	str	r7, [sp, #24]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	e7e2      	b.n	8008f14 <_strtod_l+0x21c>
 8008f4e:	1c5f      	adds	r7, r3, #1
 8008f50:	2f10      	cmp	r7, #16
 8008f52:	bfde      	ittt	le
 8008f54:	9f05      	ldrle	r7, [sp, #20]
 8008f56:	434f      	mulle	r7, r1
 8008f58:	9705      	strle	r7, [sp, #20]
 8008f5a:	e7f6      	b.n	8008f4a <_strtod_l+0x252>
 8008f5c:	2c10      	cmp	r4, #16
 8008f5e:	bfdf      	itttt	le
 8008f60:	230a      	movle	r3, #10
 8008f62:	9905      	ldrle	r1, [sp, #20]
 8008f64:	fb03 2301 	mlale	r3, r3, r1, r2
 8008f68:	9305      	strle	r3, [sp, #20]
 8008f6a:	e7e0      	b.n	8008f2e <_strtod_l+0x236>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	9304      	str	r3, [sp, #16]
 8008f70:	2301      	movs	r3, #1
 8008f72:	e77b      	b.n	8008e6c <_strtod_l+0x174>
 8008f74:	2700      	movs	r7, #0
 8008f76:	1cb2      	adds	r2, r6, #2
 8008f78:	9219      	str	r2, [sp, #100]	; 0x64
 8008f7a:	78b2      	ldrb	r2, [r6, #2]
 8008f7c:	e784      	b.n	8008e88 <_strtod_l+0x190>
 8008f7e:	bf00      	nop
 8008f80:	0801d560 	.word	0x0801d560
 8008f84:	0801d318 	.word	0x0801d318
 8008f88:	7ff00000 	.word	0x7ff00000
 8008f8c:	2701      	movs	r7, #1
 8008f8e:	e7f2      	b.n	8008f76 <_strtod_l+0x27e>
 8008f90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f92:	1c51      	adds	r1, r2, #1
 8008f94:	9119      	str	r1, [sp, #100]	; 0x64
 8008f96:	7852      	ldrb	r2, [r2, #1]
 8008f98:	2a30      	cmp	r2, #48	; 0x30
 8008f9a:	d0f9      	beq.n	8008f90 <_strtod_l+0x298>
 8008f9c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008fa0:	2908      	cmp	r1, #8
 8008fa2:	f63f af77 	bhi.w	8008e94 <_strtod_l+0x19c>
 8008fa6:	f04f 0e0a 	mov.w	lr, #10
 8008faa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008fae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008fb0:	9209      	str	r2, [sp, #36]	; 0x24
 8008fb2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008fb4:	1c51      	adds	r1, r2, #1
 8008fb6:	9119      	str	r1, [sp, #100]	; 0x64
 8008fb8:	7852      	ldrb	r2, [r2, #1]
 8008fba:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008fbe:	2d09      	cmp	r5, #9
 8008fc0:	d935      	bls.n	800902e <_strtod_l+0x336>
 8008fc2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008fc4:	1b49      	subs	r1, r1, r5
 8008fc6:	2908      	cmp	r1, #8
 8008fc8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008fcc:	dc02      	bgt.n	8008fd4 <_strtod_l+0x2dc>
 8008fce:	4565      	cmp	r5, ip
 8008fd0:	bfa8      	it	ge
 8008fd2:	4665      	movge	r5, ip
 8008fd4:	b107      	cbz	r7, 8008fd8 <_strtod_l+0x2e0>
 8008fd6:	426d      	negs	r5, r5
 8008fd8:	2c00      	cmp	r4, #0
 8008fda:	d14c      	bne.n	8009076 <_strtod_l+0x37e>
 8008fdc:	9907      	ldr	r1, [sp, #28]
 8008fde:	4301      	orrs	r1, r0
 8008fe0:	f47f aecb 	bne.w	8008d7a <_strtod_l+0x82>
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f47f aee4 	bne.w	8008db2 <_strtod_l+0xba>
 8008fea:	2a69      	cmp	r2, #105	; 0x69
 8008fec:	d026      	beq.n	800903c <_strtod_l+0x344>
 8008fee:	dc23      	bgt.n	8009038 <_strtod_l+0x340>
 8008ff0:	2a49      	cmp	r2, #73	; 0x49
 8008ff2:	d023      	beq.n	800903c <_strtod_l+0x344>
 8008ff4:	2a4e      	cmp	r2, #78	; 0x4e
 8008ff6:	f47f aedc 	bne.w	8008db2 <_strtod_l+0xba>
 8008ffa:	499d      	ldr	r1, [pc, #628]	; (8009270 <_strtod_l+0x578>)
 8008ffc:	a819      	add	r0, sp, #100	; 0x64
 8008ffe:	f001 fe17 	bl	800ac30 <__match>
 8009002:	2800      	cmp	r0, #0
 8009004:	f43f aed5 	beq.w	8008db2 <_strtod_l+0xba>
 8009008:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	2b28      	cmp	r3, #40	; 0x28
 800900e:	d12c      	bne.n	800906a <_strtod_l+0x372>
 8009010:	4998      	ldr	r1, [pc, #608]	; (8009274 <_strtod_l+0x57c>)
 8009012:	aa1c      	add	r2, sp, #112	; 0x70
 8009014:	a819      	add	r0, sp, #100	; 0x64
 8009016:	f001 fe1f 	bl	800ac58 <__hexnan>
 800901a:	2805      	cmp	r0, #5
 800901c:	d125      	bne.n	800906a <_strtod_l+0x372>
 800901e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009020:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009024:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009028:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800902c:	e6a5      	b.n	8008d7a <_strtod_l+0x82>
 800902e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8009032:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009036:	e7bc      	b.n	8008fb2 <_strtod_l+0x2ba>
 8009038:	2a6e      	cmp	r2, #110	; 0x6e
 800903a:	e7dc      	b.n	8008ff6 <_strtod_l+0x2fe>
 800903c:	498e      	ldr	r1, [pc, #568]	; (8009278 <_strtod_l+0x580>)
 800903e:	a819      	add	r0, sp, #100	; 0x64
 8009040:	f001 fdf6 	bl	800ac30 <__match>
 8009044:	2800      	cmp	r0, #0
 8009046:	f43f aeb4 	beq.w	8008db2 <_strtod_l+0xba>
 800904a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800904c:	498b      	ldr	r1, [pc, #556]	; (800927c <_strtod_l+0x584>)
 800904e:	3b01      	subs	r3, #1
 8009050:	a819      	add	r0, sp, #100	; 0x64
 8009052:	9319      	str	r3, [sp, #100]	; 0x64
 8009054:	f001 fdec 	bl	800ac30 <__match>
 8009058:	b910      	cbnz	r0, 8009060 <_strtod_l+0x368>
 800905a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800905c:	3301      	adds	r3, #1
 800905e:	9319      	str	r3, [sp, #100]	; 0x64
 8009060:	f04f 0800 	mov.w	r8, #0
 8009064:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009280 <_strtod_l+0x588>
 8009068:	e687      	b.n	8008d7a <_strtod_l+0x82>
 800906a:	4886      	ldr	r0, [pc, #536]	; (8009284 <_strtod_l+0x58c>)
 800906c:	f002 fdce 	bl	800bc0c <nan>
 8009070:	4680      	mov	r8, r0
 8009072:	4689      	mov	r9, r1
 8009074:	e681      	b.n	8008d7a <_strtod_l+0x82>
 8009076:	9b04      	ldr	r3, [sp, #16]
 8009078:	f1bb 0f00 	cmp.w	fp, #0
 800907c:	bf08      	it	eq
 800907e:	46a3      	moveq	fp, r4
 8009080:	1aeb      	subs	r3, r5, r3
 8009082:	2c10      	cmp	r4, #16
 8009084:	9806      	ldr	r0, [sp, #24]
 8009086:	4626      	mov	r6, r4
 8009088:	9307      	str	r3, [sp, #28]
 800908a:	bfa8      	it	ge
 800908c:	2610      	movge	r6, #16
 800908e:	f7fc fb11 	bl	80056b4 <__aeabi_ui2d>
 8009092:	2c09      	cmp	r4, #9
 8009094:	4680      	mov	r8, r0
 8009096:	4689      	mov	r9, r1
 8009098:	dd13      	ble.n	80090c2 <_strtod_l+0x3ca>
 800909a:	4b7b      	ldr	r3, [pc, #492]	; (8009288 <_strtod_l+0x590>)
 800909c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80090a0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80090a4:	f7fc fb80 	bl	80057a8 <__aeabi_dmul>
 80090a8:	4680      	mov	r8, r0
 80090aa:	9805      	ldr	r0, [sp, #20]
 80090ac:	4689      	mov	r9, r1
 80090ae:	f7fc fb01 	bl	80056b4 <__aeabi_ui2d>
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	4640      	mov	r0, r8
 80090b8:	4649      	mov	r1, r9
 80090ba:	f7fc f9bf 	bl	800543c <__adddf3>
 80090be:	4680      	mov	r8, r0
 80090c0:	4689      	mov	r9, r1
 80090c2:	2c0f      	cmp	r4, #15
 80090c4:	dc36      	bgt.n	8009134 <_strtod_l+0x43c>
 80090c6:	9b07      	ldr	r3, [sp, #28]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f43f ae56 	beq.w	8008d7a <_strtod_l+0x82>
 80090ce:	dd22      	ble.n	8009116 <_strtod_l+0x41e>
 80090d0:	2b16      	cmp	r3, #22
 80090d2:	dc09      	bgt.n	80090e8 <_strtod_l+0x3f0>
 80090d4:	496c      	ldr	r1, [pc, #432]	; (8009288 <_strtod_l+0x590>)
 80090d6:	4642      	mov	r2, r8
 80090d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090dc:	464b      	mov	r3, r9
 80090de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090e2:	f7fc fb61 	bl	80057a8 <__aeabi_dmul>
 80090e6:	e7c3      	b.n	8009070 <_strtod_l+0x378>
 80090e8:	9a07      	ldr	r2, [sp, #28]
 80090ea:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80090ee:	4293      	cmp	r3, r2
 80090f0:	db20      	blt.n	8009134 <_strtod_l+0x43c>
 80090f2:	4d65      	ldr	r5, [pc, #404]	; (8009288 <_strtod_l+0x590>)
 80090f4:	f1c4 040f 	rsb	r4, r4, #15
 80090f8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80090fc:	4642      	mov	r2, r8
 80090fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009102:	464b      	mov	r3, r9
 8009104:	f7fc fb50 	bl	80057a8 <__aeabi_dmul>
 8009108:	9b07      	ldr	r3, [sp, #28]
 800910a:	1b1c      	subs	r4, r3, r4
 800910c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009110:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009114:	e7e5      	b.n	80090e2 <_strtod_l+0x3ea>
 8009116:	9b07      	ldr	r3, [sp, #28]
 8009118:	3316      	adds	r3, #22
 800911a:	db0b      	blt.n	8009134 <_strtod_l+0x43c>
 800911c:	9b04      	ldr	r3, [sp, #16]
 800911e:	4640      	mov	r0, r8
 8009120:	1b5d      	subs	r5, r3, r5
 8009122:	4b59      	ldr	r3, [pc, #356]	; (8009288 <_strtod_l+0x590>)
 8009124:	4649      	mov	r1, r9
 8009126:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800912a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800912e:	f7fc fc65 	bl	80059fc <__aeabi_ddiv>
 8009132:	e79d      	b.n	8009070 <_strtod_l+0x378>
 8009134:	9b07      	ldr	r3, [sp, #28]
 8009136:	1ba6      	subs	r6, r4, r6
 8009138:	441e      	add	r6, r3
 800913a:	2e00      	cmp	r6, #0
 800913c:	dd74      	ble.n	8009228 <_strtod_l+0x530>
 800913e:	f016 030f 	ands.w	r3, r6, #15
 8009142:	d00a      	beq.n	800915a <_strtod_l+0x462>
 8009144:	4950      	ldr	r1, [pc, #320]	; (8009288 <_strtod_l+0x590>)
 8009146:	4642      	mov	r2, r8
 8009148:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800914c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009150:	464b      	mov	r3, r9
 8009152:	f7fc fb29 	bl	80057a8 <__aeabi_dmul>
 8009156:	4680      	mov	r8, r0
 8009158:	4689      	mov	r9, r1
 800915a:	f036 060f 	bics.w	r6, r6, #15
 800915e:	d052      	beq.n	8009206 <_strtod_l+0x50e>
 8009160:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009164:	dd27      	ble.n	80091b6 <_strtod_l+0x4be>
 8009166:	f04f 0b00 	mov.w	fp, #0
 800916a:	f8cd b010 	str.w	fp, [sp, #16]
 800916e:	f8cd b020 	str.w	fp, [sp, #32]
 8009172:	f8cd b018 	str.w	fp, [sp, #24]
 8009176:	2322      	movs	r3, #34	; 0x22
 8009178:	f04f 0800 	mov.w	r8, #0
 800917c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009280 <_strtod_l+0x588>
 8009180:	f8ca 3000 	str.w	r3, [sl]
 8009184:	9b08      	ldr	r3, [sp, #32]
 8009186:	2b00      	cmp	r3, #0
 8009188:	f43f adf7 	beq.w	8008d7a <_strtod_l+0x82>
 800918c:	4650      	mov	r0, sl
 800918e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009190:	f001 fe78 	bl	800ae84 <_Bfree>
 8009194:	4650      	mov	r0, sl
 8009196:	9906      	ldr	r1, [sp, #24]
 8009198:	f001 fe74 	bl	800ae84 <_Bfree>
 800919c:	4650      	mov	r0, sl
 800919e:	9904      	ldr	r1, [sp, #16]
 80091a0:	f001 fe70 	bl	800ae84 <_Bfree>
 80091a4:	4650      	mov	r0, sl
 80091a6:	9908      	ldr	r1, [sp, #32]
 80091a8:	f001 fe6c 	bl	800ae84 <_Bfree>
 80091ac:	4659      	mov	r1, fp
 80091ae:	4650      	mov	r0, sl
 80091b0:	f001 fe68 	bl	800ae84 <_Bfree>
 80091b4:	e5e1      	b.n	8008d7a <_strtod_l+0x82>
 80091b6:	4b35      	ldr	r3, [pc, #212]	; (800928c <_strtod_l+0x594>)
 80091b8:	4640      	mov	r0, r8
 80091ba:	9305      	str	r3, [sp, #20]
 80091bc:	2300      	movs	r3, #0
 80091be:	4649      	mov	r1, r9
 80091c0:	461f      	mov	r7, r3
 80091c2:	1136      	asrs	r6, r6, #4
 80091c4:	2e01      	cmp	r6, #1
 80091c6:	dc21      	bgt.n	800920c <_strtod_l+0x514>
 80091c8:	b10b      	cbz	r3, 80091ce <_strtod_l+0x4d6>
 80091ca:	4680      	mov	r8, r0
 80091cc:	4689      	mov	r9, r1
 80091ce:	4b2f      	ldr	r3, [pc, #188]	; (800928c <_strtod_l+0x594>)
 80091d0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80091d4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80091d8:	4642      	mov	r2, r8
 80091da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091de:	464b      	mov	r3, r9
 80091e0:	f7fc fae2 	bl	80057a8 <__aeabi_dmul>
 80091e4:	4b26      	ldr	r3, [pc, #152]	; (8009280 <_strtod_l+0x588>)
 80091e6:	460a      	mov	r2, r1
 80091e8:	400b      	ands	r3, r1
 80091ea:	4929      	ldr	r1, [pc, #164]	; (8009290 <_strtod_l+0x598>)
 80091ec:	4680      	mov	r8, r0
 80091ee:	428b      	cmp	r3, r1
 80091f0:	d8b9      	bhi.n	8009166 <_strtod_l+0x46e>
 80091f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80091f6:	428b      	cmp	r3, r1
 80091f8:	bf86      	itte	hi
 80091fa:	f04f 38ff 	movhi.w	r8, #4294967295
 80091fe:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009294 <_strtod_l+0x59c>
 8009202:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009206:	2300      	movs	r3, #0
 8009208:	9305      	str	r3, [sp, #20]
 800920a:	e07f      	b.n	800930c <_strtod_l+0x614>
 800920c:	07f2      	lsls	r2, r6, #31
 800920e:	d505      	bpl.n	800921c <_strtod_l+0x524>
 8009210:	9b05      	ldr	r3, [sp, #20]
 8009212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009216:	f7fc fac7 	bl	80057a8 <__aeabi_dmul>
 800921a:	2301      	movs	r3, #1
 800921c:	9a05      	ldr	r2, [sp, #20]
 800921e:	3701      	adds	r7, #1
 8009220:	3208      	adds	r2, #8
 8009222:	1076      	asrs	r6, r6, #1
 8009224:	9205      	str	r2, [sp, #20]
 8009226:	e7cd      	b.n	80091c4 <_strtod_l+0x4cc>
 8009228:	d0ed      	beq.n	8009206 <_strtod_l+0x50e>
 800922a:	4276      	negs	r6, r6
 800922c:	f016 020f 	ands.w	r2, r6, #15
 8009230:	d00a      	beq.n	8009248 <_strtod_l+0x550>
 8009232:	4b15      	ldr	r3, [pc, #84]	; (8009288 <_strtod_l+0x590>)
 8009234:	4640      	mov	r0, r8
 8009236:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800923a:	4649      	mov	r1, r9
 800923c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009240:	f7fc fbdc 	bl	80059fc <__aeabi_ddiv>
 8009244:	4680      	mov	r8, r0
 8009246:	4689      	mov	r9, r1
 8009248:	1136      	asrs	r6, r6, #4
 800924a:	d0dc      	beq.n	8009206 <_strtod_l+0x50e>
 800924c:	2e1f      	cmp	r6, #31
 800924e:	dd23      	ble.n	8009298 <_strtod_l+0x5a0>
 8009250:	f04f 0b00 	mov.w	fp, #0
 8009254:	f8cd b010 	str.w	fp, [sp, #16]
 8009258:	f8cd b020 	str.w	fp, [sp, #32]
 800925c:	f8cd b018 	str.w	fp, [sp, #24]
 8009260:	2322      	movs	r3, #34	; 0x22
 8009262:	f04f 0800 	mov.w	r8, #0
 8009266:	f04f 0900 	mov.w	r9, #0
 800926a:	f8ca 3000 	str.w	r3, [sl]
 800926e:	e789      	b.n	8009184 <_strtod_l+0x48c>
 8009270:	0801d2e9 	.word	0x0801d2e9
 8009274:	0801d32c 	.word	0x0801d32c
 8009278:	0801d2e1 	.word	0x0801d2e1
 800927c:	0801d46c 	.word	0x0801d46c
 8009280:	7ff00000 	.word	0x7ff00000
 8009284:	0801d718 	.word	0x0801d718
 8009288:	0801d5f8 	.word	0x0801d5f8
 800928c:	0801d5d0 	.word	0x0801d5d0
 8009290:	7ca00000 	.word	0x7ca00000
 8009294:	7fefffff 	.word	0x7fefffff
 8009298:	f016 0310 	ands.w	r3, r6, #16
 800929c:	bf18      	it	ne
 800929e:	236a      	movne	r3, #106	; 0x6a
 80092a0:	4640      	mov	r0, r8
 80092a2:	9305      	str	r3, [sp, #20]
 80092a4:	4649      	mov	r1, r9
 80092a6:	2300      	movs	r3, #0
 80092a8:	4fb0      	ldr	r7, [pc, #704]	; (800956c <_strtod_l+0x874>)
 80092aa:	07f2      	lsls	r2, r6, #31
 80092ac:	d504      	bpl.n	80092b8 <_strtod_l+0x5c0>
 80092ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092b2:	f7fc fa79 	bl	80057a8 <__aeabi_dmul>
 80092b6:	2301      	movs	r3, #1
 80092b8:	1076      	asrs	r6, r6, #1
 80092ba:	f107 0708 	add.w	r7, r7, #8
 80092be:	d1f4      	bne.n	80092aa <_strtod_l+0x5b2>
 80092c0:	b10b      	cbz	r3, 80092c6 <_strtod_l+0x5ce>
 80092c2:	4680      	mov	r8, r0
 80092c4:	4689      	mov	r9, r1
 80092c6:	9b05      	ldr	r3, [sp, #20]
 80092c8:	b1c3      	cbz	r3, 80092fc <_strtod_l+0x604>
 80092ca:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80092ce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	4649      	mov	r1, r9
 80092d6:	dd11      	ble.n	80092fc <_strtod_l+0x604>
 80092d8:	2b1f      	cmp	r3, #31
 80092da:	f340 8127 	ble.w	800952c <_strtod_l+0x834>
 80092de:	2b34      	cmp	r3, #52	; 0x34
 80092e0:	bfd8      	it	le
 80092e2:	f04f 33ff 	movle.w	r3, #4294967295
 80092e6:	f04f 0800 	mov.w	r8, #0
 80092ea:	bfcf      	iteee	gt
 80092ec:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80092f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80092f4:	fa03 f202 	lslle.w	r2, r3, r2
 80092f8:	ea02 0901 	andle.w	r9, r2, r1
 80092fc:	2200      	movs	r2, #0
 80092fe:	2300      	movs	r3, #0
 8009300:	4640      	mov	r0, r8
 8009302:	4649      	mov	r1, r9
 8009304:	f7fc fcb8 	bl	8005c78 <__aeabi_dcmpeq>
 8009308:	2800      	cmp	r0, #0
 800930a:	d1a1      	bne.n	8009250 <_strtod_l+0x558>
 800930c:	9b06      	ldr	r3, [sp, #24]
 800930e:	465a      	mov	r2, fp
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	4650      	mov	r0, sl
 8009314:	4623      	mov	r3, r4
 8009316:	9908      	ldr	r1, [sp, #32]
 8009318:	f001 fe1c 	bl	800af54 <__s2b>
 800931c:	9008      	str	r0, [sp, #32]
 800931e:	2800      	cmp	r0, #0
 8009320:	f43f af21 	beq.w	8009166 <_strtod_l+0x46e>
 8009324:	9b04      	ldr	r3, [sp, #16]
 8009326:	f04f 0b00 	mov.w	fp, #0
 800932a:	1b5d      	subs	r5, r3, r5
 800932c:	9b07      	ldr	r3, [sp, #28]
 800932e:	f8cd b010 	str.w	fp, [sp, #16]
 8009332:	2b00      	cmp	r3, #0
 8009334:	bfb4      	ite	lt
 8009336:	462b      	movlt	r3, r5
 8009338:	2300      	movge	r3, #0
 800933a:	930e      	str	r3, [sp, #56]	; 0x38
 800933c:	9b07      	ldr	r3, [sp, #28]
 800933e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009342:	9314      	str	r3, [sp, #80]	; 0x50
 8009344:	9b08      	ldr	r3, [sp, #32]
 8009346:	4650      	mov	r0, sl
 8009348:	6859      	ldr	r1, [r3, #4]
 800934a:	f001 fd5b 	bl	800ae04 <_Balloc>
 800934e:	9006      	str	r0, [sp, #24]
 8009350:	2800      	cmp	r0, #0
 8009352:	f43f af10 	beq.w	8009176 <_strtod_l+0x47e>
 8009356:	9b08      	ldr	r3, [sp, #32]
 8009358:	300c      	adds	r0, #12
 800935a:	691a      	ldr	r2, [r3, #16]
 800935c:	f103 010c 	add.w	r1, r3, #12
 8009360:	3202      	adds	r2, #2
 8009362:	0092      	lsls	r2, r2, #2
 8009364:	f001 fd40 	bl	800ade8 <memcpy>
 8009368:	ab1c      	add	r3, sp, #112	; 0x70
 800936a:	9301      	str	r3, [sp, #4]
 800936c:	ab1b      	add	r3, sp, #108	; 0x6c
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	4642      	mov	r2, r8
 8009372:	464b      	mov	r3, r9
 8009374:	4650      	mov	r0, sl
 8009376:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800937a:	f002 f92d 	bl	800b5d8 <__d2b>
 800937e:	901a      	str	r0, [sp, #104]	; 0x68
 8009380:	2800      	cmp	r0, #0
 8009382:	f43f aef8 	beq.w	8009176 <_strtod_l+0x47e>
 8009386:	2101      	movs	r1, #1
 8009388:	4650      	mov	r0, sl
 800938a:	f001 fe7b 	bl	800b084 <__i2b>
 800938e:	4603      	mov	r3, r0
 8009390:	9004      	str	r0, [sp, #16]
 8009392:	2800      	cmp	r0, #0
 8009394:	f43f aeef 	beq.w	8009176 <_strtod_l+0x47e>
 8009398:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800939a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800939c:	2d00      	cmp	r5, #0
 800939e:	bfab      	itete	ge
 80093a0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80093a2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80093a4:	18ee      	addge	r6, r5, r3
 80093a6:	1b5c      	sublt	r4, r3, r5
 80093a8:	9b05      	ldr	r3, [sp, #20]
 80093aa:	bfa8      	it	ge
 80093ac:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80093ae:	eba5 0503 	sub.w	r5, r5, r3
 80093b2:	4415      	add	r5, r2
 80093b4:	4b6e      	ldr	r3, [pc, #440]	; (8009570 <_strtod_l+0x878>)
 80093b6:	f105 35ff 	add.w	r5, r5, #4294967295
 80093ba:	bfb8      	it	lt
 80093bc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80093be:	429d      	cmp	r5, r3
 80093c0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80093c4:	f280 80c4 	bge.w	8009550 <_strtod_l+0x858>
 80093c8:	1b5b      	subs	r3, r3, r5
 80093ca:	2b1f      	cmp	r3, #31
 80093cc:	f04f 0701 	mov.w	r7, #1
 80093d0:	eba2 0203 	sub.w	r2, r2, r3
 80093d4:	f300 80b1 	bgt.w	800953a <_strtod_l+0x842>
 80093d8:	2500      	movs	r5, #0
 80093da:	fa07 f303 	lsl.w	r3, r7, r3
 80093de:	930f      	str	r3, [sp, #60]	; 0x3c
 80093e0:	18b7      	adds	r7, r6, r2
 80093e2:	9b05      	ldr	r3, [sp, #20]
 80093e4:	42be      	cmp	r6, r7
 80093e6:	4414      	add	r4, r2
 80093e8:	441c      	add	r4, r3
 80093ea:	4633      	mov	r3, r6
 80093ec:	bfa8      	it	ge
 80093ee:	463b      	movge	r3, r7
 80093f0:	42a3      	cmp	r3, r4
 80093f2:	bfa8      	it	ge
 80093f4:	4623      	movge	r3, r4
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	bfc2      	ittt	gt
 80093fa:	1aff      	subgt	r7, r7, r3
 80093fc:	1ae4      	subgt	r4, r4, r3
 80093fe:	1af6      	subgt	r6, r6, r3
 8009400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009402:	2b00      	cmp	r3, #0
 8009404:	dd17      	ble.n	8009436 <_strtod_l+0x73e>
 8009406:	461a      	mov	r2, r3
 8009408:	4650      	mov	r0, sl
 800940a:	9904      	ldr	r1, [sp, #16]
 800940c:	f001 fef8 	bl	800b200 <__pow5mult>
 8009410:	9004      	str	r0, [sp, #16]
 8009412:	2800      	cmp	r0, #0
 8009414:	f43f aeaf 	beq.w	8009176 <_strtod_l+0x47e>
 8009418:	4601      	mov	r1, r0
 800941a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800941c:	4650      	mov	r0, sl
 800941e:	f001 fe47 	bl	800b0b0 <__multiply>
 8009422:	9009      	str	r0, [sp, #36]	; 0x24
 8009424:	2800      	cmp	r0, #0
 8009426:	f43f aea6 	beq.w	8009176 <_strtod_l+0x47e>
 800942a:	4650      	mov	r0, sl
 800942c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800942e:	f001 fd29 	bl	800ae84 <_Bfree>
 8009432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009434:	931a      	str	r3, [sp, #104]	; 0x68
 8009436:	2f00      	cmp	r7, #0
 8009438:	f300 808e 	bgt.w	8009558 <_strtod_l+0x860>
 800943c:	9b07      	ldr	r3, [sp, #28]
 800943e:	2b00      	cmp	r3, #0
 8009440:	dd08      	ble.n	8009454 <_strtod_l+0x75c>
 8009442:	4650      	mov	r0, sl
 8009444:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009446:	9906      	ldr	r1, [sp, #24]
 8009448:	f001 feda 	bl	800b200 <__pow5mult>
 800944c:	9006      	str	r0, [sp, #24]
 800944e:	2800      	cmp	r0, #0
 8009450:	f43f ae91 	beq.w	8009176 <_strtod_l+0x47e>
 8009454:	2c00      	cmp	r4, #0
 8009456:	dd08      	ble.n	800946a <_strtod_l+0x772>
 8009458:	4622      	mov	r2, r4
 800945a:	4650      	mov	r0, sl
 800945c:	9906      	ldr	r1, [sp, #24]
 800945e:	f001 ff29 	bl	800b2b4 <__lshift>
 8009462:	9006      	str	r0, [sp, #24]
 8009464:	2800      	cmp	r0, #0
 8009466:	f43f ae86 	beq.w	8009176 <_strtod_l+0x47e>
 800946a:	2e00      	cmp	r6, #0
 800946c:	dd08      	ble.n	8009480 <_strtod_l+0x788>
 800946e:	4632      	mov	r2, r6
 8009470:	4650      	mov	r0, sl
 8009472:	9904      	ldr	r1, [sp, #16]
 8009474:	f001 ff1e 	bl	800b2b4 <__lshift>
 8009478:	9004      	str	r0, [sp, #16]
 800947a:	2800      	cmp	r0, #0
 800947c:	f43f ae7b 	beq.w	8009176 <_strtod_l+0x47e>
 8009480:	4650      	mov	r0, sl
 8009482:	9a06      	ldr	r2, [sp, #24]
 8009484:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009486:	f001 ffa1 	bl	800b3cc <__mdiff>
 800948a:	4683      	mov	fp, r0
 800948c:	2800      	cmp	r0, #0
 800948e:	f43f ae72 	beq.w	8009176 <_strtod_l+0x47e>
 8009492:	2400      	movs	r4, #0
 8009494:	68c3      	ldr	r3, [r0, #12]
 8009496:	9904      	ldr	r1, [sp, #16]
 8009498:	60c4      	str	r4, [r0, #12]
 800949a:	930b      	str	r3, [sp, #44]	; 0x2c
 800949c:	f001 ff7a 	bl	800b394 <__mcmp>
 80094a0:	42a0      	cmp	r0, r4
 80094a2:	da6b      	bge.n	800957c <_strtod_l+0x884>
 80094a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094a6:	ea53 0308 	orrs.w	r3, r3, r8
 80094aa:	f040 8091 	bne.w	80095d0 <_strtod_l+0x8d8>
 80094ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f040 808c 	bne.w	80095d0 <_strtod_l+0x8d8>
 80094b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80094bc:	0d1b      	lsrs	r3, r3, #20
 80094be:	051b      	lsls	r3, r3, #20
 80094c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80094c4:	f240 8084 	bls.w	80095d0 <_strtod_l+0x8d8>
 80094c8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80094cc:	b91b      	cbnz	r3, 80094d6 <_strtod_l+0x7de>
 80094ce:	f8db 3010 	ldr.w	r3, [fp, #16]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	dd7c      	ble.n	80095d0 <_strtod_l+0x8d8>
 80094d6:	4659      	mov	r1, fp
 80094d8:	2201      	movs	r2, #1
 80094da:	4650      	mov	r0, sl
 80094dc:	f001 feea 	bl	800b2b4 <__lshift>
 80094e0:	9904      	ldr	r1, [sp, #16]
 80094e2:	4683      	mov	fp, r0
 80094e4:	f001 ff56 	bl	800b394 <__mcmp>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	dd71      	ble.n	80095d0 <_strtod_l+0x8d8>
 80094ec:	9905      	ldr	r1, [sp, #20]
 80094ee:	464b      	mov	r3, r9
 80094f0:	4a20      	ldr	r2, [pc, #128]	; (8009574 <_strtod_l+0x87c>)
 80094f2:	2900      	cmp	r1, #0
 80094f4:	f000 808c 	beq.w	8009610 <_strtod_l+0x918>
 80094f8:	ea02 0109 	and.w	r1, r2, r9
 80094fc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009500:	f300 8086 	bgt.w	8009610 <_strtod_l+0x918>
 8009504:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009508:	f77f aeaa 	ble.w	8009260 <_strtod_l+0x568>
 800950c:	4640      	mov	r0, r8
 800950e:	4649      	mov	r1, r9
 8009510:	4b19      	ldr	r3, [pc, #100]	; (8009578 <_strtod_l+0x880>)
 8009512:	2200      	movs	r2, #0
 8009514:	f7fc f948 	bl	80057a8 <__aeabi_dmul>
 8009518:	460b      	mov	r3, r1
 800951a:	4303      	orrs	r3, r0
 800951c:	bf08      	it	eq
 800951e:	2322      	moveq	r3, #34	; 0x22
 8009520:	4680      	mov	r8, r0
 8009522:	4689      	mov	r9, r1
 8009524:	bf08      	it	eq
 8009526:	f8ca 3000 	streq.w	r3, [sl]
 800952a:	e62f      	b.n	800918c <_strtod_l+0x494>
 800952c:	f04f 32ff 	mov.w	r2, #4294967295
 8009530:	fa02 f303 	lsl.w	r3, r2, r3
 8009534:	ea03 0808 	and.w	r8, r3, r8
 8009538:	e6e0      	b.n	80092fc <_strtod_l+0x604>
 800953a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800953e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009542:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009546:	35e2      	adds	r5, #226	; 0xe2
 8009548:	fa07 f505 	lsl.w	r5, r7, r5
 800954c:	970f      	str	r7, [sp, #60]	; 0x3c
 800954e:	e747      	b.n	80093e0 <_strtod_l+0x6e8>
 8009550:	2301      	movs	r3, #1
 8009552:	2500      	movs	r5, #0
 8009554:	930f      	str	r3, [sp, #60]	; 0x3c
 8009556:	e743      	b.n	80093e0 <_strtod_l+0x6e8>
 8009558:	463a      	mov	r2, r7
 800955a:	4650      	mov	r0, sl
 800955c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800955e:	f001 fea9 	bl	800b2b4 <__lshift>
 8009562:	901a      	str	r0, [sp, #104]	; 0x68
 8009564:	2800      	cmp	r0, #0
 8009566:	f47f af69 	bne.w	800943c <_strtod_l+0x744>
 800956a:	e604      	b.n	8009176 <_strtod_l+0x47e>
 800956c:	0801d340 	.word	0x0801d340
 8009570:	fffffc02 	.word	0xfffffc02
 8009574:	7ff00000 	.word	0x7ff00000
 8009578:	39500000 	.word	0x39500000
 800957c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009580:	d165      	bne.n	800964e <_strtod_l+0x956>
 8009582:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009584:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009588:	b35a      	cbz	r2, 80095e2 <_strtod_l+0x8ea>
 800958a:	4a99      	ldr	r2, [pc, #612]	; (80097f0 <_strtod_l+0xaf8>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d12b      	bne.n	80095e8 <_strtod_l+0x8f0>
 8009590:	9b05      	ldr	r3, [sp, #20]
 8009592:	4641      	mov	r1, r8
 8009594:	b303      	cbz	r3, 80095d8 <_strtod_l+0x8e0>
 8009596:	464a      	mov	r2, r9
 8009598:	4b96      	ldr	r3, [pc, #600]	; (80097f4 <_strtod_l+0xafc>)
 800959a:	4013      	ands	r3, r2
 800959c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80095a0:	f04f 32ff 	mov.w	r2, #4294967295
 80095a4:	d81b      	bhi.n	80095de <_strtod_l+0x8e6>
 80095a6:	0d1b      	lsrs	r3, r3, #20
 80095a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80095ac:	fa02 f303 	lsl.w	r3, r2, r3
 80095b0:	4299      	cmp	r1, r3
 80095b2:	d119      	bne.n	80095e8 <_strtod_l+0x8f0>
 80095b4:	4b90      	ldr	r3, [pc, #576]	; (80097f8 <_strtod_l+0xb00>)
 80095b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d102      	bne.n	80095c2 <_strtod_l+0x8ca>
 80095bc:	3101      	adds	r1, #1
 80095be:	f43f adda 	beq.w	8009176 <_strtod_l+0x47e>
 80095c2:	f04f 0800 	mov.w	r8, #0
 80095c6:	4b8b      	ldr	r3, [pc, #556]	; (80097f4 <_strtod_l+0xafc>)
 80095c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095ca:	401a      	ands	r2, r3
 80095cc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80095d0:	9b05      	ldr	r3, [sp, #20]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d19a      	bne.n	800950c <_strtod_l+0x814>
 80095d6:	e5d9      	b.n	800918c <_strtod_l+0x494>
 80095d8:	f04f 33ff 	mov.w	r3, #4294967295
 80095dc:	e7e8      	b.n	80095b0 <_strtod_l+0x8b8>
 80095de:	4613      	mov	r3, r2
 80095e0:	e7e6      	b.n	80095b0 <_strtod_l+0x8b8>
 80095e2:	ea53 0308 	orrs.w	r3, r3, r8
 80095e6:	d081      	beq.n	80094ec <_strtod_l+0x7f4>
 80095e8:	b1e5      	cbz	r5, 8009624 <_strtod_l+0x92c>
 80095ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ec:	421d      	tst	r5, r3
 80095ee:	d0ef      	beq.n	80095d0 <_strtod_l+0x8d8>
 80095f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095f2:	4640      	mov	r0, r8
 80095f4:	4649      	mov	r1, r9
 80095f6:	9a05      	ldr	r2, [sp, #20]
 80095f8:	b1c3      	cbz	r3, 800962c <_strtod_l+0x934>
 80095fa:	f7ff fb5b 	bl	8008cb4 <sulp>
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009606:	f7fb ff19 	bl	800543c <__adddf3>
 800960a:	4680      	mov	r8, r0
 800960c:	4689      	mov	r9, r1
 800960e:	e7df      	b.n	80095d0 <_strtod_l+0x8d8>
 8009610:	4013      	ands	r3, r2
 8009612:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009616:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800961a:	f04f 38ff 	mov.w	r8, #4294967295
 800961e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009622:	e7d5      	b.n	80095d0 <_strtod_l+0x8d8>
 8009624:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009626:	ea13 0f08 	tst.w	r3, r8
 800962a:	e7e0      	b.n	80095ee <_strtod_l+0x8f6>
 800962c:	f7ff fb42 	bl	8008cb4 <sulp>
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009638:	f7fb fefe 	bl	8005438 <__aeabi_dsub>
 800963c:	2200      	movs	r2, #0
 800963e:	2300      	movs	r3, #0
 8009640:	4680      	mov	r8, r0
 8009642:	4689      	mov	r9, r1
 8009644:	f7fc fb18 	bl	8005c78 <__aeabi_dcmpeq>
 8009648:	2800      	cmp	r0, #0
 800964a:	d0c1      	beq.n	80095d0 <_strtod_l+0x8d8>
 800964c:	e608      	b.n	8009260 <_strtod_l+0x568>
 800964e:	4658      	mov	r0, fp
 8009650:	9904      	ldr	r1, [sp, #16]
 8009652:	f002 f81d 	bl	800b690 <__ratio>
 8009656:	2200      	movs	r2, #0
 8009658:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800965c:	4606      	mov	r6, r0
 800965e:	460f      	mov	r7, r1
 8009660:	f7fc fb1e 	bl	8005ca0 <__aeabi_dcmple>
 8009664:	2800      	cmp	r0, #0
 8009666:	d070      	beq.n	800974a <_strtod_l+0xa52>
 8009668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800966a:	2b00      	cmp	r3, #0
 800966c:	d042      	beq.n	80096f4 <_strtod_l+0x9fc>
 800966e:	2600      	movs	r6, #0
 8009670:	4f62      	ldr	r7, [pc, #392]	; (80097fc <_strtod_l+0xb04>)
 8009672:	4d62      	ldr	r5, [pc, #392]	; (80097fc <_strtod_l+0xb04>)
 8009674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009676:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800967a:	0d1b      	lsrs	r3, r3, #20
 800967c:	051b      	lsls	r3, r3, #20
 800967e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009680:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009682:	4b5f      	ldr	r3, [pc, #380]	; (8009800 <_strtod_l+0xb08>)
 8009684:	429a      	cmp	r2, r3
 8009686:	f040 80c3 	bne.w	8009810 <_strtod_l+0xb18>
 800968a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800968c:	4640      	mov	r0, r8
 800968e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009692:	4649      	mov	r1, r9
 8009694:	f001 ff26 	bl	800b4e4 <__ulp>
 8009698:	4602      	mov	r2, r0
 800969a:	460b      	mov	r3, r1
 800969c:	4630      	mov	r0, r6
 800969e:	4639      	mov	r1, r7
 80096a0:	f7fc f882 	bl	80057a8 <__aeabi_dmul>
 80096a4:	4642      	mov	r2, r8
 80096a6:	464b      	mov	r3, r9
 80096a8:	f7fb fec8 	bl	800543c <__adddf3>
 80096ac:	460b      	mov	r3, r1
 80096ae:	4951      	ldr	r1, [pc, #324]	; (80097f4 <_strtod_l+0xafc>)
 80096b0:	4a54      	ldr	r2, [pc, #336]	; (8009804 <_strtod_l+0xb0c>)
 80096b2:	4019      	ands	r1, r3
 80096b4:	4291      	cmp	r1, r2
 80096b6:	4680      	mov	r8, r0
 80096b8:	d95d      	bls.n	8009776 <_strtod_l+0xa7e>
 80096ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096bc:	4b4e      	ldr	r3, [pc, #312]	; (80097f8 <_strtod_l+0xb00>)
 80096be:	429a      	cmp	r2, r3
 80096c0:	d103      	bne.n	80096ca <_strtod_l+0x9d2>
 80096c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096c4:	3301      	adds	r3, #1
 80096c6:	f43f ad56 	beq.w	8009176 <_strtod_l+0x47e>
 80096ca:	f04f 38ff 	mov.w	r8, #4294967295
 80096ce:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80097f8 <_strtod_l+0xb00>
 80096d2:	4650      	mov	r0, sl
 80096d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80096d6:	f001 fbd5 	bl	800ae84 <_Bfree>
 80096da:	4650      	mov	r0, sl
 80096dc:	9906      	ldr	r1, [sp, #24]
 80096de:	f001 fbd1 	bl	800ae84 <_Bfree>
 80096e2:	4650      	mov	r0, sl
 80096e4:	9904      	ldr	r1, [sp, #16]
 80096e6:	f001 fbcd 	bl	800ae84 <_Bfree>
 80096ea:	4659      	mov	r1, fp
 80096ec:	4650      	mov	r0, sl
 80096ee:	f001 fbc9 	bl	800ae84 <_Bfree>
 80096f2:	e627      	b.n	8009344 <_strtod_l+0x64c>
 80096f4:	f1b8 0f00 	cmp.w	r8, #0
 80096f8:	d119      	bne.n	800972e <_strtod_l+0xa36>
 80096fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009700:	b9e3      	cbnz	r3, 800973c <_strtod_l+0xa44>
 8009702:	2200      	movs	r2, #0
 8009704:	4630      	mov	r0, r6
 8009706:	4639      	mov	r1, r7
 8009708:	4b3c      	ldr	r3, [pc, #240]	; (80097fc <_strtod_l+0xb04>)
 800970a:	f7fc fabf 	bl	8005c8c <__aeabi_dcmplt>
 800970e:	b9c8      	cbnz	r0, 8009744 <_strtod_l+0xa4c>
 8009710:	2200      	movs	r2, #0
 8009712:	4630      	mov	r0, r6
 8009714:	4639      	mov	r1, r7
 8009716:	4b3c      	ldr	r3, [pc, #240]	; (8009808 <_strtod_l+0xb10>)
 8009718:	f7fc f846 	bl	80057a8 <__aeabi_dmul>
 800971c:	4604      	mov	r4, r0
 800971e:	460d      	mov	r5, r1
 8009720:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009724:	9416      	str	r4, [sp, #88]	; 0x58
 8009726:	9317      	str	r3, [sp, #92]	; 0x5c
 8009728:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800972c:	e7a2      	b.n	8009674 <_strtod_l+0x97c>
 800972e:	f1b8 0f01 	cmp.w	r8, #1
 8009732:	d103      	bne.n	800973c <_strtod_l+0xa44>
 8009734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009736:	2b00      	cmp	r3, #0
 8009738:	f43f ad92 	beq.w	8009260 <_strtod_l+0x568>
 800973c:	2600      	movs	r6, #0
 800973e:	2400      	movs	r4, #0
 8009740:	4f32      	ldr	r7, [pc, #200]	; (800980c <_strtod_l+0xb14>)
 8009742:	e796      	b.n	8009672 <_strtod_l+0x97a>
 8009744:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009746:	4d30      	ldr	r5, [pc, #192]	; (8009808 <_strtod_l+0xb10>)
 8009748:	e7ea      	b.n	8009720 <_strtod_l+0xa28>
 800974a:	4b2f      	ldr	r3, [pc, #188]	; (8009808 <_strtod_l+0xb10>)
 800974c:	2200      	movs	r2, #0
 800974e:	4630      	mov	r0, r6
 8009750:	4639      	mov	r1, r7
 8009752:	f7fc f829 	bl	80057a8 <__aeabi_dmul>
 8009756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009758:	4604      	mov	r4, r0
 800975a:	460d      	mov	r5, r1
 800975c:	b933      	cbnz	r3, 800976c <_strtod_l+0xa74>
 800975e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009762:	9010      	str	r0, [sp, #64]	; 0x40
 8009764:	9311      	str	r3, [sp, #68]	; 0x44
 8009766:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800976a:	e783      	b.n	8009674 <_strtod_l+0x97c>
 800976c:	4602      	mov	r2, r0
 800976e:	460b      	mov	r3, r1
 8009770:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009774:	e7f7      	b.n	8009766 <_strtod_l+0xa6e>
 8009776:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800977a:	9b05      	ldr	r3, [sp, #20]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1a8      	bne.n	80096d2 <_strtod_l+0x9da>
 8009780:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009784:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009786:	0d1b      	lsrs	r3, r3, #20
 8009788:	051b      	lsls	r3, r3, #20
 800978a:	429a      	cmp	r2, r3
 800978c:	d1a1      	bne.n	80096d2 <_strtod_l+0x9da>
 800978e:	4620      	mov	r0, r4
 8009790:	4629      	mov	r1, r5
 8009792:	f7fc fbc7 	bl	8005f24 <__aeabi_d2lz>
 8009796:	f7fb ffd9 	bl	800574c <__aeabi_l2d>
 800979a:	4602      	mov	r2, r0
 800979c:	460b      	mov	r3, r1
 800979e:	4620      	mov	r0, r4
 80097a0:	4629      	mov	r1, r5
 80097a2:	f7fb fe49 	bl	8005438 <__aeabi_dsub>
 80097a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097ac:	ea43 0308 	orr.w	r3, r3, r8
 80097b0:	4313      	orrs	r3, r2
 80097b2:	4604      	mov	r4, r0
 80097b4:	460d      	mov	r5, r1
 80097b6:	d066      	beq.n	8009886 <_strtod_l+0xb8e>
 80097b8:	a309      	add	r3, pc, #36	; (adr r3, 80097e0 <_strtod_l+0xae8>)
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	f7fc fa65 	bl	8005c8c <__aeabi_dcmplt>
 80097c2:	2800      	cmp	r0, #0
 80097c4:	f47f ace2 	bne.w	800918c <_strtod_l+0x494>
 80097c8:	a307      	add	r3, pc, #28	; (adr r3, 80097e8 <_strtod_l+0xaf0>)
 80097ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ce:	4620      	mov	r0, r4
 80097d0:	4629      	mov	r1, r5
 80097d2:	f7fc fa79 	bl	8005cc8 <__aeabi_dcmpgt>
 80097d6:	2800      	cmp	r0, #0
 80097d8:	f43f af7b 	beq.w	80096d2 <_strtod_l+0x9da>
 80097dc:	e4d6      	b.n	800918c <_strtod_l+0x494>
 80097de:	bf00      	nop
 80097e0:	94a03595 	.word	0x94a03595
 80097e4:	3fdfffff 	.word	0x3fdfffff
 80097e8:	35afe535 	.word	0x35afe535
 80097ec:	3fe00000 	.word	0x3fe00000
 80097f0:	000fffff 	.word	0x000fffff
 80097f4:	7ff00000 	.word	0x7ff00000
 80097f8:	7fefffff 	.word	0x7fefffff
 80097fc:	3ff00000 	.word	0x3ff00000
 8009800:	7fe00000 	.word	0x7fe00000
 8009804:	7c9fffff 	.word	0x7c9fffff
 8009808:	3fe00000 	.word	0x3fe00000
 800980c:	bff00000 	.word	0xbff00000
 8009810:	9b05      	ldr	r3, [sp, #20]
 8009812:	b313      	cbz	r3, 800985a <_strtod_l+0xb62>
 8009814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009816:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800981a:	d81e      	bhi.n	800985a <_strtod_l+0xb62>
 800981c:	a326      	add	r3, pc, #152	; (adr r3, 80098b8 <_strtod_l+0xbc0>)
 800981e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009822:	4620      	mov	r0, r4
 8009824:	4629      	mov	r1, r5
 8009826:	f7fc fa3b 	bl	8005ca0 <__aeabi_dcmple>
 800982a:	b190      	cbz	r0, 8009852 <_strtod_l+0xb5a>
 800982c:	4629      	mov	r1, r5
 800982e:	4620      	mov	r0, r4
 8009830:	f7fc fa92 	bl	8005d58 <__aeabi_d2uiz>
 8009834:	2801      	cmp	r0, #1
 8009836:	bf38      	it	cc
 8009838:	2001      	movcc	r0, #1
 800983a:	f7fb ff3b 	bl	80056b4 <__aeabi_ui2d>
 800983e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009840:	4604      	mov	r4, r0
 8009842:	460d      	mov	r5, r1
 8009844:	b9d3      	cbnz	r3, 800987c <_strtod_l+0xb84>
 8009846:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800984a:	9012      	str	r0, [sp, #72]	; 0x48
 800984c:	9313      	str	r3, [sp, #76]	; 0x4c
 800984e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009852:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009854:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009858:	1a9f      	subs	r7, r3, r2
 800985a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800985e:	f001 fe41 	bl	800b4e4 <__ulp>
 8009862:	4602      	mov	r2, r0
 8009864:	460b      	mov	r3, r1
 8009866:	4630      	mov	r0, r6
 8009868:	4639      	mov	r1, r7
 800986a:	f7fb ff9d 	bl	80057a8 <__aeabi_dmul>
 800986e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009872:	f7fb fde3 	bl	800543c <__adddf3>
 8009876:	4680      	mov	r8, r0
 8009878:	4689      	mov	r9, r1
 800987a:	e77e      	b.n	800977a <_strtod_l+0xa82>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009884:	e7e3      	b.n	800984e <_strtod_l+0xb56>
 8009886:	a30e      	add	r3, pc, #56	; (adr r3, 80098c0 <_strtod_l+0xbc8>)
 8009888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988c:	f7fc f9fe 	bl	8005c8c <__aeabi_dcmplt>
 8009890:	e7a1      	b.n	80097d6 <_strtod_l+0xade>
 8009892:	2300      	movs	r3, #0
 8009894:	930a      	str	r3, [sp, #40]	; 0x28
 8009896:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009898:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800989a:	6013      	str	r3, [r2, #0]
 800989c:	f7ff ba71 	b.w	8008d82 <_strtod_l+0x8a>
 80098a0:	2a65      	cmp	r2, #101	; 0x65
 80098a2:	f43f ab63 	beq.w	8008f6c <_strtod_l+0x274>
 80098a6:	2a45      	cmp	r2, #69	; 0x45
 80098a8:	f43f ab60 	beq.w	8008f6c <_strtod_l+0x274>
 80098ac:	2301      	movs	r3, #1
 80098ae:	f7ff bb95 	b.w	8008fdc <_strtod_l+0x2e4>
 80098b2:	bf00      	nop
 80098b4:	f3af 8000 	nop.w
 80098b8:	ffc00000 	.word	0xffc00000
 80098bc:	41dfffff 	.word	0x41dfffff
 80098c0:	94a03595 	.word	0x94a03595
 80098c4:	3fcfffff 	.word	0x3fcfffff

080098c8 <_strtod_r>:
 80098c8:	4b01      	ldr	r3, [pc, #4]	; (80098d0 <_strtod_r+0x8>)
 80098ca:	f7ff ba15 	b.w	8008cf8 <_strtod_l>
 80098ce:	bf00      	nop
 80098d0:	20000078 	.word	0x20000078

080098d4 <_strtol_l.constprop.0>:
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098da:	4680      	mov	r8, r0
 80098dc:	d001      	beq.n	80098e2 <_strtol_l.constprop.0+0xe>
 80098de:	2b24      	cmp	r3, #36	; 0x24
 80098e0:	d906      	bls.n	80098f0 <_strtol_l.constprop.0+0x1c>
 80098e2:	f7fe fb23 	bl	8007f2c <__errno>
 80098e6:	2316      	movs	r3, #22
 80098e8:	6003      	str	r3, [r0, #0]
 80098ea:	2000      	movs	r0, #0
 80098ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f0:	460d      	mov	r5, r1
 80098f2:	4f35      	ldr	r7, [pc, #212]	; (80099c8 <_strtol_l.constprop.0+0xf4>)
 80098f4:	4628      	mov	r0, r5
 80098f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098fa:	5de6      	ldrb	r6, [r4, r7]
 80098fc:	f016 0608 	ands.w	r6, r6, #8
 8009900:	d1f8      	bne.n	80098f4 <_strtol_l.constprop.0+0x20>
 8009902:	2c2d      	cmp	r4, #45	; 0x2d
 8009904:	d12f      	bne.n	8009966 <_strtol_l.constprop.0+0x92>
 8009906:	2601      	movs	r6, #1
 8009908:	782c      	ldrb	r4, [r5, #0]
 800990a:	1c85      	adds	r5, r0, #2
 800990c:	2b00      	cmp	r3, #0
 800990e:	d057      	beq.n	80099c0 <_strtol_l.constprop.0+0xec>
 8009910:	2b10      	cmp	r3, #16
 8009912:	d109      	bne.n	8009928 <_strtol_l.constprop.0+0x54>
 8009914:	2c30      	cmp	r4, #48	; 0x30
 8009916:	d107      	bne.n	8009928 <_strtol_l.constprop.0+0x54>
 8009918:	7828      	ldrb	r0, [r5, #0]
 800991a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800991e:	2858      	cmp	r0, #88	; 0x58
 8009920:	d149      	bne.n	80099b6 <_strtol_l.constprop.0+0xe2>
 8009922:	2310      	movs	r3, #16
 8009924:	786c      	ldrb	r4, [r5, #1]
 8009926:	3502      	adds	r5, #2
 8009928:	2700      	movs	r7, #0
 800992a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800992e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009932:	fbbe f9f3 	udiv	r9, lr, r3
 8009936:	4638      	mov	r0, r7
 8009938:	fb03 ea19 	mls	sl, r3, r9, lr
 800993c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009940:	f1bc 0f09 	cmp.w	ip, #9
 8009944:	d814      	bhi.n	8009970 <_strtol_l.constprop.0+0x9c>
 8009946:	4664      	mov	r4, ip
 8009948:	42a3      	cmp	r3, r4
 800994a:	dd22      	ble.n	8009992 <_strtol_l.constprop.0+0xbe>
 800994c:	2f00      	cmp	r7, #0
 800994e:	db1d      	blt.n	800998c <_strtol_l.constprop.0+0xb8>
 8009950:	4581      	cmp	r9, r0
 8009952:	d31b      	bcc.n	800998c <_strtol_l.constprop.0+0xb8>
 8009954:	d101      	bne.n	800995a <_strtol_l.constprop.0+0x86>
 8009956:	45a2      	cmp	sl, r4
 8009958:	db18      	blt.n	800998c <_strtol_l.constprop.0+0xb8>
 800995a:	2701      	movs	r7, #1
 800995c:	fb00 4003 	mla	r0, r0, r3, r4
 8009960:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009964:	e7ea      	b.n	800993c <_strtol_l.constprop.0+0x68>
 8009966:	2c2b      	cmp	r4, #43	; 0x2b
 8009968:	bf04      	itt	eq
 800996a:	782c      	ldrbeq	r4, [r5, #0]
 800996c:	1c85      	addeq	r5, r0, #2
 800996e:	e7cd      	b.n	800990c <_strtol_l.constprop.0+0x38>
 8009970:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009974:	f1bc 0f19 	cmp.w	ip, #25
 8009978:	d801      	bhi.n	800997e <_strtol_l.constprop.0+0xaa>
 800997a:	3c37      	subs	r4, #55	; 0x37
 800997c:	e7e4      	b.n	8009948 <_strtol_l.constprop.0+0x74>
 800997e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009982:	f1bc 0f19 	cmp.w	ip, #25
 8009986:	d804      	bhi.n	8009992 <_strtol_l.constprop.0+0xbe>
 8009988:	3c57      	subs	r4, #87	; 0x57
 800998a:	e7dd      	b.n	8009948 <_strtol_l.constprop.0+0x74>
 800998c:	f04f 37ff 	mov.w	r7, #4294967295
 8009990:	e7e6      	b.n	8009960 <_strtol_l.constprop.0+0x8c>
 8009992:	2f00      	cmp	r7, #0
 8009994:	da07      	bge.n	80099a6 <_strtol_l.constprop.0+0xd2>
 8009996:	2322      	movs	r3, #34	; 0x22
 8009998:	4670      	mov	r0, lr
 800999a:	f8c8 3000 	str.w	r3, [r8]
 800999e:	2a00      	cmp	r2, #0
 80099a0:	d0a4      	beq.n	80098ec <_strtol_l.constprop.0+0x18>
 80099a2:	1e69      	subs	r1, r5, #1
 80099a4:	e005      	b.n	80099b2 <_strtol_l.constprop.0+0xde>
 80099a6:	b106      	cbz	r6, 80099aa <_strtol_l.constprop.0+0xd6>
 80099a8:	4240      	negs	r0, r0
 80099aa:	2a00      	cmp	r2, #0
 80099ac:	d09e      	beq.n	80098ec <_strtol_l.constprop.0+0x18>
 80099ae:	2f00      	cmp	r7, #0
 80099b0:	d1f7      	bne.n	80099a2 <_strtol_l.constprop.0+0xce>
 80099b2:	6011      	str	r1, [r2, #0]
 80099b4:	e79a      	b.n	80098ec <_strtol_l.constprop.0+0x18>
 80099b6:	2430      	movs	r4, #48	; 0x30
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d1b5      	bne.n	8009928 <_strtol_l.constprop.0+0x54>
 80099bc:	2308      	movs	r3, #8
 80099be:	e7b3      	b.n	8009928 <_strtol_l.constprop.0+0x54>
 80099c0:	2c30      	cmp	r4, #48	; 0x30
 80099c2:	d0a9      	beq.n	8009918 <_strtol_l.constprop.0+0x44>
 80099c4:	230a      	movs	r3, #10
 80099c6:	e7af      	b.n	8009928 <_strtol_l.constprop.0+0x54>
 80099c8:	0801d369 	.word	0x0801d369

080099cc <_strtol_r>:
 80099cc:	f7ff bf82 	b.w	80098d4 <_strtol_l.constprop.0>

080099d0 <quorem>:
 80099d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d4:	6903      	ldr	r3, [r0, #16]
 80099d6:	690c      	ldr	r4, [r1, #16]
 80099d8:	4607      	mov	r7, r0
 80099da:	42a3      	cmp	r3, r4
 80099dc:	f2c0 8082 	blt.w	8009ae4 <quorem+0x114>
 80099e0:	3c01      	subs	r4, #1
 80099e2:	f100 0514 	add.w	r5, r0, #20
 80099e6:	f101 0814 	add.w	r8, r1, #20
 80099ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099ee:	9301      	str	r3, [sp, #4]
 80099f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80099f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099f8:	3301      	adds	r3, #1
 80099fa:	429a      	cmp	r2, r3
 80099fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009a04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a08:	d331      	bcc.n	8009a6e <quorem+0x9e>
 8009a0a:	f04f 0e00 	mov.w	lr, #0
 8009a0e:	4640      	mov	r0, r8
 8009a10:	46ac      	mov	ip, r5
 8009a12:	46f2      	mov	sl, lr
 8009a14:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a18:	b293      	uxth	r3, r2
 8009a1a:	fb06 e303 	mla	r3, r6, r3, lr
 8009a1e:	0c12      	lsrs	r2, r2, #16
 8009a20:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	fb06 e202 	mla	r2, r6, r2, lr
 8009a2a:	ebaa 0303 	sub.w	r3, sl, r3
 8009a2e:	f8dc a000 	ldr.w	sl, [ip]
 8009a32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a36:	fa1f fa8a 	uxth.w	sl, sl
 8009a3a:	4453      	add	r3, sl
 8009a3c:	f8dc a000 	ldr.w	sl, [ip]
 8009a40:	b292      	uxth	r2, r2
 8009a42:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009a46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a50:	4581      	cmp	r9, r0
 8009a52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009a56:	f84c 3b04 	str.w	r3, [ip], #4
 8009a5a:	d2db      	bcs.n	8009a14 <quorem+0x44>
 8009a5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009a60:	b92b      	cbnz	r3, 8009a6e <quorem+0x9e>
 8009a62:	9b01      	ldr	r3, [sp, #4]
 8009a64:	3b04      	subs	r3, #4
 8009a66:	429d      	cmp	r5, r3
 8009a68:	461a      	mov	r2, r3
 8009a6a:	d32f      	bcc.n	8009acc <quorem+0xfc>
 8009a6c:	613c      	str	r4, [r7, #16]
 8009a6e:	4638      	mov	r0, r7
 8009a70:	f001 fc90 	bl	800b394 <__mcmp>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	db25      	blt.n	8009ac4 <quorem+0xf4>
 8009a78:	4628      	mov	r0, r5
 8009a7a:	f04f 0c00 	mov.w	ip, #0
 8009a7e:	3601      	adds	r6, #1
 8009a80:	f858 1b04 	ldr.w	r1, [r8], #4
 8009a84:	f8d0 e000 	ldr.w	lr, [r0]
 8009a88:	b28b      	uxth	r3, r1
 8009a8a:	ebac 0303 	sub.w	r3, ip, r3
 8009a8e:	fa1f f28e 	uxth.w	r2, lr
 8009a92:	4413      	add	r3, r2
 8009a94:	0c0a      	lsrs	r2, r1, #16
 8009a96:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009a9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009aa4:	45c1      	cmp	r9, r8
 8009aa6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009aaa:	f840 3b04 	str.w	r3, [r0], #4
 8009aae:	d2e7      	bcs.n	8009a80 <quorem+0xb0>
 8009ab0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ab4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ab8:	b922      	cbnz	r2, 8009ac4 <quorem+0xf4>
 8009aba:	3b04      	subs	r3, #4
 8009abc:	429d      	cmp	r5, r3
 8009abe:	461a      	mov	r2, r3
 8009ac0:	d30a      	bcc.n	8009ad8 <quorem+0x108>
 8009ac2:	613c      	str	r4, [r7, #16]
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	b003      	add	sp, #12
 8009ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009acc:	6812      	ldr	r2, [r2, #0]
 8009ace:	3b04      	subs	r3, #4
 8009ad0:	2a00      	cmp	r2, #0
 8009ad2:	d1cb      	bne.n	8009a6c <quorem+0x9c>
 8009ad4:	3c01      	subs	r4, #1
 8009ad6:	e7c6      	b.n	8009a66 <quorem+0x96>
 8009ad8:	6812      	ldr	r2, [r2, #0]
 8009ada:	3b04      	subs	r3, #4
 8009adc:	2a00      	cmp	r2, #0
 8009ade:	d1f0      	bne.n	8009ac2 <quorem+0xf2>
 8009ae0:	3c01      	subs	r4, #1
 8009ae2:	e7eb      	b.n	8009abc <quorem+0xec>
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	e7ee      	b.n	8009ac6 <quorem+0xf6>

08009ae8 <_dtoa_r>:
 8009ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aec:	4616      	mov	r6, r2
 8009aee:	461f      	mov	r7, r3
 8009af0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009af2:	b099      	sub	sp, #100	; 0x64
 8009af4:	4605      	mov	r5, r0
 8009af6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009afa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009afe:	b974      	cbnz	r4, 8009b1e <_dtoa_r+0x36>
 8009b00:	2010      	movs	r0, #16
 8009b02:	f001 f949 	bl	800ad98 <malloc>
 8009b06:	4602      	mov	r2, r0
 8009b08:	6268      	str	r0, [r5, #36]	; 0x24
 8009b0a:	b920      	cbnz	r0, 8009b16 <_dtoa_r+0x2e>
 8009b0c:	21ea      	movs	r1, #234	; 0xea
 8009b0e:	4ba8      	ldr	r3, [pc, #672]	; (8009db0 <_dtoa_r+0x2c8>)
 8009b10:	48a8      	ldr	r0, [pc, #672]	; (8009db4 <_dtoa_r+0x2cc>)
 8009b12:	f002 f8b3 	bl	800bc7c <__assert_func>
 8009b16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b1a:	6004      	str	r4, [r0, #0]
 8009b1c:	60c4      	str	r4, [r0, #12]
 8009b1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b20:	6819      	ldr	r1, [r3, #0]
 8009b22:	b151      	cbz	r1, 8009b3a <_dtoa_r+0x52>
 8009b24:	685a      	ldr	r2, [r3, #4]
 8009b26:	2301      	movs	r3, #1
 8009b28:	4093      	lsls	r3, r2
 8009b2a:	604a      	str	r2, [r1, #4]
 8009b2c:	608b      	str	r3, [r1, #8]
 8009b2e:	4628      	mov	r0, r5
 8009b30:	f001 f9a8 	bl	800ae84 <_Bfree>
 8009b34:	2200      	movs	r2, #0
 8009b36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b38:	601a      	str	r2, [r3, #0]
 8009b3a:	1e3b      	subs	r3, r7, #0
 8009b3c:	bfaf      	iteee	ge
 8009b3e:	2300      	movge	r3, #0
 8009b40:	2201      	movlt	r2, #1
 8009b42:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009b46:	9305      	strlt	r3, [sp, #20]
 8009b48:	bfa8      	it	ge
 8009b4a:	f8c8 3000 	strge.w	r3, [r8]
 8009b4e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009b52:	4b99      	ldr	r3, [pc, #612]	; (8009db8 <_dtoa_r+0x2d0>)
 8009b54:	bfb8      	it	lt
 8009b56:	f8c8 2000 	strlt.w	r2, [r8]
 8009b5a:	ea33 0309 	bics.w	r3, r3, r9
 8009b5e:	d119      	bne.n	8009b94 <_dtoa_r+0xac>
 8009b60:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b6c:	4333      	orrs	r3, r6
 8009b6e:	f000 857f 	beq.w	800a670 <_dtoa_r+0xb88>
 8009b72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009b74:	b953      	cbnz	r3, 8009b8c <_dtoa_r+0xa4>
 8009b76:	4b91      	ldr	r3, [pc, #580]	; (8009dbc <_dtoa_r+0x2d4>)
 8009b78:	e022      	b.n	8009bc0 <_dtoa_r+0xd8>
 8009b7a:	4b91      	ldr	r3, [pc, #580]	; (8009dc0 <_dtoa_r+0x2d8>)
 8009b7c:	9303      	str	r3, [sp, #12]
 8009b7e:	3308      	adds	r3, #8
 8009b80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009b82:	6013      	str	r3, [r2, #0]
 8009b84:	9803      	ldr	r0, [sp, #12]
 8009b86:	b019      	add	sp, #100	; 0x64
 8009b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b8c:	4b8b      	ldr	r3, [pc, #556]	; (8009dbc <_dtoa_r+0x2d4>)
 8009b8e:	9303      	str	r3, [sp, #12]
 8009b90:	3303      	adds	r3, #3
 8009b92:	e7f5      	b.n	8009b80 <_dtoa_r+0x98>
 8009b94:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009b98:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009b9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	f7fc f868 	bl	8005c78 <__aeabi_dcmpeq>
 8009ba8:	4680      	mov	r8, r0
 8009baa:	b158      	cbz	r0, 8009bc4 <_dtoa_r+0xdc>
 8009bac:	2301      	movs	r3, #1
 8009bae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009bb0:	6013      	str	r3, [r2, #0]
 8009bb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	f000 8558 	beq.w	800a66a <_dtoa_r+0xb82>
 8009bba:	4882      	ldr	r0, [pc, #520]	; (8009dc4 <_dtoa_r+0x2dc>)
 8009bbc:	6018      	str	r0, [r3, #0]
 8009bbe:	1e43      	subs	r3, r0, #1
 8009bc0:	9303      	str	r3, [sp, #12]
 8009bc2:	e7df      	b.n	8009b84 <_dtoa_r+0x9c>
 8009bc4:	ab16      	add	r3, sp, #88	; 0x58
 8009bc6:	9301      	str	r3, [sp, #4]
 8009bc8:	ab17      	add	r3, sp, #92	; 0x5c
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	4628      	mov	r0, r5
 8009bce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009bd2:	f001 fd01 	bl	800b5d8 <__d2b>
 8009bd6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009bda:	4683      	mov	fp, r0
 8009bdc:	2c00      	cmp	r4, #0
 8009bde:	d07f      	beq.n	8009ce0 <_dtoa_r+0x1f8>
 8009be0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009be4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009be6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009bea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009bf2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009bf6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	4b72      	ldr	r3, [pc, #456]	; (8009dc8 <_dtoa_r+0x2e0>)
 8009bfe:	f7fb fc1b 	bl	8005438 <__aeabi_dsub>
 8009c02:	a365      	add	r3, pc, #404	; (adr r3, 8009d98 <_dtoa_r+0x2b0>)
 8009c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c08:	f7fb fdce 	bl	80057a8 <__aeabi_dmul>
 8009c0c:	a364      	add	r3, pc, #400	; (adr r3, 8009da0 <_dtoa_r+0x2b8>)
 8009c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c12:	f7fb fc13 	bl	800543c <__adddf3>
 8009c16:	4606      	mov	r6, r0
 8009c18:	4620      	mov	r0, r4
 8009c1a:	460f      	mov	r7, r1
 8009c1c:	f7fb fd5a 	bl	80056d4 <__aeabi_i2d>
 8009c20:	a361      	add	r3, pc, #388	; (adr r3, 8009da8 <_dtoa_r+0x2c0>)
 8009c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c26:	f7fb fdbf 	bl	80057a8 <__aeabi_dmul>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	4630      	mov	r0, r6
 8009c30:	4639      	mov	r1, r7
 8009c32:	f7fb fc03 	bl	800543c <__adddf3>
 8009c36:	4606      	mov	r6, r0
 8009c38:	460f      	mov	r7, r1
 8009c3a:	f7fc f865 	bl	8005d08 <__aeabi_d2iz>
 8009c3e:	2200      	movs	r2, #0
 8009c40:	4682      	mov	sl, r0
 8009c42:	2300      	movs	r3, #0
 8009c44:	4630      	mov	r0, r6
 8009c46:	4639      	mov	r1, r7
 8009c48:	f7fc f820 	bl	8005c8c <__aeabi_dcmplt>
 8009c4c:	b148      	cbz	r0, 8009c62 <_dtoa_r+0x17a>
 8009c4e:	4650      	mov	r0, sl
 8009c50:	f7fb fd40 	bl	80056d4 <__aeabi_i2d>
 8009c54:	4632      	mov	r2, r6
 8009c56:	463b      	mov	r3, r7
 8009c58:	f7fc f80e 	bl	8005c78 <__aeabi_dcmpeq>
 8009c5c:	b908      	cbnz	r0, 8009c62 <_dtoa_r+0x17a>
 8009c5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c62:	f1ba 0f16 	cmp.w	sl, #22
 8009c66:	d858      	bhi.n	8009d1a <_dtoa_r+0x232>
 8009c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c6c:	4b57      	ldr	r3, [pc, #348]	; (8009dcc <_dtoa_r+0x2e4>)
 8009c6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c76:	f7fc f809 	bl	8005c8c <__aeabi_dcmplt>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	d04f      	beq.n	8009d1e <_dtoa_r+0x236>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c84:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009c88:	1b1c      	subs	r4, r3, r4
 8009c8a:	1e63      	subs	r3, r4, #1
 8009c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c8e:	bf49      	itett	mi
 8009c90:	f1c4 0301 	rsbmi	r3, r4, #1
 8009c94:	2300      	movpl	r3, #0
 8009c96:	9306      	strmi	r3, [sp, #24]
 8009c98:	2300      	movmi	r3, #0
 8009c9a:	bf54      	ite	pl
 8009c9c:	9306      	strpl	r3, [sp, #24]
 8009c9e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009ca0:	f1ba 0f00 	cmp.w	sl, #0
 8009ca4:	db3d      	blt.n	8009d22 <_dtoa_r+0x23a>
 8009ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ca8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009cac:	4453      	add	r3, sl
 8009cae:	9309      	str	r3, [sp, #36]	; 0x24
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8009cb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cb6:	2b09      	cmp	r3, #9
 8009cb8:	f200 808c 	bhi.w	8009dd4 <_dtoa_r+0x2ec>
 8009cbc:	2b05      	cmp	r3, #5
 8009cbe:	bfc4      	itt	gt
 8009cc0:	3b04      	subgt	r3, #4
 8009cc2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009cc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cc6:	bfc8      	it	gt
 8009cc8:	2400      	movgt	r4, #0
 8009cca:	f1a3 0302 	sub.w	r3, r3, #2
 8009cce:	bfd8      	it	le
 8009cd0:	2401      	movle	r4, #1
 8009cd2:	2b03      	cmp	r3, #3
 8009cd4:	f200 808a 	bhi.w	8009dec <_dtoa_r+0x304>
 8009cd8:	e8df f003 	tbb	[pc, r3]
 8009cdc:	5b4d4f2d 	.word	0x5b4d4f2d
 8009ce0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009ce4:	441c      	add	r4, r3
 8009ce6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009cea:	2b20      	cmp	r3, #32
 8009cec:	bfc3      	ittte	gt
 8009cee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009cf2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009cf6:	fa09 f303 	lslgt.w	r3, r9, r3
 8009cfa:	f1c3 0320 	rsble	r3, r3, #32
 8009cfe:	bfc6      	itte	gt
 8009d00:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009d04:	4318      	orrgt	r0, r3
 8009d06:	fa06 f003 	lslle.w	r0, r6, r3
 8009d0a:	f7fb fcd3 	bl	80056b4 <__aeabi_ui2d>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009d14:	3c01      	subs	r4, #1
 8009d16:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d18:	e76f      	b.n	8009bfa <_dtoa_r+0x112>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e7b2      	b.n	8009c84 <_dtoa_r+0x19c>
 8009d1e:	900f      	str	r0, [sp, #60]	; 0x3c
 8009d20:	e7b1      	b.n	8009c86 <_dtoa_r+0x19e>
 8009d22:	9b06      	ldr	r3, [sp, #24]
 8009d24:	eba3 030a 	sub.w	r3, r3, sl
 8009d28:	9306      	str	r3, [sp, #24]
 8009d2a:	f1ca 0300 	rsb	r3, sl, #0
 8009d2e:	930a      	str	r3, [sp, #40]	; 0x28
 8009d30:	2300      	movs	r3, #0
 8009d32:	930e      	str	r3, [sp, #56]	; 0x38
 8009d34:	e7be      	b.n	8009cb4 <_dtoa_r+0x1cc>
 8009d36:	2300      	movs	r3, #0
 8009d38:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	dc58      	bgt.n	8009df2 <_dtoa_r+0x30a>
 8009d40:	f04f 0901 	mov.w	r9, #1
 8009d44:	464b      	mov	r3, r9
 8009d46:	f8cd 9020 	str.w	r9, [sp, #32]
 8009d4a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009d4e:	2200      	movs	r2, #0
 8009d50:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009d52:	6042      	str	r2, [r0, #4]
 8009d54:	2204      	movs	r2, #4
 8009d56:	f102 0614 	add.w	r6, r2, #20
 8009d5a:	429e      	cmp	r6, r3
 8009d5c:	6841      	ldr	r1, [r0, #4]
 8009d5e:	d94e      	bls.n	8009dfe <_dtoa_r+0x316>
 8009d60:	4628      	mov	r0, r5
 8009d62:	f001 f84f 	bl	800ae04 <_Balloc>
 8009d66:	9003      	str	r0, [sp, #12]
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	d14c      	bne.n	8009e06 <_dtoa_r+0x31e>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009d72:	4b17      	ldr	r3, [pc, #92]	; (8009dd0 <_dtoa_r+0x2e8>)
 8009d74:	e6cc      	b.n	8009b10 <_dtoa_r+0x28>
 8009d76:	2301      	movs	r3, #1
 8009d78:	e7de      	b.n	8009d38 <_dtoa_r+0x250>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d80:	eb0a 0903 	add.w	r9, sl, r3
 8009d84:	f109 0301 	add.w	r3, r9, #1
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	9308      	str	r3, [sp, #32]
 8009d8c:	bfb8      	it	lt
 8009d8e:	2301      	movlt	r3, #1
 8009d90:	e7dd      	b.n	8009d4e <_dtoa_r+0x266>
 8009d92:	2301      	movs	r3, #1
 8009d94:	e7f2      	b.n	8009d7c <_dtoa_r+0x294>
 8009d96:	bf00      	nop
 8009d98:	636f4361 	.word	0x636f4361
 8009d9c:	3fd287a7 	.word	0x3fd287a7
 8009da0:	8b60c8b3 	.word	0x8b60c8b3
 8009da4:	3fc68a28 	.word	0x3fc68a28
 8009da8:	509f79fb 	.word	0x509f79fb
 8009dac:	3fd34413 	.word	0x3fd34413
 8009db0:	0801d476 	.word	0x0801d476
 8009db4:	0801d48d 	.word	0x0801d48d
 8009db8:	7ff00000 	.word	0x7ff00000
 8009dbc:	0801d472 	.word	0x0801d472
 8009dc0:	0801d469 	.word	0x0801d469
 8009dc4:	0801d2ed 	.word	0x0801d2ed
 8009dc8:	3ff80000 	.word	0x3ff80000
 8009dcc:	0801d5f8 	.word	0x0801d5f8
 8009dd0:	0801d4e8 	.word	0x0801d4e8
 8009dd4:	2401      	movs	r4, #1
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	940b      	str	r4, [sp, #44]	; 0x2c
 8009dda:	9322      	str	r3, [sp, #136]	; 0x88
 8009ddc:	f04f 39ff 	mov.w	r9, #4294967295
 8009de0:	2200      	movs	r2, #0
 8009de2:	2312      	movs	r3, #18
 8009de4:	f8cd 9020 	str.w	r9, [sp, #32]
 8009de8:	9223      	str	r2, [sp, #140]	; 0x8c
 8009dea:	e7b0      	b.n	8009d4e <_dtoa_r+0x266>
 8009dec:	2301      	movs	r3, #1
 8009dee:	930b      	str	r3, [sp, #44]	; 0x2c
 8009df0:	e7f4      	b.n	8009ddc <_dtoa_r+0x2f4>
 8009df2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009df6:	464b      	mov	r3, r9
 8009df8:	f8cd 9020 	str.w	r9, [sp, #32]
 8009dfc:	e7a7      	b.n	8009d4e <_dtoa_r+0x266>
 8009dfe:	3101      	adds	r1, #1
 8009e00:	6041      	str	r1, [r0, #4]
 8009e02:	0052      	lsls	r2, r2, #1
 8009e04:	e7a7      	b.n	8009d56 <_dtoa_r+0x26e>
 8009e06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e08:	9a03      	ldr	r2, [sp, #12]
 8009e0a:	601a      	str	r2, [r3, #0]
 8009e0c:	9b08      	ldr	r3, [sp, #32]
 8009e0e:	2b0e      	cmp	r3, #14
 8009e10:	f200 80a8 	bhi.w	8009f64 <_dtoa_r+0x47c>
 8009e14:	2c00      	cmp	r4, #0
 8009e16:	f000 80a5 	beq.w	8009f64 <_dtoa_r+0x47c>
 8009e1a:	f1ba 0f00 	cmp.w	sl, #0
 8009e1e:	dd34      	ble.n	8009e8a <_dtoa_r+0x3a2>
 8009e20:	4a9a      	ldr	r2, [pc, #616]	; (800a08c <_dtoa_r+0x5a4>)
 8009e22:	f00a 030f 	and.w	r3, sl, #15
 8009e26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009e2a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009e2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009e36:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009e3a:	d016      	beq.n	8009e6a <_dtoa_r+0x382>
 8009e3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e40:	4b93      	ldr	r3, [pc, #588]	; (800a090 <_dtoa_r+0x5a8>)
 8009e42:	2703      	movs	r7, #3
 8009e44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e48:	f7fb fdd8 	bl	80059fc <__aeabi_ddiv>
 8009e4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e50:	f004 040f 	and.w	r4, r4, #15
 8009e54:	4e8e      	ldr	r6, [pc, #568]	; (800a090 <_dtoa_r+0x5a8>)
 8009e56:	b954      	cbnz	r4, 8009e6e <_dtoa_r+0x386>
 8009e58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e60:	f7fb fdcc 	bl	80059fc <__aeabi_ddiv>
 8009e64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e68:	e029      	b.n	8009ebe <_dtoa_r+0x3d6>
 8009e6a:	2702      	movs	r7, #2
 8009e6c:	e7f2      	b.n	8009e54 <_dtoa_r+0x36c>
 8009e6e:	07e1      	lsls	r1, r4, #31
 8009e70:	d508      	bpl.n	8009e84 <_dtoa_r+0x39c>
 8009e72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e7a:	f7fb fc95 	bl	80057a8 <__aeabi_dmul>
 8009e7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e82:	3701      	adds	r7, #1
 8009e84:	1064      	asrs	r4, r4, #1
 8009e86:	3608      	adds	r6, #8
 8009e88:	e7e5      	b.n	8009e56 <_dtoa_r+0x36e>
 8009e8a:	f000 80a5 	beq.w	8009fd8 <_dtoa_r+0x4f0>
 8009e8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e92:	f1ca 0400 	rsb	r4, sl, #0
 8009e96:	4b7d      	ldr	r3, [pc, #500]	; (800a08c <_dtoa_r+0x5a4>)
 8009e98:	f004 020f 	and.w	r2, r4, #15
 8009e9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	f7fb fc80 	bl	80057a8 <__aeabi_dmul>
 8009ea8:	2702      	movs	r7, #2
 8009eaa:	2300      	movs	r3, #0
 8009eac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009eb0:	4e77      	ldr	r6, [pc, #476]	; (800a090 <_dtoa_r+0x5a8>)
 8009eb2:	1124      	asrs	r4, r4, #4
 8009eb4:	2c00      	cmp	r4, #0
 8009eb6:	f040 8084 	bne.w	8009fc2 <_dtoa_r+0x4da>
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1d2      	bne.n	8009e64 <_dtoa_r+0x37c>
 8009ebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f000 808b 	beq.w	8009fdc <_dtoa_r+0x4f4>
 8009ec6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009eca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009ece:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	4b6f      	ldr	r3, [pc, #444]	; (800a094 <_dtoa_r+0x5ac>)
 8009ed6:	f7fb fed9 	bl	8005c8c <__aeabi_dcmplt>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d07e      	beq.n	8009fdc <_dtoa_r+0x4f4>
 8009ede:	9b08      	ldr	r3, [sp, #32]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d07b      	beq.n	8009fdc <_dtoa_r+0x4f4>
 8009ee4:	f1b9 0f00 	cmp.w	r9, #0
 8009ee8:	dd38      	ble.n	8009f5c <_dtoa_r+0x474>
 8009eea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009eee:	2200      	movs	r2, #0
 8009ef0:	4b69      	ldr	r3, [pc, #420]	; (800a098 <_dtoa_r+0x5b0>)
 8009ef2:	f7fb fc59 	bl	80057a8 <__aeabi_dmul>
 8009ef6:	464c      	mov	r4, r9
 8009ef8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009efc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009f00:	3701      	adds	r7, #1
 8009f02:	4638      	mov	r0, r7
 8009f04:	f7fb fbe6 	bl	80056d4 <__aeabi_i2d>
 8009f08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f0c:	f7fb fc4c 	bl	80057a8 <__aeabi_dmul>
 8009f10:	2200      	movs	r2, #0
 8009f12:	4b62      	ldr	r3, [pc, #392]	; (800a09c <_dtoa_r+0x5b4>)
 8009f14:	f7fb fa92 	bl	800543c <__adddf3>
 8009f18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009f1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009f20:	9611      	str	r6, [sp, #68]	; 0x44
 8009f22:	2c00      	cmp	r4, #0
 8009f24:	d15d      	bne.n	8009fe2 <_dtoa_r+0x4fa>
 8009f26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	4b5c      	ldr	r3, [pc, #368]	; (800a0a0 <_dtoa_r+0x5b8>)
 8009f2e:	f7fb fa83 	bl	8005438 <__aeabi_dsub>
 8009f32:	4602      	mov	r2, r0
 8009f34:	460b      	mov	r3, r1
 8009f36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009f3a:	4633      	mov	r3, r6
 8009f3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f3e:	f7fb fec3 	bl	8005cc8 <__aeabi_dcmpgt>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	f040 829c 	bne.w	800a480 <_dtoa_r+0x998>
 8009f48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f4e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009f52:	f7fb fe9b 	bl	8005c8c <__aeabi_dcmplt>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	f040 8290 	bne.w	800a47c <_dtoa_r+0x994>
 8009f5c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009f60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009f64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f2c0 8152 	blt.w	800a210 <_dtoa_r+0x728>
 8009f6c:	f1ba 0f0e 	cmp.w	sl, #14
 8009f70:	f300 814e 	bgt.w	800a210 <_dtoa_r+0x728>
 8009f74:	4b45      	ldr	r3, [pc, #276]	; (800a08c <_dtoa_r+0x5a4>)
 8009f76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009f7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f7e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009f82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f280 80db 	bge.w	800a140 <_dtoa_r+0x658>
 8009f8a:	9b08      	ldr	r3, [sp, #32]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f300 80d7 	bgt.w	800a140 <_dtoa_r+0x658>
 8009f92:	f040 8272 	bne.w	800a47a <_dtoa_r+0x992>
 8009f96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	4b40      	ldr	r3, [pc, #256]	; (800a0a0 <_dtoa_r+0x5b8>)
 8009f9e:	f7fb fc03 	bl	80057a8 <__aeabi_dmul>
 8009fa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fa6:	f7fb fe85 	bl	8005cb4 <__aeabi_dcmpge>
 8009faa:	9c08      	ldr	r4, [sp, #32]
 8009fac:	4626      	mov	r6, r4
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	f040 8248 	bne.w	800a444 <_dtoa_r+0x95c>
 8009fb4:	2331      	movs	r3, #49	; 0x31
 8009fb6:	9f03      	ldr	r7, [sp, #12]
 8009fb8:	f10a 0a01 	add.w	sl, sl, #1
 8009fbc:	f807 3b01 	strb.w	r3, [r7], #1
 8009fc0:	e244      	b.n	800a44c <_dtoa_r+0x964>
 8009fc2:	07e2      	lsls	r2, r4, #31
 8009fc4:	d505      	bpl.n	8009fd2 <_dtoa_r+0x4ea>
 8009fc6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fca:	f7fb fbed 	bl	80057a8 <__aeabi_dmul>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	3701      	adds	r7, #1
 8009fd2:	1064      	asrs	r4, r4, #1
 8009fd4:	3608      	adds	r6, #8
 8009fd6:	e76d      	b.n	8009eb4 <_dtoa_r+0x3cc>
 8009fd8:	2702      	movs	r7, #2
 8009fda:	e770      	b.n	8009ebe <_dtoa_r+0x3d6>
 8009fdc:	46d0      	mov	r8, sl
 8009fde:	9c08      	ldr	r4, [sp, #32]
 8009fe0:	e78f      	b.n	8009f02 <_dtoa_r+0x41a>
 8009fe2:	9903      	ldr	r1, [sp, #12]
 8009fe4:	4b29      	ldr	r3, [pc, #164]	; (800a08c <_dtoa_r+0x5a4>)
 8009fe6:	4421      	add	r1, r4
 8009fe8:	9112      	str	r1, [sp, #72]	; 0x48
 8009fea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ff0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009ff4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ff8:	2900      	cmp	r1, #0
 8009ffa:	d055      	beq.n	800a0a8 <_dtoa_r+0x5c0>
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	4929      	ldr	r1, [pc, #164]	; (800a0a4 <_dtoa_r+0x5bc>)
 800a000:	f7fb fcfc 	bl	80059fc <__aeabi_ddiv>
 800a004:	463b      	mov	r3, r7
 800a006:	4632      	mov	r2, r6
 800a008:	f7fb fa16 	bl	8005438 <__aeabi_dsub>
 800a00c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a010:	9f03      	ldr	r7, [sp, #12]
 800a012:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a016:	f7fb fe77 	bl	8005d08 <__aeabi_d2iz>
 800a01a:	4604      	mov	r4, r0
 800a01c:	f7fb fb5a 	bl	80056d4 <__aeabi_i2d>
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
 800a024:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a028:	f7fb fa06 	bl	8005438 <__aeabi_dsub>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	3430      	adds	r4, #48	; 0x30
 800a032:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a036:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a03a:	f807 4b01 	strb.w	r4, [r7], #1
 800a03e:	f7fb fe25 	bl	8005c8c <__aeabi_dcmplt>
 800a042:	2800      	cmp	r0, #0
 800a044:	d174      	bne.n	800a130 <_dtoa_r+0x648>
 800a046:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a04a:	2000      	movs	r0, #0
 800a04c:	4911      	ldr	r1, [pc, #68]	; (800a094 <_dtoa_r+0x5ac>)
 800a04e:	f7fb f9f3 	bl	8005438 <__aeabi_dsub>
 800a052:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a056:	f7fb fe19 	bl	8005c8c <__aeabi_dcmplt>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	f040 80b7 	bne.w	800a1ce <_dtoa_r+0x6e6>
 800a060:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a062:	429f      	cmp	r7, r3
 800a064:	f43f af7a 	beq.w	8009f5c <_dtoa_r+0x474>
 800a068:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a06c:	2200      	movs	r2, #0
 800a06e:	4b0a      	ldr	r3, [pc, #40]	; (800a098 <_dtoa_r+0x5b0>)
 800a070:	f7fb fb9a 	bl	80057a8 <__aeabi_dmul>
 800a074:	2200      	movs	r2, #0
 800a076:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a07a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a07e:	4b06      	ldr	r3, [pc, #24]	; (800a098 <_dtoa_r+0x5b0>)
 800a080:	f7fb fb92 	bl	80057a8 <__aeabi_dmul>
 800a084:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a088:	e7c3      	b.n	800a012 <_dtoa_r+0x52a>
 800a08a:	bf00      	nop
 800a08c:	0801d5f8 	.word	0x0801d5f8
 800a090:	0801d5d0 	.word	0x0801d5d0
 800a094:	3ff00000 	.word	0x3ff00000
 800a098:	40240000 	.word	0x40240000
 800a09c:	401c0000 	.word	0x401c0000
 800a0a0:	40140000 	.word	0x40140000
 800a0a4:	3fe00000 	.word	0x3fe00000
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	4639      	mov	r1, r7
 800a0ac:	f7fb fb7c 	bl	80057a8 <__aeabi_dmul>
 800a0b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a0b6:	9c03      	ldr	r4, [sp, #12]
 800a0b8:	9314      	str	r3, [sp, #80]	; 0x50
 800a0ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0be:	f7fb fe23 	bl	8005d08 <__aeabi_d2iz>
 800a0c2:	9015      	str	r0, [sp, #84]	; 0x54
 800a0c4:	f7fb fb06 	bl	80056d4 <__aeabi_i2d>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0d0:	f7fb f9b2 	bl	8005438 <__aeabi_dsub>
 800a0d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0d6:	4606      	mov	r6, r0
 800a0d8:	3330      	adds	r3, #48	; 0x30
 800a0da:	f804 3b01 	strb.w	r3, [r4], #1
 800a0de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0e0:	460f      	mov	r7, r1
 800a0e2:	429c      	cmp	r4, r3
 800a0e4:	f04f 0200 	mov.w	r2, #0
 800a0e8:	d124      	bne.n	800a134 <_dtoa_r+0x64c>
 800a0ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a0ee:	4bb0      	ldr	r3, [pc, #704]	; (800a3b0 <_dtoa_r+0x8c8>)
 800a0f0:	f7fb f9a4 	bl	800543c <__adddf3>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	4639      	mov	r1, r7
 800a0fc:	f7fb fde4 	bl	8005cc8 <__aeabi_dcmpgt>
 800a100:	2800      	cmp	r0, #0
 800a102:	d163      	bne.n	800a1cc <_dtoa_r+0x6e4>
 800a104:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a108:	2000      	movs	r0, #0
 800a10a:	49a9      	ldr	r1, [pc, #676]	; (800a3b0 <_dtoa_r+0x8c8>)
 800a10c:	f7fb f994 	bl	8005438 <__aeabi_dsub>
 800a110:	4602      	mov	r2, r0
 800a112:	460b      	mov	r3, r1
 800a114:	4630      	mov	r0, r6
 800a116:	4639      	mov	r1, r7
 800a118:	f7fb fdb8 	bl	8005c8c <__aeabi_dcmplt>
 800a11c:	2800      	cmp	r0, #0
 800a11e:	f43f af1d 	beq.w	8009f5c <_dtoa_r+0x474>
 800a122:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a124:	1e7b      	subs	r3, r7, #1
 800a126:	9314      	str	r3, [sp, #80]	; 0x50
 800a128:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a12c:	2b30      	cmp	r3, #48	; 0x30
 800a12e:	d0f8      	beq.n	800a122 <_dtoa_r+0x63a>
 800a130:	46c2      	mov	sl, r8
 800a132:	e03b      	b.n	800a1ac <_dtoa_r+0x6c4>
 800a134:	4b9f      	ldr	r3, [pc, #636]	; (800a3b4 <_dtoa_r+0x8cc>)
 800a136:	f7fb fb37 	bl	80057a8 <__aeabi_dmul>
 800a13a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a13e:	e7bc      	b.n	800a0ba <_dtoa_r+0x5d2>
 800a140:	9f03      	ldr	r7, [sp, #12]
 800a142:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a146:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a14a:	4640      	mov	r0, r8
 800a14c:	4649      	mov	r1, r9
 800a14e:	f7fb fc55 	bl	80059fc <__aeabi_ddiv>
 800a152:	f7fb fdd9 	bl	8005d08 <__aeabi_d2iz>
 800a156:	4604      	mov	r4, r0
 800a158:	f7fb fabc 	bl	80056d4 <__aeabi_i2d>
 800a15c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a160:	f7fb fb22 	bl	80057a8 <__aeabi_dmul>
 800a164:	4602      	mov	r2, r0
 800a166:	460b      	mov	r3, r1
 800a168:	4640      	mov	r0, r8
 800a16a:	4649      	mov	r1, r9
 800a16c:	f7fb f964 	bl	8005438 <__aeabi_dsub>
 800a170:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a174:	f807 6b01 	strb.w	r6, [r7], #1
 800a178:	9e03      	ldr	r6, [sp, #12]
 800a17a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a17e:	1bbe      	subs	r6, r7, r6
 800a180:	45b4      	cmp	ip, r6
 800a182:	4602      	mov	r2, r0
 800a184:	460b      	mov	r3, r1
 800a186:	d136      	bne.n	800a1f6 <_dtoa_r+0x70e>
 800a188:	f7fb f958 	bl	800543c <__adddf3>
 800a18c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a190:	4680      	mov	r8, r0
 800a192:	4689      	mov	r9, r1
 800a194:	f7fb fd98 	bl	8005cc8 <__aeabi_dcmpgt>
 800a198:	bb58      	cbnz	r0, 800a1f2 <_dtoa_r+0x70a>
 800a19a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a19e:	4640      	mov	r0, r8
 800a1a0:	4649      	mov	r1, r9
 800a1a2:	f7fb fd69 	bl	8005c78 <__aeabi_dcmpeq>
 800a1a6:	b108      	cbz	r0, 800a1ac <_dtoa_r+0x6c4>
 800a1a8:	07e1      	lsls	r1, r4, #31
 800a1aa:	d422      	bmi.n	800a1f2 <_dtoa_r+0x70a>
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	4659      	mov	r1, fp
 800a1b0:	f000 fe68 	bl	800ae84 <_Bfree>
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	703b      	strb	r3, [r7, #0]
 800a1b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a1ba:	f10a 0001 	add.w	r0, sl, #1
 800a1be:	6018      	str	r0, [r3, #0]
 800a1c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f43f acde 	beq.w	8009b84 <_dtoa_r+0x9c>
 800a1c8:	601f      	str	r7, [r3, #0]
 800a1ca:	e4db      	b.n	8009b84 <_dtoa_r+0x9c>
 800a1cc:	4627      	mov	r7, r4
 800a1ce:	463b      	mov	r3, r7
 800a1d0:	461f      	mov	r7, r3
 800a1d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1d6:	2a39      	cmp	r2, #57	; 0x39
 800a1d8:	d107      	bne.n	800a1ea <_dtoa_r+0x702>
 800a1da:	9a03      	ldr	r2, [sp, #12]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d1f7      	bne.n	800a1d0 <_dtoa_r+0x6e8>
 800a1e0:	2230      	movs	r2, #48	; 0x30
 800a1e2:	9903      	ldr	r1, [sp, #12]
 800a1e4:	f108 0801 	add.w	r8, r8, #1
 800a1e8:	700a      	strb	r2, [r1, #0]
 800a1ea:	781a      	ldrb	r2, [r3, #0]
 800a1ec:	3201      	adds	r2, #1
 800a1ee:	701a      	strb	r2, [r3, #0]
 800a1f0:	e79e      	b.n	800a130 <_dtoa_r+0x648>
 800a1f2:	46d0      	mov	r8, sl
 800a1f4:	e7eb      	b.n	800a1ce <_dtoa_r+0x6e6>
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	4b6e      	ldr	r3, [pc, #440]	; (800a3b4 <_dtoa_r+0x8cc>)
 800a1fa:	f7fb fad5 	bl	80057a8 <__aeabi_dmul>
 800a1fe:	2200      	movs	r2, #0
 800a200:	2300      	movs	r3, #0
 800a202:	4680      	mov	r8, r0
 800a204:	4689      	mov	r9, r1
 800a206:	f7fb fd37 	bl	8005c78 <__aeabi_dcmpeq>
 800a20a:	2800      	cmp	r0, #0
 800a20c:	d09b      	beq.n	800a146 <_dtoa_r+0x65e>
 800a20e:	e7cd      	b.n	800a1ac <_dtoa_r+0x6c4>
 800a210:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a212:	2a00      	cmp	r2, #0
 800a214:	f000 80d0 	beq.w	800a3b8 <_dtoa_r+0x8d0>
 800a218:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a21a:	2a01      	cmp	r2, #1
 800a21c:	f300 80ae 	bgt.w	800a37c <_dtoa_r+0x894>
 800a220:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a222:	2a00      	cmp	r2, #0
 800a224:	f000 80a6 	beq.w	800a374 <_dtoa_r+0x88c>
 800a228:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a22c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a22e:	9f06      	ldr	r7, [sp, #24]
 800a230:	9a06      	ldr	r2, [sp, #24]
 800a232:	2101      	movs	r1, #1
 800a234:	441a      	add	r2, r3
 800a236:	9206      	str	r2, [sp, #24]
 800a238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a23a:	4628      	mov	r0, r5
 800a23c:	441a      	add	r2, r3
 800a23e:	9209      	str	r2, [sp, #36]	; 0x24
 800a240:	f000 ff20 	bl	800b084 <__i2b>
 800a244:	4606      	mov	r6, r0
 800a246:	2f00      	cmp	r7, #0
 800a248:	dd0c      	ble.n	800a264 <_dtoa_r+0x77c>
 800a24a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	dd09      	ble.n	800a264 <_dtoa_r+0x77c>
 800a250:	42bb      	cmp	r3, r7
 800a252:	bfa8      	it	ge
 800a254:	463b      	movge	r3, r7
 800a256:	9a06      	ldr	r2, [sp, #24]
 800a258:	1aff      	subs	r7, r7, r3
 800a25a:	1ad2      	subs	r2, r2, r3
 800a25c:	9206      	str	r2, [sp, #24]
 800a25e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a260:	1ad3      	subs	r3, r2, r3
 800a262:	9309      	str	r3, [sp, #36]	; 0x24
 800a264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a266:	b1f3      	cbz	r3, 800a2a6 <_dtoa_r+0x7be>
 800a268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	f000 80a8 	beq.w	800a3c0 <_dtoa_r+0x8d8>
 800a270:	2c00      	cmp	r4, #0
 800a272:	dd10      	ble.n	800a296 <_dtoa_r+0x7ae>
 800a274:	4631      	mov	r1, r6
 800a276:	4622      	mov	r2, r4
 800a278:	4628      	mov	r0, r5
 800a27a:	f000 ffc1 	bl	800b200 <__pow5mult>
 800a27e:	465a      	mov	r2, fp
 800a280:	4601      	mov	r1, r0
 800a282:	4606      	mov	r6, r0
 800a284:	4628      	mov	r0, r5
 800a286:	f000 ff13 	bl	800b0b0 <__multiply>
 800a28a:	4680      	mov	r8, r0
 800a28c:	4659      	mov	r1, fp
 800a28e:	4628      	mov	r0, r5
 800a290:	f000 fdf8 	bl	800ae84 <_Bfree>
 800a294:	46c3      	mov	fp, r8
 800a296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a298:	1b1a      	subs	r2, r3, r4
 800a29a:	d004      	beq.n	800a2a6 <_dtoa_r+0x7be>
 800a29c:	4659      	mov	r1, fp
 800a29e:	4628      	mov	r0, r5
 800a2a0:	f000 ffae 	bl	800b200 <__pow5mult>
 800a2a4:	4683      	mov	fp, r0
 800a2a6:	2101      	movs	r1, #1
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	f000 feeb 	bl	800b084 <__i2b>
 800a2ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2b0:	4604      	mov	r4, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f340 8086 	ble.w	800a3c4 <_dtoa_r+0x8dc>
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	4601      	mov	r1, r0
 800a2bc:	4628      	mov	r0, r5
 800a2be:	f000 ff9f 	bl	800b200 <__pow5mult>
 800a2c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	dd7f      	ble.n	800a3ca <_dtoa_r+0x8e2>
 800a2ca:	f04f 0800 	mov.w	r8, #0
 800a2ce:	6923      	ldr	r3, [r4, #16]
 800a2d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a2d4:	6918      	ldr	r0, [r3, #16]
 800a2d6:	f000 fe87 	bl	800afe8 <__hi0bits>
 800a2da:	f1c0 0020 	rsb	r0, r0, #32
 800a2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e0:	4418      	add	r0, r3
 800a2e2:	f010 001f 	ands.w	r0, r0, #31
 800a2e6:	f000 8092 	beq.w	800a40e <_dtoa_r+0x926>
 800a2ea:	f1c0 0320 	rsb	r3, r0, #32
 800a2ee:	2b04      	cmp	r3, #4
 800a2f0:	f340 808a 	ble.w	800a408 <_dtoa_r+0x920>
 800a2f4:	f1c0 001c 	rsb	r0, r0, #28
 800a2f8:	9b06      	ldr	r3, [sp, #24]
 800a2fa:	4407      	add	r7, r0
 800a2fc:	4403      	add	r3, r0
 800a2fe:	9306      	str	r3, [sp, #24]
 800a300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a302:	4403      	add	r3, r0
 800a304:	9309      	str	r3, [sp, #36]	; 0x24
 800a306:	9b06      	ldr	r3, [sp, #24]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	dd05      	ble.n	800a318 <_dtoa_r+0x830>
 800a30c:	4659      	mov	r1, fp
 800a30e:	461a      	mov	r2, r3
 800a310:	4628      	mov	r0, r5
 800a312:	f000 ffcf 	bl	800b2b4 <__lshift>
 800a316:	4683      	mov	fp, r0
 800a318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	dd05      	ble.n	800a32a <_dtoa_r+0x842>
 800a31e:	4621      	mov	r1, r4
 800a320:	461a      	mov	r2, r3
 800a322:	4628      	mov	r0, r5
 800a324:	f000 ffc6 	bl	800b2b4 <__lshift>
 800a328:	4604      	mov	r4, r0
 800a32a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d070      	beq.n	800a412 <_dtoa_r+0x92a>
 800a330:	4621      	mov	r1, r4
 800a332:	4658      	mov	r0, fp
 800a334:	f001 f82e 	bl	800b394 <__mcmp>
 800a338:	2800      	cmp	r0, #0
 800a33a:	da6a      	bge.n	800a412 <_dtoa_r+0x92a>
 800a33c:	2300      	movs	r3, #0
 800a33e:	4659      	mov	r1, fp
 800a340:	220a      	movs	r2, #10
 800a342:	4628      	mov	r0, r5
 800a344:	f000 fdc0 	bl	800aec8 <__multadd>
 800a348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a34a:	4683      	mov	fp, r0
 800a34c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a350:	2b00      	cmp	r3, #0
 800a352:	f000 8194 	beq.w	800a67e <_dtoa_r+0xb96>
 800a356:	4631      	mov	r1, r6
 800a358:	2300      	movs	r3, #0
 800a35a:	220a      	movs	r2, #10
 800a35c:	4628      	mov	r0, r5
 800a35e:	f000 fdb3 	bl	800aec8 <__multadd>
 800a362:	f1b9 0f00 	cmp.w	r9, #0
 800a366:	4606      	mov	r6, r0
 800a368:	f300 8093 	bgt.w	800a492 <_dtoa_r+0x9aa>
 800a36c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a36e:	2b02      	cmp	r3, #2
 800a370:	dc57      	bgt.n	800a422 <_dtoa_r+0x93a>
 800a372:	e08e      	b.n	800a492 <_dtoa_r+0x9aa>
 800a374:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a376:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a37a:	e757      	b.n	800a22c <_dtoa_r+0x744>
 800a37c:	9b08      	ldr	r3, [sp, #32]
 800a37e:	1e5c      	subs	r4, r3, #1
 800a380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a382:	42a3      	cmp	r3, r4
 800a384:	bfb7      	itett	lt
 800a386:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a388:	1b1c      	subge	r4, r3, r4
 800a38a:	1ae2      	sublt	r2, r4, r3
 800a38c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a38e:	bfbe      	ittt	lt
 800a390:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a392:	189b      	addlt	r3, r3, r2
 800a394:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a396:	9b08      	ldr	r3, [sp, #32]
 800a398:	bfb8      	it	lt
 800a39a:	2400      	movlt	r4, #0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	bfbb      	ittet	lt
 800a3a0:	9b06      	ldrlt	r3, [sp, #24]
 800a3a2:	9a08      	ldrlt	r2, [sp, #32]
 800a3a4:	9f06      	ldrge	r7, [sp, #24]
 800a3a6:	1a9f      	sublt	r7, r3, r2
 800a3a8:	bfac      	ite	ge
 800a3aa:	9b08      	ldrge	r3, [sp, #32]
 800a3ac:	2300      	movlt	r3, #0
 800a3ae:	e73f      	b.n	800a230 <_dtoa_r+0x748>
 800a3b0:	3fe00000 	.word	0x3fe00000
 800a3b4:	40240000 	.word	0x40240000
 800a3b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a3ba:	9f06      	ldr	r7, [sp, #24]
 800a3bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a3be:	e742      	b.n	800a246 <_dtoa_r+0x75e>
 800a3c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3c2:	e76b      	b.n	800a29c <_dtoa_r+0x7b4>
 800a3c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	dc19      	bgt.n	800a3fe <_dtoa_r+0x916>
 800a3ca:	9b04      	ldr	r3, [sp, #16]
 800a3cc:	b9bb      	cbnz	r3, 800a3fe <_dtoa_r+0x916>
 800a3ce:	9b05      	ldr	r3, [sp, #20]
 800a3d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3d4:	b99b      	cbnz	r3, 800a3fe <_dtoa_r+0x916>
 800a3d6:	9b05      	ldr	r3, [sp, #20]
 800a3d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3dc:	0d1b      	lsrs	r3, r3, #20
 800a3de:	051b      	lsls	r3, r3, #20
 800a3e0:	b183      	cbz	r3, 800a404 <_dtoa_r+0x91c>
 800a3e2:	f04f 0801 	mov.w	r8, #1
 800a3e6:	9b06      	ldr	r3, [sp, #24]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	9306      	str	r3, [sp, #24]
 800a3ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a3f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	f47f af6a 	bne.w	800a2ce <_dtoa_r+0x7e6>
 800a3fa:	2001      	movs	r0, #1
 800a3fc:	e76f      	b.n	800a2de <_dtoa_r+0x7f6>
 800a3fe:	f04f 0800 	mov.w	r8, #0
 800a402:	e7f6      	b.n	800a3f2 <_dtoa_r+0x90a>
 800a404:	4698      	mov	r8, r3
 800a406:	e7f4      	b.n	800a3f2 <_dtoa_r+0x90a>
 800a408:	f43f af7d 	beq.w	800a306 <_dtoa_r+0x81e>
 800a40c:	4618      	mov	r0, r3
 800a40e:	301c      	adds	r0, #28
 800a410:	e772      	b.n	800a2f8 <_dtoa_r+0x810>
 800a412:	9b08      	ldr	r3, [sp, #32]
 800a414:	2b00      	cmp	r3, #0
 800a416:	dc36      	bgt.n	800a486 <_dtoa_r+0x99e>
 800a418:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	dd33      	ble.n	800a486 <_dtoa_r+0x99e>
 800a41e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a422:	f1b9 0f00 	cmp.w	r9, #0
 800a426:	d10d      	bne.n	800a444 <_dtoa_r+0x95c>
 800a428:	4621      	mov	r1, r4
 800a42a:	464b      	mov	r3, r9
 800a42c:	2205      	movs	r2, #5
 800a42e:	4628      	mov	r0, r5
 800a430:	f000 fd4a 	bl	800aec8 <__multadd>
 800a434:	4601      	mov	r1, r0
 800a436:	4604      	mov	r4, r0
 800a438:	4658      	mov	r0, fp
 800a43a:	f000 ffab 	bl	800b394 <__mcmp>
 800a43e:	2800      	cmp	r0, #0
 800a440:	f73f adb8 	bgt.w	8009fb4 <_dtoa_r+0x4cc>
 800a444:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a446:	9f03      	ldr	r7, [sp, #12]
 800a448:	ea6f 0a03 	mvn.w	sl, r3
 800a44c:	f04f 0800 	mov.w	r8, #0
 800a450:	4621      	mov	r1, r4
 800a452:	4628      	mov	r0, r5
 800a454:	f000 fd16 	bl	800ae84 <_Bfree>
 800a458:	2e00      	cmp	r6, #0
 800a45a:	f43f aea7 	beq.w	800a1ac <_dtoa_r+0x6c4>
 800a45e:	f1b8 0f00 	cmp.w	r8, #0
 800a462:	d005      	beq.n	800a470 <_dtoa_r+0x988>
 800a464:	45b0      	cmp	r8, r6
 800a466:	d003      	beq.n	800a470 <_dtoa_r+0x988>
 800a468:	4641      	mov	r1, r8
 800a46a:	4628      	mov	r0, r5
 800a46c:	f000 fd0a 	bl	800ae84 <_Bfree>
 800a470:	4631      	mov	r1, r6
 800a472:	4628      	mov	r0, r5
 800a474:	f000 fd06 	bl	800ae84 <_Bfree>
 800a478:	e698      	b.n	800a1ac <_dtoa_r+0x6c4>
 800a47a:	2400      	movs	r4, #0
 800a47c:	4626      	mov	r6, r4
 800a47e:	e7e1      	b.n	800a444 <_dtoa_r+0x95c>
 800a480:	46c2      	mov	sl, r8
 800a482:	4626      	mov	r6, r4
 800a484:	e596      	b.n	8009fb4 <_dtoa_r+0x4cc>
 800a486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a488:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f000 80fd 	beq.w	800a68c <_dtoa_r+0xba4>
 800a492:	2f00      	cmp	r7, #0
 800a494:	dd05      	ble.n	800a4a2 <_dtoa_r+0x9ba>
 800a496:	4631      	mov	r1, r6
 800a498:	463a      	mov	r2, r7
 800a49a:	4628      	mov	r0, r5
 800a49c:	f000 ff0a 	bl	800b2b4 <__lshift>
 800a4a0:	4606      	mov	r6, r0
 800a4a2:	f1b8 0f00 	cmp.w	r8, #0
 800a4a6:	d05c      	beq.n	800a562 <_dtoa_r+0xa7a>
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	6871      	ldr	r1, [r6, #4]
 800a4ac:	f000 fcaa 	bl	800ae04 <_Balloc>
 800a4b0:	4607      	mov	r7, r0
 800a4b2:	b928      	cbnz	r0, 800a4c0 <_dtoa_r+0x9d8>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a4ba:	4b7f      	ldr	r3, [pc, #508]	; (800a6b8 <_dtoa_r+0xbd0>)
 800a4bc:	f7ff bb28 	b.w	8009b10 <_dtoa_r+0x28>
 800a4c0:	6932      	ldr	r2, [r6, #16]
 800a4c2:	f106 010c 	add.w	r1, r6, #12
 800a4c6:	3202      	adds	r2, #2
 800a4c8:	0092      	lsls	r2, r2, #2
 800a4ca:	300c      	adds	r0, #12
 800a4cc:	f000 fc8c 	bl	800ade8 <memcpy>
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	4639      	mov	r1, r7
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	f000 feed 	bl	800b2b4 <__lshift>
 800a4da:	46b0      	mov	r8, r6
 800a4dc:	4606      	mov	r6, r0
 800a4de:	9b03      	ldr	r3, [sp, #12]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	9308      	str	r3, [sp, #32]
 800a4e4:	9b03      	ldr	r3, [sp, #12]
 800a4e6:	444b      	add	r3, r9
 800a4e8:	930a      	str	r3, [sp, #40]	; 0x28
 800a4ea:	9b04      	ldr	r3, [sp, #16]
 800a4ec:	f003 0301 	and.w	r3, r3, #1
 800a4f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a4f2:	9b08      	ldr	r3, [sp, #32]
 800a4f4:	4621      	mov	r1, r4
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	4658      	mov	r0, fp
 800a4fa:	9304      	str	r3, [sp, #16]
 800a4fc:	f7ff fa68 	bl	80099d0 <quorem>
 800a500:	4603      	mov	r3, r0
 800a502:	4641      	mov	r1, r8
 800a504:	3330      	adds	r3, #48	; 0x30
 800a506:	9006      	str	r0, [sp, #24]
 800a508:	4658      	mov	r0, fp
 800a50a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a50c:	f000 ff42 	bl	800b394 <__mcmp>
 800a510:	4632      	mov	r2, r6
 800a512:	4681      	mov	r9, r0
 800a514:	4621      	mov	r1, r4
 800a516:	4628      	mov	r0, r5
 800a518:	f000 ff58 	bl	800b3cc <__mdiff>
 800a51c:	68c2      	ldr	r2, [r0, #12]
 800a51e:	4607      	mov	r7, r0
 800a520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a522:	bb02      	cbnz	r2, 800a566 <_dtoa_r+0xa7e>
 800a524:	4601      	mov	r1, r0
 800a526:	4658      	mov	r0, fp
 800a528:	f000 ff34 	bl	800b394 <__mcmp>
 800a52c:	4602      	mov	r2, r0
 800a52e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a530:	4639      	mov	r1, r7
 800a532:	4628      	mov	r0, r5
 800a534:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a538:	f000 fca4 	bl	800ae84 <_Bfree>
 800a53c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a53e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a540:	9f08      	ldr	r7, [sp, #32]
 800a542:	ea43 0102 	orr.w	r1, r3, r2
 800a546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a548:	430b      	orrs	r3, r1
 800a54a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a54c:	d10d      	bne.n	800a56a <_dtoa_r+0xa82>
 800a54e:	2b39      	cmp	r3, #57	; 0x39
 800a550:	d029      	beq.n	800a5a6 <_dtoa_r+0xabe>
 800a552:	f1b9 0f00 	cmp.w	r9, #0
 800a556:	dd01      	ble.n	800a55c <_dtoa_r+0xa74>
 800a558:	9b06      	ldr	r3, [sp, #24]
 800a55a:	3331      	adds	r3, #49	; 0x31
 800a55c:	9a04      	ldr	r2, [sp, #16]
 800a55e:	7013      	strb	r3, [r2, #0]
 800a560:	e776      	b.n	800a450 <_dtoa_r+0x968>
 800a562:	4630      	mov	r0, r6
 800a564:	e7b9      	b.n	800a4da <_dtoa_r+0x9f2>
 800a566:	2201      	movs	r2, #1
 800a568:	e7e2      	b.n	800a530 <_dtoa_r+0xa48>
 800a56a:	f1b9 0f00 	cmp.w	r9, #0
 800a56e:	db06      	blt.n	800a57e <_dtoa_r+0xa96>
 800a570:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a572:	ea41 0909 	orr.w	r9, r1, r9
 800a576:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a578:	ea59 0101 	orrs.w	r1, r9, r1
 800a57c:	d120      	bne.n	800a5c0 <_dtoa_r+0xad8>
 800a57e:	2a00      	cmp	r2, #0
 800a580:	ddec      	ble.n	800a55c <_dtoa_r+0xa74>
 800a582:	4659      	mov	r1, fp
 800a584:	2201      	movs	r2, #1
 800a586:	4628      	mov	r0, r5
 800a588:	9308      	str	r3, [sp, #32]
 800a58a:	f000 fe93 	bl	800b2b4 <__lshift>
 800a58e:	4621      	mov	r1, r4
 800a590:	4683      	mov	fp, r0
 800a592:	f000 feff 	bl	800b394 <__mcmp>
 800a596:	2800      	cmp	r0, #0
 800a598:	9b08      	ldr	r3, [sp, #32]
 800a59a:	dc02      	bgt.n	800a5a2 <_dtoa_r+0xaba>
 800a59c:	d1de      	bne.n	800a55c <_dtoa_r+0xa74>
 800a59e:	07da      	lsls	r2, r3, #31
 800a5a0:	d5dc      	bpl.n	800a55c <_dtoa_r+0xa74>
 800a5a2:	2b39      	cmp	r3, #57	; 0x39
 800a5a4:	d1d8      	bne.n	800a558 <_dtoa_r+0xa70>
 800a5a6:	2339      	movs	r3, #57	; 0x39
 800a5a8:	9a04      	ldr	r2, [sp, #16]
 800a5aa:	7013      	strb	r3, [r2, #0]
 800a5ac:	463b      	mov	r3, r7
 800a5ae:	461f      	mov	r7, r3
 800a5b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	2a39      	cmp	r2, #57	; 0x39
 800a5b8:	d050      	beq.n	800a65c <_dtoa_r+0xb74>
 800a5ba:	3201      	adds	r2, #1
 800a5bc:	701a      	strb	r2, [r3, #0]
 800a5be:	e747      	b.n	800a450 <_dtoa_r+0x968>
 800a5c0:	2a00      	cmp	r2, #0
 800a5c2:	dd03      	ble.n	800a5cc <_dtoa_r+0xae4>
 800a5c4:	2b39      	cmp	r3, #57	; 0x39
 800a5c6:	d0ee      	beq.n	800a5a6 <_dtoa_r+0xabe>
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	e7c7      	b.n	800a55c <_dtoa_r+0xa74>
 800a5cc:	9a08      	ldr	r2, [sp, #32]
 800a5ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a5d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a5d4:	428a      	cmp	r2, r1
 800a5d6:	d02a      	beq.n	800a62e <_dtoa_r+0xb46>
 800a5d8:	4659      	mov	r1, fp
 800a5da:	2300      	movs	r3, #0
 800a5dc:	220a      	movs	r2, #10
 800a5de:	4628      	mov	r0, r5
 800a5e0:	f000 fc72 	bl	800aec8 <__multadd>
 800a5e4:	45b0      	cmp	r8, r6
 800a5e6:	4683      	mov	fp, r0
 800a5e8:	f04f 0300 	mov.w	r3, #0
 800a5ec:	f04f 020a 	mov.w	r2, #10
 800a5f0:	4641      	mov	r1, r8
 800a5f2:	4628      	mov	r0, r5
 800a5f4:	d107      	bne.n	800a606 <_dtoa_r+0xb1e>
 800a5f6:	f000 fc67 	bl	800aec8 <__multadd>
 800a5fa:	4680      	mov	r8, r0
 800a5fc:	4606      	mov	r6, r0
 800a5fe:	9b08      	ldr	r3, [sp, #32]
 800a600:	3301      	adds	r3, #1
 800a602:	9308      	str	r3, [sp, #32]
 800a604:	e775      	b.n	800a4f2 <_dtoa_r+0xa0a>
 800a606:	f000 fc5f 	bl	800aec8 <__multadd>
 800a60a:	4631      	mov	r1, r6
 800a60c:	4680      	mov	r8, r0
 800a60e:	2300      	movs	r3, #0
 800a610:	220a      	movs	r2, #10
 800a612:	4628      	mov	r0, r5
 800a614:	f000 fc58 	bl	800aec8 <__multadd>
 800a618:	4606      	mov	r6, r0
 800a61a:	e7f0      	b.n	800a5fe <_dtoa_r+0xb16>
 800a61c:	f1b9 0f00 	cmp.w	r9, #0
 800a620:	bfcc      	ite	gt
 800a622:	464f      	movgt	r7, r9
 800a624:	2701      	movle	r7, #1
 800a626:	f04f 0800 	mov.w	r8, #0
 800a62a:	9a03      	ldr	r2, [sp, #12]
 800a62c:	4417      	add	r7, r2
 800a62e:	4659      	mov	r1, fp
 800a630:	2201      	movs	r2, #1
 800a632:	4628      	mov	r0, r5
 800a634:	9308      	str	r3, [sp, #32]
 800a636:	f000 fe3d 	bl	800b2b4 <__lshift>
 800a63a:	4621      	mov	r1, r4
 800a63c:	4683      	mov	fp, r0
 800a63e:	f000 fea9 	bl	800b394 <__mcmp>
 800a642:	2800      	cmp	r0, #0
 800a644:	dcb2      	bgt.n	800a5ac <_dtoa_r+0xac4>
 800a646:	d102      	bne.n	800a64e <_dtoa_r+0xb66>
 800a648:	9b08      	ldr	r3, [sp, #32]
 800a64a:	07db      	lsls	r3, r3, #31
 800a64c:	d4ae      	bmi.n	800a5ac <_dtoa_r+0xac4>
 800a64e:	463b      	mov	r3, r7
 800a650:	461f      	mov	r7, r3
 800a652:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a656:	2a30      	cmp	r2, #48	; 0x30
 800a658:	d0fa      	beq.n	800a650 <_dtoa_r+0xb68>
 800a65a:	e6f9      	b.n	800a450 <_dtoa_r+0x968>
 800a65c:	9a03      	ldr	r2, [sp, #12]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d1a5      	bne.n	800a5ae <_dtoa_r+0xac6>
 800a662:	2331      	movs	r3, #49	; 0x31
 800a664:	f10a 0a01 	add.w	sl, sl, #1
 800a668:	e779      	b.n	800a55e <_dtoa_r+0xa76>
 800a66a:	4b14      	ldr	r3, [pc, #80]	; (800a6bc <_dtoa_r+0xbd4>)
 800a66c:	f7ff baa8 	b.w	8009bc0 <_dtoa_r+0xd8>
 800a670:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a672:	2b00      	cmp	r3, #0
 800a674:	f47f aa81 	bne.w	8009b7a <_dtoa_r+0x92>
 800a678:	4b11      	ldr	r3, [pc, #68]	; (800a6c0 <_dtoa_r+0xbd8>)
 800a67a:	f7ff baa1 	b.w	8009bc0 <_dtoa_r+0xd8>
 800a67e:	f1b9 0f00 	cmp.w	r9, #0
 800a682:	dc03      	bgt.n	800a68c <_dtoa_r+0xba4>
 800a684:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a686:	2b02      	cmp	r3, #2
 800a688:	f73f aecb 	bgt.w	800a422 <_dtoa_r+0x93a>
 800a68c:	9f03      	ldr	r7, [sp, #12]
 800a68e:	4621      	mov	r1, r4
 800a690:	4658      	mov	r0, fp
 800a692:	f7ff f99d 	bl	80099d0 <quorem>
 800a696:	9a03      	ldr	r2, [sp, #12]
 800a698:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a69c:	f807 3b01 	strb.w	r3, [r7], #1
 800a6a0:	1aba      	subs	r2, r7, r2
 800a6a2:	4591      	cmp	r9, r2
 800a6a4:	ddba      	ble.n	800a61c <_dtoa_r+0xb34>
 800a6a6:	4659      	mov	r1, fp
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	220a      	movs	r2, #10
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	f000 fc0b 	bl	800aec8 <__multadd>
 800a6b2:	4683      	mov	fp, r0
 800a6b4:	e7eb      	b.n	800a68e <_dtoa_r+0xba6>
 800a6b6:	bf00      	nop
 800a6b8:	0801d4e8 	.word	0x0801d4e8
 800a6bc:	0801d2ec 	.word	0x0801d2ec
 800a6c0:	0801d469 	.word	0x0801d469

0800a6c4 <rshift>:
 800a6c4:	6903      	ldr	r3, [r0, #16]
 800a6c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a6ce:	f100 0414 	add.w	r4, r0, #20
 800a6d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a6d6:	dd46      	ble.n	800a766 <rshift+0xa2>
 800a6d8:	f011 011f 	ands.w	r1, r1, #31
 800a6dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a6e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a6e4:	d10c      	bne.n	800a700 <rshift+0x3c>
 800a6e6:	4629      	mov	r1, r5
 800a6e8:	f100 0710 	add.w	r7, r0, #16
 800a6ec:	42b1      	cmp	r1, r6
 800a6ee:	d335      	bcc.n	800a75c <rshift+0x98>
 800a6f0:	1a9b      	subs	r3, r3, r2
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	1eea      	subs	r2, r5, #3
 800a6f6:	4296      	cmp	r6, r2
 800a6f8:	bf38      	it	cc
 800a6fa:	2300      	movcc	r3, #0
 800a6fc:	4423      	add	r3, r4
 800a6fe:	e015      	b.n	800a72c <rshift+0x68>
 800a700:	46a1      	mov	r9, r4
 800a702:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a706:	f1c1 0820 	rsb	r8, r1, #32
 800a70a:	40cf      	lsrs	r7, r1
 800a70c:	f105 0e04 	add.w	lr, r5, #4
 800a710:	4576      	cmp	r6, lr
 800a712:	46f4      	mov	ip, lr
 800a714:	d816      	bhi.n	800a744 <rshift+0x80>
 800a716:	1a9a      	subs	r2, r3, r2
 800a718:	0092      	lsls	r2, r2, #2
 800a71a:	3a04      	subs	r2, #4
 800a71c:	3501      	adds	r5, #1
 800a71e:	42ae      	cmp	r6, r5
 800a720:	bf38      	it	cc
 800a722:	2200      	movcc	r2, #0
 800a724:	18a3      	adds	r3, r4, r2
 800a726:	50a7      	str	r7, [r4, r2]
 800a728:	b107      	cbz	r7, 800a72c <rshift+0x68>
 800a72a:	3304      	adds	r3, #4
 800a72c:	42a3      	cmp	r3, r4
 800a72e:	eba3 0204 	sub.w	r2, r3, r4
 800a732:	bf08      	it	eq
 800a734:	2300      	moveq	r3, #0
 800a736:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a73a:	6102      	str	r2, [r0, #16]
 800a73c:	bf08      	it	eq
 800a73e:	6143      	streq	r3, [r0, #20]
 800a740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a744:	f8dc c000 	ldr.w	ip, [ip]
 800a748:	fa0c fc08 	lsl.w	ip, ip, r8
 800a74c:	ea4c 0707 	orr.w	r7, ip, r7
 800a750:	f849 7b04 	str.w	r7, [r9], #4
 800a754:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a758:	40cf      	lsrs	r7, r1
 800a75a:	e7d9      	b.n	800a710 <rshift+0x4c>
 800a75c:	f851 cb04 	ldr.w	ip, [r1], #4
 800a760:	f847 cf04 	str.w	ip, [r7, #4]!
 800a764:	e7c2      	b.n	800a6ec <rshift+0x28>
 800a766:	4623      	mov	r3, r4
 800a768:	e7e0      	b.n	800a72c <rshift+0x68>

0800a76a <__hexdig_fun>:
 800a76a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a76e:	2b09      	cmp	r3, #9
 800a770:	d802      	bhi.n	800a778 <__hexdig_fun+0xe>
 800a772:	3820      	subs	r0, #32
 800a774:	b2c0      	uxtb	r0, r0
 800a776:	4770      	bx	lr
 800a778:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a77c:	2b05      	cmp	r3, #5
 800a77e:	d801      	bhi.n	800a784 <__hexdig_fun+0x1a>
 800a780:	3847      	subs	r0, #71	; 0x47
 800a782:	e7f7      	b.n	800a774 <__hexdig_fun+0xa>
 800a784:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a788:	2b05      	cmp	r3, #5
 800a78a:	d801      	bhi.n	800a790 <__hexdig_fun+0x26>
 800a78c:	3827      	subs	r0, #39	; 0x27
 800a78e:	e7f1      	b.n	800a774 <__hexdig_fun+0xa>
 800a790:	2000      	movs	r0, #0
 800a792:	4770      	bx	lr

0800a794 <__gethex>:
 800a794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a798:	b08b      	sub	sp, #44	; 0x2c
 800a79a:	9305      	str	r3, [sp, #20]
 800a79c:	4bb2      	ldr	r3, [pc, #712]	; (800aa68 <__gethex+0x2d4>)
 800a79e:	9002      	str	r0, [sp, #8]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	468b      	mov	fp, r1
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	4690      	mov	r8, r2
 800a7a8:	9303      	str	r3, [sp, #12]
 800a7aa:	f7fa fe39 	bl	8005420 <strlen>
 800a7ae:	4682      	mov	sl, r0
 800a7b0:	9b03      	ldr	r3, [sp, #12]
 800a7b2:	f8db 2000 	ldr.w	r2, [fp]
 800a7b6:	4403      	add	r3, r0
 800a7b8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a7bc:	9306      	str	r3, [sp, #24]
 800a7be:	1c93      	adds	r3, r2, #2
 800a7c0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a7c4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a7c8:	32fe      	adds	r2, #254	; 0xfe
 800a7ca:	18d1      	adds	r1, r2, r3
 800a7cc:	461f      	mov	r7, r3
 800a7ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a7d2:	9101      	str	r1, [sp, #4]
 800a7d4:	2830      	cmp	r0, #48	; 0x30
 800a7d6:	d0f8      	beq.n	800a7ca <__gethex+0x36>
 800a7d8:	f7ff ffc7 	bl	800a76a <__hexdig_fun>
 800a7dc:	4604      	mov	r4, r0
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	d13a      	bne.n	800a858 <__gethex+0xc4>
 800a7e2:	4652      	mov	r2, sl
 800a7e4:	4638      	mov	r0, r7
 800a7e6:	9903      	ldr	r1, [sp, #12]
 800a7e8:	f001 fa26 	bl	800bc38 <strncmp>
 800a7ec:	4605      	mov	r5, r0
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	d166      	bne.n	800a8c0 <__gethex+0x12c>
 800a7f2:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a7f6:	eb07 060a 	add.w	r6, r7, sl
 800a7fa:	f7ff ffb6 	bl	800a76a <__hexdig_fun>
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d060      	beq.n	800a8c4 <__gethex+0x130>
 800a802:	4633      	mov	r3, r6
 800a804:	7818      	ldrb	r0, [r3, #0]
 800a806:	461f      	mov	r7, r3
 800a808:	2830      	cmp	r0, #48	; 0x30
 800a80a:	f103 0301 	add.w	r3, r3, #1
 800a80e:	d0f9      	beq.n	800a804 <__gethex+0x70>
 800a810:	f7ff ffab 	bl	800a76a <__hexdig_fun>
 800a814:	2301      	movs	r3, #1
 800a816:	fab0 f480 	clz	r4, r0
 800a81a:	4635      	mov	r5, r6
 800a81c:	0964      	lsrs	r4, r4, #5
 800a81e:	9301      	str	r3, [sp, #4]
 800a820:	463a      	mov	r2, r7
 800a822:	4616      	mov	r6, r2
 800a824:	7830      	ldrb	r0, [r6, #0]
 800a826:	3201      	adds	r2, #1
 800a828:	f7ff ff9f 	bl	800a76a <__hexdig_fun>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	d1f8      	bne.n	800a822 <__gethex+0x8e>
 800a830:	4652      	mov	r2, sl
 800a832:	4630      	mov	r0, r6
 800a834:	9903      	ldr	r1, [sp, #12]
 800a836:	f001 f9ff 	bl	800bc38 <strncmp>
 800a83a:	b980      	cbnz	r0, 800a85e <__gethex+0xca>
 800a83c:	b94d      	cbnz	r5, 800a852 <__gethex+0xbe>
 800a83e:	eb06 050a 	add.w	r5, r6, sl
 800a842:	462a      	mov	r2, r5
 800a844:	4616      	mov	r6, r2
 800a846:	7830      	ldrb	r0, [r6, #0]
 800a848:	3201      	adds	r2, #1
 800a84a:	f7ff ff8e 	bl	800a76a <__hexdig_fun>
 800a84e:	2800      	cmp	r0, #0
 800a850:	d1f8      	bne.n	800a844 <__gethex+0xb0>
 800a852:	1bad      	subs	r5, r5, r6
 800a854:	00ad      	lsls	r5, r5, #2
 800a856:	e004      	b.n	800a862 <__gethex+0xce>
 800a858:	2400      	movs	r4, #0
 800a85a:	4625      	mov	r5, r4
 800a85c:	e7e0      	b.n	800a820 <__gethex+0x8c>
 800a85e:	2d00      	cmp	r5, #0
 800a860:	d1f7      	bne.n	800a852 <__gethex+0xbe>
 800a862:	7833      	ldrb	r3, [r6, #0]
 800a864:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a868:	2b50      	cmp	r3, #80	; 0x50
 800a86a:	d139      	bne.n	800a8e0 <__gethex+0x14c>
 800a86c:	7873      	ldrb	r3, [r6, #1]
 800a86e:	2b2b      	cmp	r3, #43	; 0x2b
 800a870:	d02a      	beq.n	800a8c8 <__gethex+0x134>
 800a872:	2b2d      	cmp	r3, #45	; 0x2d
 800a874:	d02c      	beq.n	800a8d0 <__gethex+0x13c>
 800a876:	f04f 0900 	mov.w	r9, #0
 800a87a:	1c71      	adds	r1, r6, #1
 800a87c:	7808      	ldrb	r0, [r1, #0]
 800a87e:	f7ff ff74 	bl	800a76a <__hexdig_fun>
 800a882:	1e43      	subs	r3, r0, #1
 800a884:	b2db      	uxtb	r3, r3
 800a886:	2b18      	cmp	r3, #24
 800a888:	d82a      	bhi.n	800a8e0 <__gethex+0x14c>
 800a88a:	f1a0 0210 	sub.w	r2, r0, #16
 800a88e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a892:	f7ff ff6a 	bl	800a76a <__hexdig_fun>
 800a896:	1e43      	subs	r3, r0, #1
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	2b18      	cmp	r3, #24
 800a89c:	d91b      	bls.n	800a8d6 <__gethex+0x142>
 800a89e:	f1b9 0f00 	cmp.w	r9, #0
 800a8a2:	d000      	beq.n	800a8a6 <__gethex+0x112>
 800a8a4:	4252      	negs	r2, r2
 800a8a6:	4415      	add	r5, r2
 800a8a8:	f8cb 1000 	str.w	r1, [fp]
 800a8ac:	b1d4      	cbz	r4, 800a8e4 <__gethex+0x150>
 800a8ae:	9b01      	ldr	r3, [sp, #4]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	bf14      	ite	ne
 800a8b4:	2700      	movne	r7, #0
 800a8b6:	2706      	moveq	r7, #6
 800a8b8:	4638      	mov	r0, r7
 800a8ba:	b00b      	add	sp, #44	; 0x2c
 800a8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c0:	463e      	mov	r6, r7
 800a8c2:	4625      	mov	r5, r4
 800a8c4:	2401      	movs	r4, #1
 800a8c6:	e7cc      	b.n	800a862 <__gethex+0xce>
 800a8c8:	f04f 0900 	mov.w	r9, #0
 800a8cc:	1cb1      	adds	r1, r6, #2
 800a8ce:	e7d5      	b.n	800a87c <__gethex+0xe8>
 800a8d0:	f04f 0901 	mov.w	r9, #1
 800a8d4:	e7fa      	b.n	800a8cc <__gethex+0x138>
 800a8d6:	230a      	movs	r3, #10
 800a8d8:	fb03 0202 	mla	r2, r3, r2, r0
 800a8dc:	3a10      	subs	r2, #16
 800a8de:	e7d6      	b.n	800a88e <__gethex+0xfa>
 800a8e0:	4631      	mov	r1, r6
 800a8e2:	e7e1      	b.n	800a8a8 <__gethex+0x114>
 800a8e4:	4621      	mov	r1, r4
 800a8e6:	1bf3      	subs	r3, r6, r7
 800a8e8:	3b01      	subs	r3, #1
 800a8ea:	2b07      	cmp	r3, #7
 800a8ec:	dc0a      	bgt.n	800a904 <__gethex+0x170>
 800a8ee:	9802      	ldr	r0, [sp, #8]
 800a8f0:	f000 fa88 	bl	800ae04 <_Balloc>
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	b940      	cbnz	r0, 800a90a <__gethex+0x176>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	21de      	movs	r1, #222	; 0xde
 800a8fc:	4b5b      	ldr	r3, [pc, #364]	; (800aa6c <__gethex+0x2d8>)
 800a8fe:	485c      	ldr	r0, [pc, #368]	; (800aa70 <__gethex+0x2dc>)
 800a900:	f001 f9bc 	bl	800bc7c <__assert_func>
 800a904:	3101      	adds	r1, #1
 800a906:	105b      	asrs	r3, r3, #1
 800a908:	e7ef      	b.n	800a8ea <__gethex+0x156>
 800a90a:	f04f 0b00 	mov.w	fp, #0
 800a90e:	f100 0914 	add.w	r9, r0, #20
 800a912:	f1ca 0301 	rsb	r3, sl, #1
 800a916:	f8cd 9010 	str.w	r9, [sp, #16]
 800a91a:	f8cd b004 	str.w	fp, [sp, #4]
 800a91e:	9308      	str	r3, [sp, #32]
 800a920:	42b7      	cmp	r7, r6
 800a922:	d33f      	bcc.n	800a9a4 <__gethex+0x210>
 800a924:	9f04      	ldr	r7, [sp, #16]
 800a926:	9b01      	ldr	r3, [sp, #4]
 800a928:	f847 3b04 	str.w	r3, [r7], #4
 800a92c:	eba7 0709 	sub.w	r7, r7, r9
 800a930:	10bf      	asrs	r7, r7, #2
 800a932:	6127      	str	r7, [r4, #16]
 800a934:	4618      	mov	r0, r3
 800a936:	f000 fb57 	bl	800afe8 <__hi0bits>
 800a93a:	017f      	lsls	r7, r7, #5
 800a93c:	f8d8 6000 	ldr.w	r6, [r8]
 800a940:	1a3f      	subs	r7, r7, r0
 800a942:	42b7      	cmp	r7, r6
 800a944:	dd62      	ble.n	800aa0c <__gethex+0x278>
 800a946:	1bbf      	subs	r7, r7, r6
 800a948:	4639      	mov	r1, r7
 800a94a:	4620      	mov	r0, r4
 800a94c:	f000 fef1 	bl	800b732 <__any_on>
 800a950:	4682      	mov	sl, r0
 800a952:	b1a8      	cbz	r0, 800a980 <__gethex+0x1ec>
 800a954:	f04f 0a01 	mov.w	sl, #1
 800a958:	1e7b      	subs	r3, r7, #1
 800a95a:	1159      	asrs	r1, r3, #5
 800a95c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a960:	f003 021f 	and.w	r2, r3, #31
 800a964:	fa0a f202 	lsl.w	r2, sl, r2
 800a968:	420a      	tst	r2, r1
 800a96a:	d009      	beq.n	800a980 <__gethex+0x1ec>
 800a96c:	4553      	cmp	r3, sl
 800a96e:	dd05      	ble.n	800a97c <__gethex+0x1e8>
 800a970:	4620      	mov	r0, r4
 800a972:	1eb9      	subs	r1, r7, #2
 800a974:	f000 fedd 	bl	800b732 <__any_on>
 800a978:	2800      	cmp	r0, #0
 800a97a:	d144      	bne.n	800aa06 <__gethex+0x272>
 800a97c:	f04f 0a02 	mov.w	sl, #2
 800a980:	4639      	mov	r1, r7
 800a982:	4620      	mov	r0, r4
 800a984:	f7ff fe9e 	bl	800a6c4 <rshift>
 800a988:	443d      	add	r5, r7
 800a98a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a98e:	42ab      	cmp	r3, r5
 800a990:	da4a      	bge.n	800aa28 <__gethex+0x294>
 800a992:	4621      	mov	r1, r4
 800a994:	9802      	ldr	r0, [sp, #8]
 800a996:	f000 fa75 	bl	800ae84 <_Bfree>
 800a99a:	2300      	movs	r3, #0
 800a99c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a99e:	27a3      	movs	r7, #163	; 0xa3
 800a9a0:	6013      	str	r3, [r2, #0]
 800a9a2:	e789      	b.n	800a8b8 <__gethex+0x124>
 800a9a4:	1e73      	subs	r3, r6, #1
 800a9a6:	9a06      	ldr	r2, [sp, #24]
 800a9a8:	9307      	str	r3, [sp, #28]
 800a9aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d019      	beq.n	800a9e6 <__gethex+0x252>
 800a9b2:	f1bb 0f20 	cmp.w	fp, #32
 800a9b6:	d107      	bne.n	800a9c8 <__gethex+0x234>
 800a9b8:	9b04      	ldr	r3, [sp, #16]
 800a9ba:	9a01      	ldr	r2, [sp, #4]
 800a9bc:	f843 2b04 	str.w	r2, [r3], #4
 800a9c0:	9304      	str	r3, [sp, #16]
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	469b      	mov	fp, r3
 800a9c6:	9301      	str	r3, [sp, #4]
 800a9c8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a9cc:	f7ff fecd 	bl	800a76a <__hexdig_fun>
 800a9d0:	9b01      	ldr	r3, [sp, #4]
 800a9d2:	f000 000f 	and.w	r0, r0, #15
 800a9d6:	fa00 f00b 	lsl.w	r0, r0, fp
 800a9da:	4303      	orrs	r3, r0
 800a9dc:	9301      	str	r3, [sp, #4]
 800a9de:	f10b 0b04 	add.w	fp, fp, #4
 800a9e2:	9b07      	ldr	r3, [sp, #28]
 800a9e4:	e00d      	b.n	800aa02 <__gethex+0x26e>
 800a9e6:	9a08      	ldr	r2, [sp, #32]
 800a9e8:	1e73      	subs	r3, r6, #1
 800a9ea:	4413      	add	r3, r2
 800a9ec:	42bb      	cmp	r3, r7
 800a9ee:	d3e0      	bcc.n	800a9b2 <__gethex+0x21e>
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	4652      	mov	r2, sl
 800a9f4:	9903      	ldr	r1, [sp, #12]
 800a9f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a9f8:	f001 f91e 	bl	800bc38 <strncmp>
 800a9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	d1d7      	bne.n	800a9b2 <__gethex+0x21e>
 800aa02:	461e      	mov	r6, r3
 800aa04:	e78c      	b.n	800a920 <__gethex+0x18c>
 800aa06:	f04f 0a03 	mov.w	sl, #3
 800aa0a:	e7b9      	b.n	800a980 <__gethex+0x1ec>
 800aa0c:	da09      	bge.n	800aa22 <__gethex+0x28e>
 800aa0e:	1bf7      	subs	r7, r6, r7
 800aa10:	4621      	mov	r1, r4
 800aa12:	463a      	mov	r2, r7
 800aa14:	9802      	ldr	r0, [sp, #8]
 800aa16:	f000 fc4d 	bl	800b2b4 <__lshift>
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	1bed      	subs	r5, r5, r7
 800aa1e:	f100 0914 	add.w	r9, r0, #20
 800aa22:	f04f 0a00 	mov.w	sl, #0
 800aa26:	e7b0      	b.n	800a98a <__gethex+0x1f6>
 800aa28:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aa2c:	42a8      	cmp	r0, r5
 800aa2e:	dd72      	ble.n	800ab16 <__gethex+0x382>
 800aa30:	1b45      	subs	r5, r0, r5
 800aa32:	42ae      	cmp	r6, r5
 800aa34:	dc35      	bgt.n	800aaa2 <__gethex+0x30e>
 800aa36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d029      	beq.n	800aa92 <__gethex+0x2fe>
 800aa3e:	2b03      	cmp	r3, #3
 800aa40:	d02b      	beq.n	800aa9a <__gethex+0x306>
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d11c      	bne.n	800aa80 <__gethex+0x2ec>
 800aa46:	42ae      	cmp	r6, r5
 800aa48:	d11a      	bne.n	800aa80 <__gethex+0x2ec>
 800aa4a:	2e01      	cmp	r6, #1
 800aa4c:	d112      	bne.n	800aa74 <__gethex+0x2e0>
 800aa4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aa52:	9a05      	ldr	r2, [sp, #20]
 800aa54:	2762      	movs	r7, #98	; 0x62
 800aa56:	6013      	str	r3, [r2, #0]
 800aa58:	2301      	movs	r3, #1
 800aa5a:	6123      	str	r3, [r4, #16]
 800aa5c:	f8c9 3000 	str.w	r3, [r9]
 800aa60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa62:	601c      	str	r4, [r3, #0]
 800aa64:	e728      	b.n	800a8b8 <__gethex+0x124>
 800aa66:	bf00      	nop
 800aa68:	0801d560 	.word	0x0801d560
 800aa6c:	0801d4e8 	.word	0x0801d4e8
 800aa70:	0801d4f9 	.word	0x0801d4f9
 800aa74:	4620      	mov	r0, r4
 800aa76:	1e71      	subs	r1, r6, #1
 800aa78:	f000 fe5b 	bl	800b732 <__any_on>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	d1e6      	bne.n	800aa4e <__gethex+0x2ba>
 800aa80:	4621      	mov	r1, r4
 800aa82:	9802      	ldr	r0, [sp, #8]
 800aa84:	f000 f9fe 	bl	800ae84 <_Bfree>
 800aa88:	2300      	movs	r3, #0
 800aa8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa8c:	2750      	movs	r7, #80	; 0x50
 800aa8e:	6013      	str	r3, [r2, #0]
 800aa90:	e712      	b.n	800a8b8 <__gethex+0x124>
 800aa92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d1f3      	bne.n	800aa80 <__gethex+0x2ec>
 800aa98:	e7d9      	b.n	800aa4e <__gethex+0x2ba>
 800aa9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d1d6      	bne.n	800aa4e <__gethex+0x2ba>
 800aaa0:	e7ee      	b.n	800aa80 <__gethex+0x2ec>
 800aaa2:	1e6f      	subs	r7, r5, #1
 800aaa4:	f1ba 0f00 	cmp.w	sl, #0
 800aaa8:	d132      	bne.n	800ab10 <__gethex+0x37c>
 800aaaa:	b127      	cbz	r7, 800aab6 <__gethex+0x322>
 800aaac:	4639      	mov	r1, r7
 800aaae:	4620      	mov	r0, r4
 800aab0:	f000 fe3f 	bl	800b732 <__any_on>
 800aab4:	4682      	mov	sl, r0
 800aab6:	2101      	movs	r1, #1
 800aab8:	117b      	asrs	r3, r7, #5
 800aaba:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800aabe:	f007 071f 	and.w	r7, r7, #31
 800aac2:	fa01 f707 	lsl.w	r7, r1, r7
 800aac6:	421f      	tst	r7, r3
 800aac8:	f04f 0702 	mov.w	r7, #2
 800aacc:	4629      	mov	r1, r5
 800aace:	4620      	mov	r0, r4
 800aad0:	bf18      	it	ne
 800aad2:	f04a 0a02 	orrne.w	sl, sl, #2
 800aad6:	1b76      	subs	r6, r6, r5
 800aad8:	f7ff fdf4 	bl	800a6c4 <rshift>
 800aadc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aae0:	f1ba 0f00 	cmp.w	sl, #0
 800aae4:	d048      	beq.n	800ab78 <__gethex+0x3e4>
 800aae6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d015      	beq.n	800ab1a <__gethex+0x386>
 800aaee:	2b03      	cmp	r3, #3
 800aaf0:	d017      	beq.n	800ab22 <__gethex+0x38e>
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d109      	bne.n	800ab0a <__gethex+0x376>
 800aaf6:	f01a 0f02 	tst.w	sl, #2
 800aafa:	d006      	beq.n	800ab0a <__gethex+0x376>
 800aafc:	f8d9 0000 	ldr.w	r0, [r9]
 800ab00:	ea4a 0a00 	orr.w	sl, sl, r0
 800ab04:	f01a 0f01 	tst.w	sl, #1
 800ab08:	d10e      	bne.n	800ab28 <__gethex+0x394>
 800ab0a:	f047 0710 	orr.w	r7, r7, #16
 800ab0e:	e033      	b.n	800ab78 <__gethex+0x3e4>
 800ab10:	f04f 0a01 	mov.w	sl, #1
 800ab14:	e7cf      	b.n	800aab6 <__gethex+0x322>
 800ab16:	2701      	movs	r7, #1
 800ab18:	e7e2      	b.n	800aae0 <__gethex+0x34c>
 800ab1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab1c:	f1c3 0301 	rsb	r3, r3, #1
 800ab20:	9315      	str	r3, [sp, #84]	; 0x54
 800ab22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d0f0      	beq.n	800ab0a <__gethex+0x376>
 800ab28:	f04f 0c00 	mov.w	ip, #0
 800ab2c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ab30:	f104 0314 	add.w	r3, r4, #20
 800ab34:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ab38:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab42:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ab46:	d01c      	beq.n	800ab82 <__gethex+0x3ee>
 800ab48:	3201      	adds	r2, #1
 800ab4a:	6002      	str	r2, [r0, #0]
 800ab4c:	2f02      	cmp	r7, #2
 800ab4e:	f104 0314 	add.w	r3, r4, #20
 800ab52:	d13d      	bne.n	800abd0 <__gethex+0x43c>
 800ab54:	f8d8 2000 	ldr.w	r2, [r8]
 800ab58:	3a01      	subs	r2, #1
 800ab5a:	42b2      	cmp	r2, r6
 800ab5c:	d10a      	bne.n	800ab74 <__gethex+0x3e0>
 800ab5e:	2201      	movs	r2, #1
 800ab60:	1171      	asrs	r1, r6, #5
 800ab62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab66:	f006 061f 	and.w	r6, r6, #31
 800ab6a:	fa02 f606 	lsl.w	r6, r2, r6
 800ab6e:	421e      	tst	r6, r3
 800ab70:	bf18      	it	ne
 800ab72:	4617      	movne	r7, r2
 800ab74:	f047 0720 	orr.w	r7, r7, #32
 800ab78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab7a:	601c      	str	r4, [r3, #0]
 800ab7c:	9b05      	ldr	r3, [sp, #20]
 800ab7e:	601d      	str	r5, [r3, #0]
 800ab80:	e69a      	b.n	800a8b8 <__gethex+0x124>
 800ab82:	4299      	cmp	r1, r3
 800ab84:	f843 cc04 	str.w	ip, [r3, #-4]
 800ab88:	d8d8      	bhi.n	800ab3c <__gethex+0x3a8>
 800ab8a:	68a3      	ldr	r3, [r4, #8]
 800ab8c:	459b      	cmp	fp, r3
 800ab8e:	db17      	blt.n	800abc0 <__gethex+0x42c>
 800ab90:	6861      	ldr	r1, [r4, #4]
 800ab92:	9802      	ldr	r0, [sp, #8]
 800ab94:	3101      	adds	r1, #1
 800ab96:	f000 f935 	bl	800ae04 <_Balloc>
 800ab9a:	4681      	mov	r9, r0
 800ab9c:	b918      	cbnz	r0, 800aba6 <__gethex+0x412>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	2184      	movs	r1, #132	; 0x84
 800aba2:	4b19      	ldr	r3, [pc, #100]	; (800ac08 <__gethex+0x474>)
 800aba4:	e6ab      	b.n	800a8fe <__gethex+0x16a>
 800aba6:	6922      	ldr	r2, [r4, #16]
 800aba8:	f104 010c 	add.w	r1, r4, #12
 800abac:	3202      	adds	r2, #2
 800abae:	0092      	lsls	r2, r2, #2
 800abb0:	300c      	adds	r0, #12
 800abb2:	f000 f919 	bl	800ade8 <memcpy>
 800abb6:	4621      	mov	r1, r4
 800abb8:	9802      	ldr	r0, [sp, #8]
 800abba:	f000 f963 	bl	800ae84 <_Bfree>
 800abbe:	464c      	mov	r4, r9
 800abc0:	6923      	ldr	r3, [r4, #16]
 800abc2:	1c5a      	adds	r2, r3, #1
 800abc4:	6122      	str	r2, [r4, #16]
 800abc6:	2201      	movs	r2, #1
 800abc8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800abcc:	615a      	str	r2, [r3, #20]
 800abce:	e7bd      	b.n	800ab4c <__gethex+0x3b8>
 800abd0:	6922      	ldr	r2, [r4, #16]
 800abd2:	455a      	cmp	r2, fp
 800abd4:	dd0b      	ble.n	800abee <__gethex+0x45a>
 800abd6:	2101      	movs	r1, #1
 800abd8:	4620      	mov	r0, r4
 800abda:	f7ff fd73 	bl	800a6c4 <rshift>
 800abde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abe2:	3501      	adds	r5, #1
 800abe4:	42ab      	cmp	r3, r5
 800abe6:	f6ff aed4 	blt.w	800a992 <__gethex+0x1fe>
 800abea:	2701      	movs	r7, #1
 800abec:	e7c2      	b.n	800ab74 <__gethex+0x3e0>
 800abee:	f016 061f 	ands.w	r6, r6, #31
 800abf2:	d0fa      	beq.n	800abea <__gethex+0x456>
 800abf4:	4453      	add	r3, sl
 800abf6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800abfa:	f000 f9f5 	bl	800afe8 <__hi0bits>
 800abfe:	f1c6 0620 	rsb	r6, r6, #32
 800ac02:	42b0      	cmp	r0, r6
 800ac04:	dbe7      	blt.n	800abd6 <__gethex+0x442>
 800ac06:	e7f0      	b.n	800abea <__gethex+0x456>
 800ac08:	0801d4e8 	.word	0x0801d4e8

0800ac0c <L_shift>:
 800ac0c:	f1c2 0208 	rsb	r2, r2, #8
 800ac10:	0092      	lsls	r2, r2, #2
 800ac12:	b570      	push	{r4, r5, r6, lr}
 800ac14:	f1c2 0620 	rsb	r6, r2, #32
 800ac18:	6843      	ldr	r3, [r0, #4]
 800ac1a:	6804      	ldr	r4, [r0, #0]
 800ac1c:	fa03 f506 	lsl.w	r5, r3, r6
 800ac20:	432c      	orrs	r4, r5
 800ac22:	40d3      	lsrs	r3, r2
 800ac24:	6004      	str	r4, [r0, #0]
 800ac26:	f840 3f04 	str.w	r3, [r0, #4]!
 800ac2a:	4288      	cmp	r0, r1
 800ac2c:	d3f4      	bcc.n	800ac18 <L_shift+0xc>
 800ac2e:	bd70      	pop	{r4, r5, r6, pc}

0800ac30 <__match>:
 800ac30:	b530      	push	{r4, r5, lr}
 800ac32:	6803      	ldr	r3, [r0, #0]
 800ac34:	3301      	adds	r3, #1
 800ac36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac3a:	b914      	cbnz	r4, 800ac42 <__match+0x12>
 800ac3c:	6003      	str	r3, [r0, #0]
 800ac3e:	2001      	movs	r0, #1
 800ac40:	bd30      	pop	{r4, r5, pc}
 800ac42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ac4a:	2d19      	cmp	r5, #25
 800ac4c:	bf98      	it	ls
 800ac4e:	3220      	addls	r2, #32
 800ac50:	42a2      	cmp	r2, r4
 800ac52:	d0f0      	beq.n	800ac36 <__match+0x6>
 800ac54:	2000      	movs	r0, #0
 800ac56:	e7f3      	b.n	800ac40 <__match+0x10>

0800ac58 <__hexnan>:
 800ac58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5c:	2500      	movs	r5, #0
 800ac5e:	680b      	ldr	r3, [r1, #0]
 800ac60:	4682      	mov	sl, r0
 800ac62:	115e      	asrs	r6, r3, #5
 800ac64:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ac68:	f013 031f 	ands.w	r3, r3, #31
 800ac6c:	bf18      	it	ne
 800ac6e:	3604      	addne	r6, #4
 800ac70:	1f37      	subs	r7, r6, #4
 800ac72:	46b9      	mov	r9, r7
 800ac74:	463c      	mov	r4, r7
 800ac76:	46ab      	mov	fp, r5
 800ac78:	b087      	sub	sp, #28
 800ac7a:	4690      	mov	r8, r2
 800ac7c:	6802      	ldr	r2, [r0, #0]
 800ac7e:	9301      	str	r3, [sp, #4]
 800ac80:	f846 5c04 	str.w	r5, [r6, #-4]
 800ac84:	9502      	str	r5, [sp, #8]
 800ac86:	7851      	ldrb	r1, [r2, #1]
 800ac88:	1c53      	adds	r3, r2, #1
 800ac8a:	9303      	str	r3, [sp, #12]
 800ac8c:	b341      	cbz	r1, 800ace0 <__hexnan+0x88>
 800ac8e:	4608      	mov	r0, r1
 800ac90:	9205      	str	r2, [sp, #20]
 800ac92:	9104      	str	r1, [sp, #16]
 800ac94:	f7ff fd69 	bl	800a76a <__hexdig_fun>
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	d14f      	bne.n	800ad3c <__hexnan+0xe4>
 800ac9c:	9904      	ldr	r1, [sp, #16]
 800ac9e:	9a05      	ldr	r2, [sp, #20]
 800aca0:	2920      	cmp	r1, #32
 800aca2:	d818      	bhi.n	800acd6 <__hexnan+0x7e>
 800aca4:	9b02      	ldr	r3, [sp, #8]
 800aca6:	459b      	cmp	fp, r3
 800aca8:	dd13      	ble.n	800acd2 <__hexnan+0x7a>
 800acaa:	454c      	cmp	r4, r9
 800acac:	d206      	bcs.n	800acbc <__hexnan+0x64>
 800acae:	2d07      	cmp	r5, #7
 800acb0:	dc04      	bgt.n	800acbc <__hexnan+0x64>
 800acb2:	462a      	mov	r2, r5
 800acb4:	4649      	mov	r1, r9
 800acb6:	4620      	mov	r0, r4
 800acb8:	f7ff ffa8 	bl	800ac0c <L_shift>
 800acbc:	4544      	cmp	r4, r8
 800acbe:	d950      	bls.n	800ad62 <__hexnan+0x10a>
 800acc0:	2300      	movs	r3, #0
 800acc2:	f1a4 0904 	sub.w	r9, r4, #4
 800acc6:	f844 3c04 	str.w	r3, [r4, #-4]
 800acca:	461d      	mov	r5, r3
 800accc:	464c      	mov	r4, r9
 800acce:	f8cd b008 	str.w	fp, [sp, #8]
 800acd2:	9a03      	ldr	r2, [sp, #12]
 800acd4:	e7d7      	b.n	800ac86 <__hexnan+0x2e>
 800acd6:	2929      	cmp	r1, #41	; 0x29
 800acd8:	d156      	bne.n	800ad88 <__hexnan+0x130>
 800acda:	3202      	adds	r2, #2
 800acdc:	f8ca 2000 	str.w	r2, [sl]
 800ace0:	f1bb 0f00 	cmp.w	fp, #0
 800ace4:	d050      	beq.n	800ad88 <__hexnan+0x130>
 800ace6:	454c      	cmp	r4, r9
 800ace8:	d206      	bcs.n	800acf8 <__hexnan+0xa0>
 800acea:	2d07      	cmp	r5, #7
 800acec:	dc04      	bgt.n	800acf8 <__hexnan+0xa0>
 800acee:	462a      	mov	r2, r5
 800acf0:	4649      	mov	r1, r9
 800acf2:	4620      	mov	r0, r4
 800acf4:	f7ff ff8a 	bl	800ac0c <L_shift>
 800acf8:	4544      	cmp	r4, r8
 800acfa:	d934      	bls.n	800ad66 <__hexnan+0x10e>
 800acfc:	4623      	mov	r3, r4
 800acfe:	f1a8 0204 	sub.w	r2, r8, #4
 800ad02:	f853 1b04 	ldr.w	r1, [r3], #4
 800ad06:	429f      	cmp	r7, r3
 800ad08:	f842 1f04 	str.w	r1, [r2, #4]!
 800ad0c:	d2f9      	bcs.n	800ad02 <__hexnan+0xaa>
 800ad0e:	1b3b      	subs	r3, r7, r4
 800ad10:	f023 0303 	bic.w	r3, r3, #3
 800ad14:	3304      	adds	r3, #4
 800ad16:	3401      	adds	r4, #1
 800ad18:	3e03      	subs	r6, #3
 800ad1a:	42b4      	cmp	r4, r6
 800ad1c:	bf88      	it	hi
 800ad1e:	2304      	movhi	r3, #4
 800ad20:	2200      	movs	r2, #0
 800ad22:	4443      	add	r3, r8
 800ad24:	f843 2b04 	str.w	r2, [r3], #4
 800ad28:	429f      	cmp	r7, r3
 800ad2a:	d2fb      	bcs.n	800ad24 <__hexnan+0xcc>
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	b91b      	cbnz	r3, 800ad38 <__hexnan+0xe0>
 800ad30:	4547      	cmp	r7, r8
 800ad32:	d127      	bne.n	800ad84 <__hexnan+0x12c>
 800ad34:	2301      	movs	r3, #1
 800ad36:	603b      	str	r3, [r7, #0]
 800ad38:	2005      	movs	r0, #5
 800ad3a:	e026      	b.n	800ad8a <__hexnan+0x132>
 800ad3c:	3501      	adds	r5, #1
 800ad3e:	2d08      	cmp	r5, #8
 800ad40:	f10b 0b01 	add.w	fp, fp, #1
 800ad44:	dd06      	ble.n	800ad54 <__hexnan+0xfc>
 800ad46:	4544      	cmp	r4, r8
 800ad48:	d9c3      	bls.n	800acd2 <__hexnan+0x7a>
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	2501      	movs	r5, #1
 800ad4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad52:	3c04      	subs	r4, #4
 800ad54:	6822      	ldr	r2, [r4, #0]
 800ad56:	f000 000f 	and.w	r0, r0, #15
 800ad5a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ad5e:	6022      	str	r2, [r4, #0]
 800ad60:	e7b7      	b.n	800acd2 <__hexnan+0x7a>
 800ad62:	2508      	movs	r5, #8
 800ad64:	e7b5      	b.n	800acd2 <__hexnan+0x7a>
 800ad66:	9b01      	ldr	r3, [sp, #4]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d0df      	beq.n	800ad2c <__hexnan+0xd4>
 800ad6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad70:	f1c3 0320 	rsb	r3, r3, #32
 800ad74:	fa22 f303 	lsr.w	r3, r2, r3
 800ad78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ad7c:	401a      	ands	r2, r3
 800ad7e:	f846 2c04 	str.w	r2, [r6, #-4]
 800ad82:	e7d3      	b.n	800ad2c <__hexnan+0xd4>
 800ad84:	3f04      	subs	r7, #4
 800ad86:	e7d1      	b.n	800ad2c <__hexnan+0xd4>
 800ad88:	2004      	movs	r0, #4
 800ad8a:	b007      	add	sp, #28
 800ad8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad90 <_localeconv_r>:
 800ad90:	4800      	ldr	r0, [pc, #0]	; (800ad94 <_localeconv_r+0x4>)
 800ad92:	4770      	bx	lr
 800ad94:	20000168 	.word	0x20000168

0800ad98 <malloc>:
 800ad98:	4b02      	ldr	r3, [pc, #8]	; (800ada4 <malloc+0xc>)
 800ad9a:	4601      	mov	r1, r0
 800ad9c:	6818      	ldr	r0, [r3, #0]
 800ad9e:	f000 bd65 	b.w	800b86c <_malloc_r>
 800ada2:	bf00      	nop
 800ada4:	20000010 	.word	0x20000010

0800ada8 <__ascii_mbtowc>:
 800ada8:	b082      	sub	sp, #8
 800adaa:	b901      	cbnz	r1, 800adae <__ascii_mbtowc+0x6>
 800adac:	a901      	add	r1, sp, #4
 800adae:	b142      	cbz	r2, 800adc2 <__ascii_mbtowc+0x1a>
 800adb0:	b14b      	cbz	r3, 800adc6 <__ascii_mbtowc+0x1e>
 800adb2:	7813      	ldrb	r3, [r2, #0]
 800adb4:	600b      	str	r3, [r1, #0]
 800adb6:	7812      	ldrb	r2, [r2, #0]
 800adb8:	1e10      	subs	r0, r2, #0
 800adba:	bf18      	it	ne
 800adbc:	2001      	movne	r0, #1
 800adbe:	b002      	add	sp, #8
 800adc0:	4770      	bx	lr
 800adc2:	4610      	mov	r0, r2
 800adc4:	e7fb      	b.n	800adbe <__ascii_mbtowc+0x16>
 800adc6:	f06f 0001 	mvn.w	r0, #1
 800adca:	e7f8      	b.n	800adbe <__ascii_mbtowc+0x16>

0800adcc <memchr>:
 800adcc:	4603      	mov	r3, r0
 800adce:	b510      	push	{r4, lr}
 800add0:	b2c9      	uxtb	r1, r1
 800add2:	4402      	add	r2, r0
 800add4:	4293      	cmp	r3, r2
 800add6:	4618      	mov	r0, r3
 800add8:	d101      	bne.n	800adde <memchr+0x12>
 800adda:	2000      	movs	r0, #0
 800addc:	e003      	b.n	800ade6 <memchr+0x1a>
 800adde:	7804      	ldrb	r4, [r0, #0]
 800ade0:	3301      	adds	r3, #1
 800ade2:	428c      	cmp	r4, r1
 800ade4:	d1f6      	bne.n	800add4 <memchr+0x8>
 800ade6:	bd10      	pop	{r4, pc}

0800ade8 <memcpy>:
 800ade8:	440a      	add	r2, r1
 800adea:	4291      	cmp	r1, r2
 800adec:	f100 33ff 	add.w	r3, r0, #4294967295
 800adf0:	d100      	bne.n	800adf4 <memcpy+0xc>
 800adf2:	4770      	bx	lr
 800adf4:	b510      	push	{r4, lr}
 800adf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adfa:	4291      	cmp	r1, r2
 800adfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae00:	d1f9      	bne.n	800adf6 <memcpy+0xe>
 800ae02:	bd10      	pop	{r4, pc}

0800ae04 <_Balloc>:
 800ae04:	b570      	push	{r4, r5, r6, lr}
 800ae06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae08:	4604      	mov	r4, r0
 800ae0a:	460d      	mov	r5, r1
 800ae0c:	b976      	cbnz	r6, 800ae2c <_Balloc+0x28>
 800ae0e:	2010      	movs	r0, #16
 800ae10:	f7ff ffc2 	bl	800ad98 <malloc>
 800ae14:	4602      	mov	r2, r0
 800ae16:	6260      	str	r0, [r4, #36]	; 0x24
 800ae18:	b920      	cbnz	r0, 800ae24 <_Balloc+0x20>
 800ae1a:	2166      	movs	r1, #102	; 0x66
 800ae1c:	4b17      	ldr	r3, [pc, #92]	; (800ae7c <_Balloc+0x78>)
 800ae1e:	4818      	ldr	r0, [pc, #96]	; (800ae80 <_Balloc+0x7c>)
 800ae20:	f000 ff2c 	bl	800bc7c <__assert_func>
 800ae24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae28:	6006      	str	r6, [r0, #0]
 800ae2a:	60c6      	str	r6, [r0, #12]
 800ae2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae2e:	68f3      	ldr	r3, [r6, #12]
 800ae30:	b183      	cbz	r3, 800ae54 <_Balloc+0x50>
 800ae32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae3a:	b9b8      	cbnz	r0, 800ae6c <_Balloc+0x68>
 800ae3c:	2101      	movs	r1, #1
 800ae3e:	fa01 f605 	lsl.w	r6, r1, r5
 800ae42:	1d72      	adds	r2, r6, #5
 800ae44:	4620      	mov	r0, r4
 800ae46:	0092      	lsls	r2, r2, #2
 800ae48:	f000 fc94 	bl	800b774 <_calloc_r>
 800ae4c:	b160      	cbz	r0, 800ae68 <_Balloc+0x64>
 800ae4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae52:	e00e      	b.n	800ae72 <_Balloc+0x6e>
 800ae54:	2221      	movs	r2, #33	; 0x21
 800ae56:	2104      	movs	r1, #4
 800ae58:	4620      	mov	r0, r4
 800ae5a:	f000 fc8b 	bl	800b774 <_calloc_r>
 800ae5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae60:	60f0      	str	r0, [r6, #12]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d1e4      	bne.n	800ae32 <_Balloc+0x2e>
 800ae68:	2000      	movs	r0, #0
 800ae6a:	bd70      	pop	{r4, r5, r6, pc}
 800ae6c:	6802      	ldr	r2, [r0, #0]
 800ae6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae72:	2300      	movs	r3, #0
 800ae74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae78:	e7f7      	b.n	800ae6a <_Balloc+0x66>
 800ae7a:	bf00      	nop
 800ae7c:	0801d476 	.word	0x0801d476
 800ae80:	0801d574 	.word	0x0801d574

0800ae84 <_Bfree>:
 800ae84:	b570      	push	{r4, r5, r6, lr}
 800ae86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae88:	4605      	mov	r5, r0
 800ae8a:	460c      	mov	r4, r1
 800ae8c:	b976      	cbnz	r6, 800aeac <_Bfree+0x28>
 800ae8e:	2010      	movs	r0, #16
 800ae90:	f7ff ff82 	bl	800ad98 <malloc>
 800ae94:	4602      	mov	r2, r0
 800ae96:	6268      	str	r0, [r5, #36]	; 0x24
 800ae98:	b920      	cbnz	r0, 800aea4 <_Bfree+0x20>
 800ae9a:	218a      	movs	r1, #138	; 0x8a
 800ae9c:	4b08      	ldr	r3, [pc, #32]	; (800aec0 <_Bfree+0x3c>)
 800ae9e:	4809      	ldr	r0, [pc, #36]	; (800aec4 <_Bfree+0x40>)
 800aea0:	f000 feec 	bl	800bc7c <__assert_func>
 800aea4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aea8:	6006      	str	r6, [r0, #0]
 800aeaa:	60c6      	str	r6, [r0, #12]
 800aeac:	b13c      	cbz	r4, 800aebe <_Bfree+0x3a>
 800aeae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aeb0:	6862      	ldr	r2, [r4, #4]
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aeb8:	6021      	str	r1, [r4, #0]
 800aeba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aebe:	bd70      	pop	{r4, r5, r6, pc}
 800aec0:	0801d476 	.word	0x0801d476
 800aec4:	0801d574 	.word	0x0801d574

0800aec8 <__multadd>:
 800aec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aecc:	4607      	mov	r7, r0
 800aece:	460c      	mov	r4, r1
 800aed0:	461e      	mov	r6, r3
 800aed2:	2000      	movs	r0, #0
 800aed4:	690d      	ldr	r5, [r1, #16]
 800aed6:	f101 0c14 	add.w	ip, r1, #20
 800aeda:	f8dc 3000 	ldr.w	r3, [ip]
 800aede:	3001      	adds	r0, #1
 800aee0:	b299      	uxth	r1, r3
 800aee2:	fb02 6101 	mla	r1, r2, r1, r6
 800aee6:	0c1e      	lsrs	r6, r3, #16
 800aee8:	0c0b      	lsrs	r3, r1, #16
 800aeea:	fb02 3306 	mla	r3, r2, r6, r3
 800aeee:	b289      	uxth	r1, r1
 800aef0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aef4:	4285      	cmp	r5, r0
 800aef6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aefa:	f84c 1b04 	str.w	r1, [ip], #4
 800aefe:	dcec      	bgt.n	800aeda <__multadd+0x12>
 800af00:	b30e      	cbz	r6, 800af46 <__multadd+0x7e>
 800af02:	68a3      	ldr	r3, [r4, #8]
 800af04:	42ab      	cmp	r3, r5
 800af06:	dc19      	bgt.n	800af3c <__multadd+0x74>
 800af08:	6861      	ldr	r1, [r4, #4]
 800af0a:	4638      	mov	r0, r7
 800af0c:	3101      	adds	r1, #1
 800af0e:	f7ff ff79 	bl	800ae04 <_Balloc>
 800af12:	4680      	mov	r8, r0
 800af14:	b928      	cbnz	r0, 800af22 <__multadd+0x5a>
 800af16:	4602      	mov	r2, r0
 800af18:	21b5      	movs	r1, #181	; 0xb5
 800af1a:	4b0c      	ldr	r3, [pc, #48]	; (800af4c <__multadd+0x84>)
 800af1c:	480c      	ldr	r0, [pc, #48]	; (800af50 <__multadd+0x88>)
 800af1e:	f000 fead 	bl	800bc7c <__assert_func>
 800af22:	6922      	ldr	r2, [r4, #16]
 800af24:	f104 010c 	add.w	r1, r4, #12
 800af28:	3202      	adds	r2, #2
 800af2a:	0092      	lsls	r2, r2, #2
 800af2c:	300c      	adds	r0, #12
 800af2e:	f7ff ff5b 	bl	800ade8 <memcpy>
 800af32:	4621      	mov	r1, r4
 800af34:	4638      	mov	r0, r7
 800af36:	f7ff ffa5 	bl	800ae84 <_Bfree>
 800af3a:	4644      	mov	r4, r8
 800af3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af40:	3501      	adds	r5, #1
 800af42:	615e      	str	r6, [r3, #20]
 800af44:	6125      	str	r5, [r4, #16]
 800af46:	4620      	mov	r0, r4
 800af48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af4c:	0801d4e8 	.word	0x0801d4e8
 800af50:	0801d574 	.word	0x0801d574

0800af54 <__s2b>:
 800af54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af58:	4615      	mov	r5, r2
 800af5a:	2209      	movs	r2, #9
 800af5c:	461f      	mov	r7, r3
 800af5e:	3308      	adds	r3, #8
 800af60:	460c      	mov	r4, r1
 800af62:	fb93 f3f2 	sdiv	r3, r3, r2
 800af66:	4606      	mov	r6, r0
 800af68:	2201      	movs	r2, #1
 800af6a:	2100      	movs	r1, #0
 800af6c:	429a      	cmp	r2, r3
 800af6e:	db09      	blt.n	800af84 <__s2b+0x30>
 800af70:	4630      	mov	r0, r6
 800af72:	f7ff ff47 	bl	800ae04 <_Balloc>
 800af76:	b940      	cbnz	r0, 800af8a <__s2b+0x36>
 800af78:	4602      	mov	r2, r0
 800af7a:	21ce      	movs	r1, #206	; 0xce
 800af7c:	4b18      	ldr	r3, [pc, #96]	; (800afe0 <__s2b+0x8c>)
 800af7e:	4819      	ldr	r0, [pc, #100]	; (800afe4 <__s2b+0x90>)
 800af80:	f000 fe7c 	bl	800bc7c <__assert_func>
 800af84:	0052      	lsls	r2, r2, #1
 800af86:	3101      	adds	r1, #1
 800af88:	e7f0      	b.n	800af6c <__s2b+0x18>
 800af8a:	9b08      	ldr	r3, [sp, #32]
 800af8c:	2d09      	cmp	r5, #9
 800af8e:	6143      	str	r3, [r0, #20]
 800af90:	f04f 0301 	mov.w	r3, #1
 800af94:	6103      	str	r3, [r0, #16]
 800af96:	dd16      	ble.n	800afc6 <__s2b+0x72>
 800af98:	f104 0909 	add.w	r9, r4, #9
 800af9c:	46c8      	mov	r8, r9
 800af9e:	442c      	add	r4, r5
 800afa0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800afa4:	4601      	mov	r1, r0
 800afa6:	220a      	movs	r2, #10
 800afa8:	4630      	mov	r0, r6
 800afaa:	3b30      	subs	r3, #48	; 0x30
 800afac:	f7ff ff8c 	bl	800aec8 <__multadd>
 800afb0:	45a0      	cmp	r8, r4
 800afb2:	d1f5      	bne.n	800afa0 <__s2b+0x4c>
 800afb4:	f1a5 0408 	sub.w	r4, r5, #8
 800afb8:	444c      	add	r4, r9
 800afba:	1b2d      	subs	r5, r5, r4
 800afbc:	1963      	adds	r3, r4, r5
 800afbe:	42bb      	cmp	r3, r7
 800afc0:	db04      	blt.n	800afcc <__s2b+0x78>
 800afc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afc6:	2509      	movs	r5, #9
 800afc8:	340a      	adds	r4, #10
 800afca:	e7f6      	b.n	800afba <__s2b+0x66>
 800afcc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800afd0:	4601      	mov	r1, r0
 800afd2:	220a      	movs	r2, #10
 800afd4:	4630      	mov	r0, r6
 800afd6:	3b30      	subs	r3, #48	; 0x30
 800afd8:	f7ff ff76 	bl	800aec8 <__multadd>
 800afdc:	e7ee      	b.n	800afbc <__s2b+0x68>
 800afde:	bf00      	nop
 800afe0:	0801d4e8 	.word	0x0801d4e8
 800afe4:	0801d574 	.word	0x0801d574

0800afe8 <__hi0bits>:
 800afe8:	0c02      	lsrs	r2, r0, #16
 800afea:	0412      	lsls	r2, r2, #16
 800afec:	4603      	mov	r3, r0
 800afee:	b9ca      	cbnz	r2, 800b024 <__hi0bits+0x3c>
 800aff0:	0403      	lsls	r3, r0, #16
 800aff2:	2010      	movs	r0, #16
 800aff4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aff8:	bf04      	itt	eq
 800affa:	021b      	lsleq	r3, r3, #8
 800affc:	3008      	addeq	r0, #8
 800affe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b002:	bf04      	itt	eq
 800b004:	011b      	lsleq	r3, r3, #4
 800b006:	3004      	addeq	r0, #4
 800b008:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b00c:	bf04      	itt	eq
 800b00e:	009b      	lsleq	r3, r3, #2
 800b010:	3002      	addeq	r0, #2
 800b012:	2b00      	cmp	r3, #0
 800b014:	db05      	blt.n	800b022 <__hi0bits+0x3a>
 800b016:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b01a:	f100 0001 	add.w	r0, r0, #1
 800b01e:	bf08      	it	eq
 800b020:	2020      	moveq	r0, #32
 800b022:	4770      	bx	lr
 800b024:	2000      	movs	r0, #0
 800b026:	e7e5      	b.n	800aff4 <__hi0bits+0xc>

0800b028 <__lo0bits>:
 800b028:	6803      	ldr	r3, [r0, #0]
 800b02a:	4602      	mov	r2, r0
 800b02c:	f013 0007 	ands.w	r0, r3, #7
 800b030:	d00b      	beq.n	800b04a <__lo0bits+0x22>
 800b032:	07d9      	lsls	r1, r3, #31
 800b034:	d421      	bmi.n	800b07a <__lo0bits+0x52>
 800b036:	0798      	lsls	r0, r3, #30
 800b038:	bf49      	itett	mi
 800b03a:	085b      	lsrmi	r3, r3, #1
 800b03c:	089b      	lsrpl	r3, r3, #2
 800b03e:	2001      	movmi	r0, #1
 800b040:	6013      	strmi	r3, [r2, #0]
 800b042:	bf5c      	itt	pl
 800b044:	2002      	movpl	r0, #2
 800b046:	6013      	strpl	r3, [r2, #0]
 800b048:	4770      	bx	lr
 800b04a:	b299      	uxth	r1, r3
 800b04c:	b909      	cbnz	r1, 800b052 <__lo0bits+0x2a>
 800b04e:	2010      	movs	r0, #16
 800b050:	0c1b      	lsrs	r3, r3, #16
 800b052:	b2d9      	uxtb	r1, r3
 800b054:	b909      	cbnz	r1, 800b05a <__lo0bits+0x32>
 800b056:	3008      	adds	r0, #8
 800b058:	0a1b      	lsrs	r3, r3, #8
 800b05a:	0719      	lsls	r1, r3, #28
 800b05c:	bf04      	itt	eq
 800b05e:	091b      	lsreq	r3, r3, #4
 800b060:	3004      	addeq	r0, #4
 800b062:	0799      	lsls	r1, r3, #30
 800b064:	bf04      	itt	eq
 800b066:	089b      	lsreq	r3, r3, #2
 800b068:	3002      	addeq	r0, #2
 800b06a:	07d9      	lsls	r1, r3, #31
 800b06c:	d403      	bmi.n	800b076 <__lo0bits+0x4e>
 800b06e:	085b      	lsrs	r3, r3, #1
 800b070:	f100 0001 	add.w	r0, r0, #1
 800b074:	d003      	beq.n	800b07e <__lo0bits+0x56>
 800b076:	6013      	str	r3, [r2, #0]
 800b078:	4770      	bx	lr
 800b07a:	2000      	movs	r0, #0
 800b07c:	4770      	bx	lr
 800b07e:	2020      	movs	r0, #32
 800b080:	4770      	bx	lr
	...

0800b084 <__i2b>:
 800b084:	b510      	push	{r4, lr}
 800b086:	460c      	mov	r4, r1
 800b088:	2101      	movs	r1, #1
 800b08a:	f7ff febb 	bl	800ae04 <_Balloc>
 800b08e:	4602      	mov	r2, r0
 800b090:	b928      	cbnz	r0, 800b09e <__i2b+0x1a>
 800b092:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b096:	4b04      	ldr	r3, [pc, #16]	; (800b0a8 <__i2b+0x24>)
 800b098:	4804      	ldr	r0, [pc, #16]	; (800b0ac <__i2b+0x28>)
 800b09a:	f000 fdef 	bl	800bc7c <__assert_func>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	6144      	str	r4, [r0, #20]
 800b0a2:	6103      	str	r3, [r0, #16]
 800b0a4:	bd10      	pop	{r4, pc}
 800b0a6:	bf00      	nop
 800b0a8:	0801d4e8 	.word	0x0801d4e8
 800b0ac:	0801d574 	.word	0x0801d574

0800b0b0 <__multiply>:
 800b0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b4:	4691      	mov	r9, r2
 800b0b6:	690a      	ldr	r2, [r1, #16]
 800b0b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b0bc:	460c      	mov	r4, r1
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	bfbe      	ittt	lt
 800b0c2:	460b      	movlt	r3, r1
 800b0c4:	464c      	movlt	r4, r9
 800b0c6:	4699      	movlt	r9, r3
 800b0c8:	6927      	ldr	r7, [r4, #16]
 800b0ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b0ce:	68a3      	ldr	r3, [r4, #8]
 800b0d0:	6861      	ldr	r1, [r4, #4]
 800b0d2:	eb07 060a 	add.w	r6, r7, sl
 800b0d6:	42b3      	cmp	r3, r6
 800b0d8:	b085      	sub	sp, #20
 800b0da:	bfb8      	it	lt
 800b0dc:	3101      	addlt	r1, #1
 800b0de:	f7ff fe91 	bl	800ae04 <_Balloc>
 800b0e2:	b930      	cbnz	r0, 800b0f2 <__multiply+0x42>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	f240 115d 	movw	r1, #349	; 0x15d
 800b0ea:	4b43      	ldr	r3, [pc, #268]	; (800b1f8 <__multiply+0x148>)
 800b0ec:	4843      	ldr	r0, [pc, #268]	; (800b1fc <__multiply+0x14c>)
 800b0ee:	f000 fdc5 	bl	800bc7c <__assert_func>
 800b0f2:	f100 0514 	add.w	r5, r0, #20
 800b0f6:	462b      	mov	r3, r5
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b0fe:	4543      	cmp	r3, r8
 800b100:	d321      	bcc.n	800b146 <__multiply+0x96>
 800b102:	f104 0314 	add.w	r3, r4, #20
 800b106:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b10a:	f109 0314 	add.w	r3, r9, #20
 800b10e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b112:	9202      	str	r2, [sp, #8]
 800b114:	1b3a      	subs	r2, r7, r4
 800b116:	3a15      	subs	r2, #21
 800b118:	f022 0203 	bic.w	r2, r2, #3
 800b11c:	3204      	adds	r2, #4
 800b11e:	f104 0115 	add.w	r1, r4, #21
 800b122:	428f      	cmp	r7, r1
 800b124:	bf38      	it	cc
 800b126:	2204      	movcc	r2, #4
 800b128:	9201      	str	r2, [sp, #4]
 800b12a:	9a02      	ldr	r2, [sp, #8]
 800b12c:	9303      	str	r3, [sp, #12]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d80c      	bhi.n	800b14c <__multiply+0x9c>
 800b132:	2e00      	cmp	r6, #0
 800b134:	dd03      	ble.n	800b13e <__multiply+0x8e>
 800b136:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d059      	beq.n	800b1f2 <__multiply+0x142>
 800b13e:	6106      	str	r6, [r0, #16]
 800b140:	b005      	add	sp, #20
 800b142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b146:	f843 2b04 	str.w	r2, [r3], #4
 800b14a:	e7d8      	b.n	800b0fe <__multiply+0x4e>
 800b14c:	f8b3 a000 	ldrh.w	sl, [r3]
 800b150:	f1ba 0f00 	cmp.w	sl, #0
 800b154:	d023      	beq.n	800b19e <__multiply+0xee>
 800b156:	46a9      	mov	r9, r5
 800b158:	f04f 0c00 	mov.w	ip, #0
 800b15c:	f104 0e14 	add.w	lr, r4, #20
 800b160:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b164:	f8d9 1000 	ldr.w	r1, [r9]
 800b168:	fa1f fb82 	uxth.w	fp, r2
 800b16c:	b289      	uxth	r1, r1
 800b16e:	fb0a 110b 	mla	r1, sl, fp, r1
 800b172:	4461      	add	r1, ip
 800b174:	f8d9 c000 	ldr.w	ip, [r9]
 800b178:	0c12      	lsrs	r2, r2, #16
 800b17a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b17e:	fb0a c202 	mla	r2, sl, r2, ip
 800b182:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b186:	b289      	uxth	r1, r1
 800b188:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b18c:	4577      	cmp	r7, lr
 800b18e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b192:	f849 1b04 	str.w	r1, [r9], #4
 800b196:	d8e3      	bhi.n	800b160 <__multiply+0xb0>
 800b198:	9a01      	ldr	r2, [sp, #4]
 800b19a:	f845 c002 	str.w	ip, [r5, r2]
 800b19e:	9a03      	ldr	r2, [sp, #12]
 800b1a0:	3304      	adds	r3, #4
 800b1a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b1a6:	f1b9 0f00 	cmp.w	r9, #0
 800b1aa:	d020      	beq.n	800b1ee <__multiply+0x13e>
 800b1ac:	46ae      	mov	lr, r5
 800b1ae:	f04f 0a00 	mov.w	sl, #0
 800b1b2:	6829      	ldr	r1, [r5, #0]
 800b1b4:	f104 0c14 	add.w	ip, r4, #20
 800b1b8:	f8bc b000 	ldrh.w	fp, [ip]
 800b1bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b1c0:	b289      	uxth	r1, r1
 800b1c2:	fb09 220b 	mla	r2, r9, fp, r2
 800b1c6:	4492      	add	sl, r2
 800b1c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b1cc:	f84e 1b04 	str.w	r1, [lr], #4
 800b1d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b1d4:	f8be 1000 	ldrh.w	r1, [lr]
 800b1d8:	0c12      	lsrs	r2, r2, #16
 800b1da:	fb09 1102 	mla	r1, r9, r2, r1
 800b1de:	4567      	cmp	r7, ip
 800b1e0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b1e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b1e8:	d8e6      	bhi.n	800b1b8 <__multiply+0x108>
 800b1ea:	9a01      	ldr	r2, [sp, #4]
 800b1ec:	50a9      	str	r1, [r5, r2]
 800b1ee:	3504      	adds	r5, #4
 800b1f0:	e79b      	b.n	800b12a <__multiply+0x7a>
 800b1f2:	3e01      	subs	r6, #1
 800b1f4:	e79d      	b.n	800b132 <__multiply+0x82>
 800b1f6:	bf00      	nop
 800b1f8:	0801d4e8 	.word	0x0801d4e8
 800b1fc:	0801d574 	.word	0x0801d574

0800b200 <__pow5mult>:
 800b200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b204:	4615      	mov	r5, r2
 800b206:	f012 0203 	ands.w	r2, r2, #3
 800b20a:	4606      	mov	r6, r0
 800b20c:	460f      	mov	r7, r1
 800b20e:	d007      	beq.n	800b220 <__pow5mult+0x20>
 800b210:	4c25      	ldr	r4, [pc, #148]	; (800b2a8 <__pow5mult+0xa8>)
 800b212:	3a01      	subs	r2, #1
 800b214:	2300      	movs	r3, #0
 800b216:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b21a:	f7ff fe55 	bl	800aec8 <__multadd>
 800b21e:	4607      	mov	r7, r0
 800b220:	10ad      	asrs	r5, r5, #2
 800b222:	d03d      	beq.n	800b2a0 <__pow5mult+0xa0>
 800b224:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b226:	b97c      	cbnz	r4, 800b248 <__pow5mult+0x48>
 800b228:	2010      	movs	r0, #16
 800b22a:	f7ff fdb5 	bl	800ad98 <malloc>
 800b22e:	4602      	mov	r2, r0
 800b230:	6270      	str	r0, [r6, #36]	; 0x24
 800b232:	b928      	cbnz	r0, 800b240 <__pow5mult+0x40>
 800b234:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b238:	4b1c      	ldr	r3, [pc, #112]	; (800b2ac <__pow5mult+0xac>)
 800b23a:	481d      	ldr	r0, [pc, #116]	; (800b2b0 <__pow5mult+0xb0>)
 800b23c:	f000 fd1e 	bl	800bc7c <__assert_func>
 800b240:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b244:	6004      	str	r4, [r0, #0]
 800b246:	60c4      	str	r4, [r0, #12]
 800b248:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b24c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b250:	b94c      	cbnz	r4, 800b266 <__pow5mult+0x66>
 800b252:	f240 2171 	movw	r1, #625	; 0x271
 800b256:	4630      	mov	r0, r6
 800b258:	f7ff ff14 	bl	800b084 <__i2b>
 800b25c:	2300      	movs	r3, #0
 800b25e:	4604      	mov	r4, r0
 800b260:	f8c8 0008 	str.w	r0, [r8, #8]
 800b264:	6003      	str	r3, [r0, #0]
 800b266:	f04f 0900 	mov.w	r9, #0
 800b26a:	07eb      	lsls	r3, r5, #31
 800b26c:	d50a      	bpl.n	800b284 <__pow5mult+0x84>
 800b26e:	4639      	mov	r1, r7
 800b270:	4622      	mov	r2, r4
 800b272:	4630      	mov	r0, r6
 800b274:	f7ff ff1c 	bl	800b0b0 <__multiply>
 800b278:	4680      	mov	r8, r0
 800b27a:	4639      	mov	r1, r7
 800b27c:	4630      	mov	r0, r6
 800b27e:	f7ff fe01 	bl	800ae84 <_Bfree>
 800b282:	4647      	mov	r7, r8
 800b284:	106d      	asrs	r5, r5, #1
 800b286:	d00b      	beq.n	800b2a0 <__pow5mult+0xa0>
 800b288:	6820      	ldr	r0, [r4, #0]
 800b28a:	b938      	cbnz	r0, 800b29c <__pow5mult+0x9c>
 800b28c:	4622      	mov	r2, r4
 800b28e:	4621      	mov	r1, r4
 800b290:	4630      	mov	r0, r6
 800b292:	f7ff ff0d 	bl	800b0b0 <__multiply>
 800b296:	6020      	str	r0, [r4, #0]
 800b298:	f8c0 9000 	str.w	r9, [r0]
 800b29c:	4604      	mov	r4, r0
 800b29e:	e7e4      	b.n	800b26a <__pow5mult+0x6a>
 800b2a0:	4638      	mov	r0, r7
 800b2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2a6:	bf00      	nop
 800b2a8:	0801d6c0 	.word	0x0801d6c0
 800b2ac:	0801d476 	.word	0x0801d476
 800b2b0:	0801d574 	.word	0x0801d574

0800b2b4 <__lshift>:
 800b2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2b8:	460c      	mov	r4, r1
 800b2ba:	4607      	mov	r7, r0
 800b2bc:	4691      	mov	r9, r2
 800b2be:	6923      	ldr	r3, [r4, #16]
 800b2c0:	6849      	ldr	r1, [r1, #4]
 800b2c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b2c6:	68a3      	ldr	r3, [r4, #8]
 800b2c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2cc:	f108 0601 	add.w	r6, r8, #1
 800b2d0:	42b3      	cmp	r3, r6
 800b2d2:	db0b      	blt.n	800b2ec <__lshift+0x38>
 800b2d4:	4638      	mov	r0, r7
 800b2d6:	f7ff fd95 	bl	800ae04 <_Balloc>
 800b2da:	4605      	mov	r5, r0
 800b2dc:	b948      	cbnz	r0, 800b2f2 <__lshift+0x3e>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b2e4:	4b29      	ldr	r3, [pc, #164]	; (800b38c <__lshift+0xd8>)
 800b2e6:	482a      	ldr	r0, [pc, #168]	; (800b390 <__lshift+0xdc>)
 800b2e8:	f000 fcc8 	bl	800bc7c <__assert_func>
 800b2ec:	3101      	adds	r1, #1
 800b2ee:	005b      	lsls	r3, r3, #1
 800b2f0:	e7ee      	b.n	800b2d0 <__lshift+0x1c>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	f100 0114 	add.w	r1, r0, #20
 800b2f8:	f100 0210 	add.w	r2, r0, #16
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	4553      	cmp	r3, sl
 800b300:	db37      	blt.n	800b372 <__lshift+0xbe>
 800b302:	6920      	ldr	r0, [r4, #16]
 800b304:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b308:	f104 0314 	add.w	r3, r4, #20
 800b30c:	f019 091f 	ands.w	r9, r9, #31
 800b310:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b314:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b318:	d02f      	beq.n	800b37a <__lshift+0xc6>
 800b31a:	468a      	mov	sl, r1
 800b31c:	f04f 0c00 	mov.w	ip, #0
 800b320:	f1c9 0e20 	rsb	lr, r9, #32
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	fa02 f209 	lsl.w	r2, r2, r9
 800b32a:	ea42 020c 	orr.w	r2, r2, ip
 800b32e:	f84a 2b04 	str.w	r2, [sl], #4
 800b332:	f853 2b04 	ldr.w	r2, [r3], #4
 800b336:	4298      	cmp	r0, r3
 800b338:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b33c:	d8f2      	bhi.n	800b324 <__lshift+0x70>
 800b33e:	1b03      	subs	r3, r0, r4
 800b340:	3b15      	subs	r3, #21
 800b342:	f023 0303 	bic.w	r3, r3, #3
 800b346:	3304      	adds	r3, #4
 800b348:	f104 0215 	add.w	r2, r4, #21
 800b34c:	4290      	cmp	r0, r2
 800b34e:	bf38      	it	cc
 800b350:	2304      	movcc	r3, #4
 800b352:	f841 c003 	str.w	ip, [r1, r3]
 800b356:	f1bc 0f00 	cmp.w	ip, #0
 800b35a:	d001      	beq.n	800b360 <__lshift+0xac>
 800b35c:	f108 0602 	add.w	r6, r8, #2
 800b360:	3e01      	subs	r6, #1
 800b362:	4638      	mov	r0, r7
 800b364:	4621      	mov	r1, r4
 800b366:	612e      	str	r6, [r5, #16]
 800b368:	f7ff fd8c 	bl	800ae84 <_Bfree>
 800b36c:	4628      	mov	r0, r5
 800b36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b372:	f842 0f04 	str.w	r0, [r2, #4]!
 800b376:	3301      	adds	r3, #1
 800b378:	e7c1      	b.n	800b2fe <__lshift+0x4a>
 800b37a:	3904      	subs	r1, #4
 800b37c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b380:	4298      	cmp	r0, r3
 800b382:	f841 2f04 	str.w	r2, [r1, #4]!
 800b386:	d8f9      	bhi.n	800b37c <__lshift+0xc8>
 800b388:	e7ea      	b.n	800b360 <__lshift+0xac>
 800b38a:	bf00      	nop
 800b38c:	0801d4e8 	.word	0x0801d4e8
 800b390:	0801d574 	.word	0x0801d574

0800b394 <__mcmp>:
 800b394:	4603      	mov	r3, r0
 800b396:	690a      	ldr	r2, [r1, #16]
 800b398:	6900      	ldr	r0, [r0, #16]
 800b39a:	b530      	push	{r4, r5, lr}
 800b39c:	1a80      	subs	r0, r0, r2
 800b39e:	d10d      	bne.n	800b3bc <__mcmp+0x28>
 800b3a0:	3314      	adds	r3, #20
 800b3a2:	3114      	adds	r1, #20
 800b3a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b3a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b3ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b3b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b3b4:	4295      	cmp	r5, r2
 800b3b6:	d002      	beq.n	800b3be <__mcmp+0x2a>
 800b3b8:	d304      	bcc.n	800b3c4 <__mcmp+0x30>
 800b3ba:	2001      	movs	r0, #1
 800b3bc:	bd30      	pop	{r4, r5, pc}
 800b3be:	42a3      	cmp	r3, r4
 800b3c0:	d3f4      	bcc.n	800b3ac <__mcmp+0x18>
 800b3c2:	e7fb      	b.n	800b3bc <__mcmp+0x28>
 800b3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c8:	e7f8      	b.n	800b3bc <__mcmp+0x28>
	...

0800b3cc <__mdiff>:
 800b3cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d0:	460d      	mov	r5, r1
 800b3d2:	4607      	mov	r7, r0
 800b3d4:	4611      	mov	r1, r2
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	4614      	mov	r4, r2
 800b3da:	f7ff ffdb 	bl	800b394 <__mcmp>
 800b3de:	1e06      	subs	r6, r0, #0
 800b3e0:	d111      	bne.n	800b406 <__mdiff+0x3a>
 800b3e2:	4631      	mov	r1, r6
 800b3e4:	4638      	mov	r0, r7
 800b3e6:	f7ff fd0d 	bl	800ae04 <_Balloc>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	b928      	cbnz	r0, 800b3fa <__mdiff+0x2e>
 800b3ee:	f240 2132 	movw	r1, #562	; 0x232
 800b3f2:	4b3a      	ldr	r3, [pc, #232]	; (800b4dc <__mdiff+0x110>)
 800b3f4:	483a      	ldr	r0, [pc, #232]	; (800b4e0 <__mdiff+0x114>)
 800b3f6:	f000 fc41 	bl	800bc7c <__assert_func>
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b400:	4610      	mov	r0, r2
 800b402:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b406:	bfa4      	itt	ge
 800b408:	4623      	movge	r3, r4
 800b40a:	462c      	movge	r4, r5
 800b40c:	4638      	mov	r0, r7
 800b40e:	6861      	ldr	r1, [r4, #4]
 800b410:	bfa6      	itte	ge
 800b412:	461d      	movge	r5, r3
 800b414:	2600      	movge	r6, #0
 800b416:	2601      	movlt	r6, #1
 800b418:	f7ff fcf4 	bl	800ae04 <_Balloc>
 800b41c:	4602      	mov	r2, r0
 800b41e:	b918      	cbnz	r0, 800b428 <__mdiff+0x5c>
 800b420:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b424:	4b2d      	ldr	r3, [pc, #180]	; (800b4dc <__mdiff+0x110>)
 800b426:	e7e5      	b.n	800b3f4 <__mdiff+0x28>
 800b428:	f102 0814 	add.w	r8, r2, #20
 800b42c:	46c2      	mov	sl, r8
 800b42e:	f04f 0c00 	mov.w	ip, #0
 800b432:	6927      	ldr	r7, [r4, #16]
 800b434:	60c6      	str	r6, [r0, #12]
 800b436:	692e      	ldr	r6, [r5, #16]
 800b438:	f104 0014 	add.w	r0, r4, #20
 800b43c:	f105 0914 	add.w	r9, r5, #20
 800b440:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b444:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b448:	3410      	adds	r4, #16
 800b44a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b44e:	f859 3b04 	ldr.w	r3, [r9], #4
 800b452:	fa1f f18b 	uxth.w	r1, fp
 800b456:	448c      	add	ip, r1
 800b458:	b299      	uxth	r1, r3
 800b45a:	0c1b      	lsrs	r3, r3, #16
 800b45c:	ebac 0101 	sub.w	r1, ip, r1
 800b460:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b464:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b468:	b289      	uxth	r1, r1
 800b46a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b46e:	454e      	cmp	r6, r9
 800b470:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b474:	f84a 3b04 	str.w	r3, [sl], #4
 800b478:	d8e7      	bhi.n	800b44a <__mdiff+0x7e>
 800b47a:	1b73      	subs	r3, r6, r5
 800b47c:	3b15      	subs	r3, #21
 800b47e:	f023 0303 	bic.w	r3, r3, #3
 800b482:	3515      	adds	r5, #21
 800b484:	3304      	adds	r3, #4
 800b486:	42ae      	cmp	r6, r5
 800b488:	bf38      	it	cc
 800b48a:	2304      	movcc	r3, #4
 800b48c:	4418      	add	r0, r3
 800b48e:	4443      	add	r3, r8
 800b490:	461e      	mov	r6, r3
 800b492:	4605      	mov	r5, r0
 800b494:	4575      	cmp	r5, lr
 800b496:	d30e      	bcc.n	800b4b6 <__mdiff+0xea>
 800b498:	f10e 0103 	add.w	r1, lr, #3
 800b49c:	1a09      	subs	r1, r1, r0
 800b49e:	f021 0103 	bic.w	r1, r1, #3
 800b4a2:	3803      	subs	r0, #3
 800b4a4:	4586      	cmp	lr, r0
 800b4a6:	bf38      	it	cc
 800b4a8:	2100      	movcc	r1, #0
 800b4aa:	4419      	add	r1, r3
 800b4ac:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b4b0:	b18b      	cbz	r3, 800b4d6 <__mdiff+0x10a>
 800b4b2:	6117      	str	r7, [r2, #16]
 800b4b4:	e7a4      	b.n	800b400 <__mdiff+0x34>
 800b4b6:	f855 8b04 	ldr.w	r8, [r5], #4
 800b4ba:	fa1f f188 	uxth.w	r1, r8
 800b4be:	4461      	add	r1, ip
 800b4c0:	140c      	asrs	r4, r1, #16
 800b4c2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b4c6:	b289      	uxth	r1, r1
 800b4c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b4cc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b4d0:	f846 1b04 	str.w	r1, [r6], #4
 800b4d4:	e7de      	b.n	800b494 <__mdiff+0xc8>
 800b4d6:	3f01      	subs	r7, #1
 800b4d8:	e7e8      	b.n	800b4ac <__mdiff+0xe0>
 800b4da:	bf00      	nop
 800b4dc:	0801d4e8 	.word	0x0801d4e8
 800b4e0:	0801d574 	.word	0x0801d574

0800b4e4 <__ulp>:
 800b4e4:	4b11      	ldr	r3, [pc, #68]	; (800b52c <__ulp+0x48>)
 800b4e6:	400b      	ands	r3, r1
 800b4e8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	dd02      	ble.n	800b4f6 <__ulp+0x12>
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	4770      	bx	lr
 800b4f6:	425b      	negs	r3, r3
 800b4f8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b4fc:	f04f 0000 	mov.w	r0, #0
 800b500:	f04f 0100 	mov.w	r1, #0
 800b504:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b508:	da04      	bge.n	800b514 <__ulp+0x30>
 800b50a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b50e:	fa43 f102 	asr.w	r1, r3, r2
 800b512:	4770      	bx	lr
 800b514:	f1a2 0314 	sub.w	r3, r2, #20
 800b518:	2b1e      	cmp	r3, #30
 800b51a:	bfd6      	itet	le
 800b51c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b520:	2301      	movgt	r3, #1
 800b522:	fa22 f303 	lsrle.w	r3, r2, r3
 800b526:	4618      	mov	r0, r3
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	7ff00000 	.word	0x7ff00000

0800b530 <__b2d>:
 800b530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b534:	6907      	ldr	r7, [r0, #16]
 800b536:	f100 0914 	add.w	r9, r0, #20
 800b53a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b53e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b542:	f1a7 0804 	sub.w	r8, r7, #4
 800b546:	4630      	mov	r0, r6
 800b548:	f7ff fd4e 	bl	800afe8 <__hi0bits>
 800b54c:	f1c0 0320 	rsb	r3, r0, #32
 800b550:	280a      	cmp	r0, #10
 800b552:	600b      	str	r3, [r1, #0]
 800b554:	491f      	ldr	r1, [pc, #124]	; (800b5d4 <__b2d+0xa4>)
 800b556:	dc17      	bgt.n	800b588 <__b2d+0x58>
 800b558:	45c1      	cmp	r9, r8
 800b55a:	bf28      	it	cs
 800b55c:	2200      	movcs	r2, #0
 800b55e:	f1c0 0c0b 	rsb	ip, r0, #11
 800b562:	fa26 f30c 	lsr.w	r3, r6, ip
 800b566:	bf38      	it	cc
 800b568:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b56c:	ea43 0501 	orr.w	r5, r3, r1
 800b570:	f100 0315 	add.w	r3, r0, #21
 800b574:	fa06 f303 	lsl.w	r3, r6, r3
 800b578:	fa22 f20c 	lsr.w	r2, r2, ip
 800b57c:	ea43 0402 	orr.w	r4, r3, r2
 800b580:	4620      	mov	r0, r4
 800b582:	4629      	mov	r1, r5
 800b584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b588:	45c1      	cmp	r9, r8
 800b58a:	bf2e      	itee	cs
 800b58c:	2200      	movcs	r2, #0
 800b58e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b592:	f1a7 0808 	subcc.w	r8, r7, #8
 800b596:	f1b0 030b 	subs.w	r3, r0, #11
 800b59a:	d016      	beq.n	800b5ca <__b2d+0x9a>
 800b59c:	f1c3 0720 	rsb	r7, r3, #32
 800b5a0:	fa22 f107 	lsr.w	r1, r2, r7
 800b5a4:	45c8      	cmp	r8, r9
 800b5a6:	fa06 f603 	lsl.w	r6, r6, r3
 800b5aa:	ea46 0601 	orr.w	r6, r6, r1
 800b5ae:	bf94      	ite	ls
 800b5b0:	2100      	movls	r1, #0
 800b5b2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b5b6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b5ba:	fa02 f003 	lsl.w	r0, r2, r3
 800b5be:	40f9      	lsrs	r1, r7
 800b5c0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b5c4:	ea40 0401 	orr.w	r4, r0, r1
 800b5c8:	e7da      	b.n	800b580 <__b2d+0x50>
 800b5ca:	4614      	mov	r4, r2
 800b5cc:	ea46 0501 	orr.w	r5, r6, r1
 800b5d0:	e7d6      	b.n	800b580 <__b2d+0x50>
 800b5d2:	bf00      	nop
 800b5d4:	3ff00000 	.word	0x3ff00000

0800b5d8 <__d2b>:
 800b5d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b5dc:	2101      	movs	r1, #1
 800b5de:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b5e2:	4690      	mov	r8, r2
 800b5e4:	461d      	mov	r5, r3
 800b5e6:	f7ff fc0d 	bl	800ae04 <_Balloc>
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	b930      	cbnz	r0, 800b5fc <__d2b+0x24>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	f240 310a 	movw	r1, #778	; 0x30a
 800b5f4:	4b24      	ldr	r3, [pc, #144]	; (800b688 <__d2b+0xb0>)
 800b5f6:	4825      	ldr	r0, [pc, #148]	; (800b68c <__d2b+0xb4>)
 800b5f8:	f000 fb40 	bl	800bc7c <__assert_func>
 800b5fc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b600:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b604:	bb2d      	cbnz	r5, 800b652 <__d2b+0x7a>
 800b606:	9301      	str	r3, [sp, #4]
 800b608:	f1b8 0300 	subs.w	r3, r8, #0
 800b60c:	d026      	beq.n	800b65c <__d2b+0x84>
 800b60e:	4668      	mov	r0, sp
 800b610:	9300      	str	r3, [sp, #0]
 800b612:	f7ff fd09 	bl	800b028 <__lo0bits>
 800b616:	9900      	ldr	r1, [sp, #0]
 800b618:	b1f0      	cbz	r0, 800b658 <__d2b+0x80>
 800b61a:	9a01      	ldr	r2, [sp, #4]
 800b61c:	f1c0 0320 	rsb	r3, r0, #32
 800b620:	fa02 f303 	lsl.w	r3, r2, r3
 800b624:	430b      	orrs	r3, r1
 800b626:	40c2      	lsrs	r2, r0
 800b628:	6163      	str	r3, [r4, #20]
 800b62a:	9201      	str	r2, [sp, #4]
 800b62c:	9b01      	ldr	r3, [sp, #4]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	bf14      	ite	ne
 800b632:	2102      	movne	r1, #2
 800b634:	2101      	moveq	r1, #1
 800b636:	61a3      	str	r3, [r4, #24]
 800b638:	6121      	str	r1, [r4, #16]
 800b63a:	b1c5      	cbz	r5, 800b66e <__d2b+0x96>
 800b63c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b640:	4405      	add	r5, r0
 800b642:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b646:	603d      	str	r5, [r7, #0]
 800b648:	6030      	str	r0, [r6, #0]
 800b64a:	4620      	mov	r0, r4
 800b64c:	b002      	add	sp, #8
 800b64e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b656:	e7d6      	b.n	800b606 <__d2b+0x2e>
 800b658:	6161      	str	r1, [r4, #20]
 800b65a:	e7e7      	b.n	800b62c <__d2b+0x54>
 800b65c:	a801      	add	r0, sp, #4
 800b65e:	f7ff fce3 	bl	800b028 <__lo0bits>
 800b662:	2101      	movs	r1, #1
 800b664:	9b01      	ldr	r3, [sp, #4]
 800b666:	6121      	str	r1, [r4, #16]
 800b668:	6163      	str	r3, [r4, #20]
 800b66a:	3020      	adds	r0, #32
 800b66c:	e7e5      	b.n	800b63a <__d2b+0x62>
 800b66e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b672:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b676:	6038      	str	r0, [r7, #0]
 800b678:	6918      	ldr	r0, [r3, #16]
 800b67a:	f7ff fcb5 	bl	800afe8 <__hi0bits>
 800b67e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b682:	6031      	str	r1, [r6, #0]
 800b684:	e7e1      	b.n	800b64a <__d2b+0x72>
 800b686:	bf00      	nop
 800b688:	0801d4e8 	.word	0x0801d4e8
 800b68c:	0801d574 	.word	0x0801d574

0800b690 <__ratio>:
 800b690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b694:	4688      	mov	r8, r1
 800b696:	4669      	mov	r1, sp
 800b698:	4681      	mov	r9, r0
 800b69a:	f7ff ff49 	bl	800b530 <__b2d>
 800b69e:	460f      	mov	r7, r1
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	460d      	mov	r5, r1
 800b6a4:	4640      	mov	r0, r8
 800b6a6:	a901      	add	r1, sp, #4
 800b6a8:	f7ff ff42 	bl	800b530 <__b2d>
 800b6ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b6b0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b6b4:	468b      	mov	fp, r1
 800b6b6:	eba3 0c02 	sub.w	ip, r3, r2
 800b6ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b6be:	1a9b      	subs	r3, r3, r2
 800b6c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	bfd5      	itete	le
 800b6c8:	460a      	movle	r2, r1
 800b6ca:	462a      	movgt	r2, r5
 800b6cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b6d0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b6d4:	bfd8      	it	le
 800b6d6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b6da:	465b      	mov	r3, fp
 800b6dc:	4602      	mov	r2, r0
 800b6de:	4639      	mov	r1, r7
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	f7fa f98b 	bl	80059fc <__aeabi_ddiv>
 800b6e6:	b003      	add	sp, #12
 800b6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6ec <__copybits>:
 800b6ec:	3901      	subs	r1, #1
 800b6ee:	b570      	push	{r4, r5, r6, lr}
 800b6f0:	1149      	asrs	r1, r1, #5
 800b6f2:	6914      	ldr	r4, [r2, #16]
 800b6f4:	3101      	adds	r1, #1
 800b6f6:	f102 0314 	add.w	r3, r2, #20
 800b6fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b6fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b702:	1f05      	subs	r5, r0, #4
 800b704:	42a3      	cmp	r3, r4
 800b706:	d30c      	bcc.n	800b722 <__copybits+0x36>
 800b708:	1aa3      	subs	r3, r4, r2
 800b70a:	3b11      	subs	r3, #17
 800b70c:	f023 0303 	bic.w	r3, r3, #3
 800b710:	3211      	adds	r2, #17
 800b712:	42a2      	cmp	r2, r4
 800b714:	bf88      	it	hi
 800b716:	2300      	movhi	r3, #0
 800b718:	4418      	add	r0, r3
 800b71a:	2300      	movs	r3, #0
 800b71c:	4288      	cmp	r0, r1
 800b71e:	d305      	bcc.n	800b72c <__copybits+0x40>
 800b720:	bd70      	pop	{r4, r5, r6, pc}
 800b722:	f853 6b04 	ldr.w	r6, [r3], #4
 800b726:	f845 6f04 	str.w	r6, [r5, #4]!
 800b72a:	e7eb      	b.n	800b704 <__copybits+0x18>
 800b72c:	f840 3b04 	str.w	r3, [r0], #4
 800b730:	e7f4      	b.n	800b71c <__copybits+0x30>

0800b732 <__any_on>:
 800b732:	f100 0214 	add.w	r2, r0, #20
 800b736:	6900      	ldr	r0, [r0, #16]
 800b738:	114b      	asrs	r3, r1, #5
 800b73a:	4298      	cmp	r0, r3
 800b73c:	b510      	push	{r4, lr}
 800b73e:	db11      	blt.n	800b764 <__any_on+0x32>
 800b740:	dd0a      	ble.n	800b758 <__any_on+0x26>
 800b742:	f011 011f 	ands.w	r1, r1, #31
 800b746:	d007      	beq.n	800b758 <__any_on+0x26>
 800b748:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b74c:	fa24 f001 	lsr.w	r0, r4, r1
 800b750:	fa00 f101 	lsl.w	r1, r0, r1
 800b754:	428c      	cmp	r4, r1
 800b756:	d10b      	bne.n	800b770 <__any_on+0x3e>
 800b758:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d803      	bhi.n	800b768 <__any_on+0x36>
 800b760:	2000      	movs	r0, #0
 800b762:	bd10      	pop	{r4, pc}
 800b764:	4603      	mov	r3, r0
 800b766:	e7f7      	b.n	800b758 <__any_on+0x26>
 800b768:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b76c:	2900      	cmp	r1, #0
 800b76e:	d0f5      	beq.n	800b75c <__any_on+0x2a>
 800b770:	2001      	movs	r0, #1
 800b772:	e7f6      	b.n	800b762 <__any_on+0x30>

0800b774 <_calloc_r>:
 800b774:	b570      	push	{r4, r5, r6, lr}
 800b776:	fba1 5402 	umull	r5, r4, r1, r2
 800b77a:	b934      	cbnz	r4, 800b78a <_calloc_r+0x16>
 800b77c:	4629      	mov	r1, r5
 800b77e:	f000 f875 	bl	800b86c <_malloc_r>
 800b782:	4606      	mov	r6, r0
 800b784:	b928      	cbnz	r0, 800b792 <_calloc_r+0x1e>
 800b786:	4630      	mov	r0, r6
 800b788:	bd70      	pop	{r4, r5, r6, pc}
 800b78a:	220c      	movs	r2, #12
 800b78c:	2600      	movs	r6, #0
 800b78e:	6002      	str	r2, [r0, #0]
 800b790:	e7f9      	b.n	800b786 <_calloc_r+0x12>
 800b792:	462a      	mov	r2, r5
 800b794:	4621      	mov	r1, r4
 800b796:	f7fc fbf3 	bl	8007f80 <memset>
 800b79a:	e7f4      	b.n	800b786 <_calloc_r+0x12>

0800b79c <_free_r>:
 800b79c:	b538      	push	{r3, r4, r5, lr}
 800b79e:	4605      	mov	r5, r0
 800b7a0:	2900      	cmp	r1, #0
 800b7a2:	d040      	beq.n	800b826 <_free_r+0x8a>
 800b7a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7a8:	1f0c      	subs	r4, r1, #4
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	bfb8      	it	lt
 800b7ae:	18e4      	addlt	r4, r4, r3
 800b7b0:	f000 faae 	bl	800bd10 <__malloc_lock>
 800b7b4:	4a1c      	ldr	r2, [pc, #112]	; (800b828 <_free_r+0x8c>)
 800b7b6:	6813      	ldr	r3, [r2, #0]
 800b7b8:	b933      	cbnz	r3, 800b7c8 <_free_r+0x2c>
 800b7ba:	6063      	str	r3, [r4, #4]
 800b7bc:	6014      	str	r4, [r2, #0]
 800b7be:	4628      	mov	r0, r5
 800b7c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7c4:	f000 baaa 	b.w	800bd1c <__malloc_unlock>
 800b7c8:	42a3      	cmp	r3, r4
 800b7ca:	d908      	bls.n	800b7de <_free_r+0x42>
 800b7cc:	6820      	ldr	r0, [r4, #0]
 800b7ce:	1821      	adds	r1, r4, r0
 800b7d0:	428b      	cmp	r3, r1
 800b7d2:	bf01      	itttt	eq
 800b7d4:	6819      	ldreq	r1, [r3, #0]
 800b7d6:	685b      	ldreq	r3, [r3, #4]
 800b7d8:	1809      	addeq	r1, r1, r0
 800b7da:	6021      	streq	r1, [r4, #0]
 800b7dc:	e7ed      	b.n	800b7ba <_free_r+0x1e>
 800b7de:	461a      	mov	r2, r3
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	b10b      	cbz	r3, 800b7e8 <_free_r+0x4c>
 800b7e4:	42a3      	cmp	r3, r4
 800b7e6:	d9fa      	bls.n	800b7de <_free_r+0x42>
 800b7e8:	6811      	ldr	r1, [r2, #0]
 800b7ea:	1850      	adds	r0, r2, r1
 800b7ec:	42a0      	cmp	r0, r4
 800b7ee:	d10b      	bne.n	800b808 <_free_r+0x6c>
 800b7f0:	6820      	ldr	r0, [r4, #0]
 800b7f2:	4401      	add	r1, r0
 800b7f4:	1850      	adds	r0, r2, r1
 800b7f6:	4283      	cmp	r3, r0
 800b7f8:	6011      	str	r1, [r2, #0]
 800b7fa:	d1e0      	bne.n	800b7be <_free_r+0x22>
 800b7fc:	6818      	ldr	r0, [r3, #0]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	4401      	add	r1, r0
 800b802:	6011      	str	r1, [r2, #0]
 800b804:	6053      	str	r3, [r2, #4]
 800b806:	e7da      	b.n	800b7be <_free_r+0x22>
 800b808:	d902      	bls.n	800b810 <_free_r+0x74>
 800b80a:	230c      	movs	r3, #12
 800b80c:	602b      	str	r3, [r5, #0]
 800b80e:	e7d6      	b.n	800b7be <_free_r+0x22>
 800b810:	6820      	ldr	r0, [r4, #0]
 800b812:	1821      	adds	r1, r4, r0
 800b814:	428b      	cmp	r3, r1
 800b816:	bf01      	itttt	eq
 800b818:	6819      	ldreq	r1, [r3, #0]
 800b81a:	685b      	ldreq	r3, [r3, #4]
 800b81c:	1809      	addeq	r1, r1, r0
 800b81e:	6021      	streq	r1, [r4, #0]
 800b820:	6063      	str	r3, [r4, #4]
 800b822:	6054      	str	r4, [r2, #4]
 800b824:	e7cb      	b.n	800b7be <_free_r+0x22>
 800b826:	bd38      	pop	{r3, r4, r5, pc}
 800b828:	200016d0 	.word	0x200016d0

0800b82c <sbrk_aligned>:
 800b82c:	b570      	push	{r4, r5, r6, lr}
 800b82e:	4e0e      	ldr	r6, [pc, #56]	; (800b868 <sbrk_aligned+0x3c>)
 800b830:	460c      	mov	r4, r1
 800b832:	6831      	ldr	r1, [r6, #0]
 800b834:	4605      	mov	r5, r0
 800b836:	b911      	cbnz	r1, 800b83e <sbrk_aligned+0x12>
 800b838:	f000 f9ee 	bl	800bc18 <_sbrk_r>
 800b83c:	6030      	str	r0, [r6, #0]
 800b83e:	4621      	mov	r1, r4
 800b840:	4628      	mov	r0, r5
 800b842:	f000 f9e9 	bl	800bc18 <_sbrk_r>
 800b846:	1c43      	adds	r3, r0, #1
 800b848:	d00a      	beq.n	800b860 <sbrk_aligned+0x34>
 800b84a:	1cc4      	adds	r4, r0, #3
 800b84c:	f024 0403 	bic.w	r4, r4, #3
 800b850:	42a0      	cmp	r0, r4
 800b852:	d007      	beq.n	800b864 <sbrk_aligned+0x38>
 800b854:	1a21      	subs	r1, r4, r0
 800b856:	4628      	mov	r0, r5
 800b858:	f000 f9de 	bl	800bc18 <_sbrk_r>
 800b85c:	3001      	adds	r0, #1
 800b85e:	d101      	bne.n	800b864 <sbrk_aligned+0x38>
 800b860:	f04f 34ff 	mov.w	r4, #4294967295
 800b864:	4620      	mov	r0, r4
 800b866:	bd70      	pop	{r4, r5, r6, pc}
 800b868:	200016d4 	.word	0x200016d4

0800b86c <_malloc_r>:
 800b86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b870:	1ccd      	adds	r5, r1, #3
 800b872:	f025 0503 	bic.w	r5, r5, #3
 800b876:	3508      	adds	r5, #8
 800b878:	2d0c      	cmp	r5, #12
 800b87a:	bf38      	it	cc
 800b87c:	250c      	movcc	r5, #12
 800b87e:	2d00      	cmp	r5, #0
 800b880:	4607      	mov	r7, r0
 800b882:	db01      	blt.n	800b888 <_malloc_r+0x1c>
 800b884:	42a9      	cmp	r1, r5
 800b886:	d905      	bls.n	800b894 <_malloc_r+0x28>
 800b888:	230c      	movs	r3, #12
 800b88a:	2600      	movs	r6, #0
 800b88c:	603b      	str	r3, [r7, #0]
 800b88e:	4630      	mov	r0, r6
 800b890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b894:	4e2e      	ldr	r6, [pc, #184]	; (800b950 <_malloc_r+0xe4>)
 800b896:	f000 fa3b 	bl	800bd10 <__malloc_lock>
 800b89a:	6833      	ldr	r3, [r6, #0]
 800b89c:	461c      	mov	r4, r3
 800b89e:	bb34      	cbnz	r4, 800b8ee <_malloc_r+0x82>
 800b8a0:	4629      	mov	r1, r5
 800b8a2:	4638      	mov	r0, r7
 800b8a4:	f7ff ffc2 	bl	800b82c <sbrk_aligned>
 800b8a8:	1c43      	adds	r3, r0, #1
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	d14d      	bne.n	800b94a <_malloc_r+0xde>
 800b8ae:	6834      	ldr	r4, [r6, #0]
 800b8b0:	4626      	mov	r6, r4
 800b8b2:	2e00      	cmp	r6, #0
 800b8b4:	d140      	bne.n	800b938 <_malloc_r+0xcc>
 800b8b6:	6823      	ldr	r3, [r4, #0]
 800b8b8:	4631      	mov	r1, r6
 800b8ba:	4638      	mov	r0, r7
 800b8bc:	eb04 0803 	add.w	r8, r4, r3
 800b8c0:	f000 f9aa 	bl	800bc18 <_sbrk_r>
 800b8c4:	4580      	cmp	r8, r0
 800b8c6:	d13a      	bne.n	800b93e <_malloc_r+0xd2>
 800b8c8:	6821      	ldr	r1, [r4, #0]
 800b8ca:	3503      	adds	r5, #3
 800b8cc:	1a6d      	subs	r5, r5, r1
 800b8ce:	f025 0503 	bic.w	r5, r5, #3
 800b8d2:	3508      	adds	r5, #8
 800b8d4:	2d0c      	cmp	r5, #12
 800b8d6:	bf38      	it	cc
 800b8d8:	250c      	movcc	r5, #12
 800b8da:	4638      	mov	r0, r7
 800b8dc:	4629      	mov	r1, r5
 800b8de:	f7ff ffa5 	bl	800b82c <sbrk_aligned>
 800b8e2:	3001      	adds	r0, #1
 800b8e4:	d02b      	beq.n	800b93e <_malloc_r+0xd2>
 800b8e6:	6823      	ldr	r3, [r4, #0]
 800b8e8:	442b      	add	r3, r5
 800b8ea:	6023      	str	r3, [r4, #0]
 800b8ec:	e00e      	b.n	800b90c <_malloc_r+0xa0>
 800b8ee:	6822      	ldr	r2, [r4, #0]
 800b8f0:	1b52      	subs	r2, r2, r5
 800b8f2:	d41e      	bmi.n	800b932 <_malloc_r+0xc6>
 800b8f4:	2a0b      	cmp	r2, #11
 800b8f6:	d916      	bls.n	800b926 <_malloc_r+0xba>
 800b8f8:	1961      	adds	r1, r4, r5
 800b8fa:	42a3      	cmp	r3, r4
 800b8fc:	6025      	str	r5, [r4, #0]
 800b8fe:	bf18      	it	ne
 800b900:	6059      	strne	r1, [r3, #4]
 800b902:	6863      	ldr	r3, [r4, #4]
 800b904:	bf08      	it	eq
 800b906:	6031      	streq	r1, [r6, #0]
 800b908:	5162      	str	r2, [r4, r5]
 800b90a:	604b      	str	r3, [r1, #4]
 800b90c:	4638      	mov	r0, r7
 800b90e:	f104 060b 	add.w	r6, r4, #11
 800b912:	f000 fa03 	bl	800bd1c <__malloc_unlock>
 800b916:	f026 0607 	bic.w	r6, r6, #7
 800b91a:	1d23      	adds	r3, r4, #4
 800b91c:	1af2      	subs	r2, r6, r3
 800b91e:	d0b6      	beq.n	800b88e <_malloc_r+0x22>
 800b920:	1b9b      	subs	r3, r3, r6
 800b922:	50a3      	str	r3, [r4, r2]
 800b924:	e7b3      	b.n	800b88e <_malloc_r+0x22>
 800b926:	6862      	ldr	r2, [r4, #4]
 800b928:	42a3      	cmp	r3, r4
 800b92a:	bf0c      	ite	eq
 800b92c:	6032      	streq	r2, [r6, #0]
 800b92e:	605a      	strne	r2, [r3, #4]
 800b930:	e7ec      	b.n	800b90c <_malloc_r+0xa0>
 800b932:	4623      	mov	r3, r4
 800b934:	6864      	ldr	r4, [r4, #4]
 800b936:	e7b2      	b.n	800b89e <_malloc_r+0x32>
 800b938:	4634      	mov	r4, r6
 800b93a:	6876      	ldr	r6, [r6, #4]
 800b93c:	e7b9      	b.n	800b8b2 <_malloc_r+0x46>
 800b93e:	230c      	movs	r3, #12
 800b940:	4638      	mov	r0, r7
 800b942:	603b      	str	r3, [r7, #0]
 800b944:	f000 f9ea 	bl	800bd1c <__malloc_unlock>
 800b948:	e7a1      	b.n	800b88e <_malloc_r+0x22>
 800b94a:	6025      	str	r5, [r4, #0]
 800b94c:	e7de      	b.n	800b90c <_malloc_r+0xa0>
 800b94e:	bf00      	nop
 800b950:	200016d0 	.word	0x200016d0

0800b954 <__ssputs_r>:
 800b954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b958:	688e      	ldr	r6, [r1, #8]
 800b95a:	4682      	mov	sl, r0
 800b95c:	429e      	cmp	r6, r3
 800b95e:	460c      	mov	r4, r1
 800b960:	4690      	mov	r8, r2
 800b962:	461f      	mov	r7, r3
 800b964:	d838      	bhi.n	800b9d8 <__ssputs_r+0x84>
 800b966:	898a      	ldrh	r2, [r1, #12]
 800b968:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b96c:	d032      	beq.n	800b9d4 <__ssputs_r+0x80>
 800b96e:	6825      	ldr	r5, [r4, #0]
 800b970:	6909      	ldr	r1, [r1, #16]
 800b972:	3301      	adds	r3, #1
 800b974:	eba5 0901 	sub.w	r9, r5, r1
 800b978:	6965      	ldr	r5, [r4, #20]
 800b97a:	444b      	add	r3, r9
 800b97c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b980:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b984:	106d      	asrs	r5, r5, #1
 800b986:	429d      	cmp	r5, r3
 800b988:	bf38      	it	cc
 800b98a:	461d      	movcc	r5, r3
 800b98c:	0553      	lsls	r3, r2, #21
 800b98e:	d531      	bpl.n	800b9f4 <__ssputs_r+0xa0>
 800b990:	4629      	mov	r1, r5
 800b992:	f7ff ff6b 	bl	800b86c <_malloc_r>
 800b996:	4606      	mov	r6, r0
 800b998:	b950      	cbnz	r0, 800b9b0 <__ssputs_r+0x5c>
 800b99a:	230c      	movs	r3, #12
 800b99c:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a0:	f8ca 3000 	str.w	r3, [sl]
 800b9a4:	89a3      	ldrh	r3, [r4, #12]
 800b9a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9aa:	81a3      	strh	r3, [r4, #12]
 800b9ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9b0:	464a      	mov	r2, r9
 800b9b2:	6921      	ldr	r1, [r4, #16]
 800b9b4:	f7ff fa18 	bl	800ade8 <memcpy>
 800b9b8:	89a3      	ldrh	r3, [r4, #12]
 800b9ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9c2:	81a3      	strh	r3, [r4, #12]
 800b9c4:	6126      	str	r6, [r4, #16]
 800b9c6:	444e      	add	r6, r9
 800b9c8:	6026      	str	r6, [r4, #0]
 800b9ca:	463e      	mov	r6, r7
 800b9cc:	6165      	str	r5, [r4, #20]
 800b9ce:	eba5 0509 	sub.w	r5, r5, r9
 800b9d2:	60a5      	str	r5, [r4, #8]
 800b9d4:	42be      	cmp	r6, r7
 800b9d6:	d900      	bls.n	800b9da <__ssputs_r+0x86>
 800b9d8:	463e      	mov	r6, r7
 800b9da:	4632      	mov	r2, r6
 800b9dc:	4641      	mov	r1, r8
 800b9de:	6820      	ldr	r0, [r4, #0]
 800b9e0:	f000 f97c 	bl	800bcdc <memmove>
 800b9e4:	68a3      	ldr	r3, [r4, #8]
 800b9e6:	2000      	movs	r0, #0
 800b9e8:	1b9b      	subs	r3, r3, r6
 800b9ea:	60a3      	str	r3, [r4, #8]
 800b9ec:	6823      	ldr	r3, [r4, #0]
 800b9ee:	4433      	add	r3, r6
 800b9f0:	6023      	str	r3, [r4, #0]
 800b9f2:	e7db      	b.n	800b9ac <__ssputs_r+0x58>
 800b9f4:	462a      	mov	r2, r5
 800b9f6:	f000 f997 	bl	800bd28 <_realloc_r>
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	2800      	cmp	r0, #0
 800b9fe:	d1e1      	bne.n	800b9c4 <__ssputs_r+0x70>
 800ba00:	4650      	mov	r0, sl
 800ba02:	6921      	ldr	r1, [r4, #16]
 800ba04:	f7ff feca 	bl	800b79c <_free_r>
 800ba08:	e7c7      	b.n	800b99a <__ssputs_r+0x46>
	...

0800ba0c <_svfiprintf_r>:
 800ba0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba10:	4698      	mov	r8, r3
 800ba12:	898b      	ldrh	r3, [r1, #12]
 800ba14:	4607      	mov	r7, r0
 800ba16:	061b      	lsls	r3, r3, #24
 800ba18:	460d      	mov	r5, r1
 800ba1a:	4614      	mov	r4, r2
 800ba1c:	b09d      	sub	sp, #116	; 0x74
 800ba1e:	d50e      	bpl.n	800ba3e <_svfiprintf_r+0x32>
 800ba20:	690b      	ldr	r3, [r1, #16]
 800ba22:	b963      	cbnz	r3, 800ba3e <_svfiprintf_r+0x32>
 800ba24:	2140      	movs	r1, #64	; 0x40
 800ba26:	f7ff ff21 	bl	800b86c <_malloc_r>
 800ba2a:	6028      	str	r0, [r5, #0]
 800ba2c:	6128      	str	r0, [r5, #16]
 800ba2e:	b920      	cbnz	r0, 800ba3a <_svfiprintf_r+0x2e>
 800ba30:	230c      	movs	r3, #12
 800ba32:	603b      	str	r3, [r7, #0]
 800ba34:	f04f 30ff 	mov.w	r0, #4294967295
 800ba38:	e0d1      	b.n	800bbde <_svfiprintf_r+0x1d2>
 800ba3a:	2340      	movs	r3, #64	; 0x40
 800ba3c:	616b      	str	r3, [r5, #20]
 800ba3e:	2300      	movs	r3, #0
 800ba40:	9309      	str	r3, [sp, #36]	; 0x24
 800ba42:	2320      	movs	r3, #32
 800ba44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba48:	2330      	movs	r3, #48	; 0x30
 800ba4a:	f04f 0901 	mov.w	r9, #1
 800ba4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bbf8 <_svfiprintf_r+0x1ec>
 800ba56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba5a:	4623      	mov	r3, r4
 800ba5c:	469a      	mov	sl, r3
 800ba5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba62:	b10a      	cbz	r2, 800ba68 <_svfiprintf_r+0x5c>
 800ba64:	2a25      	cmp	r2, #37	; 0x25
 800ba66:	d1f9      	bne.n	800ba5c <_svfiprintf_r+0x50>
 800ba68:	ebba 0b04 	subs.w	fp, sl, r4
 800ba6c:	d00b      	beq.n	800ba86 <_svfiprintf_r+0x7a>
 800ba6e:	465b      	mov	r3, fp
 800ba70:	4622      	mov	r2, r4
 800ba72:	4629      	mov	r1, r5
 800ba74:	4638      	mov	r0, r7
 800ba76:	f7ff ff6d 	bl	800b954 <__ssputs_r>
 800ba7a:	3001      	adds	r0, #1
 800ba7c:	f000 80aa 	beq.w	800bbd4 <_svfiprintf_r+0x1c8>
 800ba80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba82:	445a      	add	r2, fp
 800ba84:	9209      	str	r2, [sp, #36]	; 0x24
 800ba86:	f89a 3000 	ldrb.w	r3, [sl]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f000 80a2 	beq.w	800bbd4 <_svfiprintf_r+0x1c8>
 800ba90:	2300      	movs	r3, #0
 800ba92:	f04f 32ff 	mov.w	r2, #4294967295
 800ba96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba9a:	f10a 0a01 	add.w	sl, sl, #1
 800ba9e:	9304      	str	r3, [sp, #16]
 800baa0:	9307      	str	r3, [sp, #28]
 800baa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baa6:	931a      	str	r3, [sp, #104]	; 0x68
 800baa8:	4654      	mov	r4, sl
 800baaa:	2205      	movs	r2, #5
 800baac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bab0:	4851      	ldr	r0, [pc, #324]	; (800bbf8 <_svfiprintf_r+0x1ec>)
 800bab2:	f7ff f98b 	bl	800adcc <memchr>
 800bab6:	9a04      	ldr	r2, [sp, #16]
 800bab8:	b9d8      	cbnz	r0, 800baf2 <_svfiprintf_r+0xe6>
 800baba:	06d0      	lsls	r0, r2, #27
 800babc:	bf44      	itt	mi
 800babe:	2320      	movmi	r3, #32
 800bac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bac4:	0711      	lsls	r1, r2, #28
 800bac6:	bf44      	itt	mi
 800bac8:	232b      	movmi	r3, #43	; 0x2b
 800baca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bace:	f89a 3000 	ldrb.w	r3, [sl]
 800bad2:	2b2a      	cmp	r3, #42	; 0x2a
 800bad4:	d015      	beq.n	800bb02 <_svfiprintf_r+0xf6>
 800bad6:	4654      	mov	r4, sl
 800bad8:	2000      	movs	r0, #0
 800bada:	f04f 0c0a 	mov.w	ip, #10
 800bade:	9a07      	ldr	r2, [sp, #28]
 800bae0:	4621      	mov	r1, r4
 800bae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bae6:	3b30      	subs	r3, #48	; 0x30
 800bae8:	2b09      	cmp	r3, #9
 800baea:	d94e      	bls.n	800bb8a <_svfiprintf_r+0x17e>
 800baec:	b1b0      	cbz	r0, 800bb1c <_svfiprintf_r+0x110>
 800baee:	9207      	str	r2, [sp, #28]
 800baf0:	e014      	b.n	800bb1c <_svfiprintf_r+0x110>
 800baf2:	eba0 0308 	sub.w	r3, r0, r8
 800baf6:	fa09 f303 	lsl.w	r3, r9, r3
 800bafa:	4313      	orrs	r3, r2
 800bafc:	46a2      	mov	sl, r4
 800bafe:	9304      	str	r3, [sp, #16]
 800bb00:	e7d2      	b.n	800baa8 <_svfiprintf_r+0x9c>
 800bb02:	9b03      	ldr	r3, [sp, #12]
 800bb04:	1d19      	adds	r1, r3, #4
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	9103      	str	r1, [sp, #12]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	bfbb      	ittet	lt
 800bb0e:	425b      	neglt	r3, r3
 800bb10:	f042 0202 	orrlt.w	r2, r2, #2
 800bb14:	9307      	strge	r3, [sp, #28]
 800bb16:	9307      	strlt	r3, [sp, #28]
 800bb18:	bfb8      	it	lt
 800bb1a:	9204      	strlt	r2, [sp, #16]
 800bb1c:	7823      	ldrb	r3, [r4, #0]
 800bb1e:	2b2e      	cmp	r3, #46	; 0x2e
 800bb20:	d10c      	bne.n	800bb3c <_svfiprintf_r+0x130>
 800bb22:	7863      	ldrb	r3, [r4, #1]
 800bb24:	2b2a      	cmp	r3, #42	; 0x2a
 800bb26:	d135      	bne.n	800bb94 <_svfiprintf_r+0x188>
 800bb28:	9b03      	ldr	r3, [sp, #12]
 800bb2a:	3402      	adds	r4, #2
 800bb2c:	1d1a      	adds	r2, r3, #4
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	9203      	str	r2, [sp, #12]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	bfb8      	it	lt
 800bb36:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb3a:	9305      	str	r3, [sp, #20]
 800bb3c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800bbfc <_svfiprintf_r+0x1f0>
 800bb40:	2203      	movs	r2, #3
 800bb42:	4650      	mov	r0, sl
 800bb44:	7821      	ldrb	r1, [r4, #0]
 800bb46:	f7ff f941 	bl	800adcc <memchr>
 800bb4a:	b140      	cbz	r0, 800bb5e <_svfiprintf_r+0x152>
 800bb4c:	2340      	movs	r3, #64	; 0x40
 800bb4e:	eba0 000a 	sub.w	r0, r0, sl
 800bb52:	fa03 f000 	lsl.w	r0, r3, r0
 800bb56:	9b04      	ldr	r3, [sp, #16]
 800bb58:	3401      	adds	r4, #1
 800bb5a:	4303      	orrs	r3, r0
 800bb5c:	9304      	str	r3, [sp, #16]
 800bb5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb62:	2206      	movs	r2, #6
 800bb64:	4826      	ldr	r0, [pc, #152]	; (800bc00 <_svfiprintf_r+0x1f4>)
 800bb66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb6a:	f7ff f92f 	bl	800adcc <memchr>
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	d038      	beq.n	800bbe4 <_svfiprintf_r+0x1d8>
 800bb72:	4b24      	ldr	r3, [pc, #144]	; (800bc04 <_svfiprintf_r+0x1f8>)
 800bb74:	bb1b      	cbnz	r3, 800bbbe <_svfiprintf_r+0x1b2>
 800bb76:	9b03      	ldr	r3, [sp, #12]
 800bb78:	3307      	adds	r3, #7
 800bb7a:	f023 0307 	bic.w	r3, r3, #7
 800bb7e:	3308      	adds	r3, #8
 800bb80:	9303      	str	r3, [sp, #12]
 800bb82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb84:	4433      	add	r3, r6
 800bb86:	9309      	str	r3, [sp, #36]	; 0x24
 800bb88:	e767      	b.n	800ba5a <_svfiprintf_r+0x4e>
 800bb8a:	460c      	mov	r4, r1
 800bb8c:	2001      	movs	r0, #1
 800bb8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb92:	e7a5      	b.n	800bae0 <_svfiprintf_r+0xd4>
 800bb94:	2300      	movs	r3, #0
 800bb96:	f04f 0c0a 	mov.w	ip, #10
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	3401      	adds	r4, #1
 800bb9e:	9305      	str	r3, [sp, #20]
 800bba0:	4620      	mov	r0, r4
 800bba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bba6:	3a30      	subs	r2, #48	; 0x30
 800bba8:	2a09      	cmp	r2, #9
 800bbaa:	d903      	bls.n	800bbb4 <_svfiprintf_r+0x1a8>
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d0c5      	beq.n	800bb3c <_svfiprintf_r+0x130>
 800bbb0:	9105      	str	r1, [sp, #20]
 800bbb2:	e7c3      	b.n	800bb3c <_svfiprintf_r+0x130>
 800bbb4:	4604      	mov	r4, r0
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbbc:	e7f0      	b.n	800bba0 <_svfiprintf_r+0x194>
 800bbbe:	ab03      	add	r3, sp, #12
 800bbc0:	9300      	str	r3, [sp, #0]
 800bbc2:	462a      	mov	r2, r5
 800bbc4:	4638      	mov	r0, r7
 800bbc6:	4b10      	ldr	r3, [pc, #64]	; (800bc08 <_svfiprintf_r+0x1fc>)
 800bbc8:	a904      	add	r1, sp, #16
 800bbca:	f7fc fa7f 	bl	80080cc <_printf_float>
 800bbce:	1c42      	adds	r2, r0, #1
 800bbd0:	4606      	mov	r6, r0
 800bbd2:	d1d6      	bne.n	800bb82 <_svfiprintf_r+0x176>
 800bbd4:	89ab      	ldrh	r3, [r5, #12]
 800bbd6:	065b      	lsls	r3, r3, #25
 800bbd8:	f53f af2c 	bmi.w	800ba34 <_svfiprintf_r+0x28>
 800bbdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbde:	b01d      	add	sp, #116	; 0x74
 800bbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe4:	ab03      	add	r3, sp, #12
 800bbe6:	9300      	str	r3, [sp, #0]
 800bbe8:	462a      	mov	r2, r5
 800bbea:	4638      	mov	r0, r7
 800bbec:	4b06      	ldr	r3, [pc, #24]	; (800bc08 <_svfiprintf_r+0x1fc>)
 800bbee:	a904      	add	r1, sp, #16
 800bbf0:	f7fc fd08 	bl	8008604 <_printf_i>
 800bbf4:	e7eb      	b.n	800bbce <_svfiprintf_r+0x1c2>
 800bbf6:	bf00      	nop
 800bbf8:	0801d6cc 	.word	0x0801d6cc
 800bbfc:	0801d6d2 	.word	0x0801d6d2
 800bc00:	0801d6d6 	.word	0x0801d6d6
 800bc04:	080080cd 	.word	0x080080cd
 800bc08:	0800b955 	.word	0x0800b955

0800bc0c <nan>:
 800bc0c:	2000      	movs	r0, #0
 800bc0e:	4901      	ldr	r1, [pc, #4]	; (800bc14 <nan+0x8>)
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	7ff80000 	.word	0x7ff80000

0800bc18 <_sbrk_r>:
 800bc18:	b538      	push	{r3, r4, r5, lr}
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	4d05      	ldr	r5, [pc, #20]	; (800bc34 <_sbrk_r+0x1c>)
 800bc1e:	4604      	mov	r4, r0
 800bc20:	4608      	mov	r0, r1
 800bc22:	602b      	str	r3, [r5, #0]
 800bc24:	f7f9 fbd4 	bl	80053d0 <_sbrk>
 800bc28:	1c43      	adds	r3, r0, #1
 800bc2a:	d102      	bne.n	800bc32 <_sbrk_r+0x1a>
 800bc2c:	682b      	ldr	r3, [r5, #0]
 800bc2e:	b103      	cbz	r3, 800bc32 <_sbrk_r+0x1a>
 800bc30:	6023      	str	r3, [r4, #0]
 800bc32:	bd38      	pop	{r3, r4, r5, pc}
 800bc34:	200016d8 	.word	0x200016d8

0800bc38 <strncmp>:
 800bc38:	4603      	mov	r3, r0
 800bc3a:	b510      	push	{r4, lr}
 800bc3c:	b172      	cbz	r2, 800bc5c <strncmp+0x24>
 800bc3e:	3901      	subs	r1, #1
 800bc40:	1884      	adds	r4, r0, r2
 800bc42:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bc46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bc4a:	4290      	cmp	r0, r2
 800bc4c:	d101      	bne.n	800bc52 <strncmp+0x1a>
 800bc4e:	42a3      	cmp	r3, r4
 800bc50:	d101      	bne.n	800bc56 <strncmp+0x1e>
 800bc52:	1a80      	subs	r0, r0, r2
 800bc54:	bd10      	pop	{r4, pc}
 800bc56:	2800      	cmp	r0, #0
 800bc58:	d1f3      	bne.n	800bc42 <strncmp+0xa>
 800bc5a:	e7fa      	b.n	800bc52 <strncmp+0x1a>
 800bc5c:	4610      	mov	r0, r2
 800bc5e:	e7f9      	b.n	800bc54 <strncmp+0x1c>

0800bc60 <__ascii_wctomb>:
 800bc60:	4603      	mov	r3, r0
 800bc62:	4608      	mov	r0, r1
 800bc64:	b141      	cbz	r1, 800bc78 <__ascii_wctomb+0x18>
 800bc66:	2aff      	cmp	r2, #255	; 0xff
 800bc68:	d904      	bls.n	800bc74 <__ascii_wctomb+0x14>
 800bc6a:	228a      	movs	r2, #138	; 0x8a
 800bc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc70:	601a      	str	r2, [r3, #0]
 800bc72:	4770      	bx	lr
 800bc74:	2001      	movs	r0, #1
 800bc76:	700a      	strb	r2, [r1, #0]
 800bc78:	4770      	bx	lr
	...

0800bc7c <__assert_func>:
 800bc7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc7e:	4614      	mov	r4, r2
 800bc80:	461a      	mov	r2, r3
 800bc82:	4b09      	ldr	r3, [pc, #36]	; (800bca8 <__assert_func+0x2c>)
 800bc84:	4605      	mov	r5, r0
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	68d8      	ldr	r0, [r3, #12]
 800bc8a:	b14c      	cbz	r4, 800bca0 <__assert_func+0x24>
 800bc8c:	4b07      	ldr	r3, [pc, #28]	; (800bcac <__assert_func+0x30>)
 800bc8e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc92:	9100      	str	r1, [sp, #0]
 800bc94:	462b      	mov	r3, r5
 800bc96:	4906      	ldr	r1, [pc, #24]	; (800bcb0 <__assert_func+0x34>)
 800bc98:	f000 f80e 	bl	800bcb8 <fiprintf>
 800bc9c:	f000 fa8a 	bl	800c1b4 <abort>
 800bca0:	4b04      	ldr	r3, [pc, #16]	; (800bcb4 <__assert_func+0x38>)
 800bca2:	461c      	mov	r4, r3
 800bca4:	e7f3      	b.n	800bc8e <__assert_func+0x12>
 800bca6:	bf00      	nop
 800bca8:	20000010 	.word	0x20000010
 800bcac:	0801d6dd 	.word	0x0801d6dd
 800bcb0:	0801d6ea 	.word	0x0801d6ea
 800bcb4:	0801d718 	.word	0x0801d718

0800bcb8 <fiprintf>:
 800bcb8:	b40e      	push	{r1, r2, r3}
 800bcba:	b503      	push	{r0, r1, lr}
 800bcbc:	4601      	mov	r1, r0
 800bcbe:	ab03      	add	r3, sp, #12
 800bcc0:	4805      	ldr	r0, [pc, #20]	; (800bcd8 <fiprintf+0x20>)
 800bcc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcc6:	6800      	ldr	r0, [r0, #0]
 800bcc8:	9301      	str	r3, [sp, #4]
 800bcca:	f000 f883 	bl	800bdd4 <_vfiprintf_r>
 800bcce:	b002      	add	sp, #8
 800bcd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcd4:	b003      	add	sp, #12
 800bcd6:	4770      	bx	lr
 800bcd8:	20000010 	.word	0x20000010

0800bcdc <memmove>:
 800bcdc:	4288      	cmp	r0, r1
 800bcde:	b510      	push	{r4, lr}
 800bce0:	eb01 0402 	add.w	r4, r1, r2
 800bce4:	d902      	bls.n	800bcec <memmove+0x10>
 800bce6:	4284      	cmp	r4, r0
 800bce8:	4623      	mov	r3, r4
 800bcea:	d807      	bhi.n	800bcfc <memmove+0x20>
 800bcec:	1e43      	subs	r3, r0, #1
 800bcee:	42a1      	cmp	r1, r4
 800bcf0:	d008      	beq.n	800bd04 <memmove+0x28>
 800bcf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bcfa:	e7f8      	b.n	800bcee <memmove+0x12>
 800bcfc:	4601      	mov	r1, r0
 800bcfe:	4402      	add	r2, r0
 800bd00:	428a      	cmp	r2, r1
 800bd02:	d100      	bne.n	800bd06 <memmove+0x2a>
 800bd04:	bd10      	pop	{r4, pc}
 800bd06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd0e:	e7f7      	b.n	800bd00 <memmove+0x24>

0800bd10 <__malloc_lock>:
 800bd10:	4801      	ldr	r0, [pc, #4]	; (800bd18 <__malloc_lock+0x8>)
 800bd12:	f000 bc0b 	b.w	800c52c <__retarget_lock_acquire_recursive>
 800bd16:	bf00      	nop
 800bd18:	200016dc 	.word	0x200016dc

0800bd1c <__malloc_unlock>:
 800bd1c:	4801      	ldr	r0, [pc, #4]	; (800bd24 <__malloc_unlock+0x8>)
 800bd1e:	f000 bc06 	b.w	800c52e <__retarget_lock_release_recursive>
 800bd22:	bf00      	nop
 800bd24:	200016dc 	.word	0x200016dc

0800bd28 <_realloc_r>:
 800bd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd2c:	4680      	mov	r8, r0
 800bd2e:	4614      	mov	r4, r2
 800bd30:	460e      	mov	r6, r1
 800bd32:	b921      	cbnz	r1, 800bd3e <_realloc_r+0x16>
 800bd34:	4611      	mov	r1, r2
 800bd36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd3a:	f7ff bd97 	b.w	800b86c <_malloc_r>
 800bd3e:	b92a      	cbnz	r2, 800bd4c <_realloc_r+0x24>
 800bd40:	f7ff fd2c 	bl	800b79c <_free_r>
 800bd44:	4625      	mov	r5, r4
 800bd46:	4628      	mov	r0, r5
 800bd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd4c:	f000 fc56 	bl	800c5fc <_malloc_usable_size_r>
 800bd50:	4284      	cmp	r4, r0
 800bd52:	4607      	mov	r7, r0
 800bd54:	d802      	bhi.n	800bd5c <_realloc_r+0x34>
 800bd56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd5a:	d812      	bhi.n	800bd82 <_realloc_r+0x5a>
 800bd5c:	4621      	mov	r1, r4
 800bd5e:	4640      	mov	r0, r8
 800bd60:	f7ff fd84 	bl	800b86c <_malloc_r>
 800bd64:	4605      	mov	r5, r0
 800bd66:	2800      	cmp	r0, #0
 800bd68:	d0ed      	beq.n	800bd46 <_realloc_r+0x1e>
 800bd6a:	42bc      	cmp	r4, r7
 800bd6c:	4622      	mov	r2, r4
 800bd6e:	4631      	mov	r1, r6
 800bd70:	bf28      	it	cs
 800bd72:	463a      	movcs	r2, r7
 800bd74:	f7ff f838 	bl	800ade8 <memcpy>
 800bd78:	4631      	mov	r1, r6
 800bd7a:	4640      	mov	r0, r8
 800bd7c:	f7ff fd0e 	bl	800b79c <_free_r>
 800bd80:	e7e1      	b.n	800bd46 <_realloc_r+0x1e>
 800bd82:	4635      	mov	r5, r6
 800bd84:	e7df      	b.n	800bd46 <_realloc_r+0x1e>

0800bd86 <__sfputc_r>:
 800bd86:	6893      	ldr	r3, [r2, #8]
 800bd88:	b410      	push	{r4}
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	6093      	str	r3, [r2, #8]
 800bd90:	da07      	bge.n	800bda2 <__sfputc_r+0x1c>
 800bd92:	6994      	ldr	r4, [r2, #24]
 800bd94:	42a3      	cmp	r3, r4
 800bd96:	db01      	blt.n	800bd9c <__sfputc_r+0x16>
 800bd98:	290a      	cmp	r1, #10
 800bd9a:	d102      	bne.n	800bda2 <__sfputc_r+0x1c>
 800bd9c:	bc10      	pop	{r4}
 800bd9e:	f000 b949 	b.w	800c034 <__swbuf_r>
 800bda2:	6813      	ldr	r3, [r2, #0]
 800bda4:	1c58      	adds	r0, r3, #1
 800bda6:	6010      	str	r0, [r2, #0]
 800bda8:	7019      	strb	r1, [r3, #0]
 800bdaa:	4608      	mov	r0, r1
 800bdac:	bc10      	pop	{r4}
 800bdae:	4770      	bx	lr

0800bdb0 <__sfputs_r>:
 800bdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb2:	4606      	mov	r6, r0
 800bdb4:	460f      	mov	r7, r1
 800bdb6:	4614      	mov	r4, r2
 800bdb8:	18d5      	adds	r5, r2, r3
 800bdba:	42ac      	cmp	r4, r5
 800bdbc:	d101      	bne.n	800bdc2 <__sfputs_r+0x12>
 800bdbe:	2000      	movs	r0, #0
 800bdc0:	e007      	b.n	800bdd2 <__sfputs_r+0x22>
 800bdc2:	463a      	mov	r2, r7
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdca:	f7ff ffdc 	bl	800bd86 <__sfputc_r>
 800bdce:	1c43      	adds	r3, r0, #1
 800bdd0:	d1f3      	bne.n	800bdba <__sfputs_r+0xa>
 800bdd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bdd4 <_vfiprintf_r>:
 800bdd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd8:	460d      	mov	r5, r1
 800bdda:	4614      	mov	r4, r2
 800bddc:	4698      	mov	r8, r3
 800bdde:	4606      	mov	r6, r0
 800bde0:	b09d      	sub	sp, #116	; 0x74
 800bde2:	b118      	cbz	r0, 800bdec <_vfiprintf_r+0x18>
 800bde4:	6983      	ldr	r3, [r0, #24]
 800bde6:	b90b      	cbnz	r3, 800bdec <_vfiprintf_r+0x18>
 800bde8:	f000 fb02 	bl	800c3f0 <__sinit>
 800bdec:	4b89      	ldr	r3, [pc, #548]	; (800c014 <_vfiprintf_r+0x240>)
 800bdee:	429d      	cmp	r5, r3
 800bdf0:	d11b      	bne.n	800be2a <_vfiprintf_r+0x56>
 800bdf2:	6875      	ldr	r5, [r6, #4]
 800bdf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdf6:	07d9      	lsls	r1, r3, #31
 800bdf8:	d405      	bmi.n	800be06 <_vfiprintf_r+0x32>
 800bdfa:	89ab      	ldrh	r3, [r5, #12]
 800bdfc:	059a      	lsls	r2, r3, #22
 800bdfe:	d402      	bmi.n	800be06 <_vfiprintf_r+0x32>
 800be00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be02:	f000 fb93 	bl	800c52c <__retarget_lock_acquire_recursive>
 800be06:	89ab      	ldrh	r3, [r5, #12]
 800be08:	071b      	lsls	r3, r3, #28
 800be0a:	d501      	bpl.n	800be10 <_vfiprintf_r+0x3c>
 800be0c:	692b      	ldr	r3, [r5, #16]
 800be0e:	b9eb      	cbnz	r3, 800be4c <_vfiprintf_r+0x78>
 800be10:	4629      	mov	r1, r5
 800be12:	4630      	mov	r0, r6
 800be14:	f000 f960 	bl	800c0d8 <__swsetup_r>
 800be18:	b1c0      	cbz	r0, 800be4c <_vfiprintf_r+0x78>
 800be1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be1c:	07dc      	lsls	r4, r3, #31
 800be1e:	d50e      	bpl.n	800be3e <_vfiprintf_r+0x6a>
 800be20:	f04f 30ff 	mov.w	r0, #4294967295
 800be24:	b01d      	add	sp, #116	; 0x74
 800be26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be2a:	4b7b      	ldr	r3, [pc, #492]	; (800c018 <_vfiprintf_r+0x244>)
 800be2c:	429d      	cmp	r5, r3
 800be2e:	d101      	bne.n	800be34 <_vfiprintf_r+0x60>
 800be30:	68b5      	ldr	r5, [r6, #8]
 800be32:	e7df      	b.n	800bdf4 <_vfiprintf_r+0x20>
 800be34:	4b79      	ldr	r3, [pc, #484]	; (800c01c <_vfiprintf_r+0x248>)
 800be36:	429d      	cmp	r5, r3
 800be38:	bf08      	it	eq
 800be3a:	68f5      	ldreq	r5, [r6, #12]
 800be3c:	e7da      	b.n	800bdf4 <_vfiprintf_r+0x20>
 800be3e:	89ab      	ldrh	r3, [r5, #12]
 800be40:	0598      	lsls	r0, r3, #22
 800be42:	d4ed      	bmi.n	800be20 <_vfiprintf_r+0x4c>
 800be44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be46:	f000 fb72 	bl	800c52e <__retarget_lock_release_recursive>
 800be4a:	e7e9      	b.n	800be20 <_vfiprintf_r+0x4c>
 800be4c:	2300      	movs	r3, #0
 800be4e:	9309      	str	r3, [sp, #36]	; 0x24
 800be50:	2320      	movs	r3, #32
 800be52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be56:	2330      	movs	r3, #48	; 0x30
 800be58:	f04f 0901 	mov.w	r9, #1
 800be5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800be60:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c020 <_vfiprintf_r+0x24c>
 800be64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be68:	4623      	mov	r3, r4
 800be6a:	469a      	mov	sl, r3
 800be6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be70:	b10a      	cbz	r2, 800be76 <_vfiprintf_r+0xa2>
 800be72:	2a25      	cmp	r2, #37	; 0x25
 800be74:	d1f9      	bne.n	800be6a <_vfiprintf_r+0x96>
 800be76:	ebba 0b04 	subs.w	fp, sl, r4
 800be7a:	d00b      	beq.n	800be94 <_vfiprintf_r+0xc0>
 800be7c:	465b      	mov	r3, fp
 800be7e:	4622      	mov	r2, r4
 800be80:	4629      	mov	r1, r5
 800be82:	4630      	mov	r0, r6
 800be84:	f7ff ff94 	bl	800bdb0 <__sfputs_r>
 800be88:	3001      	adds	r0, #1
 800be8a:	f000 80aa 	beq.w	800bfe2 <_vfiprintf_r+0x20e>
 800be8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be90:	445a      	add	r2, fp
 800be92:	9209      	str	r2, [sp, #36]	; 0x24
 800be94:	f89a 3000 	ldrb.w	r3, [sl]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	f000 80a2 	beq.w	800bfe2 <_vfiprintf_r+0x20e>
 800be9e:	2300      	movs	r3, #0
 800bea0:	f04f 32ff 	mov.w	r2, #4294967295
 800bea4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bea8:	f10a 0a01 	add.w	sl, sl, #1
 800beac:	9304      	str	r3, [sp, #16]
 800beae:	9307      	str	r3, [sp, #28]
 800beb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800beb4:	931a      	str	r3, [sp, #104]	; 0x68
 800beb6:	4654      	mov	r4, sl
 800beb8:	2205      	movs	r2, #5
 800beba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bebe:	4858      	ldr	r0, [pc, #352]	; (800c020 <_vfiprintf_r+0x24c>)
 800bec0:	f7fe ff84 	bl	800adcc <memchr>
 800bec4:	9a04      	ldr	r2, [sp, #16]
 800bec6:	b9d8      	cbnz	r0, 800bf00 <_vfiprintf_r+0x12c>
 800bec8:	06d1      	lsls	r1, r2, #27
 800beca:	bf44      	itt	mi
 800becc:	2320      	movmi	r3, #32
 800bece:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bed2:	0713      	lsls	r3, r2, #28
 800bed4:	bf44      	itt	mi
 800bed6:	232b      	movmi	r3, #43	; 0x2b
 800bed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bedc:	f89a 3000 	ldrb.w	r3, [sl]
 800bee0:	2b2a      	cmp	r3, #42	; 0x2a
 800bee2:	d015      	beq.n	800bf10 <_vfiprintf_r+0x13c>
 800bee4:	4654      	mov	r4, sl
 800bee6:	2000      	movs	r0, #0
 800bee8:	f04f 0c0a 	mov.w	ip, #10
 800beec:	9a07      	ldr	r2, [sp, #28]
 800beee:	4621      	mov	r1, r4
 800bef0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bef4:	3b30      	subs	r3, #48	; 0x30
 800bef6:	2b09      	cmp	r3, #9
 800bef8:	d94e      	bls.n	800bf98 <_vfiprintf_r+0x1c4>
 800befa:	b1b0      	cbz	r0, 800bf2a <_vfiprintf_r+0x156>
 800befc:	9207      	str	r2, [sp, #28]
 800befe:	e014      	b.n	800bf2a <_vfiprintf_r+0x156>
 800bf00:	eba0 0308 	sub.w	r3, r0, r8
 800bf04:	fa09 f303 	lsl.w	r3, r9, r3
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	46a2      	mov	sl, r4
 800bf0c:	9304      	str	r3, [sp, #16]
 800bf0e:	e7d2      	b.n	800beb6 <_vfiprintf_r+0xe2>
 800bf10:	9b03      	ldr	r3, [sp, #12]
 800bf12:	1d19      	adds	r1, r3, #4
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	9103      	str	r1, [sp, #12]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	bfbb      	ittet	lt
 800bf1c:	425b      	neglt	r3, r3
 800bf1e:	f042 0202 	orrlt.w	r2, r2, #2
 800bf22:	9307      	strge	r3, [sp, #28]
 800bf24:	9307      	strlt	r3, [sp, #28]
 800bf26:	bfb8      	it	lt
 800bf28:	9204      	strlt	r2, [sp, #16]
 800bf2a:	7823      	ldrb	r3, [r4, #0]
 800bf2c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf2e:	d10c      	bne.n	800bf4a <_vfiprintf_r+0x176>
 800bf30:	7863      	ldrb	r3, [r4, #1]
 800bf32:	2b2a      	cmp	r3, #42	; 0x2a
 800bf34:	d135      	bne.n	800bfa2 <_vfiprintf_r+0x1ce>
 800bf36:	9b03      	ldr	r3, [sp, #12]
 800bf38:	3402      	adds	r4, #2
 800bf3a:	1d1a      	adds	r2, r3, #4
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	9203      	str	r2, [sp, #12]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	bfb8      	it	lt
 800bf44:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf48:	9305      	str	r3, [sp, #20]
 800bf4a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c024 <_vfiprintf_r+0x250>
 800bf4e:	2203      	movs	r2, #3
 800bf50:	4650      	mov	r0, sl
 800bf52:	7821      	ldrb	r1, [r4, #0]
 800bf54:	f7fe ff3a 	bl	800adcc <memchr>
 800bf58:	b140      	cbz	r0, 800bf6c <_vfiprintf_r+0x198>
 800bf5a:	2340      	movs	r3, #64	; 0x40
 800bf5c:	eba0 000a 	sub.w	r0, r0, sl
 800bf60:	fa03 f000 	lsl.w	r0, r3, r0
 800bf64:	9b04      	ldr	r3, [sp, #16]
 800bf66:	3401      	adds	r4, #1
 800bf68:	4303      	orrs	r3, r0
 800bf6a:	9304      	str	r3, [sp, #16]
 800bf6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf70:	2206      	movs	r2, #6
 800bf72:	482d      	ldr	r0, [pc, #180]	; (800c028 <_vfiprintf_r+0x254>)
 800bf74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf78:	f7fe ff28 	bl	800adcc <memchr>
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	d03f      	beq.n	800c000 <_vfiprintf_r+0x22c>
 800bf80:	4b2a      	ldr	r3, [pc, #168]	; (800c02c <_vfiprintf_r+0x258>)
 800bf82:	bb1b      	cbnz	r3, 800bfcc <_vfiprintf_r+0x1f8>
 800bf84:	9b03      	ldr	r3, [sp, #12]
 800bf86:	3307      	adds	r3, #7
 800bf88:	f023 0307 	bic.w	r3, r3, #7
 800bf8c:	3308      	adds	r3, #8
 800bf8e:	9303      	str	r3, [sp, #12]
 800bf90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf92:	443b      	add	r3, r7
 800bf94:	9309      	str	r3, [sp, #36]	; 0x24
 800bf96:	e767      	b.n	800be68 <_vfiprintf_r+0x94>
 800bf98:	460c      	mov	r4, r1
 800bf9a:	2001      	movs	r0, #1
 800bf9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfa0:	e7a5      	b.n	800beee <_vfiprintf_r+0x11a>
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	f04f 0c0a 	mov.w	ip, #10
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	3401      	adds	r4, #1
 800bfac:	9305      	str	r3, [sp, #20]
 800bfae:	4620      	mov	r0, r4
 800bfb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfb4:	3a30      	subs	r2, #48	; 0x30
 800bfb6:	2a09      	cmp	r2, #9
 800bfb8:	d903      	bls.n	800bfc2 <_vfiprintf_r+0x1ee>
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d0c5      	beq.n	800bf4a <_vfiprintf_r+0x176>
 800bfbe:	9105      	str	r1, [sp, #20]
 800bfc0:	e7c3      	b.n	800bf4a <_vfiprintf_r+0x176>
 800bfc2:	4604      	mov	r4, r0
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfca:	e7f0      	b.n	800bfae <_vfiprintf_r+0x1da>
 800bfcc:	ab03      	add	r3, sp, #12
 800bfce:	9300      	str	r3, [sp, #0]
 800bfd0:	462a      	mov	r2, r5
 800bfd2:	4630      	mov	r0, r6
 800bfd4:	4b16      	ldr	r3, [pc, #88]	; (800c030 <_vfiprintf_r+0x25c>)
 800bfd6:	a904      	add	r1, sp, #16
 800bfd8:	f7fc f878 	bl	80080cc <_printf_float>
 800bfdc:	4607      	mov	r7, r0
 800bfde:	1c78      	adds	r0, r7, #1
 800bfe0:	d1d6      	bne.n	800bf90 <_vfiprintf_r+0x1bc>
 800bfe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfe4:	07d9      	lsls	r1, r3, #31
 800bfe6:	d405      	bmi.n	800bff4 <_vfiprintf_r+0x220>
 800bfe8:	89ab      	ldrh	r3, [r5, #12]
 800bfea:	059a      	lsls	r2, r3, #22
 800bfec:	d402      	bmi.n	800bff4 <_vfiprintf_r+0x220>
 800bfee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bff0:	f000 fa9d 	bl	800c52e <__retarget_lock_release_recursive>
 800bff4:	89ab      	ldrh	r3, [r5, #12]
 800bff6:	065b      	lsls	r3, r3, #25
 800bff8:	f53f af12 	bmi.w	800be20 <_vfiprintf_r+0x4c>
 800bffc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bffe:	e711      	b.n	800be24 <_vfiprintf_r+0x50>
 800c000:	ab03      	add	r3, sp, #12
 800c002:	9300      	str	r3, [sp, #0]
 800c004:	462a      	mov	r2, r5
 800c006:	4630      	mov	r0, r6
 800c008:	4b09      	ldr	r3, [pc, #36]	; (800c030 <_vfiprintf_r+0x25c>)
 800c00a:	a904      	add	r1, sp, #16
 800c00c:	f7fc fafa 	bl	8008604 <_printf_i>
 800c010:	e7e4      	b.n	800bfdc <_vfiprintf_r+0x208>
 800c012:	bf00      	nop
 800c014:	0801d73c 	.word	0x0801d73c
 800c018:	0801d75c 	.word	0x0801d75c
 800c01c:	0801d71c 	.word	0x0801d71c
 800c020:	0801d6cc 	.word	0x0801d6cc
 800c024:	0801d6d2 	.word	0x0801d6d2
 800c028:	0801d6d6 	.word	0x0801d6d6
 800c02c:	080080cd 	.word	0x080080cd
 800c030:	0800bdb1 	.word	0x0800bdb1

0800c034 <__swbuf_r>:
 800c034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c036:	460e      	mov	r6, r1
 800c038:	4614      	mov	r4, r2
 800c03a:	4605      	mov	r5, r0
 800c03c:	b118      	cbz	r0, 800c046 <__swbuf_r+0x12>
 800c03e:	6983      	ldr	r3, [r0, #24]
 800c040:	b90b      	cbnz	r3, 800c046 <__swbuf_r+0x12>
 800c042:	f000 f9d5 	bl	800c3f0 <__sinit>
 800c046:	4b21      	ldr	r3, [pc, #132]	; (800c0cc <__swbuf_r+0x98>)
 800c048:	429c      	cmp	r4, r3
 800c04a:	d12b      	bne.n	800c0a4 <__swbuf_r+0x70>
 800c04c:	686c      	ldr	r4, [r5, #4]
 800c04e:	69a3      	ldr	r3, [r4, #24]
 800c050:	60a3      	str	r3, [r4, #8]
 800c052:	89a3      	ldrh	r3, [r4, #12]
 800c054:	071a      	lsls	r2, r3, #28
 800c056:	d52f      	bpl.n	800c0b8 <__swbuf_r+0x84>
 800c058:	6923      	ldr	r3, [r4, #16]
 800c05a:	b36b      	cbz	r3, 800c0b8 <__swbuf_r+0x84>
 800c05c:	6923      	ldr	r3, [r4, #16]
 800c05e:	6820      	ldr	r0, [r4, #0]
 800c060:	b2f6      	uxtb	r6, r6
 800c062:	1ac0      	subs	r0, r0, r3
 800c064:	6963      	ldr	r3, [r4, #20]
 800c066:	4637      	mov	r7, r6
 800c068:	4283      	cmp	r3, r0
 800c06a:	dc04      	bgt.n	800c076 <__swbuf_r+0x42>
 800c06c:	4621      	mov	r1, r4
 800c06e:	4628      	mov	r0, r5
 800c070:	f000 f92a 	bl	800c2c8 <_fflush_r>
 800c074:	bb30      	cbnz	r0, 800c0c4 <__swbuf_r+0x90>
 800c076:	68a3      	ldr	r3, [r4, #8]
 800c078:	3001      	adds	r0, #1
 800c07a:	3b01      	subs	r3, #1
 800c07c:	60a3      	str	r3, [r4, #8]
 800c07e:	6823      	ldr	r3, [r4, #0]
 800c080:	1c5a      	adds	r2, r3, #1
 800c082:	6022      	str	r2, [r4, #0]
 800c084:	701e      	strb	r6, [r3, #0]
 800c086:	6963      	ldr	r3, [r4, #20]
 800c088:	4283      	cmp	r3, r0
 800c08a:	d004      	beq.n	800c096 <__swbuf_r+0x62>
 800c08c:	89a3      	ldrh	r3, [r4, #12]
 800c08e:	07db      	lsls	r3, r3, #31
 800c090:	d506      	bpl.n	800c0a0 <__swbuf_r+0x6c>
 800c092:	2e0a      	cmp	r6, #10
 800c094:	d104      	bne.n	800c0a0 <__swbuf_r+0x6c>
 800c096:	4621      	mov	r1, r4
 800c098:	4628      	mov	r0, r5
 800c09a:	f000 f915 	bl	800c2c8 <_fflush_r>
 800c09e:	b988      	cbnz	r0, 800c0c4 <__swbuf_r+0x90>
 800c0a0:	4638      	mov	r0, r7
 800c0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0a4:	4b0a      	ldr	r3, [pc, #40]	; (800c0d0 <__swbuf_r+0x9c>)
 800c0a6:	429c      	cmp	r4, r3
 800c0a8:	d101      	bne.n	800c0ae <__swbuf_r+0x7a>
 800c0aa:	68ac      	ldr	r4, [r5, #8]
 800c0ac:	e7cf      	b.n	800c04e <__swbuf_r+0x1a>
 800c0ae:	4b09      	ldr	r3, [pc, #36]	; (800c0d4 <__swbuf_r+0xa0>)
 800c0b0:	429c      	cmp	r4, r3
 800c0b2:	bf08      	it	eq
 800c0b4:	68ec      	ldreq	r4, [r5, #12]
 800c0b6:	e7ca      	b.n	800c04e <__swbuf_r+0x1a>
 800c0b8:	4621      	mov	r1, r4
 800c0ba:	4628      	mov	r0, r5
 800c0bc:	f000 f80c 	bl	800c0d8 <__swsetup_r>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	d0cb      	beq.n	800c05c <__swbuf_r+0x28>
 800c0c4:	f04f 37ff 	mov.w	r7, #4294967295
 800c0c8:	e7ea      	b.n	800c0a0 <__swbuf_r+0x6c>
 800c0ca:	bf00      	nop
 800c0cc:	0801d73c 	.word	0x0801d73c
 800c0d0:	0801d75c 	.word	0x0801d75c
 800c0d4:	0801d71c 	.word	0x0801d71c

0800c0d8 <__swsetup_r>:
 800c0d8:	4b32      	ldr	r3, [pc, #200]	; (800c1a4 <__swsetup_r+0xcc>)
 800c0da:	b570      	push	{r4, r5, r6, lr}
 800c0dc:	681d      	ldr	r5, [r3, #0]
 800c0de:	4606      	mov	r6, r0
 800c0e0:	460c      	mov	r4, r1
 800c0e2:	b125      	cbz	r5, 800c0ee <__swsetup_r+0x16>
 800c0e4:	69ab      	ldr	r3, [r5, #24]
 800c0e6:	b913      	cbnz	r3, 800c0ee <__swsetup_r+0x16>
 800c0e8:	4628      	mov	r0, r5
 800c0ea:	f000 f981 	bl	800c3f0 <__sinit>
 800c0ee:	4b2e      	ldr	r3, [pc, #184]	; (800c1a8 <__swsetup_r+0xd0>)
 800c0f0:	429c      	cmp	r4, r3
 800c0f2:	d10f      	bne.n	800c114 <__swsetup_r+0x3c>
 800c0f4:	686c      	ldr	r4, [r5, #4]
 800c0f6:	89a3      	ldrh	r3, [r4, #12]
 800c0f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0fc:	0719      	lsls	r1, r3, #28
 800c0fe:	d42c      	bmi.n	800c15a <__swsetup_r+0x82>
 800c100:	06dd      	lsls	r5, r3, #27
 800c102:	d411      	bmi.n	800c128 <__swsetup_r+0x50>
 800c104:	2309      	movs	r3, #9
 800c106:	6033      	str	r3, [r6, #0]
 800c108:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c10c:	f04f 30ff 	mov.w	r0, #4294967295
 800c110:	81a3      	strh	r3, [r4, #12]
 800c112:	e03e      	b.n	800c192 <__swsetup_r+0xba>
 800c114:	4b25      	ldr	r3, [pc, #148]	; (800c1ac <__swsetup_r+0xd4>)
 800c116:	429c      	cmp	r4, r3
 800c118:	d101      	bne.n	800c11e <__swsetup_r+0x46>
 800c11a:	68ac      	ldr	r4, [r5, #8]
 800c11c:	e7eb      	b.n	800c0f6 <__swsetup_r+0x1e>
 800c11e:	4b24      	ldr	r3, [pc, #144]	; (800c1b0 <__swsetup_r+0xd8>)
 800c120:	429c      	cmp	r4, r3
 800c122:	bf08      	it	eq
 800c124:	68ec      	ldreq	r4, [r5, #12]
 800c126:	e7e6      	b.n	800c0f6 <__swsetup_r+0x1e>
 800c128:	0758      	lsls	r0, r3, #29
 800c12a:	d512      	bpl.n	800c152 <__swsetup_r+0x7a>
 800c12c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c12e:	b141      	cbz	r1, 800c142 <__swsetup_r+0x6a>
 800c130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c134:	4299      	cmp	r1, r3
 800c136:	d002      	beq.n	800c13e <__swsetup_r+0x66>
 800c138:	4630      	mov	r0, r6
 800c13a:	f7ff fb2f 	bl	800b79c <_free_r>
 800c13e:	2300      	movs	r3, #0
 800c140:	6363      	str	r3, [r4, #52]	; 0x34
 800c142:	89a3      	ldrh	r3, [r4, #12]
 800c144:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c148:	81a3      	strh	r3, [r4, #12]
 800c14a:	2300      	movs	r3, #0
 800c14c:	6063      	str	r3, [r4, #4]
 800c14e:	6923      	ldr	r3, [r4, #16]
 800c150:	6023      	str	r3, [r4, #0]
 800c152:	89a3      	ldrh	r3, [r4, #12]
 800c154:	f043 0308 	orr.w	r3, r3, #8
 800c158:	81a3      	strh	r3, [r4, #12]
 800c15a:	6923      	ldr	r3, [r4, #16]
 800c15c:	b94b      	cbnz	r3, 800c172 <__swsetup_r+0x9a>
 800c15e:	89a3      	ldrh	r3, [r4, #12]
 800c160:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c168:	d003      	beq.n	800c172 <__swsetup_r+0x9a>
 800c16a:	4621      	mov	r1, r4
 800c16c:	4630      	mov	r0, r6
 800c16e:	f000 fa05 	bl	800c57c <__smakebuf_r>
 800c172:	89a0      	ldrh	r0, [r4, #12]
 800c174:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c178:	f010 0301 	ands.w	r3, r0, #1
 800c17c:	d00a      	beq.n	800c194 <__swsetup_r+0xbc>
 800c17e:	2300      	movs	r3, #0
 800c180:	60a3      	str	r3, [r4, #8]
 800c182:	6963      	ldr	r3, [r4, #20]
 800c184:	425b      	negs	r3, r3
 800c186:	61a3      	str	r3, [r4, #24]
 800c188:	6923      	ldr	r3, [r4, #16]
 800c18a:	b943      	cbnz	r3, 800c19e <__swsetup_r+0xc6>
 800c18c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c190:	d1ba      	bne.n	800c108 <__swsetup_r+0x30>
 800c192:	bd70      	pop	{r4, r5, r6, pc}
 800c194:	0781      	lsls	r1, r0, #30
 800c196:	bf58      	it	pl
 800c198:	6963      	ldrpl	r3, [r4, #20]
 800c19a:	60a3      	str	r3, [r4, #8]
 800c19c:	e7f4      	b.n	800c188 <__swsetup_r+0xb0>
 800c19e:	2000      	movs	r0, #0
 800c1a0:	e7f7      	b.n	800c192 <__swsetup_r+0xba>
 800c1a2:	bf00      	nop
 800c1a4:	20000010 	.word	0x20000010
 800c1a8:	0801d73c 	.word	0x0801d73c
 800c1ac:	0801d75c 	.word	0x0801d75c
 800c1b0:	0801d71c 	.word	0x0801d71c

0800c1b4 <abort>:
 800c1b4:	2006      	movs	r0, #6
 800c1b6:	b508      	push	{r3, lr}
 800c1b8:	f000 fa50 	bl	800c65c <raise>
 800c1bc:	2001      	movs	r0, #1
 800c1be:	f7f9 f8d7 	bl	8005370 <_exit>
	...

0800c1c4 <__sflush_r>:
 800c1c4:	898a      	ldrh	r2, [r1, #12]
 800c1c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1c8:	4605      	mov	r5, r0
 800c1ca:	0710      	lsls	r0, r2, #28
 800c1cc:	460c      	mov	r4, r1
 800c1ce:	d457      	bmi.n	800c280 <__sflush_r+0xbc>
 800c1d0:	684b      	ldr	r3, [r1, #4]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	dc04      	bgt.n	800c1e0 <__sflush_r+0x1c>
 800c1d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	dc01      	bgt.n	800c1e0 <__sflush_r+0x1c>
 800c1dc:	2000      	movs	r0, #0
 800c1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1e2:	2e00      	cmp	r6, #0
 800c1e4:	d0fa      	beq.n	800c1dc <__sflush_r+0x18>
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1ec:	682f      	ldr	r7, [r5, #0]
 800c1ee:	602b      	str	r3, [r5, #0]
 800c1f0:	d032      	beq.n	800c258 <__sflush_r+0x94>
 800c1f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1f4:	89a3      	ldrh	r3, [r4, #12]
 800c1f6:	075a      	lsls	r2, r3, #29
 800c1f8:	d505      	bpl.n	800c206 <__sflush_r+0x42>
 800c1fa:	6863      	ldr	r3, [r4, #4]
 800c1fc:	1ac0      	subs	r0, r0, r3
 800c1fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c200:	b10b      	cbz	r3, 800c206 <__sflush_r+0x42>
 800c202:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c204:	1ac0      	subs	r0, r0, r3
 800c206:	2300      	movs	r3, #0
 800c208:	4602      	mov	r2, r0
 800c20a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c20c:	4628      	mov	r0, r5
 800c20e:	6a21      	ldr	r1, [r4, #32]
 800c210:	47b0      	blx	r6
 800c212:	1c43      	adds	r3, r0, #1
 800c214:	89a3      	ldrh	r3, [r4, #12]
 800c216:	d106      	bne.n	800c226 <__sflush_r+0x62>
 800c218:	6829      	ldr	r1, [r5, #0]
 800c21a:	291d      	cmp	r1, #29
 800c21c:	d82c      	bhi.n	800c278 <__sflush_r+0xb4>
 800c21e:	4a29      	ldr	r2, [pc, #164]	; (800c2c4 <__sflush_r+0x100>)
 800c220:	40ca      	lsrs	r2, r1
 800c222:	07d6      	lsls	r6, r2, #31
 800c224:	d528      	bpl.n	800c278 <__sflush_r+0xb4>
 800c226:	2200      	movs	r2, #0
 800c228:	6062      	str	r2, [r4, #4]
 800c22a:	6922      	ldr	r2, [r4, #16]
 800c22c:	04d9      	lsls	r1, r3, #19
 800c22e:	6022      	str	r2, [r4, #0]
 800c230:	d504      	bpl.n	800c23c <__sflush_r+0x78>
 800c232:	1c42      	adds	r2, r0, #1
 800c234:	d101      	bne.n	800c23a <__sflush_r+0x76>
 800c236:	682b      	ldr	r3, [r5, #0]
 800c238:	b903      	cbnz	r3, 800c23c <__sflush_r+0x78>
 800c23a:	6560      	str	r0, [r4, #84]	; 0x54
 800c23c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c23e:	602f      	str	r7, [r5, #0]
 800c240:	2900      	cmp	r1, #0
 800c242:	d0cb      	beq.n	800c1dc <__sflush_r+0x18>
 800c244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c248:	4299      	cmp	r1, r3
 800c24a:	d002      	beq.n	800c252 <__sflush_r+0x8e>
 800c24c:	4628      	mov	r0, r5
 800c24e:	f7ff faa5 	bl	800b79c <_free_r>
 800c252:	2000      	movs	r0, #0
 800c254:	6360      	str	r0, [r4, #52]	; 0x34
 800c256:	e7c2      	b.n	800c1de <__sflush_r+0x1a>
 800c258:	6a21      	ldr	r1, [r4, #32]
 800c25a:	2301      	movs	r3, #1
 800c25c:	4628      	mov	r0, r5
 800c25e:	47b0      	blx	r6
 800c260:	1c41      	adds	r1, r0, #1
 800c262:	d1c7      	bne.n	800c1f4 <__sflush_r+0x30>
 800c264:	682b      	ldr	r3, [r5, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d0c4      	beq.n	800c1f4 <__sflush_r+0x30>
 800c26a:	2b1d      	cmp	r3, #29
 800c26c:	d001      	beq.n	800c272 <__sflush_r+0xae>
 800c26e:	2b16      	cmp	r3, #22
 800c270:	d101      	bne.n	800c276 <__sflush_r+0xb2>
 800c272:	602f      	str	r7, [r5, #0]
 800c274:	e7b2      	b.n	800c1dc <__sflush_r+0x18>
 800c276:	89a3      	ldrh	r3, [r4, #12]
 800c278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c27c:	81a3      	strh	r3, [r4, #12]
 800c27e:	e7ae      	b.n	800c1de <__sflush_r+0x1a>
 800c280:	690f      	ldr	r7, [r1, #16]
 800c282:	2f00      	cmp	r7, #0
 800c284:	d0aa      	beq.n	800c1dc <__sflush_r+0x18>
 800c286:	0793      	lsls	r3, r2, #30
 800c288:	bf18      	it	ne
 800c28a:	2300      	movne	r3, #0
 800c28c:	680e      	ldr	r6, [r1, #0]
 800c28e:	bf08      	it	eq
 800c290:	694b      	ldreq	r3, [r1, #20]
 800c292:	1bf6      	subs	r6, r6, r7
 800c294:	600f      	str	r7, [r1, #0]
 800c296:	608b      	str	r3, [r1, #8]
 800c298:	2e00      	cmp	r6, #0
 800c29a:	dd9f      	ble.n	800c1dc <__sflush_r+0x18>
 800c29c:	4633      	mov	r3, r6
 800c29e:	463a      	mov	r2, r7
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	6a21      	ldr	r1, [r4, #32]
 800c2a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c2a8:	47e0      	blx	ip
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	dc06      	bgt.n	800c2bc <__sflush_r+0xf8>
 800c2ae:	89a3      	ldrh	r3, [r4, #12]
 800c2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2b8:	81a3      	strh	r3, [r4, #12]
 800c2ba:	e790      	b.n	800c1de <__sflush_r+0x1a>
 800c2bc:	4407      	add	r7, r0
 800c2be:	1a36      	subs	r6, r6, r0
 800c2c0:	e7ea      	b.n	800c298 <__sflush_r+0xd4>
 800c2c2:	bf00      	nop
 800c2c4:	20400001 	.word	0x20400001

0800c2c8 <_fflush_r>:
 800c2c8:	b538      	push	{r3, r4, r5, lr}
 800c2ca:	690b      	ldr	r3, [r1, #16]
 800c2cc:	4605      	mov	r5, r0
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	b913      	cbnz	r3, 800c2d8 <_fflush_r+0x10>
 800c2d2:	2500      	movs	r5, #0
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	bd38      	pop	{r3, r4, r5, pc}
 800c2d8:	b118      	cbz	r0, 800c2e2 <_fflush_r+0x1a>
 800c2da:	6983      	ldr	r3, [r0, #24]
 800c2dc:	b90b      	cbnz	r3, 800c2e2 <_fflush_r+0x1a>
 800c2de:	f000 f887 	bl	800c3f0 <__sinit>
 800c2e2:	4b14      	ldr	r3, [pc, #80]	; (800c334 <_fflush_r+0x6c>)
 800c2e4:	429c      	cmp	r4, r3
 800c2e6:	d11b      	bne.n	800c320 <_fflush_r+0x58>
 800c2e8:	686c      	ldr	r4, [r5, #4]
 800c2ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d0ef      	beq.n	800c2d2 <_fflush_r+0xa>
 800c2f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2f4:	07d0      	lsls	r0, r2, #31
 800c2f6:	d404      	bmi.n	800c302 <_fflush_r+0x3a>
 800c2f8:	0599      	lsls	r1, r3, #22
 800c2fa:	d402      	bmi.n	800c302 <_fflush_r+0x3a>
 800c2fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2fe:	f000 f915 	bl	800c52c <__retarget_lock_acquire_recursive>
 800c302:	4628      	mov	r0, r5
 800c304:	4621      	mov	r1, r4
 800c306:	f7ff ff5d 	bl	800c1c4 <__sflush_r>
 800c30a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c30c:	4605      	mov	r5, r0
 800c30e:	07da      	lsls	r2, r3, #31
 800c310:	d4e0      	bmi.n	800c2d4 <_fflush_r+0xc>
 800c312:	89a3      	ldrh	r3, [r4, #12]
 800c314:	059b      	lsls	r3, r3, #22
 800c316:	d4dd      	bmi.n	800c2d4 <_fflush_r+0xc>
 800c318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c31a:	f000 f908 	bl	800c52e <__retarget_lock_release_recursive>
 800c31e:	e7d9      	b.n	800c2d4 <_fflush_r+0xc>
 800c320:	4b05      	ldr	r3, [pc, #20]	; (800c338 <_fflush_r+0x70>)
 800c322:	429c      	cmp	r4, r3
 800c324:	d101      	bne.n	800c32a <_fflush_r+0x62>
 800c326:	68ac      	ldr	r4, [r5, #8]
 800c328:	e7df      	b.n	800c2ea <_fflush_r+0x22>
 800c32a:	4b04      	ldr	r3, [pc, #16]	; (800c33c <_fflush_r+0x74>)
 800c32c:	429c      	cmp	r4, r3
 800c32e:	bf08      	it	eq
 800c330:	68ec      	ldreq	r4, [r5, #12]
 800c332:	e7da      	b.n	800c2ea <_fflush_r+0x22>
 800c334:	0801d73c 	.word	0x0801d73c
 800c338:	0801d75c 	.word	0x0801d75c
 800c33c:	0801d71c 	.word	0x0801d71c

0800c340 <std>:
 800c340:	2300      	movs	r3, #0
 800c342:	b510      	push	{r4, lr}
 800c344:	4604      	mov	r4, r0
 800c346:	e9c0 3300 	strd	r3, r3, [r0]
 800c34a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c34e:	6083      	str	r3, [r0, #8]
 800c350:	8181      	strh	r1, [r0, #12]
 800c352:	6643      	str	r3, [r0, #100]	; 0x64
 800c354:	81c2      	strh	r2, [r0, #14]
 800c356:	6183      	str	r3, [r0, #24]
 800c358:	4619      	mov	r1, r3
 800c35a:	2208      	movs	r2, #8
 800c35c:	305c      	adds	r0, #92	; 0x5c
 800c35e:	f7fb fe0f 	bl	8007f80 <memset>
 800c362:	4b05      	ldr	r3, [pc, #20]	; (800c378 <std+0x38>)
 800c364:	6224      	str	r4, [r4, #32]
 800c366:	6263      	str	r3, [r4, #36]	; 0x24
 800c368:	4b04      	ldr	r3, [pc, #16]	; (800c37c <std+0x3c>)
 800c36a:	62a3      	str	r3, [r4, #40]	; 0x28
 800c36c:	4b04      	ldr	r3, [pc, #16]	; (800c380 <std+0x40>)
 800c36e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c370:	4b04      	ldr	r3, [pc, #16]	; (800c384 <std+0x44>)
 800c372:	6323      	str	r3, [r4, #48]	; 0x30
 800c374:	bd10      	pop	{r4, pc}
 800c376:	bf00      	nop
 800c378:	0800c695 	.word	0x0800c695
 800c37c:	0800c6b7 	.word	0x0800c6b7
 800c380:	0800c6ef 	.word	0x0800c6ef
 800c384:	0800c713 	.word	0x0800c713

0800c388 <_cleanup_r>:
 800c388:	4901      	ldr	r1, [pc, #4]	; (800c390 <_cleanup_r+0x8>)
 800c38a:	f000 b8af 	b.w	800c4ec <_fwalk_reent>
 800c38e:	bf00      	nop
 800c390:	0800c2c9 	.word	0x0800c2c9

0800c394 <__sfmoreglue>:
 800c394:	2268      	movs	r2, #104	; 0x68
 800c396:	b570      	push	{r4, r5, r6, lr}
 800c398:	1e4d      	subs	r5, r1, #1
 800c39a:	4355      	muls	r5, r2
 800c39c:	460e      	mov	r6, r1
 800c39e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3a2:	f7ff fa63 	bl	800b86c <_malloc_r>
 800c3a6:	4604      	mov	r4, r0
 800c3a8:	b140      	cbz	r0, 800c3bc <__sfmoreglue+0x28>
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	e9c0 1600 	strd	r1, r6, [r0]
 800c3b0:	300c      	adds	r0, #12
 800c3b2:	60a0      	str	r0, [r4, #8]
 800c3b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c3b8:	f7fb fde2 	bl	8007f80 <memset>
 800c3bc:	4620      	mov	r0, r4
 800c3be:	bd70      	pop	{r4, r5, r6, pc}

0800c3c0 <__sfp_lock_acquire>:
 800c3c0:	4801      	ldr	r0, [pc, #4]	; (800c3c8 <__sfp_lock_acquire+0x8>)
 800c3c2:	f000 b8b3 	b.w	800c52c <__retarget_lock_acquire_recursive>
 800c3c6:	bf00      	nop
 800c3c8:	200016dd 	.word	0x200016dd

0800c3cc <__sfp_lock_release>:
 800c3cc:	4801      	ldr	r0, [pc, #4]	; (800c3d4 <__sfp_lock_release+0x8>)
 800c3ce:	f000 b8ae 	b.w	800c52e <__retarget_lock_release_recursive>
 800c3d2:	bf00      	nop
 800c3d4:	200016dd 	.word	0x200016dd

0800c3d8 <__sinit_lock_acquire>:
 800c3d8:	4801      	ldr	r0, [pc, #4]	; (800c3e0 <__sinit_lock_acquire+0x8>)
 800c3da:	f000 b8a7 	b.w	800c52c <__retarget_lock_acquire_recursive>
 800c3de:	bf00      	nop
 800c3e0:	200016de 	.word	0x200016de

0800c3e4 <__sinit_lock_release>:
 800c3e4:	4801      	ldr	r0, [pc, #4]	; (800c3ec <__sinit_lock_release+0x8>)
 800c3e6:	f000 b8a2 	b.w	800c52e <__retarget_lock_release_recursive>
 800c3ea:	bf00      	nop
 800c3ec:	200016de 	.word	0x200016de

0800c3f0 <__sinit>:
 800c3f0:	b510      	push	{r4, lr}
 800c3f2:	4604      	mov	r4, r0
 800c3f4:	f7ff fff0 	bl	800c3d8 <__sinit_lock_acquire>
 800c3f8:	69a3      	ldr	r3, [r4, #24]
 800c3fa:	b11b      	cbz	r3, 800c404 <__sinit+0x14>
 800c3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c400:	f7ff bff0 	b.w	800c3e4 <__sinit_lock_release>
 800c404:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c408:	6523      	str	r3, [r4, #80]	; 0x50
 800c40a:	4b13      	ldr	r3, [pc, #76]	; (800c458 <__sinit+0x68>)
 800c40c:	4a13      	ldr	r2, [pc, #76]	; (800c45c <__sinit+0x6c>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	62a2      	str	r2, [r4, #40]	; 0x28
 800c412:	42a3      	cmp	r3, r4
 800c414:	bf08      	it	eq
 800c416:	2301      	moveq	r3, #1
 800c418:	4620      	mov	r0, r4
 800c41a:	bf08      	it	eq
 800c41c:	61a3      	streq	r3, [r4, #24]
 800c41e:	f000 f81f 	bl	800c460 <__sfp>
 800c422:	6060      	str	r0, [r4, #4]
 800c424:	4620      	mov	r0, r4
 800c426:	f000 f81b 	bl	800c460 <__sfp>
 800c42a:	60a0      	str	r0, [r4, #8]
 800c42c:	4620      	mov	r0, r4
 800c42e:	f000 f817 	bl	800c460 <__sfp>
 800c432:	2200      	movs	r2, #0
 800c434:	2104      	movs	r1, #4
 800c436:	60e0      	str	r0, [r4, #12]
 800c438:	6860      	ldr	r0, [r4, #4]
 800c43a:	f7ff ff81 	bl	800c340 <std>
 800c43e:	2201      	movs	r2, #1
 800c440:	2109      	movs	r1, #9
 800c442:	68a0      	ldr	r0, [r4, #8]
 800c444:	f7ff ff7c 	bl	800c340 <std>
 800c448:	2202      	movs	r2, #2
 800c44a:	2112      	movs	r1, #18
 800c44c:	68e0      	ldr	r0, [r4, #12]
 800c44e:	f7ff ff77 	bl	800c340 <std>
 800c452:	2301      	movs	r3, #1
 800c454:	61a3      	str	r3, [r4, #24]
 800c456:	e7d1      	b.n	800c3fc <__sinit+0xc>
 800c458:	0801d2d8 	.word	0x0801d2d8
 800c45c:	0800c389 	.word	0x0800c389

0800c460 <__sfp>:
 800c460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c462:	4607      	mov	r7, r0
 800c464:	f7ff ffac 	bl	800c3c0 <__sfp_lock_acquire>
 800c468:	4b1e      	ldr	r3, [pc, #120]	; (800c4e4 <__sfp+0x84>)
 800c46a:	681e      	ldr	r6, [r3, #0]
 800c46c:	69b3      	ldr	r3, [r6, #24]
 800c46e:	b913      	cbnz	r3, 800c476 <__sfp+0x16>
 800c470:	4630      	mov	r0, r6
 800c472:	f7ff ffbd 	bl	800c3f0 <__sinit>
 800c476:	3648      	adds	r6, #72	; 0x48
 800c478:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c47c:	3b01      	subs	r3, #1
 800c47e:	d503      	bpl.n	800c488 <__sfp+0x28>
 800c480:	6833      	ldr	r3, [r6, #0]
 800c482:	b30b      	cbz	r3, 800c4c8 <__sfp+0x68>
 800c484:	6836      	ldr	r6, [r6, #0]
 800c486:	e7f7      	b.n	800c478 <__sfp+0x18>
 800c488:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c48c:	b9d5      	cbnz	r5, 800c4c4 <__sfp+0x64>
 800c48e:	4b16      	ldr	r3, [pc, #88]	; (800c4e8 <__sfp+0x88>)
 800c490:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c494:	60e3      	str	r3, [r4, #12]
 800c496:	6665      	str	r5, [r4, #100]	; 0x64
 800c498:	f000 f847 	bl	800c52a <__retarget_lock_init_recursive>
 800c49c:	f7ff ff96 	bl	800c3cc <__sfp_lock_release>
 800c4a0:	2208      	movs	r2, #8
 800c4a2:	4629      	mov	r1, r5
 800c4a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c4a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c4ac:	6025      	str	r5, [r4, #0]
 800c4ae:	61a5      	str	r5, [r4, #24]
 800c4b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c4b4:	f7fb fd64 	bl	8007f80 <memset>
 800c4b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c4bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4c4:	3468      	adds	r4, #104	; 0x68
 800c4c6:	e7d9      	b.n	800c47c <__sfp+0x1c>
 800c4c8:	2104      	movs	r1, #4
 800c4ca:	4638      	mov	r0, r7
 800c4cc:	f7ff ff62 	bl	800c394 <__sfmoreglue>
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	6030      	str	r0, [r6, #0]
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	d1d5      	bne.n	800c484 <__sfp+0x24>
 800c4d8:	f7ff ff78 	bl	800c3cc <__sfp_lock_release>
 800c4dc:	230c      	movs	r3, #12
 800c4de:	603b      	str	r3, [r7, #0]
 800c4e0:	e7ee      	b.n	800c4c0 <__sfp+0x60>
 800c4e2:	bf00      	nop
 800c4e4:	0801d2d8 	.word	0x0801d2d8
 800c4e8:	ffff0001 	.word	0xffff0001

0800c4ec <_fwalk_reent>:
 800c4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4f0:	4606      	mov	r6, r0
 800c4f2:	4688      	mov	r8, r1
 800c4f4:	2700      	movs	r7, #0
 800c4f6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c4fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c4fe:	f1b9 0901 	subs.w	r9, r9, #1
 800c502:	d505      	bpl.n	800c510 <_fwalk_reent+0x24>
 800c504:	6824      	ldr	r4, [r4, #0]
 800c506:	2c00      	cmp	r4, #0
 800c508:	d1f7      	bne.n	800c4fa <_fwalk_reent+0xe>
 800c50a:	4638      	mov	r0, r7
 800c50c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c510:	89ab      	ldrh	r3, [r5, #12]
 800c512:	2b01      	cmp	r3, #1
 800c514:	d907      	bls.n	800c526 <_fwalk_reent+0x3a>
 800c516:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c51a:	3301      	adds	r3, #1
 800c51c:	d003      	beq.n	800c526 <_fwalk_reent+0x3a>
 800c51e:	4629      	mov	r1, r5
 800c520:	4630      	mov	r0, r6
 800c522:	47c0      	blx	r8
 800c524:	4307      	orrs	r7, r0
 800c526:	3568      	adds	r5, #104	; 0x68
 800c528:	e7e9      	b.n	800c4fe <_fwalk_reent+0x12>

0800c52a <__retarget_lock_init_recursive>:
 800c52a:	4770      	bx	lr

0800c52c <__retarget_lock_acquire_recursive>:
 800c52c:	4770      	bx	lr

0800c52e <__retarget_lock_release_recursive>:
 800c52e:	4770      	bx	lr

0800c530 <__swhatbuf_r>:
 800c530:	b570      	push	{r4, r5, r6, lr}
 800c532:	460e      	mov	r6, r1
 800c534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c538:	4614      	mov	r4, r2
 800c53a:	2900      	cmp	r1, #0
 800c53c:	461d      	mov	r5, r3
 800c53e:	b096      	sub	sp, #88	; 0x58
 800c540:	da08      	bge.n	800c554 <__swhatbuf_r+0x24>
 800c542:	2200      	movs	r2, #0
 800c544:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c548:	602a      	str	r2, [r5, #0]
 800c54a:	061a      	lsls	r2, r3, #24
 800c54c:	d410      	bmi.n	800c570 <__swhatbuf_r+0x40>
 800c54e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c552:	e00e      	b.n	800c572 <__swhatbuf_r+0x42>
 800c554:	466a      	mov	r2, sp
 800c556:	f000 f903 	bl	800c760 <_fstat_r>
 800c55a:	2800      	cmp	r0, #0
 800c55c:	dbf1      	blt.n	800c542 <__swhatbuf_r+0x12>
 800c55e:	9a01      	ldr	r2, [sp, #4]
 800c560:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c564:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c568:	425a      	negs	r2, r3
 800c56a:	415a      	adcs	r2, r3
 800c56c:	602a      	str	r2, [r5, #0]
 800c56e:	e7ee      	b.n	800c54e <__swhatbuf_r+0x1e>
 800c570:	2340      	movs	r3, #64	; 0x40
 800c572:	2000      	movs	r0, #0
 800c574:	6023      	str	r3, [r4, #0]
 800c576:	b016      	add	sp, #88	; 0x58
 800c578:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c57c <__smakebuf_r>:
 800c57c:	898b      	ldrh	r3, [r1, #12]
 800c57e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c580:	079d      	lsls	r5, r3, #30
 800c582:	4606      	mov	r6, r0
 800c584:	460c      	mov	r4, r1
 800c586:	d507      	bpl.n	800c598 <__smakebuf_r+0x1c>
 800c588:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c58c:	6023      	str	r3, [r4, #0]
 800c58e:	6123      	str	r3, [r4, #16]
 800c590:	2301      	movs	r3, #1
 800c592:	6163      	str	r3, [r4, #20]
 800c594:	b002      	add	sp, #8
 800c596:	bd70      	pop	{r4, r5, r6, pc}
 800c598:	466a      	mov	r2, sp
 800c59a:	ab01      	add	r3, sp, #4
 800c59c:	f7ff ffc8 	bl	800c530 <__swhatbuf_r>
 800c5a0:	9900      	ldr	r1, [sp, #0]
 800c5a2:	4605      	mov	r5, r0
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	f7ff f961 	bl	800b86c <_malloc_r>
 800c5aa:	b948      	cbnz	r0, 800c5c0 <__smakebuf_r+0x44>
 800c5ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5b0:	059a      	lsls	r2, r3, #22
 800c5b2:	d4ef      	bmi.n	800c594 <__smakebuf_r+0x18>
 800c5b4:	f023 0303 	bic.w	r3, r3, #3
 800c5b8:	f043 0302 	orr.w	r3, r3, #2
 800c5bc:	81a3      	strh	r3, [r4, #12]
 800c5be:	e7e3      	b.n	800c588 <__smakebuf_r+0xc>
 800c5c0:	4b0d      	ldr	r3, [pc, #52]	; (800c5f8 <__smakebuf_r+0x7c>)
 800c5c2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c5c4:	89a3      	ldrh	r3, [r4, #12]
 800c5c6:	6020      	str	r0, [r4, #0]
 800c5c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5cc:	81a3      	strh	r3, [r4, #12]
 800c5ce:	9b00      	ldr	r3, [sp, #0]
 800c5d0:	6120      	str	r0, [r4, #16]
 800c5d2:	6163      	str	r3, [r4, #20]
 800c5d4:	9b01      	ldr	r3, [sp, #4]
 800c5d6:	b15b      	cbz	r3, 800c5f0 <__smakebuf_r+0x74>
 800c5d8:	4630      	mov	r0, r6
 800c5da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5de:	f000 f8d1 	bl	800c784 <_isatty_r>
 800c5e2:	b128      	cbz	r0, 800c5f0 <__smakebuf_r+0x74>
 800c5e4:	89a3      	ldrh	r3, [r4, #12]
 800c5e6:	f023 0303 	bic.w	r3, r3, #3
 800c5ea:	f043 0301 	orr.w	r3, r3, #1
 800c5ee:	81a3      	strh	r3, [r4, #12]
 800c5f0:	89a0      	ldrh	r0, [r4, #12]
 800c5f2:	4305      	orrs	r5, r0
 800c5f4:	81a5      	strh	r5, [r4, #12]
 800c5f6:	e7cd      	b.n	800c594 <__smakebuf_r+0x18>
 800c5f8:	0800c389 	.word	0x0800c389

0800c5fc <_malloc_usable_size_r>:
 800c5fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c600:	1f18      	subs	r0, r3, #4
 800c602:	2b00      	cmp	r3, #0
 800c604:	bfbc      	itt	lt
 800c606:	580b      	ldrlt	r3, [r1, r0]
 800c608:	18c0      	addlt	r0, r0, r3
 800c60a:	4770      	bx	lr

0800c60c <_raise_r>:
 800c60c:	291f      	cmp	r1, #31
 800c60e:	b538      	push	{r3, r4, r5, lr}
 800c610:	4604      	mov	r4, r0
 800c612:	460d      	mov	r5, r1
 800c614:	d904      	bls.n	800c620 <_raise_r+0x14>
 800c616:	2316      	movs	r3, #22
 800c618:	6003      	str	r3, [r0, #0]
 800c61a:	f04f 30ff 	mov.w	r0, #4294967295
 800c61e:	bd38      	pop	{r3, r4, r5, pc}
 800c620:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c622:	b112      	cbz	r2, 800c62a <_raise_r+0x1e>
 800c624:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c628:	b94b      	cbnz	r3, 800c63e <_raise_r+0x32>
 800c62a:	4620      	mov	r0, r4
 800c62c:	f000 f830 	bl	800c690 <_getpid_r>
 800c630:	462a      	mov	r2, r5
 800c632:	4601      	mov	r1, r0
 800c634:	4620      	mov	r0, r4
 800c636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c63a:	f000 b817 	b.w	800c66c <_kill_r>
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d00a      	beq.n	800c658 <_raise_r+0x4c>
 800c642:	1c59      	adds	r1, r3, #1
 800c644:	d103      	bne.n	800c64e <_raise_r+0x42>
 800c646:	2316      	movs	r3, #22
 800c648:	6003      	str	r3, [r0, #0]
 800c64a:	2001      	movs	r0, #1
 800c64c:	e7e7      	b.n	800c61e <_raise_r+0x12>
 800c64e:	2400      	movs	r4, #0
 800c650:	4628      	mov	r0, r5
 800c652:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c656:	4798      	blx	r3
 800c658:	2000      	movs	r0, #0
 800c65a:	e7e0      	b.n	800c61e <_raise_r+0x12>

0800c65c <raise>:
 800c65c:	4b02      	ldr	r3, [pc, #8]	; (800c668 <raise+0xc>)
 800c65e:	4601      	mov	r1, r0
 800c660:	6818      	ldr	r0, [r3, #0]
 800c662:	f7ff bfd3 	b.w	800c60c <_raise_r>
 800c666:	bf00      	nop
 800c668:	20000010 	.word	0x20000010

0800c66c <_kill_r>:
 800c66c:	b538      	push	{r3, r4, r5, lr}
 800c66e:	2300      	movs	r3, #0
 800c670:	4d06      	ldr	r5, [pc, #24]	; (800c68c <_kill_r+0x20>)
 800c672:	4604      	mov	r4, r0
 800c674:	4608      	mov	r0, r1
 800c676:	4611      	mov	r1, r2
 800c678:	602b      	str	r3, [r5, #0]
 800c67a:	f7f8 fe6f 	bl	800535c <_kill>
 800c67e:	1c43      	adds	r3, r0, #1
 800c680:	d102      	bne.n	800c688 <_kill_r+0x1c>
 800c682:	682b      	ldr	r3, [r5, #0]
 800c684:	b103      	cbz	r3, 800c688 <_kill_r+0x1c>
 800c686:	6023      	str	r3, [r4, #0]
 800c688:	bd38      	pop	{r3, r4, r5, pc}
 800c68a:	bf00      	nop
 800c68c:	200016d8 	.word	0x200016d8

0800c690 <_getpid_r>:
 800c690:	f7f8 be62 	b.w	8005358 <_getpid>

0800c694 <__sread>:
 800c694:	b510      	push	{r4, lr}
 800c696:	460c      	mov	r4, r1
 800c698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c69c:	f000 f894 	bl	800c7c8 <_read_r>
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	bfab      	itete	ge
 800c6a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6a6:	89a3      	ldrhlt	r3, [r4, #12]
 800c6a8:	181b      	addge	r3, r3, r0
 800c6aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c6ae:	bfac      	ite	ge
 800c6b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c6b2:	81a3      	strhlt	r3, [r4, #12]
 800c6b4:	bd10      	pop	{r4, pc}

0800c6b6 <__swrite>:
 800c6b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ba:	461f      	mov	r7, r3
 800c6bc:	898b      	ldrh	r3, [r1, #12]
 800c6be:	4605      	mov	r5, r0
 800c6c0:	05db      	lsls	r3, r3, #23
 800c6c2:	460c      	mov	r4, r1
 800c6c4:	4616      	mov	r6, r2
 800c6c6:	d505      	bpl.n	800c6d4 <__swrite+0x1e>
 800c6c8:	2302      	movs	r3, #2
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d0:	f000 f868 	bl	800c7a4 <_lseek_r>
 800c6d4:	89a3      	ldrh	r3, [r4, #12]
 800c6d6:	4632      	mov	r2, r6
 800c6d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6dc:	81a3      	strh	r3, [r4, #12]
 800c6de:	4628      	mov	r0, r5
 800c6e0:	463b      	mov	r3, r7
 800c6e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ea:	f000 b817 	b.w	800c71c <_write_r>

0800c6ee <__sseek>:
 800c6ee:	b510      	push	{r4, lr}
 800c6f0:	460c      	mov	r4, r1
 800c6f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6f6:	f000 f855 	bl	800c7a4 <_lseek_r>
 800c6fa:	1c43      	adds	r3, r0, #1
 800c6fc:	89a3      	ldrh	r3, [r4, #12]
 800c6fe:	bf15      	itete	ne
 800c700:	6560      	strne	r0, [r4, #84]	; 0x54
 800c702:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c706:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c70a:	81a3      	strheq	r3, [r4, #12]
 800c70c:	bf18      	it	ne
 800c70e:	81a3      	strhne	r3, [r4, #12]
 800c710:	bd10      	pop	{r4, pc}

0800c712 <__sclose>:
 800c712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c716:	f000 b813 	b.w	800c740 <_close_r>
	...

0800c71c <_write_r>:
 800c71c:	b538      	push	{r3, r4, r5, lr}
 800c71e:	4604      	mov	r4, r0
 800c720:	4608      	mov	r0, r1
 800c722:	4611      	mov	r1, r2
 800c724:	2200      	movs	r2, #0
 800c726:	4d05      	ldr	r5, [pc, #20]	; (800c73c <_write_r+0x20>)
 800c728:	602a      	str	r2, [r5, #0]
 800c72a:	461a      	mov	r2, r3
 800c72c:	f7f8 fe34 	bl	8005398 <_write>
 800c730:	1c43      	adds	r3, r0, #1
 800c732:	d102      	bne.n	800c73a <_write_r+0x1e>
 800c734:	682b      	ldr	r3, [r5, #0]
 800c736:	b103      	cbz	r3, 800c73a <_write_r+0x1e>
 800c738:	6023      	str	r3, [r4, #0]
 800c73a:	bd38      	pop	{r3, r4, r5, pc}
 800c73c:	200016d8 	.word	0x200016d8

0800c740 <_close_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	2300      	movs	r3, #0
 800c744:	4d05      	ldr	r5, [pc, #20]	; (800c75c <_close_r+0x1c>)
 800c746:	4604      	mov	r4, r0
 800c748:	4608      	mov	r0, r1
 800c74a:	602b      	str	r3, [r5, #0]
 800c74c:	f7f8 fe32 	bl	80053b4 <_close>
 800c750:	1c43      	adds	r3, r0, #1
 800c752:	d102      	bne.n	800c75a <_close_r+0x1a>
 800c754:	682b      	ldr	r3, [r5, #0]
 800c756:	b103      	cbz	r3, 800c75a <_close_r+0x1a>
 800c758:	6023      	str	r3, [r4, #0]
 800c75a:	bd38      	pop	{r3, r4, r5, pc}
 800c75c:	200016d8 	.word	0x200016d8

0800c760 <_fstat_r>:
 800c760:	b538      	push	{r3, r4, r5, lr}
 800c762:	2300      	movs	r3, #0
 800c764:	4d06      	ldr	r5, [pc, #24]	; (800c780 <_fstat_r+0x20>)
 800c766:	4604      	mov	r4, r0
 800c768:	4608      	mov	r0, r1
 800c76a:	4611      	mov	r1, r2
 800c76c:	602b      	str	r3, [r5, #0]
 800c76e:	f7f8 fe25 	bl	80053bc <_fstat>
 800c772:	1c43      	adds	r3, r0, #1
 800c774:	d102      	bne.n	800c77c <_fstat_r+0x1c>
 800c776:	682b      	ldr	r3, [r5, #0]
 800c778:	b103      	cbz	r3, 800c77c <_fstat_r+0x1c>
 800c77a:	6023      	str	r3, [r4, #0]
 800c77c:	bd38      	pop	{r3, r4, r5, pc}
 800c77e:	bf00      	nop
 800c780:	200016d8 	.word	0x200016d8

0800c784 <_isatty_r>:
 800c784:	b538      	push	{r3, r4, r5, lr}
 800c786:	2300      	movs	r3, #0
 800c788:	4d05      	ldr	r5, [pc, #20]	; (800c7a0 <_isatty_r+0x1c>)
 800c78a:	4604      	mov	r4, r0
 800c78c:	4608      	mov	r0, r1
 800c78e:	602b      	str	r3, [r5, #0]
 800c790:	f7f8 fe1a 	bl	80053c8 <_isatty>
 800c794:	1c43      	adds	r3, r0, #1
 800c796:	d102      	bne.n	800c79e <_isatty_r+0x1a>
 800c798:	682b      	ldr	r3, [r5, #0]
 800c79a:	b103      	cbz	r3, 800c79e <_isatty_r+0x1a>
 800c79c:	6023      	str	r3, [r4, #0]
 800c79e:	bd38      	pop	{r3, r4, r5, pc}
 800c7a0:	200016d8 	.word	0x200016d8

0800c7a4 <_lseek_r>:
 800c7a4:	b538      	push	{r3, r4, r5, lr}
 800c7a6:	4604      	mov	r4, r0
 800c7a8:	4608      	mov	r0, r1
 800c7aa:	4611      	mov	r1, r2
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	4d05      	ldr	r5, [pc, #20]	; (800c7c4 <_lseek_r+0x20>)
 800c7b0:	602a      	str	r2, [r5, #0]
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	f7f8 fe0a 	bl	80053cc <_lseek>
 800c7b8:	1c43      	adds	r3, r0, #1
 800c7ba:	d102      	bne.n	800c7c2 <_lseek_r+0x1e>
 800c7bc:	682b      	ldr	r3, [r5, #0]
 800c7be:	b103      	cbz	r3, 800c7c2 <_lseek_r+0x1e>
 800c7c0:	6023      	str	r3, [r4, #0]
 800c7c2:	bd38      	pop	{r3, r4, r5, pc}
 800c7c4:	200016d8 	.word	0x200016d8

0800c7c8 <_read_r>:
 800c7c8:	b538      	push	{r3, r4, r5, lr}
 800c7ca:	4604      	mov	r4, r0
 800c7cc:	4608      	mov	r0, r1
 800c7ce:	4611      	mov	r1, r2
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	4d05      	ldr	r5, [pc, #20]	; (800c7e8 <_read_r+0x20>)
 800c7d4:	602a      	str	r2, [r5, #0]
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	f7f8 fdd0 	bl	800537c <_read>
 800c7dc:	1c43      	adds	r3, r0, #1
 800c7de:	d102      	bne.n	800c7e6 <_read_r+0x1e>
 800c7e0:	682b      	ldr	r3, [r5, #0]
 800c7e2:	b103      	cbz	r3, 800c7e6 <_read_r+0x1e>
 800c7e4:	6023      	str	r3, [r4, #0]
 800c7e6:	bd38      	pop	{r3, r4, r5, pc}
 800c7e8:	200016d8 	.word	0x200016d8
 800c7ec:	00000000 	.word	0x00000000

0800c7f0 <floor>:
 800c7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7f4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800c7f8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800c7fc:	2e13      	cmp	r6, #19
 800c7fe:	4602      	mov	r2, r0
 800c800:	460b      	mov	r3, r1
 800c802:	4607      	mov	r7, r0
 800c804:	460c      	mov	r4, r1
 800c806:	4605      	mov	r5, r0
 800c808:	dc33      	bgt.n	800c872 <floor+0x82>
 800c80a:	2e00      	cmp	r6, #0
 800c80c:	da14      	bge.n	800c838 <floor+0x48>
 800c80e:	a334      	add	r3, pc, #208	; (adr r3, 800c8e0 <floor+0xf0>)
 800c810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c814:	f7f8 fe12 	bl	800543c <__adddf3>
 800c818:	2200      	movs	r2, #0
 800c81a:	2300      	movs	r3, #0
 800c81c:	f7f9 fa54 	bl	8005cc8 <__aeabi_dcmpgt>
 800c820:	b138      	cbz	r0, 800c832 <floor+0x42>
 800c822:	2c00      	cmp	r4, #0
 800c824:	da58      	bge.n	800c8d8 <floor+0xe8>
 800c826:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c82a:	431d      	orrs	r5, r3
 800c82c:	d001      	beq.n	800c832 <floor+0x42>
 800c82e:	2500      	movs	r5, #0
 800c830:	4c2d      	ldr	r4, [pc, #180]	; (800c8e8 <floor+0xf8>)
 800c832:	4623      	mov	r3, r4
 800c834:	462f      	mov	r7, r5
 800c836:	e025      	b.n	800c884 <floor+0x94>
 800c838:	4a2c      	ldr	r2, [pc, #176]	; (800c8ec <floor+0xfc>)
 800c83a:	fa42 f806 	asr.w	r8, r2, r6
 800c83e:	ea01 0208 	and.w	r2, r1, r8
 800c842:	4302      	orrs	r2, r0
 800c844:	d01e      	beq.n	800c884 <floor+0x94>
 800c846:	a326      	add	r3, pc, #152	; (adr r3, 800c8e0 <floor+0xf0>)
 800c848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84c:	f7f8 fdf6 	bl	800543c <__adddf3>
 800c850:	2200      	movs	r2, #0
 800c852:	2300      	movs	r3, #0
 800c854:	f7f9 fa38 	bl	8005cc8 <__aeabi_dcmpgt>
 800c858:	2800      	cmp	r0, #0
 800c85a:	d0ea      	beq.n	800c832 <floor+0x42>
 800c85c:	2c00      	cmp	r4, #0
 800c85e:	bfbe      	ittt	lt
 800c860:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c864:	fa43 f606 	asrlt.w	r6, r3, r6
 800c868:	19a4      	addlt	r4, r4, r6
 800c86a:	2500      	movs	r5, #0
 800c86c:	ea24 0408 	bic.w	r4, r4, r8
 800c870:	e7df      	b.n	800c832 <floor+0x42>
 800c872:	2e33      	cmp	r6, #51	; 0x33
 800c874:	dd0a      	ble.n	800c88c <floor+0x9c>
 800c876:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c87a:	d103      	bne.n	800c884 <floor+0x94>
 800c87c:	f7f8 fdde 	bl	800543c <__adddf3>
 800c880:	4607      	mov	r7, r0
 800c882:	460b      	mov	r3, r1
 800c884:	4638      	mov	r0, r7
 800c886:	4619      	mov	r1, r3
 800c888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c88c:	f04f 32ff 	mov.w	r2, #4294967295
 800c890:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800c894:	fa22 f808 	lsr.w	r8, r2, r8
 800c898:	ea18 0f00 	tst.w	r8, r0
 800c89c:	d0f2      	beq.n	800c884 <floor+0x94>
 800c89e:	a310      	add	r3, pc, #64	; (adr r3, 800c8e0 <floor+0xf0>)
 800c8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a4:	f7f8 fdca 	bl	800543c <__adddf3>
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	f7f9 fa0c 	bl	8005cc8 <__aeabi_dcmpgt>
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	d0be      	beq.n	800c832 <floor+0x42>
 800c8b4:	2c00      	cmp	r4, #0
 800c8b6:	da02      	bge.n	800c8be <floor+0xce>
 800c8b8:	2e14      	cmp	r6, #20
 800c8ba:	d103      	bne.n	800c8c4 <floor+0xd4>
 800c8bc:	3401      	adds	r4, #1
 800c8be:	ea25 0508 	bic.w	r5, r5, r8
 800c8c2:	e7b6      	b.n	800c832 <floor+0x42>
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c8ca:	fa03 f606 	lsl.w	r6, r3, r6
 800c8ce:	4435      	add	r5, r6
 800c8d0:	42bd      	cmp	r5, r7
 800c8d2:	bf38      	it	cc
 800c8d4:	18e4      	addcc	r4, r4, r3
 800c8d6:	e7f2      	b.n	800c8be <floor+0xce>
 800c8d8:	2500      	movs	r5, #0
 800c8da:	462c      	mov	r4, r5
 800c8dc:	e7a9      	b.n	800c832 <floor+0x42>
 800c8de:	bf00      	nop
 800c8e0:	8800759c 	.word	0x8800759c
 800c8e4:	7e37e43c 	.word	0x7e37e43c
 800c8e8:	bff00000 	.word	0xbff00000
 800c8ec:	000fffff 	.word	0x000fffff

0800c8f0 <_init>:
 800c8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8f2:	bf00      	nop
 800c8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8f6:	bc08      	pop	{r3}
 800c8f8:	469e      	mov	lr, r3
 800c8fa:	4770      	bx	lr

0800c8fc <_fini>:
 800c8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8fe:	bf00      	nop
 800c900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c902:	bc08      	pop	{r3}
 800c904:	469e      	mov	lr, r3
 800c906:	4770      	bx	lr
