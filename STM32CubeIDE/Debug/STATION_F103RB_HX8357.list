
STATION_F103RB_HX8357.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011d6c  0800a2f8  0800a2f8  0001a2f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c064  0801c064  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  0801c064  0801c064  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801c064  0801c064  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c064  0801c064  0002c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c068  0801c068  0002c068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801c06c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006cc  200001e8  0801c250  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008b4  0801c250  000308b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016597  00000000  00000000  0003020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246e  00000000  00000000  000467a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00006b2c  00000000  00000000  00048c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  0004f740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001648  00000000  00000000  0004f790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5cc  00000000  00000000  00050dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091394  00000000  00000000  0005e3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef738  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e60  00000000  00000000  000ef788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00019c44  00000000  00000000  000f15e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a2e0 	.word	0x0800a2e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800a2e0 	.word	0x0800a2e0

08000150 <LCD_Bus>:
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
}

inline static void LCD_Bus(uint16_t val)
{
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8000150:	0bc3      	lsrs	r3, r0, #15
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 8000152:	bf14      	ite	ne
 8000154:	2302      	movne	r3, #2
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000156:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 800015a:	4a30      	ldr	r2, [pc, #192]	; (800021c <LCD_Bus+0xcc>)
 800015c:	6113      	str	r3, [r2, #16]
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800015e:	0443      	lsls	r3, r0, #17
    GPIOx->BSRR = GPIO_Pin;
 8000160:	bf4c      	ite	mi
 8000162:	2301      	movmi	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000164:	f44f 3380 	movpl.w	r3, #65536	; 0x10000
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8000168:	f410 5f00 	tst.w	r0, #8192	; 0x2000
    GPIOx->BSRR = GPIO_Pin;
 800016c:	bf14      	ite	ne
 800016e:	2108      	movne	r1, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000170:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
 8000174:	6113      	str	r3, [r2, #16]
 8000176:	4b2a      	ldr	r3, [pc, #168]	; (8000220 <LCD_Bus+0xd0>)
 8000178:	6119      	str	r1, [r3, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 800017a:	04c1      	lsls	r1, r0, #19
    GPIOx->BSRR = GPIO_Pin;
 800017c:	bf4c      	ite	mi
 800017e:	2104      	movmi	r1, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000180:	f44f 2180 	movpl.w	r1, #262144	; 0x40000
 8000184:	6119      	str	r1, [r3, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8000186:	0501      	lsls	r1, r0, #20
    GPIOx->BSRR = GPIO_Pin;
 8000188:	bf4c      	ite	mi
 800018a:	2102      	movmi	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800018c:	f44f 3100 	movpl.w	r1, #131072	; 0x20000
 8000190:	6119      	str	r1, [r3, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8000192:	0541      	lsls	r1, r0, #21
    GPIOx->BSRR = GPIO_Pin;
 8000194:	bf4c      	ite	mi
 8000196:	2101      	movmi	r1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000198:	f44f 3180 	movpl.w	r1, #65536	; 0x10000
 800019c:	6119      	str	r1, [r3, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 800019e:	0581      	lsls	r1, r0, #22
    GPIOx->BSRR = GPIO_Pin;
 80001a0:	bf4c      	ite	mi
 80001a2:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001a6:	f04f 4100 	movpl.w	r1, #2147483648	; 0x80000000
 80001aa:	6119      	str	r1, [r3, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80001ac:	05c1      	lsls	r1, r0, #23
    GPIOx->BSRR = GPIO_Pin;
 80001ae:	bf4c      	ite	mi
 80001b0:	f44f 4180 	movmi.w	r1, #16384	; 0x4000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001b4:	f04f 4180 	movpl.w	r1, #1073741824	; 0x40000000
 80001b8:	6119      	str	r1, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80001ba:	0601      	lsls	r1, r0, #24
    GPIOx->BSRR = GPIO_Pin;
 80001bc:	bf4c      	ite	mi
 80001be:	2104      	movmi	r1, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001c0:	f44f 2180 	movpl.w	r1, #262144	; 0x40000
 80001c4:	6111      	str	r1, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80001c6:	0641      	lsls	r1, r0, #25
    GPIOx->BSRR = GPIO_Pin;
 80001c8:	bf4c      	ite	mi
 80001ca:	2108      	movmi	r1, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001cc:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
 80001d0:	6111      	str	r1, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80001d2:	0681      	lsls	r1, r0, #26
    GPIOx->BSRR = GPIO_Pin;
 80001d4:	bf4c      	ite	mi
 80001d6:	2110      	movmi	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001d8:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 80001dc:	6111      	str	r1, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80001de:	06c1      	lsls	r1, r0, #27
    GPIOx->BSRR = GPIO_Pin;
 80001e0:	bf4c      	ite	mi
 80001e2:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001e4:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
 80001e8:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80001ea:	0701      	lsls	r1, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 80001ec:	bf4c      	ite	mi
 80001ee:	2140      	movmi	r1, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001f0:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
 80001f4:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80001f6:	0741      	lsls	r1, r0, #29
    GPIOx->BSRR = GPIO_Pin;
 80001f8:	bf4c      	ite	mi
 80001fa:	2180      	movmi	r1, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001fc:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
 8000200:	6111      	str	r1, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000202:	0781      	lsls	r1, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 8000204:	bf4c      	ite	mi
 8000206:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000208:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 800020c:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800020e:	07c2      	lsls	r2, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 8000210:	bf4c      	ite	mi
 8000212:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000214:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000218:	611a      	str	r2, [r3, #16]
}
 800021a:	4770      	bx	lr
 800021c:	40010800 	.word	0x40010800
 8000220:	40011000 	.word	0x40011000

08000224 <LCD_Send_Cmd>:
 8000224:	f44f 3380 	mov.w	r3, #65536	; 0x10000

inline static void LCD_Send_Cmd(uint16_t cmd)
{
 8000228:	b510      	push	{r4, lr}
 800022a:	4c08      	ldr	r4, [pc, #32]	; (800024c <LCD_Send_Cmd+0x28>)
 800022c:	6123      	str	r3, [r4, #16]
 800022e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000232:	6123      	str	r3, [r4, #16]
	LCD_RS_R
	LCD_CS_R
	LCD_Bus(cmd);
 8000234:	f7ff ff8c 	bl	8000150 <LCD_Bus>
 8000238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800023c:	6123      	str	r3, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 800023e:	2302      	movs	r3, #2
 8000240:	6123      	str	r3, [r4, #16]
 8000242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000246:	6123      	str	r3, [r4, #16]
	LCD_WR_R
	//_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 8000248:	bd10      	pop	{r4, pc}
 800024a:	bf00      	nop
 800024c:	40010c00 	.word	0x40010c00

08000250 <LCD_Send_Dat>:
 8000250:	2301      	movs	r3, #1

inline static void LCD_Send_Dat(uint16_t dat)
{
 8000252:	b510      	push	{r4, lr}
 8000254:	4c07      	ldr	r4, [pc, #28]	; (8000274 <LCD_Send_Dat+0x24>)
 8000256:	6123      	str	r3, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000258:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800025c:	6123      	str	r3, [r4, #16]
	LCD_RS_S
	LCD_CS_R	
	LCD_Bus(dat);
 800025e:	f7ff ff77 	bl	8000150 <LCD_Bus>
 8000262:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000266:	6123      	str	r3, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000268:	2302      	movs	r3, #2
 800026a:	6123      	str	r3, [r4, #16]
 800026c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000270:	6123      	str	r3, [r4, #16]
	LCD_WR_R
//	_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 8000272:	bd10      	pop	{r4, pc}
 8000274:	40010c00 	.word	0x40010c00

08000278 <LCD_Rect_Fill>:
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(0, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 8000278:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	4680      	mov	r8, r0
	uint32_t i = 0;
	uint32_t j = (uint32_t) w * (uint32_t) h;
	LCD_Window(y, x, y + h - 1, x + w - 1);
 800027e:	f108 35ff 	add.w	r5, r8, #4294967295
 8000282:	1e48      	subs	r0, r1, #1
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8000284:	fb03 f702 	mul.w	r7, r3, r2
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000288:	442a      	add	r2, r5
 800028a:	4403      	add	r3, r0
 800028c:	b295      	uxth	r5, r2
	data[0] = x1 >> 8;
 800028e:	0a0a      	lsrs	r2, r1, #8
 8000290:	f88d 2004 	strb.w	r2, [sp, #4]
	LCD_Send_Cmd(HX8357_CASET);
 8000294:	202a      	movs	r0, #42	; 0x2a
  data[2] = x2 >> 8;
 8000296:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800029a:	f10d 0904 	add.w	r9, sp, #4
{
 800029e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  data[1] = x1 & 0xFF;
 80002a0:	f88d 1005 	strb.w	r1, [sp, #5]
  data[2] = x2 >> 8;
 80002a4:	f88d 2006 	strb.w	r2, [sp, #6]
  data[3] = x2 & 0xFF;
 80002a8:	f88d 3007 	strb.w	r3, [sp, #7]
	LCD_Send_Cmd(HX8357_CASET);
 80002ac:	46ca      	mov	sl, r9
 80002ae:	f7ff ffb9 	bl	8000224 <LCD_Send_Cmd>
 80002b2:	2404      	movs	r4, #4
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 80002b4:	f81a 0b01 	ldrb.w	r0, [sl], #1
 80002b8:	3c01      	subs	r4, #1
 80002ba:	f7ff ffc9 	bl	8000250 <LCD_Send_Dat>
 80002be:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80002c2:	d1f7      	bne.n	80002b4 <LCD_Rect_Fill+0x3c>
	data[0] = y1 >> 8;
 80002c4:	ea4f 2318 	mov.w	r3, r8, lsr #8
 80002c8:	f88d 3004 	strb.w	r3, [sp, #4]
	LCD_Send_Cmd(HX8357_PASET);
 80002cc:	202b      	movs	r0, #43	; 0x2b
  data[2] = y2 >> 8;
 80002ce:	0a2b      	lsrs	r3, r5, #8
  data[1] = y1;
 80002d0:	f88d 8005 	strb.w	r8, [sp, #5]
  data[2] = y2 >> 8;
 80002d4:	f88d 3006 	strb.w	r3, [sp, #6]
  data[3] = y2;
 80002d8:	f88d 5007 	strb.w	r5, [sp, #7]
	LCD_Send_Cmd(HX8357_PASET);
 80002dc:	f7ff ffa2 	bl	8000224 <LCD_Send_Cmd>
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 80002e0:	3401      	adds	r4, #1
 80002e2:	f819 0b01 	ldrb.w	r0, [r9], #1
 80002e6:	b2e4      	uxtb	r4, r4
 80002e8:	f7ff ffb2 	bl	8000250 <LCD_Send_Dat>
 80002ec:	2c04      	cmp	r4, #4
 80002ee:	d1f7      	bne.n	80002e0 <LCD_Rect_Fill+0x68>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80002f0:	2400      	movs	r4, #0
  LCD_Send_Cmd(HX83h7_RAMWR);
 80002f2:	202c      	movs	r0, #44	; 0x2c
 80002f4:	f7ff ff96 	bl	8000224 <LCD_Send_Cmd>
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 80002f8:	f3c6 2085 	ubfx	r0, r6, #10, #6
 80002fc:	f3c6 43c4 	ubfx	r3, r6, #19, #5
 8000300:	0140      	lsls	r0, r0, #5
 8000302:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8000306:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 800030a:	4330      	orrs	r0, r6
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 800030c:	42bc      	cmp	r4, r7
 800030e:	d102      	bne.n	8000316 <LCD_Rect_Fill+0x9e>
}
 8000310:	b002      	add	sp, #8
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8000316:	f7ff ff9b 	bl	8000250 <LCD_Send_Dat>
 800031a:	3401      	adds	r4, #1
 800031c:	e7f6      	b.n	800030c <LCD_Rect_Fill+0x94>

0800031e <HAL_Delay>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800031e:	4a04      	ldr	r2, [pc, #16]	; (8000330 <HAL_Delay+0x12>)
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait += (uint32_t)(uwTickFreq);
 8000320:	3001      	adds	r0, #1
  return uwTick;
 8000322:	6811      	ldr	r1, [r2, #0]
 8000324:	6813      	ldr	r3, [r2, #0]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000326:	1a5b      	subs	r3, r3, r1
 8000328:	4283      	cmp	r3, r0
 800032a:	d3fb      	bcc.n	8000324 <HAL_Delay+0x6>
  {
  }
}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	20000208 	.word	0x20000208

08000334 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000334:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000336:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800033a:	2b02      	cmp	r3, #2
 800033c:	d003      	beq.n	8000346 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800033e:	2304      	movs	r3, #4
 8000340:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000342:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8000344:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000346:	6803      	ldr	r3, [r0, #0]
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	f022 020e 	bic.w	r2, r2, #14
 800034e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	f022 0201 	bic.w	r2, r2, #1
 8000356:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000358:	4a17      	ldr	r2, [pc, #92]	; (80003b8 <HAL_DMA_Abort_IT+0x84>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d01c      	beq.n	8000398 <HAL_DMA_Abort_IT+0x64>
 800035e:	3214      	adds	r2, #20
 8000360:	4293      	cmp	r3, r2
 8000362:	d01b      	beq.n	800039c <HAL_DMA_Abort_IT+0x68>
 8000364:	3214      	adds	r2, #20
 8000366:	4293      	cmp	r3, r2
 8000368:	d01a      	beq.n	80003a0 <HAL_DMA_Abort_IT+0x6c>
 800036a:	3214      	adds	r2, #20
 800036c:	4293      	cmp	r3, r2
 800036e:	d01a      	beq.n	80003a6 <HAL_DMA_Abort_IT+0x72>
 8000370:	3214      	adds	r2, #20
 8000372:	4293      	cmp	r3, r2
 8000374:	d01a      	beq.n	80003ac <HAL_DMA_Abort_IT+0x78>
 8000376:	3214      	adds	r2, #20
 8000378:	4293      	cmp	r3, r2
 800037a:	bf0c      	ite	eq
 800037c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000380:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000384:	4a0d      	ldr	r2, [pc, #52]	; (80003bc <HAL_DMA_Abort_IT+0x88>)
 8000386:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800038c:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800038e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000390:	b17b      	cbz	r3, 80003b2 <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 8000392:	4798      	blx	r3
 8000394:	2000      	movs	r0, #0
 8000396:	e7d5      	b.n	8000344 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000398:	2301      	movs	r3, #1
 800039a:	e7f3      	b.n	8000384 <HAL_DMA_Abort_IT+0x50>
 800039c:	2310      	movs	r3, #16
 800039e:	e7f1      	b.n	8000384 <HAL_DMA_Abort_IT+0x50>
 80003a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003a4:	e7ee      	b.n	8000384 <HAL_DMA_Abort_IT+0x50>
 80003a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003aa:	e7eb      	b.n	8000384 <HAL_DMA_Abort_IT+0x50>
 80003ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b0:	e7e8      	b.n	8000384 <HAL_DMA_Abort_IT+0x50>
 80003b2:	4618      	mov	r0, r3
 80003b4:	e7c6      	b.n	8000344 <HAL_DMA_Abort_IT+0x10>
 80003b6:	bf00      	nop
 80003b8:	40020008 	.word	0x40020008
 80003bc:	40020000 	.word	0x40020000

080003c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80003c0:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80003c2:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80003c4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80003c6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80003c8:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80003ca:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80003cc:	4095      	lsls	r5, r2
 80003ce:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80003d0:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80003d2:	d032      	beq.n	800043a <HAL_DMA_IRQHandler+0x7a>
 80003d4:	074d      	lsls	r5, r1, #29
 80003d6:	d530      	bpl.n	800043a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80003dc:	bf5e      	ittt	pl
 80003de:	681a      	ldrpl	r2, [r3, #0]
 80003e0:	f022 0204 	bicpl.w	r2, r2, #4
 80003e4:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80003e6:	4a3d      	ldr	r2, [pc, #244]	; (80004dc <HAL_DMA_IRQHandler+0x11c>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d019      	beq.n	8000420 <HAL_DMA_IRQHandler+0x60>
 80003ec:	3214      	adds	r2, #20
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d018      	beq.n	8000424 <HAL_DMA_IRQHandler+0x64>
 80003f2:	3214      	adds	r2, #20
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d017      	beq.n	8000428 <HAL_DMA_IRQHandler+0x68>
 80003f8:	3214      	adds	r2, #20
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d017      	beq.n	800042e <HAL_DMA_IRQHandler+0x6e>
 80003fe:	3214      	adds	r2, #20
 8000400:	4293      	cmp	r3, r2
 8000402:	d017      	beq.n	8000434 <HAL_DMA_IRQHandler+0x74>
 8000404:	3214      	adds	r2, #20
 8000406:	4293      	cmp	r3, r2
 8000408:	bf0c      	ite	eq
 800040a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800040e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000412:	4a33      	ldr	r2, [pc, #204]	; (80004e0 <HAL_DMA_IRQHandler+0x120>)
 8000414:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000416:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8000418:	2b00      	cmp	r3, #0
 800041a:	d05c      	beq.n	80004d6 <HAL_DMA_IRQHandler+0x116>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 800041c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800041e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000420:	2304      	movs	r3, #4
 8000422:	e7f6      	b.n	8000412 <HAL_DMA_IRQHandler+0x52>
 8000424:	2340      	movs	r3, #64	; 0x40
 8000426:	e7f4      	b.n	8000412 <HAL_DMA_IRQHandler+0x52>
 8000428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800042c:	e7f1      	b.n	8000412 <HAL_DMA_IRQHandler+0x52>
 800042e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000432:	e7ee      	b.n	8000412 <HAL_DMA_IRQHandler+0x52>
 8000434:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000438:	e7eb      	b.n	8000412 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800043a:	2502      	movs	r5, #2
 800043c:	4095      	lsls	r5, r2
 800043e:	4225      	tst	r5, r4
 8000440:	d035      	beq.n	80004ae <HAL_DMA_IRQHandler+0xee>
 8000442:	078d      	lsls	r5, r1, #30
 8000444:	d533      	bpl.n	80004ae <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	0694      	lsls	r4, r2, #26
 800044a:	d406      	bmi.n	800045a <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	f022 020a 	bic.w	r2, r2, #10
 8000452:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000454:	2201      	movs	r2, #1
 8000456:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800045a:	4a20      	ldr	r2, [pc, #128]	; (80004dc <HAL_DMA_IRQHandler+0x11c>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d019      	beq.n	8000494 <HAL_DMA_IRQHandler+0xd4>
 8000460:	3214      	adds	r2, #20
 8000462:	4293      	cmp	r3, r2
 8000464:	d018      	beq.n	8000498 <HAL_DMA_IRQHandler+0xd8>
 8000466:	3214      	adds	r2, #20
 8000468:	4293      	cmp	r3, r2
 800046a:	d017      	beq.n	800049c <HAL_DMA_IRQHandler+0xdc>
 800046c:	3214      	adds	r2, #20
 800046e:	4293      	cmp	r3, r2
 8000470:	d017      	beq.n	80004a2 <HAL_DMA_IRQHandler+0xe2>
 8000472:	3214      	adds	r2, #20
 8000474:	4293      	cmp	r3, r2
 8000476:	d017      	beq.n	80004a8 <HAL_DMA_IRQHandler+0xe8>
 8000478:	3214      	adds	r2, #20
 800047a:	4293      	cmp	r3, r2
 800047c:	bf0c      	ite	eq
 800047e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000482:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000486:	4a16      	ldr	r2, [pc, #88]	; (80004e0 <HAL_DMA_IRQHandler+0x120>)
 8000488:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800048a:	2300      	movs	r3, #0
 800048c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000490:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000492:	e7c1      	b.n	8000418 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000494:	2302      	movs	r3, #2
 8000496:	e7f6      	b.n	8000486 <HAL_DMA_IRQHandler+0xc6>
 8000498:	2320      	movs	r3, #32
 800049a:	e7f4      	b.n	8000486 <HAL_DMA_IRQHandler+0xc6>
 800049c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004a0:	e7f1      	b.n	8000486 <HAL_DMA_IRQHandler+0xc6>
 80004a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004a6:	e7ee      	b.n	8000486 <HAL_DMA_IRQHandler+0xc6>
 80004a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004ac:	e7eb      	b.n	8000486 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80004ae:	2508      	movs	r5, #8
 80004b0:	4095      	lsls	r5, r2
 80004b2:	4225      	tst	r5, r4
 80004b4:	d00f      	beq.n	80004d6 <HAL_DMA_IRQHandler+0x116>
 80004b6:	0709      	lsls	r1, r1, #28
 80004b8:	d50d      	bpl.n	80004d6 <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80004ba:	6819      	ldr	r1, [r3, #0]
 80004bc:	f021 010e 	bic.w	r1, r1, #14
 80004c0:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80004c2:	2301      	movs	r3, #1
 80004c4:	fa03 f202 	lsl.w	r2, r3, r2
 80004c8:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80004ca:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80004cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004d0:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80004d2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80004d4:	e7a0      	b.n	8000418 <HAL_DMA_IRQHandler+0x58>
}
 80004d6:	bc70      	pop	{r4, r5, r6}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40020008 	.word	0x40020008
 80004e0:	40020000 	.word	0x40020000

080004e4 <HAL_GPIO_Init>:
{
 80004e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 80004e8:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80004ea:	4616      	mov	r6, r2
        __HAL_RCC_AFIO_CLK_ENABLE();
 80004ec:	4f64      	ldr	r7, [pc, #400]	; (8000680 <HAL_GPIO_Init+0x19c>)
 80004ee:	4b65      	ldr	r3, [pc, #404]	; (8000684 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 80004f0:	f8df c194 	ldr.w	ip, [pc, #404]	; 8000688 <HAL_GPIO_Init+0x1a4>
 80004f4:	f8df e194 	ldr.w	lr, [pc, #404]	; 800068c <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004f8:	680d      	ldr	r5, [r1, #0]
 80004fa:	fa35 f406 	lsrs.w	r4, r5, r6
 80004fe:	d102      	bne.n	8000506 <HAL_GPIO_Init+0x22>
}
 8000500:	b003      	add	sp, #12
 8000502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000506:	f04f 0801 	mov.w	r8, #1
 800050a:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800050e:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8000512:	ea38 0505 	bics.w	r5, r8, r5
 8000516:	d17b      	bne.n	8000610 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8000518:	684d      	ldr	r5, [r1, #4]
 800051a:	2d03      	cmp	r5, #3
 800051c:	d807      	bhi.n	800052e <HAL_GPIO_Init+0x4a>
 800051e:	3d01      	subs	r5, #1
 8000520:	2d02      	cmp	r5, #2
 8000522:	f200 8088 	bhi.w	8000636 <HAL_GPIO_Init+0x152>
 8000526:	e8df f005 	tbb	[pc, r5]
 800052a:	9b96      	.short	0x9b96
 800052c:	a1          	.byte	0xa1
 800052d:	00          	.byte	0x00
 800052e:	2d12      	cmp	r5, #18
 8000530:	f000 8099 	beq.w	8000666 <HAL_GPIO_Init+0x182>
 8000534:	d86e      	bhi.n	8000614 <HAL_GPIO_Init+0x130>
 8000536:	2d11      	cmp	r5, #17
 8000538:	f000 808f 	beq.w	800065a <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800053c:	2cff      	cmp	r4, #255	; 0xff
 800053e:	bf98      	it	ls
 8000540:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000542:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000546:	bf88      	it	hi
 8000548:	f100 0a04 	addhi.w	sl, r0, #4
 800054c:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000550:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000554:	bf88      	it	hi
 8000556:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000558:	fa09 fb05 	lsl.w	fp, r9, r5
 800055c:	ea28 080b 	bic.w	r8, r8, fp
 8000560:	fa02 f505 	lsl.w	r5, r2, r5
 8000564:	ea48 0505 	orr.w	r5, r8, r5
 8000568:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800056c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000570:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000574:	d04c      	beq.n	8000610 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000576:	69bd      	ldr	r5, [r7, #24]
 8000578:	f026 0803 	bic.w	r8, r6, #3
 800057c:	f045 0501 	orr.w	r5, r5, #1
 8000580:	61bd      	str	r5, [r7, #24]
 8000582:	69bd      	ldr	r5, [r7, #24]
 8000584:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000588:	f005 0501 	and.w	r5, r5, #1
 800058c:	9501      	str	r5, [sp, #4]
 800058e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000592:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000596:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000598:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800059c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005a0:	fa09 f90b 	lsl.w	r9, r9, fp
 80005a4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005a8:	4d39      	ldr	r5, [pc, #228]	; (8000690 <HAL_GPIO_Init+0x1ac>)
 80005aa:	42a8      	cmp	r0, r5
 80005ac:	d062      	beq.n	8000674 <HAL_GPIO_Init+0x190>
 80005ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005b2:	42a8      	cmp	r0, r5
 80005b4:	d060      	beq.n	8000678 <HAL_GPIO_Init+0x194>
 80005b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005ba:	42a8      	cmp	r0, r5
 80005bc:	d05e      	beq.n	800067c <HAL_GPIO_Init+0x198>
 80005be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005c2:	42a8      	cmp	r0, r5
 80005c4:	bf0c      	ite	eq
 80005c6:	2503      	moveq	r5, #3
 80005c8:	2504      	movne	r5, #4
 80005ca:	fa05 f50b 	lsl.w	r5, r5, fp
 80005ce:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80005d2:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80005d6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005d8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80005dc:	bf14      	ite	ne
 80005de:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005e0:	43a5      	biceq	r5, r4
 80005e2:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80005e4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005e6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80005ea:	bf14      	ite	ne
 80005ec:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80005ee:	43a5      	biceq	r5, r4
 80005f0:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80005f2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005f4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80005f8:	bf14      	ite	ne
 80005fa:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80005fc:	43a5      	biceq	r5, r4
 80005fe:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000600:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000602:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000606:	bf14      	ite	ne
 8000608:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800060a:	ea25 0404 	biceq.w	r4, r5, r4
 800060e:	60dc      	str	r4, [r3, #12]
	position++;
 8000610:	3601      	adds	r6, #1
 8000612:	e771      	b.n	80004f8 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8000614:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8000694 <HAL_GPIO_Init+0x1b0>
 8000618:	454d      	cmp	r5, r9
 800061a:	d00c      	beq.n	8000636 <HAL_GPIO_Init+0x152>
 800061c:	d817      	bhi.n	800064e <HAL_GPIO_Init+0x16a>
 800061e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000622:	454d      	cmp	r5, r9
 8000624:	d007      	beq.n	8000636 <HAL_GPIO_Init+0x152>
 8000626:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800062a:	454d      	cmp	r5, r9
 800062c:	d003      	beq.n	8000636 <HAL_GPIO_Init+0x152>
 800062e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000632:	454d      	cmp	r5, r9
 8000634:	d182      	bne.n	800053c <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000636:	688a      	ldr	r2, [r1, #8]
 8000638:	b1d2      	cbz	r2, 8000670 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800063a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800063c:	bf08      	it	eq
 800063e:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000642:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8000646:	bf18      	it	ne
 8000648:	f8c0 8014 	strne.w	r8, [r0, #20]
 800064c:	e776      	b.n	800053c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800064e:	4565      	cmp	r5, ip
 8000650:	d0f1      	beq.n	8000636 <HAL_GPIO_Init+0x152>
 8000652:	4575      	cmp	r5, lr
 8000654:	e7ee      	b.n	8000634 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000656:	68ca      	ldr	r2, [r1, #12]
          break;
 8000658:	e770      	b.n	800053c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800065a:	68ca      	ldr	r2, [r1, #12]
 800065c:	3204      	adds	r2, #4
          break;
 800065e:	e76d      	b.n	800053c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000660:	68ca      	ldr	r2, [r1, #12]
 8000662:	3208      	adds	r2, #8
          break;
 8000664:	e76a      	b.n	800053c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000666:	68ca      	ldr	r2, [r1, #12]
 8000668:	320c      	adds	r2, #12
          break;
 800066a:	e767      	b.n	800053c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800066c:	2200      	movs	r2, #0
 800066e:	e765      	b.n	800053c <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000670:	2204      	movs	r2, #4
 8000672:	e763      	b.n	800053c <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000674:	2500      	movs	r5, #0
 8000676:	e7a8      	b.n	80005ca <HAL_GPIO_Init+0xe6>
 8000678:	2501      	movs	r5, #1
 800067a:	e7a6      	b.n	80005ca <HAL_GPIO_Init+0xe6>
 800067c:	2502      	movs	r5, #2
 800067e:	e7a4      	b.n	80005ca <HAL_GPIO_Init+0xe6>
 8000680:	40021000 	.word	0x40021000
 8000684:	40010400 	.word	0x40010400
 8000688:	10310000 	.word	0x10310000
 800068c:	10320000 	.word	0x10320000
 8000690:	40010800 	.word	0x40010800
 8000694:	10220000 	.word	0x10220000

08000698 <I2C_DMAAbort>:
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
  __IO uint32_t count = 0U;
 8000698:	2300      	movs	r3, #0
{
 800069a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0U;
 800069c:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800069e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80006a0:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80006a4:	4a29      	ldr	r2, [pc, #164]	; (800074c <I2C_DMAAbort+0xb4>)
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80006a6:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80006aa:	6812      	ldr	r2, [r2, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80006ac:	b2c9      	uxtb	r1, r1
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80006ae:	fbb2 f2f0 	udiv	r2, r2, r0
 80006b2:	2023      	movs	r0, #35	; 0x23
 80006b4:	4342      	muls	r2, r0
 80006b6:	9201      	str	r2, [sp, #4]
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
      break;
    }
    count--;
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80006b8:	681a      	ldr	r2, [r3, #0]
    if (count == 0U)
 80006ba:	9801      	ldr	r0, [sp, #4]
 80006bc:	bb30      	cbnz	r0, 800070c <I2C_DMAAbort+0x74>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80006be:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80006c0:	f040 0020 	orr.w	r0, r0, #32
 80006c4:	6418      	str	r0, [r3, #64]	; 0x40

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80006c6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80006c8:	b10c      	cbz	r4, 80006ce <I2C_DMAAbort+0x36>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80006ca:	2000      	movs	r0, #0
 80006cc:	62a0      	str	r0, [r4, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80006ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80006d0:	b108      	cbz	r0, 80006d6 <I2C_DMAAbort+0x3e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80006d2:	2500      	movs	r5, #0
 80006d4:	6285      	str	r5, [r0, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80006d6:	6815      	ldr	r5, [r2, #0]
 80006d8:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 80006dc:	6015      	str	r5, [r2, #0]

  hi2c->XferCount = 0U;
 80006de:	2500      	movs	r5, #0
 80006e0:	855d      	strh	r5, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80006e2:	b104      	cbz	r4, 80006e6 <I2C_DMAAbort+0x4e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80006e4:	6365      	str	r5, [r4, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80006e6:	b100      	cbz	r0, 80006ea <I2C_DMAAbort+0x52>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80006e8:	6345      	str	r5, [r0, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80006ea:	6810      	ldr	r0, [r2, #0]
 80006ec:	f020 0001 	bic.w	r0, r0, #1
 80006f0:	6010      	str	r0, [r2, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80006f2:	f893 003d 	ldrb.w	r0, [r3, #61]	; 0x3d
 80006f6:	2860      	cmp	r0, #96	; 0x60
 80006f8:	d10f      	bne.n	800071a <I2C_DMAAbort+0x82>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80006fa:	2220      	movs	r2, #32
 80006fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000700:	2200      	movs	r2, #0
 8000702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8000706:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8000708:	b003      	add	sp, #12
 800070a:	bd30      	pop	{r4, r5, pc}
    count--;
 800070c:	9801      	ldr	r0, [sp, #4]
 800070e:	3801      	subs	r0, #1
 8000710:	9001      	str	r0, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8000712:	6810      	ldr	r0, [r2, #0]
 8000714:	0580      	lsls	r0, r0, #22
 8000716:	d4d0      	bmi.n	80006ba <I2C_DMAAbort+0x22>
 8000718:	e7d5      	b.n	80006c6 <I2C_DMAAbort+0x2e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800071a:	f001 0128 	and.w	r1, r1, #40	; 0x28
 800071e:	2928      	cmp	r1, #40	; 0x28
 8000720:	d10c      	bne.n	800073c <I2C_DMAAbort+0xa4>
      __HAL_I2C_ENABLE(hi2c);
 8000722:	6810      	ldr	r0, [r2, #0]
 8000724:	f040 0001 	orr.w	r0, r0, #1
 8000728:	6010      	str	r0, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800072a:	6810      	ldr	r0, [r2, #0]
 800072c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8000730:	6010      	str	r0, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8000732:	2200      	movs	r2, #0
 8000734:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8000736:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
 800073a:	e7e5      	b.n	8000708 <I2C_DMAAbort+0x70>
      hi2c->State = HAL_I2C_STATE_READY;
 800073c:	2220      	movs	r2, #32
 800073e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000742:	2200      	movs	r2, #0
 8000744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 8000748:	e7de      	b.n	8000708 <I2C_DMAAbort+0x70>
 800074a:	bf00      	nop
 800074c:	20000000 	.word	0x20000000

08000750 <UART_DMATransmitCplt>:
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000750:	6803      	ldr	r3, [r0, #0]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f013 0320 	ands.w	r3, r3, #32
 8000758:	d10a      	bne.n	8000770 <UART_DMATransmitCplt+0x20>
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800075a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  {
    huart->TxXferCount = 0x00U;
 800075c:	84d3      	strh	r3, [r2, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800075e:	6813      	ldr	r3, [r2, #0]
 8000760:	695a      	ldr	r2, [r3, #20]
 8000762:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000766:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8000768:	68da      	ldr	r2, [r3, #12]
 800076a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800076e:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8000770:	4770      	bx	lr

08000772 <UART_DMATxHalfCplt>:
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8000772:	4770      	bx	lr

08000774 <UART_DMARxHalfCplt>:
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000774:	6a43      	ldr	r3, [r0, #36]	; 0x24

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8000778:	4770      	bx	lr

0800077a <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800077a:	6a43      	ldr	r3, [r0, #36]	; 0x24

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	6951      	ldr	r1, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8000780:	f893 003d 	ldrb.w	r0, [r3, #61]	; 0x3d
 8000784:	2821      	cmp	r0, #33	; 0x21
 8000786:	d10a      	bne.n	800079e <UART_DMAError+0x24>
 8000788:	0608      	lsls	r0, r1, #24
 800078a:	d508      	bpl.n	800079e <UART_DMAError+0x24>
  {
    huart->TxXferCount = 0x00U;
 800078c:	2100      	movs	r1, #0
 800078e:	84d9      	strh	r1, [r3, #38]	; 0x26
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8000790:	68d1      	ldr	r1, [r2, #12]
 8000792:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000796:	60d1      	str	r1, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8000798:	2120      	movs	r1, #32
 800079a:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800079e:	6951      	ldr	r1, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80007a0:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 80007a4:	2822      	cmp	r0, #34	; 0x22
 80007a6:	d117      	bne.n	80007d8 <UART_DMAError+0x5e>
 80007a8:	0649      	lsls	r1, r1, #25
 80007aa:	d515      	bpl.n	80007d8 <UART_DMAError+0x5e>
    huart->RxXferCount = 0x00U;
 80007ac:	2100      	movs	r1, #0
 80007ae:	85d9      	strh	r1, [r3, #46]	; 0x2e
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80007b0:	68d1      	ldr	r1, [r2, #12]
 80007b2:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80007b6:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80007b8:	6951      	ldr	r1, [r2, #20]
 80007ba:	f021 0101 	bic.w	r1, r1, #1
 80007be:	6151      	str	r1, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80007c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007c2:	2901      	cmp	r1, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80007c4:	bf02      	ittt	eq
 80007c6:	68d1      	ldreq	r1, [r2, #12]
 80007c8:	f021 0110 	biceq.w	r1, r1, #16
 80007cc:	60d1      	streq	r1, [r2, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80007ce:	2220      	movs	r2, #32
 80007d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80007d4:	2200      	movs	r2, #0
 80007d6:	631a      	str	r2, [r3, #48]	; 0x30
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80007d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007da:	f042 0210 	orr.w	r2, r2, #16
 80007de:	641a      	str	r2, [r3, #64]	; 0x40
}
 80007e0:	4770      	bx	lr

080007e2 <I2C_MemoryTransmit_TXE_BTF.constprop.0>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80007e2:	4b27      	ldr	r3, [pc, #156]	; (8000880 <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x9e>)
 80007e4:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
  if (hi2c->EventCount == 0U)
 80007e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80007ea:	b2c9      	uxtb	r1, r1
  if (hi2c->EventCount == 0U)
 80007ec:	b982      	cbnz	r2, 8000810 <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x2e>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80007ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80007f0:	6859      	ldr	r1, [r3, #4]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80007f2:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80007f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80007f6:	d105      	bne.n	8000804 <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x22>
 80007f8:	b2d2      	uxtb	r2, r2
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80007fa:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 80007fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80007fe:	3202      	adds	r2, #2
      hi2c->EventCount++;
 8000800:	655a      	str	r2, [r3, #84]	; 0x54
 8000802:	4770      	bx	lr
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8000804:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000808:	610a      	str	r2, [r1, #16]
      hi2c->EventCount++;
 800080a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800080c:	3201      	adds	r2, #1
 800080e:	e7f7      	b.n	8000800 <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x1e>
  else if (hi2c->EventCount == 1U)
 8000810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000812:	2a01      	cmp	r2, #1
 8000814:	d103      	bne.n	800081e <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8000816:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000818:	6859      	ldr	r1, [r3, #4]
 800081a:	b2d2      	uxtb	r2, r2
 800081c:	e7f4      	b.n	8000808 <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x26>
  else if (hi2c->EventCount == 2U)
 800081e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000820:	2a02      	cmp	r2, #2
 8000822:	d12b      	bne.n	800087c <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x9a>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8000824:	2922      	cmp	r1, #34	; 0x22
 8000826:	d105      	bne.n	8000834 <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8000828:	6859      	ldr	r1, [r3, #4]
 800082a:	680a      	ldr	r2, [r1, #0]
 800082c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000830:	600a      	str	r2, [r1, #0]
 8000832:	e7ea      	b.n	800080a <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x28>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8000834:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8000836:	b292      	uxth	r2, r2
 8000838:	b162      	cbz	r2, 8000854 <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x72>
 800083a:	2921      	cmp	r1, #33	; 0x21
 800083c:	d10a      	bne.n	8000854 <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x72>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800083e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000840:	6859      	ldr	r1, [r3, #4]
 8000842:	f812 0b01 	ldrb.w	r0, [r2], #1
 8000846:	6108      	str	r0, [r1, #16]
      hi2c->pBuffPtr++;
 8000848:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800084a:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800084c:	3a01      	subs	r2, #1
 800084e:	b292      	uxth	r2, r2
 8000850:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000852:	4770      	bx	lr
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8000854:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8000856:	b292      	uxth	r2, r2
 8000858:	b982      	cbnz	r2, 800087c <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x9a>
 800085a:	2921      	cmp	r1, #33	; 0x21
 800085c:	d10e      	bne.n	800087c <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x9a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800085e:	6859      	ldr	r1, [r3, #4]
 8000860:	6848      	ldr	r0, [r1, #4]
 8000862:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000866:	6048      	str	r0, [r1, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000868:	6808      	ldr	r0, [r1, #0]
 800086a:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 800086e:	6008      	str	r0, [r1, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8000870:	2120      	movs	r1, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8000872:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->State = HAL_I2C_STATE_READY;
 8000874:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000208 	.word	0x20000208

08000884 <I2C_ITError.constprop.0>:
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
 8000884:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000886:	4c4e      	ldr	r4, [pc, #312]	; (80009c0 <I2C_ITError.constprop.0+0x13c>)
 8000888:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800088c:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000890:	b2db      	uxtb	r3, r3
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8000892:	2a10      	cmp	r2, #16
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8000894:	b2d1      	uxtb	r1, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8000896:	d001      	beq.n	800089c <I2C_ITError.constprop.0+0x18>
 8000898:	2940      	cmp	r1, #64	; 0x40
 800089a:	d115      	bne.n	80008c8 <I2C_ITError.constprop.0+0x44>
 800089c:	2b22      	cmp	r3, #34	; 0x22
 800089e:	d113      	bne.n	80008c8 <I2C_ITError.constprop.0+0x44>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80008a0:	6861      	ldr	r1, [r4, #4]
 80008a2:	680a      	ldr	r2, [r1, #0]
 80008a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80008a8:	600a      	str	r2, [r1, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80008aa:	6862      	ldr	r2, [r4, #4]
 80008ac:	6852      	ldr	r2, [r2, #4]
 80008ae:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80008b2:	d106      	bne.n	80008c2 <I2C_ITError.constprop.0+0x3e>
 80008b4:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 80008b6:	bf1e      	ittt	ne
 80008b8:	2320      	movne	r3, #32
 80008ba:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80008be:	f884 2042 	strbne.w	r2, [r4, #66]	; 0x42
    hi2c->PreviousState = I2C_STATE_NONE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	6363      	str	r3, [r4, #52]	; 0x34
 80008c6:	e007      	b.n	80008d8 <I2C_ITError.constprop.0+0x54>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80008c8:	f003 0228 	and.w	r2, r3, #40	; 0x28
 80008cc:	2a28      	cmp	r2, #40	; 0x28
 80008ce:	d1ec      	bne.n	80008aa <I2C_ITError.constprop.0+0x26>
    hi2c->PreviousState = I2C_STATE_NONE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80008d4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80008d8:	6863      	ldr	r3, [r4, #4]
 80008da:	685a      	ldr	r2, [r3, #4]
 80008dc:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80008e0:	d04c      	beq.n	800097c <I2C_ITError.constprop.0+0xf8>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80008e2:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80008e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80008e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80008ea:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80008ec:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	4b34      	ldr	r3, [pc, #208]	; (80009c4 <I2C_ITError.constprop.0+0x140>)
 80008f4:	d028      	beq.n	8000948 <I2C_ITError.constprop.0+0xc4>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80008f6:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80008f8:	f7ff fd1c 	bl	8000334 <HAL_DMA_Abort_IT>
 80008fc:	b150      	cbz	r0, 8000914 <I2C_ITError.constprop.0+0x90>
        __HAL_I2C_DISABLE(hi2c);
 80008fe:	6862      	ldr	r2, [r4, #4]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8000900:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8000902:	6813      	ldr	r3, [r2, #0]
 8000904:	f023 0301 	bic.w	r3, r3, #1
 8000908:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800090a:	2320      	movs	r3, #32
 800090c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000910:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000912:	4798      	blx	r3
  CurrentError = hi2c->ErrorCode;
 8000914:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8000916:	0719      	lsls	r1, r3, #28
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8000918:	bf1f      	itttt	ne
 800091a:	6862      	ldrne	r2, [r4, #4]
 800091c:	6853      	ldrne	r3, [r2, #4]
 800091e:	f423 63e0 	bicne.w	r3, r3, #1792	; 0x700
 8000922:	6053      	strne	r3, [r2, #4]
  CurrentState = hi2c->State;
 8000924:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8000928:	6c62      	ldr	r2, [r4, #68]	; 0x44
  CurrentState = hi2c->State;
 800092a:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800092c:	0752      	lsls	r2, r2, #29
 800092e:	d50a      	bpl.n	8000946 <I2C_ITError.constprop.0+0xc2>
 8000930:	2b28      	cmp	r3, #40	; 0x28
 8000932:	d108      	bne.n	8000946 <I2C_ITError.constprop.0+0xc2>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000934:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <I2C_ITError.constprop.0+0x144>)
    hi2c->State         = HAL_I2C_STATE_READY;
 8000936:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000938:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->PreviousState = I2C_STATE_NONE;
 800093a:	2300      	movs	r3, #0
 800093c:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->State         = HAL_I2C_STATE_READY;
 800093e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000942:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8000946:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8000948:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800094a:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800094c:	f7ff fcf2 	bl	8000334 <HAL_DMA_Abort_IT>
 8000950:	2800      	cmp	r0, #0
 8000952:	d0df      	beq.n	8000914 <I2C_ITError.constprop.0+0x90>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8000954:	6863      	ldr	r3, [r4, #4]
 8000956:	695a      	ldr	r2, [r3, #20]
 8000958:	0651      	lsls	r1, r2, #25
 800095a:	d505      	bpl.n	8000968 <I2C_ITError.constprop.0+0xe4>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800095c:	691a      	ldr	r2, [r3, #16]
 800095e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000960:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8000962:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000964:	3301      	adds	r3, #1
 8000966:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_I2C_DISABLE(hi2c);
 8000968:	6862      	ldr	r2, [r4, #4]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800096a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        __HAL_I2C_DISABLE(hi2c);
 800096c:	6813      	ldr	r3, [r2, #0]
 800096e:	f023 0301 	bic.w	r3, r3, #1
 8000972:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8000974:	2320      	movs	r3, #32
 8000976:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800097a:	e7c9      	b.n	8000910 <I2C_ITError.constprop.0+0x8c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800097c:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8000980:	2960      	cmp	r1, #96	; 0x60
 8000982:	d112      	bne.n	80009aa <I2C_ITError.constprop.0+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 8000984:	2120      	movs	r1, #32
 8000986:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800098a:	6462      	str	r2, [r4, #68]	; 0x44
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800098c:	695a      	ldr	r2, [r3, #20]
 800098e:	0652      	lsls	r2, r2, #25
 8000990:	d505      	bpl.n	800099e <I2C_ITError.constprop.0+0x11a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000992:	691a      	ldr	r2, [r3, #16]
 8000994:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000996:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8000998:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800099a:	3301      	adds	r3, #1
 800099c:	62a3      	str	r3, [r4, #40]	; 0x28
    __HAL_I2C_DISABLE(hi2c);
 800099e:	6862      	ldr	r2, [r4, #4]
 80009a0:	6813      	ldr	r3, [r2, #0]
 80009a2:	f023 0301 	bic.w	r3, r3, #1
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	e7b4      	b.n	8000914 <I2C_ITError.constprop.0+0x90>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80009aa:	695a      	ldr	r2, [r3, #20]
 80009ac:	0650      	lsls	r0, r2, #25
 80009ae:	d5b1      	bpl.n	8000914 <I2C_ITError.constprop.0+0x90>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80009b0:	691a      	ldr	r2, [r3, #16]
 80009b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009b4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80009b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009b8:	3301      	adds	r3, #1
 80009ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80009bc:	e7aa      	b.n	8000914 <I2C_ITError.constprop.0+0x90>
 80009be:	bf00      	nop
 80009c0:	20000208 	.word	0x20000208
 80009c4:	08000699 	.word	0x08000699
 80009c8:	ffff0000 	.word	0xffff0000

080009cc <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80009cc:	b510      	push	{r4, lr}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <UART_WaitOnFlagUntilTimeout.constprop.0+0x40>)
 80009d0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80009d2:	681c      	ldr	r4, [r3, #0]
 80009d4:	ea30 0404 	bics.w	r4, r0, r4
 80009d8:	d101      	bne.n	80009de <UART_WaitOnFlagUntilTimeout.constprop.0+0x12>
  return HAL_OK;
 80009da:	2000      	movs	r0, #0
 80009dc:	e014      	b.n	8000a08 <UART_WaitOnFlagUntilTimeout.constprop.0+0x3c>
  return uwTick;
 80009de:	6814      	ldr	r4, [r2, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80009e0:	1a64      	subs	r4, r4, r1
 80009e2:	2c64      	cmp	r4, #100	; 0x64
 80009e4:	d9f5      	bls.n	80009d2 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80009e6:	68d9      	ldr	r1, [r3, #12]
        __HAL_UNLOCK(huart);
 80009e8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80009ea:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 80009ee:	60d9      	str	r1, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80009f0:	6959      	ldr	r1, [r3, #20]
 80009f2:	f021 0101 	bic.w	r1, r1, #1
 80009f6:	6159      	str	r1, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80009f8:	2320      	movs	r3, #32
 80009fa:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
        huart->RxState = HAL_UART_STATE_READY;
 80009fe:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
        __HAL_UNLOCK(huart);
 8000a02:	2300      	movs	r3, #0
 8000a04:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
}
 8000a08:	bd10      	pop	{r4, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000208 	.word	0x20000208

08000a10 <TIM_Base_SetConfig.constprop.0>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000a10:	4a1d      	ldr	r2, [pc, #116]	; (8000a88 <TIM_Base_SetConfig.constprop.0+0x78>)
  tmpcr1 = TIMx->CR1;
 8000a12:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000a14:	4290      	cmp	r0, r2
 8000a16:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <TIM_Base_SetConfig.constprop.0+0x7c>)
 8000a18:	d009      	beq.n	8000a2e <TIM_Base_SetConfig.constprop.0+0x1e>
 8000a1a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000a1e:	d006      	beq.n	8000a2e <TIM_Base_SetConfig.constprop.0+0x1e>
 8000a20:	491b      	ldr	r1, [pc, #108]	; (8000a90 <TIM_Base_SetConfig.constprop.0+0x80>)
 8000a22:	4288      	cmp	r0, r1
 8000a24:	d003      	beq.n	8000a2e <TIM_Base_SetConfig.constprop.0+0x1e>
 8000a26:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000a2a:	4288      	cmp	r0, r1
 8000a2c:	d117      	bne.n	8000a5e <TIM_Base_SetConfig.constprop.0+0x4e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000a2e:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000a36:	430b      	orrs	r3, r1
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000a38:	4913      	ldr	r1, [pc, #76]	; (8000a88 <TIM_Base_SetConfig.constprop.0+0x78>)
 8000a3a:	4288      	cmp	r0, r1
 8000a3c:	d00a      	beq.n	8000a54 <TIM_Base_SetConfig.constprop.0+0x44>
 8000a3e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000a42:	d007      	beq.n	8000a54 <TIM_Base_SetConfig.constprop.0+0x44>
 8000a44:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8000a48:	4288      	cmp	r0, r1
 8000a4a:	d003      	beq.n	8000a54 <TIM_Base_SetConfig.constprop.0+0x44>
 8000a4c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000a50:	4288      	cmp	r0, r1
 8000a52:	d104      	bne.n	8000a5e <TIM_Base_SetConfig.constprop.0+0x4e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000a54:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
    tmpcr1 &= ~TIM_CR1_CKD;
 8000a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000a5c:	430b      	orrs	r3, r1
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000a5e:	f8d2 10b4 	ldr.w	r1, [r2, #180]	; 0xb4
 8000a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a66:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 8000a68:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000a6a:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 8000a6e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000a70:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8000a74:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <TIM_Base_SetConfig.constprop.0+0x78>)
 8000a78:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000a7a:	bf04      	itt	eq
 8000a7c:	f8d2 30b0 	ldreq.w	r3, [r2, #176]	; 0xb0
 8000a80:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000a82:	2301      	movs	r3, #1
 8000a84:	6143      	str	r3, [r0, #20]
}
 8000a86:	4770      	bx	lr
 8000a88:	40012c00 	.word	0x40012c00
 8000a8c:	20000208 	.word	0x20000208
 8000a90:	40000400 	.word	0x40000400

08000a94 <HAL_NVIC_SetPriority.constprop.0>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_NVIC_SetPriority.constprop.0+0x4c>)
  * @param  SubPriority: the subpriority level for the IRQ channel.
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 8000a96:	b510      	push	{r4, lr}
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a9e:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa2:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa4:	2c04      	cmp	r4, #4
 8000aa6:	bf28      	it	cs
 8000aa8:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aaa:	2a06      	cmp	r2, #6
 8000aac:	bf88      	it	hi
 8000aae:	1eda      	subhi	r2, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab4:	bf98      	it	ls
 8000ab6:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	40a3      	lsls	r3, r4
 8000aba:	ea21 0303 	bic.w	r3, r1, r3
 8000abe:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8000ac0:	1c42      	adds	r2, r0, #1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac2:	bf14      	ite	ne
 8000ac4:	f100 4060 	addne.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac8:	4a05      	ldreq	r2, [pc, #20]	; (8000ae0 <HAL_NVIC_SetPriority.constprop.0+0x4c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aca:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	bf1a      	itte	ne
 8000ad2:	f500 4061 	addne.w	r0, r0, #57600	; 0xe100
 8000ad6:	f880 3300 	strbne.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	f882 3023 	strbeq.w	r3, [r2, #35]	; 0x23
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ade:	bd10      	pop	{r4, pc}
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <LCD_Circle.constprop.0>:
			s += rx2 * ((4 * y) + 6);
		}
	}
}

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 8000ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae8:	461e      	mov	r6, r3
 8000aea:	b089      	sub	sp, #36	; 0x24
{
	int a_, b_, P;
	a_ = 0;
	b_ = radius;
	P = 1 - radius;
 8000aec:	f1c1 0301 	rsb	r3, r1, #1
 8000af0:	9303      	str	r3, [sp, #12]
 8000af2:	2300      	movs	r3, #0
	b_ = radius;
 8000af4:	468b      	mov	fp, r1
void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 8000af6:	9004      	str	r0, [sp, #16]
 8000af8:	9207      	str	r2, [sp, #28]
	P = 1 - radius;
 8000afa:	9302      	str	r3, [sp, #8]
 8000afc:	9b04      	ldr	r3, [sp, #16]
 8000afe:	f8bd 5008 	ldrh.w	r5, [sp, #8]
	while (a_ <= b_)
	{
		if (fill == 1)
		{
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8000b02:	fa1f f48b 	uxth.w	r4, fp
 8000b06:	eba3 0805 	sub.w	r8, r3, r5
 8000b0a:	eba3 0a04 	sub.w	sl, r3, r4
		if (fill == 1)
 8000b0e:	9b07      	ldr	r3, [sp, #28]
 8000b10:	f1c5 09aa 	rsb	r9, r5, #170	; 0xaa
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8000b14:	f1c4 07aa 	rsb	r7, r4, #170	; 0xaa
		if (fill == 1)
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	fa1f f989 	uxth.w	r9, r9
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8000b1e:	b2bf      	uxth	r7, r7
 8000b20:	fa1f f888 	uxth.w	r8, r8
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8000b24:	fa1f fa8a 	uxth.w	sl, sl
		if (fill == 1)
 8000b28:	d123      	bne.n	8000b72 <LCD_Circle.constprop.0+0x8e>
 8000b2a:	006d      	lsls	r5, r5, #1
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8000b2c:	0064      	lsls	r4, r4, #1
 8000b2e:	3501      	adds	r5, #1
 8000b30:	3401      	adds	r4, #1
 8000b32:	b2ad      	uxth	r5, r5
 8000b34:	b2a4      	uxth	r4, r4
 8000b36:	4623      	mov	r3, r4
 8000b38:	462a      	mov	r2, r5
 8000b3a:	4651      	mov	r1, sl
 8000b3c:	4648      	mov	r0, r9
 8000b3e:	9600      	str	r6, [sp, #0]
 8000b40:	f7ff fb9a 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8000b44:	462b      	mov	r3, r5
 8000b46:	4622      	mov	r2, r4
 8000b48:	9600      	str	r6, [sp, #0]
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8000b4a:	4641      	mov	r1, r8
 8000b4c:	4638      	mov	r0, r7
 8000b4e:	f7ff fb93 	bl	8000278 <LCD_Rect_Fill>
		}
		if (P < 0)
 8000b52:	9b03      	ldr	r3, [sp, #12]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	da4e      	bge.n	8000bf6 <LCD_Circle.constprop.0+0x112>
		{
			P = (P + 3) + (2 * a_);
 8000b58:	9a02      	ldr	r2, [sp, #8]
 8000b5a:	3303      	adds	r3, #3
 8000b5c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8000b60:	9303      	str	r3, [sp, #12]
	while (a_ <= b_)
 8000b62:	9b02      	ldr	r3, [sp, #8]
 8000b64:	3301      	adds	r3, #1
 8000b66:	455b      	cmp	r3, fp
 8000b68:	9302      	str	r3, [sp, #8]
 8000b6a:	ddc7      	ble.n	8000afc <LCD_Circle.constprop.0+0x18>
			P = (P + 5) + (2 * (a_ - b_));
			a_++;
			b_--;
		}
	}
}
 8000b6c:	b009      	add	sp, #36	; 0x24
 8000b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b72:	f105 03aa 	add.w	r3, r5, #170	; 0xaa
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	9305      	str	r3, [sp, #20]
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8000b7a:	9b04      	ldr	r3, [sp, #16]
 8000b7c:	9600      	str	r6, [sp, #0]
 8000b7e:	4423      	add	r3, r4
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	9306      	str	r3, [sp, #24]
 8000b84:	2301      	movs	r3, #1
 8000b86:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	f7ff fb74 	bl	8000278 <LCD_Rect_Fill>
 8000b90:	9b04      	ldr	r3, [sp, #16]
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8000b92:	34aa      	adds	r4, #170	; 0xaa
 8000b94:	441d      	add	r5, r3
 8000b96:	2301      	movs	r3, #1
 8000b98:	b2a4      	uxth	r4, r4
 8000b9a:	b2ad      	uxth	r5, r5
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4629      	mov	r1, r5
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	9600      	str	r6, [sp, #0]
 8000ba4:	f7ff fb68 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8000ba8:	2301      	movs	r3, #1
 8000baa:	4648      	mov	r0, r9
 8000bac:	461a      	mov	r2, r3
 8000bae:	9906      	ldr	r1, [sp, #24]
 8000bb0:	9600      	str	r6, [sp, #0]
 8000bb2:	f7ff fb61 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	4629      	mov	r1, r5
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4638      	mov	r0, r7
 8000bbe:	9600      	str	r6, [sp, #0]
 8000bc0:	f7ff fb5a 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	4641      	mov	r1, r8
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4620      	mov	r0, r4
 8000bcc:	9600      	str	r6, [sp, #0]
 8000bce:	f7ff fb53 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	4651      	mov	r1, sl
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	9805      	ldr	r0, [sp, #20]
 8000bda:	9600      	str	r6, [sp, #0]
 8000bdc:	f7ff fb4c 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8000be0:	2301      	movs	r3, #1
 8000be2:	4651      	mov	r1, sl
 8000be4:	461a      	mov	r2, r3
 8000be6:	4648      	mov	r0, r9
 8000be8:	9600      	str	r6, [sp, #0]
 8000bea:	f7ff fb45 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8000bee:	2301      	movs	r3, #1
 8000bf0:	9600      	str	r6, [sp, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	e7a9      	b.n	8000b4a <LCD_Circle.constprop.0+0x66>
			P = (P + 5) + (2 * (a_ - b_));
 8000bf6:	9b03      	ldr	r3, [sp, #12]
 8000bf8:	9a02      	ldr	r2, [sp, #8]
 8000bfa:	3305      	adds	r3, #5
 8000bfc:	eba2 020b 	sub.w	r2, r2, fp
 8000c00:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8000c04:	9303      	str	r3, [sp, #12]
			b_--;
 8000c06:	f10b 3bff 	add.w	fp, fp, #4294967295
 8000c0a:	e7aa      	b.n	8000b62 <LCD_Circle.constprop.0+0x7e>

08000c0c <LCD_Line.constprop.0>:
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8000c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int deltaX = abs(x2 - x1);
 8000c10:	1a15      	subs	r5, r2, r0
	int deltaY = abs(y2 - y1);
 8000c12:	1a5e      	subs	r6, r3, r1
	int deltaX = abs(x2 - x1);
 8000c14:	2d00      	cmp	r5, #0
 8000c16:	bfb8      	it	lt
 8000c18:	426d      	neglt	r5, r5
	int deltaY = abs(y2 - y1);
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	bfb8      	it	lt
 8000c1e:	4276      	neglt	r6, r6
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8000c20:	4617      	mov	r7, r2
 8000c22:	4698      	mov	r8, r3
	int signX = x1 < x2 ? 1 : -1;
 8000c24:	4282      	cmp	r2, r0
 8000c26:	bf8c      	ite	hi
 8000c28:	f04f 0a01 	movhi.w	sl, #1
 8000c2c:	f04f 3aff 	movls.w	sl, #4294967295
	int signY = y1 < y2 ? 1 : -1;
 8000c30:	428b      	cmp	r3, r1
 8000c32:	bf8c      	ite	hi
 8000c34:	f04f 0901 	movhi.w	r9, #1
 8000c38:	f04f 39ff 	movls.w	r9, #4294967295
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8000c3c:	b085      	sub	sp, #20
	int error = deltaX - deltaY;
 8000c3e:	1bac      	subs	r4, r5, r6
		if (error2 > -deltaY)
 8000c40:	f1c6 0b00 	rsb	fp, r6, #0
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8000c44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000c46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	461a      	mov	r2, r3
 8000c50:	f7ff fb12 	bl	8000278 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8000c54:	9802      	ldr	r0, [sp, #8]
 8000c56:	9903      	ldr	r1, [sp, #12]
 8000c58:	4287      	cmp	r7, r0
 8000c5a:	d101      	bne.n	8000c60 <LCD_Line.constprop.0+0x54>
 8000c5c:	4588      	cmp	r8, r1
 8000c5e:	d00d      	beq.n	8000c7c <LCD_Line.constprop.0+0x70>
		if (error2 > -deltaY)
 8000c60:	ebbb 0f44 	cmp.w	fp, r4, lsl #1
		error2 = error * 2;
 8000c64:	ea4f 0344 	mov.w	r3, r4, lsl #1
			x1 += signX;
 8000c68:	bfbe      	ittt	lt
 8000c6a:	4450      	addlt	r0, sl
			error -= deltaY;
 8000c6c:	1ba4      	sublt	r4, r4, r6
			x1 += signX;
 8000c6e:	b280      	uxthlt	r0, r0
		if (error2 < deltaX)
 8000c70:	429d      	cmp	r5, r3
 8000c72:	dde7      	ble.n	8000c44 <LCD_Line.constprop.0+0x38>
			y1 += signY;
 8000c74:	4449      	add	r1, r9
			error += deltaX;
 8000c76:	442c      	add	r4, r5
			y1 += signY;
 8000c78:	b289      	uxth	r1, r1
 8000c7a:	e7e3      	b.n	8000c44 <LCD_Line.constprop.0+0x38>
}
 8000c7c:	b005      	add	sp, #20
 8000c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000c82 <LCD_Rect.constprop.0>:
void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
 8000c82:	b573      	push	{r0, r1, r4, r5, r6, lr}
	LCD_Line(x, y, x + w, y, size, color24);
 8000c84:	23bd      	movs	r3, #189	; 0xbd
 8000c86:	26ff      	movs	r6, #255	; 0xff
 8000c88:	f100 049d 	add.w	r4, r0, #157	; 0x9d
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	4622      	mov	r2, r4
 8000c90:	4619      	mov	r1, r3
 8000c92:	9600      	str	r6, [sp, #0]
void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
 8000c94:	4605      	mov	r5, r0
	LCD_Line(x, y, x + w, y, size, color24);
 8000c96:	f7ff ffb9 	bl	8000c0c <LCD_Line.constprop.0>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8000c9a:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8000c9e:	4622      	mov	r2, r4
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4628      	mov	r0, r5
 8000ca4:	9600      	str	r6, [sp, #0]
 8000ca6:	f7ff ffb1 	bl	8000c0c <LCD_Line.constprop.0>
	LCD_Line(x, y, x, y + h, size, color24);
 8000caa:	462a      	mov	r2, r5
 8000cac:	4628      	mov	r0, r5
 8000cae:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8000cb2:	21bd      	movs	r1, #189	; 0xbd
 8000cb4:	9600      	str	r6, [sp, #0]
 8000cb6:	f7ff ffa9 	bl	8000c0c <LCD_Line.constprop.0>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8000cba:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8000cbe:	4622      	mov	r2, r4
 8000cc0:	21bd      	movs	r1, #189	; 0xbd
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	9600      	str	r6, [sp, #0]
 8000cc6:	f7ff ffa1 	bl	8000c0c <LCD_Line.constprop.0>
}
 8000cca:	b002      	add	sp, #8
 8000ccc:	bd70      	pop	{r4, r5, r6, pc}

08000cce <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x5a>)
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8000cd0:	b510      	push	{r4, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000cd2:	685c      	ldr	r4, [r3, #4]
 8000cd4:	6962      	ldr	r2, [r4, #20]
 8000cd6:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8000cda:	d001      	beq.n	8000ce0 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x12>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000cdc:	2000      	movs	r0, #0
 8000cde:	e011      	b.n	8000d04 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x36>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000ce0:	6961      	ldr	r1, [r4, #20]
 8000ce2:	f011 0110 	ands.w	r1, r1, #16
 8000ce6:	d00e      	beq.n	8000d06 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ce8:	f06f 0110 	mvn.w	r1, #16
 8000cec:	6161      	str	r1, [r4, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000cee:	2120      	movs	r1, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000cf0:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8000cf2:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8000cfa:	6c59      	ldr	r1, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8000d00:	6459      	str	r1, [r3, #68]	; 0x44
      return HAL_ERROR;
 8000d02:	2001      	movs	r0, #1
}
 8000d04:	bd10      	pop	{r4, pc}
 8000d06:	681a      	ldr	r2, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d08:	1a12      	subs	r2, r2, r0
 8000d0a:	2a64      	cmp	r2, #100	; 0x64
 8000d0c:	d9e2      	bls.n	8000cd4 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x6>
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d0e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000d10:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000d16:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000d1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000d1c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000d20:	f042 0220 	orr.w	r2, r2, #32
 8000d24:	645a      	str	r2, [r3, #68]	; 0x44
 8000d26:	e7ec      	b.n	8000d02 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x34>
 8000d28:	20000208 	.word	0x20000208

08000d2c <I2C_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8000d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000d2e:	4d12      	ldr	r5, [pc, #72]	; (8000d78 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x4c>)
 8000d30:	0c07      	lsrs	r7, r0, #16
 8000d32:	686e      	ldr	r6, [r5, #4]
 8000d34:	2f01      	cmp	r7, #1
 8000d36:	bf0c      	ite	eq
 8000d38:	6974      	ldreq	r4, [r6, #20]
 8000d3a:	69b4      	ldrne	r4, [r6, #24]
 8000d3c:	ea20 0404 	bic.w	r4, r0, r4
 8000d40:	b2a4      	uxth	r4, r4
 8000d42:	fab4 f484 	clz	r4, r4
 8000d46:	0964      	lsrs	r4, r4, #5
 8000d48:	42a1      	cmp	r1, r4
 8000d4a:	d001      	beq.n	8000d50 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x24>
  return HAL_OK;
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	e011      	b.n	8000d74 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x48>
 8000d50:	682c      	ldr	r4, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	42a2      	cmp	r2, r4
 8000d56:	d2ed      	bcs.n	8000d34 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000d58:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8000d5a:	2220      	movs	r2, #32
        return HAL_ERROR;
 8000d5c:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000d5e:	636b      	str	r3, [r5, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8000d60:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000d64:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000d68:	6c6a      	ldr	r2, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000d6a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000d6e:	f042 0220 	orr.w	r2, r2, #32
 8000d72:	646a      	str	r2, [r5, #68]	; 0x44
}
 8000d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000208 	.word	0x20000208

08000d7c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8000d7c:	b530      	push	{r4, r5, lr}
 8000d7e:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x64>)
 8000d82:	685c      	ldr	r4, [r3, #4]
 8000d84:	6960      	ldr	r0, [r4, #20]
 8000d86:	ea25 0000 	bic.w	r0, r5, r0
 8000d8a:	b280      	uxth	r0, r0
 8000d8c:	b1c0      	cbz	r0, 8000dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x44>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d8e:	6962      	ldr	r2, [r4, #20]
 8000d90:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8000d94:	d015      	beq.n	8000dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x46>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d96:	6822      	ldr	r2, [r4, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d98:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d9e:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000da0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000da4:	6162      	str	r2, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000da6:	2200      	movs	r2, #0
 8000da8:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8000daa:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000db2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000db4:	f041 0104 	orr.w	r1, r1, #4
        return HAL_ERROR;
 8000db8:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000dba:	6459      	str	r1, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8000dc0:	bd30      	pop	{r4, r5, pc}
 8000dc2:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000dc4:	1a40      	subs	r0, r0, r1
 8000dc6:	2864      	cmp	r0, #100	; 0x64
 8000dc8:	d9dc      	bls.n	8000d84 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 8000dca:	2120      	movs	r1, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
        hi2c->State               = HAL_I2C_STATE_READY;
 8000dce:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000dd6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000dd8:	f041 0120 	orr.w	r1, r1, #32
 8000ddc:	e7ec      	b.n	8000db8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x3c>
 8000dde:	bf00      	nop
 8000de0:	20000208 	.word	0x20000208

08000de4 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x60>)
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8000de6:	b510      	push	{r4, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000de8:	685c      	ldr	r4, [r3, #4]
 8000dea:	6962      	ldr	r2, [r4, #20]
 8000dec:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8000df0:	d001      	beq.n	8000df6 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x12>
  return HAL_OK;
 8000df2:	2000      	movs	r0, #0
 8000df4:	e024      	b.n	8000e40 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x5c>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000df6:	6961      	ldr	r1, [r4, #20]
 8000df8:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8000dfc:	d110      	bne.n	8000e20 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x3c>
 8000dfe:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e00:	1a12      	subs	r2, r2, r0
 8000e02:	2a64      	cmp	r2, #100	; 0x64
 8000e04:	d9f1      	bls.n	8000dea <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x6>
        hi2c->State               = HAL_I2C_STATE_READY;
 8000e06:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000e08:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State               = HAL_I2C_STATE_READY;
 8000e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e0e:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000e14:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e18:	f042 0220 	orr.w	r2, r2, #32
 8000e1c:	645a      	str	r2, [r3, #68]	; 0x44
 8000e1e:	e00e      	b.n	8000e3e <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x5a>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e20:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8000e24:	6161      	str	r1, [r4, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8000e26:	2120      	movs	r1, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000e28:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 8000e2a:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000e32:	6c59      	ldr	r1, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000e38:	f041 0104 	orr.w	r1, r1, #4
 8000e3c:	6459      	str	r1, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000e3e:	2001      	movs	r0, #1
}
 8000e40:	bd10      	pop	{r4, pc}
 8000e42:	bf00      	nop
 8000e44:	20000208 	.word	0x20000208

08000e48 <AT24XX_Read>:
    } else
        return false;
}

uint8_t AT24XX_Read(uint16_t address) {
    uint16_t dt[1] = {0};
 8000e48:	2300      	movs	r3, #0
uint8_t AT24XX_Read(uint16_t address) {
 8000e4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4c:	4c8b      	ldr	r4, [pc, #556]	; (800107c <AT24XX_Read+0x234>)
 8000e4e:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8000e50:	9302      	str	r3, [sp, #8]
 8000e52:	6825      	ldr	r5, [r4, #0]
    uint16_t dt[1] = {0};
 8000e54:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e58:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
uint8_t AT24XX_Read(uint16_t address) {
 8000e5c:	4606      	mov	r6, r0
 8000e5e:	2b20      	cmp	r3, #32
 8000e60:	d159      	bne.n	8000f16 <AT24XX_Read+0xce>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000e62:	462b      	mov	r3, r5
 8000e64:	2219      	movs	r2, #25
 8000e66:	2101      	movs	r1, #1
 8000e68:	4885      	ldr	r0, [pc, #532]	; (8001080 <AT24XX_Read+0x238>)
 8000e6a:	f7ff ff5f 	bl	8000d2c <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	d151      	bne.n	8000f16 <AT24XX_Read+0xce>
    __HAL_LOCK(hi2c);
 8000e72:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d04d      	beq.n	8000f16 <AT24XX_Read+0xce>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e7a:	6863      	ldr	r3, [r4, #4]
    __HAL_LOCK(hi2c);
 8000e7c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e80:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000e82:	f04f 1001 	mov.w	r0, #65537	; 0x10001
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e86:	07d7      	lsls	r7, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000e88:	bf5e      	ittt	pl
 8000e8a:	681a      	ldrpl	r2, [r3, #0]
 8000e8c:	430a      	orrpl	r2, r1
 8000e8e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e90:	681a      	ldr	r2, [r3, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e92:	2100      	movs	r1, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e98:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000e9a:	2222      	movs	r2, #34	; 0x22
 8000e9c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000ea0:	2240      	movs	r2, #64	; 0x40
 8000ea2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->pBuffPtr    = pData;
 8000ea6:	aa01      	add	r2, sp, #4
 8000ea8:	62a2      	str	r2, [r4, #40]	; 0x28
    hi2c->XferCount   = Size;
 8000eaa:	2201      	movs	r2, #1
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eac:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8000eae:	85e2      	strh	r2, [r4, #46]	; 0x2e
    hi2c->XferSize    = hi2c->XferCount;
 8000eb0:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8000eb2:	85a2      	strh	r2, [r4, #44]	; 0x2c
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000eb4:	4a73      	ldr	r2, [pc, #460]	; (8001084 <AT24XX_Read+0x23c>)
 8000eb6:	6322      	str	r2, [r4, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ebe:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ec6:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000ec8:	462b      	mov	r3, r5
 8000eca:	2264      	movs	r2, #100	; 0x64
 8000ecc:	f7ff ff2e 	bl	8000d2c <I2C_WaitOnFlagUntilTimeout.constprop.0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000ed0:	6863      	ldr	r3, [r4, #4]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000ed2:	b130      	cbz	r0, 8000ee2 <AT24XX_Read+0x9a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	05dd      	lsls	r5, r3, #23
 8000ed8:	d51d      	bpl.n	8000f16 <AT24XX_Read+0xce>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ede:	6463      	str	r3, [r4, #68]	; 0x44
 8000ee0:	e019      	b.n	8000f16 <AT24XX_Read+0xce>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000ee2:	22ae      	movs	r2, #174	; 0xae
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000ee4:	4629      	mov	r1, r5
 8000ee6:	4868      	ldr	r0, [pc, #416]	; (8001088 <AT24XX_Read+0x240>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000ee8:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000eea:	f7ff ff47 	bl	8000d7c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8000eee:	b990      	cbnz	r0, 8000f16 <AT24XX_Read+0xce>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ef0:	6863      	ldr	r3, [r4, #4]
 8000ef2:	9007      	str	r0, [sp, #28]
 8000ef4:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ef6:	4628      	mov	r0, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ef8:	9207      	str	r2, [sp, #28]
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	9307      	str	r3, [sp, #28]
 8000efe:	9b07      	ldr	r3, [sp, #28]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f00:	f7ff ff70 	bl	8000de4 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8000f04:	b158      	cbz	r0, 8000f1e <AT24XX_Read+0xd6>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	d104      	bne.n	8000f16 <AT24XX_Read+0xce>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f0c:	6862      	ldr	r2, [r4, #4]
 8000f0e:	6813      	ldr	r3, [r2, #0]
 8000f10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f14:	6013      	str	r3, [r2, #0]
    AT24XX_Load(address, dt, 1);
    return dt[0];
}
 8000f16:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000f1a:	b009      	add	sp, #36	; 0x24
 8000f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000f1e:	6863      	ldr	r3, [r4, #4]
 8000f20:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f22:	4628      	mov	r0, r5
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000f24:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f26:	f7ff ff5d 	bl	8000de4 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	d1eb      	bne.n	8000f06 <AT24XX_Read+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000f2e:	6863      	ldr	r3, [r4, #4]
 8000f30:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f32:	4628      	mov	r0, r5
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000f34:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f36:	f7ff ff55 	bl	8000de4 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8000f3a:	4601      	mov	r1, r0
 8000f3c:	2800      	cmp	r0, #0
 8000f3e:	d1e2      	bne.n	8000f06 <AT24XX_Read+0xbe>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000f40:	6862      	ldr	r2, [r4, #4]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000f42:	f04f 1001 	mov.w	r0, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000f46:	6813      	ldr	r3, [r2, #0]
 8000f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4c:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000f4e:	462b      	mov	r3, r5
 8000f50:	2264      	movs	r2, #100	; 0x64
 8000f52:	f7ff feeb 	bl	8000d2c <I2C_WaitOnFlagUntilTimeout.constprop.0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000f56:	6863      	ldr	r3, [r4, #4]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000f58:	2800      	cmp	r0, #0
 8000f5a:	d1bb      	bne.n	8000ed4 <AT24XX_Read+0x8c>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000f5c:	22af      	movs	r2, #175	; 0xaf
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000f5e:	4629      	mov	r1, r5
 8000f60:	4849      	ldr	r0, [pc, #292]	; (8001088 <AT24XX_Read+0x240>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000f62:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000f64:	f7ff ff0a 	bl	8000d7c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	d1d4      	bne.n	8000f16 <AT24XX_Read+0xce>
    if (hi2c->XferSize == 0U)
 8000f6c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f6e:	6863      	ldr	r3, [r4, #4]
    if (hi2c->XferSize == 0U)
 8000f70:	b9b2      	cbnz	r2, 8000fa0 <AT24XX_Read+0x158>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f72:	9206      	str	r2, [sp, #24]
 8000f74:	695a      	ldr	r2, [r3, #20]
 8000f76:	9206      	str	r2, [sp, #24]
 8000f78:	699a      	ldr	r2, [r3, #24]
 8000f7a:	9206      	str	r2, [sp, #24]
 8000f7c:	9a06      	ldr	r2, [sp, #24]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f84:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000f86:	4e41      	ldr	r6, [pc, #260]	; (800108c <AT24XX_Read+0x244>)
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8000f88:	4f41      	ldr	r7, [pc, #260]	; (8001090 <AT24XX_Read+0x248>)
    while (hi2c->XferSize > 0U)
 8000f8a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d139      	bne.n	8001004 <AT24XX_Read+0x1bc>
    hi2c->State = HAL_I2C_STATE_READY;
 8000f90:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8000f92:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000f96:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f9e:	e7ba      	b.n	8000f16 <AT24XX_Read+0xce>
    else if (hi2c->XferSize == 1U)
 8000fa0:	2a01      	cmp	r2, #1
 8000fa2:	d111      	bne.n	8000fc8 <AT24XX_Read+0x180>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000faa:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fac:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fae:	6863      	ldr	r3, [r4, #4]
 8000fb0:	9005      	str	r0, [sp, #20]
 8000fb2:	695a      	ldr	r2, [r3, #20]
 8000fb4:	9205      	str	r2, [sp, #20]
 8000fb6:	699a      	ldr	r2, [r3, #24]
 8000fb8:	9205      	str	r2, [sp, #20]
 8000fba:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000fc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000fc4:	b662      	cpsie	i
}
 8000fc6:	e7de      	b.n	8000f86 <AT24XX_Read+0x13e>
    else if (hi2c->XferSize == 2U)
 8000fc8:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000fca:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8000fcc:	d10f      	bne.n	8000fee <AT24XX_Read+0x1a6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000fce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fd2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	9304      	str	r3, [sp, #16]
 8000fda:	6863      	ldr	r3, [r4, #4]
 8000fdc:	695a      	ldr	r2, [r3, #20]
 8000fde:	9204      	str	r2, [sp, #16]
 8000fe0:	699a      	ldr	r2, [r3, #24]
 8000fe2:	9204      	str	r2, [sp, #16]
 8000fe4:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fec:	e7e9      	b.n	8000fc2 <AT24XX_Read+0x17a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000fee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ff2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	9203      	str	r2, [sp, #12]
 8000ff8:	695a      	ldr	r2, [r3, #20]
 8000ffa:	9203      	str	r2, [sp, #12]
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	9303      	str	r3, [sp, #12]
 8001000:	9b03      	ldr	r3, [sp, #12]
 8001002:	e7c0      	b.n	8000f86 <AT24XX_Read+0x13e>
      if (hi2c->XferSize <= 3U)
 8001004:	2b03      	cmp	r3, #3
 8001006:	f200 8084 	bhi.w	8001112 <AT24XX_Read+0x2ca>
        if (hi2c->XferSize == 1U)
 800100a:	2b01      	cmp	r3, #1
 800100c:	d114      	bne.n	8001038 <AT24XX_Read+0x1f0>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800100e:	4628      	mov	r0, r5
 8001010:	f7ff fe5d 	bl	8000cce <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0>
 8001014:	2800      	cmp	r0, #0
 8001016:	f47f af7e 	bne.w	8000f16 <AT24XX_Read+0xce>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800101a:	6863      	ldr	r3, [r4, #4]
 800101c:	691a      	ldr	r2, [r3, #16]
 800101e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001020:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001022:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001024:	3301      	adds	r3, #1
 8001026:	62a3      	str	r3, [r4, #40]	; 0x28
          hi2c->XferSize--;
 8001028:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800102a:	3b01      	subs	r3, #1
 800102c:	85a3      	strh	r3, [r4, #44]	; 0x2c
          hi2c->XferCount--;
 800102e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001030:	3b01      	subs	r3, #1
 8001032:	b29b      	uxth	r3, r3
 8001034:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8001036:	e7a8      	b.n	8000f8a <AT24XX_Read+0x142>
        else if (hi2c->XferSize == 2U)
 8001038:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800103a:	f04f 0264 	mov.w	r2, #100	; 0x64
 800103e:	462b      	mov	r3, r5
 8001040:	f04f 0100 	mov.w	r1, #0
 8001044:	4630      	mov	r0, r6
        else if (hi2c->XferSize == 2U)
 8001046:	d125      	bne.n	8001094 <AT24XX_Read+0x24c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001048:	f7ff fe70 	bl	8000d2c <I2C_WaitOnFlagUntilTimeout.constprop.0>
 800104c:	2800      	cmp	r0, #0
 800104e:	f47f af62 	bne.w	8000f16 <AT24XX_Read+0xce>
 8001052:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001054:	6863      	ldr	r3, [r4, #4]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800105c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001062:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001064:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001066:	3301      	adds	r3, #1
 8001068:	62a3      	str	r3, [r4, #40]	; 0x28
          hi2c->XferSize--;
 800106a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800106c:	3b01      	subs	r3, #1
 800106e:	85a3      	strh	r3, [r4, #44]	; 0x2c
          hi2c->XferCount--;
 8001070:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001072:	3b01      	subs	r3, #1
 8001074:	b29b      	uxth	r3, r3
 8001076:	85e3      	strh	r3, [r4, #46]	; 0x2e
  __ASM volatile ("cpsie i" : : : "memory");
 8001078:	b662      	cpsie	i
 800107a:	e7ce      	b.n	800101a <AT24XX_Read+0x1d2>
 800107c:	20000208 	.word	0x20000208
 8001080:	00100002 	.word	0x00100002
 8001084:	ffff0000 	.word	0xffff0000
 8001088:	00010002 	.word	0x00010002
 800108c:	00010004 	.word	0x00010004
 8001090:	20000000 	.word	0x20000000
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001094:	f7ff fe4a 	bl	8000d2c <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8001098:	2800      	cmp	r0, #0
 800109a:	f47f af3c 	bne.w	8000f16 <AT24XX_Read+0xce>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800109e:	6862      	ldr	r2, [r4, #4]
 80010a0:	6813      	ldr	r3, [r2, #0]
 80010a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010a6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80010a8:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80010aa:	6863      	ldr	r3, [r4, #4]
 80010ac:	691a      	ldr	r2, [r3, #16]
 80010ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010b0:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80010b2:	f246 12a8 	movw	r2, #25000	; 0x61a8
          hi2c->pBuffPtr++;
 80010b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80010b8:	1c4b      	adds	r3, r1, #1
 80010ba:	62a3      	str	r3, [r4, #40]	; 0x28
          hi2c->XferSize--;
 80010bc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80010be:	3b01      	subs	r3, #1
 80010c0:	85a3      	strh	r3, [r4, #44]	; 0x2c
          hi2c->XferCount--;
 80010c2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80010c4:	3b01      	subs	r3, #1
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	85e3      	strh	r3, [r4, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80010d0:	2223      	movs	r2, #35	; 0x23
 80010d2:	4353      	muls	r3, r2
 80010d4:	9302      	str	r3, [sp, #8]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80010d6:	6863      	ldr	r3, [r4, #4]
            count--;
 80010d8:	9a02      	ldr	r2, [sp, #8]
 80010da:	3a01      	subs	r2, #1
 80010dc:	9202      	str	r2, [sp, #8]
            if (count == 0U)
 80010de:	9a02      	ldr	r2, [sp, #8]
 80010e0:	b96a      	cbnz	r2, 80010fe <AT24XX_Read+0x2b6>
              hi2c->State               = HAL_I2C_STATE_READY;
 80010e2:	2320      	movs	r3, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80010e4:	6362      	str	r2, [r4, #52]	; 0x34
              hi2c->State               = HAL_I2C_STATE_READY;
 80010e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010ea:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80010ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010f0:	f043 0320 	orr.w	r3, r3, #32
 80010f4:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 80010f6:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80010f8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 80010fc:	e70b      	b.n	8000f16 <AT24XX_Read+0xce>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80010fe:	695a      	ldr	r2, [r3, #20]
 8001100:	0750      	lsls	r0, r2, #29
 8001102:	d5e9      	bpl.n	80010d8 <AT24XX_Read+0x290>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800110a:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	704b      	strb	r3, [r1, #1]
 8001110:	e7a8      	b.n	8001064 <AT24XX_Read+0x21c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001112:	4628      	mov	r0, r5
 8001114:	f7ff fddb 	bl	8000cce <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0>
 8001118:	2800      	cmp	r0, #0
 800111a:	f47f aefc 	bne.w	8000f16 <AT24XX_Read+0xce>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800111e:	6863      	ldr	r3, [r4, #4]
 8001120:	691a      	ldr	r2, [r3, #16]
 8001122:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001124:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001126:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001128:	1c53      	adds	r3, r2, #1
 800112a:	62a3      	str	r3, [r4, #40]	; 0x28
        hi2c->XferSize--;
 800112c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800112e:	3b01      	subs	r3, #1
 8001130:	85a3      	strh	r3, [r4, #44]	; 0x2c
        hi2c->XferCount--;
 8001132:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001134:	3b01      	subs	r3, #1
 8001136:	b29b      	uxth	r3, r3
 8001138:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800113a:	6863      	ldr	r3, [r4, #4]
 800113c:	6959      	ldr	r1, [r3, #20]
 800113e:	0749      	lsls	r1, r1, #29
 8001140:	f57f af23 	bpl.w	8000f8a <AT24XX_Read+0x142>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	7053      	strb	r3, [r2, #1]
 8001148:	e76b      	b.n	8001022 <AT24XX_Read+0x1da>

0800114a <I2C_WaitOnBTFFlagUntilTimeout.constprop.0>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x5e>)
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 800114c:	b510      	push	{r4, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800114e:	685c      	ldr	r4, [r3, #4]
 8001150:	6962      	ldr	r2, [r4, #20]
 8001152:	f012 0204 	ands.w	r2, r2, #4
 8001156:	d001      	beq.n	800115c <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x12>
  return HAL_OK;
 8001158:	2000      	movs	r0, #0
 800115a:	e024      	b.n	80011a6 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x5c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800115c:	6961      	ldr	r1, [r4, #20]
 800115e:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8001162:	d110      	bne.n	8001186 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x3c>
 8001164:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001166:	1a12      	subs	r2, r2, r0
 8001168:	2a64      	cmp	r2, #100	; 0x64
 800116a:	d9f1      	bls.n	8001150 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x6>
        hi2c->State               = HAL_I2C_STATE_READY;
 800116c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800116e:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State               = HAL_I2C_STATE_READY;
 8001170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001174:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800117a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800117e:	f042 0220 	orr.w	r2, r2, #32
 8001182:	645a      	str	r2, [r3, #68]	; 0x44
 8001184:	e00e      	b.n	80011a4 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001186:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800118a:	6161      	str	r1, [r4, #20]
    hi2c->State               = HAL_I2C_STATE_READY;
 800118c:	2120      	movs	r1, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800118e:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 8001190:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001198:	6c59      	ldr	r1, [r3, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800119a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800119e:	f041 0104 	orr.w	r1, r1, #4
 80011a2:	6459      	str	r1, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80011a4:	2001      	movs	r0, #1
}
 80011a6:	bd10      	pop	{r4, pc}
 80011a8:	20000208 	.word	0x20000208

080011ac <AT24XX_Update>:
void AT24XX_Write(uint16_t address, uint8_t val) {
    uint8_t save[] = {val};
    AT24XX_Save(address, save, 1);
}

void AT24XX_Update(uint16_t address, uint8_t val) {
 80011ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80011ae:	460c      	mov	r4, r1
 80011b0:	4606      	mov	r6, r0
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80011b2:	f7ff fe49 	bl	8000e48 <AT24XX_Read>
 80011b6:	42a0      	cmp	r0, r4
 80011b8:	d043      	beq.n	8001242 <AT24XX_Update+0x96>
    uint8_t save[] = {val};
 80011ba:	f88d 4000 	strb.w	r4, [sp]
 80011be:	4c52      	ldr	r4, [pc, #328]	; (8001308 <AT24XX_Update+0x15c>)
 80011c0:	6825      	ldr	r5, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011c2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80011c6:	2b20      	cmp	r3, #32
 80011c8:	d13b      	bne.n	8001242 <AT24XX_Update+0x96>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011ca:	462b      	mov	r3, r5
 80011cc:	2219      	movs	r2, #25
 80011ce:	2101      	movs	r1, #1
 80011d0:	484e      	ldr	r0, [pc, #312]	; (800130c <AT24XX_Update+0x160>)
 80011d2:	f7ff fdab 	bl	8000d2c <I2C_WaitOnFlagUntilTimeout.constprop.0>
 80011d6:	2800      	cmp	r0, #0
 80011d8:	d133      	bne.n	8001242 <AT24XX_Update+0x96>
    __HAL_LOCK(hi2c);
 80011da:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80011de:	428b      	cmp	r3, r1
 80011e0:	d02f      	beq.n	8001242 <AT24XX_Update+0x96>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011e2:	6863      	ldr	r3, [r4, #4]
    __HAL_LOCK(hi2c);
 80011e4:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80011ec:	bf58      	it	pl
 80011ee:	681a      	ldrpl	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80011f0:	f04f 1001 	mov.w	r0, #65537	; 0x10001
      __HAL_I2C_ENABLE(hi2c);
 80011f4:	bf5c      	itt	pl
 80011f6:	430a      	orrpl	r2, r1
 80011f8:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011fa:	681a      	ldr	r2, [r3, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011fc:	2100      	movs	r1, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001202:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001204:	2221      	movs	r2, #33	; 0x21
 8001206:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800120a:	2240      	movs	r2, #64	; 0x40
 800120c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->XferCount   = Size;
 8001210:	2201      	movs	r2, #1
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001212:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8001214:	85e2      	strh	r2, [r4, #46]	; 0x2e
    hi2c->XferSize    = hi2c->XferCount;
 8001216:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    hi2c->pBuffPtr    = pData;
 8001218:	f8c4 d028 	str.w	sp, [r4, #40]	; 0x28
    hi2c->XferSize    = hi2c->XferCount;
 800121c:	85a2      	strh	r2, [r4, #44]	; 0x2c
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800121e:	4a3c      	ldr	r2, [pc, #240]	; (8001310 <AT24XX_Update+0x164>)
 8001220:	6322      	str	r2, [r4, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001228:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800122a:	462b      	mov	r3, r5
 800122c:	2264      	movs	r2, #100	; 0x64
 800122e:	f7ff fd7d 	bl	8000d2c <I2C_WaitOnFlagUntilTimeout.constprop.0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001232:	6863      	ldr	r3, [r4, #4]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001234:	b138      	cbz	r0, 8001246 <AT24XX_Update+0x9a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	05d9      	lsls	r1, r3, #23
 800123a:	d502      	bpl.n	8001242 <AT24XX_Update+0x96>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800123c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001240:	6463      	str	r3, [r4, #68]	; 0x44
}
 8001242:	b002      	add	sp, #8
 8001244:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001246:	22ae      	movs	r2, #174	; 0xae
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001248:	4629      	mov	r1, r5
 800124a:	4832      	ldr	r0, [pc, #200]	; (8001314 <AT24XX_Update+0x168>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800124c:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800124e:	f7ff fd95 	bl	8000d7c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8001252:	2800      	cmp	r0, #0
 8001254:	d1f5      	bne.n	8001242 <AT24XX_Update+0x96>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001256:	6863      	ldr	r3, [r4, #4]
 8001258:	9001      	str	r0, [sp, #4]
 800125a:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800125c:	4628      	mov	r0, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800125e:	9201      	str	r2, [sp, #4]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	9b01      	ldr	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001266:	f7ff fdbd 	bl	8000de4 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 800126a:	b140      	cbz	r0, 800127e <AT24XX_Update+0xd2>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800126c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800126e:	2b04      	cmp	r3, #4
 8001270:	d1e7      	bne.n	8001242 <AT24XX_Update+0x96>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001272:	6862      	ldr	r2, [r4, #4]
 8001274:	6813      	ldr	r3, [r2, #0]
 8001276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	e7e1      	b.n	8001242 <AT24XX_Update+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800127e:	6863      	ldr	r3, [r4, #4]
 8001280:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001282:	4628      	mov	r0, r5
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001284:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001286:	f7ff fdad 	bl	8000de4 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 800128a:	2800      	cmp	r0, #0
 800128c:	d1ee      	bne.n	800126c <AT24XX_Update+0xc0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800128e:	6863      	ldr	r3, [r4, #4]
 8001290:	b2f6      	uxtb	r6, r6
 8001292:	611e      	str	r6, [r3, #16]
    while (hi2c->XferSize > 0U)
 8001294:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001296:	4628      	mov	r0, r5
    while (hi2c->XferSize > 0U)
 8001298:	b99b      	cbnz	r3, 80012c2 <AT24XX_Update+0x116>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800129a:	f7ff ff56 	bl	800114a <I2C_WaitOnBTFFlagUntilTimeout.constprop.0>
 800129e:	2800      	cmp	r0, #0
 80012a0:	d1e4      	bne.n	800126c <AT24XX_Update+0xc0>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012a2:	6862      	ldr	r2, [r4, #4]
 80012a4:	6813      	ldr	r3, [r2, #0]
 80012a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012aa:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80012ac:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80012ae:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80012b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012b6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
        HAL_Delay(5);
 80012ba:	2005      	movs	r0, #5
 80012bc:	f7ff f82f 	bl	800031e <HAL_Delay>
}
 80012c0:	e7bf      	b.n	8001242 <AT24XX_Update+0x96>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012c2:	f7ff fd8f 	bl	8000de4 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 80012c6:	2800      	cmp	r0, #0
 80012c8:	d1d0      	bne.n	800126c <AT24XX_Update+0xc0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012cc:	6866      	ldr	r6, [r4, #4]
 80012ce:	461a      	mov	r2, r3
 80012d0:	f812 1b01 	ldrb.w	r1, [r2], #1
 80012d4:	6131      	str	r1, [r6, #16]
      hi2c->pBuffPtr++;
 80012d6:	62a2      	str	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80012d8:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      hi2c->XferSize--;
 80012da:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
      hi2c->XferCount--;
 80012dc:	3a01      	subs	r2, #1
 80012de:	b292      	uxth	r2, r2
 80012e0:	85e2      	strh	r2, [r4, #46]	; 0x2e
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80012e2:	6972      	ldr	r2, [r6, #20]
      hi2c->XferSize--;
 80012e4:	1e48      	subs	r0, r1, #1
 80012e6:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80012e8:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 80012ea:	85a0      	strh	r0, [r4, #44]	; 0x2c
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80012ec:	d5d2      	bpl.n	8001294 <AT24XX_Update+0xe8>
 80012ee:	2800      	cmp	r0, #0
 80012f0:	d0d0      	beq.n	8001294 <AT24XX_Update+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012f2:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 80012f4:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012f6:	6132      	str	r2, [r6, #16]
        hi2c->pBuffPtr++;
 80012f8:	62a3      	str	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80012fa:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        hi2c->XferSize--;
 80012fc:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80012fe:	3b01      	subs	r3, #1
 8001300:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001302:	85a1      	strh	r1, [r4, #44]	; 0x2c
        hi2c->XferCount--;
 8001304:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8001306:	e7c5      	b.n	8001294 <AT24XX_Update+0xe8>
 8001308:	20000208 	.word	0x20000208
 800130c:	00100002 	.word	0x00100002
 8001310:	ffff0000 	.word	0xffff0000
 8001314:	00010002 	.word	0x00010002

08001318 <HAL_I2C_Master_Receive.constprop.0.isra.0>:
  __IO uint32_t count = 0U;
 8001318:	2300      	movs	r3, #0
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 800131a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800131e:	4c8b      	ldr	r4, [pc, #556]	; (800154c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x234>)
 8001320:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	6826      	ldr	r6, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001326:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 800132a:	4607      	mov	r7, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800132c:	2b20      	cmp	r3, #32
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 800132e:	4689      	mov	r9, r1
 8001330:	4690      	mov	r8, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001332:	d14b      	bne.n	80013cc <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001334:	4633      	mov	r3, r6
 8001336:	2219      	movs	r2, #25
 8001338:	2101      	movs	r1, #1
 800133a:	4885      	ldr	r0, [pc, #532]	; (8001550 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x238>)
 800133c:	f7ff fcf6 	bl	8000d2c <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8001340:	2800      	cmp	r0, #0
 8001342:	d143      	bne.n	80013cc <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
    __HAL_LOCK(hi2c);
 8001344:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001348:	428b      	cmp	r3, r1
 800134a:	d03f      	beq.n	80013cc <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800134c:	6865      	ldr	r5, [r4, #4]
    __HAL_LOCK(hi2c);
 800134e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001352:	682b      	ldr	r3, [r5, #0]
 8001354:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8001356:	bf5e      	ittt	pl
 8001358:	682b      	ldrpl	r3, [r5, #0]
 800135a:	430b      	orrpl	r3, r1
 800135c:	602b      	strpl	r3, [r5, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800135e:	682b      	ldr	r3, [r5, #0]
 8001360:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001364:	602b      	str	r3, [r5, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001366:	2322      	movs	r3, #34	; 0x22
 8001368:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800136c:	2310      	movs	r3, #16
 800136e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001372:	2300      	movs	r3, #0
 8001374:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8001376:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    hi2c->XferSize    = hi2c->XferCount;
 800137a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    hi2c->pBuffPtr    = pData;
 800137c:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    hi2c->XferSize    = hi2c->XferCount;
 8001380:	85a3      	strh	r3, [r4, #44]	; 0x2c
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001382:	4b74      	ldr	r3, [pc, #464]	; (8001554 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x23c>)
 8001384:	6323      	str	r3, [r4, #48]	; 0x30
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001386:	6b23      	ldr	r3, [r4, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001388:	682a      	ldr	r2, [r5, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800138a:	2b08      	cmp	r3, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800138c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001390:	602a      	str	r2, [r5, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001392:	d004      	beq.n	800139e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x86>
 8001394:	2b01      	cmp	r3, #1
 8001396:	d002      	beq.n	800139e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x86>
 8001398:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800139c:	d104      	bne.n	80013a8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x90>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800139e:	682b      	ldr	r3, [r5, #0]
 80013a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a4:	602b      	str	r3, [r5, #0]
 80013a6:	e002      	b.n	80013ae <HAL_I2C_Master_Receive.constprop.0.isra.0+0x96>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80013a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013aa:	2b11      	cmp	r3, #17
 80013ac:	d0f7      	beq.n	800139e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x86>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80013ae:	4633      	mov	r3, r6
 80013b0:	2264      	movs	r2, #100	; 0x64
 80013b2:	2100      	movs	r1, #0
 80013b4:	f04f 1001 	mov.w	r0, #65537	; 0x10001
 80013b8:	f7ff fcb8 	bl	8000d2c <I2C_WaitOnFlagUntilTimeout.constprop.0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80013bc:	6863      	ldr	r3, [r4, #4]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80013be:	b140      	cbz	r0, 80013d2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xba>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	05dd      	lsls	r5, r3, #23
 80013c4:	d502      	bpl.n	80013cc <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80013c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ca:	6463      	str	r3, [r4, #68]	; 0x44
}
 80013cc:	b007      	add	sp, #28
 80013ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013d2:	6962      	ldr	r2, [r4, #20]
 80013d4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80013d8:	d124      	bne.n	8001424 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x10c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80013da:	f047 0701 	orr.w	r7, r7, #1
 80013de:	b2ff      	uxtb	r7, r7
 80013e0:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80013e2:	4631      	mov	r1, r6
 80013e4:	485c      	ldr	r0, [pc, #368]	; (8001558 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x240>)
 80013e6:	f7ff fcc9 	bl	8000d7c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 80013ea:	2800      	cmp	r0, #0
 80013ec:	d1ee      	bne.n	80013cc <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
    if (hi2c->XferSize == 0U)
 80013ee:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013f0:	6862      	ldr	r2, [r4, #4]
    if (hi2c->XferSize == 0U)
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d13e      	bne.n	8001474 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x15c>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013f6:	9304      	str	r3, [sp, #16]
 80013f8:	6953      	ldr	r3, [r2, #20]
 80013fa:	9304      	str	r3, [sp, #16]
 80013fc:	6993      	ldr	r3, [r2, #24]
 80013fe:	9304      	str	r3, [sp, #16]
 8001400:	9b04      	ldr	r3, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001402:	6813      	ldr	r3, [r2, #0]
 8001404:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001408:	6013      	str	r3, [r2, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800140a:	4d54      	ldr	r5, [pc, #336]	; (800155c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x244>)
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800140c:	4f54      	ldr	r7, [pc, #336]	; (8001560 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x248>)
    while (hi2c->XferSize > 0U)
 800140e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8001410:	2b00      	cmp	r3, #0
 8001412:	d15f      	bne.n	80014d4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1bc>
    hi2c->State = HAL_I2C_STATE_READY;
 8001414:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8001416:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800141a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800141e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_OK;
 8001422:	e7d3      	b.n	80013cc <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001424:	22f0      	movs	r2, #240	; 0xf0
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001426:	4631      	mov	r1, r6
 8001428:	484e      	ldr	r0, [pc, #312]	; (8001564 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x24c>)
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800142a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800142c:	f7ff fca6 	bl	8000d7c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8001430:	2800      	cmp	r0, #0
 8001432:	d1cb      	bne.n	80013cc <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001434:	6863      	ldr	r3, [r4, #4]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001436:	4631      	mov	r1, r6
 8001438:	4847      	ldr	r0, [pc, #284]	; (8001558 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x240>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800143a:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800143c:	f7ff fc9e 	bl	8000d7c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8001440:	4601      	mov	r1, r0
 8001442:	2800      	cmp	r0, #0
 8001444:	d1c2      	bne.n	80013cc <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001446:	6863      	ldr	r3, [r4, #4]
 8001448:	9005      	str	r0, [sp, #20]
 800144a:	695a      	ldr	r2, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800144c:	f04f 1001 	mov.w	r0, #65537	; 0x10001
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001450:	9205      	str	r2, [sp, #20]
 8001452:	699a      	ldr	r2, [r3, #24]
 8001454:	9205      	str	r2, [sp, #20]
 8001456:	9a05      	ldr	r2, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800145e:	601a      	str	r2, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001460:	4633      	mov	r3, r6
 8001462:	2264      	movs	r2, #100	; 0x64
 8001464:	f7ff fc62 	bl	8000d2c <I2C_WaitOnFlagUntilTimeout.constprop.0>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001468:	6863      	ldr	r3, [r4, #4]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800146a:	2800      	cmp	r0, #0
 800146c:	d1a8      	bne.n	80013c0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xa8>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800146e:	22f1      	movs	r2, #241	; 0xf1
 8001470:	611a      	str	r2, [r3, #16]
 8001472:	e7b6      	b.n	80013e2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xca>
    else if (hi2c->XferSize == 1U)
 8001474:	2b01      	cmp	r3, #1
 8001476:	d111      	bne.n	800149c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x184>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001478:	6813      	ldr	r3, [r2, #0]
 800147a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800147e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001480:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001482:	6863      	ldr	r3, [r4, #4]
 8001484:	9003      	str	r0, [sp, #12]
 8001486:	695a      	ldr	r2, [r3, #20]
 8001488:	9203      	str	r2, [sp, #12]
 800148a:	699a      	ldr	r2, [r3, #24]
 800148c:	9203      	str	r2, [sp, #12]
 800148e:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001496:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001498:	b662      	cpsie	i
}
 800149a:	e7b6      	b.n	800140a <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf2>
    else if (hi2c->XferSize == 2U)
 800149c:	2b02      	cmp	r3, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800149e:	6813      	ldr	r3, [r2, #0]
    else if (hi2c->XferSize == 2U)
 80014a0:	d10e      	bne.n	80014c0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1a8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014a6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80014a8:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014aa:	6863      	ldr	r3, [r4, #4]
 80014ac:	9002      	str	r0, [sp, #8]
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	9202      	str	r2, [sp, #8]
 80014b2:	699a      	ldr	r2, [r3, #24]
 80014b4:	9202      	str	r2, [sp, #8]
 80014b6:	9a02      	ldr	r2, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014be:	e7ea      	b.n	8001496 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x17e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014c4:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014c6:	9001      	str	r0, [sp, #4]
 80014c8:	6953      	ldr	r3, [r2, #20]
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	6993      	ldr	r3, [r2, #24]
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	9b01      	ldr	r3, [sp, #4]
 80014d2:	e79a      	b.n	800140a <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf2>
      if (hi2c->XferSize <= 3U)
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	f200 8086 	bhi.w	80015e6 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2ce>
        if (hi2c->XferSize == 1U)
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d114      	bne.n	8001508 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1f0>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014de:	4630      	mov	r0, r6
 80014e0:	f7ff fbf5 	bl	8000cce <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0>
 80014e4:	2800      	cmp	r0, #0
 80014e6:	f47f af71 	bne.w	80013cc <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014ea:	6863      	ldr	r3, [r4, #4]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014f0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80014f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014f4:	3301      	adds	r3, #1
 80014f6:	62a3      	str	r3, [r4, #40]	; 0x28
          hi2c->XferSize--;
 80014f8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80014fa:	3b01      	subs	r3, #1
 80014fc:	85a3      	strh	r3, [r4, #44]	; 0x2c
          hi2c->XferCount--;
 80014fe:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001500:	3b01      	subs	r3, #1
 8001502:	b29b      	uxth	r3, r3
 8001504:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8001506:	e782      	b.n	800140e <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf6>
        else if (hi2c->XferSize == 2U)
 8001508:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800150a:	f04f 0264 	mov.w	r2, #100	; 0x64
 800150e:	4633      	mov	r3, r6
 8001510:	f04f 0100 	mov.w	r1, #0
 8001514:	4628      	mov	r0, r5
        else if (hi2c->XferSize == 2U)
 8001516:	d127      	bne.n	8001568 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x250>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001518:	f7ff fc08 	bl	8000d2c <I2C_WaitOnFlagUntilTimeout.constprop.0>
 800151c:	2800      	cmp	r0, #0
 800151e:	f47f af55 	bne.w	80013cc <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
 8001522:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001524:	6863      	ldr	r3, [r4, #4]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800152c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001532:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001534:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001536:	3301      	adds	r3, #1
 8001538:	62a3      	str	r3, [r4, #40]	; 0x28
          hi2c->XferSize--;
 800153a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800153c:	3b01      	subs	r3, #1
 800153e:	85a3      	strh	r3, [r4, #44]	; 0x2c
          hi2c->XferCount--;
 8001540:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001542:	3b01      	subs	r3, #1
 8001544:	b29b      	uxth	r3, r3
 8001546:	85e3      	strh	r3, [r4, #46]	; 0x2e
  __ASM volatile ("cpsie i" : : : "memory");
 8001548:	b662      	cpsie	i
 800154a:	e7ce      	b.n	80014ea <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d2>
 800154c:	20000208 	.word	0x20000208
 8001550:	00100002 	.word	0x00100002
 8001554:	ffff0000 	.word	0xffff0000
 8001558:	00010002 	.word	0x00010002
 800155c:	00010004 	.word	0x00010004
 8001560:	20000000 	.word	0x20000000
 8001564:	00010008 	.word	0x00010008
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001568:	f7ff fbe0 	bl	8000d2c <I2C_WaitOnFlagUntilTimeout.constprop.0>
 800156c:	2800      	cmp	r0, #0
 800156e:	f47f af2d 	bne.w	80013cc <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001572:	6862      	ldr	r2, [r4, #4]
 8001574:	6813      	ldr	r3, [r2, #0]
 8001576:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800157a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800157e:	6863      	ldr	r3, [r4, #4]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001584:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001586:	f246 12a8 	movw	r2, #25000	; 0x61a8
          hi2c->pBuffPtr++;
 800158a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800158c:	1c4b      	adds	r3, r1, #1
 800158e:	62a3      	str	r3, [r4, #40]	; 0x28
          hi2c->XferSize--;
 8001590:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8001592:	3b01      	subs	r3, #1
 8001594:	85a3      	strh	r3, [r4, #44]	; 0x2c
          hi2c->XferCount--;
 8001596:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001598:	3b01      	subs	r3, #1
 800159a:	b29b      	uxth	r3, r3
 800159c:	85e3      	strh	r3, [r4, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80015a4:	2223      	movs	r2, #35	; 0x23
 80015a6:	4353      	muls	r3, r2
 80015a8:	9300      	str	r3, [sp, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80015aa:	6863      	ldr	r3, [r4, #4]
            count--;
 80015ac:	9a00      	ldr	r2, [sp, #0]
 80015ae:	3a01      	subs	r2, #1
 80015b0:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 80015b2:	9a00      	ldr	r2, [sp, #0]
 80015b4:	b96a      	cbnz	r2, 80015d2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2ba>
              hi2c->State               = HAL_I2C_STATE_READY;
 80015b6:	2320      	movs	r3, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80015b8:	6362      	str	r2, [r4, #52]	; 0x34
              hi2c->State               = HAL_I2C_STATE_READY;
 80015ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015be:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015c4:	f043 0320 	orr.w	r3, r3, #32
 80015c8:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 80015ca:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80015cc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
              return HAL_ERROR;
 80015d0:	e6fc      	b.n	80013cc <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80015d2:	695a      	ldr	r2, [r3, #20]
 80015d4:	0750      	lsls	r0, r2, #29
 80015d6:	d5e9      	bpl.n	80015ac <HAL_I2C_Master_Receive.constprop.0.isra.0+0x294>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015de:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	704b      	strb	r3, [r1, #1]
 80015e4:	e7a6      	b.n	8001534 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x21c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e6:	4630      	mov	r0, r6
 80015e8:	f7ff fb71 	bl	8000cce <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0>
 80015ec:	2800      	cmp	r0, #0
 80015ee:	f47f aeed 	bne.w	80013cc <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015f2:	6863      	ldr	r3, [r4, #4]
 80015f4:	691a      	ldr	r2, [r3, #16]
 80015f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80015fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80015fc:	1c53      	adds	r3, r2, #1
 80015fe:	62a3      	str	r3, [r4, #40]	; 0x28
        hi2c->XferSize--;
 8001600:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8001602:	3b01      	subs	r3, #1
 8001604:	85a3      	strh	r3, [r4, #44]	; 0x2c
        hi2c->XferCount--;
 8001606:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001608:	3b01      	subs	r3, #1
 800160a:	b29b      	uxth	r3, r3
 800160c:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800160e:	6863      	ldr	r3, [r4, #4]
 8001610:	6959      	ldr	r1, [r3, #20]
 8001612:	0749      	lsls	r1, r1, #29
 8001614:	f57f aefb 	bpl.w	800140e <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	7053      	strb	r3, [r2, #1]
 800161c:	e769      	b.n	80014f2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1da>

0800161e <HAL_I2C_Master_Transmit.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 800161e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001622:	4c57      	ldr	r4, [pc, #348]	; (8001780 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x162>)
 8001624:	4607      	mov	r7, r0
 8001626:	6826      	ldr	r6, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001628:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 800162c:	4689      	mov	r9, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800162e:	2b20      	cmp	r3, #32
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8001630:	4690      	mov	r8, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001632:	d147      	bne.n	80016c4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001634:	4633      	mov	r3, r6
 8001636:	2219      	movs	r2, #25
 8001638:	2101      	movs	r1, #1
 800163a:	4852      	ldr	r0, [pc, #328]	; (8001784 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x166>)
 800163c:	f7ff fb76 	bl	8000d2c <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8001640:	2800      	cmp	r0, #0
 8001642:	d13f      	bne.n	80016c4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
    __HAL_LOCK(hi2c);
 8001644:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001648:	428b      	cmp	r3, r1
 800164a:	d03b      	beq.n	80016c4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800164c:	6865      	ldr	r5, [r4, #4]
    __HAL_LOCK(hi2c);
 800164e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001652:	682b      	ldr	r3, [r5, #0]
 8001654:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8001656:	bf5e      	ittt	pl
 8001658:	682b      	ldrpl	r3, [r5, #0]
 800165a:	430b      	orrpl	r3, r1
 800165c:	602b      	strpl	r3, [r5, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800165e:	682b      	ldr	r3, [r5, #0]
 8001660:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001664:	602b      	str	r3, [r5, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001666:	2321      	movs	r3, #33	; 0x21
 8001668:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800166c:	2310      	movs	r3, #16
 800166e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001672:	2300      	movs	r3, #0
 8001674:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8001676:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    hi2c->XferSize    = hi2c->XferCount;
 800167a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    hi2c->pBuffPtr    = pData;
 800167c:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    hi2c->XferSize    = hi2c->XferCount;
 8001680:	85a3      	strh	r3, [r4, #44]	; 0x2c
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001682:	4b41      	ldr	r3, [pc, #260]	; (8001788 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x16a>)
 8001684:	6323      	str	r3, [r4, #48]	; 0x30
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001686:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001688:	2b08      	cmp	r3, #8
 800168a:	d004      	beq.n	8001696 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x78>
 800168c:	2b01      	cmp	r3, #1
 800168e:	d002      	beq.n	8001696 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x78>
 8001690:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001694:	d104      	bne.n	80016a0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x82>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001696:	682b      	ldr	r3, [r5, #0]
 8001698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169c:	602b      	str	r3, [r5, #0]
 800169e:	e002      	b.n	80016a6 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x88>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80016a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016a2:	2b12      	cmp	r3, #18
 80016a4:	d0f7      	beq.n	8001696 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x78>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016a6:	4633      	mov	r3, r6
 80016a8:	2264      	movs	r2, #100	; 0x64
 80016aa:	2100      	movs	r1, #0
 80016ac:	f04f 1001 	mov.w	r0, #65537	; 0x10001
 80016b0:	f7ff fb3c 	bl	8000d2c <I2C_WaitOnFlagUntilTimeout.constprop.0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016b4:	6863      	ldr	r3, [r4, #4]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016b6:	b140      	cbz	r0, 80016ca <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xac>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	05de      	lsls	r6, r3, #23
 80016bc:	d502      	bpl.n	80016c4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016c2:	6463      	str	r3, [r4, #68]	; 0x44
}
 80016c4:	b003      	add	sp, #12
 80016c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016ca:	6962      	ldr	r2, [r4, #20]
 80016cc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80016d0:	d11c      	bne.n	800170c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xee>
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016d2:	4631      	mov	r1, r6
 80016d4:	482d      	ldr	r0, [pc, #180]	; (800178c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x16e>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80016d6:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016d8:	f7ff fb50 	bl	8000d7c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 80016dc:	2800      	cmp	r0, #0
 80016de:	d1f1      	bne.n	80016c4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016e0:	6863      	ldr	r3, [r4, #4]
 80016e2:	9001      	str	r0, [sp, #4]
 80016e4:	695a      	ldr	r2, [r3, #20]
 80016e6:	9201      	str	r2, [sp, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
    while (hi2c->XferSize > 0U)
 80016ee:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80016f0:	b9b3      	cbnz	r3, 8001720 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x102>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016f2:	6861      	ldr	r1, [r4, #4]
 80016f4:	680a      	ldr	r2, [r1, #0]
 80016f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016fa:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80016fc:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80016fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001702:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001706:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_OK;
 800170a:	e7db      	b.n	80016c4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800170c:	22f0      	movs	r2, #240	; 0xf0
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800170e:	4631      	mov	r1, r6
 8001710:	481f      	ldr	r0, [pc, #124]	; (8001790 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x172>)
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001712:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001714:	f7ff fb32 	bl	8000d7c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8001718:	2800      	cmp	r0, #0
 800171a:	d1d3      	bne.n	80016c4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800171c:	6863      	ldr	r3, [r4, #4]
 800171e:	e7d8      	b.n	80016d2 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xb4>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001720:	4630      	mov	r0, r6
 8001722:	f7ff fb5f 	bl	8000de4 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8001726:	b140      	cbz	r0, 800173a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x11c>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001728:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800172a:	2b04      	cmp	r3, #4
 800172c:	d1ca      	bne.n	80016c4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172e:	6862      	ldr	r2, [r4, #4]
 8001730:	6813      	ldr	r3, [r2, #0]
 8001732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	e7c4      	b.n	80016c4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800173a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800173c:	6860      	ldr	r0, [r4, #4]
 800173e:	461a      	mov	r2, r3
 8001740:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001744:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8001746:	62a2      	str	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001748:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800174a:	3a01      	subs	r2, #1
 800174c:	b292      	uxth	r2, r2
 800174e:	85e2      	strh	r2, [r4, #46]	; 0x2e
      hi2c->XferSize--;
 8001750:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001752:	6945      	ldr	r5, [r0, #20]
      hi2c->XferSize--;
 8001754:	1e51      	subs	r1, r2, #1
 8001756:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001758:	076d      	lsls	r5, r5, #29
      hi2c->XferSize--;
 800175a:	85a1      	strh	r1, [r4, #44]	; 0x2c
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800175c:	d50a      	bpl.n	8001774 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x156>
 800175e:	b149      	cbz	r1, 8001774 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x156>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001760:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 8001762:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001764:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8001766:	62a3      	str	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001768:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        hi2c->XferSize--;
 800176a:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 800176c:	3b01      	subs	r3, #1
 800176e:	b29b      	uxth	r3, r3
 8001770:	85e3      	strh	r3, [r4, #46]	; 0x2e
        hi2c->XferSize--;
 8001772:	85a2      	strh	r2, [r4, #44]	; 0x2c
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001774:	4630      	mov	r0, r6
 8001776:	f7ff fce8 	bl	800114a <I2C_WaitOnBTFFlagUntilTimeout.constprop.0>
 800177a:	2800      	cmp	r0, #0
 800177c:	d0b7      	beq.n	80016ee <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xd0>
 800177e:	e7d3      	b.n	8001728 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10a>
 8001780:	20000208 	.word	0x20000208
 8001784:	00100002 	.word	0x00100002
 8001788:	ffff0000 	.word	0xffff0000
 800178c:	00010002 	.word	0x00010002
 8001790:	00010008 	.word	0x00010008

08001794 <BME280_Init>:
}

void BME280_Init(void) {
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 8001794:	23f2      	movs	r3, #242	; 0xf2
void BME280_Init(void) {
 8001796:	b510      	push	{r4, lr}
 8001798:	b086      	sub	sp, #24
    cmd[0] = 0xF2; // ctrl_hum
 800179a:	f88d 3004 	strb.w	r3, [sp, #4]
    cmd[1] = 0x05; // Humidity oversampling x16
 800179e:	2305      	movs	r3, #5
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80017a0:	a901      	add	r1, sp, #4
 80017a2:	2202      	movs	r2, #2
 80017a4:	20ec      	movs	r0, #236	; 0xec
    cmd[1] = 0x05; // Humidity oversampling x16
 80017a6:	f88d 3005 	strb.w	r3, [sp, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80017aa:	f7ff ff38 	bl	800161e <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF4; // ctrl_meas
 80017ae:	23f4      	movs	r3, #244	; 0xf4
 80017b0:	f88d 3004 	strb.w	r3, [sp, #4]
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 80017b4:	23b7      	movs	r3, #183	; 0xb7
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80017b6:	a901      	add	r1, sp, #4
 80017b8:	2202      	movs	r2, #2
 80017ba:	20ec      	movs	r0, #236	; 0xec
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 80017bc:	f88d 3005 	strb.w	r3, [sp, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80017c0:	f7ff ff2d 	bl	800161e <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF5; // config
 80017c4:	23f5      	movs	r3, #245	; 0xf5
 80017c6:	f88d 3004 	strb.w	r3, [sp, #4]
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
 80017ca:	23a0      	movs	r3, #160	; 0xa0
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80017cc:	a901      	add	r1, sp, #4
 80017ce:	2202      	movs	r2, #2
 80017d0:	20ec      	movs	r0, #236	; 0xec
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
 80017d2:	f88d 3005 	strb.w	r3, [sp, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80017d6:	f7ff ff22 	bl	800161e <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0x88; // read dig_T regs
 80017da:	2388      	movs	r3, #136	; 0x88
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80017dc:	a901      	add	r1, sp, #4
 80017de:	2201      	movs	r2, #1
 80017e0:	20ec      	movs	r0, #236	; 0xec
    cmd[0] = 0x88; // read dig_T regs
 80017e2:	f88d 3004 	strb.w	r3, [sp, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80017e6:	f7ff ff1a 	bl	800161e <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 80017ea:	a901      	add	r1, sp, #4
 80017ec:	2206      	movs	r2, #6
 80017ee:	20ec      	movs	r0, #236	; 0xec

    dig_T1 = (cmd[1] << 8) | cmd[0];
 80017f0:	4c3f      	ldr	r4, [pc, #252]	; (80018f0 <BME280_Init+0x15c>)
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 80017f2:	f7ff fd91 	bl	8001318 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    dig_T1 = (cmd[1] << 8) | cmd[0];
 80017f6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    dig_T2 = (cmd[3] << 8) | cmd[2];
    dig_T3 = (cmd[5] << 8) | cmd[4];

    cmd[0] = 0x8E; // read dig_P regs
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80017fa:	a901      	add	r1, sp, #4
    dig_T1 = (cmd[1] << 8) | cmd[0];
 80017fc:	f8a4 30e4 	strh.w	r3, [r4, #228]	; 0xe4
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8001800:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001804:	2201      	movs	r2, #1
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8001806:	f8a4 30e6 	strh.w	r3, [r4, #230]	; 0xe6
    dig_T3 = (cmd[5] << 8) | cmd[4];
 800180a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800180e:	20ec      	movs	r0, #236	; 0xec
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8001810:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
    cmd[0] = 0x8E; // read dig_P regs
 8001814:	238e      	movs	r3, #142	; 0x8e
 8001816:	f88d 3004 	strb.w	r3, [sp, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800181a:	f7ff ff00 	bl	800161e <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 800181e:	a901      	add	r1, sp, #4
 8001820:	2212      	movs	r2, #18
 8001822:	20ec      	movs	r0, #236	; 0xec
 8001824:	f7ff fd78 	bl	8001318 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_P1 = (cmd[1] << 8) | cmd[0];
 8001828:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    dig_P7 = (cmd[13] << 8) | cmd[12];
    dig_P8 = (cmd[15] << 8) | cmd[14];
    dig_P9 = (cmd[17] << 8) | cmd[16];

    cmd[0] = 0xA1; // read dig_H regs
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800182c:	a901      	add	r1, sp, #4
    dig_P1 = (cmd[1] << 8) | cmd[0];
 800182e:	f8a4 30ea 	strh.w	r3, [r4, #234]	; 0xea
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8001832:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001836:	2201      	movs	r2, #1
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8001838:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
    dig_P3 = (cmd[5] << 8) | cmd[4];
 800183c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001840:	20ec      	movs	r0, #236	; 0xec
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8001842:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    dig_P4 = (cmd[7] << 8) | cmd[6];
 8001846:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800184a:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
    dig_P5 = (cmd[9] << 8) | cmd[8];
 800184e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8001852:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8001856:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800185a:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
    dig_P7 = (cmd[13] << 8) | cmd[12];
 800185e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8001862:	f8a4 30f6 	strh.w	r3, [r4, #246]	; 0xf6
    dig_P8 = (cmd[15] << 8) | cmd[14];
 8001866:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800186a:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    dig_P9 = (cmd[17] << 8) | cmd[16];
 800186e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8001872:	f8a4 30fa 	strh.w	r3, [r4, #250]	; 0xfa
    cmd[0] = 0xA1; // read dig_H regs
 8001876:	23a1      	movs	r3, #161	; 0xa1
 8001878:	f88d 3004 	strb.w	r3, [sp, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800187c:	f7ff fecf 	bl	800161e <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001880:	a901      	add	r1, sp, #4
 8001882:	2201      	movs	r2, #1
 8001884:	20ec      	movs	r0, #236	; 0xec
 8001886:	f7ff fd47 	bl	8001318 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    cmd[1] = 0xE1; // read dig_H regs
 800188a:	23e1      	movs	r3, #225	; 0xe1

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 800188c:	f10d 0105 	add.w	r1, sp, #5
 8001890:	2201      	movs	r2, #1
 8001892:	20ec      	movs	r0, #236	; 0xec
    cmd[1] = 0xE1; // read dig_H regs
 8001894:	f88d 3005 	strb.w	r3, [sp, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8001898:	f7ff fec1 	bl	800161e <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 800189c:	f10d 0105 	add.w	r1, sp, #5
 80018a0:	2207      	movs	r2, #7
 80018a2:	20ec      	movs	r0, #236	; 0xec
 80018a4:	f7ff fd38 	bl	8001318 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_H1 = cmd[0];
 80018a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    dig_H2 = (cmd[2] << 8) | cmd[1];
    dig_H3 = cmd[3];
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80018ac:	f89d 1008 	ldrb.w	r1, [sp, #8]
    dig_H1 = cmd[0];
 80018b0:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80018b4:	f8bd 3005 	ldrh.w	r3, [sp, #5]
 80018b8:	f8a4 30fe 	strh.w	r3, [r4, #254]	; 0xfe
    dig_H3 = cmd[3];
 80018bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80018c0:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80018c4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80018c8:	f003 020f 	and.w	r2, r3, #15
 80018cc:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80018d0:	f8a4 2102 	strh.w	r2, [r4, #258]	; 0x102
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80018d4:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80018d8:	091b      	lsrs	r3, r3, #4
 80018da:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80018de:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
    dig_H6 = cmd[7];
 80018e2:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80018e6:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
}
 80018ea:	b006      	add	sp, #24
 80018ec:	bd10      	pop	{r4, pc}
 80018ee:	bf00      	nop
 80018f0:	20000208 	.word	0x20000208

080018f4 <DS3231_Update>:
uint8_t bcdToDec(uint8_t val) {
    return ((val / 16 * 10) + (val % 16));
}

void DS3231_Update(void) {
    uint8_t cmd = 0;
 80018f4:	2300      	movs	r3, #0
void DS3231_Update(void) {
 80018f6:	b513      	push	{r0, r1, r4, lr}
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 80018f8:	4c28      	ldr	r4, [pc, #160]	; (800199c <DS3231_Update+0xa8>)
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 80018fa:	f10d 0107 	add.w	r1, sp, #7
 80018fe:	2201      	movs	r2, #1
 8001900:	20d0      	movs	r0, #208	; 0xd0
    uint8_t cmd = 0;
 8001902:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8001906:	f7ff fe8a 	bl	800161e <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 800190a:	2213      	movs	r2, #19
 800190c:	20d0      	movs	r0, #208	; 0xd0
 800190e:	f504 7184 	add.w	r1, r4, #264	; 0x108
 8001912:	f7ff fd01 	bl	8001318 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    rtcBufferSet[1] = rtcBuffer[0];
 8001916:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
 800191a:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
    rtcBufferSet[2] = rtcBuffer[1];
 800191e:	f894 3109 	ldrb.w	r3, [r4, #265]	; 0x109
 8001922:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
    rtcBufferSet[3] = rtcBuffer[2];
 8001926:	f894 310a 	ldrb.w	r3, [r4, #266]	; 0x10a
 800192a:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
    rtcBufferSet[4] = rtcBuffer[3];
 800192e:	f894 310b 	ldrb.w	r3, [r4, #267]	; 0x10b
 8001932:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
    rtcBufferSet[5] = rtcBuffer[4];
 8001936:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 800193a:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
    rtcBufferSet[6] = rtcBuffer[5];
 800193e:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8001942:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
    rtcBufferSet[7] = rtcBuffer[6];
 8001946:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
 800194a:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
    rtcBufferSet[8] = rtcBuffer[7];
 800194e:	f894 310f 	ldrb.w	r3, [r4, #271]	; 0x10f
 8001952:	f884 3123 	strb.w	r3, [r4, #291]	; 0x123
    rtcBufferSet[9] = rtcBuffer[8];
 8001956:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 800195a:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
    rtcBufferSet[10] = rtcBuffer[9];
 800195e:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
 8001962:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
    rtcBufferSet[11] = rtcBuffer[10];
 8001966:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
 800196a:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
    rtcBufferSet[12] = rtcBuffer[11];
 800196e:	f894 3113 	ldrb.w	r3, [r4, #275]	; 0x113
 8001972:	f884 3127 	strb.w	r3, [r4, #295]	; 0x127
    rtcBufferSet[13] = rtcBuffer[12];
 8001976:	f894 3114 	ldrb.w	r3, [r4, #276]	; 0x114
 800197a:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    rtcBufferSet[14] = rtcBuffer[13];
 800197e:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
 8001982:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
    rtcBufferSet[15] = rtcBuffer[14];
 8001986:	f894 3116 	ldrb.w	r3, [r4, #278]	; 0x116
 800198a:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
    rtcBufferSet[16] = rtcBuffer[15];
 800198e:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
 8001992:	f884 312b 	strb.w	r3, [r4, #299]	; 0x12b
}
 8001996:	b002      	add	sp, #8
 8001998:	bd10      	pop	{r4, pc}
 800199a:	bf00      	nop
 800199c:	20000208 	.word	0x20000208

080019a0 <HAL_DMA_Start_IT.isra.0>:
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
 80019a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80019a2:	f890 4020 	ldrb.w	r4, [r0, #32]
 80019a6:	2c01      	cmp	r4, #1
 80019a8:	d027      	beq.n	80019fa <HAL_DMA_Start_IT.isra.0+0x5a>
 80019aa:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80019ac:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80019b0:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80019b4:	42a5      	cmp	r5, r4
 80019b6:	f04f 0400 	mov.w	r4, #0
 80019ba:	d127      	bne.n	8001a0c <HAL_DMA_Start_IT.isra.0+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80019bc:	2602      	movs	r6, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019be:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80019c0:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80019c2:	f880 6021 	strb.w	r6, [r0, #33]	; 0x21
    __HAL_DMA_DISABLE(hdma);
 80019c6:	6826      	ldr	r6, [r4, #0]
 80019c8:	f026 0601 	bic.w	r6, r6, #1
 80019cc:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019ce:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 80019d2:	40bd      	lsls	r5, r7
 80019d4:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019d6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019d8:	6843      	ldr	r3, [r0, #4]
 80019da:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80019dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019de:	bf0b      	itete	eq
 80019e0:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80019e2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80019e4:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80019e6:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80019e8:	b143      	cbz	r3, 80019fc <HAL_DMA_Start_IT.isra.0+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ea:	6823      	ldr	r3, [r4, #0]
 80019ec:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019f0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80019f2:	6823      	ldr	r3, [r4, #0]
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6023      	str	r3, [r4, #0]
}
 80019fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	f023 0304 	bic.w	r3, r3, #4
 8001a02:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a04:	6823      	ldr	r3, [r4, #0]
 8001a06:	f043 030a 	orr.w	r3, r3, #10
 8001a0a:	e7f1      	b.n	80019f0 <HAL_DMA_Start_IT.isra.0+0x50>
    __HAL_UNLOCK(hdma); 
 8001a0c:	f880 4020 	strb.w	r4, [r0, #32]
 8001a10:	e7f3      	b.n	80019fa <HAL_DMA_Start_IT.isra.0+0x5a>

08001a12 <UART_Start_Receive_DMA.constprop.0.isra.0>:
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 8001a12:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->pRxBuffPtr = pData;
 8001a14:	4c18      	ldr	r4, [pc, #96]	; (8001a78 <UART_Start_Receive_DMA.constprop.0.isra.0+0x66>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a16:	2500      	movs	r5, #0
  huart->RxXferSize = Size;
 8001a18:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 8001a1c:	460b      	mov	r3, r1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a1e:	2122      	movs	r1, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a20:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
  huart->pRxBuffPtr = pData;
 8001a24:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a28:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 8001a2c:	4602      	mov	r2, r0
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001a2e:	4913      	ldr	r1, [pc, #76]	; (8001a7c <UART_Start_Receive_DMA.constprop.0.isra.0+0x6a>)
 8001a30:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8001a34:	6281      	str	r1, [r0, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001a36:	4912      	ldr	r1, [pc, #72]	; (8001a80 <UART_Start_Receive_DMA.constprop.0.isra.0+0x6e>)
 8001a38:	62c1      	str	r1, [r0, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001a3a:	4912      	ldr	r1, [pc, #72]	; (8001a84 <UART_Start_Receive_DMA.constprop.0.isra.0+0x72>)
  huart->hdmarx->XferAbortCallback = NULL;
 8001a3c:	e9c0 150c 	strd	r1, r5, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001a40:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001a42:	3104      	adds	r1, #4
 8001a44:	f7ff ffac 	bl	80019a0 <HAL_DMA_Start_IT.isra.0>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8001a48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001a4a:	9501      	str	r5, [sp, #4]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	9201      	str	r2, [sp, #4]
 8001a50:	685a      	ldr	r2, [r3, #4]
  __HAL_UNLOCK(huart);
 8001a52:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
  __HAL_UART_CLEAR_OREFLAG(huart);
 8001a56:	9201      	str	r2, [sp, #4]
 8001a58:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a60:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a62:	695a      	ldr	r2, [r3, #20]
 8001a64:	f042 0201 	orr.w	r2, r2, #1
 8001a68:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a6a:	695a      	ldr	r2, [r3, #20]
 8001a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a70:	615a      	str	r2, [r3, #20]
}
 8001a72:	b003      	add	sp, #12
 8001a74:	bd30      	pop	{r4, r5, pc}
 8001a76:	bf00      	nop
 8001a78:	20000208 	.word	0x20000208
 8001a7c:	08001a89 	.word	0x08001a89
 8001a80:	08000775 	.word	0x08000775
 8001a84:	0800077b 	.word	0x0800077b

08001a88 <UART_DMAReceiveCplt>:
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a88:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a8a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f013 0320 	ands.w	r3, r3, #32
 8001a92:	d117      	bne.n	8001ac4 <UART_DMAReceiveCplt+0x3c>
    huart->RxXferCount = 0U;
 8001a94:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001a96:	6813      	ldr	r3, [r2, #0]
 8001a98:	68d9      	ldr	r1, [r3, #12]
 8001a9a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001a9e:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001aa0:	6959      	ldr	r1, [r3, #20]
 8001aa2:	f021 0101 	bic.w	r1, r1, #1
 8001aa6:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001aa8:	6959      	ldr	r1, [r3, #20]
 8001aaa:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001aae:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8001ab0:	2120      	movs	r1, #32
 8001ab2:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ab6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001ab8:	2901      	cmp	r1, #1
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001aba:	bf02      	ittt	eq
 8001abc:	68d9      	ldreq	r1, [r3, #12]
 8001abe:	f021 0110 	biceq.w	r1, r1, #16
 8001ac2:	60d9      	streq	r1, [r3, #12]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ac4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d01f      	beq.n	8001b0a <UART_DMAReceiveCplt+0x82>
uint8_t rx_buffer[UART_BUFFER_SIZE];
uint8_t rx_index = 0;
uint8_t rx_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart->Instance == USART1) {
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <UART_DMAReceiveCplt+0x84>)
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d11b      	bne.n	8001b0a <UART_DMAReceiveCplt+0x82>
		rx_buffer[rx_index++] = rx_data;
 8001ad2:	480f      	ldr	r0, [pc, #60]	; (8001b10 <UART_DMAReceiveCplt+0x88>)
 8001ad4:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	f880 212c 	strb.w	r2, [r0, #300]	; 0x12c
 8001ade:	f890 213d 	ldrb.w	r2, [r0, #317]	; 0x13d
 8001ae2:	4403      	add	r3, r0
 8001ae4:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ae8:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
 8001aec:	2b20      	cmp	r3, #32
 8001aee:	d10c      	bne.n	8001b0a <UART_DMAReceiveCplt+0x82>
    __HAL_LOCK(huart);
 8001af0:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d008      	beq.n	8001b0a <UART_DMAReceiveCplt+0x82>
 8001af8:	2101      	movs	r1, #1
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001afa:	2300      	movs	r3, #0
    __HAL_LOCK(huart);
 8001afc:	f880 1094 	strb.w	r1, [r0, #148]	; 0x94
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b00:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return(UART_Start_Receive_DMA(huart, pData, Size));
 8001b04:	f200 103d 	addw	r0, r0, #317	; 0x13d
 8001b08:	e783      	b.n	8001a12 <UART_Start_Receive_DMA.constprop.0.isra.0>
}
 8001b0a:	4770      	bx	lr
 8001b0c:	40013800 	.word	0x40013800
 8001b10:	20000208 	.word	0x20000208

08001b14 <HAL_InitTick.isra.0>:
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 8001b18:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b1a:	4c0f      	ldr	r4, [pc, #60]	; (8001b58 <HAL_InitTick.isra.0+0x44>)
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 8001b1c:	4601      	mov	r1, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b24:	3b01      	subs	r3, #1
 8001b26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b2a:	d213      	bcs.n	8001b54 <HAL_InitTick.isra.0+0x40>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b30:	20f0      	movs	r0, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b32:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_InitTick.isra.0+0x48>)
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b36:	290f      	cmp	r1, #15
 8001b38:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b42:	f04f 0307 	mov.w	r3, #7
 8001b46:	6113      	str	r3, [r2, #16]
 8001b48:	d804      	bhi.n	8001b54 <HAL_InitTick.isra.0+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4e:	f7fe ffa1 	bl	8000a94 <HAL_NVIC_SetPriority.constprop.0>
    uwTickPrio = TickPriority;
 8001b52:	6061      	str	r1, [r4, #4]
}
 8001b54:	bd10      	pop	{r4, pc}
 8001b56:	bf00      	nop
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <LCD_Font.constprop.0>:
			set_pixels = 0;
		}
	}
}

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8001b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	int16_t cursor_x = x;
	int16_t cursor_y = y;
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001b64:	f04f 0a00 	mov.w	sl, #0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8001b68:	b08f      	sub	sp, #60	; 0x3c
 8001b6a:	4693      	mov	fp, r2
	int16_t cursor_x = x;
 8001b6c:	b202      	sxth	r2, r0
 8001b6e:	9203      	str	r2, [sp, #12]
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001b70:	681a      	ldr	r2, [r3, #0]
	int16_t cursor_x = x;
 8001b72:	9f03      	ldr	r7, [sp, #12]
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001b74:	9207      	str	r2, [sp, #28]
 8001b76:	685a      	ldr	r2, [r3, #4]
	int16_t cursor_y = y;
 8001b78:	b20c      	sxth	r4, r1
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001b7a:	9205      	str	r2, [sp, #20]
 8001b7c:	7a1a      	ldrb	r2, [r3, #8]
 8001b7e:	9206      	str	r2, [sp, #24]
 8001b80:	7a5a      	ldrb	r2, [r3, #9]
 8001b82:	7a9b      	ldrb	r3, [r3, #10]
 8001b84:	9209      	str	r2, [sp, #36]	; 0x24
 8001b86:	9308      	str	r3, [sp, #32]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001b88:	4658      	mov	r0, fp
 8001b8a:	f000 fdbf 	bl	800270c <strlen>
 8001b8e:	fa1f f58a 	uxth.w	r5, sl
 8001b92:	42a8      	cmp	r0, r5
 8001b94:	d802      	bhi.n	8001b9c <LCD_Font.constprop.0+0x3c>
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
			cursor_x += glyph.xAdvance * size;
		}
	}
}
 8001b96:	b00f      	add	sp, #60	; 0x3c
 8001b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		char c = text[text_pos];
 8001b9c:	f81b 3005 	ldrb.w	r3, [fp, r5]
		if(c == '\n')
 8001ba0:	2b0a      	cmp	r3, #10
 8001ba2:	d106      	bne.n	8001bb2 <LCD_Font.constprop.0+0x52>
			cursor_y += font.yAdvance * size;
 8001ba4:	9b08      	ldr	r3, [sp, #32]
			cursor_x = x;
 8001ba6:	9f03      	ldr	r7, [sp, #12]
			cursor_y += font.yAdvance * size;
 8001ba8:	441c      	add	r4, r3
 8001baa:	b224      	sxth	r4, r4
 8001bac:	f10a 0a01 	add.w	sl, sl, #1
 8001bb0:	e7ea      	b.n	8001b88 <LCD_Font.constprop.0+0x28>
		else if(c >= font.first && c <= font.last && c != '\r')
 8001bb2:	9a06      	ldr	r2, [sp, #24]
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d3f9      	bcc.n	8001bac <LCD_Font.constprop.0+0x4c>
 8001bb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d8f6      	bhi.n	8001bac <LCD_Font.constprop.0+0x4c>
 8001bbe:	2b0d      	cmp	r3, #13
 8001bc0:	d0f4      	beq.n	8001bac <LCD_Font.constprop.0+0x4c>
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001bc2:	2500      	movs	r5, #0
	uint8_t bits = 0, bit = 0;
 8001bc4:	462e      	mov	r6, r5
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8001bc6:	9a06      	ldr	r2, [sp, #24]
 8001bc8:	9805      	ldr	r0, [sp, #20]
 8001bca:	1a9b      	subs	r3, r3, r2
 8001bcc:	9a05      	ldr	r2, [sp, #20]
 8001bce:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 8001bd2:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8001bd6:	6849      	ldr	r1, [r1, #4]
 8001bd8:	aa0c      	add	r2, sp, #48	; 0x30
 8001bda:	c203      	stmia	r2!, {r0, r1}
	uint16_t bo = glyph -> bitmapOffset;
 8001bdc:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
	uint8_t bits = 0, bit = 0;
 8001be0:	9504      	str	r5, [sp, #16]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001be2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8001be6:	b2ea      	uxtb	r2, r5
 8001be8:	4293      	cmp	r3, r2
 8001bea:	920b      	str	r2, [sp, #44]	; 0x2c
 8001bec:	d848      	bhi.n	8001c80 <LCD_Font.constprop.0+0x120>
			cursor_x += glyph.xAdvance * size;
 8001bee:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8001bf2:	441f      	add	r7, r3
 8001bf4:	b23f      	sxth	r7, r7
 8001bf6:	e7d9      	b.n	8001bac <LCD_Font.constprop.0+0x4c>
			if(bit == 0)
 8001bf8:	b946      	cbnz	r6, 8001c0c <LCD_Font.constprop.0+0xac>
				bit  = 0x80;
 8001bfa:	2680      	movs	r6, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8001bfc:	9907      	ldr	r1, [sp, #28]
 8001bfe:	f109 0301 	add.w	r3, r9, #1
 8001c02:	f811 1009 	ldrb.w	r1, [r1, r9]
 8001c06:	fa1f f983 	uxth.w	r9, r3
 8001c0a:	9104      	str	r1, [sp, #16]
			if(bits & bit)
 8001c0c:	9b04      	ldr	r3, [sp, #16]
 8001c0e:	4033      	ands	r3, r6
 8001c10:	930a      	str	r3, [sp, #40]	; 0x28
 8001c12:	d01e      	beq.n	8001c52 <LCD_Font.constprop.0+0xf2>
				set_pixels++;
 8001c14:	3201      	adds	r2, #1
 8001c16:	b292      	uxth	r2, r2
			bit >>= 1;
 8001c18:	0876      	lsrs	r6, r6, #1
 8001c1a:	f108 0801 	add.w	r8, r8, #1
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001c1e:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8001c22:	fa5f f388 	uxtb.w	r3, r8
 8001c26:	4299      	cmp	r1, r3
 8001c28:	d8e6      	bhi.n	8001bf8 <LCD_Font.constprop.0+0x98>
		if (set_pixels > 0)
 8001c2a:	b182      	cbz	r2, 8001c4e <LCD_Font.constprop.0+0xee>
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001c2c:	f99d 1036 	ldrsb.w	r1, [sp, #54]	; 0x36
 8001c30:	b2e8      	uxtb	r0, r5
 8001c32:	4401      	add	r1, r0
 8001c34:	f99d 0035 	ldrsb.w	r0, [sp, #53]	; 0x35
 8001c38:	4421      	add	r1, r4
 8001c3a:	4418      	add	r0, r3
 8001c3c:	1a80      	subs	r0, r0, r2
 8001c3e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001c40:	4438      	add	r0, r7
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	b289      	uxth	r1, r1
 8001c46:	2301      	movs	r3, #1
 8001c48:	b280      	uxth	r0, r0
 8001c4a:	f7fe fb15 	bl	8000278 <LCD_Rect_Fill>
 8001c4e:	3501      	adds	r5, #1
 8001c50:	e7c7      	b.n	8001be2 <LCD_Font.constprop.0+0x82>
			else if (set_pixels > 0)
 8001c52:	2a00      	cmp	r2, #0
 8001c54:	d0e0      	beq.n	8001c18 <LCD_Font.constprop.0+0xb8>
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001c56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001c58:	f99d 1036 	ldrsb.w	r1, [sp, #54]	; 0x36
 8001c5c:	f99d 0035 	ldrsb.w	r0, [sp, #53]	; 0x35
 8001c60:	4419      	add	r1, r3
 8001c62:	fa5f f388 	uxtb.w	r3, r8
 8001c66:	4418      	add	r0, r3
 8001c68:	1a80      	subs	r0, r0, r2
 8001c6a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001c6c:	4421      	add	r1, r4
 8001c6e:	4438      	add	r0, r7
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	b289      	uxth	r1, r1
 8001c74:	2301      	movs	r3, #1
 8001c76:	b280      	uxth	r0, r0
 8001c78:	f7fe fafe 	bl	8000278 <LCD_Rect_Fill>
				set_pixels = 0;
 8001c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001c7e:	e7cb      	b.n	8001c18 <LCD_Font.constprop.0+0xb8>
 8001c80:	f04f 0800 	mov.w	r8, #0
 8001c84:	4642      	mov	r2, r8
 8001c86:	e7ca      	b.n	8001c1e <LCD_Font.constprop.0+0xbe>

08001c88 <round_nth.constprop.0>:
float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
 8001c88:	b508      	push	{r3, lr}
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8001c8a:	f000 feab 	bl	80029e4 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8001c8e:	a30a      	add	r3, pc, #40	; (adr r3, 8001cb8 <round_nth.constprop.0+0x30>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f001 f828 	bl	8002ce8 <__aeabi_ddiv>
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <round_nth.constprop.0+0x38>)
 8001c9c:	f000 fd44 	bl	8002728 <__adddf3>
 8001ca0:	f008 fa9e 	bl	800a1e0 <floor>
 8001ca4:	a304      	add	r3, pc, #16	; (adr r3, 8001cb8 <round_nth.constprop.0+0x30>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	f000 fef3 	bl	8002a94 <__aeabi_dmul>
 8001cae:	f001 f9e9 	bl	8003084 <__aeabi_d2f>
}                                                                                        // round_nth(1.235, -2) = 1.24
 8001cb2:	bd08      	pop	{r3, pc}
 8001cb4:	f3af 8000 	nop.w
 8001cb8:	9999999a 	.word	0x9999999a
 8001cbc:	3fb99999 	.word	0x3fb99999
 8001cc0:	3fe00000 	.word	0x3fe00000

08001cc4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <NMI_Handler>

08001cc6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <HardFault_Handler>

08001cc8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <MemManage_Handler>

08001cca <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <BusFault_Handler>

08001ccc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <UsageFault_Handler>

08001cce <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cce:	4770      	bx	lr

08001cd0 <DebugMon_Handler>:
 8001cd0:	4770      	bx	lr

08001cd2 <PendSV_Handler>:
 8001cd2:	4770      	bx	lr

08001cd4 <SysTick_Handler>:
  uwTick += uwTickFreq;
 8001cd4:	4a02      	ldr	r2, [pc, #8]	; (8001ce0 <SysTick_Handler+0xc>)
 8001cd6:	6813      	ldr	r3, [r2, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000208 	.word	0x20000208

08001ce4 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001ce4:	4801      	ldr	r0, [pc, #4]	; (8001cec <DMA1_Channel2_IRQHandler+0x8>)
 8001ce6:	f7fe bb6b 	b.w	80003c0 <HAL_DMA_IRQHandler>
 8001cea:	bf00      	nop
 8001cec:	20000458 	.word	0x20000458

08001cf0 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001cf0:	4801      	ldr	r0, [pc, #4]	; (8001cf8 <DMA1_Channel4_IRQHandler+0x8>)
 8001cf2:	f7fe bb65 	b.w	80003c0 <HAL_DMA_IRQHandler>
 8001cf6:	bf00      	nop
 8001cf8:	200003d0 	.word	0x200003d0

08001cfc <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001cfc:	4801      	ldr	r0, [pc, #4]	; (8001d04 <DMA1_Channel5_IRQHandler+0x8>)
 8001cfe:	f7fe bb5f 	b.w	80003c0 <HAL_DMA_IRQHandler>
 8001d02:	bf00      	nop
 8001d04:	20000414 	.word	0x20000414

08001d08 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001d08:	4801      	ldr	r0, [pc, #4]	; (8001d10 <DMA1_Channel6_IRQHandler+0x8>)
 8001d0a:	f7fe bb59 	b.w	80003c0 <HAL_DMA_IRQHandler>
 8001d0e:	bf00      	nop
 8001d10:	20000348 	.word	0x20000348

08001d14 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001d14:	4801      	ldr	r0, [pc, #4]	; (8001d1c <DMA1_Channel7_IRQHandler+0x8>)
 8001d16:	f7fe bb53 	b.w	80003c0 <HAL_DMA_IRQHandler>
 8001d1a:	bf00      	nop
 8001d1c:	2000038c 	.word	0x2000038c

08001d20 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d20:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001d22:	4c7f      	ldr	r4, [pc, #508]	; (8001f20 <I2C1_EV_IRQHandler+0x200>)
 8001d24:	b08f      	sub	sp, #60	; 0x3c
 8001d26:	6863      	ldr	r3, [r4, #4]
 8001d28:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d2a:	6b26      	ldr	r6, [r4, #48]	; 0x30
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d2c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d30:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001d34:	2810      	cmp	r0, #16
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d36:	b2c5      	uxtb	r5, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d38:	b2c9      	uxtb	r1, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001d3a:	d002      	beq.n	8001d42 <I2C1_EV_IRQHandler+0x22>
 8001d3c:	2d40      	cmp	r5, #64	; 0x40
 8001d3e:	f040 82bc 	bne.w	80022ba <I2C1_EV_IRQHandler+0x59a>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d42:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d44:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001d46:	f010 0f01 	tst.w	r0, #1
 8001d4a:	d107      	bne.n	8001d5c <I2C1_EV_IRQHandler+0x3c>
 8001d4c:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8001d50:	d002      	beq.n	8001d58 <I2C1_EV_IRQHandler+0x38>
 8001d52:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8001d56:	d151      	bne.n	8001dfc <I2C1_EV_IRQHandler+0xdc>
  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d58:	b00f      	add	sp, #60	; 0x3c
 8001d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d5c:	0596      	lsls	r6, r2, #22
 8001d5e:	d54d      	bpl.n	8001dfc <I2C1_EV_IRQHandler+0xdc>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8001d60:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d62:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8001d66:	d10c      	bne.n	8001d82 <I2C1_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8001d68:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8001d6a:	6322      	str	r2, [r4, #48]	; 0x30
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d6c:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8001d70:	2a40      	cmp	r2, #64	; 0x40
 8001d72:	d111      	bne.n	8001d98 <I2C1_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8001d74:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001d76:	b952      	cbnz	r2, 8001d8e <I2C1_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001d78:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001d7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001d7e:	611a      	str	r2, [r3, #16]
 8001d80:	e7ea      	b.n	8001d58 <I2C1_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8001d82:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d84:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 8001d88:	d1f0      	bne.n	8001d6c <I2C1_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	e7ed      	b.n	8001d6a <I2C1_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001d8e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001d90:	f042 0201 	orr.w	r2, r2, #1
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	e7f2      	b.n	8001d7e <I2C1_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d98:	6962      	ldr	r2, [r4, #20]
 8001d9a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001d9e:	d11a      	bne.n	8001dd6 <I2C1_EV_IRQHandler+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001da0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8001da4:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001da6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001da8:	d111      	bne.n	8001dce <I2C1_EV_IRQHandler+0xae>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001daa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001dae:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001db0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001db2:	b10a      	cbz	r2, 8001db8 <I2C1_EV_IRQHandler+0x98>
 8001db4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001db6:	b92a      	cbnz	r2, 8001dc4 <I2C1_EV_IRQHandler+0xa4>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001db8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001dba:	2a00      	cmp	r2, #0
 8001dbc:	d0cc      	beq.n	8001d58 <I2C1_EV_IRQHandler+0x38>
 8001dbe:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001dc0:	2a00      	cmp	r2, #0
 8001dc2:	d0c9      	beq.n	8001d58 <I2C1_EV_IRQHandler+0x38>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	e7c4      	b.n	8001d58 <I2C1_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	e7eb      	b.n	8001dae <I2C1_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 8001dd6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001dd8:	b932      	cbnz	r2, 8001de8 <I2C1_EV_IRQHandler+0xc8>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001dda:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001ddc:	11d2      	asrs	r2, r2, #7
 8001dde:	f002 0206 	and.w	r2, r2, #6
 8001de2:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8001de6:	e7ca      	b.n	8001d7e <I2C1_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8001de8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001dea:	2a01      	cmp	r2, #1
 8001dec:	d1b4      	bne.n	8001d58 <I2C1_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001dee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001df0:	11d2      	asrs	r2, r2, #7
 8001df2:	f002 0206 	and.w	r2, r2, #6
 8001df6:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8001dfa:	e7c0      	b.n	8001d7e <I2C1_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dfc:	0706      	lsls	r6, r0, #28
 8001dfe:	d503      	bpl.n	8001e08 <I2C1_EV_IRQHandler+0xe8>
 8001e00:	0596      	lsls	r6, r2, #22
 8001e02:	d501      	bpl.n	8001e08 <I2C1_EV_IRQHandler+0xe8>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001e04:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001e06:	e7e4      	b.n	8001dd2 <I2C1_EV_IRQHandler+0xb2>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e08:	0786      	lsls	r6, r0, #30
 8001e0a:	f140 80eb 	bpl.w	8001fe4 <I2C1_EV_IRQHandler+0x2c4>
 8001e0e:	0596      	lsls	r6, r2, #22
 8001e10:	f140 80e8 	bpl.w	8001fe4 <I2C1_EV_IRQHandler+0x2c4>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001e14:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001e18:	6b22      	ldr	r2, [r4, #48]	; 0x30
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001e1a:	6b65      	ldr	r5, [r4, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e1c:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001e20:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e22:	2822      	cmp	r0, #34	; 0x22
 8001e24:	f040 80d6 	bne.w	8001fd4 <I2C1_EV_IRQHandler+0x2b4>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001e28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e2a:	b940      	cbnz	r0, 8001e3e <I2C1_EV_IRQHandler+0x11e>
 8001e2c:	2940      	cmp	r1, #64	; 0x40
 8001e2e:	d106      	bne.n	8001e3e <I2C1_EV_IRQHandler+0x11e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e30:	900a      	str	r0, [sp, #40]	; 0x28
 8001e32:	695a      	ldr	r2, [r3, #20]
 8001e34:	920a      	str	r2, [sp, #40]	; 0x28
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	930a      	str	r3, [sp, #40]	; 0x28
 8001e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e3c:	e78c      	b.n	8001d58 <I2C1_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001e3e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001e40:	b989      	cbnz	r1, 8001e66 <I2C1_EV_IRQHandler+0x146>
 8001e42:	6960      	ldr	r0, [r4, #20]
 8001e44:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8001e48:	d10d      	bne.n	8001e66 <I2C1_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e4a:	9109      	str	r1, [sp, #36]	; 0x24
 8001e4c:	695a      	ldr	r2, [r3, #20]
 8001e4e:	9209      	str	r2, [sp, #36]	; 0x24
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	9209      	str	r2, [sp, #36]	; 0x24
 8001e54:	9a09      	ldr	r2, [sp, #36]	; 0x24
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e5c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001e5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e60:	3301      	adds	r3, #1
      hi2c->EventCount = 0U;
 8001e62:	6563      	str	r3, [r4, #84]	; 0x54
 8001e64:	e778      	b.n	8001d58 <I2C1_EV_IRQHandler+0x38>
      if (hi2c->XferCount == 0U)
 8001e66:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8001e68:	b289      	uxth	r1, r1
 8001e6a:	b951      	cbnz	r1, 8001e82 <I2C1_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e6c:	9108      	str	r1, [sp, #32]
 8001e6e:	695a      	ldr	r2, [r3, #20]
 8001e70:	9208      	str	r2, [sp, #32]
 8001e72:	699a      	ldr	r2, [r3, #24]
 8001e74:	9208      	str	r2, [sp, #32]
 8001e76:	9a08      	ldr	r2, [sp, #32]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e019      	b.n	8001eb6 <I2C1_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 8001e82:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8001e84:	b289      	uxth	r1, r1
 8001e86:	2901      	cmp	r1, #1
 8001e88:	d14e      	bne.n	8001f28 <I2C1_EV_IRQHandler+0x208>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001e8a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001e8e:	d11b      	bne.n	8001ec8 <I2C1_EV_IRQHandler+0x1a8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e96:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001e9e:	d00c      	beq.n	8001eba <I2C1_EV_IRQHandler+0x19a>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ea6:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	9207      	str	r2, [sp, #28]
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	9207      	str	r2, [sp, #28]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	9307      	str	r3, [sp, #28]
 8001eb4:	9b07      	ldr	r3, [sp, #28]
      hi2c->EventCount = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e7d3      	b.n	8001e62 <I2C1_EV_IRQHandler+0x142>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eba:	9206      	str	r2, [sp, #24]
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	9206      	str	r2, [sp, #24]
 8001ec0:	699a      	ldr	r2, [r3, #24]
 8001ec2:	9206      	str	r2, [sp, #24]
 8001ec4:	9a06      	ldr	r2, [sp, #24]
 8001ec6:	e7d7      	b.n	8001e78 <I2C1_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001ec8:	2a08      	cmp	r2, #8
 8001eca:	d01c      	beq.n	8001f06 <I2C1_EV_IRQHandler+0x1e6>
 8001ecc:	2a20      	cmp	r2, #32
 8001ece:	d01a      	beq.n	8001f06 <I2C1_EV_IRQHandler+0x1e6>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001ed0:	2d12      	cmp	r5, #18
 8001ed2:	d10d      	bne.n	8001ef0 <I2C1_EV_IRQHandler+0x1d0>
 8001ed4:	2a01      	cmp	r2, #1
 8001ed6:	d116      	bne.n	8001f06 <I2C1_EV_IRQHandler+0x1e6>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ede:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	9205      	str	r2, [sp, #20]
 8001ee4:	695a      	ldr	r2, [r3, #20]
 8001ee6:	9205      	str	r2, [sp, #20]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	9305      	str	r3, [sp, #20]
 8001eec:	9b05      	ldr	r3, [sp, #20]
 8001eee:	e7e2      	b.n	8001eb6 <I2C1_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001ef0:	2a10      	cmp	r2, #16
 8001ef2:	d8f1      	bhi.n	8001ed8 <I2C1_EV_IRQHandler+0x1b8>
 8001ef4:	490b      	ldr	r1, [pc, #44]	; (8001f24 <I2C1_EV_IRQHandler+0x204>)
 8001ef6:	fa21 f202 	lsr.w	r2, r1, r2
 8001efa:	07d6      	lsls	r6, r2, #31
 8001efc:	d5ec      	bpl.n	8001ed8 <I2C1_EV_IRQHandler+0x1b8>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f04:	e7eb      	b.n	8001ede <I2C1_EV_IRQHandler+0x1be>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f0c:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	9204      	str	r2, [sp, #16]
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	9204      	str	r2, [sp, #16]
 8001f16:	699a      	ldr	r2, [r3, #24]
 8001f18:	9204      	str	r2, [sp, #16]
 8001f1a:	9a04      	ldr	r2, [sp, #16]
 8001f1c:	e7ac      	b.n	8001e78 <I2C1_EV_IRQHandler+0x158>
 8001f1e:	bf00      	nop
 8001f20:	20000208 	.word	0x20000208
 8001f24:	00010014 	.word	0x00010014
      else if (hi2c->XferCount == 2U)
 8001f28:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8001f2a:	b289      	uxth	r1, r1
 8001f2c:	2902      	cmp	r1, #2
 8001f2e:	d133      	bne.n	8001f98 <I2C1_EV_IRQHandler+0x278>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001f30:	2a10      	cmp	r2, #16
 8001f32:	d805      	bhi.n	8001f40 <I2C1_EV_IRQHandler+0x220>
 8001f34:	4984      	ldr	r1, [pc, #528]	; (8002148 <I2C1_EV_IRQHandler+0x428>)
 8001f36:	40d1      	lsrs	r1, r2
 8001f38:	43c9      	mvns	r1, r1
 8001f3a:	f011 0101 	ands.w	r1, r1, #1
 8001f3e:	d020      	beq.n	8001f82 <I2C1_EV_IRQHandler+0x262>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f40:	6819      	ldr	r1, [r3, #0]
 8001f42:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001f46:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f48:	2100      	movs	r1, #0
 8001f4a:	9103      	str	r1, [sp, #12]
 8001f4c:	6959      	ldr	r1, [r3, #20]
 8001f4e:	9103      	str	r1, [sp, #12]
 8001f50:	6999      	ldr	r1, [r3, #24]
 8001f52:	9103      	str	r1, [sp, #12]
 8001f54:	9903      	ldr	r1, [sp, #12]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f56:	6819      	ldr	r1, [r3, #0]
 8001f58:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001f5c:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001f5e:	6859      	ldr	r1, [r3, #4]
 8001f60:	050d      	lsls	r5, r1, #20
 8001f62:	d5a8      	bpl.n	8001eb6 <I2C1_EV_IRQHandler+0x196>
 8001f64:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001f68:	d006      	beq.n	8001f78 <I2C1_EV_IRQHandler+0x258>
 8001f6a:	1e51      	subs	r1, r2, #1
 8001f6c:	291f      	cmp	r1, #31
 8001f6e:	d8a2      	bhi.n	8001eb6 <I2C1_EV_IRQHandler+0x196>
 8001f70:	4a76      	ldr	r2, [pc, #472]	; (800214c <I2C1_EV_IRQHandler+0x42c>)
 8001f72:	40ca      	lsrs	r2, r1
 8001f74:	07d0      	lsls	r0, r2, #31
 8001f76:	d59e      	bpl.n	8001eb6 <I2C1_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	e799      	b.n	8001eb6 <I2C1_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8001f88:	6018      	str	r0, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f8a:	9102      	str	r1, [sp, #8]
 8001f8c:	6959      	ldr	r1, [r3, #20]
 8001f8e:	9102      	str	r1, [sp, #8]
 8001f90:	6999      	ldr	r1, [r3, #24]
 8001f92:	9102      	str	r1, [sp, #8]
 8001f94:	9902      	ldr	r1, [sp, #8]
 8001f96:	e7e2      	b.n	8001f5e <I2C1_EV_IRQHandler+0x23e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f98:	6819      	ldr	r1, [r3, #0]
 8001f9a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001f9e:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001fa0:	6859      	ldr	r1, [r3, #4]
 8001fa2:	0509      	lsls	r1, r1, #20
 8001fa4:	d50e      	bpl.n	8001fc4 <I2C1_EV_IRQHandler+0x2a4>
 8001fa6:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001faa:	d007      	beq.n	8001fbc <I2C1_EV_IRQHandler+0x29c>
 8001fac:	3a01      	subs	r2, #1
 8001fae:	2a1f      	cmp	r2, #31
 8001fb0:	d808      	bhi.n	8001fc4 <I2C1_EV_IRQHandler+0x2a4>
 8001fb2:	4966      	ldr	r1, [pc, #408]	; (800214c <I2C1_EV_IRQHandler+0x42c>)
 8001fb4:	fa21 f202 	lsr.w	r2, r1, r2
 8001fb8:	07d2      	lsls	r2, r2, #31
 8001fba:	d503      	bpl.n	8001fc4 <I2C1_EV_IRQHandler+0x2a4>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001fc2:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	9201      	str	r2, [sp, #4]
 8001fc8:	695a      	ldr	r2, [r3, #20]
 8001fca:	9201      	str	r2, [sp, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	9b01      	ldr	r3, [sp, #4]
 8001fd2:	e770      	b.n	8001eb6 <I2C1_EV_IRQHandler+0x196>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	9200      	str	r2, [sp, #0]
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	9200      	str	r2, [sp, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	9b00      	ldr	r3, [sp, #0]
 8001fe2:	e6b9      	b.n	8001d58 <I2C1_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001fe4:	077f      	lsls	r7, r7, #29
 8001fe6:	f140 8084 	bpl.w	80020f2 <I2C1_EV_IRQHandler+0x3d2>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001fea:	685e      	ldr	r6, [r3, #4]
 8001fec:	0536      	lsls	r6, r6, #20
 8001fee:	f53f aeb3 	bmi.w	8001d58 <I2C1_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ff2:	f3c0 0680 	ubfx	r6, r0, #2, #1
 8001ff6:	0600      	lsls	r0, r0, #24
 8001ff8:	d53a      	bpl.n	8002070 <I2C1_EV_IRQHandler+0x350>
 8001ffa:	0557      	lsls	r7, r2, #21
 8001ffc:	d538      	bpl.n	8002070 <I2C1_EV_IRQHandler+0x350>
 8001ffe:	2e00      	cmp	r6, #0
 8002000:	d139      	bne.n	8002076 <I2C1_EV_IRQHandler+0x356>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002002:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002006:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002008:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800200c:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800200e:	6b20      	ldr	r0, [r4, #48]	; 0x30
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002010:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002012:	b9ad      	cbnz	r5, 8002040 <I2C1_EV_IRQHandler+0x320>
 8002014:	2a21      	cmp	r2, #33	; 0x21
 8002016:	d115      	bne.n	8002044 <I2C1_EV_IRQHandler+0x324>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002018:	2808      	cmp	r0, #8
 800201a:	d054      	beq.n	80020c6 <I2C1_EV_IRQHandler+0x3a6>
 800201c:	2820      	cmp	r0, #32
 800201e:	d052      	beq.n	80020c6 <I2C1_EV_IRQHandler+0x3a6>
 8002020:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8002024:	d04f      	beq.n	80020c6 <I2C1_EV_IRQHandler+0x3a6>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800202c:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800202e:	2311      	movs	r3, #17
 8002030:	6363      	str	r3, [r4, #52]	; 0x34
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002032:	2300      	movs	r3, #0
 8002034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        hi2c->State = HAL_I2C_STATE_READY;
 8002038:	2320      	movs	r3, #32
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800203a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800203e:	e68b      	b.n	8001d58 <I2C1_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002040:	2a21      	cmp	r2, #33	; 0x21
 8002042:	d005      	beq.n	8002050 <I2C1_EV_IRQHandler+0x330>
 8002044:	2940      	cmp	r1, #64	; 0x40
 8002046:	f47f ae87 	bne.w	8001d58 <I2C1_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800204a:	2a22      	cmp	r2, #34	; 0x22
 800204c:	f47f ae84 	bne.w	8001d58 <I2C1_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8002050:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8002052:	b292      	uxth	r2, r2
 8002054:	b91a      	cbnz	r2, 800205e <I2C1_EV_IRQHandler+0x33e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800205c:	e6b5      	b.n	8001dca <I2C1_EV_IRQHandler+0xaa>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800205e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8002062:	2a40      	cmp	r2, #64	; 0x40
 8002064:	d115      	bne.n	8002092 <I2C1_EV_IRQHandler+0x372>
 8002066:	b00f      	add	sp, #60	; 0x3c
 8002068:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800206c:	f7fe bbb9 	b.w	80007e2 <I2C_MemoryTransmit_TXE_BTF.constprop.0>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002070:	2e00      	cmp	r6, #0
 8002072:	f43f ae71 	beq.w	8001d58 <I2C1_EV_IRQHandler+0x38>
 8002076:	0596      	lsls	r6, r2, #22
 8002078:	f57f ae6e 	bpl.w	8001d58 <I2C1_EV_IRQHandler+0x38>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800207c:	2921      	cmp	r1, #33	; 0x21
 800207e:	d134      	bne.n	80020ea <I2C1_EV_IRQHandler+0x3ca>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002080:	6b21      	ldr	r1, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002082:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002086:	2a21      	cmp	r2, #33	; 0x21
 8002088:	f47f ae66 	bne.w	8001d58 <I2C1_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 800208c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800208e:	b292      	uxth	r2, r2
 8002090:	b14a      	cbz	r2, 80020a6 <I2C1_EV_IRQHandler+0x386>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002092:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002094:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002098:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 800209a:	62a2      	str	r2, [r4, #40]	; 0x28
    hi2c->XferCount--;
 800209c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800209e:	3b01      	subs	r3, #1
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	85e3      	strh	r3, [r4, #46]	; 0x2e
 80020a4:	e658      	b.n	8001d58 <I2C1_EV_IRQHandler+0x38>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020a6:	2908      	cmp	r1, #8
 80020a8:	d00d      	beq.n	80020c6 <I2C1_EV_IRQHandler+0x3a6>
 80020aa:	2920      	cmp	r1, #32
 80020ac:	d00b      	beq.n	80020c6 <I2C1_EV_IRQHandler+0x3a6>
 80020ae:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80020b2:	d008      	beq.n	80020c6 <I2C1_EV_IRQHandler+0x3a6>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020b4:	6859      	ldr	r1, [r3, #4]
 80020b6:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80020ba:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80020bc:	2311      	movs	r3, #17
 80020be:	6363      	str	r3, [r4, #52]	; 0x34
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80020c4:	e7b8      	b.n	8002038 <I2C1_EV_IRQHandler+0x318>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020cc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d4:	601a      	str	r2, [r3, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80020d6:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80020d8:	2300      	movs	r3, #0
 80020da:	6363      	str	r3, [r4, #52]	; 0x34
        hi2c->State = HAL_I2C_STATE_READY;
 80020dc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020e0:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020e8:	e636      	b.n	8001d58 <I2C1_EV_IRQHandler+0x38>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80020ea:	2d40      	cmp	r5, #64	; 0x40
 80020ec:	f47f ae34 	bne.w	8001d58 <I2C1_EV_IRQHandler+0x38>
 80020f0:	e7b9      	b.n	8002066 <I2C1_EV_IRQHandler+0x346>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80020f2:	6859      	ldr	r1, [r3, #4]
 80020f4:	050d      	lsls	r5, r1, #20
 80020f6:	f53f ae2f 	bmi.w	8001d58 <I2C1_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020fa:	f3c0 0180 	ubfx	r1, r0, #2, #1
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020fe:	0640      	lsls	r0, r0, #25
 8002100:	d575      	bpl.n	80021ee <I2C1_EV_IRQHandler+0x4ce>
 8002102:	0557      	lsls	r7, r2, #21
 8002104:	d573      	bpl.n	80021ee <I2C1_EV_IRQHandler+0x4ce>
 8002106:	2900      	cmp	r1, #0
 8002108:	d174      	bne.n	80021f4 <I2C1_EV_IRQHandler+0x4d4>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800210a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800210e:	2a22      	cmp	r2, #34	; 0x22
 8002110:	f47f ae22 	bne.w	8001d58 <I2C1_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 8002114:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8002116:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8002118:	2a03      	cmp	r2, #3
 800211a:	d919      	bls.n	8002150 <I2C1_EV_IRQHandler+0x430>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800211c:	691a      	ldr	r2, [r3, #16]
 800211e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002120:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002122:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002124:	3301      	adds	r3, #1
 8002126:	62a3      	str	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002128:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800212a:	3b01      	subs	r3, #1
 800212c:	b29b      	uxth	r3, r3
 800212e:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (hi2c->XferCount == (uint16_t)3)
 8002130:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b03      	cmp	r3, #3
 8002136:	f47f ae0f 	bne.w	8001d58 <I2C1_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800213a:	6862      	ldr	r2, [r4, #4]
 800213c:	6853      	ldr	r3, [r2, #4]
 800213e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002142:	6053      	str	r3, [r2, #4]
 8002144:	e608      	b.n	8001d58 <I2C1_EV_IRQHandler+0x38>
 8002146:	bf00      	nop
 8002148:	00010014 	.word	0x00010014
 800214c:	80008081 	.word	0x80008081
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002150:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002152:	2802      	cmp	r0, #2
 8002154:	f43f ae00 	beq.w	8001d58 <I2C1_EV_IRQHandler+0x38>
 8002158:	2a01      	cmp	r2, #1
 800215a:	f63f adfd 	bhi.w	8001d58 <I2C1_EV_IRQHandler+0x38>
  __IO uint32_t count = 0U;
 800215e:	910b      	str	r1, [sp, #44]	; 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002160:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8002164:	4a66      	ldr	r2, [pc, #408]	; (8002300 <I2C1_EV_IRQHandler+0x5e0>)
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	fbb2 f2f1 	udiv	r2, r2, r1
 800216c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002170:	920b      	str	r2, [sp, #44]	; 0x2c
    count--;
 8002172:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002174:	3a01      	subs	r2, #1
 8002176:	920b      	str	r2, [sp, #44]	; 0x2c
    if (count == 0U)
 8002178:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800217a:	b9b9      	cbnz	r1, 80021ac <I2C1_EV_IRQHandler+0x48c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800217c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800217e:	f042 0220 	orr.w	r2, r2, #32
 8002182:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800218a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002190:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002192:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002194:	3301      	adds	r3, #1
 8002196:	62a3      	str	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002198:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800219a:	3b01      	subs	r3, #1
 800219c:	b29b      	uxth	r3, r3
 800219e:	85e3      	strh	r3, [r4, #46]	; 0x2e
        hi2c->State = HAL_I2C_STATE_READY;
 80021a0:	2320      	movs	r3, #32
 80021a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a6:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80021aa:	e5d5      	b.n	8001d58 <I2C1_EV_IRQHandler+0x38>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 80021b2:	d1de      	bne.n	8002172 <I2C1_EV_IRQHandler+0x452>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b4:	6819      	ldr	r1, [r3, #0]
 80021b6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80021ba:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021bc:	6859      	ldr	r1, [r3, #4]
 80021be:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80021c2:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c4:	6919      	ldr	r1, [r3, #16]
 80021c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021c8:	7019      	strb	r1, [r3, #0]
        hi2c->pBuffPtr++;
 80021ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021cc:	3301      	adds	r3, #1
 80021ce:	62a3      	str	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80021d0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	85e3      	strh	r3, [r4, #46]	; 0x2e
        hi2c->State = HAL_I2C_STATE_READY;
 80021d8:	2320      	movs	r3, #32
 80021da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021de:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021e6:	2b40      	cmp	r3, #64	; 0x40
 80021e8:	d165      	bne.n	80022b6 <I2C1_EV_IRQHandler+0x596>
          hi2c->PreviousState = I2C_STATE_NONE;
 80021ea:	6362      	str	r2, [r4, #52]	; 0x34
 80021ec:	e5b4      	b.n	8001d58 <I2C1_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021ee:	2900      	cmp	r1, #0
 80021f0:	f43f adb2 	beq.w	8001d58 <I2C1_EV_IRQHandler+0x38>
 80021f4:	0596      	lsls	r6, r2, #22
 80021f6:	f57f adaf 	bpl.w	8001d58 <I2C1_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
  if (hi2c->XferCount == 4U)
 80021fc:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  if (hi2c->XferCount == 4U)
 8002200:	b280      	uxth	r0, r0
 8002202:	2804      	cmp	r0, #4
 8002204:	d109      	bne.n	800221a <I2C1_EV_IRQHandler+0x4fa>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800220c:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8002212:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002214:	3301      	adds	r3, #1
 8002216:	62a3      	str	r3, [r4, #40]	; 0x28
 8002218:	e740      	b.n	800209c <I2C1_EV_IRQHandler+0x37c>
  else if (hi2c->XferCount == 3U)
 800221a:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800221c:	b280      	uxth	r0, r0
 800221e:	2803      	cmp	r0, #3
 8002220:	d10c      	bne.n	800223c <I2C1_EV_IRQHandler+0x51c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002222:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002224:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002226:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 800222a:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800222c:	d0ef      	beq.n	800220e <I2C1_EV_IRQHandler+0x4ee>
 800222e:	2a02      	cmp	r2, #2
 8002230:	d0ed      	beq.n	800220e <I2C1_EV_IRQHandler+0x4ee>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	e7e8      	b.n	800220e <I2C1_EV_IRQHandler+0x4ee>
  else if (hi2c->XferCount == 2U)
 800223c:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800223e:	b280      	uxth	r0, r0
 8002240:	2802      	cmp	r0, #2
 8002242:	d1e4      	bne.n	800220e <I2C1_EV_IRQHandler+0x4ee>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002244:	2a01      	cmp	r2, #1
 8002246:	d001      	beq.n	800224c <I2C1_EV_IRQHandler+0x52c>
 8002248:	2a10      	cmp	r2, #16
 800224a:	d128      	bne.n	800229e <I2C1_EV_IRQHandler+0x57e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002252:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8002258:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800225a:	1c53      	adds	r3, r2, #1
 800225c:	62a3      	str	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 800225e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002260:	3b01      	subs	r3, #1
 8002262:	b29b      	uxth	r3, r3
 8002264:	85e3      	strh	r3, [r4, #46]	; 0x2e
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002266:	6863      	ldr	r3, [r4, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 800226c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800226e:	6862      	ldr	r2, [r4, #4]
    hi2c->pBuffPtr++;
 8002270:	3301      	adds	r3, #1
 8002272:	62a3      	str	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 8002274:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002276:	3b01      	subs	r3, #1
 8002278:	b29b      	uxth	r3, r3
 800227a:	85e3      	strh	r3, [r4, #46]	; 0x2e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800227c:	6853      	ldr	r3, [r2, #4]
 800227e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002282:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002284:	2320      	movs	r3, #32
 8002286:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800228a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800228e:	2b40      	cmp	r3, #64	; 0x40
 8002290:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002298:	d10d      	bne.n	80022b6 <I2C1_EV_IRQHandler+0x596>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800229a:	6363      	str	r3, [r4, #52]	; 0x34
 800229c:	e55c      	b.n	8001d58 <I2C1_EV_IRQHandler+0x38>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800229e:	2a04      	cmp	r2, #4
 80022a0:	d001      	beq.n	80022a6 <I2C1_EV_IRQHandler+0x586>
 80022a2:	2a02      	cmp	r2, #2
 80022a4:	d103      	bne.n	80022ae <I2C1_EV_IRQHandler+0x58e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022ac:	e7d1      	b.n	8002252 <I2C1_EV_IRQHandler+0x532>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b4:	e7cd      	b.n	8002252 <I2C1_EV_IRQHandler+0x532>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80022b6:	2312      	movs	r3, #18
 80022b8:	e7ef      	b.n	800229a <I2C1_EV_IRQHandler+0x57a>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80022ba:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80022bc:	b1b0      	cbz	r0, 80022ec <I2C1_EV_IRQHandler+0x5cc>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80022be:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022c0:	0785      	lsls	r5, r0, #30
 80022c2:	d51f      	bpl.n	8002304 <I2C1_EV_IRQHandler+0x5e4>
 80022c4:	0597      	lsls	r7, r2, #22
 80022c6:	d51d      	bpl.n	8002304 <I2C1_EV_IRQHandler+0x5e4>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80022c8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80022ca:	b102      	cbz	r2, 80022ce <I2C1_EV_IRQHandler+0x5ae>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80022cc:	699a      	ldr	r2, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80022ce:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80022d2:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80022d6:	2a28      	cmp	r2, #40	; 0x28
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	d108      	bne.n	80022f0 <I2C1_EV_IRQHandler+0x5d0>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80022de:	6859      	ldr	r1, [r3, #4]
 80022e0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80022e4:	6059      	str	r1, [r3, #4]
    __HAL_UNLOCK(hi2c);
 80022e6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 80022ea:	e535      	b.n	8001d58 <I2C1_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80022ec:	6998      	ldr	r0, [r3, #24]
 80022ee:	e7e6      	b.n	80022be <I2C1_EV_IRQHandler+0x59e>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f0:	920c      	str	r2, [sp, #48]	; 0x30
 80022f2:	6959      	ldr	r1, [r3, #20]
 80022f4:	910c      	str	r1, [sp, #48]	; 0x30
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	930c      	str	r3, [sp, #48]	; 0x30
 80022fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80022fc:	e7f3      	b.n	80022e6 <I2C1_EV_IRQHandler+0x5c6>
 80022fe:	bf00      	nop
 8002300:	20000000 	.word	0x20000000
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002304:	06c6      	lsls	r6, r0, #27
 8002306:	f140 809c 	bpl.w	8002442 <I2C1_EV_IRQHandler+0x722>
 800230a:	0595      	lsls	r5, r2, #22
 800230c:	f140 8099 	bpl.w	8002442 <I2C1_EV_IRQHandler+0x722>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002310:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002314:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002316:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002318:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800231c:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800231e:	2200      	movs	r2, #0
 8002320:	920d      	str	r2, [sp, #52]	; 0x34
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	920d      	str	r2, [sp, #52]	; 0x34
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	f042 0201 	orr.w	r2, r2, #1
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002336:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	0510      	lsls	r0, r2, #20
 800233c:	d51f      	bpl.n	800237e <I2C1_EV_IRQHandler+0x65e>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800233e:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8002342:	2a22      	cmp	r2, #34	; 0x22
 8002344:	d148      	bne.n	80023d8 <I2C1_EV_IRQHandler+0x6b8>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002346:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002348:	6802      	ldr	r2, [r0, #0]
 800234a:	6852      	ldr	r2, [r2, #4]
 800234c:	b292      	uxth	r2, r2
 800234e:	85e2      	strh	r2, [r4, #46]	; 0x2e
      if (hi2c->XferCount != 0U)
 8002350:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8002352:	b292      	uxth	r2, r2
 8002354:	b11a      	cbz	r2, 800235e <I2C1_EV_IRQHandler+0x63e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002356:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002358:	f042 0204 	orr.w	r2, r2, #4
 800235c:	6462      	str	r2, [r4, #68]	; 0x44
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002364:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002366:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800236a:	2b01      	cmp	r3, #1
 800236c:	d007      	beq.n	800237e <I2C1_EV_IRQHandler+0x65e>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800236e:	4b6b      	ldr	r3, [pc, #428]	; (800251c <I2C1_EV_IRQHandler+0x7fc>)
 8002370:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002372:	f7fd ffdf 	bl	8000334 <HAL_DMA_Abort_IT>
 8002376:	b110      	cbz	r0, 800237e <I2C1_EV_IRQHandler+0x65e>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002378:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800237a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800237c:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 800237e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002380:	b29b      	uxth	r3, r3
 8002382:	b313      	cbz	r3, 80023ca <I2C1_EV_IRQHandler+0x6aa>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002384:	6863      	ldr	r3, [r4, #4]
 8002386:	695a      	ldr	r2, [r3, #20]
 8002388:	0751      	lsls	r1, r2, #29
 800238a:	d509      	bpl.n	80023a0 <I2C1_EV_IRQHandler+0x680>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002390:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002392:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002394:	3301      	adds	r3, #1
 8002396:	62a3      	str	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002398:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800239a:	3b01      	subs	r3, #1
 800239c:	b29b      	uxth	r3, r3
 800239e:	85e3      	strh	r3, [r4, #46]	; 0x2e
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80023a0:	6863      	ldr	r3, [r4, #4]
 80023a2:	695a      	ldr	r2, [r3, #20]
 80023a4:	0652      	lsls	r2, r2, #25
 80023a6:	d509      	bpl.n	80023bc <I2C1_EV_IRQHandler+0x69c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a8:	691a      	ldr	r2, [r3, #16]
 80023aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023ac:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80023ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023b0:	3301      	adds	r3, #1
 80023b2:	62a3      	str	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80023b4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	85e3      	strh	r3, [r4, #46]	; 0x2e
    if (hi2c->XferCount != 0U)
 80023bc:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80023be:	b29b      	uxth	r3, r3
 80023c0:	b11b      	cbz	r3, 80023ca <I2C1_EV_IRQHandler+0x6aa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80023c4:	f043 0304 	orr.w	r3, r3, #4
 80023c8:	6463      	str	r3, [r4, #68]	; 0x44
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80023cc:	b303      	cbz	r3, 8002410 <I2C1_EV_IRQHandler+0x6f0>
 80023ce:	b00f      	add	sp, #60	; 0x3c
 80023d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 80023d4:	f7fe ba56 	b.w	8000884 <I2C_ITError.constprop.0>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80023d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80023da:	6802      	ldr	r2, [r0, #0]
 80023dc:	6852      	ldr	r2, [r2, #4]
 80023de:	b292      	uxth	r2, r2
 80023e0:	85e2      	strh	r2, [r4, #46]	; 0x2e
      if (hi2c->XferCount != 0U)
 80023e2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80023e4:	b292      	uxth	r2, r2
 80023e6:	b11a      	cbz	r2, 80023f0 <I2C1_EV_IRQHandler+0x6d0>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023e8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80023ea:	f042 0204 	orr.w	r2, r2, #4
 80023ee:	6462      	str	r2, [r4, #68]	; 0x44
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023f6:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80023f8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d0be      	beq.n	800237e <I2C1_EV_IRQHandler+0x65e>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002400:	4b46      	ldr	r3, [pc, #280]	; (800251c <I2C1_EV_IRQHandler+0x7fc>)
 8002402:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002404:	f7fd ff96 	bl	8000334 <HAL_DMA_Abort_IT>
 8002408:	2800      	cmp	r0, #0
 800240a:	d0b8      	beq.n	800237e <I2C1_EV_IRQHandler+0x65e>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800240c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800240e:	e7b4      	b.n	800237a <I2C1_EV_IRQHandler+0x65a>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002410:	2d2a      	cmp	r5, #42	; 0x2a
      hi2c->PreviousState = I2C_STATE_NONE;
 8002412:	bf02      	ittt	eq
 8002414:	6363      	streq	r3, [r4, #52]	; 0x34
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002416:	2328      	moveq	r3, #40	; 0x28
 8002418:	f884 3041 	strbeq.w	r3, [r4, #65]	; 0x41
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800241c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002420:	2b28      	cmp	r3, #40	; 0x28
 8002422:	d107      	bne.n	8002434 <I2C1_EV_IRQHandler+0x714>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002424:	4b3e      	ldr	r3, [pc, #248]	; (8002520 <I2C1_EV_IRQHandler+0x800>)
 8002426:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->PreviousState = I2C_STATE_NONE;
 8002428:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800242a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800242c:	6363      	str	r3, [r4, #52]	; 0x34
        hi2c->State = HAL_I2C_STATE_READY;
 800242e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 8002432:	e657      	b.n	80020e4 <I2C1_EV_IRQHandler+0x3c4>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002434:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002436:	2b22      	cmp	r3, #34	; 0x22
 8002438:	d0f6      	beq.n	8002428 <I2C1_EV_IRQHandler+0x708>
 800243a:	2d22      	cmp	r5, #34	; 0x22
 800243c:	f47f ac8c 	bne.w	8001d58 <I2C1_EV_IRQHandler+0x38>
 8002440:	e7f2      	b.n	8002428 <I2C1_EV_IRQHandler+0x708>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002442:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 8002446:	2921      	cmp	r1, #33	; 0x21
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002448:	f3c0 0580 	ubfx	r5, r0, #2, #1
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800244c:	d130      	bne.n	80024b0 <I2C1_EV_IRQHandler+0x790>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800244e:	0607      	lsls	r7, r0, #24
 8002450:	d522      	bpl.n	8002498 <I2C1_EV_IRQHandler+0x778>
 8002452:	0556      	lsls	r6, r2, #21
 8002454:	d520      	bpl.n	8002498 <I2C1_EV_IRQHandler+0x778>
 8002456:	bb15      	cbnz	r5, 800249e <I2C1_EV_IRQHandler+0x77e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002458:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  if (hi2c->XferCount != 0U)
 800245c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800245e:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8002460:	b292      	uxth	r2, r2
 8002462:	2a00      	cmp	r2, #0
 8002464:	f43f ac78 	beq.w	8001d58 <I2C1_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002468:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800246a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800246e:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8002470:	62a2      	str	r2, [r4, #40]	; 0x28
    hi2c->XferCount--;
 8002472:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8002474:	3a01      	subs	r2, #1
 8002476:	b292      	uxth	r2, r2
 8002478:	85e2      	strh	r2, [r4, #46]	; 0x2e
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800247a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800247c:	b292      	uxth	r2, r2
 800247e:	2a00      	cmp	r2, #0
 8002480:	f47f ac6a 	bne.w	8001d58 <I2C1_EV_IRQHandler+0x38>
 8002484:	2829      	cmp	r0, #41	; 0x29
 8002486:	f47f ac67 	bne.w	8001d58 <I2C1_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002490:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002492:	6361      	str	r1, [r4, #52]	; 0x34
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002494:	2328      	movs	r3, #40	; 0x28
 8002496:	e5d0      	b.n	800203a <I2C1_EV_IRQHandler+0x31a>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002498:	2d00      	cmp	r5, #0
 800249a:	f43f ac5d 	beq.w	8001d58 <I2C1_EV_IRQHandler+0x38>
 800249e:	0595      	lsls	r5, r2, #22
 80024a0:	f57f ac5a 	bpl.w	8001d58 <I2C1_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 80024a4:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80024a6:	b292      	uxth	r2, r2
 80024a8:	2a00      	cmp	r2, #0
 80024aa:	f43f ac55 	beq.w	8001d58 <I2C1_EV_IRQHandler+0x38>
 80024ae:	e5f0      	b.n	8002092 <I2C1_EV_IRQHandler+0x372>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024b0:	0640      	lsls	r0, r0, #25
 80024b2:	d524      	bpl.n	80024fe <I2C1_EV_IRQHandler+0x7de>
 80024b4:	0551      	lsls	r1, r2, #21
 80024b6:	d522      	bpl.n	80024fe <I2C1_EV_IRQHandler+0x7de>
 80024b8:	bb25      	cbnz	r5, 8002504 <I2C1_EV_IRQHandler+0x7e4>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024ba:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  if (hi2c->XferCount != 0U)
 80024be:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024c0:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 80024c2:	b289      	uxth	r1, r1
 80024c4:	2900      	cmp	r1, #0
 80024c6:	f43f ac47 	beq.w	8001d58 <I2C1_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ca:	6919      	ldr	r1, [r3, #16]
 80024cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024ce:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 80024d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024d2:	3301      	adds	r3, #1
 80024d4:	62a3      	str	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 80024d6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29b      	uxth	r3, r3
 80024dc:	85e3      	strh	r3, [r4, #46]	; 0x2e
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80024de:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f47f ac38 	bne.w	8001d58 <I2C1_EV_IRQHandler+0x38>
 80024e8:	2a2a      	cmp	r2, #42	; 0x2a
 80024ea:	f47f ac35 	bne.w	8001d58 <I2C1_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024ee:	6862      	ldr	r2, [r4, #4]
 80024f0:	6853      	ldr	r3, [r2, #4]
 80024f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024f6:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80024f8:	2322      	movs	r3, #34	; 0x22
 80024fa:	6363      	str	r3, [r4, #52]	; 0x34
 80024fc:	e7ca      	b.n	8002494 <I2C1_EV_IRQHandler+0x774>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024fe:	2d00      	cmp	r5, #0
 8002500:	f43f ac2a 	beq.w	8001d58 <I2C1_EV_IRQHandler+0x38>
 8002504:	0592      	lsls	r2, r2, #22
 8002506:	f57f ac27 	bpl.w	8001d58 <I2C1_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 800250a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800250c:	b292      	uxth	r2, r2
 800250e:	2a00      	cmp	r2, #0
 8002510:	f43f ac22 	beq.w	8001d58 <I2C1_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002514:	691a      	ldr	r2, [r3, #16]
 8002516:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	e67a      	b.n	8002212 <I2C1_EV_IRQHandler+0x4f2>
 800251c:	08000699 	.word	0x08000699
 8002520:	ffff0000 	.word	0xffff0000

08002524 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002524:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002526:	4a48      	ldr	r2, [pc, #288]	; (8002648 <I2C1_ER_IRQHandler+0x124>)
 8002528:	6853      	ldr	r3, [r2, #4]
 800252a:	695c      	ldr	r4, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800252c:	6858      	ldr	r0, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800252e:	f892 5042 	ldrb.w	r5, [r2, #66]	; 0x42
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002532:	05e7      	lsls	r7, r4, #23
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002534:	b2ed      	uxtb	r5, r5
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002536:	f3c4 2100 	ubfx	r1, r4, #8, #1
 800253a:	d50b      	bpl.n	8002554 <I2C1_ER_IRQHandler+0x30>
 800253c:	05c6      	lsls	r6, r0, #23
 800253e:	f3c0 2100 	ubfx	r1, r0, #8, #1
 8002542:	d507      	bpl.n	8002554 <I2C1_ER_IRQHandler+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002544:	f46f 7180 	mvn.w	r1, #256	; 0x100
 8002548:	6159      	str	r1, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800254a:	6819      	ldr	r1, [r3, #0]
 800254c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002550:	6019      	str	r1, [r3, #0]
    error |= HAL_I2C_ERROR_BERR;
 8002552:	2101      	movs	r1, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002554:	05a7      	lsls	r7, r4, #22
 8002556:	d506      	bpl.n	8002566 <I2C1_ER_IRQHandler+0x42>
 8002558:	05c6      	lsls	r6, r0, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800255a:	bf42      	ittt	mi
 800255c:	f46f 7600 	mvnmi.w	r6, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 8002560:	f041 0102 	orrmi.w	r1, r1, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002564:	615e      	strmi	r6, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002566:	0567      	lsls	r7, r4, #21
 8002568:	d533      	bpl.n	80025d2 <I2C1_ER_IRQHandler+0xae>
 800256a:	05c6      	lsls	r6, r0, #23
 800256c:	d531      	bpl.n	80025d2 <I2C1_ER_IRQHandler+0xae>
    tmp2 = hi2c->XferCount;
 800256e:	8dd7      	ldrh	r7, [r2, #46]	; 0x2e
    tmp3 = hi2c->State;
 8002570:	f892 6041 	ldrb.w	r6, [r2, #65]	; 0x41
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002574:	2d20      	cmp	r5, #32
    tmp4 = hi2c->PreviousState;
 8002576:	f8d2 c034 	ldr.w	ip, [r2, #52]	; 0x34
    tmp2 = hi2c->XferCount;
 800257a:	b2bf      	uxth	r7, r7
    tmp3 = hi2c->State;
 800257c:	b2f6      	uxtb	r6, r6
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800257e:	d152      	bne.n	8002626 <I2C1_ER_IRQHandler+0x102>
 8002580:	2f00      	cmp	r7, #0
 8002582:	d150      	bne.n	8002626 <I2C1_ER_IRQHandler+0x102>
 8002584:	f006 07f7 	and.w	r7, r6, #247	; 0xf7
 8002588:	2f21      	cmp	r7, #33	; 0x21
 800258a:	d004      	beq.n	8002596 <I2C1_ER_IRQHandler+0x72>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800258c:	2e28      	cmp	r6, #40	; 0x28
 800258e:	d14a      	bne.n	8002626 <I2C1_ER_IRQHandler+0x102>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002590:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
 8002594:	d147      	bne.n	8002626 <I2C1_ER_IRQHandler+0x102>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002596:	f892 5041 	ldrb.w	r5, [r2, #65]	; 0x41
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800259a:	6b16      	ldr	r6, [r2, #48]	; 0x30
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800259c:	b2ed      	uxtb	r5, r5
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800259e:	2e08      	cmp	r6, #8
 80025a0:	d001      	beq.n	80025a6 <I2C1_ER_IRQHandler+0x82>
 80025a2:	2e20      	cmp	r6, #32
 80025a4:	d124      	bne.n	80025f0 <I2C1_ER_IRQHandler+0xcc>
 80025a6:	2d28      	cmp	r5, #40	; 0x28
 80025a8:	d122      	bne.n	80025f0 <I2C1_ER_IRQHandler+0xcc>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025aa:	4d28      	ldr	r5, [pc, #160]	; (800264c <I2C1_ER_IRQHandler+0x128>)
    hi2c->State         = HAL_I2C_STATE_READY;
 80025ac:	2620      	movs	r6, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025ae:	6315      	str	r5, [r2, #48]	; 0x30
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025b0:	685d      	ldr	r5, [r3, #4]
 80025b2:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 80025b6:	605d      	str	r5, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b8:	f46f 6580 	mvn.w	r5, #1024	; 0x400
 80025bc:	615d      	str	r5, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025be:	681d      	ldr	r5, [r3, #0]
 80025c0:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 80025c4:	601d      	str	r5, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80025c6:	2500      	movs	r5, #0
 80025c8:	6355      	str	r5, [r2, #52]	; 0x34
    hi2c->State         = HAL_I2C_STATE_READY;
 80025ca:	f882 6041 	strb.w	r6, [r2, #65]	; 0x41
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80025ce:	f882 5042 	strb.w	r5, [r2, #66]	; 0x42
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80025d2:	0524      	lsls	r4, r4, #20
 80025d4:	d534      	bpl.n	8002640 <I2C1_ER_IRQHandler+0x11c>
 80025d6:	05c0      	lsls	r0, r0, #23
 80025d8:	d532      	bpl.n	8002640 <I2C1_ER_IRQHandler+0x11c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025da:	f46f 6000 	mvn.w	r0, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 80025de:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025e2:	6158      	str	r0, [r3, #20]
    hi2c->ErrorCode |= error;
 80025e4:	6c53      	ldr	r3, [r2, #68]	; 0x44
  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80025e6:	bcf0      	pop	{r4, r5, r6, r7}
 80025e8:	4319      	orrs	r1, r3
 80025ea:	6451      	str	r1, [r2, #68]	; 0x44
    I2C_ITError(hi2c);
 80025ec:	f7fe b94a 	b.w	8000884 <I2C_ITError.constprop.0>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80025f0:	2d21      	cmp	r5, #33	; 0x21
 80025f2:	d114      	bne.n	800261e <I2C1_ER_IRQHandler+0xfa>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80025f4:	4e15      	ldr	r6, [pc, #84]	; (800264c <I2C1_ER_IRQHandler+0x128>)
 80025f6:	6316      	str	r6, [r2, #48]	; 0x30
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025f8:	6355      	str	r5, [r2, #52]	; 0x34
    hi2c->State         = HAL_I2C_STATE_READY;
 80025fa:	2520      	movs	r5, #32
 80025fc:	f882 5041 	strb.w	r5, [r2, #65]	; 0x41
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002600:	2500      	movs	r5, #0
 8002602:	f882 5042 	strb.w	r5, [r2, #66]	; 0x42
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002606:	685d      	ldr	r5, [r3, #4]
 8002608:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 800260c:	605d      	str	r5, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800260e:	f46f 6580 	mvn.w	r5, #1024	; 0x400
 8002612:	615d      	str	r5, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002614:	681d      	ldr	r5, [r3, #0]
 8002616:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261a:	601d      	str	r5, [r3, #0]
 800261c:	e7d9      	b.n	80025d2 <I2C1_ER_IRQHandler+0xae>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800261e:	f46f 6580 	mvn.w	r5, #1024	; 0x400
 8002622:	615d      	str	r5, [r3, #20]
 8002624:	e7d5      	b.n	80025d2 <I2C1_ER_IRQHandler+0xae>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002626:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800262a:	2d10      	cmp	r5, #16
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800262c:	615e      	str	r6, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 800262e:	f041 0104 	orr.w	r1, r1, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002632:	d001      	beq.n	8002638 <I2C1_ER_IRQHandler+0x114>
 8002634:	2d40      	cmp	r5, #64	; 0x40
 8002636:	d1cc      	bne.n	80025d2 <I2C1_ER_IRQHandler+0xae>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002638:	681d      	ldr	r5, [r3, #0]
 800263a:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 800263e:	e7ec      	b.n	800261a <I2C1_ER_IRQHandler+0xf6>
  if (error != HAL_I2C_ERROR_NONE)
 8002640:	2900      	cmp	r1, #0
 8002642:	d1cf      	bne.n	80025e4 <I2C1_ER_IRQHandler+0xc0>
 8002644:	bcf0      	pop	{r4, r5, r6, r7}
 8002646:	4770      	bx	lr
 8002648:	20000208 	.word	0x20000208
 800264c:	ffff0000 	.word	0xffff0000

08002650 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002650:	2001      	movs	r0, #1
 8002652:	4770      	bx	lr

08002654 <_kill>:

int _kill(int pid, int sig)
{
 8002654:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002656:	f003 f943 	bl	80058e0 <__errno>
 800265a:	2316      	movs	r3, #22
 800265c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800265e:	f04f 30ff 	mov.w	r0, #4294967295
 8002662:	bd08      	pop	{r3, pc}

08002664 <_exit>:

void _exit (int status)
{
 8002664:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002666:	f003 f93b 	bl	80058e0 <__errno>
 800266a:	2316      	movs	r3, #22
 800266c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800266e:	e7fe      	b.n	800266e <_exit+0xa>

08002670 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002670:	b570      	push	{r4, r5, r6, lr}
 8002672:	460d      	mov	r5, r1
 8002674:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002676:	460e      	mov	r6, r1
 8002678:	1b73      	subs	r3, r6, r5
 800267a:	429c      	cmp	r4, r3
 800267c:	dc01      	bgt.n	8002682 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800267e:	4620      	mov	r0, r4
 8002680:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002682:	f3af 8000 	nop.w
 8002686:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268a:	e7f5      	b.n	8002678 <_read+0x8>

0800268c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800268c:	b570      	push	{r4, r5, r6, lr}
 800268e:	460d      	mov	r5, r1
 8002690:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002692:	460e      	mov	r6, r1
 8002694:	1b73      	subs	r3, r6, r5
 8002696:	429c      	cmp	r4, r3
 8002698:	dc01      	bgt.n	800269e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800269a:	4620      	mov	r0, r4
 800269c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800269e:	f816 0b01 	ldrb.w	r0, [r6], #1
 80026a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a6:	e7f5      	b.n	8002694 <_write+0x8>

080026a8 <_close>:

int _close(int file)
{
	return -1;
}
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ac:	4770      	bx	lr

080026ae <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80026ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80026b2:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80026b4:	604b      	str	r3, [r1, #4]
}
 80026b6:	4770      	bx	lr

080026b8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80026b8:	2001      	movs	r0, #1
 80026ba:	4770      	bx	lr

080026bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80026bc:	2000      	movs	r0, #0
 80026be:	4770      	bx	lr

080026c0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026c0:	4a0d      	ldr	r2, [pc, #52]	; (80026f8 <_sbrk+0x38>)
{
 80026c2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80026c4:	f8d2 1698 	ldr.w	r1, [r2, #1688]	; 0x698
{
 80026c8:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80026ca:	b911      	cbnz	r1, 80026d2 <_sbrk+0x12>
  {
    __sbrk_heap_end = &_end;
 80026cc:	490b      	ldr	r1, [pc, #44]	; (80026fc <_sbrk+0x3c>)
 80026ce:	f8c2 1698 	str.w	r1, [r2, #1688]	; 0x698
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026d2:	f8d2 0698 	ldr.w	r0, [r2, #1688]	; 0x698
 80026d6:	490a      	ldr	r1, [pc, #40]	; (8002700 <_sbrk+0x40>)
 80026d8:	4c0a      	ldr	r4, [pc, #40]	; (8002704 <_sbrk+0x44>)
 80026da:	4403      	add	r3, r0
 80026dc:	1b09      	subs	r1, r1, r4
 80026de:	428b      	cmp	r3, r1
 80026e0:	d906      	bls.n	80026f0 <_sbrk+0x30>
  {
    errno = ENOMEM;
 80026e2:	f003 f8fd 	bl	80058e0 <__errno>
 80026e6:	230c      	movs	r3, #12
 80026e8:	6003      	str	r3, [r0, #0]
 80026ea:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80026ee:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80026f0:	f8c2 3698 	str.w	r3, [r2, #1688]	; 0x698
  return (void *)prev_heap_end;
 80026f4:	e7fb      	b.n	80026ee <_sbrk+0x2e>
 80026f6:	bf00      	nop
 80026f8:	20000208 	.word	0x20000208
 80026fc:	200008b8 	.word	0x200008b8
 8002700:	20005000 	.word	0x20005000
 8002704:	00000400 	.word	0x00000400

08002708 <SystemInit>:
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop

0800270c <strlen>:
 800270c:	4603      	mov	r3, r0
 800270e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002712:	2a00      	cmp	r2, #0
 8002714:	d1fb      	bne.n	800270e <strlen+0x2>
 8002716:	1a18      	subs	r0, r3, r0
 8002718:	3801      	subs	r0, #1
 800271a:	4770      	bx	lr

0800271c <__aeabi_drsub>:
 800271c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8002720:	e002      	b.n	8002728 <__adddf3>
 8002722:	bf00      	nop

08002724 <__aeabi_dsub>:
 8002724:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08002728 <__adddf3>:
 8002728:	b530      	push	{r4, r5, lr}
 800272a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800272e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8002732:	ea94 0f05 	teq	r4, r5
 8002736:	bf08      	it	eq
 8002738:	ea90 0f02 	teqeq	r0, r2
 800273c:	bf1f      	itttt	ne
 800273e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8002742:	ea55 0c02 	orrsne.w	ip, r5, r2
 8002746:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800274a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800274e:	f000 80e2 	beq.w	8002916 <__adddf3+0x1ee>
 8002752:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8002756:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800275a:	bfb8      	it	lt
 800275c:	426d      	neglt	r5, r5
 800275e:	dd0c      	ble.n	800277a <__adddf3+0x52>
 8002760:	442c      	add	r4, r5
 8002762:	ea80 0202 	eor.w	r2, r0, r2
 8002766:	ea81 0303 	eor.w	r3, r1, r3
 800276a:	ea82 0000 	eor.w	r0, r2, r0
 800276e:	ea83 0101 	eor.w	r1, r3, r1
 8002772:	ea80 0202 	eor.w	r2, r0, r2
 8002776:	ea81 0303 	eor.w	r3, r1, r3
 800277a:	2d36      	cmp	r5, #54	; 0x36
 800277c:	bf88      	it	hi
 800277e:	bd30      	pophi	{r4, r5, pc}
 8002780:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002784:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002788:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800278c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002790:	d002      	beq.n	8002798 <__adddf3+0x70>
 8002792:	4240      	negs	r0, r0
 8002794:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002798:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800279c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80027a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80027a4:	d002      	beq.n	80027ac <__adddf3+0x84>
 80027a6:	4252      	negs	r2, r2
 80027a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80027ac:	ea94 0f05 	teq	r4, r5
 80027b0:	f000 80a7 	beq.w	8002902 <__adddf3+0x1da>
 80027b4:	f1a4 0401 	sub.w	r4, r4, #1
 80027b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80027bc:	db0d      	blt.n	80027da <__adddf3+0xb2>
 80027be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80027c2:	fa22 f205 	lsr.w	r2, r2, r5
 80027c6:	1880      	adds	r0, r0, r2
 80027c8:	f141 0100 	adc.w	r1, r1, #0
 80027cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80027d0:	1880      	adds	r0, r0, r2
 80027d2:	fa43 f305 	asr.w	r3, r3, r5
 80027d6:	4159      	adcs	r1, r3
 80027d8:	e00e      	b.n	80027f8 <__adddf3+0xd0>
 80027da:	f1a5 0520 	sub.w	r5, r5, #32
 80027de:	f10e 0e20 	add.w	lr, lr, #32
 80027e2:	2a01      	cmp	r2, #1
 80027e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80027e8:	bf28      	it	cs
 80027ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80027ee:	fa43 f305 	asr.w	r3, r3, r5
 80027f2:	18c0      	adds	r0, r0, r3
 80027f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80027f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80027fc:	d507      	bpl.n	800280e <__adddf3+0xe6>
 80027fe:	f04f 0e00 	mov.w	lr, #0
 8002802:	f1dc 0c00 	rsbs	ip, ip, #0
 8002806:	eb7e 0000 	sbcs.w	r0, lr, r0
 800280a:	eb6e 0101 	sbc.w	r1, lr, r1
 800280e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002812:	d31b      	bcc.n	800284c <__adddf3+0x124>
 8002814:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002818:	d30c      	bcc.n	8002834 <__adddf3+0x10c>
 800281a:	0849      	lsrs	r1, r1, #1
 800281c:	ea5f 0030 	movs.w	r0, r0, rrx
 8002820:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8002824:	f104 0401 	add.w	r4, r4, #1
 8002828:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800282c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8002830:	f080 809a 	bcs.w	8002968 <__adddf3+0x240>
 8002834:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8002838:	bf08      	it	eq
 800283a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800283e:	f150 0000 	adcs.w	r0, r0, #0
 8002842:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002846:	ea41 0105 	orr.w	r1, r1, r5
 800284a:	bd30      	pop	{r4, r5, pc}
 800284c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8002850:	4140      	adcs	r0, r0
 8002852:	eb41 0101 	adc.w	r1, r1, r1
 8002856:	3c01      	subs	r4, #1
 8002858:	bf28      	it	cs
 800285a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800285e:	d2e9      	bcs.n	8002834 <__adddf3+0x10c>
 8002860:	f091 0f00 	teq	r1, #0
 8002864:	bf04      	itt	eq
 8002866:	4601      	moveq	r1, r0
 8002868:	2000      	moveq	r0, #0
 800286a:	fab1 f381 	clz	r3, r1
 800286e:	bf08      	it	eq
 8002870:	3320      	addeq	r3, #32
 8002872:	f1a3 030b 	sub.w	r3, r3, #11
 8002876:	f1b3 0220 	subs.w	r2, r3, #32
 800287a:	da0c      	bge.n	8002896 <__adddf3+0x16e>
 800287c:	320c      	adds	r2, #12
 800287e:	dd08      	ble.n	8002892 <__adddf3+0x16a>
 8002880:	f102 0c14 	add.w	ip, r2, #20
 8002884:	f1c2 020c 	rsb	r2, r2, #12
 8002888:	fa01 f00c 	lsl.w	r0, r1, ip
 800288c:	fa21 f102 	lsr.w	r1, r1, r2
 8002890:	e00c      	b.n	80028ac <__adddf3+0x184>
 8002892:	f102 0214 	add.w	r2, r2, #20
 8002896:	bfd8      	it	le
 8002898:	f1c2 0c20 	rsble	ip, r2, #32
 800289c:	fa01 f102 	lsl.w	r1, r1, r2
 80028a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80028a4:	bfdc      	itt	le
 80028a6:	ea41 010c 	orrle.w	r1, r1, ip
 80028aa:	4090      	lslle	r0, r2
 80028ac:	1ae4      	subs	r4, r4, r3
 80028ae:	bfa2      	ittt	ge
 80028b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80028b4:	4329      	orrge	r1, r5
 80028b6:	bd30      	popge	{r4, r5, pc}
 80028b8:	ea6f 0404 	mvn.w	r4, r4
 80028bc:	3c1f      	subs	r4, #31
 80028be:	da1c      	bge.n	80028fa <__adddf3+0x1d2>
 80028c0:	340c      	adds	r4, #12
 80028c2:	dc0e      	bgt.n	80028e2 <__adddf3+0x1ba>
 80028c4:	f104 0414 	add.w	r4, r4, #20
 80028c8:	f1c4 0220 	rsb	r2, r4, #32
 80028cc:	fa20 f004 	lsr.w	r0, r0, r4
 80028d0:	fa01 f302 	lsl.w	r3, r1, r2
 80028d4:	ea40 0003 	orr.w	r0, r0, r3
 80028d8:	fa21 f304 	lsr.w	r3, r1, r4
 80028dc:	ea45 0103 	orr.w	r1, r5, r3
 80028e0:	bd30      	pop	{r4, r5, pc}
 80028e2:	f1c4 040c 	rsb	r4, r4, #12
 80028e6:	f1c4 0220 	rsb	r2, r4, #32
 80028ea:	fa20 f002 	lsr.w	r0, r0, r2
 80028ee:	fa01 f304 	lsl.w	r3, r1, r4
 80028f2:	ea40 0003 	orr.w	r0, r0, r3
 80028f6:	4629      	mov	r1, r5
 80028f8:	bd30      	pop	{r4, r5, pc}
 80028fa:	fa21 f004 	lsr.w	r0, r1, r4
 80028fe:	4629      	mov	r1, r5
 8002900:	bd30      	pop	{r4, r5, pc}
 8002902:	f094 0f00 	teq	r4, #0
 8002906:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800290a:	bf06      	itte	eq
 800290c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8002910:	3401      	addeq	r4, #1
 8002912:	3d01      	subne	r5, #1
 8002914:	e74e      	b.n	80027b4 <__adddf3+0x8c>
 8002916:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800291a:	bf18      	it	ne
 800291c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002920:	d029      	beq.n	8002976 <__adddf3+0x24e>
 8002922:	ea94 0f05 	teq	r4, r5
 8002926:	bf08      	it	eq
 8002928:	ea90 0f02 	teqeq	r0, r2
 800292c:	d005      	beq.n	800293a <__adddf3+0x212>
 800292e:	ea54 0c00 	orrs.w	ip, r4, r0
 8002932:	bf04      	itt	eq
 8002934:	4619      	moveq	r1, r3
 8002936:	4610      	moveq	r0, r2
 8002938:	bd30      	pop	{r4, r5, pc}
 800293a:	ea91 0f03 	teq	r1, r3
 800293e:	bf1e      	ittt	ne
 8002940:	2100      	movne	r1, #0
 8002942:	2000      	movne	r0, #0
 8002944:	bd30      	popne	{r4, r5, pc}
 8002946:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800294a:	d105      	bne.n	8002958 <__adddf3+0x230>
 800294c:	0040      	lsls	r0, r0, #1
 800294e:	4149      	adcs	r1, r1
 8002950:	bf28      	it	cs
 8002952:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8002956:	bd30      	pop	{r4, r5, pc}
 8002958:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800295c:	bf3c      	itt	cc
 800295e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8002962:	bd30      	popcc	{r4, r5, pc}
 8002964:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002968:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800296c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002970:	f04f 0000 	mov.w	r0, #0
 8002974:	bd30      	pop	{r4, r5, pc}
 8002976:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800297a:	bf1a      	itte	ne
 800297c:	4619      	movne	r1, r3
 800297e:	4610      	movne	r0, r2
 8002980:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8002984:	bf1c      	itt	ne
 8002986:	460b      	movne	r3, r1
 8002988:	4602      	movne	r2, r0
 800298a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800298e:	bf06      	itte	eq
 8002990:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002994:	ea91 0f03 	teqeq	r1, r3
 8002998:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800299c:	bd30      	pop	{r4, r5, pc}
 800299e:	bf00      	nop

080029a0 <__aeabi_ui2d>:
 80029a0:	f090 0f00 	teq	r0, #0
 80029a4:	bf04      	itt	eq
 80029a6:	2100      	moveq	r1, #0
 80029a8:	4770      	bxeq	lr
 80029aa:	b530      	push	{r4, r5, lr}
 80029ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80029b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80029b4:	f04f 0500 	mov.w	r5, #0
 80029b8:	f04f 0100 	mov.w	r1, #0
 80029bc:	e750      	b.n	8002860 <__adddf3+0x138>
 80029be:	bf00      	nop

080029c0 <__aeabi_i2d>:
 80029c0:	f090 0f00 	teq	r0, #0
 80029c4:	bf04      	itt	eq
 80029c6:	2100      	moveq	r1, #0
 80029c8:	4770      	bxeq	lr
 80029ca:	b530      	push	{r4, r5, lr}
 80029cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80029d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80029d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80029d8:	bf48      	it	mi
 80029da:	4240      	negmi	r0, r0
 80029dc:	f04f 0100 	mov.w	r1, #0
 80029e0:	e73e      	b.n	8002860 <__adddf3+0x138>
 80029e2:	bf00      	nop

080029e4 <__aeabi_f2d>:
 80029e4:	0042      	lsls	r2, r0, #1
 80029e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80029ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80029ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80029f2:	bf1f      	itttt	ne
 80029f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80029f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80029fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8002a00:	4770      	bxne	lr
 8002a02:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8002a06:	bf08      	it	eq
 8002a08:	4770      	bxeq	lr
 8002a0a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8002a0e:	bf04      	itt	eq
 8002a10:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8002a14:	4770      	bxeq	lr
 8002a16:	b530      	push	{r4, r5, lr}
 8002a18:	f44f 7460 	mov.w	r4, #896	; 0x380
 8002a1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002a20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002a24:	e71c      	b.n	8002860 <__adddf3+0x138>
 8002a26:	bf00      	nop

08002a28 <__aeabi_ul2d>:
 8002a28:	ea50 0201 	orrs.w	r2, r0, r1
 8002a2c:	bf08      	it	eq
 8002a2e:	4770      	bxeq	lr
 8002a30:	b530      	push	{r4, r5, lr}
 8002a32:	f04f 0500 	mov.w	r5, #0
 8002a36:	e00a      	b.n	8002a4e <__aeabi_l2d+0x16>

08002a38 <__aeabi_l2d>:
 8002a38:	ea50 0201 	orrs.w	r2, r0, r1
 8002a3c:	bf08      	it	eq
 8002a3e:	4770      	bxeq	lr
 8002a40:	b530      	push	{r4, r5, lr}
 8002a42:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8002a46:	d502      	bpl.n	8002a4e <__aeabi_l2d+0x16>
 8002a48:	4240      	negs	r0, r0
 8002a4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002a4e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002a52:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002a56:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8002a5a:	f43f aed8 	beq.w	800280e <__adddf3+0xe6>
 8002a5e:	f04f 0203 	mov.w	r2, #3
 8002a62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002a66:	bf18      	it	ne
 8002a68:	3203      	addne	r2, #3
 8002a6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002a6e:	bf18      	it	ne
 8002a70:	3203      	addne	r2, #3
 8002a72:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8002a76:	f1c2 0320 	rsb	r3, r2, #32
 8002a7a:	fa00 fc03 	lsl.w	ip, r0, r3
 8002a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8002a82:	fa01 fe03 	lsl.w	lr, r1, r3
 8002a86:	ea40 000e 	orr.w	r0, r0, lr
 8002a8a:	fa21 f102 	lsr.w	r1, r1, r2
 8002a8e:	4414      	add	r4, r2
 8002a90:	e6bd      	b.n	800280e <__adddf3+0xe6>
 8002a92:	bf00      	nop

08002a94 <__aeabi_dmul>:
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002a9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002a9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002aa2:	bf1d      	ittte	ne
 8002aa4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002aa8:	ea94 0f0c 	teqne	r4, ip
 8002aac:	ea95 0f0c 	teqne	r5, ip
 8002ab0:	f000 f8de 	bleq	8002c70 <__aeabi_dmul+0x1dc>
 8002ab4:	442c      	add	r4, r5
 8002ab6:	ea81 0603 	eor.w	r6, r1, r3
 8002aba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8002abe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8002ac2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8002ac6:	bf18      	it	ne
 8002ac8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002acc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002ad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ad4:	d038      	beq.n	8002b48 <__aeabi_dmul+0xb4>
 8002ad6:	fba0 ce02 	umull	ip, lr, r0, r2
 8002ada:	f04f 0500 	mov.w	r5, #0
 8002ade:	fbe1 e502 	umlal	lr, r5, r1, r2
 8002ae2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8002ae6:	fbe0 e503 	umlal	lr, r5, r0, r3
 8002aea:	f04f 0600 	mov.w	r6, #0
 8002aee:	fbe1 5603 	umlal	r5, r6, r1, r3
 8002af2:	f09c 0f00 	teq	ip, #0
 8002af6:	bf18      	it	ne
 8002af8:	f04e 0e01 	orrne.w	lr, lr, #1
 8002afc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8002b00:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8002b04:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8002b08:	d204      	bcs.n	8002b14 <__aeabi_dmul+0x80>
 8002b0a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8002b0e:	416d      	adcs	r5, r5
 8002b10:	eb46 0606 	adc.w	r6, r6, r6
 8002b14:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8002b18:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002b1c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8002b20:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8002b24:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8002b28:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002b2c:	bf88      	it	hi
 8002b2e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002b32:	d81e      	bhi.n	8002b72 <__aeabi_dmul+0xde>
 8002b34:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8002b38:	bf08      	it	eq
 8002b3a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8002b3e:	f150 0000 	adcs.w	r0, r0, #0
 8002b42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002b46:	bd70      	pop	{r4, r5, r6, pc}
 8002b48:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8002b4c:	ea46 0101 	orr.w	r1, r6, r1
 8002b50:	ea40 0002 	orr.w	r0, r0, r2
 8002b54:	ea81 0103 	eor.w	r1, r1, r3
 8002b58:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8002b5c:	bfc2      	ittt	gt
 8002b5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002b62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002b66:	bd70      	popgt	{r4, r5, r6, pc}
 8002b68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002b6c:	f04f 0e00 	mov.w	lr, #0
 8002b70:	3c01      	subs	r4, #1
 8002b72:	f300 80ab 	bgt.w	8002ccc <__aeabi_dmul+0x238>
 8002b76:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8002b7a:	bfde      	ittt	le
 8002b7c:	2000      	movle	r0, #0
 8002b7e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8002b82:	bd70      	pople	{r4, r5, r6, pc}
 8002b84:	f1c4 0400 	rsb	r4, r4, #0
 8002b88:	3c20      	subs	r4, #32
 8002b8a:	da35      	bge.n	8002bf8 <__aeabi_dmul+0x164>
 8002b8c:	340c      	adds	r4, #12
 8002b8e:	dc1b      	bgt.n	8002bc8 <__aeabi_dmul+0x134>
 8002b90:	f104 0414 	add.w	r4, r4, #20
 8002b94:	f1c4 0520 	rsb	r5, r4, #32
 8002b98:	fa00 f305 	lsl.w	r3, r0, r5
 8002b9c:	fa20 f004 	lsr.w	r0, r0, r4
 8002ba0:	fa01 f205 	lsl.w	r2, r1, r5
 8002ba4:	ea40 0002 	orr.w	r0, r0, r2
 8002ba8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8002bac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002bb0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002bb4:	fa21 f604 	lsr.w	r6, r1, r4
 8002bb8:	eb42 0106 	adc.w	r1, r2, r6
 8002bbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002bc0:	bf08      	it	eq
 8002bc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002bc6:	bd70      	pop	{r4, r5, r6, pc}
 8002bc8:	f1c4 040c 	rsb	r4, r4, #12
 8002bcc:	f1c4 0520 	rsb	r5, r4, #32
 8002bd0:	fa00 f304 	lsl.w	r3, r0, r4
 8002bd4:	fa20 f005 	lsr.w	r0, r0, r5
 8002bd8:	fa01 f204 	lsl.w	r2, r1, r4
 8002bdc:	ea40 0002 	orr.w	r0, r0, r2
 8002be0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002be4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002be8:	f141 0100 	adc.w	r1, r1, #0
 8002bec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002bf0:	bf08      	it	eq
 8002bf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002bf6:	bd70      	pop	{r4, r5, r6, pc}
 8002bf8:	f1c4 0520 	rsb	r5, r4, #32
 8002bfc:	fa00 f205 	lsl.w	r2, r0, r5
 8002c00:	ea4e 0e02 	orr.w	lr, lr, r2
 8002c04:	fa20 f304 	lsr.w	r3, r0, r4
 8002c08:	fa01 f205 	lsl.w	r2, r1, r5
 8002c0c:	ea43 0302 	orr.w	r3, r3, r2
 8002c10:	fa21 f004 	lsr.w	r0, r1, r4
 8002c14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002c18:	fa21 f204 	lsr.w	r2, r1, r4
 8002c1c:	ea20 0002 	bic.w	r0, r0, r2
 8002c20:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8002c24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002c28:	bf08      	it	eq
 8002c2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002c2e:	bd70      	pop	{r4, r5, r6, pc}
 8002c30:	f094 0f00 	teq	r4, #0
 8002c34:	d10f      	bne.n	8002c56 <__aeabi_dmul+0x1c2>
 8002c36:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8002c3a:	0040      	lsls	r0, r0, #1
 8002c3c:	eb41 0101 	adc.w	r1, r1, r1
 8002c40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002c44:	bf08      	it	eq
 8002c46:	3c01      	subeq	r4, #1
 8002c48:	d0f7      	beq.n	8002c3a <__aeabi_dmul+0x1a6>
 8002c4a:	ea41 0106 	orr.w	r1, r1, r6
 8002c4e:	f095 0f00 	teq	r5, #0
 8002c52:	bf18      	it	ne
 8002c54:	4770      	bxne	lr
 8002c56:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8002c5a:	0052      	lsls	r2, r2, #1
 8002c5c:	eb43 0303 	adc.w	r3, r3, r3
 8002c60:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002c64:	bf08      	it	eq
 8002c66:	3d01      	subeq	r5, #1
 8002c68:	d0f7      	beq.n	8002c5a <__aeabi_dmul+0x1c6>
 8002c6a:	ea43 0306 	orr.w	r3, r3, r6
 8002c6e:	4770      	bx	lr
 8002c70:	ea94 0f0c 	teq	r4, ip
 8002c74:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002c78:	bf18      	it	ne
 8002c7a:	ea95 0f0c 	teqne	r5, ip
 8002c7e:	d00c      	beq.n	8002c9a <__aeabi_dmul+0x206>
 8002c80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002c84:	bf18      	it	ne
 8002c86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002c8a:	d1d1      	bne.n	8002c30 <__aeabi_dmul+0x19c>
 8002c8c:	ea81 0103 	eor.w	r1, r1, r3
 8002c90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002c94:	f04f 0000 	mov.w	r0, #0
 8002c98:	bd70      	pop	{r4, r5, r6, pc}
 8002c9a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002c9e:	bf06      	itte	eq
 8002ca0:	4610      	moveq	r0, r2
 8002ca2:	4619      	moveq	r1, r3
 8002ca4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002ca8:	d019      	beq.n	8002cde <__aeabi_dmul+0x24a>
 8002caa:	ea94 0f0c 	teq	r4, ip
 8002cae:	d102      	bne.n	8002cb6 <__aeabi_dmul+0x222>
 8002cb0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8002cb4:	d113      	bne.n	8002cde <__aeabi_dmul+0x24a>
 8002cb6:	ea95 0f0c 	teq	r5, ip
 8002cba:	d105      	bne.n	8002cc8 <__aeabi_dmul+0x234>
 8002cbc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8002cc0:	bf1c      	itt	ne
 8002cc2:	4610      	movne	r0, r2
 8002cc4:	4619      	movne	r1, r3
 8002cc6:	d10a      	bne.n	8002cde <__aeabi_dmul+0x24a>
 8002cc8:	ea81 0103 	eor.w	r1, r1, r3
 8002ccc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002cd0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002cd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002cd8:	f04f 0000 	mov.w	r0, #0
 8002cdc:	bd70      	pop	{r4, r5, r6, pc}
 8002cde:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002ce2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}

08002ce8 <__aeabi_ddiv>:
 8002ce8:	b570      	push	{r4, r5, r6, lr}
 8002cea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002cee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002cf2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002cf6:	bf1d      	ittte	ne
 8002cf8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002cfc:	ea94 0f0c 	teqne	r4, ip
 8002d00:	ea95 0f0c 	teqne	r5, ip
 8002d04:	f000 f8a7 	bleq	8002e56 <__aeabi_ddiv+0x16e>
 8002d08:	eba4 0405 	sub.w	r4, r4, r5
 8002d0c:	ea81 0e03 	eor.w	lr, r1, r3
 8002d10:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002d14:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002d18:	f000 8088 	beq.w	8002e2c <__aeabi_ddiv+0x144>
 8002d1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002d20:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8002d24:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8002d28:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8002d2c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002d30:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8002d34:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8002d38:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8002d3c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8002d40:	429d      	cmp	r5, r3
 8002d42:	bf08      	it	eq
 8002d44:	4296      	cmpeq	r6, r2
 8002d46:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8002d4a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8002d4e:	d202      	bcs.n	8002d56 <__aeabi_ddiv+0x6e>
 8002d50:	085b      	lsrs	r3, r3, #1
 8002d52:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d56:	1ab6      	subs	r6, r6, r2
 8002d58:	eb65 0503 	sbc.w	r5, r5, r3
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d62:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002d66:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8002d6a:	ebb6 0e02 	subs.w	lr, r6, r2
 8002d6e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002d72:	bf22      	ittt	cs
 8002d74:	1ab6      	subcs	r6, r6, r2
 8002d76:	4675      	movcs	r5, lr
 8002d78:	ea40 000c 	orrcs.w	r0, r0, ip
 8002d7c:	085b      	lsrs	r3, r3, #1
 8002d7e:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d82:	ebb6 0e02 	subs.w	lr, r6, r2
 8002d86:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002d8a:	bf22      	ittt	cs
 8002d8c:	1ab6      	subcs	r6, r6, r2
 8002d8e:	4675      	movcs	r5, lr
 8002d90:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8002d94:	085b      	lsrs	r3, r3, #1
 8002d96:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d9a:	ebb6 0e02 	subs.w	lr, r6, r2
 8002d9e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002da2:	bf22      	ittt	cs
 8002da4:	1ab6      	subcs	r6, r6, r2
 8002da6:	4675      	movcs	r5, lr
 8002da8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002dac:	085b      	lsrs	r3, r3, #1
 8002dae:	ea4f 0232 	mov.w	r2, r2, rrx
 8002db2:	ebb6 0e02 	subs.w	lr, r6, r2
 8002db6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002dba:	bf22      	ittt	cs
 8002dbc:	1ab6      	subcs	r6, r6, r2
 8002dbe:	4675      	movcs	r5, lr
 8002dc0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8002dc4:	ea55 0e06 	orrs.w	lr, r5, r6
 8002dc8:	d018      	beq.n	8002dfc <__aeabi_ddiv+0x114>
 8002dca:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8002dce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8002dd2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8002dd6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002dda:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8002dde:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8002de2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8002de6:	d1c0      	bne.n	8002d6a <__aeabi_ddiv+0x82>
 8002de8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002dec:	d10b      	bne.n	8002e06 <__aeabi_ddiv+0x11e>
 8002dee:	ea41 0100 	orr.w	r1, r1, r0
 8002df2:	f04f 0000 	mov.w	r0, #0
 8002df6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8002dfa:	e7b6      	b.n	8002d6a <__aeabi_ddiv+0x82>
 8002dfc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002e00:	bf04      	itt	eq
 8002e02:	4301      	orreq	r1, r0
 8002e04:	2000      	moveq	r0, #0
 8002e06:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002e0a:	bf88      	it	hi
 8002e0c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002e10:	f63f aeaf 	bhi.w	8002b72 <__aeabi_dmul+0xde>
 8002e14:	ebb5 0c03 	subs.w	ip, r5, r3
 8002e18:	bf04      	itt	eq
 8002e1a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8002e1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002e22:	f150 0000 	adcs.w	r0, r0, #0
 8002e26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002e2a:	bd70      	pop	{r4, r5, r6, pc}
 8002e2c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8002e30:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8002e34:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8002e38:	bfc2      	ittt	gt
 8002e3a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002e3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002e42:	bd70      	popgt	{r4, r5, r6, pc}
 8002e44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002e48:	f04f 0e00 	mov.w	lr, #0
 8002e4c:	3c01      	subs	r4, #1
 8002e4e:	e690      	b.n	8002b72 <__aeabi_dmul+0xde>
 8002e50:	ea45 0e06 	orr.w	lr, r5, r6
 8002e54:	e68d      	b.n	8002b72 <__aeabi_dmul+0xde>
 8002e56:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002e5a:	ea94 0f0c 	teq	r4, ip
 8002e5e:	bf08      	it	eq
 8002e60:	ea95 0f0c 	teqeq	r5, ip
 8002e64:	f43f af3b 	beq.w	8002cde <__aeabi_dmul+0x24a>
 8002e68:	ea94 0f0c 	teq	r4, ip
 8002e6c:	d10a      	bne.n	8002e84 <__aeabi_ddiv+0x19c>
 8002e6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002e72:	f47f af34 	bne.w	8002cde <__aeabi_dmul+0x24a>
 8002e76:	ea95 0f0c 	teq	r5, ip
 8002e7a:	f47f af25 	bne.w	8002cc8 <__aeabi_dmul+0x234>
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	e72c      	b.n	8002cde <__aeabi_dmul+0x24a>
 8002e84:	ea95 0f0c 	teq	r5, ip
 8002e88:	d106      	bne.n	8002e98 <__aeabi_ddiv+0x1b0>
 8002e8a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002e8e:	f43f aefd 	beq.w	8002c8c <__aeabi_dmul+0x1f8>
 8002e92:	4610      	mov	r0, r2
 8002e94:	4619      	mov	r1, r3
 8002e96:	e722      	b.n	8002cde <__aeabi_dmul+0x24a>
 8002e98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002e9c:	bf18      	it	ne
 8002e9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002ea2:	f47f aec5 	bne.w	8002c30 <__aeabi_dmul+0x19c>
 8002ea6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8002eaa:	f47f af0d 	bne.w	8002cc8 <__aeabi_dmul+0x234>
 8002eae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8002eb2:	f47f aeeb 	bne.w	8002c8c <__aeabi_dmul+0x1f8>
 8002eb6:	e712      	b.n	8002cde <__aeabi_dmul+0x24a>

08002eb8 <__gedf2>:
 8002eb8:	f04f 3cff 	mov.w	ip, #4294967295
 8002ebc:	e006      	b.n	8002ecc <__cmpdf2+0x4>
 8002ebe:	bf00      	nop

08002ec0 <__ledf2>:
 8002ec0:	f04f 0c01 	mov.w	ip, #1
 8002ec4:	e002      	b.n	8002ecc <__cmpdf2+0x4>
 8002ec6:	bf00      	nop

08002ec8 <__cmpdf2>:
 8002ec8:	f04f 0c01 	mov.w	ip, #1
 8002ecc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002ed0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002ed4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002ed8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002edc:	bf18      	it	ne
 8002ede:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8002ee2:	d01b      	beq.n	8002f1c <__cmpdf2+0x54>
 8002ee4:	b001      	add	sp, #4
 8002ee6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8002eea:	bf0c      	ite	eq
 8002eec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8002ef0:	ea91 0f03 	teqne	r1, r3
 8002ef4:	bf02      	ittt	eq
 8002ef6:	ea90 0f02 	teqeq	r0, r2
 8002efa:	2000      	moveq	r0, #0
 8002efc:	4770      	bxeq	lr
 8002efe:	f110 0f00 	cmn.w	r0, #0
 8002f02:	ea91 0f03 	teq	r1, r3
 8002f06:	bf58      	it	pl
 8002f08:	4299      	cmppl	r1, r3
 8002f0a:	bf08      	it	eq
 8002f0c:	4290      	cmpeq	r0, r2
 8002f0e:	bf2c      	ite	cs
 8002f10:	17d8      	asrcs	r0, r3, #31
 8002f12:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8002f16:	f040 0001 	orr.w	r0, r0, #1
 8002f1a:	4770      	bx	lr
 8002f1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002f20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002f24:	d102      	bne.n	8002f2c <__cmpdf2+0x64>
 8002f26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002f2a:	d107      	bne.n	8002f3c <__cmpdf2+0x74>
 8002f2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002f30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002f34:	d1d6      	bne.n	8002ee4 <__cmpdf2+0x1c>
 8002f36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002f3a:	d0d3      	beq.n	8002ee4 <__cmpdf2+0x1c>
 8002f3c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop

08002f44 <__aeabi_cdrcmple>:
 8002f44:	4684      	mov	ip, r0
 8002f46:	4610      	mov	r0, r2
 8002f48:	4662      	mov	r2, ip
 8002f4a:	468c      	mov	ip, r1
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4663      	mov	r3, ip
 8002f50:	e000      	b.n	8002f54 <__aeabi_cdcmpeq>
 8002f52:	bf00      	nop

08002f54 <__aeabi_cdcmpeq>:
 8002f54:	b501      	push	{r0, lr}
 8002f56:	f7ff ffb7 	bl	8002ec8 <__cmpdf2>
 8002f5a:	2800      	cmp	r0, #0
 8002f5c:	bf48      	it	mi
 8002f5e:	f110 0f00 	cmnmi.w	r0, #0
 8002f62:	bd01      	pop	{r0, pc}

08002f64 <__aeabi_dcmpeq>:
 8002f64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f68:	f7ff fff4 	bl	8002f54 <__aeabi_cdcmpeq>
 8002f6c:	bf0c      	ite	eq
 8002f6e:	2001      	moveq	r0, #1
 8002f70:	2000      	movne	r0, #0
 8002f72:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f76:	bf00      	nop

08002f78 <__aeabi_dcmplt>:
 8002f78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f7c:	f7ff ffea 	bl	8002f54 <__aeabi_cdcmpeq>
 8002f80:	bf34      	ite	cc
 8002f82:	2001      	movcc	r0, #1
 8002f84:	2000      	movcs	r0, #0
 8002f86:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f8a:	bf00      	nop

08002f8c <__aeabi_dcmple>:
 8002f8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f90:	f7ff ffe0 	bl	8002f54 <__aeabi_cdcmpeq>
 8002f94:	bf94      	ite	ls
 8002f96:	2001      	movls	r0, #1
 8002f98:	2000      	movhi	r0, #0
 8002f9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f9e:	bf00      	nop

08002fa0 <__aeabi_dcmpge>:
 8002fa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002fa4:	f7ff ffce 	bl	8002f44 <__aeabi_cdrcmple>
 8002fa8:	bf94      	ite	ls
 8002faa:	2001      	movls	r0, #1
 8002fac:	2000      	movhi	r0, #0
 8002fae:	f85d fb08 	ldr.w	pc, [sp], #8
 8002fb2:	bf00      	nop

08002fb4 <__aeabi_dcmpgt>:
 8002fb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002fb8:	f7ff ffc4 	bl	8002f44 <__aeabi_cdrcmple>
 8002fbc:	bf34      	ite	cc
 8002fbe:	2001      	movcc	r0, #1
 8002fc0:	2000      	movcs	r0, #0
 8002fc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8002fc6:	bf00      	nop

08002fc8 <__aeabi_dcmpun>:
 8002fc8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002fcc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002fd0:	d102      	bne.n	8002fd8 <__aeabi_dcmpun+0x10>
 8002fd2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002fd6:	d10a      	bne.n	8002fee <__aeabi_dcmpun+0x26>
 8002fd8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002fdc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002fe0:	d102      	bne.n	8002fe8 <__aeabi_dcmpun+0x20>
 8002fe2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002fe6:	d102      	bne.n	8002fee <__aeabi_dcmpun+0x26>
 8002fe8:	f04f 0000 	mov.w	r0, #0
 8002fec:	4770      	bx	lr
 8002fee:	f04f 0001 	mov.w	r0, #1
 8002ff2:	4770      	bx	lr

08002ff4 <__aeabi_d2iz>:
 8002ff4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002ff8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8002ffc:	d215      	bcs.n	800302a <__aeabi_d2iz+0x36>
 8002ffe:	d511      	bpl.n	8003024 <__aeabi_d2iz+0x30>
 8003000:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8003004:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8003008:	d912      	bls.n	8003030 <__aeabi_d2iz+0x3c>
 800300a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800300e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003012:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8003016:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800301a:	fa23 f002 	lsr.w	r0, r3, r2
 800301e:	bf18      	it	ne
 8003020:	4240      	negne	r0, r0
 8003022:	4770      	bx	lr
 8003024:	f04f 0000 	mov.w	r0, #0
 8003028:	4770      	bx	lr
 800302a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800302e:	d105      	bne.n	800303c <__aeabi_d2iz+0x48>
 8003030:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8003034:	bf08      	it	eq
 8003036:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800303a:	4770      	bx	lr
 800303c:	f04f 0000 	mov.w	r0, #0
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop

08003044 <__aeabi_d2uiz>:
 8003044:	004a      	lsls	r2, r1, #1
 8003046:	d211      	bcs.n	800306c <__aeabi_d2uiz+0x28>
 8003048:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800304c:	d211      	bcs.n	8003072 <__aeabi_d2uiz+0x2e>
 800304e:	d50d      	bpl.n	800306c <__aeabi_d2uiz+0x28>
 8003050:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8003054:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8003058:	d40e      	bmi.n	8003078 <__aeabi_d2uiz+0x34>
 800305a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800305e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003062:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8003066:	fa23 f002 	lsr.w	r0, r3, r2
 800306a:	4770      	bx	lr
 800306c:	f04f 0000 	mov.w	r0, #0
 8003070:	4770      	bx	lr
 8003072:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8003076:	d102      	bne.n	800307e <__aeabi_d2uiz+0x3a>
 8003078:	f04f 30ff 	mov.w	r0, #4294967295
 800307c:	4770      	bx	lr
 800307e:	f04f 0000 	mov.w	r0, #0
 8003082:	4770      	bx	lr

08003084 <__aeabi_d2f>:
 8003084:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8003088:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800308c:	bf24      	itt	cs
 800308e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8003092:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8003096:	d90d      	bls.n	80030b4 <__aeabi_d2f+0x30>
 8003098:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800309c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80030a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80030a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80030a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80030ac:	bf08      	it	eq
 80030ae:	f020 0001 	biceq.w	r0, r0, #1
 80030b2:	4770      	bx	lr
 80030b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80030b8:	d121      	bne.n	80030fe <__aeabi_d2f+0x7a>
 80030ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80030be:	bfbc      	itt	lt
 80030c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80030c4:	4770      	bxlt	lr
 80030c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80030ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80030ce:	f1c2 0218 	rsb	r2, r2, #24
 80030d2:	f1c2 0c20 	rsb	ip, r2, #32
 80030d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80030da:	fa20 f002 	lsr.w	r0, r0, r2
 80030de:	bf18      	it	ne
 80030e0:	f040 0001 	orrne.w	r0, r0, #1
 80030e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80030e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80030ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80030f0:	ea40 000c 	orr.w	r0, r0, ip
 80030f4:	fa23 f302 	lsr.w	r3, r3, r2
 80030f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80030fc:	e7cc      	b.n	8003098 <__aeabi_d2f+0x14>
 80030fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8003102:	d107      	bne.n	8003114 <__aeabi_d2f+0x90>
 8003104:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8003108:	bf1e      	ittt	ne
 800310a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800310e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8003112:	4770      	bxne	lr
 8003114:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8003118:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800311c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop

08003124 <__gesf2>:
 8003124:	f04f 3cff 	mov.w	ip, #4294967295
 8003128:	e006      	b.n	8003138 <__cmpsf2+0x4>
 800312a:	bf00      	nop

0800312c <__lesf2>:
 800312c:	f04f 0c01 	mov.w	ip, #1
 8003130:	e002      	b.n	8003138 <__cmpsf2+0x4>
 8003132:	bf00      	nop

08003134 <__cmpsf2>:
 8003134:	f04f 0c01 	mov.w	ip, #1
 8003138:	f84d cd04 	str.w	ip, [sp, #-4]!
 800313c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8003140:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8003144:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8003148:	bf18      	it	ne
 800314a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800314e:	d011      	beq.n	8003174 <__cmpsf2+0x40>
 8003150:	b001      	add	sp, #4
 8003152:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8003156:	bf18      	it	ne
 8003158:	ea90 0f01 	teqne	r0, r1
 800315c:	bf58      	it	pl
 800315e:	ebb2 0003 	subspl.w	r0, r2, r3
 8003162:	bf88      	it	hi
 8003164:	17c8      	asrhi	r0, r1, #31
 8003166:	bf38      	it	cc
 8003168:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800316c:	bf18      	it	ne
 800316e:	f040 0001 	orrne.w	r0, r0, #1
 8003172:	4770      	bx	lr
 8003174:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8003178:	d102      	bne.n	8003180 <__cmpsf2+0x4c>
 800317a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800317e:	d105      	bne.n	800318c <__cmpsf2+0x58>
 8003180:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8003184:	d1e4      	bne.n	8003150 <__cmpsf2+0x1c>
 8003186:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800318a:	d0e1      	beq.n	8003150 <__cmpsf2+0x1c>
 800318c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop

08003194 <__aeabi_cfrcmple>:
 8003194:	4684      	mov	ip, r0
 8003196:	4608      	mov	r0, r1
 8003198:	4661      	mov	r1, ip
 800319a:	e7ff      	b.n	800319c <__aeabi_cfcmpeq>

0800319c <__aeabi_cfcmpeq>:
 800319c:	b50f      	push	{r0, r1, r2, r3, lr}
 800319e:	f7ff ffc9 	bl	8003134 <__cmpsf2>
 80031a2:	2800      	cmp	r0, #0
 80031a4:	bf48      	it	mi
 80031a6:	f110 0f00 	cmnmi.w	r0, #0
 80031aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080031ac <__aeabi_fcmpeq>:
 80031ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80031b0:	f7ff fff4 	bl	800319c <__aeabi_cfcmpeq>
 80031b4:	bf0c      	ite	eq
 80031b6:	2001      	moveq	r0, #1
 80031b8:	2000      	movne	r0, #0
 80031ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80031be:	bf00      	nop

080031c0 <__aeabi_fcmplt>:
 80031c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80031c4:	f7ff ffea 	bl	800319c <__aeabi_cfcmpeq>
 80031c8:	bf34      	ite	cc
 80031ca:	2001      	movcc	r0, #1
 80031cc:	2000      	movcs	r0, #0
 80031ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80031d2:	bf00      	nop

080031d4 <__aeabi_fcmple>:
 80031d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80031d8:	f7ff ffe0 	bl	800319c <__aeabi_cfcmpeq>
 80031dc:	bf94      	ite	ls
 80031de:	2001      	movls	r0, #1
 80031e0:	2000      	movhi	r0, #0
 80031e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80031e6:	bf00      	nop

080031e8 <__aeabi_fcmpge>:
 80031e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80031ec:	f7ff ffd2 	bl	8003194 <__aeabi_cfrcmple>
 80031f0:	bf94      	ite	ls
 80031f2:	2001      	movls	r0, #1
 80031f4:	2000      	movhi	r0, #0
 80031f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80031fa:	bf00      	nop

080031fc <__aeabi_fcmpgt>:
 80031fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003200:	f7ff ffc8 	bl	8003194 <__aeabi_cfrcmple>
 8003204:	bf34      	ite	cc
 8003206:	2001      	movcc	r0, #1
 8003208:	2000      	movcs	r0, #0
 800320a:	f85d fb08 	ldr.w	pc, [sp], #8
 800320e:	bf00      	nop

08003210 <__aeabi_d2lz>:
 8003210:	b538      	push	{r3, r4, r5, lr}
 8003212:	4605      	mov	r5, r0
 8003214:	460c      	mov	r4, r1
 8003216:	2200      	movs	r2, #0
 8003218:	2300      	movs	r3, #0
 800321a:	4628      	mov	r0, r5
 800321c:	4621      	mov	r1, r4
 800321e:	f7ff feab 	bl	8002f78 <__aeabi_dcmplt>
 8003222:	b928      	cbnz	r0, 8003230 <__aeabi_d2lz+0x20>
 8003224:	4628      	mov	r0, r5
 8003226:	4621      	mov	r1, r4
 8003228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800322c:	f000 b80a 	b.w	8003244 <__aeabi_d2ulz>
 8003230:	4628      	mov	r0, r5
 8003232:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8003236:	f000 f805 	bl	8003244 <__aeabi_d2ulz>
 800323a:	4240      	negs	r0, r0
 800323c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003240:	bd38      	pop	{r3, r4, r5, pc}
 8003242:	bf00      	nop

08003244 <__aeabi_d2ulz>:
 8003244:	b5d0      	push	{r4, r6, r7, lr}
 8003246:	2200      	movs	r2, #0
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <__aeabi_d2ulz+0x34>)
 800324a:	4606      	mov	r6, r0
 800324c:	460f      	mov	r7, r1
 800324e:	f7ff fc21 	bl	8002a94 <__aeabi_dmul>
 8003252:	f7ff fef7 	bl	8003044 <__aeabi_d2uiz>
 8003256:	4604      	mov	r4, r0
 8003258:	f7ff fba2 	bl	80029a0 <__aeabi_ui2d>
 800325c:	2200      	movs	r2, #0
 800325e:	4b07      	ldr	r3, [pc, #28]	; (800327c <__aeabi_d2ulz+0x38>)
 8003260:	f7ff fc18 	bl	8002a94 <__aeabi_dmul>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4630      	mov	r0, r6
 800326a:	4639      	mov	r1, r7
 800326c:	f7ff fa5a 	bl	8002724 <__aeabi_dsub>
 8003270:	f7ff fee8 	bl	8003044 <__aeabi_d2uiz>
 8003274:	4621      	mov	r1, r4
 8003276:	bdd0      	pop	{r4, r6, r7, pc}
 8003278:	3df00000 	.word	0x3df00000
 800327c:	41f00000 	.word	0x41f00000

08003280 <__aeabi_frsub>:
 8003280:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8003284:	e002      	b.n	800328c <__addsf3>
 8003286:	bf00      	nop

08003288 <__aeabi_fsub>:
 8003288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800328c <__addsf3>:
 800328c:	0042      	lsls	r2, r0, #1
 800328e:	bf1f      	itttt	ne
 8003290:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8003294:	ea92 0f03 	teqne	r2, r3
 8003298:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800329c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80032a0:	d06a      	beq.n	8003378 <__addsf3+0xec>
 80032a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80032a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80032aa:	bfc1      	itttt	gt
 80032ac:	18d2      	addgt	r2, r2, r3
 80032ae:	4041      	eorgt	r1, r0
 80032b0:	4048      	eorgt	r0, r1
 80032b2:	4041      	eorgt	r1, r0
 80032b4:	bfb8      	it	lt
 80032b6:	425b      	neglt	r3, r3
 80032b8:	2b19      	cmp	r3, #25
 80032ba:	bf88      	it	hi
 80032bc:	4770      	bxhi	lr
 80032be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80032c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80032c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80032ca:	bf18      	it	ne
 80032cc:	4240      	negne	r0, r0
 80032ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80032d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80032d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80032da:	bf18      	it	ne
 80032dc:	4249      	negne	r1, r1
 80032de:	ea92 0f03 	teq	r2, r3
 80032e2:	d03f      	beq.n	8003364 <__addsf3+0xd8>
 80032e4:	f1a2 0201 	sub.w	r2, r2, #1
 80032e8:	fa41 fc03 	asr.w	ip, r1, r3
 80032ec:	eb10 000c 	adds.w	r0, r0, ip
 80032f0:	f1c3 0320 	rsb	r3, r3, #32
 80032f4:	fa01 f103 	lsl.w	r1, r1, r3
 80032f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80032fc:	d502      	bpl.n	8003304 <__addsf3+0x78>
 80032fe:	4249      	negs	r1, r1
 8003300:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8003304:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8003308:	d313      	bcc.n	8003332 <__addsf3+0xa6>
 800330a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800330e:	d306      	bcc.n	800331e <__addsf3+0x92>
 8003310:	0840      	lsrs	r0, r0, #1
 8003312:	ea4f 0131 	mov.w	r1, r1, rrx
 8003316:	f102 0201 	add.w	r2, r2, #1
 800331a:	2afe      	cmp	r2, #254	; 0xfe
 800331c:	d251      	bcs.n	80033c2 <__addsf3+0x136>
 800331e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8003322:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8003326:	bf08      	it	eq
 8003328:	f020 0001 	biceq.w	r0, r0, #1
 800332c:	ea40 0003 	orr.w	r0, r0, r3
 8003330:	4770      	bx	lr
 8003332:	0049      	lsls	r1, r1, #1
 8003334:	eb40 0000 	adc.w	r0, r0, r0
 8003338:	3a01      	subs	r2, #1
 800333a:	bf28      	it	cs
 800333c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8003340:	d2ed      	bcs.n	800331e <__addsf3+0x92>
 8003342:	fab0 fc80 	clz	ip, r0
 8003346:	f1ac 0c08 	sub.w	ip, ip, #8
 800334a:	ebb2 020c 	subs.w	r2, r2, ip
 800334e:	fa00 f00c 	lsl.w	r0, r0, ip
 8003352:	bfaa      	itet	ge
 8003354:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8003358:	4252      	neglt	r2, r2
 800335a:	4318      	orrge	r0, r3
 800335c:	bfbc      	itt	lt
 800335e:	40d0      	lsrlt	r0, r2
 8003360:	4318      	orrlt	r0, r3
 8003362:	4770      	bx	lr
 8003364:	f092 0f00 	teq	r2, #0
 8003368:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800336c:	bf06      	itte	eq
 800336e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8003372:	3201      	addeq	r2, #1
 8003374:	3b01      	subne	r3, #1
 8003376:	e7b5      	b.n	80032e4 <__addsf3+0x58>
 8003378:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800337c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8003380:	bf18      	it	ne
 8003382:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8003386:	d021      	beq.n	80033cc <__addsf3+0x140>
 8003388:	ea92 0f03 	teq	r2, r3
 800338c:	d004      	beq.n	8003398 <__addsf3+0x10c>
 800338e:	f092 0f00 	teq	r2, #0
 8003392:	bf08      	it	eq
 8003394:	4608      	moveq	r0, r1
 8003396:	4770      	bx	lr
 8003398:	ea90 0f01 	teq	r0, r1
 800339c:	bf1c      	itt	ne
 800339e:	2000      	movne	r0, #0
 80033a0:	4770      	bxne	lr
 80033a2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80033a6:	d104      	bne.n	80033b2 <__addsf3+0x126>
 80033a8:	0040      	lsls	r0, r0, #1
 80033aa:	bf28      	it	cs
 80033ac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80033b0:	4770      	bx	lr
 80033b2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80033b6:	bf3c      	itt	cc
 80033b8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80033bc:	4770      	bxcc	lr
 80033be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80033c2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80033c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80033ca:	4770      	bx	lr
 80033cc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80033d0:	bf16      	itet	ne
 80033d2:	4608      	movne	r0, r1
 80033d4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80033d8:	4601      	movne	r1, r0
 80033da:	0242      	lsls	r2, r0, #9
 80033dc:	bf06      	itte	eq
 80033de:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80033e2:	ea90 0f01 	teqeq	r0, r1
 80033e6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80033ea:	4770      	bx	lr

080033ec <__aeabi_ui2f>:
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	e004      	b.n	80033fc <__aeabi_i2f+0x8>
 80033f2:	bf00      	nop

080033f4 <__aeabi_i2f>:
 80033f4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80033f8:	bf48      	it	mi
 80033fa:	4240      	negmi	r0, r0
 80033fc:	ea5f 0c00 	movs.w	ip, r0
 8003400:	bf08      	it	eq
 8003402:	4770      	bxeq	lr
 8003404:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8003408:	4601      	mov	r1, r0
 800340a:	f04f 0000 	mov.w	r0, #0
 800340e:	e01c      	b.n	800344a <__aeabi_l2f+0x2a>

08003410 <__aeabi_ul2f>:
 8003410:	ea50 0201 	orrs.w	r2, r0, r1
 8003414:	bf08      	it	eq
 8003416:	4770      	bxeq	lr
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	e00a      	b.n	8003434 <__aeabi_l2f+0x14>
 800341e:	bf00      	nop

08003420 <__aeabi_l2f>:
 8003420:	ea50 0201 	orrs.w	r2, r0, r1
 8003424:	bf08      	it	eq
 8003426:	4770      	bxeq	lr
 8003428:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800342c:	d502      	bpl.n	8003434 <__aeabi_l2f+0x14>
 800342e:	4240      	negs	r0, r0
 8003430:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003434:	ea5f 0c01 	movs.w	ip, r1
 8003438:	bf02      	ittt	eq
 800343a:	4684      	moveq	ip, r0
 800343c:	4601      	moveq	r1, r0
 800343e:	2000      	moveq	r0, #0
 8003440:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8003444:	bf08      	it	eq
 8003446:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800344a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800344e:	fabc f28c 	clz	r2, ip
 8003452:	3a08      	subs	r2, #8
 8003454:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8003458:	db10      	blt.n	800347c <__aeabi_l2f+0x5c>
 800345a:	fa01 fc02 	lsl.w	ip, r1, r2
 800345e:	4463      	add	r3, ip
 8003460:	fa00 fc02 	lsl.w	ip, r0, r2
 8003464:	f1c2 0220 	rsb	r2, r2, #32
 8003468:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800346c:	fa20 f202 	lsr.w	r2, r0, r2
 8003470:	eb43 0002 	adc.w	r0, r3, r2
 8003474:	bf08      	it	eq
 8003476:	f020 0001 	biceq.w	r0, r0, #1
 800347a:	4770      	bx	lr
 800347c:	f102 0220 	add.w	r2, r2, #32
 8003480:	fa01 fc02 	lsl.w	ip, r1, r2
 8003484:	f1c2 0220 	rsb	r2, r2, #32
 8003488:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800348c:	fa21 f202 	lsr.w	r2, r1, r2
 8003490:	eb43 0002 	adc.w	r0, r3, r2
 8003494:	bf08      	it	eq
 8003496:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800349a:	4770      	bx	lr

0800349c <__aeabi_fmul>:
 800349c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80034a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80034a4:	bf1e      	ittt	ne
 80034a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80034aa:	ea92 0f0c 	teqne	r2, ip
 80034ae:	ea93 0f0c 	teqne	r3, ip
 80034b2:	d06f      	beq.n	8003594 <__aeabi_fmul+0xf8>
 80034b4:	441a      	add	r2, r3
 80034b6:	ea80 0c01 	eor.w	ip, r0, r1
 80034ba:	0240      	lsls	r0, r0, #9
 80034bc:	bf18      	it	ne
 80034be:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80034c2:	d01e      	beq.n	8003502 <__aeabi_fmul+0x66>
 80034c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034c8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80034cc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80034d0:	fba0 3101 	umull	r3, r1, r0, r1
 80034d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80034d8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80034dc:	bf3e      	ittt	cc
 80034de:	0049      	lslcc	r1, r1, #1
 80034e0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80034e4:	005b      	lslcc	r3, r3, #1
 80034e6:	ea40 0001 	orr.w	r0, r0, r1
 80034ea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80034ee:	2afd      	cmp	r2, #253	; 0xfd
 80034f0:	d81d      	bhi.n	800352e <__aeabi_fmul+0x92>
 80034f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80034fa:	bf08      	it	eq
 80034fc:	f020 0001 	biceq.w	r0, r0, #1
 8003500:	4770      	bx	lr
 8003502:	f090 0f00 	teq	r0, #0
 8003506:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800350a:	bf08      	it	eq
 800350c:	0249      	lsleq	r1, r1, #9
 800350e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8003512:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8003516:	3a7f      	subs	r2, #127	; 0x7f
 8003518:	bfc2      	ittt	gt
 800351a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800351e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8003522:	4770      	bxgt	lr
 8003524:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	3a01      	subs	r2, #1
 800352e:	dc5d      	bgt.n	80035ec <__aeabi_fmul+0x150>
 8003530:	f112 0f19 	cmn.w	r2, #25
 8003534:	bfdc      	itt	le
 8003536:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800353a:	4770      	bxle	lr
 800353c:	f1c2 0200 	rsb	r2, r2, #0
 8003540:	0041      	lsls	r1, r0, #1
 8003542:	fa21 f102 	lsr.w	r1, r1, r2
 8003546:	f1c2 0220 	rsb	r2, r2, #32
 800354a:	fa00 fc02 	lsl.w	ip, r0, r2
 800354e:	ea5f 0031 	movs.w	r0, r1, rrx
 8003552:	f140 0000 	adc.w	r0, r0, #0
 8003556:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800355a:	bf08      	it	eq
 800355c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8003560:	4770      	bx	lr
 8003562:	f092 0f00 	teq	r2, #0
 8003566:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800356a:	bf02      	ittt	eq
 800356c:	0040      	lsleq	r0, r0, #1
 800356e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8003572:	3a01      	subeq	r2, #1
 8003574:	d0f9      	beq.n	800356a <__aeabi_fmul+0xce>
 8003576:	ea40 000c 	orr.w	r0, r0, ip
 800357a:	f093 0f00 	teq	r3, #0
 800357e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8003582:	bf02      	ittt	eq
 8003584:	0049      	lsleq	r1, r1, #1
 8003586:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800358a:	3b01      	subeq	r3, #1
 800358c:	d0f9      	beq.n	8003582 <__aeabi_fmul+0xe6>
 800358e:	ea41 010c 	orr.w	r1, r1, ip
 8003592:	e78f      	b.n	80034b4 <__aeabi_fmul+0x18>
 8003594:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8003598:	ea92 0f0c 	teq	r2, ip
 800359c:	bf18      	it	ne
 800359e:	ea93 0f0c 	teqne	r3, ip
 80035a2:	d00a      	beq.n	80035ba <__aeabi_fmul+0x11e>
 80035a4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80035a8:	bf18      	it	ne
 80035aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80035ae:	d1d8      	bne.n	8003562 <__aeabi_fmul+0xc6>
 80035b0:	ea80 0001 	eor.w	r0, r0, r1
 80035b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80035b8:	4770      	bx	lr
 80035ba:	f090 0f00 	teq	r0, #0
 80035be:	bf17      	itett	ne
 80035c0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80035c4:	4608      	moveq	r0, r1
 80035c6:	f091 0f00 	teqne	r1, #0
 80035ca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80035ce:	d014      	beq.n	80035fa <__aeabi_fmul+0x15e>
 80035d0:	ea92 0f0c 	teq	r2, ip
 80035d4:	d101      	bne.n	80035da <__aeabi_fmul+0x13e>
 80035d6:	0242      	lsls	r2, r0, #9
 80035d8:	d10f      	bne.n	80035fa <__aeabi_fmul+0x15e>
 80035da:	ea93 0f0c 	teq	r3, ip
 80035de:	d103      	bne.n	80035e8 <__aeabi_fmul+0x14c>
 80035e0:	024b      	lsls	r3, r1, #9
 80035e2:	bf18      	it	ne
 80035e4:	4608      	movne	r0, r1
 80035e6:	d108      	bne.n	80035fa <__aeabi_fmul+0x15e>
 80035e8:	ea80 0001 	eor.w	r0, r0, r1
 80035ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80035f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80035f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80035f8:	4770      	bx	lr
 80035fa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80035fe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8003602:	4770      	bx	lr

08003604 <__aeabi_fdiv>:
 8003604:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003608:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800360c:	bf1e      	ittt	ne
 800360e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8003612:	ea92 0f0c 	teqne	r2, ip
 8003616:	ea93 0f0c 	teqne	r3, ip
 800361a:	d069      	beq.n	80036f0 <__aeabi_fdiv+0xec>
 800361c:	eba2 0203 	sub.w	r2, r2, r3
 8003620:	ea80 0c01 	eor.w	ip, r0, r1
 8003624:	0249      	lsls	r1, r1, #9
 8003626:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800362a:	d037      	beq.n	800369c <__aeabi_fdiv+0x98>
 800362c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003630:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8003634:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8003638:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800363c:	428b      	cmp	r3, r1
 800363e:	bf38      	it	cc
 8003640:	005b      	lslcc	r3, r3, #1
 8003642:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8003646:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800364a:	428b      	cmp	r3, r1
 800364c:	bf24      	itt	cs
 800364e:	1a5b      	subcs	r3, r3, r1
 8003650:	ea40 000c 	orrcs.w	r0, r0, ip
 8003654:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8003658:	bf24      	itt	cs
 800365a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800365e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003662:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8003666:	bf24      	itt	cs
 8003668:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800366c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8003670:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8003674:	bf24      	itt	cs
 8003676:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800367a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	bf18      	it	ne
 8003682:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8003686:	d1e0      	bne.n	800364a <__aeabi_fdiv+0x46>
 8003688:	2afd      	cmp	r2, #253	; 0xfd
 800368a:	f63f af50 	bhi.w	800352e <__aeabi_fmul+0x92>
 800368e:	428b      	cmp	r3, r1
 8003690:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8003694:	bf08      	it	eq
 8003696:	f020 0001 	biceq.w	r0, r0, #1
 800369a:	4770      	bx	lr
 800369c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80036a0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80036a4:	327f      	adds	r2, #127	; 0x7f
 80036a6:	bfc2      	ittt	gt
 80036a8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80036ac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80036b0:	4770      	bxgt	lr
 80036b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	3a01      	subs	r2, #1
 80036bc:	e737      	b.n	800352e <__aeabi_fmul+0x92>
 80036be:	f092 0f00 	teq	r2, #0
 80036c2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80036c6:	bf02      	ittt	eq
 80036c8:	0040      	lsleq	r0, r0, #1
 80036ca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80036ce:	3a01      	subeq	r2, #1
 80036d0:	d0f9      	beq.n	80036c6 <__aeabi_fdiv+0xc2>
 80036d2:	ea40 000c 	orr.w	r0, r0, ip
 80036d6:	f093 0f00 	teq	r3, #0
 80036da:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80036de:	bf02      	ittt	eq
 80036e0:	0049      	lsleq	r1, r1, #1
 80036e2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80036e6:	3b01      	subeq	r3, #1
 80036e8:	d0f9      	beq.n	80036de <__aeabi_fdiv+0xda>
 80036ea:	ea41 010c 	orr.w	r1, r1, ip
 80036ee:	e795      	b.n	800361c <__aeabi_fdiv+0x18>
 80036f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80036f4:	ea92 0f0c 	teq	r2, ip
 80036f8:	d108      	bne.n	800370c <__aeabi_fdiv+0x108>
 80036fa:	0242      	lsls	r2, r0, #9
 80036fc:	f47f af7d 	bne.w	80035fa <__aeabi_fmul+0x15e>
 8003700:	ea93 0f0c 	teq	r3, ip
 8003704:	f47f af70 	bne.w	80035e8 <__aeabi_fmul+0x14c>
 8003708:	4608      	mov	r0, r1
 800370a:	e776      	b.n	80035fa <__aeabi_fmul+0x15e>
 800370c:	ea93 0f0c 	teq	r3, ip
 8003710:	d104      	bne.n	800371c <__aeabi_fdiv+0x118>
 8003712:	024b      	lsls	r3, r1, #9
 8003714:	f43f af4c 	beq.w	80035b0 <__aeabi_fmul+0x114>
 8003718:	4608      	mov	r0, r1
 800371a:	e76e      	b.n	80035fa <__aeabi_fmul+0x15e>
 800371c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8003720:	bf18      	it	ne
 8003722:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8003726:	d1ca      	bne.n	80036be <__aeabi_fdiv+0xba>
 8003728:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800372c:	f47f af5c 	bne.w	80035e8 <__aeabi_fmul+0x14c>
 8003730:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8003734:	f47f af3c 	bne.w	80035b0 <__aeabi_fmul+0x114>
 8003738:	e75f      	b.n	80035fa <__aeabi_fmul+0x15e>
 800373a:	bf00      	nop

0800373c <__aeabi_f2uiz>:
 800373c:	0042      	lsls	r2, r0, #1
 800373e:	d20e      	bcs.n	800375e <__aeabi_f2uiz+0x22>
 8003740:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8003744:	d30b      	bcc.n	800375e <__aeabi_f2uiz+0x22>
 8003746:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800374a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800374e:	d409      	bmi.n	8003764 <__aeabi_f2uiz+0x28>
 8003750:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8003754:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003758:	fa23 f002 	lsr.w	r0, r3, r2
 800375c:	4770      	bx	lr
 800375e:	f04f 0000 	mov.w	r0, #0
 8003762:	4770      	bx	lr
 8003764:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8003768:	d101      	bne.n	800376e <__aeabi_f2uiz+0x32>
 800376a:	0242      	lsls	r2, r0, #9
 800376c:	d102      	bne.n	8003774 <__aeabi_f2uiz+0x38>
 800376e:	f04f 30ff 	mov.w	r0, #4294967295
 8003772:	4770      	bx	lr
 8003774:	f04f 0000 	mov.w	r0, #0
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop

0800377c <main>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800377c:	4a5c      	ldr	r2, [pc, #368]	; (80038f0 <main+0x174>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800377e:	495d      	ldr	r1, [pc, #372]	; (80038f4 <main+0x178>)
 8003780:	6813      	ldr	r3, [r2, #0]
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003782:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003786:	f043 0310 	orr.w	r3, r3, #16
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	68ca      	ldr	r2, [r1, #12]
  reg_value  =  (reg_value                                   |
 800378e:	4b5a      	ldr	r3, [pc, #360]	; (80038f8 <main+0x17c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003790:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003794:	0412      	lsls	r2, r2, #16
 8003796:	0c12      	lsrs	r2, r2, #16
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003798:	4d58      	ldr	r5, [pc, #352]	; (80038fc <main+0x180>)
  reg_value  =  (reg_value                                   |
 800379a:	4313      	orrs	r3, r2
 800379c:	b0af      	sub	sp, #188	; 0xbc
  SCB->AIRCR =  reg_value;
 800379e:	60cb      	str	r3, [r1, #12]
  HAL_InitTick(TICK_INT_PRIORITY);
 80037a0:	200f      	movs	r0, #15
 80037a2:	f7fe f9b7 	bl	8001b14 <HAL_InitTick.isra.0>
 80037a6:	69ab      	ldr	r3, [r5, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80037a8:	4a55      	ldr	r2, [pc, #340]	; (8003900 <main+0x184>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	61ab      	str	r3, [r5, #24]
 80037b0:	69ab      	ldr	r3, [r5, #24]
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037b2:	2100      	movs	r1, #0
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	930c      	str	r3, [sp, #48]	; 0x30
 80037ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_PWR_CLK_ENABLE();
 80037bc:	69eb      	ldr	r3, [r5, #28]
 80037be:	a826      	add	r0, sp, #152	; 0x98
 80037c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c4:	61eb      	str	r3, [r5, #28]
 80037c6:	69eb      	ldr	r3, [r5, #28]
 80037c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80037ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80037d0:	6853      	ldr	r3, [r2, #4]
 80037d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80037d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037da:	6053      	str	r3, [r2, #4]
 80037dc:	2214      	movs	r2, #20
 80037de:	f002 f8a9 	bl	8005934 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037e2:	2214      	movs	r2, #20
 80037e4:	2100      	movs	r1, #0
 80037e6:	a81d      	add	r0, sp, #116	; 0x74
 80037e8:	f002 f8a4 	bl	8005934 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037f2:	9328      	str	r3, [sp, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037f4:	e9cd 3224 	strd	r3, r2, [sp, #144]	; 0x90
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037f8:	2302      	movs	r3, #2
 80037fa:	932b      	str	r3, [sp, #172]	; 0xac
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037fc:	686b      	ldr	r3, [r5, #4]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b04      	cmp	r3, #4
 8003804:	d007      	beq.n	8003816 <main+0x9a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003806:	686b      	ldr	r3, [r5, #4]
 8003808:	f003 030c 	and.w	r3, r3, #12
 800380c:	2b08      	cmp	r3, #8
 800380e:	d141      	bne.n	8003894 <main+0x118>
 8003810:	686b      	ldr	r3, [r5, #4]
 8003812:	03db      	lsls	r3, r3, #15
 8003814:	d53e      	bpl.n	8003894 <main+0x118>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003816:	682b      	ldr	r3, [r5, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003818:	686b      	ldr	r3, [r5, #4]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b08      	cmp	r3, #8
 8003820:	d051      	beq.n	80038c6 <main+0x14a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003822:	2200      	movs	r2, #0
 8003824:	4b37      	ldr	r3, [pc, #220]	; (8003904 <main+0x188>)
 8003826:	661a      	str	r2, [r3, #96]	; 0x60
  return uwTick;
 8003828:	4a37      	ldr	r2, [pc, #220]	; (8003908 <main+0x18c>)
 800382a:	6811      	ldr	r1, [r2, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800382c:	682b      	ldr	r3, [r5, #0]
 800382e:	019e      	lsls	r6, r3, #6
 8003830:	d43f      	bmi.n	80038b2 <main+0x136>

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003832:	2101      	movs	r1, #1
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003834:	686b      	ldr	r3, [r5, #4]
 8003836:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800383a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800383c:	686b      	ldr	r3, [r5, #4]
 800383e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8003842:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8003846:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003848:	4b2e      	ldr	r3, [pc, #184]	; (8003904 <main+0x188>)
 800384a:	6619      	str	r1, [r3, #96]	; 0x60
 800384c:	6811      	ldr	r1, [r2, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800384e:	682b      	ldr	r3, [r5, #0]
 8003850:	019c      	lsls	r4, r3, #6
 8003852:	d533      	bpl.n	80038bc <main+0x140>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003854:	2302      	movs	r3, #2
 8003856:	210f      	movs	r1, #15
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003858:	f44f 6280 	mov.w	r2, #1024	; 0x400
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800385c:	e9cd 131d 	strd	r1, r3, [sp, #116]	; 0x74
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003860:	2300      	movs	r3, #0
 8003862:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003866:	4a22      	ldr	r2, [pc, #136]	; (80038f0 <main+0x174>)
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003868:	9321      	str	r3, [sp, #132]	; 0x84
 800386a:	6813      	ldr	r3, [r2, #0]
 800386c:	f013 0f06 	tst.w	r3, #6
 8003870:	d032      	beq.n	80038d8 <main+0x15c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003872:	686b      	ldr	r3, [r5, #4]
 8003874:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003878:	606b      	str	r3, [r5, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800387a:	686b      	ldr	r3, [r5, #4]
 800387c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003880:	606b      	str	r3, [r5, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003882:	686b      	ldr	r3, [r5, #4]
 8003884:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003888:	606b      	str	r3, [r5, #4]
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388a:	682b      	ldr	r3, [r5, #0]
 800388c:	019a      	lsls	r2, r3, #6
 800388e:	d43d      	bmi.n	800390c <main+0x190>
  __ASM volatile ("cpsid i" : : : "memory");
 8003890:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003892:	e7fe      	b.n	8003892 <main+0x116>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003894:	682b      	ldr	r3, [r5, #0]
 8003896:	4a1c      	ldr	r2, [pc, #112]	; (8003908 <main+0x18c>)
 8003898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389c:	602b      	str	r3, [r5, #0]
 800389e:	6811      	ldr	r1, [r2, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a0:	682b      	ldr	r3, [r5, #0]
 80038a2:	039f      	lsls	r7, r3, #14
 80038a4:	d4b8      	bmi.n	8003818 <main+0x9c>
 80038a6:	6813      	ldr	r3, [r2, #0]
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a8:	1a5b      	subs	r3, r3, r1
 80038aa:	2b64      	cmp	r3, #100	; 0x64
 80038ac:	d9f8      	bls.n	80038a0 <main+0x124>
 80038ae:	b672      	cpsid	i
 80038b0:	e7fe      	b.n	80038b0 <main+0x134>
 80038b2:	6813      	ldr	r3, [r2, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b4:	1a5b      	subs	r3, r3, r1
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d9b8      	bls.n	800382c <main+0xb0>
 80038ba:	e7f8      	b.n	80038ae <main+0x132>
 80038bc:	6813      	ldr	r3, [r2, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038be:	1a5b      	subs	r3, r3, r1
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d9c4      	bls.n	800384e <main+0xd2>
 80038c4:	e7f3      	b.n	80038ae <main+0x132>
        pll_config = RCC->CFGR;
 80038c6:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c8:	03d8      	lsls	r0, r3, #15
 80038ca:	d5f0      	bpl.n	80038ae <main+0x132>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80038d4:	d1eb      	bne.n	80038ae <main+0x132>
 80038d6:	e7bd      	b.n	8003854 <main+0xd8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d8:	6813      	ldr	r3, [r2, #0]
 80038da:	f023 0307 	bic.w	r3, r3, #7
 80038de:	f043 0302 	orr.w	r3, r3, #2
 80038e2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e4:	6813      	ldr	r3, [r2, #0]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d1d0      	bne.n	8003890 <main+0x114>
 80038ee:	e7c0      	b.n	8003872 <main+0xf6>
 80038f0:	40022000 	.word	0x40022000
 80038f4:	e000ed00 	.word	0xe000ed00
 80038f8:	05fa0300 	.word	0x05fa0300
 80038fc:	40021000 	.word	0x40021000
 8003900:	40010000 	.word	0x40010000
 8003904:	42420000 	.word	0x42420000
 8003908:	20000208 	.word	0x20000208
    /* Get Start Tick */
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800390c:	f241 3188 	movw	r1, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003910:	686b      	ldr	r3, [r5, #4]
 8003912:	4cbc      	ldr	r4, [pc, #752]	; (8003c04 <main+0x488>)
 8003914:	f023 0303 	bic.w	r3, r3, #3
 8003918:	f043 0302 	orr.w	r3, r3, #2
 800391c:	606b      	str	r3, [r5, #4]
 800391e:	6822      	ldr	r2, [r4, #0]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003920:	686b      	ldr	r3, [r5, #4]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b08      	cmp	r3, #8
 8003928:	f040 8141 	bne.w	8003bae <main+0x432>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800392c:	4ab6      	ldr	r2, [pc, #728]	; (8003c08 <main+0x48c>)
 800392e:	6813      	ldr	r3, [r2, #0]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	2b02      	cmp	r3, #2
 8003936:	f200 8140 	bhi.w	8003bba <main+0x43e>
{
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800393a:	aa19      	add	r2, sp, #100	; 0x64
 800393c:	4692      	mov	sl, r2
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800393e:	686b      	ldr	r3, [r5, #4]
 8003940:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003944:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003948:	606b      	str	r3, [r5, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800394a:	686b      	ldr	r3, [r5, #4]
 800394c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003950:	606b      	str	r3, [r5, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003952:	4bae      	ldr	r3, [pc, #696]	; (8003c0c <main+0x490>)
 8003954:	f103 0710 	add.w	r7, r3, #16
 8003958:	4616      	mov	r6, r2
 800395a:	6818      	ldr	r0, [r3, #0]
 800395c:	6859      	ldr	r1, [r3, #4]
 800395e:	3308      	adds	r3, #8
 8003960:	c603      	stmia	r6!, {r0, r1}
 8003962:	42bb      	cmp	r3, r7
 8003964:	4632      	mov	r2, r6
 8003966:	d1f7      	bne.n	8003958 <main+0x1dc>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003968:	f240 2301 	movw	r3, #513	; 0x201
 800396c:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
  uint32_t sysclockfreq = 0U;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003970:	686b      	ldr	r3, [r5, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003972:	f003 020c 	and.w	r2, r3, #12
 8003976:	2a08      	cmp	r2, #8
 8003978:	f000 812c 	beq.w	8003bd4 <main+0x458>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800397c:	4fa4      	ldr	r7, [pc, #656]	; (8003c10 <main+0x494>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800397e:	2600      	movs	r6, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003980:	686b      	ldr	r3, [r5, #4]
 8003982:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8003c14 <main+0x498>
 8003986:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800398a:	f819 3003 	ldrb.w	r3, [r9, r3]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800398e:	f04f 0801 	mov.w	r8, #1
 8003992:	40df      	lsrs	r7, r3
 8003994:	4ba0      	ldr	r3, [pc, #640]	; (8003c18 <main+0x49c>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003996:	f04f 0b03 	mov.w	fp, #3
  HAL_InitTick(uwTickPrio);
 800399a:	6858      	ldr	r0, [r3, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800399c:	601f      	str	r7, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800399e:	f7fe f8b9 	bl	8001b14 <HAL_InitTick.isra.0>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a2:	9626      	str	r6, [sp, #152]	; 0x98
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80039a4:	69ab      	ldr	r3, [r5, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039a6:	4a9d      	ldr	r2, [pc, #628]	; (8003c1c <main+0x4a0>)
 80039a8:	f043 0310 	orr.w	r3, r3, #16
 80039ac:	61ab      	str	r3, [r5, #24]
 80039ae:	69ab      	ldr	r3, [r5, #24]
 80039b0:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	930a      	str	r3, [sp, #40]	; 0x28
 80039ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80039bc:	69ab      	ldr	r3, [r5, #24]
 80039be:	4998      	ldr	r1, [pc, #608]	; (8003c20 <main+0x4a4>)
 80039c0:	f043 0320 	orr.w	r3, r3, #32
 80039c4:	61ab      	str	r3, [r5, #24]
 80039c6:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80039c8:	4894      	ldr	r0, [pc, #592]	; (8003c1c <main+0x4a0>)
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	9309      	str	r3, [sp, #36]	; 0x24
 80039d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80039d2:	69ab      	ldr	r3, [r5, #24]
 80039d4:	f043 0304 	orr.w	r3, r3, #4
 80039d8:	61ab      	str	r3, [r5, #24]
 80039da:	69ab      	ldr	r3, [r5, #24]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	9308      	str	r3, [sp, #32]
 80039e2:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80039e4:	69ab      	ldr	r3, [r5, #24]
 80039e6:	f043 0308 	orr.w	r3, r3, #8
 80039ea:	61ab      	str	r3, [r5, #24]
 80039ec:	69ab      	ldr	r3, [r5, #24]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	9307      	str	r3, [sp, #28]
 80039f4:	9b07      	ldr	r3, [sp, #28]
 80039f6:	4b8b      	ldr	r3, [pc, #556]	; (8003c24 <main+0x4a8>)
 80039f8:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
 80039fc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8003a00:	6113      	str	r3, [r2, #16]
 8003a02:	4b89      	ldr	r3, [pc, #548]	; (8003c28 <main+0x4ac>)
 8003a04:	6119      	str	r1, [r3, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a0a:	e9cd 1824 	strd	r1, r8, [sp, #144]	; 0x90
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0e:	2102      	movs	r1, #2
 8003a10:	9127      	str	r1, [sp, #156]	; 0x9c
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003a12:	a924      	add	r1, sp, #144	; 0x90
 8003a14:	f7fc fd66 	bl	80004e4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8003a18:	f24c 0c3f 	movw	ip, #49215	; 0xc03f
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1c:	9626      	str	r6, [sp, #152]	; 0x98
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a1e:	e9cd c824 	strd	ip, r8, [sp, #144]	; 0x90
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a22:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a26:	f7fc fd5d 	bl	80004e4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8003a2a:	20ff      	movs	r0, #255	; 0xff
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a2c:	4a7f      	ldr	r2, [pc, #508]	; (8003c2c <main+0x4b0>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a2e:	e9cd 0824 	strd	r0, r8, [sp, #144]	; 0x90
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a32:	4610      	mov	r0, r2
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a34:	e9cd 6b26 	strd	r6, fp, [sp, #152]	; 0x98
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a38:	f7fc fd54 	bl	80004e4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8003a3c:	f640 4203 	movw	r2, #3075	; 0xc03
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a40:	4b79      	ldr	r3, [pc, #484]	; (8003c28 <main+0x4ac>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a42:	e9cd 2824 	strd	r2, r8, [sp, #144]	; 0x90
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a46:	4618      	mov	r0, r3
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a48:	e9cd 6b26 	strd	r6, fp, [sp, #152]	; 0x98
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a4c:	f7fc fd4a 	bl	80004e4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 8003a50:	2304      	movs	r3, #4
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a52:	9626      	str	r6, [sp, #152]	; 0x98
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a54:	e9cd 3624 	strd	r3, r6, [sp, #144]	; 0x90
	HAL_GPIO_Init(SYSTEM_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8003a58:	f7fc fd44 	bl	80004e4 <HAL_GPIO_Init>
	hi2c1.Init.ClockSpeed = 100000;
 8003a5c:	4b74      	ldr	r3, [pc, #464]	; (8003c30 <main+0x4b4>)
 8003a5e:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 8003c34 <main+0x4b8>
	hi2c1.Init.OwnAddress1 = 0;
 8003a62:	e9c4 6603 	strd	r6, r6, [r4, #12]
	hi2c1.Init.ClockSpeed = 100000;
 8003a66:	e9c4 c301 	strd	ip, r3, [r4, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a6e:	e9c4 3605 	strd	r3, r6, [r4, #20]
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a72:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a76:	e9c4 6607 	strd	r6, r6, [r4, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a7a:	6266      	str	r6, [r4, #36]	; 0x24
 8003a7c:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d16d      	bne.n	8003b60 <main+0x3e4>
    hi2c->Lock = HAL_UNLOCKED;
 8003a84:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a88:	9626      	str	r6, [sp, #152]	; 0x98
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a8a:	69ab      	ldr	r3, [r5, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a8c:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a8e:	f043 0308 	orr.w	r3, r3, #8
 8003a92:	61ab      	str	r3, [r5, #24]
 8003a94:	69ab      	ldr	r3, [r5, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a96:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	930e      	str	r3, [sp, #56]	; 0x38
 8003aa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003aa2:	2312      	movs	r3, #18
 8003aa4:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aa8:	f7fc fd1c 	bl	80004e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003aac:	69eb      	ldr	r3, [r5, #28]
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003aae:	f04f 0e80 	mov.w	lr, #128	; 0x80
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ab2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ab6:	61eb      	str	r3, [r5, #28]
 8003ab8:	69eb      	ldr	r3, [r5, #28]
  hdma->DmaBaseAddress = DMA1;
 8003aba:	2014      	movs	r0, #20
 8003abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac0:	930d      	str	r3, [sp, #52]	; 0x34
 8003ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ac4:	2310      	movs	r3, #16
 8003ac6:	495c      	ldr	r1, [pc, #368]	; (8003c38 <main+0x4bc>)
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ac8:	e9c4 e653 	strd	lr, r6, [r4, #332]	; 0x14c
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003acc:	e9c4 1350 	strd	r1, r3, [r4, #320]	; 0x140
 8003ad0:	4b5a      	ldr	r3, [pc, #360]	; (8003c3c <main+0x4c0>)
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003ad2:	e9c4 6655 	strd	r6, r6, [r4, #340]	; 0x154
 8003ad6:	e9c4 305f 	strd	r3, r0, [r4, #380]	; 0x17c
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ada:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ade:	f8c4 615c 	str.w	r6, [r4, #348]	; 0x15c
  tmp = hdma->Instance->CCR;
 8003ae2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ae4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8003c40 <main+0x4c4>
  hdma->Lock = HAL_UNLOCKED;
 8003ae8:	f44f 7080 	mov.w	r0, #256	; 0x100
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003aec:	ea02 020c 	and.w	r2, r2, ip
  tmp |=  hdma->Init.Direction        |
 8003af0:	f042 0290 	orr.w	r2, r2, #144	; 0x90
  hdma->Instance->CCR = tmp;
 8003af4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003af6:	e9c4 6e63 	strd	r6, lr, [r4, #396]	; 0x18c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003afa:	f04f 0e18 	mov.w	lr, #24
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8003afe:	f8df b144 	ldr.w	fp, [pc, #324]	; 8003c44 <main+0x4c8>
  hdma->DmaBaseAddress = DMA1;
 8003b02:	e9c4 3e70 	strd	r3, lr, [r4, #448]	; 0x1c0
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b06:	e9c4 b661 	strd	fp, r6, [r4, #388]	; 0x184
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b0a:	e9c4 6665 	strd	r6, r6, [r4, #404]	; 0x194
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b0e:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b12:	f8c4 6178 	str.w	r6, [r4, #376]	; 0x178
  hdma->Lock = HAL_UNLOCKED;
 8003b16:	f8a4 0160 	strh.w	r0, [r4, #352]	; 0x160
  tmp = hdma->Instance->CCR;
 8003b1a:	f8d3 e080 	ldr.w	lr, [r3, #128]	; 0x80
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003b1e:	4a4a      	ldr	r2, [pc, #296]	; (8003c48 <main+0x4cc>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003b20:	ea0e 0c0c 	and.w	ip, lr, ip
 8003b24:	f5a2 719e 	sub.w	r1, r2, #316	; 0x13c
  tmp |=  hdma->Init.Direction        |
 8003b28:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8003b2c:	63a2      	str	r2, [r4, #56]	; 0x38
 8003b2e:	f8c4 1164 	str.w	r1, [r4, #356]	; 0x164
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003b32:	3244      	adds	r2, #68	; 0x44
  hdma->Instance->CCR = tmp;
 8003b34:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
  hdma->Lock = HAL_UNLOCKED;
 8003b38:	f8a4 01a4 	strh.w	r0, [r4, #420]	; 0x1a4
 8003b3c:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003b40:	201f      	movs	r0, #31
 8003b42:	4631      	mov	r1, r6
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b44:	f8c4 61bc 	str.w	r6, [r4, #444]	; 0x1bc
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003b48:	63e2      	str	r2, [r4, #60]	; 0x3c
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003b4a:	f7fc ffa3 	bl	8000a94 <HAL_NVIC_SetPriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b52:	4e3e      	ldr	r6, [pc, #248]	; (8003c4c <main+0x4d0>)
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003b54:	2020      	movs	r0, #32
 8003b56:	6033      	str	r3, [r6, #0]
 8003b58:	f7fc ff9c 	bl	8000a94 <HAL_NVIC_SetPriority.constprop.0>
 8003b5c:	f8c6 8004 	str.w	r8, [r6, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b60:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003b62:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b64:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003b68:	6813      	ldr	r3, [r2, #0]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b6a:	4931      	ldr	r1, [pc, #196]	; (8003c30 <main+0x4b4>)
  __HAL_I2C_DISABLE(hi2c);
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b72:	6813      	ldr	r3, [r2, #0]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b74:	f8d4 c008 	ldr.w	ip, [r4, #8]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b7c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b7e:	6813      	ldr	r3, [r2, #0]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b80:	458c      	cmp	ip, r1
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b86:	6013      	str	r3, [r2, #0]
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b88:	686b      	ldr	r3, [r5, #4]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b8a:	bf98      	it	ls
 8003b8c:	4930      	ldrls	r1, [pc, #192]	; (8003c50 <main+0x4d4>)
 8003b8e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003b92:	444b      	add	r3, r9
 8003b94:	7c1b      	ldrb	r3, [r3, #16]
 8003b96:	bf88      	it	hi
 8003b98:	492e      	ldrhi	r1, [pc, #184]	; (8003c54 <main+0x4d8>)
 8003b9a:	fa27 f303 	lsr.w	r3, r7, r3
 8003b9e:	428b      	cmp	r3, r1
 8003ba0:	bf8c      	ite	hi
 8003ba2:	2100      	movhi	r1, #0
 8003ba4:	2101      	movls	r1, #1
 8003ba6:	2900      	cmp	r1, #0
 8003ba8:	d058      	beq.n	8003c5c <main+0x4e0>
 8003baa:	b672      	cpsid	i
	while (1)
 8003bac:	e7fe      	b.n	8003bac <main+0x430>
 8003bae:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	428b      	cmp	r3, r1
 8003bb4:	f67f aeb4 	bls.w	8003920 <main+0x1a4>
 8003bb8:	e66a      	b.n	8003890 <main+0x114>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	6813      	ldr	r3, [r2, #0]
 8003bbc:	f023 0307 	bic.w	r3, r3, #7
 8003bc0:	f043 0302 	orr.w	r3, r3, #2
 8003bc4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc6:	6813      	ldr	r3, [r2, #0]
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	f47f ae5f 	bne.w	8003890 <main+0x114>
 8003bd2:	e6b2      	b.n	800393a <main+0x1be>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bd4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003bd8:	32b8      	adds	r2, #184	; 0xb8
 8003bda:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bdc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bde:	f812 7c54 	ldrb.w	r7, [r2, #-84]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003be2:	d50b      	bpl.n	8003bfc <main+0x480>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003be4:	686b      	ldr	r3, [r5, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003be6:	4a0a      	ldr	r2, [pc, #40]	; (8003c10 <main+0x494>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003be8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bec:	4357      	muls	r7, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bee:	33b8      	adds	r3, #184	; 0xb8
 8003bf0:	446b      	add	r3, sp
 8003bf2:	f813 3c64 	ldrb.w	r3, [r3, #-100]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bf6:	fbb7 f7f3 	udiv	r7, r7, r3
 8003bfa:	e6c0      	b.n	800397e <main+0x202>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bfc:	4b16      	ldr	r3, [pc, #88]	; (8003c58 <main+0x4dc>)
 8003bfe:	435f      	muls	r7, r3
 8003c00:	e6bd      	b.n	800397e <main+0x202>
 8003c02:	bf00      	nop
 8003c04:	20000208 	.word	0x20000208
 8003c08:	40022000 	.word	0x40022000
 8003c0c:	0801bb3c 	.word	0x0801bb3c
 8003c10:	007a1200 	.word	0x007a1200
 8003c14:	0800a2f8 	.word	0x0800a2f8
 8003c18:	20000000 	.word	0x20000000
 8003c1c:	40011000 	.word	0x40011000
 8003c20:	0c030000 	.word	0x0c030000
 8003c24:	e03f0000 	.word	0xe03f0000
 8003c28:	40010c00 	.word	0x40010c00
 8003c2c:	40010800 	.word	0x40010800
 8003c30:	000186a0 	.word	0x000186a0
 8003c34:	40005400 	.word	0x40005400
 8003c38:	4002006c 	.word	0x4002006c
 8003c3c:	40020000 	.word	0x40020000
 8003c40:	ffffc00f 	.word	0xffffc00f
 8003c44:	40020080 	.word	0x40020080
 8003c48:	20000348 	.word	0x20000348
 8003c4c:	e000e100 	.word	0xe000e100
 8003c50:	001e847f 	.word	0x001e847f
 8003c54:	003d08ff 	.word	0x003d08ff
 8003c58:	003d0900 	.word	0x003d0900
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c5c:	4ecd      	ldr	r6, [pc, #820]	; (8003f94 <main+0x818>)
  freqrange = I2C_FREQRANGE(pclk1);
 8003c5e:	49ce      	ldr	r1, [pc, #824]	; (8003f98 <main+0x81c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c60:	45b4      	cmp	ip, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8003c62:	fbb3 f1f1 	udiv	r1, r3, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c66:	bf88      	it	hi
 8003c68:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c6c:	6850      	ldr	r0, [r2, #4]
 8003c6e:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8003c72:	ea40 0001 	orr.w	r0, r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c76:	bf82      	ittt	hi
 8003c78:	4371      	mulhi	r1, r6
 8003c7a:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8003c7e:	fbb1 f1f6 	udivhi	r1, r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c82:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c84:	6a10      	ldr	r0, [r2, #32]
 8003c86:	3101      	adds	r1, #1
 8003c88:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8003c8c:	4301      	orrs	r1, r0
 8003c8e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c90:	69d1      	ldr	r1, [r2, #28]
 8003c92:	1e5e      	subs	r6, r3, #1
 8003c94:	4bbf      	ldr	r3, [pc, #764]	; (8003f94 <main+0x818>)
 8003c96:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003c9a:	459c      	cmp	ip, r3
 8003c9c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003ca0:	f200 81f4 	bhi.w	800408c <main+0x910>
 8003ca4:	ea4f 034c 	mov.w	r3, ip, lsl #1
 8003ca8:	fbb6 f3f3 	udiv	r3, r6, r3
 8003cac:	f640 70fc 	movw	r0, #4092	; 0xffc
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	4203      	tst	r3, r0
 8003cb4:	f000 8211 	beq.w	80040da <main+0x95e>
 8003cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cc0:	6811      	ldr	r1, [r2, #0]
 8003cc2:	e9d4 3008 	ldrd	r3, r0, [r4, #32]
 8003cc6:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8003cca:	4303      	orrs	r3, r0
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cd0:	6891      	ldr	r1, [r2, #8]
 8003cd2:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
 8003cd6:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8003cda:	4303      	orrs	r3, r0
 8003cdc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ce4:	68d1      	ldr	r1, [r2, #12]
 8003ce6:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8003cea:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003cee:	4303      	orrs	r3, r0
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003cf4:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf6:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003cfe:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d00:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d06:	6361      	str	r1, [r4, #52]	; 0x34
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003d0c:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003d0e:	200c      	movs	r0, #12
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	616b      	str	r3, [r5, #20]
 8003d16:	696b      	ldr	r3, [r5, #20]
 8003d18:	4ea0      	ldr	r6, [pc, #640]	; (8003f9c <main+0x820>)
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	9306      	str	r3, [sp, #24]
 8003d20:	9b06      	ldr	r3, [sp, #24]
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003d22:	f7fc feb7 	bl	8000a94 <HAL_NVIC_SetPriority.constprop.0>
 8003d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003d2a:	200e      	movs	r0, #14
 8003d2c:	6033      	str	r3, [r6, #0]
 8003d2e:	f7fc feb1 	bl	8000a94 <HAL_NVIC_SetPriority.constprop.0>
 8003d32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003d36:	200f      	movs	r0, #15
 8003d38:	6033      	str	r3, [r6, #0]
 8003d3a:	f7fc feab 	bl	8000a94 <HAL_NVIC_SetPriority.constprop.0>
 8003d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8003d42:	2010      	movs	r0, #16
 8003d44:	6033      	str	r3, [r6, #0]
 8003d46:	f7fc fea5 	bl	8000a94 <HAL_NVIC_SetPriority.constprop.0>
 8003d4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8003d4e:	2011      	movs	r0, #17
 8003d50:	6033      	str	r3, [r6, #0]
 8003d52:	f7fc fe9f 	bl	8000a94 <HAL_NVIC_SetPriority.constprop.0>
 8003d56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d5a:	6033      	str	r3, [r6, #0]
	huart1.Init.BaudRate = 115200;
 8003d5c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003d60:	f04f 0b0c 	mov.w	fp, #12
	huart1.Init.BaudRate = 115200;
 8003d64:	f8df e238 	ldr.w	lr, [pc, #568]	; 8003fa0 <main+0x824>
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003d68:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
	huart1.Init.BaudRate = 115200;
 8003d6c:	e9c4 e316 	strd	lr, r3, [r4, #88]	; 0x58
  if (huart->gState == HAL_UART_STATE_RESET)
 8003d70:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d74:	e9c4 b11b 	strd	fp, r1, [r4, #108]	; 0x6c
	huart1.Init.Parity = UART_PARITY_NONE;
 8003d78:	66a1      	str	r1, [r4, #104]	; 0x68
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d7a:	6761      	str	r1, [r4, #116]	; 0x74
 8003d7c:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d16c      	bne.n	8003e5e <main+0x6e2>
    huart->Lock = HAL_UNLOCKED;
 8003d84:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d88:	9626      	str	r6, [sp, #152]	; 0x98
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d8a:	69ab      	ldr	r3, [r5, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d8c:	f44f 7c00 	mov.w	ip, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d94:	61ab      	str	r3, [r5, #24]
 8003d96:	69ab      	ldr	r3, [r5, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d98:	4882      	ldr	r0, [pc, #520]	; (8003fa4 <main+0x828>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d9e:	9310      	str	r3, [sp, #64]	; 0x40
 8003da0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003da2:	69ab      	ldr	r3, [r5, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da4:	a924      	add	r1, sp, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003da6:	f043 0304 	orr.w	r3, r3, #4
 8003daa:	61ab      	str	r3, [r5, #24]
 8003dac:	69ab      	ldr	r3, [r5, #24]
    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003dae:	f04f 0880 	mov.w	r8, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	930f      	str	r3, [sp, #60]	; 0x3c
 8003db8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e9cd c324 	strd	ip, r3, [sp, #144]	; 0x90
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	9327      	str	r3, [sp, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc4:	f7fc fb8e 	bl	80004e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dcc:	9626      	str	r6, [sp, #152]	; 0x98
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dce:	e9cd 3624 	strd	r3, r6, [sp, #144]	; 0x90
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd2:	f7fc fb87 	bl	80004e4 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dd6:	f04f 0e10 	mov.w	lr, #16
  hdma->Lock = HAL_UNLOCKED;
 8003dda:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003dde:	4b72      	ldr	r3, [pc, #456]	; (8003fa8 <main+0x82c>)
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003de0:	e9c4 8675 	strd	r8, r6, [r4, #468]	; 0x1d4
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003de4:	e9c4 3e72 	strd	r3, lr, [r4, #456]	; 0x1c8
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003de8:	e9c4 6677 	strd	r6, r6, [r4, #476]	; 0x1dc
  hdma->DmaBaseAddress = DMA1;
 8003dec:	3b44      	subs	r3, #68	; 0x44
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003dee:	f8c4 b208 	str.w	fp, [r4, #520]	; 0x208
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003df2:	f8c4 61d0 	str.w	r6, [r4, #464]	; 0x1d0
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003df6:	f8c4 61e4 	str.w	r6, [r4, #484]	; 0x1e4
  tmp = hdma->Instance->CCR;
 8003dfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003dfc:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8003fac <main+0x830>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003e00:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 8003fb0 <main+0x834>
 8003e04:	ea02 020c 	and.w	r2, r2, ip
  tmp |=  hdma->Init.Direction        |
 8003e08:	f042 0290 	orr.w	r2, r2, #144	; 0x90
  hdma->DmaBaseAddress = DMA1;
 8003e0c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
  hdma->Instance->CCR = tmp;
 8003e10:	645a      	str	r2, [r3, #68]	; 0x44
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e12:	e9c4 b683 	strd	fp, r6, [r4, #524]	; 0x20c
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e16:	e9c4 6885 	strd	r6, r8, [r4, #532]	; 0x214
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e1a:	e9c4 6687 	strd	r6, r6, [r4, #540]	; 0x21c
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e1e:	e9c4 6689 	strd	r6, r6, [r4, #548]	; 0x224
  hdma->DmaBaseAddress = DMA1;
 8003e22:	e9c4 3e92 	strd	r3, lr, [r4, #584]	; 0x248
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e26:	f8c4 6200 	str.w	r6, [r4, #512]	; 0x200
  hdma->Lock = HAL_UNLOCKED;
 8003e2a:	f8a4 01e8 	strh.w	r0, [r4, #488]	; 0x1e8
  tmp = hdma->Instance->CCR;
 8003e2e:	f8d3 e058 	ldr.w	lr, [r3, #88]	; 0x58
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003e32:	4a60      	ldr	r2, [pc, #384]	; (8003fb4 <main+0x838>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003e34:	ea0e 0c0c 	and.w	ip, lr, ip
 8003e38:	f5a2 71b8 	sub.w	r1, r2, #368	; 0x170
 8003e3c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  tmp |=  hdma->Init.Direction        |
 8003e40:	ea4c 0c08 	orr.w	ip, ip, r8
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003e44:	3244      	adds	r2, #68	; 0x44
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003e46:	f8c4 11ec 	str.w	r1, [r4, #492]	; 0x1ec
  hdma->Instance->CCR = tmp;
 8003e4a:	f8c3 c058 	str.w	ip, [r3, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e4e:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  hdma->Lock = HAL_UNLOCKED;
 8003e52:	f8a4 022c 	strh.w	r0, [r4, #556]	; 0x22c
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003e56:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8003e5a:	f8c4 1230 	str.w	r1, [r4, #560]	; 0x230
  huart->gState = HAL_UART_STATE_BUSY;
 8003e5e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003e60:	6da2      	ldr	r2, [r4, #88]	; 0x58
  huart->gState = HAL_UART_STATE_BUSY;
 8003e62:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  __HAL_UART_DISABLE(huart);
 8003e66:	68d3      	ldr	r3, [r2, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e68:	6e61      	ldr	r1, [r4, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8003e6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e6e:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e70:	6913      	ldr	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e72:	6ea0      	ldr	r0, [r4, #104]	; 0x68
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e7c:	6e23      	ldr	r3, [r4, #96]	; 0x60
  MODIFY_REG(huart->Instance->CR1,
 8003e7e:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e80:	4303      	orrs	r3, r0
 8003e82:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  MODIFY_REG(huart->Instance->CR1,
 8003e84:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e88:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003e8a:	f021 010c 	bic.w	r1, r1, #12
 8003e8e:	430b      	orrs	r3, r1
 8003e90:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e92:	6953      	ldr	r3, [r2, #20]
 8003e94:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e9a:	430b      	orrs	r3, r1
 8003e9c:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8003e9e:	4b40      	ldr	r3, [pc, #256]	; (8003fa0 <main+0x824>)
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ea0:	2164      	movs	r1, #100	; 0x64
  if(huart->Instance == USART1)
 8003ea2:	429a      	cmp	r2, r3
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ea4:	686b      	ldr	r3, [r5, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea6:	f04f 0600 	mov.w	r6, #0
 8003eaa:	bf0c      	ite	eq
 8003eac:	f3c3 23c2 	ubfxeq	r3, r3, #11, #3
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003eb0:	f3c3 2302 	ubfxne	r3, r3, #8, #3
 8003eb4:	4499      	add	r9, r3
 8003eb6:	f899 3010 	ldrb.w	r3, [r9, #16]
 8003eba:	40df      	lsrs	r7, r3
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ebc:	2319      	movs	r3, #25
 8003ebe:	435f      	muls	r7, r3
 8003ec0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	fbb7 f7f3 	udiv	r7, r7, r3
 8003ec8:	fbb7 f0f1 	udiv	r0, r7, r1
 8003ecc:	fb01 7310 	mls	r3, r1, r0, r7
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	3332      	adds	r3, #50	; 0x32
 8003ed4:	fbb3 f3f1 	udiv	r3, r3, r1
  huart->gState = HAL_UART_STATE_READY;
 8003ed8:	2720      	movs	r7, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eda:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8003ede:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ee0:	6913      	ldr	r3, [r2, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ee2:	4631      	mov	r1, r6
 8003ee4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003ee8:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eea:	6953      	ldr	r3, [r2, #20]
 8003eec:	a815      	add	r0, sp, #84	; 0x54
 8003eee:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003ef2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003ef4:	68d3      	ldr	r3, [r2, #12]
 8003ef6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003efa:	60d3      	str	r3, [r2, #12]
 8003efc:	2210      	movs	r2, #16
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efe:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
  huart->gState = HAL_UART_STATE_READY;
 8003f02:	f884 7095 	strb.w	r7, [r4, #149]	; 0x95
  huart->RxState = HAL_UART_STATE_READY;
 8003f06:	f884 7096 	strb.w	r7, [r4, #150]	; 0x96
 8003f0a:	f001 fd13 	bl	8005934 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8003f0e:	221c      	movs	r2, #28
 8003f10:	4631      	mov	r1, r6
 8003f12:	a81d      	add	r0, sp, #116	; 0x74
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f14:	e9cd 6613 	strd	r6, r6, [sp, #76]	; 0x4c
	TIM_OC_InitTypeDef sConfigOC = {0};
 8003f18:	f001 fd0c 	bl	8005934 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f1c:	463a      	mov	r2, r7
 8003f1e:	4631      	mov	r1, r6
 8003f20:	a824      	add	r0, sp, #144	; 0x90
 8003f22:	f001 fd07 	bl	8005934 <memset>
	htim1.Instance = TIM1;
 8003f26:	4b24      	ldr	r3, [pc, #144]	; (8003fb8 <main+0x83c>)
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f28:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
	htim1.Init.Prescaler = 0;
 8003f2c:	e9c4 3627 	strd	r3, r6, [r4, #156]	; 0x9c
	htim1.Init.Period = 65535;
 8003f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f34:	e9c4 362a 	strd	r3, r6, [r4, #168]	; 0xa8
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f38:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f3c:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 8003f40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d14b      	bne.n	8003fe0 <main+0x864>
    htim->Lock = HAL_UNLOCKED;
 8003f48:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f4c:	69ab      	ldr	r3, [r5, #24]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f4e:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f56:	61ab      	str	r3, [r5, #24]
 8003f58:	69ab      	ldr	r3, [r5, #24]
  hdma->DmaBaseAddress = DMA1;
 8003f5a:	4918      	ldr	r1, [pc, #96]	; (8003fbc <main+0x840>)
 8003f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f60:	9311      	str	r3, [sp, #68]	; 0x44
 8003f62:	9b11      	ldr	r3, [sp, #68]	; 0x44
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8003f64:	4b16      	ldr	r3, [pc, #88]	; (8003fc0 <main+0x844>)
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f66:	f8c4 2258 	str.w	r2, [r4, #600]	; 0x258
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f6a:	e9c4 3294 	strd	r3, r2, [r4, #592]	; 0x250
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f6e:	2380      	movs	r3, #128	; 0x80
 8003f70:	e9c4 3097 	strd	r3, r0, [r4, #604]	; 0x25c
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8003f78:	e9c4 3299 	strd	r3, r2, [r4, #612]	; 0x264
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	e9c4 13a3 	strd	r1, r3, [r4, #652]	; 0x28c
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003f82:	f8c4 226c 	str.w	r2, [r4, #620]	; 0x26c
  tmp = hdma->Instance->CCR;
 8003f86:	69cb      	ldr	r3, [r1, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f88:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f8c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003f90:	e018      	b.n	8003fc4 <main+0x848>
 8003f92:	bf00      	nop
 8003f94:	000186a0 	.word	0x000186a0
 8003f98:	000f4240 	.word	0x000f4240
 8003f9c:	e000e100 	.word	0xe000e100
 8003fa0:	40013800 	.word	0x40013800
 8003fa4:	40010800 	.word	0x40010800
 8003fa8:	40020044 	.word	0x40020044
 8003fac:	ffffc00f 	.word	0xffffc00f
 8003fb0:	40020058 	.word	0x40020058
 8003fb4:	200003d0 	.word	0x200003d0
 8003fb8:	40012c00 	.word	0x40012c00
 8003fbc:	40020000 	.word	0x40020000
 8003fc0:	4002001c 	.word	0x4002001c
  tmp |=  hdma->Init.Direction        |
 8003fc4:	f443 63b0 	orr.w	r3, r3, #1408	; 0x580
  hdma->Instance->CCR = tmp;
 8003fc8:	61cb      	str	r3, [r1, #28]
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003fca:	4b47      	ldr	r3, [pc, #284]	; (80040e8 <main+0x96c>)
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fcc:	f8c4 2288 	str.w	r2, [r4, #648]	; 0x288
 8003fd0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8003fd4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
  hdma->Lock = HAL_UNLOCKED;
 8003fd8:	f8a4 0270 	strh.w	r0, [r4, #624]	; 0x270
 8003fdc:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	f04f 0902 	mov.w	r9, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe4:	4f41      	ldr	r7, [pc, #260]	; (80040ec <main+0x970>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe6:	f884 90d9 	strb.w	r9, [r4, #217]	; 0xd9
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fea:	4638      	mov	r0, r7
 8003fec:	f7fc fd10 	bl	8000a10 <TIM_Base_SetConfig.constprop.0>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff4:	2601      	movs	r6, #1
 8003ff6:	9315      	str	r3, [sp, #84]	; 0x54
  __HAL_LOCK(htim);
 8003ff8:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ffc:	f884 60e2 	strb.w	r6, [r4, #226]	; 0xe2
  __HAL_LOCK(htim);
 8004000:	42b3      	cmp	r3, r6
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004002:	f884 60da 	strb.w	r6, [r4, #218]	; 0xda
 8004006:	f884 60db 	strb.w	r6, [r4, #219]	; 0xdb
 800400a:	f884 60dc 	strb.w	r6, [r4, #220]	; 0xdc
 800400e:	f884 60dd 	strb.w	r6, [r4, #221]	; 0xdd
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004012:	f884 60de 	strb.w	r6, [r4, #222]	; 0xde
 8004016:	f884 60df 	strb.w	r6, [r4, #223]	; 0xdf
 800401a:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
 800401e:	f884 60e1 	strb.w	r6, [r4, #225]	; 0xe1
  htim->State = HAL_TIM_STATE_READY;
 8004022:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
  __HAL_LOCK(htim);
 8004026:	d05c      	beq.n	80040e2 <main+0x966>
  __HAL_UNLOCK(htim);
 8004028:	f04f 0800 	mov.w	r8, #0
  tmpsmcr = htim->Instance->SMCR;
 800402c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
  htim->State = HAL_TIM_STATE_BUSY;
 8004030:	f884 90d9 	strb.w	r9, [r4, #217]	; 0xd9
  tmpsmcr = htim->Instance->SMCR;
 8004034:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800403a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800403e:	6083      	str	r3, [r0, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004040:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
  if (htim->State == HAL_TIM_STATE_RESET)
 8004044:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
  __HAL_UNLOCK(htim);
 8004048:	f884 80d8 	strb.w	r8, [r4, #216]	; 0xd8
  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	f884 90d9 	strb.w	r9, [r4, #217]	; 0xd9
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004050:	f7fc fcde 	bl	8000a10 <TIM_Base_SetConfig.constprop.0>
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004054:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004058:	f884 60e2 	strb.w	r6, [r4, #226]	; 0xe2
 800405c:	42b3      	cmp	r3, r6
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800405e:	f884 60da 	strb.w	r6, [r4, #218]	; 0xda
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004062:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
 8004066:	f884 60db 	strb.w	r6, [r4, #219]	; 0xdb
 800406a:	f884 60dc 	strb.w	r6, [r4, #220]	; 0xdc
 800406e:	f884 60dd 	strb.w	r6, [r4, #221]	; 0xdd
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004072:	f884 60de 	strb.w	r6, [r4, #222]	; 0xde
 8004076:	f884 60df 	strb.w	r6, [r4, #223]	; 0xdf
 800407a:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
 800407e:	f884 60e1 	strb.w	r6, [r4, #225]	; 0xe1
  htim->State = HAL_TIM_STATE_READY;
 8004082:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
 8004086:	d133      	bne.n	80040f0 <main+0x974>
 8004088:	b672      	cpsid	i
	while (1)
 800408a:	e7fe      	b.n	800408a <main+0x90e>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800408c:	68e3      	ldr	r3, [r4, #12]
 800408e:	b9ab      	cbnz	r3, 80040bc <main+0x940>
 8004090:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
 8004094:	fbb6 f0f0 	udiv	r0, r6, r0
 8004098:	0500      	lsls	r0, r0, #20
 800409a:	f510 1f80 	cmn.w	r0, #1048576	; 0x100000
 800409e:	bf14      	ite	ne
 80040a0:	2000      	movne	r0, #0
 80040a2:	2001      	moveq	r0, #1
 80040a4:	b9d8      	cbnz	r0, 80040de <main+0x962>
 80040a6:	b96b      	cbnz	r3, 80040c4 <main+0x948>
 80040a8:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 80040ac:	fbb6 f3f3 	udiv	r3, r6, r3
 80040b0:	3301      	adds	r3, #1
 80040b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ba:	e5ff      	b.n	8003cbc <main+0x540>
 80040bc:	2019      	movs	r0, #25
 80040be:	fb00 f00c 	mul.w	r0, r0, ip
 80040c2:	e7e7      	b.n	8004094 <main+0x918>
 80040c4:	2319      	movs	r3, #25
 80040c6:	fb03 f30c 	mul.w	r3, r3, ip
 80040ca:	fbb6 f3f3 	udiv	r3, r6, r3
 80040ce:	3301      	adds	r3, #1
 80040d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040d8:	e5f0      	b.n	8003cbc <main+0x540>
 80040da:	2304      	movs	r3, #4
 80040dc:	e5ee      	b.n	8003cbc <main+0x540>
 80040de:	2301      	movs	r3, #1
 80040e0:	e5ec      	b.n	8003cbc <main+0x540>
 80040e2:	b672      	cpsid	i
 80040e4:	e7fe      	b.n	80040e4 <main+0x968>
 80040e6:	bf00      	nop
 80040e8:	20000458 	.word	0x20000458
 80040ec:	40012c00 	.word	0x40012c00

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040f0:	f8d4 609c 	ldr.w	r6, [r4, #156]	; 0x9c
  htim->State = HAL_TIM_STATE_BUSY;
 80040f4:	f884 90d9 	strb.w	r9, [r4, #217]	; 0xd9
  tmpcr2 = htim->Instance->CR2;
 80040f8:	6872      	ldr	r2, [r6, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040fa:	42be      	cmp	r6, r7
  tmpcr2 &= ~TIM_CR2_MMS;
 80040fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr = htim->Instance->SMCR;
 8004100:	68b3      	ldr	r3, [r6, #8]
  htim->Instance->CR2 = tmpcr2;
 8004102:	6072      	str	r2, [r6, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004104:	d009      	beq.n	800411a <main+0x99e>
 8004106:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800410a:	d006      	beq.n	800411a <main+0x99e>
 800410c:	4ac4      	ldr	r2, [pc, #784]	; (8004420 <main+0xca4>)
 800410e:	4296      	cmp	r6, r2
 8004110:	d003      	beq.n	800411a <main+0x99e>
 8004112:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004116:	4296      	cmp	r6, r2
 8004118:	d102      	bne.n	8004120 <main+0x9a4>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800411a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800411e:	60b3      	str	r3, [r6, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004120:	2301      	movs	r3, #1
	sConfigOC.Pulse = 0;
 8004122:	2760      	movs	r7, #96	; 0x60
 8004124:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
 8004128:	2300      	movs	r3, #0
 800412a:	e9cd 731d 	strd	r7, r3, [sp, #116]	; 0x74
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800412e:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004132:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004136:	9323      	str	r3, [sp, #140]	; 0x8c
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004138:	6a33      	ldr	r3, [r6, #32]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800413a:	48ba      	ldr	r0, [pc, #744]	; (8004424 <main+0xca8>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800413c:	f023 0301 	bic.w	r3, r3, #1
 8004140:	6233      	str	r3, [r6, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004142:	4286      	cmp	r6, r0
  tmpccer = TIMx->CCER;
 8004144:	6a33      	ldr	r3, [r6, #32]
  tmpcr2 =  TIMx->CR2;
 8004146:	6871      	ldr	r1, [r6, #4]
  tmpccmrx = TIMx->CCMR1;
 8004148:	69b2      	ldr	r2, [r6, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800414a:	f000 8422 	beq.w	8004992 <main+0x1216>
  tmpccer &= ~TIM_CCER_CC1P;
 800414e:	f023 0302 	bic.w	r3, r3, #2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004152:	6071      	str	r1, [r6, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004154:	2100      	movs	r1, #0
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004156:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800415a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
  TIMx->CCMR1 = tmpccmrx;
 800415e:	61b2      	str	r2, [r6, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004160:	6371      	str	r1, [r6, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004162:	6233      	str	r3, [r6, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004164:	69b3      	ldr	r3, [r6, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004166:	2210      	movs	r2, #16
 8004168:	f043 0308 	orr.w	r3, r3, #8
 800416c:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800416e:	69b3      	ldr	r3, [r6, #24]
 8004170:	4650      	mov	r0, sl
 8004172:	f023 0304 	bic.w	r3, r3, #4
 8004176:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004178:	69b3      	ldr	r3, [r6, #24]
 800417a:	61b3      	str	r3, [r6, #24]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800417c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004180:	e9cd 1124 	strd	r1, r1, [sp, #144]	; 0x90
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004184:	9329      	str	r3, [sp, #164]	; 0xa4
	sBreakDeadTimeConfig.DeadTime = 0;
 8004186:	e9cd 1126 	strd	r1, r1, [sp, #152]	; 0x98
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800418a:	9128      	str	r1, [sp, #160]	; 0xa0
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800418c:	912b      	str	r1, [sp, #172]	; 0xac
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800418e:	6473      	str	r3, [r6, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004190:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
 8004194:	f001 fbce 	bl	8005934 <memset>
  if(htim->Instance==TIM1)
 8004198:	4ba2      	ldr	r3, [pc, #648]	; (8004424 <main+0xca8>)
 800419a:	429e      	cmp	r6, r3
 800419c:	d112      	bne.n	80041c4 <main+0xa48>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800419e:	69ab      	ldr	r3, [r5, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a0:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041a4:	f043 0304 	orr.w	r3, r3, #4
 80041a8:	61ab      	str	r3, [r5, #24]
 80041aa:	69ab      	ldr	r3, [r5, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ac:	4651      	mov	r1, sl
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	9312      	str	r3, [sp, #72]	; 0x48
 80041b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b6:	2302      	movs	r3, #2
 80041b8:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041bc:	489a      	ldr	r0, [pc, #616]	; (8004428 <main+0xcac>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041be:	931c      	str	r3, [sp, #112]	; 0x70
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c0:	f7fc f990 	bl	80004e4 <HAL_GPIO_Init>
 80041c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041c8:	4d98      	ldr	r5, [pc, #608]	; (800442c <main+0xcb0>)

void LCD_Init(void)
{	
	LCD_RST_R
	HAL_Delay(200);
 80041ca:	20c8      	movs	r0, #200	; 0xc8
 80041cc:	612b      	str	r3, [r5, #16]
 80041ce:	f7fc f8a6 	bl	800031e <HAL_Delay>
    GPIOx->BSRR = GPIO_Pin;
 80041d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
	LCD_RST_S
	
  LCD_Send_Cmd(HX8357_SLPOUT);
 80041d6:	2011      	movs	r0, #17
 80041d8:	612b      	str	r3, [r5, #16]
 80041da:	f7fc f823 	bl	8000224 <LCD_Send_Cmd>
  HAL_Delay(120);
 80041de:	2078      	movs	r0, #120	; 0x78
 80041e0:	f7fc f89d 	bl	800031e <HAL_Delay>
	LCD_Send_Cmd(HX8357_COLMOD);
 80041e4:	203a      	movs	r0, #58	; 0x3a
 80041e6:	f7fc f81d 	bl	8000224 <LCD_Send_Cmd>
	LCD_Send_Dat(0x55);
 80041ea:	2055      	movs	r0, #85	; 0x55
 80041ec:	f7fc f830 	bl	8000250 <LCD_Send_Dat>
  HAL_Delay(5);
 80041f0:	2005      	movs	r0, #5
 80041f2:	f7fc f894 	bl	800031e <HAL_Delay>
  LCD_Send_Cmd(HX8357_DISPON);
 80041f6:	2029      	movs	r0, #41	; 0x29
 80041f8:	f7fc f814 	bl	8000224 <LCD_Send_Cmd>
	LCD_Orientation(DEFAULT_ORIENTATION);
}

void LCD_Orientation(uint8_t orientation)
{
	LCD_Send_Cmd(HX8357_MADCTL);
 80041fc:	2036      	movs	r0, #54	; 0x36
 80041fe:	f7fc f811 	bl	8000224 <LCD_Send_Cmd>
	switch (orientation)
	{
	case 0:
	if (BGR) LCD_Send_Dat(MADCTL_BGR);
 8004202:	2008      	movs	r0, #8
 8004204:	f7fc f824 	bl	8000250 <LCD_Send_Dat>
	LCD_Rect_Fill(0, 0, 480, 320, BLUE);
 8004208:	2100      	movs	r1, #0
 800420a:	23ff      	movs	r3, #255	; 0xff
 800420c:	4608      	mov	r0, r1
 800420e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004218:	f7fc f82e 	bl	8000278 <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 478, 318, BLACK);
 800421c:	2101      	movs	r1, #1
 800421e:	2300      	movs	r3, #0
 8004220:	4608      	mov	r0, r1
 8004222:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800422c:	f7fc f824 	bl	8000278 <LCD_Rect_Fill>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, RED);
 8004230:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8004234:	217f      	movs	r1, #127	; 0x7f
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	2014      	movs	r0, #20
 800423a:	4b7d      	ldr	r3, [pc, #500]	; (8004430 <main+0xcb4>)
 800423c:	4a7d      	ldr	r2, [pc, #500]	; (8004434 <main+0xcb8>)
 800423e:	f7fd fc8f 	bl	8001b60 <LCD_Font.constprop.0>
 8004242:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8004246:	f240 581e 	movw	r8, #1310	; 0x51e
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, RED);
 800424a:	4f7b      	ldr	r7, [pc, #492]	; (8004438 <main+0xcbc>)
	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 800424c:	4628      	mov	r0, r5
 800424e:	f7fc fdfb 	bl	8000e48 <AT24XX_Read>
 8004252:	4606      	mov	r6, r0
 8004254:	1c68      	adds	r0, r5, #1
 8004256:	b280      	uxth	r0, r0
 8004258:	f7fc fdf6 	bl	8000e48 <AT24XX_Read>
 800425c:	3502      	adds	r5, #2
 800425e:	b2ad      	uxth	r5, r5
	return (byteH << 8) | byteL;
 8004260:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8004264:	4545      	cmp	r5, r8
 8004266:	f827 6b02 	strh.w	r6, [r7], #2
 800426a:	d1ef      	bne.n	800424c <main+0xad0>
 800426c:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8004270:	f640 1806 	movw	r8, #2310	; 0x906
	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8004274:	4f71      	ldr	r7, [pc, #452]	; (800443c <main+0xcc0>)
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8004276:	4628      	mov	r0, r5
 8004278:	f7fc fde6 	bl	8000e48 <AT24XX_Read>
 800427c:	4606      	mov	r6, r0
 800427e:	1c68      	adds	r0, r5, #1
 8004280:	b280      	uxth	r0, r0
 8004282:	f7fc fde1 	bl	8000e48 <AT24XX_Read>
 8004286:	3502      	adds	r5, #2
 8004288:	b2ad      	uxth	r5, r5
	return (byteH << 8) | byteL;
 800428a:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 800428e:	4545      	cmp	r5, r8
 8004290:	f827 6b02 	strh.w	r6, [r7], #2
 8004294:	d1ef      	bne.n	8004276 <main+0xafa>
 8004296:	f640 35b8 	movw	r5, #3000	; 0xbb8
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 800429a:	f640 48ee 	movw	r8, #3310	; 0xcee
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 800429e:	4f68      	ldr	r7, [pc, #416]	; (8004440 <main+0xcc4>)
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 80042a0:	4628      	mov	r0, r5
 80042a2:	f7fc fdd1 	bl	8000e48 <AT24XX_Read>
 80042a6:	4606      	mov	r6, r0
 80042a8:	1c68      	adds	r0, r5, #1
 80042aa:	b280      	uxth	r0, r0
 80042ac:	f7fc fdcc 	bl	8000e48 <AT24XX_Read>
 80042b0:	3502      	adds	r5, #2
 80042b2:	b2ad      	uxth	r5, r5
	return (byteH << 8) | byteL;
 80042b4:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 80042b8:	4545      	cmp	r5, r8
 80042ba:	f827 6b02 	strh.w	r6, [r7], #2
 80042be:	d1ef      	bne.n	80042a0 <main+0xb24>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, BLACK);
 80042c0:	2300      	movs	r3, #0
 80042c2:	217f      	movs	r1, #127	; 0x7f
 80042c4:	2014      	movs	r0, #20
 80042c6:	4a5b      	ldr	r2, [pc, #364]	; (8004434 <main+0xcb8>)
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	4b59      	ldr	r3, [pc, #356]	; (8004430 <main+0xcb4>)
 80042cc:	f7fd fc48 	bl	8001b60 <LCD_Font.constprop.0>
	BME280_Init();
 80042d0:	f7fd fa60 	bl	8001794 <BME280_Init>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042d4:	f894 30da 	ldrb.w	r3, [r4, #218]	; 0xda
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d11a      	bne.n	8004312 <main+0xb96>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042dc:	2302      	movs	r3, #2
 80042de:	f884 30da 	strb.w	r3, [r4, #218]	; 0xda
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042e2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042e6:	6a1a      	ldr	r2, [r3, #32]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042ee:	6a1a      	ldr	r2, [r3, #32]
 80042f0:	f042 0201 	orr.w	r2, r2, #1
 80042f4:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042f6:	4a4b      	ldr	r2, [pc, #300]	; (8004424 <main+0xca8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	f041 82a4 	bne.w	8005846 <main+0x20ca>
    __HAL_TIM_MOE_ENABLE(htim);
 80042fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004300:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004304:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800430c:	2a06      	cmp	r2, #6
 800430e:	f041 82a7 	bne.w	8005860 <main+0x20e4>
	uint8_t uartTransmitDMA[] = "UART DMA OK\r\n";
 8004312:	4b4c      	ldr	r3, [pc, #304]	; (8004444 <main+0xcc8>)
 8004314:	aa1d      	add	r2, sp, #116	; 0x74
 8004316:	f103 0608 	add.w	r6, r3, #8
 800431a:	4615      	mov	r5, r2
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	6859      	ldr	r1, [r3, #4]
 8004320:	3308      	adds	r3, #8
 8004322:	c503      	stmia	r5!, {r0, r1}
 8004324:	42b3      	cmp	r3, r6
 8004326:	462a      	mov	r2, r5
 8004328:	d1f7      	bne.n	800431a <main+0xb9e>
 800432a:	6818      	ldr	r0, [r3, #0]
 800432c:	889b      	ldrh	r3, [r3, #4]
 800432e:	6028      	str	r0, [r5, #0]
 8004330:	80ab      	strh	r3, [r5, #4]
  if (huart->gState == HAL_UART_STATE_READY)
 8004332:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8004336:	2b20      	cmp	r3, #32
 8004338:	d12a      	bne.n	8004390 <main+0xc14>
    __HAL_LOCK(huart);
 800433a:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800433e:	2b01      	cmp	r3, #1
 8004340:	d026      	beq.n	8004390 <main+0xc14>
 8004342:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004344:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8004346:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800434a:	2221      	movs	r2, #33	; 0x21
    huart->TxXferSize = Size;
 800434c:	230e      	movs	r3, #14
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800434e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    huart->TxXferCount = Size;
 8004352:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004356:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800435a:	f884 2095 	strb.w	r2, [r4, #149]	; 0x95
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800435e:	4a3a      	ldr	r2, [pc, #232]	; (8004448 <main+0xccc>)
    huart->pTxBuffPtr = pData;
 8004360:	a91d      	add	r1, sp, #116	; 0x74
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004362:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004364:	4a39      	ldr	r2, [pc, #228]	; (800444c <main+0xcd0>)
    huart->TxXferSize = Size;
 8004366:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800436a:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800436c:	4a38      	ldr	r2, [pc, #224]	; (8004450 <main+0xcd4>)
    huart->pTxBuffPtr = pData;
 800436e:	67a1      	str	r1, [r4, #120]	; 0x78
    huart->hdmatx->XferAbortCallback = NULL;
 8004370:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004374:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004376:	3204      	adds	r2, #4
 8004378:	f7fd fb12 	bl	80019a0 <HAL_DMA_Start_IT.isra.0>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800437c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004380:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004382:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8004384:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004388:	695a      	ldr	r2, [r3, #20]
 800438a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800438e:	615a      	str	r2, [r3, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 8004390:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8004394:	2b20      	cmp	r3, #32
 8004396:	d10d      	bne.n	80043b4 <main+0xc38>
    __HAL_LOCK(huart);
 8004398:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800439c:	2b01      	cmp	r3, #1
 800439e:	d009      	beq.n	80043b4 <main+0xc38>
 80043a0:	2301      	movs	r3, #1
 80043a2:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a6:	2300      	movs	r3, #0
    return(UART_Start_Receive_DMA(huart, pData, Size));
 80043a8:	2110      	movs	r1, #16
 80043aa:	482a      	ldr	r0, [pc, #168]	; (8004454 <main+0xcd8>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    return(UART_Start_Receive_DMA(huart, pData, Size));
 80043b0:	f7fd fb2f 	bl	8001a12 <UART_Start_Receive_DMA.constprop.0.isra.0>
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 80043b4:	2300      	movs	r3, #0
	for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 80043b6:	4a1b      	ldr	r2, [pc, #108]	; (8004424 <main+0xca8>)
 80043b8:	6353      	str	r3, [r2, #52]	; 0x34
 80043ba:	3301      	adds	r3, #1
 80043bc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80043c0:	d1fa      	bne.n	80043b8 <main+0xc3c>
					temperatureRemote = temperatureRemote / 10;
 80043c2:	f04f 0a00 	mov.w	sl, #0
 80043c6:	f8df b090 	ldr.w	fp, [pc, #144]	; 8004458 <main+0xcdc>

uint8_t DS3231_getSec(void) {
	DS3231_Update();
    return bcdToDec(rtcBuffer[0]);
 80043ca:	4c24      	ldr	r4, [pc, #144]	; (800445c <main+0xce0>)
	DS3231_Update();
 80043cc:	f7fd fa92 	bl	80018f4 <DS3231_Update>
    return bcdToDec(rtcBuffer[0]);
 80043d0:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
		if (rtcSecLast != rtcSec) {
 80043d4:	4e22      	ldr	r6, [pc, #136]	; (8004460 <main+0xce4>)
    return ((val / 16 * 10) + (val % 16));
 80043d6:	0915      	lsrs	r5, r2, #4
 80043d8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80043dc:	f002 050f 	and.w	r5, r2, #15
 80043e0:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80043e4:	7a33      	ldrb	r3, [r6, #8]
 80043e6:	b2ed      	uxtb	r5, r5
 80043e8:	42ab      	cmp	r3, r5
		rtcSec = DS3231_getSec();
 80043ea:	f884 5636 	strb.w	r5, [r4, #1590]	; 0x636
		if (rtcSecLast != rtcSec) {
 80043ee:	d0ec      	beq.n	80043ca <main+0xc4e>
}

uint8_t DS3231_getMin(void) {
	DS3231_Update();
 80043f0:	f7fd fa80 	bl	80018f4 <DS3231_Update>
    return bcdToDec(rtcBuffer[1]);
 80043f4:	f894 3109 	ldrb.w	r3, [r4, #265]	; 0x109
			LCD_Circle(170, 35, 8, 0, 1, ORANGE);
 80043f8:	2108      	movs	r1, #8
    return ((val / 16 * 10) + (val % 16));
 80043fa:	091f      	lsrs	r7, r3, #4
 80043fc:	eb07 0287 	add.w	r2, r7, r7, lsl #2
 8004400:	f003 070f 	and.w	r7, r3, #15
 8004404:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8004408:	2023      	movs	r0, #35	; 0x23
 800440a:	2200      	movs	r2, #0
 800440c:	4b15      	ldr	r3, [pc, #84]	; (8004464 <main+0xce8>)
 800440e:	b2ff      	uxtb	r7, r7
			rtcMin = DS3231_getMin();
 8004410:	f884 7637 	strb.w	r7, [r4, #1591]	; 0x637
			LCD_Circle(170, 35, 8, 0, 1, ORANGE);
 8004414:	f7fc fb66 	bl	8000ae4 <LCD_Circle.constprop.0>
			LCD_Circle(170, 75, 8, 0, 1, ORANGE);
 8004418:	2200      	movs	r2, #0
 800441a:	2108      	movs	r1, #8
 800441c:	204b      	movs	r0, #75	; 0x4b
 800441e:	e023      	b.n	8004468 <main+0xcec>
 8004420:	40000400 	.word	0x40000400
 8004424:	40012c00 	.word	0x40012c00
 8004428:	40010800 	.word	0x40010800
 800442c:	40010c00 	.word	0x40010c00
 8004430:	0800a310 	.word	0x0800a310
 8004434:	0801baf3 	.word	0x0801baf3
 8004438:	2000049c 	.word	0x2000049c
 800443c:	200005d2 	.word	0x200005d2
 8004440:	20000708 	.word	0x20000708
 8004444:	0801bb4d 	.word	0x0801bb4d
 8004448:	08000751 	.word	0x08000751
 800444c:	08000773 	.word	0x08000773
 8004450:	0800077b 	.word	0x0800077b
 8004454:	20000335 	.word	0x20000335
 8004458:	40240000 	.word	0x40240000
 800445c:	20000208 	.word	0x20000208
 8004460:	20000000 	.word	0x20000000
 8004464:	00ffa500 	.word	0x00ffa500
 8004468:	4be1      	ldr	r3, [pc, #900]	; (80047f0 <main+0x1074>)
 800446a:	f7fc fb3b 	bl	8000ae4 <LCD_Circle.constprop.0>
			if (rtcSec % 2 != 0) {
 800446e:	f015 0501 	ands.w	r5, r5, #1
 8004472:	f000 8294 	beq.w	800499e <main+0x1222>
				LCD_Circle(170, 35, 7, 1, 1, ORANGE);
 8004476:	2201      	movs	r2, #1
 8004478:	2107      	movs	r1, #7
 800447a:	2023      	movs	r0, #35	; 0x23
 800447c:	4bdc      	ldr	r3, [pc, #880]	; (80047f0 <main+0x1074>)
 800447e:	f7fc fb31 	bl	8000ae4 <LCD_Circle.constprop.0>
				LCD_Circle(170, 75, 7, 1, 1, ORANGE);
 8004482:	4bdb      	ldr	r3, [pc, #876]	; (80047f0 <main+0x1074>)
 8004484:	2201      	movs	r2, #1
 8004486:	2107      	movs	r1, #7
 8004488:	204b      	movs	r0, #75	; 0x4b
 800448a:	f7fc fb2b 	bl	8000ae4 <LCD_Circle.constprop.0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800448e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    GPIOx->BSRR = GPIO_Pin;
 8004492:	4ad8      	ldr	r2, [pc, #864]	; (80047f4 <main+0x1078>)
 8004494:	6113      	str	r3, [r2, #16]
			if (rtcMinLast != rtcMin) {
 8004496:	7a75      	ldrb	r5, [r6, #9]
 8004498:	42bd      	cmp	r5, r7
 800449a:	f000 85a2 	beq.w	8004fe2 <main+0x1866>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 800449e:	2700      	movs	r7, #0
}

uint8_t DS3231_getHrs(void) {
	DS3231_Update();
 80044a0:	f7fd fa28 	bl	80018f4 <DS3231_Update>
    return bcdToDec(rtcBuffer[2]);
 80044a4:	f894 310a 	ldrb.w	r3, [r4, #266]	; 0x10a
				sprintf(clockPrint, "%02d", rtcMinLast);
 80044a8:	49d3      	ldr	r1, [pc, #844]	; (80047f8 <main+0x107c>)
    return ((val / 16 * 10) + (val % 16));
 80044aa:	091a      	lsrs	r2, r3, #4
 80044ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80044b0:	f003 030f 	and.w	r3, r3, #15
 80044b4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80044b8:	462a      	mov	r2, r5
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 80044ba:	4dd0      	ldr	r5, [pc, #832]	; (80047fc <main+0x1080>)
				sprintf(clockPrint, "%02d", rtcMinLast);
 80044bc:	a819      	add	r0, sp, #100	; 0x64
				rtcHrs = DS3231_getHrs();
 80044be:	f884 3638 	strb.w	r3, [r4, #1592]	; 0x638
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 80044c2:	f8df 832c 	ldr.w	r8, [pc, #812]	; 80047f0 <main+0x1074>
				sprintf(clockPrint, "%02d", rtcMinLast);
 80044c6:	f002 f8af 	bl	8006628 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 80044ca:	f105 0324 	add.w	r3, r5, #36	; 0x24
 80044ce:	2164      	movs	r1, #100	; 0x64
 80044d0:	20b2      	movs	r0, #178	; 0xb2
 80044d2:	aa19      	add	r2, sp, #100	; 0x64
 80044d4:	9700      	str	r7, [sp, #0]
 80044d6:	f7fd fb43 	bl	8001b60 <LCD_Font.constprop.0>
				sprintf(clockPrint, "%02d", rtcMin);
 80044da:	f894 2637 	ldrb.w	r2, [r4, #1591]	; 0x637
 80044de:	49c6      	ldr	r1, [pc, #792]	; (80047f8 <main+0x107c>)
 80044e0:	a819      	add	r0, sp, #100	; 0x64
 80044e2:	f002 f8a1 	bl	8006628 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 80044e6:	f105 0324 	add.w	r3, r5, #36	; 0x24
 80044ea:	2164      	movs	r1, #100	; 0x64
 80044ec:	20b2      	movs	r0, #178	; 0xb2
 80044ee:	f8cd 8000 	str.w	r8, [sp]
 80044f2:	aa19      	add	r2, sp, #100	; 0x64
 80044f4:	f7fd fb34 	bl	8001b60 <LCD_Font.constprop.0>
				if (rtcHrsLast != rtcHrs) {
 80044f8:	7ab6      	ldrb	r6, [r6, #10]
 80044fa:	f894 3638 	ldrb.w	r3, [r4, #1592]	; 0x638
 80044fe:	42b3      	cmp	r3, r6
 8004500:	f000 80db 	beq.w	80046ba <main+0xf3e>
}

uint8_t DS3231_getDay(void) {
	DS3231_Update();
 8004504:	f7fd f9f6 	bl	80018f4 <DS3231_Update>
    return bcdToDec(rtcBuffer[3]);
 8004508:	f894 310b 	ldrb.w	r3, [r4, #267]	; 0x10b
    return ((val / 16 * 10) + (val % 16));
 800450c:	091a      	lsrs	r2, r3, #4
 800450e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					rtcDay = DS3231_getDay();
 800451a:	f884 3639 	strb.w	r3, [r4, #1593]	; 0x639
}

uint8_t DS3231_getDate(void) {
	DS3231_Update();
 800451e:	f7fd f9e9 	bl	80018f4 <DS3231_Update>
    return bcdToDec(rtcBuffer[4]);
 8004522:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
    return ((val / 16 * 10) + (val % 16));
 8004526:	091a      	lsrs	r2, r3, #4
 8004528:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800452c:	f003 030f 	and.w	r3, r3, #15
 8004530:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					rtcDate = DS3231_getDate();
 8004534:	f884 363a 	strb.w	r3, [r4, #1594]	; 0x63a
}

uint8_t DS3231_getMonth(void) {
	DS3231_Update();
 8004538:	f7fd f9dc 	bl	80018f4 <DS3231_Update>
    return bcdToDec(rtcBuffer[5]);
 800453c:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
    return ((val / 16 * 10) + (val % 16));
 8004540:	091a      	lsrs	r2, r3, #4
 8004542:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					rtcMonth = DS3231_getMonth();
 800454e:	f884 363b 	strb.w	r3, [r4, #1595]	; 0x63b
}

uint8_t DS3231_getYear(void) {
	DS3231_Update();
 8004552:	f7fd f9cf 	bl	80018f4 <DS3231_Update>
    return bcdToDec(rtcBuffer[6]);
 8004556:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
					sprintf(clockPrint, "%02d", rtcHrsLast);
 800455a:	49a7      	ldr	r1, [pc, #668]	; (80047f8 <main+0x107c>)
    return ((val / 16 * 10) + (val % 16));
 800455c:	091a      	lsrs	r2, r3, #4
 800455e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800456a:	a819      	add	r0, sp, #100	; 0x64
 800456c:	4632      	mov	r2, r6
					rtcYear = DS3231_getYear();
 800456e:	f884 363c 	strb.w	r3, [r4, #1596]	; 0x63c
					sprintf(clockPrint, "%02d", rtcHrsLast);
 8004572:	f002 f859 	bl	8006628 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8004576:	f105 0324 	add.w	r3, r5, #36	; 0x24
 800457a:	2164      	movs	r1, #100	; 0x64
 800457c:	4638      	mov	r0, r7
 800457e:	aa19      	add	r2, sp, #100	; 0x64
 8004580:	9700      	str	r7, [sp, #0]
 8004582:	f7fd faed 	bl	8001b60 <LCD_Font.constprop.0>
					sprintf(clockPrint, "%02d", rtcHrs);
 8004586:	f894 2638 	ldrb.w	r2, [r4, #1592]	; 0x638
 800458a:	499b      	ldr	r1, [pc, #620]	; (80047f8 <main+0x107c>)
 800458c:	a819      	add	r0, sp, #100	; 0x64
 800458e:	f002 f84b 	bl	8006628 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8004592:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8004596:	2164      	movs	r1, #100	; 0x64
 8004598:	4638      	mov	r0, r7
 800459a:	f8cd 8000 	str.w	r8, [sp]
 800459e:	aa19      	add	r2, sp, #100	; 0x64
 80045a0:	f7fd fade 	bl	8001b60 <LCD_Font.constprop.0>
					if (rtcDayLast != rtcDay) {
 80045a4:	f894 6639 	ldrb.w	r6, [r4, #1593]	; 0x639
 80045a8:	f894 363d 	ldrb.w	r3, [r4, #1597]	; 0x63d
 80045ac:	42b3      	cmp	r3, r6
 80045ae:	d077      	beq.n	80046a0 <main+0xf24>
						LCD_Font(5, 140, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 80045b0:	f04f 0807 	mov.w	r8, #7
 80045b4:	1d73      	adds	r3, r6, #5
 80045b6:	fbb3 f2f8 	udiv	r2, r3, r8
 80045ba:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80045be:	1a9b      	subs	r3, r3, r2
 80045c0:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80045c4:	218c      	movs	r1, #140	; 0x8c
 80045c6:	2005      	movs	r0, #5
 80045c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045ca:	f105 0318 	add.w	r3, r5, #24
						LCD_Font(5, 140, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 80045ce:	3606      	adds	r6, #6
						LCD_Font(5, 140, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 80045d0:	9700      	str	r7, [sp, #0]
 80045d2:	f7fd fac5 	bl	8001b60 <LCD_Font.constprop.0>
						LCD_Font(5, 140, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 80045d6:	fbb6 f8f8 	udiv	r8, r6, r8
 80045da:	23ff      	movs	r3, #255	; 0xff
 80045dc:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 80045e0:	eba6 0608 	sub.w	r6, r6, r8
						LCD_Font(150, 140, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 80045e4:	f04f 080c 	mov.w	r8, #12
						LCD_Font(5, 140, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 80045e8:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80045ec:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80045ee:	218c      	movs	r1, #140	; 0x8c
 80045f0:	2005      	movs	r0, #5
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	f105 0318 	add.w	r3, r5, #24
 80045f8:	f7fd fab2 	bl	8001b60 <LCD_Font.constprop.0>
						LCD_Font(150, 140, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 80045fc:	f894 663b 	ldrb.w	r6, [r4, #1595]	; 0x63b
 8004600:	218c      	movs	r1, #140	; 0x8c
 8004602:	f106 030a 	add.w	r3, r6, #10
 8004606:	fbb3 f2f8 	udiv	r2, r3, r8
 800460a:	fb08 3312 	mls	r3, r8, r2, r3
 800460e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8004612:	2096      	movs	r0, #150	; 0x96
 8004614:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004616:	f105 0318 	add.w	r3, r5, #24
						LCD_Font(150, 140, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 800461a:	360b      	adds	r6, #11
						LCD_Font(150, 140, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 800461c:	9700      	str	r7, [sp, #0]
 800461e:	f7fd fa9f 	bl	8001b60 <LCD_Font.constprop.0>
						LCD_Font(150, 140, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8004622:	fbb6 f3f8 	udiv	r3, r6, r8
 8004626:	fb08 6613 	mls	r6, r8, r3, r6
 800462a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800462e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8004632:	218c      	movs	r1, #140	; 0x8c
 8004634:	2096      	movs	r0, #150	; 0x96
 8004636:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
 800463a:	f105 0318 	add.w	r3, r5, #24
 800463e:	9600      	str	r6, [sp, #0]
 8004640:	f7fd fa8e 	bl	8001b60 <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 8004644:	f894 3640 	ldrb.w	r3, [r4, #1600]	; 0x640
 8004648:	f894 263f 	ldrb.w	r2, [r4, #1599]	; 0x63f
 800464c:	496c      	ldr	r1, [pc, #432]	; (8004800 <main+0x1084>)
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	a819      	add	r0, sp, #100	; 0x64
 8004652:	f894 363e 	ldrb.w	r3, [r4, #1598]	; 0x63e
 8004656:	f001 ffe7 	bl	8006628 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 800465a:	218c      	movs	r1, #140	; 0x8c
 800465c:	20fa      	movs	r0, #250	; 0xfa
 800465e:	f105 0318 	add.w	r3, r5, #24
 8004662:	aa19      	add	r2, sp, #100	; 0x64
 8004664:	9700      	str	r7, [sp, #0]
 8004666:	f7fd fa7b 	bl	8001b60 <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear);
 800466a:	f894 363c 	ldrb.w	r3, [r4, #1596]	; 0x63c
 800466e:	f894 263a 	ldrb.w	r2, [r4, #1594]	; 0x63a
 8004672:	4963      	ldr	r1, [pc, #396]	; (8004800 <main+0x1084>)
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	a819      	add	r0, sp, #100	; 0x64
 8004678:	f894 363b 	ldrb.w	r3, [r4, #1595]	; 0x63b
 800467c:	f001 ffd4 	bl	8006628 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 8004680:	f105 0318 	add.w	r3, r5, #24
 8004684:	218c      	movs	r1, #140	; 0x8c
 8004686:	20fa      	movs	r0, #250	; 0xfa
 8004688:	9600      	str	r6, [sp, #0]
 800468a:	aa19      	add	r2, sp, #100	; 0x64
 800468c:	f7fd fa68 	bl	8001b60 <LCD_Font.constprop.0>
						rtcDayLast = rtcDay;
 8004690:	f894 3639 	ldrb.w	r3, [r4, #1593]	; 0x639
 8004694:	f884 363d 	strb.w	r3, [r4, #1597]	; 0x63d
						rtcDateLast = rtcDate;
 8004698:	f894 363a 	ldrb.w	r3, [r4, #1594]	; 0x63a
 800469c:	f884 363f 	strb.w	r3, [r4, #1599]	; 0x63f
					rtcMonthLast = rtcMonth;
 80046a0:	4b58      	ldr	r3, [pc, #352]	; (8004804 <main+0x1088>)
 80046a2:	f893 263b 	ldrb.w	r2, [r3, #1595]	; 0x63b
 80046a6:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e
					rtcYearLast = rtcYear;
 80046aa:	f893 263c 	ldrb.w	r2, [r3, #1596]	; 0x63c
 80046ae:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640
					rtcHrsLast = rtcHrs;
 80046b2:	f893 2638 	ldrb.w	r2, [r3, #1592]	; 0x638
 80046b6:	4b54      	ldr	r3, [pc, #336]	; (8004808 <main+0x108c>)
 80046b8:	729a      	strb	r2, [r3, #10]
				rtcMinLast = rtcMin;
 80046ba:	4c52      	ldr	r4, [pc, #328]	; (8004804 <main+0x1088>)
 80046bc:	4b52      	ldr	r3, [pc, #328]	; (8004808 <main+0x108c>)
 80046be:	f894 2637 	ldrb.w	r2, [r4, #1591]	; 0x637
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80046c2:	20ec      	movs	r0, #236	; 0xec
 80046c4:	725a      	strb	r2, [r3, #9]
    cmd[0] = 0xFA; // temp_msb
 80046c6:	23fa      	movs	r3, #250	; 0xfa
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80046c8:	2201      	movs	r2, #1
 80046ca:	a924      	add	r1, sp, #144	; 0x90
    cmd[0] = 0xFA; // temp_msb
 80046cc:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80046d0:	f7fc ffa5 	bl	800161e <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 80046d4:	f10d 0191 	add.w	r1, sp, #145	; 0x91
 80046d8:	2203      	movs	r2, #3
 80046da:	20ec      	movs	r0, #236	; 0xec
 80046dc:	f7fc fe1c 	bl	8001318 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80046e0:	f89d 3092 	ldrb.w	r3, [sp, #146]	; 0x92
 80046e4:	f89d 2091 	ldrb.w	r2, [sp, #145]	; 0x91
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80046ee:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
				temperature = BME280_getTemperature(-1);
 80046f2:	f504 68ca 	add.w	r8, r4, #1616	; 0x650
 80046f6:	ea43 1512 	orr.w	r5, r3, r2, lsr #4
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 80046fa:	f8b4 20e4 	ldrh.w	r2, [r4, #228]	; 0xe4
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 80046fe:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8004702:	0052      	lsls	r2, r2, #1
 8004704:	ebc2 02d5 	rsb	r2, r2, r5, lsr #3
 8004708:	f9b4 50e6 	ldrsh.w	r5, [r4, #230]	; 0xe6
 800470c:	436a      	muls	r2, r5
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 800470e:	fb03 f503 	mul.w	r5, r3, r3
 8004712:	f9b4 30e8 	ldrsh.w	r3, [r4, #232]	; 0xe8
 8004716:	0b2d      	lsrs	r5, r5, #12
 8004718:	435d      	muls	r5, r3
 800471a:	0bad      	lsrs	r5, r5, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800471c:	eb05 25d2 	add.w	r5, r5, r2, lsr #11
    temp = (temp * 5 + 128) >> 8;
 8004720:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8004724:	3080      	adds	r0, #128	; 0x80
    tempf = (float) temp;
 8004726:	1200      	asrs	r0, r0, #8
    t_fine = temp;
 8004728:	f8c4 5644 	str.w	r5, [r4, #1604]	; 0x644
    tempf = (float) temp;
 800472c:	f7fe fe62 	bl	80033f4 <__aeabi_i2f>
    return round_nth((tempf / 100.0f), n);
 8004730:	4936      	ldr	r1, [pc, #216]	; (800480c <main+0x1090>)
 8004732:	f7fe ff67 	bl	8003604 <__aeabi_fdiv>
 8004736:	f7fd faa7 	bl	8001c88 <round_nth.constprop.0>
 800473a:	4607      	mov	r7, r0
 800473c:	f7fe f952 	bl	80029e4 <__aeabi_f2d>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	e948 2302 	strd	r2, r3, [r8, #-8]
    cmd[0] = 0xFD; // hum_msb
 8004748:	23fd      	movs	r3, #253	; 0xfd
 800474a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800474e:	2201      	movs	r2, #1
 8004750:	20ec      	movs	r0, #236	; 0xec
 8004752:	a924      	add	r1, sp, #144	; 0x90
    cmd[0] = 0xFD; // hum_msb
 8004754:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8004758:	f7fc ff61 	bl	800161e <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 800475c:	2202      	movs	r2, #2
 800475e:	20ec      	movs	r0, #236	; 0xec
 8004760:	f10d 0191 	add.w	r1, sp, #145	; 0x91
 8004764:	f7fc fdd8 	bl	8001318 <HAL_I2C_Master_Receive.constprop.0.isra.0>
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8004768:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    v_x1 = t_fine - 76800;
 800476c:	f5a5 3396 	sub.w	r3, r5, #76800	; 0x12c00
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8004770:	f9b4 2106 	ldrsh.w	r2, [r4, #262]	; 0x106
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8004774:	4358      	muls	r0, r3
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8004776:	435a      	muls	r2, r3
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8004778:	12c0      	asrs	r0, r0, #11
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 800477a:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800477c:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8004780:	4350      	muls	r0, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 8004782:	f9b4 20fe 	ldrsh.w	r2, [r4, #254]	; 0xfe
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8004786:	1280      	asrs	r0, r0, #10
 8004788:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
 800478c:	4350      	muls	r0, r2
    hum_raw = (cmd[1] << 8) | cmd[2];
 800478e:	f8bd 2091 	ldrh.w	r2, [sp, #145]	; 0x91
                                            (int32_t) dig_H2 + 8192) >> 14));
 8004792:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
    hum_raw = (cmd[1] << 8) | cmd[2];
 8004796:	ba52      	rev16	r2, r2
 8004798:	b291      	uxth	r1, r2
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 800479a:	f9b4 2102 	ldrsh.w	r2, [r4, #258]	; 0x102
                                            (int32_t) dig_H2 + 8192) >> 14));
 800479e:	1380      	asrs	r0, r0, #14
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 80047a0:	0512      	lsls	r2, r2, #20
 80047a2:	ebc2 3281 	rsb	r2, r2, r1, lsl #14
 80047a6:	f9b4 1104 	ldrsh.w	r1, [r4, #260]	; 0x104
 80047aa:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80047ae:	fb03 2311 	mls	r3, r3, r1, r2
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80047b2:	0bdb      	lsrs	r3, r3, #15
 80047b4:	4358      	muls	r0, r3
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 80047b6:	13c3      	asrs	r3, r0, #15
 80047b8:	435b      	muls	r3, r3
 80047ba:	f8b4 20fc 	ldrh.w	r2, [r4, #252]	; 0xfc
 80047be:	11db      	asrs	r3, r3, #7
 80047c0:	4353      	muls	r3, r2
 80047c2:	eba0 1023 	sub.w	r0, r0, r3, asr #4
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 80047c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 80047ca:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 80047ce:	bfa8      	it	ge
 80047d0:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
    humf = (float) (v_x1 >> 12);
 80047d4:	1300      	asrs	r0, r0, #12
 80047d6:	f7fe fe0d 	bl	80033f4 <__aeabi_i2f>
    return round_nth((humf / 1024.0f), n);
 80047da:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 80047de:	f7fe fe5d 	bl	800349c <__aeabi_fmul>
 80047e2:	f7fd fa51 	bl	8001c88 <round_nth.constprop.0>
 80047e6:	4606      	mov	r6, r0
				humidity = BME280_getHumidity(-1);
 80047e8:	f7fe f8fc 	bl	80029e4 <__aeabi_f2d>
 80047ec:	e010      	b.n	8004810 <main+0x1094>
 80047ee:	bf00      	nop
 80047f0:	00ffa500 	.word	0x00ffa500
 80047f4:	40011000 	.word	0x40011000
 80047f8:	0801bb0d 	.word	0x0801bb0d
 80047fc:	0800a2f8 	.word	0x0800a2f8
 8004800:	0801bb03 	.word	0x0801bb03
 8004804:	20000208 	.word	0x20000208
 8004808:	20000000 	.word	0x20000000
 800480c:	42c80000 	.word	0x42c80000
    cmd[0] = 0xF7; // press_msb
 8004810:	23f7      	movs	r3, #247	; 0xf7
 8004812:	e9c8 0100 	strd	r0, r1, [r8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8004816:	2201      	movs	r2, #1
 8004818:	20ec      	movs	r0, #236	; 0xec
 800481a:	a924      	add	r1, sp, #144	; 0x90
    var1 = (t_fine >> 1) - 64000;
 800481c:	106d      	asrs	r5, r5, #1
    cmd[0] = 0xF7; // press_msb
 800481e:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
    var1 = (t_fine >> 1) - 64000;
 8004822:	f5a5 457a 	sub.w	r5, r5, #64000	; 0xfa00
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8004826:	f7fc fefa 	bl	800161e <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 800482a:	2203      	movs	r2, #3
 800482c:	20ec      	movs	r0, #236	; 0xec
 800482e:	f10d 0191 	add.w	r1, sp, #145	; 0x91
 8004832:	f7fc fd71 	bl	8001318 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8004836:	10ab      	asrs	r3, r5, #2
 8004838:	435b      	muls	r3, r3
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 800483a:	f9b4 00ee 	ldrsh.w	r0, [r4, #238]	; 0xee
 800483e:	135a      	asrs	r2, r3, #13
 8004840:	4342      	muls	r2, r0
 8004842:	f9b4 00ec 	ldrsh.w	r0, [r4, #236]	; 0xec
 8004846:	4368      	muls	r0, r5
 8004848:	1040      	asrs	r0, r0, #1
 800484a:	eb00 00e2 	add.w	r0, r0, r2, asr #3
 800484e:	1480      	asrs	r0, r0, #18
    var1 = ((32768 + var1) * dig_P1) >> 15;
 8004850:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
 8004854:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8004858:	4350      	muls	r0, r2
    if (var1 == 0) {
 800485a:	13c2      	asrs	r2, r0, #15
 800485c:	f000 80ae 	beq.w	80049bc <main+0x1240>
    var2 = var2 + ((var1 * dig_P5) << 1);
 8004860:	f9b4 10f2 	ldrsh.w	r1, [r4, #242]	; 0xf2
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8004864:	f9b4 00f4 	ldrsh.w	r0, [r4, #244]	; 0xf4
    var2 = var2 + ((var1 * dig_P5) << 1);
 8004868:	434d      	muls	r5, r1
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 800486a:	12db      	asrs	r3, r3, #11
    var2 = var2 + ((var1 * dig_P5) << 1);
 800486c:	006d      	lsls	r5, r5, #1
 800486e:	fb00 5503 	mla	r5, r0, r3, r5
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8004872:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
 8004876:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
 800487a:	091b      	lsrs	r3, r3, #4
 800487c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004880:	f89d 0091 	ldrb.w	r0, [sp, #145]	; 0x91
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8004884:	f9b4 10f8 	ldrsh.w	r1, [r4, #248]	; 0xf8
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8004888:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
    var2 = (var2 >> 2) + (dig_P4 << 16);
 800488c:	f9b4 00f0 	ldrsh.w	r0, [r4, #240]	; 0xf0
 8004890:	0400      	lsls	r0, r0, #16
 8004892:	eb00 05a5 	add.w	r5, r0, r5, asr #2
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 8004896:	4875      	ldr	r0, [pc, #468]	; (8004a6c <main+0x12f0>)
 8004898:	eb03 3325 	add.w	r3, r3, r5, asr #12
 800489c:	4343      	muls	r3, r0
 800489e:	f103 4043 	add.w	r0, r3, #3271557120	; 0xc3000000
 80048a2:	f500 00a0 	add.w	r0, r0, #5242880	; 0x500000
    if (press < 0x80000000) {
 80048a6:	2800      	cmp	r0, #0
        press = (press / var1) * 2;
 80048a8:	bfb3      	iteet	lt
 80048aa:	fbb0 f0f2 	udivlt	r0, r0, r2
        press = (press << 1) / var1;
 80048ae:	0040      	lslge	r0, r0, #1
 80048b0:	fbb0 f0f2 	udivge	r0, r0, r2
        press = (press / var1) * 2;
 80048b4:	0040      	lsllt	r0, r0, #1
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 80048b6:	08c3      	lsrs	r3, r0, #3
 80048b8:	435b      	muls	r3, r3
 80048ba:	f9b4 20fa 	ldrsh.w	r2, [r4, #250]	; 0xfa
 80048be:	0b5b      	lsrs	r3, r3, #13
 80048c0:	435a      	muls	r2, r3
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 80048c2:	0883      	lsrs	r3, r0, #2
 80048c4:	434b      	muls	r3, r1
 80048c6:	135b      	asrs	r3, r3, #13
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 80048c8:	eb03 3322 	add.w	r3, r3, r2, asr #12
 80048cc:	f9b4 20f6 	ldrsh.w	r2, [r4, #246]	; 0xf6
 80048d0:	4413      	add	r3, r2
    pressf = (float) press;
 80048d2:	eb00 1023 	add.w	r0, r0, r3, asr #4
 80048d6:	f7fe fd89 	bl	80033ec <__aeabi_ui2f>
    return (pressf / 100.0f);
 80048da:	4965      	ldr	r1, [pc, #404]	; (8004a70 <main+0x12f4>)
 80048dc:	f7fe fe92 	bl	8003604 <__aeabi_fdiv>
				pressure = (uint16_t)BME280_getPressure();
 80048e0:	f7fe ff2c 	bl	800373c <__aeabi_f2uiz>
				if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 80048e4:	f46f 7196 	mvn.w	r1, #300	; 0x12c
 80048e8:	f240 331e 	movw	r3, #798	; 0x31e
				pressure = (uint16_t)BME280_getPressure();
 80048ec:	b280      	uxth	r0, r0
 80048ee:	f8a4 0658 	strh.w	r0, [r4, #1624]	; 0x658
				if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 80048f2:	4408      	add	r0, r1
 80048f4:	b280      	uxth	r0, r0
 80048f6:	4298      	cmp	r0, r3
 80048f8:	f200 8373 	bhi.w	8004fe2 <main+0x1866>
 80048fc:	4638      	mov	r0, r7
 80048fe:	495d      	ldr	r1, [pc, #372]	; (8004a74 <main+0x12f8>)
 8004900:	f7fe fc5e 	bl	80031c0 <__aeabi_fcmplt>
 8004904:	2800      	cmp	r0, #0
 8004906:	f000 836c 	beq.w	8004fe2 <main+0x1866>
 800490a:	4638      	mov	r0, r7
 800490c:	495a      	ldr	r1, [pc, #360]	; (8004a78 <main+0x12fc>)
 800490e:	f7fe fc75 	bl	80031fc <__aeabi_fcmpgt>
 8004912:	2800      	cmp	r0, #0
 8004914:	f000 8365 	beq.w	8004fe2 <main+0x1866>
 8004918:	2100      	movs	r1, #0
 800491a:	4630      	mov	r0, r6
 800491c:	f7fe fc6e 	bl	80031fc <__aeabi_fcmpgt>
 8004920:	2800      	cmp	r0, #0
 8004922:	f000 835e 	beq.w	8004fe2 <main+0x1866>
 8004926:	4630      	mov	r0, r6
 8004928:	4951      	ldr	r1, [pc, #324]	; (8004a70 <main+0x12f4>)
 800492a:	f7fe fc49 	bl	80031c0 <__aeabi_fcmplt>
 800492e:	2800      	cmp	r0, #0
 8004930:	f000 8357 	beq.w	8004fe2 <main+0x1866>
					if (temperature != temperatureLast) {
 8004934:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004938:	4d50      	ldr	r5, [pc, #320]	; (8004a7c <main+0x1300>)
 800493a:	46a8      	mov	r8, r5
 800493c:	e878 6704 	ldrd	r6, r7, [r8], #-16
 8004940:	4632      	mov	r2, r6
 8004942:	463b      	mov	r3, r7
 8004944:	f7fe fb0e 	bl	8002f64 <__aeabi_dcmpeq>
 8004948:	2800      	cmp	r0, #0
 800494a:	f040 80c7 	bne.w	8004adc <main+0x1360>
						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 800494e:	4652      	mov	r2, sl
 8004950:	465b      	mov	r3, fp
 8004952:	4630      	mov	r0, r6
 8004954:	4639      	mov	r1, r7
 8004956:	f7fe fb23 	bl	8002fa0 <__aeabi_dcmpge>
 800495a:	b968      	cbnz	r0, 8004978 <main+0x11fc>
 800495c:	2200      	movs	r2, #0
 800495e:	2300      	movs	r3, #0
 8004960:	4630      	mov	r0, r6
 8004962:	4639      	mov	r1, r7
 8004964:	f7fe fb08 	bl	8002f78 <__aeabi_dcmplt>
 8004968:	b350      	cbz	r0, 80049c0 <main+0x1244>
 800496a:	2200      	movs	r2, #0
 800496c:	4630      	mov	r0, r6
 800496e:	4639      	mov	r1, r7
 8004970:	4b43      	ldr	r3, [pc, #268]	; (8004a80 <main+0x1304>)
 8004972:	f7fe fb1f 	bl	8002fb4 <__aeabi_dcmpgt>
 8004976:	b318      	cbz	r0, 80049c0 <main+0x1244>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8004978:	4632      	mov	r2, r6
 800497a:	463b      	mov	r3, r7
 800497c:	4941      	ldr	r1, [pc, #260]	; (8004a84 <main+0x1308>)
 800497e:	a824      	add	r0, sp, #144	; 0x90
 8004980:	f001 fe52 	bl	8006628 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8004984:	2300      	movs	r3, #0
 8004986:	21bb      	movs	r1, #187	; 0xbb
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	2001      	movs	r0, #1
 800498c:	4b3e      	ldr	r3, [pc, #248]	; (8004a88 <main+0x130c>)
 800498e:	aa24      	add	r2, sp, #144	; 0x90
 8004990:	e032      	b.n	80049f8 <main+0x127c>
    tmpccer &= ~TIM_CCER_CC1NE;
 8004992:	f023 030e 	bic.w	r3, r3, #14
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004996:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800499a:	f7ff bbda 	b.w	8004152 <main+0x9d6>
				LCD_Circle(170, 35, 7, 1, 1, BLACK);
 800499e:	462b      	mov	r3, r5
 80049a0:	2201      	movs	r2, #1
 80049a2:	2107      	movs	r1, #7
 80049a4:	2023      	movs	r0, #35	; 0x23
 80049a6:	f7fc f89d 	bl	8000ae4 <LCD_Circle.constprop.0>
				LCD_Circle(170, 75, 7, 1, 1, BLACK);
 80049aa:	462b      	mov	r3, r5
 80049ac:	2201      	movs	r2, #1
 80049ae:	2107      	movs	r1, #7
 80049b0:	204b      	movs	r0, #75	; 0x4b
 80049b2:	f7fc f897 	bl	8000ae4 <LCD_Circle.constprop.0>
 80049b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049ba:	e56a      	b.n	8004492 <main+0xd16>
        return 0;
 80049bc:	2000      	movs	r0, #0
 80049be:	e78f      	b.n	80048e0 <main+0x1164>
						else if (temperatureLast < 10 && temperatureLast > 0) {
 80049c0:	4652      	mov	r2, sl
 80049c2:	465b      	mov	r3, fp
 80049c4:	4630      	mov	r0, r6
 80049c6:	4639      	mov	r1, r7
 80049c8:	f7fe fad6 	bl	8002f78 <__aeabi_dcmplt>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	d03b      	beq.n	8004a48 <main+0x12cc>
 80049d0:	2200      	movs	r2, #0
 80049d2:	2300      	movs	r3, #0
 80049d4:	4630      	mov	r0, r6
 80049d6:	4639      	mov	r1, r7
 80049d8:	f7fe faec 	bl	8002fb4 <__aeabi_dcmpgt>
 80049dc:	2800      	cmp	r0, #0
 80049de:	d033      	beq.n	8004a48 <main+0x12cc>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 80049e0:	4632      	mov	r2, r6
 80049e2:	463b      	mov	r3, r7
 80049e4:	4927      	ldr	r1, [pc, #156]	; (8004a84 <main+0x1308>)
 80049e6:	a824      	add	r0, sp, #144	; 0x90
 80049e8:	f001 fe1e 	bl	8006628 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 80049ec:	2300      	movs	r3, #0
 80049ee:	21bb      	movs	r1, #187	; 0xbb
 80049f0:	201b      	movs	r0, #27
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	4b24      	ldr	r3, [pc, #144]	; (8004a88 <main+0x130c>)
 80049f6:	aa24      	add	r2, sp, #144	; 0x90
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 80049f8:	f7fd f8b2 	bl	8001b60 <LCD_Font.constprop.0>
						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 80049fc:	e958 6702 	ldrd	r6, r7, [r8, #-8]
 8004a00:	4652      	mov	r2, sl
 8004a02:	465b      	mov	r3, fp
 8004a04:	4630      	mov	r0, r6
 8004a06:	4639      	mov	r1, r7
 8004a08:	f7fe faca 	bl	8002fa0 <__aeabi_dcmpge>
 8004a0c:	b978      	cbnz	r0, 8004a2e <main+0x12b2>
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2300      	movs	r3, #0
 8004a12:	4630      	mov	r0, r6
 8004a14:	4639      	mov	r1, r7
 8004a16:	f7fe faaf 	bl	8002f78 <__aeabi_dcmplt>
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	d03a      	beq.n	8004a94 <main+0x1318>
 8004a1e:	2200      	movs	r2, #0
 8004a20:	4630      	mov	r0, r6
 8004a22:	4639      	mov	r1, r7
 8004a24:	4b16      	ldr	r3, [pc, #88]	; (8004a80 <main+0x1304>)
 8004a26:	f7fe fac5 	bl	8002fb4 <__aeabi_dcmpgt>
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	d032      	beq.n	8004a94 <main+0x1318>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8004a2e:	4632      	mov	r2, r6
 8004a30:	463b      	mov	r3, r7
 8004a32:	4914      	ldr	r1, [pc, #80]	; (8004a84 <main+0x1308>)
 8004a34:	a824      	add	r0, sp, #144	; 0x90
 8004a36:	f001 fdf7 	bl	8006628 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8004a3a:	4b14      	ldr	r3, [pc, #80]	; (8004a8c <main+0x1310>)
 8004a3c:	21bb      	movs	r1, #187	; 0xbb
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	2001      	movs	r0, #1
 8004a42:	4b11      	ldr	r3, [pc, #68]	; (8004a88 <main+0x130c>)
 8004a44:	aa24      	add	r2, sp, #144	; 0x90
 8004a46:	e043      	b.n	8004ad0 <main+0x1354>
						else if (temperatureLast <= -10) {
 8004a48:	2200      	movs	r2, #0
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	4639      	mov	r1, r7
 8004a4e:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <main+0x1304>)
 8004a50:	f7fe fa9c 	bl	8002f8c <__aeabi_dcmple>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d0d1      	beq.n	80049fc <main+0x1280>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 8004a58:	4639      	mov	r1, r7
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	f7fe faca 	bl	8002ff4 <__aeabi_d2iz>
 8004a60:	490b      	ldr	r1, [pc, #44]	; (8004a90 <main+0x1314>)
 8004a62:	b242      	sxtb	r2, r0
 8004a64:	a824      	add	r0, sp, #144	; 0x90
 8004a66:	f001 fddf 	bl	8006628 <siprintf>
 8004a6a:	e78b      	b.n	8004984 <main+0x1208>
 8004a6c:	fffff3cb 	.word	0xfffff3cb
 8004a70:	42c80000 	.word	0x42c80000
 8004a74:	42aa0000 	.word	0x42aa0000
 8004a78:	c2200000 	.word	0xc2200000
 8004a7c:	20000868 	.word	0x20000868
 8004a80:	c0240000 	.word	0xc0240000
 8004a84:	0801bb12 	.word	0x0801bb12
 8004a88:	0800a310 	.word	0x0800a310
 8004a8c:	00ffa500 	.word	0x00ffa500
 8004a90:	0801bb19 	.word	0x0801bb19
						else if (temperature < 10 && temperature > 0) {
 8004a94:	4652      	mov	r2, sl
 8004a96:	465b      	mov	r3, fp
 8004a98:	4630      	mov	r0, r6
 8004a9a:	4639      	mov	r1, r7
 8004a9c:	f7fe fa6c 	bl	8002f78 <__aeabi_dcmplt>
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	f000 82b4 	beq.w	800500e <main+0x1892>
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	4630      	mov	r0, r6
 8004aac:	4639      	mov	r1, r7
 8004aae:	f7fe fa81 	bl	8002fb4 <__aeabi_dcmpgt>
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	f000 82ab 	beq.w	800500e <main+0x1892>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8004ab8:	4632      	mov	r2, r6
 8004aba:	463b      	mov	r3, r7
 8004abc:	49bb      	ldr	r1, [pc, #748]	; (8004dac <main+0x1630>)
 8004abe:	a824      	add	r0, sp, #144	; 0x90
 8004ac0:	f001 fdb2 	bl	8006628 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8004ac4:	21bb      	movs	r1, #187	; 0xbb
 8004ac6:	201b      	movs	r0, #27
 8004ac8:	4bb9      	ldr	r3, [pc, #740]	; (8004db0 <main+0x1634>)
 8004aca:	aa24      	add	r2, sp, #144	; 0x90
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	4bb9      	ldr	r3, [pc, #740]	; (8004db4 <main+0x1638>)
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8004ad0:	f7fd f846 	bl	8001b60 <LCD_Font.constprop.0>
						temperatureLast = temperature;
 8004ad4:	e958 2302 	ldrd	r2, r3, [r8, #-8]
 8004ad8:	e9c5 2300 	strd	r2, r3, [r5]
					if (humidity != humidityLast) {
 8004adc:	e955 0104 	ldrd	r0, r1, [r5, #-16]
 8004ae0:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004db8 <main+0x163c>
 8004ae4:	e959 6702 	ldrd	r6, r7, [r9, #-8]
 8004ae8:	4632      	mov	r2, r6
 8004aea:	463b      	mov	r3, r7
 8004aec:	f7fe fa3a 	bl	8002f64 <__aeabi_dcmpeq>
 8004af0:	9002      	str	r0, [sp, #8]
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d132      	bne.n	8004b5c <main+0x13e0>
						sprintf(weatherPrintH, "%.1f'H", humidityLast);
 8004af6:	4632      	mov	r2, r6
 8004af8:	463b      	mov	r3, r7
 8004afa:	49b0      	ldr	r1, [pc, #704]	; (8004dbc <main+0x1640>)
 8004afc:	a824      	add	r0, sp, #144	; 0x90
 8004afe:	f001 fd93 	bl	8006628 <siprintf>
						if (humidityLast >= 10)
 8004b02:	e959 0102 	ldrd	r0, r1, [r9, #-8]
 8004b06:	4652      	mov	r2, sl
 8004b08:	465b      	mov	r3, fp
 8004b0a:	f7fe fa49 	bl	8002fa0 <__aeabi_dcmpge>
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	f000 8290 	beq.w	8005034 <main+0x18b8>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8004b14:	21bb      	movs	r1, #187	; 0xbb
 8004b16:	20a0      	movs	r0, #160	; 0xa0
 8004b18:	9b02      	ldr	r3, [sp, #8]
 8004b1a:	aa24      	add	r2, sp, #144	; 0x90
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	4ba5      	ldr	r3, [pc, #660]	; (8004db4 <main+0x1638>)
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8004b20:	f7fd f81e 	bl	8001b60 <LCD_Font.constprop.0>
						sprintf(weatherPrintH, "%.1f'H", humidity);
 8004b24:	e955 2304 	ldrd	r2, r3, [r5, #-16]
 8004b28:	49a4      	ldr	r1, [pc, #656]	; (8004dbc <main+0x1640>)
 8004b2a:	a824      	add	r0, sp, #144	; 0x90
 8004b2c:	f001 fd7c 	bl	8006628 <siprintf>
						if (humidity >= 10)
 8004b30:	e955 6704 	ldrd	r6, r7, [r5, #-16]
 8004b34:	4652      	mov	r2, sl
 8004b36:	465b      	mov	r3, fp
 8004b38:	4639      	mov	r1, r7
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	f7fe fa30 	bl	8002fa0 <__aeabi_dcmpge>
 8004b40:	f64f 73ff 	movw	r3, #65535	; 0xffff
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8004b44:	21bb      	movs	r1, #187	; 0xbb
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	aa24      	add	r2, sp, #144	; 0x90
 8004b4a:	4b9a      	ldr	r3, [pc, #616]	; (8004db4 <main+0x1638>)
						if (humidity >= 10)
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	f000 8277 	beq.w	8005040 <main+0x18c4>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8004b52:	20a0      	movs	r0, #160	; 0xa0
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8004b54:	f7fd f804 	bl	8001b60 <LCD_Font.constprop.0>
						humidityLast = humidity;
 8004b58:	e949 6702 	strd	r6, r7, [r9, #-8]
					if (pressureLast != pressure) {
 8004b5c:	f8b4 2670 	ldrh.w	r2, [r4, #1648]	; 0x670
 8004b60:	f8b4 3658 	ldrh.w	r3, [r4, #1624]	; 0x658
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d031      	beq.n	8004bcc <main+0x1450>
						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d", pressureLast);
 8004b68:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8004b6c:	bf2c      	ite	cs
 8004b6e:	4994      	ldrcs	r1, [pc, #592]	; (8004dc0 <main+0x1644>)
						else sprintf(weatherPrintP, "0%02dP", pressureLast);
 8004b70:	4994      	ldrcc	r1, [pc, #592]	; (8004dc4 <main+0x1648>)
 8004b72:	a824      	add	r0, sp, #144	; 0x90
 8004b74:	f001 fd58 	bl	8006628 <siprintf>
						LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 8004b78:	2300      	movs	r3, #0
 8004b7a:	21bb      	movs	r1, #187	; 0xbb
 8004b7c:	f240 1041 	movw	r0, #321	; 0x141
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	aa24      	add	r2, sp, #144	; 0x90
 8004b84:	4b8b      	ldr	r3, [pc, #556]	; (8004db4 <main+0x1638>)
 8004b86:	f7fc ffeb 	bl	8001b60 <LCD_Font.constprop.0>
						if (pressure >= 1000) sprintf(weatherPrintP, "%02d", pressure);
 8004b8a:	f8b4 2658 	ldrh.w	r2, [r4, #1624]	; 0x658
						else sprintf(weatherPrintP, "0%02dP", pressure);
 8004b8e:	a824      	add	r0, sp, #144	; 0x90
						if (pressure >= 1000) sprintf(weatherPrintP, "%02d", pressure);
 8004b90:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8004b94:	bf2c      	ite	cs
 8004b96:	498a      	ldrcs	r1, [pc, #552]	; (8004dc0 <main+0x1644>)
						else sprintf(weatherPrintP, "0%02dP", pressure);
 8004b98:	498a      	ldrcc	r1, [pc, #552]	; (8004dc4 <main+0x1648>)
 8004b9a:	f001 fd45 	bl	8006628 <siprintf>
						LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 8004b9e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004ba2:	21bb      	movs	r1, #187	; 0xbb
 8004ba4:	f240 1041 	movw	r0, #321	; 0x141
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	aa24      	add	r2, sp, #144	; 0x90
 8004bac:	4b81      	ldr	r3, [pc, #516]	; (8004db4 <main+0x1638>)
 8004bae:	f7fc ffd7 	bl	8001b60 <LCD_Font.constprop.0>
						LCD_Font(321, 187, "0", &DejaVu_Sans_48, 1, BLACK);
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	21bb      	movs	r1, #187	; 0xbb
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	f240 1041 	movw	r0, #321	; 0x141
 8004bbc:	4b7d      	ldr	r3, [pc, #500]	; (8004db4 <main+0x1638>)
 8004bbe:	4a82      	ldr	r2, [pc, #520]	; (8004dc8 <main+0x164c>)
 8004bc0:	f7fc ffce 	bl	8001b60 <LCD_Font.constprop.0>
						pressureLast = pressure;
 8004bc4:	f8b4 3658 	ldrh.w	r3, [r4, #1624]	; 0x658
 8004bc8:	f8a4 3670 	strh.w	r3, [r4, #1648]	; 0x670
					if (AT24XX_Read(0) != rtcHrs) {
 8004bcc:	2000      	movs	r0, #0
 8004bce:	f7fc f93b 	bl	8000e48 <AT24XX_Read>
 8004bd2:	f894 1638 	ldrb.w	r1, [r4, #1592]	; 0x638
 8004bd6:	4288      	cmp	r0, r1
 8004bd8:	f000 80b4 	beq.w	8004d44 <main+0x15c8>
						AT24XX_Update(0, rtcHrs);
 8004bdc:	2000      	movs	r0, #0
 8004bde:	f7fc fae5 	bl	80011ac <AT24XX_Update>
 8004be2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8004be6:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8004dcc <main+0x1650>
						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8004bea:	4630      	mov	r0, r6
 8004bec:	f7fc f92c 	bl	8000e48 <AT24XX_Read>
 8004bf0:	4607      	mov	r7, r0
 8004bf2:	1c70      	adds	r0, r6, #1
 8004bf4:	b280      	uxth	r0, r0
 8004bf6:	f7fc f927 	bl	8000e48 <AT24XX_Read>
 8004bfa:	f240 531e 	movw	r3, #1310	; 0x51e
 8004bfe:	3602      	adds	r6, #2
 8004c00:	b2b6      	uxth	r6, r6
	return (byteH << 8) | byteL;
 8004c02:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8004c06:	429e      	cmp	r6, r3
 8004c08:	f829 7b02 	strh.w	r7, [r9], #2
 8004c0c:	d1ed      	bne.n	8004bea <main+0x146e>
						for (uint16_t i = 154; i > 0; i--) hT[i] = hT[i - 1];
 8004c0e:	496f      	ldr	r1, [pc, #444]	; (8004dcc <main+0x1650>)
 8004c10:	f44f 729a 	mov.w	r2, #308	; 0x134
 8004c14:	1c88      	adds	r0, r1, #2
 8004c16:	f004 fd49 	bl	80096ac <memmove>
						hT[0] = (uint16_t) (temperature * 10);
 8004c1a:	e958 0102 	ldrd	r0, r1, [r8, #-8]
 8004c1e:	4652      	mov	r2, sl
 8004c20:	465b      	mov	r3, fp
 8004c22:	f7fd ff37 	bl	8002a94 <__aeabi_dmul>
 8004c26:	f7fe fa0d 	bl	8003044 <__aeabi_d2uiz>
 8004c2a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8004c2e:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8004dcc <main+0x1650>
 8004c32:	f8a4 0294 	strh.w	r0, [r4, #660]	; 0x294
							AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 8004c36:	f939 7b02 	ldrsh.w	r7, [r9], #2
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	b2f9      	uxtb	r1, r7
 8004c3e:	f7fc fab5 	bl	80011ac <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 8004c42:	1c70      	adds	r0, r6, #1
 8004c44:	f3c7 2107 	ubfx	r1, r7, #8, #8
 8004c48:	b280      	uxth	r0, r0
 8004c4a:	f7fc faaf 	bl	80011ac <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8004c4e:	f240 531e 	movw	r3, #1310	; 0x51e
 8004c52:	3602      	adds	r6, #2
 8004c54:	b2b6      	uxth	r6, r6
 8004c56:	429e      	cmp	r6, r3
 8004c58:	d1ed      	bne.n	8004c36 <main+0x14ba>
 8004c5a:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
 8004c5e:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8004dd0 <main+0x1654>
						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8004c62:	4630      	mov	r0, r6
 8004c64:	f7fc f8f0 	bl	8000e48 <AT24XX_Read>
 8004c68:	4607      	mov	r7, r0
 8004c6a:	1c70      	adds	r0, r6, #1
 8004c6c:	b280      	uxth	r0, r0
 8004c6e:	f7fc f8eb 	bl	8000e48 <AT24XX_Read>
 8004c72:	f640 1306 	movw	r3, #2310	; 0x906
 8004c76:	3602      	adds	r6, #2
 8004c78:	b2b6      	uxth	r6, r6
	return (byteH << 8) | byteL;
 8004c7a:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8004c7e:	429e      	cmp	r6, r3
 8004c80:	f829 7b02 	strh.w	r7, [r9], #2
 8004c84:	d1ed      	bne.n	8004c62 <main+0x14e6>
						for (uint16_t i = 154; i > 0; i--) hH[i] = hH[i - 1];
 8004c86:	4952      	ldr	r1, [pc, #328]	; (8004dd0 <main+0x1654>)
 8004c88:	f44f 729a 	mov.w	r2, #308	; 0x134
 8004c8c:	1c88      	adds	r0, r1, #2
 8004c8e:	f004 fd0d 	bl	80096ac <memmove>
						hH[0] = (uint16_t) (humidity * 10);
 8004c92:	e955 0104 	ldrd	r0, r1, [r5, #-16]
 8004c96:	4652      	mov	r2, sl
 8004c98:	465b      	mov	r3, fp
 8004c9a:	f7fd fefb 	bl	8002a94 <__aeabi_dmul>
 8004c9e:	f7fe f9d1 	bl	8003044 <__aeabi_d2uiz>
 8004ca2:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
 8004ca6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004dd0 <main+0x1654>
 8004caa:	f8a4 03ca 	strh.w	r0, [r4, #970]	; 0x3ca
							AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 8004cae:	f939 7b02 	ldrsh.w	r7, [r9], #2
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	b2f9      	uxtb	r1, r7
 8004cb6:	f7fc fa79 	bl	80011ac <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8004cba:	1c70      	adds	r0, r6, #1
 8004cbc:	f3c7 2107 	ubfx	r1, r7, #8, #8
 8004cc0:	b280      	uxth	r0, r0
 8004cc2:	f7fc fa73 	bl	80011ac <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8004cc6:	f640 1306 	movw	r3, #2310	; 0x906
 8004cca:	3602      	adds	r6, #2
 8004ccc:	b2b6      	uxth	r6, r6
 8004cce:	429e      	cmp	r6, r3
 8004cd0:	d1ed      	bne.n	8004cae <main+0x1532>
 8004cd2:	f640 36b8 	movw	r6, #3000	; 0xbb8
 8004cd6:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8004dd4 <main+0x1658>
						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8004cda:	4630      	mov	r0, r6
 8004cdc:	f7fc f8b4 	bl	8000e48 <AT24XX_Read>
 8004ce0:	4607      	mov	r7, r0
 8004ce2:	1c70      	adds	r0, r6, #1
 8004ce4:	b280      	uxth	r0, r0
 8004ce6:	f7fc f8af 	bl	8000e48 <AT24XX_Read>
 8004cea:	f640 43ee 	movw	r3, #3310	; 0xcee
 8004cee:	3602      	adds	r6, #2
 8004cf0:	b2b6      	uxth	r6, r6
	return (byteH << 8) | byteL;
 8004cf2:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8004cf6:	429e      	cmp	r6, r3
 8004cf8:	f829 7b02 	strh.w	r7, [r9], #2
 8004cfc:	d1ed      	bne.n	8004cda <main+0x155e>
						hP[0] = (uint16_t)pressure;
 8004cfe:	f640 36b8 	movw	r6, #3000	; 0xbb8
						for (uint16_t i = 154; i > 0; i--) hP[i] = hP[i - 1];
 8004d02:	4934      	ldr	r1, [pc, #208]	; (8004dd4 <main+0x1658>)
 8004d04:	f44f 729a 	mov.w	r2, #308	; 0x134
 8004d08:	1c88      	adds	r0, r1, #2
 8004d0a:	f004 fccf 	bl	80096ac <memmove>
						hP[0] = (uint16_t)pressure;
 8004d0e:	f8b4 3658 	ldrh.w	r3, [r4, #1624]	; 0x658
 8004d12:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8004dd4 <main+0x1658>
 8004d16:	f8a4 3500 	strh.w	r3, [r4, #1280]	; 0x500
							AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 8004d1a:	f939 7b02 	ldrsh.w	r7, [r9], #2
 8004d1e:	4630      	mov	r0, r6
 8004d20:	b2f9      	uxtb	r1, r7
 8004d22:	f7fc fa43 	bl	80011ac <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8004d26:	1c70      	adds	r0, r6, #1
 8004d28:	f3c7 2107 	ubfx	r1, r7, #8, #8
 8004d2c:	b280      	uxth	r0, r0
 8004d2e:	f7fc fa3d 	bl	80011ac <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8004d32:	f640 43ee 	movw	r3, #3310	; 0xcee
 8004d36:	3602      	adds	r6, #2
 8004d38:	b2b6      	uxth	r6, r6
 8004d3a:	429e      	cmp	r6, r3
 8004d3c:	d1ed      	bne.n	8004d1a <main+0x159e>
						viewGraphs = 0;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	f884 3672 	strb.w	r3, [r4, #1650]	; 0x672
					LCD_Rect(2, 189, 157, 129, 1, BLUE);
 8004d44:	2002      	movs	r0, #2
 8004d46:	f7fb ff9c 	bl	8000c82 <LCD_Rect.constprop.0>
					int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8004d4a:	e958 0102 	ldrd	r0, r1, [r8, #-8]
 8004d4e:	4652      	mov	r2, sl
 8004d50:	465b      	mov	r3, fp
 8004d52:	f7fd fe9f 	bl	8002a94 <__aeabi_dmul>
 8004d56:	f7fe f94d 	bl	8002ff4 <__aeabi_d2iz>
					LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	229e      	movs	r2, #158	; 0x9e
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004d5e:	b286      	uxth	r6, r0
 8004d60:	3ee2      	subs	r6, #226	; 0xe2
 8004d62:	01f6      	lsls	r6, r6, #7
 8004d64:	bf48      	it	mi
 8004d66:	363f      	addmi	r6, #63	; 0x3f
					LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	21bf      	movs	r1, #191	; 0xbf
 8004d6c:	f240 133d 	movw	r3, #317	; 0x13d
 8004d70:	4610      	mov	r0, r2
					int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8004d72:	f346 168f 	sbfx	r6, r6, #6, #16
					LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 8004d76:	f7fb ff49 	bl	8000c0c <LCD_Line.constprop.0>
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8004d7a:	2e00      	cmp	r6, #0
 8004d7c:	dd2c      	ble.n	8004dd8 <main+0x165c>
 8004d7e:	2e7f      	cmp	r6, #127	; 0x7f
 8004d80:	bfa8      	it	ge
 8004d82:	267f      	movge	r6, #127	; 0x7f
 8004d84:	b236      	sxth	r6, r6
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8004d86:	f1c6 037f 	rsb	r3, r6, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	b2db      	uxtb	r3, r3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8004d8e:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 8004d92:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8004d96:	229e      	movs	r2, #158	; 0x9e
 8004d98:	f5c6 769f 	rsb	r6, r6, #318	; 0x13e
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	4610      	mov	r0, r2
 8004da0:	f240 133d 	movw	r3, #317	; 0x13d
 8004da4:	b2b1      	uxth	r1, r6
 8004da6:	f7fb ff31 	bl	8000c0c <LCD_Line.constprop.0>
 8004daa:	e015      	b.n	8004dd8 <main+0x165c>
 8004dac:	0801bb12 	.word	0x0801bb12
 8004db0:	00ffa500 	.word	0x00ffa500
 8004db4:	0800a310 	.word	0x0800a310
 8004db8:	20000878 	.word	0x20000878
 8004dbc:	0801bb1f 	.word	0x0801bb1f
 8004dc0:	0801bb0d 	.word	0x0801bb0d
 8004dc4:	0801bb26 	.word	0x0801bb26
 8004dc8:	0801bbd0 	.word	0x0801bbd0
 8004dcc:	2000049c 	.word	0x2000049c
 8004dd0:	200005d2 	.word	0x200005d2
 8004dd4:	20000708 	.word	0x20000708
					LCD_Rect(161, 189, 157, 129, 1, BLUE);
 8004dd8:	20a1      	movs	r0, #161	; 0xa1
 8004dda:	f7fb ff52 	bl	8000c82 <LCD_Rect.constprop.0>
					valMap = map(((int16_t)(humidity * 10)), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 8004dde:	e955 0104 	ldrd	r0, r1, [r5, #-16]
 8004de2:	4652      	mov	r2, sl
 8004de4:	465b      	mov	r3, fp
 8004de6:	f7fd fe55 	bl	8002a94 <__aeabi_dmul>
 8004dea:	f7fe f903 	bl	8002ff4 <__aeabi_d2iz>
					LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 8004dee:	2300      	movs	r3, #0
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	f240 133d 	movw	r3, #317	; 0x13d
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004df6:	b285      	uxth	r5, r0
 8004df8:	3d64      	subs	r5, #100	; 0x64
					LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	21bf      	movs	r1, #191	; 0xbf
 8004dfe:	4618      	mov	r0, r3
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004e00:	01ed      	lsls	r5, r5, #7
					LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 8004e02:	f7fb ff03 	bl	8000c0c <LCD_Line.constprop.0>
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8004e06:	f5b5 7f20 	cmp.w	r5, #640	; 0x280
 8004e0a:	db19      	blt.n	8004e40 <main+0x16c4>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004e0c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004e10:	fb95 f5f1 	sdiv	r5, r5, r1
 8004e14:	b22d      	sxth	r5, r5
 8004e16:	2d7f      	cmp	r5, #127	; 0x7f
 8004e18:	bfa8      	it	ge
 8004e1a:	257f      	movge	r5, #127	; 0x7f
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8004e1c:	f1c5 037f 	rsb	r3, r5, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 8004e28:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	f240 133d 	movw	r3, #317	; 0x13d
 8004e32:	f5c5 719f 	rsb	r1, r5, #318	; 0x13e
 8004e36:	461a      	mov	r2, r3
 8004e38:	4618      	mov	r0, r3
 8004e3a:	b289      	uxth	r1, r1
 8004e3c:	f7fb fee6 	bl	8000c0c <LCD_Line.constprop.0>
					LCD_Rect(320, 189, 157, 129, 1, BLUE);
 8004e40:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8004e44:	f7fb ff1d 	bl	8000c82 <LCD_Rect.constprop.0>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004e48:	f46f 726a 	mvn.w	r2, #936	; 0x3a8
 8004e4c:	f8b4 5658 	ldrh.w	r5, [r4, #1624]	; 0x658
					LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8004e50:	2300      	movs	r3, #0
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004e52:	4415      	add	r5, r2
					LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8004e54:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	21bf      	movs	r1, #191	; 0xbf
 8004e5c:	f240 133d 	movw	r3, #317	; 0x13d
 8004e60:	4610      	mov	r0, r2
					valMap = map(((int16_t)(pressure)), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8004e62:	b22d      	sxth	r5, r5
					LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8004e64:	f7fb fed2 	bl	8000c0c <LCD_Line.constprop.0>
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8004e68:	2d00      	cmp	r5, #0
 8004e6a:	dd15      	ble.n	8004e98 <main+0x171c>
 8004e6c:	2d7f      	cmp	r5, #127	; 0x7f
 8004e6e:	bfa8      	it	ge
 8004e70:	257f      	movge	r5, #127	; 0x7f
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8004e72:	f1c5 037f 	rsb	r3, r5, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 8004e7e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8004e82:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8004e86:	f5c5 759f 	rsb	r5, r5, #318	; 0x13e
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	f240 133d 	movw	r3, #317	; 0x13d
 8004e92:	b2a9      	uxth	r1, r5
 8004e94:	f7fb feba 	bl	8000c0c <LCD_Line.constprop.0>
					if (!viewGraphs) {
 8004e98:	f894 7672 	ldrb.w	r7, [r4, #1650]	; 0x672
 8004e9c:	2f00      	cmp	r7, #0
 8004e9e:	f040 80a0 	bne.w	8004fe2 <main+0x1866>
 8004ea2:	f04f 089d 	mov.w	r8, #157	; 0x9d
 8004ea6:	4e67      	ldr	r6, [pc, #412]	; (8005044 <main+0x18c8>)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004ea8:	f836 5b02 	ldrh.w	r5, [r6], #2
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8004eac:	f240 133d 	movw	r3, #317	; 0x13d
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004eb0:	3de2      	subs	r5, #226	; 0xe2
 8004eb2:	01ed      	lsls	r5, r5, #7
 8004eb4:	bf48      	it	mi
 8004eb6:	353f      	addmi	r5, #63	; 0x3f
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8004eb8:	4642      	mov	r2, r8
 8004eba:	21bf      	movs	r1, #191	; 0xbf
 8004ebc:	4640      	mov	r0, r8
							valMap = map(((int16_t)hT[i]), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8004ebe:	f345 158f 	sbfx	r5, r5, #6, #16
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8004ec2:	9700      	str	r7, [sp, #0]
 8004ec4:	f7fb fea2 	bl	8000c0c <LCD_Line.constprop.0>
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8004ec8:	2d00      	cmp	r5, #0
 8004eca:	dd15      	ble.n	8004ef8 <main+0x177c>
 8004ecc:	2d7f      	cmp	r5, #127	; 0x7f
 8004ece:	bfa8      	it	ge
 8004ed0:	257f      	movge	r5, #127	; 0x7f
 8004ed2:	b22d      	sxth	r5, r5
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8004ed4:	f1c5 037f 	rsb	r3, r5, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 8004ee0:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8004ee4:	f5c5 759f 	rsb	r5, r5, #318	; 0x13e
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	4642      	mov	r2, r8
 8004eec:	f240 133d 	movw	r3, #317	; 0x13d
 8004ef0:	4640      	mov	r0, r8
 8004ef2:	b2a9      	uxth	r1, r5
 8004ef4:	f7fb fe8a 	bl	8000c0c <LCD_Line.constprop.0>
						for (uint16_t i = 0; i < 155 ; i++) {
 8004ef8:	f108 38ff 	add.w	r8, r8, #4294967295
 8004efc:	fa1f f888 	uxth.w	r8, r8
 8004f00:	f1b8 0f02 	cmp.w	r8, #2
 8004f04:	d1d0      	bne.n	8004ea8 <main+0x172c>
 8004f06:	f44f 789e 	mov.w	r8, #316	; 0x13c
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 8004f0a:	2700      	movs	r7, #0
 8004f0c:	4e4e      	ldr	r6, [pc, #312]	; (8005048 <main+0x18cc>)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004f0e:	f836 5b02 	ldrh.w	r5, [r6], #2
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 8004f12:	f240 133d 	movw	r3, #317	; 0x13d
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004f16:	3d64      	subs	r5, #100	; 0x64
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 8004f18:	4642      	mov	r2, r8
 8004f1a:	21bf      	movs	r1, #191	; 0xbf
 8004f1c:	4640      	mov	r0, r8
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004f1e:	01ed      	lsls	r5, r5, #7
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 8004f20:	9700      	str	r7, [sp, #0]
 8004f22:	f7fb fe73 	bl	8000c0c <LCD_Line.constprop.0>
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8004f26:	f5b5 7f20 	cmp.w	r5, #640	; 0x280
 8004f2a:	db19      	blt.n	8004f60 <main+0x17e4>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004f2c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004f30:	fb95 f5f1 	sdiv	r5, r5, r1
 8004f34:	b22d      	sxth	r5, r5
 8004f36:	2d7f      	cmp	r5, #127	; 0x7f
 8004f38:	bfa8      	it	ge
 8004f3a:	257f      	movge	r5, #127	; 0x7f
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8004f3c:	f1c5 037f 	rsb	r3, r5, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 8004f48:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8004f4c:	f5c5 719f 	rsb	r1, r5, #318	; 0x13e
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	4642      	mov	r2, r8
 8004f54:	f240 133d 	movw	r3, #317	; 0x13d
 8004f58:	4640      	mov	r0, r8
 8004f5a:	b289      	uxth	r1, r1
 8004f5c:	f7fb fe56 	bl	8000c0c <LCD_Line.constprop.0>
						for (uint16_t i = 0; i < 155 ; i++) {
 8004f60:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f64:	fa1f f888 	uxth.w	r8, r8
 8004f68:	f1b8 0fa1 	cmp.w	r8, #161	; 0xa1
 8004f6c:	d1cf      	bne.n	8004f0e <main+0x1792>
 8004f6e:	f240 18db 	movw	r8, #475	; 0x1db
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 8004f72:	2700      	movs	r7, #0
 8004f74:	4e35      	ldr	r6, [pc, #212]	; (800504c <main+0x18d0>)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004f76:	f46f 736a 	mvn.w	r3, #936	; 0x3a8
 8004f7a:	f836 5b02 	ldrh.w	r5, [r6], #2
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 8004f7e:	4642      	mov	r2, r8
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004f80:	441d      	add	r5, r3
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 8004f82:	21bf      	movs	r1, #191	; 0xbf
 8004f84:	f240 133d 	movw	r3, #317	; 0x13d
 8004f88:	4640      	mov	r0, r8
							valMap = map(((int16_t)hP[i]), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8004f8a:	b22d      	sxth	r5, r5
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 8004f8c:	9700      	str	r7, [sp, #0]
 8004f8e:	f7fb fe3d 	bl	8000c0c <LCD_Line.constprop.0>
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8004f92:	2d00      	cmp	r5, #0
 8004f94:	dd14      	ble.n	8004fc0 <main+0x1844>
 8004f96:	2d7f      	cmp	r5, #127	; 0x7f
 8004f98:	bfa8      	it	ge
 8004f9a:	257f      	movge	r5, #127	; 0x7f
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8004f9c:	f1c5 037f 	rsb	r3, r5, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 8004fa8:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8004fac:	f5c5 759f 	rsb	r5, r5, #318	; 0x13e
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	4642      	mov	r2, r8
 8004fb4:	f240 133d 	movw	r3, #317	; 0x13d
 8004fb8:	4640      	mov	r0, r8
 8004fba:	b2a9      	uxth	r1, r5
 8004fbc:	f7fb fe26 	bl	8000c0c <LCD_Line.constprop.0>
						for (uint16_t i = 0; i < 155 ; i++) {
 8004fc0:	f108 38ff 	add.w	r8, r8, #4294967295
 8004fc4:	fa1f f888 	uxth.w	r8, r8
 8004fc8:	f5b8 7fa0 	cmp.w	r8, #320	; 0x140
 8004fcc:	d1d3      	bne.n	8004f76 <main+0x17fa>
						for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	4a1f      	ldr	r2, [pc, #124]	; (8005050 <main+0x18d4>)
 8004fd2:	6353      	str	r3, [r2, #52]	; 0x34
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8004fda:	d1fa      	bne.n	8004fd2 <main+0x1856>
						viewGraphs = 1;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f884 3672 	strb.w	r3, [r4, #1650]	; 0x672
			if (rx_index != 0) {
 8004fe2:	4c1c      	ldr	r4, [pc, #112]	; (8005054 <main+0x18d8>)
 8004fe4:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d13d      	bne.n	8005068 <main+0x18ec>
			remoteSensorLastUpdate++;
 8004fec:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8005058 <main+0x18dc>
 8004ff0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	b29b      	uxth	r3, r3
			if (remoteSensorLastUpdate > WAIT_REMOTE_SENSOR_SEC) {
 8004ff8:	2b0a      	cmp	r3, #10
			remoteSensorLastUpdate++;
 8004ffa:	f8a8 300c 	strh.w	r3, [r8, #12]
			if (remoteSensorLastUpdate > WAIT_REMOTE_SENSOR_SEC) {
 8004ffe:	f200 8351 	bhi.w	80056a4 <main+0x1f28>
			rtcSecLast = rtcSec;
 8005002:	f894 3636 	ldrb.w	r3, [r4, #1590]	; 0x636
 8005006:	f888 3008 	strb.w	r3, [r8, #8]
	{
 800500a:	f7ff b9de 	b.w	80043ca <main+0xc4e>
						else if (temperature <= -10) {
 800500e:	2200      	movs	r2, #0
 8005010:	4630      	mov	r0, r6
 8005012:	4639      	mov	r1, r7
 8005014:	4b11      	ldr	r3, [pc, #68]	; (800505c <main+0x18e0>)
 8005016:	f7fd ffb9 	bl	8002f8c <__aeabi_dcmple>
 800501a:	2800      	cmp	r0, #0
 800501c:	f43f ad5a 	beq.w	8004ad4 <main+0x1358>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 8005020:	4639      	mov	r1, r7
 8005022:	4630      	mov	r0, r6
 8005024:	f7fd ffe6 	bl	8002ff4 <__aeabi_d2iz>
 8005028:	490d      	ldr	r1, [pc, #52]	; (8005060 <main+0x18e4>)
 800502a:	b242      	sxtb	r2, r0
 800502c:	a824      	add	r0, sp, #144	; 0x90
 800502e:	f001 fafb 	bl	8006628 <siprintf>
 8005032:	e502      	b.n	8004a3a <main+0x12be>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8005034:	9000      	str	r0, [sp, #0]
 8005036:	21bb      	movs	r1, #187	; 0xbb
 8005038:	20ba      	movs	r0, #186	; 0xba
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <main+0x18e8>)
 800503c:	aa24      	add	r2, sp, #144	; 0x90
 800503e:	e56f      	b.n	8004b20 <main+0x13a4>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8005040:	20ba      	movs	r0, #186	; 0xba
 8005042:	e587      	b.n	8004b54 <main+0x13d8>
 8005044:	2000049c 	.word	0x2000049c
 8005048:	200005d2 	.word	0x200005d2
 800504c:	20000708 	.word	0x20000708
 8005050:	40012c00 	.word	0x40012c00
 8005054:	20000208 	.word	0x20000208
 8005058:	20000000 	.word	0x20000000
 800505c:	c0240000 	.word	0xc0240000
 8005060:	0801bb19 	.word	0x0801bb19
 8005064:	0800a310 	.word	0x0800a310
				if (memcmp(rx_buffer, "TS", 2) == 0) {
 8005068:	2202      	movs	r2, #2
 800506a:	49d0      	ldr	r1, [pc, #832]	; (80053ac <main+0x1c30>)
 800506c:	f204 102d 	addw	r0, r4, #301	; 0x12d
 8005070:	f005 f8a4 	bl	800a1bc <memcmp>
 8005074:	4606      	mov	r6, r0
 8005076:	2800      	cmp	r0, #0
 8005078:	f040 80c3 	bne.w	8005202 <main+0x1a86>
					val[0] = rx_buffer[2];
 800507c:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
					DS3231_setHrs(atoi(val));
 8005080:	a824      	add	r0, sp, #144	; 0x90
					val[0] = rx_buffer[2];
 8005082:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
					val[1] = rx_buffer[3];
 8005086:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
    return ((val / 10 * 16) + (val % 10));
 800508a:	250a      	movs	r5, #10
 800508c:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
					DS3231_setHrs(atoi(val));
 8005090:	f000 fc21 	bl	80058d6 <atoi>
 8005094:	b2c7      	uxtb	r7, r0
    rtcBufferSet[2] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
}

void DS3231_setHrs(uint8_t value) {
    DS3231_Update();
 8005096:	f7fc fc2d 	bl	80018f4 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 800509a:	fbb7 f0f5 	udiv	r0, r7, r5
 800509e:	fb05 7710 	mls	r7, r5, r0, r7
    rtcBufferSet[3] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80050a2:	2211      	movs	r2, #17
 80050a4:	f204 111b 	addw	r1, r4, #283	; 0x11b
    return ((val / 10 * 16) + (val % 10));
 80050a8:	eb07 1700 	add.w	r7, r7, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80050ac:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[3] = decToBcd(value);
 80050ae:	f884 711e 	strb.w	r7, [r4, #286]	; 0x11e
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80050b2:	f7fc fab4 	bl	800161e <HAL_I2C_Master_Transmit.constprop.0.isra.0>
					val[0] = rx_buffer[4];
 80050b6:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
					DS3231_setMin(atoi(val));
 80050ba:	a824      	add	r0, sp, #144	; 0x90
					val[0] = rx_buffer[4];
 80050bc:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
					val[1] = rx_buffer[5];
 80050c0:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 80050c4:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
					DS3231_setMin(atoi(val));
 80050c8:	f000 fc05 	bl	80058d6 <atoi>
 80050cc:	b2c7      	uxtb	r7, r0
    DS3231_Update();
 80050ce:	f7fc fc11 	bl	80018f4 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80050d2:	fbb7 f0f5 	udiv	r0, r7, r5
 80050d6:	fb05 7710 	mls	r7, r5, r0, r7
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80050da:	2211      	movs	r2, #17
 80050dc:	f204 111b 	addw	r1, r4, #283	; 0x11b
    return ((val / 10 * 16) + (val % 10));
 80050e0:	eb07 1700 	add.w	r7, r7, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80050e4:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[2] = decToBcd(value);
 80050e6:	f884 711d 	strb.w	r7, [r4, #285]	; 0x11d
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80050ea:	f7fc fa98 	bl	800161e <HAL_I2C_Master_Transmit.constprop.0.isra.0>
					DS3231_setSec(atoi(val));
 80050ee:	a824      	add	r0, sp, #144	; 0x90
					val[0] = 0;
 80050f0:	f88d 6090 	strb.w	r6, [sp, #144]	; 0x90
					val[1] = 0;
 80050f4:	f88d 6091 	strb.w	r6, [sp, #145]	; 0x91
					DS3231_setSec(atoi(val));
 80050f8:	f000 fbed 	bl	80058d6 <atoi>
 80050fc:	b2c7      	uxtb	r7, r0
    DS3231_Update();
 80050fe:	f7fc fbf9 	bl	80018f4 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8005102:	fbb7 f0f5 	udiv	r0, r7, r5
 8005106:	fb05 7710 	mls	r7, r5, r0, r7
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800510a:	2211      	movs	r2, #17
 800510c:	f204 111b 	addw	r1, r4, #283	; 0x11b
    return ((val / 10 * 16) + (val % 10));
 8005110:	eb07 1700 	add.w	r7, r7, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8005114:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[1] = decToBcd(value);
 8005116:	f884 711c 	strb.w	r7, [r4, #284]	; 0x11c
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800511a:	f7fc fa80 	bl	800161e <HAL_I2C_Master_Transmit.constprop.0.isra.0>
					val[0] = rx_buffer[6];
 800511e:	f894 3133 	ldrb.w	r3, [r4, #307]	; 0x133
					DS3231_setDate(atoi(val));
 8005122:	a824      	add	r0, sp, #144	; 0x90
					val[0] = rx_buffer[6];
 8005124:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
					val[1] = rx_buffer[7];
 8005128:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 800512c:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
					DS3231_setDate(atoi(val));
 8005130:	f000 fbd1 	bl	80058d6 <atoi>
 8005134:	b2c7      	uxtb	r7, r0
    rtcBufferSet[4] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
}

void DS3231_setDate(uint8_t value) {
    DS3231_Update();
 8005136:	f7fc fbdd 	bl	80018f4 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 800513a:	fbb7 f0f5 	udiv	r0, r7, r5
 800513e:	fb05 7710 	mls	r7, r5, r0, r7
    rtcBufferSet[5] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8005142:	2211      	movs	r2, #17
 8005144:	f204 111b 	addw	r1, r4, #283	; 0x11b
    return ((val / 10 * 16) + (val % 10));
 8005148:	eb07 1700 	add.w	r7, r7, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800514c:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[5] = decToBcd(value);
 800514e:	f884 7120 	strb.w	r7, [r4, #288]	; 0x120
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8005152:	f7fc fa64 	bl	800161e <HAL_I2C_Master_Transmit.constprop.0.isra.0>
					val[0] = rx_buffer[8];
 8005156:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
					DS3231_setMonth(atoi(val));
 800515a:	a824      	add	r0, sp, #144	; 0x90
					val[0] = rx_buffer[8];
 800515c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
					val[1] = rx_buffer[9];
 8005160:	f894 3136 	ldrb.w	r3, [r4, #310]	; 0x136
 8005164:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
					DS3231_setMonth(atoi(val));
 8005168:	f000 fbb5 	bl	80058d6 <atoi>
 800516c:	b2c7      	uxtb	r7, r0
}

void DS3231_setMonth(uint8_t value) {
    DS3231_Update();
 800516e:	f7fc fbc1 	bl	80018f4 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8005172:	fbb7 f0f5 	udiv	r0, r7, r5
 8005176:	fb05 7710 	mls	r7, r5, r0, r7
    rtcBufferSet[6] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800517a:	2211      	movs	r2, #17
 800517c:	f204 111b 	addw	r1, r4, #283	; 0x11b
    return ((val / 10 * 16) + (val % 10));
 8005180:	eb07 1700 	add.w	r7, r7, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8005184:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[6] = decToBcd(value);
 8005186:	f884 7121 	strb.w	r7, [r4, #289]	; 0x121
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800518a:	f7fc fa48 	bl	800161e <HAL_I2C_Master_Transmit.constprop.0.isra.0>
					val[0] = rx_buffer[10];
 800518e:	f894 3137 	ldrb.w	r3, [r4, #311]	; 0x137
					DS3231_setYear(atoi(val));
 8005192:	a824      	add	r0, sp, #144	; 0x90
					val[0] = rx_buffer[10];
 8005194:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
					val[1] = rx_buffer[11];
 8005198:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 800519c:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
					DS3231_setYear(atoi(val));
 80051a0:	f000 fb99 	bl	80058d6 <atoi>
 80051a4:	b2c7      	uxtb	r7, r0
}

void DS3231_setYear(uint8_t value) {
    DS3231_Update();
 80051a6:	f7fc fba5 	bl	80018f4 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80051aa:	fbb7 f0f5 	udiv	r0, r7, r5
 80051ae:	fb05 7710 	mls	r7, r5, r0, r7
    rtcBufferSet[7] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80051b2:	2211      	movs	r2, #17
 80051b4:	f204 111b 	addw	r1, r4, #283	; 0x11b
    return ((val / 10 * 16) + (val % 10));
 80051b8:	eb07 1700 	add.w	r7, r7, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80051bc:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[7] = decToBcd(value);
 80051be:	f884 7122 	strb.w	r7, [r4, #290]	; 0x122
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80051c2:	f7fc fa2c 	bl	800161e <HAL_I2C_Master_Transmit.constprop.0.isra.0>
					val[1] = rx_buffer[12];
 80051c6:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
					DS3231_setDay(atoi(val));
 80051ca:	a824      	add	r0, sp, #144	; 0x90
					val[1] = rx_buffer[12];
 80051cc:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
					DS3231_setDay(atoi(val));
 80051d0:	f000 fb81 	bl	80058d6 <atoi>
 80051d4:	b2c7      	uxtb	r7, r0
    DS3231_Update();
 80051d6:	f7fc fb8d 	bl	80018f4 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80051da:	fbb7 f0f5 	udiv	r0, r7, r5
 80051de:	fb05 7710 	mls	r7, r5, r0, r7
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80051e2:	2211      	movs	r2, #17
    return ((val / 10 * 16) + (val % 10));
 80051e4:	eb07 1700 	add.w	r7, r7, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80051e8:	f204 111b 	addw	r1, r4, #283	; 0x11b
 80051ec:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[4] = decToBcd(value);
 80051ee:	f884 711f 	strb.w	r7, [r4, #287]	; 0x11f
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80051f2:	f7fc fa14 	bl	800161e <HAL_I2C_Master_Transmit.constprop.0.isra.0>
					for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 80051f6:	4b6e      	ldr	r3, [pc, #440]	; (80053b0 <main+0x1c34>)
 80051f8:	635e      	str	r6, [r3, #52]	; 0x34
 80051fa:	3601      	adds	r6, #1
 80051fc:	f1b6 1f01 	cmp.w	r6, #65537	; 0x10001
 8005200:	d1fa      	bne.n	80051f8 <main+0x1a7c>
				if (memcmp(rx_buffer, "CE", 2) == 0) {
 8005202:	2202      	movs	r2, #2
 8005204:	496b      	ldr	r1, [pc, #428]	; (80053b4 <main+0x1c38>)
 8005206:	486c      	ldr	r0, [pc, #432]	; (80053b8 <main+0x1c3c>)
 8005208:	f004 ffd8 	bl	800a1bc <memcmp>
 800520c:	4605      	mov	r5, r0
 800520e:	2800      	cmp	r0, #0
 8005210:	d144      	bne.n	800529c <main+0x1b20>
					for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 8005212:	b2a8      	uxth	r0, r5
 8005214:	2100      	movs	r1, #0
 8005216:	3501      	adds	r5, #1
 8005218:	f7fb ffc8 	bl	80011ac <AT24XX_Update>
 800521c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8005220:	d1f7      	bne.n	8005212 <main+0x1a96>
					uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 8005222:	aa24      	add	r2, sp, #144	; 0x90
 8005224:	4615      	mov	r5, r2
 8005226:	4b65      	ldr	r3, [pc, #404]	; (80053bc <main+0x1c40>)
 8005228:	f103 0710 	add.w	r7, r3, #16
 800522c:	4616      	mov	r6, r2
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	6859      	ldr	r1, [r3, #4]
 8005232:	3308      	adds	r3, #8
 8005234:	c603      	stmia	r6!, {r0, r1}
 8005236:	42bb      	cmp	r3, r7
 8005238:	4632      	mov	r2, r6
 800523a:	d1f7      	bne.n	800522c <main+0x1ab0>
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	6030      	str	r0, [r6, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8005240:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8005244:	2b20      	cmp	r3, #32
 8005246:	d129      	bne.n	800529c <main+0x1b20>
    __HAL_LOCK(huart);
 8005248:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800524c:	2b01      	cmp	r3, #1
 800524e:	d025      	beq.n	800529c <main+0x1b20>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005250:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005252:	2600      	movs	r6, #0
 8005254:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005258:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    huart->TxXferSize = Size;
 800525c:	2314      	movs	r3, #20
 800525e:	6827      	ldr	r7, [r4, #0]
 8005260:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    huart->TxXferCount = Size;
 8005264:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005268:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800526a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526e:	d104      	bne.n	800527a <main+0x1afe>
 8005270:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      pdata16bits = (uint16_t *) pData;
 8005272:	42b3      	cmp	r3, r6
 8005274:	bf04      	itt	eq
 8005276:	462e      	moveq	r6, r5
 8005278:	2500      	moveq	r5, #0
    __HAL_UNLOCK(huart);
 800527a:	2300      	movs	r3, #0
 800527c:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
    while (huart->TxXferCount > 0U)
 8005280:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005284:	4639      	mov	r1, r7
    while (huart->TxXferCount > 0U)
 8005286:	b29b      	uxth	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	f040 8118 	bne.w	80054be <main+0x1d42>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800528e:	2040      	movs	r0, #64	; 0x40
 8005290:	f7fb fb9c 	bl	80009cc <UART_WaitOnFlagUntilTimeout.constprop.0>
 8005294:	b910      	cbnz	r0, 800529c <main+0x1b20>
    huart->gState = HAL_UART_STATE_READY;
 8005296:	2320      	movs	r3, #32
 8005298:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
				if (memcmp(rx_buffer, "RS", 2) == 0) {
 800529c:	2202      	movs	r2, #2
 800529e:	4948      	ldr	r1, [pc, #288]	; (80053c0 <main+0x1c44>)
 80052a0:	4845      	ldr	r0, [pc, #276]	; (80053b8 <main+0x1c3c>)
 80052a2:	f004 ff8b 	bl	800a1bc <memcmp>
 80052a6:	2800      	cmp	r0, #0
 80052a8:	f040 8101 	bne.w	80054ae <main+0x1d32>
					for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 80052ac:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
					temperatureRemote = atoi(valT);
 80052b0:	a813      	add	r0, sp, #76	; 0x4c
					for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 80052b2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 80052b6:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
					temperatureRemote = temperatureRemote / 10;
 80052ba:	4d42      	ldr	r5, [pc, #264]	; (80053c4 <main+0x1c48>)
					for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 80052bc:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 80052c0:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
 80052c4:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
 80052c8:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 80052cc:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
					temperatureRemote = atoi(valT);
 80052d0:	f000 fb01 	bl	80058d6 <atoi>
 80052d4:	f7fd fb74 	bl	80029c0 <__aeabi_i2d>
					temperatureRemote = temperatureRemote / 10;
 80052d8:	4652      	mov	r2, sl
 80052da:	465b      	mov	r3, fp
 80052dc:	f7fd fd04 	bl	8002ce8 <__aeabi_ddiv>
					for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 80052e0:	f894 3133 	ldrb.w	r3, [r4, #307]	; 0x133
					temperatureRemote = temperatureRemote / 10;
 80052e4:	e945 0102 	strd	r0, r1, [r5, #-8]
					for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 80052e8:	f88d 3014 	strb.w	r3, [sp, #20]
 80052ec:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
					humidityRemote = atoi(valH);
 80052f0:	a805      	add	r0, sp, #20
					for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 80052f2:	f88d 3015 	strb.w	r3, [sp, #21]
 80052f6:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 80052fa:	f88d 3016 	strb.w	r3, [sp, #22]
					humidityRemote = atoi(valH);
 80052fe:	f000 faea 	bl	80058d6 <atoi>
 8005302:	f7fd fb5d 	bl	80029c0 <__aeabi_i2d>
					humidityRemote = humidityRemote / 10;
 8005306:	4652      	mov	r2, sl
 8005308:	465b      	mov	r3, fp
 800530a:	f7fd fced 	bl	8002ce8 <__aeabi_ddiv>
					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 800530e:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8005312:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
					humidityRemote = humidityRemote / 10;
 8005316:	4606      	mov	r6, r0
 8005318:	460f      	mov	r7, r1
					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 800531a:	4640      	mov	r0, r8
 800531c:	4649      	mov	r1, r9
					humidityRemote = humidityRemote / 10;
 800531e:	e9c5 6700 	strd	r6, r7, [r5]
					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 8005322:	f7fd fe1f 	bl	8002f64 <__aeabi_dcmpeq>
 8005326:	b968      	cbnz	r0, 8005344 <main+0x1bc8>
 8005328:	2200      	movs	r2, #0
 800532a:	4640      	mov	r0, r8
 800532c:	4649      	mov	r1, r9
 800532e:	4b26      	ldr	r3, [pc, #152]	; (80053c8 <main+0x1c4c>)
 8005330:	f7fd fe22 	bl	8002f78 <__aeabi_dcmplt>
 8005334:	b130      	cbz	r0, 8005344 <main+0x1bc8>
 8005336:	2200      	movs	r2, #0
 8005338:	4640      	mov	r0, r8
 800533a:	4649      	mov	r1, r9
 800533c:	4b23      	ldr	r3, [pc, #140]	; (80053cc <main+0x1c50>)
 800533e:	f7fd fe39 	bl	8002fb4 <__aeabi_dcmpgt>
 8005342:	b988      	cbnz	r0, 8005368 <main+0x1bec>
 8005344:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8005348:	4630      	mov	r0, r6
 800534a:	4639      	mov	r1, r7
 800534c:	f7fd fe0a 	bl	8002f64 <__aeabi_dcmpeq>
 8005350:	2800      	cmp	r0, #0
 8005352:	f040 80ac 	bne.w	80054ae <main+0x1d32>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 8005356:	2200      	movs	r2, #0
 8005358:	2300      	movs	r3, #0
 800535a:	4630      	mov	r0, r6
 800535c:	4639      	mov	r1, r7
 800535e:	f7fd fe29 	bl	8002fb4 <__aeabi_dcmpgt>
 8005362:	2800      	cmp	r0, #0
 8005364:	f000 80a3 	beq.w	80054ae <main+0x1d32>
						remoteSensorLastUpdate = 0;
 8005368:	f04f 0900 	mov.w	r9, #0
 800536c:	4b18      	ldr	r3, [pc, #96]	; (80053d0 <main+0x1c54>)
						sprintf(clockPrint, "%02d", rtcSecLast);
 800536e:	4919      	ldr	r1, [pc, #100]	; (80053d4 <main+0x1c58>)
 8005370:	7a1a      	ldrb	r2, [r3, #8]
 8005372:	a819      	add	r0, sp, #100	; 0x64
						remoteSensorLastUpdate = 0;
 8005374:	f8a3 900c 	strh.w	r9, [r3, #12]
						sprintf(clockPrint, "%02d", rtcSecLast);
 8005378:	f001 f956 	bl	8006628 <siprintf>
						LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 800537c:	2128      	movs	r1, #40	; 0x28
 800537e:	f240 1077 	movw	r0, #375	; 0x177
 8005382:	4b15      	ldr	r3, [pc, #84]	; (80053d8 <main+0x1c5c>)
 8005384:	aa19      	add	r2, sp, #100	; 0x64
 8005386:	f8cd 9000 	str.w	r9, [sp]
 800538a:	f7fc fbe9 	bl	8001b60 <LCD_Font.constprop.0>
						if (temperatureRemoteLast <= -10) {
 800538e:	4b13      	ldr	r3, [pc, #76]	; (80053dc <main+0x1c60>)
 8005390:	2200      	movs	r2, #0
 8005392:	e953 6702 	ldrd	r6, r7, [r3, #-8]
 8005396:	4b12      	ldr	r3, [pc, #72]	; (80053e0 <main+0x1c64>)
 8005398:	4630      	mov	r0, r6
 800539a:	4639      	mov	r1, r7
 800539c:	f7fd fdf6 	bl	8002f8c <__aeabi_dcmple>
 80053a0:	4680      	mov	r8, r0
 80053a2:	2800      	cmp	r0, #0
 80053a4:	f000 80a2 	beq.w	80054ec <main+0x1d70>
 80053a8:	e01c      	b.n	80053e4 <main+0x1c68>
 80053aa:	bf00      	nop
 80053ac:	0801bb2d 	.word	0x0801bb2d
 80053b0:	40012c00 	.word	0x40012c00
 80053b4:	0801bb30 	.word	0x0801bb30
 80053b8:	20000335 	.word	0x20000335
 80053bc:	0801bb5b 	.word	0x0801bb5b
 80053c0:	0801bb33 	.word	0x0801bb33
 80053c4:	20000888 	.word	0x20000888
 80053c8:	40554000 	.word	0x40554000
 80053cc:	c0440000 	.word	0xc0440000
 80053d0:	20000000 	.word	0x20000000
 80053d4:	0801bb0d 	.word	0x0801bb0d
 80053d8:	0800a310 	.word	0x0800a310
 80053dc:	20000898 	.word	0x20000898
 80053e0:	c0240000 	.word	0xc0240000
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80053e4:	4632      	mov	r2, r6
 80053e6:	463b      	mov	r3, r7
 80053e8:	49a8      	ldr	r1, [pc, #672]	; (800568c <main+0x1f10>)
 80053ea:	a824      	add	r0, sp, #144	; 0x90
 80053ec:	f001 f91c 	bl	8006628 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80053f0:	215a      	movs	r1, #90	; 0x5a
 80053f2:	f240 1061 	movw	r0, #353	; 0x161
 80053f6:	4ba6      	ldr	r3, [pc, #664]	; (8005690 <main+0x1f14>)
 80053f8:	f8cd 9000 	str.w	r9, [sp]
 80053fc:	aa24      	add	r2, sp, #144	; 0x90
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80053fe:	f7fc fbaf 	bl	8001b60 <LCD_Font.constprop.0>
						temperatureRemoteLast = temperatureRemote;
 8005402:	e955 6702 	ldrd	r6, r7, [r5, #-8]
 8005406:	4ba3      	ldr	r3, [pc, #652]	; (8005694 <main+0x1f18>)
						if (temperatureRemoteLast <= -10) {
 8005408:	2200      	movs	r2, #0
						temperatureRemoteLast = temperatureRemote;
 800540a:	e943 6702 	strd	r6, r7, [r3, #-8]
						if (temperatureRemoteLast <= -10) {
 800540e:	4630      	mov	r0, r6
 8005410:	4639      	mov	r1, r7
 8005412:	4ba1      	ldr	r3, [pc, #644]	; (8005698 <main+0x1f1c>)
 8005414:	f7fd fdba 	bl	8002f8c <__aeabi_dcmple>
 8005418:	2800      	cmp	r0, #0
 800541a:	f000 80b6 	beq.w	800558a <main+0x1e0e>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 800541e:	4632      	mov	r2, r6
 8005420:	463b      	mov	r3, r7
 8005422:	499a      	ldr	r1, [pc, #616]	; (800568c <main+0x1f10>)
 8005424:	a824      	add	r0, sp, #144	; 0x90
 8005426:	f001 f8ff 	bl	8006628 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 800542a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800542e:	215a      	movs	r1, #90	; 0x5a
 8005430:	f240 1061 	movw	r0, #353	; 0x161
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	4b96      	ldr	r3, [pc, #600]	; (8005690 <main+0x1f14>)
 8005438:	aa24      	add	r2, sp, #144	; 0x90
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 800543a:	f7fc fb91 	bl	8001b60 <LCD_Font.constprop.0>
						if (humidityRemoteLast >= 10) {
 800543e:	e9d5 6704 	ldrd	r6, r7, [r5, #16]
 8005442:	4652      	mov	r2, sl
 8005444:	465b      	mov	r3, fp
 8005446:	4630      	mov	r0, r6
 8005448:	4639      	mov	r1, r7
 800544a:	f7fd fda9 	bl	8002fa0 <__aeabi_dcmpge>
 800544e:	4680      	mov	r8, r0
 8005450:	2800      	cmp	r0, #0
 8005452:	f000 80ec 	beq.w	800562e <main+0x1eb2>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8005456:	4632      	mov	r2, r6
 8005458:	463b      	mov	r3, r7
 800545a:	498c      	ldr	r1, [pc, #560]	; (800568c <main+0x1f10>)
 800545c:	a815      	add	r0, sp, #84	; 0x54
 800545e:	f001 f8e3 	bl	8006628 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8005462:	2300      	movs	r3, #0
 8005464:	2128      	movs	r1, #40	; 0x28
 8005466:	f240 1073 	movw	r0, #371	; 0x173
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	4b88      	ldr	r3, [pc, #544]	; (8005690 <main+0x1f14>)
 800546e:	aa15      	add	r2, sp, #84	; 0x54
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8005470:	f7fc fb76 	bl	8001b60 <LCD_Font.constprop.0>
						humidityRemoteLast = humidityRemote;
 8005474:	e9d5 6700 	ldrd	r6, r7, [r5]
						if (humidityRemoteLast >= 10) {
 8005478:	4652      	mov	r2, sl
 800547a:	465b      	mov	r3, fp
 800547c:	4630      	mov	r0, r6
 800547e:	4639      	mov	r1, r7
						humidityRemoteLast = humidityRemote;
 8005480:	e9c5 6704 	strd	r6, r7, [r5, #16]
						if (humidityRemoteLast >= 10) {
 8005484:	f7fd fd8c 	bl	8002fa0 <__aeabi_dcmpge>
 8005488:	2800      	cmp	r0, #0
 800548a:	f000 80e7 	beq.w	800565c <main+0x1ee0>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 800548e:	4632      	mov	r2, r6
 8005490:	463b      	mov	r3, r7
 8005492:	497e      	ldr	r1, [pc, #504]	; (800568c <main+0x1f10>)
 8005494:	a815      	add	r0, sp, #84	; 0x54
 8005496:	f001 f8c7 	bl	8006628 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 800549a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800549e:	2128      	movs	r1, #40	; 0x28
 80054a0:	f240 1073 	movw	r0, #371	; 0x173
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	4b7a      	ldr	r3, [pc, #488]	; (8005690 <main+0x1f14>)
 80054a8:	aa15      	add	r2, sp, #84	; 0x54
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 80054aa:	f7fc fb59 	bl	8001b60 <LCD_Font.constprop.0>
				rx_index = 0;
 80054ae:	2100      	movs	r1, #0
				for (uint8_t i = 0; i < UART_BUFFER_SIZE; i++) rx_buffer[i] = 0;
 80054b0:	2210      	movs	r2, #16
 80054b2:	487a      	ldr	r0, [pc, #488]	; (800569c <main+0x1f20>)
				rx_index = 0;
 80054b4:	f884 112c 	strb.w	r1, [r4, #300]	; 0x12c
				for (uint8_t i = 0; i < UART_BUFFER_SIZE; i++) rx_buffer[i] = 0;
 80054b8:	f000 fa3c 	bl	8005934 <memset>
 80054bc:	e596      	b.n	8004fec <main+0x1870>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054be:	2080      	movs	r0, #128	; 0x80
 80054c0:	f7fb fa84 	bl	80009cc <UART_WaitOnFlagUntilTimeout.constprop.0>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	f47f aee9 	bne.w	800529c <main+0x1b20>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054ca:	6da2      	ldr	r2, [r4, #88]	; 0x58
      if (pdata8bits == NULL)
 80054cc:	b95d      	cbnz	r5, 80054e6 <main+0x1d6a>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054ce:	f836 3b02 	ldrh.w	r3, [r6], #2
 80054d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054d6:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80054d8:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29b      	uxth	r3, r3
 80054e0:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
 80054e4:	e6cc      	b.n	8005280 <main+0x1b04>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80054ea:	e7f4      	b.n	80054d6 <main+0x1d5a>
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80054ec:	2200      	movs	r2, #0
 80054ee:	2300      	movs	r3, #0
 80054f0:	4630      	mov	r0, r6
 80054f2:	4639      	mov	r1, r7
 80054f4:	f7fd fd40 	bl	8002f78 <__aeabi_dcmplt>
 80054f8:	b1a0      	cbz	r0, 8005524 <main+0x1da8>
 80054fa:	2200      	movs	r2, #0
 80054fc:	4630      	mov	r0, r6
 80054fe:	4639      	mov	r1, r7
 8005500:	4b65      	ldr	r3, [pc, #404]	; (8005698 <main+0x1f1c>)
 8005502:	f7fd fd57 	bl	8002fb4 <__aeabi_dcmpgt>
 8005506:	b168      	cbz	r0, 8005524 <main+0x1da8>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8005508:	4632      	mov	r2, r6
 800550a:	463b      	mov	r3, r7
 800550c:	495f      	ldr	r1, [pc, #380]	; (800568c <main+0x1f10>)
 800550e:	a824      	add	r0, sp, #144	; 0x90
 8005510:	f001 f88a 	bl	8006628 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8005514:	215a      	movs	r1, #90	; 0x5a
 8005516:	f240 1081 	movw	r0, #385	; 0x181
 800551a:	4b5d      	ldr	r3, [pc, #372]	; (8005690 <main+0x1f14>)
 800551c:	f8cd 8000 	str.w	r8, [sp]
 8005520:	aa24      	add	r2, sp, #144	; 0x90
 8005522:	e76c      	b.n	80053fe <main+0x1c82>
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8005524:	2200      	movs	r2, #0
 8005526:	2300      	movs	r3, #0
 8005528:	4630      	mov	r0, r6
 800552a:	4639      	mov	r1, r7
 800552c:	f7fd fd42 	bl	8002fb4 <__aeabi_dcmpgt>
 8005530:	b1a0      	cbz	r0, 800555c <main+0x1de0>
 8005532:	4652      	mov	r2, sl
 8005534:	465b      	mov	r3, fp
 8005536:	4630      	mov	r0, r6
 8005538:	4639      	mov	r1, r7
 800553a:	f7fd fd1d 	bl	8002f78 <__aeabi_dcmplt>
 800553e:	b168      	cbz	r0, 800555c <main+0x1de0>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8005540:	4632      	mov	r2, r6
 8005542:	463b      	mov	r3, r7
 8005544:	4956      	ldr	r1, [pc, #344]	; (80056a0 <main+0x1f24>)
 8005546:	a824      	add	r0, sp, #144	; 0x90
 8005548:	f001 f86e 	bl	8006628 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800554c:	2300      	movs	r3, #0
 800554e:	215a      	movs	r1, #90	; 0x5a
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8005556:	4b4e      	ldr	r3, [pc, #312]	; (8005690 <main+0x1f14>)
 8005558:	aa24      	add	r2, sp, #144	; 0x90
 800555a:	e750      	b.n	80053fe <main+0x1c82>
						else if (temperatureRemoteLast >= 10) {
 800555c:	4652      	mov	r2, sl
 800555e:	465b      	mov	r3, fp
 8005560:	4630      	mov	r0, r6
 8005562:	4639      	mov	r1, r7
 8005564:	f7fd fd1c 	bl	8002fa0 <__aeabi_dcmpge>
 8005568:	2800      	cmp	r0, #0
 800556a:	f43f af4a 	beq.w	8005402 <main+0x1c86>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800556e:	4632      	mov	r2, r6
 8005570:	463b      	mov	r3, r7
 8005572:	494b      	ldr	r1, [pc, #300]	; (80056a0 <main+0x1f24>)
 8005574:	a824      	add	r0, sp, #144	; 0x90
 8005576:	f001 f857 	bl	8006628 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800557a:	2300      	movs	r3, #0
 800557c:	215a      	movs	r1, #90	; 0x5a
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8005584:	4b42      	ldr	r3, [pc, #264]	; (8005690 <main+0x1f14>)
 8005586:	aa24      	add	r2, sp, #144	; 0x90
 8005588:	e739      	b.n	80053fe <main+0x1c82>
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 800558a:	2200      	movs	r2, #0
 800558c:	2300      	movs	r3, #0
 800558e:	4630      	mov	r0, r6
 8005590:	4639      	mov	r1, r7
 8005592:	f7fd fcf1 	bl	8002f78 <__aeabi_dcmplt>
 8005596:	b1a8      	cbz	r0, 80055c4 <main+0x1e48>
 8005598:	2200      	movs	r2, #0
 800559a:	4630      	mov	r0, r6
 800559c:	4639      	mov	r1, r7
 800559e:	4b3e      	ldr	r3, [pc, #248]	; (8005698 <main+0x1f1c>)
 80055a0:	f7fd fd08 	bl	8002fb4 <__aeabi_dcmpgt>
 80055a4:	b170      	cbz	r0, 80055c4 <main+0x1e48>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80055a6:	4632      	mov	r2, r6
 80055a8:	463b      	mov	r3, r7
 80055aa:	4938      	ldr	r1, [pc, #224]	; (800568c <main+0x1f10>)
 80055ac:	a824      	add	r0, sp, #144	; 0x90
 80055ae:	f001 f83b 	bl	8006628 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 80055b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055b6:	215a      	movs	r1, #90	; 0x5a
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	f240 1081 	movw	r0, #385	; 0x181
 80055be:	4b34      	ldr	r3, [pc, #208]	; (8005690 <main+0x1f14>)
 80055c0:	aa24      	add	r2, sp, #144	; 0x90
 80055c2:	e73a      	b.n	800543a <main+0x1cbe>
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 80055c4:	2200      	movs	r2, #0
 80055c6:	2300      	movs	r3, #0
 80055c8:	4630      	mov	r0, r6
 80055ca:	4639      	mov	r1, r7
 80055cc:	f7fd fcf2 	bl	8002fb4 <__aeabi_dcmpgt>
 80055d0:	b1a8      	cbz	r0, 80055fe <main+0x1e82>
 80055d2:	4652      	mov	r2, sl
 80055d4:	465b      	mov	r3, fp
 80055d6:	4630      	mov	r0, r6
 80055d8:	4639      	mov	r1, r7
 80055da:	f7fd fccd 	bl	8002f78 <__aeabi_dcmplt>
 80055de:	b170      	cbz	r0, 80055fe <main+0x1e82>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80055e0:	4632      	mov	r2, r6
 80055e2:	463b      	mov	r3, r7
 80055e4:	492e      	ldr	r1, [pc, #184]	; (80056a0 <main+0x1f24>)
 80055e6:	a824      	add	r0, sp, #144	; 0x90
 80055e8:	f001 f81e 	bl	8006628 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 80055ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055f0:	215a      	movs	r1, #90	; 0x5a
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 80055f8:	4b25      	ldr	r3, [pc, #148]	; (8005690 <main+0x1f14>)
 80055fa:	aa24      	add	r2, sp, #144	; 0x90
 80055fc:	e71d      	b.n	800543a <main+0x1cbe>
						else if (temperatureRemoteLast >= 10) {
 80055fe:	4652      	mov	r2, sl
 8005600:	465b      	mov	r3, fp
 8005602:	4630      	mov	r0, r6
 8005604:	4639      	mov	r1, r7
 8005606:	f7fd fccb 	bl	8002fa0 <__aeabi_dcmpge>
 800560a:	2800      	cmp	r0, #0
 800560c:	f43f af17 	beq.w	800543e <main+0x1cc2>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8005610:	4632      	mov	r2, r6
 8005612:	463b      	mov	r3, r7
 8005614:	4922      	ldr	r1, [pc, #136]	; (80056a0 <main+0x1f24>)
 8005616:	a824      	add	r0, sp, #144	; 0x90
 8005618:	f001 f806 	bl	8006628 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 800561c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005620:	215a      	movs	r1, #90	; 0x5a
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8005628:	4b19      	ldr	r3, [pc, #100]	; (8005690 <main+0x1f14>)
 800562a:	aa24      	add	r2, sp, #144	; 0x90
 800562c:	e705      	b.n	800543a <main+0x1cbe>
						else if (humidityRemoteLast < 10) {
 800562e:	4652      	mov	r2, sl
 8005630:	465b      	mov	r3, fp
 8005632:	4630      	mov	r0, r6
 8005634:	4639      	mov	r1, r7
 8005636:	f7fd fc9f 	bl	8002f78 <__aeabi_dcmplt>
 800563a:	2800      	cmp	r0, #0
 800563c:	f43f af1a 	beq.w	8005474 <main+0x1cf8>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8005640:	4632      	mov	r2, r6
 8005642:	463b      	mov	r3, r7
 8005644:	4911      	ldr	r1, [pc, #68]	; (800568c <main+0x1f10>)
 8005646:	a815      	add	r0, sp, #84	; 0x54
 8005648:	f000 ffee 	bl	8006628 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 800564c:	2128      	movs	r1, #40	; 0x28
 800564e:	f240 1093 	movw	r0, #403	; 0x193
 8005652:	4b0f      	ldr	r3, [pc, #60]	; (8005690 <main+0x1f14>)
 8005654:	f8cd 8000 	str.w	r8, [sp]
 8005658:	aa15      	add	r2, sp, #84	; 0x54
 800565a:	e709      	b.n	8005470 <main+0x1cf4>
						else if (humidityRemoteLast < 10) {
 800565c:	4652      	mov	r2, sl
 800565e:	465b      	mov	r3, fp
 8005660:	4630      	mov	r0, r6
 8005662:	4639      	mov	r1, r7
 8005664:	f7fd fc88 	bl	8002f78 <__aeabi_dcmplt>
 8005668:	2800      	cmp	r0, #0
 800566a:	f43f af20 	beq.w	80054ae <main+0x1d32>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 800566e:	4632      	mov	r2, r6
 8005670:	463b      	mov	r3, r7
 8005672:	4906      	ldr	r1, [pc, #24]	; (800568c <main+0x1f10>)
 8005674:	a815      	add	r0, sp, #84	; 0x54
 8005676:	f000 ffd7 	bl	8006628 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 800567a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800567e:	2128      	movs	r1, #40	; 0x28
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	f240 1093 	movw	r0, #403	; 0x193
 8005686:	4b02      	ldr	r3, [pc, #8]	; (8005690 <main+0x1f14>)
 8005688:	aa15      	add	r2, sp, #84	; 0x54
 800568a:	e70e      	b.n	80054aa <main+0x1d2e>
 800568c:	0801bb37 	.word	0x0801bb37
 8005690:	0800a310 	.word	0x0800a310
 8005694:	20000898 	.word	0x20000898
 8005698:	c0240000 	.word	0xc0240000
 800569c:	20000335 	.word	0x20000335
 80056a0:	0801bb36 	.word	0x0801bb36
				if (temperatureRemoteLast && humidityRemoteLast) {
 80056a4:	4d71      	ldr	r5, [pc, #452]	; (800586c <main+0x20f0>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	e955 6702 	ldrd	r6, r7, [r5, #-8]
 80056ac:	2300      	movs	r3, #0
 80056ae:	4630      	mov	r0, r6
 80056b0:	4639      	mov	r1, r7
 80056b2:	f7fd fc57 	bl	8002f64 <__aeabi_dcmpeq>
 80056b6:	2800      	cmp	r0, #0
 80056b8:	d141      	bne.n	800573e <main+0x1fc2>
 80056ba:	e9d5 0100 	ldrd	r0, r1, [r5]
 80056be:	2200      	movs	r2, #0
 80056c0:	2300      	movs	r3, #0
 80056c2:	f7fd fc4f 	bl	8002f64 <__aeabi_dcmpeq>
 80056c6:	9002      	str	r0, [sp, #8]
 80056c8:	2800      	cmp	r0, #0
 80056ca:	d138      	bne.n	800573e <main+0x1fc2>
					if (temperatureRemoteLast <= -10) {
 80056cc:	2200      	movs	r2, #0
 80056ce:	4630      	mov	r0, r6
 80056d0:	4639      	mov	r1, r7
 80056d2:	4b67      	ldr	r3, [pc, #412]	; (8005870 <main+0x20f4>)
 80056d4:	f7fd fc5a 	bl	8002f8c <__aeabi_dcmple>
 80056d8:	4681      	mov	r9, r0
 80056da:	2800      	cmp	r0, #0
 80056dc:	d04e      	beq.n	800577c <main+0x2000>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80056de:	4632      	mov	r2, r6
 80056e0:	463b      	mov	r3, r7
 80056e2:	4964      	ldr	r1, [pc, #400]	; (8005874 <main+0x20f8>)
 80056e4:	a824      	add	r0, sp, #144	; 0x90
 80056e6:	f000 ff9f 	bl	8006628 <siprintf>
						LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80056ea:	215a      	movs	r1, #90	; 0x5a
 80056ec:	f240 1061 	movw	r0, #353	; 0x161
 80056f0:	9b02      	ldr	r3, [sp, #8]
 80056f2:	aa24      	add	r2, sp, #144	; 0x90
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	4b60      	ldr	r3, [pc, #384]	; (8005878 <main+0x20fc>)
						LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80056f8:	f7fc fa32 	bl	8001b60 <LCD_Font.constprop.0>
					if (humidityRemoteLast >= 10) {
 80056fc:	e9d5 6700 	ldrd	r6, r7, [r5]
 8005700:	4652      	mov	r2, sl
 8005702:	465b      	mov	r3, fp
 8005704:	4630      	mov	r0, r6
 8005706:	4639      	mov	r1, r7
 8005708:	f7fd fc4a 	bl	8002fa0 <__aeabi_dcmpge>
 800570c:	4681      	mov	r9, r0
 800570e:	2800      	cmp	r0, #0
 8005710:	f000 8083 	beq.w	800581a <main+0x209e>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8005714:	4632      	mov	r2, r6
 8005716:	463b      	mov	r3, r7
 8005718:	4956      	ldr	r1, [pc, #344]	; (8005874 <main+0x20f8>)
 800571a:	a815      	add	r0, sp, #84	; 0x54
 800571c:	f000 ff84 	bl	8006628 <siprintf>
						LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8005720:	2300      	movs	r3, #0
 8005722:	2128      	movs	r1, #40	; 0x28
 8005724:	f240 1073 	movw	r0, #371	; 0x173
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	4b53      	ldr	r3, [pc, #332]	; (8005878 <main+0x20fc>)
 800572c:	aa15      	add	r2, sp, #84	; 0x54
						LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 800572e:	f7fc fa17 	bl	8001b60 <LCD_Font.constprop.0>
					temperatureRemoteLast = 0;
 8005732:	2200      	movs	r2, #0
 8005734:	2300      	movs	r3, #0
 8005736:	e945 2302 	strd	r2, r3, [r5, #-8]
					humidityRemoteLast = 0;
 800573a:	e9c5 2300 	strd	r2, r3, [r5]
				sprintf(clockPrint, "%02d", rtcSecLast);
 800573e:	f898 2008 	ldrb.w	r2, [r8, #8]
 8005742:	494e      	ldr	r1, [pc, #312]	; (800587c <main+0x2100>)
 8005744:	a819      	add	r0, sp, #100	; 0x64
 8005746:	f000 ff6f 	bl	8006628 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 800574a:	2300      	movs	r3, #0
 800574c:	aa19      	add	r2, sp, #100	; 0x64
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	2128      	movs	r1, #40	; 0x28
 8005752:	4b49      	ldr	r3, [pc, #292]	; (8005878 <main+0x20fc>)
 8005754:	f240 1077 	movw	r0, #375	; 0x177
 8005758:	f7fc fa02 	bl	8001b60 <LCD_Font.constprop.0>
				sprintf(clockPrint, "%02d", rtcSec);
 800575c:	f894 2636 	ldrb.w	r2, [r4, #1590]	; 0x636
 8005760:	4946      	ldr	r1, [pc, #280]	; (800587c <main+0x2100>)
 8005762:	a819      	add	r0, sp, #100	; 0x64
 8005764:	f000 ff60 	bl	8006628 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, ORANGE);
 8005768:	4b45      	ldr	r3, [pc, #276]	; (8005880 <main+0x2104>)
 800576a:	2128      	movs	r1, #40	; 0x28
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	f240 1077 	movw	r0, #375	; 0x177
 8005772:	4b41      	ldr	r3, [pc, #260]	; (8005878 <main+0x20fc>)
 8005774:	aa19      	add	r2, sp, #100	; 0x64
 8005776:	f7fc f9f3 	bl	8001b60 <LCD_Font.constprop.0>
 800577a:	e442      	b.n	8005002 <main+0x1886>
					else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 800577c:	2200      	movs	r2, #0
 800577e:	2300      	movs	r3, #0
 8005780:	4630      	mov	r0, r6
 8005782:	4639      	mov	r1, r7
 8005784:	f7fd fbf8 	bl	8002f78 <__aeabi_dcmplt>
 8005788:	b1a0      	cbz	r0, 80057b4 <main+0x2038>
 800578a:	2200      	movs	r2, #0
 800578c:	4630      	mov	r0, r6
 800578e:	4639      	mov	r1, r7
 8005790:	4b37      	ldr	r3, [pc, #220]	; (8005870 <main+0x20f4>)
 8005792:	f7fd fc0f 	bl	8002fb4 <__aeabi_dcmpgt>
 8005796:	b168      	cbz	r0, 80057b4 <main+0x2038>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8005798:	4632      	mov	r2, r6
 800579a:	463b      	mov	r3, r7
 800579c:	4935      	ldr	r1, [pc, #212]	; (8005874 <main+0x20f8>)
 800579e:	a824      	add	r0, sp, #144	; 0x90
 80057a0:	f000 ff42 	bl	8006628 <siprintf>
						LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80057a4:	215a      	movs	r1, #90	; 0x5a
 80057a6:	f240 1081 	movw	r0, #385	; 0x181
 80057aa:	4b33      	ldr	r3, [pc, #204]	; (8005878 <main+0x20fc>)
 80057ac:	f8cd 9000 	str.w	r9, [sp]
 80057b0:	aa24      	add	r2, sp, #144	; 0x90
 80057b2:	e7a1      	b.n	80056f8 <main+0x1f7c>
					else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 80057b4:	2200      	movs	r2, #0
 80057b6:	2300      	movs	r3, #0
 80057b8:	4630      	mov	r0, r6
 80057ba:	4639      	mov	r1, r7
 80057bc:	f7fd fbfa 	bl	8002fb4 <__aeabi_dcmpgt>
 80057c0:	b1a0      	cbz	r0, 80057ec <main+0x2070>
 80057c2:	4652      	mov	r2, sl
 80057c4:	465b      	mov	r3, fp
 80057c6:	4630      	mov	r0, r6
 80057c8:	4639      	mov	r1, r7
 80057ca:	f7fd fbd5 	bl	8002f78 <__aeabi_dcmplt>
 80057ce:	b168      	cbz	r0, 80057ec <main+0x2070>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80057d0:	4632      	mov	r2, r6
 80057d2:	463b      	mov	r3, r7
 80057d4:	492b      	ldr	r1, [pc, #172]	; (8005884 <main+0x2108>)
 80057d6:	a824      	add	r0, sp, #144	; 0x90
 80057d8:	f000 ff26 	bl	8006628 <siprintf>
						LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80057dc:	2300      	movs	r3, #0
 80057de:	215a      	movs	r1, #90	; 0x5a
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 80057e6:	4b24      	ldr	r3, [pc, #144]	; (8005878 <main+0x20fc>)
 80057e8:	aa24      	add	r2, sp, #144	; 0x90
 80057ea:	e785      	b.n	80056f8 <main+0x1f7c>
					else if (temperatureRemoteLast >= 10) {
 80057ec:	4652      	mov	r2, sl
 80057ee:	465b      	mov	r3, fp
 80057f0:	4630      	mov	r0, r6
 80057f2:	4639      	mov	r1, r7
 80057f4:	f7fd fbd4 	bl	8002fa0 <__aeabi_dcmpge>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	f43f af7f 	beq.w	80056fc <main+0x1f80>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80057fe:	4632      	mov	r2, r6
 8005800:	463b      	mov	r3, r7
 8005802:	4920      	ldr	r1, [pc, #128]	; (8005884 <main+0x2108>)
 8005804:	a824      	add	r0, sp, #144	; 0x90
 8005806:	f000 ff0f 	bl	8006628 <siprintf>
						LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800580a:	2300      	movs	r3, #0
 800580c:	215a      	movs	r1, #90	; 0x5a
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8005814:	4b18      	ldr	r3, [pc, #96]	; (8005878 <main+0x20fc>)
 8005816:	aa24      	add	r2, sp, #144	; 0x90
 8005818:	e76e      	b.n	80056f8 <main+0x1f7c>
					else if (humidityRemoteLast < 10) {
 800581a:	4652      	mov	r2, sl
 800581c:	465b      	mov	r3, fp
 800581e:	4630      	mov	r0, r6
 8005820:	4639      	mov	r1, r7
 8005822:	f7fd fba9 	bl	8002f78 <__aeabi_dcmplt>
 8005826:	2800      	cmp	r0, #0
 8005828:	d083      	beq.n	8005732 <main+0x1fb6>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 800582a:	4632      	mov	r2, r6
 800582c:	463b      	mov	r3, r7
 800582e:	4911      	ldr	r1, [pc, #68]	; (8005874 <main+0x20f8>)
 8005830:	a815      	add	r0, sp, #84	; 0x54
 8005832:	f000 fef9 	bl	8006628 <siprintf>
						LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8005836:	2128      	movs	r1, #40	; 0x28
 8005838:	f240 1093 	movw	r0, #403	; 0x193
 800583c:	4b0e      	ldr	r3, [pc, #56]	; (8005878 <main+0x20fc>)
 800583e:	f8cd 9000 	str.w	r9, [sp]
 8005842:	aa15      	add	r2, sp, #84	; 0x54
 8005844:	e773      	b.n	800572e <main+0x1fb2>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584a:	f43e ad5c 	beq.w	8004306 <main+0xb8a>
 800584e:	4a0e      	ldr	r2, [pc, #56]	; (8005888 <main+0x210c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	f43e ad58 	beq.w	8004306 <main+0xb8a>
 8005856:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800585a:	4293      	cmp	r3, r2
 800585c:	f43e ad53 	beq.w	8004306 <main+0xb8a>
    __HAL_TIM_ENABLE(htim);
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	f042 0201 	orr.w	r2, r2, #1
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	f7fe bd53 	b.w	8004312 <main+0xb96>
 800586c:	20000898 	.word	0x20000898
 8005870:	c0240000 	.word	0xc0240000
 8005874:	0801bb37 	.word	0x0801bb37
 8005878:	0800a310 	.word	0x0800a310
 800587c:	0801bb0d 	.word	0x0801bb0d
 8005880:	00ffa500 	.word	0x00ffa500
 8005884:	0801bb36 	.word	0x0801bb36
 8005888:	40000400 	.word	0x40000400

0800588c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800588c:	480c      	ldr	r0, [pc, #48]	; (80058c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800588e:	490d      	ldr	r1, [pc, #52]	; (80058c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005890:	4a0d      	ldr	r2, [pc, #52]	; (80058c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005894:	e002      	b.n	800589c <LoopCopyDataInit>

08005896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800589a:	3304      	adds	r3, #4

0800589c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800589c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800589e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058a0:	d3f9      	bcc.n	8005896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058a2:	4a0a      	ldr	r2, [pc, #40]	; (80058cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80058a4:	4c0a      	ldr	r4, [pc, #40]	; (80058d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80058a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058a8:	e001      	b.n	80058ae <LoopFillZerobss>

080058aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058ac:	3204      	adds	r2, #4

080058ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058b0:	d3fb      	bcc.n	80058aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80058b2:	f7fc ff29 	bl	8002708 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80058b6:	f000 f819 	bl	80058ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80058ba:	f7fd ff5f 	bl	800377c <main>
  bx lr
 80058be:	4770      	bx	lr
  ldr r0, =_sdata
 80058c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80058c4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80058c8:	0801c06c 	.word	0x0801c06c
  ldr r2, =_sbss
 80058cc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80058d0:	200008b4 	.word	0x200008b4

080058d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80058d4:	e7fe      	b.n	80058d4 <ADC1_2_IRQHandler>

080058d6 <atoi>:
 80058d6:	220a      	movs	r2, #10
 80058d8:	2100      	movs	r1, #0
 80058da:	f001 bd55 	b.w	8007388 <strtol>
	...

080058e0 <__errno>:
 80058e0:	4b01      	ldr	r3, [pc, #4]	; (80058e8 <__errno+0x8>)
 80058e2:	6818      	ldr	r0, [r3, #0]
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	20000010 	.word	0x20000010

080058ec <__libc_init_array>:
 80058ec:	b570      	push	{r4, r5, r6, lr}
 80058ee:	2600      	movs	r6, #0
 80058f0:	4d0c      	ldr	r5, [pc, #48]	; (8005924 <__libc_init_array+0x38>)
 80058f2:	4c0d      	ldr	r4, [pc, #52]	; (8005928 <__libc_init_array+0x3c>)
 80058f4:	1b64      	subs	r4, r4, r5
 80058f6:	10a4      	asrs	r4, r4, #2
 80058f8:	42a6      	cmp	r6, r4
 80058fa:	d109      	bne.n	8005910 <__libc_init_array+0x24>
 80058fc:	f004 fcf0 	bl	800a2e0 <_init>
 8005900:	2600      	movs	r6, #0
 8005902:	4d0a      	ldr	r5, [pc, #40]	; (800592c <__libc_init_array+0x40>)
 8005904:	4c0a      	ldr	r4, [pc, #40]	; (8005930 <__libc_init_array+0x44>)
 8005906:	1b64      	subs	r4, r4, r5
 8005908:	10a4      	asrs	r4, r4, #2
 800590a:	42a6      	cmp	r6, r4
 800590c:	d105      	bne.n	800591a <__libc_init_array+0x2e>
 800590e:	bd70      	pop	{r4, r5, r6, pc}
 8005910:	f855 3b04 	ldr.w	r3, [r5], #4
 8005914:	4798      	blx	r3
 8005916:	3601      	adds	r6, #1
 8005918:	e7ee      	b.n	80058f8 <__libc_init_array+0xc>
 800591a:	f855 3b04 	ldr.w	r3, [r5], #4
 800591e:	4798      	blx	r3
 8005920:	3601      	adds	r6, #1
 8005922:	e7f2      	b.n	800590a <__libc_init_array+0x1e>
 8005924:	0801c064 	.word	0x0801c064
 8005928:	0801c064 	.word	0x0801c064
 800592c:	0801c064 	.word	0x0801c064
 8005930:	0801c068 	.word	0x0801c068

08005934 <memset>:
 8005934:	4603      	mov	r3, r0
 8005936:	4402      	add	r2, r0
 8005938:	4293      	cmp	r3, r2
 800593a:	d100      	bne.n	800593e <memset+0xa>
 800593c:	4770      	bx	lr
 800593e:	f803 1b01 	strb.w	r1, [r3], #1
 8005942:	e7f9      	b.n	8005938 <memset+0x4>

08005944 <__cvt>:
 8005944:	2b00      	cmp	r3, #0
 8005946:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800594a:	461f      	mov	r7, r3
 800594c:	bfbb      	ittet	lt
 800594e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005952:	461f      	movlt	r7, r3
 8005954:	2300      	movge	r3, #0
 8005956:	232d      	movlt	r3, #45	; 0x2d
 8005958:	b088      	sub	sp, #32
 800595a:	4614      	mov	r4, r2
 800595c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800595e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005960:	7013      	strb	r3, [r2, #0]
 8005962:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005964:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005968:	f023 0820 	bic.w	r8, r3, #32
 800596c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005970:	d005      	beq.n	800597e <__cvt+0x3a>
 8005972:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005976:	d100      	bne.n	800597a <__cvt+0x36>
 8005978:	3501      	adds	r5, #1
 800597a:	2302      	movs	r3, #2
 800597c:	e000      	b.n	8005980 <__cvt+0x3c>
 800597e:	2303      	movs	r3, #3
 8005980:	aa07      	add	r2, sp, #28
 8005982:	9204      	str	r2, [sp, #16]
 8005984:	aa06      	add	r2, sp, #24
 8005986:	e9cd a202 	strd	sl, r2, [sp, #8]
 800598a:	e9cd 3500 	strd	r3, r5, [sp]
 800598e:	4622      	mov	r2, r4
 8005990:	463b      	mov	r3, r7
 8005992:	f001 fd91 	bl	80074b8 <_dtoa_r>
 8005996:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800599a:	4606      	mov	r6, r0
 800599c:	d102      	bne.n	80059a4 <__cvt+0x60>
 800599e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059a0:	07db      	lsls	r3, r3, #31
 80059a2:	d522      	bpl.n	80059ea <__cvt+0xa6>
 80059a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059a8:	eb06 0905 	add.w	r9, r6, r5
 80059ac:	d110      	bne.n	80059d0 <__cvt+0x8c>
 80059ae:	7833      	ldrb	r3, [r6, #0]
 80059b0:	2b30      	cmp	r3, #48	; 0x30
 80059b2:	d10a      	bne.n	80059ca <__cvt+0x86>
 80059b4:	2200      	movs	r2, #0
 80059b6:	2300      	movs	r3, #0
 80059b8:	4620      	mov	r0, r4
 80059ba:	4639      	mov	r1, r7
 80059bc:	f7fd fad2 	bl	8002f64 <__aeabi_dcmpeq>
 80059c0:	b918      	cbnz	r0, 80059ca <__cvt+0x86>
 80059c2:	f1c5 0501 	rsb	r5, r5, #1
 80059c6:	f8ca 5000 	str.w	r5, [sl]
 80059ca:	f8da 3000 	ldr.w	r3, [sl]
 80059ce:	4499      	add	r9, r3
 80059d0:	2200      	movs	r2, #0
 80059d2:	2300      	movs	r3, #0
 80059d4:	4620      	mov	r0, r4
 80059d6:	4639      	mov	r1, r7
 80059d8:	f7fd fac4 	bl	8002f64 <__aeabi_dcmpeq>
 80059dc:	b108      	cbz	r0, 80059e2 <__cvt+0x9e>
 80059de:	f8cd 901c 	str.w	r9, [sp, #28]
 80059e2:	2230      	movs	r2, #48	; 0x30
 80059e4:	9b07      	ldr	r3, [sp, #28]
 80059e6:	454b      	cmp	r3, r9
 80059e8:	d307      	bcc.n	80059fa <__cvt+0xb6>
 80059ea:	4630      	mov	r0, r6
 80059ec:	9b07      	ldr	r3, [sp, #28]
 80059ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80059f0:	1b9b      	subs	r3, r3, r6
 80059f2:	6013      	str	r3, [r2, #0]
 80059f4:	b008      	add	sp, #32
 80059f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059fa:	1c59      	adds	r1, r3, #1
 80059fc:	9107      	str	r1, [sp, #28]
 80059fe:	701a      	strb	r2, [r3, #0]
 8005a00:	e7f0      	b.n	80059e4 <__cvt+0xa0>

08005a02 <__exponent>:
 8005a02:	4603      	mov	r3, r0
 8005a04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a06:	2900      	cmp	r1, #0
 8005a08:	f803 2b02 	strb.w	r2, [r3], #2
 8005a0c:	bfb6      	itet	lt
 8005a0e:	222d      	movlt	r2, #45	; 0x2d
 8005a10:	222b      	movge	r2, #43	; 0x2b
 8005a12:	4249      	neglt	r1, r1
 8005a14:	2909      	cmp	r1, #9
 8005a16:	7042      	strb	r2, [r0, #1]
 8005a18:	dd2b      	ble.n	8005a72 <__exponent+0x70>
 8005a1a:	f10d 0407 	add.w	r4, sp, #7
 8005a1e:	46a4      	mov	ip, r4
 8005a20:	270a      	movs	r7, #10
 8005a22:	fb91 f6f7 	sdiv	r6, r1, r7
 8005a26:	460a      	mov	r2, r1
 8005a28:	46a6      	mov	lr, r4
 8005a2a:	fb07 1516 	mls	r5, r7, r6, r1
 8005a2e:	2a63      	cmp	r2, #99	; 0x63
 8005a30:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005a34:	4631      	mov	r1, r6
 8005a36:	f104 34ff 	add.w	r4, r4, #4294967295
 8005a3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005a3e:	dcf0      	bgt.n	8005a22 <__exponent+0x20>
 8005a40:	3130      	adds	r1, #48	; 0x30
 8005a42:	f1ae 0502 	sub.w	r5, lr, #2
 8005a46:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	1c44      	adds	r4, r0, #1
 8005a4e:	4561      	cmp	r1, ip
 8005a50:	d30a      	bcc.n	8005a68 <__exponent+0x66>
 8005a52:	f10d 0209 	add.w	r2, sp, #9
 8005a56:	eba2 020e 	sub.w	r2, r2, lr
 8005a5a:	4565      	cmp	r5, ip
 8005a5c:	bf88      	it	hi
 8005a5e:	2200      	movhi	r2, #0
 8005a60:	4413      	add	r3, r2
 8005a62:	1a18      	subs	r0, r3, r0
 8005a64:	b003      	add	sp, #12
 8005a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a6c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005a70:	e7ed      	b.n	8005a4e <__exponent+0x4c>
 8005a72:	2330      	movs	r3, #48	; 0x30
 8005a74:	3130      	adds	r1, #48	; 0x30
 8005a76:	7083      	strb	r3, [r0, #2]
 8005a78:	70c1      	strb	r1, [r0, #3]
 8005a7a:	1d03      	adds	r3, r0, #4
 8005a7c:	e7f1      	b.n	8005a62 <__exponent+0x60>
	...

08005a80 <_printf_float>:
 8005a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a84:	b091      	sub	sp, #68	; 0x44
 8005a86:	460c      	mov	r4, r1
 8005a88:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005a8c:	4616      	mov	r6, r2
 8005a8e:	461f      	mov	r7, r3
 8005a90:	4605      	mov	r5, r0
 8005a92:	f002 fe65 	bl	8008760 <_localeconv_r>
 8005a96:	6803      	ldr	r3, [r0, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005a9c:	f7fc fe36 	bl	800270c <strlen>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	930e      	str	r3, [sp, #56]	; 0x38
 8005aa4:	f8d8 3000 	ldr.w	r3, [r8]
 8005aa8:	900a      	str	r0, [sp, #40]	; 0x28
 8005aaa:	3307      	adds	r3, #7
 8005aac:	f023 0307 	bic.w	r3, r3, #7
 8005ab0:	f103 0208 	add.w	r2, r3, #8
 8005ab4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005ab8:	f8d4 b000 	ldr.w	fp, [r4]
 8005abc:	f8c8 2000 	str.w	r2, [r8]
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005ac8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005acc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005ad0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad6:	4640      	mov	r0, r8
 8005ad8:	4b9c      	ldr	r3, [pc, #624]	; (8005d4c <_printf_float+0x2cc>)
 8005ada:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005adc:	f7fd fa74 	bl	8002fc8 <__aeabi_dcmpun>
 8005ae0:	bb70      	cbnz	r0, 8005b40 <_printf_float+0xc0>
 8005ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae6:	4640      	mov	r0, r8
 8005ae8:	4b98      	ldr	r3, [pc, #608]	; (8005d4c <_printf_float+0x2cc>)
 8005aea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005aec:	f7fd fa4e 	bl	8002f8c <__aeabi_dcmple>
 8005af0:	bb30      	cbnz	r0, 8005b40 <_printf_float+0xc0>
 8005af2:	2200      	movs	r2, #0
 8005af4:	2300      	movs	r3, #0
 8005af6:	4640      	mov	r0, r8
 8005af8:	4651      	mov	r1, sl
 8005afa:	f7fd fa3d 	bl	8002f78 <__aeabi_dcmplt>
 8005afe:	b110      	cbz	r0, 8005b06 <_printf_float+0x86>
 8005b00:	232d      	movs	r3, #45	; 0x2d
 8005b02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b06:	4b92      	ldr	r3, [pc, #584]	; (8005d50 <_printf_float+0x2d0>)
 8005b08:	4892      	ldr	r0, [pc, #584]	; (8005d54 <_printf_float+0x2d4>)
 8005b0a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005b0e:	bf94      	ite	ls
 8005b10:	4698      	movls	r8, r3
 8005b12:	4680      	movhi	r8, r0
 8005b14:	2303      	movs	r3, #3
 8005b16:	f04f 0a00 	mov.w	sl, #0
 8005b1a:	6123      	str	r3, [r4, #16]
 8005b1c:	f02b 0304 	bic.w	r3, fp, #4
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	4633      	mov	r3, r6
 8005b24:	4621      	mov	r1, r4
 8005b26:	4628      	mov	r0, r5
 8005b28:	9700      	str	r7, [sp, #0]
 8005b2a:	aa0f      	add	r2, sp, #60	; 0x3c
 8005b2c:	f000 f9d4 	bl	8005ed8 <_printf_common>
 8005b30:	3001      	adds	r0, #1
 8005b32:	f040 8090 	bne.w	8005c56 <_printf_float+0x1d6>
 8005b36:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3a:	b011      	add	sp, #68	; 0x44
 8005b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b40:	4642      	mov	r2, r8
 8005b42:	4653      	mov	r3, sl
 8005b44:	4640      	mov	r0, r8
 8005b46:	4651      	mov	r1, sl
 8005b48:	f7fd fa3e 	bl	8002fc8 <__aeabi_dcmpun>
 8005b4c:	b148      	cbz	r0, 8005b62 <_printf_float+0xe2>
 8005b4e:	f1ba 0f00 	cmp.w	sl, #0
 8005b52:	bfb8      	it	lt
 8005b54:	232d      	movlt	r3, #45	; 0x2d
 8005b56:	4880      	ldr	r0, [pc, #512]	; (8005d58 <_printf_float+0x2d8>)
 8005b58:	bfb8      	it	lt
 8005b5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b5e:	4b7f      	ldr	r3, [pc, #508]	; (8005d5c <_printf_float+0x2dc>)
 8005b60:	e7d3      	b.n	8005b0a <_printf_float+0x8a>
 8005b62:	6863      	ldr	r3, [r4, #4]
 8005b64:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	d142      	bne.n	8005bf2 <_printf_float+0x172>
 8005b6c:	2306      	movs	r3, #6
 8005b6e:	6063      	str	r3, [r4, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	9206      	str	r2, [sp, #24]
 8005b74:	aa0e      	add	r2, sp, #56	; 0x38
 8005b76:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005b7a:	aa0d      	add	r2, sp, #52	; 0x34
 8005b7c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005b80:	9203      	str	r2, [sp, #12]
 8005b82:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005b86:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005b8a:	6023      	str	r3, [r4, #0]
 8005b8c:	6863      	ldr	r3, [r4, #4]
 8005b8e:	4642      	mov	r2, r8
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	4628      	mov	r0, r5
 8005b94:	4653      	mov	r3, sl
 8005b96:	910b      	str	r1, [sp, #44]	; 0x2c
 8005b98:	f7ff fed4 	bl	8005944 <__cvt>
 8005b9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b9e:	4680      	mov	r8, r0
 8005ba0:	2947      	cmp	r1, #71	; 0x47
 8005ba2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ba4:	d108      	bne.n	8005bb8 <_printf_float+0x138>
 8005ba6:	1cc8      	adds	r0, r1, #3
 8005ba8:	db02      	blt.n	8005bb0 <_printf_float+0x130>
 8005baa:	6863      	ldr	r3, [r4, #4]
 8005bac:	4299      	cmp	r1, r3
 8005bae:	dd40      	ble.n	8005c32 <_printf_float+0x1b2>
 8005bb0:	f1a9 0902 	sub.w	r9, r9, #2
 8005bb4:	fa5f f989 	uxtb.w	r9, r9
 8005bb8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005bbc:	d81f      	bhi.n	8005bfe <_printf_float+0x17e>
 8005bbe:	464a      	mov	r2, r9
 8005bc0:	3901      	subs	r1, #1
 8005bc2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005bc6:	910d      	str	r1, [sp, #52]	; 0x34
 8005bc8:	f7ff ff1b 	bl	8005a02 <__exponent>
 8005bcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bce:	4682      	mov	sl, r0
 8005bd0:	1813      	adds	r3, r2, r0
 8005bd2:	2a01      	cmp	r2, #1
 8005bd4:	6123      	str	r3, [r4, #16]
 8005bd6:	dc02      	bgt.n	8005bde <_printf_float+0x15e>
 8005bd8:	6822      	ldr	r2, [r4, #0]
 8005bda:	07d2      	lsls	r2, r2, #31
 8005bdc:	d501      	bpl.n	8005be2 <_printf_float+0x162>
 8005bde:	3301      	adds	r3, #1
 8005be0:	6123      	str	r3, [r4, #16]
 8005be2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d09b      	beq.n	8005b22 <_printf_float+0xa2>
 8005bea:	232d      	movs	r3, #45	; 0x2d
 8005bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bf0:	e797      	b.n	8005b22 <_printf_float+0xa2>
 8005bf2:	2947      	cmp	r1, #71	; 0x47
 8005bf4:	d1bc      	bne.n	8005b70 <_printf_float+0xf0>
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1ba      	bne.n	8005b70 <_printf_float+0xf0>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e7b7      	b.n	8005b6e <_printf_float+0xee>
 8005bfe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005c02:	d118      	bne.n	8005c36 <_printf_float+0x1b6>
 8005c04:	2900      	cmp	r1, #0
 8005c06:	6863      	ldr	r3, [r4, #4]
 8005c08:	dd0b      	ble.n	8005c22 <_printf_float+0x1a2>
 8005c0a:	6121      	str	r1, [r4, #16]
 8005c0c:	b913      	cbnz	r3, 8005c14 <_printf_float+0x194>
 8005c0e:	6822      	ldr	r2, [r4, #0]
 8005c10:	07d0      	lsls	r0, r2, #31
 8005c12:	d502      	bpl.n	8005c1a <_printf_float+0x19a>
 8005c14:	3301      	adds	r3, #1
 8005c16:	440b      	add	r3, r1
 8005c18:	6123      	str	r3, [r4, #16]
 8005c1a:	f04f 0a00 	mov.w	sl, #0
 8005c1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c20:	e7df      	b.n	8005be2 <_printf_float+0x162>
 8005c22:	b913      	cbnz	r3, 8005c2a <_printf_float+0x1aa>
 8005c24:	6822      	ldr	r2, [r4, #0]
 8005c26:	07d2      	lsls	r2, r2, #31
 8005c28:	d501      	bpl.n	8005c2e <_printf_float+0x1ae>
 8005c2a:	3302      	adds	r3, #2
 8005c2c:	e7f4      	b.n	8005c18 <_printf_float+0x198>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e7f2      	b.n	8005c18 <_printf_float+0x198>
 8005c32:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005c36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c38:	4299      	cmp	r1, r3
 8005c3a:	db05      	blt.n	8005c48 <_printf_float+0x1c8>
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	6121      	str	r1, [r4, #16]
 8005c40:	07d8      	lsls	r0, r3, #31
 8005c42:	d5ea      	bpl.n	8005c1a <_printf_float+0x19a>
 8005c44:	1c4b      	adds	r3, r1, #1
 8005c46:	e7e7      	b.n	8005c18 <_printf_float+0x198>
 8005c48:	2900      	cmp	r1, #0
 8005c4a:	bfcc      	ite	gt
 8005c4c:	2201      	movgt	r2, #1
 8005c4e:	f1c1 0202 	rsble	r2, r1, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	e7e0      	b.n	8005c18 <_printf_float+0x198>
 8005c56:	6823      	ldr	r3, [r4, #0]
 8005c58:	055a      	lsls	r2, r3, #21
 8005c5a:	d407      	bmi.n	8005c6c <_printf_float+0x1ec>
 8005c5c:	6923      	ldr	r3, [r4, #16]
 8005c5e:	4642      	mov	r2, r8
 8005c60:	4631      	mov	r1, r6
 8005c62:	4628      	mov	r0, r5
 8005c64:	47b8      	blx	r7
 8005c66:	3001      	adds	r0, #1
 8005c68:	d12b      	bne.n	8005cc2 <_printf_float+0x242>
 8005c6a:	e764      	b.n	8005b36 <_printf_float+0xb6>
 8005c6c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005c70:	f240 80dd 	bls.w	8005e2e <_printf_float+0x3ae>
 8005c74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f7fd f972 	bl	8002f64 <__aeabi_dcmpeq>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	d033      	beq.n	8005cec <_printf_float+0x26c>
 8005c84:	2301      	movs	r3, #1
 8005c86:	4631      	mov	r1, r6
 8005c88:	4628      	mov	r0, r5
 8005c8a:	4a35      	ldr	r2, [pc, #212]	; (8005d60 <_printf_float+0x2e0>)
 8005c8c:	47b8      	blx	r7
 8005c8e:	3001      	adds	r0, #1
 8005c90:	f43f af51 	beq.w	8005b36 <_printf_float+0xb6>
 8005c94:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	db02      	blt.n	8005ca2 <_printf_float+0x222>
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	07d8      	lsls	r0, r3, #31
 8005ca0:	d50f      	bpl.n	8005cc2 <_printf_float+0x242>
 8005ca2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	4628      	mov	r0, r5
 8005caa:	47b8      	blx	r7
 8005cac:	3001      	adds	r0, #1
 8005cae:	f43f af42 	beq.w	8005b36 <_printf_float+0xb6>
 8005cb2:	f04f 0800 	mov.w	r8, #0
 8005cb6:	f104 091a 	add.w	r9, r4, #26
 8005cba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	4543      	cmp	r3, r8
 8005cc0:	dc09      	bgt.n	8005cd6 <_printf_float+0x256>
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	079b      	lsls	r3, r3, #30
 8005cc6:	f100 8102 	bmi.w	8005ece <_printf_float+0x44e>
 8005cca:	68e0      	ldr	r0, [r4, #12]
 8005ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cce:	4298      	cmp	r0, r3
 8005cd0:	bfb8      	it	lt
 8005cd2:	4618      	movlt	r0, r3
 8005cd4:	e731      	b.n	8005b3a <_printf_float+0xba>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	464a      	mov	r2, r9
 8005cda:	4631      	mov	r1, r6
 8005cdc:	4628      	mov	r0, r5
 8005cde:	47b8      	blx	r7
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	f43f af28 	beq.w	8005b36 <_printf_float+0xb6>
 8005ce6:	f108 0801 	add.w	r8, r8, #1
 8005cea:	e7e6      	b.n	8005cba <_printf_float+0x23a>
 8005cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	dc38      	bgt.n	8005d64 <_printf_float+0x2e4>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	4631      	mov	r1, r6
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	4a19      	ldr	r2, [pc, #100]	; (8005d60 <_printf_float+0x2e0>)
 8005cfa:	47b8      	blx	r7
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	f43f af1a 	beq.w	8005b36 <_printf_float+0xb6>
 8005d02:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d06:	4313      	orrs	r3, r2
 8005d08:	d102      	bne.n	8005d10 <_printf_float+0x290>
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	07d9      	lsls	r1, r3, #31
 8005d0e:	d5d8      	bpl.n	8005cc2 <_printf_float+0x242>
 8005d10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d14:	4631      	mov	r1, r6
 8005d16:	4628      	mov	r0, r5
 8005d18:	47b8      	blx	r7
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	f43f af0b 	beq.w	8005b36 <_printf_float+0xb6>
 8005d20:	f04f 0900 	mov.w	r9, #0
 8005d24:	f104 0a1a 	add.w	sl, r4, #26
 8005d28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d2a:	425b      	negs	r3, r3
 8005d2c:	454b      	cmp	r3, r9
 8005d2e:	dc01      	bgt.n	8005d34 <_printf_float+0x2b4>
 8005d30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d32:	e794      	b.n	8005c5e <_printf_float+0x1de>
 8005d34:	2301      	movs	r3, #1
 8005d36:	4652      	mov	r2, sl
 8005d38:	4631      	mov	r1, r6
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	47b8      	blx	r7
 8005d3e:	3001      	adds	r0, #1
 8005d40:	f43f aef9 	beq.w	8005b36 <_printf_float+0xb6>
 8005d44:	f109 0901 	add.w	r9, r9, #1
 8005d48:	e7ee      	b.n	8005d28 <_printf_float+0x2a8>
 8005d4a:	bf00      	nop
 8005d4c:	7fefffff 	.word	0x7fefffff
 8005d50:	0801bbc0 	.word	0x0801bbc0
 8005d54:	0801bbc4 	.word	0x0801bbc4
 8005d58:	0801bbcc 	.word	0x0801bbcc
 8005d5c:	0801bbc8 	.word	0x0801bbc8
 8005d60:	0801bbd0 	.word	0x0801bbd0
 8005d64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	bfa8      	it	ge
 8005d6c:	461a      	movge	r2, r3
 8005d6e:	2a00      	cmp	r2, #0
 8005d70:	4691      	mov	r9, r2
 8005d72:	dc37      	bgt.n	8005de4 <_printf_float+0x364>
 8005d74:	f04f 0b00 	mov.w	fp, #0
 8005d78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d7c:	f104 021a 	add.w	r2, r4, #26
 8005d80:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005d84:	ebaa 0309 	sub.w	r3, sl, r9
 8005d88:	455b      	cmp	r3, fp
 8005d8a:	dc33      	bgt.n	8005df4 <_printf_float+0x374>
 8005d8c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d90:	429a      	cmp	r2, r3
 8005d92:	db3b      	blt.n	8005e0c <_printf_float+0x38c>
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	07da      	lsls	r2, r3, #31
 8005d98:	d438      	bmi.n	8005e0c <_printf_float+0x38c>
 8005d9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d9c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d9e:	eba3 020a 	sub.w	r2, r3, sl
 8005da2:	eba3 0901 	sub.w	r9, r3, r1
 8005da6:	4591      	cmp	r9, r2
 8005da8:	bfa8      	it	ge
 8005daa:	4691      	movge	r9, r2
 8005dac:	f1b9 0f00 	cmp.w	r9, #0
 8005db0:	dc34      	bgt.n	8005e1c <_printf_float+0x39c>
 8005db2:	f04f 0800 	mov.w	r8, #0
 8005db6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dba:	f104 0a1a 	add.w	sl, r4, #26
 8005dbe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005dc2:	1a9b      	subs	r3, r3, r2
 8005dc4:	eba3 0309 	sub.w	r3, r3, r9
 8005dc8:	4543      	cmp	r3, r8
 8005dca:	f77f af7a 	ble.w	8005cc2 <_printf_float+0x242>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	4652      	mov	r2, sl
 8005dd2:	4631      	mov	r1, r6
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	47b8      	blx	r7
 8005dd8:	3001      	adds	r0, #1
 8005dda:	f43f aeac 	beq.w	8005b36 <_printf_float+0xb6>
 8005dde:	f108 0801 	add.w	r8, r8, #1
 8005de2:	e7ec      	b.n	8005dbe <_printf_float+0x33e>
 8005de4:	4613      	mov	r3, r2
 8005de6:	4631      	mov	r1, r6
 8005de8:	4642      	mov	r2, r8
 8005dea:	4628      	mov	r0, r5
 8005dec:	47b8      	blx	r7
 8005dee:	3001      	adds	r0, #1
 8005df0:	d1c0      	bne.n	8005d74 <_printf_float+0x2f4>
 8005df2:	e6a0      	b.n	8005b36 <_printf_float+0xb6>
 8005df4:	2301      	movs	r3, #1
 8005df6:	4631      	mov	r1, r6
 8005df8:	4628      	mov	r0, r5
 8005dfa:	920b      	str	r2, [sp, #44]	; 0x2c
 8005dfc:	47b8      	blx	r7
 8005dfe:	3001      	adds	r0, #1
 8005e00:	f43f ae99 	beq.w	8005b36 <_printf_float+0xb6>
 8005e04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e06:	f10b 0b01 	add.w	fp, fp, #1
 8005e0a:	e7b9      	b.n	8005d80 <_printf_float+0x300>
 8005e0c:	4631      	mov	r1, r6
 8005e0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e12:	4628      	mov	r0, r5
 8005e14:	47b8      	blx	r7
 8005e16:	3001      	adds	r0, #1
 8005e18:	d1bf      	bne.n	8005d9a <_printf_float+0x31a>
 8005e1a:	e68c      	b.n	8005b36 <_printf_float+0xb6>
 8005e1c:	464b      	mov	r3, r9
 8005e1e:	4631      	mov	r1, r6
 8005e20:	4628      	mov	r0, r5
 8005e22:	eb08 020a 	add.w	r2, r8, sl
 8005e26:	47b8      	blx	r7
 8005e28:	3001      	adds	r0, #1
 8005e2a:	d1c2      	bne.n	8005db2 <_printf_float+0x332>
 8005e2c:	e683      	b.n	8005b36 <_printf_float+0xb6>
 8005e2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e30:	2a01      	cmp	r2, #1
 8005e32:	dc01      	bgt.n	8005e38 <_printf_float+0x3b8>
 8005e34:	07db      	lsls	r3, r3, #31
 8005e36:	d537      	bpl.n	8005ea8 <_printf_float+0x428>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	4642      	mov	r2, r8
 8005e3c:	4631      	mov	r1, r6
 8005e3e:	4628      	mov	r0, r5
 8005e40:	47b8      	blx	r7
 8005e42:	3001      	adds	r0, #1
 8005e44:	f43f ae77 	beq.w	8005b36 <_printf_float+0xb6>
 8005e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e4c:	4631      	mov	r1, r6
 8005e4e:	4628      	mov	r0, r5
 8005e50:	47b8      	blx	r7
 8005e52:	3001      	adds	r0, #1
 8005e54:	f43f ae6f 	beq.w	8005b36 <_printf_float+0xb6>
 8005e58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2300      	movs	r3, #0
 8005e60:	f7fd f880 	bl	8002f64 <__aeabi_dcmpeq>
 8005e64:	b9d8      	cbnz	r0, 8005e9e <_printf_float+0x41e>
 8005e66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e68:	f108 0201 	add.w	r2, r8, #1
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	4631      	mov	r1, r6
 8005e70:	4628      	mov	r0, r5
 8005e72:	47b8      	blx	r7
 8005e74:	3001      	adds	r0, #1
 8005e76:	d10e      	bne.n	8005e96 <_printf_float+0x416>
 8005e78:	e65d      	b.n	8005b36 <_printf_float+0xb6>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	464a      	mov	r2, r9
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4628      	mov	r0, r5
 8005e82:	47b8      	blx	r7
 8005e84:	3001      	adds	r0, #1
 8005e86:	f43f ae56 	beq.w	8005b36 <_printf_float+0xb6>
 8005e8a:	f108 0801 	add.w	r8, r8, #1
 8005e8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e90:	3b01      	subs	r3, #1
 8005e92:	4543      	cmp	r3, r8
 8005e94:	dcf1      	bgt.n	8005e7a <_printf_float+0x3fa>
 8005e96:	4653      	mov	r3, sl
 8005e98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e9c:	e6e0      	b.n	8005c60 <_printf_float+0x1e0>
 8005e9e:	f04f 0800 	mov.w	r8, #0
 8005ea2:	f104 091a 	add.w	r9, r4, #26
 8005ea6:	e7f2      	b.n	8005e8e <_printf_float+0x40e>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	4642      	mov	r2, r8
 8005eac:	e7df      	b.n	8005e6e <_printf_float+0x3ee>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	464a      	mov	r2, r9
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	47b8      	blx	r7
 8005eb8:	3001      	adds	r0, #1
 8005eba:	f43f ae3c 	beq.w	8005b36 <_printf_float+0xb6>
 8005ebe:	f108 0801 	add.w	r8, r8, #1
 8005ec2:	68e3      	ldr	r3, [r4, #12]
 8005ec4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005ec6:	1a5b      	subs	r3, r3, r1
 8005ec8:	4543      	cmp	r3, r8
 8005eca:	dcf0      	bgt.n	8005eae <_printf_float+0x42e>
 8005ecc:	e6fd      	b.n	8005cca <_printf_float+0x24a>
 8005ece:	f04f 0800 	mov.w	r8, #0
 8005ed2:	f104 0919 	add.w	r9, r4, #25
 8005ed6:	e7f4      	b.n	8005ec2 <_printf_float+0x442>

08005ed8 <_printf_common>:
 8005ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005edc:	4616      	mov	r6, r2
 8005ede:	4699      	mov	r9, r3
 8005ee0:	688a      	ldr	r2, [r1, #8]
 8005ee2:	690b      	ldr	r3, [r1, #16]
 8005ee4:	4607      	mov	r7, r0
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	bfb8      	it	lt
 8005eea:	4613      	movlt	r3, r2
 8005eec:	6033      	str	r3, [r6, #0]
 8005eee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ef8:	b10a      	cbz	r2, 8005efe <_printf_common+0x26>
 8005efa:	3301      	adds	r3, #1
 8005efc:	6033      	str	r3, [r6, #0]
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	0699      	lsls	r1, r3, #26
 8005f02:	bf42      	ittt	mi
 8005f04:	6833      	ldrmi	r3, [r6, #0]
 8005f06:	3302      	addmi	r3, #2
 8005f08:	6033      	strmi	r3, [r6, #0]
 8005f0a:	6825      	ldr	r5, [r4, #0]
 8005f0c:	f015 0506 	ands.w	r5, r5, #6
 8005f10:	d106      	bne.n	8005f20 <_printf_common+0x48>
 8005f12:	f104 0a19 	add.w	sl, r4, #25
 8005f16:	68e3      	ldr	r3, [r4, #12]
 8005f18:	6832      	ldr	r2, [r6, #0]
 8005f1a:	1a9b      	subs	r3, r3, r2
 8005f1c:	42ab      	cmp	r3, r5
 8005f1e:	dc28      	bgt.n	8005f72 <_printf_common+0x9a>
 8005f20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f24:	1e13      	subs	r3, r2, #0
 8005f26:	6822      	ldr	r2, [r4, #0]
 8005f28:	bf18      	it	ne
 8005f2a:	2301      	movne	r3, #1
 8005f2c:	0692      	lsls	r2, r2, #26
 8005f2e:	d42d      	bmi.n	8005f8c <_printf_common+0xb4>
 8005f30:	4649      	mov	r1, r9
 8005f32:	4638      	mov	r0, r7
 8005f34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f38:	47c0      	blx	r8
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	d020      	beq.n	8005f80 <_printf_common+0xa8>
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	68e5      	ldr	r5, [r4, #12]
 8005f42:	f003 0306 	and.w	r3, r3, #6
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	bf18      	it	ne
 8005f4a:	2500      	movne	r5, #0
 8005f4c:	6832      	ldr	r2, [r6, #0]
 8005f4e:	f04f 0600 	mov.w	r6, #0
 8005f52:	68a3      	ldr	r3, [r4, #8]
 8005f54:	bf08      	it	eq
 8005f56:	1aad      	subeq	r5, r5, r2
 8005f58:	6922      	ldr	r2, [r4, #16]
 8005f5a:	bf08      	it	eq
 8005f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f60:	4293      	cmp	r3, r2
 8005f62:	bfc4      	itt	gt
 8005f64:	1a9b      	subgt	r3, r3, r2
 8005f66:	18ed      	addgt	r5, r5, r3
 8005f68:	341a      	adds	r4, #26
 8005f6a:	42b5      	cmp	r5, r6
 8005f6c:	d11a      	bne.n	8005fa4 <_printf_common+0xcc>
 8005f6e:	2000      	movs	r0, #0
 8005f70:	e008      	b.n	8005f84 <_printf_common+0xac>
 8005f72:	2301      	movs	r3, #1
 8005f74:	4652      	mov	r2, sl
 8005f76:	4649      	mov	r1, r9
 8005f78:	4638      	mov	r0, r7
 8005f7a:	47c0      	blx	r8
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	d103      	bne.n	8005f88 <_printf_common+0xb0>
 8005f80:	f04f 30ff 	mov.w	r0, #4294967295
 8005f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f88:	3501      	adds	r5, #1
 8005f8a:	e7c4      	b.n	8005f16 <_printf_common+0x3e>
 8005f8c:	2030      	movs	r0, #48	; 0x30
 8005f8e:	18e1      	adds	r1, r4, r3
 8005f90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f9a:	4422      	add	r2, r4
 8005f9c:	3302      	adds	r3, #2
 8005f9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fa2:	e7c5      	b.n	8005f30 <_printf_common+0x58>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	4622      	mov	r2, r4
 8005fa8:	4649      	mov	r1, r9
 8005faa:	4638      	mov	r0, r7
 8005fac:	47c0      	blx	r8
 8005fae:	3001      	adds	r0, #1
 8005fb0:	d0e6      	beq.n	8005f80 <_printf_common+0xa8>
 8005fb2:	3601      	adds	r6, #1
 8005fb4:	e7d9      	b.n	8005f6a <_printf_common+0x92>
	...

08005fb8 <_printf_i>:
 8005fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fbc:	7e0f      	ldrb	r7, [r1, #24]
 8005fbe:	4691      	mov	r9, r2
 8005fc0:	2f78      	cmp	r7, #120	; 0x78
 8005fc2:	4680      	mov	r8, r0
 8005fc4:	460c      	mov	r4, r1
 8005fc6:	469a      	mov	sl, r3
 8005fc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005fce:	d807      	bhi.n	8005fe0 <_printf_i+0x28>
 8005fd0:	2f62      	cmp	r7, #98	; 0x62
 8005fd2:	d80a      	bhi.n	8005fea <_printf_i+0x32>
 8005fd4:	2f00      	cmp	r7, #0
 8005fd6:	f000 80d9 	beq.w	800618c <_printf_i+0x1d4>
 8005fda:	2f58      	cmp	r7, #88	; 0x58
 8005fdc:	f000 80a4 	beq.w	8006128 <_printf_i+0x170>
 8005fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fe8:	e03a      	b.n	8006060 <_printf_i+0xa8>
 8005fea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005fee:	2b15      	cmp	r3, #21
 8005ff0:	d8f6      	bhi.n	8005fe0 <_printf_i+0x28>
 8005ff2:	a101      	add	r1, pc, #4	; (adr r1, 8005ff8 <_printf_i+0x40>)
 8005ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ff8:	08006051 	.word	0x08006051
 8005ffc:	08006065 	.word	0x08006065
 8006000:	08005fe1 	.word	0x08005fe1
 8006004:	08005fe1 	.word	0x08005fe1
 8006008:	08005fe1 	.word	0x08005fe1
 800600c:	08005fe1 	.word	0x08005fe1
 8006010:	08006065 	.word	0x08006065
 8006014:	08005fe1 	.word	0x08005fe1
 8006018:	08005fe1 	.word	0x08005fe1
 800601c:	08005fe1 	.word	0x08005fe1
 8006020:	08005fe1 	.word	0x08005fe1
 8006024:	08006173 	.word	0x08006173
 8006028:	08006095 	.word	0x08006095
 800602c:	08006155 	.word	0x08006155
 8006030:	08005fe1 	.word	0x08005fe1
 8006034:	08005fe1 	.word	0x08005fe1
 8006038:	08006195 	.word	0x08006195
 800603c:	08005fe1 	.word	0x08005fe1
 8006040:	08006095 	.word	0x08006095
 8006044:	08005fe1 	.word	0x08005fe1
 8006048:	08005fe1 	.word	0x08005fe1
 800604c:	0800615d 	.word	0x0800615d
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	1d1a      	adds	r2, r3, #4
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	602a      	str	r2, [r5, #0]
 8006058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800605c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006060:	2301      	movs	r3, #1
 8006062:	e0a4      	b.n	80061ae <_printf_i+0x1f6>
 8006064:	6820      	ldr	r0, [r4, #0]
 8006066:	6829      	ldr	r1, [r5, #0]
 8006068:	0606      	lsls	r6, r0, #24
 800606a:	f101 0304 	add.w	r3, r1, #4
 800606e:	d50a      	bpl.n	8006086 <_printf_i+0xce>
 8006070:	680e      	ldr	r6, [r1, #0]
 8006072:	602b      	str	r3, [r5, #0]
 8006074:	2e00      	cmp	r6, #0
 8006076:	da03      	bge.n	8006080 <_printf_i+0xc8>
 8006078:	232d      	movs	r3, #45	; 0x2d
 800607a:	4276      	negs	r6, r6
 800607c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006080:	230a      	movs	r3, #10
 8006082:	485e      	ldr	r0, [pc, #376]	; (80061fc <_printf_i+0x244>)
 8006084:	e019      	b.n	80060ba <_printf_i+0x102>
 8006086:	680e      	ldr	r6, [r1, #0]
 8006088:	f010 0f40 	tst.w	r0, #64	; 0x40
 800608c:	602b      	str	r3, [r5, #0]
 800608e:	bf18      	it	ne
 8006090:	b236      	sxthne	r6, r6
 8006092:	e7ef      	b.n	8006074 <_printf_i+0xbc>
 8006094:	682b      	ldr	r3, [r5, #0]
 8006096:	6820      	ldr	r0, [r4, #0]
 8006098:	1d19      	adds	r1, r3, #4
 800609a:	6029      	str	r1, [r5, #0]
 800609c:	0601      	lsls	r1, r0, #24
 800609e:	d501      	bpl.n	80060a4 <_printf_i+0xec>
 80060a0:	681e      	ldr	r6, [r3, #0]
 80060a2:	e002      	b.n	80060aa <_printf_i+0xf2>
 80060a4:	0646      	lsls	r6, r0, #25
 80060a6:	d5fb      	bpl.n	80060a0 <_printf_i+0xe8>
 80060a8:	881e      	ldrh	r6, [r3, #0]
 80060aa:	2f6f      	cmp	r7, #111	; 0x6f
 80060ac:	bf0c      	ite	eq
 80060ae:	2308      	moveq	r3, #8
 80060b0:	230a      	movne	r3, #10
 80060b2:	4852      	ldr	r0, [pc, #328]	; (80061fc <_printf_i+0x244>)
 80060b4:	2100      	movs	r1, #0
 80060b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060ba:	6865      	ldr	r5, [r4, #4]
 80060bc:	2d00      	cmp	r5, #0
 80060be:	bfa8      	it	ge
 80060c0:	6821      	ldrge	r1, [r4, #0]
 80060c2:	60a5      	str	r5, [r4, #8]
 80060c4:	bfa4      	itt	ge
 80060c6:	f021 0104 	bicge.w	r1, r1, #4
 80060ca:	6021      	strge	r1, [r4, #0]
 80060cc:	b90e      	cbnz	r6, 80060d2 <_printf_i+0x11a>
 80060ce:	2d00      	cmp	r5, #0
 80060d0:	d04d      	beq.n	800616e <_printf_i+0x1b6>
 80060d2:	4615      	mov	r5, r2
 80060d4:	fbb6 f1f3 	udiv	r1, r6, r3
 80060d8:	fb03 6711 	mls	r7, r3, r1, r6
 80060dc:	5dc7      	ldrb	r7, [r0, r7]
 80060de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80060e2:	4637      	mov	r7, r6
 80060e4:	42bb      	cmp	r3, r7
 80060e6:	460e      	mov	r6, r1
 80060e8:	d9f4      	bls.n	80060d4 <_printf_i+0x11c>
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d10b      	bne.n	8006106 <_printf_i+0x14e>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	07de      	lsls	r6, r3, #31
 80060f2:	d508      	bpl.n	8006106 <_printf_i+0x14e>
 80060f4:	6923      	ldr	r3, [r4, #16]
 80060f6:	6861      	ldr	r1, [r4, #4]
 80060f8:	4299      	cmp	r1, r3
 80060fa:	bfde      	ittt	le
 80060fc:	2330      	movle	r3, #48	; 0x30
 80060fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006102:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006106:	1b52      	subs	r2, r2, r5
 8006108:	6122      	str	r2, [r4, #16]
 800610a:	464b      	mov	r3, r9
 800610c:	4621      	mov	r1, r4
 800610e:	4640      	mov	r0, r8
 8006110:	f8cd a000 	str.w	sl, [sp]
 8006114:	aa03      	add	r2, sp, #12
 8006116:	f7ff fedf 	bl	8005ed8 <_printf_common>
 800611a:	3001      	adds	r0, #1
 800611c:	d14c      	bne.n	80061b8 <_printf_i+0x200>
 800611e:	f04f 30ff 	mov.w	r0, #4294967295
 8006122:	b004      	add	sp, #16
 8006124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006128:	4834      	ldr	r0, [pc, #208]	; (80061fc <_printf_i+0x244>)
 800612a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800612e:	6829      	ldr	r1, [r5, #0]
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	f851 6b04 	ldr.w	r6, [r1], #4
 8006136:	6029      	str	r1, [r5, #0]
 8006138:	061d      	lsls	r5, r3, #24
 800613a:	d514      	bpl.n	8006166 <_printf_i+0x1ae>
 800613c:	07df      	lsls	r7, r3, #31
 800613e:	bf44      	itt	mi
 8006140:	f043 0320 	orrmi.w	r3, r3, #32
 8006144:	6023      	strmi	r3, [r4, #0]
 8006146:	b91e      	cbnz	r6, 8006150 <_printf_i+0x198>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	f023 0320 	bic.w	r3, r3, #32
 800614e:	6023      	str	r3, [r4, #0]
 8006150:	2310      	movs	r3, #16
 8006152:	e7af      	b.n	80060b4 <_printf_i+0xfc>
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	f043 0320 	orr.w	r3, r3, #32
 800615a:	6023      	str	r3, [r4, #0]
 800615c:	2378      	movs	r3, #120	; 0x78
 800615e:	4828      	ldr	r0, [pc, #160]	; (8006200 <_printf_i+0x248>)
 8006160:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006164:	e7e3      	b.n	800612e <_printf_i+0x176>
 8006166:	0659      	lsls	r1, r3, #25
 8006168:	bf48      	it	mi
 800616a:	b2b6      	uxthmi	r6, r6
 800616c:	e7e6      	b.n	800613c <_printf_i+0x184>
 800616e:	4615      	mov	r5, r2
 8006170:	e7bb      	b.n	80060ea <_printf_i+0x132>
 8006172:	682b      	ldr	r3, [r5, #0]
 8006174:	6826      	ldr	r6, [r4, #0]
 8006176:	1d18      	adds	r0, r3, #4
 8006178:	6961      	ldr	r1, [r4, #20]
 800617a:	6028      	str	r0, [r5, #0]
 800617c:	0635      	lsls	r5, r6, #24
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	d501      	bpl.n	8006186 <_printf_i+0x1ce>
 8006182:	6019      	str	r1, [r3, #0]
 8006184:	e002      	b.n	800618c <_printf_i+0x1d4>
 8006186:	0670      	lsls	r0, r6, #25
 8006188:	d5fb      	bpl.n	8006182 <_printf_i+0x1ca>
 800618a:	8019      	strh	r1, [r3, #0]
 800618c:	2300      	movs	r3, #0
 800618e:	4615      	mov	r5, r2
 8006190:	6123      	str	r3, [r4, #16]
 8006192:	e7ba      	b.n	800610a <_printf_i+0x152>
 8006194:	682b      	ldr	r3, [r5, #0]
 8006196:	2100      	movs	r1, #0
 8006198:	1d1a      	adds	r2, r3, #4
 800619a:	602a      	str	r2, [r5, #0]
 800619c:	681d      	ldr	r5, [r3, #0]
 800619e:	6862      	ldr	r2, [r4, #4]
 80061a0:	4628      	mov	r0, r5
 80061a2:	f002 fafb 	bl	800879c <memchr>
 80061a6:	b108      	cbz	r0, 80061ac <_printf_i+0x1f4>
 80061a8:	1b40      	subs	r0, r0, r5
 80061aa:	6060      	str	r0, [r4, #4]
 80061ac:	6863      	ldr	r3, [r4, #4]
 80061ae:	6123      	str	r3, [r4, #16]
 80061b0:	2300      	movs	r3, #0
 80061b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061b6:	e7a8      	b.n	800610a <_printf_i+0x152>
 80061b8:	462a      	mov	r2, r5
 80061ba:	4649      	mov	r1, r9
 80061bc:	4640      	mov	r0, r8
 80061be:	6923      	ldr	r3, [r4, #16]
 80061c0:	47d0      	blx	sl
 80061c2:	3001      	adds	r0, #1
 80061c4:	d0ab      	beq.n	800611e <_printf_i+0x166>
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	079b      	lsls	r3, r3, #30
 80061ca:	d413      	bmi.n	80061f4 <_printf_i+0x23c>
 80061cc:	68e0      	ldr	r0, [r4, #12]
 80061ce:	9b03      	ldr	r3, [sp, #12]
 80061d0:	4298      	cmp	r0, r3
 80061d2:	bfb8      	it	lt
 80061d4:	4618      	movlt	r0, r3
 80061d6:	e7a4      	b.n	8006122 <_printf_i+0x16a>
 80061d8:	2301      	movs	r3, #1
 80061da:	4632      	mov	r2, r6
 80061dc:	4649      	mov	r1, r9
 80061de:	4640      	mov	r0, r8
 80061e0:	47d0      	blx	sl
 80061e2:	3001      	adds	r0, #1
 80061e4:	d09b      	beq.n	800611e <_printf_i+0x166>
 80061e6:	3501      	adds	r5, #1
 80061e8:	68e3      	ldr	r3, [r4, #12]
 80061ea:	9903      	ldr	r1, [sp, #12]
 80061ec:	1a5b      	subs	r3, r3, r1
 80061ee:	42ab      	cmp	r3, r5
 80061f0:	dcf2      	bgt.n	80061d8 <_printf_i+0x220>
 80061f2:	e7eb      	b.n	80061cc <_printf_i+0x214>
 80061f4:	2500      	movs	r5, #0
 80061f6:	f104 0619 	add.w	r6, r4, #25
 80061fa:	e7f5      	b.n	80061e8 <_printf_i+0x230>
 80061fc:	0801bbd2 	.word	0x0801bbd2
 8006200:	0801bbe3 	.word	0x0801bbe3

08006204 <_scanf_float>:
 8006204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006208:	b087      	sub	sp, #28
 800620a:	9303      	str	r3, [sp, #12]
 800620c:	688b      	ldr	r3, [r1, #8]
 800620e:	4617      	mov	r7, r2
 8006210:	1e5a      	subs	r2, r3, #1
 8006212:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006216:	bf85      	ittet	hi
 8006218:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800621c:	195b      	addhi	r3, r3, r5
 800621e:	2300      	movls	r3, #0
 8006220:	9302      	strhi	r3, [sp, #8]
 8006222:	bf88      	it	hi
 8006224:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006228:	468b      	mov	fp, r1
 800622a:	f04f 0500 	mov.w	r5, #0
 800622e:	bf8c      	ite	hi
 8006230:	608b      	strhi	r3, [r1, #8]
 8006232:	9302      	strls	r3, [sp, #8]
 8006234:	680b      	ldr	r3, [r1, #0]
 8006236:	4680      	mov	r8, r0
 8006238:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800623c:	f84b 3b1c 	str.w	r3, [fp], #28
 8006240:	460c      	mov	r4, r1
 8006242:	465e      	mov	r6, fp
 8006244:	46aa      	mov	sl, r5
 8006246:	46a9      	mov	r9, r5
 8006248:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800624c:	9501      	str	r5, [sp, #4]
 800624e:	68a2      	ldr	r2, [r4, #8]
 8006250:	b152      	cbz	r2, 8006268 <_scanf_float+0x64>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	2b4e      	cmp	r3, #78	; 0x4e
 8006258:	d864      	bhi.n	8006324 <_scanf_float+0x120>
 800625a:	2b40      	cmp	r3, #64	; 0x40
 800625c:	d83c      	bhi.n	80062d8 <_scanf_float+0xd4>
 800625e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006262:	b2c8      	uxtb	r0, r1
 8006264:	280e      	cmp	r0, #14
 8006266:	d93a      	bls.n	80062de <_scanf_float+0xda>
 8006268:	f1b9 0f00 	cmp.w	r9, #0
 800626c:	d003      	beq.n	8006276 <_scanf_float+0x72>
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006274:	6023      	str	r3, [r4, #0]
 8006276:	f10a 3aff 	add.w	sl, sl, #4294967295
 800627a:	f1ba 0f01 	cmp.w	sl, #1
 800627e:	f200 8113 	bhi.w	80064a8 <_scanf_float+0x2a4>
 8006282:	455e      	cmp	r6, fp
 8006284:	f200 8105 	bhi.w	8006492 <_scanf_float+0x28e>
 8006288:	2501      	movs	r5, #1
 800628a:	4628      	mov	r0, r5
 800628c:	b007      	add	sp, #28
 800628e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006292:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006296:	2a0d      	cmp	r2, #13
 8006298:	d8e6      	bhi.n	8006268 <_scanf_float+0x64>
 800629a:	a101      	add	r1, pc, #4	; (adr r1, 80062a0 <_scanf_float+0x9c>)
 800629c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80062a0:	080063df 	.word	0x080063df
 80062a4:	08006269 	.word	0x08006269
 80062a8:	08006269 	.word	0x08006269
 80062ac:	08006269 	.word	0x08006269
 80062b0:	0800643f 	.word	0x0800643f
 80062b4:	08006417 	.word	0x08006417
 80062b8:	08006269 	.word	0x08006269
 80062bc:	08006269 	.word	0x08006269
 80062c0:	080063ed 	.word	0x080063ed
 80062c4:	08006269 	.word	0x08006269
 80062c8:	08006269 	.word	0x08006269
 80062cc:	08006269 	.word	0x08006269
 80062d0:	08006269 	.word	0x08006269
 80062d4:	080063a5 	.word	0x080063a5
 80062d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80062dc:	e7db      	b.n	8006296 <_scanf_float+0x92>
 80062de:	290e      	cmp	r1, #14
 80062e0:	d8c2      	bhi.n	8006268 <_scanf_float+0x64>
 80062e2:	a001      	add	r0, pc, #4	; (adr r0, 80062e8 <_scanf_float+0xe4>)
 80062e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80062e8:	08006397 	.word	0x08006397
 80062ec:	08006269 	.word	0x08006269
 80062f0:	08006397 	.word	0x08006397
 80062f4:	0800642b 	.word	0x0800642b
 80062f8:	08006269 	.word	0x08006269
 80062fc:	08006345 	.word	0x08006345
 8006300:	08006381 	.word	0x08006381
 8006304:	08006381 	.word	0x08006381
 8006308:	08006381 	.word	0x08006381
 800630c:	08006381 	.word	0x08006381
 8006310:	08006381 	.word	0x08006381
 8006314:	08006381 	.word	0x08006381
 8006318:	08006381 	.word	0x08006381
 800631c:	08006381 	.word	0x08006381
 8006320:	08006381 	.word	0x08006381
 8006324:	2b6e      	cmp	r3, #110	; 0x6e
 8006326:	d809      	bhi.n	800633c <_scanf_float+0x138>
 8006328:	2b60      	cmp	r3, #96	; 0x60
 800632a:	d8b2      	bhi.n	8006292 <_scanf_float+0x8e>
 800632c:	2b54      	cmp	r3, #84	; 0x54
 800632e:	d077      	beq.n	8006420 <_scanf_float+0x21c>
 8006330:	2b59      	cmp	r3, #89	; 0x59
 8006332:	d199      	bne.n	8006268 <_scanf_float+0x64>
 8006334:	2d07      	cmp	r5, #7
 8006336:	d197      	bne.n	8006268 <_scanf_float+0x64>
 8006338:	2508      	movs	r5, #8
 800633a:	e029      	b.n	8006390 <_scanf_float+0x18c>
 800633c:	2b74      	cmp	r3, #116	; 0x74
 800633e:	d06f      	beq.n	8006420 <_scanf_float+0x21c>
 8006340:	2b79      	cmp	r3, #121	; 0x79
 8006342:	e7f6      	b.n	8006332 <_scanf_float+0x12e>
 8006344:	6821      	ldr	r1, [r4, #0]
 8006346:	05c8      	lsls	r0, r1, #23
 8006348:	d51a      	bpl.n	8006380 <_scanf_float+0x17c>
 800634a:	9b02      	ldr	r3, [sp, #8]
 800634c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006350:	6021      	str	r1, [r4, #0]
 8006352:	f109 0901 	add.w	r9, r9, #1
 8006356:	b11b      	cbz	r3, 8006360 <_scanf_float+0x15c>
 8006358:	3b01      	subs	r3, #1
 800635a:	3201      	adds	r2, #1
 800635c:	9302      	str	r3, [sp, #8]
 800635e:	60a2      	str	r2, [r4, #8]
 8006360:	68a3      	ldr	r3, [r4, #8]
 8006362:	3b01      	subs	r3, #1
 8006364:	60a3      	str	r3, [r4, #8]
 8006366:	6923      	ldr	r3, [r4, #16]
 8006368:	3301      	adds	r3, #1
 800636a:	6123      	str	r3, [r4, #16]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3b01      	subs	r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	607b      	str	r3, [r7, #4]
 8006374:	f340 8084 	ble.w	8006480 <_scanf_float+0x27c>
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	3301      	adds	r3, #1
 800637c:	603b      	str	r3, [r7, #0]
 800637e:	e766      	b.n	800624e <_scanf_float+0x4a>
 8006380:	eb1a 0f05 	cmn.w	sl, r5
 8006384:	f47f af70 	bne.w	8006268 <_scanf_float+0x64>
 8006388:	6822      	ldr	r2, [r4, #0]
 800638a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800638e:	6022      	str	r2, [r4, #0]
 8006390:	f806 3b01 	strb.w	r3, [r6], #1
 8006394:	e7e4      	b.n	8006360 <_scanf_float+0x15c>
 8006396:	6822      	ldr	r2, [r4, #0]
 8006398:	0610      	lsls	r0, r2, #24
 800639a:	f57f af65 	bpl.w	8006268 <_scanf_float+0x64>
 800639e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063a2:	e7f4      	b.n	800638e <_scanf_float+0x18a>
 80063a4:	f1ba 0f00 	cmp.w	sl, #0
 80063a8:	d10e      	bne.n	80063c8 <_scanf_float+0x1c4>
 80063aa:	f1b9 0f00 	cmp.w	r9, #0
 80063ae:	d10e      	bne.n	80063ce <_scanf_float+0x1ca>
 80063b0:	6822      	ldr	r2, [r4, #0]
 80063b2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80063b6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80063ba:	d108      	bne.n	80063ce <_scanf_float+0x1ca>
 80063bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80063c0:	f04f 0a01 	mov.w	sl, #1
 80063c4:	6022      	str	r2, [r4, #0]
 80063c6:	e7e3      	b.n	8006390 <_scanf_float+0x18c>
 80063c8:	f1ba 0f02 	cmp.w	sl, #2
 80063cc:	d055      	beq.n	800647a <_scanf_float+0x276>
 80063ce:	2d01      	cmp	r5, #1
 80063d0:	d002      	beq.n	80063d8 <_scanf_float+0x1d4>
 80063d2:	2d04      	cmp	r5, #4
 80063d4:	f47f af48 	bne.w	8006268 <_scanf_float+0x64>
 80063d8:	3501      	adds	r5, #1
 80063da:	b2ed      	uxtb	r5, r5
 80063dc:	e7d8      	b.n	8006390 <_scanf_float+0x18c>
 80063de:	f1ba 0f01 	cmp.w	sl, #1
 80063e2:	f47f af41 	bne.w	8006268 <_scanf_float+0x64>
 80063e6:	f04f 0a02 	mov.w	sl, #2
 80063ea:	e7d1      	b.n	8006390 <_scanf_float+0x18c>
 80063ec:	b97d      	cbnz	r5, 800640e <_scanf_float+0x20a>
 80063ee:	f1b9 0f00 	cmp.w	r9, #0
 80063f2:	f47f af3c 	bne.w	800626e <_scanf_float+0x6a>
 80063f6:	6822      	ldr	r2, [r4, #0]
 80063f8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80063fc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006400:	f47f af39 	bne.w	8006276 <_scanf_float+0x72>
 8006404:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006408:	2501      	movs	r5, #1
 800640a:	6022      	str	r2, [r4, #0]
 800640c:	e7c0      	b.n	8006390 <_scanf_float+0x18c>
 800640e:	2d03      	cmp	r5, #3
 8006410:	d0e2      	beq.n	80063d8 <_scanf_float+0x1d4>
 8006412:	2d05      	cmp	r5, #5
 8006414:	e7de      	b.n	80063d4 <_scanf_float+0x1d0>
 8006416:	2d02      	cmp	r5, #2
 8006418:	f47f af26 	bne.w	8006268 <_scanf_float+0x64>
 800641c:	2503      	movs	r5, #3
 800641e:	e7b7      	b.n	8006390 <_scanf_float+0x18c>
 8006420:	2d06      	cmp	r5, #6
 8006422:	f47f af21 	bne.w	8006268 <_scanf_float+0x64>
 8006426:	2507      	movs	r5, #7
 8006428:	e7b2      	b.n	8006390 <_scanf_float+0x18c>
 800642a:	6822      	ldr	r2, [r4, #0]
 800642c:	0591      	lsls	r1, r2, #22
 800642e:	f57f af1b 	bpl.w	8006268 <_scanf_float+0x64>
 8006432:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006436:	6022      	str	r2, [r4, #0]
 8006438:	f8cd 9004 	str.w	r9, [sp, #4]
 800643c:	e7a8      	b.n	8006390 <_scanf_float+0x18c>
 800643e:	6822      	ldr	r2, [r4, #0]
 8006440:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006444:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006448:	d006      	beq.n	8006458 <_scanf_float+0x254>
 800644a:	0550      	lsls	r0, r2, #21
 800644c:	f57f af0c 	bpl.w	8006268 <_scanf_float+0x64>
 8006450:	f1b9 0f00 	cmp.w	r9, #0
 8006454:	f43f af0f 	beq.w	8006276 <_scanf_float+0x72>
 8006458:	0591      	lsls	r1, r2, #22
 800645a:	bf58      	it	pl
 800645c:	9901      	ldrpl	r1, [sp, #4]
 800645e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006462:	bf58      	it	pl
 8006464:	eba9 0101 	subpl.w	r1, r9, r1
 8006468:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800646c:	f04f 0900 	mov.w	r9, #0
 8006470:	bf58      	it	pl
 8006472:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006476:	6022      	str	r2, [r4, #0]
 8006478:	e78a      	b.n	8006390 <_scanf_float+0x18c>
 800647a:	f04f 0a03 	mov.w	sl, #3
 800647e:	e787      	b.n	8006390 <_scanf_float+0x18c>
 8006480:	4639      	mov	r1, r7
 8006482:	4640      	mov	r0, r8
 8006484:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006488:	4798      	blx	r3
 800648a:	2800      	cmp	r0, #0
 800648c:	f43f aedf 	beq.w	800624e <_scanf_float+0x4a>
 8006490:	e6ea      	b.n	8006268 <_scanf_float+0x64>
 8006492:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006496:	463a      	mov	r2, r7
 8006498:	4640      	mov	r0, r8
 800649a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800649e:	4798      	blx	r3
 80064a0:	6923      	ldr	r3, [r4, #16]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	6123      	str	r3, [r4, #16]
 80064a6:	e6ec      	b.n	8006282 <_scanf_float+0x7e>
 80064a8:	1e6b      	subs	r3, r5, #1
 80064aa:	2b06      	cmp	r3, #6
 80064ac:	d825      	bhi.n	80064fa <_scanf_float+0x2f6>
 80064ae:	2d02      	cmp	r5, #2
 80064b0:	d836      	bhi.n	8006520 <_scanf_float+0x31c>
 80064b2:	455e      	cmp	r6, fp
 80064b4:	f67f aee8 	bls.w	8006288 <_scanf_float+0x84>
 80064b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064bc:	463a      	mov	r2, r7
 80064be:	4640      	mov	r0, r8
 80064c0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80064c4:	4798      	blx	r3
 80064c6:	6923      	ldr	r3, [r4, #16]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	6123      	str	r3, [r4, #16]
 80064cc:	e7f1      	b.n	80064b2 <_scanf_float+0x2ae>
 80064ce:	9802      	ldr	r0, [sp, #8]
 80064d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064d4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80064d8:	463a      	mov	r2, r7
 80064da:	9002      	str	r0, [sp, #8]
 80064dc:	4640      	mov	r0, r8
 80064de:	4798      	blx	r3
 80064e0:	6923      	ldr	r3, [r4, #16]
 80064e2:	3b01      	subs	r3, #1
 80064e4:	6123      	str	r3, [r4, #16]
 80064e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064ea:	fa5f fa8a 	uxtb.w	sl, sl
 80064ee:	f1ba 0f02 	cmp.w	sl, #2
 80064f2:	d1ec      	bne.n	80064ce <_scanf_float+0x2ca>
 80064f4:	3d03      	subs	r5, #3
 80064f6:	b2ed      	uxtb	r5, r5
 80064f8:	1b76      	subs	r6, r6, r5
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	05da      	lsls	r2, r3, #23
 80064fe:	d52f      	bpl.n	8006560 <_scanf_float+0x35c>
 8006500:	055b      	lsls	r3, r3, #21
 8006502:	d510      	bpl.n	8006526 <_scanf_float+0x322>
 8006504:	455e      	cmp	r6, fp
 8006506:	f67f aebf 	bls.w	8006288 <_scanf_float+0x84>
 800650a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800650e:	463a      	mov	r2, r7
 8006510:	4640      	mov	r0, r8
 8006512:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006516:	4798      	blx	r3
 8006518:	6923      	ldr	r3, [r4, #16]
 800651a:	3b01      	subs	r3, #1
 800651c:	6123      	str	r3, [r4, #16]
 800651e:	e7f1      	b.n	8006504 <_scanf_float+0x300>
 8006520:	46aa      	mov	sl, r5
 8006522:	9602      	str	r6, [sp, #8]
 8006524:	e7df      	b.n	80064e6 <_scanf_float+0x2e2>
 8006526:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800652a:	6923      	ldr	r3, [r4, #16]
 800652c:	2965      	cmp	r1, #101	; 0x65
 800652e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006532:	f106 35ff 	add.w	r5, r6, #4294967295
 8006536:	6123      	str	r3, [r4, #16]
 8006538:	d00c      	beq.n	8006554 <_scanf_float+0x350>
 800653a:	2945      	cmp	r1, #69	; 0x45
 800653c:	d00a      	beq.n	8006554 <_scanf_float+0x350>
 800653e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006542:	463a      	mov	r2, r7
 8006544:	4640      	mov	r0, r8
 8006546:	4798      	blx	r3
 8006548:	6923      	ldr	r3, [r4, #16]
 800654a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800654e:	3b01      	subs	r3, #1
 8006550:	1eb5      	subs	r5, r6, #2
 8006552:	6123      	str	r3, [r4, #16]
 8006554:	463a      	mov	r2, r7
 8006556:	4640      	mov	r0, r8
 8006558:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800655c:	4798      	blx	r3
 800655e:	462e      	mov	r6, r5
 8006560:	6825      	ldr	r5, [r4, #0]
 8006562:	f015 0510 	ands.w	r5, r5, #16
 8006566:	d155      	bne.n	8006614 <_scanf_float+0x410>
 8006568:	7035      	strb	r5, [r6, #0]
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006574:	d11b      	bne.n	80065ae <_scanf_float+0x3aa>
 8006576:	9b01      	ldr	r3, [sp, #4]
 8006578:	454b      	cmp	r3, r9
 800657a:	eba3 0209 	sub.w	r2, r3, r9
 800657e:	d123      	bne.n	80065c8 <_scanf_float+0x3c4>
 8006580:	2200      	movs	r2, #0
 8006582:	4659      	mov	r1, fp
 8006584:	4640      	mov	r0, r8
 8006586:	f000 fe7b 	bl	8007280 <_strtod_r>
 800658a:	6822      	ldr	r2, [r4, #0]
 800658c:	9b03      	ldr	r3, [sp, #12]
 800658e:	f012 0f02 	tst.w	r2, #2
 8006592:	4606      	mov	r6, r0
 8006594:	460f      	mov	r7, r1
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	d021      	beq.n	80065de <_scanf_float+0x3da>
 800659a:	1d1a      	adds	r2, r3, #4
 800659c:	9903      	ldr	r1, [sp, #12]
 800659e:	600a      	str	r2, [r1, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	e9c3 6700 	strd	r6, r7, [r3]
 80065a6:	68e3      	ldr	r3, [r4, #12]
 80065a8:	3301      	adds	r3, #1
 80065aa:	60e3      	str	r3, [r4, #12]
 80065ac:	e66d      	b.n	800628a <_scanf_float+0x86>
 80065ae:	9b04      	ldr	r3, [sp, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0e5      	beq.n	8006580 <_scanf_float+0x37c>
 80065b4:	9905      	ldr	r1, [sp, #20]
 80065b6:	230a      	movs	r3, #10
 80065b8:	462a      	mov	r2, r5
 80065ba:	4640      	mov	r0, r8
 80065bc:	3101      	adds	r1, #1
 80065be:	f000 fee1 	bl	8007384 <_strtol_r>
 80065c2:	9b04      	ldr	r3, [sp, #16]
 80065c4:	9e05      	ldr	r6, [sp, #20]
 80065c6:	1ac2      	subs	r2, r0, r3
 80065c8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80065cc:	429e      	cmp	r6, r3
 80065ce:	bf28      	it	cs
 80065d0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80065d4:	4630      	mov	r0, r6
 80065d6:	4910      	ldr	r1, [pc, #64]	; (8006618 <_scanf_float+0x414>)
 80065d8:	f000 f826 	bl	8006628 <siprintf>
 80065dc:	e7d0      	b.n	8006580 <_scanf_float+0x37c>
 80065de:	f012 0f04 	tst.w	r2, #4
 80065e2:	f103 0204 	add.w	r2, r3, #4
 80065e6:	d1d9      	bne.n	800659c <_scanf_float+0x398>
 80065e8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80065ec:	f8cc 2000 	str.w	r2, [ip]
 80065f0:	f8d3 8000 	ldr.w	r8, [r3]
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	f7fc fce6 	bl	8002fc8 <__aeabi_dcmpun>
 80065fc:	b128      	cbz	r0, 800660a <_scanf_float+0x406>
 80065fe:	4807      	ldr	r0, [pc, #28]	; (800661c <_scanf_float+0x418>)
 8006600:	f000 f80e 	bl	8006620 <nanf>
 8006604:	f8c8 0000 	str.w	r0, [r8]
 8006608:	e7cd      	b.n	80065a6 <_scanf_float+0x3a2>
 800660a:	4630      	mov	r0, r6
 800660c:	4639      	mov	r1, r7
 800660e:	f7fc fd39 	bl	8003084 <__aeabi_d2f>
 8006612:	e7f7      	b.n	8006604 <_scanf_float+0x400>
 8006614:	2500      	movs	r5, #0
 8006616:	e638      	b.n	800628a <_scanf_float+0x86>
 8006618:	0801bbf4 	.word	0x0801bbf4
 800661c:	0801bb6e 	.word	0x0801bb6e

08006620 <nanf>:
 8006620:	4800      	ldr	r0, [pc, #0]	; (8006624 <nanf+0x4>)
 8006622:	4770      	bx	lr
 8006624:	7fc00000 	.word	0x7fc00000

08006628 <siprintf>:
 8006628:	b40e      	push	{r1, r2, r3}
 800662a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800662e:	b500      	push	{lr}
 8006630:	b09c      	sub	sp, #112	; 0x70
 8006632:	ab1d      	add	r3, sp, #116	; 0x74
 8006634:	9002      	str	r0, [sp, #8]
 8006636:	9006      	str	r0, [sp, #24]
 8006638:	9107      	str	r1, [sp, #28]
 800663a:	9104      	str	r1, [sp, #16]
 800663c:	4808      	ldr	r0, [pc, #32]	; (8006660 <siprintf+0x38>)
 800663e:	4909      	ldr	r1, [pc, #36]	; (8006664 <siprintf+0x3c>)
 8006640:	f853 2b04 	ldr.w	r2, [r3], #4
 8006644:	9105      	str	r1, [sp, #20]
 8006646:	6800      	ldr	r0, [r0, #0]
 8006648:	a902      	add	r1, sp, #8
 800664a:	9301      	str	r3, [sp, #4]
 800664c:	f002 fec6 	bl	80093dc <_svfiprintf_r>
 8006650:	2200      	movs	r2, #0
 8006652:	9b02      	ldr	r3, [sp, #8]
 8006654:	701a      	strb	r2, [r3, #0]
 8006656:	b01c      	add	sp, #112	; 0x70
 8006658:	f85d eb04 	ldr.w	lr, [sp], #4
 800665c:	b003      	add	sp, #12
 800665e:	4770      	bx	lr
 8006660:	20000010 	.word	0x20000010
 8006664:	ffff0208 	.word	0xffff0208

08006668 <sulp>:
 8006668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800666c:	460f      	mov	r7, r1
 800666e:	4690      	mov	r8, r2
 8006670:	f002 fc20 	bl	8008eb4 <__ulp>
 8006674:	4604      	mov	r4, r0
 8006676:	460d      	mov	r5, r1
 8006678:	f1b8 0f00 	cmp.w	r8, #0
 800667c:	d011      	beq.n	80066a2 <sulp+0x3a>
 800667e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006682:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006686:	2b00      	cmp	r3, #0
 8006688:	dd0b      	ble.n	80066a2 <sulp+0x3a>
 800668a:	2400      	movs	r4, #0
 800668c:	051b      	lsls	r3, r3, #20
 800668e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006692:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006696:	4622      	mov	r2, r4
 8006698:	462b      	mov	r3, r5
 800669a:	f7fc f9fb 	bl	8002a94 <__aeabi_dmul>
 800669e:	4604      	mov	r4, r0
 80066a0:	460d      	mov	r5, r1
 80066a2:	4620      	mov	r0, r4
 80066a4:	4629      	mov	r1, r5
 80066a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066aa:	0000      	movs	r0, r0
 80066ac:	0000      	movs	r0, r0
	...

080066b0 <_strtod_l>:
 80066b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b4:	469b      	mov	fp, r3
 80066b6:	2300      	movs	r3, #0
 80066b8:	b09f      	sub	sp, #124	; 0x7c
 80066ba:	931a      	str	r3, [sp, #104]	; 0x68
 80066bc:	4b9e      	ldr	r3, [pc, #632]	; (8006938 <_strtod_l+0x288>)
 80066be:	4682      	mov	sl, r0
 80066c0:	681f      	ldr	r7, [r3, #0]
 80066c2:	460e      	mov	r6, r1
 80066c4:	4638      	mov	r0, r7
 80066c6:	9215      	str	r2, [sp, #84]	; 0x54
 80066c8:	f7fc f820 	bl	800270c <strlen>
 80066cc:	f04f 0800 	mov.w	r8, #0
 80066d0:	4604      	mov	r4, r0
 80066d2:	f04f 0900 	mov.w	r9, #0
 80066d6:	9619      	str	r6, [sp, #100]	; 0x64
 80066d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066da:	781a      	ldrb	r2, [r3, #0]
 80066dc:	2a2b      	cmp	r2, #43	; 0x2b
 80066de:	d04c      	beq.n	800677a <_strtod_l+0xca>
 80066e0:	d83a      	bhi.n	8006758 <_strtod_l+0xa8>
 80066e2:	2a0d      	cmp	r2, #13
 80066e4:	d833      	bhi.n	800674e <_strtod_l+0x9e>
 80066e6:	2a08      	cmp	r2, #8
 80066e8:	d833      	bhi.n	8006752 <_strtod_l+0xa2>
 80066ea:	2a00      	cmp	r2, #0
 80066ec:	d03d      	beq.n	800676a <_strtod_l+0xba>
 80066ee:	2300      	movs	r3, #0
 80066f0:	930a      	str	r3, [sp, #40]	; 0x28
 80066f2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80066f4:	782b      	ldrb	r3, [r5, #0]
 80066f6:	2b30      	cmp	r3, #48	; 0x30
 80066f8:	f040 80aa 	bne.w	8006850 <_strtod_l+0x1a0>
 80066fc:	786b      	ldrb	r3, [r5, #1]
 80066fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006702:	2b58      	cmp	r3, #88	; 0x58
 8006704:	d166      	bne.n	80067d4 <_strtod_l+0x124>
 8006706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006708:	4650      	mov	r0, sl
 800670a:	9301      	str	r3, [sp, #4]
 800670c:	ab1a      	add	r3, sp, #104	; 0x68
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	4a8a      	ldr	r2, [pc, #552]	; (800693c <_strtod_l+0x28c>)
 8006712:	f8cd b008 	str.w	fp, [sp, #8]
 8006716:	ab1b      	add	r3, sp, #108	; 0x6c
 8006718:	a919      	add	r1, sp, #100	; 0x64
 800671a:	f001 fd23 	bl	8008164 <__gethex>
 800671e:	f010 0607 	ands.w	r6, r0, #7
 8006722:	4604      	mov	r4, r0
 8006724:	d005      	beq.n	8006732 <_strtod_l+0x82>
 8006726:	2e06      	cmp	r6, #6
 8006728:	d129      	bne.n	800677e <_strtod_l+0xce>
 800672a:	2300      	movs	r3, #0
 800672c:	3501      	adds	r5, #1
 800672e:	9519      	str	r5, [sp, #100]	; 0x64
 8006730:	930a      	str	r3, [sp, #40]	; 0x28
 8006732:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006734:	2b00      	cmp	r3, #0
 8006736:	f040 858a 	bne.w	800724e <_strtod_l+0xb9e>
 800673a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800673c:	b1d3      	cbz	r3, 8006774 <_strtod_l+0xc4>
 800673e:	4642      	mov	r2, r8
 8006740:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006744:	4610      	mov	r0, r2
 8006746:	4619      	mov	r1, r3
 8006748:	b01f      	add	sp, #124	; 0x7c
 800674a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674e:	2a20      	cmp	r2, #32
 8006750:	d1cd      	bne.n	80066ee <_strtod_l+0x3e>
 8006752:	3301      	adds	r3, #1
 8006754:	9319      	str	r3, [sp, #100]	; 0x64
 8006756:	e7bf      	b.n	80066d8 <_strtod_l+0x28>
 8006758:	2a2d      	cmp	r2, #45	; 0x2d
 800675a:	d1c8      	bne.n	80066ee <_strtod_l+0x3e>
 800675c:	2201      	movs	r2, #1
 800675e:	920a      	str	r2, [sp, #40]	; 0x28
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	9219      	str	r2, [sp, #100]	; 0x64
 8006764:	785b      	ldrb	r3, [r3, #1]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1c3      	bne.n	80066f2 <_strtod_l+0x42>
 800676a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800676c:	9619      	str	r6, [sp, #100]	; 0x64
 800676e:	2b00      	cmp	r3, #0
 8006770:	f040 856b 	bne.w	800724a <_strtod_l+0xb9a>
 8006774:	4642      	mov	r2, r8
 8006776:	464b      	mov	r3, r9
 8006778:	e7e4      	b.n	8006744 <_strtod_l+0x94>
 800677a:	2200      	movs	r2, #0
 800677c:	e7ef      	b.n	800675e <_strtod_l+0xae>
 800677e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006780:	b13a      	cbz	r2, 8006792 <_strtod_l+0xe2>
 8006782:	2135      	movs	r1, #53	; 0x35
 8006784:	a81c      	add	r0, sp, #112	; 0x70
 8006786:	f002 fc99 	bl	80090bc <__copybits>
 800678a:	4650      	mov	r0, sl
 800678c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800678e:	f002 f861 	bl	8008854 <_Bfree>
 8006792:	3e01      	subs	r6, #1
 8006794:	2e04      	cmp	r6, #4
 8006796:	d806      	bhi.n	80067a6 <_strtod_l+0xf6>
 8006798:	e8df f006 	tbb	[pc, r6]
 800679c:	1714030a 	.word	0x1714030a
 80067a0:	0a          	.byte	0x0a
 80067a1:	00          	.byte	0x00
 80067a2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80067a6:	0721      	lsls	r1, r4, #28
 80067a8:	d5c3      	bpl.n	8006732 <_strtod_l+0x82>
 80067aa:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80067ae:	e7c0      	b.n	8006732 <_strtod_l+0x82>
 80067b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80067b2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80067b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80067ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80067be:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80067c2:	e7f0      	b.n	80067a6 <_strtod_l+0xf6>
 80067c4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006940 <_strtod_l+0x290>
 80067c8:	e7ed      	b.n	80067a6 <_strtod_l+0xf6>
 80067ca:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80067ce:	f04f 38ff 	mov.w	r8, #4294967295
 80067d2:	e7e8      	b.n	80067a6 <_strtod_l+0xf6>
 80067d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067d6:	1c5a      	adds	r2, r3, #1
 80067d8:	9219      	str	r2, [sp, #100]	; 0x64
 80067da:	785b      	ldrb	r3, [r3, #1]
 80067dc:	2b30      	cmp	r3, #48	; 0x30
 80067de:	d0f9      	beq.n	80067d4 <_strtod_l+0x124>
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0a6      	beq.n	8006732 <_strtod_l+0x82>
 80067e4:	2301      	movs	r3, #1
 80067e6:	9307      	str	r3, [sp, #28]
 80067e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067ea:	220a      	movs	r2, #10
 80067ec:	9308      	str	r3, [sp, #32]
 80067ee:	2300      	movs	r3, #0
 80067f0:	469b      	mov	fp, r3
 80067f2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80067f6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80067f8:	7805      	ldrb	r5, [r0, #0]
 80067fa:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80067fe:	b2d9      	uxtb	r1, r3
 8006800:	2909      	cmp	r1, #9
 8006802:	d927      	bls.n	8006854 <_strtod_l+0x1a4>
 8006804:	4622      	mov	r2, r4
 8006806:	4639      	mov	r1, r7
 8006808:	f002 fefe 	bl	8009608 <strncmp>
 800680c:	2800      	cmp	r0, #0
 800680e:	d033      	beq.n	8006878 <_strtod_l+0x1c8>
 8006810:	2000      	movs	r0, #0
 8006812:	462a      	mov	r2, r5
 8006814:	465c      	mov	r4, fp
 8006816:	4603      	mov	r3, r0
 8006818:	9004      	str	r0, [sp, #16]
 800681a:	2a65      	cmp	r2, #101	; 0x65
 800681c:	d001      	beq.n	8006822 <_strtod_l+0x172>
 800681e:	2a45      	cmp	r2, #69	; 0x45
 8006820:	d114      	bne.n	800684c <_strtod_l+0x19c>
 8006822:	b91c      	cbnz	r4, 800682c <_strtod_l+0x17c>
 8006824:	9a07      	ldr	r2, [sp, #28]
 8006826:	4302      	orrs	r2, r0
 8006828:	d09f      	beq.n	800676a <_strtod_l+0xba>
 800682a:	2400      	movs	r4, #0
 800682c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800682e:	1c72      	adds	r2, r6, #1
 8006830:	9219      	str	r2, [sp, #100]	; 0x64
 8006832:	7872      	ldrb	r2, [r6, #1]
 8006834:	2a2b      	cmp	r2, #43	; 0x2b
 8006836:	d079      	beq.n	800692c <_strtod_l+0x27c>
 8006838:	2a2d      	cmp	r2, #45	; 0x2d
 800683a:	f000 8083 	beq.w	8006944 <_strtod_l+0x294>
 800683e:	2700      	movs	r7, #0
 8006840:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006844:	2909      	cmp	r1, #9
 8006846:	f240 8083 	bls.w	8006950 <_strtod_l+0x2a0>
 800684a:	9619      	str	r6, [sp, #100]	; 0x64
 800684c:	2500      	movs	r5, #0
 800684e:	e09f      	b.n	8006990 <_strtod_l+0x2e0>
 8006850:	2300      	movs	r3, #0
 8006852:	e7c8      	b.n	80067e6 <_strtod_l+0x136>
 8006854:	f1bb 0f08 	cmp.w	fp, #8
 8006858:	bfd5      	itete	le
 800685a:	9906      	ldrle	r1, [sp, #24]
 800685c:	9905      	ldrgt	r1, [sp, #20]
 800685e:	fb02 3301 	mlale	r3, r2, r1, r3
 8006862:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006866:	f100 0001 	add.w	r0, r0, #1
 800686a:	bfd4      	ite	le
 800686c:	9306      	strle	r3, [sp, #24]
 800686e:	9305      	strgt	r3, [sp, #20]
 8006870:	f10b 0b01 	add.w	fp, fp, #1
 8006874:	9019      	str	r0, [sp, #100]	; 0x64
 8006876:	e7be      	b.n	80067f6 <_strtod_l+0x146>
 8006878:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800687a:	191a      	adds	r2, r3, r4
 800687c:	9219      	str	r2, [sp, #100]	; 0x64
 800687e:	5d1a      	ldrb	r2, [r3, r4]
 8006880:	f1bb 0f00 	cmp.w	fp, #0
 8006884:	d036      	beq.n	80068f4 <_strtod_l+0x244>
 8006886:	465c      	mov	r4, fp
 8006888:	9004      	str	r0, [sp, #16]
 800688a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800688e:	2b09      	cmp	r3, #9
 8006890:	d912      	bls.n	80068b8 <_strtod_l+0x208>
 8006892:	2301      	movs	r3, #1
 8006894:	e7c1      	b.n	800681a <_strtod_l+0x16a>
 8006896:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006898:	3001      	adds	r0, #1
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	9219      	str	r2, [sp, #100]	; 0x64
 800689e:	785a      	ldrb	r2, [r3, #1]
 80068a0:	2a30      	cmp	r2, #48	; 0x30
 80068a2:	d0f8      	beq.n	8006896 <_strtod_l+0x1e6>
 80068a4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	f200 84d5 	bhi.w	8007258 <_strtod_l+0xba8>
 80068ae:	9004      	str	r0, [sp, #16]
 80068b0:	2000      	movs	r0, #0
 80068b2:	4604      	mov	r4, r0
 80068b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068b6:	9308      	str	r3, [sp, #32]
 80068b8:	3a30      	subs	r2, #48	; 0x30
 80068ba:	f100 0301 	add.w	r3, r0, #1
 80068be:	d013      	beq.n	80068e8 <_strtod_l+0x238>
 80068c0:	9904      	ldr	r1, [sp, #16]
 80068c2:	1905      	adds	r5, r0, r4
 80068c4:	4419      	add	r1, r3
 80068c6:	9104      	str	r1, [sp, #16]
 80068c8:	4623      	mov	r3, r4
 80068ca:	210a      	movs	r1, #10
 80068cc:	42ab      	cmp	r3, r5
 80068ce:	d113      	bne.n	80068f8 <_strtod_l+0x248>
 80068d0:	1823      	adds	r3, r4, r0
 80068d2:	2b08      	cmp	r3, #8
 80068d4:	f104 0401 	add.w	r4, r4, #1
 80068d8:	4404      	add	r4, r0
 80068da:	dc1b      	bgt.n	8006914 <_strtod_l+0x264>
 80068dc:	230a      	movs	r3, #10
 80068de:	9906      	ldr	r1, [sp, #24]
 80068e0:	fb03 2301 	mla	r3, r3, r1, r2
 80068e4:	9306      	str	r3, [sp, #24]
 80068e6:	2300      	movs	r3, #0
 80068e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80068ea:	4618      	mov	r0, r3
 80068ec:	1c51      	adds	r1, r2, #1
 80068ee:	9119      	str	r1, [sp, #100]	; 0x64
 80068f0:	7852      	ldrb	r2, [r2, #1]
 80068f2:	e7ca      	b.n	800688a <_strtod_l+0x1da>
 80068f4:	4658      	mov	r0, fp
 80068f6:	e7d3      	b.n	80068a0 <_strtod_l+0x1f0>
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	dc04      	bgt.n	8006906 <_strtod_l+0x256>
 80068fc:	9f06      	ldr	r7, [sp, #24]
 80068fe:	434f      	muls	r7, r1
 8006900:	9706      	str	r7, [sp, #24]
 8006902:	3301      	adds	r3, #1
 8006904:	e7e2      	b.n	80068cc <_strtod_l+0x21c>
 8006906:	1c5f      	adds	r7, r3, #1
 8006908:	2f10      	cmp	r7, #16
 800690a:	bfde      	ittt	le
 800690c:	9f05      	ldrle	r7, [sp, #20]
 800690e:	434f      	mulle	r7, r1
 8006910:	9705      	strle	r7, [sp, #20]
 8006912:	e7f6      	b.n	8006902 <_strtod_l+0x252>
 8006914:	2c10      	cmp	r4, #16
 8006916:	bfdf      	itttt	le
 8006918:	230a      	movle	r3, #10
 800691a:	9905      	ldrle	r1, [sp, #20]
 800691c:	fb03 2301 	mlale	r3, r3, r1, r2
 8006920:	9305      	strle	r3, [sp, #20]
 8006922:	e7e0      	b.n	80068e6 <_strtod_l+0x236>
 8006924:	2300      	movs	r3, #0
 8006926:	9304      	str	r3, [sp, #16]
 8006928:	2301      	movs	r3, #1
 800692a:	e77b      	b.n	8006824 <_strtod_l+0x174>
 800692c:	2700      	movs	r7, #0
 800692e:	1cb2      	adds	r2, r6, #2
 8006930:	9219      	str	r2, [sp, #100]	; 0x64
 8006932:	78b2      	ldrb	r2, [r6, #2]
 8006934:	e784      	b.n	8006840 <_strtod_l+0x190>
 8006936:	bf00      	nop
 8006938:	0801be48 	.word	0x0801be48
 800693c:	0801bbfc 	.word	0x0801bbfc
 8006940:	7ff00000 	.word	0x7ff00000
 8006944:	2701      	movs	r7, #1
 8006946:	e7f2      	b.n	800692e <_strtod_l+0x27e>
 8006948:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800694a:	1c51      	adds	r1, r2, #1
 800694c:	9119      	str	r1, [sp, #100]	; 0x64
 800694e:	7852      	ldrb	r2, [r2, #1]
 8006950:	2a30      	cmp	r2, #48	; 0x30
 8006952:	d0f9      	beq.n	8006948 <_strtod_l+0x298>
 8006954:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006958:	2908      	cmp	r1, #8
 800695a:	f63f af77 	bhi.w	800684c <_strtod_l+0x19c>
 800695e:	f04f 0e0a 	mov.w	lr, #10
 8006962:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006966:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006968:	9209      	str	r2, [sp, #36]	; 0x24
 800696a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800696c:	1c51      	adds	r1, r2, #1
 800696e:	9119      	str	r1, [sp, #100]	; 0x64
 8006970:	7852      	ldrb	r2, [r2, #1]
 8006972:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006976:	2d09      	cmp	r5, #9
 8006978:	d935      	bls.n	80069e6 <_strtod_l+0x336>
 800697a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800697c:	1b49      	subs	r1, r1, r5
 800697e:	2908      	cmp	r1, #8
 8006980:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006984:	dc02      	bgt.n	800698c <_strtod_l+0x2dc>
 8006986:	4565      	cmp	r5, ip
 8006988:	bfa8      	it	ge
 800698a:	4665      	movge	r5, ip
 800698c:	b107      	cbz	r7, 8006990 <_strtod_l+0x2e0>
 800698e:	426d      	negs	r5, r5
 8006990:	2c00      	cmp	r4, #0
 8006992:	d14c      	bne.n	8006a2e <_strtod_l+0x37e>
 8006994:	9907      	ldr	r1, [sp, #28]
 8006996:	4301      	orrs	r1, r0
 8006998:	f47f aecb 	bne.w	8006732 <_strtod_l+0x82>
 800699c:	2b00      	cmp	r3, #0
 800699e:	f47f aee4 	bne.w	800676a <_strtod_l+0xba>
 80069a2:	2a69      	cmp	r2, #105	; 0x69
 80069a4:	d026      	beq.n	80069f4 <_strtod_l+0x344>
 80069a6:	dc23      	bgt.n	80069f0 <_strtod_l+0x340>
 80069a8:	2a49      	cmp	r2, #73	; 0x49
 80069aa:	d023      	beq.n	80069f4 <_strtod_l+0x344>
 80069ac:	2a4e      	cmp	r2, #78	; 0x4e
 80069ae:	f47f aedc 	bne.w	800676a <_strtod_l+0xba>
 80069b2:	499d      	ldr	r1, [pc, #628]	; (8006c28 <_strtod_l+0x578>)
 80069b4:	a819      	add	r0, sp, #100	; 0x64
 80069b6:	f001 fe23 	bl	8008600 <__match>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	f43f aed5 	beq.w	800676a <_strtod_l+0xba>
 80069c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b28      	cmp	r3, #40	; 0x28
 80069c6:	d12c      	bne.n	8006a22 <_strtod_l+0x372>
 80069c8:	4998      	ldr	r1, [pc, #608]	; (8006c2c <_strtod_l+0x57c>)
 80069ca:	aa1c      	add	r2, sp, #112	; 0x70
 80069cc:	a819      	add	r0, sp, #100	; 0x64
 80069ce:	f001 fe2b 	bl	8008628 <__hexnan>
 80069d2:	2805      	cmp	r0, #5
 80069d4:	d125      	bne.n	8006a22 <_strtod_l+0x372>
 80069d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80069d8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80069dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80069e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80069e4:	e6a5      	b.n	8006732 <_strtod_l+0x82>
 80069e6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80069ea:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80069ee:	e7bc      	b.n	800696a <_strtod_l+0x2ba>
 80069f0:	2a6e      	cmp	r2, #110	; 0x6e
 80069f2:	e7dc      	b.n	80069ae <_strtod_l+0x2fe>
 80069f4:	498e      	ldr	r1, [pc, #568]	; (8006c30 <_strtod_l+0x580>)
 80069f6:	a819      	add	r0, sp, #100	; 0x64
 80069f8:	f001 fe02 	bl	8008600 <__match>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	f43f aeb4 	beq.w	800676a <_strtod_l+0xba>
 8006a02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a04:	498b      	ldr	r1, [pc, #556]	; (8006c34 <_strtod_l+0x584>)
 8006a06:	3b01      	subs	r3, #1
 8006a08:	a819      	add	r0, sp, #100	; 0x64
 8006a0a:	9319      	str	r3, [sp, #100]	; 0x64
 8006a0c:	f001 fdf8 	bl	8008600 <__match>
 8006a10:	b910      	cbnz	r0, 8006a18 <_strtod_l+0x368>
 8006a12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a14:	3301      	adds	r3, #1
 8006a16:	9319      	str	r3, [sp, #100]	; 0x64
 8006a18:	f04f 0800 	mov.w	r8, #0
 8006a1c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8006c38 <_strtod_l+0x588>
 8006a20:	e687      	b.n	8006732 <_strtod_l+0x82>
 8006a22:	4886      	ldr	r0, [pc, #536]	; (8006c3c <_strtod_l+0x58c>)
 8006a24:	f002 fdda 	bl	80095dc <nan>
 8006a28:	4680      	mov	r8, r0
 8006a2a:	4689      	mov	r9, r1
 8006a2c:	e681      	b.n	8006732 <_strtod_l+0x82>
 8006a2e:	9b04      	ldr	r3, [sp, #16]
 8006a30:	f1bb 0f00 	cmp.w	fp, #0
 8006a34:	bf08      	it	eq
 8006a36:	46a3      	moveq	fp, r4
 8006a38:	1aeb      	subs	r3, r5, r3
 8006a3a:	2c10      	cmp	r4, #16
 8006a3c:	9806      	ldr	r0, [sp, #24]
 8006a3e:	4626      	mov	r6, r4
 8006a40:	9307      	str	r3, [sp, #28]
 8006a42:	bfa8      	it	ge
 8006a44:	2610      	movge	r6, #16
 8006a46:	f7fb ffab 	bl	80029a0 <__aeabi_ui2d>
 8006a4a:	2c09      	cmp	r4, #9
 8006a4c:	4680      	mov	r8, r0
 8006a4e:	4689      	mov	r9, r1
 8006a50:	dd13      	ble.n	8006a7a <_strtod_l+0x3ca>
 8006a52:	4b7b      	ldr	r3, [pc, #492]	; (8006c40 <_strtod_l+0x590>)
 8006a54:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a58:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006a5c:	f7fc f81a 	bl	8002a94 <__aeabi_dmul>
 8006a60:	4680      	mov	r8, r0
 8006a62:	9805      	ldr	r0, [sp, #20]
 8006a64:	4689      	mov	r9, r1
 8006a66:	f7fb ff9b 	bl	80029a0 <__aeabi_ui2d>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4640      	mov	r0, r8
 8006a70:	4649      	mov	r1, r9
 8006a72:	f7fb fe59 	bl	8002728 <__adddf3>
 8006a76:	4680      	mov	r8, r0
 8006a78:	4689      	mov	r9, r1
 8006a7a:	2c0f      	cmp	r4, #15
 8006a7c:	dc36      	bgt.n	8006aec <_strtod_l+0x43c>
 8006a7e:	9b07      	ldr	r3, [sp, #28]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f43f ae56 	beq.w	8006732 <_strtod_l+0x82>
 8006a86:	dd22      	ble.n	8006ace <_strtod_l+0x41e>
 8006a88:	2b16      	cmp	r3, #22
 8006a8a:	dc09      	bgt.n	8006aa0 <_strtod_l+0x3f0>
 8006a8c:	496c      	ldr	r1, [pc, #432]	; (8006c40 <_strtod_l+0x590>)
 8006a8e:	4642      	mov	r2, r8
 8006a90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a94:	464b      	mov	r3, r9
 8006a96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a9a:	f7fb fffb 	bl	8002a94 <__aeabi_dmul>
 8006a9e:	e7c3      	b.n	8006a28 <_strtod_l+0x378>
 8006aa0:	9a07      	ldr	r2, [sp, #28]
 8006aa2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	db20      	blt.n	8006aec <_strtod_l+0x43c>
 8006aaa:	4d65      	ldr	r5, [pc, #404]	; (8006c40 <_strtod_l+0x590>)
 8006aac:	f1c4 040f 	rsb	r4, r4, #15
 8006ab0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006ab4:	4642      	mov	r2, r8
 8006ab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aba:	464b      	mov	r3, r9
 8006abc:	f7fb ffea 	bl	8002a94 <__aeabi_dmul>
 8006ac0:	9b07      	ldr	r3, [sp, #28]
 8006ac2:	1b1c      	subs	r4, r3, r4
 8006ac4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006ac8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006acc:	e7e5      	b.n	8006a9a <_strtod_l+0x3ea>
 8006ace:	9b07      	ldr	r3, [sp, #28]
 8006ad0:	3316      	adds	r3, #22
 8006ad2:	db0b      	blt.n	8006aec <_strtod_l+0x43c>
 8006ad4:	9b04      	ldr	r3, [sp, #16]
 8006ad6:	4640      	mov	r0, r8
 8006ad8:	1b5d      	subs	r5, r3, r5
 8006ada:	4b59      	ldr	r3, [pc, #356]	; (8006c40 <_strtod_l+0x590>)
 8006adc:	4649      	mov	r1, r9
 8006ade:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006ae2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ae6:	f7fc f8ff 	bl	8002ce8 <__aeabi_ddiv>
 8006aea:	e79d      	b.n	8006a28 <_strtod_l+0x378>
 8006aec:	9b07      	ldr	r3, [sp, #28]
 8006aee:	1ba6      	subs	r6, r4, r6
 8006af0:	441e      	add	r6, r3
 8006af2:	2e00      	cmp	r6, #0
 8006af4:	dd74      	ble.n	8006be0 <_strtod_l+0x530>
 8006af6:	f016 030f 	ands.w	r3, r6, #15
 8006afa:	d00a      	beq.n	8006b12 <_strtod_l+0x462>
 8006afc:	4950      	ldr	r1, [pc, #320]	; (8006c40 <_strtod_l+0x590>)
 8006afe:	4642      	mov	r2, r8
 8006b00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b08:	464b      	mov	r3, r9
 8006b0a:	f7fb ffc3 	bl	8002a94 <__aeabi_dmul>
 8006b0e:	4680      	mov	r8, r0
 8006b10:	4689      	mov	r9, r1
 8006b12:	f036 060f 	bics.w	r6, r6, #15
 8006b16:	d052      	beq.n	8006bbe <_strtod_l+0x50e>
 8006b18:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006b1c:	dd27      	ble.n	8006b6e <_strtod_l+0x4be>
 8006b1e:	f04f 0b00 	mov.w	fp, #0
 8006b22:	f8cd b010 	str.w	fp, [sp, #16]
 8006b26:	f8cd b020 	str.w	fp, [sp, #32]
 8006b2a:	f8cd b018 	str.w	fp, [sp, #24]
 8006b2e:	2322      	movs	r3, #34	; 0x22
 8006b30:	f04f 0800 	mov.w	r8, #0
 8006b34:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006c38 <_strtod_l+0x588>
 8006b38:	f8ca 3000 	str.w	r3, [sl]
 8006b3c:	9b08      	ldr	r3, [sp, #32]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f43f adf7 	beq.w	8006732 <_strtod_l+0x82>
 8006b44:	4650      	mov	r0, sl
 8006b46:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006b48:	f001 fe84 	bl	8008854 <_Bfree>
 8006b4c:	4650      	mov	r0, sl
 8006b4e:	9906      	ldr	r1, [sp, #24]
 8006b50:	f001 fe80 	bl	8008854 <_Bfree>
 8006b54:	4650      	mov	r0, sl
 8006b56:	9904      	ldr	r1, [sp, #16]
 8006b58:	f001 fe7c 	bl	8008854 <_Bfree>
 8006b5c:	4650      	mov	r0, sl
 8006b5e:	9908      	ldr	r1, [sp, #32]
 8006b60:	f001 fe78 	bl	8008854 <_Bfree>
 8006b64:	4659      	mov	r1, fp
 8006b66:	4650      	mov	r0, sl
 8006b68:	f001 fe74 	bl	8008854 <_Bfree>
 8006b6c:	e5e1      	b.n	8006732 <_strtod_l+0x82>
 8006b6e:	4b35      	ldr	r3, [pc, #212]	; (8006c44 <_strtod_l+0x594>)
 8006b70:	4640      	mov	r0, r8
 8006b72:	9305      	str	r3, [sp, #20]
 8006b74:	2300      	movs	r3, #0
 8006b76:	4649      	mov	r1, r9
 8006b78:	461f      	mov	r7, r3
 8006b7a:	1136      	asrs	r6, r6, #4
 8006b7c:	2e01      	cmp	r6, #1
 8006b7e:	dc21      	bgt.n	8006bc4 <_strtod_l+0x514>
 8006b80:	b10b      	cbz	r3, 8006b86 <_strtod_l+0x4d6>
 8006b82:	4680      	mov	r8, r0
 8006b84:	4689      	mov	r9, r1
 8006b86:	4b2f      	ldr	r3, [pc, #188]	; (8006c44 <_strtod_l+0x594>)
 8006b88:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006b8c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006b90:	4642      	mov	r2, r8
 8006b92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b96:	464b      	mov	r3, r9
 8006b98:	f7fb ff7c 	bl	8002a94 <__aeabi_dmul>
 8006b9c:	4b26      	ldr	r3, [pc, #152]	; (8006c38 <_strtod_l+0x588>)
 8006b9e:	460a      	mov	r2, r1
 8006ba0:	400b      	ands	r3, r1
 8006ba2:	4929      	ldr	r1, [pc, #164]	; (8006c48 <_strtod_l+0x598>)
 8006ba4:	4680      	mov	r8, r0
 8006ba6:	428b      	cmp	r3, r1
 8006ba8:	d8b9      	bhi.n	8006b1e <_strtod_l+0x46e>
 8006baa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006bae:	428b      	cmp	r3, r1
 8006bb0:	bf86      	itte	hi
 8006bb2:	f04f 38ff 	movhi.w	r8, #4294967295
 8006bb6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006c4c <_strtod_l+0x59c>
 8006bba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	9305      	str	r3, [sp, #20]
 8006bc2:	e07f      	b.n	8006cc4 <_strtod_l+0x614>
 8006bc4:	07f2      	lsls	r2, r6, #31
 8006bc6:	d505      	bpl.n	8006bd4 <_strtod_l+0x524>
 8006bc8:	9b05      	ldr	r3, [sp, #20]
 8006bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bce:	f7fb ff61 	bl	8002a94 <__aeabi_dmul>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	9a05      	ldr	r2, [sp, #20]
 8006bd6:	3701      	adds	r7, #1
 8006bd8:	3208      	adds	r2, #8
 8006bda:	1076      	asrs	r6, r6, #1
 8006bdc:	9205      	str	r2, [sp, #20]
 8006bde:	e7cd      	b.n	8006b7c <_strtod_l+0x4cc>
 8006be0:	d0ed      	beq.n	8006bbe <_strtod_l+0x50e>
 8006be2:	4276      	negs	r6, r6
 8006be4:	f016 020f 	ands.w	r2, r6, #15
 8006be8:	d00a      	beq.n	8006c00 <_strtod_l+0x550>
 8006bea:	4b15      	ldr	r3, [pc, #84]	; (8006c40 <_strtod_l+0x590>)
 8006bec:	4640      	mov	r0, r8
 8006bee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bf2:	4649      	mov	r1, r9
 8006bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf8:	f7fc f876 	bl	8002ce8 <__aeabi_ddiv>
 8006bfc:	4680      	mov	r8, r0
 8006bfe:	4689      	mov	r9, r1
 8006c00:	1136      	asrs	r6, r6, #4
 8006c02:	d0dc      	beq.n	8006bbe <_strtod_l+0x50e>
 8006c04:	2e1f      	cmp	r6, #31
 8006c06:	dd23      	ble.n	8006c50 <_strtod_l+0x5a0>
 8006c08:	f04f 0b00 	mov.w	fp, #0
 8006c0c:	f8cd b010 	str.w	fp, [sp, #16]
 8006c10:	f8cd b020 	str.w	fp, [sp, #32]
 8006c14:	f8cd b018 	str.w	fp, [sp, #24]
 8006c18:	2322      	movs	r3, #34	; 0x22
 8006c1a:	f04f 0800 	mov.w	r8, #0
 8006c1e:	f04f 0900 	mov.w	r9, #0
 8006c22:	f8ca 3000 	str.w	r3, [sl]
 8006c26:	e789      	b.n	8006b3c <_strtod_l+0x48c>
 8006c28:	0801bbcd 	.word	0x0801bbcd
 8006c2c:	0801bc10 	.word	0x0801bc10
 8006c30:	0801bbc5 	.word	0x0801bbc5
 8006c34:	0801bd54 	.word	0x0801bd54
 8006c38:	7ff00000 	.word	0x7ff00000
 8006c3c:	0801bb6e 	.word	0x0801bb6e
 8006c40:	0801bee0 	.word	0x0801bee0
 8006c44:	0801beb8 	.word	0x0801beb8
 8006c48:	7ca00000 	.word	0x7ca00000
 8006c4c:	7fefffff 	.word	0x7fefffff
 8006c50:	f016 0310 	ands.w	r3, r6, #16
 8006c54:	bf18      	it	ne
 8006c56:	236a      	movne	r3, #106	; 0x6a
 8006c58:	4640      	mov	r0, r8
 8006c5a:	9305      	str	r3, [sp, #20]
 8006c5c:	4649      	mov	r1, r9
 8006c5e:	2300      	movs	r3, #0
 8006c60:	4fb0      	ldr	r7, [pc, #704]	; (8006f24 <_strtod_l+0x874>)
 8006c62:	07f2      	lsls	r2, r6, #31
 8006c64:	d504      	bpl.n	8006c70 <_strtod_l+0x5c0>
 8006c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c6a:	f7fb ff13 	bl	8002a94 <__aeabi_dmul>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	1076      	asrs	r6, r6, #1
 8006c72:	f107 0708 	add.w	r7, r7, #8
 8006c76:	d1f4      	bne.n	8006c62 <_strtod_l+0x5b2>
 8006c78:	b10b      	cbz	r3, 8006c7e <_strtod_l+0x5ce>
 8006c7a:	4680      	mov	r8, r0
 8006c7c:	4689      	mov	r9, r1
 8006c7e:	9b05      	ldr	r3, [sp, #20]
 8006c80:	b1c3      	cbz	r3, 8006cb4 <_strtod_l+0x604>
 8006c82:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006c86:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	4649      	mov	r1, r9
 8006c8e:	dd11      	ble.n	8006cb4 <_strtod_l+0x604>
 8006c90:	2b1f      	cmp	r3, #31
 8006c92:	f340 8127 	ble.w	8006ee4 <_strtod_l+0x834>
 8006c96:	2b34      	cmp	r3, #52	; 0x34
 8006c98:	bfd8      	it	le
 8006c9a:	f04f 33ff 	movle.w	r3, #4294967295
 8006c9e:	f04f 0800 	mov.w	r8, #0
 8006ca2:	bfcf      	iteee	gt
 8006ca4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006ca8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006cac:	fa03 f202 	lslle.w	r2, r3, r2
 8006cb0:	ea02 0901 	andle.w	r9, r2, r1
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	4640      	mov	r0, r8
 8006cba:	4649      	mov	r1, r9
 8006cbc:	f7fc f952 	bl	8002f64 <__aeabi_dcmpeq>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d1a1      	bne.n	8006c08 <_strtod_l+0x558>
 8006cc4:	9b06      	ldr	r3, [sp, #24]
 8006cc6:	465a      	mov	r2, fp
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	4650      	mov	r0, sl
 8006ccc:	4623      	mov	r3, r4
 8006cce:	9908      	ldr	r1, [sp, #32]
 8006cd0:	f001 fe28 	bl	8008924 <__s2b>
 8006cd4:	9008      	str	r0, [sp, #32]
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	f43f af21 	beq.w	8006b1e <_strtod_l+0x46e>
 8006cdc:	9b04      	ldr	r3, [sp, #16]
 8006cde:	f04f 0b00 	mov.w	fp, #0
 8006ce2:	1b5d      	subs	r5, r3, r5
 8006ce4:	9b07      	ldr	r3, [sp, #28]
 8006ce6:	f8cd b010 	str.w	fp, [sp, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	bfb4      	ite	lt
 8006cee:	462b      	movlt	r3, r5
 8006cf0:	2300      	movge	r3, #0
 8006cf2:	930e      	str	r3, [sp, #56]	; 0x38
 8006cf4:	9b07      	ldr	r3, [sp, #28]
 8006cf6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006cfa:	9314      	str	r3, [sp, #80]	; 0x50
 8006cfc:	9b08      	ldr	r3, [sp, #32]
 8006cfe:	4650      	mov	r0, sl
 8006d00:	6859      	ldr	r1, [r3, #4]
 8006d02:	f001 fd67 	bl	80087d4 <_Balloc>
 8006d06:	9006      	str	r0, [sp, #24]
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	f43f af10 	beq.w	8006b2e <_strtod_l+0x47e>
 8006d0e:	9b08      	ldr	r3, [sp, #32]
 8006d10:	300c      	adds	r0, #12
 8006d12:	691a      	ldr	r2, [r3, #16]
 8006d14:	f103 010c 	add.w	r1, r3, #12
 8006d18:	3202      	adds	r2, #2
 8006d1a:	0092      	lsls	r2, r2, #2
 8006d1c:	f001 fd4c 	bl	80087b8 <memcpy>
 8006d20:	ab1c      	add	r3, sp, #112	; 0x70
 8006d22:	9301      	str	r3, [sp, #4]
 8006d24:	ab1b      	add	r3, sp, #108	; 0x6c
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	4642      	mov	r2, r8
 8006d2a:	464b      	mov	r3, r9
 8006d2c:	4650      	mov	r0, sl
 8006d2e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8006d32:	f002 f939 	bl	8008fa8 <__d2b>
 8006d36:	901a      	str	r0, [sp, #104]	; 0x68
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	f43f aef8 	beq.w	8006b2e <_strtod_l+0x47e>
 8006d3e:	2101      	movs	r1, #1
 8006d40:	4650      	mov	r0, sl
 8006d42:	f001 fe87 	bl	8008a54 <__i2b>
 8006d46:	4603      	mov	r3, r0
 8006d48:	9004      	str	r0, [sp, #16]
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	f43f aeef 	beq.w	8006b2e <_strtod_l+0x47e>
 8006d50:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006d52:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006d54:	2d00      	cmp	r5, #0
 8006d56:	bfab      	itete	ge
 8006d58:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006d5a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8006d5c:	18ee      	addge	r6, r5, r3
 8006d5e:	1b5c      	sublt	r4, r3, r5
 8006d60:	9b05      	ldr	r3, [sp, #20]
 8006d62:	bfa8      	it	ge
 8006d64:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8006d66:	eba5 0503 	sub.w	r5, r5, r3
 8006d6a:	4415      	add	r5, r2
 8006d6c:	4b6e      	ldr	r3, [pc, #440]	; (8006f28 <_strtod_l+0x878>)
 8006d6e:	f105 35ff 	add.w	r5, r5, #4294967295
 8006d72:	bfb8      	it	lt
 8006d74:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006d76:	429d      	cmp	r5, r3
 8006d78:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006d7c:	f280 80c4 	bge.w	8006f08 <_strtod_l+0x858>
 8006d80:	1b5b      	subs	r3, r3, r5
 8006d82:	2b1f      	cmp	r3, #31
 8006d84:	f04f 0701 	mov.w	r7, #1
 8006d88:	eba2 0203 	sub.w	r2, r2, r3
 8006d8c:	f300 80b1 	bgt.w	8006ef2 <_strtod_l+0x842>
 8006d90:	2500      	movs	r5, #0
 8006d92:	fa07 f303 	lsl.w	r3, r7, r3
 8006d96:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d98:	18b7      	adds	r7, r6, r2
 8006d9a:	9b05      	ldr	r3, [sp, #20]
 8006d9c:	42be      	cmp	r6, r7
 8006d9e:	4414      	add	r4, r2
 8006da0:	441c      	add	r4, r3
 8006da2:	4633      	mov	r3, r6
 8006da4:	bfa8      	it	ge
 8006da6:	463b      	movge	r3, r7
 8006da8:	42a3      	cmp	r3, r4
 8006daa:	bfa8      	it	ge
 8006dac:	4623      	movge	r3, r4
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	bfc2      	ittt	gt
 8006db2:	1aff      	subgt	r7, r7, r3
 8006db4:	1ae4      	subgt	r4, r4, r3
 8006db6:	1af6      	subgt	r6, r6, r3
 8006db8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	dd17      	ble.n	8006dee <_strtod_l+0x73e>
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	4650      	mov	r0, sl
 8006dc2:	9904      	ldr	r1, [sp, #16]
 8006dc4:	f001 ff04 	bl	8008bd0 <__pow5mult>
 8006dc8:	9004      	str	r0, [sp, #16]
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	f43f aeaf 	beq.w	8006b2e <_strtod_l+0x47e>
 8006dd0:	4601      	mov	r1, r0
 8006dd2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006dd4:	4650      	mov	r0, sl
 8006dd6:	f001 fe53 	bl	8008a80 <__multiply>
 8006dda:	9009      	str	r0, [sp, #36]	; 0x24
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	f43f aea6 	beq.w	8006b2e <_strtod_l+0x47e>
 8006de2:	4650      	mov	r0, sl
 8006de4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006de6:	f001 fd35 	bl	8008854 <_Bfree>
 8006dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dec:	931a      	str	r3, [sp, #104]	; 0x68
 8006dee:	2f00      	cmp	r7, #0
 8006df0:	f300 808e 	bgt.w	8006f10 <_strtod_l+0x860>
 8006df4:	9b07      	ldr	r3, [sp, #28]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	dd08      	ble.n	8006e0c <_strtod_l+0x75c>
 8006dfa:	4650      	mov	r0, sl
 8006dfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006dfe:	9906      	ldr	r1, [sp, #24]
 8006e00:	f001 fee6 	bl	8008bd0 <__pow5mult>
 8006e04:	9006      	str	r0, [sp, #24]
 8006e06:	2800      	cmp	r0, #0
 8006e08:	f43f ae91 	beq.w	8006b2e <_strtod_l+0x47e>
 8006e0c:	2c00      	cmp	r4, #0
 8006e0e:	dd08      	ble.n	8006e22 <_strtod_l+0x772>
 8006e10:	4622      	mov	r2, r4
 8006e12:	4650      	mov	r0, sl
 8006e14:	9906      	ldr	r1, [sp, #24]
 8006e16:	f001 ff35 	bl	8008c84 <__lshift>
 8006e1a:	9006      	str	r0, [sp, #24]
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	f43f ae86 	beq.w	8006b2e <_strtod_l+0x47e>
 8006e22:	2e00      	cmp	r6, #0
 8006e24:	dd08      	ble.n	8006e38 <_strtod_l+0x788>
 8006e26:	4632      	mov	r2, r6
 8006e28:	4650      	mov	r0, sl
 8006e2a:	9904      	ldr	r1, [sp, #16]
 8006e2c:	f001 ff2a 	bl	8008c84 <__lshift>
 8006e30:	9004      	str	r0, [sp, #16]
 8006e32:	2800      	cmp	r0, #0
 8006e34:	f43f ae7b 	beq.w	8006b2e <_strtod_l+0x47e>
 8006e38:	4650      	mov	r0, sl
 8006e3a:	9a06      	ldr	r2, [sp, #24]
 8006e3c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006e3e:	f001 ffad 	bl	8008d9c <__mdiff>
 8006e42:	4683      	mov	fp, r0
 8006e44:	2800      	cmp	r0, #0
 8006e46:	f43f ae72 	beq.w	8006b2e <_strtod_l+0x47e>
 8006e4a:	2400      	movs	r4, #0
 8006e4c:	68c3      	ldr	r3, [r0, #12]
 8006e4e:	9904      	ldr	r1, [sp, #16]
 8006e50:	60c4      	str	r4, [r0, #12]
 8006e52:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e54:	f001 ff86 	bl	8008d64 <__mcmp>
 8006e58:	42a0      	cmp	r0, r4
 8006e5a:	da6b      	bge.n	8006f34 <_strtod_l+0x884>
 8006e5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e5e:	ea53 0308 	orrs.w	r3, r3, r8
 8006e62:	f040 8091 	bne.w	8006f88 <_strtod_l+0x8d8>
 8006e66:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f040 808c 	bne.w	8006f88 <_strtod_l+0x8d8>
 8006e70:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e74:	0d1b      	lsrs	r3, r3, #20
 8006e76:	051b      	lsls	r3, r3, #20
 8006e78:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006e7c:	f240 8084 	bls.w	8006f88 <_strtod_l+0x8d8>
 8006e80:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006e84:	b91b      	cbnz	r3, 8006e8e <_strtod_l+0x7de>
 8006e86:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	dd7c      	ble.n	8006f88 <_strtod_l+0x8d8>
 8006e8e:	4659      	mov	r1, fp
 8006e90:	2201      	movs	r2, #1
 8006e92:	4650      	mov	r0, sl
 8006e94:	f001 fef6 	bl	8008c84 <__lshift>
 8006e98:	9904      	ldr	r1, [sp, #16]
 8006e9a:	4683      	mov	fp, r0
 8006e9c:	f001 ff62 	bl	8008d64 <__mcmp>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	dd71      	ble.n	8006f88 <_strtod_l+0x8d8>
 8006ea4:	9905      	ldr	r1, [sp, #20]
 8006ea6:	464b      	mov	r3, r9
 8006ea8:	4a20      	ldr	r2, [pc, #128]	; (8006f2c <_strtod_l+0x87c>)
 8006eaa:	2900      	cmp	r1, #0
 8006eac:	f000 808c 	beq.w	8006fc8 <_strtod_l+0x918>
 8006eb0:	ea02 0109 	and.w	r1, r2, r9
 8006eb4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006eb8:	f300 8086 	bgt.w	8006fc8 <_strtod_l+0x918>
 8006ebc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006ec0:	f77f aeaa 	ble.w	8006c18 <_strtod_l+0x568>
 8006ec4:	4640      	mov	r0, r8
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	4b19      	ldr	r3, [pc, #100]	; (8006f30 <_strtod_l+0x880>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f7fb fde2 	bl	8002a94 <__aeabi_dmul>
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	4303      	orrs	r3, r0
 8006ed4:	bf08      	it	eq
 8006ed6:	2322      	moveq	r3, #34	; 0x22
 8006ed8:	4680      	mov	r8, r0
 8006eda:	4689      	mov	r9, r1
 8006edc:	bf08      	it	eq
 8006ede:	f8ca 3000 	streq.w	r3, [sl]
 8006ee2:	e62f      	b.n	8006b44 <_strtod_l+0x494>
 8006ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eec:	ea03 0808 	and.w	r8, r3, r8
 8006ef0:	e6e0      	b.n	8006cb4 <_strtod_l+0x604>
 8006ef2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006ef6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006efa:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006efe:	35e2      	adds	r5, #226	; 0xe2
 8006f00:	fa07 f505 	lsl.w	r5, r7, r5
 8006f04:	970f      	str	r7, [sp, #60]	; 0x3c
 8006f06:	e747      	b.n	8006d98 <_strtod_l+0x6e8>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	2500      	movs	r5, #0
 8006f0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f0e:	e743      	b.n	8006d98 <_strtod_l+0x6e8>
 8006f10:	463a      	mov	r2, r7
 8006f12:	4650      	mov	r0, sl
 8006f14:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006f16:	f001 feb5 	bl	8008c84 <__lshift>
 8006f1a:	901a      	str	r0, [sp, #104]	; 0x68
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	f47f af69 	bne.w	8006df4 <_strtod_l+0x744>
 8006f22:	e604      	b.n	8006b2e <_strtod_l+0x47e>
 8006f24:	0801bc28 	.word	0x0801bc28
 8006f28:	fffffc02 	.word	0xfffffc02
 8006f2c:	7ff00000 	.word	0x7ff00000
 8006f30:	39500000 	.word	0x39500000
 8006f34:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006f38:	d165      	bne.n	8007006 <_strtod_l+0x956>
 8006f3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f40:	b35a      	cbz	r2, 8006f9a <_strtod_l+0x8ea>
 8006f42:	4a99      	ldr	r2, [pc, #612]	; (80071a8 <_strtod_l+0xaf8>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d12b      	bne.n	8006fa0 <_strtod_l+0x8f0>
 8006f48:	9b05      	ldr	r3, [sp, #20]
 8006f4a:	4641      	mov	r1, r8
 8006f4c:	b303      	cbz	r3, 8006f90 <_strtod_l+0x8e0>
 8006f4e:	464a      	mov	r2, r9
 8006f50:	4b96      	ldr	r3, [pc, #600]	; (80071ac <_strtod_l+0xafc>)
 8006f52:	4013      	ands	r3, r2
 8006f54:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006f58:	f04f 32ff 	mov.w	r2, #4294967295
 8006f5c:	d81b      	bhi.n	8006f96 <_strtod_l+0x8e6>
 8006f5e:	0d1b      	lsrs	r3, r3, #20
 8006f60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006f64:	fa02 f303 	lsl.w	r3, r2, r3
 8006f68:	4299      	cmp	r1, r3
 8006f6a:	d119      	bne.n	8006fa0 <_strtod_l+0x8f0>
 8006f6c:	4b90      	ldr	r3, [pc, #576]	; (80071b0 <_strtod_l+0xb00>)
 8006f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d102      	bne.n	8006f7a <_strtod_l+0x8ca>
 8006f74:	3101      	adds	r1, #1
 8006f76:	f43f adda 	beq.w	8006b2e <_strtod_l+0x47e>
 8006f7a:	f04f 0800 	mov.w	r8, #0
 8006f7e:	4b8b      	ldr	r3, [pc, #556]	; (80071ac <_strtod_l+0xafc>)
 8006f80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f82:	401a      	ands	r2, r3
 8006f84:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006f88:	9b05      	ldr	r3, [sp, #20]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d19a      	bne.n	8006ec4 <_strtod_l+0x814>
 8006f8e:	e5d9      	b.n	8006b44 <_strtod_l+0x494>
 8006f90:	f04f 33ff 	mov.w	r3, #4294967295
 8006f94:	e7e8      	b.n	8006f68 <_strtod_l+0x8b8>
 8006f96:	4613      	mov	r3, r2
 8006f98:	e7e6      	b.n	8006f68 <_strtod_l+0x8b8>
 8006f9a:	ea53 0308 	orrs.w	r3, r3, r8
 8006f9e:	d081      	beq.n	8006ea4 <_strtod_l+0x7f4>
 8006fa0:	b1e5      	cbz	r5, 8006fdc <_strtod_l+0x92c>
 8006fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa4:	421d      	tst	r5, r3
 8006fa6:	d0ef      	beq.n	8006f88 <_strtod_l+0x8d8>
 8006fa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006faa:	4640      	mov	r0, r8
 8006fac:	4649      	mov	r1, r9
 8006fae:	9a05      	ldr	r2, [sp, #20]
 8006fb0:	b1c3      	cbz	r3, 8006fe4 <_strtod_l+0x934>
 8006fb2:	f7ff fb59 	bl	8006668 <sulp>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fbe:	f7fb fbb3 	bl	8002728 <__adddf3>
 8006fc2:	4680      	mov	r8, r0
 8006fc4:	4689      	mov	r9, r1
 8006fc6:	e7df      	b.n	8006f88 <_strtod_l+0x8d8>
 8006fc8:	4013      	ands	r3, r2
 8006fca:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006fce:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006fd2:	f04f 38ff 	mov.w	r8, #4294967295
 8006fd6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006fda:	e7d5      	b.n	8006f88 <_strtod_l+0x8d8>
 8006fdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fde:	ea13 0f08 	tst.w	r3, r8
 8006fe2:	e7e0      	b.n	8006fa6 <_strtod_l+0x8f6>
 8006fe4:	f7ff fb40 	bl	8006668 <sulp>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ff0:	f7fb fb98 	bl	8002724 <__aeabi_dsub>
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	4680      	mov	r8, r0
 8006ffa:	4689      	mov	r9, r1
 8006ffc:	f7fb ffb2 	bl	8002f64 <__aeabi_dcmpeq>
 8007000:	2800      	cmp	r0, #0
 8007002:	d0c1      	beq.n	8006f88 <_strtod_l+0x8d8>
 8007004:	e608      	b.n	8006c18 <_strtod_l+0x568>
 8007006:	4658      	mov	r0, fp
 8007008:	9904      	ldr	r1, [sp, #16]
 800700a:	f002 f829 	bl	8009060 <__ratio>
 800700e:	2200      	movs	r2, #0
 8007010:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007014:	4606      	mov	r6, r0
 8007016:	460f      	mov	r7, r1
 8007018:	f7fb ffb8 	bl	8002f8c <__aeabi_dcmple>
 800701c:	2800      	cmp	r0, #0
 800701e:	d070      	beq.n	8007102 <_strtod_l+0xa52>
 8007020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007022:	2b00      	cmp	r3, #0
 8007024:	d042      	beq.n	80070ac <_strtod_l+0x9fc>
 8007026:	2600      	movs	r6, #0
 8007028:	4f62      	ldr	r7, [pc, #392]	; (80071b4 <_strtod_l+0xb04>)
 800702a:	4d62      	ldr	r5, [pc, #392]	; (80071b4 <_strtod_l+0xb04>)
 800702c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800702e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007032:	0d1b      	lsrs	r3, r3, #20
 8007034:	051b      	lsls	r3, r3, #20
 8007036:	930f      	str	r3, [sp, #60]	; 0x3c
 8007038:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800703a:	4b5f      	ldr	r3, [pc, #380]	; (80071b8 <_strtod_l+0xb08>)
 800703c:	429a      	cmp	r2, r3
 800703e:	f040 80c3 	bne.w	80071c8 <_strtod_l+0xb18>
 8007042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007044:	4640      	mov	r0, r8
 8007046:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800704a:	4649      	mov	r1, r9
 800704c:	f001 ff32 	bl	8008eb4 <__ulp>
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	4630      	mov	r0, r6
 8007056:	4639      	mov	r1, r7
 8007058:	f7fb fd1c 	bl	8002a94 <__aeabi_dmul>
 800705c:	4642      	mov	r2, r8
 800705e:	464b      	mov	r3, r9
 8007060:	f7fb fb62 	bl	8002728 <__adddf3>
 8007064:	460b      	mov	r3, r1
 8007066:	4951      	ldr	r1, [pc, #324]	; (80071ac <_strtod_l+0xafc>)
 8007068:	4a54      	ldr	r2, [pc, #336]	; (80071bc <_strtod_l+0xb0c>)
 800706a:	4019      	ands	r1, r3
 800706c:	4291      	cmp	r1, r2
 800706e:	4680      	mov	r8, r0
 8007070:	d95d      	bls.n	800712e <_strtod_l+0xa7e>
 8007072:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007074:	4b4e      	ldr	r3, [pc, #312]	; (80071b0 <_strtod_l+0xb00>)
 8007076:	429a      	cmp	r2, r3
 8007078:	d103      	bne.n	8007082 <_strtod_l+0x9d2>
 800707a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800707c:	3301      	adds	r3, #1
 800707e:	f43f ad56 	beq.w	8006b2e <_strtod_l+0x47e>
 8007082:	f04f 38ff 	mov.w	r8, #4294967295
 8007086:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80071b0 <_strtod_l+0xb00>
 800708a:	4650      	mov	r0, sl
 800708c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800708e:	f001 fbe1 	bl	8008854 <_Bfree>
 8007092:	4650      	mov	r0, sl
 8007094:	9906      	ldr	r1, [sp, #24]
 8007096:	f001 fbdd 	bl	8008854 <_Bfree>
 800709a:	4650      	mov	r0, sl
 800709c:	9904      	ldr	r1, [sp, #16]
 800709e:	f001 fbd9 	bl	8008854 <_Bfree>
 80070a2:	4659      	mov	r1, fp
 80070a4:	4650      	mov	r0, sl
 80070a6:	f001 fbd5 	bl	8008854 <_Bfree>
 80070aa:	e627      	b.n	8006cfc <_strtod_l+0x64c>
 80070ac:	f1b8 0f00 	cmp.w	r8, #0
 80070b0:	d119      	bne.n	80070e6 <_strtod_l+0xa36>
 80070b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070b8:	b9e3      	cbnz	r3, 80070f4 <_strtod_l+0xa44>
 80070ba:	2200      	movs	r2, #0
 80070bc:	4630      	mov	r0, r6
 80070be:	4639      	mov	r1, r7
 80070c0:	4b3c      	ldr	r3, [pc, #240]	; (80071b4 <_strtod_l+0xb04>)
 80070c2:	f7fb ff59 	bl	8002f78 <__aeabi_dcmplt>
 80070c6:	b9c8      	cbnz	r0, 80070fc <_strtod_l+0xa4c>
 80070c8:	2200      	movs	r2, #0
 80070ca:	4630      	mov	r0, r6
 80070cc:	4639      	mov	r1, r7
 80070ce:	4b3c      	ldr	r3, [pc, #240]	; (80071c0 <_strtod_l+0xb10>)
 80070d0:	f7fb fce0 	bl	8002a94 <__aeabi_dmul>
 80070d4:	4604      	mov	r4, r0
 80070d6:	460d      	mov	r5, r1
 80070d8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80070dc:	9416      	str	r4, [sp, #88]	; 0x58
 80070de:	9317      	str	r3, [sp, #92]	; 0x5c
 80070e0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80070e4:	e7a2      	b.n	800702c <_strtod_l+0x97c>
 80070e6:	f1b8 0f01 	cmp.w	r8, #1
 80070ea:	d103      	bne.n	80070f4 <_strtod_l+0xa44>
 80070ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f43f ad92 	beq.w	8006c18 <_strtod_l+0x568>
 80070f4:	2600      	movs	r6, #0
 80070f6:	2400      	movs	r4, #0
 80070f8:	4f32      	ldr	r7, [pc, #200]	; (80071c4 <_strtod_l+0xb14>)
 80070fa:	e796      	b.n	800702a <_strtod_l+0x97a>
 80070fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80070fe:	4d30      	ldr	r5, [pc, #192]	; (80071c0 <_strtod_l+0xb10>)
 8007100:	e7ea      	b.n	80070d8 <_strtod_l+0xa28>
 8007102:	4b2f      	ldr	r3, [pc, #188]	; (80071c0 <_strtod_l+0xb10>)
 8007104:	2200      	movs	r2, #0
 8007106:	4630      	mov	r0, r6
 8007108:	4639      	mov	r1, r7
 800710a:	f7fb fcc3 	bl	8002a94 <__aeabi_dmul>
 800710e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007110:	4604      	mov	r4, r0
 8007112:	460d      	mov	r5, r1
 8007114:	b933      	cbnz	r3, 8007124 <_strtod_l+0xa74>
 8007116:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800711a:	9010      	str	r0, [sp, #64]	; 0x40
 800711c:	9311      	str	r3, [sp, #68]	; 0x44
 800711e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007122:	e783      	b.n	800702c <_strtod_l+0x97c>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800712c:	e7f7      	b.n	800711e <_strtod_l+0xa6e>
 800712e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007132:	9b05      	ldr	r3, [sp, #20]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1a8      	bne.n	800708a <_strtod_l+0x9da>
 8007138:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800713c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800713e:	0d1b      	lsrs	r3, r3, #20
 8007140:	051b      	lsls	r3, r3, #20
 8007142:	429a      	cmp	r2, r3
 8007144:	d1a1      	bne.n	800708a <_strtod_l+0x9da>
 8007146:	4620      	mov	r0, r4
 8007148:	4629      	mov	r1, r5
 800714a:	f7fc f861 	bl	8003210 <__aeabi_d2lz>
 800714e:	f7fb fc73 	bl	8002a38 <__aeabi_l2d>
 8007152:	4602      	mov	r2, r0
 8007154:	460b      	mov	r3, r1
 8007156:	4620      	mov	r0, r4
 8007158:	4629      	mov	r1, r5
 800715a:	f7fb fae3 	bl	8002724 <__aeabi_dsub>
 800715e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007160:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007164:	ea43 0308 	orr.w	r3, r3, r8
 8007168:	4313      	orrs	r3, r2
 800716a:	4604      	mov	r4, r0
 800716c:	460d      	mov	r5, r1
 800716e:	d066      	beq.n	800723e <_strtod_l+0xb8e>
 8007170:	a309      	add	r3, pc, #36	; (adr r3, 8007198 <_strtod_l+0xae8>)
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	f7fb feff 	bl	8002f78 <__aeabi_dcmplt>
 800717a:	2800      	cmp	r0, #0
 800717c:	f47f ace2 	bne.w	8006b44 <_strtod_l+0x494>
 8007180:	a307      	add	r3, pc, #28	; (adr r3, 80071a0 <_strtod_l+0xaf0>)
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	4620      	mov	r0, r4
 8007188:	4629      	mov	r1, r5
 800718a:	f7fb ff13 	bl	8002fb4 <__aeabi_dcmpgt>
 800718e:	2800      	cmp	r0, #0
 8007190:	f43f af7b 	beq.w	800708a <_strtod_l+0x9da>
 8007194:	e4d6      	b.n	8006b44 <_strtod_l+0x494>
 8007196:	bf00      	nop
 8007198:	94a03595 	.word	0x94a03595
 800719c:	3fdfffff 	.word	0x3fdfffff
 80071a0:	35afe535 	.word	0x35afe535
 80071a4:	3fe00000 	.word	0x3fe00000
 80071a8:	000fffff 	.word	0x000fffff
 80071ac:	7ff00000 	.word	0x7ff00000
 80071b0:	7fefffff 	.word	0x7fefffff
 80071b4:	3ff00000 	.word	0x3ff00000
 80071b8:	7fe00000 	.word	0x7fe00000
 80071bc:	7c9fffff 	.word	0x7c9fffff
 80071c0:	3fe00000 	.word	0x3fe00000
 80071c4:	bff00000 	.word	0xbff00000
 80071c8:	9b05      	ldr	r3, [sp, #20]
 80071ca:	b313      	cbz	r3, 8007212 <_strtod_l+0xb62>
 80071cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80071d2:	d81e      	bhi.n	8007212 <_strtod_l+0xb62>
 80071d4:	a326      	add	r3, pc, #152	; (adr r3, 8007270 <_strtod_l+0xbc0>)
 80071d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071da:	4620      	mov	r0, r4
 80071dc:	4629      	mov	r1, r5
 80071de:	f7fb fed5 	bl	8002f8c <__aeabi_dcmple>
 80071e2:	b190      	cbz	r0, 800720a <_strtod_l+0xb5a>
 80071e4:	4629      	mov	r1, r5
 80071e6:	4620      	mov	r0, r4
 80071e8:	f7fb ff2c 	bl	8003044 <__aeabi_d2uiz>
 80071ec:	2801      	cmp	r0, #1
 80071ee:	bf38      	it	cc
 80071f0:	2001      	movcc	r0, #1
 80071f2:	f7fb fbd5 	bl	80029a0 <__aeabi_ui2d>
 80071f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071f8:	4604      	mov	r4, r0
 80071fa:	460d      	mov	r5, r1
 80071fc:	b9d3      	cbnz	r3, 8007234 <_strtod_l+0xb84>
 80071fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007202:	9012      	str	r0, [sp, #72]	; 0x48
 8007204:	9313      	str	r3, [sp, #76]	; 0x4c
 8007206:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800720a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800720c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007210:	1a9f      	subs	r7, r3, r2
 8007212:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007216:	f001 fe4d 	bl	8008eb4 <__ulp>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4630      	mov	r0, r6
 8007220:	4639      	mov	r1, r7
 8007222:	f7fb fc37 	bl	8002a94 <__aeabi_dmul>
 8007226:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800722a:	f7fb fa7d 	bl	8002728 <__adddf3>
 800722e:	4680      	mov	r8, r0
 8007230:	4689      	mov	r9, r1
 8007232:	e77e      	b.n	8007132 <_strtod_l+0xa82>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800723c:	e7e3      	b.n	8007206 <_strtod_l+0xb56>
 800723e:	a30e      	add	r3, pc, #56	; (adr r3, 8007278 <_strtod_l+0xbc8>)
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	f7fb fe98 	bl	8002f78 <__aeabi_dcmplt>
 8007248:	e7a1      	b.n	800718e <_strtod_l+0xade>
 800724a:	2300      	movs	r3, #0
 800724c:	930a      	str	r3, [sp, #40]	; 0x28
 800724e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007250:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007252:	6013      	str	r3, [r2, #0]
 8007254:	f7ff ba71 	b.w	800673a <_strtod_l+0x8a>
 8007258:	2a65      	cmp	r2, #101	; 0x65
 800725a:	f43f ab63 	beq.w	8006924 <_strtod_l+0x274>
 800725e:	2a45      	cmp	r2, #69	; 0x45
 8007260:	f43f ab60 	beq.w	8006924 <_strtod_l+0x274>
 8007264:	2301      	movs	r3, #1
 8007266:	f7ff bb95 	b.w	8006994 <_strtod_l+0x2e4>
 800726a:	bf00      	nop
 800726c:	f3af 8000 	nop.w
 8007270:	ffc00000 	.word	0xffc00000
 8007274:	41dfffff 	.word	0x41dfffff
 8007278:	94a03595 	.word	0x94a03595
 800727c:	3fcfffff 	.word	0x3fcfffff

08007280 <_strtod_r>:
 8007280:	4b01      	ldr	r3, [pc, #4]	; (8007288 <_strtod_r+0x8>)
 8007282:	f7ff ba15 	b.w	80066b0 <_strtod_l>
 8007286:	bf00      	nop
 8007288:	20000078 	.word	0x20000078

0800728c <_strtol_l.constprop.0>:
 800728c:	2b01      	cmp	r3, #1
 800728e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007292:	4680      	mov	r8, r0
 8007294:	d001      	beq.n	800729a <_strtol_l.constprop.0+0xe>
 8007296:	2b24      	cmp	r3, #36	; 0x24
 8007298:	d906      	bls.n	80072a8 <_strtol_l.constprop.0+0x1c>
 800729a:	f7fe fb21 	bl	80058e0 <__errno>
 800729e:	2316      	movs	r3, #22
 80072a0:	6003      	str	r3, [r0, #0]
 80072a2:	2000      	movs	r0, #0
 80072a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a8:	460d      	mov	r5, r1
 80072aa:	4f35      	ldr	r7, [pc, #212]	; (8007380 <_strtol_l.constprop.0+0xf4>)
 80072ac:	4628      	mov	r0, r5
 80072ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072b2:	5de6      	ldrb	r6, [r4, r7]
 80072b4:	f016 0608 	ands.w	r6, r6, #8
 80072b8:	d1f8      	bne.n	80072ac <_strtol_l.constprop.0+0x20>
 80072ba:	2c2d      	cmp	r4, #45	; 0x2d
 80072bc:	d12f      	bne.n	800731e <_strtol_l.constprop.0+0x92>
 80072be:	2601      	movs	r6, #1
 80072c0:	782c      	ldrb	r4, [r5, #0]
 80072c2:	1c85      	adds	r5, r0, #2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d057      	beq.n	8007378 <_strtol_l.constprop.0+0xec>
 80072c8:	2b10      	cmp	r3, #16
 80072ca:	d109      	bne.n	80072e0 <_strtol_l.constprop.0+0x54>
 80072cc:	2c30      	cmp	r4, #48	; 0x30
 80072ce:	d107      	bne.n	80072e0 <_strtol_l.constprop.0+0x54>
 80072d0:	7828      	ldrb	r0, [r5, #0]
 80072d2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80072d6:	2858      	cmp	r0, #88	; 0x58
 80072d8:	d149      	bne.n	800736e <_strtol_l.constprop.0+0xe2>
 80072da:	2310      	movs	r3, #16
 80072dc:	786c      	ldrb	r4, [r5, #1]
 80072de:	3502      	adds	r5, #2
 80072e0:	2700      	movs	r7, #0
 80072e2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80072e6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80072ea:	fbbe f9f3 	udiv	r9, lr, r3
 80072ee:	4638      	mov	r0, r7
 80072f0:	fb03 ea19 	mls	sl, r3, r9, lr
 80072f4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80072f8:	f1bc 0f09 	cmp.w	ip, #9
 80072fc:	d814      	bhi.n	8007328 <_strtol_l.constprop.0+0x9c>
 80072fe:	4664      	mov	r4, ip
 8007300:	42a3      	cmp	r3, r4
 8007302:	dd22      	ble.n	800734a <_strtol_l.constprop.0+0xbe>
 8007304:	2f00      	cmp	r7, #0
 8007306:	db1d      	blt.n	8007344 <_strtol_l.constprop.0+0xb8>
 8007308:	4581      	cmp	r9, r0
 800730a:	d31b      	bcc.n	8007344 <_strtol_l.constprop.0+0xb8>
 800730c:	d101      	bne.n	8007312 <_strtol_l.constprop.0+0x86>
 800730e:	45a2      	cmp	sl, r4
 8007310:	db18      	blt.n	8007344 <_strtol_l.constprop.0+0xb8>
 8007312:	2701      	movs	r7, #1
 8007314:	fb00 4003 	mla	r0, r0, r3, r4
 8007318:	f815 4b01 	ldrb.w	r4, [r5], #1
 800731c:	e7ea      	b.n	80072f4 <_strtol_l.constprop.0+0x68>
 800731e:	2c2b      	cmp	r4, #43	; 0x2b
 8007320:	bf04      	itt	eq
 8007322:	782c      	ldrbeq	r4, [r5, #0]
 8007324:	1c85      	addeq	r5, r0, #2
 8007326:	e7cd      	b.n	80072c4 <_strtol_l.constprop.0+0x38>
 8007328:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800732c:	f1bc 0f19 	cmp.w	ip, #25
 8007330:	d801      	bhi.n	8007336 <_strtol_l.constprop.0+0xaa>
 8007332:	3c37      	subs	r4, #55	; 0x37
 8007334:	e7e4      	b.n	8007300 <_strtol_l.constprop.0+0x74>
 8007336:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800733a:	f1bc 0f19 	cmp.w	ip, #25
 800733e:	d804      	bhi.n	800734a <_strtol_l.constprop.0+0xbe>
 8007340:	3c57      	subs	r4, #87	; 0x57
 8007342:	e7dd      	b.n	8007300 <_strtol_l.constprop.0+0x74>
 8007344:	f04f 37ff 	mov.w	r7, #4294967295
 8007348:	e7e6      	b.n	8007318 <_strtol_l.constprop.0+0x8c>
 800734a:	2f00      	cmp	r7, #0
 800734c:	da07      	bge.n	800735e <_strtol_l.constprop.0+0xd2>
 800734e:	2322      	movs	r3, #34	; 0x22
 8007350:	4670      	mov	r0, lr
 8007352:	f8c8 3000 	str.w	r3, [r8]
 8007356:	2a00      	cmp	r2, #0
 8007358:	d0a4      	beq.n	80072a4 <_strtol_l.constprop.0+0x18>
 800735a:	1e69      	subs	r1, r5, #1
 800735c:	e005      	b.n	800736a <_strtol_l.constprop.0+0xde>
 800735e:	b106      	cbz	r6, 8007362 <_strtol_l.constprop.0+0xd6>
 8007360:	4240      	negs	r0, r0
 8007362:	2a00      	cmp	r2, #0
 8007364:	d09e      	beq.n	80072a4 <_strtol_l.constprop.0+0x18>
 8007366:	2f00      	cmp	r7, #0
 8007368:	d1f7      	bne.n	800735a <_strtol_l.constprop.0+0xce>
 800736a:	6011      	str	r1, [r2, #0]
 800736c:	e79a      	b.n	80072a4 <_strtol_l.constprop.0+0x18>
 800736e:	2430      	movs	r4, #48	; 0x30
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1b5      	bne.n	80072e0 <_strtol_l.constprop.0+0x54>
 8007374:	2308      	movs	r3, #8
 8007376:	e7b3      	b.n	80072e0 <_strtol_l.constprop.0+0x54>
 8007378:	2c30      	cmp	r4, #48	; 0x30
 800737a:	d0a9      	beq.n	80072d0 <_strtol_l.constprop.0+0x44>
 800737c:	230a      	movs	r3, #10
 800737e:	e7af      	b.n	80072e0 <_strtol_l.constprop.0+0x54>
 8007380:	0801bc51 	.word	0x0801bc51

08007384 <_strtol_r>:
 8007384:	f7ff bf82 	b.w	800728c <_strtol_l.constprop.0>

08007388 <strtol>:
 8007388:	4613      	mov	r3, r2
 800738a:	460a      	mov	r2, r1
 800738c:	4601      	mov	r1, r0
 800738e:	4802      	ldr	r0, [pc, #8]	; (8007398 <strtol+0x10>)
 8007390:	6800      	ldr	r0, [r0, #0]
 8007392:	f7ff bf7b 	b.w	800728c <_strtol_l.constprop.0>
 8007396:	bf00      	nop
 8007398:	20000010 	.word	0x20000010

0800739c <quorem>:
 800739c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a0:	6903      	ldr	r3, [r0, #16]
 80073a2:	690c      	ldr	r4, [r1, #16]
 80073a4:	4607      	mov	r7, r0
 80073a6:	42a3      	cmp	r3, r4
 80073a8:	f2c0 8082 	blt.w	80074b0 <quorem+0x114>
 80073ac:	3c01      	subs	r4, #1
 80073ae:	f100 0514 	add.w	r5, r0, #20
 80073b2:	f101 0814 	add.w	r8, r1, #20
 80073b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073ba:	9301      	str	r3, [sp, #4]
 80073bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073c4:	3301      	adds	r3, #1
 80073c6:	429a      	cmp	r2, r3
 80073c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80073cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80073d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073d4:	d331      	bcc.n	800743a <quorem+0x9e>
 80073d6:	f04f 0e00 	mov.w	lr, #0
 80073da:	4640      	mov	r0, r8
 80073dc:	46ac      	mov	ip, r5
 80073de:	46f2      	mov	sl, lr
 80073e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80073e4:	b293      	uxth	r3, r2
 80073e6:	fb06 e303 	mla	r3, r6, r3, lr
 80073ea:	0c12      	lsrs	r2, r2, #16
 80073ec:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	fb06 e202 	mla	r2, r6, r2, lr
 80073f6:	ebaa 0303 	sub.w	r3, sl, r3
 80073fa:	f8dc a000 	ldr.w	sl, [ip]
 80073fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007402:	fa1f fa8a 	uxth.w	sl, sl
 8007406:	4453      	add	r3, sl
 8007408:	f8dc a000 	ldr.w	sl, [ip]
 800740c:	b292      	uxth	r2, r2
 800740e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007412:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007416:	b29b      	uxth	r3, r3
 8007418:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800741c:	4581      	cmp	r9, r0
 800741e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007422:	f84c 3b04 	str.w	r3, [ip], #4
 8007426:	d2db      	bcs.n	80073e0 <quorem+0x44>
 8007428:	f855 300b 	ldr.w	r3, [r5, fp]
 800742c:	b92b      	cbnz	r3, 800743a <quorem+0x9e>
 800742e:	9b01      	ldr	r3, [sp, #4]
 8007430:	3b04      	subs	r3, #4
 8007432:	429d      	cmp	r5, r3
 8007434:	461a      	mov	r2, r3
 8007436:	d32f      	bcc.n	8007498 <quorem+0xfc>
 8007438:	613c      	str	r4, [r7, #16]
 800743a:	4638      	mov	r0, r7
 800743c:	f001 fc92 	bl	8008d64 <__mcmp>
 8007440:	2800      	cmp	r0, #0
 8007442:	db25      	blt.n	8007490 <quorem+0xf4>
 8007444:	4628      	mov	r0, r5
 8007446:	f04f 0c00 	mov.w	ip, #0
 800744a:	3601      	adds	r6, #1
 800744c:	f858 1b04 	ldr.w	r1, [r8], #4
 8007450:	f8d0 e000 	ldr.w	lr, [r0]
 8007454:	b28b      	uxth	r3, r1
 8007456:	ebac 0303 	sub.w	r3, ip, r3
 800745a:	fa1f f28e 	uxth.w	r2, lr
 800745e:	4413      	add	r3, r2
 8007460:	0c0a      	lsrs	r2, r1, #16
 8007462:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007466:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800746a:	b29b      	uxth	r3, r3
 800746c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007470:	45c1      	cmp	r9, r8
 8007472:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007476:	f840 3b04 	str.w	r3, [r0], #4
 800747a:	d2e7      	bcs.n	800744c <quorem+0xb0>
 800747c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007480:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007484:	b922      	cbnz	r2, 8007490 <quorem+0xf4>
 8007486:	3b04      	subs	r3, #4
 8007488:	429d      	cmp	r5, r3
 800748a:	461a      	mov	r2, r3
 800748c:	d30a      	bcc.n	80074a4 <quorem+0x108>
 800748e:	613c      	str	r4, [r7, #16]
 8007490:	4630      	mov	r0, r6
 8007492:	b003      	add	sp, #12
 8007494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007498:	6812      	ldr	r2, [r2, #0]
 800749a:	3b04      	subs	r3, #4
 800749c:	2a00      	cmp	r2, #0
 800749e:	d1cb      	bne.n	8007438 <quorem+0x9c>
 80074a0:	3c01      	subs	r4, #1
 80074a2:	e7c6      	b.n	8007432 <quorem+0x96>
 80074a4:	6812      	ldr	r2, [r2, #0]
 80074a6:	3b04      	subs	r3, #4
 80074a8:	2a00      	cmp	r2, #0
 80074aa:	d1f0      	bne.n	800748e <quorem+0xf2>
 80074ac:	3c01      	subs	r4, #1
 80074ae:	e7eb      	b.n	8007488 <quorem+0xec>
 80074b0:	2000      	movs	r0, #0
 80074b2:	e7ee      	b.n	8007492 <quorem+0xf6>
 80074b4:	0000      	movs	r0, r0
	...

080074b8 <_dtoa_r>:
 80074b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074bc:	4616      	mov	r6, r2
 80074be:	461f      	mov	r7, r3
 80074c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80074c2:	b099      	sub	sp, #100	; 0x64
 80074c4:	4605      	mov	r5, r0
 80074c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80074ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80074ce:	b974      	cbnz	r4, 80074ee <_dtoa_r+0x36>
 80074d0:	2010      	movs	r0, #16
 80074d2:	f001 f949 	bl	8008768 <malloc>
 80074d6:	4602      	mov	r2, r0
 80074d8:	6268      	str	r0, [r5, #36]	; 0x24
 80074da:	b920      	cbnz	r0, 80074e6 <_dtoa_r+0x2e>
 80074dc:	21ea      	movs	r1, #234	; 0xea
 80074de:	4ba8      	ldr	r3, [pc, #672]	; (8007780 <_dtoa_r+0x2c8>)
 80074e0:	48a8      	ldr	r0, [pc, #672]	; (8007784 <_dtoa_r+0x2cc>)
 80074e2:	f002 f8b3 	bl	800964c <__assert_func>
 80074e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074ea:	6004      	str	r4, [r0, #0]
 80074ec:	60c4      	str	r4, [r0, #12]
 80074ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80074f0:	6819      	ldr	r1, [r3, #0]
 80074f2:	b151      	cbz	r1, 800750a <_dtoa_r+0x52>
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	2301      	movs	r3, #1
 80074f8:	4093      	lsls	r3, r2
 80074fa:	604a      	str	r2, [r1, #4]
 80074fc:	608b      	str	r3, [r1, #8]
 80074fe:	4628      	mov	r0, r5
 8007500:	f001 f9a8 	bl	8008854 <_Bfree>
 8007504:	2200      	movs	r2, #0
 8007506:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	1e3b      	subs	r3, r7, #0
 800750c:	bfaf      	iteee	ge
 800750e:	2300      	movge	r3, #0
 8007510:	2201      	movlt	r2, #1
 8007512:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007516:	9305      	strlt	r3, [sp, #20]
 8007518:	bfa8      	it	ge
 800751a:	f8c8 3000 	strge.w	r3, [r8]
 800751e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007522:	4b99      	ldr	r3, [pc, #612]	; (8007788 <_dtoa_r+0x2d0>)
 8007524:	bfb8      	it	lt
 8007526:	f8c8 2000 	strlt.w	r2, [r8]
 800752a:	ea33 0309 	bics.w	r3, r3, r9
 800752e:	d119      	bne.n	8007564 <_dtoa_r+0xac>
 8007530:	f242 730f 	movw	r3, #9999	; 0x270f
 8007534:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800753c:	4333      	orrs	r3, r6
 800753e:	f000 857f 	beq.w	8008040 <_dtoa_r+0xb88>
 8007542:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007544:	b953      	cbnz	r3, 800755c <_dtoa_r+0xa4>
 8007546:	4b91      	ldr	r3, [pc, #580]	; (800778c <_dtoa_r+0x2d4>)
 8007548:	e022      	b.n	8007590 <_dtoa_r+0xd8>
 800754a:	4b91      	ldr	r3, [pc, #580]	; (8007790 <_dtoa_r+0x2d8>)
 800754c:	9303      	str	r3, [sp, #12]
 800754e:	3308      	adds	r3, #8
 8007550:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	9803      	ldr	r0, [sp, #12]
 8007556:	b019      	add	sp, #100	; 0x64
 8007558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800755c:	4b8b      	ldr	r3, [pc, #556]	; (800778c <_dtoa_r+0x2d4>)
 800755e:	9303      	str	r3, [sp, #12]
 8007560:	3303      	adds	r3, #3
 8007562:	e7f5      	b.n	8007550 <_dtoa_r+0x98>
 8007564:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007568:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800756c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007570:	2200      	movs	r2, #0
 8007572:	2300      	movs	r3, #0
 8007574:	f7fb fcf6 	bl	8002f64 <__aeabi_dcmpeq>
 8007578:	4680      	mov	r8, r0
 800757a:	b158      	cbz	r0, 8007594 <_dtoa_r+0xdc>
 800757c:	2301      	movs	r3, #1
 800757e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 8558 	beq.w	800803a <_dtoa_r+0xb82>
 800758a:	4882      	ldr	r0, [pc, #520]	; (8007794 <_dtoa_r+0x2dc>)
 800758c:	6018      	str	r0, [r3, #0]
 800758e:	1e43      	subs	r3, r0, #1
 8007590:	9303      	str	r3, [sp, #12]
 8007592:	e7df      	b.n	8007554 <_dtoa_r+0x9c>
 8007594:	ab16      	add	r3, sp, #88	; 0x58
 8007596:	9301      	str	r3, [sp, #4]
 8007598:	ab17      	add	r3, sp, #92	; 0x5c
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	4628      	mov	r0, r5
 800759e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80075a2:	f001 fd01 	bl	8008fa8 <__d2b>
 80075a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80075aa:	4683      	mov	fp, r0
 80075ac:	2c00      	cmp	r4, #0
 80075ae:	d07f      	beq.n	80076b0 <_dtoa_r+0x1f8>
 80075b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075b6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80075ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075be:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80075c2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80075c6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80075ca:	2200      	movs	r2, #0
 80075cc:	4b72      	ldr	r3, [pc, #456]	; (8007798 <_dtoa_r+0x2e0>)
 80075ce:	f7fb f8a9 	bl	8002724 <__aeabi_dsub>
 80075d2:	a365      	add	r3, pc, #404	; (adr r3, 8007768 <_dtoa_r+0x2b0>)
 80075d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d8:	f7fb fa5c 	bl	8002a94 <__aeabi_dmul>
 80075dc:	a364      	add	r3, pc, #400	; (adr r3, 8007770 <_dtoa_r+0x2b8>)
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	f7fb f8a1 	bl	8002728 <__adddf3>
 80075e6:	4606      	mov	r6, r0
 80075e8:	4620      	mov	r0, r4
 80075ea:	460f      	mov	r7, r1
 80075ec:	f7fb f9e8 	bl	80029c0 <__aeabi_i2d>
 80075f0:	a361      	add	r3, pc, #388	; (adr r3, 8007778 <_dtoa_r+0x2c0>)
 80075f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f6:	f7fb fa4d 	bl	8002a94 <__aeabi_dmul>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4630      	mov	r0, r6
 8007600:	4639      	mov	r1, r7
 8007602:	f7fb f891 	bl	8002728 <__adddf3>
 8007606:	4606      	mov	r6, r0
 8007608:	460f      	mov	r7, r1
 800760a:	f7fb fcf3 	bl	8002ff4 <__aeabi_d2iz>
 800760e:	2200      	movs	r2, #0
 8007610:	4682      	mov	sl, r0
 8007612:	2300      	movs	r3, #0
 8007614:	4630      	mov	r0, r6
 8007616:	4639      	mov	r1, r7
 8007618:	f7fb fcae 	bl	8002f78 <__aeabi_dcmplt>
 800761c:	b148      	cbz	r0, 8007632 <_dtoa_r+0x17a>
 800761e:	4650      	mov	r0, sl
 8007620:	f7fb f9ce 	bl	80029c0 <__aeabi_i2d>
 8007624:	4632      	mov	r2, r6
 8007626:	463b      	mov	r3, r7
 8007628:	f7fb fc9c 	bl	8002f64 <__aeabi_dcmpeq>
 800762c:	b908      	cbnz	r0, 8007632 <_dtoa_r+0x17a>
 800762e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007632:	f1ba 0f16 	cmp.w	sl, #22
 8007636:	d858      	bhi.n	80076ea <_dtoa_r+0x232>
 8007638:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800763c:	4b57      	ldr	r3, [pc, #348]	; (800779c <_dtoa_r+0x2e4>)
 800763e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007646:	f7fb fc97 	bl	8002f78 <__aeabi_dcmplt>
 800764a:	2800      	cmp	r0, #0
 800764c:	d04f      	beq.n	80076ee <_dtoa_r+0x236>
 800764e:	2300      	movs	r3, #0
 8007650:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007654:	930f      	str	r3, [sp, #60]	; 0x3c
 8007656:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007658:	1b1c      	subs	r4, r3, r4
 800765a:	1e63      	subs	r3, r4, #1
 800765c:	9309      	str	r3, [sp, #36]	; 0x24
 800765e:	bf49      	itett	mi
 8007660:	f1c4 0301 	rsbmi	r3, r4, #1
 8007664:	2300      	movpl	r3, #0
 8007666:	9306      	strmi	r3, [sp, #24]
 8007668:	2300      	movmi	r3, #0
 800766a:	bf54      	ite	pl
 800766c:	9306      	strpl	r3, [sp, #24]
 800766e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007670:	f1ba 0f00 	cmp.w	sl, #0
 8007674:	db3d      	blt.n	80076f2 <_dtoa_r+0x23a>
 8007676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007678:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800767c:	4453      	add	r3, sl
 800767e:	9309      	str	r3, [sp, #36]	; 0x24
 8007680:	2300      	movs	r3, #0
 8007682:	930a      	str	r3, [sp, #40]	; 0x28
 8007684:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007686:	2b09      	cmp	r3, #9
 8007688:	f200 808c 	bhi.w	80077a4 <_dtoa_r+0x2ec>
 800768c:	2b05      	cmp	r3, #5
 800768e:	bfc4      	itt	gt
 8007690:	3b04      	subgt	r3, #4
 8007692:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007694:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007696:	bfc8      	it	gt
 8007698:	2400      	movgt	r4, #0
 800769a:	f1a3 0302 	sub.w	r3, r3, #2
 800769e:	bfd8      	it	le
 80076a0:	2401      	movle	r4, #1
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	f200 808a 	bhi.w	80077bc <_dtoa_r+0x304>
 80076a8:	e8df f003 	tbb	[pc, r3]
 80076ac:	5b4d4f2d 	.word	0x5b4d4f2d
 80076b0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80076b4:	441c      	add	r4, r3
 80076b6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80076ba:	2b20      	cmp	r3, #32
 80076bc:	bfc3      	ittte	gt
 80076be:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80076c2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80076c6:	fa09 f303 	lslgt.w	r3, r9, r3
 80076ca:	f1c3 0320 	rsble	r3, r3, #32
 80076ce:	bfc6      	itte	gt
 80076d0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80076d4:	4318      	orrgt	r0, r3
 80076d6:	fa06 f003 	lslle.w	r0, r6, r3
 80076da:	f7fb f961 	bl	80029a0 <__aeabi_ui2d>
 80076de:	2301      	movs	r3, #1
 80076e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80076e4:	3c01      	subs	r4, #1
 80076e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80076e8:	e76f      	b.n	80075ca <_dtoa_r+0x112>
 80076ea:	2301      	movs	r3, #1
 80076ec:	e7b2      	b.n	8007654 <_dtoa_r+0x19c>
 80076ee:	900f      	str	r0, [sp, #60]	; 0x3c
 80076f0:	e7b1      	b.n	8007656 <_dtoa_r+0x19e>
 80076f2:	9b06      	ldr	r3, [sp, #24]
 80076f4:	eba3 030a 	sub.w	r3, r3, sl
 80076f8:	9306      	str	r3, [sp, #24]
 80076fa:	f1ca 0300 	rsb	r3, sl, #0
 80076fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007700:	2300      	movs	r3, #0
 8007702:	930e      	str	r3, [sp, #56]	; 0x38
 8007704:	e7be      	b.n	8007684 <_dtoa_r+0x1cc>
 8007706:	2300      	movs	r3, #0
 8007708:	930b      	str	r3, [sp, #44]	; 0x2c
 800770a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800770c:	2b00      	cmp	r3, #0
 800770e:	dc58      	bgt.n	80077c2 <_dtoa_r+0x30a>
 8007710:	f04f 0901 	mov.w	r9, #1
 8007714:	464b      	mov	r3, r9
 8007716:	f8cd 9020 	str.w	r9, [sp, #32]
 800771a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800771e:	2200      	movs	r2, #0
 8007720:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007722:	6042      	str	r2, [r0, #4]
 8007724:	2204      	movs	r2, #4
 8007726:	f102 0614 	add.w	r6, r2, #20
 800772a:	429e      	cmp	r6, r3
 800772c:	6841      	ldr	r1, [r0, #4]
 800772e:	d94e      	bls.n	80077ce <_dtoa_r+0x316>
 8007730:	4628      	mov	r0, r5
 8007732:	f001 f84f 	bl	80087d4 <_Balloc>
 8007736:	9003      	str	r0, [sp, #12]
 8007738:	2800      	cmp	r0, #0
 800773a:	d14c      	bne.n	80077d6 <_dtoa_r+0x31e>
 800773c:	4602      	mov	r2, r0
 800773e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007742:	4b17      	ldr	r3, [pc, #92]	; (80077a0 <_dtoa_r+0x2e8>)
 8007744:	e6cc      	b.n	80074e0 <_dtoa_r+0x28>
 8007746:	2301      	movs	r3, #1
 8007748:	e7de      	b.n	8007708 <_dtoa_r+0x250>
 800774a:	2300      	movs	r3, #0
 800774c:	930b      	str	r3, [sp, #44]	; 0x2c
 800774e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007750:	eb0a 0903 	add.w	r9, sl, r3
 8007754:	f109 0301 	add.w	r3, r9, #1
 8007758:	2b01      	cmp	r3, #1
 800775a:	9308      	str	r3, [sp, #32]
 800775c:	bfb8      	it	lt
 800775e:	2301      	movlt	r3, #1
 8007760:	e7dd      	b.n	800771e <_dtoa_r+0x266>
 8007762:	2301      	movs	r3, #1
 8007764:	e7f2      	b.n	800774c <_dtoa_r+0x294>
 8007766:	bf00      	nop
 8007768:	636f4361 	.word	0x636f4361
 800776c:	3fd287a7 	.word	0x3fd287a7
 8007770:	8b60c8b3 	.word	0x8b60c8b3
 8007774:	3fc68a28 	.word	0x3fc68a28
 8007778:	509f79fb 	.word	0x509f79fb
 800777c:	3fd34413 	.word	0x3fd34413
 8007780:	0801bd5e 	.word	0x0801bd5e
 8007784:	0801bd75 	.word	0x0801bd75
 8007788:	7ff00000 	.word	0x7ff00000
 800778c:	0801bd5a 	.word	0x0801bd5a
 8007790:	0801bd51 	.word	0x0801bd51
 8007794:	0801bbd1 	.word	0x0801bbd1
 8007798:	3ff80000 	.word	0x3ff80000
 800779c:	0801bee0 	.word	0x0801bee0
 80077a0:	0801bdd0 	.word	0x0801bdd0
 80077a4:	2401      	movs	r4, #1
 80077a6:	2300      	movs	r3, #0
 80077a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80077aa:	9322      	str	r3, [sp, #136]	; 0x88
 80077ac:	f04f 39ff 	mov.w	r9, #4294967295
 80077b0:	2200      	movs	r2, #0
 80077b2:	2312      	movs	r3, #18
 80077b4:	f8cd 9020 	str.w	r9, [sp, #32]
 80077b8:	9223      	str	r2, [sp, #140]	; 0x8c
 80077ba:	e7b0      	b.n	800771e <_dtoa_r+0x266>
 80077bc:	2301      	movs	r3, #1
 80077be:	930b      	str	r3, [sp, #44]	; 0x2c
 80077c0:	e7f4      	b.n	80077ac <_dtoa_r+0x2f4>
 80077c2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80077c6:	464b      	mov	r3, r9
 80077c8:	f8cd 9020 	str.w	r9, [sp, #32]
 80077cc:	e7a7      	b.n	800771e <_dtoa_r+0x266>
 80077ce:	3101      	adds	r1, #1
 80077d0:	6041      	str	r1, [r0, #4]
 80077d2:	0052      	lsls	r2, r2, #1
 80077d4:	e7a7      	b.n	8007726 <_dtoa_r+0x26e>
 80077d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80077d8:	9a03      	ldr	r2, [sp, #12]
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	9b08      	ldr	r3, [sp, #32]
 80077de:	2b0e      	cmp	r3, #14
 80077e0:	f200 80a8 	bhi.w	8007934 <_dtoa_r+0x47c>
 80077e4:	2c00      	cmp	r4, #0
 80077e6:	f000 80a5 	beq.w	8007934 <_dtoa_r+0x47c>
 80077ea:	f1ba 0f00 	cmp.w	sl, #0
 80077ee:	dd34      	ble.n	800785a <_dtoa_r+0x3a2>
 80077f0:	4a9a      	ldr	r2, [pc, #616]	; (8007a5c <_dtoa_r+0x5a4>)
 80077f2:	f00a 030f 	and.w	r3, sl, #15
 80077f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80077fa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80077fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007802:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007806:	ea4f 142a 	mov.w	r4, sl, asr #4
 800780a:	d016      	beq.n	800783a <_dtoa_r+0x382>
 800780c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007810:	4b93      	ldr	r3, [pc, #588]	; (8007a60 <_dtoa_r+0x5a8>)
 8007812:	2703      	movs	r7, #3
 8007814:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007818:	f7fb fa66 	bl	8002ce8 <__aeabi_ddiv>
 800781c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007820:	f004 040f 	and.w	r4, r4, #15
 8007824:	4e8e      	ldr	r6, [pc, #568]	; (8007a60 <_dtoa_r+0x5a8>)
 8007826:	b954      	cbnz	r4, 800783e <_dtoa_r+0x386>
 8007828:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800782c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007830:	f7fb fa5a 	bl	8002ce8 <__aeabi_ddiv>
 8007834:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007838:	e029      	b.n	800788e <_dtoa_r+0x3d6>
 800783a:	2702      	movs	r7, #2
 800783c:	e7f2      	b.n	8007824 <_dtoa_r+0x36c>
 800783e:	07e1      	lsls	r1, r4, #31
 8007840:	d508      	bpl.n	8007854 <_dtoa_r+0x39c>
 8007842:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007846:	e9d6 2300 	ldrd	r2, r3, [r6]
 800784a:	f7fb f923 	bl	8002a94 <__aeabi_dmul>
 800784e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007852:	3701      	adds	r7, #1
 8007854:	1064      	asrs	r4, r4, #1
 8007856:	3608      	adds	r6, #8
 8007858:	e7e5      	b.n	8007826 <_dtoa_r+0x36e>
 800785a:	f000 80a5 	beq.w	80079a8 <_dtoa_r+0x4f0>
 800785e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007862:	f1ca 0400 	rsb	r4, sl, #0
 8007866:	4b7d      	ldr	r3, [pc, #500]	; (8007a5c <_dtoa_r+0x5a4>)
 8007868:	f004 020f 	and.w	r2, r4, #15
 800786c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007874:	f7fb f90e 	bl	8002a94 <__aeabi_dmul>
 8007878:	2702      	movs	r7, #2
 800787a:	2300      	movs	r3, #0
 800787c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007880:	4e77      	ldr	r6, [pc, #476]	; (8007a60 <_dtoa_r+0x5a8>)
 8007882:	1124      	asrs	r4, r4, #4
 8007884:	2c00      	cmp	r4, #0
 8007886:	f040 8084 	bne.w	8007992 <_dtoa_r+0x4da>
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1d2      	bne.n	8007834 <_dtoa_r+0x37c>
 800788e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 808b 	beq.w	80079ac <_dtoa_r+0x4f4>
 8007896:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800789a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800789e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078a2:	2200      	movs	r2, #0
 80078a4:	4b6f      	ldr	r3, [pc, #444]	; (8007a64 <_dtoa_r+0x5ac>)
 80078a6:	f7fb fb67 	bl	8002f78 <__aeabi_dcmplt>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d07e      	beq.n	80079ac <_dtoa_r+0x4f4>
 80078ae:	9b08      	ldr	r3, [sp, #32]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d07b      	beq.n	80079ac <_dtoa_r+0x4f4>
 80078b4:	f1b9 0f00 	cmp.w	r9, #0
 80078b8:	dd38      	ble.n	800792c <_dtoa_r+0x474>
 80078ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078be:	2200      	movs	r2, #0
 80078c0:	4b69      	ldr	r3, [pc, #420]	; (8007a68 <_dtoa_r+0x5b0>)
 80078c2:	f7fb f8e7 	bl	8002a94 <__aeabi_dmul>
 80078c6:	464c      	mov	r4, r9
 80078c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078cc:	f10a 38ff 	add.w	r8, sl, #4294967295
 80078d0:	3701      	adds	r7, #1
 80078d2:	4638      	mov	r0, r7
 80078d4:	f7fb f874 	bl	80029c0 <__aeabi_i2d>
 80078d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078dc:	f7fb f8da 	bl	8002a94 <__aeabi_dmul>
 80078e0:	2200      	movs	r2, #0
 80078e2:	4b62      	ldr	r3, [pc, #392]	; (8007a6c <_dtoa_r+0x5b4>)
 80078e4:	f7fa ff20 	bl	8002728 <__adddf3>
 80078e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80078ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80078f0:	9611      	str	r6, [sp, #68]	; 0x44
 80078f2:	2c00      	cmp	r4, #0
 80078f4:	d15d      	bne.n	80079b2 <_dtoa_r+0x4fa>
 80078f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078fa:	2200      	movs	r2, #0
 80078fc:	4b5c      	ldr	r3, [pc, #368]	; (8007a70 <_dtoa_r+0x5b8>)
 80078fe:	f7fa ff11 	bl	8002724 <__aeabi_dsub>
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800790a:	4633      	mov	r3, r6
 800790c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800790e:	f7fb fb51 	bl	8002fb4 <__aeabi_dcmpgt>
 8007912:	2800      	cmp	r0, #0
 8007914:	f040 829c 	bne.w	8007e50 <_dtoa_r+0x998>
 8007918:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800791c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800791e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007922:	f7fb fb29 	bl	8002f78 <__aeabi_dcmplt>
 8007926:	2800      	cmp	r0, #0
 8007928:	f040 8290 	bne.w	8007e4c <_dtoa_r+0x994>
 800792c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007930:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007934:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007936:	2b00      	cmp	r3, #0
 8007938:	f2c0 8152 	blt.w	8007be0 <_dtoa_r+0x728>
 800793c:	f1ba 0f0e 	cmp.w	sl, #14
 8007940:	f300 814e 	bgt.w	8007be0 <_dtoa_r+0x728>
 8007944:	4b45      	ldr	r3, [pc, #276]	; (8007a5c <_dtoa_r+0x5a4>)
 8007946:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800794a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800794e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007952:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007954:	2b00      	cmp	r3, #0
 8007956:	f280 80db 	bge.w	8007b10 <_dtoa_r+0x658>
 800795a:	9b08      	ldr	r3, [sp, #32]
 800795c:	2b00      	cmp	r3, #0
 800795e:	f300 80d7 	bgt.w	8007b10 <_dtoa_r+0x658>
 8007962:	f040 8272 	bne.w	8007e4a <_dtoa_r+0x992>
 8007966:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800796a:	2200      	movs	r2, #0
 800796c:	4b40      	ldr	r3, [pc, #256]	; (8007a70 <_dtoa_r+0x5b8>)
 800796e:	f7fb f891 	bl	8002a94 <__aeabi_dmul>
 8007972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007976:	f7fb fb13 	bl	8002fa0 <__aeabi_dcmpge>
 800797a:	9c08      	ldr	r4, [sp, #32]
 800797c:	4626      	mov	r6, r4
 800797e:	2800      	cmp	r0, #0
 8007980:	f040 8248 	bne.w	8007e14 <_dtoa_r+0x95c>
 8007984:	2331      	movs	r3, #49	; 0x31
 8007986:	9f03      	ldr	r7, [sp, #12]
 8007988:	f10a 0a01 	add.w	sl, sl, #1
 800798c:	f807 3b01 	strb.w	r3, [r7], #1
 8007990:	e244      	b.n	8007e1c <_dtoa_r+0x964>
 8007992:	07e2      	lsls	r2, r4, #31
 8007994:	d505      	bpl.n	80079a2 <_dtoa_r+0x4ea>
 8007996:	e9d6 2300 	ldrd	r2, r3, [r6]
 800799a:	f7fb f87b 	bl	8002a94 <__aeabi_dmul>
 800799e:	2301      	movs	r3, #1
 80079a0:	3701      	adds	r7, #1
 80079a2:	1064      	asrs	r4, r4, #1
 80079a4:	3608      	adds	r6, #8
 80079a6:	e76d      	b.n	8007884 <_dtoa_r+0x3cc>
 80079a8:	2702      	movs	r7, #2
 80079aa:	e770      	b.n	800788e <_dtoa_r+0x3d6>
 80079ac:	46d0      	mov	r8, sl
 80079ae:	9c08      	ldr	r4, [sp, #32]
 80079b0:	e78f      	b.n	80078d2 <_dtoa_r+0x41a>
 80079b2:	9903      	ldr	r1, [sp, #12]
 80079b4:	4b29      	ldr	r3, [pc, #164]	; (8007a5c <_dtoa_r+0x5a4>)
 80079b6:	4421      	add	r1, r4
 80079b8:	9112      	str	r1, [sp, #72]	; 0x48
 80079ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80079c0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80079c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80079c8:	2900      	cmp	r1, #0
 80079ca:	d055      	beq.n	8007a78 <_dtoa_r+0x5c0>
 80079cc:	2000      	movs	r0, #0
 80079ce:	4929      	ldr	r1, [pc, #164]	; (8007a74 <_dtoa_r+0x5bc>)
 80079d0:	f7fb f98a 	bl	8002ce8 <__aeabi_ddiv>
 80079d4:	463b      	mov	r3, r7
 80079d6:	4632      	mov	r2, r6
 80079d8:	f7fa fea4 	bl	8002724 <__aeabi_dsub>
 80079dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80079e0:	9f03      	ldr	r7, [sp, #12]
 80079e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079e6:	f7fb fb05 	bl	8002ff4 <__aeabi_d2iz>
 80079ea:	4604      	mov	r4, r0
 80079ec:	f7fa ffe8 	bl	80029c0 <__aeabi_i2d>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079f8:	f7fa fe94 	bl	8002724 <__aeabi_dsub>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	3430      	adds	r4, #48	; 0x30
 8007a02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a0a:	f807 4b01 	strb.w	r4, [r7], #1
 8007a0e:	f7fb fab3 	bl	8002f78 <__aeabi_dcmplt>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	d174      	bne.n	8007b00 <_dtoa_r+0x648>
 8007a16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	4911      	ldr	r1, [pc, #68]	; (8007a64 <_dtoa_r+0x5ac>)
 8007a1e:	f7fa fe81 	bl	8002724 <__aeabi_dsub>
 8007a22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a26:	f7fb faa7 	bl	8002f78 <__aeabi_dcmplt>
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	f040 80b7 	bne.w	8007b9e <_dtoa_r+0x6e6>
 8007a30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a32:	429f      	cmp	r7, r3
 8007a34:	f43f af7a 	beq.w	800792c <_dtoa_r+0x474>
 8007a38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	4b0a      	ldr	r3, [pc, #40]	; (8007a68 <_dtoa_r+0x5b0>)
 8007a40:	f7fb f828 	bl	8002a94 <__aeabi_dmul>
 8007a44:	2200      	movs	r2, #0
 8007a46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a4e:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <_dtoa_r+0x5b0>)
 8007a50:	f7fb f820 	bl	8002a94 <__aeabi_dmul>
 8007a54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a58:	e7c3      	b.n	80079e2 <_dtoa_r+0x52a>
 8007a5a:	bf00      	nop
 8007a5c:	0801bee0 	.word	0x0801bee0
 8007a60:	0801beb8 	.word	0x0801beb8
 8007a64:	3ff00000 	.word	0x3ff00000
 8007a68:	40240000 	.word	0x40240000
 8007a6c:	401c0000 	.word	0x401c0000
 8007a70:	40140000 	.word	0x40140000
 8007a74:	3fe00000 	.word	0x3fe00000
 8007a78:	4630      	mov	r0, r6
 8007a7a:	4639      	mov	r1, r7
 8007a7c:	f7fb f80a 	bl	8002a94 <__aeabi_dmul>
 8007a80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a82:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a86:	9c03      	ldr	r4, [sp, #12]
 8007a88:	9314      	str	r3, [sp, #80]	; 0x50
 8007a8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a8e:	f7fb fab1 	bl	8002ff4 <__aeabi_d2iz>
 8007a92:	9015      	str	r0, [sp, #84]	; 0x54
 8007a94:	f7fa ff94 	bl	80029c0 <__aeabi_i2d>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007aa0:	f7fa fe40 	bl	8002724 <__aeabi_dsub>
 8007aa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007aa6:	4606      	mov	r6, r0
 8007aa8:	3330      	adds	r3, #48	; 0x30
 8007aaa:	f804 3b01 	strb.w	r3, [r4], #1
 8007aae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ab0:	460f      	mov	r7, r1
 8007ab2:	429c      	cmp	r4, r3
 8007ab4:	f04f 0200 	mov.w	r2, #0
 8007ab8:	d124      	bne.n	8007b04 <_dtoa_r+0x64c>
 8007aba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007abe:	4bb0      	ldr	r3, [pc, #704]	; (8007d80 <_dtoa_r+0x8c8>)
 8007ac0:	f7fa fe32 	bl	8002728 <__adddf3>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	4630      	mov	r0, r6
 8007aca:	4639      	mov	r1, r7
 8007acc:	f7fb fa72 	bl	8002fb4 <__aeabi_dcmpgt>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	d163      	bne.n	8007b9c <_dtoa_r+0x6e4>
 8007ad4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ad8:	2000      	movs	r0, #0
 8007ada:	49a9      	ldr	r1, [pc, #676]	; (8007d80 <_dtoa_r+0x8c8>)
 8007adc:	f7fa fe22 	bl	8002724 <__aeabi_dsub>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	4639      	mov	r1, r7
 8007ae8:	f7fb fa46 	bl	8002f78 <__aeabi_dcmplt>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	f43f af1d 	beq.w	800792c <_dtoa_r+0x474>
 8007af2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007af4:	1e7b      	subs	r3, r7, #1
 8007af6:	9314      	str	r3, [sp, #80]	; 0x50
 8007af8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007afc:	2b30      	cmp	r3, #48	; 0x30
 8007afe:	d0f8      	beq.n	8007af2 <_dtoa_r+0x63a>
 8007b00:	46c2      	mov	sl, r8
 8007b02:	e03b      	b.n	8007b7c <_dtoa_r+0x6c4>
 8007b04:	4b9f      	ldr	r3, [pc, #636]	; (8007d84 <_dtoa_r+0x8cc>)
 8007b06:	f7fa ffc5 	bl	8002a94 <__aeabi_dmul>
 8007b0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b0e:	e7bc      	b.n	8007a8a <_dtoa_r+0x5d2>
 8007b10:	9f03      	ldr	r7, [sp, #12]
 8007b12:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007b16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b1a:	4640      	mov	r0, r8
 8007b1c:	4649      	mov	r1, r9
 8007b1e:	f7fb f8e3 	bl	8002ce8 <__aeabi_ddiv>
 8007b22:	f7fb fa67 	bl	8002ff4 <__aeabi_d2iz>
 8007b26:	4604      	mov	r4, r0
 8007b28:	f7fa ff4a 	bl	80029c0 <__aeabi_i2d>
 8007b2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b30:	f7fa ffb0 	bl	8002a94 <__aeabi_dmul>
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	4640      	mov	r0, r8
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	f7fa fdf2 	bl	8002724 <__aeabi_dsub>
 8007b40:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007b44:	f807 6b01 	strb.w	r6, [r7], #1
 8007b48:	9e03      	ldr	r6, [sp, #12]
 8007b4a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007b4e:	1bbe      	subs	r6, r7, r6
 8007b50:	45b4      	cmp	ip, r6
 8007b52:	4602      	mov	r2, r0
 8007b54:	460b      	mov	r3, r1
 8007b56:	d136      	bne.n	8007bc6 <_dtoa_r+0x70e>
 8007b58:	f7fa fde6 	bl	8002728 <__adddf3>
 8007b5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b60:	4680      	mov	r8, r0
 8007b62:	4689      	mov	r9, r1
 8007b64:	f7fb fa26 	bl	8002fb4 <__aeabi_dcmpgt>
 8007b68:	bb58      	cbnz	r0, 8007bc2 <_dtoa_r+0x70a>
 8007b6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b6e:	4640      	mov	r0, r8
 8007b70:	4649      	mov	r1, r9
 8007b72:	f7fb f9f7 	bl	8002f64 <__aeabi_dcmpeq>
 8007b76:	b108      	cbz	r0, 8007b7c <_dtoa_r+0x6c4>
 8007b78:	07e1      	lsls	r1, r4, #31
 8007b7a:	d422      	bmi.n	8007bc2 <_dtoa_r+0x70a>
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	4659      	mov	r1, fp
 8007b80:	f000 fe68 	bl	8008854 <_Bfree>
 8007b84:	2300      	movs	r3, #0
 8007b86:	703b      	strb	r3, [r7, #0]
 8007b88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007b8a:	f10a 0001 	add.w	r0, sl, #1
 8007b8e:	6018      	str	r0, [r3, #0]
 8007b90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f43f acde 	beq.w	8007554 <_dtoa_r+0x9c>
 8007b98:	601f      	str	r7, [r3, #0]
 8007b9a:	e4db      	b.n	8007554 <_dtoa_r+0x9c>
 8007b9c:	4627      	mov	r7, r4
 8007b9e:	463b      	mov	r3, r7
 8007ba0:	461f      	mov	r7, r3
 8007ba2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ba6:	2a39      	cmp	r2, #57	; 0x39
 8007ba8:	d107      	bne.n	8007bba <_dtoa_r+0x702>
 8007baa:	9a03      	ldr	r2, [sp, #12]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d1f7      	bne.n	8007ba0 <_dtoa_r+0x6e8>
 8007bb0:	2230      	movs	r2, #48	; 0x30
 8007bb2:	9903      	ldr	r1, [sp, #12]
 8007bb4:	f108 0801 	add.w	r8, r8, #1
 8007bb8:	700a      	strb	r2, [r1, #0]
 8007bba:	781a      	ldrb	r2, [r3, #0]
 8007bbc:	3201      	adds	r2, #1
 8007bbe:	701a      	strb	r2, [r3, #0]
 8007bc0:	e79e      	b.n	8007b00 <_dtoa_r+0x648>
 8007bc2:	46d0      	mov	r8, sl
 8007bc4:	e7eb      	b.n	8007b9e <_dtoa_r+0x6e6>
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	4b6e      	ldr	r3, [pc, #440]	; (8007d84 <_dtoa_r+0x8cc>)
 8007bca:	f7fa ff63 	bl	8002a94 <__aeabi_dmul>
 8007bce:	2200      	movs	r2, #0
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	4680      	mov	r8, r0
 8007bd4:	4689      	mov	r9, r1
 8007bd6:	f7fb f9c5 	bl	8002f64 <__aeabi_dcmpeq>
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	d09b      	beq.n	8007b16 <_dtoa_r+0x65e>
 8007bde:	e7cd      	b.n	8007b7c <_dtoa_r+0x6c4>
 8007be0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007be2:	2a00      	cmp	r2, #0
 8007be4:	f000 80d0 	beq.w	8007d88 <_dtoa_r+0x8d0>
 8007be8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007bea:	2a01      	cmp	r2, #1
 8007bec:	f300 80ae 	bgt.w	8007d4c <_dtoa_r+0x894>
 8007bf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007bf2:	2a00      	cmp	r2, #0
 8007bf4:	f000 80a6 	beq.w	8007d44 <_dtoa_r+0x88c>
 8007bf8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007bfc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007bfe:	9f06      	ldr	r7, [sp, #24]
 8007c00:	9a06      	ldr	r2, [sp, #24]
 8007c02:	2101      	movs	r1, #1
 8007c04:	441a      	add	r2, r3
 8007c06:	9206      	str	r2, [sp, #24]
 8007c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	441a      	add	r2, r3
 8007c0e:	9209      	str	r2, [sp, #36]	; 0x24
 8007c10:	f000 ff20 	bl	8008a54 <__i2b>
 8007c14:	4606      	mov	r6, r0
 8007c16:	2f00      	cmp	r7, #0
 8007c18:	dd0c      	ble.n	8007c34 <_dtoa_r+0x77c>
 8007c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	dd09      	ble.n	8007c34 <_dtoa_r+0x77c>
 8007c20:	42bb      	cmp	r3, r7
 8007c22:	bfa8      	it	ge
 8007c24:	463b      	movge	r3, r7
 8007c26:	9a06      	ldr	r2, [sp, #24]
 8007c28:	1aff      	subs	r7, r7, r3
 8007c2a:	1ad2      	subs	r2, r2, r3
 8007c2c:	9206      	str	r2, [sp, #24]
 8007c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	9309      	str	r3, [sp, #36]	; 0x24
 8007c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c36:	b1f3      	cbz	r3, 8007c76 <_dtoa_r+0x7be>
 8007c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f000 80a8 	beq.w	8007d90 <_dtoa_r+0x8d8>
 8007c40:	2c00      	cmp	r4, #0
 8007c42:	dd10      	ble.n	8007c66 <_dtoa_r+0x7ae>
 8007c44:	4631      	mov	r1, r6
 8007c46:	4622      	mov	r2, r4
 8007c48:	4628      	mov	r0, r5
 8007c4a:	f000 ffc1 	bl	8008bd0 <__pow5mult>
 8007c4e:	465a      	mov	r2, fp
 8007c50:	4601      	mov	r1, r0
 8007c52:	4606      	mov	r6, r0
 8007c54:	4628      	mov	r0, r5
 8007c56:	f000 ff13 	bl	8008a80 <__multiply>
 8007c5a:	4680      	mov	r8, r0
 8007c5c:	4659      	mov	r1, fp
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f000 fdf8 	bl	8008854 <_Bfree>
 8007c64:	46c3      	mov	fp, r8
 8007c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c68:	1b1a      	subs	r2, r3, r4
 8007c6a:	d004      	beq.n	8007c76 <_dtoa_r+0x7be>
 8007c6c:	4659      	mov	r1, fp
 8007c6e:	4628      	mov	r0, r5
 8007c70:	f000 ffae 	bl	8008bd0 <__pow5mult>
 8007c74:	4683      	mov	fp, r0
 8007c76:	2101      	movs	r1, #1
 8007c78:	4628      	mov	r0, r5
 8007c7a:	f000 feeb 	bl	8008a54 <__i2b>
 8007c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c80:	4604      	mov	r4, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f340 8086 	ble.w	8007d94 <_dtoa_r+0x8dc>
 8007c88:	461a      	mov	r2, r3
 8007c8a:	4601      	mov	r1, r0
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	f000 ff9f 	bl	8008bd0 <__pow5mult>
 8007c92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c94:	4604      	mov	r4, r0
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	dd7f      	ble.n	8007d9a <_dtoa_r+0x8e2>
 8007c9a:	f04f 0800 	mov.w	r8, #0
 8007c9e:	6923      	ldr	r3, [r4, #16]
 8007ca0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ca4:	6918      	ldr	r0, [r3, #16]
 8007ca6:	f000 fe87 	bl	80089b8 <__hi0bits>
 8007caa:	f1c0 0020 	rsb	r0, r0, #32
 8007cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cb0:	4418      	add	r0, r3
 8007cb2:	f010 001f 	ands.w	r0, r0, #31
 8007cb6:	f000 8092 	beq.w	8007dde <_dtoa_r+0x926>
 8007cba:	f1c0 0320 	rsb	r3, r0, #32
 8007cbe:	2b04      	cmp	r3, #4
 8007cc0:	f340 808a 	ble.w	8007dd8 <_dtoa_r+0x920>
 8007cc4:	f1c0 001c 	rsb	r0, r0, #28
 8007cc8:	9b06      	ldr	r3, [sp, #24]
 8007cca:	4407      	add	r7, r0
 8007ccc:	4403      	add	r3, r0
 8007cce:	9306      	str	r3, [sp, #24]
 8007cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd2:	4403      	add	r3, r0
 8007cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd6:	9b06      	ldr	r3, [sp, #24]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	dd05      	ble.n	8007ce8 <_dtoa_r+0x830>
 8007cdc:	4659      	mov	r1, fp
 8007cde:	461a      	mov	r2, r3
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	f000 ffcf 	bl	8008c84 <__lshift>
 8007ce6:	4683      	mov	fp, r0
 8007ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	dd05      	ble.n	8007cfa <_dtoa_r+0x842>
 8007cee:	4621      	mov	r1, r4
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	f000 ffc6 	bl	8008c84 <__lshift>
 8007cf8:	4604      	mov	r4, r0
 8007cfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d070      	beq.n	8007de2 <_dtoa_r+0x92a>
 8007d00:	4621      	mov	r1, r4
 8007d02:	4658      	mov	r0, fp
 8007d04:	f001 f82e 	bl	8008d64 <__mcmp>
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	da6a      	bge.n	8007de2 <_dtoa_r+0x92a>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	4659      	mov	r1, fp
 8007d10:	220a      	movs	r2, #10
 8007d12:	4628      	mov	r0, r5
 8007d14:	f000 fdc0 	bl	8008898 <__multadd>
 8007d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d1a:	4683      	mov	fp, r0
 8007d1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 8194 	beq.w	800804e <_dtoa_r+0xb96>
 8007d26:	4631      	mov	r1, r6
 8007d28:	2300      	movs	r3, #0
 8007d2a:	220a      	movs	r2, #10
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	f000 fdb3 	bl	8008898 <__multadd>
 8007d32:	f1b9 0f00 	cmp.w	r9, #0
 8007d36:	4606      	mov	r6, r0
 8007d38:	f300 8093 	bgt.w	8007e62 <_dtoa_r+0x9aa>
 8007d3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	dc57      	bgt.n	8007df2 <_dtoa_r+0x93a>
 8007d42:	e08e      	b.n	8007e62 <_dtoa_r+0x9aa>
 8007d44:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007d46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d4a:	e757      	b.n	8007bfc <_dtoa_r+0x744>
 8007d4c:	9b08      	ldr	r3, [sp, #32]
 8007d4e:	1e5c      	subs	r4, r3, #1
 8007d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d52:	42a3      	cmp	r3, r4
 8007d54:	bfb7      	itett	lt
 8007d56:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007d58:	1b1c      	subge	r4, r3, r4
 8007d5a:	1ae2      	sublt	r2, r4, r3
 8007d5c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007d5e:	bfbe      	ittt	lt
 8007d60:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007d62:	189b      	addlt	r3, r3, r2
 8007d64:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007d66:	9b08      	ldr	r3, [sp, #32]
 8007d68:	bfb8      	it	lt
 8007d6a:	2400      	movlt	r4, #0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	bfbb      	ittet	lt
 8007d70:	9b06      	ldrlt	r3, [sp, #24]
 8007d72:	9a08      	ldrlt	r2, [sp, #32]
 8007d74:	9f06      	ldrge	r7, [sp, #24]
 8007d76:	1a9f      	sublt	r7, r3, r2
 8007d78:	bfac      	ite	ge
 8007d7a:	9b08      	ldrge	r3, [sp, #32]
 8007d7c:	2300      	movlt	r3, #0
 8007d7e:	e73f      	b.n	8007c00 <_dtoa_r+0x748>
 8007d80:	3fe00000 	.word	0x3fe00000
 8007d84:	40240000 	.word	0x40240000
 8007d88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d8a:	9f06      	ldr	r7, [sp, #24]
 8007d8c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007d8e:	e742      	b.n	8007c16 <_dtoa_r+0x75e>
 8007d90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d92:	e76b      	b.n	8007c6c <_dtoa_r+0x7b4>
 8007d94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	dc19      	bgt.n	8007dce <_dtoa_r+0x916>
 8007d9a:	9b04      	ldr	r3, [sp, #16]
 8007d9c:	b9bb      	cbnz	r3, 8007dce <_dtoa_r+0x916>
 8007d9e:	9b05      	ldr	r3, [sp, #20]
 8007da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007da4:	b99b      	cbnz	r3, 8007dce <_dtoa_r+0x916>
 8007da6:	9b05      	ldr	r3, [sp, #20]
 8007da8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007dac:	0d1b      	lsrs	r3, r3, #20
 8007dae:	051b      	lsls	r3, r3, #20
 8007db0:	b183      	cbz	r3, 8007dd4 <_dtoa_r+0x91c>
 8007db2:	f04f 0801 	mov.w	r8, #1
 8007db6:	9b06      	ldr	r3, [sp, #24]
 8007db8:	3301      	adds	r3, #1
 8007dba:	9306      	str	r3, [sp, #24]
 8007dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8007dc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f47f af6a 	bne.w	8007c9e <_dtoa_r+0x7e6>
 8007dca:	2001      	movs	r0, #1
 8007dcc:	e76f      	b.n	8007cae <_dtoa_r+0x7f6>
 8007dce:	f04f 0800 	mov.w	r8, #0
 8007dd2:	e7f6      	b.n	8007dc2 <_dtoa_r+0x90a>
 8007dd4:	4698      	mov	r8, r3
 8007dd6:	e7f4      	b.n	8007dc2 <_dtoa_r+0x90a>
 8007dd8:	f43f af7d 	beq.w	8007cd6 <_dtoa_r+0x81e>
 8007ddc:	4618      	mov	r0, r3
 8007dde:	301c      	adds	r0, #28
 8007de0:	e772      	b.n	8007cc8 <_dtoa_r+0x810>
 8007de2:	9b08      	ldr	r3, [sp, #32]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	dc36      	bgt.n	8007e56 <_dtoa_r+0x99e>
 8007de8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	dd33      	ble.n	8007e56 <_dtoa_r+0x99e>
 8007dee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007df2:	f1b9 0f00 	cmp.w	r9, #0
 8007df6:	d10d      	bne.n	8007e14 <_dtoa_r+0x95c>
 8007df8:	4621      	mov	r1, r4
 8007dfa:	464b      	mov	r3, r9
 8007dfc:	2205      	movs	r2, #5
 8007dfe:	4628      	mov	r0, r5
 8007e00:	f000 fd4a 	bl	8008898 <__multadd>
 8007e04:	4601      	mov	r1, r0
 8007e06:	4604      	mov	r4, r0
 8007e08:	4658      	mov	r0, fp
 8007e0a:	f000 ffab 	bl	8008d64 <__mcmp>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	f73f adb8 	bgt.w	8007984 <_dtoa_r+0x4cc>
 8007e14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e16:	9f03      	ldr	r7, [sp, #12]
 8007e18:	ea6f 0a03 	mvn.w	sl, r3
 8007e1c:	f04f 0800 	mov.w	r8, #0
 8007e20:	4621      	mov	r1, r4
 8007e22:	4628      	mov	r0, r5
 8007e24:	f000 fd16 	bl	8008854 <_Bfree>
 8007e28:	2e00      	cmp	r6, #0
 8007e2a:	f43f aea7 	beq.w	8007b7c <_dtoa_r+0x6c4>
 8007e2e:	f1b8 0f00 	cmp.w	r8, #0
 8007e32:	d005      	beq.n	8007e40 <_dtoa_r+0x988>
 8007e34:	45b0      	cmp	r8, r6
 8007e36:	d003      	beq.n	8007e40 <_dtoa_r+0x988>
 8007e38:	4641      	mov	r1, r8
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	f000 fd0a 	bl	8008854 <_Bfree>
 8007e40:	4631      	mov	r1, r6
 8007e42:	4628      	mov	r0, r5
 8007e44:	f000 fd06 	bl	8008854 <_Bfree>
 8007e48:	e698      	b.n	8007b7c <_dtoa_r+0x6c4>
 8007e4a:	2400      	movs	r4, #0
 8007e4c:	4626      	mov	r6, r4
 8007e4e:	e7e1      	b.n	8007e14 <_dtoa_r+0x95c>
 8007e50:	46c2      	mov	sl, r8
 8007e52:	4626      	mov	r6, r4
 8007e54:	e596      	b.n	8007984 <_dtoa_r+0x4cc>
 8007e56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f000 80fd 	beq.w	800805c <_dtoa_r+0xba4>
 8007e62:	2f00      	cmp	r7, #0
 8007e64:	dd05      	ble.n	8007e72 <_dtoa_r+0x9ba>
 8007e66:	4631      	mov	r1, r6
 8007e68:	463a      	mov	r2, r7
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	f000 ff0a 	bl	8008c84 <__lshift>
 8007e70:	4606      	mov	r6, r0
 8007e72:	f1b8 0f00 	cmp.w	r8, #0
 8007e76:	d05c      	beq.n	8007f32 <_dtoa_r+0xa7a>
 8007e78:	4628      	mov	r0, r5
 8007e7a:	6871      	ldr	r1, [r6, #4]
 8007e7c:	f000 fcaa 	bl	80087d4 <_Balloc>
 8007e80:	4607      	mov	r7, r0
 8007e82:	b928      	cbnz	r0, 8007e90 <_dtoa_r+0x9d8>
 8007e84:	4602      	mov	r2, r0
 8007e86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007e8a:	4b7f      	ldr	r3, [pc, #508]	; (8008088 <_dtoa_r+0xbd0>)
 8007e8c:	f7ff bb28 	b.w	80074e0 <_dtoa_r+0x28>
 8007e90:	6932      	ldr	r2, [r6, #16]
 8007e92:	f106 010c 	add.w	r1, r6, #12
 8007e96:	3202      	adds	r2, #2
 8007e98:	0092      	lsls	r2, r2, #2
 8007e9a:	300c      	adds	r0, #12
 8007e9c:	f000 fc8c 	bl	80087b8 <memcpy>
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	4639      	mov	r1, r7
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	f000 feed 	bl	8008c84 <__lshift>
 8007eaa:	46b0      	mov	r8, r6
 8007eac:	4606      	mov	r6, r0
 8007eae:	9b03      	ldr	r3, [sp, #12]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	9308      	str	r3, [sp, #32]
 8007eb4:	9b03      	ldr	r3, [sp, #12]
 8007eb6:	444b      	add	r3, r9
 8007eb8:	930a      	str	r3, [sp, #40]	; 0x28
 8007eba:	9b04      	ldr	r3, [sp, #16]
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ec2:	9b08      	ldr	r3, [sp, #32]
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	4658      	mov	r0, fp
 8007eca:	9304      	str	r3, [sp, #16]
 8007ecc:	f7ff fa66 	bl	800739c <quorem>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	4641      	mov	r1, r8
 8007ed4:	3330      	adds	r3, #48	; 0x30
 8007ed6:	9006      	str	r0, [sp, #24]
 8007ed8:	4658      	mov	r0, fp
 8007eda:	930b      	str	r3, [sp, #44]	; 0x2c
 8007edc:	f000 ff42 	bl	8008d64 <__mcmp>
 8007ee0:	4632      	mov	r2, r6
 8007ee2:	4681      	mov	r9, r0
 8007ee4:	4621      	mov	r1, r4
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f000 ff58 	bl	8008d9c <__mdiff>
 8007eec:	68c2      	ldr	r2, [r0, #12]
 8007eee:	4607      	mov	r7, r0
 8007ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ef2:	bb02      	cbnz	r2, 8007f36 <_dtoa_r+0xa7e>
 8007ef4:	4601      	mov	r1, r0
 8007ef6:	4658      	mov	r0, fp
 8007ef8:	f000 ff34 	bl	8008d64 <__mcmp>
 8007efc:	4602      	mov	r2, r0
 8007efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f00:	4639      	mov	r1, r7
 8007f02:	4628      	mov	r0, r5
 8007f04:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007f08:	f000 fca4 	bl	8008854 <_Bfree>
 8007f0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f10:	9f08      	ldr	r7, [sp, #32]
 8007f12:	ea43 0102 	orr.w	r1, r3, r2
 8007f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f18:	430b      	orrs	r3, r1
 8007f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f1c:	d10d      	bne.n	8007f3a <_dtoa_r+0xa82>
 8007f1e:	2b39      	cmp	r3, #57	; 0x39
 8007f20:	d029      	beq.n	8007f76 <_dtoa_r+0xabe>
 8007f22:	f1b9 0f00 	cmp.w	r9, #0
 8007f26:	dd01      	ble.n	8007f2c <_dtoa_r+0xa74>
 8007f28:	9b06      	ldr	r3, [sp, #24]
 8007f2a:	3331      	adds	r3, #49	; 0x31
 8007f2c:	9a04      	ldr	r2, [sp, #16]
 8007f2e:	7013      	strb	r3, [r2, #0]
 8007f30:	e776      	b.n	8007e20 <_dtoa_r+0x968>
 8007f32:	4630      	mov	r0, r6
 8007f34:	e7b9      	b.n	8007eaa <_dtoa_r+0x9f2>
 8007f36:	2201      	movs	r2, #1
 8007f38:	e7e2      	b.n	8007f00 <_dtoa_r+0xa48>
 8007f3a:	f1b9 0f00 	cmp.w	r9, #0
 8007f3e:	db06      	blt.n	8007f4e <_dtoa_r+0xa96>
 8007f40:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007f42:	ea41 0909 	orr.w	r9, r1, r9
 8007f46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f48:	ea59 0101 	orrs.w	r1, r9, r1
 8007f4c:	d120      	bne.n	8007f90 <_dtoa_r+0xad8>
 8007f4e:	2a00      	cmp	r2, #0
 8007f50:	ddec      	ble.n	8007f2c <_dtoa_r+0xa74>
 8007f52:	4659      	mov	r1, fp
 8007f54:	2201      	movs	r2, #1
 8007f56:	4628      	mov	r0, r5
 8007f58:	9308      	str	r3, [sp, #32]
 8007f5a:	f000 fe93 	bl	8008c84 <__lshift>
 8007f5e:	4621      	mov	r1, r4
 8007f60:	4683      	mov	fp, r0
 8007f62:	f000 feff 	bl	8008d64 <__mcmp>
 8007f66:	2800      	cmp	r0, #0
 8007f68:	9b08      	ldr	r3, [sp, #32]
 8007f6a:	dc02      	bgt.n	8007f72 <_dtoa_r+0xaba>
 8007f6c:	d1de      	bne.n	8007f2c <_dtoa_r+0xa74>
 8007f6e:	07da      	lsls	r2, r3, #31
 8007f70:	d5dc      	bpl.n	8007f2c <_dtoa_r+0xa74>
 8007f72:	2b39      	cmp	r3, #57	; 0x39
 8007f74:	d1d8      	bne.n	8007f28 <_dtoa_r+0xa70>
 8007f76:	2339      	movs	r3, #57	; 0x39
 8007f78:	9a04      	ldr	r2, [sp, #16]
 8007f7a:	7013      	strb	r3, [r2, #0]
 8007f7c:	463b      	mov	r3, r7
 8007f7e:	461f      	mov	r7, r3
 8007f80:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007f84:	3b01      	subs	r3, #1
 8007f86:	2a39      	cmp	r2, #57	; 0x39
 8007f88:	d050      	beq.n	800802c <_dtoa_r+0xb74>
 8007f8a:	3201      	adds	r2, #1
 8007f8c:	701a      	strb	r2, [r3, #0]
 8007f8e:	e747      	b.n	8007e20 <_dtoa_r+0x968>
 8007f90:	2a00      	cmp	r2, #0
 8007f92:	dd03      	ble.n	8007f9c <_dtoa_r+0xae4>
 8007f94:	2b39      	cmp	r3, #57	; 0x39
 8007f96:	d0ee      	beq.n	8007f76 <_dtoa_r+0xabe>
 8007f98:	3301      	adds	r3, #1
 8007f9a:	e7c7      	b.n	8007f2c <_dtoa_r+0xa74>
 8007f9c:	9a08      	ldr	r2, [sp, #32]
 8007f9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007fa0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007fa4:	428a      	cmp	r2, r1
 8007fa6:	d02a      	beq.n	8007ffe <_dtoa_r+0xb46>
 8007fa8:	4659      	mov	r1, fp
 8007faa:	2300      	movs	r3, #0
 8007fac:	220a      	movs	r2, #10
 8007fae:	4628      	mov	r0, r5
 8007fb0:	f000 fc72 	bl	8008898 <__multadd>
 8007fb4:	45b0      	cmp	r8, r6
 8007fb6:	4683      	mov	fp, r0
 8007fb8:	f04f 0300 	mov.w	r3, #0
 8007fbc:	f04f 020a 	mov.w	r2, #10
 8007fc0:	4641      	mov	r1, r8
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	d107      	bne.n	8007fd6 <_dtoa_r+0xb1e>
 8007fc6:	f000 fc67 	bl	8008898 <__multadd>
 8007fca:	4680      	mov	r8, r0
 8007fcc:	4606      	mov	r6, r0
 8007fce:	9b08      	ldr	r3, [sp, #32]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	9308      	str	r3, [sp, #32]
 8007fd4:	e775      	b.n	8007ec2 <_dtoa_r+0xa0a>
 8007fd6:	f000 fc5f 	bl	8008898 <__multadd>
 8007fda:	4631      	mov	r1, r6
 8007fdc:	4680      	mov	r8, r0
 8007fde:	2300      	movs	r3, #0
 8007fe0:	220a      	movs	r2, #10
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	f000 fc58 	bl	8008898 <__multadd>
 8007fe8:	4606      	mov	r6, r0
 8007fea:	e7f0      	b.n	8007fce <_dtoa_r+0xb16>
 8007fec:	f1b9 0f00 	cmp.w	r9, #0
 8007ff0:	bfcc      	ite	gt
 8007ff2:	464f      	movgt	r7, r9
 8007ff4:	2701      	movle	r7, #1
 8007ff6:	f04f 0800 	mov.w	r8, #0
 8007ffa:	9a03      	ldr	r2, [sp, #12]
 8007ffc:	4417      	add	r7, r2
 8007ffe:	4659      	mov	r1, fp
 8008000:	2201      	movs	r2, #1
 8008002:	4628      	mov	r0, r5
 8008004:	9308      	str	r3, [sp, #32]
 8008006:	f000 fe3d 	bl	8008c84 <__lshift>
 800800a:	4621      	mov	r1, r4
 800800c:	4683      	mov	fp, r0
 800800e:	f000 fea9 	bl	8008d64 <__mcmp>
 8008012:	2800      	cmp	r0, #0
 8008014:	dcb2      	bgt.n	8007f7c <_dtoa_r+0xac4>
 8008016:	d102      	bne.n	800801e <_dtoa_r+0xb66>
 8008018:	9b08      	ldr	r3, [sp, #32]
 800801a:	07db      	lsls	r3, r3, #31
 800801c:	d4ae      	bmi.n	8007f7c <_dtoa_r+0xac4>
 800801e:	463b      	mov	r3, r7
 8008020:	461f      	mov	r7, r3
 8008022:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008026:	2a30      	cmp	r2, #48	; 0x30
 8008028:	d0fa      	beq.n	8008020 <_dtoa_r+0xb68>
 800802a:	e6f9      	b.n	8007e20 <_dtoa_r+0x968>
 800802c:	9a03      	ldr	r2, [sp, #12]
 800802e:	429a      	cmp	r2, r3
 8008030:	d1a5      	bne.n	8007f7e <_dtoa_r+0xac6>
 8008032:	2331      	movs	r3, #49	; 0x31
 8008034:	f10a 0a01 	add.w	sl, sl, #1
 8008038:	e779      	b.n	8007f2e <_dtoa_r+0xa76>
 800803a:	4b14      	ldr	r3, [pc, #80]	; (800808c <_dtoa_r+0xbd4>)
 800803c:	f7ff baa8 	b.w	8007590 <_dtoa_r+0xd8>
 8008040:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008042:	2b00      	cmp	r3, #0
 8008044:	f47f aa81 	bne.w	800754a <_dtoa_r+0x92>
 8008048:	4b11      	ldr	r3, [pc, #68]	; (8008090 <_dtoa_r+0xbd8>)
 800804a:	f7ff baa1 	b.w	8007590 <_dtoa_r+0xd8>
 800804e:	f1b9 0f00 	cmp.w	r9, #0
 8008052:	dc03      	bgt.n	800805c <_dtoa_r+0xba4>
 8008054:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008056:	2b02      	cmp	r3, #2
 8008058:	f73f aecb 	bgt.w	8007df2 <_dtoa_r+0x93a>
 800805c:	9f03      	ldr	r7, [sp, #12]
 800805e:	4621      	mov	r1, r4
 8008060:	4658      	mov	r0, fp
 8008062:	f7ff f99b 	bl	800739c <quorem>
 8008066:	9a03      	ldr	r2, [sp, #12]
 8008068:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800806c:	f807 3b01 	strb.w	r3, [r7], #1
 8008070:	1aba      	subs	r2, r7, r2
 8008072:	4591      	cmp	r9, r2
 8008074:	ddba      	ble.n	8007fec <_dtoa_r+0xb34>
 8008076:	4659      	mov	r1, fp
 8008078:	2300      	movs	r3, #0
 800807a:	220a      	movs	r2, #10
 800807c:	4628      	mov	r0, r5
 800807e:	f000 fc0b 	bl	8008898 <__multadd>
 8008082:	4683      	mov	fp, r0
 8008084:	e7eb      	b.n	800805e <_dtoa_r+0xba6>
 8008086:	bf00      	nop
 8008088:	0801bdd0 	.word	0x0801bdd0
 800808c:	0801bbd0 	.word	0x0801bbd0
 8008090:	0801bd51 	.word	0x0801bd51

08008094 <rshift>:
 8008094:	6903      	ldr	r3, [r0, #16]
 8008096:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800809a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800809e:	f100 0414 	add.w	r4, r0, #20
 80080a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80080a6:	dd46      	ble.n	8008136 <rshift+0xa2>
 80080a8:	f011 011f 	ands.w	r1, r1, #31
 80080ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80080b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80080b4:	d10c      	bne.n	80080d0 <rshift+0x3c>
 80080b6:	4629      	mov	r1, r5
 80080b8:	f100 0710 	add.w	r7, r0, #16
 80080bc:	42b1      	cmp	r1, r6
 80080be:	d335      	bcc.n	800812c <rshift+0x98>
 80080c0:	1a9b      	subs	r3, r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	1eea      	subs	r2, r5, #3
 80080c6:	4296      	cmp	r6, r2
 80080c8:	bf38      	it	cc
 80080ca:	2300      	movcc	r3, #0
 80080cc:	4423      	add	r3, r4
 80080ce:	e015      	b.n	80080fc <rshift+0x68>
 80080d0:	46a1      	mov	r9, r4
 80080d2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80080d6:	f1c1 0820 	rsb	r8, r1, #32
 80080da:	40cf      	lsrs	r7, r1
 80080dc:	f105 0e04 	add.w	lr, r5, #4
 80080e0:	4576      	cmp	r6, lr
 80080e2:	46f4      	mov	ip, lr
 80080e4:	d816      	bhi.n	8008114 <rshift+0x80>
 80080e6:	1a9a      	subs	r2, r3, r2
 80080e8:	0092      	lsls	r2, r2, #2
 80080ea:	3a04      	subs	r2, #4
 80080ec:	3501      	adds	r5, #1
 80080ee:	42ae      	cmp	r6, r5
 80080f0:	bf38      	it	cc
 80080f2:	2200      	movcc	r2, #0
 80080f4:	18a3      	adds	r3, r4, r2
 80080f6:	50a7      	str	r7, [r4, r2]
 80080f8:	b107      	cbz	r7, 80080fc <rshift+0x68>
 80080fa:	3304      	adds	r3, #4
 80080fc:	42a3      	cmp	r3, r4
 80080fe:	eba3 0204 	sub.w	r2, r3, r4
 8008102:	bf08      	it	eq
 8008104:	2300      	moveq	r3, #0
 8008106:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800810a:	6102      	str	r2, [r0, #16]
 800810c:	bf08      	it	eq
 800810e:	6143      	streq	r3, [r0, #20]
 8008110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008114:	f8dc c000 	ldr.w	ip, [ip]
 8008118:	fa0c fc08 	lsl.w	ip, ip, r8
 800811c:	ea4c 0707 	orr.w	r7, ip, r7
 8008120:	f849 7b04 	str.w	r7, [r9], #4
 8008124:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008128:	40cf      	lsrs	r7, r1
 800812a:	e7d9      	b.n	80080e0 <rshift+0x4c>
 800812c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008130:	f847 cf04 	str.w	ip, [r7, #4]!
 8008134:	e7c2      	b.n	80080bc <rshift+0x28>
 8008136:	4623      	mov	r3, r4
 8008138:	e7e0      	b.n	80080fc <rshift+0x68>

0800813a <__hexdig_fun>:
 800813a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800813e:	2b09      	cmp	r3, #9
 8008140:	d802      	bhi.n	8008148 <__hexdig_fun+0xe>
 8008142:	3820      	subs	r0, #32
 8008144:	b2c0      	uxtb	r0, r0
 8008146:	4770      	bx	lr
 8008148:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800814c:	2b05      	cmp	r3, #5
 800814e:	d801      	bhi.n	8008154 <__hexdig_fun+0x1a>
 8008150:	3847      	subs	r0, #71	; 0x47
 8008152:	e7f7      	b.n	8008144 <__hexdig_fun+0xa>
 8008154:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008158:	2b05      	cmp	r3, #5
 800815a:	d801      	bhi.n	8008160 <__hexdig_fun+0x26>
 800815c:	3827      	subs	r0, #39	; 0x27
 800815e:	e7f1      	b.n	8008144 <__hexdig_fun+0xa>
 8008160:	2000      	movs	r0, #0
 8008162:	4770      	bx	lr

08008164 <__gethex>:
 8008164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008168:	b08b      	sub	sp, #44	; 0x2c
 800816a:	9305      	str	r3, [sp, #20]
 800816c:	4bb2      	ldr	r3, [pc, #712]	; (8008438 <__gethex+0x2d4>)
 800816e:	9002      	str	r0, [sp, #8]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	468b      	mov	fp, r1
 8008174:	4618      	mov	r0, r3
 8008176:	4690      	mov	r8, r2
 8008178:	9303      	str	r3, [sp, #12]
 800817a:	f7fa fac7 	bl	800270c <strlen>
 800817e:	4682      	mov	sl, r0
 8008180:	9b03      	ldr	r3, [sp, #12]
 8008182:	f8db 2000 	ldr.w	r2, [fp]
 8008186:	4403      	add	r3, r0
 8008188:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800818c:	9306      	str	r3, [sp, #24]
 800818e:	1c93      	adds	r3, r2, #2
 8008190:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008194:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008198:	32fe      	adds	r2, #254	; 0xfe
 800819a:	18d1      	adds	r1, r2, r3
 800819c:	461f      	mov	r7, r3
 800819e:	f813 0b01 	ldrb.w	r0, [r3], #1
 80081a2:	9101      	str	r1, [sp, #4]
 80081a4:	2830      	cmp	r0, #48	; 0x30
 80081a6:	d0f8      	beq.n	800819a <__gethex+0x36>
 80081a8:	f7ff ffc7 	bl	800813a <__hexdig_fun>
 80081ac:	4604      	mov	r4, r0
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d13a      	bne.n	8008228 <__gethex+0xc4>
 80081b2:	4652      	mov	r2, sl
 80081b4:	4638      	mov	r0, r7
 80081b6:	9903      	ldr	r1, [sp, #12]
 80081b8:	f001 fa26 	bl	8009608 <strncmp>
 80081bc:	4605      	mov	r5, r0
 80081be:	2800      	cmp	r0, #0
 80081c0:	d166      	bne.n	8008290 <__gethex+0x12c>
 80081c2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80081c6:	eb07 060a 	add.w	r6, r7, sl
 80081ca:	f7ff ffb6 	bl	800813a <__hexdig_fun>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	d060      	beq.n	8008294 <__gethex+0x130>
 80081d2:	4633      	mov	r3, r6
 80081d4:	7818      	ldrb	r0, [r3, #0]
 80081d6:	461f      	mov	r7, r3
 80081d8:	2830      	cmp	r0, #48	; 0x30
 80081da:	f103 0301 	add.w	r3, r3, #1
 80081de:	d0f9      	beq.n	80081d4 <__gethex+0x70>
 80081e0:	f7ff ffab 	bl	800813a <__hexdig_fun>
 80081e4:	2301      	movs	r3, #1
 80081e6:	fab0 f480 	clz	r4, r0
 80081ea:	4635      	mov	r5, r6
 80081ec:	0964      	lsrs	r4, r4, #5
 80081ee:	9301      	str	r3, [sp, #4]
 80081f0:	463a      	mov	r2, r7
 80081f2:	4616      	mov	r6, r2
 80081f4:	7830      	ldrb	r0, [r6, #0]
 80081f6:	3201      	adds	r2, #1
 80081f8:	f7ff ff9f 	bl	800813a <__hexdig_fun>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d1f8      	bne.n	80081f2 <__gethex+0x8e>
 8008200:	4652      	mov	r2, sl
 8008202:	4630      	mov	r0, r6
 8008204:	9903      	ldr	r1, [sp, #12]
 8008206:	f001 f9ff 	bl	8009608 <strncmp>
 800820a:	b980      	cbnz	r0, 800822e <__gethex+0xca>
 800820c:	b94d      	cbnz	r5, 8008222 <__gethex+0xbe>
 800820e:	eb06 050a 	add.w	r5, r6, sl
 8008212:	462a      	mov	r2, r5
 8008214:	4616      	mov	r6, r2
 8008216:	7830      	ldrb	r0, [r6, #0]
 8008218:	3201      	adds	r2, #1
 800821a:	f7ff ff8e 	bl	800813a <__hexdig_fun>
 800821e:	2800      	cmp	r0, #0
 8008220:	d1f8      	bne.n	8008214 <__gethex+0xb0>
 8008222:	1bad      	subs	r5, r5, r6
 8008224:	00ad      	lsls	r5, r5, #2
 8008226:	e004      	b.n	8008232 <__gethex+0xce>
 8008228:	2400      	movs	r4, #0
 800822a:	4625      	mov	r5, r4
 800822c:	e7e0      	b.n	80081f0 <__gethex+0x8c>
 800822e:	2d00      	cmp	r5, #0
 8008230:	d1f7      	bne.n	8008222 <__gethex+0xbe>
 8008232:	7833      	ldrb	r3, [r6, #0]
 8008234:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008238:	2b50      	cmp	r3, #80	; 0x50
 800823a:	d139      	bne.n	80082b0 <__gethex+0x14c>
 800823c:	7873      	ldrb	r3, [r6, #1]
 800823e:	2b2b      	cmp	r3, #43	; 0x2b
 8008240:	d02a      	beq.n	8008298 <__gethex+0x134>
 8008242:	2b2d      	cmp	r3, #45	; 0x2d
 8008244:	d02c      	beq.n	80082a0 <__gethex+0x13c>
 8008246:	f04f 0900 	mov.w	r9, #0
 800824a:	1c71      	adds	r1, r6, #1
 800824c:	7808      	ldrb	r0, [r1, #0]
 800824e:	f7ff ff74 	bl	800813a <__hexdig_fun>
 8008252:	1e43      	subs	r3, r0, #1
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b18      	cmp	r3, #24
 8008258:	d82a      	bhi.n	80082b0 <__gethex+0x14c>
 800825a:	f1a0 0210 	sub.w	r2, r0, #16
 800825e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008262:	f7ff ff6a 	bl	800813a <__hexdig_fun>
 8008266:	1e43      	subs	r3, r0, #1
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b18      	cmp	r3, #24
 800826c:	d91b      	bls.n	80082a6 <__gethex+0x142>
 800826e:	f1b9 0f00 	cmp.w	r9, #0
 8008272:	d000      	beq.n	8008276 <__gethex+0x112>
 8008274:	4252      	negs	r2, r2
 8008276:	4415      	add	r5, r2
 8008278:	f8cb 1000 	str.w	r1, [fp]
 800827c:	b1d4      	cbz	r4, 80082b4 <__gethex+0x150>
 800827e:	9b01      	ldr	r3, [sp, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	bf14      	ite	ne
 8008284:	2700      	movne	r7, #0
 8008286:	2706      	moveq	r7, #6
 8008288:	4638      	mov	r0, r7
 800828a:	b00b      	add	sp, #44	; 0x2c
 800828c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008290:	463e      	mov	r6, r7
 8008292:	4625      	mov	r5, r4
 8008294:	2401      	movs	r4, #1
 8008296:	e7cc      	b.n	8008232 <__gethex+0xce>
 8008298:	f04f 0900 	mov.w	r9, #0
 800829c:	1cb1      	adds	r1, r6, #2
 800829e:	e7d5      	b.n	800824c <__gethex+0xe8>
 80082a0:	f04f 0901 	mov.w	r9, #1
 80082a4:	e7fa      	b.n	800829c <__gethex+0x138>
 80082a6:	230a      	movs	r3, #10
 80082a8:	fb03 0202 	mla	r2, r3, r2, r0
 80082ac:	3a10      	subs	r2, #16
 80082ae:	e7d6      	b.n	800825e <__gethex+0xfa>
 80082b0:	4631      	mov	r1, r6
 80082b2:	e7e1      	b.n	8008278 <__gethex+0x114>
 80082b4:	4621      	mov	r1, r4
 80082b6:	1bf3      	subs	r3, r6, r7
 80082b8:	3b01      	subs	r3, #1
 80082ba:	2b07      	cmp	r3, #7
 80082bc:	dc0a      	bgt.n	80082d4 <__gethex+0x170>
 80082be:	9802      	ldr	r0, [sp, #8]
 80082c0:	f000 fa88 	bl	80087d4 <_Balloc>
 80082c4:	4604      	mov	r4, r0
 80082c6:	b940      	cbnz	r0, 80082da <__gethex+0x176>
 80082c8:	4602      	mov	r2, r0
 80082ca:	21de      	movs	r1, #222	; 0xde
 80082cc:	4b5b      	ldr	r3, [pc, #364]	; (800843c <__gethex+0x2d8>)
 80082ce:	485c      	ldr	r0, [pc, #368]	; (8008440 <__gethex+0x2dc>)
 80082d0:	f001 f9bc 	bl	800964c <__assert_func>
 80082d4:	3101      	adds	r1, #1
 80082d6:	105b      	asrs	r3, r3, #1
 80082d8:	e7ef      	b.n	80082ba <__gethex+0x156>
 80082da:	f04f 0b00 	mov.w	fp, #0
 80082de:	f100 0914 	add.w	r9, r0, #20
 80082e2:	f1ca 0301 	rsb	r3, sl, #1
 80082e6:	f8cd 9010 	str.w	r9, [sp, #16]
 80082ea:	f8cd b004 	str.w	fp, [sp, #4]
 80082ee:	9308      	str	r3, [sp, #32]
 80082f0:	42b7      	cmp	r7, r6
 80082f2:	d33f      	bcc.n	8008374 <__gethex+0x210>
 80082f4:	9f04      	ldr	r7, [sp, #16]
 80082f6:	9b01      	ldr	r3, [sp, #4]
 80082f8:	f847 3b04 	str.w	r3, [r7], #4
 80082fc:	eba7 0709 	sub.w	r7, r7, r9
 8008300:	10bf      	asrs	r7, r7, #2
 8008302:	6127      	str	r7, [r4, #16]
 8008304:	4618      	mov	r0, r3
 8008306:	f000 fb57 	bl	80089b8 <__hi0bits>
 800830a:	017f      	lsls	r7, r7, #5
 800830c:	f8d8 6000 	ldr.w	r6, [r8]
 8008310:	1a3f      	subs	r7, r7, r0
 8008312:	42b7      	cmp	r7, r6
 8008314:	dd62      	ble.n	80083dc <__gethex+0x278>
 8008316:	1bbf      	subs	r7, r7, r6
 8008318:	4639      	mov	r1, r7
 800831a:	4620      	mov	r0, r4
 800831c:	f000 fef1 	bl	8009102 <__any_on>
 8008320:	4682      	mov	sl, r0
 8008322:	b1a8      	cbz	r0, 8008350 <__gethex+0x1ec>
 8008324:	f04f 0a01 	mov.w	sl, #1
 8008328:	1e7b      	subs	r3, r7, #1
 800832a:	1159      	asrs	r1, r3, #5
 800832c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008330:	f003 021f 	and.w	r2, r3, #31
 8008334:	fa0a f202 	lsl.w	r2, sl, r2
 8008338:	420a      	tst	r2, r1
 800833a:	d009      	beq.n	8008350 <__gethex+0x1ec>
 800833c:	4553      	cmp	r3, sl
 800833e:	dd05      	ble.n	800834c <__gethex+0x1e8>
 8008340:	4620      	mov	r0, r4
 8008342:	1eb9      	subs	r1, r7, #2
 8008344:	f000 fedd 	bl	8009102 <__any_on>
 8008348:	2800      	cmp	r0, #0
 800834a:	d144      	bne.n	80083d6 <__gethex+0x272>
 800834c:	f04f 0a02 	mov.w	sl, #2
 8008350:	4639      	mov	r1, r7
 8008352:	4620      	mov	r0, r4
 8008354:	f7ff fe9e 	bl	8008094 <rshift>
 8008358:	443d      	add	r5, r7
 800835a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800835e:	42ab      	cmp	r3, r5
 8008360:	da4a      	bge.n	80083f8 <__gethex+0x294>
 8008362:	4621      	mov	r1, r4
 8008364:	9802      	ldr	r0, [sp, #8]
 8008366:	f000 fa75 	bl	8008854 <_Bfree>
 800836a:	2300      	movs	r3, #0
 800836c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800836e:	27a3      	movs	r7, #163	; 0xa3
 8008370:	6013      	str	r3, [r2, #0]
 8008372:	e789      	b.n	8008288 <__gethex+0x124>
 8008374:	1e73      	subs	r3, r6, #1
 8008376:	9a06      	ldr	r2, [sp, #24]
 8008378:	9307      	str	r3, [sp, #28]
 800837a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800837e:	4293      	cmp	r3, r2
 8008380:	d019      	beq.n	80083b6 <__gethex+0x252>
 8008382:	f1bb 0f20 	cmp.w	fp, #32
 8008386:	d107      	bne.n	8008398 <__gethex+0x234>
 8008388:	9b04      	ldr	r3, [sp, #16]
 800838a:	9a01      	ldr	r2, [sp, #4]
 800838c:	f843 2b04 	str.w	r2, [r3], #4
 8008390:	9304      	str	r3, [sp, #16]
 8008392:	2300      	movs	r3, #0
 8008394:	469b      	mov	fp, r3
 8008396:	9301      	str	r3, [sp, #4]
 8008398:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800839c:	f7ff fecd 	bl	800813a <__hexdig_fun>
 80083a0:	9b01      	ldr	r3, [sp, #4]
 80083a2:	f000 000f 	and.w	r0, r0, #15
 80083a6:	fa00 f00b 	lsl.w	r0, r0, fp
 80083aa:	4303      	orrs	r3, r0
 80083ac:	9301      	str	r3, [sp, #4]
 80083ae:	f10b 0b04 	add.w	fp, fp, #4
 80083b2:	9b07      	ldr	r3, [sp, #28]
 80083b4:	e00d      	b.n	80083d2 <__gethex+0x26e>
 80083b6:	9a08      	ldr	r2, [sp, #32]
 80083b8:	1e73      	subs	r3, r6, #1
 80083ba:	4413      	add	r3, r2
 80083bc:	42bb      	cmp	r3, r7
 80083be:	d3e0      	bcc.n	8008382 <__gethex+0x21e>
 80083c0:	4618      	mov	r0, r3
 80083c2:	4652      	mov	r2, sl
 80083c4:	9903      	ldr	r1, [sp, #12]
 80083c6:	9309      	str	r3, [sp, #36]	; 0x24
 80083c8:	f001 f91e 	bl	8009608 <strncmp>
 80083cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ce:	2800      	cmp	r0, #0
 80083d0:	d1d7      	bne.n	8008382 <__gethex+0x21e>
 80083d2:	461e      	mov	r6, r3
 80083d4:	e78c      	b.n	80082f0 <__gethex+0x18c>
 80083d6:	f04f 0a03 	mov.w	sl, #3
 80083da:	e7b9      	b.n	8008350 <__gethex+0x1ec>
 80083dc:	da09      	bge.n	80083f2 <__gethex+0x28e>
 80083de:	1bf7      	subs	r7, r6, r7
 80083e0:	4621      	mov	r1, r4
 80083e2:	463a      	mov	r2, r7
 80083e4:	9802      	ldr	r0, [sp, #8]
 80083e6:	f000 fc4d 	bl	8008c84 <__lshift>
 80083ea:	4604      	mov	r4, r0
 80083ec:	1bed      	subs	r5, r5, r7
 80083ee:	f100 0914 	add.w	r9, r0, #20
 80083f2:	f04f 0a00 	mov.w	sl, #0
 80083f6:	e7b0      	b.n	800835a <__gethex+0x1f6>
 80083f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80083fc:	42a8      	cmp	r0, r5
 80083fe:	dd72      	ble.n	80084e6 <__gethex+0x382>
 8008400:	1b45      	subs	r5, r0, r5
 8008402:	42ae      	cmp	r6, r5
 8008404:	dc35      	bgt.n	8008472 <__gethex+0x30e>
 8008406:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800840a:	2b02      	cmp	r3, #2
 800840c:	d029      	beq.n	8008462 <__gethex+0x2fe>
 800840e:	2b03      	cmp	r3, #3
 8008410:	d02b      	beq.n	800846a <__gethex+0x306>
 8008412:	2b01      	cmp	r3, #1
 8008414:	d11c      	bne.n	8008450 <__gethex+0x2ec>
 8008416:	42ae      	cmp	r6, r5
 8008418:	d11a      	bne.n	8008450 <__gethex+0x2ec>
 800841a:	2e01      	cmp	r6, #1
 800841c:	d112      	bne.n	8008444 <__gethex+0x2e0>
 800841e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008422:	9a05      	ldr	r2, [sp, #20]
 8008424:	2762      	movs	r7, #98	; 0x62
 8008426:	6013      	str	r3, [r2, #0]
 8008428:	2301      	movs	r3, #1
 800842a:	6123      	str	r3, [r4, #16]
 800842c:	f8c9 3000 	str.w	r3, [r9]
 8008430:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008432:	601c      	str	r4, [r3, #0]
 8008434:	e728      	b.n	8008288 <__gethex+0x124>
 8008436:	bf00      	nop
 8008438:	0801be48 	.word	0x0801be48
 800843c:	0801bdd0 	.word	0x0801bdd0
 8008440:	0801bde1 	.word	0x0801bde1
 8008444:	4620      	mov	r0, r4
 8008446:	1e71      	subs	r1, r6, #1
 8008448:	f000 fe5b 	bl	8009102 <__any_on>
 800844c:	2800      	cmp	r0, #0
 800844e:	d1e6      	bne.n	800841e <__gethex+0x2ba>
 8008450:	4621      	mov	r1, r4
 8008452:	9802      	ldr	r0, [sp, #8]
 8008454:	f000 f9fe 	bl	8008854 <_Bfree>
 8008458:	2300      	movs	r3, #0
 800845a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800845c:	2750      	movs	r7, #80	; 0x50
 800845e:	6013      	str	r3, [r2, #0]
 8008460:	e712      	b.n	8008288 <__gethex+0x124>
 8008462:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1f3      	bne.n	8008450 <__gethex+0x2ec>
 8008468:	e7d9      	b.n	800841e <__gethex+0x2ba>
 800846a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1d6      	bne.n	800841e <__gethex+0x2ba>
 8008470:	e7ee      	b.n	8008450 <__gethex+0x2ec>
 8008472:	1e6f      	subs	r7, r5, #1
 8008474:	f1ba 0f00 	cmp.w	sl, #0
 8008478:	d132      	bne.n	80084e0 <__gethex+0x37c>
 800847a:	b127      	cbz	r7, 8008486 <__gethex+0x322>
 800847c:	4639      	mov	r1, r7
 800847e:	4620      	mov	r0, r4
 8008480:	f000 fe3f 	bl	8009102 <__any_on>
 8008484:	4682      	mov	sl, r0
 8008486:	2101      	movs	r1, #1
 8008488:	117b      	asrs	r3, r7, #5
 800848a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800848e:	f007 071f 	and.w	r7, r7, #31
 8008492:	fa01 f707 	lsl.w	r7, r1, r7
 8008496:	421f      	tst	r7, r3
 8008498:	f04f 0702 	mov.w	r7, #2
 800849c:	4629      	mov	r1, r5
 800849e:	4620      	mov	r0, r4
 80084a0:	bf18      	it	ne
 80084a2:	f04a 0a02 	orrne.w	sl, sl, #2
 80084a6:	1b76      	subs	r6, r6, r5
 80084a8:	f7ff fdf4 	bl	8008094 <rshift>
 80084ac:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80084b0:	f1ba 0f00 	cmp.w	sl, #0
 80084b4:	d048      	beq.n	8008548 <__gethex+0x3e4>
 80084b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d015      	beq.n	80084ea <__gethex+0x386>
 80084be:	2b03      	cmp	r3, #3
 80084c0:	d017      	beq.n	80084f2 <__gethex+0x38e>
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d109      	bne.n	80084da <__gethex+0x376>
 80084c6:	f01a 0f02 	tst.w	sl, #2
 80084ca:	d006      	beq.n	80084da <__gethex+0x376>
 80084cc:	f8d9 0000 	ldr.w	r0, [r9]
 80084d0:	ea4a 0a00 	orr.w	sl, sl, r0
 80084d4:	f01a 0f01 	tst.w	sl, #1
 80084d8:	d10e      	bne.n	80084f8 <__gethex+0x394>
 80084da:	f047 0710 	orr.w	r7, r7, #16
 80084de:	e033      	b.n	8008548 <__gethex+0x3e4>
 80084e0:	f04f 0a01 	mov.w	sl, #1
 80084e4:	e7cf      	b.n	8008486 <__gethex+0x322>
 80084e6:	2701      	movs	r7, #1
 80084e8:	e7e2      	b.n	80084b0 <__gethex+0x34c>
 80084ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084ec:	f1c3 0301 	rsb	r3, r3, #1
 80084f0:	9315      	str	r3, [sp, #84]	; 0x54
 80084f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d0f0      	beq.n	80084da <__gethex+0x376>
 80084f8:	f04f 0c00 	mov.w	ip, #0
 80084fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008500:	f104 0314 	add.w	r3, r4, #20
 8008504:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008508:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800850c:	4618      	mov	r0, r3
 800850e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008512:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008516:	d01c      	beq.n	8008552 <__gethex+0x3ee>
 8008518:	3201      	adds	r2, #1
 800851a:	6002      	str	r2, [r0, #0]
 800851c:	2f02      	cmp	r7, #2
 800851e:	f104 0314 	add.w	r3, r4, #20
 8008522:	d13d      	bne.n	80085a0 <__gethex+0x43c>
 8008524:	f8d8 2000 	ldr.w	r2, [r8]
 8008528:	3a01      	subs	r2, #1
 800852a:	42b2      	cmp	r2, r6
 800852c:	d10a      	bne.n	8008544 <__gethex+0x3e0>
 800852e:	2201      	movs	r2, #1
 8008530:	1171      	asrs	r1, r6, #5
 8008532:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008536:	f006 061f 	and.w	r6, r6, #31
 800853a:	fa02 f606 	lsl.w	r6, r2, r6
 800853e:	421e      	tst	r6, r3
 8008540:	bf18      	it	ne
 8008542:	4617      	movne	r7, r2
 8008544:	f047 0720 	orr.w	r7, r7, #32
 8008548:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800854a:	601c      	str	r4, [r3, #0]
 800854c:	9b05      	ldr	r3, [sp, #20]
 800854e:	601d      	str	r5, [r3, #0]
 8008550:	e69a      	b.n	8008288 <__gethex+0x124>
 8008552:	4299      	cmp	r1, r3
 8008554:	f843 cc04 	str.w	ip, [r3, #-4]
 8008558:	d8d8      	bhi.n	800850c <__gethex+0x3a8>
 800855a:	68a3      	ldr	r3, [r4, #8]
 800855c:	459b      	cmp	fp, r3
 800855e:	db17      	blt.n	8008590 <__gethex+0x42c>
 8008560:	6861      	ldr	r1, [r4, #4]
 8008562:	9802      	ldr	r0, [sp, #8]
 8008564:	3101      	adds	r1, #1
 8008566:	f000 f935 	bl	80087d4 <_Balloc>
 800856a:	4681      	mov	r9, r0
 800856c:	b918      	cbnz	r0, 8008576 <__gethex+0x412>
 800856e:	4602      	mov	r2, r0
 8008570:	2184      	movs	r1, #132	; 0x84
 8008572:	4b19      	ldr	r3, [pc, #100]	; (80085d8 <__gethex+0x474>)
 8008574:	e6ab      	b.n	80082ce <__gethex+0x16a>
 8008576:	6922      	ldr	r2, [r4, #16]
 8008578:	f104 010c 	add.w	r1, r4, #12
 800857c:	3202      	adds	r2, #2
 800857e:	0092      	lsls	r2, r2, #2
 8008580:	300c      	adds	r0, #12
 8008582:	f000 f919 	bl	80087b8 <memcpy>
 8008586:	4621      	mov	r1, r4
 8008588:	9802      	ldr	r0, [sp, #8]
 800858a:	f000 f963 	bl	8008854 <_Bfree>
 800858e:	464c      	mov	r4, r9
 8008590:	6923      	ldr	r3, [r4, #16]
 8008592:	1c5a      	adds	r2, r3, #1
 8008594:	6122      	str	r2, [r4, #16]
 8008596:	2201      	movs	r2, #1
 8008598:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800859c:	615a      	str	r2, [r3, #20]
 800859e:	e7bd      	b.n	800851c <__gethex+0x3b8>
 80085a0:	6922      	ldr	r2, [r4, #16]
 80085a2:	455a      	cmp	r2, fp
 80085a4:	dd0b      	ble.n	80085be <__gethex+0x45a>
 80085a6:	2101      	movs	r1, #1
 80085a8:	4620      	mov	r0, r4
 80085aa:	f7ff fd73 	bl	8008094 <rshift>
 80085ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80085b2:	3501      	adds	r5, #1
 80085b4:	42ab      	cmp	r3, r5
 80085b6:	f6ff aed4 	blt.w	8008362 <__gethex+0x1fe>
 80085ba:	2701      	movs	r7, #1
 80085bc:	e7c2      	b.n	8008544 <__gethex+0x3e0>
 80085be:	f016 061f 	ands.w	r6, r6, #31
 80085c2:	d0fa      	beq.n	80085ba <__gethex+0x456>
 80085c4:	4453      	add	r3, sl
 80085c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80085ca:	f000 f9f5 	bl	80089b8 <__hi0bits>
 80085ce:	f1c6 0620 	rsb	r6, r6, #32
 80085d2:	42b0      	cmp	r0, r6
 80085d4:	dbe7      	blt.n	80085a6 <__gethex+0x442>
 80085d6:	e7f0      	b.n	80085ba <__gethex+0x456>
 80085d8:	0801bdd0 	.word	0x0801bdd0

080085dc <L_shift>:
 80085dc:	f1c2 0208 	rsb	r2, r2, #8
 80085e0:	0092      	lsls	r2, r2, #2
 80085e2:	b570      	push	{r4, r5, r6, lr}
 80085e4:	f1c2 0620 	rsb	r6, r2, #32
 80085e8:	6843      	ldr	r3, [r0, #4]
 80085ea:	6804      	ldr	r4, [r0, #0]
 80085ec:	fa03 f506 	lsl.w	r5, r3, r6
 80085f0:	432c      	orrs	r4, r5
 80085f2:	40d3      	lsrs	r3, r2
 80085f4:	6004      	str	r4, [r0, #0]
 80085f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80085fa:	4288      	cmp	r0, r1
 80085fc:	d3f4      	bcc.n	80085e8 <L_shift+0xc>
 80085fe:	bd70      	pop	{r4, r5, r6, pc}

08008600 <__match>:
 8008600:	b530      	push	{r4, r5, lr}
 8008602:	6803      	ldr	r3, [r0, #0]
 8008604:	3301      	adds	r3, #1
 8008606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800860a:	b914      	cbnz	r4, 8008612 <__match+0x12>
 800860c:	6003      	str	r3, [r0, #0]
 800860e:	2001      	movs	r0, #1
 8008610:	bd30      	pop	{r4, r5, pc}
 8008612:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008616:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800861a:	2d19      	cmp	r5, #25
 800861c:	bf98      	it	ls
 800861e:	3220      	addls	r2, #32
 8008620:	42a2      	cmp	r2, r4
 8008622:	d0f0      	beq.n	8008606 <__match+0x6>
 8008624:	2000      	movs	r0, #0
 8008626:	e7f3      	b.n	8008610 <__match+0x10>

08008628 <__hexnan>:
 8008628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862c:	2500      	movs	r5, #0
 800862e:	680b      	ldr	r3, [r1, #0]
 8008630:	4682      	mov	sl, r0
 8008632:	115e      	asrs	r6, r3, #5
 8008634:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008638:	f013 031f 	ands.w	r3, r3, #31
 800863c:	bf18      	it	ne
 800863e:	3604      	addne	r6, #4
 8008640:	1f37      	subs	r7, r6, #4
 8008642:	46b9      	mov	r9, r7
 8008644:	463c      	mov	r4, r7
 8008646:	46ab      	mov	fp, r5
 8008648:	b087      	sub	sp, #28
 800864a:	4690      	mov	r8, r2
 800864c:	6802      	ldr	r2, [r0, #0]
 800864e:	9301      	str	r3, [sp, #4]
 8008650:	f846 5c04 	str.w	r5, [r6, #-4]
 8008654:	9502      	str	r5, [sp, #8]
 8008656:	7851      	ldrb	r1, [r2, #1]
 8008658:	1c53      	adds	r3, r2, #1
 800865a:	9303      	str	r3, [sp, #12]
 800865c:	b341      	cbz	r1, 80086b0 <__hexnan+0x88>
 800865e:	4608      	mov	r0, r1
 8008660:	9205      	str	r2, [sp, #20]
 8008662:	9104      	str	r1, [sp, #16]
 8008664:	f7ff fd69 	bl	800813a <__hexdig_fun>
 8008668:	2800      	cmp	r0, #0
 800866a:	d14f      	bne.n	800870c <__hexnan+0xe4>
 800866c:	9904      	ldr	r1, [sp, #16]
 800866e:	9a05      	ldr	r2, [sp, #20]
 8008670:	2920      	cmp	r1, #32
 8008672:	d818      	bhi.n	80086a6 <__hexnan+0x7e>
 8008674:	9b02      	ldr	r3, [sp, #8]
 8008676:	459b      	cmp	fp, r3
 8008678:	dd13      	ble.n	80086a2 <__hexnan+0x7a>
 800867a:	454c      	cmp	r4, r9
 800867c:	d206      	bcs.n	800868c <__hexnan+0x64>
 800867e:	2d07      	cmp	r5, #7
 8008680:	dc04      	bgt.n	800868c <__hexnan+0x64>
 8008682:	462a      	mov	r2, r5
 8008684:	4649      	mov	r1, r9
 8008686:	4620      	mov	r0, r4
 8008688:	f7ff ffa8 	bl	80085dc <L_shift>
 800868c:	4544      	cmp	r4, r8
 800868e:	d950      	bls.n	8008732 <__hexnan+0x10a>
 8008690:	2300      	movs	r3, #0
 8008692:	f1a4 0904 	sub.w	r9, r4, #4
 8008696:	f844 3c04 	str.w	r3, [r4, #-4]
 800869a:	461d      	mov	r5, r3
 800869c:	464c      	mov	r4, r9
 800869e:	f8cd b008 	str.w	fp, [sp, #8]
 80086a2:	9a03      	ldr	r2, [sp, #12]
 80086a4:	e7d7      	b.n	8008656 <__hexnan+0x2e>
 80086a6:	2929      	cmp	r1, #41	; 0x29
 80086a8:	d156      	bne.n	8008758 <__hexnan+0x130>
 80086aa:	3202      	adds	r2, #2
 80086ac:	f8ca 2000 	str.w	r2, [sl]
 80086b0:	f1bb 0f00 	cmp.w	fp, #0
 80086b4:	d050      	beq.n	8008758 <__hexnan+0x130>
 80086b6:	454c      	cmp	r4, r9
 80086b8:	d206      	bcs.n	80086c8 <__hexnan+0xa0>
 80086ba:	2d07      	cmp	r5, #7
 80086bc:	dc04      	bgt.n	80086c8 <__hexnan+0xa0>
 80086be:	462a      	mov	r2, r5
 80086c0:	4649      	mov	r1, r9
 80086c2:	4620      	mov	r0, r4
 80086c4:	f7ff ff8a 	bl	80085dc <L_shift>
 80086c8:	4544      	cmp	r4, r8
 80086ca:	d934      	bls.n	8008736 <__hexnan+0x10e>
 80086cc:	4623      	mov	r3, r4
 80086ce:	f1a8 0204 	sub.w	r2, r8, #4
 80086d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80086d6:	429f      	cmp	r7, r3
 80086d8:	f842 1f04 	str.w	r1, [r2, #4]!
 80086dc:	d2f9      	bcs.n	80086d2 <__hexnan+0xaa>
 80086de:	1b3b      	subs	r3, r7, r4
 80086e0:	f023 0303 	bic.w	r3, r3, #3
 80086e4:	3304      	adds	r3, #4
 80086e6:	3401      	adds	r4, #1
 80086e8:	3e03      	subs	r6, #3
 80086ea:	42b4      	cmp	r4, r6
 80086ec:	bf88      	it	hi
 80086ee:	2304      	movhi	r3, #4
 80086f0:	2200      	movs	r2, #0
 80086f2:	4443      	add	r3, r8
 80086f4:	f843 2b04 	str.w	r2, [r3], #4
 80086f8:	429f      	cmp	r7, r3
 80086fa:	d2fb      	bcs.n	80086f4 <__hexnan+0xcc>
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	b91b      	cbnz	r3, 8008708 <__hexnan+0xe0>
 8008700:	4547      	cmp	r7, r8
 8008702:	d127      	bne.n	8008754 <__hexnan+0x12c>
 8008704:	2301      	movs	r3, #1
 8008706:	603b      	str	r3, [r7, #0]
 8008708:	2005      	movs	r0, #5
 800870a:	e026      	b.n	800875a <__hexnan+0x132>
 800870c:	3501      	adds	r5, #1
 800870e:	2d08      	cmp	r5, #8
 8008710:	f10b 0b01 	add.w	fp, fp, #1
 8008714:	dd06      	ble.n	8008724 <__hexnan+0xfc>
 8008716:	4544      	cmp	r4, r8
 8008718:	d9c3      	bls.n	80086a2 <__hexnan+0x7a>
 800871a:	2300      	movs	r3, #0
 800871c:	2501      	movs	r5, #1
 800871e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008722:	3c04      	subs	r4, #4
 8008724:	6822      	ldr	r2, [r4, #0]
 8008726:	f000 000f 	and.w	r0, r0, #15
 800872a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800872e:	6022      	str	r2, [r4, #0]
 8008730:	e7b7      	b.n	80086a2 <__hexnan+0x7a>
 8008732:	2508      	movs	r5, #8
 8008734:	e7b5      	b.n	80086a2 <__hexnan+0x7a>
 8008736:	9b01      	ldr	r3, [sp, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d0df      	beq.n	80086fc <__hexnan+0xd4>
 800873c:	f04f 32ff 	mov.w	r2, #4294967295
 8008740:	f1c3 0320 	rsb	r3, r3, #32
 8008744:	fa22 f303 	lsr.w	r3, r2, r3
 8008748:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800874c:	401a      	ands	r2, r3
 800874e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008752:	e7d3      	b.n	80086fc <__hexnan+0xd4>
 8008754:	3f04      	subs	r7, #4
 8008756:	e7d1      	b.n	80086fc <__hexnan+0xd4>
 8008758:	2004      	movs	r0, #4
 800875a:	b007      	add	sp, #28
 800875c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008760 <_localeconv_r>:
 8008760:	4800      	ldr	r0, [pc, #0]	; (8008764 <_localeconv_r+0x4>)
 8008762:	4770      	bx	lr
 8008764:	20000168 	.word	0x20000168

08008768 <malloc>:
 8008768:	4b02      	ldr	r3, [pc, #8]	; (8008774 <malloc+0xc>)
 800876a:	4601      	mov	r1, r0
 800876c:	6818      	ldr	r0, [r3, #0]
 800876e:	f000 bd65 	b.w	800923c <_malloc_r>
 8008772:	bf00      	nop
 8008774:	20000010 	.word	0x20000010

08008778 <__ascii_mbtowc>:
 8008778:	b082      	sub	sp, #8
 800877a:	b901      	cbnz	r1, 800877e <__ascii_mbtowc+0x6>
 800877c:	a901      	add	r1, sp, #4
 800877e:	b142      	cbz	r2, 8008792 <__ascii_mbtowc+0x1a>
 8008780:	b14b      	cbz	r3, 8008796 <__ascii_mbtowc+0x1e>
 8008782:	7813      	ldrb	r3, [r2, #0]
 8008784:	600b      	str	r3, [r1, #0]
 8008786:	7812      	ldrb	r2, [r2, #0]
 8008788:	1e10      	subs	r0, r2, #0
 800878a:	bf18      	it	ne
 800878c:	2001      	movne	r0, #1
 800878e:	b002      	add	sp, #8
 8008790:	4770      	bx	lr
 8008792:	4610      	mov	r0, r2
 8008794:	e7fb      	b.n	800878e <__ascii_mbtowc+0x16>
 8008796:	f06f 0001 	mvn.w	r0, #1
 800879a:	e7f8      	b.n	800878e <__ascii_mbtowc+0x16>

0800879c <memchr>:
 800879c:	4603      	mov	r3, r0
 800879e:	b510      	push	{r4, lr}
 80087a0:	b2c9      	uxtb	r1, r1
 80087a2:	4402      	add	r2, r0
 80087a4:	4293      	cmp	r3, r2
 80087a6:	4618      	mov	r0, r3
 80087a8:	d101      	bne.n	80087ae <memchr+0x12>
 80087aa:	2000      	movs	r0, #0
 80087ac:	e003      	b.n	80087b6 <memchr+0x1a>
 80087ae:	7804      	ldrb	r4, [r0, #0]
 80087b0:	3301      	adds	r3, #1
 80087b2:	428c      	cmp	r4, r1
 80087b4:	d1f6      	bne.n	80087a4 <memchr+0x8>
 80087b6:	bd10      	pop	{r4, pc}

080087b8 <memcpy>:
 80087b8:	440a      	add	r2, r1
 80087ba:	4291      	cmp	r1, r2
 80087bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80087c0:	d100      	bne.n	80087c4 <memcpy+0xc>
 80087c2:	4770      	bx	lr
 80087c4:	b510      	push	{r4, lr}
 80087c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ca:	4291      	cmp	r1, r2
 80087cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087d0:	d1f9      	bne.n	80087c6 <memcpy+0xe>
 80087d2:	bd10      	pop	{r4, pc}

080087d4 <_Balloc>:
 80087d4:	b570      	push	{r4, r5, r6, lr}
 80087d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087d8:	4604      	mov	r4, r0
 80087da:	460d      	mov	r5, r1
 80087dc:	b976      	cbnz	r6, 80087fc <_Balloc+0x28>
 80087de:	2010      	movs	r0, #16
 80087e0:	f7ff ffc2 	bl	8008768 <malloc>
 80087e4:	4602      	mov	r2, r0
 80087e6:	6260      	str	r0, [r4, #36]	; 0x24
 80087e8:	b920      	cbnz	r0, 80087f4 <_Balloc+0x20>
 80087ea:	2166      	movs	r1, #102	; 0x66
 80087ec:	4b17      	ldr	r3, [pc, #92]	; (800884c <_Balloc+0x78>)
 80087ee:	4818      	ldr	r0, [pc, #96]	; (8008850 <_Balloc+0x7c>)
 80087f0:	f000 ff2c 	bl	800964c <__assert_func>
 80087f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087f8:	6006      	str	r6, [r0, #0]
 80087fa:	60c6      	str	r6, [r0, #12]
 80087fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80087fe:	68f3      	ldr	r3, [r6, #12]
 8008800:	b183      	cbz	r3, 8008824 <_Balloc+0x50>
 8008802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800880a:	b9b8      	cbnz	r0, 800883c <_Balloc+0x68>
 800880c:	2101      	movs	r1, #1
 800880e:	fa01 f605 	lsl.w	r6, r1, r5
 8008812:	1d72      	adds	r2, r6, #5
 8008814:	4620      	mov	r0, r4
 8008816:	0092      	lsls	r2, r2, #2
 8008818:	f000 fc94 	bl	8009144 <_calloc_r>
 800881c:	b160      	cbz	r0, 8008838 <_Balloc+0x64>
 800881e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008822:	e00e      	b.n	8008842 <_Balloc+0x6e>
 8008824:	2221      	movs	r2, #33	; 0x21
 8008826:	2104      	movs	r1, #4
 8008828:	4620      	mov	r0, r4
 800882a:	f000 fc8b 	bl	8009144 <_calloc_r>
 800882e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008830:	60f0      	str	r0, [r6, #12]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1e4      	bne.n	8008802 <_Balloc+0x2e>
 8008838:	2000      	movs	r0, #0
 800883a:	bd70      	pop	{r4, r5, r6, pc}
 800883c:	6802      	ldr	r2, [r0, #0]
 800883e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008842:	2300      	movs	r3, #0
 8008844:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008848:	e7f7      	b.n	800883a <_Balloc+0x66>
 800884a:	bf00      	nop
 800884c:	0801bd5e 	.word	0x0801bd5e
 8008850:	0801be5a 	.word	0x0801be5a

08008854 <_Bfree>:
 8008854:	b570      	push	{r4, r5, r6, lr}
 8008856:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008858:	4605      	mov	r5, r0
 800885a:	460c      	mov	r4, r1
 800885c:	b976      	cbnz	r6, 800887c <_Bfree+0x28>
 800885e:	2010      	movs	r0, #16
 8008860:	f7ff ff82 	bl	8008768 <malloc>
 8008864:	4602      	mov	r2, r0
 8008866:	6268      	str	r0, [r5, #36]	; 0x24
 8008868:	b920      	cbnz	r0, 8008874 <_Bfree+0x20>
 800886a:	218a      	movs	r1, #138	; 0x8a
 800886c:	4b08      	ldr	r3, [pc, #32]	; (8008890 <_Bfree+0x3c>)
 800886e:	4809      	ldr	r0, [pc, #36]	; (8008894 <_Bfree+0x40>)
 8008870:	f000 feec 	bl	800964c <__assert_func>
 8008874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008878:	6006      	str	r6, [r0, #0]
 800887a:	60c6      	str	r6, [r0, #12]
 800887c:	b13c      	cbz	r4, 800888e <_Bfree+0x3a>
 800887e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008880:	6862      	ldr	r2, [r4, #4]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008888:	6021      	str	r1, [r4, #0]
 800888a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800888e:	bd70      	pop	{r4, r5, r6, pc}
 8008890:	0801bd5e 	.word	0x0801bd5e
 8008894:	0801be5a 	.word	0x0801be5a

08008898 <__multadd>:
 8008898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800889c:	4607      	mov	r7, r0
 800889e:	460c      	mov	r4, r1
 80088a0:	461e      	mov	r6, r3
 80088a2:	2000      	movs	r0, #0
 80088a4:	690d      	ldr	r5, [r1, #16]
 80088a6:	f101 0c14 	add.w	ip, r1, #20
 80088aa:	f8dc 3000 	ldr.w	r3, [ip]
 80088ae:	3001      	adds	r0, #1
 80088b0:	b299      	uxth	r1, r3
 80088b2:	fb02 6101 	mla	r1, r2, r1, r6
 80088b6:	0c1e      	lsrs	r6, r3, #16
 80088b8:	0c0b      	lsrs	r3, r1, #16
 80088ba:	fb02 3306 	mla	r3, r2, r6, r3
 80088be:	b289      	uxth	r1, r1
 80088c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088c4:	4285      	cmp	r5, r0
 80088c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80088ca:	f84c 1b04 	str.w	r1, [ip], #4
 80088ce:	dcec      	bgt.n	80088aa <__multadd+0x12>
 80088d0:	b30e      	cbz	r6, 8008916 <__multadd+0x7e>
 80088d2:	68a3      	ldr	r3, [r4, #8]
 80088d4:	42ab      	cmp	r3, r5
 80088d6:	dc19      	bgt.n	800890c <__multadd+0x74>
 80088d8:	6861      	ldr	r1, [r4, #4]
 80088da:	4638      	mov	r0, r7
 80088dc:	3101      	adds	r1, #1
 80088de:	f7ff ff79 	bl	80087d4 <_Balloc>
 80088e2:	4680      	mov	r8, r0
 80088e4:	b928      	cbnz	r0, 80088f2 <__multadd+0x5a>
 80088e6:	4602      	mov	r2, r0
 80088e8:	21b5      	movs	r1, #181	; 0xb5
 80088ea:	4b0c      	ldr	r3, [pc, #48]	; (800891c <__multadd+0x84>)
 80088ec:	480c      	ldr	r0, [pc, #48]	; (8008920 <__multadd+0x88>)
 80088ee:	f000 fead 	bl	800964c <__assert_func>
 80088f2:	6922      	ldr	r2, [r4, #16]
 80088f4:	f104 010c 	add.w	r1, r4, #12
 80088f8:	3202      	adds	r2, #2
 80088fa:	0092      	lsls	r2, r2, #2
 80088fc:	300c      	adds	r0, #12
 80088fe:	f7ff ff5b 	bl	80087b8 <memcpy>
 8008902:	4621      	mov	r1, r4
 8008904:	4638      	mov	r0, r7
 8008906:	f7ff ffa5 	bl	8008854 <_Bfree>
 800890a:	4644      	mov	r4, r8
 800890c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008910:	3501      	adds	r5, #1
 8008912:	615e      	str	r6, [r3, #20]
 8008914:	6125      	str	r5, [r4, #16]
 8008916:	4620      	mov	r0, r4
 8008918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800891c:	0801bdd0 	.word	0x0801bdd0
 8008920:	0801be5a 	.word	0x0801be5a

08008924 <__s2b>:
 8008924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008928:	4615      	mov	r5, r2
 800892a:	2209      	movs	r2, #9
 800892c:	461f      	mov	r7, r3
 800892e:	3308      	adds	r3, #8
 8008930:	460c      	mov	r4, r1
 8008932:	fb93 f3f2 	sdiv	r3, r3, r2
 8008936:	4606      	mov	r6, r0
 8008938:	2201      	movs	r2, #1
 800893a:	2100      	movs	r1, #0
 800893c:	429a      	cmp	r2, r3
 800893e:	db09      	blt.n	8008954 <__s2b+0x30>
 8008940:	4630      	mov	r0, r6
 8008942:	f7ff ff47 	bl	80087d4 <_Balloc>
 8008946:	b940      	cbnz	r0, 800895a <__s2b+0x36>
 8008948:	4602      	mov	r2, r0
 800894a:	21ce      	movs	r1, #206	; 0xce
 800894c:	4b18      	ldr	r3, [pc, #96]	; (80089b0 <__s2b+0x8c>)
 800894e:	4819      	ldr	r0, [pc, #100]	; (80089b4 <__s2b+0x90>)
 8008950:	f000 fe7c 	bl	800964c <__assert_func>
 8008954:	0052      	lsls	r2, r2, #1
 8008956:	3101      	adds	r1, #1
 8008958:	e7f0      	b.n	800893c <__s2b+0x18>
 800895a:	9b08      	ldr	r3, [sp, #32]
 800895c:	2d09      	cmp	r5, #9
 800895e:	6143      	str	r3, [r0, #20]
 8008960:	f04f 0301 	mov.w	r3, #1
 8008964:	6103      	str	r3, [r0, #16]
 8008966:	dd16      	ble.n	8008996 <__s2b+0x72>
 8008968:	f104 0909 	add.w	r9, r4, #9
 800896c:	46c8      	mov	r8, r9
 800896e:	442c      	add	r4, r5
 8008970:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008974:	4601      	mov	r1, r0
 8008976:	220a      	movs	r2, #10
 8008978:	4630      	mov	r0, r6
 800897a:	3b30      	subs	r3, #48	; 0x30
 800897c:	f7ff ff8c 	bl	8008898 <__multadd>
 8008980:	45a0      	cmp	r8, r4
 8008982:	d1f5      	bne.n	8008970 <__s2b+0x4c>
 8008984:	f1a5 0408 	sub.w	r4, r5, #8
 8008988:	444c      	add	r4, r9
 800898a:	1b2d      	subs	r5, r5, r4
 800898c:	1963      	adds	r3, r4, r5
 800898e:	42bb      	cmp	r3, r7
 8008990:	db04      	blt.n	800899c <__s2b+0x78>
 8008992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008996:	2509      	movs	r5, #9
 8008998:	340a      	adds	r4, #10
 800899a:	e7f6      	b.n	800898a <__s2b+0x66>
 800899c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80089a0:	4601      	mov	r1, r0
 80089a2:	220a      	movs	r2, #10
 80089a4:	4630      	mov	r0, r6
 80089a6:	3b30      	subs	r3, #48	; 0x30
 80089a8:	f7ff ff76 	bl	8008898 <__multadd>
 80089ac:	e7ee      	b.n	800898c <__s2b+0x68>
 80089ae:	bf00      	nop
 80089b0:	0801bdd0 	.word	0x0801bdd0
 80089b4:	0801be5a 	.word	0x0801be5a

080089b8 <__hi0bits>:
 80089b8:	0c02      	lsrs	r2, r0, #16
 80089ba:	0412      	lsls	r2, r2, #16
 80089bc:	4603      	mov	r3, r0
 80089be:	b9ca      	cbnz	r2, 80089f4 <__hi0bits+0x3c>
 80089c0:	0403      	lsls	r3, r0, #16
 80089c2:	2010      	movs	r0, #16
 80089c4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80089c8:	bf04      	itt	eq
 80089ca:	021b      	lsleq	r3, r3, #8
 80089cc:	3008      	addeq	r0, #8
 80089ce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80089d2:	bf04      	itt	eq
 80089d4:	011b      	lsleq	r3, r3, #4
 80089d6:	3004      	addeq	r0, #4
 80089d8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80089dc:	bf04      	itt	eq
 80089de:	009b      	lsleq	r3, r3, #2
 80089e0:	3002      	addeq	r0, #2
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	db05      	blt.n	80089f2 <__hi0bits+0x3a>
 80089e6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80089ea:	f100 0001 	add.w	r0, r0, #1
 80089ee:	bf08      	it	eq
 80089f0:	2020      	moveq	r0, #32
 80089f2:	4770      	bx	lr
 80089f4:	2000      	movs	r0, #0
 80089f6:	e7e5      	b.n	80089c4 <__hi0bits+0xc>

080089f8 <__lo0bits>:
 80089f8:	6803      	ldr	r3, [r0, #0]
 80089fa:	4602      	mov	r2, r0
 80089fc:	f013 0007 	ands.w	r0, r3, #7
 8008a00:	d00b      	beq.n	8008a1a <__lo0bits+0x22>
 8008a02:	07d9      	lsls	r1, r3, #31
 8008a04:	d421      	bmi.n	8008a4a <__lo0bits+0x52>
 8008a06:	0798      	lsls	r0, r3, #30
 8008a08:	bf49      	itett	mi
 8008a0a:	085b      	lsrmi	r3, r3, #1
 8008a0c:	089b      	lsrpl	r3, r3, #2
 8008a0e:	2001      	movmi	r0, #1
 8008a10:	6013      	strmi	r3, [r2, #0]
 8008a12:	bf5c      	itt	pl
 8008a14:	2002      	movpl	r0, #2
 8008a16:	6013      	strpl	r3, [r2, #0]
 8008a18:	4770      	bx	lr
 8008a1a:	b299      	uxth	r1, r3
 8008a1c:	b909      	cbnz	r1, 8008a22 <__lo0bits+0x2a>
 8008a1e:	2010      	movs	r0, #16
 8008a20:	0c1b      	lsrs	r3, r3, #16
 8008a22:	b2d9      	uxtb	r1, r3
 8008a24:	b909      	cbnz	r1, 8008a2a <__lo0bits+0x32>
 8008a26:	3008      	adds	r0, #8
 8008a28:	0a1b      	lsrs	r3, r3, #8
 8008a2a:	0719      	lsls	r1, r3, #28
 8008a2c:	bf04      	itt	eq
 8008a2e:	091b      	lsreq	r3, r3, #4
 8008a30:	3004      	addeq	r0, #4
 8008a32:	0799      	lsls	r1, r3, #30
 8008a34:	bf04      	itt	eq
 8008a36:	089b      	lsreq	r3, r3, #2
 8008a38:	3002      	addeq	r0, #2
 8008a3a:	07d9      	lsls	r1, r3, #31
 8008a3c:	d403      	bmi.n	8008a46 <__lo0bits+0x4e>
 8008a3e:	085b      	lsrs	r3, r3, #1
 8008a40:	f100 0001 	add.w	r0, r0, #1
 8008a44:	d003      	beq.n	8008a4e <__lo0bits+0x56>
 8008a46:	6013      	str	r3, [r2, #0]
 8008a48:	4770      	bx	lr
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	4770      	bx	lr
 8008a4e:	2020      	movs	r0, #32
 8008a50:	4770      	bx	lr
	...

08008a54 <__i2b>:
 8008a54:	b510      	push	{r4, lr}
 8008a56:	460c      	mov	r4, r1
 8008a58:	2101      	movs	r1, #1
 8008a5a:	f7ff febb 	bl	80087d4 <_Balloc>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	b928      	cbnz	r0, 8008a6e <__i2b+0x1a>
 8008a62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a66:	4b04      	ldr	r3, [pc, #16]	; (8008a78 <__i2b+0x24>)
 8008a68:	4804      	ldr	r0, [pc, #16]	; (8008a7c <__i2b+0x28>)
 8008a6a:	f000 fdef 	bl	800964c <__assert_func>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	6144      	str	r4, [r0, #20]
 8008a72:	6103      	str	r3, [r0, #16]
 8008a74:	bd10      	pop	{r4, pc}
 8008a76:	bf00      	nop
 8008a78:	0801bdd0 	.word	0x0801bdd0
 8008a7c:	0801be5a 	.word	0x0801be5a

08008a80 <__multiply>:
 8008a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a84:	4691      	mov	r9, r2
 8008a86:	690a      	ldr	r2, [r1, #16]
 8008a88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	bfbe      	ittt	lt
 8008a92:	460b      	movlt	r3, r1
 8008a94:	464c      	movlt	r4, r9
 8008a96:	4699      	movlt	r9, r3
 8008a98:	6927      	ldr	r7, [r4, #16]
 8008a9a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a9e:	68a3      	ldr	r3, [r4, #8]
 8008aa0:	6861      	ldr	r1, [r4, #4]
 8008aa2:	eb07 060a 	add.w	r6, r7, sl
 8008aa6:	42b3      	cmp	r3, r6
 8008aa8:	b085      	sub	sp, #20
 8008aaa:	bfb8      	it	lt
 8008aac:	3101      	addlt	r1, #1
 8008aae:	f7ff fe91 	bl	80087d4 <_Balloc>
 8008ab2:	b930      	cbnz	r0, 8008ac2 <__multiply+0x42>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	f240 115d 	movw	r1, #349	; 0x15d
 8008aba:	4b43      	ldr	r3, [pc, #268]	; (8008bc8 <__multiply+0x148>)
 8008abc:	4843      	ldr	r0, [pc, #268]	; (8008bcc <__multiply+0x14c>)
 8008abe:	f000 fdc5 	bl	800964c <__assert_func>
 8008ac2:	f100 0514 	add.w	r5, r0, #20
 8008ac6:	462b      	mov	r3, r5
 8008ac8:	2200      	movs	r2, #0
 8008aca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ace:	4543      	cmp	r3, r8
 8008ad0:	d321      	bcc.n	8008b16 <__multiply+0x96>
 8008ad2:	f104 0314 	add.w	r3, r4, #20
 8008ad6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008ada:	f109 0314 	add.w	r3, r9, #20
 8008ade:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008ae2:	9202      	str	r2, [sp, #8]
 8008ae4:	1b3a      	subs	r2, r7, r4
 8008ae6:	3a15      	subs	r2, #21
 8008ae8:	f022 0203 	bic.w	r2, r2, #3
 8008aec:	3204      	adds	r2, #4
 8008aee:	f104 0115 	add.w	r1, r4, #21
 8008af2:	428f      	cmp	r7, r1
 8008af4:	bf38      	it	cc
 8008af6:	2204      	movcc	r2, #4
 8008af8:	9201      	str	r2, [sp, #4]
 8008afa:	9a02      	ldr	r2, [sp, #8]
 8008afc:	9303      	str	r3, [sp, #12]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d80c      	bhi.n	8008b1c <__multiply+0x9c>
 8008b02:	2e00      	cmp	r6, #0
 8008b04:	dd03      	ble.n	8008b0e <__multiply+0x8e>
 8008b06:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d059      	beq.n	8008bc2 <__multiply+0x142>
 8008b0e:	6106      	str	r6, [r0, #16]
 8008b10:	b005      	add	sp, #20
 8008b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b16:	f843 2b04 	str.w	r2, [r3], #4
 8008b1a:	e7d8      	b.n	8008ace <__multiply+0x4e>
 8008b1c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b20:	f1ba 0f00 	cmp.w	sl, #0
 8008b24:	d023      	beq.n	8008b6e <__multiply+0xee>
 8008b26:	46a9      	mov	r9, r5
 8008b28:	f04f 0c00 	mov.w	ip, #0
 8008b2c:	f104 0e14 	add.w	lr, r4, #20
 8008b30:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b34:	f8d9 1000 	ldr.w	r1, [r9]
 8008b38:	fa1f fb82 	uxth.w	fp, r2
 8008b3c:	b289      	uxth	r1, r1
 8008b3e:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b42:	4461      	add	r1, ip
 8008b44:	f8d9 c000 	ldr.w	ip, [r9]
 8008b48:	0c12      	lsrs	r2, r2, #16
 8008b4a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008b4e:	fb0a c202 	mla	r2, sl, r2, ip
 8008b52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b56:	b289      	uxth	r1, r1
 8008b58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b5c:	4577      	cmp	r7, lr
 8008b5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b62:	f849 1b04 	str.w	r1, [r9], #4
 8008b66:	d8e3      	bhi.n	8008b30 <__multiply+0xb0>
 8008b68:	9a01      	ldr	r2, [sp, #4]
 8008b6a:	f845 c002 	str.w	ip, [r5, r2]
 8008b6e:	9a03      	ldr	r2, [sp, #12]
 8008b70:	3304      	adds	r3, #4
 8008b72:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b76:	f1b9 0f00 	cmp.w	r9, #0
 8008b7a:	d020      	beq.n	8008bbe <__multiply+0x13e>
 8008b7c:	46ae      	mov	lr, r5
 8008b7e:	f04f 0a00 	mov.w	sl, #0
 8008b82:	6829      	ldr	r1, [r5, #0]
 8008b84:	f104 0c14 	add.w	ip, r4, #20
 8008b88:	f8bc b000 	ldrh.w	fp, [ip]
 8008b8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008b90:	b289      	uxth	r1, r1
 8008b92:	fb09 220b 	mla	r2, r9, fp, r2
 8008b96:	4492      	add	sl, r2
 8008b98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008b9c:	f84e 1b04 	str.w	r1, [lr], #4
 8008ba0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008ba4:	f8be 1000 	ldrh.w	r1, [lr]
 8008ba8:	0c12      	lsrs	r2, r2, #16
 8008baa:	fb09 1102 	mla	r1, r9, r2, r1
 8008bae:	4567      	cmp	r7, ip
 8008bb0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008bb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008bb8:	d8e6      	bhi.n	8008b88 <__multiply+0x108>
 8008bba:	9a01      	ldr	r2, [sp, #4]
 8008bbc:	50a9      	str	r1, [r5, r2]
 8008bbe:	3504      	adds	r5, #4
 8008bc0:	e79b      	b.n	8008afa <__multiply+0x7a>
 8008bc2:	3e01      	subs	r6, #1
 8008bc4:	e79d      	b.n	8008b02 <__multiply+0x82>
 8008bc6:	bf00      	nop
 8008bc8:	0801bdd0 	.word	0x0801bdd0
 8008bcc:	0801be5a 	.word	0x0801be5a

08008bd0 <__pow5mult>:
 8008bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bd4:	4615      	mov	r5, r2
 8008bd6:	f012 0203 	ands.w	r2, r2, #3
 8008bda:	4606      	mov	r6, r0
 8008bdc:	460f      	mov	r7, r1
 8008bde:	d007      	beq.n	8008bf0 <__pow5mult+0x20>
 8008be0:	4c25      	ldr	r4, [pc, #148]	; (8008c78 <__pow5mult+0xa8>)
 8008be2:	3a01      	subs	r2, #1
 8008be4:	2300      	movs	r3, #0
 8008be6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bea:	f7ff fe55 	bl	8008898 <__multadd>
 8008bee:	4607      	mov	r7, r0
 8008bf0:	10ad      	asrs	r5, r5, #2
 8008bf2:	d03d      	beq.n	8008c70 <__pow5mult+0xa0>
 8008bf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008bf6:	b97c      	cbnz	r4, 8008c18 <__pow5mult+0x48>
 8008bf8:	2010      	movs	r0, #16
 8008bfa:	f7ff fdb5 	bl	8008768 <malloc>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	6270      	str	r0, [r6, #36]	; 0x24
 8008c02:	b928      	cbnz	r0, 8008c10 <__pow5mult+0x40>
 8008c04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008c08:	4b1c      	ldr	r3, [pc, #112]	; (8008c7c <__pow5mult+0xac>)
 8008c0a:	481d      	ldr	r0, [pc, #116]	; (8008c80 <__pow5mult+0xb0>)
 8008c0c:	f000 fd1e 	bl	800964c <__assert_func>
 8008c10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c14:	6004      	str	r4, [r0, #0]
 8008c16:	60c4      	str	r4, [r0, #12]
 8008c18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008c1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c20:	b94c      	cbnz	r4, 8008c36 <__pow5mult+0x66>
 8008c22:	f240 2171 	movw	r1, #625	; 0x271
 8008c26:	4630      	mov	r0, r6
 8008c28:	f7ff ff14 	bl	8008a54 <__i2b>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4604      	mov	r4, r0
 8008c30:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c34:	6003      	str	r3, [r0, #0]
 8008c36:	f04f 0900 	mov.w	r9, #0
 8008c3a:	07eb      	lsls	r3, r5, #31
 8008c3c:	d50a      	bpl.n	8008c54 <__pow5mult+0x84>
 8008c3e:	4639      	mov	r1, r7
 8008c40:	4622      	mov	r2, r4
 8008c42:	4630      	mov	r0, r6
 8008c44:	f7ff ff1c 	bl	8008a80 <__multiply>
 8008c48:	4680      	mov	r8, r0
 8008c4a:	4639      	mov	r1, r7
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	f7ff fe01 	bl	8008854 <_Bfree>
 8008c52:	4647      	mov	r7, r8
 8008c54:	106d      	asrs	r5, r5, #1
 8008c56:	d00b      	beq.n	8008c70 <__pow5mult+0xa0>
 8008c58:	6820      	ldr	r0, [r4, #0]
 8008c5a:	b938      	cbnz	r0, 8008c6c <__pow5mult+0x9c>
 8008c5c:	4622      	mov	r2, r4
 8008c5e:	4621      	mov	r1, r4
 8008c60:	4630      	mov	r0, r6
 8008c62:	f7ff ff0d 	bl	8008a80 <__multiply>
 8008c66:	6020      	str	r0, [r4, #0]
 8008c68:	f8c0 9000 	str.w	r9, [r0]
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	e7e4      	b.n	8008c3a <__pow5mult+0x6a>
 8008c70:	4638      	mov	r0, r7
 8008c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c76:	bf00      	nop
 8008c78:	0801bfa8 	.word	0x0801bfa8
 8008c7c:	0801bd5e 	.word	0x0801bd5e
 8008c80:	0801be5a 	.word	0x0801be5a

08008c84 <__lshift>:
 8008c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c88:	460c      	mov	r4, r1
 8008c8a:	4607      	mov	r7, r0
 8008c8c:	4691      	mov	r9, r2
 8008c8e:	6923      	ldr	r3, [r4, #16]
 8008c90:	6849      	ldr	r1, [r1, #4]
 8008c92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c96:	68a3      	ldr	r3, [r4, #8]
 8008c98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c9c:	f108 0601 	add.w	r6, r8, #1
 8008ca0:	42b3      	cmp	r3, r6
 8008ca2:	db0b      	blt.n	8008cbc <__lshift+0x38>
 8008ca4:	4638      	mov	r0, r7
 8008ca6:	f7ff fd95 	bl	80087d4 <_Balloc>
 8008caa:	4605      	mov	r5, r0
 8008cac:	b948      	cbnz	r0, 8008cc2 <__lshift+0x3e>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008cb4:	4b29      	ldr	r3, [pc, #164]	; (8008d5c <__lshift+0xd8>)
 8008cb6:	482a      	ldr	r0, [pc, #168]	; (8008d60 <__lshift+0xdc>)
 8008cb8:	f000 fcc8 	bl	800964c <__assert_func>
 8008cbc:	3101      	adds	r1, #1
 8008cbe:	005b      	lsls	r3, r3, #1
 8008cc0:	e7ee      	b.n	8008ca0 <__lshift+0x1c>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	f100 0114 	add.w	r1, r0, #20
 8008cc8:	f100 0210 	add.w	r2, r0, #16
 8008ccc:	4618      	mov	r0, r3
 8008cce:	4553      	cmp	r3, sl
 8008cd0:	db37      	blt.n	8008d42 <__lshift+0xbe>
 8008cd2:	6920      	ldr	r0, [r4, #16]
 8008cd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cd8:	f104 0314 	add.w	r3, r4, #20
 8008cdc:	f019 091f 	ands.w	r9, r9, #31
 8008ce0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ce4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008ce8:	d02f      	beq.n	8008d4a <__lshift+0xc6>
 8008cea:	468a      	mov	sl, r1
 8008cec:	f04f 0c00 	mov.w	ip, #0
 8008cf0:	f1c9 0e20 	rsb	lr, r9, #32
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	fa02 f209 	lsl.w	r2, r2, r9
 8008cfa:	ea42 020c 	orr.w	r2, r2, ip
 8008cfe:	f84a 2b04 	str.w	r2, [sl], #4
 8008d02:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d06:	4298      	cmp	r0, r3
 8008d08:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008d0c:	d8f2      	bhi.n	8008cf4 <__lshift+0x70>
 8008d0e:	1b03      	subs	r3, r0, r4
 8008d10:	3b15      	subs	r3, #21
 8008d12:	f023 0303 	bic.w	r3, r3, #3
 8008d16:	3304      	adds	r3, #4
 8008d18:	f104 0215 	add.w	r2, r4, #21
 8008d1c:	4290      	cmp	r0, r2
 8008d1e:	bf38      	it	cc
 8008d20:	2304      	movcc	r3, #4
 8008d22:	f841 c003 	str.w	ip, [r1, r3]
 8008d26:	f1bc 0f00 	cmp.w	ip, #0
 8008d2a:	d001      	beq.n	8008d30 <__lshift+0xac>
 8008d2c:	f108 0602 	add.w	r6, r8, #2
 8008d30:	3e01      	subs	r6, #1
 8008d32:	4638      	mov	r0, r7
 8008d34:	4621      	mov	r1, r4
 8008d36:	612e      	str	r6, [r5, #16]
 8008d38:	f7ff fd8c 	bl	8008854 <_Bfree>
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d42:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d46:	3301      	adds	r3, #1
 8008d48:	e7c1      	b.n	8008cce <__lshift+0x4a>
 8008d4a:	3904      	subs	r1, #4
 8008d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d50:	4298      	cmp	r0, r3
 8008d52:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d56:	d8f9      	bhi.n	8008d4c <__lshift+0xc8>
 8008d58:	e7ea      	b.n	8008d30 <__lshift+0xac>
 8008d5a:	bf00      	nop
 8008d5c:	0801bdd0 	.word	0x0801bdd0
 8008d60:	0801be5a 	.word	0x0801be5a

08008d64 <__mcmp>:
 8008d64:	4603      	mov	r3, r0
 8008d66:	690a      	ldr	r2, [r1, #16]
 8008d68:	6900      	ldr	r0, [r0, #16]
 8008d6a:	b530      	push	{r4, r5, lr}
 8008d6c:	1a80      	subs	r0, r0, r2
 8008d6e:	d10d      	bne.n	8008d8c <__mcmp+0x28>
 8008d70:	3314      	adds	r3, #20
 8008d72:	3114      	adds	r1, #20
 8008d74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d84:	4295      	cmp	r5, r2
 8008d86:	d002      	beq.n	8008d8e <__mcmp+0x2a>
 8008d88:	d304      	bcc.n	8008d94 <__mcmp+0x30>
 8008d8a:	2001      	movs	r0, #1
 8008d8c:	bd30      	pop	{r4, r5, pc}
 8008d8e:	42a3      	cmp	r3, r4
 8008d90:	d3f4      	bcc.n	8008d7c <__mcmp+0x18>
 8008d92:	e7fb      	b.n	8008d8c <__mcmp+0x28>
 8008d94:	f04f 30ff 	mov.w	r0, #4294967295
 8008d98:	e7f8      	b.n	8008d8c <__mcmp+0x28>
	...

08008d9c <__mdiff>:
 8008d9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da0:	460d      	mov	r5, r1
 8008da2:	4607      	mov	r7, r0
 8008da4:	4611      	mov	r1, r2
 8008da6:	4628      	mov	r0, r5
 8008da8:	4614      	mov	r4, r2
 8008daa:	f7ff ffdb 	bl	8008d64 <__mcmp>
 8008dae:	1e06      	subs	r6, r0, #0
 8008db0:	d111      	bne.n	8008dd6 <__mdiff+0x3a>
 8008db2:	4631      	mov	r1, r6
 8008db4:	4638      	mov	r0, r7
 8008db6:	f7ff fd0d 	bl	80087d4 <_Balloc>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	b928      	cbnz	r0, 8008dca <__mdiff+0x2e>
 8008dbe:	f240 2132 	movw	r1, #562	; 0x232
 8008dc2:	4b3a      	ldr	r3, [pc, #232]	; (8008eac <__mdiff+0x110>)
 8008dc4:	483a      	ldr	r0, [pc, #232]	; (8008eb0 <__mdiff+0x114>)
 8008dc6:	f000 fc41 	bl	800964c <__assert_func>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd6:	bfa4      	itt	ge
 8008dd8:	4623      	movge	r3, r4
 8008dda:	462c      	movge	r4, r5
 8008ddc:	4638      	mov	r0, r7
 8008dde:	6861      	ldr	r1, [r4, #4]
 8008de0:	bfa6      	itte	ge
 8008de2:	461d      	movge	r5, r3
 8008de4:	2600      	movge	r6, #0
 8008de6:	2601      	movlt	r6, #1
 8008de8:	f7ff fcf4 	bl	80087d4 <_Balloc>
 8008dec:	4602      	mov	r2, r0
 8008dee:	b918      	cbnz	r0, 8008df8 <__mdiff+0x5c>
 8008df0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008df4:	4b2d      	ldr	r3, [pc, #180]	; (8008eac <__mdiff+0x110>)
 8008df6:	e7e5      	b.n	8008dc4 <__mdiff+0x28>
 8008df8:	f102 0814 	add.w	r8, r2, #20
 8008dfc:	46c2      	mov	sl, r8
 8008dfe:	f04f 0c00 	mov.w	ip, #0
 8008e02:	6927      	ldr	r7, [r4, #16]
 8008e04:	60c6      	str	r6, [r0, #12]
 8008e06:	692e      	ldr	r6, [r5, #16]
 8008e08:	f104 0014 	add.w	r0, r4, #20
 8008e0c:	f105 0914 	add.w	r9, r5, #20
 8008e10:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008e14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e18:	3410      	adds	r4, #16
 8008e1a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008e1e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e22:	fa1f f18b 	uxth.w	r1, fp
 8008e26:	448c      	add	ip, r1
 8008e28:	b299      	uxth	r1, r3
 8008e2a:	0c1b      	lsrs	r3, r3, #16
 8008e2c:	ebac 0101 	sub.w	r1, ip, r1
 8008e30:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e34:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008e38:	b289      	uxth	r1, r1
 8008e3a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008e3e:	454e      	cmp	r6, r9
 8008e40:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008e44:	f84a 3b04 	str.w	r3, [sl], #4
 8008e48:	d8e7      	bhi.n	8008e1a <__mdiff+0x7e>
 8008e4a:	1b73      	subs	r3, r6, r5
 8008e4c:	3b15      	subs	r3, #21
 8008e4e:	f023 0303 	bic.w	r3, r3, #3
 8008e52:	3515      	adds	r5, #21
 8008e54:	3304      	adds	r3, #4
 8008e56:	42ae      	cmp	r6, r5
 8008e58:	bf38      	it	cc
 8008e5a:	2304      	movcc	r3, #4
 8008e5c:	4418      	add	r0, r3
 8008e5e:	4443      	add	r3, r8
 8008e60:	461e      	mov	r6, r3
 8008e62:	4605      	mov	r5, r0
 8008e64:	4575      	cmp	r5, lr
 8008e66:	d30e      	bcc.n	8008e86 <__mdiff+0xea>
 8008e68:	f10e 0103 	add.w	r1, lr, #3
 8008e6c:	1a09      	subs	r1, r1, r0
 8008e6e:	f021 0103 	bic.w	r1, r1, #3
 8008e72:	3803      	subs	r0, #3
 8008e74:	4586      	cmp	lr, r0
 8008e76:	bf38      	it	cc
 8008e78:	2100      	movcc	r1, #0
 8008e7a:	4419      	add	r1, r3
 8008e7c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008e80:	b18b      	cbz	r3, 8008ea6 <__mdiff+0x10a>
 8008e82:	6117      	str	r7, [r2, #16]
 8008e84:	e7a4      	b.n	8008dd0 <__mdiff+0x34>
 8008e86:	f855 8b04 	ldr.w	r8, [r5], #4
 8008e8a:	fa1f f188 	uxth.w	r1, r8
 8008e8e:	4461      	add	r1, ip
 8008e90:	140c      	asrs	r4, r1, #16
 8008e92:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008e96:	b289      	uxth	r1, r1
 8008e98:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008e9c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008ea0:	f846 1b04 	str.w	r1, [r6], #4
 8008ea4:	e7de      	b.n	8008e64 <__mdiff+0xc8>
 8008ea6:	3f01      	subs	r7, #1
 8008ea8:	e7e8      	b.n	8008e7c <__mdiff+0xe0>
 8008eaa:	bf00      	nop
 8008eac:	0801bdd0 	.word	0x0801bdd0
 8008eb0:	0801be5a 	.word	0x0801be5a

08008eb4 <__ulp>:
 8008eb4:	4b11      	ldr	r3, [pc, #68]	; (8008efc <__ulp+0x48>)
 8008eb6:	400b      	ands	r3, r1
 8008eb8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	dd02      	ble.n	8008ec6 <__ulp+0x12>
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	4770      	bx	lr
 8008ec6:	425b      	negs	r3, r3
 8008ec8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008ecc:	f04f 0000 	mov.w	r0, #0
 8008ed0:	f04f 0100 	mov.w	r1, #0
 8008ed4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008ed8:	da04      	bge.n	8008ee4 <__ulp+0x30>
 8008eda:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008ede:	fa43 f102 	asr.w	r1, r3, r2
 8008ee2:	4770      	bx	lr
 8008ee4:	f1a2 0314 	sub.w	r3, r2, #20
 8008ee8:	2b1e      	cmp	r3, #30
 8008eea:	bfd6      	itet	le
 8008eec:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008ef0:	2301      	movgt	r3, #1
 8008ef2:	fa22 f303 	lsrle.w	r3, r2, r3
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	7ff00000 	.word	0x7ff00000

08008f00 <__b2d>:
 8008f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f04:	6907      	ldr	r7, [r0, #16]
 8008f06:	f100 0914 	add.w	r9, r0, #20
 8008f0a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008f0e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008f12:	f1a7 0804 	sub.w	r8, r7, #4
 8008f16:	4630      	mov	r0, r6
 8008f18:	f7ff fd4e 	bl	80089b8 <__hi0bits>
 8008f1c:	f1c0 0320 	rsb	r3, r0, #32
 8008f20:	280a      	cmp	r0, #10
 8008f22:	600b      	str	r3, [r1, #0]
 8008f24:	491f      	ldr	r1, [pc, #124]	; (8008fa4 <__b2d+0xa4>)
 8008f26:	dc17      	bgt.n	8008f58 <__b2d+0x58>
 8008f28:	45c1      	cmp	r9, r8
 8008f2a:	bf28      	it	cs
 8008f2c:	2200      	movcs	r2, #0
 8008f2e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008f32:	fa26 f30c 	lsr.w	r3, r6, ip
 8008f36:	bf38      	it	cc
 8008f38:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008f3c:	ea43 0501 	orr.w	r5, r3, r1
 8008f40:	f100 0315 	add.w	r3, r0, #21
 8008f44:	fa06 f303 	lsl.w	r3, r6, r3
 8008f48:	fa22 f20c 	lsr.w	r2, r2, ip
 8008f4c:	ea43 0402 	orr.w	r4, r3, r2
 8008f50:	4620      	mov	r0, r4
 8008f52:	4629      	mov	r1, r5
 8008f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f58:	45c1      	cmp	r9, r8
 8008f5a:	bf2e      	itee	cs
 8008f5c:	2200      	movcs	r2, #0
 8008f5e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008f62:	f1a7 0808 	subcc.w	r8, r7, #8
 8008f66:	f1b0 030b 	subs.w	r3, r0, #11
 8008f6a:	d016      	beq.n	8008f9a <__b2d+0x9a>
 8008f6c:	f1c3 0720 	rsb	r7, r3, #32
 8008f70:	fa22 f107 	lsr.w	r1, r2, r7
 8008f74:	45c8      	cmp	r8, r9
 8008f76:	fa06 f603 	lsl.w	r6, r6, r3
 8008f7a:	ea46 0601 	orr.w	r6, r6, r1
 8008f7e:	bf94      	ite	ls
 8008f80:	2100      	movls	r1, #0
 8008f82:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008f86:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008f8a:	fa02 f003 	lsl.w	r0, r2, r3
 8008f8e:	40f9      	lsrs	r1, r7
 8008f90:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008f94:	ea40 0401 	orr.w	r4, r0, r1
 8008f98:	e7da      	b.n	8008f50 <__b2d+0x50>
 8008f9a:	4614      	mov	r4, r2
 8008f9c:	ea46 0501 	orr.w	r5, r6, r1
 8008fa0:	e7d6      	b.n	8008f50 <__b2d+0x50>
 8008fa2:	bf00      	nop
 8008fa4:	3ff00000 	.word	0x3ff00000

08008fa8 <__d2b>:
 8008fa8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008fac:	2101      	movs	r1, #1
 8008fae:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008fb2:	4690      	mov	r8, r2
 8008fb4:	461d      	mov	r5, r3
 8008fb6:	f7ff fc0d 	bl	80087d4 <_Balloc>
 8008fba:	4604      	mov	r4, r0
 8008fbc:	b930      	cbnz	r0, 8008fcc <__d2b+0x24>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	f240 310a 	movw	r1, #778	; 0x30a
 8008fc4:	4b24      	ldr	r3, [pc, #144]	; (8009058 <__d2b+0xb0>)
 8008fc6:	4825      	ldr	r0, [pc, #148]	; (800905c <__d2b+0xb4>)
 8008fc8:	f000 fb40 	bl	800964c <__assert_func>
 8008fcc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008fd0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008fd4:	bb2d      	cbnz	r5, 8009022 <__d2b+0x7a>
 8008fd6:	9301      	str	r3, [sp, #4]
 8008fd8:	f1b8 0300 	subs.w	r3, r8, #0
 8008fdc:	d026      	beq.n	800902c <__d2b+0x84>
 8008fde:	4668      	mov	r0, sp
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	f7ff fd09 	bl	80089f8 <__lo0bits>
 8008fe6:	9900      	ldr	r1, [sp, #0]
 8008fe8:	b1f0      	cbz	r0, 8009028 <__d2b+0x80>
 8008fea:	9a01      	ldr	r2, [sp, #4]
 8008fec:	f1c0 0320 	rsb	r3, r0, #32
 8008ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff4:	430b      	orrs	r3, r1
 8008ff6:	40c2      	lsrs	r2, r0
 8008ff8:	6163      	str	r3, [r4, #20]
 8008ffa:	9201      	str	r2, [sp, #4]
 8008ffc:	9b01      	ldr	r3, [sp, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	bf14      	ite	ne
 8009002:	2102      	movne	r1, #2
 8009004:	2101      	moveq	r1, #1
 8009006:	61a3      	str	r3, [r4, #24]
 8009008:	6121      	str	r1, [r4, #16]
 800900a:	b1c5      	cbz	r5, 800903e <__d2b+0x96>
 800900c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009010:	4405      	add	r5, r0
 8009012:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009016:	603d      	str	r5, [r7, #0]
 8009018:	6030      	str	r0, [r6, #0]
 800901a:	4620      	mov	r0, r4
 800901c:	b002      	add	sp, #8
 800901e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009026:	e7d6      	b.n	8008fd6 <__d2b+0x2e>
 8009028:	6161      	str	r1, [r4, #20]
 800902a:	e7e7      	b.n	8008ffc <__d2b+0x54>
 800902c:	a801      	add	r0, sp, #4
 800902e:	f7ff fce3 	bl	80089f8 <__lo0bits>
 8009032:	2101      	movs	r1, #1
 8009034:	9b01      	ldr	r3, [sp, #4]
 8009036:	6121      	str	r1, [r4, #16]
 8009038:	6163      	str	r3, [r4, #20]
 800903a:	3020      	adds	r0, #32
 800903c:	e7e5      	b.n	800900a <__d2b+0x62>
 800903e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009042:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009046:	6038      	str	r0, [r7, #0]
 8009048:	6918      	ldr	r0, [r3, #16]
 800904a:	f7ff fcb5 	bl	80089b8 <__hi0bits>
 800904e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009052:	6031      	str	r1, [r6, #0]
 8009054:	e7e1      	b.n	800901a <__d2b+0x72>
 8009056:	bf00      	nop
 8009058:	0801bdd0 	.word	0x0801bdd0
 800905c:	0801be5a 	.word	0x0801be5a

08009060 <__ratio>:
 8009060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009064:	4688      	mov	r8, r1
 8009066:	4669      	mov	r1, sp
 8009068:	4681      	mov	r9, r0
 800906a:	f7ff ff49 	bl	8008f00 <__b2d>
 800906e:	460f      	mov	r7, r1
 8009070:	4604      	mov	r4, r0
 8009072:	460d      	mov	r5, r1
 8009074:	4640      	mov	r0, r8
 8009076:	a901      	add	r1, sp, #4
 8009078:	f7ff ff42 	bl	8008f00 <__b2d>
 800907c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009080:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009084:	468b      	mov	fp, r1
 8009086:	eba3 0c02 	sub.w	ip, r3, r2
 800908a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800908e:	1a9b      	subs	r3, r3, r2
 8009090:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009094:	2b00      	cmp	r3, #0
 8009096:	bfd5      	itete	le
 8009098:	460a      	movle	r2, r1
 800909a:	462a      	movgt	r2, r5
 800909c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80090a0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80090a4:	bfd8      	it	le
 80090a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80090aa:	465b      	mov	r3, fp
 80090ac:	4602      	mov	r2, r0
 80090ae:	4639      	mov	r1, r7
 80090b0:	4620      	mov	r0, r4
 80090b2:	f7f9 fe19 	bl	8002ce8 <__aeabi_ddiv>
 80090b6:	b003      	add	sp, #12
 80090b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090bc <__copybits>:
 80090bc:	3901      	subs	r1, #1
 80090be:	b570      	push	{r4, r5, r6, lr}
 80090c0:	1149      	asrs	r1, r1, #5
 80090c2:	6914      	ldr	r4, [r2, #16]
 80090c4:	3101      	adds	r1, #1
 80090c6:	f102 0314 	add.w	r3, r2, #20
 80090ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80090ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80090d2:	1f05      	subs	r5, r0, #4
 80090d4:	42a3      	cmp	r3, r4
 80090d6:	d30c      	bcc.n	80090f2 <__copybits+0x36>
 80090d8:	1aa3      	subs	r3, r4, r2
 80090da:	3b11      	subs	r3, #17
 80090dc:	f023 0303 	bic.w	r3, r3, #3
 80090e0:	3211      	adds	r2, #17
 80090e2:	42a2      	cmp	r2, r4
 80090e4:	bf88      	it	hi
 80090e6:	2300      	movhi	r3, #0
 80090e8:	4418      	add	r0, r3
 80090ea:	2300      	movs	r3, #0
 80090ec:	4288      	cmp	r0, r1
 80090ee:	d305      	bcc.n	80090fc <__copybits+0x40>
 80090f0:	bd70      	pop	{r4, r5, r6, pc}
 80090f2:	f853 6b04 	ldr.w	r6, [r3], #4
 80090f6:	f845 6f04 	str.w	r6, [r5, #4]!
 80090fa:	e7eb      	b.n	80090d4 <__copybits+0x18>
 80090fc:	f840 3b04 	str.w	r3, [r0], #4
 8009100:	e7f4      	b.n	80090ec <__copybits+0x30>

08009102 <__any_on>:
 8009102:	f100 0214 	add.w	r2, r0, #20
 8009106:	6900      	ldr	r0, [r0, #16]
 8009108:	114b      	asrs	r3, r1, #5
 800910a:	4298      	cmp	r0, r3
 800910c:	b510      	push	{r4, lr}
 800910e:	db11      	blt.n	8009134 <__any_on+0x32>
 8009110:	dd0a      	ble.n	8009128 <__any_on+0x26>
 8009112:	f011 011f 	ands.w	r1, r1, #31
 8009116:	d007      	beq.n	8009128 <__any_on+0x26>
 8009118:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800911c:	fa24 f001 	lsr.w	r0, r4, r1
 8009120:	fa00 f101 	lsl.w	r1, r0, r1
 8009124:	428c      	cmp	r4, r1
 8009126:	d10b      	bne.n	8009140 <__any_on+0x3e>
 8009128:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800912c:	4293      	cmp	r3, r2
 800912e:	d803      	bhi.n	8009138 <__any_on+0x36>
 8009130:	2000      	movs	r0, #0
 8009132:	bd10      	pop	{r4, pc}
 8009134:	4603      	mov	r3, r0
 8009136:	e7f7      	b.n	8009128 <__any_on+0x26>
 8009138:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800913c:	2900      	cmp	r1, #0
 800913e:	d0f5      	beq.n	800912c <__any_on+0x2a>
 8009140:	2001      	movs	r0, #1
 8009142:	e7f6      	b.n	8009132 <__any_on+0x30>

08009144 <_calloc_r>:
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	fba1 5402 	umull	r5, r4, r1, r2
 800914a:	b934      	cbnz	r4, 800915a <_calloc_r+0x16>
 800914c:	4629      	mov	r1, r5
 800914e:	f000 f875 	bl	800923c <_malloc_r>
 8009152:	4606      	mov	r6, r0
 8009154:	b928      	cbnz	r0, 8009162 <_calloc_r+0x1e>
 8009156:	4630      	mov	r0, r6
 8009158:	bd70      	pop	{r4, r5, r6, pc}
 800915a:	220c      	movs	r2, #12
 800915c:	2600      	movs	r6, #0
 800915e:	6002      	str	r2, [r0, #0]
 8009160:	e7f9      	b.n	8009156 <_calloc_r+0x12>
 8009162:	462a      	mov	r2, r5
 8009164:	4621      	mov	r1, r4
 8009166:	f7fc fbe5 	bl	8005934 <memset>
 800916a:	e7f4      	b.n	8009156 <_calloc_r+0x12>

0800916c <_free_r>:
 800916c:	b538      	push	{r3, r4, r5, lr}
 800916e:	4605      	mov	r5, r0
 8009170:	2900      	cmp	r1, #0
 8009172:	d040      	beq.n	80091f6 <_free_r+0x8a>
 8009174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009178:	1f0c      	subs	r4, r1, #4
 800917a:	2b00      	cmp	r3, #0
 800917c:	bfb8      	it	lt
 800917e:	18e4      	addlt	r4, r4, r3
 8009180:	f000 faae 	bl	80096e0 <__malloc_lock>
 8009184:	4a1c      	ldr	r2, [pc, #112]	; (80091f8 <_free_r+0x8c>)
 8009186:	6813      	ldr	r3, [r2, #0]
 8009188:	b933      	cbnz	r3, 8009198 <_free_r+0x2c>
 800918a:	6063      	str	r3, [r4, #4]
 800918c:	6014      	str	r4, [r2, #0]
 800918e:	4628      	mov	r0, r5
 8009190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009194:	f000 baaa 	b.w	80096ec <__malloc_unlock>
 8009198:	42a3      	cmp	r3, r4
 800919a:	d908      	bls.n	80091ae <_free_r+0x42>
 800919c:	6820      	ldr	r0, [r4, #0]
 800919e:	1821      	adds	r1, r4, r0
 80091a0:	428b      	cmp	r3, r1
 80091a2:	bf01      	itttt	eq
 80091a4:	6819      	ldreq	r1, [r3, #0]
 80091a6:	685b      	ldreq	r3, [r3, #4]
 80091a8:	1809      	addeq	r1, r1, r0
 80091aa:	6021      	streq	r1, [r4, #0]
 80091ac:	e7ed      	b.n	800918a <_free_r+0x1e>
 80091ae:	461a      	mov	r2, r3
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	b10b      	cbz	r3, 80091b8 <_free_r+0x4c>
 80091b4:	42a3      	cmp	r3, r4
 80091b6:	d9fa      	bls.n	80091ae <_free_r+0x42>
 80091b8:	6811      	ldr	r1, [r2, #0]
 80091ba:	1850      	adds	r0, r2, r1
 80091bc:	42a0      	cmp	r0, r4
 80091be:	d10b      	bne.n	80091d8 <_free_r+0x6c>
 80091c0:	6820      	ldr	r0, [r4, #0]
 80091c2:	4401      	add	r1, r0
 80091c4:	1850      	adds	r0, r2, r1
 80091c6:	4283      	cmp	r3, r0
 80091c8:	6011      	str	r1, [r2, #0]
 80091ca:	d1e0      	bne.n	800918e <_free_r+0x22>
 80091cc:	6818      	ldr	r0, [r3, #0]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	4401      	add	r1, r0
 80091d2:	6011      	str	r1, [r2, #0]
 80091d4:	6053      	str	r3, [r2, #4]
 80091d6:	e7da      	b.n	800918e <_free_r+0x22>
 80091d8:	d902      	bls.n	80091e0 <_free_r+0x74>
 80091da:	230c      	movs	r3, #12
 80091dc:	602b      	str	r3, [r5, #0]
 80091de:	e7d6      	b.n	800918e <_free_r+0x22>
 80091e0:	6820      	ldr	r0, [r4, #0]
 80091e2:	1821      	adds	r1, r4, r0
 80091e4:	428b      	cmp	r3, r1
 80091e6:	bf01      	itttt	eq
 80091e8:	6819      	ldreq	r1, [r3, #0]
 80091ea:	685b      	ldreq	r3, [r3, #4]
 80091ec:	1809      	addeq	r1, r1, r0
 80091ee:	6021      	streq	r1, [r4, #0]
 80091f0:	6063      	str	r3, [r4, #4]
 80091f2:	6054      	str	r4, [r2, #4]
 80091f4:	e7cb      	b.n	800918e <_free_r+0x22>
 80091f6:	bd38      	pop	{r3, r4, r5, pc}
 80091f8:	200008a4 	.word	0x200008a4

080091fc <sbrk_aligned>:
 80091fc:	b570      	push	{r4, r5, r6, lr}
 80091fe:	4e0e      	ldr	r6, [pc, #56]	; (8009238 <sbrk_aligned+0x3c>)
 8009200:	460c      	mov	r4, r1
 8009202:	6831      	ldr	r1, [r6, #0]
 8009204:	4605      	mov	r5, r0
 8009206:	b911      	cbnz	r1, 800920e <sbrk_aligned+0x12>
 8009208:	f000 f9ee 	bl	80095e8 <_sbrk_r>
 800920c:	6030      	str	r0, [r6, #0]
 800920e:	4621      	mov	r1, r4
 8009210:	4628      	mov	r0, r5
 8009212:	f000 f9e9 	bl	80095e8 <_sbrk_r>
 8009216:	1c43      	adds	r3, r0, #1
 8009218:	d00a      	beq.n	8009230 <sbrk_aligned+0x34>
 800921a:	1cc4      	adds	r4, r0, #3
 800921c:	f024 0403 	bic.w	r4, r4, #3
 8009220:	42a0      	cmp	r0, r4
 8009222:	d007      	beq.n	8009234 <sbrk_aligned+0x38>
 8009224:	1a21      	subs	r1, r4, r0
 8009226:	4628      	mov	r0, r5
 8009228:	f000 f9de 	bl	80095e8 <_sbrk_r>
 800922c:	3001      	adds	r0, #1
 800922e:	d101      	bne.n	8009234 <sbrk_aligned+0x38>
 8009230:	f04f 34ff 	mov.w	r4, #4294967295
 8009234:	4620      	mov	r0, r4
 8009236:	bd70      	pop	{r4, r5, r6, pc}
 8009238:	200008a8 	.word	0x200008a8

0800923c <_malloc_r>:
 800923c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009240:	1ccd      	adds	r5, r1, #3
 8009242:	f025 0503 	bic.w	r5, r5, #3
 8009246:	3508      	adds	r5, #8
 8009248:	2d0c      	cmp	r5, #12
 800924a:	bf38      	it	cc
 800924c:	250c      	movcc	r5, #12
 800924e:	2d00      	cmp	r5, #0
 8009250:	4607      	mov	r7, r0
 8009252:	db01      	blt.n	8009258 <_malloc_r+0x1c>
 8009254:	42a9      	cmp	r1, r5
 8009256:	d905      	bls.n	8009264 <_malloc_r+0x28>
 8009258:	230c      	movs	r3, #12
 800925a:	2600      	movs	r6, #0
 800925c:	603b      	str	r3, [r7, #0]
 800925e:	4630      	mov	r0, r6
 8009260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009264:	4e2e      	ldr	r6, [pc, #184]	; (8009320 <_malloc_r+0xe4>)
 8009266:	f000 fa3b 	bl	80096e0 <__malloc_lock>
 800926a:	6833      	ldr	r3, [r6, #0]
 800926c:	461c      	mov	r4, r3
 800926e:	bb34      	cbnz	r4, 80092be <_malloc_r+0x82>
 8009270:	4629      	mov	r1, r5
 8009272:	4638      	mov	r0, r7
 8009274:	f7ff ffc2 	bl	80091fc <sbrk_aligned>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	4604      	mov	r4, r0
 800927c:	d14d      	bne.n	800931a <_malloc_r+0xde>
 800927e:	6834      	ldr	r4, [r6, #0]
 8009280:	4626      	mov	r6, r4
 8009282:	2e00      	cmp	r6, #0
 8009284:	d140      	bne.n	8009308 <_malloc_r+0xcc>
 8009286:	6823      	ldr	r3, [r4, #0]
 8009288:	4631      	mov	r1, r6
 800928a:	4638      	mov	r0, r7
 800928c:	eb04 0803 	add.w	r8, r4, r3
 8009290:	f000 f9aa 	bl	80095e8 <_sbrk_r>
 8009294:	4580      	cmp	r8, r0
 8009296:	d13a      	bne.n	800930e <_malloc_r+0xd2>
 8009298:	6821      	ldr	r1, [r4, #0]
 800929a:	3503      	adds	r5, #3
 800929c:	1a6d      	subs	r5, r5, r1
 800929e:	f025 0503 	bic.w	r5, r5, #3
 80092a2:	3508      	adds	r5, #8
 80092a4:	2d0c      	cmp	r5, #12
 80092a6:	bf38      	it	cc
 80092a8:	250c      	movcc	r5, #12
 80092aa:	4638      	mov	r0, r7
 80092ac:	4629      	mov	r1, r5
 80092ae:	f7ff ffa5 	bl	80091fc <sbrk_aligned>
 80092b2:	3001      	adds	r0, #1
 80092b4:	d02b      	beq.n	800930e <_malloc_r+0xd2>
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	442b      	add	r3, r5
 80092ba:	6023      	str	r3, [r4, #0]
 80092bc:	e00e      	b.n	80092dc <_malloc_r+0xa0>
 80092be:	6822      	ldr	r2, [r4, #0]
 80092c0:	1b52      	subs	r2, r2, r5
 80092c2:	d41e      	bmi.n	8009302 <_malloc_r+0xc6>
 80092c4:	2a0b      	cmp	r2, #11
 80092c6:	d916      	bls.n	80092f6 <_malloc_r+0xba>
 80092c8:	1961      	adds	r1, r4, r5
 80092ca:	42a3      	cmp	r3, r4
 80092cc:	6025      	str	r5, [r4, #0]
 80092ce:	bf18      	it	ne
 80092d0:	6059      	strne	r1, [r3, #4]
 80092d2:	6863      	ldr	r3, [r4, #4]
 80092d4:	bf08      	it	eq
 80092d6:	6031      	streq	r1, [r6, #0]
 80092d8:	5162      	str	r2, [r4, r5]
 80092da:	604b      	str	r3, [r1, #4]
 80092dc:	4638      	mov	r0, r7
 80092de:	f104 060b 	add.w	r6, r4, #11
 80092e2:	f000 fa03 	bl	80096ec <__malloc_unlock>
 80092e6:	f026 0607 	bic.w	r6, r6, #7
 80092ea:	1d23      	adds	r3, r4, #4
 80092ec:	1af2      	subs	r2, r6, r3
 80092ee:	d0b6      	beq.n	800925e <_malloc_r+0x22>
 80092f0:	1b9b      	subs	r3, r3, r6
 80092f2:	50a3      	str	r3, [r4, r2]
 80092f4:	e7b3      	b.n	800925e <_malloc_r+0x22>
 80092f6:	6862      	ldr	r2, [r4, #4]
 80092f8:	42a3      	cmp	r3, r4
 80092fa:	bf0c      	ite	eq
 80092fc:	6032      	streq	r2, [r6, #0]
 80092fe:	605a      	strne	r2, [r3, #4]
 8009300:	e7ec      	b.n	80092dc <_malloc_r+0xa0>
 8009302:	4623      	mov	r3, r4
 8009304:	6864      	ldr	r4, [r4, #4]
 8009306:	e7b2      	b.n	800926e <_malloc_r+0x32>
 8009308:	4634      	mov	r4, r6
 800930a:	6876      	ldr	r6, [r6, #4]
 800930c:	e7b9      	b.n	8009282 <_malloc_r+0x46>
 800930e:	230c      	movs	r3, #12
 8009310:	4638      	mov	r0, r7
 8009312:	603b      	str	r3, [r7, #0]
 8009314:	f000 f9ea 	bl	80096ec <__malloc_unlock>
 8009318:	e7a1      	b.n	800925e <_malloc_r+0x22>
 800931a:	6025      	str	r5, [r4, #0]
 800931c:	e7de      	b.n	80092dc <_malloc_r+0xa0>
 800931e:	bf00      	nop
 8009320:	200008a4 	.word	0x200008a4

08009324 <__ssputs_r>:
 8009324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009328:	688e      	ldr	r6, [r1, #8]
 800932a:	4682      	mov	sl, r0
 800932c:	429e      	cmp	r6, r3
 800932e:	460c      	mov	r4, r1
 8009330:	4690      	mov	r8, r2
 8009332:	461f      	mov	r7, r3
 8009334:	d838      	bhi.n	80093a8 <__ssputs_r+0x84>
 8009336:	898a      	ldrh	r2, [r1, #12]
 8009338:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800933c:	d032      	beq.n	80093a4 <__ssputs_r+0x80>
 800933e:	6825      	ldr	r5, [r4, #0]
 8009340:	6909      	ldr	r1, [r1, #16]
 8009342:	3301      	adds	r3, #1
 8009344:	eba5 0901 	sub.w	r9, r5, r1
 8009348:	6965      	ldr	r5, [r4, #20]
 800934a:	444b      	add	r3, r9
 800934c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009350:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009354:	106d      	asrs	r5, r5, #1
 8009356:	429d      	cmp	r5, r3
 8009358:	bf38      	it	cc
 800935a:	461d      	movcc	r5, r3
 800935c:	0553      	lsls	r3, r2, #21
 800935e:	d531      	bpl.n	80093c4 <__ssputs_r+0xa0>
 8009360:	4629      	mov	r1, r5
 8009362:	f7ff ff6b 	bl	800923c <_malloc_r>
 8009366:	4606      	mov	r6, r0
 8009368:	b950      	cbnz	r0, 8009380 <__ssputs_r+0x5c>
 800936a:	230c      	movs	r3, #12
 800936c:	f04f 30ff 	mov.w	r0, #4294967295
 8009370:	f8ca 3000 	str.w	r3, [sl]
 8009374:	89a3      	ldrh	r3, [r4, #12]
 8009376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800937a:	81a3      	strh	r3, [r4, #12]
 800937c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009380:	464a      	mov	r2, r9
 8009382:	6921      	ldr	r1, [r4, #16]
 8009384:	f7ff fa18 	bl	80087b8 <memcpy>
 8009388:	89a3      	ldrh	r3, [r4, #12]
 800938a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800938e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009392:	81a3      	strh	r3, [r4, #12]
 8009394:	6126      	str	r6, [r4, #16]
 8009396:	444e      	add	r6, r9
 8009398:	6026      	str	r6, [r4, #0]
 800939a:	463e      	mov	r6, r7
 800939c:	6165      	str	r5, [r4, #20]
 800939e:	eba5 0509 	sub.w	r5, r5, r9
 80093a2:	60a5      	str	r5, [r4, #8]
 80093a4:	42be      	cmp	r6, r7
 80093a6:	d900      	bls.n	80093aa <__ssputs_r+0x86>
 80093a8:	463e      	mov	r6, r7
 80093aa:	4632      	mov	r2, r6
 80093ac:	4641      	mov	r1, r8
 80093ae:	6820      	ldr	r0, [r4, #0]
 80093b0:	f000 f97c 	bl	80096ac <memmove>
 80093b4:	68a3      	ldr	r3, [r4, #8]
 80093b6:	2000      	movs	r0, #0
 80093b8:	1b9b      	subs	r3, r3, r6
 80093ba:	60a3      	str	r3, [r4, #8]
 80093bc:	6823      	ldr	r3, [r4, #0]
 80093be:	4433      	add	r3, r6
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	e7db      	b.n	800937c <__ssputs_r+0x58>
 80093c4:	462a      	mov	r2, r5
 80093c6:	f000 f997 	bl	80096f8 <_realloc_r>
 80093ca:	4606      	mov	r6, r0
 80093cc:	2800      	cmp	r0, #0
 80093ce:	d1e1      	bne.n	8009394 <__ssputs_r+0x70>
 80093d0:	4650      	mov	r0, sl
 80093d2:	6921      	ldr	r1, [r4, #16]
 80093d4:	f7ff feca 	bl	800916c <_free_r>
 80093d8:	e7c7      	b.n	800936a <__ssputs_r+0x46>
	...

080093dc <_svfiprintf_r>:
 80093dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e0:	4698      	mov	r8, r3
 80093e2:	898b      	ldrh	r3, [r1, #12]
 80093e4:	4607      	mov	r7, r0
 80093e6:	061b      	lsls	r3, r3, #24
 80093e8:	460d      	mov	r5, r1
 80093ea:	4614      	mov	r4, r2
 80093ec:	b09d      	sub	sp, #116	; 0x74
 80093ee:	d50e      	bpl.n	800940e <_svfiprintf_r+0x32>
 80093f0:	690b      	ldr	r3, [r1, #16]
 80093f2:	b963      	cbnz	r3, 800940e <_svfiprintf_r+0x32>
 80093f4:	2140      	movs	r1, #64	; 0x40
 80093f6:	f7ff ff21 	bl	800923c <_malloc_r>
 80093fa:	6028      	str	r0, [r5, #0]
 80093fc:	6128      	str	r0, [r5, #16]
 80093fe:	b920      	cbnz	r0, 800940a <_svfiprintf_r+0x2e>
 8009400:	230c      	movs	r3, #12
 8009402:	603b      	str	r3, [r7, #0]
 8009404:	f04f 30ff 	mov.w	r0, #4294967295
 8009408:	e0d1      	b.n	80095ae <_svfiprintf_r+0x1d2>
 800940a:	2340      	movs	r3, #64	; 0x40
 800940c:	616b      	str	r3, [r5, #20]
 800940e:	2300      	movs	r3, #0
 8009410:	9309      	str	r3, [sp, #36]	; 0x24
 8009412:	2320      	movs	r3, #32
 8009414:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009418:	2330      	movs	r3, #48	; 0x30
 800941a:	f04f 0901 	mov.w	r9, #1
 800941e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009422:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80095c8 <_svfiprintf_r+0x1ec>
 8009426:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800942a:	4623      	mov	r3, r4
 800942c:	469a      	mov	sl, r3
 800942e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009432:	b10a      	cbz	r2, 8009438 <_svfiprintf_r+0x5c>
 8009434:	2a25      	cmp	r2, #37	; 0x25
 8009436:	d1f9      	bne.n	800942c <_svfiprintf_r+0x50>
 8009438:	ebba 0b04 	subs.w	fp, sl, r4
 800943c:	d00b      	beq.n	8009456 <_svfiprintf_r+0x7a>
 800943e:	465b      	mov	r3, fp
 8009440:	4622      	mov	r2, r4
 8009442:	4629      	mov	r1, r5
 8009444:	4638      	mov	r0, r7
 8009446:	f7ff ff6d 	bl	8009324 <__ssputs_r>
 800944a:	3001      	adds	r0, #1
 800944c:	f000 80aa 	beq.w	80095a4 <_svfiprintf_r+0x1c8>
 8009450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009452:	445a      	add	r2, fp
 8009454:	9209      	str	r2, [sp, #36]	; 0x24
 8009456:	f89a 3000 	ldrb.w	r3, [sl]
 800945a:	2b00      	cmp	r3, #0
 800945c:	f000 80a2 	beq.w	80095a4 <_svfiprintf_r+0x1c8>
 8009460:	2300      	movs	r3, #0
 8009462:	f04f 32ff 	mov.w	r2, #4294967295
 8009466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800946a:	f10a 0a01 	add.w	sl, sl, #1
 800946e:	9304      	str	r3, [sp, #16]
 8009470:	9307      	str	r3, [sp, #28]
 8009472:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009476:	931a      	str	r3, [sp, #104]	; 0x68
 8009478:	4654      	mov	r4, sl
 800947a:	2205      	movs	r2, #5
 800947c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009480:	4851      	ldr	r0, [pc, #324]	; (80095c8 <_svfiprintf_r+0x1ec>)
 8009482:	f7ff f98b 	bl	800879c <memchr>
 8009486:	9a04      	ldr	r2, [sp, #16]
 8009488:	b9d8      	cbnz	r0, 80094c2 <_svfiprintf_r+0xe6>
 800948a:	06d0      	lsls	r0, r2, #27
 800948c:	bf44      	itt	mi
 800948e:	2320      	movmi	r3, #32
 8009490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009494:	0711      	lsls	r1, r2, #28
 8009496:	bf44      	itt	mi
 8009498:	232b      	movmi	r3, #43	; 0x2b
 800949a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800949e:	f89a 3000 	ldrb.w	r3, [sl]
 80094a2:	2b2a      	cmp	r3, #42	; 0x2a
 80094a4:	d015      	beq.n	80094d2 <_svfiprintf_r+0xf6>
 80094a6:	4654      	mov	r4, sl
 80094a8:	2000      	movs	r0, #0
 80094aa:	f04f 0c0a 	mov.w	ip, #10
 80094ae:	9a07      	ldr	r2, [sp, #28]
 80094b0:	4621      	mov	r1, r4
 80094b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094b6:	3b30      	subs	r3, #48	; 0x30
 80094b8:	2b09      	cmp	r3, #9
 80094ba:	d94e      	bls.n	800955a <_svfiprintf_r+0x17e>
 80094bc:	b1b0      	cbz	r0, 80094ec <_svfiprintf_r+0x110>
 80094be:	9207      	str	r2, [sp, #28]
 80094c0:	e014      	b.n	80094ec <_svfiprintf_r+0x110>
 80094c2:	eba0 0308 	sub.w	r3, r0, r8
 80094c6:	fa09 f303 	lsl.w	r3, r9, r3
 80094ca:	4313      	orrs	r3, r2
 80094cc:	46a2      	mov	sl, r4
 80094ce:	9304      	str	r3, [sp, #16]
 80094d0:	e7d2      	b.n	8009478 <_svfiprintf_r+0x9c>
 80094d2:	9b03      	ldr	r3, [sp, #12]
 80094d4:	1d19      	adds	r1, r3, #4
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	9103      	str	r1, [sp, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	bfbb      	ittet	lt
 80094de:	425b      	neglt	r3, r3
 80094e0:	f042 0202 	orrlt.w	r2, r2, #2
 80094e4:	9307      	strge	r3, [sp, #28]
 80094e6:	9307      	strlt	r3, [sp, #28]
 80094e8:	bfb8      	it	lt
 80094ea:	9204      	strlt	r2, [sp, #16]
 80094ec:	7823      	ldrb	r3, [r4, #0]
 80094ee:	2b2e      	cmp	r3, #46	; 0x2e
 80094f0:	d10c      	bne.n	800950c <_svfiprintf_r+0x130>
 80094f2:	7863      	ldrb	r3, [r4, #1]
 80094f4:	2b2a      	cmp	r3, #42	; 0x2a
 80094f6:	d135      	bne.n	8009564 <_svfiprintf_r+0x188>
 80094f8:	9b03      	ldr	r3, [sp, #12]
 80094fa:	3402      	adds	r4, #2
 80094fc:	1d1a      	adds	r2, r3, #4
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	9203      	str	r2, [sp, #12]
 8009502:	2b00      	cmp	r3, #0
 8009504:	bfb8      	it	lt
 8009506:	f04f 33ff 	movlt.w	r3, #4294967295
 800950a:	9305      	str	r3, [sp, #20]
 800950c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80095cc <_svfiprintf_r+0x1f0>
 8009510:	2203      	movs	r2, #3
 8009512:	4650      	mov	r0, sl
 8009514:	7821      	ldrb	r1, [r4, #0]
 8009516:	f7ff f941 	bl	800879c <memchr>
 800951a:	b140      	cbz	r0, 800952e <_svfiprintf_r+0x152>
 800951c:	2340      	movs	r3, #64	; 0x40
 800951e:	eba0 000a 	sub.w	r0, r0, sl
 8009522:	fa03 f000 	lsl.w	r0, r3, r0
 8009526:	9b04      	ldr	r3, [sp, #16]
 8009528:	3401      	adds	r4, #1
 800952a:	4303      	orrs	r3, r0
 800952c:	9304      	str	r3, [sp, #16]
 800952e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009532:	2206      	movs	r2, #6
 8009534:	4826      	ldr	r0, [pc, #152]	; (80095d0 <_svfiprintf_r+0x1f4>)
 8009536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800953a:	f7ff f92f 	bl	800879c <memchr>
 800953e:	2800      	cmp	r0, #0
 8009540:	d038      	beq.n	80095b4 <_svfiprintf_r+0x1d8>
 8009542:	4b24      	ldr	r3, [pc, #144]	; (80095d4 <_svfiprintf_r+0x1f8>)
 8009544:	bb1b      	cbnz	r3, 800958e <_svfiprintf_r+0x1b2>
 8009546:	9b03      	ldr	r3, [sp, #12]
 8009548:	3307      	adds	r3, #7
 800954a:	f023 0307 	bic.w	r3, r3, #7
 800954e:	3308      	adds	r3, #8
 8009550:	9303      	str	r3, [sp, #12]
 8009552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009554:	4433      	add	r3, r6
 8009556:	9309      	str	r3, [sp, #36]	; 0x24
 8009558:	e767      	b.n	800942a <_svfiprintf_r+0x4e>
 800955a:	460c      	mov	r4, r1
 800955c:	2001      	movs	r0, #1
 800955e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009562:	e7a5      	b.n	80094b0 <_svfiprintf_r+0xd4>
 8009564:	2300      	movs	r3, #0
 8009566:	f04f 0c0a 	mov.w	ip, #10
 800956a:	4619      	mov	r1, r3
 800956c:	3401      	adds	r4, #1
 800956e:	9305      	str	r3, [sp, #20]
 8009570:	4620      	mov	r0, r4
 8009572:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009576:	3a30      	subs	r2, #48	; 0x30
 8009578:	2a09      	cmp	r2, #9
 800957a:	d903      	bls.n	8009584 <_svfiprintf_r+0x1a8>
 800957c:	2b00      	cmp	r3, #0
 800957e:	d0c5      	beq.n	800950c <_svfiprintf_r+0x130>
 8009580:	9105      	str	r1, [sp, #20]
 8009582:	e7c3      	b.n	800950c <_svfiprintf_r+0x130>
 8009584:	4604      	mov	r4, r0
 8009586:	2301      	movs	r3, #1
 8009588:	fb0c 2101 	mla	r1, ip, r1, r2
 800958c:	e7f0      	b.n	8009570 <_svfiprintf_r+0x194>
 800958e:	ab03      	add	r3, sp, #12
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	462a      	mov	r2, r5
 8009594:	4638      	mov	r0, r7
 8009596:	4b10      	ldr	r3, [pc, #64]	; (80095d8 <_svfiprintf_r+0x1fc>)
 8009598:	a904      	add	r1, sp, #16
 800959a:	f7fc fa71 	bl	8005a80 <_printf_float>
 800959e:	1c42      	adds	r2, r0, #1
 80095a0:	4606      	mov	r6, r0
 80095a2:	d1d6      	bne.n	8009552 <_svfiprintf_r+0x176>
 80095a4:	89ab      	ldrh	r3, [r5, #12]
 80095a6:	065b      	lsls	r3, r3, #25
 80095a8:	f53f af2c 	bmi.w	8009404 <_svfiprintf_r+0x28>
 80095ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095ae:	b01d      	add	sp, #116	; 0x74
 80095b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b4:	ab03      	add	r3, sp, #12
 80095b6:	9300      	str	r3, [sp, #0]
 80095b8:	462a      	mov	r2, r5
 80095ba:	4638      	mov	r0, r7
 80095bc:	4b06      	ldr	r3, [pc, #24]	; (80095d8 <_svfiprintf_r+0x1fc>)
 80095be:	a904      	add	r1, sp, #16
 80095c0:	f7fc fcfa 	bl	8005fb8 <_printf_i>
 80095c4:	e7eb      	b.n	800959e <_svfiprintf_r+0x1c2>
 80095c6:	bf00      	nop
 80095c8:	0801bfb4 	.word	0x0801bfb4
 80095cc:	0801bfba 	.word	0x0801bfba
 80095d0:	0801bfbe 	.word	0x0801bfbe
 80095d4:	08005a81 	.word	0x08005a81
 80095d8:	08009325 	.word	0x08009325

080095dc <nan>:
 80095dc:	2000      	movs	r0, #0
 80095de:	4901      	ldr	r1, [pc, #4]	; (80095e4 <nan+0x8>)
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	7ff80000 	.word	0x7ff80000

080095e8 <_sbrk_r>:
 80095e8:	b538      	push	{r3, r4, r5, lr}
 80095ea:	2300      	movs	r3, #0
 80095ec:	4d05      	ldr	r5, [pc, #20]	; (8009604 <_sbrk_r+0x1c>)
 80095ee:	4604      	mov	r4, r0
 80095f0:	4608      	mov	r0, r1
 80095f2:	602b      	str	r3, [r5, #0]
 80095f4:	f7f9 f864 	bl	80026c0 <_sbrk>
 80095f8:	1c43      	adds	r3, r0, #1
 80095fa:	d102      	bne.n	8009602 <_sbrk_r+0x1a>
 80095fc:	682b      	ldr	r3, [r5, #0]
 80095fe:	b103      	cbz	r3, 8009602 <_sbrk_r+0x1a>
 8009600:	6023      	str	r3, [r4, #0]
 8009602:	bd38      	pop	{r3, r4, r5, pc}
 8009604:	200008ac 	.word	0x200008ac

08009608 <strncmp>:
 8009608:	4603      	mov	r3, r0
 800960a:	b510      	push	{r4, lr}
 800960c:	b172      	cbz	r2, 800962c <strncmp+0x24>
 800960e:	3901      	subs	r1, #1
 8009610:	1884      	adds	r4, r0, r2
 8009612:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009616:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800961a:	4290      	cmp	r0, r2
 800961c:	d101      	bne.n	8009622 <strncmp+0x1a>
 800961e:	42a3      	cmp	r3, r4
 8009620:	d101      	bne.n	8009626 <strncmp+0x1e>
 8009622:	1a80      	subs	r0, r0, r2
 8009624:	bd10      	pop	{r4, pc}
 8009626:	2800      	cmp	r0, #0
 8009628:	d1f3      	bne.n	8009612 <strncmp+0xa>
 800962a:	e7fa      	b.n	8009622 <strncmp+0x1a>
 800962c:	4610      	mov	r0, r2
 800962e:	e7f9      	b.n	8009624 <strncmp+0x1c>

08009630 <__ascii_wctomb>:
 8009630:	4603      	mov	r3, r0
 8009632:	4608      	mov	r0, r1
 8009634:	b141      	cbz	r1, 8009648 <__ascii_wctomb+0x18>
 8009636:	2aff      	cmp	r2, #255	; 0xff
 8009638:	d904      	bls.n	8009644 <__ascii_wctomb+0x14>
 800963a:	228a      	movs	r2, #138	; 0x8a
 800963c:	f04f 30ff 	mov.w	r0, #4294967295
 8009640:	601a      	str	r2, [r3, #0]
 8009642:	4770      	bx	lr
 8009644:	2001      	movs	r0, #1
 8009646:	700a      	strb	r2, [r1, #0]
 8009648:	4770      	bx	lr
	...

0800964c <__assert_func>:
 800964c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800964e:	4614      	mov	r4, r2
 8009650:	461a      	mov	r2, r3
 8009652:	4b09      	ldr	r3, [pc, #36]	; (8009678 <__assert_func+0x2c>)
 8009654:	4605      	mov	r5, r0
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68d8      	ldr	r0, [r3, #12]
 800965a:	b14c      	cbz	r4, 8009670 <__assert_func+0x24>
 800965c:	4b07      	ldr	r3, [pc, #28]	; (800967c <__assert_func+0x30>)
 800965e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009662:	9100      	str	r1, [sp, #0]
 8009664:	462b      	mov	r3, r5
 8009666:	4906      	ldr	r1, [pc, #24]	; (8009680 <__assert_func+0x34>)
 8009668:	f000 f80e 	bl	8009688 <fiprintf>
 800966c:	f000 fa8a 	bl	8009b84 <abort>
 8009670:	4b04      	ldr	r3, [pc, #16]	; (8009684 <__assert_func+0x38>)
 8009672:	461c      	mov	r4, r3
 8009674:	e7f3      	b.n	800965e <__assert_func+0x12>
 8009676:	bf00      	nop
 8009678:	20000010 	.word	0x20000010
 800967c:	0801bfc5 	.word	0x0801bfc5
 8009680:	0801bfd2 	.word	0x0801bfd2
 8009684:	0801bb6e 	.word	0x0801bb6e

08009688 <fiprintf>:
 8009688:	b40e      	push	{r1, r2, r3}
 800968a:	b503      	push	{r0, r1, lr}
 800968c:	4601      	mov	r1, r0
 800968e:	ab03      	add	r3, sp, #12
 8009690:	4805      	ldr	r0, [pc, #20]	; (80096a8 <fiprintf+0x20>)
 8009692:	f853 2b04 	ldr.w	r2, [r3], #4
 8009696:	6800      	ldr	r0, [r0, #0]
 8009698:	9301      	str	r3, [sp, #4]
 800969a:	f000 f883 	bl	80097a4 <_vfiprintf_r>
 800969e:	b002      	add	sp, #8
 80096a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80096a4:	b003      	add	sp, #12
 80096a6:	4770      	bx	lr
 80096a8:	20000010 	.word	0x20000010

080096ac <memmove>:
 80096ac:	4288      	cmp	r0, r1
 80096ae:	b510      	push	{r4, lr}
 80096b0:	eb01 0402 	add.w	r4, r1, r2
 80096b4:	d902      	bls.n	80096bc <memmove+0x10>
 80096b6:	4284      	cmp	r4, r0
 80096b8:	4623      	mov	r3, r4
 80096ba:	d807      	bhi.n	80096cc <memmove+0x20>
 80096bc:	1e43      	subs	r3, r0, #1
 80096be:	42a1      	cmp	r1, r4
 80096c0:	d008      	beq.n	80096d4 <memmove+0x28>
 80096c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096ca:	e7f8      	b.n	80096be <memmove+0x12>
 80096cc:	4601      	mov	r1, r0
 80096ce:	4402      	add	r2, r0
 80096d0:	428a      	cmp	r2, r1
 80096d2:	d100      	bne.n	80096d6 <memmove+0x2a>
 80096d4:	bd10      	pop	{r4, pc}
 80096d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096de:	e7f7      	b.n	80096d0 <memmove+0x24>

080096e0 <__malloc_lock>:
 80096e0:	4801      	ldr	r0, [pc, #4]	; (80096e8 <__malloc_lock+0x8>)
 80096e2:	f000 bc0b 	b.w	8009efc <__retarget_lock_acquire_recursive>
 80096e6:	bf00      	nop
 80096e8:	200008b0 	.word	0x200008b0

080096ec <__malloc_unlock>:
 80096ec:	4801      	ldr	r0, [pc, #4]	; (80096f4 <__malloc_unlock+0x8>)
 80096ee:	f000 bc06 	b.w	8009efe <__retarget_lock_release_recursive>
 80096f2:	bf00      	nop
 80096f4:	200008b0 	.word	0x200008b0

080096f8 <_realloc_r>:
 80096f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096fc:	4680      	mov	r8, r0
 80096fe:	4614      	mov	r4, r2
 8009700:	460e      	mov	r6, r1
 8009702:	b921      	cbnz	r1, 800970e <_realloc_r+0x16>
 8009704:	4611      	mov	r1, r2
 8009706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800970a:	f7ff bd97 	b.w	800923c <_malloc_r>
 800970e:	b92a      	cbnz	r2, 800971c <_realloc_r+0x24>
 8009710:	f7ff fd2c 	bl	800916c <_free_r>
 8009714:	4625      	mov	r5, r4
 8009716:	4628      	mov	r0, r5
 8009718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800971c:	f000 fc56 	bl	8009fcc <_malloc_usable_size_r>
 8009720:	4284      	cmp	r4, r0
 8009722:	4607      	mov	r7, r0
 8009724:	d802      	bhi.n	800972c <_realloc_r+0x34>
 8009726:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800972a:	d812      	bhi.n	8009752 <_realloc_r+0x5a>
 800972c:	4621      	mov	r1, r4
 800972e:	4640      	mov	r0, r8
 8009730:	f7ff fd84 	bl	800923c <_malloc_r>
 8009734:	4605      	mov	r5, r0
 8009736:	2800      	cmp	r0, #0
 8009738:	d0ed      	beq.n	8009716 <_realloc_r+0x1e>
 800973a:	42bc      	cmp	r4, r7
 800973c:	4622      	mov	r2, r4
 800973e:	4631      	mov	r1, r6
 8009740:	bf28      	it	cs
 8009742:	463a      	movcs	r2, r7
 8009744:	f7ff f838 	bl	80087b8 <memcpy>
 8009748:	4631      	mov	r1, r6
 800974a:	4640      	mov	r0, r8
 800974c:	f7ff fd0e 	bl	800916c <_free_r>
 8009750:	e7e1      	b.n	8009716 <_realloc_r+0x1e>
 8009752:	4635      	mov	r5, r6
 8009754:	e7df      	b.n	8009716 <_realloc_r+0x1e>

08009756 <__sfputc_r>:
 8009756:	6893      	ldr	r3, [r2, #8]
 8009758:	b410      	push	{r4}
 800975a:	3b01      	subs	r3, #1
 800975c:	2b00      	cmp	r3, #0
 800975e:	6093      	str	r3, [r2, #8]
 8009760:	da07      	bge.n	8009772 <__sfputc_r+0x1c>
 8009762:	6994      	ldr	r4, [r2, #24]
 8009764:	42a3      	cmp	r3, r4
 8009766:	db01      	blt.n	800976c <__sfputc_r+0x16>
 8009768:	290a      	cmp	r1, #10
 800976a:	d102      	bne.n	8009772 <__sfputc_r+0x1c>
 800976c:	bc10      	pop	{r4}
 800976e:	f000 b949 	b.w	8009a04 <__swbuf_r>
 8009772:	6813      	ldr	r3, [r2, #0]
 8009774:	1c58      	adds	r0, r3, #1
 8009776:	6010      	str	r0, [r2, #0]
 8009778:	7019      	strb	r1, [r3, #0]
 800977a:	4608      	mov	r0, r1
 800977c:	bc10      	pop	{r4}
 800977e:	4770      	bx	lr

08009780 <__sfputs_r>:
 8009780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009782:	4606      	mov	r6, r0
 8009784:	460f      	mov	r7, r1
 8009786:	4614      	mov	r4, r2
 8009788:	18d5      	adds	r5, r2, r3
 800978a:	42ac      	cmp	r4, r5
 800978c:	d101      	bne.n	8009792 <__sfputs_r+0x12>
 800978e:	2000      	movs	r0, #0
 8009790:	e007      	b.n	80097a2 <__sfputs_r+0x22>
 8009792:	463a      	mov	r2, r7
 8009794:	4630      	mov	r0, r6
 8009796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800979a:	f7ff ffdc 	bl	8009756 <__sfputc_r>
 800979e:	1c43      	adds	r3, r0, #1
 80097a0:	d1f3      	bne.n	800978a <__sfputs_r+0xa>
 80097a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080097a4 <_vfiprintf_r>:
 80097a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a8:	460d      	mov	r5, r1
 80097aa:	4614      	mov	r4, r2
 80097ac:	4698      	mov	r8, r3
 80097ae:	4606      	mov	r6, r0
 80097b0:	b09d      	sub	sp, #116	; 0x74
 80097b2:	b118      	cbz	r0, 80097bc <_vfiprintf_r+0x18>
 80097b4:	6983      	ldr	r3, [r0, #24]
 80097b6:	b90b      	cbnz	r3, 80097bc <_vfiprintf_r+0x18>
 80097b8:	f000 fb02 	bl	8009dc0 <__sinit>
 80097bc:	4b89      	ldr	r3, [pc, #548]	; (80099e4 <_vfiprintf_r+0x240>)
 80097be:	429d      	cmp	r5, r3
 80097c0:	d11b      	bne.n	80097fa <_vfiprintf_r+0x56>
 80097c2:	6875      	ldr	r5, [r6, #4]
 80097c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097c6:	07d9      	lsls	r1, r3, #31
 80097c8:	d405      	bmi.n	80097d6 <_vfiprintf_r+0x32>
 80097ca:	89ab      	ldrh	r3, [r5, #12]
 80097cc:	059a      	lsls	r2, r3, #22
 80097ce:	d402      	bmi.n	80097d6 <_vfiprintf_r+0x32>
 80097d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097d2:	f000 fb93 	bl	8009efc <__retarget_lock_acquire_recursive>
 80097d6:	89ab      	ldrh	r3, [r5, #12]
 80097d8:	071b      	lsls	r3, r3, #28
 80097da:	d501      	bpl.n	80097e0 <_vfiprintf_r+0x3c>
 80097dc:	692b      	ldr	r3, [r5, #16]
 80097de:	b9eb      	cbnz	r3, 800981c <_vfiprintf_r+0x78>
 80097e0:	4629      	mov	r1, r5
 80097e2:	4630      	mov	r0, r6
 80097e4:	f000 f960 	bl	8009aa8 <__swsetup_r>
 80097e8:	b1c0      	cbz	r0, 800981c <_vfiprintf_r+0x78>
 80097ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097ec:	07dc      	lsls	r4, r3, #31
 80097ee:	d50e      	bpl.n	800980e <_vfiprintf_r+0x6a>
 80097f0:	f04f 30ff 	mov.w	r0, #4294967295
 80097f4:	b01d      	add	sp, #116	; 0x74
 80097f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fa:	4b7b      	ldr	r3, [pc, #492]	; (80099e8 <_vfiprintf_r+0x244>)
 80097fc:	429d      	cmp	r5, r3
 80097fe:	d101      	bne.n	8009804 <_vfiprintf_r+0x60>
 8009800:	68b5      	ldr	r5, [r6, #8]
 8009802:	e7df      	b.n	80097c4 <_vfiprintf_r+0x20>
 8009804:	4b79      	ldr	r3, [pc, #484]	; (80099ec <_vfiprintf_r+0x248>)
 8009806:	429d      	cmp	r5, r3
 8009808:	bf08      	it	eq
 800980a:	68f5      	ldreq	r5, [r6, #12]
 800980c:	e7da      	b.n	80097c4 <_vfiprintf_r+0x20>
 800980e:	89ab      	ldrh	r3, [r5, #12]
 8009810:	0598      	lsls	r0, r3, #22
 8009812:	d4ed      	bmi.n	80097f0 <_vfiprintf_r+0x4c>
 8009814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009816:	f000 fb72 	bl	8009efe <__retarget_lock_release_recursive>
 800981a:	e7e9      	b.n	80097f0 <_vfiprintf_r+0x4c>
 800981c:	2300      	movs	r3, #0
 800981e:	9309      	str	r3, [sp, #36]	; 0x24
 8009820:	2320      	movs	r3, #32
 8009822:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009826:	2330      	movs	r3, #48	; 0x30
 8009828:	f04f 0901 	mov.w	r9, #1
 800982c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009830:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80099f0 <_vfiprintf_r+0x24c>
 8009834:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009838:	4623      	mov	r3, r4
 800983a:	469a      	mov	sl, r3
 800983c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009840:	b10a      	cbz	r2, 8009846 <_vfiprintf_r+0xa2>
 8009842:	2a25      	cmp	r2, #37	; 0x25
 8009844:	d1f9      	bne.n	800983a <_vfiprintf_r+0x96>
 8009846:	ebba 0b04 	subs.w	fp, sl, r4
 800984a:	d00b      	beq.n	8009864 <_vfiprintf_r+0xc0>
 800984c:	465b      	mov	r3, fp
 800984e:	4622      	mov	r2, r4
 8009850:	4629      	mov	r1, r5
 8009852:	4630      	mov	r0, r6
 8009854:	f7ff ff94 	bl	8009780 <__sfputs_r>
 8009858:	3001      	adds	r0, #1
 800985a:	f000 80aa 	beq.w	80099b2 <_vfiprintf_r+0x20e>
 800985e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009860:	445a      	add	r2, fp
 8009862:	9209      	str	r2, [sp, #36]	; 0x24
 8009864:	f89a 3000 	ldrb.w	r3, [sl]
 8009868:	2b00      	cmp	r3, #0
 800986a:	f000 80a2 	beq.w	80099b2 <_vfiprintf_r+0x20e>
 800986e:	2300      	movs	r3, #0
 8009870:	f04f 32ff 	mov.w	r2, #4294967295
 8009874:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009878:	f10a 0a01 	add.w	sl, sl, #1
 800987c:	9304      	str	r3, [sp, #16]
 800987e:	9307      	str	r3, [sp, #28]
 8009880:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009884:	931a      	str	r3, [sp, #104]	; 0x68
 8009886:	4654      	mov	r4, sl
 8009888:	2205      	movs	r2, #5
 800988a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800988e:	4858      	ldr	r0, [pc, #352]	; (80099f0 <_vfiprintf_r+0x24c>)
 8009890:	f7fe ff84 	bl	800879c <memchr>
 8009894:	9a04      	ldr	r2, [sp, #16]
 8009896:	b9d8      	cbnz	r0, 80098d0 <_vfiprintf_r+0x12c>
 8009898:	06d1      	lsls	r1, r2, #27
 800989a:	bf44      	itt	mi
 800989c:	2320      	movmi	r3, #32
 800989e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098a2:	0713      	lsls	r3, r2, #28
 80098a4:	bf44      	itt	mi
 80098a6:	232b      	movmi	r3, #43	; 0x2b
 80098a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098ac:	f89a 3000 	ldrb.w	r3, [sl]
 80098b0:	2b2a      	cmp	r3, #42	; 0x2a
 80098b2:	d015      	beq.n	80098e0 <_vfiprintf_r+0x13c>
 80098b4:	4654      	mov	r4, sl
 80098b6:	2000      	movs	r0, #0
 80098b8:	f04f 0c0a 	mov.w	ip, #10
 80098bc:	9a07      	ldr	r2, [sp, #28]
 80098be:	4621      	mov	r1, r4
 80098c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098c4:	3b30      	subs	r3, #48	; 0x30
 80098c6:	2b09      	cmp	r3, #9
 80098c8:	d94e      	bls.n	8009968 <_vfiprintf_r+0x1c4>
 80098ca:	b1b0      	cbz	r0, 80098fa <_vfiprintf_r+0x156>
 80098cc:	9207      	str	r2, [sp, #28]
 80098ce:	e014      	b.n	80098fa <_vfiprintf_r+0x156>
 80098d0:	eba0 0308 	sub.w	r3, r0, r8
 80098d4:	fa09 f303 	lsl.w	r3, r9, r3
 80098d8:	4313      	orrs	r3, r2
 80098da:	46a2      	mov	sl, r4
 80098dc:	9304      	str	r3, [sp, #16]
 80098de:	e7d2      	b.n	8009886 <_vfiprintf_r+0xe2>
 80098e0:	9b03      	ldr	r3, [sp, #12]
 80098e2:	1d19      	adds	r1, r3, #4
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	9103      	str	r1, [sp, #12]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	bfbb      	ittet	lt
 80098ec:	425b      	neglt	r3, r3
 80098ee:	f042 0202 	orrlt.w	r2, r2, #2
 80098f2:	9307      	strge	r3, [sp, #28]
 80098f4:	9307      	strlt	r3, [sp, #28]
 80098f6:	bfb8      	it	lt
 80098f8:	9204      	strlt	r2, [sp, #16]
 80098fa:	7823      	ldrb	r3, [r4, #0]
 80098fc:	2b2e      	cmp	r3, #46	; 0x2e
 80098fe:	d10c      	bne.n	800991a <_vfiprintf_r+0x176>
 8009900:	7863      	ldrb	r3, [r4, #1]
 8009902:	2b2a      	cmp	r3, #42	; 0x2a
 8009904:	d135      	bne.n	8009972 <_vfiprintf_r+0x1ce>
 8009906:	9b03      	ldr	r3, [sp, #12]
 8009908:	3402      	adds	r4, #2
 800990a:	1d1a      	adds	r2, r3, #4
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	9203      	str	r2, [sp, #12]
 8009910:	2b00      	cmp	r3, #0
 8009912:	bfb8      	it	lt
 8009914:	f04f 33ff 	movlt.w	r3, #4294967295
 8009918:	9305      	str	r3, [sp, #20]
 800991a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80099f4 <_vfiprintf_r+0x250>
 800991e:	2203      	movs	r2, #3
 8009920:	4650      	mov	r0, sl
 8009922:	7821      	ldrb	r1, [r4, #0]
 8009924:	f7fe ff3a 	bl	800879c <memchr>
 8009928:	b140      	cbz	r0, 800993c <_vfiprintf_r+0x198>
 800992a:	2340      	movs	r3, #64	; 0x40
 800992c:	eba0 000a 	sub.w	r0, r0, sl
 8009930:	fa03 f000 	lsl.w	r0, r3, r0
 8009934:	9b04      	ldr	r3, [sp, #16]
 8009936:	3401      	adds	r4, #1
 8009938:	4303      	orrs	r3, r0
 800993a:	9304      	str	r3, [sp, #16]
 800993c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009940:	2206      	movs	r2, #6
 8009942:	482d      	ldr	r0, [pc, #180]	; (80099f8 <_vfiprintf_r+0x254>)
 8009944:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009948:	f7fe ff28 	bl	800879c <memchr>
 800994c:	2800      	cmp	r0, #0
 800994e:	d03f      	beq.n	80099d0 <_vfiprintf_r+0x22c>
 8009950:	4b2a      	ldr	r3, [pc, #168]	; (80099fc <_vfiprintf_r+0x258>)
 8009952:	bb1b      	cbnz	r3, 800999c <_vfiprintf_r+0x1f8>
 8009954:	9b03      	ldr	r3, [sp, #12]
 8009956:	3307      	adds	r3, #7
 8009958:	f023 0307 	bic.w	r3, r3, #7
 800995c:	3308      	adds	r3, #8
 800995e:	9303      	str	r3, [sp, #12]
 8009960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009962:	443b      	add	r3, r7
 8009964:	9309      	str	r3, [sp, #36]	; 0x24
 8009966:	e767      	b.n	8009838 <_vfiprintf_r+0x94>
 8009968:	460c      	mov	r4, r1
 800996a:	2001      	movs	r0, #1
 800996c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009970:	e7a5      	b.n	80098be <_vfiprintf_r+0x11a>
 8009972:	2300      	movs	r3, #0
 8009974:	f04f 0c0a 	mov.w	ip, #10
 8009978:	4619      	mov	r1, r3
 800997a:	3401      	adds	r4, #1
 800997c:	9305      	str	r3, [sp, #20]
 800997e:	4620      	mov	r0, r4
 8009980:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009984:	3a30      	subs	r2, #48	; 0x30
 8009986:	2a09      	cmp	r2, #9
 8009988:	d903      	bls.n	8009992 <_vfiprintf_r+0x1ee>
 800998a:	2b00      	cmp	r3, #0
 800998c:	d0c5      	beq.n	800991a <_vfiprintf_r+0x176>
 800998e:	9105      	str	r1, [sp, #20]
 8009990:	e7c3      	b.n	800991a <_vfiprintf_r+0x176>
 8009992:	4604      	mov	r4, r0
 8009994:	2301      	movs	r3, #1
 8009996:	fb0c 2101 	mla	r1, ip, r1, r2
 800999a:	e7f0      	b.n	800997e <_vfiprintf_r+0x1da>
 800999c:	ab03      	add	r3, sp, #12
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	462a      	mov	r2, r5
 80099a2:	4630      	mov	r0, r6
 80099a4:	4b16      	ldr	r3, [pc, #88]	; (8009a00 <_vfiprintf_r+0x25c>)
 80099a6:	a904      	add	r1, sp, #16
 80099a8:	f7fc f86a 	bl	8005a80 <_printf_float>
 80099ac:	4607      	mov	r7, r0
 80099ae:	1c78      	adds	r0, r7, #1
 80099b0:	d1d6      	bne.n	8009960 <_vfiprintf_r+0x1bc>
 80099b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099b4:	07d9      	lsls	r1, r3, #31
 80099b6:	d405      	bmi.n	80099c4 <_vfiprintf_r+0x220>
 80099b8:	89ab      	ldrh	r3, [r5, #12]
 80099ba:	059a      	lsls	r2, r3, #22
 80099bc:	d402      	bmi.n	80099c4 <_vfiprintf_r+0x220>
 80099be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099c0:	f000 fa9d 	bl	8009efe <__retarget_lock_release_recursive>
 80099c4:	89ab      	ldrh	r3, [r5, #12]
 80099c6:	065b      	lsls	r3, r3, #25
 80099c8:	f53f af12 	bmi.w	80097f0 <_vfiprintf_r+0x4c>
 80099cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099ce:	e711      	b.n	80097f4 <_vfiprintf_r+0x50>
 80099d0:	ab03      	add	r3, sp, #12
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	462a      	mov	r2, r5
 80099d6:	4630      	mov	r0, r6
 80099d8:	4b09      	ldr	r3, [pc, #36]	; (8009a00 <_vfiprintf_r+0x25c>)
 80099da:	a904      	add	r1, sp, #16
 80099dc:	f7fc faec 	bl	8005fb8 <_printf_i>
 80099e0:	e7e4      	b.n	80099ac <_vfiprintf_r+0x208>
 80099e2:	bf00      	nop
 80099e4:	0801c024 	.word	0x0801c024
 80099e8:	0801c044 	.word	0x0801c044
 80099ec:	0801c004 	.word	0x0801c004
 80099f0:	0801bfb4 	.word	0x0801bfb4
 80099f4:	0801bfba 	.word	0x0801bfba
 80099f8:	0801bfbe 	.word	0x0801bfbe
 80099fc:	08005a81 	.word	0x08005a81
 8009a00:	08009781 	.word	0x08009781

08009a04 <__swbuf_r>:
 8009a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a06:	460e      	mov	r6, r1
 8009a08:	4614      	mov	r4, r2
 8009a0a:	4605      	mov	r5, r0
 8009a0c:	b118      	cbz	r0, 8009a16 <__swbuf_r+0x12>
 8009a0e:	6983      	ldr	r3, [r0, #24]
 8009a10:	b90b      	cbnz	r3, 8009a16 <__swbuf_r+0x12>
 8009a12:	f000 f9d5 	bl	8009dc0 <__sinit>
 8009a16:	4b21      	ldr	r3, [pc, #132]	; (8009a9c <__swbuf_r+0x98>)
 8009a18:	429c      	cmp	r4, r3
 8009a1a:	d12b      	bne.n	8009a74 <__swbuf_r+0x70>
 8009a1c:	686c      	ldr	r4, [r5, #4]
 8009a1e:	69a3      	ldr	r3, [r4, #24]
 8009a20:	60a3      	str	r3, [r4, #8]
 8009a22:	89a3      	ldrh	r3, [r4, #12]
 8009a24:	071a      	lsls	r2, r3, #28
 8009a26:	d52f      	bpl.n	8009a88 <__swbuf_r+0x84>
 8009a28:	6923      	ldr	r3, [r4, #16]
 8009a2a:	b36b      	cbz	r3, 8009a88 <__swbuf_r+0x84>
 8009a2c:	6923      	ldr	r3, [r4, #16]
 8009a2e:	6820      	ldr	r0, [r4, #0]
 8009a30:	b2f6      	uxtb	r6, r6
 8009a32:	1ac0      	subs	r0, r0, r3
 8009a34:	6963      	ldr	r3, [r4, #20]
 8009a36:	4637      	mov	r7, r6
 8009a38:	4283      	cmp	r3, r0
 8009a3a:	dc04      	bgt.n	8009a46 <__swbuf_r+0x42>
 8009a3c:	4621      	mov	r1, r4
 8009a3e:	4628      	mov	r0, r5
 8009a40:	f000 f92a 	bl	8009c98 <_fflush_r>
 8009a44:	bb30      	cbnz	r0, 8009a94 <__swbuf_r+0x90>
 8009a46:	68a3      	ldr	r3, [r4, #8]
 8009a48:	3001      	adds	r0, #1
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	60a3      	str	r3, [r4, #8]
 8009a4e:	6823      	ldr	r3, [r4, #0]
 8009a50:	1c5a      	adds	r2, r3, #1
 8009a52:	6022      	str	r2, [r4, #0]
 8009a54:	701e      	strb	r6, [r3, #0]
 8009a56:	6963      	ldr	r3, [r4, #20]
 8009a58:	4283      	cmp	r3, r0
 8009a5a:	d004      	beq.n	8009a66 <__swbuf_r+0x62>
 8009a5c:	89a3      	ldrh	r3, [r4, #12]
 8009a5e:	07db      	lsls	r3, r3, #31
 8009a60:	d506      	bpl.n	8009a70 <__swbuf_r+0x6c>
 8009a62:	2e0a      	cmp	r6, #10
 8009a64:	d104      	bne.n	8009a70 <__swbuf_r+0x6c>
 8009a66:	4621      	mov	r1, r4
 8009a68:	4628      	mov	r0, r5
 8009a6a:	f000 f915 	bl	8009c98 <_fflush_r>
 8009a6e:	b988      	cbnz	r0, 8009a94 <__swbuf_r+0x90>
 8009a70:	4638      	mov	r0, r7
 8009a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a74:	4b0a      	ldr	r3, [pc, #40]	; (8009aa0 <__swbuf_r+0x9c>)
 8009a76:	429c      	cmp	r4, r3
 8009a78:	d101      	bne.n	8009a7e <__swbuf_r+0x7a>
 8009a7a:	68ac      	ldr	r4, [r5, #8]
 8009a7c:	e7cf      	b.n	8009a1e <__swbuf_r+0x1a>
 8009a7e:	4b09      	ldr	r3, [pc, #36]	; (8009aa4 <__swbuf_r+0xa0>)
 8009a80:	429c      	cmp	r4, r3
 8009a82:	bf08      	it	eq
 8009a84:	68ec      	ldreq	r4, [r5, #12]
 8009a86:	e7ca      	b.n	8009a1e <__swbuf_r+0x1a>
 8009a88:	4621      	mov	r1, r4
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	f000 f80c 	bl	8009aa8 <__swsetup_r>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d0cb      	beq.n	8009a2c <__swbuf_r+0x28>
 8009a94:	f04f 37ff 	mov.w	r7, #4294967295
 8009a98:	e7ea      	b.n	8009a70 <__swbuf_r+0x6c>
 8009a9a:	bf00      	nop
 8009a9c:	0801c024 	.word	0x0801c024
 8009aa0:	0801c044 	.word	0x0801c044
 8009aa4:	0801c004 	.word	0x0801c004

08009aa8 <__swsetup_r>:
 8009aa8:	4b32      	ldr	r3, [pc, #200]	; (8009b74 <__swsetup_r+0xcc>)
 8009aaa:	b570      	push	{r4, r5, r6, lr}
 8009aac:	681d      	ldr	r5, [r3, #0]
 8009aae:	4606      	mov	r6, r0
 8009ab0:	460c      	mov	r4, r1
 8009ab2:	b125      	cbz	r5, 8009abe <__swsetup_r+0x16>
 8009ab4:	69ab      	ldr	r3, [r5, #24]
 8009ab6:	b913      	cbnz	r3, 8009abe <__swsetup_r+0x16>
 8009ab8:	4628      	mov	r0, r5
 8009aba:	f000 f981 	bl	8009dc0 <__sinit>
 8009abe:	4b2e      	ldr	r3, [pc, #184]	; (8009b78 <__swsetup_r+0xd0>)
 8009ac0:	429c      	cmp	r4, r3
 8009ac2:	d10f      	bne.n	8009ae4 <__swsetup_r+0x3c>
 8009ac4:	686c      	ldr	r4, [r5, #4]
 8009ac6:	89a3      	ldrh	r3, [r4, #12]
 8009ac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009acc:	0719      	lsls	r1, r3, #28
 8009ace:	d42c      	bmi.n	8009b2a <__swsetup_r+0x82>
 8009ad0:	06dd      	lsls	r5, r3, #27
 8009ad2:	d411      	bmi.n	8009af8 <__swsetup_r+0x50>
 8009ad4:	2309      	movs	r3, #9
 8009ad6:	6033      	str	r3, [r6, #0]
 8009ad8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009adc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae0:	81a3      	strh	r3, [r4, #12]
 8009ae2:	e03e      	b.n	8009b62 <__swsetup_r+0xba>
 8009ae4:	4b25      	ldr	r3, [pc, #148]	; (8009b7c <__swsetup_r+0xd4>)
 8009ae6:	429c      	cmp	r4, r3
 8009ae8:	d101      	bne.n	8009aee <__swsetup_r+0x46>
 8009aea:	68ac      	ldr	r4, [r5, #8]
 8009aec:	e7eb      	b.n	8009ac6 <__swsetup_r+0x1e>
 8009aee:	4b24      	ldr	r3, [pc, #144]	; (8009b80 <__swsetup_r+0xd8>)
 8009af0:	429c      	cmp	r4, r3
 8009af2:	bf08      	it	eq
 8009af4:	68ec      	ldreq	r4, [r5, #12]
 8009af6:	e7e6      	b.n	8009ac6 <__swsetup_r+0x1e>
 8009af8:	0758      	lsls	r0, r3, #29
 8009afa:	d512      	bpl.n	8009b22 <__swsetup_r+0x7a>
 8009afc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009afe:	b141      	cbz	r1, 8009b12 <__swsetup_r+0x6a>
 8009b00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b04:	4299      	cmp	r1, r3
 8009b06:	d002      	beq.n	8009b0e <__swsetup_r+0x66>
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f7ff fb2f 	bl	800916c <_free_r>
 8009b0e:	2300      	movs	r3, #0
 8009b10:	6363      	str	r3, [r4, #52]	; 0x34
 8009b12:	89a3      	ldrh	r3, [r4, #12]
 8009b14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b18:	81a3      	strh	r3, [r4, #12]
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	6063      	str	r3, [r4, #4]
 8009b1e:	6923      	ldr	r3, [r4, #16]
 8009b20:	6023      	str	r3, [r4, #0]
 8009b22:	89a3      	ldrh	r3, [r4, #12]
 8009b24:	f043 0308 	orr.w	r3, r3, #8
 8009b28:	81a3      	strh	r3, [r4, #12]
 8009b2a:	6923      	ldr	r3, [r4, #16]
 8009b2c:	b94b      	cbnz	r3, 8009b42 <__swsetup_r+0x9a>
 8009b2e:	89a3      	ldrh	r3, [r4, #12]
 8009b30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b38:	d003      	beq.n	8009b42 <__swsetup_r+0x9a>
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	f000 fa05 	bl	8009f4c <__smakebuf_r>
 8009b42:	89a0      	ldrh	r0, [r4, #12]
 8009b44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b48:	f010 0301 	ands.w	r3, r0, #1
 8009b4c:	d00a      	beq.n	8009b64 <__swsetup_r+0xbc>
 8009b4e:	2300      	movs	r3, #0
 8009b50:	60a3      	str	r3, [r4, #8]
 8009b52:	6963      	ldr	r3, [r4, #20]
 8009b54:	425b      	negs	r3, r3
 8009b56:	61a3      	str	r3, [r4, #24]
 8009b58:	6923      	ldr	r3, [r4, #16]
 8009b5a:	b943      	cbnz	r3, 8009b6e <__swsetup_r+0xc6>
 8009b5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b60:	d1ba      	bne.n	8009ad8 <__swsetup_r+0x30>
 8009b62:	bd70      	pop	{r4, r5, r6, pc}
 8009b64:	0781      	lsls	r1, r0, #30
 8009b66:	bf58      	it	pl
 8009b68:	6963      	ldrpl	r3, [r4, #20]
 8009b6a:	60a3      	str	r3, [r4, #8]
 8009b6c:	e7f4      	b.n	8009b58 <__swsetup_r+0xb0>
 8009b6e:	2000      	movs	r0, #0
 8009b70:	e7f7      	b.n	8009b62 <__swsetup_r+0xba>
 8009b72:	bf00      	nop
 8009b74:	20000010 	.word	0x20000010
 8009b78:	0801c024 	.word	0x0801c024
 8009b7c:	0801c044 	.word	0x0801c044
 8009b80:	0801c004 	.word	0x0801c004

08009b84 <abort>:
 8009b84:	2006      	movs	r0, #6
 8009b86:	b508      	push	{r3, lr}
 8009b88:	f000 fa50 	bl	800a02c <raise>
 8009b8c:	2001      	movs	r0, #1
 8009b8e:	f7f8 fd69 	bl	8002664 <_exit>
	...

08009b94 <__sflush_r>:
 8009b94:	898a      	ldrh	r2, [r1, #12]
 8009b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b98:	4605      	mov	r5, r0
 8009b9a:	0710      	lsls	r0, r2, #28
 8009b9c:	460c      	mov	r4, r1
 8009b9e:	d457      	bmi.n	8009c50 <__sflush_r+0xbc>
 8009ba0:	684b      	ldr	r3, [r1, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	dc04      	bgt.n	8009bb0 <__sflush_r+0x1c>
 8009ba6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	dc01      	bgt.n	8009bb0 <__sflush_r+0x1c>
 8009bac:	2000      	movs	r0, #0
 8009bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bb2:	2e00      	cmp	r6, #0
 8009bb4:	d0fa      	beq.n	8009bac <__sflush_r+0x18>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009bbc:	682f      	ldr	r7, [r5, #0]
 8009bbe:	602b      	str	r3, [r5, #0]
 8009bc0:	d032      	beq.n	8009c28 <__sflush_r+0x94>
 8009bc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	075a      	lsls	r2, r3, #29
 8009bc8:	d505      	bpl.n	8009bd6 <__sflush_r+0x42>
 8009bca:	6863      	ldr	r3, [r4, #4]
 8009bcc:	1ac0      	subs	r0, r0, r3
 8009bce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bd0:	b10b      	cbz	r3, 8009bd6 <__sflush_r+0x42>
 8009bd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009bd4:	1ac0      	subs	r0, r0, r3
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	4602      	mov	r2, r0
 8009bda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bdc:	4628      	mov	r0, r5
 8009bde:	6a21      	ldr	r1, [r4, #32]
 8009be0:	47b0      	blx	r6
 8009be2:	1c43      	adds	r3, r0, #1
 8009be4:	89a3      	ldrh	r3, [r4, #12]
 8009be6:	d106      	bne.n	8009bf6 <__sflush_r+0x62>
 8009be8:	6829      	ldr	r1, [r5, #0]
 8009bea:	291d      	cmp	r1, #29
 8009bec:	d82c      	bhi.n	8009c48 <__sflush_r+0xb4>
 8009bee:	4a29      	ldr	r2, [pc, #164]	; (8009c94 <__sflush_r+0x100>)
 8009bf0:	40ca      	lsrs	r2, r1
 8009bf2:	07d6      	lsls	r6, r2, #31
 8009bf4:	d528      	bpl.n	8009c48 <__sflush_r+0xb4>
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	6062      	str	r2, [r4, #4]
 8009bfa:	6922      	ldr	r2, [r4, #16]
 8009bfc:	04d9      	lsls	r1, r3, #19
 8009bfe:	6022      	str	r2, [r4, #0]
 8009c00:	d504      	bpl.n	8009c0c <__sflush_r+0x78>
 8009c02:	1c42      	adds	r2, r0, #1
 8009c04:	d101      	bne.n	8009c0a <__sflush_r+0x76>
 8009c06:	682b      	ldr	r3, [r5, #0]
 8009c08:	b903      	cbnz	r3, 8009c0c <__sflush_r+0x78>
 8009c0a:	6560      	str	r0, [r4, #84]	; 0x54
 8009c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c0e:	602f      	str	r7, [r5, #0]
 8009c10:	2900      	cmp	r1, #0
 8009c12:	d0cb      	beq.n	8009bac <__sflush_r+0x18>
 8009c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c18:	4299      	cmp	r1, r3
 8009c1a:	d002      	beq.n	8009c22 <__sflush_r+0x8e>
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	f7ff faa5 	bl	800916c <_free_r>
 8009c22:	2000      	movs	r0, #0
 8009c24:	6360      	str	r0, [r4, #52]	; 0x34
 8009c26:	e7c2      	b.n	8009bae <__sflush_r+0x1a>
 8009c28:	6a21      	ldr	r1, [r4, #32]
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	47b0      	blx	r6
 8009c30:	1c41      	adds	r1, r0, #1
 8009c32:	d1c7      	bne.n	8009bc4 <__sflush_r+0x30>
 8009c34:	682b      	ldr	r3, [r5, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d0c4      	beq.n	8009bc4 <__sflush_r+0x30>
 8009c3a:	2b1d      	cmp	r3, #29
 8009c3c:	d001      	beq.n	8009c42 <__sflush_r+0xae>
 8009c3e:	2b16      	cmp	r3, #22
 8009c40:	d101      	bne.n	8009c46 <__sflush_r+0xb2>
 8009c42:	602f      	str	r7, [r5, #0]
 8009c44:	e7b2      	b.n	8009bac <__sflush_r+0x18>
 8009c46:	89a3      	ldrh	r3, [r4, #12]
 8009c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c4c:	81a3      	strh	r3, [r4, #12]
 8009c4e:	e7ae      	b.n	8009bae <__sflush_r+0x1a>
 8009c50:	690f      	ldr	r7, [r1, #16]
 8009c52:	2f00      	cmp	r7, #0
 8009c54:	d0aa      	beq.n	8009bac <__sflush_r+0x18>
 8009c56:	0793      	lsls	r3, r2, #30
 8009c58:	bf18      	it	ne
 8009c5a:	2300      	movne	r3, #0
 8009c5c:	680e      	ldr	r6, [r1, #0]
 8009c5e:	bf08      	it	eq
 8009c60:	694b      	ldreq	r3, [r1, #20]
 8009c62:	1bf6      	subs	r6, r6, r7
 8009c64:	600f      	str	r7, [r1, #0]
 8009c66:	608b      	str	r3, [r1, #8]
 8009c68:	2e00      	cmp	r6, #0
 8009c6a:	dd9f      	ble.n	8009bac <__sflush_r+0x18>
 8009c6c:	4633      	mov	r3, r6
 8009c6e:	463a      	mov	r2, r7
 8009c70:	4628      	mov	r0, r5
 8009c72:	6a21      	ldr	r1, [r4, #32]
 8009c74:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009c78:	47e0      	blx	ip
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	dc06      	bgt.n	8009c8c <__sflush_r+0xf8>
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	f04f 30ff 	mov.w	r0, #4294967295
 8009c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c88:	81a3      	strh	r3, [r4, #12]
 8009c8a:	e790      	b.n	8009bae <__sflush_r+0x1a>
 8009c8c:	4407      	add	r7, r0
 8009c8e:	1a36      	subs	r6, r6, r0
 8009c90:	e7ea      	b.n	8009c68 <__sflush_r+0xd4>
 8009c92:	bf00      	nop
 8009c94:	20400001 	.word	0x20400001

08009c98 <_fflush_r>:
 8009c98:	b538      	push	{r3, r4, r5, lr}
 8009c9a:	690b      	ldr	r3, [r1, #16]
 8009c9c:	4605      	mov	r5, r0
 8009c9e:	460c      	mov	r4, r1
 8009ca0:	b913      	cbnz	r3, 8009ca8 <_fflush_r+0x10>
 8009ca2:	2500      	movs	r5, #0
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	bd38      	pop	{r3, r4, r5, pc}
 8009ca8:	b118      	cbz	r0, 8009cb2 <_fflush_r+0x1a>
 8009caa:	6983      	ldr	r3, [r0, #24]
 8009cac:	b90b      	cbnz	r3, 8009cb2 <_fflush_r+0x1a>
 8009cae:	f000 f887 	bl	8009dc0 <__sinit>
 8009cb2:	4b14      	ldr	r3, [pc, #80]	; (8009d04 <_fflush_r+0x6c>)
 8009cb4:	429c      	cmp	r4, r3
 8009cb6:	d11b      	bne.n	8009cf0 <_fflush_r+0x58>
 8009cb8:	686c      	ldr	r4, [r5, #4]
 8009cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d0ef      	beq.n	8009ca2 <_fflush_r+0xa>
 8009cc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009cc4:	07d0      	lsls	r0, r2, #31
 8009cc6:	d404      	bmi.n	8009cd2 <_fflush_r+0x3a>
 8009cc8:	0599      	lsls	r1, r3, #22
 8009cca:	d402      	bmi.n	8009cd2 <_fflush_r+0x3a>
 8009ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cce:	f000 f915 	bl	8009efc <__retarget_lock_acquire_recursive>
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	f7ff ff5d 	bl	8009b94 <__sflush_r>
 8009cda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cdc:	4605      	mov	r5, r0
 8009cde:	07da      	lsls	r2, r3, #31
 8009ce0:	d4e0      	bmi.n	8009ca4 <_fflush_r+0xc>
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	059b      	lsls	r3, r3, #22
 8009ce6:	d4dd      	bmi.n	8009ca4 <_fflush_r+0xc>
 8009ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cea:	f000 f908 	bl	8009efe <__retarget_lock_release_recursive>
 8009cee:	e7d9      	b.n	8009ca4 <_fflush_r+0xc>
 8009cf0:	4b05      	ldr	r3, [pc, #20]	; (8009d08 <_fflush_r+0x70>)
 8009cf2:	429c      	cmp	r4, r3
 8009cf4:	d101      	bne.n	8009cfa <_fflush_r+0x62>
 8009cf6:	68ac      	ldr	r4, [r5, #8]
 8009cf8:	e7df      	b.n	8009cba <_fflush_r+0x22>
 8009cfa:	4b04      	ldr	r3, [pc, #16]	; (8009d0c <_fflush_r+0x74>)
 8009cfc:	429c      	cmp	r4, r3
 8009cfe:	bf08      	it	eq
 8009d00:	68ec      	ldreq	r4, [r5, #12]
 8009d02:	e7da      	b.n	8009cba <_fflush_r+0x22>
 8009d04:	0801c024 	.word	0x0801c024
 8009d08:	0801c044 	.word	0x0801c044
 8009d0c:	0801c004 	.word	0x0801c004

08009d10 <std>:
 8009d10:	2300      	movs	r3, #0
 8009d12:	b510      	push	{r4, lr}
 8009d14:	4604      	mov	r4, r0
 8009d16:	e9c0 3300 	strd	r3, r3, [r0]
 8009d1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d1e:	6083      	str	r3, [r0, #8]
 8009d20:	8181      	strh	r1, [r0, #12]
 8009d22:	6643      	str	r3, [r0, #100]	; 0x64
 8009d24:	81c2      	strh	r2, [r0, #14]
 8009d26:	6183      	str	r3, [r0, #24]
 8009d28:	4619      	mov	r1, r3
 8009d2a:	2208      	movs	r2, #8
 8009d2c:	305c      	adds	r0, #92	; 0x5c
 8009d2e:	f7fb fe01 	bl	8005934 <memset>
 8009d32:	4b05      	ldr	r3, [pc, #20]	; (8009d48 <std+0x38>)
 8009d34:	6224      	str	r4, [r4, #32]
 8009d36:	6263      	str	r3, [r4, #36]	; 0x24
 8009d38:	4b04      	ldr	r3, [pc, #16]	; (8009d4c <std+0x3c>)
 8009d3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d3c:	4b04      	ldr	r3, [pc, #16]	; (8009d50 <std+0x40>)
 8009d3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d40:	4b04      	ldr	r3, [pc, #16]	; (8009d54 <std+0x44>)
 8009d42:	6323      	str	r3, [r4, #48]	; 0x30
 8009d44:	bd10      	pop	{r4, pc}
 8009d46:	bf00      	nop
 8009d48:	0800a065 	.word	0x0800a065
 8009d4c:	0800a087 	.word	0x0800a087
 8009d50:	0800a0bf 	.word	0x0800a0bf
 8009d54:	0800a0e3 	.word	0x0800a0e3

08009d58 <_cleanup_r>:
 8009d58:	4901      	ldr	r1, [pc, #4]	; (8009d60 <_cleanup_r+0x8>)
 8009d5a:	f000 b8af 	b.w	8009ebc <_fwalk_reent>
 8009d5e:	bf00      	nop
 8009d60:	08009c99 	.word	0x08009c99

08009d64 <__sfmoreglue>:
 8009d64:	2268      	movs	r2, #104	; 0x68
 8009d66:	b570      	push	{r4, r5, r6, lr}
 8009d68:	1e4d      	subs	r5, r1, #1
 8009d6a:	4355      	muls	r5, r2
 8009d6c:	460e      	mov	r6, r1
 8009d6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d72:	f7ff fa63 	bl	800923c <_malloc_r>
 8009d76:	4604      	mov	r4, r0
 8009d78:	b140      	cbz	r0, 8009d8c <__sfmoreglue+0x28>
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	e9c0 1600 	strd	r1, r6, [r0]
 8009d80:	300c      	adds	r0, #12
 8009d82:	60a0      	str	r0, [r4, #8]
 8009d84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d88:	f7fb fdd4 	bl	8005934 <memset>
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	bd70      	pop	{r4, r5, r6, pc}

08009d90 <__sfp_lock_acquire>:
 8009d90:	4801      	ldr	r0, [pc, #4]	; (8009d98 <__sfp_lock_acquire+0x8>)
 8009d92:	f000 b8b3 	b.w	8009efc <__retarget_lock_acquire_recursive>
 8009d96:	bf00      	nop
 8009d98:	200008b1 	.word	0x200008b1

08009d9c <__sfp_lock_release>:
 8009d9c:	4801      	ldr	r0, [pc, #4]	; (8009da4 <__sfp_lock_release+0x8>)
 8009d9e:	f000 b8ae 	b.w	8009efe <__retarget_lock_release_recursive>
 8009da2:	bf00      	nop
 8009da4:	200008b1 	.word	0x200008b1

08009da8 <__sinit_lock_acquire>:
 8009da8:	4801      	ldr	r0, [pc, #4]	; (8009db0 <__sinit_lock_acquire+0x8>)
 8009daa:	f000 b8a7 	b.w	8009efc <__retarget_lock_acquire_recursive>
 8009dae:	bf00      	nop
 8009db0:	200008b2 	.word	0x200008b2

08009db4 <__sinit_lock_release>:
 8009db4:	4801      	ldr	r0, [pc, #4]	; (8009dbc <__sinit_lock_release+0x8>)
 8009db6:	f000 b8a2 	b.w	8009efe <__retarget_lock_release_recursive>
 8009dba:	bf00      	nop
 8009dbc:	200008b2 	.word	0x200008b2

08009dc0 <__sinit>:
 8009dc0:	b510      	push	{r4, lr}
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	f7ff fff0 	bl	8009da8 <__sinit_lock_acquire>
 8009dc8:	69a3      	ldr	r3, [r4, #24]
 8009dca:	b11b      	cbz	r3, 8009dd4 <__sinit+0x14>
 8009dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dd0:	f7ff bff0 	b.w	8009db4 <__sinit_lock_release>
 8009dd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009dd8:	6523      	str	r3, [r4, #80]	; 0x50
 8009dda:	4b13      	ldr	r3, [pc, #76]	; (8009e28 <__sinit+0x68>)
 8009ddc:	4a13      	ldr	r2, [pc, #76]	; (8009e2c <__sinit+0x6c>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	62a2      	str	r2, [r4, #40]	; 0x28
 8009de2:	42a3      	cmp	r3, r4
 8009de4:	bf08      	it	eq
 8009de6:	2301      	moveq	r3, #1
 8009de8:	4620      	mov	r0, r4
 8009dea:	bf08      	it	eq
 8009dec:	61a3      	streq	r3, [r4, #24]
 8009dee:	f000 f81f 	bl	8009e30 <__sfp>
 8009df2:	6060      	str	r0, [r4, #4]
 8009df4:	4620      	mov	r0, r4
 8009df6:	f000 f81b 	bl	8009e30 <__sfp>
 8009dfa:	60a0      	str	r0, [r4, #8]
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	f000 f817 	bl	8009e30 <__sfp>
 8009e02:	2200      	movs	r2, #0
 8009e04:	2104      	movs	r1, #4
 8009e06:	60e0      	str	r0, [r4, #12]
 8009e08:	6860      	ldr	r0, [r4, #4]
 8009e0a:	f7ff ff81 	bl	8009d10 <std>
 8009e0e:	2201      	movs	r2, #1
 8009e10:	2109      	movs	r1, #9
 8009e12:	68a0      	ldr	r0, [r4, #8]
 8009e14:	f7ff ff7c 	bl	8009d10 <std>
 8009e18:	2202      	movs	r2, #2
 8009e1a:	2112      	movs	r1, #18
 8009e1c:	68e0      	ldr	r0, [r4, #12]
 8009e1e:	f7ff ff77 	bl	8009d10 <std>
 8009e22:	2301      	movs	r3, #1
 8009e24:	61a3      	str	r3, [r4, #24]
 8009e26:	e7d1      	b.n	8009dcc <__sinit+0xc>
 8009e28:	0801bbbc 	.word	0x0801bbbc
 8009e2c:	08009d59 	.word	0x08009d59

08009e30 <__sfp>:
 8009e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e32:	4607      	mov	r7, r0
 8009e34:	f7ff ffac 	bl	8009d90 <__sfp_lock_acquire>
 8009e38:	4b1e      	ldr	r3, [pc, #120]	; (8009eb4 <__sfp+0x84>)
 8009e3a:	681e      	ldr	r6, [r3, #0]
 8009e3c:	69b3      	ldr	r3, [r6, #24]
 8009e3e:	b913      	cbnz	r3, 8009e46 <__sfp+0x16>
 8009e40:	4630      	mov	r0, r6
 8009e42:	f7ff ffbd 	bl	8009dc0 <__sinit>
 8009e46:	3648      	adds	r6, #72	; 0x48
 8009e48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	d503      	bpl.n	8009e58 <__sfp+0x28>
 8009e50:	6833      	ldr	r3, [r6, #0]
 8009e52:	b30b      	cbz	r3, 8009e98 <__sfp+0x68>
 8009e54:	6836      	ldr	r6, [r6, #0]
 8009e56:	e7f7      	b.n	8009e48 <__sfp+0x18>
 8009e58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e5c:	b9d5      	cbnz	r5, 8009e94 <__sfp+0x64>
 8009e5e:	4b16      	ldr	r3, [pc, #88]	; (8009eb8 <__sfp+0x88>)
 8009e60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e64:	60e3      	str	r3, [r4, #12]
 8009e66:	6665      	str	r5, [r4, #100]	; 0x64
 8009e68:	f000 f847 	bl	8009efa <__retarget_lock_init_recursive>
 8009e6c:	f7ff ff96 	bl	8009d9c <__sfp_lock_release>
 8009e70:	2208      	movs	r2, #8
 8009e72:	4629      	mov	r1, r5
 8009e74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e7c:	6025      	str	r5, [r4, #0]
 8009e7e:	61a5      	str	r5, [r4, #24]
 8009e80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e84:	f7fb fd56 	bl	8005934 <memset>
 8009e88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e90:	4620      	mov	r0, r4
 8009e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e94:	3468      	adds	r4, #104	; 0x68
 8009e96:	e7d9      	b.n	8009e4c <__sfp+0x1c>
 8009e98:	2104      	movs	r1, #4
 8009e9a:	4638      	mov	r0, r7
 8009e9c:	f7ff ff62 	bl	8009d64 <__sfmoreglue>
 8009ea0:	4604      	mov	r4, r0
 8009ea2:	6030      	str	r0, [r6, #0]
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	d1d5      	bne.n	8009e54 <__sfp+0x24>
 8009ea8:	f7ff ff78 	bl	8009d9c <__sfp_lock_release>
 8009eac:	230c      	movs	r3, #12
 8009eae:	603b      	str	r3, [r7, #0]
 8009eb0:	e7ee      	b.n	8009e90 <__sfp+0x60>
 8009eb2:	bf00      	nop
 8009eb4:	0801bbbc 	.word	0x0801bbbc
 8009eb8:	ffff0001 	.word	0xffff0001

08009ebc <_fwalk_reent>:
 8009ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ec0:	4606      	mov	r6, r0
 8009ec2:	4688      	mov	r8, r1
 8009ec4:	2700      	movs	r7, #0
 8009ec6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009eca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ece:	f1b9 0901 	subs.w	r9, r9, #1
 8009ed2:	d505      	bpl.n	8009ee0 <_fwalk_reent+0x24>
 8009ed4:	6824      	ldr	r4, [r4, #0]
 8009ed6:	2c00      	cmp	r4, #0
 8009ed8:	d1f7      	bne.n	8009eca <_fwalk_reent+0xe>
 8009eda:	4638      	mov	r0, r7
 8009edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ee0:	89ab      	ldrh	r3, [r5, #12]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d907      	bls.n	8009ef6 <_fwalk_reent+0x3a>
 8009ee6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009eea:	3301      	adds	r3, #1
 8009eec:	d003      	beq.n	8009ef6 <_fwalk_reent+0x3a>
 8009eee:	4629      	mov	r1, r5
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	47c0      	blx	r8
 8009ef4:	4307      	orrs	r7, r0
 8009ef6:	3568      	adds	r5, #104	; 0x68
 8009ef8:	e7e9      	b.n	8009ece <_fwalk_reent+0x12>

08009efa <__retarget_lock_init_recursive>:
 8009efa:	4770      	bx	lr

08009efc <__retarget_lock_acquire_recursive>:
 8009efc:	4770      	bx	lr

08009efe <__retarget_lock_release_recursive>:
 8009efe:	4770      	bx	lr

08009f00 <__swhatbuf_r>:
 8009f00:	b570      	push	{r4, r5, r6, lr}
 8009f02:	460e      	mov	r6, r1
 8009f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f08:	4614      	mov	r4, r2
 8009f0a:	2900      	cmp	r1, #0
 8009f0c:	461d      	mov	r5, r3
 8009f0e:	b096      	sub	sp, #88	; 0x58
 8009f10:	da08      	bge.n	8009f24 <__swhatbuf_r+0x24>
 8009f12:	2200      	movs	r2, #0
 8009f14:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009f18:	602a      	str	r2, [r5, #0]
 8009f1a:	061a      	lsls	r2, r3, #24
 8009f1c:	d410      	bmi.n	8009f40 <__swhatbuf_r+0x40>
 8009f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f22:	e00e      	b.n	8009f42 <__swhatbuf_r+0x42>
 8009f24:	466a      	mov	r2, sp
 8009f26:	f000 f903 	bl	800a130 <_fstat_r>
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	dbf1      	blt.n	8009f12 <__swhatbuf_r+0x12>
 8009f2e:	9a01      	ldr	r2, [sp, #4]
 8009f30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f38:	425a      	negs	r2, r3
 8009f3a:	415a      	adcs	r2, r3
 8009f3c:	602a      	str	r2, [r5, #0]
 8009f3e:	e7ee      	b.n	8009f1e <__swhatbuf_r+0x1e>
 8009f40:	2340      	movs	r3, #64	; 0x40
 8009f42:	2000      	movs	r0, #0
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	b016      	add	sp, #88	; 0x58
 8009f48:	bd70      	pop	{r4, r5, r6, pc}
	...

08009f4c <__smakebuf_r>:
 8009f4c:	898b      	ldrh	r3, [r1, #12]
 8009f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f50:	079d      	lsls	r5, r3, #30
 8009f52:	4606      	mov	r6, r0
 8009f54:	460c      	mov	r4, r1
 8009f56:	d507      	bpl.n	8009f68 <__smakebuf_r+0x1c>
 8009f58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f5c:	6023      	str	r3, [r4, #0]
 8009f5e:	6123      	str	r3, [r4, #16]
 8009f60:	2301      	movs	r3, #1
 8009f62:	6163      	str	r3, [r4, #20]
 8009f64:	b002      	add	sp, #8
 8009f66:	bd70      	pop	{r4, r5, r6, pc}
 8009f68:	466a      	mov	r2, sp
 8009f6a:	ab01      	add	r3, sp, #4
 8009f6c:	f7ff ffc8 	bl	8009f00 <__swhatbuf_r>
 8009f70:	9900      	ldr	r1, [sp, #0]
 8009f72:	4605      	mov	r5, r0
 8009f74:	4630      	mov	r0, r6
 8009f76:	f7ff f961 	bl	800923c <_malloc_r>
 8009f7a:	b948      	cbnz	r0, 8009f90 <__smakebuf_r+0x44>
 8009f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f80:	059a      	lsls	r2, r3, #22
 8009f82:	d4ef      	bmi.n	8009f64 <__smakebuf_r+0x18>
 8009f84:	f023 0303 	bic.w	r3, r3, #3
 8009f88:	f043 0302 	orr.w	r3, r3, #2
 8009f8c:	81a3      	strh	r3, [r4, #12]
 8009f8e:	e7e3      	b.n	8009f58 <__smakebuf_r+0xc>
 8009f90:	4b0d      	ldr	r3, [pc, #52]	; (8009fc8 <__smakebuf_r+0x7c>)
 8009f92:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f94:	89a3      	ldrh	r3, [r4, #12]
 8009f96:	6020      	str	r0, [r4, #0]
 8009f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f9c:	81a3      	strh	r3, [r4, #12]
 8009f9e:	9b00      	ldr	r3, [sp, #0]
 8009fa0:	6120      	str	r0, [r4, #16]
 8009fa2:	6163      	str	r3, [r4, #20]
 8009fa4:	9b01      	ldr	r3, [sp, #4]
 8009fa6:	b15b      	cbz	r3, 8009fc0 <__smakebuf_r+0x74>
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fae:	f000 f8d1 	bl	800a154 <_isatty_r>
 8009fb2:	b128      	cbz	r0, 8009fc0 <__smakebuf_r+0x74>
 8009fb4:	89a3      	ldrh	r3, [r4, #12]
 8009fb6:	f023 0303 	bic.w	r3, r3, #3
 8009fba:	f043 0301 	orr.w	r3, r3, #1
 8009fbe:	81a3      	strh	r3, [r4, #12]
 8009fc0:	89a0      	ldrh	r0, [r4, #12]
 8009fc2:	4305      	orrs	r5, r0
 8009fc4:	81a5      	strh	r5, [r4, #12]
 8009fc6:	e7cd      	b.n	8009f64 <__smakebuf_r+0x18>
 8009fc8:	08009d59 	.word	0x08009d59

08009fcc <_malloc_usable_size_r>:
 8009fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fd0:	1f18      	subs	r0, r3, #4
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	bfbc      	itt	lt
 8009fd6:	580b      	ldrlt	r3, [r1, r0]
 8009fd8:	18c0      	addlt	r0, r0, r3
 8009fda:	4770      	bx	lr

08009fdc <_raise_r>:
 8009fdc:	291f      	cmp	r1, #31
 8009fde:	b538      	push	{r3, r4, r5, lr}
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	460d      	mov	r5, r1
 8009fe4:	d904      	bls.n	8009ff0 <_raise_r+0x14>
 8009fe6:	2316      	movs	r3, #22
 8009fe8:	6003      	str	r3, [r0, #0]
 8009fea:	f04f 30ff 	mov.w	r0, #4294967295
 8009fee:	bd38      	pop	{r3, r4, r5, pc}
 8009ff0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ff2:	b112      	cbz	r2, 8009ffa <_raise_r+0x1e>
 8009ff4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ff8:	b94b      	cbnz	r3, 800a00e <_raise_r+0x32>
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	f000 f830 	bl	800a060 <_getpid_r>
 800a000:	462a      	mov	r2, r5
 800a002:	4601      	mov	r1, r0
 800a004:	4620      	mov	r0, r4
 800a006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a00a:	f000 b817 	b.w	800a03c <_kill_r>
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d00a      	beq.n	800a028 <_raise_r+0x4c>
 800a012:	1c59      	adds	r1, r3, #1
 800a014:	d103      	bne.n	800a01e <_raise_r+0x42>
 800a016:	2316      	movs	r3, #22
 800a018:	6003      	str	r3, [r0, #0]
 800a01a:	2001      	movs	r0, #1
 800a01c:	e7e7      	b.n	8009fee <_raise_r+0x12>
 800a01e:	2400      	movs	r4, #0
 800a020:	4628      	mov	r0, r5
 800a022:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a026:	4798      	blx	r3
 800a028:	2000      	movs	r0, #0
 800a02a:	e7e0      	b.n	8009fee <_raise_r+0x12>

0800a02c <raise>:
 800a02c:	4b02      	ldr	r3, [pc, #8]	; (800a038 <raise+0xc>)
 800a02e:	4601      	mov	r1, r0
 800a030:	6818      	ldr	r0, [r3, #0]
 800a032:	f7ff bfd3 	b.w	8009fdc <_raise_r>
 800a036:	bf00      	nop
 800a038:	20000010 	.word	0x20000010

0800a03c <_kill_r>:
 800a03c:	b538      	push	{r3, r4, r5, lr}
 800a03e:	2300      	movs	r3, #0
 800a040:	4d06      	ldr	r5, [pc, #24]	; (800a05c <_kill_r+0x20>)
 800a042:	4604      	mov	r4, r0
 800a044:	4608      	mov	r0, r1
 800a046:	4611      	mov	r1, r2
 800a048:	602b      	str	r3, [r5, #0]
 800a04a:	f7f8 fb03 	bl	8002654 <_kill>
 800a04e:	1c43      	adds	r3, r0, #1
 800a050:	d102      	bne.n	800a058 <_kill_r+0x1c>
 800a052:	682b      	ldr	r3, [r5, #0]
 800a054:	b103      	cbz	r3, 800a058 <_kill_r+0x1c>
 800a056:	6023      	str	r3, [r4, #0]
 800a058:	bd38      	pop	{r3, r4, r5, pc}
 800a05a:	bf00      	nop
 800a05c:	200008ac 	.word	0x200008ac

0800a060 <_getpid_r>:
 800a060:	f7f8 baf6 	b.w	8002650 <_getpid>

0800a064 <__sread>:
 800a064:	b510      	push	{r4, lr}
 800a066:	460c      	mov	r4, r1
 800a068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a06c:	f000 f894 	bl	800a198 <_read_r>
 800a070:	2800      	cmp	r0, #0
 800a072:	bfab      	itete	ge
 800a074:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a076:	89a3      	ldrhlt	r3, [r4, #12]
 800a078:	181b      	addge	r3, r3, r0
 800a07a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a07e:	bfac      	ite	ge
 800a080:	6563      	strge	r3, [r4, #84]	; 0x54
 800a082:	81a3      	strhlt	r3, [r4, #12]
 800a084:	bd10      	pop	{r4, pc}

0800a086 <__swrite>:
 800a086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a08a:	461f      	mov	r7, r3
 800a08c:	898b      	ldrh	r3, [r1, #12]
 800a08e:	4605      	mov	r5, r0
 800a090:	05db      	lsls	r3, r3, #23
 800a092:	460c      	mov	r4, r1
 800a094:	4616      	mov	r6, r2
 800a096:	d505      	bpl.n	800a0a4 <__swrite+0x1e>
 800a098:	2302      	movs	r3, #2
 800a09a:	2200      	movs	r2, #0
 800a09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0a0:	f000 f868 	bl	800a174 <_lseek_r>
 800a0a4:	89a3      	ldrh	r3, [r4, #12]
 800a0a6:	4632      	mov	r2, r6
 800a0a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0ac:	81a3      	strh	r3, [r4, #12]
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	463b      	mov	r3, r7
 800a0b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ba:	f000 b817 	b.w	800a0ec <_write_r>

0800a0be <__sseek>:
 800a0be:	b510      	push	{r4, lr}
 800a0c0:	460c      	mov	r4, r1
 800a0c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0c6:	f000 f855 	bl	800a174 <_lseek_r>
 800a0ca:	1c43      	adds	r3, r0, #1
 800a0cc:	89a3      	ldrh	r3, [r4, #12]
 800a0ce:	bf15      	itete	ne
 800a0d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0da:	81a3      	strheq	r3, [r4, #12]
 800a0dc:	bf18      	it	ne
 800a0de:	81a3      	strhne	r3, [r4, #12]
 800a0e0:	bd10      	pop	{r4, pc}

0800a0e2 <__sclose>:
 800a0e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0e6:	f000 b813 	b.w	800a110 <_close_r>
	...

0800a0ec <_write_r>:
 800a0ec:	b538      	push	{r3, r4, r5, lr}
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	4608      	mov	r0, r1
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	4d05      	ldr	r5, [pc, #20]	; (800a10c <_write_r+0x20>)
 800a0f8:	602a      	str	r2, [r5, #0]
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	f7f8 fac6 	bl	800268c <_write>
 800a100:	1c43      	adds	r3, r0, #1
 800a102:	d102      	bne.n	800a10a <_write_r+0x1e>
 800a104:	682b      	ldr	r3, [r5, #0]
 800a106:	b103      	cbz	r3, 800a10a <_write_r+0x1e>
 800a108:	6023      	str	r3, [r4, #0]
 800a10a:	bd38      	pop	{r3, r4, r5, pc}
 800a10c:	200008ac 	.word	0x200008ac

0800a110 <_close_r>:
 800a110:	b538      	push	{r3, r4, r5, lr}
 800a112:	2300      	movs	r3, #0
 800a114:	4d05      	ldr	r5, [pc, #20]	; (800a12c <_close_r+0x1c>)
 800a116:	4604      	mov	r4, r0
 800a118:	4608      	mov	r0, r1
 800a11a:	602b      	str	r3, [r5, #0]
 800a11c:	f7f8 fac4 	bl	80026a8 <_close>
 800a120:	1c43      	adds	r3, r0, #1
 800a122:	d102      	bne.n	800a12a <_close_r+0x1a>
 800a124:	682b      	ldr	r3, [r5, #0]
 800a126:	b103      	cbz	r3, 800a12a <_close_r+0x1a>
 800a128:	6023      	str	r3, [r4, #0]
 800a12a:	bd38      	pop	{r3, r4, r5, pc}
 800a12c:	200008ac 	.word	0x200008ac

0800a130 <_fstat_r>:
 800a130:	b538      	push	{r3, r4, r5, lr}
 800a132:	2300      	movs	r3, #0
 800a134:	4d06      	ldr	r5, [pc, #24]	; (800a150 <_fstat_r+0x20>)
 800a136:	4604      	mov	r4, r0
 800a138:	4608      	mov	r0, r1
 800a13a:	4611      	mov	r1, r2
 800a13c:	602b      	str	r3, [r5, #0]
 800a13e:	f7f8 fab6 	bl	80026ae <_fstat>
 800a142:	1c43      	adds	r3, r0, #1
 800a144:	d102      	bne.n	800a14c <_fstat_r+0x1c>
 800a146:	682b      	ldr	r3, [r5, #0]
 800a148:	b103      	cbz	r3, 800a14c <_fstat_r+0x1c>
 800a14a:	6023      	str	r3, [r4, #0]
 800a14c:	bd38      	pop	{r3, r4, r5, pc}
 800a14e:	bf00      	nop
 800a150:	200008ac 	.word	0x200008ac

0800a154 <_isatty_r>:
 800a154:	b538      	push	{r3, r4, r5, lr}
 800a156:	2300      	movs	r3, #0
 800a158:	4d05      	ldr	r5, [pc, #20]	; (800a170 <_isatty_r+0x1c>)
 800a15a:	4604      	mov	r4, r0
 800a15c:	4608      	mov	r0, r1
 800a15e:	602b      	str	r3, [r5, #0]
 800a160:	f7f8 faaa 	bl	80026b8 <_isatty>
 800a164:	1c43      	adds	r3, r0, #1
 800a166:	d102      	bne.n	800a16e <_isatty_r+0x1a>
 800a168:	682b      	ldr	r3, [r5, #0]
 800a16a:	b103      	cbz	r3, 800a16e <_isatty_r+0x1a>
 800a16c:	6023      	str	r3, [r4, #0]
 800a16e:	bd38      	pop	{r3, r4, r5, pc}
 800a170:	200008ac 	.word	0x200008ac

0800a174 <_lseek_r>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	4604      	mov	r4, r0
 800a178:	4608      	mov	r0, r1
 800a17a:	4611      	mov	r1, r2
 800a17c:	2200      	movs	r2, #0
 800a17e:	4d05      	ldr	r5, [pc, #20]	; (800a194 <_lseek_r+0x20>)
 800a180:	602a      	str	r2, [r5, #0]
 800a182:	461a      	mov	r2, r3
 800a184:	f7f8 fa9a 	bl	80026bc <_lseek>
 800a188:	1c43      	adds	r3, r0, #1
 800a18a:	d102      	bne.n	800a192 <_lseek_r+0x1e>
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	b103      	cbz	r3, 800a192 <_lseek_r+0x1e>
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	bd38      	pop	{r3, r4, r5, pc}
 800a194:	200008ac 	.word	0x200008ac

0800a198 <_read_r>:
 800a198:	b538      	push	{r3, r4, r5, lr}
 800a19a:	4604      	mov	r4, r0
 800a19c:	4608      	mov	r0, r1
 800a19e:	4611      	mov	r1, r2
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	4d05      	ldr	r5, [pc, #20]	; (800a1b8 <_read_r+0x20>)
 800a1a4:	602a      	str	r2, [r5, #0]
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	f7f8 fa62 	bl	8002670 <_read>
 800a1ac:	1c43      	adds	r3, r0, #1
 800a1ae:	d102      	bne.n	800a1b6 <_read_r+0x1e>
 800a1b0:	682b      	ldr	r3, [r5, #0]
 800a1b2:	b103      	cbz	r3, 800a1b6 <_read_r+0x1e>
 800a1b4:	6023      	str	r3, [r4, #0]
 800a1b6:	bd38      	pop	{r3, r4, r5, pc}
 800a1b8:	200008ac 	.word	0x200008ac

0800a1bc <memcmp>:
 800a1bc:	b510      	push	{r4, lr}
 800a1be:	3901      	subs	r1, #1
 800a1c0:	4402      	add	r2, r0
 800a1c2:	4290      	cmp	r0, r2
 800a1c4:	d101      	bne.n	800a1ca <memcmp+0xe>
 800a1c6:	2000      	movs	r0, #0
 800a1c8:	e005      	b.n	800a1d6 <memcmp+0x1a>
 800a1ca:	7803      	ldrb	r3, [r0, #0]
 800a1cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a1d0:	42a3      	cmp	r3, r4
 800a1d2:	d001      	beq.n	800a1d8 <memcmp+0x1c>
 800a1d4:	1b18      	subs	r0, r3, r4
 800a1d6:	bd10      	pop	{r4, pc}
 800a1d8:	3001      	adds	r0, #1
 800a1da:	e7f2      	b.n	800a1c2 <memcmp+0x6>
 800a1dc:	0000      	movs	r0, r0
	...

0800a1e0 <floor>:
 800a1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1e4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800a1e8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800a1ec:	2e13      	cmp	r6, #19
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	4607      	mov	r7, r0
 800a1f4:	460c      	mov	r4, r1
 800a1f6:	4605      	mov	r5, r0
 800a1f8:	dc33      	bgt.n	800a262 <floor+0x82>
 800a1fa:	2e00      	cmp	r6, #0
 800a1fc:	da14      	bge.n	800a228 <floor+0x48>
 800a1fe:	a334      	add	r3, pc, #208	; (adr r3, 800a2d0 <floor+0xf0>)
 800a200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a204:	f7f8 fa90 	bl	8002728 <__adddf3>
 800a208:	2200      	movs	r2, #0
 800a20a:	2300      	movs	r3, #0
 800a20c:	f7f8 fed2 	bl	8002fb4 <__aeabi_dcmpgt>
 800a210:	b138      	cbz	r0, 800a222 <floor+0x42>
 800a212:	2c00      	cmp	r4, #0
 800a214:	da58      	bge.n	800a2c8 <floor+0xe8>
 800a216:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a21a:	431d      	orrs	r5, r3
 800a21c:	d001      	beq.n	800a222 <floor+0x42>
 800a21e:	2500      	movs	r5, #0
 800a220:	4c2d      	ldr	r4, [pc, #180]	; (800a2d8 <floor+0xf8>)
 800a222:	4623      	mov	r3, r4
 800a224:	462f      	mov	r7, r5
 800a226:	e025      	b.n	800a274 <floor+0x94>
 800a228:	4a2c      	ldr	r2, [pc, #176]	; (800a2dc <floor+0xfc>)
 800a22a:	fa42 f806 	asr.w	r8, r2, r6
 800a22e:	ea01 0208 	and.w	r2, r1, r8
 800a232:	4302      	orrs	r2, r0
 800a234:	d01e      	beq.n	800a274 <floor+0x94>
 800a236:	a326      	add	r3, pc, #152	; (adr r3, 800a2d0 <floor+0xf0>)
 800a238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23c:	f7f8 fa74 	bl	8002728 <__adddf3>
 800a240:	2200      	movs	r2, #0
 800a242:	2300      	movs	r3, #0
 800a244:	f7f8 feb6 	bl	8002fb4 <__aeabi_dcmpgt>
 800a248:	2800      	cmp	r0, #0
 800a24a:	d0ea      	beq.n	800a222 <floor+0x42>
 800a24c:	2c00      	cmp	r4, #0
 800a24e:	bfbe      	ittt	lt
 800a250:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a254:	fa43 f606 	asrlt.w	r6, r3, r6
 800a258:	19a4      	addlt	r4, r4, r6
 800a25a:	2500      	movs	r5, #0
 800a25c:	ea24 0408 	bic.w	r4, r4, r8
 800a260:	e7df      	b.n	800a222 <floor+0x42>
 800a262:	2e33      	cmp	r6, #51	; 0x33
 800a264:	dd0a      	ble.n	800a27c <floor+0x9c>
 800a266:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a26a:	d103      	bne.n	800a274 <floor+0x94>
 800a26c:	f7f8 fa5c 	bl	8002728 <__adddf3>
 800a270:	4607      	mov	r7, r0
 800a272:	460b      	mov	r3, r1
 800a274:	4638      	mov	r0, r7
 800a276:	4619      	mov	r1, r3
 800a278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a27c:	f04f 32ff 	mov.w	r2, #4294967295
 800a280:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800a284:	fa22 f808 	lsr.w	r8, r2, r8
 800a288:	ea18 0f00 	tst.w	r8, r0
 800a28c:	d0f2      	beq.n	800a274 <floor+0x94>
 800a28e:	a310      	add	r3, pc, #64	; (adr r3, 800a2d0 <floor+0xf0>)
 800a290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a294:	f7f8 fa48 	bl	8002728 <__adddf3>
 800a298:	2200      	movs	r2, #0
 800a29a:	2300      	movs	r3, #0
 800a29c:	f7f8 fe8a 	bl	8002fb4 <__aeabi_dcmpgt>
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d0be      	beq.n	800a222 <floor+0x42>
 800a2a4:	2c00      	cmp	r4, #0
 800a2a6:	da02      	bge.n	800a2ae <floor+0xce>
 800a2a8:	2e14      	cmp	r6, #20
 800a2aa:	d103      	bne.n	800a2b4 <floor+0xd4>
 800a2ac:	3401      	adds	r4, #1
 800a2ae:	ea25 0508 	bic.w	r5, r5, r8
 800a2b2:	e7b6      	b.n	800a222 <floor+0x42>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a2ba:	fa03 f606 	lsl.w	r6, r3, r6
 800a2be:	4435      	add	r5, r6
 800a2c0:	42bd      	cmp	r5, r7
 800a2c2:	bf38      	it	cc
 800a2c4:	18e4      	addcc	r4, r4, r3
 800a2c6:	e7f2      	b.n	800a2ae <floor+0xce>
 800a2c8:	2500      	movs	r5, #0
 800a2ca:	462c      	mov	r4, r5
 800a2cc:	e7a9      	b.n	800a222 <floor+0x42>
 800a2ce:	bf00      	nop
 800a2d0:	8800759c 	.word	0x8800759c
 800a2d4:	7e37e43c 	.word	0x7e37e43c
 800a2d8:	bff00000 	.word	0xbff00000
 800a2dc:	000fffff 	.word	0x000fffff

0800a2e0 <_init>:
 800a2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e2:	bf00      	nop
 800a2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2e6:	bc08      	pop	{r3}
 800a2e8:	469e      	mov	lr, r3
 800a2ea:	4770      	bx	lr

0800a2ec <_fini>:
 800a2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ee:	bf00      	nop
 800a2f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2f2:	bc08      	pop	{r3}
 800a2f4:	469e      	mov	lr, r3
 800a2f6:	4770      	bx	lr
