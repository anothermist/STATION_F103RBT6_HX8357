
STATION_F103RB_HX8357.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c510  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011d74  0800c620  0800c620  0001c620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e394  0801e394  000301e0  2**0
                  CONTENTS
  4 .ARM          00000000  0801e394  0801e394  000301e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801e394  0801e394  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e394  0801e394  0002e394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e398  0801e398  0002e398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801e39c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  200001e0  0801e57c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000988  0801e57c  00030988  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000200a4  00000000  00000000  00030209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002451  00000000  00000000  000502ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00015d99  00000000  00000000  000526fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  00068498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00007158  00000000  00000000  000684e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010db1  00000000  00000000  0006f640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009128f  00000000  00000000  000803f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00111680  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dec  00000000  00000000  001116d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00019c4d  00000000  00000000  001134bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c608 	.word	0x0800c608

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800c608 	.word	0x0800c608

08000150 <HAL_Delay>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000150:	4a03      	ldr	r2, [pc, #12]	; (8000160 <HAL_Delay+0x10>)
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait += (uint32_t)(uwTickFreq);
 8000152:	3001      	adds	r0, #1
  return uwTick;
 8000154:	6811      	ldr	r1, [r2, #0]
 8000156:	6813      	ldr	r3, [r2, #0]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000158:	1a5b      	subs	r3, r3, r1
 800015a:	4283      	cmp	r3, r0
 800015c:	d3fb      	bcc.n	8000156 <HAL_Delay+0x6>
  {
  }
}
 800015e:	4770      	bx	lr
 8000160:	20000200 	.word	0x20000200

08000164 <LCD_Bus>:
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
}

inline static void LCD_Bus(uint16_t val)
{
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8000164:	0bc3      	lsrs	r3, r0, #15
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 8000166:	bf14      	ite	ne
 8000168:	2202      	movne	r2, #2
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800016a:	f44f 3200 	moveq.w	r2, #131072	; 0x20000
 800016e:	4b37      	ldr	r3, [pc, #220]	; (800024c <LCD_Bus+0xe8>)
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8000170:	0441      	lsls	r1, r0, #17
 8000172:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000174:	bf4c      	ite	mi
 8000176:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000178:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 800017c:	4b33      	ldr	r3, [pc, #204]	; (800024c <LCD_Bus+0xe8>)
 800017e:	611a      	str	r2, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8000180:	0482      	lsls	r2, r0, #18
    GPIOx->BSRR = GPIO_Pin;
 8000182:	bf4c      	ite	mi
 8000184:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000186:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 800018a:	4b31      	ldr	r3, [pc, #196]	; (8000250 <LCD_Bus+0xec>)
 800018c:	611a      	str	r2, [r3, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 800018e:	04c3      	lsls	r3, r0, #19
    GPIOx->BSRR = GPIO_Pin;
 8000190:	bf4c      	ite	mi
 8000192:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000194:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 8000198:	4b2d      	ldr	r3, [pc, #180]	; (8000250 <LCD_Bus+0xec>)
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 800019a:	0501      	lsls	r1, r0, #20
 800019c:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800019e:	bf4c      	ite	mi
 80001a0:	2202      	movmi	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001a2:	f44f 3200 	movpl.w	r2, #131072	; 0x20000
 80001a6:	4b2a      	ldr	r3, [pc, #168]	; (8000250 <LCD_Bus+0xec>)
 80001a8:	611a      	str	r2, [r3, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 80001aa:	0542      	lsls	r2, r0, #21
    GPIOx->BSRR = GPIO_Pin;
 80001ac:	bf4c      	ite	mi
 80001ae:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001b0:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 80001b4:	4b26      	ldr	r3, [pc, #152]	; (8000250 <LCD_Bus+0xec>)
 80001b6:	611a      	str	r2, [r3, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 80001b8:	0583      	lsls	r3, r0, #22
    GPIOx->BSRR = GPIO_Pin;
 80001ba:	bf4c      	ite	mi
 80001bc:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001c0:	f04f 4200 	movpl.w	r2, #2147483648	; 0x80000000
 80001c4:	4b22      	ldr	r3, [pc, #136]	; (8000250 <LCD_Bus+0xec>)
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80001c6:	05c1      	lsls	r1, r0, #23
 80001c8:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001ca:	bf4c      	ite	mi
 80001cc:	f44f 4280 	movmi.w	r2, #16384	; 0x4000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001d0:	f04f 4280 	movpl.w	r2, #1073741824	; 0x40000000
 80001d4:	4b1e      	ldr	r3, [pc, #120]	; (8000250 <LCD_Bus+0xec>)
 80001d6:	611a      	str	r2, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80001d8:	0602      	lsls	r2, r0, #24
    GPIOx->BSRR = GPIO_Pin;
 80001da:	bf4c      	ite	mi
 80001dc:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001de:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 80001e2:	4b1a      	ldr	r3, [pc, #104]	; (800024c <LCD_Bus+0xe8>)
 80001e4:	611a      	str	r2, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80001e6:	0643      	lsls	r3, r0, #25
    GPIOx->BSRR = GPIO_Pin;
 80001e8:	bf4c      	ite	mi
 80001ea:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001ec:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 80001f0:	4b16      	ldr	r3, [pc, #88]	; (800024c <LCD_Bus+0xe8>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80001f2:	0681      	lsls	r1, r0, #26
 80001f4:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001f6:	bf4c      	ite	mi
 80001f8:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001fa:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80001fe:	4b13      	ldr	r3, [pc, #76]	; (800024c <LCD_Bus+0xe8>)
 8000200:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000202:	06c2      	lsls	r2, r0, #27
    GPIOx->BSRR = GPIO_Pin;
 8000204:	bf4c      	ite	mi
 8000206:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000208:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 800020c:	4b0f      	ldr	r3, [pc, #60]	; (800024c <LCD_Bus+0xe8>)
 800020e:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000210:	0703      	lsls	r3, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 8000212:	bf4c      	ite	mi
 8000214:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000216:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 800021a:	4b0c      	ldr	r3, [pc, #48]	; (800024c <LCD_Bus+0xe8>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800021c:	0741      	lsls	r1, r0, #29
 800021e:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000220:	bf4c      	ite	mi
 8000222:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000224:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <LCD_Bus+0xe8>)
 800022a:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800022c:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 800022e:	bf4c      	ite	mi
 8000230:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000232:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000236:	4b06      	ldr	r3, [pc, #24]	; (8000250 <LCD_Bus+0xec>)
 8000238:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800023a:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 800023c:	bf4c      	ite	mi
 800023e:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000240:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000244:	4b02      	ldr	r3, [pc, #8]	; (8000250 <LCD_Bus+0xec>)
 8000246:	611a      	str	r2, [r3, #16]
}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40010800 	.word	0x40010800
 8000250:	40011000 	.word	0x40011000

08000254 <LCD_Send_Cmd>:

inline static void LCD_Send_Cmd(uint16_t cmd)
{
 8000254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000258:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800025c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000260:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8000264:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8000268:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 800026c:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8000270:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8000274:	4b24      	ldr	r3, [pc, #144]	; (8000308 <LCD_Send_Cmd+0xb4>)
 8000276:	4a25      	ldr	r2, [pc, #148]	; (800030c <LCD_Send_Cmd+0xb8>)
 8000278:	4f25      	ldr	r7, [pc, #148]	; (8000310 <LCD_Send_Cmd+0xbc>)
 800027a:	6139      	str	r1, [r7, #16]
 800027c:	f8c7 8010 	str.w	r8, [r7, #16]
 8000280:	6116      	str	r6, [r2, #16]
 8000282:	6111      	str	r1, [r2, #16]
 8000284:	611c      	str	r4, [r3, #16]
 8000286:	611d      	str	r5, [r3, #16]
 8000288:	611e      	str	r6, [r3, #16]
 800028a:	6119      	str	r1, [r3, #16]
 800028c:	f8c3 e010 	str.w	lr, [r3, #16]
 8000290:	f8c3 c010 	str.w	ip, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000294:	0943      	lsrs	r3, r0, #5
 8000296:	6115      	str	r5, [r2, #16]
 8000298:	6114      	str	r4, [r2, #16]
 800029a:	d02e      	beq.n	80002fa <LCD_Send_Cmd+0xa6>
    GPIOx->BSRR = GPIO_Pin;
 800029c:	2110      	movs	r1, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800029e:	0903      	lsrs	r3, r0, #4
 80002a0:	2b02      	cmp	r3, #2
 80002a2:	6111      	str	r1, [r2, #16]
 80002a4:	d12c      	bne.n	8000300 <LCD_Send_Cmd+0xac>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80002aa:	6113      	str	r3, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80002ac:	0704      	lsls	r4, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 80002ae:	bf4c      	ite	mi
 80002b0:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002b2:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 80002b6:	4b15      	ldr	r3, [pc, #84]	; (800030c <LCD_Send_Cmd+0xb8>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80002b8:	0741      	lsls	r1, r0, #29
 80002ba:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80002bc:	bf4c      	ite	mi
 80002be:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002c0:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 80002c4:	4b11      	ldr	r3, [pc, #68]	; (800030c <LCD_Send_Cmd+0xb8>)
    GPIOx->BSRR = GPIO_Pin;
 80002c6:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002c8:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80002ca:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 80002cc:	bf4c      	ite	mi
 80002ce:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002d0:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <LCD_Send_Cmd+0xb4>)
 80002d6:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80002d8:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 80002da:	bf4c      	ite	mi
 80002dc:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002de:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80002e2:	4b09      	ldr	r3, [pc, #36]	; (8000308 <LCD_Send_Cmd+0xb4>)
 80002e4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80002e8:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80002ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002ee:	4b08      	ldr	r3, [pc, #32]	; (8000310 <LCD_Send_Cmd+0xbc>)
 80002f0:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80002f2:	6119      	str	r1, [r3, #16]
 80002f4:	611a      	str	r2, [r3, #16]
	LCD_Bus(cmd);
	LCD_WR_R
	//_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 80002f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002fe:	6113      	str	r3, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000300:	2220      	movs	r2, #32
 8000302:	4b02      	ldr	r3, [pc, #8]	; (800030c <LCD_Send_Cmd+0xb8>)
 8000304:	611a      	str	r2, [r3, #16]
  }
}
 8000306:	e7d1      	b.n	80002ac <LCD_Send_Cmd+0x58>
 8000308:	40011000 	.word	0x40011000
 800030c:	40010800 	.word	0x40010800
 8000310:	40010c00 	.word	0x40010c00

08000314 <LCD_Send_Dat>:
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000314:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000318:	2101      	movs	r1, #1
 800031a:	4b3f      	ldr	r3, [pc, #252]	; (8000418 <LCD_Send_Dat+0x104>)
 800031c:	6119      	str	r1, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800031e:	611a      	str	r2, [r3, #16]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8000320:	0bc3      	lsrs	r3, r0, #15
    GPIOx->BSRR = GPIO_Pin;
 8000322:	bf14      	ite	ne
 8000324:	2202      	movne	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000326:	f44f 3200 	moveq.w	r2, #131072	; 0x20000
 800032a:	4b3c      	ldr	r3, [pc, #240]	; (800041c <LCD_Send_Dat+0x108>)
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800032c:	0441      	lsls	r1, r0, #17
 800032e:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000330:	bf4c      	ite	mi
 8000332:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000334:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 8000338:	4b38      	ldr	r3, [pc, #224]	; (800041c <LCD_Send_Dat+0x108>)
 800033a:	611a      	str	r2, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 800033c:	0482      	lsls	r2, r0, #18
    GPIOx->BSRR = GPIO_Pin;
 800033e:	bf4c      	ite	mi
 8000340:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000342:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 8000346:	4b36      	ldr	r3, [pc, #216]	; (8000420 <LCD_Send_Dat+0x10c>)
 8000348:	611a      	str	r2, [r3, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 800034a:	04c3      	lsls	r3, r0, #19
    GPIOx->BSRR = GPIO_Pin;
 800034c:	bf4c      	ite	mi
 800034e:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000350:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 8000354:	4b32      	ldr	r3, [pc, #200]	; (8000420 <LCD_Send_Dat+0x10c>)
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8000356:	0501      	lsls	r1, r0, #20
 8000358:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800035a:	bf4c      	ite	mi
 800035c:	2202      	movmi	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800035e:	f44f 3200 	movpl.w	r2, #131072	; 0x20000
 8000362:	4b2f      	ldr	r3, [pc, #188]	; (8000420 <LCD_Send_Dat+0x10c>)
 8000364:	611a      	str	r2, [r3, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8000366:	0542      	lsls	r2, r0, #21
    GPIOx->BSRR = GPIO_Pin;
 8000368:	bf4c      	ite	mi
 800036a:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800036c:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 8000370:	4b2b      	ldr	r3, [pc, #172]	; (8000420 <LCD_Send_Dat+0x10c>)
 8000372:	611a      	str	r2, [r3, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8000374:	0583      	lsls	r3, r0, #22
    GPIOx->BSRR = GPIO_Pin;
 8000376:	bf4c      	ite	mi
 8000378:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800037c:	f04f 4200 	movpl.w	r2, #2147483648	; 0x80000000
 8000380:	4b27      	ldr	r3, [pc, #156]	; (8000420 <LCD_Send_Dat+0x10c>)
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8000382:	05c1      	lsls	r1, r0, #23
 8000384:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000386:	bf4c      	ite	mi
 8000388:	f44f 4280 	movmi.w	r2, #16384	; 0x4000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800038c:	f04f 4280 	movpl.w	r2, #1073741824	; 0x40000000
 8000390:	4b23      	ldr	r3, [pc, #140]	; (8000420 <LCD_Send_Dat+0x10c>)
 8000392:	611a      	str	r2, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000394:	0602      	lsls	r2, r0, #24
    GPIOx->BSRR = GPIO_Pin;
 8000396:	bf4c      	ite	mi
 8000398:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800039a:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 800039e:	4b1f      	ldr	r3, [pc, #124]	; (800041c <LCD_Send_Dat+0x108>)
 80003a0:	611a      	str	r2, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80003a2:	0643      	lsls	r3, r0, #25
    GPIOx->BSRR = GPIO_Pin;
 80003a4:	bf4c      	ite	mi
 80003a6:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003a8:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 80003ac:	4b1b      	ldr	r3, [pc, #108]	; (800041c <LCD_Send_Dat+0x108>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80003ae:	0681      	lsls	r1, r0, #26
 80003b0:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80003b2:	bf4c      	ite	mi
 80003b4:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003b6:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80003ba:	4b18      	ldr	r3, [pc, #96]	; (800041c <LCD_Send_Dat+0x108>)
 80003bc:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80003be:	06c2      	lsls	r2, r0, #27
    GPIOx->BSRR = GPIO_Pin;
 80003c0:	bf4c      	ite	mi
 80003c2:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003c4:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <LCD_Send_Dat+0x108>)
 80003ca:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80003cc:	0703      	lsls	r3, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 80003ce:	bf4c      	ite	mi
 80003d0:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003d2:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 80003d6:	4b11      	ldr	r3, [pc, #68]	; (800041c <LCD_Send_Dat+0x108>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80003d8:	0741      	lsls	r1, r0, #29
 80003da:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80003dc:	bf4c      	ite	mi
 80003de:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003e0:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 80003e4:	4b0d      	ldr	r3, [pc, #52]	; (800041c <LCD_Send_Dat+0x108>)
    GPIOx->BSRR = GPIO_Pin;
 80003e6:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003e8:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80003ea:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 80003ec:	bf4c      	ite	mi
 80003ee:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003f0:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80003f4:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <LCD_Send_Dat+0x10c>)
 80003f6:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80003f8:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 80003fa:	bf4c      	ite	mi
 80003fc:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003fe:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000402:	4b07      	ldr	r3, [pc, #28]	; (8000420 <LCD_Send_Dat+0x10c>)
 8000404:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000408:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800040a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800040e:	4b02      	ldr	r3, [pc, #8]	; (8000418 <LCD_Send_Dat+0x104>)
 8000410:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000412:	6119      	str	r1, [r3, #16]
 8000414:	611a      	str	r2, [r3, #16]
	LCD_Bus(dat);
	LCD_WR_R
//	_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 8000416:	4770      	bx	lr
 8000418:	40010c00 	.word	0x40010c00
 800041c:	40010800 	.word	0x40010800
 8000420:	40011000 	.word	0x40011000

08000424 <LCD_Rect_Fill>:
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(0, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 8000424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000428:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800042c:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
 8000430:	4caf      	ldr	r4, [pc, #700]	; (80006f0 <LCD_Rect_Fill+0x2cc>)
 8000432:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8000436:	6125      	str	r5, [r4, #16]
 8000438:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800043c:	f8c4 a010 	str.w	sl, [r4, #16]
 8000440:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000444:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8000448:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 800044c:	4681      	mov	r9, r0
 800044e:	4696      	mov	lr, r2
 8000450:	48a8      	ldr	r0, [pc, #672]	; (80006f4 <LCD_Rect_Fill+0x2d0>)
 8000452:	4aa9      	ldr	r2, [pc, #676]	; (80006f8 <LCD_Rect_Fill+0x2d4>)
 8000454:	6106      	str	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000456:	f04f 0b10 	mov.w	fp, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800045a:	6105      	str	r5, [r0, #16]
 800045c:	f8c2 c010 	str.w	ip, [r2, #16]
 8000460:	6117      	str	r7, [r2, #16]
 8000462:	6116      	str	r6, [r2, #16]
 8000464:	6115      	str	r5, [r2, #16]
 8000466:	f8c2 8010 	str.w	r8, [r2, #16]
 800046a:	f8c2 a010 	str.w	sl, [r2, #16]
 800046e:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
 8000472:	6107      	str	r7, [r0, #16]
 8000474:	f8c0 c010 	str.w	ip, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000478:	f8c0 b010 	str.w	fp, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800047c:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000480:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8000484:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000488:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
 800048c:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000490:	f8c2 b010 	str.w	fp, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000494:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000498:	f04f 0b02 	mov.w	fp, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800049c:	f8c2 a010 	str.w	sl, [r2, #16]
 80004a0:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 80004a2:	f8c4 b010 	str.w	fp, [r4, #16]
 80004a6:	f44f 6b80 	mov.w	fp, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004aa:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 80004ae:	f8c4 b010 	str.w	fp, [r4, #16]
 80004b2:	f04f 0b01 	mov.w	fp, #1
 80004b6:	f8c4 b010 	str.w	fp, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004ba:	f8c4 a010 	str.w	sl, [r4, #16]
 80004be:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 80004c2:	6106      	str	r6, [r0, #16]
 80004c4:	6105      	str	r5, [r0, #16]
 80004c6:	f8c2 c010 	str.w	ip, [r2, #16]
 80004ca:	6117      	str	r7, [r2, #16]
 80004cc:	6116      	str	r6, [r2, #16]
 80004ce:	6115      	str	r5, [r2, #16]
	uint32_t i = 0;
	uint32_t j = (uint32_t) w * (uint32_t) h;
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80004d0:	1e4d      	subs	r5, r1, #1
 80004d2:	441d      	add	r5, r3
	uint32_t j = (uint32_t) w * (uint32_t) h;
 80004d4:	fb03 f30e 	mul.w	r3, r3, lr
 80004d8:	f8c2 8010 	str.w	r8, [r2, #16]
 80004dc:	f8c2 a010 	str.w	sl, [r2, #16]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80004e0:	f109 32ff 	add.w	r2, r9, #4294967295
{
 80004e4:	b08f      	sub	sp, #60	; 0x3c
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80004e6:	4472      	add	r2, lr
	uint32_t j = (uint32_t) w * (uint32_t) h;
 80004e8:	9301      	str	r3, [sp, #4]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80004ea:	b293      	uxth	r3, r2
 80004ec:	9302      	str	r3, [sp, #8]
  data[2] = x2 >> 8;
 80004ee:	f3c5 2207 	ubfx	r2, r5, #8, #8
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80004f2:	b2ab      	uxth	r3, r5
  data[3] = x2 & 0xFF;
 80004f4:	b2ed      	uxtb	r5, r5
 80004f6:	9503      	str	r5, [sp, #12]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80004f8:	0bcd      	lsrs	r5, r1, #15
    GPIOx->BSRR = GPIO_Pin;
 80004fa:	bf18      	it	ne
 80004fc:	2504      	movne	r5, #4
	data[0] = x1 >> 8;
 80004fe:	ea4f 2411 	mov.w	r4, r1, lsr #8
  data[2] = x2 >> 8;
 8000502:	9204      	str	r2, [sp, #16]
 8000504:	bf14      	ite	ne
 8000506:	6105      	strne	r5, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000508:	6107      	streq	r7, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800050a:	0667      	lsls	r7, r4, #25
 800050c:	bf54      	ite	pl
 800050e:	f44f 2500 	movpl.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000512:	2508      	movmi	r5, #8
 8000514:	4877      	ldr	r0, [pc, #476]	; (80006f4 <LCD_Rect_Fill+0x2d0>)
	data[0] = x1 >> 8;
 8000516:	4626      	mov	r6, r4
 8000518:	6105      	str	r5, [r0, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800051a:	06a5      	lsls	r5, r4, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800051c:	bf54      	ite	pl
 800051e:	f44f 1580 	movpl.w	r5, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000522:	2510      	movmi	r5, #16
 8000524:	4873      	ldr	r0, [pc, #460]	; (80006f4 <LCD_Rect_Fill+0x2d0>)
 8000526:	f04f 0b02 	mov.w	fp, #2
 800052a:	6105      	str	r5, [r0, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800052c:	06e0      	lsls	r0, r4, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800052e:	bf54      	ite	pl
 8000530:	f44f 1500 	movpl.w	r5, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000534:	2520      	movmi	r5, #32
 8000536:	486f      	ldr	r0, [pc, #444]	; (80006f4 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000538:	0727      	lsls	r7, r4, #28
 800053a:	6105      	str	r5, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800053c:	bf54      	ite	pl
 800053e:	f44f 0580 	movpl.w	r5, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000542:	2540      	movmi	r5, #64	; 0x40
 8000544:	486b      	ldr	r0, [pc, #428]	; (80006f4 <LCD_Rect_Fill+0x2d0>)
 8000546:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 800054a:	6105      	str	r5, [r0, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800054c:	0765      	lsls	r5, r4, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800054e:	bf54      	ite	pl
 8000550:	f44f 0500 	movpl.w	r5, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000554:	2580      	movmi	r5, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000556:	07a4      	lsls	r4, r4, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000558:	bf54      	ite	pl
 800055a:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800055e:	2410      	movmi	r4, #16
 8000560:	4864      	ldr	r0, [pc, #400]	; (80006f4 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000562:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000566:	6105      	str	r5, [r0, #16]
 8000568:	4863      	ldr	r0, [pc, #396]	; (80006f8 <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800056a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 800056e:	6104      	str	r4, [r0, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000570:	07f0      	lsls	r0, r6, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000572:	bf54      	ite	pl
 8000574:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000578:	2420      	movmi	r4, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800057a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 800057e:	485e      	ldr	r0, [pc, #376]	; (80006f8 <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000580:	4d5c      	ldr	r5, [pc, #368]	; (80006f4 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = GPIO_Pin;
 8000582:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000584:	4c5a      	ldr	r4, [pc, #360]	; (80006f0 <LCD_Rect_Fill+0x2cc>)
 8000586:	485c      	ldr	r0, [pc, #368]	; (80006f8 <LCD_Rect_Fill+0x2d4>)
 8000588:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 800058a:	f8c4 b010 	str.w	fp, [r4, #16]
 800058e:	f8c4 a010 	str.w	sl, [r4, #16]
 8000592:	f04f 0a01 	mov.w	sl, #1
 8000596:	f8c4 a010 	str.w	sl, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800059a:	f8c4 8010 	str.w	r8, [r4, #16]
 800059e:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 80005a2:	612e      	str	r6, [r5, #16]
 80005a4:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 80005a8:	612f      	str	r7, [r5, #16]
 80005aa:	6104      	str	r4, [r0, #16]
 80005ac:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80005b0:	f8c0 e010 	str.w	lr, [r0, #16]
 80005b4:	6106      	str	r6, [r0, #16]
 80005b6:	6107      	str	r7, [r0, #16]
 80005b8:	6104      	str	r4, [r0, #16]
 80005ba:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  data[1] = x1 & 0xFF;
 80005be:	fa5f fc81 	uxtb.w	ip, r1
 80005c2:	6104      	str	r4, [r0, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80005c4:	ea5f 10dc 	movs.w	r0, ip, lsr #7
    GPIOx->BSRR = GPIO_Pin;
 80005c8:	bf16      	itet	ne
 80005ca:	2004      	movne	r0, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005cc:	f8c5 e010 	streq.w	lr, [r5, #16]
    GPIOx->BSRR = GPIO_Pin;
 80005d0:	6128      	strne	r0, [r5, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80005d2:	064f      	lsls	r7, r1, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005d4:	bf54      	ite	pl
 80005d6:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80005da:	2408      	movmi	r4, #8
 80005dc:	4845      	ldr	r0, [pc, #276]	; (80006f4 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80005de:	068e      	lsls	r6, r1, #26
 80005e0:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005e2:	bf54      	ite	pl
 80005e4:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80005e8:	2410      	movmi	r4, #16
 80005ea:	4842      	ldr	r0, [pc, #264]	; (80006f4 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80005ec:	06cd      	lsls	r5, r1, #27
 80005ee:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005f0:	bf54      	ite	pl
 80005f2:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80005f6:	2420      	movmi	r4, #32
 80005f8:	483e      	ldr	r0, [pc, #248]	; (80006f4 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005fa:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80005fe:	6104      	str	r4, [r0, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000600:	070c      	lsls	r4, r1, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000602:	bf54      	ite	pl
 8000604:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000608:	2440      	movmi	r4, #64	; 0x40
 800060a:	483a      	ldr	r0, [pc, #232]	; (80006f4 <LCD_Rect_Fill+0x2d0>)
 800060c:	f04f 0b02 	mov.w	fp, #2
 8000610:	6104      	str	r4, [r0, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000612:	0748      	lsls	r0, r1, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000614:	bf54      	ite	pl
 8000616:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800061a:	2480      	movmi	r4, #128	; 0x80
 800061c:	4835      	ldr	r0, [pc, #212]	; (80006f4 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800061e:	078f      	lsls	r7, r1, #30
 8000620:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000622:	bf54      	ite	pl
 8000624:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000628:	2010      	movmi	r0, #16
 800062a:	4933      	ldr	r1, [pc, #204]	; (80006f8 <LCD_Rect_Fill+0x2d4>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800062c:	f01c 0f01 	tst.w	ip, #1
 8000630:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000632:	bf0c      	ite	eq
 8000634:	f44f 1000 	moveq.w	r0, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000638:	2020      	movne	r0, #32
 800063a:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 800063e:	492e      	ldr	r1, [pc, #184]	; (80006f8 <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000640:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000644:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000646:	482a      	ldr	r0, [pc, #168]	; (80006f0 <LCD_Rect_Fill+0x2cc>)
 8000648:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800064c:	6105      	str	r5, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 800064e:	f8c0 b010 	str.w	fp, [r0, #16]
 8000652:	f8c0 a010 	str.w	sl, [r0, #16]
 8000656:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800065a:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 800065e:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000662:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8000666:	f8c0 8010 	str.w	r8, [r0, #16]
 800066a:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 800066e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000672:	4921      	ldr	r1, [pc, #132]	; (80006f8 <LCD_Rect_Fill+0x2d4>)
 8000674:	4c1f      	ldr	r4, [pc, #124]	; (80006f4 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = GPIO_Pin;
 8000676:	f04f 0b02 	mov.w	fp, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800067a:	6125      	str	r5, [r4, #16]
 800067c:	6126      	str	r6, [r4, #16]
 800067e:	f8c1 e010 	str.w	lr, [r1, #16]
 8000682:	610f      	str	r7, [r1, #16]
 8000684:	610d      	str	r5, [r1, #16]
 8000686:	610e      	str	r6, [r1, #16]
 8000688:	6108      	str	r0, [r1, #16]
 800068a:	f8c1 c010 	str.w	ip, [r1, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800068e:	0bd9      	lsrs	r1, r3, #15
    GPIOx->BSRR = GPIO_Pin;
 8000690:	bf16      	itet	ne
 8000692:	2104      	movne	r1, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000694:	6127      	streq	r7, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000696:	6121      	strne	r1, [r4, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000698:	0656      	lsls	r6, r2, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800069a:	bf54      	ite	pl
 800069c:	f44f 2000 	movpl.w	r0, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80006a0:	2008      	movmi	r0, #8
 80006a2:	4914      	ldr	r1, [pc, #80]	; (80006f4 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80006a4:	0695      	lsls	r5, r2, #26
 80006a6:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006a8:	bf54      	ite	pl
 80006aa:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80006ae:	2010      	movmi	r0, #16
 80006b0:	4910      	ldr	r1, [pc, #64]	; (80006f4 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80006b2:	06d4      	lsls	r4, r2, #27
 80006b4:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006b6:	bf54      	ite	pl
 80006b8:	f44f 1000 	movpl.w	r0, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80006bc:	2020      	movmi	r0, #32
 80006be:	490d      	ldr	r1, [pc, #52]	; (80006f4 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006c0:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80006c4:	6108      	str	r0, [r1, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80006c6:	0710      	lsls	r0, r2, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006c8:	bf54      	ite	pl
 80006ca:	f44f 0080 	movpl.w	r0, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80006ce:	2040      	movmi	r0, #64	; 0x40
 80006d0:	4908      	ldr	r1, [pc, #32]	; (80006f4 <LCD_Rect_Fill+0x2d0>)
 80006d2:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80006d6:	6108      	str	r0, [r1, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80006d8:	0751      	lsls	r1, r2, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006da:	bf54      	ite	pl
 80006dc:	f44f 0000 	movpl.w	r0, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80006e0:	2080      	movmi	r0, #128	; 0x80
 80006e2:	4904      	ldr	r1, [pc, #16]	; (80006f4 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80006e4:	0797      	lsls	r7, r2, #30
 80006e6:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006e8:	bf58      	it	pl
 80006ea:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 80006ee:	e005      	b.n	80006fc <LCD_Rect_Fill+0x2d8>
 80006f0:	40010c00 	.word	0x40010c00
 80006f4:	40010800 	.word	0x40010800
 80006f8:	40011000 	.word	0x40011000
    GPIOx->BSRR = GPIO_Pin;
 80006fc:	bf48      	it	mi
 80006fe:	2110      	movmi	r1, #16
 8000700:	4aa9      	ldr	r2, [pc, #676]	; (80009a8 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000702:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000706:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000708:	9a04      	ldr	r2, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800070a:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 800070e:	07d6      	lsls	r6, r2, #31
 8000710:	bf54      	ite	pl
 8000712:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000716:	2120      	movmi	r1, #32
 8000718:	4aa3      	ldr	r2, [pc, #652]	; (80009a8 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800071a:	f44f 2680 	mov.w	r6, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 800071e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000720:	49a2      	ldr	r1, [pc, #648]	; (80009ac <LCD_Rect_Fill+0x588>)
 8000722:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000726:	610c      	str	r4, [r1, #16]
 8000728:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800072c:	f8c1 b010 	str.w	fp, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000730:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000734:	f8c1 a010 	str.w	sl, [r1, #16]
 8000738:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800073c:	4a9a      	ldr	r2, [pc, #616]	; (80009a8 <LCD_Rect_Fill+0x584>)
 800073e:	489c      	ldr	r0, [pc, #624]	; (80009b0 <LCD_Rect_Fill+0x58c>)
    GPIOx->BSRR = GPIO_Pin;
 8000740:	f8c1 a010 	str.w	sl, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000744:	f8c1 8010 	str.w	r8, [r1, #16]
 8000748:	6104      	str	r4, [r0, #16]
 800074a:	6105      	str	r5, [r0, #16]
 800074c:	f8c2 e010 	str.w	lr, [r2, #16]
 8000750:	6116      	str	r6, [r2, #16]
 8000752:	6114      	str	r4, [r2, #16]
 8000754:	6115      	str	r5, [r2, #16]
 8000756:	f8c2 c010 	str.w	ip, [r2, #16]
 800075a:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800075c:	9a03      	ldr	r2, [sp, #12]
    GPIOx->BSRR = GPIO_Pin;
 800075e:	f04f 0e02 	mov.w	lr, #2
 8000762:	09d2      	lsrs	r2, r2, #7
 8000764:	bf16      	itet	ne
 8000766:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000768:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 800076a:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800076c:	065d      	lsls	r5, r3, #25
 800076e:	bf4c      	ite	mi
 8000770:	2108      	movmi	r1, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000772:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
 8000776:	4a8e      	ldr	r2, [pc, #568]	; (80009b0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000778:	069c      	lsls	r4, r3, #26
 800077a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800077c:	bf4c      	ite	mi
 800077e:	2110      	movmi	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000780:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 8000784:	4a8a      	ldr	r2, [pc, #552]	; (80009b0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000786:	06d8      	lsls	r0, r3, #27
 8000788:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800078a:	bf4c      	ite	mi
 800078c:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800078e:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
 8000792:	4a87      	ldr	r2, [pc, #540]	; (80009b0 <LCD_Rect_Fill+0x58c>)
 8000794:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000798:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800079a:	0719      	lsls	r1, r3, #28
    GPIOx->BSRR = GPIO_Pin;
 800079c:	bf4c      	ite	mi
 800079e:	2140      	movmi	r1, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007a0:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
 80007a4:	4a82      	ldr	r2, [pc, #520]	; (80009b0 <LCD_Rect_Fill+0x58c>)
 80007a6:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80007aa:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80007ac:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = GPIO_Pin;
 80007ae:	bf4c      	ite	mi
 80007b0:	2180      	movmi	r1, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007b2:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
 80007b6:	4a7e      	ldr	r2, [pc, #504]	; (80009b0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80007b8:	079f      	lsls	r7, r3, #30
 80007ba:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 80007bc:	bf4c      	ite	mi
 80007be:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007c0:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80007c4:	4b78      	ldr	r3, [pc, #480]	; (80009a8 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = GPIO_Pin;
 80007c6:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007ca:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80007cc:	9b03      	ldr	r3, [sp, #12]
 80007ce:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
 80007d2:	f013 0f01 	tst.w	r3, #1
    GPIOx->BSRR = GPIO_Pin;
 80007d6:	bf14      	ite	ne
 80007d8:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007da:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 80007de:	4973      	ldr	r1, [pc, #460]	; (80009ac <LCD_Rect_Fill+0x588>)
    GPIOx->BSRR = GPIO_Pin;
 80007e0:	4b71      	ldr	r3, [pc, #452]	; (80009a8 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007e2:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80007e6:	611a      	str	r2, [r3, #16]
 80007e8:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 80007ec:	6108      	str	r0, [r1, #16]
 80007ee:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 80007f2:	f8c1 e010 	str.w	lr, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007f6:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80007fa:	f8c1 c010 	str.w	ip, [r1, #16]
 80007fe:	f04f 0810 	mov.w	r8, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000802:	610c      	str	r4, [r1, #16]
 8000804:	610f      	str	r7, [r1, #16]
 8000806:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 800080a:	4b67      	ldr	r3, [pc, #412]	; (80009a8 <LCD_Rect_Fill+0x584>)
 800080c:	4a68      	ldr	r2, [pc, #416]	; (80009b0 <LCD_Rect_Fill+0x58c>)
 800080e:	6110      	str	r0, [r2, #16]
 8000810:	6114      	str	r4, [r2, #16]
 8000812:	611d      	str	r5, [r3, #16]
 8000814:	611e      	str	r6, [r3, #16]
 8000816:	6118      	str	r0, [r3, #16]
 8000818:	611c      	str	r4, [r3, #16]
 800081a:	f8c3 a010 	str.w	sl, [r3, #16]
 800081e:	f8c3 b010 	str.w	fp, [r3, #16]
 8000822:	6116      	str	r6, [r2, #16]
 8000824:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000826:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800082a:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800082c:	2740      	movs	r7, #64	; 0x40
 800082e:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000830:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
 8000834:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000836:	2720      	movs	r7, #32
 8000838:	f8c3 8010 	str.w	r8, [r3, #16]
 800083c:	611f      	str	r7, [r3, #16]
 800083e:	2701      	movs	r7, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000840:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000842:	f8c1 e010 	str.w	lr, [r1, #16]
 8000846:	f8c1 c010 	str.w	ip, [r1, #16]
 800084a:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800084c:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
 8000850:	610f      	str	r7, [r1, #16]
 8000852:	6110      	str	r0, [r2, #16]
 8000854:	6114      	str	r4, [r2, #16]
 8000856:	611d      	str	r5, [r3, #16]
 8000858:	611e      	str	r6, [r3, #16]
 800085a:	6118      	str	r0, [r3, #16]
 800085c:	611c      	str	r4, [r3, #16]
  data[2] = y2 >> 8;
 800085e:	9c02      	ldr	r4, [sp, #8]
 8000860:	f8c3 a010 	str.w	sl, [r3, #16]
 8000864:	f8c3 b010 	str.w	fp, [r3, #16]
 8000868:	0a23      	lsrs	r3, r4, #8
  data[3] = y2;
 800086a:	b2e4      	uxtb	r4, r4
 800086c:	9403      	str	r4, [sp, #12]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800086e:	ea5f 34d9 	movs.w	r4, r9, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8000872:	bf18      	it	ne
 8000874:	2404      	movne	r4, #4
	data[0] = y1 >> 8;
 8000876:	ea4f 2119 	mov.w	r1, r9, lsr #8
  data[2] = y2 >> 8;
 800087a:	9304      	str	r3, [sp, #16]
 800087c:	bf14      	ite	ne
 800087e:	6114      	strne	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000880:	6116      	streq	r6, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000882:	064e      	lsls	r6, r1, #25
 8000884:	bf54      	ite	pl
 8000886:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800088a:	2408      	movmi	r4, #8
 800088c:	4a48      	ldr	r2, [pc, #288]	; (80009b0 <LCD_Rect_Fill+0x58c>)
	data[0] = y1 >> 8;
 800088e:	4608      	mov	r0, r1
 8000890:	6114      	str	r4, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000892:	068c      	lsls	r4, r1, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000894:	bf54      	ite	pl
 8000896:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800089a:	2410      	movmi	r4, #16
 800089c:	4a44      	ldr	r2, [pc, #272]	; (80009b0 <LCD_Rect_Fill+0x58c>)
 800089e:	f04f 0b02 	mov.w	fp, #2
 80008a2:	6114      	str	r4, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80008a4:	06ca      	lsls	r2, r1, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008a6:	bf54      	ite	pl
 80008a8:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80008ac:	2420      	movmi	r4, #32
 80008ae:	4a40      	ldr	r2, [pc, #256]	; (80009b0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80008b0:	070f      	lsls	r7, r1, #28
 80008b2:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008b4:	bf54      	ite	pl
 80008b6:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80008ba:	2440      	movmi	r4, #64	; 0x40
 80008bc:	4a3c      	ldr	r2, [pc, #240]	; (80009b0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80008be:	074e      	lsls	r6, r1, #29
 80008c0:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008c2:	bf54      	ite	pl
 80008c4:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80008c8:	2480      	movmi	r4, #128	; 0x80
 80008ca:	4a39      	ldr	r2, [pc, #228]	; (80009b0 <LCD_Rect_Fill+0x58c>)
 80008cc:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80008d0:	6114      	str	r4, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80008d2:	078c      	lsls	r4, r1, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008d4:	bf54      	ite	pl
 80008d6:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80008da:	2110      	movmi	r1, #16
 80008dc:	4a32      	ldr	r2, [pc, #200]	; (80009a8 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008de:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80008e2:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80008e4:	07c1      	lsls	r1, r0, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008e6:	bf54      	ite	pl
 80008e8:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80008ec:	2120      	movmi	r1, #32
 80008ee:	4a2e      	ldr	r2, [pc, #184]	; (80009a8 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008f0:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 80008f4:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008f6:	492d      	ldr	r1, [pc, #180]	; (80009ac <LCD_Rect_Fill+0x588>)
 80008f8:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80008fc:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 80008fe:	f8c1 b010 	str.w	fp, [r1, #16]
 8000902:	f8c1 a010 	str.w	sl, [r1, #16]
 8000906:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800090a:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 800090e:	f8c1 a010 	str.w	sl, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000912:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8000916:	f8c1 8010 	str.w	r8, [r1, #16]
 800091a:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 800091e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000922:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <LCD_Rect_Fill+0x584>)
 8000924:	4822      	ldr	r0, [pc, #136]	; (80009b0 <LCD_Rect_Fill+0x58c>)
  data[1] = y1;
 8000926:	fa5f f589 	uxtb.w	r5, r9
 800092a:	6104      	str	r4, [r0, #16]
 800092c:	6106      	str	r6, [r0, #16]
 800092e:	f8c2 e010 	str.w	lr, [r2, #16]
 8000932:	6117      	str	r7, [r2, #16]
 8000934:	6114      	str	r4, [r2, #16]
 8000936:	6116      	str	r6, [r2, #16]
 8000938:	6111      	str	r1, [r2, #16]
 800093a:	f8c2 c010 	str.w	ip, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800093e:	09ea      	lsrs	r2, r5, #7
    GPIOx->BSRR = GPIO_Pin;
 8000940:	bf16      	itet	ne
 8000942:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000944:	6107      	streq	r7, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000946:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000948:	f019 0f40 	tst.w	r9, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800094c:	bf0c      	ite	eq
 800094e:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000952:	2108      	movne	r1, #8
 8000954:	4a16      	ldr	r2, [pc, #88]	; (80009b0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000956:	f019 0f20 	tst.w	r9, #32
 800095a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800095c:	bf0c      	ite	eq
 800095e:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000962:	2110      	movne	r1, #16
 8000964:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000966:	f019 0f10 	tst.w	r9, #16
 800096a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800096c:	bf0c      	ite	eq
 800096e:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000972:	2120      	movne	r1, #32
 8000974:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000976:	f019 0f08 	tst.w	r9, #8
 800097a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800097c:	bf0c      	ite	eq
 800097e:	f44f 0180 	moveq.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000982:	2140      	movne	r1, #64	; 0x40
 8000984:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000986:	f019 0f04 	tst.w	r9, #4
 800098a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800098c:	bf0c      	ite	eq
 800098e:	f44f 0100 	moveq.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000992:	2180      	movne	r1, #128	; 0x80
 8000994:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <LCD_Rect_Fill+0x58c>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000996:	f019 0f02 	tst.w	r9, #2
 800099a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800099c:	bf0c      	ite	eq
 800099e:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80009a2:	2110      	movne	r1, #16
 80009a4:	e006      	b.n	80009b4 <LCD_Rect_Fill+0x590>
 80009a6:	bf00      	nop
 80009a8:	40011000 	.word	0x40011000
 80009ac:	40010c00 	.word	0x40010c00
 80009b0:	40010800 	.word	0x40010800
 80009b4:	4ab5      	ldr	r2, [pc, #724]	; (8000c8c <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009b6:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80009ba:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80009bc:	07ea      	lsls	r2, r5, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009be:	bf54      	ite	pl
 80009c0:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80009c4:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009c6:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80009ca:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80009ce:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80009d2:	f04f 0b02 	mov.w	fp, #2
 80009d6:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80009da:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009de:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 80009e2:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 80009e6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 80009ea:	4aa8      	ldr	r2, [pc, #672]	; (8000c8c <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009ec:	48a8      	ldr	r0, [pc, #672]	; (8000c90 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = GPIO_Pin;
 80009ee:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009f0:	49a8      	ldr	r1, [pc, #672]	; (8000c94 <LCD_Rect_Fill+0x870>)
 80009f2:	4aa6      	ldr	r2, [pc, #664]	; (8000c8c <LCD_Rect_Fill+0x868>)
 80009f4:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 80009f6:	f8c1 b010 	str.w	fp, [r1, #16]
 80009fa:	f8c1 a010 	str.w	sl, [r1, #16]
 80009fe:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a02:	f8c1 8010 	str.w	r8, [r1, #16]
 8000a06:	6104      	str	r4, [r0, #16]
 8000a08:	6105      	str	r5, [r0, #16]
 8000a0a:	f8c2 e010 	str.w	lr, [r2, #16]
 8000a0e:	6116      	str	r6, [r2, #16]
 8000a10:	6114      	str	r4, [r2, #16]
 8000a12:	6115      	str	r5, [r2, #16]
 8000a14:	f8c2 c010 	str.w	ip, [r2, #16]
 8000a18:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000a1a:	9a02      	ldr	r2, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 8000a1c:	f04f 0a02 	mov.w	sl, #2
 8000a20:	0bd2      	lsrs	r2, r2, #15
 8000a22:	bf16      	itet	ne
 8000a24:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a26:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000a28:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000a2a:	065f      	lsls	r7, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a2c:	bf54      	ite	pl
 8000a2e:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000a32:	2108      	movmi	r1, #8
 8000a34:	4a96      	ldr	r2, [pc, #600]	; (8000c90 <LCD_Rect_Fill+0x86c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000a36:	069e      	lsls	r6, r3, #26
 8000a38:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a3a:	bf54      	ite	pl
 8000a3c:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000a40:	2110      	movmi	r1, #16
 8000a42:	4a93      	ldr	r2, [pc, #588]	; (8000c90 <LCD_Rect_Fill+0x86c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000a44:	06dd      	lsls	r5, r3, #27
 8000a46:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a48:	bf54      	ite	pl
 8000a4a:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000a4e:	2120      	movmi	r1, #32
 8000a50:	4a8f      	ldr	r2, [pc, #572]	; (8000c90 <LCD_Rect_Fill+0x86c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000a52:	071c      	lsls	r4, r3, #28
 8000a54:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a56:	bf54      	ite	pl
 8000a58:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000a5c:	2140      	movmi	r1, #64	; 0x40
 8000a5e:	4a8c      	ldr	r2, [pc, #560]	; (8000c90 <LCD_Rect_Fill+0x86c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000a60:	0758      	lsls	r0, r3, #29
 8000a62:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a64:	bf54      	ite	pl
 8000a66:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000a6a:	2180      	movmi	r1, #128	; 0x80
 8000a6c:	4a88      	ldr	r2, [pc, #544]	; (8000c90 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a6e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000a72:	6111      	str	r1, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000a74:	0799      	lsls	r1, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a76:	bf54      	ite	pl
 8000a78:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000a7c:	2210      	movmi	r2, #16
 8000a7e:	4b83      	ldr	r3, [pc, #524]	; (8000c8c <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a80:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000a84:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000a86:	9b04      	ldr	r3, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a88:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8000a8c:	f013 0f01 	tst.w	r3, #1
 8000a90:	bf0c      	ite	eq
 8000a92:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000a96:	2220      	movne	r2, #32
 8000a98:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8000a9c:	f04f 0801 	mov.w	r8, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aa0:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8000aa4:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000aa8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8000aac:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000ab0:	4b76      	ldr	r3, [pc, #472]	; (8000c8c <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ab2:	4977      	ldr	r1, [pc, #476]	; (8000c90 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = GPIO_Pin;
 8000ab4:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ab6:	4a77      	ldr	r2, [pc, #476]	; (8000c94 <LCD_Rect_Fill+0x870>)
 8000ab8:	4b74      	ldr	r3, [pc, #464]	; (8000c8c <LCD_Rect_Fill+0x868>)
 8000aba:	6110      	str	r0, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000abc:	f8c2 a010 	str.w	sl, [r2, #16]
 8000ac0:	f8c2 9010 	str.w	r9, [r2, #16]
 8000ac4:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ac8:	f8c2 e010 	str.w	lr, [r2, #16]
 8000acc:	6108      	str	r0, [r1, #16]
 8000ace:	610c      	str	r4, [r1, #16]
 8000ad0:	f8c3 c010 	str.w	ip, [r3, #16]
 8000ad4:	611d      	str	r5, [r3, #16]
 8000ad6:	6118      	str	r0, [r3, #16]
 8000ad8:	611c      	str	r4, [r3, #16]
 8000ada:	611f      	str	r7, [r3, #16]
 8000adc:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000ade:	9b03      	ldr	r3, [sp, #12]
 8000ae0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ae4:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 8000ae6:	bf1c      	itt	ne
 8000ae8:	2304      	movne	r3, #4
 8000aea:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000aec:	9b02      	ldr	r3, [sp, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aee:	bf08      	it	eq
 8000af0:	610d      	streq	r5, [r1, #16]
 8000af2:	f013 0f40 	tst.w	r3, #64	; 0x40
    GPIOx->BSRR = GPIO_Pin;
 8000af6:	bf14      	ite	ne
 8000af8:	2208      	movne	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000afa:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000afe:	4b64      	ldr	r3, [pc, #400]	; (8000c90 <LCD_Rect_Fill+0x86c>)
 8000b00:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b04:	611a      	str	r2, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000b06:	9b02      	ldr	r3, [sp, #8]
 8000b08:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 8000b0c:	f013 0f20 	tst.w	r3, #32
    GPIOx->BSRR = GPIO_Pin;
 8000b10:	bf14      	ite	ne
 8000b12:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b14:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000b18:	4b5d      	ldr	r3, [pc, #372]	; (8000c90 <LCD_Rect_Fill+0x86c>)
 8000b1a:	2402      	movs	r4, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b1c:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000b1e:	9b02      	ldr	r3, [sp, #8]
 8000b20:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8000b24:	f013 0f10 	tst.w	r3, #16
    GPIOx->BSRR = GPIO_Pin;
 8000b28:	bf14      	ite	ne
 8000b2a:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b2c:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000b30:	4b57      	ldr	r3, [pc, #348]	; (8000c90 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b32:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b36:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000b38:	9b02      	ldr	r3, [sp, #8]
 8000b3a:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 8000b3e:	f013 0f08 	tst.w	r3, #8
    GPIOx->BSRR = GPIO_Pin;
 8000b42:	bf14      	ite	ne
 8000b44:	2240      	movne	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b46:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000b4a:	4b51      	ldr	r3, [pc, #324]	; (8000c90 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b4c:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000b50:	611a      	str	r2, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000b52:	9b02      	ldr	r3, [sp, #8]
 8000b54:	494f      	ldr	r1, [pc, #316]	; (8000c94 <LCD_Rect_Fill+0x870>)
 8000b56:	f013 0f04 	tst.w	r3, #4
    GPIOx->BSRR = GPIO_Pin;
 8000b5a:	bf14      	ite	ne
 8000b5c:	2280      	movne	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b5e:	f44f 0200 	moveq.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000b62:	4b4b      	ldr	r3, [pc, #300]	; (8000c90 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b64:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8000b68:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000b6a:	9b02      	ldr	r3, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 8000b6c:	f04f 0910 	mov.w	r9, #16
 8000b70:	079a      	lsls	r2, r3, #30
 8000b72:	bf4c      	ite	mi
 8000b74:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b76:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000b7a:	4b44      	ldr	r3, [pc, #272]	; (8000c8c <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = GPIO_Pin;
 8000b7c:	f04f 0840 	mov.w	r8, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b80:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000b82:	9b03      	ldr	r3, [sp, #12]
 8000b84:	07db      	lsls	r3, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 8000b86:	bf4c      	ite	mi
 8000b88:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b8a:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000b8e:	4b3f      	ldr	r3, [pc, #252]	; (8000c8c <LCD_Rect_Fill+0x868>)
 8000b90:	611a      	str	r2, [r3, #16]
 8000b92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000b96:	6108      	str	r0, [r1, #16]
 8000b98:	4a3c      	ldr	r2, [pc, #240]	; (8000c8c <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = GPIO_Pin;
 8000b9a:	610c      	str	r4, [r1, #16]
 8000b9c:	610d      	str	r5, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b9e:	f8c1 e010 	str.w	lr, [r1, #16]
 8000ba2:	610b      	str	r3, [r1, #16]
 8000ba4:	f103 5370 	add.w	r3, r3, #1006632960	; 0x3c000000
 8000ba8:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8000bac:	6118      	str	r0, [r3, #16]
 8000bae:	f8c3 e010 	str.w	lr, [r3, #16]
 8000bb2:	f8c2 c010 	str.w	ip, [r2, #16]
 8000bb6:	6117      	str	r7, [r2, #16]
 8000bb8:	6110      	str	r0, [r2, #16]
 8000bba:	f8c2 e010 	str.w	lr, [r2, #16]
 8000bbe:	f8c2 b010 	str.w	fp, [r2, #16]
 8000bc2:	f8c2 a010 	str.w	sl, [r2, #16]
 8000bc6:	611f      	str	r7, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000bc8:	2780      	movs	r7, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bca:	f8c3 c010 	str.w	ip, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000bce:	f8c3 9010 	str.w	r9, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bd2:	611e      	str	r6, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000bd4:	f8c3 8010 	str.w	r8, [r3, #16]
 8000bd8:	611f      	str	r7, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bda:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 8000bde:	6117      	str	r7, [r2, #16]
 8000be0:	6116      	str	r6, [r2, #16]
 8000be2:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000be4:	610c      	str	r4, [r1, #16]
 8000be6:	610d      	str	r5, [r1, #16]
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8000be8:	9d01      	ldr	r5, [sp, #4]
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80c8 	beq.w	8000d80 <LCD_Rect_Fill+0x95c>
 8000bf0:	2500      	movs	r5, #0
 8000bf2:	2601      	movs	r6, #1
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8000bf4:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8000bf6:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8000bfa:	f3c7 2785 	ubfx	r7, r7, #10, #6
 8000bfe:	f3cc 4cc4 	ubfx	ip, ip, #19, #5
 8000c02:	017f      	lsls	r7, r7, #5
 8000c04:	ea47 27cc 	orr.w	r7, r7, ip, lsl #11
 8000c08:	f3c7 3880 	ubfx	r8, r7, #14, #1
 8000c0c:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8000c10:	f8cd 8008 	str.w	r8, [sp, #8]
 8000c14:	f3c7 3840 	ubfx	r8, r7, #13, #1
 8000c18:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c1c:	f3c7 3800 	ubfx	r8, r7, #12, #1
 8000c20:	f3c9 1940 	ubfx	r9, r9, #5, #1
 8000c24:	f8cd 8010 	str.w	r8, [sp, #16]
 8000c28:	f3c7 28c0 	ubfx	r8, r7, #11, #1
 8000c2c:	f8cd 8014 	str.w	r8, [sp, #20]
 8000c30:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8000c34:	f3c7 2880 	ubfx	r8, r7, #10, #1
 8000c38:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8000c3c:	f8cd 8018 	str.w	r8, [sp, #24]
 8000c40:	f3c7 2840 	ubfx	r8, r7, #9, #1
 8000c44:	f3c9 1900 	ubfx	r9, r9, #4, #1
 8000c48:	f8cd 801c 	str.w	r8, [sp, #28]
 8000c4c:	f3c7 2800 	ubfx	r8, r7, #8, #1
 8000c50:	f8cd 8020 	str.w	r8, [sp, #32]
 8000c54:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8000c58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8000c5c:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8000c60:	f3c8 18c0 	ubfx	r8, r8, #7, #1
 8000c64:	f3c7 1ac0 	ubfx	sl, r7, #7, #1
 8000c68:	f3c7 1b80 	ubfx	fp, r7, #6, #1
 8000c6c:	f3c9 09c0 	ubfx	r9, r9, #3, #1
 8000c70:	f3c7 1740 	ubfx	r7, r7, #5, #1
 8000c74:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8000c78:	e9cd 970c 	strd	r9, r7, [sp, #48]	; 0x30
 8000c7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8000c80:	f3cc 1c10 	ubfx	ip, ip, #4, #17
 8000c84:	f3c8 1880 	ubfx	r8, r8, #6, #1
 8000c88:	e006      	b.n	8000c98 <LCD_Rect_Fill+0x874>
 8000c8a:	bf00      	nop
 8000c8c:	40011000 	.word	0x40011000
 8000c90:	40010800 	.word	0x40010800
 8000c94:	40010c00 	.word	0x40010c00
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c98:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000c9c:	610e      	str	r6, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c9e:	610f      	str	r7, [r1, #16]
 8000ca0:	f1bc 0f00 	cmp.w	ip, #0
 8000ca4:	f000 80ac 	beq.w	8000e00 <LCD_Rect_Fill+0x9dc>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8000ca8:	9f02      	ldr	r7, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 8000caa:	611c      	str	r4, [r3, #16]
 8000cac:	2f00      	cmp	r7, #0
 8000cae:	f000 80ac 	beq.w	8000e0a <LCD_Rect_Fill+0x9e6>
 8000cb2:	611e      	str	r6, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8000cb4:	9f03      	ldr	r7, [sp, #12]
 8000cb6:	2f00      	cmp	r7, #0
 8000cb8:	f000 809e 	beq.w	8000df8 <LCD_Rect_Fill+0x9d4>
 8000cbc:	f04f 0908 	mov.w	r9, #8
 8000cc0:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8000cc4:	9f04      	ldr	r7, [sp, #16]
 8000cc6:	2f00      	cmp	r7, #0
 8000cc8:	f000 8091 	beq.w	8000dee <LCD_Rect_Fill+0x9ca>
 8000ccc:	f04f 0904 	mov.w	r9, #4
 8000cd0:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8000cd4:	9f05      	ldr	r7, [sp, #20]
 8000cd6:	2f00      	cmp	r7, #0
 8000cd8:	f000 8087 	beq.w	8000dea <LCD_Rect_Fill+0x9c6>
 8000cdc:	6114      	str	r4, [r2, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8000cde:	9f06      	ldr	r7, [sp, #24]
 8000ce0:	2f00      	cmp	r7, #0
 8000ce2:	d07f      	beq.n	8000de4 <LCD_Rect_Fill+0x9c0>
 8000ce4:	6116      	str	r6, [r2, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8000ce6:	9f07      	ldr	r7, [sp, #28]
 8000ce8:	2f00      	cmp	r7, #0
 8000cea:	d076      	beq.n	8000dda <LCD_Rect_Fill+0x9b6>
 8000cec:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 8000cf0:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8000cf4:	9f08      	ldr	r7, [sp, #32]
 8000cf6:	2f00      	cmp	r7, #0
 8000cf8:	d06a      	beq.n	8000dd0 <LCD_Rect_Fill+0x9ac>
 8000cfa:	f44f 4980 	mov.w	r9, #16384	; 0x4000
 8000cfe:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000d02:	f1ba 0f00 	cmp.w	sl, #0
 8000d06:	d05e      	beq.n	8000dc6 <LCD_Rect_Fill+0x9a2>
 8000d08:	f04f 0904 	mov.w	r9, #4
 8000d0c:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000d10:	f1bb 0f00 	cmp.w	fp, #0
 8000d14:	d053      	beq.n	8000dbe <LCD_Rect_Fill+0x99a>
 8000d16:	f04f 0908 	mov.w	r9, #8
 8000d1a:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000d1e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8000d20:	2f00      	cmp	r7, #0
 8000d22:	d047      	beq.n	8000db4 <LCD_Rect_Fill+0x990>
 8000d24:	f04f 0910 	mov.w	r9, #16
 8000d28:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000d2c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8000d2e:	2f00      	cmp	r7, #0
 8000d30:	d03b      	beq.n	8000daa <LCD_Rect_Fill+0x986>
 8000d32:	f04f 0920 	mov.w	r9, #32
 8000d36:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000d3a:	f1b8 0f00 	cmp.w	r8, #0
 8000d3e:	d02f      	beq.n	8000da0 <LCD_Rect_Fill+0x97c>
 8000d40:	f04f 0940 	mov.w	r9, #64	; 0x40
 8000d44:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000d48:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8000d4a:	b327      	cbz	r7, 8000d96 <LCD_Rect_Fill+0x972>
 8000d4c:	f04f 0980 	mov.w	r9, #128	; 0x80
 8000d50:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000d54:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8000d56:	b1cf      	cbz	r7, 8000d8c <LCD_Rect_Fill+0x968>
 8000d58:	f04f 0910 	mov.w	r9, #16
 8000d5c:	f8c2 9010 	str.w	r9, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000d60:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8000d62:	3501      	adds	r5, #1
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000d64:	b17f      	cbz	r7, 8000d86 <LCD_Rect_Fill+0x962>
 8000d66:	f04f 0920 	mov.w	r9, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d6a:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000d6e:	f44f 6980 	mov.w	r9, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8000d72:	9f01      	ldr	r7, [sp, #4]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d74:	6108      	str	r0, [r1, #16]
 8000d76:	42af      	cmp	r7, r5
    GPIOx->BSRR = GPIO_Pin;
 8000d78:	610c      	str	r4, [r1, #16]
 8000d7a:	f8c1 9010 	str.w	r9, [r1, #16]
 8000d7e:	d18b      	bne.n	8000c98 <LCD_Rect_Fill+0x874>
}
 8000d80:	b00f      	add	sp, #60	; 0x3c
 8000d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d86:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
 8000d8a:	e7ee      	b.n	8000d6a <LCD_Rect_Fill+0x946>
 8000d8c:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
 8000d90:	f8c2 9010 	str.w	r9, [r2, #16]
}
 8000d94:	e7e4      	b.n	8000d60 <LCD_Rect_Fill+0x93c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d96:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
 8000d9a:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8000d9e:	e7d9      	b.n	8000d54 <LCD_Rect_Fill+0x930>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000da0:	f44f 0980 	mov.w	r9, #4194304	; 0x400000
 8000da4:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8000da8:	e7ce      	b.n	8000d48 <LCD_Rect_Fill+0x924>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000daa:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
 8000dae:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8000db2:	e7c2      	b.n	8000d3a <LCD_Rect_Fill+0x916>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000db4:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
 8000db8:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8000dbc:	e7b6      	b.n	8000d2c <LCD_Rect_Fill+0x908>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dbe:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 8000dc2:	611f      	str	r7, [r3, #16]
}
 8000dc4:	e7ab      	b.n	8000d1e <LCD_Rect_Fill+0x8fa>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dc6:	f44f 2980 	mov.w	r9, #262144	; 0x40000
 8000dca:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8000dce:	e79f      	b.n	8000d10 <LCD_Rect_Fill+0x8ec>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dd0:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 8000dd4:	f8c2 9010 	str.w	r9, [r2, #16]
}
 8000dd8:	e793      	b.n	8000d02 <LCD_Rect_Fill+0x8de>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dda:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8000dde:	f8c2 9010 	str.w	r9, [r2, #16]
}
 8000de2:	e787      	b.n	8000cf4 <LCD_Rect_Fill+0x8d0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000de4:	f8c2 e010 	str.w	lr, [r2, #16]
}
 8000de8:	e77d      	b.n	8000ce6 <LCD_Rect_Fill+0x8c2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dea:	6110      	str	r0, [r2, #16]
}
 8000dec:	e777      	b.n	8000cde <LCD_Rect_Fill+0x8ba>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dee:	f44f 2980 	mov.w	r9, #262144	; 0x40000
 8000df2:	f8c2 9010 	str.w	r9, [r2, #16]
}
 8000df6:	e76d      	b.n	8000cd4 <LCD_Rect_Fill+0x8b0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000df8:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 8000dfc:	6117      	str	r7, [r2, #16]
}
 8000dfe:	e761      	b.n	8000cc4 <LCD_Rect_Fill+0x8a0>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8000e00:	9f02      	ldr	r7, [sp, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e02:	6118      	str	r0, [r3, #16]
 8000e04:	2f00      	cmp	r7, #0
 8000e06:	f47f af54 	bne.w	8000cb2 <LCD_Rect_Fill+0x88e>
 8000e0a:	f8c3 e010 	str.w	lr, [r3, #16]
}
 8000e0e:	e751      	b.n	8000cb4 <LCD_Rect_Fill+0x890>

08000e10 <LCD_Circle.constprop.0>:
			s += rx2 * ((4 * y) + 6);
		}
	}
}

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 8000e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	int a_, b_, P;
	a_ = 0;
	b_ = radius;
	P = 1 - radius;
 8000e14:	2601      	movs	r6, #1
 8000e16:	2300      	movs	r3, #0
void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 8000e18:	b089      	sub	sp, #36	; 0x24
 8000e1a:	e9cd 0105 	strd	r0, r1, [sp, #20]
 8000e1e:	4615      	mov	r5, r2
	P = 1 - radius;
 8000e20:	1a32      	subs	r2, r6, r0
 8000e22:	9304      	str	r3, [sp, #16]
 8000e24:	9203      	str	r2, [sp, #12]
 8000e26:	fa1f fb80 	uxth.w	fp, r0
 8000e2a:	1e73      	subs	r3, r6, #1
 8000e2c:	9307      	str	r3, [sp, #28]
	while (a_ <= b_)
	{
		if (fill == 1)
 8000e2e:	9b06      	ldr	r3, [sp, #24]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d070      	beq.n	8000f16 <LCD_Circle.constprop.0+0x106>
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8000e34:	2301      	movs	r3, #1
 8000e36:	b2b4      	uxth	r4, r6
 8000e38:	f104 09ab 	add.w	r9, r4, #171	; 0xab
 8000e3c:	f10b 084b 	add.w	r8, fp, #75	; 0x4b
 8000e40:	fa1f f989 	uxth.w	r9, r9
 8000e44:	fa1f f888 	uxth.w	r8, r8
 8000e48:	4641      	mov	r1, r8
 8000e4a:	4648      	mov	r0, r9
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	9500      	str	r5, [sp, #0]
 8000e50:	f7ff fae8 	bl	8000424 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8000e54:	2301      	movs	r3, #1
 8000e56:	f104 074a 	add.w	r7, r4, #74	; 0x4a
 8000e5a:	f10b 0aac 	add.w	sl, fp, #172	; 0xac
 8000e5e:	b2bf      	uxth	r7, r7
 8000e60:	fa1f fa8a 	uxth.w	sl, sl
 8000e64:	4639      	mov	r1, r7
 8000e66:	461a      	mov	r2, r3
 8000e68:	4650      	mov	r0, sl
 8000e6a:	9500      	str	r5, [sp, #0]
 8000e6c:	f7ff fada 	bl	8000424 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8000e70:	2301      	movs	r3, #1
 8000e72:	4641      	mov	r1, r8
 8000e74:	f1c4 08ad 	rsb	r8, r4, #173	; 0xad
 8000e78:	fa1f f888 	uxth.w	r8, r8
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4640      	mov	r0, r8
 8000e80:	9500      	str	r5, [sp, #0]
 8000e82:	f7ff facf 	bl	8000424 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8000e86:	2301      	movs	r3, #1
 8000e88:	4639      	mov	r1, r7
 8000e8a:	f1cb 07ac 	rsb	r7, fp, #172	; 0xac
 8000e8e:	b2bf      	uxth	r7, r7
 8000e90:	461a      	mov	r2, r3
 8000e92:	4638      	mov	r0, r7
 8000e94:	9500      	str	r5, [sp, #0]
 8000e96:	f7ff fac5 	bl	8000424 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	f1c4 044c 	rsb	r4, r4, #76	; 0x4c
 8000ea0:	b2a4      	uxth	r4, r4
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4650      	mov	r0, sl
 8000ea6:	4621      	mov	r1, r4
 8000ea8:	9500      	str	r5, [sp, #0]
 8000eaa:	f7ff fabb 	bl	8000424 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8000eae:	2301      	movs	r3, #1
 8000eb0:	4648      	mov	r0, r9
 8000eb2:	f1cb 094b 	rsb	r9, fp, #75	; 0x4b
 8000eb6:	fa1f f989 	uxth.w	r9, r9
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	9500      	str	r5, [sp, #0]
 8000ec0:	f7ff fab0 	bl	8000424 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	4649      	mov	r1, r9
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4640      	mov	r0, r8
 8000ecc:	9500      	str	r5, [sp, #0]
 8000ece:	f7ff faa9 	bl	8000424 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	4621      	mov	r1, r4
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4638      	mov	r0, r7
 8000eda:	9500      	str	r5, [sp, #0]
 8000edc:	f7ff faa2 	bl	8000424 <LCD_Rect_Fill>
		}
		if (P < 0)
 8000ee0:	9a03      	ldr	r2, [sp, #12]
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	db3a      	blt.n	8000f5c <LCD_Circle.constprop.0+0x14c>
 8000ee6:	4611      	mov	r1, r2
			P = (P + 3) + (2 * a_);
			a_++;
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 8000ee8:	9805      	ldr	r0, [sp, #20]
 8000eea:	1e73      	subs	r3, r6, #1
 8000eec:	1a1b      	subs	r3, r3, r0
 8000eee:	3105      	adds	r1, #5
 8000ef0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8000ef4:	9303      	str	r3, [sp, #12]
	while (a_ <= b_)
 8000ef6:	9b04      	ldr	r3, [sp, #16]
			a_++;
			b_--;
 8000ef8:	3801      	subs	r0, #1
	while (a_ <= b_)
 8000efa:	3302      	adds	r3, #2
 8000efc:	4286      	cmp	r6, r0
			b_--;
 8000efe:	9005      	str	r0, [sp, #20]
	while (a_ <= b_)
 8000f00:	9304      	str	r3, [sp, #16]
 8000f02:	f106 0601 	add.w	r6, r6, #1
 8000f06:	dc35      	bgt.n	8000f74 <LCD_Circle.constprop.0+0x164>
 8000f08:	1e73      	subs	r3, r6, #1
 8000f0a:	9307      	str	r3, [sp, #28]
		if (fill == 1)
 8000f0c:	9b06      	ldr	r3, [sp, #24]
 8000f0e:	fa1f fb80 	uxth.w	fp, r0
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d18e      	bne.n	8000e34 <LCD_Circle.constprop.0+0x24>
 8000f16:	9b04      	ldr	r3, [sp, #16]
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8000f18:	ea4f 044b 	mov.w	r4, fp, lsl #1
 8000f1c:	b2b7      	uxth	r7, r6
 8000f1e:	f103 0801 	add.w	r8, r3, #1
 8000f22:	3401      	adds	r4, #1
 8000f24:	fa1f f888 	uxth.w	r8, r8
 8000f28:	b2a4      	uxth	r4, r4
 8000f2a:	f1cb 014b 	rsb	r1, fp, #75	; 0x4b
 8000f2e:	f1c7 00ad 	rsb	r0, r7, #173	; 0xad
 8000f32:	4623      	mov	r3, r4
 8000f34:	4642      	mov	r2, r8
 8000f36:	b289      	uxth	r1, r1
 8000f38:	b280      	uxth	r0, r0
 8000f3a:	9500      	str	r5, [sp, #0]
 8000f3c:	f7ff fa72 	bl	8000424 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8000f40:	f1c7 014c 	rsb	r1, r7, #76	; 0x4c
 8000f44:	f1cb 00ac 	rsb	r0, fp, #172	; 0xac
 8000f48:	4622      	mov	r2, r4
 8000f4a:	4643      	mov	r3, r8
 8000f4c:	9500      	str	r5, [sp, #0]
 8000f4e:	b289      	uxth	r1, r1
 8000f50:	b280      	uxth	r0, r0
 8000f52:	f7ff fa67 	bl	8000424 <LCD_Rect_Fill>
		if (P < 0)
 8000f56:	9a03      	ldr	r2, [sp, #12]
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	dac4      	bge.n	8000ee6 <LCD_Circle.constprop.0+0xd6>
			P = (P + 3) + (2 * a_);
 8000f5c:	9904      	ldr	r1, [sp, #16]
 8000f5e:	3203      	adds	r2, #3
 8000f60:	188a      	adds	r2, r1, r2
 8000f62:	9203      	str	r2, [sp, #12]
	while (a_ <= b_)
 8000f64:	1c8a      	adds	r2, r1, #2
 8000f66:	9204      	str	r2, [sp, #16]
 8000f68:	9a05      	ldr	r2, [sp, #20]
 8000f6a:	4296      	cmp	r6, r2
 8000f6c:	f106 0601 	add.w	r6, r6, #1
 8000f70:	f77f af5b 	ble.w	8000e2a <LCD_Circle.constprop.0+0x1a>
		}
	}
}
 8000f74:	b009      	add	sp, #36	; 0x24
 8000f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f7a:	bf00      	nop

08000f7c <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f7c:	6a43      	ldr	r3, [r0, #36]	; 0x24

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	6950      	ldr	r0, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8000f82:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
 8000f86:	2921      	cmp	r1, #33	; 0x21
 8000f88:	d009      	beq.n	8000f9e <UART_DMAError+0x22>
    huart->TxXferCount = 0x00U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000f8a:	6950      	ldr	r0, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8000f8c:	f893 103e 	ldrb.w	r1, [r3, #62]	; 0x3e
 8000f90:	2922      	cmp	r1, #34	; 0x22
 8000f92:	d014      	beq.n	8000fbe <UART_DMAError+0x42>
  {
    huart->RxXferCount = 0x00U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8000f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f96:	f042 0210 	orr.w	r2, r2, #16
 8000f9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8000f9c:	4770      	bx	lr
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8000f9e:	0600      	lsls	r0, r0, #24
 8000fa0:	d5f3      	bpl.n	8000f8a <UART_DMAError+0xe>
    huart->TxXferCount = 0x00U;
 8000fa2:	2100      	movs	r1, #0
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8000fa4:	2020      	movs	r0, #32
    huart->TxXferCount = 0x00U;
 8000fa6:	84d9      	strh	r1, [r3, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8000fa8:	68d1      	ldr	r1, [r2, #12]
 8000faa:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000fae:	60d1      	str	r1, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000fb0:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000fb4:	6950      	ldr	r0, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8000fb6:	f893 103e 	ldrb.w	r1, [r3, #62]	; 0x3e
 8000fba:	2922      	cmp	r1, #34	; 0x22
 8000fbc:	d1ea      	bne.n	8000f94 <UART_DMAError+0x18>
 8000fbe:	0641      	lsls	r1, r0, #25
 8000fc0:	d5e8      	bpl.n	8000f94 <UART_DMAError+0x18>
    huart->RxXferCount = 0x00U;
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	85d9      	strh	r1, [r3, #46]	; 0x2e
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000fc6:	68d1      	ldr	r1, [r2, #12]
 8000fc8:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8000fcc:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000fce:	6951      	ldr	r1, [r2, #20]
 8000fd0:	f021 0101 	bic.w	r1, r1, #1
 8000fd4:	6151      	str	r1, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8000fd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fd8:	2901      	cmp	r1, #1
 8000fda:	d103      	bne.n	8000fe4 <UART_DMAError+0x68>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000fdc:	68d1      	ldr	r1, [r2, #12]
 8000fde:	f021 0110 	bic.w	r1, r1, #16
 8000fe2:	60d1      	str	r1, [r2, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000fe4:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8000fe6:	2120      	movs	r1, #32
 8000fe8:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000fec:	631a      	str	r2, [r3, #48]	; 0x30
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8000fee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ff0:	f042 0210 	orr.w	r2, r2, #16
 8000ff4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8000ffa:	4a05      	ldr	r2, [pc, #20]	; (8001010 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	4905      	ldr	r1, [pc, #20]	; (8001014 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001000:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001004:	5ccb      	ldrb	r3, [r1, r3]
 8001006:	6810      	ldr	r0, [r2, #0]
}
 8001008:	40d8      	lsrs	r0, r3
 800100a:	4770      	bx	lr
 800100c:	40021000 	.word	0x40021000
 8001010:	20000000 	.word	0x20000000
 8001014:	0800c620 	.word	0x0800c620

08001018 <HAL_GPIO_Init>:
{
 8001018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101c:	680e      	ldr	r6, [r1, #0]
{
 800101e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001020:	2e00      	cmp	r6, #0
 8001022:	f000 80b2 	beq.w	800118a <HAL_GPIO_Init+0x172>
 8001026:	2200      	movs	r2, #0
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001028:	4f74      	ldr	r7, [pc, #464]	; (80011fc <HAL_GPIO_Init+0x1e4>)
  uint32_t config = 0x00u;
 800102a:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 800102c:	4613      	mov	r3, r2
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800102e:	4d74      	ldr	r5, [pc, #464]	; (8001200 <HAL_GPIO_Init+0x1e8>)
      switch (GPIO_Init->Mode)
 8001030:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8001204 <HAL_GPIO_Init+0x1ec>
 8001034:	e006      	b.n	8001044 <HAL_GPIO_Init+0x2c>
	position++;
 8001036:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001038:	fa36 f403 	lsrs.w	r4, r6, r3
 800103c:	f102 0204 	add.w	r2, r2, #4
 8001040:	f000 80a3 	beq.w	800118a <HAL_GPIO_Init+0x172>
    ioposition = (0x01uL << position);
 8001044:	2401      	movs	r4, #1
 8001046:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8001048:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104c:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8001050:	d1f1      	bne.n	8001036 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8001052:	684e      	ldr	r6, [r1, #4]
 8001054:	2e12      	cmp	r6, #18
 8001056:	f200 809b 	bhi.w	8001190 <HAL_GPIO_Init+0x178>
 800105a:	2e12      	cmp	r6, #18
 800105c:	d81a      	bhi.n	8001094 <HAL_GPIO_Init+0x7c>
 800105e:	e8df f006 	tbb	[pc, r6]
 8001062:	baa4      	.short	0xbaa4
 8001064:	1919c3b6 	.word	0x1919c3b6
 8001068:	19191919 	.word	0x19191919
 800106c:	19191919 	.word	0x19191919
 8001070:	ae191919 	.word	0xae191919
 8001074:	b2          	.byte	0xb2
 8001075:	00          	.byte	0x00
 8001076:	f8df e190 	ldr.w	lr, [pc, #400]	; 8001208 <HAL_GPIO_Init+0x1f0>
 800107a:	4576      	cmp	r6, lr
 800107c:	f000 8095 	beq.w	80011aa <HAL_GPIO_Init+0x192>
 8001080:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8001084:	4576      	cmp	r6, lr
 8001086:	f000 8090 	beq.w	80011aa <HAL_GPIO_Init+0x192>
 800108a:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800108e:	4576      	cmp	r6, lr
 8001090:	f000 808b 	beq.w	80011aa <HAL_GPIO_Init+0x192>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001094:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8001098:	bf9c      	itt	ls
 800109a:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800109c:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800109e:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010a2:	bf84      	itt	hi
 80010a4:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010a8:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010ac:	f8de 4000 	ldr.w	r4, [lr]
 80010b0:	fa0a f90b 	lsl.w	r9, sl, fp
 80010b4:	fa06 fb0b 	lsl.w	fp, r6, fp
 80010b8:	ea24 040b 	bic.w	r4, r4, fp
 80010bc:	ea44 0409 	orr.w	r4, r4, r9
 80010c0:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010c4:	684c      	ldr	r4, [r1, #4]
 80010c6:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80010ca:	d076      	beq.n	80011ba <HAL_GPIO_Init+0x1a2>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010cc:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010d0:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010d4:	f04e 0e01 	orr.w	lr, lr, #1
 80010d8:	f8c7 e018 	str.w	lr, [r7, #24]
 80010dc:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010e0:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010e4:	f00e 0e01 	and.w	lr, lr, #1
 80010e8:	f8cd e004 	str.w	lr, [sp, #4]
 80010ec:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80010f0:	f023 0e03 	bic.w	lr, r3, #3
 80010f4:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 80010f8:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 80010fc:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001100:	fa06 f609 	lsl.w	r6, r6, r9
 8001104:	ea2b 0b06 	bic.w	fp, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001108:	4e40      	ldr	r6, [pc, #256]	; (800120c <HAL_GPIO_Init+0x1f4>)
 800110a:	42b0      	cmp	r0, r6
 800110c:	d068      	beq.n	80011e0 <HAL_GPIO_Init+0x1c8>
 800110e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001112:	42b0      	cmp	r0, r6
 8001114:	d066      	beq.n	80011e4 <HAL_GPIO_Init+0x1cc>
 8001116:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800111a:	42b0      	cmp	r0, r6
 800111c:	d05e      	beq.n	80011dc <HAL_GPIO_Init+0x1c4>
 800111e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001122:	42b0      	cmp	r0, r6
 8001124:	bf0c      	ite	eq
 8001126:	2603      	moveq	r6, #3
 8001128:	2604      	movne	r6, #4
 800112a:	fa06 f609 	lsl.w	r6, r6, r9
 800112e:	ea46 060b 	orr.w	r6, r6, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8001132:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001136:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001138:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800113c:	bf14      	ite	ne
 800113e:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001142:	ea26 060c 	biceq.w	r6, r6, ip
 8001146:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001148:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800114a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800114e:	bf14      	ite	ne
 8001150:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001154:	ea26 060c 	biceq.w	r6, r6, ip
 8001158:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800115a:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800115c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001160:	bf14      	ite	ne
 8001162:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001166:	ea26 060c 	biceq.w	r6, r6, ip
 800116a:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800116c:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001170:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001172:	d01f      	beq.n	80011b4 <HAL_GPIO_Init+0x19c>
          SET_BIT(EXTI->FTSR, iocurrent);
 8001174:	ea44 040c 	orr.w	r4, r4, ip
 8001178:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117a:	680e      	ldr	r6, [r1, #0]
	position++;
 800117c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117e:	fa36 f403 	lsrs.w	r4, r6, r3
 8001182:	f102 0204 	add.w	r2, r2, #4
 8001186:	f47f af5d 	bne.w	8001044 <HAL_GPIO_Init+0x2c>
}
 800118a:	b003      	add	sp, #12
 800118c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001190:	4546      	cmp	r6, r8
 8001192:	d00a      	beq.n	80011aa <HAL_GPIO_Init+0x192>
 8001194:	f67f af6f 	bls.w	8001076 <HAL_GPIO_Init+0x5e>
 8001198:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001210 <HAL_GPIO_Init+0x1f8>
 800119c:	4576      	cmp	r6, lr
 800119e:	d004      	beq.n	80011aa <HAL_GPIO_Init+0x192>
 80011a0:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 80011a4:	4576      	cmp	r6, lr
 80011a6:	f47f af75 	bne.w	8001094 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011aa:	688e      	ldr	r6, [r1, #8]
 80011ac:	b9fe      	cbnz	r6, 80011ee <HAL_GPIO_Init+0x1d6>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011ae:	f04f 0a04 	mov.w	sl, #4
 80011b2:	e76f      	b.n	8001094 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011b4:	ea24 040c 	bic.w	r4, r4, ip
 80011b8:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ba:	680e      	ldr	r6, [r1, #0]
 80011bc:	e73b      	b.n	8001036 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011be:	68cc      	ldr	r4, [r1, #12]
 80011c0:	f104 0a04 	add.w	sl, r4, #4
          break;
 80011c4:	e766      	b.n	8001094 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011c6:	68cc      	ldr	r4, [r1, #12]
 80011c8:	f104 0a0c 	add.w	sl, r4, #12
          break;
 80011cc:	e762      	b.n	8001094 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011ce:	68cc      	ldr	r4, [r1, #12]
 80011d0:	f104 0a08 	add.w	sl, r4, #8
          break;
 80011d4:	e75e      	b.n	8001094 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011d6:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 80011da:	e75b      	b.n	8001094 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011dc:	2602      	movs	r6, #2
 80011de:	e7a4      	b.n	800112a <HAL_GPIO_Init+0x112>
 80011e0:	2600      	movs	r6, #0
 80011e2:	e7a2      	b.n	800112a <HAL_GPIO_Init+0x112>
 80011e4:	2601      	movs	r6, #1
 80011e6:	e7a0      	b.n	800112a <HAL_GPIO_Init+0x112>
      switch (GPIO_Init->Mode)
 80011e8:	f04f 0a00 	mov.w	sl, #0
 80011ec:	e752      	b.n	8001094 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011ee:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f0:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 80011f4:	bf0c      	ite	eq
 80011f6:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 80011f8:	6144      	strne	r4, [r0, #20]
 80011fa:	e74b      	b.n	8001094 <HAL_GPIO_Init+0x7c>
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010400 	.word	0x40010400
 8001204:	10220000 	.word	0x10220000
 8001208:	10120000 	.word	0x10120000
 800120c:	40010800 	.word	0x40010800
 8001210:	10310000 	.word	0x10310000

08001214 <UART_DMATransmitCplt>:
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001214:	6803      	ldr	r3, [r0, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f013 0320 	ands.w	r3, r3, #32
 800121c:	d10a      	bne.n	8001234 <UART_DMATransmitCplt+0x20>
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800121e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001220:	680a      	ldr	r2, [r1, #0]
    huart->TxXferCount = 0x00U;
 8001222:	84cb      	strh	r3, [r1, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001224:	6953      	ldr	r3, [r2, #20]
 8001226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800122a:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800122c:	68d3      	ldr	r3, [r2, #12]
 800122e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop

08001238 <UART_DMATxHalfCplt>:
}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop

0800123c <HAL_RCC_OscConfig.constprop.0>:
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800123c:	4a91      	ldr	r2, [pc, #580]	; (8001484 <HAL_RCC_OscConfig.constprop.0+0x248>)
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 800123e:	b470      	push	{r4, r5, r6}
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001240:	6853      	ldr	r3, [r2, #4]
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 8001242:	b083      	sub	sp, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001244:	f003 030c 	and.w	r3, r3, #12
 8001248:	2b04      	cmp	r3, #4
 800124a:	f000 80ee 	beq.w	800142a <HAL_RCC_OscConfig.constprop.0+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800124e:	6853      	ldr	r3, [r2, #4]
 8001250:	f003 030c 	and.w	r3, r3, #12
 8001254:	2b08      	cmp	r3, #8
 8001256:	f000 80e4 	beq.w	8001422 <HAL_RCC_OscConfig.constprop.0+0x1e6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125a:	498a      	ldr	r1, [pc, #552]	; (8001484 <HAL_RCC_OscConfig.constprop.0+0x248>)
  return uwTick;
 800125c:	4b8a      	ldr	r3, [pc, #552]	; (8001488 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 800125e:	680a      	ldr	r2, [r1, #0]
 8001260:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001264:	600a      	str	r2, [r1, #0]
 8001266:	681c      	ldr	r4, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001268:	e003      	b.n	8001272 <HAL_RCC_OscConfig.constprop.0+0x36>
 800126a:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800126c:	1b12      	subs	r2, r2, r4
 800126e:	2a64      	cmp	r2, #100	; 0x64
 8001270:	d87a      	bhi.n	8001368 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	680a      	ldr	r2, [r1, #0]
 8001274:	0395      	lsls	r5, r2, #14
 8001276:	d5f8      	bpl.n	800126a <HAL_RCC_OscConfig.constprop.0+0x2e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001278:	6803      	ldr	r3, [r0, #0]
 800127a:	0799      	lsls	r1, r3, #30
 800127c:	d525      	bpl.n	80012ca <HAL_RCC_OscConfig.constprop.0+0x8e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800127e:	4b81      	ldr	r3, [pc, #516]	; (8001484 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	f012 0f0c 	tst.w	r2, #12
 8001286:	f000 80a6 	beq.w	80013d6 <HAL_RCC_OscConfig.constprop.0+0x19a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	f002 020c 	and.w	r2, r2, #12
 8001290:	2a08      	cmp	r2, #8
 8001292:	f000 809c 	beq.w	80013ce <HAL_RCC_OscConfig.constprop.0+0x192>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001296:	6902      	ldr	r2, [r0, #16]
 8001298:	2a00      	cmp	r2, #0
 800129a:	f000 80ea 	beq.w	8001472 <HAL_RCC_OscConfig.constprop.0+0x236>
        __HAL_RCC_HSI_ENABLE();
 800129e:	2401      	movs	r4, #1
 80012a0:	4a7a      	ldr	r2, [pc, #488]	; (800148c <HAL_RCC_OscConfig.constprop.0+0x250>)
 80012a2:	4b79      	ldr	r3, [pc, #484]	; (8001488 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 80012a4:	6014      	str	r4, [r2, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a6:	4977      	ldr	r1, [pc, #476]	; (8001484 <HAL_RCC_OscConfig.constprop.0+0x248>)
 80012a8:	681c      	ldr	r4, [r3, #0]
 80012aa:	e003      	b.n	80012b4 <HAL_RCC_OscConfig.constprop.0+0x78>
 80012ac:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ae:	1b12      	subs	r2, r2, r4
 80012b0:	2a02      	cmp	r2, #2
 80012b2:	d859      	bhi.n	8001368 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b4:	680a      	ldr	r2, [r1, #0]
 80012b6:	0796      	lsls	r6, r2, #30
 80012b8:	d5f8      	bpl.n	80012ac <HAL_RCC_OscConfig.constprop.0+0x70>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ba:	680b      	ldr	r3, [r1, #0]
 80012bc:	6942      	ldr	r2, [r0, #20]
 80012be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012c2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012c6:	600b      	str	r3, [r1, #0]
 80012c8:	6803      	ldr	r3, [r0, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ca:	071a      	lsls	r2, r3, #28
 80012cc:	d520      	bpl.n	8001310 <HAL_RCC_OscConfig.constprop.0+0xd4>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ce:	6982      	ldr	r2, [r0, #24]
 80012d0:	2a00      	cmp	r2, #0
 80012d2:	f000 8089 	beq.w	80013e8 <HAL_RCC_OscConfig.constprop.0+0x1ac>
      __HAL_RCC_LSI_ENABLE();
 80012d6:	2401      	movs	r4, #1
 80012d8:	4a6c      	ldr	r2, [pc, #432]	; (800148c <HAL_RCC_OscConfig.constprop.0+0x250>)
 80012da:	4b6b      	ldr	r3, [pc, #428]	; (8001488 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 80012dc:	f8c2 4480 	str.w	r4, [r2, #1152]	; 0x480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e0:	4968      	ldr	r1, [pc, #416]	; (8001484 <HAL_RCC_OscConfig.constprop.0+0x248>)
 80012e2:	681c      	ldr	r4, [r3, #0]
 80012e4:	e003      	b.n	80012ee <HAL_RCC_OscConfig.constprop.0+0xb2>
 80012e6:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012e8:	1b12      	subs	r2, r2, r4
 80012ea:	2a02      	cmp	r2, #2
 80012ec:	d83c      	bhi.n	8001368 <HAL_RCC_OscConfig.constprop.0+0x12c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ee:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80012f0:	0795      	lsls	r5, r2, #30
 80012f2:	d5f8      	bpl.n	80012e6 <HAL_RCC_OscConfig.constprop.0+0xaa>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012f4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80012f8:	4b65      	ldr	r3, [pc, #404]	; (8001490 <HAL_RCC_OscConfig.constprop.0+0x254>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001300:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001302:	bf00      	nop
  }
  while (Delay --);
 8001304:	9b01      	ldr	r3, [sp, #4]
 8001306:	1e5a      	subs	r2, r3, #1
 8001308:	9201      	str	r2, [sp, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f9      	bne.n	8001302 <HAL_RCC_OscConfig.constprop.0+0xc6>
 800130e:	6803      	ldr	r3, [r0, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001310:	075e      	lsls	r6, r3, #29
 8001312:	d541      	bpl.n	8001398 <HAL_RCC_OscConfig.constprop.0+0x15c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001314:	4b5b      	ldr	r3, [pc, #364]	; (8001484 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001316:	69da      	ldr	r2, [r3, #28]
 8001318:	00d6      	lsls	r6, r2, #3
 800131a:	d577      	bpl.n	800140c <HAL_RCC_OscConfig.constprop.0+0x1d0>
    FlagStatus       pwrclkchanged = RESET;
 800131c:	2400      	movs	r4, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131e:	495d      	ldr	r1, [pc, #372]	; (8001494 <HAL_RCC_OscConfig.constprop.0+0x258>)
 8001320:	680b      	ldr	r3, [r1, #0]
 8001322:	05dd      	lsls	r5, r3, #23
 8001324:	d513      	bpl.n	800134e <HAL_RCC_OscConfig.constprop.0+0x112>
 8001326:	4b58      	ldr	r3, [pc, #352]	; (8001488 <HAL_RCC_OscConfig.constprop.0+0x24c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001328:	68c2      	ldr	r2, [r0, #12]
 800132a:	2a01      	cmp	r2, #1
 800132c:	d020      	beq.n	8001370 <HAL_RCC_OscConfig.constprop.0+0x134>
 800132e:	2a00      	cmp	r2, #0
 8001330:	f000 8088 	beq.w	8001444 <HAL_RCC_OscConfig.constprop.0+0x208>
 8001334:	2a05      	cmp	r2, #5
 8001336:	4a53      	ldr	r2, [pc, #332]	; (8001484 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001338:	6a11      	ldr	r1, [r2, #32]
 800133a:	f000 80cb 	beq.w	80014d4 <HAL_RCC_OscConfig.constprop.0+0x298>
 800133e:	f021 0101 	bic.w	r1, r1, #1
 8001342:	6211      	str	r1, [r2, #32]
 8001344:	6a11      	ldr	r1, [r2, #32]
 8001346:	f021 0104 	bic.w	r1, r1, #4
 800134a:	6211      	str	r1, [r2, #32]
 800134c:	e015      	b.n	800137a <HAL_RCC_OscConfig.constprop.0+0x13e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800134e:	680a      	ldr	r2, [r1, #0]
 8001350:	4b4d      	ldr	r3, [pc, #308]	; (8001488 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001352:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001356:	600a      	str	r2, [r1, #0]
 8001358:	681d      	ldr	r5, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135a:	680a      	ldr	r2, [r1, #0]
 800135c:	05d2      	lsls	r2, r2, #23
 800135e:	d4e3      	bmi.n	8001328 <HAL_RCC_OscConfig.constprop.0+0xec>
 8001360:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001362:	1b52      	subs	r2, r2, r5
 8001364:	2a64      	cmp	r2, #100	; 0x64
 8001366:	d9f8      	bls.n	800135a <HAL_RCC_OscConfig.constprop.0+0x11e>
            return HAL_TIMEOUT;
 8001368:	2003      	movs	r0, #3
}
 800136a:	b003      	add	sp, #12
 800136c:	bc70      	pop	{r4, r5, r6}
 800136e:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001370:	4944      	ldr	r1, [pc, #272]	; (8001484 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001372:	6a0a      	ldr	r2, [r1, #32]
 8001374:	f042 0201 	orr.w	r2, r2, #1
 8001378:	620a      	str	r2, [r1, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800137a:	f241 3c88 	movw	ip, #5000	; 0x1388
 800137e:	681d      	ldr	r5, [r3, #0]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001380:	4940      	ldr	r1, [pc, #256]	; (8001484 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001382:	e003      	b.n	800138c <HAL_RCC_OscConfig.constprop.0+0x150>
 8001384:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001386:	1b52      	subs	r2, r2, r5
 8001388:	4562      	cmp	r2, ip
 800138a:	d8ed      	bhi.n	8001368 <HAL_RCC_OscConfig.constprop.0+0x12c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138c:	6a0a      	ldr	r2, [r1, #32]
 800138e:	0796      	lsls	r6, r2, #30
 8001390:	d5f8      	bpl.n	8001384 <HAL_RCC_OscConfig.constprop.0+0x148>
    if (pwrclkchanged == SET)
 8001392:	2c00      	cmp	r4, #0
 8001394:	f040 8098 	bne.w	80014c8 <HAL_RCC_OscConfig.constprop.0+0x28c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001398:	69c3      	ldr	r3, [r0, #28]
 800139a:	b1b3      	cbz	r3, 80013ca <HAL_RCC_OscConfig.constprop.0+0x18e>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800139c:	4939      	ldr	r1, [pc, #228]	; (8001484 <HAL_RCC_OscConfig.constprop.0+0x248>)
 800139e:	684a      	ldr	r2, [r1, #4]
 80013a0:	f002 020c 	and.w	r2, r2, #12
 80013a4:	2a08      	cmp	r2, #8
 80013a6:	f000 8081 	beq.w	80014ac <HAL_RCC_OscConfig.constprop.0+0x270>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	f000 809c 	beq.w	80014e8 <HAL_RCC_OscConfig.constprop.0+0x2ac>
        __HAL_RCC_PLL_DISABLE();
 80013b0:	2000      	movs	r0, #0
 80013b2:	4a36      	ldr	r2, [pc, #216]	; (800148c <HAL_RCC_OscConfig.constprop.0+0x250>)
 80013b4:	4b34      	ldr	r3, [pc, #208]	; (8001488 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 80013b6:	6610      	str	r0, [r2, #96]	; 0x60
 80013b8:	6818      	ldr	r0, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ba:	e003      	b.n	80013c4 <HAL_RCC_OscConfig.constprop.0+0x188>
 80013bc:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013be:	1a12      	subs	r2, r2, r0
 80013c0:	2a02      	cmp	r2, #2
 80013c2:	d8d1      	bhi.n	8001368 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c4:	680a      	ldr	r2, [r1, #0]
 80013c6:	0192      	lsls	r2, r2, #6
 80013c8:	d4f8      	bmi.n	80013bc <HAL_RCC_OscConfig.constprop.0+0x180>
  return HAL_OK;
 80013ca:	2000      	movs	r0, #0
 80013cc:	e7cd      	b.n	800136a <HAL_RCC_OscConfig.constprop.0+0x12e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	03da      	lsls	r2, r3, #15
 80013d2:	f53f af60 	bmi.w	8001296 <HAL_RCC_OscConfig.constprop.0+0x5a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d6:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <HAL_RCC_OscConfig.constprop.0+0x248>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	079b      	lsls	r3, r3, #30
 80013dc:	d528      	bpl.n	8001430 <HAL_RCC_OscConfig.constprop.0+0x1f4>
 80013de:	6903      	ldr	r3, [r0, #16]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d025      	beq.n	8001430 <HAL_RCC_OscConfig.constprop.0+0x1f4>
          return HAL_ERROR;
 80013e4:	2001      	movs	r0, #1
 80013e6:	e7c0      	b.n	800136a <HAL_RCC_OscConfig.constprop.0+0x12e>
      __HAL_RCC_LSI_DISABLE();
 80013e8:	4928      	ldr	r1, [pc, #160]	; (800148c <HAL_RCC_OscConfig.constprop.0+0x250>)
 80013ea:	4b27      	ldr	r3, [pc, #156]	; (8001488 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 80013ec:	f8c1 2480 	str.w	r2, [r1, #1152]	; 0x480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f0:	f1a1 710f 	sub.w	r1, r1, #37486592	; 0x23c0000
 80013f4:	681c      	ldr	r4, [r3, #0]
 80013f6:	f5a1 317c 	sub.w	r1, r1, #258048	; 0x3f000
 80013fa:	e003      	b.n	8001404 <HAL_RCC_OscConfig.constprop.0+0x1c8>
 80013fc:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013fe:	1b12      	subs	r2, r2, r4
 8001400:	2a02      	cmp	r2, #2
 8001402:	d8b1      	bhi.n	8001368 <HAL_RCC_OscConfig.constprop.0+0x12c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001404:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001406:	0792      	lsls	r2, r2, #30
 8001408:	d4f8      	bmi.n	80013fc <HAL_RCC_OscConfig.constprop.0+0x1c0>
 800140a:	e780      	b.n	800130e <HAL_RCC_OscConfig.constprop.0+0xd2>
      __HAL_RCC_PWR_CLK_ENABLE();
 800140c:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 800140e:	2401      	movs	r4, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001414:	61da      	str	r2, [r3, #28]
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	9b00      	ldr	r3, [sp, #0]
 8001420:	e77d      	b.n	800131e <HAL_RCC_OscConfig.constprop.0+0xe2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001422:	6853      	ldr	r3, [r2, #4]
 8001424:	03de      	lsls	r6, r3, #15
 8001426:	f57f af18 	bpl.w	800125a <HAL_RCC_OscConfig.constprop.0+0x1e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <HAL_RCC_OscConfig.constprop.0+0x248>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	e723      	b.n	8001278 <HAL_RCC_OscConfig.constprop.0+0x3c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001430:	4a14      	ldr	r2, [pc, #80]	; (8001484 <HAL_RCC_OscConfig.constprop.0+0x248>)
 8001432:	6941      	ldr	r1, [r0, #20]
 8001434:	6813      	ldr	r3, [r2, #0]
 8001436:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800143a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	6803      	ldr	r3, [r0, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001442:	e742      	b.n	80012ca <HAL_RCC_OscConfig.constprop.0+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001444:	490f      	ldr	r1, [pc, #60]	; (8001484 <HAL_RCC_OscConfig.constprop.0+0x248>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001446:	f241 3588 	movw	r5, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800144a:	6a0a      	ldr	r2, [r1, #32]
 800144c:	f022 0201 	bic.w	r2, r2, #1
 8001450:	620a      	str	r2, [r1, #32]
 8001452:	6a0a      	ldr	r2, [r1, #32]
 8001454:	f022 0204 	bic.w	r2, r2, #4
 8001458:	620a      	str	r2, [r1, #32]
 800145a:	681e      	ldr	r6, [r3, #0]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145c:	e003      	b.n	8001466 <HAL_RCC_OscConfig.constprop.0+0x22a>
 800145e:	681a      	ldr	r2, [r3, #0]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001460:	1b92      	subs	r2, r2, r6
 8001462:	42aa      	cmp	r2, r5
 8001464:	d880      	bhi.n	8001368 <HAL_RCC_OscConfig.constprop.0+0x12c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001466:	6a0a      	ldr	r2, [r1, #32]
 8001468:	0792      	lsls	r2, r2, #30
 800146a:	d4f8      	bmi.n	800145e <HAL_RCC_OscConfig.constprop.0+0x222>
    if (pwrclkchanged == SET)
 800146c:	2c00      	cmp	r4, #0
 800146e:	d093      	beq.n	8001398 <HAL_RCC_OscConfig.constprop.0+0x15c>
 8001470:	e02a      	b.n	80014c8 <HAL_RCC_OscConfig.constprop.0+0x28c>
        __HAL_RCC_HSI_DISABLE();
 8001472:	4906      	ldr	r1, [pc, #24]	; (800148c <HAL_RCC_OscConfig.constprop.0+0x250>)
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <HAL_RCC_OscConfig.constprop.0+0x24c>)
 8001476:	600a      	str	r2, [r1, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001478:	f1a1 710f 	sub.w	r1, r1, #37486592	; 0x23c0000
 800147c:	681c      	ldr	r4, [r3, #0]
 800147e:	f5a1 317c 	sub.w	r1, r1, #258048	; 0x3f000
 8001482:	e00e      	b.n	80014a2 <HAL_RCC_OscConfig.constprop.0+0x266>
 8001484:	40021000 	.word	0x40021000
 8001488:	20000200 	.word	0x20000200
 800148c:	42420000 	.word	0x42420000
 8001490:	20000000 	.word	0x20000000
 8001494:	40007000 	.word	0x40007000
 8001498:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800149a:	1b12      	subs	r2, r2, r4
 800149c:	2a02      	cmp	r2, #2
 800149e:	f63f af63 	bhi.w	8001368 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a2:	680a      	ldr	r2, [r1, #0]
 80014a4:	0795      	lsls	r5, r2, #30
 80014a6:	d4f7      	bmi.n	8001498 <HAL_RCC_OscConfig.constprop.0+0x25c>
 80014a8:	6803      	ldr	r3, [r0, #0]
 80014aa:	e70e      	b.n	80012ca <HAL_RCC_OscConfig.constprop.0+0x8e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d019      	beq.n	80014e4 <HAL_RCC_OscConfig.constprop.0+0x2a8>
        pll_config = RCC->CFGR;
 80014b0:	684b      	ldr	r3, [r1, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b2:	6a02      	ldr	r2, [r0, #32]
 80014b4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80014b8:	4291      	cmp	r1, r2
 80014ba:	d193      	bne.n	80013e4 <HAL_RCC_OscConfig.constprop.0+0x1a8>
 80014bc:	6a42      	ldr	r2, [r0, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014be:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d081      	beq.n	80013ca <HAL_RCC_OscConfig.constprop.0+0x18e>
 80014c6:	e78d      	b.n	80013e4 <HAL_RCC_OscConfig.constprop.0+0x1a8>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c8:	4a1e      	ldr	r2, [pc, #120]	; (8001544 <HAL_RCC_OscConfig.constprop.0+0x308>)
 80014ca:	69d3      	ldr	r3, [r2, #28]
 80014cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014d0:	61d3      	str	r3, [r2, #28]
 80014d2:	e761      	b.n	8001398 <HAL_RCC_OscConfig.constprop.0+0x15c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d4:	f041 0104 	orr.w	r1, r1, #4
 80014d8:	6211      	str	r1, [r2, #32]
 80014da:	6a11      	ldr	r1, [r2, #32]
 80014dc:	f041 0101 	orr.w	r1, r1, #1
 80014e0:	6211      	str	r1, [r2, #32]
 80014e2:	e74a      	b.n	800137a <HAL_RCC_OscConfig.constprop.0+0x13e>
        return HAL_ERROR;
 80014e4:	4618      	mov	r0, r3
 80014e6:	e740      	b.n	800136a <HAL_RCC_OscConfig.constprop.0+0x12e>
        __HAL_RCC_PLL_DISABLE();
 80014e8:	2400      	movs	r4, #0
 80014ea:	4a17      	ldr	r2, [pc, #92]	; (8001548 <HAL_RCC_OscConfig.constprop.0+0x30c>)
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_RCC_OscConfig.constprop.0+0x310>)
 80014ee:	6614      	str	r4, [r2, #96]	; 0x60
 80014f0:	681c      	ldr	r4, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f2:	e004      	b.n	80014fe <HAL_RCC_OscConfig.constprop.0+0x2c2>
 80014f4:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f6:	1b12      	subs	r2, r2, r4
 80014f8:	2a02      	cmp	r2, #2
 80014fa:	f63f af35 	bhi.w	8001368 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014fe:	680a      	ldr	r2, [r1, #0]
 8001500:	0195      	lsls	r5, r2, #6
 8001502:	d4f7      	bmi.n	80014f4 <HAL_RCC_OscConfig.constprop.0+0x2b8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001504:	6a02      	ldr	r2, [r0, #32]
 8001506:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800150a:	d105      	bne.n	8001518 <HAL_RCC_OscConfig.constprop.0+0x2dc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800150c:	684c      	ldr	r4, [r1, #4]
 800150e:	6885      	ldr	r5, [r0, #8]
 8001510:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
 8001514:	432c      	orrs	r4, r5
 8001516:	604c      	str	r4, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001518:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800151a:	490a      	ldr	r1, [pc, #40]	; (8001544 <HAL_RCC_OscConfig.constprop.0+0x308>)
 800151c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800151e:	6848      	ldr	r0, [r1, #4]
 8001520:	4322      	orrs	r2, r4
 8001522:	f420 1074 	bic.w	r0, r0, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8001526:	4c08      	ldr	r4, [pc, #32]	; (8001548 <HAL_RCC_OscConfig.constprop.0+0x30c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001528:	4302      	orrs	r2, r0
 800152a:	604a      	str	r2, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800152c:	6625      	str	r5, [r4, #96]	; 0x60
 800152e:	6818      	ldr	r0, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001530:	e004      	b.n	800153c <HAL_RCC_OscConfig.constprop.0+0x300>
 8001532:	681a      	ldr	r2, [r3, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001534:	1a12      	subs	r2, r2, r0
 8001536:	2a02      	cmp	r2, #2
 8001538:	f63f af16 	bhi.w	8001368 <HAL_RCC_OscConfig.constprop.0+0x12c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800153c:	680a      	ldr	r2, [r1, #0]
 800153e:	0194      	lsls	r4, r2, #6
 8001540:	d5f7      	bpl.n	8001532 <HAL_RCC_OscConfig.constprop.0+0x2f6>
 8001542:	e742      	b.n	80013ca <HAL_RCC_OscConfig.constprop.0+0x18e>
 8001544:	40021000 	.word	0x40021000
 8001548:	42420000 	.word	0x42420000
 800154c:	20000200 	.word	0x20000200

08001550 <TIM_Base_SetConfig.constprop.0>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001550:	4a22      	ldr	r2, [pc, #136]	; (80015dc <TIM_Base_SetConfig.constprop.0+0x8c>)
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
 8001552:	b410      	push	{r4}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001554:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 8001556:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001558:	d02b      	beq.n	80015b2 <TIM_Base_SetConfig.constprop.0+0x62>
 800155a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800155e:	d015      	beq.n	800158c <TIM_Base_SetConfig.constprop.0+0x3c>
 8001560:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001564:	4290      	cmp	r0, r2
 8001566:	d011      	beq.n	800158c <TIM_Base_SetConfig.constprop.0+0x3c>
 8001568:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800156c:	4290      	cmp	r0, r2
 800156e:	d00d      	beq.n	800158c <TIM_Base_SetConfig.constprop.0+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001570:	4a1b      	ldr	r2, [pc, #108]	; (80015e0 <TIM_Base_SetConfig.constprop.0+0x90>)
 8001572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001576:	69d4      	ldr	r4, [r2, #28]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001578:	6911      	ldr	r1, [r2, #16]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800157a:	6892      	ldr	r2, [r2, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800157c:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 800157e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001580:	62c1      	str	r1, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001582:	6282      	str	r2, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001584:	2301      	movs	r3, #1
}
 8001586:	bc10      	pop	{r4}
  TIMx->EGR = TIM_EGR_UG;
 8001588:	6143      	str	r3, [r0, #20]
}
 800158a:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <TIM_Base_SetConfig.constprop.0+0x90>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800158e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001592:	68d1      	ldr	r1, [r2, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001594:	6954      	ldr	r4, [r2, #20]
    tmpcr1 |= Structure->CounterMode;
 8001596:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800159c:	69d1      	ldr	r1, [r2, #28]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800159e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80015a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015a4:	430b      	orrs	r3, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 80015a6:	6911      	ldr	r1, [r2, #16]
  TIMx->PSC = Structure->Prescaler;
 80015a8:	6892      	ldr	r2, [r2, #8]
  TIMx->CR1 = tmpcr1;
 80015aa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80015ac:	62c1      	str	r1, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80015ae:	6282      	str	r2, [r0, #40]	; 0x28
 80015b0:	e7e8      	b.n	8001584 <TIM_Base_SetConfig.constprop.0+0x34>
    tmpcr1 |= Structure->CounterMode;
 80015b2:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <TIM_Base_SetConfig.constprop.0+0x90>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80015b8:	68d4      	ldr	r4, [r2, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015ba:	6951      	ldr	r1, [r2, #20]
    tmpcr1 |= Structure->CounterMode;
 80015bc:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 80015be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015c2:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80015c4:	69d1      	ldr	r1, [r2, #28]
 80015c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015ca:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80015cc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80015ce:	6913      	ldr	r3, [r2, #16]
 80015d0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80015d2:	6893      	ldr	r3, [r2, #8]
 80015d4:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80015d6:	6993      	ldr	r3, [r2, #24]
 80015d8:	6303      	str	r3, [r0, #48]	; 0x30
 80015da:	e7d3      	b.n	8001584 <TIM_Base_SetConfig.constprop.0+0x34>
 80015dc:	40012c00 	.word	0x40012c00
 80015e0:	20000200 	.word	0x20000200

080015e4 <HAL_NVIC_SetPriority.constprop.0>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <HAL_NVIC_SetPriority.constprop.0+0x54>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	f1c3 0c07 	rsb	ip, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f0:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f2:	f1bc 0f04 	cmp.w	ip, #4
 80015f6:	bf28      	it	cs
 80015f8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fc:	2a06      	cmp	r2, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fe:	f04f 32ff 	mov.w	r2, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	bf98      	it	ls
 8001604:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001606:	fa02 f20c 	lsl.w	r2, r2, ip
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	bf88      	it	hi
 800160c:	3b03      	subhi	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160e:	ea21 0102 	bic.w	r1, r1, r2
 8001612:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001614:	1c43      	adds	r3, r0, #1
 8001616:	d008      	beq.n	800162a <HAL_NVIC_SetPriority.constprop.0+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001618:	0109      	lsls	r1, r1, #4
 800161a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800161e:	b2c9      	uxtb	r1, r1
 8001620:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001624:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8001628:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162a:	4b03      	ldr	r3, [pc, #12]	; (8001638 <HAL_NVIC_SetPriority.constprop.0+0x54>)
 800162c:	0109      	lsls	r1, r1, #4
 800162e:	b2c9      	uxtb	r1, r1
 8001630:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <LCD_Line.constprop.0>:
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 800163c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001640:	4686      	mov	lr, r0
 8001642:	b0bb      	sub	sp, #236	; 0xec
	int deltaX = abs(x2 - x1);
 8001644:	9202      	str	r2, [sp, #8]
 8001646:	eba2 020e 	sub.w	r2, r2, lr
 800164a:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 800164e:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
	int deltaY = abs(y2 - y1);
 8001652:	f5c1 729f 	rsb	r2, r1, #318	; 0x13e
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8001656:	9135      	str	r1, [sp, #212]	; 0xd4
	int deltaX = abs(x2 - x1);
 8001658:	9537      	str	r5, [sp, #220]	; 0xdc
	int deltaY = abs(y2 - y1);
 800165a:	460d      	mov	r5, r1
 800165c:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 8001660:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
	int signX = x1 < x2 ? 1 : -1;
 8001664:	9a02      	ldr	r2, [sp, #8]
	int deltaY = abs(y2 - y1);
 8001666:	9134      	str	r1, [sp, #208]	; 0xd0
	int signX = x1 < x2 ? 1 : -1;
 8001668:	4572      	cmp	r2, lr
 800166a:	bf8c      	ite	hi
 800166c:	2201      	movhi	r2, #1
 800166e:	f04f 32ff 	movls.w	r2, #4294967295
	int signY = y1 < y2 ? 1 : -1;
 8001672:	f5b5 7f9f 	cmp.w	r5, #318	; 0x13e
	int signX = x1 < x2 ? 1 : -1;
 8001676:	9238      	str	r2, [sp, #224]	; 0xe0
	int signY = y1 < y2 ? 1 : -1;
 8001678:	bf34      	ite	cc
 800167a:	2201      	movcc	r2, #1
 800167c:	f04f 32ff 	movcs.w	r2, #4294967295
 8001680:	9239      	str	r2, [sp, #228]	; 0xe4
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8001682:	f3c3 2285 	ubfx	r2, r3, #10, #6
 8001686:	f3c3 41c4 	ubfx	r1, r3, #19, #5
 800168a:	0152      	lsls	r2, r2, #5
 800168c:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001690:	f3c1 1110 	ubfx	r1, r1, #4, #17
 8001694:	9136      	str	r1, [sp, #216]	; 0xd8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001696:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800169a:	f3c2 3180 	ubfx	r1, r2, #14, #1
 800169e:	f04f 6b80 	mov.w	fp, #67108864	; 0x4000000
 80016a2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80016a6:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 80016aa:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80016ae:	2602      	movs	r6, #2
 80016b0:	9103      	str	r1, [sp, #12]
 80016b2:	f3c2 3140 	ubfx	r1, r2, #13, #1
 80016b6:	9104      	str	r1, [sp, #16]
 80016b8:	f3c2 3100 	ubfx	r1, r2, #12, #1
 80016bc:	9105      	str	r1, [sp, #20]
 80016be:	f3c2 21c0 	ubfx	r1, r2, #11, #1
 80016c2:	9106      	str	r1, [sp, #24]
 80016c4:	f3c2 2180 	ubfx	r1, r2, #10, #1
 80016c8:	9107      	str	r1, [sp, #28]
 80016ca:	f3c2 2140 	ubfx	r1, r2, #9, #1
 80016ce:	9108      	str	r1, [sp, #32]
 80016d0:	f3c2 2100 	ubfx	r1, r2, #8, #1
 80016d4:	9109      	str	r1, [sp, #36]	; 0x24
 80016d6:	f3c2 11c0 	ubfx	r1, r2, #7, #1
 80016da:	910a      	str	r1, [sp, #40]	; 0x28
 80016dc:	f3c2 1180 	ubfx	r1, r2, #6, #1
 80016e0:	f3c2 1240 	ubfx	r2, r2, #5, #1
 80016e4:	920c      	str	r2, [sp, #48]	; 0x30
 80016e6:	f3c3 12c0 	ubfx	r2, r3, #7, #1
 80016ea:	920d      	str	r2, [sp, #52]	; 0x34
 80016ec:	f3c3 1280 	ubfx	r2, r3, #6, #1
 80016f0:	920e      	str	r2, [sp, #56]	; 0x38
 80016f2:	f3c3 1240 	ubfx	r2, r3, #5, #1
 80016f6:	920f      	str	r2, [sp, #60]	; 0x3c
 80016f8:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80016fc:	9210      	str	r2, [sp, #64]	; 0x40
 80016fe:	0a2a      	lsrs	r2, r5, #8
 8001700:	9225      	str	r2, [sp, #148]	; 0x94
 8001702:	0bea      	lsrs	r2, r5, #15
 8001704:	9233      	str	r2, [sp, #204]	; 0xcc
 8001706:	0baa      	lsrs	r2, r5, #14
 8001708:	9231      	str	r2, [sp, #196]	; 0xc4
 800170a:	0b6a      	lsrs	r2, r5, #13
 800170c:	922f      	str	r2, [sp, #188]	; 0xbc
 800170e:	0b2a      	lsrs	r2, r5, #12
 8001710:	922d      	str	r2, [sp, #180]	; 0xb4
 8001712:	0aea      	lsrs	r2, r5, #11
 8001714:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001718:	922b      	str	r2, [sp, #172]	; 0xac
 800171a:	0aaa      	lsrs	r2, r5, #10
 800171c:	9311      	str	r3, [sp, #68]	; 0x44
 800171e:	9229      	str	r2, [sp, #164]	; 0xa4
 8001720:	f005 0301 	and.w	r3, r5, #1
 8001724:	0a6a      	lsrs	r2, r5, #9
 8001726:	910b      	str	r1, [sp, #44]	; 0x2c
 8001728:	9227      	str	r2, [sp, #156]	; 0x9c
	int error = deltaX - deltaY;
 800172a:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 800172c:	9323      	str	r3, [sp, #140]	; 0x8c
 800172e:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8001732:	9324      	str	r3, [sp, #144]	; 0x90
 8001734:	ea4f 33de 	mov.w	r3, lr, lsr #15
 8001738:	9332      	str	r3, [sp, #200]	; 0xc8
 800173a:	ea4f 339e 	mov.w	r3, lr, lsr #14
 800173e:	9330      	str	r3, [sp, #192]	; 0xc0
 8001740:	ea4f 335e 	mov.w	r3, lr, lsr #13
 8001744:	932e      	str	r3, [sp, #184]	; 0xb8
 8001746:	ea4f 331e 	mov.w	r3, lr, lsr #12
 800174a:	932c      	str	r3, [sp, #176]	; 0xb0
 800174c:	ea4f 23de 	mov.w	r3, lr, lsr #11
 8001750:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8001752:	932a      	str	r3, [sp, #168]	; 0xa8
 8001754:	ea4f 239e 	mov.w	r3, lr, lsr #10
 8001758:	9328      	str	r3, [sp, #160]	; 0xa0
 800175a:	ea4f 235e 	mov.w	r3, lr, lsr #9
 800175e:	1a52      	subs	r2, r2, r1
 8001760:	9326      	str	r3, [sp, #152]	; 0x98
 8001762:	fa5f f38e 	uxtb.w	r3, lr
 8001766:	9212      	str	r2, [sp, #72]	; 0x48
 8001768:	9320      	str	r3, [sp, #128]	; 0x80
 800176a:	b2ea      	uxtb	r2, r5
 800176c:	f00e 0301 	and.w	r3, lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001770:	f8df a358 	ldr.w	sl, [pc, #856]	; 8001acc <LCD_Line.constprop.0+0x490>
 8001774:	f8df 9358 	ldr.w	r9, [pc, #856]	; 8001ad0 <LCD_Line.constprop.0+0x494>
 8001778:	f8df 8358 	ldr.w	r8, [pc, #856]	; 8001ad4 <LCD_Line.constprop.0+0x498>
 800177c:	9221      	str	r2, [sp, #132]	; 0x84
 800177e:	9322      	str	r3, [sp, #136]	; 0x88
 8001780:	f8cd e004 	str.w	lr, [sp, #4]
	data[0] = x1 >> 8;
 8001784:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
 8001788:	f8ca c010 	str.w	ip, [sl, #16]
 800178c:	f8ca b010 	str.w	fp, [sl, #16]
 8001790:	f8c9 0010 	str.w	r0, [r9, #16]
 8001794:	f8c9 c010 	str.w	ip, [r9, #16]
 8001798:	f8c8 4010 	str.w	r4, [r8, #16]
 800179c:	f8c8 7010 	str.w	r7, [r8, #16]
 80017a0:	f8c8 0010 	str.w	r0, [r8, #16]
 80017a4:	f8c8 c010 	str.w	ip, [r8, #16]
 80017a8:	9513      	str	r5, [sp, #76]	; 0x4c
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80017aa:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 80017ac:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 80017b0:	b2ab      	uxth	r3, r5
 80017b2:	9315      	str	r3, [sp, #84]	; 0x54
 80017b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80017b8:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017be:	f8c8 e010 	str.w	lr, [r8, #16]
 80017c2:	f8c8 1010 	str.w	r1, [r8, #16]
 80017c6:	f8c9 7010 	str.w	r7, [r9, #16]
 80017ca:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80017ce:	f8c9 2010 	str.w	r2, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017d2:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80017d6:	2340      	movs	r3, #64	; 0x40
 80017d8:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80017e0:	f8c9 3010 	str.w	r3, [r9, #16]
 80017e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80017e8:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017ec:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80017f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017f4:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80017f8:	f8ca 6010 	str.w	r6, [sl, #16]
 80017fc:	f8ca 3010 	str.w	r3, [sl, #16]
 8001800:	2301      	movs	r3, #1
 8001802:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001806:	f8ca b010 	str.w	fp, [sl, #16]
 800180a:	f8c9 0010 	str.w	r0, [r9, #16]
 800180e:	f8c9 c010 	str.w	ip, [r9, #16]
 8001812:	f8c8 4010 	str.w	r4, [r8, #16]
 8001816:	f8c8 7010 	str.w	r7, [r8, #16]
 800181a:	f8c8 0010 	str.w	r0, [r8, #16]
 800181e:	f8c8 c010 	str.w	ip, [r8, #16]
 8001822:	f8c8 e010 	str.w	lr, [r8, #16]
 8001826:	f8c8 1010 	str.w	r1, [r8, #16]
 800182a:	2d00      	cmp	r5, #0
 800182c:	f000 8560 	beq.w	80022f0 <LCD_Line.constprop.0+0xcb4>
    GPIOx->BSRR = GPIO_Pin;
 8001830:	2304      	movs	r3, #4
 8001832:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001836:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8001838:	f013 0301 	ands.w	r3, r3, #1
 800183c:	9316      	str	r3, [sp, #88]	; 0x58
 800183e:	bf1c      	itt	ne
 8001840:	2308      	movne	r3, #8
 8001842:	f8c9 3010 	strne.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001846:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001848:	bf08      	it	eq
 800184a:	f8c9 4010 	streq.w	r4, [r9, #16]
 800184e:	f013 0301 	ands.w	r3, r3, #1
 8001852:	9317      	str	r3, [sp, #92]	; 0x5c
 8001854:	bf0c      	ite	eq
 8001856:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800185a:	2310      	movne	r3, #16
 800185c:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001860:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8001862:	f013 0301 	ands.w	r3, r3, #1
 8001866:	9318      	str	r3, [sp, #96]	; 0x60
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001868:	bf0c      	ite	eq
 800186a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800186e:	2320      	movne	r3, #32
 8001870:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001874:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8001876:	f013 0301 	ands.w	r3, r3, #1
 800187a:	9319      	str	r3, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800187c:	bf0c      	ite	eq
 800187e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001882:	2340      	movne	r3, #64	; 0x40
 8001884:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001888:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800188a:	f013 0301 	ands.w	r3, r3, #1
 800188e:	9314      	str	r3, [sp, #80]	; 0x50
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001890:	bf0c      	ite	eq
 8001892:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001896:	2380      	movne	r3, #128	; 0x80
 8001898:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800189c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800189e:	f013 0301 	ands.w	r3, r3, #1
 80018a2:	931a      	str	r3, [sp, #104]	; 0x68
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018a4:	bf0c      	ite	eq
 80018a6:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80018aa:	2310      	movne	r3, #16
 80018ac:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80018b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80018b2:	f013 0301 	ands.w	r3, r3, #1
 80018b6:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018b8:	bf0c      	ite	eq
 80018ba:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80018be:	2320      	movne	r3, #32
 80018c0:	f8c8 3010 	str.w	r3, [r8, #16]
 80018c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018c8:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80018cc:	f8ca 6010 	str.w	r6, [sl, #16]
 80018d0:	f8ca 3010 	str.w	r3, [sl, #16]
 80018d4:	2301      	movs	r3, #1
 80018d6:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80018de:	f8ca b010 	str.w	fp, [sl, #16]
 80018e2:	f8c9 0010 	str.w	r0, [r9, #16]
 80018e6:	f8c9 c010 	str.w	ip, [r9, #16]
 80018ea:	f8c8 4010 	str.w	r4, [r8, #16]
 80018ee:	f8c8 7010 	str.w	r7, [r8, #16]
 80018f2:	f8c8 0010 	str.w	r0, [r8, #16]
 80018f6:	f8c8 c010 	str.w	ip, [r8, #16]
 80018fa:	f8c8 3010 	str.w	r3, [r8, #16]
 80018fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001902:	f8c8 3010 	str.w	r3, [r8, #16]
 8001906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001908:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800190a:	fa1f fe83 	uxth.w	lr, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800190e:	09db      	lsrs	r3, r3, #7
 8001910:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIOx->BSRR = GPIO_Pin;
 8001912:	bf16      	itet	ne
 8001914:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001916:	f8c9 7010 	streq.w	r7, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 800191a:	f8c9 3010 	strne.w	r3, [r9, #16]
 800191e:	f3ce 1380 	ubfx	r3, lr, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001922:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8001926:	931d      	str	r3, [sp, #116]	; 0x74
 8001928:	bf16      	itet	ne
 800192a:	2308      	movne	r3, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800192c:	f8c9 4010 	streq.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001930:	f8c9 3010 	strne.w	r3, [r9, #16]
 8001934:	f3ce 1340 	ubfx	r3, lr, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001938:	f01e 0f20 	tst.w	lr, #32
 800193c:	931e      	str	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800193e:	bf0c      	ite	eq
 8001940:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001944:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001946:	f01e 0f10 	tst.w	lr, #16
 800194a:	f8c9 3010 	str.w	r3, [r9, #16]
 800194e:	f3ce 1300 	ubfx	r3, lr, #4, #1
 8001952:	931c      	str	r3, [sp, #112]	; 0x70
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001954:	bf0c      	ite	eq
 8001956:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800195a:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800195c:	f01e 0f08 	tst.w	lr, #8
 8001960:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001964:	bf0c      	ite	eq
 8001966:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800196a:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800196c:	f01e 0f04 	tst.w	lr, #4
 8001970:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001974:	bf0c      	ite	eq
 8001976:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800197a:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800197c:	f01e 0f02 	tst.w	lr, #2
 8001980:	f3ce 01c0 	ubfx	r1, lr, #3, #1
 8001984:	f3ce 0280 	ubfx	r2, lr, #2, #1
 8001988:	f8c9 3010 	str.w	r3, [r9, #16]
 800198c:	f3ce 0340 	ubfx	r3, lr, #1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001990:	bf0c      	ite	eq
 8001992:	f44f 1e80 	moveq.w	lr, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001996:	f04f 0e10 	movne.w	lr, #16
 800199a:	f8c8 e010 	str.w	lr, [r8, #16]
 800199e:	fa1f fe85 	uxth.w	lr, r5
 80019a2:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80019a6:	2d00      	cmp	r5, #0
 80019a8:	f040 849c 	bne.w	80022e4 <LCD_Line.constprop.0+0xca8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019ac:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 80019b0:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80019b4:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80019b8:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019bc:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80019c0:	f8ca 6010 	str.w	r6, [sl, #16]
 80019c4:	f8ca 5010 	str.w	r5, [sl, #16]
 80019c8:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019cc:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 80019d0:	f8ca b010 	str.w	fp, [sl, #16]
 80019d4:	f8c9 0010 	str.w	r0, [r9, #16]
 80019d8:	f8c9 c010 	str.w	ip, [r9, #16]
 80019dc:	f8c8 4010 	str.w	r4, [r8, #16]
 80019e0:	f8c8 7010 	str.w	r7, [r8, #16]
 80019e4:	f8c8 0010 	str.w	r0, [r8, #16]
 80019e8:	f8c8 c010 	str.w	ip, [r8, #16]
 80019ec:	f8c8 e010 	str.w	lr, [r8, #16]
 80019f0:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80019f4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80019f6:	f8c8 e010 	str.w	lr, [r8, #16]
 80019fa:	2d00      	cmp	r5, #0
 80019fc:	f000 846e 	beq.w	80022dc <LCD_Line.constprop.0+0xca0>
    GPIOx->BSRR = GPIO_Pin;
 8001a00:	f04f 0e04 	mov.w	lr, #4
 8001a04:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001a08:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8001a0a:	2d00      	cmp	r5, #0
 8001a0c:	f040 8460 	bne.w	80022d0 <LCD_Line.constprop.0+0xc94>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a10:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001a14:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8001a16:	2d00      	cmp	r5, #0
 8001a18:	f040 8454 	bne.w	80022c4 <LCD_Line.constprop.0+0xc88>
 8001a1c:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001a20:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001a24:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8001a26:	2d00      	cmp	r5, #0
 8001a28:	f040 8446 	bne.w	80022b8 <LCD_Line.constprop.0+0xc7c>
 8001a2c:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001a30:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001a34:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8001a36:	2d00      	cmp	r5, #0
 8001a38:	f040 8438 	bne.w	80022ac <LCD_Line.constprop.0+0xc70>
 8001a3c:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 8001a40:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001a44:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8001a46:	2d00      	cmp	r5, #0
 8001a48:	f040 842a 	bne.w	80022a0 <LCD_Line.constprop.0+0xc64>
 8001a4c:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
 8001a50:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001a54:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8001a56:	2d00      	cmp	r5, #0
 8001a58:	f040 841c 	bne.w	8002294 <LCD_Line.constprop.0+0xc58>
 8001a5c:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001a60:	f8c8 e010 	str.w	lr, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001a64:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8001a66:	2d00      	cmp	r5, #0
 8001a68:	f040 840e 	bne.w	8002288 <LCD_Line.constprop.0+0xc4c>
 8001a6c:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001a70:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001a74:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001a78:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a7c:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001a80:	f8ca 6010 	str.w	r6, [sl, #16]
 8001a84:	f8ca 5010 	str.w	r5, [sl, #16]
 8001a88:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a8c:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001a90:	f8ca b010 	str.w	fp, [sl, #16]
 8001a94:	f8c9 0010 	str.w	r0, [r9, #16]
 8001a98:	f8c9 c010 	str.w	ip, [r9, #16]
 8001a9c:	f8c8 4010 	str.w	r4, [r8, #16]
 8001aa0:	f8c8 7010 	str.w	r7, [r8, #16]
 8001aa4:	f8c8 0010 	str.w	r0, [r8, #16]
 8001aa8:	f8c8 c010 	str.w	ip, [r8, #16]
 8001aac:	f8c8 e010 	str.w	lr, [r8, #16]
 8001ab0:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001ab4:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8001ab6:	f8c8 e010 	str.w	lr, [r8, #16]
 8001aba:	2d00      	cmp	r5, #0
 8001abc:	f000 83e1 	beq.w	8002282 <LCD_Line.constprop.0+0xc46>
    GPIOx->BSRR = GPIO_Pin;
 8001ac0:	f04f 0e04 	mov.w	lr, #4
 8001ac4:	f8c9 e010 	str.w	lr, [r9, #16]
 8001ac8:	e006      	b.n	8001ad8 <LCD_Line.constprop.0+0x49c>
 8001aca:	bf00      	nop
 8001acc:	40010c00 	.word	0x40010c00
 8001ad0:	40010800 	.word	0x40010800
 8001ad4:	40011000 	.word	0x40011000
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001ad8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8001ada:	2d00      	cmp	r5, #0
 8001adc:	f040 83cc 	bne.w	8002278 <LCD_Line.constprop.0+0xc3c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ae0:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001ae4:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8001ae6:	2d00      	cmp	r5, #0
 8001ae8:	f040 83c1 	bne.w	800226e <LCD_Line.constprop.0+0xc32>
 8001aec:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001af0:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001af4:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8001af6:	2d00      	cmp	r5, #0
 8001af8:	f040 83b4 	bne.w	8002264 <LCD_Line.constprop.0+0xc28>
 8001afc:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001b00:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001b04:	2900      	cmp	r1, #0
 8001b06:	f040 83a9 	bne.w	800225c <LCD_Line.constprop.0+0xc20>
 8001b0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001b0e:	f8c9 1010 	str.w	r1, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001b12:	2a00      	cmp	r2, #0
 8001b14:	f040 839e 	bne.w	8002254 <LCD_Line.constprop.0+0xc18>
 8001b18:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001b1c:	f8c9 2010 	str.w	r2, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f040 8393 	bne.w	800224c <LCD_Line.constprop.0+0xc10>
 8001b26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b2a:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001b2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f040 8387 	bne.w	8002244 <LCD_Line.constprop.0+0xc08>
 8001b36:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b3a:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001b42:	9d32      	ldr	r5, [sp, #200]	; 0xc8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b44:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001b48:	f8ca 6010 	str.w	r6, [sl, #16]
 8001b4c:	f8ca 3010 	str.w	r3, [sl, #16]
 8001b50:	b2ab      	uxth	r3, r5
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b52:	f8ca c010 	str.w	ip, [sl, #16]
 8001b56:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001b5a:	f8ca b010 	str.w	fp, [sl, #16]
 8001b5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b62:	f8c9 0010 	str.w	r0, [r9, #16]
 8001b66:	f8c9 c010 	str.w	ip, [r9, #16]
 8001b6a:	f8c8 4010 	str.w	r4, [r8, #16]
 8001b6e:	f8c8 7010 	str.w	r7, [r8, #16]
 8001b72:	f8c8 0010 	str.w	r0, [r8, #16]
 8001b76:	f8c8 c010 	str.w	ip, [r8, #16]
 8001b7a:	931c      	str	r3, [sp, #112]	; 0x70
    GPIOx->BSRR = GPIO_Pin;
 8001b7c:	2310      	movs	r3, #16
	data[0] = y1 >> 8;
 8001b7e:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b82:	f8c8 1010 	str.w	r1, [r8, #16]
 8001b86:	f8c8 2010 	str.w	r2, [r8, #16]
 8001b8a:	f8c9 7010 	str.w	r7, [r9, #16]
 8001b8e:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001b92:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b96:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b9a:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001b9e:	2340      	movs	r3, #64	; 0x40
 8001ba0:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ba4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001ba8:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001bac:	2310      	movs	r3, #16
 8001bae:	f8c8 3010 	str.w	r3, [r8, #16]
 8001bb2:	2320      	movs	r3, #32
 8001bb4:	f8c8 3010 	str.w	r3, [r8, #16]
 8001bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bbc:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001bc0:	f8ca 6010 	str.w	r6, [sl, #16]
 8001bc4:	f8ca 3010 	str.w	r3, [sl, #16]
 8001bc8:	2301      	movs	r3, #1
 8001bca:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bce:	f8ca b010 	str.w	fp, [sl, #16]
 8001bd2:	f8c9 0010 	str.w	r0, [r9, #16]
 8001bd6:	f8c9 c010 	str.w	ip, [r9, #16]
 8001bda:	f8c8 4010 	str.w	r4, [r8, #16]
 8001bde:	f8c8 7010 	str.w	r7, [r8, #16]
 8001be2:	f8c8 0010 	str.w	r0, [r8, #16]
 8001be6:	f8c8 c010 	str.w	ip, [r8, #16]
 8001bea:	f8c8 1010 	str.w	r1, [r8, #16]
 8001bee:	f8c8 2010 	str.w	r2, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001bf2:	2d00      	cmp	r5, #0
 8001bf4:	f000 8323 	beq.w	800223e <LCD_Line.constprop.0+0xc02>
    GPIOx->BSRR = GPIO_Pin;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001bfe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8001c00:	f013 0301 	ands.w	r3, r3, #1
 8001c04:	931b      	str	r3, [sp, #108]	; 0x6c
 8001c06:	bf1c      	itt	ne
 8001c08:	2308      	movne	r3, #8
 8001c0a:	f8c9 3010 	strne.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001c0e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c10:	bf08      	it	eq
 8001c12:	f8c9 4010 	streq.w	r4, [r9, #16]
 8001c16:	f013 0301 	ands.w	r3, r3, #1
 8001c1a:	931a      	str	r3, [sp, #104]	; 0x68
 8001c1c:	bf0c      	ite	eq
 8001c1e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001c22:	2310      	movne	r3, #16
 8001c24:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001c28:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001c2a:	f013 0301 	ands.w	r3, r3, #1
 8001c2e:	9319      	str	r3, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c30:	bf0c      	ite	eq
 8001c32:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001c36:	2320      	movne	r3, #32
 8001c38:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001c3c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8001c3e:	f013 0301 	ands.w	r3, r3, #1
 8001c42:	9318      	str	r3, [sp, #96]	; 0x60
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c44:	bf0c      	ite	eq
 8001c46:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001c4a:	2340      	movne	r3, #64	; 0x40
 8001c4c:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001c50:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001c52:	f013 0301 	ands.w	r3, r3, #1
 8001c56:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c58:	bf0c      	ite	eq
 8001c5a:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001c5e:	2380      	movne	r3, #128	; 0x80
 8001c60:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001c64:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001c66:	f013 0301 	ands.w	r3, r3, #1
 8001c6a:	9316      	str	r3, [sp, #88]	; 0x58
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c6c:	bf0c      	ite	eq
 8001c6e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001c72:	2310      	movne	r3, #16
 8001c74:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001c78:	f01e 0301 	ands.w	r3, lr, #1
 8001c7c:	9315      	str	r3, [sp, #84]	; 0x54
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c7e:	bf0c      	ite	eq
 8001c80:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001c84:	2320      	movne	r3, #32
 8001c86:	f8c8 3010 	str.w	r3, [r8, #16]
 8001c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c8e:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001c92:	f8ca 6010 	str.w	r6, [sl, #16]
 8001c96:	f8ca 3010 	str.w	r3, [sl, #16]
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ca0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001ca4:	f8ca b010 	str.w	fp, [sl, #16]
 8001ca8:	f8c9 0010 	str.w	r0, [r9, #16]
 8001cac:	f8c9 c010 	str.w	ip, [r9, #16]
 8001cb0:	f8c8 4010 	str.w	r4, [r8, #16]
 8001cb4:	f8c8 7010 	str.w	r7, [r8, #16]
 8001cb8:	f8c8 0010 	str.w	r0, [r8, #16]
 8001cbc:	f8c8 c010 	str.w	ip, [r8, #16]
 8001cc0:	f8c8 3010 	str.w	r3, [r8, #16]
 8001cc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cc8:	f8c8 3010 	str.w	r3, [r8, #16]
 8001ccc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001cce:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8001cd0:	fa1f fe83 	uxth.w	lr, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001cd4:	09db      	lsrs	r3, r3, #7
 8001cd6:	931e      	str	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = GPIO_Pin;
 8001cd8:	bf16      	itet	ne
 8001cda:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cdc:	f8c9 7010 	streq.w	r7, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001ce0:	f8c9 3010 	strne.w	r3, [r9, #16]
 8001ce4:	f3ce 1380 	ubfx	r3, lr, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001ce8:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8001cec:	9314      	str	r3, [sp, #80]	; 0x50
 8001cee:	bf16      	itet	ne
 8001cf0:	2308      	movne	r3, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cf2:	f8c9 4010 	streq.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001cf6:	f8c9 3010 	strne.w	r3, [r9, #16]
 8001cfa:	f3ce 1340 	ubfx	r3, lr, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001cfe:	f01e 0f20 	tst.w	lr, #32
 8001d02:	931d      	str	r3, [sp, #116]	; 0x74
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d04:	bf0c      	ite	eq
 8001d06:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001d0a:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001d0c:	f01e 0f10 	tst.w	lr, #16
 8001d10:	f8c9 3010 	str.w	r3, [r9, #16]
 8001d14:	f3ce 1300 	ubfx	r3, lr, #4, #1
 8001d18:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d1a:	bf0c      	ite	eq
 8001d1c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001d20:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001d22:	f01e 0f08 	tst.w	lr, #8
 8001d26:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d2a:	bf0c      	ite	eq
 8001d2c:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001d30:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001d32:	f01e 0f04 	tst.w	lr, #4
 8001d36:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d3a:	bf0c      	ite	eq
 8001d3c:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001d40:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001d42:	f01e 0f02 	tst.w	lr, #2
 8001d46:	f3ce 01c0 	ubfx	r1, lr, #3, #1
 8001d4a:	f3ce 0280 	ubfx	r2, lr, #2, #1
 8001d4e:	f8c9 3010 	str.w	r3, [r9, #16]
 8001d52:	f3ce 0340 	ubfx	r3, lr, #1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d56:	bf0c      	ite	eq
 8001d58:	f44f 1e80 	moveq.w	lr, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001d5c:	f04f 0e10 	movne.w	lr, #16
 8001d60:	f8c8 e010 	str.w	lr, [r8, #16]
 8001d64:	fa1f fe85 	uxth.w	lr, r5
 8001d68:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001d6c:	2d00      	cmp	r5, #0
 8001d6e:	f040 8261 	bne.w	8002234 <LCD_Line.constprop.0+0xbf8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d72:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001d76:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001d7a:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001d7e:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d82:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001d86:	f8ca 6010 	str.w	r6, [sl, #16]
 8001d8a:	f8ca 5010 	str.w	r5, [sl, #16]
 8001d8e:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d92:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001d96:	f8ca b010 	str.w	fp, [sl, #16]
 8001d9a:	f8c9 0010 	str.w	r0, [r9, #16]
 8001d9e:	f8c9 c010 	str.w	ip, [r9, #16]
 8001da2:	f8c8 4010 	str.w	r4, [r8, #16]
 8001da6:	f8c8 7010 	str.w	r7, [r8, #16]
 8001daa:	f8c8 0010 	str.w	r0, [r8, #16]
 8001dae:	f8c8 c010 	str.w	ip, [r8, #16]
 8001db2:	f8c8 e010 	str.w	lr, [r8, #16]
 8001db6:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001dba:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8001dbc:	f8c8 e010 	str.w	lr, [r8, #16]
 8001dc0:	2d00      	cmp	r5, #0
 8001dc2:	f000 8234 	beq.w	800222e <LCD_Line.constprop.0+0xbf2>
    GPIOx->BSRR = GPIO_Pin;
 8001dc6:	f04f 0e04 	mov.w	lr, #4
 8001dca:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001dce:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8001dd0:	2d00      	cmp	r5, #0
 8001dd2:	f040 8227 	bne.w	8002224 <LCD_Line.constprop.0+0xbe8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dd6:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001dda:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8001ddc:	2d00      	cmp	r5, #0
 8001dde:	f040 821c 	bne.w	800221a <LCD_Line.constprop.0+0xbde>
 8001de2:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001de6:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001dea:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8001dec:	2d00      	cmp	r5, #0
 8001dee:	f040 820f 	bne.w	8002210 <LCD_Line.constprop.0+0xbd4>
 8001df2:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001df6:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001dfa:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8001dfc:	2d00      	cmp	r5, #0
 8001dfe:	f040 8202 	bne.w	8002206 <LCD_Line.constprop.0+0xbca>
 8001e02:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 8001e06:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001e0a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8001e0c:	2d00      	cmp	r5, #0
 8001e0e:	f040 81f5 	bne.w	80021fc <LCD_Line.constprop.0+0xbc0>
 8001e12:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
 8001e16:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001e1a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8001e1c:	2d00      	cmp	r5, #0
 8001e1e:	f040 81e8 	bne.w	80021f2 <LCD_Line.constprop.0+0xbb6>
 8001e22:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001e26:	f8c8 e010 	str.w	lr, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001e2a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001e2c:	2d00      	cmp	r5, #0
 8001e2e:	f040 81db 	bne.w	80021e8 <LCD_Line.constprop.0+0xbac>
 8001e32:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001e36:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001e3a:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001e3e:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e42:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001e46:	f8ca 6010 	str.w	r6, [sl, #16]
 8001e4a:	f8ca 5010 	str.w	r5, [sl, #16]
 8001e4e:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e52:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001e56:	f8ca b010 	str.w	fp, [sl, #16]
 8001e5a:	f8c9 0010 	str.w	r0, [r9, #16]
 8001e5e:	f8c9 c010 	str.w	ip, [r9, #16]
 8001e62:	f8c8 4010 	str.w	r4, [r8, #16]
 8001e66:	f8c8 7010 	str.w	r7, [r8, #16]
 8001e6a:	f8c8 0010 	str.w	r0, [r8, #16]
 8001e6e:	f8c8 c010 	str.w	ip, [r8, #16]
 8001e72:	f8c8 e010 	str.w	lr, [r8, #16]
 8001e76:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001e7a:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8001e7c:	f8c8 e010 	str.w	lr, [r8, #16]
 8001e80:	2d00      	cmp	r5, #0
 8001e82:	f000 81ae 	beq.w	80021e2 <LCD_Line.constprop.0+0xba6>
    GPIOx->BSRR = GPIO_Pin;
 8001e86:	f04f 0e04 	mov.w	lr, #4
 8001e8a:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001e8e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8001e90:	2d00      	cmp	r5, #0
 8001e92:	f040 81a1 	bne.w	80021d8 <LCD_Line.constprop.0+0xb9c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e96:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001e9a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8001e9c:	2d00      	cmp	r5, #0
 8001e9e:	f040 8196 	bne.w	80021ce <LCD_Line.constprop.0+0xb92>
 8001ea2:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001ea6:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001eaa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8001eac:	2d00      	cmp	r5, #0
 8001eae:	f040 8189 	bne.w	80021c4 <LCD_Line.constprop.0+0xb88>
 8001eb2:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001eb6:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001eba:	2900      	cmp	r1, #0
 8001ebc:	f040 817e 	bne.w	80021bc <LCD_Line.constprop.0+0xb80>
 8001ec0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001ec4:	f8c9 1010 	str.w	r1, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001ec8:	2a00      	cmp	r2, #0
 8001eca:	f040 8173 	bne.w	80021b4 <LCD_Line.constprop.0+0xb78>
 8001ece:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ed2:	f8c9 2010 	str.w	r2, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f040 8168 	bne.w	80021ac <LCD_Line.constprop.0+0xb70>
 8001edc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ee0:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001ee4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f040 815c 	bne.w	80021a4 <LCD_Line.constprop.0+0xb68>
 8001eec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ef0:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001ef4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ef8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001efc:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001f00:	f8ca 6010 	str.w	r6, [sl, #16]
 8001f04:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f08:	f8ca c010 	str.w	ip, [sl, #16]
 8001f0c:	f8ca b010 	str.w	fp, [sl, #16]
 8001f10:	f8c9 0010 	str.w	r0, [r9, #16]
 8001f14:	f8c9 c010 	str.w	ip, [r9, #16]
 8001f18:	f8c8 4010 	str.w	r4, [r8, #16]
 8001f1c:	f8c8 7010 	str.w	r7, [r8, #16]
 8001f20:	f8c8 0010 	str.w	r0, [r8, #16]
 8001f24:	f8c8 c010 	str.w	ip, [r8, #16]
 8001f28:	f8c8 2010 	str.w	r2, [r8, #16]
 8001f2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f30:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001f34:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f36:	f8c9 7010 	str.w	r7, [r9, #16]
 8001f3a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f3e:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001f42:	f8c9 2010 	str.w	r2, [r9, #16]
 8001f46:	2240      	movs	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f48:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001f4c:	f8c9 2010 	str.w	r2, [r9, #16]
 8001f50:	2280      	movs	r2, #128	; 0x80
 8001f52:	f8c9 2010 	str.w	r2, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f5a:	f8c8 2010 	str.w	r2, [r8, #16]
 8001f5e:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001f62:	2301      	movs	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f64:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001f68:	f8ca 6010 	str.w	r6, [sl, #16]
 8001f6c:	f8ca 1010 	str.w	r1, [sl, #16]
 8001f70:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001f74:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f76:	f8ca b010 	str.w	fp, [sl, #16]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 810f 	beq.w	800219e <LCD_Line.constprop.0+0xb62>
    GPIOx->BSRR = GPIO_Pin;
 8001f80:	f8c9 6010 	str.w	r6, [r9, #16]
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001f84:	9b03      	ldr	r3, [sp, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8106 	beq.w	8002198 <LCD_Line.constprop.0+0xb5c>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001f92:	9b04      	ldr	r3, [sp, #16]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 80fc 	beq.w	8002192 <LCD_Line.constprop.0+0xb56>
 8001f9a:	2308      	movs	r3, #8
 8001f9c:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001fa0:	9b05      	ldr	r3, [sp, #20]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 80f2 	beq.w	800218c <LCD_Line.constprop.0+0xb50>
 8001fa8:	2304      	movs	r3, #4
 8001faa:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8001fae:	9b06      	ldr	r3, [sp, #24]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 80e8 	beq.w	8002186 <LCD_Line.constprop.0+0xb4a>
 8001fb6:	f8c8 6010 	str.w	r6, [r8, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001fba:	9b07      	ldr	r3, [sp, #28]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80df 	beq.w	8002180 <LCD_Line.constprop.0+0xb44>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8001fc8:	9b08      	ldr	r3, [sp, #32]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 80d3 	beq.w	8002176 <LCD_Line.constprop.0+0xb3a>
 8001fd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fd4:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80c6 	beq.w	800216c <LCD_Line.constprop.0+0xb30>
 8001fe0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fe4:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 80bb 	beq.w	8002166 <LCD_Line.constprop.0+0xb2a>
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001ff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80b1 	beq.w	8002160 <LCD_Line.constprop.0+0xb24>
 8001ffe:	2308      	movs	r3, #8
 8002000:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002004:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 80a5 	beq.w	8002156 <LCD_Line.constprop.0+0xb1a>
 800200c:	2310      	movs	r3, #16
 800200e:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 8099 	beq.w	800214c <LCD_Line.constprop.0+0xb10>
 800201a:	2320      	movs	r3, #32
 800201c:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 808d 	beq.w	8002142 <LCD_Line.constprop.0+0xb06>
 8002028:	2340      	movs	r3, #64	; 0x40
 800202a:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800202e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 8081 	beq.w	8002138 <LCD_Line.constprop.0+0xafc>
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800203c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800203e:	2b00      	cmp	r3, #0
 8002040:	d075      	beq.n	800212e <LCD_Line.constprop.0+0xaf2>
 8002042:	2310      	movs	r3, #16
 8002044:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002048:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800204a:	2b00      	cmp	r3, #0
 800204c:	d06a      	beq.n	8002124 <LCD_Line.constprop.0+0xae8>
 800204e:	2320      	movs	r3, #32
 8002050:	f8c8 3010 	str.w	r3, [r8, #16]
 8002054:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002058:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800205c:	f8ca 6010 	str.w	r6, [sl, #16]
 8002060:	f8ca 3010 	str.w	r3, [sl, #16]
		if (x1 == x2 && y1 == y2)
 8002064:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8002068:	4293      	cmp	r3, r2
 800206a:	f000 8145 	beq.w	80022f8 <LCD_Line.constprop.0+0xcbc>
		if (error2 > -deltaY)
 800206e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
		error2 = error * 2;
 8002070:	9912      	ldr	r1, [sp, #72]	; 0x48
		if (error2 > -deltaY)
 8002072:	425b      	negs	r3, r3
 8002074:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
		error2 = error * 2;
 8002078:	ea4f 0241 	mov.w	r2, r1, lsl #1
		if (error2 > -deltaY)
 800207c:	da27      	bge.n	80020ce <LCD_Line.constprop.0+0xa92>
			x1 += signX;
 800207e:	9d01      	ldr	r5, [sp, #4]
 8002080:	f8dd e0e0 	ldr.w	lr, [sp, #224]	; 0xe0
 8002084:	4475      	add	r5, lr
 8002086:	462b      	mov	r3, r5
			error -= deltaY;
 8002088:	460d      	mov	r5, r1
 800208a:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800208c:	1a69      	subs	r1, r5, r1
 800208e:	9112      	str	r1, [sp, #72]	; 0x48
			x1 += signX;
 8002090:	b299      	uxth	r1, r3
 8002092:	9101      	str	r1, [sp, #4]
 8002094:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002098:	9124      	str	r1, [sp, #144]	; 0x90
 800209a:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 800209e:	9132      	str	r1, [sp, #200]	; 0xc8
 80020a0:	f3c3 3181 	ubfx	r1, r3, #14, #2
 80020a4:	9130      	str	r1, [sp, #192]	; 0xc0
 80020a6:	f3c3 3142 	ubfx	r1, r3, #13, #3
 80020aa:	912e      	str	r1, [sp, #184]	; 0xb8
 80020ac:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80020b0:	912c      	str	r1, [sp, #176]	; 0xb0
 80020b2:	f3c3 21c4 	ubfx	r1, r3, #11, #5
 80020b6:	912a      	str	r1, [sp, #168]	; 0xa8
 80020b8:	f3c3 2185 	ubfx	r1, r3, #10, #6
 80020bc:	9128      	str	r1, [sp, #160]	; 0xa0
 80020be:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80020c2:	9126      	str	r1, [sp, #152]	; 0x98
 80020c4:	b2d9      	uxtb	r1, r3
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	9120      	str	r1, [sp, #128]	; 0x80
 80020cc:	9322      	str	r3, [sp, #136]	; 0x88
		if (error2 < deltaX)
 80020ce:	9937      	ldr	r1, [sp, #220]	; 0xdc
 80020d0:	4291      	cmp	r1, r2
 80020d2:	f77f ab57 	ble.w	8001784 <LCD_Line.constprop.0+0x148>
			y1 += signY;
 80020d6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80020d8:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 80020da:	4413      	add	r3, r2
			error += deltaX;
 80020dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80020de:	440a      	add	r2, r1
 80020e0:	9212      	str	r2, [sp, #72]	; 0x48
			y1 += signY;
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	9235      	str	r2, [sp, #212]	; 0xd4
 80020e6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80020ea:	9225      	str	r2, [sp, #148]	; 0x94
 80020ec:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80020f0:	9233      	str	r2, [sp, #204]	; 0xcc
 80020f2:	f3c3 3281 	ubfx	r2, r3, #14, #2
 80020f6:	9231      	str	r2, [sp, #196]	; 0xc4
 80020f8:	f3c3 3242 	ubfx	r2, r3, #13, #3
 80020fc:	922f      	str	r2, [sp, #188]	; 0xbc
 80020fe:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8002102:	922d      	str	r2, [sp, #180]	; 0xb4
 8002104:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 8002108:	922b      	str	r2, [sp, #172]	; 0xac
 800210a:	f3c3 2285 	ubfx	r2, r3, #10, #6
 800210e:	9229      	str	r2, [sp, #164]	; 0xa4
 8002110:	f3c3 2246 	ubfx	r2, r3, #9, #7
 8002114:	9227      	str	r2, [sp, #156]	; 0x9c
 8002116:	b2da      	uxtb	r2, r3
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	9221      	str	r2, [sp, #132]	; 0x84
 800211e:	9323      	str	r3, [sp, #140]	; 0x8c
 8002120:	f7ff bb30 	b.w	8001784 <LCD_Line.constprop.0+0x148>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002124:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002128:	f8c8 3010 	str.w	r3, [r8, #16]
}
 800212c:	e792      	b.n	8002054 <LCD_Line.constprop.0+0xa18>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800212e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002132:	f8c8 3010 	str.w	r3, [r8, #16]
}
 8002136:	e787      	b.n	8002048 <LCD_Line.constprop.0+0xa0c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002138:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800213c:	f8c9 3010 	str.w	r3, [r9, #16]
}
 8002140:	e77c      	b.n	800203c <LCD_Line.constprop.0+0xa00>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002142:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002146:	f8c9 3010 	str.w	r3, [r9, #16]
}
 800214a:	e770      	b.n	800202e <LCD_Line.constprop.0+0x9f2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800214c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002150:	f8c9 3010 	str.w	r3, [r9, #16]
}
 8002154:	e764      	b.n	8002020 <LCD_Line.constprop.0+0x9e4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002156:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800215a:	f8c9 3010 	str.w	r3, [r9, #16]
}
 800215e:	e758      	b.n	8002012 <LCD_Line.constprop.0+0x9d6>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002160:	f8c9 4010 	str.w	r4, [r9, #16]
}
 8002164:	e74e      	b.n	8002004 <LCD_Line.constprop.0+0x9c8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002166:	f8c9 7010 	str.w	r7, [r9, #16]
}
 800216a:	e744      	b.n	8001ff6 <LCD_Line.constprop.0+0x9ba>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800216c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002170:	f8c8 3010 	str.w	r3, [r8, #16]
}
 8002174:	e738      	b.n	8001fe8 <LCD_Line.constprop.0+0x9ac>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002176:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800217a:	f8c8 3010 	str.w	r3, [r8, #16]
}
 800217e:	e72b      	b.n	8001fd8 <LCD_Line.constprop.0+0x99c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002180:	f8c8 c010 	str.w	ip, [r8, #16]
}
 8002184:	e720      	b.n	8001fc8 <LCD_Line.constprop.0+0x98c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002186:	f8c8 0010 	str.w	r0, [r8, #16]
}
 800218a:	e716      	b.n	8001fba <LCD_Line.constprop.0+0x97e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800218c:	f8c8 7010 	str.w	r7, [r8, #16]
}
 8002190:	e70d      	b.n	8001fae <LCD_Line.constprop.0+0x972>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002192:	f8c8 4010 	str.w	r4, [r8, #16]
}
 8002196:	e703      	b.n	8001fa0 <LCD_Line.constprop.0+0x964>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002198:	f8c9 c010 	str.w	ip, [r9, #16]
}
 800219c:	e6f9      	b.n	8001f92 <LCD_Line.constprop.0+0x956>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800219e:	f8c9 0010 	str.w	r0, [r9, #16]
}
 80021a2:	e6ef      	b.n	8001f84 <LCD_Line.constprop.0+0x948>
    GPIOx->BSRR = GPIO_Pin;
 80021a4:	2320      	movs	r3, #32
 80021a6:	f8c8 3010 	str.w	r3, [r8, #16]
 80021aa:	e6a3      	b.n	8001ef4 <LCD_Line.constprop.0+0x8b8>
 80021ac:	2310      	movs	r3, #16
 80021ae:	f8c8 3010 	str.w	r3, [r8, #16]
 80021b2:	e697      	b.n	8001ee4 <LCD_Line.constprop.0+0x8a8>
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	f8c9 2010 	str.w	r2, [r9, #16]
 80021ba:	e68c      	b.n	8001ed6 <LCD_Line.constprop.0+0x89a>
 80021bc:	2140      	movs	r1, #64	; 0x40
 80021be:	f8c9 1010 	str.w	r1, [r9, #16]
 80021c2:	e681      	b.n	8001ec8 <LCD_Line.constprop.0+0x88c>
 80021c4:	f04f 0e20 	mov.w	lr, #32
 80021c8:	f8c9 e010 	str.w	lr, [r9, #16]
 80021cc:	e675      	b.n	8001eba <LCD_Line.constprop.0+0x87e>
 80021ce:	f04f 0e10 	mov.w	lr, #16
 80021d2:	f8c9 e010 	str.w	lr, [r9, #16]
 80021d6:	e668      	b.n	8001eaa <LCD_Line.constprop.0+0x86e>
 80021d8:	f04f 0e08 	mov.w	lr, #8
 80021dc:	f8c9 e010 	str.w	lr, [r9, #16]
 80021e0:	e65b      	b.n	8001e9a <LCD_Line.constprop.0+0x85e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021e2:	f8c9 7010 	str.w	r7, [r9, #16]
 80021e6:	e652      	b.n	8001e8e <LCD_Line.constprop.0+0x852>
    GPIOx->BSRR = GPIO_Pin;
 80021e8:	f04f 0e20 	mov.w	lr, #32
 80021ec:	f8c8 e010 	str.w	lr, [r8, #16]
 80021f0:	e623      	b.n	8001e3a <LCD_Line.constprop.0+0x7fe>
 80021f2:	f04f 0e10 	mov.w	lr, #16
 80021f6:	f8c8 e010 	str.w	lr, [r8, #16]
 80021fa:	e616      	b.n	8001e2a <LCD_Line.constprop.0+0x7ee>
 80021fc:	f04f 0e80 	mov.w	lr, #128	; 0x80
 8002200:	f8c9 e010 	str.w	lr, [r9, #16]
 8002204:	e609      	b.n	8001e1a <LCD_Line.constprop.0+0x7de>
 8002206:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800220a:	f8c9 e010 	str.w	lr, [r9, #16]
 800220e:	e5fc      	b.n	8001e0a <LCD_Line.constprop.0+0x7ce>
 8002210:	f04f 0e20 	mov.w	lr, #32
 8002214:	f8c9 e010 	str.w	lr, [r9, #16]
 8002218:	e5ef      	b.n	8001dfa <LCD_Line.constprop.0+0x7be>
 800221a:	f04f 0e10 	mov.w	lr, #16
 800221e:	f8c9 e010 	str.w	lr, [r9, #16]
 8002222:	e5e2      	b.n	8001dea <LCD_Line.constprop.0+0x7ae>
 8002224:	f04f 0e08 	mov.w	lr, #8
 8002228:	f8c9 e010 	str.w	lr, [r9, #16]
 800222c:	e5d5      	b.n	8001dda <LCD_Line.constprop.0+0x79e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800222e:	f8c9 7010 	str.w	r7, [r9, #16]
 8002232:	e5cc      	b.n	8001dce <LCD_Line.constprop.0+0x792>
    GPIOx->BSRR = GPIO_Pin;
 8002234:	f04f 0e20 	mov.w	lr, #32
 8002238:	f8c8 e010 	str.w	lr, [r8, #16]
 800223c:	e59d      	b.n	8001d7a <LCD_Line.constprop.0+0x73e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800223e:	f8c9 7010 	str.w	r7, [r9, #16]
 8002242:	e4dc      	b.n	8001bfe <LCD_Line.constprop.0+0x5c2>
    GPIOx->BSRR = GPIO_Pin;
 8002244:	2320      	movs	r3, #32
 8002246:	f8c8 3010 	str.w	r3, [r8, #16]
 800224a:	e478      	b.n	8001b3e <LCD_Line.constprop.0+0x502>
 800224c:	2310      	movs	r3, #16
 800224e:	f8c8 3010 	str.w	r3, [r8, #16]
 8002252:	e46c      	b.n	8001b2e <LCD_Line.constprop.0+0x4f2>
 8002254:	2280      	movs	r2, #128	; 0x80
 8002256:	f8c9 2010 	str.w	r2, [r9, #16]
 800225a:	e461      	b.n	8001b20 <LCD_Line.constprop.0+0x4e4>
 800225c:	2140      	movs	r1, #64	; 0x40
 800225e:	f8c9 1010 	str.w	r1, [r9, #16]
 8002262:	e456      	b.n	8001b12 <LCD_Line.constprop.0+0x4d6>
 8002264:	f04f 0e20 	mov.w	lr, #32
 8002268:	f8c9 e010 	str.w	lr, [r9, #16]
 800226c:	e44a      	b.n	8001b04 <LCD_Line.constprop.0+0x4c8>
 800226e:	f04f 0e10 	mov.w	lr, #16
 8002272:	f8c9 e010 	str.w	lr, [r9, #16]
 8002276:	e43d      	b.n	8001af4 <LCD_Line.constprop.0+0x4b8>
 8002278:	f04f 0e08 	mov.w	lr, #8
 800227c:	f8c9 e010 	str.w	lr, [r9, #16]
 8002280:	e430      	b.n	8001ae4 <LCD_Line.constprop.0+0x4a8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002282:	f8c9 7010 	str.w	r7, [r9, #16]
 8002286:	e427      	b.n	8001ad8 <LCD_Line.constprop.0+0x49c>
    GPIOx->BSRR = GPIO_Pin;
 8002288:	f04f 0e20 	mov.w	lr, #32
 800228c:	f8c8 e010 	str.w	lr, [r8, #16]
 8002290:	f7ff bbf0 	b.w	8001a74 <LCD_Line.constprop.0+0x438>
 8002294:	f04f 0e10 	mov.w	lr, #16
 8002298:	f8c8 e010 	str.w	lr, [r8, #16]
 800229c:	f7ff bbe2 	b.w	8001a64 <LCD_Line.constprop.0+0x428>
 80022a0:	f04f 0e80 	mov.w	lr, #128	; 0x80
 80022a4:	f8c9 e010 	str.w	lr, [r9, #16]
 80022a8:	f7ff bbd4 	b.w	8001a54 <LCD_Line.constprop.0+0x418>
 80022ac:	f04f 0e40 	mov.w	lr, #64	; 0x40
 80022b0:	f8c9 e010 	str.w	lr, [r9, #16]
 80022b4:	f7ff bbc6 	b.w	8001a44 <LCD_Line.constprop.0+0x408>
 80022b8:	f04f 0e20 	mov.w	lr, #32
 80022bc:	f8c9 e010 	str.w	lr, [r9, #16]
 80022c0:	f7ff bbb8 	b.w	8001a34 <LCD_Line.constprop.0+0x3f8>
 80022c4:	f04f 0e10 	mov.w	lr, #16
 80022c8:	f8c9 e010 	str.w	lr, [r9, #16]
 80022cc:	f7ff bbaa 	b.w	8001a24 <LCD_Line.constprop.0+0x3e8>
 80022d0:	f04f 0e08 	mov.w	lr, #8
 80022d4:	f8c9 e010 	str.w	lr, [r9, #16]
 80022d8:	f7ff bb9c 	b.w	8001a14 <LCD_Line.constprop.0+0x3d8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022dc:	f8c9 7010 	str.w	r7, [r9, #16]
 80022e0:	f7ff bb92 	b.w	8001a08 <LCD_Line.constprop.0+0x3cc>
    GPIOx->BSRR = GPIO_Pin;
 80022e4:	f04f 0e20 	mov.w	lr, #32
 80022e8:	f8c8 e010 	str.w	lr, [r8, #16]
 80022ec:	f7ff bb62 	b.w	80019b4 <LCD_Line.constprop.0+0x378>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022f0:	f8c9 7010 	str.w	r7, [r9, #16]
 80022f4:	f7ff ba9f 	b.w	8001836 <LCD_Line.constprop.0+0x1fa>
		if (x1 == x2 && y1 == y2)
 80022f8:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80022fa:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 80022fe:	f47f aeb6 	bne.w	800206e <LCD_Line.constprop.0+0xa32>
}
 8002302:	b03b      	add	sp, #236	; 0xec
 8002304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002308 <LCD_Line.constprop.1>:
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8002308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800230c:	b0ab      	sub	sp, #172	; 0xac
 800230e:	9123      	str	r1, [sp, #140]	; 0x8c
 8002310:	4619      	mov	r1, r3
 8002312:	9329      	str	r3, [sp, #164]	; 0xa4
	int deltaX = abs(x2 - x1);
 8002314:	1a13      	subs	r3, r2, r0
 8002316:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
 800231a:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
	int deltaY = abs(y2 - y1);
 800231e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
	int deltaX = abs(x2 - x1);
 8002320:	9224      	str	r2, [sp, #144]	; 0x90
	int deltaY = abs(y2 - y1);
 8002322:	1acb      	subs	r3, r1, r3
 8002324:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002328:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800232c:	9225      	str	r2, [sp, #148]	; 0x94
	int signX = x1 < x2 ? 1 : -1;
 800232e:	9a24      	ldr	r2, [sp, #144]	; 0x90
	int signY = y1 < y2 ? 1 : -1;
 8002330:	9b23      	ldr	r3, [sp, #140]	; 0x8c
	int signX = x1 < x2 ? 1 : -1;
 8002332:	4282      	cmp	r2, r0
 8002334:	bf8c      	ite	hi
 8002336:	2201      	movhi	r2, #1
 8002338:	f04f 32ff 	movls.w	r2, #4294967295
	int signY = y1 < y2 ? 1 : -1;
 800233c:	4299      	cmp	r1, r3
 800233e:	bf8c      	ite	hi
 8002340:	2101      	movhi	r1, #1
 8002342:	f04f 31ff 	movls.w	r1, #4294967295
	int signX = x1 < x2 ? 1 : -1;
 8002346:	9227      	str	r2, [sp, #156]	; 0x9c
 8002348:	0a1a      	lsrs	r2, r3, #8
 800234a:	9214      	str	r2, [sp, #80]	; 0x50
 800234c:	0bda      	lsrs	r2, r3, #15
 800234e:	9201      	str	r2, [sp, #4]
 8002350:	0b9a      	lsrs	r2, r3, #14
 8002352:	9220      	str	r2, [sp, #128]	; 0x80
 8002354:	0b5a      	lsrs	r2, r3, #13
 8002356:	921e      	str	r2, [sp, #120]	; 0x78
 8002358:	0b1a      	lsrs	r2, r3, #12
 800235a:	921c      	str	r2, [sp, #112]	; 0x70
 800235c:	0ada      	lsrs	r2, r3, #11
 800235e:	921a      	str	r2, [sp, #104]	; 0x68
 8002360:	0a9a      	lsrs	r2, r3, #10
	int signY = y1 < y2 ? 1 : -1;
 8002362:	9128      	str	r1, [sp, #160]	; 0xa0
 8002364:	9218      	str	r2, [sp, #96]	; 0x60
 8002366:	b2d9      	uxtb	r1, r3
 8002368:	0a5a      	lsrs	r2, r3, #9
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	9312      	str	r3, [sp, #72]	; 0x48
 8002370:	f000 0301 	and.w	r3, r0, #1
 8002374:	9311      	str	r3, [sp, #68]	; 0x44
	int error = deltaX - deltaY;
 8002376:	4663      	mov	r3, ip
 8002378:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800237c:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8002380:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8002384:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 8002388:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 800238c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8002390:	9216      	str	r2, [sp, #88]	; 0x58
 8002392:	0a02      	lsrs	r2, r0, #8
 8002394:	9213      	str	r2, [sp, #76]	; 0x4c
 8002396:	0bc2      	lsrs	r2, r0, #15
 8002398:	9200      	str	r2, [sp, #0]
 800239a:	0b82      	lsrs	r2, r0, #14
 800239c:	921f      	str	r2, [sp, #124]	; 0x7c
 800239e:	0b42      	lsrs	r2, r0, #13
 80023a0:	921d      	str	r2, [sp, #116]	; 0x74
 80023a2:	0b02      	lsrs	r2, r0, #12
 80023a4:	921b      	str	r2, [sp, #108]	; 0x6c
 80023a6:	0ac2      	lsrs	r2, r0, #11
 80023a8:	9219      	str	r2, [sp, #100]	; 0x64
 80023aa:	0a82      	lsrs	r2, r0, #10
 80023ac:	9122      	str	r1, [sp, #136]	; 0x88
 80023ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80023b0:	b2c1      	uxtb	r1, r0
 80023b2:	0a42      	lsrs	r2, r0, #9
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 80023b4:	9010      	str	r0, [sp, #64]	; 0x40
	int deltaX = abs(x2 - x1);
 80023b6:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
 80023ba:	9215      	str	r2, [sp, #84]	; 0x54
 80023bc:	9121      	str	r1, [sp, #132]	; 0x84
	int error = deltaX - deltaY;
 80023be:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80023c0:	f8df b350 	ldr.w	fp, [pc, #848]	; 8002714 <LCD_Line.constprop.1+0x40c>
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	f8df a350 	ldr.w	sl, [pc, #848]	; 8002718 <LCD_Line.constprop.1+0x410>
 80023ca:	f8df 9350 	ldr.w	r9, [pc, #848]	; 800271c <LCD_Line.constprop.1+0x414>
 80023ce:	9302      	str	r3, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80023d0:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80023d4:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80023d8:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023da:	f8cb e010 	str.w	lr, [fp, #16]
 80023de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023e2:	f8ca 7010 	str.w	r7, [sl, #16]
 80023e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80023ea:	f8ca 4010 	str.w	r4, [sl, #16]
 80023ee:	f8c9 6010 	str.w	r6, [r9, #16]
 80023f2:	f8c9 5010 	str.w	r5, [r9, #16]
 80023f6:	f8c9 7010 	str.w	r7, [r9, #16]
 80023fa:	f8c9 4010 	str.w	r4, [r9, #16]
 80023fe:	f8c9 8010 	str.w	r8, [r9, #16]
 8002402:	900b      	str	r0, [sp, #44]	; 0x2c
    GPIOx->BSRR = GPIO_Pin;
 8002404:	2040      	movs	r0, #64	; 0x40
	data[0] = x1 >> 8;
 8002406:	f8bd c050 	ldrh.w	ip, [sp, #80]	; 0x50
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800240a:	f8c9 1010 	str.w	r1, [r9, #16]
 800240e:	f8ca 5010 	str.w	r5, [sl, #16]
 8002412:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002416:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800241a:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800241e:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002422:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002426:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800242a:	f8c9 2010 	str.w	r2, [r9, #16]
 800242e:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002430:	f8c9 3010 	str.w	r3, [r9, #16]
 8002434:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002438:	f8cb 2010 	str.w	r2, [fp, #16]
 800243c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002440:	f8cb 2010 	str.w	r2, [fp, #16]
 8002444:	2201      	movs	r2, #1
 8002446:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800244a:	f8cb e010 	str.w	lr, [fp, #16]
 800244e:	f8ca 7010 	str.w	r7, [sl, #16]
 8002452:	f8ca 4010 	str.w	r4, [sl, #16]
 8002456:	f8c9 6010 	str.w	r6, [r9, #16]
 800245a:	f8c9 5010 	str.w	r5, [r9, #16]
 800245e:	f8c9 7010 	str.w	r7, [r9, #16]
 8002462:	f8c9 4010 	str.w	r4, [r9, #16]
 8002466:	f8c9 8010 	str.w	r8, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800246a:	9b01      	ldr	r3, [sp, #4]
 800246c:	f8c9 1010 	str.w	r1, [r9, #16]
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 849f 	beq.w	8002db4 <LCD_Line.constprop.1+0xaac>
    GPIOx->BSRR = GPIO_Pin;
 8002476:	2304      	movs	r3, #4
 8002478:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800247c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800247e:	f013 0001 	ands.w	r0, r3, #1
 8002482:	bf1c      	itt	ne
 8002484:	2308      	movne	r3, #8
 8002486:	f8ca 3010 	strne.w	r3, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800248a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800248c:	bf08      	it	eq
 800248e:	f8ca 6010 	streq.w	r6, [sl, #16]
 8002492:	f013 0301 	ands.w	r3, r3, #1
 8002496:	9303      	str	r3, [sp, #12]
 8002498:	bf0c      	ite	eq
 800249a:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800249e:	2310      	movne	r3, #16
 80024a0:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80024a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80024a6:	f013 0301 	ands.w	r3, r3, #1
 80024aa:	9304      	str	r3, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024ac:	bf0c      	ite	eq
 80024ae:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80024b2:	2320      	movne	r3, #32
 80024b4:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80024b8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80024ba:	f013 0301 	ands.w	r3, r3, #1
 80024be:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024c0:	bf0c      	ite	eq
 80024c2:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80024c6:	2340      	movne	r3, #64	; 0x40
 80024c8:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80024cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80024ce:	f013 0301 	ands.w	r3, r3, #1
 80024d2:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024d4:	bf0c      	ite	eq
 80024d6:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80024da:	2380      	movne	r3, #128	; 0x80
 80024dc:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80024e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80024e2:	f013 0301 	ands.w	r3, r3, #1
 80024e6:	9305      	str	r3, [sp, #20]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024e8:	bf0c      	ite	eq
 80024ea:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80024ee:	2310      	movne	r3, #16
 80024f0:	f8c9 3010 	str.w	r3, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80024f4:	f01c 0301 	ands.w	r3, ip, #1
 80024f8:	9306      	str	r3, [sp, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024fa:	bf0c      	ite	eq
 80024fc:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002500:	2320      	movne	r3, #32
 8002502:	f8c9 3010 	str.w	r3, [r9, #16]
 8002506:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002508:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800250c:	f8cb 3010 	str.w	r3, [fp, #16]
 8002510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002514:	f8cb 3010 	str.w	r3, [fp, #16]
 8002518:	2301      	movs	r3, #1
 800251a:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800251e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002522:	f8cb e010 	str.w	lr, [fp, #16]
 8002526:	f8ca 7010 	str.w	r7, [sl, #16]
 800252a:	f8ca 4010 	str.w	r4, [sl, #16]
 800252e:	f8c9 6010 	str.w	r6, [r9, #16]
 8002532:	f8c9 5010 	str.w	r5, [r9, #16]
 8002536:	f8c9 7010 	str.w	r7, [r9, #16]
 800253a:	f8c9 4010 	str.w	r4, [r9, #16]
 800253e:	f8c9 8010 	str.w	r8, [r9, #16]
 8002542:	f8c9 3010 	str.w	r3, [r9, #16]
 8002546:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002548:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800254a:	09d2      	lsrs	r2, r2, #7
 800254c:	9207      	str	r2, [sp, #28]
    GPIOx->BSRR = GPIO_Pin;
 800254e:	bf1c      	itt	ne
 8002550:	2204      	movne	r2, #4
 8002552:	f8ca 2010 	strne.w	r2, [sl, #16]
 8002556:	f3c3 1280 	ubfx	r2, r3, #6, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800255a:	bf08      	it	eq
 800255c:	f8ca 5010 	streq.w	r5, [sl, #16]
 8002560:	920c      	str	r2, [sp, #48]	; 0x30
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002562:	065a      	lsls	r2, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 8002564:	bf4a      	itet	mi
 8002566:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002568:	f8ca 6010 	strpl.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800256c:	f8ca 2010 	strmi.w	r2, [sl, #16]
 8002570:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002574:	0699      	lsls	r1, r3, #26
 8002576:	9208      	str	r2, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002578:	bf54      	ite	pl
 800257a:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800257e:	2210      	movmi	r2, #16
 8002580:	f8ca 2010 	str.w	r2, [sl, #16]
 8002584:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8002588:	920d      	str	r2, [sp, #52]	; 0x34
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800258a:	06da      	lsls	r2, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800258c:	bf54      	ite	pl
 800258e:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002592:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002594:	0719      	lsls	r1, r3, #28
 8002596:	f8ca 2010 	str.w	r2, [sl, #16]
 800259a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800259e:	920e      	str	r2, [sp, #56]	; 0x38
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025a0:	bf54      	ite	pl
 80025a2:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80025a6:	2240      	movmi	r2, #64	; 0x40
 80025a8:	f8ca 2010 	str.w	r2, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80025ac:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025ae:	bf54      	ite	pl
 80025b0:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80025b4:	2280      	movmi	r2, #128	; 0x80
 80025b6:	f3c3 0180 	ubfx	r1, r3, #2, #1
 80025ba:	f8ca 2010 	str.w	r2, [sl, #16]
 80025be:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80025c2:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025c4:	bf54      	ite	pl
 80025c6:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80025ca:	2310      	movmi	r3, #16
 80025cc:	f8c9 3010 	str.w	r3, [r9, #16]
 80025d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80025d2:	fa1f fc83 	uxth.w	ip, r3
 80025d6:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f040 83e5 	bne.w	8002daa <LCD_Line.constprop.1+0xaa2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025e0:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 80025e4:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80025e8:	f04f 0c02 	mov.w	ip, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025ec:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80025f0:	f8cb c010 	str.w	ip, [fp, #16]
 80025f4:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 80025f8:	f8cb c010 	str.w	ip, [fp, #16]
 80025fc:	f04f 0c01 	mov.w	ip, #1
 8002600:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002604:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800260a:	f8cb e010 	str.w	lr, [fp, #16]
 800260e:	f8ca 7010 	str.w	r7, [sl, #16]
 8002612:	f8ca 4010 	str.w	r4, [sl, #16]
 8002616:	f8c9 6010 	str.w	r6, [r9, #16]
 800261a:	f8c9 5010 	str.w	r5, [r9, #16]
 800261e:	f8c9 7010 	str.w	r7, [r9, #16]
 8002622:	f8c9 4010 	str.w	r4, [r9, #16]
 8002626:	f8c9 8010 	str.w	r8, [r9, #16]
 800262a:	f8c9 c010 	str.w	ip, [r9, #16]
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 83b8 	beq.w	8002da4 <LCD_Line.constprop.1+0xa9c>
    GPIOx->BSRR = GPIO_Pin;
 8002634:	f04f 0c04 	mov.w	ip, #4
 8002638:	f8ca c010 	str.w	ip, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800263c:	2800      	cmp	r0, #0
 800263e:	f040 83ad 	bne.w	8002d9c <LCD_Line.constprop.1+0xa94>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002642:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002646:	9b03      	ldr	r3, [sp, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	f040 83a3 	bne.w	8002d94 <LCD_Line.constprop.1+0xa8c>
 800264e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002652:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002656:	9b04      	ldr	r3, [sp, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	f040 8397 	bne.w	8002d8c <LCD_Line.constprop.1+0xa84>
 800265e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002662:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002668:	2b00      	cmp	r3, #0
 800266a:	f040 838b 	bne.w	8002d84 <LCD_Line.constprop.1+0xa7c>
 800266e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002672:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002678:	2b00      	cmp	r3, #0
 800267a:	f040 837f 	bne.w	8002d7c <LCD_Line.constprop.1+0xa74>
 800267e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002682:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002686:	9b05      	ldr	r3, [sp, #20]
 8002688:	2b00      	cmp	r3, #0
 800268a:	f040 8373 	bne.w	8002d74 <LCD_Line.constprop.1+0xa6c>
 800268e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002692:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002696:	9b06      	ldr	r3, [sp, #24]
 8002698:	2b00      	cmp	r3, #0
 800269a:	f040 8367 	bne.w	8002d6c <LCD_Line.constprop.1+0xa64>
 800269e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80026a2:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80026a6:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026a8:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80026ac:	f8cb 0010 	str.w	r0, [fp, #16]
 80026b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026b4:	f8cb 0010 	str.w	r0, [fp, #16]
 80026b8:	2001      	movs	r0, #1
 80026ba:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80026c2:	9b07      	ldr	r3, [sp, #28]
 80026c4:	f8cb e010 	str.w	lr, [fp, #16]
 80026c8:	f8ca 7010 	str.w	r7, [sl, #16]
 80026cc:	f8ca 4010 	str.w	r4, [sl, #16]
 80026d0:	f8c9 6010 	str.w	r6, [r9, #16]
 80026d4:	f8c9 5010 	str.w	r5, [r9, #16]
 80026d8:	f8c9 7010 	str.w	r7, [r9, #16]
 80026dc:	f8c9 4010 	str.w	r4, [r9, #16]
 80026e0:	f8c9 8010 	str.w	r8, [r9, #16]
 80026e4:	f8c9 0010 	str.w	r0, [r9, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 833c 	beq.w	8002d66 <LCD_Line.constprop.1+0xa5e>
    GPIOx->BSRR = GPIO_Pin;
 80026ee:	2004      	movs	r0, #4
 80026f0:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80026f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f040 8331 	bne.w	8002d5e <LCD_Line.constprop.1+0xa56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026fc:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002700:	9b08      	ldr	r3, [sp, #32]
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 8327 	bne.w	8002d56 <LCD_Line.constprop.1+0xa4e>
 8002708:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800270c:	f8ca 0010 	str.w	r0, [sl, #16]
 8002710:	e006      	b.n	8002720 <LCD_Line.constprop.1+0x418>
 8002712:	bf00      	nop
 8002714:	40010c00 	.word	0x40010c00
 8002718:	40010800 	.word	0x40010800
 800271c:	40011000 	.word	0x40011000
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002720:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002722:	2b00      	cmp	r3, #0
 8002724:	f040 8313 	bne.w	8002d4e <LCD_Line.constprop.1+0xa46>
 8002728:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800272c:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002732:	2b00      	cmp	r3, #0
 8002734:	f040 8307 	bne.w	8002d46 <LCD_Line.constprop.1+0xa3e>
 8002738:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800273c:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002740:	2900      	cmp	r1, #0
 8002742:	f040 82fc 	bne.w	8002d3e <LCD_Line.constprop.1+0xa36>
 8002746:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800274a:	f8ca 1010 	str.w	r1, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800274e:	2a00      	cmp	r2, #0
 8002750:	f040 82f1 	bne.w	8002d36 <LCD_Line.constprop.1+0xa2e>
 8002754:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002758:	f8c9 2010 	str.w	r2, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800275c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800275e:	2b00      	cmp	r3, #0
 8002760:	f040 82e5 	bne.w	8002d2e <LCD_Line.constprop.1+0xa26>
 8002764:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002768:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800276c:	f8bd 2000 	ldrh.w	r2, [sp]
 8002770:	f8cb 7010 	str.w	r7, [fp, #16]
 8002774:	920d      	str	r2, [sp, #52]	; 0x34
    GPIOx->BSRR = GPIO_Pin;
 8002776:	2202      	movs	r2, #2
	data[0] = y1 >> 8;
 8002778:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
 800277c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002780:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002784:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8002788:	2110      	movs	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800278a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800278e:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002792:	f8cb 4010 	str.w	r4, [fp, #16]
 8002796:	f8cb e010 	str.w	lr, [fp, #16]
 800279a:	f8ca 7010 	str.w	r7, [sl, #16]
 800279e:	f8ca 4010 	str.w	r4, [sl, #16]
 80027a2:	f8c9 6010 	str.w	r6, [r9, #16]
 80027a6:	f8c9 5010 	str.w	r5, [r9, #16]
 80027aa:	f8c9 7010 	str.w	r7, [r9, #16]
 80027ae:	f8c9 4010 	str.w	r4, [r9, #16]
 80027b2:	f8c9 8010 	str.w	r8, [r9, #16]
 80027b6:	f8c9 0010 	str.w	r0, [r9, #16]
 80027ba:	f8ca 5010 	str.w	r5, [sl, #16]
 80027be:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80027c2:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027c6:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80027ca:	2240      	movs	r2, #64	; 0x40
 80027cc:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027d0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027d4:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80027d8:	2220      	movs	r2, #32
 80027da:	f8c9 1010 	str.w	r1, [r9, #16]
 80027de:	f8c9 2010 	str.w	r2, [r9, #16]
 80027e2:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027e4:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80027e8:	f8cb 2010 	str.w	r2, [fp, #16]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f8cb 3010 	str.w	r3, [fp, #16]
 80027f2:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027f6:	f8cb e010 	str.w	lr, [fp, #16]
 80027fa:	f8ca 7010 	str.w	r7, [sl, #16]
 80027fe:	f8ca 4010 	str.w	r4, [sl, #16]
 8002802:	f8c9 6010 	str.w	r6, [r9, #16]
 8002806:	f8c9 5010 	str.w	r5, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800280a:	9b00      	ldr	r3, [sp, #0]
 800280c:	f8c9 7010 	str.w	r7, [r9, #16]
 8002810:	f8c9 4010 	str.w	r4, [r9, #16]
 8002814:	f8c9 8010 	str.w	r8, [r9, #16]
 8002818:	f8c9 0010 	str.w	r0, [r9, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 8283 	beq.w	8002d28 <LCD_Line.constprop.1+0xa20>
    GPIOx->BSRR = GPIO_Pin;
 8002822:	2304      	movs	r3, #4
 8002824:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002828:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800282a:	f013 0001 	ands.w	r0, r3, #1
 800282e:	bf1c      	itt	ne
 8002830:	2308      	movne	r3, #8
 8002832:	f8ca 3010 	strne.w	r3, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002836:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002838:	bf08      	it	eq
 800283a:	f8ca 6010 	streq.w	r6, [sl, #16]
 800283e:	f013 0301 	ands.w	r3, r3, #1
 8002842:	930c      	str	r3, [sp, #48]	; 0x30
 8002844:	bf0c      	ite	eq
 8002846:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800284a:	2310      	movne	r3, #16
 800284c:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002850:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002852:	f013 0301 	ands.w	r3, r3, #1
 8002856:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002858:	bf0c      	ite	eq
 800285a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800285e:	2320      	movne	r3, #32
 8002860:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002864:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002866:	f013 0301 	ands.w	r3, r3, #1
 800286a:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800286c:	bf0c      	ite	eq
 800286e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8002872:	2340      	movne	r3, #64	; 0x40
 8002874:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800287a:	f013 0301 	ands.w	r3, r3, #1
 800287e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002880:	bf0c      	ite	eq
 8002882:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8002886:	2380      	movne	r3, #128	; 0x80
 8002888:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800288c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800288e:	f013 0301 	ands.w	r3, r3, #1
 8002892:	9308      	str	r3, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002894:	bf0c      	ite	eq
 8002896:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800289a:	2310      	movne	r3, #16
 800289c:	f8c9 3010 	str.w	r3, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80028a0:	f01c 0301 	ands.w	r3, ip, #1
 80028a4:	9307      	str	r3, [sp, #28]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028a6:	bf0c      	ite	eq
 80028a8:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80028ac:	2320      	movne	r3, #32
 80028ae:	f8c9 3010 	str.w	r3, [r9, #16]
 80028b2:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028b4:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80028b8:	f8cb 3010 	str.w	r3, [fp, #16]
 80028bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028c0:	f8cb 3010 	str.w	r3, [fp, #16]
 80028c4:	2301      	movs	r3, #1
 80028c6:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028ce:	f8cb e010 	str.w	lr, [fp, #16]
 80028d2:	f8ca 7010 	str.w	r7, [sl, #16]
 80028d6:	f8ca 4010 	str.w	r4, [sl, #16]
 80028da:	f8c9 6010 	str.w	r6, [r9, #16]
 80028de:	f8c9 5010 	str.w	r5, [r9, #16]
 80028e2:	f8c9 7010 	str.w	r7, [r9, #16]
 80028e6:	f8c9 4010 	str.w	r4, [r9, #16]
 80028ea:	f8c9 8010 	str.w	r8, [r9, #16]
 80028ee:	f8c9 3010 	str.w	r3, [r9, #16]
 80028f2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80028f4:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80028f6:	09d2      	lsrs	r2, r2, #7
 80028f8:	9206      	str	r2, [sp, #24]
    GPIOx->BSRR = GPIO_Pin;
 80028fa:	bf1c      	itt	ne
 80028fc:	2204      	movne	r2, #4
 80028fe:	f8ca 2010 	strne.w	r2, [sl, #16]
 8002902:	f3c3 1280 	ubfx	r2, r3, #6, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002906:	bf08      	it	eq
 8002908:	f8ca 5010 	streq.w	r5, [sl, #16]
 800290c:	9205      	str	r2, [sp, #20]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800290e:	065a      	lsls	r2, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 8002910:	bf4a      	itet	mi
 8002912:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002914:	f8ca 6010 	strpl.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002918:	f8ca 2010 	strmi.w	r2, [sl, #16]
 800291c:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002920:	0699      	lsls	r1, r3, #26
 8002922:	9204      	str	r2, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002924:	bf54      	ite	pl
 8002926:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800292a:	2210      	movmi	r2, #16
 800292c:	f8ca 2010 	str.w	r2, [sl, #16]
 8002930:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8002934:	9203      	str	r2, [sp, #12]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002936:	06da      	lsls	r2, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002938:	bf54      	ite	pl
 800293a:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800293e:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002940:	0719      	lsls	r1, r3, #28
 8002942:	f8ca 2010 	str.w	r2, [sl, #16]
 8002946:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800294a:	920f      	str	r2, [sp, #60]	; 0x3c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800294c:	bf54      	ite	pl
 800294e:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8002952:	2240      	movmi	r2, #64	; 0x40
 8002954:	f8ca 2010 	str.w	r2, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002958:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800295a:	bf54      	ite	pl
 800295c:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8002960:	2280      	movmi	r2, #128	; 0x80
 8002962:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8002966:	f8ca 2010 	str.w	r2, [sl, #16]
 800296a:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800296e:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002970:	bf54      	ite	pl
 8002972:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002976:	2310      	movmi	r3, #16
 8002978:	f8c9 3010 	str.w	r3, [r9, #16]
 800297c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800297e:	fa1f fc83 	uxth.w	ip, r3
 8002982:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002986:	2b00      	cmp	r3, #0
 8002988:	f040 81c9 	bne.w	8002d1e <LCD_Line.constprop.1+0xa16>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800298c:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 8002990:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002994:	f04f 0c02 	mov.w	ip, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002998:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800299c:	f8cb c010 	str.w	ip, [fp, #16]
 80029a0:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 80029a4:	f8cb c010 	str.w	ip, [fp, #16]
 80029a8:	f04f 0c01 	mov.w	ip, #1
 80029ac:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029b0:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80029b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80029b6:	f8cb e010 	str.w	lr, [fp, #16]
 80029ba:	f8ca 7010 	str.w	r7, [sl, #16]
 80029be:	f8ca 4010 	str.w	r4, [sl, #16]
 80029c2:	f8c9 6010 	str.w	r6, [r9, #16]
 80029c6:	f8c9 5010 	str.w	r5, [r9, #16]
 80029ca:	f8c9 7010 	str.w	r7, [r9, #16]
 80029ce:	f8c9 4010 	str.w	r4, [r9, #16]
 80029d2:	f8c9 8010 	str.w	r8, [r9, #16]
 80029d6:	f8c9 c010 	str.w	ip, [r9, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 819c 	beq.w	8002d18 <LCD_Line.constprop.1+0xa10>
    GPIOx->BSRR = GPIO_Pin;
 80029e0:	f04f 0c04 	mov.w	ip, #4
 80029e4:	f8ca c010 	str.w	ip, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80029e8:	2800      	cmp	r0, #0
 80029ea:	f040 8191 	bne.w	8002d10 <LCD_Line.constprop.1+0xa08>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029ee:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80029f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f040 8187 	bne.w	8002d08 <LCD_Line.constprop.1+0xa00>
 80029fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80029fe:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f040 817b 	bne.w	8002d00 <LCD_Line.constprop.1+0x9f8>
 8002a0a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002a0e:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f040 816f 	bne.w	8002cf8 <LCD_Line.constprop.1+0x9f0>
 8002a1a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002a1e:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f040 8163 	bne.w	8002cf0 <LCD_Line.constprop.1+0x9e8>
 8002a2a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002a2e:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002a32:	9b08      	ldr	r3, [sp, #32]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f040 8157 	bne.w	8002ce8 <LCD_Line.constprop.1+0x9e0>
 8002a3a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002a3e:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002a42:	9b07      	ldr	r3, [sp, #28]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f040 814b 	bne.w	8002ce0 <LCD_Line.constprop.1+0x9d8>
 8002a4a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002a4e:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002a52:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a54:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002a58:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a5c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002a60:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a64:	2001      	movs	r0, #1
 8002a66:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002a6e:	9b06      	ldr	r3, [sp, #24]
 8002a70:	f8cb e010 	str.w	lr, [fp, #16]
 8002a74:	f8ca 7010 	str.w	r7, [sl, #16]
 8002a78:	f8ca 4010 	str.w	r4, [sl, #16]
 8002a7c:	f8c9 6010 	str.w	r6, [r9, #16]
 8002a80:	f8c9 5010 	str.w	r5, [r9, #16]
 8002a84:	f8c9 7010 	str.w	r7, [r9, #16]
 8002a88:	f8c9 4010 	str.w	r4, [r9, #16]
 8002a8c:	f8c9 8010 	str.w	r8, [r9, #16]
 8002a90:	f8c9 0010 	str.w	r0, [r9, #16]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 8120 	beq.w	8002cda <LCD_Line.constprop.1+0x9d2>
    GPIOx->BSRR = GPIO_Pin;
 8002a9a:	2004      	movs	r0, #4
 8002a9c:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002aa0:	9b05      	ldr	r3, [sp, #20]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f040 8115 	bne.w	8002cd2 <LCD_Line.constprop.1+0x9ca>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002aa8:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002aac:	9b04      	ldr	r3, [sp, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f040 810b 	bne.w	8002cca <LCD_Line.constprop.1+0x9c2>
 8002ab4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002ab8:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002abc:	9b03      	ldr	r3, [sp, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f040 80ff 	bne.w	8002cc2 <LCD_Line.constprop.1+0x9ba>
 8002ac4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002ac8:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002acc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f040 80f3 	bne.w	8002cba <LCD_Line.constprop.1+0x9b2>
 8002ad4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002ad8:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002adc:	2900      	cmp	r1, #0
 8002ade:	f040 80e8 	bne.w	8002cb2 <LCD_Line.constprop.1+0x9aa>
 8002ae2:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8002ae6:	f8ca 1010 	str.w	r1, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002aea:	2a00      	cmp	r2, #0
 8002aec:	f040 80dd 	bne.w	8002caa <LCD_Line.constprop.1+0x9a2>
 8002af0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002af4:	f8c9 2010 	str.w	r2, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002af8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f040 80d1 	bne.w	8002ca2 <LCD_Line.constprop.1+0x99a>
 8002b00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b04:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002b08:	2202      	movs	r2, #2
 8002b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b0e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002b12:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002b16:	f8cb 2010 	str.w	r2, [fp, #16]
 8002b1a:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b1e:	f8cb 4010 	str.w	r4, [fp, #16]
 8002b22:	f8cb e010 	str.w	lr, [fp, #16]
 8002b26:	f8ca 7010 	str.w	r7, [sl, #16]
 8002b2a:	f8ca 4010 	str.w	r4, [sl, #16]
 8002b2e:	f8c9 6010 	str.w	r6, [r9, #16]
 8002b32:	f8c9 5010 	str.w	r5, [r9, #16]
 8002b36:	f8c9 7010 	str.w	r7, [r9, #16]
 8002b3a:	f8c9 4010 	str.w	r4, [r9, #16]
 8002b3e:	f8c9 8010 	str.w	r8, [r9, #16]
 8002b42:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002b46:	2010      	movs	r0, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b48:	f8ca 5010 	str.w	r5, [sl, #16]
 8002b4c:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002b50:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b54:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002b58:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002b5c:	2040      	movs	r0, #64	; 0x40
 8002b5e:	f8ca 0010 	str.w	r0, [sl, #16]
 8002b62:	2080      	movs	r0, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b64:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002b68:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b6c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002b70:	f8c9 1010 	str.w	r1, [r9, #16]
 8002b74:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002b78:	2001      	movs	r0, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b7a:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002b7e:	f8cb 2010 	str.w	r2, [fp, #16]
 8002b82:	f8cb 3010 	str.w	r3, [fp, #16]
 8002b86:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b8a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002b8e:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002b92:	f04f 0c20 	mov.w	ip, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b96:	f8ca 7010 	str.w	r7, [sl, #16]
 8002b9a:	f8ca 4010 	str.w	r4, [sl, #16]
 8002b9e:	f8c9 6010 	str.w	r6, [r9, #16]
 8002ba2:	f8c9 5010 	str.w	r5, [r9, #16]
 8002ba6:	f8c9 7010 	str.w	r7, [r9, #16]
 8002baa:	f8c9 4010 	str.w	r4, [r9, #16]
 8002bae:	f8c9 8010 	str.w	r8, [r9, #16]
 8002bb2:	f8c9 0010 	str.w	r0, [r9, #16]
 8002bb6:	f8ca 5010 	str.w	r5, [sl, #16]
 8002bba:	f8ca 6010 	str.w	r6, [sl, #16]
 8002bbe:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002bc2:	2140      	movs	r1, #64	; 0x40
 8002bc4:	f8ca c010 	str.w	ip, [sl, #16]
 8002bc8:	2010      	movs	r0, #16
 8002bca:	f8ca 1010 	str.w	r1, [sl, #16]
 8002bce:	2180      	movs	r1, #128	; 0x80
 8002bd0:	f8ca 1010 	str.w	r1, [sl, #16]
 8002bd4:	f8c9 0010 	str.w	r0, [r9, #16]
 8002bd8:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bdc:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002be0:	f8cb 2010 	str.w	r2, [fp, #16]
		if (x1 == x2 && y1 == y2)
 8002be4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002be6:	f8cb 3010 	str.w	r3, [fp, #16]
 8002bea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002bec:	4293      	cmp	r3, r2
 8002bee:	f000 80e5 	beq.w	8002dbc <LCD_Line.constprop.1+0xab4>
		if (error2 > -deltaY)
 8002bf2:	9825      	ldr	r0, [sp, #148]	; 0x94
		error2 = error * 2;
 8002bf4:	9902      	ldr	r1, [sp, #8]
		if (error2 > -deltaY)
 8002bf6:	4243      	negs	r3, r0
 8002bf8:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
		error2 = error * 2;
 8002bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
		if (error2 > -deltaY)
 8002c00:	da24      	bge.n	8002c4c <LCD_Line.constprop.1+0x944>
			x1 += signX;
 8002c02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002c04:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
			error -= deltaY;
 8002c08:	1a09      	subs	r1, r1, r0
			x1 += signX;
 8002c0a:	4463      	add	r3, ip
			error -= deltaY;
 8002c0c:	9102      	str	r1, [sp, #8]
			x1 += signX;
 8002c0e:	b299      	uxth	r1, r3
 8002c10:	9110      	str	r1, [sp, #64]	; 0x40
 8002c12:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002c16:	9113      	str	r1, [sp, #76]	; 0x4c
 8002c18:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 8002c1c:	9100      	str	r1, [sp, #0]
 8002c1e:	f3c3 3181 	ubfx	r1, r3, #14, #2
 8002c22:	911f      	str	r1, [sp, #124]	; 0x7c
 8002c24:	f3c3 3142 	ubfx	r1, r3, #13, #3
 8002c28:	911d      	str	r1, [sp, #116]	; 0x74
 8002c2a:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8002c2e:	911b      	str	r1, [sp, #108]	; 0x6c
 8002c30:	f3c3 21c4 	ubfx	r1, r3, #11, #5
 8002c34:	9119      	str	r1, [sp, #100]	; 0x64
 8002c36:	f3c3 2185 	ubfx	r1, r3, #10, #6
 8002c3a:	9117      	str	r1, [sp, #92]	; 0x5c
 8002c3c:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8002c40:	9115      	str	r1, [sp, #84]	; 0x54
 8002c42:	b2d9      	uxtb	r1, r3
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	9121      	str	r1, [sp, #132]	; 0x84
 8002c4a:	9311      	str	r3, [sp, #68]	; 0x44
		if (error2 < deltaX)
 8002c4c:	9926      	ldr	r1, [sp, #152]	; 0x98
 8002c4e:	4291      	cmp	r1, r2
 8002c50:	f77f abbe 	ble.w	80023d0 <LCD_Line.constprop.1+0xc8>
			y1 += signY;
 8002c54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002c56:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002c58:	4413      	add	r3, r2
			error += deltaX;
 8002c5a:	9a02      	ldr	r2, [sp, #8]
 8002c5c:	440a      	add	r2, r1
 8002c5e:	9202      	str	r2, [sp, #8]
			y1 += signY;
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	9223      	str	r2, [sp, #140]	; 0x8c
 8002c64:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002c68:	9214      	str	r2, [sp, #80]	; 0x50
 8002c6a:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002c6e:	9201      	str	r2, [sp, #4]
 8002c70:	f3c3 3281 	ubfx	r2, r3, #14, #2
 8002c74:	9220      	str	r2, [sp, #128]	; 0x80
 8002c76:	f3c3 3242 	ubfx	r2, r3, #13, #3
 8002c7a:	921e      	str	r2, [sp, #120]	; 0x78
 8002c7c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8002c80:	921c      	str	r2, [sp, #112]	; 0x70
 8002c82:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 8002c86:	921a      	str	r2, [sp, #104]	; 0x68
 8002c88:	f3c3 2285 	ubfx	r2, r3, #10, #6
 8002c8c:	9218      	str	r2, [sp, #96]	; 0x60
 8002c8e:	f3c3 2246 	ubfx	r2, r3, #9, #7
 8002c92:	9216      	str	r2, [sp, #88]	; 0x58
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	9222      	str	r2, [sp, #136]	; 0x88
 8002c9c:	9312      	str	r3, [sp, #72]	; 0x48
 8002c9e:	f7ff bb97 	b.w	80023d0 <LCD_Line.constprop.1+0xc8>
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	f8c9 3010 	str.w	r3, [r9, #16]
 8002ca8:	e72e      	b.n	8002b08 <LCD_Line.constprop.1+0x800>
 8002caa:	2210      	movs	r2, #16
 8002cac:	f8c9 2010 	str.w	r2, [r9, #16]
 8002cb0:	e722      	b.n	8002af8 <LCD_Line.constprop.1+0x7f0>
 8002cb2:	2180      	movs	r1, #128	; 0x80
 8002cb4:	f8ca 1010 	str.w	r1, [sl, #16]
 8002cb8:	e717      	b.n	8002aea <LCD_Line.constprop.1+0x7e2>
 8002cba:	2040      	movs	r0, #64	; 0x40
 8002cbc:	f8ca 0010 	str.w	r0, [sl, #16]
 8002cc0:	e70c      	b.n	8002adc <LCD_Line.constprop.1+0x7d4>
 8002cc2:	2020      	movs	r0, #32
 8002cc4:	f8ca 0010 	str.w	r0, [sl, #16]
 8002cc8:	e700      	b.n	8002acc <LCD_Line.constprop.1+0x7c4>
 8002cca:	2010      	movs	r0, #16
 8002ccc:	f8ca 0010 	str.w	r0, [sl, #16]
 8002cd0:	e6f4      	b.n	8002abc <LCD_Line.constprop.1+0x7b4>
 8002cd2:	2008      	movs	r0, #8
 8002cd4:	f8ca 0010 	str.w	r0, [sl, #16]
 8002cd8:	e6e8      	b.n	8002aac <LCD_Line.constprop.1+0x7a4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cda:	f8ca 5010 	str.w	r5, [sl, #16]
 8002cde:	e6df      	b.n	8002aa0 <LCD_Line.constprop.1+0x798>
    GPIOx->BSRR = GPIO_Pin;
 8002ce0:	2020      	movs	r0, #32
 8002ce2:	f8c9 0010 	str.w	r0, [r9, #16]
 8002ce6:	e6b4      	b.n	8002a52 <LCD_Line.constprop.1+0x74a>
 8002ce8:	2010      	movs	r0, #16
 8002cea:	f8c9 0010 	str.w	r0, [r9, #16]
 8002cee:	e6a8      	b.n	8002a42 <LCD_Line.constprop.1+0x73a>
 8002cf0:	2080      	movs	r0, #128	; 0x80
 8002cf2:	f8ca 0010 	str.w	r0, [sl, #16]
 8002cf6:	e69c      	b.n	8002a32 <LCD_Line.constprop.1+0x72a>
 8002cf8:	2040      	movs	r0, #64	; 0x40
 8002cfa:	f8ca 0010 	str.w	r0, [sl, #16]
 8002cfe:	e690      	b.n	8002a22 <LCD_Line.constprop.1+0x71a>
 8002d00:	2020      	movs	r0, #32
 8002d02:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d06:	e684      	b.n	8002a12 <LCD_Line.constprop.1+0x70a>
 8002d08:	2010      	movs	r0, #16
 8002d0a:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d0e:	e678      	b.n	8002a02 <LCD_Line.constprop.1+0x6fa>
 8002d10:	2008      	movs	r0, #8
 8002d12:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d16:	e66c      	b.n	80029f2 <LCD_Line.constprop.1+0x6ea>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d18:	f8ca 5010 	str.w	r5, [sl, #16]
 8002d1c:	e664      	b.n	80029e8 <LCD_Line.constprop.1+0x6e0>
    GPIOx->BSRR = GPIO_Pin;
 8002d1e:	f04f 0c20 	mov.w	ip, #32
 8002d22:	f8c9 c010 	str.w	ip, [r9, #16]
 8002d26:	e635      	b.n	8002994 <LCD_Line.constprop.1+0x68c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d28:	f8ca 5010 	str.w	r5, [sl, #16]
 8002d2c:	e57c      	b.n	8002828 <LCD_Line.constprop.1+0x520>
    GPIOx->BSRR = GPIO_Pin;
 8002d2e:	2320      	movs	r3, #32
 8002d30:	f8c9 3010 	str.w	r3, [r9, #16]
 8002d34:	e51a      	b.n	800276c <LCD_Line.constprop.1+0x464>
 8002d36:	2210      	movs	r2, #16
 8002d38:	f8c9 2010 	str.w	r2, [r9, #16]
 8002d3c:	e50e      	b.n	800275c <LCD_Line.constprop.1+0x454>
 8002d3e:	2180      	movs	r1, #128	; 0x80
 8002d40:	f8ca 1010 	str.w	r1, [sl, #16]
 8002d44:	e503      	b.n	800274e <LCD_Line.constprop.1+0x446>
 8002d46:	2040      	movs	r0, #64	; 0x40
 8002d48:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d4c:	e4f8      	b.n	8002740 <LCD_Line.constprop.1+0x438>
 8002d4e:	2020      	movs	r0, #32
 8002d50:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d54:	e4ec      	b.n	8002730 <LCD_Line.constprop.1+0x428>
 8002d56:	2010      	movs	r0, #16
 8002d58:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d5c:	e4e0      	b.n	8002720 <LCD_Line.constprop.1+0x418>
 8002d5e:	2008      	movs	r0, #8
 8002d60:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d64:	e4cc      	b.n	8002700 <LCD_Line.constprop.1+0x3f8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d66:	f8ca 5010 	str.w	r5, [sl, #16]
 8002d6a:	e4c3      	b.n	80026f4 <LCD_Line.constprop.1+0x3ec>
    GPIOx->BSRR = GPIO_Pin;
 8002d6c:	2020      	movs	r0, #32
 8002d6e:	f8c9 0010 	str.w	r0, [r9, #16]
 8002d72:	e498      	b.n	80026a6 <LCD_Line.constprop.1+0x39e>
 8002d74:	2010      	movs	r0, #16
 8002d76:	f8c9 0010 	str.w	r0, [r9, #16]
 8002d7a:	e48c      	b.n	8002696 <LCD_Line.constprop.1+0x38e>
 8002d7c:	2080      	movs	r0, #128	; 0x80
 8002d7e:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d82:	e480      	b.n	8002686 <LCD_Line.constprop.1+0x37e>
 8002d84:	2040      	movs	r0, #64	; 0x40
 8002d86:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d8a:	e474      	b.n	8002676 <LCD_Line.constprop.1+0x36e>
 8002d8c:	2020      	movs	r0, #32
 8002d8e:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d92:	e468      	b.n	8002666 <LCD_Line.constprop.1+0x35e>
 8002d94:	2010      	movs	r0, #16
 8002d96:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d9a:	e45c      	b.n	8002656 <LCD_Line.constprop.1+0x34e>
 8002d9c:	2008      	movs	r0, #8
 8002d9e:	f8ca 0010 	str.w	r0, [sl, #16]
 8002da2:	e450      	b.n	8002646 <LCD_Line.constprop.1+0x33e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002da4:	f8ca 5010 	str.w	r5, [sl, #16]
 8002da8:	e448      	b.n	800263c <LCD_Line.constprop.1+0x334>
    GPIOx->BSRR = GPIO_Pin;
 8002daa:	f04f 0c20 	mov.w	ip, #32
 8002dae:	f8c9 c010 	str.w	ip, [r9, #16]
 8002db2:	e419      	b.n	80025e8 <LCD_Line.constprop.1+0x2e0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002db4:	f8ca 5010 	str.w	r5, [sl, #16]
 8002db8:	f7ff bb60 	b.w	800247c <LCD_Line.constprop.1+0x174>
		if (x1 == x2 && y1 == y2)
 8002dbc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8002dbe:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	f47f af16 	bne.w	8002bf2 <LCD_Line.constprop.1+0x8ea>
}
 8002dc6:	b02b      	add	sp, #172	; 0xac
 8002dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002dcc <I2C_RequestMemoryWrite.constprop.0>:
  * @param  MemAddSize Size of internal memory address
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
 8002dcc:	b470      	push	{r4, r5, r6}
{
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dce:	4c74      	ldr	r4, [pc, #464]	; (8002fa0 <I2C_RequestMemoryWrite.constprop.0+0x1d4>)
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
 8002dd0:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dd2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002dd4:	6813      	ldr	r3, [r2, #0]
 8002dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	e003      	b.n	8002de6 <I2C_RequestMemoryWrite.constprop.0+0x1a>
 8002dde:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de0:	1a5b      	subs	r3, r3, r1
 8002de2:	2b64      	cmp	r3, #100	; 0x64
 8002de4:	d836      	bhi.n	8002e54 <I2C_RequestMemoryWrite.constprop.0+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de6:	6953      	ldr	r3, [r2, #20]
 8002de8:	07db      	lsls	r3, r3, #31
 8002dea:	d5f8      	bpl.n	8002dde <I2C_RequestMemoryWrite.constprop.0+0x12>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dec:	23ae      	movs	r3, #174	; 0xae
 8002dee:	6113      	str	r3, [r2, #16]
 8002df0:	e00a      	b.n	8002e08 <I2C_RequestMemoryWrite.constprop.0+0x3c>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002df2:	6953      	ldr	r3, [r2, #20]
 8002df4:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002df8:	d15f      	bne.n	8002eba <I2C_RequestMemoryWrite.constprop.0+0xee>
 8002dfa:	6825      	ldr	r5, [r4, #0]
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfc:	eba5 0c01 	sub.w	ip, r5, r1
 8002e00:	f1bc 0f64 	cmp.w	ip, #100	; 0x64
 8002e04:	f200 80af 	bhi.w	8002f66 <I2C_RequestMemoryWrite.constprop.0+0x19a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e08:	6953      	ldr	r3, [r2, #20]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	f013 0302 	ands.w	r3, r3, #2
 8002e10:	d1ef      	bne.n	8002df2 <I2C_RequestMemoryWrite.constprop.0+0x26>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e12:	9301      	str	r3, [sp, #4]
 8002e14:	6953      	ldr	r3, [r2, #20]
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	6993      	ldr	r3, [r2, #24]
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e1e:	6953      	ldr	r3, [r2, #20]
 8002e20:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8002e24:	d163      	bne.n	8002eee <I2C_RequestMemoryWrite.constprop.0+0x122>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e26:	6955      	ldr	r5, [r2, #20]
 8002e28:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
 8002e2c:	d12c      	bne.n	8002e88 <I2C_RequestMemoryWrite.constprop.0+0xbc>
 8002e2e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e30:	1a5b      	subs	r3, r3, r1
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d9f3      	bls.n	8002e1e <I2C_RequestMemoryWrite.constprop.0+0x52>
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e36:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e38:	67e5      	str	r5, [r4, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e3a:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e3e:	f884 508a 	strb.w	r5, [r4, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e42:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8002e46:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e4a:	f043 0320 	orr.w	r3, r3, #32
 8002e4e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8002e52:	e02a      	b.n	8002eaa <I2C_RequestMemoryWrite.constprop.0+0xde>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e54:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e56:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e58:	67e1      	str	r1, [r4, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e5a:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e5e:	f884 108a 	strb.w	r1, [r4, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e62:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8002e66:	f884 1088 	strb.w	r1, [r4, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e6a:	f043 0320 	orr.w	r3, r3, #32
 8002e6e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e72:	6813      	ldr	r3, [r2, #0]
 8002e74:	05da      	lsls	r2, r3, #23
 8002e76:	d557      	bpl.n	8002f28 <I2C_RequestMemoryWrite.constprop.0+0x15c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e78:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8002e7c:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e7e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 8002e82:	b003      	add	sp, #12
 8002e84:	bc70      	pop	{r4, r5, r6}
 8002e86:	4770      	bx	lr
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e88:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e8a:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8002e8e:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e90:	67e3      	str	r3, [r4, #124]	; 0x7c
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e92:	f884 1089 	strb.w	r1, [r4, #137]	; 0x89
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e96:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e9a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e9e:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ea2:	f041 0104 	orr.w	r1, r1, #4
 8002ea6:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eaa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d070      	beq.n	8002f94 <I2C_RequestMemoryWrite.constprop.0+0x1c8>
    return HAL_ERROR;
 8002eb2:	2001      	movs	r0, #1
}
 8002eb4:	b003      	add	sp, #12
 8002eb6:	bc70      	pop	{r4, r5, r6}
 8002eb8:	4770      	bx	lr
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eba:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ebc:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ec0:	2520      	movs	r5, #32
    return HAL_ERROR;
 8002ec2:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec4:	6813      	ldr	r3, [r2, #0]
 8002ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eca:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ecc:	6156      	str	r6, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ece:	67e1      	str	r1, [r4, #124]	; 0x7c
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ed0:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed4:	f884 108a 	strb.w	r1, [r4, #138]	; 0x8a
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ed8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
      __HAL_UNLOCK(hi2c);
 8002edc:	f884 1088 	strb.w	r1, [r4, #136]	; 0x88
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ee0:	f043 0304 	orr.w	r3, r3, #4
 8002ee4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 8002ee8:	b003      	add	sp, #12
 8002eea:	bc70      	pop	{r4, r5, r6}
 8002eec:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002eee:	0a03      	lsrs	r3, r0, #8
 8002ef0:	6113      	str	r3, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ef2:	6953      	ldr	r3, [r2, #20]
 8002ef4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8002ef8:	d146      	bne.n	8002f88 <I2C_RequestMemoryWrite.constprop.0+0x1bc>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002efa:	6955      	ldr	r5, [r2, #20]
 8002efc:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
 8002f00:	d116      	bne.n	8002f30 <I2C_RequestMemoryWrite.constprop.0+0x164>
 8002f02:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f04:	1a5b      	subs	r3, r3, r1
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d9f3      	bls.n	8002ef2 <I2C_RequestMemoryWrite.constprop.0+0x126>
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f0a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f0c:	67e5      	str	r5, [r4, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f0e:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f12:	f884 508a 	strb.w	r5, [r4, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f16:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8002f1a:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f1e:	f043 0320 	orr.w	r3, r3, #32
 8002f22:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8002f26:	e014      	b.n	8002f52 <I2C_RequestMemoryWrite.constprop.0+0x186>
    return HAL_TIMEOUT;
 8002f28:	2003      	movs	r0, #3
}
 8002f2a:	b003      	add	sp, #12
 8002f2c:	bc70      	pop	{r4, r5, r6}
 8002f2e:	4770      	bx	lr
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f30:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f32:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8002f36:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f38:	67e3      	str	r3, [r4, #124]	; 0x7c
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f3a:	f884 1089 	strb.w	r1, [r4, #137]	; 0x89
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f3e:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f42:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
    __HAL_UNLOCK(hi2c);
 8002f46:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f4a:	f041 0104 	orr.w	r1, r1, #4
 8002f4e:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f52:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d1ab      	bne.n	8002eb2 <I2C_RequestMemoryWrite.constprop.0+0xe6>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5a:	6813      	ldr	r3, [r2, #0]
      return HAL_ERROR;
 8002f5c:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	e7c0      	b.n	8002ee8 <I2C_RequestMemoryWrite.constprop.0+0x11c>
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f66:	2220      	movs	r2, #32
    return HAL_ERROR;
 8002f68:	2001      	movs	r0, #1
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f6a:	67e3      	str	r3, [r4, #124]	; 0x7c
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f6c:	f884 2089 	strb.w	r2, [r4, #137]	; 0x89
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f70:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
        __HAL_UNLOCK(hi2c);
 8002f74:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f78:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 8002f82:	b003      	add	sp, #12
 8002f84:	bc70      	pop	{r4, r5, r6}
 8002f86:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f88:	b2c3      	uxtb	r3, r0
  return HAL_OK;
 8002f8a:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f8c:	6113      	str	r3, [r2, #16]
}
 8002f8e:	b003      	add	sp, #12
 8002f90:	bc70      	pop	{r4, r5, r6}
 8002f92:	4770      	bx	lr
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f94:	6813      	ldr	r3, [r2, #0]
    return HAL_ERROR;
 8002f96:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	e7a3      	b.n	8002ee8 <I2C_RequestMemoryWrite.constprop.0+0x11c>
 8002fa0:	20000200 	.word	0x20000200

08002fa4 <HAL_I2C_Mem_Read.constprop.0.isra.0>:
  __IO uint32_t count = 0U;
 8002fa4:	2200      	movs	r2, #0
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8002fa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa8:	4bac      	ldr	r3, [pc, #688]	; (800325c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2b8>)
 8002faa:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 8002fac:	9200      	str	r2, [sp, #0]
 8002fae:	681d      	ldr	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb0:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8002fb4:	2a20      	cmp	r2, #32
 8002fb6:	d001      	beq.n	8002fbc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x18>
}
 8002fb8:	b007      	add	sp, #28
 8002fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fbe:	e003      	b.n	8002fc8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x24>
 8002fc0:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc2:	1b64      	subs	r4, r4, r5
 8002fc4:	2c19      	cmp	r4, #25
 8002fc6:	d870      	bhi.n	80030aa <HAL_I2C_Mem_Read.constprop.0.isra.0+0x106>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fc8:	6994      	ldr	r4, [r2, #24]
 8002fca:	ea6f 0c04 	mvn.w	ip, r4
 8002fce:	f01c 0c02 	ands.w	ip, ip, #2
 8002fd2:	d0f5      	beq.n	8002fc0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1c>
    __HAL_LOCK(hi2c);
 8002fd4:	f893 4088 	ldrb.w	r4, [r3, #136]	; 0x88
 8002fd8:	2c01      	cmp	r4, #1
 8002fda:	d0ed      	beq.n	8002fb8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
 8002fdc:	2401      	movs	r4, #1
 8002fde:	f883 4088 	strb.w	r4, [r3, #136]	; 0x88
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fe2:	6814      	ldr	r4, [r2, #0]
 8002fe4:	07e7      	lsls	r7, r4, #31
 8002fe6:	d55b      	bpl.n	80030a0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xfc>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fe8:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fec:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff0:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 8002ff2:	2601      	movs	r6, #1
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ff4:	6814      	ldr	r4, [r2, #0]
 8002ff6:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8002ffa:	6014      	str	r4, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ffc:	4c98      	ldr	r4, [pc, #608]	; (8003260 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2bc>)
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ffe:	f883 e089 	strb.w	lr, [r3, #137]	; 0x89
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003002:	f883 c08a 	strb.w	ip, [r3, #138]	; 0x8a
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003006:	f8c3 708c 	str.w	r7, [r3, #140]	; 0x8c
    hi2c->XferCount   = Size;
 800300a:	f8a3 6076 	strh.w	r6, [r3, #118]	; 0x76
    hi2c->pBuffPtr    = pData;
 800300e:	6719      	str	r1, [r3, #112]	; 0x70
    hi2c->XferSize    = hi2c->XferCount;
 8003010:	f8b3 1076 	ldrh.w	r1, [r3, #118]	; 0x76
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003014:	679c      	str	r4, [r3, #120]	; 0x78
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003016:	6814      	ldr	r4, [r2, #0]
    hi2c->XferSize    = hi2c->XferCount;
 8003018:	b289      	uxth	r1, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800301a:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    hi2c->XferSize    = hi2c->XferCount;
 800301e:	f8a3 1074 	strh.w	r1, [r3, #116]	; 0x74
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003022:	6014      	str	r4, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003024:	6814      	ldr	r4, [r2, #0]
 8003026:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800302a:	6014      	str	r4, [r2, #0]
 800302c:	e003      	b.n	8003036 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x92>
 800302e:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003030:	1b64      	subs	r4, r4, r5
 8003032:	2c64      	cmp	r4, #100	; 0x64
 8003034:	d865      	bhi.n	8003102 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003036:	6954      	ldr	r4, [r2, #20]
 8003038:	07e6      	lsls	r6, r4, #31
 800303a:	d5f8      	bpl.n	800302e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x8a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800303c:	24ae      	movs	r4, #174	; 0xae
 800303e:	6114      	str	r4, [r2, #16]
 8003040:	e008      	b.n	8003054 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xb0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003042:	6954      	ldr	r4, [r2, #20]
 8003044:	f414 6480 	ands.w	r4, r4, #1024	; 0x400
 8003048:	d173      	bne.n	8003132 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x18e>
 800304a:	681e      	ldr	r6, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304c:	1b76      	subs	r6, r6, r5
 800304e:	2e64      	cmp	r6, #100	; 0x64
 8003050:	f200 8095 	bhi.w	800317e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1da>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003054:	6954      	ldr	r4, [r2, #20]
 8003056:	43e4      	mvns	r4, r4
 8003058:	f014 0402 	ands.w	r4, r4, #2
 800305c:	d1f1      	bne.n	8003042 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x9e>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800305e:	9405      	str	r4, [sp, #20]
 8003060:	6954      	ldr	r4, [r2, #20]
 8003062:	9405      	str	r4, [sp, #20]
 8003064:	6994      	ldr	r4, [r2, #24]
 8003066:	9405      	str	r4, [sp, #20]
 8003068:	9c05      	ldr	r4, [sp, #20]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800306a:	6954      	ldr	r4, [r2, #20]
 800306c:	f014 0480 	ands.w	r4, r4, #128	; 0x80
 8003070:	d176      	bne.n	8003160 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1bc>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003072:	6956      	ldr	r6, [r2, #20]
 8003074:	f416 6680 	ands.w	r6, r6, #1024	; 0x400
 8003078:	d128      	bne.n	80030cc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x128>
 800307a:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307c:	1b64      	subs	r4, r4, r5
 800307e:	2c64      	cmp	r4, #100	; 0x64
 8003080:	d9f3      	bls.n	800306a <HAL_I2C_Mem_Read.constprop.0.isra.0+0xc6>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003082:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003084:	67de      	str	r6, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8003086:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800308a:	f883 608a 	strb.w	r6, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800308e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8003092:	f883 6088 	strb.w	r6, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003096:	f041 0120 	orr.w	r1, r1, #32
 800309a:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
 800309e:	e026      	b.n	80030ee <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14a>
      __HAL_I2C_ENABLE(hi2c);
 80030a0:	6814      	ldr	r4, [r2, #0]
 80030a2:	f044 0401 	orr.w	r4, r4, #1
 80030a6:	6014      	str	r4, [r2, #0]
 80030a8:	e79e      	b.n	8002fe8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x44>
        hi2c->State             = HAL_I2C_STATE_READY;
 80030aa:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030ac:	f8c3 c07c 	str.w	ip, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 80030b0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030b4:	f883 c08a 	strb.w	ip, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 80030bc:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030c0:	f042 0220 	orr.w	r2, r2, #32
 80030c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 80030c8:	b007      	add	sp, #28
 80030ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State               = HAL_I2C_STATE_READY;
 80030cc:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ce:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 80030d2:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80030d4:	67dc      	str	r4, [r3, #124]	; 0x7c
    hi2c->State               = HAL_I2C_STATE_READY;
 80030d6:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030da:	f883 408a 	strb.w	r4, [r3, #138]	; 0x8a
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030de:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
    __HAL_UNLOCK(hi2c);
 80030e2:	f883 4088 	strb.w	r4, [r3, #136]	; 0x88
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030e6:	f041 0104 	orr.w	r1, r1, #4
 80030ea:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	f47f af60 	bne.w	8002fb8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f8:	6813      	ldr	r3, [r2, #0]
 80030fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	e75a      	b.n	8002fb8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003102:	2000      	movs	r0, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003104:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003106:	67d8      	str	r0, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8003108:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800310c:	f883 008a 	strb.w	r0, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003110:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8003114:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003118:	f041 0120 	orr.w	r1, r1, #32
 800311c:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003120:	6812      	ldr	r2, [r2, #0]
 8003122:	05d5      	lsls	r5, r2, #23
 8003124:	f57f af48 	bpl.w	8002fb8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003128:	f44f 7200 	mov.w	r2, #512	; 0x200
 800312c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003130:	e742      	b.n	8002fb8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003132:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003134:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003138:	2420      	movs	r4, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313a:	6810      	ldr	r0, [r2, #0]
 800313c:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8003140:	6010      	str	r0, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003142:	6155      	str	r5, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003144:	67d9      	str	r1, [r3, #124]	; 0x7c
      hi2c->State               = HAL_I2C_STATE_READY;
 8003146:	f883 4089 	strb.w	r4, [r3, #137]	; 0x89
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800314a:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800314e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
      __HAL_UNLOCK(hi2c);
 8003152:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003156:	f042 0204 	orr.w	r2, r2, #4
 800315a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800315e:	e72b      	b.n	8002fb8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003160:	0a04      	lsrs	r4, r0, #8
 8003162:	6114      	str	r4, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003164:	6954      	ldr	r4, [r2, #20]
 8003166:	f014 0480 	ands.w	r4, r4, #128	; 0x80
 800316a:	d117      	bne.n	800319c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1f8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800316c:	6956      	ldr	r6, [r2, #20]
 800316e:	f416 6680 	ands.w	r6, r6, #1024	; 0x400
 8003172:	d1ab      	bne.n	80030cc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x128>
 8003174:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003176:	1b64      	subs	r4, r4, r5
 8003178:	2c64      	cmp	r4, #100	; 0x64
 800317a:	d9f3      	bls.n	8003164 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1c0>
 800317c:	e781      	b.n	8003082 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xde>
        hi2c->State               = HAL_I2C_STATE_READY;
 800317e:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003180:	67dc      	str	r4, [r3, #124]	; 0x7c
        hi2c->State               = HAL_I2C_STATE_READY;
 8003182:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003186:	f883 408a 	strb.w	r4, [r3, #138]	; 0x8a
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800318a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 800318e:	f883 4088 	strb.w	r4, [r3, #136]	; 0x88
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003192:	f042 0220 	orr.w	r2, r2, #32
 8003196:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800319a:	e70d      	b.n	8002fb8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800319c:	b2c0      	uxtb	r0, r0
 800319e:	6110      	str	r0, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031a0:	6950      	ldr	r0, [r2, #20]
 80031a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80031a6:	d128      	bne.n	80031fa <HAL_I2C_Mem_Read.constprop.0.isra.0+0x256>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031a8:	6954      	ldr	r4, [r2, #20]
 80031aa:	f414 6480 	ands.w	r4, r4, #1024	; 0x400
 80031ae:	d112      	bne.n	80031d6 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x232>
 80031b0:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b2:	1b40      	subs	r0, r0, r5
 80031b4:	2864      	cmp	r0, #100	; 0x64
 80031b6:	d9f3      	bls.n	80031a0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1fc>
        hi2c->State             = HAL_I2C_STATE_READY;
 80031b8:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031ba:	67dc      	str	r4, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 80031bc:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031c0:	f883 408a 	strb.w	r4, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031c4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 80031c8:	f883 4088 	strb.w	r4, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031cc:	f041 0120 	orr.w	r1, r1, #32
 80031d0:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
 80031d4:	e78b      	b.n	80030ee <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14a>
    hi2c->State               = HAL_I2C_STATE_READY;
 80031d6:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d8:	f46f 6480 	mvn.w	r4, #1024	; 0x400
 80031dc:	6154      	str	r4, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80031de:	67d8      	str	r0, [r3, #124]	; 0x7c
    hi2c->State               = HAL_I2C_STATE_READY;
 80031e0:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e4:	f883 008a 	strb.w	r0, [r3, #138]	; 0x8a
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031e8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
    __HAL_UNLOCK(hi2c);
 80031ec:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031f0:	f041 0104 	orr.w	r1, r1, #4
 80031f4:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
 80031f8:	e779      	b.n	80030ee <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14a>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031fa:	6810      	ldr	r0, [r2, #0]
 80031fc:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8003200:	6010      	str	r0, [r2, #0]
 8003202:	e004      	b.n	800320e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x26a>
 8003204:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003206:	1b40      	subs	r0, r0, r5
 8003208:	2864      	cmp	r0, #100	; 0x64
 800320a:	f63f af7a 	bhi.w	8003102 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800320e:	6950      	ldr	r0, [r2, #20]
 8003210:	07c4      	lsls	r4, r0, #31
 8003212:	d5f7      	bpl.n	8003204 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x260>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003214:	20af      	movs	r0, #175	; 0xaf
 8003216:	6110      	str	r0, [r2, #16]
 8003218:	e007      	b.n	800322a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x286>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800321a:	6950      	ldr	r0, [r2, #20]
 800321c:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8003220:	d187      	bne.n	8003132 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x18e>
 8003222:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003224:	1b64      	subs	r4, r4, r5
 8003226:	2c64      	cmp	r4, #100	; 0x64
 8003228:	d81c      	bhi.n	8003264 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800322a:	6950      	ldr	r0, [r2, #20]
 800322c:	43c0      	mvns	r0, r0
 800322e:	f010 0002 	ands.w	r0, r0, #2
 8003232:	d1f2      	bne.n	800321a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x276>
    if (hi2c->XferSize == 0U)
 8003234:	bb31      	cbnz	r1, 8003284 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2e0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003236:	9104      	str	r1, [sp, #16]
 8003238:	6951      	ldr	r1, [r2, #20]
 800323a:	9104      	str	r1, [sp, #16]
 800323c:	6991      	ldr	r1, [r2, #24]
 800323e:	9104      	str	r1, [sp, #16]
 8003240:	9904      	ldr	r1, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003242:	6811      	ldr	r1, [r2, #0]
 8003244:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003248:	6011      	str	r1, [r2, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800324a:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800324c:	2120      	movs	r1, #32
    __HAL_UNLOCK(hi2c);
 800324e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    hi2c->State = HAL_I2C_STATE_READY;
 8003252:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003256:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    return HAL_OK;
 800325a:	e6ad      	b.n	8002fb8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
 800325c:	20000200 	.word	0x20000200
 8003260:	ffff0000 	.word	0xffff0000
        hi2c->State             = HAL_I2C_STATE_READY;
 8003264:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003266:	67d8      	str	r0, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8003268:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800326c:	f883 008a 	strb.w	r0, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003270:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8003274:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003278:	f042 0220 	orr.w	r2, r2, #32
 800327c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8003280:	b007      	add	sp, #28
 8003282:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (hi2c->XferSize == 1U)
 8003284:	2901      	cmp	r1, #1
 8003286:	f000 80ef 	beq.w	8003468 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4c4>
    else if (hi2c->XferSize == 2U)
 800328a:	2902      	cmp	r1, #2
 800328c:	f000 8104 	beq.w	8003498 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4f4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003290:	6814      	ldr	r4, [r2, #0]
 8003292:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8003296:	6014      	str	r4, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003298:	9001      	str	r0, [sp, #4]
 800329a:	6950      	ldr	r0, [r2, #20]
 800329c:	9001      	str	r0, [sp, #4]
 800329e:	6990      	ldr	r0, [r2, #24]
 80032a0:	9001      	str	r0, [sp, #4]
 80032a2:	9801      	ldr	r0, [sp, #4]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80032a4:	4e85      	ldr	r6, [pc, #532]	; (80034bc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x518>)
 80032a6:	4c86      	ldr	r4, [pc, #536]	; (80034c0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x51c>)
      if (hi2c->XferSize <= 3U)
 80032a8:	2903      	cmp	r1, #3
 80032aa:	d845      	bhi.n	8003338 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x394>
        if (hi2c->XferSize == 1U)
 80032ac:	2901      	cmp	r1, #1
 80032ae:	f000 80ad 	beq.w	800340c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x468>
        else if (hi2c->XferSize == 2U)
 80032b2:	2902      	cmp	r1, #2
 80032b4:	d005      	beq.n	80032c2 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x31e>
 80032b6:	e060      	b.n	800337a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x3d6>
 80032b8:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ba:	1b49      	subs	r1, r1, r5
 80032bc:	2964      	cmp	r1, #100	; 0x64
 80032be:	f200 80aa 	bhi.w	8003416 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x472>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032c2:	6951      	ldr	r1, [r2, #20]
 80032c4:	0748      	lsls	r0, r1, #29
 80032c6:	d5f7      	bpl.n	80032b8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x314>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032c8:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032cc:	6f18      	ldr	r0, [r3, #112]	; 0x70
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ce:	6811      	ldr	r1, [r2, #0]
 80032d0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80032d4:	6011      	str	r1, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d6:	6912      	ldr	r2, [r2, #16]
 80032d8:	7002      	strb	r2, [r0, #0]
          hi2c->pBuffPtr++;
 80032da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032dc:	3201      	adds	r2, #1
 80032de:	671a      	str	r2, [r3, #112]	; 0x70
          hi2c->XferSize--;
 80032e0:	f8b3 2074 	ldrh.w	r2, [r3, #116]	; 0x74
 80032e4:	3a01      	subs	r2, #1
 80032e6:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
          hi2c->XferCount--;
 80032ea:	f8b3 2076 	ldrh.w	r2, [r3, #118]	; 0x76
 80032ee:	3a01      	subs	r2, #1
 80032f0:	b292      	uxth	r2, r2
 80032f2:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
  __ASM volatile ("cpsie i" : : : "memory");
 80032f6:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032fa:	6911      	ldr	r1, [r2, #16]
 80032fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032fe:	7011      	strb	r1, [r2, #0]
          hi2c->pBuffPtr++;
 8003300:	6f1a      	ldr	r2, [r3, #112]	; 0x70
          hi2c->XferSize--;
 8003302:	f8b3 1074 	ldrh.w	r1, [r3, #116]	; 0x74
          hi2c->pBuffPtr++;
 8003306:	3201      	adds	r2, #1
 8003308:	671a      	str	r2, [r3, #112]	; 0x70
          hi2c->XferCount--;
 800330a:	f8b3 2076 	ldrh.w	r2, [r3, #118]	; 0x76
          hi2c->XferSize--;
 800330e:	3901      	subs	r1, #1
          hi2c->XferCount--;
 8003310:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 8003312:	b289      	uxth	r1, r1
          hi2c->XferCount--;
 8003314:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 8003316:	f8a3 1074 	strh.w	r1, [r3, #116]	; 0x74
          hi2c->XferCount--;
 800331a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
    while (hi2c->XferSize > 0U)
 800331e:	2900      	cmp	r1, #0
 8003320:	d093      	beq.n	800324a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2a6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003324:	e7c0      	b.n	80032a8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x304>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003326:	6950      	ldr	r0, [r2, #20]
 8003328:	f010 0010 	ands.w	r0, r0, #16
 800332c:	f040 8084 	bne.w	8003438 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x494>
 8003330:	6819      	ldr	r1, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003332:	1b49      	subs	r1, r1, r5
 8003334:	2964      	cmp	r1, #100	; 0x64
 8003336:	d895      	bhi.n	8003264 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2c0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003338:	6951      	ldr	r1, [r2, #20]
 800333a:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 800333e:	d0f2      	beq.n	8003326 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x382>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003340:	6911      	ldr	r1, [r2, #16]
 8003342:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003344:	7011      	strb	r1, [r2, #0]
        hi2c->XferCount--;
 8003346:	f8b3 2076 	ldrh.w	r2, [r3, #118]	; 0x76
        hi2c->pBuffPtr++;
 800334a:	6f18      	ldr	r0, [r3, #112]	; 0x70
        hi2c->XferCount--;
 800334c:	3a01      	subs	r2, #1
 800334e:	b292      	uxth	r2, r2
 8003350:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003354:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        hi2c->XferSize--;
 8003356:	f8b3 1074 	ldrh.w	r1, [r3, #116]	; 0x74
        hi2c->pBuffPtr++;
 800335a:	1c47      	adds	r7, r0, #1
 800335c:	671f      	str	r7, [r3, #112]	; 0x70
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800335e:	6957      	ldr	r7, [r2, #20]
        hi2c->XferSize--;
 8003360:	3901      	subs	r1, #1
 8003362:	b289      	uxth	r1, r1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003364:	077f      	lsls	r7, r7, #29
        hi2c->XferSize--;
 8003366:	f8a3 1074 	strh.w	r1, [r3, #116]	; 0x74
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800336a:	d5d8      	bpl.n	800331e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x37a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800336c:	6912      	ldr	r2, [r2, #16]
 800336e:	7042      	strb	r2, [r0, #1]
 8003370:	e7c6      	b.n	8003300 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x35c>
 8003372:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003374:	1b49      	subs	r1, r1, r5
 8003376:	2964      	cmp	r1, #100	; 0x64
 8003378:	d84d      	bhi.n	8003416 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x472>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800337a:	6951      	ldr	r1, [r2, #20]
 800337c:	0749      	lsls	r1, r1, #29
 800337e:	d5f8      	bpl.n	8003372 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x3ce>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003380:	6811      	ldr	r1, [r2, #0]
 8003382:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003386:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003388:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800338c:	6910      	ldr	r0, [r2, #16]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800338e:	6832      	ldr	r2, [r6, #0]
 8003390:	08d2      	lsrs	r2, r2, #3
 8003392:	fba4 1202 	umull	r1, r2, r4, r2
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003396:	6f19      	ldr	r1, [r3, #112]	; 0x70
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003398:	0a12      	lsrs	r2, r2, #8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800339a:	7008      	strb	r0, [r1, #0]
          hi2c->XferCount--;
 800339c:	f8b3 1076 	ldrh.w	r1, [r3, #118]	; 0x76
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
          hi2c->XferCount--;
 80033a4:	3901      	subs	r1, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033a6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
          hi2c->XferCount--;
 80033aa:	b289      	uxth	r1, r1
 80033ac:	f8a3 1076 	strh.w	r1, [r3, #118]	; 0x76
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033b0:	9200      	str	r2, [sp, #0]
          hi2c->XferSize--;
 80033b2:	f8b3 2074 	ldrh.w	r2, [r3, #116]	; 0x74
          hi2c->pBuffPtr++;
 80033b6:	6f18      	ldr	r0, [r3, #112]	; 0x70
          hi2c->XferSize--;
 80033b8:	3a01      	subs	r2, #1
 80033ba:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
          hi2c->pBuffPtr++;
 80033be:	1c42      	adds	r2, r0, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80033c0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
          hi2c->pBuffPtr++;
 80033c2:	671a      	str	r2, [r3, #112]	; 0x70
 80033c4:	e002      	b.n	80033cc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x428>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80033c6:	694a      	ldr	r2, [r1, #20]
 80033c8:	0752      	lsls	r2, r2, #29
 80033ca:	d446      	bmi.n	800345a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4b6>
            count--;
 80033cc:	9a00      	ldr	r2, [sp, #0]
 80033ce:	3a01      	subs	r2, #1
 80033d0:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 80033d2:	9a00      	ldr	r2, [sp, #0]
 80033d4:	2a00      	cmp	r2, #0
 80033d6:	d1f6      	bne.n	80033c6 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x422>
              hi2c->State               = HAL_I2C_STATE_READY;
 80033d8:	2120      	movs	r1, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80033da:	67da      	str	r2, [r3, #124]	; 0x7c
              hi2c->State               = HAL_I2C_STATE_READY;
 80033dc:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033e4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80033e8:	f041 0120 	orr.w	r1, r1, #32
 80033ec:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  __ASM volatile ("cpsie i" : : : "memory");
 80033f0:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80033f2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 80033f6:	b007      	add	sp, #28
 80033f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033fa:	6950      	ldr	r0, [r2, #20]
 80033fc:	f010 0010 	ands.w	r0, r0, #16
 8003400:	d11a      	bne.n	8003438 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x494>
 8003402:	6819      	ldr	r1, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003404:	1b49      	subs	r1, r1, r5
 8003406:	2964      	cmp	r1, #100	; 0x64
 8003408:	f63f af2c 	bhi.w	8003264 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2c0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800340c:	6951      	ldr	r1, [r2, #20]
 800340e:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 8003412:	d0f2      	beq.n	80033fa <HAL_I2C_Mem_Read.constprop.0.isra.0+0x456>
 8003414:	e771      	b.n	80032fa <HAL_I2C_Mem_Read.constprop.0.isra.0+0x356>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003416:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003418:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800341a:	67d9      	str	r1, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 800341c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003420:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003424:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8003428:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800342c:	f042 0220 	orr.w	r2, r2, #32
 8003430:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8003434:	b007      	add	sp, #28
 8003436:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003438:	f06f 0410 	mvn.w	r4, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 800343c:	2020      	movs	r0, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800343e:	6154      	str	r4, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003440:	67d9      	str	r1, [r3, #124]	; 0x7c
      hi2c->State               = HAL_I2C_STATE_READY;
 8003442:	f883 0089 	strb.w	r0, [r3, #137]	; 0x89
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003446:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800344a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
      __HAL_UNLOCK(hi2c);
 800344e:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8003456:	b007      	add	sp, #28
 8003458:	bdf0      	pop	{r4, r5, r6, r7, pc}
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345a:	680a      	ldr	r2, [r1, #0]
 800345c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003460:	600a      	str	r2, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003462:	690a      	ldr	r2, [r1, #16]
 8003464:	7042      	strb	r2, [r0, #1]
 8003466:	e738      	b.n	80032da <HAL_I2C_Mem_Read.constprop.0.isra.0+0x336>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003468:	6811      	ldr	r1, [r2, #0]
 800346a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800346e:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003470:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003474:	9003      	str	r0, [sp, #12]
 8003476:	6951      	ldr	r1, [r2, #20]
 8003478:	9103      	str	r1, [sp, #12]
 800347a:	6991      	ldr	r1, [r2, #24]
 800347c:	9103      	str	r1, [sp, #12]
 800347e:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003480:	6811      	ldr	r1, [r2, #0]
 8003482:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003486:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003488:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 800348a:	f8b3 1074 	ldrh.w	r1, [r3, #116]	; 0x74
 800348e:	2900      	cmp	r1, #0
 8003490:	f43f aedb 	beq.w	800324a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2a6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003494:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003496:	e705      	b.n	80032a4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x300>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003498:	6811      	ldr	r1, [r2, #0]
 800349a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800349e:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034a0:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034a4:	9002      	str	r0, [sp, #8]
 80034a6:	6951      	ldr	r1, [r2, #20]
 80034a8:	9102      	str	r1, [sp, #8]
 80034aa:	6991      	ldr	r1, [r2, #24]
 80034ac:	9102      	str	r1, [sp, #8]
 80034ae:	9902      	ldr	r1, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b0:	6811      	ldr	r1, [r2, #0]
 80034b2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80034b6:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034b8:	b662      	cpsie	i
}
 80034ba:	e7e6      	b.n	800348a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4e6>
 80034bc:	20000000 	.word	0x20000000
 80034c0:	14f8b589 	.word	0x14f8b589

080034c4 <AT24XX_Update>:
    } else
        return false;
}

uint8_t AT24XX_Read(uint16_t address) {
    uint16_t dt[1] = {0};
 80034c4:	2300      	movs	r3, #0
void AT24XX_Write(uint16_t address, uint8_t val) {
    uint8_t save[] = {val};
    AT24XX_Save(address, save, 1);
}

void AT24XX_Update(uint16_t address, uint8_t val) {
 80034c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034c8:	460d      	mov	r5, r1
 80034ca:	b083      	sub	sp, #12
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80034cc:	a901      	add	r1, sp, #4
    uint16_t dt[1] = {0};
 80034ce:	f8ad 3004 	strh.w	r3, [sp, #4]
void AT24XX_Update(uint16_t address, uint8_t val) {
 80034d2:	4606      	mov	r6, r0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80034d4:	f7ff fd66 	bl	8002fa4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 80034d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80034dc:	429d      	cmp	r5, r3
 80034de:	d101      	bne.n	80034e4 <AT24XX_Update+0x20>
}
 80034e0:	b003      	add	sp, #12
 80034e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034e4:	4c6a      	ldr	r4, [pc, #424]	; (8003690 <AT24XX_Update+0x1cc>)
    uint8_t save[] = {val};
 80034e6:	f88d 5004 	strb.w	r5, [sp, #4]
 80034ea:	6825      	ldr	r5, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ec:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	d1f5      	bne.n	80034e0 <AT24XX_Update+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034f4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80034f6:	e004      	b.n	8003502 <AT24XX_Update+0x3e>
 80034f8:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fa:	1b52      	subs	r2, r2, r5
 80034fc:	2a19      	cmp	r2, #25
 80034fe:	f200 80b7 	bhi.w	8003670 <AT24XX_Update+0x1ac>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003502:	698b      	ldr	r3, [r1, #24]
 8003504:	43db      	mvns	r3, r3
 8003506:	f013 0302 	ands.w	r3, r3, #2
 800350a:	d0f5      	beq.n	80034f8 <AT24XX_Update+0x34>
    __HAL_LOCK(hi2c);
 800350c:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8003510:	2b01      	cmp	r3, #1
 8003512:	d0e5      	beq.n	80034e0 <AT24XX_Update+0x1c>
 8003514:	2301      	movs	r3, #1
 8003516:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800351a:	680b      	ldr	r3, [r1, #0]
 800351c:	07da      	lsls	r2, r3, #31
 800351e:	d403      	bmi.n	8003528 <AT24XX_Update+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8003520:	680b      	ldr	r3, [r1, #0]
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	600b      	str	r3, [r1, #0]
    hi2c->XferCount   = Size;
 8003528:	2201      	movs	r2, #1
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800352a:	4630      	mov	r0, r6
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800352c:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003530:	2740      	movs	r7, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003532:	2600      	movs	r6, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003534:	680b      	ldr	r3, [r1, #0]
 8003536:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800353a:	600b      	str	r3, [r1, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800353c:	f884 c089 	strb.w	ip, [r4, #137]	; 0x89
    hi2c->pBuffPtr    = pData;
 8003540:	ab01      	add	r3, sp, #4
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003542:	f884 708a 	strb.w	r7, [r4, #138]	; 0x8a
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003546:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    hi2c->XferCount   = Size;
 800354a:	f8a4 2076 	strh.w	r2, [r4, #118]	; 0x76
    hi2c->XferSize    = hi2c->XferCount;
 800354e:	f8b4 2076 	ldrh.w	r2, [r4, #118]	; 0x76
    hi2c->pBuffPtr    = pData;
 8003552:	6723      	str	r3, [r4, #112]	; 0x70
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003554:	4b4f      	ldr	r3, [pc, #316]	; (8003694 <AT24XX_Update+0x1d0>)
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003556:	4629      	mov	r1, r5
    hi2c->XferSize    = hi2c->XferCount;
 8003558:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800355c:	67a3      	str	r3, [r4, #120]	; 0x78
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800355e:	f7ff fc35 	bl	8002dcc <I2C_RequestMemoryWrite.constprop.0>
 8003562:	2800      	cmp	r0, #0
 8003564:	d1bc      	bne.n	80034e0 <AT24XX_Update+0x1c>
    while (hi2c->XferSize > 0U)
 8003566:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
 800356a:	2800      	cmp	r0, #0
 800356c:	f000 808e 	beq.w	800368c <AT24XX_Update+0x1c8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003570:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003572:	694b      	ldr	r3, [r1, #20]
 8003574:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003578:	d116      	bne.n	80035a8 <AT24XX_Update+0xe4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800357a:	694a      	ldr	r2, [r1, #20]
 800357c:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8003580:	d135      	bne.n	80035ee <AT24XX_Update+0x12a>
 8003582:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003584:	1b5b      	subs	r3, r3, r5
 8003586:	2b64      	cmp	r3, #100	; 0x64
 8003588:	d9f3      	bls.n	8003572 <AT24XX_Update+0xae>
        hi2c->State             = HAL_I2C_STATE_READY;
 800358a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800358c:	67e2      	str	r2, [r4, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 800358e:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003592:	f884 208a 	strb.w	r2, [r4, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003596:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 800359a:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800359e:	f043 0320 	orr.w	r3, r3, #32
 80035a2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80035a6:	e033      	b.n	8003610 <AT24XX_Update+0x14c>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035a8:	6f26      	ldr	r6, [r4, #112]	; 0x70
      hi2c->XferSize--;
 80035aa:	1e42      	subs	r2, r0, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ac:	4633      	mov	r3, r6
 80035ae:	f813 7b01 	ldrb.w	r7, [r3], #1
      hi2c->XferSize--;
 80035b2:	b292      	uxth	r2, r2
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035b4:	610f      	str	r7, [r1, #16]
      hi2c->pBuffPtr++;
 80035b6:	6723      	str	r3, [r4, #112]	; 0x70
      hi2c->XferCount--;
 80035b8:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
      hi2c->XferSize--;
 80035bc:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
      hi2c->XferCount--;
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035c8:	694b      	ldr	r3, [r1, #20]
 80035ca:	075b      	lsls	r3, r3, #29
 80035cc:	d42a      	bmi.n	8003624 <AT24XX_Update+0x160>
      hi2c->XferSize--;
 80035ce:	4610      	mov	r0, r2
    while (hi2c->XferSize > 0U)
 80035d0:	2800      	cmp	r0, #0
 80035d2:	d1ce      	bne.n	8003572 <AT24XX_Update+0xae>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035d4:	694b      	ldr	r3, [r1, #20]
 80035d6:	f013 0304 	ands.w	r3, r3, #4
 80035da:	d136      	bne.n	800364a <AT24XX_Update+0x186>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035dc:	694a      	ldr	r2, [r1, #20]
 80035de:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 80035e2:	d104      	bne.n	80035ee <AT24XX_Update+0x12a>
 80035e4:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e6:	1b5b      	subs	r3, r3, r5
 80035e8:	2b64      	cmp	r3, #100	; 0x64
 80035ea:	d9f3      	bls.n	80035d4 <AT24XX_Update+0x110>
 80035ec:	e7cd      	b.n	800358a <AT24XX_Update+0xc6>
    hi2c->State               = HAL_I2C_STATE_READY;
 80035ee:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f0:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 80035f4:	6148      	str	r0, [r1, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80035f6:	67e3      	str	r3, [r4, #124]	; 0x7c
    hi2c->State               = HAL_I2C_STATE_READY;
 80035f8:	f884 2089 	strb.w	r2, [r4, #137]	; 0x89
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035fc:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003600:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
    __HAL_UNLOCK(hi2c);
 8003604:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003608:	f042 0204 	orr.w	r2, r2, #4
 800360c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003610:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003614:	2b04      	cmp	r3, #4
 8003616:	f47f af63 	bne.w	80034e0 <AT24XX_Update+0x1c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361a:	680b      	ldr	r3, [r1, #0]
 800361c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003620:	600b      	str	r3, [r1, #0]
 8003622:	e75d      	b.n	80034e0 <AT24XX_Update+0x1c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003624:	2a00      	cmp	r2, #0
 8003626:	d0d5      	beq.n	80035d4 <AT24XX_Update+0x110>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003628:	7873      	ldrb	r3, [r6, #1]
        hi2c->XferSize--;
 800362a:	3802      	subs	r0, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800362c:	610b      	str	r3, [r1, #16]
        hi2c->XferCount--;
 800362e:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
        hi2c->XferSize--;
 8003632:	b280      	uxth	r0, r0
        hi2c->XferCount--;
 8003634:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 8003636:	3602      	adds	r6, #2
        hi2c->XferCount--;
 8003638:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 800363a:	6726      	str	r6, [r4, #112]	; 0x70
        hi2c->XferSize--;
 800363c:	f8a4 0074 	strh.w	r0, [r4, #116]	; 0x74
        hi2c->XferCount--;
 8003640:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
    while (hi2c->XferSize > 0U)
 8003644:	2800      	cmp	r0, #0
 8003646:	d194      	bne.n	8003572 <AT24XX_Update+0xae>
 8003648:	e7c4      	b.n	80035d4 <AT24XX_Update+0x110>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800364a:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800364c:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364e:	680b      	ldr	r3, [r1, #0]
 8003650:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003654:	600b      	str	r3, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003656:	f884 0089 	strb.w	r0, [r4, #137]	; 0x89
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800365a:	f884 208a 	strb.w	r2, [r4, #138]	; 0x8a
    __HAL_UNLOCK(hi2c);
 800365e:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
 8003662:	6822      	ldr	r2, [r4, #0]
 8003664:	6823      	ldr	r3, [r4, #0]
  while ((HAL_GetTick() - tickstart) < wait)
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	2b05      	cmp	r3, #5
 800366a:	d9fb      	bls.n	8003664 <AT24XX_Update+0x1a0>
}
 800366c:	b003      	add	sp, #12
 800366e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 8003670:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003672:	67e3      	str	r3, [r4, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8003674:	f884 2089 	strb.w	r2, [r4, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003678:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
        __HAL_UNLOCK(hi2c);
 800367c:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003680:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800368a:	e729      	b.n	80034e0 <AT24XX_Update+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800368c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800368e:	e7a1      	b.n	80035d4 <AT24XX_Update+0x110>
 8003690:	20000200 	.word	0x20000200
 8003694:	ffff0000 	.word	0xffff0000

08003698 <HAL_I2C_Master_Receive.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8003698:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800369a:	2400      	movs	r4, #0
  return uwTick;
 800369c:	4b92      	ldr	r3, [pc, #584]	; (80038e8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x250>)
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 800369e:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 80036a0:	9400      	str	r4, [sp, #0]
 80036a2:	681e      	ldr	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a4:	f893 4089 	ldrb.w	r4, [r3, #137]	; 0x89
 80036a8:	2c20      	cmp	r4, #32
 80036aa:	d001      	beq.n	80036b0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x18>
}
 80036ac:	b007      	add	sp, #28
 80036ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80036b2:	e004      	b.n	80036be <HAL_I2C_Master_Receive.constprop.0.isra.0+0x26>
 80036b4:	681d      	ldr	r5, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b6:	1bad      	subs	r5, r5, r6
 80036b8:	2d19      	cmp	r5, #25
 80036ba:	f200 80b9 	bhi.w	8003830 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x198>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036be:	69a5      	ldr	r5, [r4, #24]
 80036c0:	ea6f 0c05 	mvn.w	ip, r5
 80036c4:	f01c 0c02 	ands.w	ip, ip, #2
 80036c8:	d0f4      	beq.n	80036b4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1c>
    __HAL_LOCK(hi2c);
 80036ca:	f893 5088 	ldrb.w	r5, [r3, #136]	; 0x88
 80036ce:	2d01      	cmp	r5, #1
 80036d0:	d0ec      	beq.n	80036ac <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
 80036d2:	2501      	movs	r5, #1
 80036d4:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036d8:	6825      	ldr	r5, [r4, #0]
 80036da:	07ed      	lsls	r5, r5, #31
 80036dc:	d561      	bpl.n	80037a2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x10a>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80036de:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036e2:	f04f 0c10 	mov.w	ip, #16
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036e6:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036e8:	6825      	ldr	r5, [r4, #0]
 80036ea:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 80036ee:	6025      	str	r5, [r4, #0]
    hi2c->pBuffPtr    = pData;
 80036f0:	6719      	str	r1, [r3, #112]	; 0x70
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036f2:	497e      	ldr	r1, [pc, #504]	; (80038ec <HAL_I2C_Master_Receive.constprop.0.isra.0+0x254>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80036f4:	f883 e089 	strb.w	lr, [r3, #137]	; 0x89
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036f8:	f883 c08a 	strb.w	ip, [r3, #138]	; 0x8a
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036fc:	f8c3 708c 	str.w	r7, [r3, #140]	; 0x8c
    hi2c->XferCount   = Size;
 8003700:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
    hi2c->XferSize    = hi2c->XferCount;
 8003704:	f8b3 2076 	ldrh.w	r2, [r3, #118]	; 0x76
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003708:	6799      	str	r1, [r3, #120]	; 0x78
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800370a:	6f9d      	ldr	r5, [r3, #120]	; 0x78
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800370c:	6821      	ldr	r1, [r4, #0]
    hi2c->XferSize    = hi2c->XferCount;
 800370e:	b292      	uxth	r2, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003710:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003714:	2d08      	cmp	r5, #8
    hi2c->XferSize    = hi2c->XferCount;
 8003716:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800371a:	6021      	str	r1, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800371c:	d007      	beq.n	800372e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x96>
 800371e:	2d01      	cmp	r5, #1
 8003720:	d005      	beq.n	800372e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x96>
 8003722:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8003726:	d002      	beq.n	800372e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x96>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003728:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800372a:	2911      	cmp	r1, #17
 800372c:	d109      	bne.n	8003742 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xaa>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800372e:	6821      	ldr	r1, [r4, #0]
 8003730:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003734:	6021      	str	r1, [r4, #0]
 8003736:	e004      	b.n	8003742 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xaa>
 8003738:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373a:	1b89      	subs	r1, r1, r6
 800373c:	2964      	cmp	r1, #100	; 0x64
 800373e:	f200 8088 	bhi.w	8003852 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003742:	6961      	ldr	r1, [r4, #20]
 8003744:	07cf      	lsls	r7, r1, #31
 8003746:	d5f7      	bpl.n	8003738 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003748:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800374a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800374e:	d12d      	bne.n	80037ac <HAL_I2C_Master_Receive.constprop.0.isra.0+0x114>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003750:	f040 0001 	orr.w	r0, r0, #1
 8003754:	b2c0      	uxtb	r0, r0
 8003756:	6120      	str	r0, [r4, #16]
 8003758:	e008      	b.n	800376c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xd4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800375a:	6961      	ldr	r1, [r4, #20]
 800375c:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003760:	f040 808f 	bne.w	8003882 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1ea>
 8003764:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003766:	1b80      	subs	r0, r0, r6
 8003768:	2864      	cmp	r0, #100	; 0x64
 800376a:	d851      	bhi.n	8003810 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x178>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800376c:	6961      	ldr	r1, [r4, #20]
 800376e:	43c9      	mvns	r1, r1
 8003770:	f011 0102 	ands.w	r1, r1, #2
 8003774:	d1f1      	bne.n	800375a <HAL_I2C_Master_Receive.constprop.0.isra.0+0xc2>
    if (hi2c->XferSize == 0U)
 8003776:	2a00      	cmp	r2, #0
 8003778:	f040 809b 	bne.w	80038b2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x21a>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377c:	9204      	str	r2, [sp, #16]
 800377e:	6962      	ldr	r2, [r4, #20]
 8003780:	9204      	str	r2, [sp, #16]
 8003782:	69a2      	ldr	r2, [r4, #24]
 8003784:	9204      	str	r2, [sp, #16]
 8003786:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003788:	6822      	ldr	r2, [r4, #0]
 800378a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378e:	6022      	str	r2, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003790:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003792:	2120      	movs	r1, #32
    __HAL_UNLOCK(hi2c);
 8003794:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    hi2c->State = HAL_I2C_STATE_READY;
 8003798:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800379c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    return HAL_OK;
 80037a0:	e784      	b.n	80036ac <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
      __HAL_I2C_ENABLE(hi2c);
 80037a2:	6825      	ldr	r5, [r4, #0]
 80037a4:	f045 0501 	orr.w	r5, r5, #1
 80037a8:	6025      	str	r5, [r4, #0]
 80037aa:	e798      	b.n	80036de <HAL_I2C_Master_Receive.constprop.0.isra.0+0x46>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037ac:	21f0      	movs	r1, #240	; 0xf0
 80037ae:	6121      	str	r1, [r4, #16]
 80037b0:	e007      	b.n	80037c2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x12a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037b2:	6961      	ldr	r1, [r4, #20]
 80037b4:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 80037b8:	d163      	bne.n	8003882 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1ea>
 80037ba:	681d      	ldr	r5, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037bc:	1bad      	subs	r5, r5, r6
 80037be:	2d64      	cmp	r5, #100	; 0x64
 80037c0:	d826      	bhi.n	8003810 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x178>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037c2:	6961      	ldr	r1, [r4, #20]
 80037c4:	070d      	lsls	r5, r1, #28
 80037c6:	d5f4      	bpl.n	80037b2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x11a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037c8:	6120      	str	r0, [r4, #16]
 80037ca:	e007      	b.n	80037dc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x144>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037cc:	6961      	ldr	r1, [r4, #20]
 80037ce:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 80037d2:	d156      	bne.n	8003882 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1ea>
 80037d4:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d6:	1b80      	subs	r0, r0, r6
 80037d8:	2864      	cmp	r0, #100	; 0x64
 80037da:	d819      	bhi.n	8003810 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x178>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037dc:	6961      	ldr	r1, [r4, #20]
 80037de:	43c9      	mvns	r1, r1
 80037e0:	f011 0102 	ands.w	r1, r1, #2
 80037e4:	d1f2      	bne.n	80037cc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x134>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e6:	9105      	str	r1, [sp, #20]
 80037e8:	6961      	ldr	r1, [r4, #20]
 80037ea:	9105      	str	r1, [sp, #20]
 80037ec:	69a1      	ldr	r1, [r4, #24]
 80037ee:	9105      	str	r1, [sp, #20]
 80037f0:	9905      	ldr	r1, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037f2:	6821      	ldr	r1, [r4, #0]
 80037f4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80037f8:	6021      	str	r1, [r4, #0]
 80037fa:	e003      	b.n	8003804 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x16c>
 80037fc:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fe:	1b89      	subs	r1, r1, r6
 8003800:	2964      	cmp	r1, #100	; 0x64
 8003802:	d826      	bhi.n	8003852 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003804:	6961      	ldr	r1, [r4, #20]
 8003806:	07c9      	lsls	r1, r1, #31
 8003808:	d5f8      	bpl.n	80037fc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x164>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800380a:	21f1      	movs	r1, #241	; 0xf1
 800380c:	6121      	str	r1, [r4, #16]
 800380e:	e7ad      	b.n	800376c <HAL_I2C_Master_Receive.constprop.0.isra.0+0xd4>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003810:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003812:	67d9      	str	r1, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8003814:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003818:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800381c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8003820:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003824:	f042 0220 	orr.w	r2, r2, #32
 8003828:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800382c:	b007      	add	sp, #28
 800382e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 8003830:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003832:	f8c3 c07c 	str.w	ip, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8003836:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800383a:	f883 c08a 	strb.w	ip, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800383e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8003842:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003846:	f042 0220 	orr.w	r2, r2, #32
 800384a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800384e:	b007      	add	sp, #28
 8003850:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003852:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003854:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003856:	67d9      	str	r1, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8003858:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800385c:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003860:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8003864:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003868:	f042 0220 	orr.w	r2, r2, #32
 800386c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003870:	6822      	ldr	r2, [r4, #0]
 8003872:	05d0      	lsls	r0, r2, #23
 8003874:	f57f af1a 	bpl.w	80036ac <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800387c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003880:	e714      	b.n	80036ac <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003882:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003884:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003888:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388a:	6822      	ldr	r2, [r4, #0]
 800388c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003890:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003892:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003894:	67d9      	str	r1, [r3, #124]	; 0x7c
      hi2c->State               = HAL_I2C_STATE_READY;
 8003896:	f883 0089 	strb.w	r0, [r3, #137]	; 0x89
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389a:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800389e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
      __HAL_UNLOCK(hi2c);
 80038a2:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038a6:	f042 0204 	orr.w	r2, r2, #4
 80038aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 80038ae:	b007      	add	sp, #28
 80038b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (hi2c->XferSize == 1U)
 80038b2:	2a01      	cmp	r2, #1
 80038b4:	f000 8114 	beq.w	8003ae0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x448>
    else if (hi2c->XferSize == 2U)
 80038b8:	2a02      	cmp	r2, #2
 80038ba:	f000 80d1 	beq.w	8003a60 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3c8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038be:	6820      	ldr	r0, [r4, #0]
 80038c0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 80038c4:	6020      	str	r0, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c6:	9101      	str	r1, [sp, #4]
 80038c8:	6961      	ldr	r1, [r4, #20]
 80038ca:	9101      	str	r1, [sp, #4]
 80038cc:	69a1      	ldr	r1, [r4, #24]
 80038ce:	9101      	str	r1, [sp, #4]
 80038d0:	9901      	ldr	r1, [sp, #4]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80038d2:	4d07      	ldr	r5, [pc, #28]	; (80038f0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x258>)
 80038d4:	4807      	ldr	r0, [pc, #28]	; (80038f4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x25c>)
      if (hi2c->XferSize <= 3U)
 80038d6:	2a03      	cmp	r2, #3
 80038d8:	d850      	bhi.n	800397c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2e4>
        if (hi2c->XferSize == 1U)
 80038da:	2a01      	cmp	r2, #1
 80038dc:	f000 80b8 	beq.w	8003a50 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3b8>
        else if (hi2c->XferSize == 2U)
 80038e0:	2a02      	cmp	r2, #2
 80038e2:	d00e      	beq.n	8003902 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x26a>
 80038e4:	e06b      	b.n	80039be <HAL_I2C_Master_Receive.constprop.0.isra.0+0x326>
 80038e6:	bf00      	nop
 80038e8:	20000200 	.word	0x20000200
 80038ec:	ffff0000 	.word	0xffff0000
 80038f0:	20000000 	.word	0x20000000
 80038f4:	14f8b589 	.word	0x14f8b589
 80038f8:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fa:	1b92      	subs	r2, r2, r6
 80038fc:	2a64      	cmp	r2, #100	; 0x64
 80038fe:	f200 80c7 	bhi.w	8003a90 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3f8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003902:	6962      	ldr	r2, [r4, #20]
 8003904:	0757      	lsls	r7, r2, #29
 8003906:	d5f7      	bpl.n	80038f8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x260>
  __ASM volatile ("cpsid i" : : : "memory");
 8003908:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800390c:	6f1c      	ldr	r4, [r3, #112]	; 0x70
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390e:	6811      	ldr	r1, [r2, #0]
 8003910:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003914:	6011      	str	r1, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003916:	6912      	ldr	r2, [r2, #16]
 8003918:	7022      	strb	r2, [r4, #0]
          hi2c->pBuffPtr++;
 800391a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800391c:	3201      	adds	r2, #1
 800391e:	671a      	str	r2, [r3, #112]	; 0x70
          hi2c->XferSize--;
 8003920:	f8b3 2074 	ldrh.w	r2, [r3, #116]	; 0x74
 8003924:	3a01      	subs	r2, #1
 8003926:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
          hi2c->XferCount--;
 800392a:	f8b3 2076 	ldrh.w	r2, [r3, #118]	; 0x76
 800392e:	3a01      	subs	r2, #1
 8003930:	b292      	uxth	r2, r2
 8003932:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
  __ASM volatile ("cpsie i" : : : "memory");
 8003936:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003938:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800393a:	6911      	ldr	r1, [r2, #16]
 800393c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800393e:	7011      	strb	r1, [r2, #0]
          hi2c->pBuffPtr++;
 8003940:	6f1a      	ldr	r2, [r3, #112]	; 0x70
          hi2c->XferCount--;
 8003942:	f8b3 1076 	ldrh.w	r1, [r3, #118]	; 0x76
          hi2c->pBuffPtr++;
 8003946:	3201      	adds	r2, #1
 8003948:	671a      	str	r2, [r3, #112]	; 0x70
          hi2c->XferSize--;
 800394a:	f8b3 2074 	ldrh.w	r2, [r3, #116]	; 0x74
          hi2c->XferCount--;
 800394e:	3901      	subs	r1, #1
          hi2c->XferSize--;
 8003950:	3a01      	subs	r2, #1
 8003952:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8003954:	b289      	uxth	r1, r1
          hi2c->XferSize--;
 8003956:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
          hi2c->XferCount--;
 800395a:	f8a3 1076 	strh.w	r1, [r3, #118]	; 0x76
    while (hi2c->XferSize > 0U)
 800395e:	2a00      	cmp	r2, #0
 8003960:	f43f af16 	beq.w	8003790 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003964:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8003966:	e7b6      	b.n	80038d6 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x23e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003968:	6961      	ldr	r1, [r4, #20]
 800396a:	f011 0110 	ands.w	r1, r1, #16
 800396e:	f040 80a0 	bne.w	8003ab2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x41a>
 8003972:	681a      	ldr	r2, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003974:	1b92      	subs	r2, r2, r6
 8003976:	2a64      	cmp	r2, #100	; 0x64
 8003978:	f63f af4a 	bhi.w	8003810 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x178>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800397c:	6962      	ldr	r2, [r4, #20]
 800397e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8003982:	d0f1      	beq.n	8003968 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2d0>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003984:	6921      	ldr	r1, [r4, #16]
 8003986:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003988:	7011      	strb	r1, [r2, #0]
        hi2c->XferCount--;
 800398a:	f8b3 2076 	ldrh.w	r2, [r3, #118]	; 0x76
        hi2c->pBuffPtr++;
 800398e:	6f19      	ldr	r1, [r3, #112]	; 0x70
        hi2c->XferCount--;
 8003990:	3a01      	subs	r2, #1
 8003992:	b292      	uxth	r2, r2
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003994:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
        hi2c->XferCount--;
 8003996:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        hi2c->pBuffPtr++;
 800399a:	1c4f      	adds	r7, r1, #1
        hi2c->XferSize--;
 800399c:	f8b3 2074 	ldrh.w	r2, [r3, #116]	; 0x74
        hi2c->pBuffPtr++;
 80039a0:	671f      	str	r7, [r3, #112]	; 0x70
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039a2:	6967      	ldr	r7, [r4, #20]
        hi2c->XferSize--;
 80039a4:	3a01      	subs	r2, #1
 80039a6:	b292      	uxth	r2, r2
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039a8:	077f      	lsls	r7, r7, #29
        hi2c->XferSize--;
 80039aa:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039ae:	d5d6      	bpl.n	800395e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2c6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b0:	6922      	ldr	r2, [r4, #16]
 80039b2:	704a      	strb	r2, [r1, #1]
 80039b4:	e7c4      	b.n	8003940 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2a8>
 80039b6:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b8:	1b92      	subs	r2, r2, r6
 80039ba:	2a64      	cmp	r2, #100	; 0x64
 80039bc:	d868      	bhi.n	8003a90 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3f8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039be:	6962      	ldr	r2, [r4, #20]
 80039c0:	0751      	lsls	r1, r2, #29
 80039c2:	d5f8      	bpl.n	80039b6 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x31e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c4:	6822      	ldr	r2, [r4, #0]
 80039c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ca:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039cc:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039d0:	6914      	ldr	r4, [r2, #16]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039d2:	682a      	ldr	r2, [r5, #0]
 80039d4:	08d2      	lsrs	r2, r2, #3
 80039d6:	fba0 1202 	umull	r1, r2, r0, r2
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039da:	6f19      	ldr	r1, [r3, #112]	; 0x70
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039dc:	0a12      	lsrs	r2, r2, #8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039de:	700c      	strb	r4, [r1, #0]
          hi2c->XferCount--;
 80039e0:	f8b3 1076 	ldrh.w	r1, [r3, #118]	; 0x76
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039e4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
          hi2c->XferCount--;
 80039e8:	3901      	subs	r1, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039ea:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
          hi2c->XferCount--;
 80039ee:	b289      	uxth	r1, r1
 80039f0:	f8a3 1076 	strh.w	r1, [r3, #118]	; 0x76
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039f4:	9200      	str	r2, [sp, #0]
          hi2c->XferSize--;
 80039f6:	f8b3 2074 	ldrh.w	r2, [r3, #116]	; 0x74
          hi2c->pBuffPtr++;
 80039fa:	6f1c      	ldr	r4, [r3, #112]	; 0x70
          hi2c->XferSize--;
 80039fc:	3a01      	subs	r2, #1
 80039fe:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
          hi2c->pBuffPtr++;
 8003a02:	1c62      	adds	r2, r4, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a04:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
          hi2c->pBuffPtr++;
 8003a06:	671a      	str	r2, [r3, #112]	; 0x70
 8003a08:	e002      	b.n	8003a10 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x378>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a0a:	694a      	ldr	r2, [r1, #20]
 8003a0c:	0752      	lsls	r2, r2, #29
 8003a0e:	d460      	bmi.n	8003ad2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x43a>
            count--;
 8003a10:	9a00      	ldr	r2, [sp, #0]
 8003a12:	3a01      	subs	r2, #1
 8003a14:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 8003a16:	9a00      	ldr	r2, [sp, #0]
 8003a18:	2a00      	cmp	r2, #0
 8003a1a:	d1f6      	bne.n	8003a0a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x372>
              hi2c->State               = HAL_I2C_STATE_READY;
 8003a1c:	2120      	movs	r1, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1e:	67da      	str	r2, [r3, #124]	; 0x7c
              hi2c->State               = HAL_I2C_STATE_READY;
 8003a20:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a24:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a28:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003a2c:	f041 0120 	orr.w	r1, r1, #32
 8003a30:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  __ASM volatile ("cpsie i" : : : "memory");
 8003a34:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8003a36:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8003a3a:	b007      	add	sp, #28
 8003a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a3e:	6961      	ldr	r1, [r4, #20]
 8003a40:	f011 0110 	ands.w	r1, r1, #16
 8003a44:	d135      	bne.n	8003ab2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x41a>
 8003a46:	681a      	ldr	r2, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a48:	1b92      	subs	r2, r2, r6
 8003a4a:	2a64      	cmp	r2, #100	; 0x64
 8003a4c:	f63f aee0 	bhi.w	8003810 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x178>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a50:	6962      	ldr	r2, [r4, #20]
 8003a52:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8003a56:	d0f2      	beq.n	8003a3e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a58:	6921      	ldr	r1, [r4, #16]
 8003a5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a5c:	7011      	strb	r1, [r2, #0]
 8003a5e:	e76f      	b.n	8003940 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2a8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a60:	6822      	ldr	r2, [r4, #0]
 8003a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a66:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a68:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a6c:	9102      	str	r1, [sp, #8]
 8003a6e:	6951      	ldr	r1, [r2, #20]
 8003a70:	9102      	str	r1, [sp, #8]
 8003a72:	6991      	ldr	r1, [r2, #24]
 8003a74:	9102      	str	r1, [sp, #8]
 8003a76:	9902      	ldr	r1, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a78:	6811      	ldr	r1, [r2, #0]
 8003a7a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003a7e:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a80:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 8003a82:	f8b3 2074 	ldrh.w	r2, [r3, #116]	; 0x74
 8003a86:	2a00      	cmp	r2, #0
 8003a88:	f43f ae82 	beq.w	8003790 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a8c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8003a8e:	e720      	b.n	80038d2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x23a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a90:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a92:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a94:	67d9      	str	r1, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a96:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a9a:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a9e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8003aa2:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003aa6:	f042 0220 	orr.w	r2, r2, #32
 8003aaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8003aae:	b007      	add	sp, #28
 8003ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ab2:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ab4:	f06f 0010 	mvn.w	r0, #16
 8003ab8:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aba:	67da      	str	r2, [r3, #124]	; 0x7c
      hi2c->State               = HAL_I2C_STATE_READY;
 8003abc:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ac0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ac4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
      __HAL_UNLOCK(hi2c);
 8003ac8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003acc:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
 8003ad0:	e5ec      	b.n	80036ac <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad2:	680a      	ldr	r2, [r1, #0]
 8003ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad8:	600a      	str	r2, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ada:	690a      	ldr	r2, [r1, #16]
 8003adc:	7062      	strb	r2, [r4, #1]
 8003ade:	e71c      	b.n	800391a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x282>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae0:	6822      	ldr	r2, [r4, #0]
 8003ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae6:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ae8:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003aec:	9103      	str	r1, [sp, #12]
 8003aee:	6951      	ldr	r1, [r2, #20]
 8003af0:	9103      	str	r1, [sp, #12]
 8003af2:	6991      	ldr	r1, [r2, #24]
 8003af4:	9103      	str	r1, [sp, #12]
 8003af6:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af8:	6811      	ldr	r1, [r2, #0]
 8003afa:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003afe:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b00:	b662      	cpsie	i
}
 8003b02:	e7be      	b.n	8003a82 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3ea>

08003b04 <HAL_I2C_Master_Transmit.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8003b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b06:	4ba4      	ldr	r3, [pc, #656]	; (8003d98 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x294>)
 8003b08:	b083      	sub	sp, #12
 8003b0a:	681e      	ldr	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b0c:	f893 4089 	ldrb.w	r4, [r3, #137]	; 0x89
 8003b10:	2c20      	cmp	r4, #32
 8003b12:	d001      	beq.n	8003b18 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x14>
}
 8003b14:	b003      	add	sp, #12
 8003b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b18:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8003b1a:	e004      	b.n	8003b26 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22>
 8003b1c:	681d      	ldr	r5, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b1e:	1bad      	subs	r5, r5, r6
 8003b20:	2d19      	cmp	r5, #25
 8003b22:	f200 80dc 	bhi.w	8003cde <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1da>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b26:	69a5      	ldr	r5, [r4, #24]
 8003b28:	ea6f 0c05 	mvn.w	ip, r5
 8003b2c:	f01c 0c02 	ands.w	ip, ip, #2
 8003b30:	d0f4      	beq.n	8003b1c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18>
    __HAL_LOCK(hi2c);
 8003b32:	f893 5088 	ldrb.w	r5, [r3, #136]	; 0x88
 8003b36:	2d01      	cmp	r5, #1
 8003b38:	d0ec      	beq.n	8003b14 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
 8003b3a:	2501      	movs	r5, #1
 8003b3c:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b40:	6825      	ldr	r5, [r4, #0]
 8003b42:	07ed      	lsls	r5, r5, #31
 8003b44:	f140 80b7 	bpl.w	8003cb6 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1b2>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b48:	f04f 0e21 	mov.w	lr, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b4c:	f04f 0c10 	mov.w	ip, #16
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b50:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b52:	6825      	ldr	r5, [r4, #0]
 8003b54:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8003b58:	6025      	str	r5, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b5a:	f883 e089 	strb.w	lr, [r3, #137]	; 0x89
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b5e:	f883 c08a 	strb.w	ip, [r3, #138]	; 0x8a
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b62:	f8c3 708c 	str.w	r7, [r3, #140]	; 0x8c
    hi2c->XferCount   = Size;
 8003b66:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b6a:	4a8c      	ldr	r2, [pc, #560]	; (8003d9c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x298>)
    hi2c->XferSize    = hi2c->XferCount;
 8003b6c:	f8b3 5076 	ldrh.w	r5, [r3, #118]	; 0x76
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b70:	679a      	str	r2, [r3, #120]	; 0x78
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b72:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    hi2c->XferSize    = hi2c->XferCount;
 8003b74:	b2ad      	uxth	r5, r5
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b76:	2a08      	cmp	r2, #8
    hi2c->pBuffPtr    = pData;
 8003b78:	6719      	str	r1, [r3, #112]	; 0x70
    hi2c->XferSize    = hi2c->XferCount;
 8003b7a:	f8a3 5074 	strh.w	r5, [r3, #116]	; 0x74
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b7e:	d007      	beq.n	8003b90 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x8c>
 8003b80:	2a01      	cmp	r2, #1
 8003b82:	d005      	beq.n	8003b90 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x8c>
 8003b84:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003b88:	d002      	beq.n	8003b90 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x8c>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b8a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003b8c:	2a12      	cmp	r2, #18
 8003b8e:	d109      	bne.n	8003ba4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa0>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b90:	6822      	ldr	r2, [r4, #0]
 8003b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b96:	6022      	str	r2, [r4, #0]
 8003b98:	e004      	b.n	8003ba4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa0>
 8003b9a:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9c:	1b92      	subs	r2, r2, r6
 8003b9e:	2a64      	cmp	r2, #100	; 0x64
 8003ba0:	f200 80ae 	bhi.w	8003d00 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1fc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ba4:	6962      	ldr	r2, [r4, #20]
 8003ba6:	07d2      	lsls	r2, r2, #31
 8003ba8:	d5f7      	bpl.n	8003b9a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x96>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003baa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bac:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003bb0:	f040 8086 	bne.w	8003cc0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1bc>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003bb4:	6120      	str	r0, [r4, #16]
 8003bb6:	e009      	b.n	8003bcc <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xc8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bb8:	6962      	ldr	r2, [r4, #20]
 8003bba:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8003bbe:	f040 80b7 	bne.w	8003d30 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22c>
 8003bc2:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc4:	1b89      	subs	r1, r1, r6
 8003bc6:	2964      	cmp	r1, #100	; 0x64
 8003bc8:	f200 80ca 	bhi.w	8003d60 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x25c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bcc:	6962      	ldr	r2, [r4, #20]
 8003bce:	43d2      	mvns	r2, r2
 8003bd0:	f012 0202 	ands.w	r2, r2, #2
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xb4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd6:	9201      	str	r2, [sp, #4]
 8003bd8:	6962      	ldr	r2, [r4, #20]
 8003bda:	9201      	str	r2, [sp, #4]
 8003bdc:	69a2      	ldr	r2, [r4, #24]
 8003bde:	9201      	str	r2, [sp, #4]
 8003be0:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8003be2:	2d00      	cmp	r5, #0
 8003be4:	f000 80ca 	beq.w	8003d7c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x278>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003be8:	6962      	ldr	r2, [r4, #20]
 8003bea:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8003bee:	d131      	bne.n	8003c54 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x150>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bf0:	6961      	ldr	r1, [r4, #20]
 8003bf2:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003bf6:	d112      	bne.n	8003c1e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x11a>
 8003bf8:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bfa:	1b92      	subs	r2, r2, r6
 8003bfc:	2a64      	cmp	r2, #100	; 0x64
 8003bfe:	d9f3      	bls.n	8003be8 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xe4>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c00:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c02:	67d9      	str	r1, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c04:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c08:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8003c10:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c14:	f042 0220 	orr.w	r2, r2, #32
 8003c18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003c1c:	e010      	b.n	8003c40 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x13c>
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c1e:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c20:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8003c24:	6160      	str	r0, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c26:	67da      	str	r2, [r3, #124]	; 0x7c
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c28:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c2c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c30:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
    __HAL_UNLOCK(hi2c);
 8003c34:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c38:	f041 0104 	orr.w	r1, r1, #4
 8003c3c:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	f47f af65 	bne.w	8003b14 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	e75f      	b.n	8003b14 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c54:	6f1f      	ldr	r7, [r3, #112]	; 0x70
      hi2c->XferSize--;
 8003c56:	1e6a      	subs	r2, r5, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c58:	4638      	mov	r0, r7
 8003c5a:	f810 1b01 	ldrb.w	r1, [r0], #1
      hi2c->XferSize--;
 8003c5e:	b292      	uxth	r2, r2
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c60:	6121      	str	r1, [r4, #16]
      hi2c->XferCount--;
 8003c62:	f8b3 1076 	ldrh.w	r1, [r3, #118]	; 0x76
      hi2c->pBuffPtr++;
 8003c66:	6718      	str	r0, [r3, #112]	; 0x70
      hi2c->XferCount--;
 8003c68:	3901      	subs	r1, #1
 8003c6a:	b289      	uxth	r1, r1
 8003c6c:	f8a3 1076 	strh.w	r1, [r3, #118]	; 0x76
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c70:	6961      	ldr	r1, [r4, #20]
      hi2c->XferSize--;
 8003c72:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c76:	0749      	lsls	r1, r1, #29
 8003c78:	d51b      	bpl.n	8003cb2 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1ae>
 8003c7a:	b1d2      	cbz	r2, 8003cb2 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1ae>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c7c:	787a      	ldrb	r2, [r7, #1]
        hi2c->XferSize--;
 8003c7e:	3d02      	subs	r5, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c80:	6122      	str	r2, [r4, #16]
        hi2c->XferCount--;
 8003c82:	f8b3 2076 	ldrh.w	r2, [r3, #118]	; 0x76
        hi2c->XferSize--;
 8003c86:	b2ad      	uxth	r5, r5
        hi2c->XferCount--;
 8003c88:	3a01      	subs	r2, #1
        hi2c->pBuffPtr++;
 8003c8a:	3702      	adds	r7, #2
        hi2c->XferCount--;
 8003c8c:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8003c8e:	671f      	str	r7, [r3, #112]	; 0x70
        hi2c->XferSize--;
 8003c90:	f8a3 5074 	strh.w	r5, [r3, #116]	; 0x74
        hi2c->XferCount--;
 8003c94:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c98:	6962      	ldr	r2, [r4, #20]
 8003c9a:	f012 0204 	ands.w	r2, r2, #4
 8003c9e:	d1a0      	bne.n	8003be2 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xde>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ca0:	6961      	ldr	r1, [r4, #20]
 8003ca2:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003ca6:	d1ba      	bne.n	8003c1e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x11a>
 8003ca8:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003caa:	1b92      	subs	r2, r2, r6
 8003cac:	2a64      	cmp	r2, #100	; 0x64
 8003cae:	d9f3      	bls.n	8003c98 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x194>
 8003cb0:	e7a6      	b.n	8003c00 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xfc>
 8003cb2:	4615      	mov	r5, r2
 8003cb4:	e7f0      	b.n	8003c98 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x194>
      __HAL_I2C_ENABLE(hi2c);
 8003cb6:	6825      	ldr	r5, [r4, #0]
 8003cb8:	f045 0501 	orr.w	r5, r5, #1
 8003cbc:	6025      	str	r5, [r4, #0]
 8003cbe:	e743      	b.n	8003b48 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x44>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003cc0:	22f0      	movs	r2, #240	; 0xf0
 8003cc2:	6122      	str	r2, [r4, #16]
 8003cc4:	e007      	b.n	8003cd6 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1d2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cc6:	6962      	ldr	r2, [r4, #20]
 8003cc8:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8003ccc:	d130      	bne.n	8003d30 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22c>
 8003cce:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd0:	1b89      	subs	r1, r1, r6
 8003cd2:	2964      	cmp	r1, #100	; 0x64
 8003cd4:	d844      	bhi.n	8003d60 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x25c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cd6:	6962      	ldr	r2, [r4, #20]
 8003cd8:	0717      	lsls	r7, r2, #28
 8003cda:	d5f4      	bpl.n	8003cc6 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1c2>
 8003cdc:	e76a      	b.n	8003bb4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xb0>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003cde:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ce0:	f8c3 c07c 	str.w	ip, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ce4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ce8:	f883 c08a 	strb.w	ip, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8003cf0:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cf4:	f042 0220 	orr.w	r2, r2, #32
 8003cf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8003cfc:	b003      	add	sp, #12
 8003cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d00:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d02:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d04:	67d9      	str	r1, [r3, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d06:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d0a:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d0e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
        __HAL_UNLOCK(hi2c);
 8003d12:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d16:	f042 0220 	orr.w	r2, r2, #32
 8003d1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d1e:	6822      	ldr	r2, [r4, #0]
 8003d20:	05d1      	lsls	r1, r2, #23
 8003d22:	f57f aef7 	bpl.w	8003b14 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003d2e:	e6f1      	b.n	8003b14 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d30:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d32:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d36:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d38:	6822      	ldr	r2, [r4, #0]
 8003d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3e:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d40:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d42:	67d9      	str	r1, [r3, #124]	; 0x7c
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d44:	f883 0089 	strb.w	r0, [r3, #137]	; 0x89
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d48:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
      __HAL_UNLOCK(hi2c);
 8003d50:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d54:	f042 0204 	orr.w	r2, r2, #4
 8003d58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8003d5c:	b003      	add	sp, #12
 8003d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d60:	2120      	movs	r1, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d62:	67da      	str	r2, [r3, #124]	; 0x7c
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d64:	f883 1089 	strb.w	r1, [r3, #137]	; 0x89
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d68:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        __HAL_UNLOCK(hi2c);
 8003d6c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d70:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d74:	430a      	orrs	r2, r1
 8003d76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003d7a:	e6cb      	b.n	8003b14 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7c:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003d7e:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d80:	6822      	ldr	r2, [r4, #0]
 8003d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d86:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d88:	f883 0089 	strb.w	r0, [r3, #137]	; 0x89
    __HAL_UNLOCK(hi2c);
 8003d8c:	f883 1088 	strb.w	r1, [r3, #136]	; 0x88
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d90:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
    return HAL_OK;
 8003d94:	e6be      	b.n	8003b14 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
 8003d96:	bf00      	nop
 8003d98:	20000200 	.word	0x20000200
 8003d9c:	ffff0000 	.word	0xffff0000

08003da0 <DS3231_Update>:
uint8_t bcdToDec(uint8_t val) {
    return ((val / 16 * 10) + (val % 16));
}

void DS3231_Update(void) {
    uint8_t cmd = 0;
 8003da0:	2300      	movs	r3, #0
void DS3231_Update(void) {
 8003da2:	b510      	push	{r4, lr}
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8003da4:	4c0f      	ldr	r4, [pc, #60]	; (8003de4 <DS3231_Update+0x44>)
void DS3231_Update(void) {
 8003da6:	b082      	sub	sp, #8
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8003da8:	f10d 0107 	add.w	r1, sp, #7
 8003dac:	2201      	movs	r2, #1
 8003dae:	20d0      	movs	r0, #208	; 0xd0
    uint8_t cmd = 0;
 8003db0:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8003db4:	f7ff fea6 	bl	8003b04 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8003db8:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 8003dbc:	2213      	movs	r2, #19
 8003dbe:	20d0      	movs	r0, #208	; 0xd0
 8003dc0:	f7ff fc6a 	bl	8003698 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    rtcBufferSet[1] = rtcBuffer[0];
 8003dc4:	e9d4 0229 	ldrd	r0, r2, [r4, #164]	; 0xa4
 8003dc8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8003dcc:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8003dd0:	f8c4 00b9 	str.w	r0, [r4, #185]	; 0xb9
 8003dd4:	f8c4 10b5 	str.w	r1, [r4, #181]	; 0xb5
 8003dd8:	f8c4 20bd 	str.w	r2, [r4, #189]	; 0xbd
 8003ddc:	f8c4 30c1 	str.w	r3, [r4, #193]	; 0xc1
    rtcBufferSet[12] = rtcBuffer[11];
    rtcBufferSet[13] = rtcBuffer[12];
    rtcBufferSet[14] = rtcBuffer[13];
    rtcBufferSet[15] = rtcBuffer[14];
    rtcBufferSet[16] = rtcBuffer[15];
}
 8003de0:	b002      	add	sp, #8
 8003de2:	bd10      	pop	{r4, pc}
 8003de4:	20000200 	.word	0x20000200

08003de8 <LCD_Char.constprop.0.isra.0>:
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
}

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
 8003de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dec:	469b      	mov	fp, r3
	uint8_t  *bitmap = font -> bitmap;
	uint16_t bo = glyph -> bitmapOffset;
	uint8_t bits = 0, bit = 0;
	uint16_t set_pixels = 0;
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003dee:	78d3      	ldrb	r3, [r2, #3]
static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
 8003df0:	b085      	sub	sp, #20
 8003df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
	uint16_t bo = glyph -> bitmapOffset;
 8003df6:	f8b2 8000 	ldrh.w	r8, [r2]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003dfa:	b38b      	cbz	r3, 8003e60 <LCD_Char.constprop.0.isra.0+0x78>
	uint8_t bits = 0, bit = 0;
 8003dfc:	2600      	movs	r6, #0
 8003dfe:	4691      	mov	r9, r2
 8003e00:	4637      	mov	r7, r6
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003e02:	46b2      	mov	sl, r6
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8003e04:	f899 1002 	ldrb.w	r1, [r9, #2]
 8003e08:	b351      	cbz	r1, 8003e60 <LCD_Char.constprop.0.isra.0+0x78>
 8003e0a:	2400      	movs	r4, #0
 8003e0c:	4622      	mov	r2, r4
		{
			if(bit == 0)
 8003e0e:	2e00      	cmp	r6, #0
 8003e10:	d045      	beq.n	8003e9e <LCD_Char.constprop.0.isra.0+0xb6>
			else if (set_pixels > 0)
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
				set_pixels = 0;
			}
			bit >>= 1;
 8003e12:	4633      	mov	r3, r6
 8003e14:	0876      	lsrs	r6, r6, #1
			if(bits & bit)
 8003e16:	ea17 0503 	ands.w	r5, r7, r3
				set_pixels++;
 8003e1a:	f102 0301 	add.w	r3, r2, #1
			if(bits & bit)
 8003e1e:	d022      	beq.n	8003e66 <LCD_Char.constprop.0.isra.0+0x7e>
				set_pixels++;
 8003e20:	b29a      	uxth	r2, r3
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8003e22:	3401      	adds	r4, #1
 8003e24:	b2e4      	uxtb	r4, r4
 8003e26:	42a1      	cmp	r1, r4
 8003e28:	d8f1      	bhi.n	8003e0e <LCD_Char.constprop.0.isra.0+0x26>
		}
		if (set_pixels > 0)
 8003e2a:	b18a      	cbz	r2, 8003e50 <LCD_Char.constprop.0.isra.0+0x68>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8003e2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	f999 0005 	ldrsb.w	r0, [r9, #5]
 8003e34:	9b02      	ldr	r3, [sp, #8]
 8003e36:	4420      	add	r0, r4
 8003e38:	f999 1006 	ldrsb.w	r1, [r9, #6]
 8003e3c:	1a80      	subs	r0, r0, r2
 8003e3e:	4418      	add	r0, r3
 8003e40:	9b03      	ldr	r3, [sp, #12]
 8003e42:	4451      	add	r1, sl
 8003e44:	4419      	add	r1, r3
 8003e46:	b280      	uxth	r0, r0
 8003e48:	2301      	movs	r3, #1
 8003e4a:	b289      	uxth	r1, r1
 8003e4c:	f7fc faea 	bl	8000424 <LCD_Rect_Fill>
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003e50:	f899 3003 	ldrb.w	r3, [r9, #3]
 8003e54:	f10a 0a01 	add.w	sl, sl, #1
 8003e58:	fa5f fa8a 	uxtb.w	sl, sl
 8003e5c:	459a      	cmp	sl, r3
 8003e5e:	d3d1      	bcc.n	8003e04 <LCD_Char.constprop.0.isra.0+0x1c>
			set_pixels = 0;
		}
	}
}
 8003e60:	b005      	add	sp, #20
 8003e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else if (set_pixels > 0)
 8003e66:	2a00      	cmp	r2, #0
 8003e68:	d0db      	beq.n	8003e22 <LCD_Char.constprop.0.isra.0+0x3a>
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8003e6a:	f999 1006 	ldrsb.w	r1, [r9, #6]
 8003e6e:	f999 0005 	ldrsb.w	r0, [r9, #5]
 8003e72:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003e76:	4451      	add	r1, sl
 8003e78:	4461      	add	r1, ip
 8003e7a:	4420      	add	r0, r4
 8003e7c:	f8dd c008 	ldr.w	ip, [sp, #8]
 8003e80:	1a80      	subs	r0, r0, r2
 8003e82:	4460      	add	r0, ip
 8003e84:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8003e88:	b289      	uxth	r1, r1
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f8cd c000 	str.w	ip, [sp]
 8003e90:	b280      	uxth	r0, r0
 8003e92:	f7fc fac7 	bl	8000424 <LCD_Rect_Fill>
				set_pixels = 0;
 8003e96:	462a      	mov	r2, r5
 8003e98:	f899 1002 	ldrb.w	r1, [r9, #2]
 8003e9c:	e7c1      	b.n	8003e22 <LCD_Char.constprop.0.isra.0+0x3a>
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8003e9e:	f108 0001 	add.w	r0, r8, #1
 8003ea2:	f81b 7008 	ldrb.w	r7, [fp, r8]
				bit  = 0x80;
 8003ea6:	2380      	movs	r3, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8003ea8:	2640      	movs	r6, #64	; 0x40
 8003eaa:	fa1f f880 	uxth.w	r8, r0
 8003eae:	e7b2      	b.n	8003e16 <LCD_Char.constprop.0.isra.0+0x2e>

08003eb0 <HAL_UART_Transmit.part.0.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8003eb0:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb2:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eb4:	2521      	movs	r5, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb6:	4c32      	ldr	r4, [pc, #200]	; (8003f80 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xd0>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb8:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ebc:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ec4:	f884 5105 	strb.w	r5, [r4, #261]	; 0x105
    huart->TxXferSize = Size;
 8003ec8:	f8a4 10ec 	strh.w	r1, [r4, #236]	; 0xec
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8003ecc:	4605      	mov	r5, r0
 8003ece:	6820      	ldr	r0, [r4, #0]
    huart->TxXferCount = Size;
 8003ed0:	f8a4 10ee 	strh.w	r1, [r4, #238]	; 0xee
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed4:	d049      	beq.n	8003f6a <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xba>
      pdata16bits = NULL;
 8003ed6:	469c      	mov	ip, r3
    __HAL_UNLOCK(huart);
 8003ed8:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8003eda:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    __HAL_UNLOCK(huart);
 8003ede:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    while (huart->TxXferCount > 0U)
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d047      	beq.n	8003f78 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xc8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee8:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8003eec:	e003      	b.n	8003ef6 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x46>
 8003eee:	6822      	ldr	r2, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ef0:	1a12      	subs	r2, r2, r0
 8003ef2:	2a64      	cmp	r2, #100	; 0x64
 8003ef4:	d823      	bhi.n	8003f3e <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x8e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef6:	680b      	ldr	r3, [r1, #0]
 8003ef8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003efc:	d0f7      	beq.n	8003eee <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x3e>
      if (pdata8bits == NULL)
 8003efe:	b37d      	cbz	r5, 8003f60 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xb0>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f00:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003f04:	604b      	str	r3, [r1, #4]
      huart->TxXferCount--;
 8003f06:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    while (huart->TxXferCount > 0U)
 8003f12:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1ec      	bne.n	8003ef6 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x46>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1c:	680b      	ldr	r3, [r1, #0]
 8003f1e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003f22:	d107      	bne.n	8003f34 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x84>
 8003f24:	6822      	ldr	r2, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f26:	1a12      	subs	r2, r2, r0
 8003f28:	2a64      	cmp	r2, #100	; 0x64
 8003f2a:	d808      	bhi.n	8003f3e <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x8e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f2c:	680b      	ldr	r3, [r1, #0]
 8003f2e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003f32:	d0f7      	beq.n	8003f24 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x74>
    huart->gState = HAL_UART_STATE_READY;
 8003f34:	2320      	movs	r3, #32
 8003f36:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
}
 8003f3a:	bc30      	pop	{r4, r5}
 8003f3c:	4770      	bx	lr
        huart->gState  = HAL_UART_STATE_READY;
 8003f3e:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f40:	68ca      	ldr	r2, [r1, #12]
 8003f42:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f46:	60ca      	str	r2, [r1, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f48:	694a      	ldr	r2, [r1, #20]
 8003f4a:	f022 0201 	bic.w	r2, r2, #1
 8003f4e:	614a      	str	r2, [r1, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003f50:	f884 0105 	strb.w	r0, [r4, #261]	; 0x105
        __HAL_UNLOCK(huart);
 8003f54:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
        huart->RxState = HAL_UART_STATE_READY;
 8003f58:	f884 0106 	strb.w	r0, [r4, #262]	; 0x106
}
 8003f5c:	bc30      	pop	{r4, r5}
 8003f5e:	4770      	bx	lr
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f60:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8003f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f68:	e7cc      	b.n	8003f04 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x54>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f6a:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 8003f6e:	2a00      	cmp	r2, #0
 8003f70:	d1b1      	bne.n	8003ed6 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x26>
      pdata16bits = (uint16_t *) pData;
 8003f72:	46ac      	mov	ip, r5
      pdata8bits  = NULL;
 8003f74:	4615      	mov	r5, r2
 8003f76:	e7af      	b.n	8003ed8 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x28>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f78:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8003f7c:	e7d6      	b.n	8003f2c <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x7c>
 8003f7e:	bf00      	nop
 8003f80:	20000200 	.word	0x20000200

08003f84 <HAL_InitTick.isra.0>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 8003f84:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f86:	4d10      	ldr	r5, [pc, #64]	; (8003fc8 <HAL_InitTick.isra.0+0x44>)
 8003f88:	4a10      	ldr	r2, [pc, #64]	; (8003fcc <HAL_InitTick.isra.0+0x48>)
 8003f8a:	682b      	ldr	r3, [r5, #0]
 8003f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f90:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f92:	3b01      	subs	r3, #1
 8003f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f98:	d20e      	bcs.n	8003fb8 <HAL_InitTick.isra.0+0x34>
 8003f9a:	4604      	mov	r4, r0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f9c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fa0:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fa4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fa6:	2107      	movs	r1, #7
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fa8:	4e09      	ldr	r6, [pc, #36]	; (8003fd0 <HAL_InitTick.isra.0+0x4c>)
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003faa:	2c0f      	cmp	r4, #15
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fac:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fae:	f886 c023 	strb.w	ip, [r6, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fb2:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fb4:	6111      	str	r1, [r2, #16]
 8003fb6:	d900      	bls.n	8003fba <HAL_InitTick.isra.0+0x36>
}
 8003fb8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fba:	4621      	mov	r1, r4
 8003fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc0:	f7fd fb10 	bl	80015e4 <HAL_NVIC_SetPriority.constprop.0>
    uwTickPrio = TickPriority;
 8003fc4:	606c      	str	r4, [r5, #4]
}
 8003fc6:	bd70      	pop	{r4, r5, r6, pc}
 8003fc8:	20000000 	.word	0x20000000
 8003fcc:	10624dd3 	.word	0x10624dd3
 8003fd0:	e000ed00 	.word	0xe000ed00

08003fd4 <LCD_Font.constprop.0>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8003fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	int16_t cursor_x = x;
 8003fd8:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8003fdc:	b085      	sub	sp, #20
	int16_t cursor_y = y;
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003fde:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8003fe0:	460d      	mov	r5, r1
 8003fe2:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003fe4:	f001 f840 	bl	8005068 <strlen>
 8003fe8:	b3b8      	cbz	r0, 800405a <LCD_Font.constprop.0+0x86>
 8003fea:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 8003fec:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 8003fee:	2691      	movs	r6, #145	; 0x91
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003ff0:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
		}
		else if(c >= font.first && c <= font.last && c != '\r')
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003ff2:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8004060 <LCD_Font.constprop.0+0x8c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8003ff6:	4b1b      	ldr	r3, [pc, #108]	; (8004064 <LCD_Font.constprop.0+0x90>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003ff8:	f10d 0b08 	add.w	fp, sp, #8
 8003ffc:	e01d      	b.n	800403a <LCD_Font.constprop.0+0x66>
 8003ffe:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 8004002:	295e      	cmp	r1, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8004004:	f102 0208 	add.w	r2, r2, #8
		else if(c >= font.first && c <= font.last && c != '\r')
 8004008:	d812      	bhi.n	8004030 <LCD_Font.constprop.0+0x5c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800400a:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800400e:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8004012:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8004014:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8004018:	4638      	mov	r0, r7
 800401a:	4631      	mov	r1, r6
 800401c:	f7ff fee4 	bl	8003de8 <LCD_Char.constprop.0.isra.0>
			cursor_x += glyph.xAdvance * size;
 8004020:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004024:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 8004026:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004028:	f001 f81e 	bl	8005068 <strlen>
 800402c:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <LCD_Font.constprop.0+0x90>)
			cursor_x += glyph.xAdvance * size;
 800402e:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004030:	3401      	adds	r4, #1
 8004032:	b2a4      	uxth	r4, r4
 8004034:	4284      	cmp	r4, r0
 8004036:	4622      	mov	r2, r4
 8004038:	d20f      	bcs.n	800405a <LCD_Font.constprop.0+0x86>
		char c = text[text_pos];
 800403a:	f815 c002 	ldrb.w	ip, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 800403e:	f1ac 0220 	sub.w	r2, ip, #32
		if(c == '\n')
 8004042:	f1bc 0f0a 	cmp.w	ip, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 8004046:	b2d1      	uxtb	r1, r2
		if(c == '\n')
 8004048:	d1d9      	bne.n	8003ffe <LCD_Font.constprop.0+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800404a:	3401      	adds	r4, #1
 800404c:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 800404e:	3639      	adds	r6, #57	; 0x39
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004050:	4284      	cmp	r4, r0
			cursor_x = x;
 8004052:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004054:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 8004056:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004058:	d3ef      	bcc.n	800403a <LCD_Font.constprop.0+0x66>
		}
	}
}
 800405a:	b005      	add	sp, #20
 800405c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004060:	0800c620 	.word	0x0800c620
 8004064:	0801bb78 	.word	0x0801bb78

08004068 <LCD_Font.constprop.1>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8004068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 800406c:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8004070:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004072:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8004074:	460d      	mov	r5, r1
 8004076:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004078:	f000 fff6 	bl	8005068 <strlen>
 800407c:	b3b8      	cbz	r0, 80040ee <LCD_Font.constprop.1+0x86>
 800407e:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 8004080:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 8004082:	2664      	movs	r6, #100	; 0x64
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004084:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8004086:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80040f4 <LCD_Font.constprop.1+0x8c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800408a:	4b1b      	ldr	r3, [pc, #108]	; (80040f8 <LCD_Font.constprop.1+0x90>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800408c:	f10d 0b08 	add.w	fp, sp, #8
 8004090:	e01d      	b.n	80040ce <LCD_Font.constprop.1+0x66>
 8004092:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 8004096:	295e      	cmp	r1, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8004098:	f502 723e 	add.w	r2, r2, #760	; 0x2f8
		else if(c >= font.first && c <= font.last && c != '\r')
 800409c:	d812      	bhi.n	80040c4 <LCD_Font.constprop.1+0x5c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800409e:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80040a2:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80040a6:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80040a8:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80040ac:	4638      	mov	r0, r7
 80040ae:	4631      	mov	r1, r6
 80040b0:	f7ff fe9a 	bl	8003de8 <LCD_Char.constprop.0.isra.0>
			cursor_x += glyph.xAdvance * size;
 80040b4:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80040b8:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 80040ba:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80040bc:	f000 ffd4 	bl	8005068 <strlen>
 80040c0:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <LCD_Font.constprop.1+0x90>)
			cursor_x += glyph.xAdvance * size;
 80040c2:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80040c4:	3401      	adds	r4, #1
 80040c6:	b2a4      	uxth	r4, r4
 80040c8:	4284      	cmp	r4, r0
 80040ca:	4622      	mov	r2, r4
 80040cc:	d20f      	bcs.n	80040ee <LCD_Font.constprop.1+0x86>
		char c = text[text_pos];
 80040ce:	f815 c002 	ldrb.w	ip, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 80040d2:	f1ac 0220 	sub.w	r2, ip, #32
		if(c == '\n')
 80040d6:	f1bc 0f0a 	cmp.w	ip, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 80040da:	b2d1      	uxtb	r1, r2
		if(c == '\n')
 80040dc:	d1d9      	bne.n	8004092 <LCD_Font.constprop.1+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80040de:	3401      	adds	r4, #1
 80040e0:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 80040e2:	3696      	adds	r6, #150	; 0x96
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80040e4:	4284      	cmp	r4, r0
			cursor_x = x;
 80040e6:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80040e8:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 80040ea:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80040ec:	d3ef      	bcc.n	80040ce <LCD_Font.constprop.1+0x66>
}
 80040ee:	b005      	add	sp, #20
 80040f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f4:	0800c620 	.word	0x0800c620
 80040f8:	0800cc64 	.word	0x0800cc64

080040fc <LCD_Font.constprop.2>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80040fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 8004100:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8004104:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004106:	4610      	mov	r0, r2
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8004108:	4616      	mov	r6, r2
 800410a:	469a      	mov	sl, r3
	int16_t cursor_y = y;
 800410c:	b20d      	sxth	r5, r1
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800410e:	f000 ffab 	bl	8005068 <strlen>
 8004112:	b3b0      	cbz	r0, 8004182 <LCD_Font.constprop.2+0x86>
 8004114:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 8004116:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004118:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800411a:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8004188 <LCD_Font.constprop.2+0x8c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800411e:	4b1b      	ldr	r3, [pc, #108]	; (800418c <LCD_Font.constprop.2+0x90>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8004120:	f10d 0b08 	add.w	fp, sp, #8
 8004124:	e01d      	b.n	8004162 <LCD_Font.constprop.2+0x66>
 8004126:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 800412a:	295e      	cmp	r1, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800412c:	f102 0208 	add.w	r2, r2, #8
		else if(c >= font.first && c <= font.last && c != '\r')
 8004130:	d812      	bhi.n	8004158 <LCD_Font.constprop.2+0x5c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8004132:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8004136:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800413a:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800413c:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8004140:	4638      	mov	r0, r7
 8004142:	4629      	mov	r1, r5
 8004144:	f7ff fe50 	bl	8003de8 <LCD_Char.constprop.0.isra.0>
			cursor_x += glyph.xAdvance * size;
 8004148:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800414c:	4630      	mov	r0, r6
			cursor_x += glyph.xAdvance * size;
 800414e:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004150:	f000 ff8a 	bl	8005068 <strlen>
 8004154:	4b0d      	ldr	r3, [pc, #52]	; (800418c <LCD_Font.constprop.2+0x90>)
			cursor_x += glyph.xAdvance * size;
 8004156:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004158:	3401      	adds	r4, #1
 800415a:	b2a4      	uxth	r4, r4
 800415c:	4284      	cmp	r4, r0
 800415e:	4622      	mov	r2, r4
 8004160:	d20f      	bcs.n	8004182 <LCD_Font.constprop.2+0x86>
		char c = text[text_pos];
 8004162:	f816 c002 	ldrb.w	ip, [r6, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 8004166:	f1ac 0220 	sub.w	r2, ip, #32
		if(c == '\n')
 800416a:	f1bc 0f0a 	cmp.w	ip, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 800416e:	b2d1      	uxtb	r1, r2
		if(c == '\n')
 8004170:	d1d9      	bne.n	8004126 <LCD_Font.constprop.2+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004172:	3401      	adds	r4, #1
 8004174:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 8004176:	3539      	adds	r5, #57	; 0x39
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004178:	4284      	cmp	r4, r0
			cursor_x = x;
 800417a:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800417c:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 800417e:	b22d      	sxth	r5, r5
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004180:	d3ef      	bcc.n	8004162 <LCD_Font.constprop.2+0x66>
}
 8004182:	b005      	add	sp, #20
 8004184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004188:	0800c620 	.word	0x0800c620
 800418c:	0801bb78 	.word	0x0801bb78

08004190 <bme280.part.0>:
		rx_buffer[rx_index++] = rx_data;
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
	}
}

void bme280(void) {
 8004190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	temperature = BME280_getTemperature(-1);
	humidity = BME280_getHumidity(-1);
	pressure = (uint16_t)BME280_getPressure();

	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8004194:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8004364 <bme280.part.0+0x1d4>
void bme280(void) {
 8004198:	b087      	sub	sp, #28
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 800419a:	e9d8 6744 	ldrd	r6, r7, [r8, #272]	; 0x110
 800419e:	2200      	movs	r2, #0
 80041a0:	4630      	mov	r0, r6
 80041a2:	4639      	mov	r1, r7
 80041a4:	4b70      	ldr	r3, [pc, #448]	; (8004368 <bme280.part.0+0x1d8>)
 80041a6:	f001 fb95 	bl	80058d4 <__aeabi_dcmplt>
 80041aa:	2800      	cmp	r0, #0
 80041ac:	f000 80d6 	beq.w	800435c <bme280.part.0+0x1cc>
 80041b0:	2200      	movs	r2, #0
 80041b2:	4630      	mov	r0, r6
 80041b4:	4639      	mov	r1, r7
 80041b6:	4b6d      	ldr	r3, [pc, #436]	; (800436c <bme280.part.0+0x1dc>)
 80041b8:	f001 fbaa 	bl	8005910 <__aeabi_dcmpgt>
 80041bc:	2800      	cmp	r0, #0
 80041be:	f000 80cd 	beq.w	800435c <bme280.part.0+0x1cc>
 80041c2:	e9d8 4546 	ldrd	r4, r5, [r8, #280]	; 0x118
 80041c6:	2200      	movs	r2, #0
 80041c8:	2300      	movs	r3, #0
 80041ca:	4620      	mov	r0, r4
 80041cc:	4629      	mov	r1, r5
 80041ce:	f001 fb9f 	bl	8005910 <__aeabi_dcmpgt>
 80041d2:	2800      	cmp	r0, #0
 80041d4:	f000 80c2 	beq.w	800435c <bme280.part.0+0x1cc>
 80041d8:	2200      	movs	r2, #0
 80041da:	4620      	mov	r0, r4
 80041dc:	4629      	mov	r1, r5
 80041de:	4b64      	ldr	r3, [pc, #400]	; (8004370 <bme280.part.0+0x1e0>)
 80041e0:	f001 fb78 	bl	80058d4 <__aeabi_dcmplt>
 80041e4:	2800      	cmp	r0, #0
 80041e6:	f000 80b9 	beq.w	800435c <bme280.part.0+0x1cc>

		if (temperature != temperatureLast && temperature >= -40 && temperature <= 40) {
 80041ea:	f508 7990 	add.w	r9, r8, #288	; 0x120
 80041ee:	e9d9 8900 	ldrd	r8, r9, [r9]
 80041f2:	4630      	mov	r0, r6
 80041f4:	4639      	mov	r1, r7
 80041f6:	4642      	mov	r2, r8
 80041f8:	464b      	mov	r3, r9
 80041fa:	f001 fb61 	bl	80058c0 <__aeabi_dcmpeq>
 80041fe:	2800      	cmp	r0, #0
 8004200:	f040 80c0 	bne.w	8004384 <bme280.part.0+0x1f4>
 8004204:	2200      	movs	r2, #0
 8004206:	4630      	mov	r0, r6
 8004208:	4639      	mov	r1, r7
 800420a:	4b5a      	ldr	r3, [pc, #360]	; (8004374 <bme280.part.0+0x1e4>)
 800420c:	f001 fb6c 	bl	80058e8 <__aeabi_dcmple>
 8004210:	2800      	cmp	r0, #0
 8004212:	f000 80b7 	beq.w	8004384 <bme280.part.0+0x1f4>

			char weatherPrintT[8];

			if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8004216:	2200      	movs	r2, #0
 8004218:	4640      	mov	r0, r8
 800421a:	4649      	mov	r1, r9
 800421c:	4b56      	ldr	r3, [pc, #344]	; (8004378 <bme280.part.0+0x1e8>)
 800421e:	f001 fb6d 	bl	80058fc <__aeabi_dcmpge>
 8004222:	2800      	cmp	r0, #0
 8004224:	f040 82f5 	bne.w	8004812 <bme280.part.0+0x682>
 8004228:	2200      	movs	r2, #0
 800422a:	2300      	movs	r3, #0
 800422c:	4640      	mov	r0, r8
 800422e:	4649      	mov	r1, r9
 8004230:	f001 fb50 	bl	80058d4 <__aeabi_dcmplt>
 8004234:	2200      	movs	r2, #0
 8004236:	2800      	cmp	r0, #0
 8004238:	f040 831f 	bne.w	800487a <bme280.part.0+0x6ea>
				sprintf(weatherPrintT, "%.1f'C", temperatureLast);
				LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
			}
			else if (temperatureLast < 10 && temperatureLast > 0) {
 800423c:	2300      	movs	r3, #0
 800423e:	4640      	mov	r0, r8
 8004240:	4649      	mov	r1, r9
 8004242:	f001 fb65 	bl	8005910 <__aeabi_dcmpgt>
 8004246:	2800      	cmp	r0, #0
 8004248:	f040 8341 	bne.w	80048ce <bme280.part.0+0x73e>
				sprintf(weatherPrintT, "%.1f'C", temperatureLast);
				LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
			}
			else if (temperatureLast <= -10) {
 800424c:	2200      	movs	r2, #0
 800424e:	4640      	mov	r0, r8
 8004250:	4649      	mov	r1, r9
 8004252:	4b4a      	ldr	r3, [pc, #296]	; (800437c <bme280.part.0+0x1ec>)
 8004254:	f001 fb48 	bl	80058e8 <__aeabi_dcmple>
 8004258:	2800      	cmp	r0, #0
 800425a:	f040 831c 	bne.w	8004896 <bme280.part.0+0x706>
 800425e:	ac03      	add	r4, sp, #12
				sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
				LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
			}

			if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8004260:	2200      	movs	r2, #0
 8004262:	4630      	mov	r0, r6
 8004264:	4639      	mov	r1, r7
 8004266:	4b44      	ldr	r3, [pc, #272]	; (8004378 <bme280.part.0+0x1e8>)
 8004268:	f001 fb48 	bl	80058fc <__aeabi_dcmpge>
 800426c:	2800      	cmp	r0, #0
 800426e:	f040 82c0 	bne.w	80047f2 <bme280.part.0+0x662>
 8004272:	2200      	movs	r2, #0
 8004274:	2300      	movs	r3, #0
 8004276:	4630      	mov	r0, r6
 8004278:	4639      	mov	r1, r7
 800427a:	f001 fb2b 	bl	80058d4 <__aeabi_dcmplt>
 800427e:	2200      	movs	r2, #0
 8004280:	2800      	cmp	r0, #0
 8004282:	f040 82e1 	bne.w	8004848 <bme280.part.0+0x6b8>
				sprintf(weatherPrintT, "%.1f'C", temperature);
				LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
			}
			else if (temperature < 10 && temperature > 0) {
 8004286:	2300      	movs	r3, #0
 8004288:	4630      	mov	r0, r6
 800428a:	4639      	mov	r1, r7
 800428c:	f001 fb40 	bl	8005910 <__aeabi_dcmpgt>
 8004290:	2800      	cmp	r0, #0
 8004292:	f040 830c 	bne.w	80048ae <bme280.part.0+0x71e>
				sprintf(weatherPrintT, "%.1f'C", temperature);
				LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
			}
			else if (temperature <= -10) {
 8004296:	2200      	movs	r2, #0
 8004298:	4630      	mov	r0, r6
 800429a:	4639      	mov	r1, r7
 800429c:	4b37      	ldr	r3, [pc, #220]	; (800437c <bme280.part.0+0x1ec>)
 800429e:	f001 fb23 	bl	80058e8 <__aeabi_dcmple>
 80042a2:	2800      	cmp	r0, #0
 80042a4:	f040 82de 	bne.w	8004864 <bme280.part.0+0x6d4>
				sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
				LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
			}

			temperatureLast = temperature;
 80042a8:	4b2e      	ldr	r3, [pc, #184]	; (8004364 <bme280.part.0+0x1d4>)
		}

		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 80042aa:	e9d3 8946 	ldrd	r8, r9, [r3, #280]	; 0x118
			temperatureLast = temperature;
 80042ae:	e9c3 6748 	strd	r6, r7, [r3, #288]	; 0x120
		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 80042b2:	e9d3 674a 	ldrd	r6, r7, [r3, #296]	; 0x128
 80042b6:	4640      	mov	r0, r8
 80042b8:	4649      	mov	r1, r9
 80042ba:	4632      	mov	r2, r6
 80042bc:	463b      	mov	r3, r7
 80042be:	f001 faff 	bl	80058c0 <__aeabi_dcmpeq>
 80042c2:	2800      	cmp	r0, #0
 80042c4:	d16a      	bne.n	800439c <bme280.part.0+0x20c>
 80042c6:	2200      	movs	r2, #0
 80042c8:	2300      	movs	r3, #0
 80042ca:	4640      	mov	r0, r8
 80042cc:	4649      	mov	r1, r9
 80042ce:	f001 fb15 	bl	80058fc <__aeabi_dcmpge>
 80042d2:	2800      	cmp	r0, #0
 80042d4:	d062      	beq.n	800439c <bme280.part.0+0x20c>
 80042d6:	4640      	mov	r0, r8
 80042d8:	4649      	mov	r1, r9
 80042da:	2200      	movs	r2, #0
 80042dc:	4b24      	ldr	r3, [pc, #144]	; (8004370 <bme280.part.0+0x1e0>)
 80042de:	f001 faf9 	bl	80058d4 <__aeabi_dcmplt>
 80042e2:	2800      	cmp	r0, #0
 80042e4:	d05a      	beq.n	800439c <bme280.part.0+0x20c>

			char weatherPrintH[7];

			sprintf(weatherPrintH, "%.1f'H", humidityLast);
 80042e6:	4632      	mov	r2, r6
 80042e8:	463b      	mov	r3, r7
 80042ea:	4925      	ldr	r1, [pc, #148]	; (8004380 <bme280.part.0+0x1f0>)
 80042ec:	4620      	mov	r0, r4
 80042ee:	f004 fb3f 	bl	8008970 <siprintf>
			if (humidityLast >= 10)
 80042f2:	491c      	ldr	r1, [pc, #112]	; (8004364 <bme280.part.0+0x1d4>)
 80042f4:	4b20      	ldr	r3, [pc, #128]	; (8004378 <bme280.part.0+0x1e8>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	e9d1 014a 	ldrd	r0, r1, [r1, #296]	; 0x128
 80042fc:	f001 fafe 	bl	80058fc <__aeabi_dcmpge>
 8004300:	4603      	mov	r3, r0
 8004302:	2800      	cmp	r0, #0
 8004304:	f000 829a 	beq.w	800483c <bme280.part.0+0x6ac>
				LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8004308:	2300      	movs	r3, #0
 800430a:	4622      	mov	r2, r4
 800430c:	21bb      	movs	r1, #187	; 0xbb
 800430e:	20a0      	movs	r0, #160	; 0xa0
 8004310:	f7ff fef4 	bl	80040fc <LCD_Font.constprop.2>
			else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);

			sprintf(weatherPrintH, "%.1f'H", humidity);
 8004314:	4b13      	ldr	r3, [pc, #76]	; (8004364 <bme280.part.0+0x1d4>)
 8004316:	491a      	ldr	r1, [pc, #104]	; (8004380 <bme280.part.0+0x1f0>)
 8004318:	461d      	mov	r5, r3
 800431a:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 800431e:	4620      	mov	r0, r4
 8004320:	f004 fb26 	bl	8008970 <siprintf>
			if (humidity >= 10)
 8004324:	e9d5 6746 	ldrd	r6, r7, [r5, #280]	; 0x118
 8004328:	2200      	movs	r2, #0
 800432a:	4639      	mov	r1, r7
 800432c:	4b12      	ldr	r3, [pc, #72]	; (8004378 <bme280.part.0+0x1e8>)
 800432e:	4630      	mov	r0, r6
 8004330:	f001 fae4 	bl	80058fc <__aeabi_dcmpge>
				LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8004334:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004338:	4622      	mov	r2, r4
 800433a:	21bb      	movs	r1, #187	; 0xbb
			if (humidity >= 10)
 800433c:	2800      	cmp	r0, #0
 800433e:	f000 8279 	beq.w	8004834 <bme280.part.0+0x6a4>
				LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8004342:	20a0      	movs	r0, #160	; 0xa0
 8004344:	f7ff feda 	bl	80040fc <LCD_Font.constprop.2>
			else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);

			humidityLast = humidity;
 8004348:	4b06      	ldr	r3, [pc, #24]	; (8004364 <bme280.part.0+0x1d4>)
 800434a:	e9c3 674a 	strd	r6, r7, [r3, #296]	; 0x128
 800434e:	e025      	b.n	800439c <bme280.part.0+0x20c>
			}

			viewGraphs = 0;
		}

		if (!viewGraphs) {
 8004350:	4b04      	ldr	r3, [pc, #16]	; (8004364 <bme280.part.0+0x1d4>)
 8004352:	f893 34ea 	ldrb.w	r3, [r3, #1258]	; 0x4ea
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 8152 	beq.w	8004600 <bme280.part.0+0x470>
			}

			viewGraphs = 1;
		}
	}
}
 800435c:	b007      	add	sp, #28
 800435e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004362:	bf00      	nop
 8004364:	20000200 	.word	0x20000200
 8004368:	40554000 	.word	0x40554000
 800436c:	c0440000 	.word	0xc0440000
 8004370:	40590000 	.word	0x40590000
 8004374:	40440000 	.word	0x40440000
 8004378:	40240000 	.word	0x40240000
 800437c:	c0240000 	.word	0xc0240000
 8004380:	0801de14 	.word	0x0801de14
		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 8004384:	4bd3      	ldr	r3, [pc, #844]	; (80046d4 <bme280.part.0+0x544>)
 8004386:	4620      	mov	r0, r4
 8004388:	e9d3 674a 	ldrd	r6, r7, [r3, #296]	; 0x128
 800438c:	4629      	mov	r1, r5
 800438e:	4632      	mov	r2, r6
 8004390:	463b      	mov	r3, r7
 8004392:	f001 fa95 	bl	80058c0 <__aeabi_dcmpeq>
 8004396:	ac03      	add	r4, sp, #12
 8004398:	2800      	cmp	r0, #0
 800439a:	d0a4      	beq.n	80042e6 <bme280.part.0+0x156>
		if (pressureLast != pressure) {
 800439c:	4bcd      	ldr	r3, [pc, #820]	; (80046d4 <bme280.part.0+0x544>)
 800439e:	f8b3 2130 	ldrh.w	r2, [r3, #304]	; 0x130
 80043a2:	f8b3 3132 	ldrh.w	r3, [r3, #306]	; 0x132
 80043a6:	429a      	cmp	r2, r3
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	d026      	beq.n	80043fa <bme280.part.0+0x26a>
			if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d", pressureLast);
 80043ac:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80043b0:	bf2c      	ite	cs
 80043b2:	49c9      	ldrcs	r1, [pc, #804]	; (80046d8 <bme280.part.0+0x548>)
			else sprintf(weatherPrintP, " %02d", pressureLast);
 80043b4:	49c9      	ldrcc	r1, [pc, #804]	; (80046dc <bme280.part.0+0x54c>)
			if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d", pressureLast);
 80043b6:	4620      	mov	r0, r4
			else sprintf(weatherPrintP, " %02d", pressureLast);
 80043b8:	f004 fada 	bl	8008970 <siprintf>
			LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 80043bc:	21bb      	movs	r1, #187	; 0xbb
 80043be:	2300      	movs	r3, #0
 80043c0:	4622      	mov	r2, r4
 80043c2:	f240 1041 	movw	r0, #321	; 0x141
 80043c6:	f7ff fe99 	bl	80040fc <LCD_Font.constprop.2>
			if (pressure >= 1000) sprintf(weatherPrintP, "%02d", pressure);
 80043ca:	4bc2      	ldr	r3, [pc, #776]	; (80046d4 <bme280.part.0+0x544>)
 80043cc:	4620      	mov	r0, r4
 80043ce:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
 80043d2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80043d6:	bf2c      	ite	cs
 80043d8:	49bf      	ldrcs	r1, [pc, #764]	; (80046d8 <bme280.part.0+0x548>)
			else sprintf(weatherPrintP, " %02d", pressure);
 80043da:	49c0      	ldrcc	r1, [pc, #768]	; (80046dc <bme280.part.0+0x54c>)
 80043dc:	f004 fac8 	bl	8008970 <siprintf>
			LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, GRAY);
 80043e0:	4622      	mov	r2, r4
 80043e2:	4bbf      	ldr	r3, [pc, #764]	; (80046e0 <bme280.part.0+0x550>)
 80043e4:	21bb      	movs	r1, #187	; 0xbb
 80043e6:	f240 1041 	movw	r0, #321	; 0x141
 80043ea:	f7ff fe87 	bl	80040fc <LCD_Font.constprop.2>
			pressureLast = pressure;
 80043ee:	4bb9      	ldr	r3, [pc, #740]	; (80046d4 <bme280.part.0+0x544>)
 80043f0:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
 80043f4:	9200      	str	r2, [sp, #0]
 80043f6:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
    uint16_t dt[1] = {0};
 80043fa:	2600      	movs	r6, #0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80043fc:	4621      	mov	r1, r4
 80043fe:	4630      	mov	r0, r6
    uint16_t dt[1] = {0};
 8004400:	f8ad 600c 	strh.w	r6, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8004404:	f7fe fdce 	bl	8002fa4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
		if (AT24XX_Read(0) != rtcHrs) {
 8004408:	4ab2      	ldr	r2, [pc, #712]	; (80046d4 <bme280.part.0+0x544>)
    return dt[0];
 800440a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800440e:	f892 1134 	ldrb.w	r1, [r2, #308]	; 0x134
 8004412:	4299      	cmp	r1, r3
 8004414:	d09c      	beq.n	8004350 <bme280.part.0+0x1c0>
			AT24XX_Update(0, rtcHrs);
 8004416:	f502 759b 	add.w	r5, r2, #310	; 0x136
 800441a:	46a9      	mov	r9, r5
 800441c:	4630      	mov	r0, r6
 800441e:	f7ff f851 	bl	80034c4 <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8004422:	b2ab      	uxth	r3, r5
 8004424:	f5c3 777a 	rsb	r7, r3, #1000	; 0x3e8
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8004428:	f5c3 7b7a 	rsb	fp, r3, #1000	; 0x3e8
 800442c:	9301      	str	r3, [sp, #4]
 800442e:	b2bf      	uxth	r7, r7
 8004430:	f10b 0b01 	add.w	fp, fp, #1
 8004434:	f505 789d 	add.w	r8, r5, #314	; 0x13a
 8004438:	fa1f fa89 	uxth.w	sl, r9
 800443c:	eb0a 0007 	add.w	r0, sl, r7
 8004440:	4621      	mov	r1, r4
 8004442:	b280      	uxth	r0, r0
    uint16_t dt[1] = {0};
 8004444:	f8ad 600c 	strh.w	r6, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8004448:	f7fe fdac 	bl	8002fa4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
 800444c:	eb0a 000b 	add.w	r0, sl, fp
 8004450:	4621      	mov	r1, r4
    return dt[0];
 8004452:	f8bd a00c 	ldrh.w	sl, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8004456:	b280      	uxth	r0, r0
    uint16_t dt[1] = {0};
 8004458:	f8ad 600c 	strh.w	r6, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800445c:	f7fe fda2 	bl	8002fa4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8004460:	f89d 300c 	ldrb.w	r3, [sp, #12]
	return (byteH << 8) | byteL;
 8004464:	fa5f fa8a 	uxtb.w	sl, sl
 8004468:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 800446c:	f829 af02 	strh.w	sl, [r9, #2]!
 8004470:	45c8      	cmp	r8, r9
 8004472:	d1e1      	bne.n	8004438 <bme280.part.0+0x2a8>
			for (uint16_t i = 1; i < 156; i++) hT[i] = hT[i + 1];
 8004474:	499b      	ldr	r1, [pc, #620]	; (80046e4 <bme280.part.0+0x554>)
 8004476:	9b01      	ldr	r3, [sp, #4]
			hT[155] = (uint16_t) (temperature * 10);
 8004478:	4e96      	ldr	r6, [pc, #600]	; (80046d4 <bme280.part.0+0x544>)
			for (uint16_t i = 1; i < 156; i++) hT[i] = hT[i + 1];
 800447a:	f44f 729b 	mov.w	r2, #310	; 0x136
 800447e:	1e88      	subs	r0, r1, #2
 8004480:	f5c3 7979 	rsb	r9, r3, #996	; 0x3e4
 8004484:	f007 fab6 	bl	800b9f4 <memmove>
			hT[155] = (uint16_t) (temperature * 10);
 8004488:	e9d6 0144 	ldrd	r0, r1, [r6, #272]	; 0x110
 800448c:	2200      	movs	r2, #0
 800448e:	4b96      	ldr	r3, [pc, #600]	; (80046e8 <bme280.part.0+0x558>)
 8004490:	f000 ffae 	bl	80053f0 <__aeabi_dmul>
 8004494:	f001 fa84 	bl	80059a0 <__aeabi_d2uiz>
 8004498:	f109 0903 	add.w	r9, r9, #3
 800449c:	f8a6 026e 	strh.w	r0, [r6, #622]	; 0x26e
				AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 80044a0:	1978      	adds	r0, r7, r5
 80044a2:	f835 6f02 	ldrh.w	r6, [r5, #2]!
 80044a6:	b280      	uxth	r0, r0
 80044a8:	b2f1      	uxtb	r1, r6
 80044aa:	f7ff f80b 	bl	80034c4 <AT24XX_Update>
				AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 80044ae:	eb09 0005 	add.w	r0, r9, r5
 80044b2:	0a31      	lsrs	r1, r6, #8
 80044b4:	b280      	uxth	r0, r0
 80044b6:	f7ff f805 	bl	80034c4 <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 80044ba:	45a8      	cmp	r8, r5
 80044bc:	d1f0      	bne.n	80044a0 <bme280.part.0+0x310>
 80044be:	4d8b      	ldr	r5, [pc, #556]	; (80046ec <bme280.part.0+0x55c>)
    uint16_t dt[1] = {0};
 80044c0:	f04f 0800 	mov.w	r8, #0
 80044c4:	46a9      	mov	r9, r5
 80044c6:	b2ab      	uxth	r3, r5
 80044c8:	f5c3 66fa 	rsb	r6, r3, #2000	; 0x7d0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80044cc:	f5c3 6bfa 	rsb	fp, r3, #2000	; 0x7d0
 80044d0:	f505 779d 	add.w	r7, r5, #314	; 0x13a
 80044d4:	9301      	str	r3, [sp, #4]
 80044d6:	b2b6      	uxth	r6, r6
 80044d8:	f10b 0b01 	add.w	fp, fp, #1
			for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 80044dc:	fa1f fa89 	uxth.w	sl, r9
 80044e0:	eb06 000a 	add.w	r0, r6, sl
 80044e4:	4621      	mov	r1, r4
 80044e6:	b280      	uxth	r0, r0
    uint16_t dt[1] = {0};
 80044e8:	f8ad 800c 	strh.w	r8, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80044ec:	f7fe fd5a 	bl	8002fa4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
 80044f0:	eb0a 000b 	add.w	r0, sl, fp
 80044f4:	4621      	mov	r1, r4
    return dt[0];
 80044f6:	f8bd a00c 	ldrh.w	sl, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80044fa:	b280      	uxth	r0, r0
    uint16_t dt[1] = {0};
 80044fc:	f8ad 800c 	strh.w	r8, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8004500:	f7fe fd50 	bl	8002fa4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8004504:	f89d 300c 	ldrb.w	r3, [sp, #12]
	return (byteH << 8) | byteL;
 8004508:	fa5f fa8a 	uxtb.w	sl, sl
 800450c:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8004510:	f829 af02 	strh.w	sl, [r9, #2]!
 8004514:	454f      	cmp	r7, r9
 8004516:	d1e1      	bne.n	80044dc <bme280.part.0+0x34c>
			for (uint16_t i = 1; i < 156; i++) hH[i] = hH[i + 1];
 8004518:	4975      	ldr	r1, [pc, #468]	; (80046f0 <bme280.part.0+0x560>)
 800451a:	9b01      	ldr	r3, [sp, #4]
			hH[155] = (uint16_t) (humidity * 10);
 800451c:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 80046d4 <bme280.part.0+0x544>
			for (uint16_t i = 1; i < 156; i++) hH[i] = hH[i + 1];
 8004520:	f44f 729b 	mov.w	r2, #310	; 0x136
 8004524:	1e88      	subs	r0, r1, #2
 8004526:	f5c3 69f9 	rsb	r9, r3, #1992	; 0x7c8
 800452a:	f007 fa63 	bl	800b9f4 <memmove>
			hH[155] = (uint16_t) (humidity * 10);
 800452e:	e9d8 0146 	ldrd	r0, r1, [r8, #280]	; 0x118
 8004532:	2200      	movs	r2, #0
 8004534:	4b6c      	ldr	r3, [pc, #432]	; (80046e8 <bme280.part.0+0x558>)
 8004536:	f000 ff5b 	bl	80053f0 <__aeabi_dmul>
 800453a:	f001 fa31 	bl	80059a0 <__aeabi_d2uiz>
 800453e:	f109 0907 	add.w	r9, r9, #7
 8004542:	f8a8 03aa 	strh.w	r0, [r8, #938]	; 0x3aa
				AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 8004546:	1970      	adds	r0, r6, r5
 8004548:	f835 8f02 	ldrh.w	r8, [r5, #2]!
 800454c:	b280      	uxth	r0, r0
 800454e:	fa5f f188 	uxtb.w	r1, r8
 8004552:	f7fe ffb7 	bl	80034c4 <AT24XX_Update>
				AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8004556:	eb09 0005 	add.w	r0, r9, r5
 800455a:	ea4f 2118 	mov.w	r1, r8, lsr #8
 800455e:	b280      	uxth	r0, r0
 8004560:	f7fe ffb0 	bl	80034c4 <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 8004564:	42af      	cmp	r7, r5
 8004566:	d1ee      	bne.n	8004546 <bme280.part.0+0x3b6>
 8004568:	4d62      	ldr	r5, [pc, #392]	; (80046f4 <bme280.part.0+0x564>)
    uint16_t dt[1] = {0};
 800456a:	f04f 0800 	mov.w	r8, #0
 800456e:	46a9      	mov	r9, r5
 8004570:	b2ab      	uxth	r3, r5
 8004572:	f5c3 663b 	rsb	r6, r3, #2992	; 0xbb0
 8004576:	3608      	adds	r6, #8
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8004578:	f5c3 6b3b 	rsb	fp, r3, #2992	; 0xbb0
 800457c:	f505 779d 	add.w	r7, r5, #314	; 0x13a
 8004580:	9301      	str	r3, [sp, #4]
 8004582:	b2b6      	uxth	r6, r6
 8004584:	f10b 0b09 	add.w	fp, fp, #9
			for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8004588:	fa1f fa89 	uxth.w	sl, r9
 800458c:	eb06 000a 	add.w	r0, r6, sl
 8004590:	4621      	mov	r1, r4
 8004592:	b280      	uxth	r0, r0
    uint16_t dt[1] = {0};
 8004594:	f8ad 800c 	strh.w	r8, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8004598:	f7fe fd04 	bl	8002fa4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
 800459c:	eb0a 000b 	add.w	r0, sl, fp
 80045a0:	4621      	mov	r1, r4
    return dt[0];
 80045a2:	f8bd a00c 	ldrh.w	sl, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80045a6:	b280      	uxth	r0, r0
    uint16_t dt[1] = {0};
 80045a8:	f8ad 800c 	strh.w	r8, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80045ac:	f7fe fcfa 	bl	8002fa4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 80045b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
	return (byteH << 8) | byteL;
 80045b4:	fa5f fa8a 	uxtb.w	sl, sl
 80045b8:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 80045bc:	f829 af02 	strh.w	sl, [r9, #2]!
 80045c0:	454f      	cmp	r7, r9
 80045c2:	d1e1      	bne.n	8004588 <bme280.part.0+0x3f8>
			for (uint16_t i = 1; i < 156; i++) hP[i] = hP[i + 1];
 80045c4:	494c      	ldr	r1, [pc, #304]	; (80046f8 <bme280.part.0+0x568>)
 80045c6:	9b01      	ldr	r3, [sp, #4]
 80045c8:	f44f 729b 	mov.w	r2, #310	; 0x136
 80045cc:	1e88      	subs	r0, r1, #2
 80045ce:	f5c3 693b 	rsb	r9, r3, #2992	; 0xbb0
 80045d2:	f007 fa0f 	bl	800b9f4 <memmove>
			hP[155] = (uint16_t)pressure;
 80045d6:	4b3f      	ldr	r3, [pc, #252]	; (80046d4 <bme280.part.0+0x544>)
 80045d8:	9a00      	ldr	r2, [sp, #0]
 80045da:	f109 0907 	add.w	r9, r9, #7
 80045de:	f8a3 24e6 	strh.w	r2, [r3, #1254]	; 0x4e6
				AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 80045e2:	1970      	adds	r0, r6, r5
 80045e4:	f835 4f02 	ldrh.w	r4, [r5, #2]!
 80045e8:	b280      	uxth	r0, r0
 80045ea:	b2e1      	uxtb	r1, r4
 80045ec:	f7fe ff6a 	bl	80034c4 <AT24XX_Update>
				AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 80045f0:	eb09 0005 	add.w	r0, r9, r5
 80045f4:	0a21      	lsrs	r1, r4, #8
 80045f6:	b280      	uxth	r0, r0
 80045f8:	f7fe ff64 	bl	80034c4 <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 80045fc:	42af      	cmp	r7, r5
 80045fe:	d1f0      	bne.n	80045e2 <bme280.part.0+0x452>
	LCD_Line(x, y, x + w, y, size, color24);
 8004600:	23be      	movs	r3, #190	; 0xbe
 8004602:	229f      	movs	r2, #159	; 0x9f
 8004604:	4619      	mov	r1, r3
 8004606:	2002      	movs	r0, #2
 8004608:	f7fd fe7e 	bl	8002308 <LCD_Line.constprop.1>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 800460c:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8004610:	229f      	movs	r2, #159	; 0x9f
 8004612:	4619      	mov	r1, r3
 8004614:	2002      	movs	r0, #2
 8004616:	f7fd fe77 	bl	8002308 <LCD_Line.constprop.1>
	LCD_Line(x, y, x, y + h, size, color24);
 800461a:	2202      	movs	r2, #2
 800461c:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8004620:	4610      	mov	r0, r2
 8004622:	21be      	movs	r1, #190	; 0xbe
 8004624:	f7fd fe70 	bl	8002308 <LCD_Line.constprop.1>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8004628:	229f      	movs	r2, #159	; 0x9f
 800462a:	4e34      	ldr	r6, [pc, #208]	; (80046fc <bme280.part.0+0x56c>)
 800462c:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8004630:	21be      	movs	r1, #190	; 0xbe
 8004632:	4610      	mov	r0, r2
 8004634:	2503      	movs	r5, #3
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004636:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8004700 <bme280.part.0+0x570>
 800463a:	f506 779c 	add.w	r7, r6, #312	; 0x138
 800463e:	f7fd fe63 	bl	8002308 <LCD_Line.constprop.1>
 8004642:	f836 3f02 	ldrh.w	r3, [r6, #2]!
				LCD_Line(3 + i, 191, 3 + i, 318, 1, BLACK);
 8004646:	462a      	mov	r2, r5
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004648:	3bd2      	subs	r3, #210	; 0xd2
 800464a:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 800464e:	fb88 1003 	smull	r1, r0, r8, r3
 8004652:	17dc      	asrs	r4, r3, #31
 8004654:	ebc4 1460 	rsb	r4, r4, r0, asr #5
 8004658:	b224      	sxth	r4, r4
				LCD_Line(3 + i, 191, 3 + i, 318, 1, BLACK);
 800465a:	4628      	mov	r0, r5
 800465c:	2300      	movs	r3, #0
 800465e:	21bf      	movs	r1, #191	; 0xbf
 8004660:	f384 0407 	usat	r4, #7, r4
 8004664:	f7fc ffea 	bl	800163c <LCD_Line.constprop.0>
				LCD_Line(3 + i, 191 + (127 - val), 3 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 8004668:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	b2db      	uxtb	r3, r3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8004670:	f083 0cff 	eor.w	ip, r3, #255	; 0xff
 8004674:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 8004678:	462a      	mov	r2, r5
 800467a:	4628      	mov	r0, r5
 800467c:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 8004680:	b289      	uxth	r1, r1
 8004682:	f7fc ffdb 	bl	800163c <LCD_Line.constprop.0>
			for (uint16_t i = 0; i < 156 ; i++) {
 8004686:	3501      	adds	r5, #1
 8004688:	42be      	cmp	r6, r7
 800468a:	b2ad      	uxth	r5, r5
 800468c:	d1d9      	bne.n	8004642 <bme280.part.0+0x4b2>
	LCD_Line(x, y, x + w, y, size, color24);
 800468e:	23be      	movs	r3, #190	; 0xbe
 8004690:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8004694:	4619      	mov	r1, r3
 8004696:	20a1      	movs	r0, #161	; 0xa1
 8004698:	f7fd fe36 	bl	8002308 <LCD_Line.constprop.1>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 800469c:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80046a0:	20a1      	movs	r0, #161	; 0xa1
 80046a2:	461a      	mov	r2, r3
 80046a4:	4619      	mov	r1, r3
 80046a6:	f7fd fe2f 	bl	8002308 <LCD_Line.constprop.1>
	LCD_Line(x, y, x, y + h, size, color24);
 80046aa:	22a1      	movs	r2, #161	; 0xa1
 80046ac:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80046b0:	4610      	mov	r0, r2
 80046b2:	21be      	movs	r1, #190	; 0xbe
 80046b4:	f7fd fe28 	bl	8002308 <LCD_Line.constprop.1>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 80046b8:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80046bc:	4e0b      	ldr	r6, [pc, #44]	; (80046ec <bme280.part.0+0x55c>)
 80046be:	21be      	movs	r1, #190	; 0xbe
 80046c0:	461a      	mov	r2, r3
 80046c2:	4618      	mov	r0, r3
 80046c4:	25a2      	movs	r5, #162	; 0xa2
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80046c6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8004700 <bme280.part.0+0x570>
 80046ca:	f506 779c 	add.w	r7, r6, #312	; 0x138
 80046ce:	f7fd fe1b 	bl	8002308 <LCD_Line.constprop.1>
 80046d2:	e017      	b.n	8004704 <bme280.part.0+0x574>
 80046d4:	20000200 	.word	0x20000200
 80046d8:	0801de1c 	.word	0x0801de1c
 80046dc:	0801de24 	.word	0x0801de24
 80046e0:	007f7f7f 	.word	0x007f7f7f
 80046e4:	2000033c 	.word	0x2000033c
 80046e8:	40240000 	.word	0x40240000
 80046ec:	20000472 	.word	0x20000472
 80046f0:	20000478 	.word	0x20000478
 80046f4:	200005ae 	.word	0x200005ae
 80046f8:	200005b4 	.word	0x200005b4
 80046fc:	20000336 	.word	0x20000336
 8004700:	66666667 	.word	0x66666667
 8004704:	f836 3f02 	ldrh.w	r3, [r6, #2]!
				LCD_Line(162 + i, 191, 162 + i, 318, 1, BLACK);
 8004708:	462a      	mov	r2, r5
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800470a:	3b64      	subs	r3, #100	; 0x64
 800470c:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 8004710:	fb88 1003 	smull	r1, r0, r8, r3
 8004714:	17dc      	asrs	r4, r3, #31
 8004716:	ebc4 2420 	rsb	r4, r4, r0, asr #8
 800471a:	b224      	sxth	r4, r4
				LCD_Line(162 + i, 191, 162 + i, 318, 1, BLACK);
 800471c:	4628      	mov	r0, r5
 800471e:	2300      	movs	r3, #0
 8004720:	21bf      	movs	r1, #191	; 0xbf
 8004722:	f384 0407 	usat	r4, #7, r4
 8004726:	f7fc ff89 	bl	800163c <LCD_Line.constprop.0>
				LCD_Line(162 + i, 191 + (127 - val), 162 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 800472a:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	b2db      	uxtb	r3, r3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8004732:	f083 0cff 	eor.w	ip, r3, #255	; 0xff
 8004736:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 800473a:	462a      	mov	r2, r5
 800473c:	4628      	mov	r0, r5
 800473e:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 8004742:	b289      	uxth	r1, r1
 8004744:	f7fc ff7a 	bl	800163c <LCD_Line.constprop.0>
			for (uint16_t i = 0; i < 156 ; i++) {
 8004748:	3501      	adds	r5, #1
 800474a:	42be      	cmp	r6, r7
 800474c:	b2ad      	uxth	r5, r5
 800474e:	d1d9      	bne.n	8004704 <bme280.part.0+0x574>
	LCD_Line(x, y, x + w, y, size, color24);
 8004750:	23be      	movs	r3, #190	; 0xbe
 8004752:	f240 12dd 	movw	r2, #477	; 0x1dd
 8004756:	4619      	mov	r1, r3
 8004758:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800475c:	f7fd fdd4 	bl	8002308 <LCD_Line.constprop.1>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8004760:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8004764:	f240 12dd 	movw	r2, #477	; 0x1dd
 8004768:	4619      	mov	r1, r3
 800476a:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800476e:	f7fd fdcb 	bl	8002308 <LCD_Line.constprop.1>
	LCD_Line(x, y, x, y + h, size, color24);
 8004772:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004776:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800477a:	4610      	mov	r0, r2
 800477c:	21be      	movs	r1, #190	; 0xbe
 800477e:	f7fd fdc3 	bl	8002308 <LCD_Line.constprop.1>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8004782:	f240 12dd 	movw	r2, #477	; 0x1dd
 8004786:	4e5a      	ldr	r6, [pc, #360]	; (80048f0 <bme280.part.0+0x760>)
 8004788:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800478c:	21be      	movs	r1, #190	; 0xbe
 800478e:	4610      	mov	r0, r2
 8004790:	f44f 75a1 	mov.w	r5, #322	; 0x142
 8004794:	f506 779c 	add.w	r7, r6, #312	; 0x138
 8004798:	f7fd fdb6 	bl	8002308 <LCD_Line.constprop.1>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800479c:	f46f 7c6a 	mvn.w	ip, #936	; 0x3a8
 80047a0:	f836 4f02 	ldrh.w	r4, [r6, #2]!
				LCD_Line(322 + i, 191, 322 + i, 318, 1, BLACK);
 80047a4:	462a      	mov	r2, r5
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80047a6:	4464      	add	r4, ip
 80047a8:	ebd4 14c4 	rsbs	r4, r4, r4, lsl #7
 80047ac:	bf48      	it	mi
 80047ae:	347f      	addmi	r4, #127	; 0x7f
 80047b0:	f344 14cf 	sbfx	r4, r4, #7, #16
				LCD_Line(322 + i, 191, 322 + i, 318, 1, BLACK);
 80047b4:	4628      	mov	r0, r5
 80047b6:	2300      	movs	r3, #0
 80047b8:	21bf      	movs	r1, #191	; 0xbf
 80047ba:	f384 0407 	usat	r4, #7, r4
 80047be:	f7fc ff3d 	bl	800163c <LCD_Line.constprop.0>
				LCD_Line(322 + i, 191 + (127 - val), 322 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 80047c2:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	b2db      	uxtb	r3, r3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 80047ca:	f083 0cff 	eor.w	ip, r3, #255	; 0xff
 80047ce:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 80047d2:	462a      	mov	r2, r5
 80047d4:	4628      	mov	r0, r5
 80047d6:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 80047da:	b289      	uxth	r1, r1
 80047dc:	f7fc ff2e 	bl	800163c <LCD_Line.constprop.0>
			for (uint16_t i = 0; i < 156 ; i++) {
 80047e0:	3501      	adds	r5, #1
 80047e2:	42be      	cmp	r6, r7
 80047e4:	b2ad      	uxth	r5, r5
 80047e6:	d1d9      	bne.n	800479c <bme280.part.0+0x60c>
			viewGraphs = 1;
 80047e8:	2301      	movs	r3, #1
 80047ea:	4a42      	ldr	r2, [pc, #264]	; (80048f4 <bme280.part.0+0x764>)
 80047ec:	f882 34ea 	strb.w	r3, [r2, #1258]	; 0x4ea
}
 80047f0:	e5b4      	b.n	800435c <bme280.part.0+0x1cc>
				sprintf(weatherPrintT, "%.1f'C", temperature);
 80047f2:	4632      	mov	r2, r6
 80047f4:	463b      	mov	r3, r7
 80047f6:	4620      	mov	r0, r4
 80047f8:	493f      	ldr	r1, [pc, #252]	; (80048f8 <bme280.part.0+0x768>)
 80047fa:	f004 f8b9 	bl	8008970 <siprintf>
				LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 80047fe:	4b3f      	ldr	r3, [pc, #252]	; (80048fc <bme280.part.0+0x76c>)
 8004800:	4622      	mov	r2, r4
 8004802:	21bb      	movs	r1, #187	; 0xbb
 8004804:	2001      	movs	r0, #1
 8004806:	f7ff fc79 	bl	80040fc <LCD_Font.constprop.2>
			temperatureLast = temperature;
 800480a:	4b3a      	ldr	r3, [pc, #232]	; (80048f4 <bme280.part.0+0x764>)
 800480c:	e9d3 6744 	ldrd	r6, r7, [r3, #272]	; 0x110
 8004810:	e54a      	b.n	80042a8 <bme280.part.0+0x118>
				sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8004812:	ac03      	add	r4, sp, #12
 8004814:	4642      	mov	r2, r8
 8004816:	464b      	mov	r3, r9
 8004818:	4620      	mov	r0, r4
 800481a:	4937      	ldr	r1, [pc, #220]	; (80048f8 <bme280.part.0+0x768>)
 800481c:	f004 f8a8 	bl	8008970 <siprintf>
				LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8004820:	2300      	movs	r3, #0
 8004822:	4622      	mov	r2, r4
 8004824:	21bb      	movs	r1, #187	; 0xbb
 8004826:	2001      	movs	r0, #1
 8004828:	f7ff fc68 	bl	80040fc <LCD_Font.constprop.2>
			if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 800482c:	4b31      	ldr	r3, [pc, #196]	; (80048f4 <bme280.part.0+0x764>)
 800482e:	e9d3 6744 	ldrd	r6, r7, [r3, #272]	; 0x110
 8004832:	e515      	b.n	8004260 <bme280.part.0+0xd0>
			else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8004834:	20ba      	movs	r0, #186	; 0xba
 8004836:	f7ff fc61 	bl	80040fc <LCD_Font.constprop.2>
 800483a:	e585      	b.n	8004348 <bme280.part.0+0x1b8>
			else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 800483c:	4622      	mov	r2, r4
 800483e:	21bb      	movs	r1, #187	; 0xbb
 8004840:	20ba      	movs	r0, #186	; 0xba
 8004842:	f7ff fc5b 	bl	80040fc <LCD_Font.constprop.2>
 8004846:	e565      	b.n	8004314 <bme280.part.0+0x184>
			if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8004848:	4630      	mov	r0, r6
 800484a:	4639      	mov	r1, r7
 800484c:	4b2c      	ldr	r3, [pc, #176]	; (8004900 <bme280.part.0+0x770>)
 800484e:	f001 f85f 	bl	8005910 <__aeabi_dcmpgt>
 8004852:	2800      	cmp	r0, #0
 8004854:	d1cd      	bne.n	80047f2 <bme280.part.0+0x662>
			else if (temperature < 10 && temperature > 0) {
 8004856:	2200      	movs	r2, #0
 8004858:	2300      	movs	r3, #0
 800485a:	4630      	mov	r0, r6
 800485c:	4639      	mov	r1, r7
 800485e:	f001 f857 	bl	8005910 <__aeabi_dcmpgt>
 8004862:	bb20      	cbnz	r0, 80048ae <bme280.part.0+0x71e>
				sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 8004864:	4639      	mov	r1, r7
 8004866:	4630      	mov	r0, r6
 8004868:	f001 f872 	bl	8005950 <__aeabi_d2iz>
 800486c:	4602      	mov	r2, r0
 800486e:	4925      	ldr	r1, [pc, #148]	; (8004904 <bme280.part.0+0x774>)
 8004870:	4620      	mov	r0, r4
 8004872:	b252      	sxtb	r2, r2
 8004874:	f004 f87c 	bl	8008970 <siprintf>
 8004878:	e7c1      	b.n	80047fe <bme280.part.0+0x66e>
			if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 800487a:	4640      	mov	r0, r8
 800487c:	4649      	mov	r1, r9
 800487e:	4b20      	ldr	r3, [pc, #128]	; (8004900 <bme280.part.0+0x770>)
 8004880:	f001 f846 	bl	8005910 <__aeabi_dcmpgt>
 8004884:	2800      	cmp	r0, #0
 8004886:	d1c4      	bne.n	8004812 <bme280.part.0+0x682>
			else if (temperatureLast < 10 && temperatureLast > 0) {
 8004888:	2200      	movs	r2, #0
 800488a:	2300      	movs	r3, #0
 800488c:	4640      	mov	r0, r8
 800488e:	4649      	mov	r1, r9
 8004890:	f001 f83e 	bl	8005910 <__aeabi_dcmpgt>
 8004894:	b9d8      	cbnz	r0, 80048ce <bme280.part.0+0x73e>
				sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 8004896:	4649      	mov	r1, r9
 8004898:	4640      	mov	r0, r8
 800489a:	f001 f859 	bl	8005950 <__aeabi_d2iz>
 800489e:	4602      	mov	r2, r0
 80048a0:	ac03      	add	r4, sp, #12
 80048a2:	4620      	mov	r0, r4
 80048a4:	4917      	ldr	r1, [pc, #92]	; (8004904 <bme280.part.0+0x774>)
 80048a6:	b252      	sxtb	r2, r2
 80048a8:	f004 f862 	bl	8008970 <siprintf>
 80048ac:	e7b8      	b.n	8004820 <bme280.part.0+0x690>
				sprintf(weatherPrintT, "%.1f'C", temperature);
 80048ae:	4632      	mov	r2, r6
 80048b0:	463b      	mov	r3, r7
 80048b2:	4911      	ldr	r1, [pc, #68]	; (80048f8 <bme280.part.0+0x768>)
 80048b4:	4620      	mov	r0, r4
 80048b6:	f004 f85b 	bl	8008970 <siprintf>
				LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 80048ba:	4b10      	ldr	r3, [pc, #64]	; (80048fc <bme280.part.0+0x76c>)
 80048bc:	4622      	mov	r2, r4
 80048be:	21bb      	movs	r1, #187	; 0xbb
 80048c0:	201b      	movs	r0, #27
 80048c2:	f7ff fc1b 	bl	80040fc <LCD_Font.constprop.2>
			temperatureLast = temperature;
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <bme280.part.0+0x764>)
 80048c8:	e9d3 6744 	ldrd	r6, r7, [r3, #272]	; 0x110
				LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 80048cc:	e4ec      	b.n	80042a8 <bme280.part.0+0x118>
				sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 80048ce:	ac03      	add	r4, sp, #12
 80048d0:	4642      	mov	r2, r8
 80048d2:	464b      	mov	r3, r9
 80048d4:	4908      	ldr	r1, [pc, #32]	; (80048f8 <bme280.part.0+0x768>)
 80048d6:	4620      	mov	r0, r4
 80048d8:	f004 f84a 	bl	8008970 <siprintf>
				LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 80048dc:	2300      	movs	r3, #0
 80048de:	4622      	mov	r2, r4
 80048e0:	21bb      	movs	r1, #187	; 0xbb
 80048e2:	201b      	movs	r0, #27
 80048e4:	f7ff fc0a 	bl	80040fc <LCD_Font.constprop.2>
			if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 80048e8:	4b02      	ldr	r3, [pc, #8]	; (80048f4 <bme280.part.0+0x764>)
 80048ea:	e9d3 6744 	ldrd	r6, r7, [r3, #272]	; 0x110
				LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 80048ee:	e4b7      	b.n	8004260 <bme280.part.0+0xd0>
 80048f0:	200005ae 	.word	0x200005ae
 80048f4:	20000200 	.word	0x20000200
 80048f8:	0801de04 	.word	0x0801de04
 80048fc:	00ffa500 	.word	0x00ffa500
 8004900:	c0240000 	.word	0xc0240000
 8004904:	0801de0c 	.word	0x0801de0c

08004908 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004908:	e7fe      	b.n	8004908 <NMI_Handler>
 800490a:	bf00      	nop

0800490c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800490c:	e7fe      	b.n	800490c <HardFault_Handler>
 800490e:	bf00      	nop

08004910 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004910:	e7fe      	b.n	8004910 <MemManage_Handler>
 8004912:	bf00      	nop

08004914 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004914:	e7fe      	b.n	8004914 <BusFault_Handler>
 8004916:	bf00      	nop

08004918 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004918:	e7fe      	b.n	8004918 <UsageFault_Handler>
 800491a:	bf00      	nop

0800491c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop

08004920 <DebugMon_Handler>:
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop

08004924 <PendSV_Handler>:
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop

08004928 <SysTick_Handler>:
  uwTick += uwTickFreq;
 8004928:	4a02      	ldr	r2, [pc, #8]	; (8004934 <SysTick_Handler+0xc>)
 800492a:	6813      	ldr	r3, [r2, #0]
 800492c:	3301      	adds	r3, #1
 800492e:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000200 	.word	0x20000200

08004938 <DMA1_Channel2_IRQHandler>:
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004938:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800493a:	4b4d      	ldr	r3, [pc, #308]	; (8004a70 <DMA1_Channel2_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800493c:	b470      	push	{r4, r5, r6}
 800493e:	f8d3 6638 	ldr.w	r6, [r3, #1592]	; 0x638
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004942:	f8d3 063c 	ldr.w	r0, [r3, #1596]	; 0x63c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004946:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004948:	f8d3 25fc 	ldr.w	r2, [r3, #1532]	; 0x5fc
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800494c:	4081      	lsls	r1, r0
 800494e:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8004950:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004952:	d01f      	beq.n	8004994 <DMA1_Channel2_IRQHandler+0x5c>
 8004954:	0769      	lsls	r1, r5, #29
 8004956:	d51d      	bpl.n	8004994 <DMA1_Channel2_IRQHandler+0x5c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004958:	6811      	ldr	r1, [r2, #0]
 800495a:	0688      	lsls	r0, r1, #26
 800495c:	d403      	bmi.n	8004966 <DMA1_Channel2_IRQHandler+0x2e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800495e:	6811      	ldr	r1, [r2, #0]
 8004960:	f021 0104 	bic.w	r1, r1, #4
 8004964:	6011      	str	r1, [r2, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004966:	4943      	ldr	r1, [pc, #268]	; (8004a74 <DMA1_Channel2_IRQHandler+0x13c>)
 8004968:	428a      	cmp	r2, r1
 800496a:	d060      	beq.n	8004a2e <DMA1_Channel2_IRQHandler+0xf6>
 800496c:	3114      	adds	r1, #20
 800496e:	428a      	cmp	r2, r1
 8004970:	d067      	beq.n	8004a42 <DMA1_Channel2_IRQHandler+0x10a>
 8004972:	3114      	adds	r1, #20
 8004974:	428a      	cmp	r2, r1
 8004976:	d06e      	beq.n	8004a56 <DMA1_Channel2_IRQHandler+0x11e>
 8004978:	3114      	adds	r1, #20
 800497a:	428a      	cmp	r2, r1
 800497c:	d071      	beq.n	8004a62 <DMA1_Channel2_IRQHandler+0x12a>
 800497e:	3114      	adds	r1, #20
 8004980:	428a      	cmp	r2, r1
 8004982:	d063      	beq.n	8004a4c <DMA1_Channel2_IRQHandler+0x114>
 8004984:	3114      	adds	r1, #20
 8004986:	428a      	cmp	r2, r1
 8004988:	bf0c      	ite	eq
 800498a:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 800498e:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8004992:	e04d      	b.n	8004a30 <DMA1_Channel2_IRQHandler+0xf8>
      hdma->XferHalfCpltCallback(hdma);
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004994:	2102      	movs	r1, #2
 8004996:	4081      	lsls	r1, r0
 8004998:	4221      	tst	r1, r4
 800499a:	d022      	beq.n	80049e2 <DMA1_Channel2_IRQHandler+0xaa>
 800499c:	07a9      	lsls	r1, r5, #30
 800499e:	d520      	bpl.n	80049e2 <DMA1_Channel2_IRQHandler+0xaa>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049a0:	6811      	ldr	r1, [r2, #0]
 80049a2:	0688      	lsls	r0, r1, #26
 80049a4:	d406      	bmi.n	80049b4 <DMA1_Channel2_IRQHandler+0x7c>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049a6:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80049a8:	6811      	ldr	r1, [r2, #0]
 80049aa:	f021 010a 	bic.w	r1, r1, #10
 80049ae:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80049b0:	f883 061d 	strb.w	r0, [r3, #1565]	; 0x61d
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80049b4:	492f      	ldr	r1, [pc, #188]	; (8004a74 <DMA1_Channel2_IRQHandler+0x13c>)
 80049b6:	428a      	cmp	r2, r1
 80049b8:	d02d      	beq.n	8004a16 <DMA1_Channel2_IRQHandler+0xde>
 80049ba:	3114      	adds	r1, #20
 80049bc:	428a      	cmp	r2, r1
 80049be:	d048      	beq.n	8004a52 <DMA1_Channel2_IRQHandler+0x11a>
 80049c0:	3114      	adds	r1, #20
 80049c2:	428a      	cmp	r2, r1
 80049c4:	d04a      	beq.n	8004a5c <DMA1_Channel2_IRQHandler+0x124>
 80049c6:	3114      	adds	r1, #20
 80049c8:	428a      	cmp	r2, r1
 80049ca:	d03c      	beq.n	8004a46 <DMA1_Channel2_IRQHandler+0x10e>
 80049cc:	3114      	adds	r1, #20
 80049ce:	428a      	cmp	r2, r1
 80049d0:	d04a      	beq.n	8004a68 <DMA1_Channel2_IRQHandler+0x130>
 80049d2:	3114      	adds	r1, #20
 80049d4:	428a      	cmp	r2, r1
 80049d6:	bf0c      	ite	eq
 80049d8:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 80049dc:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 80049e0:	e01a      	b.n	8004a18 <DMA1_Channel2_IRQHandler+0xe0>
      hdma->XferCpltCallback(hdma);
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80049e2:	2108      	movs	r1, #8
 80049e4:	4081      	lsls	r1, r0
 80049e6:	4221      	tst	r1, r4
 80049e8:	d01f      	beq.n	8004a2a <DMA1_Channel2_IRQHandler+0xf2>
 80049ea:	0729      	lsls	r1, r5, #28
 80049ec:	d51d      	bpl.n	8004a2a <DMA1_Channel2_IRQHandler+0xf2>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049ee:	6811      	ldr	r1, [r2, #0]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049f0:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049f4:	f021 010e 	bic.w	r1, r1, #14
 80049f8:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80049fa:	2201      	movs	r2, #1

    if (hdma->XferErrorCallback != NULL)
 80049fc:	f8d3 162c 	ldr.w	r1, [r3, #1580]	; 0x62c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004a00:	fa02 f000 	lsl.w	r0, r2, r0
 8004a04:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a06:	f8c3 2634 	str.w	r2, [r3, #1588]	; 0x634
    __HAL_UNLOCK(hdma);
 8004a0a:	f8a3 461c 	strh.w	r4, [r3, #1564]	; 0x61c
    if (hdma->XferErrorCallback != NULL)
 8004a0e:	b161      	cbz	r1, 8004a2a <DMA1_Channel2_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004a10:	bc70      	pop	{r4, r5, r6}
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a12:	4819      	ldr	r0, [pc, #100]	; (8004a78 <DMA1_Channel2_IRQHandler+0x140>)
 8004a14:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004a16:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8004a18:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004a1a:	4c18      	ldr	r4, [pc, #96]	; (8004a7c <DMA1_Channel2_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8004a1c:	f8d3 1624 	ldr.w	r1, [r3, #1572]	; 0x624
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004a20:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8004a22:	f883 061c 	strb.w	r0, [r3, #1564]	; 0x61c
    if(hdma->XferCpltCallback != NULL)
 8004a26:	2900      	cmp	r1, #0
 8004a28:	d1f2      	bne.n	8004a10 <DMA1_Channel2_IRQHandler+0xd8>
 8004a2a:	bc70      	pop	{r4, r5, r6}
 8004a2c:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004a2e:	2204      	movs	r2, #4
 8004a30:	4912      	ldr	r1, [pc, #72]	; (8004a7c <DMA1_Channel2_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 8004a32:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004a36:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0f6      	beq.n	8004a2a <DMA1_Channel2_IRQHandler+0xf2>
 8004a3c:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 8004a3e:	480e      	ldr	r0, [pc, #56]	; (8004a78 <DMA1_Channel2_IRQHandler+0x140>)
 8004a40:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004a42:	2240      	movs	r2, #64	; 0x40
 8004a44:	e7f4      	b.n	8004a30 <DMA1_Channel2_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004a46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a4a:	e7e5      	b.n	8004a18 <DMA1_Channel2_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004a4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004a50:	e7ee      	b.n	8004a30 <DMA1_Channel2_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004a52:	2220      	movs	r2, #32
 8004a54:	e7e0      	b.n	8004a18 <DMA1_Channel2_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a5a:	e7e9      	b.n	8004a30 <DMA1_Channel2_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a60:	e7da      	b.n	8004a18 <DMA1_Channel2_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004a62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a66:	e7e3      	b.n	8004a30 <DMA1_Channel2_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004a68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a6c:	e7d4      	b.n	8004a18 <DMA1_Channel2_IRQHandler+0xe0>
 8004a6e:	bf00      	nop
 8004a70:	20000200 	.word	0x20000200
 8004a74:	40020008 	.word	0x40020008
 8004a78:	200007fc 	.word	0x200007fc
 8004a7c:	40020000 	.word	0x40020000

08004a80 <DMA1_Channel4_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004a80:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a82:	4b4d      	ldr	r3, [pc, #308]	; (8004bb8 <DMA1_Channel4_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004a84:	b470      	push	{r4, r5, r6}
 8004a86:	f8d3 65b0 	ldr.w	r6, [r3, #1456]	; 0x5b0
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004a8a:	f8d3 05b4 	ldr.w	r0, [r3, #1460]	; 0x5b4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a8e:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004a90:	f8d3 2574 	ldr.w	r2, [r3, #1396]	; 0x574
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004a94:	4081      	lsls	r1, r0
 8004a96:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8004a98:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004a9a:	d01f      	beq.n	8004adc <DMA1_Channel4_IRQHandler+0x5c>
 8004a9c:	0769      	lsls	r1, r5, #29
 8004a9e:	d51d      	bpl.n	8004adc <DMA1_Channel4_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004aa0:	6811      	ldr	r1, [r2, #0]
 8004aa2:	0688      	lsls	r0, r1, #26
 8004aa4:	d403      	bmi.n	8004aae <DMA1_Channel4_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004aa6:	6811      	ldr	r1, [r2, #0]
 8004aa8:	f021 0104 	bic.w	r1, r1, #4
 8004aac:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004aae:	4943      	ldr	r1, [pc, #268]	; (8004bbc <DMA1_Channel4_IRQHandler+0x13c>)
 8004ab0:	428a      	cmp	r2, r1
 8004ab2:	d060      	beq.n	8004b76 <DMA1_Channel4_IRQHandler+0xf6>
 8004ab4:	3114      	adds	r1, #20
 8004ab6:	428a      	cmp	r2, r1
 8004ab8:	d067      	beq.n	8004b8a <DMA1_Channel4_IRQHandler+0x10a>
 8004aba:	3114      	adds	r1, #20
 8004abc:	428a      	cmp	r2, r1
 8004abe:	d06e      	beq.n	8004b9e <DMA1_Channel4_IRQHandler+0x11e>
 8004ac0:	3114      	adds	r1, #20
 8004ac2:	428a      	cmp	r2, r1
 8004ac4:	d071      	beq.n	8004baa <DMA1_Channel4_IRQHandler+0x12a>
 8004ac6:	3114      	adds	r1, #20
 8004ac8:	428a      	cmp	r2, r1
 8004aca:	d063      	beq.n	8004b94 <DMA1_Channel4_IRQHandler+0x114>
 8004acc:	3114      	adds	r1, #20
 8004ace:	428a      	cmp	r2, r1
 8004ad0:	bf0c      	ite	eq
 8004ad2:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8004ad6:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8004ada:	e04d      	b.n	8004b78 <DMA1_Channel4_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004adc:	2102      	movs	r1, #2
 8004ade:	4081      	lsls	r1, r0
 8004ae0:	4221      	tst	r1, r4
 8004ae2:	d022      	beq.n	8004b2a <DMA1_Channel4_IRQHandler+0xaa>
 8004ae4:	07a9      	lsls	r1, r5, #30
 8004ae6:	d520      	bpl.n	8004b2a <DMA1_Channel4_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ae8:	6811      	ldr	r1, [r2, #0]
 8004aea:	0688      	lsls	r0, r1, #26
 8004aec:	d406      	bmi.n	8004afc <DMA1_Channel4_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 8004aee:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004af0:	6811      	ldr	r1, [r2, #0]
 8004af2:	f021 010a 	bic.w	r1, r1, #10
 8004af6:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004af8:	f883 0595 	strb.w	r0, [r3, #1429]	; 0x595
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004afc:	492f      	ldr	r1, [pc, #188]	; (8004bbc <DMA1_Channel4_IRQHandler+0x13c>)
 8004afe:	428a      	cmp	r2, r1
 8004b00:	d02d      	beq.n	8004b5e <DMA1_Channel4_IRQHandler+0xde>
 8004b02:	3114      	adds	r1, #20
 8004b04:	428a      	cmp	r2, r1
 8004b06:	d048      	beq.n	8004b9a <DMA1_Channel4_IRQHandler+0x11a>
 8004b08:	3114      	adds	r1, #20
 8004b0a:	428a      	cmp	r2, r1
 8004b0c:	d04a      	beq.n	8004ba4 <DMA1_Channel4_IRQHandler+0x124>
 8004b0e:	3114      	adds	r1, #20
 8004b10:	428a      	cmp	r2, r1
 8004b12:	d03c      	beq.n	8004b8e <DMA1_Channel4_IRQHandler+0x10e>
 8004b14:	3114      	adds	r1, #20
 8004b16:	428a      	cmp	r2, r1
 8004b18:	d04a      	beq.n	8004bb0 <DMA1_Channel4_IRQHandler+0x130>
 8004b1a:	3114      	adds	r1, #20
 8004b1c:	428a      	cmp	r2, r1
 8004b1e:	bf0c      	ite	eq
 8004b20:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8004b24:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8004b28:	e01a      	b.n	8004b60 <DMA1_Channel4_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004b2a:	2108      	movs	r1, #8
 8004b2c:	4081      	lsls	r1, r0
 8004b2e:	4221      	tst	r1, r4
 8004b30:	d01f      	beq.n	8004b72 <DMA1_Channel4_IRQHandler+0xf2>
 8004b32:	0729      	lsls	r1, r5, #28
 8004b34:	d51d      	bpl.n	8004b72 <DMA1_Channel4_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b36:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 8004b38:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b3c:	f021 010e 	bic.w	r1, r1, #14
 8004b40:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004b42:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8004b44:	f8d3 15a4 	ldr.w	r1, [r3, #1444]	; 0x5a4
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004b48:	fa02 f000 	lsl.w	r0, r2, r0
 8004b4c:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b4e:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
    __HAL_UNLOCK(hdma);
 8004b52:	f8a3 4594 	strh.w	r4, [r3, #1428]	; 0x594
    if (hdma->XferErrorCallback != NULL)
 8004b56:	b161      	cbz	r1, 8004b72 <DMA1_Channel4_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004b58:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8004b5a:	4819      	ldr	r0, [pc, #100]	; (8004bc0 <DMA1_Channel4_IRQHandler+0x140>)
 8004b5c:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004b5e:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8004b60:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004b62:	4c18      	ldr	r4, [pc, #96]	; (8004bc4 <DMA1_Channel4_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8004b64:	f8d3 159c 	ldr.w	r1, [r3, #1436]	; 0x59c
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004b68:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8004b6a:	f883 0594 	strb.w	r0, [r3, #1428]	; 0x594
    if(hdma->XferCpltCallback != NULL)
 8004b6e:	2900      	cmp	r1, #0
 8004b70:	d1f2      	bne.n	8004b58 <DMA1_Channel4_IRQHandler+0xd8>
 8004b72:	bc70      	pop	{r4, r5, r6}
 8004b74:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004b76:	2204      	movs	r2, #4
 8004b78:	4912      	ldr	r1, [pc, #72]	; (8004bc4 <DMA1_Channel4_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 8004b7a:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004b7e:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f6      	beq.n	8004b72 <DMA1_Channel4_IRQHandler+0xf2>
 8004b84:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 8004b86:	480e      	ldr	r0, [pc, #56]	; (8004bc0 <DMA1_Channel4_IRQHandler+0x140>)
 8004b88:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004b8a:	2240      	movs	r2, #64	; 0x40
 8004b8c:	e7f4      	b.n	8004b78 <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004b8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b92:	e7e5      	b.n	8004b60 <DMA1_Channel4_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004b94:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004b98:	e7ee      	b.n	8004b78 <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	e7e0      	b.n	8004b60 <DMA1_Channel4_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004b9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ba2:	e7e9      	b.n	8004b78 <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ba8:	e7da      	b.n	8004b60 <DMA1_Channel4_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004baa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004bae:	e7e3      	b.n	8004b78 <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004bb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004bb4:	e7d4      	b.n	8004b60 <DMA1_Channel4_IRQHandler+0xe0>
 8004bb6:	bf00      	nop
 8004bb8:	20000200 	.word	0x20000200
 8004bbc:	40020008 	.word	0x40020008
 8004bc0:	20000774 	.word	0x20000774
 8004bc4:	40020000 	.word	0x40020000

08004bc8 <DMA1_Channel5_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004bc8:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004bca:	4b4d      	ldr	r3, [pc, #308]	; (8004d00 <DMA1_Channel5_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004bcc:	b470      	push	{r4, r5, r6}
 8004bce:	f8d3 65f4 	ldr.w	r6, [r3, #1524]	; 0x5f4
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004bd2:	f8d3 05f8 	ldr.w	r0, [r3, #1528]	; 0x5f8
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004bd6:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004bd8:	f8d3 25b8 	ldr.w	r2, [r3, #1464]	; 0x5b8
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004bdc:	4081      	lsls	r1, r0
 8004bde:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8004be0:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004be2:	d01f      	beq.n	8004c24 <DMA1_Channel5_IRQHandler+0x5c>
 8004be4:	0769      	lsls	r1, r5, #29
 8004be6:	d51d      	bpl.n	8004c24 <DMA1_Channel5_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004be8:	6811      	ldr	r1, [r2, #0]
 8004bea:	0688      	lsls	r0, r1, #26
 8004bec:	d403      	bmi.n	8004bf6 <DMA1_Channel5_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bee:	6811      	ldr	r1, [r2, #0]
 8004bf0:	f021 0104 	bic.w	r1, r1, #4
 8004bf4:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004bf6:	4943      	ldr	r1, [pc, #268]	; (8004d04 <DMA1_Channel5_IRQHandler+0x13c>)
 8004bf8:	428a      	cmp	r2, r1
 8004bfa:	d060      	beq.n	8004cbe <DMA1_Channel5_IRQHandler+0xf6>
 8004bfc:	3114      	adds	r1, #20
 8004bfe:	428a      	cmp	r2, r1
 8004c00:	d067      	beq.n	8004cd2 <DMA1_Channel5_IRQHandler+0x10a>
 8004c02:	3114      	adds	r1, #20
 8004c04:	428a      	cmp	r2, r1
 8004c06:	d06e      	beq.n	8004ce6 <DMA1_Channel5_IRQHandler+0x11e>
 8004c08:	3114      	adds	r1, #20
 8004c0a:	428a      	cmp	r2, r1
 8004c0c:	d071      	beq.n	8004cf2 <DMA1_Channel5_IRQHandler+0x12a>
 8004c0e:	3114      	adds	r1, #20
 8004c10:	428a      	cmp	r2, r1
 8004c12:	d063      	beq.n	8004cdc <DMA1_Channel5_IRQHandler+0x114>
 8004c14:	3114      	adds	r1, #20
 8004c16:	428a      	cmp	r2, r1
 8004c18:	bf0c      	ite	eq
 8004c1a:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8004c1e:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8004c22:	e04d      	b.n	8004cc0 <DMA1_Channel5_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004c24:	2102      	movs	r1, #2
 8004c26:	4081      	lsls	r1, r0
 8004c28:	4221      	tst	r1, r4
 8004c2a:	d022      	beq.n	8004c72 <DMA1_Channel5_IRQHandler+0xaa>
 8004c2c:	07a9      	lsls	r1, r5, #30
 8004c2e:	d520      	bpl.n	8004c72 <DMA1_Channel5_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c30:	6811      	ldr	r1, [r2, #0]
 8004c32:	0688      	lsls	r0, r1, #26
 8004c34:	d406      	bmi.n	8004c44 <DMA1_Channel5_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 8004c36:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004c38:	6811      	ldr	r1, [r2, #0]
 8004c3a:	f021 010a 	bic.w	r1, r1, #10
 8004c3e:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004c40:	f883 05d9 	strb.w	r0, [r3, #1497]	; 0x5d9
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004c44:	492f      	ldr	r1, [pc, #188]	; (8004d04 <DMA1_Channel5_IRQHandler+0x13c>)
 8004c46:	428a      	cmp	r2, r1
 8004c48:	d02d      	beq.n	8004ca6 <DMA1_Channel5_IRQHandler+0xde>
 8004c4a:	3114      	adds	r1, #20
 8004c4c:	428a      	cmp	r2, r1
 8004c4e:	d048      	beq.n	8004ce2 <DMA1_Channel5_IRQHandler+0x11a>
 8004c50:	3114      	adds	r1, #20
 8004c52:	428a      	cmp	r2, r1
 8004c54:	d04a      	beq.n	8004cec <DMA1_Channel5_IRQHandler+0x124>
 8004c56:	3114      	adds	r1, #20
 8004c58:	428a      	cmp	r2, r1
 8004c5a:	d03c      	beq.n	8004cd6 <DMA1_Channel5_IRQHandler+0x10e>
 8004c5c:	3114      	adds	r1, #20
 8004c5e:	428a      	cmp	r2, r1
 8004c60:	d04a      	beq.n	8004cf8 <DMA1_Channel5_IRQHandler+0x130>
 8004c62:	3114      	adds	r1, #20
 8004c64:	428a      	cmp	r2, r1
 8004c66:	bf0c      	ite	eq
 8004c68:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8004c6c:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8004c70:	e01a      	b.n	8004ca8 <DMA1_Channel5_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004c72:	2108      	movs	r1, #8
 8004c74:	4081      	lsls	r1, r0
 8004c76:	4221      	tst	r1, r4
 8004c78:	d01f      	beq.n	8004cba <DMA1_Channel5_IRQHandler+0xf2>
 8004c7a:	0729      	lsls	r1, r5, #28
 8004c7c:	d51d      	bpl.n	8004cba <DMA1_Channel5_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c7e:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 8004c80:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c84:	f021 010e 	bic.w	r1, r1, #14
 8004c88:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004c8a:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8004c8c:	f8d3 15e8 	ldr.w	r1, [r3, #1512]	; 0x5e8
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004c90:	fa02 f000 	lsl.w	r0, r2, r0
 8004c94:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c96:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
    __HAL_UNLOCK(hdma);
 8004c9a:	f8a3 45d8 	strh.w	r4, [r3, #1496]	; 0x5d8
    if (hdma->XferErrorCallback != NULL)
 8004c9e:	b161      	cbz	r1, 8004cba <DMA1_Channel5_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004ca0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8004ca2:	4819      	ldr	r0, [pc, #100]	; (8004d08 <DMA1_Channel5_IRQHandler+0x140>)
 8004ca4:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004ca6:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8004ca8:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004caa:	4c18      	ldr	r4, [pc, #96]	; (8004d0c <DMA1_Channel5_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8004cac:	f8d3 15e0 	ldr.w	r1, [r3, #1504]	; 0x5e0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004cb0:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8004cb2:	f883 05d8 	strb.w	r0, [r3, #1496]	; 0x5d8
    if(hdma->XferCpltCallback != NULL)
 8004cb6:	2900      	cmp	r1, #0
 8004cb8:	d1f2      	bne.n	8004ca0 <DMA1_Channel5_IRQHandler+0xd8>
 8004cba:	bc70      	pop	{r4, r5, r6}
 8004cbc:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	4912      	ldr	r1, [pc, #72]	; (8004d0c <DMA1_Channel5_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 8004cc2:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004cc6:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0f6      	beq.n	8004cba <DMA1_Channel5_IRQHandler+0xf2>
 8004ccc:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 8004cce:	480e      	ldr	r0, [pc, #56]	; (8004d08 <DMA1_Channel5_IRQHandler+0x140>)
 8004cd0:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004cd2:	2240      	movs	r2, #64	; 0x40
 8004cd4:	e7f4      	b.n	8004cc0 <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004cd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004cda:	e7e5      	b.n	8004ca8 <DMA1_Channel5_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004cdc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004ce0:	e7ee      	b.n	8004cc0 <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	e7e0      	b.n	8004ca8 <DMA1_Channel5_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004ce6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cea:	e7e9      	b.n	8004cc0 <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cf0:	e7da      	b.n	8004ca8 <DMA1_Channel5_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004cf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cf6:	e7e3      	b.n	8004cc0 <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004cf8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004cfc:	e7d4      	b.n	8004ca8 <DMA1_Channel5_IRQHandler+0xe0>
 8004cfe:	bf00      	nop
 8004d00:	20000200 	.word	0x20000200
 8004d04:	40020008 	.word	0x40020008
 8004d08:	200007b8 	.word	0x200007b8
 8004d0c:	40020000 	.word	0x40020000

08004d10 <DMA1_Channel6_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004d10:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d12:	4b4d      	ldr	r3, [pc, #308]	; (8004e48 <DMA1_Channel6_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004d14:	b470      	push	{r4, r5, r6}
 8004d16:	f8d3 6528 	ldr.w	r6, [r3, #1320]	; 0x528
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004d1a:	f8d3 052c 	ldr.w	r0, [r3, #1324]	; 0x52c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d1e:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004d20:	f8d3 24ec 	ldr.w	r2, [r3, #1260]	; 0x4ec
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004d24:	4081      	lsls	r1, r0
 8004d26:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8004d28:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004d2a:	d01f      	beq.n	8004d6c <DMA1_Channel6_IRQHandler+0x5c>
 8004d2c:	0769      	lsls	r1, r5, #29
 8004d2e:	d51d      	bpl.n	8004d6c <DMA1_Channel6_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d30:	6811      	ldr	r1, [r2, #0]
 8004d32:	0688      	lsls	r0, r1, #26
 8004d34:	d403      	bmi.n	8004d3e <DMA1_Channel6_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d36:	6811      	ldr	r1, [r2, #0]
 8004d38:	f021 0104 	bic.w	r1, r1, #4
 8004d3c:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004d3e:	4943      	ldr	r1, [pc, #268]	; (8004e4c <DMA1_Channel6_IRQHandler+0x13c>)
 8004d40:	428a      	cmp	r2, r1
 8004d42:	d060      	beq.n	8004e06 <DMA1_Channel6_IRQHandler+0xf6>
 8004d44:	3114      	adds	r1, #20
 8004d46:	428a      	cmp	r2, r1
 8004d48:	d067      	beq.n	8004e1a <DMA1_Channel6_IRQHandler+0x10a>
 8004d4a:	3114      	adds	r1, #20
 8004d4c:	428a      	cmp	r2, r1
 8004d4e:	d06e      	beq.n	8004e2e <DMA1_Channel6_IRQHandler+0x11e>
 8004d50:	3114      	adds	r1, #20
 8004d52:	428a      	cmp	r2, r1
 8004d54:	d071      	beq.n	8004e3a <DMA1_Channel6_IRQHandler+0x12a>
 8004d56:	3114      	adds	r1, #20
 8004d58:	428a      	cmp	r2, r1
 8004d5a:	d063      	beq.n	8004e24 <DMA1_Channel6_IRQHandler+0x114>
 8004d5c:	3114      	adds	r1, #20
 8004d5e:	428a      	cmp	r2, r1
 8004d60:	bf0c      	ite	eq
 8004d62:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8004d66:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8004d6a:	e04d      	b.n	8004e08 <DMA1_Channel6_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004d6c:	2102      	movs	r1, #2
 8004d6e:	4081      	lsls	r1, r0
 8004d70:	4221      	tst	r1, r4
 8004d72:	d022      	beq.n	8004dba <DMA1_Channel6_IRQHandler+0xaa>
 8004d74:	07a9      	lsls	r1, r5, #30
 8004d76:	d520      	bpl.n	8004dba <DMA1_Channel6_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d78:	6811      	ldr	r1, [r2, #0]
 8004d7a:	0688      	lsls	r0, r1, #26
 8004d7c:	d406      	bmi.n	8004d8c <DMA1_Channel6_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 8004d7e:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004d80:	6811      	ldr	r1, [r2, #0]
 8004d82:	f021 010a 	bic.w	r1, r1, #10
 8004d86:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004d88:	f883 050d 	strb.w	r0, [r3, #1293]	; 0x50d
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004d8c:	492f      	ldr	r1, [pc, #188]	; (8004e4c <DMA1_Channel6_IRQHandler+0x13c>)
 8004d8e:	428a      	cmp	r2, r1
 8004d90:	d02d      	beq.n	8004dee <DMA1_Channel6_IRQHandler+0xde>
 8004d92:	3114      	adds	r1, #20
 8004d94:	428a      	cmp	r2, r1
 8004d96:	d048      	beq.n	8004e2a <DMA1_Channel6_IRQHandler+0x11a>
 8004d98:	3114      	adds	r1, #20
 8004d9a:	428a      	cmp	r2, r1
 8004d9c:	d04a      	beq.n	8004e34 <DMA1_Channel6_IRQHandler+0x124>
 8004d9e:	3114      	adds	r1, #20
 8004da0:	428a      	cmp	r2, r1
 8004da2:	d03c      	beq.n	8004e1e <DMA1_Channel6_IRQHandler+0x10e>
 8004da4:	3114      	adds	r1, #20
 8004da6:	428a      	cmp	r2, r1
 8004da8:	d04a      	beq.n	8004e40 <DMA1_Channel6_IRQHandler+0x130>
 8004daa:	3114      	adds	r1, #20
 8004dac:	428a      	cmp	r2, r1
 8004dae:	bf0c      	ite	eq
 8004db0:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8004db4:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8004db8:	e01a      	b.n	8004df0 <DMA1_Channel6_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004dba:	2108      	movs	r1, #8
 8004dbc:	4081      	lsls	r1, r0
 8004dbe:	4221      	tst	r1, r4
 8004dc0:	d01f      	beq.n	8004e02 <DMA1_Channel6_IRQHandler+0xf2>
 8004dc2:	0729      	lsls	r1, r5, #28
 8004dc4:	d51d      	bpl.n	8004e02 <DMA1_Channel6_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dc6:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 8004dc8:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dcc:	f021 010e 	bic.w	r1, r1, #14
 8004dd0:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004dd2:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8004dd4:	f8d3 151c 	ldr.w	r1, [r3, #1308]	; 0x51c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004dd8:	fa02 f000 	lsl.w	r0, r2, r0
 8004ddc:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004dde:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    __HAL_UNLOCK(hdma);
 8004de2:	f8a3 450c 	strh.w	r4, [r3, #1292]	; 0x50c
    if (hdma->XferErrorCallback != NULL)
 8004de6:	b161      	cbz	r1, 8004e02 <DMA1_Channel6_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004de8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8004dea:	4819      	ldr	r0, [pc, #100]	; (8004e50 <DMA1_Channel6_IRQHandler+0x140>)
 8004dec:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004dee:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8004df0:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004df2:	4c18      	ldr	r4, [pc, #96]	; (8004e54 <DMA1_Channel6_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8004df4:	f8d3 1514 	ldr.w	r1, [r3, #1300]	; 0x514
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004df8:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8004dfa:	f883 050c 	strb.w	r0, [r3, #1292]	; 0x50c
    if(hdma->XferCpltCallback != NULL)
 8004dfe:	2900      	cmp	r1, #0
 8004e00:	d1f2      	bne.n	8004de8 <DMA1_Channel6_IRQHandler+0xd8>
 8004e02:	bc70      	pop	{r4, r5, r6}
 8004e04:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004e06:	2204      	movs	r2, #4
 8004e08:	4912      	ldr	r1, [pc, #72]	; (8004e54 <DMA1_Channel6_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 8004e0a:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004e0e:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0f6      	beq.n	8004e02 <DMA1_Channel6_IRQHandler+0xf2>
 8004e14:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 8004e16:	480e      	ldr	r0, [pc, #56]	; (8004e50 <DMA1_Channel6_IRQHandler+0x140>)
 8004e18:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004e1a:	2240      	movs	r2, #64	; 0x40
 8004e1c:	e7f4      	b.n	8004e08 <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004e1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e22:	e7e5      	b.n	8004df0 <DMA1_Channel6_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004e24:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004e28:	e7ee      	b.n	8004e08 <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	e7e0      	b.n	8004df0 <DMA1_Channel6_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e32:	e7e9      	b.n	8004e08 <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e38:	e7da      	b.n	8004df0 <DMA1_Channel6_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004e3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e3e:	e7e3      	b.n	8004e08 <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004e40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e44:	e7d4      	b.n	8004df0 <DMA1_Channel6_IRQHandler+0xe0>
 8004e46:	bf00      	nop
 8004e48:	20000200 	.word	0x20000200
 8004e4c:	40020008 	.word	0x40020008
 8004e50:	200006ec 	.word	0x200006ec
 8004e54:	40020000 	.word	0x40020000

08004e58 <DMA1_Channel7_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004e58:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e5a:	4b4d      	ldr	r3, [pc, #308]	; (8004f90 <DMA1_Channel7_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8004e5c:	b470      	push	{r4, r5, r6}
 8004e5e:	f8d3 656c 	ldr.w	r6, [r3, #1388]	; 0x56c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004e62:	f8d3 0570 	ldr.w	r0, [r3, #1392]	; 0x570
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e66:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004e68:	f8d3 2530 	ldr.w	r2, [r3, #1328]	; 0x530
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004e6c:	4081      	lsls	r1, r0
 8004e6e:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8004e70:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004e72:	d01f      	beq.n	8004eb4 <DMA1_Channel7_IRQHandler+0x5c>
 8004e74:	0769      	lsls	r1, r5, #29
 8004e76:	d51d      	bpl.n	8004eb4 <DMA1_Channel7_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e78:	6811      	ldr	r1, [r2, #0]
 8004e7a:	0688      	lsls	r0, r1, #26
 8004e7c:	d403      	bmi.n	8004e86 <DMA1_Channel7_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e7e:	6811      	ldr	r1, [r2, #0]
 8004e80:	f021 0104 	bic.w	r1, r1, #4
 8004e84:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004e86:	4943      	ldr	r1, [pc, #268]	; (8004f94 <DMA1_Channel7_IRQHandler+0x13c>)
 8004e88:	428a      	cmp	r2, r1
 8004e8a:	d060      	beq.n	8004f4e <DMA1_Channel7_IRQHandler+0xf6>
 8004e8c:	3114      	adds	r1, #20
 8004e8e:	428a      	cmp	r2, r1
 8004e90:	d067      	beq.n	8004f62 <DMA1_Channel7_IRQHandler+0x10a>
 8004e92:	3114      	adds	r1, #20
 8004e94:	428a      	cmp	r2, r1
 8004e96:	d06e      	beq.n	8004f76 <DMA1_Channel7_IRQHandler+0x11e>
 8004e98:	3114      	adds	r1, #20
 8004e9a:	428a      	cmp	r2, r1
 8004e9c:	d071      	beq.n	8004f82 <DMA1_Channel7_IRQHandler+0x12a>
 8004e9e:	3114      	adds	r1, #20
 8004ea0:	428a      	cmp	r2, r1
 8004ea2:	d063      	beq.n	8004f6c <DMA1_Channel7_IRQHandler+0x114>
 8004ea4:	3114      	adds	r1, #20
 8004ea6:	428a      	cmp	r2, r1
 8004ea8:	bf0c      	ite	eq
 8004eaa:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8004eae:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8004eb2:	e04d      	b.n	8004f50 <DMA1_Channel7_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004eb4:	2102      	movs	r1, #2
 8004eb6:	4081      	lsls	r1, r0
 8004eb8:	4221      	tst	r1, r4
 8004eba:	d022      	beq.n	8004f02 <DMA1_Channel7_IRQHandler+0xaa>
 8004ebc:	07a9      	lsls	r1, r5, #30
 8004ebe:	d520      	bpl.n	8004f02 <DMA1_Channel7_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ec0:	6811      	ldr	r1, [r2, #0]
 8004ec2:	0688      	lsls	r0, r1, #26
 8004ec4:	d406      	bmi.n	8004ed4 <DMA1_Channel7_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 8004ec6:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004ec8:	6811      	ldr	r1, [r2, #0]
 8004eca:	f021 010a 	bic.w	r1, r1, #10
 8004ece:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004ed0:	f883 0551 	strb.w	r0, [r3, #1361]	; 0x551
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004ed4:	492f      	ldr	r1, [pc, #188]	; (8004f94 <DMA1_Channel7_IRQHandler+0x13c>)
 8004ed6:	428a      	cmp	r2, r1
 8004ed8:	d02d      	beq.n	8004f36 <DMA1_Channel7_IRQHandler+0xde>
 8004eda:	3114      	adds	r1, #20
 8004edc:	428a      	cmp	r2, r1
 8004ede:	d048      	beq.n	8004f72 <DMA1_Channel7_IRQHandler+0x11a>
 8004ee0:	3114      	adds	r1, #20
 8004ee2:	428a      	cmp	r2, r1
 8004ee4:	d04a      	beq.n	8004f7c <DMA1_Channel7_IRQHandler+0x124>
 8004ee6:	3114      	adds	r1, #20
 8004ee8:	428a      	cmp	r2, r1
 8004eea:	d03c      	beq.n	8004f66 <DMA1_Channel7_IRQHandler+0x10e>
 8004eec:	3114      	adds	r1, #20
 8004eee:	428a      	cmp	r2, r1
 8004ef0:	d04a      	beq.n	8004f88 <DMA1_Channel7_IRQHandler+0x130>
 8004ef2:	3114      	adds	r1, #20
 8004ef4:	428a      	cmp	r2, r1
 8004ef6:	bf0c      	ite	eq
 8004ef8:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8004efc:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8004f00:	e01a      	b.n	8004f38 <DMA1_Channel7_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004f02:	2108      	movs	r1, #8
 8004f04:	4081      	lsls	r1, r0
 8004f06:	4221      	tst	r1, r4
 8004f08:	d01f      	beq.n	8004f4a <DMA1_Channel7_IRQHandler+0xf2>
 8004f0a:	0729      	lsls	r1, r5, #28
 8004f0c:	d51d      	bpl.n	8004f4a <DMA1_Channel7_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f0e:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 8004f10:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f14:	f021 010e 	bic.w	r1, r1, #14
 8004f18:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004f1a:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8004f1c:	f8d3 1560 	ldr.w	r1, [r3, #1376]	; 0x560
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004f20:	fa02 f000 	lsl.w	r0, r2, r0
 8004f24:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f26:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
    __HAL_UNLOCK(hdma);
 8004f2a:	f8a3 4550 	strh.w	r4, [r3, #1360]	; 0x550
    if (hdma->XferErrorCallback != NULL)
 8004f2e:	b161      	cbz	r1, 8004f4a <DMA1_Channel7_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8004f30:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8004f32:	4819      	ldr	r0, [pc, #100]	; (8004f98 <DMA1_Channel7_IRQHandler+0x140>)
 8004f34:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004f36:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8004f38:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004f3a:	4c18      	ldr	r4, [pc, #96]	; (8004f9c <DMA1_Channel7_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8004f3c:	f8d3 1558 	ldr.w	r1, [r3, #1368]	; 0x558
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004f40:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8004f42:	f883 0550 	strb.w	r0, [r3, #1360]	; 0x550
    if(hdma->XferCpltCallback != NULL)
 8004f46:	2900      	cmp	r1, #0
 8004f48:	d1f2      	bne.n	8004f30 <DMA1_Channel7_IRQHandler+0xd8>
 8004f4a:	bc70      	pop	{r4, r5, r6}
 8004f4c:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004f4e:	2204      	movs	r2, #4
 8004f50:	4912      	ldr	r1, [pc, #72]	; (8004f9c <DMA1_Channel7_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 8004f52:	f8d3 355c 	ldr.w	r3, [r3, #1372]	; 0x55c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004f56:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0f6      	beq.n	8004f4a <DMA1_Channel7_IRQHandler+0xf2>
 8004f5c:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 8004f5e:	480e      	ldr	r0, [pc, #56]	; (8004f98 <DMA1_Channel7_IRQHandler+0x140>)
 8004f60:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004f62:	2240      	movs	r2, #64	; 0x40
 8004f64:	e7f4      	b.n	8004f50 <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f6a:	e7e5      	b.n	8004f38 <DMA1_Channel7_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004f6c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004f70:	e7ee      	b.n	8004f50 <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004f72:	2220      	movs	r2, #32
 8004f74:	e7e0      	b.n	8004f38 <DMA1_Channel7_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004f76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f7a:	e7e9      	b.n	8004f50 <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f80:	e7da      	b.n	8004f38 <DMA1_Channel7_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f86:	e7e3      	b.n	8004f50 <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004f88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f8c:	e7d4      	b.n	8004f38 <DMA1_Channel7_IRQHandler+0xe0>
 8004f8e:	bf00      	nop
 8004f90:	20000200 	.word	0x20000200
 8004f94:	40020008 	.word	0x40020008
 8004f98:	20000730 	.word	0x20000730
 8004f9c:	40020000 	.word	0x40020000

08004fa0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004fa0:	2001      	movs	r0, #1
 8004fa2:	4770      	bx	lr

08004fa4 <_kill>:

int _kill(int pid, int sig)
{
 8004fa4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004fa6:	f002 fe3f 	bl	8007c28 <__errno>
 8004faa:	2216      	movs	r2, #22
 8004fac:	4603      	mov	r3, r0
	return -1;
}
 8004fae:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8004fb2:	601a      	str	r2, [r3, #0]
}
 8004fb4:	bd08      	pop	{r3, pc}
 8004fb6:	bf00      	nop

08004fb8 <_exit>:

void _exit (int status)
{
 8004fb8:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004fba:	f002 fe35 	bl	8007c28 <__errno>
 8004fbe:	2316      	movs	r3, #22
 8004fc0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8004fc2:	e7fe      	b.n	8004fc2 <_exit+0xa>

08004fc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004fc4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fc6:	1e16      	subs	r6, r2, #0
 8004fc8:	dd07      	ble.n	8004fda <_read+0x16>
 8004fca:	460c      	mov	r4, r1
 8004fcc:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8004fce:	f3af 8000 	nop.w
 8004fd2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fd6:	42a5      	cmp	r5, r4
 8004fd8:	d1f9      	bne.n	8004fce <_read+0xa>
	}

return len;
}
 8004fda:	4630      	mov	r0, r6
 8004fdc:	bd70      	pop	{r4, r5, r6, pc}
 8004fde:	bf00      	nop

08004fe0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004fe0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fe2:	1e16      	subs	r6, r2, #0
 8004fe4:	dd07      	ble.n	8004ff6 <_write+0x16>
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8004fea:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004fee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ff2:	42ac      	cmp	r4, r5
 8004ff4:	d1f9      	bne.n	8004fea <_write+0xa>
	}
	return len;
}
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	bd70      	pop	{r4, r5, r6, pc}
 8004ffa:	bf00      	nop

08004ffc <_close>:

int _close(int file)
{
	return -1;
}
 8004ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop

08005004 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005004:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8005008:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800500a:	604b      	str	r3, [r1, #4]
}
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop

08005010 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005010:	2001      	movs	r0, #1
 8005012:	4770      	bx	lr

08005014 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005014:	2000      	movs	r0, #0
 8005016:	4770      	bx	lr

08005018 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005018:	490e      	ldr	r1, [pc, #56]	; (8005054 <_sbrk+0x3c>)
{
 800501a:	4603      	mov	r3, r0
 800501c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800501e:	4a0e      	ldr	r2, [pc, #56]	; (8005058 <_sbrk+0x40>)
 8005020:	4c0e      	ldr	r4, [pc, #56]	; (800505c <_sbrk+0x44>)
  if (NULL == __sbrk_heap_end)
 8005022:	f8d1 0774 	ldr.w	r0, [r1, #1908]	; 0x774
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005026:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8005028:	b128      	cbz	r0, 8005036 <_sbrk+0x1e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800502a:	4403      	add	r3, r0
 800502c:	4293      	cmp	r3, r2
 800502e:	d809      	bhi.n	8005044 <_sbrk+0x2c>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8005030:	f8c1 3774 	str.w	r3, [r1, #1908]	; 0x774

  return (void *)prev_heap_end;
}
 8005034:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8005036:	4c0a      	ldr	r4, [pc, #40]	; (8005060 <_sbrk+0x48>)
 8005038:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 800503a:	4403      	add	r3, r0
 800503c:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 800503e:	f8c1 4774 	str.w	r4, [r1, #1908]	; 0x774
  if (__sbrk_heap_end + incr > max_heap)
 8005042:	d9f5      	bls.n	8005030 <_sbrk+0x18>
    errno = ENOMEM;
 8005044:	f002 fdf0 	bl	8007c28 <__errno>
 8005048:	220c      	movs	r2, #12
 800504a:	4603      	mov	r3, r0
 800504c:	f04f 30ff 	mov.w	r0, #4294967295
 8005050:	601a      	str	r2, [r3, #0]
}
 8005052:	bd10      	pop	{r4, pc}
 8005054:	20000200 	.word	0x20000200
 8005058:	20005000 	.word	0x20005000
 800505c:	00000400 	.word	0x00000400
 8005060:	20000988 	.word	0x20000988

08005064 <SystemInit>:
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop

08005068 <strlen>:
 8005068:	4603      	mov	r3, r0
 800506a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800506e:	2a00      	cmp	r2, #0
 8005070:	d1fb      	bne.n	800506a <strlen+0x2>
 8005072:	1a18      	subs	r0, r3, r0
 8005074:	3801      	subs	r0, #1
 8005076:	4770      	bx	lr

08005078 <__aeabi_drsub>:
 8005078:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800507c:	e002      	b.n	8005084 <__adddf3>
 800507e:	bf00      	nop

08005080 <__aeabi_dsub>:
 8005080:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005084 <__adddf3>:
 8005084:	b530      	push	{r4, r5, lr}
 8005086:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800508a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800508e:	ea94 0f05 	teq	r4, r5
 8005092:	bf08      	it	eq
 8005094:	ea90 0f02 	teqeq	r0, r2
 8005098:	bf1f      	itttt	ne
 800509a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800509e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80050a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80050a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80050aa:	f000 80e2 	beq.w	8005272 <__adddf3+0x1ee>
 80050ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80050b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80050b6:	bfb8      	it	lt
 80050b8:	426d      	neglt	r5, r5
 80050ba:	dd0c      	ble.n	80050d6 <__adddf3+0x52>
 80050bc:	442c      	add	r4, r5
 80050be:	ea80 0202 	eor.w	r2, r0, r2
 80050c2:	ea81 0303 	eor.w	r3, r1, r3
 80050c6:	ea82 0000 	eor.w	r0, r2, r0
 80050ca:	ea83 0101 	eor.w	r1, r3, r1
 80050ce:	ea80 0202 	eor.w	r2, r0, r2
 80050d2:	ea81 0303 	eor.w	r3, r1, r3
 80050d6:	2d36      	cmp	r5, #54	; 0x36
 80050d8:	bf88      	it	hi
 80050da:	bd30      	pophi	{r4, r5, pc}
 80050dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80050e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80050e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80050e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80050ec:	d002      	beq.n	80050f4 <__adddf3+0x70>
 80050ee:	4240      	negs	r0, r0
 80050f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80050f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80050f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80050fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005100:	d002      	beq.n	8005108 <__adddf3+0x84>
 8005102:	4252      	negs	r2, r2
 8005104:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005108:	ea94 0f05 	teq	r4, r5
 800510c:	f000 80a7 	beq.w	800525e <__adddf3+0x1da>
 8005110:	f1a4 0401 	sub.w	r4, r4, #1
 8005114:	f1d5 0e20 	rsbs	lr, r5, #32
 8005118:	db0d      	blt.n	8005136 <__adddf3+0xb2>
 800511a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800511e:	fa22 f205 	lsr.w	r2, r2, r5
 8005122:	1880      	adds	r0, r0, r2
 8005124:	f141 0100 	adc.w	r1, r1, #0
 8005128:	fa03 f20e 	lsl.w	r2, r3, lr
 800512c:	1880      	adds	r0, r0, r2
 800512e:	fa43 f305 	asr.w	r3, r3, r5
 8005132:	4159      	adcs	r1, r3
 8005134:	e00e      	b.n	8005154 <__adddf3+0xd0>
 8005136:	f1a5 0520 	sub.w	r5, r5, #32
 800513a:	f10e 0e20 	add.w	lr, lr, #32
 800513e:	2a01      	cmp	r2, #1
 8005140:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005144:	bf28      	it	cs
 8005146:	f04c 0c02 	orrcs.w	ip, ip, #2
 800514a:	fa43 f305 	asr.w	r3, r3, r5
 800514e:	18c0      	adds	r0, r0, r3
 8005150:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005154:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005158:	d507      	bpl.n	800516a <__adddf3+0xe6>
 800515a:	f04f 0e00 	mov.w	lr, #0
 800515e:	f1dc 0c00 	rsbs	ip, ip, #0
 8005162:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005166:	eb6e 0101 	sbc.w	r1, lr, r1
 800516a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800516e:	d31b      	bcc.n	80051a8 <__adddf3+0x124>
 8005170:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005174:	d30c      	bcc.n	8005190 <__adddf3+0x10c>
 8005176:	0849      	lsrs	r1, r1, #1
 8005178:	ea5f 0030 	movs.w	r0, r0, rrx
 800517c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005180:	f104 0401 	add.w	r4, r4, #1
 8005184:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005188:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800518c:	f080 809a 	bcs.w	80052c4 <__adddf3+0x240>
 8005190:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005194:	bf08      	it	eq
 8005196:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800519a:	f150 0000 	adcs.w	r0, r0, #0
 800519e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80051a2:	ea41 0105 	orr.w	r1, r1, r5
 80051a6:	bd30      	pop	{r4, r5, pc}
 80051a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80051ac:	4140      	adcs	r0, r0
 80051ae:	eb41 0101 	adc.w	r1, r1, r1
 80051b2:	3c01      	subs	r4, #1
 80051b4:	bf28      	it	cs
 80051b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80051ba:	d2e9      	bcs.n	8005190 <__adddf3+0x10c>
 80051bc:	f091 0f00 	teq	r1, #0
 80051c0:	bf04      	itt	eq
 80051c2:	4601      	moveq	r1, r0
 80051c4:	2000      	moveq	r0, #0
 80051c6:	fab1 f381 	clz	r3, r1
 80051ca:	bf08      	it	eq
 80051cc:	3320      	addeq	r3, #32
 80051ce:	f1a3 030b 	sub.w	r3, r3, #11
 80051d2:	f1b3 0220 	subs.w	r2, r3, #32
 80051d6:	da0c      	bge.n	80051f2 <__adddf3+0x16e>
 80051d8:	320c      	adds	r2, #12
 80051da:	dd08      	ble.n	80051ee <__adddf3+0x16a>
 80051dc:	f102 0c14 	add.w	ip, r2, #20
 80051e0:	f1c2 020c 	rsb	r2, r2, #12
 80051e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80051e8:	fa21 f102 	lsr.w	r1, r1, r2
 80051ec:	e00c      	b.n	8005208 <__adddf3+0x184>
 80051ee:	f102 0214 	add.w	r2, r2, #20
 80051f2:	bfd8      	it	le
 80051f4:	f1c2 0c20 	rsble	ip, r2, #32
 80051f8:	fa01 f102 	lsl.w	r1, r1, r2
 80051fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005200:	bfdc      	itt	le
 8005202:	ea41 010c 	orrle.w	r1, r1, ip
 8005206:	4090      	lslle	r0, r2
 8005208:	1ae4      	subs	r4, r4, r3
 800520a:	bfa2      	ittt	ge
 800520c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005210:	4329      	orrge	r1, r5
 8005212:	bd30      	popge	{r4, r5, pc}
 8005214:	ea6f 0404 	mvn.w	r4, r4
 8005218:	3c1f      	subs	r4, #31
 800521a:	da1c      	bge.n	8005256 <__adddf3+0x1d2>
 800521c:	340c      	adds	r4, #12
 800521e:	dc0e      	bgt.n	800523e <__adddf3+0x1ba>
 8005220:	f104 0414 	add.w	r4, r4, #20
 8005224:	f1c4 0220 	rsb	r2, r4, #32
 8005228:	fa20 f004 	lsr.w	r0, r0, r4
 800522c:	fa01 f302 	lsl.w	r3, r1, r2
 8005230:	ea40 0003 	orr.w	r0, r0, r3
 8005234:	fa21 f304 	lsr.w	r3, r1, r4
 8005238:	ea45 0103 	orr.w	r1, r5, r3
 800523c:	bd30      	pop	{r4, r5, pc}
 800523e:	f1c4 040c 	rsb	r4, r4, #12
 8005242:	f1c4 0220 	rsb	r2, r4, #32
 8005246:	fa20 f002 	lsr.w	r0, r0, r2
 800524a:	fa01 f304 	lsl.w	r3, r1, r4
 800524e:	ea40 0003 	orr.w	r0, r0, r3
 8005252:	4629      	mov	r1, r5
 8005254:	bd30      	pop	{r4, r5, pc}
 8005256:	fa21 f004 	lsr.w	r0, r1, r4
 800525a:	4629      	mov	r1, r5
 800525c:	bd30      	pop	{r4, r5, pc}
 800525e:	f094 0f00 	teq	r4, #0
 8005262:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005266:	bf06      	itte	eq
 8005268:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800526c:	3401      	addeq	r4, #1
 800526e:	3d01      	subne	r5, #1
 8005270:	e74e      	b.n	8005110 <__adddf3+0x8c>
 8005272:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005276:	bf18      	it	ne
 8005278:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800527c:	d029      	beq.n	80052d2 <__adddf3+0x24e>
 800527e:	ea94 0f05 	teq	r4, r5
 8005282:	bf08      	it	eq
 8005284:	ea90 0f02 	teqeq	r0, r2
 8005288:	d005      	beq.n	8005296 <__adddf3+0x212>
 800528a:	ea54 0c00 	orrs.w	ip, r4, r0
 800528e:	bf04      	itt	eq
 8005290:	4619      	moveq	r1, r3
 8005292:	4610      	moveq	r0, r2
 8005294:	bd30      	pop	{r4, r5, pc}
 8005296:	ea91 0f03 	teq	r1, r3
 800529a:	bf1e      	ittt	ne
 800529c:	2100      	movne	r1, #0
 800529e:	2000      	movne	r0, #0
 80052a0:	bd30      	popne	{r4, r5, pc}
 80052a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80052a6:	d105      	bne.n	80052b4 <__adddf3+0x230>
 80052a8:	0040      	lsls	r0, r0, #1
 80052aa:	4149      	adcs	r1, r1
 80052ac:	bf28      	it	cs
 80052ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80052b2:	bd30      	pop	{r4, r5, pc}
 80052b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80052b8:	bf3c      	itt	cc
 80052ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80052be:	bd30      	popcc	{r4, r5, pc}
 80052c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80052c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80052c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052cc:	f04f 0000 	mov.w	r0, #0
 80052d0:	bd30      	pop	{r4, r5, pc}
 80052d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80052d6:	bf1a      	itte	ne
 80052d8:	4619      	movne	r1, r3
 80052da:	4610      	movne	r0, r2
 80052dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80052e0:	bf1c      	itt	ne
 80052e2:	460b      	movne	r3, r1
 80052e4:	4602      	movne	r2, r0
 80052e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80052ea:	bf06      	itte	eq
 80052ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80052f0:	ea91 0f03 	teqeq	r1, r3
 80052f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80052f8:	bd30      	pop	{r4, r5, pc}
 80052fa:	bf00      	nop

080052fc <__aeabi_ui2d>:
 80052fc:	f090 0f00 	teq	r0, #0
 8005300:	bf04      	itt	eq
 8005302:	2100      	moveq	r1, #0
 8005304:	4770      	bxeq	lr
 8005306:	b530      	push	{r4, r5, lr}
 8005308:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800530c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005310:	f04f 0500 	mov.w	r5, #0
 8005314:	f04f 0100 	mov.w	r1, #0
 8005318:	e750      	b.n	80051bc <__adddf3+0x138>
 800531a:	bf00      	nop

0800531c <__aeabi_i2d>:
 800531c:	f090 0f00 	teq	r0, #0
 8005320:	bf04      	itt	eq
 8005322:	2100      	moveq	r1, #0
 8005324:	4770      	bxeq	lr
 8005326:	b530      	push	{r4, r5, lr}
 8005328:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800532c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005330:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8005334:	bf48      	it	mi
 8005336:	4240      	negmi	r0, r0
 8005338:	f04f 0100 	mov.w	r1, #0
 800533c:	e73e      	b.n	80051bc <__adddf3+0x138>
 800533e:	bf00      	nop

08005340 <__aeabi_f2d>:
 8005340:	0042      	lsls	r2, r0, #1
 8005342:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005346:	ea4f 0131 	mov.w	r1, r1, rrx
 800534a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800534e:	bf1f      	itttt	ne
 8005350:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005354:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005358:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800535c:	4770      	bxne	lr
 800535e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8005362:	bf08      	it	eq
 8005364:	4770      	bxeq	lr
 8005366:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800536a:	bf04      	itt	eq
 800536c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8005370:	4770      	bxeq	lr
 8005372:	b530      	push	{r4, r5, lr}
 8005374:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005378:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800537c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005380:	e71c      	b.n	80051bc <__adddf3+0x138>
 8005382:	bf00      	nop

08005384 <__aeabi_ul2d>:
 8005384:	ea50 0201 	orrs.w	r2, r0, r1
 8005388:	bf08      	it	eq
 800538a:	4770      	bxeq	lr
 800538c:	b530      	push	{r4, r5, lr}
 800538e:	f04f 0500 	mov.w	r5, #0
 8005392:	e00a      	b.n	80053aa <__aeabi_l2d+0x16>

08005394 <__aeabi_l2d>:
 8005394:	ea50 0201 	orrs.w	r2, r0, r1
 8005398:	bf08      	it	eq
 800539a:	4770      	bxeq	lr
 800539c:	b530      	push	{r4, r5, lr}
 800539e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80053a2:	d502      	bpl.n	80053aa <__aeabi_l2d+0x16>
 80053a4:	4240      	negs	r0, r0
 80053a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80053aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80053ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80053b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80053b6:	f43f aed8 	beq.w	800516a <__adddf3+0xe6>
 80053ba:	f04f 0203 	mov.w	r2, #3
 80053be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80053c2:	bf18      	it	ne
 80053c4:	3203      	addne	r2, #3
 80053c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80053ca:	bf18      	it	ne
 80053cc:	3203      	addne	r2, #3
 80053ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80053d2:	f1c2 0320 	rsb	r3, r2, #32
 80053d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80053da:	fa20 f002 	lsr.w	r0, r0, r2
 80053de:	fa01 fe03 	lsl.w	lr, r1, r3
 80053e2:	ea40 000e 	orr.w	r0, r0, lr
 80053e6:	fa21 f102 	lsr.w	r1, r1, r2
 80053ea:	4414      	add	r4, r2
 80053ec:	e6bd      	b.n	800516a <__adddf3+0xe6>
 80053ee:	bf00      	nop

080053f0 <__aeabi_dmul>:
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80053f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80053fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80053fe:	bf1d      	ittte	ne
 8005400:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005404:	ea94 0f0c 	teqne	r4, ip
 8005408:	ea95 0f0c 	teqne	r5, ip
 800540c:	f000 f8de 	bleq	80055cc <__aeabi_dmul+0x1dc>
 8005410:	442c      	add	r4, r5
 8005412:	ea81 0603 	eor.w	r6, r1, r3
 8005416:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800541a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800541e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8005422:	bf18      	it	ne
 8005424:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005428:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800542c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005430:	d038      	beq.n	80054a4 <__aeabi_dmul+0xb4>
 8005432:	fba0 ce02 	umull	ip, lr, r0, r2
 8005436:	f04f 0500 	mov.w	r5, #0
 800543a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800543e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8005442:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005446:	f04f 0600 	mov.w	r6, #0
 800544a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800544e:	f09c 0f00 	teq	ip, #0
 8005452:	bf18      	it	ne
 8005454:	f04e 0e01 	orrne.w	lr, lr, #1
 8005458:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800545c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005460:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005464:	d204      	bcs.n	8005470 <__aeabi_dmul+0x80>
 8005466:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800546a:	416d      	adcs	r5, r5
 800546c:	eb46 0606 	adc.w	r6, r6, r6
 8005470:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005474:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005478:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800547c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005480:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005484:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005488:	bf88      	it	hi
 800548a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800548e:	d81e      	bhi.n	80054ce <__aeabi_dmul+0xde>
 8005490:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005494:	bf08      	it	eq
 8005496:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800549a:	f150 0000 	adcs.w	r0, r0, #0
 800549e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80054a2:	bd70      	pop	{r4, r5, r6, pc}
 80054a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80054a8:	ea46 0101 	orr.w	r1, r6, r1
 80054ac:	ea40 0002 	orr.w	r0, r0, r2
 80054b0:	ea81 0103 	eor.w	r1, r1, r3
 80054b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80054b8:	bfc2      	ittt	gt
 80054ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80054be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80054c2:	bd70      	popgt	{r4, r5, r6, pc}
 80054c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80054c8:	f04f 0e00 	mov.w	lr, #0
 80054cc:	3c01      	subs	r4, #1
 80054ce:	f300 80ab 	bgt.w	8005628 <__aeabi_dmul+0x238>
 80054d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80054d6:	bfde      	ittt	le
 80054d8:	2000      	movle	r0, #0
 80054da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80054de:	bd70      	pople	{r4, r5, r6, pc}
 80054e0:	f1c4 0400 	rsb	r4, r4, #0
 80054e4:	3c20      	subs	r4, #32
 80054e6:	da35      	bge.n	8005554 <__aeabi_dmul+0x164>
 80054e8:	340c      	adds	r4, #12
 80054ea:	dc1b      	bgt.n	8005524 <__aeabi_dmul+0x134>
 80054ec:	f104 0414 	add.w	r4, r4, #20
 80054f0:	f1c4 0520 	rsb	r5, r4, #32
 80054f4:	fa00 f305 	lsl.w	r3, r0, r5
 80054f8:	fa20 f004 	lsr.w	r0, r0, r4
 80054fc:	fa01 f205 	lsl.w	r2, r1, r5
 8005500:	ea40 0002 	orr.w	r0, r0, r2
 8005504:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8005508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800550c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005510:	fa21 f604 	lsr.w	r6, r1, r4
 8005514:	eb42 0106 	adc.w	r1, r2, r6
 8005518:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800551c:	bf08      	it	eq
 800551e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005522:	bd70      	pop	{r4, r5, r6, pc}
 8005524:	f1c4 040c 	rsb	r4, r4, #12
 8005528:	f1c4 0520 	rsb	r5, r4, #32
 800552c:	fa00 f304 	lsl.w	r3, r0, r4
 8005530:	fa20 f005 	lsr.w	r0, r0, r5
 8005534:	fa01 f204 	lsl.w	r2, r1, r4
 8005538:	ea40 0002 	orr.w	r0, r0, r2
 800553c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005540:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005544:	f141 0100 	adc.w	r1, r1, #0
 8005548:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800554c:	bf08      	it	eq
 800554e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005552:	bd70      	pop	{r4, r5, r6, pc}
 8005554:	f1c4 0520 	rsb	r5, r4, #32
 8005558:	fa00 f205 	lsl.w	r2, r0, r5
 800555c:	ea4e 0e02 	orr.w	lr, lr, r2
 8005560:	fa20 f304 	lsr.w	r3, r0, r4
 8005564:	fa01 f205 	lsl.w	r2, r1, r5
 8005568:	ea43 0302 	orr.w	r3, r3, r2
 800556c:	fa21 f004 	lsr.w	r0, r1, r4
 8005570:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005574:	fa21 f204 	lsr.w	r2, r1, r4
 8005578:	ea20 0002 	bic.w	r0, r0, r2
 800557c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005584:	bf08      	it	eq
 8005586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800558a:	bd70      	pop	{r4, r5, r6, pc}
 800558c:	f094 0f00 	teq	r4, #0
 8005590:	d10f      	bne.n	80055b2 <__aeabi_dmul+0x1c2>
 8005592:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8005596:	0040      	lsls	r0, r0, #1
 8005598:	eb41 0101 	adc.w	r1, r1, r1
 800559c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80055a0:	bf08      	it	eq
 80055a2:	3c01      	subeq	r4, #1
 80055a4:	d0f7      	beq.n	8005596 <__aeabi_dmul+0x1a6>
 80055a6:	ea41 0106 	orr.w	r1, r1, r6
 80055aa:	f095 0f00 	teq	r5, #0
 80055ae:	bf18      	it	ne
 80055b0:	4770      	bxne	lr
 80055b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80055b6:	0052      	lsls	r2, r2, #1
 80055b8:	eb43 0303 	adc.w	r3, r3, r3
 80055bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80055c0:	bf08      	it	eq
 80055c2:	3d01      	subeq	r5, #1
 80055c4:	d0f7      	beq.n	80055b6 <__aeabi_dmul+0x1c6>
 80055c6:	ea43 0306 	orr.w	r3, r3, r6
 80055ca:	4770      	bx	lr
 80055cc:	ea94 0f0c 	teq	r4, ip
 80055d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80055d4:	bf18      	it	ne
 80055d6:	ea95 0f0c 	teqne	r5, ip
 80055da:	d00c      	beq.n	80055f6 <__aeabi_dmul+0x206>
 80055dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80055e0:	bf18      	it	ne
 80055e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80055e6:	d1d1      	bne.n	800558c <__aeabi_dmul+0x19c>
 80055e8:	ea81 0103 	eor.w	r1, r1, r3
 80055ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80055f0:	f04f 0000 	mov.w	r0, #0
 80055f4:	bd70      	pop	{r4, r5, r6, pc}
 80055f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80055fa:	bf06      	itte	eq
 80055fc:	4610      	moveq	r0, r2
 80055fe:	4619      	moveq	r1, r3
 8005600:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005604:	d019      	beq.n	800563a <__aeabi_dmul+0x24a>
 8005606:	ea94 0f0c 	teq	r4, ip
 800560a:	d102      	bne.n	8005612 <__aeabi_dmul+0x222>
 800560c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8005610:	d113      	bne.n	800563a <__aeabi_dmul+0x24a>
 8005612:	ea95 0f0c 	teq	r5, ip
 8005616:	d105      	bne.n	8005624 <__aeabi_dmul+0x234>
 8005618:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800561c:	bf1c      	itt	ne
 800561e:	4610      	movne	r0, r2
 8005620:	4619      	movne	r1, r3
 8005622:	d10a      	bne.n	800563a <__aeabi_dmul+0x24a>
 8005624:	ea81 0103 	eor.w	r1, r1, r3
 8005628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800562c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005634:	f04f 0000 	mov.w	r0, #0
 8005638:	bd70      	pop	{r4, r5, r6, pc}
 800563a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800563e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8005642:	bd70      	pop	{r4, r5, r6, pc}

08005644 <__aeabi_ddiv>:
 8005644:	b570      	push	{r4, r5, r6, lr}
 8005646:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800564a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800564e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005652:	bf1d      	ittte	ne
 8005654:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005658:	ea94 0f0c 	teqne	r4, ip
 800565c:	ea95 0f0c 	teqne	r5, ip
 8005660:	f000 f8a7 	bleq	80057b2 <__aeabi_ddiv+0x16e>
 8005664:	eba4 0405 	sub.w	r4, r4, r5
 8005668:	ea81 0e03 	eor.w	lr, r1, r3
 800566c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005670:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005674:	f000 8088 	beq.w	8005788 <__aeabi_ddiv+0x144>
 8005678:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800567c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005680:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005684:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005688:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800568c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005690:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005694:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005698:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800569c:	429d      	cmp	r5, r3
 800569e:	bf08      	it	eq
 80056a0:	4296      	cmpeq	r6, r2
 80056a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80056a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80056aa:	d202      	bcs.n	80056b2 <__aeabi_ddiv+0x6e>
 80056ac:	085b      	lsrs	r3, r3, #1
 80056ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80056b2:	1ab6      	subs	r6, r6, r2
 80056b4:	eb65 0503 	sbc.w	r5, r5, r3
 80056b8:	085b      	lsrs	r3, r3, #1
 80056ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80056be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80056c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80056c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80056ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80056ce:	bf22      	ittt	cs
 80056d0:	1ab6      	subcs	r6, r6, r2
 80056d2:	4675      	movcs	r5, lr
 80056d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80056d8:	085b      	lsrs	r3, r3, #1
 80056da:	ea4f 0232 	mov.w	r2, r2, rrx
 80056de:	ebb6 0e02 	subs.w	lr, r6, r2
 80056e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80056e6:	bf22      	ittt	cs
 80056e8:	1ab6      	subcs	r6, r6, r2
 80056ea:	4675      	movcs	r5, lr
 80056ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80056f0:	085b      	lsrs	r3, r3, #1
 80056f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80056f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80056fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80056fe:	bf22      	ittt	cs
 8005700:	1ab6      	subcs	r6, r6, r2
 8005702:	4675      	movcs	r5, lr
 8005704:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005708:	085b      	lsrs	r3, r3, #1
 800570a:	ea4f 0232 	mov.w	r2, r2, rrx
 800570e:	ebb6 0e02 	subs.w	lr, r6, r2
 8005712:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005716:	bf22      	ittt	cs
 8005718:	1ab6      	subcs	r6, r6, r2
 800571a:	4675      	movcs	r5, lr
 800571c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005720:	ea55 0e06 	orrs.w	lr, r5, r6
 8005724:	d018      	beq.n	8005758 <__aeabi_ddiv+0x114>
 8005726:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800572a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800572e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8005732:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005736:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800573a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800573e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8005742:	d1c0      	bne.n	80056c6 <__aeabi_ddiv+0x82>
 8005744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005748:	d10b      	bne.n	8005762 <__aeabi_ddiv+0x11e>
 800574a:	ea41 0100 	orr.w	r1, r1, r0
 800574e:	f04f 0000 	mov.w	r0, #0
 8005752:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005756:	e7b6      	b.n	80056c6 <__aeabi_ddiv+0x82>
 8005758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800575c:	bf04      	itt	eq
 800575e:	4301      	orreq	r1, r0
 8005760:	2000      	moveq	r0, #0
 8005762:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005766:	bf88      	it	hi
 8005768:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800576c:	f63f aeaf 	bhi.w	80054ce <__aeabi_dmul+0xde>
 8005770:	ebb5 0c03 	subs.w	ip, r5, r3
 8005774:	bf04      	itt	eq
 8005776:	ebb6 0c02 	subseq.w	ip, r6, r2
 800577a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800577e:	f150 0000 	adcs.w	r0, r0, #0
 8005782:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800578c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005790:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005794:	bfc2      	ittt	gt
 8005796:	ebd4 050c 	rsbsgt	r5, r4, ip
 800579a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800579e:	bd70      	popgt	{r4, r5, r6, pc}
 80057a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80057a4:	f04f 0e00 	mov.w	lr, #0
 80057a8:	3c01      	subs	r4, #1
 80057aa:	e690      	b.n	80054ce <__aeabi_dmul+0xde>
 80057ac:	ea45 0e06 	orr.w	lr, r5, r6
 80057b0:	e68d      	b.n	80054ce <__aeabi_dmul+0xde>
 80057b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80057b6:	ea94 0f0c 	teq	r4, ip
 80057ba:	bf08      	it	eq
 80057bc:	ea95 0f0c 	teqeq	r5, ip
 80057c0:	f43f af3b 	beq.w	800563a <__aeabi_dmul+0x24a>
 80057c4:	ea94 0f0c 	teq	r4, ip
 80057c8:	d10a      	bne.n	80057e0 <__aeabi_ddiv+0x19c>
 80057ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80057ce:	f47f af34 	bne.w	800563a <__aeabi_dmul+0x24a>
 80057d2:	ea95 0f0c 	teq	r5, ip
 80057d6:	f47f af25 	bne.w	8005624 <__aeabi_dmul+0x234>
 80057da:	4610      	mov	r0, r2
 80057dc:	4619      	mov	r1, r3
 80057de:	e72c      	b.n	800563a <__aeabi_dmul+0x24a>
 80057e0:	ea95 0f0c 	teq	r5, ip
 80057e4:	d106      	bne.n	80057f4 <__aeabi_ddiv+0x1b0>
 80057e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80057ea:	f43f aefd 	beq.w	80055e8 <__aeabi_dmul+0x1f8>
 80057ee:	4610      	mov	r0, r2
 80057f0:	4619      	mov	r1, r3
 80057f2:	e722      	b.n	800563a <__aeabi_dmul+0x24a>
 80057f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80057f8:	bf18      	it	ne
 80057fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80057fe:	f47f aec5 	bne.w	800558c <__aeabi_dmul+0x19c>
 8005802:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8005806:	f47f af0d 	bne.w	8005624 <__aeabi_dmul+0x234>
 800580a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800580e:	f47f aeeb 	bne.w	80055e8 <__aeabi_dmul+0x1f8>
 8005812:	e712      	b.n	800563a <__aeabi_dmul+0x24a>

08005814 <__gedf2>:
 8005814:	f04f 3cff 	mov.w	ip, #4294967295
 8005818:	e006      	b.n	8005828 <__cmpdf2+0x4>
 800581a:	bf00      	nop

0800581c <__ledf2>:
 800581c:	f04f 0c01 	mov.w	ip, #1
 8005820:	e002      	b.n	8005828 <__cmpdf2+0x4>
 8005822:	bf00      	nop

08005824 <__cmpdf2>:
 8005824:	f04f 0c01 	mov.w	ip, #1
 8005828:	f84d cd04 	str.w	ip, [sp, #-4]!
 800582c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005830:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005834:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005838:	bf18      	it	ne
 800583a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800583e:	d01b      	beq.n	8005878 <__cmpdf2+0x54>
 8005840:	b001      	add	sp, #4
 8005842:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8005846:	bf0c      	ite	eq
 8005848:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800584c:	ea91 0f03 	teqne	r1, r3
 8005850:	bf02      	ittt	eq
 8005852:	ea90 0f02 	teqeq	r0, r2
 8005856:	2000      	moveq	r0, #0
 8005858:	4770      	bxeq	lr
 800585a:	f110 0f00 	cmn.w	r0, #0
 800585e:	ea91 0f03 	teq	r1, r3
 8005862:	bf58      	it	pl
 8005864:	4299      	cmppl	r1, r3
 8005866:	bf08      	it	eq
 8005868:	4290      	cmpeq	r0, r2
 800586a:	bf2c      	ite	cs
 800586c:	17d8      	asrcs	r0, r3, #31
 800586e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8005872:	f040 0001 	orr.w	r0, r0, #1
 8005876:	4770      	bx	lr
 8005878:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800587c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005880:	d102      	bne.n	8005888 <__cmpdf2+0x64>
 8005882:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005886:	d107      	bne.n	8005898 <__cmpdf2+0x74>
 8005888:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800588c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005890:	d1d6      	bne.n	8005840 <__cmpdf2+0x1c>
 8005892:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005896:	d0d3      	beq.n	8005840 <__cmpdf2+0x1c>
 8005898:	f85d 0b04 	ldr.w	r0, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop

080058a0 <__aeabi_cdrcmple>:
 80058a0:	4684      	mov	ip, r0
 80058a2:	4610      	mov	r0, r2
 80058a4:	4662      	mov	r2, ip
 80058a6:	468c      	mov	ip, r1
 80058a8:	4619      	mov	r1, r3
 80058aa:	4663      	mov	r3, ip
 80058ac:	e000      	b.n	80058b0 <__aeabi_cdcmpeq>
 80058ae:	bf00      	nop

080058b0 <__aeabi_cdcmpeq>:
 80058b0:	b501      	push	{r0, lr}
 80058b2:	f7ff ffb7 	bl	8005824 <__cmpdf2>
 80058b6:	2800      	cmp	r0, #0
 80058b8:	bf48      	it	mi
 80058ba:	f110 0f00 	cmnmi.w	r0, #0
 80058be:	bd01      	pop	{r0, pc}

080058c0 <__aeabi_dcmpeq>:
 80058c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80058c4:	f7ff fff4 	bl	80058b0 <__aeabi_cdcmpeq>
 80058c8:	bf0c      	ite	eq
 80058ca:	2001      	moveq	r0, #1
 80058cc:	2000      	movne	r0, #0
 80058ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80058d2:	bf00      	nop

080058d4 <__aeabi_dcmplt>:
 80058d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80058d8:	f7ff ffea 	bl	80058b0 <__aeabi_cdcmpeq>
 80058dc:	bf34      	ite	cc
 80058de:	2001      	movcc	r0, #1
 80058e0:	2000      	movcs	r0, #0
 80058e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80058e6:	bf00      	nop

080058e8 <__aeabi_dcmple>:
 80058e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80058ec:	f7ff ffe0 	bl	80058b0 <__aeabi_cdcmpeq>
 80058f0:	bf94      	ite	ls
 80058f2:	2001      	movls	r0, #1
 80058f4:	2000      	movhi	r0, #0
 80058f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80058fa:	bf00      	nop

080058fc <__aeabi_dcmpge>:
 80058fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005900:	f7ff ffce 	bl	80058a0 <__aeabi_cdrcmple>
 8005904:	bf94      	ite	ls
 8005906:	2001      	movls	r0, #1
 8005908:	2000      	movhi	r0, #0
 800590a:	f85d fb08 	ldr.w	pc, [sp], #8
 800590e:	bf00      	nop

08005910 <__aeabi_dcmpgt>:
 8005910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005914:	f7ff ffc4 	bl	80058a0 <__aeabi_cdrcmple>
 8005918:	bf34      	ite	cc
 800591a:	2001      	movcc	r0, #1
 800591c:	2000      	movcs	r0, #0
 800591e:	f85d fb08 	ldr.w	pc, [sp], #8
 8005922:	bf00      	nop

08005924 <__aeabi_dcmpun>:
 8005924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800592c:	d102      	bne.n	8005934 <__aeabi_dcmpun+0x10>
 800592e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005932:	d10a      	bne.n	800594a <__aeabi_dcmpun+0x26>
 8005934:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800593c:	d102      	bne.n	8005944 <__aeabi_dcmpun+0x20>
 800593e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005942:	d102      	bne.n	800594a <__aeabi_dcmpun+0x26>
 8005944:	f04f 0000 	mov.w	r0, #0
 8005948:	4770      	bx	lr
 800594a:	f04f 0001 	mov.w	r0, #1
 800594e:	4770      	bx	lr

08005950 <__aeabi_d2iz>:
 8005950:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005954:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005958:	d215      	bcs.n	8005986 <__aeabi_d2iz+0x36>
 800595a:	d511      	bpl.n	8005980 <__aeabi_d2iz+0x30>
 800595c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8005960:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005964:	d912      	bls.n	800598c <__aeabi_d2iz+0x3c>
 8005966:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800596a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800596e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005972:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005976:	fa23 f002 	lsr.w	r0, r3, r2
 800597a:	bf18      	it	ne
 800597c:	4240      	negne	r0, r0
 800597e:	4770      	bx	lr
 8005980:	f04f 0000 	mov.w	r0, #0
 8005984:	4770      	bx	lr
 8005986:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800598a:	d105      	bne.n	8005998 <__aeabi_d2iz+0x48>
 800598c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8005990:	bf08      	it	eq
 8005992:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8005996:	4770      	bx	lr
 8005998:	f04f 0000 	mov.w	r0, #0
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop

080059a0 <__aeabi_d2uiz>:
 80059a0:	004a      	lsls	r2, r1, #1
 80059a2:	d211      	bcs.n	80059c8 <__aeabi_d2uiz+0x28>
 80059a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80059a8:	d211      	bcs.n	80059ce <__aeabi_d2uiz+0x2e>
 80059aa:	d50d      	bpl.n	80059c8 <__aeabi_d2uiz+0x28>
 80059ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80059b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80059b4:	d40e      	bmi.n	80059d4 <__aeabi_d2uiz+0x34>
 80059b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80059ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80059c2:	fa23 f002 	lsr.w	r0, r3, r2
 80059c6:	4770      	bx	lr
 80059c8:	f04f 0000 	mov.w	r0, #0
 80059cc:	4770      	bx	lr
 80059ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80059d2:	d102      	bne.n	80059da <__aeabi_d2uiz+0x3a>
 80059d4:	f04f 30ff 	mov.w	r0, #4294967295
 80059d8:	4770      	bx	lr
 80059da:	f04f 0000 	mov.w	r0, #0
 80059de:	4770      	bx	lr

080059e0 <__aeabi_d2f>:
 80059e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80059e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80059e8:	bf24      	itt	cs
 80059ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80059ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80059f2:	d90d      	bls.n	8005a10 <__aeabi_d2f+0x30>
 80059f4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80059f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80059fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005a00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005a04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005a08:	bf08      	it	eq
 8005a0a:	f020 0001 	biceq.w	r0, r0, #1
 8005a0e:	4770      	bx	lr
 8005a10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005a14:	d121      	bne.n	8005a5a <__aeabi_d2f+0x7a>
 8005a16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8005a1a:	bfbc      	itt	lt
 8005a1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8005a20:	4770      	bxlt	lr
 8005a22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005a26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005a2a:	f1c2 0218 	rsb	r2, r2, #24
 8005a2e:	f1c2 0c20 	rsb	ip, r2, #32
 8005a32:	fa10 f30c 	lsls.w	r3, r0, ip
 8005a36:	fa20 f002 	lsr.w	r0, r0, r2
 8005a3a:	bf18      	it	ne
 8005a3c:	f040 0001 	orrne.w	r0, r0, #1
 8005a40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005a44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005a48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005a4c:	ea40 000c 	orr.w	r0, r0, ip
 8005a50:	fa23 f302 	lsr.w	r3, r3, r2
 8005a54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005a58:	e7cc      	b.n	80059f4 <__aeabi_d2f+0x14>
 8005a5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8005a5e:	d107      	bne.n	8005a70 <__aeabi_d2f+0x90>
 8005a60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005a64:	bf1e      	ittt	ne
 8005a66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8005a6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8005a6e:	4770      	bxne	lr
 8005a70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8005a74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005a78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop

08005a80 <__aeabi_d2lz>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	4605      	mov	r5, r0
 8005a84:	460c      	mov	r4, r1
 8005a86:	2200      	movs	r2, #0
 8005a88:	2300      	movs	r3, #0
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	4621      	mov	r1, r4
 8005a8e:	f7ff ff21 	bl	80058d4 <__aeabi_dcmplt>
 8005a92:	b928      	cbnz	r0, 8005aa0 <__aeabi_d2lz+0x20>
 8005a94:	4628      	mov	r0, r5
 8005a96:	4621      	mov	r1, r4
 8005a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a9c:	f000 b80a 	b.w	8005ab4 <__aeabi_d2ulz>
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8005aa6:	f000 f805 	bl	8005ab4 <__aeabi_d2ulz>
 8005aaa:	4240      	negs	r0, r0
 8005aac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005ab0:	bd38      	pop	{r3, r4, r5, pc}
 8005ab2:	bf00      	nop

08005ab4 <__aeabi_d2ulz>:
 8005ab4:	b5d0      	push	{r4, r6, r7, lr}
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <__aeabi_d2ulz+0x34>)
 8005aba:	4606      	mov	r6, r0
 8005abc:	460f      	mov	r7, r1
 8005abe:	f7ff fc97 	bl	80053f0 <__aeabi_dmul>
 8005ac2:	f7ff ff6d 	bl	80059a0 <__aeabi_d2uiz>
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	f7ff fc18 	bl	80052fc <__aeabi_ui2d>
 8005acc:	2200      	movs	r2, #0
 8005ace:	4b07      	ldr	r3, [pc, #28]	; (8005aec <__aeabi_d2ulz+0x38>)
 8005ad0:	f7ff fc8e 	bl	80053f0 <__aeabi_dmul>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	4630      	mov	r0, r6
 8005ada:	4639      	mov	r1, r7
 8005adc:	f7ff fad0 	bl	8005080 <__aeabi_dsub>
 8005ae0:	f7ff ff5e 	bl	80059a0 <__aeabi_d2uiz>
 8005ae4:	4621      	mov	r1, r4
 8005ae6:	bdd0      	pop	{r4, r6, r7, pc}
 8005ae8:	3df00000 	.word	0x3df00000
 8005aec:	41f00000 	.word	0x41f00000

08005af0 <__aeabi_fmul>:
 8005af0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005af4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8005af8:	bf1e      	ittt	ne
 8005afa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8005afe:	ea92 0f0c 	teqne	r2, ip
 8005b02:	ea93 0f0c 	teqne	r3, ip
 8005b06:	d06f      	beq.n	8005be8 <__aeabi_fmul+0xf8>
 8005b08:	441a      	add	r2, r3
 8005b0a:	ea80 0c01 	eor.w	ip, r0, r1
 8005b0e:	0240      	lsls	r0, r0, #9
 8005b10:	bf18      	it	ne
 8005b12:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8005b16:	d01e      	beq.n	8005b56 <__aeabi_fmul+0x66>
 8005b18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b1c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8005b20:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8005b24:	fba0 3101 	umull	r3, r1, r0, r1
 8005b28:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8005b2c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8005b30:	bf3e      	ittt	cc
 8005b32:	0049      	lslcc	r1, r1, #1
 8005b34:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8005b38:	005b      	lslcc	r3, r3, #1
 8005b3a:	ea40 0001 	orr.w	r0, r0, r1
 8005b3e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8005b42:	2afd      	cmp	r2, #253	; 0xfd
 8005b44:	d81d      	bhi.n	8005b82 <__aeabi_fmul+0x92>
 8005b46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8005b4e:	bf08      	it	eq
 8005b50:	f020 0001 	biceq.w	r0, r0, #1
 8005b54:	4770      	bx	lr
 8005b56:	f090 0f00 	teq	r0, #0
 8005b5a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8005b5e:	bf08      	it	eq
 8005b60:	0249      	lsleq	r1, r1, #9
 8005b62:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8005b66:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8005b6a:	3a7f      	subs	r2, #127	; 0x7f
 8005b6c:	bfc2      	ittt	gt
 8005b6e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8005b72:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8005b76:	4770      	bxgt	lr
 8005b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005b7c:	f04f 0300 	mov.w	r3, #0
 8005b80:	3a01      	subs	r2, #1
 8005b82:	dc5d      	bgt.n	8005c40 <__aeabi_fmul+0x150>
 8005b84:	f112 0f19 	cmn.w	r2, #25
 8005b88:	bfdc      	itt	le
 8005b8a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8005b8e:	4770      	bxle	lr
 8005b90:	f1c2 0200 	rsb	r2, r2, #0
 8005b94:	0041      	lsls	r1, r0, #1
 8005b96:	fa21 f102 	lsr.w	r1, r1, r2
 8005b9a:	f1c2 0220 	rsb	r2, r2, #32
 8005b9e:	fa00 fc02 	lsl.w	ip, r0, r2
 8005ba2:	ea5f 0031 	movs.w	r0, r1, rrx
 8005ba6:	f140 0000 	adc.w	r0, r0, #0
 8005baa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8005bae:	bf08      	it	eq
 8005bb0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8005bb4:	4770      	bx	lr
 8005bb6:	f092 0f00 	teq	r2, #0
 8005bba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8005bbe:	bf02      	ittt	eq
 8005bc0:	0040      	lsleq	r0, r0, #1
 8005bc2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8005bc6:	3a01      	subeq	r2, #1
 8005bc8:	d0f9      	beq.n	8005bbe <__aeabi_fmul+0xce>
 8005bca:	ea40 000c 	orr.w	r0, r0, ip
 8005bce:	f093 0f00 	teq	r3, #0
 8005bd2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005bd6:	bf02      	ittt	eq
 8005bd8:	0049      	lsleq	r1, r1, #1
 8005bda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8005bde:	3b01      	subeq	r3, #1
 8005be0:	d0f9      	beq.n	8005bd6 <__aeabi_fmul+0xe6>
 8005be2:	ea41 010c 	orr.w	r1, r1, ip
 8005be6:	e78f      	b.n	8005b08 <__aeabi_fmul+0x18>
 8005be8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8005bec:	ea92 0f0c 	teq	r2, ip
 8005bf0:	bf18      	it	ne
 8005bf2:	ea93 0f0c 	teqne	r3, ip
 8005bf6:	d00a      	beq.n	8005c0e <__aeabi_fmul+0x11e>
 8005bf8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8005bfc:	bf18      	it	ne
 8005bfe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8005c02:	d1d8      	bne.n	8005bb6 <__aeabi_fmul+0xc6>
 8005c04:	ea80 0001 	eor.w	r0, r0, r1
 8005c08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005c0c:	4770      	bx	lr
 8005c0e:	f090 0f00 	teq	r0, #0
 8005c12:	bf17      	itett	ne
 8005c14:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8005c18:	4608      	moveq	r0, r1
 8005c1a:	f091 0f00 	teqne	r1, #0
 8005c1e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8005c22:	d014      	beq.n	8005c4e <__aeabi_fmul+0x15e>
 8005c24:	ea92 0f0c 	teq	r2, ip
 8005c28:	d101      	bne.n	8005c2e <__aeabi_fmul+0x13e>
 8005c2a:	0242      	lsls	r2, r0, #9
 8005c2c:	d10f      	bne.n	8005c4e <__aeabi_fmul+0x15e>
 8005c2e:	ea93 0f0c 	teq	r3, ip
 8005c32:	d103      	bne.n	8005c3c <__aeabi_fmul+0x14c>
 8005c34:	024b      	lsls	r3, r1, #9
 8005c36:	bf18      	it	ne
 8005c38:	4608      	movne	r0, r1
 8005c3a:	d108      	bne.n	8005c4e <__aeabi_fmul+0x15e>
 8005c3c:	ea80 0001 	eor.w	r0, r0, r1
 8005c40:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005c44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005c4c:	4770      	bx	lr
 8005c4e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005c52:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8005c56:	4770      	bx	lr

08005c58 <__aeabi_frsub>:
 8005c58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8005c5c:	e002      	b.n	8005c64 <__addsf3>
 8005c5e:	bf00      	nop

08005c60 <__aeabi_fsub>:
 8005c60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08005c64 <__addsf3>:
 8005c64:	0042      	lsls	r2, r0, #1
 8005c66:	bf1f      	itttt	ne
 8005c68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8005c6c:	ea92 0f03 	teqne	r2, r3
 8005c70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8005c74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005c78:	d06a      	beq.n	8005d50 <__addsf3+0xec>
 8005c7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8005c7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8005c82:	bfc1      	itttt	gt
 8005c84:	18d2      	addgt	r2, r2, r3
 8005c86:	4041      	eorgt	r1, r0
 8005c88:	4048      	eorgt	r0, r1
 8005c8a:	4041      	eorgt	r1, r0
 8005c8c:	bfb8      	it	lt
 8005c8e:	425b      	neglt	r3, r3
 8005c90:	2b19      	cmp	r3, #25
 8005c92:	bf88      	it	hi
 8005c94:	4770      	bxhi	lr
 8005c96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8005c9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005c9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8005ca2:	bf18      	it	ne
 8005ca4:	4240      	negne	r0, r0
 8005ca6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005caa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8005cae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8005cb2:	bf18      	it	ne
 8005cb4:	4249      	negne	r1, r1
 8005cb6:	ea92 0f03 	teq	r2, r3
 8005cba:	d03f      	beq.n	8005d3c <__addsf3+0xd8>
 8005cbc:	f1a2 0201 	sub.w	r2, r2, #1
 8005cc0:	fa41 fc03 	asr.w	ip, r1, r3
 8005cc4:	eb10 000c 	adds.w	r0, r0, ip
 8005cc8:	f1c3 0320 	rsb	r3, r3, #32
 8005ccc:	fa01 f103 	lsl.w	r1, r1, r3
 8005cd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005cd4:	d502      	bpl.n	8005cdc <__addsf3+0x78>
 8005cd6:	4249      	negs	r1, r1
 8005cd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8005cdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8005ce0:	d313      	bcc.n	8005d0a <__addsf3+0xa6>
 8005ce2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005ce6:	d306      	bcc.n	8005cf6 <__addsf3+0x92>
 8005ce8:	0840      	lsrs	r0, r0, #1
 8005cea:	ea4f 0131 	mov.w	r1, r1, rrx
 8005cee:	f102 0201 	add.w	r2, r2, #1
 8005cf2:	2afe      	cmp	r2, #254	; 0xfe
 8005cf4:	d251      	bcs.n	8005d9a <__addsf3+0x136>
 8005cf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8005cfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8005cfe:	bf08      	it	eq
 8005d00:	f020 0001 	biceq.w	r0, r0, #1
 8005d04:	ea40 0003 	orr.w	r0, r0, r3
 8005d08:	4770      	bx	lr
 8005d0a:	0049      	lsls	r1, r1, #1
 8005d0c:	eb40 0000 	adc.w	r0, r0, r0
 8005d10:	3a01      	subs	r2, #1
 8005d12:	bf28      	it	cs
 8005d14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8005d18:	d2ed      	bcs.n	8005cf6 <__addsf3+0x92>
 8005d1a:	fab0 fc80 	clz	ip, r0
 8005d1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8005d22:	ebb2 020c 	subs.w	r2, r2, ip
 8005d26:	fa00 f00c 	lsl.w	r0, r0, ip
 8005d2a:	bfaa      	itet	ge
 8005d2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8005d30:	4252      	neglt	r2, r2
 8005d32:	4318      	orrge	r0, r3
 8005d34:	bfbc      	itt	lt
 8005d36:	40d0      	lsrlt	r0, r2
 8005d38:	4318      	orrlt	r0, r3
 8005d3a:	4770      	bx	lr
 8005d3c:	f092 0f00 	teq	r2, #0
 8005d40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8005d44:	bf06      	itte	eq
 8005d46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8005d4a:	3201      	addeq	r2, #1
 8005d4c:	3b01      	subne	r3, #1
 8005d4e:	e7b5      	b.n	8005cbc <__addsf3+0x58>
 8005d50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005d54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005d58:	bf18      	it	ne
 8005d5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005d5e:	d021      	beq.n	8005da4 <__addsf3+0x140>
 8005d60:	ea92 0f03 	teq	r2, r3
 8005d64:	d004      	beq.n	8005d70 <__addsf3+0x10c>
 8005d66:	f092 0f00 	teq	r2, #0
 8005d6a:	bf08      	it	eq
 8005d6c:	4608      	moveq	r0, r1
 8005d6e:	4770      	bx	lr
 8005d70:	ea90 0f01 	teq	r0, r1
 8005d74:	bf1c      	itt	ne
 8005d76:	2000      	movne	r0, #0
 8005d78:	4770      	bxne	lr
 8005d7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8005d7e:	d104      	bne.n	8005d8a <__addsf3+0x126>
 8005d80:	0040      	lsls	r0, r0, #1
 8005d82:	bf28      	it	cs
 8005d84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8005d88:	4770      	bx	lr
 8005d8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8005d8e:	bf3c      	itt	cc
 8005d90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8005d94:	4770      	bxcc	lr
 8005d96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005d9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8005d9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005da2:	4770      	bx	lr
 8005da4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8005da8:	bf16      	itet	ne
 8005daa:	4608      	movne	r0, r1
 8005dac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8005db0:	4601      	movne	r1, r0
 8005db2:	0242      	lsls	r2, r0, #9
 8005db4:	bf06      	itte	eq
 8005db6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8005dba:	ea90 0f01 	teqeq	r0, r1
 8005dbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8005dc2:	4770      	bx	lr

08005dc4 <__aeabi_ui2f>:
 8005dc4:	f04f 0300 	mov.w	r3, #0
 8005dc8:	e004      	b.n	8005dd4 <__aeabi_i2f+0x8>
 8005dca:	bf00      	nop

08005dcc <__aeabi_i2f>:
 8005dcc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8005dd0:	bf48      	it	mi
 8005dd2:	4240      	negmi	r0, r0
 8005dd4:	ea5f 0c00 	movs.w	ip, r0
 8005dd8:	bf08      	it	eq
 8005dda:	4770      	bxeq	lr
 8005ddc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8005de0:	4601      	mov	r1, r0
 8005de2:	f04f 0000 	mov.w	r0, #0
 8005de6:	e01c      	b.n	8005e22 <__aeabi_l2f+0x2a>

08005de8 <__aeabi_ul2f>:
 8005de8:	ea50 0201 	orrs.w	r2, r0, r1
 8005dec:	bf08      	it	eq
 8005dee:	4770      	bxeq	lr
 8005df0:	f04f 0300 	mov.w	r3, #0
 8005df4:	e00a      	b.n	8005e0c <__aeabi_l2f+0x14>
 8005df6:	bf00      	nop

08005df8 <__aeabi_l2f>:
 8005df8:	ea50 0201 	orrs.w	r2, r0, r1
 8005dfc:	bf08      	it	eq
 8005dfe:	4770      	bxeq	lr
 8005e00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8005e04:	d502      	bpl.n	8005e0c <__aeabi_l2f+0x14>
 8005e06:	4240      	negs	r0, r0
 8005e08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005e0c:	ea5f 0c01 	movs.w	ip, r1
 8005e10:	bf02      	ittt	eq
 8005e12:	4684      	moveq	ip, r0
 8005e14:	4601      	moveq	r1, r0
 8005e16:	2000      	moveq	r0, #0
 8005e18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8005e1c:	bf08      	it	eq
 8005e1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8005e22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8005e26:	fabc f28c 	clz	r2, ip
 8005e2a:	3a08      	subs	r2, #8
 8005e2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8005e30:	db10      	blt.n	8005e54 <__aeabi_l2f+0x5c>
 8005e32:	fa01 fc02 	lsl.w	ip, r1, r2
 8005e36:	4463      	add	r3, ip
 8005e38:	fa00 fc02 	lsl.w	ip, r0, r2
 8005e3c:	f1c2 0220 	rsb	r2, r2, #32
 8005e40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005e44:	fa20 f202 	lsr.w	r2, r0, r2
 8005e48:	eb43 0002 	adc.w	r0, r3, r2
 8005e4c:	bf08      	it	eq
 8005e4e:	f020 0001 	biceq.w	r0, r0, #1
 8005e52:	4770      	bx	lr
 8005e54:	f102 0220 	add.w	r2, r2, #32
 8005e58:	fa01 fc02 	lsl.w	ip, r1, r2
 8005e5c:	f1c2 0220 	rsb	r2, r2, #32
 8005e60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8005e64:	fa21 f202 	lsr.w	r2, r1, r2
 8005e68:	eb43 0002 	adc.w	r0, r3, r2
 8005e6c:	bf08      	it	eq
 8005e6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8005e72:	4770      	bx	lr

08005e74 <__aeabi_f2uiz>:
 8005e74:	0042      	lsls	r2, r0, #1
 8005e76:	d20e      	bcs.n	8005e96 <__aeabi_f2uiz+0x22>
 8005e78:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8005e7c:	d30b      	bcc.n	8005e96 <__aeabi_f2uiz+0x22>
 8005e7e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8005e82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8005e86:	d409      	bmi.n	8005e9c <__aeabi_f2uiz+0x28>
 8005e88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8005e8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e90:	fa23 f002 	lsr.w	r0, r3, r2
 8005e94:	4770      	bx	lr
 8005e96:	f04f 0000 	mov.w	r0, #0
 8005e9a:	4770      	bx	lr
 8005e9c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8005ea0:	d101      	bne.n	8005ea6 <__aeabi_f2uiz+0x32>
 8005ea2:	0242      	lsls	r2, r0, #9
 8005ea4:	d102      	bne.n	8005eac <__aeabi_f2uiz+0x38>
 8005ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eaa:	4770      	bx	lr
 8005eac:	f04f 0000 	mov.w	r0, #0
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	0000      	movs	r0, r0
	...

08005eb8 <main>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005eb8:	f64f 05ff 	movw	r5, #63743	; 0xf8ff
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ebc:	4c39      	ldr	r4, [pc, #228]	; (8005fa4 <main+0xec>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ebe:	493a      	ldr	r1, [pc, #232]	; (8005fa8 <main+0xf0>)
 8005ec0:	6822      	ldr	r2, [r4, #0]
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005ec2:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8005ec6:	f042 0210 	orr.w	r2, r2, #16
 8005eca:	6022      	str	r2, [r4, #0]
 8005ecc:	68ca      	ldr	r2, [r1, #12]
  reg_value  =  (reg_value                                   |
 8005ece:	4b37      	ldr	r3, [pc, #220]	; (8005fac <main+0xf4>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ed0:	402a      	ands	r2, r5
  reg_value  =  (reg_value                                   |
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	b0a9      	sub	sp, #164	; 0xa4
  SCB->AIRCR =  reg_value;
 8005ed6:	60cb      	str	r3, [r1, #12]
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ed8:	200f      	movs	r0, #15
 8005eda:	f7fe f853 	bl	8003f84 <HAL_InitTick.isra.0>
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005ede:	4b34      	ldr	r3, [pc, #208]	; (8005fb0 <main+0xf8>)

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005ee0:	4934      	ldr	r1, [pc, #208]	; (8005fb4 <main+0xfc>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005ee2:	699a      	ldr	r2, [r3, #24]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	f042 0201 	orr.w	r2, r2, #1
 8005eea:	619a      	str	r2, [r3, #24]
 8005eec:	699a      	ldr	r2, [r3, #24]
 8005eee:	f002 0201 	and.w	r2, r2, #1
 8005ef2:	920f      	str	r2, [sp, #60]	; 0x3c
 8005ef4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ef6:	69da      	ldr	r2, [r3, #28]
 8005ef8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005efc:	61da      	str	r2, [r3, #28]
 8005efe:	69db      	ldr	r3, [r3, #28]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f00:	2200      	movs	r2, #0
 8005f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f06:	930e      	str	r3, [sp, #56]	; 0x38
 8005f08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005f0a:	684b      	ldr	r3, [r1, #4]
 8005f0c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005f10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f14:	604b      	str	r3, [r1, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005f16:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005f1a:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005f1e:	f44f 10e0 	mov.w	r0, #1835008	; 0x1c0000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005f22:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005f24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f28:	e9cd 2220 	strd	r2, r2, [sp, #128]	; 0x80
 8005f2c:	e9cd 2223 	strd	r2, r2, [sp, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f30:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005f32:	9027      	str	r0, [sp, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f34:	a81e      	add	r0, sp, #120	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005f36:	9122      	str	r1, [sp, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f38:	9225      	str	r2, [sp, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005f3a:	9326      	str	r3, [sp, #152]	; 0x98
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f3c:	f7fb f97e 	bl	800123c <HAL_RCC_OscConfig.constprop.0>
 8005f40:	b108      	cbz	r0, 8005f46 <main+0x8e>
  __ASM volatile ("cpsid i" : : : "memory");
 8005f42:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8005f44:	e7fe      	b.n	8005f44 <main+0x8c>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	4681      	mov	r9, r0
 8005f4a:	f013 0f06 	tst.w	r3, #6
 8005f4e:	d10c      	bne.n	8005f6a <main+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	f023 0307 	bic.w	r3, r3, #7
 8005f56:	f043 0302 	orr.w	r3, r3, #2
 8005f5a:	6023      	str	r3, [r4, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d001      	beq.n	8005f6a <main+0xb2>
 8005f66:	b672      	cpsid	i
 8005f68:	e7fe      	b.n	8005f68 <main+0xb0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f6a:	4a11      	ldr	r2, [pc, #68]	; (8005fb0 <main+0xf8>)
 8005f6c:	6853      	ldr	r3, [r2, #4]
 8005f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f72:	6053      	str	r3, [r2, #4]
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f74:	6853      	ldr	r3, [r2, #4]
 8005f76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005f7a:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f7c:	6853      	ldr	r3, [r2, #4]
 8005f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f82:	6053      	str	r3, [r2, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f84:	6813      	ldr	r3, [r2, #0]
 8005f86:	0199      	lsls	r1, r3, #6
 8005f88:	d5ed      	bpl.n	8005f66 <main+0xae>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f8a:	6853      	ldr	r3, [r2, #4]
  return uwTick;
 8005f8c:	f8df a028 	ldr.w	sl, [pc, #40]	; 8005fb8 <main+0x100>
 8005f90:	f023 0303 	bic.w	r3, r3, #3
 8005f94:	f043 0302 	orr.w	r3, r3, #2
 8005f98:	6053      	str	r3, [r2, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f9a:	f241 3088 	movw	r0, #5000	; 0x1388
 8005f9e:	f8da 1000 	ldr.w	r1, [sl]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fa2:	e010      	b.n	8005fc6 <main+0x10e>
 8005fa4:	40022000 	.word	0x40022000
 8005fa8:	e000ed00 	.word	0xe000ed00
 8005fac:	05fa0300 	.word	0x05fa0300
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	40010000 	.word	0x40010000
 8005fb8:	20000200 	.word	0x20000200
 8005fbc:	f8da 3000 	ldr.w	r3, [sl]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fc0:	1a5b      	subs	r3, r3, r1
 8005fc2:	4283      	cmp	r3, r0
 8005fc4:	d8cf      	bhi.n	8005f66 <main+0xae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fc6:	6853      	ldr	r3, [r2, #4]
 8005fc8:	f003 030c 	and.w	r3, r3, #12
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d1f5      	bne.n	8005fbc <main+0x104>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fd0:	4a8a      	ldr	r2, [pc, #552]	; (80061fc <main+0x344>)
 8005fd2:	6813      	ldr	r3, [r2, #0]
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d90a      	bls.n	8005ff2 <main+0x13a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fdc:	6813      	ldr	r3, [r2, #0]
 8005fde:	f023 0307 	bic.w	r3, r3, #7
 8005fe2:	f043 0302 	orr.w	r3, r3, #2
 8005fe6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe8:	6813      	ldr	r3, [r2, #0]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d1b9      	bne.n	8005f66 <main+0xae>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005ff2:	f240 2201 	movw	r2, #513	; 0x201
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ff6:	4c82      	ldr	r4, [pc, #520]	; (8006200 <main+0x348>)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005ff8:	ad1a      	add	r5, sp, #104	; 0x68
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ffa:	6863      	ldr	r3, [r4, #4]
 8005ffc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006000:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006004:	6063      	str	r3, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006006:	6863      	ldr	r3, [r4, #4]
 8006008:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800600c:	6063      	str	r3, [r4, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800600e:	4b7d      	ldr	r3, [pc, #500]	; (8006204 <main+0x34c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006010:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006014:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006016:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 800601a:	6863      	ldr	r3, [r4, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800601c:	f003 020c 	and.w	r2, r3, #12
 8006020:	2a08      	cmp	r2, #8
 8006022:	f000 80d4 	beq.w	80061ce <main+0x316>
      sysclockfreq = HSE_VALUE;
 8006026:	4e78      	ldr	r6, [pc, #480]	; (8006208 <main+0x350>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006028:	2500      	movs	r5, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800602a:	4c75      	ldr	r4, [pc, #468]	; (8006200 <main+0x348>)
 800602c:	4a77      	ldr	r2, [pc, #476]	; (800620c <main+0x354>)
 800602e:	6863      	ldr	r3, [r4, #4]
 8006030:	4f77      	ldr	r7, [pc, #476]	; (8006210 <main+0x358>)
 8006032:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006036:	4413      	add	r3, r2
 8006038:	f893 35e8 	ldrb.w	r3, [r3, #1512]	; 0x5e8
 800603c:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8006214 <main+0x35c>
 8006040:	40de      	lsrs	r6, r3
 8006042:	4b75      	ldr	r3, [pc, #468]	; (8006218 <main+0x360>)
  HAL_InitTick(uwTickPrio);
 8006044:	6858      	ldr	r0, [r3, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006046:	601e      	str	r6, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8006048:	f7fd ff9c 	bl	8003f84 <HAL_InitTick.isra.0>
 800604c:	9520      	str	r5, [sp, #128]	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800604e:	69a3      	ldr	r3, [r4, #24]
 8006050:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8006054:	f043 0310 	orr.w	r3, r3, #16
 8006058:	61a3      	str	r3, [r4, #24]
 800605a:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800605c:	2202      	movs	r2, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800605e:	f003 0310 	and.w	r3, r3, #16
 8006062:	930d      	str	r3, [sp, #52]	; 0x34
 8006064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006066:	69a3      	ldr	r3, [r4, #24]
 8006068:	486c      	ldr	r0, [pc, #432]	; (800621c <main+0x364>)
 800606a:	f043 0320 	orr.w	r3, r3, #32
 800606e:	61a3      	str	r3, [r4, #24]
 8006070:	69a3      	ldr	r3, [r4, #24]
 8006072:	f003 0320 	and.w	r3, r3, #32
 8006076:	930c      	str	r3, [sp, #48]	; 0x30
 8006078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800607a:	69a3      	ldr	r3, [r4, #24]
 800607c:	f043 0304 	orr.w	r3, r3, #4
 8006080:	61a3      	str	r3, [r4, #24]
 8006082:	69a3      	ldr	r3, [r4, #24]
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	930b      	str	r3, [sp, #44]	; 0x2c
 800608a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800608c:	69a3      	ldr	r3, [r4, #24]
 800608e:	f043 0308 	orr.w	r3, r3, #8
 8006092:	61a3      	str	r3, [r4, #24]
 8006094:	69a3      	ldr	r3, [r4, #24]
 8006096:	f003 0308 	and.w	r3, r3, #8
 800609a:	930a      	str	r3, [sp, #40]	; 0x28
 800609c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800609e:	4b60      	ldr	r3, [pc, #384]	; (8006220 <main+0x368>)
 80060a0:	6103      	str	r3, [r0, #16]
 80060a2:	4b60      	ldr	r3, [pc, #384]	; (8006224 <main+0x36c>)
 80060a4:	f8c8 1010 	str.w	r1, [r8, #16]
 80060a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pin = LED_Pin;
 80060aa:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060ac:	9221      	str	r2, [sp, #132]	; 0x84
  GPIO_InitStruct.Pin = LED_Pin;
 80060ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80060b2:	a91e      	add	r1, sp, #120	; 0x78
  GPIO_InitStruct.Pin = LED_Pin;
 80060b4:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80060b8:	f7fa ffae 	bl	8001018 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 80060bc:	2200      	movs	r2, #0
 80060be:	2303      	movs	r3, #3
 80060c0:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 80060c4:	f24c 023f 	movw	r2, #49215	; 0xc03f
 80060c8:	2301      	movs	r3, #1
 80060ca:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060ce:	f7fa ffa3 	bl	8001018 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 80060d2:	2200      	movs	r2, #0
 80060d4:	2303      	movs	r3, #3
 80060d6:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 80060da:	22ff      	movs	r2, #255	; 0xff
 80060dc:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060de:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 80060e0:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060e4:	f7fa ff98 	bl	8001018 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 80060e8:	2200      	movs	r2, #0
 80060ea:	2303      	movs	r3, #3
 80060ec:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 80060f0:	f640 4203 	movw	r2, #3075	; 0xc03
 80060f4:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060f6:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 80060f8:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060fc:	f7fa ff8c 	bl	8001018 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 8006100:	2300      	movs	r3, #0
 8006102:	2204      	movs	r2, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006104:	9520      	str	r5, [sp, #128]	; 0x80
  GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 8006106:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(SYSTEM_RESERVED_GPIO_Port, &GPIO_InitStruct);
 800610a:	f7fa ff85 	bl	8001018 <HAL_GPIO_Init>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800610e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 8006112:	4f45      	ldr	r7, [pc, #276]	; (8006228 <main+0x370>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006114:	f8ca 305c 	str.w	r3, [sl, #92]	; 0x5c
  hi2c1.Init.ClockSpeed = 400000;
 8006118:	4b44      	ldr	r3, [pc, #272]	; (800622c <main+0x374>)
  hi2c1.Init.OwnAddress1 = 0;
 800611a:	e9ca 5515 	strd	r5, r5, [sl, #84]	; 0x54
  hi2c1.Init.ClockSpeed = 400000;
 800611e:	e9ca 7313 	strd	r7, r3, [sl, #76]	; 0x4c
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006122:	f89a 3089 	ldrb.w	r3, [sl, #137]	; 0x89
  hi2c1.Init.OwnAddress2 = 0;
 8006126:	e9ca 5518 	strd	r5, r5, [sl, #96]	; 0x60
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800612a:	e9ca 551a 	strd	r5, r5, [sl, #104]	; 0x68
 800612e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 8084 	beq.w	8006240 <main+0x388>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006138:	2324      	movs	r3, #36	; 0x24
 800613a:	f88a 3089 	strb.w	r3, [sl, #137]	; 0x89
  __HAL_I2C_DISABLE(hi2c);
 800613e:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006142:	492f      	ldr	r1, [pc, #188]	; (8006200 <main+0x348>)
 8006144:	681a      	ldr	r2, [r3, #0]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006146:	f8da 7050 	ldr.w	r7, [sl, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 800614a:	f022 0201 	bic.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	684a      	ldr	r2, [r1, #4]
 8006162:	492a      	ldr	r1, [pc, #168]	; (800620c <main+0x354>)
 8006164:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8006168:	5c8a      	ldrb	r2, [r1, r2]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800616a:	4931      	ldr	r1, [pc, #196]	; (8006230 <main+0x378>)
 800616c:	fa26 f202 	lsr.w	r2, r6, r2
 8006170:	428f      	cmp	r7, r1
 8006172:	bf94      	ite	ls
 8006174:	492f      	ldrls	r1, [pc, #188]	; (8006234 <main+0x37c>)
 8006176:	4930      	ldrhi	r1, [pc, #192]	; (8006238 <main+0x380>)
 8006178:	428a      	cmp	r2, r1
 800617a:	bf8c      	ite	hi
 800617c:	2100      	movhi	r1, #0
 800617e:	2101      	movls	r1, #1
 8006180:	bb19      	cbnz	r1, 80061ca <main+0x312>
  freqrange = I2C_FREQRANGE(pclk1);
 8006182:	492e      	ldr	r1, [pc, #184]	; (800623c <main+0x384>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006184:	6858      	ldr	r0, [r3, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8006186:	fbb2 f1f1 	udiv	r1, r2, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800618a:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800618e:	4308      	orrs	r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006190:	4c27      	ldr	r4, [pc, #156]	; (8006230 <main+0x378>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006192:	6058      	str	r0, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006194:	6a18      	ldr	r0, [r3, #32]
 8006196:	42a7      	cmp	r7, r4
 8006198:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800619c:	f200 80c8 	bhi.w	8006330 <main+0x478>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061a0:	1e54      	subs	r4, r2, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061a2:	3101      	adds	r1, #1
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061a4:	007a      	lsls	r2, r7, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061a6:	4301      	orrs	r1, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061a8:	fbb4 f2f2 	udiv	r2, r4, r2
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061ac:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061ae:	f640 71fc 	movw	r1, #4092	; 0xffc
 80061b2:	69d8      	ldr	r0, [r3, #28]
 80061b4:	3201      	adds	r2, #1
 80061b6:	f420 404f 	bic.w	r0, r0, #52992	; 0xcf00
 80061ba:	420a      	tst	r2, r1
 80061bc:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80061c0:	f000 86aa 	beq.w	8006f18 <main+0x1060>
 80061c4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80061c8:	e0e3      	b.n	8006392 <main+0x4da>
 80061ca:	b672      	cpsid	i
	while (1)
 80061cc:	e7fe      	b.n	80061cc <main+0x314>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80061ce:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80061d2:	32a0      	adds	r2, #160	; 0xa0
 80061d4:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80061d6:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80061d8:	f812 6c38 	ldrb.w	r6, [r2, #-56]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80061dc:	f140 8697 	bpl.w	8006f0e <main+0x1056>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80061e0:	6863      	ldr	r3, [r4, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80061e2:	4a09      	ldr	r2, [pc, #36]	; (8006208 <main+0x350>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80061e4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80061e8:	fb02 f606 	mul.w	r6, r2, r6
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80061ec:	33a0      	adds	r3, #160	; 0xa0
 80061ee:	446b      	add	r3, sp
 80061f0:	f813 3c44 	ldrb.w	r3, [r3, #-68]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80061f4:	fbb6 f6f3 	udiv	r6, r6, r3
 80061f8:	e716      	b.n	8006028 <main+0x170>
 80061fa:	bf00      	nop
 80061fc:	40022000 	.word	0x40022000
 8006200:	40021000 	.word	0x40021000
 8006204:	0801de60 	.word	0x0801de60
 8006208:	007a1200 	.word	0x007a1200
 800620c:	0800c620 	.word	0x0800c620
 8006210:	40010c00 	.word	0x40010c00
 8006214:	40010800 	.word	0x40010800
 8006218:	20000000 	.word	0x20000000
 800621c:	40011000 	.word	0x40011000
 8006220:	e03f0000 	.word	0xe03f0000
 8006224:	0c030000 	.word	0x0c030000
 8006228:	40005400 	.word	0x40005400
 800622c:	00061a80 	.word	0x00061a80
 8006230:	000186a0 	.word	0x000186a0
 8006234:	001e847f 	.word	0x001e847f
 8006238:	003d08ff 	.word	0x003d08ff
 800623c:	000f4240 	.word	0x000f4240
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006240:	2203      	movs	r2, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006242:	9520      	str	r5, [sp, #128]	; 0x80
    hi2c->Lock = HAL_UNLOCKED;
 8006244:	f88a 5088 	strb.w	r5, [sl, #136]	; 0x88
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006248:	69a3      	ldr	r3, [r4, #24]
 800624a:	f043 0308 	orr.w	r3, r3, #8
 800624e:	61a3      	str	r3, [r4, #24]
 8006250:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006252:	9221      	str	r2, [sp, #132]	; 0x84
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800625a:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800625c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800625e:	2312      	movs	r3, #18
 8006260:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006264:	f7fa fed8 	bl	8001018 <HAL_GPIO_Init>
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006268:	2380      	movs	r3, #128	; 0x80
 800626a:	f8ca 34f8 	str.w	r3, [sl, #1272]	; 0x4f8

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800626e:	f8ca 353c 	str.w	r3, [sl, #1340]	; 0x53c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006272:	2314      	movs	r3, #20
  hdma->Lock = HAL_UNLOCKED;
 8006274:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006278:	f8ca 352c 	str.w	r3, [sl, #1324]	; 0x52c
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800627c:	2110      	movs	r1, #16
 800627e:	2318      	movs	r3, #24
 8006280:	f8ca 14f0 	str.w	r1, [sl, #1264]	; 0x4f0
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006284:	f8ca 54f4 	str.w	r5, [sl, #1268]	; 0x4f4
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006288:	f8ca 54fc 	str.w	r5, [sl, #1276]	; 0x4fc
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800628c:	f8ca 5500 	str.w	r5, [sl, #1280]	; 0x500
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8006290:	f8ca 5504 	str.w	r5, [sl, #1284]	; 0x504
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006294:	f8ca 5508 	str.w	r5, [sl, #1288]	; 0x508
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006298:	f8ca 5534 	str.w	r5, [sl, #1332]	; 0x534
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800629c:	f8ca 5538 	str.w	r5, [sl, #1336]	; 0x538
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80062a0:	f8ca 5540 	str.w	r5, [sl, #1344]	; 0x540
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80062a4:	f8ca 5544 	str.w	r5, [sl, #1348]	; 0x544
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80062a8:	f8ca 5548 	str.w	r5, [sl, #1352]	; 0x548
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80062ac:	f8ca 554c 	str.w	r5, [sl, #1356]	; 0x54c
  hdma->Lock = HAL_UNLOCKED;
 80062b0:	f8aa 250c 	strh.w	r2, [sl, #1292]	; 0x50c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80062b4:	f8ca 3570 	str.w	r3, [sl, #1392]	; 0x570
    __HAL_RCC_I2C1_CLK_ENABLE();
 80062b8:	69e3      	ldr	r3, [r4, #28]
  hdma->DmaBaseAddress = DMA1;
 80062ba:	4919      	ldr	r1, [pc, #100]	; (8006320 <main+0x468>)
 80062bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062c0:	61e3      	str	r3, [r4, #28]
 80062c2:	69e3      	ldr	r3, [r4, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80062c4:	4817      	ldr	r0, [pc, #92]	; (8006324 <main+0x46c>)
 80062c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062ca:	9310      	str	r3, [sp, #64]	; 0x40
 80062cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  tmp = hdma->Instance->CCR;
 80062ce:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
  hdma->DmaBaseAddress = DMA1;
 80062d0:	f8ca 1528 	str.w	r1, [sl, #1320]	; 0x528
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80062d4:	4003      	ands	r3, r0
  tmp |=  hdma->Init.Direction        |
 80062d6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
  hdma->DmaBaseAddress = DMA1;
 80062da:	f8ca 156c 	str.w	r1, [sl, #1388]	; 0x56c
  hdma->Instance->CCR = tmp;
 80062de:	66cb      	str	r3, [r1, #108]	; 0x6c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062e0:	f8ca 5524 	str.w	r5, [sl, #1316]	; 0x524
  tmp = hdma->Instance->CCR;
 80062e4:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80062e8:	4c0f      	ldr	r4, [pc, #60]	; (8006328 <main+0x470>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80062ea:	4003      	ands	r3, r0
  tmp |=  hdma->Init.Direction        |
 80062ec:	f043 0080 	orr.w	r0, r3, #128	; 0x80
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80062f0:	4b0e      	ldr	r3, [pc, #56]	; (800632c <main+0x474>)
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80062f2:	f8ca 44ec 	str.w	r4, [sl, #1260]	; 0x4ec
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80062f6:	3414      	adds	r4, #20
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80062f8:	f8ca 3080 	str.w	r3, [sl, #128]	; 0x80
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80062fc:	f8ca 4530 	str.w	r4, [sl, #1328]	; 0x530
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8006300:	f5a3 6494 	sub.w	r4, r3, #1184	; 0x4a0
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8006304:	3344      	adds	r3, #68	; 0x44
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8006306:	f8ca 4510 	str.w	r4, [sl, #1296]	; 0x510
  hdma->Instance->CCR = tmp;
 800630a:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800630e:	f8ca 5568 	str.w	r5, [sl, #1384]	; 0x568
  hdma->Lock = HAL_UNLOCKED;
 8006312:	f8aa 2550 	strh.w	r2, [sl, #1360]	; 0x550
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8006316:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 800631a:	f8ca 4554 	str.w	r4, [sl, #1364]	; 0x554
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800631e:	e70b      	b.n	8006138 <main+0x280>
 8006320:	40020000 	.word	0x40020000
 8006324:	ffffc00f 	.word	0xffffc00f
 8006328:	4002006c 	.word	0x4002006c
 800632c:	200006ec 	.word	0x200006ec
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006330:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8006334:	fb04 f101 	mul.w	r1, r4, r1
 8006338:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800633c:	fbb1 f1f4 	udiv	r1, r1, r4
 8006340:	3101      	adds	r1, #1
 8006342:	4301      	orrs	r1, r0
 8006344:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006346:	69d8      	ldr	r0, [r3, #28]
 8006348:	f8da c054 	ldr.w	ip, [sl, #84]	; 0x54
 800634c:	f420 404f 	bic.w	r0, r0, #52992	; 0xcf00
 8006350:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8006354:	f1bc 0f00 	cmp.w	ip, #0
 8006358:	f040 85ca 	bne.w	8006ef0 <main+0x1038>
 800635c:	1e55      	subs	r5, r2, #1
 800635e:	eb07 0447 	add.w	r4, r7, r7, lsl #1
 8006362:	fbb5 f4f4 	udiv	r4, r5, r4
 8006366:	0524      	lsls	r4, r4, #20
 8006368:	f514 1f80 	cmn.w	r4, #1048576	; 0x100000
 800636c:	bf14      	ite	ne
 800636e:	2400      	movne	r4, #0
 8006370:	2401      	moveq	r4, #1
 8006372:	0079      	lsls	r1, r7, #1
 8006374:	2c00      	cmp	r4, #0
 8006376:	f040 85d2 	bne.w	8006f1e <main+0x1066>
 800637a:	f1bc 0f00 	cmp.w	ip, #0
 800637e:	f040 8651 	bne.w	8007024 <main+0x116c>
 8006382:	19ca      	adds	r2, r1, r7
 8006384:	fbb5 f2f2 	udiv	r2, r5, r2
 8006388:	3201      	adds	r2, #1
 800638a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800638e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006392:	2400      	movs	r4, #0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006394:	4302      	orrs	r2, r0
  hi2c->State = HAL_I2C_STATE_READY;
 8006396:	2020      	movs	r0, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006398:	61da      	str	r2, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800639a:	681d      	ldr	r5, [r3, #0]
 800639c:	e9da 211a 	ldrd	r2, r1, [sl, #104]	; 0x68
 80063a0:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 80063a4:	430a      	orrs	r2, r1
 80063a6:	432a      	orrs	r2, r5
 80063a8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80063aa:	689d      	ldr	r5, [r3, #8]
 80063ac:	e9da 1216 	ldrd	r1, r2, [sl, #88]	; 0x58
 80063b0:	f425 4503 	bic.w	r5, r5, #33536	; 0x8300
 80063b4:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80063b8:	430a      	orrs	r2, r1
 80063ba:	432a      	orrs	r2, r5
 80063bc:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80063be:	68dd      	ldr	r5, [r3, #12]
 80063c0:	e9da 2118 	ldrd	r2, r1, [sl, #96]	; 0x60
 80063c4:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80063c8:	430a      	orrs	r2, r1
 80063ca:	432a      	orrs	r2, r5
 80063cc:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 80063ce:	681a      	ldr	r2, [r3, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80063d0:	4fc9      	ldr	r7, [pc, #804]	; (80066f8 <main+0x840>)
 80063d2:	f042 0201 	orr.w	r2, r2, #1
 80063d6:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063d8:	f8ca 408c 	str.w	r4, [sl, #140]	; 0x8c
  hi2c->State = HAL_I2C_STATE_READY;
 80063dc:	f88a 0089 	strb.w	r0, [sl, #137]	; 0x89
  hi2c->PreviousState = I2C_STATE_NONE;
 80063e0:	f8ca 407c 	str.w	r4, [sl, #124]	; 0x7c
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063e4:	f88a 408a 	strb.w	r4, [sl, #138]	; 0x8a
 80063e8:	697b      	ldr	r3, [r7, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80063ea:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80063ec:	f043 0301 	orr.w	r3, r3, #1
 80063f0:	617b      	str	r3, [r7, #20]
 80063f2:	697b      	ldr	r3, [r7, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80063f4:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	9309      	str	r3, [sp, #36]	; 0x24
 80063fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80063fe:	f7fb f8f1 	bl	80015e4 <HAL_NVIC_SetPriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006406:	4dbd      	ldr	r5, [pc, #756]	; (80066fc <main+0x844>)
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8006408:	4621      	mov	r1, r4
 800640a:	602b      	str	r3, [r5, #0]
 800640c:	200e      	movs	r0, #14
 800640e:	f7fb f8e9 	bl	80015e4 <HAL_NVIC_SetPriority.constprop.0>
 8006412:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006416:	4621      	mov	r1, r4
 8006418:	602b      	str	r3, [r5, #0]
 800641a:	200f      	movs	r0, #15
 800641c:	f7fb f8e2 	bl	80015e4 <HAL_NVIC_SetPriority.constprop.0>
 8006420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8006424:	4621      	mov	r1, r4
 8006426:	602b      	str	r3, [r5, #0]
 8006428:	2010      	movs	r0, #16
 800642a:	f7fb f8db 	bl	80015e4 <HAL_NVIC_SetPriority.constprop.0>
 800642e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8006432:	4621      	mov	r1, r4
 8006434:	602b      	str	r3, [r5, #0]
 8006436:	2011      	movs	r0, #17
 8006438:	f7fb f8d4 	bl	80015e4 <HAL_NVIC_SetPriority.constprop.0>
 800643c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006440:	e9ca 4434 	strd	r4, r4, [sl, #208]	; 0xd0
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006444:	e9ca 4438 	strd	r4, r4, [sl, #224]	; 0xe0
  huart1.Init.Parity = UART_PARITY_NONE;
 8006448:	f8ca 40d8 	str.w	r4, [sl, #216]	; 0xd8
 800644c:	602b      	str	r3, [r5, #0]
  huart1.Init.BaudRate = 115200;
 800644e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006452:	250c      	movs	r5, #12
  huart1.Init.BaudRate = 115200;
 8006454:	f8ca 30cc 	str.w	r3, [sl, #204]	; 0xcc
  huart1.Instance = USART1;
 8006458:	4ba9      	ldr	r3, [pc, #676]	; (8006700 <main+0x848>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 800645a:	f8ca 50dc 	str.w	r5, [sl, #220]	; 0xdc
  huart1.Instance = USART1;
 800645e:	f8ca 30c8 	str.w	r3, [sl, #200]	; 0xc8
  if (huart->gState == HAL_UART_STATE_RESET)
 8006462:	f89a 3105 	ldrb.w	r3, [sl, #261]	; 0x105
 8006466:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 855a 	beq.w	8006f24 <main+0x106c>
  huart->gState = HAL_UART_STATE_BUSY;
 8006470:	2324      	movs	r3, #36	; 0x24
 8006472:	f88a 3105 	strb.w	r3, [sl, #261]	; 0x105
  __HAL_UART_DISABLE(huart);
 8006476:	f8da 30c8 	ldr.w	r3, [sl, #200]	; 0xc8
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800647a:	f8da 10d4 	ldr.w	r1, [sl, #212]	; 0xd4
  __HAL_UART_DISABLE(huart);
 800647e:	68da      	ldr	r2, [r3, #12]
 8006480:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006484:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006486:	691a      	ldr	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006488:	f8da 00d8 	ldr.w	r0, [sl, #216]	; 0xd8
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800648c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006490:	430a      	orrs	r2, r1
 8006492:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006494:	f8da 20d0 	ldr.w	r2, [sl, #208]	; 0xd0
  MODIFY_REG(huart->Instance->CR1,
 8006498:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800649a:	4302      	orrs	r2, r0
 800649c:	f8da 00dc 	ldr.w	r0, [sl, #220]	; 0xdc
  MODIFY_REG(huart->Instance->CR1,
 80064a0:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80064a4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80064a8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80064aa:	430a      	orrs	r2, r1
 80064ac:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064ae:	695a      	ldr	r2, [r3, #20]
 80064b0:	f8da 10e0 	ldr.w	r1, [sl, #224]	; 0xe0
 80064b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80064b8:	430a      	orrs	r2, r1
 80064ba:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80064bc:	4a90      	ldr	r2, [pc, #576]	; (8006700 <main+0x848>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	f000 85a7 	beq.w	8007012 <main+0x115a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80064c4:	f7fa fd98 	bl	8000ff8 <HAL_RCC_GetPCLK1Freq>
 80064c8:	4606      	mov	r6, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064ca:	2319      	movs	r3, #25
 80064cc:	fb03 f606 	mul.w	r6, r3, r6
 80064d0:	f8da 30cc 	ldr.w	r3, [sl, #204]	; 0xcc
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d4:	2100      	movs	r1, #0
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	fbb6 f3f3 	udiv	r3, r6, r3
 80064dc:	2664      	movs	r6, #100	; 0x64
  htim1.Instance = TIM1;
 80064de:	4d89      	ldr	r5, [pc, #548]	; (8006704 <main+0x84c>)
  huart->gState = HAL_UART_STATE_READY;
 80064e0:	2020      	movs	r0, #32
  htim1.Init.Prescaler = 0;
 80064e2:	e9ca 5101 	strd	r5, r1, [sl, #4]
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064e6:	fbb3 f5f6 	udiv	r5, r3, r6
 80064ea:	fb06 3315 	mls	r3, r6, r5, r3
 80064ee:	011b      	lsls	r3, r3, #4
 80064f0:	3332      	adds	r3, #50	; 0x32
 80064f2:	fbb3 f3f6 	udiv	r3, r3, r6
  htim1.Init.Period = 65535;
 80064f6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80064fa:	f8da 20c8 	ldr.w	r2, [sl, #200]	; 0xc8
 80064fe:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 8006502:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006504:	6913      	ldr	r3, [r2, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006506:	f8ca 100c 	str.w	r1, [sl, #12]
 800650a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800650e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006510:	6953      	ldr	r3, [r2, #20]
 8006512:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006516:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8006518:	68d3      	ldr	r3, [r2, #12]
 800651a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800651e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006520:	f8ca 1108 	str.w	r1, [sl, #264]	; 0x108
  huart->gState = HAL_UART_STATE_READY;
 8006524:	f88a 0105 	strb.w	r0, [sl, #261]	; 0x105
  huart->RxState = HAL_UART_STATE_READY;
 8006528:	f88a 0106 	strb.w	r0, [sl, #262]	; 0x106
  if (htim->State == HAL_TIM_STATE_RESET)
 800652c:	f89a 3041 	ldrb.w	r3, [sl, #65]	; 0x41
  htim1.Init.RepetitionCounter = 0;
 8006530:	e9ca 1105 	strd	r1, r1, [sl, #20]
  htim1.Init.Period = 65535;
 8006534:	f8ca 4010 	str.w	r4, [sl, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006538:	f8ca 101c 	str.w	r1, [sl, #28]
 800653c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 857b 	beq.w	800703c <main+0x1184>
  htim->State = HAL_TIM_STATE_BUSY;
 8006546:	2602      	movs	r6, #2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006548:	2401      	movs	r4, #1
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800654a:	4d6e      	ldr	r5, [pc, #440]	; (8006704 <main+0x84c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800654c:	f88a 6041 	strb.w	r6, [sl, #65]	; 0x41
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006550:	4628      	mov	r0, r5
 8006552:	f7fa fffd 	bl	8001550 <TIM_Base_SetConfig.constprop.0>
  __HAL_LOCK(htim);
 8006556:	f89a 3040 	ldrb.w	r3, [sl, #64]	; 0x40
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800655a:	f88a 404a 	strb.w	r4, [sl, #74]	; 0x4a
  __HAL_LOCK(htim);
 800655e:	42a3      	cmp	r3, r4
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006560:	f88a 4042 	strb.w	r4, [sl, #66]	; 0x42
 8006564:	f88a 4043 	strb.w	r4, [sl, #67]	; 0x43
 8006568:	f88a 4044 	strb.w	r4, [sl, #68]	; 0x44
 800656c:	f88a 4045 	strb.w	r4, [sl, #69]	; 0x45
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006570:	f88a 4046 	strb.w	r4, [sl, #70]	; 0x46
 8006574:	f88a 4047 	strb.w	r4, [sl, #71]	; 0x47
 8006578:	f88a 4048 	strb.w	r4, [sl, #72]	; 0x48
 800657c:	f88a 4049 	strb.w	r4, [sl, #73]	; 0x49
  htim->State = HAL_TIM_STATE_READY;
 8006580:	f88a 4041 	strb.w	r4, [sl, #65]	; 0x41
  __HAL_LOCK(htim);
 8006584:	f000 8597 	beq.w	80070b6 <main+0x11fe>
  __HAL_UNLOCK(htim);
 8006588:	2200      	movs	r2, #0
  tmpsmcr = htim->Instance->SMCR;
 800658a:	f8da 0004 	ldr.w	r0, [sl, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 800658e:	f88a 6041 	strb.w	r6, [sl, #65]	; 0x41
  tmpsmcr = htim->Instance->SMCR;
 8006592:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006594:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006598:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800659c:	6083      	str	r3, [r0, #8]
  htim->State = HAL_TIM_STATE_READY;
 800659e:	f88a 4041 	strb.w	r4, [sl, #65]	; 0x41
  if (htim->State == HAL_TIM_STATE_RESET)
 80065a2:	f89a 3041 	ldrb.w	r3, [sl, #65]	; 0x41
  __HAL_UNLOCK(htim);
 80065a6:	f88a 2040 	strb.w	r2, [sl, #64]	; 0x40
  htim->State = HAL_TIM_STATE_BUSY;
 80065aa:	f88a 6041 	strb.w	r6, [sl, #65]	; 0x41
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ae:	f7fa ffcf 	bl	8001550 <TIM_Base_SetConfig.constprop.0>
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065b2:	f89a 3040 	ldrb.w	r3, [sl, #64]	; 0x40
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065b6:	f88a 404a 	strb.w	r4, [sl, #74]	; 0x4a
 80065ba:	42a3      	cmp	r3, r4
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065bc:	f88a 4042 	strb.w	r4, [sl, #66]	; 0x42
 80065c0:	f88a 4043 	strb.w	r4, [sl, #67]	; 0x43
 80065c4:	f88a 4044 	strb.w	r4, [sl, #68]	; 0x44
 80065c8:	f88a 4045 	strb.w	r4, [sl, #69]	; 0x45
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065cc:	f88a 4046 	strb.w	r4, [sl, #70]	; 0x46
 80065d0:	f88a 4047 	strb.w	r4, [sl, #71]	; 0x47
 80065d4:	f88a 4048 	strb.w	r4, [sl, #72]	; 0x48
 80065d8:	f88a 4049 	strb.w	r4, [sl, #73]	; 0x49
  htim->State = HAL_TIM_STATE_READY;
 80065dc:	f88a 4041 	strb.w	r4, [sl, #65]	; 0x41
 80065e0:	f000 8594 	beq.w	800710c <main+0x1254>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065e4:	f8da 3004 	ldr.w	r3, [sl, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 80065e8:	f88a 6041 	strb.w	r6, [sl, #65]	; 0x41
  tmpcr2 = htim->Instance->CR2;
 80065ec:	6859      	ldr	r1, [r3, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ee:	42ab      	cmp	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 80065f0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr = htim->Instance->SMCR;
 80065f4:	689a      	ldr	r2, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 80065f6:	6059      	str	r1, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065f8:	f000 8576 	beq.w	80070e8 <main+0x1230>
 80065fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006600:	f000 8586 	beq.w	8007110 <main+0x1258>
 8006604:	4940      	ldr	r1, [pc, #256]	; (8006708 <main+0x850>)
 8006606:	428b      	cmp	r3, r1
 8006608:	f000 8582 	beq.w	8007110 <main+0x1258>
 800660c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006610:	428b      	cmp	r3, r1
 8006612:	f000 857d 	beq.w	8007110 <main+0x1258>
    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006616:	f88a 4041 	strb.w	r4, [sl, #65]	; 0x41
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800661a:	6a1a      	ldr	r2, [r3, #32]
 800661c:	f022 0201 	bic.w	r2, r2, #1
 8006620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006622:	6a18      	ldr	r0, [r3, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006624:	6859      	ldr	r1, [r3, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006626:	699a      	ldr	r2, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006628:	f020 0002 	bic.w	r0, r0, #2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800662c:	6059      	str	r1, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800662e:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006630:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006634:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006638:	f042 0260 	orr.w	r2, r2, #96	; 0x60
  TIMx->CCMR1 = tmpccmrx;
 800663c:	619a      	str	r2, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800663e:	6359      	str	r1, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006640:	6218      	str	r0, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006642:	699a      	ldr	r2, [r3, #24]
}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8006644:	4c2f      	ldr	r4, [pc, #188]	; (8006704 <main+0x84c>)
 8006646:	f042 0208 	orr.w	r2, r2, #8
 800664a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800664c:	699a      	ldr	r2, [r3, #24]
 800664e:	42a3      	cmp	r3, r4
 8006650:	f022 0204 	bic.w	r2, r2, #4
 8006654:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006656:	699a      	ldr	r2, [r3, #24]
 8006658:	619a      	str	r2, [r3, #24]
 800665a:	645d      	str	r5, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800665c:	f88a 1040 	strb.w	r1, [sl, #64]	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006660:	e9cd 111e 	strd	r1, r1, [sp, #120]	; 0x78
 8006664:	e9cd 1120 	strd	r1, r1, [sp, #128]	; 0x80
  if(htim->Instance==TIM1)
 8006668:	f000 8527 	beq.w	80070ba <main+0x1202>
 800666c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006670:	4b26      	ldr	r3, [pc, #152]	; (800670c <main+0x854>)
 8006672:	611a      	str	r2, [r3, #16]
 8006674:	f8da 2000 	ldr.w	r2, [sl]
 8006678:	f8da 3000 	ldr.w	r3, [sl]
  while ((HAL_GetTick() - tickstart) < wait)
 800667c:	1a9b      	subs	r3, r3, r2
 800667e:	2bc8      	cmp	r3, #200	; 0xc8
 8006680:	d9fa      	bls.n	8006678 <main+0x7c0>
    GPIOx->BSRR = GPIO_Pin;
 8006682:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006686:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800668a:	f04f 6b80 	mov.w	fp, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 800668e:	4c1f      	ldr	r4, [pc, #124]	; (800670c <main+0x854>)
{	
	LCD_RST_R
	HAL_Delay(200);
	LCD_RST_S
	
  LCD_Send_Cmd(HX8357_SLPOUT);
 8006690:	2011      	movs	r0, #17
 8006692:	6123      	str	r3, [r4, #16]
 8006694:	f7f9 fdde 	bl	8000254 <LCD_Send_Cmd>
  HAL_Delay(120);
 8006698:	2078      	movs	r0, #120	; 0x78
 800669a:	f7f9 fd59 	bl	8000150 <HAL_Delay>
	LCD_Send_Cmd(HX8357_COLMOD);
 800669e:	203a      	movs	r0, #58	; 0x3a
 80066a0:	f7f9 fdd8 	bl	8000254 <LCD_Send_Cmd>
	LCD_Send_Dat(0x55);
 80066a4:	2055      	movs	r0, #85	; 0x55
 80066a6:	f7f9 fe35 	bl	8000314 <LCD_Send_Dat>
  HAL_Delay(5);
 80066aa:	2005      	movs	r0, #5
 80066ac:	f7f9 fd50 	bl	8000150 <HAL_Delay>
  LCD_Send_Cmd(HX8357_DISPON);
 80066b0:	2029      	movs	r0, #41	; 0x29
 80066b2:	f7f9 fdcf 	bl	8000254 <LCD_Send_Cmd>
	LCD_Orientation(DEFAULT_ORIENTATION);
}

void LCD_Orientation(uint8_t orientation)
{
	LCD_Send_Cmd(HX8357_MADCTL);
 80066b6:	2036      	movs	r0, #54	; 0x36
 80066b8:	f7f9 fdcc 	bl	8000254 <LCD_Send_Cmd>
	switch (orientation)
	{
	case 0:
	if (BGR) LCD_Send_Dat(MADCTL_BGR);
 80066bc:	2008      	movs	r0, #8
 80066be:	f7f9 fe29 	bl	8000314 <LCD_Send_Dat>
	data[0] = x1 >> 8;
 80066c2:	4b13      	ldr	r3, [pc, #76]	; (8006710 <main+0x858>)
	LCD_Bus(cmd);
 80066c4:	202a      	movs	r0, #42	; 0x2a
	data[0] = x1 >> 8;
 80066c6:	931e      	str	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80066c8:	6125      	str	r5, [r4, #16]
 80066ca:	f8c4 b010 	str.w	fp, [r4, #16]
	LCD_Bus(cmd);
 80066ce:	f7f9 fd49 	bl	8000164 <LCD_Bus>
 80066d2:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80066d6:	2002      	movs	r0, #2
 80066d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066dc:	f10d 0878 	add.w	r8, sp, #120	; 0x78
 80066e0:	46c4      	mov	ip, r8
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 80066e2:	f04f 0e00 	mov.w	lr, #0
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80066e6:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 80066ea:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <main+0x85c>)
 80066ec:	4a0a      	ldr	r2, [pc, #40]	; (8006718 <main+0x860>)
 80066ee:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 80066f0:	6120      	str	r0, [r4, #16]
 80066f2:	6121      	str	r1, [r4, #16]
 80066f4:	e012      	b.n	800671c <main+0x864>
 80066f6:	bf00      	nop
 80066f8:	40021000 	.word	0x40021000
 80066fc:	e000e100 	.word	0xe000e100
 8006700:	40013800 	.word	0x40013800
 8006704:	40012c00 	.word	0x40012c00
 8006708:	40000400 	.word	0x40000400
 800670c:	40010c00 	.word	0x40010c00
 8006710:	3f010000 	.word	0x3f010000
 8006714:	40010800 	.word	0x40010800
 8006718:	40011000 	.word	0x40011000
 800671c:	2001      	movs	r0, #1
 800671e:	f81c 1b01 	ldrb.w	r1, [ip], #1
 8006722:	6120      	str	r0, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006724:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8006728:	f8c4 b010 	str.w	fp, [r4, #16]
 800672c:	611e      	str	r6, [r3, #16]
 800672e:	611d      	str	r5, [r3, #16]
 8006730:	6117      	str	r7, [r2, #16]
 8006732:	6110      	str	r0, [r2, #16]
 8006734:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8006738:	6116      	str	r6, [r2, #16]
 800673a:	6115      	str	r5, [r2, #16]
 800673c:	6110      	str	r0, [r2, #16]
 800673e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006742:	6110      	str	r0, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8006744:	09c8      	lsrs	r0, r1, #7
    GPIOx->BSRR = GPIO_Pin;
 8006746:	bf14      	ite	ne
 8006748:	2004      	movne	r0, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800674a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800674e:	6118      	str	r0, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8006750:	0648      	lsls	r0, r1, #25
    GPIOx->BSRR = GPIO_Pin;
 8006752:	bf4a      	itet	mi
 8006754:	2008      	movmi	r0, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006756:	611f      	strpl	r7, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8006758:	6118      	strmi	r0, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800675a:	0688      	lsls	r0, r1, #26
 800675c:	bf4c      	ite	mi
 800675e:	2010      	movmi	r0, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006760:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
 8006764:	6118      	str	r0, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8006766:	06c8      	lsls	r0, r1, #27
    GPIOx->BSRR = GPIO_Pin;
 8006768:	bf4c      	ite	mi
 800676a:	2020      	movmi	r0, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800676c:	f44f 1000 	movpl.w	r0, #2097152	; 0x200000
 8006770:	6118      	str	r0, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8006772:	0708      	lsls	r0, r1, #28
    GPIOx->BSRR = GPIO_Pin;
 8006774:	bf4c      	ite	mi
 8006776:	2040      	movmi	r0, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006778:	f44f 0080 	movpl.w	r0, #4194304	; 0x400000
 800677c:	6118      	str	r0, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800677e:	0748      	lsls	r0, r1, #29
    GPIOx->BSRR = GPIO_Pin;
 8006780:	bf4c      	ite	mi
 8006782:	2080      	movmi	r0, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006784:	f44f 0000 	movpl.w	r0, #8388608	; 0x800000
 8006788:	6118      	str	r0, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800678a:	0788      	lsls	r0, r1, #30
    GPIOx->BSRR = GPIO_Pin;
 800678c:	bf4c      	ite	mi
 800678e:	2010      	movmi	r0, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006790:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8006794:	07c9      	lsls	r1, r1, #31
    GPIOx->BSRR = GPIO_Pin;
 8006796:	bf4c      	ite	mi
 8006798:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800679a:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
 800679e:	6110      	str	r0, [r2, #16]
 80067a0:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 80067a2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80067a6:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 80067a8:	f10e 0e01 	add.w	lr, lr, #1
 80067ac:	fa5f fe8e 	uxtb.w	lr, lr
 80067b0:	f1be 0f04 	cmp.w	lr, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80067b4:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 80067b6:	6121      	str	r1, [r4, #16]
 80067b8:	6120      	str	r0, [r4, #16]
 80067ba:	d1af      	bne.n	800671c <main+0x864>
  data[3] = y2;
 80067bc:	23df      	movs	r3, #223	; 0xdf
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80067be:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
 80067c2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80067c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80067ca:	f8c4 b010 	str.w	fp, [r4, #16]
	LCD_Bus(cmd);
 80067ce:	202b      	movs	r0, #43	; 0x2b
 80067d0:	6123      	str	r3, [r4, #16]
 80067d2:	f7f9 fcc7 	bl	8000164 <LCD_Bus>
    GPIOx->BSRR = GPIO_Pin;
 80067d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067da:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80067dc:	f44f 3700 	mov.w	r7, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80067e0:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80067e4:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80067e8:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 80067ea:	4dc7      	ldr	r5, [pc, #796]	; (8006b08 <main+0xc50>)
 80067ec:	6121      	str	r1, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80067ee:	4ac7      	ldr	r2, [pc, #796]	; (8006b0c <main+0xc54>)
    GPIOx->BSRR = GPIO_Pin;
 80067f0:	6123      	str	r3, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80067f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067f6:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 80067fa:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 80067fe:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006802:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8006806:	f8c5 e010 	str.w	lr, [r5, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800680a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800680e:	612c      	str	r4, [r5, #16]
 8006810:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8006814:	611f      	str	r7, [r3, #16]
 8006816:	f8c3 b010 	str.w	fp, [r3, #16]
 800681a:	f8c2 c010 	str.w	ip, [r2, #16]
 800681e:	6110      	str	r0, [r2, #16]
 8006820:	6117      	str	r7, [r2, #16]
 8006822:	f8c2 b010 	str.w	fp, [r2, #16]
 8006826:	6116      	str	r6, [r2, #16]
 8006828:	6114      	str	r4, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800682a:	09cc      	lsrs	r4, r1, #7
    GPIOx->BSRR = GPIO_Pin;
 800682c:	bf18      	it	ne
 800682e:	2004      	movne	r0, #4
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8006830:	064c      	lsls	r4, r1, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006832:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8006834:	bf4a      	itet	mi
 8006836:	2008      	movmi	r0, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006838:	f8c3 c010 	strpl.w	ip, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800683c:	6118      	strmi	r0, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800683e:	0688      	lsls	r0, r1, #26
 8006840:	bf4c      	ite	mi
 8006842:	2010      	movmi	r0, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006844:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8006848:	06ce      	lsls	r6, r1, #27
 800684a:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800684c:	bf4c      	ite	mi
 800684e:	2020      	movmi	r0, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006850:	f44f 1000 	movpl.w	r0, #2097152	; 0x200000
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8006854:	070c      	lsls	r4, r1, #28
 8006856:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8006858:	bf4c      	ite	mi
 800685a:	2040      	movmi	r0, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800685c:	f44f 0080 	movpl.w	r0, #4194304	; 0x400000
 8006860:	6118      	str	r0, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8006862:	0748      	lsls	r0, r1, #29
    GPIOx->BSRR = GPIO_Pin;
 8006864:	bf4c      	ite	mi
 8006866:	2080      	movmi	r0, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006868:	f44f 0000 	movpl.w	r0, #8388608	; 0x800000
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800686c:	078e      	lsls	r6, r1, #30
 800686e:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8006870:	bf4c      	ite	mi
 8006872:	2010      	movmi	r0, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006874:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8006878:	07cc      	lsls	r4, r1, #31
    GPIOx->BSRR = GPIO_Pin;
 800687a:	bf4c      	ite	mi
 800687c:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800687e:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8006882:	2602      	movs	r6, #2
 8006884:	f44f 6480 	mov.w	r4, #1024	; 0x400
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 8006888:	f109 0901 	add.w	r9, r9, #1
 800688c:	fa5f f989 	uxtb.w	r9, r9
 8006890:	f1b9 0f04 	cmp.w	r9, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006894:	6110      	str	r0, [r2, #16]
 8006896:	6111      	str	r1, [r2, #16]
 8006898:	612f      	str	r7, [r5, #16]
    GPIOx->BSRR = GPIO_Pin;
 800689a:	612e      	str	r6, [r5, #16]
 800689c:	612c      	str	r4, [r5, #16]
 800689e:	d1ac      	bne.n	80067fa <main+0x942>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80068a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068a4:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 80068a8:	612b      	str	r3, [r5, #16]
	LCD_Bus(cmd);
 80068aa:	202c      	movs	r0, #44	; 0x2c
 80068ac:	f8c5 8010 	str.w	r8, [r5, #16]
 80068b0:	f7f9 fc58 	bl	8000164 <LCD_Bus>
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
 80068b4:	f44f 3b16 	mov.w	fp, #153600	; 0x25800
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80068b8:	612f      	str	r7, [r5, #16]
    GPIOx->BSRR = GPIO_Pin;
 80068ba:	612e      	str	r6, [r5, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80068bc:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 80068c0:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80068c4:	612c      	str	r4, [r5, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80068c6:	4a92      	ldr	r2, [pc, #584]	; (8006b10 <main+0xc58>)
    GPIOx->BSRR = GPIO_Pin;
 80068c8:	4d8f      	ldr	r5, [pc, #572]	; (8006b08 <main+0xc50>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80068ca:	4b90      	ldr	r3, [pc, #576]	; (8006b0c <main+0xc54>)
 80068cc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80068d0:	2101      	movs	r1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80068d2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80068d6:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80068da:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80068de:	6129      	str	r1, [r5, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80068e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80068e4:	f8c5 8010 	str.w	r8, [r5, #16]
    GPIOx->BSRR = GPIO_Pin;
 80068e8:	2120      	movs	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80068ea:	6117      	str	r7, [r2, #16]
 80068ec:	6114      	str	r4, [r2, #16]
 80068ee:	611e      	str	r6, [r3, #16]
 80068f0:	6118      	str	r0, [r3, #16]
 80068f2:	611f      	str	r7, [r3, #16]
 80068f4:	611c      	str	r4, [r3, #16]
 80068f6:	f8c3 9010 	str.w	r9, [r3, #16]
 80068fa:	f8c3 e010 	str.w	lr, [r3, #16]
 80068fe:	6110      	str	r0, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8006900:	2040      	movs	r0, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006902:	6116      	str	r6, [r2, #16]
 8006904:	f8c2 c010 	str.w	ip, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8006908:	6111      	str	r1, [r2, #16]
 800690a:	6110      	str	r0, [r2, #16]
 800690c:	2080      	movs	r0, #128	; 0x80
 800690e:	6110      	str	r0, [r2, #16]
 8006910:	2010      	movs	r0, #16
 8006912:	6118      	str	r0, [r3, #16]
 8006914:	6119      	str	r1, [r3, #16]
 8006916:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006918:	612f      	str	r7, [r5, #16]
    GPIOx->BSRR = GPIO_Pin;
 800691a:	6129      	str	r1, [r5, #16]
 800691c:	f44f 6180 	mov.w	r1, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8006920:	f1bb 0b01 	subs.w	fp, fp, #1
 8006924:	6129      	str	r1, [r5, #16]
 8006926:	d1d1      	bne.n	80068cc <main+0xa14>
	LCD_Rect_Fill(1, 1, 478, 318, BLACK);
 8006928:	2101      	movs	r1, #1
 800692a:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800692e:	4608      	mov	r0, r1
 8006930:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8006934:	f8cd b000 	str.w	fp, [sp]
 8006938:	f7f9 fd74 	bl	8000424 <LCD_Rect_Fill>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_48, 1, RED);
 800693c:	217f      	movs	r1, #127	; 0x7f
 800693e:	2014      	movs	r0, #20
 8006940:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8006944:	4a73      	ldr	r2, [pc, #460]	; (8006b14 <main+0xc5c>)
 8006946:	f7fd fbd9 	bl	80040fc <LCD_Font.constprop.2>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_48, 1, BLACK);
 800694a:	465b      	mov	r3, fp
 800694c:	217f      	movs	r1, #127	; 0x7f
 800694e:	2014      	movs	r0, #20
 8006950:	4a70      	ldr	r2, [pc, #448]	; (8006b14 <main+0xc5c>)
 8006952:	f7fd fbd3 	bl	80040fc <LCD_Font.constprop.2>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, RED);
 8006956:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 800695a:	217f      	movs	r1, #127	; 0x7f
 800695c:	2014      	movs	r0, #20
 800695e:	4a6e      	ldr	r2, [pc, #440]	; (8006b18 <main+0xc60>)
 8006960:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    uint16_t dt[1] = {0};
 8006964:	465e      	mov	r6, fp
	for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8006966:	f240 5722 	movw	r7, #1314	; 0x522
 800696a:	4d6c      	ldr	r5, [pc, #432]	; (8006b1c <main+0xc64>)
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, RED);
 800696c:	f7fd fbc6 	bl	80040fc <LCD_Font.constprop.2>
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8006970:	4620      	mov	r0, r4
 8006972:	a91e      	add	r1, sp, #120	; 0x78
    uint16_t dt[1] = {0};
 8006974:	f8ad 6078 	strh.w	r6, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8006978:	f7fc fb14 	bl	8002fa4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
 800697c:	1c60      	adds	r0, r4, #1
    return dt[0];
 800697e:	f8bd 8078 	ldrh.w	r8, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8006982:	b280      	uxth	r0, r0
 8006984:	a91e      	add	r1, sp, #120	; 0x78
    uint16_t dt[1] = {0};
 8006986:	f8ad 6078 	strh.w	r6, [sp, #120]	; 0x78
	for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 800698a:	3402      	adds	r4, #2
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800698c:	f7fc fb0a 	bl	8002fa4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8006990:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
	return (byteH << 8) | byteL;
 8006994:	fa5f f388 	uxtb.w	r3, r8
	for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8006998:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 800699a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 800699e:	42bc      	cmp	r4, r7
 80069a0:	f825 3b02 	strh.w	r3, [r5], #2
 80069a4:	d1e4      	bne.n	8006970 <main+0xab8>
 80069a6:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
    uint16_t dt[1] = {0};
 80069aa:	2600      	movs	r6, #0
	for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 80069ac:	f640 180a 	movw	r8, #2314	; 0x90a
 80069b0:	4f5b      	ldr	r7, [pc, #364]	; (8006b20 <main+0xc68>)
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80069b2:	4620      	mov	r0, r4
 80069b4:	a91e      	add	r1, sp, #120	; 0x78
    uint16_t dt[1] = {0};
 80069b6:	f8ad 6078 	strh.w	r6, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80069ba:	f7fc faf3 	bl	8002fa4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
 80069be:	1c60      	adds	r0, r4, #1
    return dt[0];
 80069c0:	f8bd 5078 	ldrh.w	r5, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80069c4:	b280      	uxth	r0, r0
 80069c6:	a91e      	add	r1, sp, #120	; 0x78
    uint16_t dt[1] = {0};
 80069c8:	f8ad 6078 	strh.w	r6, [sp, #120]	; 0x78
 80069cc:	3402      	adds	r4, #2
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80069ce:	f7fc fae9 	bl	8002fa4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 80069d2:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
	return (byteH << 8) | byteL;
 80069d6:	b2eb      	uxtb	r3, r5
	for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 80069d8:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 80069da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 80069de:	4544      	cmp	r4, r8
 80069e0:	f827 3b02 	strh.w	r3, [r7], #2
 80069e4:	d1e5      	bne.n	80069b2 <main+0xafa>
 80069e6:	f640 34b8 	movw	r4, #3000	; 0xbb8
    uint16_t dt[1] = {0};
 80069ea:	2600      	movs	r6, #0
	for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 80069ec:	f640 48f2 	movw	r8, #3314	; 0xcf2
 80069f0:	4f4c      	ldr	r7, [pc, #304]	; (8006b24 <main+0xc6c>)
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80069f2:	4620      	mov	r0, r4
 80069f4:	a91e      	add	r1, sp, #120	; 0x78
    uint16_t dt[1] = {0};
 80069f6:	f8ad 6078 	strh.w	r6, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80069fa:	f7fc fad3 	bl	8002fa4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
 80069fe:	1c60      	adds	r0, r4, #1
    return dt[0];
 8006a00:	f8bd 5078 	ldrh.w	r5, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8006a04:	b280      	uxth	r0, r0
 8006a06:	a91e      	add	r1, sp, #120	; 0x78
    uint16_t dt[1] = {0};
 8006a08:	f8ad 6078 	strh.w	r6, [sp, #120]	; 0x78
 8006a0c:	3402      	adds	r4, #2
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8006a0e:	f7fc fac9 	bl	8002fa4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8006a12:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
	return (byteH << 8) | byteL;
 8006a16:	b2eb      	uxtb	r3, r5
	for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8006a18:	b2a4      	uxth	r4, r4
	return (byteH << 8) | byteL;
 8006a1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8006a1e:	4544      	cmp	r4, r8
 8006a20:	f827 3b02 	strh.w	r3, [r7], #2
 8006a24:	d1e5      	bne.n	80069f2 <main+0xb3a>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, BLACK);
 8006a26:	2300      	movs	r3, #0
 8006a28:	217f      	movs	r1, #127	; 0x7f
 8006a2a:	2014      	movs	r0, #20
 8006a2c:	4a3a      	ldr	r2, [pc, #232]	; (8006b18 <main+0xc60>)
 8006a2e:	f7fd fb65 	bl	80040fc <LCD_Font.constprop.2>
}

void BME280_Init(void) {
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 8006a32:	f240 53f2 	movw	r3, #1522	; 0x5f2
    cmd[1] = 0x05; // Humidity oversampling x16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006a36:	2202      	movs	r2, #2
 8006a38:	20ec      	movs	r0, #236	; 0xec
 8006a3a:	a91e      	add	r1, sp, #120	; 0x78
    cmd[0] = 0xF2; // ctrl_hum
 8006a3c:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006a40:	f7fd f860 	bl	8003b04 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF4; // ctrl_meas
 8006a44:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006a48:	2202      	movs	r2, #2
 8006a4a:	20ec      	movs	r0, #236	; 0xec
 8006a4c:	a91e      	add	r1, sp, #120	; 0x78
    cmd[0] = 0xF4; // ctrl_meas
 8006a4e:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006a52:	f7fd f857 	bl	8003b04 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF5; // config
 8006a56:	f24a 03f5 	movw	r3, #41205	; 0xa0f5
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	20ec      	movs	r0, #236	; 0xec
 8006a5e:	a91e      	add	r1, sp, #120	; 0x78
    cmd[0] = 0xF5; // config
 8006a60:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006a64:	f7fd f84e 	bl	8003b04 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0x88; // read dig_T regs
 8006a68:	2388      	movs	r3, #136	; 0x88
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	20ec      	movs	r0, #236	; 0xec
 8006a6e:	a91e      	add	r1, sp, #120	; 0x78
    cmd[0] = 0x88; // read dig_T regs
 8006a70:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006a74:	f7fd f846 	bl	8003b04 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 8006a78:	2206      	movs	r2, #6
 8006a7a:	20ec      	movs	r0, #236	; 0xec
 8006a7c:	a91e      	add	r1, sp, #120	; 0x78
 8006a7e:	f7fc fe0b 	bl	8003698 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_T1 = (cmd[1] << 8) | cmd[0];
    dig_T2 = (cmd[3] << 8) | cmd[2];
    dig_T3 = (cmd[5] << 8) | cmd[4];

    cmd[0] = 0x8E; // read dig_P regs
 8006a82:	238e      	movs	r3, #142	; 0x8e
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8006a84:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    cmd[0] = 0x8E; // read dig_P regs
 8006a88:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8006a8c:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006a90:	20ec      	movs	r0, #236	; 0xec
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8006a92:	f8aa 3642 	strh.w	r3, [sl, #1602]	; 0x642
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8006a96:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8006a9a:	f8aa 2640 	strh.w	r2, [sl, #1600]	; 0x640
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006a9e:	a91e      	add	r1, sp, #120	; 0x78
 8006aa0:	2201      	movs	r2, #1
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8006aa2:	f8aa 3644 	strh.w	r3, [sl, #1604]	; 0x644
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006aa6:	f7fd f82d 	bl	8003b04 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 8006aaa:	2212      	movs	r2, #18
 8006aac:	20ec      	movs	r0, #236	; 0xec
 8006aae:	a91e      	add	r1, sp, #120	; 0x78
 8006ab0:	f7fc fdf2 	bl	8003698 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    dig_P6 = (cmd[11] << 8) | cmd[10];
    dig_P7 = (cmd[13] << 8) | cmd[12];
    dig_P8 = (cmd[15] << 8) | cmd[14];
    dig_P9 = (cmd[17] << 8) | cmd[16];

    cmd[0] = 0xA1; // read dig_H regs
 8006ab4:	23a1      	movs	r3, #161	; 0xa1
    dig_P1 = (cmd[1] << 8) | cmd[0];
 8006ab6:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    cmd[0] = 0xA1; // read dig_H regs
 8006aba:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8006abe:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006ac2:	20ec      	movs	r0, #236	; 0xec
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8006ac4:	f8aa 3648 	strh.w	r3, [sl, #1608]	; 0x648
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8006ac8:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    dig_P1 = (cmd[1] << 8) | cmd[0];
 8006acc:	f8aa 2646 	strh.w	r2, [sl, #1606]	; 0x646
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8006ad0:	f8aa 364a 	strh.w	r3, [sl, #1610]	; 0x64a
    dig_P4 = (cmd[7] << 8) | cmd[6];
 8006ad4:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006ad8:	2201      	movs	r2, #1
    dig_P4 = (cmd[7] << 8) | cmd[6];
 8006ada:	f8aa 364c 	strh.w	r3, [sl, #1612]	; 0x64c
    dig_P5 = (cmd[9] << 8) | cmd[8];
 8006ade:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006ae2:	a91e      	add	r1, sp, #120	; 0x78
    dig_P5 = (cmd[9] << 8) | cmd[8];
 8006ae4:	f8aa 364e 	strh.w	r3, [sl, #1614]	; 0x64e
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8006ae8:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 8006aec:	f8aa 3650 	strh.w	r3, [sl, #1616]	; 0x650
    dig_P7 = (cmd[13] << 8) | cmd[12];
 8006af0:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 8006af4:	f8aa 3652 	strh.w	r3, [sl, #1618]	; 0x652
    dig_P8 = (cmd[15] << 8) | cmd[14];
 8006af8:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
 8006afc:	f8aa 3654 	strh.w	r3, [sl, #1620]	; 0x654
    dig_P9 = (cmd[17] << 8) | cmd[16];
 8006b00:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8006b04:	e010      	b.n	8006b28 <main+0xc70>
 8006b06:	bf00      	nop
 8006b08:	40010c00 	.word	0x40010c00
 8006b0c:	40011000 	.word	0x40011000
 8006b10:	40010800 	.word	0x40010800
 8006b14:	0801de2c 	.word	0x0801de2c
 8006b18:	0801de3c 	.word	0x0801de3c
 8006b1c:	20000338 	.word	0x20000338
 8006b20:	20000474 	.word	0x20000474
 8006b24:	200005b0 	.word	0x200005b0
 8006b28:	f8aa 3656 	strh.w	r3, [sl, #1622]	; 0x656
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006b2c:	f7fc ffea 	bl	8003b04 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006b30:	2201      	movs	r2, #1
 8006b32:	20ec      	movs	r0, #236	; 0xec
 8006b34:	a91e      	add	r1, sp, #120	; 0x78
 8006b36:	f7fc fdaf 	bl	8003698 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    cmd[1] = 0xE1; // read dig_H regs
 8006b3a:	23e1      	movs	r3, #225	; 0xe1

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	20ec      	movs	r0, #236	; 0xec
 8006b40:	f10d 0179 	add.w	r1, sp, #121	; 0x79
    cmd[1] = 0xE1; // read dig_H regs
 8006b44:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8006b48:	f7fc ffdc 	bl	8003b04 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 8006b4c:	2207      	movs	r2, #7
 8006b4e:	20ec      	movs	r0, #236	; 0xec
 8006b50:	f10d 0179 	add.w	r1, sp, #121	; 0x79
 8006b54:	f7fc fda0 	bl	8003698 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_H1 = cmd[0];
 8006b58:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
    dig_H2 = (cmd[2] << 8) | cmd[1];
    dig_H3 = cmd[3];
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8006b5c:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
    dig_H1 = cmd[0];
 8006b60:	f8aa 2658 	strh.w	r2, [sl, #1624]	; 0x658
    dig_H2 = (cmd[2] << 8) | cmd[1];
 8006b64:	f8bd 2079 	ldrh.w	r2, [sp, #121]	; 0x79
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8006b68:	f89d 007c 	ldrb.w	r0, [sp, #124]	; 0x7c
    dig_H2 = (cmd[2] << 8) | cmd[1];
 8006b6c:	f8aa 265a 	strh.w	r2, [sl, #1626]	; 0x65a
    dig_H3 = cmd[3];
 8006b70:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8006b74:	f89d 107e 	ldrb.w	r1, [sp, #126]	; 0x7e
    dig_H3 = cmd[3];
 8006b78:	f8aa 265c 	strh.w	r2, [sl, #1628]	; 0x65c
    dig_H6 = cmd[7];
 8006b7c:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8006b80:	f8aa 2662 	strh.w	r2, [sl, #1634]	; 0x662
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8006b84:	f003 020f 	and.w	r2, r3, #15
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8006b88:	091b      	lsrs	r3, r3, #4
 8006b8a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8006b8e:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8006b92:	f8aa 3660 	strh.w	r3, [sl, #1632]	; 0x660
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8006b96:	f8aa 265e 	strh.w	r2, [sl, #1630]	; 0x65e
	DS3231_Update();
 8006b9a:	f7fd f901 	bl	8003da0 <DS3231_Update>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b9e:	f89a 3042 	ldrb.w	r3, [sl, #66]	; 0x42
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d121      	bne.n	8006bea <main+0xd32>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	f88a 3042 	strb.w	r3, [sl, #66]	; 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bac:	f8da 3004 	ldr.w	r3, [sl, #4]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bb0:	49c5      	ldr	r1, [pc, #788]	; (8006ec8 <main+0x1010>)
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bb2:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bb4:	428b      	cmp	r3, r1
  TIMx->CCER &= ~tmp;
 8006bb6:	f022 0201 	bic.w	r2, r2, #1
 8006bba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bbc:	6a1a      	ldr	r2, [r3, #32]
 8006bbe:	f042 0201 	orr.w	r2, r2, #1
 8006bc2:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bc4:	f000 8375 	beq.w	80072b2 <main+0x13fa>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bcc:	f000 8375 	beq.w	80072ba <main+0x1402>
 8006bd0:	4abe      	ldr	r2, [pc, #760]	; (8006ecc <main+0x1014>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	f000 8371 	beq.w	80072ba <main+0x1402>
 8006bd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	f000 836c 	beq.w	80072ba <main+0x1402>
    __HAL_TIM_ENABLE(htim);
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	f042 0201 	orr.w	r2, r2, #1
 8006be8:	601a      	str	r2, [r3, #0]
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bea:	f89a 3106 	ldrb.w	r3, [sl, #262]	; 0x106
 8006bee:	2b20      	cmp	r3, #32
 8006bf0:	d122      	bne.n	8006c38 <main+0xd80>
    __HAL_LOCK(huart);
 8006bf2:	f89a 3104 	ldrb.w	r3, [sl, #260]	; 0x104
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d01e      	beq.n	8006c38 <main+0xd80>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfa:	2300      	movs	r3, #0
  huart->RxXferSize = Size;
 8006bfc:	2201      	movs	r2, #1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bfe:	2022      	movs	r0, #34	; 0x22
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006c00:	f8da 10c8 	ldr.w	r1, [sl, #200]	; 0xc8
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c04:	f8ca 30f8 	str.w	r3, [sl, #248]	; 0xf8
  __HAL_UNLOCK(huart);
 8006c08:	f88a 3104 	strb.w	r3, [sl, #260]	; 0x104
  huart->RxXferCount = Size;
 8006c0c:	f8aa 20f6 	strh.w	r2, [sl, #246]	; 0xf6
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c10:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c14:	f88a 0106 	strb.w	r0, [sl, #262]	; 0x106
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006c18:	68cb      	ldr	r3, [r1, #12]
  huart->pRxBuffPtr = pData;
 8006c1a:	4cad      	ldr	r4, [pc, #692]	; (8006ed0 <main+0x1018>)
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  huart->pRxBuffPtr = pData;
 8006c20:	f8ca 40f0 	str.w	r4, [sl, #240]	; 0xf0
  huart->RxXferSize = Size;
 8006c24:	f8aa 20f4 	strh.w	r2, [sl, #244]	; 0xf4
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006c28:	60cb      	str	r3, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006c2a:	694b      	ldr	r3, [r1, #20]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c30:	68cb      	ldr	r3, [r1, #12]
 8006c32:	f043 0320 	orr.w	r3, r3, #32
 8006c36:	60cb      	str	r3, [r1, #12]
	uint8_t uartTransmit[] = "UART OK\r\n";
 8006c38:	4aa6      	ldr	r2, [pc, #664]	; (8006ed4 <main+0x101c>)
 8006c3a:	ab17      	add	r3, sp, #92	; 0x5c
 8006c3c:	ca07      	ldmia	r2, {r0, r1, r2}
  if (huart->gState == HAL_UART_STATE_READY)
 8006c3e:	f89a 4105 	ldrb.w	r4, [sl, #261]	; 0x105
 8006c42:	c303      	stmia	r3!, {r0, r1}
 8006c44:	2c20      	cmp	r4, #32
 8006c46:	801a      	strh	r2, [r3, #0]
 8006c48:	d107      	bne.n	8006c5a <main+0xda2>
    __HAL_LOCK(huart);
 8006c4a:	f89a 3104 	ldrb.w	r3, [sl, #260]	; 0x104
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d003      	beq.n	8006c5a <main+0xda2>
 8006c52:	210a      	movs	r1, #10
 8006c54:	a817      	add	r0, sp, #92	; 0x5c
 8006c56:	f7fd f92b 	bl	8003eb0 <HAL_UART_Transmit.part.0.constprop.0.isra.0>
	uint8_t uartTransmitDMA[] = "UART DMA OK\r\n";
 8006c5a:	4b9f      	ldr	r3, [pc, #636]	; (8006ed8 <main+0x1020>)
 8006c5c:	ac1a      	add	r4, sp, #104	; 0x68
 8006c5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c60:	c407      	stmia	r4!, {r0, r1, r2}
  if (huart->gState == HAL_UART_STATE_READY)
 8006c62:	f89a 5105 	ldrb.w	r5, [sl, #261]	; 0x105
 8006c66:	8023      	strh	r3, [r4, #0]
 8006c68:	2d20      	cmp	r5, #32
 8006c6a:	d154      	bne.n	8006d16 <main+0xe5e>
    __HAL_LOCK(huart);
 8006c6c:	f89a 3104 	ldrb.w	r3, [sl, #260]	; 0x104
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d050      	beq.n	8006d16 <main+0xe5e>
    huart->pTxBuffPtr = pData;
 8006c74:	ab1a      	add	r3, sp, #104	; 0x68
    huart->TxXferSize = Size;
 8006c76:	250e      	movs	r5, #14
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c78:	2100      	movs	r1, #0
    huart->pTxBuffPtr = pData;
 8006c7a:	f8ca 30e8 	str.w	r3, [sl, #232]	; 0xe8
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c7e:	f04f 0c21 	mov.w	ip, #33	; 0x21
    __HAL_LOCK(huart);
 8006c82:	2301      	movs	r3, #1
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006c84:	f8da 40fc 	ldr.w	r4, [sl, #252]	; 0xfc
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006c88:	4894      	ldr	r0, [pc, #592]	; (8006edc <main+0x1024>)
    huart->TxXferCount = Size;
 8006c8a:	f8aa 50ee 	strh.w	r5, [sl, #238]	; 0xee
    __HAL_LOCK(huart);
 8006c8e:	f88a 3104 	strb.w	r3, [sl, #260]	; 0x104
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c92:	f8ca 1108 	str.w	r1, [sl, #264]	; 0x108
    huart->TxXferSize = Size;
 8006c96:	f8aa 50ec 	strh.w	r5, [sl, #236]	; 0xec
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c9a:	f88a c105 	strb.w	ip, [sl, #261]	; 0x105
    huart->hdmatx->XferAbortCallback = NULL;
 8006c9e:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
  __HAL_LOCK(hdma);
 8006ca2:	f894 0020 	ldrb.w	r0, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006ca6:	4f8e      	ldr	r7, [pc, #568]	; (8006ee0 <main+0x1028>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006ca8:	4e8e      	ldr	r6, [pc, #568]	; (8006ee4 <main+0x102c>)
 8006caa:	4298      	cmp	r0, r3
 8006cac:	e9c4 760a 	strd	r7, r6, [r4, #40]	; 0x28
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006cb0:	f8da 20c8 	ldr.w	r2, [sl, #200]	; 0xc8
 8006cb4:	d025      	beq.n	8006d02 <main+0xe4a>
 8006cb6:	f884 3020 	strb.w	r3, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8006cba:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	f040 8302 	bne.w	80072c8 <main+0x1410>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006cc4:	63a1      	str	r1, [r4, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 8006cc6:	2102      	movs	r1, #2
    __HAL_DMA_DISABLE(hdma);
 8006cc8:	6820      	ldr	r0, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8006cca:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006cce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006cd0:	408b      	lsls	r3, r1
    __HAL_DMA_DISABLE(hdma);
 8006cd2:	6801      	ldr	r1, [r0, #0]
 8006cd4:	f021 0101 	bic.w	r1, r1, #1
 8006cd8:	6001      	str	r1, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006cda:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006cdc:	604b      	str	r3, [r1, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006cde:	6861      	ldr	r1, [r4, #4]
 8006ce0:	1d13      	adds	r3, r2, #4
 8006ce2:	2910      	cmp	r1, #16
  hdma->Instance->CNDTR = DataLength;
 8006ce4:	6045      	str	r5, [r0, #4]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8006ce6:	bf13      	iteet	ne
 8006ce8:	a91a      	addne	r1, sp, #104	; 0x68
    hdma->Instance->CPAR = DstAddress;
 8006cea:	6083      	streq	r3, [r0, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006cec:	ab1a      	addeq	r3, sp, #104	; 0x68
    hdma->Instance->CPAR = SrcAddress;
 8006cee:	6081      	strne	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8006cf0:	60c3      	str	r3, [r0, #12]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cf2:	6803      	ldr	r3, [r0, #0]
 8006cf4:	f043 030e 	orr.w	r3, r3, #14
 8006cf8:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 8006cfa:	6803      	ldr	r3, [r0, #0]
 8006cfc:	f043 0301 	orr.w	r3, r3, #1
 8006d00:	6003      	str	r3, [r0, #0]
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006d02:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8006d06:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(huart);
 8006d08:	2300      	movs	r3, #0
 8006d0a:	f88a 3104 	strb.w	r3, [sl, #260]	; 0x104
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d0e:	6953      	ldr	r3, [r2, #20]
 8006d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d14:	6153      	str	r3, [r2, #20]
		if (rx_index != 0) {
 8006d16:	f89a 3665 	ldrb.w	r3, [sl, #1637]	; 0x665
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f040 8200 	bne.w	8007120 <main+0x1268>
		DS3231_Update();
 8006d20:	f7fd f83e 	bl	8003da0 <DS3231_Update>

uint8_t DS3231_getSec(void) {
    return bcdToDec(rtcBuffer[0]);
 8006d24:	f89a 60a0 	ldrb.w	r6, [sl, #160]	; 0xa0
}

uint8_t DS3231_getMin(void) {
    return bcdToDec(rtcBuffer[1]);
 8006d28:	f89a 50a1 	ldrb.w	r5, [sl, #161]	; 0xa1
    return ((val / 16 * 10) + (val % 16));
 8006d2c:	0937      	lsrs	r7, r6, #4
 8006d2e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8006d32:	f006 060f 	and.w	r6, r6, #15
 8006d36:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 8006d3a:	b2f7      	uxtb	r7, r6
 8006d3c:	092e      	lsrs	r6, r5, #4
 8006d3e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8006d42:	f005 050f 	and.w	r5, r5, #15
}

uint8_t DS3231_getHrs(void) {
    return bcdToDec(rtcBuffer[2]);
 8006d46:	f89a 40a2 	ldrb.w	r4, [sl, #162]	; 0xa2
    return ((val / 16 * 10) + (val % 16));
 8006d4a:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 8006d4e:	b2ed      	uxtb	r5, r5
 8006d50:	9506      	str	r5, [sp, #24]
		rtcMin = DS3231_getMin();
 8006d52:	f88a 5667 	strb.w	r5, [sl, #1639]	; 0x667
 8006d56:	0925      	lsrs	r5, r4, #4
}

uint8_t DS3231_getDay(void) {
    return bcdToDec(rtcBuffer[3]);
 8006d58:	f89a 00a3 	ldrb.w	r0, [sl, #163]	; 0xa3
    return ((val / 16 * 10) + (val % 16));
 8006d5c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006d60:	f004 040f 	and.w	r4, r4, #15
 8006d64:	eb04 0445 	add.w	r4, r4, r5, lsl #1
		rtcHrs = DS3231_getHrs();
 8006d68:	f88a 4134 	strb.w	r4, [sl, #308]	; 0x134
 8006d6c:	0904      	lsrs	r4, r0, #4
}

uint8_t DS3231_getDate(void) {
    return bcdToDec(rtcBuffer[4]);
 8006d6e:	f89a 10a4 	ldrb.w	r1, [sl, #164]	; 0xa4
    return ((val / 16 * 10) + (val % 16));
 8006d72:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8006d76:	f000 000f 	and.w	r0, r0, #15
 8006d7a:	eb00 0044 	add.w	r0, r0, r4, lsl #1
		rtcDay = DS3231_getDay();
 8006d7e:	f88a 0668 	strb.w	r0, [sl, #1640]	; 0x668
 8006d82:	0908      	lsrs	r0, r1, #4
}

uint8_t DS3231_getMonth(void) {
    return bcdToDec(rtcBuffer[5]);
 8006d84:	f89a 20a5 	ldrb.w	r2, [sl, #165]	; 0xa5
    return ((val / 16 * 10) + (val % 16));
 8006d88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006d8c:	f001 010f 	and.w	r1, r1, #15
 8006d90:	eb01 0140 	add.w	r1, r1, r0, lsl #1
		rtcDate = DS3231_getDate();
 8006d94:	f88a 1669 	strb.w	r1, [sl, #1641]	; 0x669
 8006d98:	0911      	lsrs	r1, r2, #4
}

uint8_t DS3231_getYear(void) {
    return bcdToDec(rtcBuffer[6]);
 8006d9a:	f89a 30a6 	ldrb.w	r3, [sl, #166]	; 0xa6
    return ((val / 16 * 10) + (val % 16));
 8006d9e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006da2:	f002 020f 	and.w	r2, r2, #15
 8006da6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
		rtcMonth = DS3231_getMonth();
 8006daa:	f88a 266a 	strb.w	r2, [sl, #1642]	; 0x66a
 8006dae:	091a      	lsrs	r2, r3, #4
 8006db0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006db4:	f003 030f 	and.w	r3, r3, #15
 8006db8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
		rtcYear = DS3231_getYear();
 8006dbc:	f88a 366b 	strb.w	r3, [sl, #1643]	; 0x66b
		if (rtcSecLast != rtcSec) {
 8006dc0:	4b49      	ldr	r3, [pc, #292]	; (8006ee8 <main+0x1030>)
 8006dc2:	9707      	str	r7, [sp, #28]
 8006dc4:	7a1b      	ldrb	r3, [r3, #8]
		rtcSec = DS3231_getSec();
 8006dc6:	f88a 7666 	strb.w	r7, [sl, #1638]	; 0x666
		if (rtcSecLast != rtcSec) {
 8006dca:	42bb      	cmp	r3, r7
 8006dcc:	d0a3      	beq.n	8006d16 <main+0xe5e>
	b_ = radius;
 8006dce:	2308      	movs	r3, #8
 8006dd0:	f06f 0006 	mvn.w	r0, #6
 8006dd4:	f04f 0900 	mov.w	r9, #0
 8006dd8:	e9cd 3003 	strd	r3, r0, [sp, #12]
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8006ddc:	4e43      	ldr	r6, [pc, #268]	; (8006eec <main+0x1034>)
 8006dde:	e00f      	b.n	8006e00 <main+0xf48>
			P = (P + 5) + (2 * (a_ - b_));
 8006de0:	9903      	ldr	r1, [sp, #12]
 8006de2:	9b04      	ldr	r3, [sp, #16]
 8006de4:	eba9 0201 	sub.w	r2, r9, r1
 8006de8:	3305      	adds	r3, #5
 8006dea:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8006dee:	9304      	str	r3, [sp, #16]
 8006df0:	1e4b      	subs	r3, r1, #1
 8006df2:	f109 0901 	add.w	r9, r9, #1
 8006df6:	9303      	str	r3, [sp, #12]
	while (a_ <= b_)
 8006df8:	9b03      	ldr	r3, [sp, #12]
 8006dfa:	4599      	cmp	r9, r3
 8006dfc:	f300 8267 	bgt.w	80072ce <main+0x1416>
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8006e00:	2301      	movs	r3, #1
 8006e02:	fa1f f489 	uxth.w	r4, r9
 8006e06:	f104 08ac 	add.w	r8, r4, #172	; 0xac
 8006e0a:	fa1f f288 	uxth.w	r2, r8
 8006e0e:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 8006e12:	4610      	mov	r0, r2
 8006e14:	f108 0723 	add.w	r7, r8, #35	; 0x23
 8006e18:	b2bf      	uxth	r7, r7
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	9205      	str	r2, [sp, #20]
 8006e1e:	9600      	str	r6, [sp, #0]
 8006e20:	461a      	mov	r2, r3
 8006e22:	f7f9 faff 	bl	8000424 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8006e26:	2301      	movs	r3, #1
 8006e28:	f104 0523 	add.w	r5, r4, #35	; 0x23
 8006e2c:	f108 0bac 	add.w	fp, r8, #172	; 0xac
 8006e30:	fa1f fb8b 	uxth.w	fp, fp
 8006e34:	b2ad      	uxth	r5, r5
 8006e36:	4629      	mov	r1, r5
 8006e38:	4658      	mov	r0, fp
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	9600      	str	r6, [sp, #0]
 8006e3e:	f7f9 faf1 	bl	8000424 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8006e42:	2301      	movs	r3, #1
 8006e44:	4639      	mov	r1, r7
 8006e46:	f1c4 07ac 	rsb	r7, r4, #172	; 0xac
 8006e4a:	b2bf      	uxth	r7, r7
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	4638      	mov	r0, r7
 8006e50:	9600      	str	r6, [sp, #0]
 8006e52:	f7f9 fae7 	bl	8000424 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8006e56:	2301      	movs	r3, #1
 8006e58:	4629      	mov	r1, r5
 8006e5a:	f1c8 05ac 	rsb	r5, r8, #172	; 0xac
 8006e5e:	b2ad      	uxth	r5, r5
 8006e60:	461a      	mov	r2, r3
 8006e62:	4628      	mov	r0, r5
 8006e64:	9600      	str	r6, [sp, #0]
 8006e66:	f7f9 fadd 	bl	8000424 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	f1c4 0423 	rsb	r4, r4, #35	; 0x23
 8006e70:	b2a4      	uxth	r4, r4
 8006e72:	4658      	mov	r0, fp
 8006e74:	461a      	mov	r2, r3
 8006e76:	4621      	mov	r1, r4
 8006e78:	9600      	str	r6, [sp, #0]
 8006e7a:	f7f9 fad3 	bl	8000424 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8006e7e:	2301      	movs	r3, #1
 8006e80:	f1c8 0b23 	rsb	fp, r8, #35	; 0x23
 8006e84:	fa1f fb8b 	uxth.w	fp, fp
 8006e88:	461a      	mov	r2, r3
 8006e8a:	4659      	mov	r1, fp
 8006e8c:	9805      	ldr	r0, [sp, #20]
 8006e8e:	9600      	str	r6, [sp, #0]
 8006e90:	f7f9 fac8 	bl	8000424 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8006e94:	2301      	movs	r3, #1
 8006e96:	4659      	mov	r1, fp
 8006e98:	461a      	mov	r2, r3
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	9600      	str	r6, [sp, #0]
 8006e9e:	f7f9 fac1 	bl	8000424 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	4621      	mov	r1, r4
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	9600      	str	r6, [sp, #0]
 8006eac:	f7f9 faba 	bl	8000424 <LCD_Rect_Fill>
		if (P < 0)
 8006eb0:	9b04      	ldr	r3, [sp, #16]
 8006eb2:	2b00      	cmp	r3, #0
			P = (P + 3) + (2 * a_);
 8006eb4:	f103 0303 	add.w	r3, r3, #3
		if (P < 0)
 8006eb8:	da92      	bge.n	8006de0 <main+0xf28>
			P = (P + 3) + (2 * a_);
 8006eba:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 8006ebe:	9304      	str	r3, [sp, #16]
 8006ec0:	f109 0901 	add.w	r9, r9, #1
 8006ec4:	e798      	b.n	8006df8 <main+0xf40>
 8006ec6:	bf00      	nop
 8006ec8:	40012c00 	.word	0x40012c00
 8006ecc:	40000400 	.word	0x40000400
 8006ed0:	20000864 	.word	0x20000864
 8006ed4:	0801de74 	.word	0x0801de74
 8006ed8:	0801de80 	.word	0x0801de80
 8006edc:	08000f7d 	.word	0x08000f7d
 8006ee0:	08001215 	.word	0x08001215
 8006ee4:	08001239 	.word	0x08001239
 8006ee8:	20000000 	.word	0x20000000
 8006eec:	00ffa500 	.word	0x00ffa500
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006ef0:	2419      	movs	r4, #25
 8006ef2:	fb07 f404 	mul.w	r4, r7, r4
 8006ef6:	1e55      	subs	r5, r2, #1
 8006ef8:	fbb5 f4f4 	udiv	r4, r5, r4
 8006efc:	0524      	lsls	r4, r4, #20
 8006efe:	f514 1f80 	cmn.w	r4, #1048576	; 0x100000
 8006f02:	bf14      	ite	ne
 8006f04:	2400      	movne	r4, #0
 8006f06:	2401      	moveq	r4, #1
 8006f08:	0079      	lsls	r1, r7, #1
 8006f0a:	f7ff ba33 	b.w	8006374 <main+0x4bc>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006f0e:	4b9a      	ldr	r3, [pc, #616]	; (8007178 <main+0x12c0>)
 8006f10:	fb03 f606 	mul.w	r6, r3, r6
 8006f14:	f7ff b888 	b.w	8006028 <main+0x170>
 8006f18:	2204      	movs	r2, #4
 8006f1a:	f7ff ba3a 	b.w	8006392 <main+0x4da>
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f7ff ba37 	b.w	8006392 <main+0x4da>
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006f24:	2203      	movs	r2, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f26:	9420      	str	r4, [sp, #128]	; 0x80
    huart->Lock = HAL_UNLOCKED;
 8006f28:	f88a 4104 	strb.w	r4, [sl, #260]	; 0x104
    __HAL_RCC_USART1_CLK_ENABLE();
 8006f2c:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f2e:	4893      	ldr	r0, [pc, #588]	; (800717c <main+0x12c4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8006f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f34:	61bb      	str	r3, [r7, #24]
 8006f36:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f38:	a91e      	add	r1, sp, #120	; 0x78
    __HAL_RCC_USART1_CLK_ENABLE();
 8006f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f3e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	f043 0304 	orr.w	r3, r3, #4
 8006f48:	61bb      	str	r3, [r7, #24]
 8006f4a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006f4c:	9221      	str	r2, [sp, #132]	; 0x84
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f4e:	f003 0304 	and.w	r3, r3, #4
 8006f52:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006f54:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f58:	9b12      	ldr	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f60:	f7fa f85a 	bl	8001018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006f64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f68:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f6a:	2710      	movs	r7, #16
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006f6c:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f70:	9420      	str	r4, [sp, #128]	; 0x80
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f72:	f7fa f851 	bl	8001018 <HAL_GPIO_Init>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006f76:	f8ca 55b4 	str.w	r5, [sl, #1460]	; 0x5b4
  hdma->Lock = HAL_UNLOCKED;
 8006f7a:	f44f 7080 	mov.w	r0, #256	; 0x100
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006f7e:	2580      	movs	r5, #128	; 0x80
  hdma->DmaBaseAddress = DMA1;
 8006f80:	4b7f      	ldr	r3, [pc, #508]	; (8007180 <main+0x12c8>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f82:	f8ca 457c 	str.w	r4, [sl, #1404]	; 0x57c
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f86:	f8ca 4584 	str.w	r4, [sl, #1412]	; 0x584
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f8a:	f8ca 4588 	str.w	r4, [sl, #1416]	; 0x588
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006f8e:	f8ca 458c 	str.w	r4, [sl, #1420]	; 0x58c
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006f92:	f8ca 4590 	str.w	r4, [sl, #1424]	; 0x590

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f96:	f8ca 45bc 	str.w	r4, [sl, #1468]	; 0x5bc
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f9a:	f8ca 45c0 	str.w	r4, [sl, #1472]	; 0x5c0
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f9e:	f8ca 45c8 	str.w	r4, [sl, #1480]	; 0x5c8
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006fa2:	f8ca 45cc 	str.w	r4, [sl, #1484]	; 0x5cc
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006fa6:	f8ca 45d0 	str.w	r4, [sl, #1488]	; 0x5d0
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006faa:	f8ca 45d4 	str.w	r4, [sl, #1492]	; 0x5d4
  tmp = hdma->Instance->CCR;
 8006fae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006fb0:	4974      	ldr	r1, [pc, #464]	; (8007184 <main+0x12cc>)
  hdma->DmaBaseAddress = DMA1;
 8006fb2:	f8ca 35b0 	str.w	r3, [sl, #1456]	; 0x5b0
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006fb6:	400a      	ands	r2, r1
  tmp |=  hdma->Init.Direction        |
 8006fb8:	f042 0290 	orr.w	r2, r2, #144	; 0x90
  hdma->DmaBaseAddress = DMA1;
 8006fbc:	f8ca 35f4 	str.w	r3, [sl, #1524]	; 0x5f4
  hdma->Instance->CCR = tmp;
 8006fc0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fc2:	f8ca 45ac 	str.w	r4, [sl, #1452]	; 0x5ac
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006fc6:	f8ca 7578 	str.w	r7, [sl, #1400]	; 0x578
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006fca:	f8ca 75f8 	str.w	r7, [sl, #1528]	; 0x5f8
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006fce:	f8ca 5580 	str.w	r5, [sl, #1408]	; 0x580
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006fd2:	f8ca 55c4 	str.w	r5, [sl, #1476]	; 0x5c4
  hdma->Lock = HAL_UNLOCKED;
 8006fd6:	f8aa 0594 	strh.w	r0, [sl, #1428]	; 0x594
 8006fda:	f8aa 05d8 	strh.w	r0, [sl, #1496]	; 0x5d8
  tmp = hdma->Instance->CCR;
 8006fde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006fe0:	400a      	ands	r2, r1
  tmp |=  hdma->Init.Direction        |
 8006fe2:	432a      	orrs	r2, r5
  hdma->Instance->CCR = tmp;
 8006fe4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8006fe6:	4a68      	ldr	r2, [pc, #416]	; (8007188 <main+0x12d0>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006fe8:	4b68      	ldr	r3, [pc, #416]	; (800718c <main+0x12d4>)
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8006fea:	f8ca 2574 	str.w	r2, [sl, #1396]	; 0x574
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006fee:	3214      	adds	r2, #20
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006ff0:	f8ca 30fc 	str.w	r3, [sl, #252]	; 0xfc
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006ff4:	f8ca 25b8 	str.w	r2, [sl, #1464]	; 0x5b8
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006ff8:	f2a3 42ac 	subw	r2, r3, #1196	; 0x4ac
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006ffc:	3344      	adds	r3, #68	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ffe:	f8ca 45f0 	str.w	r4, [sl, #1520]	; 0x5f0
 8007002:	f8ca 3100 	str.w	r3, [sl, #256]	; 0x100
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007006:	f8ca 2598 	str.w	r2, [sl, #1432]	; 0x598
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800700a:	f8ca 25dc 	str.w	r2, [sl, #1500]	; 0x5dc
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800700e:	f7ff ba2f 	b.w	8006470 <main+0x5b8>
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007012:	4b5f      	ldr	r3, [pc, #380]	; (8007190 <main+0x12d8>)
 8007014:	4a5f      	ldr	r2, [pc, #380]	; (8007194 <main+0x12dc>)
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800701c:	5cd3      	ldrb	r3, [r2, r3]
 800701e:	40de      	lsrs	r6, r3
 8007020:	f7ff ba53 	b.w	80064ca <main+0x612>
 8007024:	2219      	movs	r2, #25
 8007026:	fb07 f202 	mul.w	r2, r7, r2
 800702a:	fbb5 f2f2 	udiv	r2, r5, r2
 800702e:	3201      	adds	r2, #1
 8007030:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007034:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007038:	f7ff b9ab 	b.w	8006392 <main+0x4da>
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800703c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007040:	f8ca 360c 	str.w	r3, [sl, #1548]	; 0x60c
  hdma->Lock = HAL_UNLOCKED;
 8007044:	f8aa 361c 	strh.w	r3, [sl, #1564]	; 0x61c
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800704c:	f8ca 3610 	str.w	r3, [sl, #1552]	; 0x610
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007050:	2304      	movs	r3, #4
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007052:	2180      	movs	r1, #128	; 0x80
 8007054:	f8ca 363c 	str.w	r3, [sl, #1596]	; 0x63c
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007058:	4b4d      	ldr	r3, [pc, #308]	; (8007190 <main+0x12d8>)
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800705a:	f8ca 1608 	str.w	r1, [sl, #1544]	; 0x608
    htim->Lock = HAL_UNLOCKED;
 800705e:	f88a 2040 	strb.w	r2, [sl, #64]	; 0x40
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007062:	f8ca 2600 	str.w	r2, [sl, #1536]	; 0x600
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007066:	f8ca 2604 	str.w	r2, [sl, #1540]	; 0x604
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800706a:	f8ca 2614 	str.w	r2, [sl, #1556]	; 0x614
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800706e:	f8ca 2618 	str.w	r2, [sl, #1560]	; 0x618
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007072:	6998      	ldr	r0, [r3, #24]
  hdma->DmaBaseAddress = DMA1;
 8007074:	4942      	ldr	r1, [pc, #264]	; (8007180 <main+0x12c8>)
 8007076:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 800707a:	f8ca 1638 	str.w	r1, [sl, #1592]	; 0x638
 800707e:	6198      	str	r0, [r3, #24]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007086:	9314      	str	r3, [sp, #80]	; 0x50
 8007088:	9b14      	ldr	r3, [sp, #80]	; 0x50
  tmp = hdma->Instance->CCR;
 800708a:	69cb      	ldr	r3, [r1, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800708c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007090:	f023 0330 	bic.w	r3, r3, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8007094:	f443 63b0 	orr.w	r3, r3, #1408	; 0x580
  hdma->Instance->CCR = tmp;
 8007098:	61cb      	str	r3, [r1, #28]
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800709a:	4b3f      	ldr	r3, [pc, #252]	; (8007198 <main+0x12e0>)
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800709c:	f8ca 2634 	str.w	r2, [sl, #1588]	; 0x634
 80070a0:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
 80070a4:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 80070a8:	f8ca 3620 	str.w	r3, [sl, #1568]	; 0x620
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80070ac:	4b3b      	ldr	r3, [pc, #236]	; (800719c <main+0x12e4>)
 80070ae:	f8ca 35fc 	str.w	r3, [sl, #1532]	; 0x5fc
}
 80070b2:	f7ff ba48 	b.w	8006546 <main+0x68e>
 80070b6:	b672      	cpsid	i
	while (1)
 80070b8:	e7fe      	b.n	80070b8 <main+0x1200>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070ba:	4b35      	ldr	r3, [pc, #212]	; (8007190 <main+0x12d8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070bc:	2002      	movs	r0, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070be:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070c0:	a91e      	add	r1, sp, #120	; 0x78
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070c2:	f042 0204 	orr.w	r2, r2, #4
 80070c6:	619a      	str	r2, [r3, #24]
 80070c8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80070ca:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070ce:	f003 0304 	and.w	r3, r3, #4
 80070d2:	9315      	str	r3, [sp, #84]	; 0x54
 80070d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80070d6:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070d8:	9021      	str	r0, [sp, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070da:	4828      	ldr	r0, [pc, #160]	; (800717c <main+0x12c4>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80070dc:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070e0:	f7f9 ff9a 	bl	8001018 <HAL_GPIO_Init>
 80070e4:	f7ff bac2 	b.w	800666c <main+0x7b4>
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    htim->Instance->SMCR = tmpsmcr;
 80070ec:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80070ee:	f88a 4041 	strb.w	r4, [sl, #65]	; 0x41
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070f2:	6a1a      	ldr	r2, [r3, #32]
 80070f4:	f022 0201 	bic.w	r2, r2, #1
 80070f8:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80070fa:	6a18      	ldr	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80070fc:	6859      	ldr	r1, [r3, #4]
    tmpccer &= ~TIM_CCER_CC1NE;
 80070fe:	f020 000e 	bic.w	r0, r0, #14
  tmpccmrx = TIMx->CCMR1;
 8007102:	699a      	ldr	r2, [r3, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007104:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8007108:	f7ff ba90 	b.w	800662c <main+0x774>
 800710c:	b672      	cpsid	i
 800710e:	e7fe      	b.n	800710e <main+0x1256>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007110:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    htim->Instance->SMCR = tmpsmcr;
 8007114:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8007116:	2201      	movs	r2, #1
 8007118:	f88a 2041 	strb.w	r2, [sl, #65]	; 0x41
 800711c:	f7ff ba7d 	b.w	800661a <main+0x762>
  return uwTick;
 8007120:	f8da 2000 	ldr.w	r2, [sl]
 8007124:	f8da 3000 	ldr.w	r3, [sl]
  while ((HAL_GetTick() - tickstart) < wait)
 8007128:	1a9b      	subs	r3, r3, r2
 800712a:	2bc8      	cmp	r3, #200	; 0xc8
 800712c:	d9fa      	bls.n	8007124 <main+0x126c>
		if (memcmp(rx_buffer, "CE", 2) == 0) {
 800712e:	f244 5343 	movw	r3, #17731	; 0x4543
			rx_index = 0;
 8007132:	2600      	movs	r6, #0
		if (memcmp(rx_buffer, "CE", 2) == 0) {
 8007134:	f8ba 266c 	ldrh.w	r2, [sl, #1644]	; 0x66c
			rx_index = 0;
 8007138:	f88a 6665 	strb.w	r6, [sl, #1637]	; 0x665
		if (memcmp(rx_buffer, "CE", 2) == 0) {
 800713c:	429a      	cmp	r2, r3
 800713e:	f040 80ab 	bne.w	8007298 <main+0x13e0>
    __HAL_LOCK(hi2c);
 8007142:	2401      	movs	r4, #1
    uint16_t dt[1] = {0};
 8007144:	4637      	mov	r7, r6
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007146:	4d16      	ldr	r5, [pc, #88]	; (80071a0 <main+0x12e8>)
 8007148:	fa1f f986 	uxth.w	r9, r6
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800714c:	4648      	mov	r0, r9
 800714e:	a91e      	add	r1, sp, #120	; 0x78
    uint16_t dt[1] = {0};
 8007150:	f8ad 7078 	strh.w	r7, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007154:	f7fb ff26 	bl	8002fa4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8007158:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 8084 	beq.w	800726a <main+0x13b2>
  return uwTick;
 8007162:	f8da 8000 	ldr.w	r8, [sl]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007166:	f89a 3089 	ldrb.w	r3, [sl, #137]	; 0x89
    uint8_t save[] = {val};
 800716a:	f88d 7078 	strb.w	r7, [sp, #120]	; 0x78
 800716e:	2b20      	cmp	r3, #32
 8007170:	d17b      	bne.n	800726a <main+0x13b2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007172:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
 8007176:	e01c      	b.n	80071b2 <main+0x12fa>
 8007178:	003d0900 	.word	0x003d0900
 800717c:	40010800 	.word	0x40010800
 8007180:	40020000 	.word	0x40020000
 8007184:	ffffc00f 	.word	0xffffc00f
 8007188:	40020044 	.word	0x40020044
 800718c:	20000774 	.word	0x20000774
 8007190:	40021000 	.word	0x40021000
 8007194:	0800c620 	.word	0x0800c620
 8007198:	200007fc 	.word	0x200007fc
 800719c:	4002001c 	.word	0x4002001c
 80071a0:	ffff0000 	.word	0xffff0000
 80071a4:	f8da 1000 	ldr.w	r1, [sl]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071a8:	eba1 0108 	sub.w	r1, r1, r8
 80071ac:	2919      	cmp	r1, #25
 80071ae:	f200 817d 	bhi.w	80074ac <main+0x15f4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071b2:	6993      	ldr	r3, [r2, #24]
 80071b4:	43db      	mvns	r3, r3
 80071b6:	f013 0302 	ands.w	r3, r3, #2
 80071ba:	d0f3      	beq.n	80071a4 <main+0x12ec>
    __HAL_LOCK(hi2c);
 80071bc:	f89a 3088 	ldrb.w	r3, [sl, #136]	; 0x88
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d052      	beq.n	800726a <main+0x13b2>
 80071c4:	f88a 4088 	strb.w	r4, [sl, #136]	; 0x88
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80071c8:	6813      	ldr	r3, [r2, #0]
 80071ca:	07d8      	lsls	r0, r3, #31
 80071cc:	d403      	bmi.n	80071d6 <main+0x131e>
      __HAL_I2C_ENABLE(hi2c);
 80071ce:	6813      	ldr	r3, [r2, #0]
 80071d0:	f043 0301 	orr.w	r3, r3, #1
 80071d4:	6013      	str	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80071d6:	2140      	movs	r1, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80071d8:	f04f 0c21 	mov.w	ip, #33	; 0x21
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071dc:	6813      	ldr	r3, [r2, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071de:	4648      	mov	r0, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071e4:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80071e6:	f88a c089 	strb.w	ip, [sl, #137]	; 0x89
    hi2c->pBuffPtr    = pData;
 80071ea:	ab1e      	add	r3, sp, #120	; 0x78
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80071ec:	f88a 108a 	strb.w	r1, [sl, #138]	; 0x8a
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071f0:	f8ca 708c 	str.w	r7, [sl, #140]	; 0x8c
    hi2c->XferCount   = Size;
 80071f4:	f8aa 4076 	strh.w	r4, [sl, #118]	; 0x76
    hi2c->pBuffPtr    = pData;
 80071f8:	f8ca 3070 	str.w	r3, [sl, #112]	; 0x70
    hi2c->XferSize    = hi2c->XferCount;
 80071fc:	f8ba 3076 	ldrh.w	r3, [sl, #118]	; 0x76
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007200:	4641      	mov	r1, r8
    hi2c->XferSize    = hi2c->XferCount;
 8007202:	f8aa 3074 	strh.w	r3, [sl, #116]	; 0x74
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007206:	f8ca 5078 	str.w	r5, [sl, #120]	; 0x78
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800720a:	f7fb fddf 	bl	8002dcc <I2C_RequestMemoryWrite.constprop.0>
 800720e:	bb60      	cbnz	r0, 800726a <main+0x13b2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007210:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
    while (hi2c->XferSize > 0U)
 8007214:	f8ba 0074 	ldrh.w	r0, [sl, #116]	; 0x74
 8007218:	2800      	cmp	r0, #0
 800721a:	f000 80e6 	beq.w	80073ea <main+0x1532>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800721e:	6959      	ldr	r1, [r3, #20]
 8007220:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8007224:	f040 80f0 	bne.w	8007408 <main+0x1550>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007228:	695a      	ldr	r2, [r3, #20]
 800722a:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 800722e:	f040 8117 	bne.w	8007460 <main+0x15a8>
 8007232:	f8da 1000 	ldr.w	r1, [sl]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007236:	eba1 0108 	sub.w	r1, r1, r8
 800723a:	2964      	cmp	r1, #100	; 0x64
 800723c:	d9ef      	bls.n	800721e <main+0x1366>
        hi2c->State             = HAL_I2C_STATE_READY;
 800723e:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007240:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 8007244:	f88a 1089 	strb.w	r1, [sl, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007248:	f88a 208a 	strb.w	r2, [sl, #138]	; 0x8a
        __HAL_UNLOCK(hi2c);
 800724c:	f88a 2088 	strb.w	r2, [sl, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007250:	f8da 208c 	ldr.w	r2, [sl, #140]	; 0x8c
 8007254:	430a      	orrs	r2, r1
 8007256:	f8ca 208c 	str.w	r2, [sl, #140]	; 0x8c
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800725a:	f8da 208c 	ldr.w	r2, [sl, #140]	; 0x8c
 800725e:	2a04      	cmp	r2, #4
 8007260:	d103      	bne.n	800726a <main+0x13b2>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007268:	601a      	str	r2, [r3, #0]
			for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 800726a:	3601      	adds	r6, #1
 800726c:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 8007270:	f47f af6a 	bne.w	8007148 <main+0x1290>
			uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 8007274:	4d95      	ldr	r5, [pc, #596]	; (80074cc <main+0x1614>)
 8007276:	ac1e      	add	r4, sp, #120	; 0x78
 8007278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800727a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  if (huart->gState == HAL_UART_STATE_READY)
 800727c:	f89a 6105 	ldrb.w	r6, [sl, #261]	; 0x105
 8007280:	682b      	ldr	r3, [r5, #0]
 8007282:	2e20      	cmp	r6, #32
 8007284:	6023      	str	r3, [r4, #0]
 8007286:	d107      	bne.n	8007298 <main+0x13e0>
    __HAL_LOCK(huart);
 8007288:	f89a 3104 	ldrb.w	r3, [sl, #260]	; 0x104
 800728c:	2b01      	cmp	r3, #1
 800728e:	d003      	beq.n	8007298 <main+0x13e0>
 8007290:	2114      	movs	r1, #20
 8007292:	a81e      	add	r0, sp, #120	; 0x78
 8007294:	f7fc fe0c 	bl	8003eb0 <HAL_UART_Transmit.part.0.constprop.0.isra.0>
		if (memcmp(rx_buffer, "RT", 2) == 0) {
 8007298:	f245 4352 	movw	r3, #21586	; 0x5452
 800729c:	f8ba 266c 	ldrh.w	r2, [sl, #1644]	; 0x66c
 80072a0:	429a      	cmp	r2, r3
 80072a2:	f000 8119 	beq.w	80074d8 <main+0x1620>
		for (uint8_t i = 0; i < 255; i++) rx_buffer[i] = 0;
 80072a6:	22ff      	movs	r2, #255	; 0xff
 80072a8:	2100      	movs	r1, #0
 80072aa:	4889      	ldr	r0, [pc, #548]	; (80074d0 <main+0x1618>)
 80072ac:	f000 fce6 	bl	8007c7c <memset>
 80072b0:	e536      	b.n	8006d20 <main+0xe68>
    __HAL_TIM_MOE_ENABLE(htim);
 80072b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072b8:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072ba:	689a      	ldr	r2, [r3, #8]
 80072bc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c0:	2a06      	cmp	r2, #6
 80072c2:	f47f ac8e 	bne.w	8006be2 <main+0xd2a>
 80072c6:	e490      	b.n	8006bea <main+0xd32>
    __HAL_UNLOCK(hdma); 
 80072c8:	f884 1020 	strb.w	r1, [r4, #32]
 80072cc:	e519      	b.n	8006d02 <main+0xe4a>
			LCD_Circle(172, 75, 8, 0, 1, ORANGE);
 80072ce:	2100      	movs	r1, #0
 80072d0:	2008      	movs	r0, #8
 80072d2:	4a80      	ldr	r2, [pc, #512]	; (80074d4 <main+0x161c>)
 80072d4:	f7f9 fd9c 	bl	8000e10 <LCD_Circle.constprop.0>
			if (rtcSec % 2 != 0) {
 80072d8:	9b07      	ldr	r3, [sp, #28]
 80072da:	f013 0301 	ands.w	r3, r3, #1
 80072de:	d042      	beq.n	8007366 <main+0x14ae>
 80072e0:	f04f 0900 	mov.w	r9, #0
 80072e4:	2501      	movs	r5, #1
	P = 1 - radius;
 80072e6:	f06f 0405 	mvn.w	r4, #5
	b_ = radius;
 80072ea:	f04f 0807 	mov.w	r8, #7
 80072ee:	e00f      	b.n	8007310 <main+0x1458>
			P = (P + 5) + (2 * (a_ - b_));
 80072f0:	1e6b      	subs	r3, r5, #1
 80072f2:	eba3 0308 	sub.w	r3, r3, r8
 80072f6:	3405      	adds	r4, #5
 80072f8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
			a_++;
 80072fc:	462b      	mov	r3, r5
			b_--;
 80072fe:	f108 38ff 	add.w	r8, r8, #4294967295
	while (a_ <= b_)
 8007302:	4543      	cmp	r3, r8
 8007304:	f105 0501 	add.w	r5, r5, #1
 8007308:	f109 0902 	add.w	r9, r9, #2
 800730c:	f300 8187 	bgt.w	800761e <main+0x1766>
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8007310:	fa1f fb88 	uxth.w	fp, r8
 8007314:	ea4f 074b 	mov.w	r7, fp, lsl #1
 8007318:	b2ae      	uxth	r6, r5
 800731a:	4b6e      	ldr	r3, [pc, #440]	; (80074d4 <main+0x161c>)
 800731c:	3701      	adds	r7, #1
 800731e:	b2bf      	uxth	r7, r7
 8007320:	f1c6 00ad 	rsb	r0, r6, #173	; 0xad
 8007324:	f109 0201 	add.w	r2, r9, #1
 8007328:	f1cb 0123 	rsb	r1, fp, #35	; 0x23
 800732c:	b292      	uxth	r2, r2
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	b289      	uxth	r1, r1
 8007332:	463b      	mov	r3, r7
 8007334:	b280      	uxth	r0, r0
 8007336:	9203      	str	r2, [sp, #12]
 8007338:	f7f9 f874 	bl	8000424 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 800733c:	9a03      	ldr	r2, [sp, #12]
 800733e:	f1c6 0124 	rsb	r1, r6, #36	; 0x24
 8007342:	4e64      	ldr	r6, [pc, #400]	; (80074d4 <main+0x161c>)
 8007344:	f1cb 00ac 	rsb	r0, fp, #172	; 0xac
 8007348:	4613      	mov	r3, r2
 800734a:	9600      	str	r6, [sp, #0]
 800734c:	463a      	mov	r2, r7
 800734e:	b289      	uxth	r1, r1
 8007350:	b280      	uxth	r0, r0
 8007352:	f7f9 f867 	bl	8000424 <LCD_Rect_Fill>
		if (P < 0)
 8007356:	2c00      	cmp	r4, #0
			P = (P + 3) + (2 * a_);
 8007358:	f104 0303 	add.w	r3, r4, #3
		if (P < 0)
 800735c:	dac8      	bge.n	80072f0 <main+0x1438>
			P = (P + 3) + (2 * a_);
 800735e:	eb09 0403 	add.w	r4, r9, r3
			a_++;
 8007362:	462b      	mov	r3, r5
 8007364:	e7cd      	b.n	8007302 <main+0x144a>
 8007366:	4699      	mov	r9, r3
 8007368:	2501      	movs	r5, #1
	P = 1 - radius;
 800736a:	f06f 0405 	mvn.w	r4, #5
	b_ = radius;
 800736e:	f04f 0807 	mov.w	r8, #7
 8007372:	e00f      	b.n	8007394 <main+0x14dc>
			P = (P + 5) + (2 * (a_ - b_));
 8007374:	1e6b      	subs	r3, r5, #1
 8007376:	eba3 0308 	sub.w	r3, r3, r8
 800737a:	3405      	adds	r4, #5
 800737c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
			a_++;
 8007380:	462b      	mov	r3, r5
			b_--;
 8007382:	f108 38ff 	add.w	r8, r8, #4294967295
	while (a_ <= b_)
 8007386:	4598      	cmp	r8, r3
 8007388:	f105 0501 	add.w	r5, r5, #1
 800738c:	f109 0902 	add.w	r9, r9, #2
 8007390:	f2c0 8187 	blt.w	80076a2 <main+0x17ea>
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8007394:	2300      	movs	r3, #0
 8007396:	fa1f fb88 	uxth.w	fp, r8
 800739a:	ea4f 074b 	mov.w	r7, fp, lsl #1
 800739e:	b2ae      	uxth	r6, r5
 80073a0:	3701      	adds	r7, #1
 80073a2:	b2bf      	uxth	r7, r7
 80073a4:	f1c6 00ad 	rsb	r0, r6, #173	; 0xad
 80073a8:	f109 0201 	add.w	r2, r9, #1
 80073ac:	f1cb 0123 	rsb	r1, fp, #35	; 0x23
 80073b0:	b292      	uxth	r2, r2
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	b289      	uxth	r1, r1
 80073b6:	463b      	mov	r3, r7
 80073b8:	b280      	uxth	r0, r0
 80073ba:	9203      	str	r2, [sp, #12]
 80073bc:	f7f9 f832 	bl	8000424 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 80073c0:	f1c6 0124 	rsb	r1, r6, #36	; 0x24
 80073c4:	2600      	movs	r6, #0
 80073c6:	9a03      	ldr	r2, [sp, #12]
 80073c8:	f1cb 00ac 	rsb	r0, fp, #172	; 0xac
 80073cc:	4613      	mov	r3, r2
 80073ce:	9600      	str	r6, [sp, #0]
 80073d0:	463a      	mov	r2, r7
 80073d2:	b289      	uxth	r1, r1
 80073d4:	b280      	uxth	r0, r0
 80073d6:	f7f9 f825 	bl	8000424 <LCD_Rect_Fill>
		if (P < 0)
 80073da:	42b4      	cmp	r4, r6
			P = (P + 3) + (2 * a_);
 80073dc:	f104 0303 	add.w	r3, r4, #3
		if (P < 0)
 80073e0:	dac8      	bge.n	8007374 <main+0x14bc>
			P = (P + 3) + (2 * a_);
 80073e2:	eb09 0403 	add.w	r4, r9, r3
			a_++;
 80073e6:	462b      	mov	r3, r5
 80073e8:	e7cd      	b.n	8007386 <main+0x14ce>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073ea:	6959      	ldr	r1, [r3, #20]
 80073ec:	f011 0104 	ands.w	r1, r1, #4
 80073f0:	d149      	bne.n	8007486 <main+0x15ce>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073f2:	695a      	ldr	r2, [r3, #20]
 80073f4:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 80073f8:	d132      	bne.n	8007460 <main+0x15a8>
 80073fa:	f8da 1000 	ldr.w	r1, [sl]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073fe:	eba1 0108 	sub.w	r1, r1, r8
 8007402:	2964      	cmp	r1, #100	; 0x64
 8007404:	d9f1      	bls.n	80073ea <main+0x1532>
 8007406:	e71a      	b.n	800723e <main+0x1386>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007408:	f8da 2070 	ldr.w	r2, [sl, #112]	; 0x70
      hi2c->XferSize--;
 800740c:	f100 3cff 	add.w	ip, r0, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007410:	4611      	mov	r1, r2
 8007412:	f811 eb01 	ldrb.w	lr, [r1], #1
      hi2c->XferSize--;
 8007416:	fa1f fc8c 	uxth.w	ip, ip
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800741a:	f8c3 e010 	str.w	lr, [r3, #16]
      hi2c->pBuffPtr++;
 800741e:	f8ca 1070 	str.w	r1, [sl, #112]	; 0x70
      hi2c->XferCount--;
 8007422:	f8ba 1076 	ldrh.w	r1, [sl, #118]	; 0x76
      hi2c->XferSize--;
 8007426:	f8aa c074 	strh.w	ip, [sl, #116]	; 0x74
      hi2c->XferCount--;
 800742a:	3901      	subs	r1, #1
 800742c:	b289      	uxth	r1, r1
 800742e:	f8aa 1076 	strh.w	r1, [sl, #118]	; 0x76
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007432:	6959      	ldr	r1, [r3, #20]
 8007434:	0749      	lsls	r1, r1, #29
 8007436:	f57f aeed 	bpl.w	8007214 <main+0x135c>
 800743a:	f1bc 0f00 	cmp.w	ip, #0
 800743e:	f43f aee9 	beq.w	8007214 <main+0x135c>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007442:	7851      	ldrb	r1, [r2, #1]
        hi2c->pBuffPtr++;
 8007444:	3202      	adds	r2, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007446:	6119      	str	r1, [r3, #16]
        hi2c->pBuffPtr++;
 8007448:	f8ca 2070 	str.w	r2, [sl, #112]	; 0x70
        hi2c->XferCount--;
 800744c:	f8ba 2076 	ldrh.w	r2, [sl, #118]	; 0x76
        hi2c->XferSize--;
 8007450:	3802      	subs	r0, #2
        hi2c->XferCount--;
 8007452:	3a01      	subs	r2, #1
 8007454:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 8007456:	f8aa 0074 	strh.w	r0, [sl, #116]	; 0x74
        hi2c->XferCount--;
 800745a:	f8aa 2076 	strh.w	r2, [sl, #118]	; 0x76
 800745e:	e6d9      	b.n	8007214 <main+0x135c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007460:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007464:	615a      	str	r2, [r3, #20]
    hi2c->State               = HAL_I2C_STATE_READY;
 8007466:	2220      	movs	r2, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8007468:	f8ca 107c 	str.w	r1, [sl, #124]	; 0x7c
    hi2c->State               = HAL_I2C_STATE_READY;
 800746c:	f88a 2089 	strb.w	r2, [sl, #137]	; 0x89
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007470:	f88a 108a 	strb.w	r1, [sl, #138]	; 0x8a
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007474:	f8da 208c 	ldr.w	r2, [sl, #140]	; 0x8c
    __HAL_UNLOCK(hi2c);
 8007478:	f88a 1088 	strb.w	r1, [sl, #136]	; 0x88
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800747c:	f042 0204 	orr.w	r2, r2, #4
 8007480:	f8ca 208c 	str.w	r2, [sl, #140]	; 0x8c
 8007484:	e6e9      	b.n	800725a <main+0x13a2>
    hi2c->State = HAL_I2C_STATE_READY;
 8007486:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800748e:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007490:	f88a 1089 	strb.w	r1, [sl, #137]	; 0x89
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007494:	f88a 708a 	strb.w	r7, [sl, #138]	; 0x8a
 8007498:	f8da 2000 	ldr.w	r2, [sl]
    __HAL_UNLOCK(hi2c);
 800749c:	f88a 7088 	strb.w	r7, [sl, #136]	; 0x88
 80074a0:	f8da 3000 	ldr.w	r3, [sl]
  while ((HAL_GetTick() - tickstart) < wait)
 80074a4:	1a9b      	subs	r3, r3, r2
 80074a6:	2b05      	cmp	r3, #5
 80074a8:	d9fa      	bls.n	80074a0 <main+0x15e8>
 80074aa:	e6de      	b.n	800726a <main+0x13b2>
        hi2c->State             = HAL_I2C_STATE_READY;
 80074ac:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80074ae:	f8ca 307c 	str.w	r3, [sl, #124]	; 0x7c
        hi2c->State             = HAL_I2C_STATE_READY;
 80074b2:	f88a 2089 	strb.w	r2, [sl, #137]	; 0x89
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80074b6:	f88a 308a 	strb.w	r3, [sl, #138]	; 0x8a
        __HAL_UNLOCK(hi2c);
 80074ba:	f88a 3088 	strb.w	r3, [sl, #136]	; 0x88
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80074be:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
 80074c2:	4313      	orrs	r3, r2
 80074c4:	f8ca 308c 	str.w	r3, [sl, #140]	; 0x8c
 80074c8:	e6cf      	b.n	800726a <main+0x13b2>
 80074ca:	bf00      	nop
 80074cc:	0801de90 	.word	0x0801de90
 80074d0:	2000086c 	.word	0x2000086c
 80074d4:	00ffa500 	.word	0x00ffa500
			val[0] = rx_buffer[2];
 80074d8:	f8ba 366e 	ldrh.w	r3, [sl, #1646]	; 0x66e
			DS3231_setHrs(atoi(val));
 80074dc:	a81e      	add	r0, sp, #120	; 0x78
			val[0] = rx_buffer[2];
 80074de:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
			DS3231_setHrs(atoi(val));
 80074e2:	f000 fb9c 	bl	8007c1e <atoi>
    return ((val / 10 * 16) + (val % 10));
 80074e6:	240a      	movs	r4, #10
 80074e8:	b2c5      	uxtb	r5, r0
    rtcBufferSet[2] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
}

void DS3231_setHrs(uint8_t value) {
    DS3231_Update();
 80074ea:	f7fc fc59 	bl	8003da0 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80074ee:	fbb5 f6f4 	udiv	r6, r5, r4
 80074f2:	fb04 5316 	mls	r3, r4, r6, r5
    rtcBufferSet[3] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80074f6:	2211      	movs	r2, #17
 80074f8:	498b      	ldr	r1, [pc, #556]	; (8007728 <main+0x1870>)
    return ((val / 10 * 16) + (val % 10));
 80074fa:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80074fe:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[3] = decToBcd(value);
 8007500:	f88a 30b7 	strb.w	r3, [sl, #183]	; 0xb7
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8007504:	f7fc fafe 	bl	8003b04 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[0] = rx_buffer[4];
 8007508:	f8ba 3670 	ldrh.w	r3, [sl, #1648]	; 0x670
			DS3231_setMin(atoi(val));
 800750c:	a81e      	add	r0, sp, #120	; 0x78
			val[0] = rx_buffer[4];
 800750e:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
			DS3231_setMin(atoi(val));
 8007512:	f000 fb84 	bl	8007c1e <atoi>
 8007516:	b2c5      	uxtb	r5, r0
    DS3231_Update();
 8007518:	f7fc fc42 	bl	8003da0 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 800751c:	fbb5 f6f4 	udiv	r6, r5, r4
 8007520:	fb04 5316 	mls	r3, r4, r6, r5
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8007524:	2211      	movs	r2, #17
 8007526:	4980      	ldr	r1, [pc, #512]	; (8007728 <main+0x1870>)
    return ((val / 10 * 16) + (val % 10));
 8007528:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800752c:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[2] = decToBcd(value);
 800752e:	f88a 30b6 	strb.w	r3, [sl, #182]	; 0xb6
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8007532:	f7fc fae7 	bl	8003b04 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[0] = rx_buffer[6];
 8007536:	f8ba 3672 	ldrh.w	r3, [sl, #1650]	; 0x672
			DS3231_setSec(atoi(val));
 800753a:	a81e      	add	r0, sp, #120	; 0x78
			val[0] = rx_buffer[6];
 800753c:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
			DS3231_setSec(atoi(val));
 8007540:	f000 fb6d 	bl	8007c1e <atoi>
 8007544:	b2c5      	uxtb	r5, r0
    DS3231_Update();
 8007546:	f7fc fc2b 	bl	8003da0 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 800754a:	fbb5 f6f4 	udiv	r6, r5, r4
 800754e:	fb04 5316 	mls	r3, r4, r6, r5
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8007552:	2211      	movs	r2, #17
 8007554:	4974      	ldr	r1, [pc, #464]	; (8007728 <main+0x1870>)
    return ((val / 10 * 16) + (val % 10));
 8007556:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800755a:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[1] = decToBcd(value);
 800755c:	f88a 30b5 	strb.w	r3, [sl, #181]	; 0xb5
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8007560:	f7fc fad0 	bl	8003b04 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[0] = rx_buffer[8];
 8007564:	f8ba 3674 	ldrh.w	r3, [sl, #1652]	; 0x674
			DS3231_setDate(atoi(val));
 8007568:	a81e      	add	r0, sp, #120	; 0x78
			val[0] = rx_buffer[8];
 800756a:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
			DS3231_setDate(atoi(val));
 800756e:	f000 fb56 	bl	8007c1e <atoi>
 8007572:	b2c5      	uxtb	r5, r0
    rtcBufferSet[4] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
}

void DS3231_setDate(uint8_t value) {
    DS3231_Update();
 8007574:	f7fc fc14 	bl	8003da0 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8007578:	fbb5 f6f4 	udiv	r6, r5, r4
 800757c:	fb04 5316 	mls	r3, r4, r6, r5
    rtcBufferSet[5] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8007580:	2211      	movs	r2, #17
 8007582:	4969      	ldr	r1, [pc, #420]	; (8007728 <main+0x1870>)
    return ((val / 10 * 16) + (val % 10));
 8007584:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8007588:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[5] = decToBcd(value);
 800758a:	f88a 30b9 	strb.w	r3, [sl, #185]	; 0xb9
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800758e:	f7fc fab9 	bl	8003b04 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[0] = rx_buffer[10];
 8007592:	f8ba 3676 	ldrh.w	r3, [sl, #1654]	; 0x676
			DS3231_setMonth(atoi(val));
 8007596:	a81e      	add	r0, sp, #120	; 0x78
			val[0] = rx_buffer[10];
 8007598:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
			DS3231_setMonth(atoi(val));
 800759c:	f000 fb3f 	bl	8007c1e <atoi>
 80075a0:	b2c5      	uxtb	r5, r0
}

void DS3231_setMonth(uint8_t value) {
    DS3231_Update();
 80075a2:	f7fc fbfd 	bl	8003da0 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80075a6:	fbb5 f6f4 	udiv	r6, r5, r4
 80075aa:	fb04 5316 	mls	r3, r4, r6, r5
    rtcBufferSet[6] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80075ae:	2211      	movs	r2, #17
 80075b0:	495d      	ldr	r1, [pc, #372]	; (8007728 <main+0x1870>)
    return ((val / 10 * 16) + (val % 10));
 80075b2:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80075b6:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[6] = decToBcd(value);
 80075b8:	f88a 30ba 	strb.w	r3, [sl, #186]	; 0xba
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80075bc:	f7fc faa2 	bl	8003b04 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[0] = rx_buffer[12];
 80075c0:	f8ba 3678 	ldrh.w	r3, [sl, #1656]	; 0x678
			DS3231_setYear(atoi(val));
 80075c4:	a81e      	add	r0, sp, #120	; 0x78
			val[0] = rx_buffer[12];
 80075c6:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
			DS3231_setYear(atoi(val));
 80075ca:	f000 fb28 	bl	8007c1e <atoi>
 80075ce:	b2c5      	uxtb	r5, r0
}

void DS3231_setYear(uint8_t value) {
    DS3231_Update();
 80075d0:	f7fc fbe6 	bl	8003da0 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80075d4:	fbb5 f6f4 	udiv	r6, r5, r4
 80075d8:	fb04 5316 	mls	r3, r4, r6, r5
    rtcBufferSet[7] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80075dc:	2211      	movs	r2, #17
 80075de:	4952      	ldr	r1, [pc, #328]	; (8007728 <main+0x1870>)
    return ((val / 10 * 16) + (val % 10));
 80075e0:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80075e4:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[7] = decToBcd(value);
 80075e6:	f88a 30bb 	strb.w	r3, [sl, #187]	; 0xbb
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80075ea:	f7fc fa8b 	bl	8003b04 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[1] = rx_buffer[14];
 80075ee:	f89a 367a 	ldrb.w	r3, [sl, #1658]	; 0x67a
			DS3231_setDay(atoi(val));
 80075f2:	a81e      	add	r0, sp, #120	; 0x78
			val[1] = rx_buffer[14];
 80075f4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
			DS3231_setDay(atoi(val));
 80075f8:	f000 fb11 	bl	8007c1e <atoi>
 80075fc:	b2c5      	uxtb	r5, r0
    DS3231_Update();
 80075fe:	f7fc fbcf 	bl	8003da0 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8007602:	fbb5 f2f4 	udiv	r2, r5, r4
 8007606:	fb04 5312 	mls	r3, r4, r2, r5
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800760a:	20d0      	movs	r0, #208	; 0xd0
    return ((val / 10 * 16) + (val % 10));
 800760c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8007610:	4945      	ldr	r1, [pc, #276]	; (8007728 <main+0x1870>)
 8007612:	2211      	movs	r2, #17
    rtcBufferSet[4] = decToBcd(value);
 8007614:	f88a 30b8 	strb.w	r3, [sl, #184]	; 0xb8
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8007618:	f7fc fa74 	bl	8003b04 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
 800761c:	e643      	b.n	80072a6 <main+0x13ee>
 800761e:	f04f 0900 	mov.w	r9, #0
 8007622:	2501      	movs	r5, #1
	P = 1 - radius;
 8007624:	f06f 0405 	mvn.w	r4, #5
	b_ = radius;
 8007628:	f04f 0807 	mov.w	r8, #7
 800762c:	e00e      	b.n	800764c <main+0x1794>
			P = (P + 5) + (2 * (a_ - b_));
 800762e:	1e6b      	subs	r3, r5, #1
 8007630:	eba3 0308 	sub.w	r3, r3, r8
 8007634:	3405      	adds	r4, #5
 8007636:	eb04 0443 	add.w	r4, r4, r3, lsl #1
			a_++;
 800763a:	462b      	mov	r3, r5
			b_--;
 800763c:	f108 38ff 	add.w	r8, r8, #4294967295
	while (a_ <= b_)
 8007640:	4598      	cmp	r8, r3
 8007642:	f105 0501 	add.w	r5, r5, #1
 8007646:	f109 0902 	add.w	r9, r9, #2
 800764a:	db71      	blt.n	8007730 <main+0x1878>
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 800764c:	fa1f fb88 	uxth.w	fp, r8
 8007650:	ea4f 074b 	mov.w	r7, fp, lsl #1
 8007654:	b2ae      	uxth	r6, r5
 8007656:	4b35      	ldr	r3, [pc, #212]	; (800772c <main+0x1874>)
 8007658:	3701      	adds	r7, #1
 800765a:	b2bf      	uxth	r7, r7
 800765c:	f1c6 00ad 	rsb	r0, r6, #173	; 0xad
 8007660:	f109 0201 	add.w	r2, r9, #1
 8007664:	f1cb 014b 	rsb	r1, fp, #75	; 0x4b
 8007668:	b292      	uxth	r2, r2
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	b289      	uxth	r1, r1
 800766e:	463b      	mov	r3, r7
 8007670:	b280      	uxth	r0, r0
 8007672:	9203      	str	r2, [sp, #12]
 8007674:	f7f8 fed6 	bl	8000424 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8007678:	9a03      	ldr	r2, [sp, #12]
 800767a:	f1c6 014c 	rsb	r1, r6, #76	; 0x4c
 800767e:	4e2b      	ldr	r6, [pc, #172]	; (800772c <main+0x1874>)
 8007680:	f1cb 00ac 	rsb	r0, fp, #172	; 0xac
 8007684:	4613      	mov	r3, r2
 8007686:	9600      	str	r6, [sp, #0]
 8007688:	463a      	mov	r2, r7
 800768a:	b289      	uxth	r1, r1
 800768c:	b280      	uxth	r0, r0
 800768e:	f7f8 fec9 	bl	8000424 <LCD_Rect_Fill>
		if (P < 0)
 8007692:	2c00      	cmp	r4, #0
			P = (P + 3) + (2 * a_);
 8007694:	f104 0303 	add.w	r3, r4, #3
		if (P < 0)
 8007698:	dac9      	bge.n	800762e <main+0x1776>
			P = (P + 3) + (2 * a_);
 800769a:	eb09 0403 	add.w	r4, r9, r3
			a_++;
 800769e:	462b      	mov	r3, r5
 80076a0:	e7ce      	b.n	8007640 <main+0x1788>
 80076a2:	f04f 0900 	mov.w	r9, #0
 80076a6:	2501      	movs	r5, #1
	P = 1 - radius;
 80076a8:	f06f 0405 	mvn.w	r4, #5
	b_ = radius;
 80076ac:	f04f 0807 	mov.w	r8, #7
 80076b0:	e00f      	b.n	80076d2 <main+0x181a>
			P = (P + 5) + (2 * (a_ - b_));
 80076b2:	1e6b      	subs	r3, r5, #1
 80076b4:	eba3 0308 	sub.w	r3, r3, r8
 80076b8:	3405      	adds	r4, #5
 80076ba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
			a_++;
 80076be:	462b      	mov	r3, r5
			b_--;
 80076c0:	f108 38ff 	add.w	r8, r8, #4294967295
	while (a_ <= b_)
 80076c4:	4598      	cmp	r8, r3
 80076c6:	f105 0501 	add.w	r5, r5, #1
 80076ca:	f109 0902 	add.w	r9, r9, #2
 80076ce:	f2c0 8195 	blt.w	80079fc <main+0x1b44>
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 80076d2:	2300      	movs	r3, #0
 80076d4:	fa1f fb88 	uxth.w	fp, r8
 80076d8:	ea4f 074b 	mov.w	r7, fp, lsl #1
 80076dc:	b2ae      	uxth	r6, r5
 80076de:	3701      	adds	r7, #1
 80076e0:	b2bf      	uxth	r7, r7
 80076e2:	f1c6 00ad 	rsb	r0, r6, #173	; 0xad
 80076e6:	f109 0201 	add.w	r2, r9, #1
 80076ea:	f1cb 014b 	rsb	r1, fp, #75	; 0x4b
 80076ee:	b292      	uxth	r2, r2
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	b289      	uxth	r1, r1
 80076f4:	463b      	mov	r3, r7
 80076f6:	b280      	uxth	r0, r0
 80076f8:	9203      	str	r2, [sp, #12]
 80076fa:	f7f8 fe93 	bl	8000424 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 80076fe:	f1c6 014c 	rsb	r1, r6, #76	; 0x4c
 8007702:	2600      	movs	r6, #0
 8007704:	9a03      	ldr	r2, [sp, #12]
 8007706:	f1cb 00ac 	rsb	r0, fp, #172	; 0xac
 800770a:	4613      	mov	r3, r2
 800770c:	9600      	str	r6, [sp, #0]
 800770e:	463a      	mov	r2, r7
 8007710:	b289      	uxth	r1, r1
 8007712:	b280      	uxth	r0, r0
 8007714:	f7f8 fe86 	bl	8000424 <LCD_Rect_Fill>
		if (P < 0)
 8007718:	42b4      	cmp	r4, r6
			P = (P + 3) + (2 * a_);
 800771a:	f104 0303 	add.w	r3, r4, #3
		if (P < 0)
 800771e:	dac8      	bge.n	80076b2 <main+0x17fa>
			P = (P + 3) + (2 * a_);
 8007720:	eb09 0403 	add.w	r4, r9, r3
			a_++;
 8007724:	462b      	mov	r3, r5
 8007726:	e7cd      	b.n	80076c4 <main+0x180c>
 8007728:	200002b4 	.word	0x200002b4
 800772c:	00ffa500 	.word	0x00ffa500
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007730:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007734:	4ab6      	ldr	r2, [pc, #728]	; (8007a10 <main+0x1b58>)
 8007736:	6113      	str	r3, [r2, #16]
			if (rtcMinLast != rtcMin) {
 8007738:	4cb6      	ldr	r4, [pc, #728]	; (8007a14 <main+0x1b5c>)
 800773a:	9b06      	ldr	r3, [sp, #24]
 800773c:	7a62      	ldrb	r2, [r4, #9]
 800773e:	429a      	cmp	r2, r3
 8007740:	d01d      	beq.n	800777e <main+0x18c6>
				sprintf(clockPrint, "%02d", rtcMinLast);
 8007742:	49b5      	ldr	r1, [pc, #724]	; (8007a18 <main+0x1b60>)
 8007744:	a81e      	add	r0, sp, #120	; 0x78
 8007746:	f001 f913 	bl	8008970 <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 800774a:	2200      	movs	r2, #0
 800774c:	20b4      	movs	r0, #180	; 0xb4
 800774e:	a91e      	add	r1, sp, #120	; 0x78
 8007750:	f7fc fc8a 	bl	8004068 <LCD_Font.constprop.1>
				sprintf(clockPrint, "%02d", rtcMin);
 8007754:	f89a 2667 	ldrb.w	r2, [sl, #1639]	; 0x667
 8007758:	49af      	ldr	r1, [pc, #700]	; (8007a18 <main+0x1b60>)
 800775a:	a81e      	add	r0, sp, #120	; 0x78
 800775c:	f001 f908 	bl	8008970 <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8007760:	4aae      	ldr	r2, [pc, #696]	; (8007a1c <main+0x1b64>)
 8007762:	20b4      	movs	r0, #180	; 0xb4
 8007764:	a91e      	add	r1, sp, #120	; 0x78
 8007766:	f7fc fc7f 	bl	8004068 <LCD_Font.constprop.1>
				if (rtcHrsLast != rtcHrs) {
 800776a:	7aa2      	ldrb	r2, [r4, #10]
 800776c:	f89a 3134 	ldrb.w	r3, [sl, #308]	; 0x134
 8007770:	4293      	cmp	r3, r2
 8007772:	f040 815d 	bne.w	8007a30 <main+0x1b78>
				rtcMinLast = rtcMin;
 8007776:	f89a 3667 	ldrb.w	r3, [sl, #1639]	; 0x667
 800777a:	4aa6      	ldr	r2, [pc, #664]	; (8007a14 <main+0x1b5c>)
 800777c:	7253      	strb	r3, [r2, #9]
    cmd[0] = 0xFA; // temp_msb
 800777e:	23fa      	movs	r3, #250	; 0xfa
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007780:	2201      	movs	r2, #1
 8007782:	20ec      	movs	r0, #236	; 0xec
 8007784:	a916      	add	r1, sp, #88	; 0x58
    cmd[0] = 0xFA; // temp_msb
 8007786:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800778a:	f7fc f9bb 	bl	8003b04 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 800778e:	2203      	movs	r2, #3
 8007790:	20ec      	movs	r0, #236	; 0xec
 8007792:	f10d 0159 	add.w	r1, sp, #89	; 0x59
 8007796:	f7fb ff7f 	bl	8003698 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800779a:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 800779e:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80077a8:	f89d 105b 	ldrb.w	r1, [sp, #91]	; 0x5b
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 80077ac:	f8ba 2640 	ldrh.w	r2, [sl, #1600]	; 0x640
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80077b0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 80077b4:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
 80077b8:	fb03 f303 	mul.w	r3, r3, r3
 80077bc:	0b1c      	lsrs	r4, r3, #12
 80077be:	f9ba 3644 	ldrsh.w	r3, [sl, #1604]	; 0x644
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 80077c2:	0052      	lsls	r2, r2, #1
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 80077c4:	fb03 f404 	mul.w	r4, r3, r4
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 80077c8:	f9ba 3642 	ldrsh.w	r3, [sl, #1602]	; 0x642
 80077cc:	ebc2 02d1 	rsb	r2, r2, r1, lsr #3
 80077d0:	fb02 f303 	mul.w	r3, r2, r3
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 80077d4:	0ba4      	lsrs	r4, r4, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 80077d6:	eb04 24d3 	add.w	r4, r4, r3, lsr #11
    temp = (temp * 5 + 128) >> 8;
 80077da:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80077de:	3080      	adds	r0, #128	; 0x80
    tempf = (float) temp;
 80077e0:	1200      	asrs	r0, r0, #8
    t_fine = temp;
 80077e2:	f8ca 4770 	str.w	r4, [sl, #1904]	; 0x770
    tempf = (float) temp;
 80077e6:	f7fe faf1 	bl	8005dcc <__aeabi_i2f>
    return round_nth((tempf / 100.0f), n);
 80077ea:	498d      	ldr	r1, [pc, #564]	; (8007a20 <main+0x1b68>)
 80077ec:	f7fe f980 	bl	8005af0 <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80077f0:	f7fd fda6 	bl	8005340 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 80077f4:	2200      	movs	r2, #0
 80077f6:	4b8b      	ldr	r3, [pc, #556]	; (8007a24 <main+0x1b6c>)
 80077f8:	f7fd fdfa 	bl	80053f0 <__aeabi_dmul>
 80077fc:	2200      	movs	r2, #0
 80077fe:	4b8a      	ldr	r3, [pc, #552]	; (8007a28 <main+0x1b70>)
 8007800:	f7fd fc40 	bl	8005084 <__adddf3>
 8007804:	f004 fe80 	bl	800c508 <floor>
 8007808:	a37f      	add	r3, pc, #508	; (adr r3, 8007a08 <main+0x1b50>)
 800780a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780e:	f7fd fdef 	bl	80053f0 <__aeabi_dmul>
 8007812:	f7fe f8e5 	bl	80059e0 <__aeabi_d2f>
	temperature = BME280_getTemperature(-1);
 8007816:	f7fd fd93 	bl	8005340 <__aeabi_f2d>
    cmd[0] = 0xFD; // hum_msb
 800781a:	23fd      	movs	r3, #253	; 0xfd
 800781c:	e9ca 0144 	strd	r0, r1, [sl, #272]	; 0x110
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007820:	2201      	movs	r2, #1
 8007822:	20ec      	movs	r0, #236	; 0xec
 8007824:	a916      	add	r1, sp, #88	; 0x58
    cmd[0] = 0xFD; // hum_msb
 8007826:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800782a:	f7fc f96b 	bl	8003b04 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 800782e:	2202      	movs	r2, #2
 8007830:	20ec      	movs	r0, #236	; 0xec
 8007832:	f10d 0159 	add.w	r1, sp, #89	; 0x59
 8007836:	f7fb ff2f 	bl	8003698 <HAL_I2C_Master_Receive.constprop.0.isra.0>
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800783a:	f8ba 365c 	ldrh.w	r3, [sl, #1628]	; 0x65c
    v_x1 = t_fine - 76800;
 800783e:	f5a4 3196 	sub.w	r1, r4, #76800	; 0x12c00
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8007842:	f9ba 2662 	ldrsh.w	r2, [sl, #1634]	; 0x662
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8007846:	fb01 f303 	mul.w	r3, r1, r3
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 800784a:	fb01 f202 	mul.w	r2, r1, r2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800784e:	12db      	asrs	r3, r3, #11
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8007850:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8007852:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8007856:	fb02 f303 	mul.w	r3, r2, r3
    hum_raw = (cmd[1] << 8) | cmd[2];
 800785a:	f8bd 2059 	ldrh.w	r2, [sp, #89]	; 0x59
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800785e:	129b      	asrs	r3, r3, #10
    hum_raw = (cmd[1] << 8) | cmd[2];
 8007860:	ba52      	rev16	r2, r2
 8007862:	b290      	uxth	r0, r2
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8007864:	f9ba 265e 	ldrsh.w	r2, [sl, #1630]	; 0x65e
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8007868:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 800786c:	0512      	lsls	r2, r2, #20
 800786e:	ebc2 3280 	rsb	r2, r2, r0, lsl #14
                                            (int32_t) dig_H2 + 8192) >> 14));
 8007872:	f9ba 065a 	ldrsh.w	r0, [sl, #1626]	; 0x65a
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8007876:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800787a:	fb00 f303 	mul.w	r3, r0, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 800787e:	f9ba 0660 	ldrsh.w	r0, [sl, #1632]	; 0x660
                                            (int32_t) dig_H2 + 8192) >> 14));
 8007882:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8007886:	fb01 2210 	mls	r2, r1, r0, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 800788a:	139b      	asrs	r3, r3, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 800788c:	0bd2      	lsrs	r2, r2, #15
 800788e:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8007892:	13da      	asrs	r2, r3, #15
 8007894:	fb02 f202 	mul.w	r2, r2, r2
 8007898:	f8ba 1658 	ldrh.w	r1, [sl, #1624]	; 0x658
 800789c:	11d0      	asrs	r0, r2, #7
 800789e:	fb01 f000 	mul.w	r0, r1, r0
 80078a2:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 80078a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 80078aa:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 80078ae:	bfa8      	it	ge
 80078b0:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
    humf = (float) (v_x1 >> 12);
 80078b4:	1300      	asrs	r0, r0, #12
 80078b6:	f7fe fa89 	bl	8005dcc <__aeabi_i2f>
    return round_nth((humf / 1024.0f), n);
 80078ba:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 80078be:	f7fe f917 	bl	8005af0 <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80078c2:	f7fd fd3d 	bl	8005340 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 80078c6:	2200      	movs	r2, #0
 80078c8:	4b56      	ldr	r3, [pc, #344]	; (8007a24 <main+0x1b6c>)
 80078ca:	f7fd fd91 	bl	80053f0 <__aeabi_dmul>
 80078ce:	2200      	movs	r2, #0
 80078d0:	4b55      	ldr	r3, [pc, #340]	; (8007a28 <main+0x1b70>)
 80078d2:	f7fd fbd7 	bl	8005084 <__adddf3>
 80078d6:	f004 fe17 	bl	800c508 <floor>
 80078da:	a34b      	add	r3, pc, #300	; (adr r3, 8007a08 <main+0x1b50>)
 80078dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e0:	f7fd fd86 	bl	80053f0 <__aeabi_dmul>
 80078e4:	f7fe f87c 	bl	80059e0 <__aeabi_d2f>
	humidity = BME280_getHumidity(-1);
 80078e8:	f7fd fd2a 	bl	8005340 <__aeabi_f2d>
    cmd[0] = 0xF7; // press_msb
 80078ec:	23f7      	movs	r3, #247	; 0xf7
 80078ee:	e9ca 0146 	strd	r0, r1, [sl, #280]	; 0x118
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80078f2:	2201      	movs	r2, #1
 80078f4:	20ec      	movs	r0, #236	; 0xec
 80078f6:	a916      	add	r1, sp, #88	; 0x58
    cmd[0] = 0xF7; // press_msb
 80078f8:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80078fc:	f7fc f902 	bl	8003b04 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8007900:	2203      	movs	r2, #3
 8007902:	20ec      	movs	r0, #236	; 0xec
 8007904:	f10d 0159 	add.w	r1, sp, #89	; 0x59
 8007908:	f7fb fec6 	bl	8003698 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    var1 = (t_fine >> 1) - 64000;
 800790c:	1061      	asrs	r1, r4, #1
 800790e:	f5a1 417a 	sub.w	r1, r1, #64000	; 0xfa00
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8007912:	1088      	asrs	r0, r1, #2
 8007914:	fb00 f000 	mul.w	r0, r0, r0
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 8007918:	f9ba 3648 	ldrsh.w	r3, [sl, #1608]	; 0x648
 800791c:	f9ba 264a 	ldrsh.w	r2, [sl, #1610]	; 0x64a
 8007920:	fb01 f303 	mul.w	r3, r1, r3
 8007924:	1344      	asrs	r4, r0, #13
 8007926:	fb04 f202 	mul.w	r2, r4, r2
 800792a:	105b      	asrs	r3, r3, #1
 800792c:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 8007930:	149b      	asrs	r3, r3, #18
    var1 = ((32768 + var1) * dig_P1) >> 15;
 8007932:	f8ba 2646 	ldrh.w	r2, [sl, #1606]	; 0x646
 8007936:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800793a:	fb02 f303 	mul.w	r3, r2, r3
    if (var1 == 0) {
 800793e:	13da      	asrs	r2, r3, #15
 8007940:	d059      	beq.n	80079f6 <main+0x1b3e>
    var2 = var2 + ((var1 * dig_P5) << 1);
 8007942:	f9ba 364e 	ldrsh.w	r3, [sl, #1614]	; 0x64e
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8007946:	12c0      	asrs	r0, r0, #11
    var2 = var2 + ((var1 * dig_P5) << 1);
 8007948:	fb03 f101 	mul.w	r1, r3, r1
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 800794c:	f9ba 3650 	ldrsh.w	r3, [sl, #1616]	; 0x650
    var2 = var2 + ((var1 * dig_P5) << 1);
 8007950:	0049      	lsls	r1, r1, #1
 8007952:	fb03 1100 	mla	r1, r3, r0, r1
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8007956:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800795a:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
 800795e:	091b      	lsrs	r3, r3, #4
 8007960:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8007964:	f9ba 064c 	ldrsh.w	r0, [sl, #1612]	; 0x64c
 8007968:	0400      	lsls	r0, r0, #16
 800796a:	eb00 01a1 	add.w	r1, r0, r1, asr #2
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800796e:	f89d 0059 	ldrb.w	r0, [sp, #89]	; 0x59
 8007972:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 8007976:	eb03 3321 	add.w	r3, r3, r1, asr #12
 800797a:	492c      	ldr	r1, [pc, #176]	; (8007a2c <main+0x1b74>)
 800797c:	fb01 f303 	mul.w	r3, r1, r3
 8007980:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8007984:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    if (press < 0x80000000) {
 8007988:	2b00      	cmp	r3, #0
        press = (press / var1) * 2;
 800798a:	bfb3      	iteet	lt
 800798c:	fbb3 f3f2 	udivlt	r3, r3, r2
        press = (press << 1) / var1;
 8007990:	005b      	lslge	r3, r3, #1
 8007992:	fbb3 f3f2 	udivge	r3, r3, r2
        press = (press / var1) * 2;
 8007996:	005b      	lsllt	r3, r3, #1
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8007998:	08da      	lsrs	r2, r3, #3
 800799a:	fb02 f202 	mul.w	r2, r2, r2
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800799e:	f9ba 1654 	ldrsh.w	r1, [sl, #1620]	; 0x654
 80079a2:	0898      	lsrs	r0, r3, #2
 80079a4:	fb01 f000 	mul.w	r0, r1, r0
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 80079a8:	f9ba 1656 	ldrsh.w	r1, [sl, #1622]	; 0x656
 80079ac:	0b52      	lsrs	r2, r2, #13
 80079ae:	fb01 f202 	mul.w	r2, r1, r2
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 80079b2:	1340      	asrs	r0, r0, #13
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 80079b4:	eb00 3022 	add.w	r0, r0, r2, asr #12
 80079b8:	f9ba 2652 	ldrsh.w	r2, [sl, #1618]	; 0x652
 80079bc:	4410      	add	r0, r2
    pressf = (float) press;
 80079be:	eb03 1020 	add.w	r0, r3, r0, asr #4
 80079c2:	f7fe f9ff 	bl	8005dc4 <__aeabi_ui2f>
    return (pressf / 100.0f);
 80079c6:	4916      	ldr	r1, [pc, #88]	; (8007a20 <main+0x1b68>)
 80079c8:	f7fe f892 	bl	8005af0 <__aeabi_fmul>
	pressure = (uint16_t)BME280_getPressure();
 80079cc:	f7fe fa52 	bl	8005e74 <__aeabi_f2uiz>
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 80079d0:	f46f 7196 	mvn.w	r1, #300	; 0x12c
 80079d4:	f240 321e 	movw	r2, #798	; 0x31e
	pressure = (uint16_t)BME280_getPressure();
 80079d8:	b283      	uxth	r3, r0
 80079da:	f8aa 3132 	strh.w	r3, [sl, #306]	; 0x132
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 80079de:	440b      	add	r3, r1
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d801      	bhi.n	80079ea <main+0x1b32>
 80079e6:	f7fc fbd3 	bl	8004190 <bme280.part.0>
			rtcSecLast = rtcSec;
 80079ea:	f89a 3666 	ldrb.w	r3, [sl, #1638]	; 0x666
 80079ee:	4a09      	ldr	r2, [pc, #36]	; (8007a14 <main+0x1b5c>)
 80079f0:	7213      	strb	r3, [r2, #8]
	{
 80079f2:	f7ff b990 	b.w	8006d16 <main+0xe5e>
	pressure = (uint16_t)BME280_getPressure();
 80079f6:	f8aa 2132 	strh.w	r2, [sl, #306]	; 0x132
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 80079fa:	e7f6      	b.n	80079ea <main+0x1b32>
    GPIOx->BSRR = GPIO_Pin;
 80079fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a00:	4a03      	ldr	r2, [pc, #12]	; (8007a10 <main+0x1b58>)
 8007a02:	6113      	str	r3, [r2, #16]
 8007a04:	e698      	b.n	8007738 <main+0x1880>
 8007a06:	bf00      	nop
 8007a08:	9999999a 	.word	0x9999999a
 8007a0c:	3fb99999 	.word	0x3fb99999
 8007a10:	40011000 	.word	0x40011000
 8007a14:	20000000 	.word	0x20000000
 8007a18:	0801de1c 	.word	0x0801de1c
 8007a1c:	00ffa500 	.word	0x00ffa500
 8007a20:	3c23d70a 	.word	0x3c23d70a
 8007a24:	40240000 	.word	0x40240000
 8007a28:	3fe00000 	.word	0x3fe00000
 8007a2c:	fffff3cb 	.word	0xfffff3cb
					sprintf(clockPrint, "%02d", rtcHrsLast);
 8007a30:	4961      	ldr	r1, [pc, #388]	; (8007bb8 <main+0x1d00>)
 8007a32:	a81e      	add	r0, sp, #120	; 0x78
 8007a34:	f000 ff9c 	bl	8008970 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8007a38:	2200      	movs	r2, #0
 8007a3a:	a91e      	add	r1, sp, #120	; 0x78
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	f7fc fb13 	bl	8004068 <LCD_Font.constprop.1>
					sprintf(clockPrint, "%02d", rtcHrs);
 8007a42:	f89a 2134 	ldrb.w	r2, [sl, #308]	; 0x134
 8007a46:	495c      	ldr	r1, [pc, #368]	; (8007bb8 <main+0x1d00>)
 8007a48:	a81e      	add	r0, sp, #120	; 0x78
 8007a4a:	f000 ff91 	bl	8008970 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8007a4e:	4a5b      	ldr	r2, [pc, #364]	; (8007bbc <main+0x1d04>)
 8007a50:	2000      	movs	r0, #0
 8007a52:	a91e      	add	r1, sp, #120	; 0x78
 8007a54:	f7fc fb08 	bl	8004068 <LCD_Font.constprop.1>
					if (rtcDayLast != rtcDay) {
 8007a58:	f89a 276c 	ldrb.w	r2, [sl, #1900]	; 0x76c
 8007a5c:	f89a 3668 	ldrb.w	r3, [sl, #1640]	; 0x668
 8007a60:	429a      	cmp	r2, r3
 8007a62:	f000 808d 	beq.w	8007b80 <main+0x1cc8>
						sprintf(clockPrint, "%02d", rtcDateLast);
 8007a66:	f89a 276d 	ldrb.w	r2, [sl, #1901]	; 0x76d
 8007a6a:	4953      	ldr	r1, [pc, #332]	; (8007bb8 <main+0x1d00>)
 8007a6c:	a81e      	add	r0, sp, #120	; 0x78
 8007a6e:	f000 ff7f 	bl	8008970 <siprintf>
						LCD_Font(380, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8007a72:	2300      	movs	r3, #0
 8007a74:	2128      	movs	r1, #40	; 0x28
 8007a76:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8007a7a:	aa1e      	add	r2, sp, #120	; 0x78
 8007a7c:	f7fc fb3e 	bl	80040fc <LCD_Font.constprop.2>
						sprintf(clockPrint, "%02d", rtcDate);
 8007a80:	f89a 2669 	ldrb.w	r2, [sl, #1641]	; 0x669
 8007a84:	494c      	ldr	r1, [pc, #304]	; (8007bb8 <main+0x1d00>)
 8007a86:	a81e      	add	r0, sp, #120	; 0x78
 8007a88:	f000 ff72 	bl	8008970 <siprintf>
						LCD_Font(380, 40, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 8007a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a90:	2128      	movs	r1, #40	; 0x28
 8007a92:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8007a96:	aa1e      	add	r2, sp, #120	; 0x78
 8007a98:	f7fc fb30 	bl	80040fc <LCD_Font.constprop.2>
						if (rtcDate < 10) LCD_Font(380, 40, "0", &DejaVu_Sans_48, 1, BLACK);
 8007a9c:	f89a 3669 	ldrb.w	r3, [sl, #1641]	; 0x669
 8007aa0:	2b09      	cmp	r3, #9
 8007aa2:	f240 8081 	bls.w	8007ba8 <main+0x1cf0>
						LCD_Font(370, 90, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 8007aa6:	260c      	movs	r6, #12
 8007aa8:	f89a 466a 	ldrb.w	r4, [sl, #1642]	; 0x66a
 8007aac:	2300      	movs	r3, #0
 8007aae:	f104 020a 	add.w	r2, r4, #10
 8007ab2:	fbb2 f7f6 	udiv	r7, r2, r6
 8007ab6:	fb06 2217 	mls	r2, r6, r7, r2
 8007aba:	4f41      	ldr	r7, [pc, #260]	; (8007bc0 <main+0x1d08>)
 8007abc:	215a      	movs	r1, #90	; 0x5a
 8007abe:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8007ac2:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8007ac6:	f8d2 25f8 	ldr.w	r2, [r2, #1528]	; 0x5f8
						LCD_Font(370, 90, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8007aca:	340b      	adds	r4, #11
						LCD_Font(370, 90, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 8007acc:	f7fc fb16 	bl	80040fc <LCD_Font.constprop.2>
						LCD_Font(370, 90, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8007ad0:	fbb4 f3f6 	udiv	r3, r4, r6
						LCD_Font(20, 145, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 8007ad4:	2507      	movs	r5, #7
						LCD_Font(370, 90, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8007ad6:	fb06 4413 	mls	r4, r6, r3, r4
 8007ada:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 8007ade:	f8d3 25f8 	ldr.w	r2, [r3, #1528]	; 0x5f8
 8007ae2:	215a      	movs	r1, #90	; 0x5a
 8007ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ae8:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8007aec:	f7fc fb06 	bl	80040fc <LCD_Font.constprop.2>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast +2000);
 8007af0:	f89a 376f 	ldrb.w	r3, [sl, #1903]	; 0x76f
 8007af4:	f89a 276d 	ldrb.w	r2, [sl, #1901]	; 0x76d
 8007af8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007afc:	4931      	ldr	r1, [pc, #196]	; (8007bc4 <main+0x1d0c>)
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	a81e      	add	r0, sp, #120	; 0x78
 8007b02:	f89a 376e 	ldrb.w	r3, [sl, #1902]	; 0x76e
 8007b06:	f000 ff33 	bl	8008970 <siprintf>
						LCD_Font(180, 145, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	20b4      	movs	r0, #180	; 0xb4
 8007b0e:	a91e      	add	r1, sp, #120	; 0x78
 8007b10:	f7fc fa60 	bl	8003fd4 <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear +2000);
 8007b14:	f89a 366b 	ldrb.w	r3, [sl, #1643]	; 0x66b
 8007b18:	f89a 2669 	ldrb.w	r2, [sl, #1641]	; 0x669
 8007b1c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007b20:	4928      	ldr	r1, [pc, #160]	; (8007bc4 <main+0x1d0c>)
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	a81e      	add	r0, sp, #120	; 0x78
 8007b26:	f89a 366a 	ldrb.w	r3, [sl, #1642]	; 0x66a
 8007b2a:	f000 ff21 	bl	8008970 <siprintf>
						LCD_Font(180, 145, clockPrint, &DejaVu_Sans_48, 1, BLUE);
 8007b2e:	22ff      	movs	r2, #255	; 0xff
 8007b30:	20b4      	movs	r0, #180	; 0xb4
 8007b32:	a91e      	add	r1, sp, #120	; 0x78
 8007b34:	f7fc fa4e 	bl	8003fd4 <LCD_Font.constprop.0>
						LCD_Font(20, 145, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 8007b38:	f89a 4668 	ldrb.w	r4, [sl, #1640]	; 0x668
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	1d63      	adds	r3, r4, #5
 8007b40:	fbb3 f1f5 	udiv	r1, r3, r5
 8007b44:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007b48:	1a5b      	subs	r3, r3, r1
 8007b4a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007b4e:	f8d3 1628 	ldr.w	r1, [r3, #1576]	; 0x628
 8007b52:	2014      	movs	r0, #20
 8007b54:	f7fc fa3e 	bl	8003fd4 <LCD_Font.constprop.0>
						LCD_Font(20, 145, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 8007b58:	1da3      	adds	r3, r4, #6
 8007b5a:	fbb3 f5f5 	udiv	r5, r3, r5
 8007b5e:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8007b62:	1b5b      	subs	r3, r3, r5
 8007b64:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007b68:	f8d3 1628 	ldr.w	r1, [r3, #1576]	; 0x628
 8007b6c:	22ff      	movs	r2, #255	; 0xff
 8007b6e:	2014      	movs	r0, #20
 8007b70:	f7fc fa30 	bl	8003fd4 <LCD_Font.constprop.0>
						rtcDateLast = rtcDate;
 8007b74:	f89a 3669 	ldrb.w	r3, [sl, #1641]	; 0x669
						rtcDayLast = rtcDay;
 8007b78:	f88a 476c 	strb.w	r4, [sl, #1900]	; 0x76c
						rtcDateLast = rtcDate;
 8007b7c:	f88a 376d 	strb.w	r3, [sl, #1901]	; 0x76d
	b_ = radius;
 8007b80:	2300      	movs	r3, #0
					for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8007b82:	4a11      	ldr	r2, [pc, #68]	; (8007bc8 <main+0x1d10>)
 8007b84:	6353      	str	r3, [r2, #52]	; 0x34
 8007b86:	3301      	adds	r3, #1
 8007b88:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8007b8c:	d1fa      	bne.n	8007b84 <main+0x1ccc>
					rtcMonthLast = rtcMonth;
 8007b8e:	f89a 366a 	ldrb.w	r3, [sl, #1642]	; 0x66a
					rtcHrsLast = rtcHrs;
 8007b92:	4a0e      	ldr	r2, [pc, #56]	; (8007bcc <main+0x1d14>)
					rtcMonthLast = rtcMonth;
 8007b94:	f88a 376e 	strb.w	r3, [sl, #1902]	; 0x76e
					rtcYearLast = rtcYear;
 8007b98:	f89a 366b 	ldrb.w	r3, [sl, #1643]	; 0x66b
 8007b9c:	f88a 376f 	strb.w	r3, [sl, #1903]	; 0x76f
					rtcHrsLast = rtcHrs;
 8007ba0:	f89a 3134 	ldrb.w	r3, [sl, #308]	; 0x134
 8007ba4:	7293      	strb	r3, [r2, #10]
 8007ba6:	e5e6      	b.n	8007776 <main+0x18be>
						if (rtcDate < 10) LCD_Font(380, 40, "0", &DejaVu_Sans_48, 1, BLACK);
 8007ba8:	2300      	movs	r3, #0
 8007baa:	2128      	movs	r1, #40	; 0x28
 8007bac:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8007bb0:	4a07      	ldr	r2, [pc, #28]	; (8007bd0 <main+0x1d18>)
 8007bb2:	f7fc faa3 	bl	80040fc <LCD_Font.constprop.2>
 8007bb6:	e776      	b.n	8007aa6 <main+0x1bee>
 8007bb8:	0801de1c 	.word	0x0801de1c
 8007bbc:	00ffa500 	.word	0x00ffa500
 8007bc0:	0800c620 	.word	0x0800c620
 8007bc4:	0801de50 	.word	0x0801de50
 8007bc8:	40012c00 	.word	0x40012c00
 8007bcc:	20000000 	.word	0x20000000
 8007bd0:	0801de4c 	.word	0x0801de4c

08007bd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007bd4:	480c      	ldr	r0, [pc, #48]	; (8007c08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007bd6:	490d      	ldr	r1, [pc, #52]	; (8007c0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007bd8:	4a0d      	ldr	r2, [pc, #52]	; (8007c10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007bdc:	e002      	b.n	8007be4 <LoopCopyDataInit>

08007bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007be2:	3304      	adds	r3, #4

08007be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007be8:	d3f9      	bcc.n	8007bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007bea:	4a0a      	ldr	r2, [pc, #40]	; (8007c14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007bec:	4c0a      	ldr	r4, [pc, #40]	; (8007c18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007bf0:	e001      	b.n	8007bf6 <LoopFillZerobss>

08007bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007bf4:	3204      	adds	r2, #4

08007bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007bf8:	d3fb      	bcc.n	8007bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007bfa:	f7fd fa33 	bl	8005064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007bfe:	f000 f819 	bl	8007c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007c02:	f7fe f959 	bl	8005eb8 <main>
  bx lr
 8007c06:	4770      	bx	lr
  ldr r0, =_sdata
 8007c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007c0c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8007c10:	0801e39c 	.word	0x0801e39c
  ldr r2, =_sbss
 8007c14:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8007c18:	20000988 	.word	0x20000988

08007c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007c1c:	e7fe      	b.n	8007c1c <ADC1_2_IRQHandler>

08007c1e <atoi>:
 8007c1e:	220a      	movs	r2, #10
 8007c20:	2100      	movs	r1, #0
 8007c22:	f001 bd55 	b.w	80096d0 <strtol>
	...

08007c28 <__errno>:
 8007c28:	4b01      	ldr	r3, [pc, #4]	; (8007c30 <__errno+0x8>)
 8007c2a:	6818      	ldr	r0, [r3, #0]
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	2000000c 	.word	0x2000000c

08007c34 <__libc_init_array>:
 8007c34:	b570      	push	{r4, r5, r6, lr}
 8007c36:	2600      	movs	r6, #0
 8007c38:	4d0c      	ldr	r5, [pc, #48]	; (8007c6c <__libc_init_array+0x38>)
 8007c3a:	4c0d      	ldr	r4, [pc, #52]	; (8007c70 <__libc_init_array+0x3c>)
 8007c3c:	1b64      	subs	r4, r4, r5
 8007c3e:	10a4      	asrs	r4, r4, #2
 8007c40:	42a6      	cmp	r6, r4
 8007c42:	d109      	bne.n	8007c58 <__libc_init_array+0x24>
 8007c44:	f004 fce0 	bl	800c608 <_init>
 8007c48:	2600      	movs	r6, #0
 8007c4a:	4d0a      	ldr	r5, [pc, #40]	; (8007c74 <__libc_init_array+0x40>)
 8007c4c:	4c0a      	ldr	r4, [pc, #40]	; (8007c78 <__libc_init_array+0x44>)
 8007c4e:	1b64      	subs	r4, r4, r5
 8007c50:	10a4      	asrs	r4, r4, #2
 8007c52:	42a6      	cmp	r6, r4
 8007c54:	d105      	bne.n	8007c62 <__libc_init_array+0x2e>
 8007c56:	bd70      	pop	{r4, r5, r6, pc}
 8007c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c5c:	4798      	blx	r3
 8007c5e:	3601      	adds	r6, #1
 8007c60:	e7ee      	b.n	8007c40 <__libc_init_array+0xc>
 8007c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c66:	4798      	blx	r3
 8007c68:	3601      	adds	r6, #1
 8007c6a:	e7f2      	b.n	8007c52 <__libc_init_array+0x1e>
 8007c6c:	0801e394 	.word	0x0801e394
 8007c70:	0801e394 	.word	0x0801e394
 8007c74:	0801e394 	.word	0x0801e394
 8007c78:	0801e398 	.word	0x0801e398

08007c7c <memset>:
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	4402      	add	r2, r0
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d100      	bne.n	8007c86 <memset+0xa>
 8007c84:	4770      	bx	lr
 8007c86:	f803 1b01 	strb.w	r1, [r3], #1
 8007c8a:	e7f9      	b.n	8007c80 <memset+0x4>

08007c8c <__cvt>:
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c92:	461f      	mov	r7, r3
 8007c94:	bfbb      	ittet	lt
 8007c96:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007c9a:	461f      	movlt	r7, r3
 8007c9c:	2300      	movge	r3, #0
 8007c9e:	232d      	movlt	r3, #45	; 0x2d
 8007ca0:	b088      	sub	sp, #32
 8007ca2:	4614      	mov	r4, r2
 8007ca4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ca6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007ca8:	7013      	strb	r3, [r2, #0]
 8007caa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007cb0:	f023 0820 	bic.w	r8, r3, #32
 8007cb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007cb8:	d005      	beq.n	8007cc6 <__cvt+0x3a>
 8007cba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007cbe:	d100      	bne.n	8007cc2 <__cvt+0x36>
 8007cc0:	3501      	adds	r5, #1
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	e000      	b.n	8007cc8 <__cvt+0x3c>
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	aa07      	add	r2, sp, #28
 8007cca:	9204      	str	r2, [sp, #16]
 8007ccc:	aa06      	add	r2, sp, #24
 8007cce:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007cd2:	e9cd 3500 	strd	r3, r5, [sp]
 8007cd6:	4622      	mov	r2, r4
 8007cd8:	463b      	mov	r3, r7
 8007cda:	f001 fd91 	bl	8009800 <_dtoa_r>
 8007cde:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ce2:	4606      	mov	r6, r0
 8007ce4:	d102      	bne.n	8007cec <__cvt+0x60>
 8007ce6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ce8:	07db      	lsls	r3, r3, #31
 8007cea:	d522      	bpl.n	8007d32 <__cvt+0xa6>
 8007cec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007cf0:	eb06 0905 	add.w	r9, r6, r5
 8007cf4:	d110      	bne.n	8007d18 <__cvt+0x8c>
 8007cf6:	7833      	ldrb	r3, [r6, #0]
 8007cf8:	2b30      	cmp	r3, #48	; 0x30
 8007cfa:	d10a      	bne.n	8007d12 <__cvt+0x86>
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	2300      	movs	r3, #0
 8007d00:	4620      	mov	r0, r4
 8007d02:	4639      	mov	r1, r7
 8007d04:	f7fd fddc 	bl	80058c0 <__aeabi_dcmpeq>
 8007d08:	b918      	cbnz	r0, 8007d12 <__cvt+0x86>
 8007d0a:	f1c5 0501 	rsb	r5, r5, #1
 8007d0e:	f8ca 5000 	str.w	r5, [sl]
 8007d12:	f8da 3000 	ldr.w	r3, [sl]
 8007d16:	4499      	add	r9, r3
 8007d18:	2200      	movs	r2, #0
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	4639      	mov	r1, r7
 8007d20:	f7fd fdce 	bl	80058c0 <__aeabi_dcmpeq>
 8007d24:	b108      	cbz	r0, 8007d2a <__cvt+0x9e>
 8007d26:	f8cd 901c 	str.w	r9, [sp, #28]
 8007d2a:	2230      	movs	r2, #48	; 0x30
 8007d2c:	9b07      	ldr	r3, [sp, #28]
 8007d2e:	454b      	cmp	r3, r9
 8007d30:	d307      	bcc.n	8007d42 <__cvt+0xb6>
 8007d32:	4630      	mov	r0, r6
 8007d34:	9b07      	ldr	r3, [sp, #28]
 8007d36:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007d38:	1b9b      	subs	r3, r3, r6
 8007d3a:	6013      	str	r3, [r2, #0]
 8007d3c:	b008      	add	sp, #32
 8007d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d42:	1c59      	adds	r1, r3, #1
 8007d44:	9107      	str	r1, [sp, #28]
 8007d46:	701a      	strb	r2, [r3, #0]
 8007d48:	e7f0      	b.n	8007d2c <__cvt+0xa0>

08007d4a <__exponent>:
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d4e:	2900      	cmp	r1, #0
 8007d50:	f803 2b02 	strb.w	r2, [r3], #2
 8007d54:	bfb6      	itet	lt
 8007d56:	222d      	movlt	r2, #45	; 0x2d
 8007d58:	222b      	movge	r2, #43	; 0x2b
 8007d5a:	4249      	neglt	r1, r1
 8007d5c:	2909      	cmp	r1, #9
 8007d5e:	7042      	strb	r2, [r0, #1]
 8007d60:	dd2b      	ble.n	8007dba <__exponent+0x70>
 8007d62:	f10d 0407 	add.w	r4, sp, #7
 8007d66:	46a4      	mov	ip, r4
 8007d68:	270a      	movs	r7, #10
 8007d6a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007d6e:	460a      	mov	r2, r1
 8007d70:	46a6      	mov	lr, r4
 8007d72:	fb07 1516 	mls	r5, r7, r6, r1
 8007d76:	2a63      	cmp	r2, #99	; 0x63
 8007d78:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007d7c:	4631      	mov	r1, r6
 8007d7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007d82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007d86:	dcf0      	bgt.n	8007d6a <__exponent+0x20>
 8007d88:	3130      	adds	r1, #48	; 0x30
 8007d8a:	f1ae 0502 	sub.w	r5, lr, #2
 8007d8e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007d92:	4629      	mov	r1, r5
 8007d94:	1c44      	adds	r4, r0, #1
 8007d96:	4561      	cmp	r1, ip
 8007d98:	d30a      	bcc.n	8007db0 <__exponent+0x66>
 8007d9a:	f10d 0209 	add.w	r2, sp, #9
 8007d9e:	eba2 020e 	sub.w	r2, r2, lr
 8007da2:	4565      	cmp	r5, ip
 8007da4:	bf88      	it	hi
 8007da6:	2200      	movhi	r2, #0
 8007da8:	4413      	add	r3, r2
 8007daa:	1a18      	subs	r0, r3, r0
 8007dac:	b003      	add	sp, #12
 8007dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007db0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007db4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007db8:	e7ed      	b.n	8007d96 <__exponent+0x4c>
 8007dba:	2330      	movs	r3, #48	; 0x30
 8007dbc:	3130      	adds	r1, #48	; 0x30
 8007dbe:	7083      	strb	r3, [r0, #2]
 8007dc0:	70c1      	strb	r1, [r0, #3]
 8007dc2:	1d03      	adds	r3, r0, #4
 8007dc4:	e7f1      	b.n	8007daa <__exponent+0x60>
	...

08007dc8 <_printf_float>:
 8007dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dcc:	b091      	sub	sp, #68	; 0x44
 8007dce:	460c      	mov	r4, r1
 8007dd0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007dd4:	4616      	mov	r6, r2
 8007dd6:	461f      	mov	r7, r3
 8007dd8:	4605      	mov	r5, r0
 8007dda:	f002 fe65 	bl	800aaa8 <_localeconv_r>
 8007dde:	6803      	ldr	r3, [r0, #0]
 8007de0:	4618      	mov	r0, r3
 8007de2:	9309      	str	r3, [sp, #36]	; 0x24
 8007de4:	f7fd f940 	bl	8005068 <strlen>
 8007de8:	2300      	movs	r3, #0
 8007dea:	930e      	str	r3, [sp, #56]	; 0x38
 8007dec:	f8d8 3000 	ldr.w	r3, [r8]
 8007df0:	900a      	str	r0, [sp, #40]	; 0x28
 8007df2:	3307      	adds	r3, #7
 8007df4:	f023 0307 	bic.w	r3, r3, #7
 8007df8:	f103 0208 	add.w	r2, r3, #8
 8007dfc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007e00:	f8d4 b000 	ldr.w	fp, [r4]
 8007e04:	f8c8 2000 	str.w	r2, [r8]
 8007e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e10:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007e14:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007e18:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e1e:	4640      	mov	r0, r8
 8007e20:	4b9c      	ldr	r3, [pc, #624]	; (8008094 <_printf_float+0x2cc>)
 8007e22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e24:	f7fd fd7e 	bl	8005924 <__aeabi_dcmpun>
 8007e28:	bb70      	cbnz	r0, 8007e88 <_printf_float+0xc0>
 8007e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2e:	4640      	mov	r0, r8
 8007e30:	4b98      	ldr	r3, [pc, #608]	; (8008094 <_printf_float+0x2cc>)
 8007e32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e34:	f7fd fd58 	bl	80058e8 <__aeabi_dcmple>
 8007e38:	bb30      	cbnz	r0, 8007e88 <_printf_float+0xc0>
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	4640      	mov	r0, r8
 8007e40:	4651      	mov	r1, sl
 8007e42:	f7fd fd47 	bl	80058d4 <__aeabi_dcmplt>
 8007e46:	b110      	cbz	r0, 8007e4e <_printf_float+0x86>
 8007e48:	232d      	movs	r3, #45	; 0x2d
 8007e4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e4e:	4b92      	ldr	r3, [pc, #584]	; (8008098 <_printf_float+0x2d0>)
 8007e50:	4892      	ldr	r0, [pc, #584]	; (800809c <_printf_float+0x2d4>)
 8007e52:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007e56:	bf94      	ite	ls
 8007e58:	4698      	movls	r8, r3
 8007e5a:	4680      	movhi	r8, r0
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	f04f 0a00 	mov.w	sl, #0
 8007e62:	6123      	str	r3, [r4, #16]
 8007e64:	f02b 0304 	bic.w	r3, fp, #4
 8007e68:	6023      	str	r3, [r4, #0]
 8007e6a:	4633      	mov	r3, r6
 8007e6c:	4621      	mov	r1, r4
 8007e6e:	4628      	mov	r0, r5
 8007e70:	9700      	str	r7, [sp, #0]
 8007e72:	aa0f      	add	r2, sp, #60	; 0x3c
 8007e74:	f000 f9d4 	bl	8008220 <_printf_common>
 8007e78:	3001      	adds	r0, #1
 8007e7a:	f040 8090 	bne.w	8007f9e <_printf_float+0x1d6>
 8007e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e82:	b011      	add	sp, #68	; 0x44
 8007e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e88:	4642      	mov	r2, r8
 8007e8a:	4653      	mov	r3, sl
 8007e8c:	4640      	mov	r0, r8
 8007e8e:	4651      	mov	r1, sl
 8007e90:	f7fd fd48 	bl	8005924 <__aeabi_dcmpun>
 8007e94:	b148      	cbz	r0, 8007eaa <_printf_float+0xe2>
 8007e96:	f1ba 0f00 	cmp.w	sl, #0
 8007e9a:	bfb8      	it	lt
 8007e9c:	232d      	movlt	r3, #45	; 0x2d
 8007e9e:	4880      	ldr	r0, [pc, #512]	; (80080a0 <_printf_float+0x2d8>)
 8007ea0:	bfb8      	it	lt
 8007ea2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007ea6:	4b7f      	ldr	r3, [pc, #508]	; (80080a4 <_printf_float+0x2dc>)
 8007ea8:	e7d3      	b.n	8007e52 <_printf_float+0x8a>
 8007eaa:	6863      	ldr	r3, [r4, #4]
 8007eac:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	d142      	bne.n	8007f3a <_printf_float+0x172>
 8007eb4:	2306      	movs	r3, #6
 8007eb6:	6063      	str	r3, [r4, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	9206      	str	r2, [sp, #24]
 8007ebc:	aa0e      	add	r2, sp, #56	; 0x38
 8007ebe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007ec2:	aa0d      	add	r2, sp, #52	; 0x34
 8007ec4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007ec8:	9203      	str	r2, [sp, #12]
 8007eca:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007ece:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007ed2:	6023      	str	r3, [r4, #0]
 8007ed4:	6863      	ldr	r3, [r4, #4]
 8007ed6:	4642      	mov	r2, r8
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	4628      	mov	r0, r5
 8007edc:	4653      	mov	r3, sl
 8007ede:	910b      	str	r1, [sp, #44]	; 0x2c
 8007ee0:	f7ff fed4 	bl	8007c8c <__cvt>
 8007ee4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ee6:	4680      	mov	r8, r0
 8007ee8:	2947      	cmp	r1, #71	; 0x47
 8007eea:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007eec:	d108      	bne.n	8007f00 <_printf_float+0x138>
 8007eee:	1cc8      	adds	r0, r1, #3
 8007ef0:	db02      	blt.n	8007ef8 <_printf_float+0x130>
 8007ef2:	6863      	ldr	r3, [r4, #4]
 8007ef4:	4299      	cmp	r1, r3
 8007ef6:	dd40      	ble.n	8007f7a <_printf_float+0x1b2>
 8007ef8:	f1a9 0902 	sub.w	r9, r9, #2
 8007efc:	fa5f f989 	uxtb.w	r9, r9
 8007f00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007f04:	d81f      	bhi.n	8007f46 <_printf_float+0x17e>
 8007f06:	464a      	mov	r2, r9
 8007f08:	3901      	subs	r1, #1
 8007f0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f0e:	910d      	str	r1, [sp, #52]	; 0x34
 8007f10:	f7ff ff1b 	bl	8007d4a <__exponent>
 8007f14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f16:	4682      	mov	sl, r0
 8007f18:	1813      	adds	r3, r2, r0
 8007f1a:	2a01      	cmp	r2, #1
 8007f1c:	6123      	str	r3, [r4, #16]
 8007f1e:	dc02      	bgt.n	8007f26 <_printf_float+0x15e>
 8007f20:	6822      	ldr	r2, [r4, #0]
 8007f22:	07d2      	lsls	r2, r2, #31
 8007f24:	d501      	bpl.n	8007f2a <_printf_float+0x162>
 8007f26:	3301      	adds	r3, #1
 8007f28:	6123      	str	r3, [r4, #16]
 8007f2a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d09b      	beq.n	8007e6a <_printf_float+0xa2>
 8007f32:	232d      	movs	r3, #45	; 0x2d
 8007f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f38:	e797      	b.n	8007e6a <_printf_float+0xa2>
 8007f3a:	2947      	cmp	r1, #71	; 0x47
 8007f3c:	d1bc      	bne.n	8007eb8 <_printf_float+0xf0>
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1ba      	bne.n	8007eb8 <_printf_float+0xf0>
 8007f42:	2301      	movs	r3, #1
 8007f44:	e7b7      	b.n	8007eb6 <_printf_float+0xee>
 8007f46:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007f4a:	d118      	bne.n	8007f7e <_printf_float+0x1b6>
 8007f4c:	2900      	cmp	r1, #0
 8007f4e:	6863      	ldr	r3, [r4, #4]
 8007f50:	dd0b      	ble.n	8007f6a <_printf_float+0x1a2>
 8007f52:	6121      	str	r1, [r4, #16]
 8007f54:	b913      	cbnz	r3, 8007f5c <_printf_float+0x194>
 8007f56:	6822      	ldr	r2, [r4, #0]
 8007f58:	07d0      	lsls	r0, r2, #31
 8007f5a:	d502      	bpl.n	8007f62 <_printf_float+0x19a>
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	440b      	add	r3, r1
 8007f60:	6123      	str	r3, [r4, #16]
 8007f62:	f04f 0a00 	mov.w	sl, #0
 8007f66:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f68:	e7df      	b.n	8007f2a <_printf_float+0x162>
 8007f6a:	b913      	cbnz	r3, 8007f72 <_printf_float+0x1aa>
 8007f6c:	6822      	ldr	r2, [r4, #0]
 8007f6e:	07d2      	lsls	r2, r2, #31
 8007f70:	d501      	bpl.n	8007f76 <_printf_float+0x1ae>
 8007f72:	3302      	adds	r3, #2
 8007f74:	e7f4      	b.n	8007f60 <_printf_float+0x198>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e7f2      	b.n	8007f60 <_printf_float+0x198>
 8007f7a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007f7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f80:	4299      	cmp	r1, r3
 8007f82:	db05      	blt.n	8007f90 <_printf_float+0x1c8>
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	6121      	str	r1, [r4, #16]
 8007f88:	07d8      	lsls	r0, r3, #31
 8007f8a:	d5ea      	bpl.n	8007f62 <_printf_float+0x19a>
 8007f8c:	1c4b      	adds	r3, r1, #1
 8007f8e:	e7e7      	b.n	8007f60 <_printf_float+0x198>
 8007f90:	2900      	cmp	r1, #0
 8007f92:	bfcc      	ite	gt
 8007f94:	2201      	movgt	r2, #1
 8007f96:	f1c1 0202 	rsble	r2, r1, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	e7e0      	b.n	8007f60 <_printf_float+0x198>
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	055a      	lsls	r2, r3, #21
 8007fa2:	d407      	bmi.n	8007fb4 <_printf_float+0x1ec>
 8007fa4:	6923      	ldr	r3, [r4, #16]
 8007fa6:	4642      	mov	r2, r8
 8007fa8:	4631      	mov	r1, r6
 8007faa:	4628      	mov	r0, r5
 8007fac:	47b8      	blx	r7
 8007fae:	3001      	adds	r0, #1
 8007fb0:	d12b      	bne.n	800800a <_printf_float+0x242>
 8007fb2:	e764      	b.n	8007e7e <_printf_float+0xb6>
 8007fb4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007fb8:	f240 80dd 	bls.w	8008176 <_printf_float+0x3ae>
 8007fbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f7fd fc7c 	bl	80058c0 <__aeabi_dcmpeq>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	d033      	beq.n	8008034 <_printf_float+0x26c>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	4631      	mov	r1, r6
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	4a35      	ldr	r2, [pc, #212]	; (80080a8 <_printf_float+0x2e0>)
 8007fd4:	47b8      	blx	r7
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	f43f af51 	beq.w	8007e7e <_printf_float+0xb6>
 8007fdc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	db02      	blt.n	8007fea <_printf_float+0x222>
 8007fe4:	6823      	ldr	r3, [r4, #0]
 8007fe6:	07d8      	lsls	r0, r3, #31
 8007fe8:	d50f      	bpl.n	800800a <_printf_float+0x242>
 8007fea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fee:	4631      	mov	r1, r6
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	47b8      	blx	r7
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	f43f af42 	beq.w	8007e7e <_printf_float+0xb6>
 8007ffa:	f04f 0800 	mov.w	r8, #0
 8007ffe:	f104 091a 	add.w	r9, r4, #26
 8008002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008004:	3b01      	subs	r3, #1
 8008006:	4543      	cmp	r3, r8
 8008008:	dc09      	bgt.n	800801e <_printf_float+0x256>
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	079b      	lsls	r3, r3, #30
 800800e:	f100 8102 	bmi.w	8008216 <_printf_float+0x44e>
 8008012:	68e0      	ldr	r0, [r4, #12]
 8008014:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008016:	4298      	cmp	r0, r3
 8008018:	bfb8      	it	lt
 800801a:	4618      	movlt	r0, r3
 800801c:	e731      	b.n	8007e82 <_printf_float+0xba>
 800801e:	2301      	movs	r3, #1
 8008020:	464a      	mov	r2, r9
 8008022:	4631      	mov	r1, r6
 8008024:	4628      	mov	r0, r5
 8008026:	47b8      	blx	r7
 8008028:	3001      	adds	r0, #1
 800802a:	f43f af28 	beq.w	8007e7e <_printf_float+0xb6>
 800802e:	f108 0801 	add.w	r8, r8, #1
 8008032:	e7e6      	b.n	8008002 <_printf_float+0x23a>
 8008034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008036:	2b00      	cmp	r3, #0
 8008038:	dc38      	bgt.n	80080ac <_printf_float+0x2e4>
 800803a:	2301      	movs	r3, #1
 800803c:	4631      	mov	r1, r6
 800803e:	4628      	mov	r0, r5
 8008040:	4a19      	ldr	r2, [pc, #100]	; (80080a8 <_printf_float+0x2e0>)
 8008042:	47b8      	blx	r7
 8008044:	3001      	adds	r0, #1
 8008046:	f43f af1a 	beq.w	8007e7e <_printf_float+0xb6>
 800804a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800804e:	4313      	orrs	r3, r2
 8008050:	d102      	bne.n	8008058 <_printf_float+0x290>
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	07d9      	lsls	r1, r3, #31
 8008056:	d5d8      	bpl.n	800800a <_printf_float+0x242>
 8008058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800805c:	4631      	mov	r1, r6
 800805e:	4628      	mov	r0, r5
 8008060:	47b8      	blx	r7
 8008062:	3001      	adds	r0, #1
 8008064:	f43f af0b 	beq.w	8007e7e <_printf_float+0xb6>
 8008068:	f04f 0900 	mov.w	r9, #0
 800806c:	f104 0a1a 	add.w	sl, r4, #26
 8008070:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008072:	425b      	negs	r3, r3
 8008074:	454b      	cmp	r3, r9
 8008076:	dc01      	bgt.n	800807c <_printf_float+0x2b4>
 8008078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800807a:	e794      	b.n	8007fa6 <_printf_float+0x1de>
 800807c:	2301      	movs	r3, #1
 800807e:	4652      	mov	r2, sl
 8008080:	4631      	mov	r1, r6
 8008082:	4628      	mov	r0, r5
 8008084:	47b8      	blx	r7
 8008086:	3001      	adds	r0, #1
 8008088:	f43f aef9 	beq.w	8007e7e <_printf_float+0xb6>
 800808c:	f109 0901 	add.w	r9, r9, #1
 8008090:	e7ee      	b.n	8008070 <_printf_float+0x2a8>
 8008092:	bf00      	nop
 8008094:	7fefffff 	.word	0x7fefffff
 8008098:	0801def4 	.word	0x0801def4
 800809c:	0801def8 	.word	0x0801def8
 80080a0:	0801df00 	.word	0x0801df00
 80080a4:	0801defc 	.word	0x0801defc
 80080a8:	0801df04 	.word	0x0801df04
 80080ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080b0:	429a      	cmp	r2, r3
 80080b2:	bfa8      	it	ge
 80080b4:	461a      	movge	r2, r3
 80080b6:	2a00      	cmp	r2, #0
 80080b8:	4691      	mov	r9, r2
 80080ba:	dc37      	bgt.n	800812c <_printf_float+0x364>
 80080bc:	f04f 0b00 	mov.w	fp, #0
 80080c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080c4:	f104 021a 	add.w	r2, r4, #26
 80080c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80080cc:	ebaa 0309 	sub.w	r3, sl, r9
 80080d0:	455b      	cmp	r3, fp
 80080d2:	dc33      	bgt.n	800813c <_printf_float+0x374>
 80080d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80080d8:	429a      	cmp	r2, r3
 80080da:	db3b      	blt.n	8008154 <_printf_float+0x38c>
 80080dc:	6823      	ldr	r3, [r4, #0]
 80080de:	07da      	lsls	r2, r3, #31
 80080e0:	d438      	bmi.n	8008154 <_printf_float+0x38c>
 80080e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80080e6:	eba3 020a 	sub.w	r2, r3, sl
 80080ea:	eba3 0901 	sub.w	r9, r3, r1
 80080ee:	4591      	cmp	r9, r2
 80080f0:	bfa8      	it	ge
 80080f2:	4691      	movge	r9, r2
 80080f4:	f1b9 0f00 	cmp.w	r9, #0
 80080f8:	dc34      	bgt.n	8008164 <_printf_float+0x39c>
 80080fa:	f04f 0800 	mov.w	r8, #0
 80080fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008102:	f104 0a1a 	add.w	sl, r4, #26
 8008106:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800810a:	1a9b      	subs	r3, r3, r2
 800810c:	eba3 0309 	sub.w	r3, r3, r9
 8008110:	4543      	cmp	r3, r8
 8008112:	f77f af7a 	ble.w	800800a <_printf_float+0x242>
 8008116:	2301      	movs	r3, #1
 8008118:	4652      	mov	r2, sl
 800811a:	4631      	mov	r1, r6
 800811c:	4628      	mov	r0, r5
 800811e:	47b8      	blx	r7
 8008120:	3001      	adds	r0, #1
 8008122:	f43f aeac 	beq.w	8007e7e <_printf_float+0xb6>
 8008126:	f108 0801 	add.w	r8, r8, #1
 800812a:	e7ec      	b.n	8008106 <_printf_float+0x33e>
 800812c:	4613      	mov	r3, r2
 800812e:	4631      	mov	r1, r6
 8008130:	4642      	mov	r2, r8
 8008132:	4628      	mov	r0, r5
 8008134:	47b8      	blx	r7
 8008136:	3001      	adds	r0, #1
 8008138:	d1c0      	bne.n	80080bc <_printf_float+0x2f4>
 800813a:	e6a0      	b.n	8007e7e <_printf_float+0xb6>
 800813c:	2301      	movs	r3, #1
 800813e:	4631      	mov	r1, r6
 8008140:	4628      	mov	r0, r5
 8008142:	920b      	str	r2, [sp, #44]	; 0x2c
 8008144:	47b8      	blx	r7
 8008146:	3001      	adds	r0, #1
 8008148:	f43f ae99 	beq.w	8007e7e <_printf_float+0xb6>
 800814c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800814e:	f10b 0b01 	add.w	fp, fp, #1
 8008152:	e7b9      	b.n	80080c8 <_printf_float+0x300>
 8008154:	4631      	mov	r1, r6
 8008156:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800815a:	4628      	mov	r0, r5
 800815c:	47b8      	blx	r7
 800815e:	3001      	adds	r0, #1
 8008160:	d1bf      	bne.n	80080e2 <_printf_float+0x31a>
 8008162:	e68c      	b.n	8007e7e <_printf_float+0xb6>
 8008164:	464b      	mov	r3, r9
 8008166:	4631      	mov	r1, r6
 8008168:	4628      	mov	r0, r5
 800816a:	eb08 020a 	add.w	r2, r8, sl
 800816e:	47b8      	blx	r7
 8008170:	3001      	adds	r0, #1
 8008172:	d1c2      	bne.n	80080fa <_printf_float+0x332>
 8008174:	e683      	b.n	8007e7e <_printf_float+0xb6>
 8008176:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008178:	2a01      	cmp	r2, #1
 800817a:	dc01      	bgt.n	8008180 <_printf_float+0x3b8>
 800817c:	07db      	lsls	r3, r3, #31
 800817e:	d537      	bpl.n	80081f0 <_printf_float+0x428>
 8008180:	2301      	movs	r3, #1
 8008182:	4642      	mov	r2, r8
 8008184:	4631      	mov	r1, r6
 8008186:	4628      	mov	r0, r5
 8008188:	47b8      	blx	r7
 800818a:	3001      	adds	r0, #1
 800818c:	f43f ae77 	beq.w	8007e7e <_printf_float+0xb6>
 8008190:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008194:	4631      	mov	r1, r6
 8008196:	4628      	mov	r0, r5
 8008198:	47b8      	blx	r7
 800819a:	3001      	adds	r0, #1
 800819c:	f43f ae6f 	beq.w	8007e7e <_printf_float+0xb6>
 80081a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081a4:	2200      	movs	r2, #0
 80081a6:	2300      	movs	r3, #0
 80081a8:	f7fd fb8a 	bl	80058c0 <__aeabi_dcmpeq>
 80081ac:	b9d8      	cbnz	r0, 80081e6 <_printf_float+0x41e>
 80081ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081b0:	f108 0201 	add.w	r2, r8, #1
 80081b4:	3b01      	subs	r3, #1
 80081b6:	4631      	mov	r1, r6
 80081b8:	4628      	mov	r0, r5
 80081ba:	47b8      	blx	r7
 80081bc:	3001      	adds	r0, #1
 80081be:	d10e      	bne.n	80081de <_printf_float+0x416>
 80081c0:	e65d      	b.n	8007e7e <_printf_float+0xb6>
 80081c2:	2301      	movs	r3, #1
 80081c4:	464a      	mov	r2, r9
 80081c6:	4631      	mov	r1, r6
 80081c8:	4628      	mov	r0, r5
 80081ca:	47b8      	blx	r7
 80081cc:	3001      	adds	r0, #1
 80081ce:	f43f ae56 	beq.w	8007e7e <_printf_float+0xb6>
 80081d2:	f108 0801 	add.w	r8, r8, #1
 80081d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081d8:	3b01      	subs	r3, #1
 80081da:	4543      	cmp	r3, r8
 80081dc:	dcf1      	bgt.n	80081c2 <_printf_float+0x3fa>
 80081de:	4653      	mov	r3, sl
 80081e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80081e4:	e6e0      	b.n	8007fa8 <_printf_float+0x1e0>
 80081e6:	f04f 0800 	mov.w	r8, #0
 80081ea:	f104 091a 	add.w	r9, r4, #26
 80081ee:	e7f2      	b.n	80081d6 <_printf_float+0x40e>
 80081f0:	2301      	movs	r3, #1
 80081f2:	4642      	mov	r2, r8
 80081f4:	e7df      	b.n	80081b6 <_printf_float+0x3ee>
 80081f6:	2301      	movs	r3, #1
 80081f8:	464a      	mov	r2, r9
 80081fa:	4631      	mov	r1, r6
 80081fc:	4628      	mov	r0, r5
 80081fe:	47b8      	blx	r7
 8008200:	3001      	adds	r0, #1
 8008202:	f43f ae3c 	beq.w	8007e7e <_printf_float+0xb6>
 8008206:	f108 0801 	add.w	r8, r8, #1
 800820a:	68e3      	ldr	r3, [r4, #12]
 800820c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800820e:	1a5b      	subs	r3, r3, r1
 8008210:	4543      	cmp	r3, r8
 8008212:	dcf0      	bgt.n	80081f6 <_printf_float+0x42e>
 8008214:	e6fd      	b.n	8008012 <_printf_float+0x24a>
 8008216:	f04f 0800 	mov.w	r8, #0
 800821a:	f104 0919 	add.w	r9, r4, #25
 800821e:	e7f4      	b.n	800820a <_printf_float+0x442>

08008220 <_printf_common>:
 8008220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008224:	4616      	mov	r6, r2
 8008226:	4699      	mov	r9, r3
 8008228:	688a      	ldr	r2, [r1, #8]
 800822a:	690b      	ldr	r3, [r1, #16]
 800822c:	4607      	mov	r7, r0
 800822e:	4293      	cmp	r3, r2
 8008230:	bfb8      	it	lt
 8008232:	4613      	movlt	r3, r2
 8008234:	6033      	str	r3, [r6, #0]
 8008236:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800823a:	460c      	mov	r4, r1
 800823c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008240:	b10a      	cbz	r2, 8008246 <_printf_common+0x26>
 8008242:	3301      	adds	r3, #1
 8008244:	6033      	str	r3, [r6, #0]
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	0699      	lsls	r1, r3, #26
 800824a:	bf42      	ittt	mi
 800824c:	6833      	ldrmi	r3, [r6, #0]
 800824e:	3302      	addmi	r3, #2
 8008250:	6033      	strmi	r3, [r6, #0]
 8008252:	6825      	ldr	r5, [r4, #0]
 8008254:	f015 0506 	ands.w	r5, r5, #6
 8008258:	d106      	bne.n	8008268 <_printf_common+0x48>
 800825a:	f104 0a19 	add.w	sl, r4, #25
 800825e:	68e3      	ldr	r3, [r4, #12]
 8008260:	6832      	ldr	r2, [r6, #0]
 8008262:	1a9b      	subs	r3, r3, r2
 8008264:	42ab      	cmp	r3, r5
 8008266:	dc28      	bgt.n	80082ba <_printf_common+0x9a>
 8008268:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800826c:	1e13      	subs	r3, r2, #0
 800826e:	6822      	ldr	r2, [r4, #0]
 8008270:	bf18      	it	ne
 8008272:	2301      	movne	r3, #1
 8008274:	0692      	lsls	r2, r2, #26
 8008276:	d42d      	bmi.n	80082d4 <_printf_common+0xb4>
 8008278:	4649      	mov	r1, r9
 800827a:	4638      	mov	r0, r7
 800827c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008280:	47c0      	blx	r8
 8008282:	3001      	adds	r0, #1
 8008284:	d020      	beq.n	80082c8 <_printf_common+0xa8>
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	68e5      	ldr	r5, [r4, #12]
 800828a:	f003 0306 	and.w	r3, r3, #6
 800828e:	2b04      	cmp	r3, #4
 8008290:	bf18      	it	ne
 8008292:	2500      	movne	r5, #0
 8008294:	6832      	ldr	r2, [r6, #0]
 8008296:	f04f 0600 	mov.w	r6, #0
 800829a:	68a3      	ldr	r3, [r4, #8]
 800829c:	bf08      	it	eq
 800829e:	1aad      	subeq	r5, r5, r2
 80082a0:	6922      	ldr	r2, [r4, #16]
 80082a2:	bf08      	it	eq
 80082a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082a8:	4293      	cmp	r3, r2
 80082aa:	bfc4      	itt	gt
 80082ac:	1a9b      	subgt	r3, r3, r2
 80082ae:	18ed      	addgt	r5, r5, r3
 80082b0:	341a      	adds	r4, #26
 80082b2:	42b5      	cmp	r5, r6
 80082b4:	d11a      	bne.n	80082ec <_printf_common+0xcc>
 80082b6:	2000      	movs	r0, #0
 80082b8:	e008      	b.n	80082cc <_printf_common+0xac>
 80082ba:	2301      	movs	r3, #1
 80082bc:	4652      	mov	r2, sl
 80082be:	4649      	mov	r1, r9
 80082c0:	4638      	mov	r0, r7
 80082c2:	47c0      	blx	r8
 80082c4:	3001      	adds	r0, #1
 80082c6:	d103      	bne.n	80082d0 <_printf_common+0xb0>
 80082c8:	f04f 30ff 	mov.w	r0, #4294967295
 80082cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d0:	3501      	adds	r5, #1
 80082d2:	e7c4      	b.n	800825e <_printf_common+0x3e>
 80082d4:	2030      	movs	r0, #48	; 0x30
 80082d6:	18e1      	adds	r1, r4, r3
 80082d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082e2:	4422      	add	r2, r4
 80082e4:	3302      	adds	r3, #2
 80082e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082ea:	e7c5      	b.n	8008278 <_printf_common+0x58>
 80082ec:	2301      	movs	r3, #1
 80082ee:	4622      	mov	r2, r4
 80082f0:	4649      	mov	r1, r9
 80082f2:	4638      	mov	r0, r7
 80082f4:	47c0      	blx	r8
 80082f6:	3001      	adds	r0, #1
 80082f8:	d0e6      	beq.n	80082c8 <_printf_common+0xa8>
 80082fa:	3601      	adds	r6, #1
 80082fc:	e7d9      	b.n	80082b2 <_printf_common+0x92>
	...

08008300 <_printf_i>:
 8008300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008304:	7e0f      	ldrb	r7, [r1, #24]
 8008306:	4691      	mov	r9, r2
 8008308:	2f78      	cmp	r7, #120	; 0x78
 800830a:	4680      	mov	r8, r0
 800830c:	460c      	mov	r4, r1
 800830e:	469a      	mov	sl, r3
 8008310:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008312:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008316:	d807      	bhi.n	8008328 <_printf_i+0x28>
 8008318:	2f62      	cmp	r7, #98	; 0x62
 800831a:	d80a      	bhi.n	8008332 <_printf_i+0x32>
 800831c:	2f00      	cmp	r7, #0
 800831e:	f000 80d9 	beq.w	80084d4 <_printf_i+0x1d4>
 8008322:	2f58      	cmp	r7, #88	; 0x58
 8008324:	f000 80a4 	beq.w	8008470 <_printf_i+0x170>
 8008328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800832c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008330:	e03a      	b.n	80083a8 <_printf_i+0xa8>
 8008332:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008336:	2b15      	cmp	r3, #21
 8008338:	d8f6      	bhi.n	8008328 <_printf_i+0x28>
 800833a:	a101      	add	r1, pc, #4	; (adr r1, 8008340 <_printf_i+0x40>)
 800833c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008340:	08008399 	.word	0x08008399
 8008344:	080083ad 	.word	0x080083ad
 8008348:	08008329 	.word	0x08008329
 800834c:	08008329 	.word	0x08008329
 8008350:	08008329 	.word	0x08008329
 8008354:	08008329 	.word	0x08008329
 8008358:	080083ad 	.word	0x080083ad
 800835c:	08008329 	.word	0x08008329
 8008360:	08008329 	.word	0x08008329
 8008364:	08008329 	.word	0x08008329
 8008368:	08008329 	.word	0x08008329
 800836c:	080084bb 	.word	0x080084bb
 8008370:	080083dd 	.word	0x080083dd
 8008374:	0800849d 	.word	0x0800849d
 8008378:	08008329 	.word	0x08008329
 800837c:	08008329 	.word	0x08008329
 8008380:	080084dd 	.word	0x080084dd
 8008384:	08008329 	.word	0x08008329
 8008388:	080083dd 	.word	0x080083dd
 800838c:	08008329 	.word	0x08008329
 8008390:	08008329 	.word	0x08008329
 8008394:	080084a5 	.word	0x080084a5
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	1d1a      	adds	r2, r3, #4
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	602a      	str	r2, [r5, #0]
 80083a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083a8:	2301      	movs	r3, #1
 80083aa:	e0a4      	b.n	80084f6 <_printf_i+0x1f6>
 80083ac:	6820      	ldr	r0, [r4, #0]
 80083ae:	6829      	ldr	r1, [r5, #0]
 80083b0:	0606      	lsls	r6, r0, #24
 80083b2:	f101 0304 	add.w	r3, r1, #4
 80083b6:	d50a      	bpl.n	80083ce <_printf_i+0xce>
 80083b8:	680e      	ldr	r6, [r1, #0]
 80083ba:	602b      	str	r3, [r5, #0]
 80083bc:	2e00      	cmp	r6, #0
 80083be:	da03      	bge.n	80083c8 <_printf_i+0xc8>
 80083c0:	232d      	movs	r3, #45	; 0x2d
 80083c2:	4276      	negs	r6, r6
 80083c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083c8:	230a      	movs	r3, #10
 80083ca:	485e      	ldr	r0, [pc, #376]	; (8008544 <_printf_i+0x244>)
 80083cc:	e019      	b.n	8008402 <_printf_i+0x102>
 80083ce:	680e      	ldr	r6, [r1, #0]
 80083d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083d4:	602b      	str	r3, [r5, #0]
 80083d6:	bf18      	it	ne
 80083d8:	b236      	sxthne	r6, r6
 80083da:	e7ef      	b.n	80083bc <_printf_i+0xbc>
 80083dc:	682b      	ldr	r3, [r5, #0]
 80083de:	6820      	ldr	r0, [r4, #0]
 80083e0:	1d19      	adds	r1, r3, #4
 80083e2:	6029      	str	r1, [r5, #0]
 80083e4:	0601      	lsls	r1, r0, #24
 80083e6:	d501      	bpl.n	80083ec <_printf_i+0xec>
 80083e8:	681e      	ldr	r6, [r3, #0]
 80083ea:	e002      	b.n	80083f2 <_printf_i+0xf2>
 80083ec:	0646      	lsls	r6, r0, #25
 80083ee:	d5fb      	bpl.n	80083e8 <_printf_i+0xe8>
 80083f0:	881e      	ldrh	r6, [r3, #0]
 80083f2:	2f6f      	cmp	r7, #111	; 0x6f
 80083f4:	bf0c      	ite	eq
 80083f6:	2308      	moveq	r3, #8
 80083f8:	230a      	movne	r3, #10
 80083fa:	4852      	ldr	r0, [pc, #328]	; (8008544 <_printf_i+0x244>)
 80083fc:	2100      	movs	r1, #0
 80083fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008402:	6865      	ldr	r5, [r4, #4]
 8008404:	2d00      	cmp	r5, #0
 8008406:	bfa8      	it	ge
 8008408:	6821      	ldrge	r1, [r4, #0]
 800840a:	60a5      	str	r5, [r4, #8]
 800840c:	bfa4      	itt	ge
 800840e:	f021 0104 	bicge.w	r1, r1, #4
 8008412:	6021      	strge	r1, [r4, #0]
 8008414:	b90e      	cbnz	r6, 800841a <_printf_i+0x11a>
 8008416:	2d00      	cmp	r5, #0
 8008418:	d04d      	beq.n	80084b6 <_printf_i+0x1b6>
 800841a:	4615      	mov	r5, r2
 800841c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008420:	fb03 6711 	mls	r7, r3, r1, r6
 8008424:	5dc7      	ldrb	r7, [r0, r7]
 8008426:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800842a:	4637      	mov	r7, r6
 800842c:	42bb      	cmp	r3, r7
 800842e:	460e      	mov	r6, r1
 8008430:	d9f4      	bls.n	800841c <_printf_i+0x11c>
 8008432:	2b08      	cmp	r3, #8
 8008434:	d10b      	bne.n	800844e <_printf_i+0x14e>
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	07de      	lsls	r6, r3, #31
 800843a:	d508      	bpl.n	800844e <_printf_i+0x14e>
 800843c:	6923      	ldr	r3, [r4, #16]
 800843e:	6861      	ldr	r1, [r4, #4]
 8008440:	4299      	cmp	r1, r3
 8008442:	bfde      	ittt	le
 8008444:	2330      	movle	r3, #48	; 0x30
 8008446:	f805 3c01 	strble.w	r3, [r5, #-1]
 800844a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800844e:	1b52      	subs	r2, r2, r5
 8008450:	6122      	str	r2, [r4, #16]
 8008452:	464b      	mov	r3, r9
 8008454:	4621      	mov	r1, r4
 8008456:	4640      	mov	r0, r8
 8008458:	f8cd a000 	str.w	sl, [sp]
 800845c:	aa03      	add	r2, sp, #12
 800845e:	f7ff fedf 	bl	8008220 <_printf_common>
 8008462:	3001      	adds	r0, #1
 8008464:	d14c      	bne.n	8008500 <_printf_i+0x200>
 8008466:	f04f 30ff 	mov.w	r0, #4294967295
 800846a:	b004      	add	sp, #16
 800846c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008470:	4834      	ldr	r0, [pc, #208]	; (8008544 <_printf_i+0x244>)
 8008472:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008476:	6829      	ldr	r1, [r5, #0]
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	f851 6b04 	ldr.w	r6, [r1], #4
 800847e:	6029      	str	r1, [r5, #0]
 8008480:	061d      	lsls	r5, r3, #24
 8008482:	d514      	bpl.n	80084ae <_printf_i+0x1ae>
 8008484:	07df      	lsls	r7, r3, #31
 8008486:	bf44      	itt	mi
 8008488:	f043 0320 	orrmi.w	r3, r3, #32
 800848c:	6023      	strmi	r3, [r4, #0]
 800848e:	b91e      	cbnz	r6, 8008498 <_printf_i+0x198>
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	f023 0320 	bic.w	r3, r3, #32
 8008496:	6023      	str	r3, [r4, #0]
 8008498:	2310      	movs	r3, #16
 800849a:	e7af      	b.n	80083fc <_printf_i+0xfc>
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	f043 0320 	orr.w	r3, r3, #32
 80084a2:	6023      	str	r3, [r4, #0]
 80084a4:	2378      	movs	r3, #120	; 0x78
 80084a6:	4828      	ldr	r0, [pc, #160]	; (8008548 <_printf_i+0x248>)
 80084a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084ac:	e7e3      	b.n	8008476 <_printf_i+0x176>
 80084ae:	0659      	lsls	r1, r3, #25
 80084b0:	bf48      	it	mi
 80084b2:	b2b6      	uxthmi	r6, r6
 80084b4:	e7e6      	b.n	8008484 <_printf_i+0x184>
 80084b6:	4615      	mov	r5, r2
 80084b8:	e7bb      	b.n	8008432 <_printf_i+0x132>
 80084ba:	682b      	ldr	r3, [r5, #0]
 80084bc:	6826      	ldr	r6, [r4, #0]
 80084be:	1d18      	adds	r0, r3, #4
 80084c0:	6961      	ldr	r1, [r4, #20]
 80084c2:	6028      	str	r0, [r5, #0]
 80084c4:	0635      	lsls	r5, r6, #24
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	d501      	bpl.n	80084ce <_printf_i+0x1ce>
 80084ca:	6019      	str	r1, [r3, #0]
 80084cc:	e002      	b.n	80084d4 <_printf_i+0x1d4>
 80084ce:	0670      	lsls	r0, r6, #25
 80084d0:	d5fb      	bpl.n	80084ca <_printf_i+0x1ca>
 80084d2:	8019      	strh	r1, [r3, #0]
 80084d4:	2300      	movs	r3, #0
 80084d6:	4615      	mov	r5, r2
 80084d8:	6123      	str	r3, [r4, #16]
 80084da:	e7ba      	b.n	8008452 <_printf_i+0x152>
 80084dc:	682b      	ldr	r3, [r5, #0]
 80084de:	2100      	movs	r1, #0
 80084e0:	1d1a      	adds	r2, r3, #4
 80084e2:	602a      	str	r2, [r5, #0]
 80084e4:	681d      	ldr	r5, [r3, #0]
 80084e6:	6862      	ldr	r2, [r4, #4]
 80084e8:	4628      	mov	r0, r5
 80084ea:	f002 fafb 	bl	800aae4 <memchr>
 80084ee:	b108      	cbz	r0, 80084f4 <_printf_i+0x1f4>
 80084f0:	1b40      	subs	r0, r0, r5
 80084f2:	6060      	str	r0, [r4, #4]
 80084f4:	6863      	ldr	r3, [r4, #4]
 80084f6:	6123      	str	r3, [r4, #16]
 80084f8:	2300      	movs	r3, #0
 80084fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084fe:	e7a8      	b.n	8008452 <_printf_i+0x152>
 8008500:	462a      	mov	r2, r5
 8008502:	4649      	mov	r1, r9
 8008504:	4640      	mov	r0, r8
 8008506:	6923      	ldr	r3, [r4, #16]
 8008508:	47d0      	blx	sl
 800850a:	3001      	adds	r0, #1
 800850c:	d0ab      	beq.n	8008466 <_printf_i+0x166>
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	079b      	lsls	r3, r3, #30
 8008512:	d413      	bmi.n	800853c <_printf_i+0x23c>
 8008514:	68e0      	ldr	r0, [r4, #12]
 8008516:	9b03      	ldr	r3, [sp, #12]
 8008518:	4298      	cmp	r0, r3
 800851a:	bfb8      	it	lt
 800851c:	4618      	movlt	r0, r3
 800851e:	e7a4      	b.n	800846a <_printf_i+0x16a>
 8008520:	2301      	movs	r3, #1
 8008522:	4632      	mov	r2, r6
 8008524:	4649      	mov	r1, r9
 8008526:	4640      	mov	r0, r8
 8008528:	47d0      	blx	sl
 800852a:	3001      	adds	r0, #1
 800852c:	d09b      	beq.n	8008466 <_printf_i+0x166>
 800852e:	3501      	adds	r5, #1
 8008530:	68e3      	ldr	r3, [r4, #12]
 8008532:	9903      	ldr	r1, [sp, #12]
 8008534:	1a5b      	subs	r3, r3, r1
 8008536:	42ab      	cmp	r3, r5
 8008538:	dcf2      	bgt.n	8008520 <_printf_i+0x220>
 800853a:	e7eb      	b.n	8008514 <_printf_i+0x214>
 800853c:	2500      	movs	r5, #0
 800853e:	f104 0619 	add.w	r6, r4, #25
 8008542:	e7f5      	b.n	8008530 <_printf_i+0x230>
 8008544:	0801df06 	.word	0x0801df06
 8008548:	0801df17 	.word	0x0801df17

0800854c <_scanf_float>:
 800854c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008550:	b087      	sub	sp, #28
 8008552:	9303      	str	r3, [sp, #12]
 8008554:	688b      	ldr	r3, [r1, #8]
 8008556:	4617      	mov	r7, r2
 8008558:	1e5a      	subs	r2, r3, #1
 800855a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800855e:	bf85      	ittet	hi
 8008560:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008564:	195b      	addhi	r3, r3, r5
 8008566:	2300      	movls	r3, #0
 8008568:	9302      	strhi	r3, [sp, #8]
 800856a:	bf88      	it	hi
 800856c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008570:	468b      	mov	fp, r1
 8008572:	f04f 0500 	mov.w	r5, #0
 8008576:	bf8c      	ite	hi
 8008578:	608b      	strhi	r3, [r1, #8]
 800857a:	9302      	strls	r3, [sp, #8]
 800857c:	680b      	ldr	r3, [r1, #0]
 800857e:	4680      	mov	r8, r0
 8008580:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008584:	f84b 3b1c 	str.w	r3, [fp], #28
 8008588:	460c      	mov	r4, r1
 800858a:	465e      	mov	r6, fp
 800858c:	46aa      	mov	sl, r5
 800858e:	46a9      	mov	r9, r5
 8008590:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008594:	9501      	str	r5, [sp, #4]
 8008596:	68a2      	ldr	r2, [r4, #8]
 8008598:	b152      	cbz	r2, 80085b0 <_scanf_float+0x64>
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	2b4e      	cmp	r3, #78	; 0x4e
 80085a0:	d864      	bhi.n	800866c <_scanf_float+0x120>
 80085a2:	2b40      	cmp	r3, #64	; 0x40
 80085a4:	d83c      	bhi.n	8008620 <_scanf_float+0xd4>
 80085a6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80085aa:	b2c8      	uxtb	r0, r1
 80085ac:	280e      	cmp	r0, #14
 80085ae:	d93a      	bls.n	8008626 <_scanf_float+0xda>
 80085b0:	f1b9 0f00 	cmp.w	r9, #0
 80085b4:	d003      	beq.n	80085be <_scanf_float+0x72>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085c2:	f1ba 0f01 	cmp.w	sl, #1
 80085c6:	f200 8113 	bhi.w	80087f0 <_scanf_float+0x2a4>
 80085ca:	455e      	cmp	r6, fp
 80085cc:	f200 8105 	bhi.w	80087da <_scanf_float+0x28e>
 80085d0:	2501      	movs	r5, #1
 80085d2:	4628      	mov	r0, r5
 80085d4:	b007      	add	sp, #28
 80085d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085da:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80085de:	2a0d      	cmp	r2, #13
 80085e0:	d8e6      	bhi.n	80085b0 <_scanf_float+0x64>
 80085e2:	a101      	add	r1, pc, #4	; (adr r1, 80085e8 <_scanf_float+0x9c>)
 80085e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80085e8:	08008727 	.word	0x08008727
 80085ec:	080085b1 	.word	0x080085b1
 80085f0:	080085b1 	.word	0x080085b1
 80085f4:	080085b1 	.word	0x080085b1
 80085f8:	08008787 	.word	0x08008787
 80085fc:	0800875f 	.word	0x0800875f
 8008600:	080085b1 	.word	0x080085b1
 8008604:	080085b1 	.word	0x080085b1
 8008608:	08008735 	.word	0x08008735
 800860c:	080085b1 	.word	0x080085b1
 8008610:	080085b1 	.word	0x080085b1
 8008614:	080085b1 	.word	0x080085b1
 8008618:	080085b1 	.word	0x080085b1
 800861c:	080086ed 	.word	0x080086ed
 8008620:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008624:	e7db      	b.n	80085de <_scanf_float+0x92>
 8008626:	290e      	cmp	r1, #14
 8008628:	d8c2      	bhi.n	80085b0 <_scanf_float+0x64>
 800862a:	a001      	add	r0, pc, #4	; (adr r0, 8008630 <_scanf_float+0xe4>)
 800862c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008630:	080086df 	.word	0x080086df
 8008634:	080085b1 	.word	0x080085b1
 8008638:	080086df 	.word	0x080086df
 800863c:	08008773 	.word	0x08008773
 8008640:	080085b1 	.word	0x080085b1
 8008644:	0800868d 	.word	0x0800868d
 8008648:	080086c9 	.word	0x080086c9
 800864c:	080086c9 	.word	0x080086c9
 8008650:	080086c9 	.word	0x080086c9
 8008654:	080086c9 	.word	0x080086c9
 8008658:	080086c9 	.word	0x080086c9
 800865c:	080086c9 	.word	0x080086c9
 8008660:	080086c9 	.word	0x080086c9
 8008664:	080086c9 	.word	0x080086c9
 8008668:	080086c9 	.word	0x080086c9
 800866c:	2b6e      	cmp	r3, #110	; 0x6e
 800866e:	d809      	bhi.n	8008684 <_scanf_float+0x138>
 8008670:	2b60      	cmp	r3, #96	; 0x60
 8008672:	d8b2      	bhi.n	80085da <_scanf_float+0x8e>
 8008674:	2b54      	cmp	r3, #84	; 0x54
 8008676:	d077      	beq.n	8008768 <_scanf_float+0x21c>
 8008678:	2b59      	cmp	r3, #89	; 0x59
 800867a:	d199      	bne.n	80085b0 <_scanf_float+0x64>
 800867c:	2d07      	cmp	r5, #7
 800867e:	d197      	bne.n	80085b0 <_scanf_float+0x64>
 8008680:	2508      	movs	r5, #8
 8008682:	e029      	b.n	80086d8 <_scanf_float+0x18c>
 8008684:	2b74      	cmp	r3, #116	; 0x74
 8008686:	d06f      	beq.n	8008768 <_scanf_float+0x21c>
 8008688:	2b79      	cmp	r3, #121	; 0x79
 800868a:	e7f6      	b.n	800867a <_scanf_float+0x12e>
 800868c:	6821      	ldr	r1, [r4, #0]
 800868e:	05c8      	lsls	r0, r1, #23
 8008690:	d51a      	bpl.n	80086c8 <_scanf_float+0x17c>
 8008692:	9b02      	ldr	r3, [sp, #8]
 8008694:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008698:	6021      	str	r1, [r4, #0]
 800869a:	f109 0901 	add.w	r9, r9, #1
 800869e:	b11b      	cbz	r3, 80086a8 <_scanf_float+0x15c>
 80086a0:	3b01      	subs	r3, #1
 80086a2:	3201      	adds	r2, #1
 80086a4:	9302      	str	r3, [sp, #8]
 80086a6:	60a2      	str	r2, [r4, #8]
 80086a8:	68a3      	ldr	r3, [r4, #8]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	60a3      	str	r3, [r4, #8]
 80086ae:	6923      	ldr	r3, [r4, #16]
 80086b0:	3301      	adds	r3, #1
 80086b2:	6123      	str	r3, [r4, #16]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	3b01      	subs	r3, #1
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	607b      	str	r3, [r7, #4]
 80086bc:	f340 8084 	ble.w	80087c8 <_scanf_float+0x27c>
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	3301      	adds	r3, #1
 80086c4:	603b      	str	r3, [r7, #0]
 80086c6:	e766      	b.n	8008596 <_scanf_float+0x4a>
 80086c8:	eb1a 0f05 	cmn.w	sl, r5
 80086cc:	f47f af70 	bne.w	80085b0 <_scanf_float+0x64>
 80086d0:	6822      	ldr	r2, [r4, #0]
 80086d2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80086d6:	6022      	str	r2, [r4, #0]
 80086d8:	f806 3b01 	strb.w	r3, [r6], #1
 80086dc:	e7e4      	b.n	80086a8 <_scanf_float+0x15c>
 80086de:	6822      	ldr	r2, [r4, #0]
 80086e0:	0610      	lsls	r0, r2, #24
 80086e2:	f57f af65 	bpl.w	80085b0 <_scanf_float+0x64>
 80086e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086ea:	e7f4      	b.n	80086d6 <_scanf_float+0x18a>
 80086ec:	f1ba 0f00 	cmp.w	sl, #0
 80086f0:	d10e      	bne.n	8008710 <_scanf_float+0x1c4>
 80086f2:	f1b9 0f00 	cmp.w	r9, #0
 80086f6:	d10e      	bne.n	8008716 <_scanf_float+0x1ca>
 80086f8:	6822      	ldr	r2, [r4, #0]
 80086fa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80086fe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008702:	d108      	bne.n	8008716 <_scanf_float+0x1ca>
 8008704:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008708:	f04f 0a01 	mov.w	sl, #1
 800870c:	6022      	str	r2, [r4, #0]
 800870e:	e7e3      	b.n	80086d8 <_scanf_float+0x18c>
 8008710:	f1ba 0f02 	cmp.w	sl, #2
 8008714:	d055      	beq.n	80087c2 <_scanf_float+0x276>
 8008716:	2d01      	cmp	r5, #1
 8008718:	d002      	beq.n	8008720 <_scanf_float+0x1d4>
 800871a:	2d04      	cmp	r5, #4
 800871c:	f47f af48 	bne.w	80085b0 <_scanf_float+0x64>
 8008720:	3501      	adds	r5, #1
 8008722:	b2ed      	uxtb	r5, r5
 8008724:	e7d8      	b.n	80086d8 <_scanf_float+0x18c>
 8008726:	f1ba 0f01 	cmp.w	sl, #1
 800872a:	f47f af41 	bne.w	80085b0 <_scanf_float+0x64>
 800872e:	f04f 0a02 	mov.w	sl, #2
 8008732:	e7d1      	b.n	80086d8 <_scanf_float+0x18c>
 8008734:	b97d      	cbnz	r5, 8008756 <_scanf_float+0x20a>
 8008736:	f1b9 0f00 	cmp.w	r9, #0
 800873a:	f47f af3c 	bne.w	80085b6 <_scanf_float+0x6a>
 800873e:	6822      	ldr	r2, [r4, #0]
 8008740:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008744:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008748:	f47f af39 	bne.w	80085be <_scanf_float+0x72>
 800874c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008750:	2501      	movs	r5, #1
 8008752:	6022      	str	r2, [r4, #0]
 8008754:	e7c0      	b.n	80086d8 <_scanf_float+0x18c>
 8008756:	2d03      	cmp	r5, #3
 8008758:	d0e2      	beq.n	8008720 <_scanf_float+0x1d4>
 800875a:	2d05      	cmp	r5, #5
 800875c:	e7de      	b.n	800871c <_scanf_float+0x1d0>
 800875e:	2d02      	cmp	r5, #2
 8008760:	f47f af26 	bne.w	80085b0 <_scanf_float+0x64>
 8008764:	2503      	movs	r5, #3
 8008766:	e7b7      	b.n	80086d8 <_scanf_float+0x18c>
 8008768:	2d06      	cmp	r5, #6
 800876a:	f47f af21 	bne.w	80085b0 <_scanf_float+0x64>
 800876e:	2507      	movs	r5, #7
 8008770:	e7b2      	b.n	80086d8 <_scanf_float+0x18c>
 8008772:	6822      	ldr	r2, [r4, #0]
 8008774:	0591      	lsls	r1, r2, #22
 8008776:	f57f af1b 	bpl.w	80085b0 <_scanf_float+0x64>
 800877a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800877e:	6022      	str	r2, [r4, #0]
 8008780:	f8cd 9004 	str.w	r9, [sp, #4]
 8008784:	e7a8      	b.n	80086d8 <_scanf_float+0x18c>
 8008786:	6822      	ldr	r2, [r4, #0]
 8008788:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800878c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008790:	d006      	beq.n	80087a0 <_scanf_float+0x254>
 8008792:	0550      	lsls	r0, r2, #21
 8008794:	f57f af0c 	bpl.w	80085b0 <_scanf_float+0x64>
 8008798:	f1b9 0f00 	cmp.w	r9, #0
 800879c:	f43f af0f 	beq.w	80085be <_scanf_float+0x72>
 80087a0:	0591      	lsls	r1, r2, #22
 80087a2:	bf58      	it	pl
 80087a4:	9901      	ldrpl	r1, [sp, #4]
 80087a6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80087aa:	bf58      	it	pl
 80087ac:	eba9 0101 	subpl.w	r1, r9, r1
 80087b0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80087b4:	f04f 0900 	mov.w	r9, #0
 80087b8:	bf58      	it	pl
 80087ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80087be:	6022      	str	r2, [r4, #0]
 80087c0:	e78a      	b.n	80086d8 <_scanf_float+0x18c>
 80087c2:	f04f 0a03 	mov.w	sl, #3
 80087c6:	e787      	b.n	80086d8 <_scanf_float+0x18c>
 80087c8:	4639      	mov	r1, r7
 80087ca:	4640      	mov	r0, r8
 80087cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80087d0:	4798      	blx	r3
 80087d2:	2800      	cmp	r0, #0
 80087d4:	f43f aedf 	beq.w	8008596 <_scanf_float+0x4a>
 80087d8:	e6ea      	b.n	80085b0 <_scanf_float+0x64>
 80087da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087de:	463a      	mov	r2, r7
 80087e0:	4640      	mov	r0, r8
 80087e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087e6:	4798      	blx	r3
 80087e8:	6923      	ldr	r3, [r4, #16]
 80087ea:	3b01      	subs	r3, #1
 80087ec:	6123      	str	r3, [r4, #16]
 80087ee:	e6ec      	b.n	80085ca <_scanf_float+0x7e>
 80087f0:	1e6b      	subs	r3, r5, #1
 80087f2:	2b06      	cmp	r3, #6
 80087f4:	d825      	bhi.n	8008842 <_scanf_float+0x2f6>
 80087f6:	2d02      	cmp	r5, #2
 80087f8:	d836      	bhi.n	8008868 <_scanf_float+0x31c>
 80087fa:	455e      	cmp	r6, fp
 80087fc:	f67f aee8 	bls.w	80085d0 <_scanf_float+0x84>
 8008800:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008804:	463a      	mov	r2, r7
 8008806:	4640      	mov	r0, r8
 8008808:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800880c:	4798      	blx	r3
 800880e:	6923      	ldr	r3, [r4, #16]
 8008810:	3b01      	subs	r3, #1
 8008812:	6123      	str	r3, [r4, #16]
 8008814:	e7f1      	b.n	80087fa <_scanf_float+0x2ae>
 8008816:	9802      	ldr	r0, [sp, #8]
 8008818:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800881c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008820:	463a      	mov	r2, r7
 8008822:	9002      	str	r0, [sp, #8]
 8008824:	4640      	mov	r0, r8
 8008826:	4798      	blx	r3
 8008828:	6923      	ldr	r3, [r4, #16]
 800882a:	3b01      	subs	r3, #1
 800882c:	6123      	str	r3, [r4, #16]
 800882e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008832:	fa5f fa8a 	uxtb.w	sl, sl
 8008836:	f1ba 0f02 	cmp.w	sl, #2
 800883a:	d1ec      	bne.n	8008816 <_scanf_float+0x2ca>
 800883c:	3d03      	subs	r5, #3
 800883e:	b2ed      	uxtb	r5, r5
 8008840:	1b76      	subs	r6, r6, r5
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	05da      	lsls	r2, r3, #23
 8008846:	d52f      	bpl.n	80088a8 <_scanf_float+0x35c>
 8008848:	055b      	lsls	r3, r3, #21
 800884a:	d510      	bpl.n	800886e <_scanf_float+0x322>
 800884c:	455e      	cmp	r6, fp
 800884e:	f67f aebf 	bls.w	80085d0 <_scanf_float+0x84>
 8008852:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008856:	463a      	mov	r2, r7
 8008858:	4640      	mov	r0, r8
 800885a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800885e:	4798      	blx	r3
 8008860:	6923      	ldr	r3, [r4, #16]
 8008862:	3b01      	subs	r3, #1
 8008864:	6123      	str	r3, [r4, #16]
 8008866:	e7f1      	b.n	800884c <_scanf_float+0x300>
 8008868:	46aa      	mov	sl, r5
 800886a:	9602      	str	r6, [sp, #8]
 800886c:	e7df      	b.n	800882e <_scanf_float+0x2e2>
 800886e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008872:	6923      	ldr	r3, [r4, #16]
 8008874:	2965      	cmp	r1, #101	; 0x65
 8008876:	f103 33ff 	add.w	r3, r3, #4294967295
 800887a:	f106 35ff 	add.w	r5, r6, #4294967295
 800887e:	6123      	str	r3, [r4, #16]
 8008880:	d00c      	beq.n	800889c <_scanf_float+0x350>
 8008882:	2945      	cmp	r1, #69	; 0x45
 8008884:	d00a      	beq.n	800889c <_scanf_float+0x350>
 8008886:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800888a:	463a      	mov	r2, r7
 800888c:	4640      	mov	r0, r8
 800888e:	4798      	blx	r3
 8008890:	6923      	ldr	r3, [r4, #16]
 8008892:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008896:	3b01      	subs	r3, #1
 8008898:	1eb5      	subs	r5, r6, #2
 800889a:	6123      	str	r3, [r4, #16]
 800889c:	463a      	mov	r2, r7
 800889e:	4640      	mov	r0, r8
 80088a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088a4:	4798      	blx	r3
 80088a6:	462e      	mov	r6, r5
 80088a8:	6825      	ldr	r5, [r4, #0]
 80088aa:	f015 0510 	ands.w	r5, r5, #16
 80088ae:	d155      	bne.n	800895c <_scanf_float+0x410>
 80088b0:	7035      	strb	r5, [r6, #0]
 80088b2:	6823      	ldr	r3, [r4, #0]
 80088b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80088b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088bc:	d11b      	bne.n	80088f6 <_scanf_float+0x3aa>
 80088be:	9b01      	ldr	r3, [sp, #4]
 80088c0:	454b      	cmp	r3, r9
 80088c2:	eba3 0209 	sub.w	r2, r3, r9
 80088c6:	d123      	bne.n	8008910 <_scanf_float+0x3c4>
 80088c8:	2200      	movs	r2, #0
 80088ca:	4659      	mov	r1, fp
 80088cc:	4640      	mov	r0, r8
 80088ce:	f000 fe7b 	bl	80095c8 <_strtod_r>
 80088d2:	6822      	ldr	r2, [r4, #0]
 80088d4:	9b03      	ldr	r3, [sp, #12]
 80088d6:	f012 0f02 	tst.w	r2, #2
 80088da:	4606      	mov	r6, r0
 80088dc:	460f      	mov	r7, r1
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	d021      	beq.n	8008926 <_scanf_float+0x3da>
 80088e2:	1d1a      	adds	r2, r3, #4
 80088e4:	9903      	ldr	r1, [sp, #12]
 80088e6:	600a      	str	r2, [r1, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	e9c3 6700 	strd	r6, r7, [r3]
 80088ee:	68e3      	ldr	r3, [r4, #12]
 80088f0:	3301      	adds	r3, #1
 80088f2:	60e3      	str	r3, [r4, #12]
 80088f4:	e66d      	b.n	80085d2 <_scanf_float+0x86>
 80088f6:	9b04      	ldr	r3, [sp, #16]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d0e5      	beq.n	80088c8 <_scanf_float+0x37c>
 80088fc:	9905      	ldr	r1, [sp, #20]
 80088fe:	230a      	movs	r3, #10
 8008900:	462a      	mov	r2, r5
 8008902:	4640      	mov	r0, r8
 8008904:	3101      	adds	r1, #1
 8008906:	f000 fee1 	bl	80096cc <_strtol_r>
 800890a:	9b04      	ldr	r3, [sp, #16]
 800890c:	9e05      	ldr	r6, [sp, #20]
 800890e:	1ac2      	subs	r2, r0, r3
 8008910:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008914:	429e      	cmp	r6, r3
 8008916:	bf28      	it	cs
 8008918:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800891c:	4630      	mov	r0, r6
 800891e:	4910      	ldr	r1, [pc, #64]	; (8008960 <_scanf_float+0x414>)
 8008920:	f000 f826 	bl	8008970 <siprintf>
 8008924:	e7d0      	b.n	80088c8 <_scanf_float+0x37c>
 8008926:	f012 0f04 	tst.w	r2, #4
 800892a:	f103 0204 	add.w	r2, r3, #4
 800892e:	d1d9      	bne.n	80088e4 <_scanf_float+0x398>
 8008930:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008934:	f8cc 2000 	str.w	r2, [ip]
 8008938:	f8d3 8000 	ldr.w	r8, [r3]
 800893c:	4602      	mov	r2, r0
 800893e:	460b      	mov	r3, r1
 8008940:	f7fc fff0 	bl	8005924 <__aeabi_dcmpun>
 8008944:	b128      	cbz	r0, 8008952 <_scanf_float+0x406>
 8008946:	4807      	ldr	r0, [pc, #28]	; (8008964 <_scanf_float+0x418>)
 8008948:	f000 f80e 	bl	8008968 <nanf>
 800894c:	f8c8 0000 	str.w	r0, [r8]
 8008950:	e7cd      	b.n	80088ee <_scanf_float+0x3a2>
 8008952:	4630      	mov	r0, r6
 8008954:	4639      	mov	r1, r7
 8008956:	f7fd f843 	bl	80059e0 <__aeabi_d2f>
 800895a:	e7f7      	b.n	800894c <_scanf_float+0x400>
 800895c:	2500      	movs	r5, #0
 800895e:	e638      	b.n	80085d2 <_scanf_float+0x86>
 8008960:	0801df28 	.word	0x0801df28
 8008964:	0801e330 	.word	0x0801e330

08008968 <nanf>:
 8008968:	4800      	ldr	r0, [pc, #0]	; (800896c <nanf+0x4>)
 800896a:	4770      	bx	lr
 800896c:	7fc00000 	.word	0x7fc00000

08008970 <siprintf>:
 8008970:	b40e      	push	{r1, r2, r3}
 8008972:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008976:	b500      	push	{lr}
 8008978:	b09c      	sub	sp, #112	; 0x70
 800897a:	ab1d      	add	r3, sp, #116	; 0x74
 800897c:	9002      	str	r0, [sp, #8]
 800897e:	9006      	str	r0, [sp, #24]
 8008980:	9107      	str	r1, [sp, #28]
 8008982:	9104      	str	r1, [sp, #16]
 8008984:	4808      	ldr	r0, [pc, #32]	; (80089a8 <siprintf+0x38>)
 8008986:	4909      	ldr	r1, [pc, #36]	; (80089ac <siprintf+0x3c>)
 8008988:	f853 2b04 	ldr.w	r2, [r3], #4
 800898c:	9105      	str	r1, [sp, #20]
 800898e:	6800      	ldr	r0, [r0, #0]
 8008990:	a902      	add	r1, sp, #8
 8008992:	9301      	str	r3, [sp, #4]
 8008994:	f002 fec6 	bl	800b724 <_svfiprintf_r>
 8008998:	2200      	movs	r2, #0
 800899a:	9b02      	ldr	r3, [sp, #8]
 800899c:	701a      	strb	r2, [r3, #0]
 800899e:	b01c      	add	sp, #112	; 0x70
 80089a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089a4:	b003      	add	sp, #12
 80089a6:	4770      	bx	lr
 80089a8:	2000000c 	.word	0x2000000c
 80089ac:	ffff0208 	.word	0xffff0208

080089b0 <sulp>:
 80089b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089b4:	460f      	mov	r7, r1
 80089b6:	4690      	mov	r8, r2
 80089b8:	f002 fc20 	bl	800b1fc <__ulp>
 80089bc:	4604      	mov	r4, r0
 80089be:	460d      	mov	r5, r1
 80089c0:	f1b8 0f00 	cmp.w	r8, #0
 80089c4:	d011      	beq.n	80089ea <sulp+0x3a>
 80089c6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80089ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	dd0b      	ble.n	80089ea <sulp+0x3a>
 80089d2:	2400      	movs	r4, #0
 80089d4:	051b      	lsls	r3, r3, #20
 80089d6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80089da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80089de:	4622      	mov	r2, r4
 80089e0:	462b      	mov	r3, r5
 80089e2:	f7fc fd05 	bl	80053f0 <__aeabi_dmul>
 80089e6:	4604      	mov	r4, r0
 80089e8:	460d      	mov	r5, r1
 80089ea:	4620      	mov	r0, r4
 80089ec:	4629      	mov	r1, r5
 80089ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f2:	0000      	movs	r0, r0
 80089f4:	0000      	movs	r0, r0
	...

080089f8 <_strtod_l>:
 80089f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fc:	469b      	mov	fp, r3
 80089fe:	2300      	movs	r3, #0
 8008a00:	b09f      	sub	sp, #124	; 0x7c
 8008a02:	931a      	str	r3, [sp, #104]	; 0x68
 8008a04:	4b9e      	ldr	r3, [pc, #632]	; (8008c80 <_strtod_l+0x288>)
 8008a06:	4682      	mov	sl, r0
 8008a08:	681f      	ldr	r7, [r3, #0]
 8008a0a:	460e      	mov	r6, r1
 8008a0c:	4638      	mov	r0, r7
 8008a0e:	9215      	str	r2, [sp, #84]	; 0x54
 8008a10:	f7fc fb2a 	bl	8005068 <strlen>
 8008a14:	f04f 0800 	mov.w	r8, #0
 8008a18:	4604      	mov	r4, r0
 8008a1a:	f04f 0900 	mov.w	r9, #0
 8008a1e:	9619      	str	r6, [sp, #100]	; 0x64
 8008a20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a22:	781a      	ldrb	r2, [r3, #0]
 8008a24:	2a2b      	cmp	r2, #43	; 0x2b
 8008a26:	d04c      	beq.n	8008ac2 <_strtod_l+0xca>
 8008a28:	d83a      	bhi.n	8008aa0 <_strtod_l+0xa8>
 8008a2a:	2a0d      	cmp	r2, #13
 8008a2c:	d833      	bhi.n	8008a96 <_strtod_l+0x9e>
 8008a2e:	2a08      	cmp	r2, #8
 8008a30:	d833      	bhi.n	8008a9a <_strtod_l+0xa2>
 8008a32:	2a00      	cmp	r2, #0
 8008a34:	d03d      	beq.n	8008ab2 <_strtod_l+0xba>
 8008a36:	2300      	movs	r3, #0
 8008a38:	930a      	str	r3, [sp, #40]	; 0x28
 8008a3a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008a3c:	782b      	ldrb	r3, [r5, #0]
 8008a3e:	2b30      	cmp	r3, #48	; 0x30
 8008a40:	f040 80aa 	bne.w	8008b98 <_strtod_l+0x1a0>
 8008a44:	786b      	ldrb	r3, [r5, #1]
 8008a46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a4a:	2b58      	cmp	r3, #88	; 0x58
 8008a4c:	d166      	bne.n	8008b1c <_strtod_l+0x124>
 8008a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a50:	4650      	mov	r0, sl
 8008a52:	9301      	str	r3, [sp, #4]
 8008a54:	ab1a      	add	r3, sp, #104	; 0x68
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	4a8a      	ldr	r2, [pc, #552]	; (8008c84 <_strtod_l+0x28c>)
 8008a5a:	f8cd b008 	str.w	fp, [sp, #8]
 8008a5e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008a60:	a919      	add	r1, sp, #100	; 0x64
 8008a62:	f001 fd23 	bl	800a4ac <__gethex>
 8008a66:	f010 0607 	ands.w	r6, r0, #7
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	d005      	beq.n	8008a7a <_strtod_l+0x82>
 8008a6e:	2e06      	cmp	r6, #6
 8008a70:	d129      	bne.n	8008ac6 <_strtod_l+0xce>
 8008a72:	2300      	movs	r3, #0
 8008a74:	3501      	adds	r5, #1
 8008a76:	9519      	str	r5, [sp, #100]	; 0x64
 8008a78:	930a      	str	r3, [sp, #40]	; 0x28
 8008a7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f040 858a 	bne.w	8009596 <_strtod_l+0xb9e>
 8008a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a84:	b1d3      	cbz	r3, 8008abc <_strtod_l+0xc4>
 8008a86:	4642      	mov	r2, r8
 8008a88:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	4619      	mov	r1, r3
 8008a90:	b01f      	add	sp, #124	; 0x7c
 8008a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a96:	2a20      	cmp	r2, #32
 8008a98:	d1cd      	bne.n	8008a36 <_strtod_l+0x3e>
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	9319      	str	r3, [sp, #100]	; 0x64
 8008a9e:	e7bf      	b.n	8008a20 <_strtod_l+0x28>
 8008aa0:	2a2d      	cmp	r2, #45	; 0x2d
 8008aa2:	d1c8      	bne.n	8008a36 <_strtod_l+0x3e>
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	920a      	str	r2, [sp, #40]	; 0x28
 8008aa8:	1c5a      	adds	r2, r3, #1
 8008aaa:	9219      	str	r2, [sp, #100]	; 0x64
 8008aac:	785b      	ldrb	r3, [r3, #1]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1c3      	bne.n	8008a3a <_strtod_l+0x42>
 8008ab2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ab4:	9619      	str	r6, [sp, #100]	; 0x64
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	f040 856b 	bne.w	8009592 <_strtod_l+0xb9a>
 8008abc:	4642      	mov	r2, r8
 8008abe:	464b      	mov	r3, r9
 8008ac0:	e7e4      	b.n	8008a8c <_strtod_l+0x94>
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	e7ef      	b.n	8008aa6 <_strtod_l+0xae>
 8008ac6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008ac8:	b13a      	cbz	r2, 8008ada <_strtod_l+0xe2>
 8008aca:	2135      	movs	r1, #53	; 0x35
 8008acc:	a81c      	add	r0, sp, #112	; 0x70
 8008ace:	f002 fc99 	bl	800b404 <__copybits>
 8008ad2:	4650      	mov	r0, sl
 8008ad4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008ad6:	f002 f861 	bl	800ab9c <_Bfree>
 8008ada:	3e01      	subs	r6, #1
 8008adc:	2e04      	cmp	r6, #4
 8008ade:	d806      	bhi.n	8008aee <_strtod_l+0xf6>
 8008ae0:	e8df f006 	tbb	[pc, r6]
 8008ae4:	1714030a 	.word	0x1714030a
 8008ae8:	0a          	.byte	0x0a
 8008ae9:	00          	.byte	0x00
 8008aea:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008aee:	0721      	lsls	r1, r4, #28
 8008af0:	d5c3      	bpl.n	8008a7a <_strtod_l+0x82>
 8008af2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008af6:	e7c0      	b.n	8008a7a <_strtod_l+0x82>
 8008af8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008afa:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008afe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008b02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b06:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008b0a:	e7f0      	b.n	8008aee <_strtod_l+0xf6>
 8008b0c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008c88 <_strtod_l+0x290>
 8008b10:	e7ed      	b.n	8008aee <_strtod_l+0xf6>
 8008b12:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008b16:	f04f 38ff 	mov.w	r8, #4294967295
 8008b1a:	e7e8      	b.n	8008aee <_strtod_l+0xf6>
 8008b1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b1e:	1c5a      	adds	r2, r3, #1
 8008b20:	9219      	str	r2, [sp, #100]	; 0x64
 8008b22:	785b      	ldrb	r3, [r3, #1]
 8008b24:	2b30      	cmp	r3, #48	; 0x30
 8008b26:	d0f9      	beq.n	8008b1c <_strtod_l+0x124>
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d0a6      	beq.n	8008a7a <_strtod_l+0x82>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	9307      	str	r3, [sp, #28]
 8008b30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b32:	220a      	movs	r2, #10
 8008b34:	9308      	str	r3, [sp, #32]
 8008b36:	2300      	movs	r3, #0
 8008b38:	469b      	mov	fp, r3
 8008b3a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008b3e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008b40:	7805      	ldrb	r5, [r0, #0]
 8008b42:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008b46:	b2d9      	uxtb	r1, r3
 8008b48:	2909      	cmp	r1, #9
 8008b4a:	d927      	bls.n	8008b9c <_strtod_l+0x1a4>
 8008b4c:	4622      	mov	r2, r4
 8008b4e:	4639      	mov	r1, r7
 8008b50:	f002 fefe 	bl	800b950 <strncmp>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d033      	beq.n	8008bc0 <_strtod_l+0x1c8>
 8008b58:	2000      	movs	r0, #0
 8008b5a:	462a      	mov	r2, r5
 8008b5c:	465c      	mov	r4, fp
 8008b5e:	4603      	mov	r3, r0
 8008b60:	9004      	str	r0, [sp, #16]
 8008b62:	2a65      	cmp	r2, #101	; 0x65
 8008b64:	d001      	beq.n	8008b6a <_strtod_l+0x172>
 8008b66:	2a45      	cmp	r2, #69	; 0x45
 8008b68:	d114      	bne.n	8008b94 <_strtod_l+0x19c>
 8008b6a:	b91c      	cbnz	r4, 8008b74 <_strtod_l+0x17c>
 8008b6c:	9a07      	ldr	r2, [sp, #28]
 8008b6e:	4302      	orrs	r2, r0
 8008b70:	d09f      	beq.n	8008ab2 <_strtod_l+0xba>
 8008b72:	2400      	movs	r4, #0
 8008b74:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008b76:	1c72      	adds	r2, r6, #1
 8008b78:	9219      	str	r2, [sp, #100]	; 0x64
 8008b7a:	7872      	ldrb	r2, [r6, #1]
 8008b7c:	2a2b      	cmp	r2, #43	; 0x2b
 8008b7e:	d079      	beq.n	8008c74 <_strtod_l+0x27c>
 8008b80:	2a2d      	cmp	r2, #45	; 0x2d
 8008b82:	f000 8083 	beq.w	8008c8c <_strtod_l+0x294>
 8008b86:	2700      	movs	r7, #0
 8008b88:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008b8c:	2909      	cmp	r1, #9
 8008b8e:	f240 8083 	bls.w	8008c98 <_strtod_l+0x2a0>
 8008b92:	9619      	str	r6, [sp, #100]	; 0x64
 8008b94:	2500      	movs	r5, #0
 8008b96:	e09f      	b.n	8008cd8 <_strtod_l+0x2e0>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	e7c8      	b.n	8008b2e <_strtod_l+0x136>
 8008b9c:	f1bb 0f08 	cmp.w	fp, #8
 8008ba0:	bfd5      	itete	le
 8008ba2:	9906      	ldrle	r1, [sp, #24]
 8008ba4:	9905      	ldrgt	r1, [sp, #20]
 8008ba6:	fb02 3301 	mlale	r3, r2, r1, r3
 8008baa:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008bae:	f100 0001 	add.w	r0, r0, #1
 8008bb2:	bfd4      	ite	le
 8008bb4:	9306      	strle	r3, [sp, #24]
 8008bb6:	9305      	strgt	r3, [sp, #20]
 8008bb8:	f10b 0b01 	add.w	fp, fp, #1
 8008bbc:	9019      	str	r0, [sp, #100]	; 0x64
 8008bbe:	e7be      	b.n	8008b3e <_strtod_l+0x146>
 8008bc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008bc2:	191a      	adds	r2, r3, r4
 8008bc4:	9219      	str	r2, [sp, #100]	; 0x64
 8008bc6:	5d1a      	ldrb	r2, [r3, r4]
 8008bc8:	f1bb 0f00 	cmp.w	fp, #0
 8008bcc:	d036      	beq.n	8008c3c <_strtod_l+0x244>
 8008bce:	465c      	mov	r4, fp
 8008bd0:	9004      	str	r0, [sp, #16]
 8008bd2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008bd6:	2b09      	cmp	r3, #9
 8008bd8:	d912      	bls.n	8008c00 <_strtod_l+0x208>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e7c1      	b.n	8008b62 <_strtod_l+0x16a>
 8008bde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008be0:	3001      	adds	r0, #1
 8008be2:	1c5a      	adds	r2, r3, #1
 8008be4:	9219      	str	r2, [sp, #100]	; 0x64
 8008be6:	785a      	ldrb	r2, [r3, #1]
 8008be8:	2a30      	cmp	r2, #48	; 0x30
 8008bea:	d0f8      	beq.n	8008bde <_strtod_l+0x1e6>
 8008bec:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008bf0:	2b08      	cmp	r3, #8
 8008bf2:	f200 84d5 	bhi.w	80095a0 <_strtod_l+0xba8>
 8008bf6:	9004      	str	r0, [sp, #16]
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008bfe:	9308      	str	r3, [sp, #32]
 8008c00:	3a30      	subs	r2, #48	; 0x30
 8008c02:	f100 0301 	add.w	r3, r0, #1
 8008c06:	d013      	beq.n	8008c30 <_strtod_l+0x238>
 8008c08:	9904      	ldr	r1, [sp, #16]
 8008c0a:	1905      	adds	r5, r0, r4
 8008c0c:	4419      	add	r1, r3
 8008c0e:	9104      	str	r1, [sp, #16]
 8008c10:	4623      	mov	r3, r4
 8008c12:	210a      	movs	r1, #10
 8008c14:	42ab      	cmp	r3, r5
 8008c16:	d113      	bne.n	8008c40 <_strtod_l+0x248>
 8008c18:	1823      	adds	r3, r4, r0
 8008c1a:	2b08      	cmp	r3, #8
 8008c1c:	f104 0401 	add.w	r4, r4, #1
 8008c20:	4404      	add	r4, r0
 8008c22:	dc1b      	bgt.n	8008c5c <_strtod_l+0x264>
 8008c24:	230a      	movs	r3, #10
 8008c26:	9906      	ldr	r1, [sp, #24]
 8008c28:	fb03 2301 	mla	r3, r3, r1, r2
 8008c2c:	9306      	str	r3, [sp, #24]
 8008c2e:	2300      	movs	r3, #0
 8008c30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c32:	4618      	mov	r0, r3
 8008c34:	1c51      	adds	r1, r2, #1
 8008c36:	9119      	str	r1, [sp, #100]	; 0x64
 8008c38:	7852      	ldrb	r2, [r2, #1]
 8008c3a:	e7ca      	b.n	8008bd2 <_strtod_l+0x1da>
 8008c3c:	4658      	mov	r0, fp
 8008c3e:	e7d3      	b.n	8008be8 <_strtod_l+0x1f0>
 8008c40:	2b08      	cmp	r3, #8
 8008c42:	dc04      	bgt.n	8008c4e <_strtod_l+0x256>
 8008c44:	9f06      	ldr	r7, [sp, #24]
 8008c46:	434f      	muls	r7, r1
 8008c48:	9706      	str	r7, [sp, #24]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	e7e2      	b.n	8008c14 <_strtod_l+0x21c>
 8008c4e:	1c5f      	adds	r7, r3, #1
 8008c50:	2f10      	cmp	r7, #16
 8008c52:	bfde      	ittt	le
 8008c54:	9f05      	ldrle	r7, [sp, #20]
 8008c56:	434f      	mulle	r7, r1
 8008c58:	9705      	strle	r7, [sp, #20]
 8008c5a:	e7f6      	b.n	8008c4a <_strtod_l+0x252>
 8008c5c:	2c10      	cmp	r4, #16
 8008c5e:	bfdf      	itttt	le
 8008c60:	230a      	movle	r3, #10
 8008c62:	9905      	ldrle	r1, [sp, #20]
 8008c64:	fb03 2301 	mlale	r3, r3, r1, r2
 8008c68:	9305      	strle	r3, [sp, #20]
 8008c6a:	e7e0      	b.n	8008c2e <_strtod_l+0x236>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	9304      	str	r3, [sp, #16]
 8008c70:	2301      	movs	r3, #1
 8008c72:	e77b      	b.n	8008b6c <_strtod_l+0x174>
 8008c74:	2700      	movs	r7, #0
 8008c76:	1cb2      	adds	r2, r6, #2
 8008c78:	9219      	str	r2, [sp, #100]	; 0x64
 8008c7a:	78b2      	ldrb	r2, [r6, #2]
 8008c7c:	e784      	b.n	8008b88 <_strtod_l+0x190>
 8008c7e:	bf00      	nop
 8008c80:	0801e178 	.word	0x0801e178
 8008c84:	0801df30 	.word	0x0801df30
 8008c88:	7ff00000 	.word	0x7ff00000
 8008c8c:	2701      	movs	r7, #1
 8008c8e:	e7f2      	b.n	8008c76 <_strtod_l+0x27e>
 8008c90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c92:	1c51      	adds	r1, r2, #1
 8008c94:	9119      	str	r1, [sp, #100]	; 0x64
 8008c96:	7852      	ldrb	r2, [r2, #1]
 8008c98:	2a30      	cmp	r2, #48	; 0x30
 8008c9a:	d0f9      	beq.n	8008c90 <_strtod_l+0x298>
 8008c9c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008ca0:	2908      	cmp	r1, #8
 8008ca2:	f63f af77 	bhi.w	8008b94 <_strtod_l+0x19c>
 8008ca6:	f04f 0e0a 	mov.w	lr, #10
 8008caa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008cae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008cb0:	9209      	str	r2, [sp, #36]	; 0x24
 8008cb2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008cb4:	1c51      	adds	r1, r2, #1
 8008cb6:	9119      	str	r1, [sp, #100]	; 0x64
 8008cb8:	7852      	ldrb	r2, [r2, #1]
 8008cba:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008cbe:	2d09      	cmp	r5, #9
 8008cc0:	d935      	bls.n	8008d2e <_strtod_l+0x336>
 8008cc2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008cc4:	1b49      	subs	r1, r1, r5
 8008cc6:	2908      	cmp	r1, #8
 8008cc8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008ccc:	dc02      	bgt.n	8008cd4 <_strtod_l+0x2dc>
 8008cce:	4565      	cmp	r5, ip
 8008cd0:	bfa8      	it	ge
 8008cd2:	4665      	movge	r5, ip
 8008cd4:	b107      	cbz	r7, 8008cd8 <_strtod_l+0x2e0>
 8008cd6:	426d      	negs	r5, r5
 8008cd8:	2c00      	cmp	r4, #0
 8008cda:	d14c      	bne.n	8008d76 <_strtod_l+0x37e>
 8008cdc:	9907      	ldr	r1, [sp, #28]
 8008cde:	4301      	orrs	r1, r0
 8008ce0:	f47f aecb 	bne.w	8008a7a <_strtod_l+0x82>
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f47f aee4 	bne.w	8008ab2 <_strtod_l+0xba>
 8008cea:	2a69      	cmp	r2, #105	; 0x69
 8008cec:	d026      	beq.n	8008d3c <_strtod_l+0x344>
 8008cee:	dc23      	bgt.n	8008d38 <_strtod_l+0x340>
 8008cf0:	2a49      	cmp	r2, #73	; 0x49
 8008cf2:	d023      	beq.n	8008d3c <_strtod_l+0x344>
 8008cf4:	2a4e      	cmp	r2, #78	; 0x4e
 8008cf6:	f47f aedc 	bne.w	8008ab2 <_strtod_l+0xba>
 8008cfa:	499d      	ldr	r1, [pc, #628]	; (8008f70 <_strtod_l+0x578>)
 8008cfc:	a819      	add	r0, sp, #100	; 0x64
 8008cfe:	f001 fe23 	bl	800a948 <__match>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	f43f aed5 	beq.w	8008ab2 <_strtod_l+0xba>
 8008d08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	2b28      	cmp	r3, #40	; 0x28
 8008d0e:	d12c      	bne.n	8008d6a <_strtod_l+0x372>
 8008d10:	4998      	ldr	r1, [pc, #608]	; (8008f74 <_strtod_l+0x57c>)
 8008d12:	aa1c      	add	r2, sp, #112	; 0x70
 8008d14:	a819      	add	r0, sp, #100	; 0x64
 8008d16:	f001 fe2b 	bl	800a970 <__hexnan>
 8008d1a:	2805      	cmp	r0, #5
 8008d1c:	d125      	bne.n	8008d6a <_strtod_l+0x372>
 8008d1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d20:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008d24:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008d28:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008d2c:	e6a5      	b.n	8008a7a <_strtod_l+0x82>
 8008d2e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8008d32:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8008d36:	e7bc      	b.n	8008cb2 <_strtod_l+0x2ba>
 8008d38:	2a6e      	cmp	r2, #110	; 0x6e
 8008d3a:	e7dc      	b.n	8008cf6 <_strtod_l+0x2fe>
 8008d3c:	498e      	ldr	r1, [pc, #568]	; (8008f78 <_strtod_l+0x580>)
 8008d3e:	a819      	add	r0, sp, #100	; 0x64
 8008d40:	f001 fe02 	bl	800a948 <__match>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	f43f aeb4 	beq.w	8008ab2 <_strtod_l+0xba>
 8008d4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d4c:	498b      	ldr	r1, [pc, #556]	; (8008f7c <_strtod_l+0x584>)
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	a819      	add	r0, sp, #100	; 0x64
 8008d52:	9319      	str	r3, [sp, #100]	; 0x64
 8008d54:	f001 fdf8 	bl	800a948 <__match>
 8008d58:	b910      	cbnz	r0, 8008d60 <_strtod_l+0x368>
 8008d5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	9319      	str	r3, [sp, #100]	; 0x64
 8008d60:	f04f 0800 	mov.w	r8, #0
 8008d64:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8008f80 <_strtod_l+0x588>
 8008d68:	e687      	b.n	8008a7a <_strtod_l+0x82>
 8008d6a:	4886      	ldr	r0, [pc, #536]	; (8008f84 <_strtod_l+0x58c>)
 8008d6c:	f002 fdda 	bl	800b924 <nan>
 8008d70:	4680      	mov	r8, r0
 8008d72:	4689      	mov	r9, r1
 8008d74:	e681      	b.n	8008a7a <_strtod_l+0x82>
 8008d76:	9b04      	ldr	r3, [sp, #16]
 8008d78:	f1bb 0f00 	cmp.w	fp, #0
 8008d7c:	bf08      	it	eq
 8008d7e:	46a3      	moveq	fp, r4
 8008d80:	1aeb      	subs	r3, r5, r3
 8008d82:	2c10      	cmp	r4, #16
 8008d84:	9806      	ldr	r0, [sp, #24]
 8008d86:	4626      	mov	r6, r4
 8008d88:	9307      	str	r3, [sp, #28]
 8008d8a:	bfa8      	it	ge
 8008d8c:	2610      	movge	r6, #16
 8008d8e:	f7fc fab5 	bl	80052fc <__aeabi_ui2d>
 8008d92:	2c09      	cmp	r4, #9
 8008d94:	4680      	mov	r8, r0
 8008d96:	4689      	mov	r9, r1
 8008d98:	dd13      	ble.n	8008dc2 <_strtod_l+0x3ca>
 8008d9a:	4b7b      	ldr	r3, [pc, #492]	; (8008f88 <_strtod_l+0x590>)
 8008d9c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008da0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008da4:	f7fc fb24 	bl	80053f0 <__aeabi_dmul>
 8008da8:	4680      	mov	r8, r0
 8008daa:	9805      	ldr	r0, [sp, #20]
 8008dac:	4689      	mov	r9, r1
 8008dae:	f7fc faa5 	bl	80052fc <__aeabi_ui2d>
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	4640      	mov	r0, r8
 8008db8:	4649      	mov	r1, r9
 8008dba:	f7fc f963 	bl	8005084 <__adddf3>
 8008dbe:	4680      	mov	r8, r0
 8008dc0:	4689      	mov	r9, r1
 8008dc2:	2c0f      	cmp	r4, #15
 8008dc4:	dc36      	bgt.n	8008e34 <_strtod_l+0x43c>
 8008dc6:	9b07      	ldr	r3, [sp, #28]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f43f ae56 	beq.w	8008a7a <_strtod_l+0x82>
 8008dce:	dd22      	ble.n	8008e16 <_strtod_l+0x41e>
 8008dd0:	2b16      	cmp	r3, #22
 8008dd2:	dc09      	bgt.n	8008de8 <_strtod_l+0x3f0>
 8008dd4:	496c      	ldr	r1, [pc, #432]	; (8008f88 <_strtod_l+0x590>)
 8008dd6:	4642      	mov	r2, r8
 8008dd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ddc:	464b      	mov	r3, r9
 8008dde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008de2:	f7fc fb05 	bl	80053f0 <__aeabi_dmul>
 8008de6:	e7c3      	b.n	8008d70 <_strtod_l+0x378>
 8008de8:	9a07      	ldr	r2, [sp, #28]
 8008dea:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008dee:	4293      	cmp	r3, r2
 8008df0:	db20      	blt.n	8008e34 <_strtod_l+0x43c>
 8008df2:	4d65      	ldr	r5, [pc, #404]	; (8008f88 <_strtod_l+0x590>)
 8008df4:	f1c4 040f 	rsb	r4, r4, #15
 8008df8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008dfc:	4642      	mov	r2, r8
 8008dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e02:	464b      	mov	r3, r9
 8008e04:	f7fc faf4 	bl	80053f0 <__aeabi_dmul>
 8008e08:	9b07      	ldr	r3, [sp, #28]
 8008e0a:	1b1c      	subs	r4, r3, r4
 8008e0c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008e10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e14:	e7e5      	b.n	8008de2 <_strtod_l+0x3ea>
 8008e16:	9b07      	ldr	r3, [sp, #28]
 8008e18:	3316      	adds	r3, #22
 8008e1a:	db0b      	blt.n	8008e34 <_strtod_l+0x43c>
 8008e1c:	9b04      	ldr	r3, [sp, #16]
 8008e1e:	4640      	mov	r0, r8
 8008e20:	1b5d      	subs	r5, r3, r5
 8008e22:	4b59      	ldr	r3, [pc, #356]	; (8008f88 <_strtod_l+0x590>)
 8008e24:	4649      	mov	r1, r9
 8008e26:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008e2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e2e:	f7fc fc09 	bl	8005644 <__aeabi_ddiv>
 8008e32:	e79d      	b.n	8008d70 <_strtod_l+0x378>
 8008e34:	9b07      	ldr	r3, [sp, #28]
 8008e36:	1ba6      	subs	r6, r4, r6
 8008e38:	441e      	add	r6, r3
 8008e3a:	2e00      	cmp	r6, #0
 8008e3c:	dd74      	ble.n	8008f28 <_strtod_l+0x530>
 8008e3e:	f016 030f 	ands.w	r3, r6, #15
 8008e42:	d00a      	beq.n	8008e5a <_strtod_l+0x462>
 8008e44:	4950      	ldr	r1, [pc, #320]	; (8008f88 <_strtod_l+0x590>)
 8008e46:	4642      	mov	r2, r8
 8008e48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e50:	464b      	mov	r3, r9
 8008e52:	f7fc facd 	bl	80053f0 <__aeabi_dmul>
 8008e56:	4680      	mov	r8, r0
 8008e58:	4689      	mov	r9, r1
 8008e5a:	f036 060f 	bics.w	r6, r6, #15
 8008e5e:	d052      	beq.n	8008f06 <_strtod_l+0x50e>
 8008e60:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8008e64:	dd27      	ble.n	8008eb6 <_strtod_l+0x4be>
 8008e66:	f04f 0b00 	mov.w	fp, #0
 8008e6a:	f8cd b010 	str.w	fp, [sp, #16]
 8008e6e:	f8cd b020 	str.w	fp, [sp, #32]
 8008e72:	f8cd b018 	str.w	fp, [sp, #24]
 8008e76:	2322      	movs	r3, #34	; 0x22
 8008e78:	f04f 0800 	mov.w	r8, #0
 8008e7c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8008f80 <_strtod_l+0x588>
 8008e80:	f8ca 3000 	str.w	r3, [sl]
 8008e84:	9b08      	ldr	r3, [sp, #32]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f43f adf7 	beq.w	8008a7a <_strtod_l+0x82>
 8008e8c:	4650      	mov	r0, sl
 8008e8e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008e90:	f001 fe84 	bl	800ab9c <_Bfree>
 8008e94:	4650      	mov	r0, sl
 8008e96:	9906      	ldr	r1, [sp, #24]
 8008e98:	f001 fe80 	bl	800ab9c <_Bfree>
 8008e9c:	4650      	mov	r0, sl
 8008e9e:	9904      	ldr	r1, [sp, #16]
 8008ea0:	f001 fe7c 	bl	800ab9c <_Bfree>
 8008ea4:	4650      	mov	r0, sl
 8008ea6:	9908      	ldr	r1, [sp, #32]
 8008ea8:	f001 fe78 	bl	800ab9c <_Bfree>
 8008eac:	4659      	mov	r1, fp
 8008eae:	4650      	mov	r0, sl
 8008eb0:	f001 fe74 	bl	800ab9c <_Bfree>
 8008eb4:	e5e1      	b.n	8008a7a <_strtod_l+0x82>
 8008eb6:	4b35      	ldr	r3, [pc, #212]	; (8008f8c <_strtod_l+0x594>)
 8008eb8:	4640      	mov	r0, r8
 8008eba:	9305      	str	r3, [sp, #20]
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	4649      	mov	r1, r9
 8008ec0:	461f      	mov	r7, r3
 8008ec2:	1136      	asrs	r6, r6, #4
 8008ec4:	2e01      	cmp	r6, #1
 8008ec6:	dc21      	bgt.n	8008f0c <_strtod_l+0x514>
 8008ec8:	b10b      	cbz	r3, 8008ece <_strtod_l+0x4d6>
 8008eca:	4680      	mov	r8, r0
 8008ecc:	4689      	mov	r9, r1
 8008ece:	4b2f      	ldr	r3, [pc, #188]	; (8008f8c <_strtod_l+0x594>)
 8008ed0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008ed4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008ed8:	4642      	mov	r2, r8
 8008eda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ede:	464b      	mov	r3, r9
 8008ee0:	f7fc fa86 	bl	80053f0 <__aeabi_dmul>
 8008ee4:	4b26      	ldr	r3, [pc, #152]	; (8008f80 <_strtod_l+0x588>)
 8008ee6:	460a      	mov	r2, r1
 8008ee8:	400b      	ands	r3, r1
 8008eea:	4929      	ldr	r1, [pc, #164]	; (8008f90 <_strtod_l+0x598>)
 8008eec:	4680      	mov	r8, r0
 8008eee:	428b      	cmp	r3, r1
 8008ef0:	d8b9      	bhi.n	8008e66 <_strtod_l+0x46e>
 8008ef2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008ef6:	428b      	cmp	r3, r1
 8008ef8:	bf86      	itte	hi
 8008efa:	f04f 38ff 	movhi.w	r8, #4294967295
 8008efe:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008f94 <_strtod_l+0x59c>
 8008f02:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008f06:	2300      	movs	r3, #0
 8008f08:	9305      	str	r3, [sp, #20]
 8008f0a:	e07f      	b.n	800900c <_strtod_l+0x614>
 8008f0c:	07f2      	lsls	r2, r6, #31
 8008f0e:	d505      	bpl.n	8008f1c <_strtod_l+0x524>
 8008f10:	9b05      	ldr	r3, [sp, #20]
 8008f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f16:	f7fc fa6b 	bl	80053f0 <__aeabi_dmul>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	9a05      	ldr	r2, [sp, #20]
 8008f1e:	3701      	adds	r7, #1
 8008f20:	3208      	adds	r2, #8
 8008f22:	1076      	asrs	r6, r6, #1
 8008f24:	9205      	str	r2, [sp, #20]
 8008f26:	e7cd      	b.n	8008ec4 <_strtod_l+0x4cc>
 8008f28:	d0ed      	beq.n	8008f06 <_strtod_l+0x50e>
 8008f2a:	4276      	negs	r6, r6
 8008f2c:	f016 020f 	ands.w	r2, r6, #15
 8008f30:	d00a      	beq.n	8008f48 <_strtod_l+0x550>
 8008f32:	4b15      	ldr	r3, [pc, #84]	; (8008f88 <_strtod_l+0x590>)
 8008f34:	4640      	mov	r0, r8
 8008f36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f3a:	4649      	mov	r1, r9
 8008f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f40:	f7fc fb80 	bl	8005644 <__aeabi_ddiv>
 8008f44:	4680      	mov	r8, r0
 8008f46:	4689      	mov	r9, r1
 8008f48:	1136      	asrs	r6, r6, #4
 8008f4a:	d0dc      	beq.n	8008f06 <_strtod_l+0x50e>
 8008f4c:	2e1f      	cmp	r6, #31
 8008f4e:	dd23      	ble.n	8008f98 <_strtod_l+0x5a0>
 8008f50:	f04f 0b00 	mov.w	fp, #0
 8008f54:	f8cd b010 	str.w	fp, [sp, #16]
 8008f58:	f8cd b020 	str.w	fp, [sp, #32]
 8008f5c:	f8cd b018 	str.w	fp, [sp, #24]
 8008f60:	2322      	movs	r3, #34	; 0x22
 8008f62:	f04f 0800 	mov.w	r8, #0
 8008f66:	f04f 0900 	mov.w	r9, #0
 8008f6a:	f8ca 3000 	str.w	r3, [sl]
 8008f6e:	e789      	b.n	8008e84 <_strtod_l+0x48c>
 8008f70:	0801df01 	.word	0x0801df01
 8008f74:	0801df44 	.word	0x0801df44
 8008f78:	0801def9 	.word	0x0801def9
 8008f7c:	0801e084 	.word	0x0801e084
 8008f80:	7ff00000 	.word	0x7ff00000
 8008f84:	0801e330 	.word	0x0801e330
 8008f88:	0801e210 	.word	0x0801e210
 8008f8c:	0801e1e8 	.word	0x0801e1e8
 8008f90:	7ca00000 	.word	0x7ca00000
 8008f94:	7fefffff 	.word	0x7fefffff
 8008f98:	f016 0310 	ands.w	r3, r6, #16
 8008f9c:	bf18      	it	ne
 8008f9e:	236a      	movne	r3, #106	; 0x6a
 8008fa0:	4640      	mov	r0, r8
 8008fa2:	9305      	str	r3, [sp, #20]
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	4fb0      	ldr	r7, [pc, #704]	; (800926c <_strtod_l+0x874>)
 8008faa:	07f2      	lsls	r2, r6, #31
 8008fac:	d504      	bpl.n	8008fb8 <_strtod_l+0x5c0>
 8008fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fb2:	f7fc fa1d 	bl	80053f0 <__aeabi_dmul>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	1076      	asrs	r6, r6, #1
 8008fba:	f107 0708 	add.w	r7, r7, #8
 8008fbe:	d1f4      	bne.n	8008faa <_strtod_l+0x5b2>
 8008fc0:	b10b      	cbz	r3, 8008fc6 <_strtod_l+0x5ce>
 8008fc2:	4680      	mov	r8, r0
 8008fc4:	4689      	mov	r9, r1
 8008fc6:	9b05      	ldr	r3, [sp, #20]
 8008fc8:	b1c3      	cbz	r3, 8008ffc <_strtod_l+0x604>
 8008fca:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008fce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	dd11      	ble.n	8008ffc <_strtod_l+0x604>
 8008fd8:	2b1f      	cmp	r3, #31
 8008fda:	f340 8127 	ble.w	800922c <_strtod_l+0x834>
 8008fde:	2b34      	cmp	r3, #52	; 0x34
 8008fe0:	bfd8      	it	le
 8008fe2:	f04f 33ff 	movle.w	r3, #4294967295
 8008fe6:	f04f 0800 	mov.w	r8, #0
 8008fea:	bfcf      	iteee	gt
 8008fec:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008ff0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008ff4:	fa03 f202 	lslle.w	r2, r3, r2
 8008ff8:	ea02 0901 	andle.w	r9, r2, r1
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	2300      	movs	r3, #0
 8009000:	4640      	mov	r0, r8
 8009002:	4649      	mov	r1, r9
 8009004:	f7fc fc5c 	bl	80058c0 <__aeabi_dcmpeq>
 8009008:	2800      	cmp	r0, #0
 800900a:	d1a1      	bne.n	8008f50 <_strtod_l+0x558>
 800900c:	9b06      	ldr	r3, [sp, #24]
 800900e:	465a      	mov	r2, fp
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	4650      	mov	r0, sl
 8009014:	4623      	mov	r3, r4
 8009016:	9908      	ldr	r1, [sp, #32]
 8009018:	f001 fe28 	bl	800ac6c <__s2b>
 800901c:	9008      	str	r0, [sp, #32]
 800901e:	2800      	cmp	r0, #0
 8009020:	f43f af21 	beq.w	8008e66 <_strtod_l+0x46e>
 8009024:	9b04      	ldr	r3, [sp, #16]
 8009026:	f04f 0b00 	mov.w	fp, #0
 800902a:	1b5d      	subs	r5, r3, r5
 800902c:	9b07      	ldr	r3, [sp, #28]
 800902e:	f8cd b010 	str.w	fp, [sp, #16]
 8009032:	2b00      	cmp	r3, #0
 8009034:	bfb4      	ite	lt
 8009036:	462b      	movlt	r3, r5
 8009038:	2300      	movge	r3, #0
 800903a:	930e      	str	r3, [sp, #56]	; 0x38
 800903c:	9b07      	ldr	r3, [sp, #28]
 800903e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009042:	9314      	str	r3, [sp, #80]	; 0x50
 8009044:	9b08      	ldr	r3, [sp, #32]
 8009046:	4650      	mov	r0, sl
 8009048:	6859      	ldr	r1, [r3, #4]
 800904a:	f001 fd67 	bl	800ab1c <_Balloc>
 800904e:	9006      	str	r0, [sp, #24]
 8009050:	2800      	cmp	r0, #0
 8009052:	f43f af10 	beq.w	8008e76 <_strtod_l+0x47e>
 8009056:	9b08      	ldr	r3, [sp, #32]
 8009058:	300c      	adds	r0, #12
 800905a:	691a      	ldr	r2, [r3, #16]
 800905c:	f103 010c 	add.w	r1, r3, #12
 8009060:	3202      	adds	r2, #2
 8009062:	0092      	lsls	r2, r2, #2
 8009064:	f001 fd4c 	bl	800ab00 <memcpy>
 8009068:	ab1c      	add	r3, sp, #112	; 0x70
 800906a:	9301      	str	r3, [sp, #4]
 800906c:	ab1b      	add	r3, sp, #108	; 0x6c
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	4642      	mov	r2, r8
 8009072:	464b      	mov	r3, r9
 8009074:	4650      	mov	r0, sl
 8009076:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800907a:	f002 f939 	bl	800b2f0 <__d2b>
 800907e:	901a      	str	r0, [sp, #104]	; 0x68
 8009080:	2800      	cmp	r0, #0
 8009082:	f43f aef8 	beq.w	8008e76 <_strtod_l+0x47e>
 8009086:	2101      	movs	r1, #1
 8009088:	4650      	mov	r0, sl
 800908a:	f001 fe87 	bl	800ad9c <__i2b>
 800908e:	4603      	mov	r3, r0
 8009090:	9004      	str	r0, [sp, #16]
 8009092:	2800      	cmp	r0, #0
 8009094:	f43f aeef 	beq.w	8008e76 <_strtod_l+0x47e>
 8009098:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800909a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800909c:	2d00      	cmp	r5, #0
 800909e:	bfab      	itete	ge
 80090a0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80090a2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80090a4:	18ee      	addge	r6, r5, r3
 80090a6:	1b5c      	sublt	r4, r3, r5
 80090a8:	9b05      	ldr	r3, [sp, #20]
 80090aa:	bfa8      	it	ge
 80090ac:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80090ae:	eba5 0503 	sub.w	r5, r5, r3
 80090b2:	4415      	add	r5, r2
 80090b4:	4b6e      	ldr	r3, [pc, #440]	; (8009270 <_strtod_l+0x878>)
 80090b6:	f105 35ff 	add.w	r5, r5, #4294967295
 80090ba:	bfb8      	it	lt
 80090bc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80090be:	429d      	cmp	r5, r3
 80090c0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80090c4:	f280 80c4 	bge.w	8009250 <_strtod_l+0x858>
 80090c8:	1b5b      	subs	r3, r3, r5
 80090ca:	2b1f      	cmp	r3, #31
 80090cc:	f04f 0701 	mov.w	r7, #1
 80090d0:	eba2 0203 	sub.w	r2, r2, r3
 80090d4:	f300 80b1 	bgt.w	800923a <_strtod_l+0x842>
 80090d8:	2500      	movs	r5, #0
 80090da:	fa07 f303 	lsl.w	r3, r7, r3
 80090de:	930f      	str	r3, [sp, #60]	; 0x3c
 80090e0:	18b7      	adds	r7, r6, r2
 80090e2:	9b05      	ldr	r3, [sp, #20]
 80090e4:	42be      	cmp	r6, r7
 80090e6:	4414      	add	r4, r2
 80090e8:	441c      	add	r4, r3
 80090ea:	4633      	mov	r3, r6
 80090ec:	bfa8      	it	ge
 80090ee:	463b      	movge	r3, r7
 80090f0:	42a3      	cmp	r3, r4
 80090f2:	bfa8      	it	ge
 80090f4:	4623      	movge	r3, r4
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	bfc2      	ittt	gt
 80090fa:	1aff      	subgt	r7, r7, r3
 80090fc:	1ae4      	subgt	r4, r4, r3
 80090fe:	1af6      	subgt	r6, r6, r3
 8009100:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009102:	2b00      	cmp	r3, #0
 8009104:	dd17      	ble.n	8009136 <_strtod_l+0x73e>
 8009106:	461a      	mov	r2, r3
 8009108:	4650      	mov	r0, sl
 800910a:	9904      	ldr	r1, [sp, #16]
 800910c:	f001 ff04 	bl	800af18 <__pow5mult>
 8009110:	9004      	str	r0, [sp, #16]
 8009112:	2800      	cmp	r0, #0
 8009114:	f43f aeaf 	beq.w	8008e76 <_strtod_l+0x47e>
 8009118:	4601      	mov	r1, r0
 800911a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800911c:	4650      	mov	r0, sl
 800911e:	f001 fe53 	bl	800adc8 <__multiply>
 8009122:	9009      	str	r0, [sp, #36]	; 0x24
 8009124:	2800      	cmp	r0, #0
 8009126:	f43f aea6 	beq.w	8008e76 <_strtod_l+0x47e>
 800912a:	4650      	mov	r0, sl
 800912c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800912e:	f001 fd35 	bl	800ab9c <_Bfree>
 8009132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009134:	931a      	str	r3, [sp, #104]	; 0x68
 8009136:	2f00      	cmp	r7, #0
 8009138:	f300 808e 	bgt.w	8009258 <_strtod_l+0x860>
 800913c:	9b07      	ldr	r3, [sp, #28]
 800913e:	2b00      	cmp	r3, #0
 8009140:	dd08      	ble.n	8009154 <_strtod_l+0x75c>
 8009142:	4650      	mov	r0, sl
 8009144:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009146:	9906      	ldr	r1, [sp, #24]
 8009148:	f001 fee6 	bl	800af18 <__pow5mult>
 800914c:	9006      	str	r0, [sp, #24]
 800914e:	2800      	cmp	r0, #0
 8009150:	f43f ae91 	beq.w	8008e76 <_strtod_l+0x47e>
 8009154:	2c00      	cmp	r4, #0
 8009156:	dd08      	ble.n	800916a <_strtod_l+0x772>
 8009158:	4622      	mov	r2, r4
 800915a:	4650      	mov	r0, sl
 800915c:	9906      	ldr	r1, [sp, #24]
 800915e:	f001 ff35 	bl	800afcc <__lshift>
 8009162:	9006      	str	r0, [sp, #24]
 8009164:	2800      	cmp	r0, #0
 8009166:	f43f ae86 	beq.w	8008e76 <_strtod_l+0x47e>
 800916a:	2e00      	cmp	r6, #0
 800916c:	dd08      	ble.n	8009180 <_strtod_l+0x788>
 800916e:	4632      	mov	r2, r6
 8009170:	4650      	mov	r0, sl
 8009172:	9904      	ldr	r1, [sp, #16]
 8009174:	f001 ff2a 	bl	800afcc <__lshift>
 8009178:	9004      	str	r0, [sp, #16]
 800917a:	2800      	cmp	r0, #0
 800917c:	f43f ae7b 	beq.w	8008e76 <_strtod_l+0x47e>
 8009180:	4650      	mov	r0, sl
 8009182:	9a06      	ldr	r2, [sp, #24]
 8009184:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009186:	f001 ffad 	bl	800b0e4 <__mdiff>
 800918a:	4683      	mov	fp, r0
 800918c:	2800      	cmp	r0, #0
 800918e:	f43f ae72 	beq.w	8008e76 <_strtod_l+0x47e>
 8009192:	2400      	movs	r4, #0
 8009194:	68c3      	ldr	r3, [r0, #12]
 8009196:	9904      	ldr	r1, [sp, #16]
 8009198:	60c4      	str	r4, [r0, #12]
 800919a:	930b      	str	r3, [sp, #44]	; 0x2c
 800919c:	f001 ff86 	bl	800b0ac <__mcmp>
 80091a0:	42a0      	cmp	r0, r4
 80091a2:	da6b      	bge.n	800927c <_strtod_l+0x884>
 80091a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091a6:	ea53 0308 	orrs.w	r3, r3, r8
 80091aa:	f040 8091 	bne.w	80092d0 <_strtod_l+0x8d8>
 80091ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f040 808c 	bne.w	80092d0 <_strtod_l+0x8d8>
 80091b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80091bc:	0d1b      	lsrs	r3, r3, #20
 80091be:	051b      	lsls	r3, r3, #20
 80091c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80091c4:	f240 8084 	bls.w	80092d0 <_strtod_l+0x8d8>
 80091c8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80091cc:	b91b      	cbnz	r3, 80091d6 <_strtod_l+0x7de>
 80091ce:	f8db 3010 	ldr.w	r3, [fp, #16]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	dd7c      	ble.n	80092d0 <_strtod_l+0x8d8>
 80091d6:	4659      	mov	r1, fp
 80091d8:	2201      	movs	r2, #1
 80091da:	4650      	mov	r0, sl
 80091dc:	f001 fef6 	bl	800afcc <__lshift>
 80091e0:	9904      	ldr	r1, [sp, #16]
 80091e2:	4683      	mov	fp, r0
 80091e4:	f001 ff62 	bl	800b0ac <__mcmp>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	dd71      	ble.n	80092d0 <_strtod_l+0x8d8>
 80091ec:	9905      	ldr	r1, [sp, #20]
 80091ee:	464b      	mov	r3, r9
 80091f0:	4a20      	ldr	r2, [pc, #128]	; (8009274 <_strtod_l+0x87c>)
 80091f2:	2900      	cmp	r1, #0
 80091f4:	f000 808c 	beq.w	8009310 <_strtod_l+0x918>
 80091f8:	ea02 0109 	and.w	r1, r2, r9
 80091fc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009200:	f300 8086 	bgt.w	8009310 <_strtod_l+0x918>
 8009204:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009208:	f77f aeaa 	ble.w	8008f60 <_strtod_l+0x568>
 800920c:	4640      	mov	r0, r8
 800920e:	4649      	mov	r1, r9
 8009210:	4b19      	ldr	r3, [pc, #100]	; (8009278 <_strtod_l+0x880>)
 8009212:	2200      	movs	r2, #0
 8009214:	f7fc f8ec 	bl	80053f0 <__aeabi_dmul>
 8009218:	460b      	mov	r3, r1
 800921a:	4303      	orrs	r3, r0
 800921c:	bf08      	it	eq
 800921e:	2322      	moveq	r3, #34	; 0x22
 8009220:	4680      	mov	r8, r0
 8009222:	4689      	mov	r9, r1
 8009224:	bf08      	it	eq
 8009226:	f8ca 3000 	streq.w	r3, [sl]
 800922a:	e62f      	b.n	8008e8c <_strtod_l+0x494>
 800922c:	f04f 32ff 	mov.w	r2, #4294967295
 8009230:	fa02 f303 	lsl.w	r3, r2, r3
 8009234:	ea03 0808 	and.w	r8, r3, r8
 8009238:	e6e0      	b.n	8008ffc <_strtod_l+0x604>
 800923a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800923e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009242:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009246:	35e2      	adds	r5, #226	; 0xe2
 8009248:	fa07 f505 	lsl.w	r5, r7, r5
 800924c:	970f      	str	r7, [sp, #60]	; 0x3c
 800924e:	e747      	b.n	80090e0 <_strtod_l+0x6e8>
 8009250:	2301      	movs	r3, #1
 8009252:	2500      	movs	r5, #0
 8009254:	930f      	str	r3, [sp, #60]	; 0x3c
 8009256:	e743      	b.n	80090e0 <_strtod_l+0x6e8>
 8009258:	463a      	mov	r2, r7
 800925a:	4650      	mov	r0, sl
 800925c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800925e:	f001 feb5 	bl	800afcc <__lshift>
 8009262:	901a      	str	r0, [sp, #104]	; 0x68
 8009264:	2800      	cmp	r0, #0
 8009266:	f47f af69 	bne.w	800913c <_strtod_l+0x744>
 800926a:	e604      	b.n	8008e76 <_strtod_l+0x47e>
 800926c:	0801df58 	.word	0x0801df58
 8009270:	fffffc02 	.word	0xfffffc02
 8009274:	7ff00000 	.word	0x7ff00000
 8009278:	39500000 	.word	0x39500000
 800927c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009280:	d165      	bne.n	800934e <_strtod_l+0x956>
 8009282:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009284:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009288:	b35a      	cbz	r2, 80092e2 <_strtod_l+0x8ea>
 800928a:	4a99      	ldr	r2, [pc, #612]	; (80094f0 <_strtod_l+0xaf8>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d12b      	bne.n	80092e8 <_strtod_l+0x8f0>
 8009290:	9b05      	ldr	r3, [sp, #20]
 8009292:	4641      	mov	r1, r8
 8009294:	b303      	cbz	r3, 80092d8 <_strtod_l+0x8e0>
 8009296:	464a      	mov	r2, r9
 8009298:	4b96      	ldr	r3, [pc, #600]	; (80094f4 <_strtod_l+0xafc>)
 800929a:	4013      	ands	r3, r2
 800929c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80092a0:	f04f 32ff 	mov.w	r2, #4294967295
 80092a4:	d81b      	bhi.n	80092de <_strtod_l+0x8e6>
 80092a6:	0d1b      	lsrs	r3, r3, #20
 80092a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80092ac:	fa02 f303 	lsl.w	r3, r2, r3
 80092b0:	4299      	cmp	r1, r3
 80092b2:	d119      	bne.n	80092e8 <_strtod_l+0x8f0>
 80092b4:	4b90      	ldr	r3, [pc, #576]	; (80094f8 <_strtod_l+0xb00>)
 80092b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d102      	bne.n	80092c2 <_strtod_l+0x8ca>
 80092bc:	3101      	adds	r1, #1
 80092be:	f43f adda 	beq.w	8008e76 <_strtod_l+0x47e>
 80092c2:	f04f 0800 	mov.w	r8, #0
 80092c6:	4b8b      	ldr	r3, [pc, #556]	; (80094f4 <_strtod_l+0xafc>)
 80092c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092ca:	401a      	ands	r2, r3
 80092cc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80092d0:	9b05      	ldr	r3, [sp, #20]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d19a      	bne.n	800920c <_strtod_l+0x814>
 80092d6:	e5d9      	b.n	8008e8c <_strtod_l+0x494>
 80092d8:	f04f 33ff 	mov.w	r3, #4294967295
 80092dc:	e7e8      	b.n	80092b0 <_strtod_l+0x8b8>
 80092de:	4613      	mov	r3, r2
 80092e0:	e7e6      	b.n	80092b0 <_strtod_l+0x8b8>
 80092e2:	ea53 0308 	orrs.w	r3, r3, r8
 80092e6:	d081      	beq.n	80091ec <_strtod_l+0x7f4>
 80092e8:	b1e5      	cbz	r5, 8009324 <_strtod_l+0x92c>
 80092ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ec:	421d      	tst	r5, r3
 80092ee:	d0ef      	beq.n	80092d0 <_strtod_l+0x8d8>
 80092f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092f2:	4640      	mov	r0, r8
 80092f4:	4649      	mov	r1, r9
 80092f6:	9a05      	ldr	r2, [sp, #20]
 80092f8:	b1c3      	cbz	r3, 800932c <_strtod_l+0x934>
 80092fa:	f7ff fb59 	bl	80089b0 <sulp>
 80092fe:	4602      	mov	r2, r0
 8009300:	460b      	mov	r3, r1
 8009302:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009306:	f7fb febd 	bl	8005084 <__adddf3>
 800930a:	4680      	mov	r8, r0
 800930c:	4689      	mov	r9, r1
 800930e:	e7df      	b.n	80092d0 <_strtod_l+0x8d8>
 8009310:	4013      	ands	r3, r2
 8009312:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009316:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800931a:	f04f 38ff 	mov.w	r8, #4294967295
 800931e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009322:	e7d5      	b.n	80092d0 <_strtod_l+0x8d8>
 8009324:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009326:	ea13 0f08 	tst.w	r3, r8
 800932a:	e7e0      	b.n	80092ee <_strtod_l+0x8f6>
 800932c:	f7ff fb40 	bl	80089b0 <sulp>
 8009330:	4602      	mov	r2, r0
 8009332:	460b      	mov	r3, r1
 8009334:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009338:	f7fb fea2 	bl	8005080 <__aeabi_dsub>
 800933c:	2200      	movs	r2, #0
 800933e:	2300      	movs	r3, #0
 8009340:	4680      	mov	r8, r0
 8009342:	4689      	mov	r9, r1
 8009344:	f7fc fabc 	bl	80058c0 <__aeabi_dcmpeq>
 8009348:	2800      	cmp	r0, #0
 800934a:	d0c1      	beq.n	80092d0 <_strtod_l+0x8d8>
 800934c:	e608      	b.n	8008f60 <_strtod_l+0x568>
 800934e:	4658      	mov	r0, fp
 8009350:	9904      	ldr	r1, [sp, #16]
 8009352:	f002 f829 	bl	800b3a8 <__ratio>
 8009356:	2200      	movs	r2, #0
 8009358:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800935c:	4606      	mov	r6, r0
 800935e:	460f      	mov	r7, r1
 8009360:	f7fc fac2 	bl	80058e8 <__aeabi_dcmple>
 8009364:	2800      	cmp	r0, #0
 8009366:	d070      	beq.n	800944a <_strtod_l+0xa52>
 8009368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800936a:	2b00      	cmp	r3, #0
 800936c:	d042      	beq.n	80093f4 <_strtod_l+0x9fc>
 800936e:	2600      	movs	r6, #0
 8009370:	4f62      	ldr	r7, [pc, #392]	; (80094fc <_strtod_l+0xb04>)
 8009372:	4d62      	ldr	r5, [pc, #392]	; (80094fc <_strtod_l+0xb04>)
 8009374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009376:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800937a:	0d1b      	lsrs	r3, r3, #20
 800937c:	051b      	lsls	r3, r3, #20
 800937e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009380:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009382:	4b5f      	ldr	r3, [pc, #380]	; (8009500 <_strtod_l+0xb08>)
 8009384:	429a      	cmp	r2, r3
 8009386:	f040 80c3 	bne.w	8009510 <_strtod_l+0xb18>
 800938a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800938c:	4640      	mov	r0, r8
 800938e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009392:	4649      	mov	r1, r9
 8009394:	f001 ff32 	bl	800b1fc <__ulp>
 8009398:	4602      	mov	r2, r0
 800939a:	460b      	mov	r3, r1
 800939c:	4630      	mov	r0, r6
 800939e:	4639      	mov	r1, r7
 80093a0:	f7fc f826 	bl	80053f0 <__aeabi_dmul>
 80093a4:	4642      	mov	r2, r8
 80093a6:	464b      	mov	r3, r9
 80093a8:	f7fb fe6c 	bl	8005084 <__adddf3>
 80093ac:	460b      	mov	r3, r1
 80093ae:	4951      	ldr	r1, [pc, #324]	; (80094f4 <_strtod_l+0xafc>)
 80093b0:	4a54      	ldr	r2, [pc, #336]	; (8009504 <_strtod_l+0xb0c>)
 80093b2:	4019      	ands	r1, r3
 80093b4:	4291      	cmp	r1, r2
 80093b6:	4680      	mov	r8, r0
 80093b8:	d95d      	bls.n	8009476 <_strtod_l+0xa7e>
 80093ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093bc:	4b4e      	ldr	r3, [pc, #312]	; (80094f8 <_strtod_l+0xb00>)
 80093be:	429a      	cmp	r2, r3
 80093c0:	d103      	bne.n	80093ca <_strtod_l+0x9d2>
 80093c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093c4:	3301      	adds	r3, #1
 80093c6:	f43f ad56 	beq.w	8008e76 <_strtod_l+0x47e>
 80093ca:	f04f 38ff 	mov.w	r8, #4294967295
 80093ce:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80094f8 <_strtod_l+0xb00>
 80093d2:	4650      	mov	r0, sl
 80093d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80093d6:	f001 fbe1 	bl	800ab9c <_Bfree>
 80093da:	4650      	mov	r0, sl
 80093dc:	9906      	ldr	r1, [sp, #24]
 80093de:	f001 fbdd 	bl	800ab9c <_Bfree>
 80093e2:	4650      	mov	r0, sl
 80093e4:	9904      	ldr	r1, [sp, #16]
 80093e6:	f001 fbd9 	bl	800ab9c <_Bfree>
 80093ea:	4659      	mov	r1, fp
 80093ec:	4650      	mov	r0, sl
 80093ee:	f001 fbd5 	bl	800ab9c <_Bfree>
 80093f2:	e627      	b.n	8009044 <_strtod_l+0x64c>
 80093f4:	f1b8 0f00 	cmp.w	r8, #0
 80093f8:	d119      	bne.n	800942e <_strtod_l+0xa36>
 80093fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009400:	b9e3      	cbnz	r3, 800943c <_strtod_l+0xa44>
 8009402:	2200      	movs	r2, #0
 8009404:	4630      	mov	r0, r6
 8009406:	4639      	mov	r1, r7
 8009408:	4b3c      	ldr	r3, [pc, #240]	; (80094fc <_strtod_l+0xb04>)
 800940a:	f7fc fa63 	bl	80058d4 <__aeabi_dcmplt>
 800940e:	b9c8      	cbnz	r0, 8009444 <_strtod_l+0xa4c>
 8009410:	2200      	movs	r2, #0
 8009412:	4630      	mov	r0, r6
 8009414:	4639      	mov	r1, r7
 8009416:	4b3c      	ldr	r3, [pc, #240]	; (8009508 <_strtod_l+0xb10>)
 8009418:	f7fb ffea 	bl	80053f0 <__aeabi_dmul>
 800941c:	4604      	mov	r4, r0
 800941e:	460d      	mov	r5, r1
 8009420:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009424:	9416      	str	r4, [sp, #88]	; 0x58
 8009426:	9317      	str	r3, [sp, #92]	; 0x5c
 8009428:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800942c:	e7a2      	b.n	8009374 <_strtod_l+0x97c>
 800942e:	f1b8 0f01 	cmp.w	r8, #1
 8009432:	d103      	bne.n	800943c <_strtod_l+0xa44>
 8009434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009436:	2b00      	cmp	r3, #0
 8009438:	f43f ad92 	beq.w	8008f60 <_strtod_l+0x568>
 800943c:	2600      	movs	r6, #0
 800943e:	2400      	movs	r4, #0
 8009440:	4f32      	ldr	r7, [pc, #200]	; (800950c <_strtod_l+0xb14>)
 8009442:	e796      	b.n	8009372 <_strtod_l+0x97a>
 8009444:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009446:	4d30      	ldr	r5, [pc, #192]	; (8009508 <_strtod_l+0xb10>)
 8009448:	e7ea      	b.n	8009420 <_strtod_l+0xa28>
 800944a:	4b2f      	ldr	r3, [pc, #188]	; (8009508 <_strtod_l+0xb10>)
 800944c:	2200      	movs	r2, #0
 800944e:	4630      	mov	r0, r6
 8009450:	4639      	mov	r1, r7
 8009452:	f7fb ffcd 	bl	80053f0 <__aeabi_dmul>
 8009456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009458:	4604      	mov	r4, r0
 800945a:	460d      	mov	r5, r1
 800945c:	b933      	cbnz	r3, 800946c <_strtod_l+0xa74>
 800945e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009462:	9010      	str	r0, [sp, #64]	; 0x40
 8009464:	9311      	str	r3, [sp, #68]	; 0x44
 8009466:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800946a:	e783      	b.n	8009374 <_strtod_l+0x97c>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009474:	e7f7      	b.n	8009466 <_strtod_l+0xa6e>
 8009476:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800947a:	9b05      	ldr	r3, [sp, #20]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1a8      	bne.n	80093d2 <_strtod_l+0x9da>
 8009480:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009484:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009486:	0d1b      	lsrs	r3, r3, #20
 8009488:	051b      	lsls	r3, r3, #20
 800948a:	429a      	cmp	r2, r3
 800948c:	d1a1      	bne.n	80093d2 <_strtod_l+0x9da>
 800948e:	4620      	mov	r0, r4
 8009490:	4629      	mov	r1, r5
 8009492:	f7fc faf5 	bl	8005a80 <__aeabi_d2lz>
 8009496:	f7fb ff7d 	bl	8005394 <__aeabi_l2d>
 800949a:	4602      	mov	r2, r0
 800949c:	460b      	mov	r3, r1
 800949e:	4620      	mov	r0, r4
 80094a0:	4629      	mov	r1, r5
 80094a2:	f7fb fded 	bl	8005080 <__aeabi_dsub>
 80094a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094ac:	ea43 0308 	orr.w	r3, r3, r8
 80094b0:	4313      	orrs	r3, r2
 80094b2:	4604      	mov	r4, r0
 80094b4:	460d      	mov	r5, r1
 80094b6:	d066      	beq.n	8009586 <_strtod_l+0xb8e>
 80094b8:	a309      	add	r3, pc, #36	; (adr r3, 80094e0 <_strtod_l+0xae8>)
 80094ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094be:	f7fc fa09 	bl	80058d4 <__aeabi_dcmplt>
 80094c2:	2800      	cmp	r0, #0
 80094c4:	f47f ace2 	bne.w	8008e8c <_strtod_l+0x494>
 80094c8:	a307      	add	r3, pc, #28	; (adr r3, 80094e8 <_strtod_l+0xaf0>)
 80094ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ce:	4620      	mov	r0, r4
 80094d0:	4629      	mov	r1, r5
 80094d2:	f7fc fa1d 	bl	8005910 <__aeabi_dcmpgt>
 80094d6:	2800      	cmp	r0, #0
 80094d8:	f43f af7b 	beq.w	80093d2 <_strtod_l+0x9da>
 80094dc:	e4d6      	b.n	8008e8c <_strtod_l+0x494>
 80094de:	bf00      	nop
 80094e0:	94a03595 	.word	0x94a03595
 80094e4:	3fdfffff 	.word	0x3fdfffff
 80094e8:	35afe535 	.word	0x35afe535
 80094ec:	3fe00000 	.word	0x3fe00000
 80094f0:	000fffff 	.word	0x000fffff
 80094f4:	7ff00000 	.word	0x7ff00000
 80094f8:	7fefffff 	.word	0x7fefffff
 80094fc:	3ff00000 	.word	0x3ff00000
 8009500:	7fe00000 	.word	0x7fe00000
 8009504:	7c9fffff 	.word	0x7c9fffff
 8009508:	3fe00000 	.word	0x3fe00000
 800950c:	bff00000 	.word	0xbff00000
 8009510:	9b05      	ldr	r3, [sp, #20]
 8009512:	b313      	cbz	r3, 800955a <_strtod_l+0xb62>
 8009514:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009516:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800951a:	d81e      	bhi.n	800955a <_strtod_l+0xb62>
 800951c:	a326      	add	r3, pc, #152	; (adr r3, 80095b8 <_strtod_l+0xbc0>)
 800951e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009522:	4620      	mov	r0, r4
 8009524:	4629      	mov	r1, r5
 8009526:	f7fc f9df 	bl	80058e8 <__aeabi_dcmple>
 800952a:	b190      	cbz	r0, 8009552 <_strtod_l+0xb5a>
 800952c:	4629      	mov	r1, r5
 800952e:	4620      	mov	r0, r4
 8009530:	f7fc fa36 	bl	80059a0 <__aeabi_d2uiz>
 8009534:	2801      	cmp	r0, #1
 8009536:	bf38      	it	cc
 8009538:	2001      	movcc	r0, #1
 800953a:	f7fb fedf 	bl	80052fc <__aeabi_ui2d>
 800953e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009540:	4604      	mov	r4, r0
 8009542:	460d      	mov	r5, r1
 8009544:	b9d3      	cbnz	r3, 800957c <_strtod_l+0xb84>
 8009546:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800954a:	9012      	str	r0, [sp, #72]	; 0x48
 800954c:	9313      	str	r3, [sp, #76]	; 0x4c
 800954e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009552:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009554:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009558:	1a9f      	subs	r7, r3, r2
 800955a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800955e:	f001 fe4d 	bl	800b1fc <__ulp>
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	4630      	mov	r0, r6
 8009568:	4639      	mov	r1, r7
 800956a:	f7fb ff41 	bl	80053f0 <__aeabi_dmul>
 800956e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009572:	f7fb fd87 	bl	8005084 <__adddf3>
 8009576:	4680      	mov	r8, r0
 8009578:	4689      	mov	r9, r1
 800957a:	e77e      	b.n	800947a <_strtod_l+0xa82>
 800957c:	4602      	mov	r2, r0
 800957e:	460b      	mov	r3, r1
 8009580:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009584:	e7e3      	b.n	800954e <_strtod_l+0xb56>
 8009586:	a30e      	add	r3, pc, #56	; (adr r3, 80095c0 <_strtod_l+0xbc8>)
 8009588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958c:	f7fc f9a2 	bl	80058d4 <__aeabi_dcmplt>
 8009590:	e7a1      	b.n	80094d6 <_strtod_l+0xade>
 8009592:	2300      	movs	r3, #0
 8009594:	930a      	str	r3, [sp, #40]	; 0x28
 8009596:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009598:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800959a:	6013      	str	r3, [r2, #0]
 800959c:	f7ff ba71 	b.w	8008a82 <_strtod_l+0x8a>
 80095a0:	2a65      	cmp	r2, #101	; 0x65
 80095a2:	f43f ab63 	beq.w	8008c6c <_strtod_l+0x274>
 80095a6:	2a45      	cmp	r2, #69	; 0x45
 80095a8:	f43f ab60 	beq.w	8008c6c <_strtod_l+0x274>
 80095ac:	2301      	movs	r3, #1
 80095ae:	f7ff bb95 	b.w	8008cdc <_strtod_l+0x2e4>
 80095b2:	bf00      	nop
 80095b4:	f3af 8000 	nop.w
 80095b8:	ffc00000 	.word	0xffc00000
 80095bc:	41dfffff 	.word	0x41dfffff
 80095c0:	94a03595 	.word	0x94a03595
 80095c4:	3fcfffff 	.word	0x3fcfffff

080095c8 <_strtod_r>:
 80095c8:	4b01      	ldr	r3, [pc, #4]	; (80095d0 <_strtod_r+0x8>)
 80095ca:	f7ff ba15 	b.w	80089f8 <_strtod_l>
 80095ce:	bf00      	nop
 80095d0:	20000074 	.word	0x20000074

080095d4 <_strtol_l.constprop.0>:
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095da:	4680      	mov	r8, r0
 80095dc:	d001      	beq.n	80095e2 <_strtol_l.constprop.0+0xe>
 80095de:	2b24      	cmp	r3, #36	; 0x24
 80095e0:	d906      	bls.n	80095f0 <_strtol_l.constprop.0+0x1c>
 80095e2:	f7fe fb21 	bl	8007c28 <__errno>
 80095e6:	2316      	movs	r3, #22
 80095e8:	6003      	str	r3, [r0, #0]
 80095ea:	2000      	movs	r0, #0
 80095ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f0:	460d      	mov	r5, r1
 80095f2:	4f35      	ldr	r7, [pc, #212]	; (80096c8 <_strtol_l.constprop.0+0xf4>)
 80095f4:	4628      	mov	r0, r5
 80095f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095fa:	5de6      	ldrb	r6, [r4, r7]
 80095fc:	f016 0608 	ands.w	r6, r6, #8
 8009600:	d1f8      	bne.n	80095f4 <_strtol_l.constprop.0+0x20>
 8009602:	2c2d      	cmp	r4, #45	; 0x2d
 8009604:	d12f      	bne.n	8009666 <_strtol_l.constprop.0+0x92>
 8009606:	2601      	movs	r6, #1
 8009608:	782c      	ldrb	r4, [r5, #0]
 800960a:	1c85      	adds	r5, r0, #2
 800960c:	2b00      	cmp	r3, #0
 800960e:	d057      	beq.n	80096c0 <_strtol_l.constprop.0+0xec>
 8009610:	2b10      	cmp	r3, #16
 8009612:	d109      	bne.n	8009628 <_strtol_l.constprop.0+0x54>
 8009614:	2c30      	cmp	r4, #48	; 0x30
 8009616:	d107      	bne.n	8009628 <_strtol_l.constprop.0+0x54>
 8009618:	7828      	ldrb	r0, [r5, #0]
 800961a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800961e:	2858      	cmp	r0, #88	; 0x58
 8009620:	d149      	bne.n	80096b6 <_strtol_l.constprop.0+0xe2>
 8009622:	2310      	movs	r3, #16
 8009624:	786c      	ldrb	r4, [r5, #1]
 8009626:	3502      	adds	r5, #2
 8009628:	2700      	movs	r7, #0
 800962a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800962e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009632:	fbbe f9f3 	udiv	r9, lr, r3
 8009636:	4638      	mov	r0, r7
 8009638:	fb03 ea19 	mls	sl, r3, r9, lr
 800963c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009640:	f1bc 0f09 	cmp.w	ip, #9
 8009644:	d814      	bhi.n	8009670 <_strtol_l.constprop.0+0x9c>
 8009646:	4664      	mov	r4, ip
 8009648:	42a3      	cmp	r3, r4
 800964a:	dd22      	ble.n	8009692 <_strtol_l.constprop.0+0xbe>
 800964c:	2f00      	cmp	r7, #0
 800964e:	db1d      	blt.n	800968c <_strtol_l.constprop.0+0xb8>
 8009650:	4581      	cmp	r9, r0
 8009652:	d31b      	bcc.n	800968c <_strtol_l.constprop.0+0xb8>
 8009654:	d101      	bne.n	800965a <_strtol_l.constprop.0+0x86>
 8009656:	45a2      	cmp	sl, r4
 8009658:	db18      	blt.n	800968c <_strtol_l.constprop.0+0xb8>
 800965a:	2701      	movs	r7, #1
 800965c:	fb00 4003 	mla	r0, r0, r3, r4
 8009660:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009664:	e7ea      	b.n	800963c <_strtol_l.constprop.0+0x68>
 8009666:	2c2b      	cmp	r4, #43	; 0x2b
 8009668:	bf04      	itt	eq
 800966a:	782c      	ldrbeq	r4, [r5, #0]
 800966c:	1c85      	addeq	r5, r0, #2
 800966e:	e7cd      	b.n	800960c <_strtol_l.constprop.0+0x38>
 8009670:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009674:	f1bc 0f19 	cmp.w	ip, #25
 8009678:	d801      	bhi.n	800967e <_strtol_l.constprop.0+0xaa>
 800967a:	3c37      	subs	r4, #55	; 0x37
 800967c:	e7e4      	b.n	8009648 <_strtol_l.constprop.0+0x74>
 800967e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009682:	f1bc 0f19 	cmp.w	ip, #25
 8009686:	d804      	bhi.n	8009692 <_strtol_l.constprop.0+0xbe>
 8009688:	3c57      	subs	r4, #87	; 0x57
 800968a:	e7dd      	b.n	8009648 <_strtol_l.constprop.0+0x74>
 800968c:	f04f 37ff 	mov.w	r7, #4294967295
 8009690:	e7e6      	b.n	8009660 <_strtol_l.constprop.0+0x8c>
 8009692:	2f00      	cmp	r7, #0
 8009694:	da07      	bge.n	80096a6 <_strtol_l.constprop.0+0xd2>
 8009696:	2322      	movs	r3, #34	; 0x22
 8009698:	4670      	mov	r0, lr
 800969a:	f8c8 3000 	str.w	r3, [r8]
 800969e:	2a00      	cmp	r2, #0
 80096a0:	d0a4      	beq.n	80095ec <_strtol_l.constprop.0+0x18>
 80096a2:	1e69      	subs	r1, r5, #1
 80096a4:	e005      	b.n	80096b2 <_strtol_l.constprop.0+0xde>
 80096a6:	b106      	cbz	r6, 80096aa <_strtol_l.constprop.0+0xd6>
 80096a8:	4240      	negs	r0, r0
 80096aa:	2a00      	cmp	r2, #0
 80096ac:	d09e      	beq.n	80095ec <_strtol_l.constprop.0+0x18>
 80096ae:	2f00      	cmp	r7, #0
 80096b0:	d1f7      	bne.n	80096a2 <_strtol_l.constprop.0+0xce>
 80096b2:	6011      	str	r1, [r2, #0]
 80096b4:	e79a      	b.n	80095ec <_strtol_l.constprop.0+0x18>
 80096b6:	2430      	movs	r4, #48	; 0x30
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1b5      	bne.n	8009628 <_strtol_l.constprop.0+0x54>
 80096bc:	2308      	movs	r3, #8
 80096be:	e7b3      	b.n	8009628 <_strtol_l.constprop.0+0x54>
 80096c0:	2c30      	cmp	r4, #48	; 0x30
 80096c2:	d0a9      	beq.n	8009618 <_strtol_l.constprop.0+0x44>
 80096c4:	230a      	movs	r3, #10
 80096c6:	e7af      	b.n	8009628 <_strtol_l.constprop.0+0x54>
 80096c8:	0801df81 	.word	0x0801df81

080096cc <_strtol_r>:
 80096cc:	f7ff bf82 	b.w	80095d4 <_strtol_l.constprop.0>

080096d0 <strtol>:
 80096d0:	4613      	mov	r3, r2
 80096d2:	460a      	mov	r2, r1
 80096d4:	4601      	mov	r1, r0
 80096d6:	4802      	ldr	r0, [pc, #8]	; (80096e0 <strtol+0x10>)
 80096d8:	6800      	ldr	r0, [r0, #0]
 80096da:	f7ff bf7b 	b.w	80095d4 <_strtol_l.constprop.0>
 80096de:	bf00      	nop
 80096e0:	2000000c 	.word	0x2000000c

080096e4 <quorem>:
 80096e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e8:	6903      	ldr	r3, [r0, #16]
 80096ea:	690c      	ldr	r4, [r1, #16]
 80096ec:	4607      	mov	r7, r0
 80096ee:	42a3      	cmp	r3, r4
 80096f0:	f2c0 8082 	blt.w	80097f8 <quorem+0x114>
 80096f4:	3c01      	subs	r4, #1
 80096f6:	f100 0514 	add.w	r5, r0, #20
 80096fa:	f101 0814 	add.w	r8, r1, #20
 80096fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009702:	9301      	str	r3, [sp, #4]
 8009704:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009708:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800970c:	3301      	adds	r3, #1
 800970e:	429a      	cmp	r2, r3
 8009710:	fbb2 f6f3 	udiv	r6, r2, r3
 8009714:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009718:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800971c:	d331      	bcc.n	8009782 <quorem+0x9e>
 800971e:	f04f 0e00 	mov.w	lr, #0
 8009722:	4640      	mov	r0, r8
 8009724:	46ac      	mov	ip, r5
 8009726:	46f2      	mov	sl, lr
 8009728:	f850 2b04 	ldr.w	r2, [r0], #4
 800972c:	b293      	uxth	r3, r2
 800972e:	fb06 e303 	mla	r3, r6, r3, lr
 8009732:	0c12      	lsrs	r2, r2, #16
 8009734:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009738:	b29b      	uxth	r3, r3
 800973a:	fb06 e202 	mla	r2, r6, r2, lr
 800973e:	ebaa 0303 	sub.w	r3, sl, r3
 8009742:	f8dc a000 	ldr.w	sl, [ip]
 8009746:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800974a:	fa1f fa8a 	uxth.w	sl, sl
 800974e:	4453      	add	r3, sl
 8009750:	f8dc a000 	ldr.w	sl, [ip]
 8009754:	b292      	uxth	r2, r2
 8009756:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800975a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800975e:	b29b      	uxth	r3, r3
 8009760:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009764:	4581      	cmp	r9, r0
 8009766:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800976a:	f84c 3b04 	str.w	r3, [ip], #4
 800976e:	d2db      	bcs.n	8009728 <quorem+0x44>
 8009770:	f855 300b 	ldr.w	r3, [r5, fp]
 8009774:	b92b      	cbnz	r3, 8009782 <quorem+0x9e>
 8009776:	9b01      	ldr	r3, [sp, #4]
 8009778:	3b04      	subs	r3, #4
 800977a:	429d      	cmp	r5, r3
 800977c:	461a      	mov	r2, r3
 800977e:	d32f      	bcc.n	80097e0 <quorem+0xfc>
 8009780:	613c      	str	r4, [r7, #16]
 8009782:	4638      	mov	r0, r7
 8009784:	f001 fc92 	bl	800b0ac <__mcmp>
 8009788:	2800      	cmp	r0, #0
 800978a:	db25      	blt.n	80097d8 <quorem+0xf4>
 800978c:	4628      	mov	r0, r5
 800978e:	f04f 0c00 	mov.w	ip, #0
 8009792:	3601      	adds	r6, #1
 8009794:	f858 1b04 	ldr.w	r1, [r8], #4
 8009798:	f8d0 e000 	ldr.w	lr, [r0]
 800979c:	b28b      	uxth	r3, r1
 800979e:	ebac 0303 	sub.w	r3, ip, r3
 80097a2:	fa1f f28e 	uxth.w	r2, lr
 80097a6:	4413      	add	r3, r2
 80097a8:	0c0a      	lsrs	r2, r1, #16
 80097aa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80097ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097b8:	45c1      	cmp	r9, r8
 80097ba:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097be:	f840 3b04 	str.w	r3, [r0], #4
 80097c2:	d2e7      	bcs.n	8009794 <quorem+0xb0>
 80097c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097cc:	b922      	cbnz	r2, 80097d8 <quorem+0xf4>
 80097ce:	3b04      	subs	r3, #4
 80097d0:	429d      	cmp	r5, r3
 80097d2:	461a      	mov	r2, r3
 80097d4:	d30a      	bcc.n	80097ec <quorem+0x108>
 80097d6:	613c      	str	r4, [r7, #16]
 80097d8:	4630      	mov	r0, r6
 80097da:	b003      	add	sp, #12
 80097dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e0:	6812      	ldr	r2, [r2, #0]
 80097e2:	3b04      	subs	r3, #4
 80097e4:	2a00      	cmp	r2, #0
 80097e6:	d1cb      	bne.n	8009780 <quorem+0x9c>
 80097e8:	3c01      	subs	r4, #1
 80097ea:	e7c6      	b.n	800977a <quorem+0x96>
 80097ec:	6812      	ldr	r2, [r2, #0]
 80097ee:	3b04      	subs	r3, #4
 80097f0:	2a00      	cmp	r2, #0
 80097f2:	d1f0      	bne.n	80097d6 <quorem+0xf2>
 80097f4:	3c01      	subs	r4, #1
 80097f6:	e7eb      	b.n	80097d0 <quorem+0xec>
 80097f8:	2000      	movs	r0, #0
 80097fa:	e7ee      	b.n	80097da <quorem+0xf6>
 80097fc:	0000      	movs	r0, r0
	...

08009800 <_dtoa_r>:
 8009800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009804:	4616      	mov	r6, r2
 8009806:	461f      	mov	r7, r3
 8009808:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800980a:	b099      	sub	sp, #100	; 0x64
 800980c:	4605      	mov	r5, r0
 800980e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009812:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009816:	b974      	cbnz	r4, 8009836 <_dtoa_r+0x36>
 8009818:	2010      	movs	r0, #16
 800981a:	f001 f949 	bl	800aab0 <malloc>
 800981e:	4602      	mov	r2, r0
 8009820:	6268      	str	r0, [r5, #36]	; 0x24
 8009822:	b920      	cbnz	r0, 800982e <_dtoa_r+0x2e>
 8009824:	21ea      	movs	r1, #234	; 0xea
 8009826:	4ba8      	ldr	r3, [pc, #672]	; (8009ac8 <_dtoa_r+0x2c8>)
 8009828:	48a8      	ldr	r0, [pc, #672]	; (8009acc <_dtoa_r+0x2cc>)
 800982a:	f002 f8b3 	bl	800b994 <__assert_func>
 800982e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009832:	6004      	str	r4, [r0, #0]
 8009834:	60c4      	str	r4, [r0, #12]
 8009836:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009838:	6819      	ldr	r1, [r3, #0]
 800983a:	b151      	cbz	r1, 8009852 <_dtoa_r+0x52>
 800983c:	685a      	ldr	r2, [r3, #4]
 800983e:	2301      	movs	r3, #1
 8009840:	4093      	lsls	r3, r2
 8009842:	604a      	str	r2, [r1, #4]
 8009844:	608b      	str	r3, [r1, #8]
 8009846:	4628      	mov	r0, r5
 8009848:	f001 f9a8 	bl	800ab9c <_Bfree>
 800984c:	2200      	movs	r2, #0
 800984e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009850:	601a      	str	r2, [r3, #0]
 8009852:	1e3b      	subs	r3, r7, #0
 8009854:	bfaf      	iteee	ge
 8009856:	2300      	movge	r3, #0
 8009858:	2201      	movlt	r2, #1
 800985a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800985e:	9305      	strlt	r3, [sp, #20]
 8009860:	bfa8      	it	ge
 8009862:	f8c8 3000 	strge.w	r3, [r8]
 8009866:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800986a:	4b99      	ldr	r3, [pc, #612]	; (8009ad0 <_dtoa_r+0x2d0>)
 800986c:	bfb8      	it	lt
 800986e:	f8c8 2000 	strlt.w	r2, [r8]
 8009872:	ea33 0309 	bics.w	r3, r3, r9
 8009876:	d119      	bne.n	80098ac <_dtoa_r+0xac>
 8009878:	f242 730f 	movw	r3, #9999	; 0x270f
 800987c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800987e:	6013      	str	r3, [r2, #0]
 8009880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009884:	4333      	orrs	r3, r6
 8009886:	f000 857f 	beq.w	800a388 <_dtoa_r+0xb88>
 800988a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800988c:	b953      	cbnz	r3, 80098a4 <_dtoa_r+0xa4>
 800988e:	4b91      	ldr	r3, [pc, #580]	; (8009ad4 <_dtoa_r+0x2d4>)
 8009890:	e022      	b.n	80098d8 <_dtoa_r+0xd8>
 8009892:	4b91      	ldr	r3, [pc, #580]	; (8009ad8 <_dtoa_r+0x2d8>)
 8009894:	9303      	str	r3, [sp, #12]
 8009896:	3308      	adds	r3, #8
 8009898:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800989a:	6013      	str	r3, [r2, #0]
 800989c:	9803      	ldr	r0, [sp, #12]
 800989e:	b019      	add	sp, #100	; 0x64
 80098a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a4:	4b8b      	ldr	r3, [pc, #556]	; (8009ad4 <_dtoa_r+0x2d4>)
 80098a6:	9303      	str	r3, [sp, #12]
 80098a8:	3303      	adds	r3, #3
 80098aa:	e7f5      	b.n	8009898 <_dtoa_r+0x98>
 80098ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80098b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80098b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098b8:	2200      	movs	r2, #0
 80098ba:	2300      	movs	r3, #0
 80098bc:	f7fc f800 	bl	80058c0 <__aeabi_dcmpeq>
 80098c0:	4680      	mov	r8, r0
 80098c2:	b158      	cbz	r0, 80098dc <_dtoa_r+0xdc>
 80098c4:	2301      	movs	r3, #1
 80098c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80098c8:	6013      	str	r3, [r2, #0]
 80098ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f000 8558 	beq.w	800a382 <_dtoa_r+0xb82>
 80098d2:	4882      	ldr	r0, [pc, #520]	; (8009adc <_dtoa_r+0x2dc>)
 80098d4:	6018      	str	r0, [r3, #0]
 80098d6:	1e43      	subs	r3, r0, #1
 80098d8:	9303      	str	r3, [sp, #12]
 80098da:	e7df      	b.n	800989c <_dtoa_r+0x9c>
 80098dc:	ab16      	add	r3, sp, #88	; 0x58
 80098de:	9301      	str	r3, [sp, #4]
 80098e0:	ab17      	add	r3, sp, #92	; 0x5c
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	4628      	mov	r0, r5
 80098e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80098ea:	f001 fd01 	bl	800b2f0 <__d2b>
 80098ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80098f2:	4683      	mov	fp, r0
 80098f4:	2c00      	cmp	r4, #0
 80098f6:	d07f      	beq.n	80099f8 <_dtoa_r+0x1f8>
 80098f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098fe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009902:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009906:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800990a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800990e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009912:	2200      	movs	r2, #0
 8009914:	4b72      	ldr	r3, [pc, #456]	; (8009ae0 <_dtoa_r+0x2e0>)
 8009916:	f7fb fbb3 	bl	8005080 <__aeabi_dsub>
 800991a:	a365      	add	r3, pc, #404	; (adr r3, 8009ab0 <_dtoa_r+0x2b0>)
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	f7fb fd66 	bl	80053f0 <__aeabi_dmul>
 8009924:	a364      	add	r3, pc, #400	; (adr r3, 8009ab8 <_dtoa_r+0x2b8>)
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	f7fb fbab 	bl	8005084 <__adddf3>
 800992e:	4606      	mov	r6, r0
 8009930:	4620      	mov	r0, r4
 8009932:	460f      	mov	r7, r1
 8009934:	f7fb fcf2 	bl	800531c <__aeabi_i2d>
 8009938:	a361      	add	r3, pc, #388	; (adr r3, 8009ac0 <_dtoa_r+0x2c0>)
 800993a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993e:	f7fb fd57 	bl	80053f0 <__aeabi_dmul>
 8009942:	4602      	mov	r2, r0
 8009944:	460b      	mov	r3, r1
 8009946:	4630      	mov	r0, r6
 8009948:	4639      	mov	r1, r7
 800994a:	f7fb fb9b 	bl	8005084 <__adddf3>
 800994e:	4606      	mov	r6, r0
 8009950:	460f      	mov	r7, r1
 8009952:	f7fb fffd 	bl	8005950 <__aeabi_d2iz>
 8009956:	2200      	movs	r2, #0
 8009958:	4682      	mov	sl, r0
 800995a:	2300      	movs	r3, #0
 800995c:	4630      	mov	r0, r6
 800995e:	4639      	mov	r1, r7
 8009960:	f7fb ffb8 	bl	80058d4 <__aeabi_dcmplt>
 8009964:	b148      	cbz	r0, 800997a <_dtoa_r+0x17a>
 8009966:	4650      	mov	r0, sl
 8009968:	f7fb fcd8 	bl	800531c <__aeabi_i2d>
 800996c:	4632      	mov	r2, r6
 800996e:	463b      	mov	r3, r7
 8009970:	f7fb ffa6 	bl	80058c0 <__aeabi_dcmpeq>
 8009974:	b908      	cbnz	r0, 800997a <_dtoa_r+0x17a>
 8009976:	f10a 3aff 	add.w	sl, sl, #4294967295
 800997a:	f1ba 0f16 	cmp.w	sl, #22
 800997e:	d858      	bhi.n	8009a32 <_dtoa_r+0x232>
 8009980:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009984:	4b57      	ldr	r3, [pc, #348]	; (8009ae4 <_dtoa_r+0x2e4>)
 8009986:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800998a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998e:	f7fb ffa1 	bl	80058d4 <__aeabi_dcmplt>
 8009992:	2800      	cmp	r0, #0
 8009994:	d04f      	beq.n	8009a36 <_dtoa_r+0x236>
 8009996:	2300      	movs	r3, #0
 8009998:	f10a 3aff 	add.w	sl, sl, #4294967295
 800999c:	930f      	str	r3, [sp, #60]	; 0x3c
 800999e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80099a0:	1b1c      	subs	r4, r3, r4
 80099a2:	1e63      	subs	r3, r4, #1
 80099a4:	9309      	str	r3, [sp, #36]	; 0x24
 80099a6:	bf49      	itett	mi
 80099a8:	f1c4 0301 	rsbmi	r3, r4, #1
 80099ac:	2300      	movpl	r3, #0
 80099ae:	9306      	strmi	r3, [sp, #24]
 80099b0:	2300      	movmi	r3, #0
 80099b2:	bf54      	ite	pl
 80099b4:	9306      	strpl	r3, [sp, #24]
 80099b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80099b8:	f1ba 0f00 	cmp.w	sl, #0
 80099bc:	db3d      	blt.n	8009a3a <_dtoa_r+0x23a>
 80099be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80099c4:	4453      	add	r3, sl
 80099c6:	9309      	str	r3, [sp, #36]	; 0x24
 80099c8:	2300      	movs	r3, #0
 80099ca:	930a      	str	r3, [sp, #40]	; 0x28
 80099cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099ce:	2b09      	cmp	r3, #9
 80099d0:	f200 808c 	bhi.w	8009aec <_dtoa_r+0x2ec>
 80099d4:	2b05      	cmp	r3, #5
 80099d6:	bfc4      	itt	gt
 80099d8:	3b04      	subgt	r3, #4
 80099da:	9322      	strgt	r3, [sp, #136]	; 0x88
 80099dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099de:	bfc8      	it	gt
 80099e0:	2400      	movgt	r4, #0
 80099e2:	f1a3 0302 	sub.w	r3, r3, #2
 80099e6:	bfd8      	it	le
 80099e8:	2401      	movle	r4, #1
 80099ea:	2b03      	cmp	r3, #3
 80099ec:	f200 808a 	bhi.w	8009b04 <_dtoa_r+0x304>
 80099f0:	e8df f003 	tbb	[pc, r3]
 80099f4:	5b4d4f2d 	.word	0x5b4d4f2d
 80099f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80099fc:	441c      	add	r4, r3
 80099fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009a02:	2b20      	cmp	r3, #32
 8009a04:	bfc3      	ittte	gt
 8009a06:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a0a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009a0e:	fa09 f303 	lslgt.w	r3, r9, r3
 8009a12:	f1c3 0320 	rsble	r3, r3, #32
 8009a16:	bfc6      	itte	gt
 8009a18:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a1c:	4318      	orrgt	r0, r3
 8009a1e:	fa06 f003 	lslle.w	r0, r6, r3
 8009a22:	f7fb fc6b 	bl	80052fc <__aeabi_ui2d>
 8009a26:	2301      	movs	r3, #1
 8009a28:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009a2c:	3c01      	subs	r4, #1
 8009a2e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a30:	e76f      	b.n	8009912 <_dtoa_r+0x112>
 8009a32:	2301      	movs	r3, #1
 8009a34:	e7b2      	b.n	800999c <_dtoa_r+0x19c>
 8009a36:	900f      	str	r0, [sp, #60]	; 0x3c
 8009a38:	e7b1      	b.n	800999e <_dtoa_r+0x19e>
 8009a3a:	9b06      	ldr	r3, [sp, #24]
 8009a3c:	eba3 030a 	sub.w	r3, r3, sl
 8009a40:	9306      	str	r3, [sp, #24]
 8009a42:	f1ca 0300 	rsb	r3, sl, #0
 8009a46:	930a      	str	r3, [sp, #40]	; 0x28
 8009a48:	2300      	movs	r3, #0
 8009a4a:	930e      	str	r3, [sp, #56]	; 0x38
 8009a4c:	e7be      	b.n	80099cc <_dtoa_r+0x1cc>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	dc58      	bgt.n	8009b0a <_dtoa_r+0x30a>
 8009a58:	f04f 0901 	mov.w	r9, #1
 8009a5c:	464b      	mov	r3, r9
 8009a5e:	f8cd 9020 	str.w	r9, [sp, #32]
 8009a62:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009a66:	2200      	movs	r2, #0
 8009a68:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009a6a:	6042      	str	r2, [r0, #4]
 8009a6c:	2204      	movs	r2, #4
 8009a6e:	f102 0614 	add.w	r6, r2, #20
 8009a72:	429e      	cmp	r6, r3
 8009a74:	6841      	ldr	r1, [r0, #4]
 8009a76:	d94e      	bls.n	8009b16 <_dtoa_r+0x316>
 8009a78:	4628      	mov	r0, r5
 8009a7a:	f001 f84f 	bl	800ab1c <_Balloc>
 8009a7e:	9003      	str	r0, [sp, #12]
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d14c      	bne.n	8009b1e <_dtoa_r+0x31e>
 8009a84:	4602      	mov	r2, r0
 8009a86:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a8a:	4b17      	ldr	r3, [pc, #92]	; (8009ae8 <_dtoa_r+0x2e8>)
 8009a8c:	e6cc      	b.n	8009828 <_dtoa_r+0x28>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e7de      	b.n	8009a50 <_dtoa_r+0x250>
 8009a92:	2300      	movs	r3, #0
 8009a94:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a98:	eb0a 0903 	add.w	r9, sl, r3
 8009a9c:	f109 0301 	add.w	r3, r9, #1
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	9308      	str	r3, [sp, #32]
 8009aa4:	bfb8      	it	lt
 8009aa6:	2301      	movlt	r3, #1
 8009aa8:	e7dd      	b.n	8009a66 <_dtoa_r+0x266>
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e7f2      	b.n	8009a94 <_dtoa_r+0x294>
 8009aae:	bf00      	nop
 8009ab0:	636f4361 	.word	0x636f4361
 8009ab4:	3fd287a7 	.word	0x3fd287a7
 8009ab8:	8b60c8b3 	.word	0x8b60c8b3
 8009abc:	3fc68a28 	.word	0x3fc68a28
 8009ac0:	509f79fb 	.word	0x509f79fb
 8009ac4:	3fd34413 	.word	0x3fd34413
 8009ac8:	0801e08e 	.word	0x0801e08e
 8009acc:	0801e0a5 	.word	0x0801e0a5
 8009ad0:	7ff00000 	.word	0x7ff00000
 8009ad4:	0801e08a 	.word	0x0801e08a
 8009ad8:	0801e081 	.word	0x0801e081
 8009adc:	0801df05 	.word	0x0801df05
 8009ae0:	3ff80000 	.word	0x3ff80000
 8009ae4:	0801e210 	.word	0x0801e210
 8009ae8:	0801e100 	.word	0x0801e100
 8009aec:	2401      	movs	r4, #1
 8009aee:	2300      	movs	r3, #0
 8009af0:	940b      	str	r4, [sp, #44]	; 0x2c
 8009af2:	9322      	str	r3, [sp, #136]	; 0x88
 8009af4:	f04f 39ff 	mov.w	r9, #4294967295
 8009af8:	2200      	movs	r2, #0
 8009afa:	2312      	movs	r3, #18
 8009afc:	f8cd 9020 	str.w	r9, [sp, #32]
 8009b00:	9223      	str	r2, [sp, #140]	; 0x8c
 8009b02:	e7b0      	b.n	8009a66 <_dtoa_r+0x266>
 8009b04:	2301      	movs	r3, #1
 8009b06:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b08:	e7f4      	b.n	8009af4 <_dtoa_r+0x2f4>
 8009b0a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009b0e:	464b      	mov	r3, r9
 8009b10:	f8cd 9020 	str.w	r9, [sp, #32]
 8009b14:	e7a7      	b.n	8009a66 <_dtoa_r+0x266>
 8009b16:	3101      	adds	r1, #1
 8009b18:	6041      	str	r1, [r0, #4]
 8009b1a:	0052      	lsls	r2, r2, #1
 8009b1c:	e7a7      	b.n	8009a6e <_dtoa_r+0x26e>
 8009b1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b20:	9a03      	ldr	r2, [sp, #12]
 8009b22:	601a      	str	r2, [r3, #0]
 8009b24:	9b08      	ldr	r3, [sp, #32]
 8009b26:	2b0e      	cmp	r3, #14
 8009b28:	f200 80a8 	bhi.w	8009c7c <_dtoa_r+0x47c>
 8009b2c:	2c00      	cmp	r4, #0
 8009b2e:	f000 80a5 	beq.w	8009c7c <_dtoa_r+0x47c>
 8009b32:	f1ba 0f00 	cmp.w	sl, #0
 8009b36:	dd34      	ble.n	8009ba2 <_dtoa_r+0x3a2>
 8009b38:	4a9a      	ldr	r2, [pc, #616]	; (8009da4 <_dtoa_r+0x5a4>)
 8009b3a:	f00a 030f 	and.w	r3, sl, #15
 8009b3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b42:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009b46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009b4e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009b52:	d016      	beq.n	8009b82 <_dtoa_r+0x382>
 8009b54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b58:	4b93      	ldr	r3, [pc, #588]	; (8009da8 <_dtoa_r+0x5a8>)
 8009b5a:	2703      	movs	r7, #3
 8009b5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b60:	f7fb fd70 	bl	8005644 <__aeabi_ddiv>
 8009b64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b68:	f004 040f 	and.w	r4, r4, #15
 8009b6c:	4e8e      	ldr	r6, [pc, #568]	; (8009da8 <_dtoa_r+0x5a8>)
 8009b6e:	b954      	cbnz	r4, 8009b86 <_dtoa_r+0x386>
 8009b70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b78:	f7fb fd64 	bl	8005644 <__aeabi_ddiv>
 8009b7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b80:	e029      	b.n	8009bd6 <_dtoa_r+0x3d6>
 8009b82:	2702      	movs	r7, #2
 8009b84:	e7f2      	b.n	8009b6c <_dtoa_r+0x36c>
 8009b86:	07e1      	lsls	r1, r4, #31
 8009b88:	d508      	bpl.n	8009b9c <_dtoa_r+0x39c>
 8009b8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b92:	f7fb fc2d 	bl	80053f0 <__aeabi_dmul>
 8009b96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b9a:	3701      	adds	r7, #1
 8009b9c:	1064      	asrs	r4, r4, #1
 8009b9e:	3608      	adds	r6, #8
 8009ba0:	e7e5      	b.n	8009b6e <_dtoa_r+0x36e>
 8009ba2:	f000 80a5 	beq.w	8009cf0 <_dtoa_r+0x4f0>
 8009ba6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009baa:	f1ca 0400 	rsb	r4, sl, #0
 8009bae:	4b7d      	ldr	r3, [pc, #500]	; (8009da4 <_dtoa_r+0x5a4>)
 8009bb0:	f004 020f 	and.w	r2, r4, #15
 8009bb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbc:	f7fb fc18 	bl	80053f0 <__aeabi_dmul>
 8009bc0:	2702      	movs	r7, #2
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bc8:	4e77      	ldr	r6, [pc, #476]	; (8009da8 <_dtoa_r+0x5a8>)
 8009bca:	1124      	asrs	r4, r4, #4
 8009bcc:	2c00      	cmp	r4, #0
 8009bce:	f040 8084 	bne.w	8009cda <_dtoa_r+0x4da>
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1d2      	bne.n	8009b7c <_dtoa_r+0x37c>
 8009bd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f000 808b 	beq.w	8009cf4 <_dtoa_r+0x4f4>
 8009bde:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009be2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009be6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009bea:	2200      	movs	r2, #0
 8009bec:	4b6f      	ldr	r3, [pc, #444]	; (8009dac <_dtoa_r+0x5ac>)
 8009bee:	f7fb fe71 	bl	80058d4 <__aeabi_dcmplt>
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d07e      	beq.n	8009cf4 <_dtoa_r+0x4f4>
 8009bf6:	9b08      	ldr	r3, [sp, #32]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d07b      	beq.n	8009cf4 <_dtoa_r+0x4f4>
 8009bfc:	f1b9 0f00 	cmp.w	r9, #0
 8009c00:	dd38      	ble.n	8009c74 <_dtoa_r+0x474>
 8009c02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c06:	2200      	movs	r2, #0
 8009c08:	4b69      	ldr	r3, [pc, #420]	; (8009db0 <_dtoa_r+0x5b0>)
 8009c0a:	f7fb fbf1 	bl	80053f0 <__aeabi_dmul>
 8009c0e:	464c      	mov	r4, r9
 8009c10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c14:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009c18:	3701      	adds	r7, #1
 8009c1a:	4638      	mov	r0, r7
 8009c1c:	f7fb fb7e 	bl	800531c <__aeabi_i2d>
 8009c20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c24:	f7fb fbe4 	bl	80053f0 <__aeabi_dmul>
 8009c28:	2200      	movs	r2, #0
 8009c2a:	4b62      	ldr	r3, [pc, #392]	; (8009db4 <_dtoa_r+0x5b4>)
 8009c2c:	f7fb fa2a 	bl	8005084 <__adddf3>
 8009c30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009c34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009c38:	9611      	str	r6, [sp, #68]	; 0x44
 8009c3a:	2c00      	cmp	r4, #0
 8009c3c:	d15d      	bne.n	8009cfa <_dtoa_r+0x4fa>
 8009c3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c42:	2200      	movs	r2, #0
 8009c44:	4b5c      	ldr	r3, [pc, #368]	; (8009db8 <_dtoa_r+0x5b8>)
 8009c46:	f7fb fa1b 	bl	8005080 <__aeabi_dsub>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c52:	4633      	mov	r3, r6
 8009c54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c56:	f7fb fe5b 	bl	8005910 <__aeabi_dcmpgt>
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	f040 829c 	bne.w	800a198 <_dtoa_r+0x998>
 8009c60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c66:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009c6a:	f7fb fe33 	bl	80058d4 <__aeabi_dcmplt>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	f040 8290 	bne.w	800a194 <_dtoa_r+0x994>
 8009c74:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009c78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009c7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f2c0 8152 	blt.w	8009f28 <_dtoa_r+0x728>
 8009c84:	f1ba 0f0e 	cmp.w	sl, #14
 8009c88:	f300 814e 	bgt.w	8009f28 <_dtoa_r+0x728>
 8009c8c:	4b45      	ldr	r3, [pc, #276]	; (8009da4 <_dtoa_r+0x5a4>)
 8009c8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c96:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009c9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f280 80db 	bge.w	8009e58 <_dtoa_r+0x658>
 8009ca2:	9b08      	ldr	r3, [sp, #32]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f300 80d7 	bgt.w	8009e58 <_dtoa_r+0x658>
 8009caa:	f040 8272 	bne.w	800a192 <_dtoa_r+0x992>
 8009cae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	4b40      	ldr	r3, [pc, #256]	; (8009db8 <_dtoa_r+0x5b8>)
 8009cb6:	f7fb fb9b 	bl	80053f0 <__aeabi_dmul>
 8009cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cbe:	f7fb fe1d 	bl	80058fc <__aeabi_dcmpge>
 8009cc2:	9c08      	ldr	r4, [sp, #32]
 8009cc4:	4626      	mov	r6, r4
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	f040 8248 	bne.w	800a15c <_dtoa_r+0x95c>
 8009ccc:	2331      	movs	r3, #49	; 0x31
 8009cce:	9f03      	ldr	r7, [sp, #12]
 8009cd0:	f10a 0a01 	add.w	sl, sl, #1
 8009cd4:	f807 3b01 	strb.w	r3, [r7], #1
 8009cd8:	e244      	b.n	800a164 <_dtoa_r+0x964>
 8009cda:	07e2      	lsls	r2, r4, #31
 8009cdc:	d505      	bpl.n	8009cea <_dtoa_r+0x4ea>
 8009cde:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ce2:	f7fb fb85 	bl	80053f0 <__aeabi_dmul>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	3701      	adds	r7, #1
 8009cea:	1064      	asrs	r4, r4, #1
 8009cec:	3608      	adds	r6, #8
 8009cee:	e76d      	b.n	8009bcc <_dtoa_r+0x3cc>
 8009cf0:	2702      	movs	r7, #2
 8009cf2:	e770      	b.n	8009bd6 <_dtoa_r+0x3d6>
 8009cf4:	46d0      	mov	r8, sl
 8009cf6:	9c08      	ldr	r4, [sp, #32]
 8009cf8:	e78f      	b.n	8009c1a <_dtoa_r+0x41a>
 8009cfa:	9903      	ldr	r1, [sp, #12]
 8009cfc:	4b29      	ldr	r3, [pc, #164]	; (8009da4 <_dtoa_r+0x5a4>)
 8009cfe:	4421      	add	r1, r4
 8009d00:	9112      	str	r1, [sp, #72]	; 0x48
 8009d02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d08:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009d0c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d10:	2900      	cmp	r1, #0
 8009d12:	d055      	beq.n	8009dc0 <_dtoa_r+0x5c0>
 8009d14:	2000      	movs	r0, #0
 8009d16:	4929      	ldr	r1, [pc, #164]	; (8009dbc <_dtoa_r+0x5bc>)
 8009d18:	f7fb fc94 	bl	8005644 <__aeabi_ddiv>
 8009d1c:	463b      	mov	r3, r7
 8009d1e:	4632      	mov	r2, r6
 8009d20:	f7fb f9ae 	bl	8005080 <__aeabi_dsub>
 8009d24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d28:	9f03      	ldr	r7, [sp, #12]
 8009d2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d2e:	f7fb fe0f 	bl	8005950 <__aeabi_d2iz>
 8009d32:	4604      	mov	r4, r0
 8009d34:	f7fb faf2 	bl	800531c <__aeabi_i2d>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d40:	f7fb f99e 	bl	8005080 <__aeabi_dsub>
 8009d44:	4602      	mov	r2, r0
 8009d46:	460b      	mov	r3, r1
 8009d48:	3430      	adds	r4, #48	; 0x30
 8009d4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d52:	f807 4b01 	strb.w	r4, [r7], #1
 8009d56:	f7fb fdbd 	bl	80058d4 <__aeabi_dcmplt>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	d174      	bne.n	8009e48 <_dtoa_r+0x648>
 8009d5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d62:	2000      	movs	r0, #0
 8009d64:	4911      	ldr	r1, [pc, #68]	; (8009dac <_dtoa_r+0x5ac>)
 8009d66:	f7fb f98b 	bl	8005080 <__aeabi_dsub>
 8009d6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d6e:	f7fb fdb1 	bl	80058d4 <__aeabi_dcmplt>
 8009d72:	2800      	cmp	r0, #0
 8009d74:	f040 80b7 	bne.w	8009ee6 <_dtoa_r+0x6e6>
 8009d78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d7a:	429f      	cmp	r7, r3
 8009d7c:	f43f af7a 	beq.w	8009c74 <_dtoa_r+0x474>
 8009d80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d84:	2200      	movs	r2, #0
 8009d86:	4b0a      	ldr	r3, [pc, #40]	; (8009db0 <_dtoa_r+0x5b0>)
 8009d88:	f7fb fb32 	bl	80053f0 <__aeabi_dmul>
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d96:	4b06      	ldr	r3, [pc, #24]	; (8009db0 <_dtoa_r+0x5b0>)
 8009d98:	f7fb fb2a 	bl	80053f0 <__aeabi_dmul>
 8009d9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009da0:	e7c3      	b.n	8009d2a <_dtoa_r+0x52a>
 8009da2:	bf00      	nop
 8009da4:	0801e210 	.word	0x0801e210
 8009da8:	0801e1e8 	.word	0x0801e1e8
 8009dac:	3ff00000 	.word	0x3ff00000
 8009db0:	40240000 	.word	0x40240000
 8009db4:	401c0000 	.word	0x401c0000
 8009db8:	40140000 	.word	0x40140000
 8009dbc:	3fe00000 	.word	0x3fe00000
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	4639      	mov	r1, r7
 8009dc4:	f7fb fb14 	bl	80053f0 <__aeabi_dmul>
 8009dc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009dca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009dce:	9c03      	ldr	r4, [sp, #12]
 8009dd0:	9314      	str	r3, [sp, #80]	; 0x50
 8009dd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dd6:	f7fb fdbb 	bl	8005950 <__aeabi_d2iz>
 8009dda:	9015      	str	r0, [sp, #84]	; 0x54
 8009ddc:	f7fb fa9e 	bl	800531c <__aeabi_i2d>
 8009de0:	4602      	mov	r2, r0
 8009de2:	460b      	mov	r3, r1
 8009de4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009de8:	f7fb f94a 	bl	8005080 <__aeabi_dsub>
 8009dec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dee:	4606      	mov	r6, r0
 8009df0:	3330      	adds	r3, #48	; 0x30
 8009df2:	f804 3b01 	strb.w	r3, [r4], #1
 8009df6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009df8:	460f      	mov	r7, r1
 8009dfa:	429c      	cmp	r4, r3
 8009dfc:	f04f 0200 	mov.w	r2, #0
 8009e00:	d124      	bne.n	8009e4c <_dtoa_r+0x64c>
 8009e02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e06:	4bb0      	ldr	r3, [pc, #704]	; (800a0c8 <_dtoa_r+0x8c8>)
 8009e08:	f7fb f93c 	bl	8005084 <__adddf3>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4630      	mov	r0, r6
 8009e12:	4639      	mov	r1, r7
 8009e14:	f7fb fd7c 	bl	8005910 <__aeabi_dcmpgt>
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	d163      	bne.n	8009ee4 <_dtoa_r+0x6e4>
 8009e1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e20:	2000      	movs	r0, #0
 8009e22:	49a9      	ldr	r1, [pc, #676]	; (800a0c8 <_dtoa_r+0x8c8>)
 8009e24:	f7fb f92c 	bl	8005080 <__aeabi_dsub>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	4639      	mov	r1, r7
 8009e30:	f7fb fd50 	bl	80058d4 <__aeabi_dcmplt>
 8009e34:	2800      	cmp	r0, #0
 8009e36:	f43f af1d 	beq.w	8009c74 <_dtoa_r+0x474>
 8009e3a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009e3c:	1e7b      	subs	r3, r7, #1
 8009e3e:	9314      	str	r3, [sp, #80]	; 0x50
 8009e40:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009e44:	2b30      	cmp	r3, #48	; 0x30
 8009e46:	d0f8      	beq.n	8009e3a <_dtoa_r+0x63a>
 8009e48:	46c2      	mov	sl, r8
 8009e4a:	e03b      	b.n	8009ec4 <_dtoa_r+0x6c4>
 8009e4c:	4b9f      	ldr	r3, [pc, #636]	; (800a0cc <_dtoa_r+0x8cc>)
 8009e4e:	f7fb facf 	bl	80053f0 <__aeabi_dmul>
 8009e52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e56:	e7bc      	b.n	8009dd2 <_dtoa_r+0x5d2>
 8009e58:	9f03      	ldr	r7, [sp, #12]
 8009e5a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009e5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e62:	4640      	mov	r0, r8
 8009e64:	4649      	mov	r1, r9
 8009e66:	f7fb fbed 	bl	8005644 <__aeabi_ddiv>
 8009e6a:	f7fb fd71 	bl	8005950 <__aeabi_d2iz>
 8009e6e:	4604      	mov	r4, r0
 8009e70:	f7fb fa54 	bl	800531c <__aeabi_i2d>
 8009e74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e78:	f7fb faba 	bl	80053f0 <__aeabi_dmul>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4640      	mov	r0, r8
 8009e82:	4649      	mov	r1, r9
 8009e84:	f7fb f8fc 	bl	8005080 <__aeabi_dsub>
 8009e88:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009e8c:	f807 6b01 	strb.w	r6, [r7], #1
 8009e90:	9e03      	ldr	r6, [sp, #12]
 8009e92:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009e96:	1bbe      	subs	r6, r7, r6
 8009e98:	45b4      	cmp	ip, r6
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	d136      	bne.n	8009f0e <_dtoa_r+0x70e>
 8009ea0:	f7fb f8f0 	bl	8005084 <__adddf3>
 8009ea4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ea8:	4680      	mov	r8, r0
 8009eaa:	4689      	mov	r9, r1
 8009eac:	f7fb fd30 	bl	8005910 <__aeabi_dcmpgt>
 8009eb0:	bb58      	cbnz	r0, 8009f0a <_dtoa_r+0x70a>
 8009eb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009eb6:	4640      	mov	r0, r8
 8009eb8:	4649      	mov	r1, r9
 8009eba:	f7fb fd01 	bl	80058c0 <__aeabi_dcmpeq>
 8009ebe:	b108      	cbz	r0, 8009ec4 <_dtoa_r+0x6c4>
 8009ec0:	07e1      	lsls	r1, r4, #31
 8009ec2:	d422      	bmi.n	8009f0a <_dtoa_r+0x70a>
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	4659      	mov	r1, fp
 8009ec8:	f000 fe68 	bl	800ab9c <_Bfree>
 8009ecc:	2300      	movs	r3, #0
 8009ece:	703b      	strb	r3, [r7, #0]
 8009ed0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009ed2:	f10a 0001 	add.w	r0, sl, #1
 8009ed6:	6018      	str	r0, [r3, #0]
 8009ed8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f43f acde 	beq.w	800989c <_dtoa_r+0x9c>
 8009ee0:	601f      	str	r7, [r3, #0]
 8009ee2:	e4db      	b.n	800989c <_dtoa_r+0x9c>
 8009ee4:	4627      	mov	r7, r4
 8009ee6:	463b      	mov	r3, r7
 8009ee8:	461f      	mov	r7, r3
 8009eea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009eee:	2a39      	cmp	r2, #57	; 0x39
 8009ef0:	d107      	bne.n	8009f02 <_dtoa_r+0x702>
 8009ef2:	9a03      	ldr	r2, [sp, #12]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d1f7      	bne.n	8009ee8 <_dtoa_r+0x6e8>
 8009ef8:	2230      	movs	r2, #48	; 0x30
 8009efa:	9903      	ldr	r1, [sp, #12]
 8009efc:	f108 0801 	add.w	r8, r8, #1
 8009f00:	700a      	strb	r2, [r1, #0]
 8009f02:	781a      	ldrb	r2, [r3, #0]
 8009f04:	3201      	adds	r2, #1
 8009f06:	701a      	strb	r2, [r3, #0]
 8009f08:	e79e      	b.n	8009e48 <_dtoa_r+0x648>
 8009f0a:	46d0      	mov	r8, sl
 8009f0c:	e7eb      	b.n	8009ee6 <_dtoa_r+0x6e6>
 8009f0e:	2200      	movs	r2, #0
 8009f10:	4b6e      	ldr	r3, [pc, #440]	; (800a0cc <_dtoa_r+0x8cc>)
 8009f12:	f7fb fa6d 	bl	80053f0 <__aeabi_dmul>
 8009f16:	2200      	movs	r2, #0
 8009f18:	2300      	movs	r3, #0
 8009f1a:	4680      	mov	r8, r0
 8009f1c:	4689      	mov	r9, r1
 8009f1e:	f7fb fccf 	bl	80058c0 <__aeabi_dcmpeq>
 8009f22:	2800      	cmp	r0, #0
 8009f24:	d09b      	beq.n	8009e5e <_dtoa_r+0x65e>
 8009f26:	e7cd      	b.n	8009ec4 <_dtoa_r+0x6c4>
 8009f28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f2a:	2a00      	cmp	r2, #0
 8009f2c:	f000 80d0 	beq.w	800a0d0 <_dtoa_r+0x8d0>
 8009f30:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009f32:	2a01      	cmp	r2, #1
 8009f34:	f300 80ae 	bgt.w	800a094 <_dtoa_r+0x894>
 8009f38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f3a:	2a00      	cmp	r2, #0
 8009f3c:	f000 80a6 	beq.w	800a08c <_dtoa_r+0x88c>
 8009f40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009f46:	9f06      	ldr	r7, [sp, #24]
 8009f48:	9a06      	ldr	r2, [sp, #24]
 8009f4a:	2101      	movs	r1, #1
 8009f4c:	441a      	add	r2, r3
 8009f4e:	9206      	str	r2, [sp, #24]
 8009f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f52:	4628      	mov	r0, r5
 8009f54:	441a      	add	r2, r3
 8009f56:	9209      	str	r2, [sp, #36]	; 0x24
 8009f58:	f000 ff20 	bl	800ad9c <__i2b>
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	2f00      	cmp	r7, #0
 8009f60:	dd0c      	ble.n	8009f7c <_dtoa_r+0x77c>
 8009f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	dd09      	ble.n	8009f7c <_dtoa_r+0x77c>
 8009f68:	42bb      	cmp	r3, r7
 8009f6a:	bfa8      	it	ge
 8009f6c:	463b      	movge	r3, r7
 8009f6e:	9a06      	ldr	r2, [sp, #24]
 8009f70:	1aff      	subs	r7, r7, r3
 8009f72:	1ad2      	subs	r2, r2, r3
 8009f74:	9206      	str	r2, [sp, #24]
 8009f76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f7e:	b1f3      	cbz	r3, 8009fbe <_dtoa_r+0x7be>
 8009f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f000 80a8 	beq.w	800a0d8 <_dtoa_r+0x8d8>
 8009f88:	2c00      	cmp	r4, #0
 8009f8a:	dd10      	ble.n	8009fae <_dtoa_r+0x7ae>
 8009f8c:	4631      	mov	r1, r6
 8009f8e:	4622      	mov	r2, r4
 8009f90:	4628      	mov	r0, r5
 8009f92:	f000 ffc1 	bl	800af18 <__pow5mult>
 8009f96:	465a      	mov	r2, fp
 8009f98:	4601      	mov	r1, r0
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	4628      	mov	r0, r5
 8009f9e:	f000 ff13 	bl	800adc8 <__multiply>
 8009fa2:	4680      	mov	r8, r0
 8009fa4:	4659      	mov	r1, fp
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	f000 fdf8 	bl	800ab9c <_Bfree>
 8009fac:	46c3      	mov	fp, r8
 8009fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb0:	1b1a      	subs	r2, r3, r4
 8009fb2:	d004      	beq.n	8009fbe <_dtoa_r+0x7be>
 8009fb4:	4659      	mov	r1, fp
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f000 ffae 	bl	800af18 <__pow5mult>
 8009fbc:	4683      	mov	fp, r0
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	f000 feeb 	bl	800ad9c <__i2b>
 8009fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fc8:	4604      	mov	r4, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f340 8086 	ble.w	800a0dc <_dtoa_r+0x8dc>
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	4601      	mov	r1, r0
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	f000 ff9f 	bl	800af18 <__pow5mult>
 8009fda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fdc:	4604      	mov	r4, r0
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	dd7f      	ble.n	800a0e2 <_dtoa_r+0x8e2>
 8009fe2:	f04f 0800 	mov.w	r8, #0
 8009fe6:	6923      	ldr	r3, [r4, #16]
 8009fe8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009fec:	6918      	ldr	r0, [r3, #16]
 8009fee:	f000 fe87 	bl	800ad00 <__hi0bits>
 8009ff2:	f1c0 0020 	rsb	r0, r0, #32
 8009ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff8:	4418      	add	r0, r3
 8009ffa:	f010 001f 	ands.w	r0, r0, #31
 8009ffe:	f000 8092 	beq.w	800a126 <_dtoa_r+0x926>
 800a002:	f1c0 0320 	rsb	r3, r0, #32
 800a006:	2b04      	cmp	r3, #4
 800a008:	f340 808a 	ble.w	800a120 <_dtoa_r+0x920>
 800a00c:	f1c0 001c 	rsb	r0, r0, #28
 800a010:	9b06      	ldr	r3, [sp, #24]
 800a012:	4407      	add	r7, r0
 800a014:	4403      	add	r3, r0
 800a016:	9306      	str	r3, [sp, #24]
 800a018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a01a:	4403      	add	r3, r0
 800a01c:	9309      	str	r3, [sp, #36]	; 0x24
 800a01e:	9b06      	ldr	r3, [sp, #24]
 800a020:	2b00      	cmp	r3, #0
 800a022:	dd05      	ble.n	800a030 <_dtoa_r+0x830>
 800a024:	4659      	mov	r1, fp
 800a026:	461a      	mov	r2, r3
 800a028:	4628      	mov	r0, r5
 800a02a:	f000 ffcf 	bl	800afcc <__lshift>
 800a02e:	4683      	mov	fp, r0
 800a030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a032:	2b00      	cmp	r3, #0
 800a034:	dd05      	ble.n	800a042 <_dtoa_r+0x842>
 800a036:	4621      	mov	r1, r4
 800a038:	461a      	mov	r2, r3
 800a03a:	4628      	mov	r0, r5
 800a03c:	f000 ffc6 	bl	800afcc <__lshift>
 800a040:	4604      	mov	r4, r0
 800a042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a044:	2b00      	cmp	r3, #0
 800a046:	d070      	beq.n	800a12a <_dtoa_r+0x92a>
 800a048:	4621      	mov	r1, r4
 800a04a:	4658      	mov	r0, fp
 800a04c:	f001 f82e 	bl	800b0ac <__mcmp>
 800a050:	2800      	cmp	r0, #0
 800a052:	da6a      	bge.n	800a12a <_dtoa_r+0x92a>
 800a054:	2300      	movs	r3, #0
 800a056:	4659      	mov	r1, fp
 800a058:	220a      	movs	r2, #10
 800a05a:	4628      	mov	r0, r5
 800a05c:	f000 fdc0 	bl	800abe0 <__multadd>
 800a060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a062:	4683      	mov	fp, r0
 800a064:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f000 8194 	beq.w	800a396 <_dtoa_r+0xb96>
 800a06e:	4631      	mov	r1, r6
 800a070:	2300      	movs	r3, #0
 800a072:	220a      	movs	r2, #10
 800a074:	4628      	mov	r0, r5
 800a076:	f000 fdb3 	bl	800abe0 <__multadd>
 800a07a:	f1b9 0f00 	cmp.w	r9, #0
 800a07e:	4606      	mov	r6, r0
 800a080:	f300 8093 	bgt.w	800a1aa <_dtoa_r+0x9aa>
 800a084:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a086:	2b02      	cmp	r3, #2
 800a088:	dc57      	bgt.n	800a13a <_dtoa_r+0x93a>
 800a08a:	e08e      	b.n	800a1aa <_dtoa_r+0x9aa>
 800a08c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a08e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a092:	e757      	b.n	8009f44 <_dtoa_r+0x744>
 800a094:	9b08      	ldr	r3, [sp, #32]
 800a096:	1e5c      	subs	r4, r3, #1
 800a098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a09a:	42a3      	cmp	r3, r4
 800a09c:	bfb7      	itett	lt
 800a09e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a0a0:	1b1c      	subge	r4, r3, r4
 800a0a2:	1ae2      	sublt	r2, r4, r3
 800a0a4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a0a6:	bfbe      	ittt	lt
 800a0a8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a0aa:	189b      	addlt	r3, r3, r2
 800a0ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a0ae:	9b08      	ldr	r3, [sp, #32]
 800a0b0:	bfb8      	it	lt
 800a0b2:	2400      	movlt	r4, #0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	bfbb      	ittet	lt
 800a0b8:	9b06      	ldrlt	r3, [sp, #24]
 800a0ba:	9a08      	ldrlt	r2, [sp, #32]
 800a0bc:	9f06      	ldrge	r7, [sp, #24]
 800a0be:	1a9f      	sublt	r7, r3, r2
 800a0c0:	bfac      	ite	ge
 800a0c2:	9b08      	ldrge	r3, [sp, #32]
 800a0c4:	2300      	movlt	r3, #0
 800a0c6:	e73f      	b.n	8009f48 <_dtoa_r+0x748>
 800a0c8:	3fe00000 	.word	0x3fe00000
 800a0cc:	40240000 	.word	0x40240000
 800a0d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a0d2:	9f06      	ldr	r7, [sp, #24]
 800a0d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a0d6:	e742      	b.n	8009f5e <_dtoa_r+0x75e>
 800a0d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0da:	e76b      	b.n	8009fb4 <_dtoa_r+0x7b4>
 800a0dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	dc19      	bgt.n	800a116 <_dtoa_r+0x916>
 800a0e2:	9b04      	ldr	r3, [sp, #16]
 800a0e4:	b9bb      	cbnz	r3, 800a116 <_dtoa_r+0x916>
 800a0e6:	9b05      	ldr	r3, [sp, #20]
 800a0e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0ec:	b99b      	cbnz	r3, 800a116 <_dtoa_r+0x916>
 800a0ee:	9b05      	ldr	r3, [sp, #20]
 800a0f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0f4:	0d1b      	lsrs	r3, r3, #20
 800a0f6:	051b      	lsls	r3, r3, #20
 800a0f8:	b183      	cbz	r3, 800a11c <_dtoa_r+0x91c>
 800a0fa:	f04f 0801 	mov.w	r8, #1
 800a0fe:	9b06      	ldr	r3, [sp, #24]
 800a100:	3301      	adds	r3, #1
 800a102:	9306      	str	r3, [sp, #24]
 800a104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a106:	3301      	adds	r3, #1
 800a108:	9309      	str	r3, [sp, #36]	; 0x24
 800a10a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f47f af6a 	bne.w	8009fe6 <_dtoa_r+0x7e6>
 800a112:	2001      	movs	r0, #1
 800a114:	e76f      	b.n	8009ff6 <_dtoa_r+0x7f6>
 800a116:	f04f 0800 	mov.w	r8, #0
 800a11a:	e7f6      	b.n	800a10a <_dtoa_r+0x90a>
 800a11c:	4698      	mov	r8, r3
 800a11e:	e7f4      	b.n	800a10a <_dtoa_r+0x90a>
 800a120:	f43f af7d 	beq.w	800a01e <_dtoa_r+0x81e>
 800a124:	4618      	mov	r0, r3
 800a126:	301c      	adds	r0, #28
 800a128:	e772      	b.n	800a010 <_dtoa_r+0x810>
 800a12a:	9b08      	ldr	r3, [sp, #32]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	dc36      	bgt.n	800a19e <_dtoa_r+0x99e>
 800a130:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a132:	2b02      	cmp	r3, #2
 800a134:	dd33      	ble.n	800a19e <_dtoa_r+0x99e>
 800a136:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a13a:	f1b9 0f00 	cmp.w	r9, #0
 800a13e:	d10d      	bne.n	800a15c <_dtoa_r+0x95c>
 800a140:	4621      	mov	r1, r4
 800a142:	464b      	mov	r3, r9
 800a144:	2205      	movs	r2, #5
 800a146:	4628      	mov	r0, r5
 800a148:	f000 fd4a 	bl	800abe0 <__multadd>
 800a14c:	4601      	mov	r1, r0
 800a14e:	4604      	mov	r4, r0
 800a150:	4658      	mov	r0, fp
 800a152:	f000 ffab 	bl	800b0ac <__mcmp>
 800a156:	2800      	cmp	r0, #0
 800a158:	f73f adb8 	bgt.w	8009ccc <_dtoa_r+0x4cc>
 800a15c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a15e:	9f03      	ldr	r7, [sp, #12]
 800a160:	ea6f 0a03 	mvn.w	sl, r3
 800a164:	f04f 0800 	mov.w	r8, #0
 800a168:	4621      	mov	r1, r4
 800a16a:	4628      	mov	r0, r5
 800a16c:	f000 fd16 	bl	800ab9c <_Bfree>
 800a170:	2e00      	cmp	r6, #0
 800a172:	f43f aea7 	beq.w	8009ec4 <_dtoa_r+0x6c4>
 800a176:	f1b8 0f00 	cmp.w	r8, #0
 800a17a:	d005      	beq.n	800a188 <_dtoa_r+0x988>
 800a17c:	45b0      	cmp	r8, r6
 800a17e:	d003      	beq.n	800a188 <_dtoa_r+0x988>
 800a180:	4641      	mov	r1, r8
 800a182:	4628      	mov	r0, r5
 800a184:	f000 fd0a 	bl	800ab9c <_Bfree>
 800a188:	4631      	mov	r1, r6
 800a18a:	4628      	mov	r0, r5
 800a18c:	f000 fd06 	bl	800ab9c <_Bfree>
 800a190:	e698      	b.n	8009ec4 <_dtoa_r+0x6c4>
 800a192:	2400      	movs	r4, #0
 800a194:	4626      	mov	r6, r4
 800a196:	e7e1      	b.n	800a15c <_dtoa_r+0x95c>
 800a198:	46c2      	mov	sl, r8
 800a19a:	4626      	mov	r6, r4
 800a19c:	e596      	b.n	8009ccc <_dtoa_r+0x4cc>
 800a19e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f000 80fd 	beq.w	800a3a4 <_dtoa_r+0xba4>
 800a1aa:	2f00      	cmp	r7, #0
 800a1ac:	dd05      	ble.n	800a1ba <_dtoa_r+0x9ba>
 800a1ae:	4631      	mov	r1, r6
 800a1b0:	463a      	mov	r2, r7
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	f000 ff0a 	bl	800afcc <__lshift>
 800a1b8:	4606      	mov	r6, r0
 800a1ba:	f1b8 0f00 	cmp.w	r8, #0
 800a1be:	d05c      	beq.n	800a27a <_dtoa_r+0xa7a>
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	6871      	ldr	r1, [r6, #4]
 800a1c4:	f000 fcaa 	bl	800ab1c <_Balloc>
 800a1c8:	4607      	mov	r7, r0
 800a1ca:	b928      	cbnz	r0, 800a1d8 <_dtoa_r+0x9d8>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a1d2:	4b7f      	ldr	r3, [pc, #508]	; (800a3d0 <_dtoa_r+0xbd0>)
 800a1d4:	f7ff bb28 	b.w	8009828 <_dtoa_r+0x28>
 800a1d8:	6932      	ldr	r2, [r6, #16]
 800a1da:	f106 010c 	add.w	r1, r6, #12
 800a1de:	3202      	adds	r2, #2
 800a1e0:	0092      	lsls	r2, r2, #2
 800a1e2:	300c      	adds	r0, #12
 800a1e4:	f000 fc8c 	bl	800ab00 <memcpy>
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	4639      	mov	r1, r7
 800a1ec:	4628      	mov	r0, r5
 800a1ee:	f000 feed 	bl	800afcc <__lshift>
 800a1f2:	46b0      	mov	r8, r6
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	9b03      	ldr	r3, [sp, #12]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	9308      	str	r3, [sp, #32]
 800a1fc:	9b03      	ldr	r3, [sp, #12]
 800a1fe:	444b      	add	r3, r9
 800a200:	930a      	str	r3, [sp, #40]	; 0x28
 800a202:	9b04      	ldr	r3, [sp, #16]
 800a204:	f003 0301 	and.w	r3, r3, #1
 800a208:	9309      	str	r3, [sp, #36]	; 0x24
 800a20a:	9b08      	ldr	r3, [sp, #32]
 800a20c:	4621      	mov	r1, r4
 800a20e:	3b01      	subs	r3, #1
 800a210:	4658      	mov	r0, fp
 800a212:	9304      	str	r3, [sp, #16]
 800a214:	f7ff fa66 	bl	80096e4 <quorem>
 800a218:	4603      	mov	r3, r0
 800a21a:	4641      	mov	r1, r8
 800a21c:	3330      	adds	r3, #48	; 0x30
 800a21e:	9006      	str	r0, [sp, #24]
 800a220:	4658      	mov	r0, fp
 800a222:	930b      	str	r3, [sp, #44]	; 0x2c
 800a224:	f000 ff42 	bl	800b0ac <__mcmp>
 800a228:	4632      	mov	r2, r6
 800a22a:	4681      	mov	r9, r0
 800a22c:	4621      	mov	r1, r4
 800a22e:	4628      	mov	r0, r5
 800a230:	f000 ff58 	bl	800b0e4 <__mdiff>
 800a234:	68c2      	ldr	r2, [r0, #12]
 800a236:	4607      	mov	r7, r0
 800a238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a23a:	bb02      	cbnz	r2, 800a27e <_dtoa_r+0xa7e>
 800a23c:	4601      	mov	r1, r0
 800a23e:	4658      	mov	r0, fp
 800a240:	f000 ff34 	bl	800b0ac <__mcmp>
 800a244:	4602      	mov	r2, r0
 800a246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a248:	4639      	mov	r1, r7
 800a24a:	4628      	mov	r0, r5
 800a24c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a250:	f000 fca4 	bl	800ab9c <_Bfree>
 800a254:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a256:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a258:	9f08      	ldr	r7, [sp, #32]
 800a25a:	ea43 0102 	orr.w	r1, r3, r2
 800a25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a260:	430b      	orrs	r3, r1
 800a262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a264:	d10d      	bne.n	800a282 <_dtoa_r+0xa82>
 800a266:	2b39      	cmp	r3, #57	; 0x39
 800a268:	d029      	beq.n	800a2be <_dtoa_r+0xabe>
 800a26a:	f1b9 0f00 	cmp.w	r9, #0
 800a26e:	dd01      	ble.n	800a274 <_dtoa_r+0xa74>
 800a270:	9b06      	ldr	r3, [sp, #24]
 800a272:	3331      	adds	r3, #49	; 0x31
 800a274:	9a04      	ldr	r2, [sp, #16]
 800a276:	7013      	strb	r3, [r2, #0]
 800a278:	e776      	b.n	800a168 <_dtoa_r+0x968>
 800a27a:	4630      	mov	r0, r6
 800a27c:	e7b9      	b.n	800a1f2 <_dtoa_r+0x9f2>
 800a27e:	2201      	movs	r2, #1
 800a280:	e7e2      	b.n	800a248 <_dtoa_r+0xa48>
 800a282:	f1b9 0f00 	cmp.w	r9, #0
 800a286:	db06      	blt.n	800a296 <_dtoa_r+0xa96>
 800a288:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a28a:	ea41 0909 	orr.w	r9, r1, r9
 800a28e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a290:	ea59 0101 	orrs.w	r1, r9, r1
 800a294:	d120      	bne.n	800a2d8 <_dtoa_r+0xad8>
 800a296:	2a00      	cmp	r2, #0
 800a298:	ddec      	ble.n	800a274 <_dtoa_r+0xa74>
 800a29a:	4659      	mov	r1, fp
 800a29c:	2201      	movs	r2, #1
 800a29e:	4628      	mov	r0, r5
 800a2a0:	9308      	str	r3, [sp, #32]
 800a2a2:	f000 fe93 	bl	800afcc <__lshift>
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	4683      	mov	fp, r0
 800a2aa:	f000 feff 	bl	800b0ac <__mcmp>
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	9b08      	ldr	r3, [sp, #32]
 800a2b2:	dc02      	bgt.n	800a2ba <_dtoa_r+0xaba>
 800a2b4:	d1de      	bne.n	800a274 <_dtoa_r+0xa74>
 800a2b6:	07da      	lsls	r2, r3, #31
 800a2b8:	d5dc      	bpl.n	800a274 <_dtoa_r+0xa74>
 800a2ba:	2b39      	cmp	r3, #57	; 0x39
 800a2bc:	d1d8      	bne.n	800a270 <_dtoa_r+0xa70>
 800a2be:	2339      	movs	r3, #57	; 0x39
 800a2c0:	9a04      	ldr	r2, [sp, #16]
 800a2c2:	7013      	strb	r3, [r2, #0]
 800a2c4:	463b      	mov	r3, r7
 800a2c6:	461f      	mov	r7, r3
 800a2c8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	2a39      	cmp	r2, #57	; 0x39
 800a2d0:	d050      	beq.n	800a374 <_dtoa_r+0xb74>
 800a2d2:	3201      	adds	r2, #1
 800a2d4:	701a      	strb	r2, [r3, #0]
 800a2d6:	e747      	b.n	800a168 <_dtoa_r+0x968>
 800a2d8:	2a00      	cmp	r2, #0
 800a2da:	dd03      	ble.n	800a2e4 <_dtoa_r+0xae4>
 800a2dc:	2b39      	cmp	r3, #57	; 0x39
 800a2de:	d0ee      	beq.n	800a2be <_dtoa_r+0xabe>
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	e7c7      	b.n	800a274 <_dtoa_r+0xa74>
 800a2e4:	9a08      	ldr	r2, [sp, #32]
 800a2e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a2e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a2ec:	428a      	cmp	r2, r1
 800a2ee:	d02a      	beq.n	800a346 <_dtoa_r+0xb46>
 800a2f0:	4659      	mov	r1, fp
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	220a      	movs	r2, #10
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	f000 fc72 	bl	800abe0 <__multadd>
 800a2fc:	45b0      	cmp	r8, r6
 800a2fe:	4683      	mov	fp, r0
 800a300:	f04f 0300 	mov.w	r3, #0
 800a304:	f04f 020a 	mov.w	r2, #10
 800a308:	4641      	mov	r1, r8
 800a30a:	4628      	mov	r0, r5
 800a30c:	d107      	bne.n	800a31e <_dtoa_r+0xb1e>
 800a30e:	f000 fc67 	bl	800abe0 <__multadd>
 800a312:	4680      	mov	r8, r0
 800a314:	4606      	mov	r6, r0
 800a316:	9b08      	ldr	r3, [sp, #32]
 800a318:	3301      	adds	r3, #1
 800a31a:	9308      	str	r3, [sp, #32]
 800a31c:	e775      	b.n	800a20a <_dtoa_r+0xa0a>
 800a31e:	f000 fc5f 	bl	800abe0 <__multadd>
 800a322:	4631      	mov	r1, r6
 800a324:	4680      	mov	r8, r0
 800a326:	2300      	movs	r3, #0
 800a328:	220a      	movs	r2, #10
 800a32a:	4628      	mov	r0, r5
 800a32c:	f000 fc58 	bl	800abe0 <__multadd>
 800a330:	4606      	mov	r6, r0
 800a332:	e7f0      	b.n	800a316 <_dtoa_r+0xb16>
 800a334:	f1b9 0f00 	cmp.w	r9, #0
 800a338:	bfcc      	ite	gt
 800a33a:	464f      	movgt	r7, r9
 800a33c:	2701      	movle	r7, #1
 800a33e:	f04f 0800 	mov.w	r8, #0
 800a342:	9a03      	ldr	r2, [sp, #12]
 800a344:	4417      	add	r7, r2
 800a346:	4659      	mov	r1, fp
 800a348:	2201      	movs	r2, #1
 800a34a:	4628      	mov	r0, r5
 800a34c:	9308      	str	r3, [sp, #32]
 800a34e:	f000 fe3d 	bl	800afcc <__lshift>
 800a352:	4621      	mov	r1, r4
 800a354:	4683      	mov	fp, r0
 800a356:	f000 fea9 	bl	800b0ac <__mcmp>
 800a35a:	2800      	cmp	r0, #0
 800a35c:	dcb2      	bgt.n	800a2c4 <_dtoa_r+0xac4>
 800a35e:	d102      	bne.n	800a366 <_dtoa_r+0xb66>
 800a360:	9b08      	ldr	r3, [sp, #32]
 800a362:	07db      	lsls	r3, r3, #31
 800a364:	d4ae      	bmi.n	800a2c4 <_dtoa_r+0xac4>
 800a366:	463b      	mov	r3, r7
 800a368:	461f      	mov	r7, r3
 800a36a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a36e:	2a30      	cmp	r2, #48	; 0x30
 800a370:	d0fa      	beq.n	800a368 <_dtoa_r+0xb68>
 800a372:	e6f9      	b.n	800a168 <_dtoa_r+0x968>
 800a374:	9a03      	ldr	r2, [sp, #12]
 800a376:	429a      	cmp	r2, r3
 800a378:	d1a5      	bne.n	800a2c6 <_dtoa_r+0xac6>
 800a37a:	2331      	movs	r3, #49	; 0x31
 800a37c:	f10a 0a01 	add.w	sl, sl, #1
 800a380:	e779      	b.n	800a276 <_dtoa_r+0xa76>
 800a382:	4b14      	ldr	r3, [pc, #80]	; (800a3d4 <_dtoa_r+0xbd4>)
 800a384:	f7ff baa8 	b.w	80098d8 <_dtoa_r+0xd8>
 800a388:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f47f aa81 	bne.w	8009892 <_dtoa_r+0x92>
 800a390:	4b11      	ldr	r3, [pc, #68]	; (800a3d8 <_dtoa_r+0xbd8>)
 800a392:	f7ff baa1 	b.w	80098d8 <_dtoa_r+0xd8>
 800a396:	f1b9 0f00 	cmp.w	r9, #0
 800a39a:	dc03      	bgt.n	800a3a4 <_dtoa_r+0xba4>
 800a39c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a39e:	2b02      	cmp	r3, #2
 800a3a0:	f73f aecb 	bgt.w	800a13a <_dtoa_r+0x93a>
 800a3a4:	9f03      	ldr	r7, [sp, #12]
 800a3a6:	4621      	mov	r1, r4
 800a3a8:	4658      	mov	r0, fp
 800a3aa:	f7ff f99b 	bl	80096e4 <quorem>
 800a3ae:	9a03      	ldr	r2, [sp, #12]
 800a3b0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a3b4:	f807 3b01 	strb.w	r3, [r7], #1
 800a3b8:	1aba      	subs	r2, r7, r2
 800a3ba:	4591      	cmp	r9, r2
 800a3bc:	ddba      	ble.n	800a334 <_dtoa_r+0xb34>
 800a3be:	4659      	mov	r1, fp
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	220a      	movs	r2, #10
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	f000 fc0b 	bl	800abe0 <__multadd>
 800a3ca:	4683      	mov	fp, r0
 800a3cc:	e7eb      	b.n	800a3a6 <_dtoa_r+0xba6>
 800a3ce:	bf00      	nop
 800a3d0:	0801e100 	.word	0x0801e100
 800a3d4:	0801df04 	.word	0x0801df04
 800a3d8:	0801e081 	.word	0x0801e081

0800a3dc <rshift>:
 800a3dc:	6903      	ldr	r3, [r0, #16]
 800a3de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a3e6:	f100 0414 	add.w	r4, r0, #20
 800a3ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a3ee:	dd46      	ble.n	800a47e <rshift+0xa2>
 800a3f0:	f011 011f 	ands.w	r1, r1, #31
 800a3f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3fc:	d10c      	bne.n	800a418 <rshift+0x3c>
 800a3fe:	4629      	mov	r1, r5
 800a400:	f100 0710 	add.w	r7, r0, #16
 800a404:	42b1      	cmp	r1, r6
 800a406:	d335      	bcc.n	800a474 <rshift+0x98>
 800a408:	1a9b      	subs	r3, r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	1eea      	subs	r2, r5, #3
 800a40e:	4296      	cmp	r6, r2
 800a410:	bf38      	it	cc
 800a412:	2300      	movcc	r3, #0
 800a414:	4423      	add	r3, r4
 800a416:	e015      	b.n	800a444 <rshift+0x68>
 800a418:	46a1      	mov	r9, r4
 800a41a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a41e:	f1c1 0820 	rsb	r8, r1, #32
 800a422:	40cf      	lsrs	r7, r1
 800a424:	f105 0e04 	add.w	lr, r5, #4
 800a428:	4576      	cmp	r6, lr
 800a42a:	46f4      	mov	ip, lr
 800a42c:	d816      	bhi.n	800a45c <rshift+0x80>
 800a42e:	1a9a      	subs	r2, r3, r2
 800a430:	0092      	lsls	r2, r2, #2
 800a432:	3a04      	subs	r2, #4
 800a434:	3501      	adds	r5, #1
 800a436:	42ae      	cmp	r6, r5
 800a438:	bf38      	it	cc
 800a43a:	2200      	movcc	r2, #0
 800a43c:	18a3      	adds	r3, r4, r2
 800a43e:	50a7      	str	r7, [r4, r2]
 800a440:	b107      	cbz	r7, 800a444 <rshift+0x68>
 800a442:	3304      	adds	r3, #4
 800a444:	42a3      	cmp	r3, r4
 800a446:	eba3 0204 	sub.w	r2, r3, r4
 800a44a:	bf08      	it	eq
 800a44c:	2300      	moveq	r3, #0
 800a44e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a452:	6102      	str	r2, [r0, #16]
 800a454:	bf08      	it	eq
 800a456:	6143      	streq	r3, [r0, #20]
 800a458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a45c:	f8dc c000 	ldr.w	ip, [ip]
 800a460:	fa0c fc08 	lsl.w	ip, ip, r8
 800a464:	ea4c 0707 	orr.w	r7, ip, r7
 800a468:	f849 7b04 	str.w	r7, [r9], #4
 800a46c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a470:	40cf      	lsrs	r7, r1
 800a472:	e7d9      	b.n	800a428 <rshift+0x4c>
 800a474:	f851 cb04 	ldr.w	ip, [r1], #4
 800a478:	f847 cf04 	str.w	ip, [r7, #4]!
 800a47c:	e7c2      	b.n	800a404 <rshift+0x28>
 800a47e:	4623      	mov	r3, r4
 800a480:	e7e0      	b.n	800a444 <rshift+0x68>

0800a482 <__hexdig_fun>:
 800a482:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a486:	2b09      	cmp	r3, #9
 800a488:	d802      	bhi.n	800a490 <__hexdig_fun+0xe>
 800a48a:	3820      	subs	r0, #32
 800a48c:	b2c0      	uxtb	r0, r0
 800a48e:	4770      	bx	lr
 800a490:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a494:	2b05      	cmp	r3, #5
 800a496:	d801      	bhi.n	800a49c <__hexdig_fun+0x1a>
 800a498:	3847      	subs	r0, #71	; 0x47
 800a49a:	e7f7      	b.n	800a48c <__hexdig_fun+0xa>
 800a49c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a4a0:	2b05      	cmp	r3, #5
 800a4a2:	d801      	bhi.n	800a4a8 <__hexdig_fun+0x26>
 800a4a4:	3827      	subs	r0, #39	; 0x27
 800a4a6:	e7f1      	b.n	800a48c <__hexdig_fun+0xa>
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	4770      	bx	lr

0800a4ac <__gethex>:
 800a4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b0:	b08b      	sub	sp, #44	; 0x2c
 800a4b2:	9305      	str	r3, [sp, #20]
 800a4b4:	4bb2      	ldr	r3, [pc, #712]	; (800a780 <__gethex+0x2d4>)
 800a4b6:	9002      	str	r0, [sp, #8]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	468b      	mov	fp, r1
 800a4bc:	4618      	mov	r0, r3
 800a4be:	4690      	mov	r8, r2
 800a4c0:	9303      	str	r3, [sp, #12]
 800a4c2:	f7fa fdd1 	bl	8005068 <strlen>
 800a4c6:	4682      	mov	sl, r0
 800a4c8:	9b03      	ldr	r3, [sp, #12]
 800a4ca:	f8db 2000 	ldr.w	r2, [fp]
 800a4ce:	4403      	add	r3, r0
 800a4d0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a4d4:	9306      	str	r3, [sp, #24]
 800a4d6:	1c93      	adds	r3, r2, #2
 800a4d8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a4dc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a4e0:	32fe      	adds	r2, #254	; 0xfe
 800a4e2:	18d1      	adds	r1, r2, r3
 800a4e4:	461f      	mov	r7, r3
 800a4e6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a4ea:	9101      	str	r1, [sp, #4]
 800a4ec:	2830      	cmp	r0, #48	; 0x30
 800a4ee:	d0f8      	beq.n	800a4e2 <__gethex+0x36>
 800a4f0:	f7ff ffc7 	bl	800a482 <__hexdig_fun>
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	d13a      	bne.n	800a570 <__gethex+0xc4>
 800a4fa:	4652      	mov	r2, sl
 800a4fc:	4638      	mov	r0, r7
 800a4fe:	9903      	ldr	r1, [sp, #12]
 800a500:	f001 fa26 	bl	800b950 <strncmp>
 800a504:	4605      	mov	r5, r0
 800a506:	2800      	cmp	r0, #0
 800a508:	d166      	bne.n	800a5d8 <__gethex+0x12c>
 800a50a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a50e:	eb07 060a 	add.w	r6, r7, sl
 800a512:	f7ff ffb6 	bl	800a482 <__hexdig_fun>
 800a516:	2800      	cmp	r0, #0
 800a518:	d060      	beq.n	800a5dc <__gethex+0x130>
 800a51a:	4633      	mov	r3, r6
 800a51c:	7818      	ldrb	r0, [r3, #0]
 800a51e:	461f      	mov	r7, r3
 800a520:	2830      	cmp	r0, #48	; 0x30
 800a522:	f103 0301 	add.w	r3, r3, #1
 800a526:	d0f9      	beq.n	800a51c <__gethex+0x70>
 800a528:	f7ff ffab 	bl	800a482 <__hexdig_fun>
 800a52c:	2301      	movs	r3, #1
 800a52e:	fab0 f480 	clz	r4, r0
 800a532:	4635      	mov	r5, r6
 800a534:	0964      	lsrs	r4, r4, #5
 800a536:	9301      	str	r3, [sp, #4]
 800a538:	463a      	mov	r2, r7
 800a53a:	4616      	mov	r6, r2
 800a53c:	7830      	ldrb	r0, [r6, #0]
 800a53e:	3201      	adds	r2, #1
 800a540:	f7ff ff9f 	bl	800a482 <__hexdig_fun>
 800a544:	2800      	cmp	r0, #0
 800a546:	d1f8      	bne.n	800a53a <__gethex+0x8e>
 800a548:	4652      	mov	r2, sl
 800a54a:	4630      	mov	r0, r6
 800a54c:	9903      	ldr	r1, [sp, #12]
 800a54e:	f001 f9ff 	bl	800b950 <strncmp>
 800a552:	b980      	cbnz	r0, 800a576 <__gethex+0xca>
 800a554:	b94d      	cbnz	r5, 800a56a <__gethex+0xbe>
 800a556:	eb06 050a 	add.w	r5, r6, sl
 800a55a:	462a      	mov	r2, r5
 800a55c:	4616      	mov	r6, r2
 800a55e:	7830      	ldrb	r0, [r6, #0]
 800a560:	3201      	adds	r2, #1
 800a562:	f7ff ff8e 	bl	800a482 <__hexdig_fun>
 800a566:	2800      	cmp	r0, #0
 800a568:	d1f8      	bne.n	800a55c <__gethex+0xb0>
 800a56a:	1bad      	subs	r5, r5, r6
 800a56c:	00ad      	lsls	r5, r5, #2
 800a56e:	e004      	b.n	800a57a <__gethex+0xce>
 800a570:	2400      	movs	r4, #0
 800a572:	4625      	mov	r5, r4
 800a574:	e7e0      	b.n	800a538 <__gethex+0x8c>
 800a576:	2d00      	cmp	r5, #0
 800a578:	d1f7      	bne.n	800a56a <__gethex+0xbe>
 800a57a:	7833      	ldrb	r3, [r6, #0]
 800a57c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a580:	2b50      	cmp	r3, #80	; 0x50
 800a582:	d139      	bne.n	800a5f8 <__gethex+0x14c>
 800a584:	7873      	ldrb	r3, [r6, #1]
 800a586:	2b2b      	cmp	r3, #43	; 0x2b
 800a588:	d02a      	beq.n	800a5e0 <__gethex+0x134>
 800a58a:	2b2d      	cmp	r3, #45	; 0x2d
 800a58c:	d02c      	beq.n	800a5e8 <__gethex+0x13c>
 800a58e:	f04f 0900 	mov.w	r9, #0
 800a592:	1c71      	adds	r1, r6, #1
 800a594:	7808      	ldrb	r0, [r1, #0]
 800a596:	f7ff ff74 	bl	800a482 <__hexdig_fun>
 800a59a:	1e43      	subs	r3, r0, #1
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	2b18      	cmp	r3, #24
 800a5a0:	d82a      	bhi.n	800a5f8 <__gethex+0x14c>
 800a5a2:	f1a0 0210 	sub.w	r2, r0, #16
 800a5a6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a5aa:	f7ff ff6a 	bl	800a482 <__hexdig_fun>
 800a5ae:	1e43      	subs	r3, r0, #1
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	2b18      	cmp	r3, #24
 800a5b4:	d91b      	bls.n	800a5ee <__gethex+0x142>
 800a5b6:	f1b9 0f00 	cmp.w	r9, #0
 800a5ba:	d000      	beq.n	800a5be <__gethex+0x112>
 800a5bc:	4252      	negs	r2, r2
 800a5be:	4415      	add	r5, r2
 800a5c0:	f8cb 1000 	str.w	r1, [fp]
 800a5c4:	b1d4      	cbz	r4, 800a5fc <__gethex+0x150>
 800a5c6:	9b01      	ldr	r3, [sp, #4]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	bf14      	ite	ne
 800a5cc:	2700      	movne	r7, #0
 800a5ce:	2706      	moveq	r7, #6
 800a5d0:	4638      	mov	r0, r7
 800a5d2:	b00b      	add	sp, #44	; 0x2c
 800a5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d8:	463e      	mov	r6, r7
 800a5da:	4625      	mov	r5, r4
 800a5dc:	2401      	movs	r4, #1
 800a5de:	e7cc      	b.n	800a57a <__gethex+0xce>
 800a5e0:	f04f 0900 	mov.w	r9, #0
 800a5e4:	1cb1      	adds	r1, r6, #2
 800a5e6:	e7d5      	b.n	800a594 <__gethex+0xe8>
 800a5e8:	f04f 0901 	mov.w	r9, #1
 800a5ec:	e7fa      	b.n	800a5e4 <__gethex+0x138>
 800a5ee:	230a      	movs	r3, #10
 800a5f0:	fb03 0202 	mla	r2, r3, r2, r0
 800a5f4:	3a10      	subs	r2, #16
 800a5f6:	e7d6      	b.n	800a5a6 <__gethex+0xfa>
 800a5f8:	4631      	mov	r1, r6
 800a5fa:	e7e1      	b.n	800a5c0 <__gethex+0x114>
 800a5fc:	4621      	mov	r1, r4
 800a5fe:	1bf3      	subs	r3, r6, r7
 800a600:	3b01      	subs	r3, #1
 800a602:	2b07      	cmp	r3, #7
 800a604:	dc0a      	bgt.n	800a61c <__gethex+0x170>
 800a606:	9802      	ldr	r0, [sp, #8]
 800a608:	f000 fa88 	bl	800ab1c <_Balloc>
 800a60c:	4604      	mov	r4, r0
 800a60e:	b940      	cbnz	r0, 800a622 <__gethex+0x176>
 800a610:	4602      	mov	r2, r0
 800a612:	21de      	movs	r1, #222	; 0xde
 800a614:	4b5b      	ldr	r3, [pc, #364]	; (800a784 <__gethex+0x2d8>)
 800a616:	485c      	ldr	r0, [pc, #368]	; (800a788 <__gethex+0x2dc>)
 800a618:	f001 f9bc 	bl	800b994 <__assert_func>
 800a61c:	3101      	adds	r1, #1
 800a61e:	105b      	asrs	r3, r3, #1
 800a620:	e7ef      	b.n	800a602 <__gethex+0x156>
 800a622:	f04f 0b00 	mov.w	fp, #0
 800a626:	f100 0914 	add.w	r9, r0, #20
 800a62a:	f1ca 0301 	rsb	r3, sl, #1
 800a62e:	f8cd 9010 	str.w	r9, [sp, #16]
 800a632:	f8cd b004 	str.w	fp, [sp, #4]
 800a636:	9308      	str	r3, [sp, #32]
 800a638:	42b7      	cmp	r7, r6
 800a63a:	d33f      	bcc.n	800a6bc <__gethex+0x210>
 800a63c:	9f04      	ldr	r7, [sp, #16]
 800a63e:	9b01      	ldr	r3, [sp, #4]
 800a640:	f847 3b04 	str.w	r3, [r7], #4
 800a644:	eba7 0709 	sub.w	r7, r7, r9
 800a648:	10bf      	asrs	r7, r7, #2
 800a64a:	6127      	str	r7, [r4, #16]
 800a64c:	4618      	mov	r0, r3
 800a64e:	f000 fb57 	bl	800ad00 <__hi0bits>
 800a652:	017f      	lsls	r7, r7, #5
 800a654:	f8d8 6000 	ldr.w	r6, [r8]
 800a658:	1a3f      	subs	r7, r7, r0
 800a65a:	42b7      	cmp	r7, r6
 800a65c:	dd62      	ble.n	800a724 <__gethex+0x278>
 800a65e:	1bbf      	subs	r7, r7, r6
 800a660:	4639      	mov	r1, r7
 800a662:	4620      	mov	r0, r4
 800a664:	f000 fef1 	bl	800b44a <__any_on>
 800a668:	4682      	mov	sl, r0
 800a66a:	b1a8      	cbz	r0, 800a698 <__gethex+0x1ec>
 800a66c:	f04f 0a01 	mov.w	sl, #1
 800a670:	1e7b      	subs	r3, r7, #1
 800a672:	1159      	asrs	r1, r3, #5
 800a674:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a678:	f003 021f 	and.w	r2, r3, #31
 800a67c:	fa0a f202 	lsl.w	r2, sl, r2
 800a680:	420a      	tst	r2, r1
 800a682:	d009      	beq.n	800a698 <__gethex+0x1ec>
 800a684:	4553      	cmp	r3, sl
 800a686:	dd05      	ble.n	800a694 <__gethex+0x1e8>
 800a688:	4620      	mov	r0, r4
 800a68a:	1eb9      	subs	r1, r7, #2
 800a68c:	f000 fedd 	bl	800b44a <__any_on>
 800a690:	2800      	cmp	r0, #0
 800a692:	d144      	bne.n	800a71e <__gethex+0x272>
 800a694:	f04f 0a02 	mov.w	sl, #2
 800a698:	4639      	mov	r1, r7
 800a69a:	4620      	mov	r0, r4
 800a69c:	f7ff fe9e 	bl	800a3dc <rshift>
 800a6a0:	443d      	add	r5, r7
 800a6a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6a6:	42ab      	cmp	r3, r5
 800a6a8:	da4a      	bge.n	800a740 <__gethex+0x294>
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	9802      	ldr	r0, [sp, #8]
 800a6ae:	f000 fa75 	bl	800ab9c <_Bfree>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6b6:	27a3      	movs	r7, #163	; 0xa3
 800a6b8:	6013      	str	r3, [r2, #0]
 800a6ba:	e789      	b.n	800a5d0 <__gethex+0x124>
 800a6bc:	1e73      	subs	r3, r6, #1
 800a6be:	9a06      	ldr	r2, [sp, #24]
 800a6c0:	9307      	str	r3, [sp, #28]
 800a6c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d019      	beq.n	800a6fe <__gethex+0x252>
 800a6ca:	f1bb 0f20 	cmp.w	fp, #32
 800a6ce:	d107      	bne.n	800a6e0 <__gethex+0x234>
 800a6d0:	9b04      	ldr	r3, [sp, #16]
 800a6d2:	9a01      	ldr	r2, [sp, #4]
 800a6d4:	f843 2b04 	str.w	r2, [r3], #4
 800a6d8:	9304      	str	r3, [sp, #16]
 800a6da:	2300      	movs	r3, #0
 800a6dc:	469b      	mov	fp, r3
 800a6de:	9301      	str	r3, [sp, #4]
 800a6e0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a6e4:	f7ff fecd 	bl	800a482 <__hexdig_fun>
 800a6e8:	9b01      	ldr	r3, [sp, #4]
 800a6ea:	f000 000f 	and.w	r0, r0, #15
 800a6ee:	fa00 f00b 	lsl.w	r0, r0, fp
 800a6f2:	4303      	orrs	r3, r0
 800a6f4:	9301      	str	r3, [sp, #4]
 800a6f6:	f10b 0b04 	add.w	fp, fp, #4
 800a6fa:	9b07      	ldr	r3, [sp, #28]
 800a6fc:	e00d      	b.n	800a71a <__gethex+0x26e>
 800a6fe:	9a08      	ldr	r2, [sp, #32]
 800a700:	1e73      	subs	r3, r6, #1
 800a702:	4413      	add	r3, r2
 800a704:	42bb      	cmp	r3, r7
 800a706:	d3e0      	bcc.n	800a6ca <__gethex+0x21e>
 800a708:	4618      	mov	r0, r3
 800a70a:	4652      	mov	r2, sl
 800a70c:	9903      	ldr	r1, [sp, #12]
 800a70e:	9309      	str	r3, [sp, #36]	; 0x24
 800a710:	f001 f91e 	bl	800b950 <strncmp>
 800a714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a716:	2800      	cmp	r0, #0
 800a718:	d1d7      	bne.n	800a6ca <__gethex+0x21e>
 800a71a:	461e      	mov	r6, r3
 800a71c:	e78c      	b.n	800a638 <__gethex+0x18c>
 800a71e:	f04f 0a03 	mov.w	sl, #3
 800a722:	e7b9      	b.n	800a698 <__gethex+0x1ec>
 800a724:	da09      	bge.n	800a73a <__gethex+0x28e>
 800a726:	1bf7      	subs	r7, r6, r7
 800a728:	4621      	mov	r1, r4
 800a72a:	463a      	mov	r2, r7
 800a72c:	9802      	ldr	r0, [sp, #8]
 800a72e:	f000 fc4d 	bl	800afcc <__lshift>
 800a732:	4604      	mov	r4, r0
 800a734:	1bed      	subs	r5, r5, r7
 800a736:	f100 0914 	add.w	r9, r0, #20
 800a73a:	f04f 0a00 	mov.w	sl, #0
 800a73e:	e7b0      	b.n	800a6a2 <__gethex+0x1f6>
 800a740:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a744:	42a8      	cmp	r0, r5
 800a746:	dd72      	ble.n	800a82e <__gethex+0x382>
 800a748:	1b45      	subs	r5, r0, r5
 800a74a:	42ae      	cmp	r6, r5
 800a74c:	dc35      	bgt.n	800a7ba <__gethex+0x30e>
 800a74e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a752:	2b02      	cmp	r3, #2
 800a754:	d029      	beq.n	800a7aa <__gethex+0x2fe>
 800a756:	2b03      	cmp	r3, #3
 800a758:	d02b      	beq.n	800a7b2 <__gethex+0x306>
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d11c      	bne.n	800a798 <__gethex+0x2ec>
 800a75e:	42ae      	cmp	r6, r5
 800a760:	d11a      	bne.n	800a798 <__gethex+0x2ec>
 800a762:	2e01      	cmp	r6, #1
 800a764:	d112      	bne.n	800a78c <__gethex+0x2e0>
 800a766:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a76a:	9a05      	ldr	r2, [sp, #20]
 800a76c:	2762      	movs	r7, #98	; 0x62
 800a76e:	6013      	str	r3, [r2, #0]
 800a770:	2301      	movs	r3, #1
 800a772:	6123      	str	r3, [r4, #16]
 800a774:	f8c9 3000 	str.w	r3, [r9]
 800a778:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a77a:	601c      	str	r4, [r3, #0]
 800a77c:	e728      	b.n	800a5d0 <__gethex+0x124>
 800a77e:	bf00      	nop
 800a780:	0801e178 	.word	0x0801e178
 800a784:	0801e100 	.word	0x0801e100
 800a788:	0801e111 	.word	0x0801e111
 800a78c:	4620      	mov	r0, r4
 800a78e:	1e71      	subs	r1, r6, #1
 800a790:	f000 fe5b 	bl	800b44a <__any_on>
 800a794:	2800      	cmp	r0, #0
 800a796:	d1e6      	bne.n	800a766 <__gethex+0x2ba>
 800a798:	4621      	mov	r1, r4
 800a79a:	9802      	ldr	r0, [sp, #8]
 800a79c:	f000 f9fe 	bl	800ab9c <_Bfree>
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7a4:	2750      	movs	r7, #80	; 0x50
 800a7a6:	6013      	str	r3, [r2, #0]
 800a7a8:	e712      	b.n	800a5d0 <__gethex+0x124>
 800a7aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d1f3      	bne.n	800a798 <__gethex+0x2ec>
 800a7b0:	e7d9      	b.n	800a766 <__gethex+0x2ba>
 800a7b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d1d6      	bne.n	800a766 <__gethex+0x2ba>
 800a7b8:	e7ee      	b.n	800a798 <__gethex+0x2ec>
 800a7ba:	1e6f      	subs	r7, r5, #1
 800a7bc:	f1ba 0f00 	cmp.w	sl, #0
 800a7c0:	d132      	bne.n	800a828 <__gethex+0x37c>
 800a7c2:	b127      	cbz	r7, 800a7ce <__gethex+0x322>
 800a7c4:	4639      	mov	r1, r7
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f000 fe3f 	bl	800b44a <__any_on>
 800a7cc:	4682      	mov	sl, r0
 800a7ce:	2101      	movs	r1, #1
 800a7d0:	117b      	asrs	r3, r7, #5
 800a7d2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a7d6:	f007 071f 	and.w	r7, r7, #31
 800a7da:	fa01 f707 	lsl.w	r7, r1, r7
 800a7de:	421f      	tst	r7, r3
 800a7e0:	f04f 0702 	mov.w	r7, #2
 800a7e4:	4629      	mov	r1, r5
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	bf18      	it	ne
 800a7ea:	f04a 0a02 	orrne.w	sl, sl, #2
 800a7ee:	1b76      	subs	r6, r6, r5
 800a7f0:	f7ff fdf4 	bl	800a3dc <rshift>
 800a7f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a7f8:	f1ba 0f00 	cmp.w	sl, #0
 800a7fc:	d048      	beq.n	800a890 <__gethex+0x3e4>
 800a7fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a802:	2b02      	cmp	r3, #2
 800a804:	d015      	beq.n	800a832 <__gethex+0x386>
 800a806:	2b03      	cmp	r3, #3
 800a808:	d017      	beq.n	800a83a <__gethex+0x38e>
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d109      	bne.n	800a822 <__gethex+0x376>
 800a80e:	f01a 0f02 	tst.w	sl, #2
 800a812:	d006      	beq.n	800a822 <__gethex+0x376>
 800a814:	f8d9 0000 	ldr.w	r0, [r9]
 800a818:	ea4a 0a00 	orr.w	sl, sl, r0
 800a81c:	f01a 0f01 	tst.w	sl, #1
 800a820:	d10e      	bne.n	800a840 <__gethex+0x394>
 800a822:	f047 0710 	orr.w	r7, r7, #16
 800a826:	e033      	b.n	800a890 <__gethex+0x3e4>
 800a828:	f04f 0a01 	mov.w	sl, #1
 800a82c:	e7cf      	b.n	800a7ce <__gethex+0x322>
 800a82e:	2701      	movs	r7, #1
 800a830:	e7e2      	b.n	800a7f8 <__gethex+0x34c>
 800a832:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a834:	f1c3 0301 	rsb	r3, r3, #1
 800a838:	9315      	str	r3, [sp, #84]	; 0x54
 800a83a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d0f0      	beq.n	800a822 <__gethex+0x376>
 800a840:	f04f 0c00 	mov.w	ip, #0
 800a844:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a848:	f104 0314 	add.w	r3, r4, #20
 800a84c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a850:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a854:	4618      	mov	r0, r3
 800a856:	f853 2b04 	ldr.w	r2, [r3], #4
 800a85a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a85e:	d01c      	beq.n	800a89a <__gethex+0x3ee>
 800a860:	3201      	adds	r2, #1
 800a862:	6002      	str	r2, [r0, #0]
 800a864:	2f02      	cmp	r7, #2
 800a866:	f104 0314 	add.w	r3, r4, #20
 800a86a:	d13d      	bne.n	800a8e8 <__gethex+0x43c>
 800a86c:	f8d8 2000 	ldr.w	r2, [r8]
 800a870:	3a01      	subs	r2, #1
 800a872:	42b2      	cmp	r2, r6
 800a874:	d10a      	bne.n	800a88c <__gethex+0x3e0>
 800a876:	2201      	movs	r2, #1
 800a878:	1171      	asrs	r1, r6, #5
 800a87a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a87e:	f006 061f 	and.w	r6, r6, #31
 800a882:	fa02 f606 	lsl.w	r6, r2, r6
 800a886:	421e      	tst	r6, r3
 800a888:	bf18      	it	ne
 800a88a:	4617      	movne	r7, r2
 800a88c:	f047 0720 	orr.w	r7, r7, #32
 800a890:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a892:	601c      	str	r4, [r3, #0]
 800a894:	9b05      	ldr	r3, [sp, #20]
 800a896:	601d      	str	r5, [r3, #0]
 800a898:	e69a      	b.n	800a5d0 <__gethex+0x124>
 800a89a:	4299      	cmp	r1, r3
 800a89c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a8a0:	d8d8      	bhi.n	800a854 <__gethex+0x3a8>
 800a8a2:	68a3      	ldr	r3, [r4, #8]
 800a8a4:	459b      	cmp	fp, r3
 800a8a6:	db17      	blt.n	800a8d8 <__gethex+0x42c>
 800a8a8:	6861      	ldr	r1, [r4, #4]
 800a8aa:	9802      	ldr	r0, [sp, #8]
 800a8ac:	3101      	adds	r1, #1
 800a8ae:	f000 f935 	bl	800ab1c <_Balloc>
 800a8b2:	4681      	mov	r9, r0
 800a8b4:	b918      	cbnz	r0, 800a8be <__gethex+0x412>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	2184      	movs	r1, #132	; 0x84
 800a8ba:	4b19      	ldr	r3, [pc, #100]	; (800a920 <__gethex+0x474>)
 800a8bc:	e6ab      	b.n	800a616 <__gethex+0x16a>
 800a8be:	6922      	ldr	r2, [r4, #16]
 800a8c0:	f104 010c 	add.w	r1, r4, #12
 800a8c4:	3202      	adds	r2, #2
 800a8c6:	0092      	lsls	r2, r2, #2
 800a8c8:	300c      	adds	r0, #12
 800a8ca:	f000 f919 	bl	800ab00 <memcpy>
 800a8ce:	4621      	mov	r1, r4
 800a8d0:	9802      	ldr	r0, [sp, #8]
 800a8d2:	f000 f963 	bl	800ab9c <_Bfree>
 800a8d6:	464c      	mov	r4, r9
 800a8d8:	6923      	ldr	r3, [r4, #16]
 800a8da:	1c5a      	adds	r2, r3, #1
 800a8dc:	6122      	str	r2, [r4, #16]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a8e4:	615a      	str	r2, [r3, #20]
 800a8e6:	e7bd      	b.n	800a864 <__gethex+0x3b8>
 800a8e8:	6922      	ldr	r2, [r4, #16]
 800a8ea:	455a      	cmp	r2, fp
 800a8ec:	dd0b      	ble.n	800a906 <__gethex+0x45a>
 800a8ee:	2101      	movs	r1, #1
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	f7ff fd73 	bl	800a3dc <rshift>
 800a8f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8fa:	3501      	adds	r5, #1
 800a8fc:	42ab      	cmp	r3, r5
 800a8fe:	f6ff aed4 	blt.w	800a6aa <__gethex+0x1fe>
 800a902:	2701      	movs	r7, #1
 800a904:	e7c2      	b.n	800a88c <__gethex+0x3e0>
 800a906:	f016 061f 	ands.w	r6, r6, #31
 800a90a:	d0fa      	beq.n	800a902 <__gethex+0x456>
 800a90c:	4453      	add	r3, sl
 800a90e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a912:	f000 f9f5 	bl	800ad00 <__hi0bits>
 800a916:	f1c6 0620 	rsb	r6, r6, #32
 800a91a:	42b0      	cmp	r0, r6
 800a91c:	dbe7      	blt.n	800a8ee <__gethex+0x442>
 800a91e:	e7f0      	b.n	800a902 <__gethex+0x456>
 800a920:	0801e100 	.word	0x0801e100

0800a924 <L_shift>:
 800a924:	f1c2 0208 	rsb	r2, r2, #8
 800a928:	0092      	lsls	r2, r2, #2
 800a92a:	b570      	push	{r4, r5, r6, lr}
 800a92c:	f1c2 0620 	rsb	r6, r2, #32
 800a930:	6843      	ldr	r3, [r0, #4]
 800a932:	6804      	ldr	r4, [r0, #0]
 800a934:	fa03 f506 	lsl.w	r5, r3, r6
 800a938:	432c      	orrs	r4, r5
 800a93a:	40d3      	lsrs	r3, r2
 800a93c:	6004      	str	r4, [r0, #0]
 800a93e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a942:	4288      	cmp	r0, r1
 800a944:	d3f4      	bcc.n	800a930 <L_shift+0xc>
 800a946:	bd70      	pop	{r4, r5, r6, pc}

0800a948 <__match>:
 800a948:	b530      	push	{r4, r5, lr}
 800a94a:	6803      	ldr	r3, [r0, #0]
 800a94c:	3301      	adds	r3, #1
 800a94e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a952:	b914      	cbnz	r4, 800a95a <__match+0x12>
 800a954:	6003      	str	r3, [r0, #0]
 800a956:	2001      	movs	r0, #1
 800a958:	bd30      	pop	{r4, r5, pc}
 800a95a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a95e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a962:	2d19      	cmp	r5, #25
 800a964:	bf98      	it	ls
 800a966:	3220      	addls	r2, #32
 800a968:	42a2      	cmp	r2, r4
 800a96a:	d0f0      	beq.n	800a94e <__match+0x6>
 800a96c:	2000      	movs	r0, #0
 800a96e:	e7f3      	b.n	800a958 <__match+0x10>

0800a970 <__hexnan>:
 800a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a974:	2500      	movs	r5, #0
 800a976:	680b      	ldr	r3, [r1, #0]
 800a978:	4682      	mov	sl, r0
 800a97a:	115e      	asrs	r6, r3, #5
 800a97c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a980:	f013 031f 	ands.w	r3, r3, #31
 800a984:	bf18      	it	ne
 800a986:	3604      	addne	r6, #4
 800a988:	1f37      	subs	r7, r6, #4
 800a98a:	46b9      	mov	r9, r7
 800a98c:	463c      	mov	r4, r7
 800a98e:	46ab      	mov	fp, r5
 800a990:	b087      	sub	sp, #28
 800a992:	4690      	mov	r8, r2
 800a994:	6802      	ldr	r2, [r0, #0]
 800a996:	9301      	str	r3, [sp, #4]
 800a998:	f846 5c04 	str.w	r5, [r6, #-4]
 800a99c:	9502      	str	r5, [sp, #8]
 800a99e:	7851      	ldrb	r1, [r2, #1]
 800a9a0:	1c53      	adds	r3, r2, #1
 800a9a2:	9303      	str	r3, [sp, #12]
 800a9a4:	b341      	cbz	r1, 800a9f8 <__hexnan+0x88>
 800a9a6:	4608      	mov	r0, r1
 800a9a8:	9205      	str	r2, [sp, #20]
 800a9aa:	9104      	str	r1, [sp, #16]
 800a9ac:	f7ff fd69 	bl	800a482 <__hexdig_fun>
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	d14f      	bne.n	800aa54 <__hexnan+0xe4>
 800a9b4:	9904      	ldr	r1, [sp, #16]
 800a9b6:	9a05      	ldr	r2, [sp, #20]
 800a9b8:	2920      	cmp	r1, #32
 800a9ba:	d818      	bhi.n	800a9ee <__hexnan+0x7e>
 800a9bc:	9b02      	ldr	r3, [sp, #8]
 800a9be:	459b      	cmp	fp, r3
 800a9c0:	dd13      	ble.n	800a9ea <__hexnan+0x7a>
 800a9c2:	454c      	cmp	r4, r9
 800a9c4:	d206      	bcs.n	800a9d4 <__hexnan+0x64>
 800a9c6:	2d07      	cmp	r5, #7
 800a9c8:	dc04      	bgt.n	800a9d4 <__hexnan+0x64>
 800a9ca:	462a      	mov	r2, r5
 800a9cc:	4649      	mov	r1, r9
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f7ff ffa8 	bl	800a924 <L_shift>
 800a9d4:	4544      	cmp	r4, r8
 800a9d6:	d950      	bls.n	800aa7a <__hexnan+0x10a>
 800a9d8:	2300      	movs	r3, #0
 800a9da:	f1a4 0904 	sub.w	r9, r4, #4
 800a9de:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9e2:	461d      	mov	r5, r3
 800a9e4:	464c      	mov	r4, r9
 800a9e6:	f8cd b008 	str.w	fp, [sp, #8]
 800a9ea:	9a03      	ldr	r2, [sp, #12]
 800a9ec:	e7d7      	b.n	800a99e <__hexnan+0x2e>
 800a9ee:	2929      	cmp	r1, #41	; 0x29
 800a9f0:	d156      	bne.n	800aaa0 <__hexnan+0x130>
 800a9f2:	3202      	adds	r2, #2
 800a9f4:	f8ca 2000 	str.w	r2, [sl]
 800a9f8:	f1bb 0f00 	cmp.w	fp, #0
 800a9fc:	d050      	beq.n	800aaa0 <__hexnan+0x130>
 800a9fe:	454c      	cmp	r4, r9
 800aa00:	d206      	bcs.n	800aa10 <__hexnan+0xa0>
 800aa02:	2d07      	cmp	r5, #7
 800aa04:	dc04      	bgt.n	800aa10 <__hexnan+0xa0>
 800aa06:	462a      	mov	r2, r5
 800aa08:	4649      	mov	r1, r9
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	f7ff ff8a 	bl	800a924 <L_shift>
 800aa10:	4544      	cmp	r4, r8
 800aa12:	d934      	bls.n	800aa7e <__hexnan+0x10e>
 800aa14:	4623      	mov	r3, r4
 800aa16:	f1a8 0204 	sub.w	r2, r8, #4
 800aa1a:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa1e:	429f      	cmp	r7, r3
 800aa20:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa24:	d2f9      	bcs.n	800aa1a <__hexnan+0xaa>
 800aa26:	1b3b      	subs	r3, r7, r4
 800aa28:	f023 0303 	bic.w	r3, r3, #3
 800aa2c:	3304      	adds	r3, #4
 800aa2e:	3401      	adds	r4, #1
 800aa30:	3e03      	subs	r6, #3
 800aa32:	42b4      	cmp	r4, r6
 800aa34:	bf88      	it	hi
 800aa36:	2304      	movhi	r3, #4
 800aa38:	2200      	movs	r2, #0
 800aa3a:	4443      	add	r3, r8
 800aa3c:	f843 2b04 	str.w	r2, [r3], #4
 800aa40:	429f      	cmp	r7, r3
 800aa42:	d2fb      	bcs.n	800aa3c <__hexnan+0xcc>
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	b91b      	cbnz	r3, 800aa50 <__hexnan+0xe0>
 800aa48:	4547      	cmp	r7, r8
 800aa4a:	d127      	bne.n	800aa9c <__hexnan+0x12c>
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	603b      	str	r3, [r7, #0]
 800aa50:	2005      	movs	r0, #5
 800aa52:	e026      	b.n	800aaa2 <__hexnan+0x132>
 800aa54:	3501      	adds	r5, #1
 800aa56:	2d08      	cmp	r5, #8
 800aa58:	f10b 0b01 	add.w	fp, fp, #1
 800aa5c:	dd06      	ble.n	800aa6c <__hexnan+0xfc>
 800aa5e:	4544      	cmp	r4, r8
 800aa60:	d9c3      	bls.n	800a9ea <__hexnan+0x7a>
 800aa62:	2300      	movs	r3, #0
 800aa64:	2501      	movs	r5, #1
 800aa66:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa6a:	3c04      	subs	r4, #4
 800aa6c:	6822      	ldr	r2, [r4, #0]
 800aa6e:	f000 000f 	and.w	r0, r0, #15
 800aa72:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aa76:	6022      	str	r2, [r4, #0]
 800aa78:	e7b7      	b.n	800a9ea <__hexnan+0x7a>
 800aa7a:	2508      	movs	r5, #8
 800aa7c:	e7b5      	b.n	800a9ea <__hexnan+0x7a>
 800aa7e:	9b01      	ldr	r3, [sp, #4]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d0df      	beq.n	800aa44 <__hexnan+0xd4>
 800aa84:	f04f 32ff 	mov.w	r2, #4294967295
 800aa88:	f1c3 0320 	rsb	r3, r3, #32
 800aa8c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa90:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa94:	401a      	ands	r2, r3
 800aa96:	f846 2c04 	str.w	r2, [r6, #-4]
 800aa9a:	e7d3      	b.n	800aa44 <__hexnan+0xd4>
 800aa9c:	3f04      	subs	r7, #4
 800aa9e:	e7d1      	b.n	800aa44 <__hexnan+0xd4>
 800aaa0:	2004      	movs	r0, #4
 800aaa2:	b007      	add	sp, #28
 800aaa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aaa8 <_localeconv_r>:
 800aaa8:	4800      	ldr	r0, [pc, #0]	; (800aaac <_localeconv_r+0x4>)
 800aaaa:	4770      	bx	lr
 800aaac:	20000164 	.word	0x20000164

0800aab0 <malloc>:
 800aab0:	4b02      	ldr	r3, [pc, #8]	; (800aabc <malloc+0xc>)
 800aab2:	4601      	mov	r1, r0
 800aab4:	6818      	ldr	r0, [r3, #0]
 800aab6:	f000 bd65 	b.w	800b584 <_malloc_r>
 800aaba:	bf00      	nop
 800aabc:	2000000c 	.word	0x2000000c

0800aac0 <__ascii_mbtowc>:
 800aac0:	b082      	sub	sp, #8
 800aac2:	b901      	cbnz	r1, 800aac6 <__ascii_mbtowc+0x6>
 800aac4:	a901      	add	r1, sp, #4
 800aac6:	b142      	cbz	r2, 800aada <__ascii_mbtowc+0x1a>
 800aac8:	b14b      	cbz	r3, 800aade <__ascii_mbtowc+0x1e>
 800aaca:	7813      	ldrb	r3, [r2, #0]
 800aacc:	600b      	str	r3, [r1, #0]
 800aace:	7812      	ldrb	r2, [r2, #0]
 800aad0:	1e10      	subs	r0, r2, #0
 800aad2:	bf18      	it	ne
 800aad4:	2001      	movne	r0, #1
 800aad6:	b002      	add	sp, #8
 800aad8:	4770      	bx	lr
 800aada:	4610      	mov	r0, r2
 800aadc:	e7fb      	b.n	800aad6 <__ascii_mbtowc+0x16>
 800aade:	f06f 0001 	mvn.w	r0, #1
 800aae2:	e7f8      	b.n	800aad6 <__ascii_mbtowc+0x16>

0800aae4 <memchr>:
 800aae4:	4603      	mov	r3, r0
 800aae6:	b510      	push	{r4, lr}
 800aae8:	b2c9      	uxtb	r1, r1
 800aaea:	4402      	add	r2, r0
 800aaec:	4293      	cmp	r3, r2
 800aaee:	4618      	mov	r0, r3
 800aaf0:	d101      	bne.n	800aaf6 <memchr+0x12>
 800aaf2:	2000      	movs	r0, #0
 800aaf4:	e003      	b.n	800aafe <memchr+0x1a>
 800aaf6:	7804      	ldrb	r4, [r0, #0]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	428c      	cmp	r4, r1
 800aafc:	d1f6      	bne.n	800aaec <memchr+0x8>
 800aafe:	bd10      	pop	{r4, pc}

0800ab00 <memcpy>:
 800ab00:	440a      	add	r2, r1
 800ab02:	4291      	cmp	r1, r2
 800ab04:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab08:	d100      	bne.n	800ab0c <memcpy+0xc>
 800ab0a:	4770      	bx	lr
 800ab0c:	b510      	push	{r4, lr}
 800ab0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab12:	4291      	cmp	r1, r2
 800ab14:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab18:	d1f9      	bne.n	800ab0e <memcpy+0xe>
 800ab1a:	bd10      	pop	{r4, pc}

0800ab1c <_Balloc>:
 800ab1c:	b570      	push	{r4, r5, r6, lr}
 800ab1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab20:	4604      	mov	r4, r0
 800ab22:	460d      	mov	r5, r1
 800ab24:	b976      	cbnz	r6, 800ab44 <_Balloc+0x28>
 800ab26:	2010      	movs	r0, #16
 800ab28:	f7ff ffc2 	bl	800aab0 <malloc>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	6260      	str	r0, [r4, #36]	; 0x24
 800ab30:	b920      	cbnz	r0, 800ab3c <_Balloc+0x20>
 800ab32:	2166      	movs	r1, #102	; 0x66
 800ab34:	4b17      	ldr	r3, [pc, #92]	; (800ab94 <_Balloc+0x78>)
 800ab36:	4818      	ldr	r0, [pc, #96]	; (800ab98 <_Balloc+0x7c>)
 800ab38:	f000 ff2c 	bl	800b994 <__assert_func>
 800ab3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab40:	6006      	str	r6, [r0, #0]
 800ab42:	60c6      	str	r6, [r0, #12]
 800ab44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab46:	68f3      	ldr	r3, [r6, #12]
 800ab48:	b183      	cbz	r3, 800ab6c <_Balloc+0x50>
 800ab4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab52:	b9b8      	cbnz	r0, 800ab84 <_Balloc+0x68>
 800ab54:	2101      	movs	r1, #1
 800ab56:	fa01 f605 	lsl.w	r6, r1, r5
 800ab5a:	1d72      	adds	r2, r6, #5
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	0092      	lsls	r2, r2, #2
 800ab60:	f000 fc94 	bl	800b48c <_calloc_r>
 800ab64:	b160      	cbz	r0, 800ab80 <_Balloc+0x64>
 800ab66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab6a:	e00e      	b.n	800ab8a <_Balloc+0x6e>
 800ab6c:	2221      	movs	r2, #33	; 0x21
 800ab6e:	2104      	movs	r1, #4
 800ab70:	4620      	mov	r0, r4
 800ab72:	f000 fc8b 	bl	800b48c <_calloc_r>
 800ab76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab78:	60f0      	str	r0, [r6, #12]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d1e4      	bne.n	800ab4a <_Balloc+0x2e>
 800ab80:	2000      	movs	r0, #0
 800ab82:	bd70      	pop	{r4, r5, r6, pc}
 800ab84:	6802      	ldr	r2, [r0, #0]
 800ab86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab90:	e7f7      	b.n	800ab82 <_Balloc+0x66>
 800ab92:	bf00      	nop
 800ab94:	0801e08e 	.word	0x0801e08e
 800ab98:	0801e18c 	.word	0x0801e18c

0800ab9c <_Bfree>:
 800ab9c:	b570      	push	{r4, r5, r6, lr}
 800ab9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aba0:	4605      	mov	r5, r0
 800aba2:	460c      	mov	r4, r1
 800aba4:	b976      	cbnz	r6, 800abc4 <_Bfree+0x28>
 800aba6:	2010      	movs	r0, #16
 800aba8:	f7ff ff82 	bl	800aab0 <malloc>
 800abac:	4602      	mov	r2, r0
 800abae:	6268      	str	r0, [r5, #36]	; 0x24
 800abb0:	b920      	cbnz	r0, 800abbc <_Bfree+0x20>
 800abb2:	218a      	movs	r1, #138	; 0x8a
 800abb4:	4b08      	ldr	r3, [pc, #32]	; (800abd8 <_Bfree+0x3c>)
 800abb6:	4809      	ldr	r0, [pc, #36]	; (800abdc <_Bfree+0x40>)
 800abb8:	f000 feec 	bl	800b994 <__assert_func>
 800abbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abc0:	6006      	str	r6, [r0, #0]
 800abc2:	60c6      	str	r6, [r0, #12]
 800abc4:	b13c      	cbz	r4, 800abd6 <_Bfree+0x3a>
 800abc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800abc8:	6862      	ldr	r2, [r4, #4]
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abd0:	6021      	str	r1, [r4, #0]
 800abd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800abd6:	bd70      	pop	{r4, r5, r6, pc}
 800abd8:	0801e08e 	.word	0x0801e08e
 800abdc:	0801e18c 	.word	0x0801e18c

0800abe0 <__multadd>:
 800abe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe4:	4607      	mov	r7, r0
 800abe6:	460c      	mov	r4, r1
 800abe8:	461e      	mov	r6, r3
 800abea:	2000      	movs	r0, #0
 800abec:	690d      	ldr	r5, [r1, #16]
 800abee:	f101 0c14 	add.w	ip, r1, #20
 800abf2:	f8dc 3000 	ldr.w	r3, [ip]
 800abf6:	3001      	adds	r0, #1
 800abf8:	b299      	uxth	r1, r3
 800abfa:	fb02 6101 	mla	r1, r2, r1, r6
 800abfe:	0c1e      	lsrs	r6, r3, #16
 800ac00:	0c0b      	lsrs	r3, r1, #16
 800ac02:	fb02 3306 	mla	r3, r2, r6, r3
 800ac06:	b289      	uxth	r1, r1
 800ac08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac0c:	4285      	cmp	r5, r0
 800ac0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac12:	f84c 1b04 	str.w	r1, [ip], #4
 800ac16:	dcec      	bgt.n	800abf2 <__multadd+0x12>
 800ac18:	b30e      	cbz	r6, 800ac5e <__multadd+0x7e>
 800ac1a:	68a3      	ldr	r3, [r4, #8]
 800ac1c:	42ab      	cmp	r3, r5
 800ac1e:	dc19      	bgt.n	800ac54 <__multadd+0x74>
 800ac20:	6861      	ldr	r1, [r4, #4]
 800ac22:	4638      	mov	r0, r7
 800ac24:	3101      	adds	r1, #1
 800ac26:	f7ff ff79 	bl	800ab1c <_Balloc>
 800ac2a:	4680      	mov	r8, r0
 800ac2c:	b928      	cbnz	r0, 800ac3a <__multadd+0x5a>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	21b5      	movs	r1, #181	; 0xb5
 800ac32:	4b0c      	ldr	r3, [pc, #48]	; (800ac64 <__multadd+0x84>)
 800ac34:	480c      	ldr	r0, [pc, #48]	; (800ac68 <__multadd+0x88>)
 800ac36:	f000 fead 	bl	800b994 <__assert_func>
 800ac3a:	6922      	ldr	r2, [r4, #16]
 800ac3c:	f104 010c 	add.w	r1, r4, #12
 800ac40:	3202      	adds	r2, #2
 800ac42:	0092      	lsls	r2, r2, #2
 800ac44:	300c      	adds	r0, #12
 800ac46:	f7ff ff5b 	bl	800ab00 <memcpy>
 800ac4a:	4621      	mov	r1, r4
 800ac4c:	4638      	mov	r0, r7
 800ac4e:	f7ff ffa5 	bl	800ab9c <_Bfree>
 800ac52:	4644      	mov	r4, r8
 800ac54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac58:	3501      	adds	r5, #1
 800ac5a:	615e      	str	r6, [r3, #20]
 800ac5c:	6125      	str	r5, [r4, #16]
 800ac5e:	4620      	mov	r0, r4
 800ac60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac64:	0801e100 	.word	0x0801e100
 800ac68:	0801e18c 	.word	0x0801e18c

0800ac6c <__s2b>:
 800ac6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac70:	4615      	mov	r5, r2
 800ac72:	2209      	movs	r2, #9
 800ac74:	461f      	mov	r7, r3
 800ac76:	3308      	adds	r3, #8
 800ac78:	460c      	mov	r4, r1
 800ac7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac7e:	4606      	mov	r6, r0
 800ac80:	2201      	movs	r2, #1
 800ac82:	2100      	movs	r1, #0
 800ac84:	429a      	cmp	r2, r3
 800ac86:	db09      	blt.n	800ac9c <__s2b+0x30>
 800ac88:	4630      	mov	r0, r6
 800ac8a:	f7ff ff47 	bl	800ab1c <_Balloc>
 800ac8e:	b940      	cbnz	r0, 800aca2 <__s2b+0x36>
 800ac90:	4602      	mov	r2, r0
 800ac92:	21ce      	movs	r1, #206	; 0xce
 800ac94:	4b18      	ldr	r3, [pc, #96]	; (800acf8 <__s2b+0x8c>)
 800ac96:	4819      	ldr	r0, [pc, #100]	; (800acfc <__s2b+0x90>)
 800ac98:	f000 fe7c 	bl	800b994 <__assert_func>
 800ac9c:	0052      	lsls	r2, r2, #1
 800ac9e:	3101      	adds	r1, #1
 800aca0:	e7f0      	b.n	800ac84 <__s2b+0x18>
 800aca2:	9b08      	ldr	r3, [sp, #32]
 800aca4:	2d09      	cmp	r5, #9
 800aca6:	6143      	str	r3, [r0, #20]
 800aca8:	f04f 0301 	mov.w	r3, #1
 800acac:	6103      	str	r3, [r0, #16]
 800acae:	dd16      	ble.n	800acde <__s2b+0x72>
 800acb0:	f104 0909 	add.w	r9, r4, #9
 800acb4:	46c8      	mov	r8, r9
 800acb6:	442c      	add	r4, r5
 800acb8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800acbc:	4601      	mov	r1, r0
 800acbe:	220a      	movs	r2, #10
 800acc0:	4630      	mov	r0, r6
 800acc2:	3b30      	subs	r3, #48	; 0x30
 800acc4:	f7ff ff8c 	bl	800abe0 <__multadd>
 800acc8:	45a0      	cmp	r8, r4
 800acca:	d1f5      	bne.n	800acb8 <__s2b+0x4c>
 800accc:	f1a5 0408 	sub.w	r4, r5, #8
 800acd0:	444c      	add	r4, r9
 800acd2:	1b2d      	subs	r5, r5, r4
 800acd4:	1963      	adds	r3, r4, r5
 800acd6:	42bb      	cmp	r3, r7
 800acd8:	db04      	blt.n	800ace4 <__s2b+0x78>
 800acda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acde:	2509      	movs	r5, #9
 800ace0:	340a      	adds	r4, #10
 800ace2:	e7f6      	b.n	800acd2 <__s2b+0x66>
 800ace4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ace8:	4601      	mov	r1, r0
 800acea:	220a      	movs	r2, #10
 800acec:	4630      	mov	r0, r6
 800acee:	3b30      	subs	r3, #48	; 0x30
 800acf0:	f7ff ff76 	bl	800abe0 <__multadd>
 800acf4:	e7ee      	b.n	800acd4 <__s2b+0x68>
 800acf6:	bf00      	nop
 800acf8:	0801e100 	.word	0x0801e100
 800acfc:	0801e18c 	.word	0x0801e18c

0800ad00 <__hi0bits>:
 800ad00:	0c02      	lsrs	r2, r0, #16
 800ad02:	0412      	lsls	r2, r2, #16
 800ad04:	4603      	mov	r3, r0
 800ad06:	b9ca      	cbnz	r2, 800ad3c <__hi0bits+0x3c>
 800ad08:	0403      	lsls	r3, r0, #16
 800ad0a:	2010      	movs	r0, #16
 800ad0c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ad10:	bf04      	itt	eq
 800ad12:	021b      	lsleq	r3, r3, #8
 800ad14:	3008      	addeq	r0, #8
 800ad16:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ad1a:	bf04      	itt	eq
 800ad1c:	011b      	lsleq	r3, r3, #4
 800ad1e:	3004      	addeq	r0, #4
 800ad20:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ad24:	bf04      	itt	eq
 800ad26:	009b      	lsleq	r3, r3, #2
 800ad28:	3002      	addeq	r0, #2
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	db05      	blt.n	800ad3a <__hi0bits+0x3a>
 800ad2e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ad32:	f100 0001 	add.w	r0, r0, #1
 800ad36:	bf08      	it	eq
 800ad38:	2020      	moveq	r0, #32
 800ad3a:	4770      	bx	lr
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	e7e5      	b.n	800ad0c <__hi0bits+0xc>

0800ad40 <__lo0bits>:
 800ad40:	6803      	ldr	r3, [r0, #0]
 800ad42:	4602      	mov	r2, r0
 800ad44:	f013 0007 	ands.w	r0, r3, #7
 800ad48:	d00b      	beq.n	800ad62 <__lo0bits+0x22>
 800ad4a:	07d9      	lsls	r1, r3, #31
 800ad4c:	d421      	bmi.n	800ad92 <__lo0bits+0x52>
 800ad4e:	0798      	lsls	r0, r3, #30
 800ad50:	bf49      	itett	mi
 800ad52:	085b      	lsrmi	r3, r3, #1
 800ad54:	089b      	lsrpl	r3, r3, #2
 800ad56:	2001      	movmi	r0, #1
 800ad58:	6013      	strmi	r3, [r2, #0]
 800ad5a:	bf5c      	itt	pl
 800ad5c:	2002      	movpl	r0, #2
 800ad5e:	6013      	strpl	r3, [r2, #0]
 800ad60:	4770      	bx	lr
 800ad62:	b299      	uxth	r1, r3
 800ad64:	b909      	cbnz	r1, 800ad6a <__lo0bits+0x2a>
 800ad66:	2010      	movs	r0, #16
 800ad68:	0c1b      	lsrs	r3, r3, #16
 800ad6a:	b2d9      	uxtb	r1, r3
 800ad6c:	b909      	cbnz	r1, 800ad72 <__lo0bits+0x32>
 800ad6e:	3008      	adds	r0, #8
 800ad70:	0a1b      	lsrs	r3, r3, #8
 800ad72:	0719      	lsls	r1, r3, #28
 800ad74:	bf04      	itt	eq
 800ad76:	091b      	lsreq	r3, r3, #4
 800ad78:	3004      	addeq	r0, #4
 800ad7a:	0799      	lsls	r1, r3, #30
 800ad7c:	bf04      	itt	eq
 800ad7e:	089b      	lsreq	r3, r3, #2
 800ad80:	3002      	addeq	r0, #2
 800ad82:	07d9      	lsls	r1, r3, #31
 800ad84:	d403      	bmi.n	800ad8e <__lo0bits+0x4e>
 800ad86:	085b      	lsrs	r3, r3, #1
 800ad88:	f100 0001 	add.w	r0, r0, #1
 800ad8c:	d003      	beq.n	800ad96 <__lo0bits+0x56>
 800ad8e:	6013      	str	r3, [r2, #0]
 800ad90:	4770      	bx	lr
 800ad92:	2000      	movs	r0, #0
 800ad94:	4770      	bx	lr
 800ad96:	2020      	movs	r0, #32
 800ad98:	4770      	bx	lr
	...

0800ad9c <__i2b>:
 800ad9c:	b510      	push	{r4, lr}
 800ad9e:	460c      	mov	r4, r1
 800ada0:	2101      	movs	r1, #1
 800ada2:	f7ff febb 	bl	800ab1c <_Balloc>
 800ada6:	4602      	mov	r2, r0
 800ada8:	b928      	cbnz	r0, 800adb6 <__i2b+0x1a>
 800adaa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800adae:	4b04      	ldr	r3, [pc, #16]	; (800adc0 <__i2b+0x24>)
 800adb0:	4804      	ldr	r0, [pc, #16]	; (800adc4 <__i2b+0x28>)
 800adb2:	f000 fdef 	bl	800b994 <__assert_func>
 800adb6:	2301      	movs	r3, #1
 800adb8:	6144      	str	r4, [r0, #20]
 800adba:	6103      	str	r3, [r0, #16]
 800adbc:	bd10      	pop	{r4, pc}
 800adbe:	bf00      	nop
 800adc0:	0801e100 	.word	0x0801e100
 800adc4:	0801e18c 	.word	0x0801e18c

0800adc8 <__multiply>:
 800adc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adcc:	4691      	mov	r9, r2
 800adce:	690a      	ldr	r2, [r1, #16]
 800add0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800add4:	460c      	mov	r4, r1
 800add6:	429a      	cmp	r2, r3
 800add8:	bfbe      	ittt	lt
 800adda:	460b      	movlt	r3, r1
 800addc:	464c      	movlt	r4, r9
 800adde:	4699      	movlt	r9, r3
 800ade0:	6927      	ldr	r7, [r4, #16]
 800ade2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ade6:	68a3      	ldr	r3, [r4, #8]
 800ade8:	6861      	ldr	r1, [r4, #4]
 800adea:	eb07 060a 	add.w	r6, r7, sl
 800adee:	42b3      	cmp	r3, r6
 800adf0:	b085      	sub	sp, #20
 800adf2:	bfb8      	it	lt
 800adf4:	3101      	addlt	r1, #1
 800adf6:	f7ff fe91 	bl	800ab1c <_Balloc>
 800adfa:	b930      	cbnz	r0, 800ae0a <__multiply+0x42>
 800adfc:	4602      	mov	r2, r0
 800adfe:	f240 115d 	movw	r1, #349	; 0x15d
 800ae02:	4b43      	ldr	r3, [pc, #268]	; (800af10 <__multiply+0x148>)
 800ae04:	4843      	ldr	r0, [pc, #268]	; (800af14 <__multiply+0x14c>)
 800ae06:	f000 fdc5 	bl	800b994 <__assert_func>
 800ae0a:	f100 0514 	add.w	r5, r0, #20
 800ae0e:	462b      	mov	r3, r5
 800ae10:	2200      	movs	r2, #0
 800ae12:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae16:	4543      	cmp	r3, r8
 800ae18:	d321      	bcc.n	800ae5e <__multiply+0x96>
 800ae1a:	f104 0314 	add.w	r3, r4, #20
 800ae1e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae22:	f109 0314 	add.w	r3, r9, #20
 800ae26:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae2a:	9202      	str	r2, [sp, #8]
 800ae2c:	1b3a      	subs	r2, r7, r4
 800ae2e:	3a15      	subs	r2, #21
 800ae30:	f022 0203 	bic.w	r2, r2, #3
 800ae34:	3204      	adds	r2, #4
 800ae36:	f104 0115 	add.w	r1, r4, #21
 800ae3a:	428f      	cmp	r7, r1
 800ae3c:	bf38      	it	cc
 800ae3e:	2204      	movcc	r2, #4
 800ae40:	9201      	str	r2, [sp, #4]
 800ae42:	9a02      	ldr	r2, [sp, #8]
 800ae44:	9303      	str	r3, [sp, #12]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d80c      	bhi.n	800ae64 <__multiply+0x9c>
 800ae4a:	2e00      	cmp	r6, #0
 800ae4c:	dd03      	ble.n	800ae56 <__multiply+0x8e>
 800ae4e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d059      	beq.n	800af0a <__multiply+0x142>
 800ae56:	6106      	str	r6, [r0, #16]
 800ae58:	b005      	add	sp, #20
 800ae5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae5e:	f843 2b04 	str.w	r2, [r3], #4
 800ae62:	e7d8      	b.n	800ae16 <__multiply+0x4e>
 800ae64:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae68:	f1ba 0f00 	cmp.w	sl, #0
 800ae6c:	d023      	beq.n	800aeb6 <__multiply+0xee>
 800ae6e:	46a9      	mov	r9, r5
 800ae70:	f04f 0c00 	mov.w	ip, #0
 800ae74:	f104 0e14 	add.w	lr, r4, #20
 800ae78:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae7c:	f8d9 1000 	ldr.w	r1, [r9]
 800ae80:	fa1f fb82 	uxth.w	fp, r2
 800ae84:	b289      	uxth	r1, r1
 800ae86:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae8a:	4461      	add	r1, ip
 800ae8c:	f8d9 c000 	ldr.w	ip, [r9]
 800ae90:	0c12      	lsrs	r2, r2, #16
 800ae92:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ae96:	fb0a c202 	mla	r2, sl, r2, ip
 800ae9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae9e:	b289      	uxth	r1, r1
 800aea0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aea4:	4577      	cmp	r7, lr
 800aea6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aeaa:	f849 1b04 	str.w	r1, [r9], #4
 800aeae:	d8e3      	bhi.n	800ae78 <__multiply+0xb0>
 800aeb0:	9a01      	ldr	r2, [sp, #4]
 800aeb2:	f845 c002 	str.w	ip, [r5, r2]
 800aeb6:	9a03      	ldr	r2, [sp, #12]
 800aeb8:	3304      	adds	r3, #4
 800aeba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aebe:	f1b9 0f00 	cmp.w	r9, #0
 800aec2:	d020      	beq.n	800af06 <__multiply+0x13e>
 800aec4:	46ae      	mov	lr, r5
 800aec6:	f04f 0a00 	mov.w	sl, #0
 800aeca:	6829      	ldr	r1, [r5, #0]
 800aecc:	f104 0c14 	add.w	ip, r4, #20
 800aed0:	f8bc b000 	ldrh.w	fp, [ip]
 800aed4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aed8:	b289      	uxth	r1, r1
 800aeda:	fb09 220b 	mla	r2, r9, fp, r2
 800aede:	4492      	add	sl, r2
 800aee0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aee4:	f84e 1b04 	str.w	r1, [lr], #4
 800aee8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aeec:	f8be 1000 	ldrh.w	r1, [lr]
 800aef0:	0c12      	lsrs	r2, r2, #16
 800aef2:	fb09 1102 	mla	r1, r9, r2, r1
 800aef6:	4567      	cmp	r7, ip
 800aef8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aefc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af00:	d8e6      	bhi.n	800aed0 <__multiply+0x108>
 800af02:	9a01      	ldr	r2, [sp, #4]
 800af04:	50a9      	str	r1, [r5, r2]
 800af06:	3504      	adds	r5, #4
 800af08:	e79b      	b.n	800ae42 <__multiply+0x7a>
 800af0a:	3e01      	subs	r6, #1
 800af0c:	e79d      	b.n	800ae4a <__multiply+0x82>
 800af0e:	bf00      	nop
 800af10:	0801e100 	.word	0x0801e100
 800af14:	0801e18c 	.word	0x0801e18c

0800af18 <__pow5mult>:
 800af18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af1c:	4615      	mov	r5, r2
 800af1e:	f012 0203 	ands.w	r2, r2, #3
 800af22:	4606      	mov	r6, r0
 800af24:	460f      	mov	r7, r1
 800af26:	d007      	beq.n	800af38 <__pow5mult+0x20>
 800af28:	4c25      	ldr	r4, [pc, #148]	; (800afc0 <__pow5mult+0xa8>)
 800af2a:	3a01      	subs	r2, #1
 800af2c:	2300      	movs	r3, #0
 800af2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af32:	f7ff fe55 	bl	800abe0 <__multadd>
 800af36:	4607      	mov	r7, r0
 800af38:	10ad      	asrs	r5, r5, #2
 800af3a:	d03d      	beq.n	800afb8 <__pow5mult+0xa0>
 800af3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af3e:	b97c      	cbnz	r4, 800af60 <__pow5mult+0x48>
 800af40:	2010      	movs	r0, #16
 800af42:	f7ff fdb5 	bl	800aab0 <malloc>
 800af46:	4602      	mov	r2, r0
 800af48:	6270      	str	r0, [r6, #36]	; 0x24
 800af4a:	b928      	cbnz	r0, 800af58 <__pow5mult+0x40>
 800af4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af50:	4b1c      	ldr	r3, [pc, #112]	; (800afc4 <__pow5mult+0xac>)
 800af52:	481d      	ldr	r0, [pc, #116]	; (800afc8 <__pow5mult+0xb0>)
 800af54:	f000 fd1e 	bl	800b994 <__assert_func>
 800af58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af5c:	6004      	str	r4, [r0, #0]
 800af5e:	60c4      	str	r4, [r0, #12]
 800af60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af68:	b94c      	cbnz	r4, 800af7e <__pow5mult+0x66>
 800af6a:	f240 2171 	movw	r1, #625	; 0x271
 800af6e:	4630      	mov	r0, r6
 800af70:	f7ff ff14 	bl	800ad9c <__i2b>
 800af74:	2300      	movs	r3, #0
 800af76:	4604      	mov	r4, r0
 800af78:	f8c8 0008 	str.w	r0, [r8, #8]
 800af7c:	6003      	str	r3, [r0, #0]
 800af7e:	f04f 0900 	mov.w	r9, #0
 800af82:	07eb      	lsls	r3, r5, #31
 800af84:	d50a      	bpl.n	800af9c <__pow5mult+0x84>
 800af86:	4639      	mov	r1, r7
 800af88:	4622      	mov	r2, r4
 800af8a:	4630      	mov	r0, r6
 800af8c:	f7ff ff1c 	bl	800adc8 <__multiply>
 800af90:	4680      	mov	r8, r0
 800af92:	4639      	mov	r1, r7
 800af94:	4630      	mov	r0, r6
 800af96:	f7ff fe01 	bl	800ab9c <_Bfree>
 800af9a:	4647      	mov	r7, r8
 800af9c:	106d      	asrs	r5, r5, #1
 800af9e:	d00b      	beq.n	800afb8 <__pow5mult+0xa0>
 800afa0:	6820      	ldr	r0, [r4, #0]
 800afa2:	b938      	cbnz	r0, 800afb4 <__pow5mult+0x9c>
 800afa4:	4622      	mov	r2, r4
 800afa6:	4621      	mov	r1, r4
 800afa8:	4630      	mov	r0, r6
 800afaa:	f7ff ff0d 	bl	800adc8 <__multiply>
 800afae:	6020      	str	r0, [r4, #0]
 800afb0:	f8c0 9000 	str.w	r9, [r0]
 800afb4:	4604      	mov	r4, r0
 800afb6:	e7e4      	b.n	800af82 <__pow5mult+0x6a>
 800afb8:	4638      	mov	r0, r7
 800afba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afbe:	bf00      	nop
 800afc0:	0801e2d8 	.word	0x0801e2d8
 800afc4:	0801e08e 	.word	0x0801e08e
 800afc8:	0801e18c 	.word	0x0801e18c

0800afcc <__lshift>:
 800afcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afd0:	460c      	mov	r4, r1
 800afd2:	4607      	mov	r7, r0
 800afd4:	4691      	mov	r9, r2
 800afd6:	6923      	ldr	r3, [r4, #16]
 800afd8:	6849      	ldr	r1, [r1, #4]
 800afda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afde:	68a3      	ldr	r3, [r4, #8]
 800afe0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afe4:	f108 0601 	add.w	r6, r8, #1
 800afe8:	42b3      	cmp	r3, r6
 800afea:	db0b      	blt.n	800b004 <__lshift+0x38>
 800afec:	4638      	mov	r0, r7
 800afee:	f7ff fd95 	bl	800ab1c <_Balloc>
 800aff2:	4605      	mov	r5, r0
 800aff4:	b948      	cbnz	r0, 800b00a <__lshift+0x3e>
 800aff6:	4602      	mov	r2, r0
 800aff8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800affc:	4b29      	ldr	r3, [pc, #164]	; (800b0a4 <__lshift+0xd8>)
 800affe:	482a      	ldr	r0, [pc, #168]	; (800b0a8 <__lshift+0xdc>)
 800b000:	f000 fcc8 	bl	800b994 <__assert_func>
 800b004:	3101      	adds	r1, #1
 800b006:	005b      	lsls	r3, r3, #1
 800b008:	e7ee      	b.n	800afe8 <__lshift+0x1c>
 800b00a:	2300      	movs	r3, #0
 800b00c:	f100 0114 	add.w	r1, r0, #20
 800b010:	f100 0210 	add.w	r2, r0, #16
 800b014:	4618      	mov	r0, r3
 800b016:	4553      	cmp	r3, sl
 800b018:	db37      	blt.n	800b08a <__lshift+0xbe>
 800b01a:	6920      	ldr	r0, [r4, #16]
 800b01c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b020:	f104 0314 	add.w	r3, r4, #20
 800b024:	f019 091f 	ands.w	r9, r9, #31
 800b028:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b02c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b030:	d02f      	beq.n	800b092 <__lshift+0xc6>
 800b032:	468a      	mov	sl, r1
 800b034:	f04f 0c00 	mov.w	ip, #0
 800b038:	f1c9 0e20 	rsb	lr, r9, #32
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	fa02 f209 	lsl.w	r2, r2, r9
 800b042:	ea42 020c 	orr.w	r2, r2, ip
 800b046:	f84a 2b04 	str.w	r2, [sl], #4
 800b04a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b04e:	4298      	cmp	r0, r3
 800b050:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b054:	d8f2      	bhi.n	800b03c <__lshift+0x70>
 800b056:	1b03      	subs	r3, r0, r4
 800b058:	3b15      	subs	r3, #21
 800b05a:	f023 0303 	bic.w	r3, r3, #3
 800b05e:	3304      	adds	r3, #4
 800b060:	f104 0215 	add.w	r2, r4, #21
 800b064:	4290      	cmp	r0, r2
 800b066:	bf38      	it	cc
 800b068:	2304      	movcc	r3, #4
 800b06a:	f841 c003 	str.w	ip, [r1, r3]
 800b06e:	f1bc 0f00 	cmp.w	ip, #0
 800b072:	d001      	beq.n	800b078 <__lshift+0xac>
 800b074:	f108 0602 	add.w	r6, r8, #2
 800b078:	3e01      	subs	r6, #1
 800b07a:	4638      	mov	r0, r7
 800b07c:	4621      	mov	r1, r4
 800b07e:	612e      	str	r6, [r5, #16]
 800b080:	f7ff fd8c 	bl	800ab9c <_Bfree>
 800b084:	4628      	mov	r0, r5
 800b086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b08a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b08e:	3301      	adds	r3, #1
 800b090:	e7c1      	b.n	800b016 <__lshift+0x4a>
 800b092:	3904      	subs	r1, #4
 800b094:	f853 2b04 	ldr.w	r2, [r3], #4
 800b098:	4298      	cmp	r0, r3
 800b09a:	f841 2f04 	str.w	r2, [r1, #4]!
 800b09e:	d8f9      	bhi.n	800b094 <__lshift+0xc8>
 800b0a0:	e7ea      	b.n	800b078 <__lshift+0xac>
 800b0a2:	bf00      	nop
 800b0a4:	0801e100 	.word	0x0801e100
 800b0a8:	0801e18c 	.word	0x0801e18c

0800b0ac <__mcmp>:
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	690a      	ldr	r2, [r1, #16]
 800b0b0:	6900      	ldr	r0, [r0, #16]
 800b0b2:	b530      	push	{r4, r5, lr}
 800b0b4:	1a80      	subs	r0, r0, r2
 800b0b6:	d10d      	bne.n	800b0d4 <__mcmp+0x28>
 800b0b8:	3314      	adds	r3, #20
 800b0ba:	3114      	adds	r1, #20
 800b0bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b0c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b0c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b0c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b0cc:	4295      	cmp	r5, r2
 800b0ce:	d002      	beq.n	800b0d6 <__mcmp+0x2a>
 800b0d0:	d304      	bcc.n	800b0dc <__mcmp+0x30>
 800b0d2:	2001      	movs	r0, #1
 800b0d4:	bd30      	pop	{r4, r5, pc}
 800b0d6:	42a3      	cmp	r3, r4
 800b0d8:	d3f4      	bcc.n	800b0c4 <__mcmp+0x18>
 800b0da:	e7fb      	b.n	800b0d4 <__mcmp+0x28>
 800b0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e0:	e7f8      	b.n	800b0d4 <__mcmp+0x28>
	...

0800b0e4 <__mdiff>:
 800b0e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e8:	460d      	mov	r5, r1
 800b0ea:	4607      	mov	r7, r0
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	4614      	mov	r4, r2
 800b0f2:	f7ff ffdb 	bl	800b0ac <__mcmp>
 800b0f6:	1e06      	subs	r6, r0, #0
 800b0f8:	d111      	bne.n	800b11e <__mdiff+0x3a>
 800b0fa:	4631      	mov	r1, r6
 800b0fc:	4638      	mov	r0, r7
 800b0fe:	f7ff fd0d 	bl	800ab1c <_Balloc>
 800b102:	4602      	mov	r2, r0
 800b104:	b928      	cbnz	r0, 800b112 <__mdiff+0x2e>
 800b106:	f240 2132 	movw	r1, #562	; 0x232
 800b10a:	4b3a      	ldr	r3, [pc, #232]	; (800b1f4 <__mdiff+0x110>)
 800b10c:	483a      	ldr	r0, [pc, #232]	; (800b1f8 <__mdiff+0x114>)
 800b10e:	f000 fc41 	bl	800b994 <__assert_func>
 800b112:	2301      	movs	r3, #1
 800b114:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b118:	4610      	mov	r0, r2
 800b11a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b11e:	bfa4      	itt	ge
 800b120:	4623      	movge	r3, r4
 800b122:	462c      	movge	r4, r5
 800b124:	4638      	mov	r0, r7
 800b126:	6861      	ldr	r1, [r4, #4]
 800b128:	bfa6      	itte	ge
 800b12a:	461d      	movge	r5, r3
 800b12c:	2600      	movge	r6, #0
 800b12e:	2601      	movlt	r6, #1
 800b130:	f7ff fcf4 	bl	800ab1c <_Balloc>
 800b134:	4602      	mov	r2, r0
 800b136:	b918      	cbnz	r0, 800b140 <__mdiff+0x5c>
 800b138:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b13c:	4b2d      	ldr	r3, [pc, #180]	; (800b1f4 <__mdiff+0x110>)
 800b13e:	e7e5      	b.n	800b10c <__mdiff+0x28>
 800b140:	f102 0814 	add.w	r8, r2, #20
 800b144:	46c2      	mov	sl, r8
 800b146:	f04f 0c00 	mov.w	ip, #0
 800b14a:	6927      	ldr	r7, [r4, #16]
 800b14c:	60c6      	str	r6, [r0, #12]
 800b14e:	692e      	ldr	r6, [r5, #16]
 800b150:	f104 0014 	add.w	r0, r4, #20
 800b154:	f105 0914 	add.w	r9, r5, #20
 800b158:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b15c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b160:	3410      	adds	r4, #16
 800b162:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b166:	f859 3b04 	ldr.w	r3, [r9], #4
 800b16a:	fa1f f18b 	uxth.w	r1, fp
 800b16e:	448c      	add	ip, r1
 800b170:	b299      	uxth	r1, r3
 800b172:	0c1b      	lsrs	r3, r3, #16
 800b174:	ebac 0101 	sub.w	r1, ip, r1
 800b178:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b17c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b180:	b289      	uxth	r1, r1
 800b182:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b186:	454e      	cmp	r6, r9
 800b188:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b18c:	f84a 3b04 	str.w	r3, [sl], #4
 800b190:	d8e7      	bhi.n	800b162 <__mdiff+0x7e>
 800b192:	1b73      	subs	r3, r6, r5
 800b194:	3b15      	subs	r3, #21
 800b196:	f023 0303 	bic.w	r3, r3, #3
 800b19a:	3515      	adds	r5, #21
 800b19c:	3304      	adds	r3, #4
 800b19e:	42ae      	cmp	r6, r5
 800b1a0:	bf38      	it	cc
 800b1a2:	2304      	movcc	r3, #4
 800b1a4:	4418      	add	r0, r3
 800b1a6:	4443      	add	r3, r8
 800b1a8:	461e      	mov	r6, r3
 800b1aa:	4605      	mov	r5, r0
 800b1ac:	4575      	cmp	r5, lr
 800b1ae:	d30e      	bcc.n	800b1ce <__mdiff+0xea>
 800b1b0:	f10e 0103 	add.w	r1, lr, #3
 800b1b4:	1a09      	subs	r1, r1, r0
 800b1b6:	f021 0103 	bic.w	r1, r1, #3
 800b1ba:	3803      	subs	r0, #3
 800b1bc:	4586      	cmp	lr, r0
 800b1be:	bf38      	it	cc
 800b1c0:	2100      	movcc	r1, #0
 800b1c2:	4419      	add	r1, r3
 800b1c4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b1c8:	b18b      	cbz	r3, 800b1ee <__mdiff+0x10a>
 800b1ca:	6117      	str	r7, [r2, #16]
 800b1cc:	e7a4      	b.n	800b118 <__mdiff+0x34>
 800b1ce:	f855 8b04 	ldr.w	r8, [r5], #4
 800b1d2:	fa1f f188 	uxth.w	r1, r8
 800b1d6:	4461      	add	r1, ip
 800b1d8:	140c      	asrs	r4, r1, #16
 800b1da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1de:	b289      	uxth	r1, r1
 800b1e0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b1e4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b1e8:	f846 1b04 	str.w	r1, [r6], #4
 800b1ec:	e7de      	b.n	800b1ac <__mdiff+0xc8>
 800b1ee:	3f01      	subs	r7, #1
 800b1f0:	e7e8      	b.n	800b1c4 <__mdiff+0xe0>
 800b1f2:	bf00      	nop
 800b1f4:	0801e100 	.word	0x0801e100
 800b1f8:	0801e18c 	.word	0x0801e18c

0800b1fc <__ulp>:
 800b1fc:	4b11      	ldr	r3, [pc, #68]	; (800b244 <__ulp+0x48>)
 800b1fe:	400b      	ands	r3, r1
 800b200:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b204:	2b00      	cmp	r3, #0
 800b206:	dd02      	ble.n	800b20e <__ulp+0x12>
 800b208:	2000      	movs	r0, #0
 800b20a:	4619      	mov	r1, r3
 800b20c:	4770      	bx	lr
 800b20e:	425b      	negs	r3, r3
 800b210:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b214:	f04f 0000 	mov.w	r0, #0
 800b218:	f04f 0100 	mov.w	r1, #0
 800b21c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b220:	da04      	bge.n	800b22c <__ulp+0x30>
 800b222:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b226:	fa43 f102 	asr.w	r1, r3, r2
 800b22a:	4770      	bx	lr
 800b22c:	f1a2 0314 	sub.w	r3, r2, #20
 800b230:	2b1e      	cmp	r3, #30
 800b232:	bfd6      	itet	le
 800b234:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b238:	2301      	movgt	r3, #1
 800b23a:	fa22 f303 	lsrle.w	r3, r2, r3
 800b23e:	4618      	mov	r0, r3
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	7ff00000 	.word	0x7ff00000

0800b248 <__b2d>:
 800b248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b24c:	6907      	ldr	r7, [r0, #16]
 800b24e:	f100 0914 	add.w	r9, r0, #20
 800b252:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b256:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b25a:	f1a7 0804 	sub.w	r8, r7, #4
 800b25e:	4630      	mov	r0, r6
 800b260:	f7ff fd4e 	bl	800ad00 <__hi0bits>
 800b264:	f1c0 0320 	rsb	r3, r0, #32
 800b268:	280a      	cmp	r0, #10
 800b26a:	600b      	str	r3, [r1, #0]
 800b26c:	491f      	ldr	r1, [pc, #124]	; (800b2ec <__b2d+0xa4>)
 800b26e:	dc17      	bgt.n	800b2a0 <__b2d+0x58>
 800b270:	45c1      	cmp	r9, r8
 800b272:	bf28      	it	cs
 800b274:	2200      	movcs	r2, #0
 800b276:	f1c0 0c0b 	rsb	ip, r0, #11
 800b27a:	fa26 f30c 	lsr.w	r3, r6, ip
 800b27e:	bf38      	it	cc
 800b280:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b284:	ea43 0501 	orr.w	r5, r3, r1
 800b288:	f100 0315 	add.w	r3, r0, #21
 800b28c:	fa06 f303 	lsl.w	r3, r6, r3
 800b290:	fa22 f20c 	lsr.w	r2, r2, ip
 800b294:	ea43 0402 	orr.w	r4, r3, r2
 800b298:	4620      	mov	r0, r4
 800b29a:	4629      	mov	r1, r5
 800b29c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2a0:	45c1      	cmp	r9, r8
 800b2a2:	bf2e      	itee	cs
 800b2a4:	2200      	movcs	r2, #0
 800b2a6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b2aa:	f1a7 0808 	subcc.w	r8, r7, #8
 800b2ae:	f1b0 030b 	subs.w	r3, r0, #11
 800b2b2:	d016      	beq.n	800b2e2 <__b2d+0x9a>
 800b2b4:	f1c3 0720 	rsb	r7, r3, #32
 800b2b8:	fa22 f107 	lsr.w	r1, r2, r7
 800b2bc:	45c8      	cmp	r8, r9
 800b2be:	fa06 f603 	lsl.w	r6, r6, r3
 800b2c2:	ea46 0601 	orr.w	r6, r6, r1
 800b2c6:	bf94      	ite	ls
 800b2c8:	2100      	movls	r1, #0
 800b2ca:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b2ce:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b2d2:	fa02 f003 	lsl.w	r0, r2, r3
 800b2d6:	40f9      	lsrs	r1, r7
 800b2d8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b2dc:	ea40 0401 	orr.w	r4, r0, r1
 800b2e0:	e7da      	b.n	800b298 <__b2d+0x50>
 800b2e2:	4614      	mov	r4, r2
 800b2e4:	ea46 0501 	orr.w	r5, r6, r1
 800b2e8:	e7d6      	b.n	800b298 <__b2d+0x50>
 800b2ea:	bf00      	nop
 800b2ec:	3ff00000 	.word	0x3ff00000

0800b2f0 <__d2b>:
 800b2f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b2f4:	2101      	movs	r1, #1
 800b2f6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b2fa:	4690      	mov	r8, r2
 800b2fc:	461d      	mov	r5, r3
 800b2fe:	f7ff fc0d 	bl	800ab1c <_Balloc>
 800b302:	4604      	mov	r4, r0
 800b304:	b930      	cbnz	r0, 800b314 <__d2b+0x24>
 800b306:	4602      	mov	r2, r0
 800b308:	f240 310a 	movw	r1, #778	; 0x30a
 800b30c:	4b24      	ldr	r3, [pc, #144]	; (800b3a0 <__d2b+0xb0>)
 800b30e:	4825      	ldr	r0, [pc, #148]	; (800b3a4 <__d2b+0xb4>)
 800b310:	f000 fb40 	bl	800b994 <__assert_func>
 800b314:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b318:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b31c:	bb2d      	cbnz	r5, 800b36a <__d2b+0x7a>
 800b31e:	9301      	str	r3, [sp, #4]
 800b320:	f1b8 0300 	subs.w	r3, r8, #0
 800b324:	d026      	beq.n	800b374 <__d2b+0x84>
 800b326:	4668      	mov	r0, sp
 800b328:	9300      	str	r3, [sp, #0]
 800b32a:	f7ff fd09 	bl	800ad40 <__lo0bits>
 800b32e:	9900      	ldr	r1, [sp, #0]
 800b330:	b1f0      	cbz	r0, 800b370 <__d2b+0x80>
 800b332:	9a01      	ldr	r2, [sp, #4]
 800b334:	f1c0 0320 	rsb	r3, r0, #32
 800b338:	fa02 f303 	lsl.w	r3, r2, r3
 800b33c:	430b      	orrs	r3, r1
 800b33e:	40c2      	lsrs	r2, r0
 800b340:	6163      	str	r3, [r4, #20]
 800b342:	9201      	str	r2, [sp, #4]
 800b344:	9b01      	ldr	r3, [sp, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	bf14      	ite	ne
 800b34a:	2102      	movne	r1, #2
 800b34c:	2101      	moveq	r1, #1
 800b34e:	61a3      	str	r3, [r4, #24]
 800b350:	6121      	str	r1, [r4, #16]
 800b352:	b1c5      	cbz	r5, 800b386 <__d2b+0x96>
 800b354:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b358:	4405      	add	r5, r0
 800b35a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b35e:	603d      	str	r5, [r7, #0]
 800b360:	6030      	str	r0, [r6, #0]
 800b362:	4620      	mov	r0, r4
 800b364:	b002      	add	sp, #8
 800b366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b36a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b36e:	e7d6      	b.n	800b31e <__d2b+0x2e>
 800b370:	6161      	str	r1, [r4, #20]
 800b372:	e7e7      	b.n	800b344 <__d2b+0x54>
 800b374:	a801      	add	r0, sp, #4
 800b376:	f7ff fce3 	bl	800ad40 <__lo0bits>
 800b37a:	2101      	movs	r1, #1
 800b37c:	9b01      	ldr	r3, [sp, #4]
 800b37e:	6121      	str	r1, [r4, #16]
 800b380:	6163      	str	r3, [r4, #20]
 800b382:	3020      	adds	r0, #32
 800b384:	e7e5      	b.n	800b352 <__d2b+0x62>
 800b386:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b38a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b38e:	6038      	str	r0, [r7, #0]
 800b390:	6918      	ldr	r0, [r3, #16]
 800b392:	f7ff fcb5 	bl	800ad00 <__hi0bits>
 800b396:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b39a:	6031      	str	r1, [r6, #0]
 800b39c:	e7e1      	b.n	800b362 <__d2b+0x72>
 800b39e:	bf00      	nop
 800b3a0:	0801e100 	.word	0x0801e100
 800b3a4:	0801e18c 	.word	0x0801e18c

0800b3a8 <__ratio>:
 800b3a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ac:	4688      	mov	r8, r1
 800b3ae:	4669      	mov	r1, sp
 800b3b0:	4681      	mov	r9, r0
 800b3b2:	f7ff ff49 	bl	800b248 <__b2d>
 800b3b6:	460f      	mov	r7, r1
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	460d      	mov	r5, r1
 800b3bc:	4640      	mov	r0, r8
 800b3be:	a901      	add	r1, sp, #4
 800b3c0:	f7ff ff42 	bl	800b248 <__b2d>
 800b3c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3c8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b3cc:	468b      	mov	fp, r1
 800b3ce:	eba3 0c02 	sub.w	ip, r3, r2
 800b3d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b3d6:	1a9b      	subs	r3, r3, r2
 800b3d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	bfd5      	itete	le
 800b3e0:	460a      	movle	r2, r1
 800b3e2:	462a      	movgt	r2, r5
 800b3e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b3e8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b3ec:	bfd8      	it	le
 800b3ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b3f2:	465b      	mov	r3, fp
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	4639      	mov	r1, r7
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f7fa f923 	bl	8005644 <__aeabi_ddiv>
 800b3fe:	b003      	add	sp, #12
 800b400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b404 <__copybits>:
 800b404:	3901      	subs	r1, #1
 800b406:	b570      	push	{r4, r5, r6, lr}
 800b408:	1149      	asrs	r1, r1, #5
 800b40a:	6914      	ldr	r4, [r2, #16]
 800b40c:	3101      	adds	r1, #1
 800b40e:	f102 0314 	add.w	r3, r2, #20
 800b412:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b416:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b41a:	1f05      	subs	r5, r0, #4
 800b41c:	42a3      	cmp	r3, r4
 800b41e:	d30c      	bcc.n	800b43a <__copybits+0x36>
 800b420:	1aa3      	subs	r3, r4, r2
 800b422:	3b11      	subs	r3, #17
 800b424:	f023 0303 	bic.w	r3, r3, #3
 800b428:	3211      	adds	r2, #17
 800b42a:	42a2      	cmp	r2, r4
 800b42c:	bf88      	it	hi
 800b42e:	2300      	movhi	r3, #0
 800b430:	4418      	add	r0, r3
 800b432:	2300      	movs	r3, #0
 800b434:	4288      	cmp	r0, r1
 800b436:	d305      	bcc.n	800b444 <__copybits+0x40>
 800b438:	bd70      	pop	{r4, r5, r6, pc}
 800b43a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b43e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b442:	e7eb      	b.n	800b41c <__copybits+0x18>
 800b444:	f840 3b04 	str.w	r3, [r0], #4
 800b448:	e7f4      	b.n	800b434 <__copybits+0x30>

0800b44a <__any_on>:
 800b44a:	f100 0214 	add.w	r2, r0, #20
 800b44e:	6900      	ldr	r0, [r0, #16]
 800b450:	114b      	asrs	r3, r1, #5
 800b452:	4298      	cmp	r0, r3
 800b454:	b510      	push	{r4, lr}
 800b456:	db11      	blt.n	800b47c <__any_on+0x32>
 800b458:	dd0a      	ble.n	800b470 <__any_on+0x26>
 800b45a:	f011 011f 	ands.w	r1, r1, #31
 800b45e:	d007      	beq.n	800b470 <__any_on+0x26>
 800b460:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b464:	fa24 f001 	lsr.w	r0, r4, r1
 800b468:	fa00 f101 	lsl.w	r1, r0, r1
 800b46c:	428c      	cmp	r4, r1
 800b46e:	d10b      	bne.n	800b488 <__any_on+0x3e>
 800b470:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b474:	4293      	cmp	r3, r2
 800b476:	d803      	bhi.n	800b480 <__any_on+0x36>
 800b478:	2000      	movs	r0, #0
 800b47a:	bd10      	pop	{r4, pc}
 800b47c:	4603      	mov	r3, r0
 800b47e:	e7f7      	b.n	800b470 <__any_on+0x26>
 800b480:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b484:	2900      	cmp	r1, #0
 800b486:	d0f5      	beq.n	800b474 <__any_on+0x2a>
 800b488:	2001      	movs	r0, #1
 800b48a:	e7f6      	b.n	800b47a <__any_on+0x30>

0800b48c <_calloc_r>:
 800b48c:	b570      	push	{r4, r5, r6, lr}
 800b48e:	fba1 5402 	umull	r5, r4, r1, r2
 800b492:	b934      	cbnz	r4, 800b4a2 <_calloc_r+0x16>
 800b494:	4629      	mov	r1, r5
 800b496:	f000 f875 	bl	800b584 <_malloc_r>
 800b49a:	4606      	mov	r6, r0
 800b49c:	b928      	cbnz	r0, 800b4aa <_calloc_r+0x1e>
 800b49e:	4630      	mov	r0, r6
 800b4a0:	bd70      	pop	{r4, r5, r6, pc}
 800b4a2:	220c      	movs	r2, #12
 800b4a4:	2600      	movs	r6, #0
 800b4a6:	6002      	str	r2, [r0, #0]
 800b4a8:	e7f9      	b.n	800b49e <_calloc_r+0x12>
 800b4aa:	462a      	mov	r2, r5
 800b4ac:	4621      	mov	r1, r4
 800b4ae:	f7fc fbe5 	bl	8007c7c <memset>
 800b4b2:	e7f4      	b.n	800b49e <_calloc_r+0x12>

0800b4b4 <_free_r>:
 800b4b4:	b538      	push	{r3, r4, r5, lr}
 800b4b6:	4605      	mov	r5, r0
 800b4b8:	2900      	cmp	r1, #0
 800b4ba:	d040      	beq.n	800b53e <_free_r+0x8a>
 800b4bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4c0:	1f0c      	subs	r4, r1, #4
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	bfb8      	it	lt
 800b4c6:	18e4      	addlt	r4, r4, r3
 800b4c8:	f000 faae 	bl	800ba28 <__malloc_lock>
 800b4cc:	4a1c      	ldr	r2, [pc, #112]	; (800b540 <_free_r+0x8c>)
 800b4ce:	6813      	ldr	r3, [r2, #0]
 800b4d0:	b933      	cbnz	r3, 800b4e0 <_free_r+0x2c>
 800b4d2:	6063      	str	r3, [r4, #4]
 800b4d4:	6014      	str	r4, [r2, #0]
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4dc:	f000 baaa 	b.w	800ba34 <__malloc_unlock>
 800b4e0:	42a3      	cmp	r3, r4
 800b4e2:	d908      	bls.n	800b4f6 <_free_r+0x42>
 800b4e4:	6820      	ldr	r0, [r4, #0]
 800b4e6:	1821      	adds	r1, r4, r0
 800b4e8:	428b      	cmp	r3, r1
 800b4ea:	bf01      	itttt	eq
 800b4ec:	6819      	ldreq	r1, [r3, #0]
 800b4ee:	685b      	ldreq	r3, [r3, #4]
 800b4f0:	1809      	addeq	r1, r1, r0
 800b4f2:	6021      	streq	r1, [r4, #0]
 800b4f4:	e7ed      	b.n	800b4d2 <_free_r+0x1e>
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	b10b      	cbz	r3, 800b500 <_free_r+0x4c>
 800b4fc:	42a3      	cmp	r3, r4
 800b4fe:	d9fa      	bls.n	800b4f6 <_free_r+0x42>
 800b500:	6811      	ldr	r1, [r2, #0]
 800b502:	1850      	adds	r0, r2, r1
 800b504:	42a0      	cmp	r0, r4
 800b506:	d10b      	bne.n	800b520 <_free_r+0x6c>
 800b508:	6820      	ldr	r0, [r4, #0]
 800b50a:	4401      	add	r1, r0
 800b50c:	1850      	adds	r0, r2, r1
 800b50e:	4283      	cmp	r3, r0
 800b510:	6011      	str	r1, [r2, #0]
 800b512:	d1e0      	bne.n	800b4d6 <_free_r+0x22>
 800b514:	6818      	ldr	r0, [r3, #0]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	4401      	add	r1, r0
 800b51a:	6011      	str	r1, [r2, #0]
 800b51c:	6053      	str	r3, [r2, #4]
 800b51e:	e7da      	b.n	800b4d6 <_free_r+0x22>
 800b520:	d902      	bls.n	800b528 <_free_r+0x74>
 800b522:	230c      	movs	r3, #12
 800b524:	602b      	str	r3, [r5, #0]
 800b526:	e7d6      	b.n	800b4d6 <_free_r+0x22>
 800b528:	6820      	ldr	r0, [r4, #0]
 800b52a:	1821      	adds	r1, r4, r0
 800b52c:	428b      	cmp	r3, r1
 800b52e:	bf01      	itttt	eq
 800b530:	6819      	ldreq	r1, [r3, #0]
 800b532:	685b      	ldreq	r3, [r3, #4]
 800b534:	1809      	addeq	r1, r1, r0
 800b536:	6021      	streq	r1, [r4, #0]
 800b538:	6063      	str	r3, [r4, #4]
 800b53a:	6054      	str	r4, [r2, #4]
 800b53c:	e7cb      	b.n	800b4d6 <_free_r+0x22>
 800b53e:	bd38      	pop	{r3, r4, r5, pc}
 800b540:	20000978 	.word	0x20000978

0800b544 <sbrk_aligned>:
 800b544:	b570      	push	{r4, r5, r6, lr}
 800b546:	4e0e      	ldr	r6, [pc, #56]	; (800b580 <sbrk_aligned+0x3c>)
 800b548:	460c      	mov	r4, r1
 800b54a:	6831      	ldr	r1, [r6, #0]
 800b54c:	4605      	mov	r5, r0
 800b54e:	b911      	cbnz	r1, 800b556 <sbrk_aligned+0x12>
 800b550:	f000 f9ee 	bl	800b930 <_sbrk_r>
 800b554:	6030      	str	r0, [r6, #0]
 800b556:	4621      	mov	r1, r4
 800b558:	4628      	mov	r0, r5
 800b55a:	f000 f9e9 	bl	800b930 <_sbrk_r>
 800b55e:	1c43      	adds	r3, r0, #1
 800b560:	d00a      	beq.n	800b578 <sbrk_aligned+0x34>
 800b562:	1cc4      	adds	r4, r0, #3
 800b564:	f024 0403 	bic.w	r4, r4, #3
 800b568:	42a0      	cmp	r0, r4
 800b56a:	d007      	beq.n	800b57c <sbrk_aligned+0x38>
 800b56c:	1a21      	subs	r1, r4, r0
 800b56e:	4628      	mov	r0, r5
 800b570:	f000 f9de 	bl	800b930 <_sbrk_r>
 800b574:	3001      	adds	r0, #1
 800b576:	d101      	bne.n	800b57c <sbrk_aligned+0x38>
 800b578:	f04f 34ff 	mov.w	r4, #4294967295
 800b57c:	4620      	mov	r0, r4
 800b57e:	bd70      	pop	{r4, r5, r6, pc}
 800b580:	2000097c 	.word	0x2000097c

0800b584 <_malloc_r>:
 800b584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b588:	1ccd      	adds	r5, r1, #3
 800b58a:	f025 0503 	bic.w	r5, r5, #3
 800b58e:	3508      	adds	r5, #8
 800b590:	2d0c      	cmp	r5, #12
 800b592:	bf38      	it	cc
 800b594:	250c      	movcc	r5, #12
 800b596:	2d00      	cmp	r5, #0
 800b598:	4607      	mov	r7, r0
 800b59a:	db01      	blt.n	800b5a0 <_malloc_r+0x1c>
 800b59c:	42a9      	cmp	r1, r5
 800b59e:	d905      	bls.n	800b5ac <_malloc_r+0x28>
 800b5a0:	230c      	movs	r3, #12
 800b5a2:	2600      	movs	r6, #0
 800b5a4:	603b      	str	r3, [r7, #0]
 800b5a6:	4630      	mov	r0, r6
 800b5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5ac:	4e2e      	ldr	r6, [pc, #184]	; (800b668 <_malloc_r+0xe4>)
 800b5ae:	f000 fa3b 	bl	800ba28 <__malloc_lock>
 800b5b2:	6833      	ldr	r3, [r6, #0]
 800b5b4:	461c      	mov	r4, r3
 800b5b6:	bb34      	cbnz	r4, 800b606 <_malloc_r+0x82>
 800b5b8:	4629      	mov	r1, r5
 800b5ba:	4638      	mov	r0, r7
 800b5bc:	f7ff ffc2 	bl	800b544 <sbrk_aligned>
 800b5c0:	1c43      	adds	r3, r0, #1
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	d14d      	bne.n	800b662 <_malloc_r+0xde>
 800b5c6:	6834      	ldr	r4, [r6, #0]
 800b5c8:	4626      	mov	r6, r4
 800b5ca:	2e00      	cmp	r6, #0
 800b5cc:	d140      	bne.n	800b650 <_malloc_r+0xcc>
 800b5ce:	6823      	ldr	r3, [r4, #0]
 800b5d0:	4631      	mov	r1, r6
 800b5d2:	4638      	mov	r0, r7
 800b5d4:	eb04 0803 	add.w	r8, r4, r3
 800b5d8:	f000 f9aa 	bl	800b930 <_sbrk_r>
 800b5dc:	4580      	cmp	r8, r0
 800b5de:	d13a      	bne.n	800b656 <_malloc_r+0xd2>
 800b5e0:	6821      	ldr	r1, [r4, #0]
 800b5e2:	3503      	adds	r5, #3
 800b5e4:	1a6d      	subs	r5, r5, r1
 800b5e6:	f025 0503 	bic.w	r5, r5, #3
 800b5ea:	3508      	adds	r5, #8
 800b5ec:	2d0c      	cmp	r5, #12
 800b5ee:	bf38      	it	cc
 800b5f0:	250c      	movcc	r5, #12
 800b5f2:	4638      	mov	r0, r7
 800b5f4:	4629      	mov	r1, r5
 800b5f6:	f7ff ffa5 	bl	800b544 <sbrk_aligned>
 800b5fa:	3001      	adds	r0, #1
 800b5fc:	d02b      	beq.n	800b656 <_malloc_r+0xd2>
 800b5fe:	6823      	ldr	r3, [r4, #0]
 800b600:	442b      	add	r3, r5
 800b602:	6023      	str	r3, [r4, #0]
 800b604:	e00e      	b.n	800b624 <_malloc_r+0xa0>
 800b606:	6822      	ldr	r2, [r4, #0]
 800b608:	1b52      	subs	r2, r2, r5
 800b60a:	d41e      	bmi.n	800b64a <_malloc_r+0xc6>
 800b60c:	2a0b      	cmp	r2, #11
 800b60e:	d916      	bls.n	800b63e <_malloc_r+0xba>
 800b610:	1961      	adds	r1, r4, r5
 800b612:	42a3      	cmp	r3, r4
 800b614:	6025      	str	r5, [r4, #0]
 800b616:	bf18      	it	ne
 800b618:	6059      	strne	r1, [r3, #4]
 800b61a:	6863      	ldr	r3, [r4, #4]
 800b61c:	bf08      	it	eq
 800b61e:	6031      	streq	r1, [r6, #0]
 800b620:	5162      	str	r2, [r4, r5]
 800b622:	604b      	str	r3, [r1, #4]
 800b624:	4638      	mov	r0, r7
 800b626:	f104 060b 	add.w	r6, r4, #11
 800b62a:	f000 fa03 	bl	800ba34 <__malloc_unlock>
 800b62e:	f026 0607 	bic.w	r6, r6, #7
 800b632:	1d23      	adds	r3, r4, #4
 800b634:	1af2      	subs	r2, r6, r3
 800b636:	d0b6      	beq.n	800b5a6 <_malloc_r+0x22>
 800b638:	1b9b      	subs	r3, r3, r6
 800b63a:	50a3      	str	r3, [r4, r2]
 800b63c:	e7b3      	b.n	800b5a6 <_malloc_r+0x22>
 800b63e:	6862      	ldr	r2, [r4, #4]
 800b640:	42a3      	cmp	r3, r4
 800b642:	bf0c      	ite	eq
 800b644:	6032      	streq	r2, [r6, #0]
 800b646:	605a      	strne	r2, [r3, #4]
 800b648:	e7ec      	b.n	800b624 <_malloc_r+0xa0>
 800b64a:	4623      	mov	r3, r4
 800b64c:	6864      	ldr	r4, [r4, #4]
 800b64e:	e7b2      	b.n	800b5b6 <_malloc_r+0x32>
 800b650:	4634      	mov	r4, r6
 800b652:	6876      	ldr	r6, [r6, #4]
 800b654:	e7b9      	b.n	800b5ca <_malloc_r+0x46>
 800b656:	230c      	movs	r3, #12
 800b658:	4638      	mov	r0, r7
 800b65a:	603b      	str	r3, [r7, #0]
 800b65c:	f000 f9ea 	bl	800ba34 <__malloc_unlock>
 800b660:	e7a1      	b.n	800b5a6 <_malloc_r+0x22>
 800b662:	6025      	str	r5, [r4, #0]
 800b664:	e7de      	b.n	800b624 <_malloc_r+0xa0>
 800b666:	bf00      	nop
 800b668:	20000978 	.word	0x20000978

0800b66c <__ssputs_r>:
 800b66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b670:	688e      	ldr	r6, [r1, #8]
 800b672:	4682      	mov	sl, r0
 800b674:	429e      	cmp	r6, r3
 800b676:	460c      	mov	r4, r1
 800b678:	4690      	mov	r8, r2
 800b67a:	461f      	mov	r7, r3
 800b67c:	d838      	bhi.n	800b6f0 <__ssputs_r+0x84>
 800b67e:	898a      	ldrh	r2, [r1, #12]
 800b680:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b684:	d032      	beq.n	800b6ec <__ssputs_r+0x80>
 800b686:	6825      	ldr	r5, [r4, #0]
 800b688:	6909      	ldr	r1, [r1, #16]
 800b68a:	3301      	adds	r3, #1
 800b68c:	eba5 0901 	sub.w	r9, r5, r1
 800b690:	6965      	ldr	r5, [r4, #20]
 800b692:	444b      	add	r3, r9
 800b694:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b698:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b69c:	106d      	asrs	r5, r5, #1
 800b69e:	429d      	cmp	r5, r3
 800b6a0:	bf38      	it	cc
 800b6a2:	461d      	movcc	r5, r3
 800b6a4:	0553      	lsls	r3, r2, #21
 800b6a6:	d531      	bpl.n	800b70c <__ssputs_r+0xa0>
 800b6a8:	4629      	mov	r1, r5
 800b6aa:	f7ff ff6b 	bl	800b584 <_malloc_r>
 800b6ae:	4606      	mov	r6, r0
 800b6b0:	b950      	cbnz	r0, 800b6c8 <__ssputs_r+0x5c>
 800b6b2:	230c      	movs	r3, #12
 800b6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b8:	f8ca 3000 	str.w	r3, [sl]
 800b6bc:	89a3      	ldrh	r3, [r4, #12]
 800b6be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6c2:	81a3      	strh	r3, [r4, #12]
 800b6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6c8:	464a      	mov	r2, r9
 800b6ca:	6921      	ldr	r1, [r4, #16]
 800b6cc:	f7ff fa18 	bl	800ab00 <memcpy>
 800b6d0:	89a3      	ldrh	r3, [r4, #12]
 800b6d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6da:	81a3      	strh	r3, [r4, #12]
 800b6dc:	6126      	str	r6, [r4, #16]
 800b6de:	444e      	add	r6, r9
 800b6e0:	6026      	str	r6, [r4, #0]
 800b6e2:	463e      	mov	r6, r7
 800b6e4:	6165      	str	r5, [r4, #20]
 800b6e6:	eba5 0509 	sub.w	r5, r5, r9
 800b6ea:	60a5      	str	r5, [r4, #8]
 800b6ec:	42be      	cmp	r6, r7
 800b6ee:	d900      	bls.n	800b6f2 <__ssputs_r+0x86>
 800b6f0:	463e      	mov	r6, r7
 800b6f2:	4632      	mov	r2, r6
 800b6f4:	4641      	mov	r1, r8
 800b6f6:	6820      	ldr	r0, [r4, #0]
 800b6f8:	f000 f97c 	bl	800b9f4 <memmove>
 800b6fc:	68a3      	ldr	r3, [r4, #8]
 800b6fe:	2000      	movs	r0, #0
 800b700:	1b9b      	subs	r3, r3, r6
 800b702:	60a3      	str	r3, [r4, #8]
 800b704:	6823      	ldr	r3, [r4, #0]
 800b706:	4433      	add	r3, r6
 800b708:	6023      	str	r3, [r4, #0]
 800b70a:	e7db      	b.n	800b6c4 <__ssputs_r+0x58>
 800b70c:	462a      	mov	r2, r5
 800b70e:	f000 f997 	bl	800ba40 <_realloc_r>
 800b712:	4606      	mov	r6, r0
 800b714:	2800      	cmp	r0, #0
 800b716:	d1e1      	bne.n	800b6dc <__ssputs_r+0x70>
 800b718:	4650      	mov	r0, sl
 800b71a:	6921      	ldr	r1, [r4, #16]
 800b71c:	f7ff feca 	bl	800b4b4 <_free_r>
 800b720:	e7c7      	b.n	800b6b2 <__ssputs_r+0x46>
	...

0800b724 <_svfiprintf_r>:
 800b724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b728:	4698      	mov	r8, r3
 800b72a:	898b      	ldrh	r3, [r1, #12]
 800b72c:	4607      	mov	r7, r0
 800b72e:	061b      	lsls	r3, r3, #24
 800b730:	460d      	mov	r5, r1
 800b732:	4614      	mov	r4, r2
 800b734:	b09d      	sub	sp, #116	; 0x74
 800b736:	d50e      	bpl.n	800b756 <_svfiprintf_r+0x32>
 800b738:	690b      	ldr	r3, [r1, #16]
 800b73a:	b963      	cbnz	r3, 800b756 <_svfiprintf_r+0x32>
 800b73c:	2140      	movs	r1, #64	; 0x40
 800b73e:	f7ff ff21 	bl	800b584 <_malloc_r>
 800b742:	6028      	str	r0, [r5, #0]
 800b744:	6128      	str	r0, [r5, #16]
 800b746:	b920      	cbnz	r0, 800b752 <_svfiprintf_r+0x2e>
 800b748:	230c      	movs	r3, #12
 800b74a:	603b      	str	r3, [r7, #0]
 800b74c:	f04f 30ff 	mov.w	r0, #4294967295
 800b750:	e0d1      	b.n	800b8f6 <_svfiprintf_r+0x1d2>
 800b752:	2340      	movs	r3, #64	; 0x40
 800b754:	616b      	str	r3, [r5, #20]
 800b756:	2300      	movs	r3, #0
 800b758:	9309      	str	r3, [sp, #36]	; 0x24
 800b75a:	2320      	movs	r3, #32
 800b75c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b760:	2330      	movs	r3, #48	; 0x30
 800b762:	f04f 0901 	mov.w	r9, #1
 800b766:	f8cd 800c 	str.w	r8, [sp, #12]
 800b76a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b910 <_svfiprintf_r+0x1ec>
 800b76e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b772:	4623      	mov	r3, r4
 800b774:	469a      	mov	sl, r3
 800b776:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b77a:	b10a      	cbz	r2, 800b780 <_svfiprintf_r+0x5c>
 800b77c:	2a25      	cmp	r2, #37	; 0x25
 800b77e:	d1f9      	bne.n	800b774 <_svfiprintf_r+0x50>
 800b780:	ebba 0b04 	subs.w	fp, sl, r4
 800b784:	d00b      	beq.n	800b79e <_svfiprintf_r+0x7a>
 800b786:	465b      	mov	r3, fp
 800b788:	4622      	mov	r2, r4
 800b78a:	4629      	mov	r1, r5
 800b78c:	4638      	mov	r0, r7
 800b78e:	f7ff ff6d 	bl	800b66c <__ssputs_r>
 800b792:	3001      	adds	r0, #1
 800b794:	f000 80aa 	beq.w	800b8ec <_svfiprintf_r+0x1c8>
 800b798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b79a:	445a      	add	r2, fp
 800b79c:	9209      	str	r2, [sp, #36]	; 0x24
 800b79e:	f89a 3000 	ldrb.w	r3, [sl]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	f000 80a2 	beq.w	800b8ec <_svfiprintf_r+0x1c8>
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7b2:	f10a 0a01 	add.w	sl, sl, #1
 800b7b6:	9304      	str	r3, [sp, #16]
 800b7b8:	9307      	str	r3, [sp, #28]
 800b7ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7be:	931a      	str	r3, [sp, #104]	; 0x68
 800b7c0:	4654      	mov	r4, sl
 800b7c2:	2205      	movs	r2, #5
 800b7c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7c8:	4851      	ldr	r0, [pc, #324]	; (800b910 <_svfiprintf_r+0x1ec>)
 800b7ca:	f7ff f98b 	bl	800aae4 <memchr>
 800b7ce:	9a04      	ldr	r2, [sp, #16]
 800b7d0:	b9d8      	cbnz	r0, 800b80a <_svfiprintf_r+0xe6>
 800b7d2:	06d0      	lsls	r0, r2, #27
 800b7d4:	bf44      	itt	mi
 800b7d6:	2320      	movmi	r3, #32
 800b7d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7dc:	0711      	lsls	r1, r2, #28
 800b7de:	bf44      	itt	mi
 800b7e0:	232b      	movmi	r3, #43	; 0x2b
 800b7e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7e6:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b7ec:	d015      	beq.n	800b81a <_svfiprintf_r+0xf6>
 800b7ee:	4654      	mov	r4, sl
 800b7f0:	2000      	movs	r0, #0
 800b7f2:	f04f 0c0a 	mov.w	ip, #10
 800b7f6:	9a07      	ldr	r2, [sp, #28]
 800b7f8:	4621      	mov	r1, r4
 800b7fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7fe:	3b30      	subs	r3, #48	; 0x30
 800b800:	2b09      	cmp	r3, #9
 800b802:	d94e      	bls.n	800b8a2 <_svfiprintf_r+0x17e>
 800b804:	b1b0      	cbz	r0, 800b834 <_svfiprintf_r+0x110>
 800b806:	9207      	str	r2, [sp, #28]
 800b808:	e014      	b.n	800b834 <_svfiprintf_r+0x110>
 800b80a:	eba0 0308 	sub.w	r3, r0, r8
 800b80e:	fa09 f303 	lsl.w	r3, r9, r3
 800b812:	4313      	orrs	r3, r2
 800b814:	46a2      	mov	sl, r4
 800b816:	9304      	str	r3, [sp, #16]
 800b818:	e7d2      	b.n	800b7c0 <_svfiprintf_r+0x9c>
 800b81a:	9b03      	ldr	r3, [sp, #12]
 800b81c:	1d19      	adds	r1, r3, #4
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	9103      	str	r1, [sp, #12]
 800b822:	2b00      	cmp	r3, #0
 800b824:	bfbb      	ittet	lt
 800b826:	425b      	neglt	r3, r3
 800b828:	f042 0202 	orrlt.w	r2, r2, #2
 800b82c:	9307      	strge	r3, [sp, #28]
 800b82e:	9307      	strlt	r3, [sp, #28]
 800b830:	bfb8      	it	lt
 800b832:	9204      	strlt	r2, [sp, #16]
 800b834:	7823      	ldrb	r3, [r4, #0]
 800b836:	2b2e      	cmp	r3, #46	; 0x2e
 800b838:	d10c      	bne.n	800b854 <_svfiprintf_r+0x130>
 800b83a:	7863      	ldrb	r3, [r4, #1]
 800b83c:	2b2a      	cmp	r3, #42	; 0x2a
 800b83e:	d135      	bne.n	800b8ac <_svfiprintf_r+0x188>
 800b840:	9b03      	ldr	r3, [sp, #12]
 800b842:	3402      	adds	r4, #2
 800b844:	1d1a      	adds	r2, r3, #4
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	9203      	str	r2, [sp, #12]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	bfb8      	it	lt
 800b84e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b852:	9305      	str	r3, [sp, #20]
 800b854:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b914 <_svfiprintf_r+0x1f0>
 800b858:	2203      	movs	r2, #3
 800b85a:	4650      	mov	r0, sl
 800b85c:	7821      	ldrb	r1, [r4, #0]
 800b85e:	f7ff f941 	bl	800aae4 <memchr>
 800b862:	b140      	cbz	r0, 800b876 <_svfiprintf_r+0x152>
 800b864:	2340      	movs	r3, #64	; 0x40
 800b866:	eba0 000a 	sub.w	r0, r0, sl
 800b86a:	fa03 f000 	lsl.w	r0, r3, r0
 800b86e:	9b04      	ldr	r3, [sp, #16]
 800b870:	3401      	adds	r4, #1
 800b872:	4303      	orrs	r3, r0
 800b874:	9304      	str	r3, [sp, #16]
 800b876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b87a:	2206      	movs	r2, #6
 800b87c:	4826      	ldr	r0, [pc, #152]	; (800b918 <_svfiprintf_r+0x1f4>)
 800b87e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b882:	f7ff f92f 	bl	800aae4 <memchr>
 800b886:	2800      	cmp	r0, #0
 800b888:	d038      	beq.n	800b8fc <_svfiprintf_r+0x1d8>
 800b88a:	4b24      	ldr	r3, [pc, #144]	; (800b91c <_svfiprintf_r+0x1f8>)
 800b88c:	bb1b      	cbnz	r3, 800b8d6 <_svfiprintf_r+0x1b2>
 800b88e:	9b03      	ldr	r3, [sp, #12]
 800b890:	3307      	adds	r3, #7
 800b892:	f023 0307 	bic.w	r3, r3, #7
 800b896:	3308      	adds	r3, #8
 800b898:	9303      	str	r3, [sp, #12]
 800b89a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b89c:	4433      	add	r3, r6
 800b89e:	9309      	str	r3, [sp, #36]	; 0x24
 800b8a0:	e767      	b.n	800b772 <_svfiprintf_r+0x4e>
 800b8a2:	460c      	mov	r4, r1
 800b8a4:	2001      	movs	r0, #1
 800b8a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8aa:	e7a5      	b.n	800b7f8 <_svfiprintf_r+0xd4>
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	f04f 0c0a 	mov.w	ip, #10
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	3401      	adds	r4, #1
 800b8b6:	9305      	str	r3, [sp, #20]
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8be:	3a30      	subs	r2, #48	; 0x30
 800b8c0:	2a09      	cmp	r2, #9
 800b8c2:	d903      	bls.n	800b8cc <_svfiprintf_r+0x1a8>
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d0c5      	beq.n	800b854 <_svfiprintf_r+0x130>
 800b8c8:	9105      	str	r1, [sp, #20]
 800b8ca:	e7c3      	b.n	800b854 <_svfiprintf_r+0x130>
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8d4:	e7f0      	b.n	800b8b8 <_svfiprintf_r+0x194>
 800b8d6:	ab03      	add	r3, sp, #12
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	462a      	mov	r2, r5
 800b8dc:	4638      	mov	r0, r7
 800b8de:	4b10      	ldr	r3, [pc, #64]	; (800b920 <_svfiprintf_r+0x1fc>)
 800b8e0:	a904      	add	r1, sp, #16
 800b8e2:	f7fc fa71 	bl	8007dc8 <_printf_float>
 800b8e6:	1c42      	adds	r2, r0, #1
 800b8e8:	4606      	mov	r6, r0
 800b8ea:	d1d6      	bne.n	800b89a <_svfiprintf_r+0x176>
 800b8ec:	89ab      	ldrh	r3, [r5, #12]
 800b8ee:	065b      	lsls	r3, r3, #25
 800b8f0:	f53f af2c 	bmi.w	800b74c <_svfiprintf_r+0x28>
 800b8f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8f6:	b01d      	add	sp, #116	; 0x74
 800b8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8fc:	ab03      	add	r3, sp, #12
 800b8fe:	9300      	str	r3, [sp, #0]
 800b900:	462a      	mov	r2, r5
 800b902:	4638      	mov	r0, r7
 800b904:	4b06      	ldr	r3, [pc, #24]	; (800b920 <_svfiprintf_r+0x1fc>)
 800b906:	a904      	add	r1, sp, #16
 800b908:	f7fc fcfa 	bl	8008300 <_printf_i>
 800b90c:	e7eb      	b.n	800b8e6 <_svfiprintf_r+0x1c2>
 800b90e:	bf00      	nop
 800b910:	0801e2e4 	.word	0x0801e2e4
 800b914:	0801e2ea 	.word	0x0801e2ea
 800b918:	0801e2ee 	.word	0x0801e2ee
 800b91c:	08007dc9 	.word	0x08007dc9
 800b920:	0800b66d 	.word	0x0800b66d

0800b924 <nan>:
 800b924:	2000      	movs	r0, #0
 800b926:	4901      	ldr	r1, [pc, #4]	; (800b92c <nan+0x8>)
 800b928:	4770      	bx	lr
 800b92a:	bf00      	nop
 800b92c:	7ff80000 	.word	0x7ff80000

0800b930 <_sbrk_r>:
 800b930:	b538      	push	{r3, r4, r5, lr}
 800b932:	2300      	movs	r3, #0
 800b934:	4d05      	ldr	r5, [pc, #20]	; (800b94c <_sbrk_r+0x1c>)
 800b936:	4604      	mov	r4, r0
 800b938:	4608      	mov	r0, r1
 800b93a:	602b      	str	r3, [r5, #0]
 800b93c:	f7f9 fb6c 	bl	8005018 <_sbrk>
 800b940:	1c43      	adds	r3, r0, #1
 800b942:	d102      	bne.n	800b94a <_sbrk_r+0x1a>
 800b944:	682b      	ldr	r3, [r5, #0]
 800b946:	b103      	cbz	r3, 800b94a <_sbrk_r+0x1a>
 800b948:	6023      	str	r3, [r4, #0]
 800b94a:	bd38      	pop	{r3, r4, r5, pc}
 800b94c:	20000980 	.word	0x20000980

0800b950 <strncmp>:
 800b950:	4603      	mov	r3, r0
 800b952:	b510      	push	{r4, lr}
 800b954:	b172      	cbz	r2, 800b974 <strncmp+0x24>
 800b956:	3901      	subs	r1, #1
 800b958:	1884      	adds	r4, r0, r2
 800b95a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b95e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b962:	4290      	cmp	r0, r2
 800b964:	d101      	bne.n	800b96a <strncmp+0x1a>
 800b966:	42a3      	cmp	r3, r4
 800b968:	d101      	bne.n	800b96e <strncmp+0x1e>
 800b96a:	1a80      	subs	r0, r0, r2
 800b96c:	bd10      	pop	{r4, pc}
 800b96e:	2800      	cmp	r0, #0
 800b970:	d1f3      	bne.n	800b95a <strncmp+0xa>
 800b972:	e7fa      	b.n	800b96a <strncmp+0x1a>
 800b974:	4610      	mov	r0, r2
 800b976:	e7f9      	b.n	800b96c <strncmp+0x1c>

0800b978 <__ascii_wctomb>:
 800b978:	4603      	mov	r3, r0
 800b97a:	4608      	mov	r0, r1
 800b97c:	b141      	cbz	r1, 800b990 <__ascii_wctomb+0x18>
 800b97e:	2aff      	cmp	r2, #255	; 0xff
 800b980:	d904      	bls.n	800b98c <__ascii_wctomb+0x14>
 800b982:	228a      	movs	r2, #138	; 0x8a
 800b984:	f04f 30ff 	mov.w	r0, #4294967295
 800b988:	601a      	str	r2, [r3, #0]
 800b98a:	4770      	bx	lr
 800b98c:	2001      	movs	r0, #1
 800b98e:	700a      	strb	r2, [r1, #0]
 800b990:	4770      	bx	lr
	...

0800b994 <__assert_func>:
 800b994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b996:	4614      	mov	r4, r2
 800b998:	461a      	mov	r2, r3
 800b99a:	4b09      	ldr	r3, [pc, #36]	; (800b9c0 <__assert_func+0x2c>)
 800b99c:	4605      	mov	r5, r0
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68d8      	ldr	r0, [r3, #12]
 800b9a2:	b14c      	cbz	r4, 800b9b8 <__assert_func+0x24>
 800b9a4:	4b07      	ldr	r3, [pc, #28]	; (800b9c4 <__assert_func+0x30>)
 800b9a6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b9aa:	9100      	str	r1, [sp, #0]
 800b9ac:	462b      	mov	r3, r5
 800b9ae:	4906      	ldr	r1, [pc, #24]	; (800b9c8 <__assert_func+0x34>)
 800b9b0:	f000 f80e 	bl	800b9d0 <fiprintf>
 800b9b4:	f000 fa8a 	bl	800becc <abort>
 800b9b8:	4b04      	ldr	r3, [pc, #16]	; (800b9cc <__assert_func+0x38>)
 800b9ba:	461c      	mov	r4, r3
 800b9bc:	e7f3      	b.n	800b9a6 <__assert_func+0x12>
 800b9be:	bf00      	nop
 800b9c0:	2000000c 	.word	0x2000000c
 800b9c4:	0801e2f5 	.word	0x0801e2f5
 800b9c8:	0801e302 	.word	0x0801e302
 800b9cc:	0801e330 	.word	0x0801e330

0800b9d0 <fiprintf>:
 800b9d0:	b40e      	push	{r1, r2, r3}
 800b9d2:	b503      	push	{r0, r1, lr}
 800b9d4:	4601      	mov	r1, r0
 800b9d6:	ab03      	add	r3, sp, #12
 800b9d8:	4805      	ldr	r0, [pc, #20]	; (800b9f0 <fiprintf+0x20>)
 800b9da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9de:	6800      	ldr	r0, [r0, #0]
 800b9e0:	9301      	str	r3, [sp, #4]
 800b9e2:	f000 f883 	bl	800baec <_vfiprintf_r>
 800b9e6:	b002      	add	sp, #8
 800b9e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9ec:	b003      	add	sp, #12
 800b9ee:	4770      	bx	lr
 800b9f0:	2000000c 	.word	0x2000000c

0800b9f4 <memmove>:
 800b9f4:	4288      	cmp	r0, r1
 800b9f6:	b510      	push	{r4, lr}
 800b9f8:	eb01 0402 	add.w	r4, r1, r2
 800b9fc:	d902      	bls.n	800ba04 <memmove+0x10>
 800b9fe:	4284      	cmp	r4, r0
 800ba00:	4623      	mov	r3, r4
 800ba02:	d807      	bhi.n	800ba14 <memmove+0x20>
 800ba04:	1e43      	subs	r3, r0, #1
 800ba06:	42a1      	cmp	r1, r4
 800ba08:	d008      	beq.n	800ba1c <memmove+0x28>
 800ba0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba12:	e7f8      	b.n	800ba06 <memmove+0x12>
 800ba14:	4601      	mov	r1, r0
 800ba16:	4402      	add	r2, r0
 800ba18:	428a      	cmp	r2, r1
 800ba1a:	d100      	bne.n	800ba1e <memmove+0x2a>
 800ba1c:	bd10      	pop	{r4, pc}
 800ba1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba26:	e7f7      	b.n	800ba18 <memmove+0x24>

0800ba28 <__malloc_lock>:
 800ba28:	4801      	ldr	r0, [pc, #4]	; (800ba30 <__malloc_lock+0x8>)
 800ba2a:	f000 bc0b 	b.w	800c244 <__retarget_lock_acquire_recursive>
 800ba2e:	bf00      	nop
 800ba30:	20000984 	.word	0x20000984

0800ba34 <__malloc_unlock>:
 800ba34:	4801      	ldr	r0, [pc, #4]	; (800ba3c <__malloc_unlock+0x8>)
 800ba36:	f000 bc06 	b.w	800c246 <__retarget_lock_release_recursive>
 800ba3a:	bf00      	nop
 800ba3c:	20000984 	.word	0x20000984

0800ba40 <_realloc_r>:
 800ba40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba44:	4680      	mov	r8, r0
 800ba46:	4614      	mov	r4, r2
 800ba48:	460e      	mov	r6, r1
 800ba4a:	b921      	cbnz	r1, 800ba56 <_realloc_r+0x16>
 800ba4c:	4611      	mov	r1, r2
 800ba4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba52:	f7ff bd97 	b.w	800b584 <_malloc_r>
 800ba56:	b92a      	cbnz	r2, 800ba64 <_realloc_r+0x24>
 800ba58:	f7ff fd2c 	bl	800b4b4 <_free_r>
 800ba5c:	4625      	mov	r5, r4
 800ba5e:	4628      	mov	r0, r5
 800ba60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba64:	f000 fc56 	bl	800c314 <_malloc_usable_size_r>
 800ba68:	4284      	cmp	r4, r0
 800ba6a:	4607      	mov	r7, r0
 800ba6c:	d802      	bhi.n	800ba74 <_realloc_r+0x34>
 800ba6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba72:	d812      	bhi.n	800ba9a <_realloc_r+0x5a>
 800ba74:	4621      	mov	r1, r4
 800ba76:	4640      	mov	r0, r8
 800ba78:	f7ff fd84 	bl	800b584 <_malloc_r>
 800ba7c:	4605      	mov	r5, r0
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	d0ed      	beq.n	800ba5e <_realloc_r+0x1e>
 800ba82:	42bc      	cmp	r4, r7
 800ba84:	4622      	mov	r2, r4
 800ba86:	4631      	mov	r1, r6
 800ba88:	bf28      	it	cs
 800ba8a:	463a      	movcs	r2, r7
 800ba8c:	f7ff f838 	bl	800ab00 <memcpy>
 800ba90:	4631      	mov	r1, r6
 800ba92:	4640      	mov	r0, r8
 800ba94:	f7ff fd0e 	bl	800b4b4 <_free_r>
 800ba98:	e7e1      	b.n	800ba5e <_realloc_r+0x1e>
 800ba9a:	4635      	mov	r5, r6
 800ba9c:	e7df      	b.n	800ba5e <_realloc_r+0x1e>

0800ba9e <__sfputc_r>:
 800ba9e:	6893      	ldr	r3, [r2, #8]
 800baa0:	b410      	push	{r4}
 800baa2:	3b01      	subs	r3, #1
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	6093      	str	r3, [r2, #8]
 800baa8:	da07      	bge.n	800baba <__sfputc_r+0x1c>
 800baaa:	6994      	ldr	r4, [r2, #24]
 800baac:	42a3      	cmp	r3, r4
 800baae:	db01      	blt.n	800bab4 <__sfputc_r+0x16>
 800bab0:	290a      	cmp	r1, #10
 800bab2:	d102      	bne.n	800baba <__sfputc_r+0x1c>
 800bab4:	bc10      	pop	{r4}
 800bab6:	f000 b949 	b.w	800bd4c <__swbuf_r>
 800baba:	6813      	ldr	r3, [r2, #0]
 800babc:	1c58      	adds	r0, r3, #1
 800babe:	6010      	str	r0, [r2, #0]
 800bac0:	7019      	strb	r1, [r3, #0]
 800bac2:	4608      	mov	r0, r1
 800bac4:	bc10      	pop	{r4}
 800bac6:	4770      	bx	lr

0800bac8 <__sfputs_r>:
 800bac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baca:	4606      	mov	r6, r0
 800bacc:	460f      	mov	r7, r1
 800bace:	4614      	mov	r4, r2
 800bad0:	18d5      	adds	r5, r2, r3
 800bad2:	42ac      	cmp	r4, r5
 800bad4:	d101      	bne.n	800bada <__sfputs_r+0x12>
 800bad6:	2000      	movs	r0, #0
 800bad8:	e007      	b.n	800baea <__sfputs_r+0x22>
 800bada:	463a      	mov	r2, r7
 800badc:	4630      	mov	r0, r6
 800bade:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bae2:	f7ff ffdc 	bl	800ba9e <__sfputc_r>
 800bae6:	1c43      	adds	r3, r0, #1
 800bae8:	d1f3      	bne.n	800bad2 <__sfputs_r+0xa>
 800baea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800baec <_vfiprintf_r>:
 800baec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf0:	460d      	mov	r5, r1
 800baf2:	4614      	mov	r4, r2
 800baf4:	4698      	mov	r8, r3
 800baf6:	4606      	mov	r6, r0
 800baf8:	b09d      	sub	sp, #116	; 0x74
 800bafa:	b118      	cbz	r0, 800bb04 <_vfiprintf_r+0x18>
 800bafc:	6983      	ldr	r3, [r0, #24]
 800bafe:	b90b      	cbnz	r3, 800bb04 <_vfiprintf_r+0x18>
 800bb00:	f000 fb02 	bl	800c108 <__sinit>
 800bb04:	4b89      	ldr	r3, [pc, #548]	; (800bd2c <_vfiprintf_r+0x240>)
 800bb06:	429d      	cmp	r5, r3
 800bb08:	d11b      	bne.n	800bb42 <_vfiprintf_r+0x56>
 800bb0a:	6875      	ldr	r5, [r6, #4]
 800bb0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb0e:	07d9      	lsls	r1, r3, #31
 800bb10:	d405      	bmi.n	800bb1e <_vfiprintf_r+0x32>
 800bb12:	89ab      	ldrh	r3, [r5, #12]
 800bb14:	059a      	lsls	r2, r3, #22
 800bb16:	d402      	bmi.n	800bb1e <_vfiprintf_r+0x32>
 800bb18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb1a:	f000 fb93 	bl	800c244 <__retarget_lock_acquire_recursive>
 800bb1e:	89ab      	ldrh	r3, [r5, #12]
 800bb20:	071b      	lsls	r3, r3, #28
 800bb22:	d501      	bpl.n	800bb28 <_vfiprintf_r+0x3c>
 800bb24:	692b      	ldr	r3, [r5, #16]
 800bb26:	b9eb      	cbnz	r3, 800bb64 <_vfiprintf_r+0x78>
 800bb28:	4629      	mov	r1, r5
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	f000 f960 	bl	800bdf0 <__swsetup_r>
 800bb30:	b1c0      	cbz	r0, 800bb64 <_vfiprintf_r+0x78>
 800bb32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb34:	07dc      	lsls	r4, r3, #31
 800bb36:	d50e      	bpl.n	800bb56 <_vfiprintf_r+0x6a>
 800bb38:	f04f 30ff 	mov.w	r0, #4294967295
 800bb3c:	b01d      	add	sp, #116	; 0x74
 800bb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb42:	4b7b      	ldr	r3, [pc, #492]	; (800bd30 <_vfiprintf_r+0x244>)
 800bb44:	429d      	cmp	r5, r3
 800bb46:	d101      	bne.n	800bb4c <_vfiprintf_r+0x60>
 800bb48:	68b5      	ldr	r5, [r6, #8]
 800bb4a:	e7df      	b.n	800bb0c <_vfiprintf_r+0x20>
 800bb4c:	4b79      	ldr	r3, [pc, #484]	; (800bd34 <_vfiprintf_r+0x248>)
 800bb4e:	429d      	cmp	r5, r3
 800bb50:	bf08      	it	eq
 800bb52:	68f5      	ldreq	r5, [r6, #12]
 800bb54:	e7da      	b.n	800bb0c <_vfiprintf_r+0x20>
 800bb56:	89ab      	ldrh	r3, [r5, #12]
 800bb58:	0598      	lsls	r0, r3, #22
 800bb5a:	d4ed      	bmi.n	800bb38 <_vfiprintf_r+0x4c>
 800bb5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb5e:	f000 fb72 	bl	800c246 <__retarget_lock_release_recursive>
 800bb62:	e7e9      	b.n	800bb38 <_vfiprintf_r+0x4c>
 800bb64:	2300      	movs	r3, #0
 800bb66:	9309      	str	r3, [sp, #36]	; 0x24
 800bb68:	2320      	movs	r3, #32
 800bb6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb6e:	2330      	movs	r3, #48	; 0x30
 800bb70:	f04f 0901 	mov.w	r9, #1
 800bb74:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb78:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bd38 <_vfiprintf_r+0x24c>
 800bb7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb80:	4623      	mov	r3, r4
 800bb82:	469a      	mov	sl, r3
 800bb84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb88:	b10a      	cbz	r2, 800bb8e <_vfiprintf_r+0xa2>
 800bb8a:	2a25      	cmp	r2, #37	; 0x25
 800bb8c:	d1f9      	bne.n	800bb82 <_vfiprintf_r+0x96>
 800bb8e:	ebba 0b04 	subs.w	fp, sl, r4
 800bb92:	d00b      	beq.n	800bbac <_vfiprintf_r+0xc0>
 800bb94:	465b      	mov	r3, fp
 800bb96:	4622      	mov	r2, r4
 800bb98:	4629      	mov	r1, r5
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	f7ff ff94 	bl	800bac8 <__sfputs_r>
 800bba0:	3001      	adds	r0, #1
 800bba2:	f000 80aa 	beq.w	800bcfa <_vfiprintf_r+0x20e>
 800bba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bba8:	445a      	add	r2, fp
 800bbaa:	9209      	str	r2, [sp, #36]	; 0x24
 800bbac:	f89a 3000 	ldrb.w	r3, [sl]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	f000 80a2 	beq.w	800bcfa <_vfiprintf_r+0x20e>
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	f04f 32ff 	mov.w	r2, #4294967295
 800bbbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbc0:	f10a 0a01 	add.w	sl, sl, #1
 800bbc4:	9304      	str	r3, [sp, #16]
 800bbc6:	9307      	str	r3, [sp, #28]
 800bbc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbcc:	931a      	str	r3, [sp, #104]	; 0x68
 800bbce:	4654      	mov	r4, sl
 800bbd0:	2205      	movs	r2, #5
 800bbd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbd6:	4858      	ldr	r0, [pc, #352]	; (800bd38 <_vfiprintf_r+0x24c>)
 800bbd8:	f7fe ff84 	bl	800aae4 <memchr>
 800bbdc:	9a04      	ldr	r2, [sp, #16]
 800bbde:	b9d8      	cbnz	r0, 800bc18 <_vfiprintf_r+0x12c>
 800bbe0:	06d1      	lsls	r1, r2, #27
 800bbe2:	bf44      	itt	mi
 800bbe4:	2320      	movmi	r3, #32
 800bbe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbea:	0713      	lsls	r3, r2, #28
 800bbec:	bf44      	itt	mi
 800bbee:	232b      	movmi	r3, #43	; 0x2b
 800bbf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbf4:	f89a 3000 	ldrb.w	r3, [sl]
 800bbf8:	2b2a      	cmp	r3, #42	; 0x2a
 800bbfa:	d015      	beq.n	800bc28 <_vfiprintf_r+0x13c>
 800bbfc:	4654      	mov	r4, sl
 800bbfe:	2000      	movs	r0, #0
 800bc00:	f04f 0c0a 	mov.w	ip, #10
 800bc04:	9a07      	ldr	r2, [sp, #28]
 800bc06:	4621      	mov	r1, r4
 800bc08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc0c:	3b30      	subs	r3, #48	; 0x30
 800bc0e:	2b09      	cmp	r3, #9
 800bc10:	d94e      	bls.n	800bcb0 <_vfiprintf_r+0x1c4>
 800bc12:	b1b0      	cbz	r0, 800bc42 <_vfiprintf_r+0x156>
 800bc14:	9207      	str	r2, [sp, #28]
 800bc16:	e014      	b.n	800bc42 <_vfiprintf_r+0x156>
 800bc18:	eba0 0308 	sub.w	r3, r0, r8
 800bc1c:	fa09 f303 	lsl.w	r3, r9, r3
 800bc20:	4313      	orrs	r3, r2
 800bc22:	46a2      	mov	sl, r4
 800bc24:	9304      	str	r3, [sp, #16]
 800bc26:	e7d2      	b.n	800bbce <_vfiprintf_r+0xe2>
 800bc28:	9b03      	ldr	r3, [sp, #12]
 800bc2a:	1d19      	adds	r1, r3, #4
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	9103      	str	r1, [sp, #12]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	bfbb      	ittet	lt
 800bc34:	425b      	neglt	r3, r3
 800bc36:	f042 0202 	orrlt.w	r2, r2, #2
 800bc3a:	9307      	strge	r3, [sp, #28]
 800bc3c:	9307      	strlt	r3, [sp, #28]
 800bc3e:	bfb8      	it	lt
 800bc40:	9204      	strlt	r2, [sp, #16]
 800bc42:	7823      	ldrb	r3, [r4, #0]
 800bc44:	2b2e      	cmp	r3, #46	; 0x2e
 800bc46:	d10c      	bne.n	800bc62 <_vfiprintf_r+0x176>
 800bc48:	7863      	ldrb	r3, [r4, #1]
 800bc4a:	2b2a      	cmp	r3, #42	; 0x2a
 800bc4c:	d135      	bne.n	800bcba <_vfiprintf_r+0x1ce>
 800bc4e:	9b03      	ldr	r3, [sp, #12]
 800bc50:	3402      	adds	r4, #2
 800bc52:	1d1a      	adds	r2, r3, #4
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	9203      	str	r2, [sp, #12]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	bfb8      	it	lt
 800bc5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc60:	9305      	str	r3, [sp, #20]
 800bc62:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800bd3c <_vfiprintf_r+0x250>
 800bc66:	2203      	movs	r2, #3
 800bc68:	4650      	mov	r0, sl
 800bc6a:	7821      	ldrb	r1, [r4, #0]
 800bc6c:	f7fe ff3a 	bl	800aae4 <memchr>
 800bc70:	b140      	cbz	r0, 800bc84 <_vfiprintf_r+0x198>
 800bc72:	2340      	movs	r3, #64	; 0x40
 800bc74:	eba0 000a 	sub.w	r0, r0, sl
 800bc78:	fa03 f000 	lsl.w	r0, r3, r0
 800bc7c:	9b04      	ldr	r3, [sp, #16]
 800bc7e:	3401      	adds	r4, #1
 800bc80:	4303      	orrs	r3, r0
 800bc82:	9304      	str	r3, [sp, #16]
 800bc84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc88:	2206      	movs	r2, #6
 800bc8a:	482d      	ldr	r0, [pc, #180]	; (800bd40 <_vfiprintf_r+0x254>)
 800bc8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc90:	f7fe ff28 	bl	800aae4 <memchr>
 800bc94:	2800      	cmp	r0, #0
 800bc96:	d03f      	beq.n	800bd18 <_vfiprintf_r+0x22c>
 800bc98:	4b2a      	ldr	r3, [pc, #168]	; (800bd44 <_vfiprintf_r+0x258>)
 800bc9a:	bb1b      	cbnz	r3, 800bce4 <_vfiprintf_r+0x1f8>
 800bc9c:	9b03      	ldr	r3, [sp, #12]
 800bc9e:	3307      	adds	r3, #7
 800bca0:	f023 0307 	bic.w	r3, r3, #7
 800bca4:	3308      	adds	r3, #8
 800bca6:	9303      	str	r3, [sp, #12]
 800bca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcaa:	443b      	add	r3, r7
 800bcac:	9309      	str	r3, [sp, #36]	; 0x24
 800bcae:	e767      	b.n	800bb80 <_vfiprintf_r+0x94>
 800bcb0:	460c      	mov	r4, r1
 800bcb2:	2001      	movs	r0, #1
 800bcb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcb8:	e7a5      	b.n	800bc06 <_vfiprintf_r+0x11a>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	f04f 0c0a 	mov.w	ip, #10
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	3401      	adds	r4, #1
 800bcc4:	9305      	str	r3, [sp, #20]
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bccc:	3a30      	subs	r2, #48	; 0x30
 800bcce:	2a09      	cmp	r2, #9
 800bcd0:	d903      	bls.n	800bcda <_vfiprintf_r+0x1ee>
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d0c5      	beq.n	800bc62 <_vfiprintf_r+0x176>
 800bcd6:	9105      	str	r1, [sp, #20]
 800bcd8:	e7c3      	b.n	800bc62 <_vfiprintf_r+0x176>
 800bcda:	4604      	mov	r4, r0
 800bcdc:	2301      	movs	r3, #1
 800bcde:	fb0c 2101 	mla	r1, ip, r1, r2
 800bce2:	e7f0      	b.n	800bcc6 <_vfiprintf_r+0x1da>
 800bce4:	ab03      	add	r3, sp, #12
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	462a      	mov	r2, r5
 800bcea:	4630      	mov	r0, r6
 800bcec:	4b16      	ldr	r3, [pc, #88]	; (800bd48 <_vfiprintf_r+0x25c>)
 800bcee:	a904      	add	r1, sp, #16
 800bcf0:	f7fc f86a 	bl	8007dc8 <_printf_float>
 800bcf4:	4607      	mov	r7, r0
 800bcf6:	1c78      	adds	r0, r7, #1
 800bcf8:	d1d6      	bne.n	800bca8 <_vfiprintf_r+0x1bc>
 800bcfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcfc:	07d9      	lsls	r1, r3, #31
 800bcfe:	d405      	bmi.n	800bd0c <_vfiprintf_r+0x220>
 800bd00:	89ab      	ldrh	r3, [r5, #12]
 800bd02:	059a      	lsls	r2, r3, #22
 800bd04:	d402      	bmi.n	800bd0c <_vfiprintf_r+0x220>
 800bd06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd08:	f000 fa9d 	bl	800c246 <__retarget_lock_release_recursive>
 800bd0c:	89ab      	ldrh	r3, [r5, #12]
 800bd0e:	065b      	lsls	r3, r3, #25
 800bd10:	f53f af12 	bmi.w	800bb38 <_vfiprintf_r+0x4c>
 800bd14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd16:	e711      	b.n	800bb3c <_vfiprintf_r+0x50>
 800bd18:	ab03      	add	r3, sp, #12
 800bd1a:	9300      	str	r3, [sp, #0]
 800bd1c:	462a      	mov	r2, r5
 800bd1e:	4630      	mov	r0, r6
 800bd20:	4b09      	ldr	r3, [pc, #36]	; (800bd48 <_vfiprintf_r+0x25c>)
 800bd22:	a904      	add	r1, sp, #16
 800bd24:	f7fc faec 	bl	8008300 <_printf_i>
 800bd28:	e7e4      	b.n	800bcf4 <_vfiprintf_r+0x208>
 800bd2a:	bf00      	nop
 800bd2c:	0801e354 	.word	0x0801e354
 800bd30:	0801e374 	.word	0x0801e374
 800bd34:	0801e334 	.word	0x0801e334
 800bd38:	0801e2e4 	.word	0x0801e2e4
 800bd3c:	0801e2ea 	.word	0x0801e2ea
 800bd40:	0801e2ee 	.word	0x0801e2ee
 800bd44:	08007dc9 	.word	0x08007dc9
 800bd48:	0800bac9 	.word	0x0800bac9

0800bd4c <__swbuf_r>:
 800bd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd4e:	460e      	mov	r6, r1
 800bd50:	4614      	mov	r4, r2
 800bd52:	4605      	mov	r5, r0
 800bd54:	b118      	cbz	r0, 800bd5e <__swbuf_r+0x12>
 800bd56:	6983      	ldr	r3, [r0, #24]
 800bd58:	b90b      	cbnz	r3, 800bd5e <__swbuf_r+0x12>
 800bd5a:	f000 f9d5 	bl	800c108 <__sinit>
 800bd5e:	4b21      	ldr	r3, [pc, #132]	; (800bde4 <__swbuf_r+0x98>)
 800bd60:	429c      	cmp	r4, r3
 800bd62:	d12b      	bne.n	800bdbc <__swbuf_r+0x70>
 800bd64:	686c      	ldr	r4, [r5, #4]
 800bd66:	69a3      	ldr	r3, [r4, #24]
 800bd68:	60a3      	str	r3, [r4, #8]
 800bd6a:	89a3      	ldrh	r3, [r4, #12]
 800bd6c:	071a      	lsls	r2, r3, #28
 800bd6e:	d52f      	bpl.n	800bdd0 <__swbuf_r+0x84>
 800bd70:	6923      	ldr	r3, [r4, #16]
 800bd72:	b36b      	cbz	r3, 800bdd0 <__swbuf_r+0x84>
 800bd74:	6923      	ldr	r3, [r4, #16]
 800bd76:	6820      	ldr	r0, [r4, #0]
 800bd78:	b2f6      	uxtb	r6, r6
 800bd7a:	1ac0      	subs	r0, r0, r3
 800bd7c:	6963      	ldr	r3, [r4, #20]
 800bd7e:	4637      	mov	r7, r6
 800bd80:	4283      	cmp	r3, r0
 800bd82:	dc04      	bgt.n	800bd8e <__swbuf_r+0x42>
 800bd84:	4621      	mov	r1, r4
 800bd86:	4628      	mov	r0, r5
 800bd88:	f000 f92a 	bl	800bfe0 <_fflush_r>
 800bd8c:	bb30      	cbnz	r0, 800bddc <__swbuf_r+0x90>
 800bd8e:	68a3      	ldr	r3, [r4, #8]
 800bd90:	3001      	adds	r0, #1
 800bd92:	3b01      	subs	r3, #1
 800bd94:	60a3      	str	r3, [r4, #8]
 800bd96:	6823      	ldr	r3, [r4, #0]
 800bd98:	1c5a      	adds	r2, r3, #1
 800bd9a:	6022      	str	r2, [r4, #0]
 800bd9c:	701e      	strb	r6, [r3, #0]
 800bd9e:	6963      	ldr	r3, [r4, #20]
 800bda0:	4283      	cmp	r3, r0
 800bda2:	d004      	beq.n	800bdae <__swbuf_r+0x62>
 800bda4:	89a3      	ldrh	r3, [r4, #12]
 800bda6:	07db      	lsls	r3, r3, #31
 800bda8:	d506      	bpl.n	800bdb8 <__swbuf_r+0x6c>
 800bdaa:	2e0a      	cmp	r6, #10
 800bdac:	d104      	bne.n	800bdb8 <__swbuf_r+0x6c>
 800bdae:	4621      	mov	r1, r4
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	f000 f915 	bl	800bfe0 <_fflush_r>
 800bdb6:	b988      	cbnz	r0, 800bddc <__swbuf_r+0x90>
 800bdb8:	4638      	mov	r0, r7
 800bdba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdbc:	4b0a      	ldr	r3, [pc, #40]	; (800bde8 <__swbuf_r+0x9c>)
 800bdbe:	429c      	cmp	r4, r3
 800bdc0:	d101      	bne.n	800bdc6 <__swbuf_r+0x7a>
 800bdc2:	68ac      	ldr	r4, [r5, #8]
 800bdc4:	e7cf      	b.n	800bd66 <__swbuf_r+0x1a>
 800bdc6:	4b09      	ldr	r3, [pc, #36]	; (800bdec <__swbuf_r+0xa0>)
 800bdc8:	429c      	cmp	r4, r3
 800bdca:	bf08      	it	eq
 800bdcc:	68ec      	ldreq	r4, [r5, #12]
 800bdce:	e7ca      	b.n	800bd66 <__swbuf_r+0x1a>
 800bdd0:	4621      	mov	r1, r4
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	f000 f80c 	bl	800bdf0 <__swsetup_r>
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	d0cb      	beq.n	800bd74 <__swbuf_r+0x28>
 800bddc:	f04f 37ff 	mov.w	r7, #4294967295
 800bde0:	e7ea      	b.n	800bdb8 <__swbuf_r+0x6c>
 800bde2:	bf00      	nop
 800bde4:	0801e354 	.word	0x0801e354
 800bde8:	0801e374 	.word	0x0801e374
 800bdec:	0801e334 	.word	0x0801e334

0800bdf0 <__swsetup_r>:
 800bdf0:	4b32      	ldr	r3, [pc, #200]	; (800bebc <__swsetup_r+0xcc>)
 800bdf2:	b570      	push	{r4, r5, r6, lr}
 800bdf4:	681d      	ldr	r5, [r3, #0]
 800bdf6:	4606      	mov	r6, r0
 800bdf8:	460c      	mov	r4, r1
 800bdfa:	b125      	cbz	r5, 800be06 <__swsetup_r+0x16>
 800bdfc:	69ab      	ldr	r3, [r5, #24]
 800bdfe:	b913      	cbnz	r3, 800be06 <__swsetup_r+0x16>
 800be00:	4628      	mov	r0, r5
 800be02:	f000 f981 	bl	800c108 <__sinit>
 800be06:	4b2e      	ldr	r3, [pc, #184]	; (800bec0 <__swsetup_r+0xd0>)
 800be08:	429c      	cmp	r4, r3
 800be0a:	d10f      	bne.n	800be2c <__swsetup_r+0x3c>
 800be0c:	686c      	ldr	r4, [r5, #4]
 800be0e:	89a3      	ldrh	r3, [r4, #12]
 800be10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be14:	0719      	lsls	r1, r3, #28
 800be16:	d42c      	bmi.n	800be72 <__swsetup_r+0x82>
 800be18:	06dd      	lsls	r5, r3, #27
 800be1a:	d411      	bmi.n	800be40 <__swsetup_r+0x50>
 800be1c:	2309      	movs	r3, #9
 800be1e:	6033      	str	r3, [r6, #0]
 800be20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be24:	f04f 30ff 	mov.w	r0, #4294967295
 800be28:	81a3      	strh	r3, [r4, #12]
 800be2a:	e03e      	b.n	800beaa <__swsetup_r+0xba>
 800be2c:	4b25      	ldr	r3, [pc, #148]	; (800bec4 <__swsetup_r+0xd4>)
 800be2e:	429c      	cmp	r4, r3
 800be30:	d101      	bne.n	800be36 <__swsetup_r+0x46>
 800be32:	68ac      	ldr	r4, [r5, #8]
 800be34:	e7eb      	b.n	800be0e <__swsetup_r+0x1e>
 800be36:	4b24      	ldr	r3, [pc, #144]	; (800bec8 <__swsetup_r+0xd8>)
 800be38:	429c      	cmp	r4, r3
 800be3a:	bf08      	it	eq
 800be3c:	68ec      	ldreq	r4, [r5, #12]
 800be3e:	e7e6      	b.n	800be0e <__swsetup_r+0x1e>
 800be40:	0758      	lsls	r0, r3, #29
 800be42:	d512      	bpl.n	800be6a <__swsetup_r+0x7a>
 800be44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be46:	b141      	cbz	r1, 800be5a <__swsetup_r+0x6a>
 800be48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be4c:	4299      	cmp	r1, r3
 800be4e:	d002      	beq.n	800be56 <__swsetup_r+0x66>
 800be50:	4630      	mov	r0, r6
 800be52:	f7ff fb2f 	bl	800b4b4 <_free_r>
 800be56:	2300      	movs	r3, #0
 800be58:	6363      	str	r3, [r4, #52]	; 0x34
 800be5a:	89a3      	ldrh	r3, [r4, #12]
 800be5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be60:	81a3      	strh	r3, [r4, #12]
 800be62:	2300      	movs	r3, #0
 800be64:	6063      	str	r3, [r4, #4]
 800be66:	6923      	ldr	r3, [r4, #16]
 800be68:	6023      	str	r3, [r4, #0]
 800be6a:	89a3      	ldrh	r3, [r4, #12]
 800be6c:	f043 0308 	orr.w	r3, r3, #8
 800be70:	81a3      	strh	r3, [r4, #12]
 800be72:	6923      	ldr	r3, [r4, #16]
 800be74:	b94b      	cbnz	r3, 800be8a <__swsetup_r+0x9a>
 800be76:	89a3      	ldrh	r3, [r4, #12]
 800be78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be80:	d003      	beq.n	800be8a <__swsetup_r+0x9a>
 800be82:	4621      	mov	r1, r4
 800be84:	4630      	mov	r0, r6
 800be86:	f000 fa05 	bl	800c294 <__smakebuf_r>
 800be8a:	89a0      	ldrh	r0, [r4, #12]
 800be8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be90:	f010 0301 	ands.w	r3, r0, #1
 800be94:	d00a      	beq.n	800beac <__swsetup_r+0xbc>
 800be96:	2300      	movs	r3, #0
 800be98:	60a3      	str	r3, [r4, #8]
 800be9a:	6963      	ldr	r3, [r4, #20]
 800be9c:	425b      	negs	r3, r3
 800be9e:	61a3      	str	r3, [r4, #24]
 800bea0:	6923      	ldr	r3, [r4, #16]
 800bea2:	b943      	cbnz	r3, 800beb6 <__swsetup_r+0xc6>
 800bea4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bea8:	d1ba      	bne.n	800be20 <__swsetup_r+0x30>
 800beaa:	bd70      	pop	{r4, r5, r6, pc}
 800beac:	0781      	lsls	r1, r0, #30
 800beae:	bf58      	it	pl
 800beb0:	6963      	ldrpl	r3, [r4, #20]
 800beb2:	60a3      	str	r3, [r4, #8]
 800beb4:	e7f4      	b.n	800bea0 <__swsetup_r+0xb0>
 800beb6:	2000      	movs	r0, #0
 800beb8:	e7f7      	b.n	800beaa <__swsetup_r+0xba>
 800beba:	bf00      	nop
 800bebc:	2000000c 	.word	0x2000000c
 800bec0:	0801e354 	.word	0x0801e354
 800bec4:	0801e374 	.word	0x0801e374
 800bec8:	0801e334 	.word	0x0801e334

0800becc <abort>:
 800becc:	2006      	movs	r0, #6
 800bece:	b508      	push	{r3, lr}
 800bed0:	f000 fa50 	bl	800c374 <raise>
 800bed4:	2001      	movs	r0, #1
 800bed6:	f7f9 f86f 	bl	8004fb8 <_exit>
	...

0800bedc <__sflush_r>:
 800bedc:	898a      	ldrh	r2, [r1, #12]
 800bede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bee0:	4605      	mov	r5, r0
 800bee2:	0710      	lsls	r0, r2, #28
 800bee4:	460c      	mov	r4, r1
 800bee6:	d457      	bmi.n	800bf98 <__sflush_r+0xbc>
 800bee8:	684b      	ldr	r3, [r1, #4]
 800beea:	2b00      	cmp	r3, #0
 800beec:	dc04      	bgt.n	800bef8 <__sflush_r+0x1c>
 800beee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	dc01      	bgt.n	800bef8 <__sflush_r+0x1c>
 800bef4:	2000      	movs	r0, #0
 800bef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bef8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800befa:	2e00      	cmp	r6, #0
 800befc:	d0fa      	beq.n	800bef4 <__sflush_r+0x18>
 800befe:	2300      	movs	r3, #0
 800bf00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf04:	682f      	ldr	r7, [r5, #0]
 800bf06:	602b      	str	r3, [r5, #0]
 800bf08:	d032      	beq.n	800bf70 <__sflush_r+0x94>
 800bf0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf0c:	89a3      	ldrh	r3, [r4, #12]
 800bf0e:	075a      	lsls	r2, r3, #29
 800bf10:	d505      	bpl.n	800bf1e <__sflush_r+0x42>
 800bf12:	6863      	ldr	r3, [r4, #4]
 800bf14:	1ac0      	subs	r0, r0, r3
 800bf16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf18:	b10b      	cbz	r3, 800bf1e <__sflush_r+0x42>
 800bf1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf1c:	1ac0      	subs	r0, r0, r3
 800bf1e:	2300      	movs	r3, #0
 800bf20:	4602      	mov	r2, r0
 800bf22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf24:	4628      	mov	r0, r5
 800bf26:	6a21      	ldr	r1, [r4, #32]
 800bf28:	47b0      	blx	r6
 800bf2a:	1c43      	adds	r3, r0, #1
 800bf2c:	89a3      	ldrh	r3, [r4, #12]
 800bf2e:	d106      	bne.n	800bf3e <__sflush_r+0x62>
 800bf30:	6829      	ldr	r1, [r5, #0]
 800bf32:	291d      	cmp	r1, #29
 800bf34:	d82c      	bhi.n	800bf90 <__sflush_r+0xb4>
 800bf36:	4a29      	ldr	r2, [pc, #164]	; (800bfdc <__sflush_r+0x100>)
 800bf38:	40ca      	lsrs	r2, r1
 800bf3a:	07d6      	lsls	r6, r2, #31
 800bf3c:	d528      	bpl.n	800bf90 <__sflush_r+0xb4>
 800bf3e:	2200      	movs	r2, #0
 800bf40:	6062      	str	r2, [r4, #4]
 800bf42:	6922      	ldr	r2, [r4, #16]
 800bf44:	04d9      	lsls	r1, r3, #19
 800bf46:	6022      	str	r2, [r4, #0]
 800bf48:	d504      	bpl.n	800bf54 <__sflush_r+0x78>
 800bf4a:	1c42      	adds	r2, r0, #1
 800bf4c:	d101      	bne.n	800bf52 <__sflush_r+0x76>
 800bf4e:	682b      	ldr	r3, [r5, #0]
 800bf50:	b903      	cbnz	r3, 800bf54 <__sflush_r+0x78>
 800bf52:	6560      	str	r0, [r4, #84]	; 0x54
 800bf54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf56:	602f      	str	r7, [r5, #0]
 800bf58:	2900      	cmp	r1, #0
 800bf5a:	d0cb      	beq.n	800bef4 <__sflush_r+0x18>
 800bf5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf60:	4299      	cmp	r1, r3
 800bf62:	d002      	beq.n	800bf6a <__sflush_r+0x8e>
 800bf64:	4628      	mov	r0, r5
 800bf66:	f7ff faa5 	bl	800b4b4 <_free_r>
 800bf6a:	2000      	movs	r0, #0
 800bf6c:	6360      	str	r0, [r4, #52]	; 0x34
 800bf6e:	e7c2      	b.n	800bef6 <__sflush_r+0x1a>
 800bf70:	6a21      	ldr	r1, [r4, #32]
 800bf72:	2301      	movs	r3, #1
 800bf74:	4628      	mov	r0, r5
 800bf76:	47b0      	blx	r6
 800bf78:	1c41      	adds	r1, r0, #1
 800bf7a:	d1c7      	bne.n	800bf0c <__sflush_r+0x30>
 800bf7c:	682b      	ldr	r3, [r5, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d0c4      	beq.n	800bf0c <__sflush_r+0x30>
 800bf82:	2b1d      	cmp	r3, #29
 800bf84:	d001      	beq.n	800bf8a <__sflush_r+0xae>
 800bf86:	2b16      	cmp	r3, #22
 800bf88:	d101      	bne.n	800bf8e <__sflush_r+0xb2>
 800bf8a:	602f      	str	r7, [r5, #0]
 800bf8c:	e7b2      	b.n	800bef4 <__sflush_r+0x18>
 800bf8e:	89a3      	ldrh	r3, [r4, #12]
 800bf90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf94:	81a3      	strh	r3, [r4, #12]
 800bf96:	e7ae      	b.n	800bef6 <__sflush_r+0x1a>
 800bf98:	690f      	ldr	r7, [r1, #16]
 800bf9a:	2f00      	cmp	r7, #0
 800bf9c:	d0aa      	beq.n	800bef4 <__sflush_r+0x18>
 800bf9e:	0793      	lsls	r3, r2, #30
 800bfa0:	bf18      	it	ne
 800bfa2:	2300      	movne	r3, #0
 800bfa4:	680e      	ldr	r6, [r1, #0]
 800bfa6:	bf08      	it	eq
 800bfa8:	694b      	ldreq	r3, [r1, #20]
 800bfaa:	1bf6      	subs	r6, r6, r7
 800bfac:	600f      	str	r7, [r1, #0]
 800bfae:	608b      	str	r3, [r1, #8]
 800bfb0:	2e00      	cmp	r6, #0
 800bfb2:	dd9f      	ble.n	800bef4 <__sflush_r+0x18>
 800bfb4:	4633      	mov	r3, r6
 800bfb6:	463a      	mov	r2, r7
 800bfb8:	4628      	mov	r0, r5
 800bfba:	6a21      	ldr	r1, [r4, #32]
 800bfbc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bfc0:	47e0      	blx	ip
 800bfc2:	2800      	cmp	r0, #0
 800bfc4:	dc06      	bgt.n	800bfd4 <__sflush_r+0xf8>
 800bfc6:	89a3      	ldrh	r3, [r4, #12]
 800bfc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfd0:	81a3      	strh	r3, [r4, #12]
 800bfd2:	e790      	b.n	800bef6 <__sflush_r+0x1a>
 800bfd4:	4407      	add	r7, r0
 800bfd6:	1a36      	subs	r6, r6, r0
 800bfd8:	e7ea      	b.n	800bfb0 <__sflush_r+0xd4>
 800bfda:	bf00      	nop
 800bfdc:	20400001 	.word	0x20400001

0800bfe0 <_fflush_r>:
 800bfe0:	b538      	push	{r3, r4, r5, lr}
 800bfe2:	690b      	ldr	r3, [r1, #16]
 800bfe4:	4605      	mov	r5, r0
 800bfe6:	460c      	mov	r4, r1
 800bfe8:	b913      	cbnz	r3, 800bff0 <_fflush_r+0x10>
 800bfea:	2500      	movs	r5, #0
 800bfec:	4628      	mov	r0, r5
 800bfee:	bd38      	pop	{r3, r4, r5, pc}
 800bff0:	b118      	cbz	r0, 800bffa <_fflush_r+0x1a>
 800bff2:	6983      	ldr	r3, [r0, #24]
 800bff4:	b90b      	cbnz	r3, 800bffa <_fflush_r+0x1a>
 800bff6:	f000 f887 	bl	800c108 <__sinit>
 800bffa:	4b14      	ldr	r3, [pc, #80]	; (800c04c <_fflush_r+0x6c>)
 800bffc:	429c      	cmp	r4, r3
 800bffe:	d11b      	bne.n	800c038 <_fflush_r+0x58>
 800c000:	686c      	ldr	r4, [r5, #4]
 800c002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d0ef      	beq.n	800bfea <_fflush_r+0xa>
 800c00a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c00c:	07d0      	lsls	r0, r2, #31
 800c00e:	d404      	bmi.n	800c01a <_fflush_r+0x3a>
 800c010:	0599      	lsls	r1, r3, #22
 800c012:	d402      	bmi.n	800c01a <_fflush_r+0x3a>
 800c014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c016:	f000 f915 	bl	800c244 <__retarget_lock_acquire_recursive>
 800c01a:	4628      	mov	r0, r5
 800c01c:	4621      	mov	r1, r4
 800c01e:	f7ff ff5d 	bl	800bedc <__sflush_r>
 800c022:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c024:	4605      	mov	r5, r0
 800c026:	07da      	lsls	r2, r3, #31
 800c028:	d4e0      	bmi.n	800bfec <_fflush_r+0xc>
 800c02a:	89a3      	ldrh	r3, [r4, #12]
 800c02c:	059b      	lsls	r3, r3, #22
 800c02e:	d4dd      	bmi.n	800bfec <_fflush_r+0xc>
 800c030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c032:	f000 f908 	bl	800c246 <__retarget_lock_release_recursive>
 800c036:	e7d9      	b.n	800bfec <_fflush_r+0xc>
 800c038:	4b05      	ldr	r3, [pc, #20]	; (800c050 <_fflush_r+0x70>)
 800c03a:	429c      	cmp	r4, r3
 800c03c:	d101      	bne.n	800c042 <_fflush_r+0x62>
 800c03e:	68ac      	ldr	r4, [r5, #8]
 800c040:	e7df      	b.n	800c002 <_fflush_r+0x22>
 800c042:	4b04      	ldr	r3, [pc, #16]	; (800c054 <_fflush_r+0x74>)
 800c044:	429c      	cmp	r4, r3
 800c046:	bf08      	it	eq
 800c048:	68ec      	ldreq	r4, [r5, #12]
 800c04a:	e7da      	b.n	800c002 <_fflush_r+0x22>
 800c04c:	0801e354 	.word	0x0801e354
 800c050:	0801e374 	.word	0x0801e374
 800c054:	0801e334 	.word	0x0801e334

0800c058 <std>:
 800c058:	2300      	movs	r3, #0
 800c05a:	b510      	push	{r4, lr}
 800c05c:	4604      	mov	r4, r0
 800c05e:	e9c0 3300 	strd	r3, r3, [r0]
 800c062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c066:	6083      	str	r3, [r0, #8]
 800c068:	8181      	strh	r1, [r0, #12]
 800c06a:	6643      	str	r3, [r0, #100]	; 0x64
 800c06c:	81c2      	strh	r2, [r0, #14]
 800c06e:	6183      	str	r3, [r0, #24]
 800c070:	4619      	mov	r1, r3
 800c072:	2208      	movs	r2, #8
 800c074:	305c      	adds	r0, #92	; 0x5c
 800c076:	f7fb fe01 	bl	8007c7c <memset>
 800c07a:	4b05      	ldr	r3, [pc, #20]	; (800c090 <std+0x38>)
 800c07c:	6224      	str	r4, [r4, #32]
 800c07e:	6263      	str	r3, [r4, #36]	; 0x24
 800c080:	4b04      	ldr	r3, [pc, #16]	; (800c094 <std+0x3c>)
 800c082:	62a3      	str	r3, [r4, #40]	; 0x28
 800c084:	4b04      	ldr	r3, [pc, #16]	; (800c098 <std+0x40>)
 800c086:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c088:	4b04      	ldr	r3, [pc, #16]	; (800c09c <std+0x44>)
 800c08a:	6323      	str	r3, [r4, #48]	; 0x30
 800c08c:	bd10      	pop	{r4, pc}
 800c08e:	bf00      	nop
 800c090:	0800c3ad 	.word	0x0800c3ad
 800c094:	0800c3cf 	.word	0x0800c3cf
 800c098:	0800c407 	.word	0x0800c407
 800c09c:	0800c42b 	.word	0x0800c42b

0800c0a0 <_cleanup_r>:
 800c0a0:	4901      	ldr	r1, [pc, #4]	; (800c0a8 <_cleanup_r+0x8>)
 800c0a2:	f000 b8af 	b.w	800c204 <_fwalk_reent>
 800c0a6:	bf00      	nop
 800c0a8:	0800bfe1 	.word	0x0800bfe1

0800c0ac <__sfmoreglue>:
 800c0ac:	2268      	movs	r2, #104	; 0x68
 800c0ae:	b570      	push	{r4, r5, r6, lr}
 800c0b0:	1e4d      	subs	r5, r1, #1
 800c0b2:	4355      	muls	r5, r2
 800c0b4:	460e      	mov	r6, r1
 800c0b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c0ba:	f7ff fa63 	bl	800b584 <_malloc_r>
 800c0be:	4604      	mov	r4, r0
 800c0c0:	b140      	cbz	r0, 800c0d4 <__sfmoreglue+0x28>
 800c0c2:	2100      	movs	r1, #0
 800c0c4:	e9c0 1600 	strd	r1, r6, [r0]
 800c0c8:	300c      	adds	r0, #12
 800c0ca:	60a0      	str	r0, [r4, #8]
 800c0cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c0d0:	f7fb fdd4 	bl	8007c7c <memset>
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	bd70      	pop	{r4, r5, r6, pc}

0800c0d8 <__sfp_lock_acquire>:
 800c0d8:	4801      	ldr	r0, [pc, #4]	; (800c0e0 <__sfp_lock_acquire+0x8>)
 800c0da:	f000 b8b3 	b.w	800c244 <__retarget_lock_acquire_recursive>
 800c0de:	bf00      	nop
 800c0e0:	20000985 	.word	0x20000985

0800c0e4 <__sfp_lock_release>:
 800c0e4:	4801      	ldr	r0, [pc, #4]	; (800c0ec <__sfp_lock_release+0x8>)
 800c0e6:	f000 b8ae 	b.w	800c246 <__retarget_lock_release_recursive>
 800c0ea:	bf00      	nop
 800c0ec:	20000985 	.word	0x20000985

0800c0f0 <__sinit_lock_acquire>:
 800c0f0:	4801      	ldr	r0, [pc, #4]	; (800c0f8 <__sinit_lock_acquire+0x8>)
 800c0f2:	f000 b8a7 	b.w	800c244 <__retarget_lock_acquire_recursive>
 800c0f6:	bf00      	nop
 800c0f8:	20000986 	.word	0x20000986

0800c0fc <__sinit_lock_release>:
 800c0fc:	4801      	ldr	r0, [pc, #4]	; (800c104 <__sinit_lock_release+0x8>)
 800c0fe:	f000 b8a2 	b.w	800c246 <__retarget_lock_release_recursive>
 800c102:	bf00      	nop
 800c104:	20000986 	.word	0x20000986

0800c108 <__sinit>:
 800c108:	b510      	push	{r4, lr}
 800c10a:	4604      	mov	r4, r0
 800c10c:	f7ff fff0 	bl	800c0f0 <__sinit_lock_acquire>
 800c110:	69a3      	ldr	r3, [r4, #24]
 800c112:	b11b      	cbz	r3, 800c11c <__sinit+0x14>
 800c114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c118:	f7ff bff0 	b.w	800c0fc <__sinit_lock_release>
 800c11c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c120:	6523      	str	r3, [r4, #80]	; 0x50
 800c122:	4b13      	ldr	r3, [pc, #76]	; (800c170 <__sinit+0x68>)
 800c124:	4a13      	ldr	r2, [pc, #76]	; (800c174 <__sinit+0x6c>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	62a2      	str	r2, [r4, #40]	; 0x28
 800c12a:	42a3      	cmp	r3, r4
 800c12c:	bf08      	it	eq
 800c12e:	2301      	moveq	r3, #1
 800c130:	4620      	mov	r0, r4
 800c132:	bf08      	it	eq
 800c134:	61a3      	streq	r3, [r4, #24]
 800c136:	f000 f81f 	bl	800c178 <__sfp>
 800c13a:	6060      	str	r0, [r4, #4]
 800c13c:	4620      	mov	r0, r4
 800c13e:	f000 f81b 	bl	800c178 <__sfp>
 800c142:	60a0      	str	r0, [r4, #8]
 800c144:	4620      	mov	r0, r4
 800c146:	f000 f817 	bl	800c178 <__sfp>
 800c14a:	2200      	movs	r2, #0
 800c14c:	2104      	movs	r1, #4
 800c14e:	60e0      	str	r0, [r4, #12]
 800c150:	6860      	ldr	r0, [r4, #4]
 800c152:	f7ff ff81 	bl	800c058 <std>
 800c156:	2201      	movs	r2, #1
 800c158:	2109      	movs	r1, #9
 800c15a:	68a0      	ldr	r0, [r4, #8]
 800c15c:	f7ff ff7c 	bl	800c058 <std>
 800c160:	2202      	movs	r2, #2
 800c162:	2112      	movs	r1, #18
 800c164:	68e0      	ldr	r0, [r4, #12]
 800c166:	f7ff ff77 	bl	800c058 <std>
 800c16a:	2301      	movs	r3, #1
 800c16c:	61a3      	str	r3, [r4, #24]
 800c16e:	e7d1      	b.n	800c114 <__sinit+0xc>
 800c170:	0801def0 	.word	0x0801def0
 800c174:	0800c0a1 	.word	0x0800c0a1

0800c178 <__sfp>:
 800c178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c17a:	4607      	mov	r7, r0
 800c17c:	f7ff ffac 	bl	800c0d8 <__sfp_lock_acquire>
 800c180:	4b1e      	ldr	r3, [pc, #120]	; (800c1fc <__sfp+0x84>)
 800c182:	681e      	ldr	r6, [r3, #0]
 800c184:	69b3      	ldr	r3, [r6, #24]
 800c186:	b913      	cbnz	r3, 800c18e <__sfp+0x16>
 800c188:	4630      	mov	r0, r6
 800c18a:	f7ff ffbd 	bl	800c108 <__sinit>
 800c18e:	3648      	adds	r6, #72	; 0x48
 800c190:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c194:	3b01      	subs	r3, #1
 800c196:	d503      	bpl.n	800c1a0 <__sfp+0x28>
 800c198:	6833      	ldr	r3, [r6, #0]
 800c19a:	b30b      	cbz	r3, 800c1e0 <__sfp+0x68>
 800c19c:	6836      	ldr	r6, [r6, #0]
 800c19e:	e7f7      	b.n	800c190 <__sfp+0x18>
 800c1a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c1a4:	b9d5      	cbnz	r5, 800c1dc <__sfp+0x64>
 800c1a6:	4b16      	ldr	r3, [pc, #88]	; (800c200 <__sfp+0x88>)
 800c1a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c1ac:	60e3      	str	r3, [r4, #12]
 800c1ae:	6665      	str	r5, [r4, #100]	; 0x64
 800c1b0:	f000 f847 	bl	800c242 <__retarget_lock_init_recursive>
 800c1b4:	f7ff ff96 	bl	800c0e4 <__sfp_lock_release>
 800c1b8:	2208      	movs	r2, #8
 800c1ba:	4629      	mov	r1, r5
 800c1bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c1c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c1c4:	6025      	str	r5, [r4, #0]
 800c1c6:	61a5      	str	r5, [r4, #24]
 800c1c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c1cc:	f7fb fd56 	bl	8007c7c <memset>
 800c1d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c1d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c1d8:	4620      	mov	r0, r4
 800c1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1dc:	3468      	adds	r4, #104	; 0x68
 800c1de:	e7d9      	b.n	800c194 <__sfp+0x1c>
 800c1e0:	2104      	movs	r1, #4
 800c1e2:	4638      	mov	r0, r7
 800c1e4:	f7ff ff62 	bl	800c0ac <__sfmoreglue>
 800c1e8:	4604      	mov	r4, r0
 800c1ea:	6030      	str	r0, [r6, #0]
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	d1d5      	bne.n	800c19c <__sfp+0x24>
 800c1f0:	f7ff ff78 	bl	800c0e4 <__sfp_lock_release>
 800c1f4:	230c      	movs	r3, #12
 800c1f6:	603b      	str	r3, [r7, #0]
 800c1f8:	e7ee      	b.n	800c1d8 <__sfp+0x60>
 800c1fa:	bf00      	nop
 800c1fc:	0801def0 	.word	0x0801def0
 800c200:	ffff0001 	.word	0xffff0001

0800c204 <_fwalk_reent>:
 800c204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c208:	4606      	mov	r6, r0
 800c20a:	4688      	mov	r8, r1
 800c20c:	2700      	movs	r7, #0
 800c20e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c212:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c216:	f1b9 0901 	subs.w	r9, r9, #1
 800c21a:	d505      	bpl.n	800c228 <_fwalk_reent+0x24>
 800c21c:	6824      	ldr	r4, [r4, #0]
 800c21e:	2c00      	cmp	r4, #0
 800c220:	d1f7      	bne.n	800c212 <_fwalk_reent+0xe>
 800c222:	4638      	mov	r0, r7
 800c224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c228:	89ab      	ldrh	r3, [r5, #12]
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d907      	bls.n	800c23e <_fwalk_reent+0x3a>
 800c22e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c232:	3301      	adds	r3, #1
 800c234:	d003      	beq.n	800c23e <_fwalk_reent+0x3a>
 800c236:	4629      	mov	r1, r5
 800c238:	4630      	mov	r0, r6
 800c23a:	47c0      	blx	r8
 800c23c:	4307      	orrs	r7, r0
 800c23e:	3568      	adds	r5, #104	; 0x68
 800c240:	e7e9      	b.n	800c216 <_fwalk_reent+0x12>

0800c242 <__retarget_lock_init_recursive>:
 800c242:	4770      	bx	lr

0800c244 <__retarget_lock_acquire_recursive>:
 800c244:	4770      	bx	lr

0800c246 <__retarget_lock_release_recursive>:
 800c246:	4770      	bx	lr

0800c248 <__swhatbuf_r>:
 800c248:	b570      	push	{r4, r5, r6, lr}
 800c24a:	460e      	mov	r6, r1
 800c24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c250:	4614      	mov	r4, r2
 800c252:	2900      	cmp	r1, #0
 800c254:	461d      	mov	r5, r3
 800c256:	b096      	sub	sp, #88	; 0x58
 800c258:	da08      	bge.n	800c26c <__swhatbuf_r+0x24>
 800c25a:	2200      	movs	r2, #0
 800c25c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c260:	602a      	str	r2, [r5, #0]
 800c262:	061a      	lsls	r2, r3, #24
 800c264:	d410      	bmi.n	800c288 <__swhatbuf_r+0x40>
 800c266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c26a:	e00e      	b.n	800c28a <__swhatbuf_r+0x42>
 800c26c:	466a      	mov	r2, sp
 800c26e:	f000 f903 	bl	800c478 <_fstat_r>
 800c272:	2800      	cmp	r0, #0
 800c274:	dbf1      	blt.n	800c25a <__swhatbuf_r+0x12>
 800c276:	9a01      	ldr	r2, [sp, #4]
 800c278:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c27c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c280:	425a      	negs	r2, r3
 800c282:	415a      	adcs	r2, r3
 800c284:	602a      	str	r2, [r5, #0]
 800c286:	e7ee      	b.n	800c266 <__swhatbuf_r+0x1e>
 800c288:	2340      	movs	r3, #64	; 0x40
 800c28a:	2000      	movs	r0, #0
 800c28c:	6023      	str	r3, [r4, #0]
 800c28e:	b016      	add	sp, #88	; 0x58
 800c290:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c294 <__smakebuf_r>:
 800c294:	898b      	ldrh	r3, [r1, #12]
 800c296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c298:	079d      	lsls	r5, r3, #30
 800c29a:	4606      	mov	r6, r0
 800c29c:	460c      	mov	r4, r1
 800c29e:	d507      	bpl.n	800c2b0 <__smakebuf_r+0x1c>
 800c2a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c2a4:	6023      	str	r3, [r4, #0]
 800c2a6:	6123      	str	r3, [r4, #16]
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	6163      	str	r3, [r4, #20]
 800c2ac:	b002      	add	sp, #8
 800c2ae:	bd70      	pop	{r4, r5, r6, pc}
 800c2b0:	466a      	mov	r2, sp
 800c2b2:	ab01      	add	r3, sp, #4
 800c2b4:	f7ff ffc8 	bl	800c248 <__swhatbuf_r>
 800c2b8:	9900      	ldr	r1, [sp, #0]
 800c2ba:	4605      	mov	r5, r0
 800c2bc:	4630      	mov	r0, r6
 800c2be:	f7ff f961 	bl	800b584 <_malloc_r>
 800c2c2:	b948      	cbnz	r0, 800c2d8 <__smakebuf_r+0x44>
 800c2c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2c8:	059a      	lsls	r2, r3, #22
 800c2ca:	d4ef      	bmi.n	800c2ac <__smakebuf_r+0x18>
 800c2cc:	f023 0303 	bic.w	r3, r3, #3
 800c2d0:	f043 0302 	orr.w	r3, r3, #2
 800c2d4:	81a3      	strh	r3, [r4, #12]
 800c2d6:	e7e3      	b.n	800c2a0 <__smakebuf_r+0xc>
 800c2d8:	4b0d      	ldr	r3, [pc, #52]	; (800c310 <__smakebuf_r+0x7c>)
 800c2da:	62b3      	str	r3, [r6, #40]	; 0x28
 800c2dc:	89a3      	ldrh	r3, [r4, #12]
 800c2de:	6020      	str	r0, [r4, #0]
 800c2e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2e4:	81a3      	strh	r3, [r4, #12]
 800c2e6:	9b00      	ldr	r3, [sp, #0]
 800c2e8:	6120      	str	r0, [r4, #16]
 800c2ea:	6163      	str	r3, [r4, #20]
 800c2ec:	9b01      	ldr	r3, [sp, #4]
 800c2ee:	b15b      	cbz	r3, 800c308 <__smakebuf_r+0x74>
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2f6:	f000 f8d1 	bl	800c49c <_isatty_r>
 800c2fa:	b128      	cbz	r0, 800c308 <__smakebuf_r+0x74>
 800c2fc:	89a3      	ldrh	r3, [r4, #12]
 800c2fe:	f023 0303 	bic.w	r3, r3, #3
 800c302:	f043 0301 	orr.w	r3, r3, #1
 800c306:	81a3      	strh	r3, [r4, #12]
 800c308:	89a0      	ldrh	r0, [r4, #12]
 800c30a:	4305      	orrs	r5, r0
 800c30c:	81a5      	strh	r5, [r4, #12]
 800c30e:	e7cd      	b.n	800c2ac <__smakebuf_r+0x18>
 800c310:	0800c0a1 	.word	0x0800c0a1

0800c314 <_malloc_usable_size_r>:
 800c314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c318:	1f18      	subs	r0, r3, #4
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	bfbc      	itt	lt
 800c31e:	580b      	ldrlt	r3, [r1, r0]
 800c320:	18c0      	addlt	r0, r0, r3
 800c322:	4770      	bx	lr

0800c324 <_raise_r>:
 800c324:	291f      	cmp	r1, #31
 800c326:	b538      	push	{r3, r4, r5, lr}
 800c328:	4604      	mov	r4, r0
 800c32a:	460d      	mov	r5, r1
 800c32c:	d904      	bls.n	800c338 <_raise_r+0x14>
 800c32e:	2316      	movs	r3, #22
 800c330:	6003      	str	r3, [r0, #0]
 800c332:	f04f 30ff 	mov.w	r0, #4294967295
 800c336:	bd38      	pop	{r3, r4, r5, pc}
 800c338:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c33a:	b112      	cbz	r2, 800c342 <_raise_r+0x1e>
 800c33c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c340:	b94b      	cbnz	r3, 800c356 <_raise_r+0x32>
 800c342:	4620      	mov	r0, r4
 800c344:	f000 f830 	bl	800c3a8 <_getpid_r>
 800c348:	462a      	mov	r2, r5
 800c34a:	4601      	mov	r1, r0
 800c34c:	4620      	mov	r0, r4
 800c34e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c352:	f000 b817 	b.w	800c384 <_kill_r>
 800c356:	2b01      	cmp	r3, #1
 800c358:	d00a      	beq.n	800c370 <_raise_r+0x4c>
 800c35a:	1c59      	adds	r1, r3, #1
 800c35c:	d103      	bne.n	800c366 <_raise_r+0x42>
 800c35e:	2316      	movs	r3, #22
 800c360:	6003      	str	r3, [r0, #0]
 800c362:	2001      	movs	r0, #1
 800c364:	e7e7      	b.n	800c336 <_raise_r+0x12>
 800c366:	2400      	movs	r4, #0
 800c368:	4628      	mov	r0, r5
 800c36a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c36e:	4798      	blx	r3
 800c370:	2000      	movs	r0, #0
 800c372:	e7e0      	b.n	800c336 <_raise_r+0x12>

0800c374 <raise>:
 800c374:	4b02      	ldr	r3, [pc, #8]	; (800c380 <raise+0xc>)
 800c376:	4601      	mov	r1, r0
 800c378:	6818      	ldr	r0, [r3, #0]
 800c37a:	f7ff bfd3 	b.w	800c324 <_raise_r>
 800c37e:	bf00      	nop
 800c380:	2000000c 	.word	0x2000000c

0800c384 <_kill_r>:
 800c384:	b538      	push	{r3, r4, r5, lr}
 800c386:	2300      	movs	r3, #0
 800c388:	4d06      	ldr	r5, [pc, #24]	; (800c3a4 <_kill_r+0x20>)
 800c38a:	4604      	mov	r4, r0
 800c38c:	4608      	mov	r0, r1
 800c38e:	4611      	mov	r1, r2
 800c390:	602b      	str	r3, [r5, #0]
 800c392:	f7f8 fe07 	bl	8004fa4 <_kill>
 800c396:	1c43      	adds	r3, r0, #1
 800c398:	d102      	bne.n	800c3a0 <_kill_r+0x1c>
 800c39a:	682b      	ldr	r3, [r5, #0]
 800c39c:	b103      	cbz	r3, 800c3a0 <_kill_r+0x1c>
 800c39e:	6023      	str	r3, [r4, #0]
 800c3a0:	bd38      	pop	{r3, r4, r5, pc}
 800c3a2:	bf00      	nop
 800c3a4:	20000980 	.word	0x20000980

0800c3a8 <_getpid_r>:
 800c3a8:	f7f8 bdfa 	b.w	8004fa0 <_getpid>

0800c3ac <__sread>:
 800c3ac:	b510      	push	{r4, lr}
 800c3ae:	460c      	mov	r4, r1
 800c3b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3b4:	f000 f894 	bl	800c4e0 <_read_r>
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	bfab      	itete	ge
 800c3bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c3be:	89a3      	ldrhlt	r3, [r4, #12]
 800c3c0:	181b      	addge	r3, r3, r0
 800c3c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c3c6:	bfac      	ite	ge
 800c3c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c3ca:	81a3      	strhlt	r3, [r4, #12]
 800c3cc:	bd10      	pop	{r4, pc}

0800c3ce <__swrite>:
 800c3ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d2:	461f      	mov	r7, r3
 800c3d4:	898b      	ldrh	r3, [r1, #12]
 800c3d6:	4605      	mov	r5, r0
 800c3d8:	05db      	lsls	r3, r3, #23
 800c3da:	460c      	mov	r4, r1
 800c3dc:	4616      	mov	r6, r2
 800c3de:	d505      	bpl.n	800c3ec <__swrite+0x1e>
 800c3e0:	2302      	movs	r3, #2
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3e8:	f000 f868 	bl	800c4bc <_lseek_r>
 800c3ec:	89a3      	ldrh	r3, [r4, #12]
 800c3ee:	4632      	mov	r2, r6
 800c3f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3f4:	81a3      	strh	r3, [r4, #12]
 800c3f6:	4628      	mov	r0, r5
 800c3f8:	463b      	mov	r3, r7
 800c3fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c402:	f000 b817 	b.w	800c434 <_write_r>

0800c406 <__sseek>:
 800c406:	b510      	push	{r4, lr}
 800c408:	460c      	mov	r4, r1
 800c40a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c40e:	f000 f855 	bl	800c4bc <_lseek_r>
 800c412:	1c43      	adds	r3, r0, #1
 800c414:	89a3      	ldrh	r3, [r4, #12]
 800c416:	bf15      	itete	ne
 800c418:	6560      	strne	r0, [r4, #84]	; 0x54
 800c41a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c41e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c422:	81a3      	strheq	r3, [r4, #12]
 800c424:	bf18      	it	ne
 800c426:	81a3      	strhne	r3, [r4, #12]
 800c428:	bd10      	pop	{r4, pc}

0800c42a <__sclose>:
 800c42a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c42e:	f000 b813 	b.w	800c458 <_close_r>
	...

0800c434 <_write_r>:
 800c434:	b538      	push	{r3, r4, r5, lr}
 800c436:	4604      	mov	r4, r0
 800c438:	4608      	mov	r0, r1
 800c43a:	4611      	mov	r1, r2
 800c43c:	2200      	movs	r2, #0
 800c43e:	4d05      	ldr	r5, [pc, #20]	; (800c454 <_write_r+0x20>)
 800c440:	602a      	str	r2, [r5, #0]
 800c442:	461a      	mov	r2, r3
 800c444:	f7f8 fdcc 	bl	8004fe0 <_write>
 800c448:	1c43      	adds	r3, r0, #1
 800c44a:	d102      	bne.n	800c452 <_write_r+0x1e>
 800c44c:	682b      	ldr	r3, [r5, #0]
 800c44e:	b103      	cbz	r3, 800c452 <_write_r+0x1e>
 800c450:	6023      	str	r3, [r4, #0]
 800c452:	bd38      	pop	{r3, r4, r5, pc}
 800c454:	20000980 	.word	0x20000980

0800c458 <_close_r>:
 800c458:	b538      	push	{r3, r4, r5, lr}
 800c45a:	2300      	movs	r3, #0
 800c45c:	4d05      	ldr	r5, [pc, #20]	; (800c474 <_close_r+0x1c>)
 800c45e:	4604      	mov	r4, r0
 800c460:	4608      	mov	r0, r1
 800c462:	602b      	str	r3, [r5, #0]
 800c464:	f7f8 fdca 	bl	8004ffc <_close>
 800c468:	1c43      	adds	r3, r0, #1
 800c46a:	d102      	bne.n	800c472 <_close_r+0x1a>
 800c46c:	682b      	ldr	r3, [r5, #0]
 800c46e:	b103      	cbz	r3, 800c472 <_close_r+0x1a>
 800c470:	6023      	str	r3, [r4, #0]
 800c472:	bd38      	pop	{r3, r4, r5, pc}
 800c474:	20000980 	.word	0x20000980

0800c478 <_fstat_r>:
 800c478:	b538      	push	{r3, r4, r5, lr}
 800c47a:	2300      	movs	r3, #0
 800c47c:	4d06      	ldr	r5, [pc, #24]	; (800c498 <_fstat_r+0x20>)
 800c47e:	4604      	mov	r4, r0
 800c480:	4608      	mov	r0, r1
 800c482:	4611      	mov	r1, r2
 800c484:	602b      	str	r3, [r5, #0]
 800c486:	f7f8 fdbd 	bl	8005004 <_fstat>
 800c48a:	1c43      	adds	r3, r0, #1
 800c48c:	d102      	bne.n	800c494 <_fstat_r+0x1c>
 800c48e:	682b      	ldr	r3, [r5, #0]
 800c490:	b103      	cbz	r3, 800c494 <_fstat_r+0x1c>
 800c492:	6023      	str	r3, [r4, #0]
 800c494:	bd38      	pop	{r3, r4, r5, pc}
 800c496:	bf00      	nop
 800c498:	20000980 	.word	0x20000980

0800c49c <_isatty_r>:
 800c49c:	b538      	push	{r3, r4, r5, lr}
 800c49e:	2300      	movs	r3, #0
 800c4a0:	4d05      	ldr	r5, [pc, #20]	; (800c4b8 <_isatty_r+0x1c>)
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	4608      	mov	r0, r1
 800c4a6:	602b      	str	r3, [r5, #0]
 800c4a8:	f7f8 fdb2 	bl	8005010 <_isatty>
 800c4ac:	1c43      	adds	r3, r0, #1
 800c4ae:	d102      	bne.n	800c4b6 <_isatty_r+0x1a>
 800c4b0:	682b      	ldr	r3, [r5, #0]
 800c4b2:	b103      	cbz	r3, 800c4b6 <_isatty_r+0x1a>
 800c4b4:	6023      	str	r3, [r4, #0]
 800c4b6:	bd38      	pop	{r3, r4, r5, pc}
 800c4b8:	20000980 	.word	0x20000980

0800c4bc <_lseek_r>:
 800c4bc:	b538      	push	{r3, r4, r5, lr}
 800c4be:	4604      	mov	r4, r0
 800c4c0:	4608      	mov	r0, r1
 800c4c2:	4611      	mov	r1, r2
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	4d05      	ldr	r5, [pc, #20]	; (800c4dc <_lseek_r+0x20>)
 800c4c8:	602a      	str	r2, [r5, #0]
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	f7f8 fda2 	bl	8005014 <_lseek>
 800c4d0:	1c43      	adds	r3, r0, #1
 800c4d2:	d102      	bne.n	800c4da <_lseek_r+0x1e>
 800c4d4:	682b      	ldr	r3, [r5, #0]
 800c4d6:	b103      	cbz	r3, 800c4da <_lseek_r+0x1e>
 800c4d8:	6023      	str	r3, [r4, #0]
 800c4da:	bd38      	pop	{r3, r4, r5, pc}
 800c4dc:	20000980 	.word	0x20000980

0800c4e0 <_read_r>:
 800c4e0:	b538      	push	{r3, r4, r5, lr}
 800c4e2:	4604      	mov	r4, r0
 800c4e4:	4608      	mov	r0, r1
 800c4e6:	4611      	mov	r1, r2
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	4d05      	ldr	r5, [pc, #20]	; (800c500 <_read_r+0x20>)
 800c4ec:	602a      	str	r2, [r5, #0]
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	f7f8 fd68 	bl	8004fc4 <_read>
 800c4f4:	1c43      	adds	r3, r0, #1
 800c4f6:	d102      	bne.n	800c4fe <_read_r+0x1e>
 800c4f8:	682b      	ldr	r3, [r5, #0]
 800c4fa:	b103      	cbz	r3, 800c4fe <_read_r+0x1e>
 800c4fc:	6023      	str	r3, [r4, #0]
 800c4fe:	bd38      	pop	{r3, r4, r5, pc}
 800c500:	20000980 	.word	0x20000980
 800c504:	00000000 	.word	0x00000000

0800c508 <floor>:
 800c508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c50c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800c510:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800c514:	2e13      	cmp	r6, #19
 800c516:	4602      	mov	r2, r0
 800c518:	460b      	mov	r3, r1
 800c51a:	4607      	mov	r7, r0
 800c51c:	460c      	mov	r4, r1
 800c51e:	4605      	mov	r5, r0
 800c520:	dc33      	bgt.n	800c58a <floor+0x82>
 800c522:	2e00      	cmp	r6, #0
 800c524:	da14      	bge.n	800c550 <floor+0x48>
 800c526:	a334      	add	r3, pc, #208	; (adr r3, 800c5f8 <floor+0xf0>)
 800c528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52c:	f7f8 fdaa 	bl	8005084 <__adddf3>
 800c530:	2200      	movs	r2, #0
 800c532:	2300      	movs	r3, #0
 800c534:	f7f9 f9ec 	bl	8005910 <__aeabi_dcmpgt>
 800c538:	b138      	cbz	r0, 800c54a <floor+0x42>
 800c53a:	2c00      	cmp	r4, #0
 800c53c:	da58      	bge.n	800c5f0 <floor+0xe8>
 800c53e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c542:	431d      	orrs	r5, r3
 800c544:	d001      	beq.n	800c54a <floor+0x42>
 800c546:	2500      	movs	r5, #0
 800c548:	4c2d      	ldr	r4, [pc, #180]	; (800c600 <floor+0xf8>)
 800c54a:	4623      	mov	r3, r4
 800c54c:	462f      	mov	r7, r5
 800c54e:	e025      	b.n	800c59c <floor+0x94>
 800c550:	4a2c      	ldr	r2, [pc, #176]	; (800c604 <floor+0xfc>)
 800c552:	fa42 f806 	asr.w	r8, r2, r6
 800c556:	ea01 0208 	and.w	r2, r1, r8
 800c55a:	4302      	orrs	r2, r0
 800c55c:	d01e      	beq.n	800c59c <floor+0x94>
 800c55e:	a326      	add	r3, pc, #152	; (adr r3, 800c5f8 <floor+0xf0>)
 800c560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c564:	f7f8 fd8e 	bl	8005084 <__adddf3>
 800c568:	2200      	movs	r2, #0
 800c56a:	2300      	movs	r3, #0
 800c56c:	f7f9 f9d0 	bl	8005910 <__aeabi_dcmpgt>
 800c570:	2800      	cmp	r0, #0
 800c572:	d0ea      	beq.n	800c54a <floor+0x42>
 800c574:	2c00      	cmp	r4, #0
 800c576:	bfbe      	ittt	lt
 800c578:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c57c:	fa43 f606 	asrlt.w	r6, r3, r6
 800c580:	19a4      	addlt	r4, r4, r6
 800c582:	2500      	movs	r5, #0
 800c584:	ea24 0408 	bic.w	r4, r4, r8
 800c588:	e7df      	b.n	800c54a <floor+0x42>
 800c58a:	2e33      	cmp	r6, #51	; 0x33
 800c58c:	dd0a      	ble.n	800c5a4 <floor+0x9c>
 800c58e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c592:	d103      	bne.n	800c59c <floor+0x94>
 800c594:	f7f8 fd76 	bl	8005084 <__adddf3>
 800c598:	4607      	mov	r7, r0
 800c59a:	460b      	mov	r3, r1
 800c59c:	4638      	mov	r0, r7
 800c59e:	4619      	mov	r1, r3
 800c5a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c5a8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800c5ac:	fa22 f808 	lsr.w	r8, r2, r8
 800c5b0:	ea18 0f00 	tst.w	r8, r0
 800c5b4:	d0f2      	beq.n	800c59c <floor+0x94>
 800c5b6:	a310      	add	r3, pc, #64	; (adr r3, 800c5f8 <floor+0xf0>)
 800c5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5bc:	f7f8 fd62 	bl	8005084 <__adddf3>
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	f7f9 f9a4 	bl	8005910 <__aeabi_dcmpgt>
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	d0be      	beq.n	800c54a <floor+0x42>
 800c5cc:	2c00      	cmp	r4, #0
 800c5ce:	da02      	bge.n	800c5d6 <floor+0xce>
 800c5d0:	2e14      	cmp	r6, #20
 800c5d2:	d103      	bne.n	800c5dc <floor+0xd4>
 800c5d4:	3401      	adds	r4, #1
 800c5d6:	ea25 0508 	bic.w	r5, r5, r8
 800c5da:	e7b6      	b.n	800c54a <floor+0x42>
 800c5dc:	2301      	movs	r3, #1
 800c5de:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c5e2:	fa03 f606 	lsl.w	r6, r3, r6
 800c5e6:	4435      	add	r5, r6
 800c5e8:	42bd      	cmp	r5, r7
 800c5ea:	bf38      	it	cc
 800c5ec:	18e4      	addcc	r4, r4, r3
 800c5ee:	e7f2      	b.n	800c5d6 <floor+0xce>
 800c5f0:	2500      	movs	r5, #0
 800c5f2:	462c      	mov	r4, r5
 800c5f4:	e7a9      	b.n	800c54a <floor+0x42>
 800c5f6:	bf00      	nop
 800c5f8:	8800759c 	.word	0x8800759c
 800c5fc:	7e37e43c 	.word	0x7e37e43c
 800c600:	bff00000 	.word	0xbff00000
 800c604:	000fffff 	.word	0x000fffff

0800c608 <_init>:
 800c608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c60a:	bf00      	nop
 800c60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c60e:	bc08      	pop	{r3}
 800c610:	469e      	mov	lr, r3
 800c612:	4770      	bx	lr

0800c614 <_fini>:
 800c614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c616:	bf00      	nop
 800c618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c61a:	bc08      	pop	{r3}
 800c61c:	469e      	mov	lr, r3
 800c61e:	4770      	bx	lr
