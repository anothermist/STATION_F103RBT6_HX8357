
STATION_F103RB_HX8357.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a360  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00010eb0  0800a470  0800a470  0001a470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b320  0801b320  00030320  2**0
                  CONTENTS
  4 .ARM          00000000  0801b320  0801b320  00030320  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801b320  0801b320  00030320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b320  0801b320  0002b320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b324  0801b324  0002b324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000320  20000000  0801b328  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b8  20000320  0801b648  00030320  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200014d8  0801b648  000314d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030320  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a96a  00000000  00000000  00030349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f03  00000000  00000000  0004acb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00011890  00000000  00000000  0004dbb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b90  00000000  00000000  0005f448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000033a0  00000000  00000000  0005ffd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015618  00000000  00000000  00063378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000042b9  00000000  00000000  00078990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007cc49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000401c  00000000  00000000  0007cc9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000320 	.word	0x20000320
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a458 	.word	0x0800a458

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000324 	.word	0x20000324
 800014c:	0800a458 	.word	0x0800a458

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	; 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__aeabi_f2uiz>:
 8000eec:	0042      	lsls	r2, r0, #1
 8000eee:	d20e      	bcs.n	8000f0e <__aeabi_f2uiz+0x22>
 8000ef0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ef4:	d30b      	bcc.n	8000f0e <__aeabi_f2uiz+0x22>
 8000ef6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000efa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000efe:	d409      	bmi.n	8000f14 <__aeabi_f2uiz+0x28>
 8000f00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f08:	fa23 f002 	lsr.w	r0, r3, r2
 8000f0c:	4770      	bx	lr
 8000f0e:	f04f 0000 	mov.w	r0, #0
 8000f12:	4770      	bx	lr
 8000f14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f18:	d101      	bne.n	8000f1e <__aeabi_f2uiz+0x32>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d102      	bne.n	8000f24 <__aeabi_f2uiz+0x38>
 8000f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f22:	4770      	bx	lr
 8000f24:	f04f 0000 	mov.w	r0, #0
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <__aeabi_d2lz>:
 8000f2c:	b538      	push	{r3, r4, r5, lr}
 8000f2e:	4605      	mov	r5, r0
 8000f30:	460c      	mov	r4, r1
 8000f32:	2200      	movs	r2, #0
 8000f34:	2300      	movs	r3, #0
 8000f36:	4628      	mov	r0, r5
 8000f38:	4621      	mov	r1, r4
 8000f3a:	f7ff fdf3 	bl	8000b24 <__aeabi_dcmplt>
 8000f3e:	b928      	cbnz	r0, 8000f4c <__aeabi_d2lz+0x20>
 8000f40:	4628      	mov	r0, r5
 8000f42:	4621      	mov	r1, r4
 8000f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f48:	f000 b80a 	b.w	8000f60 <__aeabi_d2ulz>
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000f52:	f000 f805 	bl	8000f60 <__aeabi_d2ulz>
 8000f56:	4240      	negs	r0, r0
 8000f58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f5c:	bd38      	pop	{r3, r4, r5, pc}
 8000f5e:	bf00      	nop

08000f60 <__aeabi_d2ulz>:
 8000f60:	b5d0      	push	{r4, r6, r7, lr}
 8000f62:	2200      	movs	r2, #0
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <__aeabi_d2ulz+0x34>)
 8000f66:	4606      	mov	r6, r0
 8000f68:	460f      	mov	r7, r1
 8000f6a:	f7ff fb69 	bl	8000640 <__aeabi_dmul>
 8000f6e:	f7ff fe3f 	bl	8000bf0 <__aeabi_d2uiz>
 8000f72:	4604      	mov	r4, r0
 8000f74:	f7ff faea 	bl	800054c <__aeabi_ui2d>
 8000f78:	2200      	movs	r2, #0
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <__aeabi_d2ulz+0x38>)
 8000f7c:	f7ff fb60 	bl	8000640 <__aeabi_dmul>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4630      	mov	r0, r6
 8000f86:	4639      	mov	r1, r7
 8000f88:	f7ff f9a2 	bl	80002d0 <__aeabi_dsub>
 8000f8c:	f7ff fe30 	bl	8000bf0 <__aeabi_d2uiz>
 8000f90:	4621      	mov	r1, r4
 8000f92:	bdd0      	pop	{r4, r6, r7, pc}
 8000f94:	3df00000 	.word	0x3df00000
 8000f98:	41f00000 	.word	0x41f00000

08000f9c <AT24XX_Read>:
        return true;
    } else
        return false;
}

uint8_t AT24XX_Read(uint16_t address) {
 8000f9c:	b530      	push	{r4, r5, lr}
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8000f9e:	2564      	movs	r5, #100	; 0x64
 8000fa0:	2401      	movs	r4, #1
    uint16_t dt[1] = {NULL};
 8000fa2:	f04f 0c00 	mov.w	ip, #0
uint8_t AT24XX_Read(uint16_t address) {
 8000fa6:	b087      	sub	sp, #28
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8000fa8:	ab05      	add	r3, sp, #20
uint8_t AT24XX_Read(uint16_t address) {
 8000faa:	4602      	mov	r2, r0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	21ae      	movs	r1, #174	; 0xae
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8000fb6:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <AT24XX_Read+0x2c>)
    uint16_t dt[1] = {NULL};
 8000fb8:	f8ad c014 	strh.w	ip, [sp, #20]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8000fbc:	f003 fe1c 	bl	8004bf8 <HAL_I2C_Mem_Read>
    AT24XX_Load(address, dt, 1);
    return dt[0];
}
 8000fc0:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8000fc4:	b007      	add	sp, #28
 8000fc6:	bd30      	pop	{r4, r5, pc}
 8000fc8:	20001394 	.word	0x20001394

08000fcc <AT24XX_Update>:
void AT24XX_Write(uint16_t address, uint8_t val) {
    uint8_t save[] = {val};
    AT24XX_Save(address, save, 1);
}

void AT24XX_Update(uint16_t address, uint8_t val) {
 8000fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t dt[1] = {NULL};
 8000fce:	2200      	movs	r2, #0
void AT24XX_Update(uint16_t address, uint8_t val) {
 8000fd0:	4605      	mov	r5, r0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8000fd2:	2764      	movs	r7, #100	; 0x64
 8000fd4:	2601      	movs	r6, #1
void AT24XX_Update(uint16_t address, uint8_t val) {
 8000fd6:	460c      	mov	r4, r1
 8000fd8:	b087      	sub	sp, #28
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8000fda:	ab05      	add	r3, sp, #20
 8000fdc:	9300      	str	r3, [sp, #0]
    uint16_t dt[1] = {NULL};
 8000fde:	f8ad 2014 	strh.w	r2, [sp, #20]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8000fe2:	2310      	movs	r3, #16
 8000fe4:	21ae      	movs	r1, #174	; 0xae
 8000fe6:	462a      	mov	r2, r5
 8000fe8:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <AT24XX_Update+0x58>)
 8000fee:	f003 fe03 	bl	8004bf8 <HAL_I2C_Mem_Read>
    return dt[0];
 8000ff2:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 8000ff6:	429c      	cmp	r4, r3
 8000ff8:	d101      	bne.n	8000ffe <AT24XX_Update+0x32>
}
 8000ffa:	b007      	add	sp, #28
 8000ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8000ffe:	a905      	add	r1, sp, #20
 8001000:	9100      	str	r1, [sp, #0]
 8001002:	462a      	mov	r2, r5
 8001004:	2310      	movs	r3, #16
 8001006:	21ae      	movs	r1, #174	; 0xae
 8001008:	4806      	ldr	r0, [pc, #24]	; (8001024 <AT24XX_Update+0x58>)
 800100a:	9702      	str	r7, [sp, #8]
 800100c:	9601      	str	r6, [sp, #4]
    uint8_t save[] = {val};
 800100e:	f88d 4014 	strb.w	r4, [sp, #20]
    if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8001012:	f003 fccf 	bl	80049b4 <HAL_I2C_Mem_Write>
 8001016:	2800      	cmp	r0, #0
 8001018:	d1ef      	bne.n	8000ffa <AT24XX_Update+0x2e>
        HAL_Delay(5);
 800101a:	2005      	movs	r0, #5
 800101c:	f002 fbd8 	bl	80037d0 <HAL_Delay>
}
 8001020:	b007      	add	sp, #28
 8001022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001024:	20001394 	.word	0x20001394

08001028 <BME280_getTemperature>:
float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
{                                                                                        // round_nth(1.235, 0) = 1.
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
}                                                                                        // round_nth(1.235, -2) = 1.24

float BME280_getTemperature(int8_t n) {
 8001028:	b570      	push	{r4, r5, r6, lr}
    uint32_t temp_raw;
    float tempf;
    uint8_t cmd[4];

    cmd[0] = 0xFA; // temp_msb
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800102a:	2564      	movs	r5, #100	; 0x64
    cmd[0] = 0xFA; // temp_msb
 800102c:	f04f 0cfa 	mov.w	ip, #250	; 0xfa
float BME280_getTemperature(int8_t n) {
 8001030:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001032:	4e33      	ldr	r6, [pc, #204]	; (8001100 <BME280_getTemperature+0xd8>)
float BME280_getTemperature(int8_t n) {
 8001034:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001036:	aa03      	add	r2, sp, #12
 8001038:	9500      	str	r5, [sp, #0]
 800103a:	2301      	movs	r3, #1
 800103c:	21ec      	movs	r1, #236	; 0xec
 800103e:	4630      	mov	r0, r6
    cmd[0] = 0xFA; // temp_msb
 8001040:	f88d c00c 	strb.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001044:	f003 f890 	bl	8004168 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8001048:	f10d 020d 	add.w	r2, sp, #13
 800104c:	9500      	str	r5, [sp, #0]
 800104e:	2303      	movs	r3, #3
 8001050:	4630      	mov	r0, r6
 8001052:	21ec      	movs	r1, #236	; 0xec
 8001054:	f003 fa1e 	bl	8004494 <HAL_I2C_Master_Receive>

    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8001058:	f89d 000e 	ldrb.w	r0, [sp, #14]

    int32_t temp;

    temp =
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800105c:	4a29      	ldr	r2, [pc, #164]	; (8001104 <BME280_getTemperature+0xdc>)
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800105e:	f89d 300d 	ldrb.w	r3, [sp, #13]
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8001062:	8811      	ldrh	r1, [r2, #0]
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8001064:	0100      	lsls	r0, r0, #4
 8001066:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 800106a:	ebc1 1210 	rsb	r2, r1, r0, lsr #4
 800106e:	fb02 f302 	mul.w	r3, r2, r2
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8001072:	f89d 200f 	ldrb.w	r2, [sp, #15]
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8001076:	0049      	lsls	r1, r1, #1
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8001078:	ea40 1012 	orr.w	r0, r0, r2, lsr #4
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 800107c:	4a22      	ldr	r2, [pc, #136]	; (8001108 <BME280_getTemperature+0xe0>)
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800107e:	ebc1 01d0 	rsb	r1, r1, r0, lsr #3
 8001082:	4822      	ldr	r0, [pc, #136]	; (800110c <BME280_getTemperature+0xe4>)
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8001084:	f9b2 2000 	ldrsh.w	r2, [r2]
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8001088:	f9b0 0000 	ldrsh.w	r0, [r0]
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 800108c:	0b1b      	lsrs	r3, r3, #12
 800108e:	fb02 f303 	mul.w	r3, r2, r3
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8001092:	fb00 f101 	mul.w	r1, r0, r1

    t_fine = temp;
 8001096:	4a1e      	ldr	r2, [pc, #120]	; (8001110 <BME280_getTemperature+0xe8>)
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8001098:	0b9b      	lsrs	r3, r3, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800109a:	eb03 23d1 	add.w	r3, r3, r1, lsr #11
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 800109e:	4620      	mov	r0, r4
    t_fine = temp;
 80010a0:	6013      	str	r3, [r2, #0]
    temp = (temp * 5 + 128) >> 8;
 80010a2:	eb03 0683 	add.w	r6, r3, r3, lsl #2
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80010a6:	f7ff fa61 	bl	800056c <__aeabi_i2d>
 80010aa:	a313      	add	r3, pc, #76	; (adr r3, 80010f8 <BME280_getTemperature+0xd0>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	f7ff fac6 	bl	8000640 <__aeabi_dmul>
 80010b4:	f008 fff4 	bl	800a0a0 <exp>
 80010b8:	460d      	mov	r5, r1
 80010ba:	4604      	mov	r4, r0
    temp = (temp * 5 + 128) >> 8;
 80010bc:	3680      	adds	r6, #128	; 0x80
    tempf = (float) temp;
 80010be:	1230      	asrs	r0, r6, #8
 80010c0:	f7ff fec0 	bl	8000e44 <__aeabi_i2f>

    return round_nth((tempf / 100.0f), n);
 80010c4:	4913      	ldr	r1, [pc, #76]	; (8001114 <BME280_getTemperature+0xec>)
 80010c6:	f7ff f84b 	bl	8000160 <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80010ca:	f7ff fa61 	bl	8000590 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 80010ce:	4622      	mov	r2, r4
 80010d0:	462b      	mov	r3, r5
 80010d2:	f7ff fbdf 	bl	8000894 <__aeabi_ddiv>
 80010d6:	2200      	movs	r2, #0
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <BME280_getTemperature+0xf0>)
 80010da:	f7ff f8fb 	bl	80002d4 <__adddf3>
 80010de:	f008 ff5f 	bl	8009fa0 <floor>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4620      	mov	r0, r4
 80010e8:	4629      	mov	r1, r5
 80010ea:	f7ff faa9 	bl	8000640 <__aeabi_dmul>
 80010ee:	f7ff fd9f 	bl	8000c30 <__aeabi_d2f>
}
 80010f2:	b004      	add	sp, #16
 80010f4:	bd70      	pop	{r4, r5, r6, pc}
 80010f6:	bf00      	nop
 80010f8:	bbb55516 	.word	0xbbb55516
 80010fc:	40026bb1 	.word	0x40026bb1
 8001100:	20001394 	.word	0x20001394
 8001104:	2000035a 	.word	0x2000035a
 8001108:	2000035e 	.word	0x2000035e
 800110c:	2000035c 	.word	0x2000035c
 8001110:	20000360 	.word	0x20000360
 8001114:	3c23d70a 	.word	0x3c23d70a
 8001118:	3fe00000 	.word	0x3fe00000
 800111c:	00000000 	.word	0x00000000

08001120 <BME280_getHumidity>:

float BME280_getHumidity(int8_t n) {
 8001120:	b5d0      	push	{r4, r6, r7, lr}
    uint32_t hum_raw;
    float humf;
    uint8_t cmd[4];

    cmd[0] = 0xFD; // hum_msb
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001122:	2664      	movs	r6, #100	; 0x64
    cmd[0] = 0xFD; // hum_msb
 8001124:	f04f 0cfd 	mov.w	ip, #253	; 0xfd
float BME280_getHumidity(int8_t n) {
 8001128:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800112a:	4f41      	ldr	r7, [pc, #260]	; (8001230 <BME280_getHumidity+0x110>)
float BME280_getHumidity(int8_t n) {
 800112c:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800112e:	aa03      	add	r2, sp, #12
 8001130:	9600      	str	r6, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	21ec      	movs	r1, #236	; 0xec
 8001136:	4638      	mov	r0, r7
    cmd[0] = 0xFD; // hum_msb
 8001138:	f88d c00c 	strb.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800113c:	f003 f814 	bl	8004168 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 8001140:	f10d 020d 	add.w	r2, sp, #13
 8001144:	9600      	str	r6, [sp, #0]
 8001146:	2302      	movs	r3, #2
 8001148:	4638      	mov	r0, r7
 800114a:	21ec      	movs	r1, #236	; 0xec
 800114c:	f003 f9a2 	bl	8004494 <HAL_I2C_Master_Receive>

    hum_raw = (cmd[1] << 8) | cmd[2];

    int32_t v_x1;

    v_x1 = t_fine - 76800;
 8001150:	4a38      	ldr	r2, [pc, #224]	; (8001234 <BME280_getHumidity+0x114>)
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8001152:	4b39      	ldr	r3, [pc, #228]	; (8001238 <BME280_getHumidity+0x118>)
    v_x1 = t_fine - 76800;
 8001154:	6811      	ldr	r1, [r2, #0]
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8001156:	4839      	ldr	r0, [pc, #228]	; (800123c <BME280_getHumidity+0x11c>)
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8001158:	881b      	ldrh	r3, [r3, #0]
    v_x1 = t_fine - 76800;
 800115a:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 800115e:	f9b0 2000 	ldrsh.w	r2, [r0]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8001162:	fb01 f303 	mul.w	r3, r1, r3
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8001166:	fb01 f202 	mul.w	r2, r1, r2
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 800116a:	4e35      	ldr	r6, [pc, #212]	; (8001240 <BME280_getHumidity+0x120>)
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800116c:	12db      	asrs	r3, r3, #11
    hum_raw = (cmd[1] << 8) | cmd[2];
 800116e:	f8bd 000d 	ldrh.w	r0, [sp, #13]
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8001172:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8001174:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8001178:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 800117c:	f9b6 2000 	ldrsh.w	r2, [r6]
    hum_raw = (cmd[1] << 8) | cmd[2];
 8001180:	ba40      	rev16	r0, r0
 8001182:	b280      	uxth	r0, r0
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8001184:	0512      	lsls	r2, r2, #20
 8001186:	ebc2 3280 	rsb	r2, r2, r0, lsl #14
 800118a:	482e      	ldr	r0, [pc, #184]	; (8001244 <BME280_getHumidity+0x124>)
 800118c:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001190:	f9b0 0000 	ldrsh.w	r0, [r0]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8001194:	129b      	asrs	r3, r3, #10
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8001196:	fb01 2210 	mls	r2, r1, r0, r2
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 800119a:	4620      	mov	r0, r4
                                            (int32_t) dig_H2 + 8192) >> 14));
 800119c:	4c2a      	ldr	r4, [pc, #168]	; (8001248 <BME280_getHumidity+0x128>)
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800119e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                                            (int32_t) dig_H2 + 8192) >> 14));
 80011a2:	f9b4 4000 	ldrsh.w	r4, [r4]
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80011a6:	0bd2      	lsrs	r2, r2, #15
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80011a8:	fb04 f303 	mul.w	r3, r4, r3
                                            (int32_t) dig_H2 + 8192) >> 14));
 80011ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80011b0:	139b      	asrs	r3, r3, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80011b2:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 80011b6:	13da      	asrs	r2, r3, #15
 80011b8:	fb02 f202 	mul.w	r2, r2, r2
 80011bc:	4923      	ldr	r1, [pc, #140]	; (800124c <BME280_getHumidity+0x12c>)
 80011be:	11d4      	asrs	r4, r2, #7
 80011c0:	8809      	ldrh	r1, [r1, #0]
 80011c2:	fb01 f404 	mul.w	r4, r1, r4
 80011c6:	eba3 1324 	sub.w	r3, r3, r4, asr #4
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 80011ca:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80011ce:	f7ff f9cd 	bl	800056c <__aeabi_i2d>
 80011d2:	a315      	add	r3, pc, #84	; (adr r3, 8001228 <BME280_getHumidity+0x108>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	f7ff fa32 	bl	8000640 <__aeabi_dmul>
 80011dc:	f008 ff60 	bl	800a0a0 <exp>
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 80011e0:	f1b4 5fc8 	cmp.w	r4, #419430400	; 0x19000000
 80011e4:	bfa8      	it	ge
 80011e6:	f04f 54c8 	movge.w	r4, #419430400	; 0x19000000
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80011ea:	460f      	mov	r7, r1
 80011ec:	4606      	mov	r6, r0

    humf = (float) (v_x1 >> 12);
 80011ee:	1320      	asrs	r0, r4, #12
 80011f0:	f7ff fe28 	bl	8000e44 <__aeabi_i2f>

    return round_nth((humf / 1024.0f), n);
 80011f4:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 80011f8:	f7fe ffb2 	bl	8000160 <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80011fc:	f7ff f9c8 	bl	8000590 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8001200:	4632      	mov	r2, r6
 8001202:	463b      	mov	r3, r7
 8001204:	f7ff fb46 	bl	8000894 <__aeabi_ddiv>
 8001208:	2200      	movs	r2, #0
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <BME280_getHumidity+0x130>)
 800120c:	f7ff f862 	bl	80002d4 <__adddf3>
 8001210:	f008 fec6 	bl	8009fa0 <floor>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4630      	mov	r0, r6
 800121a:	4639      	mov	r1, r7
 800121c:	f7ff fa10 	bl	8000640 <__aeabi_dmul>
 8001220:	f7ff fd06 	bl	8000c30 <__aeabi_d2f>
}
 8001224:	b004      	add	sp, #16
 8001226:	bdd0      	pop	{r4, r6, r7, pc}
 8001228:	bbb55516 	.word	0xbbb55516
 800122c:	40026bb1 	.word	0x40026bb1
 8001230:	20001394 	.word	0x20001394
 8001234:	20000360 	.word	0x20000360
 8001238:	20000340 	.word	0x20000340
 800123c:	20000346 	.word	0x20000346
 8001240:	20000342 	.word	0x20000342
 8001244:	20000344 	.word	0x20000344
 8001248:	2000033e 	.word	0x2000033e
 800124c:	2000033c 	.word	0x2000033c
 8001250:	3fe00000 	.word	0x3fe00000

08001254 <BME280_getPressure>:

float BME280_getPressure(void) {
 8001254:	b510      	push	{r4, lr}
    uint32_t press_raw;
    float pressf;
    uint8_t cmd[4];

    cmd[0] = 0xF7; // press_msb
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001256:	2464      	movs	r4, #100	; 0x64
    cmd[0] = 0xF7; // press_msb
 8001258:	f04f 0cf7 	mov.w	ip, #247	; 0xf7
float BME280_getPressure(void) {
 800125c:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800125e:	2301      	movs	r3, #1
 8001260:	21ec      	movs	r1, #236	; 0xec
 8001262:	aa03      	add	r2, sp, #12
 8001264:	9400      	str	r4, [sp, #0]
 8001266:	483e      	ldr	r0, [pc, #248]	; (8001360 <BME280_getPressure+0x10c>)
    cmd[0] = 0xF7; // press_msb
 8001268:	f88d c00c 	strb.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800126c:	f002 ff7c 	bl	8004168 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8001270:	2303      	movs	r3, #3
 8001272:	21ec      	movs	r1, #236	; 0xec
 8001274:	9400      	str	r4, [sp, #0]
 8001276:	f10d 020d 	add.w	r2, sp, #13
 800127a:	4839      	ldr	r0, [pc, #228]	; (8001360 <BME280_getPressure+0x10c>)
 800127c:	f003 f90a 	bl	8004494 <HAL_I2C_Master_Receive>
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);

    int32_t var1, var2;
    uint32_t press;

    var1 = (t_fine >> 1) - 64000;
 8001280:	4b38      	ldr	r3, [pc, #224]	; (8001364 <BME280_getPressure+0x110>)
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
    var2 = var2 + ((var1 * dig_P5) << 1);
    var2 = (var2 >> 2) + (dig_P4 << 16);
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 8001282:	4839      	ldr	r0, [pc, #228]	; (8001368 <BME280_getPressure+0x114>)
    var1 = (t_fine >> 1) - 64000;
 8001284:	681a      	ldr	r2, [r3, #0]
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 8001286:	4c39      	ldr	r4, [pc, #228]	; (800136c <BME280_getPressure+0x118>)
    var1 = (t_fine >> 1) - 64000;
 8001288:	1052      	asrs	r2, r2, #1
 800128a:	f5a2 427a 	sub.w	r2, r2, #64000	; 0xfa00
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 800128e:	1091      	asrs	r1, r2, #2
 8001290:	fb01 f301 	mul.w	r3, r1, r1
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 8001294:	f9b0 0000 	ldrsh.w	r0, [r0]
 8001298:	f9b4 1000 	ldrsh.w	r1, [r4]
 800129c:	fb02 f000 	mul.w	r0, r2, r0
 80012a0:	135c      	asrs	r4, r3, #13
 80012a2:	fb04 f101 	mul.w	r1, r4, r1
 80012a6:	1040      	asrs	r0, r0, #1
 80012a8:	eb00 00e1 	add.w	r0, r0, r1, asr #3
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80012ac:	4930      	ldr	r1, [pc, #192]	; (8001370 <BME280_getPressure+0x11c>)
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80012ae:	1480      	asrs	r0, r0, #18
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80012b0:	8809      	ldrh	r1, [r1, #0]
 80012b2:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 80012b6:	fb01 f000 	mul.w	r0, r1, r0
    if (var1 == 0) {
 80012ba:	13c0      	asrs	r0, r0, #15
 80012bc:	d04c      	beq.n	8001358 <BME280_getPressure+0x104>
    var2 = var2 + ((var1 * dig_P5) << 1);
 80012be:	492d      	ldr	r1, [pc, #180]	; (8001374 <BME280_getPressure+0x120>)
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80012c0:	4c2d      	ldr	r4, [pc, #180]	; (8001378 <BME280_getPressure+0x124>)
    var2 = var2 + ((var1 * dig_P5) << 1);
 80012c2:	f9b1 1000 	ldrsh.w	r1, [r1]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80012c6:	f9b4 c000 	ldrsh.w	ip, [r4]
    var2 = var2 + ((var1 * dig_P5) << 1);
 80012ca:	fb01 f202 	mul.w	r2, r1, r2
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80012ce:	12d9      	asrs	r1, r3, #11
    var2 = var2 + ((var1 * dig_P5) << 1);
 80012d0:	0052      	lsls	r2, r2, #1
 80012d2:	fb0c 2201 	mla	r2, ip, r1, r2
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80012d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 80012da:	4928      	ldr	r1, [pc, #160]	; (800137c <BME280_getPressure+0x128>)
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80012dc:	f89d 400e 	ldrb.w	r4, [sp, #14]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 80012e0:	f9b1 1000 	ldrsh.w	r1, [r1]
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80012ea:	f89d 400d 	ldrb.w	r4, [sp, #13]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 80012ee:	0409      	lsls	r1, r1, #16
 80012f0:	eb01 02a2 	add.w	r2, r1, r2, asr #2
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80012f4:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
        return 0;
    }
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 80012f8:	4921      	ldr	r1, [pc, #132]	; (8001380 <BME280_getPressure+0x12c>)
 80012fa:	eb03 3322 	add.w	r3, r3, r2, asr #12
 80012fe:	fb01 f303 	mul.w	r3, r1, r3
 8001302:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8001306:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    if (press < 0x80000000) {
 800130a:	2b00      	cmp	r3, #0
        press = (press << 1) / var1;
    } else {
        press = (press / var1) * 2;
 800130c:	bfb3      	iteet	lt
 800130e:	fbb3 f0f0 	udivlt	r0, r3, r0
        press = (press << 1) / var1;
 8001312:	005b      	lslge	r3, r3, #1
 8001314:	fbb3 f0f0 	udivge	r0, r3, r0
        press = (press / var1) * 2;
 8001318:	0040      	lsllt	r0, r0, #1
    }
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 800131a:	08c3      	lsrs	r3, r0, #3
 800131c:	fb03 f203 	mul.w	r2, r3, r3
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8001320:	4918      	ldr	r1, [pc, #96]	; (8001384 <BME280_getPressure+0x130>)
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <BME280_getPressure+0x134>)
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8001324:	f9b1 4000 	ldrsh.w	r4, [r1]
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8001328:	f9b3 1000 	ldrsh.w	r1, [r3]
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800132c:	0883      	lsrs	r3, r0, #2
 800132e:	fb04 f303 	mul.w	r3, r4, r3
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8001332:	0b52      	lsrs	r2, r2, #13
 8001334:	fb01 f202 	mul.w	r2, r1, r2
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8001338:	4914      	ldr	r1, [pc, #80]	; (800138c <BME280_getPressure+0x138>)
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800133a:	135b      	asrs	r3, r3, #13
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 800133c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001340:	eb03 3322 	add.w	r3, r3, r2, asr #12
 8001344:	440b      	add	r3, r1

    pressf = (float) press;
 8001346:	eb00 1023 	add.w	r0, r0, r3, asr #4
 800134a:	f7ff fd77 	bl	8000e3c <__aeabi_ui2f>
    return (pressf / 100.0f);
 800134e:	4910      	ldr	r1, [pc, #64]	; (8001390 <BME280_getPressure+0x13c>)
 8001350:	f7fe ff06 	bl	8000160 <__aeabi_fmul>
}
 8001354:	b004      	add	sp, #16
 8001356:	bd10      	pop	{r4, pc}
        return 0;
 8001358:	2000      	movs	r0, #0
}
 800135a:	b004      	add	sp, #16
 800135c:	bd10      	pop	{r4, pc}
 800135e:	bf00      	nop
 8001360:	20001394 	.word	0x20001394
 8001364:	20000360 	.word	0x20000360
 8001368:	2000034a 	.word	0x2000034a
 800136c:	2000034c 	.word	0x2000034c
 8001370:	20000348 	.word	0x20000348
 8001374:	20000350 	.word	0x20000350
 8001378:	20000352 	.word	0x20000352
 800137c:	2000034e 	.word	0x2000034e
 8001380:	fffff3cb 	.word	0xfffff3cb
 8001384:	20000356 	.word	0x20000356
 8001388:	20000358 	.word	0x20000358
 800138c:	20000354 	.word	0x20000354
 8001390:	3c23d70a 	.word	0x3c23d70a

08001394 <BME280_Init>:

void BME280_Init(void) {
 8001394:	b570      	push	{r4, r5, r6, lr}
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
    cmd[1] = 0x05; // Humidity oversampling x16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8001396:	2464      	movs	r4, #100	; 0x64
    cmd[0] = 0xF2; // ctrl_hum
 8001398:	f240 5cf2 	movw	ip, #1522	; 0x5f2
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800139c:	4d5e      	ldr	r5, [pc, #376]	; (8001518 <BME280_Init+0x184>)
void BME280_Init(void) {
 800139e:	b088      	sub	sp, #32
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80013a0:	aa03      	add	r2, sp, #12
 80013a2:	9400      	str	r4, [sp, #0]
 80013a4:	2302      	movs	r3, #2
 80013a6:	21ec      	movs	r1, #236	; 0xec
 80013a8:	4628      	mov	r0, r5
    cmd[0] = 0xF2; // ctrl_hum
 80013aa:	f8ad c00c 	strh.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80013ae:	f002 fedb 	bl	8004168 <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF4; // ctrl_meas
 80013b2:	f24b 7cf4 	movw	ip, #47092	; 0xb7f4
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80013b6:	9400      	str	r4, [sp, #0]
 80013b8:	aa03      	add	r2, sp, #12
 80013ba:	2302      	movs	r3, #2
 80013bc:	21ec      	movs	r1, #236	; 0xec
 80013be:	4628      	mov	r0, r5
    cmd[0] = 0xF4; // ctrl_meas
 80013c0:	f8ad c00c 	strh.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80013c4:	f002 fed0 	bl	8004168 <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF5; // config
 80013c8:	f24a 0cf5 	movw	ip, #41205	; 0xa0f5
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80013cc:	9400      	str	r4, [sp, #0]
 80013ce:	aa03      	add	r2, sp, #12
 80013d0:	2302      	movs	r3, #2
 80013d2:	21ec      	movs	r1, #236	; 0xec
 80013d4:	4628      	mov	r0, r5
    cmd[0] = 0xF5; // config
 80013d6:	f8ad c00c 	strh.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80013da:	f002 fec5 	bl	8004168 <HAL_I2C_Master_Transmit>

    cmd[0] = 0x88; // read dig_T regs
 80013de:	f04f 0c88 	mov.w	ip, #136	; 0x88
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80013e2:	9400      	str	r4, [sp, #0]
 80013e4:	aa03      	add	r2, sp, #12
 80013e6:	2301      	movs	r3, #1
 80013e8:	21ec      	movs	r1, #236	; 0xec
 80013ea:	4628      	mov	r0, r5
    cmd[0] = 0x88; // read dig_T regs
 80013ec:	f88d c00c 	strb.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80013f0:	f002 feba 	bl	8004168 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 80013f4:	9400      	str	r4, [sp, #0]
 80013f6:	aa03      	add	r2, sp, #12
 80013f8:	2306      	movs	r3, #6
 80013fa:	21ec      	movs	r1, #236	; 0xec
 80013fc:	4628      	mov	r0, r5
 80013fe:	f003 f849 	bl	8004494 <HAL_I2C_Master_Receive>

    dig_T1 = (cmd[1] << 8) | cmd[0];
    dig_T2 = (cmd[3] << 8) | cmd[2];
    dig_T3 = (cmd[5] << 8) | cmd[4];

    cmd[0] = 0x8E; // read dig_P regs
 8001402:	238e      	movs	r3, #142	; 0x8e
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8001404:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8001408:	4a44      	ldr	r2, [pc, #272]	; (800151c <BME280_Init+0x188>)
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800140a:	9400      	str	r4, [sp, #0]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 800140c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8001410:	8011      	strh	r1, [r2, #0]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8001412:	4a43      	ldr	r2, [pc, #268]	; (8001520 <BME280_Init+0x18c>)
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8001414:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8001418:	8010      	strh	r0, [r2, #0]
    dig_T3 = (cmd[5] << 8) | cmd[4];
 800141a:	4a42      	ldr	r2, [pc, #264]	; (8001524 <BME280_Init+0x190>)
    cmd[0] = 0x8E; // read dig_P regs
 800141c:	f88d 300c 	strb.w	r3, [sp, #12]
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8001420:	8011      	strh	r1, [r2, #0]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001422:	2301      	movs	r3, #1
 8001424:	aa03      	add	r2, sp, #12
 8001426:	21ec      	movs	r1, #236	; 0xec
 8001428:	4628      	mov	r0, r5
 800142a:	f002 fe9d 	bl	8004168 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 800142e:	9400      	str	r4, [sp, #0]
 8001430:	aa03      	add	r2, sp, #12
 8001432:	2312      	movs	r3, #18
 8001434:	21ec      	movs	r1, #236	; 0xec
 8001436:	4628      	mov	r0, r5
 8001438:	f003 f82c 	bl	8004494 <HAL_I2C_Master_Receive>
    dig_P6 = (cmd[11] << 8) | cmd[10];
    dig_P7 = (cmd[13] << 8) | cmd[12];
    dig_P8 = (cmd[15] << 8) | cmd[14];
    dig_P9 = (cmd[17] << 8) | cmd[16];

    cmd[0] = 0xA1; // read dig_H regs
 800143c:	23a1      	movs	r3, #161	; 0xa1
    dig_P1 = (cmd[1] << 8) | cmd[0];
 800143e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8001442:	4a39      	ldr	r2, [pc, #228]	; (8001528 <BME280_Init+0x194>)
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001444:	9400      	str	r4, [sp, #0]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8001446:	f8bd 600e 	ldrh.w	r6, [sp, #14]
    dig_P1 = (cmd[1] << 8) | cmd[0];
 800144a:	8011      	strh	r1, [r2, #0]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 800144c:	4a37      	ldr	r2, [pc, #220]	; (800152c <BME280_Init+0x198>)
    dig_P6 = (cmd[11] << 8) | cmd[10];
 800144e:	f8bd e016 	ldrh.w	lr, [sp, #22]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8001452:	8016      	strh	r6, [r2, #0]
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8001454:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 8001458:	4a35      	ldr	r2, [pc, #212]	; (8001530 <BME280_Init+0x19c>)
    dig_P7 = (cmd[13] << 8) | cmd[12];
 800145a:	f8bd c018 	ldrh.w	ip, [sp, #24]
    dig_P3 = (cmd[5] << 8) | cmd[4];
 800145e:	8016      	strh	r6, [r2, #0]
    dig_P4 = (cmd[7] << 8) | cmd[6];
 8001460:	f8bd 6012 	ldrh.w	r6, [sp, #18]
 8001464:	4a33      	ldr	r2, [pc, #204]	; (8001534 <BME280_Init+0x1a0>)
    dig_P8 = (cmd[15] << 8) | cmd[14];
 8001466:	f8bd 001a 	ldrh.w	r0, [sp, #26]
    dig_P4 = (cmd[7] << 8) | cmd[6];
 800146a:	8016      	strh	r6, [r2, #0]
    dig_P5 = (cmd[9] << 8) | cmd[8];
 800146c:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 8001470:	4a31      	ldr	r2, [pc, #196]	; (8001538 <BME280_Init+0x1a4>)
    dig_P9 = (cmd[17] << 8) | cmd[16];
 8001472:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    dig_P5 = (cmd[9] << 8) | cmd[8];
 8001476:	8016      	strh	r6, [r2, #0]
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8001478:	4a30      	ldr	r2, [pc, #192]	; (800153c <BME280_Init+0x1a8>)
    cmd[0] = 0xA1; // read dig_H regs
 800147a:	f88d 300c 	strb.w	r3, [sp, #12]
    dig_P6 = (cmd[11] << 8) | cmd[10];
 800147e:	f8a2 e000 	strh.w	lr, [r2]
    dig_P7 = (cmd[13] << 8) | cmd[12];
 8001482:	4a2f      	ldr	r2, [pc, #188]	; (8001540 <BME280_Init+0x1ac>)
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001484:	2301      	movs	r3, #1
    dig_P7 = (cmd[13] << 8) | cmd[12];
 8001486:	f8a2 c000 	strh.w	ip, [r2]
    dig_P8 = (cmd[15] << 8) | cmd[14];
 800148a:	4a2e      	ldr	r2, [pc, #184]	; (8001544 <BME280_Init+0x1b0>)
 800148c:	8010      	strh	r0, [r2, #0]
    dig_P9 = (cmd[17] << 8) | cmd[16];
 800148e:	4a2e      	ldr	r2, [pc, #184]	; (8001548 <BME280_Init+0x1b4>)
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001490:	4628      	mov	r0, r5
    dig_P9 = (cmd[17] << 8) | cmd[16];
 8001492:	8011      	strh	r1, [r2, #0]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001494:	aa03      	add	r2, sp, #12
 8001496:	21ec      	movs	r1, #236	; 0xec
 8001498:	f002 fe66 	bl	8004168 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800149c:	aa03      	add	r2, sp, #12
 800149e:	9400      	str	r4, [sp, #0]
 80014a0:	2301      	movs	r3, #1
 80014a2:	21ec      	movs	r1, #236	; 0xec
 80014a4:	4628      	mov	r0, r5
 80014a6:	f002 fff5 	bl	8004494 <HAL_I2C_Master_Receive>

    cmd[1] = 0xE1; // read dig_H regs
 80014aa:	f04f 0ce1 	mov.w	ip, #225	; 0xe1

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 80014ae:	9400      	str	r4, [sp, #0]
 80014b0:	f10d 020d 	add.w	r2, sp, #13
 80014b4:	2301      	movs	r3, #1
 80014b6:	21ec      	movs	r1, #236	; 0xec
 80014b8:	4628      	mov	r0, r5
    cmd[1] = 0xE1; // read dig_H regs
 80014ba:	f88d c00d 	strb.w	ip, [sp, #13]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 80014be:	f002 fe53 	bl	8004168 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 80014c2:	f10d 020d 	add.w	r2, sp, #13
 80014c6:	9400      	str	r4, [sp, #0]
 80014c8:	2307      	movs	r3, #7
 80014ca:	21ec      	movs	r1, #236	; 0xec
 80014cc:	4628      	mov	r0, r5
 80014ce:	f002 ffe1 	bl	8004494 <HAL_I2C_Master_Receive>

    dig_H1 = cmd[0];
 80014d2:	f89d 400c 	ldrb.w	r4, [sp, #12]
 80014d6:	4a1d      	ldr	r2, [pc, #116]	; (800154c <BME280_Init+0x1b8>)
    dig_H2 = (cmd[2] << 8) | cmd[1];
    dig_H3 = cmd[3];
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80014d8:	f89d 3011 	ldrb.w	r3, [sp, #17]
    dig_H1 = cmd[0];
 80014dc:	8014      	strh	r4, [r2, #0]
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80014de:	f8bd 400d 	ldrh.w	r4, [sp, #13]
 80014e2:	4a1b      	ldr	r2, [pc, #108]	; (8001550 <BME280_Init+0x1bc>)
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80014e4:	f89d 0010 	ldrb.w	r0, [sp, #16]
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80014e8:	8014      	strh	r4, [r2, #0]
    dig_H3 = cmd[3];
 80014ea:	f89d 400f 	ldrb.w	r4, [sp, #15]
 80014ee:	4a19      	ldr	r2, [pc, #100]	; (8001554 <BME280_Init+0x1c0>)
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80014f0:	f89d 1012 	ldrb.w	r1, [sp, #18]
    dig_H3 = cmd[3];
 80014f4:	8014      	strh	r4, [r2, #0]
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80014f6:	f003 020f 	and.w	r2, r3, #15
 80014fa:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	4815      	ldr	r0, [pc, #84]	; (8001558 <BME280_Init+0x1c4>)
 8001502:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8001506:	4c15      	ldr	r4, [pc, #84]	; (800155c <BME280_Init+0x1c8>)
    dig_H6 = cmd[7];
 8001508:	4915      	ldr	r1, [pc, #84]	; (8001560 <BME280_Init+0x1cc>)
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 800150a:	8003      	strh	r3, [r0, #0]
    dig_H6 = cmd[7];
 800150c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8001510:	8022      	strh	r2, [r4, #0]
    dig_H6 = cmd[7];
 8001512:	800b      	strh	r3, [r1, #0]
}
 8001514:	b008      	add	sp, #32
 8001516:	bd70      	pop	{r4, r5, r6, pc}
 8001518:	20001394 	.word	0x20001394
 800151c:	2000035a 	.word	0x2000035a
 8001520:	2000035c 	.word	0x2000035c
 8001524:	2000035e 	.word	0x2000035e
 8001528:	20000348 	.word	0x20000348
 800152c:	2000034a 	.word	0x2000034a
 8001530:	2000034c 	.word	0x2000034c
 8001534:	2000034e 	.word	0x2000034e
 8001538:	20000350 	.word	0x20000350
 800153c:	20000352 	.word	0x20000352
 8001540:	20000354 	.word	0x20000354
 8001544:	20000356 	.word	0x20000356
 8001548:	20000358 	.word	0x20000358
 800154c:	2000033c 	.word	0x2000033c
 8001550:	2000033e 	.word	0x2000033e
 8001554:	20000340 	.word	0x20000340
 8001558:	20000344 	.word	0x20000344
 800155c:	20000342 	.word	0x20000342
 8001560:	20000346 	.word	0x20000346

08001564 <DS3231_Update>:

uint8_t bcdToDec(uint8_t val) {
    return ((val / 16 * 10) + (val % 16));
}

void DS3231_Update(void) {
 8001564:	b570      	push	{r4, r5, r6, lr}
    uint8_t cmd = 0;
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8001566:	2564      	movs	r5, #100	; 0x64
    uint8_t cmd = 0;
 8001568:	f04f 0c00 	mov.w	ip, #0
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 800156c:	4e11      	ldr	r6, [pc, #68]	; (80015b4 <DS3231_Update+0x50>)
void DS3231_Update(void) {
 800156e:	b084      	sub	sp, #16
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8001570:	4c11      	ldr	r4, [pc, #68]	; (80015b8 <DS3231_Update+0x54>)
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8001572:	f10d 020f 	add.w	r2, sp, #15
 8001576:	2301      	movs	r3, #1
 8001578:	21d0      	movs	r1, #208	; 0xd0
 800157a:	4630      	mov	r0, r6
 800157c:	9500      	str	r5, [sp, #0]
    uint8_t cmd = 0;
 800157e:	f88d c00f 	strb.w	ip, [sp, #15]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8001582:	f002 fdf1 	bl	8004168 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8001586:	4622      	mov	r2, r4
 8001588:	2313      	movs	r3, #19
 800158a:	4630      	mov	r0, r6
 800158c:	21d0      	movs	r1, #208	; 0xd0
 800158e:	9500      	str	r5, [sp, #0]
 8001590:	f002 ff80 	bl	8004494 <HAL_I2C_Master_Receive>
    rtcBufferSet[1] = rtcBuffer[0];
 8001594:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <DS3231_Update+0x58>)
 800159a:	68e2      	ldr	r2, [r4, #12]
 800159c:	6824      	ldr	r4, [r4, #0]
 800159e:	f8c3 0005 	str.w	r0, [r3, #5]
 80015a2:	f8c3 4001 	str.w	r4, [r3, #1]
 80015a6:	f8c3 1009 	str.w	r1, [r3, #9]
 80015aa:	f8c3 200d 	str.w	r2, [r3, #13]
    rtcBufferSet[12] = rtcBuffer[11];
    rtcBufferSet[13] = rtcBuffer[12];
    rtcBufferSet[14] = rtcBuffer[13];
    rtcBufferSet[15] = rtcBuffer[14];
    rtcBufferSet[16] = rtcBuffer[15];
}
 80015ae:	b004      	add	sp, #16
 80015b0:	bd70      	pop	{r4, r5, r6, pc}
 80015b2:	bf00      	nop
 80015b4:	20001394 	.word	0x20001394
 80015b8:	20000364 	.word	0x20000364
 80015bc:	20000378 	.word	0x20000378

080015c0 <DS3231_getSec>:

uint8_t DS3231_getSec(void) {
    return bcdToDec(rtcBuffer[0]);
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <DS3231_getSec+0x18>)
 80015c2:	7818      	ldrb	r0, [r3, #0]
    return ((val / 16 * 10) + (val % 16));
 80015c4:	0903      	lsrs	r3, r0, #4
 80015c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80015ca:	f000 000f 	and.w	r0, r0, #15
 80015ce:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80015d2:	b2c0      	uxtb	r0, r0
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000364 	.word	0x20000364

080015dc <DS3231_getMin>:

uint8_t DS3231_getMin(void) {
    return bcdToDec(rtcBuffer[1]);
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <DS3231_getMin+0x18>)
 80015de:	7858      	ldrb	r0, [r3, #1]
    return ((val / 16 * 10) + (val % 16));
 80015e0:	0903      	lsrs	r3, r0, #4
 80015e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80015e6:	f000 000f 	and.w	r0, r0, #15
 80015ea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80015ee:	b2c0      	uxtb	r0, r0
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000364 	.word	0x20000364

080015f8 <DS3231_getHrs>:

uint8_t DS3231_getHrs(void) {
    return bcdToDec(rtcBuffer[2]);
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <DS3231_getHrs+0x18>)
 80015fa:	7898      	ldrb	r0, [r3, #2]
    return ((val / 16 * 10) + (val % 16));
 80015fc:	0903      	lsrs	r3, r0, #4
 80015fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001602:	f000 000f 	and.w	r0, r0, #15
 8001606:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800160a:	b2c0      	uxtb	r0, r0
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000364 	.word	0x20000364

08001614 <DS3231_getDay>:

uint8_t DS3231_getDay(void) {
    return bcdToDec(rtcBuffer[3]);
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <DS3231_getDay+0x18>)
 8001616:	78d8      	ldrb	r0, [r3, #3]
    return ((val / 16 * 10) + (val % 16));
 8001618:	0903      	lsrs	r3, r0, #4
 800161a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800161e:	f000 000f 	and.w	r0, r0, #15
 8001622:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001626:	b2c0      	uxtb	r0, r0
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000364 	.word	0x20000364

08001630 <DS3231_getDate>:

uint8_t DS3231_getDate(void) {
    return bcdToDec(rtcBuffer[4]);
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <DS3231_getDate+0x18>)
 8001632:	7918      	ldrb	r0, [r3, #4]
    return ((val / 16 * 10) + (val % 16));
 8001634:	0903      	lsrs	r3, r0, #4
 8001636:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800163a:	f000 000f 	and.w	r0, r0, #15
 800163e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001642:	b2c0      	uxtb	r0, r0
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000364 	.word	0x20000364

0800164c <DS3231_getMonth>:

uint8_t DS3231_getMonth(void) {
    return bcdToDec(rtcBuffer[5]);
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <DS3231_getMonth+0x18>)
 800164e:	7958      	ldrb	r0, [r3, #5]
    return ((val / 16 * 10) + (val % 16));
 8001650:	0903      	lsrs	r3, r0, #4
 8001652:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001656:	f000 000f 	and.w	r0, r0, #15
 800165a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800165e:	b2c0      	uxtb	r0, r0
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000364 	.word	0x20000364

08001668 <DS3231_getYear>:

uint8_t DS3231_getYear(void) {
    return bcdToDec(rtcBuffer[6]);
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <DS3231_getYear+0x18>)
 800166a:	7998      	ldrb	r0, [r3, #6]
    return ((val / 16 * 10) + (val % 16));
 800166c:	0903      	lsrs	r3, r0, #4
 800166e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001672:	f000 000f 	and.w	r0, r0, #15
 8001676:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800167a:	b2c0      	uxtb	r0, r0
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000364 	.word	0x20000364

08001684 <DS3231_getAlarm1Min>:
uint8_t DS3231_getAlarm1Sec(void) {
    return bcdToDec(rtcBuffer[7]);
}

uint8_t DS3231_getAlarm1Min(void) {
    return bcdToDec(rtcBuffer[8]);
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <DS3231_getAlarm1Min+0x18>)
 8001686:	7a18      	ldrb	r0, [r3, #8]
    return ((val / 16 * 10) + (val % 16));
 8001688:	0903      	lsrs	r3, r0, #4
 800168a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800168e:	f000 000f 	and.w	r0, r0, #15
 8001692:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001696:	b2c0      	uxtb	r0, r0
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000364 	.word	0x20000364

080016a0 <DS3231_getAlarm1Hour>:

uint8_t DS3231_getAlarm1Hour(void) {
    return bcdToDec(rtcBuffer[9]);
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <DS3231_getAlarm1Hour+0x18>)
 80016a2:	7a58      	ldrb	r0, [r3, #9]
    return ((val / 16 * 10) + (val % 16));
 80016a4:	0903      	lsrs	r3, r0, #4
 80016a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80016aa:	f000 000f 	and.w	r0, r0, #15
 80016ae:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80016b2:	b2c0      	uxtb	r0, r0
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000364 	.word	0x20000364

080016bc <RGB>:
#include "hx8357.h"

uint32_t RGB(uint8_t r, uint8_t g, uint8_t b)
{   
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 80016bc:	0209      	lsls	r1, r1, #8
 80016be:	eb01 4000 	add.w	r0, r1, r0, lsl #16
}
 80016c2:	4410      	add	r0, r2
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop

080016c8 <LCD_Rect_Fill>:
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(0, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 80016c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016cc:	460c      	mov	r4, r1
 80016ce:	4605      	mov	r5, r0
 80016d0:	4694      	mov	ip, r2
	LCD_RS_R
 80016d2:	48cc      	ldr	r0, [pc, #816]	; (8001a04 <LCD_Rect_Fill+0x33c>)
{
 80016d4:	b091      	sub	sp, #68	; 0x44
	LCD_RS_S
 80016d6:	4680      	mov	r8, r0
{
 80016d8:	9501      	str	r5, [sp, #4]
  data[1] = x1 & 0xFF;
 80016da:	f88d 403d 	strb.w	r4, [sp, #61]	; 0x3d
	uint32_t i = 0;
	uint32_t j = (uint32_t) w * (uint32_t) h;
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80016de:	f104 3eff 	add.w	lr, r4, #4294967295
	data[0] = x1 >> 8;
 80016e2:	0a24      	lsrs	r4, r4, #8
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80016e4:	449e      	add	lr, r3
	data[0] = x1 >> 8;
 80016e6:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
	uint32_t j = (uint32_t) w * (uint32_t) h;
 80016ea:	fb03 f40c 	mul.w	r4, r3, ip
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80016ee:	9b01      	ldr	r3, [sp, #4]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 80016f0:	4ec5      	ldr	r6, [pc, #788]	; (8001a08 <LCD_Rect_Fill+0x340>)
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80016f2:	3b01      	subs	r3, #1
 80016f4:	449c      	add	ip, r3
 80016f6:	fa1f f38c 	uxth.w	r3, ip
	LCD_RS_R
 80016fa:	2200      	movs	r2, #0
 80016fc:	2101      	movs	r1, #1
  data[3] = x2 & 0xFF;
 80016fe:	f88d e03f 	strb.w	lr, [sp, #63]	; 0x3f
  data[2] = x2 >> 8;
 8001702:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8001706:	f88d e03e 	strb.w	lr, [sp, #62]	; 0x3e
	LCD_Window(y, x, y + h - 1, x + w - 1);
 800170a:	9302      	str	r3, [sp, #8]
{
 800170c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
	uint32_t j = (uint32_t) w * (uint32_t) h;
 800170e:	940d      	str	r4, [sp, #52]	; 0x34
	LCD_RS_R
 8001710:	f002 f9e6 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_R
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800171a:	4640      	mov	r0, r8
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 800171c:	4dbb      	ldr	r5, [pc, #748]	; (8001a0c <LCD_Rect_Fill+0x344>)
	LCD_CS_R
 800171e:	f002 f9df 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001722:	2200      	movs	r2, #0
 8001724:	2102      	movs	r1, #2
 8001726:	4630      	mov	r0, r6
 8001728:	f002 f9da 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800172c:	2200      	movs	r2, #0
 800172e:	2101      	movs	r1, #1
 8001730:	4630      	mov	r0, r6
 8001732:	f002 f9d5 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001736:	2200      	movs	r2, #0
 8001738:	2108      	movs	r1, #8
 800173a:	4628      	mov	r0, r5
 800173c:	f002 f9d0 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001740:	2200      	movs	r2, #0
 8001742:	2104      	movs	r1, #4
 8001744:	4628      	mov	r0, r5
 8001746:	f002 f9cb 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 800174a:	2200      	movs	r2, #0
 800174c:	2102      	movs	r1, #2
 800174e:	4628      	mov	r0, r5
 8001750:	f002 f9c6 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001754:	2200      	movs	r2, #0
 8001756:	2101      	movs	r1, #1
 8001758:	4628      	mov	r0, r5
 800175a:	f002 f9c1 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 800175e:	2200      	movs	r2, #0
 8001760:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001764:	4628      	mov	r0, r5
 8001766:	f002 f9bb 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 800176a:	2200      	movs	r2, #0
 800176c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001770:	4628      	mov	r0, r5
 8001772:	f002 f9b5 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001776:	2200      	movs	r2, #0
 8001778:	2104      	movs	r1, #4
 800177a:	4630      	mov	r0, r6
 800177c:	f002 f9b0 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001780:	2200      	movs	r2, #0
 8001782:	2108      	movs	r1, #8
 8001784:	4630      	mov	r0, r6
 8001786:	f002 f9ab 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800178a:	2201      	movs	r2, #1
 800178c:	2110      	movs	r1, #16
 800178e:	4630      	mov	r0, r6
 8001790:	f002 f9a6 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001794:	2200      	movs	r2, #0
 8001796:	2120      	movs	r1, #32
 8001798:	4630      	mov	r0, r6
 800179a:	f002 f9a1 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800179e:	2201      	movs	r2, #1
 80017a0:	2140      	movs	r1, #64	; 0x40
 80017a2:	4630      	mov	r0, r6
 80017a4:	f002 f99c 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80017a8:	2200      	movs	r2, #0
 80017aa:	2180      	movs	r1, #128	; 0x80
 80017ac:	4630      	mov	r0, r6
 80017ae:	f002 f997 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80017b2:	2201      	movs	r2, #1
 80017b4:	2110      	movs	r1, #16
 80017b6:	4628      	mov	r0, r5
 80017b8:	f002 f992 	bl	8003ae0 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80017bc:	2200      	movs	r2, #0
 80017be:	2120      	movs	r1, #32
 80017c0:	4628      	mov	r0, r5
 80017c2:	f002 f98d 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_R
 80017c6:	2200      	movs	r2, #0
 80017c8:	2102      	movs	r1, #2
 80017ca:	4640      	mov	r0, r8
 80017cc:	f002 f988 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_S
 80017d0:	2201      	movs	r2, #1
 80017d2:	2102      	movs	r1, #2
 80017d4:	4640      	mov	r0, r8
 80017d6:	f002 f983 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_S
 80017da:	f10d 093c 	add.w	r9, sp, #60	; 0x3c
 80017de:	2201      	movs	r2, #1
 80017e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017e4:	4640      	mov	r0, r8
 80017e6:	46ca      	mov	sl, r9
 80017e8:	f10d 0b40 	add.w	fp, sp, #64	; 0x40
 80017ec:	f002 f978 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_RS_S
 80017f0:	2201      	movs	r2, #1
 80017f2:	4640      	mov	r0, r8
 80017f4:	4611      	mov	r1, r2
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 80017f6:	f81a 4b01 	ldrb.w	r4, [sl], #1
	LCD_RS_S
 80017fa:	f002 f971 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_R	
 80017fe:	2200      	movs	r2, #0
 8001800:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001804:	4640      	mov	r0, r8
 8001806:	f002 f96b 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 800180a:	2200      	movs	r2, #0
 800180c:	2102      	movs	r1, #2
 800180e:	4630      	mov	r0, r6
 8001810:	f002 f966 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001814:	2200      	movs	r2, #0
 8001816:	2101      	movs	r1, #1
 8001818:	4630      	mov	r0, r6
 800181a:	f002 f961 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 800181e:	2200      	movs	r2, #0
 8001820:	2108      	movs	r1, #8
 8001822:	4628      	mov	r0, r5
 8001824:	f002 f95c 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001828:	2200      	movs	r2, #0
 800182a:	2104      	movs	r1, #4
 800182c:	4628      	mov	r0, r5
 800182e:	f002 f957 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8001832:	2200      	movs	r2, #0
 8001834:	2102      	movs	r1, #2
 8001836:	4628      	mov	r0, r5
 8001838:	f002 f952 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 800183c:	2200      	movs	r2, #0
 800183e:	2101      	movs	r1, #1
 8001840:	4628      	mov	r0, r5
 8001842:	f002 f94d 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8001846:	2200      	movs	r2, #0
 8001848:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800184c:	4628      	mov	r0, r5
 800184e:	f002 f947 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001858:	4628      	mov	r0, r5
 800185a:	f002 f941 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800185e:	09e2      	lsrs	r2, r4, #7
 8001860:	bf18      	it	ne
 8001862:	2201      	movne	r2, #1
 8001864:	2104      	movs	r1, #4
 8001866:	4630      	mov	r0, r6
 8001868:	f002 f93a 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800186c:	f014 0240 	ands.w	r2, r4, #64	; 0x40
 8001870:	bf18      	it	ne
 8001872:	2201      	movne	r2, #1
 8001874:	2108      	movs	r1, #8
 8001876:	4630      	mov	r0, r6
 8001878:	f002 f932 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800187c:	f014 0220 	ands.w	r2, r4, #32
 8001880:	bf18      	it	ne
 8001882:	2201      	movne	r2, #1
 8001884:	2110      	movs	r1, #16
 8001886:	4630      	mov	r0, r6
 8001888:	f002 f92a 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800188c:	f014 0210 	ands.w	r2, r4, #16
 8001890:	bf18      	it	ne
 8001892:	2201      	movne	r2, #1
 8001894:	2120      	movs	r1, #32
 8001896:	4630      	mov	r0, r6
 8001898:	f002 f922 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800189c:	f014 0208 	ands.w	r2, r4, #8
 80018a0:	bf18      	it	ne
 80018a2:	2201      	movne	r2, #1
 80018a4:	2140      	movs	r1, #64	; 0x40
 80018a6:	4630      	mov	r0, r6
 80018a8:	f002 f91a 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80018ac:	f014 0204 	ands.w	r2, r4, #4
 80018b0:	bf18      	it	ne
 80018b2:	2201      	movne	r2, #1
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	4630      	mov	r0, r6
 80018b8:	f002 f912 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80018bc:	f014 0202 	ands.w	r2, r4, #2
 80018c0:	bf18      	it	ne
 80018c2:	2201      	movne	r2, #1
 80018c4:	2110      	movs	r1, #16
 80018c6:	4628      	mov	r0, r5
 80018c8:	f002 f90a 	bl	8003ae0 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80018cc:	f014 0401 	ands.w	r4, r4, #1
 80018d0:	f000 82ea 	beq.w	8001ea8 <LCD_Rect_Fill+0x7e0>
 80018d4:	2201      	movs	r2, #1
 80018d6:	2120      	movs	r1, #32
 80018d8:	4628      	mov	r0, r5
 80018da:	f002 f901 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_R
 80018de:	2200      	movs	r2, #0
 80018e0:	2102      	movs	r1, #2
 80018e2:	4640      	mov	r0, r8
 80018e4:	f002 f8fc 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_S
 80018e8:	2201      	movs	r2, #1
 80018ea:	2102      	movs	r1, #2
 80018ec:	4640      	mov	r0, r8
 80018ee:	f002 f8f7 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_S
 80018f2:	2201      	movs	r2, #1
 80018f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018f8:	4640      	mov	r0, r8
 80018fa:	f002 f8f1 	bl	8003ae0 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 80018fe:	45d3      	cmp	fp, sl
 8001900:	f47f af76 	bne.w	80017f0 <LCD_Rect_Fill+0x128>
  data[1] = y1;
 8001904:	9b01      	ldr	r3, [sp, #4]
	LCD_RS_R
 8001906:	2200      	movs	r2, #0
  data[1] = y1;
 8001908:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
	data[0] = y1 >> 8;
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  data[3] = y2;
 8001912:	9b02      	ldr	r3, [sp, #8]
	LCD_RS_R
 8001914:	2101      	movs	r1, #1
  data[2] = y2 >> 8;
 8001916:	ea4f 2c13 	mov.w	ip, r3, lsr #8
	LCD_RS_R
 800191a:	483a      	ldr	r0, [pc, #232]	; (8001a04 <LCD_Rect_Fill+0x33c>)
  data[3] = y2;
 800191c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
  data[2] = y2 >> 8;
 8001920:	f88d c03e 	strb.w	ip, [sp, #62]	; 0x3e
	LCD_RS_R
 8001924:	f002 f8dc 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_R
 8001928:	2200      	movs	r2, #0
 800192a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800192e:	4835      	ldr	r0, [pc, #212]	; (8001a04 <LCD_Rect_Fill+0x33c>)
 8001930:	f002 f8d6 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001934:	2200      	movs	r2, #0
 8001936:	2102      	movs	r1, #2
 8001938:	4833      	ldr	r0, [pc, #204]	; (8001a08 <LCD_Rect_Fill+0x340>)
 800193a:	f002 f8d1 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800193e:	2200      	movs	r2, #0
 8001940:	2101      	movs	r1, #1
 8001942:	4831      	ldr	r0, [pc, #196]	; (8001a08 <LCD_Rect_Fill+0x340>)
 8001944:	f002 f8cc 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001948:	2200      	movs	r2, #0
 800194a:	2108      	movs	r1, #8
 800194c:	482f      	ldr	r0, [pc, #188]	; (8001a0c <LCD_Rect_Fill+0x344>)
 800194e:	f002 f8c7 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001952:	2200      	movs	r2, #0
 8001954:	2104      	movs	r1, #4
 8001956:	482d      	ldr	r0, [pc, #180]	; (8001a0c <LCD_Rect_Fill+0x344>)
 8001958:	f002 f8c2 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 800195c:	2200      	movs	r2, #0
 800195e:	2102      	movs	r1, #2
 8001960:	482a      	ldr	r0, [pc, #168]	; (8001a0c <LCD_Rect_Fill+0x344>)
 8001962:	f002 f8bd 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001966:	2200      	movs	r2, #0
 8001968:	2101      	movs	r1, #1
 800196a:	4828      	ldr	r0, [pc, #160]	; (8001a0c <LCD_Rect_Fill+0x344>)
 800196c:	f002 f8b8 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8001970:	2200      	movs	r2, #0
 8001972:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001976:	4825      	ldr	r0, [pc, #148]	; (8001a0c <LCD_Rect_Fill+0x344>)
 8001978:	f002 f8b2 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 800197c:	2200      	movs	r2, #0
 800197e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001982:	4822      	ldr	r0, [pc, #136]	; (8001a0c <LCD_Rect_Fill+0x344>)
 8001984:	f002 f8ac 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001988:	2200      	movs	r2, #0
 800198a:	2104      	movs	r1, #4
 800198c:	481e      	ldr	r0, [pc, #120]	; (8001a08 <LCD_Rect_Fill+0x340>)
 800198e:	f002 f8a7 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001992:	2200      	movs	r2, #0
 8001994:	2108      	movs	r1, #8
 8001996:	481c      	ldr	r0, [pc, #112]	; (8001a08 <LCD_Rect_Fill+0x340>)
 8001998:	f002 f8a2 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800199c:	2201      	movs	r2, #1
 800199e:	2110      	movs	r1, #16
 80019a0:	4819      	ldr	r0, [pc, #100]	; (8001a08 <LCD_Rect_Fill+0x340>)
 80019a2:	f002 f89d 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80019a6:	2200      	movs	r2, #0
 80019a8:	2120      	movs	r1, #32
 80019aa:	4817      	ldr	r0, [pc, #92]	; (8001a08 <LCD_Rect_Fill+0x340>)
 80019ac:	f002 f898 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80019b0:	2201      	movs	r2, #1
 80019b2:	2140      	movs	r1, #64	; 0x40
 80019b4:	4814      	ldr	r0, [pc, #80]	; (8001a08 <LCD_Rect_Fill+0x340>)
 80019b6:	f002 f893 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80019ba:	2200      	movs	r2, #0
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	4812      	ldr	r0, [pc, #72]	; (8001a08 <LCD_Rect_Fill+0x340>)
 80019c0:	f002 f88e 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80019c4:	2201      	movs	r2, #1
 80019c6:	2110      	movs	r1, #16
 80019c8:	4810      	ldr	r0, [pc, #64]	; (8001a0c <LCD_Rect_Fill+0x344>)
 80019ca:	f002 f889 	bl	8003ae0 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80019ce:	2201      	movs	r2, #1
 80019d0:	2120      	movs	r1, #32
 80019d2:	480e      	ldr	r0, [pc, #56]	; (8001a0c <LCD_Rect_Fill+0x344>)
 80019d4:	f002 f884 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_R
 80019d8:	2200      	movs	r2, #0
 80019da:	2102      	movs	r1, #2
 80019dc:	4809      	ldr	r0, [pc, #36]	; (8001a04 <LCD_Rect_Fill+0x33c>)
 80019de:	f002 f87f 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_S
 80019e2:	2201      	movs	r2, #1
 80019e4:	2102      	movs	r1, #2
 80019e6:	4807      	ldr	r0, [pc, #28]	; (8001a04 <LCD_Rect_Fill+0x33c>)
 80019e8:	f002 f87a 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_S
 80019ec:	2201      	movs	r2, #1
 80019ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019f2:	4804      	ldr	r0, [pc, #16]	; (8001a04 <LCD_Rect_Fill+0x33c>)
 80019f4:	f002 f874 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_RS_S
 80019f8:	f8df 8008 	ldr.w	r8, [pc, #8]	; 8001a04 <LCD_Rect_Fill+0x33c>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 80019fc:	4e02      	ldr	r6, [pc, #8]	; (8001a08 <LCD_Rect_Fill+0x340>)
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 80019fe:	4d03      	ldr	r5, [pc, #12]	; (8001a0c <LCD_Rect_Fill+0x344>)
 8001a00:	e006      	b.n	8001a10 <LCD_Rect_Fill+0x348>
 8001a02:	bf00      	nop
 8001a04:	40010c00 	.word	0x40010c00
 8001a08:	40010800 	.word	0x40010800
 8001a0c:	40011000 	.word	0x40011000
	LCD_RS_S
 8001a10:	2201      	movs	r2, #1
 8001a12:	4640      	mov	r0, r8
 8001a14:	4611      	mov	r1, r2
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 8001a16:	f819 4b01 	ldrb.w	r4, [r9], #1
	LCD_RS_S
 8001a1a:	f002 f861 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_R	
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a24:	4640      	mov	r0, r8
 8001a26:	f002 f85b 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	4630      	mov	r0, r6
 8001a30:	f002 f856 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001a34:	2200      	movs	r2, #0
 8001a36:	2101      	movs	r1, #1
 8001a38:	4630      	mov	r0, r6
 8001a3a:	f002 f851 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2108      	movs	r1, #8
 8001a42:	4628      	mov	r0, r5
 8001a44:	f002 f84c 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2104      	movs	r1, #4
 8001a4c:	4628      	mov	r0, r5
 8001a4e:	f002 f847 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8001a52:	2200      	movs	r2, #0
 8001a54:	2102      	movs	r1, #2
 8001a56:	4628      	mov	r0, r5
 8001a58:	f002 f842 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2101      	movs	r1, #1
 8001a60:	4628      	mov	r0, r5
 8001a62:	f002 f83d 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8001a66:	2200      	movs	r2, #0
 8001a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a6c:	4628      	mov	r0, r5
 8001a6e:	f002 f837 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a78:	4628      	mov	r0, r5
 8001a7a:	f002 f831 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001a7e:	09e2      	lsrs	r2, r4, #7
 8001a80:	bf18      	it	ne
 8001a82:	2201      	movne	r2, #1
 8001a84:	2104      	movs	r1, #4
 8001a86:	4630      	mov	r0, r6
 8001a88:	f002 f82a 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001a8c:	f014 0240 	ands.w	r2, r4, #64	; 0x40
 8001a90:	bf18      	it	ne
 8001a92:	2201      	movne	r2, #1
 8001a94:	2108      	movs	r1, #8
 8001a96:	4630      	mov	r0, r6
 8001a98:	f002 f822 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001a9c:	f014 0220 	ands.w	r2, r4, #32
 8001aa0:	bf18      	it	ne
 8001aa2:	2201      	movne	r2, #1
 8001aa4:	2110      	movs	r1, #16
 8001aa6:	4630      	mov	r0, r6
 8001aa8:	f002 f81a 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001aac:	f014 0210 	ands.w	r2, r4, #16
 8001ab0:	bf18      	it	ne
 8001ab2:	2201      	movne	r2, #1
 8001ab4:	2120      	movs	r1, #32
 8001ab6:	4630      	mov	r0, r6
 8001ab8:	f002 f812 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001abc:	f014 0208 	ands.w	r2, r4, #8
 8001ac0:	bf18      	it	ne
 8001ac2:	2201      	movne	r2, #1
 8001ac4:	2140      	movs	r1, #64	; 0x40
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	f002 f80a 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001acc:	f014 0204 	ands.w	r2, r4, #4
 8001ad0:	bf18      	it	ne
 8001ad2:	2201      	movne	r2, #1
 8001ad4:	2180      	movs	r1, #128	; 0x80
 8001ad6:	4630      	mov	r0, r6
 8001ad8:	f002 f802 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001adc:	f014 0202 	ands.w	r2, r4, #2
 8001ae0:	bf18      	it	ne
 8001ae2:	2201      	movne	r2, #1
 8001ae4:	2110      	movs	r1, #16
 8001ae6:	4628      	mov	r0, r5
 8001ae8:	f001 fffa 	bl	8003ae0 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001aec:	f014 0401 	ands.w	r4, r4, #1
 8001af0:	f000 81d8 	beq.w	8001ea4 <LCD_Rect_Fill+0x7dc>
 8001af4:	2201      	movs	r2, #1
 8001af6:	2120      	movs	r1, #32
 8001af8:	4628      	mov	r0, r5
 8001afa:	f001 fff1 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_R
 8001afe:	2200      	movs	r2, #0
 8001b00:	2102      	movs	r1, #2
 8001b02:	4640      	mov	r0, r8
 8001b04:	f001 ffec 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_S
 8001b08:	2201      	movs	r2, #1
 8001b0a:	2102      	movs	r1, #2
 8001b0c:	4640      	mov	r0, r8
 8001b0e:	f001 ffe7 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_S
 8001b12:	2201      	movs	r2, #1
 8001b14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b18:	4640      	mov	r0, r8
 8001b1a:	f001 ffe1 	bl	8003ae0 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 8001b1e:	45d9      	cmp	r9, fp
 8001b20:	f47f af76 	bne.w	8001a10 <LCD_Rect_Fill+0x348>
	LCD_RS_R
 8001b24:	2200      	movs	r2, #0
 8001b26:	2101      	movs	r1, #1
 8001b28:	48cf      	ldr	r0, [pc, #828]	; (8001e68 <LCD_Rect_Fill+0x7a0>)
 8001b2a:	f001 ffd9 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_R
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b34:	48cc      	ldr	r0, [pc, #816]	; (8001e68 <LCD_Rect_Fill+0x7a0>)
 8001b36:	f001 ffd3 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	48cb      	ldr	r0, [pc, #812]	; (8001e6c <LCD_Rect_Fill+0x7a4>)
 8001b40:	f001 ffce 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001b44:	2200      	movs	r2, #0
 8001b46:	2101      	movs	r1, #1
 8001b48:	48c8      	ldr	r0, [pc, #800]	; (8001e6c <LCD_Rect_Fill+0x7a4>)
 8001b4a:	f001 ffc9 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2108      	movs	r1, #8
 8001b52:	48c7      	ldr	r0, [pc, #796]	; (8001e70 <LCD_Rect_Fill+0x7a8>)
 8001b54:	f001 ffc4 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2104      	movs	r1, #4
 8001b5c:	48c4      	ldr	r0, [pc, #784]	; (8001e70 <LCD_Rect_Fill+0x7a8>)
 8001b5e:	f001 ffbf 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8001b62:	2200      	movs	r2, #0
 8001b64:	2102      	movs	r1, #2
 8001b66:	48c2      	ldr	r0, [pc, #776]	; (8001e70 <LCD_Rect_Fill+0x7a8>)
 8001b68:	f001 ffba 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2101      	movs	r1, #1
 8001b70:	48bf      	ldr	r0, [pc, #764]	; (8001e70 <LCD_Rect_Fill+0x7a8>)
 8001b72:	f001 ffb5 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8001b76:	2200      	movs	r2, #0
 8001b78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b7c:	48bc      	ldr	r0, [pc, #752]	; (8001e70 <LCD_Rect_Fill+0x7a8>)
 8001b7e:	f001 ffaf 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b88:	48b9      	ldr	r0, [pc, #740]	; (8001e70 <LCD_Rect_Fill+0x7a8>)
 8001b8a:	f001 ffa9 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2104      	movs	r1, #4
 8001b92:	48b6      	ldr	r0, [pc, #728]	; (8001e6c <LCD_Rect_Fill+0x7a4>)
 8001b94:	f001 ffa4 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2108      	movs	r1, #8
 8001b9c:	48b3      	ldr	r0, [pc, #716]	; (8001e6c <LCD_Rect_Fill+0x7a4>)
 8001b9e:	f001 ff9f 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	2110      	movs	r1, #16
 8001ba6:	48b1      	ldr	r0, [pc, #708]	; (8001e6c <LCD_Rect_Fill+0x7a4>)
 8001ba8:	f001 ff9a 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001bac:	2200      	movs	r2, #0
 8001bae:	2120      	movs	r1, #32
 8001bb0:	48ae      	ldr	r0, [pc, #696]	; (8001e6c <LCD_Rect_Fill+0x7a4>)
 8001bb2:	f001 ff95 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	2140      	movs	r1, #64	; 0x40
 8001bba:	48ac      	ldr	r0, [pc, #688]	; (8001e6c <LCD_Rect_Fill+0x7a4>)
 8001bbc:	f001 ff90 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2180      	movs	r1, #128	; 0x80
 8001bc4:	48a9      	ldr	r0, [pc, #676]	; (8001e6c <LCD_Rect_Fill+0x7a4>)
 8001bc6:	f001 ff8b 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2110      	movs	r1, #16
 8001bce:	48a8      	ldr	r0, [pc, #672]	; (8001e70 <LCD_Rect_Fill+0x7a8>)
 8001bd0:	f001 ff86 	bl	8003ae0 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2120      	movs	r1, #32
 8001bd8:	48a5      	ldr	r0, [pc, #660]	; (8001e70 <LCD_Rect_Fill+0x7a8>)
 8001bda:	f001 ff81 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_R
 8001bde:	2200      	movs	r2, #0
 8001be0:	2102      	movs	r1, #2
 8001be2:	48a1      	ldr	r0, [pc, #644]	; (8001e68 <LCD_Rect_Fill+0x7a0>)
 8001be4:	f001 ff7c 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_S
 8001be8:	2201      	movs	r2, #1
 8001bea:	2102      	movs	r1, #2
 8001bec:	489e      	ldr	r0, [pc, #632]	; (8001e68 <LCD_Rect_Fill+0x7a0>)
 8001bee:	f001 ff77 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_S
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bf8:	489b      	ldr	r0, [pc, #620]	; (8001e68 <LCD_Rect_Fill+0x7a0>)
 8001bfa:	f001 ff71 	bl	8003ae0 <HAL_GPIO_WritePin>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8001bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80df 	beq.w	8001dc4 <LCD_Rect_Fill+0x6fc>
 8001c06:	f04f 0900 	mov.w	r9, #0
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8001c0a:	f3c7 2685 	ubfx	r6, r7, #10, #6
 8001c0e:	f3c7 43c4 	ubfx	r3, r7, #19, #5
 8001c12:	0176      	lsls	r6, r6, #5
 8001c14:	ea46 26c3 	orr.w	r6, r6, r3, lsl #11
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001c18:	f3c3 1310 	ubfx	r3, r3, #4, #17
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	f3c6 3380 	ubfx	r3, r6, #14, #1
 8001c22:	9302      	str	r3, [sp, #8]
 8001c24:	f3c6 3340 	ubfx	r3, r6, #13, #1
 8001c28:	9303      	str	r3, [sp, #12]
 8001c2a:	f3c6 3300 	ubfx	r3, r6, #12, #1
 8001c2e:	9304      	str	r3, [sp, #16]
 8001c30:	f3c6 23c0 	ubfx	r3, r6, #11, #1
 8001c34:	9305      	str	r3, [sp, #20]
 8001c36:	f3c6 2380 	ubfx	r3, r6, #10, #1
 8001c3a:	9306      	str	r3, [sp, #24]
 8001c3c:	f3c6 2340 	ubfx	r3, r6, #9, #1
 8001c40:	9307      	str	r3, [sp, #28]
 8001c42:	f3c6 2300 	ubfx	r3, r6, #8, #1
 8001c46:	9308      	str	r3, [sp, #32]
 8001c48:	f3c6 13c0 	ubfx	r3, r6, #7, #1
 8001c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8001c4e:	f3c6 1380 	ubfx	r3, r6, #6, #1
 8001c52:	930a      	str	r3, [sp, #40]	; 0x28
 8001c54:	f3c7 1340 	ubfx	r3, r7, #5, #1
 8001c58:	930b      	str	r3, [sp, #44]	; 0x2c
	LCD_RS_S
 8001c5a:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8001e68 <LCD_Rect_Fill+0x7a0>
 8001c5e:	f3c7 1300 	ubfx	r3, r7, #4, #1
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001c62:	4d82      	ldr	r5, [pc, #520]	; (8001e6c <LCD_Rect_Fill+0x7a4>)
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001c64:	4c82      	ldr	r4, [pc, #520]	; (8001e70 <LCD_Rect_Fill+0x7a8>)
 8001c66:	f3c7 1bc0 	ubfx	fp, r7, #7, #1
 8001c6a:	f3c7 1a80 	ubfx	sl, r7, #6, #1
 8001c6e:	f3c6 1640 	ubfx	r6, r6, #5, #1
 8001c72:	930c      	str	r3, [sp, #48]	; 0x30
 8001c74:	f3c7 07c0 	ubfx	r7, r7, #3, #1
	LCD_RS_S
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4640      	mov	r0, r8
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	f001 ff2f 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_R	
 8001c82:	2200      	movs	r2, #0
 8001c84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c88:	4640      	mov	r0, r8
 8001c8a:	f001 ff29 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001c8e:	9b01      	ldr	r3, [sp, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80ef 	beq.w	8001e74 <LCD_Rect_Fill+0x7ac>
 8001c96:	2201      	movs	r2, #1
 8001c98:	2102      	movs	r1, #2
 8001c9a:	4628      	mov	r0, r5
 8001c9c:	f001 ff20 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001ca0:	9b02      	ldr	r3, [sp, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 80ef 	beq.w	8001e86 <LCD_Rect_Fill+0x7be>
 8001ca8:	2201      	movs	r2, #1
 8001caa:	4628      	mov	r0, r5
 8001cac:	4611      	mov	r1, r2
 8001cae:	f001 ff17 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001cb2:	9b03      	ldr	r3, [sp, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80ef 	beq.w	8001e98 <LCD_Rect_Fill+0x7d0>
 8001cba:	2201      	movs	r2, #1
 8001cbc:	2108      	movs	r1, #8
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f001 ff0e 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001cc4:	9b04      	ldr	r3, [sp, #16]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 80c7 	beq.w	8001e5a <LCD_Rect_Fill+0x792>
 8001ccc:	2201      	movs	r2, #1
 8001cce:	2104      	movs	r1, #4
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	f001 ff05 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8001cd6:	9b05      	ldr	r3, [sp, #20]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 80b8 	beq.w	8001e4e <LCD_Rect_Fill+0x786>
 8001cde:	2201      	movs	r2, #1
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	f001 fefc 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001ce8:	9b06      	ldr	r3, [sp, #24]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80a9 	beq.w	8001e42 <LCD_Rect_Fill+0x77a>
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	f001 fef3 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8001cfa:	9b07      	ldr	r3, [sp, #28]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 8099 	beq.w	8001e34 <LCD_Rect_Fill+0x76c>
 8001d02:	2201      	movs	r2, #1
 8001d04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d08:	4620      	mov	r0, r4
 8001d0a:	f001 fee9 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001d0e:	9b08      	ldr	r3, [sp, #32]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 8088 	beq.w	8001e26 <LCD_Rect_Fill+0x75e>
 8001d16:	2201      	movs	r2, #1
 8001d18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	f001 fedf 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d078      	beq.n	8001e1a <LCD_Rect_Fill+0x752>
 8001d28:	2201      	movs	r2, #1
 8001d2a:	2104      	movs	r1, #4
 8001d2c:	4628      	mov	r0, r5
 8001d2e:	f001 fed7 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d06a      	beq.n	8001e0e <LCD_Rect_Fill+0x746>
 8001d38:	2201      	movs	r2, #1
 8001d3a:	2108      	movs	r1, #8
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	f001 fecf 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001d42:	2e00      	cmp	r6, #0
 8001d44:	d05d      	beq.n	8001e02 <LCD_Rect_Fill+0x73a>
 8001d46:	2201      	movs	r2, #1
 8001d48:	2110      	movs	r1, #16
 8001d4a:	4628      	mov	r0, r5
 8001d4c:	f001 fec8 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001d50:	f1bb 0f00 	cmp.w	fp, #0
 8001d54:	d04f      	beq.n	8001df6 <LCD_Rect_Fill+0x72e>
 8001d56:	2201      	movs	r2, #1
 8001d58:	2120      	movs	r1, #32
 8001d5a:	4628      	mov	r0, r5
 8001d5c:	f001 fec0 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001d60:	f1ba 0f00 	cmp.w	sl, #0
 8001d64:	d041      	beq.n	8001dea <LCD_Rect_Fill+0x722>
 8001d66:	2201      	movs	r2, #1
 8001d68:	2140      	movs	r1, #64	; 0x40
 8001d6a:	4628      	mov	r0, r5
 8001d6c:	f001 feb8 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001d72:	b3a3      	cbz	r3, 8001dde <LCD_Rect_Fill+0x716>
 8001d74:	2201      	movs	r2, #1
 8001d76:	2180      	movs	r1, #128	; 0x80
 8001d78:	4628      	mov	r0, r5
 8001d7a:	f001 feb1 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001d7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001d80:	b33b      	cbz	r3, 8001dd2 <LCD_Rect_Fill+0x70a>
 8001d82:	2201      	movs	r2, #1
 8001d84:	2110      	movs	r1, #16
 8001d86:	4620      	mov	r0, r4
 8001d88:	f001 feaa 	bl	8003ae0 <HAL_GPIO_WritePin>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8001d8c:	f109 0901 	add.w	r9, r9, #1
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001d90:	b1df      	cbz	r7, 8001dca <LCD_Rect_Fill+0x702>
 8001d92:	2201      	movs	r2, #1
 8001d94:	2120      	movs	r1, #32
 8001d96:	4620      	mov	r0, r4
 8001d98:	f001 fea2 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_R
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2102      	movs	r1, #2
 8001da0:	4640      	mov	r0, r8
 8001da2:	f001 fe9d 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_S
 8001da6:	2201      	movs	r2, #1
 8001da8:	2102      	movs	r1, #2
 8001daa:	4640      	mov	r0, r8
 8001dac:	f001 fe98 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_S
 8001db0:	2201      	movs	r2, #1
 8001db2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001db6:	4640      	mov	r0, r8
 8001db8:	f001 fe92 	bl	8003ae0 <HAL_GPIO_WritePin>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8001dbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001dbe:	454b      	cmp	r3, r9
 8001dc0:	f47f af5a 	bne.w	8001c78 <LCD_Rect_Fill+0x5b0>
}
 8001dc4:	b011      	add	sp, #68	; 0x44
 8001dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001dca:	2120      	movs	r1, #32
 8001dcc:	4620      	mov	r0, r4
 8001dce:	463a      	mov	r2, r7
 8001dd0:	e7e2      	b.n	8001d98 <LCD_Rect_Fill+0x6d0>
 8001dd2:	461a      	mov	r2, r3
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001dd4:	2110      	movs	r1, #16
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f001 fe82 	bl	8003ae0 <HAL_GPIO_WritePin>
 8001ddc:	e7d6      	b.n	8001d8c <LCD_Rect_Fill+0x6c4>
 8001dde:	461a      	mov	r2, r3
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001de0:	2180      	movs	r1, #128	; 0x80
 8001de2:	4628      	mov	r0, r5
 8001de4:	f001 fe7c 	bl	8003ae0 <HAL_GPIO_WritePin>
 8001de8:	e7c9      	b.n	8001d7e <LCD_Rect_Fill+0x6b6>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001dea:	4652      	mov	r2, sl
 8001dec:	2140      	movs	r1, #64	; 0x40
 8001dee:	4628      	mov	r0, r5
 8001df0:	f001 fe76 	bl	8003ae0 <HAL_GPIO_WritePin>
 8001df4:	e7bc      	b.n	8001d70 <LCD_Rect_Fill+0x6a8>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001df6:	465a      	mov	r2, fp
 8001df8:	2120      	movs	r1, #32
 8001dfa:	4628      	mov	r0, r5
 8001dfc:	f001 fe70 	bl	8003ae0 <HAL_GPIO_WritePin>
 8001e00:	e7ae      	b.n	8001d60 <LCD_Rect_Fill+0x698>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001e02:	4632      	mov	r2, r6
 8001e04:	2110      	movs	r1, #16
 8001e06:	4628      	mov	r0, r5
 8001e08:	f001 fe6a 	bl	8003ae0 <HAL_GPIO_WritePin>
 8001e0c:	e7a0      	b.n	8001d50 <LCD_Rect_Fill+0x688>
 8001e0e:	461a      	mov	r2, r3
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001e10:	2108      	movs	r1, #8
 8001e12:	4628      	mov	r0, r5
 8001e14:	f001 fe64 	bl	8003ae0 <HAL_GPIO_WritePin>
 8001e18:	e793      	b.n	8001d42 <LCD_Rect_Fill+0x67a>
 8001e1a:	461a      	mov	r2, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001e1c:	2104      	movs	r1, #4
 8001e1e:	4628      	mov	r0, r5
 8001e20:	f001 fe5e 	bl	8003ae0 <HAL_GPIO_WritePin>
 8001e24:	e785      	b.n	8001d32 <LCD_Rect_Fill+0x66a>
 8001e26:	461a      	mov	r2, r3
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001e28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f001 fe57 	bl	8003ae0 <HAL_GPIO_WritePin>
 8001e32:	e776      	b.n	8001d22 <LCD_Rect_Fill+0x65a>
 8001e34:	461a      	mov	r2, r3
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8001e36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f001 fe50 	bl	8003ae0 <HAL_GPIO_WritePin>
 8001e40:	e765      	b.n	8001d0e <LCD_Rect_Fill+0x646>
 8001e42:	461a      	mov	r2, r3
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001e44:	2101      	movs	r1, #1
 8001e46:	4620      	mov	r0, r4
 8001e48:	f001 fe4a 	bl	8003ae0 <HAL_GPIO_WritePin>
 8001e4c:	e755      	b.n	8001cfa <LCD_Rect_Fill+0x632>
 8001e4e:	461a      	mov	r2, r3
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8001e50:	2102      	movs	r1, #2
 8001e52:	4620      	mov	r0, r4
 8001e54:	f001 fe44 	bl	8003ae0 <HAL_GPIO_WritePin>
 8001e58:	e746      	b.n	8001ce8 <LCD_Rect_Fill+0x620>
 8001e5a:	461a      	mov	r2, r3
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001e5c:	2104      	movs	r1, #4
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f001 fe3e 	bl	8003ae0 <HAL_GPIO_WritePin>
 8001e64:	e737      	b.n	8001cd6 <LCD_Rect_Fill+0x60e>
 8001e66:	bf00      	nop
 8001e68:	40010c00 	.word	0x40010c00
 8001e6c:	40010800 	.word	0x40010800
 8001e70:	40011000 	.word	0x40011000
 8001e74:	461a      	mov	r2, r3
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001e76:	2102      	movs	r1, #2
 8001e78:	4628      	mov	r0, r5
 8001e7a:	f001 fe31 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001e7e:	9b02      	ldr	r3, [sp, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f47f af11 	bne.w	8001ca8 <LCD_Rect_Fill+0x5e0>
 8001e86:	461a      	mov	r2, r3
 8001e88:	2101      	movs	r1, #1
 8001e8a:	4628      	mov	r0, r5
 8001e8c:	f001 fe28 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001e90:	9b03      	ldr	r3, [sp, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f47f af11 	bne.w	8001cba <LCD_Rect_Fill+0x5f2>
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2108      	movs	r1, #8
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	f001 fe1f 	bl	8003ae0 <HAL_GPIO_WritePin>
 8001ea2:	e70f      	b.n	8001cc4 <LCD_Rect_Fill+0x5fc>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001ea4:	4622      	mov	r2, r4
 8001ea6:	e626      	b.n	8001af6 <LCD_Rect_Fill+0x42e>
 8001ea8:	2120      	movs	r1, #32
 8001eaa:	4628      	mov	r0, r5
 8001eac:	4622      	mov	r2, r4
 8001eae:	e514      	b.n	80018da <LCD_Rect_Fill+0x212>

08001eb0 <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
{
 8001eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eb4:	b087      	sub	sp, #28
 8001eb6:	461c      	mov	r4, r3
 8001eb8:	9305      	str	r3, [sp, #20]
	int deltaX = abs(x2 - x1);
	int deltaY = abs(y2 - y1);
 8001eba:	1a5b      	subs	r3, r3, r1
	int deltaX = abs(x2 - x1);
 8001ebc:	1a15      	subs	r5, r2, r0
{
 8001ebe:	468b      	mov	fp, r1
	int deltaY = abs(y2 - y1);
 8001ec0:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
	int deltaX = abs(x2 - x1);
 8001ec4:	2d00      	cmp	r5, #0
	int deltaY = abs(y2 - y1);
 8001ec6:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001eca:	460b      	mov	r3, r1
	int deltaX = abs(x2 - x1);
 8001ecc:	bfb8      	it	lt
 8001ece:	426d      	neglt	r5, r5
	int deltaY = abs(y2 - y1);
 8001ed0:	9104      	str	r1, [sp, #16]
	int signX = x1 < x2 ? 1 : -1;
 8001ed2:	4282      	cmp	r2, r0
 8001ed4:	bf8c      	ite	hi
 8001ed6:	2101      	movhi	r1, #1
 8001ed8:	f04f 31ff 	movls.w	r1, #4294967295
{
 8001edc:	4682      	mov	sl, r0
 8001ede:	4616      	mov	r6, r2
	int signY = y1 < y2 ? 1 : -1;
	int error = deltaX - deltaY;
	int error2 = 0;
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8001ee0:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	int signY = y1 < y2 ? 1 : -1;
 8001ee4:	455c      	cmp	r4, fp
 8001ee6:	bf8c      	ite	hi
 8001ee8:	2701      	movhi	r7, #1
 8001eea:	f04f 37ff 	movls.w	r7, #4294967295
	int signX = x1 < x2 ? 1 : -1;
 8001eee:	9103      	str	r1, [sp, #12]
	int error = deltaX - deltaY;
 8001ef0:	1aec      	subs	r4, r5, r3
		if (x1 == x2 && y1 == y2)
		break;
		error2 = error * 2;
		if (error2 > -deltaY)
 8001ef2:	f1c3 0900 	rsb	r9, r3, #0
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8001ef6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001ef8:	4643      	mov	r3, r8
 8001efa:	9200      	str	r2, [sp, #0]
 8001efc:	4659      	mov	r1, fp
 8001efe:	4642      	mov	r2, r8
 8001f00:	4650      	mov	r0, sl
 8001f02:	f7ff fbe1 	bl	80016c8 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8001f06:	45b2      	cmp	sl, r6
		error2 = error * 2;
 8001f08:	ea4f 0344 	mov.w	r3, r4, lsl #1
			x1 += signX;
		}
		if (error2 < deltaX)
		{
			error += deltaX;
			y1 += signY;
 8001f0c:	eb0b 0207 	add.w	r2, fp, r7
		if (x1 == x2 && y1 == y2)
 8001f10:	d00e      	beq.n	8001f30 <LCD_Line+0x80>
		if (error2 > -deltaY)
 8001f12:	ebb9 0f44 	cmp.w	r9, r4, lsl #1
 8001f16:	da05      	bge.n	8001f24 <LCD_Line+0x74>
			x1 += signX;
 8001f18:	9903      	ldr	r1, [sp, #12]
 8001f1a:	448a      	add	sl, r1
			error -= deltaY;
 8001f1c:	9904      	ldr	r1, [sp, #16]
			x1 += signX;
 8001f1e:	fa1f fa8a 	uxth.w	sl, sl
			error -= deltaY;
 8001f22:	1a64      	subs	r4, r4, r1
		if (error2 < deltaX)
 8001f24:	429d      	cmp	r5, r3
 8001f26:	dde6      	ble.n	8001ef6 <LCD_Line+0x46>
			error += deltaX;
 8001f28:	442c      	add	r4, r5
			y1 += signY;
 8001f2a:	fa1f fb82 	uxth.w	fp, r2
 8001f2e:	e7e2      	b.n	8001ef6 <LCD_Line+0x46>
		if (x1 == x2 && y1 == y2)
 8001f30:	9905      	ldr	r1, [sp, #20]
 8001f32:	458b      	cmp	fp, r1
 8001f34:	d1ed      	bne.n	8001f12 <LCD_Line+0x62>
		}
	}
}
 8001f36:	b007      	add	sp, #28
 8001f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001f3c <LCD_Rect>:
		y += yinc2;
	}
}

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
{
 8001f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LCD_Line(x, y, x + w, y, size, color24);
 8001f40:	4402      	add	r2, r0
 8001f42:	fa1f f982 	uxth.w	r9, r2
	int deltaX = abs(x2 - x1);
 8001f46:	eba9 0600 	sub.w	r6, r9, r0
{
 8001f4a:	b087      	sub	sp, #28
	int deltaX = abs(x2 - x1);
 8001f4c:	2e00      	cmp	r6, #0
 8001f4e:	bfb8      	it	lt
 8001f50:	4276      	neglt	r6, r6
{
 8001f52:	9304      	str	r3, [sp, #16]
	int signX = x1 < x2 ? 1 : -1;
 8001f54:	4581      	cmp	r9, r0
 8001f56:	bf8c      	ite	hi
 8001f58:	2301      	movhi	r3, #1
 8001f5a:	f04f 33ff 	movls.w	r3, #4294967295
{
 8001f5e:	4604      	mov	r4, r0
 8001f60:	4688      	mov	r8, r1
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8001f62:	468a      	mov	sl, r1
	int deltaX = abs(x2 - x1);
 8001f64:	4637      	mov	r7, r6
{
 8001f66:	9d11      	ldr	r5, [sp, #68]	; 0x44
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8001f68:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
{
 8001f6c:	9003      	str	r0, [sp, #12]
	int signX = x1 < x2 ? 1 : -1;
 8001f6e:	9302      	str	r3, [sp, #8]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8001f70:	465a      	mov	r2, fp
 8001f72:	4651      	mov	r1, sl
 8001f74:	4620      	mov	r0, r4
 8001f76:	465b      	mov	r3, fp
 8001f78:	9500      	str	r5, [sp, #0]
 8001f7a:	f7ff fba5 	bl	80016c8 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8001f7e:	45a1      	cmp	r9, r4
			y1 += signY;
 8001f80:	f10a 32ff 	add.w	r2, sl, #4294967295
		if (x1 == x2 && y1 == y2)
 8001f84:	d00a      	beq.n	8001f9c <LCD_Rect+0x60>
		if (error2 > -deltaY)
 8001f86:	007b      	lsls	r3, r7, #1
 8001f88:	d002      	beq.n	8001f90 <LCD_Rect+0x54>
			x1 += signX;
 8001f8a:	9902      	ldr	r1, [sp, #8]
 8001f8c:	440c      	add	r4, r1
 8001f8e:	b2a4      	uxth	r4, r4
		if (error2 < deltaX)
 8001f90:	429e      	cmp	r6, r3
 8001f92:	dded      	ble.n	8001f70 <LCD_Rect+0x34>
			error += deltaX;
 8001f94:	4437      	add	r7, r6
			y1 += signY;
 8001f96:	fa1f fa82 	uxth.w	sl, r2
 8001f9a:	e7e9      	b.n	8001f70 <LCD_Rect+0x34>
		if (x1 == x2 && y1 == y2)
 8001f9c:	45d0      	cmp	r8, sl
 8001f9e:	d1f2      	bne.n	8001f86 <LCD_Rect+0x4a>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8001fa0:	9b04      	ldr	r3, [sp, #16]
	int deltaX = abs(x2 - x1);
 8001fa2:	46b1      	mov	r9, r6
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8001fa4:	4443      	add	r3, r8
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	461f      	mov	r7, r3
 8001faa:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8001fae:	9304      	str	r3, [sp, #16]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8001fb0:	465a      	mov	r2, fp
 8001fb2:	4639      	mov	r1, r7
 8001fb4:	4650      	mov	r0, sl
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	9500      	str	r5, [sp, #0]
 8001fba:	f7ff fb85 	bl	80016c8 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8001fbe:	45a2      	cmp	sl, r4
			y1 += signY;
 8001fc0:	f107 32ff 	add.w	r2, r7, #4294967295
		if (x1 == x2 && y1 == y2)
 8001fc4:	d00b      	beq.n	8001fde <LCD_Rect+0xa2>
		if (error2 > -deltaY)
 8001fc6:	ea5f 0349 	movs.w	r3, r9, lsl #1
 8001fca:	d003      	beq.n	8001fd4 <LCD_Rect+0x98>
			x1 += signX;
 8001fcc:	9902      	ldr	r1, [sp, #8]
 8001fce:	448a      	add	sl, r1
 8001fd0:	fa1f fa8a 	uxth.w	sl, sl
		if (error2 < deltaX)
 8001fd4:	42b3      	cmp	r3, r6
 8001fd6:	daeb      	bge.n	8001fb0 <LCD_Rect+0x74>
			error += deltaX;
 8001fd8:	44b1      	add	r9, r6
			y1 += signY;
 8001fda:	b297      	uxth	r7, r2
 8001fdc:	e7e8      	b.n	8001fb0 <LCD_Rect+0x74>
		if (x1 == x2 && y1 == y2)
 8001fde:	9b04      	ldr	r3, [sp, #16]
 8001fe0:	42bb      	cmp	r3, r7
 8001fe2:	d1f0      	bne.n	8001fc6 <LCD_Rect+0x8a>
	int error = deltaX - deltaY;
 8001fe4:	4641      	mov	r1, r8
	int deltaY = abs(y2 - y1);
 8001fe6:	eba7 0208 	sub.w	r2, r7, r8
 8001fea:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8001fee:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8001ff2:	9304      	str	r3, [sp, #16]
	int error = deltaX - deltaY;
 8001ff4:	425b      	negs	r3, r3
	int signY = y1 < y2 ? 1 : -1;
 8001ff6:	45b8      	cmp	r8, r7
 8001ff8:	bf34      	ite	cc
 8001ffa:	f04f 0a01 	movcc.w	sl, #1
 8001ffe:	f04f 3aff 	movcs.w	sl, #4294967295
	int error = deltaX - deltaY;
 8002002:	9405      	str	r4, [sp, #20]
 8002004:	4699      	mov	r9, r3
 8002006:	4644      	mov	r4, r8
 8002008:	46d8      	mov	r8, fp
 800200a:	468b      	mov	fp, r1
 800200c:	9e03      	ldr	r6, [sp, #12]
 800200e:	9302      	str	r3, [sp, #8]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8002010:	4621      	mov	r1, r4
 8002012:	4643      	mov	r3, r8
 8002014:	4642      	mov	r2, r8
 8002016:	4630      	mov	r0, r6
 8002018:	9500      	str	r5, [sp, #0]
 800201a:	f7ff fb55 	bl	80016c8 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 800201e:	9b03      	ldr	r3, [sp, #12]
		error2 = error * 2;
 8002020:	ea4f 0249 	mov.w	r2, r9, lsl #1
		if (x1 == x2 && y1 == y2)
 8002024:	42b3      	cmp	r3, r6
			y1 += signY;
 8002026:	eb04 010a 	add.w	r1, r4, sl
		if (x1 == x2 && y1 == y2)
 800202a:	d00c      	beq.n	8002046 <LCD_Rect+0x10a>
		if (error2 > -deltaY)
 800202c:	9b02      	ldr	r3, [sp, #8]
 800202e:	ebb3 0f49 	cmp.w	r3, r9, lsl #1
 8002032:	da04      	bge.n	800203e <LCD_Rect+0x102>
			error -= deltaY;
 8002034:	9b04      	ldr	r3, [sp, #16]
			x1 += signX;
 8002036:	3e01      	subs	r6, #1
			error -= deltaY;
 8002038:	eba9 0903 	sub.w	r9, r9, r3
			x1 += signX;
 800203c:	b2b6      	uxth	r6, r6
		if (error2 < deltaX)
 800203e:	2a00      	cmp	r2, #0
 8002040:	d0e6      	beq.n	8002010 <LCD_Rect+0xd4>
			y1 += signY;
 8002042:	b28c      	uxth	r4, r1
 8002044:	e7e4      	b.n	8002010 <LCD_Rect+0xd4>
		if (x1 == x2 && y1 == y2)
 8002046:	42bc      	cmp	r4, r7
 8002048:	d1f0      	bne.n	800202c <LCD_Rect+0xf0>
	int error = deltaX - deltaY;
 800204a:	465b      	mov	r3, fp
 800204c:	9c05      	ldr	r4, [sp, #20]
 800204e:	46c3      	mov	fp, r8
 8002050:	46a1      	mov	r9, r4
 8002052:	4698      	mov	r8, r3
 8002054:	9e02      	ldr	r6, [sp, #8]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8002056:	465b      	mov	r3, fp
 8002058:	465a      	mov	r2, fp
 800205a:	4641      	mov	r1, r8
 800205c:	4648      	mov	r0, r9
 800205e:	9500      	str	r5, [sp, #0]
 8002060:	f7ff fb32 	bl	80016c8 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8002064:	45a1      	cmp	r9, r4
		error2 = error * 2;
 8002066:	ea4f 0346 	mov.w	r3, r6, lsl #1
			y1 += signY;
 800206a:	eb08 020a 	add.w	r2, r8, sl
		if (x1 == x2 && y1 == y2)
 800206e:	d00e      	beq.n	800208e <LCD_Rect+0x152>
		if (error2 > -deltaY)
 8002070:	9902      	ldr	r1, [sp, #8]
 8002072:	ebb1 0f46 	cmp.w	r1, r6, lsl #1
 8002076:	da05      	bge.n	8002084 <LCD_Rect+0x148>
			error -= deltaY;
 8002078:	9904      	ldr	r1, [sp, #16]
			x1 += signX;
 800207a:	f109 39ff 	add.w	r9, r9, #4294967295
			error -= deltaY;
 800207e:	1a76      	subs	r6, r6, r1
			x1 += signX;
 8002080:	fa1f f989 	uxth.w	r9, r9
		if (error2 < deltaX)
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0e6      	beq.n	8002056 <LCD_Rect+0x11a>
			y1 += signY;
 8002088:	fa1f f882 	uxth.w	r8, r2
 800208c:	e7e3      	b.n	8002056 <LCD_Rect+0x11a>
		if (x1 == x2 && y1 == y2)
 800208e:	45b8      	cmp	r8, r7
 8002090:	d1ee      	bne.n	8002070 <LCD_Rect+0x134>
	LCD_Line(x, y, x, y + h, size, color24);
	LCD_Line(x + w, y, x + w, y + h, size, color24);
}
 8002092:	b007      	add	sp, #28
 8002094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002098 <LCD_Circle>:
		}
	}
}

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
{
 8002098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int a_, b_, P;
	a_ = 0;
	b_ = radius;
	P = 1 - radius;
 800209c:	2700      	movs	r7, #0
{
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80020a4:	9307      	str	r3, [sp, #28]
 80020a6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
	P = 1 - radius;
 80020a8:	f1c2 0301 	rsb	r3, r2, #1
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 80020ac:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
	b_ = radius;
 80020b0:	9205      	str	r2, [sp, #20]
	P = 1 - radius;
 80020b2:	9306      	str	r3, [sp, #24]
	while (a_ <= b_)
 80020b4:	fa1f fb82 	uxth.w	fp, r2
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 80020b8:	9b03      	ldr	r3, [sp, #12]
 80020ba:	b2bd      	uxth	r5, r7
 80020bc:	eb0b 0903 	add.w	r9, fp, r3
 80020c0:	9b02      	ldr	r3, [sp, #8]
 80020c2:	fa1f f989 	uxth.w	r9, r9
 80020c6:	442b      	add	r3, r5
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	9304      	str	r3, [sp, #16]
		if (fill == 1)
 80020cc:	9b07      	ldr	r3, [sp, #28]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d072      	beq.n	80021b8 <LCD_Circle+0x120>
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 80020d2:	4649      	mov	r1, r9
 80020d4:	4623      	mov	r3, r4
 80020d6:	4622      	mov	r2, r4
 80020d8:	9804      	ldr	r0, [sp, #16]
 80020da:	9600      	str	r6, [sp, #0]
 80020dc:	f7ff faf4 	bl	80016c8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 80020e0:	9b02      	ldr	r3, [sp, #8]
 80020e2:	9903      	ldr	r1, [sp, #12]
 80020e4:	eb0b 0a03 	add.w	sl, fp, r3
 80020e8:	eb01 0805 	add.w	r8, r1, r5
 80020ec:	fa1f fa8a 	uxth.w	sl, sl
 80020f0:	fa1f f888 	uxth.w	r8, r8
 80020f4:	4641      	mov	r1, r8
 80020f6:	4650      	mov	r0, sl
 80020f8:	4623      	mov	r3, r4
 80020fa:	4622      	mov	r2, r4
 80020fc:	9600      	str	r6, [sp, #0]
 80020fe:	f7ff fae3 	bl	80016c8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8002102:	9a02      	ldr	r2, [sp, #8]
 8002104:	4649      	mov	r1, r9
 8002106:	eba2 0905 	sub.w	r9, r2, r5
 800210a:	fa1f f989 	uxth.w	r9, r9
 800210e:	4623      	mov	r3, r4
 8002110:	4622      	mov	r2, r4
 8002112:	4648      	mov	r0, r9
 8002114:	9600      	str	r6, [sp, #0]
 8002116:	f7ff fad7 	bl	80016c8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 800211a:	9a02      	ldr	r2, [sp, #8]
 800211c:	4641      	mov	r1, r8
 800211e:	eba2 080b 	sub.w	r8, r2, fp
 8002122:	fa1f f888 	uxth.w	r8, r8
 8002126:	4623      	mov	r3, r4
 8002128:	4622      	mov	r2, r4
 800212a:	4640      	mov	r0, r8
 800212c:	9600      	str	r6, [sp, #0]
 800212e:	f7ff facb 	bl	80016c8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8002132:	9b03      	ldr	r3, [sp, #12]
 8002134:	4650      	mov	r0, sl
 8002136:	1b5d      	subs	r5, r3, r5
 8002138:	b2ad      	uxth	r5, r5
 800213a:	4623      	mov	r3, r4
 800213c:	4622      	mov	r2, r4
 800213e:	4629      	mov	r1, r5
 8002140:	9600      	str	r6, [sp, #0]
 8002142:	f7ff fac1 	bl	80016c8 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8002146:	9b03      	ldr	r3, [sp, #12]
 8002148:	4622      	mov	r2, r4
 800214a:	eba3 0a0b 	sub.w	sl, r3, fp
 800214e:	fa1f fa8a 	uxth.w	sl, sl
 8002152:	4623      	mov	r3, r4
 8002154:	4651      	mov	r1, sl
 8002156:	9804      	ldr	r0, [sp, #16]
 8002158:	9600      	str	r6, [sp, #0]
 800215a:	f7ff fab5 	bl	80016c8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 800215e:	4651      	mov	r1, sl
 8002160:	4648      	mov	r0, r9
 8002162:	4623      	mov	r3, r4
 8002164:	4622      	mov	r2, r4
 8002166:	9600      	str	r6, [sp, #0]
 8002168:	f7ff faae 	bl	80016c8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 800216c:	4623      	mov	r3, r4
 800216e:	4622      	mov	r2, r4
 8002170:	4629      	mov	r1, r5
 8002172:	4640      	mov	r0, r8
 8002174:	9600      	str	r6, [sp, #0]
 8002176:	f7ff faa7 	bl	80016c8 <LCD_Rect_Fill>
		}
		if (P < 0)
		{
			P = (P + 3) + (2 * a_);
 800217a:	9806      	ldr	r0, [sp, #24]
			a_++;
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 800217c:	9d05      	ldr	r5, [sp, #20]
		if (P < 0)
 800217e:	2800      	cmp	r0, #0
			P = (P + 3) + (2 * a_);
 8002180:	f100 0103 	add.w	r1, r0, #3
			P = (P + 5) + (2 * (a_ - b_));
 8002184:	eba7 0205 	sub.w	r2, r7, r5
 8002188:	f100 0305 	add.w	r3, r0, #5
		if (P < 0)
 800218c:	db0b      	blt.n	80021a6 <LCD_Circle+0x10e>
			P = (P + 5) + (2 * (a_ - b_));
 800218e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002192:	9306      	str	r3, [sp, #24]
			a_++;
			b_--;
 8002194:	9b05      	ldr	r3, [sp, #20]
 8002196:	3701      	adds	r7, #1
 8002198:	3b01      	subs	r3, #1
	while (a_ <= b_)
 800219a:	42bb      	cmp	r3, r7
			b_--;
 800219c:	9305      	str	r3, [sp, #20]
	while (a_ <= b_)
 800219e:	db08      	blt.n	80021b2 <LCD_Circle+0x11a>
 80021a0:	fa1f fb83 	uxth.w	fp, r3
 80021a4:	e788      	b.n	80020b8 <LCD_Circle+0x20>
			P = (P + 3) + (2 * a_);
 80021a6:	eb01 0347 	add.w	r3, r1, r7, lsl #1
 80021aa:	3701      	adds	r7, #1
	while (a_ <= b_)
 80021ac:	42af      	cmp	r7, r5
			P = (P + 3) + (2 * a_);
 80021ae:	9306      	str	r3, [sp, #24]
	while (a_ <= b_)
 80021b0:	dd82      	ble.n	80020b8 <LCD_Circle+0x20>
		}
	}
}
 80021b2:	b009      	add	sp, #36	; 0x24
 80021b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 80021b8:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80021bc:	9b02      	ldr	r3, [sp, #8]
 80021be:	ea4f 0945 	mov.w	r9, r5, lsl #1
 80021c2:	ea4f 084b 	mov.w	r8, fp, lsl #1
 80021c6:	f109 0901 	add.w	r9, r9, #1
 80021ca:	f108 0801 	add.w	r8, r8, #1
 80021ce:	fa1f f989 	uxth.w	r9, r9
 80021d2:	fa1f f888 	uxth.w	r8, r8
 80021d6:	1b58      	subs	r0, r3, r5
 80021d8:	ebaa 010b 	sub.w	r1, sl, fp
 80021dc:	4643      	mov	r3, r8
 80021de:	464a      	mov	r2, r9
 80021e0:	9600      	str	r6, [sp, #0]
 80021e2:	b289      	uxth	r1, r1
 80021e4:	b280      	uxth	r0, r0
 80021e6:	f7ff fa6f 	bl	80016c8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 80021ea:	4652      	mov	r2, sl
 80021ec:	9802      	ldr	r0, [sp, #8]
 80021ee:	1b51      	subs	r1, r2, r5
 80021f0:	eba0 000b 	sub.w	r0, r0, fp
 80021f4:	464b      	mov	r3, r9
 80021f6:	4642      	mov	r2, r8
 80021f8:	9600      	str	r6, [sp, #0]
 80021fa:	b289      	uxth	r1, r1
 80021fc:	b280      	uxth	r0, r0
 80021fe:	f7ff fa63 	bl	80016c8 <LCD_Rect_Fill>
 8002202:	e7ba      	b.n	800217a <LCD_Circle+0xe2>

08002204 <LCD_Font>:
		}
	}
}

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 8002204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002208:	4615      	mov	r5, r2
 800220a:	b091      	sub	sp, #68	; 0x44
 800220c:	f89d 4068 	ldrb.w	r4, [sp, #104]	; 0x68
 8002210:	9205      	str	r2, [sp, #20]
	int16_t cursor_x = x;
	int16_t cursor_y = y;
 8002212:	b20a      	sxth	r2, r1
	int16_t cursor_x = x;
 8002214:	b206      	sxth	r6, r0
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	6818      	ldr	r0, [r3, #0]
	int16_t cursor_y = y;
 800221a:	9202      	str	r2, [sp, #8]
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 800221c:	689a      	ldr	r2, [r3, #8]
{
 800221e:	9407      	str	r4, [sp, #28]
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8002220:	ac0d      	add	r4, sp, #52	; 0x34
 8002222:	c407      	stmia	r4!, {r0, r1, r2}
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8002224:	4628      	mov	r0, r5
	int16_t cursor_x = x;
 8002226:	9608      	str	r6, [sp, #32]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8002228:	f7fd ff92 	bl	8000150 <strlen>
 800222c:	2800      	cmp	r0, #0
 800222e:	d075      	beq.n	800231c <LCD_Font+0x118>
 8002230:	f04f 0b00 	mov.w	fp, #0
	int16_t cursor_x = x;
 8002234:	4634      	mov	r4, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8002236:	465b      	mov	r3, fp
	{
		char c = text[text_pos];
 8002238:	9a05      	ldr	r2, [sp, #20]
 800223a:	5cd3      	ldrb	r3, [r2, r3]
		if(c == '\n')
 800223c:	2b0a      	cmp	r3, #10
 800223e:	f000 8096 	beq.w	800236e <LCD_Font+0x16a>
		{
			cursor_x = x;
			cursor_y += font.yAdvance * size;
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 8002242:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8002246:	429a      	cmp	r2, r3
 8002248:	d861      	bhi.n	800230e <LCD_Font+0x10a>
 800224a:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800224e:	4299      	cmp	r1, r3
 8002250:	d35d      	bcc.n	800230e <LCD_Font+0x10a>
 8002252:	2b0d      	cmp	r3, #13
 8002254:	d05b      	beq.n	800230e <LCD_Font+0x10a>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8002256:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
 800225e:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 8002262:	6869      	ldr	r1, [r5, #4]
 8002264:	aa0b      	add	r2, sp, #44	; 0x2c
 8002266:	c203      	stmia	r2!, {r0, r1}
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8002268:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800226c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	uint16_t bo = glyph -> bitmapOffset;
 800226e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8002272:	9306      	str	r3, [sp, #24]
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 8084 	beq.w	8002382 <LCD_Font+0x17e>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
			cursor_x += glyph.xAdvance * size;
 800227a:	f04f 0a00 	mov.w	sl, #0
 800227e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
	uint8_t bits = 0, bit = 0;
 8002282:	4656      	mov	r6, sl
 8002284:	4657      	mov	r7, sl
 8002286:	4693      	mov	fp, r2
			cursor_x += glyph.xAdvance * size;
 8002288:	b2a3      	uxth	r3, r4
 800228a:	9304      	str	r3, [sp, #16]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 800228c:	f89d 902e 	ldrb.w	r9, [sp, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 8002290:	f8bd 301c 	ldrh.w	r3, [sp, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8002294:	f1b9 0f00 	cmp.w	r9, #0
 8002298:	d027      	beq.n	80022ea <LCD_Font+0xe6>
 800229a:	2500      	movs	r5, #0
 800229c:	4628      	mov	r0, r5
			if(bit == 0)
 800229e:	2e00      	cmp	r6, #0
 80022a0:	d05c      	beq.n	800235c <LCD_Font+0x158>
			bit >>= 1;
 80022a2:	4634      	mov	r4, r6
 80022a4:	0876      	lsrs	r6, r6, #1
			if(bits & bit)
 80022a6:	403c      	ands	r4, r7
				set_pixels++;
 80022a8:	f100 0201 	add.w	r2, r0, #1
			if(bits & bit)
 80022ac:	d039      	beq.n	8002322 <LCD_Font+0x11e>
				set_pixels++;
 80022ae:	b290      	uxth	r0, r2
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80022b0:	3501      	adds	r5, #1
 80022b2:	b2ea      	uxtb	r2, r5
 80022b4:	454a      	cmp	r2, r9
 80022b6:	d3f2      	bcc.n	800229e <LCD_Font+0x9a>
		if (set_pixels > 0)
 80022b8:	b1b8      	cbz	r0, 80022ea <LCD_Font+0xe6>
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80022ba:	f99d 1031 	ldrsb.w	r1, [sp, #49]	; 0x31
 80022be:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80022c0:	4449      	add	r1, r9
 80022c2:	1a09      	subs	r1, r1, r0
 80022c4:	9200      	str	r2, [sp, #0]
 80022c6:	fb03 f200 	mul.w	r2, r3, r0
 80022ca:	9804      	ldr	r0, [sp, #16]
 80022cc:	9c02      	ldr	r4, [sp, #8]
 80022ce:	fb01 0003 	mla	r0, r1, r3, r0
 80022d2:	f99d 1032 	ldrsb.w	r1, [sp, #50]	; 0x32
 80022d6:	b292      	uxth	r2, r2
 80022d8:	4451      	add	r1, sl
 80022da:	fb01 4103 	mla	r1, r1, r3, r4
 80022de:	b280      	uxth	r0, r0
 80022e0:	b289      	uxth	r1, r1
 80022e2:	9303      	str	r3, [sp, #12]
 80022e4:	f7ff f9f0 	bl	80016c8 <LCD_Rect_Fill>
 80022e8:	9b03      	ldr	r3, [sp, #12]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80022ea:	9906      	ldr	r1, [sp, #24]
 80022ec:	f10a 0a01 	add.w	sl, sl, #1
 80022f0:	fa5f f28a 	uxtb.w	r2, sl
 80022f4:	428a      	cmp	r2, r1
 80022f6:	d3cd      	bcc.n	8002294 <LCD_Font+0x90>
 80022f8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
			cursor_x += glyph.xAdvance * size;
 80022fc:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8002300:	9a04      	ldr	r2, [sp, #16]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8002302:	9805      	ldr	r0, [sp, #20]
			cursor_x += glyph.xAdvance * size;
 8002304:	fb04 2303 	mla	r3, r4, r3, r2
 8002308:	b21c      	sxth	r4, r3
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800230a:	f7fd ff21 	bl	8000150 <strlen>
 800230e:	f10b 0b01 	add.w	fp, fp, #1
 8002312:	fa1f fb8b 	uxth.w	fp, fp
 8002316:	4583      	cmp	fp, r0
 8002318:	465b      	mov	r3, fp
 800231a:	d38d      	bcc.n	8002238 <LCD_Font+0x34>
		}
	}
}
 800231c:	b011      	add	sp, #68	; 0x44
 800231e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else if (set_pixels > 0)
 8002322:	2800      	cmp	r0, #0
 8002324:	d0c4      	beq.n	80022b0 <LCD_Font+0xac>
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8002326:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8002328:	fb03 f200 	mul.w	r2, r3, r0
 800232c:	9100      	str	r1, [sp, #0]
 800232e:	f99d 1031 	ldrsb.w	r1, [sp, #49]	; 0x31
 8002332:	f8dd c008 	ldr.w	ip, [sp, #8]
 8002336:	4429      	add	r1, r5
 8002338:	1a08      	subs	r0, r1, r0
 800233a:	9904      	ldr	r1, [sp, #16]
 800233c:	b292      	uxth	r2, r2
 800233e:	fb00 1003 	mla	r0, r0, r3, r1
 8002342:	f99d 1032 	ldrsb.w	r1, [sp, #50]	; 0x32
 8002346:	b280      	uxth	r0, r0
 8002348:	4451      	add	r1, sl
 800234a:	fb01 c103 	mla	r1, r1, r3, ip
 800234e:	b289      	uxth	r1, r1
 8002350:	9303      	str	r3, [sp, #12]
 8002352:	f7ff f9b9 	bl	80016c8 <LCD_Rect_Fill>
				set_pixels = 0;
 8002356:	4620      	mov	r0, r4
 8002358:	9b03      	ldr	r3, [sp, #12]
 800235a:	e7a9      	b.n	80022b0 <LCD_Font+0xac>
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 800235c:	f108 0201 	add.w	r2, r8, #1
 8002360:	f81b 7008 	ldrb.w	r7, [fp, r8]
				bit  = 0x80;
 8002364:	2480      	movs	r4, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8002366:	2640      	movs	r6, #64	; 0x40
 8002368:	fa1f f882 	uxth.w	r8, r2
 800236c:	e79b      	b.n	80022a6 <LCD_Font+0xa2>
			cursor_y += font.yAdvance * size;
 800236e:	9a02      	ldr	r2, [sp, #8]
 8002370:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8002374:	9907      	ldr	r1, [sp, #28]
			cursor_x = x;
 8002376:	9c08      	ldr	r4, [sp, #32]
			cursor_y += font.yAdvance * size;
 8002378:	fb03 2301 	mla	r3, r3, r1, r2
 800237c:	b21b      	sxth	r3, r3
 800237e:	9302      	str	r3, [sp, #8]
 8002380:	e7c5      	b.n	800230e <LCD_Font+0x10a>
			cursor_x += glyph.xAdvance * size;
 8002382:	b2a3      	uxth	r3, r4
 8002384:	9304      	str	r3, [sp, #16]
			cursor_y += font.yAdvance * size;
 8002386:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800238a:	e7b7      	b.n	80022fc <LCD_Font+0xf8>

0800238c <LCD_Init>:

void LCD_Init(void)
{	
 800238c:	b570      	push	{r4, r5, r6, lr}
	LCD_RST_R
 800238e:	4efd      	ldr	r6, [pc, #1012]	; (8002784 <LCD_Init+0x3f8>)
 8002390:	2200      	movs	r2, #0
 8002392:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002396:	4630      	mov	r0, r6
 8002398:	f001 fba2 	bl	8003ae0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800239c:	20c8      	movs	r0, #200	; 0xc8
 800239e:	f001 fa17 	bl	80037d0 <HAL_Delay>
	LCD_RST_S
 80023a2:	4630      	mov	r0, r6
 80023a4:	2201      	movs	r2, #1
 80023a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 80023aa:	4df7      	ldr	r5, [pc, #988]	; (8002788 <LCD_Init+0x3fc>)
	LCD_RST_S
 80023ac:	f001 fb98 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_RS_R
 80023b0:	4630      	mov	r0, r6
 80023b2:	2200      	movs	r2, #0
 80023b4:	2101      	movs	r1, #1
 80023b6:	f001 fb93 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_R
 80023ba:	4630      	mov	r0, r6
 80023bc:	2200      	movs	r2, #0
 80023be:	f44f 6180 	mov.w	r1, #1024	; 0x400
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 80023c2:	4cf2      	ldr	r4, [pc, #968]	; (800278c <LCD_Init+0x400>)
	LCD_CS_R
 80023c4:	f001 fb8c 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 80023c8:	4628      	mov	r0, r5
 80023ca:	2200      	movs	r2, #0
 80023cc:	2102      	movs	r1, #2
 80023ce:	f001 fb87 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 80023d2:	4628      	mov	r0, r5
 80023d4:	2200      	movs	r2, #0
 80023d6:	2101      	movs	r1, #1
 80023d8:	f001 fb82 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 80023dc:	4620      	mov	r0, r4
 80023de:	2200      	movs	r2, #0
 80023e0:	2108      	movs	r1, #8
 80023e2:	f001 fb7d 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 80023e6:	4620      	mov	r0, r4
 80023e8:	2200      	movs	r2, #0
 80023ea:	2104      	movs	r1, #4
 80023ec:	f001 fb78 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 80023f0:	4620      	mov	r0, r4
 80023f2:	2200      	movs	r2, #0
 80023f4:	2102      	movs	r1, #2
 80023f6:	f001 fb73 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 80023fa:	4620      	mov	r0, r4
 80023fc:	2200      	movs	r2, #0
 80023fe:	2101      	movs	r1, #1
 8002400:	f001 fb6e 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8002404:	4620      	mov	r0, r4
 8002406:	2200      	movs	r2, #0
 8002408:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800240c:	f001 fb68 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8002410:	4620      	mov	r0, r4
 8002412:	2200      	movs	r2, #0
 8002414:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002418:	f001 fb62 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800241c:	4628      	mov	r0, r5
 800241e:	2200      	movs	r2, #0
 8002420:	2104      	movs	r1, #4
 8002422:	f001 fb5d 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002426:	4628      	mov	r0, r5
 8002428:	2200      	movs	r2, #0
 800242a:	2108      	movs	r1, #8
 800242c:	f001 fb58 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002430:	4628      	mov	r0, r5
 8002432:	2200      	movs	r2, #0
 8002434:	2110      	movs	r1, #16
 8002436:	f001 fb53 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800243a:	4628      	mov	r0, r5
 800243c:	2201      	movs	r2, #1
 800243e:	2120      	movs	r1, #32
 8002440:	f001 fb4e 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002444:	4628      	mov	r0, r5
 8002446:	2200      	movs	r2, #0
 8002448:	2140      	movs	r1, #64	; 0x40
 800244a:	f001 fb49 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800244e:	4628      	mov	r0, r5
 8002450:	2200      	movs	r2, #0
 8002452:	2180      	movs	r1, #128	; 0x80
 8002454:	f001 fb44 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002458:	4620      	mov	r0, r4
 800245a:	2200      	movs	r2, #0
 800245c:	2110      	movs	r1, #16
 800245e:	f001 fb3f 	bl	8003ae0 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002462:	4620      	mov	r0, r4
 8002464:	2201      	movs	r2, #1
 8002466:	2120      	movs	r1, #32
 8002468:	f001 fb3a 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_R
 800246c:	4630      	mov	r0, r6
 800246e:	2200      	movs	r2, #0
 8002470:	2102      	movs	r1, #2
 8002472:	f001 fb35 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_S
 8002476:	4630      	mov	r0, r6
 8002478:	2201      	movs	r2, #1
 800247a:	2102      	movs	r1, #2
 800247c:	f001 fb30 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_S
 8002480:	2201      	movs	r2, #1
 8002482:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002486:	4630      	mov	r0, r6
 8002488:	f001 fb2a 	bl	8003ae0 <HAL_GPIO_WritePin>
	
  LCD_Send_Cmd(HX8357_SLPOUT);
  HAL_Delay(120);
 800248c:	2078      	movs	r0, #120	; 0x78
 800248e:	f001 f99f 	bl	80037d0 <HAL_Delay>
	LCD_RS_R
 8002492:	4630      	mov	r0, r6
 8002494:	2200      	movs	r2, #0
 8002496:	2101      	movs	r1, #1
 8002498:	f001 fb22 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_R
 800249c:	4630      	mov	r0, r6
 800249e:	2200      	movs	r2, #0
 80024a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024a4:	f001 fb1c 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 80024a8:	4628      	mov	r0, r5
 80024aa:	2200      	movs	r2, #0
 80024ac:	2102      	movs	r1, #2
 80024ae:	f001 fb17 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 80024b2:	4628      	mov	r0, r5
 80024b4:	2200      	movs	r2, #0
 80024b6:	2101      	movs	r1, #1
 80024b8:	f001 fb12 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 80024bc:	4620      	mov	r0, r4
 80024be:	2200      	movs	r2, #0
 80024c0:	2108      	movs	r1, #8
 80024c2:	f001 fb0d 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 80024c6:	4620      	mov	r0, r4
 80024c8:	2200      	movs	r2, #0
 80024ca:	2104      	movs	r1, #4
 80024cc:	f001 fb08 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 80024d0:	4620      	mov	r0, r4
 80024d2:	2200      	movs	r2, #0
 80024d4:	2102      	movs	r1, #2
 80024d6:	f001 fb03 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 80024da:	4620      	mov	r0, r4
 80024dc:	2200      	movs	r2, #0
 80024de:	2101      	movs	r1, #1
 80024e0:	f001 fafe 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 80024e4:	4620      	mov	r0, r4
 80024e6:	2200      	movs	r2, #0
 80024e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024ec:	f001 faf8 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80024f0:	4620      	mov	r0, r4
 80024f2:	2200      	movs	r2, #0
 80024f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024f8:	f001 faf2 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80024fc:	4628      	mov	r0, r5
 80024fe:	2200      	movs	r2, #0
 8002500:	2104      	movs	r1, #4
 8002502:	f001 faed 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002506:	4628      	mov	r0, r5
 8002508:	2200      	movs	r2, #0
 800250a:	2108      	movs	r1, #8
 800250c:	f001 fae8 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002510:	4628      	mov	r0, r5
 8002512:	2201      	movs	r2, #1
 8002514:	2110      	movs	r1, #16
 8002516:	f001 fae3 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800251a:	4628      	mov	r0, r5
 800251c:	2201      	movs	r2, #1
 800251e:	2120      	movs	r1, #32
 8002520:	f001 fade 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002524:	4628      	mov	r0, r5
 8002526:	2201      	movs	r2, #1
 8002528:	2140      	movs	r1, #64	; 0x40
 800252a:	f001 fad9 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800252e:	4628      	mov	r0, r5
 8002530:	2200      	movs	r2, #0
 8002532:	2180      	movs	r1, #128	; 0x80
 8002534:	f001 fad4 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002538:	4620      	mov	r0, r4
 800253a:	2201      	movs	r2, #1
 800253c:	2110      	movs	r1, #16
 800253e:	f001 facf 	bl	8003ae0 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002542:	4620      	mov	r0, r4
 8002544:	2200      	movs	r2, #0
 8002546:	2120      	movs	r1, #32
 8002548:	f001 faca 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_R
 800254c:	4630      	mov	r0, r6
 800254e:	2200      	movs	r2, #0
 8002550:	2102      	movs	r1, #2
 8002552:	f001 fac5 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_S
 8002556:	4630      	mov	r0, r6
 8002558:	2201      	movs	r2, #1
 800255a:	2102      	movs	r1, #2
 800255c:	f001 fac0 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_S
 8002560:	4630      	mov	r0, r6
 8002562:	2201      	movs	r2, #1
 8002564:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002568:	f001 faba 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_RS_S
 800256c:	2201      	movs	r2, #1
 800256e:	4630      	mov	r0, r6
 8002570:	4611      	mov	r1, r2
 8002572:	f001 fab5 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_R	
 8002576:	4630      	mov	r0, r6
 8002578:	2200      	movs	r2, #0
 800257a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800257e:	f001 faaf 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8002582:	4628      	mov	r0, r5
 8002584:	2200      	movs	r2, #0
 8002586:	2102      	movs	r1, #2
 8002588:	f001 faaa 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800258c:	4628      	mov	r0, r5
 800258e:	2200      	movs	r2, #0
 8002590:	2101      	movs	r1, #1
 8002592:	f001 faa5 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8002596:	4620      	mov	r0, r4
 8002598:	2200      	movs	r2, #0
 800259a:	2108      	movs	r1, #8
 800259c:	f001 faa0 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 80025a0:	4620      	mov	r0, r4
 80025a2:	2200      	movs	r2, #0
 80025a4:	2104      	movs	r1, #4
 80025a6:	f001 fa9b 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 80025aa:	4620      	mov	r0, r4
 80025ac:	2200      	movs	r2, #0
 80025ae:	2102      	movs	r1, #2
 80025b0:	f001 fa96 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 80025b4:	4620      	mov	r0, r4
 80025b6:	2200      	movs	r2, #0
 80025b8:	2101      	movs	r1, #1
 80025ba:	f001 fa91 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 80025be:	4620      	mov	r0, r4
 80025c0:	2200      	movs	r2, #0
 80025c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025c6:	f001 fa8b 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80025ca:	4620      	mov	r0, r4
 80025cc:	2200      	movs	r2, #0
 80025ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025d2:	f001 fa85 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80025d6:	4628      	mov	r0, r5
 80025d8:	2200      	movs	r2, #0
 80025da:	2104      	movs	r1, #4
 80025dc:	f001 fa80 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80025e0:	4628      	mov	r0, r5
 80025e2:	2201      	movs	r2, #1
 80025e4:	2108      	movs	r1, #8
 80025e6:	f001 fa7b 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80025ea:	4628      	mov	r0, r5
 80025ec:	2200      	movs	r2, #0
 80025ee:	2110      	movs	r1, #16
 80025f0:	f001 fa76 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80025f4:	4628      	mov	r0, r5
 80025f6:	2201      	movs	r2, #1
 80025f8:	2120      	movs	r1, #32
 80025fa:	f001 fa71 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80025fe:	4628      	mov	r0, r5
 8002600:	2200      	movs	r2, #0
 8002602:	2140      	movs	r1, #64	; 0x40
 8002604:	f001 fa6c 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002608:	4628      	mov	r0, r5
 800260a:	2201      	movs	r2, #1
 800260c:	2180      	movs	r1, #128	; 0x80
 800260e:	f001 fa67 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002612:	4620      	mov	r0, r4
 8002614:	2200      	movs	r2, #0
 8002616:	2110      	movs	r1, #16
 8002618:	f001 fa62 	bl	8003ae0 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800261c:	4620      	mov	r0, r4
 800261e:	2201      	movs	r2, #1
 8002620:	2120      	movs	r1, #32
 8002622:	f001 fa5d 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_R
 8002626:	4630      	mov	r0, r6
 8002628:	2200      	movs	r2, #0
 800262a:	2102      	movs	r1, #2
 800262c:	f001 fa58 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_S
 8002630:	4630      	mov	r0, r6
 8002632:	2201      	movs	r2, #1
 8002634:	2102      	movs	r1, #2
 8002636:	f001 fa53 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_S
 800263a:	2201      	movs	r2, #1
 800263c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002640:	4630      	mov	r0, r6
 8002642:	f001 fa4d 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_Send_Cmd(HX8357_COLMOD);
	LCD_Send_Dat(0x55);
  HAL_Delay(5);
 8002646:	2005      	movs	r0, #5
 8002648:	f001 f8c2 	bl	80037d0 <HAL_Delay>
	LCD_RS_R
 800264c:	4630      	mov	r0, r6
 800264e:	2200      	movs	r2, #0
 8002650:	2101      	movs	r1, #1
 8002652:	f001 fa45 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_R
 8002656:	4630      	mov	r0, r6
 8002658:	2200      	movs	r2, #0
 800265a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800265e:	f001 fa3f 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8002662:	4628      	mov	r0, r5
 8002664:	2200      	movs	r2, #0
 8002666:	2102      	movs	r1, #2
 8002668:	f001 fa3a 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800266c:	4628      	mov	r0, r5
 800266e:	2200      	movs	r2, #0
 8002670:	2101      	movs	r1, #1
 8002672:	f001 fa35 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8002676:	4620      	mov	r0, r4
 8002678:	2200      	movs	r2, #0
 800267a:	2108      	movs	r1, #8
 800267c:	f001 fa30 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8002680:	4620      	mov	r0, r4
 8002682:	2200      	movs	r2, #0
 8002684:	2104      	movs	r1, #4
 8002686:	f001 fa2b 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 800268a:	4620      	mov	r0, r4
 800268c:	2200      	movs	r2, #0
 800268e:	2102      	movs	r1, #2
 8002690:	f001 fa26 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8002694:	4620      	mov	r0, r4
 8002696:	2200      	movs	r2, #0
 8002698:	2101      	movs	r1, #1
 800269a:	f001 fa21 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 800269e:	4620      	mov	r0, r4
 80026a0:	2200      	movs	r2, #0
 80026a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026a6:	f001 fa1b 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80026aa:	4620      	mov	r0, r4
 80026ac:	2200      	movs	r2, #0
 80026ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026b2:	f001 fa15 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80026b6:	4628      	mov	r0, r5
 80026b8:	2200      	movs	r2, #0
 80026ba:	2104      	movs	r1, #4
 80026bc:	f001 fa10 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80026c0:	4628      	mov	r0, r5
 80026c2:	2200      	movs	r2, #0
 80026c4:	2108      	movs	r1, #8
 80026c6:	f001 fa0b 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80026ca:	4628      	mov	r0, r5
 80026cc:	2201      	movs	r2, #1
 80026ce:	2110      	movs	r1, #16
 80026d0:	f001 fa06 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80026d4:	4628      	mov	r0, r5
 80026d6:	2200      	movs	r2, #0
 80026d8:	2120      	movs	r1, #32
 80026da:	f001 fa01 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80026de:	4628      	mov	r0, r5
 80026e0:	2201      	movs	r2, #1
 80026e2:	2140      	movs	r1, #64	; 0x40
 80026e4:	f001 f9fc 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80026e8:	4628      	mov	r0, r5
 80026ea:	2200      	movs	r2, #0
 80026ec:	2180      	movs	r1, #128	; 0x80
 80026ee:	f001 f9f7 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80026f2:	4620      	mov	r0, r4
 80026f4:	2200      	movs	r2, #0
 80026f6:	2110      	movs	r1, #16
 80026f8:	f001 f9f2 	bl	8003ae0 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80026fc:	4620      	mov	r0, r4
 80026fe:	2201      	movs	r2, #1
 8002700:	2120      	movs	r1, #32
 8002702:	f001 f9ed 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_R
 8002706:	4630      	mov	r0, r6
 8002708:	2200      	movs	r2, #0
 800270a:	2102      	movs	r1, #2
 800270c:	f001 f9e8 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_S
 8002710:	4630      	mov	r0, r6
 8002712:	2201      	movs	r2, #1
 8002714:	2102      	movs	r1, #2
 8002716:	f001 f9e3 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_S
 800271a:	4630      	mov	r0, r6
 800271c:	2201      	movs	r2, #1
 800271e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002722:	f001 f9dd 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_RS_R
 8002726:	4630      	mov	r0, r6
 8002728:	2200      	movs	r2, #0
 800272a:	2101      	movs	r1, #1
 800272c:	f001 f9d8 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_R
 8002730:	4630      	mov	r0, r6
 8002732:	2200      	movs	r2, #0
 8002734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002738:	f001 f9d2 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 800273c:	4628      	mov	r0, r5
 800273e:	2200      	movs	r2, #0
 8002740:	2102      	movs	r1, #2
 8002742:	f001 f9cd 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8002746:	4628      	mov	r0, r5
 8002748:	2200      	movs	r2, #0
 800274a:	2101      	movs	r1, #1
 800274c:	f001 f9c8 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8002750:	4620      	mov	r0, r4
 8002752:	2200      	movs	r2, #0
 8002754:	2108      	movs	r1, #8
 8002756:	f001 f9c3 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 800275a:	4620      	mov	r0, r4
 800275c:	2200      	movs	r2, #0
 800275e:	2104      	movs	r1, #4
 8002760:	f001 f9be 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8002764:	4620      	mov	r0, r4
 8002766:	2200      	movs	r2, #0
 8002768:	2102      	movs	r1, #2
 800276a:	f001 f9b9 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 800276e:	4620      	mov	r0, r4
 8002770:	2200      	movs	r2, #0
 8002772:	2101      	movs	r1, #1
 8002774:	f001 f9b4 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8002778:	4620      	mov	r0, r4
 800277a:	2200      	movs	r2, #0
 800277c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002780:	e006      	b.n	8002790 <LCD_Init+0x404>
 8002782:	bf00      	nop
 8002784:	40010c00 	.word	0x40010c00
 8002788:	40010800 	.word	0x40010800
 800278c:	40011000 	.word	0x40011000
 8002790:	f001 f9a6 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8002794:	4620      	mov	r0, r4
 8002796:	2200      	movs	r2, #0
 8002798:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800279c:	f001 f9a0 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80027a0:	4628      	mov	r0, r5
 80027a2:	2200      	movs	r2, #0
 80027a4:	2104      	movs	r1, #4
 80027a6:	f001 f99b 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80027aa:	4628      	mov	r0, r5
 80027ac:	2200      	movs	r2, #0
 80027ae:	2108      	movs	r1, #8
 80027b0:	f001 f996 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80027b4:	4628      	mov	r0, r5
 80027b6:	2201      	movs	r2, #1
 80027b8:	2110      	movs	r1, #16
 80027ba:	f001 f991 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80027be:	4628      	mov	r0, r5
 80027c0:	2201      	movs	r2, #1
 80027c2:	2120      	movs	r1, #32
 80027c4:	f001 f98c 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80027c8:	4628      	mov	r0, r5
 80027ca:	2200      	movs	r2, #0
 80027cc:	2140      	movs	r1, #64	; 0x40
 80027ce:	f001 f987 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80027d2:	4628      	mov	r0, r5
 80027d4:	2201      	movs	r2, #1
 80027d6:	2180      	movs	r1, #128	; 0x80
 80027d8:	f001 f982 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80027dc:	4620      	mov	r0, r4
 80027de:	2201      	movs	r2, #1
 80027e0:	2110      	movs	r1, #16
 80027e2:	f001 f97d 	bl	8003ae0 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80027e6:	4620      	mov	r0, r4
 80027e8:	2200      	movs	r2, #0
 80027ea:	2120      	movs	r1, #32
 80027ec:	f001 f978 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_R
 80027f0:	4630      	mov	r0, r6
 80027f2:	2200      	movs	r2, #0
 80027f4:	2102      	movs	r1, #2
 80027f6:	f001 f973 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_S
 80027fa:	4630      	mov	r0, r6
 80027fc:	2201      	movs	r2, #1
 80027fe:	2102      	movs	r1, #2
 8002800:	f001 f96e 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_S
 8002804:	4630      	mov	r0, r6
 8002806:	2201      	movs	r2, #1
 8002808:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800280c:	f001 f968 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_RS_S
 8002810:	2201      	movs	r2, #1
 8002812:	4630      	mov	r0, r6
 8002814:	4611      	mov	r1, r2
 8002816:	f001 f963 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_R	
 800281a:	4630      	mov	r0, r6
 800281c:	2200      	movs	r2, #0
 800281e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002822:	f001 f95d 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8002826:	4628      	mov	r0, r5
 8002828:	2200      	movs	r2, #0
 800282a:	2102      	movs	r1, #2
 800282c:	f001 f958 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8002830:	4628      	mov	r0, r5
 8002832:	2200      	movs	r2, #0
 8002834:	2101      	movs	r1, #1
 8002836:	f001 f953 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 800283a:	4620      	mov	r0, r4
 800283c:	2200      	movs	r2, #0
 800283e:	2108      	movs	r1, #8
 8002840:	f001 f94e 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8002844:	4620      	mov	r0, r4
 8002846:	2200      	movs	r2, #0
 8002848:	2104      	movs	r1, #4
 800284a:	f001 f949 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 800284e:	4620      	mov	r0, r4
 8002850:	2200      	movs	r2, #0
 8002852:	2102      	movs	r1, #2
 8002854:	f001 f944 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8002858:	4620      	mov	r0, r4
 800285a:	2200      	movs	r2, #0
 800285c:	2101      	movs	r1, #1
 800285e:	f001 f93f 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8002862:	4620      	mov	r0, r4
 8002864:	2200      	movs	r2, #0
 8002866:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800286a:	f001 f939 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 800286e:	4620      	mov	r0, r4
 8002870:	2200      	movs	r2, #0
 8002872:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002876:	f001 f933 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800287a:	4628      	mov	r0, r5
 800287c:	2200      	movs	r2, #0
 800287e:	2104      	movs	r1, #4
 8002880:	f001 f92e 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002884:	4628      	mov	r0, r5
 8002886:	2200      	movs	r2, #0
 8002888:	2108      	movs	r1, #8
 800288a:	f001 f929 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800288e:	4628      	mov	r0, r5
 8002890:	2200      	movs	r2, #0
 8002892:	2110      	movs	r1, #16
 8002894:	f001 f924 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002898:	4628      	mov	r0, r5
 800289a:	2200      	movs	r2, #0
 800289c:	2120      	movs	r1, #32
 800289e:	f001 f91f 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80028a2:	4628      	mov	r0, r5
 80028a4:	2201      	movs	r2, #1
 80028a6:	2140      	movs	r1, #64	; 0x40
 80028a8:	f001 f91a 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80028ac:	4628      	mov	r0, r5
 80028ae:	2200      	movs	r2, #0
 80028b0:	2180      	movs	r1, #128	; 0x80
 80028b2:	f001 f915 	bl	8003ae0 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80028b6:	4620      	mov	r0, r4
 80028b8:	2200      	movs	r2, #0
 80028ba:	2110      	movs	r1, #16
 80028bc:	f001 f910 	bl	8003ae0 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80028c0:	4620      	mov	r0, r4
 80028c2:	2200      	movs	r2, #0
 80028c4:	2120      	movs	r1, #32
 80028c6:	f001 f90b 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_R
 80028ca:	4630      	mov	r0, r6
 80028cc:	2200      	movs	r2, #0
 80028ce:	2102      	movs	r1, #2
 80028d0:	f001 f906 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_WR_S
 80028d4:	4630      	mov	r0, r6
 80028d6:	2201      	movs	r2, #1
 80028d8:	2102      	movs	r1, #2
 80028da:	f001 f901 	bl	8003ae0 <HAL_GPIO_WritePin>
	LCD_CS_S
 80028de:	4630      	mov	r0, r6
  LCD_Send_Cmd(HX8357_DISPON);
	
	LCD_Orientation(DEFAULT_ORIENTATION);
}
 80028e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	LCD_CS_S
 80028e4:	2201      	movs	r2, #1
 80028e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028ea:	f001 b8f9 	b.w	8003ae0 <HAL_GPIO_WritePin>
 80028ee:	bf00      	nop

080028f0 <bme280>:

uint16_t byteS(uint8_t byteL, uint8_t byteH) {
	return (byteH << 8) | byteL;
}

void bme280(void) {
 80028f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	temperature = BME280_getTemperature(-1);
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
void bme280(void) {
 80028f8:	b089      	sub	sp, #36	; 0x24
	temperature = BME280_getTemperature(-1);
 80028fa:	f7fe fb95 	bl	8001028 <BME280_getTemperature>
 80028fe:	f7fd fe47 	bl	8000590 <__aeabi_f2d>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8002bcc <bme280+0x2dc>
	humidity = BME280_getHumidity(-1);
 800290a:	f04f 30ff 	mov.w	r0, #4294967295
	temperature = BME280_getTemperature(-1);
 800290e:	e9ca 2300 	strd	r2, r3, [sl]
	humidity = BME280_getHumidity(-1);
 8002912:	f7fe fc05 	bl	8001120 <BME280_getHumidity>
 8002916:	f7fd fe3b 	bl	8000590 <__aeabi_f2d>
 800291a:	4dad      	ldr	r5, [pc, #692]	; (8002bd0 <bme280+0x2e0>)
	pressure = (uint16_t)BME280_getPressure();
 800291c:	2600      	movs	r6, #0
	humidity = BME280_getHumidity(-1);
 800291e:	e9c5 0100 	strd	r0, r1, [r5]
	pressure = (uint16_t)BME280_getPressure();
 8002922:	f7fe fc97 	bl	8001254 <BME280_getPressure>
 8002926:	f7fe fae1 	bl	8000eec <__aeabi_f2uiz>
 800292a:	4baa      	ldr	r3, [pc, #680]	; (8002bd4 <bme280+0x2e4>)
 800292c:	4faa      	ldr	r7, [pc, #680]	; (8002bd8 <bme280+0x2e8>)
 800292e:	8018      	strh	r0, [r3, #0]

	for (uint16_t i = 0; i < 4096; i++) {
		eeprom[i] = AT24XX_Read(i);
 8002930:	b2b0      	uxth	r0, r6
 8002932:	f7fe fb33 	bl	8000f9c <AT24XX_Read>
	for (uint16_t i = 0; i < 4096; i++) {
 8002936:	3601      	adds	r6, #1
 8002938:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
		eeprom[i] = AT24XX_Read(i);
 800293c:	f807 0f01 	strb.w	r0, [r7, #1]!
	for (uint16_t i = 0; i < 4096; i++) {
 8002940:	d1f6      	bne.n	8002930 <bme280+0x40>
	}

	LCD_Rect(2, 190, 157, 128, 1, BLUE);
 8002942:	27ff      	movs	r7, #255	; 0xff
 8002944:	2601      	movs	r6, #1
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	229d      	movs	r2, #157	; 0x9d
 800294a:	21be      	movs	r1, #190	; 0xbe
 800294c:	2002      	movs	r0, #2
 800294e:	e9cd 6700 	strd	r6, r7, [sp]
	LCD_Rect(161, 190, 157, 128, 1, BLUE);

	if (temperature != temperatureLast && temperature >= -40 && temperature <= 40) {
 8002952:	f8df b288 	ldr.w	fp, [pc, #648]	; 8002bdc <bme280+0x2ec>
	LCD_Rect(2, 190, 157, 128, 1, BLUE);
 8002956:	f7ff faf1 	bl	8001f3c <LCD_Rect>
	LCD_Rect(161, 190, 157, 128, 1, BLUE);
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	229d      	movs	r2, #157	; 0x9d
 800295e:	21be      	movs	r1, #190	; 0xbe
 8002960:	20a1      	movs	r0, #161	; 0xa1
 8002962:	e9cd 6700 	strd	r6, r7, [sp]
 8002966:	f7ff fae9 	bl	8001f3c <LCD_Rect>
	if (temperature != temperatureLast && temperature >= -40 && temperature <= 40) {
 800296a:	e9da 6700 	ldrd	r6, r7, [sl]
 800296e:	e9db 8900 	ldrd	r8, r9, [fp]
 8002972:	4630      	mov	r0, r6
 8002974:	4639      	mov	r1, r7
 8002976:	4642      	mov	r2, r8
 8002978:	464b      	mov	r3, r9
 800297a:	f7fe f8c9 	bl	8000b10 <__aeabi_dcmpeq>
 800297e:	b940      	cbnz	r0, 8002992 <bme280+0xa2>
 8002980:	2200      	movs	r2, #0
 8002982:	4630      	mov	r0, r6
 8002984:	4639      	mov	r1, r7
 8002986:	4b96      	ldr	r3, [pc, #600]	; (8002be0 <bme280+0x2f0>)
 8002988:	f7fe f8e0 	bl	8000b4c <__aeabi_dcmpge>
 800298c:	2800      	cmp	r0, #0
 800298e:	f040 8149 	bne.w	8002c24 <bme280+0x334>
		}

		temperatureLast = temperature;
	}

	if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 8002992:	e9d5 6700 	ldrd	r6, r7, [r5]
 8002996:	f8df a24c 	ldr.w	sl, [pc, #588]	; 8002be4 <bme280+0x2f4>
 800299a:	4630      	mov	r0, r6
 800299c:	e9da 8900 	ldrd	r8, r9, [sl]
 80029a0:	4639      	mov	r1, r7
 80029a2:	4642      	mov	r2, r8
 80029a4:	464b      	mov	r3, r9
 80029a6:	f7fe f8b3 	bl	8000b10 <__aeabi_dcmpeq>
 80029aa:	b978      	cbnz	r0, 80029cc <bme280+0xdc>
 80029ac:	2200      	movs	r2, #0
 80029ae:	2300      	movs	r3, #0
 80029b0:	4630      	mov	r0, r6
 80029b2:	4639      	mov	r1, r7
 80029b4:	f7fe f8ca 	bl	8000b4c <__aeabi_dcmpge>
 80029b8:	b140      	cbz	r0, 80029cc <bme280+0xdc>
 80029ba:	4630      	mov	r0, r6
 80029bc:	4639      	mov	r1, r7
 80029be:	2200      	movs	r2, #0
 80029c0:	4b89      	ldr	r3, [pc, #548]	; (8002be8 <bme280+0x2f8>)
 80029c2:	f7fe f8af 	bl	8000b24 <__aeabi_dcmplt>
 80029c6:	2800      	cmp	r0, #0
 80029c8:	f040 8162 	bne.w	8002c90 <bme280+0x3a0>
		else LCD_Font(166, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);

		humidityLast = humidity;
	}

	if (pressureLast != pressure) {
 80029cc:	4d87      	ldr	r5, [pc, #540]	; (8002bec <bme280+0x2fc>)
 80029ce:	4b81      	ldr	r3, [pc, #516]	; (8002bd4 <bme280+0x2e4>)
 80029d0:	882a      	ldrh	r2, [r5, #0]
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d02c      	beq.n	8002a32 <bme280+0x142>

		char weatherPrintP[9];

		if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d HP", pressureLast);
 80029d8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80029dc:	ae05      	add	r6, sp, #20
 80029de:	bf2c      	ite	cs
 80029e0:	4983      	ldrcs	r1, [pc, #524]	; (8002bf0 <bme280+0x300>)
		else sprintf(weatherPrintP, " %02d HPa", pressureLast);
 80029e2:	4984      	ldrcc	r1, [pc, #528]	; (8002bf4 <bme280+0x304>)
 80029e4:	4630      	mov	r0, r6
 80029e6:	f003 fd39 	bl	800645c <siprintf>
		LCD_Font(310, 187, weatherPrintP, &DejaVu_Sans_36, 1, BLACK);
 80029ea:	2701      	movs	r7, #1
 80029ec:	f04f 0c00 	mov.w	ip, #0
 80029f0:	e9cd 7c00 	strd	r7, ip, [sp]

		if (pressure >= 1000) sprintf(weatherPrintP, "%02d HP", pressure);
		else sprintf(weatherPrintP, " %02d HP", pressure);
		LCD_Font(310, 187, weatherPrintP, &DejaVu_Sans_36, 1, GRAY);
 80029f4:	2701      	movs	r7, #1
		LCD_Font(310, 187, weatherPrintP, &DejaVu_Sans_36, 1, BLACK);
 80029f6:	21bb      	movs	r1, #187	; 0xbb
 80029f8:	4632      	mov	r2, r6
 80029fa:	f44f 709b 	mov.w	r0, #310	; 0x136
 80029fe:	4b7e      	ldr	r3, [pc, #504]	; (8002bf8 <bme280+0x308>)
 8002a00:	f7ff fc00 	bl	8002204 <LCD_Font>
		if (pressure >= 1000) sprintf(weatherPrintP, "%02d HP", pressure);
 8002a04:	4b73      	ldr	r3, [pc, #460]	; (8002bd4 <bme280+0x2e4>)
		else sprintf(weatherPrintP, " %02d HP", pressure);
 8002a06:	4630      	mov	r0, r6
		if (pressure >= 1000) sprintf(weatherPrintP, "%02d HP", pressure);
 8002a08:	881a      	ldrh	r2, [r3, #0]
 8002a0a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8002a0e:	bf2c      	ite	cs
 8002a10:	4977      	ldrcs	r1, [pc, #476]	; (8002bf0 <bme280+0x300>)
		else sprintf(weatherPrintP, " %02d HP", pressure);
 8002a12:	497a      	ldrcc	r1, [pc, #488]	; (8002bfc <bme280+0x30c>)
 8002a14:	f003 fd22 	bl	800645c <siprintf>
		LCD_Font(310, 187, weatherPrintP, &DejaVu_Sans_36, 1, GRAY);
 8002a18:	4b79      	ldr	r3, [pc, #484]	; (8002c00 <bme280+0x310>)
 8002a1a:	4632      	mov	r2, r6
 8002a1c:	9301      	str	r3, [sp, #4]
 8002a1e:	21bb      	movs	r1, #187	; 0xbb
 8002a20:	4b75      	ldr	r3, [pc, #468]	; (8002bf8 <bme280+0x308>)
 8002a22:	f44f 709b 	mov.w	r0, #310	; 0x136
 8002a26:	9700      	str	r7, [sp, #0]
 8002a28:	f7ff fbec 	bl	8002204 <LCD_Font>

		pressureLast = pressure;
 8002a2c:	4b69      	ldr	r3, [pc, #420]	; (8002bd4 <bme280+0x2e4>)
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	802b      	strh	r3, [r5, #0]
	}

	pressure = (uint16_t)BME280_getPressure();
 8002a32:	f7fe fc0f 	bl	8001254 <BME280_getPressure>
 8002a36:	f7fe fa59 	bl	8000eec <__aeabi_f2uiz>
	if (pressure > 300 && pressure < 1100) {
 8002a3a:	f46f 7296 	mvn.w	r2, #300	; 0x12c
 8002a3e:	f240 311e 	movw	r1, #798	; 0x31e
	pressure = (uint16_t)BME280_getPressure();
 8002a42:	b283      	uxth	r3, r0
	if (pressure > 300 && pressure < 1100) {
 8002a44:	189a      	adds	r2, r3, r2
	pressure = (uint16_t)BME280_getPressure();
 8002a46:	4863      	ldr	r0, [pc, #396]	; (8002bd4 <bme280+0x2e4>)
	if (pressure > 300 && pressure < 1100) {
 8002a48:	b292      	uxth	r2, r2
 8002a4a:	428a      	cmp	r2, r1
	pressure = (uint16_t)BME280_getPressure();
 8002a4c:	8003      	strh	r3, [r0, #0]
	if (pressure > 300 && pressure < 1100) {
 8002a4e:	f200 80b9 	bhi.w	8002bc4 <bme280+0x2d4>
 8002a52:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8002c04 <bme280+0x314>
 8002a56:	46ca      	mov	sl, r9
 8002a58:	fa1f f389 	uxth.w	r3, r9
 8002a5c:	f109 0802 	add.w	r8, r9, #2
 8002a60:	f5c3 757a 	rsb	r5, r3, #1000	; 0x3e8

		for (uint16_t i = 0; i < 157; i++) {
			hourlyPressure[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8002a64:	f5c3 767a 	rsb	r6, r3, #1000	; 0x3e8
 8002a68:	f508 779c 	add.w	r7, r8, #312	; 0x138
 8002a6c:	9303      	str	r3, [sp, #12]
 8002a6e:	b2ad      	uxth	r5, r5
 8002a70:	3601      	adds	r6, #1
 8002a72:	fa1f fb8a 	uxth.w	fp, sl
 8002a76:	eb0b 0005 	add.w	r0, fp, r5
 8002a7a:	b280      	uxth	r0, r0
 8002a7c:	f7fe fa8e 	bl	8000f9c <AT24XX_Read>
 8002a80:	4604      	mov	r4, r0
 8002a82:	eb0b 0006 	add.w	r0, fp, r6
 8002a86:	b280      	uxth	r0, r0
 8002a88:	f7fe fa88 	bl	8000f9c <AT24XX_Read>
	return (byteH << 8) | byteL;
 8002a8c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
			hourlyPressure[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8002a90:	f82a 4f02 	strh.w	r4, [sl, #2]!
		for (uint16_t i = 0; i < 157; i++) {
 8002a94:	45ba      	cmp	sl, r7
 8002a96:	d1ec      	bne.n	8002a72 <bme280+0x182>
		}

		if (hourlyPressure[0] != rtcHrs && pressure > 300 && pressure < 1100) {
 8002a98:	4b5b      	ldr	r3, [pc, #364]	; (8002c08 <bme280+0x318>)
 8002a9a:	485c      	ldr	r0, [pc, #368]	; (8002c0c <bme280+0x31c>)
 8002a9c:	781a      	ldrb	r2, [r3, #0]
 8002a9e:	8803      	ldrh	r3, [r0, #0]
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d030      	beq.n	8002b06 <bme280+0x216>
 8002aa4:	4b4b      	ldr	r3, [pc, #300]	; (8002bd4 <bme280+0x2e4>)
 8002aa6:	f240 311e 	movw	r1, #798	; 0x31e
 8002aaa:	881e      	ldrh	r6, [r3, #0]
 8002aac:	f46f 7396 	mvn.w	r3, #300	; 0x12c
 8002ab0:	18f3      	adds	r3, r6, r3
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	428b      	cmp	r3, r1
 8002ab6:	d826      	bhi.n	8002b06 <bme280+0x216>

			hourlyPressure[0] = rtcHrs;
 8002ab8:	4683      	mov	fp, r0
 8002aba:	9b03      	ldr	r3, [sp, #12]

			for (uint16_t i = 1; i < 156; i++) hourlyPressure[i] = hourlyPressure[i + 1];
 8002abc:	1c84      	adds	r4, r0, #2
			hourlyPressure[0] = rtcHrs;
 8002abe:	8002      	strh	r2, [r0, #0]
			for (uint16_t i = 1; i < 156; i++) hourlyPressure[i] = hourlyPressure[i + 1];
 8002ac0:	f5c3 7a79 	rsb	sl, r3, #996	; 0x3e4
 8002ac4:	f44f 729b 	mov.w	r2, #310	; 0x136
 8002ac8:	4620      	mov	r0, r4
 8002aca:	1ca1      	adds	r1, r4, #2
 8002acc:	f002 fe32 	bl	8005734 <memmove>
			hourlyPressure[155] = (uint16_t)pressure;
 8002ad0:	f10a 0a03 	add.w	sl, sl, #3
 8002ad4:	f8ab 6136 	strh.w	r6, [fp, #310]	; 0x136
	return (val & 0xFF);
 8002ad8:	eb05 0009 	add.w	r0, r5, r9
 8002adc:	f839 1f02 	ldrh.w	r1, [r9, #2]!

			for (uint16_t i = 0; i < 157; i++) {
				AT24XX_Update(i * 2 + 1000, byteL(hourlyPressure[i]));
 8002ae0:	b280      	uxth	r0, r0
 8002ae2:	b2c9      	uxtb	r1, r1
 8002ae4:	f7fe fa72 	bl	8000fcc <AT24XX_Update>
	return ((val >> 8) & 0xFF);
 8002ae8:	f8b9 1000 	ldrh.w	r1, [r9]
				AT24XX_Update(i * 2 + 1 + 1000, byteH(hourlyPressure[i]));
 8002aec:	eb0a 0009 	add.w	r0, sl, r9
 8002af0:	0a09      	lsrs	r1, r1, #8
 8002af2:	b280      	uxth	r0, r0
 8002af4:	f7fe fa6a 	bl	8000fcc <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 8002af8:	45b9      	cmp	r9, r7
 8002afa:	d1ed      	bne.n	8002ad8 <bme280+0x1e8>
			}

			graphViewed = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	4a44      	ldr	r2, [pc, #272]	; (8002c10 <bme280+0x320>)
 8002b00:	9203      	str	r2, [sp, #12]
 8002b02:	7013      	strb	r3, [r2, #0]
		}

		if (!graphViewed) {
 8002b04:	e005      	b.n	8002b12 <bme280+0x222>
 8002b06:	4b42      	ldr	r3, [pc, #264]	; (8002c10 <bme280+0x320>)
 8002b08:	9303      	str	r3, [sp, #12]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d159      	bne.n	8002bc4 <bme280+0x2d4>
 8002b10:	4c40      	ldr	r4, [pc, #256]	; (8002c14 <bme280+0x324>)
 8002b12:	4d41      	ldr	r5, [pc, #260]	; (8002c18 <bme280+0x328>)
 8002b14:	f8df a104 	ldr.w	sl, [pc, #260]	; 8002c1c <bme280+0x32c>
 8002b18:	8828      	ldrh	r0, [r5, #0]
 8002b1a:	f8ba 1000 	ldrh.w	r1, [sl]
 8002b1e:	4b40      	ldr	r3, [pc, #256]	; (8002c20 <bme280+0x330>)

			for (uint16_t i = 1; i < 156; i++) {
				if (hourlyPressure[156 - i] != 0) {
 8002b20:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 8002b24:	b12a      	cbz	r2, 8002b32 <bme280+0x242>
 8002b26:	4290      	cmp	r0, r2
 8002b28:	bf28      	it	cs
 8002b2a:	4610      	movcs	r0, r2
					if (hourlyPressure[156 - i] < barographMinimum) barographMinimum = hourlyPressure[156 - i];
					if (hourlyPressure[156 - i] > barographMaximum) barographMaximum = hourlyPressure[156 - i];
 8002b2c:	4291      	cmp	r1, r2
 8002b2e:	bf38      	it	cc
 8002b30:	4611      	movcc	r1, r2
			for (uint16_t i = 1; i < 156; i++) {
 8002b32:	429c      	cmp	r4, r3
 8002b34:	d1f4      	bne.n	8002b20 <bme280+0x230>
				}
			}

			LCD_Rect(320, 190, 157, 128, 1, BLUE);
 8002b36:	24ff      	movs	r4, #255	; 0xff
 8002b38:	f04f 0901 	mov.w	r9, #1
 8002b3c:	8028      	strh	r0, [r5, #0]
 8002b3e:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002b42:	f8aa 1000 	strh.w	r1, [sl]
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	229d      	movs	r2, #157	; 0x9d
 8002b4a:	21be      	movs	r1, #190	; 0xbe
 8002b4c:	e9cd 9400 	strd	r9, r4, [sp]
 8002b50:	4605      	mov	r5, r0

			for (uint16_t i = 0; i < 156 ; i++) {
				int16_t val = 0;
				val = hourlyPressure[i + 1];
				if (val < barographMaximum - 127) val = barographMaximum - 127;
								LCD_Line(320 + i, 318, 320 + i, 191, 1, BLACK);
 8002b52:	f04f 0b00 	mov.w	fp, #0
			LCD_Rect(320, 190, 157, 128, 1, BLUE);
 8002b56:	f7ff f9f1 	bl	8001f3c <LCD_Rect>
				val = hourlyPressure[i + 1];
 8002b5a:	f838 6f02 	ldrh.w	r6, [r8, #2]!
				if (val < barographMaximum - 127) val = barographMaximum - 127;
 8002b5e:	f8ba c000 	ldrh.w	ip, [sl]
 8002b62:	b234      	sxth	r4, r6
 8002b64:	f1ac 0c7f 	sub.w	ip, ip, #127	; 0x7f
 8002b68:	4564      	cmp	r4, ip
								LCD_Line(320 + i, 318, 320 + i, 191, 1, BLACK);
 8002b6a:	462a      	mov	r2, r5
 8002b6c:	4628      	mov	r0, r5
 8002b6e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002b72:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8002b76:	e9cd 9b00 	strd	r9, fp, [sp]
								LCD_Line(320 + i, 318, 320 + i, 191 + (barographMaximum - val), 1, RGB(255 - ((barographMaximum - val) * 2), 0, 255 - (255 - ((barographMaximum - val) * 2))));
 8002b7a:	bfbc      	itt	lt
 8002b7c:	fa0f f48c 	sxthlt.w	r4, ip
				if (val < barographMaximum - 127) val = barographMaximum - 127;
 8002b80:	fa1f f68c 	uxthlt.w	r6, ip
								LCD_Line(320 + i, 318, 320 + i, 191, 1, BLACK);
 8002b84:	f7ff f994 	bl	8001eb0 <LCD_Line>
								LCD_Line(320 + i, 318, 320 + i, 191 + (barographMaximum - val), 1, RGB(255 - ((barographMaximum - val) * 2), 0, 255 - (255 - ((barographMaximum - val) * 2))));
 8002b88:	f8ba 3000 	ldrh.w	r3, [sl]
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	1b1a      	subs	r2, r3, r4
 8002b90:	0052      	lsls	r2, r2, #1
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	33bf      	adds	r3, #191	; 0xbf
 8002b96:	f082 00ff 	eor.w	r0, r2, #255	; 0xff
 8002b9a:	1b9e      	subs	r6, r3, r6
 8002b9c:	f7fe fd8e 	bl	80016bc <RGB>
 8002ba0:	4604      	mov	r4, r0
 8002ba2:	b2b6      	uxth	r6, r6
 8002ba4:	462a      	mov	r2, r5
 8002ba6:	4628      	mov	r0, r5
 8002ba8:	4633      	mov	r3, r6
 8002baa:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8002bae:	e9cd 9400 	strd	r9, r4, [sp]
 8002bb2:	f7ff f97d 	bl	8001eb0 <LCD_Line>
			for (uint16_t i = 0; i < 156 ; i++) {
 8002bb6:	3501      	adds	r5, #1
 8002bb8:	45b8      	cmp	r8, r7
 8002bba:	b2ad      	uxth	r5, r5
 8002bbc:	d1cd      	bne.n	8002b5a <bme280+0x26a>
			}

			graphViewed = 1;
 8002bbe:	9b03      	ldr	r3, [sp, #12]
 8002bc0:	f883 9000 	strb.w	r9, [r3]
		}
	}
}
 8002bc4:	b009      	add	sp, #36	; 0x24
 8002bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bca:	bf00      	nop
 8002bcc:	200014b0 	.word	0x200014b0
 8002bd0:	20001488 	.word	0x20001488
 8002bd4:	20001498 	.word	0x20001498
 8002bd8:	2000038f 	.word	0x2000038f
 8002bdc:	200014b8 	.word	0x200014b8
 8002be0:	c0440000 	.word	0xc0440000
 8002be4:	20001490 	.word	0x20001490
 8002be8:	40590000 	.word	0x40590000
 8002bec:	2000149a 	.word	0x2000149a
 8002bf0:	0800a490 	.word	0x0800a490
 8002bf4:	0800a498 	.word	0x0800a498
 8002bf8:	0801973c 	.word	0x0801973c
 8002bfc:	0800a4a4 	.word	0x0800a4a4
 8002c00:	007f7f7f 	.word	0x007f7f7f
 8002c04:	1ffffffe 	.word	0x1ffffffe
 8002c08:	200014a0 	.word	0x200014a0
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	20001390 	.word	0x20001390
 8002c14:	20000002 	.word	0x20000002
 8002c18:	2000038c 	.word	0x2000038c
 8002c1c:	2000038a 	.word	0x2000038a
 8002c20:	20000138 	.word	0x20000138
	if (temperature != temperatureLast && temperature >= -40 && temperature <= 40) {
 8002c24:	2200      	movs	r2, #0
 8002c26:	4630      	mov	r0, r6
 8002c28:	4639      	mov	r1, r7
 8002c2a:	4b87      	ldr	r3, [pc, #540]	; (8002e48 <bme280+0x558>)
 8002c2c:	f7fd ff84 	bl	8000b38 <__aeabi_dcmple>
 8002c30:	2800      	cmp	r0, #0
 8002c32:	f43f aeae 	beq.w	8002992 <bme280+0xa2>
		if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8002c36:	2200      	movs	r2, #0
 8002c38:	4640      	mov	r0, r8
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	4b83      	ldr	r3, [pc, #524]	; (8002e4c <bme280+0x55c>)
 8002c3e:	f7fd ff85 	bl	8000b4c <__aeabi_dcmpge>
 8002c42:	2800      	cmp	r0, #0
 8002c44:	d15b      	bne.n	8002cfe <bme280+0x40e>
 8002c46:	2200      	movs	r2, #0
 8002c48:	2300      	movs	r3, #0
 8002c4a:	4640      	mov	r0, r8
 8002c4c:	4649      	mov	r1, r9
 8002c4e:	f7fd ff69 	bl	8000b24 <__aeabi_dcmplt>
 8002c52:	2200      	movs	r2, #0
 8002c54:	2800      	cmp	r0, #0
 8002c56:	f040 80ce 	bne.w	8002df6 <bme280+0x506>
		else if (temperatureLast < 10 && temperatureLast > 0) {
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	4640      	mov	r0, r8
 8002c5e:	4649      	mov	r1, r9
 8002c60:	f7fd ff7e 	bl	8000b60 <__aeabi_dcmpgt>
 8002c64:	2800      	cmp	r0, #0
 8002c66:	f040 80d7 	bne.w	8002e18 <bme280+0x528>
		else if (temperatureLast <= -10) {
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	4640      	mov	r0, r8
 8002c6e:	4649      	mov	r1, r9
 8002c70:	4b77      	ldr	r3, [pc, #476]	; (8002e50 <bme280+0x560>)
 8002c72:	f7fd ff61 	bl	8000b38 <__aeabi_dcmple>
 8002c76:	2800      	cmp	r0, #0
 8002c78:	d052      	beq.n	8002d20 <bme280+0x430>
			sprintf(weatherPrintT, "%2d", (int8_t)temperatureLast);
 8002c7a:	4649      	mov	r1, r9
 8002c7c:	4640      	mov	r0, r8
 8002c7e:	f7fd ff8f 	bl	8000ba0 <__aeabi_d2iz>
 8002c82:	4602      	mov	r2, r0
 8002c84:	4973      	ldr	r1, [pc, #460]	; (8002e54 <bme280+0x564>)
 8002c86:	a805      	add	r0, sp, #20
 8002c88:	b252      	sxtb	r2, r2
 8002c8a:	f003 fbe7 	bl	800645c <siprintf>
 8002c8e:	e03c      	b.n	8002d0a <bme280+0x41a>
				sprintf(weatherPrintH, "%.1f %%H", humidityLast);
 8002c90:	ae05      	add	r6, sp, #20
 8002c92:	4642      	mov	r2, r8
 8002c94:	464b      	mov	r3, r9
 8002c96:	4970      	ldr	r1, [pc, #448]	; (8002e58 <bme280+0x568>)
 8002c98:	4630      	mov	r0, r6
 8002c9a:	f003 fbdf 	bl	800645c <siprintf>
		if (humidityLast >= 10)
 8002c9e:	e9da 0100 	ldrd	r0, r1, [sl]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	4b69      	ldr	r3, [pc, #420]	; (8002e4c <bme280+0x55c>)
 8002ca6:	f7fd ff51 	bl	8000b4c <__aeabi_dcmpge>
 8002caa:	2800      	cmp	r0, #0
 8002cac:	d176      	bne.n	8002d9c <bme280+0x4ac>
		else LCD_Font(166, 187, weatherPrintH, &DejaVu_Sans_36, 1, BLACK);
 8002cae:	2701      	movs	r7, #1
 8002cb0:	9001      	str	r0, [sp, #4]
 8002cb2:	4632      	mov	r2, r6
 8002cb4:	21bb      	movs	r1, #187	; 0xbb
 8002cb6:	20a6      	movs	r0, #166	; 0xa6
 8002cb8:	4b68      	ldr	r3, [pc, #416]	; (8002e5c <bme280+0x56c>)
 8002cba:	9700      	str	r7, [sp, #0]
 8002cbc:	f7ff faa2 	bl	8002204 <LCD_Font>
				sprintf(weatherPrintH, "%.1f %%H", humidity);
 8002cc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002cc4:	4964      	ldr	r1, [pc, #400]	; (8002e58 <bme280+0x568>)
 8002cc6:	4630      	mov	r0, r6
 8002cc8:	f003 fbc8 	bl	800645c <siprintf>
		if (humidity >= 10)
 8002ccc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	4b5e      	ldr	r3, [pc, #376]	; (8002e4c <bme280+0x55c>)
 8002cd4:	f7fd ff3a 	bl	8000b4c <__aeabi_dcmpge>
			LCD_Font(140, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 8002cd8:	2101      	movs	r1, #1
 8002cda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cde:	4632      	mov	r2, r6
 8002ce0:	e9cd 1300 	strd	r1, r3, [sp]
 8002ce4:	21bb      	movs	r1, #187	; 0xbb
		if (humidity >= 10)
 8002ce6:	2800      	cmp	r0, #0
 8002ce8:	f000 80a9 	beq.w	8002e3e <bme280+0x54e>
			LCD_Font(140, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 8002cec:	208c      	movs	r0, #140	; 0x8c
 8002cee:	4b5b      	ldr	r3, [pc, #364]	; (8002e5c <bme280+0x56c>)
 8002cf0:	f7ff fa88 	bl	8002204 <LCD_Font>
		humidityLast = humidity;
 8002cf4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002cf8:	e9ca 2300 	strd	r2, r3, [sl]
 8002cfc:	e666      	b.n	80029cc <bme280+0xdc>
			sprintf(weatherPrintT, "%.1f 'C", temperatureLast);
 8002cfe:	4642      	mov	r2, r8
 8002d00:	464b      	mov	r3, r9
 8002d02:	4957      	ldr	r1, [pc, #348]	; (8002e60 <bme280+0x570>)
 8002d04:	a805      	add	r0, sp, #20
 8002d06:	f003 fba9 	bl	800645c <siprintf>
			LCD_Font(0, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	21bb      	movs	r1, #187	; 0xbb
 8002d10:	e9cd 3000 	strd	r3, r0, [sp]
 8002d14:	aa05      	add	r2, sp, #20
 8002d16:	4b51      	ldr	r3, [pc, #324]	; (8002e5c <bme280+0x56c>)
 8002d18:	f7ff fa74 	bl	8002204 <LCD_Font>
		if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8002d1c:	e9da 6700 	ldrd	r6, r7, [sl]
 8002d20:	2200      	movs	r2, #0
 8002d22:	4630      	mov	r0, r6
 8002d24:	4639      	mov	r1, r7
 8002d26:	4b49      	ldr	r3, [pc, #292]	; (8002e4c <bme280+0x55c>)
 8002d28:	f7fd ff10 	bl	8000b4c <__aeabi_dcmpge>
 8002d2c:	bb08      	cbnz	r0, 8002d72 <bme280+0x482>
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2300      	movs	r3, #0
 8002d32:	4630      	mov	r0, r6
 8002d34:	4639      	mov	r1, r7
 8002d36:	f7fd fef5 	bl	8000b24 <__aeabi_dcmplt>
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2800      	cmp	r0, #0
 8002d3e:	d138      	bne.n	8002db2 <bme280+0x4c2>
		else if (temperature < 10 && temperature > 0) {
 8002d40:	2300      	movs	r3, #0
 8002d42:	4630      	mov	r0, r6
 8002d44:	4639      	mov	r1, r7
 8002d46:	f7fd ff0b 	bl	8000b60 <__aeabi_dcmpgt>
 8002d4a:	2800      	cmp	r0, #0
 8002d4c:	d140      	bne.n	8002dd0 <bme280+0x4e0>
		else if (temperature <= -10) {
 8002d4e:	2200      	movs	r2, #0
 8002d50:	4630      	mov	r0, r6
 8002d52:	4639      	mov	r1, r7
 8002d54:	4b3e      	ldr	r3, [pc, #248]	; (8002e50 <bme280+0x560>)
 8002d56:	f7fd feef 	bl	8000b38 <__aeabi_dcmple>
 8002d5a:	b1e0      	cbz	r0, 8002d96 <bme280+0x4a6>
			sprintf(weatherPrintT, "%2d 'C", (int8_t)temperature);
 8002d5c:	4639      	mov	r1, r7
 8002d5e:	4630      	mov	r0, r6
 8002d60:	f7fd ff1e 	bl	8000ba0 <__aeabi_d2iz>
 8002d64:	4602      	mov	r2, r0
 8002d66:	493f      	ldr	r1, [pc, #252]	; (8002e64 <bme280+0x574>)
 8002d68:	a805      	add	r0, sp, #20
 8002d6a:	b252      	sxtb	r2, r2
 8002d6c:	f003 fb76 	bl	800645c <siprintf>
 8002d70:	e005      	b.n	8002d7e <bme280+0x48e>
			sprintf(weatherPrintT, "%.1f 'C", temperature);
 8002d72:	4632      	mov	r2, r6
 8002d74:	463b      	mov	r3, r7
 8002d76:	493a      	ldr	r1, [pc, #232]	; (8002e60 <bme280+0x570>)
 8002d78:	a805      	add	r0, sp, #20
 8002d7a:	f003 fb6f 	bl	800645c <siprintf>
			LCD_Font(0, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
 8002d7e:	2101      	movs	r1, #1
 8002d80:	4b39      	ldr	r3, [pc, #228]	; (8002e68 <bme280+0x578>)
 8002d82:	2000      	movs	r0, #0
 8002d84:	e9cd 1300 	strd	r1, r3, [sp]
 8002d88:	aa05      	add	r2, sp, #20
 8002d8a:	21bb      	movs	r1, #187	; 0xbb
 8002d8c:	4b33      	ldr	r3, [pc, #204]	; (8002e5c <bme280+0x56c>)
 8002d8e:	f7ff fa39 	bl	8002204 <LCD_Font>
		temperatureLast = temperature;
 8002d92:	e9da 6700 	ldrd	r6, r7, [sl]
 8002d96:	e9cb 6700 	strd	r6, r7, [fp]
 8002d9a:	e5fa      	b.n	8002992 <bme280+0xa2>
			LCD_Font(140, 187, weatherPrintH, &DejaVu_Sans_36, 1, BLACK);
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	2201      	movs	r2, #1
 8002da0:	21bb      	movs	r1, #187	; 0xbb
 8002da2:	e9cd 2300 	strd	r2, r3, [sp]
 8002da6:	208c      	movs	r0, #140	; 0x8c
 8002da8:	4632      	mov	r2, r6
 8002daa:	4b2c      	ldr	r3, [pc, #176]	; (8002e5c <bme280+0x56c>)
 8002dac:	f7ff fa2a 	bl	8002204 <LCD_Font>
 8002db0:	e786      	b.n	8002cc0 <bme280+0x3d0>
		if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8002db2:	4630      	mov	r0, r6
 8002db4:	4639      	mov	r1, r7
 8002db6:	4b26      	ldr	r3, [pc, #152]	; (8002e50 <bme280+0x560>)
 8002db8:	f7fd fed2 	bl	8000b60 <__aeabi_dcmpgt>
 8002dbc:	2800      	cmp	r0, #0
 8002dbe:	d1d8      	bne.n	8002d72 <bme280+0x482>
		else if (temperature < 10 && temperature > 0) {
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	4630      	mov	r0, r6
 8002dc6:	4639      	mov	r1, r7
 8002dc8:	f7fd feca 	bl	8000b60 <__aeabi_dcmpgt>
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	d0c5      	beq.n	8002d5c <bme280+0x46c>
			sprintf(weatherPrintT, "%.1f 'C", temperature);
 8002dd0:	4632      	mov	r2, r6
 8002dd2:	463b      	mov	r3, r7
 8002dd4:	4922      	ldr	r1, [pc, #136]	; (8002e60 <bme280+0x570>)
 8002dd6:	a805      	add	r0, sp, #20
 8002dd8:	f003 fb40 	bl	800645c <siprintf>
			LCD_Font(26, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
 8002ddc:	2001      	movs	r0, #1
 8002dde:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <bme280+0x578>)
 8002de0:	21bb      	movs	r1, #187	; 0xbb
 8002de2:	e9cd 0300 	strd	r0, r3, [sp]
 8002de6:	aa05      	add	r2, sp, #20
 8002de8:	201a      	movs	r0, #26
 8002dea:	4b1c      	ldr	r3, [pc, #112]	; (8002e5c <bme280+0x56c>)
 8002dec:	f7ff fa0a 	bl	8002204 <LCD_Font>
		temperatureLast = temperature;
 8002df0:	e9da 6700 	ldrd	r6, r7, [sl]
			LCD_Font(26, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
 8002df4:	e7cf      	b.n	8002d96 <bme280+0x4a6>
		if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8002df6:	4640      	mov	r0, r8
 8002df8:	4649      	mov	r1, r9
 8002dfa:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <bme280+0x560>)
 8002dfc:	f7fd feb0 	bl	8000b60 <__aeabi_dcmpgt>
 8002e00:	2800      	cmp	r0, #0
 8002e02:	f47f af7c 	bne.w	8002cfe <bme280+0x40e>
		else if (temperatureLast < 10 && temperatureLast > 0) {
 8002e06:	2200      	movs	r2, #0
 8002e08:	2300      	movs	r3, #0
 8002e0a:	4640      	mov	r0, r8
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	f7fd fea7 	bl	8000b60 <__aeabi_dcmpgt>
 8002e12:	2800      	cmp	r0, #0
 8002e14:	f43f af31 	beq.w	8002c7a <bme280+0x38a>
			sprintf(weatherPrintT, "%.1f 'C", temperatureLast);
 8002e18:	4642      	mov	r2, r8
 8002e1a:	464b      	mov	r3, r9
 8002e1c:	4910      	ldr	r1, [pc, #64]	; (8002e60 <bme280+0x570>)
 8002e1e:	a805      	add	r0, sp, #20
 8002e20:	f003 fb1c 	bl	800645c <siprintf>
			LCD_Font(26, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
 8002e24:	2400      	movs	r4, #0
 8002e26:	2301      	movs	r3, #1
 8002e28:	21bb      	movs	r1, #187	; 0xbb
 8002e2a:	e9cd 3400 	strd	r3, r4, [sp]
 8002e2e:	201a      	movs	r0, #26
 8002e30:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <bme280+0x56c>)
 8002e32:	aa05      	add	r2, sp, #20
 8002e34:	f7ff f9e6 	bl	8002204 <LCD_Font>
		if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8002e38:	e9da 6700 	ldrd	r6, r7, [sl]
			LCD_Font(26, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
 8002e3c:	e770      	b.n	8002d20 <bme280+0x430>
		else LCD_Font(166, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 8002e3e:	20a6      	movs	r0, #166	; 0xa6
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <bme280+0x56c>)
 8002e42:	f7ff f9df 	bl	8002204 <LCD_Font>
 8002e46:	e755      	b.n	8002cf4 <bme280+0x404>
 8002e48:	40440000 	.word	0x40440000
 8002e4c:	40240000 	.word	0x40240000
 8002e50:	c0240000 	.word	0xc0240000
 8002e54:	0800a478 	.word	0x0800a478
 8002e58:	0800a484 	.word	0x0800a484
 8002e5c:	0801973c 	.word	0x0801973c
 8002e60:	0800a470 	.word	0x0800a470
 8002e64:	0800a47c 	.word	0x0800a47c
 8002e68:	00ffa500 	.word	0x00ffa500

08002e6c <SystemClock_Config>:
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e6c:	2300      	movs	r3, #0
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e6e:	2201      	movs	r2, #1
{
 8002e70:	b5d0      	push	{r4, r6, r7, lr}
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e72:	2001      	movs	r0, #1
{
 8002e74:	b090      	sub	sp, #64	; 0x40
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e76:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e7a:	2402      	movs	r4, #2
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e7c:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e80:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8002e84:	e9cd 3303 	strd	r3, r3, [sp, #12]
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e88:	9308      	str	r3, [sp, #32]
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e8a:	9300      	str	r3, [sp, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e8c:	920a      	str	r2, [sp, #40]	; 0x28
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e8e:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002e94:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e98:	e9cd 0106 	strd	r0, r1, [sp, #24]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e9c:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002e9e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ea2:	940d      	str	r4, [sp, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ea4:	f002 f870 	bl	8004f88 <HAL_RCC_OscConfig>
 8002ea8:	b108      	cbz	r0, 8002eae <SystemClock_Config+0x42>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002eaa:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002eac:	e7fe      	b.n	8002eac <SystemClock_Config+0x40>
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002eae:	4603      	mov	r3, r0
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eb0:	260f      	movs	r6, #15
 8002eb2:	2702      	movs	r7, #2
 8002eb4:	2200      	movs	r2, #0
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002eb6:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ebc:	4621      	mov	r1, r4
 8002ebe:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ec0:	e9cd 6700 	strd	r6, r7, [sp]
 8002ec4:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ec8:	f002 fa4e 	bl	8005368 <HAL_RCC_ClockConfig>
 8002ecc:	b108      	cbz	r0, 8002ed2 <SystemClock_Config+0x66>
 8002ece:	b672      	cpsid	i
	while (1)
 8002ed0:	e7fe      	b.n	8002ed0 <SystemClock_Config+0x64>
}
 8002ed2:	b010      	add	sp, #64	; 0x40
 8002ed4:	bdd0      	pop	{r4, r6, r7, pc}
 8002ed6:	bf00      	nop

08002ed8 <main>:
{
 8002ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002edc:	2400      	movs	r4, #0
{
 8002ede:	b08b      	sub	sp, #44	; 0x2c
	HAL_Init();
 8002ee0:	f000 fc52 	bl	8003788 <HAL_Init>
	SystemClock_Config();
 8002ee4:	f7ff ffc2 	bl	8002e6c <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee8:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002eec:	e9cd 4408 	strd	r4, r4, [sp, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002ef0:	4b4a      	ldr	r3, [pc, #296]	; (800301c <main+0x144>)
	HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin
 8002ef2:	f24e 013f 	movw	r1, #57407	; 0xe03f
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002ef6:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin
 8002ef8:	4849      	ldr	r0, [pc, #292]	; (8003020 <main+0x148>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002efa:	f042 0210 	orr.w	r2, r2, #16
 8002efe:	619a      	str	r2, [r3, #24]
 8002f00:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Pin = LED_Pin;
 8002f02:	2600      	movs	r6, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002f04:	f002 0210 	and.w	r2, r2, #16
 8002f08:	9202      	str	r2, [sp, #8]
 8002f0a:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002f0c:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Pin = LED_Pin;
 8002f0e:	2702      	movs	r7, #2
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002f10:	f042 0220 	orr.w	r2, r2, #32
 8002f14:	619a      	str	r2, [r3, #24]
 8002f16:	699a      	ldr	r2, [r3, #24]
 8002f18:	f002 0220 	and.w	r2, r2, #32
 8002f1c:	9203      	str	r2, [sp, #12]
 8002f1e:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	f042 0204 	orr.w	r2, r2, #4
 8002f26:	619a      	str	r2, [r3, #24]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	f002 0204 	and.w	r2, r2, #4
 8002f2e:	9204      	str	r2, [sp, #16]
 8002f30:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002f32:	699a      	ldr	r2, [r3, #24]
 8002f34:	f042 0208 	orr.w	r2, r2, #8
 8002f38:	619a      	str	r2, [r3, #24]
 8002f3a:	699b      	ldr	r3, [r3, #24]
	HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin
 8002f3c:	4622      	mov	r2, r4
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	9305      	str	r3, [sp, #20]
 8002f44:	9b05      	ldr	r3, [sp, #20]
	HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin
 8002f46:	f000 fdcb 	bl	8003ae0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8002f4a:	4622      	mov	r2, r4
 8002f4c:	21ff      	movs	r1, #255	; 0xff
 8002f4e:	4835      	ldr	r0, [pc, #212]	; (8003024 <main+0x14c>)
 8002f50:	f000 fdc6 	bl	8003ae0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8002f54:	4622      	mov	r2, r4
 8002f56:	f640 4103 	movw	r1, #3075	; 0xc03
 8002f5a:	4833      	ldr	r0, [pc, #204]	; (8003028 <main+0x150>)
 8002f5c:	f000 fdc0 	bl	8003ae0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = LED_Pin;
 8002f60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f64:	2301      	movs	r3, #1
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002f66:	482e      	ldr	r0, [pc, #184]	; (8003020 <main+0x148>)
 8002f68:	a906      	add	r1, sp, #24
	GPIO_InitStruct.Pin = LED_Pin;
 8002f6a:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8002f6e:	e9cd 2306 	strd	r2, r3, [sp, #24]
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8002f72:	2600      	movs	r6, #0
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002f74:	f000 fca6 	bl	80038c4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8002f78:	2703      	movs	r7, #3
 8002f7a:	f24c 023f 	movw	r2, #49215	; 0xc03f
 8002f7e:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f80:	4827      	ldr	r0, [pc, #156]	; (8003020 <main+0x148>)
 8002f82:	a906      	add	r1, sp, #24
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8002f84:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002f88:	e9cd 6708 	strd	r6, r7, [sp, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f8c:	f000 fc9a 	bl	80038c4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8002f90:	22ff      	movs	r2, #255	; 0xff
 8002f92:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f94:	4823      	ldr	r0, [pc, #140]	; (8003024 <main+0x14c>)
 8002f96:	a906      	add	r1, sp, #24
	GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8002f98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002f9c:	e9cd 6708 	strd	r6, r7, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa0:	f000 fc90 	bl	80038c4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8002fa4:	f640 4203 	movw	r2, #3075	; 0xc03
 8002fa8:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002faa:	481f      	ldr	r0, [pc, #124]	; (8003028 <main+0x150>)
 8002fac:	a906      	add	r1, sp, #24
	GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8002fae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002fb2:	e9cd 6708 	strd	r6, r7, [sp, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb6:	f000 fc85 	bl	80038c4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 8002fba:	2204      	movs	r2, #4
 8002fbc:	2300      	movs	r3, #0
	HAL_GPIO_Init(SYSTEM_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8002fbe:	481a      	ldr	r0, [pc, #104]	; (8003028 <main+0x150>)
 8002fc0:	a906      	add	r1, sp, #24
	GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 8002fc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(SYSTEM_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8002fc8:	f000 fc7c 	bl	80038c4 <HAL_GPIO_Init>
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	hi2c1.Instance = I2C1;
 8002fd0:	4816      	ldr	r0, [pc, #88]	; (800302c <main+0x154>)
 8002fd2:	4a17      	ldr	r2, [pc, #92]	; (8003030 <main+0x158>)
	hi2c1.Init.OwnAddress2 = 0;
 8002fd4:	e9c0 4405 	strd	r4, r4, [r0, #20]
	hi2c1.Instance = I2C1;
 8002fd8:	6002      	str	r2, [r0, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8002fda:	4a16      	ldr	r2, [pc, #88]	; (8003034 <main+0x15c>)
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fdc:	e9c0 4407 	strd	r4, r4, [r0, #28]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002fe0:	6084      	str	r4, [r0, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002fe2:	60c4      	str	r4, [r0, #12]
	hi2c1.Init.ClockSpeed = 400000;
 8002fe4:	6042      	str	r2, [r0, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fe6:	6103      	str	r3, [r0, #16]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fe8:	f000 fff6 	bl	8003fd8 <HAL_I2C_Init>
 8002fec:	b108      	cbz	r0, 8002ff2 <main+0x11a>
 8002fee:	b672      	cpsid	i
	while (1)
 8002ff0:	e7fe      	b.n	8002ff0 <main+0x118>
	huart1.Instance = USART1;
 8002ff2:	4603      	mov	r3, r0
	huart1.Init.BaudRate = 115200;
 8002ff4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002ff8:	220c      	movs	r2, #12
	huart1.Instance = USART1;
 8002ffa:	480f      	ldr	r0, [pc, #60]	; (8003038 <main+0x160>)
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002ffc:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003000:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003004:	6103      	str	r3, [r0, #16]
	huart1.Instance = USART1;
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <main+0x164>)
	huart1.Init.BaudRate = 115200;
 8003008:	6041      	str	r1, [r0, #4]
	huart1.Instance = USART1;
 800300a:	6003      	str	r3, [r0, #0]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800300c:	6142      	str	r2, [r0, #20]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800300e:	f002 faf9 	bl	8005604 <HAL_UART_Init>
 8003012:	4603      	mov	r3, r0
 8003014:	b1a0      	cbz	r0, 8003040 <main+0x168>
 8003016:	b672      	cpsid	i
	while (1)
 8003018:	e7fe      	b.n	8003018 <main+0x140>
 800301a:	bf00      	nop
 800301c:	40021000 	.word	0x40021000
 8003020:	40011000 	.word	0x40011000
 8003024:	40010800 	.word	0x40010800
 8003028:	40010c00 	.word	0x40010c00
 800302c:	20001394 	.word	0x20001394
 8003030:	40005400 	.word	0x40005400
 8003034:	00061a80 	.word	0x00061a80
 8003038:	20001440 	.word	0x20001440
 800303c:	40013800 	.word	0x40013800
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8003040:	f44f 7182 	mov.w	r1, #260	; 0x104
	hspi2.Init.CRCPolynomial = 10;
 8003044:	220a      	movs	r2, #10
	hspi2.Instance = SPI2;
 8003046:	48c9      	ldr	r0, [pc, #804]	; (800336c <main+0x494>)
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003048:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800304c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003050:	e9c0 3306 	strd	r3, r3, [r0, #24]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003054:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003058:	6283      	str	r3, [r0, #40]	; 0x28
	hspi2.Instance = SPI2;
 800305a:	4bc5      	ldr	r3, [pc, #788]	; (8003370 <main+0x498>)
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800305c:	6041      	str	r1, [r0, #4]
	hspi2.Init.CRCPolynomial = 10;
 800305e:	62c2      	str	r2, [r0, #44]	; 0x2c
	hspi2.Instance = SPI2;
 8003060:	6003      	str	r3, [r0, #0]
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003062:	f002 fa71 	bl	8005548 <HAL_SPI_Init>
 8003066:	4604      	mov	r4, r0
 8003068:	2800      	cmp	r0, #0
 800306a:	f040 81dd 	bne.w	8003428 <main+0x550>
	LCD_Rect_Fill(0, 0, 480, 320, BLUE);
 800306e:	25ff      	movs	r5, #255	; 0xff
	LCD_Init();
 8003070:	f7ff f98c 	bl	800238c <LCD_Init>
	LCD_Rect_Fill(0, 0, 480, 320, BLUE);
 8003074:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003078:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800307c:	4621      	mov	r1, r4
 800307e:	4620      	mov	r0, r4
 8003080:	9500      	str	r5, [sp, #0]
 8003082:	f7fe fb21 	bl	80016c8 <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 478, 318, BLACK);
 8003086:	2101      	movs	r1, #1
 8003088:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800308c:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8003090:	4608      	mov	r0, r1
 8003092:	9400      	str	r4, [sp, #0]
 8003094:	f7fe fb18 	bl	80016c8 <LCD_Rect_Fill>
	if (clearEEPROM) {
 8003098:	4bb6      	ldr	r3, [pc, #728]	; (8003374 <main+0x49c>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f040 81ba 	bne.w	8003416 <main+0x53e>
	LCD_Font(20, 127, "Waiting for I2C devices", &DejaVu_Sans_36, 1, RED);
 80030a2:	f44f 077f 	mov.w	r7, #16711680	; 0xff0000
 80030a6:	2601      	movs	r6, #1
 80030a8:	217f      	movs	r1, #127	; 0x7f
 80030aa:	2014      	movs	r0, #20
 80030ac:	e9cd 6700 	strd	r6, r7, [sp]
 80030b0:	4bb1      	ldr	r3, [pc, #708]	; (8003378 <main+0x4a0>)
 80030b2:	4ab2      	ldr	r2, [pc, #712]	; (800337c <main+0x4a4>)
 80030b4:	2400      	movs	r4, #0
 80030b6:	4db2      	ldr	r5, [pc, #712]	; (8003380 <main+0x4a8>)
 80030b8:	f7ff f8a4 	bl	8002204 <LCD_Font>
	for (uint16_t i = 0; i < 4096; i++) eeprom[i] = AT24XX_Read(i);
 80030bc:	b2a0      	uxth	r0, r4
 80030be:	f7fd ff6d 	bl	8000f9c <AT24XX_Read>
 80030c2:	3401      	adds	r4, #1
 80030c4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80030c8:	f805 0f01 	strb.w	r0, [r5, #1]!
 80030cc:	d1f6      	bne.n	80030bc <main+0x1e4>
	LCD_Font(20, 127, "Waiting for I2C devices", &DejaVu_Sans_36, 1, BLACK);
 80030ce:	2501      	movs	r5, #1
 80030d0:	2700      	movs	r7, #0
 80030d2:	217f      	movs	r1, #127	; 0x7f
 80030d4:	2014      	movs	r0, #20
 80030d6:	4ba8      	ldr	r3, [pc, #672]	; (8003378 <main+0x4a0>)
 80030d8:	4aa8      	ldr	r2, [pc, #672]	; (800337c <main+0x4a4>)
 80030da:	e9cd 5700 	strd	r5, r7, [sp]
 80030de:	f7ff f891 	bl	8002204 <LCD_Font>
	BME280_Init();
 80030e2:	f7fe f957 	bl	8001394 <BME280_Init>
	DS3231_Update();
 80030e6:	f7fe fa3d 	bl	8001564 <DS3231_Update>
 80030ea:	4ca6      	ldr	r4, [pc, #664]	; (8003384 <main+0x4ac>)
 80030ec:	4ea6      	ldr	r6, [pc, #664]	; (8003388 <main+0x4b0>)
 80030ee:	f8df a29c 	ldr.w	sl, [pc, #668]	; 800338c <main+0x4b4>
 80030f2:	f8df b29c 	ldr.w	fp, [pc, #668]	; 8003390 <main+0x4b8>
 80030f6:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8003394 <main+0x4bc>
			LCD_Circle(172, 35, 8, 0, 1, HUE_14);
 80030fa:	4da7      	ldr	r5, [pc, #668]	; (8003398 <main+0x4c0>)
		DS3231_Update();
 80030fc:	f7fe fa32 	bl	8001564 <DS3231_Update>
		rtcSec = DS3231_getSec();
 8003100:	f7fe fa5e 	bl	80015c0 <DS3231_getSec>
 8003104:	7020      	strb	r0, [r4, #0]
		rtcMin = DS3231_getMin();
 8003106:	f7fe fa69 	bl	80015dc <DS3231_getMin>
 800310a:	7030      	strb	r0, [r6, #0]
		rtcHrs = DS3231_getHrs();
 800310c:	f7fe fa74 	bl	80015f8 <DS3231_getHrs>
 8003110:	f88a 0000 	strb.w	r0, [sl]
		rtcDay = DS3231_getDay();
 8003114:	f7fe fa7e 	bl	8001614 <DS3231_getDay>
 8003118:	4ba0      	ldr	r3, [pc, #640]	; (800339c <main+0x4c4>)
 800311a:	7018      	strb	r0, [r3, #0]
		rtcDate = DS3231_getDate();
 800311c:	f7fe fa88 	bl	8001630 <DS3231_getDate>
 8003120:	4b9f      	ldr	r3, [pc, #636]	; (80033a0 <main+0x4c8>)
 8003122:	7018      	strb	r0, [r3, #0]
		rtcMonth = DS3231_getMonth();
 8003124:	f7fe fa92 	bl	800164c <DS3231_getMonth>
 8003128:	f88b 0000 	strb.w	r0, [fp]
		rtcYear = DS3231_getYear();
 800312c:	f7fe fa9c 	bl	8001668 <DS3231_getYear>
 8003130:	4b9c      	ldr	r3, [pc, #624]	; (80033a4 <main+0x4cc>)
 8003132:	7018      	strb	r0, [r3, #0]
		rtcMinA1 = DS3231_getAlarm1Min();
 8003134:	f7fe faa6 	bl	8001684 <DS3231_getAlarm1Min>
 8003138:	4b9b      	ldr	r3, [pc, #620]	; (80033a8 <main+0x4d0>)
 800313a:	7018      	strb	r0, [r3, #0]
		rtcHrsA1 = DS3231_getAlarm1Hour();
 800313c:	f7fe fab0 	bl	80016a0 <DS3231_getAlarm1Hour>
 8003140:	4b9a      	ldr	r3, [pc, #616]	; (80033ac <main+0x4d4>)
		if (rtcSecLast != rtcSec) {
 8003142:	f898 2000 	ldrb.w	r2, [r8]
		rtcHrsA1 = DS3231_getAlarm1Hour();
 8003146:	7018      	strb	r0, [r3, #0]
		if (rtcSecLast != rtcSec) {
 8003148:	7823      	ldrb	r3, [r4, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d0d6      	beq.n	80030fc <main+0x224>
			LCD_Circle(172, 35, 8, 0, 1, HUE_14);
 800314e:	2701      	movs	r7, #1
			bme280();
 8003150:	f7ff fbce 	bl	80028f0 <bme280>
			LCD_Circle(172, 35, 8, 0, 1, HUE_14);
 8003154:	2300      	movs	r3, #0
 8003156:	2208      	movs	r2, #8
 8003158:	2123      	movs	r1, #35	; 0x23
 800315a:	20ac      	movs	r0, #172	; 0xac
 800315c:	9501      	str	r5, [sp, #4]
 800315e:	9700      	str	r7, [sp, #0]
 8003160:	f7fe ff9a 	bl	8002098 <LCD_Circle>
			LCD_Circle(172, 75, 8, 0, 1, HUE_14);
 8003164:	2300      	movs	r3, #0
 8003166:	2208      	movs	r2, #8
 8003168:	214b      	movs	r1, #75	; 0x4b
 800316a:	20ac      	movs	r0, #172	; 0xac
 800316c:	e9cd 7500 	strd	r7, r5, [sp]
 8003170:	f7fe ff92 	bl	8002098 <LCD_Circle>
			if (rtcSec % 2 != 0) {
 8003174:	7823      	ldrb	r3, [r4, #0]
 8003176:	ea13 0907 	ands.w	r9, r3, r7
 800317a:	f000 8157 	beq.w	800342c <main+0x554>
				LCD_Circle(172, 35, 7, 1, 1, HUE_14);
 800317e:	463b      	mov	r3, r7
 8003180:	2207      	movs	r2, #7
 8003182:	2123      	movs	r1, #35	; 0x23
 8003184:	20ac      	movs	r0, #172	; 0xac
 8003186:	e9cd 7500 	strd	r7, r5, [sp]
 800318a:	f7fe ff85 	bl	8002098 <LCD_Circle>
				LCD_Circle(172, 75, 7, 1, 1, HUE_14);
 800318e:	2207      	movs	r2, #7
 8003190:	214b      	movs	r1, #75	; 0x4b
 8003192:	20ac      	movs	r0, #172	; 0xac
 8003194:	463b      	mov	r3, r7
 8003196:	e9cd 7500 	strd	r7, r5, [sp]
 800319a:	f7fe ff7d 	bl	8002098 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800319e:	2200      	movs	r2, #0
 80031a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031a4:	4882      	ldr	r0, [pc, #520]	; (80033b0 <main+0x4d8>)
 80031a6:	f000 fc9b 	bl	8003ae0 <HAL_GPIO_WritePin>
			if (rtcMinLast != rtcMin) {
 80031aa:	4b82      	ldr	r3, [pc, #520]	; (80033b4 <main+0x4dc>)
 80031ac:	781a      	ldrb	r2, [r3, #0]
 80031ae:	7833      	ldrb	r3, [r6, #0]
 80031b0:	4293      	cmp	r3, r2
 80031b2:	f000 812c 	beq.w	800340e <main+0x536>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 80031b6:	2701      	movs	r7, #1
 80031b8:	f04f 0900 	mov.w	r9, #0
				sprintf(clockPrint, "%02d", rtcMinLast);
 80031bc:	497e      	ldr	r1, [pc, #504]	; (80033b8 <main+0x4e0>)
 80031be:	a806      	add	r0, sp, #24
 80031c0:	f003 f94c 	bl	800645c <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 80031c4:	4b7d      	ldr	r3, [pc, #500]	; (80033bc <main+0x4e4>)
 80031c6:	2164      	movs	r1, #100	; 0x64
 80031c8:	20b4      	movs	r0, #180	; 0xb4
 80031ca:	aa06      	add	r2, sp, #24
 80031cc:	e9cd 7900 	strd	r7, r9, [sp]
 80031d0:	f7ff f818 	bl	8002204 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcMin);
 80031d4:	7832      	ldrb	r2, [r6, #0]
 80031d6:	4978      	ldr	r1, [pc, #480]	; (80033b8 <main+0x4e0>)
 80031d8:	a806      	add	r0, sp, #24
 80031da:	f003 f93f 	bl	800645c <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, HUE_14);
 80031de:	4b77      	ldr	r3, [pc, #476]	; (80033bc <main+0x4e4>)
 80031e0:	aa06      	add	r2, sp, #24
 80031e2:	2164      	movs	r1, #100	; 0x64
 80031e4:	20b4      	movs	r0, #180	; 0xb4
 80031e6:	e9cd 7500 	strd	r7, r5, [sp]
 80031ea:	f7ff f80b 	bl	8002204 <LCD_Font>
				if (rtcHrsLast != rtcHrs) {
 80031ee:	4b74      	ldr	r3, [pc, #464]	; (80033c0 <main+0x4e8>)
 80031f0:	781a      	ldrb	r2, [r3, #0]
 80031f2:	f89a 3000 	ldrb.w	r3, [sl]
 80031f6:	4293      	cmp	r3, r2
 80031f8:	f000 8106 	beq.w	8003408 <main+0x530>
					sprintf(clockPrint, "%02d", rtcHrsLast);
 80031fc:	496e      	ldr	r1, [pc, #440]	; (80033b8 <main+0x4e0>)
 80031fe:	a806      	add	r0, sp, #24
 8003200:	f003 f92c 	bl	800645c <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8003204:	4b6d      	ldr	r3, [pc, #436]	; (80033bc <main+0x4e4>)
 8003206:	2164      	movs	r1, #100	; 0x64
 8003208:	4648      	mov	r0, r9
 800320a:	aa06      	add	r2, sp, #24
 800320c:	e9cd 7900 	strd	r7, r9, [sp]
 8003210:	f7fe fff8 	bl	8002204 <LCD_Font>
					sprintf(clockPrint, "%02d", rtcHrs);
 8003214:	f89a 2000 	ldrb.w	r2, [sl]
 8003218:	4967      	ldr	r1, [pc, #412]	; (80033b8 <main+0x4e0>)
 800321a:	a806      	add	r0, sp, #24
 800321c:	f003 f91e 	bl	800645c <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, HUE_14);
 8003220:	2164      	movs	r1, #100	; 0x64
 8003222:	4b66      	ldr	r3, [pc, #408]	; (80033bc <main+0x4e4>)
 8003224:	aa06      	add	r2, sp, #24
 8003226:	4648      	mov	r0, r9
 8003228:	e9cd 7500 	strd	r7, r5, [sp]
 800322c:	f7fe ffea 	bl	8002204 <LCD_Font>
					if (rtcDayLast != rtcDay) {
 8003230:	4b5a      	ldr	r3, [pc, #360]	; (800339c <main+0x4c4>)
 8003232:	4964      	ldr	r1, [pc, #400]	; (80033c4 <main+0x4ec>)
 8003234:	781a      	ldrb	r2, [r3, #0]
 8003236:	780b      	ldrb	r3, [r1, #0]
 8003238:	4293      	cmp	r3, r2
 800323a:	f000 808e 	beq.w	800335a <main+0x482>
						LCD_Font(2, 130, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_36, 1, BLACK);
 800323e:	4862      	ldr	r0, [pc, #392]	; (80033c8 <main+0x4f0>)
 8003240:	3205      	adds	r2, #5
 8003242:	fba0 ec02 	umull	lr, ip, r0, r2
 8003246:	2002      	movs	r0, #2
 8003248:	eba2 0e0c 	sub.w	lr, r2, ip
 800324c:	eb0c 0c5e 	add.w	ip, ip, lr, lsr #1
 8003250:	fa2c fc00 	lsr.w	ip, ip, r0
 8003254:	ebcc 0ccc 	rsb	ip, ip, ip, lsl #3
 8003258:	eba2 0c0c 	sub.w	ip, r2, ip
 800325c:	4a5b      	ldr	r2, [pc, #364]	; (80033cc <main+0x4f4>)
 800325e:	2182      	movs	r1, #130	; 0x82
 8003260:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8003264:	4b44      	ldr	r3, [pc, #272]	; (8003378 <main+0x4a0>)
 8003266:	e9cd 7900 	strd	r7, r9, [sp]
 800326a:	f7fe ffcb 	bl	8002204 <LCD_Font>
						LCD_Font(2, 130, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_36, 1, GRAY);
 800326e:	4b4b      	ldr	r3, [pc, #300]	; (800339c <main+0x4c4>)
 8003270:	9700      	str	r7, [sp, #0]
 8003272:	781a      	ldrb	r2, [r3, #0]
 8003274:	4854      	ldr	r0, [pc, #336]	; (80033c8 <main+0x4f0>)
 8003276:	3206      	adds	r2, #6
 8003278:	fba0 0302 	umull	r0, r3, r0, r2
 800327c:	1ad1      	subs	r1, r2, r3
 800327e:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	4851      	ldr	r0, [pc, #324]	; (80033d0 <main+0x4f8>)
 800328c:	4a4f      	ldr	r2, [pc, #316]	; (80033cc <main+0x4f4>)
 800328e:	2182      	movs	r1, #130	; 0x82
 8003290:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003294:	9001      	str	r0, [sp, #4]
 8003296:	4b38      	ldr	r3, [pc, #224]	; (8003378 <main+0x4a0>)
 8003298:	2002      	movs	r0, #2
 800329a:	f7fe ffb3 	bl	8002204 <LCD_Font>
						LCD_Font(260, 130, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_36, 1, BLACK);
 800329e:	f89b 3000 	ldrb.w	r3, [fp]
 80032a2:	4a4c      	ldr	r2, [pc, #304]	; (80033d4 <main+0x4fc>)
 80032a4:	330a      	adds	r3, #10
 80032a6:	fba2 c203 	umull	ip, r2, r2, r3
 80032aa:	08d2      	lsrs	r2, r2, #3
 80032ac:	f8df c128 	ldr.w	ip, [pc, #296]	; 80033d8 <main+0x500>
 80032b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80032b4:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 80032b8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80032bc:	2182      	movs	r1, #130	; 0x82
 80032be:	f44f 7082 	mov.w	r0, #260	; 0x104
 80032c2:	4b2d      	ldr	r3, [pc, #180]	; (8003378 <main+0x4a0>)
 80032c4:	e9cd 7900 	strd	r7, r9, [sp]
 80032c8:	f7fe ff9c 	bl	8002204 <LCD_Font>
						LCD_Font(260, 130, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_36, 1, GRAY);
 80032cc:	f89b 3000 	ldrb.w	r3, [fp]
 80032d0:	4a40      	ldr	r2, [pc, #256]	; (80033d4 <main+0x4fc>)
 80032d2:	330b      	adds	r3, #11
 80032d4:	fba2 e203 	umull	lr, r2, r2, r3
 80032d8:	08d2      	lsrs	r2, r2, #3
 80032da:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 80033d8 <main+0x500>
 80032de:	483c      	ldr	r0, [pc, #240]	; (80033d0 <main+0x4f8>)
 80032e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80032e4:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 80032e8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80032ec:	2182      	movs	r1, #130	; 0x82
 80032ee:	e9cd 7000 	strd	r7, r0, [sp]
 80032f2:	4b21      	ldr	r3, [pc, #132]	; (8003378 <main+0x4a0>)
 80032f4:	f44f 7082 	mov.w	r0, #260	; 0x104
 80032f8:	f7fe ff84 	bl	8002204 <LCD_Font>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 80032fc:	4a37      	ldr	r2, [pc, #220]	; (80033dc <main+0x504>)
 80032fe:	f10d 0c18 	add.w	ip, sp, #24
 8003302:	7813      	ldrb	r3, [r2, #0]
 8003304:	4a36      	ldr	r2, [pc, #216]	; (80033e0 <main+0x508>)
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	7813      	ldrb	r3, [r2, #0]
 800330a:	4a36      	ldr	r2, [pc, #216]	; (80033e4 <main+0x50c>)
 800330c:	4660      	mov	r0, ip
 800330e:	7812      	ldrb	r2, [r2, #0]
 8003310:	4935      	ldr	r1, [pc, #212]	; (80033e8 <main+0x510>)
 8003312:	f003 f8a3 	bl	800645c <siprintf>
						LCD_Font(80, 130, clockPrint, &DejaVu_Sans_36, 1, BLACK);
 8003316:	2182      	movs	r1, #130	; 0x82
 8003318:	2050      	movs	r0, #80	; 0x50
 800331a:	4b17      	ldr	r3, [pc, #92]	; (8003378 <main+0x4a0>)
 800331c:	aa06      	add	r2, sp, #24
 800331e:	e9cd 7900 	strd	r7, r9, [sp]
 8003322:	f7fe ff6f 	bl	8002204 <LCD_Font>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear);
 8003326:	4a1f      	ldr	r2, [pc, #124]	; (80033a4 <main+0x4cc>)
 8003328:	f10d 0c18 	add.w	ip, sp, #24
 800332c:	7813      	ldrb	r3, [r2, #0]
 800332e:	4a1c      	ldr	r2, [pc, #112]	; (80033a0 <main+0x4c8>)
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	4660      	mov	r0, ip
 8003334:	f89b 3000 	ldrb.w	r3, [fp]
 8003338:	7812      	ldrb	r2, [r2, #0]
 800333a:	492b      	ldr	r1, [pc, #172]	; (80033e8 <main+0x510>)
 800333c:	f003 f88e 	bl	800645c <siprintf>
						LCD_Font(80, 130, clockPrint, &DejaVu_Sans_36, 1, GRAY);
 8003340:	4823      	ldr	r0, [pc, #140]	; (80033d0 <main+0x4f8>)
 8003342:	2182      	movs	r1, #130	; 0x82
 8003344:	e9cd 7000 	strd	r7, r0, [sp]
 8003348:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <main+0x4a0>)
 800334a:	2050      	movs	r0, #80	; 0x50
 800334c:	aa06      	add	r2, sp, #24
 800334e:	f7fe ff59 	bl	8002204 <LCD_Font>
						rtcDayLast = rtcDay;
 8003352:	4b12      	ldr	r3, [pc, #72]	; (800339c <main+0x4c4>)
 8003354:	491b      	ldr	r1, [pc, #108]	; (80033c4 <main+0x4ec>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	700b      	strb	r3, [r1, #0]
					sound = 1;
 800335a:	2301      	movs	r3, #1
 800335c:	4a23      	ldr	r2, [pc, #140]	; (80033ec <main+0x514>)
 800335e:	7013      	strb	r3, [r2, #0]
					rtcDateLast = rtcDate;
 8003360:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <main+0x4c8>)
 8003362:	4a20      	ldr	r2, [pc, #128]	; (80033e4 <main+0x50c>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	7013      	strb	r3, [r2, #0]
 8003368:	e042      	b.n	80033f0 <main+0x518>
 800336a:	bf00      	nop
 800336c:	200013e8 	.word	0x200013e8
 8003370:	40003800 	.word	0x40003800
 8003374:	2000038e 	.word	0x2000038e
 8003378:	0801973c 	.word	0x0801973c
 800337c:	0800a4b0 	.word	0x0800a4b0
 8003380:	2000038f 	.word	0x2000038f
 8003384:	200014a6 	.word	0x200014a6
 8003388:	200014a2 	.word	0x200014a2
 800338c:	200014a0 	.word	0x200014a0
 8003390:	200014a4 	.word	0x200014a4
 8003394:	2000013c 	.word	0x2000013c
 8003398:	00ffbf00 	.word	0x00ffbf00
 800339c:	2000149e 	.word	0x2000149e
 80033a0:	2000149c 	.word	0x2000149c
 80033a4:	200014a7 	.word	0x200014a7
 80033a8:	200014a3 	.word	0x200014a3
 80033ac:	200014a1 	.word	0x200014a1
 80033b0:	40011000 	.word	0x40011000
 80033b4:	2000013b 	.word	0x2000013b
 80033b8:	0800a4c8 	.word	0x0800a4c8
 80033bc:	0800a52c 	.word	0x0800a52c
 80033c0:	2000013a 	.word	0x2000013a
 80033c4:	2000149f 	.word	0x2000149f
 80033c8:	24924925 	.word	0x24924925
 80033cc:	0801add0 	.word	0x0801add0
 80033d0:	007f7f7f 	.word	0x007f7f7f
 80033d4:	aaaaaaab 	.word	0xaaaaaaab
 80033d8:	0801adec 	.word	0x0801adec
 80033dc:	200014a8 	.word	0x200014a8
 80033e0:	200014a5 	.word	0x200014a5
 80033e4:	2000149d 	.word	0x2000149d
 80033e8:	0800a4d0 	.word	0x0800a4d0
 80033ec:	2000013d 	.word	0x2000013d
					rtcMonthLast = rtcMonth;
 80033f0:	f89b 3000 	ldrb.w	r3, [fp]
 80033f4:	4a19      	ldr	r2, [pc, #100]	; (800345c <main+0x584>)
 80033f6:	7013      	strb	r3, [r2, #0]
					rtcYearLast = rtcYear;
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <main+0x588>)
 80033fa:	4a1a      	ldr	r2, [pc, #104]	; (8003464 <main+0x58c>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	7013      	strb	r3, [r2, #0]
					rtcHrsLast = rtcHrs;
 8003400:	f89a 3000 	ldrb.w	r3, [sl]
 8003404:	4a18      	ldr	r2, [pc, #96]	; (8003468 <main+0x590>)
 8003406:	7013      	strb	r3, [r2, #0]
				rtcMinLast = rtcMin;
 8003408:	7833      	ldrb	r3, [r6, #0]
 800340a:	4a18      	ldr	r2, [pc, #96]	; (800346c <main+0x594>)
 800340c:	7013      	strb	r3, [r2, #0]
			rtcSecLast = rtcSec;
 800340e:	7823      	ldrb	r3, [r4, #0]
 8003410:	f888 3000 	strb.w	r3, [r8]
	{
 8003414:	e672      	b.n	80030fc <main+0x224>
			AT24XX_Update(i, 0);
 8003416:	b2a0      	uxth	r0, r4
 8003418:	2100      	movs	r1, #0
		for (uint16_t i = 0; i < 4096; i++) {
 800341a:	3401      	adds	r4, #1
			AT24XX_Update(i, 0);
 800341c:	f7fd fdd6 	bl	8000fcc <AT24XX_Update>
		for (uint16_t i = 0; i < 4096; i++) {
 8003420:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003424:	d1f7      	bne.n	8003416 <main+0x53e>
 8003426:	e63c      	b.n	80030a2 <main+0x1ca>
 8003428:	b672      	cpsid	i
	while (1)
 800342a:	e7fe      	b.n	800342a <main+0x552>
				LCD_Circle(172, 35, 7, 1, 1, BLACK);
 800342c:	463b      	mov	r3, r7
 800342e:	2207      	movs	r2, #7
 8003430:	2123      	movs	r1, #35	; 0x23
 8003432:	20ac      	movs	r0, #172	; 0xac
 8003434:	e9cd 7900 	strd	r7, r9, [sp]
 8003438:	f7fe fe2e 	bl	8002098 <LCD_Circle>
				LCD_Circle(172, 75, 7, 1, 1, BLACK);
 800343c:	214b      	movs	r1, #75	; 0x4b
 800343e:	20ac      	movs	r0, #172	; 0xac
 8003440:	463b      	mov	r3, r7
 8003442:	2207      	movs	r2, #7
 8003444:	e9cd 7900 	strd	r7, r9, [sp]
 8003448:	f7fe fe26 	bl	8002098 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800344c:	463a      	mov	r2, r7
 800344e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003452:	4807      	ldr	r0, [pc, #28]	; (8003470 <main+0x598>)
 8003454:	f000 fb44 	bl	8003ae0 <HAL_GPIO_WritePin>
 8003458:	e6a7      	b.n	80031aa <main+0x2d2>
 800345a:	bf00      	nop
 800345c:	200014a5 	.word	0x200014a5
 8003460:	200014a7 	.word	0x200014a7
 8003464:	200014a8 	.word	0x200014a8
 8003468:	2000013a 	.word	0x2000013a
 800346c:	2000013b 	.word	0x2000013b
 8003470:	40011000 	.word	0x40011000

08003474 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003474:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <HAL_MspInit+0x3c>)
{
 8003476:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003478:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800347a:	490e      	ldr	r1, [pc, #56]	; (80034b4 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800347c:	f042 0201 	orr.w	r2, r2, #1
 8003480:	619a      	str	r2, [r3, #24]
 8003482:	699a      	ldr	r2, [r3, #24]
 8003484:	f002 0201 	and.w	r2, r2, #1
 8003488:	9200      	str	r2, [sp, #0]
 800348a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800348c:	69da      	ldr	r2, [r3, #28]
 800348e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003492:	61da      	str	r2, [r3, #28]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349a:	9301      	str	r3, [sp, #4]
 800349c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800349e:	684b      	ldr	r3, [r1, #4]
 80034a0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80034a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034a8:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034aa:	b002      	add	sp, #8
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40010000 	.word	0x40010000

080034b8 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b8:	2300      	movs	r3, #0
{
 80034ba:	b5d0      	push	{r4, r6, r7, lr}
  if(hi2c->Instance==I2C1)
 80034bc:	4a14      	ldr	r2, [pc, #80]	; (8003510 <HAL_I2C_MspInit+0x58>)
 80034be:	6801      	ldr	r1, [r0, #0]
{
 80034c0:	b086      	sub	sp, #24
  if(hi2c->Instance==I2C1)
 80034c2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80034c8:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C1)
 80034cc:	d001      	beq.n	80034d2 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80034ce:	b006      	add	sp, #24
 80034d0:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034d2:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034d4:	26c0      	movs	r6, #192	; 0xc0
 80034d6:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034d8:	4c0e      	ldr	r4, [pc, #56]	; (8003514 <HAL_I2C_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034da:	480f      	ldr	r0, [pc, #60]	; (8003518 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034dc:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034de:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e0:	f043 0308 	orr.w	r3, r3, #8
 80034e4:	61a3      	str	r3, [r4, #24]
 80034e6:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034e8:	e9cd 6702 	strd	r6, r7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034f4:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f6:	f000 f9e5 	bl	80038c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034fa:	69e3      	ldr	r3, [r4, #28]
 80034fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003500:	61e3      	str	r3, [r4, #28]
 8003502:	69e3      	ldr	r3, [r4, #28]
 8003504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	9b01      	ldr	r3, [sp, #4]
}
 800350c:	b006      	add	sp, #24
 800350e:	bdd0      	pop	{r4, r6, r7, pc}
 8003510:	40005400 	.word	0x40005400
 8003514:	40021000 	.word	0x40021000
 8003518:	40010c00 	.word	0x40010c00

0800351c <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800351c:	2300      	movs	r3, #0
{
 800351e:	b530      	push	{r4, r5, lr}
  if(hspi->Instance==SPI2)
 8003520:	4a1a      	ldr	r2, [pc, #104]	; (800358c <HAL_SPI_MspInit+0x70>)
 8003522:	6801      	ldr	r1, [r0, #0]
{
 8003524:	b087      	sub	sp, #28
  if(hspi->Instance==SPI2)
 8003526:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003528:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800352c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hspi->Instance==SPI2)
 8003530:	d001      	beq.n	8003536 <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003532:	b007      	add	sp, #28
 8003534:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8003536:	f44f 44a0 	mov.w	r4, #20480	; 0x5000
    __HAL_RCC_SPI2_CLK_ENABLE();
 800353a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800353e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003542:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003544:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800354a:	61da      	str	r2, [r3, #28]
 800354c:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800354e:	4810      	ldr	r0, [pc, #64]	; (8003590 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003550:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003554:	9200      	str	r2, [sp, #0]
 8003556:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003558:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800355a:	2502      	movs	r5, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800355c:	f042 0208 	orr.w	r2, r2, #8
 8003560:	619a      	str	r2, [r3, #24]
 8003562:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8003564:	9402      	str	r4, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800356e:	f44f 4420 	mov.w	r4, #40960	; 0xa000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003572:	f000 f9a7 	bl	80038c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003576:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003578:	4805      	ldr	r0, [pc, #20]	; (8003590 <HAL_SPI_MspInit+0x74>)
 800357a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800357c:	e9cd 4502 	strd	r4, r5, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003580:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003582:	f000 f99f 	bl	80038c4 <HAL_GPIO_Init>
}
 8003586:	b007      	add	sp, #28
 8003588:	bd30      	pop	{r4, r5, pc}
 800358a:	bf00      	nop
 800358c:	40003800 	.word	0x40003800
 8003590:	40010c00 	.word	0x40010c00

08003594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003594:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003596:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8003598:	4b1a      	ldr	r3, [pc, #104]	; (8003604 <HAL_UART_MspInit+0x70>)
 800359a:	6802      	ldr	r2, [r0, #0]
{
 800359c:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 800359e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80035a4:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 80035a8:	d001      	beq.n	80035ae <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80035aa:	b006      	add	sp, #24
 80035ac:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80035ae:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80035b2:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80035b4:	f44f 7600 	mov.w	r6, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 80035b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035bc:	619a      	str	r2, [r3, #24]
 80035be:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80035c0:	2702      	movs	r7, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 80035c2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80035c6:	9200      	str	r2, [sp, #0]
 80035c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ca:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035cc:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ce:	f042 0204 	orr.w	r2, r2, #4
 80035d2:	619a      	str	r2, [r3, #24]
 80035d4:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d6:	480c      	ldr	r0, [pc, #48]	; (8003608 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035de:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e0:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035e2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80035e4:	e9cd 6702 	strd	r6, r7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e8:	f000 f96c 	bl	80038c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035f0:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f2:	4805      	ldr	r0, [pc, #20]	; (8003608 <HAL_UART_MspInit+0x74>)
 80035f4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fa:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fc:	f000 f962 	bl	80038c4 <HAL_GPIO_Init>
}
 8003600:	b006      	add	sp, #24
 8003602:	bdd0      	pop	{r4, r6, r7, pc}
 8003604:	40013800 	.word	0x40013800
 8003608:	40010800 	.word	0x40010800

0800360c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800360c:	e7fe      	b.n	800360c <NMI_Handler>
 800360e:	bf00      	nop

08003610 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003610:	e7fe      	b.n	8003610 <HardFault_Handler>
 8003612:	bf00      	nop

08003614 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003614:	e7fe      	b.n	8003614 <MemManage_Handler>
 8003616:	bf00      	nop

08003618 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003618:	e7fe      	b.n	8003618 <BusFault_Handler>
 800361a:	bf00      	nop

0800361c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800361c:	e7fe      	b.n	800361c <UsageFault_Handler>
 800361e:	bf00      	nop

08003620 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop

08003624 <DebugMon_Handler>:
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop

08003628 <PendSV_Handler>:
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop

0800362c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800362c:	f000 b8be 	b.w	80037ac <HAL_IncTick>

08003630 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003630:	2001      	movs	r0, #1
 8003632:	4770      	bx	lr

08003634 <_kill>:

int _kill(int pid, int sig)
{
 8003634:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003636:	f002 f853 	bl	80056e0 <__errno>
 800363a:	2216      	movs	r2, #22
 800363c:	4603      	mov	r3, r0
	return -1;
}
 800363e:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8003642:	601a      	str	r2, [r3, #0]
}
 8003644:	bd08      	pop	{r3, pc}
 8003646:	bf00      	nop

08003648 <_exit>:

void _exit (int status)
{
 8003648:	b508      	push	{r3, lr}
	errno = EINVAL;
 800364a:	f002 f849 	bl	80056e0 <__errno>
 800364e:	2316      	movs	r3, #22
 8003650:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8003652:	e7fe      	b.n	8003652 <_exit+0xa>

08003654 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003654:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003656:	1e16      	subs	r6, r2, #0
 8003658:	dd07      	ble.n	800366a <_read+0x16>
 800365a:	460c      	mov	r4, r1
 800365c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800365e:	f3af 8000 	nop.w
 8003662:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003666:	42a5      	cmp	r5, r4
 8003668:	d1f9      	bne.n	800365e <_read+0xa>
	}

return len;
}
 800366a:	4630      	mov	r0, r6
 800366c:	bd70      	pop	{r4, r5, r6, pc}
 800366e:	bf00      	nop

08003670 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003670:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003672:	1e16      	subs	r6, r2, #0
 8003674:	dd07      	ble.n	8003686 <_write+0x16>
 8003676:	460c      	mov	r4, r1
 8003678:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800367a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800367e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003682:	42ac      	cmp	r4, r5
 8003684:	d1f9      	bne.n	800367a <_write+0xa>
	}
	return len;
}
 8003686:	4630      	mov	r0, r6
 8003688:	bd70      	pop	{r4, r5, r6, pc}
 800368a:	bf00      	nop

0800368c <_close>:

int _close(int file)
{
	return -1;
}
 800368c:	f04f 30ff 	mov.w	r0, #4294967295
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop

08003694 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8003698:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800369a:	604b      	str	r3, [r1, #4]
}
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop

080036a0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80036a0:	2001      	movs	r0, #1
 80036a2:	4770      	bx	lr

080036a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80036a4:	2000      	movs	r0, #0
 80036a6:	4770      	bx	lr

080036a8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036a8:	490d      	ldr	r1, [pc, #52]	; (80036e0 <_sbrk+0x38>)
{
 80036aa:	4603      	mov	r3, r0
 80036ac:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036ae:	4a0d      	ldr	r2, [pc, #52]	; (80036e4 <_sbrk+0x3c>)
 80036b0:	4c0d      	ldr	r4, [pc, #52]	; (80036e8 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80036b2:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036b4:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80036b6:	b120      	cbz	r0, 80036c2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036b8:	4403      	add	r3, r0
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d807      	bhi.n	80036ce <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80036be:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80036c0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80036c2:	4c0a      	ldr	r4, [pc, #40]	; (80036ec <_sbrk+0x44>)
 80036c4:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 80036c6:	4403      	add	r3, r0
 80036c8:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 80036ca:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80036cc:	d9f7      	bls.n	80036be <_sbrk+0x16>
    errno = ENOMEM;
 80036ce:	f002 f807 	bl	80056e0 <__errno>
 80036d2:	220c      	movs	r2, #12
 80036d4:	4603      	mov	r3, r0
    return (void *)-1;
 80036d6:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 80036da:	601a      	str	r2, [r3, #0]
}
 80036dc:	bd10      	pop	{r4, pc}
 80036de:	bf00      	nop
 80036e0:	200014c0 	.word	0x200014c0
 80036e4:	20005000 	.word	0x20005000
 80036e8:	00000400 	.word	0x00000400
 80036ec:	200014d8 	.word	0x200014d8

080036f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036f0:	480c      	ldr	r0, [pc, #48]	; (8003724 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036f2:	490d      	ldr	r1, [pc, #52]	; (8003728 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036f4:	4a0d      	ldr	r2, [pc, #52]	; (800372c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036f8:	e002      	b.n	8003700 <LoopCopyDataInit>

080036fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036fe:	3304      	adds	r3, #4

08003700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003704:	d3f9      	bcc.n	80036fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003706:	4a0a      	ldr	r2, [pc, #40]	; (8003730 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003708:	4c0a      	ldr	r4, [pc, #40]	; (8003734 <LoopFillZerobss+0x22>)
  movs r3, #0
 800370a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800370c:	e001      	b.n	8003712 <LoopFillZerobss>

0800370e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800370e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003710:	3204      	adds	r2, #4

08003712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003714:	d3fb      	bcc.n	800370e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003716:	f000 f811 	bl	800373c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800371a:	f001 ffe7 	bl	80056ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800371e:	f7ff fbdb 	bl	8002ed8 <main>
  bx lr
 8003722:	4770      	bx	lr
  ldr r0, =_sdata
 8003724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003728:	20000320 	.word	0x20000320
  ldr r2, =_sidata
 800372c:	0801b328 	.word	0x0801b328
  ldr r2, =_sbss
 8003730:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8003734:	200014d8 	.word	0x200014d8

08003738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003738:	e7fe      	b.n	8003738 <ADC1_2_IRQHandler>
	...

0800373c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop

08003740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003740:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003746:	4a0d      	ldr	r2, [pc, #52]	; (800377c <HAL_InitTick+0x3c>)
{
 8003748:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800374a:	7811      	ldrb	r1, [r2, #0]
 800374c:	4a0c      	ldr	r2, [pc, #48]	; (8003780 <HAL_InitTick+0x40>)
 800374e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003752:	6812      	ldr	r2, [r2, #0]
 8003754:	fbb2 f0f3 	udiv	r0, r2, r3
 8003758:	f000 f89c 	bl	8003894 <HAL_SYSTICK_Config>
 800375c:	b908      	cbnz	r0, 8003762 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800375e:	2d0f      	cmp	r5, #15
 8003760:	d901      	bls.n	8003766 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8003762:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003764:	bd38      	pop	{r3, r4, r5, pc}
 8003766:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003768:	4602      	mov	r2, r0
 800376a:	4629      	mov	r1, r5
 800376c:	f04f 30ff 	mov.w	r0, #4294967295
 8003770:	f000 f852 	bl	8003818 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003774:	4b03      	ldr	r3, [pc, #12]	; (8003784 <HAL_InitTick+0x44>)
 8003776:	4620      	mov	r0, r4
 8003778:	601d      	str	r5, [r3, #0]
}
 800377a:	bd38      	pop	{r3, r4, r5, pc}
 800377c:	20000144 	.word	0x20000144
 8003780:	20000140 	.word	0x20000140
 8003784:	20000148 	.word	0x20000148

08003788 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003788:	4a07      	ldr	r2, [pc, #28]	; (80037a8 <HAL_Init+0x20>)
{
 800378a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800378c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800378e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003790:	f043 0310 	orr.w	r3, r3, #16
 8003794:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003796:	f000 f82d 	bl	80037f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800379a:	200f      	movs	r0, #15
 800379c:	f7ff ffd0 	bl	8003740 <HAL_InitTick>
  HAL_MspInit();
 80037a0:	f7ff fe68 	bl	8003474 <HAL_MspInit>
}
 80037a4:	2000      	movs	r0, #0
 80037a6:	bd08      	pop	{r3, pc}
 80037a8:	40022000 	.word	0x40022000

080037ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80037ac:	4a03      	ldr	r2, [pc, #12]	; (80037bc <HAL_IncTick+0x10>)
 80037ae:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <HAL_IncTick+0x14>)
 80037b0:	6811      	ldr	r1, [r2, #0]
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	440b      	add	r3, r1
 80037b6:	6013      	str	r3, [r2, #0]
}
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	200014c4 	.word	0x200014c4
 80037c0:	20000144 	.word	0x20000144

080037c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80037c4:	4b01      	ldr	r3, [pc, #4]	; (80037cc <HAL_GetTick+0x8>)
 80037c6:	6818      	ldr	r0, [r3, #0]
}
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	200014c4 	.word	0x200014c4

080037d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037d0:	b538      	push	{r3, r4, r5, lr}
 80037d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80037d4:	f7ff fff6 	bl	80037c4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037d8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80037da:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80037dc:	d002      	beq.n	80037e4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80037de:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <HAL_Delay+0x20>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037e4:	f7ff ffee 	bl	80037c4 <HAL_GetTick>
 80037e8:	1b40      	subs	r0, r0, r5
 80037ea:	42a0      	cmp	r0, r4
 80037ec:	d3fa      	bcc.n	80037e4 <HAL_Delay+0x14>
  {
  }
}
 80037ee:	bd38      	pop	{r3, r4, r5, pc}
 80037f0:	20000144 	.word	0x20000144

080037f4 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037f4:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037f8:	4906      	ldr	r1, [pc, #24]	; (8003814 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037fa:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037fc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003802:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800380c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003810:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003812:	4770      	bx	lr
 8003814:	e000ed00 	.word	0xe000ed00

08003818 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003818:	4b1c      	ldr	r3, [pc, #112]	; (800388c <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800381a:	b500      	push	{lr}
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003822:	f1c3 0e07 	rsb	lr, r3, #7
 8003826:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800382a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800382e:	bf28      	it	cs
 8003830:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003834:	f1bc 0f06 	cmp.w	ip, #6
 8003838:	d91b      	bls.n	8003872 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800383a:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800383e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003840:	fa0c fc03 	lsl.w	ip, ip, r3
 8003844:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003848:	f04f 3cff 	mov.w	ip, #4294967295
 800384c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003850:	ea21 010c 	bic.w	r1, r1, ip
 8003854:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003856:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003858:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800385c:	db0c      	blt.n	8003878 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385e:	0109      	lsls	r1, r1, #4
 8003860:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003864:	b2c9      	uxtb	r1, r1
 8003866:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800386a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800386e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003872:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003874:	4613      	mov	r3, r2
 8003876:	e7e7      	b.n	8003848 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_NVIC_SetPriority+0x78>)
 800387a:	f000 000f 	and.w	r0, r0, #15
 800387e:	0109      	lsls	r1, r1, #4
 8003880:	b2c9      	uxtb	r1, r1
 8003882:	4403      	add	r3, r0
 8003884:	7619      	strb	r1, [r3, #24]
 8003886:	f85d fb04 	ldr.w	pc, [sp], #4
 800388a:	bf00      	nop
 800388c:	e000ed00 	.word	0xe000ed00
 8003890:	e000ecfc 	.word	0xe000ecfc

08003894 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003894:	3801      	subs	r0, #1
 8003896:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800389a:	d20f      	bcs.n	80038bc <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800389c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a0:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a4:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038a6:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038a8:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038aa:	4c05      	ldr	r4, [pc, #20]	; (80038c0 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ac:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ae:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038b2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038b4:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80038b6:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038b8:	6119      	str	r1, [r3, #16]
 80038ba:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80038bc:	2001      	movs	r0, #1
 80038be:	4770      	bx	lr
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038c8:	680e      	ldr	r6, [r1, #0]
{
 80038ca:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038cc:	2e00      	cmp	r6, #0
 80038ce:	f000 80b5 	beq.w	8003a3c <HAL_GPIO_Init+0x178>
 80038d2:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038d4:	4f7a      	ldr	r7, [pc, #488]	; (8003ac0 <HAL_GPIO_Init+0x1fc>)
  uint32_t config = 0x00u;
 80038d6:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 80038d8:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038da:	4d7a      	ldr	r5, [pc, #488]	; (8003ac4 <HAL_GPIO_Init+0x200>)
      switch (GPIO_Init->Mode)
 80038dc:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8003ac8 <HAL_GPIO_Init+0x204>
 80038e0:	e006      	b.n	80038f0 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 80038e2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038e4:	fa36 f403 	lsrs.w	r4, r6, r3
 80038e8:	f102 0204 	add.w	r2, r2, #4
 80038ec:	f000 80a6 	beq.w	8003a3c <HAL_GPIO_Init+0x178>
    ioposition = (0x01uL << position);
 80038f0:	2401      	movs	r4, #1
 80038f2:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 80038f4:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038f8:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 80038fc:	d1f1      	bne.n	80038e2 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 80038fe:	684e      	ldr	r6, [r1, #4]
 8003900:	2e12      	cmp	r6, #18
 8003902:	f200 809e 	bhi.w	8003a42 <HAL_GPIO_Init+0x17e>
 8003906:	2e12      	cmp	r6, #18
 8003908:	d81a      	bhi.n	8003940 <HAL_GPIO_Init+0x7c>
 800390a:	e8df f006 	tbb	[pc, r6]
 800390e:	b9a7      	.short	0xb9a7
 8003910:	1919ceb5 	.word	0x1919ceb5
 8003914:	19191919 	.word	0x19191919
 8003918:	19191919 	.word	0x19191919
 800391c:	b1191919 	.word	0xb1191919
 8003920:	bc          	.byte	0xbc
 8003921:	00          	.byte	0x00
 8003922:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8003acc <HAL_GPIO_Init+0x208>
 8003926:	4576      	cmp	r6, lr
 8003928:	f000 8098 	beq.w	8003a5c <HAL_GPIO_Init+0x198>
 800392c:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8003930:	4576      	cmp	r6, lr
 8003932:	f000 8093 	beq.w	8003a5c <HAL_GPIO_Init+0x198>
 8003936:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800393a:	4576      	cmp	r6, lr
 800393c:	f000 808e 	beq.w	8003a5c <HAL_GPIO_Init+0x198>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003940:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8003944:	bf9c      	itt	ls
 8003946:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003948:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800394a:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800394e:	bf84      	itt	hi
 8003950:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003954:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003958:	f8de 4000 	ldr.w	r4, [lr]
 800395c:	fa0a f90b 	lsl.w	r9, sl, fp
 8003960:	fa06 fb0b 	lsl.w	fp, r6, fp
 8003964:	ea24 040b 	bic.w	r4, r4, fp
 8003968:	ea44 0409 	orr.w	r4, r4, r9
 800396c:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003970:	684c      	ldr	r4, [r1, #4]
 8003972:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8003976:	d079      	beq.n	8003a6c <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003978:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800397c:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003980:	f04e 0e01 	orr.w	lr, lr, #1
 8003984:	f8c7 e018 	str.w	lr, [r7, #24]
 8003988:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800398c:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003990:	f00e 0e01 	and.w	lr, lr, #1
 8003994:	f8cd e004 	str.w	lr, [sp, #4]
 8003998:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800399c:	f023 0e03 	bic.w	lr, r3, #3
 80039a0:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 80039a4:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 80039a8:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80039ac:	fa06 f609 	lsl.w	r6, r6, r9
 80039b0:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80039b4:	f8df b118 	ldr.w	fp, [pc, #280]	; 8003ad0 <HAL_GPIO_Init+0x20c>
 80039b8:	4558      	cmp	r0, fp
 80039ba:	d013      	beq.n	80039e4 <HAL_GPIO_Init+0x120>
 80039bc:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 80039c0:	4558      	cmp	r0, fp
 80039c2:	d06b      	beq.n	8003a9c <HAL_GPIO_Init+0x1d8>
 80039c4:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8003ad4 <HAL_GPIO_Init+0x210>
 80039c8:	4558      	cmp	r0, fp
 80039ca:	d060      	beq.n	8003a8e <HAL_GPIO_Init+0x1ca>
 80039cc:	f8df b108 	ldr.w	fp, [pc, #264]	; 8003ad8 <HAL_GPIO_Init+0x214>
 80039d0:	4558      	cmp	r0, fp
 80039d2:	bf0c      	ite	eq
 80039d4:	f04f 0b03 	moveq.w	fp, #3
 80039d8:	f04f 0b04 	movne.w	fp, #4
 80039dc:	fa0b f909 	lsl.w	r9, fp, r9
 80039e0:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80039e4:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80039e8:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039ea:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80039ee:	bf14      	ite	ne
 80039f0:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80039f4:	ea26 060c 	biceq.w	r6, r6, ip
 80039f8:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80039fa:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039fc:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8003a00:	bf14      	ite	ne
 8003a02:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a06:	ea26 060c 	biceq.w	r6, r6, ip
 8003a0a:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a0c:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a0e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a12:	bf14      	ite	ne
 8003a14:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a18:	ea26 060c 	biceq.w	r6, r6, ip
 8003a1c:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a1e:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a22:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a24:	d01f      	beq.n	8003a66 <HAL_GPIO_Init+0x1a2>
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a26:	ea44 040c 	orr.w	r4, r4, ip
 8003a2a:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a2c:	680e      	ldr	r6, [r1, #0]
	position++;
 8003a2e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a30:	fa36 f403 	lsrs.w	r4, r6, r3
 8003a34:	f102 0204 	add.w	r2, r2, #4
 8003a38:	f47f af5a 	bne.w	80038f0 <HAL_GPIO_Init+0x2c>
  }
}
 8003a3c:	b003      	add	sp, #12
 8003a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8003a42:	4546      	cmp	r6, r8
 8003a44:	d00a      	beq.n	8003a5c <HAL_GPIO_Init+0x198>
 8003a46:	f67f af6c 	bls.w	8003922 <HAL_GPIO_Init+0x5e>
 8003a4a:	f8df e090 	ldr.w	lr, [pc, #144]	; 8003adc <HAL_GPIO_Init+0x218>
 8003a4e:	4576      	cmp	r6, lr
 8003a50:	d004      	beq.n	8003a5c <HAL_GPIO_Init+0x198>
 8003a52:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8003a56:	4576      	cmp	r6, lr
 8003a58:	f47f af72 	bne.w	8003940 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a5c:	688e      	ldr	r6, [r1, #8]
 8003a5e:	bb3e      	cbnz	r6, 8003ab0 <HAL_GPIO_Init+0x1ec>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a60:	f04f 0a04 	mov.w	sl, #4
 8003a64:	e76c      	b.n	8003940 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a66:	ea24 040c 	bic.w	r4, r4, ip
 8003a6a:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a6c:	680e      	ldr	r6, [r1, #0]
 8003a6e:	e738      	b.n	80038e2 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a70:	68cc      	ldr	r4, [r1, #12]
 8003a72:	f104 0a04 	add.w	sl, r4, #4
          break;
 8003a76:	e763      	b.n	8003940 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a78:	68cc      	ldr	r4, [r1, #12]
 8003a7a:	f104 0a08 	add.w	sl, r4, #8
          break;
 8003a7e:	e75f      	b.n	8003940 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a80:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8003a84:	e75c      	b.n	8003940 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a86:	68cc      	ldr	r4, [r1, #12]
 8003a88:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8003a8c:	e758      	b.n	8003940 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a8e:	f04f 0b02 	mov.w	fp, #2
 8003a92:	fa0b f909 	lsl.w	r9, fp, r9
 8003a96:	ea46 0609 	orr.w	r6, r6, r9
 8003a9a:	e7a3      	b.n	80039e4 <HAL_GPIO_Init+0x120>
 8003a9c:	f04f 0b01 	mov.w	fp, #1
 8003aa0:	fa0b f909 	lsl.w	r9, fp, r9
 8003aa4:	ea46 0609 	orr.w	r6, r6, r9
 8003aa8:	e79c      	b.n	80039e4 <HAL_GPIO_Init+0x120>
      switch (GPIO_Init->Mode)
 8003aaa:	f04f 0a00 	mov.w	sl, #0
 8003aae:	e747      	b.n	8003940 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ab0:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ab2:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8003ab6:	bf0c      	ite	eq
 8003ab8:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8003aba:	6144      	strne	r4, [r0, #20]
 8003abc:	e740      	b.n	8003940 <HAL_GPIO_Init+0x7c>
 8003abe:	bf00      	nop
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	40010400 	.word	0x40010400
 8003ac8:	10220000 	.word	0x10220000
 8003acc:	10120000 	.word	0x10120000
 8003ad0:	40010800 	.word	0x40010800
 8003ad4:	40011000 	.word	0x40011000
 8003ad8:	40011400 	.word	0x40011400
 8003adc:	10310000 	.word	0x10310000

08003ae0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ae0:	b902      	cbnz	r2, 8003ae4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ae2:	0409      	lsls	r1, r1, #16
 8003ae4:	6101      	str	r1, [r0, #16]
  }
}
 8003ae6:	4770      	bx	lr

08003ae8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aec:	4606      	mov	r6, r0
 8003aee:	468a      	mov	sl, r1
 8003af0:	4617      	mov	r7, r2
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003af2:	6804      	ldr	r4, [r0, #0]
{
 8003af4:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003af6:	6823      	ldr	r3, [r4, #0]
{
 8003af8:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afe:	6023      	str	r3, [r4, #0]
{
 8003b00:	e9dd 9b0c 	ldrd	r9, fp, [sp, #48]	; 0x30
 8003b04:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003b08:	d136      	bne.n	8003b78 <I2C_RequestMemoryWrite+0x90>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b0a:	6965      	ldr	r5, [r4, #20]
 8003b0c:	07e8      	lsls	r0, r5, #31
 8003b0e:	d5fc      	bpl.n	8003b0a <I2C_RequestMemoryWrite+0x22>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b10:	f00a 01fe 	and.w	r1, sl, #254	; 0xfe
 8003b14:	6121      	str	r1, [r4, #16]
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8003b16:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003b1a:	d003      	beq.n	8003b24 <I2C_RequestMemoryWrite+0x3c>
 8003b1c:	e052      	b.n	8003bc4 <I2C_RequestMemoryWrite+0xdc>
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b1e:	6961      	ldr	r1, [r4, #20]
 8003b20:	054d      	lsls	r5, r1, #21
 8003b22:	d460      	bmi.n	8003be6 <I2C_RequestMemoryWrite+0xfe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b24:	6961      	ldr	r1, [r4, #20]
 8003b26:	078b      	lsls	r3, r1, #30
 8003b28:	d5f9      	bpl.n	8003b1e <I2C_RequestMemoryWrite+0x36>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	9301      	str	r3, [sp, #4]
 8003b2e:	6963      	ldr	r3, [r4, #20]
 8003b30:	9301      	str	r3, [sp, #4]
 8003b32:	69a3      	ldr	r3, [r4, #24]
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b38:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003b3c:	f040 80a4 	bne.w	8003c88 <I2C_RequestMemoryWrite+0x1a0>
 8003b40:	6963      	ldr	r3, [r4, #20]
 8003b42:	061a      	lsls	r2, r3, #24
 8003b44:	d467      	bmi.n	8003c16 <I2C_RequestMemoryWrite+0x12e>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b46:	6963      	ldr	r3, [r4, #20]
 8003b48:	055b      	lsls	r3, r3, #21
 8003b4a:	d5f9      	bpl.n	8003b40 <I2C_RequestMemoryWrite+0x58>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b4c:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b4e:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b50:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8003b54:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b56:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b58:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b5c:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b60:	6c33      	ldr	r3, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b62:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b66:	f043 0304 	orr.w	r3, r3, #4
 8003b6a:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b6c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	f000 8083 	beq.w	8003c7a <I2C_RequestMemoryWrite+0x192>
    return HAL_ERROR;
 8003b74:	2001      	movs	r0, #1
 8003b76:	e04b      	b.n	8003c10 <I2C_RequestMemoryWrite+0x128>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b78:	6963      	ldr	r3, [r4, #20]
 8003b7a:	07d9      	lsls	r1, r3, #31
 8003b7c:	d4c8      	bmi.n	8003b10 <I2C_RequestMemoryWrite+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7e:	f7ff fe21 	bl	80037c4 <HAL_GetTick>
 8003b82:	eba0 000b 	sub.w	r0, r0, fp
 8003b86:	4581      	cmp	r9, r0
 8003b88:	d304      	bcc.n	8003b94 <I2C_RequestMemoryWrite+0xac>
 8003b8a:	f1b9 0f00 	cmp.w	r9, #0
 8003b8e:	d001      	beq.n	8003b94 <I2C_RequestMemoryWrite+0xac>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b90:	6834      	ldr	r4, [r6, #0]
 8003b92:	e7b7      	b.n	8003b04 <I2C_RequestMemoryWrite+0x1c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b94:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b96:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b98:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b9a:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b9e:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ba2:	6c33      	ldr	r3, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ba4:	6831      	ldr	r1, [r6, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ba6:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003baa:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bae:	6433      	str	r3, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bb0:	680b      	ldr	r3, [r1, #0]
 8003bb2:	05dc      	lsls	r4, r3, #23
 8003bb4:	d538      	bpl.n	8003c28 <I2C_RequestMemoryWrite+0x140>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bb6:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8003bba:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bbc:	6433      	str	r3, [r6, #64]	; 0x40
}
 8003bbe:	b003      	add	sp, #12
 8003bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bc4:	6963      	ldr	r3, [r4, #20]
 8003bc6:	0798      	lsls	r0, r3, #30
 8003bc8:	d4af      	bmi.n	8003b2a <I2C_RequestMemoryWrite+0x42>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bca:	6963      	ldr	r3, [r4, #20]
 8003bcc:	055a      	lsls	r2, r3, #21
 8003bce:	d40a      	bmi.n	8003be6 <I2C_RequestMemoryWrite+0xfe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd0:	f7ff fdf8 	bl	80037c4 <HAL_GetTick>
 8003bd4:	eba0 000b 	sub.w	r0, r0, fp
 8003bd8:	4581      	cmp	r9, r0
 8003bda:	d367      	bcc.n	8003cac <I2C_RequestMemoryWrite+0x1c4>
 8003bdc:	f1b9 0f00 	cmp.w	r9, #0
 8003be0:	d064      	beq.n	8003cac <I2C_RequestMemoryWrite+0x1c4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003be2:	6834      	ldr	r4, [r6, #0]
 8003be4:	e797      	b.n	8003b16 <I2C_RequestMemoryWrite+0x2e>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003be6:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be8:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bec:	2120      	movs	r1, #32
    return HAL_ERROR;
 8003bee:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bf6:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bf8:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bfa:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bfc:	f886 103d 	strb.w	r1, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c00:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c04:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003c06:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c0a:	f043 0304 	orr.w	r3, r3, #4
 8003c0e:	6433      	str	r3, [r6, #64]	; 0x40
}
 8003c10:	b003      	add	sp, #12
 8003c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c16:	f1b8 0f01 	cmp.w	r8, #1
 8003c1a:	d109      	bne.n	8003c30 <I2C_RequestMemoryWrite+0x148>
  return HAL_OK;
 8003c1c:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c1e:	b2ff      	uxtb	r7, r7
 8003c20:	6127      	str	r7, [r4, #16]
}
 8003c22:	b003      	add	sp, #12
 8003c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_TIMEOUT;
 8003c28:	2003      	movs	r0, #3
}
 8003c2a:	b003      	add	sp, #12
 8003c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c30:	0a3b      	lsrs	r3, r7, #8
 8003c32:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c34:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003c38:	d147      	bne.n	8003cca <I2C_RequestMemoryWrite+0x1e2>
 8003c3a:	6963      	ldr	r3, [r4, #20]
 8003c3c:	0619      	lsls	r1, r3, #24
 8003c3e:	d4ed      	bmi.n	8003c1c <I2C_RequestMemoryWrite+0x134>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c40:	6963      	ldr	r3, [r4, #20]
 8003c42:	055a      	lsls	r2, r3, #21
 8003c44:	d5f9      	bpl.n	8003c3a <I2C_RequestMemoryWrite+0x152>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c46:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c48:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c4a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8003c4e:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c50:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c52:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c56:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c5a:	6c33      	ldr	r3, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003c5c:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c60:	f043 0304 	orr.w	r3, r3, #4
 8003c64:	6433      	str	r3, [r6, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c66:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d183      	bne.n	8003b74 <I2C_RequestMemoryWrite+0x8c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6c:	6832      	ldr	r2, [r6, #0]
      return HAL_ERROR;
 8003c6e:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c70:	6813      	ldr	r3, [r2, #0]
 8003c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	e7ca      	b.n	8003c10 <I2C_RequestMemoryWrite+0x128>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7a:	6832      	ldr	r2, [r6, #0]
    return HAL_ERROR;
 8003c7c:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7e:	6813      	ldr	r3, [r2, #0]
 8003c80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e7c3      	b.n	8003c10 <I2C_RequestMemoryWrite+0x128>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c88:	6963      	ldr	r3, [r4, #20]
 8003c8a:	061d      	lsls	r5, r3, #24
 8003c8c:	d4c3      	bmi.n	8003c16 <I2C_RequestMemoryWrite+0x12e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c8e:	6963      	ldr	r3, [r4, #20]
 8003c90:	0559      	lsls	r1, r3, #21
 8003c92:	f53f af5b 	bmi.w	8003b4c <I2C_RequestMemoryWrite+0x64>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c96:	f7ff fd95 	bl	80037c4 <HAL_GetTick>
 8003c9a:	eba0 030b 	sub.w	r3, r0, fp
 8003c9e:	4599      	cmp	r9, r3
 8003ca0:	d324      	bcc.n	8003cec <I2C_RequestMemoryWrite+0x204>
 8003ca2:	f1b9 0f00 	cmp.w	r9, #0
 8003ca6:	d021      	beq.n	8003cec <I2C_RequestMemoryWrite+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ca8:	6834      	ldr	r4, [r6, #0]
 8003caa:	e745      	b.n	8003b38 <I2C_RequestMemoryWrite+0x50>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cac:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cae:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb0:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cb2:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb6:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cba:	6c33      	ldr	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 8003cbc:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cbe:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003cc2:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc6:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003cc8:	e7a2      	b.n	8003c10 <I2C_RequestMemoryWrite+0x128>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cca:	6963      	ldr	r3, [r4, #20]
 8003ccc:	061b      	lsls	r3, r3, #24
 8003cce:	d4a5      	bmi.n	8003c1c <I2C_RequestMemoryWrite+0x134>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cd0:	6963      	ldr	r3, [r4, #20]
 8003cd2:	0558      	lsls	r0, r3, #21
 8003cd4:	d4b7      	bmi.n	8003c46 <I2C_RequestMemoryWrite+0x15e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd6:	f7ff fd75 	bl	80037c4 <HAL_GetTick>
 8003cda:	eba0 030b 	sub.w	r3, r0, fp
 8003cde:	4599      	cmp	r9, r3
 8003ce0:	d312      	bcc.n	8003d08 <I2C_RequestMemoryWrite+0x220>
 8003ce2:	f1b9 0f00 	cmp.w	r9, #0
 8003ce6:	d00f      	beq.n	8003d08 <I2C_RequestMemoryWrite+0x220>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ce8:	6834      	ldr	r4, [r6, #0]
 8003cea:	e7a3      	b.n	8003c34 <I2C_RequestMemoryWrite+0x14c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003cec:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003cee:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003cf0:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003cf2:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cf6:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cfa:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003cfc:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d00:	f043 0320 	orr.w	r3, r3, #32
 8003d04:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003d06:	e731      	b.n	8003b6c <I2C_RequestMemoryWrite+0x84>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d08:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d0a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d0c:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d0e:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d12:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d16:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003d18:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d1c:	f043 0320 	orr.w	r3, r3, #32
 8003d20:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003d22:	e7a0      	b.n	8003c66 <I2C_RequestMemoryWrite+0x17e>

08003d24 <I2C_RequestMemoryRead>:
{
 8003d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d28:	4606      	mov	r6, r0
 8003d2a:	468b      	mov	fp, r1
 8003d2c:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2e:	6804      	ldr	r4, [r0, #0]
{
 8003d30:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d32:	6823      	ldr	r3, [r4, #0]
{
 8003d34:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d3a:	6023      	str	r3, [r4, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d3c:	6823      	ldr	r3, [r4, #0]
{
 8003d3e:	e9dd a90c 	ldrd	sl, r9, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d46:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8003d48:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003d4c:	d139      	bne.n	8003dc2 <I2C_RequestMemoryRead+0x9e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d4e:	6965      	ldr	r5, [r4, #20]
 8003d50:	07eb      	lsls	r3, r5, #31
 8003d52:	d5fc      	bpl.n	8003d4e <I2C_RequestMemoryRead+0x2a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d54:	f00b 03fe 	and.w	r3, fp, #254	; 0xfe
 8003d58:	6123      	str	r3, [r4, #16]
 8003d5a:	fa5f fb8b 	uxtb.w	fp, fp
 8003d5e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003d62:	d003      	beq.n	8003d6c <I2C_RequestMemoryRead+0x48>
 8003d64:	e06b      	b.n	8003e3e <I2C_RequestMemoryRead+0x11a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d66:	6961      	ldr	r1, [r4, #20]
 8003d68:	054a      	lsls	r2, r1, #21
 8003d6a:	d450      	bmi.n	8003e0e <I2C_RequestMemoryRead+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d6c:	6961      	ldr	r1, [r4, #20]
 8003d6e:	0789      	lsls	r1, r1, #30
 8003d70:	d5f9      	bpl.n	8003d66 <I2C_RequestMemoryRead+0x42>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d72:	2300      	movs	r3, #0
 8003d74:	9301      	str	r3, [sp, #4]
 8003d76:	6963      	ldr	r3, [r4, #20]
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	69a3      	ldr	r3, [r4, #24]
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d80:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003d84:	f040 80bf 	bne.w	8003f06 <I2C_RequestMemoryRead+0x1e2>
 8003d88:	6963      	ldr	r3, [r4, #20]
 8003d8a:	0618      	lsls	r0, r3, #24
 8003d8c:	d46a      	bmi.n	8003e64 <I2C_RequestMemoryRead+0x140>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d8e:	6963      	ldr	r3, [r4, #20]
 8003d90:	0559      	lsls	r1, r3, #21
 8003d92:	d5f9      	bpl.n	8003d88 <I2C_RequestMemoryRead+0x64>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d94:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d96:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d98:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8003d9c:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9e:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003da0:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da4:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003da8:	6c33      	ldr	r3, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003daa:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dae:	f043 0304 	orr.w	r3, r3, #4
 8003db2:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003db4:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d073      	beq.n	8003ea2 <I2C_RequestMemoryRead+0x17e>
    return HAL_ERROR;
 8003dba:	2001      	movs	r0, #1
}
 8003dbc:	b003      	add	sp, #12
 8003dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dc2:	6963      	ldr	r3, [r4, #20]
 8003dc4:	07dd      	lsls	r5, r3, #31
 8003dc6:	d4c5      	bmi.n	8003d54 <I2C_RequestMemoryRead+0x30>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc8:	f7ff fcfc 	bl	80037c4 <HAL_GetTick>
 8003dcc:	eba0 0009 	sub.w	r0, r0, r9
 8003dd0:	4582      	cmp	sl, r0
 8003dd2:	d304      	bcc.n	8003dde <I2C_RequestMemoryRead+0xba>
 8003dd4:	f1ba 0f00 	cmp.w	sl, #0
 8003dd8:	d001      	beq.n	8003dde <I2C_RequestMemoryRead+0xba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dda:	6834      	ldr	r4, [r6, #0]
 8003ddc:	e7b4      	b.n	8003d48 <I2C_RequestMemoryRead+0x24>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003dde:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003de0:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003de2:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003de4:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003de8:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003dec:	6c33      	ldr	r3, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dee:	6831      	ldr	r1, [r6, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003df0:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003df4:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003df8:	6433      	str	r3, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dfa:	680b      	ldr	r3, [r1, #0]
 8003dfc:	05da      	lsls	r2, r3, #23
 8003dfe:	d540      	bpl.n	8003e82 <I2C_RequestMemoryRead+0x15e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e00:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8003e04:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e06:	6433      	str	r3, [r6, #64]	; 0x40
}
 8003e08:	b003      	add	sp, #12
 8003e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e0e:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e10:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e14:	2120      	movs	r1, #32
    return HAL_ERROR;
 8003e16:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e1e:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e20:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e22:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e24:	f886 103d 	strb.w	r1, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e28:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e2c:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003e2e:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e32:	f043 0304 	orr.w	r3, r3, #4
 8003e36:	6433      	str	r3, [r6, #64]	; 0x40
}
 8003e38:	b003      	add	sp, #12
 8003e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e3e:	6963      	ldr	r3, [r4, #20]
 8003e40:	079b      	lsls	r3, r3, #30
 8003e42:	d496      	bmi.n	8003d72 <I2C_RequestMemoryRead+0x4e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e44:	6963      	ldr	r3, [r4, #20]
 8003e46:	0558      	lsls	r0, r3, #21
 8003e48:	d4e1      	bmi.n	8003e0e <I2C_RequestMemoryRead+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4a:	f7ff fcbb 	bl	80037c4 <HAL_GetTick>
 8003e4e:	eba0 0009 	sub.w	r0, r0, r9
 8003e52:	4582      	cmp	sl, r0
 8003e54:	f0c0 808f 	bcc.w	8003f76 <I2C_RequestMemoryRead+0x252>
 8003e58:	f1ba 0f00 	cmp.w	sl, #0
 8003e5c:	f000 808b 	beq.w	8003f76 <I2C_RequestMemoryRead+0x252>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e60:	6834      	ldr	r4, [r6, #0]
 8003e62:	e77c      	b.n	8003d5e <I2C_RequestMemoryRead+0x3a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e64:	f1b8 0f01 	cmp.w	r8, #1
 8003e68:	d10f      	bne.n	8003e8a <I2C_RequestMemoryRead+0x166>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e6a:	b2ff      	uxtb	r7, r7
 8003e6c:	6127      	str	r7, [r4, #16]
 8003e6e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003e72:	d16e      	bne.n	8003f52 <I2C_RequestMemoryRead+0x22e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e74:	6963      	ldr	r3, [r4, #20]
 8003e76:	061b      	lsls	r3, r3, #24
 8003e78:	d41a      	bmi.n	8003eb0 <I2C_RequestMemoryRead+0x18c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e7a:	6963      	ldr	r3, [r4, #20]
 8003e7c:	055f      	lsls	r7, r3, #21
 8003e7e:	d5f9      	bpl.n	8003e74 <I2C_RequestMemoryRead+0x150>
 8003e80:	e788      	b.n	8003d94 <I2C_RequestMemoryRead+0x70>
    return HAL_TIMEOUT;
 8003e82:	2003      	movs	r0, #3
}
 8003e84:	b003      	add	sp, #12
 8003e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e8a:	0a3b      	lsrs	r3, r7, #8
 8003e8c:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e8e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003e92:	d17f      	bne.n	8003f94 <I2C_RequestMemoryRead+0x270>
 8003e94:	6963      	ldr	r3, [r4, #20]
 8003e96:	061d      	lsls	r5, r3, #24
 8003e98:	d4e7      	bmi.n	8003e6a <I2C_RequestMemoryRead+0x146>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e9a:	6963      	ldr	r3, [r4, #20]
 8003e9c:	0558      	lsls	r0, r3, #21
 8003e9e:	d5f9      	bpl.n	8003e94 <I2C_RequestMemoryRead+0x170>
 8003ea0:	e778      	b.n	8003d94 <I2C_RequestMemoryRead+0x70>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea2:	6832      	ldr	r2, [r6, #0]
    return HAL_ERROR;
 8003ea4:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea6:	6813      	ldr	r3, [r2, #0]
 8003ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	e7c3      	b.n	8003e38 <I2C_RequestMemoryRead+0x114>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb6:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8003eb8:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003ebc:	d113      	bne.n	8003ee6 <I2C_RequestMemoryRead+0x1c2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ebe:	6963      	ldr	r3, [r4, #20]
 8003ec0:	07d8      	lsls	r0, r3, #31
 8003ec2:	d5fc      	bpl.n	8003ebe <I2C_RequestMemoryRead+0x19a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ec4:	f04b 0301 	orr.w	r3, fp, #1
 8003ec8:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8003eca:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003ece:	d003      	beq.n	8003ed8 <I2C_RequestMemoryRead+0x1b4>
 8003ed0:	e02b      	b.n	8003f2a <I2C_RequestMemoryRead+0x206>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ed2:	6963      	ldr	r3, [r4, #20]
 8003ed4:	055b      	lsls	r3, r3, #21
 8003ed6:	d49a      	bmi.n	8003e0e <I2C_RequestMemoryRead+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ed8:	6963      	ldr	r3, [r4, #20]
 8003eda:	43db      	mvns	r3, r3
 8003edc:	f013 0302 	ands.w	r3, r3, #2
 8003ee0:	d1f7      	bne.n	8003ed2 <I2C_RequestMemoryRead+0x1ae>
  return HAL_OK;
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	e7a8      	b.n	8003e38 <I2C_RequestMemoryRead+0x114>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ee6:	6963      	ldr	r3, [r4, #20]
 8003ee8:	07d9      	lsls	r1, r3, #31
 8003eea:	d4eb      	bmi.n	8003ec4 <I2C_RequestMemoryRead+0x1a0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eec:	f7ff fc6a 	bl	80037c4 <HAL_GetTick>
 8003ef0:	eba0 0309 	sub.w	r3, r0, r9
 8003ef4:	459a      	cmp	sl, r3
 8003ef6:	f4ff af72 	bcc.w	8003dde <I2C_RequestMemoryRead+0xba>
 8003efa:	f1ba 0f00 	cmp.w	sl, #0
 8003efe:	f43f af6e 	beq.w	8003dde <I2C_RequestMemoryRead+0xba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f02:	6834      	ldr	r4, [r6, #0]
 8003f04:	e7d8      	b.n	8003eb8 <I2C_RequestMemoryRead+0x194>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f06:	6963      	ldr	r3, [r4, #20]
 8003f08:	061a      	lsls	r2, r3, #24
 8003f0a:	d4ab      	bmi.n	8003e64 <I2C_RequestMemoryRead+0x140>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f0c:	6963      	ldr	r3, [r4, #20]
 8003f0e:	055d      	lsls	r5, r3, #21
 8003f10:	f53f af40 	bmi.w	8003d94 <I2C_RequestMemoryRead+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f14:	f7ff fc56 	bl	80037c4 <HAL_GetTick>
 8003f18:	eba0 0309 	sub.w	r3, r0, r9
 8003f1c:	459a      	cmp	sl, r3
 8003f1e:	d34c      	bcc.n	8003fba <I2C_RequestMemoryRead+0x296>
 8003f20:	f1ba 0f00 	cmp.w	sl, #0
 8003f24:	d049      	beq.n	8003fba <I2C_RequestMemoryRead+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f26:	6834      	ldr	r4, [r6, #0]
 8003f28:	e72a      	b.n	8003d80 <I2C_RequestMemoryRead+0x5c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f2a:	6963      	ldr	r3, [r4, #20]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	f013 0302 	ands.w	r3, r3, #2
 8003f32:	d0d6      	beq.n	8003ee2 <I2C_RequestMemoryRead+0x1be>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f34:	6963      	ldr	r3, [r4, #20]
 8003f36:	055a      	lsls	r2, r3, #21
 8003f38:	f53f af69 	bmi.w	8003e0e <I2C_RequestMemoryRead+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f3c:	f7ff fc42 	bl	80037c4 <HAL_GetTick>
 8003f40:	eba0 0309 	sub.w	r3, r0, r9
 8003f44:	459a      	cmp	sl, r3
 8003f46:	d316      	bcc.n	8003f76 <I2C_RequestMemoryRead+0x252>
 8003f48:	f1ba 0f00 	cmp.w	sl, #0
 8003f4c:	d013      	beq.n	8003f76 <I2C_RequestMemoryRead+0x252>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f4e:	6834      	ldr	r4, [r6, #0]
 8003f50:	e7bb      	b.n	8003eca <I2C_RequestMemoryRead+0x1a6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f52:	6963      	ldr	r3, [r4, #20]
 8003f54:	061d      	lsls	r5, r3, #24
 8003f56:	d4ab      	bmi.n	8003eb0 <I2C_RequestMemoryRead+0x18c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f58:	6963      	ldr	r3, [r4, #20]
 8003f5a:	055a      	lsls	r2, r3, #21
 8003f5c:	f53f af1a 	bmi.w	8003d94 <I2C_RequestMemoryRead+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f60:	f7ff fc30 	bl	80037c4 <HAL_GetTick>
 8003f64:	eba0 0309 	sub.w	r3, r0, r9
 8003f68:	459a      	cmp	sl, r3
 8003f6a:	d326      	bcc.n	8003fba <I2C_RequestMemoryRead+0x296>
 8003f6c:	f1ba 0f00 	cmp.w	sl, #0
 8003f70:	d023      	beq.n	8003fba <I2C_RequestMemoryRead+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f72:	6834      	ldr	r4, [r6, #0]
 8003f74:	e77b      	b.n	8003e6e <I2C_RequestMemoryRead+0x14a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f76:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f78:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f7a:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f7c:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f80:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f84:	6c33      	ldr	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 8003f86:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f88:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003f8c:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f90:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003f92:	e751      	b.n	8003e38 <I2C_RequestMemoryRead+0x114>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f94:	6963      	ldr	r3, [r4, #20]
 8003f96:	0619      	lsls	r1, r3, #24
 8003f98:	f53f af67 	bmi.w	8003e6a <I2C_RequestMemoryRead+0x146>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f9c:	6963      	ldr	r3, [r4, #20]
 8003f9e:	055b      	lsls	r3, r3, #21
 8003fa0:	f53f aef8 	bmi.w	8003d94 <I2C_RequestMemoryRead+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa4:	f7ff fc0e 	bl	80037c4 <HAL_GetTick>
 8003fa8:	eba0 0309 	sub.w	r3, r0, r9
 8003fac:	459a      	cmp	sl, r3
 8003fae:	d304      	bcc.n	8003fba <I2C_RequestMemoryRead+0x296>
 8003fb0:	f1ba 0f00 	cmp.w	sl, #0
 8003fb4:	d001      	beq.n	8003fba <I2C_RequestMemoryRead+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fb6:	6834      	ldr	r4, [r6, #0]
 8003fb8:	e769      	b.n	8003e8e <I2C_RequestMemoryRead+0x16a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fba:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fbc:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fbe:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fc0:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fc4:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fc8:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003fca:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fce:	f043 0320 	orr.w	r3, r3, #32
 8003fd2:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003fd4:	e6ee      	b.n	8003db4 <I2C_RequestMemoryRead+0x90>
 8003fd6:	bf00      	nop

08003fd8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	f000 80b9 	beq.w	8004150 <HAL_I2C_Init+0x178>
{
 8003fde:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fe0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 8098 	beq.w	8004120 <HAL_I2C_Init+0x148>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff0:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003ff2:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	f022 0201 	bic.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004006:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800400e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004010:	f001 fa7a 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004014:	6863      	ldr	r3, [r4, #4]
 8004016:	494f      	ldr	r1, [pc, #316]	; (8004154 <HAL_I2C_Init+0x17c>)
 8004018:	428b      	cmp	r3, r1
 800401a:	d84f      	bhi.n	80040bc <HAL_I2C_Init+0xe4>
 800401c:	4a4e      	ldr	r2, [pc, #312]	; (8004158 <HAL_I2C_Init+0x180>)
 800401e:	4290      	cmp	r0, r2
 8004020:	d97c      	bls.n	800411c <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8004022:	4d4e      	ldr	r5, [pc, #312]	; (800415c <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004024:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8004026:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800402a:	1e43      	subs	r3, r0, #1
 800402c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004030:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004034:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8004036:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004038:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800403a:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800403e:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8004042:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 8004046:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004048:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800404a:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800404c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004050:	ea41 010c 	orr.w	r1, r1, ip
 8004054:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004056:	69d1      	ldr	r1, [r2, #28]
 8004058:	ea13 0f0e 	tst.w	r3, lr
 800405c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004060:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004064:	d161      	bne.n	800412a <HAL_I2C_Init+0x152>
 8004066:	2304      	movs	r3, #4
 8004068:	430b      	orrs	r3, r1
 800406a:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800406c:	6811      	ldr	r1, [r2, #0]
 800406e:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8004072:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8004076:	4303      	orrs	r3, r0
 8004078:	430b      	orrs	r3, r1
 800407a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800407c:	6891      	ldr	r1, [r2, #8]
 800407e:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8004082:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8004086:	4303      	orrs	r3, r0
 8004088:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800408c:	430b      	orrs	r3, r1
 800408e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004090:	68d0      	ldr	r0, [r2, #12]
 8004092:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8004096:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800409a:	430b      	orrs	r3, r1
 800409c:	4303      	orrs	r3, r0
 800409e:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80040a0:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a2:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80040aa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ac:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040b2:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b4:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 80040b8:	4608      	mov	r0, r1
}
 80040ba:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040bc:	4a28      	ldr	r2, [pc, #160]	; (8004160 <HAL_I2C_Init+0x188>)
 80040be:	4290      	cmp	r0, r2
 80040c0:	d92c      	bls.n	800411c <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 80040c2:	4d26      	ldr	r5, [pc, #152]	; (800415c <HAL_I2C_Init+0x184>)
 80040c4:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040c8:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80040cc:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040d0:	fb02 f101 	mul.w	r1, r2, r1
 80040d4:	4d23      	ldr	r5, [pc, #140]	; (8004164 <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040d6:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040d8:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040dc:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040de:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040e0:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80040e4:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 80040e8:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040ea:	6a15      	ldr	r5, [r2, #32]
 80040ec:	3101      	adds	r1, #1
 80040ee:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80040f2:	4329      	orrs	r1, r5
 80040f4:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040f6:	69d1      	ldr	r1, [r2, #28]
 80040f8:	68a5      	ldr	r5, [r4, #8]
 80040fa:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80040fe:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004102:	b9ad      	cbnz	r5, 8004130 <HAL_I2C_Init+0x158>
 8004104:	3801      	subs	r0, #1
 8004106:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800410a:	fbb0 f3f3 	udiv	r3, r0, r3
 800410e:	3301      	adds	r3, #1
 8004110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004114:	b1d3      	cbz	r3, 800414c <HAL_I2C_Init+0x174>
 8004116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800411a:	e7a5      	b.n	8004068 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 800411c:	2001      	movs	r0, #1
}
 800411e:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004120:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8004124:	f7ff f9c8 	bl	80034b8 <HAL_I2C_MspInit>
 8004128:	e762      	b.n	8003ff0 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800412a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800412e:	e79b      	b.n	8004068 <HAL_I2C_Init+0x90>
 8004130:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004134:	3801      	subs	r0, #1
 8004136:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800413a:	fbb0 f3f3 	udiv	r3, r0, r3
 800413e:	3301      	adds	r3, #1
 8004140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004144:	b113      	cbz	r3, 800414c <HAL_I2C_Init+0x174>
 8004146:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800414a:	e78d      	b.n	8004068 <HAL_I2C_Init+0x90>
 800414c:	2301      	movs	r3, #1
 800414e:	e78b      	b.n	8004068 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8004150:	2001      	movs	r0, #1
}
 8004152:	4770      	bx	lr
 8004154:	000186a0 	.word	0x000186a0
 8004158:	001e847f 	.word	0x001e847f
 800415c:	431bde83 	.word	0x431bde83
 8004160:	003d08ff 	.word	0x003d08ff
 8004164:	10624dd3 	.word	0x10624dd3

08004168 <HAL_I2C_Master_Transmit>:
{
 8004168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800416c:	4605      	mov	r5, r0
 800416e:	b083      	sub	sp, #12
 8004170:	4699      	mov	r9, r3
 8004172:	4688      	mov	r8, r1
 8004174:	4692      	mov	sl, r2
 8004176:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8004178:	f7ff fb24 	bl	80037c4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800417c:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8004180:	2b20      	cmp	r3, #32
 8004182:	d003      	beq.n	800418c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8004184:	2002      	movs	r0, #2
}
 8004186:	b003      	add	sp, #12
 8004188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800418c:	4606      	mov	r6, r0
 800418e:	e005      	b.n	800419c <HAL_I2C_Master_Transmit+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004190:	f7ff fb18 	bl	80037c4 <HAL_GetTick>
 8004194:	1b80      	subs	r0, r0, r6
 8004196:	2819      	cmp	r0, #25
 8004198:	f200 80f8 	bhi.w	800438c <HAL_I2C_Master_Transmit+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800419c:	682c      	ldr	r4, [r5, #0]
 800419e:	69a3      	ldr	r3, [r4, #24]
 80041a0:	ea6f 0c03 	mvn.w	ip, r3
 80041a4:	f01c 0b02 	ands.w	fp, ip, #2
 80041a8:	d0f2      	beq.n	8004190 <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 80041aa:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d0e8      	beq.n	8004184 <HAL_I2C_Master_Transmit+0x1c>
 80041b2:	2301      	movs	r3, #1
 80041b4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	07d9      	lsls	r1, r3, #31
 80041bc:	d571      	bpl.n	80042a2 <HAL_I2C_Master_Transmit+0x13a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041be:	2200      	movs	r2, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041c0:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041c2:	2110      	movs	r1, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041ca:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041cc:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041d0:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041d4:	642a      	str	r2, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 80041d6:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041da:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041dc:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80041e0:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80041e2:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80041e6:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d006      	beq.n	80041fc <HAL_I2C_Master_Transmit+0x94>
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d004      	beq.n	80041fc <HAL_I2C_Master_Transmit+0x94>
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d002      	beq.n	80041fc <HAL_I2C_Master_Transmit+0x94>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80041f8:	2b12      	cmp	r3, #18
 80041fa:	d103      	bne.n	8004204 <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004202:	6023      	str	r3, [r4, #0]
 8004204:	1c7b      	adds	r3, r7, #1
 8004206:	d13e      	bne.n	8004286 <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004208:	6963      	ldr	r3, [r4, #20]
 800420a:	07d8      	lsls	r0, r3, #31
 800420c:	d5fc      	bpl.n	8004208 <HAL_I2C_Master_Transmit+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800420e:	692b      	ldr	r3, [r5, #16]
 8004210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004214:	d14a      	bne.n	80042ac <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004216:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 800421a:	6121      	str	r1, [r4, #16]
 800421c:	1c78      	adds	r0, r7, #1
 800421e:	d004      	beq.n	800422a <HAL_I2C_Master_Transmit+0xc2>
 8004220:	e0dd      	b.n	80043de <HAL_I2C_Master_Transmit+0x276>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004222:	6963      	ldr	r3, [r4, #20]
 8004224:	055a      	lsls	r2, r3, #21
 8004226:	f100 80c2 	bmi.w	80043ae <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800422a:	6963      	ldr	r3, [r4, #20]
 800422c:	0799      	lsls	r1, r3, #30
 800422e:	d5f8      	bpl.n	8004222 <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004230:	2200      	movs	r2, #0
 8004232:	9201      	str	r2, [sp, #4]
 8004234:	6962      	ldr	r2, [r4, #20]
    while (hi2c->XferSize > 0U)
 8004236:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004238:	9201      	str	r2, [sp, #4]
 800423a:	69a2      	ldr	r2, [r4, #24]
 800423c:	9201      	str	r2, [sp, #4]
 800423e:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8004240:	2b00      	cmp	r3, #0
 8004242:	d075      	beq.n	8004330 <HAL_I2C_Master_Transmit+0x1c8>
 8004244:	1c79      	adds	r1, r7, #1
 8004246:	f040 8081 	bne.w	800434c <HAL_I2C_Master_Transmit+0x1e4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800424a:	6963      	ldr	r3, [r4, #20]
 800424c:	061a      	lsls	r2, r3, #24
 800424e:	d441      	bmi.n	80042d4 <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004250:	6963      	ldr	r3, [r4, #20]
 8004252:	055b      	lsls	r3, r3, #21
 8004254:	d5f9      	bpl.n	800424a <HAL_I2C_Master_Transmit+0xe2>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004256:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8004258:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800425a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800425e:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004260:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004262:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004266:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800426a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800426c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004270:	f043 0304 	orr.w	r3, r3, #4
 8004274:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004276:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004278:	2b04      	cmp	r3, #4
 800427a:	f000 80e6 	beq.w	800444a <HAL_I2C_Master_Transmit+0x2e2>
      return HAL_ERROR;
 800427e:	2001      	movs	r0, #1
}
 8004280:	b003      	add	sp, #12
 8004282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004286:	6963      	ldr	r3, [r4, #20]
 8004288:	07d9      	lsls	r1, r3, #31
 800428a:	d4c0      	bmi.n	800420e <HAL_I2C_Master_Transmit+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428c:	f7ff fa9a 	bl	80037c4 <HAL_GetTick>
 8004290:	1b80      	subs	r0, r0, r6
 8004292:	4287      	cmp	r7, r0
 8004294:	f0c0 80b3 	bcc.w	80043fe <HAL_I2C_Master_Transmit+0x296>
 8004298:	2f00      	cmp	r7, #0
 800429a:	f000 80b0 	beq.w	80043fe <HAL_I2C_Master_Transmit+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800429e:	682c      	ldr	r4, [r5, #0]
 80042a0:	e7b0      	b.n	8004204 <HAL_I2C_Master_Transmit+0x9c>
      __HAL_I2C_ENABLE(hi2c);
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	6023      	str	r3, [r4, #0]
 80042aa:	e788      	b.n	80041be <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042ac:	ea4f 13e8 	mov.w	r3, r8, asr #7
 80042b0:	f003 0306 	and.w	r3, r3, #6
 80042b4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80042b8:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80042ba:	1c7b      	adds	r3, r7, #1
 80042bc:	d003      	beq.n	80042c6 <HAL_I2C_Master_Transmit+0x15e>
 80042be:	e0b5      	b.n	800442c <HAL_I2C_Master_Transmit+0x2c4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042c0:	6963      	ldr	r3, [r4, #20]
 80042c2:	0559      	lsls	r1, r3, #21
 80042c4:	d473      	bmi.n	80043ae <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042c6:	6963      	ldr	r3, [r4, #20]
 80042c8:	0718      	lsls	r0, r3, #28
 80042ca:	d5f9      	bpl.n	80042c0 <HAL_I2C_Master_Transmit+0x158>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042cc:	fa5f f388 	uxtb.w	r3, r8
 80042d0:	6123      	str	r3, [r4, #16]
 80042d2:	e7a3      	b.n	800421c <HAL_I2C_Master_Transmit+0xb4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042d4:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 80042d6:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042da:	4601      	mov	r1, r0
 80042dc:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 80042e0:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042e4:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 80042e6:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 80042e8:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042f0:	6963      	ldr	r3, [r4, #20]
      hi2c->pBuffPtr++;
 80042f2:	6269      	str	r1, [r5, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042f4:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 80042f6:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042f8:	d50c      	bpl.n	8004314 <HAL_I2C_Master_Transmit+0x1ac>
 80042fa:	b15a      	cbz	r2, 8004314 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042fc:	7843      	ldrb	r3, [r0, #1]
        hi2c->XferSize--;
 80042fe:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004302:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 8004304:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8004306:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8004308:	3b01      	subs	r3, #1
 800430a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800430c:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004310:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 8004312:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 8004314:	1c78      	adds	r0, r7, #1
 8004316:	d129      	bne.n	800436c <HAL_I2C_Master_Transmit+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004318:	6963      	ldr	r3, [r4, #20]
 800431a:	0759      	lsls	r1, r3, #29
 800431c:	d405      	bmi.n	800432a <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800431e:	6963      	ldr	r3, [r4, #20]
 8004320:	055a      	lsls	r2, r3, #21
 8004322:	d498      	bmi.n	8004256 <HAL_I2C_Master_Transmit+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004324:	6963      	ldr	r3, [r4, #20]
 8004326:	0759      	lsls	r1, r3, #29
 8004328:	d5f9      	bpl.n	800431e <HAL_I2C_Master_Transmit+0x1b6>
    while (hi2c->XferSize > 0U)
 800432a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800432c:	2b00      	cmp	r3, #0
 800432e:	d189      	bne.n	8004244 <HAL_I2C_Master_Transmit+0xdc>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004330:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004332:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004334:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8004336:	4618      	mov	r0, r3
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800433c:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800433e:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004342:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004346:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    return HAL_OK;
 800434a:	e71c      	b.n	8004186 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800434c:	6963      	ldr	r3, [r4, #20]
 800434e:	0618      	lsls	r0, r3, #24
 8004350:	d4c0      	bmi.n	80042d4 <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004352:	6963      	ldr	r3, [r4, #20]
 8004354:	0558      	lsls	r0, r3, #21
 8004356:	f53f af7e 	bmi.w	8004256 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435a:	f7ff fa33 	bl	80037c4 <HAL_GetTick>
 800435e:	1b80      	subs	r0, r0, r6
 8004360:	4287      	cmp	r7, r0
 8004362:	d379      	bcc.n	8004458 <HAL_I2C_Master_Transmit+0x2f0>
 8004364:	2f00      	cmp	r7, #0
 8004366:	d077      	beq.n	8004458 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004368:	682c      	ldr	r4, [r5, #0]
 800436a:	e76b      	b.n	8004244 <HAL_I2C_Master_Transmit+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800436c:	6963      	ldr	r3, [r4, #20]
 800436e:	075b      	lsls	r3, r3, #29
 8004370:	d4db      	bmi.n	800432a <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004372:	6963      	ldr	r3, [r4, #20]
 8004374:	055b      	lsls	r3, r3, #21
 8004376:	f53f af6e 	bmi.w	8004256 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800437a:	f7ff fa23 	bl	80037c4 <HAL_GetTick>
 800437e:	1b80      	subs	r0, r0, r6
 8004380:	4287      	cmp	r7, r0
 8004382:	d369      	bcc.n	8004458 <HAL_I2C_Master_Transmit+0x2f0>
 8004384:	2f00      	cmp	r7, #0
 8004386:	d067      	beq.n	8004458 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004388:	682c      	ldr	r4, [r5, #0]
 800438a:	e7c3      	b.n	8004314 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->State             = HAL_I2C_STATE_READY;
 800438c:	2320      	movs	r3, #32
      return HAL_BUSY;
 800438e:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004390:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004394:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004398:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800439c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800439e:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043a2:	f043 0320 	orr.w	r3, r3, #32
 80043a6:	642b      	str	r3, [r5, #64]	; 0x40
}
 80043a8:	b003      	add	sp, #12
 80043aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ae:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b0:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80043b4:	2120      	movs	r1, #32
      return HAL_ERROR;
 80043b6:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043be:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c0:	6166      	str	r6, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043c2:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043c4:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c8:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043cc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80043ce:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043d2:	f043 0304 	orr.w	r3, r3, #4
 80043d6:	642b      	str	r3, [r5, #64]	; 0x40
}
 80043d8:	b003      	add	sp, #12
 80043da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043de:	6963      	ldr	r3, [r4, #20]
 80043e0:	079b      	lsls	r3, r3, #30
 80043e2:	f53f af25 	bmi.w	8004230 <HAL_I2C_Master_Transmit+0xc8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043e6:	6963      	ldr	r3, [r4, #20]
 80043e8:	055b      	lsls	r3, r3, #21
 80043ea:	d4e0      	bmi.n	80043ae <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ec:	f7ff f9ea 	bl	80037c4 <HAL_GetTick>
 80043f0:	1b80      	subs	r0, r0, r6
 80043f2:	4287      	cmp	r7, r0
 80043f4:	d33e      	bcc.n	8004474 <HAL_I2C_Master_Transmit+0x30c>
 80043f6:	2f00      	cmp	r7, #0
 80043f8:	d03c      	beq.n	8004474 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043fa:	682c      	ldr	r4, [r5, #0]
 80043fc:	e70e      	b.n	800421c <HAL_I2C_Master_Transmit+0xb4>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043fe:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004400:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004402:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004404:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004408:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800440c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800440e:	6829      	ldr	r1, [r5, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004410:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004414:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004418:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800441a:	680b      	ldr	r3, [r1, #0]
 800441c:	05da      	lsls	r2, r3, #23
 800441e:	f57f af2e 	bpl.w	800427e <HAL_I2C_Master_Transmit+0x116>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004422:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 8004426:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004428:	642b      	str	r3, [r5, #64]	; 0x40
 800442a:	e6ac      	b.n	8004186 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800442c:	6963      	ldr	r3, [r4, #20]
 800442e:	071a      	lsls	r2, r3, #28
 8004430:	f53f af4c 	bmi.w	80042cc <HAL_I2C_Master_Transmit+0x164>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004434:	6963      	ldr	r3, [r4, #20]
 8004436:	055a      	lsls	r2, r3, #21
 8004438:	d4b9      	bmi.n	80043ae <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443a:	f7ff f9c3 	bl	80037c4 <HAL_GetTick>
 800443e:	1b83      	subs	r3, r0, r6
 8004440:	429f      	cmp	r7, r3
 8004442:	d317      	bcc.n	8004474 <HAL_I2C_Master_Transmit+0x30c>
 8004444:	b1b7      	cbz	r7, 8004474 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004446:	682c      	ldr	r4, [r5, #0]
 8004448:	e737      	b.n	80042ba <HAL_I2C_Master_Transmit+0x152>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444a:	682a      	ldr	r2, [r5, #0]
        return HAL_ERROR;
 800444c:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444e:	6813      	ldr	r3, [r2, #0]
 8004450:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	e696      	b.n	8004186 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004458:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800445a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800445c:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800445e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004462:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004466:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004468:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800446c:	f043 0320 	orr.w	r3, r3, #32
 8004470:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8004472:	e700      	b.n	8004276 <HAL_I2C_Master_Transmit+0x10e>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004474:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004476:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004478:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800447a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800447e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004482:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8004484:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004486:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 800448a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800448e:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8004490:	e679      	b.n	8004186 <HAL_I2C_Master_Transmit+0x1e>
 8004492:	bf00      	nop

08004494 <HAL_I2C_Master_Receive>:
{
 8004494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004498:	4605      	mov	r5, r0
  __IO uint32_t count = 0U;
 800449a:	2400      	movs	r4, #0
{
 800449c:	b087      	sub	sp, #28
 800449e:	4699      	mov	r9, r3
 80044a0:	4688      	mov	r8, r1
 80044a2:	4692      	mov	sl, r2
 80044a4:	9f10      	ldr	r7, [sp, #64]	; 0x40
  __IO uint32_t count = 0U;
 80044a6:	9400      	str	r4, [sp, #0]
  uint32_t tickstart = HAL_GetTick();
 80044a8:	f7ff f98c 	bl	80037c4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ac:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d003      	beq.n	80044bc <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 80044b4:	2002      	movs	r0, #2
}
 80044b6:	b007      	add	sp, #28
 80044b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044bc:	4606      	mov	r6, r0
 80044be:	e005      	b.n	80044cc <HAL_I2C_Master_Receive+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c0:	f7ff f980 	bl	80037c4 <HAL_GetTick>
 80044c4:	1b80      	subs	r0, r0, r6
 80044c6:	2819      	cmp	r0, #25
 80044c8:	f200 80ac 	bhi.w	8004624 <HAL_I2C_Master_Receive+0x190>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044cc:	682c      	ldr	r4, [r5, #0]
 80044ce:	69a3      	ldr	r3, [r4, #24]
 80044d0:	ea6f 0c03 	mvn.w	ip, r3
 80044d4:	f01c 0b02 	ands.w	fp, ip, #2
 80044d8:	d0f2      	beq.n	80044c0 <HAL_I2C_Master_Receive+0x2c>
    __HAL_LOCK(hi2c);
 80044da:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d0e8      	beq.n	80044b4 <HAL_I2C_Master_Receive+0x20>
 80044e2:	2301      	movs	r3, #1
 80044e4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	07db      	lsls	r3, r3, #31
 80044ec:	d564      	bpl.n	80045b8 <HAL_I2C_Master_Receive+0x124>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044ee:	2200      	movs	r2, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80044f0:	2022      	movs	r0, #34	; 0x22
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044f2:	2110      	movs	r1, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044f4:	6823      	ldr	r3, [r4, #0]
 80044f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044fa:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80044fc:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004500:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004504:	642a      	str	r2, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004506:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800450a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800450c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8004510:	62ea      	str	r2, [r5, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004512:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004514:	852b      	strh	r3, [r5, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004516:	6823      	ldr	r3, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004518:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    hi2c->pBuffPtr    = pData;
 800451e:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004522:	6023      	str	r3, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004524:	d007      	beq.n	8004536 <HAL_I2C_Master_Receive+0xa2>
 8004526:	2a01      	cmp	r2, #1
 8004528:	d005      	beq.n	8004536 <HAL_I2C_Master_Receive+0xa2>
 800452a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800452e:	d002      	beq.n	8004536 <HAL_I2C_Master_Receive+0xa2>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004530:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004532:	2b11      	cmp	r3, #17
 8004534:	d103      	bne.n	800453e <HAL_I2C_Master_Receive+0xaa>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453c:	6023      	str	r3, [r4, #0]
 800453e:	1c78      	adds	r0, r7, #1
 8004540:	d12c      	bne.n	800459c <HAL_I2C_Master_Receive+0x108>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004542:	6963      	ldr	r3, [r4, #20]
 8004544:	07d9      	lsls	r1, r3, #31
 8004546:	d5fc      	bpl.n	8004542 <HAL_I2C_Master_Receive+0xae>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004548:	692b      	ldr	r3, [r5, #16]
 800454a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800454e:	d138      	bne.n	80045c2 <HAL_I2C_Master_Receive+0x12e>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004550:	f048 0801 	orr.w	r8, r8, #1
 8004554:	fa5f f388 	uxtb.w	r3, r8
 8004558:	6123      	str	r3, [r4, #16]
 800455a:	1c79      	adds	r1, r7, #1
 800455c:	d003      	beq.n	8004566 <HAL_I2C_Master_Receive+0xd2>
 800455e:	e111      	b.n	8004784 <HAL_I2C_Master_Receive+0x2f0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004560:	6963      	ldr	r3, [r4, #20]
 8004562:	055b      	lsls	r3, r3, #21
 8004564:	d46f      	bmi.n	8004646 <HAL_I2C_Master_Receive+0x1b2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004566:	6963      	ldr	r3, [r4, #20]
 8004568:	079a      	lsls	r2, r3, #30
 800456a:	d5f9      	bpl.n	8004560 <HAL_I2C_Master_Receive+0xcc>
    if (hi2c->XferSize == 0U)
 800456c:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800456e:	2b00      	cmp	r3, #0
 8004570:	f040 8081 	bne.w	8004676 <HAL_I2C_Master_Receive+0x1e2>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004574:	9301      	str	r3, [sp, #4]
 8004576:	6963      	ldr	r3, [r4, #20]
 8004578:	9301      	str	r3, [sp, #4]
 800457a:	69a3      	ldr	r3, [r4, #24]
 800457c:	9301      	str	r3, [sp, #4]
 800457e:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004586:	6023      	str	r3, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004588:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800458a:	2220      	movs	r2, #32
    return HAL_OK;
 800458c:	4618      	mov	r0, r3
    hi2c->State = HAL_I2C_STATE_READY;
 800458e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004592:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004596:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    return HAL_OK;
 800459a:	e78c      	b.n	80044b6 <HAL_I2C_Master_Receive+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800459c:	6963      	ldr	r3, [r4, #20]
 800459e:	07da      	lsls	r2, r3, #31
 80045a0:	d4d2      	bmi.n	8004548 <HAL_I2C_Master_Receive+0xb4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a2:	f7ff f90f 	bl	80037c4 <HAL_GetTick>
 80045a6:	1b80      	subs	r0, r0, r6
 80045a8:	4287      	cmp	r7, r0
 80045aa:	f0c0 80d4 	bcc.w	8004756 <HAL_I2C_Master_Receive+0x2c2>
 80045ae:	2f00      	cmp	r7, #0
 80045b0:	f000 80d1 	beq.w	8004756 <HAL_I2C_Master_Receive+0x2c2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045b4:	682c      	ldr	r4, [r5, #0]
 80045b6:	e7c2      	b.n	800453e <HAL_I2C_Master_Receive+0xaa>
      __HAL_I2C_ENABLE(hi2c);
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	6023      	str	r3, [r4, #0]
 80045c0:	e795      	b.n	80044ee <HAL_I2C_Master_Receive+0x5a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045c2:	ea4f 19e8 	mov.w	r9, r8, asr #7
 80045c6:	f009 0906 	and.w	r9, r9, #6
 80045ca:	f049 03f0 	orr.w	r3, r9, #240	; 0xf0
 80045ce:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80045d0:	1c78      	adds	r0, r7, #1
 80045d2:	d003      	beq.n	80045dc <HAL_I2C_Master_Receive+0x148>
 80045d4:	e100      	b.n	80047d8 <HAL_I2C_Master_Receive+0x344>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045d6:	6963      	ldr	r3, [r4, #20]
 80045d8:	055a      	lsls	r2, r3, #21
 80045da:	d434      	bmi.n	8004646 <HAL_I2C_Master_Receive+0x1b2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045dc:	6963      	ldr	r3, [r4, #20]
 80045de:	0719      	lsls	r1, r3, #28
 80045e0:	d5f9      	bpl.n	80045d6 <HAL_I2C_Master_Receive+0x142>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045e2:	fa5f f388 	uxtb.w	r3, r8
 80045e6:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80045e8:	1c79      	adds	r1, r7, #1
 80045ea:	d003      	beq.n	80045f4 <HAL_I2C_Master_Receive+0x160>
 80045ec:	e1c0      	b.n	8004970 <HAL_I2C_Master_Receive+0x4dc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045ee:	6963      	ldr	r3, [r4, #20]
 80045f0:	055b      	lsls	r3, r3, #21
 80045f2:	d428      	bmi.n	8004646 <HAL_I2C_Master_Receive+0x1b2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045f4:	6963      	ldr	r3, [r4, #20]
 80045f6:	079a      	lsls	r2, r3, #30
 80045f8:	d5f9      	bpl.n	80045ee <HAL_I2C_Master_Receive+0x15a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fa:	2300      	movs	r3, #0
 80045fc:	9305      	str	r3, [sp, #20]
 80045fe:	6963      	ldr	r3, [r4, #20]
 8004600:	9305      	str	r3, [sp, #20]
 8004602:	69a3      	ldr	r3, [r4, #24]
 8004604:	9305      	str	r3, [sp, #20]
 8004606:	9b05      	ldr	r3, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460e:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8004610:	1c79      	adds	r1, r7, #1
 8004612:	f040 81c0 	bne.w	8004996 <HAL_I2C_Master_Receive+0x502>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004616:	6963      	ldr	r3, [r4, #20]
 8004618:	07da      	lsls	r2, r3, #31
 800461a:	d5fc      	bpl.n	8004616 <HAL_I2C_Master_Receive+0x182>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800461c:	f049 03f1 	orr.w	r3, r9, #241	; 0xf1
 8004620:	6123      	str	r3, [r4, #16]
 8004622:	e79a      	b.n	800455a <HAL_I2C_Master_Receive+0xc6>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004624:	2320      	movs	r3, #32
      return HAL_BUSY;
 8004626:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004628:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800462c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004630:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004634:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004636:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800463a:	f043 0320 	orr.w	r3, r3, #32
 800463e:	642b      	str	r3, [r5, #64]	; 0x40
}
 8004640:	b007      	add	sp, #28
 8004642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004646:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004648:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 800464c:	2120      	movs	r1, #32
      return HAL_ERROR;
 800464e:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004656:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004658:	6166      	str	r6, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800465a:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800465c:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004660:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004664:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004666:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800466a:	f043 0304 	orr.w	r3, r3, #4
 800466e:	642b      	str	r3, [r5, #64]	; 0x40
}
 8004670:	b007      	add	sp, #28
 8004672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (hi2c->XferSize == 1U)
 8004676:	2b01      	cmp	r3, #1
 8004678:	f000 8167 	beq.w	800494a <HAL_I2C_Master_Receive+0x4b6>
    else if (hi2c->XferSize == 2U)
 800467c:	2b02      	cmp	r3, #2
 800467e:	f000 8108 	beq.w	8004892 <HAL_I2C_Master_Receive+0x3fe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004682:	2100      	movs	r1, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004684:	6822      	ldr	r2, [r4, #0]
 8004686:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800468a:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800468c:	9104      	str	r1, [sp, #16]
 800468e:	6962      	ldr	r2, [r4, #20]
 8004690:	9204      	str	r2, [sp, #16]
 8004692:	69a2      	ldr	r2, [r4, #24]
 8004694:	9204      	str	r2, [sp, #16]
 8004696:	9a04      	ldr	r2, [sp, #16]
      if (hi2c->XferSize <= 3U)
 8004698:	2b03      	cmp	r3, #3
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800469a:	f8df 9248 	ldr.w	r9, [pc, #584]	; 80048e4 <HAL_I2C_Master_Receive+0x450>
 800469e:	f8df 8248 	ldr.w	r8, [pc, #584]	; 80048e8 <HAL_I2C_Master_Receive+0x454>
      if (hi2c->XferSize <= 3U)
 80046a2:	d834      	bhi.n	800470e <HAL_I2C_Master_Receive+0x27a>
        if (hi2c->XferSize == 1U)
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	f000 811b 	beq.w	80048e0 <HAL_I2C_Master_Receive+0x44c>
        else if (hi2c->XferSize == 2U)
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	f040 80b0 	bne.w	8004810 <HAL_I2C_Master_Receive+0x37c>
 80046b0:	1c7a      	adds	r2, r7, #1
 80046b2:	f040 8106 	bne.w	80048c2 <HAL_I2C_Master_Receive+0x42e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046b6:	6963      	ldr	r3, [r4, #20]
 80046b8:	075b      	lsls	r3, r3, #29
 80046ba:	d5fc      	bpl.n	80046b6 <HAL_I2C_Master_Receive+0x222>
 80046bc:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046be:	682b      	ldr	r3, [r5, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c0:	6a69      	ldr	r1, [r5, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c8:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80046ce:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	856b      	strh	r3, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80046d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80046d8:	3301      	adds	r3, #1
 80046da:	626b      	str	r3, [r5, #36]	; 0x24
          hi2c->XferSize--;
 80046dc:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80046de:	3b01      	subs	r3, #1
 80046e0:	852b      	strh	r3, [r5, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80046e2:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e4:	682b      	ldr	r3, [r5, #0]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80046ea:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 80046ec:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          hi2c->XferSize--;
 80046ee:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 80046f0:	3a01      	subs	r2, #1
 80046f2:	b292      	uxth	r2, r2
 80046f4:	856a      	strh	r2, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80046f6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
          hi2c->XferSize--;
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80046fc:	3201      	adds	r2, #1
          hi2c->XferSize--;
 80046fe:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->pBuffPtr++;
 8004700:	626a      	str	r2, [r5, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 8004702:	2b00      	cmp	r3, #0
 8004704:	f43f af40 	beq.w	8004588 <HAL_I2C_Master_Receive+0xf4>
      if (hi2c->XferSize <= 3U)
 8004708:	2b03      	cmp	r3, #3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800470a:	682c      	ldr	r4, [r5, #0]
      if (hi2c->XferSize <= 3U)
 800470c:	d9ca      	bls.n	80046a4 <HAL_I2C_Master_Receive+0x210>
 800470e:	b957      	cbnz	r7, 8004726 <HAL_I2C_Master_Receive+0x292>
 8004710:	e048      	b.n	80047a4 <HAL_I2C_Master_Receive+0x310>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004712:	6963      	ldr	r3, [r4, #20]
 8004714:	06da      	lsls	r2, r3, #27
 8004716:	f100 80fa 	bmi.w	800490e <HAL_I2C_Master_Receive+0x47a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800471a:	f7ff f853 	bl	80037c4 <HAL_GetTick>
 800471e:	1b80      	subs	r0, r0, r6
 8004720:	4287      	cmp	r7, r0
 8004722:	d348      	bcc.n	80047b6 <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004724:	682c      	ldr	r4, [r5, #0]
 8004726:	6963      	ldr	r3, [r4, #20]
 8004728:	0659      	lsls	r1, r3, #25
 800472a:	d5f2      	bpl.n	8004712 <HAL_I2C_Master_Receive+0x27e>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800472c:	6922      	ldr	r2, [r4, #16]
 800472e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004730:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8004732:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004734:	6829      	ldr	r1, [r5, #0]
        hi2c->XferCount--;
 8004736:	3b01      	subs	r3, #1
 8004738:	b29b      	uxth	r3, r3
 800473a:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 800473c:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 800473e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004740:	6948      	ldr	r0, [r1, #20]
        hi2c->XferSize--;
 8004742:	3b01      	subs	r3, #1
 8004744:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8004746:	1c54      	adds	r4, r2, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004748:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 800474a:	852b      	strh	r3, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 800474c:	626c      	str	r4, [r5, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800474e:	d5d8      	bpl.n	8004702 <HAL_I2C_Master_Receive+0x26e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004750:	690b      	ldr	r3, [r1, #16]
 8004752:	7053      	strb	r3, [r2, #1]
 8004754:	e7ca      	b.n	80046ec <HAL_I2C_Master_Receive+0x258>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004756:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004758:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800475a:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800475c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004760:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004764:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004766:	6829      	ldr	r1, [r5, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004768:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 800476c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004770:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004772:	680b      	ldr	r3, [r1, #0]
 8004774:	05dc      	lsls	r4, r3, #23
 8004776:	f140 808a 	bpl.w	800488e <HAL_I2C_Master_Receive+0x3fa>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800477a:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 800477e:	2001      	movs	r0, #1
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004780:	642b      	str	r3, [r5, #64]	; 0x40
 8004782:	e698      	b.n	80044b6 <HAL_I2C_Master_Receive+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004784:	6963      	ldr	r3, [r4, #20]
 8004786:	0798      	lsls	r0, r3, #30
 8004788:	f53f aef0 	bmi.w	800456c <HAL_I2C_Master_Receive+0xd8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800478c:	6963      	ldr	r3, [r4, #20]
 800478e:	0558      	lsls	r0, r3, #21
 8004790:	f53f af59 	bmi.w	8004646 <HAL_I2C_Master_Receive+0x1b2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004794:	f7ff f816 	bl	80037c4 <HAL_GetTick>
 8004798:	1b83      	subs	r3, r0, r6
 800479a:	429f      	cmp	r7, r3
 800479c:	d30b      	bcc.n	80047b6 <HAL_I2C_Master_Receive+0x322>
 800479e:	b157      	cbz	r7, 80047b6 <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047a0:	682c      	ldr	r4, [r5, #0]
 80047a2:	e6da      	b.n	800455a <HAL_I2C_Master_Receive+0xc6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047a4:	6963      	ldr	r3, [r4, #20]
 80047a6:	065b      	lsls	r3, r3, #25
 80047a8:	d4c0      	bmi.n	800472c <HAL_I2C_Master_Receive+0x298>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047aa:	6963      	ldr	r3, [r4, #20]
 80047ac:	06da      	lsls	r2, r3, #27
 80047ae:	f100 80ae 	bmi.w	800490e <HAL_I2C_Master_Receive+0x47a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b2:	f7ff f807 	bl	80037c4 <HAL_GetTick>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047b6:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80047b8:	2320      	movs	r3, #32
          return HAL_ERROR;
 80047ba:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047bc:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047be:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047c2:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047c6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80047c8:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047cc:	f043 0320 	orr.w	r3, r3, #32
 80047d0:	642b      	str	r3, [r5, #64]	; 0x40
}
 80047d2:	b007      	add	sp, #28
 80047d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047d8:	6963      	ldr	r3, [r4, #20]
 80047da:	071b      	lsls	r3, r3, #28
 80047dc:	f53f af01 	bmi.w	80045e2 <HAL_I2C_Master_Receive+0x14e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047e0:	6963      	ldr	r3, [r4, #20]
 80047e2:	055b      	lsls	r3, r3, #21
 80047e4:	f53f af2f 	bmi.w	8004646 <HAL_I2C_Master_Receive+0x1b2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e8:	f7fe ffec 	bl	80037c4 <HAL_GetTick>
 80047ec:	1b83      	subs	r3, r0, r6
 80047ee:	429f      	cmp	r7, r3
 80047f0:	d3e1      	bcc.n	80047b6 <HAL_I2C_Master_Receive+0x322>
 80047f2:	2f00      	cmp	r7, #0
 80047f4:	d0df      	beq.n	80047b6 <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047f6:	682c      	ldr	r4, [r5, #0]
 80047f8:	e6ea      	b.n	80045d0 <HAL_I2C_Master_Receive+0x13c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047fa:	6963      	ldr	r3, [r4, #20]
 80047fc:	075b      	lsls	r3, r3, #29
 80047fe:	d40c      	bmi.n	800481a <HAL_I2C_Master_Receive+0x386>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004800:	f7fe ffe0 	bl	80037c4 <HAL_GetTick>
 8004804:	1b80      	subs	r0, r0, r6
 8004806:	4287      	cmp	r7, r0
 8004808:	d3d5      	bcc.n	80047b6 <HAL_I2C_Master_Receive+0x322>
 800480a:	2f00      	cmp	r7, #0
 800480c:	d0d3      	beq.n	80047b6 <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800480e:	682c      	ldr	r4, [r5, #0]
 8004810:	1c79      	adds	r1, r7, #1
 8004812:	d1f2      	bne.n	80047fa <HAL_I2C_Master_Receive+0x366>
 8004814:	6963      	ldr	r3, [r4, #20]
 8004816:	075a      	lsls	r2, r3, #29
 8004818:	d5fc      	bpl.n	8004814 <HAL_I2C_Master_Receive+0x380>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004820:	6023      	str	r3, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004822:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004824:	682b      	ldr	r3, [r5, #0]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800482a:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800482c:	f8d9 3000 	ldr.w	r3, [r9]
          hi2c->pBuffPtr++;
 8004830:	6a69      	ldr	r1, [r5, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004832:	08db      	lsrs	r3, r3, #3
 8004834:	fba8 2303 	umull	r2, r3, r8, r3
          hi2c->XferCount--;
 8004838:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800483a:	0a1b      	lsrs	r3, r3, #8
 800483c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 8004840:	3a01      	subs	r2, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004842:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->XferCount--;
 8004846:	b292      	uxth	r2, r2
 8004848:	856a      	strh	r2, [r5, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800484a:	9300      	str	r3, [sp, #0]
          hi2c->XferSize--;
 800484c:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800484e:	3b01      	subs	r3, #1
 8004850:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->pBuffPtr++;
 8004852:	1c4b      	adds	r3, r1, #1
 8004854:	626b      	str	r3, [r5, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004856:	e003      	b.n	8004860 <HAL_I2C_Master_Receive+0x3cc>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004858:	682b      	ldr	r3, [r5, #0]
 800485a:	695a      	ldr	r2, [r3, #20]
 800485c:	0750      	lsls	r0, r2, #29
 800485e:	d468      	bmi.n	8004932 <HAL_I2C_Master_Receive+0x49e>
            count--;
 8004860:	9b00      	ldr	r3, [sp, #0]
 8004862:	3b01      	subs	r3, #1
 8004864:	9300      	str	r3, [sp, #0]
            if (count == 0U)
 8004866:	9b00      	ldr	r3, [sp, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1f5      	bne.n	8004858 <HAL_I2C_Master_Receive+0x3c4>
              hi2c->State               = HAL_I2C_STATE_READY;
 800486c:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 800486e:	632b      	str	r3, [r5, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004870:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004874:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004878:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800487a:	f042 0220 	orr.w	r2, r2, #32
 800487e:	642a      	str	r2, [r5, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004880:	b662      	cpsie	i
              return HAL_ERROR;
 8004882:	2001      	movs	r0, #1
              __HAL_UNLOCK(hi2c);
 8004884:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8004888:	b007      	add	sp, #28
 800488a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return HAL_ERROR;
 800488e:	2001      	movs	r0, #1
 8004890:	e611      	b.n	80044b6 <HAL_I2C_Master_Receive+0x22>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004898:	6023      	str	r3, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800489a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800489c:	2200      	movs	r2, #0
 800489e:	682b      	ldr	r3, [r5, #0]
 80048a0:	9203      	str	r2, [sp, #12]
 80048a2:	695a      	ldr	r2, [r3, #20]
 80048a4:	9203      	str	r2, [sp, #12]
 80048a6:	699a      	ldr	r2, [r3, #24]
 80048a8:	9203      	str	r2, [sp, #12]
 80048aa:	9a03      	ldr	r2, [sp, #12]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80048b4:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 80048b6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f43f ae65 	beq.w	8004588 <HAL_I2C_Master_Receive+0xf4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048be:	682c      	ldr	r4, [r5, #0]
 80048c0:	e6ea      	b.n	8004698 <HAL_I2C_Master_Receive+0x204>
 80048c2:	6963      	ldr	r3, [r4, #20]
 80048c4:	0758      	lsls	r0, r3, #29
 80048c6:	f53f aef9 	bmi.w	80046bc <HAL_I2C_Master_Receive+0x228>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ca:	f7fe ff7b 	bl	80037c4 <HAL_GetTick>
 80048ce:	1b80      	subs	r0, r0, r6
 80048d0:	4287      	cmp	r7, r0
 80048d2:	f4ff af70 	bcc.w	80047b6 <HAL_I2C_Master_Receive+0x322>
 80048d6:	2f00      	cmp	r7, #0
 80048d8:	f43f af6d 	beq.w	80047b6 <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048dc:	682c      	ldr	r4, [r5, #0]
 80048de:	e6e7      	b.n	80046b0 <HAL_I2C_Master_Receive+0x21c>
 80048e0:	b977      	cbnz	r7, 8004900 <HAL_I2C_Master_Receive+0x46c>
 80048e2:	e02d      	b.n	8004940 <HAL_I2C_Master_Receive+0x4ac>
 80048e4:	20000140 	.word	0x20000140
 80048e8:	14f8b589 	.word	0x14f8b589
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048ec:	6963      	ldr	r3, [r4, #20]
 80048ee:	06d8      	lsls	r0, r3, #27
 80048f0:	d40d      	bmi.n	800490e <HAL_I2C_Master_Receive+0x47a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f2:	f7fe ff67 	bl	80037c4 <HAL_GetTick>
 80048f6:	1b80      	subs	r0, r0, r6
 80048f8:	4287      	cmp	r7, r0
 80048fa:	f4ff af5c 	bcc.w	80047b6 <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048fe:	682c      	ldr	r4, [r5, #0]
 8004900:	6963      	ldr	r3, [r4, #20]
 8004902:	065b      	lsls	r3, r3, #25
 8004904:	d5f2      	bpl.n	80048ec <HAL_I2C_Master_Receive+0x458>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004906:	6922      	ldr	r2, [r4, #16]
 8004908:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800490a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800490c:	e6ee      	b.n	80046ec <HAL_I2C_Master_Receive+0x258>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800490e:	2300      	movs	r3, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004910:	f06f 0110 	mvn.w	r1, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8004914:	2220      	movs	r2, #32
          return HAL_ERROR;
 8004916:	2001      	movs	r0, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004918:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800491a:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800491c:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004920:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004924:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004926:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800492a:	642a      	str	r2, [r5, #64]	; 0x40
}
 800492c:	b007      	add	sp, #28
 800492e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004938:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	704b      	strb	r3, [r1, #1]
 800493e:	e6c6      	b.n	80046ce <HAL_I2C_Master_Receive+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004940:	6963      	ldr	r3, [r4, #20]
 8004942:	0659      	lsls	r1, r3, #25
 8004944:	f57f af31 	bpl.w	80047aa <HAL_I2C_Master_Receive+0x316>
 8004948:	e7dd      	b.n	8004906 <HAL_I2C_Master_Receive+0x472>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004950:	6023      	str	r3, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004952:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004954:	2200      	movs	r2, #0
 8004956:	682b      	ldr	r3, [r5, #0]
 8004958:	9202      	str	r2, [sp, #8]
 800495a:	695a      	ldr	r2, [r3, #20]
 800495c:	9202      	str	r2, [sp, #8]
 800495e:	699a      	ldr	r2, [r3, #24]
 8004960:	9202      	str	r2, [sp, #8]
 8004962:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800496a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800496c:	b662      	cpsie	i
}
 800496e:	e7a2      	b.n	80048b6 <HAL_I2C_Master_Receive+0x422>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004970:	6963      	ldr	r3, [r4, #20]
 8004972:	0798      	lsls	r0, r3, #30
 8004974:	f53f ae41 	bmi.w	80045fa <HAL_I2C_Master_Receive+0x166>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004978:	6963      	ldr	r3, [r4, #20]
 800497a:	0558      	lsls	r0, r3, #21
 800497c:	f53f ae63 	bmi.w	8004646 <HAL_I2C_Master_Receive+0x1b2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004980:	f7fe ff20 	bl	80037c4 <HAL_GetTick>
 8004984:	1b83      	subs	r3, r0, r6
 8004986:	429f      	cmp	r7, r3
 8004988:	f4ff af15 	bcc.w	80047b6 <HAL_I2C_Master_Receive+0x322>
 800498c:	2f00      	cmp	r7, #0
 800498e:	f43f af12 	beq.w	80047b6 <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004992:	682c      	ldr	r4, [r5, #0]
 8004994:	e628      	b.n	80045e8 <HAL_I2C_Master_Receive+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004996:	6963      	ldr	r3, [r4, #20]
 8004998:	07db      	lsls	r3, r3, #31
 800499a:	f53f ae3f 	bmi.w	800461c <HAL_I2C_Master_Receive+0x188>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499e:	f7fe ff11 	bl	80037c4 <HAL_GetTick>
 80049a2:	1b83      	subs	r3, r0, r6
 80049a4:	429f      	cmp	r7, r3
 80049a6:	f4ff aed6 	bcc.w	8004756 <HAL_I2C_Master_Receive+0x2c2>
 80049aa:	2f00      	cmp	r7, #0
 80049ac:	f43f aed3 	beq.w	8004756 <HAL_I2C_Master_Receive+0x2c2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049b0:	682c      	ldr	r4, [r5, #0]
 80049b2:	e62d      	b.n	8004610 <HAL_I2C_Master_Receive+0x17c>

080049b4 <HAL_I2C_Mem_Write>:
{
 80049b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b8:	4604      	mov	r4, r0
 80049ba:	b083      	sub	sp, #12
 80049bc:	4699      	mov	r9, r3
 80049be:	460f      	mov	r7, r1
 80049c0:	4690      	mov	r8, r2
 80049c2:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80049c6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 80049c8:	f7fe fefc 	bl	80037c4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80049cc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	d004      	beq.n	80049de <HAL_I2C_Mem_Write+0x2a>
    return HAL_BUSY;
 80049d4:	2702      	movs	r7, #2
}
 80049d6:	4638      	mov	r0, r7
 80049d8:	b003      	add	sp, #12
 80049da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049de:	4605      	mov	r5, r0
 80049e0:	e005      	b.n	80049ee <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e2:	f7fe feef 	bl	80037c4 <HAL_GetTick>
 80049e6:	1b40      	subs	r0, r0, r5
 80049e8:	2819      	cmp	r0, #25
 80049ea:	f200 80c0 	bhi.w	8004b6e <HAL_I2C_Mem_Write+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049ee:	6820      	ldr	r0, [r4, #0]
 80049f0:	6983      	ldr	r3, [r0, #24]
 80049f2:	ea6f 0c03 	mvn.w	ip, r3
 80049f6:	f01c 0b02 	ands.w	fp, ip, #2
 80049fa:	d0f2      	beq.n	80049e2 <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 80049fc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d0e7      	beq.n	80049d4 <HAL_I2C_Mem_Write+0x20>
 8004a04:	2301      	movs	r3, #1
 8004a06:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a0a:	6803      	ldr	r3, [r0, #0]
 8004a0c:	07db      	lsls	r3, r3, #31
 8004a0e:	f140 808e 	bpl.w	8004b2e <HAL_I2C_Mem_Write+0x17a>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a12:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a14:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a18:	f04f 0c00 	mov.w	ip, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a1c:	f04f 0821 	mov.w	r8, #33	; 0x21
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a20:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a22:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a24:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a26:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8004a2a:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8004a2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004a2e:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a30:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a34:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a38:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a3c:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004a40:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a44:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8004a46:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a48:	486a      	ldr	r0, [pc, #424]	; (8004bf4 <HAL_I2C_Mem_Write+0x240>)
 8004a4a:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	f7ff f84b 	bl	8003ae8 <I2C_RequestMemoryWrite>
 8004a52:	4607      	mov	r7, r0
 8004a54:	bb00      	cbnz	r0, 8004a98 <HAL_I2C_Mem_Write+0xe4>
    while (hi2c->XferSize > 0U)
 8004a56:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 80ba 	beq.w	8004bd2 <HAL_I2C_Mem_Write+0x21e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	1c71      	adds	r1, r6, #1
 8004a62:	d169      	bne.n	8004b38 <HAL_I2C_Mem_Write+0x184>
 8004a64:	695a      	ldr	r2, [r3, #20]
 8004a66:	0612      	lsls	r2, r2, #24
 8004a68:	d41b      	bmi.n	8004aa2 <HAL_I2C_Mem_Write+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a6a:	695a      	ldr	r2, [r3, #20]
 8004a6c:	0550      	lsls	r0, r2, #21
 8004a6e:	d5f9      	bpl.n	8004a64 <HAL_I2C_Mem_Write+0xb0>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a70:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a72:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a76:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a78:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a7a:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a7c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a80:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a84:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004a86:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a8a:	f043 0304 	orr.w	r3, r3, #4
 8004a8e:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	f000 808a 	beq.w	8004bac <HAL_I2C_Mem_Write+0x1f8>
      return HAL_ERROR;
 8004a98:	2701      	movs	r7, #1
}
 8004a9a:	4638      	mov	r0, r7
 8004a9c:	b003      	add	sp, #12
 8004a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aa2:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004aa4:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	f812 eb01 	ldrb.w	lr, [r2], #1
      hi2c->XferSize--;
 8004aae:	f10c 31ff 	add.w	r1, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ab2:	f8c3 e010 	str.w	lr, [r3, #16]
      hi2c->pBuffPtr++;
 8004ab6:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004ab8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004aba:	b289      	uxth	r1, r1
      hi2c->XferCount--;
 8004abc:	3a01      	subs	r2, #1
 8004abe:	b292      	uxth	r2, r2
 8004ac0:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ac2:	695a      	ldr	r2, [r3, #20]
      hi2c->XferSize--;
 8004ac4:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ac6:	0752      	lsls	r2, r2, #29
 8004ac8:	d52e      	bpl.n	8004b28 <HAL_I2C_Mem_Write+0x174>
 8004aca:	bb09      	cbnz	r1, 8004b10 <HAL_I2C_Mem_Write+0x15c>
 8004acc:	1c72      	adds	r2, r6, #1
 8004ace:	d174      	bne.n	8004bba <HAL_I2C_Mem_Write+0x206>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ad0:	695a      	ldr	r2, [r3, #20]
 8004ad2:	0750      	lsls	r0, r2, #29
 8004ad4:	d45d      	bmi.n	8004b92 <HAL_I2C_Mem_Write+0x1de>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ad6:	695a      	ldr	r2, [r3, #20]
 8004ad8:	0551      	lsls	r1, r2, #21
 8004ada:	d5f9      	bpl.n	8004ad0 <HAL_I2C_Mem_Write+0x11c>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004adc:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ade:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ae2:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae4:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae6:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ae8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aec:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004af0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004af2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004af6:	f043 0304 	orr.w	r3, r3, #4
 8004afa:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004afc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d1ca      	bne.n	8004a98 <HAL_I2C_Mem_Write+0xe4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b02:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 8004b04:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b06:	6813      	ldr	r3, [r2, #0]
 8004b08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e762      	b.n	80049d6 <HAL_I2C_Mem_Write+0x22>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b10:	7842      	ldrb	r2, [r0, #1]
        hi2c->XferSize--;
 8004b12:	f1ac 0102 	sub.w	r1, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b16:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8004b18:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8004b1a:	b289      	uxth	r1, r1
        hi2c->XferCount--;
 8004b1c:	3a01      	subs	r2, #1
        hi2c->pBuffPtr++;
 8004b1e:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8004b20:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8004b22:	6260      	str	r0, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8004b24:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004b26:	8562      	strh	r2, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b28:	2900      	cmp	r1, #0
 8004b2a:	d199      	bne.n	8004a60 <HAL_I2C_Mem_Write+0xac>
 8004b2c:	e7ce      	b.n	8004acc <HAL_I2C_Mem_Write+0x118>
      __HAL_I2C_ENABLE(hi2c);
 8004b2e:	6803      	ldr	r3, [r0, #0]
 8004b30:	f043 0301 	orr.w	r3, r3, #1
 8004b34:	6003      	str	r3, [r0, #0]
 8004b36:	e76c      	b.n	8004a12 <HAL_I2C_Mem_Write+0x5e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b38:	695a      	ldr	r2, [r3, #20]
 8004b3a:	0611      	lsls	r1, r2, #24
 8004b3c:	d4b1      	bmi.n	8004aa2 <HAL_I2C_Mem_Write+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b3e:	695a      	ldr	r2, [r3, #20]
 8004b40:	0550      	lsls	r0, r2, #21
 8004b42:	d495      	bmi.n	8004a70 <HAL_I2C_Mem_Write+0xbc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b44:	f7fe fe3e 	bl	80037c4 <HAL_GetTick>
 8004b48:	1b40      	subs	r0, r0, r5
 8004b4a:	4286      	cmp	r6, r0
 8004b4c:	d301      	bcc.n	8004b52 <HAL_I2C_Mem_Write+0x19e>
 8004b4e:	2e00      	cmp	r6, #0
 8004b50:	d185      	bne.n	8004a5e <HAL_I2C_Mem_Write+0xaa>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b52:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b54:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b56:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b5c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b60:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004b62:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b66:	f043 0320 	orr.w	r3, r3, #32
 8004b6a:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004b6c:	e790      	b.n	8004a90 <HAL_I2C_Mem_Write+0xdc>
      return HAL_BUSY;
 8004b6e:	2702      	movs	r7, #2
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b70:	2320      	movs	r3, #32
}
 8004b72:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b74:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b7c:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b80:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004b82:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b86:	f043 0320 	orr.w	r3, r3, #32
 8004b8a:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004b8c:	b003      	add	sp, #12
 8004b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b92:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004b94:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b9c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b9e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004ba2:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba6:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 8004baa:	e714      	b.n	80049d6 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bac:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 8004bae:	2701      	movs	r7, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb0:	6813      	ldr	r3, [r2, #0]
 8004bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	e70d      	b.n	80049d6 <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bba:	695a      	ldr	r2, [r3, #20]
 8004bbc:	0752      	lsls	r2, r2, #29
 8004bbe:	d4e8      	bmi.n	8004b92 <HAL_I2C_Mem_Write+0x1de>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bc0:	695a      	ldr	r2, [r3, #20]
 8004bc2:	0551      	lsls	r1, r2, #21
 8004bc4:	d48a      	bmi.n	8004adc <HAL_I2C_Mem_Write+0x128>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc6:	f7fe fdfd 	bl	80037c4 <HAL_GetTick>
 8004bca:	1b43      	subs	r3, r0, r5
 8004bcc:	429e      	cmp	r6, r3
 8004bce:	d302      	bcc.n	8004bd6 <HAL_I2C_Mem_Write+0x222>
 8004bd0:	b10e      	cbz	r6, 8004bd6 <HAL_I2C_Mem_Write+0x222>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	e77a      	b.n	8004acc <HAL_I2C_Mem_Write+0x118>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bd6:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bd8:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bda:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bdc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004be0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004be4:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004be6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bea:	f043 0320 	orr.w	r3, r3, #32
 8004bee:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004bf0:	e784      	b.n	8004afc <HAL_I2C_Mem_Write+0x148>
 8004bf2:	bf00      	nop
 8004bf4:	ffff0000 	.word	0xffff0000

08004bf8 <HAL_I2C_Mem_Read>:
{
 8004bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint32_t count = 0U;
 8004bfc:	2400      	movs	r4, #0
{
 8004bfe:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8004c00:	9403      	str	r4, [sp, #12]
{
 8004c02:	4604      	mov	r4, r0
 8004c04:	4699      	mov	r9, r3
 8004c06:	460f      	mov	r7, r1
 8004c08:	4690      	mov	r8, r2
 8004c0a:	f8bd a04c 	ldrh.w	sl, [sp, #76]	; 0x4c
 8004c0e:	9e14      	ldr	r6, [sp, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
 8004c10:	f7fe fdd8 	bl	80037c4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c14:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004c18:	2b20      	cmp	r3, #32
 8004c1a:	d004      	beq.n	8004c26 <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 8004c1c:	2702      	movs	r7, #2
}
 8004c1e:	4638      	mov	r0, r7
 8004c20:	b009      	add	sp, #36	; 0x24
 8004c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c26:	4605      	mov	r5, r0
 8004c28:	e005      	b.n	8004c36 <HAL_I2C_Mem_Read+0x3e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2a:	f7fe fdcb 	bl	80037c4 <HAL_GetTick>
 8004c2e:	1b40      	subs	r0, r0, r5
 8004c30:	2819      	cmp	r0, #25
 8004c32:	f200 80c1 	bhi.w	8004db8 <HAL_I2C_Mem_Read+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c36:	6820      	ldr	r0, [r4, #0]
 8004c38:	6983      	ldr	r3, [r0, #24]
 8004c3a:	ea6f 0c03 	mvn.w	ip, r3
 8004c3e:	f01c 0b02 	ands.w	fp, ip, #2
 8004c42:	d0f2      	beq.n	8004c2a <HAL_I2C_Mem_Read+0x32>
    __HAL_LOCK(hi2c);
 8004c44:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d0e7      	beq.n	8004c1c <HAL_I2C_Mem_Read+0x24>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c52:	6803      	ldr	r3, [r0, #0]
 8004c54:	07d9      	lsls	r1, r3, #31
 8004c56:	d539      	bpl.n	8004ccc <HAL_I2C_Mem_Read+0xd4>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c58:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c5a:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c5e:	f04f 0c00 	mov.w	ip, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c62:	f04f 0822 	mov.w	r8, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c66:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c68:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c6a:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c6c:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8004c70:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8004c72:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004c74:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c76:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c7a:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c7e:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c82:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004c86:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c8a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8004c8c:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c8e:	489c      	ldr	r0, [pc, #624]	; (8004f00 <HAL_I2C_Mem_Read+0x308>)
 8004c90:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c92:	4620      	mov	r0, r4
 8004c94:	f7ff f846 	bl	8003d24 <I2C_RequestMemoryRead>
 8004c98:	4607      	mov	r7, r0
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	f040 809e 	bne.w	8004ddc <HAL_I2C_Mem_Read+0x1e4>
    if (hi2c->XferSize == 0U)
 8004ca0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004ca2:	b9c2      	cbnz	r2, 8004cd6 <HAL_I2C_Mem_Read+0xde>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	9004      	str	r0, [sp, #16]
 8004ca8:	695a      	ldr	r2, [r3, #20]
 8004caa:	9204      	str	r2, [sp, #16]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	9204      	str	r2, [sp, #16]
 8004cb0:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb8:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cba:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004cbc:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8004cbe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8004cc2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8004cca:	e7a8      	b.n	8004c1e <HAL_I2C_Mem_Read+0x26>
      __HAL_I2C_ENABLE(hi2c);
 8004ccc:	6803      	ldr	r3, [r0, #0]
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	6003      	str	r3, [r0, #0]
 8004cd4:	e7c0      	b.n	8004c58 <HAL_I2C_Mem_Read+0x60>
    else if (hi2c->XferSize == 1U)
 8004cd6:	2a01      	cmp	r2, #1
 8004cd8:	f000 8143 	beq.w	8004f62 <HAL_I2C_Mem_Read+0x36a>
    else if (hi2c->XferSize == 2U)
 8004cdc:	2a02      	cmp	r2, #2
 8004cde:	f000 80cd 	beq.w	8004e7c <HAL_I2C_Mem_Read+0x284>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	6819      	ldr	r1, [r3, #0]
 8004ce6:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8004cea:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cec:	9007      	str	r0, [sp, #28]
 8004cee:	6959      	ldr	r1, [r3, #20]
 8004cf0:	9107      	str	r1, [sp, #28]
 8004cf2:	6999      	ldr	r1, [r3, #24]
 8004cf4:	9107      	str	r1, [sp, #28]
 8004cf6:	9907      	ldr	r1, [sp, #28]
      if (hi2c->XferSize <= 3U)
 8004cf8:	2a03      	cmp	r2, #3
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cfa:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8004f04 <HAL_I2C_Mem_Read+0x30c>
 8004cfe:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8004f08 <HAL_I2C_Mem_Read+0x310>
      if (hi2c->XferSize <= 3U)
 8004d02:	d832      	bhi.n	8004d6a <HAL_I2C_Mem_Read+0x172>
        if (hi2c->XferSize == 1U)
 8004d04:	2a01      	cmp	r2, #1
 8004d06:	f000 80f8 	beq.w	8004efa <HAL_I2C_Mem_Read+0x302>
        else if (hi2c->XferSize == 2U)
 8004d0a:	2a02      	cmp	r2, #2
 8004d0c:	d176      	bne.n	8004dfc <HAL_I2C_Mem_Read+0x204>
 8004d0e:	1c71      	adds	r1, r6, #1
 8004d10:	f040 80cc 	bne.w	8004eac <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d14:	695a      	ldr	r2, [r3, #20]
 8004d16:	0752      	lsls	r2, r2, #29
 8004d18:	d5fc      	bpl.n	8004d14 <HAL_I2C_Mem_Read+0x11c>
  __ASM volatile ("cpsid i" : : : "memory");
 8004d1a:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d1c:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d26:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8004d2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004d34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d36:	3301      	adds	r3, #1
 8004d38:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004d3a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	8523      	strh	r3, [r4, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004d40:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	691a      	ldr	r2, [r3, #16]
 8004d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d48:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8004d4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8004d4c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004d56:	3a01      	subs	r2, #1
 8004d58:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8004d5a:	3301      	adds	r3, #1
          hi2c->XferSize--;
 8004d5c:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8004d5e:	6263      	str	r3, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 8004d60:	2a00      	cmp	r2, #0
 8004d62:	d0aa      	beq.n	8004cba <HAL_I2C_Mem_Read+0xc2>
      if (hi2c->XferSize <= 3U)
 8004d64:	2a03      	cmp	r2, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d66:	6823      	ldr	r3, [r4, #0]
      if (hi2c->XferSize <= 3U)
 8004d68:	d9cc      	bls.n	8004d04 <HAL_I2C_Mem_Read+0x10c>
 8004d6a:	b95e      	cbnz	r6, 8004d84 <HAL_I2C_Mem_Read+0x18c>
 8004d6c:	e0aa      	b.n	8004ec4 <HAL_I2C_Mem_Read+0x2cc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d6e:	695a      	ldr	r2, [r3, #20]
 8004d70:	06d0      	lsls	r0, r2, #27
 8004d72:	f100 80d8 	bmi.w	8004f26 <HAL_I2C_Mem_Read+0x32e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d76:	f7fe fd25 	bl	80037c4 <HAL_GetTick>
 8004d7a:	1b40      	subs	r0, r0, r5
 8004d7c:	4286      	cmp	r6, r0
 8004d7e:	f0c0 80aa 	bcc.w	8004ed6 <HAL_I2C_Mem_Read+0x2de>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	695a      	ldr	r2, [r3, #20]
 8004d86:	0652      	lsls	r2, r2, #25
 8004d88:	d5f1      	bpl.n	8004d6e <HAL_I2C_Mem_Read+0x176>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d8e:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8004d90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d92:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8004d98:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004d9a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d9c:	6948      	ldr	r0, [r1, #20]
        hi2c->pBuffPtr++;
 8004d9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8004da0:	3a01      	subs	r2, #1
 8004da2:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8004da4:	f103 0c01 	add.w	ip, r3, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004da8:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8004daa:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004dac:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004db0:	d5d6      	bpl.n	8004d60 <HAL_I2C_Mem_Read+0x168>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db2:	690a      	ldr	r2, [r1, #16]
 8004db4:	705a      	strb	r2, [r3, #1]
 8004db6:	e7c8      	b.n	8004d4a <HAL_I2C_Mem_Read+0x152>
      return HAL_BUSY;
 8004db8:	2702      	movs	r7, #2
        hi2c->State             = HAL_I2C_STATE_READY;
 8004dba:	2320      	movs	r3, #32
}
 8004dbc:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004dbe:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004dc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004dc6:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004dca:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004dcc:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004dd0:	f043 0320 	orr.w	r3, r3, #32
 8004dd4:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004dd6:	b009      	add	sp, #36	; 0x24
 8004dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return HAL_ERROR;
 8004ddc:	2701      	movs	r7, #1
}
 8004dde:	4638      	mov	r0, r7
 8004de0:	b009      	add	sp, #36	; 0x24
 8004de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004de6:	695a      	ldr	r2, [r3, #20]
 8004de8:	0752      	lsls	r2, r2, #29
 8004dea:	d40c      	bmi.n	8004e06 <HAL_I2C_Mem_Read+0x20e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dec:	f7fe fcea 	bl	80037c4 <HAL_GetTick>
 8004df0:	1b40      	subs	r0, r0, r5
 8004df2:	4286      	cmp	r6, r0
 8004df4:	d36f      	bcc.n	8004ed6 <HAL_I2C_Mem_Read+0x2de>
 8004df6:	2e00      	cmp	r6, #0
 8004df8:	d06d      	beq.n	8004ed6 <HAL_I2C_Mem_Read+0x2de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	1c70      	adds	r0, r6, #1
 8004dfe:	d1f2      	bne.n	8004de6 <HAL_I2C_Mem_Read+0x1ee>
 8004e00:	695a      	ldr	r2, [r3, #20]
 8004e02:	0751      	lsls	r1, r2, #29
 8004e04:	d5fc      	bpl.n	8004e00 <HAL_I2C_Mem_Read+0x208>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e0e:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e16:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e18:	f8d9 3000 	ldr.w	r3, [r9]
          hi2c->pBuffPtr++;
 8004e1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e1e:	08db      	lsrs	r3, r3, #3
 8004e20:	fba8 2303 	umull	r2, r3, r8, r3
          hi2c->XferCount--;
 8004e24:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e26:	0a1b      	lsrs	r3, r3, #8
 8004e28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 8004e2c:	3a01      	subs	r2, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e2e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->XferCount--;
 8004e32:	b292      	uxth	r2, r2
 8004e34:	8562      	strh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e36:	9303      	str	r3, [sp, #12]
          hi2c->XferSize--;
 8004e38:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8004e3e:	1c4b      	adds	r3, r1, #1
 8004e40:	6263      	str	r3, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e42:	e003      	b.n	8004e4c <HAL_I2C_Mem_Read+0x254>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	695a      	ldr	r2, [r3, #20]
 8004e48:	0750      	lsls	r0, r2, #29
 8004e4a:	d47f      	bmi.n	8004f4c <HAL_I2C_Mem_Read+0x354>
            count--;
 8004e4c:	9b03      	ldr	r3, [sp, #12]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8004e52:	9b03      	ldr	r3, [sp, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1f5      	bne.n	8004e44 <HAL_I2C_Mem_Read+0x24c>
              hi2c->State               = HAL_I2C_STATE_READY;
 8004e58:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004e5a:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004e5c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e60:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e64:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e66:	f042 0220 	orr.w	r2, r2, #32
 8004e6a:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004e6c:	b662      	cpsie	i
              return HAL_ERROR;
 8004e6e:	2701      	movs	r7, #1
}
 8004e70:	4638      	mov	r0, r7
              __HAL_UNLOCK(hi2c);
 8004e72:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004e76:	b009      	add	sp, #36	; 0x24
 8004e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e7c:	6822      	ldr	r2, [r4, #0]
 8004e7e:	6813      	ldr	r3, [r2, #0]
 8004e80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e84:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e86:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	9006      	str	r0, [sp, #24]
 8004e8c:	695a      	ldr	r2, [r3, #20]
 8004e8e:	9206      	str	r2, [sp, #24]
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	9206      	str	r2, [sp, #24]
 8004e94:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e9e:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 8004ea0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004ea2:	2a00      	cmp	r2, #0
 8004ea4:	f43f af09 	beq.w	8004cba <HAL_I2C_Mem_Read+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	e725      	b.n	8004cf8 <HAL_I2C_Mem_Read+0x100>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	075b      	lsls	r3, r3, #29
 8004eb0:	f53f af33 	bmi.w	8004d1a <HAL_I2C_Mem_Read+0x122>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb4:	f7fe fc86 	bl	80037c4 <HAL_GetTick>
 8004eb8:	1b40      	subs	r0, r0, r5
 8004eba:	4286      	cmp	r6, r0
 8004ebc:	d30b      	bcc.n	8004ed6 <HAL_I2C_Mem_Read+0x2de>
 8004ebe:	b156      	cbz	r6, 8004ed6 <HAL_I2C_Mem_Read+0x2de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	e724      	b.n	8004d0e <HAL_I2C_Mem_Read+0x116>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ec4:	695a      	ldr	r2, [r3, #20]
 8004ec6:	0652      	lsls	r2, r2, #25
 8004ec8:	f53f af5f 	bmi.w	8004d8a <HAL_I2C_Mem_Read+0x192>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ecc:	695a      	ldr	r2, [r3, #20]
 8004ece:	06d1      	lsls	r1, r2, #27
 8004ed0:	d429      	bmi.n	8004f26 <HAL_I2C_Mem_Read+0x32e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed2:	f7fe fc77 	bl	80037c4 <HAL_GetTick>
          return HAL_ERROR;
 8004ed6:	2701      	movs	r7, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ed8:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004eda:	2320      	movs	r3, #32
}
 8004edc:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ede:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ee0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ee4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ee8:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004eea:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004eee:	f043 0320 	orr.w	r3, r3, #32
 8004ef2:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004ef4:	b009      	add	sp, #36	; 0x24
 8004ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004efa:	b96e      	cbnz	r6, 8004f18 <HAL_I2C_Mem_Read+0x320>
 8004efc:	e02d      	b.n	8004f5a <HAL_I2C_Mem_Read+0x362>
 8004efe:	bf00      	nop
 8004f00:	ffff0000 	.word	0xffff0000
 8004f04:	20000140 	.word	0x20000140
 8004f08:	14f8b589 	.word	0x14f8b589
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0c:	f7fe fc5a 	bl	80037c4 <HAL_GetTick>
 8004f10:	1b40      	subs	r0, r0, r5
 8004f12:	4286      	cmp	r6, r0
 8004f14:	d3df      	bcc.n	8004ed6 <HAL_I2C_Mem_Read+0x2de>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	695a      	ldr	r2, [r3, #20]
 8004f1a:	0651      	lsls	r1, r2, #25
 8004f1c:	f53f af12 	bmi.w	8004d44 <HAL_I2C_Mem_Read+0x14c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f20:	695a      	ldr	r2, [r3, #20]
 8004f22:	06d2      	lsls	r2, r2, #27
 8004f24:	d5f2      	bpl.n	8004f0c <HAL_I2C_Mem_Read+0x314>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f26:	f06f 0010 	mvn.w	r0, #16
          return HAL_ERROR;
 8004f2a:	2701      	movs	r7, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f2c:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f2e:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f30:	6158      	str	r0, [r3, #20]
}
 8004f32:	4638      	mov	r0, r7
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f34:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f36:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f3a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004f40:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f44:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004f46:	b009      	add	sp, #36	; 0x24
 8004f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f52:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	704b      	strb	r3, [r1, #1]
 8004f58:	e6e8      	b.n	8004d2c <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f5a:	695a      	ldr	r2, [r3, #20]
 8004f5c:	0650      	lsls	r0, r2, #25
 8004f5e:	d5b5      	bpl.n	8004ecc <HAL_I2C_Mem_Read+0x2d4>
 8004f60:	e6f0      	b.n	8004d44 <HAL_I2C_Mem_Read+0x14c>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f62:	6822      	ldr	r2, [r4, #0]
 8004f64:	6813      	ldr	r3, [r2, #0]
 8004f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f6a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f6c:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	9005      	str	r0, [sp, #20]
 8004f72:	695a      	ldr	r2, [r3, #20]
 8004f74:	9205      	str	r2, [sp, #20]
 8004f76:	699a      	ldr	r2, [r3, #24]
 8004f78:	9205      	str	r2, [sp, #20]
 8004f7a:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004f84:	b662      	cpsie	i
}
 8004f86:	e78b      	b.n	8004ea0 <HAL_I2C_Mem_Read+0x2a8>

08004f88 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	f000 81b6 	beq.w	80052fa <HAL_RCC_OscConfig+0x372>
{
 8004f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f92:	6803      	ldr	r3, [r0, #0]
 8004f94:	4604      	mov	r4, r0
 8004f96:	07dd      	lsls	r5, r3, #31
{
 8004f98:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f9a:	d535      	bpl.n	8005008 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f9c:	499a      	ldr	r1, [pc, #616]	; (8005208 <HAL_RCC_OscConfig+0x280>)
 8004f9e:	684a      	ldr	r2, [r1, #4]
 8004fa0:	f002 020c 	and.w	r2, r2, #12
 8004fa4:	2a04      	cmp	r2, #4
 8004fa6:	f000 80ef 	beq.w	8005188 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004faa:	684a      	ldr	r2, [r1, #4]
 8004fac:	f002 020c 	and.w	r2, r2, #12
 8004fb0:	2a08      	cmp	r2, #8
 8004fb2:	f000 80e5 	beq.w	8005180 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fb6:	6863      	ldr	r3, [r4, #4]
 8004fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fbc:	d010      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x58>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 810c 	beq.w	80051dc <HAL_RCC_OscConfig+0x254>
 8004fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fc8:	f000 8182 	beq.w	80052d0 <HAL_RCC_OscConfig+0x348>
 8004fcc:	4b8e      	ldr	r3, [pc, #568]	; (8005208 <HAL_RCC_OscConfig+0x280>)
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e004      	b.n	8004fea <HAL_RCC_OscConfig+0x62>
 8004fe0:	4a89      	ldr	r2, [pc, #548]	; (8005208 <HAL_RCC_OscConfig+0x280>)
 8004fe2:	6813      	ldr	r3, [r2, #0]
 8004fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fea:	f7fe fbeb 	bl	80037c4 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fee:	4e86      	ldr	r6, [pc, #536]	; (8005208 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8004ff0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff2:	e005      	b.n	8005000 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ff4:	f7fe fbe6 	bl	80037c4 <HAL_GetTick>
 8004ff8:	1b40      	subs	r0, r0, r5
 8004ffa:	2864      	cmp	r0, #100	; 0x64
 8004ffc:	f200 80ea 	bhi.w	80051d4 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005000:	6833      	ldr	r3, [r6, #0]
 8005002:	039a      	lsls	r2, r3, #14
 8005004:	d5f6      	bpl.n	8004ff4 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	079f      	lsls	r7, r3, #30
 800500a:	d528      	bpl.n	800505e <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800500c:	4a7e      	ldr	r2, [pc, #504]	; (8005208 <HAL_RCC_OscConfig+0x280>)
 800500e:	6851      	ldr	r1, [r2, #4]
 8005010:	f011 0f0c 	tst.w	r1, #12
 8005014:	f000 808d 	beq.w	8005132 <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005018:	6851      	ldr	r1, [r2, #4]
 800501a:	f001 010c 	and.w	r1, r1, #12
 800501e:	2908      	cmp	r1, #8
 8005020:	f000 8083 	beq.w	800512a <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005024:	6923      	ldr	r3, [r4, #16]
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 8118 	beq.w	800525c <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800502c:	2201      	movs	r2, #1
 800502e:	4b77      	ldr	r3, [pc, #476]	; (800520c <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005030:	4e75      	ldr	r6, [pc, #468]	; (8005208 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8005032:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005034:	f7fe fbc6 	bl	80037c4 <HAL_GetTick>
 8005038:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800503a:	e005      	b.n	8005048 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800503c:	f7fe fbc2 	bl	80037c4 <HAL_GetTick>
 8005040:	1b40      	subs	r0, r0, r5
 8005042:	2802      	cmp	r0, #2
 8005044:	f200 80c6 	bhi.w	80051d4 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005048:	6833      	ldr	r3, [r6, #0]
 800504a:	0798      	lsls	r0, r3, #30
 800504c:	d5f6      	bpl.n	800503c <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800504e:	6833      	ldr	r3, [r6, #0]
 8005050:	6962      	ldr	r2, [r4, #20]
 8005052:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005056:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800505a:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	071a      	lsls	r2, r3, #28
 8005060:	d41f      	bmi.n	80050a2 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005062:	075d      	lsls	r5, r3, #29
 8005064:	d542      	bpl.n	80050ec <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005066:	4b68      	ldr	r3, [pc, #416]	; (8005208 <HAL_RCC_OscConfig+0x280>)
 8005068:	69da      	ldr	r2, [r3, #28]
 800506a:	00d0      	lsls	r0, r2, #3
 800506c:	d57d      	bpl.n	800516a <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 800506e:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005070:	4e67      	ldr	r6, [pc, #412]	; (8005210 <HAL_RCC_OscConfig+0x288>)
 8005072:	6833      	ldr	r3, [r6, #0]
 8005074:	05d9      	lsls	r1, r3, #23
 8005076:	f140 809d 	bpl.w	80051b4 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800507a:	68e3      	ldr	r3, [r4, #12]
 800507c:	2b01      	cmp	r3, #1
 800507e:	f000 80fe 	beq.w	800527e <HAL_RCC_OscConfig+0x2f6>
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 80ca 	beq.w	800521c <HAL_RCC_OscConfig+0x294>
 8005088:	2b05      	cmp	r3, #5
 800508a:	4b5f      	ldr	r3, [pc, #380]	; (8005208 <HAL_RCC_OscConfig+0x280>)
 800508c:	6a1a      	ldr	r2, [r3, #32]
 800508e:	f000 812c 	beq.w	80052ea <HAL_RCC_OscConfig+0x362>
 8005092:	f022 0201 	bic.w	r2, r2, #1
 8005096:	621a      	str	r2, [r3, #32]
 8005098:	6a1a      	ldr	r2, [r3, #32]
 800509a:	f022 0204 	bic.w	r2, r2, #4
 800509e:	621a      	str	r2, [r3, #32]
 80050a0:	e0f2      	b.n	8005288 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050a2:	69a3      	ldr	r3, [r4, #24]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d04f      	beq.n	8005148 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 80050a8:	2201      	movs	r2, #1
 80050aa:	4b58      	ldr	r3, [pc, #352]	; (800520c <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ac:	4e56      	ldr	r6, [pc, #344]	; (8005208 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 80050ae:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80050b2:	f7fe fb87 	bl	80037c4 <HAL_GetTick>
 80050b6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050b8:	e005      	b.n	80050c6 <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050ba:	f7fe fb83 	bl	80037c4 <HAL_GetTick>
 80050be:	1b40      	subs	r0, r0, r5
 80050c0:	2802      	cmp	r0, #2
 80050c2:	f200 8087 	bhi.w	80051d4 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80050c8:	079b      	lsls	r3, r3, #30
 80050ca:	d5f6      	bpl.n	80050ba <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80050cc:	4b51      	ldr	r3, [pc, #324]	; (8005214 <HAL_RCC_OscConfig+0x28c>)
 80050ce:	4a52      	ldr	r2, [pc, #328]	; (8005218 <HAL_RCC_OscConfig+0x290>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	fba2 2303 	umull	r2, r3, r2, r3
 80050d6:	0a5b      	lsrs	r3, r3, #9
 80050d8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80050da:	bf00      	nop
  }
  while (Delay --);
 80050dc:	9b01      	ldr	r3, [sp, #4]
 80050de:	1e5a      	subs	r2, r3, #1
 80050e0:	9201      	str	r2, [sp, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f9      	bne.n	80050da <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	075d      	lsls	r5, r3, #29
 80050ea:	d4bc      	bmi.n	8005066 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050ec:	69e0      	ldr	r0, [r4, #28]
 80050ee:	b1c0      	cbz	r0, 8005122 <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050f0:	4d45      	ldr	r5, [pc, #276]	; (8005208 <HAL_RCC_OscConfig+0x280>)
 80050f2:	686b      	ldr	r3, [r5, #4]
 80050f4:	f003 030c 	and.w	r3, r3, #12
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	f000 80d8 	beq.w	80052ae <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 80050fe:	2200      	movs	r2, #0
 8005100:	4b42      	ldr	r3, [pc, #264]	; (800520c <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005102:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005104:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005106:	f000 80fa 	beq.w	80052fe <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 800510a:	f7fe fb5b 	bl	80037c4 <HAL_GetTick>
 800510e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005110:	e004      	b.n	800511c <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005112:	f7fe fb57 	bl	80037c4 <HAL_GetTick>
 8005116:	1b00      	subs	r0, r0, r4
 8005118:	2802      	cmp	r0, #2
 800511a:	d85b      	bhi.n	80051d4 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	019b      	lsls	r3, r3, #6
 8005120:	d4f7      	bmi.n	8005112 <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8005122:	2000      	movs	r0, #0
}
 8005124:	b002      	add	sp, #8
 8005126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800512a:	6852      	ldr	r2, [r2, #4]
 800512c:	03d6      	lsls	r6, r2, #15
 800512e:	f53f af79 	bmi.w	8005024 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005132:	4a35      	ldr	r2, [pc, #212]	; (8005208 <HAL_RCC_OscConfig+0x280>)
 8005134:	6812      	ldr	r2, [r2, #0]
 8005136:	0795      	lsls	r5, r2, #30
 8005138:	d530      	bpl.n	800519c <HAL_RCC_OscConfig+0x214>
 800513a:	6922      	ldr	r2, [r4, #16]
 800513c:	2a01      	cmp	r2, #1
 800513e:	d02d      	beq.n	800519c <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8005140:	2001      	movs	r0, #1
}
 8005142:	b002      	add	sp, #8
 8005144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8005148:	4a30      	ldr	r2, [pc, #192]	; (800520c <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800514a:	4e2f      	ldr	r6, [pc, #188]	; (8005208 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 800514c:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8005150:	f7fe fb38 	bl	80037c4 <HAL_GetTick>
 8005154:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005156:	e004      	b.n	8005162 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005158:	f7fe fb34 	bl	80037c4 <HAL_GetTick>
 800515c:	1b40      	subs	r0, r0, r5
 800515e:	2802      	cmp	r0, #2
 8005160:	d838      	bhi.n	80051d4 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005162:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005164:	079f      	lsls	r7, r3, #30
 8005166:	d4f7      	bmi.n	8005158 <HAL_RCC_OscConfig+0x1d0>
 8005168:	e7bd      	b.n	80050e6 <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800516a:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 800516c:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800516e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005172:	61da      	str	r2, [r3, #28]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 800517e:	e777      	b.n	8005070 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005180:	684a      	ldr	r2, [r1, #4]
 8005182:	03d0      	lsls	r0, r2, #15
 8005184:	f57f af17 	bpl.w	8004fb6 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005188:	4a1f      	ldr	r2, [pc, #124]	; (8005208 <HAL_RCC_OscConfig+0x280>)
 800518a:	6812      	ldr	r2, [r2, #0]
 800518c:	0391      	lsls	r1, r2, #14
 800518e:	f57f af3b 	bpl.w	8005008 <HAL_RCC_OscConfig+0x80>
 8005192:	6862      	ldr	r2, [r4, #4]
 8005194:	2a00      	cmp	r2, #0
 8005196:	f47f af37 	bne.w	8005008 <HAL_RCC_OscConfig+0x80>
 800519a:	e7d1      	b.n	8005140 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800519c:	491a      	ldr	r1, [pc, #104]	; (8005208 <HAL_RCC_OscConfig+0x280>)
 800519e:	6960      	ldr	r0, [r4, #20]
 80051a0:	680a      	ldr	r2, [r1, #0]
 80051a2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80051a6:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80051aa:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ac:	071a      	lsls	r2, r3, #28
 80051ae:	f57f af58 	bpl.w	8005062 <HAL_RCC_OscConfig+0xda>
 80051b2:	e776      	b.n	80050a2 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051b4:	6833      	ldr	r3, [r6, #0]
 80051b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ba:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80051bc:	f7fe fb02 	bl	80037c4 <HAL_GetTick>
 80051c0:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c2:	6833      	ldr	r3, [r6, #0]
 80051c4:	05da      	lsls	r2, r3, #23
 80051c6:	f53f af58 	bmi.w	800507a <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ca:	f7fe fafb 	bl	80037c4 <HAL_GetTick>
 80051ce:	1bc0      	subs	r0, r0, r7
 80051d0:	2864      	cmp	r0, #100	; 0x64
 80051d2:	d9f6      	bls.n	80051c2 <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 80051d4:	2003      	movs	r0, #3
}
 80051d6:	b002      	add	sp, #8
 80051d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051dc:	4d0a      	ldr	r5, [pc, #40]	; (8005208 <HAL_RCC_OscConfig+0x280>)
 80051de:	682b      	ldr	r3, [r5, #0]
 80051e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051e4:	602b      	str	r3, [r5, #0]
 80051e6:	682b      	ldr	r3, [r5, #0]
 80051e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051ec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80051ee:	f7fe fae9 	bl	80037c4 <HAL_GetTick>
 80051f2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051f4:	e004      	b.n	8005200 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051f6:	f7fe fae5 	bl	80037c4 <HAL_GetTick>
 80051fa:	1b80      	subs	r0, r0, r6
 80051fc:	2864      	cmp	r0, #100	; 0x64
 80051fe:	d8e9      	bhi.n	80051d4 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	039b      	lsls	r3, r3, #14
 8005204:	d4f7      	bmi.n	80051f6 <HAL_RCC_OscConfig+0x26e>
 8005206:	e6fe      	b.n	8005006 <HAL_RCC_OscConfig+0x7e>
 8005208:	40021000 	.word	0x40021000
 800520c:	42420000 	.word	0x42420000
 8005210:	40007000 	.word	0x40007000
 8005214:	20000140 	.word	0x20000140
 8005218:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800521c:	4e50      	ldr	r6, [pc, #320]	; (8005360 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800521e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005222:	6a33      	ldr	r3, [r6, #32]
 8005224:	f023 0301 	bic.w	r3, r3, #1
 8005228:	6233      	str	r3, [r6, #32]
 800522a:	6a33      	ldr	r3, [r6, #32]
 800522c:	f023 0304 	bic.w	r3, r3, #4
 8005230:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8005232:	f7fe fac7 	bl	80037c4 <HAL_GetTick>
 8005236:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005238:	e004      	b.n	8005244 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800523a:	f7fe fac3 	bl	80037c4 <HAL_GetTick>
 800523e:	1bc0      	subs	r0, r0, r7
 8005240:	4540      	cmp	r0, r8
 8005242:	d8c7      	bhi.n	80051d4 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005244:	6a33      	ldr	r3, [r6, #32]
 8005246:	0798      	lsls	r0, r3, #30
 8005248:	d4f7      	bmi.n	800523a <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 800524a:	2d00      	cmp	r5, #0
 800524c:	f43f af4e 	beq.w	80050ec <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005250:	4a43      	ldr	r2, [pc, #268]	; (8005360 <HAL_RCC_OscConfig+0x3d8>)
 8005252:	69d3      	ldr	r3, [r2, #28]
 8005254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005258:	61d3      	str	r3, [r2, #28]
 800525a:	e747      	b.n	80050ec <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 800525c:	4a41      	ldr	r2, [pc, #260]	; (8005364 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800525e:	4e40      	ldr	r6, [pc, #256]	; (8005360 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8005260:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005262:	f7fe faaf 	bl	80037c4 <HAL_GetTick>
 8005266:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005268:	e004      	b.n	8005274 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800526a:	f7fe faab 	bl	80037c4 <HAL_GetTick>
 800526e:	1b40      	subs	r0, r0, r5
 8005270:	2802      	cmp	r0, #2
 8005272:	d8af      	bhi.n	80051d4 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005274:	6833      	ldr	r3, [r6, #0]
 8005276:	0799      	lsls	r1, r3, #30
 8005278:	d4f7      	bmi.n	800526a <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	e6ef      	b.n	800505e <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800527e:	4a38      	ldr	r2, [pc, #224]	; (8005360 <HAL_RCC_OscConfig+0x3d8>)
 8005280:	6a13      	ldr	r3, [r2, #32]
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8005288:	f7fe fa9c 	bl	80037c4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800528c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005290:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005292:	4f33      	ldr	r7, [pc, #204]	; (8005360 <HAL_RCC_OscConfig+0x3d8>)
 8005294:	e004      	b.n	80052a0 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005296:	f7fe fa95 	bl	80037c4 <HAL_GetTick>
 800529a:	1b80      	subs	r0, r0, r6
 800529c:	4540      	cmp	r0, r8
 800529e:	d899      	bhi.n	80051d4 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	079b      	lsls	r3, r3, #30
 80052a4:	d5f7      	bpl.n	8005296 <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 80052a6:	2d00      	cmp	r5, #0
 80052a8:	f43f af20 	beq.w	80050ec <HAL_RCC_OscConfig+0x164>
 80052ac:	e7d0      	b.n	8005250 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052ae:	2801      	cmp	r0, #1
 80052b0:	f43f af38 	beq.w	8005124 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 80052b4:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b6:	6a22      	ldr	r2, [r4, #32]
 80052b8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80052bc:	4291      	cmp	r1, r2
 80052be:	f47f af3f 	bne.w	8005140 <HAL_RCC_OscConfig+0x1b8>
 80052c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80052c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 80052c8:	1a18      	subs	r0, r3, r0
 80052ca:	bf18      	it	ne
 80052cc:	2001      	movne	r0, #1
 80052ce:	e729      	b.n	8005124 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052d4:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	e67f      	b.n	8004fea <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052ea:	f042 0204 	orr.w	r2, r2, #4
 80052ee:	621a      	str	r2, [r3, #32]
 80052f0:	6a1a      	ldr	r2, [r3, #32]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	621a      	str	r2, [r3, #32]
 80052f8:	e7c6      	b.n	8005288 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 80052fa:	2001      	movs	r0, #1
}
 80052fc:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80052fe:	f7fe fa61 	bl	80037c4 <HAL_GetTick>
 8005302:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005304:	e005      	b.n	8005312 <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005306:	f7fe fa5d 	bl	80037c4 <HAL_GetTick>
 800530a:	1b80      	subs	r0, r0, r6
 800530c:	2802      	cmp	r0, #2
 800530e:	f63f af61 	bhi.w	80051d4 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005312:	682b      	ldr	r3, [r5, #0]
 8005314:	0199      	lsls	r1, r3, #6
 8005316:	d4f6      	bmi.n	8005306 <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005318:	6a23      	ldr	r3, [r4, #32]
 800531a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800531e:	d105      	bne.n	800532c <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005320:	686a      	ldr	r2, [r5, #4]
 8005322:	68a1      	ldr	r1, [r4, #8]
 8005324:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005328:	430a      	orrs	r2, r1
 800532a:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800532c:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800532e:	4d0c      	ldr	r5, [pc, #48]	; (8005360 <HAL_RCC_OscConfig+0x3d8>)
 8005330:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005332:	686a      	ldr	r2, [r5, #4]
 8005334:	430b      	orrs	r3, r1
 8005336:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800533a:	490a      	ldr	r1, [pc, #40]	; (8005364 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800533c:	4313      	orrs	r3, r2
 800533e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005340:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005342:	f7fe fa3f 	bl	80037c4 <HAL_GetTick>
 8005346:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005348:	e005      	b.n	8005356 <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800534a:	f7fe fa3b 	bl	80037c4 <HAL_GetTick>
 800534e:	1b00      	subs	r0, r0, r4
 8005350:	2802      	cmp	r0, #2
 8005352:	f63f af3f 	bhi.w	80051d4 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005356:	682b      	ldr	r3, [r5, #0]
 8005358:	019a      	lsls	r2, r3, #6
 800535a:	d5f6      	bpl.n	800534a <HAL_RCC_OscConfig+0x3c2>
 800535c:	e6e1      	b.n	8005122 <HAL_RCC_OscConfig+0x19a>
 800535e:	bf00      	nop
 8005360:	40021000 	.word	0x40021000
 8005364:	42420000 	.word	0x42420000

08005368 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005368:	2800      	cmp	r0, #0
 800536a:	f000 80b1 	beq.w	80054d0 <HAL_RCC_ClockConfig+0x168>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800536e:	4a5e      	ldr	r2, [pc, #376]	; (80054e8 <HAL_RCC_ClockConfig+0x180>)
{
 8005370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005374:	6813      	ldr	r3, [r2, #0]
 8005376:	4604      	mov	r4, r0
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	428b      	cmp	r3, r1
 800537e:	460d      	mov	r5, r1
{
 8005380:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005382:	d20d      	bcs.n	80053a0 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005384:	6813      	ldr	r3, [r2, #0]
 8005386:	f023 0307 	bic.w	r3, r3, #7
 800538a:	430b      	orrs	r3, r1
 800538c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800538e:	6813      	ldr	r3, [r2, #0]
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	428b      	cmp	r3, r1
 8005396:	d003      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8005398:	2001      	movs	r0, #1
}
 800539a:	b006      	add	sp, #24
 800539c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	079e      	lsls	r6, r3, #30
 80053a4:	d514      	bpl.n	80053d0 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a6:	0758      	lsls	r0, r3, #29
 80053a8:	d504      	bpl.n	80053b4 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053aa:	4950      	ldr	r1, [pc, #320]	; (80054ec <HAL_RCC_ClockConfig+0x184>)
 80053ac:	684a      	ldr	r2, [r1, #4]
 80053ae:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80053b2:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b4:	0719      	lsls	r1, r3, #28
 80053b6:	d504      	bpl.n	80053c2 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053b8:	494c      	ldr	r1, [pc, #304]	; (80054ec <HAL_RCC_ClockConfig+0x184>)
 80053ba:	684a      	ldr	r2, [r1, #4]
 80053bc:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80053c0:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053c2:	494a      	ldr	r1, [pc, #296]	; (80054ec <HAL_RCC_ClockConfig+0x184>)
 80053c4:	68a0      	ldr	r0, [r4, #8]
 80053c6:	684a      	ldr	r2, [r1, #4]
 80053c8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80053cc:	4302      	orrs	r2, r0
 80053ce:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053d0:	07da      	lsls	r2, r3, #31
 80053d2:	d520      	bpl.n	8005416 <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053d4:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053d6:	4b45      	ldr	r3, [pc, #276]	; (80054ec <HAL_RCC_ClockConfig+0x184>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053d8:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053da:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053dc:	d07a      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x16c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053de:	2a02      	cmp	r2, #2
 80053e0:	d073      	beq.n	80054ca <HAL_RCC_ClockConfig+0x162>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e2:	079e      	lsls	r6, r3, #30
 80053e4:	d5d8      	bpl.n	8005398 <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053e6:	4e41      	ldr	r6, [pc, #260]	; (80054ec <HAL_RCC_ClockConfig+0x184>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053ec:	6873      	ldr	r3, [r6, #4]
 80053ee:	f023 0303 	bic.w	r3, r3, #3
 80053f2:	4313      	orrs	r3, r2
 80053f4:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80053f6:	f7fe f9e5 	bl	80037c4 <HAL_GetTick>
 80053fa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053fc:	e004      	b.n	8005408 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053fe:	f7fe f9e1 	bl	80037c4 <HAL_GetTick>
 8005402:	1bc0      	subs	r0, r0, r7
 8005404:	4540      	cmp	r0, r8
 8005406:	d868      	bhi.n	80054da <HAL_RCC_ClockConfig+0x172>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005408:	6873      	ldr	r3, [r6, #4]
 800540a:	6862      	ldr	r2, [r4, #4]
 800540c:	f003 030c 	and.w	r3, r3, #12
 8005410:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005414:	d1f3      	bne.n	80053fe <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005416:	4a34      	ldr	r2, [pc, #208]	; (80054e8 <HAL_RCC_ClockConfig+0x180>)
 8005418:	6813      	ldr	r3, [r2, #0]
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	42ab      	cmp	r3, r5
 8005420:	d909      	bls.n	8005436 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005422:	6813      	ldr	r3, [r2, #0]
 8005424:	f023 0307 	bic.w	r3, r3, #7
 8005428:	432b      	orrs	r3, r5
 800542a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800542c:	6813      	ldr	r3, [r2, #0]
 800542e:	f003 0307 	and.w	r3, r3, #7
 8005432:	42ab      	cmp	r3, r5
 8005434:	d1b0      	bne.n	8005398 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	0758      	lsls	r0, r3, #29
 800543a:	d506      	bpl.n	800544a <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800543c:	492b      	ldr	r1, [pc, #172]	; (80054ec <HAL_RCC_ClockConfig+0x184>)
 800543e:	68e0      	ldr	r0, [r4, #12]
 8005440:	684a      	ldr	r2, [r1, #4]
 8005442:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005446:	4302      	orrs	r2, r0
 8005448:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800544a:	0719      	lsls	r1, r3, #28
 800544c:	d507      	bpl.n	800545e <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800544e:	4a27      	ldr	r2, [pc, #156]	; (80054ec <HAL_RCC_ClockConfig+0x184>)
 8005450:	6921      	ldr	r1, [r4, #16]
 8005452:	6853      	ldr	r3, [r2, #4]
 8005454:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005458:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800545c:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800545e:	f240 2401 	movw	r4, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005462:	4b23      	ldr	r3, [pc, #140]	; (80054f0 <HAL_RCC_ClockConfig+0x188>)
 8005464:	ad06      	add	r5, sp, #24
 8005466:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005468:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 800546c:	491f      	ldr	r1, [pc, #124]	; (80054ec <HAL_RCC_ClockConfig+0x184>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800546e:	f8ad 4004 	strh.w	r4, [sp, #4]
  tmpreg = RCC->CFGR;
 8005472:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005474:	f002 030c 	and.w	r3, r2, #12
 8005478:	2b08      	cmp	r3, #8
 800547a:	d011      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 800547c:	4b1d      	ldr	r3, [pc, #116]	; (80054f4 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800547e:	4a1b      	ldr	r2, [pc, #108]	; (80054ec <HAL_RCC_ClockConfig+0x184>)
 8005480:	481d      	ldr	r0, [pc, #116]	; (80054f8 <HAL_RCC_ClockConfig+0x190>)
 8005482:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8005484:	491d      	ldr	r1, [pc, #116]	; (80054fc <HAL_RCC_ClockConfig+0x194>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005486:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800548a:	5c80      	ldrb	r0, [r0, r2]
 800548c:	4a1c      	ldr	r2, [pc, #112]	; (8005500 <HAL_RCC_ClockConfig+0x198>)
 800548e:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8005490:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005492:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8005494:	f7fe f954 	bl	8003740 <HAL_InitTick>
  return HAL_OK;
 8005498:	2000      	movs	r0, #0
}
 800549a:	b006      	add	sp, #24
 800549c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054a0:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80054a4:	3318      	adds	r3, #24
 80054a6:	446b      	add	r3, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054a8:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054aa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054ae:	d516      	bpl.n	80054de <HAL_RCC_ClockConfig+0x176>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054b0:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80054b2:	4910      	ldr	r1, [pc, #64]	; (80054f4 <HAL_RCC_ClockConfig+0x18c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054b4:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80054b8:	fb01 f303 	mul.w	r3, r1, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054bc:	3218      	adds	r2, #24
 80054be:	446a      	add	r2, sp
 80054c0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80054c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80054c8:	e7d9      	b.n	800547e <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ca:	019f      	lsls	r7, r3, #6
 80054cc:	d48b      	bmi.n	80053e6 <HAL_RCC_ClockConfig+0x7e>
 80054ce:	e763      	b.n	8005398 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 80054d0:	2001      	movs	r0, #1
}
 80054d2:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054d4:	039b      	lsls	r3, r3, #14
 80054d6:	d486      	bmi.n	80053e6 <HAL_RCC_ClockConfig+0x7e>
 80054d8:	e75e      	b.n	8005398 <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 80054da:	2003      	movs	r0, #3
 80054dc:	e75d      	b.n	800539a <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054de:	4a09      	ldr	r2, [pc, #36]	; (8005504 <HAL_RCC_ClockConfig+0x19c>)
 80054e0:	fb02 f303 	mul.w	r3, r2, r3
 80054e4:	e7cb      	b.n	800547e <HAL_RCC_ClockConfig+0x116>
 80054e6:	bf00      	nop
 80054e8:	40022000 	.word	0x40022000
 80054ec:	40021000 	.word	0x40021000
 80054f0:	0801ae34 	.word	0x0801ae34
 80054f4:	007a1200 	.word	0x007a1200
 80054f8:	0801ae1c 	.word	0x0801ae1c
 80054fc:	20000148 	.word	0x20000148
 8005500:	20000140 	.word	0x20000140
 8005504:	003d0900 	.word	0x003d0900

08005508 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005508:	4b04      	ldr	r3, [pc, #16]	; (800551c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800550a:	4a05      	ldr	r2, [pc, #20]	; (8005520 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	4905      	ldr	r1, [pc, #20]	; (8005524 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005510:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005514:	5ccb      	ldrb	r3, [r1, r3]
 8005516:	6810      	ldr	r0, [r2, #0]
}
 8005518:	40d8      	lsrs	r0, r3
 800551a:	4770      	bx	lr
 800551c:	40021000 	.word	0x40021000
 8005520:	20000140 	.word	0x20000140
 8005524:	0801ae2c 	.word	0x0801ae2c

08005528 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005528:	4b04      	ldr	r3, [pc, #16]	; (800553c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800552a:	4a05      	ldr	r2, [pc, #20]	; (8005540 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	4905      	ldr	r1, [pc, #20]	; (8005544 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005530:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005534:	5ccb      	ldrb	r3, [r1, r3]
 8005536:	6810      	ldr	r0, [r2, #0]
}
 8005538:	40d8      	lsrs	r0, r3
 800553a:	4770      	bx	lr
 800553c:	40021000 	.word	0x40021000
 8005540:	20000140 	.word	0x20000140
 8005544:	0801ae2c 	.word	0x0801ae2c

08005548 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005548:	2800      	cmp	r0, #0
 800554a:	d058      	beq.n	80055fe <HAL_SPI_Init+0xb6>
{
 800554c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800554e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005550:	4604      	mov	r4, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d044      	beq.n	80055e0 <HAL_SPI_Init+0x98>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005556:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005558:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800555c:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800555e:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005562:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005564:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8005568:	2a00      	cmp	r2, #0
 800556a:	d03f      	beq.n	80055ec <HAL_SPI_Init+0xa4>
 800556c:	469c      	mov	ip, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800556e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005572:	2602      	movs	r6, #2
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8005574:	f04f 0e01 	mov.w	lr, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005578:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800557a:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 800557e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8005582:	4313      	orrs	r3, r2
 8005584:	68e2      	ldr	r2, [r4, #12]
 8005586:	69a0      	ldr	r0, [r4, #24]
 8005588:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800558c:	4313      	orrs	r3, r2
 800558e:	6922      	ldr	r2, [r4, #16]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005590:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005594:	4032      	ands	r2, r6
 8005596:	4313      	orrs	r3, r2
 8005598:	6962      	ldr	r2, [r4, #20]
  __HAL_SPI_DISABLE(hspi);
 800559a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800559c:	ea02 020e 	and.w	r2, r2, lr
 80055a0:	431a      	orrs	r2, r3
 80055a2:	69e3      	ldr	r3, [r4, #28]
 80055a4:	6a26      	ldr	r6, [r4, #32]
 80055a6:	f003 0738 	and.w	r7, r3, #56	; 0x38
 80055aa:	f400 7300 	and.w	r3, r0, #512	; 0x200
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f006 0680 	and.w	r6, r6, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 80055b4:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055b6:	433b      	orrs	r3, r7
 80055b8:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80055ba:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055bc:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80055c0:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 80055c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055c8:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055ca:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80055cc:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055ce:	69cb      	ldr	r3, [r1, #28]

  return HAL_OK;
 80055d0:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055d6:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055d8:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055da:	f884 e051 	strb.w	lr, [r4, #81]	; 0x51
}
 80055de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055e0:	6842      	ldr	r2, [r0, #4]
 80055e2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80055e6:	d0b9      	beq.n	800555c <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055e8:	61c3      	str	r3, [r0, #28]
 80055ea:	e7b7      	b.n	800555c <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 80055ec:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80055ee:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80055f2:	f7fd ff93 	bl	800351c <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80055f8:	f403 5c00 	and.w	ip, r3, #8192	; 0x2000
 80055fc:	e7b7      	b.n	800556e <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 80055fe:	2001      	movs	r0, #1
}
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop

08005604 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005604:	2800      	cmp	r0, #0
 8005606:	d064      	beq.n	80056d2 <HAL_UART_Init+0xce>
{
 8005608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800560a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800560e:	4604      	mov	r4, r0
 8005610:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005614:	2b00      	cmp	r3, #0
 8005616:	d054      	beq.n	80056c2 <HAL_UART_Init+0xbe>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005618:	e9d4 2702 	ldrd	r2, r7, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 800561c:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800561e:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8005620:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005622:	4302      	orrs	r2, r0
 8005624:	6960      	ldr	r0, [r4, #20]
  huart->gState = HAL_UART_STATE_BUSY;
 8005626:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800562a:	4302      	orrs	r2, r0
  __HAL_UART_DISABLE(huart);
 800562c:	68d8      	ldr	r0, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800562e:	69a6      	ldr	r6, [r4, #24]
  __HAL_UART_DISABLE(huart);
 8005630:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8005634:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005636:	6919      	ldr	r1, [r3, #16]


  if(huart->Instance == USART1)
 8005638:	4d27      	ldr	r5, [pc, #156]	; (80056d8 <HAL_UART_Init+0xd4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800563a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800563e:	4339      	orrs	r1, r7
 8005640:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8005642:	68d9      	ldr	r1, [r3, #12]
  if(huart->Instance == USART1)
 8005644:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1,
 8005646:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800564a:	f021 010c 	bic.w	r1, r1, #12
 800564e:	ea42 0201 	orr.w	r2, r2, r1
 8005652:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005654:	695a      	ldr	r2, [r3, #20]
 8005656:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800565a:	ea42 0206 	orr.w	r2, r2, r6
 800565e:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8005660:	d034      	beq.n	80056cc <HAL_UART_Init+0xc8>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005662:	f7ff ff51 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005666:	6862      	ldr	r2, [r4, #4]
 8005668:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800566c:	0092      	lsls	r2, r2, #2
 800566e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005672:	fbb3 f3f2 	udiv	r3, r3, r2
 8005676:	2664      	movs	r6, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005678:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800567a:	f04f 0c20 	mov.w	ip, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800567e:	4817      	ldr	r0, [pc, #92]	; (80056dc <HAL_UART_Init+0xd8>)
 8005680:	6821      	ldr	r1, [r4, #0]
 8005682:	fba0 7203 	umull	r7, r2, r0, r3
 8005686:	0952      	lsrs	r2, r2, #5
 8005688:	fb06 3312 	mls	r3, r6, r2, r3
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	3332      	adds	r3, #50	; 0x32
 8005690:	fba0 0303 	umull	r0, r3, r0, r3
 8005694:	0112      	lsls	r2, r2, #4
 8005696:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 800569a:	608b      	str	r3, [r1, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800569c:	690b      	ldr	r3, [r1, #16]
  return HAL_OK;
 800569e:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056a0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80056a4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056a6:	694b      	ldr	r3, [r1, #20]
 80056a8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80056ac:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE(huart);
 80056ae:	68cb      	ldr	r3, [r1, #12]
 80056b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80056b4:	60cb      	str	r3, [r1, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b6:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056b8:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056bc:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
}
 80056c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 80056c2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80056c6:	f7fd ff65 	bl	8003594 <HAL_UART_MspInit>
 80056ca:	e7a5      	b.n	8005618 <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 80056cc:	f7ff ff2c 	bl	8005528 <HAL_RCC_GetPCLK2Freq>
 80056d0:	e7c9      	b.n	8005666 <HAL_UART_Init+0x62>
    return HAL_ERROR;
 80056d2:	2001      	movs	r0, #1
}
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	40013800 	.word	0x40013800
 80056dc:	51eb851f 	.word	0x51eb851f

080056e0 <__errno>:
 80056e0:	4b01      	ldr	r3, [pc, #4]	; (80056e8 <__errno+0x8>)
 80056e2:	6818      	ldr	r0, [r3, #0]
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	2000014c 	.word	0x2000014c

080056ec <__libc_init_array>:
 80056ec:	b570      	push	{r4, r5, r6, lr}
 80056ee:	2600      	movs	r6, #0
 80056f0:	4d0c      	ldr	r5, [pc, #48]	; (8005724 <__libc_init_array+0x38>)
 80056f2:	4c0d      	ldr	r4, [pc, #52]	; (8005728 <__libc_init_array+0x3c>)
 80056f4:	1b64      	subs	r4, r4, r5
 80056f6:	10a4      	asrs	r4, r4, #2
 80056f8:	42a6      	cmp	r6, r4
 80056fa:	d109      	bne.n	8005710 <__libc_init_array+0x24>
 80056fc:	f004 feac 	bl	800a458 <_init>
 8005700:	2600      	movs	r6, #0
 8005702:	4d0a      	ldr	r5, [pc, #40]	; (800572c <__libc_init_array+0x40>)
 8005704:	4c0a      	ldr	r4, [pc, #40]	; (8005730 <__libc_init_array+0x44>)
 8005706:	1b64      	subs	r4, r4, r5
 8005708:	10a4      	asrs	r4, r4, #2
 800570a:	42a6      	cmp	r6, r4
 800570c:	d105      	bne.n	800571a <__libc_init_array+0x2e>
 800570e:	bd70      	pop	{r4, r5, r6, pc}
 8005710:	f855 3b04 	ldr.w	r3, [r5], #4
 8005714:	4798      	blx	r3
 8005716:	3601      	adds	r6, #1
 8005718:	e7ee      	b.n	80056f8 <__libc_init_array+0xc>
 800571a:	f855 3b04 	ldr.w	r3, [r5], #4
 800571e:	4798      	blx	r3
 8005720:	3601      	adds	r6, #1
 8005722:	e7f2      	b.n	800570a <__libc_init_array+0x1e>
 8005724:	0801b320 	.word	0x0801b320
 8005728:	0801b320 	.word	0x0801b320
 800572c:	0801b320 	.word	0x0801b320
 8005730:	0801b324 	.word	0x0801b324

08005734 <memmove>:
 8005734:	4288      	cmp	r0, r1
 8005736:	b510      	push	{r4, lr}
 8005738:	eb01 0402 	add.w	r4, r1, r2
 800573c:	d902      	bls.n	8005744 <memmove+0x10>
 800573e:	4284      	cmp	r4, r0
 8005740:	4623      	mov	r3, r4
 8005742:	d807      	bhi.n	8005754 <memmove+0x20>
 8005744:	1e43      	subs	r3, r0, #1
 8005746:	42a1      	cmp	r1, r4
 8005748:	d008      	beq.n	800575c <memmove+0x28>
 800574a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800574e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005752:	e7f8      	b.n	8005746 <memmove+0x12>
 8005754:	4601      	mov	r1, r0
 8005756:	4402      	add	r2, r0
 8005758:	428a      	cmp	r2, r1
 800575a:	d100      	bne.n	800575e <memmove+0x2a>
 800575c:	bd10      	pop	{r4, pc}
 800575e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005762:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005766:	e7f7      	b.n	8005758 <memmove+0x24>

08005768 <memset>:
 8005768:	4603      	mov	r3, r0
 800576a:	4402      	add	r2, r0
 800576c:	4293      	cmp	r3, r2
 800576e:	d100      	bne.n	8005772 <memset+0xa>
 8005770:	4770      	bx	lr
 8005772:	f803 1b01 	strb.w	r1, [r3], #1
 8005776:	e7f9      	b.n	800576c <memset+0x4>

08005778 <__cvt>:
 8005778:	2b00      	cmp	r3, #0
 800577a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800577e:	461f      	mov	r7, r3
 8005780:	bfbb      	ittet	lt
 8005782:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005786:	461f      	movlt	r7, r3
 8005788:	2300      	movge	r3, #0
 800578a:	232d      	movlt	r3, #45	; 0x2d
 800578c:	b088      	sub	sp, #32
 800578e:	4614      	mov	r4, r2
 8005790:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005792:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005794:	7013      	strb	r3, [r2, #0]
 8005796:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005798:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800579c:	f023 0820 	bic.w	r8, r3, #32
 80057a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057a4:	d005      	beq.n	80057b2 <__cvt+0x3a>
 80057a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057aa:	d100      	bne.n	80057ae <__cvt+0x36>
 80057ac:	3501      	adds	r5, #1
 80057ae:	2302      	movs	r3, #2
 80057b0:	e000      	b.n	80057b4 <__cvt+0x3c>
 80057b2:	2303      	movs	r3, #3
 80057b4:	aa07      	add	r2, sp, #28
 80057b6:	9204      	str	r2, [sp, #16]
 80057b8:	aa06      	add	r2, sp, #24
 80057ba:	e9cd a202 	strd	sl, r2, [sp, #8]
 80057be:	e9cd 3500 	strd	r3, r5, [sp]
 80057c2:	4622      	mov	r2, r4
 80057c4:	463b      	mov	r3, r7
 80057c6:	f001 fd83 	bl	80072d0 <_dtoa_r>
 80057ca:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057ce:	4606      	mov	r6, r0
 80057d0:	d102      	bne.n	80057d8 <__cvt+0x60>
 80057d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057d4:	07db      	lsls	r3, r3, #31
 80057d6:	d522      	bpl.n	800581e <__cvt+0xa6>
 80057d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057dc:	eb06 0905 	add.w	r9, r6, r5
 80057e0:	d110      	bne.n	8005804 <__cvt+0x8c>
 80057e2:	7833      	ldrb	r3, [r6, #0]
 80057e4:	2b30      	cmp	r3, #48	; 0x30
 80057e6:	d10a      	bne.n	80057fe <__cvt+0x86>
 80057e8:	2200      	movs	r2, #0
 80057ea:	2300      	movs	r3, #0
 80057ec:	4620      	mov	r0, r4
 80057ee:	4639      	mov	r1, r7
 80057f0:	f7fb f98e 	bl	8000b10 <__aeabi_dcmpeq>
 80057f4:	b918      	cbnz	r0, 80057fe <__cvt+0x86>
 80057f6:	f1c5 0501 	rsb	r5, r5, #1
 80057fa:	f8ca 5000 	str.w	r5, [sl]
 80057fe:	f8da 3000 	ldr.w	r3, [sl]
 8005802:	4499      	add	r9, r3
 8005804:	2200      	movs	r2, #0
 8005806:	2300      	movs	r3, #0
 8005808:	4620      	mov	r0, r4
 800580a:	4639      	mov	r1, r7
 800580c:	f7fb f980 	bl	8000b10 <__aeabi_dcmpeq>
 8005810:	b108      	cbz	r0, 8005816 <__cvt+0x9e>
 8005812:	f8cd 901c 	str.w	r9, [sp, #28]
 8005816:	2230      	movs	r2, #48	; 0x30
 8005818:	9b07      	ldr	r3, [sp, #28]
 800581a:	454b      	cmp	r3, r9
 800581c:	d307      	bcc.n	800582e <__cvt+0xb6>
 800581e:	4630      	mov	r0, r6
 8005820:	9b07      	ldr	r3, [sp, #28]
 8005822:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005824:	1b9b      	subs	r3, r3, r6
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	b008      	add	sp, #32
 800582a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800582e:	1c59      	adds	r1, r3, #1
 8005830:	9107      	str	r1, [sp, #28]
 8005832:	701a      	strb	r2, [r3, #0]
 8005834:	e7f0      	b.n	8005818 <__cvt+0xa0>

08005836 <__exponent>:
 8005836:	4603      	mov	r3, r0
 8005838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800583a:	2900      	cmp	r1, #0
 800583c:	f803 2b02 	strb.w	r2, [r3], #2
 8005840:	bfb6      	itet	lt
 8005842:	222d      	movlt	r2, #45	; 0x2d
 8005844:	222b      	movge	r2, #43	; 0x2b
 8005846:	4249      	neglt	r1, r1
 8005848:	2909      	cmp	r1, #9
 800584a:	7042      	strb	r2, [r0, #1]
 800584c:	dd2b      	ble.n	80058a6 <__exponent+0x70>
 800584e:	f10d 0407 	add.w	r4, sp, #7
 8005852:	46a4      	mov	ip, r4
 8005854:	270a      	movs	r7, #10
 8005856:	fb91 f6f7 	sdiv	r6, r1, r7
 800585a:	460a      	mov	r2, r1
 800585c:	46a6      	mov	lr, r4
 800585e:	fb07 1516 	mls	r5, r7, r6, r1
 8005862:	2a63      	cmp	r2, #99	; 0x63
 8005864:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005868:	4631      	mov	r1, r6
 800586a:	f104 34ff 	add.w	r4, r4, #4294967295
 800586e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005872:	dcf0      	bgt.n	8005856 <__exponent+0x20>
 8005874:	3130      	adds	r1, #48	; 0x30
 8005876:	f1ae 0502 	sub.w	r5, lr, #2
 800587a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800587e:	4629      	mov	r1, r5
 8005880:	1c44      	adds	r4, r0, #1
 8005882:	4561      	cmp	r1, ip
 8005884:	d30a      	bcc.n	800589c <__exponent+0x66>
 8005886:	f10d 0209 	add.w	r2, sp, #9
 800588a:	eba2 020e 	sub.w	r2, r2, lr
 800588e:	4565      	cmp	r5, ip
 8005890:	bf88      	it	hi
 8005892:	2200      	movhi	r2, #0
 8005894:	4413      	add	r3, r2
 8005896:	1a18      	subs	r0, r3, r0
 8005898:	b003      	add	sp, #12
 800589a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800589c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058a0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80058a4:	e7ed      	b.n	8005882 <__exponent+0x4c>
 80058a6:	2330      	movs	r3, #48	; 0x30
 80058a8:	3130      	adds	r1, #48	; 0x30
 80058aa:	7083      	strb	r3, [r0, #2]
 80058ac:	70c1      	strb	r1, [r0, #3]
 80058ae:	1d03      	adds	r3, r0, #4
 80058b0:	e7f1      	b.n	8005896 <__exponent+0x60>
	...

080058b4 <_printf_float>:
 80058b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b8:	b091      	sub	sp, #68	; 0x44
 80058ba:	460c      	mov	r4, r1
 80058bc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80058c0:	4616      	mov	r6, r2
 80058c2:	461f      	mov	r7, r3
 80058c4:	4605      	mov	r5, r0
 80058c6:	f002 fe57 	bl	8008578 <_localeconv_r>
 80058ca:	6803      	ldr	r3, [r0, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	9309      	str	r3, [sp, #36]	; 0x24
 80058d0:	f7fa fc3e 	bl	8000150 <strlen>
 80058d4:	2300      	movs	r3, #0
 80058d6:	930e      	str	r3, [sp, #56]	; 0x38
 80058d8:	f8d8 3000 	ldr.w	r3, [r8]
 80058dc:	900a      	str	r0, [sp, #40]	; 0x28
 80058de:	3307      	adds	r3, #7
 80058e0:	f023 0307 	bic.w	r3, r3, #7
 80058e4:	f103 0208 	add.w	r2, r3, #8
 80058e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80058ec:	f8d4 b000 	ldr.w	fp, [r4]
 80058f0:	f8c8 2000 	str.w	r2, [r8]
 80058f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80058fc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005900:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005904:	930b      	str	r3, [sp, #44]	; 0x2c
 8005906:	f04f 32ff 	mov.w	r2, #4294967295
 800590a:	4640      	mov	r0, r8
 800590c:	4b9c      	ldr	r3, [pc, #624]	; (8005b80 <_printf_float+0x2cc>)
 800590e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005910:	f7fb f930 	bl	8000b74 <__aeabi_dcmpun>
 8005914:	bb70      	cbnz	r0, 8005974 <_printf_float+0xc0>
 8005916:	f04f 32ff 	mov.w	r2, #4294967295
 800591a:	4640      	mov	r0, r8
 800591c:	4b98      	ldr	r3, [pc, #608]	; (8005b80 <_printf_float+0x2cc>)
 800591e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005920:	f7fb f90a 	bl	8000b38 <__aeabi_dcmple>
 8005924:	bb30      	cbnz	r0, 8005974 <_printf_float+0xc0>
 8005926:	2200      	movs	r2, #0
 8005928:	2300      	movs	r3, #0
 800592a:	4640      	mov	r0, r8
 800592c:	4651      	mov	r1, sl
 800592e:	f7fb f8f9 	bl	8000b24 <__aeabi_dcmplt>
 8005932:	b110      	cbz	r0, 800593a <_printf_float+0x86>
 8005934:	232d      	movs	r3, #45	; 0x2d
 8005936:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800593a:	4b92      	ldr	r3, [pc, #584]	; (8005b84 <_printf_float+0x2d0>)
 800593c:	4892      	ldr	r0, [pc, #584]	; (8005b88 <_printf_float+0x2d4>)
 800593e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005942:	bf94      	ite	ls
 8005944:	4698      	movls	r8, r3
 8005946:	4680      	movhi	r8, r0
 8005948:	2303      	movs	r3, #3
 800594a:	f04f 0a00 	mov.w	sl, #0
 800594e:	6123      	str	r3, [r4, #16]
 8005950:	f02b 0304 	bic.w	r3, fp, #4
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	4633      	mov	r3, r6
 8005958:	4621      	mov	r1, r4
 800595a:	4628      	mov	r0, r5
 800595c:	9700      	str	r7, [sp, #0]
 800595e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005960:	f000 f9d4 	bl	8005d0c <_printf_common>
 8005964:	3001      	adds	r0, #1
 8005966:	f040 8090 	bne.w	8005a8a <_printf_float+0x1d6>
 800596a:	f04f 30ff 	mov.w	r0, #4294967295
 800596e:	b011      	add	sp, #68	; 0x44
 8005970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005974:	4642      	mov	r2, r8
 8005976:	4653      	mov	r3, sl
 8005978:	4640      	mov	r0, r8
 800597a:	4651      	mov	r1, sl
 800597c:	f7fb f8fa 	bl	8000b74 <__aeabi_dcmpun>
 8005980:	b148      	cbz	r0, 8005996 <_printf_float+0xe2>
 8005982:	f1ba 0f00 	cmp.w	sl, #0
 8005986:	bfb8      	it	lt
 8005988:	232d      	movlt	r3, #45	; 0x2d
 800598a:	4880      	ldr	r0, [pc, #512]	; (8005b8c <_printf_float+0x2d8>)
 800598c:	bfb8      	it	lt
 800598e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005992:	4b7f      	ldr	r3, [pc, #508]	; (8005b90 <_printf_float+0x2dc>)
 8005994:	e7d3      	b.n	800593e <_printf_float+0x8a>
 8005996:	6863      	ldr	r3, [r4, #4]
 8005998:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	d142      	bne.n	8005a26 <_printf_float+0x172>
 80059a0:	2306      	movs	r3, #6
 80059a2:	6063      	str	r3, [r4, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	9206      	str	r2, [sp, #24]
 80059a8:	aa0e      	add	r2, sp, #56	; 0x38
 80059aa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80059ae:	aa0d      	add	r2, sp, #52	; 0x34
 80059b0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80059b4:	9203      	str	r2, [sp, #12]
 80059b6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80059ba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80059be:	6023      	str	r3, [r4, #0]
 80059c0:	6863      	ldr	r3, [r4, #4]
 80059c2:	4642      	mov	r2, r8
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	4628      	mov	r0, r5
 80059c8:	4653      	mov	r3, sl
 80059ca:	910b      	str	r1, [sp, #44]	; 0x2c
 80059cc:	f7ff fed4 	bl	8005778 <__cvt>
 80059d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059d2:	4680      	mov	r8, r0
 80059d4:	2947      	cmp	r1, #71	; 0x47
 80059d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059d8:	d108      	bne.n	80059ec <_printf_float+0x138>
 80059da:	1cc8      	adds	r0, r1, #3
 80059dc:	db02      	blt.n	80059e4 <_printf_float+0x130>
 80059de:	6863      	ldr	r3, [r4, #4]
 80059e0:	4299      	cmp	r1, r3
 80059e2:	dd40      	ble.n	8005a66 <_printf_float+0x1b2>
 80059e4:	f1a9 0902 	sub.w	r9, r9, #2
 80059e8:	fa5f f989 	uxtb.w	r9, r9
 80059ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80059f0:	d81f      	bhi.n	8005a32 <_printf_float+0x17e>
 80059f2:	464a      	mov	r2, r9
 80059f4:	3901      	subs	r1, #1
 80059f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80059fa:	910d      	str	r1, [sp, #52]	; 0x34
 80059fc:	f7ff ff1b 	bl	8005836 <__exponent>
 8005a00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a02:	4682      	mov	sl, r0
 8005a04:	1813      	adds	r3, r2, r0
 8005a06:	2a01      	cmp	r2, #1
 8005a08:	6123      	str	r3, [r4, #16]
 8005a0a:	dc02      	bgt.n	8005a12 <_printf_float+0x15e>
 8005a0c:	6822      	ldr	r2, [r4, #0]
 8005a0e:	07d2      	lsls	r2, r2, #31
 8005a10:	d501      	bpl.n	8005a16 <_printf_float+0x162>
 8005a12:	3301      	adds	r3, #1
 8005a14:	6123      	str	r3, [r4, #16]
 8005a16:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d09b      	beq.n	8005956 <_printf_float+0xa2>
 8005a1e:	232d      	movs	r3, #45	; 0x2d
 8005a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a24:	e797      	b.n	8005956 <_printf_float+0xa2>
 8005a26:	2947      	cmp	r1, #71	; 0x47
 8005a28:	d1bc      	bne.n	80059a4 <_printf_float+0xf0>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1ba      	bne.n	80059a4 <_printf_float+0xf0>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e7b7      	b.n	80059a2 <_printf_float+0xee>
 8005a32:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005a36:	d118      	bne.n	8005a6a <_printf_float+0x1b6>
 8005a38:	2900      	cmp	r1, #0
 8005a3a:	6863      	ldr	r3, [r4, #4]
 8005a3c:	dd0b      	ble.n	8005a56 <_printf_float+0x1a2>
 8005a3e:	6121      	str	r1, [r4, #16]
 8005a40:	b913      	cbnz	r3, 8005a48 <_printf_float+0x194>
 8005a42:	6822      	ldr	r2, [r4, #0]
 8005a44:	07d0      	lsls	r0, r2, #31
 8005a46:	d502      	bpl.n	8005a4e <_printf_float+0x19a>
 8005a48:	3301      	adds	r3, #1
 8005a4a:	440b      	add	r3, r1
 8005a4c:	6123      	str	r3, [r4, #16]
 8005a4e:	f04f 0a00 	mov.w	sl, #0
 8005a52:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a54:	e7df      	b.n	8005a16 <_printf_float+0x162>
 8005a56:	b913      	cbnz	r3, 8005a5e <_printf_float+0x1aa>
 8005a58:	6822      	ldr	r2, [r4, #0]
 8005a5a:	07d2      	lsls	r2, r2, #31
 8005a5c:	d501      	bpl.n	8005a62 <_printf_float+0x1ae>
 8005a5e:	3302      	adds	r3, #2
 8005a60:	e7f4      	b.n	8005a4c <_printf_float+0x198>
 8005a62:	2301      	movs	r3, #1
 8005a64:	e7f2      	b.n	8005a4c <_printf_float+0x198>
 8005a66:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a6c:	4299      	cmp	r1, r3
 8005a6e:	db05      	blt.n	8005a7c <_printf_float+0x1c8>
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	6121      	str	r1, [r4, #16]
 8005a74:	07d8      	lsls	r0, r3, #31
 8005a76:	d5ea      	bpl.n	8005a4e <_printf_float+0x19a>
 8005a78:	1c4b      	adds	r3, r1, #1
 8005a7a:	e7e7      	b.n	8005a4c <_printf_float+0x198>
 8005a7c:	2900      	cmp	r1, #0
 8005a7e:	bfcc      	ite	gt
 8005a80:	2201      	movgt	r2, #1
 8005a82:	f1c1 0202 	rsble	r2, r1, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	e7e0      	b.n	8005a4c <_printf_float+0x198>
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	055a      	lsls	r2, r3, #21
 8005a8e:	d407      	bmi.n	8005aa0 <_printf_float+0x1ec>
 8005a90:	6923      	ldr	r3, [r4, #16]
 8005a92:	4642      	mov	r2, r8
 8005a94:	4631      	mov	r1, r6
 8005a96:	4628      	mov	r0, r5
 8005a98:	47b8      	blx	r7
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	d12b      	bne.n	8005af6 <_printf_float+0x242>
 8005a9e:	e764      	b.n	800596a <_printf_float+0xb6>
 8005aa0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005aa4:	f240 80dd 	bls.w	8005c62 <_printf_float+0x3ae>
 8005aa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005aac:	2200      	movs	r2, #0
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f7fb f82e 	bl	8000b10 <__aeabi_dcmpeq>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d033      	beq.n	8005b20 <_printf_float+0x26c>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	4631      	mov	r1, r6
 8005abc:	4628      	mov	r0, r5
 8005abe:	4a35      	ldr	r2, [pc, #212]	; (8005b94 <_printf_float+0x2e0>)
 8005ac0:	47b8      	blx	r7
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	f43f af51 	beq.w	800596a <_printf_float+0xb6>
 8005ac8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005acc:	429a      	cmp	r2, r3
 8005ace:	db02      	blt.n	8005ad6 <_printf_float+0x222>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	07d8      	lsls	r0, r3, #31
 8005ad4:	d50f      	bpl.n	8005af6 <_printf_float+0x242>
 8005ad6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ada:	4631      	mov	r1, r6
 8005adc:	4628      	mov	r0, r5
 8005ade:	47b8      	blx	r7
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	f43f af42 	beq.w	800596a <_printf_float+0xb6>
 8005ae6:	f04f 0800 	mov.w	r8, #0
 8005aea:	f104 091a 	add.w	r9, r4, #26
 8005aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005af0:	3b01      	subs	r3, #1
 8005af2:	4543      	cmp	r3, r8
 8005af4:	dc09      	bgt.n	8005b0a <_printf_float+0x256>
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	079b      	lsls	r3, r3, #30
 8005afa:	f100 8102 	bmi.w	8005d02 <_printf_float+0x44e>
 8005afe:	68e0      	ldr	r0, [r4, #12]
 8005b00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b02:	4298      	cmp	r0, r3
 8005b04:	bfb8      	it	lt
 8005b06:	4618      	movlt	r0, r3
 8005b08:	e731      	b.n	800596e <_printf_float+0xba>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	464a      	mov	r2, r9
 8005b0e:	4631      	mov	r1, r6
 8005b10:	4628      	mov	r0, r5
 8005b12:	47b8      	blx	r7
 8005b14:	3001      	adds	r0, #1
 8005b16:	f43f af28 	beq.w	800596a <_printf_float+0xb6>
 8005b1a:	f108 0801 	add.w	r8, r8, #1
 8005b1e:	e7e6      	b.n	8005aee <_printf_float+0x23a>
 8005b20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	dc38      	bgt.n	8005b98 <_printf_float+0x2e4>
 8005b26:	2301      	movs	r3, #1
 8005b28:	4631      	mov	r1, r6
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	4a19      	ldr	r2, [pc, #100]	; (8005b94 <_printf_float+0x2e0>)
 8005b2e:	47b8      	blx	r7
 8005b30:	3001      	adds	r0, #1
 8005b32:	f43f af1a 	beq.w	800596a <_printf_float+0xb6>
 8005b36:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	d102      	bne.n	8005b44 <_printf_float+0x290>
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	07d9      	lsls	r1, r3, #31
 8005b42:	d5d8      	bpl.n	8005af6 <_printf_float+0x242>
 8005b44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b48:	4631      	mov	r1, r6
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	47b8      	blx	r7
 8005b4e:	3001      	adds	r0, #1
 8005b50:	f43f af0b 	beq.w	800596a <_printf_float+0xb6>
 8005b54:	f04f 0900 	mov.w	r9, #0
 8005b58:	f104 0a1a 	add.w	sl, r4, #26
 8005b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b5e:	425b      	negs	r3, r3
 8005b60:	454b      	cmp	r3, r9
 8005b62:	dc01      	bgt.n	8005b68 <_printf_float+0x2b4>
 8005b64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b66:	e794      	b.n	8005a92 <_printf_float+0x1de>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	4652      	mov	r2, sl
 8005b6c:	4631      	mov	r1, r6
 8005b6e:	4628      	mov	r0, r5
 8005b70:	47b8      	blx	r7
 8005b72:	3001      	adds	r0, #1
 8005b74:	f43f aef9 	beq.w	800596a <_printf_float+0xb6>
 8005b78:	f109 0901 	add.w	r9, r9, #1
 8005b7c:	e7ee      	b.n	8005b5c <_printf_float+0x2a8>
 8005b7e:	bf00      	nop
 8005b80:	7fefffff 	.word	0x7fefffff
 8005b84:	0801ae4c 	.word	0x0801ae4c
 8005b88:	0801ae50 	.word	0x0801ae50
 8005b8c:	0801ae58 	.word	0x0801ae58
 8005b90:	0801ae54 	.word	0x0801ae54
 8005b94:	0801ae5c 	.word	0x0801ae5c
 8005b98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	bfa8      	it	ge
 8005ba0:	461a      	movge	r2, r3
 8005ba2:	2a00      	cmp	r2, #0
 8005ba4:	4691      	mov	r9, r2
 8005ba6:	dc37      	bgt.n	8005c18 <_printf_float+0x364>
 8005ba8:	f04f 0b00 	mov.w	fp, #0
 8005bac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bb0:	f104 021a 	add.w	r2, r4, #26
 8005bb4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005bb8:	ebaa 0309 	sub.w	r3, sl, r9
 8005bbc:	455b      	cmp	r3, fp
 8005bbe:	dc33      	bgt.n	8005c28 <_printf_float+0x374>
 8005bc0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	db3b      	blt.n	8005c40 <_printf_float+0x38c>
 8005bc8:	6823      	ldr	r3, [r4, #0]
 8005bca:	07da      	lsls	r2, r3, #31
 8005bcc:	d438      	bmi.n	8005c40 <_printf_float+0x38c>
 8005bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bd0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005bd2:	eba3 020a 	sub.w	r2, r3, sl
 8005bd6:	eba3 0901 	sub.w	r9, r3, r1
 8005bda:	4591      	cmp	r9, r2
 8005bdc:	bfa8      	it	ge
 8005bde:	4691      	movge	r9, r2
 8005be0:	f1b9 0f00 	cmp.w	r9, #0
 8005be4:	dc34      	bgt.n	8005c50 <_printf_float+0x39c>
 8005be6:	f04f 0800 	mov.w	r8, #0
 8005bea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bee:	f104 0a1a 	add.w	sl, r4, #26
 8005bf2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005bf6:	1a9b      	subs	r3, r3, r2
 8005bf8:	eba3 0309 	sub.w	r3, r3, r9
 8005bfc:	4543      	cmp	r3, r8
 8005bfe:	f77f af7a 	ble.w	8005af6 <_printf_float+0x242>
 8005c02:	2301      	movs	r3, #1
 8005c04:	4652      	mov	r2, sl
 8005c06:	4631      	mov	r1, r6
 8005c08:	4628      	mov	r0, r5
 8005c0a:	47b8      	blx	r7
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	f43f aeac 	beq.w	800596a <_printf_float+0xb6>
 8005c12:	f108 0801 	add.w	r8, r8, #1
 8005c16:	e7ec      	b.n	8005bf2 <_printf_float+0x33e>
 8005c18:	4613      	mov	r3, r2
 8005c1a:	4631      	mov	r1, r6
 8005c1c:	4642      	mov	r2, r8
 8005c1e:	4628      	mov	r0, r5
 8005c20:	47b8      	blx	r7
 8005c22:	3001      	adds	r0, #1
 8005c24:	d1c0      	bne.n	8005ba8 <_printf_float+0x2f4>
 8005c26:	e6a0      	b.n	800596a <_printf_float+0xb6>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005c30:	47b8      	blx	r7
 8005c32:	3001      	adds	r0, #1
 8005c34:	f43f ae99 	beq.w	800596a <_printf_float+0xb6>
 8005c38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c3a:	f10b 0b01 	add.w	fp, fp, #1
 8005c3e:	e7b9      	b.n	8005bb4 <_printf_float+0x300>
 8005c40:	4631      	mov	r1, r6
 8005c42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c46:	4628      	mov	r0, r5
 8005c48:	47b8      	blx	r7
 8005c4a:	3001      	adds	r0, #1
 8005c4c:	d1bf      	bne.n	8005bce <_printf_float+0x31a>
 8005c4e:	e68c      	b.n	800596a <_printf_float+0xb6>
 8005c50:	464b      	mov	r3, r9
 8005c52:	4631      	mov	r1, r6
 8005c54:	4628      	mov	r0, r5
 8005c56:	eb08 020a 	add.w	r2, r8, sl
 8005c5a:	47b8      	blx	r7
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	d1c2      	bne.n	8005be6 <_printf_float+0x332>
 8005c60:	e683      	b.n	800596a <_printf_float+0xb6>
 8005c62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c64:	2a01      	cmp	r2, #1
 8005c66:	dc01      	bgt.n	8005c6c <_printf_float+0x3b8>
 8005c68:	07db      	lsls	r3, r3, #31
 8005c6a:	d537      	bpl.n	8005cdc <_printf_float+0x428>
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	4642      	mov	r2, r8
 8005c70:	4631      	mov	r1, r6
 8005c72:	4628      	mov	r0, r5
 8005c74:	47b8      	blx	r7
 8005c76:	3001      	adds	r0, #1
 8005c78:	f43f ae77 	beq.w	800596a <_printf_float+0xb6>
 8005c7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c80:	4631      	mov	r1, r6
 8005c82:	4628      	mov	r0, r5
 8005c84:	47b8      	blx	r7
 8005c86:	3001      	adds	r0, #1
 8005c88:	f43f ae6f 	beq.w	800596a <_printf_float+0xb6>
 8005c8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c90:	2200      	movs	r2, #0
 8005c92:	2300      	movs	r3, #0
 8005c94:	f7fa ff3c 	bl	8000b10 <__aeabi_dcmpeq>
 8005c98:	b9d8      	cbnz	r0, 8005cd2 <_printf_float+0x41e>
 8005c9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c9c:	f108 0201 	add.w	r2, r8, #1
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	47b8      	blx	r7
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d10e      	bne.n	8005cca <_printf_float+0x416>
 8005cac:	e65d      	b.n	800596a <_printf_float+0xb6>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	464a      	mov	r2, r9
 8005cb2:	4631      	mov	r1, r6
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	47b8      	blx	r7
 8005cb8:	3001      	adds	r0, #1
 8005cba:	f43f ae56 	beq.w	800596a <_printf_float+0xb6>
 8005cbe:	f108 0801 	add.w	r8, r8, #1
 8005cc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	4543      	cmp	r3, r8
 8005cc8:	dcf1      	bgt.n	8005cae <_printf_float+0x3fa>
 8005cca:	4653      	mov	r3, sl
 8005ccc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005cd0:	e6e0      	b.n	8005a94 <_printf_float+0x1e0>
 8005cd2:	f04f 0800 	mov.w	r8, #0
 8005cd6:	f104 091a 	add.w	r9, r4, #26
 8005cda:	e7f2      	b.n	8005cc2 <_printf_float+0x40e>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	4642      	mov	r2, r8
 8005ce0:	e7df      	b.n	8005ca2 <_printf_float+0x3ee>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	464a      	mov	r2, r9
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	4628      	mov	r0, r5
 8005cea:	47b8      	blx	r7
 8005cec:	3001      	adds	r0, #1
 8005cee:	f43f ae3c 	beq.w	800596a <_printf_float+0xb6>
 8005cf2:	f108 0801 	add.w	r8, r8, #1
 8005cf6:	68e3      	ldr	r3, [r4, #12]
 8005cf8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005cfa:	1a5b      	subs	r3, r3, r1
 8005cfc:	4543      	cmp	r3, r8
 8005cfe:	dcf0      	bgt.n	8005ce2 <_printf_float+0x42e>
 8005d00:	e6fd      	b.n	8005afe <_printf_float+0x24a>
 8005d02:	f04f 0800 	mov.w	r8, #0
 8005d06:	f104 0919 	add.w	r9, r4, #25
 8005d0a:	e7f4      	b.n	8005cf6 <_printf_float+0x442>

08005d0c <_printf_common>:
 8005d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d10:	4616      	mov	r6, r2
 8005d12:	4699      	mov	r9, r3
 8005d14:	688a      	ldr	r2, [r1, #8]
 8005d16:	690b      	ldr	r3, [r1, #16]
 8005d18:	4607      	mov	r7, r0
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	bfb8      	it	lt
 8005d1e:	4613      	movlt	r3, r2
 8005d20:	6033      	str	r3, [r6, #0]
 8005d22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d26:	460c      	mov	r4, r1
 8005d28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d2c:	b10a      	cbz	r2, 8005d32 <_printf_common+0x26>
 8005d2e:	3301      	adds	r3, #1
 8005d30:	6033      	str	r3, [r6, #0]
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	0699      	lsls	r1, r3, #26
 8005d36:	bf42      	ittt	mi
 8005d38:	6833      	ldrmi	r3, [r6, #0]
 8005d3a:	3302      	addmi	r3, #2
 8005d3c:	6033      	strmi	r3, [r6, #0]
 8005d3e:	6825      	ldr	r5, [r4, #0]
 8005d40:	f015 0506 	ands.w	r5, r5, #6
 8005d44:	d106      	bne.n	8005d54 <_printf_common+0x48>
 8005d46:	f104 0a19 	add.w	sl, r4, #25
 8005d4a:	68e3      	ldr	r3, [r4, #12]
 8005d4c:	6832      	ldr	r2, [r6, #0]
 8005d4e:	1a9b      	subs	r3, r3, r2
 8005d50:	42ab      	cmp	r3, r5
 8005d52:	dc28      	bgt.n	8005da6 <_printf_common+0x9a>
 8005d54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d58:	1e13      	subs	r3, r2, #0
 8005d5a:	6822      	ldr	r2, [r4, #0]
 8005d5c:	bf18      	it	ne
 8005d5e:	2301      	movne	r3, #1
 8005d60:	0692      	lsls	r2, r2, #26
 8005d62:	d42d      	bmi.n	8005dc0 <_printf_common+0xb4>
 8005d64:	4649      	mov	r1, r9
 8005d66:	4638      	mov	r0, r7
 8005d68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d6c:	47c0      	blx	r8
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d020      	beq.n	8005db4 <_printf_common+0xa8>
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	68e5      	ldr	r5, [r4, #12]
 8005d76:	f003 0306 	and.w	r3, r3, #6
 8005d7a:	2b04      	cmp	r3, #4
 8005d7c:	bf18      	it	ne
 8005d7e:	2500      	movne	r5, #0
 8005d80:	6832      	ldr	r2, [r6, #0]
 8005d82:	f04f 0600 	mov.w	r6, #0
 8005d86:	68a3      	ldr	r3, [r4, #8]
 8005d88:	bf08      	it	eq
 8005d8a:	1aad      	subeq	r5, r5, r2
 8005d8c:	6922      	ldr	r2, [r4, #16]
 8005d8e:	bf08      	it	eq
 8005d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d94:	4293      	cmp	r3, r2
 8005d96:	bfc4      	itt	gt
 8005d98:	1a9b      	subgt	r3, r3, r2
 8005d9a:	18ed      	addgt	r5, r5, r3
 8005d9c:	341a      	adds	r4, #26
 8005d9e:	42b5      	cmp	r5, r6
 8005da0:	d11a      	bne.n	8005dd8 <_printf_common+0xcc>
 8005da2:	2000      	movs	r0, #0
 8005da4:	e008      	b.n	8005db8 <_printf_common+0xac>
 8005da6:	2301      	movs	r3, #1
 8005da8:	4652      	mov	r2, sl
 8005daa:	4649      	mov	r1, r9
 8005dac:	4638      	mov	r0, r7
 8005dae:	47c0      	blx	r8
 8005db0:	3001      	adds	r0, #1
 8005db2:	d103      	bne.n	8005dbc <_printf_common+0xb0>
 8005db4:	f04f 30ff 	mov.w	r0, #4294967295
 8005db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dbc:	3501      	adds	r5, #1
 8005dbe:	e7c4      	b.n	8005d4a <_printf_common+0x3e>
 8005dc0:	2030      	movs	r0, #48	; 0x30
 8005dc2:	18e1      	adds	r1, r4, r3
 8005dc4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dce:	4422      	add	r2, r4
 8005dd0:	3302      	adds	r3, #2
 8005dd2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dd6:	e7c5      	b.n	8005d64 <_printf_common+0x58>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	4622      	mov	r2, r4
 8005ddc:	4649      	mov	r1, r9
 8005dde:	4638      	mov	r0, r7
 8005de0:	47c0      	blx	r8
 8005de2:	3001      	adds	r0, #1
 8005de4:	d0e6      	beq.n	8005db4 <_printf_common+0xa8>
 8005de6:	3601      	adds	r6, #1
 8005de8:	e7d9      	b.n	8005d9e <_printf_common+0x92>
	...

08005dec <_printf_i>:
 8005dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005df0:	7e0f      	ldrb	r7, [r1, #24]
 8005df2:	4691      	mov	r9, r2
 8005df4:	2f78      	cmp	r7, #120	; 0x78
 8005df6:	4680      	mov	r8, r0
 8005df8:	460c      	mov	r4, r1
 8005dfa:	469a      	mov	sl, r3
 8005dfc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005dfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e02:	d807      	bhi.n	8005e14 <_printf_i+0x28>
 8005e04:	2f62      	cmp	r7, #98	; 0x62
 8005e06:	d80a      	bhi.n	8005e1e <_printf_i+0x32>
 8005e08:	2f00      	cmp	r7, #0
 8005e0a:	f000 80d9 	beq.w	8005fc0 <_printf_i+0x1d4>
 8005e0e:	2f58      	cmp	r7, #88	; 0x58
 8005e10:	f000 80a4 	beq.w	8005f5c <_printf_i+0x170>
 8005e14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e1c:	e03a      	b.n	8005e94 <_printf_i+0xa8>
 8005e1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e22:	2b15      	cmp	r3, #21
 8005e24:	d8f6      	bhi.n	8005e14 <_printf_i+0x28>
 8005e26:	a101      	add	r1, pc, #4	; (adr r1, 8005e2c <_printf_i+0x40>)
 8005e28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e2c:	08005e85 	.word	0x08005e85
 8005e30:	08005e99 	.word	0x08005e99
 8005e34:	08005e15 	.word	0x08005e15
 8005e38:	08005e15 	.word	0x08005e15
 8005e3c:	08005e15 	.word	0x08005e15
 8005e40:	08005e15 	.word	0x08005e15
 8005e44:	08005e99 	.word	0x08005e99
 8005e48:	08005e15 	.word	0x08005e15
 8005e4c:	08005e15 	.word	0x08005e15
 8005e50:	08005e15 	.word	0x08005e15
 8005e54:	08005e15 	.word	0x08005e15
 8005e58:	08005fa7 	.word	0x08005fa7
 8005e5c:	08005ec9 	.word	0x08005ec9
 8005e60:	08005f89 	.word	0x08005f89
 8005e64:	08005e15 	.word	0x08005e15
 8005e68:	08005e15 	.word	0x08005e15
 8005e6c:	08005fc9 	.word	0x08005fc9
 8005e70:	08005e15 	.word	0x08005e15
 8005e74:	08005ec9 	.word	0x08005ec9
 8005e78:	08005e15 	.word	0x08005e15
 8005e7c:	08005e15 	.word	0x08005e15
 8005e80:	08005f91 	.word	0x08005f91
 8005e84:	682b      	ldr	r3, [r5, #0]
 8005e86:	1d1a      	adds	r2, r3, #4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	602a      	str	r2, [r5, #0]
 8005e8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e94:	2301      	movs	r3, #1
 8005e96:	e0a4      	b.n	8005fe2 <_printf_i+0x1f6>
 8005e98:	6820      	ldr	r0, [r4, #0]
 8005e9a:	6829      	ldr	r1, [r5, #0]
 8005e9c:	0606      	lsls	r6, r0, #24
 8005e9e:	f101 0304 	add.w	r3, r1, #4
 8005ea2:	d50a      	bpl.n	8005eba <_printf_i+0xce>
 8005ea4:	680e      	ldr	r6, [r1, #0]
 8005ea6:	602b      	str	r3, [r5, #0]
 8005ea8:	2e00      	cmp	r6, #0
 8005eaa:	da03      	bge.n	8005eb4 <_printf_i+0xc8>
 8005eac:	232d      	movs	r3, #45	; 0x2d
 8005eae:	4276      	negs	r6, r6
 8005eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eb4:	230a      	movs	r3, #10
 8005eb6:	485e      	ldr	r0, [pc, #376]	; (8006030 <_printf_i+0x244>)
 8005eb8:	e019      	b.n	8005eee <_printf_i+0x102>
 8005eba:	680e      	ldr	r6, [r1, #0]
 8005ebc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ec0:	602b      	str	r3, [r5, #0]
 8005ec2:	bf18      	it	ne
 8005ec4:	b236      	sxthne	r6, r6
 8005ec6:	e7ef      	b.n	8005ea8 <_printf_i+0xbc>
 8005ec8:	682b      	ldr	r3, [r5, #0]
 8005eca:	6820      	ldr	r0, [r4, #0]
 8005ecc:	1d19      	adds	r1, r3, #4
 8005ece:	6029      	str	r1, [r5, #0]
 8005ed0:	0601      	lsls	r1, r0, #24
 8005ed2:	d501      	bpl.n	8005ed8 <_printf_i+0xec>
 8005ed4:	681e      	ldr	r6, [r3, #0]
 8005ed6:	e002      	b.n	8005ede <_printf_i+0xf2>
 8005ed8:	0646      	lsls	r6, r0, #25
 8005eda:	d5fb      	bpl.n	8005ed4 <_printf_i+0xe8>
 8005edc:	881e      	ldrh	r6, [r3, #0]
 8005ede:	2f6f      	cmp	r7, #111	; 0x6f
 8005ee0:	bf0c      	ite	eq
 8005ee2:	2308      	moveq	r3, #8
 8005ee4:	230a      	movne	r3, #10
 8005ee6:	4852      	ldr	r0, [pc, #328]	; (8006030 <_printf_i+0x244>)
 8005ee8:	2100      	movs	r1, #0
 8005eea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005eee:	6865      	ldr	r5, [r4, #4]
 8005ef0:	2d00      	cmp	r5, #0
 8005ef2:	bfa8      	it	ge
 8005ef4:	6821      	ldrge	r1, [r4, #0]
 8005ef6:	60a5      	str	r5, [r4, #8]
 8005ef8:	bfa4      	itt	ge
 8005efa:	f021 0104 	bicge.w	r1, r1, #4
 8005efe:	6021      	strge	r1, [r4, #0]
 8005f00:	b90e      	cbnz	r6, 8005f06 <_printf_i+0x11a>
 8005f02:	2d00      	cmp	r5, #0
 8005f04:	d04d      	beq.n	8005fa2 <_printf_i+0x1b6>
 8005f06:	4615      	mov	r5, r2
 8005f08:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f0c:	fb03 6711 	mls	r7, r3, r1, r6
 8005f10:	5dc7      	ldrb	r7, [r0, r7]
 8005f12:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f16:	4637      	mov	r7, r6
 8005f18:	42bb      	cmp	r3, r7
 8005f1a:	460e      	mov	r6, r1
 8005f1c:	d9f4      	bls.n	8005f08 <_printf_i+0x11c>
 8005f1e:	2b08      	cmp	r3, #8
 8005f20:	d10b      	bne.n	8005f3a <_printf_i+0x14e>
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	07de      	lsls	r6, r3, #31
 8005f26:	d508      	bpl.n	8005f3a <_printf_i+0x14e>
 8005f28:	6923      	ldr	r3, [r4, #16]
 8005f2a:	6861      	ldr	r1, [r4, #4]
 8005f2c:	4299      	cmp	r1, r3
 8005f2e:	bfde      	ittt	le
 8005f30:	2330      	movle	r3, #48	; 0x30
 8005f32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f3a:	1b52      	subs	r2, r2, r5
 8005f3c:	6122      	str	r2, [r4, #16]
 8005f3e:	464b      	mov	r3, r9
 8005f40:	4621      	mov	r1, r4
 8005f42:	4640      	mov	r0, r8
 8005f44:	f8cd a000 	str.w	sl, [sp]
 8005f48:	aa03      	add	r2, sp, #12
 8005f4a:	f7ff fedf 	bl	8005d0c <_printf_common>
 8005f4e:	3001      	adds	r0, #1
 8005f50:	d14c      	bne.n	8005fec <_printf_i+0x200>
 8005f52:	f04f 30ff 	mov.w	r0, #4294967295
 8005f56:	b004      	add	sp, #16
 8005f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f5c:	4834      	ldr	r0, [pc, #208]	; (8006030 <_printf_i+0x244>)
 8005f5e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f62:	6829      	ldr	r1, [r5, #0]
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f6a:	6029      	str	r1, [r5, #0]
 8005f6c:	061d      	lsls	r5, r3, #24
 8005f6e:	d514      	bpl.n	8005f9a <_printf_i+0x1ae>
 8005f70:	07df      	lsls	r7, r3, #31
 8005f72:	bf44      	itt	mi
 8005f74:	f043 0320 	orrmi.w	r3, r3, #32
 8005f78:	6023      	strmi	r3, [r4, #0]
 8005f7a:	b91e      	cbnz	r6, 8005f84 <_printf_i+0x198>
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	f023 0320 	bic.w	r3, r3, #32
 8005f82:	6023      	str	r3, [r4, #0]
 8005f84:	2310      	movs	r3, #16
 8005f86:	e7af      	b.n	8005ee8 <_printf_i+0xfc>
 8005f88:	6823      	ldr	r3, [r4, #0]
 8005f8a:	f043 0320 	orr.w	r3, r3, #32
 8005f8e:	6023      	str	r3, [r4, #0]
 8005f90:	2378      	movs	r3, #120	; 0x78
 8005f92:	4828      	ldr	r0, [pc, #160]	; (8006034 <_printf_i+0x248>)
 8005f94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f98:	e7e3      	b.n	8005f62 <_printf_i+0x176>
 8005f9a:	0659      	lsls	r1, r3, #25
 8005f9c:	bf48      	it	mi
 8005f9e:	b2b6      	uxthmi	r6, r6
 8005fa0:	e7e6      	b.n	8005f70 <_printf_i+0x184>
 8005fa2:	4615      	mov	r5, r2
 8005fa4:	e7bb      	b.n	8005f1e <_printf_i+0x132>
 8005fa6:	682b      	ldr	r3, [r5, #0]
 8005fa8:	6826      	ldr	r6, [r4, #0]
 8005faa:	1d18      	adds	r0, r3, #4
 8005fac:	6961      	ldr	r1, [r4, #20]
 8005fae:	6028      	str	r0, [r5, #0]
 8005fb0:	0635      	lsls	r5, r6, #24
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	d501      	bpl.n	8005fba <_printf_i+0x1ce>
 8005fb6:	6019      	str	r1, [r3, #0]
 8005fb8:	e002      	b.n	8005fc0 <_printf_i+0x1d4>
 8005fba:	0670      	lsls	r0, r6, #25
 8005fbc:	d5fb      	bpl.n	8005fb6 <_printf_i+0x1ca>
 8005fbe:	8019      	strh	r1, [r3, #0]
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	4615      	mov	r5, r2
 8005fc4:	6123      	str	r3, [r4, #16]
 8005fc6:	e7ba      	b.n	8005f3e <_printf_i+0x152>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	2100      	movs	r1, #0
 8005fcc:	1d1a      	adds	r2, r3, #4
 8005fce:	602a      	str	r2, [r5, #0]
 8005fd0:	681d      	ldr	r5, [r3, #0]
 8005fd2:	6862      	ldr	r2, [r4, #4]
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	f002 faed 	bl	80085b4 <memchr>
 8005fda:	b108      	cbz	r0, 8005fe0 <_printf_i+0x1f4>
 8005fdc:	1b40      	subs	r0, r0, r5
 8005fde:	6060      	str	r0, [r4, #4]
 8005fe0:	6863      	ldr	r3, [r4, #4]
 8005fe2:	6123      	str	r3, [r4, #16]
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fea:	e7a8      	b.n	8005f3e <_printf_i+0x152>
 8005fec:	462a      	mov	r2, r5
 8005fee:	4649      	mov	r1, r9
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	6923      	ldr	r3, [r4, #16]
 8005ff4:	47d0      	blx	sl
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	d0ab      	beq.n	8005f52 <_printf_i+0x166>
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	079b      	lsls	r3, r3, #30
 8005ffe:	d413      	bmi.n	8006028 <_printf_i+0x23c>
 8006000:	68e0      	ldr	r0, [r4, #12]
 8006002:	9b03      	ldr	r3, [sp, #12]
 8006004:	4298      	cmp	r0, r3
 8006006:	bfb8      	it	lt
 8006008:	4618      	movlt	r0, r3
 800600a:	e7a4      	b.n	8005f56 <_printf_i+0x16a>
 800600c:	2301      	movs	r3, #1
 800600e:	4632      	mov	r2, r6
 8006010:	4649      	mov	r1, r9
 8006012:	4640      	mov	r0, r8
 8006014:	47d0      	blx	sl
 8006016:	3001      	adds	r0, #1
 8006018:	d09b      	beq.n	8005f52 <_printf_i+0x166>
 800601a:	3501      	adds	r5, #1
 800601c:	68e3      	ldr	r3, [r4, #12]
 800601e:	9903      	ldr	r1, [sp, #12]
 8006020:	1a5b      	subs	r3, r3, r1
 8006022:	42ab      	cmp	r3, r5
 8006024:	dcf2      	bgt.n	800600c <_printf_i+0x220>
 8006026:	e7eb      	b.n	8006000 <_printf_i+0x214>
 8006028:	2500      	movs	r5, #0
 800602a:	f104 0619 	add.w	r6, r4, #25
 800602e:	e7f5      	b.n	800601c <_printf_i+0x230>
 8006030:	0801ae5e 	.word	0x0801ae5e
 8006034:	0801ae6f 	.word	0x0801ae6f

08006038 <_scanf_float>:
 8006038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603c:	b087      	sub	sp, #28
 800603e:	9303      	str	r3, [sp, #12]
 8006040:	688b      	ldr	r3, [r1, #8]
 8006042:	4617      	mov	r7, r2
 8006044:	1e5a      	subs	r2, r3, #1
 8006046:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800604a:	bf85      	ittet	hi
 800604c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006050:	195b      	addhi	r3, r3, r5
 8006052:	2300      	movls	r3, #0
 8006054:	9302      	strhi	r3, [sp, #8]
 8006056:	bf88      	it	hi
 8006058:	f240 135d 	movwhi	r3, #349	; 0x15d
 800605c:	468b      	mov	fp, r1
 800605e:	f04f 0500 	mov.w	r5, #0
 8006062:	bf8c      	ite	hi
 8006064:	608b      	strhi	r3, [r1, #8]
 8006066:	9302      	strls	r3, [sp, #8]
 8006068:	680b      	ldr	r3, [r1, #0]
 800606a:	4680      	mov	r8, r0
 800606c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006070:	f84b 3b1c 	str.w	r3, [fp], #28
 8006074:	460c      	mov	r4, r1
 8006076:	465e      	mov	r6, fp
 8006078:	46aa      	mov	sl, r5
 800607a:	46a9      	mov	r9, r5
 800607c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006080:	9501      	str	r5, [sp, #4]
 8006082:	68a2      	ldr	r2, [r4, #8]
 8006084:	b152      	cbz	r2, 800609c <_scanf_float+0x64>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	2b4e      	cmp	r3, #78	; 0x4e
 800608c:	d864      	bhi.n	8006158 <_scanf_float+0x120>
 800608e:	2b40      	cmp	r3, #64	; 0x40
 8006090:	d83c      	bhi.n	800610c <_scanf_float+0xd4>
 8006092:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006096:	b2c8      	uxtb	r0, r1
 8006098:	280e      	cmp	r0, #14
 800609a:	d93a      	bls.n	8006112 <_scanf_float+0xda>
 800609c:	f1b9 0f00 	cmp.w	r9, #0
 80060a0:	d003      	beq.n	80060aa <_scanf_float+0x72>
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060a8:	6023      	str	r3, [r4, #0]
 80060aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060ae:	f1ba 0f01 	cmp.w	sl, #1
 80060b2:	f200 8113 	bhi.w	80062dc <_scanf_float+0x2a4>
 80060b6:	455e      	cmp	r6, fp
 80060b8:	f200 8105 	bhi.w	80062c6 <_scanf_float+0x28e>
 80060bc:	2501      	movs	r5, #1
 80060be:	4628      	mov	r0, r5
 80060c0:	b007      	add	sp, #28
 80060c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80060ca:	2a0d      	cmp	r2, #13
 80060cc:	d8e6      	bhi.n	800609c <_scanf_float+0x64>
 80060ce:	a101      	add	r1, pc, #4	; (adr r1, 80060d4 <_scanf_float+0x9c>)
 80060d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80060d4:	08006213 	.word	0x08006213
 80060d8:	0800609d 	.word	0x0800609d
 80060dc:	0800609d 	.word	0x0800609d
 80060e0:	0800609d 	.word	0x0800609d
 80060e4:	08006273 	.word	0x08006273
 80060e8:	0800624b 	.word	0x0800624b
 80060ec:	0800609d 	.word	0x0800609d
 80060f0:	0800609d 	.word	0x0800609d
 80060f4:	08006221 	.word	0x08006221
 80060f8:	0800609d 	.word	0x0800609d
 80060fc:	0800609d 	.word	0x0800609d
 8006100:	0800609d 	.word	0x0800609d
 8006104:	0800609d 	.word	0x0800609d
 8006108:	080061d9 	.word	0x080061d9
 800610c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006110:	e7db      	b.n	80060ca <_scanf_float+0x92>
 8006112:	290e      	cmp	r1, #14
 8006114:	d8c2      	bhi.n	800609c <_scanf_float+0x64>
 8006116:	a001      	add	r0, pc, #4	; (adr r0, 800611c <_scanf_float+0xe4>)
 8006118:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800611c:	080061cb 	.word	0x080061cb
 8006120:	0800609d 	.word	0x0800609d
 8006124:	080061cb 	.word	0x080061cb
 8006128:	0800625f 	.word	0x0800625f
 800612c:	0800609d 	.word	0x0800609d
 8006130:	08006179 	.word	0x08006179
 8006134:	080061b5 	.word	0x080061b5
 8006138:	080061b5 	.word	0x080061b5
 800613c:	080061b5 	.word	0x080061b5
 8006140:	080061b5 	.word	0x080061b5
 8006144:	080061b5 	.word	0x080061b5
 8006148:	080061b5 	.word	0x080061b5
 800614c:	080061b5 	.word	0x080061b5
 8006150:	080061b5 	.word	0x080061b5
 8006154:	080061b5 	.word	0x080061b5
 8006158:	2b6e      	cmp	r3, #110	; 0x6e
 800615a:	d809      	bhi.n	8006170 <_scanf_float+0x138>
 800615c:	2b60      	cmp	r3, #96	; 0x60
 800615e:	d8b2      	bhi.n	80060c6 <_scanf_float+0x8e>
 8006160:	2b54      	cmp	r3, #84	; 0x54
 8006162:	d077      	beq.n	8006254 <_scanf_float+0x21c>
 8006164:	2b59      	cmp	r3, #89	; 0x59
 8006166:	d199      	bne.n	800609c <_scanf_float+0x64>
 8006168:	2d07      	cmp	r5, #7
 800616a:	d197      	bne.n	800609c <_scanf_float+0x64>
 800616c:	2508      	movs	r5, #8
 800616e:	e029      	b.n	80061c4 <_scanf_float+0x18c>
 8006170:	2b74      	cmp	r3, #116	; 0x74
 8006172:	d06f      	beq.n	8006254 <_scanf_float+0x21c>
 8006174:	2b79      	cmp	r3, #121	; 0x79
 8006176:	e7f6      	b.n	8006166 <_scanf_float+0x12e>
 8006178:	6821      	ldr	r1, [r4, #0]
 800617a:	05c8      	lsls	r0, r1, #23
 800617c:	d51a      	bpl.n	80061b4 <_scanf_float+0x17c>
 800617e:	9b02      	ldr	r3, [sp, #8]
 8006180:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006184:	6021      	str	r1, [r4, #0]
 8006186:	f109 0901 	add.w	r9, r9, #1
 800618a:	b11b      	cbz	r3, 8006194 <_scanf_float+0x15c>
 800618c:	3b01      	subs	r3, #1
 800618e:	3201      	adds	r2, #1
 8006190:	9302      	str	r3, [sp, #8]
 8006192:	60a2      	str	r2, [r4, #8]
 8006194:	68a3      	ldr	r3, [r4, #8]
 8006196:	3b01      	subs	r3, #1
 8006198:	60a3      	str	r3, [r4, #8]
 800619a:	6923      	ldr	r3, [r4, #16]
 800619c:	3301      	adds	r3, #1
 800619e:	6123      	str	r3, [r4, #16]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	607b      	str	r3, [r7, #4]
 80061a8:	f340 8084 	ble.w	80062b4 <_scanf_float+0x27c>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	3301      	adds	r3, #1
 80061b0:	603b      	str	r3, [r7, #0]
 80061b2:	e766      	b.n	8006082 <_scanf_float+0x4a>
 80061b4:	eb1a 0f05 	cmn.w	sl, r5
 80061b8:	f47f af70 	bne.w	800609c <_scanf_float+0x64>
 80061bc:	6822      	ldr	r2, [r4, #0]
 80061be:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80061c2:	6022      	str	r2, [r4, #0]
 80061c4:	f806 3b01 	strb.w	r3, [r6], #1
 80061c8:	e7e4      	b.n	8006194 <_scanf_float+0x15c>
 80061ca:	6822      	ldr	r2, [r4, #0]
 80061cc:	0610      	lsls	r0, r2, #24
 80061ce:	f57f af65 	bpl.w	800609c <_scanf_float+0x64>
 80061d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061d6:	e7f4      	b.n	80061c2 <_scanf_float+0x18a>
 80061d8:	f1ba 0f00 	cmp.w	sl, #0
 80061dc:	d10e      	bne.n	80061fc <_scanf_float+0x1c4>
 80061de:	f1b9 0f00 	cmp.w	r9, #0
 80061e2:	d10e      	bne.n	8006202 <_scanf_float+0x1ca>
 80061e4:	6822      	ldr	r2, [r4, #0]
 80061e6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80061ea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80061ee:	d108      	bne.n	8006202 <_scanf_float+0x1ca>
 80061f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80061f4:	f04f 0a01 	mov.w	sl, #1
 80061f8:	6022      	str	r2, [r4, #0]
 80061fa:	e7e3      	b.n	80061c4 <_scanf_float+0x18c>
 80061fc:	f1ba 0f02 	cmp.w	sl, #2
 8006200:	d055      	beq.n	80062ae <_scanf_float+0x276>
 8006202:	2d01      	cmp	r5, #1
 8006204:	d002      	beq.n	800620c <_scanf_float+0x1d4>
 8006206:	2d04      	cmp	r5, #4
 8006208:	f47f af48 	bne.w	800609c <_scanf_float+0x64>
 800620c:	3501      	adds	r5, #1
 800620e:	b2ed      	uxtb	r5, r5
 8006210:	e7d8      	b.n	80061c4 <_scanf_float+0x18c>
 8006212:	f1ba 0f01 	cmp.w	sl, #1
 8006216:	f47f af41 	bne.w	800609c <_scanf_float+0x64>
 800621a:	f04f 0a02 	mov.w	sl, #2
 800621e:	e7d1      	b.n	80061c4 <_scanf_float+0x18c>
 8006220:	b97d      	cbnz	r5, 8006242 <_scanf_float+0x20a>
 8006222:	f1b9 0f00 	cmp.w	r9, #0
 8006226:	f47f af3c 	bne.w	80060a2 <_scanf_float+0x6a>
 800622a:	6822      	ldr	r2, [r4, #0]
 800622c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006230:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006234:	f47f af39 	bne.w	80060aa <_scanf_float+0x72>
 8006238:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800623c:	2501      	movs	r5, #1
 800623e:	6022      	str	r2, [r4, #0]
 8006240:	e7c0      	b.n	80061c4 <_scanf_float+0x18c>
 8006242:	2d03      	cmp	r5, #3
 8006244:	d0e2      	beq.n	800620c <_scanf_float+0x1d4>
 8006246:	2d05      	cmp	r5, #5
 8006248:	e7de      	b.n	8006208 <_scanf_float+0x1d0>
 800624a:	2d02      	cmp	r5, #2
 800624c:	f47f af26 	bne.w	800609c <_scanf_float+0x64>
 8006250:	2503      	movs	r5, #3
 8006252:	e7b7      	b.n	80061c4 <_scanf_float+0x18c>
 8006254:	2d06      	cmp	r5, #6
 8006256:	f47f af21 	bne.w	800609c <_scanf_float+0x64>
 800625a:	2507      	movs	r5, #7
 800625c:	e7b2      	b.n	80061c4 <_scanf_float+0x18c>
 800625e:	6822      	ldr	r2, [r4, #0]
 8006260:	0591      	lsls	r1, r2, #22
 8006262:	f57f af1b 	bpl.w	800609c <_scanf_float+0x64>
 8006266:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800626a:	6022      	str	r2, [r4, #0]
 800626c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006270:	e7a8      	b.n	80061c4 <_scanf_float+0x18c>
 8006272:	6822      	ldr	r2, [r4, #0]
 8006274:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006278:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800627c:	d006      	beq.n	800628c <_scanf_float+0x254>
 800627e:	0550      	lsls	r0, r2, #21
 8006280:	f57f af0c 	bpl.w	800609c <_scanf_float+0x64>
 8006284:	f1b9 0f00 	cmp.w	r9, #0
 8006288:	f43f af0f 	beq.w	80060aa <_scanf_float+0x72>
 800628c:	0591      	lsls	r1, r2, #22
 800628e:	bf58      	it	pl
 8006290:	9901      	ldrpl	r1, [sp, #4]
 8006292:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006296:	bf58      	it	pl
 8006298:	eba9 0101 	subpl.w	r1, r9, r1
 800629c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80062a0:	f04f 0900 	mov.w	r9, #0
 80062a4:	bf58      	it	pl
 80062a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80062aa:	6022      	str	r2, [r4, #0]
 80062ac:	e78a      	b.n	80061c4 <_scanf_float+0x18c>
 80062ae:	f04f 0a03 	mov.w	sl, #3
 80062b2:	e787      	b.n	80061c4 <_scanf_float+0x18c>
 80062b4:	4639      	mov	r1, r7
 80062b6:	4640      	mov	r0, r8
 80062b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80062bc:	4798      	blx	r3
 80062be:	2800      	cmp	r0, #0
 80062c0:	f43f aedf 	beq.w	8006082 <_scanf_float+0x4a>
 80062c4:	e6ea      	b.n	800609c <_scanf_float+0x64>
 80062c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062ca:	463a      	mov	r2, r7
 80062cc:	4640      	mov	r0, r8
 80062ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062d2:	4798      	blx	r3
 80062d4:	6923      	ldr	r3, [r4, #16]
 80062d6:	3b01      	subs	r3, #1
 80062d8:	6123      	str	r3, [r4, #16]
 80062da:	e6ec      	b.n	80060b6 <_scanf_float+0x7e>
 80062dc:	1e6b      	subs	r3, r5, #1
 80062de:	2b06      	cmp	r3, #6
 80062e0:	d825      	bhi.n	800632e <_scanf_float+0x2f6>
 80062e2:	2d02      	cmp	r5, #2
 80062e4:	d836      	bhi.n	8006354 <_scanf_float+0x31c>
 80062e6:	455e      	cmp	r6, fp
 80062e8:	f67f aee8 	bls.w	80060bc <_scanf_float+0x84>
 80062ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062f0:	463a      	mov	r2, r7
 80062f2:	4640      	mov	r0, r8
 80062f4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062f8:	4798      	blx	r3
 80062fa:	6923      	ldr	r3, [r4, #16]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	6123      	str	r3, [r4, #16]
 8006300:	e7f1      	b.n	80062e6 <_scanf_float+0x2ae>
 8006302:	9802      	ldr	r0, [sp, #8]
 8006304:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006308:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800630c:	463a      	mov	r2, r7
 800630e:	9002      	str	r0, [sp, #8]
 8006310:	4640      	mov	r0, r8
 8006312:	4798      	blx	r3
 8006314:	6923      	ldr	r3, [r4, #16]
 8006316:	3b01      	subs	r3, #1
 8006318:	6123      	str	r3, [r4, #16]
 800631a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800631e:	fa5f fa8a 	uxtb.w	sl, sl
 8006322:	f1ba 0f02 	cmp.w	sl, #2
 8006326:	d1ec      	bne.n	8006302 <_scanf_float+0x2ca>
 8006328:	3d03      	subs	r5, #3
 800632a:	b2ed      	uxtb	r5, r5
 800632c:	1b76      	subs	r6, r6, r5
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	05da      	lsls	r2, r3, #23
 8006332:	d52f      	bpl.n	8006394 <_scanf_float+0x35c>
 8006334:	055b      	lsls	r3, r3, #21
 8006336:	d510      	bpl.n	800635a <_scanf_float+0x322>
 8006338:	455e      	cmp	r6, fp
 800633a:	f67f aebf 	bls.w	80060bc <_scanf_float+0x84>
 800633e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006342:	463a      	mov	r2, r7
 8006344:	4640      	mov	r0, r8
 8006346:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800634a:	4798      	blx	r3
 800634c:	6923      	ldr	r3, [r4, #16]
 800634e:	3b01      	subs	r3, #1
 8006350:	6123      	str	r3, [r4, #16]
 8006352:	e7f1      	b.n	8006338 <_scanf_float+0x300>
 8006354:	46aa      	mov	sl, r5
 8006356:	9602      	str	r6, [sp, #8]
 8006358:	e7df      	b.n	800631a <_scanf_float+0x2e2>
 800635a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800635e:	6923      	ldr	r3, [r4, #16]
 8006360:	2965      	cmp	r1, #101	; 0x65
 8006362:	f103 33ff 	add.w	r3, r3, #4294967295
 8006366:	f106 35ff 	add.w	r5, r6, #4294967295
 800636a:	6123      	str	r3, [r4, #16]
 800636c:	d00c      	beq.n	8006388 <_scanf_float+0x350>
 800636e:	2945      	cmp	r1, #69	; 0x45
 8006370:	d00a      	beq.n	8006388 <_scanf_float+0x350>
 8006372:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006376:	463a      	mov	r2, r7
 8006378:	4640      	mov	r0, r8
 800637a:	4798      	blx	r3
 800637c:	6923      	ldr	r3, [r4, #16]
 800637e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006382:	3b01      	subs	r3, #1
 8006384:	1eb5      	subs	r5, r6, #2
 8006386:	6123      	str	r3, [r4, #16]
 8006388:	463a      	mov	r2, r7
 800638a:	4640      	mov	r0, r8
 800638c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006390:	4798      	blx	r3
 8006392:	462e      	mov	r6, r5
 8006394:	6825      	ldr	r5, [r4, #0]
 8006396:	f015 0510 	ands.w	r5, r5, #16
 800639a:	d155      	bne.n	8006448 <_scanf_float+0x410>
 800639c:	7035      	strb	r5, [r6, #0]
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a8:	d11b      	bne.n	80063e2 <_scanf_float+0x3aa>
 80063aa:	9b01      	ldr	r3, [sp, #4]
 80063ac:	454b      	cmp	r3, r9
 80063ae:	eba3 0209 	sub.w	r2, r3, r9
 80063b2:	d123      	bne.n	80063fc <_scanf_float+0x3c4>
 80063b4:	2200      	movs	r2, #0
 80063b6:	4659      	mov	r1, fp
 80063b8:	4640      	mov	r0, r8
 80063ba:	f000 fe79 	bl	80070b0 <_strtod_r>
 80063be:	6822      	ldr	r2, [r4, #0]
 80063c0:	9b03      	ldr	r3, [sp, #12]
 80063c2:	f012 0f02 	tst.w	r2, #2
 80063c6:	4606      	mov	r6, r0
 80063c8:	460f      	mov	r7, r1
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	d021      	beq.n	8006412 <_scanf_float+0x3da>
 80063ce:	1d1a      	adds	r2, r3, #4
 80063d0:	9903      	ldr	r1, [sp, #12]
 80063d2:	600a      	str	r2, [r1, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	e9c3 6700 	strd	r6, r7, [r3]
 80063da:	68e3      	ldr	r3, [r4, #12]
 80063dc:	3301      	adds	r3, #1
 80063de:	60e3      	str	r3, [r4, #12]
 80063e0:	e66d      	b.n	80060be <_scanf_float+0x86>
 80063e2:	9b04      	ldr	r3, [sp, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d0e5      	beq.n	80063b4 <_scanf_float+0x37c>
 80063e8:	9905      	ldr	r1, [sp, #20]
 80063ea:	230a      	movs	r3, #10
 80063ec:	462a      	mov	r2, r5
 80063ee:	4640      	mov	r0, r8
 80063f0:	3101      	adds	r1, #1
 80063f2:	f000 fedf 	bl	80071b4 <_strtol_r>
 80063f6:	9b04      	ldr	r3, [sp, #16]
 80063f8:	9e05      	ldr	r6, [sp, #20]
 80063fa:	1ac2      	subs	r2, r0, r3
 80063fc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006400:	429e      	cmp	r6, r3
 8006402:	bf28      	it	cs
 8006404:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006408:	4630      	mov	r0, r6
 800640a:	4910      	ldr	r1, [pc, #64]	; (800644c <_scanf_float+0x414>)
 800640c:	f000 f826 	bl	800645c <siprintf>
 8006410:	e7d0      	b.n	80063b4 <_scanf_float+0x37c>
 8006412:	f012 0f04 	tst.w	r2, #4
 8006416:	f103 0204 	add.w	r2, r3, #4
 800641a:	d1d9      	bne.n	80063d0 <_scanf_float+0x398>
 800641c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006420:	f8cc 2000 	str.w	r2, [ip]
 8006424:	f8d3 8000 	ldr.w	r8, [r3]
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	f7fa fba2 	bl	8000b74 <__aeabi_dcmpun>
 8006430:	b128      	cbz	r0, 800643e <_scanf_float+0x406>
 8006432:	4807      	ldr	r0, [pc, #28]	; (8006450 <_scanf_float+0x418>)
 8006434:	f000 f80e 	bl	8006454 <nanf>
 8006438:	f8c8 0000 	str.w	r0, [r8]
 800643c:	e7cd      	b.n	80063da <_scanf_float+0x3a2>
 800643e:	4630      	mov	r0, r6
 8006440:	4639      	mov	r1, r7
 8006442:	f7fa fbf5 	bl	8000c30 <__aeabi_d2f>
 8006446:	e7f7      	b.n	8006438 <_scanf_float+0x400>
 8006448:	2500      	movs	r5, #0
 800644a:	e638      	b.n	80060be <_scanf_float+0x86>
 800644c:	0801ae80 	.word	0x0801ae80
 8006450:	0801b288 	.word	0x0801b288

08006454 <nanf>:
 8006454:	4800      	ldr	r0, [pc, #0]	; (8006458 <nanf+0x4>)
 8006456:	4770      	bx	lr
 8006458:	7fc00000 	.word	0x7fc00000

0800645c <siprintf>:
 800645c:	b40e      	push	{r1, r2, r3}
 800645e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006462:	b500      	push	{lr}
 8006464:	b09c      	sub	sp, #112	; 0x70
 8006466:	ab1d      	add	r3, sp, #116	; 0x74
 8006468:	9002      	str	r0, [sp, #8]
 800646a:	9006      	str	r0, [sp, #24]
 800646c:	9107      	str	r1, [sp, #28]
 800646e:	9104      	str	r1, [sp, #16]
 8006470:	4808      	ldr	r0, [pc, #32]	; (8006494 <siprintf+0x38>)
 8006472:	4909      	ldr	r1, [pc, #36]	; (8006498 <siprintf+0x3c>)
 8006474:	f853 2b04 	ldr.w	r2, [r3], #4
 8006478:	9105      	str	r1, [sp, #20]
 800647a:	6800      	ldr	r0, [r0, #0]
 800647c:	a902      	add	r1, sp, #8
 800647e:	9301      	str	r3, [sp, #4]
 8006480:	f002 feb8 	bl	80091f4 <_svfiprintf_r>
 8006484:	2200      	movs	r2, #0
 8006486:	9b02      	ldr	r3, [sp, #8]
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	b01c      	add	sp, #112	; 0x70
 800648c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006490:	b003      	add	sp, #12
 8006492:	4770      	bx	lr
 8006494:	2000014c 	.word	0x2000014c
 8006498:	ffff0208 	.word	0xffff0208

0800649c <sulp>:
 800649c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064a0:	460f      	mov	r7, r1
 80064a2:	4690      	mov	r8, r2
 80064a4:	f002 fc12 	bl	8008ccc <__ulp>
 80064a8:	4604      	mov	r4, r0
 80064aa:	460d      	mov	r5, r1
 80064ac:	f1b8 0f00 	cmp.w	r8, #0
 80064b0:	d011      	beq.n	80064d6 <sulp+0x3a>
 80064b2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80064b6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	dd0b      	ble.n	80064d6 <sulp+0x3a>
 80064be:	2400      	movs	r4, #0
 80064c0:	051b      	lsls	r3, r3, #20
 80064c2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80064c6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80064ca:	4622      	mov	r2, r4
 80064cc:	462b      	mov	r3, r5
 80064ce:	f7fa f8b7 	bl	8000640 <__aeabi_dmul>
 80064d2:	4604      	mov	r4, r0
 80064d4:	460d      	mov	r5, r1
 80064d6:	4620      	mov	r0, r4
 80064d8:	4629      	mov	r1, r5
 80064da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080064e0 <_strtod_l>:
 80064e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e4:	469b      	mov	fp, r3
 80064e6:	2300      	movs	r3, #0
 80064e8:	b09f      	sub	sp, #124	; 0x7c
 80064ea:	931a      	str	r3, [sp, #104]	; 0x68
 80064ec:	4b9e      	ldr	r3, [pc, #632]	; (8006768 <_strtod_l+0x288>)
 80064ee:	4682      	mov	sl, r0
 80064f0:	681f      	ldr	r7, [r3, #0]
 80064f2:	460e      	mov	r6, r1
 80064f4:	4638      	mov	r0, r7
 80064f6:	9215      	str	r2, [sp, #84]	; 0x54
 80064f8:	f7f9 fe2a 	bl	8000150 <strlen>
 80064fc:	f04f 0800 	mov.w	r8, #0
 8006500:	4604      	mov	r4, r0
 8006502:	f04f 0900 	mov.w	r9, #0
 8006506:	9619      	str	r6, [sp, #100]	; 0x64
 8006508:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800650a:	781a      	ldrb	r2, [r3, #0]
 800650c:	2a2b      	cmp	r2, #43	; 0x2b
 800650e:	d04c      	beq.n	80065aa <_strtod_l+0xca>
 8006510:	d83a      	bhi.n	8006588 <_strtod_l+0xa8>
 8006512:	2a0d      	cmp	r2, #13
 8006514:	d833      	bhi.n	800657e <_strtod_l+0x9e>
 8006516:	2a08      	cmp	r2, #8
 8006518:	d833      	bhi.n	8006582 <_strtod_l+0xa2>
 800651a:	2a00      	cmp	r2, #0
 800651c:	d03d      	beq.n	800659a <_strtod_l+0xba>
 800651e:	2300      	movs	r3, #0
 8006520:	930a      	str	r3, [sp, #40]	; 0x28
 8006522:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006524:	782b      	ldrb	r3, [r5, #0]
 8006526:	2b30      	cmp	r3, #48	; 0x30
 8006528:	f040 80aa 	bne.w	8006680 <_strtod_l+0x1a0>
 800652c:	786b      	ldrb	r3, [r5, #1]
 800652e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006532:	2b58      	cmp	r3, #88	; 0x58
 8006534:	d166      	bne.n	8006604 <_strtod_l+0x124>
 8006536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006538:	4650      	mov	r0, sl
 800653a:	9301      	str	r3, [sp, #4]
 800653c:	ab1a      	add	r3, sp, #104	; 0x68
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	4a8a      	ldr	r2, [pc, #552]	; (800676c <_strtod_l+0x28c>)
 8006542:	f8cd b008 	str.w	fp, [sp, #8]
 8006546:	ab1b      	add	r3, sp, #108	; 0x6c
 8006548:	a919      	add	r1, sp, #100	; 0x64
 800654a:	f001 fd17 	bl	8007f7c <__gethex>
 800654e:	f010 0607 	ands.w	r6, r0, #7
 8006552:	4604      	mov	r4, r0
 8006554:	d005      	beq.n	8006562 <_strtod_l+0x82>
 8006556:	2e06      	cmp	r6, #6
 8006558:	d129      	bne.n	80065ae <_strtod_l+0xce>
 800655a:	2300      	movs	r3, #0
 800655c:	3501      	adds	r5, #1
 800655e:	9519      	str	r5, [sp, #100]	; 0x64
 8006560:	930a      	str	r3, [sp, #40]	; 0x28
 8006562:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006564:	2b00      	cmp	r3, #0
 8006566:	f040 858a 	bne.w	800707e <_strtod_l+0xb9e>
 800656a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800656c:	b1d3      	cbz	r3, 80065a4 <_strtod_l+0xc4>
 800656e:	4642      	mov	r2, r8
 8006570:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006574:	4610      	mov	r0, r2
 8006576:	4619      	mov	r1, r3
 8006578:	b01f      	add	sp, #124	; 0x7c
 800657a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800657e:	2a20      	cmp	r2, #32
 8006580:	d1cd      	bne.n	800651e <_strtod_l+0x3e>
 8006582:	3301      	adds	r3, #1
 8006584:	9319      	str	r3, [sp, #100]	; 0x64
 8006586:	e7bf      	b.n	8006508 <_strtod_l+0x28>
 8006588:	2a2d      	cmp	r2, #45	; 0x2d
 800658a:	d1c8      	bne.n	800651e <_strtod_l+0x3e>
 800658c:	2201      	movs	r2, #1
 800658e:	920a      	str	r2, [sp, #40]	; 0x28
 8006590:	1c5a      	adds	r2, r3, #1
 8006592:	9219      	str	r2, [sp, #100]	; 0x64
 8006594:	785b      	ldrb	r3, [r3, #1]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1c3      	bne.n	8006522 <_strtod_l+0x42>
 800659a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800659c:	9619      	str	r6, [sp, #100]	; 0x64
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f040 856b 	bne.w	800707a <_strtod_l+0xb9a>
 80065a4:	4642      	mov	r2, r8
 80065a6:	464b      	mov	r3, r9
 80065a8:	e7e4      	b.n	8006574 <_strtod_l+0x94>
 80065aa:	2200      	movs	r2, #0
 80065ac:	e7ef      	b.n	800658e <_strtod_l+0xae>
 80065ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80065b0:	b13a      	cbz	r2, 80065c2 <_strtod_l+0xe2>
 80065b2:	2135      	movs	r1, #53	; 0x35
 80065b4:	a81c      	add	r0, sp, #112	; 0x70
 80065b6:	f002 fc8d 	bl	8008ed4 <__copybits>
 80065ba:	4650      	mov	r0, sl
 80065bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80065be:	f002 f855 	bl	800866c <_Bfree>
 80065c2:	3e01      	subs	r6, #1
 80065c4:	2e04      	cmp	r6, #4
 80065c6:	d806      	bhi.n	80065d6 <_strtod_l+0xf6>
 80065c8:	e8df f006 	tbb	[pc, r6]
 80065cc:	1714030a 	.word	0x1714030a
 80065d0:	0a          	.byte	0x0a
 80065d1:	00          	.byte	0x00
 80065d2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80065d6:	0721      	lsls	r1, r4, #28
 80065d8:	d5c3      	bpl.n	8006562 <_strtod_l+0x82>
 80065da:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80065de:	e7c0      	b.n	8006562 <_strtod_l+0x82>
 80065e0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80065e2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80065e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80065ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80065ee:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80065f2:	e7f0      	b.n	80065d6 <_strtod_l+0xf6>
 80065f4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006770 <_strtod_l+0x290>
 80065f8:	e7ed      	b.n	80065d6 <_strtod_l+0xf6>
 80065fa:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80065fe:	f04f 38ff 	mov.w	r8, #4294967295
 8006602:	e7e8      	b.n	80065d6 <_strtod_l+0xf6>
 8006604:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	9219      	str	r2, [sp, #100]	; 0x64
 800660a:	785b      	ldrb	r3, [r3, #1]
 800660c:	2b30      	cmp	r3, #48	; 0x30
 800660e:	d0f9      	beq.n	8006604 <_strtod_l+0x124>
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0a6      	beq.n	8006562 <_strtod_l+0x82>
 8006614:	2301      	movs	r3, #1
 8006616:	9307      	str	r3, [sp, #28]
 8006618:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800661a:	220a      	movs	r2, #10
 800661c:	9308      	str	r3, [sp, #32]
 800661e:	2300      	movs	r3, #0
 8006620:	469b      	mov	fp, r3
 8006622:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006626:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006628:	7805      	ldrb	r5, [r0, #0]
 800662a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800662e:	b2d9      	uxtb	r1, r3
 8006630:	2909      	cmp	r1, #9
 8006632:	d927      	bls.n	8006684 <_strtod_l+0x1a4>
 8006634:	4622      	mov	r2, r4
 8006636:	4639      	mov	r1, r7
 8006638:	f002 fef2 	bl	8009420 <strncmp>
 800663c:	2800      	cmp	r0, #0
 800663e:	d033      	beq.n	80066a8 <_strtod_l+0x1c8>
 8006640:	2000      	movs	r0, #0
 8006642:	462a      	mov	r2, r5
 8006644:	465c      	mov	r4, fp
 8006646:	4603      	mov	r3, r0
 8006648:	9004      	str	r0, [sp, #16]
 800664a:	2a65      	cmp	r2, #101	; 0x65
 800664c:	d001      	beq.n	8006652 <_strtod_l+0x172>
 800664e:	2a45      	cmp	r2, #69	; 0x45
 8006650:	d114      	bne.n	800667c <_strtod_l+0x19c>
 8006652:	b91c      	cbnz	r4, 800665c <_strtod_l+0x17c>
 8006654:	9a07      	ldr	r2, [sp, #28]
 8006656:	4302      	orrs	r2, r0
 8006658:	d09f      	beq.n	800659a <_strtod_l+0xba>
 800665a:	2400      	movs	r4, #0
 800665c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800665e:	1c72      	adds	r2, r6, #1
 8006660:	9219      	str	r2, [sp, #100]	; 0x64
 8006662:	7872      	ldrb	r2, [r6, #1]
 8006664:	2a2b      	cmp	r2, #43	; 0x2b
 8006666:	d079      	beq.n	800675c <_strtod_l+0x27c>
 8006668:	2a2d      	cmp	r2, #45	; 0x2d
 800666a:	f000 8083 	beq.w	8006774 <_strtod_l+0x294>
 800666e:	2700      	movs	r7, #0
 8006670:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006674:	2909      	cmp	r1, #9
 8006676:	f240 8083 	bls.w	8006780 <_strtod_l+0x2a0>
 800667a:	9619      	str	r6, [sp, #100]	; 0x64
 800667c:	2500      	movs	r5, #0
 800667e:	e09f      	b.n	80067c0 <_strtod_l+0x2e0>
 8006680:	2300      	movs	r3, #0
 8006682:	e7c8      	b.n	8006616 <_strtod_l+0x136>
 8006684:	f1bb 0f08 	cmp.w	fp, #8
 8006688:	bfd5      	itete	le
 800668a:	9906      	ldrle	r1, [sp, #24]
 800668c:	9905      	ldrgt	r1, [sp, #20]
 800668e:	fb02 3301 	mlale	r3, r2, r1, r3
 8006692:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006696:	f100 0001 	add.w	r0, r0, #1
 800669a:	bfd4      	ite	le
 800669c:	9306      	strle	r3, [sp, #24]
 800669e:	9305      	strgt	r3, [sp, #20]
 80066a0:	f10b 0b01 	add.w	fp, fp, #1
 80066a4:	9019      	str	r0, [sp, #100]	; 0x64
 80066a6:	e7be      	b.n	8006626 <_strtod_l+0x146>
 80066a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066aa:	191a      	adds	r2, r3, r4
 80066ac:	9219      	str	r2, [sp, #100]	; 0x64
 80066ae:	5d1a      	ldrb	r2, [r3, r4]
 80066b0:	f1bb 0f00 	cmp.w	fp, #0
 80066b4:	d036      	beq.n	8006724 <_strtod_l+0x244>
 80066b6:	465c      	mov	r4, fp
 80066b8:	9004      	str	r0, [sp, #16]
 80066ba:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80066be:	2b09      	cmp	r3, #9
 80066c0:	d912      	bls.n	80066e8 <_strtod_l+0x208>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e7c1      	b.n	800664a <_strtod_l+0x16a>
 80066c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066c8:	3001      	adds	r0, #1
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	9219      	str	r2, [sp, #100]	; 0x64
 80066ce:	785a      	ldrb	r2, [r3, #1]
 80066d0:	2a30      	cmp	r2, #48	; 0x30
 80066d2:	d0f8      	beq.n	80066c6 <_strtod_l+0x1e6>
 80066d4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80066d8:	2b08      	cmp	r3, #8
 80066da:	f200 84d5 	bhi.w	8007088 <_strtod_l+0xba8>
 80066de:	9004      	str	r0, [sp, #16]
 80066e0:	2000      	movs	r0, #0
 80066e2:	4604      	mov	r4, r0
 80066e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066e6:	9308      	str	r3, [sp, #32]
 80066e8:	3a30      	subs	r2, #48	; 0x30
 80066ea:	f100 0301 	add.w	r3, r0, #1
 80066ee:	d013      	beq.n	8006718 <_strtod_l+0x238>
 80066f0:	9904      	ldr	r1, [sp, #16]
 80066f2:	1905      	adds	r5, r0, r4
 80066f4:	4419      	add	r1, r3
 80066f6:	9104      	str	r1, [sp, #16]
 80066f8:	4623      	mov	r3, r4
 80066fa:	210a      	movs	r1, #10
 80066fc:	42ab      	cmp	r3, r5
 80066fe:	d113      	bne.n	8006728 <_strtod_l+0x248>
 8006700:	1823      	adds	r3, r4, r0
 8006702:	2b08      	cmp	r3, #8
 8006704:	f104 0401 	add.w	r4, r4, #1
 8006708:	4404      	add	r4, r0
 800670a:	dc1b      	bgt.n	8006744 <_strtod_l+0x264>
 800670c:	230a      	movs	r3, #10
 800670e:	9906      	ldr	r1, [sp, #24]
 8006710:	fb03 2301 	mla	r3, r3, r1, r2
 8006714:	9306      	str	r3, [sp, #24]
 8006716:	2300      	movs	r3, #0
 8006718:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800671a:	4618      	mov	r0, r3
 800671c:	1c51      	adds	r1, r2, #1
 800671e:	9119      	str	r1, [sp, #100]	; 0x64
 8006720:	7852      	ldrb	r2, [r2, #1]
 8006722:	e7ca      	b.n	80066ba <_strtod_l+0x1da>
 8006724:	4658      	mov	r0, fp
 8006726:	e7d3      	b.n	80066d0 <_strtod_l+0x1f0>
 8006728:	2b08      	cmp	r3, #8
 800672a:	dc04      	bgt.n	8006736 <_strtod_l+0x256>
 800672c:	9f06      	ldr	r7, [sp, #24]
 800672e:	434f      	muls	r7, r1
 8006730:	9706      	str	r7, [sp, #24]
 8006732:	3301      	adds	r3, #1
 8006734:	e7e2      	b.n	80066fc <_strtod_l+0x21c>
 8006736:	1c5f      	adds	r7, r3, #1
 8006738:	2f10      	cmp	r7, #16
 800673a:	bfde      	ittt	le
 800673c:	9f05      	ldrle	r7, [sp, #20]
 800673e:	434f      	mulle	r7, r1
 8006740:	9705      	strle	r7, [sp, #20]
 8006742:	e7f6      	b.n	8006732 <_strtod_l+0x252>
 8006744:	2c10      	cmp	r4, #16
 8006746:	bfdf      	itttt	le
 8006748:	230a      	movle	r3, #10
 800674a:	9905      	ldrle	r1, [sp, #20]
 800674c:	fb03 2301 	mlale	r3, r3, r1, r2
 8006750:	9305      	strle	r3, [sp, #20]
 8006752:	e7e0      	b.n	8006716 <_strtod_l+0x236>
 8006754:	2300      	movs	r3, #0
 8006756:	9304      	str	r3, [sp, #16]
 8006758:	2301      	movs	r3, #1
 800675a:	e77b      	b.n	8006654 <_strtod_l+0x174>
 800675c:	2700      	movs	r7, #0
 800675e:	1cb2      	adds	r2, r6, #2
 8006760:	9219      	str	r2, [sp, #100]	; 0x64
 8006762:	78b2      	ldrb	r2, [r6, #2]
 8006764:	e784      	b.n	8006670 <_strtod_l+0x190>
 8006766:	bf00      	nop
 8006768:	0801b0d0 	.word	0x0801b0d0
 800676c:	0801ae88 	.word	0x0801ae88
 8006770:	7ff00000 	.word	0x7ff00000
 8006774:	2701      	movs	r7, #1
 8006776:	e7f2      	b.n	800675e <_strtod_l+0x27e>
 8006778:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800677a:	1c51      	adds	r1, r2, #1
 800677c:	9119      	str	r1, [sp, #100]	; 0x64
 800677e:	7852      	ldrb	r2, [r2, #1]
 8006780:	2a30      	cmp	r2, #48	; 0x30
 8006782:	d0f9      	beq.n	8006778 <_strtod_l+0x298>
 8006784:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006788:	2908      	cmp	r1, #8
 800678a:	f63f af77 	bhi.w	800667c <_strtod_l+0x19c>
 800678e:	f04f 0e0a 	mov.w	lr, #10
 8006792:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006796:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006798:	9209      	str	r2, [sp, #36]	; 0x24
 800679a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800679c:	1c51      	adds	r1, r2, #1
 800679e:	9119      	str	r1, [sp, #100]	; 0x64
 80067a0:	7852      	ldrb	r2, [r2, #1]
 80067a2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80067a6:	2d09      	cmp	r5, #9
 80067a8:	d935      	bls.n	8006816 <_strtod_l+0x336>
 80067aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80067ac:	1b49      	subs	r1, r1, r5
 80067ae:	2908      	cmp	r1, #8
 80067b0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80067b4:	dc02      	bgt.n	80067bc <_strtod_l+0x2dc>
 80067b6:	4565      	cmp	r5, ip
 80067b8:	bfa8      	it	ge
 80067ba:	4665      	movge	r5, ip
 80067bc:	b107      	cbz	r7, 80067c0 <_strtod_l+0x2e0>
 80067be:	426d      	negs	r5, r5
 80067c0:	2c00      	cmp	r4, #0
 80067c2:	d14c      	bne.n	800685e <_strtod_l+0x37e>
 80067c4:	9907      	ldr	r1, [sp, #28]
 80067c6:	4301      	orrs	r1, r0
 80067c8:	f47f aecb 	bne.w	8006562 <_strtod_l+0x82>
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f47f aee4 	bne.w	800659a <_strtod_l+0xba>
 80067d2:	2a69      	cmp	r2, #105	; 0x69
 80067d4:	d026      	beq.n	8006824 <_strtod_l+0x344>
 80067d6:	dc23      	bgt.n	8006820 <_strtod_l+0x340>
 80067d8:	2a49      	cmp	r2, #73	; 0x49
 80067da:	d023      	beq.n	8006824 <_strtod_l+0x344>
 80067dc:	2a4e      	cmp	r2, #78	; 0x4e
 80067de:	f47f aedc 	bne.w	800659a <_strtod_l+0xba>
 80067e2:	499d      	ldr	r1, [pc, #628]	; (8006a58 <_strtod_l+0x578>)
 80067e4:	a819      	add	r0, sp, #100	; 0x64
 80067e6:	f001 fe17 	bl	8008418 <__match>
 80067ea:	2800      	cmp	r0, #0
 80067ec:	f43f aed5 	beq.w	800659a <_strtod_l+0xba>
 80067f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b28      	cmp	r3, #40	; 0x28
 80067f6:	d12c      	bne.n	8006852 <_strtod_l+0x372>
 80067f8:	4998      	ldr	r1, [pc, #608]	; (8006a5c <_strtod_l+0x57c>)
 80067fa:	aa1c      	add	r2, sp, #112	; 0x70
 80067fc:	a819      	add	r0, sp, #100	; 0x64
 80067fe:	f001 fe1f 	bl	8008440 <__hexnan>
 8006802:	2805      	cmp	r0, #5
 8006804:	d125      	bne.n	8006852 <_strtod_l+0x372>
 8006806:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006808:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800680c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006810:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006814:	e6a5      	b.n	8006562 <_strtod_l+0x82>
 8006816:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800681a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800681e:	e7bc      	b.n	800679a <_strtod_l+0x2ba>
 8006820:	2a6e      	cmp	r2, #110	; 0x6e
 8006822:	e7dc      	b.n	80067de <_strtod_l+0x2fe>
 8006824:	498e      	ldr	r1, [pc, #568]	; (8006a60 <_strtod_l+0x580>)
 8006826:	a819      	add	r0, sp, #100	; 0x64
 8006828:	f001 fdf6 	bl	8008418 <__match>
 800682c:	2800      	cmp	r0, #0
 800682e:	f43f aeb4 	beq.w	800659a <_strtod_l+0xba>
 8006832:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006834:	498b      	ldr	r1, [pc, #556]	; (8006a64 <_strtod_l+0x584>)
 8006836:	3b01      	subs	r3, #1
 8006838:	a819      	add	r0, sp, #100	; 0x64
 800683a:	9319      	str	r3, [sp, #100]	; 0x64
 800683c:	f001 fdec 	bl	8008418 <__match>
 8006840:	b910      	cbnz	r0, 8006848 <_strtod_l+0x368>
 8006842:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006844:	3301      	adds	r3, #1
 8006846:	9319      	str	r3, [sp, #100]	; 0x64
 8006848:	f04f 0800 	mov.w	r8, #0
 800684c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8006a68 <_strtod_l+0x588>
 8006850:	e687      	b.n	8006562 <_strtod_l+0x82>
 8006852:	4886      	ldr	r0, [pc, #536]	; (8006a6c <_strtod_l+0x58c>)
 8006854:	f002 fdce 	bl	80093f4 <nan>
 8006858:	4680      	mov	r8, r0
 800685a:	4689      	mov	r9, r1
 800685c:	e681      	b.n	8006562 <_strtod_l+0x82>
 800685e:	9b04      	ldr	r3, [sp, #16]
 8006860:	f1bb 0f00 	cmp.w	fp, #0
 8006864:	bf08      	it	eq
 8006866:	46a3      	moveq	fp, r4
 8006868:	1aeb      	subs	r3, r5, r3
 800686a:	2c10      	cmp	r4, #16
 800686c:	9806      	ldr	r0, [sp, #24]
 800686e:	4626      	mov	r6, r4
 8006870:	9307      	str	r3, [sp, #28]
 8006872:	bfa8      	it	ge
 8006874:	2610      	movge	r6, #16
 8006876:	f7f9 fe69 	bl	800054c <__aeabi_ui2d>
 800687a:	2c09      	cmp	r4, #9
 800687c:	4680      	mov	r8, r0
 800687e:	4689      	mov	r9, r1
 8006880:	dd13      	ble.n	80068aa <_strtod_l+0x3ca>
 8006882:	4b7b      	ldr	r3, [pc, #492]	; (8006a70 <_strtod_l+0x590>)
 8006884:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006888:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800688c:	f7f9 fed8 	bl	8000640 <__aeabi_dmul>
 8006890:	4680      	mov	r8, r0
 8006892:	9805      	ldr	r0, [sp, #20]
 8006894:	4689      	mov	r9, r1
 8006896:	f7f9 fe59 	bl	800054c <__aeabi_ui2d>
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	4640      	mov	r0, r8
 80068a0:	4649      	mov	r1, r9
 80068a2:	f7f9 fd17 	bl	80002d4 <__adddf3>
 80068a6:	4680      	mov	r8, r0
 80068a8:	4689      	mov	r9, r1
 80068aa:	2c0f      	cmp	r4, #15
 80068ac:	dc36      	bgt.n	800691c <_strtod_l+0x43c>
 80068ae:	9b07      	ldr	r3, [sp, #28]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f43f ae56 	beq.w	8006562 <_strtod_l+0x82>
 80068b6:	dd22      	ble.n	80068fe <_strtod_l+0x41e>
 80068b8:	2b16      	cmp	r3, #22
 80068ba:	dc09      	bgt.n	80068d0 <_strtod_l+0x3f0>
 80068bc:	496c      	ldr	r1, [pc, #432]	; (8006a70 <_strtod_l+0x590>)
 80068be:	4642      	mov	r2, r8
 80068c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80068c4:	464b      	mov	r3, r9
 80068c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068ca:	f7f9 feb9 	bl	8000640 <__aeabi_dmul>
 80068ce:	e7c3      	b.n	8006858 <_strtod_l+0x378>
 80068d0:	9a07      	ldr	r2, [sp, #28]
 80068d2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80068d6:	4293      	cmp	r3, r2
 80068d8:	db20      	blt.n	800691c <_strtod_l+0x43c>
 80068da:	4d65      	ldr	r5, [pc, #404]	; (8006a70 <_strtod_l+0x590>)
 80068dc:	f1c4 040f 	rsb	r4, r4, #15
 80068e0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80068e4:	4642      	mov	r2, r8
 80068e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068ea:	464b      	mov	r3, r9
 80068ec:	f7f9 fea8 	bl	8000640 <__aeabi_dmul>
 80068f0:	9b07      	ldr	r3, [sp, #28]
 80068f2:	1b1c      	subs	r4, r3, r4
 80068f4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80068f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068fc:	e7e5      	b.n	80068ca <_strtod_l+0x3ea>
 80068fe:	9b07      	ldr	r3, [sp, #28]
 8006900:	3316      	adds	r3, #22
 8006902:	db0b      	blt.n	800691c <_strtod_l+0x43c>
 8006904:	9b04      	ldr	r3, [sp, #16]
 8006906:	4640      	mov	r0, r8
 8006908:	1b5d      	subs	r5, r3, r5
 800690a:	4b59      	ldr	r3, [pc, #356]	; (8006a70 <_strtod_l+0x590>)
 800690c:	4649      	mov	r1, r9
 800690e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006912:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006916:	f7f9 ffbd 	bl	8000894 <__aeabi_ddiv>
 800691a:	e79d      	b.n	8006858 <_strtod_l+0x378>
 800691c:	9b07      	ldr	r3, [sp, #28]
 800691e:	1ba6      	subs	r6, r4, r6
 8006920:	441e      	add	r6, r3
 8006922:	2e00      	cmp	r6, #0
 8006924:	dd74      	ble.n	8006a10 <_strtod_l+0x530>
 8006926:	f016 030f 	ands.w	r3, r6, #15
 800692a:	d00a      	beq.n	8006942 <_strtod_l+0x462>
 800692c:	4950      	ldr	r1, [pc, #320]	; (8006a70 <_strtod_l+0x590>)
 800692e:	4642      	mov	r2, r8
 8006930:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006934:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006938:	464b      	mov	r3, r9
 800693a:	f7f9 fe81 	bl	8000640 <__aeabi_dmul>
 800693e:	4680      	mov	r8, r0
 8006940:	4689      	mov	r9, r1
 8006942:	f036 060f 	bics.w	r6, r6, #15
 8006946:	d052      	beq.n	80069ee <_strtod_l+0x50e>
 8006948:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800694c:	dd27      	ble.n	800699e <_strtod_l+0x4be>
 800694e:	f04f 0b00 	mov.w	fp, #0
 8006952:	f8cd b010 	str.w	fp, [sp, #16]
 8006956:	f8cd b020 	str.w	fp, [sp, #32]
 800695a:	f8cd b018 	str.w	fp, [sp, #24]
 800695e:	2322      	movs	r3, #34	; 0x22
 8006960:	f04f 0800 	mov.w	r8, #0
 8006964:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006a68 <_strtod_l+0x588>
 8006968:	f8ca 3000 	str.w	r3, [sl]
 800696c:	9b08      	ldr	r3, [sp, #32]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f43f adf7 	beq.w	8006562 <_strtod_l+0x82>
 8006974:	4650      	mov	r0, sl
 8006976:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006978:	f001 fe78 	bl	800866c <_Bfree>
 800697c:	4650      	mov	r0, sl
 800697e:	9906      	ldr	r1, [sp, #24]
 8006980:	f001 fe74 	bl	800866c <_Bfree>
 8006984:	4650      	mov	r0, sl
 8006986:	9904      	ldr	r1, [sp, #16]
 8006988:	f001 fe70 	bl	800866c <_Bfree>
 800698c:	4650      	mov	r0, sl
 800698e:	9908      	ldr	r1, [sp, #32]
 8006990:	f001 fe6c 	bl	800866c <_Bfree>
 8006994:	4659      	mov	r1, fp
 8006996:	4650      	mov	r0, sl
 8006998:	f001 fe68 	bl	800866c <_Bfree>
 800699c:	e5e1      	b.n	8006562 <_strtod_l+0x82>
 800699e:	4b35      	ldr	r3, [pc, #212]	; (8006a74 <_strtod_l+0x594>)
 80069a0:	4640      	mov	r0, r8
 80069a2:	9305      	str	r3, [sp, #20]
 80069a4:	2300      	movs	r3, #0
 80069a6:	4649      	mov	r1, r9
 80069a8:	461f      	mov	r7, r3
 80069aa:	1136      	asrs	r6, r6, #4
 80069ac:	2e01      	cmp	r6, #1
 80069ae:	dc21      	bgt.n	80069f4 <_strtod_l+0x514>
 80069b0:	b10b      	cbz	r3, 80069b6 <_strtod_l+0x4d6>
 80069b2:	4680      	mov	r8, r0
 80069b4:	4689      	mov	r9, r1
 80069b6:	4b2f      	ldr	r3, [pc, #188]	; (8006a74 <_strtod_l+0x594>)
 80069b8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80069bc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80069c0:	4642      	mov	r2, r8
 80069c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069c6:	464b      	mov	r3, r9
 80069c8:	f7f9 fe3a 	bl	8000640 <__aeabi_dmul>
 80069cc:	4b26      	ldr	r3, [pc, #152]	; (8006a68 <_strtod_l+0x588>)
 80069ce:	460a      	mov	r2, r1
 80069d0:	400b      	ands	r3, r1
 80069d2:	4929      	ldr	r1, [pc, #164]	; (8006a78 <_strtod_l+0x598>)
 80069d4:	4680      	mov	r8, r0
 80069d6:	428b      	cmp	r3, r1
 80069d8:	d8b9      	bhi.n	800694e <_strtod_l+0x46e>
 80069da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80069de:	428b      	cmp	r3, r1
 80069e0:	bf86      	itte	hi
 80069e2:	f04f 38ff 	movhi.w	r8, #4294967295
 80069e6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006a7c <_strtod_l+0x59c>
 80069ea:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80069ee:	2300      	movs	r3, #0
 80069f0:	9305      	str	r3, [sp, #20]
 80069f2:	e07f      	b.n	8006af4 <_strtod_l+0x614>
 80069f4:	07f2      	lsls	r2, r6, #31
 80069f6:	d505      	bpl.n	8006a04 <_strtod_l+0x524>
 80069f8:	9b05      	ldr	r3, [sp, #20]
 80069fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fe:	f7f9 fe1f 	bl	8000640 <__aeabi_dmul>
 8006a02:	2301      	movs	r3, #1
 8006a04:	9a05      	ldr	r2, [sp, #20]
 8006a06:	3701      	adds	r7, #1
 8006a08:	3208      	adds	r2, #8
 8006a0a:	1076      	asrs	r6, r6, #1
 8006a0c:	9205      	str	r2, [sp, #20]
 8006a0e:	e7cd      	b.n	80069ac <_strtod_l+0x4cc>
 8006a10:	d0ed      	beq.n	80069ee <_strtod_l+0x50e>
 8006a12:	4276      	negs	r6, r6
 8006a14:	f016 020f 	ands.w	r2, r6, #15
 8006a18:	d00a      	beq.n	8006a30 <_strtod_l+0x550>
 8006a1a:	4b15      	ldr	r3, [pc, #84]	; (8006a70 <_strtod_l+0x590>)
 8006a1c:	4640      	mov	r0, r8
 8006a1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a22:	4649      	mov	r1, r9
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	f7f9 ff34 	bl	8000894 <__aeabi_ddiv>
 8006a2c:	4680      	mov	r8, r0
 8006a2e:	4689      	mov	r9, r1
 8006a30:	1136      	asrs	r6, r6, #4
 8006a32:	d0dc      	beq.n	80069ee <_strtod_l+0x50e>
 8006a34:	2e1f      	cmp	r6, #31
 8006a36:	dd23      	ble.n	8006a80 <_strtod_l+0x5a0>
 8006a38:	f04f 0b00 	mov.w	fp, #0
 8006a3c:	f8cd b010 	str.w	fp, [sp, #16]
 8006a40:	f8cd b020 	str.w	fp, [sp, #32]
 8006a44:	f8cd b018 	str.w	fp, [sp, #24]
 8006a48:	2322      	movs	r3, #34	; 0x22
 8006a4a:	f04f 0800 	mov.w	r8, #0
 8006a4e:	f04f 0900 	mov.w	r9, #0
 8006a52:	f8ca 3000 	str.w	r3, [sl]
 8006a56:	e789      	b.n	800696c <_strtod_l+0x48c>
 8006a58:	0801ae59 	.word	0x0801ae59
 8006a5c:	0801ae9c 	.word	0x0801ae9c
 8006a60:	0801ae51 	.word	0x0801ae51
 8006a64:	0801afdc 	.word	0x0801afdc
 8006a68:	7ff00000 	.word	0x7ff00000
 8006a6c:	0801b288 	.word	0x0801b288
 8006a70:	0801b168 	.word	0x0801b168
 8006a74:	0801b140 	.word	0x0801b140
 8006a78:	7ca00000 	.word	0x7ca00000
 8006a7c:	7fefffff 	.word	0x7fefffff
 8006a80:	f016 0310 	ands.w	r3, r6, #16
 8006a84:	bf18      	it	ne
 8006a86:	236a      	movne	r3, #106	; 0x6a
 8006a88:	4640      	mov	r0, r8
 8006a8a:	9305      	str	r3, [sp, #20]
 8006a8c:	4649      	mov	r1, r9
 8006a8e:	2300      	movs	r3, #0
 8006a90:	4fb0      	ldr	r7, [pc, #704]	; (8006d54 <_strtod_l+0x874>)
 8006a92:	07f2      	lsls	r2, r6, #31
 8006a94:	d504      	bpl.n	8006aa0 <_strtod_l+0x5c0>
 8006a96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a9a:	f7f9 fdd1 	bl	8000640 <__aeabi_dmul>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	1076      	asrs	r6, r6, #1
 8006aa2:	f107 0708 	add.w	r7, r7, #8
 8006aa6:	d1f4      	bne.n	8006a92 <_strtod_l+0x5b2>
 8006aa8:	b10b      	cbz	r3, 8006aae <_strtod_l+0x5ce>
 8006aaa:	4680      	mov	r8, r0
 8006aac:	4689      	mov	r9, r1
 8006aae:	9b05      	ldr	r3, [sp, #20]
 8006ab0:	b1c3      	cbz	r3, 8006ae4 <_strtod_l+0x604>
 8006ab2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006ab6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	4649      	mov	r1, r9
 8006abe:	dd11      	ble.n	8006ae4 <_strtod_l+0x604>
 8006ac0:	2b1f      	cmp	r3, #31
 8006ac2:	f340 8127 	ble.w	8006d14 <_strtod_l+0x834>
 8006ac6:	2b34      	cmp	r3, #52	; 0x34
 8006ac8:	bfd8      	it	le
 8006aca:	f04f 33ff 	movle.w	r3, #4294967295
 8006ace:	f04f 0800 	mov.w	r8, #0
 8006ad2:	bfcf      	iteee	gt
 8006ad4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006ad8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006adc:	fa03 f202 	lslle.w	r2, r3, r2
 8006ae0:	ea02 0901 	andle.w	r9, r2, r1
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	4640      	mov	r0, r8
 8006aea:	4649      	mov	r1, r9
 8006aec:	f7fa f810 	bl	8000b10 <__aeabi_dcmpeq>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d1a1      	bne.n	8006a38 <_strtod_l+0x558>
 8006af4:	9b06      	ldr	r3, [sp, #24]
 8006af6:	465a      	mov	r2, fp
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	4650      	mov	r0, sl
 8006afc:	4623      	mov	r3, r4
 8006afe:	9908      	ldr	r1, [sp, #32]
 8006b00:	f001 fe1c 	bl	800873c <__s2b>
 8006b04:	9008      	str	r0, [sp, #32]
 8006b06:	2800      	cmp	r0, #0
 8006b08:	f43f af21 	beq.w	800694e <_strtod_l+0x46e>
 8006b0c:	9b04      	ldr	r3, [sp, #16]
 8006b0e:	f04f 0b00 	mov.w	fp, #0
 8006b12:	1b5d      	subs	r5, r3, r5
 8006b14:	9b07      	ldr	r3, [sp, #28]
 8006b16:	f8cd b010 	str.w	fp, [sp, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	bfb4      	ite	lt
 8006b1e:	462b      	movlt	r3, r5
 8006b20:	2300      	movge	r3, #0
 8006b22:	930e      	str	r3, [sp, #56]	; 0x38
 8006b24:	9b07      	ldr	r3, [sp, #28]
 8006b26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006b2a:	9314      	str	r3, [sp, #80]	; 0x50
 8006b2c:	9b08      	ldr	r3, [sp, #32]
 8006b2e:	4650      	mov	r0, sl
 8006b30:	6859      	ldr	r1, [r3, #4]
 8006b32:	f001 fd5b 	bl	80085ec <_Balloc>
 8006b36:	9006      	str	r0, [sp, #24]
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	f43f af10 	beq.w	800695e <_strtod_l+0x47e>
 8006b3e:	9b08      	ldr	r3, [sp, #32]
 8006b40:	300c      	adds	r0, #12
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	f103 010c 	add.w	r1, r3, #12
 8006b48:	3202      	adds	r2, #2
 8006b4a:	0092      	lsls	r2, r2, #2
 8006b4c:	f001 fd40 	bl	80085d0 <memcpy>
 8006b50:	ab1c      	add	r3, sp, #112	; 0x70
 8006b52:	9301      	str	r3, [sp, #4]
 8006b54:	ab1b      	add	r3, sp, #108	; 0x6c
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	4642      	mov	r2, r8
 8006b5a:	464b      	mov	r3, r9
 8006b5c:	4650      	mov	r0, sl
 8006b5e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8006b62:	f002 f92d 	bl	8008dc0 <__d2b>
 8006b66:	901a      	str	r0, [sp, #104]	; 0x68
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	f43f aef8 	beq.w	800695e <_strtod_l+0x47e>
 8006b6e:	2101      	movs	r1, #1
 8006b70:	4650      	mov	r0, sl
 8006b72:	f001 fe7b 	bl	800886c <__i2b>
 8006b76:	4603      	mov	r3, r0
 8006b78:	9004      	str	r0, [sp, #16]
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	f43f aeef 	beq.w	800695e <_strtod_l+0x47e>
 8006b80:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006b82:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006b84:	2d00      	cmp	r5, #0
 8006b86:	bfab      	itete	ge
 8006b88:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006b8a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8006b8c:	18ee      	addge	r6, r5, r3
 8006b8e:	1b5c      	sublt	r4, r3, r5
 8006b90:	9b05      	ldr	r3, [sp, #20]
 8006b92:	bfa8      	it	ge
 8006b94:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8006b96:	eba5 0503 	sub.w	r5, r5, r3
 8006b9a:	4415      	add	r5, r2
 8006b9c:	4b6e      	ldr	r3, [pc, #440]	; (8006d58 <_strtod_l+0x878>)
 8006b9e:	f105 35ff 	add.w	r5, r5, #4294967295
 8006ba2:	bfb8      	it	lt
 8006ba4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006ba6:	429d      	cmp	r5, r3
 8006ba8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006bac:	f280 80c4 	bge.w	8006d38 <_strtod_l+0x858>
 8006bb0:	1b5b      	subs	r3, r3, r5
 8006bb2:	2b1f      	cmp	r3, #31
 8006bb4:	f04f 0701 	mov.w	r7, #1
 8006bb8:	eba2 0203 	sub.w	r2, r2, r3
 8006bbc:	f300 80b1 	bgt.w	8006d22 <_strtod_l+0x842>
 8006bc0:	2500      	movs	r5, #0
 8006bc2:	fa07 f303 	lsl.w	r3, r7, r3
 8006bc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bc8:	18b7      	adds	r7, r6, r2
 8006bca:	9b05      	ldr	r3, [sp, #20]
 8006bcc:	42be      	cmp	r6, r7
 8006bce:	4414      	add	r4, r2
 8006bd0:	441c      	add	r4, r3
 8006bd2:	4633      	mov	r3, r6
 8006bd4:	bfa8      	it	ge
 8006bd6:	463b      	movge	r3, r7
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	bfa8      	it	ge
 8006bdc:	4623      	movge	r3, r4
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	bfc2      	ittt	gt
 8006be2:	1aff      	subgt	r7, r7, r3
 8006be4:	1ae4      	subgt	r4, r4, r3
 8006be6:	1af6      	subgt	r6, r6, r3
 8006be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	dd17      	ble.n	8006c1e <_strtod_l+0x73e>
 8006bee:	461a      	mov	r2, r3
 8006bf0:	4650      	mov	r0, sl
 8006bf2:	9904      	ldr	r1, [sp, #16]
 8006bf4:	f001 fef8 	bl	80089e8 <__pow5mult>
 8006bf8:	9004      	str	r0, [sp, #16]
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	f43f aeaf 	beq.w	800695e <_strtod_l+0x47e>
 8006c00:	4601      	mov	r1, r0
 8006c02:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006c04:	4650      	mov	r0, sl
 8006c06:	f001 fe47 	bl	8008898 <__multiply>
 8006c0a:	9009      	str	r0, [sp, #36]	; 0x24
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	f43f aea6 	beq.w	800695e <_strtod_l+0x47e>
 8006c12:	4650      	mov	r0, sl
 8006c14:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006c16:	f001 fd29 	bl	800866c <_Bfree>
 8006c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c1c:	931a      	str	r3, [sp, #104]	; 0x68
 8006c1e:	2f00      	cmp	r7, #0
 8006c20:	f300 808e 	bgt.w	8006d40 <_strtod_l+0x860>
 8006c24:	9b07      	ldr	r3, [sp, #28]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	dd08      	ble.n	8006c3c <_strtod_l+0x75c>
 8006c2a:	4650      	mov	r0, sl
 8006c2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c2e:	9906      	ldr	r1, [sp, #24]
 8006c30:	f001 feda 	bl	80089e8 <__pow5mult>
 8006c34:	9006      	str	r0, [sp, #24]
 8006c36:	2800      	cmp	r0, #0
 8006c38:	f43f ae91 	beq.w	800695e <_strtod_l+0x47e>
 8006c3c:	2c00      	cmp	r4, #0
 8006c3e:	dd08      	ble.n	8006c52 <_strtod_l+0x772>
 8006c40:	4622      	mov	r2, r4
 8006c42:	4650      	mov	r0, sl
 8006c44:	9906      	ldr	r1, [sp, #24]
 8006c46:	f001 ff29 	bl	8008a9c <__lshift>
 8006c4a:	9006      	str	r0, [sp, #24]
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	f43f ae86 	beq.w	800695e <_strtod_l+0x47e>
 8006c52:	2e00      	cmp	r6, #0
 8006c54:	dd08      	ble.n	8006c68 <_strtod_l+0x788>
 8006c56:	4632      	mov	r2, r6
 8006c58:	4650      	mov	r0, sl
 8006c5a:	9904      	ldr	r1, [sp, #16]
 8006c5c:	f001 ff1e 	bl	8008a9c <__lshift>
 8006c60:	9004      	str	r0, [sp, #16]
 8006c62:	2800      	cmp	r0, #0
 8006c64:	f43f ae7b 	beq.w	800695e <_strtod_l+0x47e>
 8006c68:	4650      	mov	r0, sl
 8006c6a:	9a06      	ldr	r2, [sp, #24]
 8006c6c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006c6e:	f001 ffa1 	bl	8008bb4 <__mdiff>
 8006c72:	4683      	mov	fp, r0
 8006c74:	2800      	cmp	r0, #0
 8006c76:	f43f ae72 	beq.w	800695e <_strtod_l+0x47e>
 8006c7a:	2400      	movs	r4, #0
 8006c7c:	68c3      	ldr	r3, [r0, #12]
 8006c7e:	9904      	ldr	r1, [sp, #16]
 8006c80:	60c4      	str	r4, [r0, #12]
 8006c82:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c84:	f001 ff7a 	bl	8008b7c <__mcmp>
 8006c88:	42a0      	cmp	r0, r4
 8006c8a:	da6b      	bge.n	8006d64 <_strtod_l+0x884>
 8006c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c8e:	ea53 0308 	orrs.w	r3, r3, r8
 8006c92:	f040 8091 	bne.w	8006db8 <_strtod_l+0x8d8>
 8006c96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f040 808c 	bne.w	8006db8 <_strtod_l+0x8d8>
 8006ca0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ca4:	0d1b      	lsrs	r3, r3, #20
 8006ca6:	051b      	lsls	r3, r3, #20
 8006ca8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006cac:	f240 8084 	bls.w	8006db8 <_strtod_l+0x8d8>
 8006cb0:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006cb4:	b91b      	cbnz	r3, 8006cbe <_strtod_l+0x7de>
 8006cb6:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	dd7c      	ble.n	8006db8 <_strtod_l+0x8d8>
 8006cbe:	4659      	mov	r1, fp
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	4650      	mov	r0, sl
 8006cc4:	f001 feea 	bl	8008a9c <__lshift>
 8006cc8:	9904      	ldr	r1, [sp, #16]
 8006cca:	4683      	mov	fp, r0
 8006ccc:	f001 ff56 	bl	8008b7c <__mcmp>
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	dd71      	ble.n	8006db8 <_strtod_l+0x8d8>
 8006cd4:	9905      	ldr	r1, [sp, #20]
 8006cd6:	464b      	mov	r3, r9
 8006cd8:	4a20      	ldr	r2, [pc, #128]	; (8006d5c <_strtod_l+0x87c>)
 8006cda:	2900      	cmp	r1, #0
 8006cdc:	f000 808c 	beq.w	8006df8 <_strtod_l+0x918>
 8006ce0:	ea02 0109 	and.w	r1, r2, r9
 8006ce4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006ce8:	f300 8086 	bgt.w	8006df8 <_strtod_l+0x918>
 8006cec:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006cf0:	f77f aeaa 	ble.w	8006a48 <_strtod_l+0x568>
 8006cf4:	4640      	mov	r0, r8
 8006cf6:	4649      	mov	r1, r9
 8006cf8:	4b19      	ldr	r3, [pc, #100]	; (8006d60 <_strtod_l+0x880>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f7f9 fca0 	bl	8000640 <__aeabi_dmul>
 8006d00:	460b      	mov	r3, r1
 8006d02:	4303      	orrs	r3, r0
 8006d04:	bf08      	it	eq
 8006d06:	2322      	moveq	r3, #34	; 0x22
 8006d08:	4680      	mov	r8, r0
 8006d0a:	4689      	mov	r9, r1
 8006d0c:	bf08      	it	eq
 8006d0e:	f8ca 3000 	streq.w	r3, [sl]
 8006d12:	e62f      	b.n	8006974 <_strtod_l+0x494>
 8006d14:	f04f 32ff 	mov.w	r2, #4294967295
 8006d18:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1c:	ea03 0808 	and.w	r8, r3, r8
 8006d20:	e6e0      	b.n	8006ae4 <_strtod_l+0x604>
 8006d22:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006d26:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006d2a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006d2e:	35e2      	adds	r5, #226	; 0xe2
 8006d30:	fa07 f505 	lsl.w	r5, r7, r5
 8006d34:	970f      	str	r7, [sp, #60]	; 0x3c
 8006d36:	e747      	b.n	8006bc8 <_strtod_l+0x6e8>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	2500      	movs	r5, #0
 8006d3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d3e:	e743      	b.n	8006bc8 <_strtod_l+0x6e8>
 8006d40:	463a      	mov	r2, r7
 8006d42:	4650      	mov	r0, sl
 8006d44:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d46:	f001 fea9 	bl	8008a9c <__lshift>
 8006d4a:	901a      	str	r0, [sp, #104]	; 0x68
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	f47f af69 	bne.w	8006c24 <_strtod_l+0x744>
 8006d52:	e604      	b.n	800695e <_strtod_l+0x47e>
 8006d54:	0801aeb0 	.word	0x0801aeb0
 8006d58:	fffffc02 	.word	0xfffffc02
 8006d5c:	7ff00000 	.word	0x7ff00000
 8006d60:	39500000 	.word	0x39500000
 8006d64:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006d68:	d165      	bne.n	8006e36 <_strtod_l+0x956>
 8006d6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d70:	b35a      	cbz	r2, 8006dca <_strtod_l+0x8ea>
 8006d72:	4a99      	ldr	r2, [pc, #612]	; (8006fd8 <_strtod_l+0xaf8>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d12b      	bne.n	8006dd0 <_strtod_l+0x8f0>
 8006d78:	9b05      	ldr	r3, [sp, #20]
 8006d7a:	4641      	mov	r1, r8
 8006d7c:	b303      	cbz	r3, 8006dc0 <_strtod_l+0x8e0>
 8006d7e:	464a      	mov	r2, r9
 8006d80:	4b96      	ldr	r3, [pc, #600]	; (8006fdc <_strtod_l+0xafc>)
 8006d82:	4013      	ands	r3, r2
 8006d84:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d88:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8c:	d81b      	bhi.n	8006dc6 <_strtod_l+0x8e6>
 8006d8e:	0d1b      	lsrs	r3, r3, #20
 8006d90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d94:	fa02 f303 	lsl.w	r3, r2, r3
 8006d98:	4299      	cmp	r1, r3
 8006d9a:	d119      	bne.n	8006dd0 <_strtod_l+0x8f0>
 8006d9c:	4b90      	ldr	r3, [pc, #576]	; (8006fe0 <_strtod_l+0xb00>)
 8006d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d102      	bne.n	8006daa <_strtod_l+0x8ca>
 8006da4:	3101      	adds	r1, #1
 8006da6:	f43f adda 	beq.w	800695e <_strtod_l+0x47e>
 8006daa:	f04f 0800 	mov.w	r8, #0
 8006dae:	4b8b      	ldr	r3, [pc, #556]	; (8006fdc <_strtod_l+0xafc>)
 8006db0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006db2:	401a      	ands	r2, r3
 8006db4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006db8:	9b05      	ldr	r3, [sp, #20]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d19a      	bne.n	8006cf4 <_strtod_l+0x814>
 8006dbe:	e5d9      	b.n	8006974 <_strtod_l+0x494>
 8006dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc4:	e7e8      	b.n	8006d98 <_strtod_l+0x8b8>
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	e7e6      	b.n	8006d98 <_strtod_l+0x8b8>
 8006dca:	ea53 0308 	orrs.w	r3, r3, r8
 8006dce:	d081      	beq.n	8006cd4 <_strtod_l+0x7f4>
 8006dd0:	b1e5      	cbz	r5, 8006e0c <_strtod_l+0x92c>
 8006dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd4:	421d      	tst	r5, r3
 8006dd6:	d0ef      	beq.n	8006db8 <_strtod_l+0x8d8>
 8006dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dda:	4640      	mov	r0, r8
 8006ddc:	4649      	mov	r1, r9
 8006dde:	9a05      	ldr	r2, [sp, #20]
 8006de0:	b1c3      	cbz	r3, 8006e14 <_strtod_l+0x934>
 8006de2:	f7ff fb5b 	bl	800649c <sulp>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006dee:	f7f9 fa71 	bl	80002d4 <__adddf3>
 8006df2:	4680      	mov	r8, r0
 8006df4:	4689      	mov	r9, r1
 8006df6:	e7df      	b.n	8006db8 <_strtod_l+0x8d8>
 8006df8:	4013      	ands	r3, r2
 8006dfa:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006dfe:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006e02:	f04f 38ff 	mov.w	r8, #4294967295
 8006e06:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006e0a:	e7d5      	b.n	8006db8 <_strtod_l+0x8d8>
 8006e0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e0e:	ea13 0f08 	tst.w	r3, r8
 8006e12:	e7e0      	b.n	8006dd6 <_strtod_l+0x8f6>
 8006e14:	f7ff fb42 	bl	800649c <sulp>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e20:	f7f9 fa56 	bl	80002d0 <__aeabi_dsub>
 8006e24:	2200      	movs	r2, #0
 8006e26:	2300      	movs	r3, #0
 8006e28:	4680      	mov	r8, r0
 8006e2a:	4689      	mov	r9, r1
 8006e2c:	f7f9 fe70 	bl	8000b10 <__aeabi_dcmpeq>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	d0c1      	beq.n	8006db8 <_strtod_l+0x8d8>
 8006e34:	e608      	b.n	8006a48 <_strtod_l+0x568>
 8006e36:	4658      	mov	r0, fp
 8006e38:	9904      	ldr	r1, [sp, #16]
 8006e3a:	f002 f81d 	bl	8008e78 <__ratio>
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e44:	4606      	mov	r6, r0
 8006e46:	460f      	mov	r7, r1
 8006e48:	f7f9 fe76 	bl	8000b38 <__aeabi_dcmple>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d070      	beq.n	8006f32 <_strtod_l+0xa52>
 8006e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d042      	beq.n	8006edc <_strtod_l+0x9fc>
 8006e56:	2600      	movs	r6, #0
 8006e58:	4f62      	ldr	r7, [pc, #392]	; (8006fe4 <_strtod_l+0xb04>)
 8006e5a:	4d62      	ldr	r5, [pc, #392]	; (8006fe4 <_strtod_l+0xb04>)
 8006e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e62:	0d1b      	lsrs	r3, r3, #20
 8006e64:	051b      	lsls	r3, r3, #20
 8006e66:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e6a:	4b5f      	ldr	r3, [pc, #380]	; (8006fe8 <_strtod_l+0xb08>)
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	f040 80c3 	bne.w	8006ff8 <_strtod_l+0xb18>
 8006e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e74:	4640      	mov	r0, r8
 8006e76:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006e7a:	4649      	mov	r1, r9
 8006e7c:	f001 ff26 	bl	8008ccc <__ulp>
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	4630      	mov	r0, r6
 8006e86:	4639      	mov	r1, r7
 8006e88:	f7f9 fbda 	bl	8000640 <__aeabi_dmul>
 8006e8c:	4642      	mov	r2, r8
 8006e8e:	464b      	mov	r3, r9
 8006e90:	f7f9 fa20 	bl	80002d4 <__adddf3>
 8006e94:	460b      	mov	r3, r1
 8006e96:	4951      	ldr	r1, [pc, #324]	; (8006fdc <_strtod_l+0xafc>)
 8006e98:	4a54      	ldr	r2, [pc, #336]	; (8006fec <_strtod_l+0xb0c>)
 8006e9a:	4019      	ands	r1, r3
 8006e9c:	4291      	cmp	r1, r2
 8006e9e:	4680      	mov	r8, r0
 8006ea0:	d95d      	bls.n	8006f5e <_strtod_l+0xa7e>
 8006ea2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ea4:	4b4e      	ldr	r3, [pc, #312]	; (8006fe0 <_strtod_l+0xb00>)
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d103      	bne.n	8006eb2 <_strtod_l+0x9d2>
 8006eaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006eac:	3301      	adds	r3, #1
 8006eae:	f43f ad56 	beq.w	800695e <_strtod_l+0x47e>
 8006eb2:	f04f 38ff 	mov.w	r8, #4294967295
 8006eb6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006fe0 <_strtod_l+0xb00>
 8006eba:	4650      	mov	r0, sl
 8006ebc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006ebe:	f001 fbd5 	bl	800866c <_Bfree>
 8006ec2:	4650      	mov	r0, sl
 8006ec4:	9906      	ldr	r1, [sp, #24]
 8006ec6:	f001 fbd1 	bl	800866c <_Bfree>
 8006eca:	4650      	mov	r0, sl
 8006ecc:	9904      	ldr	r1, [sp, #16]
 8006ece:	f001 fbcd 	bl	800866c <_Bfree>
 8006ed2:	4659      	mov	r1, fp
 8006ed4:	4650      	mov	r0, sl
 8006ed6:	f001 fbc9 	bl	800866c <_Bfree>
 8006eda:	e627      	b.n	8006b2c <_strtod_l+0x64c>
 8006edc:	f1b8 0f00 	cmp.w	r8, #0
 8006ee0:	d119      	bne.n	8006f16 <_strtod_l+0xa36>
 8006ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ee8:	b9e3      	cbnz	r3, 8006f24 <_strtod_l+0xa44>
 8006eea:	2200      	movs	r2, #0
 8006eec:	4630      	mov	r0, r6
 8006eee:	4639      	mov	r1, r7
 8006ef0:	4b3c      	ldr	r3, [pc, #240]	; (8006fe4 <_strtod_l+0xb04>)
 8006ef2:	f7f9 fe17 	bl	8000b24 <__aeabi_dcmplt>
 8006ef6:	b9c8      	cbnz	r0, 8006f2c <_strtod_l+0xa4c>
 8006ef8:	2200      	movs	r2, #0
 8006efa:	4630      	mov	r0, r6
 8006efc:	4639      	mov	r1, r7
 8006efe:	4b3c      	ldr	r3, [pc, #240]	; (8006ff0 <_strtod_l+0xb10>)
 8006f00:	f7f9 fb9e 	bl	8000640 <__aeabi_dmul>
 8006f04:	4604      	mov	r4, r0
 8006f06:	460d      	mov	r5, r1
 8006f08:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006f0c:	9416      	str	r4, [sp, #88]	; 0x58
 8006f0e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006f10:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006f14:	e7a2      	b.n	8006e5c <_strtod_l+0x97c>
 8006f16:	f1b8 0f01 	cmp.w	r8, #1
 8006f1a:	d103      	bne.n	8006f24 <_strtod_l+0xa44>
 8006f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f43f ad92 	beq.w	8006a48 <_strtod_l+0x568>
 8006f24:	2600      	movs	r6, #0
 8006f26:	2400      	movs	r4, #0
 8006f28:	4f32      	ldr	r7, [pc, #200]	; (8006ff4 <_strtod_l+0xb14>)
 8006f2a:	e796      	b.n	8006e5a <_strtod_l+0x97a>
 8006f2c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006f2e:	4d30      	ldr	r5, [pc, #192]	; (8006ff0 <_strtod_l+0xb10>)
 8006f30:	e7ea      	b.n	8006f08 <_strtod_l+0xa28>
 8006f32:	4b2f      	ldr	r3, [pc, #188]	; (8006ff0 <_strtod_l+0xb10>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	4630      	mov	r0, r6
 8006f38:	4639      	mov	r1, r7
 8006f3a:	f7f9 fb81 	bl	8000640 <__aeabi_dmul>
 8006f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f40:	4604      	mov	r4, r0
 8006f42:	460d      	mov	r5, r1
 8006f44:	b933      	cbnz	r3, 8006f54 <_strtod_l+0xa74>
 8006f46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f4a:	9010      	str	r0, [sp, #64]	; 0x40
 8006f4c:	9311      	str	r3, [sp, #68]	; 0x44
 8006f4e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006f52:	e783      	b.n	8006e5c <_strtod_l+0x97c>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006f5c:	e7f7      	b.n	8006f4e <_strtod_l+0xa6e>
 8006f5e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006f62:	9b05      	ldr	r3, [sp, #20]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1a8      	bne.n	8006eba <_strtod_l+0x9da>
 8006f68:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f6e:	0d1b      	lsrs	r3, r3, #20
 8006f70:	051b      	lsls	r3, r3, #20
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d1a1      	bne.n	8006eba <_strtod_l+0x9da>
 8006f76:	4620      	mov	r0, r4
 8006f78:	4629      	mov	r1, r5
 8006f7a:	f7f9 ffd7 	bl	8000f2c <__aeabi_d2lz>
 8006f7e:	f7f9 fb31 	bl	80005e4 <__aeabi_l2d>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4620      	mov	r0, r4
 8006f88:	4629      	mov	r1, r5
 8006f8a:	f7f9 f9a1 	bl	80002d0 <__aeabi_dsub>
 8006f8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f94:	ea43 0308 	orr.w	r3, r3, r8
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	460d      	mov	r5, r1
 8006f9e:	d066      	beq.n	800706e <_strtod_l+0xb8e>
 8006fa0:	a309      	add	r3, pc, #36	; (adr r3, 8006fc8 <_strtod_l+0xae8>)
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	f7f9 fdbd 	bl	8000b24 <__aeabi_dcmplt>
 8006faa:	2800      	cmp	r0, #0
 8006fac:	f47f ace2 	bne.w	8006974 <_strtod_l+0x494>
 8006fb0:	a307      	add	r3, pc, #28	; (adr r3, 8006fd0 <_strtod_l+0xaf0>)
 8006fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	4629      	mov	r1, r5
 8006fba:	f7f9 fdd1 	bl	8000b60 <__aeabi_dcmpgt>
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	f43f af7b 	beq.w	8006eba <_strtod_l+0x9da>
 8006fc4:	e4d6      	b.n	8006974 <_strtod_l+0x494>
 8006fc6:	bf00      	nop
 8006fc8:	94a03595 	.word	0x94a03595
 8006fcc:	3fdfffff 	.word	0x3fdfffff
 8006fd0:	35afe535 	.word	0x35afe535
 8006fd4:	3fe00000 	.word	0x3fe00000
 8006fd8:	000fffff 	.word	0x000fffff
 8006fdc:	7ff00000 	.word	0x7ff00000
 8006fe0:	7fefffff 	.word	0x7fefffff
 8006fe4:	3ff00000 	.word	0x3ff00000
 8006fe8:	7fe00000 	.word	0x7fe00000
 8006fec:	7c9fffff 	.word	0x7c9fffff
 8006ff0:	3fe00000 	.word	0x3fe00000
 8006ff4:	bff00000 	.word	0xbff00000
 8006ff8:	9b05      	ldr	r3, [sp, #20]
 8006ffa:	b313      	cbz	r3, 8007042 <_strtod_l+0xb62>
 8006ffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ffe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007002:	d81e      	bhi.n	8007042 <_strtod_l+0xb62>
 8007004:	a326      	add	r3, pc, #152	; (adr r3, 80070a0 <_strtod_l+0xbc0>)
 8007006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700a:	4620      	mov	r0, r4
 800700c:	4629      	mov	r1, r5
 800700e:	f7f9 fd93 	bl	8000b38 <__aeabi_dcmple>
 8007012:	b190      	cbz	r0, 800703a <_strtod_l+0xb5a>
 8007014:	4629      	mov	r1, r5
 8007016:	4620      	mov	r0, r4
 8007018:	f7f9 fdea 	bl	8000bf0 <__aeabi_d2uiz>
 800701c:	2801      	cmp	r0, #1
 800701e:	bf38      	it	cc
 8007020:	2001      	movcc	r0, #1
 8007022:	f7f9 fa93 	bl	800054c <__aeabi_ui2d>
 8007026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007028:	4604      	mov	r4, r0
 800702a:	460d      	mov	r5, r1
 800702c:	b9d3      	cbnz	r3, 8007064 <_strtod_l+0xb84>
 800702e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007032:	9012      	str	r0, [sp, #72]	; 0x48
 8007034:	9313      	str	r3, [sp, #76]	; 0x4c
 8007036:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800703a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800703c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007040:	1a9f      	subs	r7, r3, r2
 8007042:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007046:	f001 fe41 	bl	8008ccc <__ulp>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	4630      	mov	r0, r6
 8007050:	4639      	mov	r1, r7
 8007052:	f7f9 faf5 	bl	8000640 <__aeabi_dmul>
 8007056:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800705a:	f7f9 f93b 	bl	80002d4 <__adddf3>
 800705e:	4680      	mov	r8, r0
 8007060:	4689      	mov	r9, r1
 8007062:	e77e      	b.n	8006f62 <_strtod_l+0xa82>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800706c:	e7e3      	b.n	8007036 <_strtod_l+0xb56>
 800706e:	a30e      	add	r3, pc, #56	; (adr r3, 80070a8 <_strtod_l+0xbc8>)
 8007070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007074:	f7f9 fd56 	bl	8000b24 <__aeabi_dcmplt>
 8007078:	e7a1      	b.n	8006fbe <_strtod_l+0xade>
 800707a:	2300      	movs	r3, #0
 800707c:	930a      	str	r3, [sp, #40]	; 0x28
 800707e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007080:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	f7ff ba71 	b.w	800656a <_strtod_l+0x8a>
 8007088:	2a65      	cmp	r2, #101	; 0x65
 800708a:	f43f ab63 	beq.w	8006754 <_strtod_l+0x274>
 800708e:	2a45      	cmp	r2, #69	; 0x45
 8007090:	f43f ab60 	beq.w	8006754 <_strtod_l+0x274>
 8007094:	2301      	movs	r3, #1
 8007096:	f7ff bb95 	b.w	80067c4 <_strtod_l+0x2e4>
 800709a:	bf00      	nop
 800709c:	f3af 8000 	nop.w
 80070a0:	ffc00000 	.word	0xffc00000
 80070a4:	41dfffff 	.word	0x41dfffff
 80070a8:	94a03595 	.word	0x94a03595
 80070ac:	3fcfffff 	.word	0x3fcfffff

080070b0 <_strtod_r>:
 80070b0:	4b01      	ldr	r3, [pc, #4]	; (80070b8 <_strtod_r+0x8>)
 80070b2:	f7ff ba15 	b.w	80064e0 <_strtod_l>
 80070b6:	bf00      	nop
 80070b8:	200001b4 	.word	0x200001b4

080070bc <_strtol_l.constprop.0>:
 80070bc:	2b01      	cmp	r3, #1
 80070be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c2:	4680      	mov	r8, r0
 80070c4:	d001      	beq.n	80070ca <_strtol_l.constprop.0+0xe>
 80070c6:	2b24      	cmp	r3, #36	; 0x24
 80070c8:	d906      	bls.n	80070d8 <_strtol_l.constprop.0+0x1c>
 80070ca:	f7fe fb09 	bl	80056e0 <__errno>
 80070ce:	2316      	movs	r3, #22
 80070d0:	6003      	str	r3, [r0, #0]
 80070d2:	2000      	movs	r0, #0
 80070d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d8:	460d      	mov	r5, r1
 80070da:	4f35      	ldr	r7, [pc, #212]	; (80071b0 <_strtol_l.constprop.0+0xf4>)
 80070dc:	4628      	mov	r0, r5
 80070de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070e2:	5de6      	ldrb	r6, [r4, r7]
 80070e4:	f016 0608 	ands.w	r6, r6, #8
 80070e8:	d1f8      	bne.n	80070dc <_strtol_l.constprop.0+0x20>
 80070ea:	2c2d      	cmp	r4, #45	; 0x2d
 80070ec:	d12f      	bne.n	800714e <_strtol_l.constprop.0+0x92>
 80070ee:	2601      	movs	r6, #1
 80070f0:	782c      	ldrb	r4, [r5, #0]
 80070f2:	1c85      	adds	r5, r0, #2
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d057      	beq.n	80071a8 <_strtol_l.constprop.0+0xec>
 80070f8:	2b10      	cmp	r3, #16
 80070fa:	d109      	bne.n	8007110 <_strtol_l.constprop.0+0x54>
 80070fc:	2c30      	cmp	r4, #48	; 0x30
 80070fe:	d107      	bne.n	8007110 <_strtol_l.constprop.0+0x54>
 8007100:	7828      	ldrb	r0, [r5, #0]
 8007102:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007106:	2858      	cmp	r0, #88	; 0x58
 8007108:	d149      	bne.n	800719e <_strtol_l.constprop.0+0xe2>
 800710a:	2310      	movs	r3, #16
 800710c:	786c      	ldrb	r4, [r5, #1]
 800710e:	3502      	adds	r5, #2
 8007110:	2700      	movs	r7, #0
 8007112:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007116:	f10e 3eff 	add.w	lr, lr, #4294967295
 800711a:	fbbe f9f3 	udiv	r9, lr, r3
 800711e:	4638      	mov	r0, r7
 8007120:	fb03 ea19 	mls	sl, r3, r9, lr
 8007124:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007128:	f1bc 0f09 	cmp.w	ip, #9
 800712c:	d814      	bhi.n	8007158 <_strtol_l.constprop.0+0x9c>
 800712e:	4664      	mov	r4, ip
 8007130:	42a3      	cmp	r3, r4
 8007132:	dd22      	ble.n	800717a <_strtol_l.constprop.0+0xbe>
 8007134:	2f00      	cmp	r7, #0
 8007136:	db1d      	blt.n	8007174 <_strtol_l.constprop.0+0xb8>
 8007138:	4581      	cmp	r9, r0
 800713a:	d31b      	bcc.n	8007174 <_strtol_l.constprop.0+0xb8>
 800713c:	d101      	bne.n	8007142 <_strtol_l.constprop.0+0x86>
 800713e:	45a2      	cmp	sl, r4
 8007140:	db18      	blt.n	8007174 <_strtol_l.constprop.0+0xb8>
 8007142:	2701      	movs	r7, #1
 8007144:	fb00 4003 	mla	r0, r0, r3, r4
 8007148:	f815 4b01 	ldrb.w	r4, [r5], #1
 800714c:	e7ea      	b.n	8007124 <_strtol_l.constprop.0+0x68>
 800714e:	2c2b      	cmp	r4, #43	; 0x2b
 8007150:	bf04      	itt	eq
 8007152:	782c      	ldrbeq	r4, [r5, #0]
 8007154:	1c85      	addeq	r5, r0, #2
 8007156:	e7cd      	b.n	80070f4 <_strtol_l.constprop.0+0x38>
 8007158:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800715c:	f1bc 0f19 	cmp.w	ip, #25
 8007160:	d801      	bhi.n	8007166 <_strtol_l.constprop.0+0xaa>
 8007162:	3c37      	subs	r4, #55	; 0x37
 8007164:	e7e4      	b.n	8007130 <_strtol_l.constprop.0+0x74>
 8007166:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800716a:	f1bc 0f19 	cmp.w	ip, #25
 800716e:	d804      	bhi.n	800717a <_strtol_l.constprop.0+0xbe>
 8007170:	3c57      	subs	r4, #87	; 0x57
 8007172:	e7dd      	b.n	8007130 <_strtol_l.constprop.0+0x74>
 8007174:	f04f 37ff 	mov.w	r7, #4294967295
 8007178:	e7e6      	b.n	8007148 <_strtol_l.constprop.0+0x8c>
 800717a:	2f00      	cmp	r7, #0
 800717c:	da07      	bge.n	800718e <_strtol_l.constprop.0+0xd2>
 800717e:	2322      	movs	r3, #34	; 0x22
 8007180:	4670      	mov	r0, lr
 8007182:	f8c8 3000 	str.w	r3, [r8]
 8007186:	2a00      	cmp	r2, #0
 8007188:	d0a4      	beq.n	80070d4 <_strtol_l.constprop.0+0x18>
 800718a:	1e69      	subs	r1, r5, #1
 800718c:	e005      	b.n	800719a <_strtol_l.constprop.0+0xde>
 800718e:	b106      	cbz	r6, 8007192 <_strtol_l.constprop.0+0xd6>
 8007190:	4240      	negs	r0, r0
 8007192:	2a00      	cmp	r2, #0
 8007194:	d09e      	beq.n	80070d4 <_strtol_l.constprop.0+0x18>
 8007196:	2f00      	cmp	r7, #0
 8007198:	d1f7      	bne.n	800718a <_strtol_l.constprop.0+0xce>
 800719a:	6011      	str	r1, [r2, #0]
 800719c:	e79a      	b.n	80070d4 <_strtol_l.constprop.0+0x18>
 800719e:	2430      	movs	r4, #48	; 0x30
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1b5      	bne.n	8007110 <_strtol_l.constprop.0+0x54>
 80071a4:	2308      	movs	r3, #8
 80071a6:	e7b3      	b.n	8007110 <_strtol_l.constprop.0+0x54>
 80071a8:	2c30      	cmp	r4, #48	; 0x30
 80071aa:	d0a9      	beq.n	8007100 <_strtol_l.constprop.0+0x44>
 80071ac:	230a      	movs	r3, #10
 80071ae:	e7af      	b.n	8007110 <_strtol_l.constprop.0+0x54>
 80071b0:	0801aed9 	.word	0x0801aed9

080071b4 <_strtol_r>:
 80071b4:	f7ff bf82 	b.w	80070bc <_strtol_l.constprop.0>

080071b8 <quorem>:
 80071b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071bc:	6903      	ldr	r3, [r0, #16]
 80071be:	690c      	ldr	r4, [r1, #16]
 80071c0:	4607      	mov	r7, r0
 80071c2:	42a3      	cmp	r3, r4
 80071c4:	f2c0 8082 	blt.w	80072cc <quorem+0x114>
 80071c8:	3c01      	subs	r4, #1
 80071ca:	f100 0514 	add.w	r5, r0, #20
 80071ce:	f101 0814 	add.w	r8, r1, #20
 80071d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071d6:	9301      	str	r3, [sp, #4]
 80071d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071e0:	3301      	adds	r3, #1
 80071e2:	429a      	cmp	r2, r3
 80071e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80071e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80071ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071f0:	d331      	bcc.n	8007256 <quorem+0x9e>
 80071f2:	f04f 0e00 	mov.w	lr, #0
 80071f6:	4640      	mov	r0, r8
 80071f8:	46ac      	mov	ip, r5
 80071fa:	46f2      	mov	sl, lr
 80071fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8007200:	b293      	uxth	r3, r2
 8007202:	fb06 e303 	mla	r3, r6, r3, lr
 8007206:	0c12      	lsrs	r2, r2, #16
 8007208:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800720c:	b29b      	uxth	r3, r3
 800720e:	fb06 e202 	mla	r2, r6, r2, lr
 8007212:	ebaa 0303 	sub.w	r3, sl, r3
 8007216:	f8dc a000 	ldr.w	sl, [ip]
 800721a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800721e:	fa1f fa8a 	uxth.w	sl, sl
 8007222:	4453      	add	r3, sl
 8007224:	f8dc a000 	ldr.w	sl, [ip]
 8007228:	b292      	uxth	r2, r2
 800722a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800722e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007232:	b29b      	uxth	r3, r3
 8007234:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007238:	4581      	cmp	r9, r0
 800723a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800723e:	f84c 3b04 	str.w	r3, [ip], #4
 8007242:	d2db      	bcs.n	80071fc <quorem+0x44>
 8007244:	f855 300b 	ldr.w	r3, [r5, fp]
 8007248:	b92b      	cbnz	r3, 8007256 <quorem+0x9e>
 800724a:	9b01      	ldr	r3, [sp, #4]
 800724c:	3b04      	subs	r3, #4
 800724e:	429d      	cmp	r5, r3
 8007250:	461a      	mov	r2, r3
 8007252:	d32f      	bcc.n	80072b4 <quorem+0xfc>
 8007254:	613c      	str	r4, [r7, #16]
 8007256:	4638      	mov	r0, r7
 8007258:	f001 fc90 	bl	8008b7c <__mcmp>
 800725c:	2800      	cmp	r0, #0
 800725e:	db25      	blt.n	80072ac <quorem+0xf4>
 8007260:	4628      	mov	r0, r5
 8007262:	f04f 0c00 	mov.w	ip, #0
 8007266:	3601      	adds	r6, #1
 8007268:	f858 1b04 	ldr.w	r1, [r8], #4
 800726c:	f8d0 e000 	ldr.w	lr, [r0]
 8007270:	b28b      	uxth	r3, r1
 8007272:	ebac 0303 	sub.w	r3, ip, r3
 8007276:	fa1f f28e 	uxth.w	r2, lr
 800727a:	4413      	add	r3, r2
 800727c:	0c0a      	lsrs	r2, r1, #16
 800727e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007282:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007286:	b29b      	uxth	r3, r3
 8007288:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800728c:	45c1      	cmp	r9, r8
 800728e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007292:	f840 3b04 	str.w	r3, [r0], #4
 8007296:	d2e7      	bcs.n	8007268 <quorem+0xb0>
 8007298:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800729c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072a0:	b922      	cbnz	r2, 80072ac <quorem+0xf4>
 80072a2:	3b04      	subs	r3, #4
 80072a4:	429d      	cmp	r5, r3
 80072a6:	461a      	mov	r2, r3
 80072a8:	d30a      	bcc.n	80072c0 <quorem+0x108>
 80072aa:	613c      	str	r4, [r7, #16]
 80072ac:	4630      	mov	r0, r6
 80072ae:	b003      	add	sp, #12
 80072b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b4:	6812      	ldr	r2, [r2, #0]
 80072b6:	3b04      	subs	r3, #4
 80072b8:	2a00      	cmp	r2, #0
 80072ba:	d1cb      	bne.n	8007254 <quorem+0x9c>
 80072bc:	3c01      	subs	r4, #1
 80072be:	e7c6      	b.n	800724e <quorem+0x96>
 80072c0:	6812      	ldr	r2, [r2, #0]
 80072c2:	3b04      	subs	r3, #4
 80072c4:	2a00      	cmp	r2, #0
 80072c6:	d1f0      	bne.n	80072aa <quorem+0xf2>
 80072c8:	3c01      	subs	r4, #1
 80072ca:	e7eb      	b.n	80072a4 <quorem+0xec>
 80072cc:	2000      	movs	r0, #0
 80072ce:	e7ee      	b.n	80072ae <quorem+0xf6>

080072d0 <_dtoa_r>:
 80072d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d4:	4616      	mov	r6, r2
 80072d6:	461f      	mov	r7, r3
 80072d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80072da:	b099      	sub	sp, #100	; 0x64
 80072dc:	4605      	mov	r5, r0
 80072de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80072e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80072e6:	b974      	cbnz	r4, 8007306 <_dtoa_r+0x36>
 80072e8:	2010      	movs	r0, #16
 80072ea:	f001 f949 	bl	8008580 <malloc>
 80072ee:	4602      	mov	r2, r0
 80072f0:	6268      	str	r0, [r5, #36]	; 0x24
 80072f2:	b920      	cbnz	r0, 80072fe <_dtoa_r+0x2e>
 80072f4:	21ea      	movs	r1, #234	; 0xea
 80072f6:	4ba8      	ldr	r3, [pc, #672]	; (8007598 <_dtoa_r+0x2c8>)
 80072f8:	48a8      	ldr	r0, [pc, #672]	; (800759c <_dtoa_r+0x2cc>)
 80072fa:	f002 f8b3 	bl	8009464 <__assert_func>
 80072fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007302:	6004      	str	r4, [r0, #0]
 8007304:	60c4      	str	r4, [r0, #12]
 8007306:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007308:	6819      	ldr	r1, [r3, #0]
 800730a:	b151      	cbz	r1, 8007322 <_dtoa_r+0x52>
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	2301      	movs	r3, #1
 8007310:	4093      	lsls	r3, r2
 8007312:	604a      	str	r2, [r1, #4]
 8007314:	608b      	str	r3, [r1, #8]
 8007316:	4628      	mov	r0, r5
 8007318:	f001 f9a8 	bl	800866c <_Bfree>
 800731c:	2200      	movs	r2, #0
 800731e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	1e3b      	subs	r3, r7, #0
 8007324:	bfaf      	iteee	ge
 8007326:	2300      	movge	r3, #0
 8007328:	2201      	movlt	r2, #1
 800732a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800732e:	9305      	strlt	r3, [sp, #20]
 8007330:	bfa8      	it	ge
 8007332:	f8c8 3000 	strge.w	r3, [r8]
 8007336:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800733a:	4b99      	ldr	r3, [pc, #612]	; (80075a0 <_dtoa_r+0x2d0>)
 800733c:	bfb8      	it	lt
 800733e:	f8c8 2000 	strlt.w	r2, [r8]
 8007342:	ea33 0309 	bics.w	r3, r3, r9
 8007346:	d119      	bne.n	800737c <_dtoa_r+0xac>
 8007348:	f242 730f 	movw	r3, #9999	; 0x270f
 800734c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007354:	4333      	orrs	r3, r6
 8007356:	f000 857f 	beq.w	8007e58 <_dtoa_r+0xb88>
 800735a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800735c:	b953      	cbnz	r3, 8007374 <_dtoa_r+0xa4>
 800735e:	4b91      	ldr	r3, [pc, #580]	; (80075a4 <_dtoa_r+0x2d4>)
 8007360:	e022      	b.n	80073a8 <_dtoa_r+0xd8>
 8007362:	4b91      	ldr	r3, [pc, #580]	; (80075a8 <_dtoa_r+0x2d8>)
 8007364:	9303      	str	r3, [sp, #12]
 8007366:	3308      	adds	r3, #8
 8007368:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	9803      	ldr	r0, [sp, #12]
 800736e:	b019      	add	sp, #100	; 0x64
 8007370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007374:	4b8b      	ldr	r3, [pc, #556]	; (80075a4 <_dtoa_r+0x2d4>)
 8007376:	9303      	str	r3, [sp, #12]
 8007378:	3303      	adds	r3, #3
 800737a:	e7f5      	b.n	8007368 <_dtoa_r+0x98>
 800737c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007380:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007384:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007388:	2200      	movs	r2, #0
 800738a:	2300      	movs	r3, #0
 800738c:	f7f9 fbc0 	bl	8000b10 <__aeabi_dcmpeq>
 8007390:	4680      	mov	r8, r0
 8007392:	b158      	cbz	r0, 80073ac <_dtoa_r+0xdc>
 8007394:	2301      	movs	r3, #1
 8007396:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007398:	6013      	str	r3, [r2, #0]
 800739a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 8558 	beq.w	8007e52 <_dtoa_r+0xb82>
 80073a2:	4882      	ldr	r0, [pc, #520]	; (80075ac <_dtoa_r+0x2dc>)
 80073a4:	6018      	str	r0, [r3, #0]
 80073a6:	1e43      	subs	r3, r0, #1
 80073a8:	9303      	str	r3, [sp, #12]
 80073aa:	e7df      	b.n	800736c <_dtoa_r+0x9c>
 80073ac:	ab16      	add	r3, sp, #88	; 0x58
 80073ae:	9301      	str	r3, [sp, #4]
 80073b0:	ab17      	add	r3, sp, #92	; 0x5c
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	4628      	mov	r0, r5
 80073b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80073ba:	f001 fd01 	bl	8008dc0 <__d2b>
 80073be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80073c2:	4683      	mov	fp, r0
 80073c4:	2c00      	cmp	r4, #0
 80073c6:	d07f      	beq.n	80074c8 <_dtoa_r+0x1f8>
 80073c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80073d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80073da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80073de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80073e2:	2200      	movs	r2, #0
 80073e4:	4b72      	ldr	r3, [pc, #456]	; (80075b0 <_dtoa_r+0x2e0>)
 80073e6:	f7f8 ff73 	bl	80002d0 <__aeabi_dsub>
 80073ea:	a365      	add	r3, pc, #404	; (adr r3, 8007580 <_dtoa_r+0x2b0>)
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	f7f9 f926 	bl	8000640 <__aeabi_dmul>
 80073f4:	a364      	add	r3, pc, #400	; (adr r3, 8007588 <_dtoa_r+0x2b8>)
 80073f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fa:	f7f8 ff6b 	bl	80002d4 <__adddf3>
 80073fe:	4606      	mov	r6, r0
 8007400:	4620      	mov	r0, r4
 8007402:	460f      	mov	r7, r1
 8007404:	f7f9 f8b2 	bl	800056c <__aeabi_i2d>
 8007408:	a361      	add	r3, pc, #388	; (adr r3, 8007590 <_dtoa_r+0x2c0>)
 800740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740e:	f7f9 f917 	bl	8000640 <__aeabi_dmul>
 8007412:	4602      	mov	r2, r0
 8007414:	460b      	mov	r3, r1
 8007416:	4630      	mov	r0, r6
 8007418:	4639      	mov	r1, r7
 800741a:	f7f8 ff5b 	bl	80002d4 <__adddf3>
 800741e:	4606      	mov	r6, r0
 8007420:	460f      	mov	r7, r1
 8007422:	f7f9 fbbd 	bl	8000ba0 <__aeabi_d2iz>
 8007426:	2200      	movs	r2, #0
 8007428:	4682      	mov	sl, r0
 800742a:	2300      	movs	r3, #0
 800742c:	4630      	mov	r0, r6
 800742e:	4639      	mov	r1, r7
 8007430:	f7f9 fb78 	bl	8000b24 <__aeabi_dcmplt>
 8007434:	b148      	cbz	r0, 800744a <_dtoa_r+0x17a>
 8007436:	4650      	mov	r0, sl
 8007438:	f7f9 f898 	bl	800056c <__aeabi_i2d>
 800743c:	4632      	mov	r2, r6
 800743e:	463b      	mov	r3, r7
 8007440:	f7f9 fb66 	bl	8000b10 <__aeabi_dcmpeq>
 8007444:	b908      	cbnz	r0, 800744a <_dtoa_r+0x17a>
 8007446:	f10a 3aff 	add.w	sl, sl, #4294967295
 800744a:	f1ba 0f16 	cmp.w	sl, #22
 800744e:	d858      	bhi.n	8007502 <_dtoa_r+0x232>
 8007450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007454:	4b57      	ldr	r3, [pc, #348]	; (80075b4 <_dtoa_r+0x2e4>)
 8007456:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745e:	f7f9 fb61 	bl	8000b24 <__aeabi_dcmplt>
 8007462:	2800      	cmp	r0, #0
 8007464:	d04f      	beq.n	8007506 <_dtoa_r+0x236>
 8007466:	2300      	movs	r3, #0
 8007468:	f10a 3aff 	add.w	sl, sl, #4294967295
 800746c:	930f      	str	r3, [sp, #60]	; 0x3c
 800746e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007470:	1b1c      	subs	r4, r3, r4
 8007472:	1e63      	subs	r3, r4, #1
 8007474:	9309      	str	r3, [sp, #36]	; 0x24
 8007476:	bf49      	itett	mi
 8007478:	f1c4 0301 	rsbmi	r3, r4, #1
 800747c:	2300      	movpl	r3, #0
 800747e:	9306      	strmi	r3, [sp, #24]
 8007480:	2300      	movmi	r3, #0
 8007482:	bf54      	ite	pl
 8007484:	9306      	strpl	r3, [sp, #24]
 8007486:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007488:	f1ba 0f00 	cmp.w	sl, #0
 800748c:	db3d      	blt.n	800750a <_dtoa_r+0x23a>
 800748e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007490:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007494:	4453      	add	r3, sl
 8007496:	9309      	str	r3, [sp, #36]	; 0x24
 8007498:	2300      	movs	r3, #0
 800749a:	930a      	str	r3, [sp, #40]	; 0x28
 800749c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800749e:	2b09      	cmp	r3, #9
 80074a0:	f200 808c 	bhi.w	80075bc <_dtoa_r+0x2ec>
 80074a4:	2b05      	cmp	r3, #5
 80074a6:	bfc4      	itt	gt
 80074a8:	3b04      	subgt	r3, #4
 80074aa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80074ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074ae:	bfc8      	it	gt
 80074b0:	2400      	movgt	r4, #0
 80074b2:	f1a3 0302 	sub.w	r3, r3, #2
 80074b6:	bfd8      	it	le
 80074b8:	2401      	movle	r4, #1
 80074ba:	2b03      	cmp	r3, #3
 80074bc:	f200 808a 	bhi.w	80075d4 <_dtoa_r+0x304>
 80074c0:	e8df f003 	tbb	[pc, r3]
 80074c4:	5b4d4f2d 	.word	0x5b4d4f2d
 80074c8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80074cc:	441c      	add	r4, r3
 80074ce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80074d2:	2b20      	cmp	r3, #32
 80074d4:	bfc3      	ittte	gt
 80074d6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80074da:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80074de:	fa09 f303 	lslgt.w	r3, r9, r3
 80074e2:	f1c3 0320 	rsble	r3, r3, #32
 80074e6:	bfc6      	itte	gt
 80074e8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80074ec:	4318      	orrgt	r0, r3
 80074ee:	fa06 f003 	lslle.w	r0, r6, r3
 80074f2:	f7f9 f82b 	bl	800054c <__aeabi_ui2d>
 80074f6:	2301      	movs	r3, #1
 80074f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80074fc:	3c01      	subs	r4, #1
 80074fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8007500:	e76f      	b.n	80073e2 <_dtoa_r+0x112>
 8007502:	2301      	movs	r3, #1
 8007504:	e7b2      	b.n	800746c <_dtoa_r+0x19c>
 8007506:	900f      	str	r0, [sp, #60]	; 0x3c
 8007508:	e7b1      	b.n	800746e <_dtoa_r+0x19e>
 800750a:	9b06      	ldr	r3, [sp, #24]
 800750c:	eba3 030a 	sub.w	r3, r3, sl
 8007510:	9306      	str	r3, [sp, #24]
 8007512:	f1ca 0300 	rsb	r3, sl, #0
 8007516:	930a      	str	r3, [sp, #40]	; 0x28
 8007518:	2300      	movs	r3, #0
 800751a:	930e      	str	r3, [sp, #56]	; 0x38
 800751c:	e7be      	b.n	800749c <_dtoa_r+0x1cc>
 800751e:	2300      	movs	r3, #0
 8007520:	930b      	str	r3, [sp, #44]	; 0x2c
 8007522:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007524:	2b00      	cmp	r3, #0
 8007526:	dc58      	bgt.n	80075da <_dtoa_r+0x30a>
 8007528:	f04f 0901 	mov.w	r9, #1
 800752c:	464b      	mov	r3, r9
 800752e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007532:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007536:	2200      	movs	r2, #0
 8007538:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800753a:	6042      	str	r2, [r0, #4]
 800753c:	2204      	movs	r2, #4
 800753e:	f102 0614 	add.w	r6, r2, #20
 8007542:	429e      	cmp	r6, r3
 8007544:	6841      	ldr	r1, [r0, #4]
 8007546:	d94e      	bls.n	80075e6 <_dtoa_r+0x316>
 8007548:	4628      	mov	r0, r5
 800754a:	f001 f84f 	bl	80085ec <_Balloc>
 800754e:	9003      	str	r0, [sp, #12]
 8007550:	2800      	cmp	r0, #0
 8007552:	d14c      	bne.n	80075ee <_dtoa_r+0x31e>
 8007554:	4602      	mov	r2, r0
 8007556:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800755a:	4b17      	ldr	r3, [pc, #92]	; (80075b8 <_dtoa_r+0x2e8>)
 800755c:	e6cc      	b.n	80072f8 <_dtoa_r+0x28>
 800755e:	2301      	movs	r3, #1
 8007560:	e7de      	b.n	8007520 <_dtoa_r+0x250>
 8007562:	2300      	movs	r3, #0
 8007564:	930b      	str	r3, [sp, #44]	; 0x2c
 8007566:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007568:	eb0a 0903 	add.w	r9, sl, r3
 800756c:	f109 0301 	add.w	r3, r9, #1
 8007570:	2b01      	cmp	r3, #1
 8007572:	9308      	str	r3, [sp, #32]
 8007574:	bfb8      	it	lt
 8007576:	2301      	movlt	r3, #1
 8007578:	e7dd      	b.n	8007536 <_dtoa_r+0x266>
 800757a:	2301      	movs	r3, #1
 800757c:	e7f2      	b.n	8007564 <_dtoa_r+0x294>
 800757e:	bf00      	nop
 8007580:	636f4361 	.word	0x636f4361
 8007584:	3fd287a7 	.word	0x3fd287a7
 8007588:	8b60c8b3 	.word	0x8b60c8b3
 800758c:	3fc68a28 	.word	0x3fc68a28
 8007590:	509f79fb 	.word	0x509f79fb
 8007594:	3fd34413 	.word	0x3fd34413
 8007598:	0801afe6 	.word	0x0801afe6
 800759c:	0801affd 	.word	0x0801affd
 80075a0:	7ff00000 	.word	0x7ff00000
 80075a4:	0801afe2 	.word	0x0801afe2
 80075a8:	0801afd9 	.word	0x0801afd9
 80075ac:	0801ae5d 	.word	0x0801ae5d
 80075b0:	3ff80000 	.word	0x3ff80000
 80075b4:	0801b168 	.word	0x0801b168
 80075b8:	0801b058 	.word	0x0801b058
 80075bc:	2401      	movs	r4, #1
 80075be:	2300      	movs	r3, #0
 80075c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80075c2:	9322      	str	r3, [sp, #136]	; 0x88
 80075c4:	f04f 39ff 	mov.w	r9, #4294967295
 80075c8:	2200      	movs	r2, #0
 80075ca:	2312      	movs	r3, #18
 80075cc:	f8cd 9020 	str.w	r9, [sp, #32]
 80075d0:	9223      	str	r2, [sp, #140]	; 0x8c
 80075d2:	e7b0      	b.n	8007536 <_dtoa_r+0x266>
 80075d4:	2301      	movs	r3, #1
 80075d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80075d8:	e7f4      	b.n	80075c4 <_dtoa_r+0x2f4>
 80075da:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80075de:	464b      	mov	r3, r9
 80075e0:	f8cd 9020 	str.w	r9, [sp, #32]
 80075e4:	e7a7      	b.n	8007536 <_dtoa_r+0x266>
 80075e6:	3101      	adds	r1, #1
 80075e8:	6041      	str	r1, [r0, #4]
 80075ea:	0052      	lsls	r2, r2, #1
 80075ec:	e7a7      	b.n	800753e <_dtoa_r+0x26e>
 80075ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075f0:	9a03      	ldr	r2, [sp, #12]
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	9b08      	ldr	r3, [sp, #32]
 80075f6:	2b0e      	cmp	r3, #14
 80075f8:	f200 80a8 	bhi.w	800774c <_dtoa_r+0x47c>
 80075fc:	2c00      	cmp	r4, #0
 80075fe:	f000 80a5 	beq.w	800774c <_dtoa_r+0x47c>
 8007602:	f1ba 0f00 	cmp.w	sl, #0
 8007606:	dd34      	ble.n	8007672 <_dtoa_r+0x3a2>
 8007608:	4a9a      	ldr	r2, [pc, #616]	; (8007874 <_dtoa_r+0x5a4>)
 800760a:	f00a 030f 	and.w	r3, sl, #15
 800760e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007612:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007616:	e9d3 3400 	ldrd	r3, r4, [r3]
 800761a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800761e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007622:	d016      	beq.n	8007652 <_dtoa_r+0x382>
 8007624:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007628:	4b93      	ldr	r3, [pc, #588]	; (8007878 <_dtoa_r+0x5a8>)
 800762a:	2703      	movs	r7, #3
 800762c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007630:	f7f9 f930 	bl	8000894 <__aeabi_ddiv>
 8007634:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007638:	f004 040f 	and.w	r4, r4, #15
 800763c:	4e8e      	ldr	r6, [pc, #568]	; (8007878 <_dtoa_r+0x5a8>)
 800763e:	b954      	cbnz	r4, 8007656 <_dtoa_r+0x386>
 8007640:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007644:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007648:	f7f9 f924 	bl	8000894 <__aeabi_ddiv>
 800764c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007650:	e029      	b.n	80076a6 <_dtoa_r+0x3d6>
 8007652:	2702      	movs	r7, #2
 8007654:	e7f2      	b.n	800763c <_dtoa_r+0x36c>
 8007656:	07e1      	lsls	r1, r4, #31
 8007658:	d508      	bpl.n	800766c <_dtoa_r+0x39c>
 800765a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800765e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007662:	f7f8 ffed 	bl	8000640 <__aeabi_dmul>
 8007666:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800766a:	3701      	adds	r7, #1
 800766c:	1064      	asrs	r4, r4, #1
 800766e:	3608      	adds	r6, #8
 8007670:	e7e5      	b.n	800763e <_dtoa_r+0x36e>
 8007672:	f000 80a5 	beq.w	80077c0 <_dtoa_r+0x4f0>
 8007676:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800767a:	f1ca 0400 	rsb	r4, sl, #0
 800767e:	4b7d      	ldr	r3, [pc, #500]	; (8007874 <_dtoa_r+0x5a4>)
 8007680:	f004 020f 	and.w	r2, r4, #15
 8007684:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768c:	f7f8 ffd8 	bl	8000640 <__aeabi_dmul>
 8007690:	2702      	movs	r7, #2
 8007692:	2300      	movs	r3, #0
 8007694:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007698:	4e77      	ldr	r6, [pc, #476]	; (8007878 <_dtoa_r+0x5a8>)
 800769a:	1124      	asrs	r4, r4, #4
 800769c:	2c00      	cmp	r4, #0
 800769e:	f040 8084 	bne.w	80077aa <_dtoa_r+0x4da>
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1d2      	bne.n	800764c <_dtoa_r+0x37c>
 80076a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 808b 	beq.w	80077c4 <_dtoa_r+0x4f4>
 80076ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80076b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80076b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076ba:	2200      	movs	r2, #0
 80076bc:	4b6f      	ldr	r3, [pc, #444]	; (800787c <_dtoa_r+0x5ac>)
 80076be:	f7f9 fa31 	bl	8000b24 <__aeabi_dcmplt>
 80076c2:	2800      	cmp	r0, #0
 80076c4:	d07e      	beq.n	80077c4 <_dtoa_r+0x4f4>
 80076c6:	9b08      	ldr	r3, [sp, #32]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d07b      	beq.n	80077c4 <_dtoa_r+0x4f4>
 80076cc:	f1b9 0f00 	cmp.w	r9, #0
 80076d0:	dd38      	ble.n	8007744 <_dtoa_r+0x474>
 80076d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076d6:	2200      	movs	r2, #0
 80076d8:	4b69      	ldr	r3, [pc, #420]	; (8007880 <_dtoa_r+0x5b0>)
 80076da:	f7f8 ffb1 	bl	8000640 <__aeabi_dmul>
 80076de:	464c      	mov	r4, r9
 80076e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076e4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80076e8:	3701      	adds	r7, #1
 80076ea:	4638      	mov	r0, r7
 80076ec:	f7f8 ff3e 	bl	800056c <__aeabi_i2d>
 80076f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076f4:	f7f8 ffa4 	bl	8000640 <__aeabi_dmul>
 80076f8:	2200      	movs	r2, #0
 80076fa:	4b62      	ldr	r3, [pc, #392]	; (8007884 <_dtoa_r+0x5b4>)
 80076fc:	f7f8 fdea 	bl	80002d4 <__adddf3>
 8007700:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007704:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007708:	9611      	str	r6, [sp, #68]	; 0x44
 800770a:	2c00      	cmp	r4, #0
 800770c:	d15d      	bne.n	80077ca <_dtoa_r+0x4fa>
 800770e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007712:	2200      	movs	r2, #0
 8007714:	4b5c      	ldr	r3, [pc, #368]	; (8007888 <_dtoa_r+0x5b8>)
 8007716:	f7f8 fddb 	bl	80002d0 <__aeabi_dsub>
 800771a:	4602      	mov	r2, r0
 800771c:	460b      	mov	r3, r1
 800771e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007722:	4633      	mov	r3, r6
 8007724:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007726:	f7f9 fa1b 	bl	8000b60 <__aeabi_dcmpgt>
 800772a:	2800      	cmp	r0, #0
 800772c:	f040 829c 	bne.w	8007c68 <_dtoa_r+0x998>
 8007730:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007734:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007736:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800773a:	f7f9 f9f3 	bl	8000b24 <__aeabi_dcmplt>
 800773e:	2800      	cmp	r0, #0
 8007740:	f040 8290 	bne.w	8007c64 <_dtoa_r+0x994>
 8007744:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007748:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800774c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800774e:	2b00      	cmp	r3, #0
 8007750:	f2c0 8152 	blt.w	80079f8 <_dtoa_r+0x728>
 8007754:	f1ba 0f0e 	cmp.w	sl, #14
 8007758:	f300 814e 	bgt.w	80079f8 <_dtoa_r+0x728>
 800775c:	4b45      	ldr	r3, [pc, #276]	; (8007874 <_dtoa_r+0x5a4>)
 800775e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007762:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007766:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800776a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800776c:	2b00      	cmp	r3, #0
 800776e:	f280 80db 	bge.w	8007928 <_dtoa_r+0x658>
 8007772:	9b08      	ldr	r3, [sp, #32]
 8007774:	2b00      	cmp	r3, #0
 8007776:	f300 80d7 	bgt.w	8007928 <_dtoa_r+0x658>
 800777a:	f040 8272 	bne.w	8007c62 <_dtoa_r+0x992>
 800777e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007782:	2200      	movs	r2, #0
 8007784:	4b40      	ldr	r3, [pc, #256]	; (8007888 <_dtoa_r+0x5b8>)
 8007786:	f7f8 ff5b 	bl	8000640 <__aeabi_dmul>
 800778a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800778e:	f7f9 f9dd 	bl	8000b4c <__aeabi_dcmpge>
 8007792:	9c08      	ldr	r4, [sp, #32]
 8007794:	4626      	mov	r6, r4
 8007796:	2800      	cmp	r0, #0
 8007798:	f040 8248 	bne.w	8007c2c <_dtoa_r+0x95c>
 800779c:	2331      	movs	r3, #49	; 0x31
 800779e:	9f03      	ldr	r7, [sp, #12]
 80077a0:	f10a 0a01 	add.w	sl, sl, #1
 80077a4:	f807 3b01 	strb.w	r3, [r7], #1
 80077a8:	e244      	b.n	8007c34 <_dtoa_r+0x964>
 80077aa:	07e2      	lsls	r2, r4, #31
 80077ac:	d505      	bpl.n	80077ba <_dtoa_r+0x4ea>
 80077ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077b2:	f7f8 ff45 	bl	8000640 <__aeabi_dmul>
 80077b6:	2301      	movs	r3, #1
 80077b8:	3701      	adds	r7, #1
 80077ba:	1064      	asrs	r4, r4, #1
 80077bc:	3608      	adds	r6, #8
 80077be:	e76d      	b.n	800769c <_dtoa_r+0x3cc>
 80077c0:	2702      	movs	r7, #2
 80077c2:	e770      	b.n	80076a6 <_dtoa_r+0x3d6>
 80077c4:	46d0      	mov	r8, sl
 80077c6:	9c08      	ldr	r4, [sp, #32]
 80077c8:	e78f      	b.n	80076ea <_dtoa_r+0x41a>
 80077ca:	9903      	ldr	r1, [sp, #12]
 80077cc:	4b29      	ldr	r3, [pc, #164]	; (8007874 <_dtoa_r+0x5a4>)
 80077ce:	4421      	add	r1, r4
 80077d0:	9112      	str	r1, [sp, #72]	; 0x48
 80077d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077d8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80077dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077e0:	2900      	cmp	r1, #0
 80077e2:	d055      	beq.n	8007890 <_dtoa_r+0x5c0>
 80077e4:	2000      	movs	r0, #0
 80077e6:	4929      	ldr	r1, [pc, #164]	; (800788c <_dtoa_r+0x5bc>)
 80077e8:	f7f9 f854 	bl	8000894 <__aeabi_ddiv>
 80077ec:	463b      	mov	r3, r7
 80077ee:	4632      	mov	r2, r6
 80077f0:	f7f8 fd6e 	bl	80002d0 <__aeabi_dsub>
 80077f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80077f8:	9f03      	ldr	r7, [sp, #12]
 80077fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077fe:	f7f9 f9cf 	bl	8000ba0 <__aeabi_d2iz>
 8007802:	4604      	mov	r4, r0
 8007804:	f7f8 feb2 	bl	800056c <__aeabi_i2d>
 8007808:	4602      	mov	r2, r0
 800780a:	460b      	mov	r3, r1
 800780c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007810:	f7f8 fd5e 	bl	80002d0 <__aeabi_dsub>
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	3430      	adds	r4, #48	; 0x30
 800781a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800781e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007822:	f807 4b01 	strb.w	r4, [r7], #1
 8007826:	f7f9 f97d 	bl	8000b24 <__aeabi_dcmplt>
 800782a:	2800      	cmp	r0, #0
 800782c:	d174      	bne.n	8007918 <_dtoa_r+0x648>
 800782e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007832:	2000      	movs	r0, #0
 8007834:	4911      	ldr	r1, [pc, #68]	; (800787c <_dtoa_r+0x5ac>)
 8007836:	f7f8 fd4b 	bl	80002d0 <__aeabi_dsub>
 800783a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800783e:	f7f9 f971 	bl	8000b24 <__aeabi_dcmplt>
 8007842:	2800      	cmp	r0, #0
 8007844:	f040 80b7 	bne.w	80079b6 <_dtoa_r+0x6e6>
 8007848:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800784a:	429f      	cmp	r7, r3
 800784c:	f43f af7a 	beq.w	8007744 <_dtoa_r+0x474>
 8007850:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007854:	2200      	movs	r2, #0
 8007856:	4b0a      	ldr	r3, [pc, #40]	; (8007880 <_dtoa_r+0x5b0>)
 8007858:	f7f8 fef2 	bl	8000640 <__aeabi_dmul>
 800785c:	2200      	movs	r2, #0
 800785e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007862:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007866:	4b06      	ldr	r3, [pc, #24]	; (8007880 <_dtoa_r+0x5b0>)
 8007868:	f7f8 feea 	bl	8000640 <__aeabi_dmul>
 800786c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007870:	e7c3      	b.n	80077fa <_dtoa_r+0x52a>
 8007872:	bf00      	nop
 8007874:	0801b168 	.word	0x0801b168
 8007878:	0801b140 	.word	0x0801b140
 800787c:	3ff00000 	.word	0x3ff00000
 8007880:	40240000 	.word	0x40240000
 8007884:	401c0000 	.word	0x401c0000
 8007888:	40140000 	.word	0x40140000
 800788c:	3fe00000 	.word	0x3fe00000
 8007890:	4630      	mov	r0, r6
 8007892:	4639      	mov	r1, r7
 8007894:	f7f8 fed4 	bl	8000640 <__aeabi_dmul>
 8007898:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800789a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800789e:	9c03      	ldr	r4, [sp, #12]
 80078a0:	9314      	str	r3, [sp, #80]	; 0x50
 80078a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078a6:	f7f9 f97b 	bl	8000ba0 <__aeabi_d2iz>
 80078aa:	9015      	str	r0, [sp, #84]	; 0x54
 80078ac:	f7f8 fe5e 	bl	800056c <__aeabi_i2d>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078b8:	f7f8 fd0a 	bl	80002d0 <__aeabi_dsub>
 80078bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078be:	4606      	mov	r6, r0
 80078c0:	3330      	adds	r3, #48	; 0x30
 80078c2:	f804 3b01 	strb.w	r3, [r4], #1
 80078c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078c8:	460f      	mov	r7, r1
 80078ca:	429c      	cmp	r4, r3
 80078cc:	f04f 0200 	mov.w	r2, #0
 80078d0:	d124      	bne.n	800791c <_dtoa_r+0x64c>
 80078d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078d6:	4bb0      	ldr	r3, [pc, #704]	; (8007b98 <_dtoa_r+0x8c8>)
 80078d8:	f7f8 fcfc 	bl	80002d4 <__adddf3>
 80078dc:	4602      	mov	r2, r0
 80078de:	460b      	mov	r3, r1
 80078e0:	4630      	mov	r0, r6
 80078e2:	4639      	mov	r1, r7
 80078e4:	f7f9 f93c 	bl	8000b60 <__aeabi_dcmpgt>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d163      	bne.n	80079b4 <_dtoa_r+0x6e4>
 80078ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80078f0:	2000      	movs	r0, #0
 80078f2:	49a9      	ldr	r1, [pc, #676]	; (8007b98 <_dtoa_r+0x8c8>)
 80078f4:	f7f8 fcec 	bl	80002d0 <__aeabi_dsub>
 80078f8:	4602      	mov	r2, r0
 80078fa:	460b      	mov	r3, r1
 80078fc:	4630      	mov	r0, r6
 80078fe:	4639      	mov	r1, r7
 8007900:	f7f9 f910 	bl	8000b24 <__aeabi_dcmplt>
 8007904:	2800      	cmp	r0, #0
 8007906:	f43f af1d 	beq.w	8007744 <_dtoa_r+0x474>
 800790a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800790c:	1e7b      	subs	r3, r7, #1
 800790e:	9314      	str	r3, [sp, #80]	; 0x50
 8007910:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007914:	2b30      	cmp	r3, #48	; 0x30
 8007916:	d0f8      	beq.n	800790a <_dtoa_r+0x63a>
 8007918:	46c2      	mov	sl, r8
 800791a:	e03b      	b.n	8007994 <_dtoa_r+0x6c4>
 800791c:	4b9f      	ldr	r3, [pc, #636]	; (8007b9c <_dtoa_r+0x8cc>)
 800791e:	f7f8 fe8f 	bl	8000640 <__aeabi_dmul>
 8007922:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007926:	e7bc      	b.n	80078a2 <_dtoa_r+0x5d2>
 8007928:	9f03      	ldr	r7, [sp, #12]
 800792a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800792e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007932:	4640      	mov	r0, r8
 8007934:	4649      	mov	r1, r9
 8007936:	f7f8 ffad 	bl	8000894 <__aeabi_ddiv>
 800793a:	f7f9 f931 	bl	8000ba0 <__aeabi_d2iz>
 800793e:	4604      	mov	r4, r0
 8007940:	f7f8 fe14 	bl	800056c <__aeabi_i2d>
 8007944:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007948:	f7f8 fe7a 	bl	8000640 <__aeabi_dmul>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	4640      	mov	r0, r8
 8007952:	4649      	mov	r1, r9
 8007954:	f7f8 fcbc 	bl	80002d0 <__aeabi_dsub>
 8007958:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800795c:	f807 6b01 	strb.w	r6, [r7], #1
 8007960:	9e03      	ldr	r6, [sp, #12]
 8007962:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007966:	1bbe      	subs	r6, r7, r6
 8007968:	45b4      	cmp	ip, r6
 800796a:	4602      	mov	r2, r0
 800796c:	460b      	mov	r3, r1
 800796e:	d136      	bne.n	80079de <_dtoa_r+0x70e>
 8007970:	f7f8 fcb0 	bl	80002d4 <__adddf3>
 8007974:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007978:	4680      	mov	r8, r0
 800797a:	4689      	mov	r9, r1
 800797c:	f7f9 f8f0 	bl	8000b60 <__aeabi_dcmpgt>
 8007980:	bb58      	cbnz	r0, 80079da <_dtoa_r+0x70a>
 8007982:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007986:	4640      	mov	r0, r8
 8007988:	4649      	mov	r1, r9
 800798a:	f7f9 f8c1 	bl	8000b10 <__aeabi_dcmpeq>
 800798e:	b108      	cbz	r0, 8007994 <_dtoa_r+0x6c4>
 8007990:	07e1      	lsls	r1, r4, #31
 8007992:	d422      	bmi.n	80079da <_dtoa_r+0x70a>
 8007994:	4628      	mov	r0, r5
 8007996:	4659      	mov	r1, fp
 8007998:	f000 fe68 	bl	800866c <_Bfree>
 800799c:	2300      	movs	r3, #0
 800799e:	703b      	strb	r3, [r7, #0]
 80079a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80079a2:	f10a 0001 	add.w	r0, sl, #1
 80079a6:	6018      	str	r0, [r3, #0]
 80079a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f43f acde 	beq.w	800736c <_dtoa_r+0x9c>
 80079b0:	601f      	str	r7, [r3, #0]
 80079b2:	e4db      	b.n	800736c <_dtoa_r+0x9c>
 80079b4:	4627      	mov	r7, r4
 80079b6:	463b      	mov	r3, r7
 80079b8:	461f      	mov	r7, r3
 80079ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079be:	2a39      	cmp	r2, #57	; 0x39
 80079c0:	d107      	bne.n	80079d2 <_dtoa_r+0x702>
 80079c2:	9a03      	ldr	r2, [sp, #12]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d1f7      	bne.n	80079b8 <_dtoa_r+0x6e8>
 80079c8:	2230      	movs	r2, #48	; 0x30
 80079ca:	9903      	ldr	r1, [sp, #12]
 80079cc:	f108 0801 	add.w	r8, r8, #1
 80079d0:	700a      	strb	r2, [r1, #0]
 80079d2:	781a      	ldrb	r2, [r3, #0]
 80079d4:	3201      	adds	r2, #1
 80079d6:	701a      	strb	r2, [r3, #0]
 80079d8:	e79e      	b.n	8007918 <_dtoa_r+0x648>
 80079da:	46d0      	mov	r8, sl
 80079dc:	e7eb      	b.n	80079b6 <_dtoa_r+0x6e6>
 80079de:	2200      	movs	r2, #0
 80079e0:	4b6e      	ldr	r3, [pc, #440]	; (8007b9c <_dtoa_r+0x8cc>)
 80079e2:	f7f8 fe2d 	bl	8000640 <__aeabi_dmul>
 80079e6:	2200      	movs	r2, #0
 80079e8:	2300      	movs	r3, #0
 80079ea:	4680      	mov	r8, r0
 80079ec:	4689      	mov	r9, r1
 80079ee:	f7f9 f88f 	bl	8000b10 <__aeabi_dcmpeq>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d09b      	beq.n	800792e <_dtoa_r+0x65e>
 80079f6:	e7cd      	b.n	8007994 <_dtoa_r+0x6c4>
 80079f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079fa:	2a00      	cmp	r2, #0
 80079fc:	f000 80d0 	beq.w	8007ba0 <_dtoa_r+0x8d0>
 8007a00:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007a02:	2a01      	cmp	r2, #1
 8007a04:	f300 80ae 	bgt.w	8007b64 <_dtoa_r+0x894>
 8007a08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a0a:	2a00      	cmp	r2, #0
 8007a0c:	f000 80a6 	beq.w	8007b5c <_dtoa_r+0x88c>
 8007a10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a16:	9f06      	ldr	r7, [sp, #24]
 8007a18:	9a06      	ldr	r2, [sp, #24]
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	441a      	add	r2, r3
 8007a1e:	9206      	str	r2, [sp, #24]
 8007a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a22:	4628      	mov	r0, r5
 8007a24:	441a      	add	r2, r3
 8007a26:	9209      	str	r2, [sp, #36]	; 0x24
 8007a28:	f000 ff20 	bl	800886c <__i2b>
 8007a2c:	4606      	mov	r6, r0
 8007a2e:	2f00      	cmp	r7, #0
 8007a30:	dd0c      	ble.n	8007a4c <_dtoa_r+0x77c>
 8007a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	dd09      	ble.n	8007a4c <_dtoa_r+0x77c>
 8007a38:	42bb      	cmp	r3, r7
 8007a3a:	bfa8      	it	ge
 8007a3c:	463b      	movge	r3, r7
 8007a3e:	9a06      	ldr	r2, [sp, #24]
 8007a40:	1aff      	subs	r7, r7, r3
 8007a42:	1ad2      	subs	r2, r2, r3
 8007a44:	9206      	str	r2, [sp, #24]
 8007a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a4e:	b1f3      	cbz	r3, 8007a8e <_dtoa_r+0x7be>
 8007a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 80a8 	beq.w	8007ba8 <_dtoa_r+0x8d8>
 8007a58:	2c00      	cmp	r4, #0
 8007a5a:	dd10      	ble.n	8007a7e <_dtoa_r+0x7ae>
 8007a5c:	4631      	mov	r1, r6
 8007a5e:	4622      	mov	r2, r4
 8007a60:	4628      	mov	r0, r5
 8007a62:	f000 ffc1 	bl	80089e8 <__pow5mult>
 8007a66:	465a      	mov	r2, fp
 8007a68:	4601      	mov	r1, r0
 8007a6a:	4606      	mov	r6, r0
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f000 ff13 	bl	8008898 <__multiply>
 8007a72:	4680      	mov	r8, r0
 8007a74:	4659      	mov	r1, fp
 8007a76:	4628      	mov	r0, r5
 8007a78:	f000 fdf8 	bl	800866c <_Bfree>
 8007a7c:	46c3      	mov	fp, r8
 8007a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a80:	1b1a      	subs	r2, r3, r4
 8007a82:	d004      	beq.n	8007a8e <_dtoa_r+0x7be>
 8007a84:	4659      	mov	r1, fp
 8007a86:	4628      	mov	r0, r5
 8007a88:	f000 ffae 	bl	80089e8 <__pow5mult>
 8007a8c:	4683      	mov	fp, r0
 8007a8e:	2101      	movs	r1, #1
 8007a90:	4628      	mov	r0, r5
 8007a92:	f000 feeb 	bl	800886c <__i2b>
 8007a96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a98:	4604      	mov	r4, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f340 8086 	ble.w	8007bac <_dtoa_r+0x8dc>
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	4601      	mov	r1, r0
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	f000 ff9f 	bl	80089e8 <__pow5mult>
 8007aaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007aac:	4604      	mov	r4, r0
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	dd7f      	ble.n	8007bb2 <_dtoa_r+0x8e2>
 8007ab2:	f04f 0800 	mov.w	r8, #0
 8007ab6:	6923      	ldr	r3, [r4, #16]
 8007ab8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007abc:	6918      	ldr	r0, [r3, #16]
 8007abe:	f000 fe87 	bl	80087d0 <__hi0bits>
 8007ac2:	f1c0 0020 	rsb	r0, r0, #32
 8007ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac8:	4418      	add	r0, r3
 8007aca:	f010 001f 	ands.w	r0, r0, #31
 8007ace:	f000 8092 	beq.w	8007bf6 <_dtoa_r+0x926>
 8007ad2:	f1c0 0320 	rsb	r3, r0, #32
 8007ad6:	2b04      	cmp	r3, #4
 8007ad8:	f340 808a 	ble.w	8007bf0 <_dtoa_r+0x920>
 8007adc:	f1c0 001c 	rsb	r0, r0, #28
 8007ae0:	9b06      	ldr	r3, [sp, #24]
 8007ae2:	4407      	add	r7, r0
 8007ae4:	4403      	add	r3, r0
 8007ae6:	9306      	str	r3, [sp, #24]
 8007ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aea:	4403      	add	r3, r0
 8007aec:	9309      	str	r3, [sp, #36]	; 0x24
 8007aee:	9b06      	ldr	r3, [sp, #24]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	dd05      	ble.n	8007b00 <_dtoa_r+0x830>
 8007af4:	4659      	mov	r1, fp
 8007af6:	461a      	mov	r2, r3
 8007af8:	4628      	mov	r0, r5
 8007afa:	f000 ffcf 	bl	8008a9c <__lshift>
 8007afe:	4683      	mov	fp, r0
 8007b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	dd05      	ble.n	8007b12 <_dtoa_r+0x842>
 8007b06:	4621      	mov	r1, r4
 8007b08:	461a      	mov	r2, r3
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	f000 ffc6 	bl	8008a9c <__lshift>
 8007b10:	4604      	mov	r4, r0
 8007b12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d070      	beq.n	8007bfa <_dtoa_r+0x92a>
 8007b18:	4621      	mov	r1, r4
 8007b1a:	4658      	mov	r0, fp
 8007b1c:	f001 f82e 	bl	8008b7c <__mcmp>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	da6a      	bge.n	8007bfa <_dtoa_r+0x92a>
 8007b24:	2300      	movs	r3, #0
 8007b26:	4659      	mov	r1, fp
 8007b28:	220a      	movs	r2, #10
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	f000 fdc0 	bl	80086b0 <__multadd>
 8007b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b32:	4683      	mov	fp, r0
 8007b34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 8194 	beq.w	8007e66 <_dtoa_r+0xb96>
 8007b3e:	4631      	mov	r1, r6
 8007b40:	2300      	movs	r3, #0
 8007b42:	220a      	movs	r2, #10
 8007b44:	4628      	mov	r0, r5
 8007b46:	f000 fdb3 	bl	80086b0 <__multadd>
 8007b4a:	f1b9 0f00 	cmp.w	r9, #0
 8007b4e:	4606      	mov	r6, r0
 8007b50:	f300 8093 	bgt.w	8007c7a <_dtoa_r+0x9aa>
 8007b54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	dc57      	bgt.n	8007c0a <_dtoa_r+0x93a>
 8007b5a:	e08e      	b.n	8007c7a <_dtoa_r+0x9aa>
 8007b5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007b5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b62:	e757      	b.n	8007a14 <_dtoa_r+0x744>
 8007b64:	9b08      	ldr	r3, [sp, #32]
 8007b66:	1e5c      	subs	r4, r3, #1
 8007b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b6a:	42a3      	cmp	r3, r4
 8007b6c:	bfb7      	itett	lt
 8007b6e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007b70:	1b1c      	subge	r4, r3, r4
 8007b72:	1ae2      	sublt	r2, r4, r3
 8007b74:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007b76:	bfbe      	ittt	lt
 8007b78:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007b7a:	189b      	addlt	r3, r3, r2
 8007b7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007b7e:	9b08      	ldr	r3, [sp, #32]
 8007b80:	bfb8      	it	lt
 8007b82:	2400      	movlt	r4, #0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	bfbb      	ittet	lt
 8007b88:	9b06      	ldrlt	r3, [sp, #24]
 8007b8a:	9a08      	ldrlt	r2, [sp, #32]
 8007b8c:	9f06      	ldrge	r7, [sp, #24]
 8007b8e:	1a9f      	sublt	r7, r3, r2
 8007b90:	bfac      	ite	ge
 8007b92:	9b08      	ldrge	r3, [sp, #32]
 8007b94:	2300      	movlt	r3, #0
 8007b96:	e73f      	b.n	8007a18 <_dtoa_r+0x748>
 8007b98:	3fe00000 	.word	0x3fe00000
 8007b9c:	40240000 	.word	0x40240000
 8007ba0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007ba2:	9f06      	ldr	r7, [sp, #24]
 8007ba4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007ba6:	e742      	b.n	8007a2e <_dtoa_r+0x75e>
 8007ba8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007baa:	e76b      	b.n	8007a84 <_dtoa_r+0x7b4>
 8007bac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	dc19      	bgt.n	8007be6 <_dtoa_r+0x916>
 8007bb2:	9b04      	ldr	r3, [sp, #16]
 8007bb4:	b9bb      	cbnz	r3, 8007be6 <_dtoa_r+0x916>
 8007bb6:	9b05      	ldr	r3, [sp, #20]
 8007bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bbc:	b99b      	cbnz	r3, 8007be6 <_dtoa_r+0x916>
 8007bbe:	9b05      	ldr	r3, [sp, #20]
 8007bc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bc4:	0d1b      	lsrs	r3, r3, #20
 8007bc6:	051b      	lsls	r3, r3, #20
 8007bc8:	b183      	cbz	r3, 8007bec <_dtoa_r+0x91c>
 8007bca:	f04f 0801 	mov.w	r8, #1
 8007bce:	9b06      	ldr	r3, [sp, #24]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	9306      	str	r3, [sp, #24]
 8007bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8007bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f47f af6a 	bne.w	8007ab6 <_dtoa_r+0x7e6>
 8007be2:	2001      	movs	r0, #1
 8007be4:	e76f      	b.n	8007ac6 <_dtoa_r+0x7f6>
 8007be6:	f04f 0800 	mov.w	r8, #0
 8007bea:	e7f6      	b.n	8007bda <_dtoa_r+0x90a>
 8007bec:	4698      	mov	r8, r3
 8007bee:	e7f4      	b.n	8007bda <_dtoa_r+0x90a>
 8007bf0:	f43f af7d 	beq.w	8007aee <_dtoa_r+0x81e>
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	301c      	adds	r0, #28
 8007bf8:	e772      	b.n	8007ae0 <_dtoa_r+0x810>
 8007bfa:	9b08      	ldr	r3, [sp, #32]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	dc36      	bgt.n	8007c6e <_dtoa_r+0x99e>
 8007c00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	dd33      	ble.n	8007c6e <_dtoa_r+0x99e>
 8007c06:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c0a:	f1b9 0f00 	cmp.w	r9, #0
 8007c0e:	d10d      	bne.n	8007c2c <_dtoa_r+0x95c>
 8007c10:	4621      	mov	r1, r4
 8007c12:	464b      	mov	r3, r9
 8007c14:	2205      	movs	r2, #5
 8007c16:	4628      	mov	r0, r5
 8007c18:	f000 fd4a 	bl	80086b0 <__multadd>
 8007c1c:	4601      	mov	r1, r0
 8007c1e:	4604      	mov	r4, r0
 8007c20:	4658      	mov	r0, fp
 8007c22:	f000 ffab 	bl	8008b7c <__mcmp>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f73f adb8 	bgt.w	800779c <_dtoa_r+0x4cc>
 8007c2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c2e:	9f03      	ldr	r7, [sp, #12]
 8007c30:	ea6f 0a03 	mvn.w	sl, r3
 8007c34:	f04f 0800 	mov.w	r8, #0
 8007c38:	4621      	mov	r1, r4
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	f000 fd16 	bl	800866c <_Bfree>
 8007c40:	2e00      	cmp	r6, #0
 8007c42:	f43f aea7 	beq.w	8007994 <_dtoa_r+0x6c4>
 8007c46:	f1b8 0f00 	cmp.w	r8, #0
 8007c4a:	d005      	beq.n	8007c58 <_dtoa_r+0x988>
 8007c4c:	45b0      	cmp	r8, r6
 8007c4e:	d003      	beq.n	8007c58 <_dtoa_r+0x988>
 8007c50:	4641      	mov	r1, r8
 8007c52:	4628      	mov	r0, r5
 8007c54:	f000 fd0a 	bl	800866c <_Bfree>
 8007c58:	4631      	mov	r1, r6
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f000 fd06 	bl	800866c <_Bfree>
 8007c60:	e698      	b.n	8007994 <_dtoa_r+0x6c4>
 8007c62:	2400      	movs	r4, #0
 8007c64:	4626      	mov	r6, r4
 8007c66:	e7e1      	b.n	8007c2c <_dtoa_r+0x95c>
 8007c68:	46c2      	mov	sl, r8
 8007c6a:	4626      	mov	r6, r4
 8007c6c:	e596      	b.n	800779c <_dtoa_r+0x4cc>
 8007c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 80fd 	beq.w	8007e74 <_dtoa_r+0xba4>
 8007c7a:	2f00      	cmp	r7, #0
 8007c7c:	dd05      	ble.n	8007c8a <_dtoa_r+0x9ba>
 8007c7e:	4631      	mov	r1, r6
 8007c80:	463a      	mov	r2, r7
 8007c82:	4628      	mov	r0, r5
 8007c84:	f000 ff0a 	bl	8008a9c <__lshift>
 8007c88:	4606      	mov	r6, r0
 8007c8a:	f1b8 0f00 	cmp.w	r8, #0
 8007c8e:	d05c      	beq.n	8007d4a <_dtoa_r+0xa7a>
 8007c90:	4628      	mov	r0, r5
 8007c92:	6871      	ldr	r1, [r6, #4]
 8007c94:	f000 fcaa 	bl	80085ec <_Balloc>
 8007c98:	4607      	mov	r7, r0
 8007c9a:	b928      	cbnz	r0, 8007ca8 <_dtoa_r+0x9d8>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007ca2:	4b7f      	ldr	r3, [pc, #508]	; (8007ea0 <_dtoa_r+0xbd0>)
 8007ca4:	f7ff bb28 	b.w	80072f8 <_dtoa_r+0x28>
 8007ca8:	6932      	ldr	r2, [r6, #16]
 8007caa:	f106 010c 	add.w	r1, r6, #12
 8007cae:	3202      	adds	r2, #2
 8007cb0:	0092      	lsls	r2, r2, #2
 8007cb2:	300c      	adds	r0, #12
 8007cb4:	f000 fc8c 	bl	80085d0 <memcpy>
 8007cb8:	2201      	movs	r2, #1
 8007cba:	4639      	mov	r1, r7
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	f000 feed 	bl	8008a9c <__lshift>
 8007cc2:	46b0      	mov	r8, r6
 8007cc4:	4606      	mov	r6, r0
 8007cc6:	9b03      	ldr	r3, [sp, #12]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	9308      	str	r3, [sp, #32]
 8007ccc:	9b03      	ldr	r3, [sp, #12]
 8007cce:	444b      	add	r3, r9
 8007cd0:	930a      	str	r3, [sp, #40]	; 0x28
 8007cd2:	9b04      	ldr	r3, [sp, #16]
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8007cda:	9b08      	ldr	r3, [sp, #32]
 8007cdc:	4621      	mov	r1, r4
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	4658      	mov	r0, fp
 8007ce2:	9304      	str	r3, [sp, #16]
 8007ce4:	f7ff fa68 	bl	80071b8 <quorem>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	4641      	mov	r1, r8
 8007cec:	3330      	adds	r3, #48	; 0x30
 8007cee:	9006      	str	r0, [sp, #24]
 8007cf0:	4658      	mov	r0, fp
 8007cf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cf4:	f000 ff42 	bl	8008b7c <__mcmp>
 8007cf8:	4632      	mov	r2, r6
 8007cfa:	4681      	mov	r9, r0
 8007cfc:	4621      	mov	r1, r4
 8007cfe:	4628      	mov	r0, r5
 8007d00:	f000 ff58 	bl	8008bb4 <__mdiff>
 8007d04:	68c2      	ldr	r2, [r0, #12]
 8007d06:	4607      	mov	r7, r0
 8007d08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d0a:	bb02      	cbnz	r2, 8007d4e <_dtoa_r+0xa7e>
 8007d0c:	4601      	mov	r1, r0
 8007d0e:	4658      	mov	r0, fp
 8007d10:	f000 ff34 	bl	8008b7c <__mcmp>
 8007d14:	4602      	mov	r2, r0
 8007d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d18:	4639      	mov	r1, r7
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007d20:	f000 fca4 	bl	800866c <_Bfree>
 8007d24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d28:	9f08      	ldr	r7, [sp, #32]
 8007d2a:	ea43 0102 	orr.w	r1, r3, r2
 8007d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d30:	430b      	orrs	r3, r1
 8007d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d34:	d10d      	bne.n	8007d52 <_dtoa_r+0xa82>
 8007d36:	2b39      	cmp	r3, #57	; 0x39
 8007d38:	d029      	beq.n	8007d8e <_dtoa_r+0xabe>
 8007d3a:	f1b9 0f00 	cmp.w	r9, #0
 8007d3e:	dd01      	ble.n	8007d44 <_dtoa_r+0xa74>
 8007d40:	9b06      	ldr	r3, [sp, #24]
 8007d42:	3331      	adds	r3, #49	; 0x31
 8007d44:	9a04      	ldr	r2, [sp, #16]
 8007d46:	7013      	strb	r3, [r2, #0]
 8007d48:	e776      	b.n	8007c38 <_dtoa_r+0x968>
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	e7b9      	b.n	8007cc2 <_dtoa_r+0x9f2>
 8007d4e:	2201      	movs	r2, #1
 8007d50:	e7e2      	b.n	8007d18 <_dtoa_r+0xa48>
 8007d52:	f1b9 0f00 	cmp.w	r9, #0
 8007d56:	db06      	blt.n	8007d66 <_dtoa_r+0xa96>
 8007d58:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007d5a:	ea41 0909 	orr.w	r9, r1, r9
 8007d5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d60:	ea59 0101 	orrs.w	r1, r9, r1
 8007d64:	d120      	bne.n	8007da8 <_dtoa_r+0xad8>
 8007d66:	2a00      	cmp	r2, #0
 8007d68:	ddec      	ble.n	8007d44 <_dtoa_r+0xa74>
 8007d6a:	4659      	mov	r1, fp
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	4628      	mov	r0, r5
 8007d70:	9308      	str	r3, [sp, #32]
 8007d72:	f000 fe93 	bl	8008a9c <__lshift>
 8007d76:	4621      	mov	r1, r4
 8007d78:	4683      	mov	fp, r0
 8007d7a:	f000 feff 	bl	8008b7c <__mcmp>
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	9b08      	ldr	r3, [sp, #32]
 8007d82:	dc02      	bgt.n	8007d8a <_dtoa_r+0xaba>
 8007d84:	d1de      	bne.n	8007d44 <_dtoa_r+0xa74>
 8007d86:	07da      	lsls	r2, r3, #31
 8007d88:	d5dc      	bpl.n	8007d44 <_dtoa_r+0xa74>
 8007d8a:	2b39      	cmp	r3, #57	; 0x39
 8007d8c:	d1d8      	bne.n	8007d40 <_dtoa_r+0xa70>
 8007d8e:	2339      	movs	r3, #57	; 0x39
 8007d90:	9a04      	ldr	r2, [sp, #16]
 8007d92:	7013      	strb	r3, [r2, #0]
 8007d94:	463b      	mov	r3, r7
 8007d96:	461f      	mov	r7, r3
 8007d98:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	2a39      	cmp	r2, #57	; 0x39
 8007da0:	d050      	beq.n	8007e44 <_dtoa_r+0xb74>
 8007da2:	3201      	adds	r2, #1
 8007da4:	701a      	strb	r2, [r3, #0]
 8007da6:	e747      	b.n	8007c38 <_dtoa_r+0x968>
 8007da8:	2a00      	cmp	r2, #0
 8007daa:	dd03      	ble.n	8007db4 <_dtoa_r+0xae4>
 8007dac:	2b39      	cmp	r3, #57	; 0x39
 8007dae:	d0ee      	beq.n	8007d8e <_dtoa_r+0xabe>
 8007db0:	3301      	adds	r3, #1
 8007db2:	e7c7      	b.n	8007d44 <_dtoa_r+0xa74>
 8007db4:	9a08      	ldr	r2, [sp, #32]
 8007db6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007db8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007dbc:	428a      	cmp	r2, r1
 8007dbe:	d02a      	beq.n	8007e16 <_dtoa_r+0xb46>
 8007dc0:	4659      	mov	r1, fp
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	220a      	movs	r2, #10
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f000 fc72 	bl	80086b0 <__multadd>
 8007dcc:	45b0      	cmp	r8, r6
 8007dce:	4683      	mov	fp, r0
 8007dd0:	f04f 0300 	mov.w	r3, #0
 8007dd4:	f04f 020a 	mov.w	r2, #10
 8007dd8:	4641      	mov	r1, r8
 8007dda:	4628      	mov	r0, r5
 8007ddc:	d107      	bne.n	8007dee <_dtoa_r+0xb1e>
 8007dde:	f000 fc67 	bl	80086b0 <__multadd>
 8007de2:	4680      	mov	r8, r0
 8007de4:	4606      	mov	r6, r0
 8007de6:	9b08      	ldr	r3, [sp, #32]
 8007de8:	3301      	adds	r3, #1
 8007dea:	9308      	str	r3, [sp, #32]
 8007dec:	e775      	b.n	8007cda <_dtoa_r+0xa0a>
 8007dee:	f000 fc5f 	bl	80086b0 <__multadd>
 8007df2:	4631      	mov	r1, r6
 8007df4:	4680      	mov	r8, r0
 8007df6:	2300      	movs	r3, #0
 8007df8:	220a      	movs	r2, #10
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	f000 fc58 	bl	80086b0 <__multadd>
 8007e00:	4606      	mov	r6, r0
 8007e02:	e7f0      	b.n	8007de6 <_dtoa_r+0xb16>
 8007e04:	f1b9 0f00 	cmp.w	r9, #0
 8007e08:	bfcc      	ite	gt
 8007e0a:	464f      	movgt	r7, r9
 8007e0c:	2701      	movle	r7, #1
 8007e0e:	f04f 0800 	mov.w	r8, #0
 8007e12:	9a03      	ldr	r2, [sp, #12]
 8007e14:	4417      	add	r7, r2
 8007e16:	4659      	mov	r1, fp
 8007e18:	2201      	movs	r2, #1
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	9308      	str	r3, [sp, #32]
 8007e1e:	f000 fe3d 	bl	8008a9c <__lshift>
 8007e22:	4621      	mov	r1, r4
 8007e24:	4683      	mov	fp, r0
 8007e26:	f000 fea9 	bl	8008b7c <__mcmp>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	dcb2      	bgt.n	8007d94 <_dtoa_r+0xac4>
 8007e2e:	d102      	bne.n	8007e36 <_dtoa_r+0xb66>
 8007e30:	9b08      	ldr	r3, [sp, #32]
 8007e32:	07db      	lsls	r3, r3, #31
 8007e34:	d4ae      	bmi.n	8007d94 <_dtoa_r+0xac4>
 8007e36:	463b      	mov	r3, r7
 8007e38:	461f      	mov	r7, r3
 8007e3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e3e:	2a30      	cmp	r2, #48	; 0x30
 8007e40:	d0fa      	beq.n	8007e38 <_dtoa_r+0xb68>
 8007e42:	e6f9      	b.n	8007c38 <_dtoa_r+0x968>
 8007e44:	9a03      	ldr	r2, [sp, #12]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d1a5      	bne.n	8007d96 <_dtoa_r+0xac6>
 8007e4a:	2331      	movs	r3, #49	; 0x31
 8007e4c:	f10a 0a01 	add.w	sl, sl, #1
 8007e50:	e779      	b.n	8007d46 <_dtoa_r+0xa76>
 8007e52:	4b14      	ldr	r3, [pc, #80]	; (8007ea4 <_dtoa_r+0xbd4>)
 8007e54:	f7ff baa8 	b.w	80073a8 <_dtoa_r+0xd8>
 8007e58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f47f aa81 	bne.w	8007362 <_dtoa_r+0x92>
 8007e60:	4b11      	ldr	r3, [pc, #68]	; (8007ea8 <_dtoa_r+0xbd8>)
 8007e62:	f7ff baa1 	b.w	80073a8 <_dtoa_r+0xd8>
 8007e66:	f1b9 0f00 	cmp.w	r9, #0
 8007e6a:	dc03      	bgt.n	8007e74 <_dtoa_r+0xba4>
 8007e6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	f73f aecb 	bgt.w	8007c0a <_dtoa_r+0x93a>
 8007e74:	9f03      	ldr	r7, [sp, #12]
 8007e76:	4621      	mov	r1, r4
 8007e78:	4658      	mov	r0, fp
 8007e7a:	f7ff f99d 	bl	80071b8 <quorem>
 8007e7e:	9a03      	ldr	r2, [sp, #12]
 8007e80:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007e84:	f807 3b01 	strb.w	r3, [r7], #1
 8007e88:	1aba      	subs	r2, r7, r2
 8007e8a:	4591      	cmp	r9, r2
 8007e8c:	ddba      	ble.n	8007e04 <_dtoa_r+0xb34>
 8007e8e:	4659      	mov	r1, fp
 8007e90:	2300      	movs	r3, #0
 8007e92:	220a      	movs	r2, #10
 8007e94:	4628      	mov	r0, r5
 8007e96:	f000 fc0b 	bl	80086b0 <__multadd>
 8007e9a:	4683      	mov	fp, r0
 8007e9c:	e7eb      	b.n	8007e76 <_dtoa_r+0xba6>
 8007e9e:	bf00      	nop
 8007ea0:	0801b058 	.word	0x0801b058
 8007ea4:	0801ae5c 	.word	0x0801ae5c
 8007ea8:	0801afd9 	.word	0x0801afd9

08007eac <rshift>:
 8007eac:	6903      	ldr	r3, [r0, #16]
 8007eae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007eb2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007eb6:	f100 0414 	add.w	r4, r0, #20
 8007eba:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007ebe:	dd46      	ble.n	8007f4e <rshift+0xa2>
 8007ec0:	f011 011f 	ands.w	r1, r1, #31
 8007ec4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007ec8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ecc:	d10c      	bne.n	8007ee8 <rshift+0x3c>
 8007ece:	4629      	mov	r1, r5
 8007ed0:	f100 0710 	add.w	r7, r0, #16
 8007ed4:	42b1      	cmp	r1, r6
 8007ed6:	d335      	bcc.n	8007f44 <rshift+0x98>
 8007ed8:	1a9b      	subs	r3, r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	1eea      	subs	r2, r5, #3
 8007ede:	4296      	cmp	r6, r2
 8007ee0:	bf38      	it	cc
 8007ee2:	2300      	movcc	r3, #0
 8007ee4:	4423      	add	r3, r4
 8007ee6:	e015      	b.n	8007f14 <rshift+0x68>
 8007ee8:	46a1      	mov	r9, r4
 8007eea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007eee:	f1c1 0820 	rsb	r8, r1, #32
 8007ef2:	40cf      	lsrs	r7, r1
 8007ef4:	f105 0e04 	add.w	lr, r5, #4
 8007ef8:	4576      	cmp	r6, lr
 8007efa:	46f4      	mov	ip, lr
 8007efc:	d816      	bhi.n	8007f2c <rshift+0x80>
 8007efe:	1a9a      	subs	r2, r3, r2
 8007f00:	0092      	lsls	r2, r2, #2
 8007f02:	3a04      	subs	r2, #4
 8007f04:	3501      	adds	r5, #1
 8007f06:	42ae      	cmp	r6, r5
 8007f08:	bf38      	it	cc
 8007f0a:	2200      	movcc	r2, #0
 8007f0c:	18a3      	adds	r3, r4, r2
 8007f0e:	50a7      	str	r7, [r4, r2]
 8007f10:	b107      	cbz	r7, 8007f14 <rshift+0x68>
 8007f12:	3304      	adds	r3, #4
 8007f14:	42a3      	cmp	r3, r4
 8007f16:	eba3 0204 	sub.w	r2, r3, r4
 8007f1a:	bf08      	it	eq
 8007f1c:	2300      	moveq	r3, #0
 8007f1e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007f22:	6102      	str	r2, [r0, #16]
 8007f24:	bf08      	it	eq
 8007f26:	6143      	streq	r3, [r0, #20]
 8007f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f2c:	f8dc c000 	ldr.w	ip, [ip]
 8007f30:	fa0c fc08 	lsl.w	ip, ip, r8
 8007f34:	ea4c 0707 	orr.w	r7, ip, r7
 8007f38:	f849 7b04 	str.w	r7, [r9], #4
 8007f3c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f40:	40cf      	lsrs	r7, r1
 8007f42:	e7d9      	b.n	8007ef8 <rshift+0x4c>
 8007f44:	f851 cb04 	ldr.w	ip, [r1], #4
 8007f48:	f847 cf04 	str.w	ip, [r7, #4]!
 8007f4c:	e7c2      	b.n	8007ed4 <rshift+0x28>
 8007f4e:	4623      	mov	r3, r4
 8007f50:	e7e0      	b.n	8007f14 <rshift+0x68>

08007f52 <__hexdig_fun>:
 8007f52:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007f56:	2b09      	cmp	r3, #9
 8007f58:	d802      	bhi.n	8007f60 <__hexdig_fun+0xe>
 8007f5a:	3820      	subs	r0, #32
 8007f5c:	b2c0      	uxtb	r0, r0
 8007f5e:	4770      	bx	lr
 8007f60:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007f64:	2b05      	cmp	r3, #5
 8007f66:	d801      	bhi.n	8007f6c <__hexdig_fun+0x1a>
 8007f68:	3847      	subs	r0, #71	; 0x47
 8007f6a:	e7f7      	b.n	8007f5c <__hexdig_fun+0xa>
 8007f6c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007f70:	2b05      	cmp	r3, #5
 8007f72:	d801      	bhi.n	8007f78 <__hexdig_fun+0x26>
 8007f74:	3827      	subs	r0, #39	; 0x27
 8007f76:	e7f1      	b.n	8007f5c <__hexdig_fun+0xa>
 8007f78:	2000      	movs	r0, #0
 8007f7a:	4770      	bx	lr

08007f7c <__gethex>:
 8007f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f80:	b08b      	sub	sp, #44	; 0x2c
 8007f82:	9305      	str	r3, [sp, #20]
 8007f84:	4bb2      	ldr	r3, [pc, #712]	; (8008250 <__gethex+0x2d4>)
 8007f86:	9002      	str	r0, [sp, #8]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	468b      	mov	fp, r1
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	4690      	mov	r8, r2
 8007f90:	9303      	str	r3, [sp, #12]
 8007f92:	f7f8 f8dd 	bl	8000150 <strlen>
 8007f96:	4682      	mov	sl, r0
 8007f98:	9b03      	ldr	r3, [sp, #12]
 8007f9a:	f8db 2000 	ldr.w	r2, [fp]
 8007f9e:	4403      	add	r3, r0
 8007fa0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007fa4:	9306      	str	r3, [sp, #24]
 8007fa6:	1c93      	adds	r3, r2, #2
 8007fa8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007fac:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007fb0:	32fe      	adds	r2, #254	; 0xfe
 8007fb2:	18d1      	adds	r1, r2, r3
 8007fb4:	461f      	mov	r7, r3
 8007fb6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007fba:	9101      	str	r1, [sp, #4]
 8007fbc:	2830      	cmp	r0, #48	; 0x30
 8007fbe:	d0f8      	beq.n	8007fb2 <__gethex+0x36>
 8007fc0:	f7ff ffc7 	bl	8007f52 <__hexdig_fun>
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	d13a      	bne.n	8008040 <__gethex+0xc4>
 8007fca:	4652      	mov	r2, sl
 8007fcc:	4638      	mov	r0, r7
 8007fce:	9903      	ldr	r1, [sp, #12]
 8007fd0:	f001 fa26 	bl	8009420 <strncmp>
 8007fd4:	4605      	mov	r5, r0
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	d166      	bne.n	80080a8 <__gethex+0x12c>
 8007fda:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007fde:	eb07 060a 	add.w	r6, r7, sl
 8007fe2:	f7ff ffb6 	bl	8007f52 <__hexdig_fun>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	d060      	beq.n	80080ac <__gethex+0x130>
 8007fea:	4633      	mov	r3, r6
 8007fec:	7818      	ldrb	r0, [r3, #0]
 8007fee:	461f      	mov	r7, r3
 8007ff0:	2830      	cmp	r0, #48	; 0x30
 8007ff2:	f103 0301 	add.w	r3, r3, #1
 8007ff6:	d0f9      	beq.n	8007fec <__gethex+0x70>
 8007ff8:	f7ff ffab 	bl	8007f52 <__hexdig_fun>
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	fab0 f480 	clz	r4, r0
 8008002:	4635      	mov	r5, r6
 8008004:	0964      	lsrs	r4, r4, #5
 8008006:	9301      	str	r3, [sp, #4]
 8008008:	463a      	mov	r2, r7
 800800a:	4616      	mov	r6, r2
 800800c:	7830      	ldrb	r0, [r6, #0]
 800800e:	3201      	adds	r2, #1
 8008010:	f7ff ff9f 	bl	8007f52 <__hexdig_fun>
 8008014:	2800      	cmp	r0, #0
 8008016:	d1f8      	bne.n	800800a <__gethex+0x8e>
 8008018:	4652      	mov	r2, sl
 800801a:	4630      	mov	r0, r6
 800801c:	9903      	ldr	r1, [sp, #12]
 800801e:	f001 f9ff 	bl	8009420 <strncmp>
 8008022:	b980      	cbnz	r0, 8008046 <__gethex+0xca>
 8008024:	b94d      	cbnz	r5, 800803a <__gethex+0xbe>
 8008026:	eb06 050a 	add.w	r5, r6, sl
 800802a:	462a      	mov	r2, r5
 800802c:	4616      	mov	r6, r2
 800802e:	7830      	ldrb	r0, [r6, #0]
 8008030:	3201      	adds	r2, #1
 8008032:	f7ff ff8e 	bl	8007f52 <__hexdig_fun>
 8008036:	2800      	cmp	r0, #0
 8008038:	d1f8      	bne.n	800802c <__gethex+0xb0>
 800803a:	1bad      	subs	r5, r5, r6
 800803c:	00ad      	lsls	r5, r5, #2
 800803e:	e004      	b.n	800804a <__gethex+0xce>
 8008040:	2400      	movs	r4, #0
 8008042:	4625      	mov	r5, r4
 8008044:	e7e0      	b.n	8008008 <__gethex+0x8c>
 8008046:	2d00      	cmp	r5, #0
 8008048:	d1f7      	bne.n	800803a <__gethex+0xbe>
 800804a:	7833      	ldrb	r3, [r6, #0]
 800804c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008050:	2b50      	cmp	r3, #80	; 0x50
 8008052:	d139      	bne.n	80080c8 <__gethex+0x14c>
 8008054:	7873      	ldrb	r3, [r6, #1]
 8008056:	2b2b      	cmp	r3, #43	; 0x2b
 8008058:	d02a      	beq.n	80080b0 <__gethex+0x134>
 800805a:	2b2d      	cmp	r3, #45	; 0x2d
 800805c:	d02c      	beq.n	80080b8 <__gethex+0x13c>
 800805e:	f04f 0900 	mov.w	r9, #0
 8008062:	1c71      	adds	r1, r6, #1
 8008064:	7808      	ldrb	r0, [r1, #0]
 8008066:	f7ff ff74 	bl	8007f52 <__hexdig_fun>
 800806a:	1e43      	subs	r3, r0, #1
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b18      	cmp	r3, #24
 8008070:	d82a      	bhi.n	80080c8 <__gethex+0x14c>
 8008072:	f1a0 0210 	sub.w	r2, r0, #16
 8008076:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800807a:	f7ff ff6a 	bl	8007f52 <__hexdig_fun>
 800807e:	1e43      	subs	r3, r0, #1
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b18      	cmp	r3, #24
 8008084:	d91b      	bls.n	80080be <__gethex+0x142>
 8008086:	f1b9 0f00 	cmp.w	r9, #0
 800808a:	d000      	beq.n	800808e <__gethex+0x112>
 800808c:	4252      	negs	r2, r2
 800808e:	4415      	add	r5, r2
 8008090:	f8cb 1000 	str.w	r1, [fp]
 8008094:	b1d4      	cbz	r4, 80080cc <__gethex+0x150>
 8008096:	9b01      	ldr	r3, [sp, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	bf14      	ite	ne
 800809c:	2700      	movne	r7, #0
 800809e:	2706      	moveq	r7, #6
 80080a0:	4638      	mov	r0, r7
 80080a2:	b00b      	add	sp, #44	; 0x2c
 80080a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a8:	463e      	mov	r6, r7
 80080aa:	4625      	mov	r5, r4
 80080ac:	2401      	movs	r4, #1
 80080ae:	e7cc      	b.n	800804a <__gethex+0xce>
 80080b0:	f04f 0900 	mov.w	r9, #0
 80080b4:	1cb1      	adds	r1, r6, #2
 80080b6:	e7d5      	b.n	8008064 <__gethex+0xe8>
 80080b8:	f04f 0901 	mov.w	r9, #1
 80080bc:	e7fa      	b.n	80080b4 <__gethex+0x138>
 80080be:	230a      	movs	r3, #10
 80080c0:	fb03 0202 	mla	r2, r3, r2, r0
 80080c4:	3a10      	subs	r2, #16
 80080c6:	e7d6      	b.n	8008076 <__gethex+0xfa>
 80080c8:	4631      	mov	r1, r6
 80080ca:	e7e1      	b.n	8008090 <__gethex+0x114>
 80080cc:	4621      	mov	r1, r4
 80080ce:	1bf3      	subs	r3, r6, r7
 80080d0:	3b01      	subs	r3, #1
 80080d2:	2b07      	cmp	r3, #7
 80080d4:	dc0a      	bgt.n	80080ec <__gethex+0x170>
 80080d6:	9802      	ldr	r0, [sp, #8]
 80080d8:	f000 fa88 	bl	80085ec <_Balloc>
 80080dc:	4604      	mov	r4, r0
 80080de:	b940      	cbnz	r0, 80080f2 <__gethex+0x176>
 80080e0:	4602      	mov	r2, r0
 80080e2:	21de      	movs	r1, #222	; 0xde
 80080e4:	4b5b      	ldr	r3, [pc, #364]	; (8008254 <__gethex+0x2d8>)
 80080e6:	485c      	ldr	r0, [pc, #368]	; (8008258 <__gethex+0x2dc>)
 80080e8:	f001 f9bc 	bl	8009464 <__assert_func>
 80080ec:	3101      	adds	r1, #1
 80080ee:	105b      	asrs	r3, r3, #1
 80080f0:	e7ef      	b.n	80080d2 <__gethex+0x156>
 80080f2:	f04f 0b00 	mov.w	fp, #0
 80080f6:	f100 0914 	add.w	r9, r0, #20
 80080fa:	f1ca 0301 	rsb	r3, sl, #1
 80080fe:	f8cd 9010 	str.w	r9, [sp, #16]
 8008102:	f8cd b004 	str.w	fp, [sp, #4]
 8008106:	9308      	str	r3, [sp, #32]
 8008108:	42b7      	cmp	r7, r6
 800810a:	d33f      	bcc.n	800818c <__gethex+0x210>
 800810c:	9f04      	ldr	r7, [sp, #16]
 800810e:	9b01      	ldr	r3, [sp, #4]
 8008110:	f847 3b04 	str.w	r3, [r7], #4
 8008114:	eba7 0709 	sub.w	r7, r7, r9
 8008118:	10bf      	asrs	r7, r7, #2
 800811a:	6127      	str	r7, [r4, #16]
 800811c:	4618      	mov	r0, r3
 800811e:	f000 fb57 	bl	80087d0 <__hi0bits>
 8008122:	017f      	lsls	r7, r7, #5
 8008124:	f8d8 6000 	ldr.w	r6, [r8]
 8008128:	1a3f      	subs	r7, r7, r0
 800812a:	42b7      	cmp	r7, r6
 800812c:	dd62      	ble.n	80081f4 <__gethex+0x278>
 800812e:	1bbf      	subs	r7, r7, r6
 8008130:	4639      	mov	r1, r7
 8008132:	4620      	mov	r0, r4
 8008134:	f000 fef1 	bl	8008f1a <__any_on>
 8008138:	4682      	mov	sl, r0
 800813a:	b1a8      	cbz	r0, 8008168 <__gethex+0x1ec>
 800813c:	f04f 0a01 	mov.w	sl, #1
 8008140:	1e7b      	subs	r3, r7, #1
 8008142:	1159      	asrs	r1, r3, #5
 8008144:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008148:	f003 021f 	and.w	r2, r3, #31
 800814c:	fa0a f202 	lsl.w	r2, sl, r2
 8008150:	420a      	tst	r2, r1
 8008152:	d009      	beq.n	8008168 <__gethex+0x1ec>
 8008154:	4553      	cmp	r3, sl
 8008156:	dd05      	ble.n	8008164 <__gethex+0x1e8>
 8008158:	4620      	mov	r0, r4
 800815a:	1eb9      	subs	r1, r7, #2
 800815c:	f000 fedd 	bl	8008f1a <__any_on>
 8008160:	2800      	cmp	r0, #0
 8008162:	d144      	bne.n	80081ee <__gethex+0x272>
 8008164:	f04f 0a02 	mov.w	sl, #2
 8008168:	4639      	mov	r1, r7
 800816a:	4620      	mov	r0, r4
 800816c:	f7ff fe9e 	bl	8007eac <rshift>
 8008170:	443d      	add	r5, r7
 8008172:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008176:	42ab      	cmp	r3, r5
 8008178:	da4a      	bge.n	8008210 <__gethex+0x294>
 800817a:	4621      	mov	r1, r4
 800817c:	9802      	ldr	r0, [sp, #8]
 800817e:	f000 fa75 	bl	800866c <_Bfree>
 8008182:	2300      	movs	r3, #0
 8008184:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008186:	27a3      	movs	r7, #163	; 0xa3
 8008188:	6013      	str	r3, [r2, #0]
 800818a:	e789      	b.n	80080a0 <__gethex+0x124>
 800818c:	1e73      	subs	r3, r6, #1
 800818e:	9a06      	ldr	r2, [sp, #24]
 8008190:	9307      	str	r3, [sp, #28]
 8008192:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008196:	4293      	cmp	r3, r2
 8008198:	d019      	beq.n	80081ce <__gethex+0x252>
 800819a:	f1bb 0f20 	cmp.w	fp, #32
 800819e:	d107      	bne.n	80081b0 <__gethex+0x234>
 80081a0:	9b04      	ldr	r3, [sp, #16]
 80081a2:	9a01      	ldr	r2, [sp, #4]
 80081a4:	f843 2b04 	str.w	r2, [r3], #4
 80081a8:	9304      	str	r3, [sp, #16]
 80081aa:	2300      	movs	r3, #0
 80081ac:	469b      	mov	fp, r3
 80081ae:	9301      	str	r3, [sp, #4]
 80081b0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80081b4:	f7ff fecd 	bl	8007f52 <__hexdig_fun>
 80081b8:	9b01      	ldr	r3, [sp, #4]
 80081ba:	f000 000f 	and.w	r0, r0, #15
 80081be:	fa00 f00b 	lsl.w	r0, r0, fp
 80081c2:	4303      	orrs	r3, r0
 80081c4:	9301      	str	r3, [sp, #4]
 80081c6:	f10b 0b04 	add.w	fp, fp, #4
 80081ca:	9b07      	ldr	r3, [sp, #28]
 80081cc:	e00d      	b.n	80081ea <__gethex+0x26e>
 80081ce:	9a08      	ldr	r2, [sp, #32]
 80081d0:	1e73      	subs	r3, r6, #1
 80081d2:	4413      	add	r3, r2
 80081d4:	42bb      	cmp	r3, r7
 80081d6:	d3e0      	bcc.n	800819a <__gethex+0x21e>
 80081d8:	4618      	mov	r0, r3
 80081da:	4652      	mov	r2, sl
 80081dc:	9903      	ldr	r1, [sp, #12]
 80081de:	9309      	str	r3, [sp, #36]	; 0x24
 80081e0:	f001 f91e 	bl	8009420 <strncmp>
 80081e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d1d7      	bne.n	800819a <__gethex+0x21e>
 80081ea:	461e      	mov	r6, r3
 80081ec:	e78c      	b.n	8008108 <__gethex+0x18c>
 80081ee:	f04f 0a03 	mov.w	sl, #3
 80081f2:	e7b9      	b.n	8008168 <__gethex+0x1ec>
 80081f4:	da09      	bge.n	800820a <__gethex+0x28e>
 80081f6:	1bf7      	subs	r7, r6, r7
 80081f8:	4621      	mov	r1, r4
 80081fa:	463a      	mov	r2, r7
 80081fc:	9802      	ldr	r0, [sp, #8]
 80081fe:	f000 fc4d 	bl	8008a9c <__lshift>
 8008202:	4604      	mov	r4, r0
 8008204:	1bed      	subs	r5, r5, r7
 8008206:	f100 0914 	add.w	r9, r0, #20
 800820a:	f04f 0a00 	mov.w	sl, #0
 800820e:	e7b0      	b.n	8008172 <__gethex+0x1f6>
 8008210:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008214:	42a8      	cmp	r0, r5
 8008216:	dd72      	ble.n	80082fe <__gethex+0x382>
 8008218:	1b45      	subs	r5, r0, r5
 800821a:	42ae      	cmp	r6, r5
 800821c:	dc35      	bgt.n	800828a <__gethex+0x30e>
 800821e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d029      	beq.n	800827a <__gethex+0x2fe>
 8008226:	2b03      	cmp	r3, #3
 8008228:	d02b      	beq.n	8008282 <__gethex+0x306>
 800822a:	2b01      	cmp	r3, #1
 800822c:	d11c      	bne.n	8008268 <__gethex+0x2ec>
 800822e:	42ae      	cmp	r6, r5
 8008230:	d11a      	bne.n	8008268 <__gethex+0x2ec>
 8008232:	2e01      	cmp	r6, #1
 8008234:	d112      	bne.n	800825c <__gethex+0x2e0>
 8008236:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800823a:	9a05      	ldr	r2, [sp, #20]
 800823c:	2762      	movs	r7, #98	; 0x62
 800823e:	6013      	str	r3, [r2, #0]
 8008240:	2301      	movs	r3, #1
 8008242:	6123      	str	r3, [r4, #16]
 8008244:	f8c9 3000 	str.w	r3, [r9]
 8008248:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800824a:	601c      	str	r4, [r3, #0]
 800824c:	e728      	b.n	80080a0 <__gethex+0x124>
 800824e:	bf00      	nop
 8008250:	0801b0d0 	.word	0x0801b0d0
 8008254:	0801b058 	.word	0x0801b058
 8008258:	0801b069 	.word	0x0801b069
 800825c:	4620      	mov	r0, r4
 800825e:	1e71      	subs	r1, r6, #1
 8008260:	f000 fe5b 	bl	8008f1a <__any_on>
 8008264:	2800      	cmp	r0, #0
 8008266:	d1e6      	bne.n	8008236 <__gethex+0x2ba>
 8008268:	4621      	mov	r1, r4
 800826a:	9802      	ldr	r0, [sp, #8]
 800826c:	f000 f9fe 	bl	800866c <_Bfree>
 8008270:	2300      	movs	r3, #0
 8008272:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008274:	2750      	movs	r7, #80	; 0x50
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	e712      	b.n	80080a0 <__gethex+0x124>
 800827a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1f3      	bne.n	8008268 <__gethex+0x2ec>
 8008280:	e7d9      	b.n	8008236 <__gethex+0x2ba>
 8008282:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1d6      	bne.n	8008236 <__gethex+0x2ba>
 8008288:	e7ee      	b.n	8008268 <__gethex+0x2ec>
 800828a:	1e6f      	subs	r7, r5, #1
 800828c:	f1ba 0f00 	cmp.w	sl, #0
 8008290:	d132      	bne.n	80082f8 <__gethex+0x37c>
 8008292:	b127      	cbz	r7, 800829e <__gethex+0x322>
 8008294:	4639      	mov	r1, r7
 8008296:	4620      	mov	r0, r4
 8008298:	f000 fe3f 	bl	8008f1a <__any_on>
 800829c:	4682      	mov	sl, r0
 800829e:	2101      	movs	r1, #1
 80082a0:	117b      	asrs	r3, r7, #5
 80082a2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80082a6:	f007 071f 	and.w	r7, r7, #31
 80082aa:	fa01 f707 	lsl.w	r7, r1, r7
 80082ae:	421f      	tst	r7, r3
 80082b0:	f04f 0702 	mov.w	r7, #2
 80082b4:	4629      	mov	r1, r5
 80082b6:	4620      	mov	r0, r4
 80082b8:	bf18      	it	ne
 80082ba:	f04a 0a02 	orrne.w	sl, sl, #2
 80082be:	1b76      	subs	r6, r6, r5
 80082c0:	f7ff fdf4 	bl	8007eac <rshift>
 80082c4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80082c8:	f1ba 0f00 	cmp.w	sl, #0
 80082cc:	d048      	beq.n	8008360 <__gethex+0x3e4>
 80082ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d015      	beq.n	8008302 <__gethex+0x386>
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d017      	beq.n	800830a <__gethex+0x38e>
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d109      	bne.n	80082f2 <__gethex+0x376>
 80082de:	f01a 0f02 	tst.w	sl, #2
 80082e2:	d006      	beq.n	80082f2 <__gethex+0x376>
 80082e4:	f8d9 0000 	ldr.w	r0, [r9]
 80082e8:	ea4a 0a00 	orr.w	sl, sl, r0
 80082ec:	f01a 0f01 	tst.w	sl, #1
 80082f0:	d10e      	bne.n	8008310 <__gethex+0x394>
 80082f2:	f047 0710 	orr.w	r7, r7, #16
 80082f6:	e033      	b.n	8008360 <__gethex+0x3e4>
 80082f8:	f04f 0a01 	mov.w	sl, #1
 80082fc:	e7cf      	b.n	800829e <__gethex+0x322>
 80082fe:	2701      	movs	r7, #1
 8008300:	e7e2      	b.n	80082c8 <__gethex+0x34c>
 8008302:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008304:	f1c3 0301 	rsb	r3, r3, #1
 8008308:	9315      	str	r3, [sp, #84]	; 0x54
 800830a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800830c:	2b00      	cmp	r3, #0
 800830e:	d0f0      	beq.n	80082f2 <__gethex+0x376>
 8008310:	f04f 0c00 	mov.w	ip, #0
 8008314:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008318:	f104 0314 	add.w	r3, r4, #20
 800831c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008320:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008324:	4618      	mov	r0, r3
 8008326:	f853 2b04 	ldr.w	r2, [r3], #4
 800832a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800832e:	d01c      	beq.n	800836a <__gethex+0x3ee>
 8008330:	3201      	adds	r2, #1
 8008332:	6002      	str	r2, [r0, #0]
 8008334:	2f02      	cmp	r7, #2
 8008336:	f104 0314 	add.w	r3, r4, #20
 800833a:	d13d      	bne.n	80083b8 <__gethex+0x43c>
 800833c:	f8d8 2000 	ldr.w	r2, [r8]
 8008340:	3a01      	subs	r2, #1
 8008342:	42b2      	cmp	r2, r6
 8008344:	d10a      	bne.n	800835c <__gethex+0x3e0>
 8008346:	2201      	movs	r2, #1
 8008348:	1171      	asrs	r1, r6, #5
 800834a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800834e:	f006 061f 	and.w	r6, r6, #31
 8008352:	fa02 f606 	lsl.w	r6, r2, r6
 8008356:	421e      	tst	r6, r3
 8008358:	bf18      	it	ne
 800835a:	4617      	movne	r7, r2
 800835c:	f047 0720 	orr.w	r7, r7, #32
 8008360:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008362:	601c      	str	r4, [r3, #0]
 8008364:	9b05      	ldr	r3, [sp, #20]
 8008366:	601d      	str	r5, [r3, #0]
 8008368:	e69a      	b.n	80080a0 <__gethex+0x124>
 800836a:	4299      	cmp	r1, r3
 800836c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008370:	d8d8      	bhi.n	8008324 <__gethex+0x3a8>
 8008372:	68a3      	ldr	r3, [r4, #8]
 8008374:	459b      	cmp	fp, r3
 8008376:	db17      	blt.n	80083a8 <__gethex+0x42c>
 8008378:	6861      	ldr	r1, [r4, #4]
 800837a:	9802      	ldr	r0, [sp, #8]
 800837c:	3101      	adds	r1, #1
 800837e:	f000 f935 	bl	80085ec <_Balloc>
 8008382:	4681      	mov	r9, r0
 8008384:	b918      	cbnz	r0, 800838e <__gethex+0x412>
 8008386:	4602      	mov	r2, r0
 8008388:	2184      	movs	r1, #132	; 0x84
 800838a:	4b19      	ldr	r3, [pc, #100]	; (80083f0 <__gethex+0x474>)
 800838c:	e6ab      	b.n	80080e6 <__gethex+0x16a>
 800838e:	6922      	ldr	r2, [r4, #16]
 8008390:	f104 010c 	add.w	r1, r4, #12
 8008394:	3202      	adds	r2, #2
 8008396:	0092      	lsls	r2, r2, #2
 8008398:	300c      	adds	r0, #12
 800839a:	f000 f919 	bl	80085d0 <memcpy>
 800839e:	4621      	mov	r1, r4
 80083a0:	9802      	ldr	r0, [sp, #8]
 80083a2:	f000 f963 	bl	800866c <_Bfree>
 80083a6:	464c      	mov	r4, r9
 80083a8:	6923      	ldr	r3, [r4, #16]
 80083aa:	1c5a      	adds	r2, r3, #1
 80083ac:	6122      	str	r2, [r4, #16]
 80083ae:	2201      	movs	r2, #1
 80083b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80083b4:	615a      	str	r2, [r3, #20]
 80083b6:	e7bd      	b.n	8008334 <__gethex+0x3b8>
 80083b8:	6922      	ldr	r2, [r4, #16]
 80083ba:	455a      	cmp	r2, fp
 80083bc:	dd0b      	ble.n	80083d6 <__gethex+0x45a>
 80083be:	2101      	movs	r1, #1
 80083c0:	4620      	mov	r0, r4
 80083c2:	f7ff fd73 	bl	8007eac <rshift>
 80083c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80083ca:	3501      	adds	r5, #1
 80083cc:	42ab      	cmp	r3, r5
 80083ce:	f6ff aed4 	blt.w	800817a <__gethex+0x1fe>
 80083d2:	2701      	movs	r7, #1
 80083d4:	e7c2      	b.n	800835c <__gethex+0x3e0>
 80083d6:	f016 061f 	ands.w	r6, r6, #31
 80083da:	d0fa      	beq.n	80083d2 <__gethex+0x456>
 80083dc:	4453      	add	r3, sl
 80083de:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80083e2:	f000 f9f5 	bl	80087d0 <__hi0bits>
 80083e6:	f1c6 0620 	rsb	r6, r6, #32
 80083ea:	42b0      	cmp	r0, r6
 80083ec:	dbe7      	blt.n	80083be <__gethex+0x442>
 80083ee:	e7f0      	b.n	80083d2 <__gethex+0x456>
 80083f0:	0801b058 	.word	0x0801b058

080083f4 <L_shift>:
 80083f4:	f1c2 0208 	rsb	r2, r2, #8
 80083f8:	0092      	lsls	r2, r2, #2
 80083fa:	b570      	push	{r4, r5, r6, lr}
 80083fc:	f1c2 0620 	rsb	r6, r2, #32
 8008400:	6843      	ldr	r3, [r0, #4]
 8008402:	6804      	ldr	r4, [r0, #0]
 8008404:	fa03 f506 	lsl.w	r5, r3, r6
 8008408:	432c      	orrs	r4, r5
 800840a:	40d3      	lsrs	r3, r2
 800840c:	6004      	str	r4, [r0, #0]
 800840e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008412:	4288      	cmp	r0, r1
 8008414:	d3f4      	bcc.n	8008400 <L_shift+0xc>
 8008416:	bd70      	pop	{r4, r5, r6, pc}

08008418 <__match>:
 8008418:	b530      	push	{r4, r5, lr}
 800841a:	6803      	ldr	r3, [r0, #0]
 800841c:	3301      	adds	r3, #1
 800841e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008422:	b914      	cbnz	r4, 800842a <__match+0x12>
 8008424:	6003      	str	r3, [r0, #0]
 8008426:	2001      	movs	r0, #1
 8008428:	bd30      	pop	{r4, r5, pc}
 800842a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800842e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008432:	2d19      	cmp	r5, #25
 8008434:	bf98      	it	ls
 8008436:	3220      	addls	r2, #32
 8008438:	42a2      	cmp	r2, r4
 800843a:	d0f0      	beq.n	800841e <__match+0x6>
 800843c:	2000      	movs	r0, #0
 800843e:	e7f3      	b.n	8008428 <__match+0x10>

08008440 <__hexnan>:
 8008440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	2500      	movs	r5, #0
 8008446:	680b      	ldr	r3, [r1, #0]
 8008448:	4682      	mov	sl, r0
 800844a:	115e      	asrs	r6, r3, #5
 800844c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008450:	f013 031f 	ands.w	r3, r3, #31
 8008454:	bf18      	it	ne
 8008456:	3604      	addne	r6, #4
 8008458:	1f37      	subs	r7, r6, #4
 800845a:	46b9      	mov	r9, r7
 800845c:	463c      	mov	r4, r7
 800845e:	46ab      	mov	fp, r5
 8008460:	b087      	sub	sp, #28
 8008462:	4690      	mov	r8, r2
 8008464:	6802      	ldr	r2, [r0, #0]
 8008466:	9301      	str	r3, [sp, #4]
 8008468:	f846 5c04 	str.w	r5, [r6, #-4]
 800846c:	9502      	str	r5, [sp, #8]
 800846e:	7851      	ldrb	r1, [r2, #1]
 8008470:	1c53      	adds	r3, r2, #1
 8008472:	9303      	str	r3, [sp, #12]
 8008474:	b341      	cbz	r1, 80084c8 <__hexnan+0x88>
 8008476:	4608      	mov	r0, r1
 8008478:	9205      	str	r2, [sp, #20]
 800847a:	9104      	str	r1, [sp, #16]
 800847c:	f7ff fd69 	bl	8007f52 <__hexdig_fun>
 8008480:	2800      	cmp	r0, #0
 8008482:	d14f      	bne.n	8008524 <__hexnan+0xe4>
 8008484:	9904      	ldr	r1, [sp, #16]
 8008486:	9a05      	ldr	r2, [sp, #20]
 8008488:	2920      	cmp	r1, #32
 800848a:	d818      	bhi.n	80084be <__hexnan+0x7e>
 800848c:	9b02      	ldr	r3, [sp, #8]
 800848e:	459b      	cmp	fp, r3
 8008490:	dd13      	ble.n	80084ba <__hexnan+0x7a>
 8008492:	454c      	cmp	r4, r9
 8008494:	d206      	bcs.n	80084a4 <__hexnan+0x64>
 8008496:	2d07      	cmp	r5, #7
 8008498:	dc04      	bgt.n	80084a4 <__hexnan+0x64>
 800849a:	462a      	mov	r2, r5
 800849c:	4649      	mov	r1, r9
 800849e:	4620      	mov	r0, r4
 80084a0:	f7ff ffa8 	bl	80083f4 <L_shift>
 80084a4:	4544      	cmp	r4, r8
 80084a6:	d950      	bls.n	800854a <__hexnan+0x10a>
 80084a8:	2300      	movs	r3, #0
 80084aa:	f1a4 0904 	sub.w	r9, r4, #4
 80084ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80084b2:	461d      	mov	r5, r3
 80084b4:	464c      	mov	r4, r9
 80084b6:	f8cd b008 	str.w	fp, [sp, #8]
 80084ba:	9a03      	ldr	r2, [sp, #12]
 80084bc:	e7d7      	b.n	800846e <__hexnan+0x2e>
 80084be:	2929      	cmp	r1, #41	; 0x29
 80084c0:	d156      	bne.n	8008570 <__hexnan+0x130>
 80084c2:	3202      	adds	r2, #2
 80084c4:	f8ca 2000 	str.w	r2, [sl]
 80084c8:	f1bb 0f00 	cmp.w	fp, #0
 80084cc:	d050      	beq.n	8008570 <__hexnan+0x130>
 80084ce:	454c      	cmp	r4, r9
 80084d0:	d206      	bcs.n	80084e0 <__hexnan+0xa0>
 80084d2:	2d07      	cmp	r5, #7
 80084d4:	dc04      	bgt.n	80084e0 <__hexnan+0xa0>
 80084d6:	462a      	mov	r2, r5
 80084d8:	4649      	mov	r1, r9
 80084da:	4620      	mov	r0, r4
 80084dc:	f7ff ff8a 	bl	80083f4 <L_shift>
 80084e0:	4544      	cmp	r4, r8
 80084e2:	d934      	bls.n	800854e <__hexnan+0x10e>
 80084e4:	4623      	mov	r3, r4
 80084e6:	f1a8 0204 	sub.w	r2, r8, #4
 80084ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80084ee:	429f      	cmp	r7, r3
 80084f0:	f842 1f04 	str.w	r1, [r2, #4]!
 80084f4:	d2f9      	bcs.n	80084ea <__hexnan+0xaa>
 80084f6:	1b3b      	subs	r3, r7, r4
 80084f8:	f023 0303 	bic.w	r3, r3, #3
 80084fc:	3304      	adds	r3, #4
 80084fe:	3401      	adds	r4, #1
 8008500:	3e03      	subs	r6, #3
 8008502:	42b4      	cmp	r4, r6
 8008504:	bf88      	it	hi
 8008506:	2304      	movhi	r3, #4
 8008508:	2200      	movs	r2, #0
 800850a:	4443      	add	r3, r8
 800850c:	f843 2b04 	str.w	r2, [r3], #4
 8008510:	429f      	cmp	r7, r3
 8008512:	d2fb      	bcs.n	800850c <__hexnan+0xcc>
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	b91b      	cbnz	r3, 8008520 <__hexnan+0xe0>
 8008518:	4547      	cmp	r7, r8
 800851a:	d127      	bne.n	800856c <__hexnan+0x12c>
 800851c:	2301      	movs	r3, #1
 800851e:	603b      	str	r3, [r7, #0]
 8008520:	2005      	movs	r0, #5
 8008522:	e026      	b.n	8008572 <__hexnan+0x132>
 8008524:	3501      	adds	r5, #1
 8008526:	2d08      	cmp	r5, #8
 8008528:	f10b 0b01 	add.w	fp, fp, #1
 800852c:	dd06      	ble.n	800853c <__hexnan+0xfc>
 800852e:	4544      	cmp	r4, r8
 8008530:	d9c3      	bls.n	80084ba <__hexnan+0x7a>
 8008532:	2300      	movs	r3, #0
 8008534:	2501      	movs	r5, #1
 8008536:	f844 3c04 	str.w	r3, [r4, #-4]
 800853a:	3c04      	subs	r4, #4
 800853c:	6822      	ldr	r2, [r4, #0]
 800853e:	f000 000f 	and.w	r0, r0, #15
 8008542:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008546:	6022      	str	r2, [r4, #0]
 8008548:	e7b7      	b.n	80084ba <__hexnan+0x7a>
 800854a:	2508      	movs	r5, #8
 800854c:	e7b5      	b.n	80084ba <__hexnan+0x7a>
 800854e:	9b01      	ldr	r3, [sp, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d0df      	beq.n	8008514 <__hexnan+0xd4>
 8008554:	f04f 32ff 	mov.w	r2, #4294967295
 8008558:	f1c3 0320 	rsb	r3, r3, #32
 800855c:	fa22 f303 	lsr.w	r3, r2, r3
 8008560:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008564:	401a      	ands	r2, r3
 8008566:	f846 2c04 	str.w	r2, [r6, #-4]
 800856a:	e7d3      	b.n	8008514 <__hexnan+0xd4>
 800856c:	3f04      	subs	r7, #4
 800856e:	e7d1      	b.n	8008514 <__hexnan+0xd4>
 8008570:	2004      	movs	r0, #4
 8008572:	b007      	add	sp, #28
 8008574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008578 <_localeconv_r>:
 8008578:	4800      	ldr	r0, [pc, #0]	; (800857c <_localeconv_r+0x4>)
 800857a:	4770      	bx	lr
 800857c:	200002a4 	.word	0x200002a4

08008580 <malloc>:
 8008580:	4b02      	ldr	r3, [pc, #8]	; (800858c <malloc+0xc>)
 8008582:	4601      	mov	r1, r0
 8008584:	6818      	ldr	r0, [r3, #0]
 8008586:	f000 bd65 	b.w	8009054 <_malloc_r>
 800858a:	bf00      	nop
 800858c:	2000014c 	.word	0x2000014c

08008590 <__ascii_mbtowc>:
 8008590:	b082      	sub	sp, #8
 8008592:	b901      	cbnz	r1, 8008596 <__ascii_mbtowc+0x6>
 8008594:	a901      	add	r1, sp, #4
 8008596:	b142      	cbz	r2, 80085aa <__ascii_mbtowc+0x1a>
 8008598:	b14b      	cbz	r3, 80085ae <__ascii_mbtowc+0x1e>
 800859a:	7813      	ldrb	r3, [r2, #0]
 800859c:	600b      	str	r3, [r1, #0]
 800859e:	7812      	ldrb	r2, [r2, #0]
 80085a0:	1e10      	subs	r0, r2, #0
 80085a2:	bf18      	it	ne
 80085a4:	2001      	movne	r0, #1
 80085a6:	b002      	add	sp, #8
 80085a8:	4770      	bx	lr
 80085aa:	4610      	mov	r0, r2
 80085ac:	e7fb      	b.n	80085a6 <__ascii_mbtowc+0x16>
 80085ae:	f06f 0001 	mvn.w	r0, #1
 80085b2:	e7f8      	b.n	80085a6 <__ascii_mbtowc+0x16>

080085b4 <memchr>:
 80085b4:	4603      	mov	r3, r0
 80085b6:	b510      	push	{r4, lr}
 80085b8:	b2c9      	uxtb	r1, r1
 80085ba:	4402      	add	r2, r0
 80085bc:	4293      	cmp	r3, r2
 80085be:	4618      	mov	r0, r3
 80085c0:	d101      	bne.n	80085c6 <memchr+0x12>
 80085c2:	2000      	movs	r0, #0
 80085c4:	e003      	b.n	80085ce <memchr+0x1a>
 80085c6:	7804      	ldrb	r4, [r0, #0]
 80085c8:	3301      	adds	r3, #1
 80085ca:	428c      	cmp	r4, r1
 80085cc:	d1f6      	bne.n	80085bc <memchr+0x8>
 80085ce:	bd10      	pop	{r4, pc}

080085d0 <memcpy>:
 80085d0:	440a      	add	r2, r1
 80085d2:	4291      	cmp	r1, r2
 80085d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80085d8:	d100      	bne.n	80085dc <memcpy+0xc>
 80085da:	4770      	bx	lr
 80085dc:	b510      	push	{r4, lr}
 80085de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085e2:	4291      	cmp	r1, r2
 80085e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085e8:	d1f9      	bne.n	80085de <memcpy+0xe>
 80085ea:	bd10      	pop	{r4, pc}

080085ec <_Balloc>:
 80085ec:	b570      	push	{r4, r5, r6, lr}
 80085ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085f0:	4604      	mov	r4, r0
 80085f2:	460d      	mov	r5, r1
 80085f4:	b976      	cbnz	r6, 8008614 <_Balloc+0x28>
 80085f6:	2010      	movs	r0, #16
 80085f8:	f7ff ffc2 	bl	8008580 <malloc>
 80085fc:	4602      	mov	r2, r0
 80085fe:	6260      	str	r0, [r4, #36]	; 0x24
 8008600:	b920      	cbnz	r0, 800860c <_Balloc+0x20>
 8008602:	2166      	movs	r1, #102	; 0x66
 8008604:	4b17      	ldr	r3, [pc, #92]	; (8008664 <_Balloc+0x78>)
 8008606:	4818      	ldr	r0, [pc, #96]	; (8008668 <_Balloc+0x7c>)
 8008608:	f000 ff2c 	bl	8009464 <__assert_func>
 800860c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008610:	6006      	str	r6, [r0, #0]
 8008612:	60c6      	str	r6, [r0, #12]
 8008614:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008616:	68f3      	ldr	r3, [r6, #12]
 8008618:	b183      	cbz	r3, 800863c <_Balloc+0x50>
 800861a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008622:	b9b8      	cbnz	r0, 8008654 <_Balloc+0x68>
 8008624:	2101      	movs	r1, #1
 8008626:	fa01 f605 	lsl.w	r6, r1, r5
 800862a:	1d72      	adds	r2, r6, #5
 800862c:	4620      	mov	r0, r4
 800862e:	0092      	lsls	r2, r2, #2
 8008630:	f000 fc94 	bl	8008f5c <_calloc_r>
 8008634:	b160      	cbz	r0, 8008650 <_Balloc+0x64>
 8008636:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800863a:	e00e      	b.n	800865a <_Balloc+0x6e>
 800863c:	2221      	movs	r2, #33	; 0x21
 800863e:	2104      	movs	r1, #4
 8008640:	4620      	mov	r0, r4
 8008642:	f000 fc8b 	bl	8008f5c <_calloc_r>
 8008646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008648:	60f0      	str	r0, [r6, #12]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1e4      	bne.n	800861a <_Balloc+0x2e>
 8008650:	2000      	movs	r0, #0
 8008652:	bd70      	pop	{r4, r5, r6, pc}
 8008654:	6802      	ldr	r2, [r0, #0]
 8008656:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800865a:	2300      	movs	r3, #0
 800865c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008660:	e7f7      	b.n	8008652 <_Balloc+0x66>
 8008662:	bf00      	nop
 8008664:	0801afe6 	.word	0x0801afe6
 8008668:	0801b0e4 	.word	0x0801b0e4

0800866c <_Bfree>:
 800866c:	b570      	push	{r4, r5, r6, lr}
 800866e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008670:	4605      	mov	r5, r0
 8008672:	460c      	mov	r4, r1
 8008674:	b976      	cbnz	r6, 8008694 <_Bfree+0x28>
 8008676:	2010      	movs	r0, #16
 8008678:	f7ff ff82 	bl	8008580 <malloc>
 800867c:	4602      	mov	r2, r0
 800867e:	6268      	str	r0, [r5, #36]	; 0x24
 8008680:	b920      	cbnz	r0, 800868c <_Bfree+0x20>
 8008682:	218a      	movs	r1, #138	; 0x8a
 8008684:	4b08      	ldr	r3, [pc, #32]	; (80086a8 <_Bfree+0x3c>)
 8008686:	4809      	ldr	r0, [pc, #36]	; (80086ac <_Bfree+0x40>)
 8008688:	f000 feec 	bl	8009464 <__assert_func>
 800868c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008690:	6006      	str	r6, [r0, #0]
 8008692:	60c6      	str	r6, [r0, #12]
 8008694:	b13c      	cbz	r4, 80086a6 <_Bfree+0x3a>
 8008696:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008698:	6862      	ldr	r2, [r4, #4]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086a0:	6021      	str	r1, [r4, #0]
 80086a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086a6:	bd70      	pop	{r4, r5, r6, pc}
 80086a8:	0801afe6 	.word	0x0801afe6
 80086ac:	0801b0e4 	.word	0x0801b0e4

080086b0 <__multadd>:
 80086b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b4:	4607      	mov	r7, r0
 80086b6:	460c      	mov	r4, r1
 80086b8:	461e      	mov	r6, r3
 80086ba:	2000      	movs	r0, #0
 80086bc:	690d      	ldr	r5, [r1, #16]
 80086be:	f101 0c14 	add.w	ip, r1, #20
 80086c2:	f8dc 3000 	ldr.w	r3, [ip]
 80086c6:	3001      	adds	r0, #1
 80086c8:	b299      	uxth	r1, r3
 80086ca:	fb02 6101 	mla	r1, r2, r1, r6
 80086ce:	0c1e      	lsrs	r6, r3, #16
 80086d0:	0c0b      	lsrs	r3, r1, #16
 80086d2:	fb02 3306 	mla	r3, r2, r6, r3
 80086d6:	b289      	uxth	r1, r1
 80086d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086dc:	4285      	cmp	r5, r0
 80086de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086e2:	f84c 1b04 	str.w	r1, [ip], #4
 80086e6:	dcec      	bgt.n	80086c2 <__multadd+0x12>
 80086e8:	b30e      	cbz	r6, 800872e <__multadd+0x7e>
 80086ea:	68a3      	ldr	r3, [r4, #8]
 80086ec:	42ab      	cmp	r3, r5
 80086ee:	dc19      	bgt.n	8008724 <__multadd+0x74>
 80086f0:	6861      	ldr	r1, [r4, #4]
 80086f2:	4638      	mov	r0, r7
 80086f4:	3101      	adds	r1, #1
 80086f6:	f7ff ff79 	bl	80085ec <_Balloc>
 80086fa:	4680      	mov	r8, r0
 80086fc:	b928      	cbnz	r0, 800870a <__multadd+0x5a>
 80086fe:	4602      	mov	r2, r0
 8008700:	21b5      	movs	r1, #181	; 0xb5
 8008702:	4b0c      	ldr	r3, [pc, #48]	; (8008734 <__multadd+0x84>)
 8008704:	480c      	ldr	r0, [pc, #48]	; (8008738 <__multadd+0x88>)
 8008706:	f000 fead 	bl	8009464 <__assert_func>
 800870a:	6922      	ldr	r2, [r4, #16]
 800870c:	f104 010c 	add.w	r1, r4, #12
 8008710:	3202      	adds	r2, #2
 8008712:	0092      	lsls	r2, r2, #2
 8008714:	300c      	adds	r0, #12
 8008716:	f7ff ff5b 	bl	80085d0 <memcpy>
 800871a:	4621      	mov	r1, r4
 800871c:	4638      	mov	r0, r7
 800871e:	f7ff ffa5 	bl	800866c <_Bfree>
 8008722:	4644      	mov	r4, r8
 8008724:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008728:	3501      	adds	r5, #1
 800872a:	615e      	str	r6, [r3, #20]
 800872c:	6125      	str	r5, [r4, #16]
 800872e:	4620      	mov	r0, r4
 8008730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008734:	0801b058 	.word	0x0801b058
 8008738:	0801b0e4 	.word	0x0801b0e4

0800873c <__s2b>:
 800873c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008740:	4615      	mov	r5, r2
 8008742:	2209      	movs	r2, #9
 8008744:	461f      	mov	r7, r3
 8008746:	3308      	adds	r3, #8
 8008748:	460c      	mov	r4, r1
 800874a:	fb93 f3f2 	sdiv	r3, r3, r2
 800874e:	4606      	mov	r6, r0
 8008750:	2201      	movs	r2, #1
 8008752:	2100      	movs	r1, #0
 8008754:	429a      	cmp	r2, r3
 8008756:	db09      	blt.n	800876c <__s2b+0x30>
 8008758:	4630      	mov	r0, r6
 800875a:	f7ff ff47 	bl	80085ec <_Balloc>
 800875e:	b940      	cbnz	r0, 8008772 <__s2b+0x36>
 8008760:	4602      	mov	r2, r0
 8008762:	21ce      	movs	r1, #206	; 0xce
 8008764:	4b18      	ldr	r3, [pc, #96]	; (80087c8 <__s2b+0x8c>)
 8008766:	4819      	ldr	r0, [pc, #100]	; (80087cc <__s2b+0x90>)
 8008768:	f000 fe7c 	bl	8009464 <__assert_func>
 800876c:	0052      	lsls	r2, r2, #1
 800876e:	3101      	adds	r1, #1
 8008770:	e7f0      	b.n	8008754 <__s2b+0x18>
 8008772:	9b08      	ldr	r3, [sp, #32]
 8008774:	2d09      	cmp	r5, #9
 8008776:	6143      	str	r3, [r0, #20]
 8008778:	f04f 0301 	mov.w	r3, #1
 800877c:	6103      	str	r3, [r0, #16]
 800877e:	dd16      	ble.n	80087ae <__s2b+0x72>
 8008780:	f104 0909 	add.w	r9, r4, #9
 8008784:	46c8      	mov	r8, r9
 8008786:	442c      	add	r4, r5
 8008788:	f818 3b01 	ldrb.w	r3, [r8], #1
 800878c:	4601      	mov	r1, r0
 800878e:	220a      	movs	r2, #10
 8008790:	4630      	mov	r0, r6
 8008792:	3b30      	subs	r3, #48	; 0x30
 8008794:	f7ff ff8c 	bl	80086b0 <__multadd>
 8008798:	45a0      	cmp	r8, r4
 800879a:	d1f5      	bne.n	8008788 <__s2b+0x4c>
 800879c:	f1a5 0408 	sub.w	r4, r5, #8
 80087a0:	444c      	add	r4, r9
 80087a2:	1b2d      	subs	r5, r5, r4
 80087a4:	1963      	adds	r3, r4, r5
 80087a6:	42bb      	cmp	r3, r7
 80087a8:	db04      	blt.n	80087b4 <__s2b+0x78>
 80087aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ae:	2509      	movs	r5, #9
 80087b0:	340a      	adds	r4, #10
 80087b2:	e7f6      	b.n	80087a2 <__s2b+0x66>
 80087b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80087b8:	4601      	mov	r1, r0
 80087ba:	220a      	movs	r2, #10
 80087bc:	4630      	mov	r0, r6
 80087be:	3b30      	subs	r3, #48	; 0x30
 80087c0:	f7ff ff76 	bl	80086b0 <__multadd>
 80087c4:	e7ee      	b.n	80087a4 <__s2b+0x68>
 80087c6:	bf00      	nop
 80087c8:	0801b058 	.word	0x0801b058
 80087cc:	0801b0e4 	.word	0x0801b0e4

080087d0 <__hi0bits>:
 80087d0:	0c02      	lsrs	r2, r0, #16
 80087d2:	0412      	lsls	r2, r2, #16
 80087d4:	4603      	mov	r3, r0
 80087d6:	b9ca      	cbnz	r2, 800880c <__hi0bits+0x3c>
 80087d8:	0403      	lsls	r3, r0, #16
 80087da:	2010      	movs	r0, #16
 80087dc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80087e0:	bf04      	itt	eq
 80087e2:	021b      	lsleq	r3, r3, #8
 80087e4:	3008      	addeq	r0, #8
 80087e6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80087ea:	bf04      	itt	eq
 80087ec:	011b      	lsleq	r3, r3, #4
 80087ee:	3004      	addeq	r0, #4
 80087f0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80087f4:	bf04      	itt	eq
 80087f6:	009b      	lsleq	r3, r3, #2
 80087f8:	3002      	addeq	r0, #2
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	db05      	blt.n	800880a <__hi0bits+0x3a>
 80087fe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008802:	f100 0001 	add.w	r0, r0, #1
 8008806:	bf08      	it	eq
 8008808:	2020      	moveq	r0, #32
 800880a:	4770      	bx	lr
 800880c:	2000      	movs	r0, #0
 800880e:	e7e5      	b.n	80087dc <__hi0bits+0xc>

08008810 <__lo0bits>:
 8008810:	6803      	ldr	r3, [r0, #0]
 8008812:	4602      	mov	r2, r0
 8008814:	f013 0007 	ands.w	r0, r3, #7
 8008818:	d00b      	beq.n	8008832 <__lo0bits+0x22>
 800881a:	07d9      	lsls	r1, r3, #31
 800881c:	d421      	bmi.n	8008862 <__lo0bits+0x52>
 800881e:	0798      	lsls	r0, r3, #30
 8008820:	bf49      	itett	mi
 8008822:	085b      	lsrmi	r3, r3, #1
 8008824:	089b      	lsrpl	r3, r3, #2
 8008826:	2001      	movmi	r0, #1
 8008828:	6013      	strmi	r3, [r2, #0]
 800882a:	bf5c      	itt	pl
 800882c:	2002      	movpl	r0, #2
 800882e:	6013      	strpl	r3, [r2, #0]
 8008830:	4770      	bx	lr
 8008832:	b299      	uxth	r1, r3
 8008834:	b909      	cbnz	r1, 800883a <__lo0bits+0x2a>
 8008836:	2010      	movs	r0, #16
 8008838:	0c1b      	lsrs	r3, r3, #16
 800883a:	b2d9      	uxtb	r1, r3
 800883c:	b909      	cbnz	r1, 8008842 <__lo0bits+0x32>
 800883e:	3008      	adds	r0, #8
 8008840:	0a1b      	lsrs	r3, r3, #8
 8008842:	0719      	lsls	r1, r3, #28
 8008844:	bf04      	itt	eq
 8008846:	091b      	lsreq	r3, r3, #4
 8008848:	3004      	addeq	r0, #4
 800884a:	0799      	lsls	r1, r3, #30
 800884c:	bf04      	itt	eq
 800884e:	089b      	lsreq	r3, r3, #2
 8008850:	3002      	addeq	r0, #2
 8008852:	07d9      	lsls	r1, r3, #31
 8008854:	d403      	bmi.n	800885e <__lo0bits+0x4e>
 8008856:	085b      	lsrs	r3, r3, #1
 8008858:	f100 0001 	add.w	r0, r0, #1
 800885c:	d003      	beq.n	8008866 <__lo0bits+0x56>
 800885e:	6013      	str	r3, [r2, #0]
 8008860:	4770      	bx	lr
 8008862:	2000      	movs	r0, #0
 8008864:	4770      	bx	lr
 8008866:	2020      	movs	r0, #32
 8008868:	4770      	bx	lr
	...

0800886c <__i2b>:
 800886c:	b510      	push	{r4, lr}
 800886e:	460c      	mov	r4, r1
 8008870:	2101      	movs	r1, #1
 8008872:	f7ff febb 	bl	80085ec <_Balloc>
 8008876:	4602      	mov	r2, r0
 8008878:	b928      	cbnz	r0, 8008886 <__i2b+0x1a>
 800887a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800887e:	4b04      	ldr	r3, [pc, #16]	; (8008890 <__i2b+0x24>)
 8008880:	4804      	ldr	r0, [pc, #16]	; (8008894 <__i2b+0x28>)
 8008882:	f000 fdef 	bl	8009464 <__assert_func>
 8008886:	2301      	movs	r3, #1
 8008888:	6144      	str	r4, [r0, #20]
 800888a:	6103      	str	r3, [r0, #16]
 800888c:	bd10      	pop	{r4, pc}
 800888e:	bf00      	nop
 8008890:	0801b058 	.word	0x0801b058
 8008894:	0801b0e4 	.word	0x0801b0e4

08008898 <__multiply>:
 8008898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889c:	4691      	mov	r9, r2
 800889e:	690a      	ldr	r2, [r1, #16]
 80088a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088a4:	460c      	mov	r4, r1
 80088a6:	429a      	cmp	r2, r3
 80088a8:	bfbe      	ittt	lt
 80088aa:	460b      	movlt	r3, r1
 80088ac:	464c      	movlt	r4, r9
 80088ae:	4699      	movlt	r9, r3
 80088b0:	6927      	ldr	r7, [r4, #16]
 80088b2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80088b6:	68a3      	ldr	r3, [r4, #8]
 80088b8:	6861      	ldr	r1, [r4, #4]
 80088ba:	eb07 060a 	add.w	r6, r7, sl
 80088be:	42b3      	cmp	r3, r6
 80088c0:	b085      	sub	sp, #20
 80088c2:	bfb8      	it	lt
 80088c4:	3101      	addlt	r1, #1
 80088c6:	f7ff fe91 	bl	80085ec <_Balloc>
 80088ca:	b930      	cbnz	r0, 80088da <__multiply+0x42>
 80088cc:	4602      	mov	r2, r0
 80088ce:	f240 115d 	movw	r1, #349	; 0x15d
 80088d2:	4b43      	ldr	r3, [pc, #268]	; (80089e0 <__multiply+0x148>)
 80088d4:	4843      	ldr	r0, [pc, #268]	; (80089e4 <__multiply+0x14c>)
 80088d6:	f000 fdc5 	bl	8009464 <__assert_func>
 80088da:	f100 0514 	add.w	r5, r0, #20
 80088de:	462b      	mov	r3, r5
 80088e0:	2200      	movs	r2, #0
 80088e2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80088e6:	4543      	cmp	r3, r8
 80088e8:	d321      	bcc.n	800892e <__multiply+0x96>
 80088ea:	f104 0314 	add.w	r3, r4, #20
 80088ee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80088f2:	f109 0314 	add.w	r3, r9, #20
 80088f6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80088fa:	9202      	str	r2, [sp, #8]
 80088fc:	1b3a      	subs	r2, r7, r4
 80088fe:	3a15      	subs	r2, #21
 8008900:	f022 0203 	bic.w	r2, r2, #3
 8008904:	3204      	adds	r2, #4
 8008906:	f104 0115 	add.w	r1, r4, #21
 800890a:	428f      	cmp	r7, r1
 800890c:	bf38      	it	cc
 800890e:	2204      	movcc	r2, #4
 8008910:	9201      	str	r2, [sp, #4]
 8008912:	9a02      	ldr	r2, [sp, #8]
 8008914:	9303      	str	r3, [sp, #12]
 8008916:	429a      	cmp	r2, r3
 8008918:	d80c      	bhi.n	8008934 <__multiply+0x9c>
 800891a:	2e00      	cmp	r6, #0
 800891c:	dd03      	ble.n	8008926 <__multiply+0x8e>
 800891e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008922:	2b00      	cmp	r3, #0
 8008924:	d059      	beq.n	80089da <__multiply+0x142>
 8008926:	6106      	str	r6, [r0, #16]
 8008928:	b005      	add	sp, #20
 800892a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892e:	f843 2b04 	str.w	r2, [r3], #4
 8008932:	e7d8      	b.n	80088e6 <__multiply+0x4e>
 8008934:	f8b3 a000 	ldrh.w	sl, [r3]
 8008938:	f1ba 0f00 	cmp.w	sl, #0
 800893c:	d023      	beq.n	8008986 <__multiply+0xee>
 800893e:	46a9      	mov	r9, r5
 8008940:	f04f 0c00 	mov.w	ip, #0
 8008944:	f104 0e14 	add.w	lr, r4, #20
 8008948:	f85e 2b04 	ldr.w	r2, [lr], #4
 800894c:	f8d9 1000 	ldr.w	r1, [r9]
 8008950:	fa1f fb82 	uxth.w	fp, r2
 8008954:	b289      	uxth	r1, r1
 8008956:	fb0a 110b 	mla	r1, sl, fp, r1
 800895a:	4461      	add	r1, ip
 800895c:	f8d9 c000 	ldr.w	ip, [r9]
 8008960:	0c12      	lsrs	r2, r2, #16
 8008962:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008966:	fb0a c202 	mla	r2, sl, r2, ip
 800896a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800896e:	b289      	uxth	r1, r1
 8008970:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008974:	4577      	cmp	r7, lr
 8008976:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800897a:	f849 1b04 	str.w	r1, [r9], #4
 800897e:	d8e3      	bhi.n	8008948 <__multiply+0xb0>
 8008980:	9a01      	ldr	r2, [sp, #4]
 8008982:	f845 c002 	str.w	ip, [r5, r2]
 8008986:	9a03      	ldr	r2, [sp, #12]
 8008988:	3304      	adds	r3, #4
 800898a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800898e:	f1b9 0f00 	cmp.w	r9, #0
 8008992:	d020      	beq.n	80089d6 <__multiply+0x13e>
 8008994:	46ae      	mov	lr, r5
 8008996:	f04f 0a00 	mov.w	sl, #0
 800899a:	6829      	ldr	r1, [r5, #0]
 800899c:	f104 0c14 	add.w	ip, r4, #20
 80089a0:	f8bc b000 	ldrh.w	fp, [ip]
 80089a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80089a8:	b289      	uxth	r1, r1
 80089aa:	fb09 220b 	mla	r2, r9, fp, r2
 80089ae:	4492      	add	sl, r2
 80089b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80089b4:	f84e 1b04 	str.w	r1, [lr], #4
 80089b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80089bc:	f8be 1000 	ldrh.w	r1, [lr]
 80089c0:	0c12      	lsrs	r2, r2, #16
 80089c2:	fb09 1102 	mla	r1, r9, r2, r1
 80089c6:	4567      	cmp	r7, ip
 80089c8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80089cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80089d0:	d8e6      	bhi.n	80089a0 <__multiply+0x108>
 80089d2:	9a01      	ldr	r2, [sp, #4]
 80089d4:	50a9      	str	r1, [r5, r2]
 80089d6:	3504      	adds	r5, #4
 80089d8:	e79b      	b.n	8008912 <__multiply+0x7a>
 80089da:	3e01      	subs	r6, #1
 80089dc:	e79d      	b.n	800891a <__multiply+0x82>
 80089de:	bf00      	nop
 80089e0:	0801b058 	.word	0x0801b058
 80089e4:	0801b0e4 	.word	0x0801b0e4

080089e8 <__pow5mult>:
 80089e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089ec:	4615      	mov	r5, r2
 80089ee:	f012 0203 	ands.w	r2, r2, #3
 80089f2:	4606      	mov	r6, r0
 80089f4:	460f      	mov	r7, r1
 80089f6:	d007      	beq.n	8008a08 <__pow5mult+0x20>
 80089f8:	4c25      	ldr	r4, [pc, #148]	; (8008a90 <__pow5mult+0xa8>)
 80089fa:	3a01      	subs	r2, #1
 80089fc:	2300      	movs	r3, #0
 80089fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a02:	f7ff fe55 	bl	80086b0 <__multadd>
 8008a06:	4607      	mov	r7, r0
 8008a08:	10ad      	asrs	r5, r5, #2
 8008a0a:	d03d      	beq.n	8008a88 <__pow5mult+0xa0>
 8008a0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a0e:	b97c      	cbnz	r4, 8008a30 <__pow5mult+0x48>
 8008a10:	2010      	movs	r0, #16
 8008a12:	f7ff fdb5 	bl	8008580 <malloc>
 8008a16:	4602      	mov	r2, r0
 8008a18:	6270      	str	r0, [r6, #36]	; 0x24
 8008a1a:	b928      	cbnz	r0, 8008a28 <__pow5mult+0x40>
 8008a1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a20:	4b1c      	ldr	r3, [pc, #112]	; (8008a94 <__pow5mult+0xac>)
 8008a22:	481d      	ldr	r0, [pc, #116]	; (8008a98 <__pow5mult+0xb0>)
 8008a24:	f000 fd1e 	bl	8009464 <__assert_func>
 8008a28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a2c:	6004      	str	r4, [r0, #0]
 8008a2e:	60c4      	str	r4, [r0, #12]
 8008a30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a38:	b94c      	cbnz	r4, 8008a4e <__pow5mult+0x66>
 8008a3a:	f240 2171 	movw	r1, #625	; 0x271
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f7ff ff14 	bl	800886c <__i2b>
 8008a44:	2300      	movs	r3, #0
 8008a46:	4604      	mov	r4, r0
 8008a48:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a4c:	6003      	str	r3, [r0, #0]
 8008a4e:	f04f 0900 	mov.w	r9, #0
 8008a52:	07eb      	lsls	r3, r5, #31
 8008a54:	d50a      	bpl.n	8008a6c <__pow5mult+0x84>
 8008a56:	4639      	mov	r1, r7
 8008a58:	4622      	mov	r2, r4
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	f7ff ff1c 	bl	8008898 <__multiply>
 8008a60:	4680      	mov	r8, r0
 8008a62:	4639      	mov	r1, r7
 8008a64:	4630      	mov	r0, r6
 8008a66:	f7ff fe01 	bl	800866c <_Bfree>
 8008a6a:	4647      	mov	r7, r8
 8008a6c:	106d      	asrs	r5, r5, #1
 8008a6e:	d00b      	beq.n	8008a88 <__pow5mult+0xa0>
 8008a70:	6820      	ldr	r0, [r4, #0]
 8008a72:	b938      	cbnz	r0, 8008a84 <__pow5mult+0x9c>
 8008a74:	4622      	mov	r2, r4
 8008a76:	4621      	mov	r1, r4
 8008a78:	4630      	mov	r0, r6
 8008a7a:	f7ff ff0d 	bl	8008898 <__multiply>
 8008a7e:	6020      	str	r0, [r4, #0]
 8008a80:	f8c0 9000 	str.w	r9, [r0]
 8008a84:	4604      	mov	r4, r0
 8008a86:	e7e4      	b.n	8008a52 <__pow5mult+0x6a>
 8008a88:	4638      	mov	r0, r7
 8008a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a8e:	bf00      	nop
 8008a90:	0801b230 	.word	0x0801b230
 8008a94:	0801afe6 	.word	0x0801afe6
 8008a98:	0801b0e4 	.word	0x0801b0e4

08008a9c <__lshift>:
 8008a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa0:	460c      	mov	r4, r1
 8008aa2:	4607      	mov	r7, r0
 8008aa4:	4691      	mov	r9, r2
 8008aa6:	6923      	ldr	r3, [r4, #16]
 8008aa8:	6849      	ldr	r1, [r1, #4]
 8008aaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008aae:	68a3      	ldr	r3, [r4, #8]
 8008ab0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ab4:	f108 0601 	add.w	r6, r8, #1
 8008ab8:	42b3      	cmp	r3, r6
 8008aba:	db0b      	blt.n	8008ad4 <__lshift+0x38>
 8008abc:	4638      	mov	r0, r7
 8008abe:	f7ff fd95 	bl	80085ec <_Balloc>
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	b948      	cbnz	r0, 8008ada <__lshift+0x3e>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008acc:	4b29      	ldr	r3, [pc, #164]	; (8008b74 <__lshift+0xd8>)
 8008ace:	482a      	ldr	r0, [pc, #168]	; (8008b78 <__lshift+0xdc>)
 8008ad0:	f000 fcc8 	bl	8009464 <__assert_func>
 8008ad4:	3101      	adds	r1, #1
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	e7ee      	b.n	8008ab8 <__lshift+0x1c>
 8008ada:	2300      	movs	r3, #0
 8008adc:	f100 0114 	add.w	r1, r0, #20
 8008ae0:	f100 0210 	add.w	r2, r0, #16
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	4553      	cmp	r3, sl
 8008ae8:	db37      	blt.n	8008b5a <__lshift+0xbe>
 8008aea:	6920      	ldr	r0, [r4, #16]
 8008aec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008af0:	f104 0314 	add.w	r3, r4, #20
 8008af4:	f019 091f 	ands.w	r9, r9, #31
 8008af8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008afc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008b00:	d02f      	beq.n	8008b62 <__lshift+0xc6>
 8008b02:	468a      	mov	sl, r1
 8008b04:	f04f 0c00 	mov.w	ip, #0
 8008b08:	f1c9 0e20 	rsb	lr, r9, #32
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	fa02 f209 	lsl.w	r2, r2, r9
 8008b12:	ea42 020c 	orr.w	r2, r2, ip
 8008b16:	f84a 2b04 	str.w	r2, [sl], #4
 8008b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b1e:	4298      	cmp	r0, r3
 8008b20:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008b24:	d8f2      	bhi.n	8008b0c <__lshift+0x70>
 8008b26:	1b03      	subs	r3, r0, r4
 8008b28:	3b15      	subs	r3, #21
 8008b2a:	f023 0303 	bic.w	r3, r3, #3
 8008b2e:	3304      	adds	r3, #4
 8008b30:	f104 0215 	add.w	r2, r4, #21
 8008b34:	4290      	cmp	r0, r2
 8008b36:	bf38      	it	cc
 8008b38:	2304      	movcc	r3, #4
 8008b3a:	f841 c003 	str.w	ip, [r1, r3]
 8008b3e:	f1bc 0f00 	cmp.w	ip, #0
 8008b42:	d001      	beq.n	8008b48 <__lshift+0xac>
 8008b44:	f108 0602 	add.w	r6, r8, #2
 8008b48:	3e01      	subs	r6, #1
 8008b4a:	4638      	mov	r0, r7
 8008b4c:	4621      	mov	r1, r4
 8008b4e:	612e      	str	r6, [r5, #16]
 8008b50:	f7ff fd8c 	bl	800866c <_Bfree>
 8008b54:	4628      	mov	r0, r5
 8008b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b5e:	3301      	adds	r3, #1
 8008b60:	e7c1      	b.n	8008ae6 <__lshift+0x4a>
 8008b62:	3904      	subs	r1, #4
 8008b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b68:	4298      	cmp	r0, r3
 8008b6a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b6e:	d8f9      	bhi.n	8008b64 <__lshift+0xc8>
 8008b70:	e7ea      	b.n	8008b48 <__lshift+0xac>
 8008b72:	bf00      	nop
 8008b74:	0801b058 	.word	0x0801b058
 8008b78:	0801b0e4 	.word	0x0801b0e4

08008b7c <__mcmp>:
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	690a      	ldr	r2, [r1, #16]
 8008b80:	6900      	ldr	r0, [r0, #16]
 8008b82:	b530      	push	{r4, r5, lr}
 8008b84:	1a80      	subs	r0, r0, r2
 8008b86:	d10d      	bne.n	8008ba4 <__mcmp+0x28>
 8008b88:	3314      	adds	r3, #20
 8008b8a:	3114      	adds	r1, #20
 8008b8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008b90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008b94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b9c:	4295      	cmp	r5, r2
 8008b9e:	d002      	beq.n	8008ba6 <__mcmp+0x2a>
 8008ba0:	d304      	bcc.n	8008bac <__mcmp+0x30>
 8008ba2:	2001      	movs	r0, #1
 8008ba4:	bd30      	pop	{r4, r5, pc}
 8008ba6:	42a3      	cmp	r3, r4
 8008ba8:	d3f4      	bcc.n	8008b94 <__mcmp+0x18>
 8008baa:	e7fb      	b.n	8008ba4 <__mcmp+0x28>
 8008bac:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb0:	e7f8      	b.n	8008ba4 <__mcmp+0x28>
	...

08008bb4 <__mdiff>:
 8008bb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb8:	460d      	mov	r5, r1
 8008bba:	4607      	mov	r7, r0
 8008bbc:	4611      	mov	r1, r2
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	4614      	mov	r4, r2
 8008bc2:	f7ff ffdb 	bl	8008b7c <__mcmp>
 8008bc6:	1e06      	subs	r6, r0, #0
 8008bc8:	d111      	bne.n	8008bee <__mdiff+0x3a>
 8008bca:	4631      	mov	r1, r6
 8008bcc:	4638      	mov	r0, r7
 8008bce:	f7ff fd0d 	bl	80085ec <_Balloc>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	b928      	cbnz	r0, 8008be2 <__mdiff+0x2e>
 8008bd6:	f240 2132 	movw	r1, #562	; 0x232
 8008bda:	4b3a      	ldr	r3, [pc, #232]	; (8008cc4 <__mdiff+0x110>)
 8008bdc:	483a      	ldr	r0, [pc, #232]	; (8008cc8 <__mdiff+0x114>)
 8008bde:	f000 fc41 	bl	8009464 <__assert_func>
 8008be2:	2301      	movs	r3, #1
 8008be4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008be8:	4610      	mov	r0, r2
 8008bea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bee:	bfa4      	itt	ge
 8008bf0:	4623      	movge	r3, r4
 8008bf2:	462c      	movge	r4, r5
 8008bf4:	4638      	mov	r0, r7
 8008bf6:	6861      	ldr	r1, [r4, #4]
 8008bf8:	bfa6      	itte	ge
 8008bfa:	461d      	movge	r5, r3
 8008bfc:	2600      	movge	r6, #0
 8008bfe:	2601      	movlt	r6, #1
 8008c00:	f7ff fcf4 	bl	80085ec <_Balloc>
 8008c04:	4602      	mov	r2, r0
 8008c06:	b918      	cbnz	r0, 8008c10 <__mdiff+0x5c>
 8008c08:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c0c:	4b2d      	ldr	r3, [pc, #180]	; (8008cc4 <__mdiff+0x110>)
 8008c0e:	e7e5      	b.n	8008bdc <__mdiff+0x28>
 8008c10:	f102 0814 	add.w	r8, r2, #20
 8008c14:	46c2      	mov	sl, r8
 8008c16:	f04f 0c00 	mov.w	ip, #0
 8008c1a:	6927      	ldr	r7, [r4, #16]
 8008c1c:	60c6      	str	r6, [r0, #12]
 8008c1e:	692e      	ldr	r6, [r5, #16]
 8008c20:	f104 0014 	add.w	r0, r4, #20
 8008c24:	f105 0914 	add.w	r9, r5, #20
 8008c28:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008c2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c30:	3410      	adds	r4, #16
 8008c32:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008c36:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c3a:	fa1f f18b 	uxth.w	r1, fp
 8008c3e:	448c      	add	ip, r1
 8008c40:	b299      	uxth	r1, r3
 8008c42:	0c1b      	lsrs	r3, r3, #16
 8008c44:	ebac 0101 	sub.w	r1, ip, r1
 8008c48:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c4c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008c50:	b289      	uxth	r1, r1
 8008c52:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008c56:	454e      	cmp	r6, r9
 8008c58:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008c5c:	f84a 3b04 	str.w	r3, [sl], #4
 8008c60:	d8e7      	bhi.n	8008c32 <__mdiff+0x7e>
 8008c62:	1b73      	subs	r3, r6, r5
 8008c64:	3b15      	subs	r3, #21
 8008c66:	f023 0303 	bic.w	r3, r3, #3
 8008c6a:	3515      	adds	r5, #21
 8008c6c:	3304      	adds	r3, #4
 8008c6e:	42ae      	cmp	r6, r5
 8008c70:	bf38      	it	cc
 8008c72:	2304      	movcc	r3, #4
 8008c74:	4418      	add	r0, r3
 8008c76:	4443      	add	r3, r8
 8008c78:	461e      	mov	r6, r3
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	4575      	cmp	r5, lr
 8008c7e:	d30e      	bcc.n	8008c9e <__mdiff+0xea>
 8008c80:	f10e 0103 	add.w	r1, lr, #3
 8008c84:	1a09      	subs	r1, r1, r0
 8008c86:	f021 0103 	bic.w	r1, r1, #3
 8008c8a:	3803      	subs	r0, #3
 8008c8c:	4586      	cmp	lr, r0
 8008c8e:	bf38      	it	cc
 8008c90:	2100      	movcc	r1, #0
 8008c92:	4419      	add	r1, r3
 8008c94:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008c98:	b18b      	cbz	r3, 8008cbe <__mdiff+0x10a>
 8008c9a:	6117      	str	r7, [r2, #16]
 8008c9c:	e7a4      	b.n	8008be8 <__mdiff+0x34>
 8008c9e:	f855 8b04 	ldr.w	r8, [r5], #4
 8008ca2:	fa1f f188 	uxth.w	r1, r8
 8008ca6:	4461      	add	r1, ip
 8008ca8:	140c      	asrs	r4, r1, #16
 8008caa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008cae:	b289      	uxth	r1, r1
 8008cb0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008cb4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008cb8:	f846 1b04 	str.w	r1, [r6], #4
 8008cbc:	e7de      	b.n	8008c7c <__mdiff+0xc8>
 8008cbe:	3f01      	subs	r7, #1
 8008cc0:	e7e8      	b.n	8008c94 <__mdiff+0xe0>
 8008cc2:	bf00      	nop
 8008cc4:	0801b058 	.word	0x0801b058
 8008cc8:	0801b0e4 	.word	0x0801b0e4

08008ccc <__ulp>:
 8008ccc:	4b11      	ldr	r3, [pc, #68]	; (8008d14 <__ulp+0x48>)
 8008cce:	400b      	ands	r3, r1
 8008cd0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	dd02      	ble.n	8008cde <__ulp+0x12>
 8008cd8:	2000      	movs	r0, #0
 8008cda:	4619      	mov	r1, r3
 8008cdc:	4770      	bx	lr
 8008cde:	425b      	negs	r3, r3
 8008ce0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008ce4:	f04f 0000 	mov.w	r0, #0
 8008ce8:	f04f 0100 	mov.w	r1, #0
 8008cec:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008cf0:	da04      	bge.n	8008cfc <__ulp+0x30>
 8008cf2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008cf6:	fa43 f102 	asr.w	r1, r3, r2
 8008cfa:	4770      	bx	lr
 8008cfc:	f1a2 0314 	sub.w	r3, r2, #20
 8008d00:	2b1e      	cmp	r3, #30
 8008d02:	bfd6      	itet	le
 8008d04:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008d08:	2301      	movgt	r3, #1
 8008d0a:	fa22 f303 	lsrle.w	r3, r2, r3
 8008d0e:	4618      	mov	r0, r3
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	7ff00000 	.word	0x7ff00000

08008d18 <__b2d>:
 8008d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d1c:	6907      	ldr	r7, [r0, #16]
 8008d1e:	f100 0914 	add.w	r9, r0, #20
 8008d22:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008d26:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008d2a:	f1a7 0804 	sub.w	r8, r7, #4
 8008d2e:	4630      	mov	r0, r6
 8008d30:	f7ff fd4e 	bl	80087d0 <__hi0bits>
 8008d34:	f1c0 0320 	rsb	r3, r0, #32
 8008d38:	280a      	cmp	r0, #10
 8008d3a:	600b      	str	r3, [r1, #0]
 8008d3c:	491f      	ldr	r1, [pc, #124]	; (8008dbc <__b2d+0xa4>)
 8008d3e:	dc17      	bgt.n	8008d70 <__b2d+0x58>
 8008d40:	45c1      	cmp	r9, r8
 8008d42:	bf28      	it	cs
 8008d44:	2200      	movcs	r2, #0
 8008d46:	f1c0 0c0b 	rsb	ip, r0, #11
 8008d4a:	fa26 f30c 	lsr.w	r3, r6, ip
 8008d4e:	bf38      	it	cc
 8008d50:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008d54:	ea43 0501 	orr.w	r5, r3, r1
 8008d58:	f100 0315 	add.w	r3, r0, #21
 8008d5c:	fa06 f303 	lsl.w	r3, r6, r3
 8008d60:	fa22 f20c 	lsr.w	r2, r2, ip
 8008d64:	ea43 0402 	orr.w	r4, r3, r2
 8008d68:	4620      	mov	r0, r4
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d70:	45c1      	cmp	r9, r8
 8008d72:	bf2e      	itee	cs
 8008d74:	2200      	movcs	r2, #0
 8008d76:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008d7a:	f1a7 0808 	subcc.w	r8, r7, #8
 8008d7e:	f1b0 030b 	subs.w	r3, r0, #11
 8008d82:	d016      	beq.n	8008db2 <__b2d+0x9a>
 8008d84:	f1c3 0720 	rsb	r7, r3, #32
 8008d88:	fa22 f107 	lsr.w	r1, r2, r7
 8008d8c:	45c8      	cmp	r8, r9
 8008d8e:	fa06 f603 	lsl.w	r6, r6, r3
 8008d92:	ea46 0601 	orr.w	r6, r6, r1
 8008d96:	bf94      	ite	ls
 8008d98:	2100      	movls	r1, #0
 8008d9a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008d9e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008da2:	fa02 f003 	lsl.w	r0, r2, r3
 8008da6:	40f9      	lsrs	r1, r7
 8008da8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008dac:	ea40 0401 	orr.w	r4, r0, r1
 8008db0:	e7da      	b.n	8008d68 <__b2d+0x50>
 8008db2:	4614      	mov	r4, r2
 8008db4:	ea46 0501 	orr.w	r5, r6, r1
 8008db8:	e7d6      	b.n	8008d68 <__b2d+0x50>
 8008dba:	bf00      	nop
 8008dbc:	3ff00000 	.word	0x3ff00000

08008dc0 <__d2b>:
 8008dc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008dca:	4690      	mov	r8, r2
 8008dcc:	461d      	mov	r5, r3
 8008dce:	f7ff fc0d 	bl	80085ec <_Balloc>
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	b930      	cbnz	r0, 8008de4 <__d2b+0x24>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	f240 310a 	movw	r1, #778	; 0x30a
 8008ddc:	4b24      	ldr	r3, [pc, #144]	; (8008e70 <__d2b+0xb0>)
 8008dde:	4825      	ldr	r0, [pc, #148]	; (8008e74 <__d2b+0xb4>)
 8008de0:	f000 fb40 	bl	8009464 <__assert_func>
 8008de4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008de8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008dec:	bb2d      	cbnz	r5, 8008e3a <__d2b+0x7a>
 8008dee:	9301      	str	r3, [sp, #4]
 8008df0:	f1b8 0300 	subs.w	r3, r8, #0
 8008df4:	d026      	beq.n	8008e44 <__d2b+0x84>
 8008df6:	4668      	mov	r0, sp
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	f7ff fd09 	bl	8008810 <__lo0bits>
 8008dfe:	9900      	ldr	r1, [sp, #0]
 8008e00:	b1f0      	cbz	r0, 8008e40 <__d2b+0x80>
 8008e02:	9a01      	ldr	r2, [sp, #4]
 8008e04:	f1c0 0320 	rsb	r3, r0, #32
 8008e08:	fa02 f303 	lsl.w	r3, r2, r3
 8008e0c:	430b      	orrs	r3, r1
 8008e0e:	40c2      	lsrs	r2, r0
 8008e10:	6163      	str	r3, [r4, #20]
 8008e12:	9201      	str	r2, [sp, #4]
 8008e14:	9b01      	ldr	r3, [sp, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	bf14      	ite	ne
 8008e1a:	2102      	movne	r1, #2
 8008e1c:	2101      	moveq	r1, #1
 8008e1e:	61a3      	str	r3, [r4, #24]
 8008e20:	6121      	str	r1, [r4, #16]
 8008e22:	b1c5      	cbz	r5, 8008e56 <__d2b+0x96>
 8008e24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e28:	4405      	add	r5, r0
 8008e2a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e2e:	603d      	str	r5, [r7, #0]
 8008e30:	6030      	str	r0, [r6, #0]
 8008e32:	4620      	mov	r0, r4
 8008e34:	b002      	add	sp, #8
 8008e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e3e:	e7d6      	b.n	8008dee <__d2b+0x2e>
 8008e40:	6161      	str	r1, [r4, #20]
 8008e42:	e7e7      	b.n	8008e14 <__d2b+0x54>
 8008e44:	a801      	add	r0, sp, #4
 8008e46:	f7ff fce3 	bl	8008810 <__lo0bits>
 8008e4a:	2101      	movs	r1, #1
 8008e4c:	9b01      	ldr	r3, [sp, #4]
 8008e4e:	6121      	str	r1, [r4, #16]
 8008e50:	6163      	str	r3, [r4, #20]
 8008e52:	3020      	adds	r0, #32
 8008e54:	e7e5      	b.n	8008e22 <__d2b+0x62>
 8008e56:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008e5a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e5e:	6038      	str	r0, [r7, #0]
 8008e60:	6918      	ldr	r0, [r3, #16]
 8008e62:	f7ff fcb5 	bl	80087d0 <__hi0bits>
 8008e66:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008e6a:	6031      	str	r1, [r6, #0]
 8008e6c:	e7e1      	b.n	8008e32 <__d2b+0x72>
 8008e6e:	bf00      	nop
 8008e70:	0801b058 	.word	0x0801b058
 8008e74:	0801b0e4 	.word	0x0801b0e4

08008e78 <__ratio>:
 8008e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e7c:	4688      	mov	r8, r1
 8008e7e:	4669      	mov	r1, sp
 8008e80:	4681      	mov	r9, r0
 8008e82:	f7ff ff49 	bl	8008d18 <__b2d>
 8008e86:	460f      	mov	r7, r1
 8008e88:	4604      	mov	r4, r0
 8008e8a:	460d      	mov	r5, r1
 8008e8c:	4640      	mov	r0, r8
 8008e8e:	a901      	add	r1, sp, #4
 8008e90:	f7ff ff42 	bl	8008d18 <__b2d>
 8008e94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e98:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008e9c:	468b      	mov	fp, r1
 8008e9e:	eba3 0c02 	sub.w	ip, r3, r2
 8008ea2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008ea6:	1a9b      	subs	r3, r3, r2
 8008ea8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	bfd5      	itete	le
 8008eb0:	460a      	movle	r2, r1
 8008eb2:	462a      	movgt	r2, r5
 8008eb4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008eb8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008ebc:	bfd8      	it	le
 8008ebe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008ec2:	465b      	mov	r3, fp
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	4639      	mov	r1, r7
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f7f7 fce3 	bl	8000894 <__aeabi_ddiv>
 8008ece:	b003      	add	sp, #12
 8008ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ed4 <__copybits>:
 8008ed4:	3901      	subs	r1, #1
 8008ed6:	b570      	push	{r4, r5, r6, lr}
 8008ed8:	1149      	asrs	r1, r1, #5
 8008eda:	6914      	ldr	r4, [r2, #16]
 8008edc:	3101      	adds	r1, #1
 8008ede:	f102 0314 	add.w	r3, r2, #20
 8008ee2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ee6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008eea:	1f05      	subs	r5, r0, #4
 8008eec:	42a3      	cmp	r3, r4
 8008eee:	d30c      	bcc.n	8008f0a <__copybits+0x36>
 8008ef0:	1aa3      	subs	r3, r4, r2
 8008ef2:	3b11      	subs	r3, #17
 8008ef4:	f023 0303 	bic.w	r3, r3, #3
 8008ef8:	3211      	adds	r2, #17
 8008efa:	42a2      	cmp	r2, r4
 8008efc:	bf88      	it	hi
 8008efe:	2300      	movhi	r3, #0
 8008f00:	4418      	add	r0, r3
 8008f02:	2300      	movs	r3, #0
 8008f04:	4288      	cmp	r0, r1
 8008f06:	d305      	bcc.n	8008f14 <__copybits+0x40>
 8008f08:	bd70      	pop	{r4, r5, r6, pc}
 8008f0a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008f0e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008f12:	e7eb      	b.n	8008eec <__copybits+0x18>
 8008f14:	f840 3b04 	str.w	r3, [r0], #4
 8008f18:	e7f4      	b.n	8008f04 <__copybits+0x30>

08008f1a <__any_on>:
 8008f1a:	f100 0214 	add.w	r2, r0, #20
 8008f1e:	6900      	ldr	r0, [r0, #16]
 8008f20:	114b      	asrs	r3, r1, #5
 8008f22:	4298      	cmp	r0, r3
 8008f24:	b510      	push	{r4, lr}
 8008f26:	db11      	blt.n	8008f4c <__any_on+0x32>
 8008f28:	dd0a      	ble.n	8008f40 <__any_on+0x26>
 8008f2a:	f011 011f 	ands.w	r1, r1, #31
 8008f2e:	d007      	beq.n	8008f40 <__any_on+0x26>
 8008f30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008f34:	fa24 f001 	lsr.w	r0, r4, r1
 8008f38:	fa00 f101 	lsl.w	r1, r0, r1
 8008f3c:	428c      	cmp	r4, r1
 8008f3e:	d10b      	bne.n	8008f58 <__any_on+0x3e>
 8008f40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d803      	bhi.n	8008f50 <__any_on+0x36>
 8008f48:	2000      	movs	r0, #0
 8008f4a:	bd10      	pop	{r4, pc}
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	e7f7      	b.n	8008f40 <__any_on+0x26>
 8008f50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f54:	2900      	cmp	r1, #0
 8008f56:	d0f5      	beq.n	8008f44 <__any_on+0x2a>
 8008f58:	2001      	movs	r0, #1
 8008f5a:	e7f6      	b.n	8008f4a <__any_on+0x30>

08008f5c <_calloc_r>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	fba1 5402 	umull	r5, r4, r1, r2
 8008f62:	b934      	cbnz	r4, 8008f72 <_calloc_r+0x16>
 8008f64:	4629      	mov	r1, r5
 8008f66:	f000 f875 	bl	8009054 <_malloc_r>
 8008f6a:	4606      	mov	r6, r0
 8008f6c:	b928      	cbnz	r0, 8008f7a <_calloc_r+0x1e>
 8008f6e:	4630      	mov	r0, r6
 8008f70:	bd70      	pop	{r4, r5, r6, pc}
 8008f72:	220c      	movs	r2, #12
 8008f74:	2600      	movs	r6, #0
 8008f76:	6002      	str	r2, [r0, #0]
 8008f78:	e7f9      	b.n	8008f6e <_calloc_r+0x12>
 8008f7a:	462a      	mov	r2, r5
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	f7fc fbf3 	bl	8005768 <memset>
 8008f82:	e7f4      	b.n	8008f6e <_calloc_r+0x12>

08008f84 <_free_r>:
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	4605      	mov	r5, r0
 8008f88:	2900      	cmp	r1, #0
 8008f8a:	d040      	beq.n	800900e <_free_r+0x8a>
 8008f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f90:	1f0c      	subs	r4, r1, #4
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	bfb8      	it	lt
 8008f96:	18e4      	addlt	r4, r4, r3
 8008f98:	f000 fa94 	bl	80094c4 <__malloc_lock>
 8008f9c:	4a1c      	ldr	r2, [pc, #112]	; (8009010 <_free_r+0x8c>)
 8008f9e:	6813      	ldr	r3, [r2, #0]
 8008fa0:	b933      	cbnz	r3, 8008fb0 <_free_r+0x2c>
 8008fa2:	6063      	str	r3, [r4, #4]
 8008fa4:	6014      	str	r4, [r2, #0]
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fac:	f000 ba90 	b.w	80094d0 <__malloc_unlock>
 8008fb0:	42a3      	cmp	r3, r4
 8008fb2:	d908      	bls.n	8008fc6 <_free_r+0x42>
 8008fb4:	6820      	ldr	r0, [r4, #0]
 8008fb6:	1821      	adds	r1, r4, r0
 8008fb8:	428b      	cmp	r3, r1
 8008fba:	bf01      	itttt	eq
 8008fbc:	6819      	ldreq	r1, [r3, #0]
 8008fbe:	685b      	ldreq	r3, [r3, #4]
 8008fc0:	1809      	addeq	r1, r1, r0
 8008fc2:	6021      	streq	r1, [r4, #0]
 8008fc4:	e7ed      	b.n	8008fa2 <_free_r+0x1e>
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	b10b      	cbz	r3, 8008fd0 <_free_r+0x4c>
 8008fcc:	42a3      	cmp	r3, r4
 8008fce:	d9fa      	bls.n	8008fc6 <_free_r+0x42>
 8008fd0:	6811      	ldr	r1, [r2, #0]
 8008fd2:	1850      	adds	r0, r2, r1
 8008fd4:	42a0      	cmp	r0, r4
 8008fd6:	d10b      	bne.n	8008ff0 <_free_r+0x6c>
 8008fd8:	6820      	ldr	r0, [r4, #0]
 8008fda:	4401      	add	r1, r0
 8008fdc:	1850      	adds	r0, r2, r1
 8008fde:	4283      	cmp	r3, r0
 8008fe0:	6011      	str	r1, [r2, #0]
 8008fe2:	d1e0      	bne.n	8008fa6 <_free_r+0x22>
 8008fe4:	6818      	ldr	r0, [r3, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	4401      	add	r1, r0
 8008fea:	6011      	str	r1, [r2, #0]
 8008fec:	6053      	str	r3, [r2, #4]
 8008fee:	e7da      	b.n	8008fa6 <_free_r+0x22>
 8008ff0:	d902      	bls.n	8008ff8 <_free_r+0x74>
 8008ff2:	230c      	movs	r3, #12
 8008ff4:	602b      	str	r3, [r5, #0]
 8008ff6:	e7d6      	b.n	8008fa6 <_free_r+0x22>
 8008ff8:	6820      	ldr	r0, [r4, #0]
 8008ffa:	1821      	adds	r1, r4, r0
 8008ffc:	428b      	cmp	r3, r1
 8008ffe:	bf01      	itttt	eq
 8009000:	6819      	ldreq	r1, [r3, #0]
 8009002:	685b      	ldreq	r3, [r3, #4]
 8009004:	1809      	addeq	r1, r1, r0
 8009006:	6021      	streq	r1, [r4, #0]
 8009008:	6063      	str	r3, [r4, #4]
 800900a:	6054      	str	r4, [r2, #4]
 800900c:	e7cb      	b.n	8008fa6 <_free_r+0x22>
 800900e:	bd38      	pop	{r3, r4, r5, pc}
 8009010:	200014c8 	.word	0x200014c8

08009014 <sbrk_aligned>:
 8009014:	b570      	push	{r4, r5, r6, lr}
 8009016:	4e0e      	ldr	r6, [pc, #56]	; (8009050 <sbrk_aligned+0x3c>)
 8009018:	460c      	mov	r4, r1
 800901a:	6831      	ldr	r1, [r6, #0]
 800901c:	4605      	mov	r5, r0
 800901e:	b911      	cbnz	r1, 8009026 <sbrk_aligned+0x12>
 8009020:	f000 f9ee 	bl	8009400 <_sbrk_r>
 8009024:	6030      	str	r0, [r6, #0]
 8009026:	4621      	mov	r1, r4
 8009028:	4628      	mov	r0, r5
 800902a:	f000 f9e9 	bl	8009400 <_sbrk_r>
 800902e:	1c43      	adds	r3, r0, #1
 8009030:	d00a      	beq.n	8009048 <sbrk_aligned+0x34>
 8009032:	1cc4      	adds	r4, r0, #3
 8009034:	f024 0403 	bic.w	r4, r4, #3
 8009038:	42a0      	cmp	r0, r4
 800903a:	d007      	beq.n	800904c <sbrk_aligned+0x38>
 800903c:	1a21      	subs	r1, r4, r0
 800903e:	4628      	mov	r0, r5
 8009040:	f000 f9de 	bl	8009400 <_sbrk_r>
 8009044:	3001      	adds	r0, #1
 8009046:	d101      	bne.n	800904c <sbrk_aligned+0x38>
 8009048:	f04f 34ff 	mov.w	r4, #4294967295
 800904c:	4620      	mov	r0, r4
 800904e:	bd70      	pop	{r4, r5, r6, pc}
 8009050:	200014cc 	.word	0x200014cc

08009054 <_malloc_r>:
 8009054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009058:	1ccd      	adds	r5, r1, #3
 800905a:	f025 0503 	bic.w	r5, r5, #3
 800905e:	3508      	adds	r5, #8
 8009060:	2d0c      	cmp	r5, #12
 8009062:	bf38      	it	cc
 8009064:	250c      	movcc	r5, #12
 8009066:	2d00      	cmp	r5, #0
 8009068:	4607      	mov	r7, r0
 800906a:	db01      	blt.n	8009070 <_malloc_r+0x1c>
 800906c:	42a9      	cmp	r1, r5
 800906e:	d905      	bls.n	800907c <_malloc_r+0x28>
 8009070:	230c      	movs	r3, #12
 8009072:	2600      	movs	r6, #0
 8009074:	603b      	str	r3, [r7, #0]
 8009076:	4630      	mov	r0, r6
 8009078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800907c:	4e2e      	ldr	r6, [pc, #184]	; (8009138 <_malloc_r+0xe4>)
 800907e:	f000 fa21 	bl	80094c4 <__malloc_lock>
 8009082:	6833      	ldr	r3, [r6, #0]
 8009084:	461c      	mov	r4, r3
 8009086:	bb34      	cbnz	r4, 80090d6 <_malloc_r+0x82>
 8009088:	4629      	mov	r1, r5
 800908a:	4638      	mov	r0, r7
 800908c:	f7ff ffc2 	bl	8009014 <sbrk_aligned>
 8009090:	1c43      	adds	r3, r0, #1
 8009092:	4604      	mov	r4, r0
 8009094:	d14d      	bne.n	8009132 <_malloc_r+0xde>
 8009096:	6834      	ldr	r4, [r6, #0]
 8009098:	4626      	mov	r6, r4
 800909a:	2e00      	cmp	r6, #0
 800909c:	d140      	bne.n	8009120 <_malloc_r+0xcc>
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	4631      	mov	r1, r6
 80090a2:	4638      	mov	r0, r7
 80090a4:	eb04 0803 	add.w	r8, r4, r3
 80090a8:	f000 f9aa 	bl	8009400 <_sbrk_r>
 80090ac:	4580      	cmp	r8, r0
 80090ae:	d13a      	bne.n	8009126 <_malloc_r+0xd2>
 80090b0:	6821      	ldr	r1, [r4, #0]
 80090b2:	3503      	adds	r5, #3
 80090b4:	1a6d      	subs	r5, r5, r1
 80090b6:	f025 0503 	bic.w	r5, r5, #3
 80090ba:	3508      	adds	r5, #8
 80090bc:	2d0c      	cmp	r5, #12
 80090be:	bf38      	it	cc
 80090c0:	250c      	movcc	r5, #12
 80090c2:	4638      	mov	r0, r7
 80090c4:	4629      	mov	r1, r5
 80090c6:	f7ff ffa5 	bl	8009014 <sbrk_aligned>
 80090ca:	3001      	adds	r0, #1
 80090cc:	d02b      	beq.n	8009126 <_malloc_r+0xd2>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	442b      	add	r3, r5
 80090d2:	6023      	str	r3, [r4, #0]
 80090d4:	e00e      	b.n	80090f4 <_malloc_r+0xa0>
 80090d6:	6822      	ldr	r2, [r4, #0]
 80090d8:	1b52      	subs	r2, r2, r5
 80090da:	d41e      	bmi.n	800911a <_malloc_r+0xc6>
 80090dc:	2a0b      	cmp	r2, #11
 80090de:	d916      	bls.n	800910e <_malloc_r+0xba>
 80090e0:	1961      	adds	r1, r4, r5
 80090e2:	42a3      	cmp	r3, r4
 80090e4:	6025      	str	r5, [r4, #0]
 80090e6:	bf18      	it	ne
 80090e8:	6059      	strne	r1, [r3, #4]
 80090ea:	6863      	ldr	r3, [r4, #4]
 80090ec:	bf08      	it	eq
 80090ee:	6031      	streq	r1, [r6, #0]
 80090f0:	5162      	str	r2, [r4, r5]
 80090f2:	604b      	str	r3, [r1, #4]
 80090f4:	4638      	mov	r0, r7
 80090f6:	f104 060b 	add.w	r6, r4, #11
 80090fa:	f000 f9e9 	bl	80094d0 <__malloc_unlock>
 80090fe:	f026 0607 	bic.w	r6, r6, #7
 8009102:	1d23      	adds	r3, r4, #4
 8009104:	1af2      	subs	r2, r6, r3
 8009106:	d0b6      	beq.n	8009076 <_malloc_r+0x22>
 8009108:	1b9b      	subs	r3, r3, r6
 800910a:	50a3      	str	r3, [r4, r2]
 800910c:	e7b3      	b.n	8009076 <_malloc_r+0x22>
 800910e:	6862      	ldr	r2, [r4, #4]
 8009110:	42a3      	cmp	r3, r4
 8009112:	bf0c      	ite	eq
 8009114:	6032      	streq	r2, [r6, #0]
 8009116:	605a      	strne	r2, [r3, #4]
 8009118:	e7ec      	b.n	80090f4 <_malloc_r+0xa0>
 800911a:	4623      	mov	r3, r4
 800911c:	6864      	ldr	r4, [r4, #4]
 800911e:	e7b2      	b.n	8009086 <_malloc_r+0x32>
 8009120:	4634      	mov	r4, r6
 8009122:	6876      	ldr	r6, [r6, #4]
 8009124:	e7b9      	b.n	800909a <_malloc_r+0x46>
 8009126:	230c      	movs	r3, #12
 8009128:	4638      	mov	r0, r7
 800912a:	603b      	str	r3, [r7, #0]
 800912c:	f000 f9d0 	bl	80094d0 <__malloc_unlock>
 8009130:	e7a1      	b.n	8009076 <_malloc_r+0x22>
 8009132:	6025      	str	r5, [r4, #0]
 8009134:	e7de      	b.n	80090f4 <_malloc_r+0xa0>
 8009136:	bf00      	nop
 8009138:	200014c8 	.word	0x200014c8

0800913c <__ssputs_r>:
 800913c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009140:	688e      	ldr	r6, [r1, #8]
 8009142:	4682      	mov	sl, r0
 8009144:	429e      	cmp	r6, r3
 8009146:	460c      	mov	r4, r1
 8009148:	4690      	mov	r8, r2
 800914a:	461f      	mov	r7, r3
 800914c:	d838      	bhi.n	80091c0 <__ssputs_r+0x84>
 800914e:	898a      	ldrh	r2, [r1, #12]
 8009150:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009154:	d032      	beq.n	80091bc <__ssputs_r+0x80>
 8009156:	6825      	ldr	r5, [r4, #0]
 8009158:	6909      	ldr	r1, [r1, #16]
 800915a:	3301      	adds	r3, #1
 800915c:	eba5 0901 	sub.w	r9, r5, r1
 8009160:	6965      	ldr	r5, [r4, #20]
 8009162:	444b      	add	r3, r9
 8009164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009168:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800916c:	106d      	asrs	r5, r5, #1
 800916e:	429d      	cmp	r5, r3
 8009170:	bf38      	it	cc
 8009172:	461d      	movcc	r5, r3
 8009174:	0553      	lsls	r3, r2, #21
 8009176:	d531      	bpl.n	80091dc <__ssputs_r+0xa0>
 8009178:	4629      	mov	r1, r5
 800917a:	f7ff ff6b 	bl	8009054 <_malloc_r>
 800917e:	4606      	mov	r6, r0
 8009180:	b950      	cbnz	r0, 8009198 <__ssputs_r+0x5c>
 8009182:	230c      	movs	r3, #12
 8009184:	f04f 30ff 	mov.w	r0, #4294967295
 8009188:	f8ca 3000 	str.w	r3, [sl]
 800918c:	89a3      	ldrh	r3, [r4, #12]
 800918e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009192:	81a3      	strh	r3, [r4, #12]
 8009194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009198:	464a      	mov	r2, r9
 800919a:	6921      	ldr	r1, [r4, #16]
 800919c:	f7ff fa18 	bl	80085d0 <memcpy>
 80091a0:	89a3      	ldrh	r3, [r4, #12]
 80091a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091aa:	81a3      	strh	r3, [r4, #12]
 80091ac:	6126      	str	r6, [r4, #16]
 80091ae:	444e      	add	r6, r9
 80091b0:	6026      	str	r6, [r4, #0]
 80091b2:	463e      	mov	r6, r7
 80091b4:	6165      	str	r5, [r4, #20]
 80091b6:	eba5 0509 	sub.w	r5, r5, r9
 80091ba:	60a5      	str	r5, [r4, #8]
 80091bc:	42be      	cmp	r6, r7
 80091be:	d900      	bls.n	80091c2 <__ssputs_r+0x86>
 80091c0:	463e      	mov	r6, r7
 80091c2:	4632      	mov	r2, r6
 80091c4:	4641      	mov	r1, r8
 80091c6:	6820      	ldr	r0, [r4, #0]
 80091c8:	f7fc fab4 	bl	8005734 <memmove>
 80091cc:	68a3      	ldr	r3, [r4, #8]
 80091ce:	2000      	movs	r0, #0
 80091d0:	1b9b      	subs	r3, r3, r6
 80091d2:	60a3      	str	r3, [r4, #8]
 80091d4:	6823      	ldr	r3, [r4, #0]
 80091d6:	4433      	add	r3, r6
 80091d8:	6023      	str	r3, [r4, #0]
 80091da:	e7db      	b.n	8009194 <__ssputs_r+0x58>
 80091dc:	462a      	mov	r2, r5
 80091de:	f000 f97d 	bl	80094dc <_realloc_r>
 80091e2:	4606      	mov	r6, r0
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d1e1      	bne.n	80091ac <__ssputs_r+0x70>
 80091e8:	4650      	mov	r0, sl
 80091ea:	6921      	ldr	r1, [r4, #16]
 80091ec:	f7ff feca 	bl	8008f84 <_free_r>
 80091f0:	e7c7      	b.n	8009182 <__ssputs_r+0x46>
	...

080091f4 <_svfiprintf_r>:
 80091f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f8:	4698      	mov	r8, r3
 80091fa:	898b      	ldrh	r3, [r1, #12]
 80091fc:	4607      	mov	r7, r0
 80091fe:	061b      	lsls	r3, r3, #24
 8009200:	460d      	mov	r5, r1
 8009202:	4614      	mov	r4, r2
 8009204:	b09d      	sub	sp, #116	; 0x74
 8009206:	d50e      	bpl.n	8009226 <_svfiprintf_r+0x32>
 8009208:	690b      	ldr	r3, [r1, #16]
 800920a:	b963      	cbnz	r3, 8009226 <_svfiprintf_r+0x32>
 800920c:	2140      	movs	r1, #64	; 0x40
 800920e:	f7ff ff21 	bl	8009054 <_malloc_r>
 8009212:	6028      	str	r0, [r5, #0]
 8009214:	6128      	str	r0, [r5, #16]
 8009216:	b920      	cbnz	r0, 8009222 <_svfiprintf_r+0x2e>
 8009218:	230c      	movs	r3, #12
 800921a:	603b      	str	r3, [r7, #0]
 800921c:	f04f 30ff 	mov.w	r0, #4294967295
 8009220:	e0d1      	b.n	80093c6 <_svfiprintf_r+0x1d2>
 8009222:	2340      	movs	r3, #64	; 0x40
 8009224:	616b      	str	r3, [r5, #20]
 8009226:	2300      	movs	r3, #0
 8009228:	9309      	str	r3, [sp, #36]	; 0x24
 800922a:	2320      	movs	r3, #32
 800922c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009230:	2330      	movs	r3, #48	; 0x30
 8009232:	f04f 0901 	mov.w	r9, #1
 8009236:	f8cd 800c 	str.w	r8, [sp, #12]
 800923a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80093e0 <_svfiprintf_r+0x1ec>
 800923e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009242:	4623      	mov	r3, r4
 8009244:	469a      	mov	sl, r3
 8009246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800924a:	b10a      	cbz	r2, 8009250 <_svfiprintf_r+0x5c>
 800924c:	2a25      	cmp	r2, #37	; 0x25
 800924e:	d1f9      	bne.n	8009244 <_svfiprintf_r+0x50>
 8009250:	ebba 0b04 	subs.w	fp, sl, r4
 8009254:	d00b      	beq.n	800926e <_svfiprintf_r+0x7a>
 8009256:	465b      	mov	r3, fp
 8009258:	4622      	mov	r2, r4
 800925a:	4629      	mov	r1, r5
 800925c:	4638      	mov	r0, r7
 800925e:	f7ff ff6d 	bl	800913c <__ssputs_r>
 8009262:	3001      	adds	r0, #1
 8009264:	f000 80aa 	beq.w	80093bc <_svfiprintf_r+0x1c8>
 8009268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800926a:	445a      	add	r2, fp
 800926c:	9209      	str	r2, [sp, #36]	; 0x24
 800926e:	f89a 3000 	ldrb.w	r3, [sl]
 8009272:	2b00      	cmp	r3, #0
 8009274:	f000 80a2 	beq.w	80093bc <_svfiprintf_r+0x1c8>
 8009278:	2300      	movs	r3, #0
 800927a:	f04f 32ff 	mov.w	r2, #4294967295
 800927e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009282:	f10a 0a01 	add.w	sl, sl, #1
 8009286:	9304      	str	r3, [sp, #16]
 8009288:	9307      	str	r3, [sp, #28]
 800928a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800928e:	931a      	str	r3, [sp, #104]	; 0x68
 8009290:	4654      	mov	r4, sl
 8009292:	2205      	movs	r2, #5
 8009294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009298:	4851      	ldr	r0, [pc, #324]	; (80093e0 <_svfiprintf_r+0x1ec>)
 800929a:	f7ff f98b 	bl	80085b4 <memchr>
 800929e:	9a04      	ldr	r2, [sp, #16]
 80092a0:	b9d8      	cbnz	r0, 80092da <_svfiprintf_r+0xe6>
 80092a2:	06d0      	lsls	r0, r2, #27
 80092a4:	bf44      	itt	mi
 80092a6:	2320      	movmi	r3, #32
 80092a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ac:	0711      	lsls	r1, r2, #28
 80092ae:	bf44      	itt	mi
 80092b0:	232b      	movmi	r3, #43	; 0x2b
 80092b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092b6:	f89a 3000 	ldrb.w	r3, [sl]
 80092ba:	2b2a      	cmp	r3, #42	; 0x2a
 80092bc:	d015      	beq.n	80092ea <_svfiprintf_r+0xf6>
 80092be:	4654      	mov	r4, sl
 80092c0:	2000      	movs	r0, #0
 80092c2:	f04f 0c0a 	mov.w	ip, #10
 80092c6:	9a07      	ldr	r2, [sp, #28]
 80092c8:	4621      	mov	r1, r4
 80092ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092ce:	3b30      	subs	r3, #48	; 0x30
 80092d0:	2b09      	cmp	r3, #9
 80092d2:	d94e      	bls.n	8009372 <_svfiprintf_r+0x17e>
 80092d4:	b1b0      	cbz	r0, 8009304 <_svfiprintf_r+0x110>
 80092d6:	9207      	str	r2, [sp, #28]
 80092d8:	e014      	b.n	8009304 <_svfiprintf_r+0x110>
 80092da:	eba0 0308 	sub.w	r3, r0, r8
 80092de:	fa09 f303 	lsl.w	r3, r9, r3
 80092e2:	4313      	orrs	r3, r2
 80092e4:	46a2      	mov	sl, r4
 80092e6:	9304      	str	r3, [sp, #16]
 80092e8:	e7d2      	b.n	8009290 <_svfiprintf_r+0x9c>
 80092ea:	9b03      	ldr	r3, [sp, #12]
 80092ec:	1d19      	adds	r1, r3, #4
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	9103      	str	r1, [sp, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	bfbb      	ittet	lt
 80092f6:	425b      	neglt	r3, r3
 80092f8:	f042 0202 	orrlt.w	r2, r2, #2
 80092fc:	9307      	strge	r3, [sp, #28]
 80092fe:	9307      	strlt	r3, [sp, #28]
 8009300:	bfb8      	it	lt
 8009302:	9204      	strlt	r2, [sp, #16]
 8009304:	7823      	ldrb	r3, [r4, #0]
 8009306:	2b2e      	cmp	r3, #46	; 0x2e
 8009308:	d10c      	bne.n	8009324 <_svfiprintf_r+0x130>
 800930a:	7863      	ldrb	r3, [r4, #1]
 800930c:	2b2a      	cmp	r3, #42	; 0x2a
 800930e:	d135      	bne.n	800937c <_svfiprintf_r+0x188>
 8009310:	9b03      	ldr	r3, [sp, #12]
 8009312:	3402      	adds	r4, #2
 8009314:	1d1a      	adds	r2, r3, #4
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	9203      	str	r2, [sp, #12]
 800931a:	2b00      	cmp	r3, #0
 800931c:	bfb8      	it	lt
 800931e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009322:	9305      	str	r3, [sp, #20]
 8009324:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80093e4 <_svfiprintf_r+0x1f0>
 8009328:	2203      	movs	r2, #3
 800932a:	4650      	mov	r0, sl
 800932c:	7821      	ldrb	r1, [r4, #0]
 800932e:	f7ff f941 	bl	80085b4 <memchr>
 8009332:	b140      	cbz	r0, 8009346 <_svfiprintf_r+0x152>
 8009334:	2340      	movs	r3, #64	; 0x40
 8009336:	eba0 000a 	sub.w	r0, r0, sl
 800933a:	fa03 f000 	lsl.w	r0, r3, r0
 800933e:	9b04      	ldr	r3, [sp, #16]
 8009340:	3401      	adds	r4, #1
 8009342:	4303      	orrs	r3, r0
 8009344:	9304      	str	r3, [sp, #16]
 8009346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800934a:	2206      	movs	r2, #6
 800934c:	4826      	ldr	r0, [pc, #152]	; (80093e8 <_svfiprintf_r+0x1f4>)
 800934e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009352:	f7ff f92f 	bl	80085b4 <memchr>
 8009356:	2800      	cmp	r0, #0
 8009358:	d038      	beq.n	80093cc <_svfiprintf_r+0x1d8>
 800935a:	4b24      	ldr	r3, [pc, #144]	; (80093ec <_svfiprintf_r+0x1f8>)
 800935c:	bb1b      	cbnz	r3, 80093a6 <_svfiprintf_r+0x1b2>
 800935e:	9b03      	ldr	r3, [sp, #12]
 8009360:	3307      	adds	r3, #7
 8009362:	f023 0307 	bic.w	r3, r3, #7
 8009366:	3308      	adds	r3, #8
 8009368:	9303      	str	r3, [sp, #12]
 800936a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800936c:	4433      	add	r3, r6
 800936e:	9309      	str	r3, [sp, #36]	; 0x24
 8009370:	e767      	b.n	8009242 <_svfiprintf_r+0x4e>
 8009372:	460c      	mov	r4, r1
 8009374:	2001      	movs	r0, #1
 8009376:	fb0c 3202 	mla	r2, ip, r2, r3
 800937a:	e7a5      	b.n	80092c8 <_svfiprintf_r+0xd4>
 800937c:	2300      	movs	r3, #0
 800937e:	f04f 0c0a 	mov.w	ip, #10
 8009382:	4619      	mov	r1, r3
 8009384:	3401      	adds	r4, #1
 8009386:	9305      	str	r3, [sp, #20]
 8009388:	4620      	mov	r0, r4
 800938a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800938e:	3a30      	subs	r2, #48	; 0x30
 8009390:	2a09      	cmp	r2, #9
 8009392:	d903      	bls.n	800939c <_svfiprintf_r+0x1a8>
 8009394:	2b00      	cmp	r3, #0
 8009396:	d0c5      	beq.n	8009324 <_svfiprintf_r+0x130>
 8009398:	9105      	str	r1, [sp, #20]
 800939a:	e7c3      	b.n	8009324 <_svfiprintf_r+0x130>
 800939c:	4604      	mov	r4, r0
 800939e:	2301      	movs	r3, #1
 80093a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80093a4:	e7f0      	b.n	8009388 <_svfiprintf_r+0x194>
 80093a6:	ab03      	add	r3, sp, #12
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	462a      	mov	r2, r5
 80093ac:	4638      	mov	r0, r7
 80093ae:	4b10      	ldr	r3, [pc, #64]	; (80093f0 <_svfiprintf_r+0x1fc>)
 80093b0:	a904      	add	r1, sp, #16
 80093b2:	f7fc fa7f 	bl	80058b4 <_printf_float>
 80093b6:	1c42      	adds	r2, r0, #1
 80093b8:	4606      	mov	r6, r0
 80093ba:	d1d6      	bne.n	800936a <_svfiprintf_r+0x176>
 80093bc:	89ab      	ldrh	r3, [r5, #12]
 80093be:	065b      	lsls	r3, r3, #25
 80093c0:	f53f af2c 	bmi.w	800921c <_svfiprintf_r+0x28>
 80093c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093c6:	b01d      	add	sp, #116	; 0x74
 80093c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093cc:	ab03      	add	r3, sp, #12
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	462a      	mov	r2, r5
 80093d2:	4638      	mov	r0, r7
 80093d4:	4b06      	ldr	r3, [pc, #24]	; (80093f0 <_svfiprintf_r+0x1fc>)
 80093d6:	a904      	add	r1, sp, #16
 80093d8:	f7fc fd08 	bl	8005dec <_printf_i>
 80093dc:	e7eb      	b.n	80093b6 <_svfiprintf_r+0x1c2>
 80093de:	bf00      	nop
 80093e0:	0801b23c 	.word	0x0801b23c
 80093e4:	0801b242 	.word	0x0801b242
 80093e8:	0801b246 	.word	0x0801b246
 80093ec:	080058b5 	.word	0x080058b5
 80093f0:	0800913d 	.word	0x0800913d

080093f4 <nan>:
 80093f4:	2000      	movs	r0, #0
 80093f6:	4901      	ldr	r1, [pc, #4]	; (80093fc <nan+0x8>)
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	7ff80000 	.word	0x7ff80000

08009400 <_sbrk_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	2300      	movs	r3, #0
 8009404:	4d05      	ldr	r5, [pc, #20]	; (800941c <_sbrk_r+0x1c>)
 8009406:	4604      	mov	r4, r0
 8009408:	4608      	mov	r0, r1
 800940a:	602b      	str	r3, [r5, #0]
 800940c:	f7fa f94c 	bl	80036a8 <_sbrk>
 8009410:	1c43      	adds	r3, r0, #1
 8009412:	d102      	bne.n	800941a <_sbrk_r+0x1a>
 8009414:	682b      	ldr	r3, [r5, #0]
 8009416:	b103      	cbz	r3, 800941a <_sbrk_r+0x1a>
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	bd38      	pop	{r3, r4, r5, pc}
 800941c:	200014d0 	.word	0x200014d0

08009420 <strncmp>:
 8009420:	4603      	mov	r3, r0
 8009422:	b510      	push	{r4, lr}
 8009424:	b172      	cbz	r2, 8009444 <strncmp+0x24>
 8009426:	3901      	subs	r1, #1
 8009428:	1884      	adds	r4, r0, r2
 800942a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800942e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009432:	4290      	cmp	r0, r2
 8009434:	d101      	bne.n	800943a <strncmp+0x1a>
 8009436:	42a3      	cmp	r3, r4
 8009438:	d101      	bne.n	800943e <strncmp+0x1e>
 800943a:	1a80      	subs	r0, r0, r2
 800943c:	bd10      	pop	{r4, pc}
 800943e:	2800      	cmp	r0, #0
 8009440:	d1f3      	bne.n	800942a <strncmp+0xa>
 8009442:	e7fa      	b.n	800943a <strncmp+0x1a>
 8009444:	4610      	mov	r0, r2
 8009446:	e7f9      	b.n	800943c <strncmp+0x1c>

08009448 <__ascii_wctomb>:
 8009448:	4603      	mov	r3, r0
 800944a:	4608      	mov	r0, r1
 800944c:	b141      	cbz	r1, 8009460 <__ascii_wctomb+0x18>
 800944e:	2aff      	cmp	r2, #255	; 0xff
 8009450:	d904      	bls.n	800945c <__ascii_wctomb+0x14>
 8009452:	228a      	movs	r2, #138	; 0x8a
 8009454:	f04f 30ff 	mov.w	r0, #4294967295
 8009458:	601a      	str	r2, [r3, #0]
 800945a:	4770      	bx	lr
 800945c:	2001      	movs	r0, #1
 800945e:	700a      	strb	r2, [r1, #0]
 8009460:	4770      	bx	lr
	...

08009464 <__assert_func>:
 8009464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009466:	4614      	mov	r4, r2
 8009468:	461a      	mov	r2, r3
 800946a:	4b09      	ldr	r3, [pc, #36]	; (8009490 <__assert_func+0x2c>)
 800946c:	4605      	mov	r5, r0
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68d8      	ldr	r0, [r3, #12]
 8009472:	b14c      	cbz	r4, 8009488 <__assert_func+0x24>
 8009474:	4b07      	ldr	r3, [pc, #28]	; (8009494 <__assert_func+0x30>)
 8009476:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800947a:	9100      	str	r1, [sp, #0]
 800947c:	462b      	mov	r3, r5
 800947e:	4906      	ldr	r1, [pc, #24]	; (8009498 <__assert_func+0x34>)
 8009480:	f000 f80e 	bl	80094a0 <fiprintf>
 8009484:	f000 fa70 	bl	8009968 <abort>
 8009488:	4b04      	ldr	r3, [pc, #16]	; (800949c <__assert_func+0x38>)
 800948a:	461c      	mov	r4, r3
 800948c:	e7f3      	b.n	8009476 <__assert_func+0x12>
 800948e:	bf00      	nop
 8009490:	2000014c 	.word	0x2000014c
 8009494:	0801b24d 	.word	0x0801b24d
 8009498:	0801b25a 	.word	0x0801b25a
 800949c:	0801b288 	.word	0x0801b288

080094a0 <fiprintf>:
 80094a0:	b40e      	push	{r1, r2, r3}
 80094a2:	b503      	push	{r0, r1, lr}
 80094a4:	4601      	mov	r1, r0
 80094a6:	ab03      	add	r3, sp, #12
 80094a8:	4805      	ldr	r0, [pc, #20]	; (80094c0 <fiprintf+0x20>)
 80094aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ae:	6800      	ldr	r0, [r0, #0]
 80094b0:	9301      	str	r3, [sp, #4]
 80094b2:	f000 f869 	bl	8009588 <_vfiprintf_r>
 80094b6:	b002      	add	sp, #8
 80094b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80094bc:	b003      	add	sp, #12
 80094be:	4770      	bx	lr
 80094c0:	2000014c 	.word	0x2000014c

080094c4 <__malloc_lock>:
 80094c4:	4801      	ldr	r0, [pc, #4]	; (80094cc <__malloc_lock+0x8>)
 80094c6:	f000 bc0b 	b.w	8009ce0 <__retarget_lock_acquire_recursive>
 80094ca:	bf00      	nop
 80094cc:	200014d4 	.word	0x200014d4

080094d0 <__malloc_unlock>:
 80094d0:	4801      	ldr	r0, [pc, #4]	; (80094d8 <__malloc_unlock+0x8>)
 80094d2:	f000 bc06 	b.w	8009ce2 <__retarget_lock_release_recursive>
 80094d6:	bf00      	nop
 80094d8:	200014d4 	.word	0x200014d4

080094dc <_realloc_r>:
 80094dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e0:	4680      	mov	r8, r0
 80094e2:	4614      	mov	r4, r2
 80094e4:	460e      	mov	r6, r1
 80094e6:	b921      	cbnz	r1, 80094f2 <_realloc_r+0x16>
 80094e8:	4611      	mov	r1, r2
 80094ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094ee:	f7ff bdb1 	b.w	8009054 <_malloc_r>
 80094f2:	b92a      	cbnz	r2, 8009500 <_realloc_r+0x24>
 80094f4:	f7ff fd46 	bl	8008f84 <_free_r>
 80094f8:	4625      	mov	r5, r4
 80094fa:	4628      	mov	r0, r5
 80094fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009500:	f000 fc56 	bl	8009db0 <_malloc_usable_size_r>
 8009504:	4284      	cmp	r4, r0
 8009506:	4607      	mov	r7, r0
 8009508:	d802      	bhi.n	8009510 <_realloc_r+0x34>
 800950a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800950e:	d812      	bhi.n	8009536 <_realloc_r+0x5a>
 8009510:	4621      	mov	r1, r4
 8009512:	4640      	mov	r0, r8
 8009514:	f7ff fd9e 	bl	8009054 <_malloc_r>
 8009518:	4605      	mov	r5, r0
 800951a:	2800      	cmp	r0, #0
 800951c:	d0ed      	beq.n	80094fa <_realloc_r+0x1e>
 800951e:	42bc      	cmp	r4, r7
 8009520:	4622      	mov	r2, r4
 8009522:	4631      	mov	r1, r6
 8009524:	bf28      	it	cs
 8009526:	463a      	movcs	r2, r7
 8009528:	f7ff f852 	bl	80085d0 <memcpy>
 800952c:	4631      	mov	r1, r6
 800952e:	4640      	mov	r0, r8
 8009530:	f7ff fd28 	bl	8008f84 <_free_r>
 8009534:	e7e1      	b.n	80094fa <_realloc_r+0x1e>
 8009536:	4635      	mov	r5, r6
 8009538:	e7df      	b.n	80094fa <_realloc_r+0x1e>

0800953a <__sfputc_r>:
 800953a:	6893      	ldr	r3, [r2, #8]
 800953c:	b410      	push	{r4}
 800953e:	3b01      	subs	r3, #1
 8009540:	2b00      	cmp	r3, #0
 8009542:	6093      	str	r3, [r2, #8]
 8009544:	da07      	bge.n	8009556 <__sfputc_r+0x1c>
 8009546:	6994      	ldr	r4, [r2, #24]
 8009548:	42a3      	cmp	r3, r4
 800954a:	db01      	blt.n	8009550 <__sfputc_r+0x16>
 800954c:	290a      	cmp	r1, #10
 800954e:	d102      	bne.n	8009556 <__sfputc_r+0x1c>
 8009550:	bc10      	pop	{r4}
 8009552:	f000 b949 	b.w	80097e8 <__swbuf_r>
 8009556:	6813      	ldr	r3, [r2, #0]
 8009558:	1c58      	adds	r0, r3, #1
 800955a:	6010      	str	r0, [r2, #0]
 800955c:	7019      	strb	r1, [r3, #0]
 800955e:	4608      	mov	r0, r1
 8009560:	bc10      	pop	{r4}
 8009562:	4770      	bx	lr

08009564 <__sfputs_r>:
 8009564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009566:	4606      	mov	r6, r0
 8009568:	460f      	mov	r7, r1
 800956a:	4614      	mov	r4, r2
 800956c:	18d5      	adds	r5, r2, r3
 800956e:	42ac      	cmp	r4, r5
 8009570:	d101      	bne.n	8009576 <__sfputs_r+0x12>
 8009572:	2000      	movs	r0, #0
 8009574:	e007      	b.n	8009586 <__sfputs_r+0x22>
 8009576:	463a      	mov	r2, r7
 8009578:	4630      	mov	r0, r6
 800957a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800957e:	f7ff ffdc 	bl	800953a <__sfputc_r>
 8009582:	1c43      	adds	r3, r0, #1
 8009584:	d1f3      	bne.n	800956e <__sfputs_r+0xa>
 8009586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009588 <_vfiprintf_r>:
 8009588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958c:	460d      	mov	r5, r1
 800958e:	4614      	mov	r4, r2
 8009590:	4698      	mov	r8, r3
 8009592:	4606      	mov	r6, r0
 8009594:	b09d      	sub	sp, #116	; 0x74
 8009596:	b118      	cbz	r0, 80095a0 <_vfiprintf_r+0x18>
 8009598:	6983      	ldr	r3, [r0, #24]
 800959a:	b90b      	cbnz	r3, 80095a0 <_vfiprintf_r+0x18>
 800959c:	f000 fb02 	bl	8009ba4 <__sinit>
 80095a0:	4b89      	ldr	r3, [pc, #548]	; (80097c8 <_vfiprintf_r+0x240>)
 80095a2:	429d      	cmp	r5, r3
 80095a4:	d11b      	bne.n	80095de <_vfiprintf_r+0x56>
 80095a6:	6875      	ldr	r5, [r6, #4]
 80095a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095aa:	07d9      	lsls	r1, r3, #31
 80095ac:	d405      	bmi.n	80095ba <_vfiprintf_r+0x32>
 80095ae:	89ab      	ldrh	r3, [r5, #12]
 80095b0:	059a      	lsls	r2, r3, #22
 80095b2:	d402      	bmi.n	80095ba <_vfiprintf_r+0x32>
 80095b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095b6:	f000 fb93 	bl	8009ce0 <__retarget_lock_acquire_recursive>
 80095ba:	89ab      	ldrh	r3, [r5, #12]
 80095bc:	071b      	lsls	r3, r3, #28
 80095be:	d501      	bpl.n	80095c4 <_vfiprintf_r+0x3c>
 80095c0:	692b      	ldr	r3, [r5, #16]
 80095c2:	b9eb      	cbnz	r3, 8009600 <_vfiprintf_r+0x78>
 80095c4:	4629      	mov	r1, r5
 80095c6:	4630      	mov	r0, r6
 80095c8:	f000 f960 	bl	800988c <__swsetup_r>
 80095cc:	b1c0      	cbz	r0, 8009600 <_vfiprintf_r+0x78>
 80095ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095d0:	07dc      	lsls	r4, r3, #31
 80095d2:	d50e      	bpl.n	80095f2 <_vfiprintf_r+0x6a>
 80095d4:	f04f 30ff 	mov.w	r0, #4294967295
 80095d8:	b01d      	add	sp, #116	; 0x74
 80095da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095de:	4b7b      	ldr	r3, [pc, #492]	; (80097cc <_vfiprintf_r+0x244>)
 80095e0:	429d      	cmp	r5, r3
 80095e2:	d101      	bne.n	80095e8 <_vfiprintf_r+0x60>
 80095e4:	68b5      	ldr	r5, [r6, #8]
 80095e6:	e7df      	b.n	80095a8 <_vfiprintf_r+0x20>
 80095e8:	4b79      	ldr	r3, [pc, #484]	; (80097d0 <_vfiprintf_r+0x248>)
 80095ea:	429d      	cmp	r5, r3
 80095ec:	bf08      	it	eq
 80095ee:	68f5      	ldreq	r5, [r6, #12]
 80095f0:	e7da      	b.n	80095a8 <_vfiprintf_r+0x20>
 80095f2:	89ab      	ldrh	r3, [r5, #12]
 80095f4:	0598      	lsls	r0, r3, #22
 80095f6:	d4ed      	bmi.n	80095d4 <_vfiprintf_r+0x4c>
 80095f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095fa:	f000 fb72 	bl	8009ce2 <__retarget_lock_release_recursive>
 80095fe:	e7e9      	b.n	80095d4 <_vfiprintf_r+0x4c>
 8009600:	2300      	movs	r3, #0
 8009602:	9309      	str	r3, [sp, #36]	; 0x24
 8009604:	2320      	movs	r3, #32
 8009606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800960a:	2330      	movs	r3, #48	; 0x30
 800960c:	f04f 0901 	mov.w	r9, #1
 8009610:	f8cd 800c 	str.w	r8, [sp, #12]
 8009614:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80097d4 <_vfiprintf_r+0x24c>
 8009618:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800961c:	4623      	mov	r3, r4
 800961e:	469a      	mov	sl, r3
 8009620:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009624:	b10a      	cbz	r2, 800962a <_vfiprintf_r+0xa2>
 8009626:	2a25      	cmp	r2, #37	; 0x25
 8009628:	d1f9      	bne.n	800961e <_vfiprintf_r+0x96>
 800962a:	ebba 0b04 	subs.w	fp, sl, r4
 800962e:	d00b      	beq.n	8009648 <_vfiprintf_r+0xc0>
 8009630:	465b      	mov	r3, fp
 8009632:	4622      	mov	r2, r4
 8009634:	4629      	mov	r1, r5
 8009636:	4630      	mov	r0, r6
 8009638:	f7ff ff94 	bl	8009564 <__sfputs_r>
 800963c:	3001      	adds	r0, #1
 800963e:	f000 80aa 	beq.w	8009796 <_vfiprintf_r+0x20e>
 8009642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009644:	445a      	add	r2, fp
 8009646:	9209      	str	r2, [sp, #36]	; 0x24
 8009648:	f89a 3000 	ldrb.w	r3, [sl]
 800964c:	2b00      	cmp	r3, #0
 800964e:	f000 80a2 	beq.w	8009796 <_vfiprintf_r+0x20e>
 8009652:	2300      	movs	r3, #0
 8009654:	f04f 32ff 	mov.w	r2, #4294967295
 8009658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800965c:	f10a 0a01 	add.w	sl, sl, #1
 8009660:	9304      	str	r3, [sp, #16]
 8009662:	9307      	str	r3, [sp, #28]
 8009664:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009668:	931a      	str	r3, [sp, #104]	; 0x68
 800966a:	4654      	mov	r4, sl
 800966c:	2205      	movs	r2, #5
 800966e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009672:	4858      	ldr	r0, [pc, #352]	; (80097d4 <_vfiprintf_r+0x24c>)
 8009674:	f7fe ff9e 	bl	80085b4 <memchr>
 8009678:	9a04      	ldr	r2, [sp, #16]
 800967a:	b9d8      	cbnz	r0, 80096b4 <_vfiprintf_r+0x12c>
 800967c:	06d1      	lsls	r1, r2, #27
 800967e:	bf44      	itt	mi
 8009680:	2320      	movmi	r3, #32
 8009682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009686:	0713      	lsls	r3, r2, #28
 8009688:	bf44      	itt	mi
 800968a:	232b      	movmi	r3, #43	; 0x2b
 800968c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009690:	f89a 3000 	ldrb.w	r3, [sl]
 8009694:	2b2a      	cmp	r3, #42	; 0x2a
 8009696:	d015      	beq.n	80096c4 <_vfiprintf_r+0x13c>
 8009698:	4654      	mov	r4, sl
 800969a:	2000      	movs	r0, #0
 800969c:	f04f 0c0a 	mov.w	ip, #10
 80096a0:	9a07      	ldr	r2, [sp, #28]
 80096a2:	4621      	mov	r1, r4
 80096a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096a8:	3b30      	subs	r3, #48	; 0x30
 80096aa:	2b09      	cmp	r3, #9
 80096ac:	d94e      	bls.n	800974c <_vfiprintf_r+0x1c4>
 80096ae:	b1b0      	cbz	r0, 80096de <_vfiprintf_r+0x156>
 80096b0:	9207      	str	r2, [sp, #28]
 80096b2:	e014      	b.n	80096de <_vfiprintf_r+0x156>
 80096b4:	eba0 0308 	sub.w	r3, r0, r8
 80096b8:	fa09 f303 	lsl.w	r3, r9, r3
 80096bc:	4313      	orrs	r3, r2
 80096be:	46a2      	mov	sl, r4
 80096c0:	9304      	str	r3, [sp, #16]
 80096c2:	e7d2      	b.n	800966a <_vfiprintf_r+0xe2>
 80096c4:	9b03      	ldr	r3, [sp, #12]
 80096c6:	1d19      	adds	r1, r3, #4
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	9103      	str	r1, [sp, #12]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	bfbb      	ittet	lt
 80096d0:	425b      	neglt	r3, r3
 80096d2:	f042 0202 	orrlt.w	r2, r2, #2
 80096d6:	9307      	strge	r3, [sp, #28]
 80096d8:	9307      	strlt	r3, [sp, #28]
 80096da:	bfb8      	it	lt
 80096dc:	9204      	strlt	r2, [sp, #16]
 80096de:	7823      	ldrb	r3, [r4, #0]
 80096e0:	2b2e      	cmp	r3, #46	; 0x2e
 80096e2:	d10c      	bne.n	80096fe <_vfiprintf_r+0x176>
 80096e4:	7863      	ldrb	r3, [r4, #1]
 80096e6:	2b2a      	cmp	r3, #42	; 0x2a
 80096e8:	d135      	bne.n	8009756 <_vfiprintf_r+0x1ce>
 80096ea:	9b03      	ldr	r3, [sp, #12]
 80096ec:	3402      	adds	r4, #2
 80096ee:	1d1a      	adds	r2, r3, #4
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	9203      	str	r2, [sp, #12]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	bfb8      	it	lt
 80096f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80096fc:	9305      	str	r3, [sp, #20]
 80096fe:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80097d8 <_vfiprintf_r+0x250>
 8009702:	2203      	movs	r2, #3
 8009704:	4650      	mov	r0, sl
 8009706:	7821      	ldrb	r1, [r4, #0]
 8009708:	f7fe ff54 	bl	80085b4 <memchr>
 800970c:	b140      	cbz	r0, 8009720 <_vfiprintf_r+0x198>
 800970e:	2340      	movs	r3, #64	; 0x40
 8009710:	eba0 000a 	sub.w	r0, r0, sl
 8009714:	fa03 f000 	lsl.w	r0, r3, r0
 8009718:	9b04      	ldr	r3, [sp, #16]
 800971a:	3401      	adds	r4, #1
 800971c:	4303      	orrs	r3, r0
 800971e:	9304      	str	r3, [sp, #16]
 8009720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009724:	2206      	movs	r2, #6
 8009726:	482d      	ldr	r0, [pc, #180]	; (80097dc <_vfiprintf_r+0x254>)
 8009728:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800972c:	f7fe ff42 	bl	80085b4 <memchr>
 8009730:	2800      	cmp	r0, #0
 8009732:	d03f      	beq.n	80097b4 <_vfiprintf_r+0x22c>
 8009734:	4b2a      	ldr	r3, [pc, #168]	; (80097e0 <_vfiprintf_r+0x258>)
 8009736:	bb1b      	cbnz	r3, 8009780 <_vfiprintf_r+0x1f8>
 8009738:	9b03      	ldr	r3, [sp, #12]
 800973a:	3307      	adds	r3, #7
 800973c:	f023 0307 	bic.w	r3, r3, #7
 8009740:	3308      	adds	r3, #8
 8009742:	9303      	str	r3, [sp, #12]
 8009744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009746:	443b      	add	r3, r7
 8009748:	9309      	str	r3, [sp, #36]	; 0x24
 800974a:	e767      	b.n	800961c <_vfiprintf_r+0x94>
 800974c:	460c      	mov	r4, r1
 800974e:	2001      	movs	r0, #1
 8009750:	fb0c 3202 	mla	r2, ip, r2, r3
 8009754:	e7a5      	b.n	80096a2 <_vfiprintf_r+0x11a>
 8009756:	2300      	movs	r3, #0
 8009758:	f04f 0c0a 	mov.w	ip, #10
 800975c:	4619      	mov	r1, r3
 800975e:	3401      	adds	r4, #1
 8009760:	9305      	str	r3, [sp, #20]
 8009762:	4620      	mov	r0, r4
 8009764:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009768:	3a30      	subs	r2, #48	; 0x30
 800976a:	2a09      	cmp	r2, #9
 800976c:	d903      	bls.n	8009776 <_vfiprintf_r+0x1ee>
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0c5      	beq.n	80096fe <_vfiprintf_r+0x176>
 8009772:	9105      	str	r1, [sp, #20]
 8009774:	e7c3      	b.n	80096fe <_vfiprintf_r+0x176>
 8009776:	4604      	mov	r4, r0
 8009778:	2301      	movs	r3, #1
 800977a:	fb0c 2101 	mla	r1, ip, r1, r2
 800977e:	e7f0      	b.n	8009762 <_vfiprintf_r+0x1da>
 8009780:	ab03      	add	r3, sp, #12
 8009782:	9300      	str	r3, [sp, #0]
 8009784:	462a      	mov	r2, r5
 8009786:	4630      	mov	r0, r6
 8009788:	4b16      	ldr	r3, [pc, #88]	; (80097e4 <_vfiprintf_r+0x25c>)
 800978a:	a904      	add	r1, sp, #16
 800978c:	f7fc f892 	bl	80058b4 <_printf_float>
 8009790:	4607      	mov	r7, r0
 8009792:	1c78      	adds	r0, r7, #1
 8009794:	d1d6      	bne.n	8009744 <_vfiprintf_r+0x1bc>
 8009796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009798:	07d9      	lsls	r1, r3, #31
 800979a:	d405      	bmi.n	80097a8 <_vfiprintf_r+0x220>
 800979c:	89ab      	ldrh	r3, [r5, #12]
 800979e:	059a      	lsls	r2, r3, #22
 80097a0:	d402      	bmi.n	80097a8 <_vfiprintf_r+0x220>
 80097a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097a4:	f000 fa9d 	bl	8009ce2 <__retarget_lock_release_recursive>
 80097a8:	89ab      	ldrh	r3, [r5, #12]
 80097aa:	065b      	lsls	r3, r3, #25
 80097ac:	f53f af12 	bmi.w	80095d4 <_vfiprintf_r+0x4c>
 80097b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097b2:	e711      	b.n	80095d8 <_vfiprintf_r+0x50>
 80097b4:	ab03      	add	r3, sp, #12
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	462a      	mov	r2, r5
 80097ba:	4630      	mov	r0, r6
 80097bc:	4b09      	ldr	r3, [pc, #36]	; (80097e4 <_vfiprintf_r+0x25c>)
 80097be:	a904      	add	r1, sp, #16
 80097c0:	f7fc fb14 	bl	8005dec <_printf_i>
 80097c4:	e7e4      	b.n	8009790 <_vfiprintf_r+0x208>
 80097c6:	bf00      	nop
 80097c8:	0801b2ac 	.word	0x0801b2ac
 80097cc:	0801b2cc 	.word	0x0801b2cc
 80097d0:	0801b28c 	.word	0x0801b28c
 80097d4:	0801b23c 	.word	0x0801b23c
 80097d8:	0801b242 	.word	0x0801b242
 80097dc:	0801b246 	.word	0x0801b246
 80097e0:	080058b5 	.word	0x080058b5
 80097e4:	08009565 	.word	0x08009565

080097e8 <__swbuf_r>:
 80097e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ea:	460e      	mov	r6, r1
 80097ec:	4614      	mov	r4, r2
 80097ee:	4605      	mov	r5, r0
 80097f0:	b118      	cbz	r0, 80097fa <__swbuf_r+0x12>
 80097f2:	6983      	ldr	r3, [r0, #24]
 80097f4:	b90b      	cbnz	r3, 80097fa <__swbuf_r+0x12>
 80097f6:	f000 f9d5 	bl	8009ba4 <__sinit>
 80097fa:	4b21      	ldr	r3, [pc, #132]	; (8009880 <__swbuf_r+0x98>)
 80097fc:	429c      	cmp	r4, r3
 80097fe:	d12b      	bne.n	8009858 <__swbuf_r+0x70>
 8009800:	686c      	ldr	r4, [r5, #4]
 8009802:	69a3      	ldr	r3, [r4, #24]
 8009804:	60a3      	str	r3, [r4, #8]
 8009806:	89a3      	ldrh	r3, [r4, #12]
 8009808:	071a      	lsls	r2, r3, #28
 800980a:	d52f      	bpl.n	800986c <__swbuf_r+0x84>
 800980c:	6923      	ldr	r3, [r4, #16]
 800980e:	b36b      	cbz	r3, 800986c <__swbuf_r+0x84>
 8009810:	6923      	ldr	r3, [r4, #16]
 8009812:	6820      	ldr	r0, [r4, #0]
 8009814:	b2f6      	uxtb	r6, r6
 8009816:	1ac0      	subs	r0, r0, r3
 8009818:	6963      	ldr	r3, [r4, #20]
 800981a:	4637      	mov	r7, r6
 800981c:	4283      	cmp	r3, r0
 800981e:	dc04      	bgt.n	800982a <__swbuf_r+0x42>
 8009820:	4621      	mov	r1, r4
 8009822:	4628      	mov	r0, r5
 8009824:	f000 f92a 	bl	8009a7c <_fflush_r>
 8009828:	bb30      	cbnz	r0, 8009878 <__swbuf_r+0x90>
 800982a:	68a3      	ldr	r3, [r4, #8]
 800982c:	3001      	adds	r0, #1
 800982e:	3b01      	subs	r3, #1
 8009830:	60a3      	str	r3, [r4, #8]
 8009832:	6823      	ldr	r3, [r4, #0]
 8009834:	1c5a      	adds	r2, r3, #1
 8009836:	6022      	str	r2, [r4, #0]
 8009838:	701e      	strb	r6, [r3, #0]
 800983a:	6963      	ldr	r3, [r4, #20]
 800983c:	4283      	cmp	r3, r0
 800983e:	d004      	beq.n	800984a <__swbuf_r+0x62>
 8009840:	89a3      	ldrh	r3, [r4, #12]
 8009842:	07db      	lsls	r3, r3, #31
 8009844:	d506      	bpl.n	8009854 <__swbuf_r+0x6c>
 8009846:	2e0a      	cmp	r6, #10
 8009848:	d104      	bne.n	8009854 <__swbuf_r+0x6c>
 800984a:	4621      	mov	r1, r4
 800984c:	4628      	mov	r0, r5
 800984e:	f000 f915 	bl	8009a7c <_fflush_r>
 8009852:	b988      	cbnz	r0, 8009878 <__swbuf_r+0x90>
 8009854:	4638      	mov	r0, r7
 8009856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009858:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <__swbuf_r+0x9c>)
 800985a:	429c      	cmp	r4, r3
 800985c:	d101      	bne.n	8009862 <__swbuf_r+0x7a>
 800985e:	68ac      	ldr	r4, [r5, #8]
 8009860:	e7cf      	b.n	8009802 <__swbuf_r+0x1a>
 8009862:	4b09      	ldr	r3, [pc, #36]	; (8009888 <__swbuf_r+0xa0>)
 8009864:	429c      	cmp	r4, r3
 8009866:	bf08      	it	eq
 8009868:	68ec      	ldreq	r4, [r5, #12]
 800986a:	e7ca      	b.n	8009802 <__swbuf_r+0x1a>
 800986c:	4621      	mov	r1, r4
 800986e:	4628      	mov	r0, r5
 8009870:	f000 f80c 	bl	800988c <__swsetup_r>
 8009874:	2800      	cmp	r0, #0
 8009876:	d0cb      	beq.n	8009810 <__swbuf_r+0x28>
 8009878:	f04f 37ff 	mov.w	r7, #4294967295
 800987c:	e7ea      	b.n	8009854 <__swbuf_r+0x6c>
 800987e:	bf00      	nop
 8009880:	0801b2ac 	.word	0x0801b2ac
 8009884:	0801b2cc 	.word	0x0801b2cc
 8009888:	0801b28c 	.word	0x0801b28c

0800988c <__swsetup_r>:
 800988c:	4b32      	ldr	r3, [pc, #200]	; (8009958 <__swsetup_r+0xcc>)
 800988e:	b570      	push	{r4, r5, r6, lr}
 8009890:	681d      	ldr	r5, [r3, #0]
 8009892:	4606      	mov	r6, r0
 8009894:	460c      	mov	r4, r1
 8009896:	b125      	cbz	r5, 80098a2 <__swsetup_r+0x16>
 8009898:	69ab      	ldr	r3, [r5, #24]
 800989a:	b913      	cbnz	r3, 80098a2 <__swsetup_r+0x16>
 800989c:	4628      	mov	r0, r5
 800989e:	f000 f981 	bl	8009ba4 <__sinit>
 80098a2:	4b2e      	ldr	r3, [pc, #184]	; (800995c <__swsetup_r+0xd0>)
 80098a4:	429c      	cmp	r4, r3
 80098a6:	d10f      	bne.n	80098c8 <__swsetup_r+0x3c>
 80098a8:	686c      	ldr	r4, [r5, #4]
 80098aa:	89a3      	ldrh	r3, [r4, #12]
 80098ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098b0:	0719      	lsls	r1, r3, #28
 80098b2:	d42c      	bmi.n	800990e <__swsetup_r+0x82>
 80098b4:	06dd      	lsls	r5, r3, #27
 80098b6:	d411      	bmi.n	80098dc <__swsetup_r+0x50>
 80098b8:	2309      	movs	r3, #9
 80098ba:	6033      	str	r3, [r6, #0]
 80098bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098c0:	f04f 30ff 	mov.w	r0, #4294967295
 80098c4:	81a3      	strh	r3, [r4, #12]
 80098c6:	e03e      	b.n	8009946 <__swsetup_r+0xba>
 80098c8:	4b25      	ldr	r3, [pc, #148]	; (8009960 <__swsetup_r+0xd4>)
 80098ca:	429c      	cmp	r4, r3
 80098cc:	d101      	bne.n	80098d2 <__swsetup_r+0x46>
 80098ce:	68ac      	ldr	r4, [r5, #8]
 80098d0:	e7eb      	b.n	80098aa <__swsetup_r+0x1e>
 80098d2:	4b24      	ldr	r3, [pc, #144]	; (8009964 <__swsetup_r+0xd8>)
 80098d4:	429c      	cmp	r4, r3
 80098d6:	bf08      	it	eq
 80098d8:	68ec      	ldreq	r4, [r5, #12]
 80098da:	e7e6      	b.n	80098aa <__swsetup_r+0x1e>
 80098dc:	0758      	lsls	r0, r3, #29
 80098de:	d512      	bpl.n	8009906 <__swsetup_r+0x7a>
 80098e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098e2:	b141      	cbz	r1, 80098f6 <__swsetup_r+0x6a>
 80098e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098e8:	4299      	cmp	r1, r3
 80098ea:	d002      	beq.n	80098f2 <__swsetup_r+0x66>
 80098ec:	4630      	mov	r0, r6
 80098ee:	f7ff fb49 	bl	8008f84 <_free_r>
 80098f2:	2300      	movs	r3, #0
 80098f4:	6363      	str	r3, [r4, #52]	; 0x34
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80098fc:	81a3      	strh	r3, [r4, #12]
 80098fe:	2300      	movs	r3, #0
 8009900:	6063      	str	r3, [r4, #4]
 8009902:	6923      	ldr	r3, [r4, #16]
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	89a3      	ldrh	r3, [r4, #12]
 8009908:	f043 0308 	orr.w	r3, r3, #8
 800990c:	81a3      	strh	r3, [r4, #12]
 800990e:	6923      	ldr	r3, [r4, #16]
 8009910:	b94b      	cbnz	r3, 8009926 <__swsetup_r+0x9a>
 8009912:	89a3      	ldrh	r3, [r4, #12]
 8009914:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800991c:	d003      	beq.n	8009926 <__swsetup_r+0x9a>
 800991e:	4621      	mov	r1, r4
 8009920:	4630      	mov	r0, r6
 8009922:	f000 fa05 	bl	8009d30 <__smakebuf_r>
 8009926:	89a0      	ldrh	r0, [r4, #12]
 8009928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800992c:	f010 0301 	ands.w	r3, r0, #1
 8009930:	d00a      	beq.n	8009948 <__swsetup_r+0xbc>
 8009932:	2300      	movs	r3, #0
 8009934:	60a3      	str	r3, [r4, #8]
 8009936:	6963      	ldr	r3, [r4, #20]
 8009938:	425b      	negs	r3, r3
 800993a:	61a3      	str	r3, [r4, #24]
 800993c:	6923      	ldr	r3, [r4, #16]
 800993e:	b943      	cbnz	r3, 8009952 <__swsetup_r+0xc6>
 8009940:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009944:	d1ba      	bne.n	80098bc <__swsetup_r+0x30>
 8009946:	bd70      	pop	{r4, r5, r6, pc}
 8009948:	0781      	lsls	r1, r0, #30
 800994a:	bf58      	it	pl
 800994c:	6963      	ldrpl	r3, [r4, #20]
 800994e:	60a3      	str	r3, [r4, #8]
 8009950:	e7f4      	b.n	800993c <__swsetup_r+0xb0>
 8009952:	2000      	movs	r0, #0
 8009954:	e7f7      	b.n	8009946 <__swsetup_r+0xba>
 8009956:	bf00      	nop
 8009958:	2000014c 	.word	0x2000014c
 800995c:	0801b2ac 	.word	0x0801b2ac
 8009960:	0801b2cc 	.word	0x0801b2cc
 8009964:	0801b28c 	.word	0x0801b28c

08009968 <abort>:
 8009968:	2006      	movs	r0, #6
 800996a:	b508      	push	{r3, lr}
 800996c:	f000 fa50 	bl	8009e10 <raise>
 8009970:	2001      	movs	r0, #1
 8009972:	f7f9 fe69 	bl	8003648 <_exit>
	...

08009978 <__sflush_r>:
 8009978:	898a      	ldrh	r2, [r1, #12]
 800997a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997c:	4605      	mov	r5, r0
 800997e:	0710      	lsls	r0, r2, #28
 8009980:	460c      	mov	r4, r1
 8009982:	d457      	bmi.n	8009a34 <__sflush_r+0xbc>
 8009984:	684b      	ldr	r3, [r1, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	dc04      	bgt.n	8009994 <__sflush_r+0x1c>
 800998a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800998c:	2b00      	cmp	r3, #0
 800998e:	dc01      	bgt.n	8009994 <__sflush_r+0x1c>
 8009990:	2000      	movs	r0, #0
 8009992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009996:	2e00      	cmp	r6, #0
 8009998:	d0fa      	beq.n	8009990 <__sflush_r+0x18>
 800999a:	2300      	movs	r3, #0
 800999c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099a0:	682f      	ldr	r7, [r5, #0]
 80099a2:	602b      	str	r3, [r5, #0]
 80099a4:	d032      	beq.n	8009a0c <__sflush_r+0x94>
 80099a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099a8:	89a3      	ldrh	r3, [r4, #12]
 80099aa:	075a      	lsls	r2, r3, #29
 80099ac:	d505      	bpl.n	80099ba <__sflush_r+0x42>
 80099ae:	6863      	ldr	r3, [r4, #4]
 80099b0:	1ac0      	subs	r0, r0, r3
 80099b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099b4:	b10b      	cbz	r3, 80099ba <__sflush_r+0x42>
 80099b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099b8:	1ac0      	subs	r0, r0, r3
 80099ba:	2300      	movs	r3, #0
 80099bc:	4602      	mov	r2, r0
 80099be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099c0:	4628      	mov	r0, r5
 80099c2:	6a21      	ldr	r1, [r4, #32]
 80099c4:	47b0      	blx	r6
 80099c6:	1c43      	adds	r3, r0, #1
 80099c8:	89a3      	ldrh	r3, [r4, #12]
 80099ca:	d106      	bne.n	80099da <__sflush_r+0x62>
 80099cc:	6829      	ldr	r1, [r5, #0]
 80099ce:	291d      	cmp	r1, #29
 80099d0:	d82c      	bhi.n	8009a2c <__sflush_r+0xb4>
 80099d2:	4a29      	ldr	r2, [pc, #164]	; (8009a78 <__sflush_r+0x100>)
 80099d4:	40ca      	lsrs	r2, r1
 80099d6:	07d6      	lsls	r6, r2, #31
 80099d8:	d528      	bpl.n	8009a2c <__sflush_r+0xb4>
 80099da:	2200      	movs	r2, #0
 80099dc:	6062      	str	r2, [r4, #4]
 80099de:	6922      	ldr	r2, [r4, #16]
 80099e0:	04d9      	lsls	r1, r3, #19
 80099e2:	6022      	str	r2, [r4, #0]
 80099e4:	d504      	bpl.n	80099f0 <__sflush_r+0x78>
 80099e6:	1c42      	adds	r2, r0, #1
 80099e8:	d101      	bne.n	80099ee <__sflush_r+0x76>
 80099ea:	682b      	ldr	r3, [r5, #0]
 80099ec:	b903      	cbnz	r3, 80099f0 <__sflush_r+0x78>
 80099ee:	6560      	str	r0, [r4, #84]	; 0x54
 80099f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099f2:	602f      	str	r7, [r5, #0]
 80099f4:	2900      	cmp	r1, #0
 80099f6:	d0cb      	beq.n	8009990 <__sflush_r+0x18>
 80099f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099fc:	4299      	cmp	r1, r3
 80099fe:	d002      	beq.n	8009a06 <__sflush_r+0x8e>
 8009a00:	4628      	mov	r0, r5
 8009a02:	f7ff fabf 	bl	8008f84 <_free_r>
 8009a06:	2000      	movs	r0, #0
 8009a08:	6360      	str	r0, [r4, #52]	; 0x34
 8009a0a:	e7c2      	b.n	8009992 <__sflush_r+0x1a>
 8009a0c:	6a21      	ldr	r1, [r4, #32]
 8009a0e:	2301      	movs	r3, #1
 8009a10:	4628      	mov	r0, r5
 8009a12:	47b0      	blx	r6
 8009a14:	1c41      	adds	r1, r0, #1
 8009a16:	d1c7      	bne.n	80099a8 <__sflush_r+0x30>
 8009a18:	682b      	ldr	r3, [r5, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d0c4      	beq.n	80099a8 <__sflush_r+0x30>
 8009a1e:	2b1d      	cmp	r3, #29
 8009a20:	d001      	beq.n	8009a26 <__sflush_r+0xae>
 8009a22:	2b16      	cmp	r3, #22
 8009a24:	d101      	bne.n	8009a2a <__sflush_r+0xb2>
 8009a26:	602f      	str	r7, [r5, #0]
 8009a28:	e7b2      	b.n	8009990 <__sflush_r+0x18>
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a30:	81a3      	strh	r3, [r4, #12]
 8009a32:	e7ae      	b.n	8009992 <__sflush_r+0x1a>
 8009a34:	690f      	ldr	r7, [r1, #16]
 8009a36:	2f00      	cmp	r7, #0
 8009a38:	d0aa      	beq.n	8009990 <__sflush_r+0x18>
 8009a3a:	0793      	lsls	r3, r2, #30
 8009a3c:	bf18      	it	ne
 8009a3e:	2300      	movne	r3, #0
 8009a40:	680e      	ldr	r6, [r1, #0]
 8009a42:	bf08      	it	eq
 8009a44:	694b      	ldreq	r3, [r1, #20]
 8009a46:	1bf6      	subs	r6, r6, r7
 8009a48:	600f      	str	r7, [r1, #0]
 8009a4a:	608b      	str	r3, [r1, #8]
 8009a4c:	2e00      	cmp	r6, #0
 8009a4e:	dd9f      	ble.n	8009990 <__sflush_r+0x18>
 8009a50:	4633      	mov	r3, r6
 8009a52:	463a      	mov	r2, r7
 8009a54:	4628      	mov	r0, r5
 8009a56:	6a21      	ldr	r1, [r4, #32]
 8009a58:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009a5c:	47e0      	blx	ip
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	dc06      	bgt.n	8009a70 <__sflush_r+0xf8>
 8009a62:	89a3      	ldrh	r3, [r4, #12]
 8009a64:	f04f 30ff 	mov.w	r0, #4294967295
 8009a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a6c:	81a3      	strh	r3, [r4, #12]
 8009a6e:	e790      	b.n	8009992 <__sflush_r+0x1a>
 8009a70:	4407      	add	r7, r0
 8009a72:	1a36      	subs	r6, r6, r0
 8009a74:	e7ea      	b.n	8009a4c <__sflush_r+0xd4>
 8009a76:	bf00      	nop
 8009a78:	20400001 	.word	0x20400001

08009a7c <_fflush_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	690b      	ldr	r3, [r1, #16]
 8009a80:	4605      	mov	r5, r0
 8009a82:	460c      	mov	r4, r1
 8009a84:	b913      	cbnz	r3, 8009a8c <_fflush_r+0x10>
 8009a86:	2500      	movs	r5, #0
 8009a88:	4628      	mov	r0, r5
 8009a8a:	bd38      	pop	{r3, r4, r5, pc}
 8009a8c:	b118      	cbz	r0, 8009a96 <_fflush_r+0x1a>
 8009a8e:	6983      	ldr	r3, [r0, #24]
 8009a90:	b90b      	cbnz	r3, 8009a96 <_fflush_r+0x1a>
 8009a92:	f000 f887 	bl	8009ba4 <__sinit>
 8009a96:	4b14      	ldr	r3, [pc, #80]	; (8009ae8 <_fflush_r+0x6c>)
 8009a98:	429c      	cmp	r4, r3
 8009a9a:	d11b      	bne.n	8009ad4 <_fflush_r+0x58>
 8009a9c:	686c      	ldr	r4, [r5, #4]
 8009a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d0ef      	beq.n	8009a86 <_fflush_r+0xa>
 8009aa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009aa8:	07d0      	lsls	r0, r2, #31
 8009aaa:	d404      	bmi.n	8009ab6 <_fflush_r+0x3a>
 8009aac:	0599      	lsls	r1, r3, #22
 8009aae:	d402      	bmi.n	8009ab6 <_fflush_r+0x3a>
 8009ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ab2:	f000 f915 	bl	8009ce0 <__retarget_lock_acquire_recursive>
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	4621      	mov	r1, r4
 8009aba:	f7ff ff5d 	bl	8009978 <__sflush_r>
 8009abe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ac0:	4605      	mov	r5, r0
 8009ac2:	07da      	lsls	r2, r3, #31
 8009ac4:	d4e0      	bmi.n	8009a88 <_fflush_r+0xc>
 8009ac6:	89a3      	ldrh	r3, [r4, #12]
 8009ac8:	059b      	lsls	r3, r3, #22
 8009aca:	d4dd      	bmi.n	8009a88 <_fflush_r+0xc>
 8009acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ace:	f000 f908 	bl	8009ce2 <__retarget_lock_release_recursive>
 8009ad2:	e7d9      	b.n	8009a88 <_fflush_r+0xc>
 8009ad4:	4b05      	ldr	r3, [pc, #20]	; (8009aec <_fflush_r+0x70>)
 8009ad6:	429c      	cmp	r4, r3
 8009ad8:	d101      	bne.n	8009ade <_fflush_r+0x62>
 8009ada:	68ac      	ldr	r4, [r5, #8]
 8009adc:	e7df      	b.n	8009a9e <_fflush_r+0x22>
 8009ade:	4b04      	ldr	r3, [pc, #16]	; (8009af0 <_fflush_r+0x74>)
 8009ae0:	429c      	cmp	r4, r3
 8009ae2:	bf08      	it	eq
 8009ae4:	68ec      	ldreq	r4, [r5, #12]
 8009ae6:	e7da      	b.n	8009a9e <_fflush_r+0x22>
 8009ae8:	0801b2ac 	.word	0x0801b2ac
 8009aec:	0801b2cc 	.word	0x0801b2cc
 8009af0:	0801b28c 	.word	0x0801b28c

08009af4 <std>:
 8009af4:	2300      	movs	r3, #0
 8009af6:	b510      	push	{r4, lr}
 8009af8:	4604      	mov	r4, r0
 8009afa:	e9c0 3300 	strd	r3, r3, [r0]
 8009afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b02:	6083      	str	r3, [r0, #8]
 8009b04:	8181      	strh	r1, [r0, #12]
 8009b06:	6643      	str	r3, [r0, #100]	; 0x64
 8009b08:	81c2      	strh	r2, [r0, #14]
 8009b0a:	6183      	str	r3, [r0, #24]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	2208      	movs	r2, #8
 8009b10:	305c      	adds	r0, #92	; 0x5c
 8009b12:	f7fb fe29 	bl	8005768 <memset>
 8009b16:	4b05      	ldr	r3, [pc, #20]	; (8009b2c <std+0x38>)
 8009b18:	6224      	str	r4, [r4, #32]
 8009b1a:	6263      	str	r3, [r4, #36]	; 0x24
 8009b1c:	4b04      	ldr	r3, [pc, #16]	; (8009b30 <std+0x3c>)
 8009b1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b20:	4b04      	ldr	r3, [pc, #16]	; (8009b34 <std+0x40>)
 8009b22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b24:	4b04      	ldr	r3, [pc, #16]	; (8009b38 <std+0x44>)
 8009b26:	6323      	str	r3, [r4, #48]	; 0x30
 8009b28:	bd10      	pop	{r4, pc}
 8009b2a:	bf00      	nop
 8009b2c:	08009e49 	.word	0x08009e49
 8009b30:	08009e6b 	.word	0x08009e6b
 8009b34:	08009ea3 	.word	0x08009ea3
 8009b38:	08009ec7 	.word	0x08009ec7

08009b3c <_cleanup_r>:
 8009b3c:	4901      	ldr	r1, [pc, #4]	; (8009b44 <_cleanup_r+0x8>)
 8009b3e:	f000 b8af 	b.w	8009ca0 <_fwalk_reent>
 8009b42:	bf00      	nop
 8009b44:	08009a7d 	.word	0x08009a7d

08009b48 <__sfmoreglue>:
 8009b48:	2268      	movs	r2, #104	; 0x68
 8009b4a:	b570      	push	{r4, r5, r6, lr}
 8009b4c:	1e4d      	subs	r5, r1, #1
 8009b4e:	4355      	muls	r5, r2
 8009b50:	460e      	mov	r6, r1
 8009b52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b56:	f7ff fa7d 	bl	8009054 <_malloc_r>
 8009b5a:	4604      	mov	r4, r0
 8009b5c:	b140      	cbz	r0, 8009b70 <__sfmoreglue+0x28>
 8009b5e:	2100      	movs	r1, #0
 8009b60:	e9c0 1600 	strd	r1, r6, [r0]
 8009b64:	300c      	adds	r0, #12
 8009b66:	60a0      	str	r0, [r4, #8]
 8009b68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b6c:	f7fb fdfc 	bl	8005768 <memset>
 8009b70:	4620      	mov	r0, r4
 8009b72:	bd70      	pop	{r4, r5, r6, pc}

08009b74 <__sfp_lock_acquire>:
 8009b74:	4801      	ldr	r0, [pc, #4]	; (8009b7c <__sfp_lock_acquire+0x8>)
 8009b76:	f000 b8b3 	b.w	8009ce0 <__retarget_lock_acquire_recursive>
 8009b7a:	bf00      	nop
 8009b7c:	200014d5 	.word	0x200014d5

08009b80 <__sfp_lock_release>:
 8009b80:	4801      	ldr	r0, [pc, #4]	; (8009b88 <__sfp_lock_release+0x8>)
 8009b82:	f000 b8ae 	b.w	8009ce2 <__retarget_lock_release_recursive>
 8009b86:	bf00      	nop
 8009b88:	200014d5 	.word	0x200014d5

08009b8c <__sinit_lock_acquire>:
 8009b8c:	4801      	ldr	r0, [pc, #4]	; (8009b94 <__sinit_lock_acquire+0x8>)
 8009b8e:	f000 b8a7 	b.w	8009ce0 <__retarget_lock_acquire_recursive>
 8009b92:	bf00      	nop
 8009b94:	200014d6 	.word	0x200014d6

08009b98 <__sinit_lock_release>:
 8009b98:	4801      	ldr	r0, [pc, #4]	; (8009ba0 <__sinit_lock_release+0x8>)
 8009b9a:	f000 b8a2 	b.w	8009ce2 <__retarget_lock_release_recursive>
 8009b9e:	bf00      	nop
 8009ba0:	200014d6 	.word	0x200014d6

08009ba4 <__sinit>:
 8009ba4:	b510      	push	{r4, lr}
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	f7ff fff0 	bl	8009b8c <__sinit_lock_acquire>
 8009bac:	69a3      	ldr	r3, [r4, #24]
 8009bae:	b11b      	cbz	r3, 8009bb8 <__sinit+0x14>
 8009bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bb4:	f7ff bff0 	b.w	8009b98 <__sinit_lock_release>
 8009bb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bbc:	6523      	str	r3, [r4, #80]	; 0x50
 8009bbe:	4b13      	ldr	r3, [pc, #76]	; (8009c0c <__sinit+0x68>)
 8009bc0:	4a13      	ldr	r2, [pc, #76]	; (8009c10 <__sinit+0x6c>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009bc6:	42a3      	cmp	r3, r4
 8009bc8:	bf08      	it	eq
 8009bca:	2301      	moveq	r3, #1
 8009bcc:	4620      	mov	r0, r4
 8009bce:	bf08      	it	eq
 8009bd0:	61a3      	streq	r3, [r4, #24]
 8009bd2:	f000 f81f 	bl	8009c14 <__sfp>
 8009bd6:	6060      	str	r0, [r4, #4]
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f000 f81b 	bl	8009c14 <__sfp>
 8009bde:	60a0      	str	r0, [r4, #8]
 8009be0:	4620      	mov	r0, r4
 8009be2:	f000 f817 	bl	8009c14 <__sfp>
 8009be6:	2200      	movs	r2, #0
 8009be8:	2104      	movs	r1, #4
 8009bea:	60e0      	str	r0, [r4, #12]
 8009bec:	6860      	ldr	r0, [r4, #4]
 8009bee:	f7ff ff81 	bl	8009af4 <std>
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	2109      	movs	r1, #9
 8009bf6:	68a0      	ldr	r0, [r4, #8]
 8009bf8:	f7ff ff7c 	bl	8009af4 <std>
 8009bfc:	2202      	movs	r2, #2
 8009bfe:	2112      	movs	r1, #18
 8009c00:	68e0      	ldr	r0, [r4, #12]
 8009c02:	f7ff ff77 	bl	8009af4 <std>
 8009c06:	2301      	movs	r3, #1
 8009c08:	61a3      	str	r3, [r4, #24]
 8009c0a:	e7d1      	b.n	8009bb0 <__sinit+0xc>
 8009c0c:	0801ae48 	.word	0x0801ae48
 8009c10:	08009b3d 	.word	0x08009b3d

08009c14 <__sfp>:
 8009c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c16:	4607      	mov	r7, r0
 8009c18:	f7ff ffac 	bl	8009b74 <__sfp_lock_acquire>
 8009c1c:	4b1e      	ldr	r3, [pc, #120]	; (8009c98 <__sfp+0x84>)
 8009c1e:	681e      	ldr	r6, [r3, #0]
 8009c20:	69b3      	ldr	r3, [r6, #24]
 8009c22:	b913      	cbnz	r3, 8009c2a <__sfp+0x16>
 8009c24:	4630      	mov	r0, r6
 8009c26:	f7ff ffbd 	bl	8009ba4 <__sinit>
 8009c2a:	3648      	adds	r6, #72	; 0x48
 8009c2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c30:	3b01      	subs	r3, #1
 8009c32:	d503      	bpl.n	8009c3c <__sfp+0x28>
 8009c34:	6833      	ldr	r3, [r6, #0]
 8009c36:	b30b      	cbz	r3, 8009c7c <__sfp+0x68>
 8009c38:	6836      	ldr	r6, [r6, #0]
 8009c3a:	e7f7      	b.n	8009c2c <__sfp+0x18>
 8009c3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c40:	b9d5      	cbnz	r5, 8009c78 <__sfp+0x64>
 8009c42:	4b16      	ldr	r3, [pc, #88]	; (8009c9c <__sfp+0x88>)
 8009c44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c48:	60e3      	str	r3, [r4, #12]
 8009c4a:	6665      	str	r5, [r4, #100]	; 0x64
 8009c4c:	f000 f847 	bl	8009cde <__retarget_lock_init_recursive>
 8009c50:	f7ff ff96 	bl	8009b80 <__sfp_lock_release>
 8009c54:	2208      	movs	r2, #8
 8009c56:	4629      	mov	r1, r5
 8009c58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c60:	6025      	str	r5, [r4, #0]
 8009c62:	61a5      	str	r5, [r4, #24]
 8009c64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c68:	f7fb fd7e 	bl	8005768 <memset>
 8009c6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c74:	4620      	mov	r0, r4
 8009c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c78:	3468      	adds	r4, #104	; 0x68
 8009c7a:	e7d9      	b.n	8009c30 <__sfp+0x1c>
 8009c7c:	2104      	movs	r1, #4
 8009c7e:	4638      	mov	r0, r7
 8009c80:	f7ff ff62 	bl	8009b48 <__sfmoreglue>
 8009c84:	4604      	mov	r4, r0
 8009c86:	6030      	str	r0, [r6, #0]
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	d1d5      	bne.n	8009c38 <__sfp+0x24>
 8009c8c:	f7ff ff78 	bl	8009b80 <__sfp_lock_release>
 8009c90:	230c      	movs	r3, #12
 8009c92:	603b      	str	r3, [r7, #0]
 8009c94:	e7ee      	b.n	8009c74 <__sfp+0x60>
 8009c96:	bf00      	nop
 8009c98:	0801ae48 	.word	0x0801ae48
 8009c9c:	ffff0001 	.word	0xffff0001

08009ca0 <_fwalk_reent>:
 8009ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ca4:	4606      	mov	r6, r0
 8009ca6:	4688      	mov	r8, r1
 8009ca8:	2700      	movs	r7, #0
 8009caa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009cae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cb2:	f1b9 0901 	subs.w	r9, r9, #1
 8009cb6:	d505      	bpl.n	8009cc4 <_fwalk_reent+0x24>
 8009cb8:	6824      	ldr	r4, [r4, #0]
 8009cba:	2c00      	cmp	r4, #0
 8009cbc:	d1f7      	bne.n	8009cae <_fwalk_reent+0xe>
 8009cbe:	4638      	mov	r0, r7
 8009cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cc4:	89ab      	ldrh	r3, [r5, #12]
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d907      	bls.n	8009cda <_fwalk_reent+0x3a>
 8009cca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	d003      	beq.n	8009cda <_fwalk_reent+0x3a>
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	47c0      	blx	r8
 8009cd8:	4307      	orrs	r7, r0
 8009cda:	3568      	adds	r5, #104	; 0x68
 8009cdc:	e7e9      	b.n	8009cb2 <_fwalk_reent+0x12>

08009cde <__retarget_lock_init_recursive>:
 8009cde:	4770      	bx	lr

08009ce0 <__retarget_lock_acquire_recursive>:
 8009ce0:	4770      	bx	lr

08009ce2 <__retarget_lock_release_recursive>:
 8009ce2:	4770      	bx	lr

08009ce4 <__swhatbuf_r>:
 8009ce4:	b570      	push	{r4, r5, r6, lr}
 8009ce6:	460e      	mov	r6, r1
 8009ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cec:	4614      	mov	r4, r2
 8009cee:	2900      	cmp	r1, #0
 8009cf0:	461d      	mov	r5, r3
 8009cf2:	b096      	sub	sp, #88	; 0x58
 8009cf4:	da08      	bge.n	8009d08 <__swhatbuf_r+0x24>
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009cfc:	602a      	str	r2, [r5, #0]
 8009cfe:	061a      	lsls	r2, r3, #24
 8009d00:	d410      	bmi.n	8009d24 <__swhatbuf_r+0x40>
 8009d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d06:	e00e      	b.n	8009d26 <__swhatbuf_r+0x42>
 8009d08:	466a      	mov	r2, sp
 8009d0a:	f000 f903 	bl	8009f14 <_fstat_r>
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	dbf1      	blt.n	8009cf6 <__swhatbuf_r+0x12>
 8009d12:	9a01      	ldr	r2, [sp, #4]
 8009d14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d1c:	425a      	negs	r2, r3
 8009d1e:	415a      	adcs	r2, r3
 8009d20:	602a      	str	r2, [r5, #0]
 8009d22:	e7ee      	b.n	8009d02 <__swhatbuf_r+0x1e>
 8009d24:	2340      	movs	r3, #64	; 0x40
 8009d26:	2000      	movs	r0, #0
 8009d28:	6023      	str	r3, [r4, #0]
 8009d2a:	b016      	add	sp, #88	; 0x58
 8009d2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d30 <__smakebuf_r>:
 8009d30:	898b      	ldrh	r3, [r1, #12]
 8009d32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d34:	079d      	lsls	r5, r3, #30
 8009d36:	4606      	mov	r6, r0
 8009d38:	460c      	mov	r4, r1
 8009d3a:	d507      	bpl.n	8009d4c <__smakebuf_r+0x1c>
 8009d3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d40:	6023      	str	r3, [r4, #0]
 8009d42:	6123      	str	r3, [r4, #16]
 8009d44:	2301      	movs	r3, #1
 8009d46:	6163      	str	r3, [r4, #20]
 8009d48:	b002      	add	sp, #8
 8009d4a:	bd70      	pop	{r4, r5, r6, pc}
 8009d4c:	466a      	mov	r2, sp
 8009d4e:	ab01      	add	r3, sp, #4
 8009d50:	f7ff ffc8 	bl	8009ce4 <__swhatbuf_r>
 8009d54:	9900      	ldr	r1, [sp, #0]
 8009d56:	4605      	mov	r5, r0
 8009d58:	4630      	mov	r0, r6
 8009d5a:	f7ff f97b 	bl	8009054 <_malloc_r>
 8009d5e:	b948      	cbnz	r0, 8009d74 <__smakebuf_r+0x44>
 8009d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d64:	059a      	lsls	r2, r3, #22
 8009d66:	d4ef      	bmi.n	8009d48 <__smakebuf_r+0x18>
 8009d68:	f023 0303 	bic.w	r3, r3, #3
 8009d6c:	f043 0302 	orr.w	r3, r3, #2
 8009d70:	81a3      	strh	r3, [r4, #12]
 8009d72:	e7e3      	b.n	8009d3c <__smakebuf_r+0xc>
 8009d74:	4b0d      	ldr	r3, [pc, #52]	; (8009dac <__smakebuf_r+0x7c>)
 8009d76:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d78:	89a3      	ldrh	r3, [r4, #12]
 8009d7a:	6020      	str	r0, [r4, #0]
 8009d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d80:	81a3      	strh	r3, [r4, #12]
 8009d82:	9b00      	ldr	r3, [sp, #0]
 8009d84:	6120      	str	r0, [r4, #16]
 8009d86:	6163      	str	r3, [r4, #20]
 8009d88:	9b01      	ldr	r3, [sp, #4]
 8009d8a:	b15b      	cbz	r3, 8009da4 <__smakebuf_r+0x74>
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d92:	f000 f8d1 	bl	8009f38 <_isatty_r>
 8009d96:	b128      	cbz	r0, 8009da4 <__smakebuf_r+0x74>
 8009d98:	89a3      	ldrh	r3, [r4, #12]
 8009d9a:	f023 0303 	bic.w	r3, r3, #3
 8009d9e:	f043 0301 	orr.w	r3, r3, #1
 8009da2:	81a3      	strh	r3, [r4, #12]
 8009da4:	89a0      	ldrh	r0, [r4, #12]
 8009da6:	4305      	orrs	r5, r0
 8009da8:	81a5      	strh	r5, [r4, #12]
 8009daa:	e7cd      	b.n	8009d48 <__smakebuf_r+0x18>
 8009dac:	08009b3d 	.word	0x08009b3d

08009db0 <_malloc_usable_size_r>:
 8009db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009db4:	1f18      	subs	r0, r3, #4
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	bfbc      	itt	lt
 8009dba:	580b      	ldrlt	r3, [r1, r0]
 8009dbc:	18c0      	addlt	r0, r0, r3
 8009dbe:	4770      	bx	lr

08009dc0 <_raise_r>:
 8009dc0:	291f      	cmp	r1, #31
 8009dc2:	b538      	push	{r3, r4, r5, lr}
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	460d      	mov	r5, r1
 8009dc8:	d904      	bls.n	8009dd4 <_raise_r+0x14>
 8009dca:	2316      	movs	r3, #22
 8009dcc:	6003      	str	r3, [r0, #0]
 8009dce:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd2:	bd38      	pop	{r3, r4, r5, pc}
 8009dd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009dd6:	b112      	cbz	r2, 8009dde <_raise_r+0x1e>
 8009dd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ddc:	b94b      	cbnz	r3, 8009df2 <_raise_r+0x32>
 8009dde:	4620      	mov	r0, r4
 8009de0:	f000 f830 	bl	8009e44 <_getpid_r>
 8009de4:	462a      	mov	r2, r5
 8009de6:	4601      	mov	r1, r0
 8009de8:	4620      	mov	r0, r4
 8009dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dee:	f000 b817 	b.w	8009e20 <_kill_r>
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d00a      	beq.n	8009e0c <_raise_r+0x4c>
 8009df6:	1c59      	adds	r1, r3, #1
 8009df8:	d103      	bne.n	8009e02 <_raise_r+0x42>
 8009dfa:	2316      	movs	r3, #22
 8009dfc:	6003      	str	r3, [r0, #0]
 8009dfe:	2001      	movs	r0, #1
 8009e00:	e7e7      	b.n	8009dd2 <_raise_r+0x12>
 8009e02:	2400      	movs	r4, #0
 8009e04:	4628      	mov	r0, r5
 8009e06:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e0a:	4798      	blx	r3
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	e7e0      	b.n	8009dd2 <_raise_r+0x12>

08009e10 <raise>:
 8009e10:	4b02      	ldr	r3, [pc, #8]	; (8009e1c <raise+0xc>)
 8009e12:	4601      	mov	r1, r0
 8009e14:	6818      	ldr	r0, [r3, #0]
 8009e16:	f7ff bfd3 	b.w	8009dc0 <_raise_r>
 8009e1a:	bf00      	nop
 8009e1c:	2000014c 	.word	0x2000014c

08009e20 <_kill_r>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	2300      	movs	r3, #0
 8009e24:	4d06      	ldr	r5, [pc, #24]	; (8009e40 <_kill_r+0x20>)
 8009e26:	4604      	mov	r4, r0
 8009e28:	4608      	mov	r0, r1
 8009e2a:	4611      	mov	r1, r2
 8009e2c:	602b      	str	r3, [r5, #0]
 8009e2e:	f7f9 fc01 	bl	8003634 <_kill>
 8009e32:	1c43      	adds	r3, r0, #1
 8009e34:	d102      	bne.n	8009e3c <_kill_r+0x1c>
 8009e36:	682b      	ldr	r3, [r5, #0]
 8009e38:	b103      	cbz	r3, 8009e3c <_kill_r+0x1c>
 8009e3a:	6023      	str	r3, [r4, #0]
 8009e3c:	bd38      	pop	{r3, r4, r5, pc}
 8009e3e:	bf00      	nop
 8009e40:	200014d0 	.word	0x200014d0

08009e44 <_getpid_r>:
 8009e44:	f7f9 bbf4 	b.w	8003630 <_getpid>

08009e48 <__sread>:
 8009e48:	b510      	push	{r4, lr}
 8009e4a:	460c      	mov	r4, r1
 8009e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e50:	f000 f894 	bl	8009f7c <_read_r>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	bfab      	itete	ge
 8009e58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e5a:	89a3      	ldrhlt	r3, [r4, #12]
 8009e5c:	181b      	addge	r3, r3, r0
 8009e5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e62:	bfac      	ite	ge
 8009e64:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e66:	81a3      	strhlt	r3, [r4, #12]
 8009e68:	bd10      	pop	{r4, pc}

08009e6a <__swrite>:
 8009e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6e:	461f      	mov	r7, r3
 8009e70:	898b      	ldrh	r3, [r1, #12]
 8009e72:	4605      	mov	r5, r0
 8009e74:	05db      	lsls	r3, r3, #23
 8009e76:	460c      	mov	r4, r1
 8009e78:	4616      	mov	r6, r2
 8009e7a:	d505      	bpl.n	8009e88 <__swrite+0x1e>
 8009e7c:	2302      	movs	r3, #2
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e84:	f000 f868 	bl	8009f58 <_lseek_r>
 8009e88:	89a3      	ldrh	r3, [r4, #12]
 8009e8a:	4632      	mov	r2, r6
 8009e8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e90:	81a3      	strh	r3, [r4, #12]
 8009e92:	4628      	mov	r0, r5
 8009e94:	463b      	mov	r3, r7
 8009e96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e9e:	f000 b817 	b.w	8009ed0 <_write_r>

08009ea2 <__sseek>:
 8009ea2:	b510      	push	{r4, lr}
 8009ea4:	460c      	mov	r4, r1
 8009ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eaa:	f000 f855 	bl	8009f58 <_lseek_r>
 8009eae:	1c43      	adds	r3, r0, #1
 8009eb0:	89a3      	ldrh	r3, [r4, #12]
 8009eb2:	bf15      	itete	ne
 8009eb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009eb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009eba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ebe:	81a3      	strheq	r3, [r4, #12]
 8009ec0:	bf18      	it	ne
 8009ec2:	81a3      	strhne	r3, [r4, #12]
 8009ec4:	bd10      	pop	{r4, pc}

08009ec6 <__sclose>:
 8009ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eca:	f000 b813 	b.w	8009ef4 <_close_r>
	...

08009ed0 <_write_r>:
 8009ed0:	b538      	push	{r3, r4, r5, lr}
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	4608      	mov	r0, r1
 8009ed6:	4611      	mov	r1, r2
 8009ed8:	2200      	movs	r2, #0
 8009eda:	4d05      	ldr	r5, [pc, #20]	; (8009ef0 <_write_r+0x20>)
 8009edc:	602a      	str	r2, [r5, #0]
 8009ede:	461a      	mov	r2, r3
 8009ee0:	f7f9 fbc6 	bl	8003670 <_write>
 8009ee4:	1c43      	adds	r3, r0, #1
 8009ee6:	d102      	bne.n	8009eee <_write_r+0x1e>
 8009ee8:	682b      	ldr	r3, [r5, #0]
 8009eea:	b103      	cbz	r3, 8009eee <_write_r+0x1e>
 8009eec:	6023      	str	r3, [r4, #0]
 8009eee:	bd38      	pop	{r3, r4, r5, pc}
 8009ef0:	200014d0 	.word	0x200014d0

08009ef4 <_close_r>:
 8009ef4:	b538      	push	{r3, r4, r5, lr}
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	4d05      	ldr	r5, [pc, #20]	; (8009f10 <_close_r+0x1c>)
 8009efa:	4604      	mov	r4, r0
 8009efc:	4608      	mov	r0, r1
 8009efe:	602b      	str	r3, [r5, #0]
 8009f00:	f7f9 fbc4 	bl	800368c <_close>
 8009f04:	1c43      	adds	r3, r0, #1
 8009f06:	d102      	bne.n	8009f0e <_close_r+0x1a>
 8009f08:	682b      	ldr	r3, [r5, #0]
 8009f0a:	b103      	cbz	r3, 8009f0e <_close_r+0x1a>
 8009f0c:	6023      	str	r3, [r4, #0]
 8009f0e:	bd38      	pop	{r3, r4, r5, pc}
 8009f10:	200014d0 	.word	0x200014d0

08009f14 <_fstat_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	2300      	movs	r3, #0
 8009f18:	4d06      	ldr	r5, [pc, #24]	; (8009f34 <_fstat_r+0x20>)
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	4608      	mov	r0, r1
 8009f1e:	4611      	mov	r1, r2
 8009f20:	602b      	str	r3, [r5, #0]
 8009f22:	f7f9 fbb7 	bl	8003694 <_fstat>
 8009f26:	1c43      	adds	r3, r0, #1
 8009f28:	d102      	bne.n	8009f30 <_fstat_r+0x1c>
 8009f2a:	682b      	ldr	r3, [r5, #0]
 8009f2c:	b103      	cbz	r3, 8009f30 <_fstat_r+0x1c>
 8009f2e:	6023      	str	r3, [r4, #0]
 8009f30:	bd38      	pop	{r3, r4, r5, pc}
 8009f32:	bf00      	nop
 8009f34:	200014d0 	.word	0x200014d0

08009f38 <_isatty_r>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	4d05      	ldr	r5, [pc, #20]	; (8009f54 <_isatty_r+0x1c>)
 8009f3e:	4604      	mov	r4, r0
 8009f40:	4608      	mov	r0, r1
 8009f42:	602b      	str	r3, [r5, #0]
 8009f44:	f7f9 fbac 	bl	80036a0 <_isatty>
 8009f48:	1c43      	adds	r3, r0, #1
 8009f4a:	d102      	bne.n	8009f52 <_isatty_r+0x1a>
 8009f4c:	682b      	ldr	r3, [r5, #0]
 8009f4e:	b103      	cbz	r3, 8009f52 <_isatty_r+0x1a>
 8009f50:	6023      	str	r3, [r4, #0]
 8009f52:	bd38      	pop	{r3, r4, r5, pc}
 8009f54:	200014d0 	.word	0x200014d0

08009f58 <_lseek_r>:
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	4608      	mov	r0, r1
 8009f5e:	4611      	mov	r1, r2
 8009f60:	2200      	movs	r2, #0
 8009f62:	4d05      	ldr	r5, [pc, #20]	; (8009f78 <_lseek_r+0x20>)
 8009f64:	602a      	str	r2, [r5, #0]
 8009f66:	461a      	mov	r2, r3
 8009f68:	f7f9 fb9c 	bl	80036a4 <_lseek>
 8009f6c:	1c43      	adds	r3, r0, #1
 8009f6e:	d102      	bne.n	8009f76 <_lseek_r+0x1e>
 8009f70:	682b      	ldr	r3, [r5, #0]
 8009f72:	b103      	cbz	r3, 8009f76 <_lseek_r+0x1e>
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	bd38      	pop	{r3, r4, r5, pc}
 8009f78:	200014d0 	.word	0x200014d0

08009f7c <_read_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	4604      	mov	r4, r0
 8009f80:	4608      	mov	r0, r1
 8009f82:	4611      	mov	r1, r2
 8009f84:	2200      	movs	r2, #0
 8009f86:	4d05      	ldr	r5, [pc, #20]	; (8009f9c <_read_r+0x20>)
 8009f88:	602a      	str	r2, [r5, #0]
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	f7f9 fb62 	bl	8003654 <_read>
 8009f90:	1c43      	adds	r3, r0, #1
 8009f92:	d102      	bne.n	8009f9a <_read_r+0x1e>
 8009f94:	682b      	ldr	r3, [r5, #0]
 8009f96:	b103      	cbz	r3, 8009f9a <_read_r+0x1e>
 8009f98:	6023      	str	r3, [r4, #0]
 8009f9a:	bd38      	pop	{r3, r4, r5, pc}
 8009f9c:	200014d0 	.word	0x200014d0

08009fa0 <floor>:
 8009fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fa4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8009fa8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8009fac:	2e13      	cmp	r6, #19
 8009fae:	4602      	mov	r2, r0
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	4607      	mov	r7, r0
 8009fb4:	460c      	mov	r4, r1
 8009fb6:	4605      	mov	r5, r0
 8009fb8:	dc33      	bgt.n	800a022 <floor+0x82>
 8009fba:	2e00      	cmp	r6, #0
 8009fbc:	da14      	bge.n	8009fe8 <floor+0x48>
 8009fbe:	a334      	add	r3, pc, #208	; (adr r3, 800a090 <floor+0xf0>)
 8009fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc4:	f7f6 f986 	bl	80002d4 <__adddf3>
 8009fc8:	2200      	movs	r2, #0
 8009fca:	2300      	movs	r3, #0
 8009fcc:	f7f6 fdc8 	bl	8000b60 <__aeabi_dcmpgt>
 8009fd0:	b138      	cbz	r0, 8009fe2 <floor+0x42>
 8009fd2:	2c00      	cmp	r4, #0
 8009fd4:	da58      	bge.n	800a088 <floor+0xe8>
 8009fd6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009fda:	431d      	orrs	r5, r3
 8009fdc:	d001      	beq.n	8009fe2 <floor+0x42>
 8009fde:	2500      	movs	r5, #0
 8009fe0:	4c2d      	ldr	r4, [pc, #180]	; (800a098 <floor+0xf8>)
 8009fe2:	4623      	mov	r3, r4
 8009fe4:	462f      	mov	r7, r5
 8009fe6:	e025      	b.n	800a034 <floor+0x94>
 8009fe8:	4a2c      	ldr	r2, [pc, #176]	; (800a09c <floor+0xfc>)
 8009fea:	fa42 f806 	asr.w	r8, r2, r6
 8009fee:	ea01 0208 	and.w	r2, r1, r8
 8009ff2:	4302      	orrs	r2, r0
 8009ff4:	d01e      	beq.n	800a034 <floor+0x94>
 8009ff6:	a326      	add	r3, pc, #152	; (adr r3, 800a090 <floor+0xf0>)
 8009ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffc:	f7f6 f96a 	bl	80002d4 <__adddf3>
 800a000:	2200      	movs	r2, #0
 800a002:	2300      	movs	r3, #0
 800a004:	f7f6 fdac 	bl	8000b60 <__aeabi_dcmpgt>
 800a008:	2800      	cmp	r0, #0
 800a00a:	d0ea      	beq.n	8009fe2 <floor+0x42>
 800a00c:	2c00      	cmp	r4, #0
 800a00e:	bfbe      	ittt	lt
 800a010:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a014:	fa43 f606 	asrlt.w	r6, r3, r6
 800a018:	19a4      	addlt	r4, r4, r6
 800a01a:	2500      	movs	r5, #0
 800a01c:	ea24 0408 	bic.w	r4, r4, r8
 800a020:	e7df      	b.n	8009fe2 <floor+0x42>
 800a022:	2e33      	cmp	r6, #51	; 0x33
 800a024:	dd0a      	ble.n	800a03c <floor+0x9c>
 800a026:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a02a:	d103      	bne.n	800a034 <floor+0x94>
 800a02c:	f7f6 f952 	bl	80002d4 <__adddf3>
 800a030:	4607      	mov	r7, r0
 800a032:	460b      	mov	r3, r1
 800a034:	4638      	mov	r0, r7
 800a036:	4619      	mov	r1, r3
 800a038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a03c:	f04f 32ff 	mov.w	r2, #4294967295
 800a040:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800a044:	fa22 f808 	lsr.w	r8, r2, r8
 800a048:	ea18 0f00 	tst.w	r8, r0
 800a04c:	d0f2      	beq.n	800a034 <floor+0x94>
 800a04e:	a310      	add	r3, pc, #64	; (adr r3, 800a090 <floor+0xf0>)
 800a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a054:	f7f6 f93e 	bl	80002d4 <__adddf3>
 800a058:	2200      	movs	r2, #0
 800a05a:	2300      	movs	r3, #0
 800a05c:	f7f6 fd80 	bl	8000b60 <__aeabi_dcmpgt>
 800a060:	2800      	cmp	r0, #0
 800a062:	d0be      	beq.n	8009fe2 <floor+0x42>
 800a064:	2c00      	cmp	r4, #0
 800a066:	da02      	bge.n	800a06e <floor+0xce>
 800a068:	2e14      	cmp	r6, #20
 800a06a:	d103      	bne.n	800a074 <floor+0xd4>
 800a06c:	3401      	adds	r4, #1
 800a06e:	ea25 0508 	bic.w	r5, r5, r8
 800a072:	e7b6      	b.n	8009fe2 <floor+0x42>
 800a074:	2301      	movs	r3, #1
 800a076:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a07a:	fa03 f606 	lsl.w	r6, r3, r6
 800a07e:	4435      	add	r5, r6
 800a080:	42bd      	cmp	r5, r7
 800a082:	bf38      	it	cc
 800a084:	18e4      	addcc	r4, r4, r3
 800a086:	e7f2      	b.n	800a06e <floor+0xce>
 800a088:	2500      	movs	r5, #0
 800a08a:	462c      	mov	r4, r5
 800a08c:	e7a9      	b.n	8009fe2 <floor+0x42>
 800a08e:	bf00      	nop
 800a090:	8800759c 	.word	0x8800759c
 800a094:	7e37e43c 	.word	0x7e37e43c
 800a098:	bff00000 	.word	0xbff00000
 800a09c:	000fffff 	.word	0x000fffff

0800a0a0 <exp>:
 800a0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	460f      	mov	r7, r1
 800a0a6:	f000 f837 	bl	800a118 <__ieee754_exp>
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	460d      	mov	r5, r1
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	4639      	mov	r1, r7
 800a0b2:	f000 f9cb 	bl	800a44c <finite>
 800a0b6:	b168      	cbz	r0, 800a0d4 <exp+0x34>
 800a0b8:	a311      	add	r3, pc, #68	; (adr r3, 800a100 <exp+0x60>)
 800a0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0be:	4630      	mov	r0, r6
 800a0c0:	4639      	mov	r1, r7
 800a0c2:	f7f6 fd4d 	bl	8000b60 <__aeabi_dcmpgt>
 800a0c6:	b140      	cbz	r0, 800a0da <exp+0x3a>
 800a0c8:	f7fb fb0a 	bl	80056e0 <__errno>
 800a0cc:	2322      	movs	r3, #34	; 0x22
 800a0ce:	2400      	movs	r4, #0
 800a0d0:	4d0f      	ldr	r5, [pc, #60]	; (800a110 <exp+0x70>)
 800a0d2:	6003      	str	r3, [r0, #0]
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0da:	4630      	mov	r0, r6
 800a0dc:	a30a      	add	r3, pc, #40	; (adr r3, 800a108 <exp+0x68>)
 800a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e2:	4639      	mov	r1, r7
 800a0e4:	f7f6 fd1e 	bl	8000b24 <__aeabi_dcmplt>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d0f3      	beq.n	800a0d4 <exp+0x34>
 800a0ec:	f7fb faf8 	bl	80056e0 <__errno>
 800a0f0:	2322      	movs	r3, #34	; 0x22
 800a0f2:	2400      	movs	r4, #0
 800a0f4:	2500      	movs	r5, #0
 800a0f6:	6003      	str	r3, [r0, #0]
 800a0f8:	e7ec      	b.n	800a0d4 <exp+0x34>
 800a0fa:	bf00      	nop
 800a0fc:	f3af 8000 	nop.w
 800a100:	fefa39ef 	.word	0xfefa39ef
 800a104:	40862e42 	.word	0x40862e42
 800a108:	d52d3051 	.word	0xd52d3051
 800a10c:	c0874910 	.word	0xc0874910
 800a110:	7ff00000 	.word	0x7ff00000
 800a114:	00000000 	.word	0x00000000

0800a118 <__ieee754_exp>:
 800a118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a11c:	4fac      	ldr	r7, [pc, #688]	; (800a3d0 <__ieee754_exp+0x2b8>)
 800a11e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a122:	42bb      	cmp	r3, r7
 800a124:	4605      	mov	r5, r0
 800a126:	460c      	mov	r4, r1
 800a128:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800a12c:	d933      	bls.n	800a196 <__ieee754_exp+0x7e>
 800a12e:	4fa9      	ldr	r7, [pc, #676]	; (800a3d4 <__ieee754_exp+0x2bc>)
 800a130:	42bb      	cmp	r3, r7
 800a132:	d913      	bls.n	800a15c <__ieee754_exp+0x44>
 800a134:	4603      	mov	r3, r0
 800a136:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a13a:	4313      	orrs	r3, r2
 800a13c:	d006      	beq.n	800a14c <__ieee754_exp+0x34>
 800a13e:	4602      	mov	r2, r0
 800a140:	460b      	mov	r3, r1
 800a142:	f7f6 f8c7 	bl	80002d4 <__adddf3>
 800a146:	4605      	mov	r5, r0
 800a148:	460c      	mov	r4, r1
 800a14a:	e002      	b.n	800a152 <__ieee754_exp+0x3a>
 800a14c:	b10e      	cbz	r6, 800a152 <__ieee754_exp+0x3a>
 800a14e:	2500      	movs	r5, #0
 800a150:	462c      	mov	r4, r5
 800a152:	4628      	mov	r0, r5
 800a154:	4621      	mov	r1, r4
 800a156:	b004      	add	sp, #16
 800a158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a15c:	a386      	add	r3, pc, #536	; (adr r3, 800a378 <__ieee754_exp+0x260>)
 800a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a162:	f7f6 fcfd 	bl	8000b60 <__aeabi_dcmpgt>
 800a166:	4607      	mov	r7, r0
 800a168:	b128      	cbz	r0, 800a176 <__ieee754_exp+0x5e>
 800a16a:	2000      	movs	r0, #0
 800a16c:	b004      	add	sp, #16
 800a16e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a172:	f000 b966 	b.w	800a442 <__math_oflow>
 800a176:	4628      	mov	r0, r5
 800a178:	a381      	add	r3, pc, #516	; (adr r3, 800a380 <__ieee754_exp+0x268>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	4621      	mov	r1, r4
 800a180:	f7f6 fcd0 	bl	8000b24 <__aeabi_dcmplt>
 800a184:	2800      	cmp	r0, #0
 800a186:	f000 8085 	beq.w	800a294 <__ieee754_exp+0x17c>
 800a18a:	4638      	mov	r0, r7
 800a18c:	b004      	add	sp, #16
 800a18e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a192:	f000 b951 	b.w	800a438 <__math_uflow>
 800a196:	4a90      	ldr	r2, [pc, #576]	; (800a3d8 <__ieee754_exp+0x2c0>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	f240 80a7 	bls.w	800a2ec <__ieee754_exp+0x1d4>
 800a19e:	4a8f      	ldr	r2, [pc, #572]	; (800a3dc <__ieee754_exp+0x2c4>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d877      	bhi.n	800a294 <__ieee754_exp+0x17c>
 800a1a4:	4b8e      	ldr	r3, [pc, #568]	; (800a3e0 <__ieee754_exp+0x2c8>)
 800a1a6:	00f4      	lsls	r4, r6, #3
 800a1a8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b0:	f7f6 f88e 	bl	80002d0 <__aeabi_dsub>
 800a1b4:	4680      	mov	r8, r0
 800a1b6:	4689      	mov	r9, r1
 800a1b8:	4b8a      	ldr	r3, [pc, #552]	; (800a3e4 <__ieee754_exp+0x2cc>)
 800a1ba:	f1c6 0a01 	rsb	sl, r6, #1
 800a1be:	4423      	add	r3, r4
 800a1c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a1c4:	e9cd 3400 	strd	r3, r4, [sp]
 800a1c8:	ebaa 0a06 	sub.w	sl, sl, r6
 800a1cc:	4640      	mov	r0, r8
 800a1ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1d2:	4649      	mov	r1, r9
 800a1d4:	f7f6 f87c 	bl	80002d0 <__aeabi_dsub>
 800a1d8:	4605      	mov	r5, r0
 800a1da:	460c      	mov	r4, r1
 800a1dc:	462a      	mov	r2, r5
 800a1de:	4623      	mov	r3, r4
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	f7f6 fa2c 	bl	8000640 <__aeabi_dmul>
 800a1e8:	a367      	add	r3, pc, #412	; (adr r3, 800a388 <__ieee754_exp+0x270>)
 800a1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	460f      	mov	r7, r1
 800a1f2:	f7f6 fa25 	bl	8000640 <__aeabi_dmul>
 800a1f6:	a366      	add	r3, pc, #408	; (adr r3, 800a390 <__ieee754_exp+0x278>)
 800a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fc:	f7f6 f868 	bl	80002d0 <__aeabi_dsub>
 800a200:	4632      	mov	r2, r6
 800a202:	463b      	mov	r3, r7
 800a204:	f7f6 fa1c 	bl	8000640 <__aeabi_dmul>
 800a208:	a363      	add	r3, pc, #396	; (adr r3, 800a398 <__ieee754_exp+0x280>)
 800a20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20e:	f7f6 f861 	bl	80002d4 <__adddf3>
 800a212:	4632      	mov	r2, r6
 800a214:	463b      	mov	r3, r7
 800a216:	f7f6 fa13 	bl	8000640 <__aeabi_dmul>
 800a21a:	a361      	add	r3, pc, #388	; (adr r3, 800a3a0 <__ieee754_exp+0x288>)
 800a21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a220:	f7f6 f856 	bl	80002d0 <__aeabi_dsub>
 800a224:	4632      	mov	r2, r6
 800a226:	463b      	mov	r3, r7
 800a228:	f7f6 fa0a 	bl	8000640 <__aeabi_dmul>
 800a22c:	a35e      	add	r3, pc, #376	; (adr r3, 800a3a8 <__ieee754_exp+0x290>)
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	f7f6 f84f 	bl	80002d4 <__adddf3>
 800a236:	4632      	mov	r2, r6
 800a238:	463b      	mov	r3, r7
 800a23a:	f7f6 fa01 	bl	8000640 <__aeabi_dmul>
 800a23e:	4602      	mov	r2, r0
 800a240:	460b      	mov	r3, r1
 800a242:	4628      	mov	r0, r5
 800a244:	4621      	mov	r1, r4
 800a246:	f7f6 f843 	bl	80002d0 <__aeabi_dsub>
 800a24a:	4602      	mov	r2, r0
 800a24c:	460b      	mov	r3, r1
 800a24e:	4606      	mov	r6, r0
 800a250:	460f      	mov	r7, r1
 800a252:	4628      	mov	r0, r5
 800a254:	4621      	mov	r1, r4
 800a256:	f7f6 f9f3 	bl	8000640 <__aeabi_dmul>
 800a25a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a25e:	f1ba 0f00 	cmp.w	sl, #0
 800a262:	d15a      	bne.n	800a31a <__ieee754_exp+0x202>
 800a264:	2200      	movs	r2, #0
 800a266:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a26a:	4630      	mov	r0, r6
 800a26c:	4639      	mov	r1, r7
 800a26e:	f7f6 f82f 	bl	80002d0 <__aeabi_dsub>
 800a272:	4602      	mov	r2, r0
 800a274:	460b      	mov	r3, r1
 800a276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a27a:	f7f6 fb0b 	bl	8000894 <__aeabi_ddiv>
 800a27e:	462a      	mov	r2, r5
 800a280:	4623      	mov	r3, r4
 800a282:	f7f6 f825 	bl	80002d0 <__aeabi_dsub>
 800a286:	4602      	mov	r2, r0
 800a288:	460b      	mov	r3, r1
 800a28a:	2000      	movs	r0, #0
 800a28c:	4956      	ldr	r1, [pc, #344]	; (800a3e8 <__ieee754_exp+0x2d0>)
 800a28e:	f7f6 f81f 	bl	80002d0 <__aeabi_dsub>
 800a292:	e758      	b.n	800a146 <__ieee754_exp+0x2e>
 800a294:	4855      	ldr	r0, [pc, #340]	; (800a3ec <__ieee754_exp+0x2d4>)
 800a296:	a346      	add	r3, pc, #280	; (adr r3, 800a3b0 <__ieee754_exp+0x298>)
 800a298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29c:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	f7f6 f9cc 	bl	8000640 <__aeabi_dmul>
 800a2a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a2ac:	f7f6 f812 	bl	80002d4 <__adddf3>
 800a2b0:	f7f6 fc76 	bl	8000ba0 <__aeabi_d2iz>
 800a2b4:	4682      	mov	sl, r0
 800a2b6:	f7f6 f959 	bl	800056c <__aeabi_i2d>
 800a2ba:	a33f      	add	r3, pc, #252	; (adr r3, 800a3b8 <__ieee754_exp+0x2a0>)
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	4606      	mov	r6, r0
 800a2c2:	460f      	mov	r7, r1
 800a2c4:	f7f6 f9bc 	bl	8000640 <__aeabi_dmul>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	f7f5 fffe 	bl	80002d0 <__aeabi_dsub>
 800a2d4:	a33a      	add	r3, pc, #232	; (adr r3, 800a3c0 <__ieee754_exp+0x2a8>)
 800a2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2da:	4680      	mov	r8, r0
 800a2dc:	4689      	mov	r9, r1
 800a2de:	4630      	mov	r0, r6
 800a2e0:	4639      	mov	r1, r7
 800a2e2:	f7f6 f9ad 	bl	8000640 <__aeabi_dmul>
 800a2e6:	e9cd 0100 	strd	r0, r1, [sp]
 800a2ea:	e76f      	b.n	800a1cc <__ieee754_exp+0xb4>
 800a2ec:	4a40      	ldr	r2, [pc, #256]	; (800a3f0 <__ieee754_exp+0x2d8>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d80e      	bhi.n	800a310 <__ieee754_exp+0x1f8>
 800a2f2:	a335      	add	r3, pc, #212	; (adr r3, 800a3c8 <__ieee754_exp+0x2b0>)
 800a2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f8:	f7f5 ffec 	bl	80002d4 <__adddf3>
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	4b3a      	ldr	r3, [pc, #232]	; (800a3e8 <__ieee754_exp+0x2d0>)
 800a300:	f7f6 fc2e 	bl	8000b60 <__aeabi_dcmpgt>
 800a304:	b138      	cbz	r0, 800a316 <__ieee754_exp+0x1fe>
 800a306:	2200      	movs	r2, #0
 800a308:	4628      	mov	r0, r5
 800a30a:	4621      	mov	r1, r4
 800a30c:	4b36      	ldr	r3, [pc, #216]	; (800a3e8 <__ieee754_exp+0x2d0>)
 800a30e:	e718      	b.n	800a142 <__ieee754_exp+0x2a>
 800a310:	f04f 0a00 	mov.w	sl, #0
 800a314:	e762      	b.n	800a1dc <__ieee754_exp+0xc4>
 800a316:	4682      	mov	sl, r0
 800a318:	e760      	b.n	800a1dc <__ieee754_exp+0xc4>
 800a31a:	4632      	mov	r2, r6
 800a31c:	463b      	mov	r3, r7
 800a31e:	2000      	movs	r0, #0
 800a320:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a324:	f7f5 ffd4 	bl	80002d0 <__aeabi_dsub>
 800a328:	4602      	mov	r2, r0
 800a32a:	460b      	mov	r3, r1
 800a32c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a330:	f7f6 fab0 	bl	8000894 <__aeabi_ddiv>
 800a334:	4602      	mov	r2, r0
 800a336:	460b      	mov	r3, r1
 800a338:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a33c:	f7f5 ffc8 	bl	80002d0 <__aeabi_dsub>
 800a340:	4642      	mov	r2, r8
 800a342:	464b      	mov	r3, r9
 800a344:	f7f5 ffc4 	bl	80002d0 <__aeabi_dsub>
 800a348:	4602      	mov	r2, r0
 800a34a:	460b      	mov	r3, r1
 800a34c:	2000      	movs	r0, #0
 800a34e:	4926      	ldr	r1, [pc, #152]	; (800a3e8 <__ieee754_exp+0x2d0>)
 800a350:	f7f5 ffbe 	bl	80002d0 <__aeabi_dsub>
 800a354:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800a358:	4592      	cmp	sl, r2
 800a35a:	db02      	blt.n	800a362 <__ieee754_exp+0x24a>
 800a35c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800a360:	e6f1      	b.n	800a146 <__ieee754_exp+0x2e>
 800a362:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800a366:	2200      	movs	r2, #0
 800a368:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800a36c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800a370:	f7f6 f966 	bl	8000640 <__aeabi_dmul>
 800a374:	e6e7      	b.n	800a146 <__ieee754_exp+0x2e>
 800a376:	bf00      	nop
 800a378:	fefa39ef 	.word	0xfefa39ef
 800a37c:	40862e42 	.word	0x40862e42
 800a380:	d52d3051 	.word	0xd52d3051
 800a384:	c0874910 	.word	0xc0874910
 800a388:	72bea4d0 	.word	0x72bea4d0
 800a38c:	3e663769 	.word	0x3e663769
 800a390:	c5d26bf1 	.word	0xc5d26bf1
 800a394:	3ebbbd41 	.word	0x3ebbbd41
 800a398:	af25de2c 	.word	0xaf25de2c
 800a39c:	3f11566a 	.word	0x3f11566a
 800a3a0:	16bebd93 	.word	0x16bebd93
 800a3a4:	3f66c16c 	.word	0x3f66c16c
 800a3a8:	5555553e 	.word	0x5555553e
 800a3ac:	3fc55555 	.word	0x3fc55555
 800a3b0:	652b82fe 	.word	0x652b82fe
 800a3b4:	3ff71547 	.word	0x3ff71547
 800a3b8:	fee00000 	.word	0xfee00000
 800a3bc:	3fe62e42 	.word	0x3fe62e42
 800a3c0:	35793c76 	.word	0x35793c76
 800a3c4:	3dea39ef 	.word	0x3dea39ef
 800a3c8:	8800759c 	.word	0x8800759c
 800a3cc:	7e37e43c 	.word	0x7e37e43c
 800a3d0:	40862e41 	.word	0x40862e41
 800a3d4:	7fefffff 	.word	0x7fefffff
 800a3d8:	3fd62e42 	.word	0x3fd62e42
 800a3dc:	3ff0a2b1 	.word	0x3ff0a2b1
 800a3e0:	0801b300 	.word	0x0801b300
 800a3e4:	0801b310 	.word	0x0801b310
 800a3e8:	3ff00000 	.word	0x3ff00000
 800a3ec:	0801b2f0 	.word	0x0801b2f0
 800a3f0:	3defffff 	.word	0x3defffff

0800a3f4 <with_errno>:
 800a3f4:	b570      	push	{r4, r5, r6, lr}
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	460d      	mov	r5, r1
 800a3fa:	4616      	mov	r6, r2
 800a3fc:	f7fb f970 	bl	80056e0 <__errno>
 800a400:	4629      	mov	r1, r5
 800a402:	6006      	str	r6, [r0, #0]
 800a404:	4620      	mov	r0, r4
 800a406:	bd70      	pop	{r4, r5, r6, pc}

0800a408 <xflow>:
 800a408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a40a:	4615      	mov	r5, r2
 800a40c:	461c      	mov	r4, r3
 800a40e:	b180      	cbz	r0, 800a432 <xflow+0x2a>
 800a410:	4610      	mov	r0, r2
 800a412:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a416:	e9cd 0100 	strd	r0, r1, [sp]
 800a41a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a41e:	4628      	mov	r0, r5
 800a420:	4621      	mov	r1, r4
 800a422:	f7f6 f90d 	bl	8000640 <__aeabi_dmul>
 800a426:	2222      	movs	r2, #34	; 0x22
 800a428:	b003      	add	sp, #12
 800a42a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a42e:	f7ff bfe1 	b.w	800a3f4 <with_errno>
 800a432:	4610      	mov	r0, r2
 800a434:	4619      	mov	r1, r3
 800a436:	e7ee      	b.n	800a416 <xflow+0xe>

0800a438 <__math_uflow>:
 800a438:	2200      	movs	r2, #0
 800a43a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a43e:	f7ff bfe3 	b.w	800a408 <xflow>

0800a442 <__math_oflow>:
 800a442:	2200      	movs	r2, #0
 800a444:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a448:	f7ff bfde 	b.w	800a408 <xflow>

0800a44c <finite>:
 800a44c:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800a450:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a454:	0fc0      	lsrs	r0, r0, #31
 800a456:	4770      	bx	lr

0800a458 <_init>:
 800a458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45a:	bf00      	nop
 800a45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a45e:	bc08      	pop	{r3}
 800a460:	469e      	mov	lr, r3
 800a462:	4770      	bx	lr

0800a464 <_fini>:
 800a464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a466:	bf00      	nop
 800a468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a46a:	bc08      	pop	{r3}
 800a46c:	469e      	mov	lr, r3
 800a46e:	4770      	bx	lr
