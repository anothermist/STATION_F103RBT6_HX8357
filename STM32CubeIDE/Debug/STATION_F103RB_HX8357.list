
STATION_F103RB_HX8357.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099a0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011d6c  08009ab0  08009ab0  00019ab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b81c  0801b81c  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  0801b81c  0801b81c  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801b81c  0801b81c  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b81c  0801b81c  0002b81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b820  0801b820  0002b820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801b824  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  200001e8  0801ba08  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000082c  0801ba08  0003082c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e73  00000000  00000000  0003020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002440  00000000  00000000  00046080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005992  00000000  00000000  000484c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  0004de58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014d8  00000000  00000000  0004dea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccaf  00000000  00000000  0004f380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091381  00000000  00000000  0005c02f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed3b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e08  00000000  00000000  000ed400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00019c56  00000000  00000000  000ef208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009a98 	.word	0x08009a98

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08009a98 	.word	0x08009a98

08000150 <LCD_Bus>:
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
}

inline static void LCD_Bus(uint16_t val)
{
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8000150:	0bc3      	lsrs	r3, r0, #15
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 8000152:	bf14      	ite	ne
 8000154:	2302      	movne	r3, #2
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000156:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 800015a:	4a30      	ldr	r2, [pc, #192]	; (800021c <LCD_Bus+0xcc>)
 800015c:	6113      	str	r3, [r2, #16]
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800015e:	0443      	lsls	r3, r0, #17
    GPIOx->BSRR = GPIO_Pin;
 8000160:	bf4c      	ite	mi
 8000162:	2301      	movmi	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000164:	f44f 3380 	movpl.w	r3, #65536	; 0x10000
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8000168:	f410 5f00 	tst.w	r0, #8192	; 0x2000
    GPIOx->BSRR = GPIO_Pin;
 800016c:	bf14      	ite	ne
 800016e:	2108      	movne	r1, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000170:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
 8000174:	6113      	str	r3, [r2, #16]
 8000176:	4b2a      	ldr	r3, [pc, #168]	; (8000220 <LCD_Bus+0xd0>)
 8000178:	6119      	str	r1, [r3, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 800017a:	04c1      	lsls	r1, r0, #19
    GPIOx->BSRR = GPIO_Pin;
 800017c:	bf4c      	ite	mi
 800017e:	2104      	movmi	r1, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000180:	f44f 2180 	movpl.w	r1, #262144	; 0x40000
 8000184:	6119      	str	r1, [r3, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8000186:	0501      	lsls	r1, r0, #20
    GPIOx->BSRR = GPIO_Pin;
 8000188:	bf4c      	ite	mi
 800018a:	2102      	movmi	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800018c:	f44f 3100 	movpl.w	r1, #131072	; 0x20000
 8000190:	6119      	str	r1, [r3, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8000192:	0541      	lsls	r1, r0, #21
    GPIOx->BSRR = GPIO_Pin;
 8000194:	bf4c      	ite	mi
 8000196:	2101      	movmi	r1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000198:	f44f 3180 	movpl.w	r1, #65536	; 0x10000
 800019c:	6119      	str	r1, [r3, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 800019e:	0581      	lsls	r1, r0, #22
    GPIOx->BSRR = GPIO_Pin;
 80001a0:	bf4c      	ite	mi
 80001a2:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001a6:	f04f 4100 	movpl.w	r1, #2147483648	; 0x80000000
 80001aa:	6119      	str	r1, [r3, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80001ac:	05c1      	lsls	r1, r0, #23
    GPIOx->BSRR = GPIO_Pin;
 80001ae:	bf4c      	ite	mi
 80001b0:	f44f 4180 	movmi.w	r1, #16384	; 0x4000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001b4:	f04f 4180 	movpl.w	r1, #1073741824	; 0x40000000
 80001b8:	6119      	str	r1, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80001ba:	0601      	lsls	r1, r0, #24
    GPIOx->BSRR = GPIO_Pin;
 80001bc:	bf4c      	ite	mi
 80001be:	2104      	movmi	r1, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001c0:	f44f 2180 	movpl.w	r1, #262144	; 0x40000
 80001c4:	6111      	str	r1, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80001c6:	0641      	lsls	r1, r0, #25
    GPIOx->BSRR = GPIO_Pin;
 80001c8:	bf4c      	ite	mi
 80001ca:	2108      	movmi	r1, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001cc:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
 80001d0:	6111      	str	r1, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80001d2:	0681      	lsls	r1, r0, #26
    GPIOx->BSRR = GPIO_Pin;
 80001d4:	bf4c      	ite	mi
 80001d6:	2110      	movmi	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001d8:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 80001dc:	6111      	str	r1, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80001de:	06c1      	lsls	r1, r0, #27
    GPIOx->BSRR = GPIO_Pin;
 80001e0:	bf4c      	ite	mi
 80001e2:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001e4:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
 80001e8:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80001ea:	0701      	lsls	r1, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 80001ec:	bf4c      	ite	mi
 80001ee:	2140      	movmi	r1, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001f0:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
 80001f4:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80001f6:	0741      	lsls	r1, r0, #29
    GPIOx->BSRR = GPIO_Pin;
 80001f8:	bf4c      	ite	mi
 80001fa:	2180      	movmi	r1, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001fc:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
 8000200:	6111      	str	r1, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000202:	0781      	lsls	r1, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 8000204:	bf4c      	ite	mi
 8000206:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000208:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 800020c:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800020e:	07c2      	lsls	r2, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 8000210:	bf4c      	ite	mi
 8000212:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000214:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000218:	611a      	str	r2, [r3, #16]
}
 800021a:	4770      	bx	lr
 800021c:	40010800 	.word	0x40010800
 8000220:	40011000 	.word	0x40011000

08000224 <LCD_Send_Cmd>:
 8000224:	f44f 3380 	mov.w	r3, #65536	; 0x10000

inline static void LCD_Send_Cmd(uint16_t cmd)
{
 8000228:	b510      	push	{r4, lr}
 800022a:	4c08      	ldr	r4, [pc, #32]	; (800024c <LCD_Send_Cmd+0x28>)
 800022c:	6123      	str	r3, [r4, #16]
 800022e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000232:	6123      	str	r3, [r4, #16]
	LCD_RS_R
	LCD_CS_R
	LCD_Bus(cmd);
 8000234:	f7ff ff8c 	bl	8000150 <LCD_Bus>
 8000238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800023c:	6123      	str	r3, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 800023e:	2302      	movs	r3, #2
 8000240:	6123      	str	r3, [r4, #16]
 8000242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000246:	6123      	str	r3, [r4, #16]
	LCD_WR_R
	//_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 8000248:	bd10      	pop	{r4, pc}
 800024a:	bf00      	nop
 800024c:	40010c00 	.word	0x40010c00

08000250 <LCD_Send_Dat>:
 8000250:	2301      	movs	r3, #1

inline static void LCD_Send_Dat(uint16_t dat)
{
 8000252:	b510      	push	{r4, lr}
 8000254:	4c07      	ldr	r4, [pc, #28]	; (8000274 <LCD_Send_Dat+0x24>)
 8000256:	6123      	str	r3, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000258:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800025c:	6123      	str	r3, [r4, #16]
	LCD_RS_S
	LCD_CS_R	
	LCD_Bus(dat);
 800025e:	f7ff ff77 	bl	8000150 <LCD_Bus>
 8000262:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000266:	6123      	str	r3, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000268:	2302      	movs	r3, #2
 800026a:	6123      	str	r3, [r4, #16]
 800026c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000270:	6123      	str	r3, [r4, #16]
	LCD_WR_R
//	_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 8000272:	bd10      	pop	{r4, pc}
 8000274:	40010c00 	.word	0x40010c00

08000278 <LCD_Rect_Fill>:
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(0, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 8000278:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	4680      	mov	r8, r0
	uint32_t i = 0;
	uint32_t j = (uint32_t) w * (uint32_t) h;
	LCD_Window(y, x, y + h - 1, x + w - 1);
 800027e:	f108 35ff 	add.w	r5, r8, #4294967295
 8000282:	1e48      	subs	r0, r1, #1
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8000284:	fb03 f702 	mul.w	r7, r3, r2
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000288:	442a      	add	r2, r5
 800028a:	4403      	add	r3, r0
 800028c:	b295      	uxth	r5, r2
	data[0] = x1 >> 8;
 800028e:	0a0a      	lsrs	r2, r1, #8
 8000290:	f88d 2004 	strb.w	r2, [sp, #4]
	LCD_Send_Cmd(HX8357_CASET);
 8000294:	202a      	movs	r0, #42	; 0x2a
  data[2] = x2 >> 8;
 8000296:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800029a:	f10d 0904 	add.w	r9, sp, #4
{
 800029e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  data[1] = x1 & 0xFF;
 80002a0:	f88d 1005 	strb.w	r1, [sp, #5]
  data[2] = x2 >> 8;
 80002a4:	f88d 2006 	strb.w	r2, [sp, #6]
  data[3] = x2 & 0xFF;
 80002a8:	f88d 3007 	strb.w	r3, [sp, #7]
	LCD_Send_Cmd(HX8357_CASET);
 80002ac:	46ca      	mov	sl, r9
 80002ae:	f7ff ffb9 	bl	8000224 <LCD_Send_Cmd>
 80002b2:	2404      	movs	r4, #4
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 80002b4:	f81a 0b01 	ldrb.w	r0, [sl], #1
 80002b8:	3c01      	subs	r4, #1
 80002ba:	f7ff ffc9 	bl	8000250 <LCD_Send_Dat>
 80002be:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80002c2:	d1f7      	bne.n	80002b4 <LCD_Rect_Fill+0x3c>
	data[0] = y1 >> 8;
 80002c4:	ea4f 2318 	mov.w	r3, r8, lsr #8
 80002c8:	f88d 3004 	strb.w	r3, [sp, #4]
	LCD_Send_Cmd(HX8357_PASET);
 80002cc:	202b      	movs	r0, #43	; 0x2b
  data[2] = y2 >> 8;
 80002ce:	0a2b      	lsrs	r3, r5, #8
  data[1] = y1;
 80002d0:	f88d 8005 	strb.w	r8, [sp, #5]
  data[2] = y2 >> 8;
 80002d4:	f88d 3006 	strb.w	r3, [sp, #6]
  data[3] = y2;
 80002d8:	f88d 5007 	strb.w	r5, [sp, #7]
	LCD_Send_Cmd(HX8357_PASET);
 80002dc:	f7ff ffa2 	bl	8000224 <LCD_Send_Cmd>
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 80002e0:	3401      	adds	r4, #1
 80002e2:	f819 0b01 	ldrb.w	r0, [r9], #1
 80002e6:	b2e4      	uxtb	r4, r4
 80002e8:	f7ff ffb2 	bl	8000250 <LCD_Send_Dat>
 80002ec:	2c04      	cmp	r4, #4
 80002ee:	d1f7      	bne.n	80002e0 <LCD_Rect_Fill+0x68>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80002f0:	2400      	movs	r4, #0
  LCD_Send_Cmd(HX83h7_RAMWR);
 80002f2:	202c      	movs	r0, #44	; 0x2c
 80002f4:	f7ff ff96 	bl	8000224 <LCD_Send_Cmd>
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 80002f8:	f3c6 2085 	ubfx	r0, r6, #10, #6
 80002fc:	f3c6 43c4 	ubfx	r3, r6, #19, #5
 8000300:	0140      	lsls	r0, r0, #5
 8000302:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8000306:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 800030a:	4330      	orrs	r0, r6
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 800030c:	42bc      	cmp	r4, r7
 800030e:	d102      	bne.n	8000316 <LCD_Rect_Fill+0x9e>
}
 8000310:	b002      	add	sp, #8
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8000316:	f7ff ff9b 	bl	8000250 <LCD_Send_Dat>
 800031a:	3401      	adds	r4, #1
 800031c:	e7f6      	b.n	800030c <LCD_Rect_Fill+0x94>

0800031e <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  huart->RxXferCount = 0x00U;
 800031e:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000320:	6a43      	ldr	r3, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8000322:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8000324:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8000326:	4770      	bx	lr

08000328 <HAL_Delay>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000328:	4a03      	ldr	r2, [pc, #12]	; (8000338 <HAL_Delay+0x10>)
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait += (uint32_t)(uwTickFreq);
 800032a:	3001      	adds	r0, #1
  return uwTick;
 800032c:	6811      	ldr	r1, [r2, #0]
 800032e:	6813      	ldr	r3, [r2, #0]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	4283      	cmp	r3, r0
 8000334:	d3fb      	bcc.n	800032e <HAL_Delay+0x6>
  {
  }
}
 8000336:	4770      	bx	lr
 8000338:	20000208 	.word	0x20000208

0800033c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800033c:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800033e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000340:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000342:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000344:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000346:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000348:	4095      	lsls	r5, r2
 800034a:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 800034c:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800034e:	d032      	beq.n	80003b6 <HAL_DMA_IRQHandler+0x7a>
 8000350:	074d      	lsls	r5, r1, #29
 8000352:	d530      	bpl.n	80003b6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000358:	bf5e      	ittt	pl
 800035a:	681a      	ldrpl	r2, [r3, #0]
 800035c:	f022 0204 	bicpl.w	r2, r2, #4
 8000360:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000362:	4a3d      	ldr	r2, [pc, #244]	; (8000458 <HAL_DMA_IRQHandler+0x11c>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d019      	beq.n	800039c <HAL_DMA_IRQHandler+0x60>
 8000368:	3214      	adds	r2, #20
 800036a:	4293      	cmp	r3, r2
 800036c:	d018      	beq.n	80003a0 <HAL_DMA_IRQHandler+0x64>
 800036e:	3214      	adds	r2, #20
 8000370:	4293      	cmp	r3, r2
 8000372:	d017      	beq.n	80003a4 <HAL_DMA_IRQHandler+0x68>
 8000374:	3214      	adds	r2, #20
 8000376:	4293      	cmp	r3, r2
 8000378:	d017      	beq.n	80003aa <HAL_DMA_IRQHandler+0x6e>
 800037a:	3214      	adds	r2, #20
 800037c:	4293      	cmp	r3, r2
 800037e:	d017      	beq.n	80003b0 <HAL_DMA_IRQHandler+0x74>
 8000380:	3214      	adds	r2, #20
 8000382:	4293      	cmp	r3, r2
 8000384:	bf0c      	ite	eq
 8000386:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800038a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800038e:	4a33      	ldr	r2, [pc, #204]	; (800045c <HAL_DMA_IRQHandler+0x120>)
 8000390:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000392:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8000394:	2b00      	cmp	r3, #0
 8000396:	d05c      	beq.n	8000452 <HAL_DMA_IRQHandler+0x116>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 8000398:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800039a:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800039c:	2304      	movs	r3, #4
 800039e:	e7f6      	b.n	800038e <HAL_DMA_IRQHandler+0x52>
 80003a0:	2340      	movs	r3, #64	; 0x40
 80003a2:	e7f4      	b.n	800038e <HAL_DMA_IRQHandler+0x52>
 80003a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a8:	e7f1      	b.n	800038e <HAL_DMA_IRQHandler+0x52>
 80003aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003ae:	e7ee      	b.n	800038e <HAL_DMA_IRQHandler+0x52>
 80003b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80003b4:	e7eb      	b.n	800038e <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80003b6:	2502      	movs	r5, #2
 80003b8:	4095      	lsls	r5, r2
 80003ba:	4225      	tst	r5, r4
 80003bc:	d035      	beq.n	800042a <HAL_DMA_IRQHandler+0xee>
 80003be:	078d      	lsls	r5, r1, #30
 80003c0:	d533      	bpl.n	800042a <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	0694      	lsls	r4, r2, #26
 80003c6:	d406      	bmi.n	80003d6 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	f022 020a 	bic.w	r2, r2, #10
 80003ce:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80003d0:	2201      	movs	r2, #1
 80003d2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80003d6:	4a20      	ldr	r2, [pc, #128]	; (8000458 <HAL_DMA_IRQHandler+0x11c>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d019      	beq.n	8000410 <HAL_DMA_IRQHandler+0xd4>
 80003dc:	3214      	adds	r2, #20
 80003de:	4293      	cmp	r3, r2
 80003e0:	d018      	beq.n	8000414 <HAL_DMA_IRQHandler+0xd8>
 80003e2:	3214      	adds	r2, #20
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d017      	beq.n	8000418 <HAL_DMA_IRQHandler+0xdc>
 80003e8:	3214      	adds	r2, #20
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d017      	beq.n	800041e <HAL_DMA_IRQHandler+0xe2>
 80003ee:	3214      	adds	r2, #20
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d017      	beq.n	8000424 <HAL_DMA_IRQHandler+0xe8>
 80003f4:	3214      	adds	r2, #20
 80003f6:	4293      	cmp	r3, r2
 80003f8:	bf0c      	ite	eq
 80003fa:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80003fe:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000402:	4a16      	ldr	r2, [pc, #88]	; (800045c <HAL_DMA_IRQHandler+0x120>)
 8000404:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000406:	2300      	movs	r3, #0
 8000408:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800040c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800040e:	e7c1      	b.n	8000394 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000410:	2302      	movs	r3, #2
 8000412:	e7f6      	b.n	8000402 <HAL_DMA_IRQHandler+0xc6>
 8000414:	2320      	movs	r3, #32
 8000416:	e7f4      	b.n	8000402 <HAL_DMA_IRQHandler+0xc6>
 8000418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800041c:	e7f1      	b.n	8000402 <HAL_DMA_IRQHandler+0xc6>
 800041e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000422:	e7ee      	b.n	8000402 <HAL_DMA_IRQHandler+0xc6>
 8000424:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000428:	e7eb      	b.n	8000402 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800042a:	2508      	movs	r5, #8
 800042c:	4095      	lsls	r5, r2
 800042e:	4225      	tst	r5, r4
 8000430:	d00f      	beq.n	8000452 <HAL_DMA_IRQHandler+0x116>
 8000432:	0709      	lsls	r1, r1, #28
 8000434:	d50d      	bpl.n	8000452 <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000436:	6819      	ldr	r1, [r3, #0]
 8000438:	f021 010e 	bic.w	r1, r1, #14
 800043c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800043e:	2301      	movs	r3, #1
 8000440:	fa03 f202 	lsl.w	r2, r3, r2
 8000444:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000446:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800044c:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800044e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000450:	e7a0      	b.n	8000394 <HAL_DMA_IRQHandler+0x58>
}
 8000452:	bc70      	pop	{r4, r5, r6}
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	40020008 	.word	0x40020008
 800045c:	40020000 	.word	0x40020000

08000460 <HAL_GPIO_Init>:
{
 8000460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 8000464:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000466:	4616      	mov	r6, r2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000468:	4f64      	ldr	r7, [pc, #400]	; (80005fc <HAL_GPIO_Init+0x19c>)
 800046a:	4b65      	ldr	r3, [pc, #404]	; (8000600 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 800046c:	f8df c194 	ldr.w	ip, [pc, #404]	; 8000604 <HAL_GPIO_Init+0x1a4>
 8000470:	f8df e194 	ldr.w	lr, [pc, #404]	; 8000608 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000474:	680d      	ldr	r5, [r1, #0]
 8000476:	fa35 f406 	lsrs.w	r4, r5, r6
 800047a:	d102      	bne.n	8000482 <HAL_GPIO_Init+0x22>
}
 800047c:	b003      	add	sp, #12
 800047e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000482:	f04f 0801 	mov.w	r8, #1
 8000486:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800048a:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 800048e:	ea38 0505 	bics.w	r5, r8, r5
 8000492:	d17b      	bne.n	800058c <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8000494:	684d      	ldr	r5, [r1, #4]
 8000496:	2d03      	cmp	r5, #3
 8000498:	d807      	bhi.n	80004aa <HAL_GPIO_Init+0x4a>
 800049a:	3d01      	subs	r5, #1
 800049c:	2d02      	cmp	r5, #2
 800049e:	f200 8088 	bhi.w	80005b2 <HAL_GPIO_Init+0x152>
 80004a2:	e8df f005 	tbb	[pc, r5]
 80004a6:	9b96      	.short	0x9b96
 80004a8:	a1          	.byte	0xa1
 80004a9:	00          	.byte	0x00
 80004aa:	2d12      	cmp	r5, #18
 80004ac:	f000 8099 	beq.w	80005e2 <HAL_GPIO_Init+0x182>
 80004b0:	d86e      	bhi.n	8000590 <HAL_GPIO_Init+0x130>
 80004b2:	2d11      	cmp	r5, #17
 80004b4:	f000 808f 	beq.w	80005d6 <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004b8:	2cff      	cmp	r4, #255	; 0xff
 80004ba:	bf98      	it	ls
 80004bc:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80004be:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004c2:	bf88      	it	hi
 80004c4:	f100 0a04 	addhi.w	sl, r0, #4
 80004c8:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80004cc:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80004d0:	bf88      	it	hi
 80004d2:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80004d4:	fa09 fb05 	lsl.w	fp, r9, r5
 80004d8:	ea28 080b 	bic.w	r8, r8, fp
 80004dc:	fa02 f505 	lsl.w	r5, r2, r5
 80004e0:	ea48 0505 	orr.w	r5, r8, r5
 80004e4:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004e8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80004ec:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80004f0:	d04c      	beq.n	800058c <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80004f2:	69bd      	ldr	r5, [r7, #24]
 80004f4:	f026 0803 	bic.w	r8, r6, #3
 80004f8:	f045 0501 	orr.w	r5, r5, #1
 80004fc:	61bd      	str	r5, [r7, #24]
 80004fe:	69bd      	ldr	r5, [r7, #24]
 8000500:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000504:	f005 0501 	and.w	r5, r5, #1
 8000508:	9501      	str	r5, [sp, #4]
 800050a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800050e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000512:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000514:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000518:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800051c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000520:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000524:	4d39      	ldr	r5, [pc, #228]	; (800060c <HAL_GPIO_Init+0x1ac>)
 8000526:	42a8      	cmp	r0, r5
 8000528:	d062      	beq.n	80005f0 <HAL_GPIO_Init+0x190>
 800052a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800052e:	42a8      	cmp	r0, r5
 8000530:	d060      	beq.n	80005f4 <HAL_GPIO_Init+0x194>
 8000532:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000536:	42a8      	cmp	r0, r5
 8000538:	d05e      	beq.n	80005f8 <HAL_GPIO_Init+0x198>
 800053a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800053e:	42a8      	cmp	r0, r5
 8000540:	bf0c      	ite	eq
 8000542:	2503      	moveq	r5, #3
 8000544:	2504      	movne	r5, #4
 8000546:	fa05 f50b 	lsl.w	r5, r5, fp
 800054a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800054e:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000552:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000554:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000558:	bf14      	ite	ne
 800055a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800055c:	43a5      	biceq	r5, r4
 800055e:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000560:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000562:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000566:	bf14      	ite	ne
 8000568:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800056a:	43a5      	biceq	r5, r4
 800056c:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800056e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000570:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000574:	bf14      	ite	ne
 8000576:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000578:	43a5      	biceq	r5, r4
 800057a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800057c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800057e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000582:	bf14      	ite	ne
 8000584:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000586:	ea25 0404 	biceq.w	r4, r5, r4
 800058a:	60dc      	str	r4, [r3, #12]
	position++;
 800058c:	3601      	adds	r6, #1
 800058e:	e771      	b.n	8000474 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8000590:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8000610 <HAL_GPIO_Init+0x1b0>
 8000594:	454d      	cmp	r5, r9
 8000596:	d00c      	beq.n	80005b2 <HAL_GPIO_Init+0x152>
 8000598:	d817      	bhi.n	80005ca <HAL_GPIO_Init+0x16a>
 800059a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800059e:	454d      	cmp	r5, r9
 80005a0:	d007      	beq.n	80005b2 <HAL_GPIO_Init+0x152>
 80005a2:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 80005a6:	454d      	cmp	r5, r9
 80005a8:	d003      	beq.n	80005b2 <HAL_GPIO_Init+0x152>
 80005aa:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80005ae:	454d      	cmp	r5, r9
 80005b0:	d182      	bne.n	80004b8 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80005b2:	688a      	ldr	r2, [r1, #8]
 80005b4:	b1d2      	cbz	r2, 80005ec <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80005b6:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80005b8:	bf08      	it	eq
 80005ba:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005be:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80005c2:	bf18      	it	ne
 80005c4:	f8c0 8014 	strne.w	r8, [r0, #20]
 80005c8:	e776      	b.n	80004b8 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80005ca:	4565      	cmp	r5, ip
 80005cc:	d0f1      	beq.n	80005b2 <HAL_GPIO_Init+0x152>
 80005ce:	4575      	cmp	r5, lr
 80005d0:	e7ee      	b.n	80005b0 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80005d2:	68ca      	ldr	r2, [r1, #12]
          break;
 80005d4:	e770      	b.n	80004b8 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80005d6:	68ca      	ldr	r2, [r1, #12]
 80005d8:	3204      	adds	r2, #4
          break;
 80005da:	e76d      	b.n	80004b8 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80005dc:	68ca      	ldr	r2, [r1, #12]
 80005de:	3208      	adds	r2, #8
          break;
 80005e0:	e76a      	b.n	80004b8 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80005e2:	68ca      	ldr	r2, [r1, #12]
 80005e4:	320c      	adds	r2, #12
          break;
 80005e6:	e767      	b.n	80004b8 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80005e8:	2200      	movs	r2, #0
 80005ea:	e765      	b.n	80004b8 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80005ec:	2204      	movs	r2, #4
 80005ee:	e763      	b.n	80004b8 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005f0:	2500      	movs	r5, #0
 80005f2:	e7a8      	b.n	8000546 <HAL_GPIO_Init+0xe6>
 80005f4:	2501      	movs	r5, #1
 80005f6:	e7a6      	b.n	8000546 <HAL_GPIO_Init+0xe6>
 80005f8:	2502      	movs	r5, #2
 80005fa:	e7a4      	b.n	8000546 <HAL_GPIO_Init+0xe6>
 80005fc:	40021000 	.word	0x40021000
 8000600:	40010400 	.word	0x40010400
 8000604:	10310000 	.word	0x10310000
 8000608:	10320000 	.word	0x10320000
 800060c:	40010800 	.word	0x40010800
 8000610:	10220000 	.word	0x10220000

08000614 <UART_DMATransmitCplt>:
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000614:	6803      	ldr	r3, [r0, #0]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f013 0320 	ands.w	r3, r3, #32
 800061c:	d10a      	bne.n	8000634 <UART_DMATransmitCplt+0x20>
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800061e:	6a42      	ldr	r2, [r0, #36]	; 0x24
    huart->TxXferCount = 0x00U;
 8000620:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8000622:	6813      	ldr	r3, [r2, #0]
 8000624:	695a      	ldr	r2, [r3, #20]
 8000626:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800062a:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800062c:	68da      	ldr	r2, [r3, #12]
 800062e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000632:	60da      	str	r2, [r3, #12]
}
 8000634:	4770      	bx	lr

08000636 <UART_DMATxHalfCplt>:
}
 8000636:	4770      	bx	lr

08000638 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000638:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800063c:	4770      	bx	lr

0800063e <UART_EndRxTransfer>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800063e:	6803      	ldr	r3, [r0, #0]
 8000640:	68da      	ldr	r2, [r3, #12]
 8000642:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000646:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000648:	695a      	ldr	r2, [r3, #20]
 800064a:	f022 0201 	bic.w	r2, r2, #1
 800064e:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8000650:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000652:	2a01      	cmp	r2, #1
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000654:	bf02      	ittt	eq
 8000656:	68da      	ldreq	r2, [r3, #12]
 8000658:	f022 0210 	biceq.w	r2, r2, #16
 800065c:	60da      	streq	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 800065e:	2320      	movs	r3, #32
 8000660:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000664:	2300      	movs	r3, #0
 8000666:	6303      	str	r3, [r0, #48]	; 0x30
}
 8000668:	4770      	bx	lr

0800066a <UART_DMAError>:
{
 800066a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800066c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800066e:	6803      	ldr	r3, [r0, #0]
 8000670:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8000672:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8000676:	2921      	cmp	r1, #33	; 0x21
 8000678:	d10a      	bne.n	8000690 <UART_DMAError+0x26>
 800067a:	0612      	lsls	r2, r2, #24
 800067c:	d508      	bpl.n	8000690 <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 800067e:	2200      	movs	r2, #0
 8000680:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8000682:	68da      	ldr	r2, [r3, #12]
 8000684:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000688:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800068a:	2220      	movs	r2, #32
 800068c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000690:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8000692:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8000696:	2a22      	cmp	r2, #34	; 0x22
 8000698:	d105      	bne.n	80006a6 <UART_DMAError+0x3c>
 800069a:	065b      	lsls	r3, r3, #25
 800069c:	d503      	bpl.n	80006a6 <UART_DMAError+0x3c>
    huart->RxXferCount = 0x00U;
 800069e:	2300      	movs	r3, #0
 80006a0:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80006a2:	f7ff ffcc 	bl	800063e <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80006a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80006a8:	f043 0310 	orr.w	r3, r3, #16
 80006ac:	6403      	str	r3, [r0, #64]	; 0x40
}
 80006ae:	bd08      	pop	{r3, pc}

080006b0 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80006b0:	b510      	push	{r4, lr}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80006b2:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x40>)
 80006b4:	6853      	ldr	r3, [r2, #4]
 80006b6:	681c      	ldr	r4, [r3, #0]
 80006b8:	ea30 0404 	bics.w	r4, r0, r4
 80006bc:	d101      	bne.n	80006c2 <UART_WaitOnFlagUntilTimeout.constprop.0+0x12>
  return HAL_OK;
 80006be:	2000      	movs	r0, #0
 80006c0:	e014      	b.n	80006ec <UART_WaitOnFlagUntilTimeout.constprop.0+0x3c>
  return uwTick;
 80006c2:	6814      	ldr	r4, [r2, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80006c4:	1a64      	subs	r4, r4, r1
 80006c6:	2c64      	cmp	r4, #100	; 0x64
 80006c8:	d9f5      	bls.n	80006b6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80006ca:	68d9      	ldr	r1, [r3, #12]
        __HAL_UNLOCK(huart);
 80006cc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80006ce:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 80006d2:	60d9      	str	r1, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80006d4:	6959      	ldr	r1, [r3, #20]
 80006d6:	f021 0101 	bic.w	r1, r1, #1
 80006da:	6159      	str	r1, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80006dc:	2320      	movs	r3, #32
 80006de:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80006e2:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
        __HAL_UNLOCK(huart);
 80006e6:	2300      	movs	r3, #0
 80006e8:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
}
 80006ec:	bd10      	pop	{r4, pc}
 80006ee:	bf00      	nop
 80006f0:	20000208 	.word	0x20000208

080006f4 <TIM_Base_SetConfig.constprop.0>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80006f4:	4a1a      	ldr	r2, [pc, #104]	; (8000760 <TIM_Base_SetConfig.constprop.0+0x6c>)
  tmpcr1 = TIMx->CR1;
 80006f6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80006f8:	4290      	cmp	r0, r2
 80006fa:	4a1a      	ldr	r2, [pc, #104]	; (8000764 <TIM_Base_SetConfig.constprop.0+0x70>)
 80006fc:	d009      	beq.n	8000712 <TIM_Base_SetConfig.constprop.0+0x1e>
 80006fe:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000702:	d006      	beq.n	8000712 <TIM_Base_SetConfig.constprop.0+0x1e>
 8000704:	4918      	ldr	r1, [pc, #96]	; (8000768 <TIM_Base_SetConfig.constprop.0+0x74>)
 8000706:	4288      	cmp	r0, r1
 8000708:	d003      	beq.n	8000712 <TIM_Base_SetConfig.constprop.0+0x1e>
 800070a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800070e:	4288      	cmp	r0, r1
 8000710:	d115      	bne.n	800073e <TIM_Base_SetConfig.constprop.0+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000712:	6d11      	ldr	r1, [r2, #80]	; 0x50
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000718:	430b      	orrs	r3, r1
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800071a:	4911      	ldr	r1, [pc, #68]	; (8000760 <TIM_Base_SetConfig.constprop.0+0x6c>)
 800071c:	4288      	cmp	r0, r1
 800071e:	d00a      	beq.n	8000736 <TIM_Base_SetConfig.constprop.0+0x42>
 8000720:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000724:	d007      	beq.n	8000736 <TIM_Base_SetConfig.constprop.0+0x42>
 8000726:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800072a:	4288      	cmp	r0, r1
 800072c:	d003      	beq.n	8000736 <TIM_Base_SetConfig.constprop.0+0x42>
 800072e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000732:	4288      	cmp	r0, r1
 8000734:	d103      	bne.n	800073e <TIM_Base_SetConfig.constprop.0+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000736:	6d91      	ldr	r1, [r2, #88]	; 0x58
    tmpcr1 &= ~TIM_CR1_CKD;
 8000738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800073c:	430b      	orrs	r3, r1
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800073e:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8000740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000744:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 8000746:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000748:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800074a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800074c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800074e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <TIM_Base_SetConfig.constprop.0+0x6c>)
 8000752:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000754:	bf04      	itt	eq
 8000756:	6dd3      	ldreq	r3, [r2, #92]	; 0x5c
 8000758:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800075a:	2301      	movs	r3, #1
 800075c:	6143      	str	r3, [r0, #20]
}
 800075e:	4770      	bx	lr
 8000760:	40012c00 	.word	0x40012c00
 8000764:	20000208 	.word	0x20000208
 8000768:	40000400 	.word	0x40000400

0800076c <HAL_NVIC_SetPriority.constprop.0>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <HAL_NVIC_SetPriority.constprop.0+0x4c>)
  * @param  SubPriority: the subpriority level for the IRQ channel.
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 800076e:	b510      	push	{r4, lr}
 8000770:	68db      	ldr	r3, [r3, #12]
 8000772:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000776:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077a:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800077c:	2c04      	cmp	r4, #4
 800077e:	bf28      	it	cs
 8000780:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000782:	2a06      	cmp	r2, #6
 8000784:	bf88      	it	hi
 8000786:	1eda      	subhi	r2, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078c:	bf98      	it	ls
 800078e:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	40a3      	lsls	r3, r4
 8000792:	ea21 0303 	bic.w	r3, r1, r3
 8000796:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8000798:	1c42      	adds	r2, r0, #1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079a:	bf14      	ite	ne
 800079c:	f100 4060 	addne.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a0:	4a05      	ldreq	r2, [pc, #20]	; (80007b8 <HAL_NVIC_SetPriority.constprop.0+0x4c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	bf1a      	itte	ne
 80007aa:	f500 4061 	addne.w	r0, r0, #57600	; 0xe100
 80007ae:	f880 3300 	strbne.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b2:	f882 3023 	strbeq.w	r3, [r2, #35]	; 0x23
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80007b6:	bd10      	pop	{r4, pc}
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <LCD_Circle.constprop.0>:
			s += rx2 * ((4 * y) + 6);
		}
	}
}

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 80007bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007c0:	461e      	mov	r6, r3
 80007c2:	b089      	sub	sp, #36	; 0x24
{
	int a_, b_, P;
	a_ = 0;
	b_ = radius;
	P = 1 - radius;
 80007c4:	f1c1 0301 	rsb	r3, r1, #1
 80007c8:	9303      	str	r3, [sp, #12]
 80007ca:	2300      	movs	r3, #0
	b_ = radius;
 80007cc:	468b      	mov	fp, r1
void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 80007ce:	9004      	str	r0, [sp, #16]
 80007d0:	9207      	str	r2, [sp, #28]
	P = 1 - radius;
 80007d2:	9302      	str	r3, [sp, #8]
 80007d4:	9b04      	ldr	r3, [sp, #16]
 80007d6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
	while (a_ <= b_)
	{
		if (fill == 1)
		{
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 80007da:	fa1f f48b 	uxth.w	r4, fp
 80007de:	eba3 0805 	sub.w	r8, r3, r5
 80007e2:	eba3 0a04 	sub.w	sl, r3, r4
		if (fill == 1)
 80007e6:	9b07      	ldr	r3, [sp, #28]
 80007e8:	f1c5 09aa 	rsb	r9, r5, #170	; 0xaa
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 80007ec:	f1c4 07aa 	rsb	r7, r4, #170	; 0xaa
		if (fill == 1)
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	fa1f f989 	uxth.w	r9, r9
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 80007f6:	b2bf      	uxth	r7, r7
 80007f8:	fa1f f888 	uxth.w	r8, r8
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 80007fc:	fa1f fa8a 	uxth.w	sl, sl
		if (fill == 1)
 8000800:	d123      	bne.n	800084a <LCD_Circle.constprop.0+0x8e>
 8000802:	006d      	lsls	r5, r5, #1
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8000804:	0064      	lsls	r4, r4, #1
 8000806:	3501      	adds	r5, #1
 8000808:	3401      	adds	r4, #1
 800080a:	b2ad      	uxth	r5, r5
 800080c:	b2a4      	uxth	r4, r4
 800080e:	4623      	mov	r3, r4
 8000810:	462a      	mov	r2, r5
 8000812:	4651      	mov	r1, sl
 8000814:	4648      	mov	r0, r9
 8000816:	9600      	str	r6, [sp, #0]
 8000818:	f7ff fd2e 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 800081c:	462b      	mov	r3, r5
 800081e:	4622      	mov	r2, r4
 8000820:	9600      	str	r6, [sp, #0]
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8000822:	4641      	mov	r1, r8
 8000824:	4638      	mov	r0, r7
 8000826:	f7ff fd27 	bl	8000278 <LCD_Rect_Fill>
		}
		if (P < 0)
 800082a:	9b03      	ldr	r3, [sp, #12]
 800082c:	2b00      	cmp	r3, #0
 800082e:	da4e      	bge.n	80008ce <LCD_Circle.constprop.0+0x112>
		{
			P = (P + 3) + (2 * a_);
 8000830:	9a02      	ldr	r2, [sp, #8]
 8000832:	3303      	adds	r3, #3
 8000834:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8000838:	9303      	str	r3, [sp, #12]
	while (a_ <= b_)
 800083a:	9b02      	ldr	r3, [sp, #8]
 800083c:	3301      	adds	r3, #1
 800083e:	455b      	cmp	r3, fp
 8000840:	9302      	str	r3, [sp, #8]
 8000842:	ddc7      	ble.n	80007d4 <LCD_Circle.constprop.0+0x18>
			P = (P + 5) + (2 * (a_ - b_));
			a_++;
			b_--;
		}
	}
}
 8000844:	b009      	add	sp, #36	; 0x24
 8000846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800084a:	f105 03aa 	add.w	r3, r5, #170	; 0xaa
 800084e:	b29b      	uxth	r3, r3
 8000850:	9305      	str	r3, [sp, #20]
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8000852:	9b04      	ldr	r3, [sp, #16]
 8000854:	9600      	str	r6, [sp, #0]
 8000856:	4423      	add	r3, r4
 8000858:	b29b      	uxth	r3, r3
 800085a:	9306      	str	r3, [sp, #24]
 800085c:	2301      	movs	r3, #1
 800085e:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8000862:	461a      	mov	r2, r3
 8000864:	f7ff fd08 	bl	8000278 <LCD_Rect_Fill>
 8000868:	9b04      	ldr	r3, [sp, #16]
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 800086a:	34aa      	adds	r4, #170	; 0xaa
 800086c:	441d      	add	r5, r3
 800086e:	2301      	movs	r3, #1
 8000870:	b2a4      	uxth	r4, r4
 8000872:	b2ad      	uxth	r5, r5
 8000874:	461a      	mov	r2, r3
 8000876:	4629      	mov	r1, r5
 8000878:	4620      	mov	r0, r4
 800087a:	9600      	str	r6, [sp, #0]
 800087c:	f7ff fcfc 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8000880:	2301      	movs	r3, #1
 8000882:	4648      	mov	r0, r9
 8000884:	461a      	mov	r2, r3
 8000886:	9906      	ldr	r1, [sp, #24]
 8000888:	9600      	str	r6, [sp, #0]
 800088a:	f7ff fcf5 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 800088e:	2301      	movs	r3, #1
 8000890:	4629      	mov	r1, r5
 8000892:	461a      	mov	r2, r3
 8000894:	4638      	mov	r0, r7
 8000896:	9600      	str	r6, [sp, #0]
 8000898:	f7ff fcee 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 800089c:	2301      	movs	r3, #1
 800089e:	4641      	mov	r1, r8
 80008a0:	461a      	mov	r2, r3
 80008a2:	4620      	mov	r0, r4
 80008a4:	9600      	str	r6, [sp, #0]
 80008a6:	f7ff fce7 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 80008aa:	2301      	movs	r3, #1
 80008ac:	4651      	mov	r1, sl
 80008ae:	461a      	mov	r2, r3
 80008b0:	9805      	ldr	r0, [sp, #20]
 80008b2:	9600      	str	r6, [sp, #0]
 80008b4:	f7ff fce0 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 80008b8:	2301      	movs	r3, #1
 80008ba:	4651      	mov	r1, sl
 80008bc:	461a      	mov	r2, r3
 80008be:	4648      	mov	r0, r9
 80008c0:	9600      	str	r6, [sp, #0]
 80008c2:	f7ff fcd9 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 80008c6:	2301      	movs	r3, #1
 80008c8:	9600      	str	r6, [sp, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	e7a9      	b.n	8000822 <LCD_Circle.constprop.0+0x66>
			P = (P + 5) + (2 * (a_ - b_));
 80008ce:	9b03      	ldr	r3, [sp, #12]
 80008d0:	9a02      	ldr	r2, [sp, #8]
 80008d2:	3305      	adds	r3, #5
 80008d4:	eba2 020b 	sub.w	r2, r2, fp
 80008d8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80008dc:	9303      	str	r3, [sp, #12]
			b_--;
 80008de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80008e2:	e7aa      	b.n	800083a <LCD_Circle.constprop.0+0x7e>

080008e4 <LCD_Line.constprop.0>:
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 80008e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int deltaX = abs(x2 - x1);
 80008e8:	1a15      	subs	r5, r2, r0
	int deltaY = abs(y2 - y1);
 80008ea:	1a5e      	subs	r6, r3, r1
	int deltaX = abs(x2 - x1);
 80008ec:	2d00      	cmp	r5, #0
 80008ee:	bfb8      	it	lt
 80008f0:	426d      	neglt	r5, r5
	int deltaY = abs(y2 - y1);
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	bfb8      	it	lt
 80008f6:	4276      	neglt	r6, r6
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 80008f8:	4617      	mov	r7, r2
 80008fa:	4698      	mov	r8, r3
	int signX = x1 < x2 ? 1 : -1;
 80008fc:	4282      	cmp	r2, r0
 80008fe:	bf8c      	ite	hi
 8000900:	f04f 0a01 	movhi.w	sl, #1
 8000904:	f04f 3aff 	movls.w	sl, #4294967295
	int signY = y1 < y2 ? 1 : -1;
 8000908:	428b      	cmp	r3, r1
 800090a:	bf8c      	ite	hi
 800090c:	f04f 0901 	movhi.w	r9, #1
 8000910:	f04f 39ff 	movls.w	r9, #4294967295
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8000914:	b085      	sub	sp, #20
	int error = deltaX - deltaY;
 8000916:	1bac      	subs	r4, r5, r6
		if (error2 > -deltaY)
 8000918:	f1c6 0b00 	rsb	fp, r6, #0
		LCD_Rect_Fill(x1, y1, size, size, color24);
 800091c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800091e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2301      	movs	r3, #1
 8000926:	461a      	mov	r2, r3
 8000928:	f7ff fca6 	bl	8000278 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 800092c:	9802      	ldr	r0, [sp, #8]
 800092e:	9903      	ldr	r1, [sp, #12]
 8000930:	4287      	cmp	r7, r0
 8000932:	d101      	bne.n	8000938 <LCD_Line.constprop.0+0x54>
 8000934:	4588      	cmp	r8, r1
 8000936:	d00d      	beq.n	8000954 <LCD_Line.constprop.0+0x70>
		if (error2 > -deltaY)
 8000938:	ebbb 0f44 	cmp.w	fp, r4, lsl #1
		error2 = error * 2;
 800093c:	ea4f 0344 	mov.w	r3, r4, lsl #1
			x1 += signX;
 8000940:	bfbe      	ittt	lt
 8000942:	4450      	addlt	r0, sl
			error -= deltaY;
 8000944:	1ba4      	sublt	r4, r4, r6
			x1 += signX;
 8000946:	b280      	uxthlt	r0, r0
		if (error2 < deltaX)
 8000948:	429d      	cmp	r5, r3
 800094a:	dde7      	ble.n	800091c <LCD_Line.constprop.0+0x38>
			y1 += signY;
 800094c:	4449      	add	r1, r9
			error += deltaX;
 800094e:	442c      	add	r4, r5
			y1 += signY;
 8000950:	b289      	uxth	r1, r1
 8000952:	e7e3      	b.n	800091c <LCD_Line.constprop.0+0x38>
}
 8000954:	b005      	add	sp, #20
 8000956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800095a <LCD_Rect.constprop.0>:
void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
 800095a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	LCD_Line(x, y, x + w, y, size, color24);
 800095c:	23bd      	movs	r3, #189	; 0xbd
 800095e:	26ff      	movs	r6, #255	; 0xff
 8000960:	f100 049d 	add.w	r4, r0, #157	; 0x9d
 8000964:	b2a4      	uxth	r4, r4
 8000966:	4622      	mov	r2, r4
 8000968:	4619      	mov	r1, r3
 800096a:	9600      	str	r6, [sp, #0]
void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
 800096c:	4605      	mov	r5, r0
	LCD_Line(x, y, x + w, y, size, color24);
 800096e:	f7ff ffb9 	bl	80008e4 <LCD_Line.constprop.0>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8000972:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8000976:	4622      	mov	r2, r4
 8000978:	4619      	mov	r1, r3
 800097a:	4628      	mov	r0, r5
 800097c:	9600      	str	r6, [sp, #0]
 800097e:	f7ff ffb1 	bl	80008e4 <LCD_Line.constprop.0>
	LCD_Line(x, y, x, y + h, size, color24);
 8000982:	462a      	mov	r2, r5
 8000984:	4628      	mov	r0, r5
 8000986:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800098a:	21bd      	movs	r1, #189	; 0xbd
 800098c:	9600      	str	r6, [sp, #0]
 800098e:	f7ff ffa9 	bl	80008e4 <LCD_Line.constprop.0>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8000992:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8000996:	4622      	mov	r2, r4
 8000998:	21bd      	movs	r1, #189	; 0xbd
 800099a:	4620      	mov	r0, r4
 800099c:	9600      	str	r6, [sp, #0]
 800099e:	f7ff ffa1 	bl	80008e4 <LCD_Line.constprop.0>
}
 80009a2:	b002      	add	sp, #8
 80009a4:	bd70      	pop	{r4, r5, r6, pc}

080009a6 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x6a>)
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 80009a8:	b510      	push	{r4, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80009aa:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 80009ae:	6962      	ldr	r2, [r4, #20]
 80009b0:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80009b4:	d001      	beq.n	80009ba <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x14>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80009b6:	2000      	movs	r0, #0
 80009b8:	e014      	b.n	80009e4 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x3e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80009ba:	6961      	ldr	r1, [r4, #20]
 80009bc:	f011 0110 	ands.w	r1, r1, #16
 80009c0:	d011      	beq.n	80009e6 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x40>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80009c2:	f06f 0110 	mvn.w	r1, #16
 80009c6:	6161      	str	r1, [r4, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80009c8:	2120      	movs	r1, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80009ca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
      hi2c->State               = HAL_I2C_STATE_READY;
 80009ce:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80009d2:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80009d6:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
      __HAL_UNLOCK(hi2c);
 80009da:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80009de:	f8c3 10d0 	str.w	r1, [r3, #208]	; 0xd0
      return HAL_ERROR;
 80009e2:	2001      	movs	r0, #1
}
 80009e4:	bd10      	pop	{r4, pc}
 80009e6:	681a      	ldr	r2, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009e8:	1a12      	subs	r2, r2, r0
 80009ea:	2a64      	cmp	r2, #100	; 0x64
 80009ec:	d9df      	bls.n	80009ae <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x8>
      hi2c->State               = HAL_I2C_STATE_READY;
 80009ee:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80009f0:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
      hi2c->State               = HAL_I2C_STATE_READY;
 80009f4:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80009f8:	f883 10ce 	strb.w	r1, [r3, #206]	; 0xce
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80009fc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
      __HAL_UNLOCK(hi2c);
 8000a00:	f883 10cc 	strb.w	r1, [r3, #204]	; 0xcc
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a04:	f042 0220 	orr.w	r2, r2, #32
 8000a08:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8000a0c:	e7e9      	b.n	80009e2 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x3c>
 8000a0e:	bf00      	nop
 8000a10:	20000208 	.word	0x20000208

08000a14 <I2C_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8000a14:	b5f0      	push	{r4, r5, r6, r7, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000a16:	4d14      	ldr	r5, [pc, #80]	; (8000a68 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x54>)
 8000a18:	0c07      	lsrs	r7, r0, #16
 8000a1a:	f8d5 6090 	ldr.w	r6, [r5, #144]	; 0x90
 8000a1e:	2f01      	cmp	r7, #1
 8000a20:	bf0c      	ite	eq
 8000a22:	6974      	ldreq	r4, [r6, #20]
 8000a24:	69b4      	ldrne	r4, [r6, #24]
 8000a26:	ea20 0404 	bic.w	r4, r0, r4
 8000a2a:	b2a4      	uxth	r4, r4
 8000a2c:	fab4 f484 	clz	r4, r4
 8000a30:	0964      	lsrs	r4, r4, #5
 8000a32:	42a1      	cmp	r1, r4
 8000a34:	d001      	beq.n	8000a3a <I2C_WaitOnFlagUntilTimeout.constprop.0+0x26>
  return HAL_OK;
 8000a36:	2000      	movs	r0, #0
 8000a38:	e014      	b.n	8000a64 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x50>
 8000a3a:	682c      	ldr	r4, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a3c:	1ae4      	subs	r4, r4, r3
 8000a3e:	42a2      	cmp	r2, r4
 8000a40:	d2ed      	bcs.n	8000a1e <I2C_WaitOnFlagUntilTimeout.constprop.0+0xa>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000a42:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8000a44:	2220      	movs	r2, #32
        return HAL_ERROR;
 8000a46:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000a48:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
        hi2c->State             = HAL_I2C_STATE_READY;
 8000a4c:	f885 20cd 	strb.w	r2, [r5, #205]	; 0xcd
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000a50:	f885 30ce 	strb.w	r3, [r5, #206]	; 0xce
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000a54:	f8d5 20d0 	ldr.w	r2, [r5, #208]	; 0xd0
        __HAL_UNLOCK(hi2c);
 8000a58:	f885 30cc 	strb.w	r3, [r5, #204]	; 0xcc
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000a5c:	f042 0220 	orr.w	r2, r2, #32
 8000a60:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
}
 8000a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000208 	.word	0x20000208

08000a6c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8000a6c:	b530      	push	{r4, r5, lr}
 8000a6e:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x70>)
 8000a72:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 8000a76:	6960      	ldr	r0, [r4, #20]
 8000a78:	ea25 0000 	bic.w	r0, r5, r0
 8000a7c:	b280      	uxth	r0, r0
 8000a7e:	b1d8      	cbz	r0, 8000ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x4c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000a80:	6962      	ldr	r2, [r4, #20]
 8000a82:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8000a86:	d018      	beq.n	8000aba <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000a88:	6822      	ldr	r2, [r4, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a8a:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a90:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000a92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000a96:	6162      	str	r2, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a9e:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000aa2:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000aa6:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 8000aaa:	f041 0104 	orr.w	r1, r1, #4
        return HAL_ERROR;
 8000aae:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ab0:	f8c3 10d0 	str.w	r1, [r3, #208]	; 0xd0
        __HAL_UNLOCK(hi2c);
 8000ab4:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
 8000ab8:	bd30      	pop	{r4, r5, pc}
 8000aba:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000abc:	1a40      	subs	r0, r0, r1
 8000abe:	2864      	cmp	r0, #100	; 0x64
 8000ac0:	d9d9      	bls.n	8000a76 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0xa>
        hi2c->State               = HAL_I2C_STATE_READY;
 8000ac2:	2120      	movs	r1, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000ac4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        hi2c->State               = HAL_I2C_STATE_READY;
 8000ac8:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000acc:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ad0:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 8000ad4:	f041 0120 	orr.w	r1, r1, #32
 8000ad8:	e7e9      	b.n	8000aae <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x42>
 8000ada:	bf00      	nop
 8000adc:	20000208 	.word	0x20000208

08000ae0 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x6c>)
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8000ae2:	b510      	push	{r4, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000ae4:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 8000ae8:	6962      	ldr	r2, [r4, #20]
 8000aea:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8000aee:	d001      	beq.n	8000af4 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x14>
  return HAL_OK;
 8000af0:	2000      	movs	r0, #0
 8000af2:	e02a      	b.n	8000b4a <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x6a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000af4:	6961      	ldr	r1, [r4, #20]
 8000af6:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8000afa:	d113      	bne.n	8000b24 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x44>
 8000afc:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000afe:	1a12      	subs	r2, r2, r0
 8000b00:	2a64      	cmp	r2, #100	; 0x64
 8000b02:	d9f1      	bls.n	8000ae8 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 8000b04:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000b06:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
        hi2c->State               = HAL_I2C_STATE_READY;
 8000b0a:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000b0e:	f883 10ce 	strb.w	r1, [r3, #206]	; 0xce
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000b12:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
        __HAL_UNLOCK(hi2c);
 8000b16:	f883 10cc 	strb.w	r1, [r3, #204]	; 0xcc
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000b1a:	f042 0220 	orr.w	r2, r2, #32
 8000b1e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8000b22:	e011      	b.n	8000b48 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x68>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b24:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8000b28:	6161      	str	r1, [r4, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8000b2a:	2120      	movs	r1, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000b2c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    hi2c->State               = HAL_I2C_STATE_READY;
 8000b30:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000b34:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000b38:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000b3c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000b40:	f041 0104 	orr.w	r1, r1, #4
 8000b44:	f8c3 10d0 	str.w	r1, [r3, #208]	; 0xd0
        __HAL_UNLOCK(hi2c);
 8000b48:	2001      	movs	r0, #1
}
 8000b4a:	bd10      	pop	{r4, pc}
 8000b4c:	20000208 	.word	0x20000208

08000b50 <AT24XX_Read>:
    } else
        return false;
}

uint8_t AT24XX_Read(uint16_t address) {
    uint16_t dt[1] = {0};
 8000b50:	2300      	movs	r3, #0
uint8_t AT24XX_Read(uint16_t address) {
 8000b52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b54:	4c9e      	ldr	r4, [pc, #632]	; (8000dd0 <AT24XX_Read+0x280>)
 8000b56:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8000b58:	9302      	str	r3, [sp, #8]
 8000b5a:	6825      	ldr	r5, [r4, #0]
    uint16_t dt[1] = {0};
 8000b5c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b60:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
uint8_t AT24XX_Read(uint16_t address) {
 8000b64:	4606      	mov	r6, r0
 8000b66:	2b20      	cmp	r3, #32
 8000b68:	d165      	bne.n	8000c36 <AT24XX_Read+0xe6>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000b6a:	462b      	mov	r3, r5
 8000b6c:	2219      	movs	r2, #25
 8000b6e:	2101      	movs	r1, #1
 8000b70:	4898      	ldr	r0, [pc, #608]	; (8000dd4 <AT24XX_Read+0x284>)
 8000b72:	f7ff ff4f 	bl	8000a14 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8000b76:	2800      	cmp	r0, #0
 8000b78:	d15d      	bne.n	8000c36 <AT24XX_Read+0xe6>
    __HAL_LOCK(hi2c);
 8000b7a:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d059      	beq.n	8000c36 <AT24XX_Read+0xe6>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000b82:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    __HAL_LOCK(hi2c);
 8000b86:	f884 10cc 	strb.w	r1, [r4, #204]	; 0xcc
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000b8a:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b8c:	f04f 1001 	mov.w	r0, #65537	; 0x10001
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000b90:	07d7      	lsls	r7, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000b92:	bf5e      	ittt	pl
 8000b94:	681a      	ldrpl	r2, [r3, #0]
 8000b96:	430a      	orrpl	r2, r1
 8000b98:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000b9a:	681a      	ldr	r2, [r3, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b9c:	2100      	movs	r1, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ba2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000ba4:	2222      	movs	r2, #34	; 0x22
 8000ba6:	f884 20cd 	strb.w	r2, [r4, #205]	; 0xcd
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000baa:	2240      	movs	r2, #64	; 0x40
 8000bac:	f884 20ce 	strb.w	r2, [r4, #206]	; 0xce
    hi2c->pBuffPtr    = pData;
 8000bb0:	aa01      	add	r2, sp, #4
 8000bb2:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
    hi2c->XferCount   = Size;
 8000bb6:	2201      	movs	r2, #1
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bb8:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
    hi2c->XferCount   = Size;
 8000bbc:	f8a4 20ba 	strh.w	r2, [r4, #186]	; 0xba
    hi2c->XferSize    = hi2c->XferCount;
 8000bc0:	f8b4 20ba 	ldrh.w	r2, [r4, #186]	; 0xba
 8000bc4:	f8a4 20b8 	strh.w	r2, [r4, #184]	; 0xb8
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000bc8:	4a83      	ldr	r2, [pc, #524]	; (8000dd8 <AT24XX_Read+0x288>)
 8000bca:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bd4:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bdc:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000bde:	462b      	mov	r3, r5
 8000be0:	2264      	movs	r2, #100	; 0x64
 8000be2:	f7ff ff17 	bl	8000a14 <I2C_WaitOnFlagUntilTimeout.constprop.0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000be6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000bea:	b138      	cbz	r0, 8000bfc <AT24XX_Read+0xac>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	05dd      	lsls	r5, r3, #23
 8000bf0:	d521      	bpl.n	8000c36 <AT24XX_Read+0xe6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf6:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 8000bfa:	e01c      	b.n	8000c36 <AT24XX_Read+0xe6>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000bfc:	22ae      	movs	r2, #174	; 0xae
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000bfe:	4629      	mov	r1, r5
 8000c00:	4876      	ldr	r0, [pc, #472]	; (8000ddc <AT24XX_Read+0x28c>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000c02:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000c04:	f7ff ff32 	bl	8000a6c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8000c08:	b9a8      	cbnz	r0, 8000c36 <AT24XX_Read+0xe6>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c0a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000c0e:	9007      	str	r0, [sp, #28]
 8000c10:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c12:	4628      	mov	r0, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c14:	9207      	str	r2, [sp, #28]
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	9307      	str	r3, [sp, #28]
 8000c1a:	9b07      	ldr	r3, [sp, #28]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c1c:	f7ff ff60 	bl	8000ae0 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8000c20:	b168      	cbz	r0, 8000c3e <AT24XX_Read+0xee>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000c22:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	d105      	bne.n	8000c36 <AT24XX_Read+0xe6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000c2a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000c2e:	6813      	ldr	r3, [r2, #0]
 8000c30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c34:	6013      	str	r3, [r2, #0]
    AT24XX_Load(address, dt, 1);
    return dt[0];
}
 8000c36:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000c3a:	b009      	add	sp, #36	; 0x24
 8000c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000c3e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000c42:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c44:	4628      	mov	r0, r5
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000c46:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c48:	f7ff ff4a 	bl	8000ae0 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	d1e8      	bne.n	8000c22 <AT24XX_Read+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000c50:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000c54:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c56:	4628      	mov	r0, r5
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000c58:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c5a:	f7ff ff41 	bl	8000ae0 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8000c5e:	4601      	mov	r1, r0
 8000c60:	2800      	cmp	r0, #0
 8000c62:	d1de      	bne.n	8000c22 <AT24XX_Read+0xd2>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000c64:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000c68:	f04f 1001 	mov.w	r0, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000c6c:	6813      	ldr	r3, [r2, #0]
 8000c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c72:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000c74:	462b      	mov	r3, r5
 8000c76:	2264      	movs	r2, #100	; 0x64
 8000c78:	f7ff fecc 	bl	8000a14 <I2C_WaitOnFlagUntilTimeout.constprop.0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000c7c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000c80:	2800      	cmp	r0, #0
 8000c82:	d1b3      	bne.n	8000bec <AT24XX_Read+0x9c>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000c84:	22af      	movs	r2, #175	; 0xaf
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000c86:	4629      	mov	r1, r5
 8000c88:	4854      	ldr	r0, [pc, #336]	; (8000ddc <AT24XX_Read+0x28c>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000c8a:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000c8c:	f7ff feee 	bl	8000a6c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d1d0      	bne.n	8000c36 <AT24XX_Read+0xe6>
    if (hi2c->XferSize == 0U)
 8000c94:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c98:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    if (hi2c->XferSize == 0U)
 8000c9c:	b9ba      	cbnz	r2, 8000cce <AT24XX_Read+0x17e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c9e:	9206      	str	r2, [sp, #24]
 8000ca0:	695a      	ldr	r2, [r3, #20]
 8000ca2:	9206      	str	r2, [sp, #24]
 8000ca4:	699a      	ldr	r2, [r3, #24]
 8000ca6:	9206      	str	r2, [sp, #24]
 8000ca8:	9a06      	ldr	r2, [sp, #24]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cb0:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000cb2:	4e4b      	ldr	r6, [pc, #300]	; (8000de0 <AT24XX_Read+0x290>)
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8000cb4:	4f4b      	ldr	r7, [pc, #300]	; (8000de4 <AT24XX_Read+0x294>)
    while (hi2c->XferSize > 0U)
 8000cb6:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d13b      	bne.n	8000d36 <AT24XX_Read+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8000cbe:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8000cc0:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
    hi2c->State = HAL_I2C_STATE_READY;
 8000cc4:	f884 20cd 	strb.w	r2, [r4, #205]	; 0xcd
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cc8:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
 8000ccc:	e7b3      	b.n	8000c36 <AT24XX_Read+0xe6>
    else if (hi2c->XferSize == 1U)
 8000cce:	2a01      	cmp	r2, #1
 8000cd0:	d112      	bne.n	8000cf8 <AT24XX_Read+0x1a8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cd8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cda:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000cdc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000ce0:	9005      	str	r0, [sp, #20]
 8000ce2:	695a      	ldr	r2, [r3, #20]
 8000ce4:	9205      	str	r2, [sp, #20]
 8000ce6:	699a      	ldr	r2, [r3, #24]
 8000ce8:	9205      	str	r2, [sp, #20]
 8000cea:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000cf2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000cf4:	b662      	cpsie	i
}
 8000cf6:	e7dc      	b.n	8000cb2 <AT24XX_Read+0x162>
    else if (hi2c->XferSize == 2U)
 8000cf8:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000cfa:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8000cfc:	d110      	bne.n	8000d20 <AT24XX_Read+0x1d0>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000cfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d06:	2300      	movs	r3, #0
 8000d08:	9304      	str	r3, [sp, #16]
 8000d0a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d0e:	695a      	ldr	r2, [r3, #20]
 8000d10:	9204      	str	r2, [sp, #16]
 8000d12:	699a      	ldr	r2, [r3, #24]
 8000d14:	9204      	str	r2, [sp, #16]
 8000d16:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d1e:	e7e8      	b.n	8000cf2 <AT24XX_Read+0x1a2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d24:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d26:	2200      	movs	r2, #0
 8000d28:	9203      	str	r2, [sp, #12]
 8000d2a:	695a      	ldr	r2, [r3, #20]
 8000d2c:	9203      	str	r2, [sp, #12]
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	9303      	str	r3, [sp, #12]
 8000d32:	9b03      	ldr	r3, [sp, #12]
 8000d34:	e7bd      	b.n	8000cb2 <AT24XX_Read+0x162>
      if (hi2c->XferSize <= 3U)
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	f200 80a2 	bhi.w	8000e80 <AT24XX_Read+0x330>
        if (hi2c->XferSize == 1U)
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d11c      	bne.n	8000d7a <AT24XX_Read+0x22a>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d40:	4628      	mov	r0, r5
 8000d42:	f7ff fe30 	bl	80009a6 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0>
 8000d46:	2800      	cmp	r0, #0
 8000d48:	f47f af75 	bne.w	8000c36 <AT24XX_Read+0xe6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000d4c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d50:	691a      	ldr	r2, [r3, #16]
 8000d52:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8000d56:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8000d58:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
          hi2c->XferSize--;
 8000d62:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
 8000d66:	3b01      	subs	r3, #1
 8000d68:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
          hi2c->XferCount--;
 8000d6c:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
 8000d70:	3b01      	subs	r3, #1
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
 8000d78:	e79d      	b.n	8000cb6 <AT24XX_Read+0x166>
        else if (hi2c->XferSize == 2U)
 8000d7a:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000d7c:	f04f 0264 	mov.w	r2, #100	; 0x64
 8000d80:	462b      	mov	r3, r5
 8000d82:	f04f 0100 	mov.w	r1, #0
 8000d86:	4630      	mov	r0, r6
        else if (hi2c->XferSize == 2U)
 8000d88:	d12e      	bne.n	8000de8 <AT24XX_Read+0x298>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000d8a:	f7ff fe43 	bl	8000a14 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	f47f af51 	bne.w	8000c36 <AT24XX_Read+0xe6>
 8000d94:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d96:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000da0:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000da2:	691a      	ldr	r2, [r3, #16]
 8000da4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8000da8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8000daa:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8000dae:	3301      	adds	r3, #1
 8000db0:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
          hi2c->XferSize--;
 8000db4:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
 8000db8:	3b01      	subs	r3, #1
 8000dba:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
          hi2c->XferCount--;
 8000dbe:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
  __ASM volatile ("cpsie i" : : : "memory");
 8000dca:	b662      	cpsie	i
 8000dcc:	e7be      	b.n	8000d4c <AT24XX_Read+0x1fc>
 8000dce:	bf00      	nop
 8000dd0:	20000208 	.word	0x20000208
 8000dd4:	00100002 	.word	0x00100002
 8000dd8:	ffff0000 	.word	0xffff0000
 8000ddc:	00010002 	.word	0x00010002
 8000de0:	00010004 	.word	0x00010004
 8000de4:	20000000 	.word	0x20000000
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000de8:	f7ff fe14 	bl	8000a14 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8000dec:	2800      	cmp	r0, #0
 8000dee:	f47f af22 	bne.w	8000c36 <AT24XX_Read+0xe6>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000df2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000df6:	6813      	ldr	r3, [r2, #0]
 8000df8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000dfc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfe:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000e00:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000e04:	691a      	ldr	r2, [r3, #16]
 8000e06:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8000e0a:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8000e0c:	f246 12a8 	movw	r2, #25000	; 0x61a8
          hi2c->pBuffPtr++;
 8000e10:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8000e14:	1c4b      	adds	r3, r1, #1
 8000e16:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
          hi2c->XferSize--;
 8000e1a:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
          hi2c->XferCount--;
 8000e24:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e36:	2223      	movs	r2, #35	; 0x23
 8000e38:	4353      	muls	r3, r2
 8000e3a:	9302      	str	r3, [sp, #8]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8000e3c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
            count--;
 8000e40:	9a02      	ldr	r2, [sp, #8]
 8000e42:	3a01      	subs	r2, #1
 8000e44:	9202      	str	r2, [sp, #8]
            if (count == 0U)
 8000e46:	9a02      	ldr	r2, [sp, #8]
 8000e48:	b982      	cbnz	r2, 8000e6c <AT24XX_Read+0x31c>
              hi2c->State               = HAL_I2C_STATE_READY;
 8000e4a:	2320      	movs	r3, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8000e4c:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
              hi2c->State               = HAL_I2C_STATE_READY;
 8000e50:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e54:	f884 20ce 	strb.w	r2, [r4, #206]	; 0xce
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e58:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 8000e5c:	f043 0320 	orr.w	r3, r3, #32
 8000e60:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  __ASM volatile ("cpsie i" : : : "memory");
 8000e64:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8000e66:	f884 20cc 	strb.w	r2, [r4, #204]	; 0xcc
 8000e6a:	e6e4      	b.n	8000c36 <AT24XX_Read+0xe6>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8000e6c:	695a      	ldr	r2, [r3, #20]
 8000e6e:	0750      	lsls	r0, r2, #29
 8000e70:	d5e6      	bpl.n	8000e40 <AT24XX_Read+0x2f0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e78:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	704b      	strb	r3, [r1, #1]
 8000e7e:	e794      	b.n	8000daa <AT24XX_Read+0x25a>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e80:	4628      	mov	r0, r5
 8000e82:	f7ff fd90 	bl	80009a6 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	f47f aed5 	bne.w	8000c36 <AT24XX_Read+0xe6>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000e8c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000e90:	691a      	ldr	r2, [r3, #16]
 8000e92:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8000e96:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8000e98:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8000e9c:	1c53      	adds	r3, r2, #1
 8000e9e:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
        hi2c->XferSize--;
 8000ea2:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
        hi2c->XferCount--;
 8000eac:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8000eb8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000ebc:	6959      	ldr	r1, [r3, #20]
 8000ebe:	0749      	lsls	r1, r1, #29
 8000ec0:	f57f aef9 	bpl.w	8000cb6 <AT24XX_Read+0x166>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	7053      	strb	r3, [r2, #1]
 8000ec8:	e746      	b.n	8000d58 <AT24XX_Read+0x208>

08000eca <I2C_WaitOnBTFFlagUntilTimeout.constprop.0>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x6e>)
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8000ecc:	b510      	push	{r4, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000ece:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 8000ed2:	6962      	ldr	r2, [r4, #20]
 8000ed4:	f012 0204 	ands.w	r2, r2, #4
 8000ed8:	d001      	beq.n	8000ede <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x14>
  return HAL_OK;
 8000eda:	2000      	movs	r0, #0
 8000edc:	e02a      	b.n	8000f34 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x6a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ede:	6961      	ldr	r1, [r4, #20]
 8000ee0:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8000ee4:	d113      	bne.n	8000f0e <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x44>
 8000ee6:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ee8:	1a12      	subs	r2, r2, r0
 8000eea:	2a64      	cmp	r2, #100	; 0x64
 8000eec:	d9f1      	bls.n	8000ed2 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 8000eee:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000ef0:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
        hi2c->State               = HAL_I2C_STATE_READY;
 8000ef4:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000ef8:	f883 10ce 	strb.w	r1, [r3, #206]	; 0xce
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000efc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
        __HAL_UNLOCK(hi2c);
 8000f00:	f883 10cc 	strb.w	r1, [r3, #204]	; 0xcc
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000f04:	f042 0220 	orr.w	r2, r2, #32
 8000f08:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8000f0c:	e011      	b.n	8000f32 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x68>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f0e:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8000f12:	6161      	str	r1, [r4, #20]
    hi2c->State               = HAL_I2C_STATE_READY;
 8000f14:	2120      	movs	r1, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000f16:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    hi2c->State               = HAL_I2C_STATE_READY;
 8000f1a:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000f1e:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000f22:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
    __HAL_UNLOCK(hi2c);
 8000f26:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000f2a:	f041 0104 	orr.w	r1, r1, #4
 8000f2e:	f8c3 10d0 	str.w	r1, [r3, #208]	; 0xd0
        __HAL_UNLOCK(hi2c);
 8000f32:	2001      	movs	r0, #1
}
 8000f34:	bd10      	pop	{r4, pc}
 8000f36:	bf00      	nop
 8000f38:	20000208 	.word	0x20000208

08000f3c <AT24XX_Update>:
void AT24XX_Write(uint16_t address, uint8_t val) {
    uint8_t save[] = {val};
    AT24XX_Save(address, save, 1);
}

void AT24XX_Update(uint16_t address, uint8_t val) {
 8000f3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f3e:	460c      	mov	r4, r1
 8000f40:	4606      	mov	r6, r0
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 8000f42:	f7ff fe05 	bl	8000b50 <AT24XX_Read>
 8000f46:	42a0      	cmp	r0, r4
 8000f48:	d04b      	beq.n	8000fe2 <AT24XX_Update+0xa6>
    uint8_t save[] = {val};
 8000f4a:	f88d 4000 	strb.w	r4, [sp]
 8000f4e:	4c5f      	ldr	r4, [pc, #380]	; (80010cc <AT24XX_Update+0x190>)
 8000f50:	6825      	ldr	r5, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f52:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
 8000f56:	2b20      	cmp	r3, #32
 8000f58:	d143      	bne.n	8000fe2 <AT24XX_Update+0xa6>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f5a:	462b      	mov	r3, r5
 8000f5c:	2219      	movs	r2, #25
 8000f5e:	2101      	movs	r1, #1
 8000f60:	485b      	ldr	r0, [pc, #364]	; (80010d0 <AT24XX_Update+0x194>)
 8000f62:	f7ff fd57 	bl	8000a14 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8000f66:	2800      	cmp	r0, #0
 8000f68:	d13b      	bne.n	8000fe2 <AT24XX_Update+0xa6>
    __HAL_LOCK(hi2c);
 8000f6a:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d037      	beq.n	8000fe2 <AT24XX_Update+0xa6>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f72:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    __HAL_LOCK(hi2c);
 8000f76:	f884 10cc 	strb.w	r1, [r4, #204]	; 0xcc
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000f7e:	bf58      	it	pl
 8000f80:	681a      	ldrpl	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000f82:	f04f 1001 	mov.w	r0, #65537	; 0x10001
      __HAL_I2C_ENABLE(hi2c);
 8000f86:	bf5c      	itt	pl
 8000f88:	430a      	orrpl	r2, r1
 8000f8a:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f8c:	681a      	ldr	r2, [r3, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f8e:	2100      	movs	r1, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f94:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f96:	2221      	movs	r2, #33	; 0x21
 8000f98:	f884 20cd 	strb.w	r2, [r4, #205]	; 0xcd
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f9c:	2240      	movs	r2, #64	; 0x40
 8000f9e:	f884 20ce 	strb.w	r2, [r4, #206]	; 0xce
    hi2c->XferCount   = Size;
 8000fa2:	2201      	movs	r2, #1
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fa4:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
    hi2c->XferCount   = Size;
 8000fa8:	f8a4 20ba 	strh.w	r2, [r4, #186]	; 0xba
    hi2c->XferSize    = hi2c->XferCount;
 8000fac:	f8b4 20ba 	ldrh.w	r2, [r4, #186]	; 0xba
    hi2c->pBuffPtr    = pData;
 8000fb0:	f8c4 d0b4 	str.w	sp, [r4, #180]	; 0xb4
    hi2c->XferSize    = hi2c->XferCount;
 8000fb4:	f8a4 20b8 	strh.w	r2, [r4, #184]	; 0xb8
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000fb8:	4a46      	ldr	r2, [pc, #280]	; (80010d4 <AT24XX_Update+0x198>)
 8000fba:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fc4:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000fc6:	462b      	mov	r3, r5
 8000fc8:	2264      	movs	r2, #100	; 0x64
 8000fca:	f7ff fd23 	bl	8000a14 <I2C_WaitOnFlagUntilTimeout.constprop.0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000fce:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000fd2:	b140      	cbz	r0, 8000fe6 <AT24XX_Update+0xaa>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	05d9      	lsls	r1, r3, #23
 8000fd8:	d503      	bpl.n	8000fe2 <AT24XX_Update+0xa6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000fda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fde:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
}
 8000fe2:	b002      	add	sp, #8
 8000fe4:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000fe6:	22ae      	movs	r2, #174	; 0xae
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000fe8:	4629      	mov	r1, r5
 8000fea:	483b      	ldr	r0, [pc, #236]	; (80010d8 <AT24XX_Update+0x19c>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000fec:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000fee:	f7ff fd3d 	bl	8000a6c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	d1f5      	bne.n	8000fe2 <AT24XX_Update+0xa6>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ff6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000ffa:	9001      	str	r0, [sp, #4]
 8000ffc:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ffe:	4628      	mov	r0, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001000:	9201      	str	r2, [sp, #4]
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	9b01      	ldr	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001008:	f7ff fd6a 	bl	8000ae0 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 800100c:	b150      	cbz	r0, 8001024 <AT24XX_Update+0xe8>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800100e:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 8001012:	2b04      	cmp	r3, #4
 8001014:	d1e5      	bne.n	8000fe2 <AT24XX_Update+0xa6>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001016:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800101a:	6813      	ldr	r3, [r2, #0]
 800101c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	e7de      	b.n	8000fe2 <AT24XX_Update+0xa6>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001024:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001028:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800102a:	4628      	mov	r0, r5
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800102c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800102e:	f7ff fd57 	bl	8000ae0 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8001032:	2800      	cmp	r0, #0
 8001034:	d1eb      	bne.n	800100e <AT24XX_Update+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001036:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800103a:	b2f6      	uxtb	r6, r6
 800103c:	611e      	str	r6, [r3, #16]
    while (hi2c->XferSize > 0U)
 800103e:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001042:	4628      	mov	r0, r5
    while (hi2c->XferSize > 0U)
 8001044:	b9a3      	cbnz	r3, 8001070 <AT24XX_Update+0x134>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001046:	f7ff ff40 	bl	8000eca <I2C_WaitOnBTFFlagUntilTimeout.constprop.0>
 800104a:	2800      	cmp	r0, #0
 800104c:	d1df      	bne.n	800100e <AT24XX_Update+0xd2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800104e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001052:	6813      	ldr	r3, [r2, #0]
 8001054:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001058:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800105a:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 800105c:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
    hi2c->State = HAL_I2C_STATE_READY;
 8001060:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001064:	f884 00ce 	strb.w	r0, [r4, #206]	; 0xce
        HAL_Delay(5);
 8001068:	2005      	movs	r0, #5
 800106a:	f7ff f95d 	bl	8000328 <HAL_Delay>
}
 800106e:	e7b8      	b.n	8000fe2 <AT24XX_Update+0xa6>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001070:	f7ff fd36 	bl	8000ae0 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8001074:	2800      	cmp	r0, #0
 8001076:	d1ca      	bne.n	800100e <AT24XX_Update+0xd2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001078:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800107c:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 8001080:	461a      	mov	r2, r3
 8001082:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001086:	6131      	str	r1, [r6, #16]
      hi2c->pBuffPtr++;
 8001088:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
      hi2c->XferCount--;
 800108c:	f8b4 20ba 	ldrh.w	r2, [r4, #186]	; 0xba
      hi2c->XferSize--;
 8001090:	f8b4 10b8 	ldrh.w	r1, [r4, #184]	; 0xb8
      hi2c->XferCount--;
 8001094:	3a01      	subs	r2, #1
 8001096:	b292      	uxth	r2, r2
 8001098:	f8a4 20ba 	strh.w	r2, [r4, #186]	; 0xba
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800109c:	6972      	ldr	r2, [r6, #20]
      hi2c->XferSize--;
 800109e:	1e48      	subs	r0, r1, #1
 80010a0:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80010a2:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 80010a4:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80010a8:	d5c9      	bpl.n	800103e <AT24XX_Update+0x102>
 80010aa:	2800      	cmp	r0, #0
 80010ac:	d0c7      	beq.n	800103e <AT24XX_Update+0x102>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80010ae:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 80010b0:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80010b2:	6132      	str	r2, [r6, #16]
        hi2c->pBuffPtr++;
 80010b4:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
        hi2c->XferCount--;
 80010b8:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
        hi2c->XferSize--;
 80010bc:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80010be:	3b01      	subs	r3, #1
 80010c0:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80010c2:	f8a4 10b8 	strh.w	r1, [r4, #184]	; 0xb8
        hi2c->XferCount--;
 80010c6:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
 80010ca:	e7b8      	b.n	800103e <AT24XX_Update+0x102>
 80010cc:	20000208 	.word	0x20000208
 80010d0:	00100002 	.word	0x00100002
 80010d4:	ffff0000 	.word	0xffff0000
 80010d8:	00010002 	.word	0x00010002

080010dc <HAL_I2C_Master_Receive.constprop.0.isra.0>:
  __IO uint32_t count = 0U;
 80010dc:	2300      	movs	r3, #0
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 80010de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010e2:	4c9c      	ldr	r4, [pc, #624]	; (8001354 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x278>)
 80010e4:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	6826      	ldr	r6, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80010ea:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 80010ee:	4607      	mov	r7, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80010f0:	2b20      	cmp	r3, #32
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 80010f2:	4689      	mov	r9, r1
 80010f4:	4690      	mov	r8, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80010f6:	d154      	bne.n	80011a2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xc6>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010f8:	4633      	mov	r3, r6
 80010fa:	2219      	movs	r2, #25
 80010fc:	2101      	movs	r1, #1
 80010fe:	4896      	ldr	r0, [pc, #600]	; (8001358 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x27c>)
 8001100:	f7ff fc88 	bl	8000a14 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8001104:	2800      	cmp	r0, #0
 8001106:	d14c      	bne.n	80011a2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xc6>
    __HAL_LOCK(hi2c);
 8001108:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
 800110c:	428b      	cmp	r3, r1
 800110e:	d048      	beq.n	80011a2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xc6>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001110:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
    __HAL_LOCK(hi2c);
 8001114:	f884 10cc 	strb.w	r1, [r4, #204]	; 0xcc
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001118:	682b      	ldr	r3, [r5, #0]
 800111a:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800111c:	bf5e      	ittt	pl
 800111e:	682b      	ldrpl	r3, [r5, #0]
 8001120:	430b      	orrpl	r3, r1
 8001122:	602b      	strpl	r3, [r5, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001124:	682b      	ldr	r3, [r5, #0]
 8001126:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800112a:	602b      	str	r3, [r5, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800112c:	2322      	movs	r3, #34	; 0x22
 800112e:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001132:	2310      	movs	r3, #16
 8001134:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    hi2c->XferCount   = Size;
 800113e:	f8a4 80ba 	strh.w	r8, [r4, #186]	; 0xba
    hi2c->XferSize    = hi2c->XferCount;
 8001142:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
    hi2c->pBuffPtr    = pData;
 8001146:	f8c4 90b4 	str.w	r9, [r4, #180]	; 0xb4
    hi2c->XferSize    = hi2c->XferCount;
 800114a:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800114e:	4b83      	ldr	r3, [pc, #524]	; (800135c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x280>)
 8001150:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001154:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001158:	682a      	ldr	r2, [r5, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800115a:	2b08      	cmp	r3, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800115c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001160:	602a      	str	r2, [r5, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001162:	d004      	beq.n	800116e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x92>
 8001164:	2b01      	cmp	r3, #1
 8001166:	d002      	beq.n	800116e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x92>
 8001168:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800116c:	d104      	bne.n	8001178 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800116e:	682b      	ldr	r3, [r5, #0]
 8001170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001174:	602b      	str	r3, [r5, #0]
 8001176:	e003      	b.n	8001180 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xa4>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001178:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800117c:	2b11      	cmp	r3, #17
 800117e:	d0f6      	beq.n	800116e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x92>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001180:	4633      	mov	r3, r6
 8001182:	2264      	movs	r2, #100	; 0x64
 8001184:	2100      	movs	r1, #0
 8001186:	f04f 1001 	mov.w	r0, #65537	; 0x10001
 800118a:	f7ff fc43 	bl	8000a14 <I2C_WaitOnFlagUntilTimeout.constprop.0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800118e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001192:	b148      	cbz	r0, 80011a8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xcc>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	05dd      	lsls	r5, r3, #23
 8001198:	d503      	bpl.n	80011a2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xc6>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800119a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800119e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
}
 80011a2:	b007      	add	sp, #28
 80011a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011a8:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 80011ac:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80011b0:	d127      	bne.n	8001202 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x126>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80011b2:	f047 0701 	orr.w	r7, r7, #1
 80011b6:	b2ff      	uxtb	r7, r7
 80011b8:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80011ba:	4631      	mov	r1, r6
 80011bc:	4868      	ldr	r0, [pc, #416]	; (8001360 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x284>)
 80011be:	f7ff fc55 	bl	8000a6c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d1ed      	bne.n	80011a2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xc6>
    if (hi2c->XferSize == 0U)
 80011c6:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011ca:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
    if (hi2c->XferSize == 0U)
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d142      	bne.n	8001258 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x17c>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011d2:	9304      	str	r3, [sp, #16]
 80011d4:	6953      	ldr	r3, [r2, #20]
 80011d6:	9304      	str	r3, [sp, #16]
 80011d8:	6993      	ldr	r3, [r2, #24]
 80011da:	9304      	str	r3, [sp, #16]
 80011dc:	9b04      	ldr	r3, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011de:	6813      	ldr	r3, [r2, #0]
 80011e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e4:	6013      	str	r3, [r2, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80011e6:	4d5f      	ldr	r5, [pc, #380]	; (8001364 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x288>)
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80011e8:	4f5f      	ldr	r7, [pc, #380]	; (8001368 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x28c>)
    while (hi2c->XferSize > 0U)
 80011ea:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d164      	bne.n	80012bc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 80011f2:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80011f4:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
    hi2c->State = HAL_I2C_STATE_READY;
 80011f8:	f884 20cd 	strb.w	r2, [r4, #205]	; 0xcd
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80011fc:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
    return HAL_OK;
 8001200:	e7cf      	b.n	80011a2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xc6>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001202:	22f0      	movs	r2, #240	; 0xf0
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001204:	4631      	mov	r1, r6
 8001206:	4859      	ldr	r0, [pc, #356]	; (800136c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x290>)
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001208:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800120a:	f7ff fc2f 	bl	8000a6c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 800120e:	2800      	cmp	r0, #0
 8001210:	d1c7      	bne.n	80011a2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xc6>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001212:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001216:	4631      	mov	r1, r6
 8001218:	4851      	ldr	r0, [pc, #324]	; (8001360 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x284>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800121a:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800121c:	f7ff fc26 	bl	8000a6c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8001220:	4601      	mov	r1, r0
 8001222:	2800      	cmp	r0, #0
 8001224:	d1bd      	bne.n	80011a2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xc6>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001226:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800122a:	9005      	str	r0, [sp, #20]
 800122c:	695a      	ldr	r2, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800122e:	f04f 1001 	mov.w	r0, #65537	; 0x10001
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001232:	9205      	str	r2, [sp, #20]
 8001234:	699a      	ldr	r2, [r3, #24]
 8001236:	9205      	str	r2, [sp, #20]
 8001238:	9a05      	ldr	r2, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001240:	601a      	str	r2, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001242:	4633      	mov	r3, r6
 8001244:	2264      	movs	r2, #100	; 0x64
 8001246:	f7ff fbe5 	bl	8000a14 <I2C_WaitOnFlagUntilTimeout.constprop.0>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800124a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800124e:	2800      	cmp	r0, #0
 8001250:	d1a0      	bne.n	8001194 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb8>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001252:	22f1      	movs	r2, #241	; 0xf1
 8001254:	611a      	str	r2, [r3, #16]
 8001256:	e7b0      	b.n	80011ba <HAL_I2C_Master_Receive.constprop.0.isra.0+0xde>
    else if (hi2c->XferSize == 1U)
 8001258:	2b01      	cmp	r3, #1
 800125a:	d112      	bne.n	8001282 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800125c:	6813      	ldr	r3, [r2, #0]
 800125e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001262:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001266:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800126a:	9003      	str	r0, [sp, #12]
 800126c:	695a      	ldr	r2, [r3, #20]
 800126e:	9203      	str	r2, [sp, #12]
 8001270:	699a      	ldr	r2, [r3, #24]
 8001272:	9203      	str	r2, [sp, #12]
 8001274:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800127c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800127e:	b662      	cpsie	i
}
 8001280:	e7b1      	b.n	80011e6 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x10a>
    else if (hi2c->XferSize == 2U)
 8001282:	2b02      	cmp	r3, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001284:	6813      	ldr	r3, [r2, #0]
    else if (hi2c->XferSize == 2U)
 8001286:	d10f      	bne.n	80012a8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1cc>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001288:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800128c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800128e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001290:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001294:	9002      	str	r0, [sp, #8]
 8001296:	695a      	ldr	r2, [r3, #20]
 8001298:	9202      	str	r2, [sp, #8]
 800129a:	699a      	ldr	r2, [r3, #24]
 800129c:	9202      	str	r2, [sp, #8]
 800129e:	9a02      	ldr	r2, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012a6:	e7e9      	b.n	800127c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1a0>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80012a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ac:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012ae:	9001      	str	r0, [sp, #4]
 80012b0:	6953      	ldr	r3, [r2, #20]
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	6993      	ldr	r3, [r2, #24]
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	9b01      	ldr	r3, [sp, #4]
 80012ba:	e794      	b.n	80011e6 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x10a>
      if (hi2c->XferSize <= 3U)
 80012bc:	2b03      	cmp	r3, #3
 80012be:	f200 80a3 	bhi.w	8001408 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x32c>
        if (hi2c->XferSize == 1U)
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d11c      	bne.n	8001300 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x224>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012c6:	4630      	mov	r0, r6
 80012c8:	f7ff fb6d 	bl	80009a6 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0>
 80012cc:	2800      	cmp	r0, #0
 80012ce:	f47f af68 	bne.w	80011a2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xc6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012d2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 80012dc:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80012de:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 80012e2:	3301      	adds	r3, #1
 80012e4:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
          hi2c->XferSize--;
 80012e8:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
 80012ec:	3b01      	subs	r3, #1
 80012ee:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
          hi2c->XferCount--;
 80012f2:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
 80012f6:	3b01      	subs	r3, #1
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
 80012fe:	e774      	b.n	80011ea <HAL_I2C_Master_Receive.constprop.0.isra.0+0x10e>
        else if (hi2c->XferSize == 2U)
 8001300:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001302:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001306:	4633      	mov	r3, r6
 8001308:	f04f 0100 	mov.w	r1, #0
 800130c:	4628      	mov	r0, r5
        else if (hi2c->XferSize == 2U)
 800130e:	d12f      	bne.n	8001370 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x294>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001310:	f7ff fb80 	bl	8000a14 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8001314:	2800      	cmp	r0, #0
 8001316:	f47f af44 	bne.w	80011a2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xc6>
 800131a:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800131c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001326:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001328:	691a      	ldr	r2, [r3, #16]
 800132a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800132e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001330:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8001334:	3301      	adds	r3, #1
 8001336:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
          hi2c->XferSize--;
 800133a:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
 800133e:	3b01      	subs	r3, #1
 8001340:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
          hi2c->XferCount--;
 8001344:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
 8001348:	3b01      	subs	r3, #1
 800134a:	b29b      	uxth	r3, r3
 800134c:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
  __ASM volatile ("cpsie i" : : : "memory");
 8001350:	b662      	cpsie	i
 8001352:	e7be      	b.n	80012d2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1f6>
 8001354:	20000208 	.word	0x20000208
 8001358:	00100002 	.word	0x00100002
 800135c:	ffff0000 	.word	0xffff0000
 8001360:	00010002 	.word	0x00010002
 8001364:	00010004 	.word	0x00010004
 8001368:	20000000 	.word	0x20000000
 800136c:	00010008 	.word	0x00010008
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001370:	f7ff fb50 	bl	8000a14 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8001374:	2800      	cmp	r0, #0
 8001376:	f47f af14 	bne.w	80011a2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xc6>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800137a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800137e:	6813      	ldr	r3, [r2, #0]
 8001380:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001384:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001386:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001388:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800138c:	691a      	ldr	r2, [r3, #16]
 800138e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8001392:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001394:	f246 12a8 	movw	r2, #25000	; 0x61a8
          hi2c->pBuffPtr++;
 8001398:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800139c:	1c4b      	adds	r3, r1, #1
 800139e:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
          hi2c->XferSize--;
 80013a2:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
 80013a6:	3b01      	subs	r3, #1
 80013a8:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
          hi2c->XferCount--;
 80013ac:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
 80013b0:	3b01      	subs	r3, #1
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80013be:	2223      	movs	r2, #35	; 0x23
 80013c0:	4353      	muls	r3, r2
 80013c2:	9300      	str	r3, [sp, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80013c4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
            count--;
 80013c8:	9a00      	ldr	r2, [sp, #0]
 80013ca:	3a01      	subs	r2, #1
 80013cc:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 80013ce:	9a00      	ldr	r2, [sp, #0]
 80013d0:	b982      	cbnz	r2, 80013f4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x318>
              hi2c->State               = HAL_I2C_STATE_READY;
 80013d2:	2320      	movs	r3, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80013d4:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
              hi2c->State               = HAL_I2C_STATE_READY;
 80013d8:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013dc:	f884 20ce 	strb.w	r2, [r4, #206]	; 0xce
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013e0:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 80013e4:	f043 0320 	orr.w	r3, r3, #32
 80013e8:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  __ASM volatile ("cpsie i" : : : "memory");
 80013ec:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80013ee:	f884 20cc 	strb.w	r2, [r4, #204]	; 0xcc
              return HAL_ERROR;
 80013f2:	e6d6      	b.n	80011a2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xc6>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	0750      	lsls	r0, r2, #29
 80013f8:	d5e6      	bpl.n	80013c8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2ec>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001400:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	704b      	strb	r3, [r1, #1]
 8001406:	e793      	b.n	8001330 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x254>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001408:	4630      	mov	r0, r6
 800140a:	f7ff facc 	bl	80009a6 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0>
 800140e:	2800      	cmp	r0, #0
 8001410:	f47f aec7 	bne.w	80011a2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xc6>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001414:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001418:	691a      	ldr	r2, [r3, #16]
 800141a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800141e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001420:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8001424:	1c53      	adds	r3, r2, #1
 8001426:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
        hi2c->XferSize--;
 800142a:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
 800142e:	3b01      	subs	r3, #1
 8001430:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
        hi2c->XferCount--;
 8001434:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
 8001438:	3b01      	subs	r3, #1
 800143a:	b29b      	uxth	r3, r3
 800143c:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001440:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001444:	6959      	ldr	r1, [r3, #20]
 8001446:	0749      	lsls	r1, r1, #29
 8001448:	f57f aecf 	bpl.w	80011ea <HAL_I2C_Master_Receive.constprop.0.isra.0+0x10e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	7053      	strb	r3, [r2, #1]
 8001450:	e745      	b.n	80012de <HAL_I2C_Master_Receive.constprop.0.isra.0+0x202>

08001452 <HAL_I2C_Master_Transmit.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8001452:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001456:	4c65      	ldr	r4, [pc, #404]	; (80015ec <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x19a>)
 8001458:	4607      	mov	r7, r0
 800145a:	6826      	ldr	r6, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800145c:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8001460:	4689      	mov	r9, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001462:	2b20      	cmp	r3, #32
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8001464:	4690      	mov	r8, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001466:	d150      	bne.n	800150a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xb8>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001468:	4633      	mov	r3, r6
 800146a:	2219      	movs	r2, #25
 800146c:	2101      	movs	r1, #1
 800146e:	4860      	ldr	r0, [pc, #384]	; (80015f0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x19e>)
 8001470:	f7ff fad0 	bl	8000a14 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8001474:	2800      	cmp	r0, #0
 8001476:	d148      	bne.n	800150a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xb8>
    __HAL_LOCK(hi2c);
 8001478:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
 800147c:	428b      	cmp	r3, r1
 800147e:	d044      	beq.n	800150a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xb8>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001480:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
    __HAL_LOCK(hi2c);
 8001484:	f884 10cc 	strb.w	r1, [r4, #204]	; 0xcc
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001488:	682b      	ldr	r3, [r5, #0]
 800148a:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800148c:	bf5e      	ittt	pl
 800148e:	682b      	ldrpl	r3, [r5, #0]
 8001490:	430b      	orrpl	r3, r1
 8001492:	602b      	strpl	r3, [r5, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001494:	682b      	ldr	r3, [r5, #0]
 8001496:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800149a:	602b      	str	r3, [r5, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800149c:	2321      	movs	r3, #33	; 0x21
 800149e:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80014a2:	2310      	movs	r3, #16
 80014a4:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    hi2c->XferCount   = Size;
 80014ae:	f8a4 80ba 	strh.w	r8, [r4, #186]	; 0xba
    hi2c->XferSize    = hi2c->XferCount;
 80014b2:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
    hi2c->pBuffPtr    = pData;
 80014b6:	f8c4 90b4 	str.w	r9, [r4, #180]	; 0xb4
    hi2c->XferSize    = hi2c->XferCount;
 80014ba:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014be:	4b4d      	ldr	r3, [pc, #308]	; (80015f4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1a2>)
 80014c0:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80014c4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d004      	beq.n	80014d6 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d002      	beq.n	80014d6 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
 80014d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80014d4:	d104      	bne.n	80014e0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x8e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014d6:	682b      	ldr	r3, [r5, #0]
 80014d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014dc:	602b      	str	r3, [r5, #0]
 80014de:	e003      	b.n	80014e8 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x96>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80014e0:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 80014e4:	2b12      	cmp	r3, #18
 80014e6:	d0f6      	beq.n	80014d6 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014e8:	4633      	mov	r3, r6
 80014ea:	2264      	movs	r2, #100	; 0x64
 80014ec:	2100      	movs	r1, #0
 80014ee:	f04f 1001 	mov.w	r0, #65537	; 0x10001
 80014f2:	f7ff fa8f 	bl	8000a14 <I2C_WaitOnFlagUntilTimeout.constprop.0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80014f6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014fa:	b148      	cbz	r0, 8001510 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xbe>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	05de      	lsls	r6, r3, #23
 8001500:	d503      	bpl.n	800150a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xb8>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001506:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
}
 800150a:	b003      	add	sp, #12
 800150c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001510:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8001514:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001518:	d11f      	bne.n	800155a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x108>
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800151a:	4631      	mov	r1, r6
 800151c:	4836      	ldr	r0, [pc, #216]	; (80015f8 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1a6>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800151e:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001520:	f7ff faa4 	bl	8000a6c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8001524:	2800      	cmp	r0, #0
 8001526:	d1f0      	bne.n	800150a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xb8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001528:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800152c:	9001      	str	r0, [sp, #4]
 800152e:	695a      	ldr	r2, [r3, #20]
 8001530:	9201      	str	r2, [sp, #4]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	9301      	str	r3, [sp, #4]
 8001536:	9b01      	ldr	r3, [sp, #4]
    while (hi2c->XferSize > 0U)
 8001538:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
 800153c:	b9c3      	cbnz	r3, 8001570 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x11e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800153e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8001542:	680a      	ldr	r2, [r1, #0]
 8001544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001548:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800154a:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800154c:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
    hi2c->State = HAL_I2C_STATE_READY;
 8001550:	f884 20cd 	strb.w	r2, [r4, #205]	; 0xcd
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001554:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
    return HAL_OK;
 8001558:	e7d7      	b.n	800150a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xb8>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800155a:	22f0      	movs	r2, #240	; 0xf0
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800155c:	4631      	mov	r1, r6
 800155e:	4827      	ldr	r0, [pc, #156]	; (80015fc <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1aa>)
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001560:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001562:	f7ff fa83 	bl	8000a6c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8001566:	2800      	cmp	r0, #0
 8001568:	d1cf      	bne.n	800150a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xb8>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800156a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800156e:	e7d4      	b.n	800151a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xc8>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001570:	4630      	mov	r0, r6
 8001572:	f7ff fab5 	bl	8000ae0 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8001576:	b150      	cbz	r0, 800158e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x13c>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001578:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 800157c:	2b04      	cmp	r3, #4
 800157e:	d1c4      	bne.n	800150a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xb8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001580:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001584:	6813      	ldr	r3, [r2, #0]
 8001586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	e7bd      	b.n	800150a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xb8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800158e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8001592:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8001596:	461a      	mov	r2, r3
 8001598:	f812 1b01 	ldrb.w	r1, [r2], #1
 800159c:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 800159e:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
      hi2c->XferCount--;
 80015a2:	f8b4 20ba 	ldrh.w	r2, [r4, #186]	; 0xba
 80015a6:	3a01      	subs	r2, #1
 80015a8:	b292      	uxth	r2, r2
 80015aa:	f8a4 20ba 	strh.w	r2, [r4, #186]	; 0xba
      hi2c->XferSize--;
 80015ae:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015b2:	6945      	ldr	r5, [r0, #20]
      hi2c->XferSize--;
 80015b4:	1e51      	subs	r1, r2, #1
 80015b6:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015b8:	076d      	lsls	r5, r5, #29
      hi2c->XferSize--;
 80015ba:	f8a4 10b8 	strh.w	r1, [r4, #184]	; 0xb8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015be:	d50e      	bpl.n	80015de <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18c>
 80015c0:	b169      	cbz	r1, 80015de <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18c>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015c2:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 80015c4:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015c6:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 80015c8:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
        hi2c->XferCount--;
 80015cc:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
        hi2c->XferSize--;
 80015d0:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80015d2:	3b01      	subs	r3, #1
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
        hi2c->XferSize--;
 80015da:	f8a4 20b8 	strh.w	r2, [r4, #184]	; 0xb8
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015de:	4630      	mov	r0, r6
 80015e0:	f7ff fc73 	bl	8000eca <I2C_WaitOnBTFFlagUntilTimeout.constprop.0>
 80015e4:	2800      	cmp	r0, #0
 80015e6:	d0a7      	beq.n	8001538 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xe6>
 80015e8:	e7c6      	b.n	8001578 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x126>
 80015ea:	bf00      	nop
 80015ec:	20000208 	.word	0x20000208
 80015f0:	00100002 	.word	0x00100002
 80015f4:	ffff0000 	.word	0xffff0000
 80015f8:	00010002 	.word	0x00010002
 80015fc:	00010008 	.word	0x00010008

08001600 <BME280_Init>:
}

void BME280_Init(void) {
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 8001600:	23f2      	movs	r3, #242	; 0xf2
void BME280_Init(void) {
 8001602:	b510      	push	{r4, lr}
 8001604:	b086      	sub	sp, #24
    cmd[0] = 0xF2; // ctrl_hum
 8001606:	f88d 3004 	strb.w	r3, [sp, #4]
    cmd[1] = 0x05; // Humidity oversampling x16
 800160a:	2305      	movs	r3, #5
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800160c:	a901      	add	r1, sp, #4
 800160e:	2202      	movs	r2, #2
 8001610:	20ec      	movs	r0, #236	; 0xec
    cmd[1] = 0x05; // Humidity oversampling x16
 8001612:	f88d 3005 	strb.w	r3, [sp, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8001616:	f7ff ff1c 	bl	8001452 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF4; // ctrl_meas
 800161a:	23f4      	movs	r3, #244	; 0xf4
 800161c:	f88d 3004 	strb.w	r3, [sp, #4]
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 8001620:	23b7      	movs	r3, #183	; 0xb7
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8001622:	a901      	add	r1, sp, #4
 8001624:	2202      	movs	r2, #2
 8001626:	20ec      	movs	r0, #236	; 0xec
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 8001628:	f88d 3005 	strb.w	r3, [sp, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800162c:	f7ff ff11 	bl	8001452 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF5; // config
 8001630:	23f5      	movs	r3, #245	; 0xf5
 8001632:	f88d 3004 	strb.w	r3, [sp, #4]
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
 8001636:	23a0      	movs	r3, #160	; 0xa0
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8001638:	a901      	add	r1, sp, #4
 800163a:	2202      	movs	r2, #2
 800163c:	20ec      	movs	r0, #236	; 0xec
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
 800163e:	f88d 3005 	strb.w	r3, [sp, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8001642:	f7ff ff06 	bl	8001452 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0x88; // read dig_T regs
 8001646:	2388      	movs	r3, #136	; 0x88
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001648:	a901      	add	r1, sp, #4
 800164a:	2201      	movs	r2, #1
 800164c:	20ec      	movs	r0, #236	; 0xec
    cmd[0] = 0x88; // read dig_T regs
 800164e:	f88d 3004 	strb.w	r3, [sp, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001652:	f7ff fefe 	bl	8001452 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 8001656:	a901      	add	r1, sp, #4
 8001658:	2206      	movs	r2, #6
 800165a:	20ec      	movs	r0, #236	; 0xec

    dig_T1 = (cmd[1] << 8) | cmd[0];
 800165c:	4c3f      	ldr	r4, [pc, #252]	; (800175c <BME280_Init+0x15c>)
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 800165e:	f7ff fd3d 	bl	80010dc <HAL_I2C_Master_Receive.constprop.0.isra.0>
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8001662:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    dig_T2 = (cmd[3] << 8) | cmd[2];
    dig_T3 = (cmd[5] << 8) | cmd[4];

    cmd[0] = 0x8E; // read dig_P regs
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001666:	a901      	add	r1, sp, #4
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8001668:	f8a4 30e4 	strh.w	r3, [r4, #228]	; 0xe4
    dig_T2 = (cmd[3] << 8) | cmd[2];
 800166c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001670:	2201      	movs	r2, #1
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8001672:	f8a4 30e6 	strh.w	r3, [r4, #230]	; 0xe6
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8001676:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800167a:	20ec      	movs	r0, #236	; 0xec
    dig_T3 = (cmd[5] << 8) | cmd[4];
 800167c:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
    cmd[0] = 0x8E; // read dig_P regs
 8001680:	238e      	movs	r3, #142	; 0x8e
 8001682:	f88d 3004 	strb.w	r3, [sp, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001686:	f7ff fee4 	bl	8001452 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 800168a:	a901      	add	r1, sp, #4
 800168c:	2212      	movs	r2, #18
 800168e:	20ec      	movs	r0, #236	; 0xec
 8001690:	f7ff fd24 	bl	80010dc <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_P1 = (cmd[1] << 8) | cmd[0];
 8001694:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    dig_P7 = (cmd[13] << 8) | cmd[12];
    dig_P8 = (cmd[15] << 8) | cmd[14];
    dig_P9 = (cmd[17] << 8) | cmd[16];

    cmd[0] = 0xA1; // read dig_H regs
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001698:	a901      	add	r1, sp, #4
    dig_P1 = (cmd[1] << 8) | cmd[0];
 800169a:	f8a4 30ea 	strh.w	r3, [r4, #234]	; 0xea
    dig_P2 = (cmd[3] << 8) | cmd[2];
 800169e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80016a2:	2201      	movs	r2, #1
    dig_P2 = (cmd[3] << 8) | cmd[2];
 80016a4:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
    dig_P3 = (cmd[5] << 8) | cmd[4];
 80016a8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80016ac:	20ec      	movs	r0, #236	; 0xec
    dig_P3 = (cmd[5] << 8) | cmd[4];
 80016ae:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    dig_P4 = (cmd[7] << 8) | cmd[6];
 80016b2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80016b6:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
    dig_P5 = (cmd[9] << 8) | cmd[8];
 80016ba:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80016be:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
    dig_P6 = (cmd[11] << 8) | cmd[10];
 80016c2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80016c6:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
    dig_P7 = (cmd[13] << 8) | cmd[12];
 80016ca:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80016ce:	f8a4 30f6 	strh.w	r3, [r4, #246]	; 0xf6
    dig_P8 = (cmd[15] << 8) | cmd[14];
 80016d2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80016d6:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    dig_P9 = (cmd[17] << 8) | cmd[16];
 80016da:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80016de:	f8a4 30fa 	strh.w	r3, [r4, #250]	; 0xfa
    cmd[0] = 0xA1; // read dig_H regs
 80016e2:	23a1      	movs	r3, #161	; 0xa1
 80016e4:	f88d 3004 	strb.w	r3, [sp, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80016e8:	f7ff feb3 	bl	8001452 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80016ec:	a901      	add	r1, sp, #4
 80016ee:	2201      	movs	r2, #1
 80016f0:	20ec      	movs	r0, #236	; 0xec
 80016f2:	f7ff fcf3 	bl	80010dc <HAL_I2C_Master_Receive.constprop.0.isra.0>

    cmd[1] = 0xE1; // read dig_H regs
 80016f6:	23e1      	movs	r3, #225	; 0xe1

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 80016f8:	f10d 0105 	add.w	r1, sp, #5
 80016fc:	2201      	movs	r2, #1
 80016fe:	20ec      	movs	r0, #236	; 0xec
    cmd[1] = 0xE1; // read dig_H regs
 8001700:	f88d 3005 	strb.w	r3, [sp, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8001704:	f7ff fea5 	bl	8001452 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 8001708:	f10d 0105 	add.w	r1, sp, #5
 800170c:	2207      	movs	r2, #7
 800170e:	20ec      	movs	r0, #236	; 0xec
 8001710:	f7ff fce4 	bl	80010dc <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_H1 = cmd[0];
 8001714:	f89d 3004 	ldrb.w	r3, [sp, #4]
    dig_H2 = (cmd[2] << 8) | cmd[1];
    dig_H3 = cmd[3];
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8001718:	f89d 1008 	ldrb.w	r1, [sp, #8]
    dig_H1 = cmd[0];
 800171c:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
    dig_H2 = (cmd[2] << 8) | cmd[1];
 8001720:	f8bd 3005 	ldrh.w	r3, [sp, #5]
 8001724:	f8a4 30fe 	strh.w	r3, [r4, #254]	; 0xfe
    dig_H3 = cmd[3];
 8001728:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800172c:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8001730:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001734:	f003 020f 	and.w	r2, r3, #15
 8001738:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800173c:	f8a4 2102 	strh.w	r2, [r4, #258]	; 0x102
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8001740:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800174a:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
    dig_H6 = cmd[7];
 800174e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001752:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
}
 8001756:	b006      	add	sp, #24
 8001758:	bd10      	pop	{r4, pc}
 800175a:	bf00      	nop
 800175c:	20000208 	.word	0x20000208

08001760 <DS3231_Update>:
uint8_t bcdToDec(uint8_t val) {
    return ((val / 16 * 10) + (val % 16));
}

void DS3231_Update(void) {
    uint8_t cmd = 0;
 8001760:	2300      	movs	r3, #0
void DS3231_Update(void) {
 8001762:	b513      	push	{r0, r1, r4, lr}
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8001764:	4c28      	ldr	r4, [pc, #160]	; (8001808 <DS3231_Update+0xa8>)
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8001766:	f10d 0107 	add.w	r1, sp, #7
 800176a:	2201      	movs	r2, #1
 800176c:	20d0      	movs	r0, #208	; 0xd0
    uint8_t cmd = 0;
 800176e:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8001772:	f7ff fe6e 	bl	8001452 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8001776:	2213      	movs	r2, #19
 8001778:	20d0      	movs	r0, #208	; 0xd0
 800177a:	f504 7184 	add.w	r1, r4, #264	; 0x108
 800177e:	f7ff fcad 	bl	80010dc <HAL_I2C_Master_Receive.constprop.0.isra.0>
    rtcBufferSet[1] = rtcBuffer[0];
 8001782:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
 8001786:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
    rtcBufferSet[2] = rtcBuffer[1];
 800178a:	f894 3109 	ldrb.w	r3, [r4, #265]	; 0x109
 800178e:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
    rtcBufferSet[3] = rtcBuffer[2];
 8001792:	f894 310a 	ldrb.w	r3, [r4, #266]	; 0x10a
 8001796:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
    rtcBufferSet[4] = rtcBuffer[3];
 800179a:	f894 310b 	ldrb.w	r3, [r4, #267]	; 0x10b
 800179e:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
    rtcBufferSet[5] = rtcBuffer[4];
 80017a2:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 80017a6:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
    rtcBufferSet[6] = rtcBuffer[5];
 80017aa:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 80017ae:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
    rtcBufferSet[7] = rtcBuffer[6];
 80017b2:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
 80017b6:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
    rtcBufferSet[8] = rtcBuffer[7];
 80017ba:	f894 310f 	ldrb.w	r3, [r4, #271]	; 0x10f
 80017be:	f884 3123 	strb.w	r3, [r4, #291]	; 0x123
    rtcBufferSet[9] = rtcBuffer[8];
 80017c2:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 80017c6:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
    rtcBufferSet[10] = rtcBuffer[9];
 80017ca:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
 80017ce:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
    rtcBufferSet[11] = rtcBuffer[10];
 80017d2:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
 80017d6:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
    rtcBufferSet[12] = rtcBuffer[11];
 80017da:	f894 3113 	ldrb.w	r3, [r4, #275]	; 0x113
 80017de:	f884 3127 	strb.w	r3, [r4, #295]	; 0x127
    rtcBufferSet[13] = rtcBuffer[12];
 80017e2:	f894 3114 	ldrb.w	r3, [r4, #276]	; 0x114
 80017e6:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    rtcBufferSet[14] = rtcBuffer[13];
 80017ea:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
 80017ee:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
    rtcBufferSet[15] = rtcBuffer[14];
 80017f2:	f894 3116 	ldrb.w	r3, [r4, #278]	; 0x116
 80017f6:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
    rtcBufferSet[16] = rtcBuffer[15];
 80017fa:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
 80017fe:	f884 312b 	strb.w	r3, [r4, #299]	; 0x12b
}
 8001802:	b002      	add	sp, #8
 8001804:	bd10      	pop	{r4, pc}
 8001806:	bf00      	nop
 8001808:	20000208 	.word	0x20000208

0800180c <HAL_DMA_Start_IT.isra.0>:
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
 800180c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800180e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001812:	2c01      	cmp	r4, #1
 8001814:	d027      	beq.n	8001866 <HAL_DMA_Start_IT.isra.0+0x5a>
 8001816:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001818:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 800181c:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001820:	42a5      	cmp	r5, r4
 8001822:	f04f 0400 	mov.w	r4, #0
 8001826:	d127      	bne.n	8001878 <HAL_DMA_Start_IT.isra.0+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001828:	2602      	movs	r6, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800182a:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800182c:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800182e:	f880 6021 	strb.w	r6, [r0, #33]	; 0x21
    __HAL_DMA_DISABLE(hdma);
 8001832:	6826      	ldr	r6, [r4, #0]
 8001834:	f026 0601 	bic.w	r6, r6, #1
 8001838:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800183a:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 800183e:	40bd      	lsls	r5, r7
 8001840:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001842:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001844:	6843      	ldr	r3, [r0, #4]
 8001846:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001848:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800184a:	bf0b      	itete	eq
 800184c:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800184e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001850:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001852:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001854:	b143      	cbz	r3, 8001868 <HAL_DMA_Start_IT.isra.0+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001856:	6823      	ldr	r3, [r4, #0]
 8001858:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800185c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800185e:	6823      	ldr	r3, [r4, #0]
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6023      	str	r3, [r4, #0]
}
 8001866:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001868:	6823      	ldr	r3, [r4, #0]
 800186a:	f023 0304 	bic.w	r3, r3, #4
 800186e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001870:	6823      	ldr	r3, [r4, #0]
 8001872:	f043 030a 	orr.w	r3, r3, #10
 8001876:	e7f1      	b.n	800185c <HAL_DMA_Start_IT.isra.0+0x50>
    __HAL_UNLOCK(hdma); 
 8001878:	f880 4020 	strb.w	r4, [r0, #32]
 800187c:	e7f3      	b.n	8001866 <HAL_DMA_Start_IT.isra.0+0x5a>

0800187e <UART_Start_Receive_DMA.constprop.0.isra.0>:
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 800187e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->pRxBuffPtr = pData;
 8001880:	4c16      	ldr	r4, [pc, #88]	; (80018dc <UART_Start_Receive_DMA.constprop.0.isra.0+0x5e>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001882:	2500      	movs	r5, #0
  huart->RxXferSize = Size;
 8001884:	8621      	strh	r1, [r4, #48]	; 0x30
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 8001886:	460b      	mov	r3, r1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001888:	2122      	movs	r1, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800188a:	6465      	str	r5, [r4, #68]	; 0x44
  huart->pRxBuffPtr = pData;
 800188c:	62e0      	str	r0, [r4, #44]	; 0x2c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800188e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 8001892:	4602      	mov	r2, r0
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001894:	4912      	ldr	r1, [pc, #72]	; (80018e0 <UART_Start_Receive_DMA.constprop.0.isra.0+0x62>)
 8001896:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001898:	6281      	str	r1, [r0, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800189a:	4912      	ldr	r1, [pc, #72]	; (80018e4 <UART_Start_Receive_DMA.constprop.0.isra.0+0x66>)
 800189c:	62c1      	str	r1, [r0, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800189e:	4912      	ldr	r1, [pc, #72]	; (80018e8 <UART_Start_Receive_DMA.constprop.0.isra.0+0x6a>)
  huart->hdmarx->XferAbortCallback = NULL;
 80018a0:	e9c0 150c 	strd	r1, r5, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80018a4:	6861      	ldr	r1, [r4, #4]
 80018a6:	3104      	adds	r1, #4
 80018a8:	f7ff ffb0 	bl	800180c <HAL_DMA_Start_IT.isra.0>
  __HAL_UART_CLEAR_OREFLAG(huart);
 80018ac:	6863      	ldr	r3, [r4, #4]
 80018ae:	9501      	str	r5, [sp, #4]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	9201      	str	r2, [sp, #4]
 80018b4:	685a      	ldr	r2, [r3, #4]
  __HAL_UNLOCK(huart);
 80018b6:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  __HAL_UART_CLEAR_OREFLAG(huart);
 80018ba:	9201      	str	r2, [sp, #4]
 80018bc:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018c4:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018c6:	695a      	ldr	r2, [r3, #20]
 80018c8:	f042 0201 	orr.w	r2, r2, #1
 80018cc:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80018ce:	695a      	ldr	r2, [r3, #20]
 80018d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018d4:	615a      	str	r2, [r3, #20]
}
 80018d6:	b003      	add	sp, #12
 80018d8:	bd30      	pop	{r4, r5, pc}
 80018da:	bf00      	nop
 80018dc:	20000208 	.word	0x20000208
 80018e0:	080019cd 	.word	0x080019cd
 80018e4:	08000639 	.word	0x08000639
 80018e8:	0800066b 	.word	0x0800066b

080018ec <HAL_UART_RxCpltCallback.part.0>:
uint8_t rx_index = 0;
uint8_t rx_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart->Instance == USART1) {
		rx_buffer[rx_index++] = rx_data;
 80018ec:	480d      	ldr	r0, [pc, #52]	; (8001924 <HAL_UART_RxCpltCallback.part.0+0x38>)
 80018ee:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	f880 212c 	strb.w	r2, [r0, #300]	; 0x12c
 80018f8:	f890 213d 	ldrb.w	r2, [r0, #317]	; 0x13d
 80018fc:	4403      	add	r3, r0
 80018fe:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
  if (huart->RxState == HAL_UART_STATE_READY)
 8001902:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8001906:	2b20      	cmp	r3, #32
 8001908:	d10b      	bne.n	8001922 <HAL_UART_RxCpltCallback.part.0+0x36>
    __HAL_LOCK(huart);
 800190a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800190e:	2b01      	cmp	r3, #1
 8001910:	d007      	beq.n	8001922 <HAL_UART_RxCpltCallback.part.0+0x36>
 8001912:	2101      	movs	r1, #1
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001914:	2300      	movs	r3, #0
    __HAL_LOCK(huart);
 8001916:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800191a:	6343      	str	r3, [r0, #52]	; 0x34
    return(UART_Start_Receive_DMA(huart, pData, Size));
 800191c:	f200 103d 	addw	r0, r0, #317	; 0x13d
 8001920:	e7ad      	b.n	800187e <UART_Start_Receive_DMA.constprop.0.isra.0>
		HAL_UART_Receive_DMA(&huart1, &rx_data, 1);
	}
}
 8001922:	4770      	bx	lr
 8001924:	20000208 	.word	0x20000208

08001928 <UART_Receive_IT.part.0.constprop.0.isra.0>:
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001928:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <UART_Receive_IT.part.0.constprop.0.isra.0+0x9c>)
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800192a:	b417      	push	{r0, r1, r2, r4}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800192c:	68d8      	ldr	r0, [r3, #12]
    {
      pdata8bits  = NULL;
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800192e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001930:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001934:	6859      	ldr	r1, [r3, #4]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001936:	d131      	bne.n	800199c <UART_Receive_IT.part.0.constprop.0.isra.0+0x74>
 8001938:	6958      	ldr	r0, [r3, #20]
 800193a:	2800      	cmp	r0, #0
 800193c:	d131      	bne.n	80019a2 <UART_Receive_IT.part.0.constprop.0.isra.0+0x7a>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800193e:	6849      	ldr	r1, [r1, #4]
 8001940:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001944:	f822 1b02 	strh.w	r1, [r2], #2
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
      }
      huart->pRxBuffPtr += 1U;
    }

    if (--huart->RxXferCount == 0U)
 8001948:	8e59      	ldrh	r1, [r3, #50]	; 0x32
      huart->pRxBuffPtr += 1U;
 800194a:	62da      	str	r2, [r3, #44]	; 0x2c
    if (--huart->RxXferCount == 0U)
 800194c:	3901      	subs	r1, #1
 800194e:	b289      	uxth	r1, r1
 8001950:	8659      	strh	r1, [r3, #50]	; 0x32
 8001952:	bb01      	cbnz	r1, 8001996 <UART_Receive_IT.part.0.constprop.0.isra.0+0x6e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	68d0      	ldr	r0, [r2, #12]
 8001958:	f020 0020 	bic.w	r0, r0, #32
 800195c:	60d0      	str	r0, [r2, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800195e:	68d0      	ldr	r0, [r2, #12]
 8001960:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8001964:	60d0      	str	r0, [r2, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001966:	6950      	ldr	r0, [r2, #20]
 8001968:	f020 0001 	bic.w	r0, r0, #1
 800196c:	6150      	str	r0, [r2, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800196e:	2020      	movs	r0, #32
 8001970:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001974:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001976:	2801      	cmp	r0, #1
 8001978:	d11d      	bne.n	80019b6 <UART_Receive_IT.part.0.constprop.0.isra.0+0x8e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800197a:	6359      	str	r1, [r3, #52]	; 0x34

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800197c:	68d3      	ldr	r3, [r2, #12]
 800197e:	f023 0310 	bic.w	r3, r3, #16
 8001982:	60d3      	str	r3, [r2, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001984:	6813      	ldr	r3, [r2, #0]
 8001986:	06db      	lsls	r3, r3, #27
 8001988:	d505      	bpl.n	8001996 <UART_Receive_IT.part.0.constprop.0.isra.0+0x6e>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800198a:	9101      	str	r1, [sp, #4]
 800198c:	6813      	ldr	r3, [r2, #0]
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	6853      	ldr	r3, [r2, #4]
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	9b01      	ldr	r3, [sp, #4]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001996:	b003      	add	sp, #12
 8001998:	bc10      	pop	{r4}
 800199a:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800199c:	695c      	ldr	r4, [r3, #20]
 800199e:	4320      	orrs	r0, r4
 80019a0:	d105      	bne.n	80019ae <UART_Receive_IT.part.0.constprop.0.isra.0+0x86>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80019a2:	6849      	ldr	r1, [r1, #4]
 80019a4:	b2c9      	uxtb	r1, r1
 80019a6:	7011      	strb	r1, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80019a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019aa:	3201      	adds	r2, #1
 80019ac:	e7cc      	b.n	8001948 <UART_Receive_IT.part.0.constprop.0.isra.0+0x20>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80019ae:	6849      	ldr	r1, [r1, #4]
 80019b0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80019b4:	e7f7      	b.n	80019a6 <UART_Receive_IT.part.0.constprop.0.isra.0+0x7e>
	if (huart->Instance == USART1) {
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <UART_Receive_IT.part.0.constprop.0.isra.0+0xa0>)
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d1ec      	bne.n	8001996 <UART_Receive_IT.part.0.constprop.0.isra.0+0x6e>
}
 80019bc:	b003      	add	sp, #12
 80019be:	bc10      	pop	{r4}
 80019c0:	e794      	b.n	80018ec <HAL_UART_RxCpltCallback.part.0>
 80019c2:	bf00      	nop
 80019c4:	20000208 	.word	0x20000208
 80019c8:	40013800 	.word	0x40013800

080019cc <UART_DMAReceiveCplt>:
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019cc:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019ce:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f013 0320 	ands.w	r3, r3, #32
 80019d6:	d117      	bne.n	8001a08 <UART_DMAReceiveCplt+0x3c>
    huart->RxXferCount = 0U;
 80019d8:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80019da:	6813      	ldr	r3, [r2, #0]
 80019dc:	68d9      	ldr	r1, [r3, #12]
 80019de:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80019e2:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019e4:	6959      	ldr	r1, [r3, #20]
 80019e6:	f021 0101 	bic.w	r1, r1, #1
 80019ea:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80019ec:	6959      	ldr	r1, [r3, #20]
 80019ee:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80019f2:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80019f4:	2120      	movs	r1, #32
 80019f6:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80019fa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80019fc:	2901      	cmp	r1, #1
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80019fe:	bf02      	ittt	eq
 8001a00:	68d9      	ldreq	r1, [r3, #12]
 8001a02:	f021 0110 	biceq.w	r1, r1, #16
 8001a06:	60d9      	streq	r1, [r3, #12]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a08:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d004      	beq.n	8001a18 <UART_DMAReceiveCplt+0x4c>
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	4b02      	ldr	r3, [pc, #8]	; (8001a1c <UART_DMAReceiveCplt+0x50>)
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d100      	bne.n	8001a18 <UART_DMAReceiveCplt+0x4c>
 8001a16:	e769      	b.n	80018ec <HAL_UART_RxCpltCallback.part.0>
}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40013800 	.word	0x40013800

08001a20 <HAL_InitTick.isra.0>:
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 8001a24:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a26:	4c0f      	ldr	r4, [pc, #60]	; (8001a64 <HAL_InitTick.isra.0+0x44>)
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 8001a28:	4601      	mov	r1, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a2a:	6823      	ldr	r3, [r4, #0]
 8001a2c:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a30:	3b01      	subs	r3, #1
 8001a32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a36:	d213      	bcs.n	8001a60 <HAL_InitTick.isra.0+0x40>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a38:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	20f0      	movs	r0, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3e:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_InitTick.isra.0+0x48>)
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a42:	290f      	cmp	r1, #15
 8001a44:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4e:	f04f 0307 	mov.w	r3, #7
 8001a52:	6113      	str	r3, [r2, #16]
 8001a54:	d804      	bhi.n	8001a60 <HAL_InitTick.isra.0+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a56:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5a:	f7fe fe87 	bl	800076c <HAL_NVIC_SetPriority.constprop.0>
    uwTickPrio = TickPriority;
 8001a5e:	6061      	str	r1, [r4, #4]
}
 8001a60:	bd10      	pop	{r4, pc}
 8001a62:	bf00      	nop
 8001a64:	20000000 	.word	0x20000000
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <LCD_Font.constprop.0>:
			set_pixels = 0;
		}
	}
}

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8001a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	int16_t cursor_x = x;
	int16_t cursor_y = y;
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001a70:	f04f 0a00 	mov.w	sl, #0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8001a74:	b08f      	sub	sp, #60	; 0x3c
 8001a76:	4693      	mov	fp, r2
	int16_t cursor_x = x;
 8001a78:	b202      	sxth	r2, r0
 8001a7a:	9203      	str	r2, [sp, #12]
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001a7c:	681a      	ldr	r2, [r3, #0]
	int16_t cursor_x = x;
 8001a7e:	9f03      	ldr	r7, [sp, #12]
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001a80:	9207      	str	r2, [sp, #28]
 8001a82:	685a      	ldr	r2, [r3, #4]
	int16_t cursor_y = y;
 8001a84:	b20c      	sxth	r4, r1
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001a86:	9205      	str	r2, [sp, #20]
 8001a88:	7a1a      	ldrb	r2, [r3, #8]
 8001a8a:	9206      	str	r2, [sp, #24]
 8001a8c:	7a5a      	ldrb	r2, [r3, #9]
 8001a8e:	7a9b      	ldrb	r3, [r3, #10]
 8001a90:	9209      	str	r2, [sp, #36]	; 0x24
 8001a92:	9308      	str	r3, [sp, #32]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001a94:	4658      	mov	r0, fp
 8001a96:	f000 fa65 	bl	8001f64 <strlen>
 8001a9a:	fa1f f58a 	uxth.w	r5, sl
 8001a9e:	42a8      	cmp	r0, r5
 8001aa0:	d802      	bhi.n	8001aa8 <LCD_Font.constprop.0+0x3c>
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
			cursor_x += glyph.xAdvance * size;
		}
	}
}
 8001aa2:	b00f      	add	sp, #60	; 0x3c
 8001aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		char c = text[text_pos];
 8001aa8:	f81b 3005 	ldrb.w	r3, [fp, r5]
		if(c == '\n')
 8001aac:	2b0a      	cmp	r3, #10
 8001aae:	d106      	bne.n	8001abe <LCD_Font.constprop.0+0x52>
			cursor_y += font.yAdvance * size;
 8001ab0:	9b08      	ldr	r3, [sp, #32]
			cursor_x = x;
 8001ab2:	9f03      	ldr	r7, [sp, #12]
			cursor_y += font.yAdvance * size;
 8001ab4:	441c      	add	r4, r3
 8001ab6:	b224      	sxth	r4, r4
 8001ab8:	f10a 0a01 	add.w	sl, sl, #1
 8001abc:	e7ea      	b.n	8001a94 <LCD_Font.constprop.0+0x28>
		else if(c >= font.first && c <= font.last && c != '\r')
 8001abe:	9a06      	ldr	r2, [sp, #24]
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d3f9      	bcc.n	8001ab8 <LCD_Font.constprop.0+0x4c>
 8001ac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d8f6      	bhi.n	8001ab8 <LCD_Font.constprop.0+0x4c>
 8001aca:	2b0d      	cmp	r3, #13
 8001acc:	d0f4      	beq.n	8001ab8 <LCD_Font.constprop.0+0x4c>
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001ace:	2500      	movs	r5, #0
	uint8_t bits = 0, bit = 0;
 8001ad0:	462e      	mov	r6, r5
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8001ad2:	9a06      	ldr	r2, [sp, #24]
 8001ad4:	9805      	ldr	r0, [sp, #20]
 8001ad6:	1a9b      	subs	r3, r3, r2
 8001ad8:	9a05      	ldr	r2, [sp, #20]
 8001ada:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 8001ade:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8001ae2:	6849      	ldr	r1, [r1, #4]
 8001ae4:	aa0c      	add	r2, sp, #48	; 0x30
 8001ae6:	c203      	stmia	r2!, {r0, r1}
	uint16_t bo = glyph -> bitmapOffset;
 8001ae8:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
	uint8_t bits = 0, bit = 0;
 8001aec:	9504      	str	r5, [sp, #16]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001aee:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8001af2:	b2ea      	uxtb	r2, r5
 8001af4:	4293      	cmp	r3, r2
 8001af6:	920b      	str	r2, [sp, #44]	; 0x2c
 8001af8:	d848      	bhi.n	8001b8c <LCD_Font.constprop.0+0x120>
			cursor_x += glyph.xAdvance * size;
 8001afa:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8001afe:	441f      	add	r7, r3
 8001b00:	b23f      	sxth	r7, r7
 8001b02:	e7d9      	b.n	8001ab8 <LCD_Font.constprop.0+0x4c>
			if(bit == 0)
 8001b04:	b946      	cbnz	r6, 8001b18 <LCD_Font.constprop.0+0xac>
				bit  = 0x80;
 8001b06:	2680      	movs	r6, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8001b08:	9907      	ldr	r1, [sp, #28]
 8001b0a:	f109 0301 	add.w	r3, r9, #1
 8001b0e:	f811 1009 	ldrb.w	r1, [r1, r9]
 8001b12:	fa1f f983 	uxth.w	r9, r3
 8001b16:	9104      	str	r1, [sp, #16]
			if(bits & bit)
 8001b18:	9b04      	ldr	r3, [sp, #16]
 8001b1a:	4033      	ands	r3, r6
 8001b1c:	930a      	str	r3, [sp, #40]	; 0x28
 8001b1e:	d01e      	beq.n	8001b5e <LCD_Font.constprop.0+0xf2>
				set_pixels++;
 8001b20:	3201      	adds	r2, #1
 8001b22:	b292      	uxth	r2, r2
			bit >>= 1;
 8001b24:	0876      	lsrs	r6, r6, #1
 8001b26:	f108 0801 	add.w	r8, r8, #1
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001b2a:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8001b2e:	fa5f f388 	uxtb.w	r3, r8
 8001b32:	4299      	cmp	r1, r3
 8001b34:	d8e6      	bhi.n	8001b04 <LCD_Font.constprop.0+0x98>
		if (set_pixels > 0)
 8001b36:	b182      	cbz	r2, 8001b5a <LCD_Font.constprop.0+0xee>
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001b38:	f99d 1036 	ldrsb.w	r1, [sp, #54]	; 0x36
 8001b3c:	b2e8      	uxtb	r0, r5
 8001b3e:	4401      	add	r1, r0
 8001b40:	f99d 0035 	ldrsb.w	r0, [sp, #53]	; 0x35
 8001b44:	4421      	add	r1, r4
 8001b46:	4418      	add	r0, r3
 8001b48:	1a80      	subs	r0, r0, r2
 8001b4a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001b4c:	4438      	add	r0, r7
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	b289      	uxth	r1, r1
 8001b52:	2301      	movs	r3, #1
 8001b54:	b280      	uxth	r0, r0
 8001b56:	f7fe fb8f 	bl	8000278 <LCD_Rect_Fill>
 8001b5a:	3501      	adds	r5, #1
 8001b5c:	e7c7      	b.n	8001aee <LCD_Font.constprop.0+0x82>
			else if (set_pixels > 0)
 8001b5e:	2a00      	cmp	r2, #0
 8001b60:	d0e0      	beq.n	8001b24 <LCD_Font.constprop.0+0xb8>
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001b64:	f99d 1036 	ldrsb.w	r1, [sp, #54]	; 0x36
 8001b68:	f99d 0035 	ldrsb.w	r0, [sp, #53]	; 0x35
 8001b6c:	4419      	add	r1, r3
 8001b6e:	fa5f f388 	uxtb.w	r3, r8
 8001b72:	4418      	add	r0, r3
 8001b74:	1a80      	subs	r0, r0, r2
 8001b76:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001b78:	4421      	add	r1, r4
 8001b7a:	4438      	add	r0, r7
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	b289      	uxth	r1, r1
 8001b80:	2301      	movs	r3, #1
 8001b82:	b280      	uxth	r0, r0
 8001b84:	f7fe fb78 	bl	8000278 <LCD_Rect_Fill>
				set_pixels = 0;
 8001b88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001b8a:	e7cb      	b.n	8001b24 <LCD_Font.constprop.0+0xb8>
 8001b8c:	f04f 0800 	mov.w	r8, #0
 8001b90:	4642      	mov	r2, r8
 8001b92:	e7ca      	b.n	8001b2a <LCD_Font.constprop.0+0xbe>

08001b94 <round_nth.constprop.0>:
float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
 8001b94:	b508      	push	{r3, lr}
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8001b96:	f000 fb51 	bl	800223c <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8001b9a:	a309      	add	r3, pc, #36	; (adr r3, 8001bc0 <round_nth.constprop.0+0x2c>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	f000 fcce 	bl	8002540 <__aeabi_ddiv>
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <round_nth.constprop.0+0x34>)
 8001ba8:	f000 f9ea 	bl	8001f80 <__adddf3>
 8001bac:	f007 fef4 	bl	8009998 <floor>
 8001bb0:	a303      	add	r3, pc, #12	; (adr r3, 8001bc0 <round_nth.constprop.0+0x2c>)
 8001bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb6:	f000 fb99 	bl	80022ec <__aeabi_dmul>
 8001bba:	f000 fe8f 	bl	80028dc <__aeabi_d2f>
}                                                                                        // round_nth(1.235, -2) = 1.24
 8001bbe:	bd08      	pop	{r3, pc}
 8001bc0:	9999999a 	.word	0x9999999a
 8001bc4:	3fb99999 	.word	0x3fb99999
 8001bc8:	3fe00000 	.word	0x3fe00000

08001bcc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <NMI_Handler>

08001bce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bce:	e7fe      	b.n	8001bce <HardFault_Handler>

08001bd0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <MemManage_Handler>

08001bd2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <BusFault_Handler>

08001bd4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <UsageFault_Handler>

08001bd6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd6:	4770      	bx	lr

08001bd8 <DebugMon_Handler>:
 8001bd8:	4770      	bx	lr

08001bda <PendSV_Handler>:
 8001bda:	4770      	bx	lr

08001bdc <SysTick_Handler>:
  uwTick += uwTickFreq;
 8001bdc:	4a02      	ldr	r2, [pc, #8]	; (8001be8 <SysTick_Handler+0xc>)
 8001bde:	6813      	ldr	r3, [r2, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20000208 	.word	0x20000208

08001bec <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001bec:	4801      	ldr	r0, [pc, #4]	; (8001bf4 <DMA1_Channel2_IRQHandler+0x8>)
 8001bee:	f7fe bba5 	b.w	800033c <HAL_DMA_IRQHandler>
 8001bf2:	bf00      	nop
 8001bf4:	200003d0 	.word	0x200003d0

08001bf8 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001bf8:	4801      	ldr	r0, [pc, #4]	; (8001c00 <DMA1_Channel4_IRQHandler+0x8>)
 8001bfa:	f7fe bb9f 	b.w	800033c <HAL_DMA_IRQHandler>
 8001bfe:	bf00      	nop
 8001c00:	20000348 	.word	0x20000348

08001c04 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c04:	4801      	ldr	r0, [pc, #4]	; (8001c0c <DMA1_Channel5_IRQHandler+0x8>)
 8001c06:	f7fe bb99 	b.w	800033c <HAL_DMA_IRQHandler>
 8001c0a:	bf00      	nop
 8001c0c:	2000038c 	.word	0x2000038c

08001c10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c12:	4c97      	ldr	r4, [pc, #604]	; (8001e70 <USART1_IRQHandler+0x260>)
 8001c14:	6863      	ldr	r3, [r4, #4]
 8001c16:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c18:	68d9      	ldr	r1, [r3, #12]
  if (errorflags == RESET)
 8001c1a:	0716      	lsls	r6, r2, #28
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c1c:	6958      	ldr	r0, [r3, #20]
  if (errorflags == RESET)
 8001c1e:	d10e      	bne.n	8001c3e <USART1_IRQHandler+0x2e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c20:	0695      	lsls	r5, r2, #26
 8001c22:	f140 8099 	bpl.w	8001d58 <USART1_IRQHandler+0x148>
 8001c26:	0688      	lsls	r0, r1, #26
 8001c28:	f140 8096 	bpl.w	8001d58 <USART1_IRQHandler+0x148>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c2c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8001c30:	2b22      	cmp	r3, #34	; 0x22
 8001c32:	f040 808f 	bne.w	8001d54 <USART1_IRQHandler+0x144>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c36:	b003      	add	sp, #12
 8001c38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001c3c:	e674      	b.n	8001928 <UART_Receive_IT.part.0.constprop.0.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c3e:	f000 0001 	and.w	r0, r0, #1
 8001c42:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8001c46:	4305      	orrs	r5, r0
 8001c48:	f000 8086 	beq.w	8001d58 <USART1_IRQHandler+0x148>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c4c:	07d3      	lsls	r3, r2, #31
 8001c4e:	d505      	bpl.n	8001c5c <USART1_IRQHandler+0x4c>
 8001c50:	05cf      	lsls	r7, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c52:	bf42      	ittt	mi
 8001c54:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 8001c56:	f043 0301 	orrmi.w	r3, r3, #1
 8001c5a:	6463      	strmi	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c5c:	0756      	lsls	r6, r2, #29
 8001c5e:	d504      	bpl.n	8001c6a <USART1_IRQHandler+0x5a>
 8001c60:	b118      	cbz	r0, 8001c6a <USART1_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c62:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c64:	f043 0302 	orr.w	r3, r3, #2
 8001c68:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c6a:	0795      	lsls	r5, r2, #30
 8001c6c:	d504      	bpl.n	8001c78 <USART1_IRQHandler+0x68>
 8001c6e:	b118      	cbz	r0, 8001c78 <USART1_IRQHandler+0x68>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001c78:	0713      	lsls	r3, r2, #28
 8001c7a:	d507      	bpl.n	8001c8c <USART1_IRQHandler+0x7c>
 8001c7c:	f001 0320 	and.w	r3, r1, #32
 8001c80:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c82:	bf1e      	ittt	ne
 8001c84:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8001c86:	f043 0308 	orrne.w	r3, r3, #8
 8001c8a:	6463      	strne	r3, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d060      	beq.n	8001d54 <USART1_IRQHandler+0x144>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c92:	0697      	lsls	r7, r2, #26
 8001c94:	d507      	bpl.n	8001ca6 <USART1_IRQHandler+0x96>
 8001c96:	068e      	lsls	r6, r1, #26
 8001c98:	d505      	bpl.n	8001ca6 <USART1_IRQHandler+0x96>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c9a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8001c9e:	2b22      	cmp	r3, #34	; 0x22
 8001ca0:	d101      	bne.n	8001ca6 <USART1_IRQHandler+0x96>
 8001ca2:	f7ff fe41 	bl	8001928 <UART_Receive_IT.part.0.constprop.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ca6:	6863      	ldr	r3, [r4, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001caa:	6c62      	ldr	r2, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001cb0:	f002 0208 	and.w	r2, r2, #8
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	d04c      	beq.n	8001d52 <USART1_IRQHandler+0x142>
        UART_EndRxTransfer(huart);
 8001cb8:	486e      	ldr	r0, [pc, #440]	; (8001e74 <USART1_IRQHandler+0x264>)
 8001cba:	f7fe fcc0 	bl	800063e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cbe:	6863      	ldr	r3, [r4, #4]
 8001cc0:	695a      	ldr	r2, [r3, #20]
 8001cc2:	0655      	lsls	r5, r2, #25
 8001cc4:	d546      	bpl.n	8001d54 <USART1_IRQHandler+0x144>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cc6:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001cc8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cce:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001cd0:	2800      	cmp	r0, #0
 8001cd2:	d03f      	beq.n	8001d54 <USART1_IRQHandler+0x144>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001cd4:	4b68      	ldr	r3, [pc, #416]	; (8001e78 <USART1_IRQHandler+0x268>)
 8001cd6:	6343      	str	r3, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cd8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d006      	beq.n	8001cee <USART1_IRQHandler+0xde>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	6383      	str	r3, [r0, #56]	; 0x38
 8001ce4:	b003      	add	sp, #12
 8001ce6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferAbortCallback(hdma);
 8001cea:	f7fe bb18 	b.w	800031e <UART_DMAAbortOnError>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cee:	6803      	ldr	r3, [r0, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	f022 020e 	bic.w	r2, r2, #14
 8001cf6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d00:	4a5e      	ldr	r2, [pc, #376]	; (8001e7c <USART1_IRQHandler+0x26c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d018      	beq.n	8001d38 <USART1_IRQHandler+0x128>
 8001d06:	3214      	adds	r2, #20
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d017      	beq.n	8001d3c <USART1_IRQHandler+0x12c>
 8001d0c:	3214      	adds	r2, #20
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d016      	beq.n	8001d40 <USART1_IRQHandler+0x130>
 8001d12:	3214      	adds	r2, #20
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d016      	beq.n	8001d46 <USART1_IRQHandler+0x136>
 8001d18:	3214      	adds	r2, #20
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d016      	beq.n	8001d4c <USART1_IRQHandler+0x13c>
 8001d1e:	3214      	adds	r2, #20
 8001d20:	4293      	cmp	r3, r2
 8001d22:	bf0c      	ite	eq
 8001d24:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001d28:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001d2c:	4a54      	ldr	r2, [pc, #336]	; (8001e80 <USART1_IRQHandler+0x270>)
 8001d2e:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001d30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d34:	8403      	strh	r3, [r0, #32]
 8001d36:	e7d5      	b.n	8001ce4 <USART1_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e7f7      	b.n	8001d2c <USART1_IRQHandler+0x11c>
 8001d3c:	2310      	movs	r3, #16
 8001d3e:	e7f5      	b.n	8001d2c <USART1_IRQHandler+0x11c>
 8001d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d44:	e7f2      	b.n	8001d2c <USART1_IRQHandler+0x11c>
 8001d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4a:	e7ef      	b.n	8001d2c <USART1_IRQHandler+0x11c>
 8001d4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d50:	e7ec      	b.n	8001d2c <USART1_IRQHandler+0x11c>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d52:	6463      	str	r3, [r4, #68]	; 0x44
 8001d54:	b003      	add	sp, #12
 8001d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d58:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001d5a:	2d01      	cmp	r5, #1
 8001d5c:	d163      	bne.n	8001e26 <USART1_IRQHandler+0x216>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001d5e:	06d0      	lsls	r0, r2, #27
 8001d60:	d561      	bpl.n	8001e26 <USART1_IRQHandler+0x216>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001d62:	06cf      	lsls	r7, r1, #27
 8001d64:	d55f      	bpl.n	8001e26 <USART1_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001d66:	2600      	movs	r6, #0
 8001d68:	9601      	str	r6, [sp, #4]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	9201      	str	r2, [sp, #4]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	9201      	str	r2, [sp, #4]
 8001d72:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d74:	6958      	ldr	r0, [r3, #20]
 8001d76:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8001d7a:	d03a      	beq.n	8001df2 <USART1_IRQHandler+0x1e2>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001d7c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d7e:	6811      	ldr	r1, [r2, #0]
 8001d80:	6848      	ldr	r0, [r1, #4]
 8001d82:	b280      	uxth	r0, r0
      if (  (nb_remaining_rx_data > 0U)
 8001d84:	2800      	cmp	r0, #0
 8001d86:	d0e5      	beq.n	8001d54 <USART1_IRQHandler+0x144>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001d88:	8e27      	ldrh	r7, [r4, #48]	; 0x30
 8001d8a:	4287      	cmp	r7, r0
 8001d8c:	d9e2      	bls.n	8001d54 <USART1_IRQHandler+0x144>
        huart->RxXferCount = nb_remaining_rx_data;
 8001d8e:	8660      	strh	r0, [r4, #50]	; 0x32
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001d90:	6990      	ldr	r0, [r2, #24]
 8001d92:	2820      	cmp	r0, #32
 8001d94:	d01b      	beq.n	8001dce <USART1_IRQHandler+0x1be>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d96:	68d8      	ldr	r0, [r3, #12]
 8001d98:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8001d9c:	60d8      	str	r0, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d9e:	6958      	ldr	r0, [r3, #20]
 8001da0:	f020 0001 	bic.w	r0, r0, #1
 8001da4:	6158      	str	r0, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001da6:	6958      	ldr	r0, [r3, #20]
 8001da8:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8001dac:	6158      	str	r0, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8001dae:	2020      	movs	r0, #32
 8001db0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001db4:	6366      	str	r6, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001db6:	68d8      	ldr	r0, [r3, #12]
 8001db8:	f020 0010 	bic.w	r0, r0, #16
 8001dbc:	60d8      	str	r0, [r3, #12]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dbe:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d005      	beq.n	8001dd2 <USART1_IRQHandler+0x1c2>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc6:	2304      	movs	r3, #4
    __HAL_UNLOCK(hdma);
 8001dc8:	f882 6020 	strb.w	r6, [r2, #32]
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dcc:	6393      	str	r3, [r2, #56]	; 0x38
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001dce:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001dd0:	e7c0      	b.n	8001d54 <USART1_IRQHandler+0x144>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd2:	680b      	ldr	r3, [r1, #0]
 8001dd4:	f023 030e 	bic.w	r3, r3, #14
 8001dd8:	600b      	str	r3, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8001dda:	680b      	ldr	r3, [r1, #0]
 8001ddc:	f023 0301 	bic.w	r3, r3, #1
 8001de0:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001de2:	e9d2 310f 	ldrd	r3, r1, [r2, #60]	; 0x3c
 8001de6:	408d      	lsls	r5, r1
 8001de8:	605d      	str	r5, [r3, #4]
  __HAL_UNLOCK(hdma);      
 8001dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dee:	8413      	strh	r3, [r2, #32]
 8001df0:	e7ed      	b.n	8001dce <USART1_IRQHandler+0x1be>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001df2:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      if (  (huart->RxXferCount > 0U)
 8001df4:	8e61      	ldrh	r1, [r4, #50]	; 0x32
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001df6:	b292      	uxth	r2, r2
      if (  (huart->RxXferCount > 0U)
 8001df8:	b289      	uxth	r1, r1
 8001dfa:	2900      	cmp	r1, #0
 8001dfc:	d0aa      	beq.n	8001d54 <USART1_IRQHandler+0x144>
          &&(nb_rx_data > 0U) )
 8001dfe:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8001e00:	4291      	cmp	r1, r2
 8001e02:	d0a7      	beq.n	8001d54 <USART1_IRQHandler+0x144>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e0a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	615a      	str	r2, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8001e14:	2220      	movs	r2, #32
 8001e16:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e1a:	6360      	str	r0, [r4, #52]	; 0x34
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	f022 0210 	bic.w	r2, r2, #16
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001e22:	60da      	str	r2, [r3, #12]
 8001e24:	e796      	b.n	8001d54 <USART1_IRQHandler+0x144>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e26:	0616      	lsls	r6, r2, #24
 8001e28:	d531      	bpl.n	8001e8e <USART1_IRQHandler+0x27e>
 8001e2a:	060d      	lsls	r5, r1, #24
 8001e2c:	d52f      	bpl.n	8001e8e <USART1_IRQHandler+0x27e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001e2e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8001e32:	2a21      	cmp	r2, #33	; 0x21
 8001e34:	d18e      	bne.n	8001d54 <USART1_IRQHandler+0x144>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e36:	68e1      	ldr	r1, [r4, #12]
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001e38:	6a62      	ldr	r2, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e3a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001e3e:	d121      	bne.n	8001e84 <USART1_IRQHandler+0x274>
 8001e40:	6961      	ldr	r1, [r4, #20]
 8001e42:	b9f9      	cbnz	r1, 8001e84 <USART1_IRQHandler+0x274>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001e44:	f832 1b02 	ldrh.w	r1, [r2], #2
 8001e48:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001e4c:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001e4e:	6262      	str	r2, [r4, #36]	; 0x24
    if (--huart->TxXferCount == 0U)
 8001e50:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001e52:	3a01      	subs	r2, #1
 8001e54:	b292      	uxth	r2, r2
 8001e56:	8562      	strh	r2, [r4, #42]	; 0x2a
 8001e58:	2a00      	cmp	r2, #0
 8001e5a:	f47f af7b 	bne.w	8001d54 <USART1_IRQHandler+0x144>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e64:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e6c:	e7d9      	b.n	8001e22 <USART1_IRQHandler+0x212>
 8001e6e:	bf00      	nop
 8001e70:	20000208 	.word	0x20000208
 8001e74:	2000020c 	.word	0x2000020c
 8001e78:	0800031f 	.word	0x0800031f
 8001e7c:	40020008 	.word	0x40020008
 8001e80:	40020000 	.word	0x40020000
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001e84:	1c51      	adds	r1, r2, #1
 8001e86:	6261      	str	r1, [r4, #36]	; 0x24
 8001e88:	7812      	ldrb	r2, [r2, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	e7e0      	b.n	8001e50 <USART1_IRQHandler+0x240>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e8e:	0650      	lsls	r0, r2, #25
 8001e90:	f57f af60 	bpl.w	8001d54 <USART1_IRQHandler+0x144>
 8001e94:	064a      	lsls	r2, r1, #25
 8001e96:	f57f af5d 	bpl.w	8001d54 <USART1_IRQHandler+0x144>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ea0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001ea2:	2320      	movs	r3, #32
 8001ea4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8001ea8:	e754      	b.n	8001d54 <USART1_IRQHandler+0x144>

08001eaa <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001eaa:	2001      	movs	r0, #1
 8001eac:	4770      	bx	lr

08001eae <_kill>:

int _kill(int pid, int sig)
{
 8001eae:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001eb0:	f003 f8f4 	bl	800509c <__errno>
 8001eb4:	2316      	movs	r3, #22
 8001eb6:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebc:	bd08      	pop	{r3, pc}

08001ebe <_exit>:

void _exit (int status)
{
 8001ebe:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001ec0:	f003 f8ec 	bl	800509c <__errno>
 8001ec4:	2316      	movs	r3, #22
 8001ec6:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001ec8:	e7fe      	b.n	8001ec8 <_exit+0xa>

08001eca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eca:	b570      	push	{r4, r5, r6, lr}
 8001ecc:	460d      	mov	r5, r1
 8001ece:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed0:	460e      	mov	r6, r1
 8001ed2:	1b73      	subs	r3, r6, r5
 8001ed4:	429c      	cmp	r4, r3
 8001ed6:	dc01      	bgt.n	8001edc <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001ed8:	4620      	mov	r0, r4
 8001eda:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001edc:	f3af 8000 	nop.w
 8001ee0:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee4:	e7f5      	b.n	8001ed2 <_read+0x8>

08001ee6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ee6:	b570      	push	{r4, r5, r6, lr}
 8001ee8:	460d      	mov	r5, r1
 8001eea:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eec:	460e      	mov	r6, r1
 8001eee:	1b73      	subs	r3, r6, r5
 8001ef0:	429c      	cmp	r4, r3
 8001ef2:	dc01      	bgt.n	8001ef8 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001ef8:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001efc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f00:	e7f5      	b.n	8001eee <_write+0x8>

08001f02 <_close>:

int _close(int file)
{
	return -1;
}
 8001f02:	f04f 30ff 	mov.w	r0, #4294967295
 8001f06:	4770      	bx	lr

08001f08 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001f0c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001f0e:	604b      	str	r3, [r1, #4]
}
 8001f10:	4770      	bx	lr

08001f12 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001f12:	2001      	movs	r0, #1
 8001f14:	4770      	bx	lr

08001f16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001f16:	2000      	movs	r0, #0
 8001f18:	4770      	bx	lr

08001f1a <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f1a:	4a0d      	ldr	r2, [pc, #52]	; (8001f50 <_sbrk+0x36>)
{
 8001f1c:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001f1e:	f8d2 1610 	ldr.w	r1, [r2, #1552]	; 0x610
{
 8001f22:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001f24:	b911      	cbnz	r1, 8001f2c <_sbrk+0x12>
  {
    __sbrk_heap_end = &_end;
 8001f26:	490b      	ldr	r1, [pc, #44]	; (8001f54 <_sbrk+0x3a>)
 8001f28:	f8c2 1610 	str.w	r1, [r2, #1552]	; 0x610
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2c:	f8d2 0610 	ldr.w	r0, [r2, #1552]	; 0x610
 8001f30:	4909      	ldr	r1, [pc, #36]	; (8001f58 <_sbrk+0x3e>)
 8001f32:	4c0a      	ldr	r4, [pc, #40]	; (8001f5c <_sbrk+0x42>)
 8001f34:	4403      	add	r3, r0
 8001f36:	1b09      	subs	r1, r1, r4
 8001f38:	428b      	cmp	r3, r1
 8001f3a:	d906      	bls.n	8001f4a <_sbrk+0x30>
  {
    errno = ENOMEM;
 8001f3c:	f003 f8ae 	bl	800509c <__errno>
 8001f40:	230c      	movs	r3, #12
 8001f42:	6003      	str	r3, [r0, #0]
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001f48:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001f4a:	f8c2 3610 	str.w	r3, [r2, #1552]	; 0x610
  return (void *)prev_heap_end;
 8001f4e:	e7fb      	b.n	8001f48 <_sbrk+0x2e>
 8001f50:	20000208 	.word	0x20000208
 8001f54:	20000830 	.word	0x20000830
 8001f58:	20005000 	.word	0x20005000
 8001f5c:	00000400 	.word	0x00000400

08001f60 <SystemInit>:
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop

08001f64 <strlen>:
 8001f64:	4603      	mov	r3, r0
 8001f66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f6a:	2a00      	cmp	r2, #0
 8001f6c:	d1fb      	bne.n	8001f66 <strlen+0x2>
 8001f6e:	1a18      	subs	r0, r3, r0
 8001f70:	3801      	subs	r0, #1
 8001f72:	4770      	bx	lr

08001f74 <__aeabi_drsub>:
 8001f74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8001f78:	e002      	b.n	8001f80 <__adddf3>
 8001f7a:	bf00      	nop

08001f7c <__aeabi_dsub>:
 8001f7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08001f80 <__adddf3>:
 8001f80:	b530      	push	{r4, r5, lr}
 8001f82:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8001f86:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8001f8a:	ea94 0f05 	teq	r4, r5
 8001f8e:	bf08      	it	eq
 8001f90:	ea90 0f02 	teqeq	r0, r2
 8001f94:	bf1f      	itttt	ne
 8001f96:	ea54 0c00 	orrsne.w	ip, r4, r0
 8001f9a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8001f9e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8001fa2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8001fa6:	f000 80e2 	beq.w	800216e <__adddf3+0x1ee>
 8001faa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8001fae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8001fb2:	bfb8      	it	lt
 8001fb4:	426d      	neglt	r5, r5
 8001fb6:	dd0c      	ble.n	8001fd2 <__adddf3+0x52>
 8001fb8:	442c      	add	r4, r5
 8001fba:	ea80 0202 	eor.w	r2, r0, r2
 8001fbe:	ea81 0303 	eor.w	r3, r1, r3
 8001fc2:	ea82 0000 	eor.w	r0, r2, r0
 8001fc6:	ea83 0101 	eor.w	r1, r3, r1
 8001fca:	ea80 0202 	eor.w	r2, r0, r2
 8001fce:	ea81 0303 	eor.w	r3, r1, r3
 8001fd2:	2d36      	cmp	r5, #54	; 0x36
 8001fd4:	bf88      	it	hi
 8001fd6:	bd30      	pophi	{r4, r5, pc}
 8001fd8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8001fdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8001fe0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8001fe4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8001fe8:	d002      	beq.n	8001ff0 <__adddf3+0x70>
 8001fea:	4240      	negs	r0, r0
 8001fec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001ff0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8001ff4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8001ff8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8001ffc:	d002      	beq.n	8002004 <__adddf3+0x84>
 8001ffe:	4252      	negs	r2, r2
 8002000:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002004:	ea94 0f05 	teq	r4, r5
 8002008:	f000 80a7 	beq.w	800215a <__adddf3+0x1da>
 800200c:	f1a4 0401 	sub.w	r4, r4, #1
 8002010:	f1d5 0e20 	rsbs	lr, r5, #32
 8002014:	db0d      	blt.n	8002032 <__adddf3+0xb2>
 8002016:	fa02 fc0e 	lsl.w	ip, r2, lr
 800201a:	fa22 f205 	lsr.w	r2, r2, r5
 800201e:	1880      	adds	r0, r0, r2
 8002020:	f141 0100 	adc.w	r1, r1, #0
 8002024:	fa03 f20e 	lsl.w	r2, r3, lr
 8002028:	1880      	adds	r0, r0, r2
 800202a:	fa43 f305 	asr.w	r3, r3, r5
 800202e:	4159      	adcs	r1, r3
 8002030:	e00e      	b.n	8002050 <__adddf3+0xd0>
 8002032:	f1a5 0520 	sub.w	r5, r5, #32
 8002036:	f10e 0e20 	add.w	lr, lr, #32
 800203a:	2a01      	cmp	r2, #1
 800203c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8002040:	bf28      	it	cs
 8002042:	f04c 0c02 	orrcs.w	ip, ip, #2
 8002046:	fa43 f305 	asr.w	r3, r3, r5
 800204a:	18c0      	adds	r0, r0, r3
 800204c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8002050:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002054:	d507      	bpl.n	8002066 <__adddf3+0xe6>
 8002056:	f04f 0e00 	mov.w	lr, #0
 800205a:	f1dc 0c00 	rsbs	ip, ip, #0
 800205e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8002062:	eb6e 0101 	sbc.w	r1, lr, r1
 8002066:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800206a:	d31b      	bcc.n	80020a4 <__adddf3+0x124>
 800206c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002070:	d30c      	bcc.n	800208c <__adddf3+0x10c>
 8002072:	0849      	lsrs	r1, r1, #1
 8002074:	ea5f 0030 	movs.w	r0, r0, rrx
 8002078:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800207c:	f104 0401 	add.w	r4, r4, #1
 8002080:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8002084:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8002088:	f080 809a 	bcs.w	80021c0 <__adddf3+0x240>
 800208c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8002090:	bf08      	it	eq
 8002092:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002096:	f150 0000 	adcs.w	r0, r0, #0
 800209a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800209e:	ea41 0105 	orr.w	r1, r1, r5
 80020a2:	bd30      	pop	{r4, r5, pc}
 80020a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80020a8:	4140      	adcs	r0, r0
 80020aa:	eb41 0101 	adc.w	r1, r1, r1
 80020ae:	3c01      	subs	r4, #1
 80020b0:	bf28      	it	cs
 80020b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80020b6:	d2e9      	bcs.n	800208c <__adddf3+0x10c>
 80020b8:	f091 0f00 	teq	r1, #0
 80020bc:	bf04      	itt	eq
 80020be:	4601      	moveq	r1, r0
 80020c0:	2000      	moveq	r0, #0
 80020c2:	fab1 f381 	clz	r3, r1
 80020c6:	bf08      	it	eq
 80020c8:	3320      	addeq	r3, #32
 80020ca:	f1a3 030b 	sub.w	r3, r3, #11
 80020ce:	f1b3 0220 	subs.w	r2, r3, #32
 80020d2:	da0c      	bge.n	80020ee <__adddf3+0x16e>
 80020d4:	320c      	adds	r2, #12
 80020d6:	dd08      	ble.n	80020ea <__adddf3+0x16a>
 80020d8:	f102 0c14 	add.w	ip, r2, #20
 80020dc:	f1c2 020c 	rsb	r2, r2, #12
 80020e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80020e4:	fa21 f102 	lsr.w	r1, r1, r2
 80020e8:	e00c      	b.n	8002104 <__adddf3+0x184>
 80020ea:	f102 0214 	add.w	r2, r2, #20
 80020ee:	bfd8      	it	le
 80020f0:	f1c2 0c20 	rsble	ip, r2, #32
 80020f4:	fa01 f102 	lsl.w	r1, r1, r2
 80020f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80020fc:	bfdc      	itt	le
 80020fe:	ea41 010c 	orrle.w	r1, r1, ip
 8002102:	4090      	lslle	r0, r2
 8002104:	1ae4      	subs	r4, r4, r3
 8002106:	bfa2      	ittt	ge
 8002108:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800210c:	4329      	orrge	r1, r5
 800210e:	bd30      	popge	{r4, r5, pc}
 8002110:	ea6f 0404 	mvn.w	r4, r4
 8002114:	3c1f      	subs	r4, #31
 8002116:	da1c      	bge.n	8002152 <__adddf3+0x1d2>
 8002118:	340c      	adds	r4, #12
 800211a:	dc0e      	bgt.n	800213a <__adddf3+0x1ba>
 800211c:	f104 0414 	add.w	r4, r4, #20
 8002120:	f1c4 0220 	rsb	r2, r4, #32
 8002124:	fa20 f004 	lsr.w	r0, r0, r4
 8002128:	fa01 f302 	lsl.w	r3, r1, r2
 800212c:	ea40 0003 	orr.w	r0, r0, r3
 8002130:	fa21 f304 	lsr.w	r3, r1, r4
 8002134:	ea45 0103 	orr.w	r1, r5, r3
 8002138:	bd30      	pop	{r4, r5, pc}
 800213a:	f1c4 040c 	rsb	r4, r4, #12
 800213e:	f1c4 0220 	rsb	r2, r4, #32
 8002142:	fa20 f002 	lsr.w	r0, r0, r2
 8002146:	fa01 f304 	lsl.w	r3, r1, r4
 800214a:	ea40 0003 	orr.w	r0, r0, r3
 800214e:	4629      	mov	r1, r5
 8002150:	bd30      	pop	{r4, r5, pc}
 8002152:	fa21 f004 	lsr.w	r0, r1, r4
 8002156:	4629      	mov	r1, r5
 8002158:	bd30      	pop	{r4, r5, pc}
 800215a:	f094 0f00 	teq	r4, #0
 800215e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8002162:	bf06      	itte	eq
 8002164:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8002168:	3401      	addeq	r4, #1
 800216a:	3d01      	subne	r5, #1
 800216c:	e74e      	b.n	800200c <__adddf3+0x8c>
 800216e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002172:	bf18      	it	ne
 8002174:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002178:	d029      	beq.n	80021ce <__adddf3+0x24e>
 800217a:	ea94 0f05 	teq	r4, r5
 800217e:	bf08      	it	eq
 8002180:	ea90 0f02 	teqeq	r0, r2
 8002184:	d005      	beq.n	8002192 <__adddf3+0x212>
 8002186:	ea54 0c00 	orrs.w	ip, r4, r0
 800218a:	bf04      	itt	eq
 800218c:	4619      	moveq	r1, r3
 800218e:	4610      	moveq	r0, r2
 8002190:	bd30      	pop	{r4, r5, pc}
 8002192:	ea91 0f03 	teq	r1, r3
 8002196:	bf1e      	ittt	ne
 8002198:	2100      	movne	r1, #0
 800219a:	2000      	movne	r0, #0
 800219c:	bd30      	popne	{r4, r5, pc}
 800219e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80021a2:	d105      	bne.n	80021b0 <__adddf3+0x230>
 80021a4:	0040      	lsls	r0, r0, #1
 80021a6:	4149      	adcs	r1, r1
 80021a8:	bf28      	it	cs
 80021aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80021ae:	bd30      	pop	{r4, r5, pc}
 80021b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80021b4:	bf3c      	itt	cc
 80021b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80021ba:	bd30      	popcc	{r4, r5, pc}
 80021bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80021c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80021c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80021c8:	f04f 0000 	mov.w	r0, #0
 80021cc:	bd30      	pop	{r4, r5, pc}
 80021ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80021d2:	bf1a      	itte	ne
 80021d4:	4619      	movne	r1, r3
 80021d6:	4610      	movne	r0, r2
 80021d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80021dc:	bf1c      	itt	ne
 80021de:	460b      	movne	r3, r1
 80021e0:	4602      	movne	r2, r0
 80021e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80021e6:	bf06      	itte	eq
 80021e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80021ec:	ea91 0f03 	teqeq	r1, r3
 80021f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80021f4:	bd30      	pop	{r4, r5, pc}
 80021f6:	bf00      	nop

080021f8 <__aeabi_ui2d>:
 80021f8:	f090 0f00 	teq	r0, #0
 80021fc:	bf04      	itt	eq
 80021fe:	2100      	moveq	r1, #0
 8002200:	4770      	bxeq	lr
 8002202:	b530      	push	{r4, r5, lr}
 8002204:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002208:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800220c:	f04f 0500 	mov.w	r5, #0
 8002210:	f04f 0100 	mov.w	r1, #0
 8002214:	e750      	b.n	80020b8 <__adddf3+0x138>
 8002216:	bf00      	nop

08002218 <__aeabi_i2d>:
 8002218:	f090 0f00 	teq	r0, #0
 800221c:	bf04      	itt	eq
 800221e:	2100      	moveq	r1, #0
 8002220:	4770      	bxeq	lr
 8002222:	b530      	push	{r4, r5, lr}
 8002224:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002228:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800222c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8002230:	bf48      	it	mi
 8002232:	4240      	negmi	r0, r0
 8002234:	f04f 0100 	mov.w	r1, #0
 8002238:	e73e      	b.n	80020b8 <__adddf3+0x138>
 800223a:	bf00      	nop

0800223c <__aeabi_f2d>:
 800223c:	0042      	lsls	r2, r0, #1
 800223e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8002242:	ea4f 0131 	mov.w	r1, r1, rrx
 8002246:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800224a:	bf1f      	itttt	ne
 800224c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002250:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002254:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8002258:	4770      	bxne	lr
 800225a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800225e:	bf08      	it	eq
 8002260:	4770      	bxeq	lr
 8002262:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8002266:	bf04      	itt	eq
 8002268:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800226c:	4770      	bxeq	lr
 800226e:	b530      	push	{r4, r5, lr}
 8002270:	f44f 7460 	mov.w	r4, #896	; 0x380
 8002274:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800227c:	e71c      	b.n	80020b8 <__adddf3+0x138>
 800227e:	bf00      	nop

08002280 <__aeabi_ul2d>:
 8002280:	ea50 0201 	orrs.w	r2, r0, r1
 8002284:	bf08      	it	eq
 8002286:	4770      	bxeq	lr
 8002288:	b530      	push	{r4, r5, lr}
 800228a:	f04f 0500 	mov.w	r5, #0
 800228e:	e00a      	b.n	80022a6 <__aeabi_l2d+0x16>

08002290 <__aeabi_l2d>:
 8002290:	ea50 0201 	orrs.w	r2, r0, r1
 8002294:	bf08      	it	eq
 8002296:	4770      	bxeq	lr
 8002298:	b530      	push	{r4, r5, lr}
 800229a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800229e:	d502      	bpl.n	80022a6 <__aeabi_l2d+0x16>
 80022a0:	4240      	negs	r0, r0
 80022a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80022a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80022aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80022ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80022b2:	f43f aed8 	beq.w	8002066 <__adddf3+0xe6>
 80022b6:	f04f 0203 	mov.w	r2, #3
 80022ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80022be:	bf18      	it	ne
 80022c0:	3203      	addne	r2, #3
 80022c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80022c6:	bf18      	it	ne
 80022c8:	3203      	addne	r2, #3
 80022ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80022ce:	f1c2 0320 	rsb	r3, r2, #32
 80022d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80022d6:	fa20 f002 	lsr.w	r0, r0, r2
 80022da:	fa01 fe03 	lsl.w	lr, r1, r3
 80022de:	ea40 000e 	orr.w	r0, r0, lr
 80022e2:	fa21 f102 	lsr.w	r1, r1, r2
 80022e6:	4414      	add	r4, r2
 80022e8:	e6bd      	b.n	8002066 <__adddf3+0xe6>
 80022ea:	bf00      	nop

080022ec <__aeabi_dmul>:
 80022ec:	b570      	push	{r4, r5, r6, lr}
 80022ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80022f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80022f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80022fa:	bf1d      	ittte	ne
 80022fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002300:	ea94 0f0c 	teqne	r4, ip
 8002304:	ea95 0f0c 	teqne	r5, ip
 8002308:	f000 f8de 	bleq	80024c8 <__aeabi_dmul+0x1dc>
 800230c:	442c      	add	r4, r5
 800230e:	ea81 0603 	eor.w	r6, r1, r3
 8002312:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8002316:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800231a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800231e:	bf18      	it	ne
 8002320:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002324:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800232c:	d038      	beq.n	80023a0 <__aeabi_dmul+0xb4>
 800232e:	fba0 ce02 	umull	ip, lr, r0, r2
 8002332:	f04f 0500 	mov.w	r5, #0
 8002336:	fbe1 e502 	umlal	lr, r5, r1, r2
 800233a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800233e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8002342:	f04f 0600 	mov.w	r6, #0
 8002346:	fbe1 5603 	umlal	r5, r6, r1, r3
 800234a:	f09c 0f00 	teq	ip, #0
 800234e:	bf18      	it	ne
 8002350:	f04e 0e01 	orrne.w	lr, lr, #1
 8002354:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8002358:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800235c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8002360:	d204      	bcs.n	800236c <__aeabi_dmul+0x80>
 8002362:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8002366:	416d      	adcs	r5, r5
 8002368:	eb46 0606 	adc.w	r6, r6, r6
 800236c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8002370:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002374:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8002378:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800237c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8002380:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002384:	bf88      	it	hi
 8002386:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800238a:	d81e      	bhi.n	80023ca <__aeabi_dmul+0xde>
 800238c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8002390:	bf08      	it	eq
 8002392:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8002396:	f150 0000 	adcs.w	r0, r0, #0
 800239a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800239e:	bd70      	pop	{r4, r5, r6, pc}
 80023a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80023a4:	ea46 0101 	orr.w	r1, r6, r1
 80023a8:	ea40 0002 	orr.w	r0, r0, r2
 80023ac:	ea81 0103 	eor.w	r1, r1, r3
 80023b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80023b4:	bfc2      	ittt	gt
 80023b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80023ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80023be:	bd70      	popgt	{r4, r5, r6, pc}
 80023c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80023c4:	f04f 0e00 	mov.w	lr, #0
 80023c8:	3c01      	subs	r4, #1
 80023ca:	f300 80ab 	bgt.w	8002524 <__aeabi_dmul+0x238>
 80023ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80023d2:	bfde      	ittt	le
 80023d4:	2000      	movle	r0, #0
 80023d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80023da:	bd70      	pople	{r4, r5, r6, pc}
 80023dc:	f1c4 0400 	rsb	r4, r4, #0
 80023e0:	3c20      	subs	r4, #32
 80023e2:	da35      	bge.n	8002450 <__aeabi_dmul+0x164>
 80023e4:	340c      	adds	r4, #12
 80023e6:	dc1b      	bgt.n	8002420 <__aeabi_dmul+0x134>
 80023e8:	f104 0414 	add.w	r4, r4, #20
 80023ec:	f1c4 0520 	rsb	r5, r4, #32
 80023f0:	fa00 f305 	lsl.w	r3, r0, r5
 80023f4:	fa20 f004 	lsr.w	r0, r0, r4
 80023f8:	fa01 f205 	lsl.w	r2, r1, r5
 80023fc:	ea40 0002 	orr.w	r0, r0, r2
 8002400:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8002404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002408:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800240c:	fa21 f604 	lsr.w	r6, r1, r4
 8002410:	eb42 0106 	adc.w	r1, r2, r6
 8002414:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002418:	bf08      	it	eq
 800241a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800241e:	bd70      	pop	{r4, r5, r6, pc}
 8002420:	f1c4 040c 	rsb	r4, r4, #12
 8002424:	f1c4 0520 	rsb	r5, r4, #32
 8002428:	fa00 f304 	lsl.w	r3, r0, r4
 800242c:	fa20 f005 	lsr.w	r0, r0, r5
 8002430:	fa01 f204 	lsl.w	r2, r1, r4
 8002434:	ea40 0002 	orr.w	r0, r0, r2
 8002438:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800243c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002440:	f141 0100 	adc.w	r1, r1, #0
 8002444:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002448:	bf08      	it	eq
 800244a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800244e:	bd70      	pop	{r4, r5, r6, pc}
 8002450:	f1c4 0520 	rsb	r5, r4, #32
 8002454:	fa00 f205 	lsl.w	r2, r0, r5
 8002458:	ea4e 0e02 	orr.w	lr, lr, r2
 800245c:	fa20 f304 	lsr.w	r3, r0, r4
 8002460:	fa01 f205 	lsl.w	r2, r1, r5
 8002464:	ea43 0302 	orr.w	r3, r3, r2
 8002468:	fa21 f004 	lsr.w	r0, r1, r4
 800246c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002470:	fa21 f204 	lsr.w	r2, r1, r4
 8002474:	ea20 0002 	bic.w	r0, r0, r2
 8002478:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800247c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002480:	bf08      	it	eq
 8002482:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002486:	bd70      	pop	{r4, r5, r6, pc}
 8002488:	f094 0f00 	teq	r4, #0
 800248c:	d10f      	bne.n	80024ae <__aeabi_dmul+0x1c2>
 800248e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8002492:	0040      	lsls	r0, r0, #1
 8002494:	eb41 0101 	adc.w	r1, r1, r1
 8002498:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800249c:	bf08      	it	eq
 800249e:	3c01      	subeq	r4, #1
 80024a0:	d0f7      	beq.n	8002492 <__aeabi_dmul+0x1a6>
 80024a2:	ea41 0106 	orr.w	r1, r1, r6
 80024a6:	f095 0f00 	teq	r5, #0
 80024aa:	bf18      	it	ne
 80024ac:	4770      	bxne	lr
 80024ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80024b2:	0052      	lsls	r2, r2, #1
 80024b4:	eb43 0303 	adc.w	r3, r3, r3
 80024b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80024bc:	bf08      	it	eq
 80024be:	3d01      	subeq	r5, #1
 80024c0:	d0f7      	beq.n	80024b2 <__aeabi_dmul+0x1c6>
 80024c2:	ea43 0306 	orr.w	r3, r3, r6
 80024c6:	4770      	bx	lr
 80024c8:	ea94 0f0c 	teq	r4, ip
 80024cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80024d0:	bf18      	it	ne
 80024d2:	ea95 0f0c 	teqne	r5, ip
 80024d6:	d00c      	beq.n	80024f2 <__aeabi_dmul+0x206>
 80024d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80024dc:	bf18      	it	ne
 80024de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80024e2:	d1d1      	bne.n	8002488 <__aeabi_dmul+0x19c>
 80024e4:	ea81 0103 	eor.w	r1, r1, r3
 80024e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80024ec:	f04f 0000 	mov.w	r0, #0
 80024f0:	bd70      	pop	{r4, r5, r6, pc}
 80024f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80024f6:	bf06      	itte	eq
 80024f8:	4610      	moveq	r0, r2
 80024fa:	4619      	moveq	r1, r3
 80024fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002500:	d019      	beq.n	8002536 <__aeabi_dmul+0x24a>
 8002502:	ea94 0f0c 	teq	r4, ip
 8002506:	d102      	bne.n	800250e <__aeabi_dmul+0x222>
 8002508:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800250c:	d113      	bne.n	8002536 <__aeabi_dmul+0x24a>
 800250e:	ea95 0f0c 	teq	r5, ip
 8002512:	d105      	bne.n	8002520 <__aeabi_dmul+0x234>
 8002514:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8002518:	bf1c      	itt	ne
 800251a:	4610      	movne	r0, r2
 800251c:	4619      	movne	r1, r3
 800251e:	d10a      	bne.n	8002536 <__aeabi_dmul+0x24a>
 8002520:	ea81 0103 	eor.w	r1, r1, r3
 8002524:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002528:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800252c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002530:	f04f 0000 	mov.w	r0, #0
 8002534:	bd70      	pop	{r4, r5, r6, pc}
 8002536:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800253a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800253e:	bd70      	pop	{r4, r5, r6, pc}

08002540 <__aeabi_ddiv>:
 8002540:	b570      	push	{r4, r5, r6, lr}
 8002542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800254a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800254e:	bf1d      	ittte	ne
 8002550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002554:	ea94 0f0c 	teqne	r4, ip
 8002558:	ea95 0f0c 	teqne	r5, ip
 800255c:	f000 f8a7 	bleq	80026ae <__aeabi_ddiv+0x16e>
 8002560:	eba4 0405 	sub.w	r4, r4, r5
 8002564:	ea81 0e03 	eor.w	lr, r1, r3
 8002568:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800256c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002570:	f000 8088 	beq.w	8002684 <__aeabi_ddiv+0x144>
 8002574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002578:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800257c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8002580:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8002584:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002588:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800258c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8002590:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8002594:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8002598:	429d      	cmp	r5, r3
 800259a:	bf08      	it	eq
 800259c:	4296      	cmpeq	r6, r2
 800259e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80025a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80025a6:	d202      	bcs.n	80025ae <__aeabi_ddiv+0x6e>
 80025a8:	085b      	lsrs	r3, r3, #1
 80025aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80025ae:	1ab6      	subs	r6, r6, r2
 80025b0:	eb65 0503 	sbc.w	r5, r5, r3
 80025b4:	085b      	lsrs	r3, r3, #1
 80025b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80025ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80025be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80025c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80025c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80025ca:	bf22      	ittt	cs
 80025cc:	1ab6      	subcs	r6, r6, r2
 80025ce:	4675      	movcs	r5, lr
 80025d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80025d4:	085b      	lsrs	r3, r3, #1
 80025d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80025da:	ebb6 0e02 	subs.w	lr, r6, r2
 80025de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80025e2:	bf22      	ittt	cs
 80025e4:	1ab6      	subcs	r6, r6, r2
 80025e6:	4675      	movcs	r5, lr
 80025e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80025ec:	085b      	lsrs	r3, r3, #1
 80025ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80025f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80025f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80025fa:	bf22      	ittt	cs
 80025fc:	1ab6      	subcs	r6, r6, r2
 80025fe:	4675      	movcs	r5, lr
 8002600:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002604:	085b      	lsrs	r3, r3, #1
 8002606:	ea4f 0232 	mov.w	r2, r2, rrx
 800260a:	ebb6 0e02 	subs.w	lr, r6, r2
 800260e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002612:	bf22      	ittt	cs
 8002614:	1ab6      	subcs	r6, r6, r2
 8002616:	4675      	movcs	r5, lr
 8002618:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800261c:	ea55 0e06 	orrs.w	lr, r5, r6
 8002620:	d018      	beq.n	8002654 <__aeabi_ddiv+0x114>
 8002622:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8002626:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800262a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800262e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002632:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8002636:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800263a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800263e:	d1c0      	bne.n	80025c2 <__aeabi_ddiv+0x82>
 8002640:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002644:	d10b      	bne.n	800265e <__aeabi_ddiv+0x11e>
 8002646:	ea41 0100 	orr.w	r1, r1, r0
 800264a:	f04f 0000 	mov.w	r0, #0
 800264e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8002652:	e7b6      	b.n	80025c2 <__aeabi_ddiv+0x82>
 8002654:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002658:	bf04      	itt	eq
 800265a:	4301      	orreq	r1, r0
 800265c:	2000      	moveq	r0, #0
 800265e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002662:	bf88      	it	hi
 8002664:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002668:	f63f aeaf 	bhi.w	80023ca <__aeabi_dmul+0xde>
 800266c:	ebb5 0c03 	subs.w	ip, r5, r3
 8002670:	bf04      	itt	eq
 8002672:	ebb6 0c02 	subseq.w	ip, r6, r2
 8002676:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800267a:	f150 0000 	adcs.w	r0, r0, #0
 800267e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002682:	bd70      	pop	{r4, r5, r6, pc}
 8002684:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8002688:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800268c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8002690:	bfc2      	ittt	gt
 8002692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800269a:	bd70      	popgt	{r4, r5, r6, pc}
 800269c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80026a0:	f04f 0e00 	mov.w	lr, #0
 80026a4:	3c01      	subs	r4, #1
 80026a6:	e690      	b.n	80023ca <__aeabi_dmul+0xde>
 80026a8:	ea45 0e06 	orr.w	lr, r5, r6
 80026ac:	e68d      	b.n	80023ca <__aeabi_dmul+0xde>
 80026ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80026b2:	ea94 0f0c 	teq	r4, ip
 80026b6:	bf08      	it	eq
 80026b8:	ea95 0f0c 	teqeq	r5, ip
 80026bc:	f43f af3b 	beq.w	8002536 <__aeabi_dmul+0x24a>
 80026c0:	ea94 0f0c 	teq	r4, ip
 80026c4:	d10a      	bne.n	80026dc <__aeabi_ddiv+0x19c>
 80026c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80026ca:	f47f af34 	bne.w	8002536 <__aeabi_dmul+0x24a>
 80026ce:	ea95 0f0c 	teq	r5, ip
 80026d2:	f47f af25 	bne.w	8002520 <__aeabi_dmul+0x234>
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	e72c      	b.n	8002536 <__aeabi_dmul+0x24a>
 80026dc:	ea95 0f0c 	teq	r5, ip
 80026e0:	d106      	bne.n	80026f0 <__aeabi_ddiv+0x1b0>
 80026e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80026e6:	f43f aefd 	beq.w	80024e4 <__aeabi_dmul+0x1f8>
 80026ea:	4610      	mov	r0, r2
 80026ec:	4619      	mov	r1, r3
 80026ee:	e722      	b.n	8002536 <__aeabi_dmul+0x24a>
 80026f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80026f4:	bf18      	it	ne
 80026f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80026fa:	f47f aec5 	bne.w	8002488 <__aeabi_dmul+0x19c>
 80026fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8002702:	f47f af0d 	bne.w	8002520 <__aeabi_dmul+0x234>
 8002706:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800270a:	f47f aeeb 	bne.w	80024e4 <__aeabi_dmul+0x1f8>
 800270e:	e712      	b.n	8002536 <__aeabi_dmul+0x24a>

08002710 <__gedf2>:
 8002710:	f04f 3cff 	mov.w	ip, #4294967295
 8002714:	e006      	b.n	8002724 <__cmpdf2+0x4>
 8002716:	bf00      	nop

08002718 <__ledf2>:
 8002718:	f04f 0c01 	mov.w	ip, #1
 800271c:	e002      	b.n	8002724 <__cmpdf2+0x4>
 800271e:	bf00      	nop

08002720 <__cmpdf2>:
 8002720:	f04f 0c01 	mov.w	ip, #1
 8002724:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002728:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800272c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002730:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002734:	bf18      	it	ne
 8002736:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800273a:	d01b      	beq.n	8002774 <__cmpdf2+0x54>
 800273c:	b001      	add	sp, #4
 800273e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8002742:	bf0c      	ite	eq
 8002744:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8002748:	ea91 0f03 	teqne	r1, r3
 800274c:	bf02      	ittt	eq
 800274e:	ea90 0f02 	teqeq	r0, r2
 8002752:	2000      	moveq	r0, #0
 8002754:	4770      	bxeq	lr
 8002756:	f110 0f00 	cmn.w	r0, #0
 800275a:	ea91 0f03 	teq	r1, r3
 800275e:	bf58      	it	pl
 8002760:	4299      	cmppl	r1, r3
 8002762:	bf08      	it	eq
 8002764:	4290      	cmpeq	r0, r2
 8002766:	bf2c      	ite	cs
 8002768:	17d8      	asrcs	r0, r3, #31
 800276a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800276e:	f040 0001 	orr.w	r0, r0, #1
 8002772:	4770      	bx	lr
 8002774:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002778:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800277c:	d102      	bne.n	8002784 <__cmpdf2+0x64>
 800277e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002782:	d107      	bne.n	8002794 <__cmpdf2+0x74>
 8002784:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002788:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800278c:	d1d6      	bne.n	800273c <__cmpdf2+0x1c>
 800278e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002792:	d0d3      	beq.n	800273c <__cmpdf2+0x1c>
 8002794:	f85d 0b04 	ldr.w	r0, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop

0800279c <__aeabi_cdrcmple>:
 800279c:	4684      	mov	ip, r0
 800279e:	4610      	mov	r0, r2
 80027a0:	4662      	mov	r2, ip
 80027a2:	468c      	mov	ip, r1
 80027a4:	4619      	mov	r1, r3
 80027a6:	4663      	mov	r3, ip
 80027a8:	e000      	b.n	80027ac <__aeabi_cdcmpeq>
 80027aa:	bf00      	nop

080027ac <__aeabi_cdcmpeq>:
 80027ac:	b501      	push	{r0, lr}
 80027ae:	f7ff ffb7 	bl	8002720 <__cmpdf2>
 80027b2:	2800      	cmp	r0, #0
 80027b4:	bf48      	it	mi
 80027b6:	f110 0f00 	cmnmi.w	r0, #0
 80027ba:	bd01      	pop	{r0, pc}

080027bc <__aeabi_dcmpeq>:
 80027bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80027c0:	f7ff fff4 	bl	80027ac <__aeabi_cdcmpeq>
 80027c4:	bf0c      	ite	eq
 80027c6:	2001      	moveq	r0, #1
 80027c8:	2000      	movne	r0, #0
 80027ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80027ce:	bf00      	nop

080027d0 <__aeabi_dcmplt>:
 80027d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80027d4:	f7ff ffea 	bl	80027ac <__aeabi_cdcmpeq>
 80027d8:	bf34      	ite	cc
 80027da:	2001      	movcc	r0, #1
 80027dc:	2000      	movcs	r0, #0
 80027de:	f85d fb08 	ldr.w	pc, [sp], #8
 80027e2:	bf00      	nop

080027e4 <__aeabi_dcmple>:
 80027e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80027e8:	f7ff ffe0 	bl	80027ac <__aeabi_cdcmpeq>
 80027ec:	bf94      	ite	ls
 80027ee:	2001      	movls	r0, #1
 80027f0:	2000      	movhi	r0, #0
 80027f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80027f6:	bf00      	nop

080027f8 <__aeabi_dcmpge>:
 80027f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80027fc:	f7ff ffce 	bl	800279c <__aeabi_cdrcmple>
 8002800:	bf94      	ite	ls
 8002802:	2001      	movls	r0, #1
 8002804:	2000      	movhi	r0, #0
 8002806:	f85d fb08 	ldr.w	pc, [sp], #8
 800280a:	bf00      	nop

0800280c <__aeabi_dcmpgt>:
 800280c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002810:	f7ff ffc4 	bl	800279c <__aeabi_cdrcmple>
 8002814:	bf34      	ite	cc
 8002816:	2001      	movcc	r0, #1
 8002818:	2000      	movcs	r0, #0
 800281a:	f85d fb08 	ldr.w	pc, [sp], #8
 800281e:	bf00      	nop

08002820 <__aeabi_dcmpun>:
 8002820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002828:	d102      	bne.n	8002830 <__aeabi_dcmpun+0x10>
 800282a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800282e:	d10a      	bne.n	8002846 <__aeabi_dcmpun+0x26>
 8002830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002838:	d102      	bne.n	8002840 <__aeabi_dcmpun+0x20>
 800283a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800283e:	d102      	bne.n	8002846 <__aeabi_dcmpun+0x26>
 8002840:	f04f 0000 	mov.w	r0, #0
 8002844:	4770      	bx	lr
 8002846:	f04f 0001 	mov.w	r0, #1
 800284a:	4770      	bx	lr

0800284c <__aeabi_d2iz>:
 800284c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8002854:	d215      	bcs.n	8002882 <__aeabi_d2iz+0x36>
 8002856:	d511      	bpl.n	800287c <__aeabi_d2iz+0x30>
 8002858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800285c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8002860:	d912      	bls.n	8002888 <__aeabi_d2iz+0x3c>
 8002862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800286a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800286e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002872:	fa23 f002 	lsr.w	r0, r3, r2
 8002876:	bf18      	it	ne
 8002878:	4240      	negne	r0, r0
 800287a:	4770      	bx	lr
 800287c:	f04f 0000 	mov.w	r0, #0
 8002880:	4770      	bx	lr
 8002882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8002886:	d105      	bne.n	8002894 <__aeabi_d2iz+0x48>
 8002888:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800288c:	bf08      	it	eq
 800288e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8002892:	4770      	bx	lr
 8002894:	f04f 0000 	mov.w	r0, #0
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop

0800289c <__aeabi_d2uiz>:
 800289c:	004a      	lsls	r2, r1, #1
 800289e:	d211      	bcs.n	80028c4 <__aeabi_d2uiz+0x28>
 80028a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80028a4:	d211      	bcs.n	80028ca <__aeabi_d2uiz+0x2e>
 80028a6:	d50d      	bpl.n	80028c4 <__aeabi_d2uiz+0x28>
 80028a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80028ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80028b0:	d40e      	bmi.n	80028d0 <__aeabi_d2uiz+0x34>
 80028b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80028b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80028be:	fa23 f002 	lsr.w	r0, r3, r2
 80028c2:	4770      	bx	lr
 80028c4:	f04f 0000 	mov.w	r0, #0
 80028c8:	4770      	bx	lr
 80028ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80028ce:	d102      	bne.n	80028d6 <__aeabi_d2uiz+0x3a>
 80028d0:	f04f 30ff 	mov.w	r0, #4294967295
 80028d4:	4770      	bx	lr
 80028d6:	f04f 0000 	mov.w	r0, #0
 80028da:	4770      	bx	lr

080028dc <__aeabi_d2f>:
 80028dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80028e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80028e4:	bf24      	itt	cs
 80028e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80028ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80028ee:	d90d      	bls.n	800290c <__aeabi_d2f+0x30>
 80028f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80028f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80028f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80028fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002900:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8002904:	bf08      	it	eq
 8002906:	f020 0001 	biceq.w	r0, r0, #1
 800290a:	4770      	bx	lr
 800290c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8002910:	d121      	bne.n	8002956 <__aeabi_d2f+0x7a>
 8002912:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8002916:	bfbc      	itt	lt
 8002918:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800291c:	4770      	bxlt	lr
 800291e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002922:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8002926:	f1c2 0218 	rsb	r2, r2, #24
 800292a:	f1c2 0c20 	rsb	ip, r2, #32
 800292e:	fa10 f30c 	lsls.w	r3, r0, ip
 8002932:	fa20 f002 	lsr.w	r0, r0, r2
 8002936:	bf18      	it	ne
 8002938:	f040 0001 	orrne.w	r0, r0, #1
 800293c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002940:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8002944:	fa03 fc0c 	lsl.w	ip, r3, ip
 8002948:	ea40 000c 	orr.w	r0, r0, ip
 800294c:	fa23 f302 	lsr.w	r3, r3, r2
 8002950:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002954:	e7cc      	b.n	80028f0 <__aeabi_d2f+0x14>
 8002956:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800295a:	d107      	bne.n	800296c <__aeabi_d2f+0x90>
 800295c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8002960:	bf1e      	ittt	ne
 8002962:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8002966:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800296a:	4770      	bxne	lr
 800296c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8002970:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8002974:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop

0800297c <__gesf2>:
 800297c:	f04f 3cff 	mov.w	ip, #4294967295
 8002980:	e006      	b.n	8002990 <__cmpsf2+0x4>
 8002982:	bf00      	nop

08002984 <__lesf2>:
 8002984:	f04f 0c01 	mov.w	ip, #1
 8002988:	e002      	b.n	8002990 <__cmpsf2+0x4>
 800298a:	bf00      	nop

0800298c <__cmpsf2>:
 800298c:	f04f 0c01 	mov.w	ip, #1
 8002990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002994:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8002998:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800299c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80029a0:	bf18      	it	ne
 80029a2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80029a6:	d011      	beq.n	80029cc <__cmpsf2+0x40>
 80029a8:	b001      	add	sp, #4
 80029aa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80029ae:	bf18      	it	ne
 80029b0:	ea90 0f01 	teqne	r0, r1
 80029b4:	bf58      	it	pl
 80029b6:	ebb2 0003 	subspl.w	r0, r2, r3
 80029ba:	bf88      	it	hi
 80029bc:	17c8      	asrhi	r0, r1, #31
 80029be:	bf38      	it	cc
 80029c0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80029c4:	bf18      	it	ne
 80029c6:	f040 0001 	orrne.w	r0, r0, #1
 80029ca:	4770      	bx	lr
 80029cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80029d0:	d102      	bne.n	80029d8 <__cmpsf2+0x4c>
 80029d2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80029d6:	d105      	bne.n	80029e4 <__cmpsf2+0x58>
 80029d8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80029dc:	d1e4      	bne.n	80029a8 <__cmpsf2+0x1c>
 80029de:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80029e2:	d0e1      	beq.n	80029a8 <__cmpsf2+0x1c>
 80029e4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop

080029ec <__aeabi_cfrcmple>:
 80029ec:	4684      	mov	ip, r0
 80029ee:	4608      	mov	r0, r1
 80029f0:	4661      	mov	r1, ip
 80029f2:	e7ff      	b.n	80029f4 <__aeabi_cfcmpeq>

080029f4 <__aeabi_cfcmpeq>:
 80029f4:	b50f      	push	{r0, r1, r2, r3, lr}
 80029f6:	f7ff ffc9 	bl	800298c <__cmpsf2>
 80029fa:	2800      	cmp	r0, #0
 80029fc:	bf48      	it	mi
 80029fe:	f110 0f00 	cmnmi.w	r0, #0
 8002a02:	bd0f      	pop	{r0, r1, r2, r3, pc}

08002a04 <__aeabi_fcmpeq>:
 8002a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002a08:	f7ff fff4 	bl	80029f4 <__aeabi_cfcmpeq>
 8002a0c:	bf0c      	ite	eq
 8002a0e:	2001      	moveq	r0, #1
 8002a10:	2000      	movne	r0, #0
 8002a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8002a16:	bf00      	nop

08002a18 <__aeabi_fcmplt>:
 8002a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002a1c:	f7ff ffea 	bl	80029f4 <__aeabi_cfcmpeq>
 8002a20:	bf34      	ite	cc
 8002a22:	2001      	movcc	r0, #1
 8002a24:	2000      	movcs	r0, #0
 8002a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8002a2a:	bf00      	nop

08002a2c <__aeabi_fcmple>:
 8002a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002a30:	f7ff ffe0 	bl	80029f4 <__aeabi_cfcmpeq>
 8002a34:	bf94      	ite	ls
 8002a36:	2001      	movls	r0, #1
 8002a38:	2000      	movhi	r0, #0
 8002a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8002a3e:	bf00      	nop

08002a40 <__aeabi_fcmpge>:
 8002a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002a44:	f7ff ffd2 	bl	80029ec <__aeabi_cfrcmple>
 8002a48:	bf94      	ite	ls
 8002a4a:	2001      	movls	r0, #1
 8002a4c:	2000      	movhi	r0, #0
 8002a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8002a52:	bf00      	nop

08002a54 <__aeabi_fcmpgt>:
 8002a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002a58:	f7ff ffc8 	bl	80029ec <__aeabi_cfrcmple>
 8002a5c:	bf34      	ite	cc
 8002a5e:	2001      	movcc	r0, #1
 8002a60:	2000      	movcs	r0, #0
 8002a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8002a66:	bf00      	nop

08002a68 <__aeabi_d2lz>:
 8002a68:	b538      	push	{r3, r4, r5, lr}
 8002a6a:	4605      	mov	r5, r0
 8002a6c:	460c      	mov	r4, r1
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2300      	movs	r3, #0
 8002a72:	4628      	mov	r0, r5
 8002a74:	4621      	mov	r1, r4
 8002a76:	f7ff feab 	bl	80027d0 <__aeabi_dcmplt>
 8002a7a:	b928      	cbnz	r0, 8002a88 <__aeabi_d2lz+0x20>
 8002a7c:	4628      	mov	r0, r5
 8002a7e:	4621      	mov	r1, r4
 8002a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a84:	f000 b80a 	b.w	8002a9c <__aeabi_d2ulz>
 8002a88:	4628      	mov	r0, r5
 8002a8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8002a8e:	f000 f805 	bl	8002a9c <__aeabi_d2ulz>
 8002a92:	4240      	negs	r0, r0
 8002a94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002a98:	bd38      	pop	{r3, r4, r5, pc}
 8002a9a:	bf00      	nop

08002a9c <__aeabi_d2ulz>:
 8002a9c:	b5d0      	push	{r4, r6, r7, lr}
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <__aeabi_d2ulz+0x34>)
 8002aa2:	4606      	mov	r6, r0
 8002aa4:	460f      	mov	r7, r1
 8002aa6:	f7ff fc21 	bl	80022ec <__aeabi_dmul>
 8002aaa:	f7ff fef7 	bl	800289c <__aeabi_d2uiz>
 8002aae:	4604      	mov	r4, r0
 8002ab0:	f7ff fba2 	bl	80021f8 <__aeabi_ui2d>
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <__aeabi_d2ulz+0x38>)
 8002ab8:	f7ff fc18 	bl	80022ec <__aeabi_dmul>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4630      	mov	r0, r6
 8002ac2:	4639      	mov	r1, r7
 8002ac4:	f7ff fa5a 	bl	8001f7c <__aeabi_dsub>
 8002ac8:	f7ff fee8 	bl	800289c <__aeabi_d2uiz>
 8002acc:	4621      	mov	r1, r4
 8002ace:	bdd0      	pop	{r4, r6, r7, pc}
 8002ad0:	3df00000 	.word	0x3df00000
 8002ad4:	41f00000 	.word	0x41f00000

08002ad8 <__aeabi_frsub>:
 8002ad8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8002adc:	e002      	b.n	8002ae4 <__addsf3>
 8002ade:	bf00      	nop

08002ae0 <__aeabi_fsub>:
 8002ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08002ae4 <__addsf3>:
 8002ae4:	0042      	lsls	r2, r0, #1
 8002ae6:	bf1f      	itttt	ne
 8002ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8002aec:	ea92 0f03 	teqne	r2, r3
 8002af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8002af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8002af8:	d06a      	beq.n	8002bd0 <__addsf3+0xec>
 8002afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8002afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8002b02:	bfc1      	itttt	gt
 8002b04:	18d2      	addgt	r2, r2, r3
 8002b06:	4041      	eorgt	r1, r0
 8002b08:	4048      	eorgt	r0, r1
 8002b0a:	4041      	eorgt	r1, r0
 8002b0c:	bfb8      	it	lt
 8002b0e:	425b      	neglt	r3, r3
 8002b10:	2b19      	cmp	r3, #25
 8002b12:	bf88      	it	hi
 8002b14:	4770      	bxhi	lr
 8002b16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8002b1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002b1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002b22:	bf18      	it	ne
 8002b24:	4240      	negne	r0, r0
 8002b26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002b2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8002b2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8002b32:	bf18      	it	ne
 8002b34:	4249      	negne	r1, r1
 8002b36:	ea92 0f03 	teq	r2, r3
 8002b3a:	d03f      	beq.n	8002bbc <__addsf3+0xd8>
 8002b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8002b40:	fa41 fc03 	asr.w	ip, r1, r3
 8002b44:	eb10 000c 	adds.w	r0, r0, ip
 8002b48:	f1c3 0320 	rsb	r3, r3, #32
 8002b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8002b50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8002b54:	d502      	bpl.n	8002b5c <__addsf3+0x78>
 8002b56:	4249      	negs	r1, r1
 8002b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8002b5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8002b60:	d313      	bcc.n	8002b8a <__addsf3+0xa6>
 8002b62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002b66:	d306      	bcc.n	8002b76 <__addsf3+0x92>
 8002b68:	0840      	lsrs	r0, r0, #1
 8002b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8002b6e:	f102 0201 	add.w	r2, r2, #1
 8002b72:	2afe      	cmp	r2, #254	; 0xfe
 8002b74:	d251      	bcs.n	8002c1a <__addsf3+0x136>
 8002b76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8002b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8002b7e:	bf08      	it	eq
 8002b80:	f020 0001 	biceq.w	r0, r0, #1
 8002b84:	ea40 0003 	orr.w	r0, r0, r3
 8002b88:	4770      	bx	lr
 8002b8a:	0049      	lsls	r1, r1, #1
 8002b8c:	eb40 0000 	adc.w	r0, r0, r0
 8002b90:	3a01      	subs	r2, #1
 8002b92:	bf28      	it	cs
 8002b94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8002b98:	d2ed      	bcs.n	8002b76 <__addsf3+0x92>
 8002b9a:	fab0 fc80 	clz	ip, r0
 8002b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8002ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8002ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8002baa:	bfaa      	itet	ge
 8002bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8002bb0:	4252      	neglt	r2, r2
 8002bb2:	4318      	orrge	r0, r3
 8002bb4:	bfbc      	itt	lt
 8002bb6:	40d0      	lsrlt	r0, r2
 8002bb8:	4318      	orrlt	r0, r3
 8002bba:	4770      	bx	lr
 8002bbc:	f092 0f00 	teq	r2, #0
 8002bc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8002bc4:	bf06      	itte	eq
 8002bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8002bca:	3201      	addeq	r2, #1
 8002bcc:	3b01      	subne	r3, #1
 8002bce:	e7b5      	b.n	8002b3c <__addsf3+0x58>
 8002bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8002bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8002bd8:	bf18      	it	ne
 8002bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8002bde:	d021      	beq.n	8002c24 <__addsf3+0x140>
 8002be0:	ea92 0f03 	teq	r2, r3
 8002be4:	d004      	beq.n	8002bf0 <__addsf3+0x10c>
 8002be6:	f092 0f00 	teq	r2, #0
 8002bea:	bf08      	it	eq
 8002bec:	4608      	moveq	r0, r1
 8002bee:	4770      	bx	lr
 8002bf0:	ea90 0f01 	teq	r0, r1
 8002bf4:	bf1c      	itt	ne
 8002bf6:	2000      	movne	r0, #0
 8002bf8:	4770      	bxne	lr
 8002bfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8002bfe:	d104      	bne.n	8002c0a <__addsf3+0x126>
 8002c00:	0040      	lsls	r0, r0, #1
 8002c02:	bf28      	it	cs
 8002c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8002c08:	4770      	bx	lr
 8002c0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8002c0e:	bf3c      	itt	cc
 8002c10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8002c14:	4770      	bxcc	lr
 8002c16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8002c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8002c1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002c22:	4770      	bx	lr
 8002c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8002c28:	bf16      	itet	ne
 8002c2a:	4608      	movne	r0, r1
 8002c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8002c30:	4601      	movne	r1, r0
 8002c32:	0242      	lsls	r2, r0, #9
 8002c34:	bf06      	itte	eq
 8002c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8002c3a:	ea90 0f01 	teqeq	r0, r1
 8002c3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8002c42:	4770      	bx	lr

08002c44 <__aeabi_ui2f>:
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	e004      	b.n	8002c54 <__aeabi_i2f+0x8>
 8002c4a:	bf00      	nop

08002c4c <__aeabi_i2f>:
 8002c4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8002c50:	bf48      	it	mi
 8002c52:	4240      	negmi	r0, r0
 8002c54:	ea5f 0c00 	movs.w	ip, r0
 8002c58:	bf08      	it	eq
 8002c5a:	4770      	bxeq	lr
 8002c5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8002c60:	4601      	mov	r1, r0
 8002c62:	f04f 0000 	mov.w	r0, #0
 8002c66:	e01c      	b.n	8002ca2 <__aeabi_l2f+0x2a>

08002c68 <__aeabi_ul2f>:
 8002c68:	ea50 0201 	orrs.w	r2, r0, r1
 8002c6c:	bf08      	it	eq
 8002c6e:	4770      	bxeq	lr
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	e00a      	b.n	8002c8c <__aeabi_l2f+0x14>
 8002c76:	bf00      	nop

08002c78 <__aeabi_l2f>:
 8002c78:	ea50 0201 	orrs.w	r2, r0, r1
 8002c7c:	bf08      	it	eq
 8002c7e:	4770      	bxeq	lr
 8002c80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8002c84:	d502      	bpl.n	8002c8c <__aeabi_l2f+0x14>
 8002c86:	4240      	negs	r0, r0
 8002c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002c8c:	ea5f 0c01 	movs.w	ip, r1
 8002c90:	bf02      	ittt	eq
 8002c92:	4684      	moveq	ip, r0
 8002c94:	4601      	moveq	r1, r0
 8002c96:	2000      	moveq	r0, #0
 8002c98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8002c9c:	bf08      	it	eq
 8002c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8002ca6:	fabc f28c 	clz	r2, ip
 8002caa:	3a08      	subs	r2, #8
 8002cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8002cb0:	db10      	blt.n	8002cd4 <__aeabi_l2f+0x5c>
 8002cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8002cb6:	4463      	add	r3, ip
 8002cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8002cbc:	f1c2 0220 	rsb	r2, r2, #32
 8002cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8002cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8002cc8:	eb43 0002 	adc.w	r0, r3, r2
 8002ccc:	bf08      	it	eq
 8002cce:	f020 0001 	biceq.w	r0, r0, #1
 8002cd2:	4770      	bx	lr
 8002cd4:	f102 0220 	add.w	r2, r2, #32
 8002cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8002cdc:	f1c2 0220 	rsb	r2, r2, #32
 8002ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8002ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8002ce8:	eb43 0002 	adc.w	r0, r3, r2
 8002cec:	bf08      	it	eq
 8002cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8002cf2:	4770      	bx	lr

08002cf4 <__aeabi_fmul>:
 8002cf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8002cfc:	bf1e      	ittt	ne
 8002cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8002d02:	ea92 0f0c 	teqne	r2, ip
 8002d06:	ea93 0f0c 	teqne	r3, ip
 8002d0a:	d06f      	beq.n	8002dec <__aeabi_fmul+0xf8>
 8002d0c:	441a      	add	r2, r3
 8002d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8002d12:	0240      	lsls	r0, r0, #9
 8002d14:	bf18      	it	ne
 8002d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8002d1a:	d01e      	beq.n	8002d5a <__aeabi_fmul+0x66>
 8002d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8002d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8002d28:	fba0 3101 	umull	r3, r1, r0, r1
 8002d2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8002d30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002d34:	bf3e      	ittt	cc
 8002d36:	0049      	lslcc	r1, r1, #1
 8002d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8002d3c:	005b      	lslcc	r3, r3, #1
 8002d3e:	ea40 0001 	orr.w	r0, r0, r1
 8002d42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8002d46:	2afd      	cmp	r2, #253	; 0xfd
 8002d48:	d81d      	bhi.n	8002d86 <__aeabi_fmul+0x92>
 8002d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8002d52:	bf08      	it	eq
 8002d54:	f020 0001 	biceq.w	r0, r0, #1
 8002d58:	4770      	bx	lr
 8002d5a:	f090 0f00 	teq	r0, #0
 8002d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8002d62:	bf08      	it	eq
 8002d64:	0249      	lsleq	r1, r1, #9
 8002d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8002d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8002d6e:	3a7f      	subs	r2, #127	; 0x7f
 8002d70:	bfc2      	ittt	gt
 8002d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8002d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8002d7a:	4770      	bxgt	lr
 8002d7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	3a01      	subs	r2, #1
 8002d86:	dc5d      	bgt.n	8002e44 <__aeabi_fmul+0x150>
 8002d88:	f112 0f19 	cmn.w	r2, #25
 8002d8c:	bfdc      	itt	le
 8002d8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8002d92:	4770      	bxle	lr
 8002d94:	f1c2 0200 	rsb	r2, r2, #0
 8002d98:	0041      	lsls	r1, r0, #1
 8002d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8002d9e:	f1c2 0220 	rsb	r2, r2, #32
 8002da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8002da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8002daa:	f140 0000 	adc.w	r0, r0, #0
 8002dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8002db2:	bf08      	it	eq
 8002db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8002db8:	4770      	bx	lr
 8002dba:	f092 0f00 	teq	r2, #0
 8002dbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8002dc2:	bf02      	ittt	eq
 8002dc4:	0040      	lsleq	r0, r0, #1
 8002dc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8002dca:	3a01      	subeq	r2, #1
 8002dcc:	d0f9      	beq.n	8002dc2 <__aeabi_fmul+0xce>
 8002dce:	ea40 000c 	orr.w	r0, r0, ip
 8002dd2:	f093 0f00 	teq	r3, #0
 8002dd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8002dda:	bf02      	ittt	eq
 8002ddc:	0049      	lsleq	r1, r1, #1
 8002dde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8002de2:	3b01      	subeq	r3, #1
 8002de4:	d0f9      	beq.n	8002dda <__aeabi_fmul+0xe6>
 8002de6:	ea41 010c 	orr.w	r1, r1, ip
 8002dea:	e78f      	b.n	8002d0c <__aeabi_fmul+0x18>
 8002dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8002df0:	ea92 0f0c 	teq	r2, ip
 8002df4:	bf18      	it	ne
 8002df6:	ea93 0f0c 	teqne	r3, ip
 8002dfa:	d00a      	beq.n	8002e12 <__aeabi_fmul+0x11e>
 8002dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8002e00:	bf18      	it	ne
 8002e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8002e06:	d1d8      	bne.n	8002dba <__aeabi_fmul+0xc6>
 8002e08:	ea80 0001 	eor.w	r0, r0, r1
 8002e0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8002e10:	4770      	bx	lr
 8002e12:	f090 0f00 	teq	r0, #0
 8002e16:	bf17      	itett	ne
 8002e18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8002e1c:	4608      	moveq	r0, r1
 8002e1e:	f091 0f00 	teqne	r1, #0
 8002e22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8002e26:	d014      	beq.n	8002e52 <__aeabi_fmul+0x15e>
 8002e28:	ea92 0f0c 	teq	r2, ip
 8002e2c:	d101      	bne.n	8002e32 <__aeabi_fmul+0x13e>
 8002e2e:	0242      	lsls	r2, r0, #9
 8002e30:	d10f      	bne.n	8002e52 <__aeabi_fmul+0x15e>
 8002e32:	ea93 0f0c 	teq	r3, ip
 8002e36:	d103      	bne.n	8002e40 <__aeabi_fmul+0x14c>
 8002e38:	024b      	lsls	r3, r1, #9
 8002e3a:	bf18      	it	ne
 8002e3c:	4608      	movne	r0, r1
 8002e3e:	d108      	bne.n	8002e52 <__aeabi_fmul+0x15e>
 8002e40:	ea80 0001 	eor.w	r0, r0, r1
 8002e44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8002e48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8002e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002e50:	4770      	bx	lr
 8002e52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8002e56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8002e5a:	4770      	bx	lr

08002e5c <__aeabi_fdiv>:
 8002e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8002e64:	bf1e      	ittt	ne
 8002e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8002e6a:	ea92 0f0c 	teqne	r2, ip
 8002e6e:	ea93 0f0c 	teqne	r3, ip
 8002e72:	d069      	beq.n	8002f48 <__aeabi_fdiv+0xec>
 8002e74:	eba2 0203 	sub.w	r2, r2, r3
 8002e78:	ea80 0c01 	eor.w	ip, r0, r1
 8002e7c:	0249      	lsls	r1, r1, #9
 8002e7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8002e82:	d037      	beq.n	8002ef4 <__aeabi_fdiv+0x98>
 8002e84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8002e8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8002e90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8002e94:	428b      	cmp	r3, r1
 8002e96:	bf38      	it	cc
 8002e98:	005b      	lslcc	r3, r3, #1
 8002e9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8002e9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8002ea2:	428b      	cmp	r3, r1
 8002ea4:	bf24      	itt	cs
 8002ea6:	1a5b      	subcs	r3, r3, r1
 8002ea8:	ea40 000c 	orrcs.w	r0, r0, ip
 8002eac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8002eb0:	bf24      	itt	cs
 8002eb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8002eb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8002eba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8002ebe:	bf24      	itt	cs
 8002ec0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8002ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002ec8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8002ecc:	bf24      	itt	cs
 8002ece:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8002ed2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	bf18      	it	ne
 8002eda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8002ede:	d1e0      	bne.n	8002ea2 <__aeabi_fdiv+0x46>
 8002ee0:	2afd      	cmp	r2, #253	; 0xfd
 8002ee2:	f63f af50 	bhi.w	8002d86 <__aeabi_fmul+0x92>
 8002ee6:	428b      	cmp	r3, r1
 8002ee8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8002eec:	bf08      	it	eq
 8002eee:	f020 0001 	biceq.w	r0, r0, #1
 8002ef2:	4770      	bx	lr
 8002ef4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8002ef8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8002efc:	327f      	adds	r2, #127	; 0x7f
 8002efe:	bfc2      	ittt	gt
 8002f00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8002f04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8002f08:	4770      	bxgt	lr
 8002f0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	3a01      	subs	r2, #1
 8002f14:	e737      	b.n	8002d86 <__aeabi_fmul+0x92>
 8002f16:	f092 0f00 	teq	r2, #0
 8002f1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8002f1e:	bf02      	ittt	eq
 8002f20:	0040      	lsleq	r0, r0, #1
 8002f22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8002f26:	3a01      	subeq	r2, #1
 8002f28:	d0f9      	beq.n	8002f1e <__aeabi_fdiv+0xc2>
 8002f2a:	ea40 000c 	orr.w	r0, r0, ip
 8002f2e:	f093 0f00 	teq	r3, #0
 8002f32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8002f36:	bf02      	ittt	eq
 8002f38:	0049      	lsleq	r1, r1, #1
 8002f3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8002f3e:	3b01      	subeq	r3, #1
 8002f40:	d0f9      	beq.n	8002f36 <__aeabi_fdiv+0xda>
 8002f42:	ea41 010c 	orr.w	r1, r1, ip
 8002f46:	e795      	b.n	8002e74 <__aeabi_fdiv+0x18>
 8002f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8002f4c:	ea92 0f0c 	teq	r2, ip
 8002f50:	d108      	bne.n	8002f64 <__aeabi_fdiv+0x108>
 8002f52:	0242      	lsls	r2, r0, #9
 8002f54:	f47f af7d 	bne.w	8002e52 <__aeabi_fmul+0x15e>
 8002f58:	ea93 0f0c 	teq	r3, ip
 8002f5c:	f47f af70 	bne.w	8002e40 <__aeabi_fmul+0x14c>
 8002f60:	4608      	mov	r0, r1
 8002f62:	e776      	b.n	8002e52 <__aeabi_fmul+0x15e>
 8002f64:	ea93 0f0c 	teq	r3, ip
 8002f68:	d104      	bne.n	8002f74 <__aeabi_fdiv+0x118>
 8002f6a:	024b      	lsls	r3, r1, #9
 8002f6c:	f43f af4c 	beq.w	8002e08 <__aeabi_fmul+0x114>
 8002f70:	4608      	mov	r0, r1
 8002f72:	e76e      	b.n	8002e52 <__aeabi_fmul+0x15e>
 8002f74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8002f78:	bf18      	it	ne
 8002f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8002f7e:	d1ca      	bne.n	8002f16 <__aeabi_fdiv+0xba>
 8002f80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8002f84:	f47f af5c 	bne.w	8002e40 <__aeabi_fmul+0x14c>
 8002f88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8002f8c:	f47f af3c 	bne.w	8002e08 <__aeabi_fmul+0x114>
 8002f90:	e75f      	b.n	8002e52 <__aeabi_fmul+0x15e>
 8002f92:	bf00      	nop

08002f94 <__aeabi_f2uiz>:
 8002f94:	0042      	lsls	r2, r0, #1
 8002f96:	d20e      	bcs.n	8002fb6 <__aeabi_f2uiz+0x22>
 8002f98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8002f9c:	d30b      	bcc.n	8002fb6 <__aeabi_f2uiz+0x22>
 8002f9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8002fa2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8002fa6:	d409      	bmi.n	8002fbc <__aeabi_f2uiz+0x28>
 8002fa8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8002fac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fb0:	fa23 f002 	lsr.w	r0, r3, r2
 8002fb4:	4770      	bx	lr
 8002fb6:	f04f 0000 	mov.w	r0, #0
 8002fba:	4770      	bx	lr
 8002fbc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8002fc0:	d101      	bne.n	8002fc6 <__aeabi_f2uiz+0x32>
 8002fc2:	0242      	lsls	r2, r0, #9
 8002fc4:	d102      	bne.n	8002fcc <__aeabi_f2uiz+0x38>
 8002fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8002fca:	4770      	bx	lr
 8002fcc:	f04f 0000 	mov.w	r0, #0
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop

08002fd4 <main>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fd4:	4a5c      	ldr	r2, [pc, #368]	; (8003148 <main+0x174>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd6:	495d      	ldr	r1, [pc, #372]	; (800314c <main+0x178>)
 8002fd8:	6813      	ldr	r3, [r2, #0]
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fda:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002fde:	f043 0310 	orr.w	r3, r3, #16
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	68ca      	ldr	r2, [r1, #12]
  reg_value  =  (reg_value                                   |
 8002fe6:	4b5a      	ldr	r3, [pc, #360]	; (8003150 <main+0x17c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fe8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fec:	0412      	lsls	r2, r2, #16
 8002fee:	0c12      	lsrs	r2, r2, #16
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ff0:	4d58      	ldr	r5, [pc, #352]	; (8003154 <main+0x180>)
  reg_value  =  (reg_value                                   |
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	b0af      	sub	sp, #188	; 0xbc
  SCB->AIRCR =  reg_value;
 8002ff6:	60cb      	str	r3, [r1, #12]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ff8:	200f      	movs	r0, #15
 8002ffa:	f7fe fd11 	bl	8001a20 <HAL_InitTick.isra.0>
 8002ffe:	69ab      	ldr	r3, [r5, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003000:	4a55      	ldr	r2, [pc, #340]	; (8003158 <main+0x184>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	61ab      	str	r3, [r5, #24]
 8003008:	69ab      	ldr	r3, [r5, #24]
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800300a:	2100      	movs	r1, #0
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	930c      	str	r3, [sp, #48]	; 0x30
 8003012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_PWR_CLK_ENABLE();
 8003014:	69eb      	ldr	r3, [r5, #28]
 8003016:	a826      	add	r0, sp, #152	; 0x98
 8003018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301c:	61eb      	str	r3, [r5, #28]
 800301e:	69eb      	ldr	r3, [r5, #28]
 8003020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003024:	930b      	str	r3, [sp, #44]	; 0x2c
 8003026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003028:	6853      	ldr	r3, [r2, #4]
 800302a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800302e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003032:	6053      	str	r3, [r2, #4]
 8003034:	2214      	movs	r2, #20
 8003036:	f002 f85b 	bl	80050f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800303a:	2214      	movs	r2, #20
 800303c:	2100      	movs	r1, #0
 800303e:	a81d      	add	r0, sp, #116	; 0x74
 8003040:	f002 f856 	bl	80050f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003044:	2301      	movs	r3, #1
 8003046:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800304a:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800304c:	e9cd 3224 	strd	r3, r2, [sp, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003050:	2302      	movs	r3, #2
 8003052:	932b      	str	r3, [sp, #172]	; 0xac
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003054:	686b      	ldr	r3, [r5, #4]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	2b04      	cmp	r3, #4
 800305c:	d007      	beq.n	800306e <main+0x9a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800305e:	686b      	ldr	r3, [r5, #4]
 8003060:	f003 030c 	and.w	r3, r3, #12
 8003064:	2b08      	cmp	r3, #8
 8003066:	d141      	bne.n	80030ec <main+0x118>
 8003068:	686b      	ldr	r3, [r5, #4]
 800306a:	03db      	lsls	r3, r3, #15
 800306c:	d53e      	bpl.n	80030ec <main+0x118>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306e:	682b      	ldr	r3, [r5, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003070:	686b      	ldr	r3, [r5, #4]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b08      	cmp	r3, #8
 8003078:	d051      	beq.n	800311e <main+0x14a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307a:	2200      	movs	r2, #0
 800307c:	4b37      	ldr	r3, [pc, #220]	; (800315c <main+0x188>)
 800307e:	661a      	str	r2, [r3, #96]	; 0x60
  return uwTick;
 8003080:	4a37      	ldr	r2, [pc, #220]	; (8003160 <main+0x18c>)
 8003082:	6811      	ldr	r1, [r2, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003084:	682b      	ldr	r3, [r5, #0]
 8003086:	019e      	lsls	r6, r3, #6
 8003088:	d43f      	bmi.n	800310a <main+0x136>

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800308a:	2101      	movs	r1, #1
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800308c:	686b      	ldr	r3, [r5, #4]
 800308e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003092:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003094:	686b      	ldr	r3, [r5, #4]
 8003096:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800309a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800309e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80030a0:	4b2e      	ldr	r3, [pc, #184]	; (800315c <main+0x188>)
 80030a2:	6619      	str	r1, [r3, #96]	; 0x60
 80030a4:	6811      	ldr	r1, [r2, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030a6:	682b      	ldr	r3, [r5, #0]
 80030a8:	019c      	lsls	r4, r3, #6
 80030aa:	d533      	bpl.n	8003114 <main+0x140>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030ac:	2302      	movs	r3, #2
 80030ae:	210f      	movs	r1, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030b4:	e9cd 131d 	strd	r1, r3, [sp, #116]	; 0x74
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030b8:	2300      	movs	r3, #0
 80030ba:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030be:	4a22      	ldr	r2, [pc, #136]	; (8003148 <main+0x174>)
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030c0:	9321      	str	r3, [sp, #132]	; 0x84
 80030c2:	6813      	ldr	r3, [r2, #0]
 80030c4:	f013 0f06 	tst.w	r3, #6
 80030c8:	d032      	beq.n	8003130 <main+0x15c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030ca:	686b      	ldr	r3, [r5, #4]
 80030cc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030d0:	606b      	str	r3, [r5, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030d2:	686b      	ldr	r3, [r5, #4]
 80030d4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030d8:	606b      	str	r3, [r5, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030da:	686b      	ldr	r3, [r5, #4]
 80030dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030e0:	606b      	str	r3, [r5, #4]
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e2:	682b      	ldr	r3, [r5, #0]
 80030e4:	019a      	lsls	r2, r3, #6
 80030e6:	d43d      	bmi.n	8003164 <main+0x190>
  __ASM volatile ("cpsid i" : : : "memory");
 80030e8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80030ea:	e7fe      	b.n	80030ea <main+0x116>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ec:	682b      	ldr	r3, [r5, #0]
 80030ee:	4a1c      	ldr	r2, [pc, #112]	; (8003160 <main+0x18c>)
 80030f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f4:	602b      	str	r3, [r5, #0]
 80030f6:	6811      	ldr	r1, [r2, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f8:	682b      	ldr	r3, [r5, #0]
 80030fa:	039f      	lsls	r7, r3, #14
 80030fc:	d4b8      	bmi.n	8003070 <main+0x9c>
 80030fe:	6813      	ldr	r3, [r2, #0]
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003100:	1a5b      	subs	r3, r3, r1
 8003102:	2b64      	cmp	r3, #100	; 0x64
 8003104:	d9f8      	bls.n	80030f8 <main+0x124>
 8003106:	b672      	cpsid	i
 8003108:	e7fe      	b.n	8003108 <main+0x134>
 800310a:	6813      	ldr	r3, [r2, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310c:	1a5b      	subs	r3, r3, r1
 800310e:	2b02      	cmp	r3, #2
 8003110:	d9b8      	bls.n	8003084 <main+0xb0>
 8003112:	e7f8      	b.n	8003106 <main+0x132>
 8003114:	6813      	ldr	r3, [r2, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003116:	1a5b      	subs	r3, r3, r1
 8003118:	2b02      	cmp	r3, #2
 800311a:	d9c4      	bls.n	80030a6 <main+0xd2>
 800311c:	e7f3      	b.n	8003106 <main+0x132>
        pll_config = RCC->CFGR;
 800311e:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003120:	03d8      	lsls	r0, r3, #15
 8003122:	d5f0      	bpl.n	8003106 <main+0x132>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003124:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003128:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800312c:	d1eb      	bne.n	8003106 <main+0x132>
 800312e:	e7bd      	b.n	80030ac <main+0xd8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003130:	6813      	ldr	r3, [r2, #0]
 8003132:	f023 0307 	bic.w	r3, r3, #7
 8003136:	f043 0302 	orr.w	r3, r3, #2
 800313a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313c:	6813      	ldr	r3, [r2, #0]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	2b02      	cmp	r3, #2
 8003144:	d1d0      	bne.n	80030e8 <main+0x114>
 8003146:	e7c0      	b.n	80030ca <main+0xf6>
 8003148:	40022000 	.word	0x40022000
 800314c:	e000ed00 	.word	0xe000ed00
 8003150:	05fa0300 	.word	0x05fa0300
 8003154:	40021000 	.word	0x40021000
 8003158:	40010000 	.word	0x40010000
 800315c:	42420000 	.word	0x42420000
 8003160:	20000208 	.word	0x20000208
    /* Get Start Tick */
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003164:	f241 3188 	movw	r1, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003168:	686b      	ldr	r3, [r5, #4]
 800316a:	4c93      	ldr	r4, [pc, #588]	; (80033b8 <main+0x3e4>)
 800316c:	f023 0303 	bic.w	r3, r3, #3
 8003170:	f043 0302 	orr.w	r3, r3, #2
 8003174:	606b      	str	r3, [r5, #4]
 8003176:	6822      	ldr	r2, [r4, #0]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003178:	686b      	ldr	r3, [r5, #4]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b08      	cmp	r3, #8
 8003180:	f040 80f0 	bne.w	8003364 <main+0x390>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003184:	4a8d      	ldr	r2, [pc, #564]	; (80033bc <main+0x3e8>)
 8003186:	6813      	ldr	r3, [r2, #0]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	2b02      	cmp	r3, #2
 800318e:	f200 80ef 	bhi.w	8003370 <main+0x39c>

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003192:	686b      	ldr	r3, [r5, #4]
{
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003194:	ae19      	add	r6, sp, #100	; 0x64
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003196:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800319a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800319e:	606b      	str	r3, [r5, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031a0:	686b      	ldr	r3, [r5, #4]
 80031a2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80031a6:	606b      	str	r3, [r5, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031a8:	4b85      	ldr	r3, [pc, #532]	; (80033c0 <main+0x3ec>)
 80031aa:	f103 0710 	add.w	r7, r3, #16
 80031ae:	4632      	mov	r2, r6
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	6859      	ldr	r1, [r3, #4]
 80031b4:	3308      	adds	r3, #8
 80031b6:	c203      	stmia	r2!, {r0, r1}
 80031b8:	42bb      	cmp	r3, r7
 80031ba:	4616      	mov	r6, r2
 80031bc:	d1f7      	bne.n	80031ae <main+0x1da>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031be:	f240 2301 	movw	r3, #513	; 0x201
 80031c2:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
  uint32_t sysclockfreq = 0U;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031c6:	686b      	ldr	r3, [r5, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031c8:	f003 020c 	and.w	r2, r3, #12
 80031cc:	2a08      	cmp	r2, #8
 80031ce:	f000 80dc 	beq.w	800338a <main+0x3b6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031d2:	4f7c      	ldr	r7, [pc, #496]	; (80033c4 <main+0x3f0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d4:	2600      	movs	r6, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031d6:	686b      	ldr	r3, [r5, #4]
 80031d8:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 80033c8 <main+0x3f4>
 80031dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80031e0:	f818 3003 	ldrb.w	r3, [r8, r3]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031e4:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 80033cc <main+0x3f8>
 80031e8:	40df      	lsrs	r7, r3
 80031ea:	4b79      	ldr	r3, [pc, #484]	; (80033d0 <main+0x3fc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ec:	f04f 0a01 	mov.w	sl, #1
  HAL_InitTick(uwTickPrio);
 80031f0:	6858      	ldr	r0, [r3, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031f2:	601f      	str	r7, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80031f4:	f7fe fc14 	bl	8001a20 <HAL_InitTick.isra.0>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f8:	9626      	str	r6, [sp, #152]	; 0x98
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031fa:	69ab      	ldr	r3, [r5, #24]
 80031fc:	4a75      	ldr	r2, [pc, #468]	; (80033d4 <main+0x400>)
 80031fe:	f043 0310 	orr.w	r3, r3, #16
 8003202:	61ab      	str	r3, [r5, #24]
 8003204:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003206:	a924      	add	r1, sp, #144	; 0x90
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	930a      	str	r3, [sp, #40]	; 0x28
 800320e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003210:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003212:	4870      	ldr	r0, [pc, #448]	; (80033d4 <main+0x400>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003214:	f043 0320 	orr.w	r3, r3, #32
 8003218:	61ab      	str	r3, [r5, #24]
 800321a:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800321c:	f04f 0903 	mov.w	r9, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	9309      	str	r3, [sp, #36]	; 0x24
 8003226:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003228:	69ab      	ldr	r3, [r5, #24]
 800322a:	f043 0304 	orr.w	r3, r3, #4
 800322e:	61ab      	str	r3, [r5, #24]
 8003230:	69ab      	ldr	r3, [r5, #24]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	9308      	str	r3, [sp, #32]
 8003238:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800323a:	69ab      	ldr	r3, [r5, #24]
 800323c:	f043 0308 	orr.w	r3, r3, #8
 8003240:	61ab      	str	r3, [r5, #24]
 8003242:	69ab      	ldr	r3, [r5, #24]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	9307      	str	r3, [sp, #28]
 800324a:	9b07      	ldr	r3, [sp, #28]
 800324c:	4b62      	ldr	r3, [pc, #392]	; (80033d8 <main+0x404>)
 800324e:	6113      	str	r3, [r2, #16]
 8003250:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8003254:	4b61      	ldr	r3, [pc, #388]	; (80033dc <main+0x408>)
 8003256:	611a      	str	r2, [r3, #16]
 8003258:	4a61      	ldr	r2, [pc, #388]	; (80033e0 <main+0x40c>)
 800325a:	f8cb 2010 	str.w	r2, [fp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800325e:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8003262:	e9cd 2a24 	strd	r2, sl, [sp, #144]	; 0x90
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003266:	2202      	movs	r2, #2
 8003268:	9227      	str	r2, [sp, #156]	; 0x9c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800326a:	f7fd f8f9 	bl	8000460 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin|LCD_DB_12_Pin
 800326e:	f248 023f 	movw	r2, #32831	; 0x803f
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	9626      	str	r6, [sp, #152]	; 0x98
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003274:	e9cd 2a24 	strd	r2, sl, [sp, #144]	; 0x90
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003278:	f8cd 909c 	str.w	r9, [sp, #156]	; 0x9c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800327c:	f7fd f8f0 	bl	8000460 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8003280:	22ff      	movs	r2, #255	; 0xff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003282:	4b56      	ldr	r3, [pc, #344]	; (80033dc <main+0x408>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003284:	e9cd 2a24 	strd	r2, sl, [sp, #144]	; 0x90
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003288:	4618      	mov	r0, r3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800328a:	e9cd 6926 	strd	r6, r9, [sp, #152]	; 0x98
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328e:	f7fd f8e7 	bl	8000460 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8003292:	f640 4303 	movw	r3, #3075	; 0xc03
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003296:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003298:	e9cd 3a24 	strd	r3, sl, [sp, #144]	; 0x90
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800329c:	e9cd 6926 	strd	r6, r9, [sp, #152]	; 0x98
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a0:	f7fd f8de 	bl	8000460 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|ALARM_MODE_Pin|ALARM_HOUR_Pin|ALARM_MINUTE_Pin;
 80032a4:	233c      	movs	r3, #60	; 0x3c
  hi2c1.Init.ClockSpeed = 100000;
 80032a6:	f8df b13c 	ldr.w	fp, [pc, #316]	; 80033e4 <main+0x410>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032aa:	e9cd 3624 	strd	r3, r6, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ae:	9626      	str	r6, [sp, #152]	; 0x98
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b0:	f7fd f8d6 	bl	8000460 <HAL_GPIO_Init>
  hi2c1.Init.ClockSpeed = 100000;
 80032b4:	4b4c      	ldr	r3, [pc, #304]	; (80033e8 <main+0x414>)
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032b6:	f894 20cd 	ldrb.w	r2, [r4, #205]	; 0xcd
 80032ba:	e9c4 b324 	strd	fp, r3, [r4, #144]	; 0x90
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 80032c2:	e9c4 6626 	strd	r6, r6, [r4, #152]	; 0x98
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032c6:	e9c4 3628 	strd	r3, r6, [r4, #160]	; 0xa0
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032ca:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032ce:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
 80032d2:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 80032d6:	b9ea      	cbnz	r2, 8003314 <main+0x340>
    hi2c->Lock = HAL_UNLOCKED;
 80032d8:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032dc:	9326      	str	r3, [sp, #152]	; 0x98
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032de:	69ab      	ldr	r3, [r5, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032e0:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e4:	f043 0308 	orr.w	r3, r3, #8
 80032e8:	61ab      	str	r3, [r5, #24]
 80032ea:	69ab      	ldr	r3, [r5, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032ec:	f8cd 909c 	str.w	r9, [sp, #156]	; 0x9c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	930e      	str	r3, [sp, #56]	; 0x38
 80032f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032f8:	2312      	movs	r3, #18
 80032fa:	e9cd a324 	strd	sl, r3, [sp, #144]	; 0x90
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032fe:	f7fd f8af 	bl	8000460 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003302:	69eb      	ldr	r3, [r5, #28]
 8003304:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003308:	61eb      	str	r3, [r5, #28]
 800330a:	69eb      	ldr	r3, [r5, #28]
 800330c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003310:	930d      	str	r3, [sp, #52]	; 0x34
 8003312:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003314:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003316:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
  hi2c->State = HAL_I2C_STATE_BUSY;
 800331a:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
  __HAL_I2C_DISABLE(hi2c);
 800331e:	6813      	ldr	r3, [r2, #0]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003320:	4931      	ldr	r1, [pc, #196]	; (80033e8 <main+0x414>)
  __HAL_I2C_DISABLE(hi2c);
 8003322:	f023 0301 	bic.w	r3, r3, #1
 8003326:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003328:	6813      	ldr	r3, [r2, #0]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800332a:	f8d4 c094 	ldr.w	ip, [r4, #148]	; 0x94
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800332e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003332:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003334:	6813      	ldr	r3, [r2, #0]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003336:	458c      	cmp	ip, r1
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003338:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800333c:	6013      	str	r3, [r2, #0]
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800333e:	686b      	ldr	r3, [r5, #4]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003340:	bf98      	it	ls
 8003342:	492a      	ldrls	r1, [pc, #168]	; (80033ec <main+0x418>)
 8003344:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003348:	4443      	add	r3, r8
 800334a:	7c1b      	ldrb	r3, [r3, #16]
 800334c:	bf88      	it	hi
 800334e:	4928      	ldrhi	r1, [pc, #160]	; (80033f0 <main+0x41c>)
 8003350:	fa27 f303 	lsr.w	r3, r7, r3
 8003354:	428b      	cmp	r3, r1
 8003356:	bf8c      	ite	hi
 8003358:	2100      	movhi	r1, #0
 800335a:	2101      	movls	r1, #1
 800335c:	2900      	cmp	r1, #0
 800335e:	d04b      	beq.n	80033f8 <main+0x424>
 8003360:	b672      	cpsid	i
	while (1)
 8003362:	e7fe      	b.n	8003362 <main+0x38e>
 8003364:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	428b      	cmp	r3, r1
 800336a:	f67f af05 	bls.w	8003178 <main+0x1a4>
 800336e:	e6bb      	b.n	80030e8 <main+0x114>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003370:	6813      	ldr	r3, [r2, #0]
 8003372:	f023 0307 	bic.w	r3, r3, #7
 8003376:	f043 0302 	orr.w	r3, r3, #2
 800337a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800337c:	6813      	ldr	r3, [r2, #0]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	2b02      	cmp	r3, #2
 8003384:	f47f aeb0 	bne.w	80030e8 <main+0x114>
 8003388:	e703      	b.n	8003192 <main+0x1be>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800338a:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800338e:	32b8      	adds	r2, #184	; 0xb8
 8003390:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003392:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003394:	f812 7c54 	ldrb.w	r7, [r2, #-84]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003398:	d50b      	bpl.n	80033b2 <main+0x3de>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800339a:	686b      	ldr	r3, [r5, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800339c:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <main+0x3f0>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800339e:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033a2:	4357      	muls	r7, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033a4:	33b8      	adds	r3, #184	; 0xb8
 80033a6:	446b      	add	r3, sp
 80033a8:	f813 3c64 	ldrb.w	r3, [r3, #-100]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033ac:	fbb7 f7f3 	udiv	r7, r7, r3
 80033b0:	e710      	b.n	80031d4 <main+0x200>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033b2:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <main+0x420>)
 80033b4:	435f      	muls	r7, r3
 80033b6:	e70d      	b.n	80031d4 <main+0x200>
 80033b8:	20000208 	.word	0x20000208
 80033bc:	40022000 	.word	0x40022000
 80033c0:	0801b2f4 	.word	0x0801b2f4
 80033c4:	007a1200 	.word	0x007a1200
 80033c8:	08009ab0 	.word	0x08009ab0
 80033cc:	40010c00 	.word	0x40010c00
 80033d0:	20000000 	.word	0x20000000
 80033d4:	40011000 	.word	0x40011000
 80033d8:	e03f0000 	.word	0xe03f0000
 80033dc:	40010800 	.word	0x40010800
 80033e0:	0c030000 	.word	0x0c030000
 80033e4:	40005400 	.word	0x40005400
 80033e8:	000186a0 	.word	0x000186a0
 80033ec:	001e847f 	.word	0x001e847f
 80033f0:	003d08ff 	.word	0x003d08ff
 80033f4:	003d0900 	.word	0x003d0900
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033f8:	4ecc      	ldr	r6, [pc, #816]	; (800372c <main+0x758>)
  freqrange = I2C_FREQRANGE(pclk1);
 80033fa:	49cd      	ldr	r1, [pc, #820]	; (8003730 <main+0x75c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033fc:	45b4      	cmp	ip, r6
  freqrange = I2C_FREQRANGE(pclk1);
 80033fe:	fbb3 f1f1 	udiv	r1, r3, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003402:	bf88      	it	hi
 8003404:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003408:	6850      	ldr	r0, [r2, #4]
 800340a:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800340e:	ea40 0001 	orr.w	r0, r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003412:	bf82      	ittt	hi
 8003414:	4371      	mulhi	r1, r6
 8003416:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 800341a:	fbb1 f1f6 	udivhi	r1, r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800341e:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003420:	6a10      	ldr	r0, [r2, #32]
 8003422:	3101      	adds	r1, #1
 8003424:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8003428:	4301      	orrs	r1, r0
 800342a:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800342c:	69d1      	ldr	r1, [r2, #28]
 800342e:	1e5e      	subs	r6, r3, #1
 8003430:	4bbe      	ldr	r3, [pc, #760]	; (800372c <main+0x758>)
 8003432:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003436:	459c      	cmp	ip, r3
 8003438:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800343c:	f200 81ef 	bhi.w	800381e <main+0x84a>
 8003440:	ea4f 034c 	mov.w	r3, ip, lsl #1
 8003444:	fbb6 f3f3 	udiv	r3, r6, r3
 8003448:	f640 70fc 	movw	r0, #4092	; 0xffc
 800344c:	3301      	adds	r3, #1
 800344e:	4203      	tst	r3, r0
 8003450:	f000 820d 	beq.w	800386e <main+0x89a>
 8003454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003458:	430b      	orrs	r3, r1
 800345a:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800345c:	6811      	ldr	r1, [r2, #0]
 800345e:	e9d4 302b 	ldrd	r3, r0, [r4, #172]	; 0xac
 8003462:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8003466:	4303      	orrs	r3, r0
 8003468:	430b      	orrs	r3, r1
 800346a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800346c:	6891      	ldr	r1, [r2, #8]
 800346e:	e9d4 0327 	ldrd	r0, r3, [r4, #156]	; 0x9c
 8003472:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8003476:	4303      	orrs	r3, r0
 8003478:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800347c:	430b      	orrs	r3, r1
 800347e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003480:	68d1      	ldr	r1, [r2, #12]
 8003482:	e9d4 3029 	ldrd	r3, r0, [r4, #164]	; 0xa4
 8003486:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800348a:	4303      	orrs	r3, r0
 800348c:	430b      	orrs	r3, r1
  hi2c->State = HAL_I2C_STATE_READY;
 800348e:	f04f 0920 	mov.w	r9, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003492:	2100      	movs	r1, #0
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003494:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003496:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003498:	200c      	movs	r0, #12
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a0:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
  hi2c->State = HAL_I2C_STATE_READY;
 80034a4:	f884 90cd 	strb.w	r9, [r4, #205]	; 0xcd
  hi2c->PreviousState = I2C_STATE_NONE;
 80034a8:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ac:	f884 10ce 	strb.w	r1, [r4, #206]	; 0xce
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034b0:	696b      	ldr	r3, [r5, #20]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034b2:	f8df 8280 	ldr.w	r8, [pc, #640]	; 8003734 <main+0x760>
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	616b      	str	r3, [r5, #20]
 80034bc:	696b      	ldr	r3, [r5, #20]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034be:	f04f 0b0c 	mov.w	fp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	9306      	str	r3, [sp, #24]
 80034c8:	9b06      	ldr	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80034ca:	f7fd f94f 	bl	800076c <HAL_NVIC_SetPriority.constprop.0>
 80034ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80034d2:	200e      	movs	r0, #14
 80034d4:	f8c8 3000 	str.w	r3, [r8]
 80034d8:	f7fd f948 	bl	800076c <HAL_NVIC_SetPriority.constprop.0>
 80034dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80034e0:	200f      	movs	r0, #15
 80034e2:	f8c8 3000 	str.w	r3, [r8]
 80034e6:	f7fd f941 	bl	800076c <HAL_NVIC_SetPriority.constprop.0>
 80034ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ee:	f8c8 3000 	str.w	r3, [r8]
  huart1.Init.BaudRate = 9600;
 80034f2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80034f6:	f8df e240 	ldr.w	lr, [pc, #576]	; 8003738 <main+0x764>
  huart1.Init.StopBits = UART_STOPBITS_1;
 80034fa:	e9c4 1103 	strd	r1, r1, [r4, #12]
  huart1.Init.BaudRate = 9600;
 80034fe:	e9c4 e301 	strd	lr, r3, [r4, #4]
  if (huart->gState == HAL_UART_STATE_RESET)
 8003502:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003506:	e9c4 b106 	strd	fp, r1, [r4, #24]
  huart1.Init.Parity = UART_PARITY_NONE;
 800350a:	6161      	str	r1, [r4, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800350c:	6221      	str	r1, [r4, #32]
 800350e:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8003512:	2b00      	cmp	r3, #0
 8003514:	d170      	bne.n	80035f8 <main+0x624>
    huart->Lock = HAL_UNLOCKED;
 8003516:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800351a:	9626      	str	r6, [sp, #152]	; 0x98
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800351c:	69ab      	ldr	r3, [r5, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351e:	f44f 7c00 	mov.w	ip, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8003522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003526:	61ab      	str	r3, [r5, #24]
 8003528:	69ab      	ldr	r3, [r5, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800352a:	4884      	ldr	r0, [pc, #528]	; (800373c <main+0x768>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800352c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003530:	9310      	str	r3, [sp, #64]	; 0x40
 8003532:	9b10      	ldr	r3, [sp, #64]	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003534:	69ab      	ldr	r3, [r5, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003536:	a924      	add	r1, sp, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003538:	f043 0304 	orr.w	r3, r3, #4
 800353c:	61ab      	str	r3, [r5, #24]
 800353e:	69ab      	ldr	r3, [r5, #24]
    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003540:	f04f 0a80 	mov.w	sl, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	930f      	str	r3, [sp, #60]	; 0x3c
 800354a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354c:	2302      	movs	r3, #2
 800354e:	e9cd c324 	strd	ip, r3, [sp, #144]	; 0x90
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003552:	2303      	movs	r3, #3
 8003554:	9327      	str	r3, [sp, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003556:	f7fc ff83 	bl	8000460 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800355a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355e:	9626      	str	r6, [sp, #152]	; 0x98
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003560:	e9cd 3624 	strd	r3, r6, [sp, #144]	; 0x90
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003564:	f7fc ff7c 	bl	8000460 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003568:	f04f 0e10 	mov.w	lr, #16
  hdma->Lock = HAL_UNLOCKED;
 800356c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003570:	4b73      	ldr	r3, [pc, #460]	; (8003740 <main+0x76c>)
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003572:	e9c4 a653 	strd	sl, r6, [r4, #332]	; 0x14c
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003576:	e9c4 3e50 	strd	r3, lr, [r4, #320]	; 0x140
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800357a:	e9c4 6655 	strd	r6, r6, [r4, #340]	; 0x154
  hdma->DmaBaseAddress = DMA1;
 800357e:	3b44      	subs	r3, #68	; 0x44
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003580:	f8c4 b180 	str.w	fp, [r4, #384]	; 0x180
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003584:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003588:	f8c4 615c 	str.w	r6, [r4, #348]	; 0x15c
  tmp = hdma->Instance->CCR;
 800358c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800358e:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 8003744 <main+0x770>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003592:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 8003748 <main+0x774>
 8003596:	ea02 020c 	and.w	r2, r2, ip
  tmp |=  hdma->Init.Direction        |
 800359a:	f042 0290 	orr.w	r2, r2, #144	; 0x90
  hdma->DmaBaseAddress = DMA1;
 800359e:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
  hdma->Instance->CCR = tmp;
 80035a2:	645a      	str	r2, [r3, #68]	; 0x44
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035a4:	e9c4 b661 	strd	fp, r6, [r4, #388]	; 0x184
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035a8:	e9c4 6a63 	strd	r6, sl, [r4, #396]	; 0x18c
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035ac:	e9c4 6665 	strd	r6, r6, [r4, #404]	; 0x194
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035b0:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
  hdma->DmaBaseAddress = DMA1;
 80035b4:	e9c4 3e70 	strd	r3, lr, [r4, #448]	; 0x1c0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035b8:	f8c4 6178 	str.w	r6, [r4, #376]	; 0x178
  hdma->Lock = HAL_UNLOCKED;
 80035bc:	f8a4 0160 	strh.w	r0, [r4, #352]	; 0x160
  tmp = hdma->Instance->CCR;
 80035c0:	f8d3 e058 	ldr.w	lr, [r3, #88]	; 0x58
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80035c4:	4a61      	ldr	r2, [pc, #388]	; (800374c <main+0x778>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035c6:	ea0e 0c0c 	and.w	ip, lr, ip
 80035ca:	f5a2 719e 	sub.w	r1, r2, #316	; 0x13c
  tmp |=  hdma->Init.Direction        |
 80035ce:	ea4c 0c0a 	orr.w	ip, ip, sl
 80035d2:	63a2      	str	r2, [r4, #56]	; 0x38
 80035d4:	f8c4 1164 	str.w	r1, [r4, #356]	; 0x164
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80035d8:	3244      	adds	r2, #68	; 0x44
  hdma->Instance->CCR = tmp;
 80035da:	f8c3 c058 	str.w	ip, [r3, #88]	; 0x58
  hdma->Lock = HAL_UNLOCKED;
 80035de:	f8a4 01a4 	strh.w	r0, [r4, #420]	; 0x1a4
 80035e2:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80035e6:	2025      	movs	r0, #37	; 0x25
 80035e8:	4631      	mov	r1, r6
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ea:	f8c4 61bc 	str.w	r6, [r4, #444]	; 0x1bc
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80035ee:	63e2      	str	r2, [r4, #60]	; 0x3c
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80035f0:	f7fd f8bc 	bl	800076c <HAL_NVIC_SetPriority.constprop.0>
 80035f4:	f8c8 9004 	str.w	r9, [r8, #4]
  huart->gState = HAL_UART_STATE_BUSY;
 80035f8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80035fa:	6862      	ldr	r2, [r4, #4]
  huart->gState = HAL_UART_STATE_BUSY;
 80035fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8003600:	68d3      	ldr	r3, [r2, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003602:	6921      	ldr	r1, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8003604:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003608:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800360a:	6913      	ldr	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800360c:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800360e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003612:	430b      	orrs	r3, r1
 8003614:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003616:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003618:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800361a:	4303      	orrs	r3, r0
 800361c:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR1,
 800361e:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003622:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003624:	f021 010c 	bic.w	r1, r1, #12
 8003628:	430b      	orrs	r3, r1
 800362a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800362c:	6953      	ldr	r3, [r2, #20]
 800362e:	69e1      	ldr	r1, [r4, #28]
 8003630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003634:	430b      	orrs	r3, r1
 8003636:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8003638:	4b3f      	ldr	r3, [pc, #252]	; (8003738 <main+0x764>)
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800363a:	6869      	ldr	r1, [r5, #4]
 800363c:	429a      	cmp	r2, r3
 800363e:	4b44      	ldr	r3, [pc, #272]	; (8003750 <main+0x77c>)
 8003640:	bf0c      	ite	eq
 8003642:	f3c1 21c2 	ubfxeq	r1, r1, #11, #3
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003646:	f3c1 2102 	ubfxne	r1, r1, #8, #3
 800364a:	440b      	add	r3, r1
 800364c:	7c1b      	ldrb	r3, [r3, #16]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800364e:	2164      	movs	r1, #100	; 0x64
 8003650:	40df      	lsrs	r7, r3
 8003652:	2319      	movs	r3, #25
 8003654:	435f      	muls	r7, r3
 8003656:	68a3      	ldr	r3, [r4, #8]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003658:	2600      	movs	r6, #0
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	fbb7 f7f3 	udiv	r7, r7, r3
 8003660:	fbb7 f0f1 	udiv	r0, r7, r1
 8003664:	fb01 7310 	mls	r3, r1, r0, r7
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	3332      	adds	r3, #50	; 0x32
 800366c:	fbb3 f3f1 	udiv	r3, r3, r1
  huart->gState = HAL_UART_STATE_READY;
 8003670:	2720      	movs	r7, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003672:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8003676:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003678:	6913      	ldr	r3, [r2, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800367a:	4631      	mov	r1, r6
 800367c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003680:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003682:	6953      	ldr	r3, [r2, #20]
 8003684:	a815      	add	r0, sp, #84	; 0x54
 8003686:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800368a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800368c:	68d3      	ldr	r3, [r2, #12]
 800368e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003692:	60d3      	str	r3, [r2, #12]
 8003694:	2210      	movs	r2, #16
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003696:	6466      	str	r6, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003698:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800369c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036a0:	f001 fd26 	bl	80050f0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036a4:	221c      	movs	r2, #28
 80036a6:	4631      	mov	r1, r6
 80036a8:	a81d      	add	r0, sp, #116	; 0x74
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036aa:	e9cd 6613 	strd	r6, r6, [sp, #76]	; 0x4c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036ae:	f001 fd1f 	bl	80050f0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80036b2:	463a      	mov	r2, r7
 80036b4:	4631      	mov	r1, r6
 80036b6:	a824      	add	r0, sp, #144	; 0x90
 80036b8:	f001 fd1a 	bl	80050f0 <memset>
  htim1.Instance = TIM1;
 80036bc:	4b25      	ldr	r3, [pc, #148]	; (8003754 <main+0x780>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036be:	e9c4 6617 	strd	r6, r6, [r4, #92]	; 0x5c
  htim1.Init.Prescaler = 0;
 80036c2:	e9c4 3612 	strd	r3, r6, [r4, #72]	; 0x48
  htim1.Init.Period = 65535;
 80036c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ca:	e9c4 3615 	strd	r3, r6, [r4, #84]	; 0x54
  if (htim->State == HAL_TIM_STATE_RESET)
 80036ce:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d2:	6526      	str	r6, [r4, #80]	; 0x50
 80036d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d14b      	bne.n	8003774 <main+0x7a0>
    htim->Lock = HAL_UNLOCKED;
 80036dc:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036e0:	69ab      	ldr	r3, [r5, #24]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036e2:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036ea:	61ab      	str	r3, [r5, #24]
 80036ec:	69ab      	ldr	r3, [r5, #24]
  hdma->DmaBaseAddress = DMA1;
 80036ee:	491a      	ldr	r1, [pc, #104]	; (8003758 <main+0x784>)
 80036f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f4:	9311      	str	r3, [sp, #68]	; 0x44
 80036f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80036f8:	4b18      	ldr	r3, [pc, #96]	; (800375c <main+0x788>)
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80036fa:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036fe:	e9c4 3272 	strd	r3, r2, [r4, #456]	; 0x1c8
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003702:	2380      	movs	r3, #128	; 0x80
 8003704:	e9c4 3075 	strd	r3, r0, [r4, #468]	; 0x1d4
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003708:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800370c:	e9c4 3277 	strd	r3, r2, [r4, #476]	; 0x1dc
 8003710:	2304      	movs	r3, #4
 8003712:	e9c4 1381 	strd	r1, r3, [r4, #516]	; 0x204
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003716:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
  tmp = hdma->Instance->CCR;
 800371a:	69cb      	ldr	r3, [r1, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800371c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003720:	f023 0330 	bic.w	r3, r3, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8003724:	f443 63b0 	orr.w	r3, r3, #1408	; 0x580
  hdma->Instance->CCR = tmp;
 8003728:	61cb      	str	r3, [r1, #28]
 800372a:	e019      	b.n	8003760 <main+0x78c>
 800372c:	000186a0 	.word	0x000186a0
 8003730:	000f4240 	.word	0x000f4240
 8003734:	e000e100 	.word	0xe000e100
 8003738:	40013800 	.word	0x40013800
 800373c:	40010800 	.word	0x40010800
 8003740:	40020044 	.word	0x40020044
 8003744:	ffffc00f 	.word	0xffffc00f
 8003748:	40020058 	.word	0x40020058
 800374c:	20000348 	.word	0x20000348
 8003750:	08009ab0 	.word	0x08009ab0
 8003754:	40012c00 	.word	0x40012c00
 8003758:	40020000 	.word	0x40020000
 800375c:	4002001c 	.word	0x4002001c
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003760:	4b46      	ldr	r3, [pc, #280]	; (800387c <main+0x8a8>)
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003762:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
 8003766:	66e3      	str	r3, [r4, #108]	; 0x6c
 8003768:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
  hdma->Lock = HAL_UNLOCKED;
 800376c:	f8a4 01e8 	strh.w	r0, [r4, #488]	; 0x1e8
 8003770:	f8c4 31ec 	str.w	r3, [r4, #492]	; 0x1ec
  htim->State = HAL_TIM_STATE_BUSY;
 8003774:	f04f 0902 	mov.w	r9, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003778:	4f41      	ldr	r7, [pc, #260]	; (8003880 <main+0x8ac>)
  htim->State = HAL_TIM_STATE_BUSY;
 800377a:	f884 9085 	strb.w	r9, [r4, #133]	; 0x85
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800377e:	4638      	mov	r0, r7
 8003780:	f7fc ffb8 	bl	80006f4 <TIM_Base_SetConfig.constprop.0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003788:	2601      	movs	r6, #1
 800378a:	9315      	str	r3, [sp, #84]	; 0x54
  __HAL_LOCK(htim);
 800378c:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003790:	f884 608e 	strb.w	r6, [r4, #142]	; 0x8e
  __HAL_LOCK(htim);
 8003794:	42b3      	cmp	r3, r6
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003796:	f884 6086 	strb.w	r6, [r4, #134]	; 0x86
 800379a:	f884 6087 	strb.w	r6, [r4, #135]	; 0x87
 800379e:	f884 6088 	strb.w	r6, [r4, #136]	; 0x88
 80037a2:	f884 6089 	strb.w	r6, [r4, #137]	; 0x89
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a6:	f884 608a 	strb.w	r6, [r4, #138]	; 0x8a
 80037aa:	f884 608b 	strb.w	r6, [r4, #139]	; 0x8b
 80037ae:	f884 608c 	strb.w	r6, [r4, #140]	; 0x8c
 80037b2:	f884 608d 	strb.w	r6, [r4, #141]	; 0x8d
  htim->State = HAL_TIM_STATE_READY;
 80037b6:	f884 6085 	strb.w	r6, [r4, #133]	; 0x85
  __HAL_LOCK(htim);
 80037ba:	d05c      	beq.n	8003876 <main+0x8a2>
  __HAL_UNLOCK(htim);
 80037bc:	f04f 0800 	mov.w	r8, #0
  tmpsmcr = htim->Instance->SMCR;
 80037c0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  htim->State = HAL_TIM_STATE_BUSY;
 80037c2:	f884 9085 	strb.w	r9, [r4, #133]	; 0x85
  tmpsmcr = htim->Instance->SMCR;
 80037c6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037cc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80037d0:	6083      	str	r3, [r0, #8]
  htim->State = HAL_TIM_STATE_READY;
 80037d2:	f884 6085 	strb.w	r6, [r4, #133]	; 0x85
  if (htim->State == HAL_TIM_STATE_RESET)
 80037d6:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
  __HAL_UNLOCK(htim);
 80037da:	f884 8084 	strb.w	r8, [r4, #132]	; 0x84
  htim->State = HAL_TIM_STATE_BUSY;
 80037de:	f884 9085 	strb.w	r9, [r4, #133]	; 0x85
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e2:	f7fc ff87 	bl	80006f4 <TIM_Base_SetConfig.constprop.0>
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037e6:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ea:	f884 608e 	strb.w	r6, [r4, #142]	; 0x8e
 80037ee:	42b3      	cmp	r3, r6
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f0:	f884 6086 	strb.w	r6, [r4, #134]	; 0x86
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037f4:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
 80037f8:	f884 6087 	strb.w	r6, [r4, #135]	; 0x87
 80037fc:	f884 6088 	strb.w	r6, [r4, #136]	; 0x88
 8003800:	f884 6089 	strb.w	r6, [r4, #137]	; 0x89
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003804:	f884 608a 	strb.w	r6, [r4, #138]	; 0x8a
 8003808:	f884 608b 	strb.w	r6, [r4, #139]	; 0x8b
 800380c:	f884 608c 	strb.w	r6, [r4, #140]	; 0x8c
 8003810:	f884 608d 	strb.w	r6, [r4, #141]	; 0x8d
  htim->State = HAL_TIM_STATE_READY;
 8003814:	f884 6085 	strb.w	r6, [r4, #133]	; 0x85
 8003818:	d134      	bne.n	8003884 <main+0x8b0>
 800381a:	b672      	cpsid	i
	while (1)
 800381c:	e7fe      	b.n	800381c <main+0x848>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800381e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003822:	b9ab      	cbnz	r3, 8003850 <main+0x87c>
 8003824:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
 8003828:	fbb6 f0f0 	udiv	r0, r6, r0
 800382c:	0500      	lsls	r0, r0, #20
 800382e:	f510 1f80 	cmn.w	r0, #1048576	; 0x100000
 8003832:	bf14      	ite	ne
 8003834:	2000      	movne	r0, #0
 8003836:	2001      	moveq	r0, #1
 8003838:	b9d8      	cbnz	r0, 8003872 <main+0x89e>
 800383a:	b96b      	cbnz	r3, 8003858 <main+0x884>
 800383c:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 8003840:	fbb6 f3f3 	udiv	r3, r6, r3
 8003844:	3301      	adds	r3, #1
 8003846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800384a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800384e:	e603      	b.n	8003458 <main+0x484>
 8003850:	2019      	movs	r0, #25
 8003852:	fb00 f00c 	mul.w	r0, r0, ip
 8003856:	e7e7      	b.n	8003828 <main+0x854>
 8003858:	2319      	movs	r3, #25
 800385a:	fb03 f30c 	mul.w	r3, r3, ip
 800385e:	fbb6 f3f3 	udiv	r3, r6, r3
 8003862:	3301      	adds	r3, #1
 8003864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003868:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800386c:	e5f4      	b.n	8003458 <main+0x484>
 800386e:	2304      	movs	r3, #4
 8003870:	e5f2      	b.n	8003458 <main+0x484>
 8003872:	2301      	movs	r3, #1
 8003874:	e5f0      	b.n	8003458 <main+0x484>
 8003876:	b672      	cpsid	i
 8003878:	e7fe      	b.n	8003878 <main+0x8a4>
 800387a:	bf00      	nop
 800387c:	200003d0 	.word	0x200003d0
 8003880:	40012c00 	.word	0x40012c00

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003884:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  htim->State = HAL_TIM_STATE_BUSY;
 8003886:	f884 9085 	strb.w	r9, [r4, #133]	; 0x85
  tmpcr2 = htim->Instance->CR2;
 800388a:	6872      	ldr	r2, [r6, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800388c:	42be      	cmp	r6, r7
  tmpcr2 &= ~TIM_CR2_MMS;
 800388e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr = htim->Instance->SMCR;
 8003892:	68b3      	ldr	r3, [r6, #8]
  htim->Instance->CR2 = tmpcr2;
 8003894:	6072      	str	r2, [r6, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003896:	d009      	beq.n	80038ac <main+0x8d8>
 8003898:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800389c:	d006      	beq.n	80038ac <main+0x8d8>
 800389e:	4ac1      	ldr	r2, [pc, #772]	; (8003ba4 <main+0xbd0>)
 80038a0:	4296      	cmp	r6, r2
 80038a2:	d003      	beq.n	80038ac <main+0x8d8>
 80038a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038a8:	4296      	cmp	r6, r2
 80038aa:	d102      	bne.n	80038b2 <main+0x8de>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038b0:	60b3      	str	r3, [r6, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038b2:	2301      	movs	r3, #1
  sConfigOC.Pulse = 0;
 80038b4:	2760      	movs	r7, #96	; 0x60
 80038b6:	f884 3085 	strb.w	r3, [r4, #133]	; 0x85
 80038ba:	2300      	movs	r3, #0
 80038bc:	e9cd 731d 	strd	r7, r3, [sp, #116]	; 0x74
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80038c0:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80038c4:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80038c8:	9323      	str	r3, [sp, #140]	; 0x8c
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ca:	6a33      	ldr	r3, [r6, #32]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038cc:	48b6      	ldr	r0, [pc, #728]	; (8003ba8 <main+0xbd4>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	6233      	str	r3, [r6, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038d4:	4286      	cmp	r6, r0
  tmpccer = TIMx->CCER;
 80038d6:	6a33      	ldr	r3, [r6, #32]
  tmpcr2 =  TIMx->CR2;
 80038d8:	6871      	ldr	r1, [r6, #4]
  tmpccmrx = TIMx->CCMR1;
 80038da:	69b2      	ldr	r2, [r6, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038dc:	f000 841c 	beq.w	8004118 <main+0x1144>
  tmpccer &= ~TIM_CCER_CC1P;
 80038e0:	f023 0302 	bic.w	r3, r3, #2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e4:	6071      	str	r1, [r6, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038e6:	2100      	movs	r1, #0
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038e8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80038ec:	f042 0260 	orr.w	r2, r2, #96	; 0x60
  TIMx->CCMR1 = tmpccmrx;
 80038f0:	61b2      	str	r2, [r6, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80038f2:	6371      	str	r1, [r6, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f4:	6233      	str	r3, [r6, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038f6:	69b3      	ldr	r3, [r6, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f8:	2210      	movs	r2, #16
 80038fa:	f043 0308 	orr.w	r3, r3, #8
 80038fe:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003900:	69b3      	ldr	r3, [r6, #24]
 8003902:	a819      	add	r0, sp, #100	; 0x64
 8003904:	f023 0304 	bic.w	r3, r3, #4
 8003908:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800390a:	69b3      	ldr	r3, [r6, #24]
 800390c:	61b3      	str	r3, [r6, #24]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800390e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003912:	e9cd 1124 	strd	r1, r1, [sp, #144]	; 0x90
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003916:	9329      	str	r3, [sp, #164]	; 0xa4
  sBreakDeadTimeConfig.DeadTime = 0;
 8003918:	e9cd 1126 	strd	r1, r1, [sp, #152]	; 0x98
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800391c:	9128      	str	r1, [sp, #160]	; 0xa0
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800391e:	912b      	str	r1, [sp, #172]	; 0xac
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003920:	6473      	str	r3, [r6, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003922:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
 8003926:	f001 fbe3 	bl	80050f0 <memset>
  if(htim->Instance==TIM1)
 800392a:	4b9f      	ldr	r3, [pc, #636]	; (8003ba8 <main+0xbd4>)
 800392c:	429e      	cmp	r6, r3
 800392e:	d112      	bne.n	8003956 <main+0x982>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003930:	69ab      	ldr	r3, [r5, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003932:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003936:	f043 0304 	orr.w	r3, r3, #4
 800393a:	61ab      	str	r3, [r5, #24]
 800393c:	69ab      	ldr	r3, [r5, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800393e:	a919      	add	r1, sp, #100	; 0x64
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	9312      	str	r3, [sp, #72]	; 0x48
 8003946:	9b12      	ldr	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003948:	2302      	movs	r3, #2
 800394a:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394e:	4897      	ldr	r0, [pc, #604]	; (8003bac <main+0xbd8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003950:	931c      	str	r3, [sp, #112]	; 0x70
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003952:	f7fc fd85 	bl	8000460 <HAL_GPIO_Init>
 8003956:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800395a:	4d95      	ldr	r5, [pc, #596]	; (8003bb0 <main+0xbdc>)

void LCD_Init(void)
{	
	LCD_RST_R
	HAL_Delay(200);
 800395c:	20c8      	movs	r0, #200	; 0xc8
 800395e:	612b      	str	r3, [r5, #16]
 8003960:	f7fc fce2 	bl	8000328 <HAL_Delay>
    GPIOx->BSRR = GPIO_Pin;
 8003964:	f44f 6300 	mov.w	r3, #2048	; 0x800
	LCD_RST_S
	
  LCD_Send_Cmd(HX8357_SLPOUT);
 8003968:	2011      	movs	r0, #17
 800396a:	612b      	str	r3, [r5, #16]
 800396c:	f7fc fc5a 	bl	8000224 <LCD_Send_Cmd>
  HAL_Delay(120);
 8003970:	2078      	movs	r0, #120	; 0x78
 8003972:	f7fc fcd9 	bl	8000328 <HAL_Delay>
	LCD_Send_Cmd(HX8357_COLMOD);
 8003976:	203a      	movs	r0, #58	; 0x3a
 8003978:	f7fc fc54 	bl	8000224 <LCD_Send_Cmd>
	LCD_Send_Dat(0x55);
 800397c:	2055      	movs	r0, #85	; 0x55
 800397e:	f7fc fc67 	bl	8000250 <LCD_Send_Dat>
  HAL_Delay(5);
 8003982:	2005      	movs	r0, #5
 8003984:	f7fc fcd0 	bl	8000328 <HAL_Delay>
  LCD_Send_Cmd(HX8357_DISPON);
 8003988:	2029      	movs	r0, #41	; 0x29
 800398a:	f7fc fc4b 	bl	8000224 <LCD_Send_Cmd>
	LCD_Orientation(DEFAULT_ORIENTATION);
}

void LCD_Orientation(uint8_t orientation)
{
	LCD_Send_Cmd(HX8357_MADCTL);
 800398e:	2036      	movs	r0, #54	; 0x36
 8003990:	f7fc fc48 	bl	8000224 <LCD_Send_Cmd>
	switch (orientation)
	{
	case 0:
	if (BGR) LCD_Send_Dat(MADCTL_BGR);
 8003994:	2008      	movs	r0, #8
 8003996:	f7fc fc5b 	bl	8000250 <LCD_Send_Dat>
	LCD_Rect_Fill(0, 0, 480, 320, BLUE);
 800399a:	2100      	movs	r1, #0
 800399c:	23ff      	movs	r3, #255	; 0xff
 800399e:	4608      	mov	r0, r1
 80039a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80039aa:	f7fc fc65 	bl	8000278 <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 478, 318, BLACK);
 80039ae:	2101      	movs	r1, #1
 80039b0:	2300      	movs	r3, #0
 80039b2:	4608      	mov	r0, r1
 80039b4:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80039be:	f7fc fc5b 	bl	8000278 <LCD_Rect_Fill>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, RED);
 80039c2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80039c6:	217f      	movs	r1, #127	; 0x7f
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	2014      	movs	r0, #20
 80039cc:	4b79      	ldr	r3, [pc, #484]	; (8003bb4 <main+0xbe0>)
 80039ce:	4a7a      	ldr	r2, [pc, #488]	; (8003bb8 <main+0xbe4>)
 80039d0:	f7fe f84c 	bl	8001a6c <LCD_Font.constprop.0>
 80039d4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80039d8:	f240 581e 	movw	r8, #1310	; 0x51e
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, RED);
 80039dc:	4f77      	ldr	r7, [pc, #476]	; (8003bbc <main+0xbe8>)
	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80039de:	4628      	mov	r0, r5
 80039e0:	f7fd f8b6 	bl	8000b50 <AT24XX_Read>
 80039e4:	4606      	mov	r6, r0
 80039e6:	1c68      	adds	r0, r5, #1
 80039e8:	b280      	uxth	r0, r0
 80039ea:	f7fd f8b1 	bl	8000b50 <AT24XX_Read>
 80039ee:	3502      	adds	r5, #2
 80039f0:	b2ad      	uxth	r5, r5
	return (byteH << 8) | byteL;
 80039f2:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80039f6:	4545      	cmp	r5, r8
 80039f8:	f827 6b02 	strh.w	r6, [r7], #2
 80039fc:	d1ef      	bne.n	80039de <main+0xa0a>
 80039fe:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8003a02:	f640 1806 	movw	r8, #2310	; 0x906
	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8003a06:	4f6e      	ldr	r7, [pc, #440]	; (8003bc0 <main+0xbec>)
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8003a08:	4628      	mov	r0, r5
 8003a0a:	f7fd f8a1 	bl	8000b50 <AT24XX_Read>
 8003a0e:	4606      	mov	r6, r0
 8003a10:	1c68      	adds	r0, r5, #1
 8003a12:	b280      	uxth	r0, r0
 8003a14:	f7fd f89c 	bl	8000b50 <AT24XX_Read>
 8003a18:	3502      	adds	r5, #2
 8003a1a:	b2ad      	uxth	r5, r5
	return (byteH << 8) | byteL;
 8003a1c:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8003a20:	4545      	cmp	r5, r8
 8003a22:	f827 6b02 	strh.w	r6, [r7], #2
 8003a26:	d1ef      	bne.n	8003a08 <main+0xa34>
 8003a28:	f640 35b8 	movw	r5, #3000	; 0xbb8
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8003a2c:	f640 48ee 	movw	r8, #3310	; 0xcee
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8003a30:	4f64      	ldr	r7, [pc, #400]	; (8003bc4 <main+0xbf0>)
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8003a32:	4628      	mov	r0, r5
 8003a34:	f7fd f88c 	bl	8000b50 <AT24XX_Read>
 8003a38:	4606      	mov	r6, r0
 8003a3a:	1c68      	adds	r0, r5, #1
 8003a3c:	b280      	uxth	r0, r0
 8003a3e:	f7fd f887 	bl	8000b50 <AT24XX_Read>
 8003a42:	3502      	adds	r5, #2
 8003a44:	b2ad      	uxth	r5, r5
	return (byteH << 8) | byteL;
 8003a46:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8003a4a:	4545      	cmp	r5, r8
 8003a4c:	f827 6b02 	strh.w	r6, [r7], #2
 8003a50:	d1ef      	bne.n	8003a32 <main+0xa5e>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, BLACK);
 8003a52:	2300      	movs	r3, #0
 8003a54:	217f      	movs	r1, #127	; 0x7f
 8003a56:	2014      	movs	r0, #20
 8003a58:	4a57      	ldr	r2, [pc, #348]	; (8003bb8 <main+0xbe4>)
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	4b55      	ldr	r3, [pc, #340]	; (8003bb4 <main+0xbe0>)
 8003a5e:	f7fe f805 	bl	8001a6c <LCD_Font.constprop.0>
	BME280_Init();
 8003a62:	f7fd fdcd 	bl	8001600 <BME280_Init>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a66:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d119      	bne.n	8003aa2 <main+0xace>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a6e:	2302      	movs	r3, #2
 8003a70:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a74:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a76:	6a1a      	ldr	r2, [r3, #32]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a7e:	6a1a      	ldr	r2, [r3, #32]
 8003a80:	f042 0201 	orr.w	r2, r2, #1
 8003a84:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a86:	4a48      	ldr	r2, [pc, #288]	; (8003ba8 <main+0xbd4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	f041 82b8 	bne.w	8004ffe <main+0x202a>
    __HAL_TIM_MOE_ENABLE(htim);
 8003a8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a94:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9c:	2a06      	cmp	r2, #6
 8003a9e:	f041 82bb 	bne.w	8005018 <main+0x2044>
	uint8_t uartTransmitDMA[] = "UART DMA OK\r\n";
 8003aa2:	4b49      	ldr	r3, [pc, #292]	; (8003bc8 <main+0xbf4>)
 8003aa4:	aa1d      	add	r2, sp, #116	; 0x74
 8003aa6:	f103 0608 	add.w	r6, r3, #8
 8003aaa:	4615      	mov	r5, r2
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	6859      	ldr	r1, [r3, #4]
 8003ab0:	3308      	adds	r3, #8
 8003ab2:	c503      	stmia	r5!, {r0, r1}
 8003ab4:	42b3      	cmp	r3, r6
 8003ab6:	462a      	mov	r2, r5
 8003ab8:	d1f7      	bne.n	8003aaa <main+0xad6>
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	889b      	ldrh	r3, [r3, #4]
 8003abe:	6028      	str	r0, [r5, #0]
 8003ac0:	80ab      	strh	r3, [r5, #4]
  if (huart->gState == HAL_UART_STATE_READY)
 8003ac2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d126      	bne.n	8003b18 <main+0xb44>
    __HAL_LOCK(huart);
 8003aca:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d022      	beq.n	8003b18 <main+0xb44>
 8003ad2:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad4:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003ad6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ada:	2221      	movs	r2, #33	; 0x21
    huart->TxXferSize = Size;
 8003adc:	230e      	movs	r3, #14
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003ade:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    huart->TxXferCount = Size;
 8003ae0:	8563      	strh	r3, [r4, #42]	; 0x2a
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae2:	6465      	str	r5, [r4, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ae4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003ae8:	4a38      	ldr	r2, [pc, #224]	; (8003bcc <main+0xbf8>)
    huart->pTxBuffPtr = pData;
 8003aea:	a91d      	add	r1, sp, #116	; 0x74
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003aec:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003aee:	4a38      	ldr	r2, [pc, #224]	; (8003bd0 <main+0xbfc>)
    huart->TxXferSize = Size;
 8003af0:	8523      	strh	r3, [r4, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003af2:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003af4:	4a37      	ldr	r2, [pc, #220]	; (8003bd4 <main+0xc00>)
    huart->pTxBuffPtr = pData;
 8003af6:	6261      	str	r1, [r4, #36]	; 0x24
    huart->hdmatx->XferAbortCallback = NULL;
 8003af8:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003afc:	6862      	ldr	r2, [r4, #4]
 8003afe:	3204      	adds	r2, #4
 8003b00:	f7fd fe84 	bl	800180c <HAL_DMA_Start_IT.isra.0>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003b04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b08:	6863      	ldr	r3, [r4, #4]
 8003b0a:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8003b0c:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b16:	615a      	str	r2, [r3, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b18:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d10c      	bne.n	8003b3a <main+0xb66>
    __HAL_LOCK(huart);
 8003b20:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d008      	beq.n	8003b3a <main+0xb66>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2e:	2300      	movs	r3, #0
    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003b30:	2110      	movs	r1, #16
 8003b32:	4829      	ldr	r0, [pc, #164]	; (8003bd8 <main+0xc04>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b34:	6363      	str	r3, [r4, #52]	; 0x34
    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003b36:	f7fd fea2 	bl	800187e <UART_Start_Receive_DMA.constprop.0.isra.0>
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8003b3a:	2300      	movs	r3, #0
	for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8003b3c:	4a1a      	ldr	r2, [pc, #104]	; (8003ba8 <main+0xbd4>)
 8003b3e:	6353      	str	r3, [r2, #52]	; 0x34
 8003b40:	3301      	adds	r3, #1
 8003b42:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003b46:	d1fa      	bne.n	8003b3e <main+0xb6a>
					temperatureRemote = temperatureRemote / 10;
 8003b48:	f04f 0a00 	mov.w	sl, #0
 8003b4c:	f8df b08c 	ldr.w	fp, [pc, #140]	; 8003bdc <main+0xc08>

uint8_t DS3231_getSec(void) {
	DS3231_Update();
    return bcdToDec(rtcBuffer[0]);
 8003b50:	4c23      	ldr	r4, [pc, #140]	; (8003be0 <main+0xc0c>)
	DS3231_Update();
 8003b52:	f7fd fe05 	bl	8001760 <DS3231_Update>
    return bcdToDec(rtcBuffer[0]);
 8003b56:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
		if (rtcSecLast != rtcSec) {
 8003b5a:	4e22      	ldr	r6, [pc, #136]	; (8003be4 <main+0xc10>)
    return ((val / 16 * 10) + (val % 16));
 8003b5c:	0915      	lsrs	r5, r2, #4
 8003b5e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8003b62:	f002 050f 	and.w	r5, r2, #15
 8003b66:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8003b6a:	7a33      	ldrb	r3, [r6, #8]
 8003b6c:	b2ed      	uxtb	r5, r5
 8003b6e:	42ab      	cmp	r3, r5
		rtcSec = DS3231_getSec();
 8003b70:	f884 55ae 	strb.w	r5, [r4, #1454]	; 0x5ae
		if (rtcSecLast != rtcSec) {
 8003b74:	d0ec      	beq.n	8003b50 <main+0xb7c>
}

uint8_t DS3231_getMin(void) {
	DS3231_Update();
 8003b76:	f7fd fdf3 	bl	8001760 <DS3231_Update>
    return bcdToDec(rtcBuffer[1]);
 8003b7a:	f894 3109 	ldrb.w	r3, [r4, #265]	; 0x109
			LCD_Circle(170, 35, 8, 0, 1, ORANGE);
 8003b7e:	2108      	movs	r1, #8
    return ((val / 16 * 10) + (val % 16));
 8003b80:	091f      	lsrs	r7, r3, #4
 8003b82:	eb07 0287 	add.w	r2, r7, r7, lsl #2
 8003b86:	f003 070f 	and.w	r7, r3, #15
 8003b8a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8003b8e:	2023      	movs	r0, #35	; 0x23
 8003b90:	2200      	movs	r2, #0
 8003b92:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <main+0xc14>)
 8003b94:	b2ff      	uxtb	r7, r7
			rtcMin = DS3231_getMin();
 8003b96:	f884 75af 	strb.w	r7, [r4, #1455]	; 0x5af
			LCD_Circle(170, 35, 8, 0, 1, ORANGE);
 8003b9a:	f7fc fe0f 	bl	80007bc <LCD_Circle.constprop.0>
			LCD_Circle(170, 75, 8, 0, 1, ORANGE);
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	e024      	b.n	8003bec <main+0xc18>
 8003ba2:	bf00      	nop
 8003ba4:	40000400 	.word	0x40000400
 8003ba8:	40012c00 	.word	0x40012c00
 8003bac:	40010800 	.word	0x40010800
 8003bb0:	40010c00 	.word	0x40010c00
 8003bb4:	08009ac8 	.word	0x08009ac8
 8003bb8:	0801b2ab 	.word	0x0801b2ab
 8003bbc:	20000414 	.word	0x20000414
 8003bc0:	2000054a 	.word	0x2000054a
 8003bc4:	20000680 	.word	0x20000680
 8003bc8:	0801b305 	.word	0x0801b305
 8003bcc:	08000615 	.word	0x08000615
 8003bd0:	08000637 	.word	0x08000637
 8003bd4:	0800066b 	.word	0x0800066b
 8003bd8:	20000335 	.word	0x20000335
 8003bdc:	40240000 	.word	0x40240000
 8003be0:	20000208 	.word	0x20000208
 8003be4:	20000000 	.word	0x20000000
 8003be8:	00ffa500 	.word	0x00ffa500
 8003bec:	2108      	movs	r1, #8
 8003bee:	204b      	movs	r0, #75	; 0x4b
 8003bf0:	4be1      	ldr	r3, [pc, #900]	; (8003f78 <main+0xfa4>)
 8003bf2:	f7fc fde3 	bl	80007bc <LCD_Circle.constprop.0>
			if (rtcSec % 2 != 0) {
 8003bf6:	f015 0501 	ands.w	r5, r5, #1
 8003bfa:	f000 8293 	beq.w	8004124 <main+0x1150>
				LCD_Circle(170, 35, 7, 1, 1, ORANGE);
 8003bfe:	2201      	movs	r2, #1
 8003c00:	2107      	movs	r1, #7
 8003c02:	2023      	movs	r0, #35	; 0x23
 8003c04:	4bdc      	ldr	r3, [pc, #880]	; (8003f78 <main+0xfa4>)
 8003c06:	f7fc fdd9 	bl	80007bc <LCD_Circle.constprop.0>
				LCD_Circle(170, 75, 7, 1, 1, ORANGE);
 8003c0a:	4bdb      	ldr	r3, [pc, #876]	; (8003f78 <main+0xfa4>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	2107      	movs	r1, #7
 8003c10:	204b      	movs	r0, #75	; 0x4b
 8003c12:	f7fc fdd3 	bl	80007bc <LCD_Circle.constprop.0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c16:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    GPIOx->BSRR = GPIO_Pin;
 8003c1a:	4ad8      	ldr	r2, [pc, #864]	; (8003f7c <main+0xfa8>)
 8003c1c:	6113      	str	r3, [r2, #16]
			if (rtcMinLast != rtcMin) {
 8003c1e:	7a75      	ldrb	r5, [r6, #9]
 8003c20:	42bd      	cmp	r5, r7
 8003c22:	f000 85be 	beq.w	80047a2 <main+0x17ce>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8003c26:	2700      	movs	r7, #0
}

uint8_t DS3231_getHrs(void) {
	DS3231_Update();
 8003c28:	f7fd fd9a 	bl	8001760 <DS3231_Update>
    return bcdToDec(rtcBuffer[2]);
 8003c2c:	f894 310a 	ldrb.w	r3, [r4, #266]	; 0x10a
				sprintf(clockPrint, "%02d", rtcMinLast);
 8003c30:	49d3      	ldr	r1, [pc, #844]	; (8003f80 <main+0xfac>)
    return ((val / 16 * 10) + (val % 16));
 8003c32:	091a      	lsrs	r2, r3, #4
 8003c34:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003c40:	462a      	mov	r2, r5
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8003c42:	4dd0      	ldr	r5, [pc, #832]	; (8003f84 <main+0xfb0>)
				sprintf(clockPrint, "%02d", rtcMinLast);
 8003c44:	a819      	add	r0, sp, #100	; 0x64
				rtcHrs = DS3231_getHrs();
 8003c46:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8003c4a:	f8df 832c 	ldr.w	r8, [pc, #812]	; 8003f78 <main+0xfa4>
				sprintf(clockPrint, "%02d", rtcMinLast);
 8003c4e:	f002 f8c9 	bl	8005de4 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8003c52:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8003c56:	2164      	movs	r1, #100	; 0x64
 8003c58:	20b2      	movs	r0, #178	; 0xb2
 8003c5a:	aa19      	add	r2, sp, #100	; 0x64
 8003c5c:	9700      	str	r7, [sp, #0]
 8003c5e:	f7fd ff05 	bl	8001a6c <LCD_Font.constprop.0>
				sprintf(clockPrint, "%02d", rtcMin);
 8003c62:	f894 25af 	ldrb.w	r2, [r4, #1455]	; 0x5af
 8003c66:	49c6      	ldr	r1, [pc, #792]	; (8003f80 <main+0xfac>)
 8003c68:	a819      	add	r0, sp, #100	; 0x64
 8003c6a:	f002 f8bb 	bl	8005de4 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8003c6e:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8003c72:	2164      	movs	r1, #100	; 0x64
 8003c74:	20b2      	movs	r0, #178	; 0xb2
 8003c76:	f8cd 8000 	str.w	r8, [sp]
 8003c7a:	aa19      	add	r2, sp, #100	; 0x64
 8003c7c:	f7fd fef6 	bl	8001a6c <LCD_Font.constprop.0>
				if (rtcHrsLast != rtcHrs) {
 8003c80:	7ab6      	ldrb	r6, [r6, #10]
 8003c82:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
 8003c86:	42b3      	cmp	r3, r6
 8003c88:	f000 80db 	beq.w	8003e42 <main+0xe6e>
}

uint8_t DS3231_getDay(void) {
	DS3231_Update();
 8003c8c:	f7fd fd68 	bl	8001760 <DS3231_Update>
    return bcdToDec(rtcBuffer[3]);
 8003c90:	f894 310b 	ldrb.w	r3, [r4, #267]	; 0x10b
    return ((val / 16 * 10) + (val % 16));
 8003c94:	091a      	lsrs	r2, r3, #4
 8003c96:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					rtcDay = DS3231_getDay();
 8003ca2:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
}

uint8_t DS3231_getDate(void) {
	DS3231_Update();
 8003ca6:	f7fd fd5b 	bl	8001760 <DS3231_Update>
    return bcdToDec(rtcBuffer[4]);
 8003caa:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
    return ((val / 16 * 10) + (val % 16));
 8003cae:	091a      	lsrs	r2, r3, #4
 8003cb0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					rtcDate = DS3231_getDate();
 8003cbc:	f884 35b2 	strb.w	r3, [r4, #1458]	; 0x5b2
}

uint8_t DS3231_getMonth(void) {
	DS3231_Update();
 8003cc0:	f7fd fd4e 	bl	8001760 <DS3231_Update>
    return bcdToDec(rtcBuffer[5]);
 8003cc4:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
    return ((val / 16 * 10) + (val % 16));
 8003cc8:	091a      	lsrs	r2, r3, #4
 8003cca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					rtcMonth = DS3231_getMonth();
 8003cd6:	f884 35b3 	strb.w	r3, [r4, #1459]	; 0x5b3
}

uint8_t DS3231_getYear(void) {
	DS3231_Update();
 8003cda:	f7fd fd41 	bl	8001760 <DS3231_Update>
    return bcdToDec(rtcBuffer[6]);
 8003cde:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
					sprintf(clockPrint, "%02d", rtcHrsLast);
 8003ce2:	49a7      	ldr	r1, [pc, #668]	; (8003f80 <main+0xfac>)
    return ((val / 16 * 10) + (val % 16));
 8003ce4:	091a      	lsrs	r2, r3, #4
 8003ce6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003cf2:	a819      	add	r0, sp, #100	; 0x64
 8003cf4:	4632      	mov	r2, r6
					rtcYear = DS3231_getYear();
 8003cf6:	f884 35b4 	strb.w	r3, [r4, #1460]	; 0x5b4
					sprintf(clockPrint, "%02d", rtcHrsLast);
 8003cfa:	f002 f873 	bl	8005de4 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8003cfe:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8003d02:	2164      	movs	r1, #100	; 0x64
 8003d04:	4638      	mov	r0, r7
 8003d06:	aa19      	add	r2, sp, #100	; 0x64
 8003d08:	9700      	str	r7, [sp, #0]
 8003d0a:	f7fd feaf 	bl	8001a6c <LCD_Font.constprop.0>
					sprintf(clockPrint, "%02d", rtcHrs);
 8003d0e:	f894 25b0 	ldrb.w	r2, [r4, #1456]	; 0x5b0
 8003d12:	499b      	ldr	r1, [pc, #620]	; (8003f80 <main+0xfac>)
 8003d14:	a819      	add	r0, sp, #100	; 0x64
 8003d16:	f002 f865 	bl	8005de4 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8003d1a:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8003d1e:	2164      	movs	r1, #100	; 0x64
 8003d20:	4638      	mov	r0, r7
 8003d22:	f8cd 8000 	str.w	r8, [sp]
 8003d26:	aa19      	add	r2, sp, #100	; 0x64
 8003d28:	f7fd fea0 	bl	8001a6c <LCD_Font.constprop.0>
					if (rtcDayLast != rtcDay) {
 8003d2c:	f894 65b1 	ldrb.w	r6, [r4, #1457]	; 0x5b1
 8003d30:	f894 35b5 	ldrb.w	r3, [r4, #1461]	; 0x5b5
 8003d34:	42b3      	cmp	r3, r6
 8003d36:	d077      	beq.n	8003e28 <main+0xe54>
						LCD_Font(5, 140, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 8003d38:	f04f 0807 	mov.w	r8, #7
 8003d3c:	1d73      	adds	r3, r6, #5
 8003d3e:	fbb3 f2f8 	udiv	r2, r3, r8
 8003d42:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8003d4c:	218c      	movs	r1, #140	; 0x8c
 8003d4e:	2005      	movs	r0, #5
 8003d50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d52:	f105 0318 	add.w	r3, r5, #24
						LCD_Font(5, 140, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 8003d56:	3606      	adds	r6, #6
						LCD_Font(5, 140, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 8003d58:	9700      	str	r7, [sp, #0]
 8003d5a:	f7fd fe87 	bl	8001a6c <LCD_Font.constprop.0>
						LCD_Font(5, 140, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 8003d5e:	fbb6 f8f8 	udiv	r8, r6, r8
 8003d62:	23ff      	movs	r3, #255	; 0xff
 8003d64:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8003d68:	eba6 0608 	sub.w	r6, r6, r8
						LCD_Font(150, 140, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 8003d6c:	f04f 080c 	mov.w	r8, #12
						LCD_Font(5, 140, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 8003d70:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8003d74:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8003d76:	218c      	movs	r1, #140	; 0x8c
 8003d78:	2005      	movs	r0, #5
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	f105 0318 	add.w	r3, r5, #24
 8003d80:	f7fd fe74 	bl	8001a6c <LCD_Font.constprop.0>
						LCD_Font(150, 140, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 8003d84:	f894 65b3 	ldrb.w	r6, [r4, #1459]	; 0x5b3
 8003d88:	218c      	movs	r1, #140	; 0x8c
 8003d8a:	f106 030a 	add.w	r3, r6, #10
 8003d8e:	fbb3 f2f8 	udiv	r2, r3, r8
 8003d92:	fb08 3312 	mls	r3, r8, r2, r3
 8003d96:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8003d9a:	2096      	movs	r0, #150	; 0x96
 8003d9c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003d9e:	f105 0318 	add.w	r3, r5, #24
						LCD_Font(150, 140, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8003da2:	360b      	adds	r6, #11
						LCD_Font(150, 140, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 8003da4:	9700      	str	r7, [sp, #0]
 8003da6:	f7fd fe61 	bl	8001a6c <LCD_Font.constprop.0>
						LCD_Font(150, 140, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8003daa:	fbb6 f3f8 	udiv	r3, r6, r8
 8003dae:	fb08 6613 	mls	r6, r8, r3, r6
 8003db2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003db6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8003dba:	218c      	movs	r1, #140	; 0x8c
 8003dbc:	2096      	movs	r0, #150	; 0x96
 8003dbe:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
 8003dc2:	f105 0318 	add.w	r3, r5, #24
 8003dc6:	9600      	str	r6, [sp, #0]
 8003dc8:	f7fd fe50 	bl	8001a6c <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 8003dcc:	f894 35b8 	ldrb.w	r3, [r4, #1464]	; 0x5b8
 8003dd0:	f894 25b7 	ldrb.w	r2, [r4, #1463]	; 0x5b7
 8003dd4:	496c      	ldr	r1, [pc, #432]	; (8003f88 <main+0xfb4>)
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	a819      	add	r0, sp, #100	; 0x64
 8003dda:	f894 35b6 	ldrb.w	r3, [r4, #1462]	; 0x5b6
 8003dde:	f002 f801 	bl	8005de4 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8003de2:	218c      	movs	r1, #140	; 0x8c
 8003de4:	20fa      	movs	r0, #250	; 0xfa
 8003de6:	f105 0318 	add.w	r3, r5, #24
 8003dea:	aa19      	add	r2, sp, #100	; 0x64
 8003dec:	9700      	str	r7, [sp, #0]
 8003dee:	f7fd fe3d 	bl	8001a6c <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear);
 8003df2:	f894 35b4 	ldrb.w	r3, [r4, #1460]	; 0x5b4
 8003df6:	f894 25b2 	ldrb.w	r2, [r4, #1458]	; 0x5b2
 8003dfa:	4963      	ldr	r1, [pc, #396]	; (8003f88 <main+0xfb4>)
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	a819      	add	r0, sp, #100	; 0x64
 8003e00:	f894 35b3 	ldrb.w	r3, [r4, #1459]	; 0x5b3
 8003e04:	f001 ffee 	bl	8005de4 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 8003e08:	f105 0318 	add.w	r3, r5, #24
 8003e0c:	218c      	movs	r1, #140	; 0x8c
 8003e0e:	20fa      	movs	r0, #250	; 0xfa
 8003e10:	9600      	str	r6, [sp, #0]
 8003e12:	aa19      	add	r2, sp, #100	; 0x64
 8003e14:	f7fd fe2a 	bl	8001a6c <LCD_Font.constprop.0>
						rtcDayLast = rtcDay;
 8003e18:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
 8003e1c:	f884 35b5 	strb.w	r3, [r4, #1461]	; 0x5b5
						rtcDateLast = rtcDate;
 8003e20:	f894 35b2 	ldrb.w	r3, [r4, #1458]	; 0x5b2
 8003e24:	f884 35b7 	strb.w	r3, [r4, #1463]	; 0x5b7
					rtcMonthLast = rtcMonth;
 8003e28:	4b58      	ldr	r3, [pc, #352]	; (8003f8c <main+0xfb8>)
 8003e2a:	f893 25b3 	ldrb.w	r2, [r3, #1459]	; 0x5b3
 8003e2e:	f883 25b6 	strb.w	r2, [r3, #1462]	; 0x5b6
					rtcYearLast = rtcYear;
 8003e32:	f893 25b4 	ldrb.w	r2, [r3, #1460]	; 0x5b4
 8003e36:	f883 25b8 	strb.w	r2, [r3, #1464]	; 0x5b8
					rtcHrsLast = rtcHrs;
 8003e3a:	f893 25b0 	ldrb.w	r2, [r3, #1456]	; 0x5b0
 8003e3e:	4b54      	ldr	r3, [pc, #336]	; (8003f90 <main+0xfbc>)
 8003e40:	729a      	strb	r2, [r3, #10]
				rtcMinLast = rtcMin;
 8003e42:	4c52      	ldr	r4, [pc, #328]	; (8003f8c <main+0xfb8>)
 8003e44:	4b52      	ldr	r3, [pc, #328]	; (8003f90 <main+0xfbc>)
 8003e46:	f894 25af 	ldrb.w	r2, [r4, #1455]	; 0x5af
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8003e4a:	20ec      	movs	r0, #236	; 0xec
 8003e4c:	725a      	strb	r2, [r3, #9]
    cmd[0] = 0xFA; // temp_msb
 8003e4e:	23fa      	movs	r3, #250	; 0xfa
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8003e50:	2201      	movs	r2, #1
 8003e52:	a924      	add	r1, sp, #144	; 0x90
    cmd[0] = 0xFA; // temp_msb
 8003e54:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8003e58:	f7fd fafb 	bl	8001452 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8003e5c:	f10d 0191 	add.w	r1, sp, #145	; 0x91
 8003e60:	2203      	movs	r2, #3
 8003e62:	20ec      	movs	r0, #236	; 0xec
 8003e64:	f7fd f93a 	bl	80010dc <HAL_I2C_Master_Receive.constprop.0.isra.0>
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8003e68:	f89d 3092 	ldrb.w	r3, [sp, #146]	; 0x92
 8003e6c:	f89d 2091 	ldrb.w	r2, [sp, #145]	; 0x91
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8003e76:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
				humidity = BME280_getHumidity(-1);
 8003e7a:	f504 68ba 	add.w	r8, r4, #1488	; 0x5d0
 8003e7e:	ea43 1712 	orr.w	r7, r3, r2, lsr #4
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8003e82:	f8b4 20e4 	ldrh.w	r2, [r4, #228]	; 0xe4
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8003e86:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8003e8a:	0052      	lsls	r2, r2, #1
 8003e8c:	ebc2 02d7 	rsb	r2, r2, r7, lsr #3
 8003e90:	f9b4 70e6 	ldrsh.w	r7, [r4, #230]	; 0xe6
 8003e94:	437a      	muls	r2, r7
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8003e96:	fb03 f703 	mul.w	r7, r3, r3
 8003e9a:	f9b4 30e8 	ldrsh.w	r3, [r4, #232]	; 0xe8
 8003e9e:	0b3f      	lsrs	r7, r7, #12
 8003ea0:	435f      	muls	r7, r3
 8003ea2:	0bbf      	lsrs	r7, r7, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8003ea4:	eb07 27d2 	add.w	r7, r7, r2, lsr #11
    temp = (temp * 5 + 128) >> 8;
 8003ea8:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 8003eac:	3080      	adds	r0, #128	; 0x80
    tempf = (float) temp;
 8003eae:	1200      	asrs	r0, r0, #8
    t_fine = temp;
 8003eb0:	f8c4 75bc 	str.w	r7, [r4, #1468]	; 0x5bc
    tempf = (float) temp;
 8003eb4:	f7fe feca 	bl	8002c4c <__aeabi_i2f>
    return round_nth((tempf / 100.0f), n);
 8003eb8:	4936      	ldr	r1, [pc, #216]	; (8003f94 <main+0xfc0>)
 8003eba:	f7fe ffcf 	bl	8002e5c <__aeabi_fdiv>
 8003ebe:	f7fd fe69 	bl	8001b94 <round_nth.constprop.0>
 8003ec2:	4606      	mov	r6, r0
				temperature = BME280_getTemperature(-1);
 8003ec4:	f7fe f9ba 	bl	800223c <__aeabi_f2d>
 8003ec8:	460a      	mov	r2, r1
 8003eca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ece:	4601      	mov	r1, r0
 8003ed0:	f504 63b8 	add.w	r3, r4, #1472	; 0x5c0
 8003ed4:	e9c3 1200 	strd	r1, r2, [r3]
    cmd[0] = 0xFD; // hum_msb
 8003ed8:	23fd      	movs	r3, #253	; 0xfd
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8003eda:	2201      	movs	r2, #1
 8003edc:	20ec      	movs	r0, #236	; 0xec
 8003ede:	a924      	add	r1, sp, #144	; 0x90
    cmd[0] = 0xFD; // hum_msb
 8003ee0:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8003ee4:	f7fd fab5 	bl	8001452 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 8003ee8:	2202      	movs	r2, #2
 8003eea:	20ec      	movs	r0, #236	; 0xec
 8003eec:	f10d 0191 	add.w	r1, sp, #145	; 0x91
 8003ef0:	f7fd f8f4 	bl	80010dc <HAL_I2C_Master_Receive.constprop.0.isra.0>
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8003ef4:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    v_x1 = t_fine - 76800;
 8003ef8:	f5a7 3396 	sub.w	r3, r7, #76800	; 0x12c00
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8003efc:	f9b4 2106 	ldrsh.w	r2, [r4, #262]	; 0x106
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8003f00:	4358      	muls	r0, r3
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8003f02:	435a      	muls	r2, r3
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8003f04:	12c0      	asrs	r0, r0, #11
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8003f06:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8003f08:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8003f0c:	4350      	muls	r0, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 8003f0e:	f9b4 20fe 	ldrsh.w	r2, [r4, #254]	; 0xfe
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8003f12:	1280      	asrs	r0, r0, #10
 8003f14:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
 8003f18:	4350      	muls	r0, r2
    hum_raw = (cmd[1] << 8) | cmd[2];
 8003f1a:	f8bd 2091 	ldrh.w	r2, [sp, #145]	; 0x91
                                            (int32_t) dig_H2 + 8192) >> 14));
 8003f1e:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
    hum_raw = (cmd[1] << 8) | cmd[2];
 8003f22:	ba52      	rev16	r2, r2
 8003f24:	b291      	uxth	r1, r2
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8003f26:	f9b4 2102 	ldrsh.w	r2, [r4, #258]	; 0x102
                                            (int32_t) dig_H2 + 8192) >> 14));
 8003f2a:	1380      	asrs	r0, r0, #14
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8003f2c:	0512      	lsls	r2, r2, #20
 8003f2e:	ebc2 3281 	rsb	r2, r2, r1, lsl #14
 8003f32:	f9b4 1104 	ldrsh.w	r1, [r4, #260]	; 0x104
 8003f36:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8003f3a:	fb03 2311 	mls	r3, r3, r1, r2
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8003f3e:	0bdb      	lsrs	r3, r3, #15
 8003f40:	4358      	muls	r0, r3
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8003f42:	13c3      	asrs	r3, r0, #15
 8003f44:	435b      	muls	r3, r3
 8003f46:	f8b4 20fc 	ldrh.w	r2, [r4, #252]	; 0xfc
 8003f4a:	11db      	asrs	r3, r3, #7
 8003f4c:	4353      	muls	r3, r2
 8003f4e:	eba0 1023 	sub.w	r0, r0, r3, asr #4
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 8003f52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 8003f56:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 8003f5a:	bfa8      	it	ge
 8003f5c:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
    humf = (float) (v_x1 >> 12);
 8003f60:	1300      	asrs	r0, r0, #12
 8003f62:	f7fe fe73 	bl	8002c4c <__aeabi_i2f>
    return round_nth((humf / 1024.0f), n);
 8003f66:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 8003f6a:	f7fe fec3 	bl	8002cf4 <__aeabi_fmul>
 8003f6e:	f7fd fe11 	bl	8001b94 <round_nth.constprop.0>
 8003f72:	4605      	mov	r5, r0
 8003f74:	e010      	b.n	8003f98 <main+0xfc4>
 8003f76:	bf00      	nop
 8003f78:	00ffa500 	.word	0x00ffa500
 8003f7c:	40011000 	.word	0x40011000
 8003f80:	0801b2c5 	.word	0x0801b2c5
 8003f84:	08009ab0 	.word	0x08009ab0
 8003f88:	0801b2bb 	.word	0x0801b2bb
 8003f8c:	20000208 	.word	0x20000208
 8003f90:	20000000 	.word	0x20000000
 8003f94:	42c80000 	.word	0x42c80000
				humidity = BME280_getHumidity(-1);
 8003f98:	f7fe f950 	bl	800223c <__aeabi_f2d>
    cmd[0] = 0xF7; // press_msb
 8003f9c:	23f7      	movs	r3, #247	; 0xf7
 8003f9e:	e948 0102 	strd	r0, r1, [r8, #-8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	20ec      	movs	r0, #236	; 0xec
 8003fa6:	a924      	add	r1, sp, #144	; 0x90
    var1 = (t_fine >> 1) - 64000;
 8003fa8:	107f      	asrs	r7, r7, #1
    cmd[0] = 0xF7; // press_msb
 8003faa:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
    var1 = (t_fine >> 1) - 64000;
 8003fae:	f5a7 477a 	sub.w	r7, r7, #64000	; 0xfa00
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8003fb2:	f7fd fa4e 	bl	8001452 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	20ec      	movs	r0, #236	; 0xec
 8003fba:	f10d 0191 	add.w	r1, sp, #145	; 0x91
 8003fbe:	f7fd f88d 	bl	80010dc <HAL_I2C_Master_Receive.constprop.0.isra.0>
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8003fc2:	10bb      	asrs	r3, r7, #2
 8003fc4:	435b      	muls	r3, r3
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 8003fc6:	f9b4 00ee 	ldrsh.w	r0, [r4, #238]	; 0xee
 8003fca:	135a      	asrs	r2, r3, #13
 8003fcc:	4342      	muls	r2, r0
 8003fce:	f9b4 00ec 	ldrsh.w	r0, [r4, #236]	; 0xec
 8003fd2:	4378      	muls	r0, r7
 8003fd4:	1040      	asrs	r0, r0, #1
 8003fd6:	eb00 00e2 	add.w	r0, r0, r2, asr #3
 8003fda:	1480      	asrs	r0, r0, #18
    var1 = ((32768 + var1) * dig_P1) >> 15;
 8003fdc:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
 8003fe0:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8003fe4:	4350      	muls	r0, r2
    if (var1 == 0) {
 8003fe6:	13c2      	asrs	r2, r0, #15
 8003fe8:	f000 80ab 	beq.w	8004142 <main+0x116e>
    var2 = var2 + ((var1 * dig_P5) << 1);
 8003fec:	f9b4 10f2 	ldrsh.w	r1, [r4, #242]	; 0xf2
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8003ff0:	f9b4 00f4 	ldrsh.w	r0, [r4, #244]	; 0xf4
    var2 = var2 + ((var1 * dig_P5) << 1);
 8003ff4:	434f      	muls	r7, r1
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8003ff6:	12db      	asrs	r3, r3, #11
    var2 = var2 + ((var1 * dig_P5) << 1);
 8003ff8:	007f      	lsls	r7, r7, #1
 8003ffa:	fb00 7703 	mla	r7, r0, r3, r7
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8003ffe:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
 8004002:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
 8004006:	091b      	lsrs	r3, r3, #4
 8004008:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800400c:	f89d 0091 	ldrb.w	r0, [sp, #145]	; 0x91
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8004010:	f9b4 10f8 	ldrsh.w	r1, [r4, #248]	; 0xf8
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8004014:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8004018:	f9b4 00f0 	ldrsh.w	r0, [r4, #240]	; 0xf0
 800401c:	0400      	lsls	r0, r0, #16
 800401e:	eb00 07a7 	add.w	r7, r0, r7, asr #2
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 8004022:	4874      	ldr	r0, [pc, #464]	; (80041f4 <main+0x1220>)
 8004024:	eb03 3327 	add.w	r3, r3, r7, asr #12
 8004028:	4343      	muls	r3, r0
 800402a:	f103 4043 	add.w	r0, r3, #3271557120	; 0xc3000000
 800402e:	f500 00a0 	add.w	r0, r0, #5242880	; 0x500000
    if (press < 0x80000000) {
 8004032:	2800      	cmp	r0, #0
        press = (press / var1) * 2;
 8004034:	bfb3      	iteet	lt
 8004036:	fbb0 f0f2 	udivlt	r0, r0, r2
        press = (press << 1) / var1;
 800403a:	0040      	lslge	r0, r0, #1
 800403c:	fbb0 f0f2 	udivge	r0, r0, r2
        press = (press / var1) * 2;
 8004040:	0040      	lsllt	r0, r0, #1
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8004042:	08c3      	lsrs	r3, r0, #3
 8004044:	435b      	muls	r3, r3
 8004046:	f9b4 20fa 	ldrsh.w	r2, [r4, #250]	; 0xfa
 800404a:	0b5b      	lsrs	r3, r3, #13
 800404c:	435a      	muls	r2, r3
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800404e:	0883      	lsrs	r3, r0, #2
 8004050:	434b      	muls	r3, r1
 8004052:	135b      	asrs	r3, r3, #13
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8004054:	eb03 3322 	add.w	r3, r3, r2, asr #12
 8004058:	f9b4 20f6 	ldrsh.w	r2, [r4, #246]	; 0xf6
 800405c:	4413      	add	r3, r2
    pressf = (float) press;
 800405e:	eb00 1023 	add.w	r0, r0, r3, asr #4
 8004062:	f7fe fdef 	bl	8002c44 <__aeabi_ui2f>
    return (pressf / 100.0f);
 8004066:	4964      	ldr	r1, [pc, #400]	; (80041f8 <main+0x1224>)
 8004068:	f7fe fef8 	bl	8002e5c <__aeabi_fdiv>
				pressure = (uint16_t)BME280_getPressure();
 800406c:	f7fe ff92 	bl	8002f94 <__aeabi_f2uiz>
				if (pressure > 900 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8004070:	f46f 7161 	mvn.w	r1, #900	; 0x384
				pressure = (uint16_t)BME280_getPressure();
 8004074:	b280      	uxth	r0, r0
 8004076:	f8a4 05d0 	strh.w	r0, [r4, #1488]	; 0x5d0
				if (pressure > 900 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 800407a:	4408      	add	r0, r1
 800407c:	28c6      	cmp	r0, #198	; 0xc6
 800407e:	f200 8390 	bhi.w	80047a2 <main+0x17ce>
 8004082:	4630      	mov	r0, r6
 8004084:	495d      	ldr	r1, [pc, #372]	; (80041fc <main+0x1228>)
 8004086:	f7fe fcc7 	bl	8002a18 <__aeabi_fcmplt>
 800408a:	2800      	cmp	r0, #0
 800408c:	f000 8389 	beq.w	80047a2 <main+0x17ce>
 8004090:	4630      	mov	r0, r6
 8004092:	495b      	ldr	r1, [pc, #364]	; (8004200 <main+0x122c>)
 8004094:	f7fe fcde 	bl	8002a54 <__aeabi_fcmpgt>
 8004098:	2800      	cmp	r0, #0
 800409a:	f000 8382 	beq.w	80047a2 <main+0x17ce>
 800409e:	2100      	movs	r1, #0
 80040a0:	4628      	mov	r0, r5
 80040a2:	f7fe fcd7 	bl	8002a54 <__aeabi_fcmpgt>
 80040a6:	2800      	cmp	r0, #0
 80040a8:	f000 837b 	beq.w	80047a2 <main+0x17ce>
 80040ac:	4628      	mov	r0, r5
 80040ae:	4952      	ldr	r1, [pc, #328]	; (80041f8 <main+0x1224>)
 80040b0:	f7fe fcb2 	bl	8002a18 <__aeabi_fcmplt>
 80040b4:	2800      	cmp	r0, #0
 80040b6:	f000 8374 	beq.w	80047a2 <main+0x17ce>
					if (temperature != temperatureLast) {
 80040ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040be:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8004204 <main+0x1230>
 80040c2:	e958 6702 	ldrd	r6, r7, [r8, #-8]
 80040c6:	4632      	mov	r2, r6
 80040c8:	463b      	mov	r3, r7
 80040ca:	f7fe fb77 	bl	80027bc <__aeabi_dcmpeq>
 80040ce:	2800      	cmp	r0, #0
 80040d0:	f040 80ca 	bne.w	8004268 <main+0x1294>
						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 80040d4:	4652      	mov	r2, sl
 80040d6:	465b      	mov	r3, fp
 80040d8:	4630      	mov	r0, r6
 80040da:	4639      	mov	r1, r7
 80040dc:	f7fe fb8c 	bl	80027f8 <__aeabi_dcmpge>
 80040e0:	b968      	cbnz	r0, 80040fe <main+0x112a>
 80040e2:	2200      	movs	r2, #0
 80040e4:	2300      	movs	r3, #0
 80040e6:	4630      	mov	r0, r6
 80040e8:	4639      	mov	r1, r7
 80040ea:	f7fe fb71 	bl	80027d0 <__aeabi_dcmplt>
 80040ee:	b350      	cbz	r0, 8004146 <main+0x1172>
 80040f0:	2200      	movs	r2, #0
 80040f2:	4630      	mov	r0, r6
 80040f4:	4639      	mov	r1, r7
 80040f6:	4b44      	ldr	r3, [pc, #272]	; (8004208 <main+0x1234>)
 80040f8:	f7fe fb88 	bl	800280c <__aeabi_dcmpgt>
 80040fc:	b318      	cbz	r0, 8004146 <main+0x1172>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 80040fe:	4632      	mov	r2, r6
 8004100:	463b      	mov	r3, r7
 8004102:	4942      	ldr	r1, [pc, #264]	; (800420c <main+0x1238>)
 8004104:	a824      	add	r0, sp, #144	; 0x90
 8004106:	f001 fe6d 	bl	8005de4 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 800410a:	2300      	movs	r3, #0
 800410c:	21bb      	movs	r1, #187	; 0xbb
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	2001      	movs	r0, #1
 8004112:	4b3f      	ldr	r3, [pc, #252]	; (8004210 <main+0x123c>)
 8004114:	aa24      	add	r2, sp, #144	; 0x90
 8004116:	e032      	b.n	800417e <main+0x11aa>
    tmpccer &= ~TIM_CCER_CC1NE;
 8004118:	f023 030e 	bic.w	r3, r3, #14
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800411c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004120:	f7ff bbe0 	b.w	80038e4 <main+0x910>
				LCD_Circle(170, 35, 7, 1, 1, BLACK);
 8004124:	462b      	mov	r3, r5
 8004126:	2201      	movs	r2, #1
 8004128:	2107      	movs	r1, #7
 800412a:	2023      	movs	r0, #35	; 0x23
 800412c:	f7fc fb46 	bl	80007bc <LCD_Circle.constprop.0>
				LCD_Circle(170, 75, 7, 1, 1, BLACK);
 8004130:	462b      	mov	r3, r5
 8004132:	2201      	movs	r2, #1
 8004134:	2107      	movs	r1, #7
 8004136:	204b      	movs	r0, #75	; 0x4b
 8004138:	f7fc fb40 	bl	80007bc <LCD_Circle.constprop.0>
 800413c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004140:	e56b      	b.n	8003c1a <main+0xc46>
        return 0;
 8004142:	2000      	movs	r0, #0
 8004144:	e792      	b.n	800406c <main+0x1098>
						else if (temperatureLast < 10 && temperatureLast > 0) {
 8004146:	4652      	mov	r2, sl
 8004148:	465b      	mov	r3, fp
 800414a:	4630      	mov	r0, r6
 800414c:	4639      	mov	r1, r7
 800414e:	f7fe fb3f 	bl	80027d0 <__aeabi_dcmplt>
 8004152:	2800      	cmp	r0, #0
 8004154:	d03c      	beq.n	80041d0 <main+0x11fc>
 8004156:	2200      	movs	r2, #0
 8004158:	2300      	movs	r3, #0
 800415a:	4630      	mov	r0, r6
 800415c:	4639      	mov	r1, r7
 800415e:	f7fe fb55 	bl	800280c <__aeabi_dcmpgt>
 8004162:	2800      	cmp	r0, #0
 8004164:	d034      	beq.n	80041d0 <main+0x11fc>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8004166:	4632      	mov	r2, r6
 8004168:	463b      	mov	r3, r7
 800416a:	4928      	ldr	r1, [pc, #160]	; (800420c <main+0x1238>)
 800416c:	a824      	add	r0, sp, #144	; 0x90
 800416e:	f001 fe39 	bl	8005de4 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8004172:	2300      	movs	r3, #0
 8004174:	21bb      	movs	r1, #187	; 0xbb
 8004176:	201b      	movs	r0, #27
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	4b25      	ldr	r3, [pc, #148]	; (8004210 <main+0x123c>)
 800417c:	aa24      	add	r2, sp, #144	; 0x90
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 800417e:	f7fd fc75 	bl	8001a6c <LCD_Font.constprop.0>
						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8004182:	4d24      	ldr	r5, [pc, #144]	; (8004214 <main+0x1240>)
 8004184:	4652      	mov	r2, sl
 8004186:	e9d5 6700 	ldrd	r6, r7, [r5]
 800418a:	465b      	mov	r3, fp
 800418c:	4630      	mov	r0, r6
 800418e:	4639      	mov	r1, r7
 8004190:	f7fe fb32 	bl	80027f8 <__aeabi_dcmpge>
 8004194:	b978      	cbnz	r0, 80041b6 <main+0x11e2>
 8004196:	2200      	movs	r2, #0
 8004198:	2300      	movs	r3, #0
 800419a:	4630      	mov	r0, r6
 800419c:	4639      	mov	r1, r7
 800419e:	f7fe fb17 	bl	80027d0 <__aeabi_dcmplt>
 80041a2:	2800      	cmp	r0, #0
 80041a4:	d03c      	beq.n	8004220 <main+0x124c>
 80041a6:	2200      	movs	r2, #0
 80041a8:	4630      	mov	r0, r6
 80041aa:	4639      	mov	r1, r7
 80041ac:	4b16      	ldr	r3, [pc, #88]	; (8004208 <main+0x1234>)
 80041ae:	f7fe fb2d 	bl	800280c <__aeabi_dcmpgt>
 80041b2:	2800      	cmp	r0, #0
 80041b4:	d034      	beq.n	8004220 <main+0x124c>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 80041b6:	4632      	mov	r2, r6
 80041b8:	463b      	mov	r3, r7
 80041ba:	4914      	ldr	r1, [pc, #80]	; (800420c <main+0x1238>)
 80041bc:	a824      	add	r0, sp, #144	; 0x90
 80041be:	f001 fe11 	bl	8005de4 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 80041c2:	4b15      	ldr	r3, [pc, #84]	; (8004218 <main+0x1244>)
 80041c4:	21bb      	movs	r1, #187	; 0xbb
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	2001      	movs	r0, #1
 80041ca:	4b11      	ldr	r3, [pc, #68]	; (8004210 <main+0x123c>)
 80041cc:	aa24      	add	r2, sp, #144	; 0x90
 80041ce:	e045      	b.n	800425c <main+0x1288>
						else if (temperatureLast <= -10) {
 80041d0:	2200      	movs	r2, #0
 80041d2:	4630      	mov	r0, r6
 80041d4:	4639      	mov	r1, r7
 80041d6:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <main+0x1234>)
 80041d8:	f7fe fb04 	bl	80027e4 <__aeabi_dcmple>
 80041dc:	2800      	cmp	r0, #0
 80041de:	d0d0      	beq.n	8004182 <main+0x11ae>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 80041e0:	4639      	mov	r1, r7
 80041e2:	4630      	mov	r0, r6
 80041e4:	f7fe fb32 	bl	800284c <__aeabi_d2iz>
 80041e8:	490c      	ldr	r1, [pc, #48]	; (800421c <main+0x1248>)
 80041ea:	b242      	sxtb	r2, r0
 80041ec:	a824      	add	r0, sp, #144	; 0x90
 80041ee:	f001 fdf9 	bl	8005de4 <siprintf>
 80041f2:	e78a      	b.n	800410a <main+0x1136>
 80041f4:	fffff3cb 	.word	0xfffff3cb
 80041f8:	42c80000 	.word	0x42c80000
 80041fc:	42aa0000 	.word	0x42aa0000
 8004200:	c2200000 	.word	0xc2200000
 8004204:	200007e8 	.word	0x200007e8
 8004208:	c0240000 	.word	0xc0240000
 800420c:	0801b2ca 	.word	0x0801b2ca
 8004210:	08009ac8 	.word	0x08009ac8
 8004214:	200007c8 	.word	0x200007c8
 8004218:	00ffa500 	.word	0x00ffa500
 800421c:	0801b2d1 	.word	0x0801b2d1
						else if (temperature < 10 && temperature > 0) {
 8004220:	4652      	mov	r2, sl
 8004222:	465b      	mov	r3, fp
 8004224:	4630      	mov	r0, r6
 8004226:	4639      	mov	r1, r7
 8004228:	f7fe fad2 	bl	80027d0 <__aeabi_dcmplt>
 800422c:	2800      	cmp	r0, #0
 800422e:	f000 82ca 	beq.w	80047c6 <main+0x17f2>
 8004232:	2200      	movs	r2, #0
 8004234:	2300      	movs	r3, #0
 8004236:	4630      	mov	r0, r6
 8004238:	4639      	mov	r1, r7
 800423a:	f7fe fae7 	bl	800280c <__aeabi_dcmpgt>
 800423e:	2800      	cmp	r0, #0
 8004240:	f000 82c1 	beq.w	80047c6 <main+0x17f2>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8004244:	4632      	mov	r2, r6
 8004246:	463b      	mov	r3, r7
 8004248:	49bd      	ldr	r1, [pc, #756]	; (8004540 <main+0x156c>)
 800424a:	a824      	add	r0, sp, #144	; 0x90
 800424c:	f001 fdca 	bl	8005de4 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8004250:	21bb      	movs	r1, #187	; 0xbb
 8004252:	201b      	movs	r0, #27
 8004254:	4bbb      	ldr	r3, [pc, #748]	; (8004544 <main+0x1570>)
 8004256:	aa24      	add	r2, sp, #144	; 0x90
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	4bbb      	ldr	r3, [pc, #748]	; (8004548 <main+0x1574>)
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 800425c:	f7fd fc06 	bl	8001a6c <LCD_Font.constprop.0>
						temperatureLast = temperature;
 8004260:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004264:	e948 2302 	strd	r2, r3, [r8, #-8]
					if (humidity != humidityLast) {
 8004268:	e9d8 6700 	ldrd	r6, r7, [r8]
 800426c:	4db7      	ldr	r5, [pc, #732]	; (800454c <main+0x1578>)
 800426e:	4632      	mov	r2, r6
 8004270:	e955 0102 	ldrd	r0, r1, [r5, #-8]
 8004274:	463b      	mov	r3, r7
 8004276:	f7fe faa1 	bl	80027bc <__aeabi_dcmpeq>
 800427a:	4681      	mov	r9, r0
 800427c:	2800      	cmp	r0, #0
 800427e:	d132      	bne.n	80042e6 <main+0x1312>
						sprintf(weatherPrintH, "%.1f'H", humidityLast);
 8004280:	4632      	mov	r2, r6
 8004282:	463b      	mov	r3, r7
 8004284:	49b2      	ldr	r1, [pc, #712]	; (8004550 <main+0x157c>)
 8004286:	a824      	add	r0, sp, #144	; 0x90
 8004288:	f001 fdac 	bl	8005de4 <siprintf>
						if (humidityLast >= 10)
 800428c:	e9d8 0100 	ldrd	r0, r1, [r8]
 8004290:	4652      	mov	r2, sl
 8004292:	465b      	mov	r3, fp
 8004294:	f7fe fab0 	bl	80027f8 <__aeabi_dcmpge>
 8004298:	2800      	cmp	r0, #0
 800429a:	f000 82a7 	beq.w	80047ec <main+0x1818>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 800429e:	21bb      	movs	r1, #187	; 0xbb
 80042a0:	20a0      	movs	r0, #160	; 0xa0
 80042a2:	4ba9      	ldr	r3, [pc, #676]	; (8004548 <main+0x1574>)
 80042a4:	f8cd 9000 	str.w	r9, [sp]
 80042a8:	aa24      	add	r2, sp, #144	; 0x90
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 80042aa:	f7fd fbdf 	bl	8001a6c <LCD_Font.constprop.0>
						sprintf(weatherPrintH, "%.1f'H", humidity);
 80042ae:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 80042b2:	49a7      	ldr	r1, [pc, #668]	; (8004550 <main+0x157c>)
 80042b4:	a824      	add	r0, sp, #144	; 0x90
 80042b6:	f001 fd95 	bl	8005de4 <siprintf>
						if (humidity >= 10)
 80042ba:	e955 6702 	ldrd	r6, r7, [r5, #-8]
 80042be:	4652      	mov	r2, sl
 80042c0:	465b      	mov	r3, fp
 80042c2:	4639      	mov	r1, r7
 80042c4:	4630      	mov	r0, r6
 80042c6:	f7fe fa97 	bl	80027f8 <__aeabi_dcmpge>
 80042ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 80042ce:	21bb      	movs	r1, #187	; 0xbb
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	aa24      	add	r2, sp, #144	; 0x90
 80042d4:	4b9c      	ldr	r3, [pc, #624]	; (8004548 <main+0x1574>)
						if (humidity >= 10)
 80042d6:	2800      	cmp	r0, #0
 80042d8:	f000 828e 	beq.w	80047f8 <main+0x1824>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 80042dc:	20a0      	movs	r0, #160	; 0xa0
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 80042de:	f7fd fbc5 	bl	8001a6c <LCD_Font.constprop.0>
						humidityLast = humidity;
 80042e2:	e9c8 6700 	strd	r6, r7, [r8]
					if (pressureLast != pressure) {
 80042e6:	f8b4 25e8 	ldrh.w	r2, [r4, #1512]	; 0x5e8
 80042ea:	f8b4 35d0 	ldrh.w	r3, [r4, #1488]	; 0x5d0
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d049      	beq.n	8004386 <main+0x13b2>
						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02dP", pressureLast);
 80042f2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80042f6:	d303      	bcc.n	8004300 <main+0x132c>
 80042f8:	4996      	ldr	r1, [pc, #600]	; (8004554 <main+0x1580>)
 80042fa:	a824      	add	r0, sp, #144	; 0x90
 80042fc:	f001 fd72 	bl	8005de4 <siprintf>
						LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 8004300:	2300      	movs	r3, #0
 8004302:	aa24      	add	r2, sp, #144	; 0x90
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	21bb      	movs	r1, #187	; 0xbb
 8004308:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800430c:	4b8e      	ldr	r3, [pc, #568]	; (8004548 <main+0x1574>)
 800430e:	f7fd fbad 	bl	8001a6c <LCD_Font.constprop.0>
						if (pressureLast < 1000) sprintf(weatherPrintP, " %02dP", pressureLast);
 8004312:	f8b4 25e8 	ldrh.w	r2, [r4, #1512]	; 0x5e8
 8004316:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800431a:	d203      	bcs.n	8004324 <main+0x1350>
 800431c:	498e      	ldr	r1, [pc, #568]	; (8004558 <main+0x1584>)
 800431e:	a824      	add	r0, sp, #144	; 0x90
 8004320:	f001 fd60 	bl	8005de4 <siprintf>
						LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 8004324:	2300      	movs	r3, #0
 8004326:	aa24      	add	r2, sp, #144	; 0x90
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	21bb      	movs	r1, #187	; 0xbb
 800432c:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8004330:	4b85      	ldr	r3, [pc, #532]	; (8004548 <main+0x1574>)
 8004332:	f7fd fb9b 	bl	8001a6c <LCD_Font.constprop.0>
						pressureLast = pressure;
 8004336:	f8b4 25d0 	ldrh.w	r2, [r4, #1488]	; 0x5d0
						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02dP", pressureLast);
 800433a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
						pressureLast = pressure;
 800433e:	f8a4 25e8 	strh.w	r2, [r4, #1512]	; 0x5e8
						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02dP", pressureLast);
 8004342:	d303      	bcc.n	800434c <main+0x1378>
 8004344:	4983      	ldr	r1, [pc, #524]	; (8004554 <main+0x1580>)
 8004346:	a824      	add	r0, sp, #144	; 0x90
 8004348:	f001 fd4c 	bl	8005de4 <siprintf>
						LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 800434c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004350:	aa24      	add	r2, sp, #144	; 0x90
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	21bb      	movs	r1, #187	; 0xbb
 8004356:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800435a:	4b7b      	ldr	r3, [pc, #492]	; (8004548 <main+0x1574>)
 800435c:	f7fd fb86 	bl	8001a6c <LCD_Font.constprop.0>
						if (pressureLast < 1000) sprintf(weatherPrintP, " %02dP", pressureLast);
 8004360:	f8b4 25e8 	ldrh.w	r2, [r4, #1512]	; 0x5e8
 8004364:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8004368:	d203      	bcs.n	8004372 <main+0x139e>
 800436a:	497b      	ldr	r1, [pc, #492]	; (8004558 <main+0x1584>)
 800436c:	a824      	add	r0, sp, #144	; 0x90
 800436e:	f001 fd39 	bl	8005de4 <siprintf>
						LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 8004372:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004376:	21bb      	movs	r1, #187	; 0xbb
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800437e:	4b72      	ldr	r3, [pc, #456]	; (8004548 <main+0x1574>)
 8004380:	aa24      	add	r2, sp, #144	; 0x90
 8004382:	f7fd fb73 	bl	8001a6c <LCD_Font.constprop.0>
					if (AT24XX_Read(0) != rtcHrs) {
 8004386:	2000      	movs	r0, #0
 8004388:	f7fc fbe2 	bl	8000b50 <AT24XX_Read>
 800438c:	f894 15b0 	ldrb.w	r1, [r4, #1456]	; 0x5b0
 8004390:	4288      	cmp	r0, r1
 8004392:	f000 80b5 	beq.w	8004500 <main+0x152c>
						AT24XX_Update(0, rtcHrs);
 8004396:	2000      	movs	r0, #0
 8004398:	f7fc fdd0 	bl	8000f3c <AT24XX_Update>
 800439c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80043a0:	f240 591e 	movw	r9, #1310	; 0x51e
						AT24XX_Update(0, rtcHrs);
 80043a4:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 800455c <main+0x1588>
						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80043a8:	4630      	mov	r0, r6
 80043aa:	f7fc fbd1 	bl	8000b50 <AT24XX_Read>
 80043ae:	4607      	mov	r7, r0
 80043b0:	1c70      	adds	r0, r6, #1
 80043b2:	b280      	uxth	r0, r0
 80043b4:	f7fc fbcc 	bl	8000b50 <AT24XX_Read>
 80043b8:	3602      	adds	r6, #2
 80043ba:	b2b6      	uxth	r6, r6
	return (byteH << 8) | byteL;
 80043bc:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80043c0:	454e      	cmp	r6, r9
 80043c2:	f828 7b02 	strh.w	r7, [r8], #2
 80043c6:	d1ef      	bne.n	80043a8 <main+0x13d4>
						for (uint16_t i = 154; i > 0; i--) hT[i] = hT[i - 1];
 80043c8:	4964      	ldr	r1, [pc, #400]	; (800455c <main+0x1588>)
 80043ca:	f44f 729a 	mov.w	r2, #308	; 0x134
 80043ce:	1c88      	adds	r0, r1, #2
 80043d0:	f004 fd48 	bl	8008e64 <memmove>
						hT[0] = (uint16_t) (temperature * 10);
 80043d4:	4962      	ldr	r1, [pc, #392]	; (8004560 <main+0x158c>)
 80043d6:	4652      	mov	r2, sl
 80043d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043dc:	465b      	mov	r3, fp
 80043de:	f7fd ff85 	bl	80022ec <__aeabi_dmul>
 80043e2:	f7fe fa5b 	bl	800289c <__aeabi_d2uiz>
 80043e6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
						for (uint16_t i = 0; i < 155; i++) {
 80043ea:	f240 591e 	movw	r9, #1310	; 0x51e
						hT[0] = (uint16_t) (temperature * 10);
 80043ee:	f8df 816c 	ldr.w	r8, [pc, #364]	; 800455c <main+0x1588>
 80043f2:	f8a4 020c 	strh.w	r0, [r4, #524]	; 0x20c
							AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 80043f6:	f938 7b02 	ldrsh.w	r7, [r8], #2
 80043fa:	4630      	mov	r0, r6
 80043fc:	b2f9      	uxtb	r1, r7
 80043fe:	f7fc fd9d 	bl	8000f3c <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 8004402:	1c70      	adds	r0, r6, #1
						for (uint16_t i = 0; i < 155; i++) {
 8004404:	3602      	adds	r6, #2
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 8004406:	f3c7 2107 	ubfx	r1, r7, #8, #8
 800440a:	b280      	uxth	r0, r0
						for (uint16_t i = 0; i < 155; i++) {
 800440c:	b2b6      	uxth	r6, r6
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 800440e:	f7fc fd95 	bl	8000f3c <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8004412:	454e      	cmp	r6, r9
 8004414:	d1ef      	bne.n	80043f6 <main+0x1422>
 8004416:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 800441a:	f640 1906 	movw	r9, #2310	; 0x906
 800441e:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8004564 <main+0x1590>
 8004422:	4630      	mov	r0, r6
 8004424:	f7fc fb94 	bl	8000b50 <AT24XX_Read>
 8004428:	4607      	mov	r7, r0
 800442a:	1c70      	adds	r0, r6, #1
 800442c:	b280      	uxth	r0, r0
 800442e:	f7fc fb8f 	bl	8000b50 <AT24XX_Read>
 8004432:	3602      	adds	r6, #2
 8004434:	b2b6      	uxth	r6, r6
	return (byteH << 8) | byteL;
 8004436:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 800443a:	454e      	cmp	r6, r9
 800443c:	f828 7b02 	strh.w	r7, [r8], #2
 8004440:	d1ef      	bne.n	8004422 <main+0x144e>
						for (uint16_t i = 154; i > 0; i--) hH[i] = hH[i - 1];
 8004442:	4948      	ldr	r1, [pc, #288]	; (8004564 <main+0x1590>)
 8004444:	f44f 729a 	mov.w	r2, #308	; 0x134
 8004448:	1c88      	adds	r0, r1, #2
 800444a:	f004 fd0b 	bl	8008e64 <memmove>
						hH[0] = (uint16_t) (humidity * 10);
 800444e:	e955 0102 	ldrd	r0, r1, [r5, #-8]
 8004452:	4652      	mov	r2, sl
 8004454:	465b      	mov	r3, fp
 8004456:	f7fd ff49 	bl	80022ec <__aeabi_dmul>
 800445a:	f7fe fa1f 	bl	800289c <__aeabi_d2uiz>
 800445e:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
						for (uint16_t i = 0; i < 155; i++) {
 8004462:	f640 1906 	movw	r9, #2310	; 0x906
						hH[0] = (uint16_t) (humidity * 10);
 8004466:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8004564 <main+0x1590>
 800446a:	f8a4 0342 	strh.w	r0, [r4, #834]	; 0x342
							AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 800446e:	f938 7b02 	ldrsh.w	r7, [r8], #2
 8004472:	4630      	mov	r0, r6
 8004474:	b2f9      	uxtb	r1, r7
 8004476:	f7fc fd61 	bl	8000f3c <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 800447a:	1c70      	adds	r0, r6, #1
						for (uint16_t i = 0; i < 155; i++) {
 800447c:	3602      	adds	r6, #2
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 800447e:	f3c7 2107 	ubfx	r1, r7, #8, #8
 8004482:	b280      	uxth	r0, r0
						for (uint16_t i = 0; i < 155; i++) {
 8004484:	b2b6      	uxth	r6, r6
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8004486:	f7fc fd59 	bl	8000f3c <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 800448a:	454e      	cmp	r6, r9
 800448c:	d1ef      	bne.n	800446e <main+0x149a>
 800448e:	f640 36b8 	movw	r6, #3000	; 0xbb8
						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8004492:	f640 49ee 	movw	r9, #3310	; 0xcee
 8004496:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004568 <main+0x1594>
 800449a:	4630      	mov	r0, r6
 800449c:	f7fc fb58 	bl	8000b50 <AT24XX_Read>
 80044a0:	4607      	mov	r7, r0
 80044a2:	1c70      	adds	r0, r6, #1
 80044a4:	b280      	uxth	r0, r0
 80044a6:	f7fc fb53 	bl	8000b50 <AT24XX_Read>
 80044aa:	3602      	adds	r6, #2
 80044ac:	b2b6      	uxth	r6, r6
	return (byteH << 8) | byteL;
 80044ae:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 80044b2:	454e      	cmp	r6, r9
 80044b4:	f828 7b02 	strh.w	r7, [r8], #2
 80044b8:	d1ef      	bne.n	800449a <main+0x14c6>
						hP[0] = (uint16_t)pressure;
 80044ba:	f640 36b8 	movw	r6, #3000	; 0xbb8
						for (uint16_t i = 0; i < 155; i++) {
 80044be:	f640 49ee 	movw	r9, #3310	; 0xcee
						for (uint16_t i = 154; i > 0; i--) hP[i] = hP[i - 1];
 80044c2:	4929      	ldr	r1, [pc, #164]	; (8004568 <main+0x1594>)
 80044c4:	f44f 729a 	mov.w	r2, #308	; 0x134
 80044c8:	1c88      	adds	r0, r1, #2
 80044ca:	f004 fccb 	bl	8008e64 <memmove>
						hP[0] = (uint16_t)pressure;
 80044ce:	f8b4 35d0 	ldrh.w	r3, [r4, #1488]	; 0x5d0
 80044d2:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8004568 <main+0x1594>
 80044d6:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
							AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 80044da:	f938 7b02 	ldrsh.w	r7, [r8], #2
 80044de:	4630      	mov	r0, r6
 80044e0:	b2f9      	uxtb	r1, r7
 80044e2:	f7fc fd2b 	bl	8000f3c <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 80044e6:	1c70      	adds	r0, r6, #1
						for (uint16_t i = 0; i < 155; i++) {
 80044e8:	3602      	adds	r6, #2
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 80044ea:	f3c7 2107 	ubfx	r1, r7, #8, #8
 80044ee:	b280      	uxth	r0, r0
						for (uint16_t i = 0; i < 155; i++) {
 80044f0:	b2b6      	uxth	r6, r6
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 80044f2:	f7fc fd23 	bl	8000f3c <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 80044f6:	454e      	cmp	r6, r9
 80044f8:	d1ef      	bne.n	80044da <main+0x1506>
						viewGraphs = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	f884 35ea 	strb.w	r3, [r4, #1514]	; 0x5ea
					LCD_Rect(2, 189, 157, 129, 1, BLUE);
 8004500:	2002      	movs	r0, #2
 8004502:	f7fc fa2a 	bl	800095a <LCD_Rect.constprop.0>
					int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8004506:	4916      	ldr	r1, [pc, #88]	; (8004560 <main+0x158c>)
 8004508:	4652      	mov	r2, sl
 800450a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800450e:	465b      	mov	r3, fp
 8004510:	f7fd feec 	bl	80022ec <__aeabi_dmul>
 8004514:	f7fe f99a 	bl	800284c <__aeabi_d2iz>
					LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 8004518:	2300      	movs	r3, #0
 800451a:	229e      	movs	r2, #158	; 0x9e
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800451c:	b286      	uxth	r6, r0
 800451e:	3ee2      	subs	r6, #226	; 0xe2
 8004520:	01f6      	lsls	r6, r6, #7
 8004522:	bf48      	it	mi
 8004524:	363f      	addmi	r6, #63	; 0x3f
					LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	21bf      	movs	r1, #191	; 0xbf
 800452a:	f240 133d 	movw	r3, #317	; 0x13d
 800452e:	4610      	mov	r0, r2
					int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8004530:	f346 168f 	sbfx	r6, r6, #6, #16
					LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 8004534:	f7fc f9d6 	bl	80008e4 <LCD_Line.constprop.0>
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8004538:	2e00      	cmp	r6, #0
 800453a:	dd2d      	ble.n	8004598 <main+0x15c4>
 800453c:	e016      	b.n	800456c <main+0x1598>
 800453e:	bf00      	nop
 8004540:	0801b2ca 	.word	0x0801b2ca
 8004544:	00ffa500 	.word	0x00ffa500
 8004548:	08009ac8 	.word	0x08009ac8
 800454c:	200007d8 	.word	0x200007d8
 8004550:	0801b2d7 	.word	0x0801b2d7
 8004554:	0801b2df 	.word	0x0801b2df
 8004558:	0801b2de 	.word	0x0801b2de
 800455c:	20000414 	.word	0x20000414
 8004560:	200007c8 	.word	0x200007c8
 8004564:	2000054a 	.word	0x2000054a
 8004568:	20000680 	.word	0x20000680
 800456c:	2e7f      	cmp	r6, #127	; 0x7f
 800456e:	bfa8      	it	ge
 8004570:	267f      	movge	r6, #127	; 0x7f
 8004572:	b236      	sxth	r6, r6
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8004574:	f1c6 037f 	rsb	r3, r6, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	b2db      	uxtb	r3, r3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 800457c:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 8004580:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8004584:	229e      	movs	r2, #158	; 0x9e
 8004586:	f5c6 769f 	rsb	r6, r6, #318	; 0x13e
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	4610      	mov	r0, r2
 800458e:	f240 133d 	movw	r3, #317	; 0x13d
 8004592:	b2b1      	uxth	r1, r6
 8004594:	f7fc f9a6 	bl	80008e4 <LCD_Line.constprop.0>
					LCD_Rect(161, 189, 157, 129, 1, BLUE);
 8004598:	20a1      	movs	r0, #161	; 0xa1
 800459a:	f7fc f9de 	bl	800095a <LCD_Rect.constprop.0>
					valMap = map(((int16_t)(humidity * 10)), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 800459e:	e955 0102 	ldrd	r0, r1, [r5, #-8]
 80045a2:	4652      	mov	r2, sl
 80045a4:	465b      	mov	r3, fp
 80045a6:	f7fd fea1 	bl	80022ec <__aeabi_dmul>
 80045aa:	f7fe f94f 	bl	800284c <__aeabi_d2iz>
					LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 80045ae:	2300      	movs	r3, #0
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	f240 133d 	movw	r3, #317	; 0x13d
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80045b6:	b285      	uxth	r5, r0
 80045b8:	3d50      	subs	r5, #80	; 0x50
					LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 80045ba:	461a      	mov	r2, r3
 80045bc:	21bf      	movs	r1, #191	; 0xbf
 80045be:	4618      	mov	r0, r3
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80045c0:	01ed      	lsls	r5, r5, #7
					LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 80045c2:	f7fc f98f 	bl	80008e4 <LCD_Line.constprop.0>
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 80045c6:	f5b5 7f20 	cmp.w	r5, #640	; 0x280
 80045ca:	db19      	blt.n	8004600 <main+0x162c>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80045cc:	f44f 7120 	mov.w	r1, #640	; 0x280
 80045d0:	fb95 f5f1 	sdiv	r5, r5, r1
 80045d4:	b22d      	sxth	r5, r5
 80045d6:	2d7f      	cmp	r5, #127	; 0x7f
 80045d8:	bfa8      	it	ge
 80045da:	257f      	movge	r5, #127	; 0x7f
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80045dc:	f1c5 037f 	rsb	r3, r5, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 80045e8:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	f240 133d 	movw	r3, #317	; 0x13d
 80045f2:	f5c5 719f 	rsb	r1, r5, #318	; 0x13e
 80045f6:	461a      	mov	r2, r3
 80045f8:	4618      	mov	r0, r3
 80045fa:	b289      	uxth	r1, r1
 80045fc:	f7fc f972 	bl	80008e4 <LCD_Line.constprop.0>
					LCD_Rect(320, 189, 157, 129, 1, BLUE);
 8004600:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8004604:	f7fc f9a9 	bl	800095a <LCD_Rect.constprop.0>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004608:	f46f 726a 	mvn.w	r2, #936	; 0x3a8
 800460c:	f8b4 55d0 	ldrh.w	r5, [r4, #1488]	; 0x5d0
					LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8004610:	2300      	movs	r3, #0
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004612:	4415      	add	r5, r2
					LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8004614:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	21bf      	movs	r1, #191	; 0xbf
 800461c:	f240 133d 	movw	r3, #317	; 0x13d
 8004620:	4610      	mov	r0, r2
					valMap = map(((int16_t)(pressure)), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8004622:	b22d      	sxth	r5, r5
					LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8004624:	f7fc f95e 	bl	80008e4 <LCD_Line.constprop.0>
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8004628:	2d00      	cmp	r5, #0
 800462a:	dd15      	ble.n	8004658 <main+0x1684>
 800462c:	2d7f      	cmp	r5, #127	; 0x7f
 800462e:	bfa8      	it	ge
 8004630:	257f      	movge	r5, #127	; 0x7f
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8004632:	f1c5 037f 	rsb	r3, r5, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	b2db      	uxtb	r3, r3
 800463a:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 800463e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8004642:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8004646:	f5c5 759f 	rsb	r5, r5, #318	; 0x13e
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	4610      	mov	r0, r2
 800464e:	f240 133d 	movw	r3, #317	; 0x13d
 8004652:	b2a9      	uxth	r1, r5
 8004654:	f7fc f946 	bl	80008e4 <LCD_Line.constprop.0>
					if (!viewGraphs) {
 8004658:	f894 75ea 	ldrb.w	r7, [r4, #1514]	; 0x5ea
 800465c:	2f00      	cmp	r7, #0
 800465e:	f040 80a0 	bne.w	80047a2 <main+0x17ce>
 8004662:	f04f 089d 	mov.w	r8, #157	; 0x9d
 8004666:	4e65      	ldr	r6, [pc, #404]	; (80047fc <main+0x1828>)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004668:	f836 5b02 	ldrh.w	r5, [r6], #2
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 800466c:	f240 133d 	movw	r3, #317	; 0x13d
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004670:	3de2      	subs	r5, #226	; 0xe2
 8004672:	01ed      	lsls	r5, r5, #7
 8004674:	bf48      	it	mi
 8004676:	353f      	addmi	r5, #63	; 0x3f
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8004678:	4642      	mov	r2, r8
 800467a:	21bf      	movs	r1, #191	; 0xbf
 800467c:	4640      	mov	r0, r8
							valMap = map(((int16_t)hT[i]), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 800467e:	f345 158f 	sbfx	r5, r5, #6, #16
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8004682:	9700      	str	r7, [sp, #0]
 8004684:	f7fc f92e 	bl	80008e4 <LCD_Line.constprop.0>
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8004688:	2d00      	cmp	r5, #0
 800468a:	dd15      	ble.n	80046b8 <main+0x16e4>
 800468c:	2d7f      	cmp	r5, #127	; 0x7f
 800468e:	bfa8      	it	ge
 8004690:	257f      	movge	r5, #127	; 0x7f
 8004692:	b22d      	sxth	r5, r5
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8004694:	f1c5 037f 	rsb	r3, r5, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	b2db      	uxtb	r3, r3
 800469c:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 80046a0:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80046a4:	f5c5 759f 	rsb	r5, r5, #318	; 0x13e
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	4642      	mov	r2, r8
 80046ac:	f240 133d 	movw	r3, #317	; 0x13d
 80046b0:	4640      	mov	r0, r8
 80046b2:	b2a9      	uxth	r1, r5
 80046b4:	f7fc f916 	bl	80008e4 <LCD_Line.constprop.0>
						for (uint16_t i = 0; i < 155 ; i++) {
 80046b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80046bc:	fa1f f888 	uxth.w	r8, r8
 80046c0:	f1b8 0f02 	cmp.w	r8, #2
 80046c4:	d1d0      	bne.n	8004668 <main+0x1694>
 80046c6:	f44f 789e 	mov.w	r8, #316	; 0x13c
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 80046ca:	2700      	movs	r7, #0
 80046cc:	4e4c      	ldr	r6, [pc, #304]	; (8004800 <main+0x182c>)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80046ce:	f836 5b02 	ldrh.w	r5, [r6], #2
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 80046d2:	f240 133d 	movw	r3, #317	; 0x13d
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80046d6:	3d50      	subs	r5, #80	; 0x50
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 80046d8:	4642      	mov	r2, r8
 80046da:	21bf      	movs	r1, #191	; 0xbf
 80046dc:	4640      	mov	r0, r8
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80046de:	01ed      	lsls	r5, r5, #7
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 80046e0:	9700      	str	r7, [sp, #0]
 80046e2:	f7fc f8ff 	bl	80008e4 <LCD_Line.constprop.0>
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 80046e6:	f5b5 7f20 	cmp.w	r5, #640	; 0x280
 80046ea:	db19      	blt.n	8004720 <main+0x174c>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80046ec:	f44f 7120 	mov.w	r1, #640	; 0x280
 80046f0:	fb95 f5f1 	sdiv	r5, r5, r1
 80046f4:	b22d      	sxth	r5, r5
 80046f6:	2d7f      	cmp	r5, #127	; 0x7f
 80046f8:	bfa8      	it	ge
 80046fa:	257f      	movge	r5, #127	; 0x7f
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80046fc:	f1c5 037f 	rsb	r3, r5, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 8004708:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800470c:	f5c5 719f 	rsb	r1, r5, #318	; 0x13e
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	4642      	mov	r2, r8
 8004714:	f240 133d 	movw	r3, #317	; 0x13d
 8004718:	4640      	mov	r0, r8
 800471a:	b289      	uxth	r1, r1
 800471c:	f7fc f8e2 	bl	80008e4 <LCD_Line.constprop.0>
						for (uint16_t i = 0; i < 155 ; i++) {
 8004720:	f108 38ff 	add.w	r8, r8, #4294967295
 8004724:	fa1f f888 	uxth.w	r8, r8
 8004728:	f1b8 0fa1 	cmp.w	r8, #161	; 0xa1
 800472c:	d1cf      	bne.n	80046ce <main+0x16fa>
 800472e:	f240 18db 	movw	r8, #475	; 0x1db
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 8004732:	2700      	movs	r7, #0
 8004734:	4e33      	ldr	r6, [pc, #204]	; (8004804 <main+0x1830>)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004736:	f46f 736a 	mvn.w	r3, #936	; 0x3a8
 800473a:	f836 5b02 	ldrh.w	r5, [r6], #2
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 800473e:	4642      	mov	r2, r8
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004740:	441d      	add	r5, r3
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 8004742:	21bf      	movs	r1, #191	; 0xbf
 8004744:	f240 133d 	movw	r3, #317	; 0x13d
 8004748:	4640      	mov	r0, r8
							valMap = map(((int16_t)hP[i]), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 800474a:	b22d      	sxth	r5, r5
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 800474c:	9700      	str	r7, [sp, #0]
 800474e:	f7fc f8c9 	bl	80008e4 <LCD_Line.constprop.0>
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8004752:	2d00      	cmp	r5, #0
 8004754:	dd14      	ble.n	8004780 <main+0x17ac>
 8004756:	2d7f      	cmp	r5, #127	; 0x7f
 8004758:	bfa8      	it	ge
 800475a:	257f      	movge	r5, #127	; 0x7f
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 800475c:	f1c5 037f 	rsb	r3, r5, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	b2db      	uxtb	r3, r3
 8004764:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 8004768:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800476c:	f5c5 759f 	rsb	r5, r5, #318	; 0x13e
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	4642      	mov	r2, r8
 8004774:	f240 133d 	movw	r3, #317	; 0x13d
 8004778:	4640      	mov	r0, r8
 800477a:	b2a9      	uxth	r1, r5
 800477c:	f7fc f8b2 	bl	80008e4 <LCD_Line.constprop.0>
						for (uint16_t i = 0; i < 155 ; i++) {
 8004780:	f108 38ff 	add.w	r8, r8, #4294967295
 8004784:	fa1f f888 	uxth.w	r8, r8
 8004788:	f5b8 7fa0 	cmp.w	r8, #320	; 0x140
 800478c:	d1d3      	bne.n	8004736 <main+0x1762>
						for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 800478e:	2300      	movs	r3, #0
 8004790:	4a1d      	ldr	r2, [pc, #116]	; (8004808 <main+0x1834>)
 8004792:	6353      	str	r3, [r2, #52]	; 0x34
 8004794:	3301      	adds	r3, #1
 8004796:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800479a:	d1fa      	bne.n	8004792 <main+0x17be>
						viewGraphs = 1;
 800479c:	2301      	movs	r3, #1
 800479e:	f884 35ea 	strb.w	r3, [r4, #1514]	; 0x5ea
			if (rx_index != 0) {
 80047a2:	4c1a      	ldr	r4, [pc, #104]	; (800480c <main+0x1838>)
 80047a4:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d139      	bne.n	8004820 <main+0x184c>
			remoteSensorLastUpdate++;
 80047ac:	4d18      	ldr	r5, [pc, #96]	; (8004810 <main+0x183c>)
 80047ae:	89ab      	ldrh	r3, [r5, #12]
 80047b0:	3301      	adds	r3, #1
 80047b2:	b29b      	uxth	r3, r3
			if (remoteSensorLastUpdate > WAIT_REMOTE_SENSOR_SEC) {
 80047b4:	2b64      	cmp	r3, #100	; 0x64
			remoteSensorLastUpdate++;
 80047b6:	81ab      	strh	r3, [r5, #12]
			if (remoteSensorLastUpdate > WAIT_REMOTE_SENSOR_SEC) {
 80047b8:	f200 834e 	bhi.w	8004e58 <main+0x1e84>
			rtcSecLast = rtcSec;
 80047bc:	f894 35ae 	ldrb.w	r3, [r4, #1454]	; 0x5ae
 80047c0:	722b      	strb	r3, [r5, #8]
	{
 80047c2:	f7ff b9c5 	b.w	8003b50 <main+0xb7c>
						else if (temperature <= -10) {
 80047c6:	2200      	movs	r2, #0
 80047c8:	4630      	mov	r0, r6
 80047ca:	4639      	mov	r1, r7
 80047cc:	4b11      	ldr	r3, [pc, #68]	; (8004814 <main+0x1840>)
 80047ce:	f7fe f809 	bl	80027e4 <__aeabi_dcmple>
 80047d2:	2800      	cmp	r0, #0
 80047d4:	f43f ad44 	beq.w	8004260 <main+0x128c>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 80047d8:	4639      	mov	r1, r7
 80047da:	4630      	mov	r0, r6
 80047dc:	f7fe f836 	bl	800284c <__aeabi_d2iz>
 80047e0:	490d      	ldr	r1, [pc, #52]	; (8004818 <main+0x1844>)
 80047e2:	b242      	sxtb	r2, r0
 80047e4:	a824      	add	r0, sp, #144	; 0x90
 80047e6:	f001 fafd 	bl	8005de4 <siprintf>
 80047ea:	e4ea      	b.n	80041c2 <main+0x11ee>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 80047ec:	9000      	str	r0, [sp, #0]
 80047ee:	21bb      	movs	r1, #187	; 0xbb
 80047f0:	20ba      	movs	r0, #186	; 0xba
 80047f2:	4b0a      	ldr	r3, [pc, #40]	; (800481c <main+0x1848>)
 80047f4:	aa24      	add	r2, sp, #144	; 0x90
 80047f6:	e558      	b.n	80042aa <main+0x12d6>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 80047f8:	20ba      	movs	r0, #186	; 0xba
 80047fa:	e570      	b.n	80042de <main+0x130a>
 80047fc:	20000414 	.word	0x20000414
 8004800:	2000054a 	.word	0x2000054a
 8004804:	20000680 	.word	0x20000680
 8004808:	40012c00 	.word	0x40012c00
 800480c:	20000208 	.word	0x20000208
 8004810:	20000000 	.word	0x20000000
 8004814:	c0240000 	.word	0xc0240000
 8004818:	0801b2d1 	.word	0x0801b2d1
 800481c:	08009ac8 	.word	0x08009ac8
				if (memcmp(rx_buffer, "TS", 2) == 0) {
 8004820:	2202      	movs	r2, #2
 8004822:	49ce      	ldr	r1, [pc, #824]	; (8004b5c <main+0x1b88>)
 8004824:	f204 102d 	addw	r0, r4, #301	; 0x12d
 8004828:	f005 f8a4 	bl	8009974 <memcmp>
 800482c:	4606      	mov	r6, r0
 800482e:	2800      	cmp	r0, #0
 8004830:	f040 80c3 	bne.w	80049ba <main+0x19e6>
					val[0] = rx_buffer[2];
 8004834:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
					DS3231_setHrs(atoi(val));
 8004838:	a824      	add	r0, sp, #144	; 0x90
					val[0] = rx_buffer[2];
 800483a:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
					val[1] = rx_buffer[3];
 800483e:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
    return ((val / 10 * 16) + (val % 10));
 8004842:	250a      	movs	r5, #10
 8004844:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
					DS3231_setHrs(atoi(val));
 8004848:	f000 fc23 	bl	8005092 <atoi>
 800484c:	b2c7      	uxtb	r7, r0
    rtcBufferSet[2] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
}

void DS3231_setHrs(uint8_t value) {
    DS3231_Update();
 800484e:	f7fc ff87 	bl	8001760 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8004852:	fbb7 f0f5 	udiv	r0, r7, r5
 8004856:	fb05 7710 	mls	r7, r5, r0, r7
    rtcBufferSet[3] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800485a:	2211      	movs	r2, #17
 800485c:	f204 111b 	addw	r1, r4, #283	; 0x11b
    return ((val / 10 * 16) + (val % 10));
 8004860:	eb07 1700 	add.w	r7, r7, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8004864:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[3] = decToBcd(value);
 8004866:	f884 711e 	strb.w	r7, [r4, #286]	; 0x11e
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800486a:	f7fc fdf2 	bl	8001452 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
					val[0] = rx_buffer[4];
 800486e:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
					DS3231_setMin(atoi(val));
 8004872:	a824      	add	r0, sp, #144	; 0x90
					val[0] = rx_buffer[4];
 8004874:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
					val[1] = rx_buffer[5];
 8004878:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 800487c:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
					DS3231_setMin(atoi(val));
 8004880:	f000 fc07 	bl	8005092 <atoi>
 8004884:	b2c7      	uxtb	r7, r0
    DS3231_Update();
 8004886:	f7fc ff6b 	bl	8001760 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 800488a:	fbb7 f0f5 	udiv	r0, r7, r5
 800488e:	fb05 7710 	mls	r7, r5, r0, r7
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8004892:	2211      	movs	r2, #17
 8004894:	f204 111b 	addw	r1, r4, #283	; 0x11b
    return ((val / 10 * 16) + (val % 10));
 8004898:	eb07 1700 	add.w	r7, r7, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800489c:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[2] = decToBcd(value);
 800489e:	f884 711d 	strb.w	r7, [r4, #285]	; 0x11d
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80048a2:	f7fc fdd6 	bl	8001452 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
					DS3231_setSec(atoi(val));
 80048a6:	a824      	add	r0, sp, #144	; 0x90
					val[0] = 0;
 80048a8:	f88d 6090 	strb.w	r6, [sp, #144]	; 0x90
					val[1] = 0;
 80048ac:	f88d 6091 	strb.w	r6, [sp, #145]	; 0x91
					DS3231_setSec(atoi(val));
 80048b0:	f000 fbef 	bl	8005092 <atoi>
 80048b4:	b2c7      	uxtb	r7, r0
    DS3231_Update();
 80048b6:	f7fc ff53 	bl	8001760 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80048ba:	fbb7 f0f5 	udiv	r0, r7, r5
 80048be:	fb05 7710 	mls	r7, r5, r0, r7
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80048c2:	2211      	movs	r2, #17
 80048c4:	f204 111b 	addw	r1, r4, #283	; 0x11b
    return ((val / 10 * 16) + (val % 10));
 80048c8:	eb07 1700 	add.w	r7, r7, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80048cc:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[1] = decToBcd(value);
 80048ce:	f884 711c 	strb.w	r7, [r4, #284]	; 0x11c
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80048d2:	f7fc fdbe 	bl	8001452 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
					val[0] = rx_buffer[6];
 80048d6:	f894 3133 	ldrb.w	r3, [r4, #307]	; 0x133
					DS3231_setDate(atoi(val));
 80048da:	a824      	add	r0, sp, #144	; 0x90
					val[0] = rx_buffer[6];
 80048dc:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
					val[1] = rx_buffer[7];
 80048e0:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 80048e4:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
					DS3231_setDate(atoi(val));
 80048e8:	f000 fbd3 	bl	8005092 <atoi>
 80048ec:	b2c7      	uxtb	r7, r0
    rtcBufferSet[4] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
}

void DS3231_setDate(uint8_t value) {
    DS3231_Update();
 80048ee:	f7fc ff37 	bl	8001760 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80048f2:	fbb7 f0f5 	udiv	r0, r7, r5
 80048f6:	fb05 7710 	mls	r7, r5, r0, r7
    rtcBufferSet[5] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80048fa:	2211      	movs	r2, #17
 80048fc:	f204 111b 	addw	r1, r4, #283	; 0x11b
    return ((val / 10 * 16) + (val % 10));
 8004900:	eb07 1700 	add.w	r7, r7, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8004904:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[5] = decToBcd(value);
 8004906:	f884 7120 	strb.w	r7, [r4, #288]	; 0x120
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800490a:	f7fc fda2 	bl	8001452 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
					val[0] = rx_buffer[8];
 800490e:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
					DS3231_setMonth(atoi(val));
 8004912:	a824      	add	r0, sp, #144	; 0x90
					val[0] = rx_buffer[8];
 8004914:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
					val[1] = rx_buffer[9];
 8004918:	f894 3136 	ldrb.w	r3, [r4, #310]	; 0x136
 800491c:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
					DS3231_setMonth(atoi(val));
 8004920:	f000 fbb7 	bl	8005092 <atoi>
 8004924:	b2c7      	uxtb	r7, r0
}

void DS3231_setMonth(uint8_t value) {
    DS3231_Update();
 8004926:	f7fc ff1b 	bl	8001760 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 800492a:	fbb7 f0f5 	udiv	r0, r7, r5
 800492e:	fb05 7710 	mls	r7, r5, r0, r7
    rtcBufferSet[6] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8004932:	2211      	movs	r2, #17
 8004934:	f204 111b 	addw	r1, r4, #283	; 0x11b
    return ((val / 10 * 16) + (val % 10));
 8004938:	eb07 1700 	add.w	r7, r7, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800493c:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[6] = decToBcd(value);
 800493e:	f884 7121 	strb.w	r7, [r4, #289]	; 0x121
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8004942:	f7fc fd86 	bl	8001452 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
					val[0] = rx_buffer[10];
 8004946:	f894 3137 	ldrb.w	r3, [r4, #311]	; 0x137
					DS3231_setYear(atoi(val));
 800494a:	a824      	add	r0, sp, #144	; 0x90
					val[0] = rx_buffer[10];
 800494c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
					val[1] = rx_buffer[11];
 8004950:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8004954:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
					DS3231_setYear(atoi(val));
 8004958:	f000 fb9b 	bl	8005092 <atoi>
 800495c:	b2c7      	uxtb	r7, r0
}

void DS3231_setYear(uint8_t value) {
    DS3231_Update();
 800495e:	f7fc feff 	bl	8001760 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8004962:	fbb7 f0f5 	udiv	r0, r7, r5
 8004966:	fb05 7710 	mls	r7, r5, r0, r7
    rtcBufferSet[7] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800496a:	2211      	movs	r2, #17
 800496c:	f204 111b 	addw	r1, r4, #283	; 0x11b
    return ((val / 10 * 16) + (val % 10));
 8004970:	eb07 1700 	add.w	r7, r7, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8004974:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[7] = decToBcd(value);
 8004976:	f884 7122 	strb.w	r7, [r4, #290]	; 0x122
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800497a:	f7fc fd6a 	bl	8001452 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
					val[1] = rx_buffer[12];
 800497e:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
					DS3231_setDay(atoi(val));
 8004982:	a824      	add	r0, sp, #144	; 0x90
					val[1] = rx_buffer[12];
 8004984:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
					DS3231_setDay(atoi(val));
 8004988:	f000 fb83 	bl	8005092 <atoi>
 800498c:	b2c7      	uxtb	r7, r0
    DS3231_Update();
 800498e:	f7fc fee7 	bl	8001760 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8004992:	fbb7 f0f5 	udiv	r0, r7, r5
 8004996:	fb05 7710 	mls	r7, r5, r0, r7
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800499a:	2211      	movs	r2, #17
    return ((val / 10 * 16) + (val % 10));
 800499c:	eb07 1700 	add.w	r7, r7, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80049a0:	f204 111b 	addw	r1, r4, #283	; 0x11b
 80049a4:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[4] = decToBcd(value);
 80049a6:	f884 711f 	strb.w	r7, [r4, #287]	; 0x11f
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80049aa:	f7fc fd52 	bl	8001452 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
					for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 80049ae:	4b6c      	ldr	r3, [pc, #432]	; (8004b60 <main+0x1b8c>)
 80049b0:	635e      	str	r6, [r3, #52]	; 0x34
 80049b2:	3601      	adds	r6, #1
 80049b4:	f1b6 1f01 	cmp.w	r6, #65537	; 0x10001
 80049b8:	d1fa      	bne.n	80049b0 <main+0x19dc>
				if (memcmp(rx_buffer, "CE", 2) == 0) {
 80049ba:	2202      	movs	r2, #2
 80049bc:	4969      	ldr	r1, [pc, #420]	; (8004b64 <main+0x1b90>)
 80049be:	486a      	ldr	r0, [pc, #424]	; (8004b68 <main+0x1b94>)
 80049c0:	f004 ffd8 	bl	8009974 <memcmp>
 80049c4:	4605      	mov	r5, r0
 80049c6:	2800      	cmp	r0, #0
 80049c8:	d140      	bne.n	8004a4c <main+0x1a78>
					for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 80049ca:	b2a8      	uxth	r0, r5
 80049cc:	2100      	movs	r1, #0
 80049ce:	3501      	adds	r5, #1
 80049d0:	f7fc fab4 	bl	8000f3c <AT24XX_Update>
 80049d4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80049d8:	d1f7      	bne.n	80049ca <main+0x19f6>
					uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 80049da:	aa24      	add	r2, sp, #144	; 0x90
 80049dc:	4615      	mov	r5, r2
 80049de:	4b63      	ldr	r3, [pc, #396]	; (8004b6c <main+0x1b98>)
 80049e0:	f103 0710 	add.w	r7, r3, #16
 80049e4:	4616      	mov	r6, r2
 80049e6:	6818      	ldr	r0, [r3, #0]
 80049e8:	6859      	ldr	r1, [r3, #4]
 80049ea:	3308      	adds	r3, #8
 80049ec:	c603      	stmia	r6!, {r0, r1}
 80049ee:	42bb      	cmp	r3, r7
 80049f0:	4632      	mov	r2, r6
 80049f2:	d1f7      	bne.n	80049e4 <main+0x1a10>
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	6030      	str	r0, [r6, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 80049f8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d125      	bne.n	8004a4c <main+0x1a78>
    __HAL_LOCK(huart);
 8004a00:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d021      	beq.n	8004a4c <main+0x1a78>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a08:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0a:	2600      	movs	r6, #0
 8004a0c:	6466      	str	r6, [r4, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a0e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    huart->TxXferSize = Size;
 8004a12:	2314      	movs	r3, #20
 8004a14:	6827      	ldr	r7, [r4, #0]
 8004a16:	8523      	strh	r3, [r4, #40]	; 0x28
    huart->TxXferCount = Size;
 8004a18:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a1a:	68e3      	ldr	r3, [r4, #12]
 8004a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a20:	d104      	bne.n	8004a2c <main+0x1a58>
 8004a22:	6963      	ldr	r3, [r4, #20]
      pdata16bits = (uint16_t *) pData;
 8004a24:	42b3      	cmp	r3, r6
 8004a26:	bf04      	itt	eq
 8004a28:	462e      	moveq	r6, r5
 8004a2a:	2500      	moveq	r5, #0
    __HAL_UNLOCK(huart);
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    while (huart->TxXferCount > 0U)
 8004a32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a34:	4639      	mov	r1, r7
    while (huart->TxXferCount > 0U)
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f040 811d 	bne.w	8004c78 <main+0x1ca4>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a3e:	2040      	movs	r0, #64	; 0x40
 8004a40:	f7fb fe36 	bl	80006b0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8004a44:	b910      	cbnz	r0, 8004a4c <main+0x1a78>
    huart->gState = HAL_UART_STATE_READY;
 8004a46:	2320      	movs	r3, #32
 8004a48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
				if (memcmp(rx_buffer, "RS", 2) == 0) {
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	4948      	ldr	r1, [pc, #288]	; (8004b70 <main+0x1b9c>)
 8004a50:	4845      	ldr	r0, [pc, #276]	; (8004b68 <main+0x1b94>)
 8004a52:	f004 ff8f 	bl	8009974 <memcmp>
 8004a56:	2800      	cmp	r0, #0
 8004a58:	f040 8106 	bne.w	8004c68 <main+0x1c94>
					for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 8004a5c:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
					temperatureRemote = atoi(valT);
 8004a60:	a813      	add	r0, sp, #76	; 0x4c
					for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 8004a62:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8004a66:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
					temperatureRemote = temperatureRemote / 10;
 8004a6a:	4d42      	ldr	r5, [pc, #264]	; (8004b74 <main+0x1ba0>)
					for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 8004a6c:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 8004a70:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
 8004a74:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
 8004a78:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 8004a7c:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
					temperatureRemote = atoi(valT);
 8004a80:	f000 fb07 	bl	8005092 <atoi>
 8004a84:	f7fd fbc8 	bl	8002218 <__aeabi_i2d>
					temperatureRemote = temperatureRemote / 10;
 8004a88:	4652      	mov	r2, sl
 8004a8a:	465b      	mov	r3, fp
 8004a8c:	f7fd fd58 	bl	8002540 <__aeabi_ddiv>
 8004a90:	462b      	mov	r3, r5
 8004a92:	e8e3 0104 	strd	r0, r1, [r3], #16
 8004a96:	9302      	str	r3, [sp, #8]
					for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 8004a98:	f894 3133 	ldrb.w	r3, [r4, #307]	; 0x133
					humidityRemote = atoi(valH);
 8004a9c:	a805      	add	r0, sp, #20
					for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 8004a9e:	f88d 3014 	strb.w	r3, [sp, #20]
 8004aa2:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8004aa6:	f88d 3015 	strb.w	r3, [sp, #21]
 8004aaa:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8004aae:	f88d 3016 	strb.w	r3, [sp, #22]
					humidityRemote = atoi(valH);
 8004ab2:	f000 faee 	bl	8005092 <atoi>
 8004ab6:	f7fd fbaf 	bl	8002218 <__aeabi_i2d>
					humidityRemote = humidityRemote / 10;
 8004aba:	4652      	mov	r2, sl
 8004abc:	465b      	mov	r3, fp
 8004abe:	f7fd fd3f 	bl	8002540 <__aeabi_ddiv>
					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 8004ac2:	e9d5 8900 	ldrd	r8, r9, [r5]
					humidityRemote = humidityRemote / 10;
 8004ac6:	4606      	mov	r6, r0
 8004ac8:	460f      	mov	r7, r1
 8004aca:	9b02      	ldr	r3, [sp, #8]
					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 8004acc:	4640      	mov	r0, r8
					humidityRemote = humidityRemote / 10;
 8004ace:	e943 6702 	strd	r6, r7, [r3, #-8]
					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 8004ad2:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	f7fd fe70 	bl	80027bc <__aeabi_dcmpeq>
 8004adc:	b968      	cbnz	r0, 8004afa <main+0x1b26>
 8004ade:	2200      	movs	r2, #0
 8004ae0:	4640      	mov	r0, r8
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	4b24      	ldr	r3, [pc, #144]	; (8004b78 <main+0x1ba4>)
 8004ae6:	f7fd fe73 	bl	80027d0 <__aeabi_dcmplt>
 8004aea:	b130      	cbz	r0, 8004afa <main+0x1b26>
 8004aec:	2200      	movs	r2, #0
 8004aee:	4640      	mov	r0, r8
 8004af0:	4649      	mov	r1, r9
 8004af2:	4b22      	ldr	r3, [pc, #136]	; (8004b7c <main+0x1ba8>)
 8004af4:	f7fd fe8a 	bl	800280c <__aeabi_dcmpgt>
 8004af8:	b990      	cbnz	r0, 8004b20 <main+0x1b4c>
 8004afa:	4b21      	ldr	r3, [pc, #132]	; (8004b80 <main+0x1bac>)
 8004afc:	4630      	mov	r0, r6
 8004afe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b02:	4639      	mov	r1, r7
 8004b04:	f7fd fe5a 	bl	80027bc <__aeabi_dcmpeq>
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	f040 80ad 	bne.w	8004c68 <main+0x1c94>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2300      	movs	r3, #0
 8004b12:	4630      	mov	r0, r6
 8004b14:	4639      	mov	r1, r7
 8004b16:	f7fd fe79 	bl	800280c <__aeabi_dcmpgt>
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	f000 80a4 	beq.w	8004c68 <main+0x1c94>
						remoteSensorLastUpdate = 0;
 8004b20:	f04f 0900 	mov.w	r9, #0
 8004b24:	4b17      	ldr	r3, [pc, #92]	; (8004b84 <main+0x1bb0>)
						sprintf(clockPrint, "%02d", rtcSecLast);
 8004b26:	4918      	ldr	r1, [pc, #96]	; (8004b88 <main+0x1bb4>)
 8004b28:	7a1a      	ldrb	r2, [r3, #8]
 8004b2a:	a819      	add	r0, sp, #100	; 0x64
						remoteSensorLastUpdate = 0;
 8004b2c:	f8a3 900c 	strh.w	r9, [r3, #12]
						sprintf(clockPrint, "%02d", rtcSecLast);
 8004b30:	f001 f958 	bl	8005de4 <siprintf>
						LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8004b34:	2128      	movs	r1, #40	; 0x28
 8004b36:	f240 1077 	movw	r0, #375	; 0x177
 8004b3a:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <main+0x1bb8>)
 8004b3c:	aa19      	add	r2, sp, #100	; 0x64
 8004b3e:	f8cd 9000 	str.w	r9, [sp]
 8004b42:	f7fc ff93 	bl	8001a6c <LCD_Font.constprop.0>
						if (temperatureRemoteLast <= -10) {
 8004b46:	e9d5 6704 	ldrd	r6, r7, [r5, #16]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	4639      	mov	r1, r7
 8004b50:	4b0f      	ldr	r3, [pc, #60]	; (8004b90 <main+0x1bbc>)
 8004b52:	f7fd fe47 	bl	80027e4 <__aeabi_dcmple>
 8004b56:	4680      	mov	r8, r0
 8004b58:	e01c      	b.n	8004b94 <main+0x1bc0>
 8004b5a:	bf00      	nop
 8004b5c:	0801b2e5 	.word	0x0801b2e5
 8004b60:	40012c00 	.word	0x40012c00
 8004b64:	0801b2e8 	.word	0x0801b2e8
 8004b68:	20000335 	.word	0x20000335
 8004b6c:	0801b313 	.word	0x0801b313
 8004b70:	0801b2eb 	.word	0x0801b2eb
 8004b74:	200007f8 	.word	0x200007f8
 8004b78:	40554000 	.word	0x40554000
 8004b7c:	c0440000 	.word	0xc0440000
 8004b80:	20000818 	.word	0x20000818
 8004b84:	20000000 	.word	0x20000000
 8004b88:	0801b2c5 	.word	0x0801b2c5
 8004b8c:	08009ac8 	.word	0x08009ac8
 8004b90:	c0240000 	.word	0xc0240000
 8004b94:	2800      	cmp	r0, #0
 8004b96:	f000 8084 	beq.w	8004ca2 <main+0x1cce>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8004b9a:	4632      	mov	r2, r6
 8004b9c:	463b      	mov	r3, r7
 8004b9e:	49a8      	ldr	r1, [pc, #672]	; (8004e40 <main+0x1e6c>)
 8004ba0:	a824      	add	r0, sp, #144	; 0x90
 8004ba2:	f001 f91f 	bl	8005de4 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8004ba6:	215a      	movs	r1, #90	; 0x5a
 8004ba8:	f240 1061 	movw	r0, #353	; 0x161
 8004bac:	4ba5      	ldr	r3, [pc, #660]	; (8004e44 <main+0x1e70>)
 8004bae:	f8cd 9000 	str.w	r9, [sp]
 8004bb2:	aa24      	add	r2, sp, #144	; 0x90
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8004bb4:	f7fc ff5a 	bl	8001a6c <LCD_Font.constprop.0>
						temperatureRemoteLast = temperatureRemote;
 8004bb8:	e9d5 6700 	ldrd	r6, r7, [r5]
						if (temperatureRemoteLast <= -10) {
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	4639      	mov	r1, r7
						temperatureRemoteLast = temperatureRemote;
 8004bc2:	e9c5 6704 	strd	r6, r7, [r5, #16]
						if (temperatureRemoteLast <= -10) {
 8004bc6:	4ba0      	ldr	r3, [pc, #640]	; (8004e48 <main+0x1e74>)
 8004bc8:	f7fd fe0c 	bl	80027e4 <__aeabi_dcmple>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	f000 80b7 	beq.w	8004d40 <main+0x1d6c>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8004bd2:	4632      	mov	r2, r6
 8004bd4:	463b      	mov	r3, r7
 8004bd6:	499a      	ldr	r1, [pc, #616]	; (8004e40 <main+0x1e6c>)
 8004bd8:	a824      	add	r0, sp, #144	; 0x90
 8004bda:	f001 f903 	bl	8005de4 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8004bde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004be2:	215a      	movs	r1, #90	; 0x5a
 8004be4:	f240 1061 	movw	r0, #353	; 0x161
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	4b96      	ldr	r3, [pc, #600]	; (8004e44 <main+0x1e70>)
 8004bec:	aa24      	add	r2, sp, #144	; 0x90
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8004bee:	f7fc ff3d 	bl	8001a6c <LCD_Font.constprop.0>
						if (humidityRemoteLast >= 10) {
 8004bf2:	4b96      	ldr	r3, [pc, #600]	; (8004e4c <main+0x1e78>)
 8004bf4:	4652      	mov	r2, sl
 8004bf6:	e953 6702 	ldrd	r6, r7, [r3, #-8]
 8004bfa:	465b      	mov	r3, fp
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	4639      	mov	r1, r7
 8004c00:	f7fd fdfa 	bl	80027f8 <__aeabi_dcmpge>
 8004c04:	4605      	mov	r5, r0
 8004c06:	2800      	cmp	r0, #0
 8004c08:	f000 80ec 	beq.w	8004de4 <main+0x1e10>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8004c0c:	4632      	mov	r2, r6
 8004c0e:	463b      	mov	r3, r7
 8004c10:	498b      	ldr	r1, [pc, #556]	; (8004e40 <main+0x1e6c>)
 8004c12:	a815      	add	r0, sp, #84	; 0x54
 8004c14:	f001 f8e6 	bl	8005de4 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8004c18:	2300      	movs	r3, #0
 8004c1a:	2128      	movs	r1, #40	; 0x28
 8004c1c:	f240 1073 	movw	r0, #371	; 0x173
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	4b88      	ldr	r3, [pc, #544]	; (8004e44 <main+0x1e70>)
 8004c24:	aa15      	add	r2, sp, #84	; 0x54
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8004c26:	f7fc ff21 	bl	8001a6c <LCD_Font.constprop.0>
						humidityRemoteLast = humidityRemote;
 8004c2a:	9b02      	ldr	r3, [sp, #8]
						if (humidityRemoteLast >= 10) {
 8004c2c:	4652      	mov	r2, sl
						humidityRemoteLast = humidityRemote;
 8004c2e:	e953 6702 	ldrd	r6, r7, [r3, #-8]
 8004c32:	4b86      	ldr	r3, [pc, #536]	; (8004e4c <main+0x1e78>)
						if (humidityRemoteLast >= 10) {
 8004c34:	4630      	mov	r0, r6
						humidityRemoteLast = humidityRemote;
 8004c36:	e943 6702 	strd	r6, r7, [r3, #-8]
						if (humidityRemoteLast >= 10) {
 8004c3a:	4639      	mov	r1, r7
 8004c3c:	465b      	mov	r3, fp
 8004c3e:	f7fd fddb 	bl	80027f8 <__aeabi_dcmpge>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	f000 80e4 	beq.w	8004e10 <main+0x1e3c>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8004c48:	4632      	mov	r2, r6
 8004c4a:	463b      	mov	r3, r7
 8004c4c:	497c      	ldr	r1, [pc, #496]	; (8004e40 <main+0x1e6c>)
 8004c4e:	a815      	add	r0, sp, #84	; 0x54
 8004c50:	f001 f8c8 	bl	8005de4 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 8004c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c58:	2128      	movs	r1, #40	; 0x28
 8004c5a:	f240 1073 	movw	r0, #371	; 0x173
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	4b78      	ldr	r3, [pc, #480]	; (8004e44 <main+0x1e70>)
 8004c62:	aa15      	add	r2, sp, #84	; 0x54
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 8004c64:	f7fc ff02 	bl	8001a6c <LCD_Font.constprop.0>
				rx_index = 0;
 8004c68:	2100      	movs	r1, #0
				for (uint8_t i = 0; i < UART_RX_BUFFER_SIZE; i++) rx_buffer[i] = 0;
 8004c6a:	2210      	movs	r2, #16
 8004c6c:	4878      	ldr	r0, [pc, #480]	; (8004e50 <main+0x1e7c>)
				rx_index = 0;
 8004c6e:	f884 112c 	strb.w	r1, [r4, #300]	; 0x12c
				for (uint8_t i = 0; i < UART_RX_BUFFER_SIZE; i++) rx_buffer[i] = 0;
 8004c72:	f000 fa3d 	bl	80050f0 <memset>
 8004c76:	e599      	b.n	80047ac <main+0x17d8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c78:	2080      	movs	r0, #128	; 0x80
 8004c7a:	f7fb fd19 	bl	80006b0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	f47f aee4 	bne.w	8004a4c <main+0x1a78>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c84:	6862      	ldr	r2, [r4, #4]
      if (pdata8bits == NULL)
 8004c86:	b94d      	cbnz	r5, 8004c9c <main+0x1cc8>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c88:	f836 3b02 	ldrh.w	r3, [r6], #2
 8004c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c90:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004c92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004c9a:	e6ca      	b.n	8004a32 <main+0x1a5e>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c9c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004ca0:	e7f6      	b.n	8004c90 <main+0x1cbc>
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	4639      	mov	r1, r7
 8004caa:	f7fd fd91 	bl	80027d0 <__aeabi_dcmplt>
 8004cae:	b1a0      	cbz	r0, 8004cda <main+0x1d06>
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	4639      	mov	r1, r7
 8004cb6:	4b64      	ldr	r3, [pc, #400]	; (8004e48 <main+0x1e74>)
 8004cb8:	f7fd fda8 	bl	800280c <__aeabi_dcmpgt>
 8004cbc:	b168      	cbz	r0, 8004cda <main+0x1d06>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8004cbe:	4632      	mov	r2, r6
 8004cc0:	463b      	mov	r3, r7
 8004cc2:	495f      	ldr	r1, [pc, #380]	; (8004e40 <main+0x1e6c>)
 8004cc4:	a824      	add	r0, sp, #144	; 0x90
 8004cc6:	f001 f88d 	bl	8005de4 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8004cca:	215a      	movs	r1, #90	; 0x5a
 8004ccc:	f240 1081 	movw	r0, #385	; 0x181
 8004cd0:	4b5c      	ldr	r3, [pc, #368]	; (8004e44 <main+0x1e70>)
 8004cd2:	f8cd 8000 	str.w	r8, [sp]
 8004cd6:	aa24      	add	r2, sp, #144	; 0x90
 8004cd8:	e76c      	b.n	8004bb4 <main+0x1be0>
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2300      	movs	r3, #0
 8004cde:	4630      	mov	r0, r6
 8004ce0:	4639      	mov	r1, r7
 8004ce2:	f7fd fd93 	bl	800280c <__aeabi_dcmpgt>
 8004ce6:	b1a0      	cbz	r0, 8004d12 <main+0x1d3e>
 8004ce8:	4652      	mov	r2, sl
 8004cea:	465b      	mov	r3, fp
 8004cec:	4630      	mov	r0, r6
 8004cee:	4639      	mov	r1, r7
 8004cf0:	f7fd fd6e 	bl	80027d0 <__aeabi_dcmplt>
 8004cf4:	b168      	cbz	r0, 8004d12 <main+0x1d3e>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8004cf6:	4632      	mov	r2, r6
 8004cf8:	463b      	mov	r3, r7
 8004cfa:	4956      	ldr	r1, [pc, #344]	; (8004e54 <main+0x1e80>)
 8004cfc:	a824      	add	r0, sp, #144	; 0x90
 8004cfe:	f001 f871 	bl	8005de4 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8004d02:	2300      	movs	r3, #0
 8004d04:	215a      	movs	r1, #90	; 0x5a
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8004d0c:	4b4d      	ldr	r3, [pc, #308]	; (8004e44 <main+0x1e70>)
 8004d0e:	aa24      	add	r2, sp, #144	; 0x90
 8004d10:	e750      	b.n	8004bb4 <main+0x1be0>
						else if (temperatureRemoteLast >= 10) {
 8004d12:	4652      	mov	r2, sl
 8004d14:	465b      	mov	r3, fp
 8004d16:	4630      	mov	r0, r6
 8004d18:	4639      	mov	r1, r7
 8004d1a:	f7fd fd6d 	bl	80027f8 <__aeabi_dcmpge>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	f43f af4a 	beq.w	8004bb8 <main+0x1be4>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8004d24:	4632      	mov	r2, r6
 8004d26:	463b      	mov	r3, r7
 8004d28:	494a      	ldr	r1, [pc, #296]	; (8004e54 <main+0x1e80>)
 8004d2a:	a824      	add	r0, sp, #144	; 0x90
 8004d2c:	f001 f85a 	bl	8005de4 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8004d30:	2300      	movs	r3, #0
 8004d32:	215a      	movs	r1, #90	; 0x5a
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8004d3a:	4b42      	ldr	r3, [pc, #264]	; (8004e44 <main+0x1e70>)
 8004d3c:	aa24      	add	r2, sp, #144	; 0x90
 8004d3e:	e739      	b.n	8004bb4 <main+0x1be0>
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 8004d40:	2200      	movs	r2, #0
 8004d42:	2300      	movs	r3, #0
 8004d44:	4630      	mov	r0, r6
 8004d46:	4639      	mov	r1, r7
 8004d48:	f7fd fd42 	bl	80027d0 <__aeabi_dcmplt>
 8004d4c:	b1a8      	cbz	r0, 8004d7a <main+0x1da6>
 8004d4e:	2200      	movs	r2, #0
 8004d50:	4630      	mov	r0, r6
 8004d52:	4639      	mov	r1, r7
 8004d54:	4b3c      	ldr	r3, [pc, #240]	; (8004e48 <main+0x1e74>)
 8004d56:	f7fd fd59 	bl	800280c <__aeabi_dcmpgt>
 8004d5a:	b170      	cbz	r0, 8004d7a <main+0x1da6>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8004d5c:	4632      	mov	r2, r6
 8004d5e:	463b      	mov	r3, r7
 8004d60:	4937      	ldr	r1, [pc, #220]	; (8004e40 <main+0x1e6c>)
 8004d62:	a824      	add	r0, sp, #144	; 0x90
 8004d64:	f001 f83e 	bl	8005de4 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8004d68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d6c:	215a      	movs	r1, #90	; 0x5a
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	f240 1081 	movw	r0, #385	; 0x181
 8004d74:	4b33      	ldr	r3, [pc, #204]	; (8004e44 <main+0x1e70>)
 8004d76:	aa24      	add	r2, sp, #144	; 0x90
 8004d78:	e739      	b.n	8004bee <main+0x1c1a>
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	4630      	mov	r0, r6
 8004d80:	4639      	mov	r1, r7
 8004d82:	f7fd fd43 	bl	800280c <__aeabi_dcmpgt>
 8004d86:	b1a8      	cbz	r0, 8004db4 <main+0x1de0>
 8004d88:	4652      	mov	r2, sl
 8004d8a:	465b      	mov	r3, fp
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	4639      	mov	r1, r7
 8004d90:	f7fd fd1e 	bl	80027d0 <__aeabi_dcmplt>
 8004d94:	b170      	cbz	r0, 8004db4 <main+0x1de0>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8004d96:	4632      	mov	r2, r6
 8004d98:	463b      	mov	r3, r7
 8004d9a:	492e      	ldr	r1, [pc, #184]	; (8004e54 <main+0x1e80>)
 8004d9c:	a824      	add	r0, sp, #144	; 0x90
 8004d9e:	f001 f821 	bl	8005de4 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8004da2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004da6:	215a      	movs	r1, #90	; 0x5a
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8004dae:	4b25      	ldr	r3, [pc, #148]	; (8004e44 <main+0x1e70>)
 8004db0:	aa24      	add	r2, sp, #144	; 0x90
 8004db2:	e71c      	b.n	8004bee <main+0x1c1a>
						else if (temperatureRemoteLast >= 10) {
 8004db4:	4652      	mov	r2, sl
 8004db6:	465b      	mov	r3, fp
 8004db8:	4630      	mov	r0, r6
 8004dba:	4639      	mov	r1, r7
 8004dbc:	f7fd fd1c 	bl	80027f8 <__aeabi_dcmpge>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	f43f af16 	beq.w	8004bf2 <main+0x1c1e>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8004dc6:	4632      	mov	r2, r6
 8004dc8:	463b      	mov	r3, r7
 8004dca:	4922      	ldr	r1, [pc, #136]	; (8004e54 <main+0x1e80>)
 8004dcc:	a824      	add	r0, sp, #144	; 0x90
 8004dce:	f001 f809 	bl	8005de4 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8004dd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004dd6:	215a      	movs	r1, #90	; 0x5a
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8004dde:	4b19      	ldr	r3, [pc, #100]	; (8004e44 <main+0x1e70>)
 8004de0:	aa24      	add	r2, sp, #144	; 0x90
 8004de2:	e704      	b.n	8004bee <main+0x1c1a>
						else if (humidityRemoteLast < 10) {
 8004de4:	4652      	mov	r2, sl
 8004de6:	465b      	mov	r3, fp
 8004de8:	4630      	mov	r0, r6
 8004dea:	4639      	mov	r1, r7
 8004dec:	f7fd fcf0 	bl	80027d0 <__aeabi_dcmplt>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	f43f af1a 	beq.w	8004c2a <main+0x1c56>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8004df6:	4632      	mov	r2, r6
 8004df8:	463b      	mov	r3, r7
 8004dfa:	4911      	ldr	r1, [pc, #68]	; (8004e40 <main+0x1e6c>)
 8004dfc:	a815      	add	r0, sp, #84	; 0x54
 8004dfe:	f000 fff1 	bl	8005de4 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8004e02:	2128      	movs	r1, #40	; 0x28
 8004e04:	f240 1093 	movw	r0, #403	; 0x193
 8004e08:	4b0e      	ldr	r3, [pc, #56]	; (8004e44 <main+0x1e70>)
 8004e0a:	9500      	str	r5, [sp, #0]
 8004e0c:	aa15      	add	r2, sp, #84	; 0x54
 8004e0e:	e70a      	b.n	8004c26 <main+0x1c52>
						else if (humidityRemoteLast < 10) {
 8004e10:	4652      	mov	r2, sl
 8004e12:	465b      	mov	r3, fp
 8004e14:	4630      	mov	r0, r6
 8004e16:	4639      	mov	r1, r7
 8004e18:	f7fd fcda 	bl	80027d0 <__aeabi_dcmplt>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	f43f af23 	beq.w	8004c68 <main+0x1c94>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8004e22:	4632      	mov	r2, r6
 8004e24:	463b      	mov	r3, r7
 8004e26:	4906      	ldr	r1, [pc, #24]	; (8004e40 <main+0x1e6c>)
 8004e28:	a815      	add	r0, sp, #84	; 0x54
 8004e2a:	f000 ffdb 	bl	8005de4 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 8004e2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e32:	2128      	movs	r1, #40	; 0x28
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	f240 1093 	movw	r0, #403	; 0x193
 8004e3a:	4b02      	ldr	r3, [pc, #8]	; (8004e44 <main+0x1e70>)
 8004e3c:	aa15      	add	r2, sp, #84	; 0x54
 8004e3e:	e711      	b.n	8004c64 <main+0x1c90>
 8004e40:	0801b2ef 	.word	0x0801b2ef
 8004e44:	08009ac8 	.word	0x08009ac8
 8004e48:	c0240000 	.word	0xc0240000
 8004e4c:	20000818 	.word	0x20000818
 8004e50:	20000335 	.word	0x20000335
 8004e54:	0801b2ee 	.word	0x0801b2ee
				if (temperatureRemoteLast && humidityRemoteLast) {
 8004e58:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8005024 <main+0x2050>
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	e9d9 6700 	ldrd	r6, r7, [r9]
 8004e62:	2300      	movs	r3, #0
 8004e64:	4630      	mov	r0, r6
 8004e66:	4639      	mov	r1, r7
 8004e68:	f7fd fca8 	bl	80027bc <__aeabi_dcmpeq>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d143      	bne.n	8004ef8 <main+0x1f24>
 8004e70:	e9d9 0102 	ldrd	r0, r1, [r9, #8]
 8004e74:	2200      	movs	r2, #0
 8004e76:	2300      	movs	r3, #0
 8004e78:	f7fd fca0 	bl	80027bc <__aeabi_dcmpeq>
 8004e7c:	9002      	str	r0, [sp, #8]
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	d13a      	bne.n	8004ef8 <main+0x1f24>
					if (temperatureRemoteLast <= -10) {
 8004e82:	2200      	movs	r2, #0
 8004e84:	4630      	mov	r0, r6
 8004e86:	4639      	mov	r1, r7
 8004e88:	4b67      	ldr	r3, [pc, #412]	; (8005028 <main+0x2054>)
 8004e8a:	f7fd fcab 	bl	80027e4 <__aeabi_dcmple>
 8004e8e:	4680      	mov	r8, r0
 8004e90:	2800      	cmp	r0, #0
 8004e92:	d04f      	beq.n	8004f34 <main+0x1f60>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8004e94:	4632      	mov	r2, r6
 8004e96:	463b      	mov	r3, r7
 8004e98:	4964      	ldr	r1, [pc, #400]	; (800502c <main+0x2058>)
 8004e9a:	a824      	add	r0, sp, #144	; 0x90
 8004e9c:	f000 ffa2 	bl	8005de4 <siprintf>
						LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8004ea0:	215a      	movs	r1, #90	; 0x5a
 8004ea2:	f240 1061 	movw	r0, #353	; 0x161
 8004ea6:	9b02      	ldr	r3, [sp, #8]
 8004ea8:	aa24      	add	r2, sp, #144	; 0x90
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	4b60      	ldr	r3, [pc, #384]	; (8005030 <main+0x205c>)
						LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8004eae:	f7fc fddd 	bl	8001a6c <LCD_Font.constprop.0>
					if (humidityRemoteLast >= 10) {
 8004eb2:	4b60      	ldr	r3, [pc, #384]	; (8005034 <main+0x2060>)
 8004eb4:	4652      	mov	r2, sl
 8004eb6:	e953 6702 	ldrd	r6, r7, [r3, #-8]
 8004eba:	465b      	mov	r3, fp
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	4639      	mov	r1, r7
 8004ec0:	f7fd fc9a 	bl	80027f8 <__aeabi_dcmpge>
 8004ec4:	4680      	mov	r8, r0
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	f000 8083 	beq.w	8004fd2 <main+0x1ffe>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8004ecc:	4632      	mov	r2, r6
 8004ece:	463b      	mov	r3, r7
 8004ed0:	4956      	ldr	r1, [pc, #344]	; (800502c <main+0x2058>)
 8004ed2:	a815      	add	r0, sp, #84	; 0x54
 8004ed4:	f000 ff86 	bl	8005de4 <siprintf>
						LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8004ed8:	2300      	movs	r3, #0
 8004eda:	2128      	movs	r1, #40	; 0x28
 8004edc:	f240 1073 	movw	r0, #371	; 0x173
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	4b53      	ldr	r3, [pc, #332]	; (8005030 <main+0x205c>)
 8004ee4:	aa15      	add	r2, sp, #84	; 0x54
						LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8004ee6:	f7fc fdc1 	bl	8001a6c <LCD_Font.constprop.0>
					temperatureRemoteLast = 0;
 8004eea:	2100      	movs	r1, #0
 8004eec:	2200      	movs	r2, #0
					humidityRemoteLast = 0;
 8004eee:	4b51      	ldr	r3, [pc, #324]	; (8005034 <main+0x2060>)
					temperatureRemoteLast = 0;
 8004ef0:	e9c9 1200 	strd	r1, r2, [r9]
					humidityRemoteLast = 0;
 8004ef4:	e943 1202 	strd	r1, r2, [r3, #-8]
				sprintf(clockPrint, "%02d", rtcSecLast);
 8004ef8:	7a2a      	ldrb	r2, [r5, #8]
 8004efa:	494f      	ldr	r1, [pc, #316]	; (8005038 <main+0x2064>)
 8004efc:	a819      	add	r0, sp, #100	; 0x64
 8004efe:	f000 ff71 	bl	8005de4 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8004f02:	2300      	movs	r3, #0
 8004f04:	aa19      	add	r2, sp, #100	; 0x64
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	2128      	movs	r1, #40	; 0x28
 8004f0a:	4b49      	ldr	r3, [pc, #292]	; (8005030 <main+0x205c>)
 8004f0c:	f240 1077 	movw	r0, #375	; 0x177
 8004f10:	f7fc fdac 	bl	8001a6c <LCD_Font.constprop.0>
				sprintf(clockPrint, "%02d", rtcSec);
 8004f14:	f894 25ae 	ldrb.w	r2, [r4, #1454]	; 0x5ae
 8004f18:	4947      	ldr	r1, [pc, #284]	; (8005038 <main+0x2064>)
 8004f1a:	a819      	add	r0, sp, #100	; 0x64
 8004f1c:	f000 ff62 	bl	8005de4 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, ORANGE);
 8004f20:	4b46      	ldr	r3, [pc, #280]	; (800503c <main+0x2068>)
 8004f22:	2128      	movs	r1, #40	; 0x28
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	f240 1077 	movw	r0, #375	; 0x177
 8004f2a:	4b41      	ldr	r3, [pc, #260]	; (8005030 <main+0x205c>)
 8004f2c:	aa19      	add	r2, sp, #100	; 0x64
 8004f2e:	f7fc fd9d 	bl	8001a6c <LCD_Font.constprop.0>
 8004f32:	e443      	b.n	80047bc <main+0x17e8>
					else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 8004f34:	2200      	movs	r2, #0
 8004f36:	2300      	movs	r3, #0
 8004f38:	4630      	mov	r0, r6
 8004f3a:	4639      	mov	r1, r7
 8004f3c:	f7fd fc48 	bl	80027d0 <__aeabi_dcmplt>
 8004f40:	b1a0      	cbz	r0, 8004f6c <main+0x1f98>
 8004f42:	2200      	movs	r2, #0
 8004f44:	4630      	mov	r0, r6
 8004f46:	4639      	mov	r1, r7
 8004f48:	4b37      	ldr	r3, [pc, #220]	; (8005028 <main+0x2054>)
 8004f4a:	f7fd fc5f 	bl	800280c <__aeabi_dcmpgt>
 8004f4e:	b168      	cbz	r0, 8004f6c <main+0x1f98>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8004f50:	4632      	mov	r2, r6
 8004f52:	463b      	mov	r3, r7
 8004f54:	4935      	ldr	r1, [pc, #212]	; (800502c <main+0x2058>)
 8004f56:	a824      	add	r0, sp, #144	; 0x90
 8004f58:	f000 ff44 	bl	8005de4 <siprintf>
						LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8004f5c:	215a      	movs	r1, #90	; 0x5a
 8004f5e:	f240 1081 	movw	r0, #385	; 0x181
 8004f62:	4b33      	ldr	r3, [pc, #204]	; (8005030 <main+0x205c>)
 8004f64:	f8cd 8000 	str.w	r8, [sp]
 8004f68:	aa24      	add	r2, sp, #144	; 0x90
 8004f6a:	e7a0      	b.n	8004eae <main+0x1eda>
					else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2300      	movs	r3, #0
 8004f70:	4630      	mov	r0, r6
 8004f72:	4639      	mov	r1, r7
 8004f74:	f7fd fc4a 	bl	800280c <__aeabi_dcmpgt>
 8004f78:	b1a0      	cbz	r0, 8004fa4 <main+0x1fd0>
 8004f7a:	4652      	mov	r2, sl
 8004f7c:	465b      	mov	r3, fp
 8004f7e:	4630      	mov	r0, r6
 8004f80:	4639      	mov	r1, r7
 8004f82:	f7fd fc25 	bl	80027d0 <__aeabi_dcmplt>
 8004f86:	b168      	cbz	r0, 8004fa4 <main+0x1fd0>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8004f88:	4632      	mov	r2, r6
 8004f8a:	463b      	mov	r3, r7
 8004f8c:	492c      	ldr	r1, [pc, #176]	; (8005040 <main+0x206c>)
 8004f8e:	a824      	add	r0, sp, #144	; 0x90
 8004f90:	f000 ff28 	bl	8005de4 <siprintf>
						LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8004f94:	2300      	movs	r3, #0
 8004f96:	215a      	movs	r1, #90	; 0x5a
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8004f9e:	4b24      	ldr	r3, [pc, #144]	; (8005030 <main+0x205c>)
 8004fa0:	aa24      	add	r2, sp, #144	; 0x90
 8004fa2:	e784      	b.n	8004eae <main+0x1eda>
					else if (temperatureRemoteLast >= 10) {
 8004fa4:	4652      	mov	r2, sl
 8004fa6:	465b      	mov	r3, fp
 8004fa8:	4630      	mov	r0, r6
 8004faa:	4639      	mov	r1, r7
 8004fac:	f7fd fc24 	bl	80027f8 <__aeabi_dcmpge>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	f43f af7e 	beq.w	8004eb2 <main+0x1ede>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8004fb6:	4632      	mov	r2, r6
 8004fb8:	463b      	mov	r3, r7
 8004fba:	4921      	ldr	r1, [pc, #132]	; (8005040 <main+0x206c>)
 8004fbc:	a824      	add	r0, sp, #144	; 0x90
 8004fbe:	f000 ff11 	bl	8005de4 <siprintf>
						LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	215a      	movs	r1, #90	; 0x5a
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8004fcc:	4b18      	ldr	r3, [pc, #96]	; (8005030 <main+0x205c>)
 8004fce:	aa24      	add	r2, sp, #144	; 0x90
 8004fd0:	e76d      	b.n	8004eae <main+0x1eda>
					else if (humidityRemoteLast < 10) {
 8004fd2:	4652      	mov	r2, sl
 8004fd4:	465b      	mov	r3, fp
 8004fd6:	4630      	mov	r0, r6
 8004fd8:	4639      	mov	r1, r7
 8004fda:	f7fd fbf9 	bl	80027d0 <__aeabi_dcmplt>
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	d083      	beq.n	8004eea <main+0x1f16>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8004fe2:	4632      	mov	r2, r6
 8004fe4:	463b      	mov	r3, r7
 8004fe6:	4911      	ldr	r1, [pc, #68]	; (800502c <main+0x2058>)
 8004fe8:	a815      	add	r0, sp, #84	; 0x54
 8004fea:	f000 fefb 	bl	8005de4 <siprintf>
						LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8004fee:	2128      	movs	r1, #40	; 0x28
 8004ff0:	f240 1093 	movw	r0, #403	; 0x193
 8004ff4:	4b0e      	ldr	r3, [pc, #56]	; (8005030 <main+0x205c>)
 8004ff6:	f8cd 8000 	str.w	r8, [sp]
 8004ffa:	aa15      	add	r2, sp, #84	; 0x54
 8004ffc:	e773      	b.n	8004ee6 <main+0x1f12>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005002:	f43e ad48 	beq.w	8003a96 <main+0xac2>
 8005006:	4a0f      	ldr	r2, [pc, #60]	; (8005044 <main+0x2070>)
 8005008:	4293      	cmp	r3, r2
 800500a:	f43e ad44 	beq.w	8003a96 <main+0xac2>
 800500e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005012:	4293      	cmp	r3, r2
 8005014:	f43e ad3f 	beq.w	8003a96 <main+0xac2>
    __HAL_TIM_ENABLE(htim);
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	f7fe bd3f 	b.w	8003aa2 <main+0xace>
 8005024:	20000808 	.word	0x20000808
 8005028:	c0240000 	.word	0xc0240000
 800502c:	0801b2ef 	.word	0x0801b2ef
 8005030:	08009ac8 	.word	0x08009ac8
 8005034:	20000818 	.word	0x20000818
 8005038:	0801b2c5 	.word	0x0801b2c5
 800503c:	00ffa500 	.word	0x00ffa500
 8005040:	0801b2ee 	.word	0x0801b2ee
 8005044:	40000400 	.word	0x40000400

08005048 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005048:	480c      	ldr	r0, [pc, #48]	; (800507c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800504a:	490d      	ldr	r1, [pc, #52]	; (8005080 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800504c:	4a0d      	ldr	r2, [pc, #52]	; (8005084 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800504e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005050:	e002      	b.n	8005058 <LoopCopyDataInit>

08005052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005056:	3304      	adds	r3, #4

08005058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800505a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800505c:	d3f9      	bcc.n	8005052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800505e:	4a0a      	ldr	r2, [pc, #40]	; (8005088 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005060:	4c0a      	ldr	r4, [pc, #40]	; (800508c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005064:	e001      	b.n	800506a <LoopFillZerobss>

08005066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005068:	3204      	adds	r2, #4

0800506a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800506a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800506c:	d3fb      	bcc.n	8005066 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800506e:	f7fc ff77 	bl	8001f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005072:	f000 f819 	bl	80050a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005076:	f7fd ffad 	bl	8002fd4 <main>
  bx lr
 800507a:	4770      	bx	lr
  ldr r0, =_sdata
 800507c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005080:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8005084:	0801b824 	.word	0x0801b824
  ldr r2, =_sbss
 8005088:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800508c:	2000082c 	.word	0x2000082c

08005090 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005090:	e7fe      	b.n	8005090 <ADC1_2_IRQHandler>

08005092 <atoi>:
 8005092:	220a      	movs	r2, #10
 8005094:	2100      	movs	r1, #0
 8005096:	f001 bd53 	b.w	8006b40 <strtol>
	...

0800509c <__errno>:
 800509c:	4b01      	ldr	r3, [pc, #4]	; (80050a4 <__errno+0x8>)
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	20000010 	.word	0x20000010

080050a8 <__libc_init_array>:
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	2600      	movs	r6, #0
 80050ac:	4d0c      	ldr	r5, [pc, #48]	; (80050e0 <__libc_init_array+0x38>)
 80050ae:	4c0d      	ldr	r4, [pc, #52]	; (80050e4 <__libc_init_array+0x3c>)
 80050b0:	1b64      	subs	r4, r4, r5
 80050b2:	10a4      	asrs	r4, r4, #2
 80050b4:	42a6      	cmp	r6, r4
 80050b6:	d109      	bne.n	80050cc <__libc_init_array+0x24>
 80050b8:	f004 fcee 	bl	8009a98 <_init>
 80050bc:	2600      	movs	r6, #0
 80050be:	4d0a      	ldr	r5, [pc, #40]	; (80050e8 <__libc_init_array+0x40>)
 80050c0:	4c0a      	ldr	r4, [pc, #40]	; (80050ec <__libc_init_array+0x44>)
 80050c2:	1b64      	subs	r4, r4, r5
 80050c4:	10a4      	asrs	r4, r4, #2
 80050c6:	42a6      	cmp	r6, r4
 80050c8:	d105      	bne.n	80050d6 <__libc_init_array+0x2e>
 80050ca:	bd70      	pop	{r4, r5, r6, pc}
 80050cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80050d0:	4798      	blx	r3
 80050d2:	3601      	adds	r6, #1
 80050d4:	e7ee      	b.n	80050b4 <__libc_init_array+0xc>
 80050d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050da:	4798      	blx	r3
 80050dc:	3601      	adds	r6, #1
 80050de:	e7f2      	b.n	80050c6 <__libc_init_array+0x1e>
 80050e0:	0801b81c 	.word	0x0801b81c
 80050e4:	0801b81c 	.word	0x0801b81c
 80050e8:	0801b81c 	.word	0x0801b81c
 80050ec:	0801b820 	.word	0x0801b820

080050f0 <memset>:
 80050f0:	4603      	mov	r3, r0
 80050f2:	4402      	add	r2, r0
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d100      	bne.n	80050fa <memset+0xa>
 80050f8:	4770      	bx	lr
 80050fa:	f803 1b01 	strb.w	r1, [r3], #1
 80050fe:	e7f9      	b.n	80050f4 <memset+0x4>

08005100 <__cvt>:
 8005100:	2b00      	cmp	r3, #0
 8005102:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005106:	461f      	mov	r7, r3
 8005108:	bfbb      	ittet	lt
 800510a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800510e:	461f      	movlt	r7, r3
 8005110:	2300      	movge	r3, #0
 8005112:	232d      	movlt	r3, #45	; 0x2d
 8005114:	b088      	sub	sp, #32
 8005116:	4614      	mov	r4, r2
 8005118:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800511a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800511c:	7013      	strb	r3, [r2, #0]
 800511e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005120:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005124:	f023 0820 	bic.w	r8, r3, #32
 8005128:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800512c:	d005      	beq.n	800513a <__cvt+0x3a>
 800512e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005132:	d100      	bne.n	8005136 <__cvt+0x36>
 8005134:	3501      	adds	r5, #1
 8005136:	2302      	movs	r3, #2
 8005138:	e000      	b.n	800513c <__cvt+0x3c>
 800513a:	2303      	movs	r3, #3
 800513c:	aa07      	add	r2, sp, #28
 800513e:	9204      	str	r2, [sp, #16]
 8005140:	aa06      	add	r2, sp, #24
 8005142:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005146:	e9cd 3500 	strd	r3, r5, [sp]
 800514a:	4622      	mov	r2, r4
 800514c:	463b      	mov	r3, r7
 800514e:	f001 fd8f 	bl	8006c70 <_dtoa_r>
 8005152:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005156:	4606      	mov	r6, r0
 8005158:	d102      	bne.n	8005160 <__cvt+0x60>
 800515a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800515c:	07db      	lsls	r3, r3, #31
 800515e:	d522      	bpl.n	80051a6 <__cvt+0xa6>
 8005160:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005164:	eb06 0905 	add.w	r9, r6, r5
 8005168:	d110      	bne.n	800518c <__cvt+0x8c>
 800516a:	7833      	ldrb	r3, [r6, #0]
 800516c:	2b30      	cmp	r3, #48	; 0x30
 800516e:	d10a      	bne.n	8005186 <__cvt+0x86>
 8005170:	2200      	movs	r2, #0
 8005172:	2300      	movs	r3, #0
 8005174:	4620      	mov	r0, r4
 8005176:	4639      	mov	r1, r7
 8005178:	f7fd fb20 	bl	80027bc <__aeabi_dcmpeq>
 800517c:	b918      	cbnz	r0, 8005186 <__cvt+0x86>
 800517e:	f1c5 0501 	rsb	r5, r5, #1
 8005182:	f8ca 5000 	str.w	r5, [sl]
 8005186:	f8da 3000 	ldr.w	r3, [sl]
 800518a:	4499      	add	r9, r3
 800518c:	2200      	movs	r2, #0
 800518e:	2300      	movs	r3, #0
 8005190:	4620      	mov	r0, r4
 8005192:	4639      	mov	r1, r7
 8005194:	f7fd fb12 	bl	80027bc <__aeabi_dcmpeq>
 8005198:	b108      	cbz	r0, 800519e <__cvt+0x9e>
 800519a:	f8cd 901c 	str.w	r9, [sp, #28]
 800519e:	2230      	movs	r2, #48	; 0x30
 80051a0:	9b07      	ldr	r3, [sp, #28]
 80051a2:	454b      	cmp	r3, r9
 80051a4:	d307      	bcc.n	80051b6 <__cvt+0xb6>
 80051a6:	4630      	mov	r0, r6
 80051a8:	9b07      	ldr	r3, [sp, #28]
 80051aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80051ac:	1b9b      	subs	r3, r3, r6
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	b008      	add	sp, #32
 80051b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b6:	1c59      	adds	r1, r3, #1
 80051b8:	9107      	str	r1, [sp, #28]
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	e7f0      	b.n	80051a0 <__cvt+0xa0>

080051be <__exponent>:
 80051be:	4603      	mov	r3, r0
 80051c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051c2:	2900      	cmp	r1, #0
 80051c4:	f803 2b02 	strb.w	r2, [r3], #2
 80051c8:	bfb6      	itet	lt
 80051ca:	222d      	movlt	r2, #45	; 0x2d
 80051cc:	222b      	movge	r2, #43	; 0x2b
 80051ce:	4249      	neglt	r1, r1
 80051d0:	2909      	cmp	r1, #9
 80051d2:	7042      	strb	r2, [r0, #1]
 80051d4:	dd2b      	ble.n	800522e <__exponent+0x70>
 80051d6:	f10d 0407 	add.w	r4, sp, #7
 80051da:	46a4      	mov	ip, r4
 80051dc:	270a      	movs	r7, #10
 80051de:	fb91 f6f7 	sdiv	r6, r1, r7
 80051e2:	460a      	mov	r2, r1
 80051e4:	46a6      	mov	lr, r4
 80051e6:	fb07 1516 	mls	r5, r7, r6, r1
 80051ea:	2a63      	cmp	r2, #99	; 0x63
 80051ec:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80051f0:	4631      	mov	r1, r6
 80051f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80051f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80051fa:	dcf0      	bgt.n	80051de <__exponent+0x20>
 80051fc:	3130      	adds	r1, #48	; 0x30
 80051fe:	f1ae 0502 	sub.w	r5, lr, #2
 8005202:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005206:	4629      	mov	r1, r5
 8005208:	1c44      	adds	r4, r0, #1
 800520a:	4561      	cmp	r1, ip
 800520c:	d30a      	bcc.n	8005224 <__exponent+0x66>
 800520e:	f10d 0209 	add.w	r2, sp, #9
 8005212:	eba2 020e 	sub.w	r2, r2, lr
 8005216:	4565      	cmp	r5, ip
 8005218:	bf88      	it	hi
 800521a:	2200      	movhi	r2, #0
 800521c:	4413      	add	r3, r2
 800521e:	1a18      	subs	r0, r3, r0
 8005220:	b003      	add	sp, #12
 8005222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005224:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005228:	f804 2f01 	strb.w	r2, [r4, #1]!
 800522c:	e7ed      	b.n	800520a <__exponent+0x4c>
 800522e:	2330      	movs	r3, #48	; 0x30
 8005230:	3130      	adds	r1, #48	; 0x30
 8005232:	7083      	strb	r3, [r0, #2]
 8005234:	70c1      	strb	r1, [r0, #3]
 8005236:	1d03      	adds	r3, r0, #4
 8005238:	e7f1      	b.n	800521e <__exponent+0x60>
	...

0800523c <_printf_float>:
 800523c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005240:	b091      	sub	sp, #68	; 0x44
 8005242:	460c      	mov	r4, r1
 8005244:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005248:	4616      	mov	r6, r2
 800524a:	461f      	mov	r7, r3
 800524c:	4605      	mov	r5, r0
 800524e:	f002 fe63 	bl	8007f18 <_localeconv_r>
 8005252:	6803      	ldr	r3, [r0, #0]
 8005254:	4618      	mov	r0, r3
 8005256:	9309      	str	r3, [sp, #36]	; 0x24
 8005258:	f7fc fe84 	bl	8001f64 <strlen>
 800525c:	2300      	movs	r3, #0
 800525e:	930e      	str	r3, [sp, #56]	; 0x38
 8005260:	f8d8 3000 	ldr.w	r3, [r8]
 8005264:	900a      	str	r0, [sp, #40]	; 0x28
 8005266:	3307      	adds	r3, #7
 8005268:	f023 0307 	bic.w	r3, r3, #7
 800526c:	f103 0208 	add.w	r2, r3, #8
 8005270:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005274:	f8d4 b000 	ldr.w	fp, [r4]
 8005278:	f8c8 2000 	str.w	r2, [r8]
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005284:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005288:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800528c:	930b      	str	r3, [sp, #44]	; 0x2c
 800528e:	f04f 32ff 	mov.w	r2, #4294967295
 8005292:	4640      	mov	r0, r8
 8005294:	4b9c      	ldr	r3, [pc, #624]	; (8005508 <_printf_float+0x2cc>)
 8005296:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005298:	f7fd fac2 	bl	8002820 <__aeabi_dcmpun>
 800529c:	bb70      	cbnz	r0, 80052fc <_printf_float+0xc0>
 800529e:	f04f 32ff 	mov.w	r2, #4294967295
 80052a2:	4640      	mov	r0, r8
 80052a4:	4b98      	ldr	r3, [pc, #608]	; (8005508 <_printf_float+0x2cc>)
 80052a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052a8:	f7fd fa9c 	bl	80027e4 <__aeabi_dcmple>
 80052ac:	bb30      	cbnz	r0, 80052fc <_printf_float+0xc0>
 80052ae:	2200      	movs	r2, #0
 80052b0:	2300      	movs	r3, #0
 80052b2:	4640      	mov	r0, r8
 80052b4:	4651      	mov	r1, sl
 80052b6:	f7fd fa8b 	bl	80027d0 <__aeabi_dcmplt>
 80052ba:	b110      	cbz	r0, 80052c2 <_printf_float+0x86>
 80052bc:	232d      	movs	r3, #45	; 0x2d
 80052be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052c2:	4b92      	ldr	r3, [pc, #584]	; (800550c <_printf_float+0x2d0>)
 80052c4:	4892      	ldr	r0, [pc, #584]	; (8005510 <_printf_float+0x2d4>)
 80052c6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80052ca:	bf94      	ite	ls
 80052cc:	4698      	movls	r8, r3
 80052ce:	4680      	movhi	r8, r0
 80052d0:	2303      	movs	r3, #3
 80052d2:	f04f 0a00 	mov.w	sl, #0
 80052d6:	6123      	str	r3, [r4, #16]
 80052d8:	f02b 0304 	bic.w	r3, fp, #4
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	4633      	mov	r3, r6
 80052e0:	4621      	mov	r1, r4
 80052e2:	4628      	mov	r0, r5
 80052e4:	9700      	str	r7, [sp, #0]
 80052e6:	aa0f      	add	r2, sp, #60	; 0x3c
 80052e8:	f000 f9d4 	bl	8005694 <_printf_common>
 80052ec:	3001      	adds	r0, #1
 80052ee:	f040 8090 	bne.w	8005412 <_printf_float+0x1d6>
 80052f2:	f04f 30ff 	mov.w	r0, #4294967295
 80052f6:	b011      	add	sp, #68	; 0x44
 80052f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052fc:	4642      	mov	r2, r8
 80052fe:	4653      	mov	r3, sl
 8005300:	4640      	mov	r0, r8
 8005302:	4651      	mov	r1, sl
 8005304:	f7fd fa8c 	bl	8002820 <__aeabi_dcmpun>
 8005308:	b148      	cbz	r0, 800531e <_printf_float+0xe2>
 800530a:	f1ba 0f00 	cmp.w	sl, #0
 800530e:	bfb8      	it	lt
 8005310:	232d      	movlt	r3, #45	; 0x2d
 8005312:	4880      	ldr	r0, [pc, #512]	; (8005514 <_printf_float+0x2d8>)
 8005314:	bfb8      	it	lt
 8005316:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800531a:	4b7f      	ldr	r3, [pc, #508]	; (8005518 <_printf_float+0x2dc>)
 800531c:	e7d3      	b.n	80052c6 <_printf_float+0x8a>
 800531e:	6863      	ldr	r3, [r4, #4]
 8005320:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	d142      	bne.n	80053ae <_printf_float+0x172>
 8005328:	2306      	movs	r3, #6
 800532a:	6063      	str	r3, [r4, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	9206      	str	r2, [sp, #24]
 8005330:	aa0e      	add	r2, sp, #56	; 0x38
 8005332:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005336:	aa0d      	add	r2, sp, #52	; 0x34
 8005338:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800533c:	9203      	str	r2, [sp, #12]
 800533e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005342:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005346:	6023      	str	r3, [r4, #0]
 8005348:	6863      	ldr	r3, [r4, #4]
 800534a:	4642      	mov	r2, r8
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	4628      	mov	r0, r5
 8005350:	4653      	mov	r3, sl
 8005352:	910b      	str	r1, [sp, #44]	; 0x2c
 8005354:	f7ff fed4 	bl	8005100 <__cvt>
 8005358:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800535a:	4680      	mov	r8, r0
 800535c:	2947      	cmp	r1, #71	; 0x47
 800535e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005360:	d108      	bne.n	8005374 <_printf_float+0x138>
 8005362:	1cc8      	adds	r0, r1, #3
 8005364:	db02      	blt.n	800536c <_printf_float+0x130>
 8005366:	6863      	ldr	r3, [r4, #4]
 8005368:	4299      	cmp	r1, r3
 800536a:	dd40      	ble.n	80053ee <_printf_float+0x1b2>
 800536c:	f1a9 0902 	sub.w	r9, r9, #2
 8005370:	fa5f f989 	uxtb.w	r9, r9
 8005374:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005378:	d81f      	bhi.n	80053ba <_printf_float+0x17e>
 800537a:	464a      	mov	r2, r9
 800537c:	3901      	subs	r1, #1
 800537e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005382:	910d      	str	r1, [sp, #52]	; 0x34
 8005384:	f7ff ff1b 	bl	80051be <__exponent>
 8005388:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800538a:	4682      	mov	sl, r0
 800538c:	1813      	adds	r3, r2, r0
 800538e:	2a01      	cmp	r2, #1
 8005390:	6123      	str	r3, [r4, #16]
 8005392:	dc02      	bgt.n	800539a <_printf_float+0x15e>
 8005394:	6822      	ldr	r2, [r4, #0]
 8005396:	07d2      	lsls	r2, r2, #31
 8005398:	d501      	bpl.n	800539e <_printf_float+0x162>
 800539a:	3301      	adds	r3, #1
 800539c:	6123      	str	r3, [r4, #16]
 800539e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d09b      	beq.n	80052de <_printf_float+0xa2>
 80053a6:	232d      	movs	r3, #45	; 0x2d
 80053a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053ac:	e797      	b.n	80052de <_printf_float+0xa2>
 80053ae:	2947      	cmp	r1, #71	; 0x47
 80053b0:	d1bc      	bne.n	800532c <_printf_float+0xf0>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1ba      	bne.n	800532c <_printf_float+0xf0>
 80053b6:	2301      	movs	r3, #1
 80053b8:	e7b7      	b.n	800532a <_printf_float+0xee>
 80053ba:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80053be:	d118      	bne.n	80053f2 <_printf_float+0x1b6>
 80053c0:	2900      	cmp	r1, #0
 80053c2:	6863      	ldr	r3, [r4, #4]
 80053c4:	dd0b      	ble.n	80053de <_printf_float+0x1a2>
 80053c6:	6121      	str	r1, [r4, #16]
 80053c8:	b913      	cbnz	r3, 80053d0 <_printf_float+0x194>
 80053ca:	6822      	ldr	r2, [r4, #0]
 80053cc:	07d0      	lsls	r0, r2, #31
 80053ce:	d502      	bpl.n	80053d6 <_printf_float+0x19a>
 80053d0:	3301      	adds	r3, #1
 80053d2:	440b      	add	r3, r1
 80053d4:	6123      	str	r3, [r4, #16]
 80053d6:	f04f 0a00 	mov.w	sl, #0
 80053da:	65a1      	str	r1, [r4, #88]	; 0x58
 80053dc:	e7df      	b.n	800539e <_printf_float+0x162>
 80053de:	b913      	cbnz	r3, 80053e6 <_printf_float+0x1aa>
 80053e0:	6822      	ldr	r2, [r4, #0]
 80053e2:	07d2      	lsls	r2, r2, #31
 80053e4:	d501      	bpl.n	80053ea <_printf_float+0x1ae>
 80053e6:	3302      	adds	r3, #2
 80053e8:	e7f4      	b.n	80053d4 <_printf_float+0x198>
 80053ea:	2301      	movs	r3, #1
 80053ec:	e7f2      	b.n	80053d4 <_printf_float+0x198>
 80053ee:	f04f 0967 	mov.w	r9, #103	; 0x67
 80053f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053f4:	4299      	cmp	r1, r3
 80053f6:	db05      	blt.n	8005404 <_printf_float+0x1c8>
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	6121      	str	r1, [r4, #16]
 80053fc:	07d8      	lsls	r0, r3, #31
 80053fe:	d5ea      	bpl.n	80053d6 <_printf_float+0x19a>
 8005400:	1c4b      	adds	r3, r1, #1
 8005402:	e7e7      	b.n	80053d4 <_printf_float+0x198>
 8005404:	2900      	cmp	r1, #0
 8005406:	bfcc      	ite	gt
 8005408:	2201      	movgt	r2, #1
 800540a:	f1c1 0202 	rsble	r2, r1, #2
 800540e:	4413      	add	r3, r2
 8005410:	e7e0      	b.n	80053d4 <_printf_float+0x198>
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	055a      	lsls	r2, r3, #21
 8005416:	d407      	bmi.n	8005428 <_printf_float+0x1ec>
 8005418:	6923      	ldr	r3, [r4, #16]
 800541a:	4642      	mov	r2, r8
 800541c:	4631      	mov	r1, r6
 800541e:	4628      	mov	r0, r5
 8005420:	47b8      	blx	r7
 8005422:	3001      	adds	r0, #1
 8005424:	d12b      	bne.n	800547e <_printf_float+0x242>
 8005426:	e764      	b.n	80052f2 <_printf_float+0xb6>
 8005428:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800542c:	f240 80dd 	bls.w	80055ea <_printf_float+0x3ae>
 8005430:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005434:	2200      	movs	r2, #0
 8005436:	2300      	movs	r3, #0
 8005438:	f7fd f9c0 	bl	80027bc <__aeabi_dcmpeq>
 800543c:	2800      	cmp	r0, #0
 800543e:	d033      	beq.n	80054a8 <_printf_float+0x26c>
 8005440:	2301      	movs	r3, #1
 8005442:	4631      	mov	r1, r6
 8005444:	4628      	mov	r0, r5
 8005446:	4a35      	ldr	r2, [pc, #212]	; (800551c <_printf_float+0x2e0>)
 8005448:	47b8      	blx	r7
 800544a:	3001      	adds	r0, #1
 800544c:	f43f af51 	beq.w	80052f2 <_printf_float+0xb6>
 8005450:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005454:	429a      	cmp	r2, r3
 8005456:	db02      	blt.n	800545e <_printf_float+0x222>
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	07d8      	lsls	r0, r3, #31
 800545c:	d50f      	bpl.n	800547e <_printf_float+0x242>
 800545e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005462:	4631      	mov	r1, r6
 8005464:	4628      	mov	r0, r5
 8005466:	47b8      	blx	r7
 8005468:	3001      	adds	r0, #1
 800546a:	f43f af42 	beq.w	80052f2 <_printf_float+0xb6>
 800546e:	f04f 0800 	mov.w	r8, #0
 8005472:	f104 091a 	add.w	r9, r4, #26
 8005476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005478:	3b01      	subs	r3, #1
 800547a:	4543      	cmp	r3, r8
 800547c:	dc09      	bgt.n	8005492 <_printf_float+0x256>
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	079b      	lsls	r3, r3, #30
 8005482:	f100 8102 	bmi.w	800568a <_printf_float+0x44e>
 8005486:	68e0      	ldr	r0, [r4, #12]
 8005488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800548a:	4298      	cmp	r0, r3
 800548c:	bfb8      	it	lt
 800548e:	4618      	movlt	r0, r3
 8005490:	e731      	b.n	80052f6 <_printf_float+0xba>
 8005492:	2301      	movs	r3, #1
 8005494:	464a      	mov	r2, r9
 8005496:	4631      	mov	r1, r6
 8005498:	4628      	mov	r0, r5
 800549a:	47b8      	blx	r7
 800549c:	3001      	adds	r0, #1
 800549e:	f43f af28 	beq.w	80052f2 <_printf_float+0xb6>
 80054a2:	f108 0801 	add.w	r8, r8, #1
 80054a6:	e7e6      	b.n	8005476 <_printf_float+0x23a>
 80054a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	dc38      	bgt.n	8005520 <_printf_float+0x2e4>
 80054ae:	2301      	movs	r3, #1
 80054b0:	4631      	mov	r1, r6
 80054b2:	4628      	mov	r0, r5
 80054b4:	4a19      	ldr	r2, [pc, #100]	; (800551c <_printf_float+0x2e0>)
 80054b6:	47b8      	blx	r7
 80054b8:	3001      	adds	r0, #1
 80054ba:	f43f af1a 	beq.w	80052f2 <_printf_float+0xb6>
 80054be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054c2:	4313      	orrs	r3, r2
 80054c4:	d102      	bne.n	80054cc <_printf_float+0x290>
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	07d9      	lsls	r1, r3, #31
 80054ca:	d5d8      	bpl.n	800547e <_printf_float+0x242>
 80054cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054d0:	4631      	mov	r1, r6
 80054d2:	4628      	mov	r0, r5
 80054d4:	47b8      	blx	r7
 80054d6:	3001      	adds	r0, #1
 80054d8:	f43f af0b 	beq.w	80052f2 <_printf_float+0xb6>
 80054dc:	f04f 0900 	mov.w	r9, #0
 80054e0:	f104 0a1a 	add.w	sl, r4, #26
 80054e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054e6:	425b      	negs	r3, r3
 80054e8:	454b      	cmp	r3, r9
 80054ea:	dc01      	bgt.n	80054f0 <_printf_float+0x2b4>
 80054ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054ee:	e794      	b.n	800541a <_printf_float+0x1de>
 80054f0:	2301      	movs	r3, #1
 80054f2:	4652      	mov	r2, sl
 80054f4:	4631      	mov	r1, r6
 80054f6:	4628      	mov	r0, r5
 80054f8:	47b8      	blx	r7
 80054fa:	3001      	adds	r0, #1
 80054fc:	f43f aef9 	beq.w	80052f2 <_printf_float+0xb6>
 8005500:	f109 0901 	add.w	r9, r9, #1
 8005504:	e7ee      	b.n	80054e4 <_printf_float+0x2a8>
 8005506:	bf00      	nop
 8005508:	7fefffff 	.word	0x7fefffff
 800550c:	0801b378 	.word	0x0801b378
 8005510:	0801b37c 	.word	0x0801b37c
 8005514:	0801b384 	.word	0x0801b384
 8005518:	0801b380 	.word	0x0801b380
 800551c:	0801b388 	.word	0x0801b388
 8005520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005522:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005524:	429a      	cmp	r2, r3
 8005526:	bfa8      	it	ge
 8005528:	461a      	movge	r2, r3
 800552a:	2a00      	cmp	r2, #0
 800552c:	4691      	mov	r9, r2
 800552e:	dc37      	bgt.n	80055a0 <_printf_float+0x364>
 8005530:	f04f 0b00 	mov.w	fp, #0
 8005534:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005538:	f104 021a 	add.w	r2, r4, #26
 800553c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005540:	ebaa 0309 	sub.w	r3, sl, r9
 8005544:	455b      	cmp	r3, fp
 8005546:	dc33      	bgt.n	80055b0 <_printf_float+0x374>
 8005548:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800554c:	429a      	cmp	r2, r3
 800554e:	db3b      	blt.n	80055c8 <_printf_float+0x38c>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	07da      	lsls	r2, r3, #31
 8005554:	d438      	bmi.n	80055c8 <_printf_float+0x38c>
 8005556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005558:	990d      	ldr	r1, [sp, #52]	; 0x34
 800555a:	eba3 020a 	sub.w	r2, r3, sl
 800555e:	eba3 0901 	sub.w	r9, r3, r1
 8005562:	4591      	cmp	r9, r2
 8005564:	bfa8      	it	ge
 8005566:	4691      	movge	r9, r2
 8005568:	f1b9 0f00 	cmp.w	r9, #0
 800556c:	dc34      	bgt.n	80055d8 <_printf_float+0x39c>
 800556e:	f04f 0800 	mov.w	r8, #0
 8005572:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005576:	f104 0a1a 	add.w	sl, r4, #26
 800557a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800557e:	1a9b      	subs	r3, r3, r2
 8005580:	eba3 0309 	sub.w	r3, r3, r9
 8005584:	4543      	cmp	r3, r8
 8005586:	f77f af7a 	ble.w	800547e <_printf_float+0x242>
 800558a:	2301      	movs	r3, #1
 800558c:	4652      	mov	r2, sl
 800558e:	4631      	mov	r1, r6
 8005590:	4628      	mov	r0, r5
 8005592:	47b8      	blx	r7
 8005594:	3001      	adds	r0, #1
 8005596:	f43f aeac 	beq.w	80052f2 <_printf_float+0xb6>
 800559a:	f108 0801 	add.w	r8, r8, #1
 800559e:	e7ec      	b.n	800557a <_printf_float+0x33e>
 80055a0:	4613      	mov	r3, r2
 80055a2:	4631      	mov	r1, r6
 80055a4:	4642      	mov	r2, r8
 80055a6:	4628      	mov	r0, r5
 80055a8:	47b8      	blx	r7
 80055aa:	3001      	adds	r0, #1
 80055ac:	d1c0      	bne.n	8005530 <_printf_float+0x2f4>
 80055ae:	e6a0      	b.n	80052f2 <_printf_float+0xb6>
 80055b0:	2301      	movs	r3, #1
 80055b2:	4631      	mov	r1, r6
 80055b4:	4628      	mov	r0, r5
 80055b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80055b8:	47b8      	blx	r7
 80055ba:	3001      	adds	r0, #1
 80055bc:	f43f ae99 	beq.w	80052f2 <_printf_float+0xb6>
 80055c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055c2:	f10b 0b01 	add.w	fp, fp, #1
 80055c6:	e7b9      	b.n	800553c <_printf_float+0x300>
 80055c8:	4631      	mov	r1, r6
 80055ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055ce:	4628      	mov	r0, r5
 80055d0:	47b8      	blx	r7
 80055d2:	3001      	adds	r0, #1
 80055d4:	d1bf      	bne.n	8005556 <_printf_float+0x31a>
 80055d6:	e68c      	b.n	80052f2 <_printf_float+0xb6>
 80055d8:	464b      	mov	r3, r9
 80055da:	4631      	mov	r1, r6
 80055dc:	4628      	mov	r0, r5
 80055de:	eb08 020a 	add.w	r2, r8, sl
 80055e2:	47b8      	blx	r7
 80055e4:	3001      	adds	r0, #1
 80055e6:	d1c2      	bne.n	800556e <_printf_float+0x332>
 80055e8:	e683      	b.n	80052f2 <_printf_float+0xb6>
 80055ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055ec:	2a01      	cmp	r2, #1
 80055ee:	dc01      	bgt.n	80055f4 <_printf_float+0x3b8>
 80055f0:	07db      	lsls	r3, r3, #31
 80055f2:	d537      	bpl.n	8005664 <_printf_float+0x428>
 80055f4:	2301      	movs	r3, #1
 80055f6:	4642      	mov	r2, r8
 80055f8:	4631      	mov	r1, r6
 80055fa:	4628      	mov	r0, r5
 80055fc:	47b8      	blx	r7
 80055fe:	3001      	adds	r0, #1
 8005600:	f43f ae77 	beq.w	80052f2 <_printf_float+0xb6>
 8005604:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005608:	4631      	mov	r1, r6
 800560a:	4628      	mov	r0, r5
 800560c:	47b8      	blx	r7
 800560e:	3001      	adds	r0, #1
 8005610:	f43f ae6f 	beq.w	80052f2 <_printf_float+0xb6>
 8005614:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005618:	2200      	movs	r2, #0
 800561a:	2300      	movs	r3, #0
 800561c:	f7fd f8ce 	bl	80027bc <__aeabi_dcmpeq>
 8005620:	b9d8      	cbnz	r0, 800565a <_printf_float+0x41e>
 8005622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005624:	f108 0201 	add.w	r2, r8, #1
 8005628:	3b01      	subs	r3, #1
 800562a:	4631      	mov	r1, r6
 800562c:	4628      	mov	r0, r5
 800562e:	47b8      	blx	r7
 8005630:	3001      	adds	r0, #1
 8005632:	d10e      	bne.n	8005652 <_printf_float+0x416>
 8005634:	e65d      	b.n	80052f2 <_printf_float+0xb6>
 8005636:	2301      	movs	r3, #1
 8005638:	464a      	mov	r2, r9
 800563a:	4631      	mov	r1, r6
 800563c:	4628      	mov	r0, r5
 800563e:	47b8      	blx	r7
 8005640:	3001      	adds	r0, #1
 8005642:	f43f ae56 	beq.w	80052f2 <_printf_float+0xb6>
 8005646:	f108 0801 	add.w	r8, r8, #1
 800564a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800564c:	3b01      	subs	r3, #1
 800564e:	4543      	cmp	r3, r8
 8005650:	dcf1      	bgt.n	8005636 <_printf_float+0x3fa>
 8005652:	4653      	mov	r3, sl
 8005654:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005658:	e6e0      	b.n	800541c <_printf_float+0x1e0>
 800565a:	f04f 0800 	mov.w	r8, #0
 800565e:	f104 091a 	add.w	r9, r4, #26
 8005662:	e7f2      	b.n	800564a <_printf_float+0x40e>
 8005664:	2301      	movs	r3, #1
 8005666:	4642      	mov	r2, r8
 8005668:	e7df      	b.n	800562a <_printf_float+0x3ee>
 800566a:	2301      	movs	r3, #1
 800566c:	464a      	mov	r2, r9
 800566e:	4631      	mov	r1, r6
 8005670:	4628      	mov	r0, r5
 8005672:	47b8      	blx	r7
 8005674:	3001      	adds	r0, #1
 8005676:	f43f ae3c 	beq.w	80052f2 <_printf_float+0xb6>
 800567a:	f108 0801 	add.w	r8, r8, #1
 800567e:	68e3      	ldr	r3, [r4, #12]
 8005680:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005682:	1a5b      	subs	r3, r3, r1
 8005684:	4543      	cmp	r3, r8
 8005686:	dcf0      	bgt.n	800566a <_printf_float+0x42e>
 8005688:	e6fd      	b.n	8005486 <_printf_float+0x24a>
 800568a:	f04f 0800 	mov.w	r8, #0
 800568e:	f104 0919 	add.w	r9, r4, #25
 8005692:	e7f4      	b.n	800567e <_printf_float+0x442>

08005694 <_printf_common>:
 8005694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005698:	4616      	mov	r6, r2
 800569a:	4699      	mov	r9, r3
 800569c:	688a      	ldr	r2, [r1, #8]
 800569e:	690b      	ldr	r3, [r1, #16]
 80056a0:	4607      	mov	r7, r0
 80056a2:	4293      	cmp	r3, r2
 80056a4:	bfb8      	it	lt
 80056a6:	4613      	movlt	r3, r2
 80056a8:	6033      	str	r3, [r6, #0]
 80056aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056ae:	460c      	mov	r4, r1
 80056b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056b4:	b10a      	cbz	r2, 80056ba <_printf_common+0x26>
 80056b6:	3301      	adds	r3, #1
 80056b8:	6033      	str	r3, [r6, #0]
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	0699      	lsls	r1, r3, #26
 80056be:	bf42      	ittt	mi
 80056c0:	6833      	ldrmi	r3, [r6, #0]
 80056c2:	3302      	addmi	r3, #2
 80056c4:	6033      	strmi	r3, [r6, #0]
 80056c6:	6825      	ldr	r5, [r4, #0]
 80056c8:	f015 0506 	ands.w	r5, r5, #6
 80056cc:	d106      	bne.n	80056dc <_printf_common+0x48>
 80056ce:	f104 0a19 	add.w	sl, r4, #25
 80056d2:	68e3      	ldr	r3, [r4, #12]
 80056d4:	6832      	ldr	r2, [r6, #0]
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	42ab      	cmp	r3, r5
 80056da:	dc28      	bgt.n	800572e <_printf_common+0x9a>
 80056dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056e0:	1e13      	subs	r3, r2, #0
 80056e2:	6822      	ldr	r2, [r4, #0]
 80056e4:	bf18      	it	ne
 80056e6:	2301      	movne	r3, #1
 80056e8:	0692      	lsls	r2, r2, #26
 80056ea:	d42d      	bmi.n	8005748 <_printf_common+0xb4>
 80056ec:	4649      	mov	r1, r9
 80056ee:	4638      	mov	r0, r7
 80056f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056f4:	47c0      	blx	r8
 80056f6:	3001      	adds	r0, #1
 80056f8:	d020      	beq.n	800573c <_printf_common+0xa8>
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	68e5      	ldr	r5, [r4, #12]
 80056fe:	f003 0306 	and.w	r3, r3, #6
 8005702:	2b04      	cmp	r3, #4
 8005704:	bf18      	it	ne
 8005706:	2500      	movne	r5, #0
 8005708:	6832      	ldr	r2, [r6, #0]
 800570a:	f04f 0600 	mov.w	r6, #0
 800570e:	68a3      	ldr	r3, [r4, #8]
 8005710:	bf08      	it	eq
 8005712:	1aad      	subeq	r5, r5, r2
 8005714:	6922      	ldr	r2, [r4, #16]
 8005716:	bf08      	it	eq
 8005718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800571c:	4293      	cmp	r3, r2
 800571e:	bfc4      	itt	gt
 8005720:	1a9b      	subgt	r3, r3, r2
 8005722:	18ed      	addgt	r5, r5, r3
 8005724:	341a      	adds	r4, #26
 8005726:	42b5      	cmp	r5, r6
 8005728:	d11a      	bne.n	8005760 <_printf_common+0xcc>
 800572a:	2000      	movs	r0, #0
 800572c:	e008      	b.n	8005740 <_printf_common+0xac>
 800572e:	2301      	movs	r3, #1
 8005730:	4652      	mov	r2, sl
 8005732:	4649      	mov	r1, r9
 8005734:	4638      	mov	r0, r7
 8005736:	47c0      	blx	r8
 8005738:	3001      	adds	r0, #1
 800573a:	d103      	bne.n	8005744 <_printf_common+0xb0>
 800573c:	f04f 30ff 	mov.w	r0, #4294967295
 8005740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005744:	3501      	adds	r5, #1
 8005746:	e7c4      	b.n	80056d2 <_printf_common+0x3e>
 8005748:	2030      	movs	r0, #48	; 0x30
 800574a:	18e1      	adds	r1, r4, r3
 800574c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005756:	4422      	add	r2, r4
 8005758:	3302      	adds	r3, #2
 800575a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800575e:	e7c5      	b.n	80056ec <_printf_common+0x58>
 8005760:	2301      	movs	r3, #1
 8005762:	4622      	mov	r2, r4
 8005764:	4649      	mov	r1, r9
 8005766:	4638      	mov	r0, r7
 8005768:	47c0      	blx	r8
 800576a:	3001      	adds	r0, #1
 800576c:	d0e6      	beq.n	800573c <_printf_common+0xa8>
 800576e:	3601      	adds	r6, #1
 8005770:	e7d9      	b.n	8005726 <_printf_common+0x92>
	...

08005774 <_printf_i>:
 8005774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005778:	7e0f      	ldrb	r7, [r1, #24]
 800577a:	4691      	mov	r9, r2
 800577c:	2f78      	cmp	r7, #120	; 0x78
 800577e:	4680      	mov	r8, r0
 8005780:	460c      	mov	r4, r1
 8005782:	469a      	mov	sl, r3
 8005784:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005786:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800578a:	d807      	bhi.n	800579c <_printf_i+0x28>
 800578c:	2f62      	cmp	r7, #98	; 0x62
 800578e:	d80a      	bhi.n	80057a6 <_printf_i+0x32>
 8005790:	2f00      	cmp	r7, #0
 8005792:	f000 80d9 	beq.w	8005948 <_printf_i+0x1d4>
 8005796:	2f58      	cmp	r7, #88	; 0x58
 8005798:	f000 80a4 	beq.w	80058e4 <_printf_i+0x170>
 800579c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057a4:	e03a      	b.n	800581c <_printf_i+0xa8>
 80057a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057aa:	2b15      	cmp	r3, #21
 80057ac:	d8f6      	bhi.n	800579c <_printf_i+0x28>
 80057ae:	a101      	add	r1, pc, #4	; (adr r1, 80057b4 <_printf_i+0x40>)
 80057b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057b4:	0800580d 	.word	0x0800580d
 80057b8:	08005821 	.word	0x08005821
 80057bc:	0800579d 	.word	0x0800579d
 80057c0:	0800579d 	.word	0x0800579d
 80057c4:	0800579d 	.word	0x0800579d
 80057c8:	0800579d 	.word	0x0800579d
 80057cc:	08005821 	.word	0x08005821
 80057d0:	0800579d 	.word	0x0800579d
 80057d4:	0800579d 	.word	0x0800579d
 80057d8:	0800579d 	.word	0x0800579d
 80057dc:	0800579d 	.word	0x0800579d
 80057e0:	0800592f 	.word	0x0800592f
 80057e4:	08005851 	.word	0x08005851
 80057e8:	08005911 	.word	0x08005911
 80057ec:	0800579d 	.word	0x0800579d
 80057f0:	0800579d 	.word	0x0800579d
 80057f4:	08005951 	.word	0x08005951
 80057f8:	0800579d 	.word	0x0800579d
 80057fc:	08005851 	.word	0x08005851
 8005800:	0800579d 	.word	0x0800579d
 8005804:	0800579d 	.word	0x0800579d
 8005808:	08005919 	.word	0x08005919
 800580c:	682b      	ldr	r3, [r5, #0]
 800580e:	1d1a      	adds	r2, r3, #4
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	602a      	str	r2, [r5, #0]
 8005814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800581c:	2301      	movs	r3, #1
 800581e:	e0a4      	b.n	800596a <_printf_i+0x1f6>
 8005820:	6820      	ldr	r0, [r4, #0]
 8005822:	6829      	ldr	r1, [r5, #0]
 8005824:	0606      	lsls	r6, r0, #24
 8005826:	f101 0304 	add.w	r3, r1, #4
 800582a:	d50a      	bpl.n	8005842 <_printf_i+0xce>
 800582c:	680e      	ldr	r6, [r1, #0]
 800582e:	602b      	str	r3, [r5, #0]
 8005830:	2e00      	cmp	r6, #0
 8005832:	da03      	bge.n	800583c <_printf_i+0xc8>
 8005834:	232d      	movs	r3, #45	; 0x2d
 8005836:	4276      	negs	r6, r6
 8005838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800583c:	230a      	movs	r3, #10
 800583e:	485e      	ldr	r0, [pc, #376]	; (80059b8 <_printf_i+0x244>)
 8005840:	e019      	b.n	8005876 <_printf_i+0x102>
 8005842:	680e      	ldr	r6, [r1, #0]
 8005844:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005848:	602b      	str	r3, [r5, #0]
 800584a:	bf18      	it	ne
 800584c:	b236      	sxthne	r6, r6
 800584e:	e7ef      	b.n	8005830 <_printf_i+0xbc>
 8005850:	682b      	ldr	r3, [r5, #0]
 8005852:	6820      	ldr	r0, [r4, #0]
 8005854:	1d19      	adds	r1, r3, #4
 8005856:	6029      	str	r1, [r5, #0]
 8005858:	0601      	lsls	r1, r0, #24
 800585a:	d501      	bpl.n	8005860 <_printf_i+0xec>
 800585c:	681e      	ldr	r6, [r3, #0]
 800585e:	e002      	b.n	8005866 <_printf_i+0xf2>
 8005860:	0646      	lsls	r6, r0, #25
 8005862:	d5fb      	bpl.n	800585c <_printf_i+0xe8>
 8005864:	881e      	ldrh	r6, [r3, #0]
 8005866:	2f6f      	cmp	r7, #111	; 0x6f
 8005868:	bf0c      	ite	eq
 800586a:	2308      	moveq	r3, #8
 800586c:	230a      	movne	r3, #10
 800586e:	4852      	ldr	r0, [pc, #328]	; (80059b8 <_printf_i+0x244>)
 8005870:	2100      	movs	r1, #0
 8005872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005876:	6865      	ldr	r5, [r4, #4]
 8005878:	2d00      	cmp	r5, #0
 800587a:	bfa8      	it	ge
 800587c:	6821      	ldrge	r1, [r4, #0]
 800587e:	60a5      	str	r5, [r4, #8]
 8005880:	bfa4      	itt	ge
 8005882:	f021 0104 	bicge.w	r1, r1, #4
 8005886:	6021      	strge	r1, [r4, #0]
 8005888:	b90e      	cbnz	r6, 800588e <_printf_i+0x11a>
 800588a:	2d00      	cmp	r5, #0
 800588c:	d04d      	beq.n	800592a <_printf_i+0x1b6>
 800588e:	4615      	mov	r5, r2
 8005890:	fbb6 f1f3 	udiv	r1, r6, r3
 8005894:	fb03 6711 	mls	r7, r3, r1, r6
 8005898:	5dc7      	ldrb	r7, [r0, r7]
 800589a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800589e:	4637      	mov	r7, r6
 80058a0:	42bb      	cmp	r3, r7
 80058a2:	460e      	mov	r6, r1
 80058a4:	d9f4      	bls.n	8005890 <_printf_i+0x11c>
 80058a6:	2b08      	cmp	r3, #8
 80058a8:	d10b      	bne.n	80058c2 <_printf_i+0x14e>
 80058aa:	6823      	ldr	r3, [r4, #0]
 80058ac:	07de      	lsls	r6, r3, #31
 80058ae:	d508      	bpl.n	80058c2 <_printf_i+0x14e>
 80058b0:	6923      	ldr	r3, [r4, #16]
 80058b2:	6861      	ldr	r1, [r4, #4]
 80058b4:	4299      	cmp	r1, r3
 80058b6:	bfde      	ittt	le
 80058b8:	2330      	movle	r3, #48	; 0x30
 80058ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058c2:	1b52      	subs	r2, r2, r5
 80058c4:	6122      	str	r2, [r4, #16]
 80058c6:	464b      	mov	r3, r9
 80058c8:	4621      	mov	r1, r4
 80058ca:	4640      	mov	r0, r8
 80058cc:	f8cd a000 	str.w	sl, [sp]
 80058d0:	aa03      	add	r2, sp, #12
 80058d2:	f7ff fedf 	bl	8005694 <_printf_common>
 80058d6:	3001      	adds	r0, #1
 80058d8:	d14c      	bne.n	8005974 <_printf_i+0x200>
 80058da:	f04f 30ff 	mov.w	r0, #4294967295
 80058de:	b004      	add	sp, #16
 80058e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e4:	4834      	ldr	r0, [pc, #208]	; (80059b8 <_printf_i+0x244>)
 80058e6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058ea:	6829      	ldr	r1, [r5, #0]
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	f851 6b04 	ldr.w	r6, [r1], #4
 80058f2:	6029      	str	r1, [r5, #0]
 80058f4:	061d      	lsls	r5, r3, #24
 80058f6:	d514      	bpl.n	8005922 <_printf_i+0x1ae>
 80058f8:	07df      	lsls	r7, r3, #31
 80058fa:	bf44      	itt	mi
 80058fc:	f043 0320 	orrmi.w	r3, r3, #32
 8005900:	6023      	strmi	r3, [r4, #0]
 8005902:	b91e      	cbnz	r6, 800590c <_printf_i+0x198>
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	f023 0320 	bic.w	r3, r3, #32
 800590a:	6023      	str	r3, [r4, #0]
 800590c:	2310      	movs	r3, #16
 800590e:	e7af      	b.n	8005870 <_printf_i+0xfc>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	f043 0320 	orr.w	r3, r3, #32
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	2378      	movs	r3, #120	; 0x78
 800591a:	4828      	ldr	r0, [pc, #160]	; (80059bc <_printf_i+0x248>)
 800591c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005920:	e7e3      	b.n	80058ea <_printf_i+0x176>
 8005922:	0659      	lsls	r1, r3, #25
 8005924:	bf48      	it	mi
 8005926:	b2b6      	uxthmi	r6, r6
 8005928:	e7e6      	b.n	80058f8 <_printf_i+0x184>
 800592a:	4615      	mov	r5, r2
 800592c:	e7bb      	b.n	80058a6 <_printf_i+0x132>
 800592e:	682b      	ldr	r3, [r5, #0]
 8005930:	6826      	ldr	r6, [r4, #0]
 8005932:	1d18      	adds	r0, r3, #4
 8005934:	6961      	ldr	r1, [r4, #20]
 8005936:	6028      	str	r0, [r5, #0]
 8005938:	0635      	lsls	r5, r6, #24
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	d501      	bpl.n	8005942 <_printf_i+0x1ce>
 800593e:	6019      	str	r1, [r3, #0]
 8005940:	e002      	b.n	8005948 <_printf_i+0x1d4>
 8005942:	0670      	lsls	r0, r6, #25
 8005944:	d5fb      	bpl.n	800593e <_printf_i+0x1ca>
 8005946:	8019      	strh	r1, [r3, #0]
 8005948:	2300      	movs	r3, #0
 800594a:	4615      	mov	r5, r2
 800594c:	6123      	str	r3, [r4, #16]
 800594e:	e7ba      	b.n	80058c6 <_printf_i+0x152>
 8005950:	682b      	ldr	r3, [r5, #0]
 8005952:	2100      	movs	r1, #0
 8005954:	1d1a      	adds	r2, r3, #4
 8005956:	602a      	str	r2, [r5, #0]
 8005958:	681d      	ldr	r5, [r3, #0]
 800595a:	6862      	ldr	r2, [r4, #4]
 800595c:	4628      	mov	r0, r5
 800595e:	f002 faf9 	bl	8007f54 <memchr>
 8005962:	b108      	cbz	r0, 8005968 <_printf_i+0x1f4>
 8005964:	1b40      	subs	r0, r0, r5
 8005966:	6060      	str	r0, [r4, #4]
 8005968:	6863      	ldr	r3, [r4, #4]
 800596a:	6123      	str	r3, [r4, #16]
 800596c:	2300      	movs	r3, #0
 800596e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005972:	e7a8      	b.n	80058c6 <_printf_i+0x152>
 8005974:	462a      	mov	r2, r5
 8005976:	4649      	mov	r1, r9
 8005978:	4640      	mov	r0, r8
 800597a:	6923      	ldr	r3, [r4, #16]
 800597c:	47d0      	blx	sl
 800597e:	3001      	adds	r0, #1
 8005980:	d0ab      	beq.n	80058da <_printf_i+0x166>
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	079b      	lsls	r3, r3, #30
 8005986:	d413      	bmi.n	80059b0 <_printf_i+0x23c>
 8005988:	68e0      	ldr	r0, [r4, #12]
 800598a:	9b03      	ldr	r3, [sp, #12]
 800598c:	4298      	cmp	r0, r3
 800598e:	bfb8      	it	lt
 8005990:	4618      	movlt	r0, r3
 8005992:	e7a4      	b.n	80058de <_printf_i+0x16a>
 8005994:	2301      	movs	r3, #1
 8005996:	4632      	mov	r2, r6
 8005998:	4649      	mov	r1, r9
 800599a:	4640      	mov	r0, r8
 800599c:	47d0      	blx	sl
 800599e:	3001      	adds	r0, #1
 80059a0:	d09b      	beq.n	80058da <_printf_i+0x166>
 80059a2:	3501      	adds	r5, #1
 80059a4:	68e3      	ldr	r3, [r4, #12]
 80059a6:	9903      	ldr	r1, [sp, #12]
 80059a8:	1a5b      	subs	r3, r3, r1
 80059aa:	42ab      	cmp	r3, r5
 80059ac:	dcf2      	bgt.n	8005994 <_printf_i+0x220>
 80059ae:	e7eb      	b.n	8005988 <_printf_i+0x214>
 80059b0:	2500      	movs	r5, #0
 80059b2:	f104 0619 	add.w	r6, r4, #25
 80059b6:	e7f5      	b.n	80059a4 <_printf_i+0x230>
 80059b8:	0801b38a 	.word	0x0801b38a
 80059bc:	0801b39b 	.word	0x0801b39b

080059c0 <_scanf_float>:
 80059c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c4:	b087      	sub	sp, #28
 80059c6:	9303      	str	r3, [sp, #12]
 80059c8:	688b      	ldr	r3, [r1, #8]
 80059ca:	4617      	mov	r7, r2
 80059cc:	1e5a      	subs	r2, r3, #1
 80059ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80059d2:	bf85      	ittet	hi
 80059d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80059d8:	195b      	addhi	r3, r3, r5
 80059da:	2300      	movls	r3, #0
 80059dc:	9302      	strhi	r3, [sp, #8]
 80059de:	bf88      	it	hi
 80059e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80059e4:	468b      	mov	fp, r1
 80059e6:	f04f 0500 	mov.w	r5, #0
 80059ea:	bf8c      	ite	hi
 80059ec:	608b      	strhi	r3, [r1, #8]
 80059ee:	9302      	strls	r3, [sp, #8]
 80059f0:	680b      	ldr	r3, [r1, #0]
 80059f2:	4680      	mov	r8, r0
 80059f4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80059f8:	f84b 3b1c 	str.w	r3, [fp], #28
 80059fc:	460c      	mov	r4, r1
 80059fe:	465e      	mov	r6, fp
 8005a00:	46aa      	mov	sl, r5
 8005a02:	46a9      	mov	r9, r5
 8005a04:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005a08:	9501      	str	r5, [sp, #4]
 8005a0a:	68a2      	ldr	r2, [r4, #8]
 8005a0c:	b152      	cbz	r2, 8005a24 <_scanf_float+0x64>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b4e      	cmp	r3, #78	; 0x4e
 8005a14:	d864      	bhi.n	8005ae0 <_scanf_float+0x120>
 8005a16:	2b40      	cmp	r3, #64	; 0x40
 8005a18:	d83c      	bhi.n	8005a94 <_scanf_float+0xd4>
 8005a1a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005a1e:	b2c8      	uxtb	r0, r1
 8005a20:	280e      	cmp	r0, #14
 8005a22:	d93a      	bls.n	8005a9a <_scanf_float+0xda>
 8005a24:	f1b9 0f00 	cmp.w	r9, #0
 8005a28:	d003      	beq.n	8005a32 <_scanf_float+0x72>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a36:	f1ba 0f01 	cmp.w	sl, #1
 8005a3a:	f200 8113 	bhi.w	8005c64 <_scanf_float+0x2a4>
 8005a3e:	455e      	cmp	r6, fp
 8005a40:	f200 8105 	bhi.w	8005c4e <_scanf_float+0x28e>
 8005a44:	2501      	movs	r5, #1
 8005a46:	4628      	mov	r0, r5
 8005a48:	b007      	add	sp, #28
 8005a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a4e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005a52:	2a0d      	cmp	r2, #13
 8005a54:	d8e6      	bhi.n	8005a24 <_scanf_float+0x64>
 8005a56:	a101      	add	r1, pc, #4	; (adr r1, 8005a5c <_scanf_float+0x9c>)
 8005a58:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005a5c:	08005b9b 	.word	0x08005b9b
 8005a60:	08005a25 	.word	0x08005a25
 8005a64:	08005a25 	.word	0x08005a25
 8005a68:	08005a25 	.word	0x08005a25
 8005a6c:	08005bfb 	.word	0x08005bfb
 8005a70:	08005bd3 	.word	0x08005bd3
 8005a74:	08005a25 	.word	0x08005a25
 8005a78:	08005a25 	.word	0x08005a25
 8005a7c:	08005ba9 	.word	0x08005ba9
 8005a80:	08005a25 	.word	0x08005a25
 8005a84:	08005a25 	.word	0x08005a25
 8005a88:	08005a25 	.word	0x08005a25
 8005a8c:	08005a25 	.word	0x08005a25
 8005a90:	08005b61 	.word	0x08005b61
 8005a94:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005a98:	e7db      	b.n	8005a52 <_scanf_float+0x92>
 8005a9a:	290e      	cmp	r1, #14
 8005a9c:	d8c2      	bhi.n	8005a24 <_scanf_float+0x64>
 8005a9e:	a001      	add	r0, pc, #4	; (adr r0, 8005aa4 <_scanf_float+0xe4>)
 8005aa0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005aa4:	08005b53 	.word	0x08005b53
 8005aa8:	08005a25 	.word	0x08005a25
 8005aac:	08005b53 	.word	0x08005b53
 8005ab0:	08005be7 	.word	0x08005be7
 8005ab4:	08005a25 	.word	0x08005a25
 8005ab8:	08005b01 	.word	0x08005b01
 8005abc:	08005b3d 	.word	0x08005b3d
 8005ac0:	08005b3d 	.word	0x08005b3d
 8005ac4:	08005b3d 	.word	0x08005b3d
 8005ac8:	08005b3d 	.word	0x08005b3d
 8005acc:	08005b3d 	.word	0x08005b3d
 8005ad0:	08005b3d 	.word	0x08005b3d
 8005ad4:	08005b3d 	.word	0x08005b3d
 8005ad8:	08005b3d 	.word	0x08005b3d
 8005adc:	08005b3d 	.word	0x08005b3d
 8005ae0:	2b6e      	cmp	r3, #110	; 0x6e
 8005ae2:	d809      	bhi.n	8005af8 <_scanf_float+0x138>
 8005ae4:	2b60      	cmp	r3, #96	; 0x60
 8005ae6:	d8b2      	bhi.n	8005a4e <_scanf_float+0x8e>
 8005ae8:	2b54      	cmp	r3, #84	; 0x54
 8005aea:	d077      	beq.n	8005bdc <_scanf_float+0x21c>
 8005aec:	2b59      	cmp	r3, #89	; 0x59
 8005aee:	d199      	bne.n	8005a24 <_scanf_float+0x64>
 8005af0:	2d07      	cmp	r5, #7
 8005af2:	d197      	bne.n	8005a24 <_scanf_float+0x64>
 8005af4:	2508      	movs	r5, #8
 8005af6:	e029      	b.n	8005b4c <_scanf_float+0x18c>
 8005af8:	2b74      	cmp	r3, #116	; 0x74
 8005afa:	d06f      	beq.n	8005bdc <_scanf_float+0x21c>
 8005afc:	2b79      	cmp	r3, #121	; 0x79
 8005afe:	e7f6      	b.n	8005aee <_scanf_float+0x12e>
 8005b00:	6821      	ldr	r1, [r4, #0]
 8005b02:	05c8      	lsls	r0, r1, #23
 8005b04:	d51a      	bpl.n	8005b3c <_scanf_float+0x17c>
 8005b06:	9b02      	ldr	r3, [sp, #8]
 8005b08:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005b0c:	6021      	str	r1, [r4, #0]
 8005b0e:	f109 0901 	add.w	r9, r9, #1
 8005b12:	b11b      	cbz	r3, 8005b1c <_scanf_float+0x15c>
 8005b14:	3b01      	subs	r3, #1
 8005b16:	3201      	adds	r2, #1
 8005b18:	9302      	str	r3, [sp, #8]
 8005b1a:	60a2      	str	r2, [r4, #8]
 8005b1c:	68a3      	ldr	r3, [r4, #8]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	60a3      	str	r3, [r4, #8]
 8005b22:	6923      	ldr	r3, [r4, #16]
 8005b24:	3301      	adds	r3, #1
 8005b26:	6123      	str	r3, [r4, #16]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	607b      	str	r3, [r7, #4]
 8005b30:	f340 8084 	ble.w	8005c3c <_scanf_float+0x27c>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	3301      	adds	r3, #1
 8005b38:	603b      	str	r3, [r7, #0]
 8005b3a:	e766      	b.n	8005a0a <_scanf_float+0x4a>
 8005b3c:	eb1a 0f05 	cmn.w	sl, r5
 8005b40:	f47f af70 	bne.w	8005a24 <_scanf_float+0x64>
 8005b44:	6822      	ldr	r2, [r4, #0]
 8005b46:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005b4a:	6022      	str	r2, [r4, #0]
 8005b4c:	f806 3b01 	strb.w	r3, [r6], #1
 8005b50:	e7e4      	b.n	8005b1c <_scanf_float+0x15c>
 8005b52:	6822      	ldr	r2, [r4, #0]
 8005b54:	0610      	lsls	r0, r2, #24
 8005b56:	f57f af65 	bpl.w	8005a24 <_scanf_float+0x64>
 8005b5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b5e:	e7f4      	b.n	8005b4a <_scanf_float+0x18a>
 8005b60:	f1ba 0f00 	cmp.w	sl, #0
 8005b64:	d10e      	bne.n	8005b84 <_scanf_float+0x1c4>
 8005b66:	f1b9 0f00 	cmp.w	r9, #0
 8005b6a:	d10e      	bne.n	8005b8a <_scanf_float+0x1ca>
 8005b6c:	6822      	ldr	r2, [r4, #0]
 8005b6e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005b72:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005b76:	d108      	bne.n	8005b8a <_scanf_float+0x1ca>
 8005b78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b7c:	f04f 0a01 	mov.w	sl, #1
 8005b80:	6022      	str	r2, [r4, #0]
 8005b82:	e7e3      	b.n	8005b4c <_scanf_float+0x18c>
 8005b84:	f1ba 0f02 	cmp.w	sl, #2
 8005b88:	d055      	beq.n	8005c36 <_scanf_float+0x276>
 8005b8a:	2d01      	cmp	r5, #1
 8005b8c:	d002      	beq.n	8005b94 <_scanf_float+0x1d4>
 8005b8e:	2d04      	cmp	r5, #4
 8005b90:	f47f af48 	bne.w	8005a24 <_scanf_float+0x64>
 8005b94:	3501      	adds	r5, #1
 8005b96:	b2ed      	uxtb	r5, r5
 8005b98:	e7d8      	b.n	8005b4c <_scanf_float+0x18c>
 8005b9a:	f1ba 0f01 	cmp.w	sl, #1
 8005b9e:	f47f af41 	bne.w	8005a24 <_scanf_float+0x64>
 8005ba2:	f04f 0a02 	mov.w	sl, #2
 8005ba6:	e7d1      	b.n	8005b4c <_scanf_float+0x18c>
 8005ba8:	b97d      	cbnz	r5, 8005bca <_scanf_float+0x20a>
 8005baa:	f1b9 0f00 	cmp.w	r9, #0
 8005bae:	f47f af3c 	bne.w	8005a2a <_scanf_float+0x6a>
 8005bb2:	6822      	ldr	r2, [r4, #0]
 8005bb4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005bb8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005bbc:	f47f af39 	bne.w	8005a32 <_scanf_float+0x72>
 8005bc0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005bc4:	2501      	movs	r5, #1
 8005bc6:	6022      	str	r2, [r4, #0]
 8005bc8:	e7c0      	b.n	8005b4c <_scanf_float+0x18c>
 8005bca:	2d03      	cmp	r5, #3
 8005bcc:	d0e2      	beq.n	8005b94 <_scanf_float+0x1d4>
 8005bce:	2d05      	cmp	r5, #5
 8005bd0:	e7de      	b.n	8005b90 <_scanf_float+0x1d0>
 8005bd2:	2d02      	cmp	r5, #2
 8005bd4:	f47f af26 	bne.w	8005a24 <_scanf_float+0x64>
 8005bd8:	2503      	movs	r5, #3
 8005bda:	e7b7      	b.n	8005b4c <_scanf_float+0x18c>
 8005bdc:	2d06      	cmp	r5, #6
 8005bde:	f47f af21 	bne.w	8005a24 <_scanf_float+0x64>
 8005be2:	2507      	movs	r5, #7
 8005be4:	e7b2      	b.n	8005b4c <_scanf_float+0x18c>
 8005be6:	6822      	ldr	r2, [r4, #0]
 8005be8:	0591      	lsls	r1, r2, #22
 8005bea:	f57f af1b 	bpl.w	8005a24 <_scanf_float+0x64>
 8005bee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005bf2:	6022      	str	r2, [r4, #0]
 8005bf4:	f8cd 9004 	str.w	r9, [sp, #4]
 8005bf8:	e7a8      	b.n	8005b4c <_scanf_float+0x18c>
 8005bfa:	6822      	ldr	r2, [r4, #0]
 8005bfc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005c00:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005c04:	d006      	beq.n	8005c14 <_scanf_float+0x254>
 8005c06:	0550      	lsls	r0, r2, #21
 8005c08:	f57f af0c 	bpl.w	8005a24 <_scanf_float+0x64>
 8005c0c:	f1b9 0f00 	cmp.w	r9, #0
 8005c10:	f43f af0f 	beq.w	8005a32 <_scanf_float+0x72>
 8005c14:	0591      	lsls	r1, r2, #22
 8005c16:	bf58      	it	pl
 8005c18:	9901      	ldrpl	r1, [sp, #4]
 8005c1a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c1e:	bf58      	it	pl
 8005c20:	eba9 0101 	subpl.w	r1, r9, r1
 8005c24:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005c28:	f04f 0900 	mov.w	r9, #0
 8005c2c:	bf58      	it	pl
 8005c2e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005c32:	6022      	str	r2, [r4, #0]
 8005c34:	e78a      	b.n	8005b4c <_scanf_float+0x18c>
 8005c36:	f04f 0a03 	mov.w	sl, #3
 8005c3a:	e787      	b.n	8005b4c <_scanf_float+0x18c>
 8005c3c:	4639      	mov	r1, r7
 8005c3e:	4640      	mov	r0, r8
 8005c40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005c44:	4798      	blx	r3
 8005c46:	2800      	cmp	r0, #0
 8005c48:	f43f aedf 	beq.w	8005a0a <_scanf_float+0x4a>
 8005c4c:	e6ea      	b.n	8005a24 <_scanf_float+0x64>
 8005c4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c52:	463a      	mov	r2, r7
 8005c54:	4640      	mov	r0, r8
 8005c56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c5a:	4798      	blx	r3
 8005c5c:	6923      	ldr	r3, [r4, #16]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	6123      	str	r3, [r4, #16]
 8005c62:	e6ec      	b.n	8005a3e <_scanf_float+0x7e>
 8005c64:	1e6b      	subs	r3, r5, #1
 8005c66:	2b06      	cmp	r3, #6
 8005c68:	d825      	bhi.n	8005cb6 <_scanf_float+0x2f6>
 8005c6a:	2d02      	cmp	r5, #2
 8005c6c:	d836      	bhi.n	8005cdc <_scanf_float+0x31c>
 8005c6e:	455e      	cmp	r6, fp
 8005c70:	f67f aee8 	bls.w	8005a44 <_scanf_float+0x84>
 8005c74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c78:	463a      	mov	r2, r7
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c80:	4798      	blx	r3
 8005c82:	6923      	ldr	r3, [r4, #16]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	6123      	str	r3, [r4, #16]
 8005c88:	e7f1      	b.n	8005c6e <_scanf_float+0x2ae>
 8005c8a:	9802      	ldr	r0, [sp, #8]
 8005c8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c90:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005c94:	463a      	mov	r2, r7
 8005c96:	9002      	str	r0, [sp, #8]
 8005c98:	4640      	mov	r0, r8
 8005c9a:	4798      	blx	r3
 8005c9c:	6923      	ldr	r3, [r4, #16]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	6123      	str	r3, [r4, #16]
 8005ca2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ca6:	fa5f fa8a 	uxtb.w	sl, sl
 8005caa:	f1ba 0f02 	cmp.w	sl, #2
 8005cae:	d1ec      	bne.n	8005c8a <_scanf_float+0x2ca>
 8005cb0:	3d03      	subs	r5, #3
 8005cb2:	b2ed      	uxtb	r5, r5
 8005cb4:	1b76      	subs	r6, r6, r5
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	05da      	lsls	r2, r3, #23
 8005cba:	d52f      	bpl.n	8005d1c <_scanf_float+0x35c>
 8005cbc:	055b      	lsls	r3, r3, #21
 8005cbe:	d510      	bpl.n	8005ce2 <_scanf_float+0x322>
 8005cc0:	455e      	cmp	r6, fp
 8005cc2:	f67f aebf 	bls.w	8005a44 <_scanf_float+0x84>
 8005cc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cca:	463a      	mov	r2, r7
 8005ccc:	4640      	mov	r0, r8
 8005cce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005cd2:	4798      	blx	r3
 8005cd4:	6923      	ldr	r3, [r4, #16]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	6123      	str	r3, [r4, #16]
 8005cda:	e7f1      	b.n	8005cc0 <_scanf_float+0x300>
 8005cdc:	46aa      	mov	sl, r5
 8005cde:	9602      	str	r6, [sp, #8]
 8005ce0:	e7df      	b.n	8005ca2 <_scanf_float+0x2e2>
 8005ce2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005ce6:	6923      	ldr	r3, [r4, #16]
 8005ce8:	2965      	cmp	r1, #101	; 0x65
 8005cea:	f103 33ff 	add.w	r3, r3, #4294967295
 8005cee:	f106 35ff 	add.w	r5, r6, #4294967295
 8005cf2:	6123      	str	r3, [r4, #16]
 8005cf4:	d00c      	beq.n	8005d10 <_scanf_float+0x350>
 8005cf6:	2945      	cmp	r1, #69	; 0x45
 8005cf8:	d00a      	beq.n	8005d10 <_scanf_float+0x350>
 8005cfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cfe:	463a      	mov	r2, r7
 8005d00:	4640      	mov	r0, r8
 8005d02:	4798      	blx	r3
 8005d04:	6923      	ldr	r3, [r4, #16]
 8005d06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	1eb5      	subs	r5, r6, #2
 8005d0e:	6123      	str	r3, [r4, #16]
 8005d10:	463a      	mov	r2, r7
 8005d12:	4640      	mov	r0, r8
 8005d14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d18:	4798      	blx	r3
 8005d1a:	462e      	mov	r6, r5
 8005d1c:	6825      	ldr	r5, [r4, #0]
 8005d1e:	f015 0510 	ands.w	r5, r5, #16
 8005d22:	d155      	bne.n	8005dd0 <_scanf_float+0x410>
 8005d24:	7035      	strb	r5, [r6, #0]
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d30:	d11b      	bne.n	8005d6a <_scanf_float+0x3aa>
 8005d32:	9b01      	ldr	r3, [sp, #4]
 8005d34:	454b      	cmp	r3, r9
 8005d36:	eba3 0209 	sub.w	r2, r3, r9
 8005d3a:	d123      	bne.n	8005d84 <_scanf_float+0x3c4>
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	4659      	mov	r1, fp
 8005d40:	4640      	mov	r0, r8
 8005d42:	f000 fe79 	bl	8006a38 <_strtod_r>
 8005d46:	6822      	ldr	r2, [r4, #0]
 8005d48:	9b03      	ldr	r3, [sp, #12]
 8005d4a:	f012 0f02 	tst.w	r2, #2
 8005d4e:	4606      	mov	r6, r0
 8005d50:	460f      	mov	r7, r1
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	d021      	beq.n	8005d9a <_scanf_float+0x3da>
 8005d56:	1d1a      	adds	r2, r3, #4
 8005d58:	9903      	ldr	r1, [sp, #12]
 8005d5a:	600a      	str	r2, [r1, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	e9c3 6700 	strd	r6, r7, [r3]
 8005d62:	68e3      	ldr	r3, [r4, #12]
 8005d64:	3301      	adds	r3, #1
 8005d66:	60e3      	str	r3, [r4, #12]
 8005d68:	e66d      	b.n	8005a46 <_scanf_float+0x86>
 8005d6a:	9b04      	ldr	r3, [sp, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d0e5      	beq.n	8005d3c <_scanf_float+0x37c>
 8005d70:	9905      	ldr	r1, [sp, #20]
 8005d72:	230a      	movs	r3, #10
 8005d74:	462a      	mov	r2, r5
 8005d76:	4640      	mov	r0, r8
 8005d78:	3101      	adds	r1, #1
 8005d7a:	f000 fedf 	bl	8006b3c <_strtol_r>
 8005d7e:	9b04      	ldr	r3, [sp, #16]
 8005d80:	9e05      	ldr	r6, [sp, #20]
 8005d82:	1ac2      	subs	r2, r0, r3
 8005d84:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005d88:	429e      	cmp	r6, r3
 8005d8a:	bf28      	it	cs
 8005d8c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005d90:	4630      	mov	r0, r6
 8005d92:	4910      	ldr	r1, [pc, #64]	; (8005dd4 <_scanf_float+0x414>)
 8005d94:	f000 f826 	bl	8005de4 <siprintf>
 8005d98:	e7d0      	b.n	8005d3c <_scanf_float+0x37c>
 8005d9a:	f012 0f04 	tst.w	r2, #4
 8005d9e:	f103 0204 	add.w	r2, r3, #4
 8005da2:	d1d9      	bne.n	8005d58 <_scanf_float+0x398>
 8005da4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005da8:	f8cc 2000 	str.w	r2, [ip]
 8005dac:	f8d3 8000 	ldr.w	r8, [r3]
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	f7fc fd34 	bl	8002820 <__aeabi_dcmpun>
 8005db8:	b128      	cbz	r0, 8005dc6 <_scanf_float+0x406>
 8005dba:	4807      	ldr	r0, [pc, #28]	; (8005dd8 <_scanf_float+0x418>)
 8005dbc:	f000 f80e 	bl	8005ddc <nanf>
 8005dc0:	f8c8 0000 	str.w	r0, [r8]
 8005dc4:	e7cd      	b.n	8005d62 <_scanf_float+0x3a2>
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	4639      	mov	r1, r7
 8005dca:	f7fc fd87 	bl	80028dc <__aeabi_d2f>
 8005dce:	e7f7      	b.n	8005dc0 <_scanf_float+0x400>
 8005dd0:	2500      	movs	r5, #0
 8005dd2:	e638      	b.n	8005a46 <_scanf_float+0x86>
 8005dd4:	0801b3ac 	.word	0x0801b3ac
 8005dd8:	0801b326 	.word	0x0801b326

08005ddc <nanf>:
 8005ddc:	4800      	ldr	r0, [pc, #0]	; (8005de0 <nanf+0x4>)
 8005dde:	4770      	bx	lr
 8005de0:	7fc00000 	.word	0x7fc00000

08005de4 <siprintf>:
 8005de4:	b40e      	push	{r1, r2, r3}
 8005de6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005dea:	b500      	push	{lr}
 8005dec:	b09c      	sub	sp, #112	; 0x70
 8005dee:	ab1d      	add	r3, sp, #116	; 0x74
 8005df0:	9002      	str	r0, [sp, #8]
 8005df2:	9006      	str	r0, [sp, #24]
 8005df4:	9107      	str	r1, [sp, #28]
 8005df6:	9104      	str	r1, [sp, #16]
 8005df8:	4808      	ldr	r0, [pc, #32]	; (8005e1c <siprintf+0x38>)
 8005dfa:	4909      	ldr	r1, [pc, #36]	; (8005e20 <siprintf+0x3c>)
 8005dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e00:	9105      	str	r1, [sp, #20]
 8005e02:	6800      	ldr	r0, [r0, #0]
 8005e04:	a902      	add	r1, sp, #8
 8005e06:	9301      	str	r3, [sp, #4]
 8005e08:	f002 fec4 	bl	8008b94 <_svfiprintf_r>
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	9b02      	ldr	r3, [sp, #8]
 8005e10:	701a      	strb	r2, [r3, #0]
 8005e12:	b01c      	add	sp, #112	; 0x70
 8005e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e18:	b003      	add	sp, #12
 8005e1a:	4770      	bx	lr
 8005e1c:	20000010 	.word	0x20000010
 8005e20:	ffff0208 	.word	0xffff0208

08005e24 <sulp>:
 8005e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e28:	460f      	mov	r7, r1
 8005e2a:	4690      	mov	r8, r2
 8005e2c:	f002 fc1e 	bl	800866c <__ulp>
 8005e30:	4604      	mov	r4, r0
 8005e32:	460d      	mov	r5, r1
 8005e34:	f1b8 0f00 	cmp.w	r8, #0
 8005e38:	d011      	beq.n	8005e5e <sulp+0x3a>
 8005e3a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005e3e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	dd0b      	ble.n	8005e5e <sulp+0x3a>
 8005e46:	2400      	movs	r4, #0
 8005e48:	051b      	lsls	r3, r3, #20
 8005e4a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005e4e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005e52:	4622      	mov	r2, r4
 8005e54:	462b      	mov	r3, r5
 8005e56:	f7fc fa49 	bl	80022ec <__aeabi_dmul>
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	460d      	mov	r5, r1
 8005e5e:	4620      	mov	r0, r4
 8005e60:	4629      	mov	r1, r5
 8005e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005e68 <_strtod_l>:
 8005e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e6c:	469b      	mov	fp, r3
 8005e6e:	2300      	movs	r3, #0
 8005e70:	b09f      	sub	sp, #124	; 0x7c
 8005e72:	931a      	str	r3, [sp, #104]	; 0x68
 8005e74:	4b9e      	ldr	r3, [pc, #632]	; (80060f0 <_strtod_l+0x288>)
 8005e76:	4682      	mov	sl, r0
 8005e78:	681f      	ldr	r7, [r3, #0]
 8005e7a:	460e      	mov	r6, r1
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	9215      	str	r2, [sp, #84]	; 0x54
 8005e80:	f7fc f870 	bl	8001f64 <strlen>
 8005e84:	f04f 0800 	mov.w	r8, #0
 8005e88:	4604      	mov	r4, r0
 8005e8a:	f04f 0900 	mov.w	r9, #0
 8005e8e:	9619      	str	r6, [sp, #100]	; 0x64
 8005e90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e92:	781a      	ldrb	r2, [r3, #0]
 8005e94:	2a2b      	cmp	r2, #43	; 0x2b
 8005e96:	d04c      	beq.n	8005f32 <_strtod_l+0xca>
 8005e98:	d83a      	bhi.n	8005f10 <_strtod_l+0xa8>
 8005e9a:	2a0d      	cmp	r2, #13
 8005e9c:	d833      	bhi.n	8005f06 <_strtod_l+0x9e>
 8005e9e:	2a08      	cmp	r2, #8
 8005ea0:	d833      	bhi.n	8005f0a <_strtod_l+0xa2>
 8005ea2:	2a00      	cmp	r2, #0
 8005ea4:	d03d      	beq.n	8005f22 <_strtod_l+0xba>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	930a      	str	r3, [sp, #40]	; 0x28
 8005eaa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005eac:	782b      	ldrb	r3, [r5, #0]
 8005eae:	2b30      	cmp	r3, #48	; 0x30
 8005eb0:	f040 80aa 	bne.w	8006008 <_strtod_l+0x1a0>
 8005eb4:	786b      	ldrb	r3, [r5, #1]
 8005eb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005eba:	2b58      	cmp	r3, #88	; 0x58
 8005ebc:	d166      	bne.n	8005f8c <_strtod_l+0x124>
 8005ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ec0:	4650      	mov	r0, sl
 8005ec2:	9301      	str	r3, [sp, #4]
 8005ec4:	ab1a      	add	r3, sp, #104	; 0x68
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	4a8a      	ldr	r2, [pc, #552]	; (80060f4 <_strtod_l+0x28c>)
 8005eca:	f8cd b008 	str.w	fp, [sp, #8]
 8005ece:	ab1b      	add	r3, sp, #108	; 0x6c
 8005ed0:	a919      	add	r1, sp, #100	; 0x64
 8005ed2:	f001 fd23 	bl	800791c <__gethex>
 8005ed6:	f010 0607 	ands.w	r6, r0, #7
 8005eda:	4604      	mov	r4, r0
 8005edc:	d005      	beq.n	8005eea <_strtod_l+0x82>
 8005ede:	2e06      	cmp	r6, #6
 8005ee0:	d129      	bne.n	8005f36 <_strtod_l+0xce>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	3501      	adds	r5, #1
 8005ee6:	9519      	str	r5, [sp, #100]	; 0x64
 8005ee8:	930a      	str	r3, [sp, #40]	; 0x28
 8005eea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f040 858a 	bne.w	8006a06 <_strtod_l+0xb9e>
 8005ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef4:	b1d3      	cbz	r3, 8005f2c <_strtod_l+0xc4>
 8005ef6:	4642      	mov	r2, r8
 8005ef8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005efc:	4610      	mov	r0, r2
 8005efe:	4619      	mov	r1, r3
 8005f00:	b01f      	add	sp, #124	; 0x7c
 8005f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f06:	2a20      	cmp	r2, #32
 8005f08:	d1cd      	bne.n	8005ea6 <_strtod_l+0x3e>
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	9319      	str	r3, [sp, #100]	; 0x64
 8005f0e:	e7bf      	b.n	8005e90 <_strtod_l+0x28>
 8005f10:	2a2d      	cmp	r2, #45	; 0x2d
 8005f12:	d1c8      	bne.n	8005ea6 <_strtod_l+0x3e>
 8005f14:	2201      	movs	r2, #1
 8005f16:	920a      	str	r2, [sp, #40]	; 0x28
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	9219      	str	r2, [sp, #100]	; 0x64
 8005f1c:	785b      	ldrb	r3, [r3, #1]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1c3      	bne.n	8005eaa <_strtod_l+0x42>
 8005f22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f24:	9619      	str	r6, [sp, #100]	; 0x64
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f040 856b 	bne.w	8006a02 <_strtod_l+0xb9a>
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	464b      	mov	r3, r9
 8005f30:	e7e4      	b.n	8005efc <_strtod_l+0x94>
 8005f32:	2200      	movs	r2, #0
 8005f34:	e7ef      	b.n	8005f16 <_strtod_l+0xae>
 8005f36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005f38:	b13a      	cbz	r2, 8005f4a <_strtod_l+0xe2>
 8005f3a:	2135      	movs	r1, #53	; 0x35
 8005f3c:	a81c      	add	r0, sp, #112	; 0x70
 8005f3e:	f002 fc99 	bl	8008874 <__copybits>
 8005f42:	4650      	mov	r0, sl
 8005f44:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005f46:	f002 f861 	bl	800800c <_Bfree>
 8005f4a:	3e01      	subs	r6, #1
 8005f4c:	2e04      	cmp	r6, #4
 8005f4e:	d806      	bhi.n	8005f5e <_strtod_l+0xf6>
 8005f50:	e8df f006 	tbb	[pc, r6]
 8005f54:	1714030a 	.word	0x1714030a
 8005f58:	0a          	.byte	0x0a
 8005f59:	00          	.byte	0x00
 8005f5a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005f5e:	0721      	lsls	r1, r4, #28
 8005f60:	d5c3      	bpl.n	8005eea <_strtod_l+0x82>
 8005f62:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005f66:	e7c0      	b.n	8005eea <_strtod_l+0x82>
 8005f68:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005f6a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005f6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005f72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f76:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005f7a:	e7f0      	b.n	8005f5e <_strtod_l+0xf6>
 8005f7c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80060f8 <_strtod_l+0x290>
 8005f80:	e7ed      	b.n	8005f5e <_strtod_l+0xf6>
 8005f82:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005f86:	f04f 38ff 	mov.w	r8, #4294967295
 8005f8a:	e7e8      	b.n	8005f5e <_strtod_l+0xf6>
 8005f8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	9219      	str	r2, [sp, #100]	; 0x64
 8005f92:	785b      	ldrb	r3, [r3, #1]
 8005f94:	2b30      	cmp	r3, #48	; 0x30
 8005f96:	d0f9      	beq.n	8005f8c <_strtod_l+0x124>
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0a6      	beq.n	8005eea <_strtod_l+0x82>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	9307      	str	r3, [sp, #28]
 8005fa0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005fa2:	220a      	movs	r2, #10
 8005fa4:	9308      	str	r3, [sp, #32]
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	469b      	mov	fp, r3
 8005faa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005fae:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005fb0:	7805      	ldrb	r5, [r0, #0]
 8005fb2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005fb6:	b2d9      	uxtb	r1, r3
 8005fb8:	2909      	cmp	r1, #9
 8005fba:	d927      	bls.n	800600c <_strtod_l+0x1a4>
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	4639      	mov	r1, r7
 8005fc0:	f002 fefe 	bl	8008dc0 <strncmp>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	d033      	beq.n	8006030 <_strtod_l+0x1c8>
 8005fc8:	2000      	movs	r0, #0
 8005fca:	462a      	mov	r2, r5
 8005fcc:	465c      	mov	r4, fp
 8005fce:	4603      	mov	r3, r0
 8005fd0:	9004      	str	r0, [sp, #16]
 8005fd2:	2a65      	cmp	r2, #101	; 0x65
 8005fd4:	d001      	beq.n	8005fda <_strtod_l+0x172>
 8005fd6:	2a45      	cmp	r2, #69	; 0x45
 8005fd8:	d114      	bne.n	8006004 <_strtod_l+0x19c>
 8005fda:	b91c      	cbnz	r4, 8005fe4 <_strtod_l+0x17c>
 8005fdc:	9a07      	ldr	r2, [sp, #28]
 8005fde:	4302      	orrs	r2, r0
 8005fe0:	d09f      	beq.n	8005f22 <_strtod_l+0xba>
 8005fe2:	2400      	movs	r4, #0
 8005fe4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005fe6:	1c72      	adds	r2, r6, #1
 8005fe8:	9219      	str	r2, [sp, #100]	; 0x64
 8005fea:	7872      	ldrb	r2, [r6, #1]
 8005fec:	2a2b      	cmp	r2, #43	; 0x2b
 8005fee:	d079      	beq.n	80060e4 <_strtod_l+0x27c>
 8005ff0:	2a2d      	cmp	r2, #45	; 0x2d
 8005ff2:	f000 8083 	beq.w	80060fc <_strtod_l+0x294>
 8005ff6:	2700      	movs	r7, #0
 8005ff8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005ffc:	2909      	cmp	r1, #9
 8005ffe:	f240 8083 	bls.w	8006108 <_strtod_l+0x2a0>
 8006002:	9619      	str	r6, [sp, #100]	; 0x64
 8006004:	2500      	movs	r5, #0
 8006006:	e09f      	b.n	8006148 <_strtod_l+0x2e0>
 8006008:	2300      	movs	r3, #0
 800600a:	e7c8      	b.n	8005f9e <_strtod_l+0x136>
 800600c:	f1bb 0f08 	cmp.w	fp, #8
 8006010:	bfd5      	itete	le
 8006012:	9906      	ldrle	r1, [sp, #24]
 8006014:	9905      	ldrgt	r1, [sp, #20]
 8006016:	fb02 3301 	mlale	r3, r2, r1, r3
 800601a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800601e:	f100 0001 	add.w	r0, r0, #1
 8006022:	bfd4      	ite	le
 8006024:	9306      	strle	r3, [sp, #24]
 8006026:	9305      	strgt	r3, [sp, #20]
 8006028:	f10b 0b01 	add.w	fp, fp, #1
 800602c:	9019      	str	r0, [sp, #100]	; 0x64
 800602e:	e7be      	b.n	8005fae <_strtod_l+0x146>
 8006030:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006032:	191a      	adds	r2, r3, r4
 8006034:	9219      	str	r2, [sp, #100]	; 0x64
 8006036:	5d1a      	ldrb	r2, [r3, r4]
 8006038:	f1bb 0f00 	cmp.w	fp, #0
 800603c:	d036      	beq.n	80060ac <_strtod_l+0x244>
 800603e:	465c      	mov	r4, fp
 8006040:	9004      	str	r0, [sp, #16]
 8006042:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006046:	2b09      	cmp	r3, #9
 8006048:	d912      	bls.n	8006070 <_strtod_l+0x208>
 800604a:	2301      	movs	r3, #1
 800604c:	e7c1      	b.n	8005fd2 <_strtod_l+0x16a>
 800604e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006050:	3001      	adds	r0, #1
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	9219      	str	r2, [sp, #100]	; 0x64
 8006056:	785a      	ldrb	r2, [r3, #1]
 8006058:	2a30      	cmp	r2, #48	; 0x30
 800605a:	d0f8      	beq.n	800604e <_strtod_l+0x1e6>
 800605c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006060:	2b08      	cmp	r3, #8
 8006062:	f200 84d5 	bhi.w	8006a10 <_strtod_l+0xba8>
 8006066:	9004      	str	r0, [sp, #16]
 8006068:	2000      	movs	r0, #0
 800606a:	4604      	mov	r4, r0
 800606c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800606e:	9308      	str	r3, [sp, #32]
 8006070:	3a30      	subs	r2, #48	; 0x30
 8006072:	f100 0301 	add.w	r3, r0, #1
 8006076:	d013      	beq.n	80060a0 <_strtod_l+0x238>
 8006078:	9904      	ldr	r1, [sp, #16]
 800607a:	1905      	adds	r5, r0, r4
 800607c:	4419      	add	r1, r3
 800607e:	9104      	str	r1, [sp, #16]
 8006080:	4623      	mov	r3, r4
 8006082:	210a      	movs	r1, #10
 8006084:	42ab      	cmp	r3, r5
 8006086:	d113      	bne.n	80060b0 <_strtod_l+0x248>
 8006088:	1823      	adds	r3, r4, r0
 800608a:	2b08      	cmp	r3, #8
 800608c:	f104 0401 	add.w	r4, r4, #1
 8006090:	4404      	add	r4, r0
 8006092:	dc1b      	bgt.n	80060cc <_strtod_l+0x264>
 8006094:	230a      	movs	r3, #10
 8006096:	9906      	ldr	r1, [sp, #24]
 8006098:	fb03 2301 	mla	r3, r3, r1, r2
 800609c:	9306      	str	r3, [sp, #24]
 800609e:	2300      	movs	r3, #0
 80060a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80060a2:	4618      	mov	r0, r3
 80060a4:	1c51      	adds	r1, r2, #1
 80060a6:	9119      	str	r1, [sp, #100]	; 0x64
 80060a8:	7852      	ldrb	r2, [r2, #1]
 80060aa:	e7ca      	b.n	8006042 <_strtod_l+0x1da>
 80060ac:	4658      	mov	r0, fp
 80060ae:	e7d3      	b.n	8006058 <_strtod_l+0x1f0>
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	dc04      	bgt.n	80060be <_strtod_l+0x256>
 80060b4:	9f06      	ldr	r7, [sp, #24]
 80060b6:	434f      	muls	r7, r1
 80060b8:	9706      	str	r7, [sp, #24]
 80060ba:	3301      	adds	r3, #1
 80060bc:	e7e2      	b.n	8006084 <_strtod_l+0x21c>
 80060be:	1c5f      	adds	r7, r3, #1
 80060c0:	2f10      	cmp	r7, #16
 80060c2:	bfde      	ittt	le
 80060c4:	9f05      	ldrle	r7, [sp, #20]
 80060c6:	434f      	mulle	r7, r1
 80060c8:	9705      	strle	r7, [sp, #20]
 80060ca:	e7f6      	b.n	80060ba <_strtod_l+0x252>
 80060cc:	2c10      	cmp	r4, #16
 80060ce:	bfdf      	itttt	le
 80060d0:	230a      	movle	r3, #10
 80060d2:	9905      	ldrle	r1, [sp, #20]
 80060d4:	fb03 2301 	mlale	r3, r3, r1, r2
 80060d8:	9305      	strle	r3, [sp, #20]
 80060da:	e7e0      	b.n	800609e <_strtod_l+0x236>
 80060dc:	2300      	movs	r3, #0
 80060de:	9304      	str	r3, [sp, #16]
 80060e0:	2301      	movs	r3, #1
 80060e2:	e77b      	b.n	8005fdc <_strtod_l+0x174>
 80060e4:	2700      	movs	r7, #0
 80060e6:	1cb2      	adds	r2, r6, #2
 80060e8:	9219      	str	r2, [sp, #100]	; 0x64
 80060ea:	78b2      	ldrb	r2, [r6, #2]
 80060ec:	e784      	b.n	8005ff8 <_strtod_l+0x190>
 80060ee:	bf00      	nop
 80060f0:	0801b600 	.word	0x0801b600
 80060f4:	0801b3b4 	.word	0x0801b3b4
 80060f8:	7ff00000 	.word	0x7ff00000
 80060fc:	2701      	movs	r7, #1
 80060fe:	e7f2      	b.n	80060e6 <_strtod_l+0x27e>
 8006100:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006102:	1c51      	adds	r1, r2, #1
 8006104:	9119      	str	r1, [sp, #100]	; 0x64
 8006106:	7852      	ldrb	r2, [r2, #1]
 8006108:	2a30      	cmp	r2, #48	; 0x30
 800610a:	d0f9      	beq.n	8006100 <_strtod_l+0x298>
 800610c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006110:	2908      	cmp	r1, #8
 8006112:	f63f af77 	bhi.w	8006004 <_strtod_l+0x19c>
 8006116:	f04f 0e0a 	mov.w	lr, #10
 800611a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800611e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006120:	9209      	str	r2, [sp, #36]	; 0x24
 8006122:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006124:	1c51      	adds	r1, r2, #1
 8006126:	9119      	str	r1, [sp, #100]	; 0x64
 8006128:	7852      	ldrb	r2, [r2, #1]
 800612a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800612e:	2d09      	cmp	r5, #9
 8006130:	d935      	bls.n	800619e <_strtod_l+0x336>
 8006132:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006134:	1b49      	subs	r1, r1, r5
 8006136:	2908      	cmp	r1, #8
 8006138:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800613c:	dc02      	bgt.n	8006144 <_strtod_l+0x2dc>
 800613e:	4565      	cmp	r5, ip
 8006140:	bfa8      	it	ge
 8006142:	4665      	movge	r5, ip
 8006144:	b107      	cbz	r7, 8006148 <_strtod_l+0x2e0>
 8006146:	426d      	negs	r5, r5
 8006148:	2c00      	cmp	r4, #0
 800614a:	d14c      	bne.n	80061e6 <_strtod_l+0x37e>
 800614c:	9907      	ldr	r1, [sp, #28]
 800614e:	4301      	orrs	r1, r0
 8006150:	f47f aecb 	bne.w	8005eea <_strtod_l+0x82>
 8006154:	2b00      	cmp	r3, #0
 8006156:	f47f aee4 	bne.w	8005f22 <_strtod_l+0xba>
 800615a:	2a69      	cmp	r2, #105	; 0x69
 800615c:	d026      	beq.n	80061ac <_strtod_l+0x344>
 800615e:	dc23      	bgt.n	80061a8 <_strtod_l+0x340>
 8006160:	2a49      	cmp	r2, #73	; 0x49
 8006162:	d023      	beq.n	80061ac <_strtod_l+0x344>
 8006164:	2a4e      	cmp	r2, #78	; 0x4e
 8006166:	f47f aedc 	bne.w	8005f22 <_strtod_l+0xba>
 800616a:	499d      	ldr	r1, [pc, #628]	; (80063e0 <_strtod_l+0x578>)
 800616c:	a819      	add	r0, sp, #100	; 0x64
 800616e:	f001 fe23 	bl	8007db8 <__match>
 8006172:	2800      	cmp	r0, #0
 8006174:	f43f aed5 	beq.w	8005f22 <_strtod_l+0xba>
 8006178:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b28      	cmp	r3, #40	; 0x28
 800617e:	d12c      	bne.n	80061da <_strtod_l+0x372>
 8006180:	4998      	ldr	r1, [pc, #608]	; (80063e4 <_strtod_l+0x57c>)
 8006182:	aa1c      	add	r2, sp, #112	; 0x70
 8006184:	a819      	add	r0, sp, #100	; 0x64
 8006186:	f001 fe2b 	bl	8007de0 <__hexnan>
 800618a:	2805      	cmp	r0, #5
 800618c:	d125      	bne.n	80061da <_strtod_l+0x372>
 800618e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006190:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006194:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006198:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800619c:	e6a5      	b.n	8005eea <_strtod_l+0x82>
 800619e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80061a2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80061a6:	e7bc      	b.n	8006122 <_strtod_l+0x2ba>
 80061a8:	2a6e      	cmp	r2, #110	; 0x6e
 80061aa:	e7dc      	b.n	8006166 <_strtod_l+0x2fe>
 80061ac:	498e      	ldr	r1, [pc, #568]	; (80063e8 <_strtod_l+0x580>)
 80061ae:	a819      	add	r0, sp, #100	; 0x64
 80061b0:	f001 fe02 	bl	8007db8 <__match>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	f43f aeb4 	beq.w	8005f22 <_strtod_l+0xba>
 80061ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80061bc:	498b      	ldr	r1, [pc, #556]	; (80063ec <_strtod_l+0x584>)
 80061be:	3b01      	subs	r3, #1
 80061c0:	a819      	add	r0, sp, #100	; 0x64
 80061c2:	9319      	str	r3, [sp, #100]	; 0x64
 80061c4:	f001 fdf8 	bl	8007db8 <__match>
 80061c8:	b910      	cbnz	r0, 80061d0 <_strtod_l+0x368>
 80061ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80061cc:	3301      	adds	r3, #1
 80061ce:	9319      	str	r3, [sp, #100]	; 0x64
 80061d0:	f04f 0800 	mov.w	r8, #0
 80061d4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80063f0 <_strtod_l+0x588>
 80061d8:	e687      	b.n	8005eea <_strtod_l+0x82>
 80061da:	4886      	ldr	r0, [pc, #536]	; (80063f4 <_strtod_l+0x58c>)
 80061dc:	f002 fdda 	bl	8008d94 <nan>
 80061e0:	4680      	mov	r8, r0
 80061e2:	4689      	mov	r9, r1
 80061e4:	e681      	b.n	8005eea <_strtod_l+0x82>
 80061e6:	9b04      	ldr	r3, [sp, #16]
 80061e8:	f1bb 0f00 	cmp.w	fp, #0
 80061ec:	bf08      	it	eq
 80061ee:	46a3      	moveq	fp, r4
 80061f0:	1aeb      	subs	r3, r5, r3
 80061f2:	2c10      	cmp	r4, #16
 80061f4:	9806      	ldr	r0, [sp, #24]
 80061f6:	4626      	mov	r6, r4
 80061f8:	9307      	str	r3, [sp, #28]
 80061fa:	bfa8      	it	ge
 80061fc:	2610      	movge	r6, #16
 80061fe:	f7fb fffb 	bl	80021f8 <__aeabi_ui2d>
 8006202:	2c09      	cmp	r4, #9
 8006204:	4680      	mov	r8, r0
 8006206:	4689      	mov	r9, r1
 8006208:	dd13      	ble.n	8006232 <_strtod_l+0x3ca>
 800620a:	4b7b      	ldr	r3, [pc, #492]	; (80063f8 <_strtod_l+0x590>)
 800620c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006210:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006214:	f7fc f86a 	bl	80022ec <__aeabi_dmul>
 8006218:	4680      	mov	r8, r0
 800621a:	9805      	ldr	r0, [sp, #20]
 800621c:	4689      	mov	r9, r1
 800621e:	f7fb ffeb 	bl	80021f8 <__aeabi_ui2d>
 8006222:	4602      	mov	r2, r0
 8006224:	460b      	mov	r3, r1
 8006226:	4640      	mov	r0, r8
 8006228:	4649      	mov	r1, r9
 800622a:	f7fb fea9 	bl	8001f80 <__adddf3>
 800622e:	4680      	mov	r8, r0
 8006230:	4689      	mov	r9, r1
 8006232:	2c0f      	cmp	r4, #15
 8006234:	dc36      	bgt.n	80062a4 <_strtod_l+0x43c>
 8006236:	9b07      	ldr	r3, [sp, #28]
 8006238:	2b00      	cmp	r3, #0
 800623a:	f43f ae56 	beq.w	8005eea <_strtod_l+0x82>
 800623e:	dd22      	ble.n	8006286 <_strtod_l+0x41e>
 8006240:	2b16      	cmp	r3, #22
 8006242:	dc09      	bgt.n	8006258 <_strtod_l+0x3f0>
 8006244:	496c      	ldr	r1, [pc, #432]	; (80063f8 <_strtod_l+0x590>)
 8006246:	4642      	mov	r2, r8
 8006248:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800624c:	464b      	mov	r3, r9
 800624e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006252:	f7fc f84b 	bl	80022ec <__aeabi_dmul>
 8006256:	e7c3      	b.n	80061e0 <_strtod_l+0x378>
 8006258:	9a07      	ldr	r2, [sp, #28]
 800625a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800625e:	4293      	cmp	r3, r2
 8006260:	db20      	blt.n	80062a4 <_strtod_l+0x43c>
 8006262:	4d65      	ldr	r5, [pc, #404]	; (80063f8 <_strtod_l+0x590>)
 8006264:	f1c4 040f 	rsb	r4, r4, #15
 8006268:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800626c:	4642      	mov	r2, r8
 800626e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006272:	464b      	mov	r3, r9
 8006274:	f7fc f83a 	bl	80022ec <__aeabi_dmul>
 8006278:	9b07      	ldr	r3, [sp, #28]
 800627a:	1b1c      	subs	r4, r3, r4
 800627c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006280:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006284:	e7e5      	b.n	8006252 <_strtod_l+0x3ea>
 8006286:	9b07      	ldr	r3, [sp, #28]
 8006288:	3316      	adds	r3, #22
 800628a:	db0b      	blt.n	80062a4 <_strtod_l+0x43c>
 800628c:	9b04      	ldr	r3, [sp, #16]
 800628e:	4640      	mov	r0, r8
 8006290:	1b5d      	subs	r5, r3, r5
 8006292:	4b59      	ldr	r3, [pc, #356]	; (80063f8 <_strtod_l+0x590>)
 8006294:	4649      	mov	r1, r9
 8006296:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800629a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800629e:	f7fc f94f 	bl	8002540 <__aeabi_ddiv>
 80062a2:	e79d      	b.n	80061e0 <_strtod_l+0x378>
 80062a4:	9b07      	ldr	r3, [sp, #28]
 80062a6:	1ba6      	subs	r6, r4, r6
 80062a8:	441e      	add	r6, r3
 80062aa:	2e00      	cmp	r6, #0
 80062ac:	dd74      	ble.n	8006398 <_strtod_l+0x530>
 80062ae:	f016 030f 	ands.w	r3, r6, #15
 80062b2:	d00a      	beq.n	80062ca <_strtod_l+0x462>
 80062b4:	4950      	ldr	r1, [pc, #320]	; (80063f8 <_strtod_l+0x590>)
 80062b6:	4642      	mov	r2, r8
 80062b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80062bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062c0:	464b      	mov	r3, r9
 80062c2:	f7fc f813 	bl	80022ec <__aeabi_dmul>
 80062c6:	4680      	mov	r8, r0
 80062c8:	4689      	mov	r9, r1
 80062ca:	f036 060f 	bics.w	r6, r6, #15
 80062ce:	d052      	beq.n	8006376 <_strtod_l+0x50e>
 80062d0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80062d4:	dd27      	ble.n	8006326 <_strtod_l+0x4be>
 80062d6:	f04f 0b00 	mov.w	fp, #0
 80062da:	f8cd b010 	str.w	fp, [sp, #16]
 80062de:	f8cd b020 	str.w	fp, [sp, #32]
 80062e2:	f8cd b018 	str.w	fp, [sp, #24]
 80062e6:	2322      	movs	r3, #34	; 0x22
 80062e8:	f04f 0800 	mov.w	r8, #0
 80062ec:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80063f0 <_strtod_l+0x588>
 80062f0:	f8ca 3000 	str.w	r3, [sl]
 80062f4:	9b08      	ldr	r3, [sp, #32]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f43f adf7 	beq.w	8005eea <_strtod_l+0x82>
 80062fc:	4650      	mov	r0, sl
 80062fe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006300:	f001 fe84 	bl	800800c <_Bfree>
 8006304:	4650      	mov	r0, sl
 8006306:	9906      	ldr	r1, [sp, #24]
 8006308:	f001 fe80 	bl	800800c <_Bfree>
 800630c:	4650      	mov	r0, sl
 800630e:	9904      	ldr	r1, [sp, #16]
 8006310:	f001 fe7c 	bl	800800c <_Bfree>
 8006314:	4650      	mov	r0, sl
 8006316:	9908      	ldr	r1, [sp, #32]
 8006318:	f001 fe78 	bl	800800c <_Bfree>
 800631c:	4659      	mov	r1, fp
 800631e:	4650      	mov	r0, sl
 8006320:	f001 fe74 	bl	800800c <_Bfree>
 8006324:	e5e1      	b.n	8005eea <_strtod_l+0x82>
 8006326:	4b35      	ldr	r3, [pc, #212]	; (80063fc <_strtod_l+0x594>)
 8006328:	4640      	mov	r0, r8
 800632a:	9305      	str	r3, [sp, #20]
 800632c:	2300      	movs	r3, #0
 800632e:	4649      	mov	r1, r9
 8006330:	461f      	mov	r7, r3
 8006332:	1136      	asrs	r6, r6, #4
 8006334:	2e01      	cmp	r6, #1
 8006336:	dc21      	bgt.n	800637c <_strtod_l+0x514>
 8006338:	b10b      	cbz	r3, 800633e <_strtod_l+0x4d6>
 800633a:	4680      	mov	r8, r0
 800633c:	4689      	mov	r9, r1
 800633e:	4b2f      	ldr	r3, [pc, #188]	; (80063fc <_strtod_l+0x594>)
 8006340:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006344:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006348:	4642      	mov	r2, r8
 800634a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800634e:	464b      	mov	r3, r9
 8006350:	f7fb ffcc 	bl	80022ec <__aeabi_dmul>
 8006354:	4b26      	ldr	r3, [pc, #152]	; (80063f0 <_strtod_l+0x588>)
 8006356:	460a      	mov	r2, r1
 8006358:	400b      	ands	r3, r1
 800635a:	4929      	ldr	r1, [pc, #164]	; (8006400 <_strtod_l+0x598>)
 800635c:	4680      	mov	r8, r0
 800635e:	428b      	cmp	r3, r1
 8006360:	d8b9      	bhi.n	80062d6 <_strtod_l+0x46e>
 8006362:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006366:	428b      	cmp	r3, r1
 8006368:	bf86      	itte	hi
 800636a:	f04f 38ff 	movhi.w	r8, #4294967295
 800636e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006404 <_strtod_l+0x59c>
 8006372:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006376:	2300      	movs	r3, #0
 8006378:	9305      	str	r3, [sp, #20]
 800637a:	e07f      	b.n	800647c <_strtod_l+0x614>
 800637c:	07f2      	lsls	r2, r6, #31
 800637e:	d505      	bpl.n	800638c <_strtod_l+0x524>
 8006380:	9b05      	ldr	r3, [sp, #20]
 8006382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006386:	f7fb ffb1 	bl	80022ec <__aeabi_dmul>
 800638a:	2301      	movs	r3, #1
 800638c:	9a05      	ldr	r2, [sp, #20]
 800638e:	3701      	adds	r7, #1
 8006390:	3208      	adds	r2, #8
 8006392:	1076      	asrs	r6, r6, #1
 8006394:	9205      	str	r2, [sp, #20]
 8006396:	e7cd      	b.n	8006334 <_strtod_l+0x4cc>
 8006398:	d0ed      	beq.n	8006376 <_strtod_l+0x50e>
 800639a:	4276      	negs	r6, r6
 800639c:	f016 020f 	ands.w	r2, r6, #15
 80063a0:	d00a      	beq.n	80063b8 <_strtod_l+0x550>
 80063a2:	4b15      	ldr	r3, [pc, #84]	; (80063f8 <_strtod_l+0x590>)
 80063a4:	4640      	mov	r0, r8
 80063a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063aa:	4649      	mov	r1, r9
 80063ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b0:	f7fc f8c6 	bl	8002540 <__aeabi_ddiv>
 80063b4:	4680      	mov	r8, r0
 80063b6:	4689      	mov	r9, r1
 80063b8:	1136      	asrs	r6, r6, #4
 80063ba:	d0dc      	beq.n	8006376 <_strtod_l+0x50e>
 80063bc:	2e1f      	cmp	r6, #31
 80063be:	dd23      	ble.n	8006408 <_strtod_l+0x5a0>
 80063c0:	f04f 0b00 	mov.w	fp, #0
 80063c4:	f8cd b010 	str.w	fp, [sp, #16]
 80063c8:	f8cd b020 	str.w	fp, [sp, #32]
 80063cc:	f8cd b018 	str.w	fp, [sp, #24]
 80063d0:	2322      	movs	r3, #34	; 0x22
 80063d2:	f04f 0800 	mov.w	r8, #0
 80063d6:	f04f 0900 	mov.w	r9, #0
 80063da:	f8ca 3000 	str.w	r3, [sl]
 80063de:	e789      	b.n	80062f4 <_strtod_l+0x48c>
 80063e0:	0801b385 	.word	0x0801b385
 80063e4:	0801b3c8 	.word	0x0801b3c8
 80063e8:	0801b37d 	.word	0x0801b37d
 80063ec:	0801b50c 	.word	0x0801b50c
 80063f0:	7ff00000 	.word	0x7ff00000
 80063f4:	0801b326 	.word	0x0801b326
 80063f8:	0801b698 	.word	0x0801b698
 80063fc:	0801b670 	.word	0x0801b670
 8006400:	7ca00000 	.word	0x7ca00000
 8006404:	7fefffff 	.word	0x7fefffff
 8006408:	f016 0310 	ands.w	r3, r6, #16
 800640c:	bf18      	it	ne
 800640e:	236a      	movne	r3, #106	; 0x6a
 8006410:	4640      	mov	r0, r8
 8006412:	9305      	str	r3, [sp, #20]
 8006414:	4649      	mov	r1, r9
 8006416:	2300      	movs	r3, #0
 8006418:	4fb0      	ldr	r7, [pc, #704]	; (80066dc <_strtod_l+0x874>)
 800641a:	07f2      	lsls	r2, r6, #31
 800641c:	d504      	bpl.n	8006428 <_strtod_l+0x5c0>
 800641e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006422:	f7fb ff63 	bl	80022ec <__aeabi_dmul>
 8006426:	2301      	movs	r3, #1
 8006428:	1076      	asrs	r6, r6, #1
 800642a:	f107 0708 	add.w	r7, r7, #8
 800642e:	d1f4      	bne.n	800641a <_strtod_l+0x5b2>
 8006430:	b10b      	cbz	r3, 8006436 <_strtod_l+0x5ce>
 8006432:	4680      	mov	r8, r0
 8006434:	4689      	mov	r9, r1
 8006436:	9b05      	ldr	r3, [sp, #20]
 8006438:	b1c3      	cbz	r3, 800646c <_strtod_l+0x604>
 800643a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800643e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006442:	2b00      	cmp	r3, #0
 8006444:	4649      	mov	r1, r9
 8006446:	dd11      	ble.n	800646c <_strtod_l+0x604>
 8006448:	2b1f      	cmp	r3, #31
 800644a:	f340 8127 	ble.w	800669c <_strtod_l+0x834>
 800644e:	2b34      	cmp	r3, #52	; 0x34
 8006450:	bfd8      	it	le
 8006452:	f04f 33ff 	movle.w	r3, #4294967295
 8006456:	f04f 0800 	mov.w	r8, #0
 800645a:	bfcf      	iteee	gt
 800645c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006460:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006464:	fa03 f202 	lslle.w	r2, r3, r2
 8006468:	ea02 0901 	andle.w	r9, r2, r1
 800646c:	2200      	movs	r2, #0
 800646e:	2300      	movs	r3, #0
 8006470:	4640      	mov	r0, r8
 8006472:	4649      	mov	r1, r9
 8006474:	f7fc f9a2 	bl	80027bc <__aeabi_dcmpeq>
 8006478:	2800      	cmp	r0, #0
 800647a:	d1a1      	bne.n	80063c0 <_strtod_l+0x558>
 800647c:	9b06      	ldr	r3, [sp, #24]
 800647e:	465a      	mov	r2, fp
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	4650      	mov	r0, sl
 8006484:	4623      	mov	r3, r4
 8006486:	9908      	ldr	r1, [sp, #32]
 8006488:	f001 fe28 	bl	80080dc <__s2b>
 800648c:	9008      	str	r0, [sp, #32]
 800648e:	2800      	cmp	r0, #0
 8006490:	f43f af21 	beq.w	80062d6 <_strtod_l+0x46e>
 8006494:	9b04      	ldr	r3, [sp, #16]
 8006496:	f04f 0b00 	mov.w	fp, #0
 800649a:	1b5d      	subs	r5, r3, r5
 800649c:	9b07      	ldr	r3, [sp, #28]
 800649e:	f8cd b010 	str.w	fp, [sp, #16]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	bfb4      	ite	lt
 80064a6:	462b      	movlt	r3, r5
 80064a8:	2300      	movge	r3, #0
 80064aa:	930e      	str	r3, [sp, #56]	; 0x38
 80064ac:	9b07      	ldr	r3, [sp, #28]
 80064ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80064b2:	9314      	str	r3, [sp, #80]	; 0x50
 80064b4:	9b08      	ldr	r3, [sp, #32]
 80064b6:	4650      	mov	r0, sl
 80064b8:	6859      	ldr	r1, [r3, #4]
 80064ba:	f001 fd67 	bl	8007f8c <_Balloc>
 80064be:	9006      	str	r0, [sp, #24]
 80064c0:	2800      	cmp	r0, #0
 80064c2:	f43f af10 	beq.w	80062e6 <_strtod_l+0x47e>
 80064c6:	9b08      	ldr	r3, [sp, #32]
 80064c8:	300c      	adds	r0, #12
 80064ca:	691a      	ldr	r2, [r3, #16]
 80064cc:	f103 010c 	add.w	r1, r3, #12
 80064d0:	3202      	adds	r2, #2
 80064d2:	0092      	lsls	r2, r2, #2
 80064d4:	f001 fd4c 	bl	8007f70 <memcpy>
 80064d8:	ab1c      	add	r3, sp, #112	; 0x70
 80064da:	9301      	str	r3, [sp, #4]
 80064dc:	ab1b      	add	r3, sp, #108	; 0x6c
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	4642      	mov	r2, r8
 80064e2:	464b      	mov	r3, r9
 80064e4:	4650      	mov	r0, sl
 80064e6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80064ea:	f002 f939 	bl	8008760 <__d2b>
 80064ee:	901a      	str	r0, [sp, #104]	; 0x68
 80064f0:	2800      	cmp	r0, #0
 80064f2:	f43f aef8 	beq.w	80062e6 <_strtod_l+0x47e>
 80064f6:	2101      	movs	r1, #1
 80064f8:	4650      	mov	r0, sl
 80064fa:	f001 fe87 	bl	800820c <__i2b>
 80064fe:	4603      	mov	r3, r0
 8006500:	9004      	str	r0, [sp, #16]
 8006502:	2800      	cmp	r0, #0
 8006504:	f43f aeef 	beq.w	80062e6 <_strtod_l+0x47e>
 8006508:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800650a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800650c:	2d00      	cmp	r5, #0
 800650e:	bfab      	itete	ge
 8006510:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006512:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8006514:	18ee      	addge	r6, r5, r3
 8006516:	1b5c      	sublt	r4, r3, r5
 8006518:	9b05      	ldr	r3, [sp, #20]
 800651a:	bfa8      	it	ge
 800651c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800651e:	eba5 0503 	sub.w	r5, r5, r3
 8006522:	4415      	add	r5, r2
 8006524:	4b6e      	ldr	r3, [pc, #440]	; (80066e0 <_strtod_l+0x878>)
 8006526:	f105 35ff 	add.w	r5, r5, #4294967295
 800652a:	bfb8      	it	lt
 800652c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800652e:	429d      	cmp	r5, r3
 8006530:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006534:	f280 80c4 	bge.w	80066c0 <_strtod_l+0x858>
 8006538:	1b5b      	subs	r3, r3, r5
 800653a:	2b1f      	cmp	r3, #31
 800653c:	f04f 0701 	mov.w	r7, #1
 8006540:	eba2 0203 	sub.w	r2, r2, r3
 8006544:	f300 80b1 	bgt.w	80066aa <_strtod_l+0x842>
 8006548:	2500      	movs	r5, #0
 800654a:	fa07 f303 	lsl.w	r3, r7, r3
 800654e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006550:	18b7      	adds	r7, r6, r2
 8006552:	9b05      	ldr	r3, [sp, #20]
 8006554:	42be      	cmp	r6, r7
 8006556:	4414      	add	r4, r2
 8006558:	441c      	add	r4, r3
 800655a:	4633      	mov	r3, r6
 800655c:	bfa8      	it	ge
 800655e:	463b      	movge	r3, r7
 8006560:	42a3      	cmp	r3, r4
 8006562:	bfa8      	it	ge
 8006564:	4623      	movge	r3, r4
 8006566:	2b00      	cmp	r3, #0
 8006568:	bfc2      	ittt	gt
 800656a:	1aff      	subgt	r7, r7, r3
 800656c:	1ae4      	subgt	r4, r4, r3
 800656e:	1af6      	subgt	r6, r6, r3
 8006570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006572:	2b00      	cmp	r3, #0
 8006574:	dd17      	ble.n	80065a6 <_strtod_l+0x73e>
 8006576:	461a      	mov	r2, r3
 8006578:	4650      	mov	r0, sl
 800657a:	9904      	ldr	r1, [sp, #16]
 800657c:	f001 ff04 	bl	8008388 <__pow5mult>
 8006580:	9004      	str	r0, [sp, #16]
 8006582:	2800      	cmp	r0, #0
 8006584:	f43f aeaf 	beq.w	80062e6 <_strtod_l+0x47e>
 8006588:	4601      	mov	r1, r0
 800658a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800658c:	4650      	mov	r0, sl
 800658e:	f001 fe53 	bl	8008238 <__multiply>
 8006592:	9009      	str	r0, [sp, #36]	; 0x24
 8006594:	2800      	cmp	r0, #0
 8006596:	f43f aea6 	beq.w	80062e6 <_strtod_l+0x47e>
 800659a:	4650      	mov	r0, sl
 800659c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800659e:	f001 fd35 	bl	800800c <_Bfree>
 80065a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065a4:	931a      	str	r3, [sp, #104]	; 0x68
 80065a6:	2f00      	cmp	r7, #0
 80065a8:	f300 808e 	bgt.w	80066c8 <_strtod_l+0x860>
 80065ac:	9b07      	ldr	r3, [sp, #28]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	dd08      	ble.n	80065c4 <_strtod_l+0x75c>
 80065b2:	4650      	mov	r0, sl
 80065b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80065b6:	9906      	ldr	r1, [sp, #24]
 80065b8:	f001 fee6 	bl	8008388 <__pow5mult>
 80065bc:	9006      	str	r0, [sp, #24]
 80065be:	2800      	cmp	r0, #0
 80065c0:	f43f ae91 	beq.w	80062e6 <_strtod_l+0x47e>
 80065c4:	2c00      	cmp	r4, #0
 80065c6:	dd08      	ble.n	80065da <_strtod_l+0x772>
 80065c8:	4622      	mov	r2, r4
 80065ca:	4650      	mov	r0, sl
 80065cc:	9906      	ldr	r1, [sp, #24]
 80065ce:	f001 ff35 	bl	800843c <__lshift>
 80065d2:	9006      	str	r0, [sp, #24]
 80065d4:	2800      	cmp	r0, #0
 80065d6:	f43f ae86 	beq.w	80062e6 <_strtod_l+0x47e>
 80065da:	2e00      	cmp	r6, #0
 80065dc:	dd08      	ble.n	80065f0 <_strtod_l+0x788>
 80065de:	4632      	mov	r2, r6
 80065e0:	4650      	mov	r0, sl
 80065e2:	9904      	ldr	r1, [sp, #16]
 80065e4:	f001 ff2a 	bl	800843c <__lshift>
 80065e8:	9004      	str	r0, [sp, #16]
 80065ea:	2800      	cmp	r0, #0
 80065ec:	f43f ae7b 	beq.w	80062e6 <_strtod_l+0x47e>
 80065f0:	4650      	mov	r0, sl
 80065f2:	9a06      	ldr	r2, [sp, #24]
 80065f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80065f6:	f001 ffad 	bl	8008554 <__mdiff>
 80065fa:	4683      	mov	fp, r0
 80065fc:	2800      	cmp	r0, #0
 80065fe:	f43f ae72 	beq.w	80062e6 <_strtod_l+0x47e>
 8006602:	2400      	movs	r4, #0
 8006604:	68c3      	ldr	r3, [r0, #12]
 8006606:	9904      	ldr	r1, [sp, #16]
 8006608:	60c4      	str	r4, [r0, #12]
 800660a:	930b      	str	r3, [sp, #44]	; 0x2c
 800660c:	f001 ff86 	bl	800851c <__mcmp>
 8006610:	42a0      	cmp	r0, r4
 8006612:	da6b      	bge.n	80066ec <_strtod_l+0x884>
 8006614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006616:	ea53 0308 	orrs.w	r3, r3, r8
 800661a:	f040 8091 	bne.w	8006740 <_strtod_l+0x8d8>
 800661e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006622:	2b00      	cmp	r3, #0
 8006624:	f040 808c 	bne.w	8006740 <_strtod_l+0x8d8>
 8006628:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800662c:	0d1b      	lsrs	r3, r3, #20
 800662e:	051b      	lsls	r3, r3, #20
 8006630:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006634:	f240 8084 	bls.w	8006740 <_strtod_l+0x8d8>
 8006638:	f8db 3014 	ldr.w	r3, [fp, #20]
 800663c:	b91b      	cbnz	r3, 8006646 <_strtod_l+0x7de>
 800663e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006642:	2b01      	cmp	r3, #1
 8006644:	dd7c      	ble.n	8006740 <_strtod_l+0x8d8>
 8006646:	4659      	mov	r1, fp
 8006648:	2201      	movs	r2, #1
 800664a:	4650      	mov	r0, sl
 800664c:	f001 fef6 	bl	800843c <__lshift>
 8006650:	9904      	ldr	r1, [sp, #16]
 8006652:	4683      	mov	fp, r0
 8006654:	f001 ff62 	bl	800851c <__mcmp>
 8006658:	2800      	cmp	r0, #0
 800665a:	dd71      	ble.n	8006740 <_strtod_l+0x8d8>
 800665c:	9905      	ldr	r1, [sp, #20]
 800665e:	464b      	mov	r3, r9
 8006660:	4a20      	ldr	r2, [pc, #128]	; (80066e4 <_strtod_l+0x87c>)
 8006662:	2900      	cmp	r1, #0
 8006664:	f000 808c 	beq.w	8006780 <_strtod_l+0x918>
 8006668:	ea02 0109 	and.w	r1, r2, r9
 800666c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006670:	f300 8086 	bgt.w	8006780 <_strtod_l+0x918>
 8006674:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006678:	f77f aeaa 	ble.w	80063d0 <_strtod_l+0x568>
 800667c:	4640      	mov	r0, r8
 800667e:	4649      	mov	r1, r9
 8006680:	4b19      	ldr	r3, [pc, #100]	; (80066e8 <_strtod_l+0x880>)
 8006682:	2200      	movs	r2, #0
 8006684:	f7fb fe32 	bl	80022ec <__aeabi_dmul>
 8006688:	460b      	mov	r3, r1
 800668a:	4303      	orrs	r3, r0
 800668c:	bf08      	it	eq
 800668e:	2322      	moveq	r3, #34	; 0x22
 8006690:	4680      	mov	r8, r0
 8006692:	4689      	mov	r9, r1
 8006694:	bf08      	it	eq
 8006696:	f8ca 3000 	streq.w	r3, [sl]
 800669a:	e62f      	b.n	80062fc <_strtod_l+0x494>
 800669c:	f04f 32ff 	mov.w	r2, #4294967295
 80066a0:	fa02 f303 	lsl.w	r3, r2, r3
 80066a4:	ea03 0808 	and.w	r8, r3, r8
 80066a8:	e6e0      	b.n	800646c <_strtod_l+0x604>
 80066aa:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80066ae:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80066b2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80066b6:	35e2      	adds	r5, #226	; 0xe2
 80066b8:	fa07 f505 	lsl.w	r5, r7, r5
 80066bc:	970f      	str	r7, [sp, #60]	; 0x3c
 80066be:	e747      	b.n	8006550 <_strtod_l+0x6e8>
 80066c0:	2301      	movs	r3, #1
 80066c2:	2500      	movs	r5, #0
 80066c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80066c6:	e743      	b.n	8006550 <_strtod_l+0x6e8>
 80066c8:	463a      	mov	r2, r7
 80066ca:	4650      	mov	r0, sl
 80066cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80066ce:	f001 feb5 	bl	800843c <__lshift>
 80066d2:	901a      	str	r0, [sp, #104]	; 0x68
 80066d4:	2800      	cmp	r0, #0
 80066d6:	f47f af69 	bne.w	80065ac <_strtod_l+0x744>
 80066da:	e604      	b.n	80062e6 <_strtod_l+0x47e>
 80066dc:	0801b3e0 	.word	0x0801b3e0
 80066e0:	fffffc02 	.word	0xfffffc02
 80066e4:	7ff00000 	.word	0x7ff00000
 80066e8:	39500000 	.word	0x39500000
 80066ec:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80066f0:	d165      	bne.n	80067be <_strtod_l+0x956>
 80066f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80066f8:	b35a      	cbz	r2, 8006752 <_strtod_l+0x8ea>
 80066fa:	4a99      	ldr	r2, [pc, #612]	; (8006960 <_strtod_l+0xaf8>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d12b      	bne.n	8006758 <_strtod_l+0x8f0>
 8006700:	9b05      	ldr	r3, [sp, #20]
 8006702:	4641      	mov	r1, r8
 8006704:	b303      	cbz	r3, 8006748 <_strtod_l+0x8e0>
 8006706:	464a      	mov	r2, r9
 8006708:	4b96      	ldr	r3, [pc, #600]	; (8006964 <_strtod_l+0xafc>)
 800670a:	4013      	ands	r3, r2
 800670c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006710:	f04f 32ff 	mov.w	r2, #4294967295
 8006714:	d81b      	bhi.n	800674e <_strtod_l+0x8e6>
 8006716:	0d1b      	lsrs	r3, r3, #20
 8006718:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800671c:	fa02 f303 	lsl.w	r3, r2, r3
 8006720:	4299      	cmp	r1, r3
 8006722:	d119      	bne.n	8006758 <_strtod_l+0x8f0>
 8006724:	4b90      	ldr	r3, [pc, #576]	; (8006968 <_strtod_l+0xb00>)
 8006726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006728:	429a      	cmp	r2, r3
 800672a:	d102      	bne.n	8006732 <_strtod_l+0x8ca>
 800672c:	3101      	adds	r1, #1
 800672e:	f43f adda 	beq.w	80062e6 <_strtod_l+0x47e>
 8006732:	f04f 0800 	mov.w	r8, #0
 8006736:	4b8b      	ldr	r3, [pc, #556]	; (8006964 <_strtod_l+0xafc>)
 8006738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800673a:	401a      	ands	r2, r3
 800673c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006740:	9b05      	ldr	r3, [sp, #20]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d19a      	bne.n	800667c <_strtod_l+0x814>
 8006746:	e5d9      	b.n	80062fc <_strtod_l+0x494>
 8006748:	f04f 33ff 	mov.w	r3, #4294967295
 800674c:	e7e8      	b.n	8006720 <_strtod_l+0x8b8>
 800674e:	4613      	mov	r3, r2
 8006750:	e7e6      	b.n	8006720 <_strtod_l+0x8b8>
 8006752:	ea53 0308 	orrs.w	r3, r3, r8
 8006756:	d081      	beq.n	800665c <_strtod_l+0x7f4>
 8006758:	b1e5      	cbz	r5, 8006794 <_strtod_l+0x92c>
 800675a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800675c:	421d      	tst	r5, r3
 800675e:	d0ef      	beq.n	8006740 <_strtod_l+0x8d8>
 8006760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006762:	4640      	mov	r0, r8
 8006764:	4649      	mov	r1, r9
 8006766:	9a05      	ldr	r2, [sp, #20]
 8006768:	b1c3      	cbz	r3, 800679c <_strtod_l+0x934>
 800676a:	f7ff fb5b 	bl	8005e24 <sulp>
 800676e:	4602      	mov	r2, r0
 8006770:	460b      	mov	r3, r1
 8006772:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006776:	f7fb fc03 	bl	8001f80 <__adddf3>
 800677a:	4680      	mov	r8, r0
 800677c:	4689      	mov	r9, r1
 800677e:	e7df      	b.n	8006740 <_strtod_l+0x8d8>
 8006780:	4013      	ands	r3, r2
 8006782:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006786:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800678a:	f04f 38ff 	mov.w	r8, #4294967295
 800678e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006792:	e7d5      	b.n	8006740 <_strtod_l+0x8d8>
 8006794:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006796:	ea13 0f08 	tst.w	r3, r8
 800679a:	e7e0      	b.n	800675e <_strtod_l+0x8f6>
 800679c:	f7ff fb42 	bl	8005e24 <sulp>
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067a8:	f7fb fbe8 	bl	8001f7c <__aeabi_dsub>
 80067ac:	2200      	movs	r2, #0
 80067ae:	2300      	movs	r3, #0
 80067b0:	4680      	mov	r8, r0
 80067b2:	4689      	mov	r9, r1
 80067b4:	f7fc f802 	bl	80027bc <__aeabi_dcmpeq>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	d0c1      	beq.n	8006740 <_strtod_l+0x8d8>
 80067bc:	e608      	b.n	80063d0 <_strtod_l+0x568>
 80067be:	4658      	mov	r0, fp
 80067c0:	9904      	ldr	r1, [sp, #16]
 80067c2:	f002 f829 	bl	8008818 <__ratio>
 80067c6:	2200      	movs	r2, #0
 80067c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067cc:	4606      	mov	r6, r0
 80067ce:	460f      	mov	r7, r1
 80067d0:	f7fc f808 	bl	80027e4 <__aeabi_dcmple>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d070      	beq.n	80068ba <_strtod_l+0xa52>
 80067d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d042      	beq.n	8006864 <_strtod_l+0x9fc>
 80067de:	2600      	movs	r6, #0
 80067e0:	4f62      	ldr	r7, [pc, #392]	; (800696c <_strtod_l+0xb04>)
 80067e2:	4d62      	ldr	r5, [pc, #392]	; (800696c <_strtod_l+0xb04>)
 80067e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067ea:	0d1b      	lsrs	r3, r3, #20
 80067ec:	051b      	lsls	r3, r3, #20
 80067ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80067f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80067f2:	4b5f      	ldr	r3, [pc, #380]	; (8006970 <_strtod_l+0xb08>)
 80067f4:	429a      	cmp	r2, r3
 80067f6:	f040 80c3 	bne.w	8006980 <_strtod_l+0xb18>
 80067fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067fc:	4640      	mov	r0, r8
 80067fe:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006802:	4649      	mov	r1, r9
 8006804:	f001 ff32 	bl	800866c <__ulp>
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	4630      	mov	r0, r6
 800680e:	4639      	mov	r1, r7
 8006810:	f7fb fd6c 	bl	80022ec <__aeabi_dmul>
 8006814:	4642      	mov	r2, r8
 8006816:	464b      	mov	r3, r9
 8006818:	f7fb fbb2 	bl	8001f80 <__adddf3>
 800681c:	460b      	mov	r3, r1
 800681e:	4951      	ldr	r1, [pc, #324]	; (8006964 <_strtod_l+0xafc>)
 8006820:	4a54      	ldr	r2, [pc, #336]	; (8006974 <_strtod_l+0xb0c>)
 8006822:	4019      	ands	r1, r3
 8006824:	4291      	cmp	r1, r2
 8006826:	4680      	mov	r8, r0
 8006828:	d95d      	bls.n	80068e6 <_strtod_l+0xa7e>
 800682a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800682c:	4b4e      	ldr	r3, [pc, #312]	; (8006968 <_strtod_l+0xb00>)
 800682e:	429a      	cmp	r2, r3
 8006830:	d103      	bne.n	800683a <_strtod_l+0x9d2>
 8006832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006834:	3301      	adds	r3, #1
 8006836:	f43f ad56 	beq.w	80062e6 <_strtod_l+0x47e>
 800683a:	f04f 38ff 	mov.w	r8, #4294967295
 800683e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006968 <_strtod_l+0xb00>
 8006842:	4650      	mov	r0, sl
 8006844:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006846:	f001 fbe1 	bl	800800c <_Bfree>
 800684a:	4650      	mov	r0, sl
 800684c:	9906      	ldr	r1, [sp, #24]
 800684e:	f001 fbdd 	bl	800800c <_Bfree>
 8006852:	4650      	mov	r0, sl
 8006854:	9904      	ldr	r1, [sp, #16]
 8006856:	f001 fbd9 	bl	800800c <_Bfree>
 800685a:	4659      	mov	r1, fp
 800685c:	4650      	mov	r0, sl
 800685e:	f001 fbd5 	bl	800800c <_Bfree>
 8006862:	e627      	b.n	80064b4 <_strtod_l+0x64c>
 8006864:	f1b8 0f00 	cmp.w	r8, #0
 8006868:	d119      	bne.n	800689e <_strtod_l+0xa36>
 800686a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800686c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006870:	b9e3      	cbnz	r3, 80068ac <_strtod_l+0xa44>
 8006872:	2200      	movs	r2, #0
 8006874:	4630      	mov	r0, r6
 8006876:	4639      	mov	r1, r7
 8006878:	4b3c      	ldr	r3, [pc, #240]	; (800696c <_strtod_l+0xb04>)
 800687a:	f7fb ffa9 	bl	80027d0 <__aeabi_dcmplt>
 800687e:	b9c8      	cbnz	r0, 80068b4 <_strtod_l+0xa4c>
 8006880:	2200      	movs	r2, #0
 8006882:	4630      	mov	r0, r6
 8006884:	4639      	mov	r1, r7
 8006886:	4b3c      	ldr	r3, [pc, #240]	; (8006978 <_strtod_l+0xb10>)
 8006888:	f7fb fd30 	bl	80022ec <__aeabi_dmul>
 800688c:	4604      	mov	r4, r0
 800688e:	460d      	mov	r5, r1
 8006890:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006894:	9416      	str	r4, [sp, #88]	; 0x58
 8006896:	9317      	str	r3, [sp, #92]	; 0x5c
 8006898:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800689c:	e7a2      	b.n	80067e4 <_strtod_l+0x97c>
 800689e:	f1b8 0f01 	cmp.w	r8, #1
 80068a2:	d103      	bne.n	80068ac <_strtod_l+0xa44>
 80068a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f43f ad92 	beq.w	80063d0 <_strtod_l+0x568>
 80068ac:	2600      	movs	r6, #0
 80068ae:	2400      	movs	r4, #0
 80068b0:	4f32      	ldr	r7, [pc, #200]	; (800697c <_strtod_l+0xb14>)
 80068b2:	e796      	b.n	80067e2 <_strtod_l+0x97a>
 80068b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80068b6:	4d30      	ldr	r5, [pc, #192]	; (8006978 <_strtod_l+0xb10>)
 80068b8:	e7ea      	b.n	8006890 <_strtod_l+0xa28>
 80068ba:	4b2f      	ldr	r3, [pc, #188]	; (8006978 <_strtod_l+0xb10>)
 80068bc:	2200      	movs	r2, #0
 80068be:	4630      	mov	r0, r6
 80068c0:	4639      	mov	r1, r7
 80068c2:	f7fb fd13 	bl	80022ec <__aeabi_dmul>
 80068c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068c8:	4604      	mov	r4, r0
 80068ca:	460d      	mov	r5, r1
 80068cc:	b933      	cbnz	r3, 80068dc <_strtod_l+0xa74>
 80068ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068d2:	9010      	str	r0, [sp, #64]	; 0x40
 80068d4:	9311      	str	r3, [sp, #68]	; 0x44
 80068d6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80068da:	e783      	b.n	80067e4 <_strtod_l+0x97c>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80068e4:	e7f7      	b.n	80068d6 <_strtod_l+0xa6e>
 80068e6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80068ea:	9b05      	ldr	r3, [sp, #20]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1a8      	bne.n	8006842 <_strtod_l+0x9da>
 80068f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80068f6:	0d1b      	lsrs	r3, r3, #20
 80068f8:	051b      	lsls	r3, r3, #20
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d1a1      	bne.n	8006842 <_strtod_l+0x9da>
 80068fe:	4620      	mov	r0, r4
 8006900:	4629      	mov	r1, r5
 8006902:	f7fc f8b1 	bl	8002a68 <__aeabi_d2lz>
 8006906:	f7fb fcc3 	bl	8002290 <__aeabi_l2d>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	4620      	mov	r0, r4
 8006910:	4629      	mov	r1, r5
 8006912:	f7fb fb33 	bl	8001f7c <__aeabi_dsub>
 8006916:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006918:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800691c:	ea43 0308 	orr.w	r3, r3, r8
 8006920:	4313      	orrs	r3, r2
 8006922:	4604      	mov	r4, r0
 8006924:	460d      	mov	r5, r1
 8006926:	d066      	beq.n	80069f6 <_strtod_l+0xb8e>
 8006928:	a309      	add	r3, pc, #36	; (adr r3, 8006950 <_strtod_l+0xae8>)
 800692a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692e:	f7fb ff4f 	bl	80027d0 <__aeabi_dcmplt>
 8006932:	2800      	cmp	r0, #0
 8006934:	f47f ace2 	bne.w	80062fc <_strtod_l+0x494>
 8006938:	a307      	add	r3, pc, #28	; (adr r3, 8006958 <_strtod_l+0xaf0>)
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	4620      	mov	r0, r4
 8006940:	4629      	mov	r1, r5
 8006942:	f7fb ff63 	bl	800280c <__aeabi_dcmpgt>
 8006946:	2800      	cmp	r0, #0
 8006948:	f43f af7b 	beq.w	8006842 <_strtod_l+0x9da>
 800694c:	e4d6      	b.n	80062fc <_strtod_l+0x494>
 800694e:	bf00      	nop
 8006950:	94a03595 	.word	0x94a03595
 8006954:	3fdfffff 	.word	0x3fdfffff
 8006958:	35afe535 	.word	0x35afe535
 800695c:	3fe00000 	.word	0x3fe00000
 8006960:	000fffff 	.word	0x000fffff
 8006964:	7ff00000 	.word	0x7ff00000
 8006968:	7fefffff 	.word	0x7fefffff
 800696c:	3ff00000 	.word	0x3ff00000
 8006970:	7fe00000 	.word	0x7fe00000
 8006974:	7c9fffff 	.word	0x7c9fffff
 8006978:	3fe00000 	.word	0x3fe00000
 800697c:	bff00000 	.word	0xbff00000
 8006980:	9b05      	ldr	r3, [sp, #20]
 8006982:	b313      	cbz	r3, 80069ca <_strtod_l+0xb62>
 8006984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006986:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800698a:	d81e      	bhi.n	80069ca <_strtod_l+0xb62>
 800698c:	a326      	add	r3, pc, #152	; (adr r3, 8006a28 <_strtod_l+0xbc0>)
 800698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006992:	4620      	mov	r0, r4
 8006994:	4629      	mov	r1, r5
 8006996:	f7fb ff25 	bl	80027e4 <__aeabi_dcmple>
 800699a:	b190      	cbz	r0, 80069c2 <_strtod_l+0xb5a>
 800699c:	4629      	mov	r1, r5
 800699e:	4620      	mov	r0, r4
 80069a0:	f7fb ff7c 	bl	800289c <__aeabi_d2uiz>
 80069a4:	2801      	cmp	r0, #1
 80069a6:	bf38      	it	cc
 80069a8:	2001      	movcc	r0, #1
 80069aa:	f7fb fc25 	bl	80021f8 <__aeabi_ui2d>
 80069ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069b0:	4604      	mov	r4, r0
 80069b2:	460d      	mov	r5, r1
 80069b4:	b9d3      	cbnz	r3, 80069ec <_strtod_l+0xb84>
 80069b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069ba:	9012      	str	r0, [sp, #72]	; 0x48
 80069bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80069be:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80069c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069c4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80069c8:	1a9f      	subs	r7, r3, r2
 80069ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069ce:	f001 fe4d 	bl	800866c <__ulp>
 80069d2:	4602      	mov	r2, r0
 80069d4:	460b      	mov	r3, r1
 80069d6:	4630      	mov	r0, r6
 80069d8:	4639      	mov	r1, r7
 80069da:	f7fb fc87 	bl	80022ec <__aeabi_dmul>
 80069de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80069e2:	f7fb facd 	bl	8001f80 <__adddf3>
 80069e6:	4680      	mov	r8, r0
 80069e8:	4689      	mov	r9, r1
 80069ea:	e77e      	b.n	80068ea <_strtod_l+0xa82>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80069f4:	e7e3      	b.n	80069be <_strtod_l+0xb56>
 80069f6:	a30e      	add	r3, pc, #56	; (adr r3, 8006a30 <_strtod_l+0xbc8>)
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fc:	f7fb fee8 	bl	80027d0 <__aeabi_dcmplt>
 8006a00:	e7a1      	b.n	8006946 <_strtod_l+0xade>
 8006a02:	2300      	movs	r3, #0
 8006a04:	930a      	str	r3, [sp, #40]	; 0x28
 8006a06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a08:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a0a:	6013      	str	r3, [r2, #0]
 8006a0c:	f7ff ba71 	b.w	8005ef2 <_strtod_l+0x8a>
 8006a10:	2a65      	cmp	r2, #101	; 0x65
 8006a12:	f43f ab63 	beq.w	80060dc <_strtod_l+0x274>
 8006a16:	2a45      	cmp	r2, #69	; 0x45
 8006a18:	f43f ab60 	beq.w	80060dc <_strtod_l+0x274>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	f7ff bb95 	b.w	800614c <_strtod_l+0x2e4>
 8006a22:	bf00      	nop
 8006a24:	f3af 8000 	nop.w
 8006a28:	ffc00000 	.word	0xffc00000
 8006a2c:	41dfffff 	.word	0x41dfffff
 8006a30:	94a03595 	.word	0x94a03595
 8006a34:	3fcfffff 	.word	0x3fcfffff

08006a38 <_strtod_r>:
 8006a38:	4b01      	ldr	r3, [pc, #4]	; (8006a40 <_strtod_r+0x8>)
 8006a3a:	f7ff ba15 	b.w	8005e68 <_strtod_l>
 8006a3e:	bf00      	nop
 8006a40:	20000078 	.word	0x20000078

08006a44 <_strtol_l.constprop.0>:
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a4a:	4680      	mov	r8, r0
 8006a4c:	d001      	beq.n	8006a52 <_strtol_l.constprop.0+0xe>
 8006a4e:	2b24      	cmp	r3, #36	; 0x24
 8006a50:	d906      	bls.n	8006a60 <_strtol_l.constprop.0+0x1c>
 8006a52:	f7fe fb23 	bl	800509c <__errno>
 8006a56:	2316      	movs	r3, #22
 8006a58:	6003      	str	r3, [r0, #0]
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a60:	460d      	mov	r5, r1
 8006a62:	4f35      	ldr	r7, [pc, #212]	; (8006b38 <_strtol_l.constprop.0+0xf4>)
 8006a64:	4628      	mov	r0, r5
 8006a66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a6a:	5de6      	ldrb	r6, [r4, r7]
 8006a6c:	f016 0608 	ands.w	r6, r6, #8
 8006a70:	d1f8      	bne.n	8006a64 <_strtol_l.constprop.0+0x20>
 8006a72:	2c2d      	cmp	r4, #45	; 0x2d
 8006a74:	d12f      	bne.n	8006ad6 <_strtol_l.constprop.0+0x92>
 8006a76:	2601      	movs	r6, #1
 8006a78:	782c      	ldrb	r4, [r5, #0]
 8006a7a:	1c85      	adds	r5, r0, #2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d057      	beq.n	8006b30 <_strtol_l.constprop.0+0xec>
 8006a80:	2b10      	cmp	r3, #16
 8006a82:	d109      	bne.n	8006a98 <_strtol_l.constprop.0+0x54>
 8006a84:	2c30      	cmp	r4, #48	; 0x30
 8006a86:	d107      	bne.n	8006a98 <_strtol_l.constprop.0+0x54>
 8006a88:	7828      	ldrb	r0, [r5, #0]
 8006a8a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006a8e:	2858      	cmp	r0, #88	; 0x58
 8006a90:	d149      	bne.n	8006b26 <_strtol_l.constprop.0+0xe2>
 8006a92:	2310      	movs	r3, #16
 8006a94:	786c      	ldrb	r4, [r5, #1]
 8006a96:	3502      	adds	r5, #2
 8006a98:	2700      	movs	r7, #0
 8006a9a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006a9e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006aa2:	fbbe f9f3 	udiv	r9, lr, r3
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	fb03 ea19 	mls	sl, r3, r9, lr
 8006aac:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006ab0:	f1bc 0f09 	cmp.w	ip, #9
 8006ab4:	d814      	bhi.n	8006ae0 <_strtol_l.constprop.0+0x9c>
 8006ab6:	4664      	mov	r4, ip
 8006ab8:	42a3      	cmp	r3, r4
 8006aba:	dd22      	ble.n	8006b02 <_strtol_l.constprop.0+0xbe>
 8006abc:	2f00      	cmp	r7, #0
 8006abe:	db1d      	blt.n	8006afc <_strtol_l.constprop.0+0xb8>
 8006ac0:	4581      	cmp	r9, r0
 8006ac2:	d31b      	bcc.n	8006afc <_strtol_l.constprop.0+0xb8>
 8006ac4:	d101      	bne.n	8006aca <_strtol_l.constprop.0+0x86>
 8006ac6:	45a2      	cmp	sl, r4
 8006ac8:	db18      	blt.n	8006afc <_strtol_l.constprop.0+0xb8>
 8006aca:	2701      	movs	r7, #1
 8006acc:	fb00 4003 	mla	r0, r0, r3, r4
 8006ad0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ad4:	e7ea      	b.n	8006aac <_strtol_l.constprop.0+0x68>
 8006ad6:	2c2b      	cmp	r4, #43	; 0x2b
 8006ad8:	bf04      	itt	eq
 8006ada:	782c      	ldrbeq	r4, [r5, #0]
 8006adc:	1c85      	addeq	r5, r0, #2
 8006ade:	e7cd      	b.n	8006a7c <_strtol_l.constprop.0+0x38>
 8006ae0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006ae4:	f1bc 0f19 	cmp.w	ip, #25
 8006ae8:	d801      	bhi.n	8006aee <_strtol_l.constprop.0+0xaa>
 8006aea:	3c37      	subs	r4, #55	; 0x37
 8006aec:	e7e4      	b.n	8006ab8 <_strtol_l.constprop.0+0x74>
 8006aee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006af2:	f1bc 0f19 	cmp.w	ip, #25
 8006af6:	d804      	bhi.n	8006b02 <_strtol_l.constprop.0+0xbe>
 8006af8:	3c57      	subs	r4, #87	; 0x57
 8006afa:	e7dd      	b.n	8006ab8 <_strtol_l.constprop.0+0x74>
 8006afc:	f04f 37ff 	mov.w	r7, #4294967295
 8006b00:	e7e6      	b.n	8006ad0 <_strtol_l.constprop.0+0x8c>
 8006b02:	2f00      	cmp	r7, #0
 8006b04:	da07      	bge.n	8006b16 <_strtol_l.constprop.0+0xd2>
 8006b06:	2322      	movs	r3, #34	; 0x22
 8006b08:	4670      	mov	r0, lr
 8006b0a:	f8c8 3000 	str.w	r3, [r8]
 8006b0e:	2a00      	cmp	r2, #0
 8006b10:	d0a4      	beq.n	8006a5c <_strtol_l.constprop.0+0x18>
 8006b12:	1e69      	subs	r1, r5, #1
 8006b14:	e005      	b.n	8006b22 <_strtol_l.constprop.0+0xde>
 8006b16:	b106      	cbz	r6, 8006b1a <_strtol_l.constprop.0+0xd6>
 8006b18:	4240      	negs	r0, r0
 8006b1a:	2a00      	cmp	r2, #0
 8006b1c:	d09e      	beq.n	8006a5c <_strtol_l.constprop.0+0x18>
 8006b1e:	2f00      	cmp	r7, #0
 8006b20:	d1f7      	bne.n	8006b12 <_strtol_l.constprop.0+0xce>
 8006b22:	6011      	str	r1, [r2, #0]
 8006b24:	e79a      	b.n	8006a5c <_strtol_l.constprop.0+0x18>
 8006b26:	2430      	movs	r4, #48	; 0x30
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1b5      	bne.n	8006a98 <_strtol_l.constprop.0+0x54>
 8006b2c:	2308      	movs	r3, #8
 8006b2e:	e7b3      	b.n	8006a98 <_strtol_l.constprop.0+0x54>
 8006b30:	2c30      	cmp	r4, #48	; 0x30
 8006b32:	d0a9      	beq.n	8006a88 <_strtol_l.constprop.0+0x44>
 8006b34:	230a      	movs	r3, #10
 8006b36:	e7af      	b.n	8006a98 <_strtol_l.constprop.0+0x54>
 8006b38:	0801b409 	.word	0x0801b409

08006b3c <_strtol_r>:
 8006b3c:	f7ff bf82 	b.w	8006a44 <_strtol_l.constprop.0>

08006b40 <strtol>:
 8006b40:	4613      	mov	r3, r2
 8006b42:	460a      	mov	r2, r1
 8006b44:	4601      	mov	r1, r0
 8006b46:	4802      	ldr	r0, [pc, #8]	; (8006b50 <strtol+0x10>)
 8006b48:	6800      	ldr	r0, [r0, #0]
 8006b4a:	f7ff bf7b 	b.w	8006a44 <_strtol_l.constprop.0>
 8006b4e:	bf00      	nop
 8006b50:	20000010 	.word	0x20000010

08006b54 <quorem>:
 8006b54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b58:	6903      	ldr	r3, [r0, #16]
 8006b5a:	690c      	ldr	r4, [r1, #16]
 8006b5c:	4607      	mov	r7, r0
 8006b5e:	42a3      	cmp	r3, r4
 8006b60:	f2c0 8082 	blt.w	8006c68 <quorem+0x114>
 8006b64:	3c01      	subs	r4, #1
 8006b66:	f100 0514 	add.w	r5, r0, #20
 8006b6a:	f101 0814 	add.w	r8, r1, #20
 8006b6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b72:	9301      	str	r3, [sp, #4]
 8006b74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006b88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b8c:	d331      	bcc.n	8006bf2 <quorem+0x9e>
 8006b8e:	f04f 0e00 	mov.w	lr, #0
 8006b92:	4640      	mov	r0, r8
 8006b94:	46ac      	mov	ip, r5
 8006b96:	46f2      	mov	sl, lr
 8006b98:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b9c:	b293      	uxth	r3, r2
 8006b9e:	fb06 e303 	mla	r3, r6, r3, lr
 8006ba2:	0c12      	lsrs	r2, r2, #16
 8006ba4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	fb06 e202 	mla	r2, r6, r2, lr
 8006bae:	ebaa 0303 	sub.w	r3, sl, r3
 8006bb2:	f8dc a000 	ldr.w	sl, [ip]
 8006bb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006bba:	fa1f fa8a 	uxth.w	sl, sl
 8006bbe:	4453      	add	r3, sl
 8006bc0:	f8dc a000 	ldr.w	sl, [ip]
 8006bc4:	b292      	uxth	r2, r2
 8006bc6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006bca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bd4:	4581      	cmp	r9, r0
 8006bd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006bda:	f84c 3b04 	str.w	r3, [ip], #4
 8006bde:	d2db      	bcs.n	8006b98 <quorem+0x44>
 8006be0:	f855 300b 	ldr.w	r3, [r5, fp]
 8006be4:	b92b      	cbnz	r3, 8006bf2 <quorem+0x9e>
 8006be6:	9b01      	ldr	r3, [sp, #4]
 8006be8:	3b04      	subs	r3, #4
 8006bea:	429d      	cmp	r5, r3
 8006bec:	461a      	mov	r2, r3
 8006bee:	d32f      	bcc.n	8006c50 <quorem+0xfc>
 8006bf0:	613c      	str	r4, [r7, #16]
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	f001 fc92 	bl	800851c <__mcmp>
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	db25      	blt.n	8006c48 <quorem+0xf4>
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	f04f 0c00 	mov.w	ip, #0
 8006c02:	3601      	adds	r6, #1
 8006c04:	f858 1b04 	ldr.w	r1, [r8], #4
 8006c08:	f8d0 e000 	ldr.w	lr, [r0]
 8006c0c:	b28b      	uxth	r3, r1
 8006c0e:	ebac 0303 	sub.w	r3, ip, r3
 8006c12:	fa1f f28e 	uxth.w	r2, lr
 8006c16:	4413      	add	r3, r2
 8006c18:	0c0a      	lsrs	r2, r1, #16
 8006c1a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006c1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c28:	45c1      	cmp	r9, r8
 8006c2a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006c2e:	f840 3b04 	str.w	r3, [r0], #4
 8006c32:	d2e7      	bcs.n	8006c04 <quorem+0xb0>
 8006c34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c3c:	b922      	cbnz	r2, 8006c48 <quorem+0xf4>
 8006c3e:	3b04      	subs	r3, #4
 8006c40:	429d      	cmp	r5, r3
 8006c42:	461a      	mov	r2, r3
 8006c44:	d30a      	bcc.n	8006c5c <quorem+0x108>
 8006c46:	613c      	str	r4, [r7, #16]
 8006c48:	4630      	mov	r0, r6
 8006c4a:	b003      	add	sp, #12
 8006c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c50:	6812      	ldr	r2, [r2, #0]
 8006c52:	3b04      	subs	r3, #4
 8006c54:	2a00      	cmp	r2, #0
 8006c56:	d1cb      	bne.n	8006bf0 <quorem+0x9c>
 8006c58:	3c01      	subs	r4, #1
 8006c5a:	e7c6      	b.n	8006bea <quorem+0x96>
 8006c5c:	6812      	ldr	r2, [r2, #0]
 8006c5e:	3b04      	subs	r3, #4
 8006c60:	2a00      	cmp	r2, #0
 8006c62:	d1f0      	bne.n	8006c46 <quorem+0xf2>
 8006c64:	3c01      	subs	r4, #1
 8006c66:	e7eb      	b.n	8006c40 <quorem+0xec>
 8006c68:	2000      	movs	r0, #0
 8006c6a:	e7ee      	b.n	8006c4a <quorem+0xf6>
 8006c6c:	0000      	movs	r0, r0
	...

08006c70 <_dtoa_r>:
 8006c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c74:	4616      	mov	r6, r2
 8006c76:	461f      	mov	r7, r3
 8006c78:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006c7a:	b099      	sub	sp, #100	; 0x64
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006c82:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006c86:	b974      	cbnz	r4, 8006ca6 <_dtoa_r+0x36>
 8006c88:	2010      	movs	r0, #16
 8006c8a:	f001 f949 	bl	8007f20 <malloc>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	6268      	str	r0, [r5, #36]	; 0x24
 8006c92:	b920      	cbnz	r0, 8006c9e <_dtoa_r+0x2e>
 8006c94:	21ea      	movs	r1, #234	; 0xea
 8006c96:	4ba8      	ldr	r3, [pc, #672]	; (8006f38 <_dtoa_r+0x2c8>)
 8006c98:	48a8      	ldr	r0, [pc, #672]	; (8006f3c <_dtoa_r+0x2cc>)
 8006c9a:	f002 f8b3 	bl	8008e04 <__assert_func>
 8006c9e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ca2:	6004      	str	r4, [r0, #0]
 8006ca4:	60c4      	str	r4, [r0, #12]
 8006ca6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ca8:	6819      	ldr	r1, [r3, #0]
 8006caa:	b151      	cbz	r1, 8006cc2 <_dtoa_r+0x52>
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	2301      	movs	r3, #1
 8006cb0:	4093      	lsls	r3, r2
 8006cb2:	604a      	str	r2, [r1, #4]
 8006cb4:	608b      	str	r3, [r1, #8]
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	f001 f9a8 	bl	800800c <_Bfree>
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	1e3b      	subs	r3, r7, #0
 8006cc4:	bfaf      	iteee	ge
 8006cc6:	2300      	movge	r3, #0
 8006cc8:	2201      	movlt	r2, #1
 8006cca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006cce:	9305      	strlt	r3, [sp, #20]
 8006cd0:	bfa8      	it	ge
 8006cd2:	f8c8 3000 	strge.w	r3, [r8]
 8006cd6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006cda:	4b99      	ldr	r3, [pc, #612]	; (8006f40 <_dtoa_r+0x2d0>)
 8006cdc:	bfb8      	it	lt
 8006cde:	f8c8 2000 	strlt.w	r2, [r8]
 8006ce2:	ea33 0309 	bics.w	r3, r3, r9
 8006ce6:	d119      	bne.n	8006d1c <_dtoa_r+0xac>
 8006ce8:	f242 730f 	movw	r3, #9999	; 0x270f
 8006cec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006cee:	6013      	str	r3, [r2, #0]
 8006cf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006cf4:	4333      	orrs	r3, r6
 8006cf6:	f000 857f 	beq.w	80077f8 <_dtoa_r+0xb88>
 8006cfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006cfc:	b953      	cbnz	r3, 8006d14 <_dtoa_r+0xa4>
 8006cfe:	4b91      	ldr	r3, [pc, #580]	; (8006f44 <_dtoa_r+0x2d4>)
 8006d00:	e022      	b.n	8006d48 <_dtoa_r+0xd8>
 8006d02:	4b91      	ldr	r3, [pc, #580]	; (8006f48 <_dtoa_r+0x2d8>)
 8006d04:	9303      	str	r3, [sp, #12]
 8006d06:	3308      	adds	r3, #8
 8006d08:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	9803      	ldr	r0, [sp, #12]
 8006d0e:	b019      	add	sp, #100	; 0x64
 8006d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d14:	4b8b      	ldr	r3, [pc, #556]	; (8006f44 <_dtoa_r+0x2d4>)
 8006d16:	9303      	str	r3, [sp, #12]
 8006d18:	3303      	adds	r3, #3
 8006d1a:	e7f5      	b.n	8006d08 <_dtoa_r+0x98>
 8006d1c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006d20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006d24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f7fb fd46 	bl	80027bc <__aeabi_dcmpeq>
 8006d30:	4680      	mov	r8, r0
 8006d32:	b158      	cbz	r0, 8006d4c <_dtoa_r+0xdc>
 8006d34:	2301      	movs	r3, #1
 8006d36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006d38:	6013      	str	r3, [r2, #0]
 8006d3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 8558 	beq.w	80077f2 <_dtoa_r+0xb82>
 8006d42:	4882      	ldr	r0, [pc, #520]	; (8006f4c <_dtoa_r+0x2dc>)
 8006d44:	6018      	str	r0, [r3, #0]
 8006d46:	1e43      	subs	r3, r0, #1
 8006d48:	9303      	str	r3, [sp, #12]
 8006d4a:	e7df      	b.n	8006d0c <_dtoa_r+0x9c>
 8006d4c:	ab16      	add	r3, sp, #88	; 0x58
 8006d4e:	9301      	str	r3, [sp, #4]
 8006d50:	ab17      	add	r3, sp, #92	; 0x5c
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	4628      	mov	r0, r5
 8006d56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006d5a:	f001 fd01 	bl	8008760 <__d2b>
 8006d5e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006d62:	4683      	mov	fp, r0
 8006d64:	2c00      	cmp	r4, #0
 8006d66:	d07f      	beq.n	8006e68 <_dtoa_r+0x1f8>
 8006d68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d6e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006d72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d76:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006d7a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006d7e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006d82:	2200      	movs	r2, #0
 8006d84:	4b72      	ldr	r3, [pc, #456]	; (8006f50 <_dtoa_r+0x2e0>)
 8006d86:	f7fb f8f9 	bl	8001f7c <__aeabi_dsub>
 8006d8a:	a365      	add	r3, pc, #404	; (adr r3, 8006f20 <_dtoa_r+0x2b0>)
 8006d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d90:	f7fb faac 	bl	80022ec <__aeabi_dmul>
 8006d94:	a364      	add	r3, pc, #400	; (adr r3, 8006f28 <_dtoa_r+0x2b8>)
 8006d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9a:	f7fb f8f1 	bl	8001f80 <__adddf3>
 8006d9e:	4606      	mov	r6, r0
 8006da0:	4620      	mov	r0, r4
 8006da2:	460f      	mov	r7, r1
 8006da4:	f7fb fa38 	bl	8002218 <__aeabi_i2d>
 8006da8:	a361      	add	r3, pc, #388	; (adr r3, 8006f30 <_dtoa_r+0x2c0>)
 8006daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dae:	f7fb fa9d 	bl	80022ec <__aeabi_dmul>
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	4630      	mov	r0, r6
 8006db8:	4639      	mov	r1, r7
 8006dba:	f7fb f8e1 	bl	8001f80 <__adddf3>
 8006dbe:	4606      	mov	r6, r0
 8006dc0:	460f      	mov	r7, r1
 8006dc2:	f7fb fd43 	bl	800284c <__aeabi_d2iz>
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	4682      	mov	sl, r0
 8006dca:	2300      	movs	r3, #0
 8006dcc:	4630      	mov	r0, r6
 8006dce:	4639      	mov	r1, r7
 8006dd0:	f7fb fcfe 	bl	80027d0 <__aeabi_dcmplt>
 8006dd4:	b148      	cbz	r0, 8006dea <_dtoa_r+0x17a>
 8006dd6:	4650      	mov	r0, sl
 8006dd8:	f7fb fa1e 	bl	8002218 <__aeabi_i2d>
 8006ddc:	4632      	mov	r2, r6
 8006dde:	463b      	mov	r3, r7
 8006de0:	f7fb fcec 	bl	80027bc <__aeabi_dcmpeq>
 8006de4:	b908      	cbnz	r0, 8006dea <_dtoa_r+0x17a>
 8006de6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006dea:	f1ba 0f16 	cmp.w	sl, #22
 8006dee:	d858      	bhi.n	8006ea2 <_dtoa_r+0x232>
 8006df0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006df4:	4b57      	ldr	r3, [pc, #348]	; (8006f54 <_dtoa_r+0x2e4>)
 8006df6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfe:	f7fb fce7 	bl	80027d0 <__aeabi_dcmplt>
 8006e02:	2800      	cmp	r0, #0
 8006e04:	d04f      	beq.n	8006ea6 <_dtoa_r+0x236>
 8006e06:	2300      	movs	r3, #0
 8006e08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006e10:	1b1c      	subs	r4, r3, r4
 8006e12:	1e63      	subs	r3, r4, #1
 8006e14:	9309      	str	r3, [sp, #36]	; 0x24
 8006e16:	bf49      	itett	mi
 8006e18:	f1c4 0301 	rsbmi	r3, r4, #1
 8006e1c:	2300      	movpl	r3, #0
 8006e1e:	9306      	strmi	r3, [sp, #24]
 8006e20:	2300      	movmi	r3, #0
 8006e22:	bf54      	ite	pl
 8006e24:	9306      	strpl	r3, [sp, #24]
 8006e26:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006e28:	f1ba 0f00 	cmp.w	sl, #0
 8006e2c:	db3d      	blt.n	8006eaa <_dtoa_r+0x23a>
 8006e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e30:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006e34:	4453      	add	r3, sl
 8006e36:	9309      	str	r3, [sp, #36]	; 0x24
 8006e38:	2300      	movs	r3, #0
 8006e3a:	930a      	str	r3, [sp, #40]	; 0x28
 8006e3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e3e:	2b09      	cmp	r3, #9
 8006e40:	f200 808c 	bhi.w	8006f5c <_dtoa_r+0x2ec>
 8006e44:	2b05      	cmp	r3, #5
 8006e46:	bfc4      	itt	gt
 8006e48:	3b04      	subgt	r3, #4
 8006e4a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006e4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e4e:	bfc8      	it	gt
 8006e50:	2400      	movgt	r4, #0
 8006e52:	f1a3 0302 	sub.w	r3, r3, #2
 8006e56:	bfd8      	it	le
 8006e58:	2401      	movle	r4, #1
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	f200 808a 	bhi.w	8006f74 <_dtoa_r+0x304>
 8006e60:	e8df f003 	tbb	[pc, r3]
 8006e64:	5b4d4f2d 	.word	0x5b4d4f2d
 8006e68:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006e6c:	441c      	add	r4, r3
 8006e6e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006e72:	2b20      	cmp	r3, #32
 8006e74:	bfc3      	ittte	gt
 8006e76:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006e7a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006e7e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006e82:	f1c3 0320 	rsble	r3, r3, #32
 8006e86:	bfc6      	itte	gt
 8006e88:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006e8c:	4318      	orrgt	r0, r3
 8006e8e:	fa06 f003 	lslle.w	r0, r6, r3
 8006e92:	f7fb f9b1 	bl	80021f8 <__aeabi_ui2d>
 8006e96:	2301      	movs	r3, #1
 8006e98:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006e9c:	3c01      	subs	r4, #1
 8006e9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006ea0:	e76f      	b.n	8006d82 <_dtoa_r+0x112>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e7b2      	b.n	8006e0c <_dtoa_r+0x19c>
 8006ea6:	900f      	str	r0, [sp, #60]	; 0x3c
 8006ea8:	e7b1      	b.n	8006e0e <_dtoa_r+0x19e>
 8006eaa:	9b06      	ldr	r3, [sp, #24]
 8006eac:	eba3 030a 	sub.w	r3, r3, sl
 8006eb0:	9306      	str	r3, [sp, #24]
 8006eb2:	f1ca 0300 	rsb	r3, sl, #0
 8006eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8006eb8:	2300      	movs	r3, #0
 8006eba:	930e      	str	r3, [sp, #56]	; 0x38
 8006ebc:	e7be      	b.n	8006e3c <_dtoa_r+0x1cc>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ec2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	dc58      	bgt.n	8006f7a <_dtoa_r+0x30a>
 8006ec8:	f04f 0901 	mov.w	r9, #1
 8006ecc:	464b      	mov	r3, r9
 8006ece:	f8cd 9020 	str.w	r9, [sp, #32]
 8006ed2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006eda:	6042      	str	r2, [r0, #4]
 8006edc:	2204      	movs	r2, #4
 8006ede:	f102 0614 	add.w	r6, r2, #20
 8006ee2:	429e      	cmp	r6, r3
 8006ee4:	6841      	ldr	r1, [r0, #4]
 8006ee6:	d94e      	bls.n	8006f86 <_dtoa_r+0x316>
 8006ee8:	4628      	mov	r0, r5
 8006eea:	f001 f84f 	bl	8007f8c <_Balloc>
 8006eee:	9003      	str	r0, [sp, #12]
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	d14c      	bne.n	8006f8e <_dtoa_r+0x31e>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006efa:	4b17      	ldr	r3, [pc, #92]	; (8006f58 <_dtoa_r+0x2e8>)
 8006efc:	e6cc      	b.n	8006c98 <_dtoa_r+0x28>
 8006efe:	2301      	movs	r3, #1
 8006f00:	e7de      	b.n	8006ec0 <_dtoa_r+0x250>
 8006f02:	2300      	movs	r3, #0
 8006f04:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f08:	eb0a 0903 	add.w	r9, sl, r3
 8006f0c:	f109 0301 	add.w	r3, r9, #1
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	9308      	str	r3, [sp, #32]
 8006f14:	bfb8      	it	lt
 8006f16:	2301      	movlt	r3, #1
 8006f18:	e7dd      	b.n	8006ed6 <_dtoa_r+0x266>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e7f2      	b.n	8006f04 <_dtoa_r+0x294>
 8006f1e:	bf00      	nop
 8006f20:	636f4361 	.word	0x636f4361
 8006f24:	3fd287a7 	.word	0x3fd287a7
 8006f28:	8b60c8b3 	.word	0x8b60c8b3
 8006f2c:	3fc68a28 	.word	0x3fc68a28
 8006f30:	509f79fb 	.word	0x509f79fb
 8006f34:	3fd34413 	.word	0x3fd34413
 8006f38:	0801b516 	.word	0x0801b516
 8006f3c:	0801b52d 	.word	0x0801b52d
 8006f40:	7ff00000 	.word	0x7ff00000
 8006f44:	0801b512 	.word	0x0801b512
 8006f48:	0801b509 	.word	0x0801b509
 8006f4c:	0801b389 	.word	0x0801b389
 8006f50:	3ff80000 	.word	0x3ff80000
 8006f54:	0801b698 	.word	0x0801b698
 8006f58:	0801b588 	.word	0x0801b588
 8006f5c:	2401      	movs	r4, #1
 8006f5e:	2300      	movs	r3, #0
 8006f60:	940b      	str	r4, [sp, #44]	; 0x2c
 8006f62:	9322      	str	r3, [sp, #136]	; 0x88
 8006f64:	f04f 39ff 	mov.w	r9, #4294967295
 8006f68:	2200      	movs	r2, #0
 8006f6a:	2312      	movs	r3, #18
 8006f6c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006f70:	9223      	str	r2, [sp, #140]	; 0x8c
 8006f72:	e7b0      	b.n	8006ed6 <_dtoa_r+0x266>
 8006f74:	2301      	movs	r3, #1
 8006f76:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f78:	e7f4      	b.n	8006f64 <_dtoa_r+0x2f4>
 8006f7a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006f7e:	464b      	mov	r3, r9
 8006f80:	f8cd 9020 	str.w	r9, [sp, #32]
 8006f84:	e7a7      	b.n	8006ed6 <_dtoa_r+0x266>
 8006f86:	3101      	adds	r1, #1
 8006f88:	6041      	str	r1, [r0, #4]
 8006f8a:	0052      	lsls	r2, r2, #1
 8006f8c:	e7a7      	b.n	8006ede <_dtoa_r+0x26e>
 8006f8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f90:	9a03      	ldr	r2, [sp, #12]
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	9b08      	ldr	r3, [sp, #32]
 8006f96:	2b0e      	cmp	r3, #14
 8006f98:	f200 80a8 	bhi.w	80070ec <_dtoa_r+0x47c>
 8006f9c:	2c00      	cmp	r4, #0
 8006f9e:	f000 80a5 	beq.w	80070ec <_dtoa_r+0x47c>
 8006fa2:	f1ba 0f00 	cmp.w	sl, #0
 8006fa6:	dd34      	ble.n	8007012 <_dtoa_r+0x3a2>
 8006fa8:	4a9a      	ldr	r2, [pc, #616]	; (8007214 <_dtoa_r+0x5a4>)
 8006faa:	f00a 030f 	and.w	r3, sl, #15
 8006fae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006fb2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006fb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006fba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006fbe:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006fc2:	d016      	beq.n	8006ff2 <_dtoa_r+0x382>
 8006fc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fc8:	4b93      	ldr	r3, [pc, #588]	; (8007218 <_dtoa_r+0x5a8>)
 8006fca:	2703      	movs	r7, #3
 8006fcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006fd0:	f7fb fab6 	bl	8002540 <__aeabi_ddiv>
 8006fd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fd8:	f004 040f 	and.w	r4, r4, #15
 8006fdc:	4e8e      	ldr	r6, [pc, #568]	; (8007218 <_dtoa_r+0x5a8>)
 8006fde:	b954      	cbnz	r4, 8006ff6 <_dtoa_r+0x386>
 8006fe0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006fe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fe8:	f7fb faaa 	bl	8002540 <__aeabi_ddiv>
 8006fec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ff0:	e029      	b.n	8007046 <_dtoa_r+0x3d6>
 8006ff2:	2702      	movs	r7, #2
 8006ff4:	e7f2      	b.n	8006fdc <_dtoa_r+0x36c>
 8006ff6:	07e1      	lsls	r1, r4, #31
 8006ff8:	d508      	bpl.n	800700c <_dtoa_r+0x39c>
 8006ffa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ffe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007002:	f7fb f973 	bl	80022ec <__aeabi_dmul>
 8007006:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800700a:	3701      	adds	r7, #1
 800700c:	1064      	asrs	r4, r4, #1
 800700e:	3608      	adds	r6, #8
 8007010:	e7e5      	b.n	8006fde <_dtoa_r+0x36e>
 8007012:	f000 80a5 	beq.w	8007160 <_dtoa_r+0x4f0>
 8007016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800701a:	f1ca 0400 	rsb	r4, sl, #0
 800701e:	4b7d      	ldr	r3, [pc, #500]	; (8007214 <_dtoa_r+0x5a4>)
 8007020:	f004 020f 	and.w	r2, r4, #15
 8007024:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702c:	f7fb f95e 	bl	80022ec <__aeabi_dmul>
 8007030:	2702      	movs	r7, #2
 8007032:	2300      	movs	r3, #0
 8007034:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007038:	4e77      	ldr	r6, [pc, #476]	; (8007218 <_dtoa_r+0x5a8>)
 800703a:	1124      	asrs	r4, r4, #4
 800703c:	2c00      	cmp	r4, #0
 800703e:	f040 8084 	bne.w	800714a <_dtoa_r+0x4da>
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1d2      	bne.n	8006fec <_dtoa_r+0x37c>
 8007046:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 808b 	beq.w	8007164 <_dtoa_r+0x4f4>
 800704e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007052:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007056:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800705a:	2200      	movs	r2, #0
 800705c:	4b6f      	ldr	r3, [pc, #444]	; (800721c <_dtoa_r+0x5ac>)
 800705e:	f7fb fbb7 	bl	80027d0 <__aeabi_dcmplt>
 8007062:	2800      	cmp	r0, #0
 8007064:	d07e      	beq.n	8007164 <_dtoa_r+0x4f4>
 8007066:	9b08      	ldr	r3, [sp, #32]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d07b      	beq.n	8007164 <_dtoa_r+0x4f4>
 800706c:	f1b9 0f00 	cmp.w	r9, #0
 8007070:	dd38      	ble.n	80070e4 <_dtoa_r+0x474>
 8007072:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007076:	2200      	movs	r2, #0
 8007078:	4b69      	ldr	r3, [pc, #420]	; (8007220 <_dtoa_r+0x5b0>)
 800707a:	f7fb f937 	bl	80022ec <__aeabi_dmul>
 800707e:	464c      	mov	r4, r9
 8007080:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007084:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007088:	3701      	adds	r7, #1
 800708a:	4638      	mov	r0, r7
 800708c:	f7fb f8c4 	bl	8002218 <__aeabi_i2d>
 8007090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007094:	f7fb f92a 	bl	80022ec <__aeabi_dmul>
 8007098:	2200      	movs	r2, #0
 800709a:	4b62      	ldr	r3, [pc, #392]	; (8007224 <_dtoa_r+0x5b4>)
 800709c:	f7fa ff70 	bl	8001f80 <__adddf3>
 80070a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80070a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80070a8:	9611      	str	r6, [sp, #68]	; 0x44
 80070aa:	2c00      	cmp	r4, #0
 80070ac:	d15d      	bne.n	800716a <_dtoa_r+0x4fa>
 80070ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070b2:	2200      	movs	r2, #0
 80070b4:	4b5c      	ldr	r3, [pc, #368]	; (8007228 <_dtoa_r+0x5b8>)
 80070b6:	f7fa ff61 	bl	8001f7c <__aeabi_dsub>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80070c2:	4633      	mov	r3, r6
 80070c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80070c6:	f7fb fba1 	bl	800280c <__aeabi_dcmpgt>
 80070ca:	2800      	cmp	r0, #0
 80070cc:	f040 829c 	bne.w	8007608 <_dtoa_r+0x998>
 80070d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80070d6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80070da:	f7fb fb79 	bl	80027d0 <__aeabi_dcmplt>
 80070de:	2800      	cmp	r0, #0
 80070e0:	f040 8290 	bne.w	8007604 <_dtoa_r+0x994>
 80070e4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80070e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80070ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f2c0 8152 	blt.w	8007398 <_dtoa_r+0x728>
 80070f4:	f1ba 0f0e 	cmp.w	sl, #14
 80070f8:	f300 814e 	bgt.w	8007398 <_dtoa_r+0x728>
 80070fc:	4b45      	ldr	r3, [pc, #276]	; (8007214 <_dtoa_r+0x5a4>)
 80070fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007102:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007106:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800710a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800710c:	2b00      	cmp	r3, #0
 800710e:	f280 80db 	bge.w	80072c8 <_dtoa_r+0x658>
 8007112:	9b08      	ldr	r3, [sp, #32]
 8007114:	2b00      	cmp	r3, #0
 8007116:	f300 80d7 	bgt.w	80072c8 <_dtoa_r+0x658>
 800711a:	f040 8272 	bne.w	8007602 <_dtoa_r+0x992>
 800711e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007122:	2200      	movs	r2, #0
 8007124:	4b40      	ldr	r3, [pc, #256]	; (8007228 <_dtoa_r+0x5b8>)
 8007126:	f7fb f8e1 	bl	80022ec <__aeabi_dmul>
 800712a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800712e:	f7fb fb63 	bl	80027f8 <__aeabi_dcmpge>
 8007132:	9c08      	ldr	r4, [sp, #32]
 8007134:	4626      	mov	r6, r4
 8007136:	2800      	cmp	r0, #0
 8007138:	f040 8248 	bne.w	80075cc <_dtoa_r+0x95c>
 800713c:	2331      	movs	r3, #49	; 0x31
 800713e:	9f03      	ldr	r7, [sp, #12]
 8007140:	f10a 0a01 	add.w	sl, sl, #1
 8007144:	f807 3b01 	strb.w	r3, [r7], #1
 8007148:	e244      	b.n	80075d4 <_dtoa_r+0x964>
 800714a:	07e2      	lsls	r2, r4, #31
 800714c:	d505      	bpl.n	800715a <_dtoa_r+0x4ea>
 800714e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007152:	f7fb f8cb 	bl	80022ec <__aeabi_dmul>
 8007156:	2301      	movs	r3, #1
 8007158:	3701      	adds	r7, #1
 800715a:	1064      	asrs	r4, r4, #1
 800715c:	3608      	adds	r6, #8
 800715e:	e76d      	b.n	800703c <_dtoa_r+0x3cc>
 8007160:	2702      	movs	r7, #2
 8007162:	e770      	b.n	8007046 <_dtoa_r+0x3d6>
 8007164:	46d0      	mov	r8, sl
 8007166:	9c08      	ldr	r4, [sp, #32]
 8007168:	e78f      	b.n	800708a <_dtoa_r+0x41a>
 800716a:	9903      	ldr	r1, [sp, #12]
 800716c:	4b29      	ldr	r3, [pc, #164]	; (8007214 <_dtoa_r+0x5a4>)
 800716e:	4421      	add	r1, r4
 8007170:	9112      	str	r1, [sp, #72]	; 0x48
 8007172:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007174:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007178:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800717c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007180:	2900      	cmp	r1, #0
 8007182:	d055      	beq.n	8007230 <_dtoa_r+0x5c0>
 8007184:	2000      	movs	r0, #0
 8007186:	4929      	ldr	r1, [pc, #164]	; (800722c <_dtoa_r+0x5bc>)
 8007188:	f7fb f9da 	bl	8002540 <__aeabi_ddiv>
 800718c:	463b      	mov	r3, r7
 800718e:	4632      	mov	r2, r6
 8007190:	f7fa fef4 	bl	8001f7c <__aeabi_dsub>
 8007194:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007198:	9f03      	ldr	r7, [sp, #12]
 800719a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800719e:	f7fb fb55 	bl	800284c <__aeabi_d2iz>
 80071a2:	4604      	mov	r4, r0
 80071a4:	f7fb f838 	bl	8002218 <__aeabi_i2d>
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071b0:	f7fa fee4 	bl	8001f7c <__aeabi_dsub>
 80071b4:	4602      	mov	r2, r0
 80071b6:	460b      	mov	r3, r1
 80071b8:	3430      	adds	r4, #48	; 0x30
 80071ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80071be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80071c2:	f807 4b01 	strb.w	r4, [r7], #1
 80071c6:	f7fb fb03 	bl	80027d0 <__aeabi_dcmplt>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d174      	bne.n	80072b8 <_dtoa_r+0x648>
 80071ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071d2:	2000      	movs	r0, #0
 80071d4:	4911      	ldr	r1, [pc, #68]	; (800721c <_dtoa_r+0x5ac>)
 80071d6:	f7fa fed1 	bl	8001f7c <__aeabi_dsub>
 80071da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80071de:	f7fb faf7 	bl	80027d0 <__aeabi_dcmplt>
 80071e2:	2800      	cmp	r0, #0
 80071e4:	f040 80b7 	bne.w	8007356 <_dtoa_r+0x6e6>
 80071e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071ea:	429f      	cmp	r7, r3
 80071ec:	f43f af7a 	beq.w	80070e4 <_dtoa_r+0x474>
 80071f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071f4:	2200      	movs	r2, #0
 80071f6:	4b0a      	ldr	r3, [pc, #40]	; (8007220 <_dtoa_r+0x5b0>)
 80071f8:	f7fb f878 	bl	80022ec <__aeabi_dmul>
 80071fc:	2200      	movs	r2, #0
 80071fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007202:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007206:	4b06      	ldr	r3, [pc, #24]	; (8007220 <_dtoa_r+0x5b0>)
 8007208:	f7fb f870 	bl	80022ec <__aeabi_dmul>
 800720c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007210:	e7c3      	b.n	800719a <_dtoa_r+0x52a>
 8007212:	bf00      	nop
 8007214:	0801b698 	.word	0x0801b698
 8007218:	0801b670 	.word	0x0801b670
 800721c:	3ff00000 	.word	0x3ff00000
 8007220:	40240000 	.word	0x40240000
 8007224:	401c0000 	.word	0x401c0000
 8007228:	40140000 	.word	0x40140000
 800722c:	3fe00000 	.word	0x3fe00000
 8007230:	4630      	mov	r0, r6
 8007232:	4639      	mov	r1, r7
 8007234:	f7fb f85a 	bl	80022ec <__aeabi_dmul>
 8007238:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800723a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800723e:	9c03      	ldr	r4, [sp, #12]
 8007240:	9314      	str	r3, [sp, #80]	; 0x50
 8007242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007246:	f7fb fb01 	bl	800284c <__aeabi_d2iz>
 800724a:	9015      	str	r0, [sp, #84]	; 0x54
 800724c:	f7fa ffe4 	bl	8002218 <__aeabi_i2d>
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007258:	f7fa fe90 	bl	8001f7c <__aeabi_dsub>
 800725c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800725e:	4606      	mov	r6, r0
 8007260:	3330      	adds	r3, #48	; 0x30
 8007262:	f804 3b01 	strb.w	r3, [r4], #1
 8007266:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007268:	460f      	mov	r7, r1
 800726a:	429c      	cmp	r4, r3
 800726c:	f04f 0200 	mov.w	r2, #0
 8007270:	d124      	bne.n	80072bc <_dtoa_r+0x64c>
 8007272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007276:	4bb0      	ldr	r3, [pc, #704]	; (8007538 <_dtoa_r+0x8c8>)
 8007278:	f7fa fe82 	bl	8001f80 <__adddf3>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4630      	mov	r0, r6
 8007282:	4639      	mov	r1, r7
 8007284:	f7fb fac2 	bl	800280c <__aeabi_dcmpgt>
 8007288:	2800      	cmp	r0, #0
 800728a:	d163      	bne.n	8007354 <_dtoa_r+0x6e4>
 800728c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007290:	2000      	movs	r0, #0
 8007292:	49a9      	ldr	r1, [pc, #676]	; (8007538 <_dtoa_r+0x8c8>)
 8007294:	f7fa fe72 	bl	8001f7c <__aeabi_dsub>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4630      	mov	r0, r6
 800729e:	4639      	mov	r1, r7
 80072a0:	f7fb fa96 	bl	80027d0 <__aeabi_dcmplt>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	f43f af1d 	beq.w	80070e4 <_dtoa_r+0x474>
 80072aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80072ac:	1e7b      	subs	r3, r7, #1
 80072ae:	9314      	str	r3, [sp, #80]	; 0x50
 80072b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80072b4:	2b30      	cmp	r3, #48	; 0x30
 80072b6:	d0f8      	beq.n	80072aa <_dtoa_r+0x63a>
 80072b8:	46c2      	mov	sl, r8
 80072ba:	e03b      	b.n	8007334 <_dtoa_r+0x6c4>
 80072bc:	4b9f      	ldr	r3, [pc, #636]	; (800753c <_dtoa_r+0x8cc>)
 80072be:	f7fb f815 	bl	80022ec <__aeabi_dmul>
 80072c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072c6:	e7bc      	b.n	8007242 <_dtoa_r+0x5d2>
 80072c8:	9f03      	ldr	r7, [sp, #12]
 80072ca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80072ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072d2:	4640      	mov	r0, r8
 80072d4:	4649      	mov	r1, r9
 80072d6:	f7fb f933 	bl	8002540 <__aeabi_ddiv>
 80072da:	f7fb fab7 	bl	800284c <__aeabi_d2iz>
 80072de:	4604      	mov	r4, r0
 80072e0:	f7fa ff9a 	bl	8002218 <__aeabi_i2d>
 80072e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072e8:	f7fb f800 	bl	80022ec <__aeabi_dmul>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4640      	mov	r0, r8
 80072f2:	4649      	mov	r1, r9
 80072f4:	f7fa fe42 	bl	8001f7c <__aeabi_dsub>
 80072f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80072fc:	f807 6b01 	strb.w	r6, [r7], #1
 8007300:	9e03      	ldr	r6, [sp, #12]
 8007302:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007306:	1bbe      	subs	r6, r7, r6
 8007308:	45b4      	cmp	ip, r6
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	d136      	bne.n	800737e <_dtoa_r+0x70e>
 8007310:	f7fa fe36 	bl	8001f80 <__adddf3>
 8007314:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007318:	4680      	mov	r8, r0
 800731a:	4689      	mov	r9, r1
 800731c:	f7fb fa76 	bl	800280c <__aeabi_dcmpgt>
 8007320:	bb58      	cbnz	r0, 800737a <_dtoa_r+0x70a>
 8007322:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007326:	4640      	mov	r0, r8
 8007328:	4649      	mov	r1, r9
 800732a:	f7fb fa47 	bl	80027bc <__aeabi_dcmpeq>
 800732e:	b108      	cbz	r0, 8007334 <_dtoa_r+0x6c4>
 8007330:	07e1      	lsls	r1, r4, #31
 8007332:	d422      	bmi.n	800737a <_dtoa_r+0x70a>
 8007334:	4628      	mov	r0, r5
 8007336:	4659      	mov	r1, fp
 8007338:	f000 fe68 	bl	800800c <_Bfree>
 800733c:	2300      	movs	r3, #0
 800733e:	703b      	strb	r3, [r7, #0]
 8007340:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007342:	f10a 0001 	add.w	r0, sl, #1
 8007346:	6018      	str	r0, [r3, #0]
 8007348:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800734a:	2b00      	cmp	r3, #0
 800734c:	f43f acde 	beq.w	8006d0c <_dtoa_r+0x9c>
 8007350:	601f      	str	r7, [r3, #0]
 8007352:	e4db      	b.n	8006d0c <_dtoa_r+0x9c>
 8007354:	4627      	mov	r7, r4
 8007356:	463b      	mov	r3, r7
 8007358:	461f      	mov	r7, r3
 800735a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800735e:	2a39      	cmp	r2, #57	; 0x39
 8007360:	d107      	bne.n	8007372 <_dtoa_r+0x702>
 8007362:	9a03      	ldr	r2, [sp, #12]
 8007364:	429a      	cmp	r2, r3
 8007366:	d1f7      	bne.n	8007358 <_dtoa_r+0x6e8>
 8007368:	2230      	movs	r2, #48	; 0x30
 800736a:	9903      	ldr	r1, [sp, #12]
 800736c:	f108 0801 	add.w	r8, r8, #1
 8007370:	700a      	strb	r2, [r1, #0]
 8007372:	781a      	ldrb	r2, [r3, #0]
 8007374:	3201      	adds	r2, #1
 8007376:	701a      	strb	r2, [r3, #0]
 8007378:	e79e      	b.n	80072b8 <_dtoa_r+0x648>
 800737a:	46d0      	mov	r8, sl
 800737c:	e7eb      	b.n	8007356 <_dtoa_r+0x6e6>
 800737e:	2200      	movs	r2, #0
 8007380:	4b6e      	ldr	r3, [pc, #440]	; (800753c <_dtoa_r+0x8cc>)
 8007382:	f7fa ffb3 	bl	80022ec <__aeabi_dmul>
 8007386:	2200      	movs	r2, #0
 8007388:	2300      	movs	r3, #0
 800738a:	4680      	mov	r8, r0
 800738c:	4689      	mov	r9, r1
 800738e:	f7fb fa15 	bl	80027bc <__aeabi_dcmpeq>
 8007392:	2800      	cmp	r0, #0
 8007394:	d09b      	beq.n	80072ce <_dtoa_r+0x65e>
 8007396:	e7cd      	b.n	8007334 <_dtoa_r+0x6c4>
 8007398:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800739a:	2a00      	cmp	r2, #0
 800739c:	f000 80d0 	beq.w	8007540 <_dtoa_r+0x8d0>
 80073a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80073a2:	2a01      	cmp	r2, #1
 80073a4:	f300 80ae 	bgt.w	8007504 <_dtoa_r+0x894>
 80073a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80073aa:	2a00      	cmp	r2, #0
 80073ac:	f000 80a6 	beq.w	80074fc <_dtoa_r+0x88c>
 80073b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80073b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80073b6:	9f06      	ldr	r7, [sp, #24]
 80073b8:	9a06      	ldr	r2, [sp, #24]
 80073ba:	2101      	movs	r1, #1
 80073bc:	441a      	add	r2, r3
 80073be:	9206      	str	r2, [sp, #24]
 80073c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073c2:	4628      	mov	r0, r5
 80073c4:	441a      	add	r2, r3
 80073c6:	9209      	str	r2, [sp, #36]	; 0x24
 80073c8:	f000 ff20 	bl	800820c <__i2b>
 80073cc:	4606      	mov	r6, r0
 80073ce:	2f00      	cmp	r7, #0
 80073d0:	dd0c      	ble.n	80073ec <_dtoa_r+0x77c>
 80073d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	dd09      	ble.n	80073ec <_dtoa_r+0x77c>
 80073d8:	42bb      	cmp	r3, r7
 80073da:	bfa8      	it	ge
 80073dc:	463b      	movge	r3, r7
 80073de:	9a06      	ldr	r2, [sp, #24]
 80073e0:	1aff      	subs	r7, r7, r3
 80073e2:	1ad2      	subs	r2, r2, r3
 80073e4:	9206      	str	r2, [sp, #24]
 80073e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	9309      	str	r3, [sp, #36]	; 0x24
 80073ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ee:	b1f3      	cbz	r3, 800742e <_dtoa_r+0x7be>
 80073f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 80a8 	beq.w	8007548 <_dtoa_r+0x8d8>
 80073f8:	2c00      	cmp	r4, #0
 80073fa:	dd10      	ble.n	800741e <_dtoa_r+0x7ae>
 80073fc:	4631      	mov	r1, r6
 80073fe:	4622      	mov	r2, r4
 8007400:	4628      	mov	r0, r5
 8007402:	f000 ffc1 	bl	8008388 <__pow5mult>
 8007406:	465a      	mov	r2, fp
 8007408:	4601      	mov	r1, r0
 800740a:	4606      	mov	r6, r0
 800740c:	4628      	mov	r0, r5
 800740e:	f000 ff13 	bl	8008238 <__multiply>
 8007412:	4680      	mov	r8, r0
 8007414:	4659      	mov	r1, fp
 8007416:	4628      	mov	r0, r5
 8007418:	f000 fdf8 	bl	800800c <_Bfree>
 800741c:	46c3      	mov	fp, r8
 800741e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007420:	1b1a      	subs	r2, r3, r4
 8007422:	d004      	beq.n	800742e <_dtoa_r+0x7be>
 8007424:	4659      	mov	r1, fp
 8007426:	4628      	mov	r0, r5
 8007428:	f000 ffae 	bl	8008388 <__pow5mult>
 800742c:	4683      	mov	fp, r0
 800742e:	2101      	movs	r1, #1
 8007430:	4628      	mov	r0, r5
 8007432:	f000 feeb 	bl	800820c <__i2b>
 8007436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007438:	4604      	mov	r4, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	f340 8086 	ble.w	800754c <_dtoa_r+0x8dc>
 8007440:	461a      	mov	r2, r3
 8007442:	4601      	mov	r1, r0
 8007444:	4628      	mov	r0, r5
 8007446:	f000 ff9f 	bl	8008388 <__pow5mult>
 800744a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800744c:	4604      	mov	r4, r0
 800744e:	2b01      	cmp	r3, #1
 8007450:	dd7f      	ble.n	8007552 <_dtoa_r+0x8e2>
 8007452:	f04f 0800 	mov.w	r8, #0
 8007456:	6923      	ldr	r3, [r4, #16]
 8007458:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800745c:	6918      	ldr	r0, [r3, #16]
 800745e:	f000 fe87 	bl	8008170 <__hi0bits>
 8007462:	f1c0 0020 	rsb	r0, r0, #32
 8007466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007468:	4418      	add	r0, r3
 800746a:	f010 001f 	ands.w	r0, r0, #31
 800746e:	f000 8092 	beq.w	8007596 <_dtoa_r+0x926>
 8007472:	f1c0 0320 	rsb	r3, r0, #32
 8007476:	2b04      	cmp	r3, #4
 8007478:	f340 808a 	ble.w	8007590 <_dtoa_r+0x920>
 800747c:	f1c0 001c 	rsb	r0, r0, #28
 8007480:	9b06      	ldr	r3, [sp, #24]
 8007482:	4407      	add	r7, r0
 8007484:	4403      	add	r3, r0
 8007486:	9306      	str	r3, [sp, #24]
 8007488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800748a:	4403      	add	r3, r0
 800748c:	9309      	str	r3, [sp, #36]	; 0x24
 800748e:	9b06      	ldr	r3, [sp, #24]
 8007490:	2b00      	cmp	r3, #0
 8007492:	dd05      	ble.n	80074a0 <_dtoa_r+0x830>
 8007494:	4659      	mov	r1, fp
 8007496:	461a      	mov	r2, r3
 8007498:	4628      	mov	r0, r5
 800749a:	f000 ffcf 	bl	800843c <__lshift>
 800749e:	4683      	mov	fp, r0
 80074a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	dd05      	ble.n	80074b2 <_dtoa_r+0x842>
 80074a6:	4621      	mov	r1, r4
 80074a8:	461a      	mov	r2, r3
 80074aa:	4628      	mov	r0, r5
 80074ac:	f000 ffc6 	bl	800843c <__lshift>
 80074b0:	4604      	mov	r4, r0
 80074b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d070      	beq.n	800759a <_dtoa_r+0x92a>
 80074b8:	4621      	mov	r1, r4
 80074ba:	4658      	mov	r0, fp
 80074bc:	f001 f82e 	bl	800851c <__mcmp>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	da6a      	bge.n	800759a <_dtoa_r+0x92a>
 80074c4:	2300      	movs	r3, #0
 80074c6:	4659      	mov	r1, fp
 80074c8:	220a      	movs	r2, #10
 80074ca:	4628      	mov	r0, r5
 80074cc:	f000 fdc0 	bl	8008050 <__multadd>
 80074d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074d2:	4683      	mov	fp, r0
 80074d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 8194 	beq.w	8007806 <_dtoa_r+0xb96>
 80074de:	4631      	mov	r1, r6
 80074e0:	2300      	movs	r3, #0
 80074e2:	220a      	movs	r2, #10
 80074e4:	4628      	mov	r0, r5
 80074e6:	f000 fdb3 	bl	8008050 <__multadd>
 80074ea:	f1b9 0f00 	cmp.w	r9, #0
 80074ee:	4606      	mov	r6, r0
 80074f0:	f300 8093 	bgt.w	800761a <_dtoa_r+0x9aa>
 80074f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	dc57      	bgt.n	80075aa <_dtoa_r+0x93a>
 80074fa:	e08e      	b.n	800761a <_dtoa_r+0x9aa>
 80074fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80074fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007502:	e757      	b.n	80073b4 <_dtoa_r+0x744>
 8007504:	9b08      	ldr	r3, [sp, #32]
 8007506:	1e5c      	subs	r4, r3, #1
 8007508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800750a:	42a3      	cmp	r3, r4
 800750c:	bfb7      	itett	lt
 800750e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007510:	1b1c      	subge	r4, r3, r4
 8007512:	1ae2      	sublt	r2, r4, r3
 8007514:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007516:	bfbe      	ittt	lt
 8007518:	940a      	strlt	r4, [sp, #40]	; 0x28
 800751a:	189b      	addlt	r3, r3, r2
 800751c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800751e:	9b08      	ldr	r3, [sp, #32]
 8007520:	bfb8      	it	lt
 8007522:	2400      	movlt	r4, #0
 8007524:	2b00      	cmp	r3, #0
 8007526:	bfbb      	ittet	lt
 8007528:	9b06      	ldrlt	r3, [sp, #24]
 800752a:	9a08      	ldrlt	r2, [sp, #32]
 800752c:	9f06      	ldrge	r7, [sp, #24]
 800752e:	1a9f      	sublt	r7, r3, r2
 8007530:	bfac      	ite	ge
 8007532:	9b08      	ldrge	r3, [sp, #32]
 8007534:	2300      	movlt	r3, #0
 8007536:	e73f      	b.n	80073b8 <_dtoa_r+0x748>
 8007538:	3fe00000 	.word	0x3fe00000
 800753c:	40240000 	.word	0x40240000
 8007540:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007542:	9f06      	ldr	r7, [sp, #24]
 8007544:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007546:	e742      	b.n	80073ce <_dtoa_r+0x75e>
 8007548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800754a:	e76b      	b.n	8007424 <_dtoa_r+0x7b4>
 800754c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800754e:	2b01      	cmp	r3, #1
 8007550:	dc19      	bgt.n	8007586 <_dtoa_r+0x916>
 8007552:	9b04      	ldr	r3, [sp, #16]
 8007554:	b9bb      	cbnz	r3, 8007586 <_dtoa_r+0x916>
 8007556:	9b05      	ldr	r3, [sp, #20]
 8007558:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800755c:	b99b      	cbnz	r3, 8007586 <_dtoa_r+0x916>
 800755e:	9b05      	ldr	r3, [sp, #20]
 8007560:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007564:	0d1b      	lsrs	r3, r3, #20
 8007566:	051b      	lsls	r3, r3, #20
 8007568:	b183      	cbz	r3, 800758c <_dtoa_r+0x91c>
 800756a:	f04f 0801 	mov.w	r8, #1
 800756e:	9b06      	ldr	r3, [sp, #24]
 8007570:	3301      	adds	r3, #1
 8007572:	9306      	str	r3, [sp, #24]
 8007574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007576:	3301      	adds	r3, #1
 8007578:	9309      	str	r3, [sp, #36]	; 0x24
 800757a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800757c:	2b00      	cmp	r3, #0
 800757e:	f47f af6a 	bne.w	8007456 <_dtoa_r+0x7e6>
 8007582:	2001      	movs	r0, #1
 8007584:	e76f      	b.n	8007466 <_dtoa_r+0x7f6>
 8007586:	f04f 0800 	mov.w	r8, #0
 800758a:	e7f6      	b.n	800757a <_dtoa_r+0x90a>
 800758c:	4698      	mov	r8, r3
 800758e:	e7f4      	b.n	800757a <_dtoa_r+0x90a>
 8007590:	f43f af7d 	beq.w	800748e <_dtoa_r+0x81e>
 8007594:	4618      	mov	r0, r3
 8007596:	301c      	adds	r0, #28
 8007598:	e772      	b.n	8007480 <_dtoa_r+0x810>
 800759a:	9b08      	ldr	r3, [sp, #32]
 800759c:	2b00      	cmp	r3, #0
 800759e:	dc36      	bgt.n	800760e <_dtoa_r+0x99e>
 80075a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	dd33      	ble.n	800760e <_dtoa_r+0x99e>
 80075a6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075aa:	f1b9 0f00 	cmp.w	r9, #0
 80075ae:	d10d      	bne.n	80075cc <_dtoa_r+0x95c>
 80075b0:	4621      	mov	r1, r4
 80075b2:	464b      	mov	r3, r9
 80075b4:	2205      	movs	r2, #5
 80075b6:	4628      	mov	r0, r5
 80075b8:	f000 fd4a 	bl	8008050 <__multadd>
 80075bc:	4601      	mov	r1, r0
 80075be:	4604      	mov	r4, r0
 80075c0:	4658      	mov	r0, fp
 80075c2:	f000 ffab 	bl	800851c <__mcmp>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f73f adb8 	bgt.w	800713c <_dtoa_r+0x4cc>
 80075cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075ce:	9f03      	ldr	r7, [sp, #12]
 80075d0:	ea6f 0a03 	mvn.w	sl, r3
 80075d4:	f04f 0800 	mov.w	r8, #0
 80075d8:	4621      	mov	r1, r4
 80075da:	4628      	mov	r0, r5
 80075dc:	f000 fd16 	bl	800800c <_Bfree>
 80075e0:	2e00      	cmp	r6, #0
 80075e2:	f43f aea7 	beq.w	8007334 <_dtoa_r+0x6c4>
 80075e6:	f1b8 0f00 	cmp.w	r8, #0
 80075ea:	d005      	beq.n	80075f8 <_dtoa_r+0x988>
 80075ec:	45b0      	cmp	r8, r6
 80075ee:	d003      	beq.n	80075f8 <_dtoa_r+0x988>
 80075f0:	4641      	mov	r1, r8
 80075f2:	4628      	mov	r0, r5
 80075f4:	f000 fd0a 	bl	800800c <_Bfree>
 80075f8:	4631      	mov	r1, r6
 80075fa:	4628      	mov	r0, r5
 80075fc:	f000 fd06 	bl	800800c <_Bfree>
 8007600:	e698      	b.n	8007334 <_dtoa_r+0x6c4>
 8007602:	2400      	movs	r4, #0
 8007604:	4626      	mov	r6, r4
 8007606:	e7e1      	b.n	80075cc <_dtoa_r+0x95c>
 8007608:	46c2      	mov	sl, r8
 800760a:	4626      	mov	r6, r4
 800760c:	e596      	b.n	800713c <_dtoa_r+0x4cc>
 800760e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007610:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 80fd 	beq.w	8007814 <_dtoa_r+0xba4>
 800761a:	2f00      	cmp	r7, #0
 800761c:	dd05      	ble.n	800762a <_dtoa_r+0x9ba>
 800761e:	4631      	mov	r1, r6
 8007620:	463a      	mov	r2, r7
 8007622:	4628      	mov	r0, r5
 8007624:	f000 ff0a 	bl	800843c <__lshift>
 8007628:	4606      	mov	r6, r0
 800762a:	f1b8 0f00 	cmp.w	r8, #0
 800762e:	d05c      	beq.n	80076ea <_dtoa_r+0xa7a>
 8007630:	4628      	mov	r0, r5
 8007632:	6871      	ldr	r1, [r6, #4]
 8007634:	f000 fcaa 	bl	8007f8c <_Balloc>
 8007638:	4607      	mov	r7, r0
 800763a:	b928      	cbnz	r0, 8007648 <_dtoa_r+0x9d8>
 800763c:	4602      	mov	r2, r0
 800763e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007642:	4b7f      	ldr	r3, [pc, #508]	; (8007840 <_dtoa_r+0xbd0>)
 8007644:	f7ff bb28 	b.w	8006c98 <_dtoa_r+0x28>
 8007648:	6932      	ldr	r2, [r6, #16]
 800764a:	f106 010c 	add.w	r1, r6, #12
 800764e:	3202      	adds	r2, #2
 8007650:	0092      	lsls	r2, r2, #2
 8007652:	300c      	adds	r0, #12
 8007654:	f000 fc8c 	bl	8007f70 <memcpy>
 8007658:	2201      	movs	r2, #1
 800765a:	4639      	mov	r1, r7
 800765c:	4628      	mov	r0, r5
 800765e:	f000 feed 	bl	800843c <__lshift>
 8007662:	46b0      	mov	r8, r6
 8007664:	4606      	mov	r6, r0
 8007666:	9b03      	ldr	r3, [sp, #12]
 8007668:	3301      	adds	r3, #1
 800766a:	9308      	str	r3, [sp, #32]
 800766c:	9b03      	ldr	r3, [sp, #12]
 800766e:	444b      	add	r3, r9
 8007670:	930a      	str	r3, [sp, #40]	; 0x28
 8007672:	9b04      	ldr	r3, [sp, #16]
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	9309      	str	r3, [sp, #36]	; 0x24
 800767a:	9b08      	ldr	r3, [sp, #32]
 800767c:	4621      	mov	r1, r4
 800767e:	3b01      	subs	r3, #1
 8007680:	4658      	mov	r0, fp
 8007682:	9304      	str	r3, [sp, #16]
 8007684:	f7ff fa66 	bl	8006b54 <quorem>
 8007688:	4603      	mov	r3, r0
 800768a:	4641      	mov	r1, r8
 800768c:	3330      	adds	r3, #48	; 0x30
 800768e:	9006      	str	r0, [sp, #24]
 8007690:	4658      	mov	r0, fp
 8007692:	930b      	str	r3, [sp, #44]	; 0x2c
 8007694:	f000 ff42 	bl	800851c <__mcmp>
 8007698:	4632      	mov	r2, r6
 800769a:	4681      	mov	r9, r0
 800769c:	4621      	mov	r1, r4
 800769e:	4628      	mov	r0, r5
 80076a0:	f000 ff58 	bl	8008554 <__mdiff>
 80076a4:	68c2      	ldr	r2, [r0, #12]
 80076a6:	4607      	mov	r7, r0
 80076a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076aa:	bb02      	cbnz	r2, 80076ee <_dtoa_r+0xa7e>
 80076ac:	4601      	mov	r1, r0
 80076ae:	4658      	mov	r0, fp
 80076b0:	f000 ff34 	bl	800851c <__mcmp>
 80076b4:	4602      	mov	r2, r0
 80076b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076b8:	4639      	mov	r1, r7
 80076ba:	4628      	mov	r0, r5
 80076bc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80076c0:	f000 fca4 	bl	800800c <_Bfree>
 80076c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076c8:	9f08      	ldr	r7, [sp, #32]
 80076ca:	ea43 0102 	orr.w	r1, r3, r2
 80076ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d0:	430b      	orrs	r3, r1
 80076d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076d4:	d10d      	bne.n	80076f2 <_dtoa_r+0xa82>
 80076d6:	2b39      	cmp	r3, #57	; 0x39
 80076d8:	d029      	beq.n	800772e <_dtoa_r+0xabe>
 80076da:	f1b9 0f00 	cmp.w	r9, #0
 80076de:	dd01      	ble.n	80076e4 <_dtoa_r+0xa74>
 80076e0:	9b06      	ldr	r3, [sp, #24]
 80076e2:	3331      	adds	r3, #49	; 0x31
 80076e4:	9a04      	ldr	r2, [sp, #16]
 80076e6:	7013      	strb	r3, [r2, #0]
 80076e8:	e776      	b.n	80075d8 <_dtoa_r+0x968>
 80076ea:	4630      	mov	r0, r6
 80076ec:	e7b9      	b.n	8007662 <_dtoa_r+0x9f2>
 80076ee:	2201      	movs	r2, #1
 80076f0:	e7e2      	b.n	80076b8 <_dtoa_r+0xa48>
 80076f2:	f1b9 0f00 	cmp.w	r9, #0
 80076f6:	db06      	blt.n	8007706 <_dtoa_r+0xa96>
 80076f8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80076fa:	ea41 0909 	orr.w	r9, r1, r9
 80076fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007700:	ea59 0101 	orrs.w	r1, r9, r1
 8007704:	d120      	bne.n	8007748 <_dtoa_r+0xad8>
 8007706:	2a00      	cmp	r2, #0
 8007708:	ddec      	ble.n	80076e4 <_dtoa_r+0xa74>
 800770a:	4659      	mov	r1, fp
 800770c:	2201      	movs	r2, #1
 800770e:	4628      	mov	r0, r5
 8007710:	9308      	str	r3, [sp, #32]
 8007712:	f000 fe93 	bl	800843c <__lshift>
 8007716:	4621      	mov	r1, r4
 8007718:	4683      	mov	fp, r0
 800771a:	f000 feff 	bl	800851c <__mcmp>
 800771e:	2800      	cmp	r0, #0
 8007720:	9b08      	ldr	r3, [sp, #32]
 8007722:	dc02      	bgt.n	800772a <_dtoa_r+0xaba>
 8007724:	d1de      	bne.n	80076e4 <_dtoa_r+0xa74>
 8007726:	07da      	lsls	r2, r3, #31
 8007728:	d5dc      	bpl.n	80076e4 <_dtoa_r+0xa74>
 800772a:	2b39      	cmp	r3, #57	; 0x39
 800772c:	d1d8      	bne.n	80076e0 <_dtoa_r+0xa70>
 800772e:	2339      	movs	r3, #57	; 0x39
 8007730:	9a04      	ldr	r2, [sp, #16]
 8007732:	7013      	strb	r3, [r2, #0]
 8007734:	463b      	mov	r3, r7
 8007736:	461f      	mov	r7, r3
 8007738:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800773c:	3b01      	subs	r3, #1
 800773e:	2a39      	cmp	r2, #57	; 0x39
 8007740:	d050      	beq.n	80077e4 <_dtoa_r+0xb74>
 8007742:	3201      	adds	r2, #1
 8007744:	701a      	strb	r2, [r3, #0]
 8007746:	e747      	b.n	80075d8 <_dtoa_r+0x968>
 8007748:	2a00      	cmp	r2, #0
 800774a:	dd03      	ble.n	8007754 <_dtoa_r+0xae4>
 800774c:	2b39      	cmp	r3, #57	; 0x39
 800774e:	d0ee      	beq.n	800772e <_dtoa_r+0xabe>
 8007750:	3301      	adds	r3, #1
 8007752:	e7c7      	b.n	80076e4 <_dtoa_r+0xa74>
 8007754:	9a08      	ldr	r2, [sp, #32]
 8007756:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007758:	f802 3c01 	strb.w	r3, [r2, #-1]
 800775c:	428a      	cmp	r2, r1
 800775e:	d02a      	beq.n	80077b6 <_dtoa_r+0xb46>
 8007760:	4659      	mov	r1, fp
 8007762:	2300      	movs	r3, #0
 8007764:	220a      	movs	r2, #10
 8007766:	4628      	mov	r0, r5
 8007768:	f000 fc72 	bl	8008050 <__multadd>
 800776c:	45b0      	cmp	r8, r6
 800776e:	4683      	mov	fp, r0
 8007770:	f04f 0300 	mov.w	r3, #0
 8007774:	f04f 020a 	mov.w	r2, #10
 8007778:	4641      	mov	r1, r8
 800777a:	4628      	mov	r0, r5
 800777c:	d107      	bne.n	800778e <_dtoa_r+0xb1e>
 800777e:	f000 fc67 	bl	8008050 <__multadd>
 8007782:	4680      	mov	r8, r0
 8007784:	4606      	mov	r6, r0
 8007786:	9b08      	ldr	r3, [sp, #32]
 8007788:	3301      	adds	r3, #1
 800778a:	9308      	str	r3, [sp, #32]
 800778c:	e775      	b.n	800767a <_dtoa_r+0xa0a>
 800778e:	f000 fc5f 	bl	8008050 <__multadd>
 8007792:	4631      	mov	r1, r6
 8007794:	4680      	mov	r8, r0
 8007796:	2300      	movs	r3, #0
 8007798:	220a      	movs	r2, #10
 800779a:	4628      	mov	r0, r5
 800779c:	f000 fc58 	bl	8008050 <__multadd>
 80077a0:	4606      	mov	r6, r0
 80077a2:	e7f0      	b.n	8007786 <_dtoa_r+0xb16>
 80077a4:	f1b9 0f00 	cmp.w	r9, #0
 80077a8:	bfcc      	ite	gt
 80077aa:	464f      	movgt	r7, r9
 80077ac:	2701      	movle	r7, #1
 80077ae:	f04f 0800 	mov.w	r8, #0
 80077b2:	9a03      	ldr	r2, [sp, #12]
 80077b4:	4417      	add	r7, r2
 80077b6:	4659      	mov	r1, fp
 80077b8:	2201      	movs	r2, #1
 80077ba:	4628      	mov	r0, r5
 80077bc:	9308      	str	r3, [sp, #32]
 80077be:	f000 fe3d 	bl	800843c <__lshift>
 80077c2:	4621      	mov	r1, r4
 80077c4:	4683      	mov	fp, r0
 80077c6:	f000 fea9 	bl	800851c <__mcmp>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	dcb2      	bgt.n	8007734 <_dtoa_r+0xac4>
 80077ce:	d102      	bne.n	80077d6 <_dtoa_r+0xb66>
 80077d0:	9b08      	ldr	r3, [sp, #32]
 80077d2:	07db      	lsls	r3, r3, #31
 80077d4:	d4ae      	bmi.n	8007734 <_dtoa_r+0xac4>
 80077d6:	463b      	mov	r3, r7
 80077d8:	461f      	mov	r7, r3
 80077da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077de:	2a30      	cmp	r2, #48	; 0x30
 80077e0:	d0fa      	beq.n	80077d8 <_dtoa_r+0xb68>
 80077e2:	e6f9      	b.n	80075d8 <_dtoa_r+0x968>
 80077e4:	9a03      	ldr	r2, [sp, #12]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d1a5      	bne.n	8007736 <_dtoa_r+0xac6>
 80077ea:	2331      	movs	r3, #49	; 0x31
 80077ec:	f10a 0a01 	add.w	sl, sl, #1
 80077f0:	e779      	b.n	80076e6 <_dtoa_r+0xa76>
 80077f2:	4b14      	ldr	r3, [pc, #80]	; (8007844 <_dtoa_r+0xbd4>)
 80077f4:	f7ff baa8 	b.w	8006d48 <_dtoa_r+0xd8>
 80077f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f47f aa81 	bne.w	8006d02 <_dtoa_r+0x92>
 8007800:	4b11      	ldr	r3, [pc, #68]	; (8007848 <_dtoa_r+0xbd8>)
 8007802:	f7ff baa1 	b.w	8006d48 <_dtoa_r+0xd8>
 8007806:	f1b9 0f00 	cmp.w	r9, #0
 800780a:	dc03      	bgt.n	8007814 <_dtoa_r+0xba4>
 800780c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800780e:	2b02      	cmp	r3, #2
 8007810:	f73f aecb 	bgt.w	80075aa <_dtoa_r+0x93a>
 8007814:	9f03      	ldr	r7, [sp, #12]
 8007816:	4621      	mov	r1, r4
 8007818:	4658      	mov	r0, fp
 800781a:	f7ff f99b 	bl	8006b54 <quorem>
 800781e:	9a03      	ldr	r2, [sp, #12]
 8007820:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007824:	f807 3b01 	strb.w	r3, [r7], #1
 8007828:	1aba      	subs	r2, r7, r2
 800782a:	4591      	cmp	r9, r2
 800782c:	ddba      	ble.n	80077a4 <_dtoa_r+0xb34>
 800782e:	4659      	mov	r1, fp
 8007830:	2300      	movs	r3, #0
 8007832:	220a      	movs	r2, #10
 8007834:	4628      	mov	r0, r5
 8007836:	f000 fc0b 	bl	8008050 <__multadd>
 800783a:	4683      	mov	fp, r0
 800783c:	e7eb      	b.n	8007816 <_dtoa_r+0xba6>
 800783e:	bf00      	nop
 8007840:	0801b588 	.word	0x0801b588
 8007844:	0801b388 	.word	0x0801b388
 8007848:	0801b509 	.word	0x0801b509

0800784c <rshift>:
 800784c:	6903      	ldr	r3, [r0, #16]
 800784e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007852:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007856:	f100 0414 	add.w	r4, r0, #20
 800785a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800785e:	dd46      	ble.n	80078ee <rshift+0xa2>
 8007860:	f011 011f 	ands.w	r1, r1, #31
 8007864:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007868:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800786c:	d10c      	bne.n	8007888 <rshift+0x3c>
 800786e:	4629      	mov	r1, r5
 8007870:	f100 0710 	add.w	r7, r0, #16
 8007874:	42b1      	cmp	r1, r6
 8007876:	d335      	bcc.n	80078e4 <rshift+0x98>
 8007878:	1a9b      	subs	r3, r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	1eea      	subs	r2, r5, #3
 800787e:	4296      	cmp	r6, r2
 8007880:	bf38      	it	cc
 8007882:	2300      	movcc	r3, #0
 8007884:	4423      	add	r3, r4
 8007886:	e015      	b.n	80078b4 <rshift+0x68>
 8007888:	46a1      	mov	r9, r4
 800788a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800788e:	f1c1 0820 	rsb	r8, r1, #32
 8007892:	40cf      	lsrs	r7, r1
 8007894:	f105 0e04 	add.w	lr, r5, #4
 8007898:	4576      	cmp	r6, lr
 800789a:	46f4      	mov	ip, lr
 800789c:	d816      	bhi.n	80078cc <rshift+0x80>
 800789e:	1a9a      	subs	r2, r3, r2
 80078a0:	0092      	lsls	r2, r2, #2
 80078a2:	3a04      	subs	r2, #4
 80078a4:	3501      	adds	r5, #1
 80078a6:	42ae      	cmp	r6, r5
 80078a8:	bf38      	it	cc
 80078aa:	2200      	movcc	r2, #0
 80078ac:	18a3      	adds	r3, r4, r2
 80078ae:	50a7      	str	r7, [r4, r2]
 80078b0:	b107      	cbz	r7, 80078b4 <rshift+0x68>
 80078b2:	3304      	adds	r3, #4
 80078b4:	42a3      	cmp	r3, r4
 80078b6:	eba3 0204 	sub.w	r2, r3, r4
 80078ba:	bf08      	it	eq
 80078bc:	2300      	moveq	r3, #0
 80078be:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80078c2:	6102      	str	r2, [r0, #16]
 80078c4:	bf08      	it	eq
 80078c6:	6143      	streq	r3, [r0, #20]
 80078c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078cc:	f8dc c000 	ldr.w	ip, [ip]
 80078d0:	fa0c fc08 	lsl.w	ip, ip, r8
 80078d4:	ea4c 0707 	orr.w	r7, ip, r7
 80078d8:	f849 7b04 	str.w	r7, [r9], #4
 80078dc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80078e0:	40cf      	lsrs	r7, r1
 80078e2:	e7d9      	b.n	8007898 <rshift+0x4c>
 80078e4:	f851 cb04 	ldr.w	ip, [r1], #4
 80078e8:	f847 cf04 	str.w	ip, [r7, #4]!
 80078ec:	e7c2      	b.n	8007874 <rshift+0x28>
 80078ee:	4623      	mov	r3, r4
 80078f0:	e7e0      	b.n	80078b4 <rshift+0x68>

080078f2 <__hexdig_fun>:
 80078f2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80078f6:	2b09      	cmp	r3, #9
 80078f8:	d802      	bhi.n	8007900 <__hexdig_fun+0xe>
 80078fa:	3820      	subs	r0, #32
 80078fc:	b2c0      	uxtb	r0, r0
 80078fe:	4770      	bx	lr
 8007900:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007904:	2b05      	cmp	r3, #5
 8007906:	d801      	bhi.n	800790c <__hexdig_fun+0x1a>
 8007908:	3847      	subs	r0, #71	; 0x47
 800790a:	e7f7      	b.n	80078fc <__hexdig_fun+0xa>
 800790c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007910:	2b05      	cmp	r3, #5
 8007912:	d801      	bhi.n	8007918 <__hexdig_fun+0x26>
 8007914:	3827      	subs	r0, #39	; 0x27
 8007916:	e7f1      	b.n	80078fc <__hexdig_fun+0xa>
 8007918:	2000      	movs	r0, #0
 800791a:	4770      	bx	lr

0800791c <__gethex>:
 800791c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007920:	b08b      	sub	sp, #44	; 0x2c
 8007922:	9305      	str	r3, [sp, #20]
 8007924:	4bb2      	ldr	r3, [pc, #712]	; (8007bf0 <__gethex+0x2d4>)
 8007926:	9002      	str	r0, [sp, #8]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	468b      	mov	fp, r1
 800792c:	4618      	mov	r0, r3
 800792e:	4690      	mov	r8, r2
 8007930:	9303      	str	r3, [sp, #12]
 8007932:	f7fa fb17 	bl	8001f64 <strlen>
 8007936:	4682      	mov	sl, r0
 8007938:	9b03      	ldr	r3, [sp, #12]
 800793a:	f8db 2000 	ldr.w	r2, [fp]
 800793e:	4403      	add	r3, r0
 8007940:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007944:	9306      	str	r3, [sp, #24]
 8007946:	1c93      	adds	r3, r2, #2
 8007948:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800794c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007950:	32fe      	adds	r2, #254	; 0xfe
 8007952:	18d1      	adds	r1, r2, r3
 8007954:	461f      	mov	r7, r3
 8007956:	f813 0b01 	ldrb.w	r0, [r3], #1
 800795a:	9101      	str	r1, [sp, #4]
 800795c:	2830      	cmp	r0, #48	; 0x30
 800795e:	d0f8      	beq.n	8007952 <__gethex+0x36>
 8007960:	f7ff ffc7 	bl	80078f2 <__hexdig_fun>
 8007964:	4604      	mov	r4, r0
 8007966:	2800      	cmp	r0, #0
 8007968:	d13a      	bne.n	80079e0 <__gethex+0xc4>
 800796a:	4652      	mov	r2, sl
 800796c:	4638      	mov	r0, r7
 800796e:	9903      	ldr	r1, [sp, #12]
 8007970:	f001 fa26 	bl	8008dc0 <strncmp>
 8007974:	4605      	mov	r5, r0
 8007976:	2800      	cmp	r0, #0
 8007978:	d166      	bne.n	8007a48 <__gethex+0x12c>
 800797a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800797e:	eb07 060a 	add.w	r6, r7, sl
 8007982:	f7ff ffb6 	bl	80078f2 <__hexdig_fun>
 8007986:	2800      	cmp	r0, #0
 8007988:	d060      	beq.n	8007a4c <__gethex+0x130>
 800798a:	4633      	mov	r3, r6
 800798c:	7818      	ldrb	r0, [r3, #0]
 800798e:	461f      	mov	r7, r3
 8007990:	2830      	cmp	r0, #48	; 0x30
 8007992:	f103 0301 	add.w	r3, r3, #1
 8007996:	d0f9      	beq.n	800798c <__gethex+0x70>
 8007998:	f7ff ffab 	bl	80078f2 <__hexdig_fun>
 800799c:	2301      	movs	r3, #1
 800799e:	fab0 f480 	clz	r4, r0
 80079a2:	4635      	mov	r5, r6
 80079a4:	0964      	lsrs	r4, r4, #5
 80079a6:	9301      	str	r3, [sp, #4]
 80079a8:	463a      	mov	r2, r7
 80079aa:	4616      	mov	r6, r2
 80079ac:	7830      	ldrb	r0, [r6, #0]
 80079ae:	3201      	adds	r2, #1
 80079b0:	f7ff ff9f 	bl	80078f2 <__hexdig_fun>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d1f8      	bne.n	80079aa <__gethex+0x8e>
 80079b8:	4652      	mov	r2, sl
 80079ba:	4630      	mov	r0, r6
 80079bc:	9903      	ldr	r1, [sp, #12]
 80079be:	f001 f9ff 	bl	8008dc0 <strncmp>
 80079c2:	b980      	cbnz	r0, 80079e6 <__gethex+0xca>
 80079c4:	b94d      	cbnz	r5, 80079da <__gethex+0xbe>
 80079c6:	eb06 050a 	add.w	r5, r6, sl
 80079ca:	462a      	mov	r2, r5
 80079cc:	4616      	mov	r6, r2
 80079ce:	7830      	ldrb	r0, [r6, #0]
 80079d0:	3201      	adds	r2, #1
 80079d2:	f7ff ff8e 	bl	80078f2 <__hexdig_fun>
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d1f8      	bne.n	80079cc <__gethex+0xb0>
 80079da:	1bad      	subs	r5, r5, r6
 80079dc:	00ad      	lsls	r5, r5, #2
 80079de:	e004      	b.n	80079ea <__gethex+0xce>
 80079e0:	2400      	movs	r4, #0
 80079e2:	4625      	mov	r5, r4
 80079e4:	e7e0      	b.n	80079a8 <__gethex+0x8c>
 80079e6:	2d00      	cmp	r5, #0
 80079e8:	d1f7      	bne.n	80079da <__gethex+0xbe>
 80079ea:	7833      	ldrb	r3, [r6, #0]
 80079ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80079f0:	2b50      	cmp	r3, #80	; 0x50
 80079f2:	d139      	bne.n	8007a68 <__gethex+0x14c>
 80079f4:	7873      	ldrb	r3, [r6, #1]
 80079f6:	2b2b      	cmp	r3, #43	; 0x2b
 80079f8:	d02a      	beq.n	8007a50 <__gethex+0x134>
 80079fa:	2b2d      	cmp	r3, #45	; 0x2d
 80079fc:	d02c      	beq.n	8007a58 <__gethex+0x13c>
 80079fe:	f04f 0900 	mov.w	r9, #0
 8007a02:	1c71      	adds	r1, r6, #1
 8007a04:	7808      	ldrb	r0, [r1, #0]
 8007a06:	f7ff ff74 	bl	80078f2 <__hexdig_fun>
 8007a0a:	1e43      	subs	r3, r0, #1
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b18      	cmp	r3, #24
 8007a10:	d82a      	bhi.n	8007a68 <__gethex+0x14c>
 8007a12:	f1a0 0210 	sub.w	r2, r0, #16
 8007a16:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007a1a:	f7ff ff6a 	bl	80078f2 <__hexdig_fun>
 8007a1e:	1e43      	subs	r3, r0, #1
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b18      	cmp	r3, #24
 8007a24:	d91b      	bls.n	8007a5e <__gethex+0x142>
 8007a26:	f1b9 0f00 	cmp.w	r9, #0
 8007a2a:	d000      	beq.n	8007a2e <__gethex+0x112>
 8007a2c:	4252      	negs	r2, r2
 8007a2e:	4415      	add	r5, r2
 8007a30:	f8cb 1000 	str.w	r1, [fp]
 8007a34:	b1d4      	cbz	r4, 8007a6c <__gethex+0x150>
 8007a36:	9b01      	ldr	r3, [sp, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	bf14      	ite	ne
 8007a3c:	2700      	movne	r7, #0
 8007a3e:	2706      	moveq	r7, #6
 8007a40:	4638      	mov	r0, r7
 8007a42:	b00b      	add	sp, #44	; 0x2c
 8007a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a48:	463e      	mov	r6, r7
 8007a4a:	4625      	mov	r5, r4
 8007a4c:	2401      	movs	r4, #1
 8007a4e:	e7cc      	b.n	80079ea <__gethex+0xce>
 8007a50:	f04f 0900 	mov.w	r9, #0
 8007a54:	1cb1      	adds	r1, r6, #2
 8007a56:	e7d5      	b.n	8007a04 <__gethex+0xe8>
 8007a58:	f04f 0901 	mov.w	r9, #1
 8007a5c:	e7fa      	b.n	8007a54 <__gethex+0x138>
 8007a5e:	230a      	movs	r3, #10
 8007a60:	fb03 0202 	mla	r2, r3, r2, r0
 8007a64:	3a10      	subs	r2, #16
 8007a66:	e7d6      	b.n	8007a16 <__gethex+0xfa>
 8007a68:	4631      	mov	r1, r6
 8007a6a:	e7e1      	b.n	8007a30 <__gethex+0x114>
 8007a6c:	4621      	mov	r1, r4
 8007a6e:	1bf3      	subs	r3, r6, r7
 8007a70:	3b01      	subs	r3, #1
 8007a72:	2b07      	cmp	r3, #7
 8007a74:	dc0a      	bgt.n	8007a8c <__gethex+0x170>
 8007a76:	9802      	ldr	r0, [sp, #8]
 8007a78:	f000 fa88 	bl	8007f8c <_Balloc>
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	b940      	cbnz	r0, 8007a92 <__gethex+0x176>
 8007a80:	4602      	mov	r2, r0
 8007a82:	21de      	movs	r1, #222	; 0xde
 8007a84:	4b5b      	ldr	r3, [pc, #364]	; (8007bf4 <__gethex+0x2d8>)
 8007a86:	485c      	ldr	r0, [pc, #368]	; (8007bf8 <__gethex+0x2dc>)
 8007a88:	f001 f9bc 	bl	8008e04 <__assert_func>
 8007a8c:	3101      	adds	r1, #1
 8007a8e:	105b      	asrs	r3, r3, #1
 8007a90:	e7ef      	b.n	8007a72 <__gethex+0x156>
 8007a92:	f04f 0b00 	mov.w	fp, #0
 8007a96:	f100 0914 	add.w	r9, r0, #20
 8007a9a:	f1ca 0301 	rsb	r3, sl, #1
 8007a9e:	f8cd 9010 	str.w	r9, [sp, #16]
 8007aa2:	f8cd b004 	str.w	fp, [sp, #4]
 8007aa6:	9308      	str	r3, [sp, #32]
 8007aa8:	42b7      	cmp	r7, r6
 8007aaa:	d33f      	bcc.n	8007b2c <__gethex+0x210>
 8007aac:	9f04      	ldr	r7, [sp, #16]
 8007aae:	9b01      	ldr	r3, [sp, #4]
 8007ab0:	f847 3b04 	str.w	r3, [r7], #4
 8007ab4:	eba7 0709 	sub.w	r7, r7, r9
 8007ab8:	10bf      	asrs	r7, r7, #2
 8007aba:	6127      	str	r7, [r4, #16]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 fb57 	bl	8008170 <__hi0bits>
 8007ac2:	017f      	lsls	r7, r7, #5
 8007ac4:	f8d8 6000 	ldr.w	r6, [r8]
 8007ac8:	1a3f      	subs	r7, r7, r0
 8007aca:	42b7      	cmp	r7, r6
 8007acc:	dd62      	ble.n	8007b94 <__gethex+0x278>
 8007ace:	1bbf      	subs	r7, r7, r6
 8007ad0:	4639      	mov	r1, r7
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f000 fef1 	bl	80088ba <__any_on>
 8007ad8:	4682      	mov	sl, r0
 8007ada:	b1a8      	cbz	r0, 8007b08 <__gethex+0x1ec>
 8007adc:	f04f 0a01 	mov.w	sl, #1
 8007ae0:	1e7b      	subs	r3, r7, #1
 8007ae2:	1159      	asrs	r1, r3, #5
 8007ae4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007ae8:	f003 021f 	and.w	r2, r3, #31
 8007aec:	fa0a f202 	lsl.w	r2, sl, r2
 8007af0:	420a      	tst	r2, r1
 8007af2:	d009      	beq.n	8007b08 <__gethex+0x1ec>
 8007af4:	4553      	cmp	r3, sl
 8007af6:	dd05      	ble.n	8007b04 <__gethex+0x1e8>
 8007af8:	4620      	mov	r0, r4
 8007afa:	1eb9      	subs	r1, r7, #2
 8007afc:	f000 fedd 	bl	80088ba <__any_on>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	d144      	bne.n	8007b8e <__gethex+0x272>
 8007b04:	f04f 0a02 	mov.w	sl, #2
 8007b08:	4639      	mov	r1, r7
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f7ff fe9e 	bl	800784c <rshift>
 8007b10:	443d      	add	r5, r7
 8007b12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b16:	42ab      	cmp	r3, r5
 8007b18:	da4a      	bge.n	8007bb0 <__gethex+0x294>
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	9802      	ldr	r0, [sp, #8]
 8007b1e:	f000 fa75 	bl	800800c <_Bfree>
 8007b22:	2300      	movs	r3, #0
 8007b24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b26:	27a3      	movs	r7, #163	; 0xa3
 8007b28:	6013      	str	r3, [r2, #0]
 8007b2a:	e789      	b.n	8007a40 <__gethex+0x124>
 8007b2c:	1e73      	subs	r3, r6, #1
 8007b2e:	9a06      	ldr	r2, [sp, #24]
 8007b30:	9307      	str	r3, [sp, #28]
 8007b32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d019      	beq.n	8007b6e <__gethex+0x252>
 8007b3a:	f1bb 0f20 	cmp.w	fp, #32
 8007b3e:	d107      	bne.n	8007b50 <__gethex+0x234>
 8007b40:	9b04      	ldr	r3, [sp, #16]
 8007b42:	9a01      	ldr	r2, [sp, #4]
 8007b44:	f843 2b04 	str.w	r2, [r3], #4
 8007b48:	9304      	str	r3, [sp, #16]
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	469b      	mov	fp, r3
 8007b4e:	9301      	str	r3, [sp, #4]
 8007b50:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007b54:	f7ff fecd 	bl	80078f2 <__hexdig_fun>
 8007b58:	9b01      	ldr	r3, [sp, #4]
 8007b5a:	f000 000f 	and.w	r0, r0, #15
 8007b5e:	fa00 f00b 	lsl.w	r0, r0, fp
 8007b62:	4303      	orrs	r3, r0
 8007b64:	9301      	str	r3, [sp, #4]
 8007b66:	f10b 0b04 	add.w	fp, fp, #4
 8007b6a:	9b07      	ldr	r3, [sp, #28]
 8007b6c:	e00d      	b.n	8007b8a <__gethex+0x26e>
 8007b6e:	9a08      	ldr	r2, [sp, #32]
 8007b70:	1e73      	subs	r3, r6, #1
 8007b72:	4413      	add	r3, r2
 8007b74:	42bb      	cmp	r3, r7
 8007b76:	d3e0      	bcc.n	8007b3a <__gethex+0x21e>
 8007b78:	4618      	mov	r0, r3
 8007b7a:	4652      	mov	r2, sl
 8007b7c:	9903      	ldr	r1, [sp, #12]
 8007b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b80:	f001 f91e 	bl	8008dc0 <strncmp>
 8007b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d1d7      	bne.n	8007b3a <__gethex+0x21e>
 8007b8a:	461e      	mov	r6, r3
 8007b8c:	e78c      	b.n	8007aa8 <__gethex+0x18c>
 8007b8e:	f04f 0a03 	mov.w	sl, #3
 8007b92:	e7b9      	b.n	8007b08 <__gethex+0x1ec>
 8007b94:	da09      	bge.n	8007baa <__gethex+0x28e>
 8007b96:	1bf7      	subs	r7, r6, r7
 8007b98:	4621      	mov	r1, r4
 8007b9a:	463a      	mov	r2, r7
 8007b9c:	9802      	ldr	r0, [sp, #8]
 8007b9e:	f000 fc4d 	bl	800843c <__lshift>
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	1bed      	subs	r5, r5, r7
 8007ba6:	f100 0914 	add.w	r9, r0, #20
 8007baa:	f04f 0a00 	mov.w	sl, #0
 8007bae:	e7b0      	b.n	8007b12 <__gethex+0x1f6>
 8007bb0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007bb4:	42a8      	cmp	r0, r5
 8007bb6:	dd72      	ble.n	8007c9e <__gethex+0x382>
 8007bb8:	1b45      	subs	r5, r0, r5
 8007bba:	42ae      	cmp	r6, r5
 8007bbc:	dc35      	bgt.n	8007c2a <__gethex+0x30e>
 8007bbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d029      	beq.n	8007c1a <__gethex+0x2fe>
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d02b      	beq.n	8007c22 <__gethex+0x306>
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d11c      	bne.n	8007c08 <__gethex+0x2ec>
 8007bce:	42ae      	cmp	r6, r5
 8007bd0:	d11a      	bne.n	8007c08 <__gethex+0x2ec>
 8007bd2:	2e01      	cmp	r6, #1
 8007bd4:	d112      	bne.n	8007bfc <__gethex+0x2e0>
 8007bd6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007bda:	9a05      	ldr	r2, [sp, #20]
 8007bdc:	2762      	movs	r7, #98	; 0x62
 8007bde:	6013      	str	r3, [r2, #0]
 8007be0:	2301      	movs	r3, #1
 8007be2:	6123      	str	r3, [r4, #16]
 8007be4:	f8c9 3000 	str.w	r3, [r9]
 8007be8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007bea:	601c      	str	r4, [r3, #0]
 8007bec:	e728      	b.n	8007a40 <__gethex+0x124>
 8007bee:	bf00      	nop
 8007bf0:	0801b600 	.word	0x0801b600
 8007bf4:	0801b588 	.word	0x0801b588
 8007bf8:	0801b599 	.word	0x0801b599
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	1e71      	subs	r1, r6, #1
 8007c00:	f000 fe5b 	bl	80088ba <__any_on>
 8007c04:	2800      	cmp	r0, #0
 8007c06:	d1e6      	bne.n	8007bd6 <__gethex+0x2ba>
 8007c08:	4621      	mov	r1, r4
 8007c0a:	9802      	ldr	r0, [sp, #8]
 8007c0c:	f000 f9fe 	bl	800800c <_Bfree>
 8007c10:	2300      	movs	r3, #0
 8007c12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c14:	2750      	movs	r7, #80	; 0x50
 8007c16:	6013      	str	r3, [r2, #0]
 8007c18:	e712      	b.n	8007a40 <__gethex+0x124>
 8007c1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1f3      	bne.n	8007c08 <__gethex+0x2ec>
 8007c20:	e7d9      	b.n	8007bd6 <__gethex+0x2ba>
 8007c22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1d6      	bne.n	8007bd6 <__gethex+0x2ba>
 8007c28:	e7ee      	b.n	8007c08 <__gethex+0x2ec>
 8007c2a:	1e6f      	subs	r7, r5, #1
 8007c2c:	f1ba 0f00 	cmp.w	sl, #0
 8007c30:	d132      	bne.n	8007c98 <__gethex+0x37c>
 8007c32:	b127      	cbz	r7, 8007c3e <__gethex+0x322>
 8007c34:	4639      	mov	r1, r7
 8007c36:	4620      	mov	r0, r4
 8007c38:	f000 fe3f 	bl	80088ba <__any_on>
 8007c3c:	4682      	mov	sl, r0
 8007c3e:	2101      	movs	r1, #1
 8007c40:	117b      	asrs	r3, r7, #5
 8007c42:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007c46:	f007 071f 	and.w	r7, r7, #31
 8007c4a:	fa01 f707 	lsl.w	r7, r1, r7
 8007c4e:	421f      	tst	r7, r3
 8007c50:	f04f 0702 	mov.w	r7, #2
 8007c54:	4629      	mov	r1, r5
 8007c56:	4620      	mov	r0, r4
 8007c58:	bf18      	it	ne
 8007c5a:	f04a 0a02 	orrne.w	sl, sl, #2
 8007c5e:	1b76      	subs	r6, r6, r5
 8007c60:	f7ff fdf4 	bl	800784c <rshift>
 8007c64:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007c68:	f1ba 0f00 	cmp.w	sl, #0
 8007c6c:	d048      	beq.n	8007d00 <__gethex+0x3e4>
 8007c6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d015      	beq.n	8007ca2 <__gethex+0x386>
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d017      	beq.n	8007caa <__gethex+0x38e>
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d109      	bne.n	8007c92 <__gethex+0x376>
 8007c7e:	f01a 0f02 	tst.w	sl, #2
 8007c82:	d006      	beq.n	8007c92 <__gethex+0x376>
 8007c84:	f8d9 0000 	ldr.w	r0, [r9]
 8007c88:	ea4a 0a00 	orr.w	sl, sl, r0
 8007c8c:	f01a 0f01 	tst.w	sl, #1
 8007c90:	d10e      	bne.n	8007cb0 <__gethex+0x394>
 8007c92:	f047 0710 	orr.w	r7, r7, #16
 8007c96:	e033      	b.n	8007d00 <__gethex+0x3e4>
 8007c98:	f04f 0a01 	mov.w	sl, #1
 8007c9c:	e7cf      	b.n	8007c3e <__gethex+0x322>
 8007c9e:	2701      	movs	r7, #1
 8007ca0:	e7e2      	b.n	8007c68 <__gethex+0x34c>
 8007ca2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ca4:	f1c3 0301 	rsb	r3, r3, #1
 8007ca8:	9315      	str	r3, [sp, #84]	; 0x54
 8007caa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d0f0      	beq.n	8007c92 <__gethex+0x376>
 8007cb0:	f04f 0c00 	mov.w	ip, #0
 8007cb4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007cb8:	f104 0314 	add.w	r3, r4, #20
 8007cbc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007cc0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cca:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007cce:	d01c      	beq.n	8007d0a <__gethex+0x3ee>
 8007cd0:	3201      	adds	r2, #1
 8007cd2:	6002      	str	r2, [r0, #0]
 8007cd4:	2f02      	cmp	r7, #2
 8007cd6:	f104 0314 	add.w	r3, r4, #20
 8007cda:	d13d      	bne.n	8007d58 <__gethex+0x43c>
 8007cdc:	f8d8 2000 	ldr.w	r2, [r8]
 8007ce0:	3a01      	subs	r2, #1
 8007ce2:	42b2      	cmp	r2, r6
 8007ce4:	d10a      	bne.n	8007cfc <__gethex+0x3e0>
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	1171      	asrs	r1, r6, #5
 8007cea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007cee:	f006 061f 	and.w	r6, r6, #31
 8007cf2:	fa02 f606 	lsl.w	r6, r2, r6
 8007cf6:	421e      	tst	r6, r3
 8007cf8:	bf18      	it	ne
 8007cfa:	4617      	movne	r7, r2
 8007cfc:	f047 0720 	orr.w	r7, r7, #32
 8007d00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d02:	601c      	str	r4, [r3, #0]
 8007d04:	9b05      	ldr	r3, [sp, #20]
 8007d06:	601d      	str	r5, [r3, #0]
 8007d08:	e69a      	b.n	8007a40 <__gethex+0x124>
 8007d0a:	4299      	cmp	r1, r3
 8007d0c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007d10:	d8d8      	bhi.n	8007cc4 <__gethex+0x3a8>
 8007d12:	68a3      	ldr	r3, [r4, #8]
 8007d14:	459b      	cmp	fp, r3
 8007d16:	db17      	blt.n	8007d48 <__gethex+0x42c>
 8007d18:	6861      	ldr	r1, [r4, #4]
 8007d1a:	9802      	ldr	r0, [sp, #8]
 8007d1c:	3101      	adds	r1, #1
 8007d1e:	f000 f935 	bl	8007f8c <_Balloc>
 8007d22:	4681      	mov	r9, r0
 8007d24:	b918      	cbnz	r0, 8007d2e <__gethex+0x412>
 8007d26:	4602      	mov	r2, r0
 8007d28:	2184      	movs	r1, #132	; 0x84
 8007d2a:	4b19      	ldr	r3, [pc, #100]	; (8007d90 <__gethex+0x474>)
 8007d2c:	e6ab      	b.n	8007a86 <__gethex+0x16a>
 8007d2e:	6922      	ldr	r2, [r4, #16]
 8007d30:	f104 010c 	add.w	r1, r4, #12
 8007d34:	3202      	adds	r2, #2
 8007d36:	0092      	lsls	r2, r2, #2
 8007d38:	300c      	adds	r0, #12
 8007d3a:	f000 f919 	bl	8007f70 <memcpy>
 8007d3e:	4621      	mov	r1, r4
 8007d40:	9802      	ldr	r0, [sp, #8]
 8007d42:	f000 f963 	bl	800800c <_Bfree>
 8007d46:	464c      	mov	r4, r9
 8007d48:	6923      	ldr	r3, [r4, #16]
 8007d4a:	1c5a      	adds	r2, r3, #1
 8007d4c:	6122      	str	r2, [r4, #16]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d54:	615a      	str	r2, [r3, #20]
 8007d56:	e7bd      	b.n	8007cd4 <__gethex+0x3b8>
 8007d58:	6922      	ldr	r2, [r4, #16]
 8007d5a:	455a      	cmp	r2, fp
 8007d5c:	dd0b      	ble.n	8007d76 <__gethex+0x45a>
 8007d5e:	2101      	movs	r1, #1
 8007d60:	4620      	mov	r0, r4
 8007d62:	f7ff fd73 	bl	800784c <rshift>
 8007d66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d6a:	3501      	adds	r5, #1
 8007d6c:	42ab      	cmp	r3, r5
 8007d6e:	f6ff aed4 	blt.w	8007b1a <__gethex+0x1fe>
 8007d72:	2701      	movs	r7, #1
 8007d74:	e7c2      	b.n	8007cfc <__gethex+0x3e0>
 8007d76:	f016 061f 	ands.w	r6, r6, #31
 8007d7a:	d0fa      	beq.n	8007d72 <__gethex+0x456>
 8007d7c:	4453      	add	r3, sl
 8007d7e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007d82:	f000 f9f5 	bl	8008170 <__hi0bits>
 8007d86:	f1c6 0620 	rsb	r6, r6, #32
 8007d8a:	42b0      	cmp	r0, r6
 8007d8c:	dbe7      	blt.n	8007d5e <__gethex+0x442>
 8007d8e:	e7f0      	b.n	8007d72 <__gethex+0x456>
 8007d90:	0801b588 	.word	0x0801b588

08007d94 <L_shift>:
 8007d94:	f1c2 0208 	rsb	r2, r2, #8
 8007d98:	0092      	lsls	r2, r2, #2
 8007d9a:	b570      	push	{r4, r5, r6, lr}
 8007d9c:	f1c2 0620 	rsb	r6, r2, #32
 8007da0:	6843      	ldr	r3, [r0, #4]
 8007da2:	6804      	ldr	r4, [r0, #0]
 8007da4:	fa03 f506 	lsl.w	r5, r3, r6
 8007da8:	432c      	orrs	r4, r5
 8007daa:	40d3      	lsrs	r3, r2
 8007dac:	6004      	str	r4, [r0, #0]
 8007dae:	f840 3f04 	str.w	r3, [r0, #4]!
 8007db2:	4288      	cmp	r0, r1
 8007db4:	d3f4      	bcc.n	8007da0 <L_shift+0xc>
 8007db6:	bd70      	pop	{r4, r5, r6, pc}

08007db8 <__match>:
 8007db8:	b530      	push	{r4, r5, lr}
 8007dba:	6803      	ldr	r3, [r0, #0]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dc2:	b914      	cbnz	r4, 8007dca <__match+0x12>
 8007dc4:	6003      	str	r3, [r0, #0]
 8007dc6:	2001      	movs	r0, #1
 8007dc8:	bd30      	pop	{r4, r5, pc}
 8007dca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007dd2:	2d19      	cmp	r5, #25
 8007dd4:	bf98      	it	ls
 8007dd6:	3220      	addls	r2, #32
 8007dd8:	42a2      	cmp	r2, r4
 8007dda:	d0f0      	beq.n	8007dbe <__match+0x6>
 8007ddc:	2000      	movs	r0, #0
 8007dde:	e7f3      	b.n	8007dc8 <__match+0x10>

08007de0 <__hexnan>:
 8007de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de4:	2500      	movs	r5, #0
 8007de6:	680b      	ldr	r3, [r1, #0]
 8007de8:	4682      	mov	sl, r0
 8007dea:	115e      	asrs	r6, r3, #5
 8007dec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007df0:	f013 031f 	ands.w	r3, r3, #31
 8007df4:	bf18      	it	ne
 8007df6:	3604      	addne	r6, #4
 8007df8:	1f37      	subs	r7, r6, #4
 8007dfa:	46b9      	mov	r9, r7
 8007dfc:	463c      	mov	r4, r7
 8007dfe:	46ab      	mov	fp, r5
 8007e00:	b087      	sub	sp, #28
 8007e02:	4690      	mov	r8, r2
 8007e04:	6802      	ldr	r2, [r0, #0]
 8007e06:	9301      	str	r3, [sp, #4]
 8007e08:	f846 5c04 	str.w	r5, [r6, #-4]
 8007e0c:	9502      	str	r5, [sp, #8]
 8007e0e:	7851      	ldrb	r1, [r2, #1]
 8007e10:	1c53      	adds	r3, r2, #1
 8007e12:	9303      	str	r3, [sp, #12]
 8007e14:	b341      	cbz	r1, 8007e68 <__hexnan+0x88>
 8007e16:	4608      	mov	r0, r1
 8007e18:	9205      	str	r2, [sp, #20]
 8007e1a:	9104      	str	r1, [sp, #16]
 8007e1c:	f7ff fd69 	bl	80078f2 <__hexdig_fun>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	d14f      	bne.n	8007ec4 <__hexnan+0xe4>
 8007e24:	9904      	ldr	r1, [sp, #16]
 8007e26:	9a05      	ldr	r2, [sp, #20]
 8007e28:	2920      	cmp	r1, #32
 8007e2a:	d818      	bhi.n	8007e5e <__hexnan+0x7e>
 8007e2c:	9b02      	ldr	r3, [sp, #8]
 8007e2e:	459b      	cmp	fp, r3
 8007e30:	dd13      	ble.n	8007e5a <__hexnan+0x7a>
 8007e32:	454c      	cmp	r4, r9
 8007e34:	d206      	bcs.n	8007e44 <__hexnan+0x64>
 8007e36:	2d07      	cmp	r5, #7
 8007e38:	dc04      	bgt.n	8007e44 <__hexnan+0x64>
 8007e3a:	462a      	mov	r2, r5
 8007e3c:	4649      	mov	r1, r9
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f7ff ffa8 	bl	8007d94 <L_shift>
 8007e44:	4544      	cmp	r4, r8
 8007e46:	d950      	bls.n	8007eea <__hexnan+0x10a>
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f1a4 0904 	sub.w	r9, r4, #4
 8007e4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e52:	461d      	mov	r5, r3
 8007e54:	464c      	mov	r4, r9
 8007e56:	f8cd b008 	str.w	fp, [sp, #8]
 8007e5a:	9a03      	ldr	r2, [sp, #12]
 8007e5c:	e7d7      	b.n	8007e0e <__hexnan+0x2e>
 8007e5e:	2929      	cmp	r1, #41	; 0x29
 8007e60:	d156      	bne.n	8007f10 <__hexnan+0x130>
 8007e62:	3202      	adds	r2, #2
 8007e64:	f8ca 2000 	str.w	r2, [sl]
 8007e68:	f1bb 0f00 	cmp.w	fp, #0
 8007e6c:	d050      	beq.n	8007f10 <__hexnan+0x130>
 8007e6e:	454c      	cmp	r4, r9
 8007e70:	d206      	bcs.n	8007e80 <__hexnan+0xa0>
 8007e72:	2d07      	cmp	r5, #7
 8007e74:	dc04      	bgt.n	8007e80 <__hexnan+0xa0>
 8007e76:	462a      	mov	r2, r5
 8007e78:	4649      	mov	r1, r9
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f7ff ff8a 	bl	8007d94 <L_shift>
 8007e80:	4544      	cmp	r4, r8
 8007e82:	d934      	bls.n	8007eee <__hexnan+0x10e>
 8007e84:	4623      	mov	r3, r4
 8007e86:	f1a8 0204 	sub.w	r2, r8, #4
 8007e8a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007e8e:	429f      	cmp	r7, r3
 8007e90:	f842 1f04 	str.w	r1, [r2, #4]!
 8007e94:	d2f9      	bcs.n	8007e8a <__hexnan+0xaa>
 8007e96:	1b3b      	subs	r3, r7, r4
 8007e98:	f023 0303 	bic.w	r3, r3, #3
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	3401      	adds	r4, #1
 8007ea0:	3e03      	subs	r6, #3
 8007ea2:	42b4      	cmp	r4, r6
 8007ea4:	bf88      	it	hi
 8007ea6:	2304      	movhi	r3, #4
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	4443      	add	r3, r8
 8007eac:	f843 2b04 	str.w	r2, [r3], #4
 8007eb0:	429f      	cmp	r7, r3
 8007eb2:	d2fb      	bcs.n	8007eac <__hexnan+0xcc>
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	b91b      	cbnz	r3, 8007ec0 <__hexnan+0xe0>
 8007eb8:	4547      	cmp	r7, r8
 8007eba:	d127      	bne.n	8007f0c <__hexnan+0x12c>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	603b      	str	r3, [r7, #0]
 8007ec0:	2005      	movs	r0, #5
 8007ec2:	e026      	b.n	8007f12 <__hexnan+0x132>
 8007ec4:	3501      	adds	r5, #1
 8007ec6:	2d08      	cmp	r5, #8
 8007ec8:	f10b 0b01 	add.w	fp, fp, #1
 8007ecc:	dd06      	ble.n	8007edc <__hexnan+0xfc>
 8007ece:	4544      	cmp	r4, r8
 8007ed0:	d9c3      	bls.n	8007e5a <__hexnan+0x7a>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2501      	movs	r5, #1
 8007ed6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007eda:	3c04      	subs	r4, #4
 8007edc:	6822      	ldr	r2, [r4, #0]
 8007ede:	f000 000f 	and.w	r0, r0, #15
 8007ee2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007ee6:	6022      	str	r2, [r4, #0]
 8007ee8:	e7b7      	b.n	8007e5a <__hexnan+0x7a>
 8007eea:	2508      	movs	r5, #8
 8007eec:	e7b5      	b.n	8007e5a <__hexnan+0x7a>
 8007eee:	9b01      	ldr	r3, [sp, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d0df      	beq.n	8007eb4 <__hexnan+0xd4>
 8007ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef8:	f1c3 0320 	rsb	r3, r3, #32
 8007efc:	fa22 f303 	lsr.w	r3, r2, r3
 8007f00:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007f04:	401a      	ands	r2, r3
 8007f06:	f846 2c04 	str.w	r2, [r6, #-4]
 8007f0a:	e7d3      	b.n	8007eb4 <__hexnan+0xd4>
 8007f0c:	3f04      	subs	r7, #4
 8007f0e:	e7d1      	b.n	8007eb4 <__hexnan+0xd4>
 8007f10:	2004      	movs	r0, #4
 8007f12:	b007      	add	sp, #28
 8007f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007f18 <_localeconv_r>:
 8007f18:	4800      	ldr	r0, [pc, #0]	; (8007f1c <_localeconv_r+0x4>)
 8007f1a:	4770      	bx	lr
 8007f1c:	20000168 	.word	0x20000168

08007f20 <malloc>:
 8007f20:	4b02      	ldr	r3, [pc, #8]	; (8007f2c <malloc+0xc>)
 8007f22:	4601      	mov	r1, r0
 8007f24:	6818      	ldr	r0, [r3, #0]
 8007f26:	f000 bd65 	b.w	80089f4 <_malloc_r>
 8007f2a:	bf00      	nop
 8007f2c:	20000010 	.word	0x20000010

08007f30 <__ascii_mbtowc>:
 8007f30:	b082      	sub	sp, #8
 8007f32:	b901      	cbnz	r1, 8007f36 <__ascii_mbtowc+0x6>
 8007f34:	a901      	add	r1, sp, #4
 8007f36:	b142      	cbz	r2, 8007f4a <__ascii_mbtowc+0x1a>
 8007f38:	b14b      	cbz	r3, 8007f4e <__ascii_mbtowc+0x1e>
 8007f3a:	7813      	ldrb	r3, [r2, #0]
 8007f3c:	600b      	str	r3, [r1, #0]
 8007f3e:	7812      	ldrb	r2, [r2, #0]
 8007f40:	1e10      	subs	r0, r2, #0
 8007f42:	bf18      	it	ne
 8007f44:	2001      	movne	r0, #1
 8007f46:	b002      	add	sp, #8
 8007f48:	4770      	bx	lr
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	e7fb      	b.n	8007f46 <__ascii_mbtowc+0x16>
 8007f4e:	f06f 0001 	mvn.w	r0, #1
 8007f52:	e7f8      	b.n	8007f46 <__ascii_mbtowc+0x16>

08007f54 <memchr>:
 8007f54:	4603      	mov	r3, r0
 8007f56:	b510      	push	{r4, lr}
 8007f58:	b2c9      	uxtb	r1, r1
 8007f5a:	4402      	add	r2, r0
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	4618      	mov	r0, r3
 8007f60:	d101      	bne.n	8007f66 <memchr+0x12>
 8007f62:	2000      	movs	r0, #0
 8007f64:	e003      	b.n	8007f6e <memchr+0x1a>
 8007f66:	7804      	ldrb	r4, [r0, #0]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	428c      	cmp	r4, r1
 8007f6c:	d1f6      	bne.n	8007f5c <memchr+0x8>
 8007f6e:	bd10      	pop	{r4, pc}

08007f70 <memcpy>:
 8007f70:	440a      	add	r2, r1
 8007f72:	4291      	cmp	r1, r2
 8007f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f78:	d100      	bne.n	8007f7c <memcpy+0xc>
 8007f7a:	4770      	bx	lr
 8007f7c:	b510      	push	{r4, lr}
 8007f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f82:	4291      	cmp	r1, r2
 8007f84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f88:	d1f9      	bne.n	8007f7e <memcpy+0xe>
 8007f8a:	bd10      	pop	{r4, pc}

08007f8c <_Balloc>:
 8007f8c:	b570      	push	{r4, r5, r6, lr}
 8007f8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f90:	4604      	mov	r4, r0
 8007f92:	460d      	mov	r5, r1
 8007f94:	b976      	cbnz	r6, 8007fb4 <_Balloc+0x28>
 8007f96:	2010      	movs	r0, #16
 8007f98:	f7ff ffc2 	bl	8007f20 <malloc>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	6260      	str	r0, [r4, #36]	; 0x24
 8007fa0:	b920      	cbnz	r0, 8007fac <_Balloc+0x20>
 8007fa2:	2166      	movs	r1, #102	; 0x66
 8007fa4:	4b17      	ldr	r3, [pc, #92]	; (8008004 <_Balloc+0x78>)
 8007fa6:	4818      	ldr	r0, [pc, #96]	; (8008008 <_Balloc+0x7c>)
 8007fa8:	f000 ff2c 	bl	8008e04 <__assert_func>
 8007fac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fb0:	6006      	str	r6, [r0, #0]
 8007fb2:	60c6      	str	r6, [r0, #12]
 8007fb4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007fb6:	68f3      	ldr	r3, [r6, #12]
 8007fb8:	b183      	cbz	r3, 8007fdc <_Balloc+0x50>
 8007fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fc2:	b9b8      	cbnz	r0, 8007ff4 <_Balloc+0x68>
 8007fc4:	2101      	movs	r1, #1
 8007fc6:	fa01 f605 	lsl.w	r6, r1, r5
 8007fca:	1d72      	adds	r2, r6, #5
 8007fcc:	4620      	mov	r0, r4
 8007fce:	0092      	lsls	r2, r2, #2
 8007fd0:	f000 fc94 	bl	80088fc <_calloc_r>
 8007fd4:	b160      	cbz	r0, 8007ff0 <_Balloc+0x64>
 8007fd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fda:	e00e      	b.n	8007ffa <_Balloc+0x6e>
 8007fdc:	2221      	movs	r2, #33	; 0x21
 8007fde:	2104      	movs	r1, #4
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f000 fc8b 	bl	80088fc <_calloc_r>
 8007fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fe8:	60f0      	str	r0, [r6, #12]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e4      	bne.n	8007fba <_Balloc+0x2e>
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	bd70      	pop	{r4, r5, r6, pc}
 8007ff4:	6802      	ldr	r2, [r0, #0]
 8007ff6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008000:	e7f7      	b.n	8007ff2 <_Balloc+0x66>
 8008002:	bf00      	nop
 8008004:	0801b516 	.word	0x0801b516
 8008008:	0801b612 	.word	0x0801b612

0800800c <_Bfree>:
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008010:	4605      	mov	r5, r0
 8008012:	460c      	mov	r4, r1
 8008014:	b976      	cbnz	r6, 8008034 <_Bfree+0x28>
 8008016:	2010      	movs	r0, #16
 8008018:	f7ff ff82 	bl	8007f20 <malloc>
 800801c:	4602      	mov	r2, r0
 800801e:	6268      	str	r0, [r5, #36]	; 0x24
 8008020:	b920      	cbnz	r0, 800802c <_Bfree+0x20>
 8008022:	218a      	movs	r1, #138	; 0x8a
 8008024:	4b08      	ldr	r3, [pc, #32]	; (8008048 <_Bfree+0x3c>)
 8008026:	4809      	ldr	r0, [pc, #36]	; (800804c <_Bfree+0x40>)
 8008028:	f000 feec 	bl	8008e04 <__assert_func>
 800802c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008030:	6006      	str	r6, [r0, #0]
 8008032:	60c6      	str	r6, [r0, #12]
 8008034:	b13c      	cbz	r4, 8008046 <_Bfree+0x3a>
 8008036:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008038:	6862      	ldr	r2, [r4, #4]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008040:	6021      	str	r1, [r4, #0]
 8008042:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008046:	bd70      	pop	{r4, r5, r6, pc}
 8008048:	0801b516 	.word	0x0801b516
 800804c:	0801b612 	.word	0x0801b612

08008050 <__multadd>:
 8008050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008054:	4607      	mov	r7, r0
 8008056:	460c      	mov	r4, r1
 8008058:	461e      	mov	r6, r3
 800805a:	2000      	movs	r0, #0
 800805c:	690d      	ldr	r5, [r1, #16]
 800805e:	f101 0c14 	add.w	ip, r1, #20
 8008062:	f8dc 3000 	ldr.w	r3, [ip]
 8008066:	3001      	adds	r0, #1
 8008068:	b299      	uxth	r1, r3
 800806a:	fb02 6101 	mla	r1, r2, r1, r6
 800806e:	0c1e      	lsrs	r6, r3, #16
 8008070:	0c0b      	lsrs	r3, r1, #16
 8008072:	fb02 3306 	mla	r3, r2, r6, r3
 8008076:	b289      	uxth	r1, r1
 8008078:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800807c:	4285      	cmp	r5, r0
 800807e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008082:	f84c 1b04 	str.w	r1, [ip], #4
 8008086:	dcec      	bgt.n	8008062 <__multadd+0x12>
 8008088:	b30e      	cbz	r6, 80080ce <__multadd+0x7e>
 800808a:	68a3      	ldr	r3, [r4, #8]
 800808c:	42ab      	cmp	r3, r5
 800808e:	dc19      	bgt.n	80080c4 <__multadd+0x74>
 8008090:	6861      	ldr	r1, [r4, #4]
 8008092:	4638      	mov	r0, r7
 8008094:	3101      	adds	r1, #1
 8008096:	f7ff ff79 	bl	8007f8c <_Balloc>
 800809a:	4680      	mov	r8, r0
 800809c:	b928      	cbnz	r0, 80080aa <__multadd+0x5a>
 800809e:	4602      	mov	r2, r0
 80080a0:	21b5      	movs	r1, #181	; 0xb5
 80080a2:	4b0c      	ldr	r3, [pc, #48]	; (80080d4 <__multadd+0x84>)
 80080a4:	480c      	ldr	r0, [pc, #48]	; (80080d8 <__multadd+0x88>)
 80080a6:	f000 fead 	bl	8008e04 <__assert_func>
 80080aa:	6922      	ldr	r2, [r4, #16]
 80080ac:	f104 010c 	add.w	r1, r4, #12
 80080b0:	3202      	adds	r2, #2
 80080b2:	0092      	lsls	r2, r2, #2
 80080b4:	300c      	adds	r0, #12
 80080b6:	f7ff ff5b 	bl	8007f70 <memcpy>
 80080ba:	4621      	mov	r1, r4
 80080bc:	4638      	mov	r0, r7
 80080be:	f7ff ffa5 	bl	800800c <_Bfree>
 80080c2:	4644      	mov	r4, r8
 80080c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080c8:	3501      	adds	r5, #1
 80080ca:	615e      	str	r6, [r3, #20]
 80080cc:	6125      	str	r5, [r4, #16]
 80080ce:	4620      	mov	r0, r4
 80080d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d4:	0801b588 	.word	0x0801b588
 80080d8:	0801b612 	.word	0x0801b612

080080dc <__s2b>:
 80080dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080e0:	4615      	mov	r5, r2
 80080e2:	2209      	movs	r2, #9
 80080e4:	461f      	mov	r7, r3
 80080e6:	3308      	adds	r3, #8
 80080e8:	460c      	mov	r4, r1
 80080ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80080ee:	4606      	mov	r6, r0
 80080f0:	2201      	movs	r2, #1
 80080f2:	2100      	movs	r1, #0
 80080f4:	429a      	cmp	r2, r3
 80080f6:	db09      	blt.n	800810c <__s2b+0x30>
 80080f8:	4630      	mov	r0, r6
 80080fa:	f7ff ff47 	bl	8007f8c <_Balloc>
 80080fe:	b940      	cbnz	r0, 8008112 <__s2b+0x36>
 8008100:	4602      	mov	r2, r0
 8008102:	21ce      	movs	r1, #206	; 0xce
 8008104:	4b18      	ldr	r3, [pc, #96]	; (8008168 <__s2b+0x8c>)
 8008106:	4819      	ldr	r0, [pc, #100]	; (800816c <__s2b+0x90>)
 8008108:	f000 fe7c 	bl	8008e04 <__assert_func>
 800810c:	0052      	lsls	r2, r2, #1
 800810e:	3101      	adds	r1, #1
 8008110:	e7f0      	b.n	80080f4 <__s2b+0x18>
 8008112:	9b08      	ldr	r3, [sp, #32]
 8008114:	2d09      	cmp	r5, #9
 8008116:	6143      	str	r3, [r0, #20]
 8008118:	f04f 0301 	mov.w	r3, #1
 800811c:	6103      	str	r3, [r0, #16]
 800811e:	dd16      	ble.n	800814e <__s2b+0x72>
 8008120:	f104 0909 	add.w	r9, r4, #9
 8008124:	46c8      	mov	r8, r9
 8008126:	442c      	add	r4, r5
 8008128:	f818 3b01 	ldrb.w	r3, [r8], #1
 800812c:	4601      	mov	r1, r0
 800812e:	220a      	movs	r2, #10
 8008130:	4630      	mov	r0, r6
 8008132:	3b30      	subs	r3, #48	; 0x30
 8008134:	f7ff ff8c 	bl	8008050 <__multadd>
 8008138:	45a0      	cmp	r8, r4
 800813a:	d1f5      	bne.n	8008128 <__s2b+0x4c>
 800813c:	f1a5 0408 	sub.w	r4, r5, #8
 8008140:	444c      	add	r4, r9
 8008142:	1b2d      	subs	r5, r5, r4
 8008144:	1963      	adds	r3, r4, r5
 8008146:	42bb      	cmp	r3, r7
 8008148:	db04      	blt.n	8008154 <__s2b+0x78>
 800814a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800814e:	2509      	movs	r5, #9
 8008150:	340a      	adds	r4, #10
 8008152:	e7f6      	b.n	8008142 <__s2b+0x66>
 8008154:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008158:	4601      	mov	r1, r0
 800815a:	220a      	movs	r2, #10
 800815c:	4630      	mov	r0, r6
 800815e:	3b30      	subs	r3, #48	; 0x30
 8008160:	f7ff ff76 	bl	8008050 <__multadd>
 8008164:	e7ee      	b.n	8008144 <__s2b+0x68>
 8008166:	bf00      	nop
 8008168:	0801b588 	.word	0x0801b588
 800816c:	0801b612 	.word	0x0801b612

08008170 <__hi0bits>:
 8008170:	0c02      	lsrs	r2, r0, #16
 8008172:	0412      	lsls	r2, r2, #16
 8008174:	4603      	mov	r3, r0
 8008176:	b9ca      	cbnz	r2, 80081ac <__hi0bits+0x3c>
 8008178:	0403      	lsls	r3, r0, #16
 800817a:	2010      	movs	r0, #16
 800817c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008180:	bf04      	itt	eq
 8008182:	021b      	lsleq	r3, r3, #8
 8008184:	3008      	addeq	r0, #8
 8008186:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800818a:	bf04      	itt	eq
 800818c:	011b      	lsleq	r3, r3, #4
 800818e:	3004      	addeq	r0, #4
 8008190:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008194:	bf04      	itt	eq
 8008196:	009b      	lsleq	r3, r3, #2
 8008198:	3002      	addeq	r0, #2
 800819a:	2b00      	cmp	r3, #0
 800819c:	db05      	blt.n	80081aa <__hi0bits+0x3a>
 800819e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80081a2:	f100 0001 	add.w	r0, r0, #1
 80081a6:	bf08      	it	eq
 80081a8:	2020      	moveq	r0, #32
 80081aa:	4770      	bx	lr
 80081ac:	2000      	movs	r0, #0
 80081ae:	e7e5      	b.n	800817c <__hi0bits+0xc>

080081b0 <__lo0bits>:
 80081b0:	6803      	ldr	r3, [r0, #0]
 80081b2:	4602      	mov	r2, r0
 80081b4:	f013 0007 	ands.w	r0, r3, #7
 80081b8:	d00b      	beq.n	80081d2 <__lo0bits+0x22>
 80081ba:	07d9      	lsls	r1, r3, #31
 80081bc:	d421      	bmi.n	8008202 <__lo0bits+0x52>
 80081be:	0798      	lsls	r0, r3, #30
 80081c0:	bf49      	itett	mi
 80081c2:	085b      	lsrmi	r3, r3, #1
 80081c4:	089b      	lsrpl	r3, r3, #2
 80081c6:	2001      	movmi	r0, #1
 80081c8:	6013      	strmi	r3, [r2, #0]
 80081ca:	bf5c      	itt	pl
 80081cc:	2002      	movpl	r0, #2
 80081ce:	6013      	strpl	r3, [r2, #0]
 80081d0:	4770      	bx	lr
 80081d2:	b299      	uxth	r1, r3
 80081d4:	b909      	cbnz	r1, 80081da <__lo0bits+0x2a>
 80081d6:	2010      	movs	r0, #16
 80081d8:	0c1b      	lsrs	r3, r3, #16
 80081da:	b2d9      	uxtb	r1, r3
 80081dc:	b909      	cbnz	r1, 80081e2 <__lo0bits+0x32>
 80081de:	3008      	adds	r0, #8
 80081e0:	0a1b      	lsrs	r3, r3, #8
 80081e2:	0719      	lsls	r1, r3, #28
 80081e4:	bf04      	itt	eq
 80081e6:	091b      	lsreq	r3, r3, #4
 80081e8:	3004      	addeq	r0, #4
 80081ea:	0799      	lsls	r1, r3, #30
 80081ec:	bf04      	itt	eq
 80081ee:	089b      	lsreq	r3, r3, #2
 80081f0:	3002      	addeq	r0, #2
 80081f2:	07d9      	lsls	r1, r3, #31
 80081f4:	d403      	bmi.n	80081fe <__lo0bits+0x4e>
 80081f6:	085b      	lsrs	r3, r3, #1
 80081f8:	f100 0001 	add.w	r0, r0, #1
 80081fc:	d003      	beq.n	8008206 <__lo0bits+0x56>
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	4770      	bx	lr
 8008202:	2000      	movs	r0, #0
 8008204:	4770      	bx	lr
 8008206:	2020      	movs	r0, #32
 8008208:	4770      	bx	lr
	...

0800820c <__i2b>:
 800820c:	b510      	push	{r4, lr}
 800820e:	460c      	mov	r4, r1
 8008210:	2101      	movs	r1, #1
 8008212:	f7ff febb 	bl	8007f8c <_Balloc>
 8008216:	4602      	mov	r2, r0
 8008218:	b928      	cbnz	r0, 8008226 <__i2b+0x1a>
 800821a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800821e:	4b04      	ldr	r3, [pc, #16]	; (8008230 <__i2b+0x24>)
 8008220:	4804      	ldr	r0, [pc, #16]	; (8008234 <__i2b+0x28>)
 8008222:	f000 fdef 	bl	8008e04 <__assert_func>
 8008226:	2301      	movs	r3, #1
 8008228:	6144      	str	r4, [r0, #20]
 800822a:	6103      	str	r3, [r0, #16]
 800822c:	bd10      	pop	{r4, pc}
 800822e:	bf00      	nop
 8008230:	0801b588 	.word	0x0801b588
 8008234:	0801b612 	.word	0x0801b612

08008238 <__multiply>:
 8008238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800823c:	4691      	mov	r9, r2
 800823e:	690a      	ldr	r2, [r1, #16]
 8008240:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008244:	460c      	mov	r4, r1
 8008246:	429a      	cmp	r2, r3
 8008248:	bfbe      	ittt	lt
 800824a:	460b      	movlt	r3, r1
 800824c:	464c      	movlt	r4, r9
 800824e:	4699      	movlt	r9, r3
 8008250:	6927      	ldr	r7, [r4, #16]
 8008252:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008256:	68a3      	ldr	r3, [r4, #8]
 8008258:	6861      	ldr	r1, [r4, #4]
 800825a:	eb07 060a 	add.w	r6, r7, sl
 800825e:	42b3      	cmp	r3, r6
 8008260:	b085      	sub	sp, #20
 8008262:	bfb8      	it	lt
 8008264:	3101      	addlt	r1, #1
 8008266:	f7ff fe91 	bl	8007f8c <_Balloc>
 800826a:	b930      	cbnz	r0, 800827a <__multiply+0x42>
 800826c:	4602      	mov	r2, r0
 800826e:	f240 115d 	movw	r1, #349	; 0x15d
 8008272:	4b43      	ldr	r3, [pc, #268]	; (8008380 <__multiply+0x148>)
 8008274:	4843      	ldr	r0, [pc, #268]	; (8008384 <__multiply+0x14c>)
 8008276:	f000 fdc5 	bl	8008e04 <__assert_func>
 800827a:	f100 0514 	add.w	r5, r0, #20
 800827e:	462b      	mov	r3, r5
 8008280:	2200      	movs	r2, #0
 8008282:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008286:	4543      	cmp	r3, r8
 8008288:	d321      	bcc.n	80082ce <__multiply+0x96>
 800828a:	f104 0314 	add.w	r3, r4, #20
 800828e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008292:	f109 0314 	add.w	r3, r9, #20
 8008296:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800829a:	9202      	str	r2, [sp, #8]
 800829c:	1b3a      	subs	r2, r7, r4
 800829e:	3a15      	subs	r2, #21
 80082a0:	f022 0203 	bic.w	r2, r2, #3
 80082a4:	3204      	adds	r2, #4
 80082a6:	f104 0115 	add.w	r1, r4, #21
 80082aa:	428f      	cmp	r7, r1
 80082ac:	bf38      	it	cc
 80082ae:	2204      	movcc	r2, #4
 80082b0:	9201      	str	r2, [sp, #4]
 80082b2:	9a02      	ldr	r2, [sp, #8]
 80082b4:	9303      	str	r3, [sp, #12]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d80c      	bhi.n	80082d4 <__multiply+0x9c>
 80082ba:	2e00      	cmp	r6, #0
 80082bc:	dd03      	ble.n	80082c6 <__multiply+0x8e>
 80082be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d059      	beq.n	800837a <__multiply+0x142>
 80082c6:	6106      	str	r6, [r0, #16]
 80082c8:	b005      	add	sp, #20
 80082ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ce:	f843 2b04 	str.w	r2, [r3], #4
 80082d2:	e7d8      	b.n	8008286 <__multiply+0x4e>
 80082d4:	f8b3 a000 	ldrh.w	sl, [r3]
 80082d8:	f1ba 0f00 	cmp.w	sl, #0
 80082dc:	d023      	beq.n	8008326 <__multiply+0xee>
 80082de:	46a9      	mov	r9, r5
 80082e0:	f04f 0c00 	mov.w	ip, #0
 80082e4:	f104 0e14 	add.w	lr, r4, #20
 80082e8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80082ec:	f8d9 1000 	ldr.w	r1, [r9]
 80082f0:	fa1f fb82 	uxth.w	fp, r2
 80082f4:	b289      	uxth	r1, r1
 80082f6:	fb0a 110b 	mla	r1, sl, fp, r1
 80082fa:	4461      	add	r1, ip
 80082fc:	f8d9 c000 	ldr.w	ip, [r9]
 8008300:	0c12      	lsrs	r2, r2, #16
 8008302:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008306:	fb0a c202 	mla	r2, sl, r2, ip
 800830a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800830e:	b289      	uxth	r1, r1
 8008310:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008314:	4577      	cmp	r7, lr
 8008316:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800831a:	f849 1b04 	str.w	r1, [r9], #4
 800831e:	d8e3      	bhi.n	80082e8 <__multiply+0xb0>
 8008320:	9a01      	ldr	r2, [sp, #4]
 8008322:	f845 c002 	str.w	ip, [r5, r2]
 8008326:	9a03      	ldr	r2, [sp, #12]
 8008328:	3304      	adds	r3, #4
 800832a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800832e:	f1b9 0f00 	cmp.w	r9, #0
 8008332:	d020      	beq.n	8008376 <__multiply+0x13e>
 8008334:	46ae      	mov	lr, r5
 8008336:	f04f 0a00 	mov.w	sl, #0
 800833a:	6829      	ldr	r1, [r5, #0]
 800833c:	f104 0c14 	add.w	ip, r4, #20
 8008340:	f8bc b000 	ldrh.w	fp, [ip]
 8008344:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008348:	b289      	uxth	r1, r1
 800834a:	fb09 220b 	mla	r2, r9, fp, r2
 800834e:	4492      	add	sl, r2
 8008350:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008354:	f84e 1b04 	str.w	r1, [lr], #4
 8008358:	f85c 2b04 	ldr.w	r2, [ip], #4
 800835c:	f8be 1000 	ldrh.w	r1, [lr]
 8008360:	0c12      	lsrs	r2, r2, #16
 8008362:	fb09 1102 	mla	r1, r9, r2, r1
 8008366:	4567      	cmp	r7, ip
 8008368:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800836c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008370:	d8e6      	bhi.n	8008340 <__multiply+0x108>
 8008372:	9a01      	ldr	r2, [sp, #4]
 8008374:	50a9      	str	r1, [r5, r2]
 8008376:	3504      	adds	r5, #4
 8008378:	e79b      	b.n	80082b2 <__multiply+0x7a>
 800837a:	3e01      	subs	r6, #1
 800837c:	e79d      	b.n	80082ba <__multiply+0x82>
 800837e:	bf00      	nop
 8008380:	0801b588 	.word	0x0801b588
 8008384:	0801b612 	.word	0x0801b612

08008388 <__pow5mult>:
 8008388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800838c:	4615      	mov	r5, r2
 800838e:	f012 0203 	ands.w	r2, r2, #3
 8008392:	4606      	mov	r6, r0
 8008394:	460f      	mov	r7, r1
 8008396:	d007      	beq.n	80083a8 <__pow5mult+0x20>
 8008398:	4c25      	ldr	r4, [pc, #148]	; (8008430 <__pow5mult+0xa8>)
 800839a:	3a01      	subs	r2, #1
 800839c:	2300      	movs	r3, #0
 800839e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083a2:	f7ff fe55 	bl	8008050 <__multadd>
 80083a6:	4607      	mov	r7, r0
 80083a8:	10ad      	asrs	r5, r5, #2
 80083aa:	d03d      	beq.n	8008428 <__pow5mult+0xa0>
 80083ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80083ae:	b97c      	cbnz	r4, 80083d0 <__pow5mult+0x48>
 80083b0:	2010      	movs	r0, #16
 80083b2:	f7ff fdb5 	bl	8007f20 <malloc>
 80083b6:	4602      	mov	r2, r0
 80083b8:	6270      	str	r0, [r6, #36]	; 0x24
 80083ba:	b928      	cbnz	r0, 80083c8 <__pow5mult+0x40>
 80083bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80083c0:	4b1c      	ldr	r3, [pc, #112]	; (8008434 <__pow5mult+0xac>)
 80083c2:	481d      	ldr	r0, [pc, #116]	; (8008438 <__pow5mult+0xb0>)
 80083c4:	f000 fd1e 	bl	8008e04 <__assert_func>
 80083c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083cc:	6004      	str	r4, [r0, #0]
 80083ce:	60c4      	str	r4, [r0, #12]
 80083d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80083d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083d8:	b94c      	cbnz	r4, 80083ee <__pow5mult+0x66>
 80083da:	f240 2171 	movw	r1, #625	; 0x271
 80083de:	4630      	mov	r0, r6
 80083e0:	f7ff ff14 	bl	800820c <__i2b>
 80083e4:	2300      	movs	r3, #0
 80083e6:	4604      	mov	r4, r0
 80083e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80083ec:	6003      	str	r3, [r0, #0]
 80083ee:	f04f 0900 	mov.w	r9, #0
 80083f2:	07eb      	lsls	r3, r5, #31
 80083f4:	d50a      	bpl.n	800840c <__pow5mult+0x84>
 80083f6:	4639      	mov	r1, r7
 80083f8:	4622      	mov	r2, r4
 80083fa:	4630      	mov	r0, r6
 80083fc:	f7ff ff1c 	bl	8008238 <__multiply>
 8008400:	4680      	mov	r8, r0
 8008402:	4639      	mov	r1, r7
 8008404:	4630      	mov	r0, r6
 8008406:	f7ff fe01 	bl	800800c <_Bfree>
 800840a:	4647      	mov	r7, r8
 800840c:	106d      	asrs	r5, r5, #1
 800840e:	d00b      	beq.n	8008428 <__pow5mult+0xa0>
 8008410:	6820      	ldr	r0, [r4, #0]
 8008412:	b938      	cbnz	r0, 8008424 <__pow5mult+0x9c>
 8008414:	4622      	mov	r2, r4
 8008416:	4621      	mov	r1, r4
 8008418:	4630      	mov	r0, r6
 800841a:	f7ff ff0d 	bl	8008238 <__multiply>
 800841e:	6020      	str	r0, [r4, #0]
 8008420:	f8c0 9000 	str.w	r9, [r0]
 8008424:	4604      	mov	r4, r0
 8008426:	e7e4      	b.n	80083f2 <__pow5mult+0x6a>
 8008428:	4638      	mov	r0, r7
 800842a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800842e:	bf00      	nop
 8008430:	0801b760 	.word	0x0801b760
 8008434:	0801b516 	.word	0x0801b516
 8008438:	0801b612 	.word	0x0801b612

0800843c <__lshift>:
 800843c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008440:	460c      	mov	r4, r1
 8008442:	4607      	mov	r7, r0
 8008444:	4691      	mov	r9, r2
 8008446:	6923      	ldr	r3, [r4, #16]
 8008448:	6849      	ldr	r1, [r1, #4]
 800844a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800844e:	68a3      	ldr	r3, [r4, #8]
 8008450:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008454:	f108 0601 	add.w	r6, r8, #1
 8008458:	42b3      	cmp	r3, r6
 800845a:	db0b      	blt.n	8008474 <__lshift+0x38>
 800845c:	4638      	mov	r0, r7
 800845e:	f7ff fd95 	bl	8007f8c <_Balloc>
 8008462:	4605      	mov	r5, r0
 8008464:	b948      	cbnz	r0, 800847a <__lshift+0x3e>
 8008466:	4602      	mov	r2, r0
 8008468:	f240 11d9 	movw	r1, #473	; 0x1d9
 800846c:	4b29      	ldr	r3, [pc, #164]	; (8008514 <__lshift+0xd8>)
 800846e:	482a      	ldr	r0, [pc, #168]	; (8008518 <__lshift+0xdc>)
 8008470:	f000 fcc8 	bl	8008e04 <__assert_func>
 8008474:	3101      	adds	r1, #1
 8008476:	005b      	lsls	r3, r3, #1
 8008478:	e7ee      	b.n	8008458 <__lshift+0x1c>
 800847a:	2300      	movs	r3, #0
 800847c:	f100 0114 	add.w	r1, r0, #20
 8008480:	f100 0210 	add.w	r2, r0, #16
 8008484:	4618      	mov	r0, r3
 8008486:	4553      	cmp	r3, sl
 8008488:	db37      	blt.n	80084fa <__lshift+0xbe>
 800848a:	6920      	ldr	r0, [r4, #16]
 800848c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008490:	f104 0314 	add.w	r3, r4, #20
 8008494:	f019 091f 	ands.w	r9, r9, #31
 8008498:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800849c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80084a0:	d02f      	beq.n	8008502 <__lshift+0xc6>
 80084a2:	468a      	mov	sl, r1
 80084a4:	f04f 0c00 	mov.w	ip, #0
 80084a8:	f1c9 0e20 	rsb	lr, r9, #32
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	fa02 f209 	lsl.w	r2, r2, r9
 80084b2:	ea42 020c 	orr.w	r2, r2, ip
 80084b6:	f84a 2b04 	str.w	r2, [sl], #4
 80084ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80084be:	4298      	cmp	r0, r3
 80084c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80084c4:	d8f2      	bhi.n	80084ac <__lshift+0x70>
 80084c6:	1b03      	subs	r3, r0, r4
 80084c8:	3b15      	subs	r3, #21
 80084ca:	f023 0303 	bic.w	r3, r3, #3
 80084ce:	3304      	adds	r3, #4
 80084d0:	f104 0215 	add.w	r2, r4, #21
 80084d4:	4290      	cmp	r0, r2
 80084d6:	bf38      	it	cc
 80084d8:	2304      	movcc	r3, #4
 80084da:	f841 c003 	str.w	ip, [r1, r3]
 80084de:	f1bc 0f00 	cmp.w	ip, #0
 80084e2:	d001      	beq.n	80084e8 <__lshift+0xac>
 80084e4:	f108 0602 	add.w	r6, r8, #2
 80084e8:	3e01      	subs	r6, #1
 80084ea:	4638      	mov	r0, r7
 80084ec:	4621      	mov	r1, r4
 80084ee:	612e      	str	r6, [r5, #16]
 80084f0:	f7ff fd8c 	bl	800800c <_Bfree>
 80084f4:	4628      	mov	r0, r5
 80084f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80084fe:	3301      	adds	r3, #1
 8008500:	e7c1      	b.n	8008486 <__lshift+0x4a>
 8008502:	3904      	subs	r1, #4
 8008504:	f853 2b04 	ldr.w	r2, [r3], #4
 8008508:	4298      	cmp	r0, r3
 800850a:	f841 2f04 	str.w	r2, [r1, #4]!
 800850e:	d8f9      	bhi.n	8008504 <__lshift+0xc8>
 8008510:	e7ea      	b.n	80084e8 <__lshift+0xac>
 8008512:	bf00      	nop
 8008514:	0801b588 	.word	0x0801b588
 8008518:	0801b612 	.word	0x0801b612

0800851c <__mcmp>:
 800851c:	4603      	mov	r3, r0
 800851e:	690a      	ldr	r2, [r1, #16]
 8008520:	6900      	ldr	r0, [r0, #16]
 8008522:	b530      	push	{r4, r5, lr}
 8008524:	1a80      	subs	r0, r0, r2
 8008526:	d10d      	bne.n	8008544 <__mcmp+0x28>
 8008528:	3314      	adds	r3, #20
 800852a:	3114      	adds	r1, #20
 800852c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008530:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008534:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008538:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800853c:	4295      	cmp	r5, r2
 800853e:	d002      	beq.n	8008546 <__mcmp+0x2a>
 8008540:	d304      	bcc.n	800854c <__mcmp+0x30>
 8008542:	2001      	movs	r0, #1
 8008544:	bd30      	pop	{r4, r5, pc}
 8008546:	42a3      	cmp	r3, r4
 8008548:	d3f4      	bcc.n	8008534 <__mcmp+0x18>
 800854a:	e7fb      	b.n	8008544 <__mcmp+0x28>
 800854c:	f04f 30ff 	mov.w	r0, #4294967295
 8008550:	e7f8      	b.n	8008544 <__mcmp+0x28>
	...

08008554 <__mdiff>:
 8008554:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008558:	460d      	mov	r5, r1
 800855a:	4607      	mov	r7, r0
 800855c:	4611      	mov	r1, r2
 800855e:	4628      	mov	r0, r5
 8008560:	4614      	mov	r4, r2
 8008562:	f7ff ffdb 	bl	800851c <__mcmp>
 8008566:	1e06      	subs	r6, r0, #0
 8008568:	d111      	bne.n	800858e <__mdiff+0x3a>
 800856a:	4631      	mov	r1, r6
 800856c:	4638      	mov	r0, r7
 800856e:	f7ff fd0d 	bl	8007f8c <_Balloc>
 8008572:	4602      	mov	r2, r0
 8008574:	b928      	cbnz	r0, 8008582 <__mdiff+0x2e>
 8008576:	f240 2132 	movw	r1, #562	; 0x232
 800857a:	4b3a      	ldr	r3, [pc, #232]	; (8008664 <__mdiff+0x110>)
 800857c:	483a      	ldr	r0, [pc, #232]	; (8008668 <__mdiff+0x114>)
 800857e:	f000 fc41 	bl	8008e04 <__assert_func>
 8008582:	2301      	movs	r3, #1
 8008584:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008588:	4610      	mov	r0, r2
 800858a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800858e:	bfa4      	itt	ge
 8008590:	4623      	movge	r3, r4
 8008592:	462c      	movge	r4, r5
 8008594:	4638      	mov	r0, r7
 8008596:	6861      	ldr	r1, [r4, #4]
 8008598:	bfa6      	itte	ge
 800859a:	461d      	movge	r5, r3
 800859c:	2600      	movge	r6, #0
 800859e:	2601      	movlt	r6, #1
 80085a0:	f7ff fcf4 	bl	8007f8c <_Balloc>
 80085a4:	4602      	mov	r2, r0
 80085a6:	b918      	cbnz	r0, 80085b0 <__mdiff+0x5c>
 80085a8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80085ac:	4b2d      	ldr	r3, [pc, #180]	; (8008664 <__mdiff+0x110>)
 80085ae:	e7e5      	b.n	800857c <__mdiff+0x28>
 80085b0:	f102 0814 	add.w	r8, r2, #20
 80085b4:	46c2      	mov	sl, r8
 80085b6:	f04f 0c00 	mov.w	ip, #0
 80085ba:	6927      	ldr	r7, [r4, #16]
 80085bc:	60c6      	str	r6, [r0, #12]
 80085be:	692e      	ldr	r6, [r5, #16]
 80085c0:	f104 0014 	add.w	r0, r4, #20
 80085c4:	f105 0914 	add.w	r9, r5, #20
 80085c8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80085cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80085d0:	3410      	adds	r4, #16
 80085d2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80085d6:	f859 3b04 	ldr.w	r3, [r9], #4
 80085da:	fa1f f18b 	uxth.w	r1, fp
 80085de:	448c      	add	ip, r1
 80085e0:	b299      	uxth	r1, r3
 80085e2:	0c1b      	lsrs	r3, r3, #16
 80085e4:	ebac 0101 	sub.w	r1, ip, r1
 80085e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80085ec:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80085f0:	b289      	uxth	r1, r1
 80085f2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80085f6:	454e      	cmp	r6, r9
 80085f8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80085fc:	f84a 3b04 	str.w	r3, [sl], #4
 8008600:	d8e7      	bhi.n	80085d2 <__mdiff+0x7e>
 8008602:	1b73      	subs	r3, r6, r5
 8008604:	3b15      	subs	r3, #21
 8008606:	f023 0303 	bic.w	r3, r3, #3
 800860a:	3515      	adds	r5, #21
 800860c:	3304      	adds	r3, #4
 800860e:	42ae      	cmp	r6, r5
 8008610:	bf38      	it	cc
 8008612:	2304      	movcc	r3, #4
 8008614:	4418      	add	r0, r3
 8008616:	4443      	add	r3, r8
 8008618:	461e      	mov	r6, r3
 800861a:	4605      	mov	r5, r0
 800861c:	4575      	cmp	r5, lr
 800861e:	d30e      	bcc.n	800863e <__mdiff+0xea>
 8008620:	f10e 0103 	add.w	r1, lr, #3
 8008624:	1a09      	subs	r1, r1, r0
 8008626:	f021 0103 	bic.w	r1, r1, #3
 800862a:	3803      	subs	r0, #3
 800862c:	4586      	cmp	lr, r0
 800862e:	bf38      	it	cc
 8008630:	2100      	movcc	r1, #0
 8008632:	4419      	add	r1, r3
 8008634:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008638:	b18b      	cbz	r3, 800865e <__mdiff+0x10a>
 800863a:	6117      	str	r7, [r2, #16]
 800863c:	e7a4      	b.n	8008588 <__mdiff+0x34>
 800863e:	f855 8b04 	ldr.w	r8, [r5], #4
 8008642:	fa1f f188 	uxth.w	r1, r8
 8008646:	4461      	add	r1, ip
 8008648:	140c      	asrs	r4, r1, #16
 800864a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800864e:	b289      	uxth	r1, r1
 8008650:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008654:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008658:	f846 1b04 	str.w	r1, [r6], #4
 800865c:	e7de      	b.n	800861c <__mdiff+0xc8>
 800865e:	3f01      	subs	r7, #1
 8008660:	e7e8      	b.n	8008634 <__mdiff+0xe0>
 8008662:	bf00      	nop
 8008664:	0801b588 	.word	0x0801b588
 8008668:	0801b612 	.word	0x0801b612

0800866c <__ulp>:
 800866c:	4b11      	ldr	r3, [pc, #68]	; (80086b4 <__ulp+0x48>)
 800866e:	400b      	ands	r3, r1
 8008670:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008674:	2b00      	cmp	r3, #0
 8008676:	dd02      	ble.n	800867e <__ulp+0x12>
 8008678:	2000      	movs	r0, #0
 800867a:	4619      	mov	r1, r3
 800867c:	4770      	bx	lr
 800867e:	425b      	negs	r3, r3
 8008680:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008684:	f04f 0000 	mov.w	r0, #0
 8008688:	f04f 0100 	mov.w	r1, #0
 800868c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008690:	da04      	bge.n	800869c <__ulp+0x30>
 8008692:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008696:	fa43 f102 	asr.w	r1, r3, r2
 800869a:	4770      	bx	lr
 800869c:	f1a2 0314 	sub.w	r3, r2, #20
 80086a0:	2b1e      	cmp	r3, #30
 80086a2:	bfd6      	itet	le
 80086a4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80086a8:	2301      	movgt	r3, #1
 80086aa:	fa22 f303 	lsrle.w	r3, r2, r3
 80086ae:	4618      	mov	r0, r3
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	7ff00000 	.word	0x7ff00000

080086b8 <__b2d>:
 80086b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086bc:	6907      	ldr	r7, [r0, #16]
 80086be:	f100 0914 	add.w	r9, r0, #20
 80086c2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80086c6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80086ca:	f1a7 0804 	sub.w	r8, r7, #4
 80086ce:	4630      	mov	r0, r6
 80086d0:	f7ff fd4e 	bl	8008170 <__hi0bits>
 80086d4:	f1c0 0320 	rsb	r3, r0, #32
 80086d8:	280a      	cmp	r0, #10
 80086da:	600b      	str	r3, [r1, #0]
 80086dc:	491f      	ldr	r1, [pc, #124]	; (800875c <__b2d+0xa4>)
 80086de:	dc17      	bgt.n	8008710 <__b2d+0x58>
 80086e0:	45c1      	cmp	r9, r8
 80086e2:	bf28      	it	cs
 80086e4:	2200      	movcs	r2, #0
 80086e6:	f1c0 0c0b 	rsb	ip, r0, #11
 80086ea:	fa26 f30c 	lsr.w	r3, r6, ip
 80086ee:	bf38      	it	cc
 80086f0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80086f4:	ea43 0501 	orr.w	r5, r3, r1
 80086f8:	f100 0315 	add.w	r3, r0, #21
 80086fc:	fa06 f303 	lsl.w	r3, r6, r3
 8008700:	fa22 f20c 	lsr.w	r2, r2, ip
 8008704:	ea43 0402 	orr.w	r4, r3, r2
 8008708:	4620      	mov	r0, r4
 800870a:	4629      	mov	r1, r5
 800870c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008710:	45c1      	cmp	r9, r8
 8008712:	bf2e      	itee	cs
 8008714:	2200      	movcs	r2, #0
 8008716:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800871a:	f1a7 0808 	subcc.w	r8, r7, #8
 800871e:	f1b0 030b 	subs.w	r3, r0, #11
 8008722:	d016      	beq.n	8008752 <__b2d+0x9a>
 8008724:	f1c3 0720 	rsb	r7, r3, #32
 8008728:	fa22 f107 	lsr.w	r1, r2, r7
 800872c:	45c8      	cmp	r8, r9
 800872e:	fa06 f603 	lsl.w	r6, r6, r3
 8008732:	ea46 0601 	orr.w	r6, r6, r1
 8008736:	bf94      	ite	ls
 8008738:	2100      	movls	r1, #0
 800873a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800873e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008742:	fa02 f003 	lsl.w	r0, r2, r3
 8008746:	40f9      	lsrs	r1, r7
 8008748:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800874c:	ea40 0401 	orr.w	r4, r0, r1
 8008750:	e7da      	b.n	8008708 <__b2d+0x50>
 8008752:	4614      	mov	r4, r2
 8008754:	ea46 0501 	orr.w	r5, r6, r1
 8008758:	e7d6      	b.n	8008708 <__b2d+0x50>
 800875a:	bf00      	nop
 800875c:	3ff00000 	.word	0x3ff00000

08008760 <__d2b>:
 8008760:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008764:	2101      	movs	r1, #1
 8008766:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800876a:	4690      	mov	r8, r2
 800876c:	461d      	mov	r5, r3
 800876e:	f7ff fc0d 	bl	8007f8c <_Balloc>
 8008772:	4604      	mov	r4, r0
 8008774:	b930      	cbnz	r0, 8008784 <__d2b+0x24>
 8008776:	4602      	mov	r2, r0
 8008778:	f240 310a 	movw	r1, #778	; 0x30a
 800877c:	4b24      	ldr	r3, [pc, #144]	; (8008810 <__d2b+0xb0>)
 800877e:	4825      	ldr	r0, [pc, #148]	; (8008814 <__d2b+0xb4>)
 8008780:	f000 fb40 	bl	8008e04 <__assert_func>
 8008784:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008788:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800878c:	bb2d      	cbnz	r5, 80087da <__d2b+0x7a>
 800878e:	9301      	str	r3, [sp, #4]
 8008790:	f1b8 0300 	subs.w	r3, r8, #0
 8008794:	d026      	beq.n	80087e4 <__d2b+0x84>
 8008796:	4668      	mov	r0, sp
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	f7ff fd09 	bl	80081b0 <__lo0bits>
 800879e:	9900      	ldr	r1, [sp, #0]
 80087a0:	b1f0      	cbz	r0, 80087e0 <__d2b+0x80>
 80087a2:	9a01      	ldr	r2, [sp, #4]
 80087a4:	f1c0 0320 	rsb	r3, r0, #32
 80087a8:	fa02 f303 	lsl.w	r3, r2, r3
 80087ac:	430b      	orrs	r3, r1
 80087ae:	40c2      	lsrs	r2, r0
 80087b0:	6163      	str	r3, [r4, #20]
 80087b2:	9201      	str	r2, [sp, #4]
 80087b4:	9b01      	ldr	r3, [sp, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	bf14      	ite	ne
 80087ba:	2102      	movne	r1, #2
 80087bc:	2101      	moveq	r1, #1
 80087be:	61a3      	str	r3, [r4, #24]
 80087c0:	6121      	str	r1, [r4, #16]
 80087c2:	b1c5      	cbz	r5, 80087f6 <__d2b+0x96>
 80087c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80087c8:	4405      	add	r5, r0
 80087ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80087ce:	603d      	str	r5, [r7, #0]
 80087d0:	6030      	str	r0, [r6, #0]
 80087d2:	4620      	mov	r0, r4
 80087d4:	b002      	add	sp, #8
 80087d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087de:	e7d6      	b.n	800878e <__d2b+0x2e>
 80087e0:	6161      	str	r1, [r4, #20]
 80087e2:	e7e7      	b.n	80087b4 <__d2b+0x54>
 80087e4:	a801      	add	r0, sp, #4
 80087e6:	f7ff fce3 	bl	80081b0 <__lo0bits>
 80087ea:	2101      	movs	r1, #1
 80087ec:	9b01      	ldr	r3, [sp, #4]
 80087ee:	6121      	str	r1, [r4, #16]
 80087f0:	6163      	str	r3, [r4, #20]
 80087f2:	3020      	adds	r0, #32
 80087f4:	e7e5      	b.n	80087c2 <__d2b+0x62>
 80087f6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80087fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80087fe:	6038      	str	r0, [r7, #0]
 8008800:	6918      	ldr	r0, [r3, #16]
 8008802:	f7ff fcb5 	bl	8008170 <__hi0bits>
 8008806:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800880a:	6031      	str	r1, [r6, #0]
 800880c:	e7e1      	b.n	80087d2 <__d2b+0x72>
 800880e:	bf00      	nop
 8008810:	0801b588 	.word	0x0801b588
 8008814:	0801b612 	.word	0x0801b612

08008818 <__ratio>:
 8008818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800881c:	4688      	mov	r8, r1
 800881e:	4669      	mov	r1, sp
 8008820:	4681      	mov	r9, r0
 8008822:	f7ff ff49 	bl	80086b8 <__b2d>
 8008826:	460f      	mov	r7, r1
 8008828:	4604      	mov	r4, r0
 800882a:	460d      	mov	r5, r1
 800882c:	4640      	mov	r0, r8
 800882e:	a901      	add	r1, sp, #4
 8008830:	f7ff ff42 	bl	80086b8 <__b2d>
 8008834:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008838:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800883c:	468b      	mov	fp, r1
 800883e:	eba3 0c02 	sub.w	ip, r3, r2
 8008842:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008846:	1a9b      	subs	r3, r3, r2
 8008848:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800884c:	2b00      	cmp	r3, #0
 800884e:	bfd5      	itete	le
 8008850:	460a      	movle	r2, r1
 8008852:	462a      	movgt	r2, r5
 8008854:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008858:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800885c:	bfd8      	it	le
 800885e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008862:	465b      	mov	r3, fp
 8008864:	4602      	mov	r2, r0
 8008866:	4639      	mov	r1, r7
 8008868:	4620      	mov	r0, r4
 800886a:	f7f9 fe69 	bl	8002540 <__aeabi_ddiv>
 800886e:	b003      	add	sp, #12
 8008870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008874 <__copybits>:
 8008874:	3901      	subs	r1, #1
 8008876:	b570      	push	{r4, r5, r6, lr}
 8008878:	1149      	asrs	r1, r1, #5
 800887a:	6914      	ldr	r4, [r2, #16]
 800887c:	3101      	adds	r1, #1
 800887e:	f102 0314 	add.w	r3, r2, #20
 8008882:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008886:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800888a:	1f05      	subs	r5, r0, #4
 800888c:	42a3      	cmp	r3, r4
 800888e:	d30c      	bcc.n	80088aa <__copybits+0x36>
 8008890:	1aa3      	subs	r3, r4, r2
 8008892:	3b11      	subs	r3, #17
 8008894:	f023 0303 	bic.w	r3, r3, #3
 8008898:	3211      	adds	r2, #17
 800889a:	42a2      	cmp	r2, r4
 800889c:	bf88      	it	hi
 800889e:	2300      	movhi	r3, #0
 80088a0:	4418      	add	r0, r3
 80088a2:	2300      	movs	r3, #0
 80088a4:	4288      	cmp	r0, r1
 80088a6:	d305      	bcc.n	80088b4 <__copybits+0x40>
 80088a8:	bd70      	pop	{r4, r5, r6, pc}
 80088aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80088ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80088b2:	e7eb      	b.n	800888c <__copybits+0x18>
 80088b4:	f840 3b04 	str.w	r3, [r0], #4
 80088b8:	e7f4      	b.n	80088a4 <__copybits+0x30>

080088ba <__any_on>:
 80088ba:	f100 0214 	add.w	r2, r0, #20
 80088be:	6900      	ldr	r0, [r0, #16]
 80088c0:	114b      	asrs	r3, r1, #5
 80088c2:	4298      	cmp	r0, r3
 80088c4:	b510      	push	{r4, lr}
 80088c6:	db11      	blt.n	80088ec <__any_on+0x32>
 80088c8:	dd0a      	ble.n	80088e0 <__any_on+0x26>
 80088ca:	f011 011f 	ands.w	r1, r1, #31
 80088ce:	d007      	beq.n	80088e0 <__any_on+0x26>
 80088d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80088d4:	fa24 f001 	lsr.w	r0, r4, r1
 80088d8:	fa00 f101 	lsl.w	r1, r0, r1
 80088dc:	428c      	cmp	r4, r1
 80088de:	d10b      	bne.n	80088f8 <__any_on+0x3e>
 80088e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d803      	bhi.n	80088f0 <__any_on+0x36>
 80088e8:	2000      	movs	r0, #0
 80088ea:	bd10      	pop	{r4, pc}
 80088ec:	4603      	mov	r3, r0
 80088ee:	e7f7      	b.n	80088e0 <__any_on+0x26>
 80088f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80088f4:	2900      	cmp	r1, #0
 80088f6:	d0f5      	beq.n	80088e4 <__any_on+0x2a>
 80088f8:	2001      	movs	r0, #1
 80088fa:	e7f6      	b.n	80088ea <__any_on+0x30>

080088fc <_calloc_r>:
 80088fc:	b570      	push	{r4, r5, r6, lr}
 80088fe:	fba1 5402 	umull	r5, r4, r1, r2
 8008902:	b934      	cbnz	r4, 8008912 <_calloc_r+0x16>
 8008904:	4629      	mov	r1, r5
 8008906:	f000 f875 	bl	80089f4 <_malloc_r>
 800890a:	4606      	mov	r6, r0
 800890c:	b928      	cbnz	r0, 800891a <_calloc_r+0x1e>
 800890e:	4630      	mov	r0, r6
 8008910:	bd70      	pop	{r4, r5, r6, pc}
 8008912:	220c      	movs	r2, #12
 8008914:	2600      	movs	r6, #0
 8008916:	6002      	str	r2, [r0, #0]
 8008918:	e7f9      	b.n	800890e <_calloc_r+0x12>
 800891a:	462a      	mov	r2, r5
 800891c:	4621      	mov	r1, r4
 800891e:	f7fc fbe7 	bl	80050f0 <memset>
 8008922:	e7f4      	b.n	800890e <_calloc_r+0x12>

08008924 <_free_r>:
 8008924:	b538      	push	{r3, r4, r5, lr}
 8008926:	4605      	mov	r5, r0
 8008928:	2900      	cmp	r1, #0
 800892a:	d040      	beq.n	80089ae <_free_r+0x8a>
 800892c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008930:	1f0c      	subs	r4, r1, #4
 8008932:	2b00      	cmp	r3, #0
 8008934:	bfb8      	it	lt
 8008936:	18e4      	addlt	r4, r4, r3
 8008938:	f000 faae 	bl	8008e98 <__malloc_lock>
 800893c:	4a1c      	ldr	r2, [pc, #112]	; (80089b0 <_free_r+0x8c>)
 800893e:	6813      	ldr	r3, [r2, #0]
 8008940:	b933      	cbnz	r3, 8008950 <_free_r+0x2c>
 8008942:	6063      	str	r3, [r4, #4]
 8008944:	6014      	str	r4, [r2, #0]
 8008946:	4628      	mov	r0, r5
 8008948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800894c:	f000 baaa 	b.w	8008ea4 <__malloc_unlock>
 8008950:	42a3      	cmp	r3, r4
 8008952:	d908      	bls.n	8008966 <_free_r+0x42>
 8008954:	6820      	ldr	r0, [r4, #0]
 8008956:	1821      	adds	r1, r4, r0
 8008958:	428b      	cmp	r3, r1
 800895a:	bf01      	itttt	eq
 800895c:	6819      	ldreq	r1, [r3, #0]
 800895e:	685b      	ldreq	r3, [r3, #4]
 8008960:	1809      	addeq	r1, r1, r0
 8008962:	6021      	streq	r1, [r4, #0]
 8008964:	e7ed      	b.n	8008942 <_free_r+0x1e>
 8008966:	461a      	mov	r2, r3
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	b10b      	cbz	r3, 8008970 <_free_r+0x4c>
 800896c:	42a3      	cmp	r3, r4
 800896e:	d9fa      	bls.n	8008966 <_free_r+0x42>
 8008970:	6811      	ldr	r1, [r2, #0]
 8008972:	1850      	adds	r0, r2, r1
 8008974:	42a0      	cmp	r0, r4
 8008976:	d10b      	bne.n	8008990 <_free_r+0x6c>
 8008978:	6820      	ldr	r0, [r4, #0]
 800897a:	4401      	add	r1, r0
 800897c:	1850      	adds	r0, r2, r1
 800897e:	4283      	cmp	r3, r0
 8008980:	6011      	str	r1, [r2, #0]
 8008982:	d1e0      	bne.n	8008946 <_free_r+0x22>
 8008984:	6818      	ldr	r0, [r3, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	4401      	add	r1, r0
 800898a:	6011      	str	r1, [r2, #0]
 800898c:	6053      	str	r3, [r2, #4]
 800898e:	e7da      	b.n	8008946 <_free_r+0x22>
 8008990:	d902      	bls.n	8008998 <_free_r+0x74>
 8008992:	230c      	movs	r3, #12
 8008994:	602b      	str	r3, [r5, #0]
 8008996:	e7d6      	b.n	8008946 <_free_r+0x22>
 8008998:	6820      	ldr	r0, [r4, #0]
 800899a:	1821      	adds	r1, r4, r0
 800899c:	428b      	cmp	r3, r1
 800899e:	bf01      	itttt	eq
 80089a0:	6819      	ldreq	r1, [r3, #0]
 80089a2:	685b      	ldreq	r3, [r3, #4]
 80089a4:	1809      	addeq	r1, r1, r0
 80089a6:	6021      	streq	r1, [r4, #0]
 80089a8:	6063      	str	r3, [r4, #4]
 80089aa:	6054      	str	r4, [r2, #4]
 80089ac:	e7cb      	b.n	8008946 <_free_r+0x22>
 80089ae:	bd38      	pop	{r3, r4, r5, pc}
 80089b0:	2000081c 	.word	0x2000081c

080089b4 <sbrk_aligned>:
 80089b4:	b570      	push	{r4, r5, r6, lr}
 80089b6:	4e0e      	ldr	r6, [pc, #56]	; (80089f0 <sbrk_aligned+0x3c>)
 80089b8:	460c      	mov	r4, r1
 80089ba:	6831      	ldr	r1, [r6, #0]
 80089bc:	4605      	mov	r5, r0
 80089be:	b911      	cbnz	r1, 80089c6 <sbrk_aligned+0x12>
 80089c0:	f000 f9ee 	bl	8008da0 <_sbrk_r>
 80089c4:	6030      	str	r0, [r6, #0]
 80089c6:	4621      	mov	r1, r4
 80089c8:	4628      	mov	r0, r5
 80089ca:	f000 f9e9 	bl	8008da0 <_sbrk_r>
 80089ce:	1c43      	adds	r3, r0, #1
 80089d0:	d00a      	beq.n	80089e8 <sbrk_aligned+0x34>
 80089d2:	1cc4      	adds	r4, r0, #3
 80089d4:	f024 0403 	bic.w	r4, r4, #3
 80089d8:	42a0      	cmp	r0, r4
 80089da:	d007      	beq.n	80089ec <sbrk_aligned+0x38>
 80089dc:	1a21      	subs	r1, r4, r0
 80089de:	4628      	mov	r0, r5
 80089e0:	f000 f9de 	bl	8008da0 <_sbrk_r>
 80089e4:	3001      	adds	r0, #1
 80089e6:	d101      	bne.n	80089ec <sbrk_aligned+0x38>
 80089e8:	f04f 34ff 	mov.w	r4, #4294967295
 80089ec:	4620      	mov	r0, r4
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	20000820 	.word	0x20000820

080089f4 <_malloc_r>:
 80089f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f8:	1ccd      	adds	r5, r1, #3
 80089fa:	f025 0503 	bic.w	r5, r5, #3
 80089fe:	3508      	adds	r5, #8
 8008a00:	2d0c      	cmp	r5, #12
 8008a02:	bf38      	it	cc
 8008a04:	250c      	movcc	r5, #12
 8008a06:	2d00      	cmp	r5, #0
 8008a08:	4607      	mov	r7, r0
 8008a0a:	db01      	blt.n	8008a10 <_malloc_r+0x1c>
 8008a0c:	42a9      	cmp	r1, r5
 8008a0e:	d905      	bls.n	8008a1c <_malloc_r+0x28>
 8008a10:	230c      	movs	r3, #12
 8008a12:	2600      	movs	r6, #0
 8008a14:	603b      	str	r3, [r7, #0]
 8008a16:	4630      	mov	r0, r6
 8008a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a1c:	4e2e      	ldr	r6, [pc, #184]	; (8008ad8 <_malloc_r+0xe4>)
 8008a1e:	f000 fa3b 	bl	8008e98 <__malloc_lock>
 8008a22:	6833      	ldr	r3, [r6, #0]
 8008a24:	461c      	mov	r4, r3
 8008a26:	bb34      	cbnz	r4, 8008a76 <_malloc_r+0x82>
 8008a28:	4629      	mov	r1, r5
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	f7ff ffc2 	bl	80089b4 <sbrk_aligned>
 8008a30:	1c43      	adds	r3, r0, #1
 8008a32:	4604      	mov	r4, r0
 8008a34:	d14d      	bne.n	8008ad2 <_malloc_r+0xde>
 8008a36:	6834      	ldr	r4, [r6, #0]
 8008a38:	4626      	mov	r6, r4
 8008a3a:	2e00      	cmp	r6, #0
 8008a3c:	d140      	bne.n	8008ac0 <_malloc_r+0xcc>
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	4631      	mov	r1, r6
 8008a42:	4638      	mov	r0, r7
 8008a44:	eb04 0803 	add.w	r8, r4, r3
 8008a48:	f000 f9aa 	bl	8008da0 <_sbrk_r>
 8008a4c:	4580      	cmp	r8, r0
 8008a4e:	d13a      	bne.n	8008ac6 <_malloc_r+0xd2>
 8008a50:	6821      	ldr	r1, [r4, #0]
 8008a52:	3503      	adds	r5, #3
 8008a54:	1a6d      	subs	r5, r5, r1
 8008a56:	f025 0503 	bic.w	r5, r5, #3
 8008a5a:	3508      	adds	r5, #8
 8008a5c:	2d0c      	cmp	r5, #12
 8008a5e:	bf38      	it	cc
 8008a60:	250c      	movcc	r5, #12
 8008a62:	4638      	mov	r0, r7
 8008a64:	4629      	mov	r1, r5
 8008a66:	f7ff ffa5 	bl	80089b4 <sbrk_aligned>
 8008a6a:	3001      	adds	r0, #1
 8008a6c:	d02b      	beq.n	8008ac6 <_malloc_r+0xd2>
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	442b      	add	r3, r5
 8008a72:	6023      	str	r3, [r4, #0]
 8008a74:	e00e      	b.n	8008a94 <_malloc_r+0xa0>
 8008a76:	6822      	ldr	r2, [r4, #0]
 8008a78:	1b52      	subs	r2, r2, r5
 8008a7a:	d41e      	bmi.n	8008aba <_malloc_r+0xc6>
 8008a7c:	2a0b      	cmp	r2, #11
 8008a7e:	d916      	bls.n	8008aae <_malloc_r+0xba>
 8008a80:	1961      	adds	r1, r4, r5
 8008a82:	42a3      	cmp	r3, r4
 8008a84:	6025      	str	r5, [r4, #0]
 8008a86:	bf18      	it	ne
 8008a88:	6059      	strne	r1, [r3, #4]
 8008a8a:	6863      	ldr	r3, [r4, #4]
 8008a8c:	bf08      	it	eq
 8008a8e:	6031      	streq	r1, [r6, #0]
 8008a90:	5162      	str	r2, [r4, r5]
 8008a92:	604b      	str	r3, [r1, #4]
 8008a94:	4638      	mov	r0, r7
 8008a96:	f104 060b 	add.w	r6, r4, #11
 8008a9a:	f000 fa03 	bl	8008ea4 <__malloc_unlock>
 8008a9e:	f026 0607 	bic.w	r6, r6, #7
 8008aa2:	1d23      	adds	r3, r4, #4
 8008aa4:	1af2      	subs	r2, r6, r3
 8008aa6:	d0b6      	beq.n	8008a16 <_malloc_r+0x22>
 8008aa8:	1b9b      	subs	r3, r3, r6
 8008aaa:	50a3      	str	r3, [r4, r2]
 8008aac:	e7b3      	b.n	8008a16 <_malloc_r+0x22>
 8008aae:	6862      	ldr	r2, [r4, #4]
 8008ab0:	42a3      	cmp	r3, r4
 8008ab2:	bf0c      	ite	eq
 8008ab4:	6032      	streq	r2, [r6, #0]
 8008ab6:	605a      	strne	r2, [r3, #4]
 8008ab8:	e7ec      	b.n	8008a94 <_malloc_r+0xa0>
 8008aba:	4623      	mov	r3, r4
 8008abc:	6864      	ldr	r4, [r4, #4]
 8008abe:	e7b2      	b.n	8008a26 <_malloc_r+0x32>
 8008ac0:	4634      	mov	r4, r6
 8008ac2:	6876      	ldr	r6, [r6, #4]
 8008ac4:	e7b9      	b.n	8008a3a <_malloc_r+0x46>
 8008ac6:	230c      	movs	r3, #12
 8008ac8:	4638      	mov	r0, r7
 8008aca:	603b      	str	r3, [r7, #0]
 8008acc:	f000 f9ea 	bl	8008ea4 <__malloc_unlock>
 8008ad0:	e7a1      	b.n	8008a16 <_malloc_r+0x22>
 8008ad2:	6025      	str	r5, [r4, #0]
 8008ad4:	e7de      	b.n	8008a94 <_malloc_r+0xa0>
 8008ad6:	bf00      	nop
 8008ad8:	2000081c 	.word	0x2000081c

08008adc <__ssputs_r>:
 8008adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae0:	688e      	ldr	r6, [r1, #8]
 8008ae2:	4682      	mov	sl, r0
 8008ae4:	429e      	cmp	r6, r3
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	4690      	mov	r8, r2
 8008aea:	461f      	mov	r7, r3
 8008aec:	d838      	bhi.n	8008b60 <__ssputs_r+0x84>
 8008aee:	898a      	ldrh	r2, [r1, #12]
 8008af0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008af4:	d032      	beq.n	8008b5c <__ssputs_r+0x80>
 8008af6:	6825      	ldr	r5, [r4, #0]
 8008af8:	6909      	ldr	r1, [r1, #16]
 8008afa:	3301      	adds	r3, #1
 8008afc:	eba5 0901 	sub.w	r9, r5, r1
 8008b00:	6965      	ldr	r5, [r4, #20]
 8008b02:	444b      	add	r3, r9
 8008b04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b0c:	106d      	asrs	r5, r5, #1
 8008b0e:	429d      	cmp	r5, r3
 8008b10:	bf38      	it	cc
 8008b12:	461d      	movcc	r5, r3
 8008b14:	0553      	lsls	r3, r2, #21
 8008b16:	d531      	bpl.n	8008b7c <__ssputs_r+0xa0>
 8008b18:	4629      	mov	r1, r5
 8008b1a:	f7ff ff6b 	bl	80089f4 <_malloc_r>
 8008b1e:	4606      	mov	r6, r0
 8008b20:	b950      	cbnz	r0, 8008b38 <__ssputs_r+0x5c>
 8008b22:	230c      	movs	r3, #12
 8008b24:	f04f 30ff 	mov.w	r0, #4294967295
 8008b28:	f8ca 3000 	str.w	r3, [sl]
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b32:	81a3      	strh	r3, [r4, #12]
 8008b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b38:	464a      	mov	r2, r9
 8008b3a:	6921      	ldr	r1, [r4, #16]
 8008b3c:	f7ff fa18 	bl	8007f70 <memcpy>
 8008b40:	89a3      	ldrh	r3, [r4, #12]
 8008b42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b4a:	81a3      	strh	r3, [r4, #12]
 8008b4c:	6126      	str	r6, [r4, #16]
 8008b4e:	444e      	add	r6, r9
 8008b50:	6026      	str	r6, [r4, #0]
 8008b52:	463e      	mov	r6, r7
 8008b54:	6165      	str	r5, [r4, #20]
 8008b56:	eba5 0509 	sub.w	r5, r5, r9
 8008b5a:	60a5      	str	r5, [r4, #8]
 8008b5c:	42be      	cmp	r6, r7
 8008b5e:	d900      	bls.n	8008b62 <__ssputs_r+0x86>
 8008b60:	463e      	mov	r6, r7
 8008b62:	4632      	mov	r2, r6
 8008b64:	4641      	mov	r1, r8
 8008b66:	6820      	ldr	r0, [r4, #0]
 8008b68:	f000 f97c 	bl	8008e64 <memmove>
 8008b6c:	68a3      	ldr	r3, [r4, #8]
 8008b6e:	2000      	movs	r0, #0
 8008b70:	1b9b      	subs	r3, r3, r6
 8008b72:	60a3      	str	r3, [r4, #8]
 8008b74:	6823      	ldr	r3, [r4, #0]
 8008b76:	4433      	add	r3, r6
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	e7db      	b.n	8008b34 <__ssputs_r+0x58>
 8008b7c:	462a      	mov	r2, r5
 8008b7e:	f000 f997 	bl	8008eb0 <_realloc_r>
 8008b82:	4606      	mov	r6, r0
 8008b84:	2800      	cmp	r0, #0
 8008b86:	d1e1      	bne.n	8008b4c <__ssputs_r+0x70>
 8008b88:	4650      	mov	r0, sl
 8008b8a:	6921      	ldr	r1, [r4, #16]
 8008b8c:	f7ff feca 	bl	8008924 <_free_r>
 8008b90:	e7c7      	b.n	8008b22 <__ssputs_r+0x46>
	...

08008b94 <_svfiprintf_r>:
 8008b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b98:	4698      	mov	r8, r3
 8008b9a:	898b      	ldrh	r3, [r1, #12]
 8008b9c:	4607      	mov	r7, r0
 8008b9e:	061b      	lsls	r3, r3, #24
 8008ba0:	460d      	mov	r5, r1
 8008ba2:	4614      	mov	r4, r2
 8008ba4:	b09d      	sub	sp, #116	; 0x74
 8008ba6:	d50e      	bpl.n	8008bc6 <_svfiprintf_r+0x32>
 8008ba8:	690b      	ldr	r3, [r1, #16]
 8008baa:	b963      	cbnz	r3, 8008bc6 <_svfiprintf_r+0x32>
 8008bac:	2140      	movs	r1, #64	; 0x40
 8008bae:	f7ff ff21 	bl	80089f4 <_malloc_r>
 8008bb2:	6028      	str	r0, [r5, #0]
 8008bb4:	6128      	str	r0, [r5, #16]
 8008bb6:	b920      	cbnz	r0, 8008bc2 <_svfiprintf_r+0x2e>
 8008bb8:	230c      	movs	r3, #12
 8008bba:	603b      	str	r3, [r7, #0]
 8008bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc0:	e0d1      	b.n	8008d66 <_svfiprintf_r+0x1d2>
 8008bc2:	2340      	movs	r3, #64	; 0x40
 8008bc4:	616b      	str	r3, [r5, #20]
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8008bca:	2320      	movs	r3, #32
 8008bcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bd0:	2330      	movs	r3, #48	; 0x30
 8008bd2:	f04f 0901 	mov.w	r9, #1
 8008bd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bda:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008d80 <_svfiprintf_r+0x1ec>
 8008bde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008be2:	4623      	mov	r3, r4
 8008be4:	469a      	mov	sl, r3
 8008be6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bea:	b10a      	cbz	r2, 8008bf0 <_svfiprintf_r+0x5c>
 8008bec:	2a25      	cmp	r2, #37	; 0x25
 8008bee:	d1f9      	bne.n	8008be4 <_svfiprintf_r+0x50>
 8008bf0:	ebba 0b04 	subs.w	fp, sl, r4
 8008bf4:	d00b      	beq.n	8008c0e <_svfiprintf_r+0x7a>
 8008bf6:	465b      	mov	r3, fp
 8008bf8:	4622      	mov	r2, r4
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	f7ff ff6d 	bl	8008adc <__ssputs_r>
 8008c02:	3001      	adds	r0, #1
 8008c04:	f000 80aa 	beq.w	8008d5c <_svfiprintf_r+0x1c8>
 8008c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c0a:	445a      	add	r2, fp
 8008c0c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f000 80a2 	beq.w	8008d5c <_svfiprintf_r+0x1c8>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c22:	f10a 0a01 	add.w	sl, sl, #1
 8008c26:	9304      	str	r3, [sp, #16]
 8008c28:	9307      	str	r3, [sp, #28]
 8008c2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c2e:	931a      	str	r3, [sp, #104]	; 0x68
 8008c30:	4654      	mov	r4, sl
 8008c32:	2205      	movs	r2, #5
 8008c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c38:	4851      	ldr	r0, [pc, #324]	; (8008d80 <_svfiprintf_r+0x1ec>)
 8008c3a:	f7ff f98b 	bl	8007f54 <memchr>
 8008c3e:	9a04      	ldr	r2, [sp, #16]
 8008c40:	b9d8      	cbnz	r0, 8008c7a <_svfiprintf_r+0xe6>
 8008c42:	06d0      	lsls	r0, r2, #27
 8008c44:	bf44      	itt	mi
 8008c46:	2320      	movmi	r3, #32
 8008c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c4c:	0711      	lsls	r1, r2, #28
 8008c4e:	bf44      	itt	mi
 8008c50:	232b      	movmi	r3, #43	; 0x2b
 8008c52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c56:	f89a 3000 	ldrb.w	r3, [sl]
 8008c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c5c:	d015      	beq.n	8008c8a <_svfiprintf_r+0xf6>
 8008c5e:	4654      	mov	r4, sl
 8008c60:	2000      	movs	r0, #0
 8008c62:	f04f 0c0a 	mov.w	ip, #10
 8008c66:	9a07      	ldr	r2, [sp, #28]
 8008c68:	4621      	mov	r1, r4
 8008c6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c6e:	3b30      	subs	r3, #48	; 0x30
 8008c70:	2b09      	cmp	r3, #9
 8008c72:	d94e      	bls.n	8008d12 <_svfiprintf_r+0x17e>
 8008c74:	b1b0      	cbz	r0, 8008ca4 <_svfiprintf_r+0x110>
 8008c76:	9207      	str	r2, [sp, #28]
 8008c78:	e014      	b.n	8008ca4 <_svfiprintf_r+0x110>
 8008c7a:	eba0 0308 	sub.w	r3, r0, r8
 8008c7e:	fa09 f303 	lsl.w	r3, r9, r3
 8008c82:	4313      	orrs	r3, r2
 8008c84:	46a2      	mov	sl, r4
 8008c86:	9304      	str	r3, [sp, #16]
 8008c88:	e7d2      	b.n	8008c30 <_svfiprintf_r+0x9c>
 8008c8a:	9b03      	ldr	r3, [sp, #12]
 8008c8c:	1d19      	adds	r1, r3, #4
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	9103      	str	r1, [sp, #12]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	bfbb      	ittet	lt
 8008c96:	425b      	neglt	r3, r3
 8008c98:	f042 0202 	orrlt.w	r2, r2, #2
 8008c9c:	9307      	strge	r3, [sp, #28]
 8008c9e:	9307      	strlt	r3, [sp, #28]
 8008ca0:	bfb8      	it	lt
 8008ca2:	9204      	strlt	r2, [sp, #16]
 8008ca4:	7823      	ldrb	r3, [r4, #0]
 8008ca6:	2b2e      	cmp	r3, #46	; 0x2e
 8008ca8:	d10c      	bne.n	8008cc4 <_svfiprintf_r+0x130>
 8008caa:	7863      	ldrb	r3, [r4, #1]
 8008cac:	2b2a      	cmp	r3, #42	; 0x2a
 8008cae:	d135      	bne.n	8008d1c <_svfiprintf_r+0x188>
 8008cb0:	9b03      	ldr	r3, [sp, #12]
 8008cb2:	3402      	adds	r4, #2
 8008cb4:	1d1a      	adds	r2, r3, #4
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	9203      	str	r2, [sp, #12]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	bfb8      	it	lt
 8008cbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cc2:	9305      	str	r3, [sp, #20]
 8008cc4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008d84 <_svfiprintf_r+0x1f0>
 8008cc8:	2203      	movs	r2, #3
 8008cca:	4650      	mov	r0, sl
 8008ccc:	7821      	ldrb	r1, [r4, #0]
 8008cce:	f7ff f941 	bl	8007f54 <memchr>
 8008cd2:	b140      	cbz	r0, 8008ce6 <_svfiprintf_r+0x152>
 8008cd4:	2340      	movs	r3, #64	; 0x40
 8008cd6:	eba0 000a 	sub.w	r0, r0, sl
 8008cda:	fa03 f000 	lsl.w	r0, r3, r0
 8008cde:	9b04      	ldr	r3, [sp, #16]
 8008ce0:	3401      	adds	r4, #1
 8008ce2:	4303      	orrs	r3, r0
 8008ce4:	9304      	str	r3, [sp, #16]
 8008ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cea:	2206      	movs	r2, #6
 8008cec:	4826      	ldr	r0, [pc, #152]	; (8008d88 <_svfiprintf_r+0x1f4>)
 8008cee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cf2:	f7ff f92f 	bl	8007f54 <memchr>
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	d038      	beq.n	8008d6c <_svfiprintf_r+0x1d8>
 8008cfa:	4b24      	ldr	r3, [pc, #144]	; (8008d8c <_svfiprintf_r+0x1f8>)
 8008cfc:	bb1b      	cbnz	r3, 8008d46 <_svfiprintf_r+0x1b2>
 8008cfe:	9b03      	ldr	r3, [sp, #12]
 8008d00:	3307      	adds	r3, #7
 8008d02:	f023 0307 	bic.w	r3, r3, #7
 8008d06:	3308      	adds	r3, #8
 8008d08:	9303      	str	r3, [sp, #12]
 8008d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d0c:	4433      	add	r3, r6
 8008d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d10:	e767      	b.n	8008be2 <_svfiprintf_r+0x4e>
 8008d12:	460c      	mov	r4, r1
 8008d14:	2001      	movs	r0, #1
 8008d16:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d1a:	e7a5      	b.n	8008c68 <_svfiprintf_r+0xd4>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f04f 0c0a 	mov.w	ip, #10
 8008d22:	4619      	mov	r1, r3
 8008d24:	3401      	adds	r4, #1
 8008d26:	9305      	str	r3, [sp, #20]
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d2e:	3a30      	subs	r2, #48	; 0x30
 8008d30:	2a09      	cmp	r2, #9
 8008d32:	d903      	bls.n	8008d3c <_svfiprintf_r+0x1a8>
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d0c5      	beq.n	8008cc4 <_svfiprintf_r+0x130>
 8008d38:	9105      	str	r1, [sp, #20]
 8008d3a:	e7c3      	b.n	8008cc4 <_svfiprintf_r+0x130>
 8008d3c:	4604      	mov	r4, r0
 8008d3e:	2301      	movs	r3, #1
 8008d40:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d44:	e7f0      	b.n	8008d28 <_svfiprintf_r+0x194>
 8008d46:	ab03      	add	r3, sp, #12
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	462a      	mov	r2, r5
 8008d4c:	4638      	mov	r0, r7
 8008d4e:	4b10      	ldr	r3, [pc, #64]	; (8008d90 <_svfiprintf_r+0x1fc>)
 8008d50:	a904      	add	r1, sp, #16
 8008d52:	f7fc fa73 	bl	800523c <_printf_float>
 8008d56:	1c42      	adds	r2, r0, #1
 8008d58:	4606      	mov	r6, r0
 8008d5a:	d1d6      	bne.n	8008d0a <_svfiprintf_r+0x176>
 8008d5c:	89ab      	ldrh	r3, [r5, #12]
 8008d5e:	065b      	lsls	r3, r3, #25
 8008d60:	f53f af2c 	bmi.w	8008bbc <_svfiprintf_r+0x28>
 8008d64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d66:	b01d      	add	sp, #116	; 0x74
 8008d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6c:	ab03      	add	r3, sp, #12
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	462a      	mov	r2, r5
 8008d72:	4638      	mov	r0, r7
 8008d74:	4b06      	ldr	r3, [pc, #24]	; (8008d90 <_svfiprintf_r+0x1fc>)
 8008d76:	a904      	add	r1, sp, #16
 8008d78:	f7fc fcfc 	bl	8005774 <_printf_i>
 8008d7c:	e7eb      	b.n	8008d56 <_svfiprintf_r+0x1c2>
 8008d7e:	bf00      	nop
 8008d80:	0801b76c 	.word	0x0801b76c
 8008d84:	0801b772 	.word	0x0801b772
 8008d88:	0801b776 	.word	0x0801b776
 8008d8c:	0800523d 	.word	0x0800523d
 8008d90:	08008add 	.word	0x08008add

08008d94 <nan>:
 8008d94:	2000      	movs	r0, #0
 8008d96:	4901      	ldr	r1, [pc, #4]	; (8008d9c <nan+0x8>)
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	7ff80000 	.word	0x7ff80000

08008da0 <_sbrk_r>:
 8008da0:	b538      	push	{r3, r4, r5, lr}
 8008da2:	2300      	movs	r3, #0
 8008da4:	4d05      	ldr	r5, [pc, #20]	; (8008dbc <_sbrk_r+0x1c>)
 8008da6:	4604      	mov	r4, r0
 8008da8:	4608      	mov	r0, r1
 8008daa:	602b      	str	r3, [r5, #0]
 8008dac:	f7f9 f8b5 	bl	8001f1a <_sbrk>
 8008db0:	1c43      	adds	r3, r0, #1
 8008db2:	d102      	bne.n	8008dba <_sbrk_r+0x1a>
 8008db4:	682b      	ldr	r3, [r5, #0]
 8008db6:	b103      	cbz	r3, 8008dba <_sbrk_r+0x1a>
 8008db8:	6023      	str	r3, [r4, #0]
 8008dba:	bd38      	pop	{r3, r4, r5, pc}
 8008dbc:	20000824 	.word	0x20000824

08008dc0 <strncmp>:
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	b510      	push	{r4, lr}
 8008dc4:	b172      	cbz	r2, 8008de4 <strncmp+0x24>
 8008dc6:	3901      	subs	r1, #1
 8008dc8:	1884      	adds	r4, r0, r2
 8008dca:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008dce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008dd2:	4290      	cmp	r0, r2
 8008dd4:	d101      	bne.n	8008dda <strncmp+0x1a>
 8008dd6:	42a3      	cmp	r3, r4
 8008dd8:	d101      	bne.n	8008dde <strncmp+0x1e>
 8008dda:	1a80      	subs	r0, r0, r2
 8008ddc:	bd10      	pop	{r4, pc}
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d1f3      	bne.n	8008dca <strncmp+0xa>
 8008de2:	e7fa      	b.n	8008dda <strncmp+0x1a>
 8008de4:	4610      	mov	r0, r2
 8008de6:	e7f9      	b.n	8008ddc <strncmp+0x1c>

08008de8 <__ascii_wctomb>:
 8008de8:	4603      	mov	r3, r0
 8008dea:	4608      	mov	r0, r1
 8008dec:	b141      	cbz	r1, 8008e00 <__ascii_wctomb+0x18>
 8008dee:	2aff      	cmp	r2, #255	; 0xff
 8008df0:	d904      	bls.n	8008dfc <__ascii_wctomb+0x14>
 8008df2:	228a      	movs	r2, #138	; 0x8a
 8008df4:	f04f 30ff 	mov.w	r0, #4294967295
 8008df8:	601a      	str	r2, [r3, #0]
 8008dfa:	4770      	bx	lr
 8008dfc:	2001      	movs	r0, #1
 8008dfe:	700a      	strb	r2, [r1, #0]
 8008e00:	4770      	bx	lr
	...

08008e04 <__assert_func>:
 8008e04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e06:	4614      	mov	r4, r2
 8008e08:	461a      	mov	r2, r3
 8008e0a:	4b09      	ldr	r3, [pc, #36]	; (8008e30 <__assert_func+0x2c>)
 8008e0c:	4605      	mov	r5, r0
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68d8      	ldr	r0, [r3, #12]
 8008e12:	b14c      	cbz	r4, 8008e28 <__assert_func+0x24>
 8008e14:	4b07      	ldr	r3, [pc, #28]	; (8008e34 <__assert_func+0x30>)
 8008e16:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e1a:	9100      	str	r1, [sp, #0]
 8008e1c:	462b      	mov	r3, r5
 8008e1e:	4906      	ldr	r1, [pc, #24]	; (8008e38 <__assert_func+0x34>)
 8008e20:	f000 f80e 	bl	8008e40 <fiprintf>
 8008e24:	f000 fa8a 	bl	800933c <abort>
 8008e28:	4b04      	ldr	r3, [pc, #16]	; (8008e3c <__assert_func+0x38>)
 8008e2a:	461c      	mov	r4, r3
 8008e2c:	e7f3      	b.n	8008e16 <__assert_func+0x12>
 8008e2e:	bf00      	nop
 8008e30:	20000010 	.word	0x20000010
 8008e34:	0801b77d 	.word	0x0801b77d
 8008e38:	0801b78a 	.word	0x0801b78a
 8008e3c:	0801b326 	.word	0x0801b326

08008e40 <fiprintf>:
 8008e40:	b40e      	push	{r1, r2, r3}
 8008e42:	b503      	push	{r0, r1, lr}
 8008e44:	4601      	mov	r1, r0
 8008e46:	ab03      	add	r3, sp, #12
 8008e48:	4805      	ldr	r0, [pc, #20]	; (8008e60 <fiprintf+0x20>)
 8008e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e4e:	6800      	ldr	r0, [r0, #0]
 8008e50:	9301      	str	r3, [sp, #4]
 8008e52:	f000 f883 	bl	8008f5c <_vfiprintf_r>
 8008e56:	b002      	add	sp, #8
 8008e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e5c:	b003      	add	sp, #12
 8008e5e:	4770      	bx	lr
 8008e60:	20000010 	.word	0x20000010

08008e64 <memmove>:
 8008e64:	4288      	cmp	r0, r1
 8008e66:	b510      	push	{r4, lr}
 8008e68:	eb01 0402 	add.w	r4, r1, r2
 8008e6c:	d902      	bls.n	8008e74 <memmove+0x10>
 8008e6e:	4284      	cmp	r4, r0
 8008e70:	4623      	mov	r3, r4
 8008e72:	d807      	bhi.n	8008e84 <memmove+0x20>
 8008e74:	1e43      	subs	r3, r0, #1
 8008e76:	42a1      	cmp	r1, r4
 8008e78:	d008      	beq.n	8008e8c <memmove+0x28>
 8008e7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e82:	e7f8      	b.n	8008e76 <memmove+0x12>
 8008e84:	4601      	mov	r1, r0
 8008e86:	4402      	add	r2, r0
 8008e88:	428a      	cmp	r2, r1
 8008e8a:	d100      	bne.n	8008e8e <memmove+0x2a>
 8008e8c:	bd10      	pop	{r4, pc}
 8008e8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e96:	e7f7      	b.n	8008e88 <memmove+0x24>

08008e98 <__malloc_lock>:
 8008e98:	4801      	ldr	r0, [pc, #4]	; (8008ea0 <__malloc_lock+0x8>)
 8008e9a:	f000 bc0b 	b.w	80096b4 <__retarget_lock_acquire_recursive>
 8008e9e:	bf00      	nop
 8008ea0:	20000828 	.word	0x20000828

08008ea4 <__malloc_unlock>:
 8008ea4:	4801      	ldr	r0, [pc, #4]	; (8008eac <__malloc_unlock+0x8>)
 8008ea6:	f000 bc06 	b.w	80096b6 <__retarget_lock_release_recursive>
 8008eaa:	bf00      	nop
 8008eac:	20000828 	.word	0x20000828

08008eb0 <_realloc_r>:
 8008eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb4:	4680      	mov	r8, r0
 8008eb6:	4614      	mov	r4, r2
 8008eb8:	460e      	mov	r6, r1
 8008eba:	b921      	cbnz	r1, 8008ec6 <_realloc_r+0x16>
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec2:	f7ff bd97 	b.w	80089f4 <_malloc_r>
 8008ec6:	b92a      	cbnz	r2, 8008ed4 <_realloc_r+0x24>
 8008ec8:	f7ff fd2c 	bl	8008924 <_free_r>
 8008ecc:	4625      	mov	r5, r4
 8008ece:	4628      	mov	r0, r5
 8008ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ed4:	f000 fc56 	bl	8009784 <_malloc_usable_size_r>
 8008ed8:	4284      	cmp	r4, r0
 8008eda:	4607      	mov	r7, r0
 8008edc:	d802      	bhi.n	8008ee4 <_realloc_r+0x34>
 8008ede:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ee2:	d812      	bhi.n	8008f0a <_realloc_r+0x5a>
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	4640      	mov	r0, r8
 8008ee8:	f7ff fd84 	bl	80089f4 <_malloc_r>
 8008eec:	4605      	mov	r5, r0
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d0ed      	beq.n	8008ece <_realloc_r+0x1e>
 8008ef2:	42bc      	cmp	r4, r7
 8008ef4:	4622      	mov	r2, r4
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	bf28      	it	cs
 8008efa:	463a      	movcs	r2, r7
 8008efc:	f7ff f838 	bl	8007f70 <memcpy>
 8008f00:	4631      	mov	r1, r6
 8008f02:	4640      	mov	r0, r8
 8008f04:	f7ff fd0e 	bl	8008924 <_free_r>
 8008f08:	e7e1      	b.n	8008ece <_realloc_r+0x1e>
 8008f0a:	4635      	mov	r5, r6
 8008f0c:	e7df      	b.n	8008ece <_realloc_r+0x1e>

08008f0e <__sfputc_r>:
 8008f0e:	6893      	ldr	r3, [r2, #8]
 8008f10:	b410      	push	{r4}
 8008f12:	3b01      	subs	r3, #1
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	6093      	str	r3, [r2, #8]
 8008f18:	da07      	bge.n	8008f2a <__sfputc_r+0x1c>
 8008f1a:	6994      	ldr	r4, [r2, #24]
 8008f1c:	42a3      	cmp	r3, r4
 8008f1e:	db01      	blt.n	8008f24 <__sfputc_r+0x16>
 8008f20:	290a      	cmp	r1, #10
 8008f22:	d102      	bne.n	8008f2a <__sfputc_r+0x1c>
 8008f24:	bc10      	pop	{r4}
 8008f26:	f000 b949 	b.w	80091bc <__swbuf_r>
 8008f2a:	6813      	ldr	r3, [r2, #0]
 8008f2c:	1c58      	adds	r0, r3, #1
 8008f2e:	6010      	str	r0, [r2, #0]
 8008f30:	7019      	strb	r1, [r3, #0]
 8008f32:	4608      	mov	r0, r1
 8008f34:	bc10      	pop	{r4}
 8008f36:	4770      	bx	lr

08008f38 <__sfputs_r>:
 8008f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	460f      	mov	r7, r1
 8008f3e:	4614      	mov	r4, r2
 8008f40:	18d5      	adds	r5, r2, r3
 8008f42:	42ac      	cmp	r4, r5
 8008f44:	d101      	bne.n	8008f4a <__sfputs_r+0x12>
 8008f46:	2000      	movs	r0, #0
 8008f48:	e007      	b.n	8008f5a <__sfputs_r+0x22>
 8008f4a:	463a      	mov	r2, r7
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f52:	f7ff ffdc 	bl	8008f0e <__sfputc_r>
 8008f56:	1c43      	adds	r3, r0, #1
 8008f58:	d1f3      	bne.n	8008f42 <__sfputs_r+0xa>
 8008f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f5c <_vfiprintf_r>:
 8008f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f60:	460d      	mov	r5, r1
 8008f62:	4614      	mov	r4, r2
 8008f64:	4698      	mov	r8, r3
 8008f66:	4606      	mov	r6, r0
 8008f68:	b09d      	sub	sp, #116	; 0x74
 8008f6a:	b118      	cbz	r0, 8008f74 <_vfiprintf_r+0x18>
 8008f6c:	6983      	ldr	r3, [r0, #24]
 8008f6e:	b90b      	cbnz	r3, 8008f74 <_vfiprintf_r+0x18>
 8008f70:	f000 fb02 	bl	8009578 <__sinit>
 8008f74:	4b89      	ldr	r3, [pc, #548]	; (800919c <_vfiprintf_r+0x240>)
 8008f76:	429d      	cmp	r5, r3
 8008f78:	d11b      	bne.n	8008fb2 <_vfiprintf_r+0x56>
 8008f7a:	6875      	ldr	r5, [r6, #4]
 8008f7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f7e:	07d9      	lsls	r1, r3, #31
 8008f80:	d405      	bmi.n	8008f8e <_vfiprintf_r+0x32>
 8008f82:	89ab      	ldrh	r3, [r5, #12]
 8008f84:	059a      	lsls	r2, r3, #22
 8008f86:	d402      	bmi.n	8008f8e <_vfiprintf_r+0x32>
 8008f88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f8a:	f000 fb93 	bl	80096b4 <__retarget_lock_acquire_recursive>
 8008f8e:	89ab      	ldrh	r3, [r5, #12]
 8008f90:	071b      	lsls	r3, r3, #28
 8008f92:	d501      	bpl.n	8008f98 <_vfiprintf_r+0x3c>
 8008f94:	692b      	ldr	r3, [r5, #16]
 8008f96:	b9eb      	cbnz	r3, 8008fd4 <_vfiprintf_r+0x78>
 8008f98:	4629      	mov	r1, r5
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	f000 f960 	bl	8009260 <__swsetup_r>
 8008fa0:	b1c0      	cbz	r0, 8008fd4 <_vfiprintf_r+0x78>
 8008fa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fa4:	07dc      	lsls	r4, r3, #31
 8008fa6:	d50e      	bpl.n	8008fc6 <_vfiprintf_r+0x6a>
 8008fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fac:	b01d      	add	sp, #116	; 0x74
 8008fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb2:	4b7b      	ldr	r3, [pc, #492]	; (80091a0 <_vfiprintf_r+0x244>)
 8008fb4:	429d      	cmp	r5, r3
 8008fb6:	d101      	bne.n	8008fbc <_vfiprintf_r+0x60>
 8008fb8:	68b5      	ldr	r5, [r6, #8]
 8008fba:	e7df      	b.n	8008f7c <_vfiprintf_r+0x20>
 8008fbc:	4b79      	ldr	r3, [pc, #484]	; (80091a4 <_vfiprintf_r+0x248>)
 8008fbe:	429d      	cmp	r5, r3
 8008fc0:	bf08      	it	eq
 8008fc2:	68f5      	ldreq	r5, [r6, #12]
 8008fc4:	e7da      	b.n	8008f7c <_vfiprintf_r+0x20>
 8008fc6:	89ab      	ldrh	r3, [r5, #12]
 8008fc8:	0598      	lsls	r0, r3, #22
 8008fca:	d4ed      	bmi.n	8008fa8 <_vfiprintf_r+0x4c>
 8008fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fce:	f000 fb72 	bl	80096b6 <__retarget_lock_release_recursive>
 8008fd2:	e7e9      	b.n	8008fa8 <_vfiprintf_r+0x4c>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd8:	2320      	movs	r3, #32
 8008fda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fde:	2330      	movs	r3, #48	; 0x30
 8008fe0:	f04f 0901 	mov.w	r9, #1
 8008fe4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fe8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80091a8 <_vfiprintf_r+0x24c>
 8008fec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ff0:	4623      	mov	r3, r4
 8008ff2:	469a      	mov	sl, r3
 8008ff4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ff8:	b10a      	cbz	r2, 8008ffe <_vfiprintf_r+0xa2>
 8008ffa:	2a25      	cmp	r2, #37	; 0x25
 8008ffc:	d1f9      	bne.n	8008ff2 <_vfiprintf_r+0x96>
 8008ffe:	ebba 0b04 	subs.w	fp, sl, r4
 8009002:	d00b      	beq.n	800901c <_vfiprintf_r+0xc0>
 8009004:	465b      	mov	r3, fp
 8009006:	4622      	mov	r2, r4
 8009008:	4629      	mov	r1, r5
 800900a:	4630      	mov	r0, r6
 800900c:	f7ff ff94 	bl	8008f38 <__sfputs_r>
 8009010:	3001      	adds	r0, #1
 8009012:	f000 80aa 	beq.w	800916a <_vfiprintf_r+0x20e>
 8009016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009018:	445a      	add	r2, fp
 800901a:	9209      	str	r2, [sp, #36]	; 0x24
 800901c:	f89a 3000 	ldrb.w	r3, [sl]
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 80a2 	beq.w	800916a <_vfiprintf_r+0x20e>
 8009026:	2300      	movs	r3, #0
 8009028:	f04f 32ff 	mov.w	r2, #4294967295
 800902c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009030:	f10a 0a01 	add.w	sl, sl, #1
 8009034:	9304      	str	r3, [sp, #16]
 8009036:	9307      	str	r3, [sp, #28]
 8009038:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800903c:	931a      	str	r3, [sp, #104]	; 0x68
 800903e:	4654      	mov	r4, sl
 8009040:	2205      	movs	r2, #5
 8009042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009046:	4858      	ldr	r0, [pc, #352]	; (80091a8 <_vfiprintf_r+0x24c>)
 8009048:	f7fe ff84 	bl	8007f54 <memchr>
 800904c:	9a04      	ldr	r2, [sp, #16]
 800904e:	b9d8      	cbnz	r0, 8009088 <_vfiprintf_r+0x12c>
 8009050:	06d1      	lsls	r1, r2, #27
 8009052:	bf44      	itt	mi
 8009054:	2320      	movmi	r3, #32
 8009056:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800905a:	0713      	lsls	r3, r2, #28
 800905c:	bf44      	itt	mi
 800905e:	232b      	movmi	r3, #43	; 0x2b
 8009060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009064:	f89a 3000 	ldrb.w	r3, [sl]
 8009068:	2b2a      	cmp	r3, #42	; 0x2a
 800906a:	d015      	beq.n	8009098 <_vfiprintf_r+0x13c>
 800906c:	4654      	mov	r4, sl
 800906e:	2000      	movs	r0, #0
 8009070:	f04f 0c0a 	mov.w	ip, #10
 8009074:	9a07      	ldr	r2, [sp, #28]
 8009076:	4621      	mov	r1, r4
 8009078:	f811 3b01 	ldrb.w	r3, [r1], #1
 800907c:	3b30      	subs	r3, #48	; 0x30
 800907e:	2b09      	cmp	r3, #9
 8009080:	d94e      	bls.n	8009120 <_vfiprintf_r+0x1c4>
 8009082:	b1b0      	cbz	r0, 80090b2 <_vfiprintf_r+0x156>
 8009084:	9207      	str	r2, [sp, #28]
 8009086:	e014      	b.n	80090b2 <_vfiprintf_r+0x156>
 8009088:	eba0 0308 	sub.w	r3, r0, r8
 800908c:	fa09 f303 	lsl.w	r3, r9, r3
 8009090:	4313      	orrs	r3, r2
 8009092:	46a2      	mov	sl, r4
 8009094:	9304      	str	r3, [sp, #16]
 8009096:	e7d2      	b.n	800903e <_vfiprintf_r+0xe2>
 8009098:	9b03      	ldr	r3, [sp, #12]
 800909a:	1d19      	adds	r1, r3, #4
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	9103      	str	r1, [sp, #12]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	bfbb      	ittet	lt
 80090a4:	425b      	neglt	r3, r3
 80090a6:	f042 0202 	orrlt.w	r2, r2, #2
 80090aa:	9307      	strge	r3, [sp, #28]
 80090ac:	9307      	strlt	r3, [sp, #28]
 80090ae:	bfb8      	it	lt
 80090b0:	9204      	strlt	r2, [sp, #16]
 80090b2:	7823      	ldrb	r3, [r4, #0]
 80090b4:	2b2e      	cmp	r3, #46	; 0x2e
 80090b6:	d10c      	bne.n	80090d2 <_vfiprintf_r+0x176>
 80090b8:	7863      	ldrb	r3, [r4, #1]
 80090ba:	2b2a      	cmp	r3, #42	; 0x2a
 80090bc:	d135      	bne.n	800912a <_vfiprintf_r+0x1ce>
 80090be:	9b03      	ldr	r3, [sp, #12]
 80090c0:	3402      	adds	r4, #2
 80090c2:	1d1a      	adds	r2, r3, #4
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	9203      	str	r2, [sp, #12]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	bfb8      	it	lt
 80090cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80090d0:	9305      	str	r3, [sp, #20]
 80090d2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80091ac <_vfiprintf_r+0x250>
 80090d6:	2203      	movs	r2, #3
 80090d8:	4650      	mov	r0, sl
 80090da:	7821      	ldrb	r1, [r4, #0]
 80090dc:	f7fe ff3a 	bl	8007f54 <memchr>
 80090e0:	b140      	cbz	r0, 80090f4 <_vfiprintf_r+0x198>
 80090e2:	2340      	movs	r3, #64	; 0x40
 80090e4:	eba0 000a 	sub.w	r0, r0, sl
 80090e8:	fa03 f000 	lsl.w	r0, r3, r0
 80090ec:	9b04      	ldr	r3, [sp, #16]
 80090ee:	3401      	adds	r4, #1
 80090f0:	4303      	orrs	r3, r0
 80090f2:	9304      	str	r3, [sp, #16]
 80090f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f8:	2206      	movs	r2, #6
 80090fa:	482d      	ldr	r0, [pc, #180]	; (80091b0 <_vfiprintf_r+0x254>)
 80090fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009100:	f7fe ff28 	bl	8007f54 <memchr>
 8009104:	2800      	cmp	r0, #0
 8009106:	d03f      	beq.n	8009188 <_vfiprintf_r+0x22c>
 8009108:	4b2a      	ldr	r3, [pc, #168]	; (80091b4 <_vfiprintf_r+0x258>)
 800910a:	bb1b      	cbnz	r3, 8009154 <_vfiprintf_r+0x1f8>
 800910c:	9b03      	ldr	r3, [sp, #12]
 800910e:	3307      	adds	r3, #7
 8009110:	f023 0307 	bic.w	r3, r3, #7
 8009114:	3308      	adds	r3, #8
 8009116:	9303      	str	r3, [sp, #12]
 8009118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800911a:	443b      	add	r3, r7
 800911c:	9309      	str	r3, [sp, #36]	; 0x24
 800911e:	e767      	b.n	8008ff0 <_vfiprintf_r+0x94>
 8009120:	460c      	mov	r4, r1
 8009122:	2001      	movs	r0, #1
 8009124:	fb0c 3202 	mla	r2, ip, r2, r3
 8009128:	e7a5      	b.n	8009076 <_vfiprintf_r+0x11a>
 800912a:	2300      	movs	r3, #0
 800912c:	f04f 0c0a 	mov.w	ip, #10
 8009130:	4619      	mov	r1, r3
 8009132:	3401      	adds	r4, #1
 8009134:	9305      	str	r3, [sp, #20]
 8009136:	4620      	mov	r0, r4
 8009138:	f810 2b01 	ldrb.w	r2, [r0], #1
 800913c:	3a30      	subs	r2, #48	; 0x30
 800913e:	2a09      	cmp	r2, #9
 8009140:	d903      	bls.n	800914a <_vfiprintf_r+0x1ee>
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0c5      	beq.n	80090d2 <_vfiprintf_r+0x176>
 8009146:	9105      	str	r1, [sp, #20]
 8009148:	e7c3      	b.n	80090d2 <_vfiprintf_r+0x176>
 800914a:	4604      	mov	r4, r0
 800914c:	2301      	movs	r3, #1
 800914e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009152:	e7f0      	b.n	8009136 <_vfiprintf_r+0x1da>
 8009154:	ab03      	add	r3, sp, #12
 8009156:	9300      	str	r3, [sp, #0]
 8009158:	462a      	mov	r2, r5
 800915a:	4630      	mov	r0, r6
 800915c:	4b16      	ldr	r3, [pc, #88]	; (80091b8 <_vfiprintf_r+0x25c>)
 800915e:	a904      	add	r1, sp, #16
 8009160:	f7fc f86c 	bl	800523c <_printf_float>
 8009164:	4607      	mov	r7, r0
 8009166:	1c78      	adds	r0, r7, #1
 8009168:	d1d6      	bne.n	8009118 <_vfiprintf_r+0x1bc>
 800916a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800916c:	07d9      	lsls	r1, r3, #31
 800916e:	d405      	bmi.n	800917c <_vfiprintf_r+0x220>
 8009170:	89ab      	ldrh	r3, [r5, #12]
 8009172:	059a      	lsls	r2, r3, #22
 8009174:	d402      	bmi.n	800917c <_vfiprintf_r+0x220>
 8009176:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009178:	f000 fa9d 	bl	80096b6 <__retarget_lock_release_recursive>
 800917c:	89ab      	ldrh	r3, [r5, #12]
 800917e:	065b      	lsls	r3, r3, #25
 8009180:	f53f af12 	bmi.w	8008fa8 <_vfiprintf_r+0x4c>
 8009184:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009186:	e711      	b.n	8008fac <_vfiprintf_r+0x50>
 8009188:	ab03      	add	r3, sp, #12
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	462a      	mov	r2, r5
 800918e:	4630      	mov	r0, r6
 8009190:	4b09      	ldr	r3, [pc, #36]	; (80091b8 <_vfiprintf_r+0x25c>)
 8009192:	a904      	add	r1, sp, #16
 8009194:	f7fc faee 	bl	8005774 <_printf_i>
 8009198:	e7e4      	b.n	8009164 <_vfiprintf_r+0x208>
 800919a:	bf00      	nop
 800919c:	0801b7dc 	.word	0x0801b7dc
 80091a0:	0801b7fc 	.word	0x0801b7fc
 80091a4:	0801b7bc 	.word	0x0801b7bc
 80091a8:	0801b76c 	.word	0x0801b76c
 80091ac:	0801b772 	.word	0x0801b772
 80091b0:	0801b776 	.word	0x0801b776
 80091b4:	0800523d 	.word	0x0800523d
 80091b8:	08008f39 	.word	0x08008f39

080091bc <__swbuf_r>:
 80091bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091be:	460e      	mov	r6, r1
 80091c0:	4614      	mov	r4, r2
 80091c2:	4605      	mov	r5, r0
 80091c4:	b118      	cbz	r0, 80091ce <__swbuf_r+0x12>
 80091c6:	6983      	ldr	r3, [r0, #24]
 80091c8:	b90b      	cbnz	r3, 80091ce <__swbuf_r+0x12>
 80091ca:	f000 f9d5 	bl	8009578 <__sinit>
 80091ce:	4b21      	ldr	r3, [pc, #132]	; (8009254 <__swbuf_r+0x98>)
 80091d0:	429c      	cmp	r4, r3
 80091d2:	d12b      	bne.n	800922c <__swbuf_r+0x70>
 80091d4:	686c      	ldr	r4, [r5, #4]
 80091d6:	69a3      	ldr	r3, [r4, #24]
 80091d8:	60a3      	str	r3, [r4, #8]
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	071a      	lsls	r2, r3, #28
 80091de:	d52f      	bpl.n	8009240 <__swbuf_r+0x84>
 80091e0:	6923      	ldr	r3, [r4, #16]
 80091e2:	b36b      	cbz	r3, 8009240 <__swbuf_r+0x84>
 80091e4:	6923      	ldr	r3, [r4, #16]
 80091e6:	6820      	ldr	r0, [r4, #0]
 80091e8:	b2f6      	uxtb	r6, r6
 80091ea:	1ac0      	subs	r0, r0, r3
 80091ec:	6963      	ldr	r3, [r4, #20]
 80091ee:	4637      	mov	r7, r6
 80091f0:	4283      	cmp	r3, r0
 80091f2:	dc04      	bgt.n	80091fe <__swbuf_r+0x42>
 80091f4:	4621      	mov	r1, r4
 80091f6:	4628      	mov	r0, r5
 80091f8:	f000 f92a 	bl	8009450 <_fflush_r>
 80091fc:	bb30      	cbnz	r0, 800924c <__swbuf_r+0x90>
 80091fe:	68a3      	ldr	r3, [r4, #8]
 8009200:	3001      	adds	r0, #1
 8009202:	3b01      	subs	r3, #1
 8009204:	60a3      	str	r3, [r4, #8]
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	1c5a      	adds	r2, r3, #1
 800920a:	6022      	str	r2, [r4, #0]
 800920c:	701e      	strb	r6, [r3, #0]
 800920e:	6963      	ldr	r3, [r4, #20]
 8009210:	4283      	cmp	r3, r0
 8009212:	d004      	beq.n	800921e <__swbuf_r+0x62>
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	07db      	lsls	r3, r3, #31
 8009218:	d506      	bpl.n	8009228 <__swbuf_r+0x6c>
 800921a:	2e0a      	cmp	r6, #10
 800921c:	d104      	bne.n	8009228 <__swbuf_r+0x6c>
 800921e:	4621      	mov	r1, r4
 8009220:	4628      	mov	r0, r5
 8009222:	f000 f915 	bl	8009450 <_fflush_r>
 8009226:	b988      	cbnz	r0, 800924c <__swbuf_r+0x90>
 8009228:	4638      	mov	r0, r7
 800922a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800922c:	4b0a      	ldr	r3, [pc, #40]	; (8009258 <__swbuf_r+0x9c>)
 800922e:	429c      	cmp	r4, r3
 8009230:	d101      	bne.n	8009236 <__swbuf_r+0x7a>
 8009232:	68ac      	ldr	r4, [r5, #8]
 8009234:	e7cf      	b.n	80091d6 <__swbuf_r+0x1a>
 8009236:	4b09      	ldr	r3, [pc, #36]	; (800925c <__swbuf_r+0xa0>)
 8009238:	429c      	cmp	r4, r3
 800923a:	bf08      	it	eq
 800923c:	68ec      	ldreq	r4, [r5, #12]
 800923e:	e7ca      	b.n	80091d6 <__swbuf_r+0x1a>
 8009240:	4621      	mov	r1, r4
 8009242:	4628      	mov	r0, r5
 8009244:	f000 f80c 	bl	8009260 <__swsetup_r>
 8009248:	2800      	cmp	r0, #0
 800924a:	d0cb      	beq.n	80091e4 <__swbuf_r+0x28>
 800924c:	f04f 37ff 	mov.w	r7, #4294967295
 8009250:	e7ea      	b.n	8009228 <__swbuf_r+0x6c>
 8009252:	bf00      	nop
 8009254:	0801b7dc 	.word	0x0801b7dc
 8009258:	0801b7fc 	.word	0x0801b7fc
 800925c:	0801b7bc 	.word	0x0801b7bc

08009260 <__swsetup_r>:
 8009260:	4b32      	ldr	r3, [pc, #200]	; (800932c <__swsetup_r+0xcc>)
 8009262:	b570      	push	{r4, r5, r6, lr}
 8009264:	681d      	ldr	r5, [r3, #0]
 8009266:	4606      	mov	r6, r0
 8009268:	460c      	mov	r4, r1
 800926a:	b125      	cbz	r5, 8009276 <__swsetup_r+0x16>
 800926c:	69ab      	ldr	r3, [r5, #24]
 800926e:	b913      	cbnz	r3, 8009276 <__swsetup_r+0x16>
 8009270:	4628      	mov	r0, r5
 8009272:	f000 f981 	bl	8009578 <__sinit>
 8009276:	4b2e      	ldr	r3, [pc, #184]	; (8009330 <__swsetup_r+0xd0>)
 8009278:	429c      	cmp	r4, r3
 800927a:	d10f      	bne.n	800929c <__swsetup_r+0x3c>
 800927c:	686c      	ldr	r4, [r5, #4]
 800927e:	89a3      	ldrh	r3, [r4, #12]
 8009280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009284:	0719      	lsls	r1, r3, #28
 8009286:	d42c      	bmi.n	80092e2 <__swsetup_r+0x82>
 8009288:	06dd      	lsls	r5, r3, #27
 800928a:	d411      	bmi.n	80092b0 <__swsetup_r+0x50>
 800928c:	2309      	movs	r3, #9
 800928e:	6033      	str	r3, [r6, #0]
 8009290:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009294:	f04f 30ff 	mov.w	r0, #4294967295
 8009298:	81a3      	strh	r3, [r4, #12]
 800929a:	e03e      	b.n	800931a <__swsetup_r+0xba>
 800929c:	4b25      	ldr	r3, [pc, #148]	; (8009334 <__swsetup_r+0xd4>)
 800929e:	429c      	cmp	r4, r3
 80092a0:	d101      	bne.n	80092a6 <__swsetup_r+0x46>
 80092a2:	68ac      	ldr	r4, [r5, #8]
 80092a4:	e7eb      	b.n	800927e <__swsetup_r+0x1e>
 80092a6:	4b24      	ldr	r3, [pc, #144]	; (8009338 <__swsetup_r+0xd8>)
 80092a8:	429c      	cmp	r4, r3
 80092aa:	bf08      	it	eq
 80092ac:	68ec      	ldreq	r4, [r5, #12]
 80092ae:	e7e6      	b.n	800927e <__swsetup_r+0x1e>
 80092b0:	0758      	lsls	r0, r3, #29
 80092b2:	d512      	bpl.n	80092da <__swsetup_r+0x7a>
 80092b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092b6:	b141      	cbz	r1, 80092ca <__swsetup_r+0x6a>
 80092b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092bc:	4299      	cmp	r1, r3
 80092be:	d002      	beq.n	80092c6 <__swsetup_r+0x66>
 80092c0:	4630      	mov	r0, r6
 80092c2:	f7ff fb2f 	bl	8008924 <_free_r>
 80092c6:	2300      	movs	r3, #0
 80092c8:	6363      	str	r3, [r4, #52]	; 0x34
 80092ca:	89a3      	ldrh	r3, [r4, #12]
 80092cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80092d0:	81a3      	strh	r3, [r4, #12]
 80092d2:	2300      	movs	r3, #0
 80092d4:	6063      	str	r3, [r4, #4]
 80092d6:	6923      	ldr	r3, [r4, #16]
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	89a3      	ldrh	r3, [r4, #12]
 80092dc:	f043 0308 	orr.w	r3, r3, #8
 80092e0:	81a3      	strh	r3, [r4, #12]
 80092e2:	6923      	ldr	r3, [r4, #16]
 80092e4:	b94b      	cbnz	r3, 80092fa <__swsetup_r+0x9a>
 80092e6:	89a3      	ldrh	r3, [r4, #12]
 80092e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80092ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092f0:	d003      	beq.n	80092fa <__swsetup_r+0x9a>
 80092f2:	4621      	mov	r1, r4
 80092f4:	4630      	mov	r0, r6
 80092f6:	f000 fa05 	bl	8009704 <__smakebuf_r>
 80092fa:	89a0      	ldrh	r0, [r4, #12]
 80092fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009300:	f010 0301 	ands.w	r3, r0, #1
 8009304:	d00a      	beq.n	800931c <__swsetup_r+0xbc>
 8009306:	2300      	movs	r3, #0
 8009308:	60a3      	str	r3, [r4, #8]
 800930a:	6963      	ldr	r3, [r4, #20]
 800930c:	425b      	negs	r3, r3
 800930e:	61a3      	str	r3, [r4, #24]
 8009310:	6923      	ldr	r3, [r4, #16]
 8009312:	b943      	cbnz	r3, 8009326 <__swsetup_r+0xc6>
 8009314:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009318:	d1ba      	bne.n	8009290 <__swsetup_r+0x30>
 800931a:	bd70      	pop	{r4, r5, r6, pc}
 800931c:	0781      	lsls	r1, r0, #30
 800931e:	bf58      	it	pl
 8009320:	6963      	ldrpl	r3, [r4, #20]
 8009322:	60a3      	str	r3, [r4, #8]
 8009324:	e7f4      	b.n	8009310 <__swsetup_r+0xb0>
 8009326:	2000      	movs	r0, #0
 8009328:	e7f7      	b.n	800931a <__swsetup_r+0xba>
 800932a:	bf00      	nop
 800932c:	20000010 	.word	0x20000010
 8009330:	0801b7dc 	.word	0x0801b7dc
 8009334:	0801b7fc 	.word	0x0801b7fc
 8009338:	0801b7bc 	.word	0x0801b7bc

0800933c <abort>:
 800933c:	2006      	movs	r0, #6
 800933e:	b508      	push	{r3, lr}
 8009340:	f000 fa50 	bl	80097e4 <raise>
 8009344:	2001      	movs	r0, #1
 8009346:	f7f8 fdba 	bl	8001ebe <_exit>
	...

0800934c <__sflush_r>:
 800934c:	898a      	ldrh	r2, [r1, #12]
 800934e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009350:	4605      	mov	r5, r0
 8009352:	0710      	lsls	r0, r2, #28
 8009354:	460c      	mov	r4, r1
 8009356:	d457      	bmi.n	8009408 <__sflush_r+0xbc>
 8009358:	684b      	ldr	r3, [r1, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	dc04      	bgt.n	8009368 <__sflush_r+0x1c>
 800935e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009360:	2b00      	cmp	r3, #0
 8009362:	dc01      	bgt.n	8009368 <__sflush_r+0x1c>
 8009364:	2000      	movs	r0, #0
 8009366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009368:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800936a:	2e00      	cmp	r6, #0
 800936c:	d0fa      	beq.n	8009364 <__sflush_r+0x18>
 800936e:	2300      	movs	r3, #0
 8009370:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009374:	682f      	ldr	r7, [r5, #0]
 8009376:	602b      	str	r3, [r5, #0]
 8009378:	d032      	beq.n	80093e0 <__sflush_r+0x94>
 800937a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800937c:	89a3      	ldrh	r3, [r4, #12]
 800937e:	075a      	lsls	r2, r3, #29
 8009380:	d505      	bpl.n	800938e <__sflush_r+0x42>
 8009382:	6863      	ldr	r3, [r4, #4]
 8009384:	1ac0      	subs	r0, r0, r3
 8009386:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009388:	b10b      	cbz	r3, 800938e <__sflush_r+0x42>
 800938a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800938c:	1ac0      	subs	r0, r0, r3
 800938e:	2300      	movs	r3, #0
 8009390:	4602      	mov	r2, r0
 8009392:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009394:	4628      	mov	r0, r5
 8009396:	6a21      	ldr	r1, [r4, #32]
 8009398:	47b0      	blx	r6
 800939a:	1c43      	adds	r3, r0, #1
 800939c:	89a3      	ldrh	r3, [r4, #12]
 800939e:	d106      	bne.n	80093ae <__sflush_r+0x62>
 80093a0:	6829      	ldr	r1, [r5, #0]
 80093a2:	291d      	cmp	r1, #29
 80093a4:	d82c      	bhi.n	8009400 <__sflush_r+0xb4>
 80093a6:	4a29      	ldr	r2, [pc, #164]	; (800944c <__sflush_r+0x100>)
 80093a8:	40ca      	lsrs	r2, r1
 80093aa:	07d6      	lsls	r6, r2, #31
 80093ac:	d528      	bpl.n	8009400 <__sflush_r+0xb4>
 80093ae:	2200      	movs	r2, #0
 80093b0:	6062      	str	r2, [r4, #4]
 80093b2:	6922      	ldr	r2, [r4, #16]
 80093b4:	04d9      	lsls	r1, r3, #19
 80093b6:	6022      	str	r2, [r4, #0]
 80093b8:	d504      	bpl.n	80093c4 <__sflush_r+0x78>
 80093ba:	1c42      	adds	r2, r0, #1
 80093bc:	d101      	bne.n	80093c2 <__sflush_r+0x76>
 80093be:	682b      	ldr	r3, [r5, #0]
 80093c0:	b903      	cbnz	r3, 80093c4 <__sflush_r+0x78>
 80093c2:	6560      	str	r0, [r4, #84]	; 0x54
 80093c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093c6:	602f      	str	r7, [r5, #0]
 80093c8:	2900      	cmp	r1, #0
 80093ca:	d0cb      	beq.n	8009364 <__sflush_r+0x18>
 80093cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093d0:	4299      	cmp	r1, r3
 80093d2:	d002      	beq.n	80093da <__sflush_r+0x8e>
 80093d4:	4628      	mov	r0, r5
 80093d6:	f7ff faa5 	bl	8008924 <_free_r>
 80093da:	2000      	movs	r0, #0
 80093dc:	6360      	str	r0, [r4, #52]	; 0x34
 80093de:	e7c2      	b.n	8009366 <__sflush_r+0x1a>
 80093e0:	6a21      	ldr	r1, [r4, #32]
 80093e2:	2301      	movs	r3, #1
 80093e4:	4628      	mov	r0, r5
 80093e6:	47b0      	blx	r6
 80093e8:	1c41      	adds	r1, r0, #1
 80093ea:	d1c7      	bne.n	800937c <__sflush_r+0x30>
 80093ec:	682b      	ldr	r3, [r5, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d0c4      	beq.n	800937c <__sflush_r+0x30>
 80093f2:	2b1d      	cmp	r3, #29
 80093f4:	d001      	beq.n	80093fa <__sflush_r+0xae>
 80093f6:	2b16      	cmp	r3, #22
 80093f8:	d101      	bne.n	80093fe <__sflush_r+0xb2>
 80093fa:	602f      	str	r7, [r5, #0]
 80093fc:	e7b2      	b.n	8009364 <__sflush_r+0x18>
 80093fe:	89a3      	ldrh	r3, [r4, #12]
 8009400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009404:	81a3      	strh	r3, [r4, #12]
 8009406:	e7ae      	b.n	8009366 <__sflush_r+0x1a>
 8009408:	690f      	ldr	r7, [r1, #16]
 800940a:	2f00      	cmp	r7, #0
 800940c:	d0aa      	beq.n	8009364 <__sflush_r+0x18>
 800940e:	0793      	lsls	r3, r2, #30
 8009410:	bf18      	it	ne
 8009412:	2300      	movne	r3, #0
 8009414:	680e      	ldr	r6, [r1, #0]
 8009416:	bf08      	it	eq
 8009418:	694b      	ldreq	r3, [r1, #20]
 800941a:	1bf6      	subs	r6, r6, r7
 800941c:	600f      	str	r7, [r1, #0]
 800941e:	608b      	str	r3, [r1, #8]
 8009420:	2e00      	cmp	r6, #0
 8009422:	dd9f      	ble.n	8009364 <__sflush_r+0x18>
 8009424:	4633      	mov	r3, r6
 8009426:	463a      	mov	r2, r7
 8009428:	4628      	mov	r0, r5
 800942a:	6a21      	ldr	r1, [r4, #32]
 800942c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009430:	47e0      	blx	ip
 8009432:	2800      	cmp	r0, #0
 8009434:	dc06      	bgt.n	8009444 <__sflush_r+0xf8>
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	f04f 30ff 	mov.w	r0, #4294967295
 800943c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009440:	81a3      	strh	r3, [r4, #12]
 8009442:	e790      	b.n	8009366 <__sflush_r+0x1a>
 8009444:	4407      	add	r7, r0
 8009446:	1a36      	subs	r6, r6, r0
 8009448:	e7ea      	b.n	8009420 <__sflush_r+0xd4>
 800944a:	bf00      	nop
 800944c:	20400001 	.word	0x20400001

08009450 <_fflush_r>:
 8009450:	b538      	push	{r3, r4, r5, lr}
 8009452:	690b      	ldr	r3, [r1, #16]
 8009454:	4605      	mov	r5, r0
 8009456:	460c      	mov	r4, r1
 8009458:	b913      	cbnz	r3, 8009460 <_fflush_r+0x10>
 800945a:	2500      	movs	r5, #0
 800945c:	4628      	mov	r0, r5
 800945e:	bd38      	pop	{r3, r4, r5, pc}
 8009460:	b118      	cbz	r0, 800946a <_fflush_r+0x1a>
 8009462:	6983      	ldr	r3, [r0, #24]
 8009464:	b90b      	cbnz	r3, 800946a <_fflush_r+0x1a>
 8009466:	f000 f887 	bl	8009578 <__sinit>
 800946a:	4b14      	ldr	r3, [pc, #80]	; (80094bc <_fflush_r+0x6c>)
 800946c:	429c      	cmp	r4, r3
 800946e:	d11b      	bne.n	80094a8 <_fflush_r+0x58>
 8009470:	686c      	ldr	r4, [r5, #4]
 8009472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d0ef      	beq.n	800945a <_fflush_r+0xa>
 800947a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800947c:	07d0      	lsls	r0, r2, #31
 800947e:	d404      	bmi.n	800948a <_fflush_r+0x3a>
 8009480:	0599      	lsls	r1, r3, #22
 8009482:	d402      	bmi.n	800948a <_fflush_r+0x3a>
 8009484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009486:	f000 f915 	bl	80096b4 <__retarget_lock_acquire_recursive>
 800948a:	4628      	mov	r0, r5
 800948c:	4621      	mov	r1, r4
 800948e:	f7ff ff5d 	bl	800934c <__sflush_r>
 8009492:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009494:	4605      	mov	r5, r0
 8009496:	07da      	lsls	r2, r3, #31
 8009498:	d4e0      	bmi.n	800945c <_fflush_r+0xc>
 800949a:	89a3      	ldrh	r3, [r4, #12]
 800949c:	059b      	lsls	r3, r3, #22
 800949e:	d4dd      	bmi.n	800945c <_fflush_r+0xc>
 80094a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094a2:	f000 f908 	bl	80096b6 <__retarget_lock_release_recursive>
 80094a6:	e7d9      	b.n	800945c <_fflush_r+0xc>
 80094a8:	4b05      	ldr	r3, [pc, #20]	; (80094c0 <_fflush_r+0x70>)
 80094aa:	429c      	cmp	r4, r3
 80094ac:	d101      	bne.n	80094b2 <_fflush_r+0x62>
 80094ae:	68ac      	ldr	r4, [r5, #8]
 80094b0:	e7df      	b.n	8009472 <_fflush_r+0x22>
 80094b2:	4b04      	ldr	r3, [pc, #16]	; (80094c4 <_fflush_r+0x74>)
 80094b4:	429c      	cmp	r4, r3
 80094b6:	bf08      	it	eq
 80094b8:	68ec      	ldreq	r4, [r5, #12]
 80094ba:	e7da      	b.n	8009472 <_fflush_r+0x22>
 80094bc:	0801b7dc 	.word	0x0801b7dc
 80094c0:	0801b7fc 	.word	0x0801b7fc
 80094c4:	0801b7bc 	.word	0x0801b7bc

080094c8 <std>:
 80094c8:	2300      	movs	r3, #0
 80094ca:	b510      	push	{r4, lr}
 80094cc:	4604      	mov	r4, r0
 80094ce:	e9c0 3300 	strd	r3, r3, [r0]
 80094d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094d6:	6083      	str	r3, [r0, #8]
 80094d8:	8181      	strh	r1, [r0, #12]
 80094da:	6643      	str	r3, [r0, #100]	; 0x64
 80094dc:	81c2      	strh	r2, [r0, #14]
 80094de:	6183      	str	r3, [r0, #24]
 80094e0:	4619      	mov	r1, r3
 80094e2:	2208      	movs	r2, #8
 80094e4:	305c      	adds	r0, #92	; 0x5c
 80094e6:	f7fb fe03 	bl	80050f0 <memset>
 80094ea:	4b05      	ldr	r3, [pc, #20]	; (8009500 <std+0x38>)
 80094ec:	6224      	str	r4, [r4, #32]
 80094ee:	6263      	str	r3, [r4, #36]	; 0x24
 80094f0:	4b04      	ldr	r3, [pc, #16]	; (8009504 <std+0x3c>)
 80094f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80094f4:	4b04      	ldr	r3, [pc, #16]	; (8009508 <std+0x40>)
 80094f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094f8:	4b04      	ldr	r3, [pc, #16]	; (800950c <std+0x44>)
 80094fa:	6323      	str	r3, [r4, #48]	; 0x30
 80094fc:	bd10      	pop	{r4, pc}
 80094fe:	bf00      	nop
 8009500:	0800981d 	.word	0x0800981d
 8009504:	0800983f 	.word	0x0800983f
 8009508:	08009877 	.word	0x08009877
 800950c:	0800989b 	.word	0x0800989b

08009510 <_cleanup_r>:
 8009510:	4901      	ldr	r1, [pc, #4]	; (8009518 <_cleanup_r+0x8>)
 8009512:	f000 b8af 	b.w	8009674 <_fwalk_reent>
 8009516:	bf00      	nop
 8009518:	08009451 	.word	0x08009451

0800951c <__sfmoreglue>:
 800951c:	2268      	movs	r2, #104	; 0x68
 800951e:	b570      	push	{r4, r5, r6, lr}
 8009520:	1e4d      	subs	r5, r1, #1
 8009522:	4355      	muls	r5, r2
 8009524:	460e      	mov	r6, r1
 8009526:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800952a:	f7ff fa63 	bl	80089f4 <_malloc_r>
 800952e:	4604      	mov	r4, r0
 8009530:	b140      	cbz	r0, 8009544 <__sfmoreglue+0x28>
 8009532:	2100      	movs	r1, #0
 8009534:	e9c0 1600 	strd	r1, r6, [r0]
 8009538:	300c      	adds	r0, #12
 800953a:	60a0      	str	r0, [r4, #8]
 800953c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009540:	f7fb fdd6 	bl	80050f0 <memset>
 8009544:	4620      	mov	r0, r4
 8009546:	bd70      	pop	{r4, r5, r6, pc}

08009548 <__sfp_lock_acquire>:
 8009548:	4801      	ldr	r0, [pc, #4]	; (8009550 <__sfp_lock_acquire+0x8>)
 800954a:	f000 b8b3 	b.w	80096b4 <__retarget_lock_acquire_recursive>
 800954e:	bf00      	nop
 8009550:	20000829 	.word	0x20000829

08009554 <__sfp_lock_release>:
 8009554:	4801      	ldr	r0, [pc, #4]	; (800955c <__sfp_lock_release+0x8>)
 8009556:	f000 b8ae 	b.w	80096b6 <__retarget_lock_release_recursive>
 800955a:	bf00      	nop
 800955c:	20000829 	.word	0x20000829

08009560 <__sinit_lock_acquire>:
 8009560:	4801      	ldr	r0, [pc, #4]	; (8009568 <__sinit_lock_acquire+0x8>)
 8009562:	f000 b8a7 	b.w	80096b4 <__retarget_lock_acquire_recursive>
 8009566:	bf00      	nop
 8009568:	2000082a 	.word	0x2000082a

0800956c <__sinit_lock_release>:
 800956c:	4801      	ldr	r0, [pc, #4]	; (8009574 <__sinit_lock_release+0x8>)
 800956e:	f000 b8a2 	b.w	80096b6 <__retarget_lock_release_recursive>
 8009572:	bf00      	nop
 8009574:	2000082a 	.word	0x2000082a

08009578 <__sinit>:
 8009578:	b510      	push	{r4, lr}
 800957a:	4604      	mov	r4, r0
 800957c:	f7ff fff0 	bl	8009560 <__sinit_lock_acquire>
 8009580:	69a3      	ldr	r3, [r4, #24]
 8009582:	b11b      	cbz	r3, 800958c <__sinit+0x14>
 8009584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009588:	f7ff bff0 	b.w	800956c <__sinit_lock_release>
 800958c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009590:	6523      	str	r3, [r4, #80]	; 0x50
 8009592:	4b13      	ldr	r3, [pc, #76]	; (80095e0 <__sinit+0x68>)
 8009594:	4a13      	ldr	r2, [pc, #76]	; (80095e4 <__sinit+0x6c>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	62a2      	str	r2, [r4, #40]	; 0x28
 800959a:	42a3      	cmp	r3, r4
 800959c:	bf08      	it	eq
 800959e:	2301      	moveq	r3, #1
 80095a0:	4620      	mov	r0, r4
 80095a2:	bf08      	it	eq
 80095a4:	61a3      	streq	r3, [r4, #24]
 80095a6:	f000 f81f 	bl	80095e8 <__sfp>
 80095aa:	6060      	str	r0, [r4, #4]
 80095ac:	4620      	mov	r0, r4
 80095ae:	f000 f81b 	bl	80095e8 <__sfp>
 80095b2:	60a0      	str	r0, [r4, #8]
 80095b4:	4620      	mov	r0, r4
 80095b6:	f000 f817 	bl	80095e8 <__sfp>
 80095ba:	2200      	movs	r2, #0
 80095bc:	2104      	movs	r1, #4
 80095be:	60e0      	str	r0, [r4, #12]
 80095c0:	6860      	ldr	r0, [r4, #4]
 80095c2:	f7ff ff81 	bl	80094c8 <std>
 80095c6:	2201      	movs	r2, #1
 80095c8:	2109      	movs	r1, #9
 80095ca:	68a0      	ldr	r0, [r4, #8]
 80095cc:	f7ff ff7c 	bl	80094c8 <std>
 80095d0:	2202      	movs	r2, #2
 80095d2:	2112      	movs	r1, #18
 80095d4:	68e0      	ldr	r0, [r4, #12]
 80095d6:	f7ff ff77 	bl	80094c8 <std>
 80095da:	2301      	movs	r3, #1
 80095dc:	61a3      	str	r3, [r4, #24]
 80095de:	e7d1      	b.n	8009584 <__sinit+0xc>
 80095e0:	0801b374 	.word	0x0801b374
 80095e4:	08009511 	.word	0x08009511

080095e8 <__sfp>:
 80095e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ea:	4607      	mov	r7, r0
 80095ec:	f7ff ffac 	bl	8009548 <__sfp_lock_acquire>
 80095f0:	4b1e      	ldr	r3, [pc, #120]	; (800966c <__sfp+0x84>)
 80095f2:	681e      	ldr	r6, [r3, #0]
 80095f4:	69b3      	ldr	r3, [r6, #24]
 80095f6:	b913      	cbnz	r3, 80095fe <__sfp+0x16>
 80095f8:	4630      	mov	r0, r6
 80095fa:	f7ff ffbd 	bl	8009578 <__sinit>
 80095fe:	3648      	adds	r6, #72	; 0x48
 8009600:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009604:	3b01      	subs	r3, #1
 8009606:	d503      	bpl.n	8009610 <__sfp+0x28>
 8009608:	6833      	ldr	r3, [r6, #0]
 800960a:	b30b      	cbz	r3, 8009650 <__sfp+0x68>
 800960c:	6836      	ldr	r6, [r6, #0]
 800960e:	e7f7      	b.n	8009600 <__sfp+0x18>
 8009610:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009614:	b9d5      	cbnz	r5, 800964c <__sfp+0x64>
 8009616:	4b16      	ldr	r3, [pc, #88]	; (8009670 <__sfp+0x88>)
 8009618:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800961c:	60e3      	str	r3, [r4, #12]
 800961e:	6665      	str	r5, [r4, #100]	; 0x64
 8009620:	f000 f847 	bl	80096b2 <__retarget_lock_init_recursive>
 8009624:	f7ff ff96 	bl	8009554 <__sfp_lock_release>
 8009628:	2208      	movs	r2, #8
 800962a:	4629      	mov	r1, r5
 800962c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009630:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009634:	6025      	str	r5, [r4, #0]
 8009636:	61a5      	str	r5, [r4, #24]
 8009638:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800963c:	f7fb fd58 	bl	80050f0 <memset>
 8009640:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009644:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009648:	4620      	mov	r0, r4
 800964a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800964c:	3468      	adds	r4, #104	; 0x68
 800964e:	e7d9      	b.n	8009604 <__sfp+0x1c>
 8009650:	2104      	movs	r1, #4
 8009652:	4638      	mov	r0, r7
 8009654:	f7ff ff62 	bl	800951c <__sfmoreglue>
 8009658:	4604      	mov	r4, r0
 800965a:	6030      	str	r0, [r6, #0]
 800965c:	2800      	cmp	r0, #0
 800965e:	d1d5      	bne.n	800960c <__sfp+0x24>
 8009660:	f7ff ff78 	bl	8009554 <__sfp_lock_release>
 8009664:	230c      	movs	r3, #12
 8009666:	603b      	str	r3, [r7, #0]
 8009668:	e7ee      	b.n	8009648 <__sfp+0x60>
 800966a:	bf00      	nop
 800966c:	0801b374 	.word	0x0801b374
 8009670:	ffff0001 	.word	0xffff0001

08009674 <_fwalk_reent>:
 8009674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009678:	4606      	mov	r6, r0
 800967a:	4688      	mov	r8, r1
 800967c:	2700      	movs	r7, #0
 800967e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009682:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009686:	f1b9 0901 	subs.w	r9, r9, #1
 800968a:	d505      	bpl.n	8009698 <_fwalk_reent+0x24>
 800968c:	6824      	ldr	r4, [r4, #0]
 800968e:	2c00      	cmp	r4, #0
 8009690:	d1f7      	bne.n	8009682 <_fwalk_reent+0xe>
 8009692:	4638      	mov	r0, r7
 8009694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009698:	89ab      	ldrh	r3, [r5, #12]
 800969a:	2b01      	cmp	r3, #1
 800969c:	d907      	bls.n	80096ae <_fwalk_reent+0x3a>
 800969e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096a2:	3301      	adds	r3, #1
 80096a4:	d003      	beq.n	80096ae <_fwalk_reent+0x3a>
 80096a6:	4629      	mov	r1, r5
 80096a8:	4630      	mov	r0, r6
 80096aa:	47c0      	blx	r8
 80096ac:	4307      	orrs	r7, r0
 80096ae:	3568      	adds	r5, #104	; 0x68
 80096b0:	e7e9      	b.n	8009686 <_fwalk_reent+0x12>

080096b2 <__retarget_lock_init_recursive>:
 80096b2:	4770      	bx	lr

080096b4 <__retarget_lock_acquire_recursive>:
 80096b4:	4770      	bx	lr

080096b6 <__retarget_lock_release_recursive>:
 80096b6:	4770      	bx	lr

080096b8 <__swhatbuf_r>:
 80096b8:	b570      	push	{r4, r5, r6, lr}
 80096ba:	460e      	mov	r6, r1
 80096bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096c0:	4614      	mov	r4, r2
 80096c2:	2900      	cmp	r1, #0
 80096c4:	461d      	mov	r5, r3
 80096c6:	b096      	sub	sp, #88	; 0x58
 80096c8:	da08      	bge.n	80096dc <__swhatbuf_r+0x24>
 80096ca:	2200      	movs	r2, #0
 80096cc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80096d0:	602a      	str	r2, [r5, #0]
 80096d2:	061a      	lsls	r2, r3, #24
 80096d4:	d410      	bmi.n	80096f8 <__swhatbuf_r+0x40>
 80096d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096da:	e00e      	b.n	80096fa <__swhatbuf_r+0x42>
 80096dc:	466a      	mov	r2, sp
 80096de:	f000 f903 	bl	80098e8 <_fstat_r>
 80096e2:	2800      	cmp	r0, #0
 80096e4:	dbf1      	blt.n	80096ca <__swhatbuf_r+0x12>
 80096e6:	9a01      	ldr	r2, [sp, #4]
 80096e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80096ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80096f0:	425a      	negs	r2, r3
 80096f2:	415a      	adcs	r2, r3
 80096f4:	602a      	str	r2, [r5, #0]
 80096f6:	e7ee      	b.n	80096d6 <__swhatbuf_r+0x1e>
 80096f8:	2340      	movs	r3, #64	; 0x40
 80096fa:	2000      	movs	r0, #0
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	b016      	add	sp, #88	; 0x58
 8009700:	bd70      	pop	{r4, r5, r6, pc}
	...

08009704 <__smakebuf_r>:
 8009704:	898b      	ldrh	r3, [r1, #12]
 8009706:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009708:	079d      	lsls	r5, r3, #30
 800970a:	4606      	mov	r6, r0
 800970c:	460c      	mov	r4, r1
 800970e:	d507      	bpl.n	8009720 <__smakebuf_r+0x1c>
 8009710:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009714:	6023      	str	r3, [r4, #0]
 8009716:	6123      	str	r3, [r4, #16]
 8009718:	2301      	movs	r3, #1
 800971a:	6163      	str	r3, [r4, #20]
 800971c:	b002      	add	sp, #8
 800971e:	bd70      	pop	{r4, r5, r6, pc}
 8009720:	466a      	mov	r2, sp
 8009722:	ab01      	add	r3, sp, #4
 8009724:	f7ff ffc8 	bl	80096b8 <__swhatbuf_r>
 8009728:	9900      	ldr	r1, [sp, #0]
 800972a:	4605      	mov	r5, r0
 800972c:	4630      	mov	r0, r6
 800972e:	f7ff f961 	bl	80089f4 <_malloc_r>
 8009732:	b948      	cbnz	r0, 8009748 <__smakebuf_r+0x44>
 8009734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009738:	059a      	lsls	r2, r3, #22
 800973a:	d4ef      	bmi.n	800971c <__smakebuf_r+0x18>
 800973c:	f023 0303 	bic.w	r3, r3, #3
 8009740:	f043 0302 	orr.w	r3, r3, #2
 8009744:	81a3      	strh	r3, [r4, #12]
 8009746:	e7e3      	b.n	8009710 <__smakebuf_r+0xc>
 8009748:	4b0d      	ldr	r3, [pc, #52]	; (8009780 <__smakebuf_r+0x7c>)
 800974a:	62b3      	str	r3, [r6, #40]	; 0x28
 800974c:	89a3      	ldrh	r3, [r4, #12]
 800974e:	6020      	str	r0, [r4, #0]
 8009750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009754:	81a3      	strh	r3, [r4, #12]
 8009756:	9b00      	ldr	r3, [sp, #0]
 8009758:	6120      	str	r0, [r4, #16]
 800975a:	6163      	str	r3, [r4, #20]
 800975c:	9b01      	ldr	r3, [sp, #4]
 800975e:	b15b      	cbz	r3, 8009778 <__smakebuf_r+0x74>
 8009760:	4630      	mov	r0, r6
 8009762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009766:	f000 f8d1 	bl	800990c <_isatty_r>
 800976a:	b128      	cbz	r0, 8009778 <__smakebuf_r+0x74>
 800976c:	89a3      	ldrh	r3, [r4, #12]
 800976e:	f023 0303 	bic.w	r3, r3, #3
 8009772:	f043 0301 	orr.w	r3, r3, #1
 8009776:	81a3      	strh	r3, [r4, #12]
 8009778:	89a0      	ldrh	r0, [r4, #12]
 800977a:	4305      	orrs	r5, r0
 800977c:	81a5      	strh	r5, [r4, #12]
 800977e:	e7cd      	b.n	800971c <__smakebuf_r+0x18>
 8009780:	08009511 	.word	0x08009511

08009784 <_malloc_usable_size_r>:
 8009784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009788:	1f18      	subs	r0, r3, #4
 800978a:	2b00      	cmp	r3, #0
 800978c:	bfbc      	itt	lt
 800978e:	580b      	ldrlt	r3, [r1, r0]
 8009790:	18c0      	addlt	r0, r0, r3
 8009792:	4770      	bx	lr

08009794 <_raise_r>:
 8009794:	291f      	cmp	r1, #31
 8009796:	b538      	push	{r3, r4, r5, lr}
 8009798:	4604      	mov	r4, r0
 800979a:	460d      	mov	r5, r1
 800979c:	d904      	bls.n	80097a8 <_raise_r+0x14>
 800979e:	2316      	movs	r3, #22
 80097a0:	6003      	str	r3, [r0, #0]
 80097a2:	f04f 30ff 	mov.w	r0, #4294967295
 80097a6:	bd38      	pop	{r3, r4, r5, pc}
 80097a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80097aa:	b112      	cbz	r2, 80097b2 <_raise_r+0x1e>
 80097ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097b0:	b94b      	cbnz	r3, 80097c6 <_raise_r+0x32>
 80097b2:	4620      	mov	r0, r4
 80097b4:	f000 f830 	bl	8009818 <_getpid_r>
 80097b8:	462a      	mov	r2, r5
 80097ba:	4601      	mov	r1, r0
 80097bc:	4620      	mov	r0, r4
 80097be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097c2:	f000 b817 	b.w	80097f4 <_kill_r>
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d00a      	beq.n	80097e0 <_raise_r+0x4c>
 80097ca:	1c59      	adds	r1, r3, #1
 80097cc:	d103      	bne.n	80097d6 <_raise_r+0x42>
 80097ce:	2316      	movs	r3, #22
 80097d0:	6003      	str	r3, [r0, #0]
 80097d2:	2001      	movs	r0, #1
 80097d4:	e7e7      	b.n	80097a6 <_raise_r+0x12>
 80097d6:	2400      	movs	r4, #0
 80097d8:	4628      	mov	r0, r5
 80097da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097de:	4798      	blx	r3
 80097e0:	2000      	movs	r0, #0
 80097e2:	e7e0      	b.n	80097a6 <_raise_r+0x12>

080097e4 <raise>:
 80097e4:	4b02      	ldr	r3, [pc, #8]	; (80097f0 <raise+0xc>)
 80097e6:	4601      	mov	r1, r0
 80097e8:	6818      	ldr	r0, [r3, #0]
 80097ea:	f7ff bfd3 	b.w	8009794 <_raise_r>
 80097ee:	bf00      	nop
 80097f0:	20000010 	.word	0x20000010

080097f4 <_kill_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	2300      	movs	r3, #0
 80097f8:	4d06      	ldr	r5, [pc, #24]	; (8009814 <_kill_r+0x20>)
 80097fa:	4604      	mov	r4, r0
 80097fc:	4608      	mov	r0, r1
 80097fe:	4611      	mov	r1, r2
 8009800:	602b      	str	r3, [r5, #0]
 8009802:	f7f8 fb54 	bl	8001eae <_kill>
 8009806:	1c43      	adds	r3, r0, #1
 8009808:	d102      	bne.n	8009810 <_kill_r+0x1c>
 800980a:	682b      	ldr	r3, [r5, #0]
 800980c:	b103      	cbz	r3, 8009810 <_kill_r+0x1c>
 800980e:	6023      	str	r3, [r4, #0]
 8009810:	bd38      	pop	{r3, r4, r5, pc}
 8009812:	bf00      	nop
 8009814:	20000824 	.word	0x20000824

08009818 <_getpid_r>:
 8009818:	f7f8 bb47 	b.w	8001eaa <_getpid>

0800981c <__sread>:
 800981c:	b510      	push	{r4, lr}
 800981e:	460c      	mov	r4, r1
 8009820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009824:	f000 f894 	bl	8009950 <_read_r>
 8009828:	2800      	cmp	r0, #0
 800982a:	bfab      	itete	ge
 800982c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800982e:	89a3      	ldrhlt	r3, [r4, #12]
 8009830:	181b      	addge	r3, r3, r0
 8009832:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009836:	bfac      	ite	ge
 8009838:	6563      	strge	r3, [r4, #84]	; 0x54
 800983a:	81a3      	strhlt	r3, [r4, #12]
 800983c:	bd10      	pop	{r4, pc}

0800983e <__swrite>:
 800983e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009842:	461f      	mov	r7, r3
 8009844:	898b      	ldrh	r3, [r1, #12]
 8009846:	4605      	mov	r5, r0
 8009848:	05db      	lsls	r3, r3, #23
 800984a:	460c      	mov	r4, r1
 800984c:	4616      	mov	r6, r2
 800984e:	d505      	bpl.n	800985c <__swrite+0x1e>
 8009850:	2302      	movs	r3, #2
 8009852:	2200      	movs	r2, #0
 8009854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009858:	f000 f868 	bl	800992c <_lseek_r>
 800985c:	89a3      	ldrh	r3, [r4, #12]
 800985e:	4632      	mov	r2, r6
 8009860:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009864:	81a3      	strh	r3, [r4, #12]
 8009866:	4628      	mov	r0, r5
 8009868:	463b      	mov	r3, r7
 800986a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800986e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009872:	f000 b817 	b.w	80098a4 <_write_r>

08009876 <__sseek>:
 8009876:	b510      	push	{r4, lr}
 8009878:	460c      	mov	r4, r1
 800987a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800987e:	f000 f855 	bl	800992c <_lseek_r>
 8009882:	1c43      	adds	r3, r0, #1
 8009884:	89a3      	ldrh	r3, [r4, #12]
 8009886:	bf15      	itete	ne
 8009888:	6560      	strne	r0, [r4, #84]	; 0x54
 800988a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800988e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009892:	81a3      	strheq	r3, [r4, #12]
 8009894:	bf18      	it	ne
 8009896:	81a3      	strhne	r3, [r4, #12]
 8009898:	bd10      	pop	{r4, pc}

0800989a <__sclose>:
 800989a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800989e:	f000 b813 	b.w	80098c8 <_close_r>
	...

080098a4 <_write_r>:
 80098a4:	b538      	push	{r3, r4, r5, lr}
 80098a6:	4604      	mov	r4, r0
 80098a8:	4608      	mov	r0, r1
 80098aa:	4611      	mov	r1, r2
 80098ac:	2200      	movs	r2, #0
 80098ae:	4d05      	ldr	r5, [pc, #20]	; (80098c4 <_write_r+0x20>)
 80098b0:	602a      	str	r2, [r5, #0]
 80098b2:	461a      	mov	r2, r3
 80098b4:	f7f8 fb17 	bl	8001ee6 <_write>
 80098b8:	1c43      	adds	r3, r0, #1
 80098ba:	d102      	bne.n	80098c2 <_write_r+0x1e>
 80098bc:	682b      	ldr	r3, [r5, #0]
 80098be:	b103      	cbz	r3, 80098c2 <_write_r+0x1e>
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	bd38      	pop	{r3, r4, r5, pc}
 80098c4:	20000824 	.word	0x20000824

080098c8 <_close_r>:
 80098c8:	b538      	push	{r3, r4, r5, lr}
 80098ca:	2300      	movs	r3, #0
 80098cc:	4d05      	ldr	r5, [pc, #20]	; (80098e4 <_close_r+0x1c>)
 80098ce:	4604      	mov	r4, r0
 80098d0:	4608      	mov	r0, r1
 80098d2:	602b      	str	r3, [r5, #0]
 80098d4:	f7f8 fb15 	bl	8001f02 <_close>
 80098d8:	1c43      	adds	r3, r0, #1
 80098da:	d102      	bne.n	80098e2 <_close_r+0x1a>
 80098dc:	682b      	ldr	r3, [r5, #0]
 80098de:	b103      	cbz	r3, 80098e2 <_close_r+0x1a>
 80098e0:	6023      	str	r3, [r4, #0]
 80098e2:	bd38      	pop	{r3, r4, r5, pc}
 80098e4:	20000824 	.word	0x20000824

080098e8 <_fstat_r>:
 80098e8:	b538      	push	{r3, r4, r5, lr}
 80098ea:	2300      	movs	r3, #0
 80098ec:	4d06      	ldr	r5, [pc, #24]	; (8009908 <_fstat_r+0x20>)
 80098ee:	4604      	mov	r4, r0
 80098f0:	4608      	mov	r0, r1
 80098f2:	4611      	mov	r1, r2
 80098f4:	602b      	str	r3, [r5, #0]
 80098f6:	f7f8 fb07 	bl	8001f08 <_fstat>
 80098fa:	1c43      	adds	r3, r0, #1
 80098fc:	d102      	bne.n	8009904 <_fstat_r+0x1c>
 80098fe:	682b      	ldr	r3, [r5, #0]
 8009900:	b103      	cbz	r3, 8009904 <_fstat_r+0x1c>
 8009902:	6023      	str	r3, [r4, #0]
 8009904:	bd38      	pop	{r3, r4, r5, pc}
 8009906:	bf00      	nop
 8009908:	20000824 	.word	0x20000824

0800990c <_isatty_r>:
 800990c:	b538      	push	{r3, r4, r5, lr}
 800990e:	2300      	movs	r3, #0
 8009910:	4d05      	ldr	r5, [pc, #20]	; (8009928 <_isatty_r+0x1c>)
 8009912:	4604      	mov	r4, r0
 8009914:	4608      	mov	r0, r1
 8009916:	602b      	str	r3, [r5, #0]
 8009918:	f7f8 fafb 	bl	8001f12 <_isatty>
 800991c:	1c43      	adds	r3, r0, #1
 800991e:	d102      	bne.n	8009926 <_isatty_r+0x1a>
 8009920:	682b      	ldr	r3, [r5, #0]
 8009922:	b103      	cbz	r3, 8009926 <_isatty_r+0x1a>
 8009924:	6023      	str	r3, [r4, #0]
 8009926:	bd38      	pop	{r3, r4, r5, pc}
 8009928:	20000824 	.word	0x20000824

0800992c <_lseek_r>:
 800992c:	b538      	push	{r3, r4, r5, lr}
 800992e:	4604      	mov	r4, r0
 8009930:	4608      	mov	r0, r1
 8009932:	4611      	mov	r1, r2
 8009934:	2200      	movs	r2, #0
 8009936:	4d05      	ldr	r5, [pc, #20]	; (800994c <_lseek_r+0x20>)
 8009938:	602a      	str	r2, [r5, #0]
 800993a:	461a      	mov	r2, r3
 800993c:	f7f8 faeb 	bl	8001f16 <_lseek>
 8009940:	1c43      	adds	r3, r0, #1
 8009942:	d102      	bne.n	800994a <_lseek_r+0x1e>
 8009944:	682b      	ldr	r3, [r5, #0]
 8009946:	b103      	cbz	r3, 800994a <_lseek_r+0x1e>
 8009948:	6023      	str	r3, [r4, #0]
 800994a:	bd38      	pop	{r3, r4, r5, pc}
 800994c:	20000824 	.word	0x20000824

08009950 <_read_r>:
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	4604      	mov	r4, r0
 8009954:	4608      	mov	r0, r1
 8009956:	4611      	mov	r1, r2
 8009958:	2200      	movs	r2, #0
 800995a:	4d05      	ldr	r5, [pc, #20]	; (8009970 <_read_r+0x20>)
 800995c:	602a      	str	r2, [r5, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	f7f8 fab3 	bl	8001eca <_read>
 8009964:	1c43      	adds	r3, r0, #1
 8009966:	d102      	bne.n	800996e <_read_r+0x1e>
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	b103      	cbz	r3, 800996e <_read_r+0x1e>
 800996c:	6023      	str	r3, [r4, #0]
 800996e:	bd38      	pop	{r3, r4, r5, pc}
 8009970:	20000824 	.word	0x20000824

08009974 <memcmp>:
 8009974:	b510      	push	{r4, lr}
 8009976:	3901      	subs	r1, #1
 8009978:	4402      	add	r2, r0
 800997a:	4290      	cmp	r0, r2
 800997c:	d101      	bne.n	8009982 <memcmp+0xe>
 800997e:	2000      	movs	r0, #0
 8009980:	e005      	b.n	800998e <memcmp+0x1a>
 8009982:	7803      	ldrb	r3, [r0, #0]
 8009984:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009988:	42a3      	cmp	r3, r4
 800998a:	d001      	beq.n	8009990 <memcmp+0x1c>
 800998c:	1b18      	subs	r0, r3, r4
 800998e:	bd10      	pop	{r4, pc}
 8009990:	3001      	adds	r0, #1
 8009992:	e7f2      	b.n	800997a <memcmp+0x6>
 8009994:	0000      	movs	r0, r0
	...

08009998 <floor>:
 8009998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800999c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80099a0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80099a4:	2e13      	cmp	r6, #19
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	4607      	mov	r7, r0
 80099ac:	460c      	mov	r4, r1
 80099ae:	4605      	mov	r5, r0
 80099b0:	dc33      	bgt.n	8009a1a <floor+0x82>
 80099b2:	2e00      	cmp	r6, #0
 80099b4:	da14      	bge.n	80099e0 <floor+0x48>
 80099b6:	a334      	add	r3, pc, #208	; (adr r3, 8009a88 <floor+0xf0>)
 80099b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099bc:	f7f8 fae0 	bl	8001f80 <__adddf3>
 80099c0:	2200      	movs	r2, #0
 80099c2:	2300      	movs	r3, #0
 80099c4:	f7f8 ff22 	bl	800280c <__aeabi_dcmpgt>
 80099c8:	b138      	cbz	r0, 80099da <floor+0x42>
 80099ca:	2c00      	cmp	r4, #0
 80099cc:	da58      	bge.n	8009a80 <floor+0xe8>
 80099ce:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80099d2:	431d      	orrs	r5, r3
 80099d4:	d001      	beq.n	80099da <floor+0x42>
 80099d6:	2500      	movs	r5, #0
 80099d8:	4c2d      	ldr	r4, [pc, #180]	; (8009a90 <floor+0xf8>)
 80099da:	4623      	mov	r3, r4
 80099dc:	462f      	mov	r7, r5
 80099de:	e025      	b.n	8009a2c <floor+0x94>
 80099e0:	4a2c      	ldr	r2, [pc, #176]	; (8009a94 <floor+0xfc>)
 80099e2:	fa42 f806 	asr.w	r8, r2, r6
 80099e6:	ea01 0208 	and.w	r2, r1, r8
 80099ea:	4302      	orrs	r2, r0
 80099ec:	d01e      	beq.n	8009a2c <floor+0x94>
 80099ee:	a326      	add	r3, pc, #152	; (adr r3, 8009a88 <floor+0xf0>)
 80099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f4:	f7f8 fac4 	bl	8001f80 <__adddf3>
 80099f8:	2200      	movs	r2, #0
 80099fa:	2300      	movs	r3, #0
 80099fc:	f7f8 ff06 	bl	800280c <__aeabi_dcmpgt>
 8009a00:	2800      	cmp	r0, #0
 8009a02:	d0ea      	beq.n	80099da <floor+0x42>
 8009a04:	2c00      	cmp	r4, #0
 8009a06:	bfbe      	ittt	lt
 8009a08:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009a0c:	fa43 f606 	asrlt.w	r6, r3, r6
 8009a10:	19a4      	addlt	r4, r4, r6
 8009a12:	2500      	movs	r5, #0
 8009a14:	ea24 0408 	bic.w	r4, r4, r8
 8009a18:	e7df      	b.n	80099da <floor+0x42>
 8009a1a:	2e33      	cmp	r6, #51	; 0x33
 8009a1c:	dd0a      	ble.n	8009a34 <floor+0x9c>
 8009a1e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009a22:	d103      	bne.n	8009a2c <floor+0x94>
 8009a24:	f7f8 faac 	bl	8001f80 <__adddf3>
 8009a28:	4607      	mov	r7, r0
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	4619      	mov	r1, r3
 8009a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a34:	f04f 32ff 	mov.w	r2, #4294967295
 8009a38:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8009a3c:	fa22 f808 	lsr.w	r8, r2, r8
 8009a40:	ea18 0f00 	tst.w	r8, r0
 8009a44:	d0f2      	beq.n	8009a2c <floor+0x94>
 8009a46:	a310      	add	r3, pc, #64	; (adr r3, 8009a88 <floor+0xf0>)
 8009a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4c:	f7f8 fa98 	bl	8001f80 <__adddf3>
 8009a50:	2200      	movs	r2, #0
 8009a52:	2300      	movs	r3, #0
 8009a54:	f7f8 feda 	bl	800280c <__aeabi_dcmpgt>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	d0be      	beq.n	80099da <floor+0x42>
 8009a5c:	2c00      	cmp	r4, #0
 8009a5e:	da02      	bge.n	8009a66 <floor+0xce>
 8009a60:	2e14      	cmp	r6, #20
 8009a62:	d103      	bne.n	8009a6c <floor+0xd4>
 8009a64:	3401      	adds	r4, #1
 8009a66:	ea25 0508 	bic.w	r5, r5, r8
 8009a6a:	e7b6      	b.n	80099da <floor+0x42>
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009a72:	fa03 f606 	lsl.w	r6, r3, r6
 8009a76:	4435      	add	r5, r6
 8009a78:	42bd      	cmp	r5, r7
 8009a7a:	bf38      	it	cc
 8009a7c:	18e4      	addcc	r4, r4, r3
 8009a7e:	e7f2      	b.n	8009a66 <floor+0xce>
 8009a80:	2500      	movs	r5, #0
 8009a82:	462c      	mov	r4, r5
 8009a84:	e7a9      	b.n	80099da <floor+0x42>
 8009a86:	bf00      	nop
 8009a88:	8800759c 	.word	0x8800759c
 8009a8c:	7e37e43c 	.word	0x7e37e43c
 8009a90:	bff00000 	.word	0xbff00000
 8009a94:	000fffff 	.word	0x000fffff

08009a98 <_init>:
 8009a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a9a:	bf00      	nop
 8009a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a9e:	bc08      	pop	{r3}
 8009aa0:	469e      	mov	lr, r3
 8009aa2:	4770      	bx	lr

08009aa4 <_fini>:
 8009aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa6:	bf00      	nop
 8009aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aaa:	bc08      	pop	{r3}
 8009aac:	469e      	mov	lr, r3
 8009aae:	4770      	bx	lr
