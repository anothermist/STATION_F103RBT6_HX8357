
STATION_F103RB_HX8357.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c60  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011d74  08009d70  08009d70  00019d70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bae4  0801bae4  000301e0  2**0
                  CONTENTS
  4 .ARM          00000000  0801bae4  0801bae4  000301e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801bae4  0801bae4  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bae4  0801bae4  0002bae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bae8  0801bae8  0002bae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801baec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a8  200001e0  0801bccc  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000888  0801bccc  00030888  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015fa1  00000000  00000000  00030209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000247f  00000000  00000000  000461aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00006918  00000000  00000000  00048629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  0004ef48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013c8  00000000  00000000  0004ef98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1c8  00000000  00000000  00050360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009134d  00000000  00000000  0005d528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee875  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e60  00000000  00000000  000ee8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00019c3e  00000000  00000000  000f0728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009d58 	.word	0x08009d58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009d58 	.word	0x08009d58

08000150 <LCD_Bus>:
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
}

inline static void LCD_Bus(uint16_t val)
{
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8000150:	0bc3      	lsrs	r3, r0, #15
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 8000152:	bf14      	ite	ne
 8000154:	2302      	movne	r3, #2
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000156:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 800015a:	4a30      	ldr	r2, [pc, #192]	; (800021c <LCD_Bus+0xcc>)
 800015c:	6113      	str	r3, [r2, #16]
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800015e:	0443      	lsls	r3, r0, #17
    GPIOx->BSRR = GPIO_Pin;
 8000160:	bf4c      	ite	mi
 8000162:	2301      	movmi	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000164:	f44f 3380 	movpl.w	r3, #65536	; 0x10000
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8000168:	f410 5f00 	tst.w	r0, #8192	; 0x2000
    GPIOx->BSRR = GPIO_Pin;
 800016c:	bf14      	ite	ne
 800016e:	2108      	movne	r1, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000170:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
 8000174:	6113      	str	r3, [r2, #16]
 8000176:	4b2a      	ldr	r3, [pc, #168]	; (8000220 <LCD_Bus+0xd0>)
 8000178:	6119      	str	r1, [r3, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 800017a:	04c1      	lsls	r1, r0, #19
    GPIOx->BSRR = GPIO_Pin;
 800017c:	bf4c      	ite	mi
 800017e:	2104      	movmi	r1, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000180:	f44f 2180 	movpl.w	r1, #262144	; 0x40000
 8000184:	6119      	str	r1, [r3, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8000186:	0501      	lsls	r1, r0, #20
    GPIOx->BSRR = GPIO_Pin;
 8000188:	bf4c      	ite	mi
 800018a:	2102      	movmi	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800018c:	f44f 3100 	movpl.w	r1, #131072	; 0x20000
 8000190:	6119      	str	r1, [r3, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8000192:	0541      	lsls	r1, r0, #21
    GPIOx->BSRR = GPIO_Pin;
 8000194:	bf4c      	ite	mi
 8000196:	2101      	movmi	r1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000198:	f44f 3180 	movpl.w	r1, #65536	; 0x10000
 800019c:	6119      	str	r1, [r3, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 800019e:	0581      	lsls	r1, r0, #22
    GPIOx->BSRR = GPIO_Pin;
 80001a0:	bf4c      	ite	mi
 80001a2:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001a6:	f04f 4100 	movpl.w	r1, #2147483648	; 0x80000000
 80001aa:	6119      	str	r1, [r3, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80001ac:	05c1      	lsls	r1, r0, #23
    GPIOx->BSRR = GPIO_Pin;
 80001ae:	bf4c      	ite	mi
 80001b0:	f44f 4180 	movmi.w	r1, #16384	; 0x4000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001b4:	f04f 4180 	movpl.w	r1, #1073741824	; 0x40000000
 80001b8:	6119      	str	r1, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80001ba:	0601      	lsls	r1, r0, #24
    GPIOx->BSRR = GPIO_Pin;
 80001bc:	bf4c      	ite	mi
 80001be:	2104      	movmi	r1, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001c0:	f44f 2180 	movpl.w	r1, #262144	; 0x40000
 80001c4:	6111      	str	r1, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80001c6:	0641      	lsls	r1, r0, #25
    GPIOx->BSRR = GPIO_Pin;
 80001c8:	bf4c      	ite	mi
 80001ca:	2108      	movmi	r1, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001cc:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
 80001d0:	6111      	str	r1, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80001d2:	0681      	lsls	r1, r0, #26
    GPIOx->BSRR = GPIO_Pin;
 80001d4:	bf4c      	ite	mi
 80001d6:	2110      	movmi	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001d8:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 80001dc:	6111      	str	r1, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80001de:	06c1      	lsls	r1, r0, #27
    GPIOx->BSRR = GPIO_Pin;
 80001e0:	bf4c      	ite	mi
 80001e2:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001e4:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
 80001e8:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80001ea:	0701      	lsls	r1, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 80001ec:	bf4c      	ite	mi
 80001ee:	2140      	movmi	r1, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001f0:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
 80001f4:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80001f6:	0741      	lsls	r1, r0, #29
    GPIOx->BSRR = GPIO_Pin;
 80001f8:	bf4c      	ite	mi
 80001fa:	2180      	movmi	r1, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001fc:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
 8000200:	6111      	str	r1, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000202:	0781      	lsls	r1, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 8000204:	bf4c      	ite	mi
 8000206:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000208:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 800020c:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800020e:	07c2      	lsls	r2, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 8000210:	bf4c      	ite	mi
 8000212:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000214:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000218:	611a      	str	r2, [r3, #16]
}
 800021a:	4770      	bx	lr
 800021c:	40010800 	.word	0x40010800
 8000220:	40011000 	.word	0x40011000

08000224 <LCD_Send_Cmd>:
 8000224:	f44f 3380 	mov.w	r3, #65536	; 0x10000

inline static void LCD_Send_Cmd(uint16_t cmd)
{
 8000228:	b510      	push	{r4, lr}
 800022a:	4c08      	ldr	r4, [pc, #32]	; (800024c <LCD_Send_Cmd+0x28>)
 800022c:	6123      	str	r3, [r4, #16]
 800022e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000232:	6123      	str	r3, [r4, #16]
	LCD_RS_R
	LCD_CS_R
	LCD_Bus(cmd);
 8000234:	f7ff ff8c 	bl	8000150 <LCD_Bus>
 8000238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800023c:	6123      	str	r3, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 800023e:	2302      	movs	r3, #2
 8000240:	6123      	str	r3, [r4, #16]
 8000242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000246:	6123      	str	r3, [r4, #16]
	LCD_WR_R
	//_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 8000248:	bd10      	pop	{r4, pc}
 800024a:	bf00      	nop
 800024c:	40010c00 	.word	0x40010c00

08000250 <LCD_Send_Dat>:
 8000250:	2301      	movs	r3, #1

inline static void LCD_Send_Dat(uint16_t dat)
{
 8000252:	b510      	push	{r4, lr}
 8000254:	4c07      	ldr	r4, [pc, #28]	; (8000274 <LCD_Send_Dat+0x24>)
 8000256:	6123      	str	r3, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000258:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800025c:	6123      	str	r3, [r4, #16]
	LCD_RS_S
	LCD_CS_R	
	LCD_Bus(dat);
 800025e:	f7ff ff77 	bl	8000150 <LCD_Bus>
 8000262:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000266:	6123      	str	r3, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000268:	2302      	movs	r3, #2
 800026a:	6123      	str	r3, [r4, #16]
 800026c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000270:	6123      	str	r3, [r4, #16]
	LCD_WR_R
//	_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 8000272:	bd10      	pop	{r4, pc}
 8000274:	40010c00 	.word	0x40010c00

08000278 <LCD_Rect_Fill>:
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(0, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 8000278:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	4680      	mov	r8, r0
	uint32_t i = 0;
	uint32_t j = (uint32_t) w * (uint32_t) h;
	LCD_Window(y, x, y + h - 1, x + w - 1);
 800027e:	f108 35ff 	add.w	r5, r8, #4294967295
 8000282:	1e48      	subs	r0, r1, #1
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8000284:	fb03 f702 	mul.w	r7, r3, r2
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000288:	442a      	add	r2, r5
 800028a:	4403      	add	r3, r0
 800028c:	b295      	uxth	r5, r2
	data[0] = x1 >> 8;
 800028e:	0a0a      	lsrs	r2, r1, #8
 8000290:	f88d 2004 	strb.w	r2, [sp, #4]
	LCD_Send_Cmd(HX8357_CASET);
 8000294:	202a      	movs	r0, #42	; 0x2a
  data[2] = x2 >> 8;
 8000296:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800029a:	f10d 0904 	add.w	r9, sp, #4
{
 800029e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  data[1] = x1 & 0xFF;
 80002a0:	f88d 1005 	strb.w	r1, [sp, #5]
  data[2] = x2 >> 8;
 80002a4:	f88d 2006 	strb.w	r2, [sp, #6]
  data[3] = x2 & 0xFF;
 80002a8:	f88d 3007 	strb.w	r3, [sp, #7]
	LCD_Send_Cmd(HX8357_CASET);
 80002ac:	46ca      	mov	sl, r9
 80002ae:	f7ff ffb9 	bl	8000224 <LCD_Send_Cmd>
 80002b2:	2404      	movs	r4, #4
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 80002b4:	f81a 0b01 	ldrb.w	r0, [sl], #1
 80002b8:	3c01      	subs	r4, #1
 80002ba:	f7ff ffc9 	bl	8000250 <LCD_Send_Dat>
 80002be:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80002c2:	d1f7      	bne.n	80002b4 <LCD_Rect_Fill+0x3c>
	data[0] = y1 >> 8;
 80002c4:	ea4f 2318 	mov.w	r3, r8, lsr #8
 80002c8:	f88d 3004 	strb.w	r3, [sp, #4]
	LCD_Send_Cmd(HX8357_PASET);
 80002cc:	202b      	movs	r0, #43	; 0x2b
  data[2] = y2 >> 8;
 80002ce:	0a2b      	lsrs	r3, r5, #8
  data[1] = y1;
 80002d0:	f88d 8005 	strb.w	r8, [sp, #5]
  data[2] = y2 >> 8;
 80002d4:	f88d 3006 	strb.w	r3, [sp, #6]
  data[3] = y2;
 80002d8:	f88d 5007 	strb.w	r5, [sp, #7]
	LCD_Send_Cmd(HX8357_PASET);
 80002dc:	f7ff ffa2 	bl	8000224 <LCD_Send_Cmd>
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 80002e0:	3401      	adds	r4, #1
 80002e2:	f819 0b01 	ldrb.w	r0, [r9], #1
 80002e6:	b2e4      	uxtb	r4, r4
 80002e8:	f7ff ffb2 	bl	8000250 <LCD_Send_Dat>
 80002ec:	2c04      	cmp	r4, #4
 80002ee:	d1f7      	bne.n	80002e0 <LCD_Rect_Fill+0x68>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80002f0:	2400      	movs	r4, #0
  LCD_Send_Cmd(HX83h7_RAMWR);
 80002f2:	202c      	movs	r0, #44	; 0x2c
 80002f4:	f7ff ff96 	bl	8000224 <LCD_Send_Cmd>
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 80002f8:	f3c6 2085 	ubfx	r0, r6, #10, #6
 80002fc:	f3c6 43c4 	ubfx	r3, r6, #19, #5
 8000300:	0140      	lsls	r0, r0, #5
 8000302:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8000306:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 800030a:	4330      	orrs	r0, r6
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 800030c:	42bc      	cmp	r4, r7
 800030e:	d102      	bne.n	8000316 <LCD_Rect_Fill+0x9e>
}
 8000310:	b002      	add	sp, #8
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8000316:	f7ff ff9b 	bl	8000250 <LCD_Send_Dat>
 800031a:	3401      	adds	r4, #1
 800031c:	e7f6      	b.n	800030c <LCD_Rect_Fill+0x94>

0800031e <UART_DMATxHalfCplt>:
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800031e:	4770      	bx	lr

08000320 <HAL_Delay>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000320:	4a03      	ldr	r2, [pc, #12]	; (8000330 <HAL_Delay+0x10>)
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait += (uint32_t)(uwTickFreq);
 8000322:	3001      	adds	r0, #1
  return uwTick;
 8000324:	6811      	ldr	r1, [r2, #0]
 8000326:	6813      	ldr	r3, [r2, #0]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000328:	1a5b      	subs	r3, r3, r1
 800032a:	4283      	cmp	r3, r0
 800032c:	d3fb      	bcc.n	8000326 <HAL_Delay+0x6>
  {
  }
}
 800032e:	4770      	bx	lr
 8000330:	20000200 	.word	0x20000200

08000334 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000334:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000336:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800033a:	2b02      	cmp	r3, #2
 800033c:	d003      	beq.n	8000346 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800033e:	2304      	movs	r3, #4
 8000340:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000342:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8000344:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000346:	6803      	ldr	r3, [r0, #0]
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	f022 020e 	bic.w	r2, r2, #14
 800034e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	f022 0201 	bic.w	r2, r2, #1
 8000356:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000358:	4a17      	ldr	r2, [pc, #92]	; (80003b8 <HAL_DMA_Abort_IT+0x84>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d01c      	beq.n	8000398 <HAL_DMA_Abort_IT+0x64>
 800035e:	3214      	adds	r2, #20
 8000360:	4293      	cmp	r3, r2
 8000362:	d01b      	beq.n	800039c <HAL_DMA_Abort_IT+0x68>
 8000364:	3214      	adds	r2, #20
 8000366:	4293      	cmp	r3, r2
 8000368:	d01a      	beq.n	80003a0 <HAL_DMA_Abort_IT+0x6c>
 800036a:	3214      	adds	r2, #20
 800036c:	4293      	cmp	r3, r2
 800036e:	d01a      	beq.n	80003a6 <HAL_DMA_Abort_IT+0x72>
 8000370:	3214      	adds	r2, #20
 8000372:	4293      	cmp	r3, r2
 8000374:	d01a      	beq.n	80003ac <HAL_DMA_Abort_IT+0x78>
 8000376:	3214      	adds	r2, #20
 8000378:	4293      	cmp	r3, r2
 800037a:	bf0c      	ite	eq
 800037c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000380:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000384:	4a0d      	ldr	r2, [pc, #52]	; (80003bc <HAL_DMA_Abort_IT+0x88>)
 8000386:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800038c:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800038e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000390:	b17b      	cbz	r3, 80003b2 <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 8000392:	4798      	blx	r3
 8000394:	2000      	movs	r0, #0
 8000396:	e7d5      	b.n	8000344 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000398:	2301      	movs	r3, #1
 800039a:	e7f3      	b.n	8000384 <HAL_DMA_Abort_IT+0x50>
 800039c:	2310      	movs	r3, #16
 800039e:	e7f1      	b.n	8000384 <HAL_DMA_Abort_IT+0x50>
 80003a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003a4:	e7ee      	b.n	8000384 <HAL_DMA_Abort_IT+0x50>
 80003a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003aa:	e7eb      	b.n	8000384 <HAL_DMA_Abort_IT+0x50>
 80003ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b0:	e7e8      	b.n	8000384 <HAL_DMA_Abort_IT+0x50>
 80003b2:	4618      	mov	r0, r3
 80003b4:	e7c6      	b.n	8000344 <HAL_DMA_Abort_IT+0x10>
 80003b6:	bf00      	nop
 80003b8:	40020008 	.word	0x40020008
 80003bc:	40020000 	.word	0x40020000

080003c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80003c0:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80003c2:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80003c4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80003c6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80003c8:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80003ca:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80003cc:	4095      	lsls	r5, r2
 80003ce:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80003d0:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80003d2:	d032      	beq.n	800043a <HAL_DMA_IRQHandler+0x7a>
 80003d4:	074d      	lsls	r5, r1, #29
 80003d6:	d530      	bpl.n	800043a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80003dc:	bf5e      	ittt	pl
 80003de:	681a      	ldrpl	r2, [r3, #0]
 80003e0:	f022 0204 	bicpl.w	r2, r2, #4
 80003e4:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80003e6:	4a3d      	ldr	r2, [pc, #244]	; (80004dc <HAL_DMA_IRQHandler+0x11c>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d019      	beq.n	8000420 <HAL_DMA_IRQHandler+0x60>
 80003ec:	3214      	adds	r2, #20
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d018      	beq.n	8000424 <HAL_DMA_IRQHandler+0x64>
 80003f2:	3214      	adds	r2, #20
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d017      	beq.n	8000428 <HAL_DMA_IRQHandler+0x68>
 80003f8:	3214      	adds	r2, #20
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d017      	beq.n	800042e <HAL_DMA_IRQHandler+0x6e>
 80003fe:	3214      	adds	r2, #20
 8000400:	4293      	cmp	r3, r2
 8000402:	d017      	beq.n	8000434 <HAL_DMA_IRQHandler+0x74>
 8000404:	3214      	adds	r2, #20
 8000406:	4293      	cmp	r3, r2
 8000408:	bf0c      	ite	eq
 800040a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800040e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000412:	4a33      	ldr	r2, [pc, #204]	; (80004e0 <HAL_DMA_IRQHandler+0x120>)
 8000414:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000416:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8000418:	2b00      	cmp	r3, #0
 800041a:	d05c      	beq.n	80004d6 <HAL_DMA_IRQHandler+0x116>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 800041c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800041e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000420:	2304      	movs	r3, #4
 8000422:	e7f6      	b.n	8000412 <HAL_DMA_IRQHandler+0x52>
 8000424:	2340      	movs	r3, #64	; 0x40
 8000426:	e7f4      	b.n	8000412 <HAL_DMA_IRQHandler+0x52>
 8000428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800042c:	e7f1      	b.n	8000412 <HAL_DMA_IRQHandler+0x52>
 800042e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000432:	e7ee      	b.n	8000412 <HAL_DMA_IRQHandler+0x52>
 8000434:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000438:	e7eb      	b.n	8000412 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800043a:	2502      	movs	r5, #2
 800043c:	4095      	lsls	r5, r2
 800043e:	4225      	tst	r5, r4
 8000440:	d035      	beq.n	80004ae <HAL_DMA_IRQHandler+0xee>
 8000442:	078d      	lsls	r5, r1, #30
 8000444:	d533      	bpl.n	80004ae <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	0694      	lsls	r4, r2, #26
 800044a:	d406      	bmi.n	800045a <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	f022 020a 	bic.w	r2, r2, #10
 8000452:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000454:	2201      	movs	r2, #1
 8000456:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800045a:	4a20      	ldr	r2, [pc, #128]	; (80004dc <HAL_DMA_IRQHandler+0x11c>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d019      	beq.n	8000494 <HAL_DMA_IRQHandler+0xd4>
 8000460:	3214      	adds	r2, #20
 8000462:	4293      	cmp	r3, r2
 8000464:	d018      	beq.n	8000498 <HAL_DMA_IRQHandler+0xd8>
 8000466:	3214      	adds	r2, #20
 8000468:	4293      	cmp	r3, r2
 800046a:	d017      	beq.n	800049c <HAL_DMA_IRQHandler+0xdc>
 800046c:	3214      	adds	r2, #20
 800046e:	4293      	cmp	r3, r2
 8000470:	d017      	beq.n	80004a2 <HAL_DMA_IRQHandler+0xe2>
 8000472:	3214      	adds	r2, #20
 8000474:	4293      	cmp	r3, r2
 8000476:	d017      	beq.n	80004a8 <HAL_DMA_IRQHandler+0xe8>
 8000478:	3214      	adds	r2, #20
 800047a:	4293      	cmp	r3, r2
 800047c:	bf0c      	ite	eq
 800047e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000482:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000486:	4a16      	ldr	r2, [pc, #88]	; (80004e0 <HAL_DMA_IRQHandler+0x120>)
 8000488:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800048a:	2300      	movs	r3, #0
 800048c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000490:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000492:	e7c1      	b.n	8000418 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000494:	2302      	movs	r3, #2
 8000496:	e7f6      	b.n	8000486 <HAL_DMA_IRQHandler+0xc6>
 8000498:	2320      	movs	r3, #32
 800049a:	e7f4      	b.n	8000486 <HAL_DMA_IRQHandler+0xc6>
 800049c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004a0:	e7f1      	b.n	8000486 <HAL_DMA_IRQHandler+0xc6>
 80004a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004a6:	e7ee      	b.n	8000486 <HAL_DMA_IRQHandler+0xc6>
 80004a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004ac:	e7eb      	b.n	8000486 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80004ae:	2508      	movs	r5, #8
 80004b0:	4095      	lsls	r5, r2
 80004b2:	4225      	tst	r5, r4
 80004b4:	d00f      	beq.n	80004d6 <HAL_DMA_IRQHandler+0x116>
 80004b6:	0709      	lsls	r1, r1, #28
 80004b8:	d50d      	bpl.n	80004d6 <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80004ba:	6819      	ldr	r1, [r3, #0]
 80004bc:	f021 010e 	bic.w	r1, r1, #14
 80004c0:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80004c2:	2301      	movs	r3, #1
 80004c4:	fa03 f202 	lsl.w	r2, r3, r2
 80004c8:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80004ca:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80004cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004d0:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80004d2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80004d4:	e7a0      	b.n	8000418 <HAL_DMA_IRQHandler+0x58>
}
 80004d6:	bc70      	pop	{r4, r5, r6}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40020008 	.word	0x40020008
 80004e0:	40020000 	.word	0x40020000

080004e4 <HAL_GPIO_Init>:
{
 80004e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 80004e8:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80004ea:	4616      	mov	r6, r2
        __HAL_RCC_AFIO_CLK_ENABLE();
 80004ec:	4f64      	ldr	r7, [pc, #400]	; (8000680 <HAL_GPIO_Init+0x19c>)
 80004ee:	4b65      	ldr	r3, [pc, #404]	; (8000684 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 80004f0:	f8df c194 	ldr.w	ip, [pc, #404]	; 8000688 <HAL_GPIO_Init+0x1a4>
 80004f4:	f8df e194 	ldr.w	lr, [pc, #404]	; 800068c <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004f8:	680d      	ldr	r5, [r1, #0]
 80004fa:	fa35 f406 	lsrs.w	r4, r5, r6
 80004fe:	d102      	bne.n	8000506 <HAL_GPIO_Init+0x22>
}
 8000500:	b003      	add	sp, #12
 8000502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000506:	f04f 0801 	mov.w	r8, #1
 800050a:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800050e:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8000512:	ea38 0505 	bics.w	r5, r8, r5
 8000516:	d17b      	bne.n	8000610 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8000518:	684d      	ldr	r5, [r1, #4]
 800051a:	2d03      	cmp	r5, #3
 800051c:	d807      	bhi.n	800052e <HAL_GPIO_Init+0x4a>
 800051e:	3d01      	subs	r5, #1
 8000520:	2d02      	cmp	r5, #2
 8000522:	f200 8088 	bhi.w	8000636 <HAL_GPIO_Init+0x152>
 8000526:	e8df f005 	tbb	[pc, r5]
 800052a:	9b96      	.short	0x9b96
 800052c:	a1          	.byte	0xa1
 800052d:	00          	.byte	0x00
 800052e:	2d12      	cmp	r5, #18
 8000530:	f000 8099 	beq.w	8000666 <HAL_GPIO_Init+0x182>
 8000534:	d86e      	bhi.n	8000614 <HAL_GPIO_Init+0x130>
 8000536:	2d11      	cmp	r5, #17
 8000538:	f000 808f 	beq.w	800065a <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800053c:	2cff      	cmp	r4, #255	; 0xff
 800053e:	bf98      	it	ls
 8000540:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000542:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000546:	bf88      	it	hi
 8000548:	f100 0a04 	addhi.w	sl, r0, #4
 800054c:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000550:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000554:	bf88      	it	hi
 8000556:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000558:	fa09 fb05 	lsl.w	fp, r9, r5
 800055c:	ea28 080b 	bic.w	r8, r8, fp
 8000560:	fa02 f505 	lsl.w	r5, r2, r5
 8000564:	ea48 0505 	orr.w	r5, r8, r5
 8000568:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800056c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000570:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000574:	d04c      	beq.n	8000610 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000576:	69bd      	ldr	r5, [r7, #24]
 8000578:	f026 0803 	bic.w	r8, r6, #3
 800057c:	f045 0501 	orr.w	r5, r5, #1
 8000580:	61bd      	str	r5, [r7, #24]
 8000582:	69bd      	ldr	r5, [r7, #24]
 8000584:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000588:	f005 0501 	and.w	r5, r5, #1
 800058c:	9501      	str	r5, [sp, #4]
 800058e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000592:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000596:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000598:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800059c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005a0:	fa09 f90b 	lsl.w	r9, r9, fp
 80005a4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005a8:	4d39      	ldr	r5, [pc, #228]	; (8000690 <HAL_GPIO_Init+0x1ac>)
 80005aa:	42a8      	cmp	r0, r5
 80005ac:	d062      	beq.n	8000674 <HAL_GPIO_Init+0x190>
 80005ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005b2:	42a8      	cmp	r0, r5
 80005b4:	d060      	beq.n	8000678 <HAL_GPIO_Init+0x194>
 80005b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005ba:	42a8      	cmp	r0, r5
 80005bc:	d05e      	beq.n	800067c <HAL_GPIO_Init+0x198>
 80005be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005c2:	42a8      	cmp	r0, r5
 80005c4:	bf0c      	ite	eq
 80005c6:	2503      	moveq	r5, #3
 80005c8:	2504      	movne	r5, #4
 80005ca:	fa05 f50b 	lsl.w	r5, r5, fp
 80005ce:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80005d2:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80005d6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005d8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80005dc:	bf14      	ite	ne
 80005de:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005e0:	43a5      	biceq	r5, r4
 80005e2:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80005e4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005e6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80005ea:	bf14      	ite	ne
 80005ec:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80005ee:	43a5      	biceq	r5, r4
 80005f0:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80005f2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005f4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80005f8:	bf14      	ite	ne
 80005fa:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80005fc:	43a5      	biceq	r5, r4
 80005fe:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000600:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000602:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000606:	bf14      	ite	ne
 8000608:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800060a:	ea25 0404 	biceq.w	r4, r5, r4
 800060e:	60dc      	str	r4, [r3, #12]
	position++;
 8000610:	3601      	adds	r6, #1
 8000612:	e771      	b.n	80004f8 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8000614:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8000694 <HAL_GPIO_Init+0x1b0>
 8000618:	454d      	cmp	r5, r9
 800061a:	d00c      	beq.n	8000636 <HAL_GPIO_Init+0x152>
 800061c:	d817      	bhi.n	800064e <HAL_GPIO_Init+0x16a>
 800061e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000622:	454d      	cmp	r5, r9
 8000624:	d007      	beq.n	8000636 <HAL_GPIO_Init+0x152>
 8000626:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800062a:	454d      	cmp	r5, r9
 800062c:	d003      	beq.n	8000636 <HAL_GPIO_Init+0x152>
 800062e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000632:	454d      	cmp	r5, r9
 8000634:	d182      	bne.n	800053c <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000636:	688a      	ldr	r2, [r1, #8]
 8000638:	b1d2      	cbz	r2, 8000670 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800063a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800063c:	bf08      	it	eq
 800063e:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000642:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8000646:	bf18      	it	ne
 8000648:	f8c0 8014 	strne.w	r8, [r0, #20]
 800064c:	e776      	b.n	800053c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800064e:	4565      	cmp	r5, ip
 8000650:	d0f1      	beq.n	8000636 <HAL_GPIO_Init+0x152>
 8000652:	4575      	cmp	r5, lr
 8000654:	e7ee      	b.n	8000634 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000656:	68ca      	ldr	r2, [r1, #12]
          break;
 8000658:	e770      	b.n	800053c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800065a:	68ca      	ldr	r2, [r1, #12]
 800065c:	3204      	adds	r2, #4
          break;
 800065e:	e76d      	b.n	800053c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000660:	68ca      	ldr	r2, [r1, #12]
 8000662:	3208      	adds	r2, #8
          break;
 8000664:	e76a      	b.n	800053c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000666:	68ca      	ldr	r2, [r1, #12]
 8000668:	320c      	adds	r2, #12
          break;
 800066a:	e767      	b.n	800053c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800066c:	2200      	movs	r2, #0
 800066e:	e765      	b.n	800053c <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000670:	2204      	movs	r2, #4
 8000672:	e763      	b.n	800053c <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000674:	2500      	movs	r5, #0
 8000676:	e7a8      	b.n	80005ca <HAL_GPIO_Init+0xe6>
 8000678:	2501      	movs	r5, #1
 800067a:	e7a6      	b.n	80005ca <HAL_GPIO_Init+0xe6>
 800067c:	2502      	movs	r5, #2
 800067e:	e7a4      	b.n	80005ca <HAL_GPIO_Init+0xe6>
 8000680:	40021000 	.word	0x40021000
 8000684:	40010400 	.word	0x40010400
 8000688:	10310000 	.word	0x10310000
 800068c:	10320000 	.word	0x10320000
 8000690:	40010800 	.word	0x40010800
 8000694:	10220000 	.word	0x10220000

08000698 <I2C_DMAAbort>:
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
  __IO uint32_t count = 0U;
 8000698:	2300      	movs	r3, #0
{
 800069a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0U;
 800069c:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800069e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80006a0:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80006a4:	4a29      	ldr	r2, [pc, #164]	; (800074c <I2C_DMAAbort+0xb4>)
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80006a6:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80006aa:	6812      	ldr	r2, [r2, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80006ac:	b2c9      	uxtb	r1, r1
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80006ae:	fbb2 f2f0 	udiv	r2, r2, r0
 80006b2:	2023      	movs	r0, #35	; 0x23
 80006b4:	4342      	muls	r2, r0
 80006b6:	9201      	str	r2, [sp, #4]
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
      break;
    }
    count--;
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80006b8:	681a      	ldr	r2, [r3, #0]
    if (count == 0U)
 80006ba:	9801      	ldr	r0, [sp, #4]
 80006bc:	bb30      	cbnz	r0, 800070c <I2C_DMAAbort+0x74>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80006be:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80006c0:	f040 0020 	orr.w	r0, r0, #32
 80006c4:	6418      	str	r0, [r3, #64]	; 0x40

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80006c6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80006c8:	b10c      	cbz	r4, 80006ce <I2C_DMAAbort+0x36>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80006ca:	2000      	movs	r0, #0
 80006cc:	62a0      	str	r0, [r4, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80006ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80006d0:	b108      	cbz	r0, 80006d6 <I2C_DMAAbort+0x3e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80006d2:	2500      	movs	r5, #0
 80006d4:	6285      	str	r5, [r0, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80006d6:	6815      	ldr	r5, [r2, #0]
 80006d8:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 80006dc:	6015      	str	r5, [r2, #0]

  hi2c->XferCount = 0U;
 80006de:	2500      	movs	r5, #0
 80006e0:	855d      	strh	r5, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80006e2:	b104      	cbz	r4, 80006e6 <I2C_DMAAbort+0x4e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80006e4:	6365      	str	r5, [r4, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80006e6:	b100      	cbz	r0, 80006ea <I2C_DMAAbort+0x52>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80006e8:	6345      	str	r5, [r0, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80006ea:	6810      	ldr	r0, [r2, #0]
 80006ec:	f020 0001 	bic.w	r0, r0, #1
 80006f0:	6010      	str	r0, [r2, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80006f2:	f893 003d 	ldrb.w	r0, [r3, #61]	; 0x3d
 80006f6:	2860      	cmp	r0, #96	; 0x60
 80006f8:	d10f      	bne.n	800071a <I2C_DMAAbort+0x82>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80006fa:	2220      	movs	r2, #32
 80006fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000700:	2200      	movs	r2, #0
 8000702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8000706:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8000708:	b003      	add	sp, #12
 800070a:	bd30      	pop	{r4, r5, pc}
    count--;
 800070c:	9801      	ldr	r0, [sp, #4]
 800070e:	3801      	subs	r0, #1
 8000710:	9001      	str	r0, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8000712:	6810      	ldr	r0, [r2, #0]
 8000714:	0580      	lsls	r0, r0, #22
 8000716:	d4d0      	bmi.n	80006ba <I2C_DMAAbort+0x22>
 8000718:	e7d5      	b.n	80006c6 <I2C_DMAAbort+0x2e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800071a:	f001 0128 	and.w	r1, r1, #40	; 0x28
 800071e:	2928      	cmp	r1, #40	; 0x28
 8000720:	d10c      	bne.n	800073c <I2C_DMAAbort+0xa4>
      __HAL_I2C_ENABLE(hi2c);
 8000722:	6810      	ldr	r0, [r2, #0]
 8000724:	f040 0001 	orr.w	r0, r0, #1
 8000728:	6010      	str	r0, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800072a:	6810      	ldr	r0, [r2, #0]
 800072c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8000730:	6010      	str	r0, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8000732:	2200      	movs	r2, #0
 8000734:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8000736:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
 800073a:	e7e5      	b.n	8000708 <I2C_DMAAbort+0x70>
      hi2c->State = HAL_I2C_STATE_READY;
 800073c:	2220      	movs	r2, #32
 800073e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000742:	2200      	movs	r2, #0
 8000744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 8000748:	e7de      	b.n	8000708 <I2C_DMAAbort+0x70>
 800074a:	bf00      	nop
 800074c:	20000000 	.word	0x20000000

08000750 <UART_DMATransmitCplt>:
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000750:	6803      	ldr	r3, [r0, #0]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f013 0320 	ands.w	r3, r3, #32
 8000758:	d10a      	bne.n	8000770 <UART_DMATransmitCplt+0x20>
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800075a:	6a42      	ldr	r2, [r0, #36]	; 0x24
    huart->TxXferCount = 0x00U;
 800075c:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800075e:	6813      	ldr	r3, [r2, #0]
 8000760:	695a      	ldr	r2, [r3, #20]
 8000762:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000766:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8000768:	68da      	ldr	r2, [r3, #12]
 800076a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800076e:	60da      	str	r2, [r3, #12]
}
 8000770:	4770      	bx	lr

08000772 <UART_DMARxHalfCplt>:
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000772:	6a43      	ldr	r3, [r0, #36]	; 0x24

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8000776:	4770      	bx	lr

08000778 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000778:	6a43      	ldr	r3, [r0, #36]	; 0x24

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	6951      	ldr	r1, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800077e:	f893 003d 	ldrb.w	r0, [r3, #61]	; 0x3d
 8000782:	2821      	cmp	r0, #33	; 0x21
 8000784:	d10a      	bne.n	800079c <UART_DMAError+0x24>
 8000786:	0608      	lsls	r0, r1, #24
 8000788:	d508      	bpl.n	800079c <UART_DMAError+0x24>
  {
    huart->TxXferCount = 0x00U;
 800078a:	2100      	movs	r1, #0
 800078c:	84d9      	strh	r1, [r3, #38]	; 0x26
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800078e:	68d1      	ldr	r1, [r2, #12]
 8000790:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000794:	60d1      	str	r1, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8000796:	2120      	movs	r1, #32
 8000798:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800079c:	6951      	ldr	r1, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800079e:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 80007a2:	2822      	cmp	r0, #34	; 0x22
 80007a4:	d117      	bne.n	80007d6 <UART_DMAError+0x5e>
 80007a6:	0649      	lsls	r1, r1, #25
 80007a8:	d515      	bpl.n	80007d6 <UART_DMAError+0x5e>
    huart->RxXferCount = 0x00U;
 80007aa:	2100      	movs	r1, #0
 80007ac:	85d9      	strh	r1, [r3, #46]	; 0x2e
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80007ae:	68d1      	ldr	r1, [r2, #12]
 80007b0:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80007b4:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80007b6:	6951      	ldr	r1, [r2, #20]
 80007b8:	f021 0101 	bic.w	r1, r1, #1
 80007bc:	6151      	str	r1, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80007be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007c0:	2901      	cmp	r1, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80007c2:	bf02      	ittt	eq
 80007c4:	68d1      	ldreq	r1, [r2, #12]
 80007c6:	f021 0110 	biceq.w	r1, r1, #16
 80007ca:	60d1      	streq	r1, [r2, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80007cc:	2220      	movs	r2, #32
 80007ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80007d2:	2200      	movs	r2, #0
 80007d4:	631a      	str	r2, [r3, #48]	; 0x30
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80007d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007d8:	f042 0210 	orr.w	r2, r2, #16
 80007dc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80007de:	4770      	bx	lr

080007e0 <I2C_MemoryTransmit_TXE_BTF.constprop.0>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80007e0:	4b26      	ldr	r3, [pc, #152]	; (800087c <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x9c>)
 80007e2:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
  if (hi2c->EventCount == 0U)
 80007e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80007e8:	b2c9      	uxtb	r1, r1
  if (hi2c->EventCount == 0U)
 80007ea:	b982      	cbnz	r2, 800080e <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x2e>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80007ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80007ee:	6859      	ldr	r1, [r3, #4]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80007f0:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80007f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80007f4:	d105      	bne.n	8000802 <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x22>
 80007f6:	b2d2      	uxtb	r2, r2
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80007f8:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 80007fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80007fc:	3202      	adds	r2, #2
      hi2c->EventCount++;
 80007fe:	655a      	str	r2, [r3, #84]	; 0x54
 8000800:	4770      	bx	lr
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8000802:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000806:	610a      	str	r2, [r1, #16]
      hi2c->EventCount++;
 8000808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800080a:	3201      	adds	r2, #1
 800080c:	e7f7      	b.n	80007fe <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x1e>
  else if (hi2c->EventCount == 1U)
 800080e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000810:	2a01      	cmp	r2, #1
 8000812:	d103      	bne.n	800081c <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8000814:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000816:	6859      	ldr	r1, [r3, #4]
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	e7f4      	b.n	8000806 <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x26>
  else if (hi2c->EventCount == 2U)
 800081c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800081e:	2a02      	cmp	r2, #2
 8000820:	d12b      	bne.n	800087a <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x9a>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8000822:	2922      	cmp	r1, #34	; 0x22
 8000824:	d105      	bne.n	8000832 <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8000826:	6859      	ldr	r1, [r3, #4]
 8000828:	680a      	ldr	r2, [r1, #0]
 800082a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800082e:	600a      	str	r2, [r1, #0]
 8000830:	e7ea      	b.n	8000808 <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x28>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8000832:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8000834:	b292      	uxth	r2, r2
 8000836:	b162      	cbz	r2, 8000852 <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x72>
 8000838:	2921      	cmp	r1, #33	; 0x21
 800083a:	d10a      	bne.n	8000852 <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x72>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800083c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800083e:	6859      	ldr	r1, [r3, #4]
 8000840:	f812 0b01 	ldrb.w	r0, [r2], #1
 8000844:	6108      	str	r0, [r1, #16]
      hi2c->pBuffPtr++;
 8000846:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000848:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800084a:	3a01      	subs	r2, #1
 800084c:	b292      	uxth	r2, r2
 800084e:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000850:	4770      	bx	lr
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8000852:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8000854:	b292      	uxth	r2, r2
 8000856:	b982      	cbnz	r2, 800087a <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x9a>
 8000858:	2921      	cmp	r1, #33	; 0x21
 800085a:	d10e      	bne.n	800087a <I2C_MemoryTransmit_TXE_BTF.constprop.0+0x9a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800085c:	6859      	ldr	r1, [r3, #4]
 800085e:	6848      	ldr	r0, [r1, #4]
 8000860:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000864:	6048      	str	r0, [r1, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000866:	6808      	ldr	r0, [r1, #0]
 8000868:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 800086c:	6008      	str	r0, [r1, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 800086e:	2120      	movs	r1, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->State = HAL_I2C_STATE_READY;
 8000872:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 800087a:	4770      	bx	lr
 800087c:	20000200 	.word	0x20000200

08000880 <I2C_ITError.constprop.0>:
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
 8000880:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000882:	4c4e      	ldr	r4, [pc, #312]	; (80009bc <I2C_ITError.constprop.0+0x13c>)
 8000884:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8000888:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800088c:	b2db      	uxtb	r3, r3
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800088e:	2a10      	cmp	r2, #16
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8000890:	b2d1      	uxtb	r1, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8000892:	d001      	beq.n	8000898 <I2C_ITError.constprop.0+0x18>
 8000894:	2940      	cmp	r1, #64	; 0x40
 8000896:	d115      	bne.n	80008c4 <I2C_ITError.constprop.0+0x44>
 8000898:	2b22      	cmp	r3, #34	; 0x22
 800089a:	d113      	bne.n	80008c4 <I2C_ITError.constprop.0+0x44>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800089c:	6861      	ldr	r1, [r4, #4]
 800089e:	680a      	ldr	r2, [r1, #0]
 80008a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80008a4:	600a      	str	r2, [r1, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80008a6:	6862      	ldr	r2, [r4, #4]
 80008a8:	6852      	ldr	r2, [r2, #4]
 80008aa:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80008ae:	d106      	bne.n	80008be <I2C_ITError.constprop.0+0x3e>
 80008b0:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 80008b2:	bf1e      	ittt	ne
 80008b4:	2320      	movne	r3, #32
 80008b6:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80008ba:	f884 2042 	strbne.w	r2, [r4, #66]	; 0x42
    hi2c->PreviousState = I2C_STATE_NONE;
 80008be:	2300      	movs	r3, #0
 80008c0:	6363      	str	r3, [r4, #52]	; 0x34
 80008c2:	e007      	b.n	80008d4 <I2C_ITError.constprop.0+0x54>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80008c4:	f003 0228 	and.w	r2, r3, #40	; 0x28
 80008c8:	2a28      	cmp	r2, #40	; 0x28
 80008ca:	d1ec      	bne.n	80008a6 <I2C_ITError.constprop.0+0x26>
    hi2c->PreviousState = I2C_STATE_NONE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80008d0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80008d4:	6863      	ldr	r3, [r4, #4]
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80008dc:	d04c      	beq.n	8000978 <I2C_ITError.constprop.0+0xf8>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80008de:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80008e0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80008e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80008e6:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80008e8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	4b34      	ldr	r3, [pc, #208]	; (80009c0 <I2C_ITError.constprop.0+0x140>)
 80008f0:	d028      	beq.n	8000944 <I2C_ITError.constprop.0+0xc4>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80008f2:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80008f4:	f7ff fd1e 	bl	8000334 <HAL_DMA_Abort_IT>
 80008f8:	b150      	cbz	r0, 8000910 <I2C_ITError.constprop.0+0x90>
        __HAL_I2C_DISABLE(hi2c);
 80008fa:	6862      	ldr	r2, [r4, #4]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80008fc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 80008fe:	6813      	ldr	r3, [r2, #0]
 8000900:	f023 0301 	bic.w	r3, r3, #1
 8000904:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8000906:	2320      	movs	r3, #32
 8000908:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800090c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800090e:	4798      	blx	r3
  CurrentError = hi2c->ErrorCode;
 8000910:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8000912:	0719      	lsls	r1, r3, #28
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8000914:	bf1f      	itttt	ne
 8000916:	6862      	ldrne	r2, [r4, #4]
 8000918:	6853      	ldrne	r3, [r2, #4]
 800091a:	f423 63e0 	bicne.w	r3, r3, #1792	; 0x700
 800091e:	6053      	strne	r3, [r2, #4]
  CurrentState = hi2c->State;
 8000920:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8000924:	6c62      	ldr	r2, [r4, #68]	; 0x44
  CurrentState = hi2c->State;
 8000926:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8000928:	0752      	lsls	r2, r2, #29
 800092a:	d50a      	bpl.n	8000942 <I2C_ITError.constprop.0+0xc2>
 800092c:	2b28      	cmp	r3, #40	; 0x28
 800092e:	d108      	bne.n	8000942 <I2C_ITError.constprop.0+0xc2>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000930:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <I2C_ITError.constprop.0+0x144>)
    hi2c->State         = HAL_I2C_STATE_READY;
 8000932:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000934:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->PreviousState = I2C_STATE_NONE;
 8000936:	2300      	movs	r3, #0
 8000938:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->State         = HAL_I2C_STATE_READY;
 800093a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800093e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8000942:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8000944:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000946:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8000948:	f7ff fcf4 	bl	8000334 <HAL_DMA_Abort_IT>
 800094c:	2800      	cmp	r0, #0
 800094e:	d0df      	beq.n	8000910 <I2C_ITError.constprop.0+0x90>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8000950:	6863      	ldr	r3, [r4, #4]
 8000952:	695a      	ldr	r2, [r3, #20]
 8000954:	0651      	lsls	r1, r2, #25
 8000956:	d505      	bpl.n	8000964 <I2C_ITError.constprop.0+0xe4>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000958:	691a      	ldr	r2, [r3, #16]
 800095a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800095c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800095e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000960:	3301      	adds	r3, #1
 8000962:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_I2C_DISABLE(hi2c);
 8000964:	6862      	ldr	r2, [r4, #4]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000966:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        __HAL_I2C_DISABLE(hi2c);
 8000968:	6813      	ldr	r3, [r2, #0]
 800096a:	f023 0301 	bic.w	r3, r3, #1
 800096e:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8000970:	2320      	movs	r3, #32
 8000972:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8000976:	e7c9      	b.n	800090c <I2C_ITError.constprop.0+0x8c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8000978:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 800097c:	2960      	cmp	r1, #96	; 0x60
 800097e:	d112      	bne.n	80009a6 <I2C_ITError.constprop.0+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 8000980:	2120      	movs	r1, #32
 8000982:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000986:	6462      	str	r2, [r4, #68]	; 0x44
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8000988:	695a      	ldr	r2, [r3, #20]
 800098a:	0652      	lsls	r2, r2, #25
 800098c:	d505      	bpl.n	800099a <I2C_ITError.constprop.0+0x11a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800098e:	691a      	ldr	r2, [r3, #16]
 8000990:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000992:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8000994:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000996:	3301      	adds	r3, #1
 8000998:	62a3      	str	r3, [r4, #40]	; 0x28
    __HAL_I2C_DISABLE(hi2c);
 800099a:	6862      	ldr	r2, [r4, #4]
 800099c:	6813      	ldr	r3, [r2, #0]
 800099e:	f023 0301 	bic.w	r3, r3, #1
 80009a2:	6013      	str	r3, [r2, #0]
 80009a4:	e7b4      	b.n	8000910 <I2C_ITError.constprop.0+0x90>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80009a6:	695a      	ldr	r2, [r3, #20]
 80009a8:	0650      	lsls	r0, r2, #25
 80009aa:	d5b1      	bpl.n	8000910 <I2C_ITError.constprop.0+0x90>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80009ac:	691a      	ldr	r2, [r3, #16]
 80009ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009b0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80009b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009b4:	3301      	adds	r3, #1
 80009b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80009b8:	e7aa      	b.n	8000910 <I2C_ITError.constprop.0+0x90>
 80009ba:	bf00      	nop
 80009bc:	20000200 	.word	0x20000200
 80009c0:	08000699 	.word	0x08000699
 80009c4:	ffff0000 	.word	0xffff0000

080009c8 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80009c8:	b510      	push	{r4, lr}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <UART_WaitOnFlagUntilTimeout.constprop.0+0x40>)
 80009cc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80009ce:	681c      	ldr	r4, [r3, #0]
 80009d0:	ea30 0404 	bics.w	r4, r0, r4
 80009d4:	d101      	bne.n	80009da <UART_WaitOnFlagUntilTimeout.constprop.0+0x12>
  return HAL_OK;
 80009d6:	2000      	movs	r0, #0
 80009d8:	e014      	b.n	8000a04 <UART_WaitOnFlagUntilTimeout.constprop.0+0x3c>
  return uwTick;
 80009da:	6814      	ldr	r4, [r2, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80009dc:	1a64      	subs	r4, r4, r1
 80009de:	2c64      	cmp	r4, #100	; 0x64
 80009e0:	d9f5      	bls.n	80009ce <UART_WaitOnFlagUntilTimeout.constprop.0+0x6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80009e2:	68d9      	ldr	r1, [r3, #12]
        __HAL_UNLOCK(huart);
 80009e4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80009e6:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 80009ea:	60d9      	str	r1, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80009ec:	6959      	ldr	r1, [r3, #20]
 80009ee:	f021 0101 	bic.w	r1, r1, #1
 80009f2:	6159      	str	r1, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80009f4:	2320      	movs	r3, #32
 80009f6:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
        huart->RxState = HAL_UART_STATE_READY;
 80009fa:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
        __HAL_UNLOCK(huart);
 80009fe:	2300      	movs	r3, #0
 8000a00:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
}
 8000a04:	bd10      	pop	{r4, pc}
 8000a06:	bf00      	nop
 8000a08:	20000200 	.word	0x20000200

08000a0c <TIM_Base_SetConfig.constprop.0>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000a0c:	4a1d      	ldr	r2, [pc, #116]	; (8000a84 <TIM_Base_SetConfig.constprop.0+0x78>)
  tmpcr1 = TIMx->CR1;
 8000a0e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000a10:	4290      	cmp	r0, r2
 8000a12:	4a1d      	ldr	r2, [pc, #116]	; (8000a88 <TIM_Base_SetConfig.constprop.0+0x7c>)
 8000a14:	d009      	beq.n	8000a2a <TIM_Base_SetConfig.constprop.0+0x1e>
 8000a16:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000a1a:	d006      	beq.n	8000a2a <TIM_Base_SetConfig.constprop.0+0x1e>
 8000a1c:	491b      	ldr	r1, [pc, #108]	; (8000a8c <TIM_Base_SetConfig.constprop.0+0x80>)
 8000a1e:	4288      	cmp	r0, r1
 8000a20:	d003      	beq.n	8000a2a <TIM_Base_SetConfig.constprop.0+0x1e>
 8000a22:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000a26:	4288      	cmp	r0, r1
 8000a28:	d117      	bne.n	8000a5a <TIM_Base_SetConfig.constprop.0+0x4e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000a2a:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000a32:	430b      	orrs	r3, r1
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000a34:	4913      	ldr	r1, [pc, #76]	; (8000a84 <TIM_Base_SetConfig.constprop.0+0x78>)
 8000a36:	4288      	cmp	r0, r1
 8000a38:	d00a      	beq.n	8000a50 <TIM_Base_SetConfig.constprop.0+0x44>
 8000a3a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000a3e:	d007      	beq.n	8000a50 <TIM_Base_SetConfig.constprop.0+0x44>
 8000a40:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8000a44:	4288      	cmp	r0, r1
 8000a46:	d003      	beq.n	8000a50 <TIM_Base_SetConfig.constprop.0+0x44>
 8000a48:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000a4c:	4288      	cmp	r0, r1
 8000a4e:	d104      	bne.n	8000a5a <TIM_Base_SetConfig.constprop.0+0x4e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000a50:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
    tmpcr1 &= ~TIM_CR1_CKD;
 8000a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000a58:	430b      	orrs	r3, r1
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000a5a:	f8d2 10b4 	ldr.w	r1, [r2, #180]	; 0xb4
 8000a5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a62:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 8000a64:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000a66:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 8000a6a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000a6c:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8000a70:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000a72:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <TIM_Base_SetConfig.constprop.0+0x78>)
 8000a74:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000a76:	bf04      	itt	eq
 8000a78:	f8d2 30b0 	ldreq.w	r3, [r2, #176]	; 0xb0
 8000a7c:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	6143      	str	r3, [r0, #20]
}
 8000a82:	4770      	bx	lr
 8000a84:	40012c00 	.word	0x40012c00
 8000a88:	20000200 	.word	0x20000200
 8000a8c:	40000400 	.word	0x40000400

08000a90 <HAL_NVIC_SetPriority.constprop.0>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_NVIC_SetPriority.constprop.0+0x4c>)
  * @param  SubPriority: the subpriority level for the IRQ channel.
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 8000a92:	b510      	push	{r4, lr}
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a9a:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9e:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa0:	2c04      	cmp	r4, #4
 8000aa2:	bf28      	it	cs
 8000aa4:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa6:	2a06      	cmp	r2, #6
 8000aa8:	bf88      	it	hi
 8000aaa:	1eda      	subhi	r2, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab0:	bf98      	it	ls
 8000ab2:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	40a3      	lsls	r3, r4
 8000ab6:	ea21 0303 	bic.w	r3, r1, r3
 8000aba:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8000abc:	1c42      	adds	r2, r0, #1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abe:	bf14      	ite	ne
 8000ac0:	f100 4060 	addne.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	4a05      	ldreq	r2, [pc, #20]	; (8000adc <HAL_NVIC_SetPriority.constprop.0+0x4c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	bf1a      	itte	ne
 8000ace:	f500 4061 	addne.w	r0, r0, #57600	; 0xe100
 8000ad2:	f880 3300 	strbne.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad6:	f882 3023 	strbeq.w	r3, [r2, #35]	; 0x23
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ada:	bd10      	pop	{r4, pc}
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <LCD_Circle.constprop.0>:
			s += rx2 * ((4 * y) + 6);
		}
	}
}

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 8000ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae4:	461e      	mov	r6, r3
 8000ae6:	b089      	sub	sp, #36	; 0x24
{
	int a_, b_, P;
	a_ = 0;
	b_ = radius;
	P = 1 - radius;
 8000ae8:	f1c1 0301 	rsb	r3, r1, #1
 8000aec:	9303      	str	r3, [sp, #12]
 8000aee:	2300      	movs	r3, #0
	b_ = radius;
 8000af0:	468b      	mov	fp, r1
void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
 8000af2:	9004      	str	r0, [sp, #16]
 8000af4:	9207      	str	r2, [sp, #28]
	P = 1 - radius;
 8000af6:	9302      	str	r3, [sp, #8]
 8000af8:	9b04      	ldr	r3, [sp, #16]
 8000afa:	f8bd 5008 	ldrh.w	r5, [sp, #8]
	while (a_ <= b_)
	{
		if (fill == 1)
		{
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8000afe:	fa1f f48b 	uxth.w	r4, fp
 8000b02:	eba3 0805 	sub.w	r8, r3, r5
 8000b06:	eba3 0a04 	sub.w	sl, r3, r4
		if (fill == 1)
 8000b0a:	9b07      	ldr	r3, [sp, #28]
 8000b0c:	f1c5 09ac 	rsb	r9, r5, #172	; 0xac
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8000b10:	f1c4 07ac 	rsb	r7, r4, #172	; 0xac
		if (fill == 1)
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	fa1f f989 	uxth.w	r9, r9
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8000b1a:	b2bf      	uxth	r7, r7
 8000b1c:	fa1f f888 	uxth.w	r8, r8
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8000b20:	fa1f fa8a 	uxth.w	sl, sl
		if (fill == 1)
 8000b24:	d123      	bne.n	8000b6e <LCD_Circle.constprop.0+0x8e>
 8000b26:	006d      	lsls	r5, r5, #1
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8000b28:	0064      	lsls	r4, r4, #1
 8000b2a:	3501      	adds	r5, #1
 8000b2c:	3401      	adds	r4, #1
 8000b2e:	b2ad      	uxth	r5, r5
 8000b30:	b2a4      	uxth	r4, r4
 8000b32:	4623      	mov	r3, r4
 8000b34:	462a      	mov	r2, r5
 8000b36:	4651      	mov	r1, sl
 8000b38:	4648      	mov	r0, r9
 8000b3a:	9600      	str	r6, [sp, #0]
 8000b3c:	f7ff fb9c 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8000b40:	462b      	mov	r3, r5
 8000b42:	4622      	mov	r2, r4
 8000b44:	9600      	str	r6, [sp, #0]
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8000b46:	4641      	mov	r1, r8
 8000b48:	4638      	mov	r0, r7
 8000b4a:	f7ff fb95 	bl	8000278 <LCD_Rect_Fill>
		}
		if (P < 0)
 8000b4e:	9b03      	ldr	r3, [sp, #12]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	da4e      	bge.n	8000bf2 <LCD_Circle.constprop.0+0x112>
		{
			P = (P + 3) + (2 * a_);
 8000b54:	9a02      	ldr	r2, [sp, #8]
 8000b56:	3303      	adds	r3, #3
 8000b58:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8000b5c:	9303      	str	r3, [sp, #12]
	while (a_ <= b_)
 8000b5e:	9b02      	ldr	r3, [sp, #8]
 8000b60:	3301      	adds	r3, #1
 8000b62:	455b      	cmp	r3, fp
 8000b64:	9302      	str	r3, [sp, #8]
 8000b66:	ddc7      	ble.n	8000af8 <LCD_Circle.constprop.0+0x18>
			P = (P + 5) + (2 * (a_ - b_));
			a_++;
			b_--;
		}
	}
}
 8000b68:	b009      	add	sp, #36	; 0x24
 8000b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b6e:	f105 03ac 	add.w	r3, r5, #172	; 0xac
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	9305      	str	r3, [sp, #20]
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8000b76:	9b04      	ldr	r3, [sp, #16]
 8000b78:	9600      	str	r6, [sp, #0]
 8000b7a:	4423      	add	r3, r4
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	9306      	str	r3, [sp, #24]
 8000b80:	2301      	movs	r3, #1
 8000b82:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8000b86:	461a      	mov	r2, r3
 8000b88:	f7ff fb76 	bl	8000278 <LCD_Rect_Fill>
 8000b8c:	9b04      	ldr	r3, [sp, #16]
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8000b8e:	34ac      	adds	r4, #172	; 0xac
 8000b90:	441d      	add	r5, r3
 8000b92:	2301      	movs	r3, #1
 8000b94:	b2a4      	uxth	r4, r4
 8000b96:	b2ad      	uxth	r5, r5
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4629      	mov	r1, r5
 8000b9c:	4620      	mov	r0, r4
 8000b9e:	9600      	str	r6, [sp, #0]
 8000ba0:	f7ff fb6a 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	4648      	mov	r0, r9
 8000ba8:	461a      	mov	r2, r3
 8000baa:	9906      	ldr	r1, [sp, #24]
 8000bac:	9600      	str	r6, [sp, #0]
 8000bae:	f7ff fb63 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	4629      	mov	r1, r5
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4638      	mov	r0, r7
 8000bba:	9600      	str	r6, [sp, #0]
 8000bbc:	f7ff fb5c 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	4641      	mov	r1, r8
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	9600      	str	r6, [sp, #0]
 8000bca:	f7ff fb55 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8000bce:	2301      	movs	r3, #1
 8000bd0:	4651      	mov	r1, sl
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	9805      	ldr	r0, [sp, #20]
 8000bd6:	9600      	str	r6, [sp, #0]
 8000bd8:	f7ff fb4e 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8000bdc:	2301      	movs	r3, #1
 8000bde:	4651      	mov	r1, sl
 8000be0:	461a      	mov	r2, r3
 8000be2:	4648      	mov	r0, r9
 8000be4:	9600      	str	r6, [sp, #0]
 8000be6:	f7ff fb47 	bl	8000278 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8000bea:	2301      	movs	r3, #1
 8000bec:	9600      	str	r6, [sp, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	e7a9      	b.n	8000b46 <LCD_Circle.constprop.0+0x66>
			P = (P + 5) + (2 * (a_ - b_));
 8000bf2:	9b03      	ldr	r3, [sp, #12]
 8000bf4:	9a02      	ldr	r2, [sp, #8]
 8000bf6:	3305      	adds	r3, #5
 8000bf8:	eba2 020b 	sub.w	r2, r2, fp
 8000bfc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8000c00:	9303      	str	r3, [sp, #12]
			b_--;
 8000c02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8000c06:	e7aa      	b.n	8000b5e <LCD_Circle.constprop.0+0x7e>

08000c08 <LCD_Line.constprop.0>:
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8000c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int deltaX = abs(x2 - x1);
 8000c0c:	1a15      	subs	r5, r2, r0
	int deltaY = abs(y2 - y1);
 8000c0e:	1a5e      	subs	r6, r3, r1
	int deltaX = abs(x2 - x1);
 8000c10:	2d00      	cmp	r5, #0
 8000c12:	bfb8      	it	lt
 8000c14:	426d      	neglt	r5, r5
	int deltaY = abs(y2 - y1);
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	bfb8      	it	lt
 8000c1a:	4276      	neglt	r6, r6
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8000c1c:	4617      	mov	r7, r2
 8000c1e:	4698      	mov	r8, r3
	int signX = x1 < x2 ? 1 : -1;
 8000c20:	4282      	cmp	r2, r0
 8000c22:	bf8c      	ite	hi
 8000c24:	f04f 0a01 	movhi.w	sl, #1
 8000c28:	f04f 3aff 	movls.w	sl, #4294967295
	int signY = y1 < y2 ? 1 : -1;
 8000c2c:	428b      	cmp	r3, r1
 8000c2e:	bf8c      	ite	hi
 8000c30:	f04f 0901 	movhi.w	r9, #1
 8000c34:	f04f 39ff 	movls.w	r9, #4294967295
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8000c38:	b085      	sub	sp, #20
	int error = deltaX - deltaY;
 8000c3a:	1bac      	subs	r4, r5, r6
		if (error2 > -deltaY)
 8000c3c:	f1c6 0b00 	rsb	fp, r6, #0
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8000c40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000c42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	2301      	movs	r3, #1
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	f7ff fb14 	bl	8000278 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8000c50:	9802      	ldr	r0, [sp, #8]
 8000c52:	9903      	ldr	r1, [sp, #12]
 8000c54:	4287      	cmp	r7, r0
 8000c56:	d101      	bne.n	8000c5c <LCD_Line.constprop.0+0x54>
 8000c58:	4588      	cmp	r8, r1
 8000c5a:	d00d      	beq.n	8000c78 <LCD_Line.constprop.0+0x70>
		if (error2 > -deltaY)
 8000c5c:	ebbb 0f44 	cmp.w	fp, r4, lsl #1
		error2 = error * 2;
 8000c60:	ea4f 0344 	mov.w	r3, r4, lsl #1
			x1 += signX;
 8000c64:	bfbe      	ittt	lt
 8000c66:	4450      	addlt	r0, sl
			error -= deltaY;
 8000c68:	1ba4      	sublt	r4, r4, r6
			x1 += signX;
 8000c6a:	b280      	uxthlt	r0, r0
		if (error2 < deltaX)
 8000c6c:	429d      	cmp	r5, r3
 8000c6e:	dde7      	ble.n	8000c40 <LCD_Line.constprop.0+0x38>
			y1 += signY;
 8000c70:	4449      	add	r1, r9
			error += deltaX;
 8000c72:	442c      	add	r4, r5
			y1 += signY;
 8000c74:	b289      	uxth	r1, r1
 8000c76:	e7e3      	b.n	8000c40 <LCD_Line.constprop.0+0x38>
}
 8000c78:	b005      	add	sp, #20
 8000c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000c7e <LCD_Rect.constprop.0>:
void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
 8000c7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	LCD_Line(x, y, x + w, y, size, color24);
 8000c80:	23bd      	movs	r3, #189	; 0xbd
 8000c82:	26ff      	movs	r6, #255	; 0xff
 8000c84:	f100 049d 	add.w	r4, r0, #157	; 0x9d
 8000c88:	b2a4      	uxth	r4, r4
 8000c8a:	4622      	mov	r2, r4
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	9600      	str	r6, [sp, #0]
void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
 8000c90:	4605      	mov	r5, r0
	LCD_Line(x, y, x + w, y, size, color24);
 8000c92:	f7ff ffb9 	bl	8000c08 <LCD_Line.constprop.0>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8000c96:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8000c9a:	4622      	mov	r2, r4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	9600      	str	r6, [sp, #0]
 8000ca2:	f7ff ffb1 	bl	8000c08 <LCD_Line.constprop.0>
	LCD_Line(x, y, x, y + h, size, color24);
 8000ca6:	462a      	mov	r2, r5
 8000ca8:	4628      	mov	r0, r5
 8000caa:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8000cae:	21bd      	movs	r1, #189	; 0xbd
 8000cb0:	9600      	str	r6, [sp, #0]
 8000cb2:	f7ff ffa9 	bl	8000c08 <LCD_Line.constprop.0>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8000cb6:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8000cba:	4622      	mov	r2, r4
 8000cbc:	21bd      	movs	r1, #189	; 0xbd
 8000cbe:	4620      	mov	r0, r4
 8000cc0:	9600      	str	r6, [sp, #0]
 8000cc2:	f7ff ffa1 	bl	8000c08 <LCD_Line.constprop.0>
}
 8000cc6:	b002      	add	sp, #8
 8000cc8:	bd70      	pop	{r4, r5, r6, pc}

08000cca <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x5a>)
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8000ccc:	b510      	push	{r4, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000cce:	685c      	ldr	r4, [r3, #4]
 8000cd0:	6962      	ldr	r2, [r4, #20]
 8000cd2:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8000cd6:	d001      	beq.n	8000cdc <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x12>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000cd8:	2000      	movs	r0, #0
 8000cda:	e011      	b.n	8000d00 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x36>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000cdc:	6961      	ldr	r1, [r4, #20]
 8000cde:	f011 0110 	ands.w	r1, r1, #16
 8000ce2:	d00e      	beq.n	8000d02 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ce4:	f06f 0110 	mvn.w	r1, #16
 8000ce8:	6161      	str	r1, [r4, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000cea:	2120      	movs	r1, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000cec:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8000cee:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8000cf6:	6c59      	ldr	r1, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8000cfc:	6459      	str	r1, [r3, #68]	; 0x44
      return HAL_ERROR;
 8000cfe:	2001      	movs	r0, #1
}
 8000d00:	bd10      	pop	{r4, pc}
 8000d02:	681a      	ldr	r2, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d04:	1a12      	subs	r2, r2, r0
 8000d06:	2a64      	cmp	r2, #100	; 0x64
 8000d08:	d9e2      	bls.n	8000cd0 <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x6>
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d0a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000d0c:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000d12:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000d16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000d18:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000d1c:	f042 0220 	orr.w	r2, r2, #32
 8000d20:	645a      	str	r2, [r3, #68]	; 0x44
 8000d22:	e7ec      	b.n	8000cfe <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0+0x34>
 8000d24:	20000200 	.word	0x20000200

08000d28 <I2C_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8000d28:	b5f0      	push	{r4, r5, r6, r7, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000d2a:	4d12      	ldr	r5, [pc, #72]	; (8000d74 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x4c>)
 8000d2c:	0c07      	lsrs	r7, r0, #16
 8000d2e:	686e      	ldr	r6, [r5, #4]
 8000d30:	2f01      	cmp	r7, #1
 8000d32:	bf0c      	ite	eq
 8000d34:	6974      	ldreq	r4, [r6, #20]
 8000d36:	69b4      	ldrne	r4, [r6, #24]
 8000d38:	ea20 0404 	bic.w	r4, r0, r4
 8000d3c:	b2a4      	uxth	r4, r4
 8000d3e:	fab4 f484 	clz	r4, r4
 8000d42:	0964      	lsrs	r4, r4, #5
 8000d44:	42a1      	cmp	r1, r4
 8000d46:	d001      	beq.n	8000d4c <I2C_WaitOnFlagUntilTimeout.constprop.0+0x24>
  return HAL_OK;
 8000d48:	2000      	movs	r0, #0
 8000d4a:	e011      	b.n	8000d70 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x48>
 8000d4c:	682c      	ldr	r4, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d4e:	1ae4      	subs	r4, r4, r3
 8000d50:	42a2      	cmp	r2, r4
 8000d52:	d2ed      	bcs.n	8000d30 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000d54:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8000d56:	2220      	movs	r2, #32
        return HAL_ERROR;
 8000d58:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000d5a:	636b      	str	r3, [r5, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8000d5c:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000d60:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000d64:	6c6a      	ldr	r2, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000d66:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000d6a:	f042 0220 	orr.w	r2, r2, #32
 8000d6e:	646a      	str	r2, [r5, #68]	; 0x44
}
 8000d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000200 	.word	0x20000200

08000d78 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8000d78:	b530      	push	{r4, r5, lr}
 8000d7a:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x64>)
 8000d7e:	685c      	ldr	r4, [r3, #4]
 8000d80:	6960      	ldr	r0, [r4, #20]
 8000d82:	ea25 0000 	bic.w	r0, r5, r0
 8000d86:	b280      	uxth	r0, r0
 8000d88:	b1c0      	cbz	r0, 8000dbc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x44>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d8a:	6962      	ldr	r2, [r4, #20]
 8000d8c:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8000d90:	d015      	beq.n	8000dbe <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x46>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d92:	6822      	ldr	r2, [r4, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d94:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d9a:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000da0:	6162      	str	r2, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000da2:	2200      	movs	r2, #0
 8000da4:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8000da6:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000dae:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000db0:	f041 0104 	orr.w	r1, r1, #4
        return HAL_ERROR;
 8000db4:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000db6:	6459      	str	r1, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8000dbc:	bd30      	pop	{r4, r5, pc}
 8000dbe:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000dc0:	1a40      	subs	r0, r0, r1
 8000dc2:	2864      	cmp	r0, #100	; 0x64
 8000dc4:	d9dc      	bls.n	8000d80 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 8000dc6:	2120      	movs	r1, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000dc8:	635a      	str	r2, [r3, #52]	; 0x34
        hi2c->State               = HAL_I2C_STATE_READY;
 8000dca:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000dd2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000dd4:	f041 0120 	orr.w	r1, r1, #32
 8000dd8:	e7ec      	b.n	8000db4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x3c>
 8000dda:	bf00      	nop
 8000ddc:	20000200 	.word	0x20000200

08000de0 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000de0:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x60>)
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8000de2:	b510      	push	{r4, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000de4:	685c      	ldr	r4, [r3, #4]
 8000de6:	6962      	ldr	r2, [r4, #20]
 8000de8:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8000dec:	d001      	beq.n	8000df2 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x12>
  return HAL_OK;
 8000dee:	2000      	movs	r0, #0
 8000df0:	e024      	b.n	8000e3c <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x5c>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000df2:	6961      	ldr	r1, [r4, #20]
 8000df4:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8000df8:	d110      	bne.n	8000e1c <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x3c>
 8000dfa:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000dfc:	1a12      	subs	r2, r2, r0
 8000dfe:	2a64      	cmp	r2, #100	; 0x64
 8000e00:	d9f1      	bls.n	8000de6 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x6>
        hi2c->State               = HAL_I2C_STATE_READY;
 8000e02:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000e04:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State               = HAL_I2C_STATE_READY;
 8000e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e0a:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000e10:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e14:	f042 0220 	orr.w	r2, r2, #32
 8000e18:	645a      	str	r2, [r3, #68]	; 0x44
 8000e1a:	e00e      	b.n	8000e3a <I2C_WaitOnTXEFlagUntilTimeout.constprop.0+0x5a>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e1c:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8000e20:	6161      	str	r1, [r4, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8000e22:	2120      	movs	r1, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000e24:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 8000e26:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000e2e:	6c59      	ldr	r1, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000e34:	f041 0104 	orr.w	r1, r1, #4
 8000e38:	6459      	str	r1, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000e3a:	2001      	movs	r0, #1
}
 8000e3c:	bd10      	pop	{r4, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000200 	.word	0x20000200

08000e44 <AT24XX_Read>:
    } else
        return false;
}

uint8_t AT24XX_Read(uint16_t address) {
    uint16_t dt[1] = {0};
 8000e44:	2300      	movs	r3, #0
uint8_t AT24XX_Read(uint16_t address) {
 8000e46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e48:	4c8b      	ldr	r4, [pc, #556]	; (8001078 <AT24XX_Read+0x234>)
 8000e4a:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	6825      	ldr	r5, [r4, #0]
    uint16_t dt[1] = {0};
 8000e50:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e54:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
uint8_t AT24XX_Read(uint16_t address) {
 8000e58:	4606      	mov	r6, r0
 8000e5a:	2b20      	cmp	r3, #32
 8000e5c:	d159      	bne.n	8000f12 <AT24XX_Read+0xce>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000e5e:	462b      	mov	r3, r5
 8000e60:	2219      	movs	r2, #25
 8000e62:	2101      	movs	r1, #1
 8000e64:	4885      	ldr	r0, [pc, #532]	; (800107c <AT24XX_Read+0x238>)
 8000e66:	f7ff ff5f 	bl	8000d28 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d151      	bne.n	8000f12 <AT24XX_Read+0xce>
    __HAL_LOCK(hi2c);
 8000e6e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d04d      	beq.n	8000f12 <AT24XX_Read+0xce>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e76:	6863      	ldr	r3, [r4, #4]
    __HAL_LOCK(hi2c);
 8000e78:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e7c:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000e7e:	f04f 1001 	mov.w	r0, #65537	; 0x10001
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e82:	07d7      	lsls	r7, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000e84:	bf5e      	ittt	pl
 8000e86:	681a      	ldrpl	r2, [r3, #0]
 8000e88:	430a      	orrpl	r2, r1
 8000e8a:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e8c:	681a      	ldr	r2, [r3, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e8e:	2100      	movs	r1, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e94:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000e96:	2222      	movs	r2, #34	; 0x22
 8000e98:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000e9c:	2240      	movs	r2, #64	; 0x40
 8000e9e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->pBuffPtr    = pData;
 8000ea2:	aa01      	add	r2, sp, #4
 8000ea4:	62a2      	str	r2, [r4, #40]	; 0x28
    hi2c->XferCount   = Size;
 8000ea6:	2201      	movs	r2, #1
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ea8:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8000eaa:	85e2      	strh	r2, [r4, #46]	; 0x2e
    hi2c->XferSize    = hi2c->XferCount;
 8000eac:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8000eae:	85a2      	strh	r2, [r4, #44]	; 0x2c
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000eb0:	4a73      	ldr	r2, [pc, #460]	; (8001080 <AT24XX_Read+0x23c>)
 8000eb2:	6322      	str	r2, [r4, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000eba:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ec2:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	2264      	movs	r2, #100	; 0x64
 8000ec8:	f7ff ff2e 	bl	8000d28 <I2C_WaitOnFlagUntilTimeout.constprop.0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000ecc:	6863      	ldr	r3, [r4, #4]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000ece:	b130      	cbz	r0, 8000ede <AT24XX_Read+0x9a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	05dd      	lsls	r5, r3, #23
 8000ed4:	d51d      	bpl.n	8000f12 <AT24XX_Read+0xce>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000ed6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eda:	6463      	str	r3, [r4, #68]	; 0x44
 8000edc:	e019      	b.n	8000f12 <AT24XX_Read+0xce>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000ede:	22ae      	movs	r2, #174	; 0xae
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	4868      	ldr	r0, [pc, #416]	; (8001084 <AT24XX_Read+0x240>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000ee4:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000ee6:	f7ff ff47 	bl	8000d78 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8000eea:	b990      	cbnz	r0, 8000f12 <AT24XX_Read+0xce>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000eec:	6863      	ldr	r3, [r4, #4]
 8000eee:	9007      	str	r0, [sp, #28]
 8000ef0:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ef2:	4628      	mov	r0, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ef4:	9207      	str	r2, [sp, #28]
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	9307      	str	r3, [sp, #28]
 8000efa:	9b07      	ldr	r3, [sp, #28]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000efc:	f7ff ff70 	bl	8000de0 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8000f00:	b158      	cbz	r0, 8000f1a <AT24XX_Read+0xd6>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f04:	2b04      	cmp	r3, #4
 8000f06:	d104      	bne.n	8000f12 <AT24XX_Read+0xce>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f08:	6862      	ldr	r2, [r4, #4]
 8000f0a:	6813      	ldr	r3, [r2, #0]
 8000f0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f10:	6013      	str	r3, [r2, #0]
    AT24XX_Load(address, dt, 1);
    return dt[0];
}
 8000f12:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000f16:	b009      	add	sp, #36	; 0x24
 8000f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000f1a:	6863      	ldr	r3, [r4, #4]
 8000f1c:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f1e:	4628      	mov	r0, r5
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000f20:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f22:	f7ff ff5d 	bl	8000de0 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d1eb      	bne.n	8000f02 <AT24XX_Read+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000f2a:	6863      	ldr	r3, [r4, #4]
 8000f2c:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f2e:	4628      	mov	r0, r5
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000f30:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f32:	f7ff ff55 	bl	8000de0 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8000f36:	4601      	mov	r1, r0
 8000f38:	2800      	cmp	r0, #0
 8000f3a:	d1e2      	bne.n	8000f02 <AT24XX_Read+0xbe>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000f3c:	6862      	ldr	r2, [r4, #4]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000f3e:	f04f 1001 	mov.w	r0, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000f42:	6813      	ldr	r3, [r2, #0]
 8000f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f48:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000f4a:	462b      	mov	r3, r5
 8000f4c:	2264      	movs	r2, #100	; 0x64
 8000f4e:	f7ff feeb 	bl	8000d28 <I2C_WaitOnFlagUntilTimeout.constprop.0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000f52:	6863      	ldr	r3, [r4, #4]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000f54:	2800      	cmp	r0, #0
 8000f56:	d1bb      	bne.n	8000ed0 <AT24XX_Read+0x8c>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000f58:	22af      	movs	r2, #175	; 0xaf
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000f5a:	4629      	mov	r1, r5
 8000f5c:	4849      	ldr	r0, [pc, #292]	; (8001084 <AT24XX_Read+0x240>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000f5e:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000f60:	f7ff ff0a 	bl	8000d78 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d1d4      	bne.n	8000f12 <AT24XX_Read+0xce>
    if (hi2c->XferSize == 0U)
 8000f68:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f6a:	6863      	ldr	r3, [r4, #4]
    if (hi2c->XferSize == 0U)
 8000f6c:	b9b2      	cbnz	r2, 8000f9c <AT24XX_Read+0x158>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f6e:	9206      	str	r2, [sp, #24]
 8000f70:	695a      	ldr	r2, [r3, #20]
 8000f72:	9206      	str	r2, [sp, #24]
 8000f74:	699a      	ldr	r2, [r3, #24]
 8000f76:	9206      	str	r2, [sp, #24]
 8000f78:	9a06      	ldr	r2, [sp, #24]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f80:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000f82:	4e41      	ldr	r6, [pc, #260]	; (8001088 <AT24XX_Read+0x244>)
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8000f84:	4f41      	ldr	r7, [pc, #260]	; (800108c <AT24XX_Read+0x248>)
    while (hi2c->XferSize > 0U)
 8000f86:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d139      	bne.n	8001000 <AT24XX_Read+0x1bc>
    hi2c->State = HAL_I2C_STATE_READY;
 8000f8c:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8000f8e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000f92:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f9a:	e7ba      	b.n	8000f12 <AT24XX_Read+0xce>
    else if (hi2c->XferSize == 1U)
 8000f9c:	2a01      	cmp	r2, #1
 8000f9e:	d111      	bne.n	8000fc4 <AT24XX_Read+0x180>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fa6:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000faa:	6863      	ldr	r3, [r4, #4]
 8000fac:	9005      	str	r0, [sp, #20]
 8000fae:	695a      	ldr	r2, [r3, #20]
 8000fb0:	9205      	str	r2, [sp, #20]
 8000fb2:	699a      	ldr	r2, [r3, #24]
 8000fb4:	9205      	str	r2, [sp, #20]
 8000fb6:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000fbe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000fc0:	b662      	cpsie	i
}
 8000fc2:	e7de      	b.n	8000f82 <AT24XX_Read+0x13e>
    else if (hi2c->XferSize == 2U)
 8000fc4:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000fc6:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8000fc8:	d10f      	bne.n	8000fea <AT24XX_Read+0x1a6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd0:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	9304      	str	r3, [sp, #16]
 8000fd6:	6863      	ldr	r3, [r4, #4]
 8000fd8:	695a      	ldr	r2, [r3, #20]
 8000fda:	9204      	str	r2, [sp, #16]
 8000fdc:	699a      	ldr	r2, [r3, #24]
 8000fde:	9204      	str	r2, [sp, #16]
 8000fe0:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fe8:	e7e9      	b.n	8000fbe <AT24XX_Read+0x17a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000fea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fee:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	9203      	str	r2, [sp, #12]
 8000ff4:	695a      	ldr	r2, [r3, #20]
 8000ff6:	9203      	str	r2, [sp, #12]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	9303      	str	r3, [sp, #12]
 8000ffc:	9b03      	ldr	r3, [sp, #12]
 8000ffe:	e7c0      	b.n	8000f82 <AT24XX_Read+0x13e>
      if (hi2c->XferSize <= 3U)
 8001000:	2b03      	cmp	r3, #3
 8001002:	f200 8084 	bhi.w	800110e <AT24XX_Read+0x2ca>
        if (hi2c->XferSize == 1U)
 8001006:	2b01      	cmp	r3, #1
 8001008:	d114      	bne.n	8001034 <AT24XX_Read+0x1f0>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800100a:	4628      	mov	r0, r5
 800100c:	f7ff fe5d 	bl	8000cca <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0>
 8001010:	2800      	cmp	r0, #0
 8001012:	f47f af7e 	bne.w	8000f12 <AT24XX_Read+0xce>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001016:	6863      	ldr	r3, [r4, #4]
 8001018:	691a      	ldr	r2, [r3, #16]
 800101a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800101c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800101e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001020:	3301      	adds	r3, #1
 8001022:	62a3      	str	r3, [r4, #40]	; 0x28
          hi2c->XferSize--;
 8001024:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8001026:	3b01      	subs	r3, #1
 8001028:	85a3      	strh	r3, [r4, #44]	; 0x2c
          hi2c->XferCount--;
 800102a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800102c:	3b01      	subs	r3, #1
 800102e:	b29b      	uxth	r3, r3
 8001030:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8001032:	e7a8      	b.n	8000f86 <AT24XX_Read+0x142>
        else if (hi2c->XferSize == 2U)
 8001034:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001036:	f04f 0264 	mov.w	r2, #100	; 0x64
 800103a:	462b      	mov	r3, r5
 800103c:	f04f 0100 	mov.w	r1, #0
 8001040:	4630      	mov	r0, r6
        else if (hi2c->XferSize == 2U)
 8001042:	d125      	bne.n	8001090 <AT24XX_Read+0x24c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001044:	f7ff fe70 	bl	8000d28 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8001048:	2800      	cmp	r0, #0
 800104a:	f47f af62 	bne.w	8000f12 <AT24XX_Read+0xce>
 800104e:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001050:	6863      	ldr	r3, [r4, #4]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001058:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800105a:	691a      	ldr	r2, [r3, #16]
 800105c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800105e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001060:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001062:	3301      	adds	r3, #1
 8001064:	62a3      	str	r3, [r4, #40]	; 0x28
          hi2c->XferSize--;
 8001066:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8001068:	3b01      	subs	r3, #1
 800106a:	85a3      	strh	r3, [r4, #44]	; 0x2c
          hi2c->XferCount--;
 800106c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800106e:	3b01      	subs	r3, #1
 8001070:	b29b      	uxth	r3, r3
 8001072:	85e3      	strh	r3, [r4, #46]	; 0x2e
  __ASM volatile ("cpsie i" : : : "memory");
 8001074:	b662      	cpsie	i
 8001076:	e7ce      	b.n	8001016 <AT24XX_Read+0x1d2>
 8001078:	20000200 	.word	0x20000200
 800107c:	00100002 	.word	0x00100002
 8001080:	ffff0000 	.word	0xffff0000
 8001084:	00010002 	.word	0x00010002
 8001088:	00010004 	.word	0x00010004
 800108c:	20000000 	.word	0x20000000
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001090:	f7ff fe4a 	bl	8000d28 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8001094:	2800      	cmp	r0, #0
 8001096:	f47f af3c 	bne.w	8000f12 <AT24XX_Read+0xce>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800109a:	6862      	ldr	r2, [r4, #4]
 800109c:	6813      	ldr	r3, [r2, #0]
 800109e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010a2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80010a6:	6863      	ldr	r3, [r4, #4]
 80010a8:	691a      	ldr	r2, [r3, #16]
 80010aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010ac:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80010ae:	f246 12a8 	movw	r2, #25000	; 0x61a8
          hi2c->pBuffPtr++;
 80010b2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80010b4:	1c4b      	adds	r3, r1, #1
 80010b6:	62a3      	str	r3, [r4, #40]	; 0x28
          hi2c->XferSize--;
 80010b8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80010ba:	3b01      	subs	r3, #1
 80010bc:	85a3      	strh	r3, [r4, #44]	; 0x2c
          hi2c->XferCount--;
 80010be:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80010c0:	3b01      	subs	r3, #1
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	85e3      	strh	r3, [r4, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80010cc:	2223      	movs	r2, #35	; 0x23
 80010ce:	4353      	muls	r3, r2
 80010d0:	9302      	str	r3, [sp, #8]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80010d2:	6863      	ldr	r3, [r4, #4]
            count--;
 80010d4:	9a02      	ldr	r2, [sp, #8]
 80010d6:	3a01      	subs	r2, #1
 80010d8:	9202      	str	r2, [sp, #8]
            if (count == 0U)
 80010da:	9a02      	ldr	r2, [sp, #8]
 80010dc:	b96a      	cbnz	r2, 80010fa <AT24XX_Read+0x2b6>
              hi2c->State               = HAL_I2C_STATE_READY;
 80010de:	2320      	movs	r3, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80010e0:	6362      	str	r2, [r4, #52]	; 0x34
              hi2c->State               = HAL_I2C_STATE_READY;
 80010e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010e6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80010ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010ec:	f043 0320 	orr.w	r3, r3, #32
 80010f0:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 80010f2:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80010f4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 80010f8:	e70b      	b.n	8000f12 <AT24XX_Read+0xce>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80010fa:	695a      	ldr	r2, [r3, #20]
 80010fc:	0750      	lsls	r0, r2, #29
 80010fe:	d5e9      	bpl.n	80010d4 <AT24XX_Read+0x290>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001106:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	704b      	strb	r3, [r1, #1]
 800110c:	e7a8      	b.n	8001060 <AT24XX_Read+0x21c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800110e:	4628      	mov	r0, r5
 8001110:	f7ff fddb 	bl	8000cca <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0>
 8001114:	2800      	cmp	r0, #0
 8001116:	f47f aefc 	bne.w	8000f12 <AT24XX_Read+0xce>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800111a:	6863      	ldr	r3, [r4, #4]
 800111c:	691a      	ldr	r2, [r3, #16]
 800111e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001120:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001122:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001124:	1c53      	adds	r3, r2, #1
 8001126:	62a3      	str	r3, [r4, #40]	; 0x28
        hi2c->XferSize--;
 8001128:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800112a:	3b01      	subs	r3, #1
 800112c:	85a3      	strh	r3, [r4, #44]	; 0x2c
        hi2c->XferCount--;
 800112e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001130:	3b01      	subs	r3, #1
 8001132:	b29b      	uxth	r3, r3
 8001134:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001136:	6863      	ldr	r3, [r4, #4]
 8001138:	6959      	ldr	r1, [r3, #20]
 800113a:	0749      	lsls	r1, r1, #29
 800113c:	f57f af23 	bpl.w	8000f86 <AT24XX_Read+0x142>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	7053      	strb	r3, [r2, #1]
 8001144:	e76b      	b.n	800101e <AT24XX_Read+0x1da>

08001146 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x5e>)
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8001148:	b510      	push	{r4, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800114a:	685c      	ldr	r4, [r3, #4]
 800114c:	6962      	ldr	r2, [r4, #20]
 800114e:	f012 0204 	ands.w	r2, r2, #4
 8001152:	d001      	beq.n	8001158 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x12>
  return HAL_OK;
 8001154:	2000      	movs	r0, #0
 8001156:	e024      	b.n	80011a2 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x5c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001158:	6961      	ldr	r1, [r4, #20]
 800115a:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 800115e:	d110      	bne.n	8001182 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x3c>
 8001160:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001162:	1a12      	subs	r2, r2, r0
 8001164:	2a64      	cmp	r2, #100	; 0x64
 8001166:	d9f1      	bls.n	800114c <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x6>
        hi2c->State               = HAL_I2C_STATE_READY;
 8001168:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800116a:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State               = HAL_I2C_STATE_READY;
 800116c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001170:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001176:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800117a:	f042 0220 	orr.w	r2, r2, #32
 800117e:	645a      	str	r2, [r3, #68]	; 0x44
 8001180:	e00e      	b.n	80011a0 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001182:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8001186:	6161      	str	r1, [r4, #20]
    hi2c->State               = HAL_I2C_STATE_READY;
 8001188:	2120      	movs	r1, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800118a:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 800118c:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001194:	6c59      	ldr	r1, [r3, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8001196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800119a:	f041 0104 	orr.w	r1, r1, #4
 800119e:	6459      	str	r1, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80011a0:	2001      	movs	r0, #1
}
 80011a2:	bd10      	pop	{r4, pc}
 80011a4:	20000200 	.word	0x20000200

080011a8 <AT24XX_Update>:
void AT24XX_Write(uint16_t address, uint8_t val) {
    uint8_t save[] = {val};
    AT24XX_Save(address, save, 1);
}

void AT24XX_Update(uint16_t address, uint8_t val) {
 80011a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80011aa:	460c      	mov	r4, r1
 80011ac:	4606      	mov	r6, r0
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80011ae:	f7ff fe49 	bl	8000e44 <AT24XX_Read>
 80011b2:	42a0      	cmp	r0, r4
 80011b4:	d043      	beq.n	800123e <AT24XX_Update+0x96>
    uint8_t save[] = {val};
 80011b6:	f88d 4000 	strb.w	r4, [sp]
 80011ba:	4c52      	ldr	r4, [pc, #328]	; (8001304 <AT24XX_Update+0x15c>)
 80011bc:	6825      	ldr	r5, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011be:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80011c2:	2b20      	cmp	r3, #32
 80011c4:	d13b      	bne.n	800123e <AT24XX_Update+0x96>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011c6:	462b      	mov	r3, r5
 80011c8:	2219      	movs	r2, #25
 80011ca:	2101      	movs	r1, #1
 80011cc:	484e      	ldr	r0, [pc, #312]	; (8001308 <AT24XX_Update+0x160>)
 80011ce:	f7ff fdab 	bl	8000d28 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 80011d2:	2800      	cmp	r0, #0
 80011d4:	d133      	bne.n	800123e <AT24XX_Update+0x96>
    __HAL_LOCK(hi2c);
 80011d6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80011da:	428b      	cmp	r3, r1
 80011dc:	d02f      	beq.n	800123e <AT24XX_Update+0x96>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011de:	6863      	ldr	r3, [r4, #4]
    __HAL_LOCK(hi2c);
 80011e0:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80011e8:	bf58      	it	pl
 80011ea:	681a      	ldrpl	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80011ec:	f04f 1001 	mov.w	r0, #65537	; 0x10001
      __HAL_I2C_ENABLE(hi2c);
 80011f0:	bf5c      	itt	pl
 80011f2:	430a      	orrpl	r2, r1
 80011f4:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011f6:	681a      	ldr	r2, [r3, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011f8:	2100      	movs	r1, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011fe:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001200:	2221      	movs	r2, #33	; 0x21
 8001202:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001206:	2240      	movs	r2, #64	; 0x40
 8001208:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->XferCount   = Size;
 800120c:	2201      	movs	r2, #1
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800120e:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8001210:	85e2      	strh	r2, [r4, #46]	; 0x2e
    hi2c->XferSize    = hi2c->XferCount;
 8001212:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    hi2c->pBuffPtr    = pData;
 8001214:	f8c4 d028 	str.w	sp, [r4, #40]	; 0x28
    hi2c->XferSize    = hi2c->XferCount;
 8001218:	85a2      	strh	r2, [r4, #44]	; 0x2c
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800121a:	4a3c      	ldr	r2, [pc, #240]	; (800130c <AT24XX_Update+0x164>)
 800121c:	6322      	str	r2, [r4, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001224:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001226:	462b      	mov	r3, r5
 8001228:	2264      	movs	r2, #100	; 0x64
 800122a:	f7ff fd7d 	bl	8000d28 <I2C_WaitOnFlagUntilTimeout.constprop.0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800122e:	6863      	ldr	r3, [r4, #4]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001230:	b138      	cbz	r0, 8001242 <AT24XX_Update+0x9a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	05d9      	lsls	r1, r3, #23
 8001236:	d502      	bpl.n	800123e <AT24XX_Update+0x96>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001238:	f44f 7300 	mov.w	r3, #512	; 0x200
 800123c:	6463      	str	r3, [r4, #68]	; 0x44
}
 800123e:	b002      	add	sp, #8
 8001240:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001242:	22ae      	movs	r2, #174	; 0xae
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001244:	4629      	mov	r1, r5
 8001246:	4832      	ldr	r0, [pc, #200]	; (8001310 <AT24XX_Update+0x168>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001248:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800124a:	f7ff fd95 	bl	8000d78 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 800124e:	2800      	cmp	r0, #0
 8001250:	d1f5      	bne.n	800123e <AT24XX_Update+0x96>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001252:	6863      	ldr	r3, [r4, #4]
 8001254:	9001      	str	r0, [sp, #4]
 8001256:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001258:	4628      	mov	r0, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800125a:	9201      	str	r2, [sp, #4]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	9b01      	ldr	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001262:	f7ff fdbd 	bl	8000de0 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8001266:	b140      	cbz	r0, 800127a <AT24XX_Update+0xd2>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001268:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800126a:	2b04      	cmp	r3, #4
 800126c:	d1e7      	bne.n	800123e <AT24XX_Update+0x96>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800126e:	6862      	ldr	r2, [r4, #4]
 8001270:	6813      	ldr	r3, [r2, #0]
 8001272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	e7e1      	b.n	800123e <AT24XX_Update+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800127a:	6863      	ldr	r3, [r4, #4]
 800127c:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800127e:	4628      	mov	r0, r5
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001280:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001282:	f7ff fdad 	bl	8000de0 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8001286:	2800      	cmp	r0, #0
 8001288:	d1ee      	bne.n	8001268 <AT24XX_Update+0xc0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800128a:	6863      	ldr	r3, [r4, #4]
 800128c:	b2f6      	uxtb	r6, r6
 800128e:	611e      	str	r6, [r3, #16]
    while (hi2c->XferSize > 0U)
 8001290:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001292:	4628      	mov	r0, r5
    while (hi2c->XferSize > 0U)
 8001294:	b99b      	cbnz	r3, 80012be <AT24XX_Update+0x116>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001296:	f7ff ff56 	bl	8001146 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0>
 800129a:	2800      	cmp	r0, #0
 800129c:	d1e4      	bne.n	8001268 <AT24XX_Update+0xc0>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800129e:	6862      	ldr	r2, [r4, #4]
 80012a0:	6813      	ldr	r3, [r2, #0]
 80012a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80012a8:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80012aa:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80012ae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012b2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
        HAL_Delay(5);
 80012b6:	2005      	movs	r0, #5
 80012b8:	f7ff f832 	bl	8000320 <HAL_Delay>
}
 80012bc:	e7bf      	b.n	800123e <AT24XX_Update+0x96>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012be:	f7ff fd8f 	bl	8000de0 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 80012c2:	2800      	cmp	r0, #0
 80012c4:	d1d0      	bne.n	8001268 <AT24XX_Update+0xc0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012c8:	6866      	ldr	r6, [r4, #4]
 80012ca:	461a      	mov	r2, r3
 80012cc:	f812 1b01 	ldrb.w	r1, [r2], #1
 80012d0:	6131      	str	r1, [r6, #16]
      hi2c->pBuffPtr++;
 80012d2:	62a2      	str	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80012d4:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      hi2c->XferSize--;
 80012d6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
      hi2c->XferCount--;
 80012d8:	3a01      	subs	r2, #1
 80012da:	b292      	uxth	r2, r2
 80012dc:	85e2      	strh	r2, [r4, #46]	; 0x2e
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80012de:	6972      	ldr	r2, [r6, #20]
      hi2c->XferSize--;
 80012e0:	1e48      	subs	r0, r1, #1
 80012e2:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80012e4:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 80012e6:	85a0      	strh	r0, [r4, #44]	; 0x2c
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80012e8:	d5d2      	bpl.n	8001290 <AT24XX_Update+0xe8>
 80012ea:	2800      	cmp	r0, #0
 80012ec:	d0d0      	beq.n	8001290 <AT24XX_Update+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012ee:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 80012f0:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012f2:	6132      	str	r2, [r6, #16]
        hi2c->pBuffPtr++;
 80012f4:	62a3      	str	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80012f6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        hi2c->XferSize--;
 80012f8:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80012fa:	3b01      	subs	r3, #1
 80012fc:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80012fe:	85a1      	strh	r1, [r4, #44]	; 0x2c
        hi2c->XferCount--;
 8001300:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8001302:	e7c5      	b.n	8001290 <AT24XX_Update+0xe8>
 8001304:	20000200 	.word	0x20000200
 8001308:	00100002 	.word	0x00100002
 800130c:	ffff0000 	.word	0xffff0000
 8001310:	00010002 	.word	0x00010002

08001314 <HAL_I2C_Master_Receive.constprop.0.isra.0>:
  __IO uint32_t count = 0U;
 8001314:	2300      	movs	r3, #0
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8001316:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800131a:	4c8b      	ldr	r4, [pc, #556]	; (8001548 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x234>)
 800131c:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	6826      	ldr	r6, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001322:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8001326:	4607      	mov	r7, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001328:	2b20      	cmp	r3, #32
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 800132a:	4689      	mov	r9, r1
 800132c:	4690      	mov	r8, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800132e:	d14b      	bne.n	80013c8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001330:	4633      	mov	r3, r6
 8001332:	2219      	movs	r2, #25
 8001334:	2101      	movs	r1, #1
 8001336:	4885      	ldr	r0, [pc, #532]	; (800154c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x238>)
 8001338:	f7ff fcf6 	bl	8000d28 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 800133c:	2800      	cmp	r0, #0
 800133e:	d143      	bne.n	80013c8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
    __HAL_LOCK(hi2c);
 8001340:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001344:	428b      	cmp	r3, r1
 8001346:	d03f      	beq.n	80013c8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001348:	6865      	ldr	r5, [r4, #4]
    __HAL_LOCK(hi2c);
 800134a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800134e:	682b      	ldr	r3, [r5, #0]
 8001350:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8001352:	bf5e      	ittt	pl
 8001354:	682b      	ldrpl	r3, [r5, #0]
 8001356:	430b      	orrpl	r3, r1
 8001358:	602b      	strpl	r3, [r5, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800135a:	682b      	ldr	r3, [r5, #0]
 800135c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001360:	602b      	str	r3, [r5, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001362:	2322      	movs	r3, #34	; 0x22
 8001364:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001368:	2310      	movs	r3, #16
 800136a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800136e:	2300      	movs	r3, #0
 8001370:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8001372:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    hi2c->XferSize    = hi2c->XferCount;
 8001376:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    hi2c->pBuffPtr    = pData;
 8001378:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    hi2c->XferSize    = hi2c->XferCount;
 800137c:	85a3      	strh	r3, [r4, #44]	; 0x2c
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800137e:	4b74      	ldr	r3, [pc, #464]	; (8001550 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x23c>)
 8001380:	6323      	str	r3, [r4, #48]	; 0x30
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001382:	6b23      	ldr	r3, [r4, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001384:	682a      	ldr	r2, [r5, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001386:	2b08      	cmp	r3, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001388:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800138c:	602a      	str	r2, [r5, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800138e:	d004      	beq.n	800139a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x86>
 8001390:	2b01      	cmp	r3, #1
 8001392:	d002      	beq.n	800139a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x86>
 8001394:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001398:	d104      	bne.n	80013a4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x90>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800139a:	682b      	ldr	r3, [r5, #0]
 800139c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a0:	602b      	str	r3, [r5, #0]
 80013a2:	e002      	b.n	80013aa <HAL_I2C_Master_Receive.constprop.0.isra.0+0x96>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80013a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013a6:	2b11      	cmp	r3, #17
 80013a8:	d0f7      	beq.n	800139a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x86>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80013aa:	4633      	mov	r3, r6
 80013ac:	2264      	movs	r2, #100	; 0x64
 80013ae:	2100      	movs	r1, #0
 80013b0:	f04f 1001 	mov.w	r0, #65537	; 0x10001
 80013b4:	f7ff fcb8 	bl	8000d28 <I2C_WaitOnFlagUntilTimeout.constprop.0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80013b8:	6863      	ldr	r3, [r4, #4]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80013ba:	b140      	cbz	r0, 80013ce <HAL_I2C_Master_Receive.constprop.0.isra.0+0xba>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	05dd      	lsls	r5, r3, #23
 80013c0:	d502      	bpl.n	80013c8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80013c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013c6:	6463      	str	r3, [r4, #68]	; 0x44
}
 80013c8:	b007      	add	sp, #28
 80013ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013ce:	6962      	ldr	r2, [r4, #20]
 80013d0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80013d4:	d124      	bne.n	8001420 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x10c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80013d6:	f047 0701 	orr.w	r7, r7, #1
 80013da:	b2ff      	uxtb	r7, r7
 80013dc:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80013de:	4631      	mov	r1, r6
 80013e0:	485c      	ldr	r0, [pc, #368]	; (8001554 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x240>)
 80013e2:	f7ff fcc9 	bl	8000d78 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 80013e6:	2800      	cmp	r0, #0
 80013e8:	d1ee      	bne.n	80013c8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
    if (hi2c->XferSize == 0U)
 80013ea:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013ec:	6862      	ldr	r2, [r4, #4]
    if (hi2c->XferSize == 0U)
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d13e      	bne.n	8001470 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x15c>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013f2:	9304      	str	r3, [sp, #16]
 80013f4:	6953      	ldr	r3, [r2, #20]
 80013f6:	9304      	str	r3, [sp, #16]
 80013f8:	6993      	ldr	r3, [r2, #24]
 80013fa:	9304      	str	r3, [sp, #16]
 80013fc:	9b04      	ldr	r3, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013fe:	6813      	ldr	r3, [r2, #0]
 8001400:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001404:	6013      	str	r3, [r2, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001406:	4d54      	ldr	r5, [pc, #336]	; (8001558 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x244>)
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001408:	4f54      	ldr	r7, [pc, #336]	; (800155c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x248>)
    while (hi2c->XferSize > 0U)
 800140a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800140c:	2b00      	cmp	r3, #0
 800140e:	d15f      	bne.n	80014d0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1bc>
    hi2c->State = HAL_I2C_STATE_READY;
 8001410:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8001412:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001416:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800141a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_OK;
 800141e:	e7d3      	b.n	80013c8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001420:	22f0      	movs	r2, #240	; 0xf0
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001422:	4631      	mov	r1, r6
 8001424:	484e      	ldr	r0, [pc, #312]	; (8001560 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x24c>)
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001426:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001428:	f7ff fca6 	bl	8000d78 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 800142c:	2800      	cmp	r0, #0
 800142e:	d1cb      	bne.n	80013c8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001430:	6863      	ldr	r3, [r4, #4]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001432:	4631      	mov	r1, r6
 8001434:	4847      	ldr	r0, [pc, #284]	; (8001554 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x240>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001436:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001438:	f7ff fc9e 	bl	8000d78 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 800143c:	4601      	mov	r1, r0
 800143e:	2800      	cmp	r0, #0
 8001440:	d1c2      	bne.n	80013c8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001442:	6863      	ldr	r3, [r4, #4]
 8001444:	9005      	str	r0, [sp, #20]
 8001446:	695a      	ldr	r2, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001448:	f04f 1001 	mov.w	r0, #65537	; 0x10001
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800144c:	9205      	str	r2, [sp, #20]
 800144e:	699a      	ldr	r2, [r3, #24]
 8001450:	9205      	str	r2, [sp, #20]
 8001452:	9a05      	ldr	r2, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800145a:	601a      	str	r2, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800145c:	4633      	mov	r3, r6
 800145e:	2264      	movs	r2, #100	; 0x64
 8001460:	f7ff fc62 	bl	8000d28 <I2C_WaitOnFlagUntilTimeout.constprop.0>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001464:	6863      	ldr	r3, [r4, #4]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001466:	2800      	cmp	r0, #0
 8001468:	d1a8      	bne.n	80013bc <HAL_I2C_Master_Receive.constprop.0.isra.0+0xa8>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800146a:	22f1      	movs	r2, #241	; 0xf1
 800146c:	611a      	str	r2, [r3, #16]
 800146e:	e7b6      	b.n	80013de <HAL_I2C_Master_Receive.constprop.0.isra.0+0xca>
    else if (hi2c->XferSize == 1U)
 8001470:	2b01      	cmp	r3, #1
 8001472:	d111      	bne.n	8001498 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x184>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001474:	6813      	ldr	r3, [r2, #0]
 8001476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800147a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800147e:	6863      	ldr	r3, [r4, #4]
 8001480:	9003      	str	r0, [sp, #12]
 8001482:	695a      	ldr	r2, [r3, #20]
 8001484:	9203      	str	r2, [sp, #12]
 8001486:	699a      	ldr	r2, [r3, #24]
 8001488:	9203      	str	r2, [sp, #12]
 800148a:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001492:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001494:	b662      	cpsie	i
}
 8001496:	e7b6      	b.n	8001406 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf2>
    else if (hi2c->XferSize == 2U)
 8001498:	2b02      	cmp	r3, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800149a:	6813      	ldr	r3, [r2, #0]
    else if (hi2c->XferSize == 2U)
 800149c:	d10e      	bne.n	80014bc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1a8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800149e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014a2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80014a4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014a6:	6863      	ldr	r3, [r4, #4]
 80014a8:	9002      	str	r0, [sp, #8]
 80014aa:	695a      	ldr	r2, [r3, #20]
 80014ac:	9202      	str	r2, [sp, #8]
 80014ae:	699a      	ldr	r2, [r3, #24]
 80014b0:	9202      	str	r2, [sp, #8]
 80014b2:	9a02      	ldr	r2, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014ba:	e7ea      	b.n	8001492 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x17e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014c0:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014c2:	9001      	str	r0, [sp, #4]
 80014c4:	6953      	ldr	r3, [r2, #20]
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	6993      	ldr	r3, [r2, #24]
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	9b01      	ldr	r3, [sp, #4]
 80014ce:	e79a      	b.n	8001406 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf2>
      if (hi2c->XferSize <= 3U)
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	f200 8086 	bhi.w	80015e2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2ce>
        if (hi2c->XferSize == 1U)
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d114      	bne.n	8001504 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1f0>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014da:	4630      	mov	r0, r6
 80014dc:	f7ff fbf5 	bl	8000cca <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0>
 80014e0:	2800      	cmp	r0, #0
 80014e2:	f47f af71 	bne.w	80013c8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014e6:	6863      	ldr	r3, [r4, #4]
 80014e8:	691a      	ldr	r2, [r3, #16]
 80014ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014ec:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80014ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014f0:	3301      	adds	r3, #1
 80014f2:	62a3      	str	r3, [r4, #40]	; 0x28
          hi2c->XferSize--;
 80014f4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80014f6:	3b01      	subs	r3, #1
 80014f8:	85a3      	strh	r3, [r4, #44]	; 0x2c
          hi2c->XferCount--;
 80014fa:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80014fc:	3b01      	subs	r3, #1
 80014fe:	b29b      	uxth	r3, r3
 8001500:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8001502:	e782      	b.n	800140a <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf6>
        else if (hi2c->XferSize == 2U)
 8001504:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001506:	f04f 0264 	mov.w	r2, #100	; 0x64
 800150a:	4633      	mov	r3, r6
 800150c:	f04f 0100 	mov.w	r1, #0
 8001510:	4628      	mov	r0, r5
        else if (hi2c->XferSize == 2U)
 8001512:	d127      	bne.n	8001564 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x250>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001514:	f7ff fc08 	bl	8000d28 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8001518:	2800      	cmp	r0, #0
 800151a:	f47f af55 	bne.w	80013c8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
 800151e:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001520:	6863      	ldr	r3, [r4, #4]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001528:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800152a:	691a      	ldr	r2, [r3, #16]
 800152c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800152e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001530:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001532:	3301      	adds	r3, #1
 8001534:	62a3      	str	r3, [r4, #40]	; 0x28
          hi2c->XferSize--;
 8001536:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8001538:	3b01      	subs	r3, #1
 800153a:	85a3      	strh	r3, [r4, #44]	; 0x2c
          hi2c->XferCount--;
 800153c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800153e:	3b01      	subs	r3, #1
 8001540:	b29b      	uxth	r3, r3
 8001542:	85e3      	strh	r3, [r4, #46]	; 0x2e
  __ASM volatile ("cpsie i" : : : "memory");
 8001544:	b662      	cpsie	i
 8001546:	e7ce      	b.n	80014e6 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d2>
 8001548:	20000200 	.word	0x20000200
 800154c:	00100002 	.word	0x00100002
 8001550:	ffff0000 	.word	0xffff0000
 8001554:	00010002 	.word	0x00010002
 8001558:	00010004 	.word	0x00010004
 800155c:	20000000 	.word	0x20000000
 8001560:	00010008 	.word	0x00010008
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001564:	f7ff fbe0 	bl	8000d28 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8001568:	2800      	cmp	r0, #0
 800156a:	f47f af2d 	bne.w	80013c8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800156e:	6862      	ldr	r2, [r4, #4]
 8001570:	6813      	ldr	r3, [r2, #0]
 8001572:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001576:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001578:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800157a:	6863      	ldr	r3, [r4, #4]
 800157c:	691a      	ldr	r2, [r3, #16]
 800157e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001580:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001582:	f246 12a8 	movw	r2, #25000	; 0x61a8
          hi2c->pBuffPtr++;
 8001586:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001588:	1c4b      	adds	r3, r1, #1
 800158a:	62a3      	str	r3, [r4, #40]	; 0x28
          hi2c->XferSize--;
 800158c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800158e:	3b01      	subs	r3, #1
 8001590:	85a3      	strh	r3, [r4, #44]	; 0x2c
          hi2c->XferCount--;
 8001592:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001594:	3b01      	subs	r3, #1
 8001596:	b29b      	uxth	r3, r3
 8001598:	85e3      	strh	r3, [r4, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	fbb3 f3f2 	udiv	r3, r3, r2
 80015a0:	2223      	movs	r2, #35	; 0x23
 80015a2:	4353      	muls	r3, r2
 80015a4:	9300      	str	r3, [sp, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80015a6:	6863      	ldr	r3, [r4, #4]
            count--;
 80015a8:	9a00      	ldr	r2, [sp, #0]
 80015aa:	3a01      	subs	r2, #1
 80015ac:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 80015ae:	9a00      	ldr	r2, [sp, #0]
 80015b0:	b96a      	cbnz	r2, 80015ce <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2ba>
              hi2c->State               = HAL_I2C_STATE_READY;
 80015b2:	2320      	movs	r3, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80015b4:	6362      	str	r2, [r4, #52]	; 0x34
              hi2c->State               = HAL_I2C_STATE_READY;
 80015b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015ba:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015c0:	f043 0320 	orr.w	r3, r3, #32
 80015c4:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 80015c6:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80015c8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
              return HAL_ERROR;
 80015cc:	e6fc      	b.n	80013c8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80015ce:	695a      	ldr	r2, [r3, #20]
 80015d0:	0750      	lsls	r0, r2, #29
 80015d2:	d5e9      	bpl.n	80015a8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x294>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015da:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	704b      	strb	r3, [r1, #1]
 80015e0:	e7a6      	b.n	8001530 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x21c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e2:	4630      	mov	r0, r6
 80015e4:	f7ff fb71 	bl	8000cca <I2C_WaitOnRXNEFlagUntilTimeout.constprop.0>
 80015e8:	2800      	cmp	r0, #0
 80015ea:	f47f aeed 	bne.w	80013c8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xb4>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015ee:	6863      	ldr	r3, [r4, #4]
 80015f0:	691a      	ldr	r2, [r3, #16]
 80015f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015f4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80015f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80015f8:	1c53      	adds	r3, r2, #1
 80015fa:	62a3      	str	r3, [r4, #40]	; 0x28
        hi2c->XferSize--;
 80015fc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80015fe:	3b01      	subs	r3, #1
 8001600:	85a3      	strh	r3, [r4, #44]	; 0x2c
        hi2c->XferCount--;
 8001602:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001604:	3b01      	subs	r3, #1
 8001606:	b29b      	uxth	r3, r3
 8001608:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800160a:	6863      	ldr	r3, [r4, #4]
 800160c:	6959      	ldr	r1, [r3, #20]
 800160e:	0749      	lsls	r1, r1, #29
 8001610:	f57f aefb 	bpl.w	800140a <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	7053      	strb	r3, [r2, #1]
 8001618:	e769      	b.n	80014ee <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1da>

0800161a <HAL_I2C_Master_Transmit.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 800161a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800161e:	4c57      	ldr	r4, [pc, #348]	; (800177c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x162>)
 8001620:	4607      	mov	r7, r0
 8001622:	6826      	ldr	r6, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001624:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8001628:	4689      	mov	r9, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800162a:	2b20      	cmp	r3, #32
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 800162c:	4690      	mov	r8, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800162e:	d147      	bne.n	80016c0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001630:	4633      	mov	r3, r6
 8001632:	2219      	movs	r2, #25
 8001634:	2101      	movs	r1, #1
 8001636:	4852      	ldr	r0, [pc, #328]	; (8001780 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x166>)
 8001638:	f7ff fb76 	bl	8000d28 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 800163c:	2800      	cmp	r0, #0
 800163e:	d13f      	bne.n	80016c0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
    __HAL_LOCK(hi2c);
 8001640:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001644:	428b      	cmp	r3, r1
 8001646:	d03b      	beq.n	80016c0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001648:	6865      	ldr	r5, [r4, #4]
    __HAL_LOCK(hi2c);
 800164a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800164e:	682b      	ldr	r3, [r5, #0]
 8001650:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8001652:	bf5e      	ittt	pl
 8001654:	682b      	ldrpl	r3, [r5, #0]
 8001656:	430b      	orrpl	r3, r1
 8001658:	602b      	strpl	r3, [r5, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800165a:	682b      	ldr	r3, [r5, #0]
 800165c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001660:	602b      	str	r3, [r5, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001662:	2321      	movs	r3, #33	; 0x21
 8001664:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001668:	2310      	movs	r3, #16
 800166a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800166e:	2300      	movs	r3, #0
 8001670:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8001672:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    hi2c->XferSize    = hi2c->XferCount;
 8001676:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    hi2c->pBuffPtr    = pData;
 8001678:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    hi2c->XferSize    = hi2c->XferCount;
 800167c:	85a3      	strh	r3, [r4, #44]	; 0x2c
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800167e:	4b41      	ldr	r3, [pc, #260]	; (8001784 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x16a>)
 8001680:	6323      	str	r3, [r4, #48]	; 0x30
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001682:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001684:	2b08      	cmp	r3, #8
 8001686:	d004      	beq.n	8001692 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x78>
 8001688:	2b01      	cmp	r3, #1
 800168a:	d002      	beq.n	8001692 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x78>
 800168c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001690:	d104      	bne.n	800169c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x82>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001692:	682b      	ldr	r3, [r5, #0]
 8001694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001698:	602b      	str	r3, [r5, #0]
 800169a:	e002      	b.n	80016a2 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x88>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800169c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800169e:	2b12      	cmp	r3, #18
 80016a0:	d0f7      	beq.n	8001692 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x78>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016a2:	4633      	mov	r3, r6
 80016a4:	2264      	movs	r2, #100	; 0x64
 80016a6:	2100      	movs	r1, #0
 80016a8:	f04f 1001 	mov.w	r0, #65537	; 0x10001
 80016ac:	f7ff fb3c 	bl	8000d28 <I2C_WaitOnFlagUntilTimeout.constprop.0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016b0:	6863      	ldr	r3, [r4, #4]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016b2:	b140      	cbz	r0, 80016c6 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xac>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	05de      	lsls	r6, r3, #23
 80016b8:	d502      	bpl.n	80016c0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016be:	6463      	str	r3, [r4, #68]	; 0x44
}
 80016c0:	b003      	add	sp, #12
 80016c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016c6:	6962      	ldr	r2, [r4, #20]
 80016c8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80016cc:	d11c      	bne.n	8001708 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xee>
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016ce:	4631      	mov	r1, r6
 80016d0:	482d      	ldr	r0, [pc, #180]	; (8001788 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x16e>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80016d2:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016d4:	f7ff fb50 	bl	8000d78 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 80016d8:	2800      	cmp	r0, #0
 80016da:	d1f1      	bne.n	80016c0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016dc:	6863      	ldr	r3, [r4, #4]
 80016de:	9001      	str	r0, [sp, #4]
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	9201      	str	r2, [sp, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	9b01      	ldr	r3, [sp, #4]
    while (hi2c->XferSize > 0U)
 80016ea:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80016ec:	b9b3      	cbnz	r3, 800171c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x102>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ee:	6861      	ldr	r1, [r4, #4]
 80016f0:	680a      	ldr	r2, [r1, #0]
 80016f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016f6:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80016f8:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80016fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80016fe:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001702:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_OK;
 8001706:	e7db      	b.n	80016c0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001708:	22f0      	movs	r2, #240	; 0xf0
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800170a:	4631      	mov	r1, r6
 800170c:	481f      	ldr	r0, [pc, #124]	; (800178c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x172>)
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800170e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001710:	f7ff fb32 	bl	8000d78 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8001714:	2800      	cmp	r0, #0
 8001716:	d1d3      	bne.n	80016c0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001718:	6863      	ldr	r3, [r4, #4]
 800171a:	e7d8      	b.n	80016ce <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xb4>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800171c:	4630      	mov	r0, r6
 800171e:	f7ff fb5f 	bl	8000de0 <I2C_WaitOnTXEFlagUntilTimeout.constprop.0>
 8001722:	b140      	cbz	r0, 8001736 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x11c>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001724:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001726:	2b04      	cmp	r3, #4
 8001728:	d1ca      	bne.n	80016c0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172a:	6862      	ldr	r2, [r4, #4]
 800172c:	6813      	ldr	r3, [r2, #0]
 800172e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	e7c4      	b.n	80016c0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001736:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001738:	6860      	ldr	r0, [r4, #4]
 800173a:	461a      	mov	r2, r3
 800173c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001740:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8001742:	62a2      	str	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001744:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8001746:	3a01      	subs	r2, #1
 8001748:	b292      	uxth	r2, r2
 800174a:	85e2      	strh	r2, [r4, #46]	; 0x2e
      hi2c->XferSize--;
 800174c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800174e:	6945      	ldr	r5, [r0, #20]
      hi2c->XferSize--;
 8001750:	1e51      	subs	r1, r2, #1
 8001752:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001754:	076d      	lsls	r5, r5, #29
      hi2c->XferSize--;
 8001756:	85a1      	strh	r1, [r4, #44]	; 0x2c
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001758:	d50a      	bpl.n	8001770 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x156>
 800175a:	b149      	cbz	r1, 8001770 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x156>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800175c:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 800175e:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001760:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8001762:	62a3      	str	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001764:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        hi2c->XferSize--;
 8001766:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001768:	3b01      	subs	r3, #1
 800176a:	b29b      	uxth	r3, r3
 800176c:	85e3      	strh	r3, [r4, #46]	; 0x2e
        hi2c->XferSize--;
 800176e:	85a2      	strh	r2, [r4, #44]	; 0x2c
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001770:	4630      	mov	r0, r6
 8001772:	f7ff fce8 	bl	8001146 <I2C_WaitOnBTFFlagUntilTimeout.constprop.0>
 8001776:	2800      	cmp	r0, #0
 8001778:	d0b7      	beq.n	80016ea <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xd0>
 800177a:	e7d3      	b.n	8001724 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10a>
 800177c:	20000200 	.word	0x20000200
 8001780:	00100002 	.word	0x00100002
 8001784:	ffff0000 	.word	0xffff0000
 8001788:	00010002 	.word	0x00010002
 800178c:	00010008 	.word	0x00010008

08001790 <BME280_getPressure>:
float BME280_getPressure(void) {
    uint32_t press_raw;
    float pressf;
    uint8_t cmd[4];

    cmd[0] = 0xF7; // press_msb
 8001790:	23f7      	movs	r3, #247	; 0xf7
float BME280_getPressure(void) {
 8001792:	b537      	push	{r0, r1, r2, r4, r5, lr}
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001794:	2201      	movs	r2, #1
 8001796:	20ec      	movs	r0, #236	; 0xec
 8001798:	a901      	add	r1, sp, #4
    cmd[0] = 0xF7; // press_msb
 800179a:	f88d 3004 	strb.w	r3, [sp, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800179e:	f7ff ff3c 	bl	800161a <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 80017a2:	2203      	movs	r2, #3
 80017a4:	20ec      	movs	r0, #236	; 0xec
 80017a6:	f10d 0105 	add.w	r1, sp, #5
 80017aa:	f7ff fdb3 	bl	8001314 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);

    int32_t var1, var2;
    uint32_t press;

    var1 = (t_fine >> 1) - 64000;
 80017ae:	492f      	ldr	r1, [pc, #188]	; (800186c <BME280_getPressure+0xdc>)
 80017b0:	f8d1 40e4 	ldr.w	r4, [r1, #228]	; 0xe4
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
    var2 = var2 + ((var1 * dig_P5) << 1);
    var2 = (var2 >> 2) + (dig_P4 << 16);
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80017b4:	f9b1 00e8 	ldrsh.w	r0, [r1, #232]	; 0xe8
    var1 = (t_fine >> 1) - 64000;
 80017b8:	1064      	asrs	r4, r4, #1
 80017ba:	f5a4 457a 	sub.w	r5, r4, #64000	; 0xfa00
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80017be:	10ab      	asrs	r3, r5, #2
 80017c0:	435b      	muls	r3, r3
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80017c2:	135a      	asrs	r2, r3, #13
 80017c4:	4342      	muls	r2, r0
 80017c6:	f9b1 00ea 	ldrsh.w	r0, [r1, #234]	; 0xea
 80017ca:	4368      	muls	r0, r5
 80017cc:	1040      	asrs	r0, r0, #1
 80017ce:	eb00 00e2 	add.w	r0, r0, r2, asr #3
 80017d2:	1480      	asrs	r0, r0, #18
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80017d4:	f8b1 20ec 	ldrh.w	r2, [r1, #236]	; 0xec
 80017d8:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 80017dc:	4350      	muls	r0, r2
    if (var1 == 0) {
 80017de:	13c2      	asrs	r2, r0, #15
 80017e0:	d041      	beq.n	8001866 <BME280_getPressure+0xd6>
    var2 = var2 + ((var1 * dig_P5) << 1);
 80017e2:	f9b1 40f0 	ldrsh.w	r4, [r1, #240]	; 0xf0
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80017e6:	f9b1 00ee 	ldrsh.w	r0, [r1, #238]	; 0xee
    var2 = var2 + ((var1 * dig_P5) << 1);
 80017ea:	436c      	muls	r4, r5
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80017ec:	12db      	asrs	r3, r3, #11
    var2 = var2 + ((var1 * dig_P5) << 1);
 80017ee:	0064      	lsls	r4, r4, #1
 80017f0:	fb00 4403 	mla	r4, r0, r3, r4
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80017f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017f8:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8001802:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8001806:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
    var2 = (var2 >> 2) + (dig_P4 << 16);
 800180a:	f9b1 00f2 	ldrsh.w	r0, [r1, #242]	; 0xf2
 800180e:	0400      	lsls	r0, r0, #16
 8001810:	eb00 04a4 	add.w	r4, r0, r4, asr #2
        return 0;
    }
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 8001814:	4816      	ldr	r0, [pc, #88]	; (8001870 <BME280_getPressure+0xe0>)
 8001816:	eb03 3324 	add.w	r3, r3, r4, asr #12
 800181a:	4343      	muls	r3, r0
 800181c:	f103 4043 	add.w	r0, r3, #3271557120	; 0xc3000000
 8001820:	f500 00a0 	add.w	r0, r0, #5242880	; 0x500000
    if (press < 0x80000000) {
 8001824:	2800      	cmp	r0, #0
        press = (press << 1) / var1;
    } else {
        press = (press / var1) * 2;
 8001826:	bfb3      	iteet	lt
 8001828:	fbb0 f0f2 	udivlt	r0, r0, r2
        press = (press << 1) / var1;
 800182c:	0040      	lslge	r0, r0, #1
 800182e:	fbb0 f0f2 	udivge	r0, r0, r2
        press = (press / var1) * 2;
 8001832:	0040      	lsllt	r0, r0, #1
    }
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8001834:	08c3      	lsrs	r3, r0, #3
 8001836:	435b      	muls	r3, r3
 8001838:	f9b1 20f4 	ldrsh.w	r2, [r1, #244]	; 0xf4
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800183c:	f9b1 40f6 	ldrsh.w	r4, [r1, #246]	; 0xf6
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8001840:	0b5b      	lsrs	r3, r3, #13
 8001842:	435a      	muls	r2, r3
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8001844:	0883      	lsrs	r3, r0, #2
 8001846:	4363      	muls	r3, r4
 8001848:	135b      	asrs	r3, r3, #13
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 800184a:	eb03 3322 	add.w	r3, r3, r2, asr #12
 800184e:	f9b1 20f8 	ldrsh.w	r2, [r1, #248]	; 0xf8
 8001852:	4413      	add	r3, r2

    pressf = (float) press;
 8001854:	eb00 1023 	add.w	r0, r0, r3, asr #4
 8001858:	f001 fd88 	bl	800336c <__aeabi_ui2f>
    return (pressf / 100.0f);
 800185c:	4905      	ldr	r1, [pc, #20]	; (8001874 <BME280_getPressure+0xe4>)
 800185e:	f001 fe91 	bl	8003584 <__aeabi_fdiv>
}
 8001862:	b003      	add	sp, #12
 8001864:	bd30      	pop	{r4, r5, pc}
        return 0;
 8001866:	2000      	movs	r0, #0
 8001868:	e7fb      	b.n	8001862 <BME280_getPressure+0xd2>
 800186a:	bf00      	nop
 800186c:	20000200 	.word	0x20000200
 8001870:	fffff3cb 	.word	0xfffff3cb
 8001874:	42c80000 	.word	0x42c80000

08001878 <DS3231_Update>:
uint8_t bcdToDec(uint8_t val) {
    return ((val / 16 * 10) + (val % 16));
}

void DS3231_Update(void) {
    uint8_t cmd = 0;
 8001878:	2300      	movs	r3, #0
void DS3231_Update(void) {
 800187a:	b513      	push	{r0, r1, r4, lr}
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 800187c:	4c28      	ldr	r4, [pc, #160]	; (8001920 <DS3231_Update+0xa8>)
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 800187e:	f10d 0107 	add.w	r1, sp, #7
 8001882:	2201      	movs	r2, #1
 8001884:	20d0      	movs	r0, #208	; 0xd0
    uint8_t cmd = 0;
 8001886:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 800188a:	f7ff fec6 	bl	800161a <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 800188e:	2213      	movs	r2, #19
 8001890:	20d0      	movs	r0, #208	; 0xd0
 8001892:	f104 01fa 	add.w	r1, r4, #250	; 0xfa
 8001896:	f7ff fd3d 	bl	8001314 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    rtcBufferSet[1] = rtcBuffer[0];
 800189a:	f894 30fa 	ldrb.w	r3, [r4, #250]	; 0xfa
 800189e:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
    rtcBufferSet[2] = rtcBuffer[1];
 80018a2:	f894 30fb 	ldrb.w	r3, [r4, #251]	; 0xfb
 80018a6:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
    rtcBufferSet[3] = rtcBuffer[2];
 80018aa:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
 80018ae:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    rtcBufferSet[4] = rtcBuffer[3];
 80018b2:	f894 30fd 	ldrb.w	r3, [r4, #253]	; 0xfd
 80018b6:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
    rtcBufferSet[5] = rtcBuffer[4];
 80018ba:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
 80018be:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
    rtcBufferSet[6] = rtcBuffer[5];
 80018c2:	f894 30ff 	ldrb.w	r3, [r4, #255]	; 0xff
 80018c6:	f884 3113 	strb.w	r3, [r4, #275]	; 0x113
    rtcBufferSet[7] = rtcBuffer[6];
 80018ca:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
 80018ce:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
    rtcBufferSet[8] = rtcBuffer[7];
 80018d2:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
 80018d6:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
    rtcBufferSet[9] = rtcBuffer[8];
 80018da:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
 80018de:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
    rtcBufferSet[10] = rtcBuffer[9];
 80018e2:	f894 3103 	ldrb.w	r3, [r4, #259]	; 0x103
 80018e6:	f884 3117 	strb.w	r3, [r4, #279]	; 0x117
    rtcBufferSet[11] = rtcBuffer[10];
 80018ea:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80018ee:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
    rtcBufferSet[12] = rtcBuffer[11];
 80018f2:	f894 3105 	ldrb.w	r3, [r4, #261]	; 0x105
 80018f6:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
    rtcBufferSet[13] = rtcBuffer[12];
 80018fa:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
 80018fe:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
    rtcBufferSet[14] = rtcBuffer[13];
 8001902:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
 8001906:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
    rtcBufferSet[15] = rtcBuffer[14];
 800190a:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
 800190e:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
    rtcBufferSet[16] = rtcBuffer[15];
 8001912:	f894 3109 	ldrb.w	r3, [r4, #265]	; 0x109
 8001916:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 800191a:	b002      	add	sp, #8
 800191c:	bd10      	pop	{r4, pc}
 800191e:	bf00      	nop
 8001920:	20000200 	.word	0x20000200

08001924 <HAL_DMA_Start_IT.isra.0>:
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
 8001924:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001926:	f890 4020 	ldrb.w	r4, [r0, #32]
 800192a:	2c01      	cmp	r4, #1
 800192c:	d027      	beq.n	800197e <HAL_DMA_Start_IT.isra.0+0x5a>
 800192e:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001930:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001934:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001938:	42a5      	cmp	r5, r4
 800193a:	f04f 0400 	mov.w	r4, #0
 800193e:	d127      	bne.n	8001990 <HAL_DMA_Start_IT.isra.0+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001940:	2602      	movs	r6, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001942:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001944:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8001946:	f880 6021 	strb.w	r6, [r0, #33]	; 0x21
    __HAL_DMA_DISABLE(hdma);
 800194a:	6826      	ldr	r6, [r4, #0]
 800194c:	f026 0601 	bic.w	r6, r6, #1
 8001950:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001952:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8001956:	40bd      	lsls	r5, r7
 8001958:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800195a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800195c:	6843      	ldr	r3, [r0, #4]
 800195e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001960:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001962:	bf0b      	itete	eq
 8001964:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001966:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001968:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800196a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800196c:	b143      	cbz	r3, 8001980 <HAL_DMA_Start_IT.isra.0+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800196e:	6823      	ldr	r3, [r4, #0]
 8001970:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001974:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001976:	6823      	ldr	r3, [r4, #0]
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6023      	str	r3, [r4, #0]
}
 800197e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001980:	6823      	ldr	r3, [r4, #0]
 8001982:	f023 0304 	bic.w	r3, r3, #4
 8001986:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	f043 030a 	orr.w	r3, r3, #10
 800198e:	e7f1      	b.n	8001974 <HAL_DMA_Start_IT.isra.0+0x50>
    __HAL_UNLOCK(hdma); 
 8001990:	f880 4020 	strb.w	r4, [r0, #32]
 8001994:	e7f3      	b.n	800197e <HAL_DMA_Start_IT.isra.0+0x5a>

08001996 <UART_Start_Receive_DMA.constprop.0.isra.0>:
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 8001996:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->pRxBuffPtr = pData;
 8001998:	4c18      	ldr	r4, [pc, #96]	; (80019fc <UART_Start_Receive_DMA.constprop.0.isra.0+0x66>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800199a:	2500      	movs	r5, #0
  huart->RxXferSize = Size;
 800199c:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 80019a0:	460b      	mov	r3, r1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80019a2:	2122      	movs	r1, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019a4:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
  huart->pRxBuffPtr = pData;
 80019a8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80019ac:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 80019b0:	4602      	mov	r2, r0
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80019b2:	4913      	ldr	r1, [pc, #76]	; (8001a00 <UART_Start_Receive_DMA.constprop.0.isra.0+0x6a>)
 80019b4:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80019b8:	6281      	str	r1, [r0, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80019ba:	4912      	ldr	r1, [pc, #72]	; (8001a04 <UART_Start_Receive_DMA.constprop.0.isra.0+0x6e>)
 80019bc:	62c1      	str	r1, [r0, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80019be:	4912      	ldr	r1, [pc, #72]	; (8001a08 <UART_Start_Receive_DMA.constprop.0.isra.0+0x72>)
  huart->hdmarx->XferAbortCallback = NULL;
 80019c0:	e9c0 150c 	strd	r1, r5, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80019c4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80019c6:	3104      	adds	r1, #4
 80019c8:	f7ff ffac 	bl	8001924 <HAL_DMA_Start_IT.isra.0>
  __HAL_UART_CLEAR_OREFLAG(huart);
 80019cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80019ce:	9501      	str	r5, [sp, #4]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	9201      	str	r2, [sp, #4]
 80019d4:	685a      	ldr	r2, [r3, #4]
  __HAL_UNLOCK(huart);
 80019d6:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
  __HAL_UART_CLEAR_OREFLAG(huart);
 80019da:	9201      	str	r2, [sp, #4]
 80019dc:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019e4:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019e6:	695a      	ldr	r2, [r3, #20]
 80019e8:	f042 0201 	orr.w	r2, r2, #1
 80019ec:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019f4:	615a      	str	r2, [r3, #20]
}
 80019f6:	b003      	add	sp, #12
 80019f8:	bd30      	pop	{r4, r5, pc}
 80019fa:	bf00      	nop
 80019fc:	20000200 	.word	0x20000200
 8001a00:	08001a0d 	.word	0x08001a0d
 8001a04:	08000773 	.word	0x08000773
 8001a08:	08000779 	.word	0x08000779

08001a0c <UART_DMAReceiveCplt>:
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a0c:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a0e:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f013 0320 	ands.w	r3, r3, #32
 8001a16:	d117      	bne.n	8001a48 <UART_DMAReceiveCplt+0x3c>
    huart->RxXferCount = 0U;
 8001a18:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001a1a:	6813      	ldr	r3, [r2, #0]
 8001a1c:	68d9      	ldr	r1, [r3, #12]
 8001a1e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001a22:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a24:	6959      	ldr	r1, [r3, #20]
 8001a26:	f021 0101 	bic.w	r1, r1, #1
 8001a2a:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a2c:	6959      	ldr	r1, [r3, #20]
 8001a2e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001a32:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8001a34:	2120      	movs	r1, #32
 8001a36:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a3a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001a3c:	2901      	cmp	r1, #1
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001a3e:	bf02      	ittt	eq
 8001a40:	68d9      	ldreq	r1, [r3, #12]
 8001a42:	f021 0110 	biceq.w	r1, r1, #16
 8001a46:	60d9      	streq	r1, [r3, #12]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a48:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d01f      	beq.n	8001a8e <UART_DMAReceiveCplt+0x82>
uint8_t rx_buffer[UART_BUFFER_SIZE];
uint8_t rx_index = 0;
uint8_t rx_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart->Instance == USART1) {
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <UART_DMAReceiveCplt+0x84>)
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d11b      	bne.n	8001a8e <UART_DMAReceiveCplt+0x82>
		rx_buffer[rx_index++] = rx_data;
 8001a56:	480f      	ldr	r0, [pc, #60]	; (8001a94 <UART_DMAReceiveCplt+0x88>)
 8001a58:	f890 311e 	ldrb.w	r3, [r0, #286]	; 0x11e
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	f880 211e 	strb.w	r2, [r0, #286]	; 0x11e
 8001a62:	f890 212f 	ldrb.w	r2, [r0, #303]	; 0x12f
 8001a66:	4403      	add	r3, r0
 8001a68:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a6c:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
 8001a70:	2b20      	cmp	r3, #32
 8001a72:	d10c      	bne.n	8001a8e <UART_DMAReceiveCplt+0x82>
    __HAL_LOCK(huart);
 8001a74:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d008      	beq.n	8001a8e <UART_DMAReceiveCplt+0x82>
 8001a7c:	2101      	movs	r1, #1
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a7e:	2300      	movs	r3, #0
    __HAL_LOCK(huart);
 8001a80:	f880 1094 	strb.w	r1, [r0, #148]	; 0x94
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a84:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return(UART_Start_Receive_DMA(huart, pData, Size));
 8001a88:	f200 102f 	addw	r0, r0, #303	; 0x12f
 8001a8c:	e783      	b.n	8001996 <UART_Start_Receive_DMA.constprop.0.isra.0>
}
 8001a8e:	4770      	bx	lr
 8001a90:	40013800 	.word	0x40013800
 8001a94:	20000200 	.word	0x20000200

08001a98 <HAL_InitTick.isra.0>:
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 8001a9c:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a9e:	4c0f      	ldr	r4, [pc, #60]	; (8001adc <HAL_InitTick.isra.0+0x44>)
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 8001aa0:	4601      	mov	r1, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aae:	d213      	bcs.n	8001ad8 <HAL_InitTick.isra.0+0x40>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab4:	20f0      	movs	r0, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab6:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_InitTick.isra.0+0x48>)
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aba:	290f      	cmp	r1, #15
 8001abc:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	f04f 0307 	mov.w	r3, #7
 8001aca:	6113      	str	r3, [r2, #16]
 8001acc:	d804      	bhi.n	8001ad8 <HAL_InitTick.isra.0+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ace:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad2:	f7fe ffdd 	bl	8000a90 <HAL_NVIC_SetPriority.constprop.0>
    uwTickPrio = TickPriority;
 8001ad6:	6061      	str	r1, [r4, #4]
}
 8001ad8:	bd10      	pop	{r4, pc}
 8001ada:	bf00      	nop
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <LCD_Font.constprop.0>:
			set_pixels = 0;
		}
	}
}

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8001ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	int16_t cursor_x = x;
	int16_t cursor_y = y;
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001ae8:	f04f 0a00 	mov.w	sl, #0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8001aec:	b08f      	sub	sp, #60	; 0x3c
 8001aee:	4693      	mov	fp, r2
	int16_t cursor_x = x;
 8001af0:	b202      	sxth	r2, r0
 8001af2:	9203      	str	r2, [sp, #12]
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001af4:	681a      	ldr	r2, [r3, #0]
	int16_t cursor_x = x;
 8001af6:	9f03      	ldr	r7, [sp, #12]
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001af8:	9207      	str	r2, [sp, #28]
 8001afa:	685a      	ldr	r2, [r3, #4]
	int16_t cursor_y = y;
 8001afc:	b20c      	sxth	r4, r1
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001afe:	9205      	str	r2, [sp, #20]
 8001b00:	7a1a      	ldrb	r2, [r3, #8]
 8001b02:	9206      	str	r2, [sp, #24]
 8001b04:	7a5a      	ldrb	r2, [r3, #9]
 8001b06:	7a9b      	ldrb	r3, [r3, #10]
 8001b08:	9209      	str	r2, [sp, #36]	; 0x24
 8001b0a:	9308      	str	r3, [sp, #32]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001b0c:	4658      	mov	r0, fp
 8001b0e:	f000 fdbd 	bl	800268c <strlen>
 8001b12:	fa1f f58a 	uxth.w	r5, sl
 8001b16:	42a8      	cmp	r0, r5
 8001b18:	d802      	bhi.n	8001b20 <LCD_Font.constprop.0+0x3c>
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
			cursor_x += glyph.xAdvance * size;
		}
	}
}
 8001b1a:	b00f      	add	sp, #60	; 0x3c
 8001b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		char c = text[text_pos];
 8001b20:	f81b 3005 	ldrb.w	r3, [fp, r5]
		if(c == '\n')
 8001b24:	2b0a      	cmp	r3, #10
 8001b26:	d106      	bne.n	8001b36 <LCD_Font.constprop.0+0x52>
			cursor_y += font.yAdvance * size;
 8001b28:	9b08      	ldr	r3, [sp, #32]
			cursor_x = x;
 8001b2a:	9f03      	ldr	r7, [sp, #12]
			cursor_y += font.yAdvance * size;
 8001b2c:	441c      	add	r4, r3
 8001b2e:	b224      	sxth	r4, r4
 8001b30:	f10a 0a01 	add.w	sl, sl, #1
 8001b34:	e7ea      	b.n	8001b0c <LCD_Font.constprop.0+0x28>
		else if(c >= font.first && c <= font.last && c != '\r')
 8001b36:	9a06      	ldr	r2, [sp, #24]
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d3f9      	bcc.n	8001b30 <LCD_Font.constprop.0+0x4c>
 8001b3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d8f6      	bhi.n	8001b30 <LCD_Font.constprop.0+0x4c>
 8001b42:	2b0d      	cmp	r3, #13
 8001b44:	d0f4      	beq.n	8001b30 <LCD_Font.constprop.0+0x4c>
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001b46:	2500      	movs	r5, #0
	uint8_t bits = 0, bit = 0;
 8001b48:	462e      	mov	r6, r5
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8001b4a:	9a06      	ldr	r2, [sp, #24]
 8001b4c:	9805      	ldr	r0, [sp, #20]
 8001b4e:	1a9b      	subs	r3, r3, r2
 8001b50:	9a05      	ldr	r2, [sp, #20]
 8001b52:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 8001b56:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8001b5a:	6849      	ldr	r1, [r1, #4]
 8001b5c:	aa0c      	add	r2, sp, #48	; 0x30
 8001b5e:	c203      	stmia	r2!, {r0, r1}
	uint16_t bo = glyph -> bitmapOffset;
 8001b60:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
	uint8_t bits = 0, bit = 0;
 8001b64:	9504      	str	r5, [sp, #16]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001b66:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8001b6a:	b2ea      	uxtb	r2, r5
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	920b      	str	r2, [sp, #44]	; 0x2c
 8001b70:	d848      	bhi.n	8001c04 <LCD_Font.constprop.0+0x120>
			cursor_x += glyph.xAdvance * size;
 8001b72:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8001b76:	441f      	add	r7, r3
 8001b78:	b23f      	sxth	r7, r7
 8001b7a:	e7d9      	b.n	8001b30 <LCD_Font.constprop.0+0x4c>
			if(bit == 0)
 8001b7c:	b946      	cbnz	r6, 8001b90 <LCD_Font.constprop.0+0xac>
				bit  = 0x80;
 8001b7e:	2680      	movs	r6, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8001b80:	9907      	ldr	r1, [sp, #28]
 8001b82:	f109 0301 	add.w	r3, r9, #1
 8001b86:	f811 1009 	ldrb.w	r1, [r1, r9]
 8001b8a:	fa1f f983 	uxth.w	r9, r3
 8001b8e:	9104      	str	r1, [sp, #16]
			if(bits & bit)
 8001b90:	9b04      	ldr	r3, [sp, #16]
 8001b92:	4033      	ands	r3, r6
 8001b94:	930a      	str	r3, [sp, #40]	; 0x28
 8001b96:	d01e      	beq.n	8001bd6 <LCD_Font.constprop.0+0xf2>
				set_pixels++;
 8001b98:	3201      	adds	r2, #1
 8001b9a:	b292      	uxth	r2, r2
			bit >>= 1;
 8001b9c:	0876      	lsrs	r6, r6, #1
 8001b9e:	f108 0801 	add.w	r8, r8, #1
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001ba2:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8001ba6:	fa5f f388 	uxtb.w	r3, r8
 8001baa:	4299      	cmp	r1, r3
 8001bac:	d8e6      	bhi.n	8001b7c <LCD_Font.constprop.0+0x98>
		if (set_pixels > 0)
 8001bae:	b182      	cbz	r2, 8001bd2 <LCD_Font.constprop.0+0xee>
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001bb0:	f99d 1036 	ldrsb.w	r1, [sp, #54]	; 0x36
 8001bb4:	b2e8      	uxtb	r0, r5
 8001bb6:	4401      	add	r1, r0
 8001bb8:	f99d 0035 	ldrsb.w	r0, [sp, #53]	; 0x35
 8001bbc:	4421      	add	r1, r4
 8001bbe:	4418      	add	r0, r3
 8001bc0:	1a80      	subs	r0, r0, r2
 8001bc2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001bc4:	4438      	add	r0, r7
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	b289      	uxth	r1, r1
 8001bca:	2301      	movs	r3, #1
 8001bcc:	b280      	uxth	r0, r0
 8001bce:	f7fe fb53 	bl	8000278 <LCD_Rect_Fill>
 8001bd2:	3501      	adds	r5, #1
 8001bd4:	e7c7      	b.n	8001b66 <LCD_Font.constprop.0+0x82>
			else if (set_pixels > 0)
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d0e0      	beq.n	8001b9c <LCD_Font.constprop.0+0xb8>
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001bdc:	f99d 1036 	ldrsb.w	r1, [sp, #54]	; 0x36
 8001be0:	f99d 0035 	ldrsb.w	r0, [sp, #53]	; 0x35
 8001be4:	4419      	add	r1, r3
 8001be6:	fa5f f388 	uxtb.w	r3, r8
 8001bea:	4418      	add	r0, r3
 8001bec:	1a80      	subs	r0, r0, r2
 8001bee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001bf0:	4421      	add	r1, r4
 8001bf2:	4438      	add	r0, r7
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	b289      	uxth	r1, r1
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	b280      	uxth	r0, r0
 8001bfc:	f7fe fb3c 	bl	8000278 <LCD_Rect_Fill>
				set_pixels = 0;
 8001c00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001c02:	e7cb      	b.n	8001b9c <LCD_Font.constprop.0+0xb8>
 8001c04:	f04f 0800 	mov.w	r8, #0
 8001c08:	4642      	mov	r2, r8
 8001c0a:	e7ca      	b.n	8001ba2 <LCD_Font.constprop.0+0xbe>

08001c0c <round_nth.constprop.0>:
float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
 8001c0c:	b508      	push	{r3, lr}
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8001c0e:	f000 fea9 	bl	8002964 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8001c12:	a309      	add	r3, pc, #36	; (adr r3, 8001c38 <round_nth.constprop.0+0x2c>)
 8001c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c18:	f001 f826 	bl	8002c68 <__aeabi_ddiv>
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <round_nth.constprop.0+0x34>)
 8001c20:	f000 fd42 	bl	80026a8 <__adddf3>
 8001c24:	f008 f818 	bl	8009c58 <floor>
 8001c28:	a303      	add	r3, pc, #12	; (adr r3, 8001c38 <round_nth.constprop.0+0x2c>)
 8001c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2e:	f000 fef1 	bl	8002a14 <__aeabi_dmul>
 8001c32:	f001 f9e7 	bl	8003004 <__aeabi_d2f>
}                                                                                        // round_nth(1.235, -2) = 1.24
 8001c36:	bd08      	pop	{r3, pc}
 8001c38:	9999999a 	.word	0x9999999a
 8001c3c:	3fb99999 	.word	0x3fb99999
 8001c40:	3fe00000 	.word	0x3fe00000

08001c44 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <NMI_Handler>

08001c46 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <HardFault_Handler>

08001c48 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <MemManage_Handler>

08001c4a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c4a:	e7fe      	b.n	8001c4a <BusFault_Handler>

08001c4c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <UsageFault_Handler>

08001c4e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c4e:	4770      	bx	lr

08001c50 <DebugMon_Handler>:
 8001c50:	4770      	bx	lr

08001c52 <PendSV_Handler>:
 8001c52:	4770      	bx	lr

08001c54 <SysTick_Handler>:
  uwTick += uwTickFreq;
 8001c54:	4a02      	ldr	r2, [pc, #8]	; (8001c60 <SysTick_Handler+0xc>)
 8001c56:	6813      	ldr	r3, [r2, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000200 	.word	0x20000200

08001c64 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001c64:	4801      	ldr	r0, [pc, #4]	; (8001c6c <DMA1_Channel2_IRQHandler+0x8>)
 8001c66:	f7fe bbab 	b.w	80003c0 <HAL_DMA_IRQHandler>
 8001c6a:	bf00      	nop
 8001c6c:	20000440 	.word	0x20000440

08001c70 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001c70:	4801      	ldr	r0, [pc, #4]	; (8001c78 <DMA1_Channel4_IRQHandler+0x8>)
 8001c72:	f7fe bba5 	b.w	80003c0 <HAL_DMA_IRQHandler>
 8001c76:	bf00      	nop
 8001c78:	200003b8 	.word	0x200003b8

08001c7c <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c7c:	4801      	ldr	r0, [pc, #4]	; (8001c84 <DMA1_Channel5_IRQHandler+0x8>)
 8001c7e:	f7fe bb9f 	b.w	80003c0 <HAL_DMA_IRQHandler>
 8001c82:	bf00      	nop
 8001c84:	200003fc 	.word	0x200003fc

08001c88 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001c88:	4801      	ldr	r0, [pc, #4]	; (8001c90 <DMA1_Channel6_IRQHandler+0x8>)
 8001c8a:	f7fe bb99 	b.w	80003c0 <HAL_DMA_IRQHandler>
 8001c8e:	bf00      	nop
 8001c90:	20000330 	.word	0x20000330

08001c94 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001c94:	4801      	ldr	r0, [pc, #4]	; (8001c9c <DMA1_Channel7_IRQHandler+0x8>)
 8001c96:	f7fe bb93 	b.w	80003c0 <HAL_DMA_IRQHandler>
 8001c9a:	bf00      	nop
 8001c9c:	20000374 	.word	0x20000374

08001ca0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001ca2:	4c7f      	ldr	r4, [pc, #508]	; (8001ea0 <I2C1_EV_IRQHandler+0x200>)
 8001ca4:	b08f      	sub	sp, #60	; 0x3c
 8001ca6:	6863      	ldr	r3, [r4, #4]
 8001ca8:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001caa:	6b26      	ldr	r6, [r4, #48]	; 0x30
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001cac:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001cb0:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001cb4:	2810      	cmp	r0, #16
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001cb6:	b2c5      	uxtb	r5, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001cb8:	b2c9      	uxtb	r1, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001cba:	d002      	beq.n	8001cc2 <I2C1_EV_IRQHandler+0x22>
 8001cbc:	2d40      	cmp	r5, #64	; 0x40
 8001cbe:	f040 82bc 	bne.w	800223a <I2C1_EV_IRQHandler+0x59a>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001cc2:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001cc4:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001cc6:	f010 0f01 	tst.w	r0, #1
 8001cca:	d107      	bne.n	8001cdc <I2C1_EV_IRQHandler+0x3c>
 8001ccc:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8001cd0:	d002      	beq.n	8001cd8 <I2C1_EV_IRQHandler+0x38>
 8001cd2:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8001cd6:	d151      	bne.n	8001d7c <I2C1_EV_IRQHandler+0xdc>
  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001cd8:	b00f      	add	sp, #60	; 0x3c
 8001cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cdc:	0596      	lsls	r6, r2, #22
 8001cde:	d54d      	bpl.n	8001d7c <I2C1_EV_IRQHandler+0xdc>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8001ce0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ce2:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8001ce6:	d10c      	bne.n	8001d02 <I2C1_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8001ce8:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8001cea:	6322      	str	r2, [r4, #48]	; 0x30
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001cec:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8001cf0:	2a40      	cmp	r2, #64	; 0x40
 8001cf2:	d111      	bne.n	8001d18 <I2C1_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8001cf4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001cf6:	b952      	cbnz	r2, 8001d0e <I2C1_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001cf8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001cfa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001cfe:	611a      	str	r2, [r3, #16]
 8001d00:	e7ea      	b.n	8001cd8 <I2C1_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8001d02:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d04:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 8001d08:	d1f0      	bne.n	8001cec <I2C1_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8001d0a:	2208      	movs	r2, #8
 8001d0c:	e7ed      	b.n	8001cea <I2C1_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001d0e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	e7f2      	b.n	8001cfe <I2C1_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d18:	6962      	ldr	r2, [r4, #20]
 8001d1a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001d1e:	d11a      	bne.n	8001d56 <I2C1_EV_IRQHandler+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001d20:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8001d24:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001d26:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001d28:	d111      	bne.n	8001d4e <I2C1_EV_IRQHandler+0xae>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001d2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001d2e:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001d30:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001d32:	b10a      	cbz	r2, 8001d38 <I2C1_EV_IRQHandler+0x98>
 8001d34:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d36:	b92a      	cbnz	r2, 8001d44 <I2C1_EV_IRQHandler+0xa4>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001d38:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d3a:	2a00      	cmp	r2, #0
 8001d3c:	d0cc      	beq.n	8001cd8 <I2C1_EV_IRQHandler+0x38>
 8001d3e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d40:	2a00      	cmp	r2, #0
 8001d42:	d0c9      	beq.n	8001cd8 <I2C1_EV_IRQHandler+0x38>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	e7c4      	b.n	8001cd8 <I2C1_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	e7eb      	b.n	8001d2e <I2C1_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 8001d56:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001d58:	b932      	cbnz	r2, 8001d68 <I2C1_EV_IRQHandler+0xc8>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001d5a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001d5c:	11d2      	asrs	r2, r2, #7
 8001d5e:	f002 0206 	and.w	r2, r2, #6
 8001d62:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8001d66:	e7ca      	b.n	8001cfe <I2C1_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8001d68:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001d6a:	2a01      	cmp	r2, #1
 8001d6c:	d1b4      	bne.n	8001cd8 <I2C1_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001d6e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001d70:	11d2      	asrs	r2, r2, #7
 8001d72:	f002 0206 	and.w	r2, r2, #6
 8001d76:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8001d7a:	e7c0      	b.n	8001cfe <I2C1_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d7c:	0706      	lsls	r6, r0, #28
 8001d7e:	d503      	bpl.n	8001d88 <I2C1_EV_IRQHandler+0xe8>
 8001d80:	0596      	lsls	r6, r2, #22
 8001d82:	d501      	bpl.n	8001d88 <I2C1_EV_IRQHandler+0xe8>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001d84:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001d86:	e7e4      	b.n	8001d52 <I2C1_EV_IRQHandler+0xb2>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d88:	0786      	lsls	r6, r0, #30
 8001d8a:	f140 80eb 	bpl.w	8001f64 <I2C1_EV_IRQHandler+0x2c4>
 8001d8e:	0596      	lsls	r6, r2, #22
 8001d90:	f140 80e8 	bpl.w	8001f64 <I2C1_EV_IRQHandler+0x2c4>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001d94:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001d98:	6b22      	ldr	r2, [r4, #48]	; 0x30
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001d9a:	6b65      	ldr	r5, [r4, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d9c:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001da0:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001da2:	2822      	cmp	r0, #34	; 0x22
 8001da4:	f040 80d6 	bne.w	8001f54 <I2C1_EV_IRQHandler+0x2b4>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001da8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001daa:	b940      	cbnz	r0, 8001dbe <I2C1_EV_IRQHandler+0x11e>
 8001dac:	2940      	cmp	r1, #64	; 0x40
 8001dae:	d106      	bne.n	8001dbe <I2C1_EV_IRQHandler+0x11e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001db0:	900a      	str	r0, [sp, #40]	; 0x28
 8001db2:	695a      	ldr	r2, [r3, #20]
 8001db4:	920a      	str	r2, [sp, #40]	; 0x28
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	930a      	str	r3, [sp, #40]	; 0x28
 8001dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001dbc:	e78c      	b.n	8001cd8 <I2C1_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001dbe:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001dc0:	b989      	cbnz	r1, 8001de6 <I2C1_EV_IRQHandler+0x146>
 8001dc2:	6960      	ldr	r0, [r4, #20]
 8001dc4:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8001dc8:	d10d      	bne.n	8001de6 <I2C1_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dca:	9109      	str	r1, [sp, #36]	; 0x24
 8001dcc:	695a      	ldr	r2, [r3, #20]
 8001dce:	9209      	str	r2, [sp, #36]	; 0x24
 8001dd0:	699a      	ldr	r2, [r3, #24]
 8001dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8001dd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ddc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001dde:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001de0:	3301      	adds	r3, #1
      hi2c->EventCount = 0U;
 8001de2:	6563      	str	r3, [r4, #84]	; 0x54
 8001de4:	e778      	b.n	8001cd8 <I2C1_EV_IRQHandler+0x38>
      if (hi2c->XferCount == 0U)
 8001de6:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8001de8:	b289      	uxth	r1, r1
 8001dea:	b951      	cbnz	r1, 8001e02 <I2C1_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dec:	9108      	str	r1, [sp, #32]
 8001dee:	695a      	ldr	r2, [r3, #20]
 8001df0:	9208      	str	r2, [sp, #32]
 8001df2:	699a      	ldr	r2, [r3, #24]
 8001df4:	9208      	str	r2, [sp, #32]
 8001df6:	9a08      	ldr	r2, [sp, #32]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e019      	b.n	8001e36 <I2C1_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 8001e02:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8001e04:	b289      	uxth	r1, r1
 8001e06:	2901      	cmp	r1, #1
 8001e08:	d14e      	bne.n	8001ea8 <I2C1_EV_IRQHandler+0x208>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001e0a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001e0e:	d11b      	bne.n	8001e48 <I2C1_EV_IRQHandler+0x1a8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e16:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001e1e:	d00c      	beq.n	8001e3a <I2C1_EV_IRQHandler+0x19a>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e26:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	9207      	str	r2, [sp, #28]
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	9207      	str	r2, [sp, #28]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	9307      	str	r3, [sp, #28]
 8001e34:	9b07      	ldr	r3, [sp, #28]
      hi2c->EventCount = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e7d3      	b.n	8001de2 <I2C1_EV_IRQHandler+0x142>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e3a:	9206      	str	r2, [sp, #24]
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	9206      	str	r2, [sp, #24]
 8001e40:	699a      	ldr	r2, [r3, #24]
 8001e42:	9206      	str	r2, [sp, #24]
 8001e44:	9a06      	ldr	r2, [sp, #24]
 8001e46:	e7d7      	b.n	8001df8 <I2C1_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001e48:	2a08      	cmp	r2, #8
 8001e4a:	d01c      	beq.n	8001e86 <I2C1_EV_IRQHandler+0x1e6>
 8001e4c:	2a20      	cmp	r2, #32
 8001e4e:	d01a      	beq.n	8001e86 <I2C1_EV_IRQHandler+0x1e6>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001e50:	2d12      	cmp	r5, #18
 8001e52:	d10d      	bne.n	8001e70 <I2C1_EV_IRQHandler+0x1d0>
 8001e54:	2a01      	cmp	r2, #1
 8001e56:	d116      	bne.n	8001e86 <I2C1_EV_IRQHandler+0x1e6>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e5e:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e60:	2200      	movs	r2, #0
 8001e62:	9205      	str	r2, [sp, #20]
 8001e64:	695a      	ldr	r2, [r3, #20]
 8001e66:	9205      	str	r2, [sp, #20]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	9305      	str	r3, [sp, #20]
 8001e6c:	9b05      	ldr	r3, [sp, #20]
 8001e6e:	e7e2      	b.n	8001e36 <I2C1_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001e70:	2a10      	cmp	r2, #16
 8001e72:	d8f1      	bhi.n	8001e58 <I2C1_EV_IRQHandler+0x1b8>
 8001e74:	490b      	ldr	r1, [pc, #44]	; (8001ea4 <I2C1_EV_IRQHandler+0x204>)
 8001e76:	fa21 f202 	lsr.w	r2, r1, r2
 8001e7a:	07d6      	lsls	r6, r2, #31
 8001e7c:	d5ec      	bpl.n	8001e58 <I2C1_EV_IRQHandler+0x1b8>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e84:	e7eb      	b.n	8001e5e <I2C1_EV_IRQHandler+0x1be>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e8c:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	9204      	str	r2, [sp, #16]
 8001e92:	695a      	ldr	r2, [r3, #20]
 8001e94:	9204      	str	r2, [sp, #16]
 8001e96:	699a      	ldr	r2, [r3, #24]
 8001e98:	9204      	str	r2, [sp, #16]
 8001e9a:	9a04      	ldr	r2, [sp, #16]
 8001e9c:	e7ac      	b.n	8001df8 <I2C1_EV_IRQHandler+0x158>
 8001e9e:	bf00      	nop
 8001ea0:	20000200 	.word	0x20000200
 8001ea4:	00010014 	.word	0x00010014
      else if (hi2c->XferCount == 2U)
 8001ea8:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8001eaa:	b289      	uxth	r1, r1
 8001eac:	2902      	cmp	r1, #2
 8001eae:	d133      	bne.n	8001f18 <I2C1_EV_IRQHandler+0x278>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001eb0:	2a10      	cmp	r2, #16
 8001eb2:	d805      	bhi.n	8001ec0 <I2C1_EV_IRQHandler+0x220>
 8001eb4:	4984      	ldr	r1, [pc, #528]	; (80020c8 <I2C1_EV_IRQHandler+0x428>)
 8001eb6:	40d1      	lsrs	r1, r2
 8001eb8:	43c9      	mvns	r1, r1
 8001eba:	f011 0101 	ands.w	r1, r1, #1
 8001ebe:	d020      	beq.n	8001f02 <I2C1_EV_IRQHandler+0x262>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ec0:	6819      	ldr	r1, [r3, #0]
 8001ec2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001ec6:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ec8:	2100      	movs	r1, #0
 8001eca:	9103      	str	r1, [sp, #12]
 8001ecc:	6959      	ldr	r1, [r3, #20]
 8001ece:	9103      	str	r1, [sp, #12]
 8001ed0:	6999      	ldr	r1, [r3, #24]
 8001ed2:	9103      	str	r1, [sp, #12]
 8001ed4:	9903      	ldr	r1, [sp, #12]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ed6:	6819      	ldr	r1, [r3, #0]
 8001ed8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001edc:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001ede:	6859      	ldr	r1, [r3, #4]
 8001ee0:	050d      	lsls	r5, r1, #20
 8001ee2:	d5a8      	bpl.n	8001e36 <I2C1_EV_IRQHandler+0x196>
 8001ee4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001ee8:	d006      	beq.n	8001ef8 <I2C1_EV_IRQHandler+0x258>
 8001eea:	1e51      	subs	r1, r2, #1
 8001eec:	291f      	cmp	r1, #31
 8001eee:	d8a2      	bhi.n	8001e36 <I2C1_EV_IRQHandler+0x196>
 8001ef0:	4a76      	ldr	r2, [pc, #472]	; (80020cc <I2C1_EV_IRQHandler+0x42c>)
 8001ef2:	40ca      	lsrs	r2, r1
 8001ef4:	07d0      	lsls	r0, r2, #31
 8001ef6:	d59e      	bpl.n	8001e36 <I2C1_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	e799      	b.n	8001e36 <I2C1_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8001f08:	6018      	str	r0, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f0a:	9102      	str	r1, [sp, #8]
 8001f0c:	6959      	ldr	r1, [r3, #20]
 8001f0e:	9102      	str	r1, [sp, #8]
 8001f10:	6999      	ldr	r1, [r3, #24]
 8001f12:	9102      	str	r1, [sp, #8]
 8001f14:	9902      	ldr	r1, [sp, #8]
 8001f16:	e7e2      	b.n	8001ede <I2C1_EV_IRQHandler+0x23e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f18:	6819      	ldr	r1, [r3, #0]
 8001f1a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001f1e:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001f20:	6859      	ldr	r1, [r3, #4]
 8001f22:	0509      	lsls	r1, r1, #20
 8001f24:	d50e      	bpl.n	8001f44 <I2C1_EV_IRQHandler+0x2a4>
 8001f26:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001f2a:	d007      	beq.n	8001f3c <I2C1_EV_IRQHandler+0x29c>
 8001f2c:	3a01      	subs	r2, #1
 8001f2e:	2a1f      	cmp	r2, #31
 8001f30:	d808      	bhi.n	8001f44 <I2C1_EV_IRQHandler+0x2a4>
 8001f32:	4966      	ldr	r1, [pc, #408]	; (80020cc <I2C1_EV_IRQHandler+0x42c>)
 8001f34:	fa21 f202 	lsr.w	r2, r1, r2
 8001f38:	07d2      	lsls	r2, r2, #31
 8001f3a:	d503      	bpl.n	8001f44 <I2C1_EV_IRQHandler+0x2a4>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f42:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f44:	2200      	movs	r2, #0
 8001f46:	9201      	str	r2, [sp, #4]
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	9201      	str	r2, [sp, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	9b01      	ldr	r3, [sp, #4]
 8001f52:	e770      	b.n	8001e36 <I2C1_EV_IRQHandler+0x196>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f54:	2200      	movs	r2, #0
 8001f56:	9200      	str	r2, [sp, #0]
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	9200      	str	r2, [sp, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	9b00      	ldr	r3, [sp, #0]
 8001f62:	e6b9      	b.n	8001cd8 <I2C1_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001f64:	077f      	lsls	r7, r7, #29
 8001f66:	f140 8084 	bpl.w	8002072 <I2C1_EV_IRQHandler+0x3d2>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f6a:	685e      	ldr	r6, [r3, #4]
 8001f6c:	0536      	lsls	r6, r6, #20
 8001f6e:	f53f aeb3 	bmi.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f72:	f3c0 0680 	ubfx	r6, r0, #2, #1
 8001f76:	0600      	lsls	r0, r0, #24
 8001f78:	d53a      	bpl.n	8001ff0 <I2C1_EV_IRQHandler+0x350>
 8001f7a:	0557      	lsls	r7, r2, #21
 8001f7c:	d538      	bpl.n	8001ff0 <I2C1_EV_IRQHandler+0x350>
 8001f7e:	2e00      	cmp	r6, #0
 8001f80:	d139      	bne.n	8001ff6 <I2C1_EV_IRQHandler+0x356>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f82:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f86:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f88:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f8c:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f8e:	6b20      	ldr	r0, [r4, #48]	; 0x30
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f90:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f92:	b9ad      	cbnz	r5, 8001fc0 <I2C1_EV_IRQHandler+0x320>
 8001f94:	2a21      	cmp	r2, #33	; 0x21
 8001f96:	d115      	bne.n	8001fc4 <I2C1_EV_IRQHandler+0x324>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f98:	2808      	cmp	r0, #8
 8001f9a:	d054      	beq.n	8002046 <I2C1_EV_IRQHandler+0x3a6>
 8001f9c:	2820      	cmp	r0, #32
 8001f9e:	d052      	beq.n	8002046 <I2C1_EV_IRQHandler+0x3a6>
 8001fa0:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8001fa4:	d04f      	beq.n	8002046 <I2C1_EV_IRQHandler+0x3a6>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001fac:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001fae:	2311      	movs	r3, #17
 8001fb0:	6363      	str	r3, [r4, #52]	; 0x34
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        hi2c->State = HAL_I2C_STATE_READY;
 8001fb8:	2320      	movs	r3, #32
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001fba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8001fbe:	e68b      	b.n	8001cd8 <I2C1_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001fc0:	2a21      	cmp	r2, #33	; 0x21
 8001fc2:	d005      	beq.n	8001fd0 <I2C1_EV_IRQHandler+0x330>
 8001fc4:	2940      	cmp	r1, #64	; 0x40
 8001fc6:	f47f ae87 	bne.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001fca:	2a22      	cmp	r2, #34	; 0x22
 8001fcc:	f47f ae84 	bne.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8001fd0:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8001fd2:	b292      	uxth	r2, r2
 8001fd4:	b91a      	cbnz	r2, 8001fde <I2C1_EV_IRQHandler+0x33e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fdc:	e6b5      	b.n	8001d4a <I2C1_EV_IRQHandler+0xaa>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fde:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8001fe2:	2a40      	cmp	r2, #64	; 0x40
 8001fe4:	d115      	bne.n	8002012 <I2C1_EV_IRQHandler+0x372>
 8001fe6:	b00f      	add	sp, #60	; 0x3c
 8001fe8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001fec:	f7fe bbf8 	b.w	80007e0 <I2C_MemoryTransmit_TXE_BTF.constprop.0>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ff0:	2e00      	cmp	r6, #0
 8001ff2:	f43f ae71 	beq.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
 8001ff6:	0596      	lsls	r6, r2, #22
 8001ff8:	f57f ae6e 	bpl.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001ffc:	2921      	cmp	r1, #33	; 0x21
 8001ffe:	d134      	bne.n	800206a <I2C1_EV_IRQHandler+0x3ca>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002000:	6b21      	ldr	r1, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002002:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002006:	2a21      	cmp	r2, #33	; 0x21
 8002008:	f47f ae66 	bne.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 800200c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800200e:	b292      	uxth	r2, r2
 8002010:	b14a      	cbz	r2, 8002026 <I2C1_EV_IRQHandler+0x386>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002012:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002014:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002018:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 800201a:	62a2      	str	r2, [r4, #40]	; 0x28
    hi2c->XferCount--;
 800201c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800201e:	3b01      	subs	r3, #1
 8002020:	b29b      	uxth	r3, r3
 8002022:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8002024:	e658      	b.n	8001cd8 <I2C1_EV_IRQHandler+0x38>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002026:	2908      	cmp	r1, #8
 8002028:	d00d      	beq.n	8002046 <I2C1_EV_IRQHandler+0x3a6>
 800202a:	2920      	cmp	r1, #32
 800202c:	d00b      	beq.n	8002046 <I2C1_EV_IRQHandler+0x3a6>
 800202e:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002032:	d008      	beq.n	8002046 <I2C1_EV_IRQHandler+0x3a6>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002034:	6859      	ldr	r1, [r3, #4]
 8002036:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800203a:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800203c:	2311      	movs	r3, #17
 800203e:	6363      	str	r3, [r4, #52]	; 0x34
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002040:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002044:	e7b8      	b.n	8001fb8 <I2C1_EV_IRQHandler+0x318>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800204c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002054:	601a      	str	r2, [r3, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002056:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002058:	2300      	movs	r3, #0
 800205a:	6363      	str	r3, [r4, #52]	; 0x34
        hi2c->State = HAL_I2C_STATE_READY;
 800205c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002060:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002068:	e636      	b.n	8001cd8 <I2C1_EV_IRQHandler+0x38>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800206a:	2d40      	cmp	r5, #64	; 0x40
 800206c:	f47f ae34 	bne.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
 8002070:	e7b9      	b.n	8001fe6 <I2C1_EV_IRQHandler+0x346>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002072:	6859      	ldr	r1, [r3, #4]
 8002074:	050d      	lsls	r5, r1, #20
 8002076:	f53f ae2f 	bmi.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800207a:	f3c0 0180 	ubfx	r1, r0, #2, #1
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800207e:	0640      	lsls	r0, r0, #25
 8002080:	d575      	bpl.n	800216e <I2C1_EV_IRQHandler+0x4ce>
 8002082:	0557      	lsls	r7, r2, #21
 8002084:	d573      	bpl.n	800216e <I2C1_EV_IRQHandler+0x4ce>
 8002086:	2900      	cmp	r1, #0
 8002088:	d174      	bne.n	8002174 <I2C1_EV_IRQHandler+0x4d4>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800208a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800208e:	2a22      	cmp	r2, #34	; 0x22
 8002090:	f47f ae22 	bne.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 8002094:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8002096:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8002098:	2a03      	cmp	r2, #3
 800209a:	d919      	bls.n	80020d0 <I2C1_EV_IRQHandler+0x430>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80020a0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80020a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80020a4:	3301      	adds	r3, #1
 80020a6:	62a3      	str	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80020a8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (hi2c->XferCount == (uint16_t)3)
 80020b0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	f47f ae0f 	bne.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020ba:	6862      	ldr	r2, [r4, #4]
 80020bc:	6853      	ldr	r3, [r2, #4]
 80020be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020c2:	6053      	str	r3, [r2, #4]
 80020c4:	e608      	b.n	8001cd8 <I2C1_EV_IRQHandler+0x38>
 80020c6:	bf00      	nop
 80020c8:	00010014 	.word	0x00010014
 80020cc:	80008081 	.word	0x80008081
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80020d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80020d2:	2802      	cmp	r0, #2
 80020d4:	f43f ae00 	beq.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
 80020d8:	2a01      	cmp	r2, #1
 80020da:	f63f adfd 	bhi.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
  __IO uint32_t count = 0U;
 80020de:	910b      	str	r1, [sp, #44]	; 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80020e0:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80020e4:	4a66      	ldr	r2, [pc, #408]	; (8002280 <I2C1_EV_IRQHandler+0x5e0>)
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	fbb2 f2f1 	udiv	r2, r2, r1
 80020ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80020f0:	920b      	str	r2, [sp, #44]	; 0x2c
    count--;
 80020f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80020f4:	3a01      	subs	r2, #1
 80020f6:	920b      	str	r2, [sp, #44]	; 0x2c
    if (count == 0U)
 80020f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80020fa:	b9b9      	cbnz	r1, 800212c <I2C1_EV_IRQHandler+0x48c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020fc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80020fe:	f042 0220 	orr.w	r2, r2, #32
 8002102:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800210a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800210c:	691a      	ldr	r2, [r3, #16]
 800210e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002110:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002112:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002114:	3301      	adds	r3, #1
 8002116:	62a3      	str	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002118:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800211a:	3b01      	subs	r3, #1
 800211c:	b29b      	uxth	r3, r3
 800211e:	85e3      	strh	r3, [r4, #46]	; 0x2e
        hi2c->State = HAL_I2C_STATE_READY;
 8002120:	2320      	movs	r3, #32
 8002122:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002126:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800212a:	e5d5      	b.n	8001cd8 <I2C1_EV_IRQHandler+0x38>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8002132:	d1de      	bne.n	80020f2 <I2C1_EV_IRQHandler+0x452>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002134:	6819      	ldr	r1, [r3, #0]
 8002136:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800213a:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800213c:	6859      	ldr	r1, [r3, #4]
 800213e:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8002142:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002144:	6919      	ldr	r1, [r3, #16]
 8002146:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002148:	7019      	strb	r1, [r3, #0]
        hi2c->pBuffPtr++;
 800214a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800214c:	3301      	adds	r3, #1
 800214e:	62a3      	str	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002150:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002152:	3b01      	subs	r3, #1
 8002154:	b29b      	uxth	r3, r3
 8002156:	85e3      	strh	r3, [r4, #46]	; 0x2e
        hi2c->State = HAL_I2C_STATE_READY;
 8002158:	2320      	movs	r3, #32
 800215a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800215e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002162:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002166:	2b40      	cmp	r3, #64	; 0x40
 8002168:	d165      	bne.n	8002236 <I2C1_EV_IRQHandler+0x596>
          hi2c->PreviousState = I2C_STATE_NONE;
 800216a:	6362      	str	r2, [r4, #52]	; 0x34
 800216c:	e5b4      	b.n	8001cd8 <I2C1_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800216e:	2900      	cmp	r1, #0
 8002170:	f43f adb2 	beq.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
 8002174:	0596      	lsls	r6, r2, #22
 8002176:	f57f adaf 	bpl.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800217a:	6b22      	ldr	r2, [r4, #48]	; 0x30
  if (hi2c->XferCount == 4U)
 800217c:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800217e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  if (hi2c->XferCount == 4U)
 8002180:	b280      	uxth	r0, r0
 8002182:	2804      	cmp	r0, #4
 8002184:	d109      	bne.n	800219a <I2C1_EV_IRQHandler+0x4fa>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800218c:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8002192:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002194:	3301      	adds	r3, #1
 8002196:	62a3      	str	r3, [r4, #40]	; 0x28
 8002198:	e740      	b.n	800201c <I2C1_EV_IRQHandler+0x37c>
  else if (hi2c->XferCount == 3U)
 800219a:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800219c:	b280      	uxth	r0, r0
 800219e:	2803      	cmp	r0, #3
 80021a0:	d10c      	bne.n	80021bc <I2C1_EV_IRQHandler+0x51c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021a2:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80021a4:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021a6:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 80021aa:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80021ac:	d0ef      	beq.n	800218e <I2C1_EV_IRQHandler+0x4ee>
 80021ae:	2a02      	cmp	r2, #2
 80021b0:	d0ed      	beq.n	800218e <I2C1_EV_IRQHandler+0x4ee>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	e7e8      	b.n	800218e <I2C1_EV_IRQHandler+0x4ee>
  else if (hi2c->XferCount == 2U)
 80021bc:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 80021be:	b280      	uxth	r0, r0
 80021c0:	2802      	cmp	r0, #2
 80021c2:	d1e4      	bne.n	800218e <I2C1_EV_IRQHandler+0x4ee>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80021c4:	2a01      	cmp	r2, #1
 80021c6:	d001      	beq.n	80021cc <I2C1_EV_IRQHandler+0x52c>
 80021c8:	2a10      	cmp	r2, #16
 80021ca:	d128      	bne.n	800221e <I2C1_EV_IRQHandler+0x57e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80021d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80021da:	1c53      	adds	r3, r2, #1
 80021dc:	62a3      	str	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 80021de:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	85e3      	strh	r3, [r4, #46]	; 0x2e
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e6:	6863      	ldr	r3, [r4, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 80021ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80021ee:	6862      	ldr	r2, [r4, #4]
    hi2c->pBuffPtr++;
 80021f0:	3301      	adds	r3, #1
 80021f2:	62a3      	str	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 80021f4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	85e3      	strh	r3, [r4, #46]	; 0x2e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80021fc:	6853      	ldr	r3, [r2, #4]
 80021fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002202:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002204:	2320      	movs	r3, #32
 8002206:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800220a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800220e:	2b40      	cmp	r3, #64	; 0x40
 8002210:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002218:	d10d      	bne.n	8002236 <I2C1_EV_IRQHandler+0x596>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800221a:	6363      	str	r3, [r4, #52]	; 0x34
 800221c:	e55c      	b.n	8001cd8 <I2C1_EV_IRQHandler+0x38>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800221e:	2a04      	cmp	r2, #4
 8002220:	d001      	beq.n	8002226 <I2C1_EV_IRQHandler+0x586>
 8002222:	2a02      	cmp	r2, #2
 8002224:	d103      	bne.n	800222e <I2C1_EV_IRQHandler+0x58e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800222c:	e7d1      	b.n	80021d2 <I2C1_EV_IRQHandler+0x532>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002234:	e7cd      	b.n	80021d2 <I2C1_EV_IRQHandler+0x532>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002236:	2312      	movs	r3, #18
 8002238:	e7ef      	b.n	800221a <I2C1_EV_IRQHandler+0x57a>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800223a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800223c:	b1b0      	cbz	r0, 800226c <I2C1_EV_IRQHandler+0x5cc>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800223e:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002240:	0785      	lsls	r5, r0, #30
 8002242:	d51f      	bpl.n	8002284 <I2C1_EV_IRQHandler+0x5e4>
 8002244:	0597      	lsls	r7, r2, #22
 8002246:	d51d      	bpl.n	8002284 <I2C1_EV_IRQHandler+0x5e4>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002248:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800224a:	b102      	cbz	r2, 800224e <I2C1_EV_IRQHandler+0x5ae>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800224c:	699a      	ldr	r2, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800224e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002252:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8002256:	2a28      	cmp	r2, #40	; 0x28
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	d108      	bne.n	8002270 <I2C1_EV_IRQHandler+0x5d0>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800225e:	6859      	ldr	r1, [r3, #4]
 8002260:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002264:	6059      	str	r1, [r3, #4]
    __HAL_UNLOCK(hi2c);
 8002266:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 800226a:	e535      	b.n	8001cd8 <I2C1_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800226c:	6998      	ldr	r0, [r3, #24]
 800226e:	e7e6      	b.n	800223e <I2C1_EV_IRQHandler+0x59e>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002270:	920c      	str	r2, [sp, #48]	; 0x30
 8002272:	6959      	ldr	r1, [r3, #20]
 8002274:	910c      	str	r1, [sp, #48]	; 0x30
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	930c      	str	r3, [sp, #48]	; 0x30
 800227a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800227c:	e7f3      	b.n	8002266 <I2C1_EV_IRQHandler+0x5c6>
 800227e:	bf00      	nop
 8002280:	20000000 	.word	0x20000000
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002284:	06c6      	lsls	r6, r0, #27
 8002286:	f140 809c 	bpl.w	80023c2 <I2C1_EV_IRQHandler+0x722>
 800228a:	0595      	lsls	r5, r2, #22
 800228c:	f140 8099 	bpl.w	80023c2 <I2C1_EV_IRQHandler+0x722>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002290:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002294:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002296:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002298:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800229c:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800229e:	2200      	movs	r2, #0
 80022a0:	920d      	str	r2, [sp, #52]	; 0x34
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	920d      	str	r2, [sp, #52]	; 0x34
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	f042 0201 	orr.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b6:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	0510      	lsls	r0, r2, #20
 80022bc:	d51f      	bpl.n	80022fe <I2C1_EV_IRQHandler+0x65e>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80022be:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 80022c2:	2a22      	cmp	r2, #34	; 0x22
 80022c4:	d148      	bne.n	8002358 <I2C1_EV_IRQHandler+0x6b8>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80022c6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80022c8:	6802      	ldr	r2, [r0, #0]
 80022ca:	6852      	ldr	r2, [r2, #4]
 80022cc:	b292      	uxth	r2, r2
 80022ce:	85e2      	strh	r2, [r4, #46]	; 0x2e
      if (hi2c->XferCount != 0U)
 80022d0:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80022d2:	b292      	uxth	r2, r2
 80022d4:	b11a      	cbz	r2, 80022de <I2C1_EV_IRQHandler+0x63e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022d6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80022d8:	f042 0204 	orr.w	r2, r2, #4
 80022dc:	6462      	str	r2, [r4, #68]	; 0x44
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e4:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022e6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d007      	beq.n	80022fe <I2C1_EV_IRQHandler+0x65e>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80022ee:	4b6b      	ldr	r3, [pc, #428]	; (800249c <I2C1_EV_IRQHandler+0x7fc>)
 80022f0:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80022f2:	f7fe f81f 	bl	8000334 <HAL_DMA_Abort_IT>
 80022f6:	b110      	cbz	r0, 80022fe <I2C1_EV_IRQHandler+0x65e>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80022f8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80022fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80022fc:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 80022fe:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002300:	b29b      	uxth	r3, r3
 8002302:	b313      	cbz	r3, 800234a <I2C1_EV_IRQHandler+0x6aa>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002304:	6863      	ldr	r3, [r4, #4]
 8002306:	695a      	ldr	r2, [r3, #20]
 8002308:	0751      	lsls	r1, r2, #29
 800230a:	d509      	bpl.n	8002320 <I2C1_EV_IRQHandler+0x680>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800230c:	691a      	ldr	r2, [r3, #16]
 800230e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002310:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002312:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002314:	3301      	adds	r3, #1
 8002316:	62a3      	str	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002318:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800231a:	3b01      	subs	r3, #1
 800231c:	b29b      	uxth	r3, r3
 800231e:	85e3      	strh	r3, [r4, #46]	; 0x2e
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002320:	6863      	ldr	r3, [r4, #4]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	0652      	lsls	r2, r2, #25
 8002326:	d509      	bpl.n	800233c <I2C1_EV_IRQHandler+0x69c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800232c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800232e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002330:	3301      	adds	r3, #1
 8002332:	62a3      	str	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002334:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002336:	3b01      	subs	r3, #1
 8002338:	b29b      	uxth	r3, r3
 800233a:	85e3      	strh	r3, [r4, #46]	; 0x2e
    if (hi2c->XferCount != 0U)
 800233c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800233e:	b29b      	uxth	r3, r3
 8002340:	b11b      	cbz	r3, 800234a <I2C1_EV_IRQHandler+0x6aa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002342:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002344:	f043 0304 	orr.w	r3, r3, #4
 8002348:	6463      	str	r3, [r4, #68]	; 0x44
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800234a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800234c:	b303      	cbz	r3, 8002390 <I2C1_EV_IRQHandler+0x6f0>
 800234e:	b00f      	add	sp, #60	; 0x3c
 8002350:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8002354:	f7fe ba94 	b.w	8000880 <I2C_ITError.constprop.0>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002358:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800235a:	6802      	ldr	r2, [r0, #0]
 800235c:	6852      	ldr	r2, [r2, #4]
 800235e:	b292      	uxth	r2, r2
 8002360:	85e2      	strh	r2, [r4, #46]	; 0x2e
      if (hi2c->XferCount != 0U)
 8002362:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8002364:	b292      	uxth	r2, r2
 8002366:	b11a      	cbz	r2, 8002370 <I2C1_EV_IRQHandler+0x6d0>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002368:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800236a:	f042 0204 	orr.w	r2, r2, #4
 800236e:	6462      	str	r2, [r4, #68]	; 0x44
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002376:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002378:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800237c:	2b01      	cmp	r3, #1
 800237e:	d0be      	beq.n	80022fe <I2C1_EV_IRQHandler+0x65e>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002380:	4b46      	ldr	r3, [pc, #280]	; (800249c <I2C1_EV_IRQHandler+0x7fc>)
 8002382:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002384:	f7fd ffd6 	bl	8000334 <HAL_DMA_Abort_IT>
 8002388:	2800      	cmp	r0, #0
 800238a:	d0b8      	beq.n	80022fe <I2C1_EV_IRQHandler+0x65e>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800238c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800238e:	e7b4      	b.n	80022fa <I2C1_EV_IRQHandler+0x65a>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002390:	2d2a      	cmp	r5, #42	; 0x2a
      hi2c->PreviousState = I2C_STATE_NONE;
 8002392:	bf02      	ittt	eq
 8002394:	6363      	streq	r3, [r4, #52]	; 0x34
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002396:	2328      	moveq	r3, #40	; 0x28
 8002398:	f884 3041 	strbeq.w	r3, [r4, #65]	; 0x41
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800239c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80023a0:	2b28      	cmp	r3, #40	; 0x28
 80023a2:	d107      	bne.n	80023b4 <I2C1_EV_IRQHandler+0x714>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023a4:	4b3e      	ldr	r3, [pc, #248]	; (80024a0 <I2C1_EV_IRQHandler+0x800>)
 80023a6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->PreviousState = I2C_STATE_NONE;
 80023a8:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80023aa:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80023ac:	6363      	str	r3, [r4, #52]	; 0x34
        hi2c->State = HAL_I2C_STATE_READY;
 80023ae:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 80023b2:	e657      	b.n	8002064 <I2C1_EV_IRQHandler+0x3c4>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80023b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80023b6:	2b22      	cmp	r3, #34	; 0x22
 80023b8:	d0f6      	beq.n	80023a8 <I2C1_EV_IRQHandler+0x708>
 80023ba:	2d22      	cmp	r5, #34	; 0x22
 80023bc:	f47f ac8c 	bne.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
 80023c0:	e7f2      	b.n	80023a8 <I2C1_EV_IRQHandler+0x708>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80023c2:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 80023c6:	2921      	cmp	r1, #33	; 0x21
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023c8:	f3c0 0580 	ubfx	r5, r0, #2, #1
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80023cc:	d130      	bne.n	8002430 <I2C1_EV_IRQHandler+0x790>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023ce:	0607      	lsls	r7, r0, #24
 80023d0:	d522      	bpl.n	8002418 <I2C1_EV_IRQHandler+0x778>
 80023d2:	0556      	lsls	r6, r2, #21
 80023d4:	d520      	bpl.n	8002418 <I2C1_EV_IRQHandler+0x778>
 80023d6:	bb15      	cbnz	r5, 800241e <I2C1_EV_IRQHandler+0x77e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023d8:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  if (hi2c->XferCount != 0U)
 80023dc:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023de:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 80023e0:	b292      	uxth	r2, r2
 80023e2:	2a00      	cmp	r2, #0
 80023e4:	f43f ac78 	beq.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80023ea:	f812 5b01 	ldrb.w	r5, [r2], #1
 80023ee:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 80023f0:	62a2      	str	r2, [r4, #40]	; 0x28
    hi2c->XferCount--;
 80023f2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80023f4:	3a01      	subs	r2, #1
 80023f6:	b292      	uxth	r2, r2
 80023f8:	85e2      	strh	r2, [r4, #46]	; 0x2e
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80023fa:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80023fc:	b292      	uxth	r2, r2
 80023fe:	2a00      	cmp	r2, #0
 8002400:	f47f ac6a 	bne.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
 8002404:	2829      	cmp	r0, #41	; 0x29
 8002406:	f47f ac67 	bne.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002410:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002412:	6361      	str	r1, [r4, #52]	; 0x34
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002414:	2328      	movs	r3, #40	; 0x28
 8002416:	e5d0      	b.n	8001fba <I2C1_EV_IRQHandler+0x31a>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002418:	2d00      	cmp	r5, #0
 800241a:	f43f ac5d 	beq.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
 800241e:	0595      	lsls	r5, r2, #22
 8002420:	f57f ac5a 	bpl.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8002424:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8002426:	b292      	uxth	r2, r2
 8002428:	2a00      	cmp	r2, #0
 800242a:	f43f ac55 	beq.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
 800242e:	e5f0      	b.n	8002012 <I2C1_EV_IRQHandler+0x372>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002430:	0640      	lsls	r0, r0, #25
 8002432:	d524      	bpl.n	800247e <I2C1_EV_IRQHandler+0x7de>
 8002434:	0551      	lsls	r1, r2, #21
 8002436:	d522      	bpl.n	800247e <I2C1_EV_IRQHandler+0x7de>
 8002438:	bb25      	cbnz	r5, 8002484 <I2C1_EV_IRQHandler+0x7e4>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800243a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  if (hi2c->XferCount != 0U)
 800243e:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002440:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 8002442:	b289      	uxth	r1, r1
 8002444:	2900      	cmp	r1, #0
 8002446:	f43f ac47 	beq.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800244a:	6919      	ldr	r1, [r3, #16]
 800244c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800244e:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8002450:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002452:	3301      	adds	r3, #1
 8002454:	62a3      	str	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 8002456:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002458:	3b01      	subs	r3, #1
 800245a:	b29b      	uxth	r3, r3
 800245c:	85e3      	strh	r3, [r4, #46]	; 0x2e
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800245e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002460:	b29b      	uxth	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	f47f ac38 	bne.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
 8002468:	2a2a      	cmp	r2, #42	; 0x2a
 800246a:	f47f ac35 	bne.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800246e:	6862      	ldr	r2, [r4, #4]
 8002470:	6853      	ldr	r3, [r2, #4]
 8002472:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002476:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002478:	2322      	movs	r3, #34	; 0x22
 800247a:	6363      	str	r3, [r4, #52]	; 0x34
 800247c:	e7ca      	b.n	8002414 <I2C1_EV_IRQHandler+0x774>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800247e:	2d00      	cmp	r5, #0
 8002480:	f43f ac2a 	beq.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
 8002484:	0592      	lsls	r2, r2, #22
 8002486:	f57f ac27 	bpl.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 800248a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800248c:	b292      	uxth	r2, r2
 800248e:	2a00      	cmp	r2, #0
 8002490:	f43f ac22 	beq.w	8001cd8 <I2C1_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002498:	701a      	strb	r2, [r3, #0]
 800249a:	e67a      	b.n	8002192 <I2C1_EV_IRQHandler+0x4f2>
 800249c:	08000699 	.word	0x08000699
 80024a0:	ffff0000 	.word	0xffff0000

080024a4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80024a4:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80024a6:	4a48      	ldr	r2, [pc, #288]	; (80025c8 <I2C1_ER_IRQHandler+0x124>)
 80024a8:	6853      	ldr	r3, [r2, #4]
 80024aa:	695c      	ldr	r4, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80024ac:	6858      	ldr	r0, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80024ae:	f892 5042 	ldrb.w	r5, [r2, #66]	; 0x42
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80024b2:	05e7      	lsls	r7, r4, #23
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80024b4:	b2ed      	uxtb	r5, r5
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80024b6:	f3c4 2100 	ubfx	r1, r4, #8, #1
 80024ba:	d50b      	bpl.n	80024d4 <I2C1_ER_IRQHandler+0x30>
 80024bc:	05c6      	lsls	r6, r0, #23
 80024be:	f3c0 2100 	ubfx	r1, r0, #8, #1
 80024c2:	d507      	bpl.n	80024d4 <I2C1_ER_IRQHandler+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024c4:	f46f 7180 	mvn.w	r1, #256	; 0x100
 80024c8:	6159      	str	r1, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80024ca:	6819      	ldr	r1, [r3, #0]
 80024cc:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80024d0:	6019      	str	r1, [r3, #0]
    error |= HAL_I2C_ERROR_BERR;
 80024d2:	2101      	movs	r1, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80024d4:	05a7      	lsls	r7, r4, #22
 80024d6:	d506      	bpl.n	80024e6 <I2C1_ER_IRQHandler+0x42>
 80024d8:	05c6      	lsls	r6, r0, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024da:	bf42      	ittt	mi
 80024dc:	f46f 7600 	mvnmi.w	r6, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 80024e0:	f041 0102 	orrmi.w	r1, r1, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024e4:	615e      	strmi	r6, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80024e6:	0567      	lsls	r7, r4, #21
 80024e8:	d533      	bpl.n	8002552 <I2C1_ER_IRQHandler+0xae>
 80024ea:	05c6      	lsls	r6, r0, #23
 80024ec:	d531      	bpl.n	8002552 <I2C1_ER_IRQHandler+0xae>
    tmp2 = hi2c->XferCount;
 80024ee:	8dd7      	ldrh	r7, [r2, #46]	; 0x2e
    tmp3 = hi2c->State;
 80024f0:	f892 6041 	ldrb.w	r6, [r2, #65]	; 0x41
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80024f4:	2d20      	cmp	r5, #32
    tmp4 = hi2c->PreviousState;
 80024f6:	f8d2 c034 	ldr.w	ip, [r2, #52]	; 0x34
    tmp2 = hi2c->XferCount;
 80024fa:	b2bf      	uxth	r7, r7
    tmp3 = hi2c->State;
 80024fc:	b2f6      	uxtb	r6, r6
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80024fe:	d152      	bne.n	80025a6 <I2C1_ER_IRQHandler+0x102>
 8002500:	2f00      	cmp	r7, #0
 8002502:	d150      	bne.n	80025a6 <I2C1_ER_IRQHandler+0x102>
 8002504:	f006 07f7 	and.w	r7, r6, #247	; 0xf7
 8002508:	2f21      	cmp	r7, #33	; 0x21
 800250a:	d004      	beq.n	8002516 <I2C1_ER_IRQHandler+0x72>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800250c:	2e28      	cmp	r6, #40	; 0x28
 800250e:	d14a      	bne.n	80025a6 <I2C1_ER_IRQHandler+0x102>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002510:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
 8002514:	d147      	bne.n	80025a6 <I2C1_ER_IRQHandler+0x102>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002516:	f892 5041 	ldrb.w	r5, [r2, #65]	; 0x41
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800251a:	6b16      	ldr	r6, [r2, #48]	; 0x30
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800251c:	b2ed      	uxtb	r5, r5
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800251e:	2e08      	cmp	r6, #8
 8002520:	d001      	beq.n	8002526 <I2C1_ER_IRQHandler+0x82>
 8002522:	2e20      	cmp	r6, #32
 8002524:	d124      	bne.n	8002570 <I2C1_ER_IRQHandler+0xcc>
 8002526:	2d28      	cmp	r5, #40	; 0x28
 8002528:	d122      	bne.n	8002570 <I2C1_ER_IRQHandler+0xcc>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800252a:	4d28      	ldr	r5, [pc, #160]	; (80025cc <I2C1_ER_IRQHandler+0x128>)
    hi2c->State         = HAL_I2C_STATE_READY;
 800252c:	2620      	movs	r6, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800252e:	6315      	str	r5, [r2, #48]	; 0x30
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002530:	685d      	ldr	r5, [r3, #4]
 8002532:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8002536:	605d      	str	r5, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002538:	f46f 6580 	mvn.w	r5, #1024	; 0x400
 800253c:	615d      	str	r5, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800253e:	681d      	ldr	r5, [r3, #0]
 8002540:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8002544:	601d      	str	r5, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002546:	2500      	movs	r5, #0
 8002548:	6355      	str	r5, [r2, #52]	; 0x34
    hi2c->State         = HAL_I2C_STATE_READY;
 800254a:	f882 6041 	strb.w	r6, [r2, #65]	; 0x41
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800254e:	f882 5042 	strb.w	r5, [r2, #66]	; 0x42
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002552:	0524      	lsls	r4, r4, #20
 8002554:	d534      	bpl.n	80025c0 <I2C1_ER_IRQHandler+0x11c>
 8002556:	05c0      	lsls	r0, r0, #23
 8002558:	d532      	bpl.n	80025c0 <I2C1_ER_IRQHandler+0x11c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800255a:	f46f 6000 	mvn.w	r0, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 800255e:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002562:	6158      	str	r0, [r3, #20]
    hi2c->ErrorCode |= error;
 8002564:	6c53      	ldr	r3, [r2, #68]	; 0x44
  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002566:	bcf0      	pop	{r4, r5, r6, r7}
 8002568:	4319      	orrs	r1, r3
 800256a:	6451      	str	r1, [r2, #68]	; 0x44
    I2C_ITError(hi2c);
 800256c:	f7fe b988 	b.w	8000880 <I2C_ITError.constprop.0>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002570:	2d21      	cmp	r5, #33	; 0x21
 8002572:	d114      	bne.n	800259e <I2C1_ER_IRQHandler+0xfa>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002574:	4e15      	ldr	r6, [pc, #84]	; (80025cc <I2C1_ER_IRQHandler+0x128>)
 8002576:	6316      	str	r6, [r2, #48]	; 0x30
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002578:	6355      	str	r5, [r2, #52]	; 0x34
    hi2c->State         = HAL_I2C_STATE_READY;
 800257a:	2520      	movs	r5, #32
 800257c:	f882 5041 	strb.w	r5, [r2, #65]	; 0x41
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002580:	2500      	movs	r5, #0
 8002582:	f882 5042 	strb.w	r5, [r2, #66]	; 0x42
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002586:	685d      	ldr	r5, [r3, #4]
 8002588:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 800258c:	605d      	str	r5, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800258e:	f46f 6580 	mvn.w	r5, #1024	; 0x400
 8002592:	615d      	str	r5, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002594:	681d      	ldr	r5, [r3, #0]
 8002596:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259a:	601d      	str	r5, [r3, #0]
 800259c:	e7d9      	b.n	8002552 <I2C1_ER_IRQHandler+0xae>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800259e:	f46f 6580 	mvn.w	r5, #1024	; 0x400
 80025a2:	615d      	str	r5, [r3, #20]
 80025a4:	e7d5      	b.n	8002552 <I2C1_ER_IRQHandler+0xae>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025a6:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80025aa:	2d10      	cmp	r5, #16
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ac:	615e      	str	r6, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 80025ae:	f041 0104 	orr.w	r1, r1, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80025b2:	d001      	beq.n	80025b8 <I2C1_ER_IRQHandler+0x114>
 80025b4:	2d40      	cmp	r5, #64	; 0x40
 80025b6:	d1cc      	bne.n	8002552 <I2C1_ER_IRQHandler+0xae>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b8:	681d      	ldr	r5, [r3, #0]
 80025ba:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 80025be:	e7ec      	b.n	800259a <I2C1_ER_IRQHandler+0xf6>
  if (error != HAL_I2C_ERROR_NONE)
 80025c0:	2900      	cmp	r1, #0
 80025c2:	d1cf      	bne.n	8002564 <I2C1_ER_IRQHandler+0xc0>
 80025c4:	bcf0      	pop	{r4, r5, r6, r7}
 80025c6:	4770      	bx	lr
 80025c8:	20000200 	.word	0x20000200
 80025cc:	ffff0000 	.word	0xffff0000

080025d0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80025d0:	2001      	movs	r0, #1
 80025d2:	4770      	bx	lr

080025d4 <_kill>:

int _kill(int pid, int sig)
{
 80025d4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80025d6:	f002 fec1 	bl	800535c <__errno>
 80025da:	2316      	movs	r3, #22
 80025dc:	6003      	str	r3, [r0, #0]
	return -1;
}
 80025de:	f04f 30ff 	mov.w	r0, #4294967295
 80025e2:	bd08      	pop	{r3, pc}

080025e4 <_exit>:

void _exit (int status)
{
 80025e4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80025e6:	f002 feb9 	bl	800535c <__errno>
 80025ea:	2316      	movs	r3, #22
 80025ec:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80025ee:	e7fe      	b.n	80025ee <_exit+0xa>

080025f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025f0:	b570      	push	{r4, r5, r6, lr}
 80025f2:	460d      	mov	r5, r1
 80025f4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f6:	460e      	mov	r6, r1
 80025f8:	1b73      	subs	r3, r6, r5
 80025fa:	429c      	cmp	r4, r3
 80025fc:	dc01      	bgt.n	8002602 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80025fe:	4620      	mov	r0, r4
 8002600:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002602:	f3af 8000 	nop.w
 8002606:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260a:	e7f5      	b.n	80025f8 <_read+0x8>

0800260c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800260c:	b570      	push	{r4, r5, r6, lr}
 800260e:	460d      	mov	r5, r1
 8002610:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002612:	460e      	mov	r6, r1
 8002614:	1b73      	subs	r3, r6, r5
 8002616:	429c      	cmp	r4, r3
 8002618:	dc01      	bgt.n	800261e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800261a:	4620      	mov	r0, r4
 800261c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800261e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002622:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002626:	e7f5      	b.n	8002614 <_write+0x8>

08002628 <_close>:

int _close(int file)
{
	return -1;
}
 8002628:	f04f 30ff 	mov.w	r0, #4294967295
 800262c:	4770      	bx	lr

0800262e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800262e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8002632:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8002634:	604b      	str	r3, [r1, #4]
}
 8002636:	4770      	bx	lr

08002638 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002638:	2001      	movs	r0, #1
 800263a:	4770      	bx	lr

0800263c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800263c:	2000      	movs	r0, #0
 800263e:	4770      	bx	lr

08002640 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002640:	4a0d      	ldr	r2, [pc, #52]	; (8002678 <_sbrk+0x38>)
{
 8002642:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8002644:	f8d2 1674 	ldr.w	r1, [r2, #1652]	; 0x674
{
 8002648:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800264a:	b911      	cbnz	r1, 8002652 <_sbrk+0x12>
  {
    __sbrk_heap_end = &_end;
 800264c:	490b      	ldr	r1, [pc, #44]	; (800267c <_sbrk+0x3c>)
 800264e:	f8c2 1674 	str.w	r1, [r2, #1652]	; 0x674
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002652:	f8d2 0674 	ldr.w	r0, [r2, #1652]	; 0x674
 8002656:	490a      	ldr	r1, [pc, #40]	; (8002680 <_sbrk+0x40>)
 8002658:	4c0a      	ldr	r4, [pc, #40]	; (8002684 <_sbrk+0x44>)
 800265a:	4403      	add	r3, r0
 800265c:	1b09      	subs	r1, r1, r4
 800265e:	428b      	cmp	r3, r1
 8002660:	d906      	bls.n	8002670 <_sbrk+0x30>
  {
    errno = ENOMEM;
 8002662:	f002 fe7b 	bl	800535c <__errno>
 8002666:	230c      	movs	r3, #12
 8002668:	6003      	str	r3, [r0, #0]
 800266a:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800266e:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002670:	f8c2 3674 	str.w	r3, [r2, #1652]	; 0x674
  return (void *)prev_heap_end;
 8002674:	e7fb      	b.n	800266e <_sbrk+0x2e>
 8002676:	bf00      	nop
 8002678:	20000200 	.word	0x20000200
 800267c:	20000888 	.word	0x20000888
 8002680:	20005000 	.word	0x20005000
 8002684:	00000400 	.word	0x00000400

08002688 <SystemInit>:
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop

0800268c <strlen>:
 800268c:	4603      	mov	r3, r0
 800268e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002692:	2a00      	cmp	r2, #0
 8002694:	d1fb      	bne.n	800268e <strlen+0x2>
 8002696:	1a18      	subs	r0, r3, r0
 8002698:	3801      	subs	r0, #1
 800269a:	4770      	bx	lr

0800269c <__aeabi_drsub>:
 800269c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80026a0:	e002      	b.n	80026a8 <__adddf3>
 80026a2:	bf00      	nop

080026a4 <__aeabi_dsub>:
 80026a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080026a8 <__adddf3>:
 80026a8:	b530      	push	{r4, r5, lr}
 80026aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80026ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80026b2:	ea94 0f05 	teq	r4, r5
 80026b6:	bf08      	it	eq
 80026b8:	ea90 0f02 	teqeq	r0, r2
 80026bc:	bf1f      	itttt	ne
 80026be:	ea54 0c00 	orrsne.w	ip, r4, r0
 80026c2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80026c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80026ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80026ce:	f000 80e2 	beq.w	8002896 <__adddf3+0x1ee>
 80026d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80026d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80026da:	bfb8      	it	lt
 80026dc:	426d      	neglt	r5, r5
 80026de:	dd0c      	ble.n	80026fa <__adddf3+0x52>
 80026e0:	442c      	add	r4, r5
 80026e2:	ea80 0202 	eor.w	r2, r0, r2
 80026e6:	ea81 0303 	eor.w	r3, r1, r3
 80026ea:	ea82 0000 	eor.w	r0, r2, r0
 80026ee:	ea83 0101 	eor.w	r1, r3, r1
 80026f2:	ea80 0202 	eor.w	r2, r0, r2
 80026f6:	ea81 0303 	eor.w	r3, r1, r3
 80026fa:	2d36      	cmp	r5, #54	; 0x36
 80026fc:	bf88      	it	hi
 80026fe:	bd30      	pophi	{r4, r5, pc}
 8002700:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002704:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002708:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800270c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002710:	d002      	beq.n	8002718 <__adddf3+0x70>
 8002712:	4240      	negs	r0, r0
 8002714:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002718:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800271c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002720:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002724:	d002      	beq.n	800272c <__adddf3+0x84>
 8002726:	4252      	negs	r2, r2
 8002728:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800272c:	ea94 0f05 	teq	r4, r5
 8002730:	f000 80a7 	beq.w	8002882 <__adddf3+0x1da>
 8002734:	f1a4 0401 	sub.w	r4, r4, #1
 8002738:	f1d5 0e20 	rsbs	lr, r5, #32
 800273c:	db0d      	blt.n	800275a <__adddf3+0xb2>
 800273e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8002742:	fa22 f205 	lsr.w	r2, r2, r5
 8002746:	1880      	adds	r0, r0, r2
 8002748:	f141 0100 	adc.w	r1, r1, #0
 800274c:	fa03 f20e 	lsl.w	r2, r3, lr
 8002750:	1880      	adds	r0, r0, r2
 8002752:	fa43 f305 	asr.w	r3, r3, r5
 8002756:	4159      	adcs	r1, r3
 8002758:	e00e      	b.n	8002778 <__adddf3+0xd0>
 800275a:	f1a5 0520 	sub.w	r5, r5, #32
 800275e:	f10e 0e20 	add.w	lr, lr, #32
 8002762:	2a01      	cmp	r2, #1
 8002764:	fa03 fc0e 	lsl.w	ip, r3, lr
 8002768:	bf28      	it	cs
 800276a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800276e:	fa43 f305 	asr.w	r3, r3, r5
 8002772:	18c0      	adds	r0, r0, r3
 8002774:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8002778:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800277c:	d507      	bpl.n	800278e <__adddf3+0xe6>
 800277e:	f04f 0e00 	mov.w	lr, #0
 8002782:	f1dc 0c00 	rsbs	ip, ip, #0
 8002786:	eb7e 0000 	sbcs.w	r0, lr, r0
 800278a:	eb6e 0101 	sbc.w	r1, lr, r1
 800278e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002792:	d31b      	bcc.n	80027cc <__adddf3+0x124>
 8002794:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002798:	d30c      	bcc.n	80027b4 <__adddf3+0x10c>
 800279a:	0849      	lsrs	r1, r1, #1
 800279c:	ea5f 0030 	movs.w	r0, r0, rrx
 80027a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80027a4:	f104 0401 	add.w	r4, r4, #1
 80027a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80027ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80027b0:	f080 809a 	bcs.w	80028e8 <__adddf3+0x240>
 80027b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80027b8:	bf08      	it	eq
 80027ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80027be:	f150 0000 	adcs.w	r0, r0, #0
 80027c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80027c6:	ea41 0105 	orr.w	r1, r1, r5
 80027ca:	bd30      	pop	{r4, r5, pc}
 80027cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80027d0:	4140      	adcs	r0, r0
 80027d2:	eb41 0101 	adc.w	r1, r1, r1
 80027d6:	3c01      	subs	r4, #1
 80027d8:	bf28      	it	cs
 80027da:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80027de:	d2e9      	bcs.n	80027b4 <__adddf3+0x10c>
 80027e0:	f091 0f00 	teq	r1, #0
 80027e4:	bf04      	itt	eq
 80027e6:	4601      	moveq	r1, r0
 80027e8:	2000      	moveq	r0, #0
 80027ea:	fab1 f381 	clz	r3, r1
 80027ee:	bf08      	it	eq
 80027f0:	3320      	addeq	r3, #32
 80027f2:	f1a3 030b 	sub.w	r3, r3, #11
 80027f6:	f1b3 0220 	subs.w	r2, r3, #32
 80027fa:	da0c      	bge.n	8002816 <__adddf3+0x16e>
 80027fc:	320c      	adds	r2, #12
 80027fe:	dd08      	ble.n	8002812 <__adddf3+0x16a>
 8002800:	f102 0c14 	add.w	ip, r2, #20
 8002804:	f1c2 020c 	rsb	r2, r2, #12
 8002808:	fa01 f00c 	lsl.w	r0, r1, ip
 800280c:	fa21 f102 	lsr.w	r1, r1, r2
 8002810:	e00c      	b.n	800282c <__adddf3+0x184>
 8002812:	f102 0214 	add.w	r2, r2, #20
 8002816:	bfd8      	it	le
 8002818:	f1c2 0c20 	rsble	ip, r2, #32
 800281c:	fa01 f102 	lsl.w	r1, r1, r2
 8002820:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002824:	bfdc      	itt	le
 8002826:	ea41 010c 	orrle.w	r1, r1, ip
 800282a:	4090      	lslle	r0, r2
 800282c:	1ae4      	subs	r4, r4, r3
 800282e:	bfa2      	ittt	ge
 8002830:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8002834:	4329      	orrge	r1, r5
 8002836:	bd30      	popge	{r4, r5, pc}
 8002838:	ea6f 0404 	mvn.w	r4, r4
 800283c:	3c1f      	subs	r4, #31
 800283e:	da1c      	bge.n	800287a <__adddf3+0x1d2>
 8002840:	340c      	adds	r4, #12
 8002842:	dc0e      	bgt.n	8002862 <__adddf3+0x1ba>
 8002844:	f104 0414 	add.w	r4, r4, #20
 8002848:	f1c4 0220 	rsb	r2, r4, #32
 800284c:	fa20 f004 	lsr.w	r0, r0, r4
 8002850:	fa01 f302 	lsl.w	r3, r1, r2
 8002854:	ea40 0003 	orr.w	r0, r0, r3
 8002858:	fa21 f304 	lsr.w	r3, r1, r4
 800285c:	ea45 0103 	orr.w	r1, r5, r3
 8002860:	bd30      	pop	{r4, r5, pc}
 8002862:	f1c4 040c 	rsb	r4, r4, #12
 8002866:	f1c4 0220 	rsb	r2, r4, #32
 800286a:	fa20 f002 	lsr.w	r0, r0, r2
 800286e:	fa01 f304 	lsl.w	r3, r1, r4
 8002872:	ea40 0003 	orr.w	r0, r0, r3
 8002876:	4629      	mov	r1, r5
 8002878:	bd30      	pop	{r4, r5, pc}
 800287a:	fa21 f004 	lsr.w	r0, r1, r4
 800287e:	4629      	mov	r1, r5
 8002880:	bd30      	pop	{r4, r5, pc}
 8002882:	f094 0f00 	teq	r4, #0
 8002886:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800288a:	bf06      	itte	eq
 800288c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8002890:	3401      	addeq	r4, #1
 8002892:	3d01      	subne	r5, #1
 8002894:	e74e      	b.n	8002734 <__adddf3+0x8c>
 8002896:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800289a:	bf18      	it	ne
 800289c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80028a0:	d029      	beq.n	80028f6 <__adddf3+0x24e>
 80028a2:	ea94 0f05 	teq	r4, r5
 80028a6:	bf08      	it	eq
 80028a8:	ea90 0f02 	teqeq	r0, r2
 80028ac:	d005      	beq.n	80028ba <__adddf3+0x212>
 80028ae:	ea54 0c00 	orrs.w	ip, r4, r0
 80028b2:	bf04      	itt	eq
 80028b4:	4619      	moveq	r1, r3
 80028b6:	4610      	moveq	r0, r2
 80028b8:	bd30      	pop	{r4, r5, pc}
 80028ba:	ea91 0f03 	teq	r1, r3
 80028be:	bf1e      	ittt	ne
 80028c0:	2100      	movne	r1, #0
 80028c2:	2000      	movne	r0, #0
 80028c4:	bd30      	popne	{r4, r5, pc}
 80028c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80028ca:	d105      	bne.n	80028d8 <__adddf3+0x230>
 80028cc:	0040      	lsls	r0, r0, #1
 80028ce:	4149      	adcs	r1, r1
 80028d0:	bf28      	it	cs
 80028d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80028d6:	bd30      	pop	{r4, r5, pc}
 80028d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80028dc:	bf3c      	itt	cc
 80028de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80028e2:	bd30      	popcc	{r4, r5, pc}
 80028e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80028e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80028ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80028f0:	f04f 0000 	mov.w	r0, #0
 80028f4:	bd30      	pop	{r4, r5, pc}
 80028f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80028fa:	bf1a      	itte	ne
 80028fc:	4619      	movne	r1, r3
 80028fe:	4610      	movne	r0, r2
 8002900:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8002904:	bf1c      	itt	ne
 8002906:	460b      	movne	r3, r1
 8002908:	4602      	movne	r2, r0
 800290a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800290e:	bf06      	itte	eq
 8002910:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002914:	ea91 0f03 	teqeq	r1, r3
 8002918:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800291c:	bd30      	pop	{r4, r5, pc}
 800291e:	bf00      	nop

08002920 <__aeabi_ui2d>:
 8002920:	f090 0f00 	teq	r0, #0
 8002924:	bf04      	itt	eq
 8002926:	2100      	moveq	r1, #0
 8002928:	4770      	bxeq	lr
 800292a:	b530      	push	{r4, r5, lr}
 800292c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002930:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002934:	f04f 0500 	mov.w	r5, #0
 8002938:	f04f 0100 	mov.w	r1, #0
 800293c:	e750      	b.n	80027e0 <__adddf3+0x138>
 800293e:	bf00      	nop

08002940 <__aeabi_i2d>:
 8002940:	f090 0f00 	teq	r0, #0
 8002944:	bf04      	itt	eq
 8002946:	2100      	moveq	r1, #0
 8002948:	4770      	bxeq	lr
 800294a:	b530      	push	{r4, r5, lr}
 800294c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002950:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002954:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8002958:	bf48      	it	mi
 800295a:	4240      	negmi	r0, r0
 800295c:	f04f 0100 	mov.w	r1, #0
 8002960:	e73e      	b.n	80027e0 <__adddf3+0x138>
 8002962:	bf00      	nop

08002964 <__aeabi_f2d>:
 8002964:	0042      	lsls	r2, r0, #1
 8002966:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800296a:	ea4f 0131 	mov.w	r1, r1, rrx
 800296e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8002972:	bf1f      	itttt	ne
 8002974:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002978:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800297c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8002980:	4770      	bxne	lr
 8002982:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8002986:	bf08      	it	eq
 8002988:	4770      	bxeq	lr
 800298a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800298e:	bf04      	itt	eq
 8002990:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8002994:	4770      	bxeq	lr
 8002996:	b530      	push	{r4, r5, lr}
 8002998:	f44f 7460 	mov.w	r4, #896	; 0x380
 800299c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80029a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80029a4:	e71c      	b.n	80027e0 <__adddf3+0x138>
 80029a6:	bf00      	nop

080029a8 <__aeabi_ul2d>:
 80029a8:	ea50 0201 	orrs.w	r2, r0, r1
 80029ac:	bf08      	it	eq
 80029ae:	4770      	bxeq	lr
 80029b0:	b530      	push	{r4, r5, lr}
 80029b2:	f04f 0500 	mov.w	r5, #0
 80029b6:	e00a      	b.n	80029ce <__aeabi_l2d+0x16>

080029b8 <__aeabi_l2d>:
 80029b8:	ea50 0201 	orrs.w	r2, r0, r1
 80029bc:	bf08      	it	eq
 80029be:	4770      	bxeq	lr
 80029c0:	b530      	push	{r4, r5, lr}
 80029c2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80029c6:	d502      	bpl.n	80029ce <__aeabi_l2d+0x16>
 80029c8:	4240      	negs	r0, r0
 80029ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80029ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80029d2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80029d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80029da:	f43f aed8 	beq.w	800278e <__adddf3+0xe6>
 80029de:	f04f 0203 	mov.w	r2, #3
 80029e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80029e6:	bf18      	it	ne
 80029e8:	3203      	addne	r2, #3
 80029ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80029ee:	bf18      	it	ne
 80029f0:	3203      	addne	r2, #3
 80029f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80029f6:	f1c2 0320 	rsb	r3, r2, #32
 80029fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80029fe:	fa20 f002 	lsr.w	r0, r0, r2
 8002a02:	fa01 fe03 	lsl.w	lr, r1, r3
 8002a06:	ea40 000e 	orr.w	r0, r0, lr
 8002a0a:	fa21 f102 	lsr.w	r1, r1, r2
 8002a0e:	4414      	add	r4, r2
 8002a10:	e6bd      	b.n	800278e <__adddf3+0xe6>
 8002a12:	bf00      	nop

08002a14 <__aeabi_dmul>:
 8002a14:	b570      	push	{r4, r5, r6, lr}
 8002a16:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002a1a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002a1e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002a22:	bf1d      	ittte	ne
 8002a24:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002a28:	ea94 0f0c 	teqne	r4, ip
 8002a2c:	ea95 0f0c 	teqne	r5, ip
 8002a30:	f000 f8de 	bleq	8002bf0 <__aeabi_dmul+0x1dc>
 8002a34:	442c      	add	r4, r5
 8002a36:	ea81 0603 	eor.w	r6, r1, r3
 8002a3a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8002a3e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8002a42:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8002a46:	bf18      	it	ne
 8002a48:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002a4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002a50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a54:	d038      	beq.n	8002ac8 <__aeabi_dmul+0xb4>
 8002a56:	fba0 ce02 	umull	ip, lr, r0, r2
 8002a5a:	f04f 0500 	mov.w	r5, #0
 8002a5e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8002a62:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8002a66:	fbe0 e503 	umlal	lr, r5, r0, r3
 8002a6a:	f04f 0600 	mov.w	r6, #0
 8002a6e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8002a72:	f09c 0f00 	teq	ip, #0
 8002a76:	bf18      	it	ne
 8002a78:	f04e 0e01 	orrne.w	lr, lr, #1
 8002a7c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8002a80:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8002a84:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8002a88:	d204      	bcs.n	8002a94 <__aeabi_dmul+0x80>
 8002a8a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8002a8e:	416d      	adcs	r5, r5
 8002a90:	eb46 0606 	adc.w	r6, r6, r6
 8002a94:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8002a98:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002a9c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8002aa0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8002aa4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8002aa8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002aac:	bf88      	it	hi
 8002aae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002ab2:	d81e      	bhi.n	8002af2 <__aeabi_dmul+0xde>
 8002ab4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8002ab8:	bf08      	it	eq
 8002aba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8002abe:	f150 0000 	adcs.w	r0, r0, #0
 8002ac2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002ac6:	bd70      	pop	{r4, r5, r6, pc}
 8002ac8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8002acc:	ea46 0101 	orr.w	r1, r6, r1
 8002ad0:	ea40 0002 	orr.w	r0, r0, r2
 8002ad4:	ea81 0103 	eor.w	r1, r1, r3
 8002ad8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8002adc:	bfc2      	ittt	gt
 8002ade:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002ae2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002ae6:	bd70      	popgt	{r4, r5, r6, pc}
 8002ae8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002aec:	f04f 0e00 	mov.w	lr, #0
 8002af0:	3c01      	subs	r4, #1
 8002af2:	f300 80ab 	bgt.w	8002c4c <__aeabi_dmul+0x238>
 8002af6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8002afa:	bfde      	ittt	le
 8002afc:	2000      	movle	r0, #0
 8002afe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8002b02:	bd70      	pople	{r4, r5, r6, pc}
 8002b04:	f1c4 0400 	rsb	r4, r4, #0
 8002b08:	3c20      	subs	r4, #32
 8002b0a:	da35      	bge.n	8002b78 <__aeabi_dmul+0x164>
 8002b0c:	340c      	adds	r4, #12
 8002b0e:	dc1b      	bgt.n	8002b48 <__aeabi_dmul+0x134>
 8002b10:	f104 0414 	add.w	r4, r4, #20
 8002b14:	f1c4 0520 	rsb	r5, r4, #32
 8002b18:	fa00 f305 	lsl.w	r3, r0, r5
 8002b1c:	fa20 f004 	lsr.w	r0, r0, r4
 8002b20:	fa01 f205 	lsl.w	r2, r1, r5
 8002b24:	ea40 0002 	orr.w	r0, r0, r2
 8002b28:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8002b2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002b30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002b34:	fa21 f604 	lsr.w	r6, r1, r4
 8002b38:	eb42 0106 	adc.w	r1, r2, r6
 8002b3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002b40:	bf08      	it	eq
 8002b42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002b46:	bd70      	pop	{r4, r5, r6, pc}
 8002b48:	f1c4 040c 	rsb	r4, r4, #12
 8002b4c:	f1c4 0520 	rsb	r5, r4, #32
 8002b50:	fa00 f304 	lsl.w	r3, r0, r4
 8002b54:	fa20 f005 	lsr.w	r0, r0, r5
 8002b58:	fa01 f204 	lsl.w	r2, r1, r4
 8002b5c:	ea40 0002 	orr.w	r0, r0, r2
 8002b60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002b64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002b68:	f141 0100 	adc.w	r1, r1, #0
 8002b6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002b70:	bf08      	it	eq
 8002b72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002b76:	bd70      	pop	{r4, r5, r6, pc}
 8002b78:	f1c4 0520 	rsb	r5, r4, #32
 8002b7c:	fa00 f205 	lsl.w	r2, r0, r5
 8002b80:	ea4e 0e02 	orr.w	lr, lr, r2
 8002b84:	fa20 f304 	lsr.w	r3, r0, r4
 8002b88:	fa01 f205 	lsl.w	r2, r1, r5
 8002b8c:	ea43 0302 	orr.w	r3, r3, r2
 8002b90:	fa21 f004 	lsr.w	r0, r1, r4
 8002b94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002b98:	fa21 f204 	lsr.w	r2, r1, r4
 8002b9c:	ea20 0002 	bic.w	r0, r0, r2
 8002ba0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8002ba4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002ba8:	bf08      	it	eq
 8002baa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002bae:	bd70      	pop	{r4, r5, r6, pc}
 8002bb0:	f094 0f00 	teq	r4, #0
 8002bb4:	d10f      	bne.n	8002bd6 <__aeabi_dmul+0x1c2>
 8002bb6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8002bba:	0040      	lsls	r0, r0, #1
 8002bbc:	eb41 0101 	adc.w	r1, r1, r1
 8002bc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002bc4:	bf08      	it	eq
 8002bc6:	3c01      	subeq	r4, #1
 8002bc8:	d0f7      	beq.n	8002bba <__aeabi_dmul+0x1a6>
 8002bca:	ea41 0106 	orr.w	r1, r1, r6
 8002bce:	f095 0f00 	teq	r5, #0
 8002bd2:	bf18      	it	ne
 8002bd4:	4770      	bxne	lr
 8002bd6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8002bda:	0052      	lsls	r2, r2, #1
 8002bdc:	eb43 0303 	adc.w	r3, r3, r3
 8002be0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002be4:	bf08      	it	eq
 8002be6:	3d01      	subeq	r5, #1
 8002be8:	d0f7      	beq.n	8002bda <__aeabi_dmul+0x1c6>
 8002bea:	ea43 0306 	orr.w	r3, r3, r6
 8002bee:	4770      	bx	lr
 8002bf0:	ea94 0f0c 	teq	r4, ip
 8002bf4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002bf8:	bf18      	it	ne
 8002bfa:	ea95 0f0c 	teqne	r5, ip
 8002bfe:	d00c      	beq.n	8002c1a <__aeabi_dmul+0x206>
 8002c00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002c04:	bf18      	it	ne
 8002c06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002c0a:	d1d1      	bne.n	8002bb0 <__aeabi_dmul+0x19c>
 8002c0c:	ea81 0103 	eor.w	r1, r1, r3
 8002c10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002c14:	f04f 0000 	mov.w	r0, #0
 8002c18:	bd70      	pop	{r4, r5, r6, pc}
 8002c1a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002c1e:	bf06      	itte	eq
 8002c20:	4610      	moveq	r0, r2
 8002c22:	4619      	moveq	r1, r3
 8002c24:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002c28:	d019      	beq.n	8002c5e <__aeabi_dmul+0x24a>
 8002c2a:	ea94 0f0c 	teq	r4, ip
 8002c2e:	d102      	bne.n	8002c36 <__aeabi_dmul+0x222>
 8002c30:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8002c34:	d113      	bne.n	8002c5e <__aeabi_dmul+0x24a>
 8002c36:	ea95 0f0c 	teq	r5, ip
 8002c3a:	d105      	bne.n	8002c48 <__aeabi_dmul+0x234>
 8002c3c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8002c40:	bf1c      	itt	ne
 8002c42:	4610      	movne	r0, r2
 8002c44:	4619      	movne	r1, r3
 8002c46:	d10a      	bne.n	8002c5e <__aeabi_dmul+0x24a>
 8002c48:	ea81 0103 	eor.w	r1, r1, r3
 8002c4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002c50:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002c54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002c58:	f04f 0000 	mov.w	r0, #0
 8002c5c:	bd70      	pop	{r4, r5, r6, pc}
 8002c5e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002c62:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8002c66:	bd70      	pop	{r4, r5, r6, pc}

08002c68 <__aeabi_ddiv>:
 8002c68:	b570      	push	{r4, r5, r6, lr}
 8002c6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002c6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002c72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002c76:	bf1d      	ittte	ne
 8002c78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002c7c:	ea94 0f0c 	teqne	r4, ip
 8002c80:	ea95 0f0c 	teqne	r5, ip
 8002c84:	f000 f8a7 	bleq	8002dd6 <__aeabi_ddiv+0x16e>
 8002c88:	eba4 0405 	sub.w	r4, r4, r5
 8002c8c:	ea81 0e03 	eor.w	lr, r1, r3
 8002c90:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002c94:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002c98:	f000 8088 	beq.w	8002dac <__aeabi_ddiv+0x144>
 8002c9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002ca0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8002ca4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8002ca8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8002cac:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002cb0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8002cb4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8002cb8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8002cbc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8002cc0:	429d      	cmp	r5, r3
 8002cc2:	bf08      	it	eq
 8002cc4:	4296      	cmpeq	r6, r2
 8002cc6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8002cca:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8002cce:	d202      	bcs.n	8002cd6 <__aeabi_ddiv+0x6e>
 8002cd0:	085b      	lsrs	r3, r3, #1
 8002cd2:	ea4f 0232 	mov.w	r2, r2, rrx
 8002cd6:	1ab6      	subs	r6, r6, r2
 8002cd8:	eb65 0503 	sbc.w	r5, r5, r3
 8002cdc:	085b      	lsrs	r3, r3, #1
 8002cde:	ea4f 0232 	mov.w	r2, r2, rrx
 8002ce2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002ce6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8002cea:	ebb6 0e02 	subs.w	lr, r6, r2
 8002cee:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002cf2:	bf22      	ittt	cs
 8002cf4:	1ab6      	subcs	r6, r6, r2
 8002cf6:	4675      	movcs	r5, lr
 8002cf8:	ea40 000c 	orrcs.w	r0, r0, ip
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d02:	ebb6 0e02 	subs.w	lr, r6, r2
 8002d06:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002d0a:	bf22      	ittt	cs
 8002d0c:	1ab6      	subcs	r6, r6, r2
 8002d0e:	4675      	movcs	r5, lr
 8002d10:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8002d14:	085b      	lsrs	r3, r3, #1
 8002d16:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d1a:	ebb6 0e02 	subs.w	lr, r6, r2
 8002d1e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002d22:	bf22      	ittt	cs
 8002d24:	1ab6      	subcs	r6, r6, r2
 8002d26:	4675      	movcs	r5, lr
 8002d28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002d2c:	085b      	lsrs	r3, r3, #1
 8002d2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d32:	ebb6 0e02 	subs.w	lr, r6, r2
 8002d36:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002d3a:	bf22      	ittt	cs
 8002d3c:	1ab6      	subcs	r6, r6, r2
 8002d3e:	4675      	movcs	r5, lr
 8002d40:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8002d44:	ea55 0e06 	orrs.w	lr, r5, r6
 8002d48:	d018      	beq.n	8002d7c <__aeabi_ddiv+0x114>
 8002d4a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8002d4e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8002d52:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8002d56:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002d5a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8002d5e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8002d62:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8002d66:	d1c0      	bne.n	8002cea <__aeabi_ddiv+0x82>
 8002d68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002d6c:	d10b      	bne.n	8002d86 <__aeabi_ddiv+0x11e>
 8002d6e:	ea41 0100 	orr.w	r1, r1, r0
 8002d72:	f04f 0000 	mov.w	r0, #0
 8002d76:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8002d7a:	e7b6      	b.n	8002cea <__aeabi_ddiv+0x82>
 8002d7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002d80:	bf04      	itt	eq
 8002d82:	4301      	orreq	r1, r0
 8002d84:	2000      	moveq	r0, #0
 8002d86:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002d8a:	bf88      	it	hi
 8002d8c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002d90:	f63f aeaf 	bhi.w	8002af2 <__aeabi_dmul+0xde>
 8002d94:	ebb5 0c03 	subs.w	ip, r5, r3
 8002d98:	bf04      	itt	eq
 8002d9a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8002d9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002da2:	f150 0000 	adcs.w	r0, r0, #0
 8002da6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002daa:	bd70      	pop	{r4, r5, r6, pc}
 8002dac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8002db0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8002db4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8002db8:	bfc2      	ittt	gt
 8002dba:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002dbe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002dc2:	bd70      	popgt	{r4, r5, r6, pc}
 8002dc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002dc8:	f04f 0e00 	mov.w	lr, #0
 8002dcc:	3c01      	subs	r4, #1
 8002dce:	e690      	b.n	8002af2 <__aeabi_dmul+0xde>
 8002dd0:	ea45 0e06 	orr.w	lr, r5, r6
 8002dd4:	e68d      	b.n	8002af2 <__aeabi_dmul+0xde>
 8002dd6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002dda:	ea94 0f0c 	teq	r4, ip
 8002dde:	bf08      	it	eq
 8002de0:	ea95 0f0c 	teqeq	r5, ip
 8002de4:	f43f af3b 	beq.w	8002c5e <__aeabi_dmul+0x24a>
 8002de8:	ea94 0f0c 	teq	r4, ip
 8002dec:	d10a      	bne.n	8002e04 <__aeabi_ddiv+0x19c>
 8002dee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002df2:	f47f af34 	bne.w	8002c5e <__aeabi_dmul+0x24a>
 8002df6:	ea95 0f0c 	teq	r5, ip
 8002dfa:	f47f af25 	bne.w	8002c48 <__aeabi_dmul+0x234>
 8002dfe:	4610      	mov	r0, r2
 8002e00:	4619      	mov	r1, r3
 8002e02:	e72c      	b.n	8002c5e <__aeabi_dmul+0x24a>
 8002e04:	ea95 0f0c 	teq	r5, ip
 8002e08:	d106      	bne.n	8002e18 <__aeabi_ddiv+0x1b0>
 8002e0a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002e0e:	f43f aefd 	beq.w	8002c0c <__aeabi_dmul+0x1f8>
 8002e12:	4610      	mov	r0, r2
 8002e14:	4619      	mov	r1, r3
 8002e16:	e722      	b.n	8002c5e <__aeabi_dmul+0x24a>
 8002e18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002e1c:	bf18      	it	ne
 8002e1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002e22:	f47f aec5 	bne.w	8002bb0 <__aeabi_dmul+0x19c>
 8002e26:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8002e2a:	f47f af0d 	bne.w	8002c48 <__aeabi_dmul+0x234>
 8002e2e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8002e32:	f47f aeeb 	bne.w	8002c0c <__aeabi_dmul+0x1f8>
 8002e36:	e712      	b.n	8002c5e <__aeabi_dmul+0x24a>

08002e38 <__gedf2>:
 8002e38:	f04f 3cff 	mov.w	ip, #4294967295
 8002e3c:	e006      	b.n	8002e4c <__cmpdf2+0x4>
 8002e3e:	bf00      	nop

08002e40 <__ledf2>:
 8002e40:	f04f 0c01 	mov.w	ip, #1
 8002e44:	e002      	b.n	8002e4c <__cmpdf2+0x4>
 8002e46:	bf00      	nop

08002e48 <__cmpdf2>:
 8002e48:	f04f 0c01 	mov.w	ip, #1
 8002e4c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002e50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002e54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002e58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002e5c:	bf18      	it	ne
 8002e5e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8002e62:	d01b      	beq.n	8002e9c <__cmpdf2+0x54>
 8002e64:	b001      	add	sp, #4
 8002e66:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8002e6a:	bf0c      	ite	eq
 8002e6c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8002e70:	ea91 0f03 	teqne	r1, r3
 8002e74:	bf02      	ittt	eq
 8002e76:	ea90 0f02 	teqeq	r0, r2
 8002e7a:	2000      	moveq	r0, #0
 8002e7c:	4770      	bxeq	lr
 8002e7e:	f110 0f00 	cmn.w	r0, #0
 8002e82:	ea91 0f03 	teq	r1, r3
 8002e86:	bf58      	it	pl
 8002e88:	4299      	cmppl	r1, r3
 8002e8a:	bf08      	it	eq
 8002e8c:	4290      	cmpeq	r0, r2
 8002e8e:	bf2c      	ite	cs
 8002e90:	17d8      	asrcs	r0, r3, #31
 8002e92:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8002e96:	f040 0001 	orr.w	r0, r0, #1
 8002e9a:	4770      	bx	lr
 8002e9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002ea0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002ea4:	d102      	bne.n	8002eac <__cmpdf2+0x64>
 8002ea6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002eaa:	d107      	bne.n	8002ebc <__cmpdf2+0x74>
 8002eac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002eb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002eb4:	d1d6      	bne.n	8002e64 <__cmpdf2+0x1c>
 8002eb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002eba:	d0d3      	beq.n	8002e64 <__cmpdf2+0x1c>
 8002ebc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop

08002ec4 <__aeabi_cdrcmple>:
 8002ec4:	4684      	mov	ip, r0
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4662      	mov	r2, ip
 8002eca:	468c      	mov	ip, r1
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4663      	mov	r3, ip
 8002ed0:	e000      	b.n	8002ed4 <__aeabi_cdcmpeq>
 8002ed2:	bf00      	nop

08002ed4 <__aeabi_cdcmpeq>:
 8002ed4:	b501      	push	{r0, lr}
 8002ed6:	f7ff ffb7 	bl	8002e48 <__cmpdf2>
 8002eda:	2800      	cmp	r0, #0
 8002edc:	bf48      	it	mi
 8002ede:	f110 0f00 	cmnmi.w	r0, #0
 8002ee2:	bd01      	pop	{r0, pc}

08002ee4 <__aeabi_dcmpeq>:
 8002ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002ee8:	f7ff fff4 	bl	8002ed4 <__aeabi_cdcmpeq>
 8002eec:	bf0c      	ite	eq
 8002eee:	2001      	moveq	r0, #1
 8002ef0:	2000      	movne	r0, #0
 8002ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8002ef6:	bf00      	nop

08002ef8 <__aeabi_dcmplt>:
 8002ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002efc:	f7ff ffea 	bl	8002ed4 <__aeabi_cdcmpeq>
 8002f00:	bf34      	ite	cc
 8002f02:	2001      	movcc	r0, #1
 8002f04:	2000      	movcs	r0, #0
 8002f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f0a:	bf00      	nop

08002f0c <__aeabi_dcmple>:
 8002f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f10:	f7ff ffe0 	bl	8002ed4 <__aeabi_cdcmpeq>
 8002f14:	bf94      	ite	ls
 8002f16:	2001      	movls	r0, #1
 8002f18:	2000      	movhi	r0, #0
 8002f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f1e:	bf00      	nop

08002f20 <__aeabi_dcmpge>:
 8002f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f24:	f7ff ffce 	bl	8002ec4 <__aeabi_cdrcmple>
 8002f28:	bf94      	ite	ls
 8002f2a:	2001      	movls	r0, #1
 8002f2c:	2000      	movhi	r0, #0
 8002f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f32:	bf00      	nop

08002f34 <__aeabi_dcmpgt>:
 8002f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f38:	f7ff ffc4 	bl	8002ec4 <__aeabi_cdrcmple>
 8002f3c:	bf34      	ite	cc
 8002f3e:	2001      	movcc	r0, #1
 8002f40:	2000      	movcs	r0, #0
 8002f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f46:	bf00      	nop

08002f48 <__aeabi_dcmpun>:
 8002f48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002f4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002f50:	d102      	bne.n	8002f58 <__aeabi_dcmpun+0x10>
 8002f52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002f56:	d10a      	bne.n	8002f6e <__aeabi_dcmpun+0x26>
 8002f58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002f5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002f60:	d102      	bne.n	8002f68 <__aeabi_dcmpun+0x20>
 8002f62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002f66:	d102      	bne.n	8002f6e <__aeabi_dcmpun+0x26>
 8002f68:	f04f 0000 	mov.w	r0, #0
 8002f6c:	4770      	bx	lr
 8002f6e:	f04f 0001 	mov.w	r0, #1
 8002f72:	4770      	bx	lr

08002f74 <__aeabi_d2iz>:
 8002f74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002f78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8002f7c:	d215      	bcs.n	8002faa <__aeabi_d2iz+0x36>
 8002f7e:	d511      	bpl.n	8002fa4 <__aeabi_d2iz+0x30>
 8002f80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8002f84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8002f88:	d912      	bls.n	8002fb0 <__aeabi_d2iz+0x3c>
 8002f8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8002f96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002f9a:	fa23 f002 	lsr.w	r0, r3, r2
 8002f9e:	bf18      	it	ne
 8002fa0:	4240      	negne	r0, r0
 8002fa2:	4770      	bx	lr
 8002fa4:	f04f 0000 	mov.w	r0, #0
 8002fa8:	4770      	bx	lr
 8002faa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8002fae:	d105      	bne.n	8002fbc <__aeabi_d2iz+0x48>
 8002fb0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8002fb4:	bf08      	it	eq
 8002fb6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8002fba:	4770      	bx	lr
 8002fbc:	f04f 0000 	mov.w	r0, #0
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop

08002fc4 <__aeabi_d2uiz>:
 8002fc4:	004a      	lsls	r2, r1, #1
 8002fc6:	d211      	bcs.n	8002fec <__aeabi_d2uiz+0x28>
 8002fc8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8002fcc:	d211      	bcs.n	8002ff2 <__aeabi_d2uiz+0x2e>
 8002fce:	d50d      	bpl.n	8002fec <__aeabi_d2uiz+0x28>
 8002fd0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8002fd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8002fd8:	d40e      	bmi.n	8002ff8 <__aeabi_d2uiz+0x34>
 8002fda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002fde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fe2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8002fe6:	fa23 f002 	lsr.w	r0, r3, r2
 8002fea:	4770      	bx	lr
 8002fec:	f04f 0000 	mov.w	r0, #0
 8002ff0:	4770      	bx	lr
 8002ff2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8002ff6:	d102      	bne.n	8002ffe <__aeabi_d2uiz+0x3a>
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ffc:	4770      	bx	lr
 8002ffe:	f04f 0000 	mov.w	r0, #0
 8003002:	4770      	bx	lr

08003004 <__aeabi_d2f>:
 8003004:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8003008:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800300c:	bf24      	itt	cs
 800300e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8003012:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8003016:	d90d      	bls.n	8003034 <__aeabi_d2f+0x30>
 8003018:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800301c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8003020:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8003024:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8003028:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800302c:	bf08      	it	eq
 800302e:	f020 0001 	biceq.w	r0, r0, #1
 8003032:	4770      	bx	lr
 8003034:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8003038:	d121      	bne.n	800307e <__aeabi_d2f+0x7a>
 800303a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800303e:	bfbc      	itt	lt
 8003040:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8003044:	4770      	bxlt	lr
 8003046:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800304a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800304e:	f1c2 0218 	rsb	r2, r2, #24
 8003052:	f1c2 0c20 	rsb	ip, r2, #32
 8003056:	fa10 f30c 	lsls.w	r3, r0, ip
 800305a:	fa20 f002 	lsr.w	r0, r0, r2
 800305e:	bf18      	it	ne
 8003060:	f040 0001 	orrne.w	r0, r0, #1
 8003064:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003068:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800306c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8003070:	ea40 000c 	orr.w	r0, r0, ip
 8003074:	fa23 f302 	lsr.w	r3, r3, r2
 8003078:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800307c:	e7cc      	b.n	8003018 <__aeabi_d2f+0x14>
 800307e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8003082:	d107      	bne.n	8003094 <__aeabi_d2f+0x90>
 8003084:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8003088:	bf1e      	ittt	ne
 800308a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800308e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8003092:	4770      	bxne	lr
 8003094:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8003098:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800309c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop

080030a4 <__gesf2>:
 80030a4:	f04f 3cff 	mov.w	ip, #4294967295
 80030a8:	e006      	b.n	80030b8 <__cmpsf2+0x4>
 80030aa:	bf00      	nop

080030ac <__lesf2>:
 80030ac:	f04f 0c01 	mov.w	ip, #1
 80030b0:	e002      	b.n	80030b8 <__cmpsf2+0x4>
 80030b2:	bf00      	nop

080030b4 <__cmpsf2>:
 80030b4:	f04f 0c01 	mov.w	ip, #1
 80030b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80030bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80030c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80030c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80030c8:	bf18      	it	ne
 80030ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80030ce:	d011      	beq.n	80030f4 <__cmpsf2+0x40>
 80030d0:	b001      	add	sp, #4
 80030d2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80030d6:	bf18      	it	ne
 80030d8:	ea90 0f01 	teqne	r0, r1
 80030dc:	bf58      	it	pl
 80030de:	ebb2 0003 	subspl.w	r0, r2, r3
 80030e2:	bf88      	it	hi
 80030e4:	17c8      	asrhi	r0, r1, #31
 80030e6:	bf38      	it	cc
 80030e8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80030ec:	bf18      	it	ne
 80030ee:	f040 0001 	orrne.w	r0, r0, #1
 80030f2:	4770      	bx	lr
 80030f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80030f8:	d102      	bne.n	8003100 <__cmpsf2+0x4c>
 80030fa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80030fe:	d105      	bne.n	800310c <__cmpsf2+0x58>
 8003100:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8003104:	d1e4      	bne.n	80030d0 <__cmpsf2+0x1c>
 8003106:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800310a:	d0e1      	beq.n	80030d0 <__cmpsf2+0x1c>
 800310c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop

08003114 <__aeabi_cfrcmple>:
 8003114:	4684      	mov	ip, r0
 8003116:	4608      	mov	r0, r1
 8003118:	4661      	mov	r1, ip
 800311a:	e7ff      	b.n	800311c <__aeabi_cfcmpeq>

0800311c <__aeabi_cfcmpeq>:
 800311c:	b50f      	push	{r0, r1, r2, r3, lr}
 800311e:	f7ff ffc9 	bl	80030b4 <__cmpsf2>
 8003122:	2800      	cmp	r0, #0
 8003124:	bf48      	it	mi
 8003126:	f110 0f00 	cmnmi.w	r0, #0
 800312a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800312c <__aeabi_fcmpeq>:
 800312c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003130:	f7ff fff4 	bl	800311c <__aeabi_cfcmpeq>
 8003134:	bf0c      	ite	eq
 8003136:	2001      	moveq	r0, #1
 8003138:	2000      	movne	r0, #0
 800313a:	f85d fb08 	ldr.w	pc, [sp], #8
 800313e:	bf00      	nop

08003140 <__aeabi_fcmplt>:
 8003140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003144:	f7ff ffea 	bl	800311c <__aeabi_cfcmpeq>
 8003148:	bf34      	ite	cc
 800314a:	2001      	movcc	r0, #1
 800314c:	2000      	movcs	r0, #0
 800314e:	f85d fb08 	ldr.w	pc, [sp], #8
 8003152:	bf00      	nop

08003154 <__aeabi_fcmple>:
 8003154:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003158:	f7ff ffe0 	bl	800311c <__aeabi_cfcmpeq>
 800315c:	bf94      	ite	ls
 800315e:	2001      	movls	r0, #1
 8003160:	2000      	movhi	r0, #0
 8003162:	f85d fb08 	ldr.w	pc, [sp], #8
 8003166:	bf00      	nop

08003168 <__aeabi_fcmpge>:
 8003168:	f84d ed08 	str.w	lr, [sp, #-8]!
 800316c:	f7ff ffd2 	bl	8003114 <__aeabi_cfrcmple>
 8003170:	bf94      	ite	ls
 8003172:	2001      	movls	r0, #1
 8003174:	2000      	movhi	r0, #0
 8003176:	f85d fb08 	ldr.w	pc, [sp], #8
 800317a:	bf00      	nop

0800317c <__aeabi_fcmpgt>:
 800317c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003180:	f7ff ffc8 	bl	8003114 <__aeabi_cfrcmple>
 8003184:	bf34      	ite	cc
 8003186:	2001      	movcc	r0, #1
 8003188:	2000      	movcs	r0, #0
 800318a:	f85d fb08 	ldr.w	pc, [sp], #8
 800318e:	bf00      	nop

08003190 <__aeabi_d2lz>:
 8003190:	b538      	push	{r3, r4, r5, lr}
 8003192:	4605      	mov	r5, r0
 8003194:	460c      	mov	r4, r1
 8003196:	2200      	movs	r2, #0
 8003198:	2300      	movs	r3, #0
 800319a:	4628      	mov	r0, r5
 800319c:	4621      	mov	r1, r4
 800319e:	f7ff feab 	bl	8002ef8 <__aeabi_dcmplt>
 80031a2:	b928      	cbnz	r0, 80031b0 <__aeabi_d2lz+0x20>
 80031a4:	4628      	mov	r0, r5
 80031a6:	4621      	mov	r1, r4
 80031a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031ac:	f000 b80a 	b.w	80031c4 <__aeabi_d2ulz>
 80031b0:	4628      	mov	r0, r5
 80031b2:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80031b6:	f000 f805 	bl	80031c4 <__aeabi_d2ulz>
 80031ba:	4240      	negs	r0, r0
 80031bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80031c0:	bd38      	pop	{r3, r4, r5, pc}
 80031c2:	bf00      	nop

080031c4 <__aeabi_d2ulz>:
 80031c4:	b5d0      	push	{r4, r6, r7, lr}
 80031c6:	2200      	movs	r2, #0
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <__aeabi_d2ulz+0x34>)
 80031ca:	4606      	mov	r6, r0
 80031cc:	460f      	mov	r7, r1
 80031ce:	f7ff fc21 	bl	8002a14 <__aeabi_dmul>
 80031d2:	f7ff fef7 	bl	8002fc4 <__aeabi_d2uiz>
 80031d6:	4604      	mov	r4, r0
 80031d8:	f7ff fba2 	bl	8002920 <__aeabi_ui2d>
 80031dc:	2200      	movs	r2, #0
 80031de:	4b07      	ldr	r3, [pc, #28]	; (80031fc <__aeabi_d2ulz+0x38>)
 80031e0:	f7ff fc18 	bl	8002a14 <__aeabi_dmul>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4630      	mov	r0, r6
 80031ea:	4639      	mov	r1, r7
 80031ec:	f7ff fa5a 	bl	80026a4 <__aeabi_dsub>
 80031f0:	f7ff fee8 	bl	8002fc4 <__aeabi_d2uiz>
 80031f4:	4621      	mov	r1, r4
 80031f6:	bdd0      	pop	{r4, r6, r7, pc}
 80031f8:	3df00000 	.word	0x3df00000
 80031fc:	41f00000 	.word	0x41f00000

08003200 <__aeabi_frsub>:
 8003200:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8003204:	e002      	b.n	800320c <__addsf3>
 8003206:	bf00      	nop

08003208 <__aeabi_fsub>:
 8003208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800320c <__addsf3>:
 800320c:	0042      	lsls	r2, r0, #1
 800320e:	bf1f      	itttt	ne
 8003210:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8003214:	ea92 0f03 	teqne	r2, r3
 8003218:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800321c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8003220:	d06a      	beq.n	80032f8 <__addsf3+0xec>
 8003222:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8003226:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800322a:	bfc1      	itttt	gt
 800322c:	18d2      	addgt	r2, r2, r3
 800322e:	4041      	eorgt	r1, r0
 8003230:	4048      	eorgt	r0, r1
 8003232:	4041      	eorgt	r1, r0
 8003234:	bfb8      	it	lt
 8003236:	425b      	neglt	r3, r3
 8003238:	2b19      	cmp	r3, #25
 800323a:	bf88      	it	hi
 800323c:	4770      	bxhi	lr
 800323e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8003242:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003246:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800324a:	bf18      	it	ne
 800324c:	4240      	negne	r0, r0
 800324e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003252:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8003256:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800325a:	bf18      	it	ne
 800325c:	4249      	negne	r1, r1
 800325e:	ea92 0f03 	teq	r2, r3
 8003262:	d03f      	beq.n	80032e4 <__addsf3+0xd8>
 8003264:	f1a2 0201 	sub.w	r2, r2, #1
 8003268:	fa41 fc03 	asr.w	ip, r1, r3
 800326c:	eb10 000c 	adds.w	r0, r0, ip
 8003270:	f1c3 0320 	rsb	r3, r3, #32
 8003274:	fa01 f103 	lsl.w	r1, r1, r3
 8003278:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800327c:	d502      	bpl.n	8003284 <__addsf3+0x78>
 800327e:	4249      	negs	r1, r1
 8003280:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8003284:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8003288:	d313      	bcc.n	80032b2 <__addsf3+0xa6>
 800328a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800328e:	d306      	bcc.n	800329e <__addsf3+0x92>
 8003290:	0840      	lsrs	r0, r0, #1
 8003292:	ea4f 0131 	mov.w	r1, r1, rrx
 8003296:	f102 0201 	add.w	r2, r2, #1
 800329a:	2afe      	cmp	r2, #254	; 0xfe
 800329c:	d251      	bcs.n	8003342 <__addsf3+0x136>
 800329e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80032a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80032a6:	bf08      	it	eq
 80032a8:	f020 0001 	biceq.w	r0, r0, #1
 80032ac:	ea40 0003 	orr.w	r0, r0, r3
 80032b0:	4770      	bx	lr
 80032b2:	0049      	lsls	r1, r1, #1
 80032b4:	eb40 0000 	adc.w	r0, r0, r0
 80032b8:	3a01      	subs	r2, #1
 80032ba:	bf28      	it	cs
 80032bc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80032c0:	d2ed      	bcs.n	800329e <__addsf3+0x92>
 80032c2:	fab0 fc80 	clz	ip, r0
 80032c6:	f1ac 0c08 	sub.w	ip, ip, #8
 80032ca:	ebb2 020c 	subs.w	r2, r2, ip
 80032ce:	fa00 f00c 	lsl.w	r0, r0, ip
 80032d2:	bfaa      	itet	ge
 80032d4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80032d8:	4252      	neglt	r2, r2
 80032da:	4318      	orrge	r0, r3
 80032dc:	bfbc      	itt	lt
 80032de:	40d0      	lsrlt	r0, r2
 80032e0:	4318      	orrlt	r0, r3
 80032e2:	4770      	bx	lr
 80032e4:	f092 0f00 	teq	r2, #0
 80032e8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80032ec:	bf06      	itte	eq
 80032ee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80032f2:	3201      	addeq	r2, #1
 80032f4:	3b01      	subne	r3, #1
 80032f6:	e7b5      	b.n	8003264 <__addsf3+0x58>
 80032f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80032fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8003300:	bf18      	it	ne
 8003302:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8003306:	d021      	beq.n	800334c <__addsf3+0x140>
 8003308:	ea92 0f03 	teq	r2, r3
 800330c:	d004      	beq.n	8003318 <__addsf3+0x10c>
 800330e:	f092 0f00 	teq	r2, #0
 8003312:	bf08      	it	eq
 8003314:	4608      	moveq	r0, r1
 8003316:	4770      	bx	lr
 8003318:	ea90 0f01 	teq	r0, r1
 800331c:	bf1c      	itt	ne
 800331e:	2000      	movne	r0, #0
 8003320:	4770      	bxne	lr
 8003322:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8003326:	d104      	bne.n	8003332 <__addsf3+0x126>
 8003328:	0040      	lsls	r0, r0, #1
 800332a:	bf28      	it	cs
 800332c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8003330:	4770      	bx	lr
 8003332:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8003336:	bf3c      	itt	cc
 8003338:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800333c:	4770      	bxcc	lr
 800333e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8003342:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8003346:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800334a:	4770      	bx	lr
 800334c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8003350:	bf16      	itet	ne
 8003352:	4608      	movne	r0, r1
 8003354:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8003358:	4601      	movne	r1, r0
 800335a:	0242      	lsls	r2, r0, #9
 800335c:	bf06      	itte	eq
 800335e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8003362:	ea90 0f01 	teqeq	r0, r1
 8003366:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800336a:	4770      	bx	lr

0800336c <__aeabi_ui2f>:
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	e004      	b.n	800337c <__aeabi_i2f+0x8>
 8003372:	bf00      	nop

08003374 <__aeabi_i2f>:
 8003374:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8003378:	bf48      	it	mi
 800337a:	4240      	negmi	r0, r0
 800337c:	ea5f 0c00 	movs.w	ip, r0
 8003380:	bf08      	it	eq
 8003382:	4770      	bxeq	lr
 8003384:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8003388:	4601      	mov	r1, r0
 800338a:	f04f 0000 	mov.w	r0, #0
 800338e:	e01c      	b.n	80033ca <__aeabi_l2f+0x2a>

08003390 <__aeabi_ul2f>:
 8003390:	ea50 0201 	orrs.w	r2, r0, r1
 8003394:	bf08      	it	eq
 8003396:	4770      	bxeq	lr
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	e00a      	b.n	80033b4 <__aeabi_l2f+0x14>
 800339e:	bf00      	nop

080033a0 <__aeabi_l2f>:
 80033a0:	ea50 0201 	orrs.w	r2, r0, r1
 80033a4:	bf08      	it	eq
 80033a6:	4770      	bxeq	lr
 80033a8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80033ac:	d502      	bpl.n	80033b4 <__aeabi_l2f+0x14>
 80033ae:	4240      	negs	r0, r0
 80033b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80033b4:	ea5f 0c01 	movs.w	ip, r1
 80033b8:	bf02      	ittt	eq
 80033ba:	4684      	moveq	ip, r0
 80033bc:	4601      	moveq	r1, r0
 80033be:	2000      	moveq	r0, #0
 80033c0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80033c4:	bf08      	it	eq
 80033c6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80033ca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80033ce:	fabc f28c 	clz	r2, ip
 80033d2:	3a08      	subs	r2, #8
 80033d4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80033d8:	db10      	blt.n	80033fc <__aeabi_l2f+0x5c>
 80033da:	fa01 fc02 	lsl.w	ip, r1, r2
 80033de:	4463      	add	r3, ip
 80033e0:	fa00 fc02 	lsl.w	ip, r0, r2
 80033e4:	f1c2 0220 	rsb	r2, r2, #32
 80033e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80033ec:	fa20 f202 	lsr.w	r2, r0, r2
 80033f0:	eb43 0002 	adc.w	r0, r3, r2
 80033f4:	bf08      	it	eq
 80033f6:	f020 0001 	biceq.w	r0, r0, #1
 80033fa:	4770      	bx	lr
 80033fc:	f102 0220 	add.w	r2, r2, #32
 8003400:	fa01 fc02 	lsl.w	ip, r1, r2
 8003404:	f1c2 0220 	rsb	r2, r2, #32
 8003408:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800340c:	fa21 f202 	lsr.w	r2, r1, r2
 8003410:	eb43 0002 	adc.w	r0, r3, r2
 8003414:	bf08      	it	eq
 8003416:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800341a:	4770      	bx	lr

0800341c <__aeabi_fmul>:
 800341c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003420:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8003424:	bf1e      	ittt	ne
 8003426:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800342a:	ea92 0f0c 	teqne	r2, ip
 800342e:	ea93 0f0c 	teqne	r3, ip
 8003432:	d06f      	beq.n	8003514 <__aeabi_fmul+0xf8>
 8003434:	441a      	add	r2, r3
 8003436:	ea80 0c01 	eor.w	ip, r0, r1
 800343a:	0240      	lsls	r0, r0, #9
 800343c:	bf18      	it	ne
 800343e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8003442:	d01e      	beq.n	8003482 <__aeabi_fmul+0x66>
 8003444:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003448:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800344c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8003450:	fba0 3101 	umull	r3, r1, r0, r1
 8003454:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8003458:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800345c:	bf3e      	ittt	cc
 800345e:	0049      	lslcc	r1, r1, #1
 8003460:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8003464:	005b      	lslcc	r3, r3, #1
 8003466:	ea40 0001 	orr.w	r0, r0, r1
 800346a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800346e:	2afd      	cmp	r2, #253	; 0xfd
 8003470:	d81d      	bhi.n	80034ae <__aeabi_fmul+0x92>
 8003472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003476:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800347a:	bf08      	it	eq
 800347c:	f020 0001 	biceq.w	r0, r0, #1
 8003480:	4770      	bx	lr
 8003482:	f090 0f00 	teq	r0, #0
 8003486:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800348a:	bf08      	it	eq
 800348c:	0249      	lsleq	r1, r1, #9
 800348e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8003492:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8003496:	3a7f      	subs	r2, #127	; 0x7f
 8003498:	bfc2      	ittt	gt
 800349a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800349e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80034a2:	4770      	bxgt	lr
 80034a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	3a01      	subs	r2, #1
 80034ae:	dc5d      	bgt.n	800356c <__aeabi_fmul+0x150>
 80034b0:	f112 0f19 	cmn.w	r2, #25
 80034b4:	bfdc      	itt	le
 80034b6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80034ba:	4770      	bxle	lr
 80034bc:	f1c2 0200 	rsb	r2, r2, #0
 80034c0:	0041      	lsls	r1, r0, #1
 80034c2:	fa21 f102 	lsr.w	r1, r1, r2
 80034c6:	f1c2 0220 	rsb	r2, r2, #32
 80034ca:	fa00 fc02 	lsl.w	ip, r0, r2
 80034ce:	ea5f 0031 	movs.w	r0, r1, rrx
 80034d2:	f140 0000 	adc.w	r0, r0, #0
 80034d6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80034da:	bf08      	it	eq
 80034dc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80034e0:	4770      	bx	lr
 80034e2:	f092 0f00 	teq	r2, #0
 80034e6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80034ea:	bf02      	ittt	eq
 80034ec:	0040      	lsleq	r0, r0, #1
 80034ee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80034f2:	3a01      	subeq	r2, #1
 80034f4:	d0f9      	beq.n	80034ea <__aeabi_fmul+0xce>
 80034f6:	ea40 000c 	orr.w	r0, r0, ip
 80034fa:	f093 0f00 	teq	r3, #0
 80034fe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8003502:	bf02      	ittt	eq
 8003504:	0049      	lsleq	r1, r1, #1
 8003506:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800350a:	3b01      	subeq	r3, #1
 800350c:	d0f9      	beq.n	8003502 <__aeabi_fmul+0xe6>
 800350e:	ea41 010c 	orr.w	r1, r1, ip
 8003512:	e78f      	b.n	8003434 <__aeabi_fmul+0x18>
 8003514:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8003518:	ea92 0f0c 	teq	r2, ip
 800351c:	bf18      	it	ne
 800351e:	ea93 0f0c 	teqne	r3, ip
 8003522:	d00a      	beq.n	800353a <__aeabi_fmul+0x11e>
 8003524:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8003528:	bf18      	it	ne
 800352a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800352e:	d1d8      	bne.n	80034e2 <__aeabi_fmul+0xc6>
 8003530:	ea80 0001 	eor.w	r0, r0, r1
 8003534:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8003538:	4770      	bx	lr
 800353a:	f090 0f00 	teq	r0, #0
 800353e:	bf17      	itett	ne
 8003540:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8003544:	4608      	moveq	r0, r1
 8003546:	f091 0f00 	teqne	r1, #0
 800354a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800354e:	d014      	beq.n	800357a <__aeabi_fmul+0x15e>
 8003550:	ea92 0f0c 	teq	r2, ip
 8003554:	d101      	bne.n	800355a <__aeabi_fmul+0x13e>
 8003556:	0242      	lsls	r2, r0, #9
 8003558:	d10f      	bne.n	800357a <__aeabi_fmul+0x15e>
 800355a:	ea93 0f0c 	teq	r3, ip
 800355e:	d103      	bne.n	8003568 <__aeabi_fmul+0x14c>
 8003560:	024b      	lsls	r3, r1, #9
 8003562:	bf18      	it	ne
 8003564:	4608      	movne	r0, r1
 8003566:	d108      	bne.n	800357a <__aeabi_fmul+0x15e>
 8003568:	ea80 0001 	eor.w	r0, r0, r1
 800356c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8003570:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8003574:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003578:	4770      	bx	lr
 800357a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800357e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8003582:	4770      	bx	lr

08003584 <__aeabi_fdiv>:
 8003584:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003588:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800358c:	bf1e      	ittt	ne
 800358e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8003592:	ea92 0f0c 	teqne	r2, ip
 8003596:	ea93 0f0c 	teqne	r3, ip
 800359a:	d069      	beq.n	8003670 <__aeabi_fdiv+0xec>
 800359c:	eba2 0203 	sub.w	r2, r2, r3
 80035a0:	ea80 0c01 	eor.w	ip, r0, r1
 80035a4:	0249      	lsls	r1, r1, #9
 80035a6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80035aa:	d037      	beq.n	800361c <__aeabi_fdiv+0x98>
 80035ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80035b0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80035b4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80035b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80035bc:	428b      	cmp	r3, r1
 80035be:	bf38      	it	cc
 80035c0:	005b      	lslcc	r3, r3, #1
 80035c2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80035c6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80035ca:	428b      	cmp	r3, r1
 80035cc:	bf24      	itt	cs
 80035ce:	1a5b      	subcs	r3, r3, r1
 80035d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80035d4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80035d8:	bf24      	itt	cs
 80035da:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80035de:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80035e2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80035e6:	bf24      	itt	cs
 80035e8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80035ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80035f0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80035f4:	bf24      	itt	cs
 80035f6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80035fa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	bf18      	it	ne
 8003602:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8003606:	d1e0      	bne.n	80035ca <__aeabi_fdiv+0x46>
 8003608:	2afd      	cmp	r2, #253	; 0xfd
 800360a:	f63f af50 	bhi.w	80034ae <__aeabi_fmul+0x92>
 800360e:	428b      	cmp	r3, r1
 8003610:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8003614:	bf08      	it	eq
 8003616:	f020 0001 	biceq.w	r0, r0, #1
 800361a:	4770      	bx	lr
 800361c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8003620:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8003624:	327f      	adds	r2, #127	; 0x7f
 8003626:	bfc2      	ittt	gt
 8003628:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800362c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8003630:	4770      	bxgt	lr
 8003632:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	3a01      	subs	r2, #1
 800363c:	e737      	b.n	80034ae <__aeabi_fmul+0x92>
 800363e:	f092 0f00 	teq	r2, #0
 8003642:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8003646:	bf02      	ittt	eq
 8003648:	0040      	lsleq	r0, r0, #1
 800364a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800364e:	3a01      	subeq	r2, #1
 8003650:	d0f9      	beq.n	8003646 <__aeabi_fdiv+0xc2>
 8003652:	ea40 000c 	orr.w	r0, r0, ip
 8003656:	f093 0f00 	teq	r3, #0
 800365a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800365e:	bf02      	ittt	eq
 8003660:	0049      	lsleq	r1, r1, #1
 8003662:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8003666:	3b01      	subeq	r3, #1
 8003668:	d0f9      	beq.n	800365e <__aeabi_fdiv+0xda>
 800366a:	ea41 010c 	orr.w	r1, r1, ip
 800366e:	e795      	b.n	800359c <__aeabi_fdiv+0x18>
 8003670:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8003674:	ea92 0f0c 	teq	r2, ip
 8003678:	d108      	bne.n	800368c <__aeabi_fdiv+0x108>
 800367a:	0242      	lsls	r2, r0, #9
 800367c:	f47f af7d 	bne.w	800357a <__aeabi_fmul+0x15e>
 8003680:	ea93 0f0c 	teq	r3, ip
 8003684:	f47f af70 	bne.w	8003568 <__aeabi_fmul+0x14c>
 8003688:	4608      	mov	r0, r1
 800368a:	e776      	b.n	800357a <__aeabi_fmul+0x15e>
 800368c:	ea93 0f0c 	teq	r3, ip
 8003690:	d104      	bne.n	800369c <__aeabi_fdiv+0x118>
 8003692:	024b      	lsls	r3, r1, #9
 8003694:	f43f af4c 	beq.w	8003530 <__aeabi_fmul+0x114>
 8003698:	4608      	mov	r0, r1
 800369a:	e76e      	b.n	800357a <__aeabi_fmul+0x15e>
 800369c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80036a0:	bf18      	it	ne
 80036a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80036a6:	d1ca      	bne.n	800363e <__aeabi_fdiv+0xba>
 80036a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80036ac:	f47f af5c 	bne.w	8003568 <__aeabi_fmul+0x14c>
 80036b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80036b4:	f47f af3c 	bne.w	8003530 <__aeabi_fmul+0x114>
 80036b8:	e75f      	b.n	800357a <__aeabi_fmul+0x15e>
 80036ba:	bf00      	nop

080036bc <__aeabi_f2uiz>:
 80036bc:	0042      	lsls	r2, r0, #1
 80036be:	d20e      	bcs.n	80036de <__aeabi_f2uiz+0x22>
 80036c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80036c4:	d30b      	bcc.n	80036de <__aeabi_f2uiz+0x22>
 80036c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80036ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80036ce:	d409      	bmi.n	80036e4 <__aeabi_f2uiz+0x28>
 80036d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80036d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036d8:	fa23 f002 	lsr.w	r0, r3, r2
 80036dc:	4770      	bx	lr
 80036de:	f04f 0000 	mov.w	r0, #0
 80036e2:	4770      	bx	lr
 80036e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80036e8:	d101      	bne.n	80036ee <__aeabi_f2uiz+0x32>
 80036ea:	0242      	lsls	r2, r0, #9
 80036ec:	d102      	bne.n	80036f4 <__aeabi_f2uiz+0x38>
 80036ee:	f04f 30ff 	mov.w	r0, #4294967295
 80036f2:	4770      	bx	lr
 80036f4:	f04f 0000 	mov.w	r0, #0
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop

080036fc <main>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036fc:	4a4e      	ldr	r2, [pc, #312]	; (8003838 <main+0x13c>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036fe:	494f      	ldr	r1, [pc, #316]	; (800383c <main+0x140>)
 8003700:	6813      	ldr	r3, [r2, #0]
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003702:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003706:	f043 0310 	orr.w	r3, r3, #16
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	68ca      	ldr	r2, [r1, #12]
  reg_value  =  (reg_value                                   |
 800370e:	4b4c      	ldr	r3, [pc, #304]	; (8003840 <main+0x144>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003710:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003714:	0412      	lsls	r2, r2, #16
 8003716:	0c12      	lsrs	r2, r2, #16
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003718:	4d4a      	ldr	r5, [pc, #296]	; (8003844 <main+0x148>)
  reg_value  =  (reg_value                                   |
 800371a:	4313      	orrs	r3, r2
 800371c:	b09f      	sub	sp, #124	; 0x7c
  SCB->AIRCR =  reg_value;
 800371e:	60cb      	str	r3, [r1, #12]
  HAL_InitTick(TICK_INT_PRIORITY);
 8003720:	200f      	movs	r0, #15
 8003722:	f7fe f9b9 	bl	8001a98 <HAL_InitTick.isra.0>
 8003726:	69ab      	ldr	r3, [r5, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003728:	4a47      	ldr	r2, [pc, #284]	; (8003848 <main+0x14c>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	61ab      	str	r3, [r5, #24]
 8003730:	69ab      	ldr	r3, [r5, #24]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	930b      	str	r3, [sp, #44]	; 0x2c
 8003738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_PWR_CLK_ENABLE();
 800373a:	69eb      	ldr	r3, [r5, #28]
 800373c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003740:	61eb      	str	r3, [r5, #28]
 8003742:	69eb      	ldr	r3, [r5, #28]
 8003744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003748:	930a      	str	r3, [sp, #40]	; 0x28
 800374a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800374c:	6853      	ldr	r3, [r2, #4]
 800374e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003752:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003756:	6053      	str	r3, [r2, #4]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003758:	686b      	ldr	r3, [r5, #4]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b04      	cmp	r3, #4
 8003760:	d007      	beq.n	8003772 <main+0x76>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003762:	686b      	ldr	r3, [r5, #4]
 8003764:	f003 030c 	and.w	r3, r3, #12
 8003768:	2b08      	cmp	r3, #8
 800376a:	d137      	bne.n	80037dc <main+0xe0>
 800376c:	686b      	ldr	r3, [r5, #4]
 800376e:	03df      	lsls	r7, r3, #15
 8003770:	d534      	bpl.n	80037dc <main+0xe0>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003772:	682b      	ldr	r3, [r5, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003774:	686b      	ldr	r3, [r5, #4]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	2b08      	cmp	r3, #8
 800377c:	d047      	beq.n	800380e <main+0x112>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377e:	2200      	movs	r2, #0
 8003780:	4b32      	ldr	r3, [pc, #200]	; (800384c <main+0x150>)
 8003782:	661a      	str	r2, [r3, #96]	; 0x60
  return uwTick;
 8003784:	4a32      	ldr	r2, [pc, #200]	; (8003850 <main+0x154>)
 8003786:	6811      	ldr	r1, [r2, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003788:	682b      	ldr	r3, [r5, #0]
 800378a:	019c      	lsls	r4, r3, #6
 800378c:	d435      	bmi.n	80037fa <main+0xfe>

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800378e:	2101      	movs	r1, #1
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003790:	686b      	ldr	r3, [r5, #4]
 8003792:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003796:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003798:	686b      	ldr	r3, [r5, #4]
 800379a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800379e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80037a2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80037a4:	4b29      	ldr	r3, [pc, #164]	; (800384c <main+0x150>)
 80037a6:	6619      	str	r1, [r3, #96]	; 0x60
 80037a8:	6811      	ldr	r1, [r2, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037aa:	682b      	ldr	r3, [r5, #0]
 80037ac:	0198      	lsls	r0, r3, #6
 80037ae:	d529      	bpl.n	8003804 <main+0x108>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037b0:	4a21      	ldr	r2, [pc, #132]	; (8003838 <main+0x13c>)
 80037b2:	6813      	ldr	r3, [r2, #0]
 80037b4:	f013 0f06 	tst.w	r3, #6
 80037b8:	d032      	beq.n	8003820 <main+0x124>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037ba:	686b      	ldr	r3, [r5, #4]
 80037bc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037c0:	606b      	str	r3, [r5, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037c2:	686b      	ldr	r3, [r5, #4]
 80037c4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037c8:	606b      	str	r3, [r5, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ca:	686b      	ldr	r3, [r5, #4]
 80037cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037d0:	606b      	str	r3, [r5, #4]
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d2:	682b      	ldr	r3, [r5, #0]
 80037d4:	019a      	lsls	r2, r3, #6
 80037d6:	d43d      	bmi.n	8003854 <main+0x158>
  __ASM volatile ("cpsid i" : : : "memory");
 80037d8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80037da:	e7fe      	b.n	80037da <main+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037dc:	682b      	ldr	r3, [r5, #0]
 80037de:	4a1c      	ldr	r2, [pc, #112]	; (8003850 <main+0x154>)
 80037e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e4:	602b      	str	r3, [r5, #0]
 80037e6:	6811      	ldr	r1, [r2, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e8:	682b      	ldr	r3, [r5, #0]
 80037ea:	039e      	lsls	r6, r3, #14
 80037ec:	d4c2      	bmi.n	8003774 <main+0x78>
 80037ee:	6813      	ldr	r3, [r2, #0]
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f0:	1a5b      	subs	r3, r3, r1
 80037f2:	2b64      	cmp	r3, #100	; 0x64
 80037f4:	d9f8      	bls.n	80037e8 <main+0xec>
 80037f6:	b672      	cpsid	i
 80037f8:	e7fe      	b.n	80037f8 <main+0xfc>
 80037fa:	6813      	ldr	r3, [r2, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fc:	1a5b      	subs	r3, r3, r1
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d9c2      	bls.n	8003788 <main+0x8c>
 8003802:	e7f8      	b.n	80037f6 <main+0xfa>
 8003804:	6813      	ldr	r3, [r2, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003806:	1a5b      	subs	r3, r3, r1
 8003808:	2b02      	cmp	r3, #2
 800380a:	d9ce      	bls.n	80037aa <main+0xae>
 800380c:	e7f3      	b.n	80037f6 <main+0xfa>
        pll_config = RCC->CFGR;
 800380e:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003810:	03d9      	lsls	r1, r3, #15
 8003812:	d5f0      	bpl.n	80037f6 <main+0xfa>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003814:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003818:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800381c:	d1eb      	bne.n	80037f6 <main+0xfa>
 800381e:	e7c7      	b.n	80037b0 <main+0xb4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003820:	6813      	ldr	r3, [r2, #0]
 8003822:	f023 0307 	bic.w	r3, r3, #7
 8003826:	f043 0302 	orr.w	r3, r3, #2
 800382a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800382c:	6813      	ldr	r3, [r2, #0]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	2b02      	cmp	r3, #2
 8003834:	d1d0      	bne.n	80037d8 <main+0xdc>
 8003836:	e7c0      	b.n	80037ba <main+0xbe>
 8003838:	40022000 	.word	0x40022000
 800383c:	e000ed00 	.word	0xe000ed00
 8003840:	05fa0300 	.word	0x05fa0300
 8003844:	40021000 	.word	0x40021000
 8003848:	40010000 	.word	0x40010000
 800384c:	42420000 	.word	0x42420000
 8003850:	20000200 	.word	0x20000200
    /* Get Start Tick */
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003854:	f241 3188 	movw	r1, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003858:	686b      	ldr	r3, [r5, #4]
 800385a:	4cbc      	ldr	r4, [pc, #752]	; (8003b4c <main+0x450>)
 800385c:	f023 0303 	bic.w	r3, r3, #3
 8003860:	f043 0302 	orr.w	r3, r3, #2
 8003864:	606b      	str	r3, [r5, #4]
 8003866:	6822      	ldr	r2, [r4, #0]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003868:	686b      	ldr	r3, [r5, #4]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	2b08      	cmp	r3, #8
 8003870:	f040 8141 	bne.w	8003af6 <main+0x3fa>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003874:	4ab6      	ldr	r2, [pc, #728]	; (8003b50 <main+0x454>)
 8003876:	6813      	ldr	r3, [r2, #0]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	2b02      	cmp	r3, #2
 800387e:	f200 8140 	bhi.w	8003b02 <main+0x406>
{
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003882:	aa19      	add	r2, sp, #100	; 0x64
 8003884:	4690      	mov	r8, r2
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003886:	686b      	ldr	r3, [r5, #4]
 8003888:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800388c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003890:	606b      	str	r3, [r5, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003892:	686b      	ldr	r3, [r5, #4]
 8003894:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003898:	606b      	str	r3, [r5, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800389a:	4bae      	ldr	r3, [pc, #696]	; (8003b54 <main+0x458>)
 800389c:	f103 0710 	add.w	r7, r3, #16
 80038a0:	4616      	mov	r6, r2
 80038a2:	6818      	ldr	r0, [r3, #0]
 80038a4:	6859      	ldr	r1, [r3, #4]
 80038a6:	3308      	adds	r3, #8
 80038a8:	c603      	stmia	r6!, {r0, r1}
 80038aa:	42bb      	cmp	r3, r7
 80038ac:	4632      	mov	r2, r6
 80038ae:	d1f7      	bne.n	80038a0 <main+0x1a4>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038b0:	f240 2301 	movw	r3, #513	; 0x201
 80038b4:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
  uint32_t sysclockfreq = 0U;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038b8:	686b      	ldr	r3, [r5, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038ba:	f003 020c 	and.w	r2, r3, #12
 80038be:	2a08      	cmp	r2, #8
 80038c0:	f000 812c 	beq.w	8003b1c <main+0x420>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038c4:	4fa4      	ldr	r7, [pc, #656]	; (8003b58 <main+0x45c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c6:	2600      	movs	r6, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038c8:	686b      	ldr	r3, [r5, #4]
 80038ca:	f8df a290 	ldr.w	sl, [pc, #656]	; 8003b5c <main+0x460>
 80038ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80038d2:	f81a 3003 	ldrb.w	r3, [sl, r3]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038d6:	f04f 0901 	mov.w	r9, #1
 80038da:	40df      	lsrs	r7, r3
 80038dc:	4ba0      	ldr	r3, [pc, #640]	; (8003b60 <main+0x464>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038de:	f04f 0b03 	mov.w	fp, #3
  HAL_InitTick(uwTickPrio);
 80038e2:	6858      	ldr	r0, [r3, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038e4:	601f      	str	r7, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80038e6:	f7fe f8d7 	bl	8001a98 <HAL_InitTick.isra.0>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ea:	961b      	str	r6, [sp, #108]	; 0x6c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ec:	69ab      	ldr	r3, [r5, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038ee:	4a9d      	ldr	r2, [pc, #628]	; (8003b64 <main+0x468>)
 80038f0:	f043 0310 	orr.w	r3, r3, #16
 80038f4:	61ab      	str	r3, [r5, #24]
 80038f6:	69ab      	ldr	r3, [r5, #24]
 80038f8:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	9309      	str	r3, [sp, #36]	; 0x24
 8003902:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003904:	69ab      	ldr	r3, [r5, #24]
 8003906:	4998      	ldr	r1, [pc, #608]	; (8003b68 <main+0x46c>)
 8003908:	f043 0320 	orr.w	r3, r3, #32
 800390c:	61ab      	str	r3, [r5, #24]
 800390e:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003910:	4894      	ldr	r0, [pc, #592]	; (8003b64 <main+0x468>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	9308      	str	r3, [sp, #32]
 8003918:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800391a:	69ab      	ldr	r3, [r5, #24]
 800391c:	f043 0304 	orr.w	r3, r3, #4
 8003920:	61ab      	str	r3, [r5, #24]
 8003922:	69ab      	ldr	r3, [r5, #24]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	9307      	str	r3, [sp, #28]
 800392a:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800392c:	69ab      	ldr	r3, [r5, #24]
 800392e:	f043 0308 	orr.w	r3, r3, #8
 8003932:	61ab      	str	r3, [r5, #24]
 8003934:	69ab      	ldr	r3, [r5, #24]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	9306      	str	r3, [sp, #24]
 800393c:	9b06      	ldr	r3, [sp, #24]
 800393e:	4b8b      	ldr	r3, [pc, #556]	; (8003b6c <main+0x470>)
 8003940:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
 8003944:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8003948:	6113      	str	r3, [r2, #16]
 800394a:	4b89      	ldr	r3, [pc, #548]	; (8003b70 <main+0x474>)
 800394c:	6119      	str	r1, [r3, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800394e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003952:	e9cd 1919 	strd	r1, r9, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003956:	2102      	movs	r1, #2
 8003958:	911c      	str	r1, [sp, #112]	; 0x70
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800395a:	4641      	mov	r1, r8
 800395c:	f7fc fdc2 	bl	80004e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8003960:	f24c 0c3f 	movw	ip, #49215	; 0xc03f
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003964:	961b      	str	r6, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003966:	e9cd c919 	strd	ip, r9, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800396a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800396e:	f7fc fdb9 	bl	80004e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8003972:	20ff      	movs	r0, #255	; 0xff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003974:	4a7f      	ldr	r2, [pc, #508]	; (8003b74 <main+0x478>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003976:	e9cd 0919 	strd	r0, r9, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800397a:	4610      	mov	r0, r2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800397c:	e9cd 6b1b 	strd	r6, fp, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003980:	f7fc fdb0 	bl	80004e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8003984:	f640 4203 	movw	r2, #3075	; 0xc03
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003988:	4b79      	ldr	r3, [pc, #484]	; (8003b70 <main+0x474>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800398a:	e9cd 2919 	strd	r2, r9, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800398e:	4618      	mov	r0, r3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003990:	e9cd 6b1b 	strd	r6, fp, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003994:	f7fc fda6 	bl	80004e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 8003998:	2304      	movs	r3, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399a:	961b      	str	r6, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800399c:	e9cd 3619 	strd	r3, r6, [sp, #100]	; 0x64
  HAL_GPIO_Init(SYSTEM_RESERVED_GPIO_Port, &GPIO_InitStruct);
 80039a0:	f7fc fda0 	bl	80004e4 <HAL_GPIO_Init>
  hi2c1.Init.ClockSpeed = 100000;
 80039a4:	4b74      	ldr	r3, [pc, #464]	; (8003b78 <main+0x47c>)
 80039a6:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 8003b7c <main+0x480>
  hi2c1.Init.OwnAddress1 = 0;
 80039aa:	e9c4 6603 	strd	r6, r6, [r4, #12]
  hi2c1.Init.ClockSpeed = 100000;
 80039ae:	e9c4 c301 	strd	ip, r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039b6:	e9c4 3605 	strd	r3, r6, [r4, #20]
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039ba:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039be:	e9c4 6607 	strd	r6, r6, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039c2:	6266      	str	r6, [r4, #36]	; 0x24
 80039c4:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d16d      	bne.n	8003aa8 <main+0x3ac>
    hi2c->Lock = HAL_UNLOCKED;
 80039cc:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d0:	961b      	str	r6, [sp, #108]	; 0x6c
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039d2:	69ab      	ldr	r3, [r5, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039d4:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039d6:	f043 0308 	orr.w	r3, r3, #8
 80039da:	61ab      	str	r3, [r5, #24]
 80039dc:	69ab      	ldr	r3, [r5, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039de:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	930d      	str	r3, [sp, #52]	; 0x34
 80039e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039ea:	2312      	movs	r3, #18
 80039ec:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039f0:	f7fc fd78 	bl	80004e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039f4:	69eb      	ldr	r3, [r5, #28]
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039f6:	f04f 0e80 	mov.w	lr, #128	; 0x80
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039fe:	61eb      	str	r3, [r5, #28]
 8003a00:	69eb      	ldr	r3, [r5, #28]
  hdma->DmaBaseAddress = DMA1;
 8003a02:	2014      	movs	r0, #20
 8003a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a08:	930c      	str	r3, [sp, #48]	; 0x30
 8003a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a0c:	2310      	movs	r3, #16
 8003a0e:	495c      	ldr	r1, [pc, #368]	; (8003b80 <main+0x484>)
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a10:	e9c4 e64f 	strd	lr, r6, [r4, #316]	; 0x13c
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a14:	e9c4 134c 	strd	r1, r3, [r4, #304]	; 0x130
 8003a18:	4b5a      	ldr	r3, [pc, #360]	; (8003b84 <main+0x488>)
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003a1a:	e9c4 6651 	strd	r6, r6, [r4, #324]	; 0x144
 8003a1e:	e9c4 305b 	strd	r3, r0, [r4, #364]	; 0x16c
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a22:	f8c4 6138 	str.w	r6, [r4, #312]	; 0x138
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a26:	f8c4 614c 	str.w	r6, [r4, #332]	; 0x14c
  tmp = hdma->Instance->CCR;
 8003a2a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a2c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8003b88 <main+0x48c>
  hdma->Lock = HAL_UNLOCKED;
 8003a30:	f44f 7080 	mov.w	r0, #256	; 0x100
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a34:	ea02 020c 	and.w	r2, r2, ip
  tmp |=  hdma->Init.Direction        |
 8003a38:	f042 0290 	orr.w	r2, r2, #144	; 0x90
  hdma->Instance->CCR = tmp;
 8003a3c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a3e:	e9c4 6e5f 	strd	r6, lr, [r4, #380]	; 0x17c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a42:	f04f 0e18 	mov.w	lr, #24
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8003a46:	f8df b144 	ldr.w	fp, [pc, #324]	; 8003b8c <main+0x490>
  hdma->DmaBaseAddress = DMA1;
 8003a4a:	e9c4 3e6c 	strd	r3, lr, [r4, #432]	; 0x1b0
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a4e:	e9c4 b65d 	strd	fp, r6, [r4, #372]	; 0x174
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a52:	e9c4 6661 	strd	r6, r6, [r4, #388]	; 0x184
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a56:	e9c4 6663 	strd	r6, r6, [r4, #396]	; 0x18c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a5a:	f8c4 6168 	str.w	r6, [r4, #360]	; 0x168
  hdma->Lock = HAL_UNLOCKED;
 8003a5e:	f8a4 0150 	strh.w	r0, [r4, #336]	; 0x150
  tmp = hdma->Instance->CCR;
 8003a62:	f8d3 e080 	ldr.w	lr, [r3, #128]	; 0x80
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003a66:	4a4a      	ldr	r2, [pc, #296]	; (8003b90 <main+0x494>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a68:	ea0e 0c0c 	and.w	ip, lr, ip
 8003a6c:	f5a2 7196 	sub.w	r1, r2, #300	; 0x12c
  tmp |=  hdma->Init.Direction        |
 8003a70:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8003a74:	63a2      	str	r2, [r4, #56]	; 0x38
 8003a76:	f8c4 1154 	str.w	r1, [r4, #340]	; 0x154
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003a7a:	3244      	adds	r2, #68	; 0x44
  hdma->Instance->CCR = tmp;
 8003a7c:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
  hdma->Lock = HAL_UNLOCKED;
 8003a80:	f8a4 0194 	strh.w	r0, [r4, #404]	; 0x194
 8003a84:	f8c4 1198 	str.w	r1, [r4, #408]	; 0x198

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003a88:	201f      	movs	r0, #31
 8003a8a:	4631      	mov	r1, r6
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a8c:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003a90:	63e2      	str	r2, [r4, #60]	; 0x3c
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003a92:	f7fc fffd 	bl	8000a90 <HAL_NVIC_SetPriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a9a:	4e3e      	ldr	r6, [pc, #248]	; (8003b94 <main+0x498>)
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003a9c:	2020      	movs	r0, #32
 8003a9e:	6033      	str	r3, [r6, #0]
 8003aa0:	f7fc fff6 	bl	8000a90 <HAL_NVIC_SetPriority.constprop.0>
 8003aa4:	f8c6 9004 	str.w	r9, [r6, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa8:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003aaa:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003ab0:	6813      	ldr	r3, [r2, #0]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ab2:	4931      	ldr	r1, [pc, #196]	; (8003b78 <main+0x47c>)
  __HAL_I2C_DISABLE(hi2c);
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003aba:	6813      	ldr	r3, [r2, #0]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003abc:	f8d4 c008 	ldr.w	ip, [r4, #8]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ac4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ac6:	6813      	ldr	r3, [r2, #0]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ac8:	458c      	cmp	ip, r1
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003aca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ace:	6013      	str	r3, [r2, #0]
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ad0:	686b      	ldr	r3, [r5, #4]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ad2:	bf98      	it	ls
 8003ad4:	4930      	ldrls	r1, [pc, #192]	; (8003b98 <main+0x49c>)
 8003ad6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003ada:	4453      	add	r3, sl
 8003adc:	7c1b      	ldrb	r3, [r3, #16]
 8003ade:	bf88      	it	hi
 8003ae0:	492e      	ldrhi	r1, [pc, #184]	; (8003b9c <main+0x4a0>)
 8003ae2:	fa27 f303 	lsr.w	r3, r7, r3
 8003ae6:	428b      	cmp	r3, r1
 8003ae8:	bf8c      	ite	hi
 8003aea:	2100      	movhi	r1, #0
 8003aec:	2101      	movls	r1, #1
 8003aee:	2900      	cmp	r1, #0
 8003af0:	d058      	beq.n	8003ba4 <main+0x4a8>
 8003af2:	b672      	cpsid	i
	while (1)
 8003af4:	e7fe      	b.n	8003af4 <main+0x3f8>
 8003af6:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	428b      	cmp	r3, r1
 8003afc:	f67f aeb4 	bls.w	8003868 <main+0x16c>
 8003b00:	e66a      	b.n	80037d8 <main+0xdc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b02:	6813      	ldr	r3, [r2, #0]
 8003b04:	f023 0307 	bic.w	r3, r3, #7
 8003b08:	f043 0302 	orr.w	r3, r3, #2
 8003b0c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0e:	6813      	ldr	r3, [r2, #0]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	f47f ae5f 	bne.w	80037d8 <main+0xdc>
 8003b1a:	e6b2      	b.n	8003882 <main+0x186>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b1c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003b20:	3278      	adds	r2, #120	; 0x78
 8003b22:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b24:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b26:	f812 7c14 	ldrb.w	r7, [r2, #-20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b2a:	d50b      	bpl.n	8003b44 <main+0x448>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b2c:	686b      	ldr	r3, [r5, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b2e:	4a0a      	ldr	r2, [pc, #40]	; (8003b58 <main+0x45c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b30:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b34:	4357      	muls	r7, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b36:	3378      	adds	r3, #120	; 0x78
 8003b38:	446b      	add	r3, sp
 8003b3a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b3e:	fbb7 f7f3 	udiv	r7, r7, r3
 8003b42:	e6c0      	b.n	80038c6 <main+0x1ca>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b44:	4b16      	ldr	r3, [pc, #88]	; (8003ba0 <main+0x4a4>)
 8003b46:	435f      	muls	r7, r3
 8003b48:	e6bd      	b.n	80038c6 <main+0x1ca>
 8003b4a:	bf00      	nop
 8003b4c:	20000200 	.word	0x20000200
 8003b50:	40022000 	.word	0x40022000
 8003b54:	0801b5be 	.word	0x0801b5be
 8003b58:	007a1200 	.word	0x007a1200
 8003b5c:	08009d70 	.word	0x08009d70
 8003b60:	20000000 	.word	0x20000000
 8003b64:	40011000 	.word	0x40011000
 8003b68:	0c030000 	.word	0x0c030000
 8003b6c:	e03f0000 	.word	0xe03f0000
 8003b70:	40010c00 	.word	0x40010c00
 8003b74:	40010800 	.word	0x40010800
 8003b78:	000186a0 	.word	0x000186a0
 8003b7c:	40005400 	.word	0x40005400
 8003b80:	4002006c 	.word	0x4002006c
 8003b84:	40020000 	.word	0x40020000
 8003b88:	ffffc00f 	.word	0xffffc00f
 8003b8c:	40020080 	.word	0x40020080
 8003b90:	20000330 	.word	0x20000330
 8003b94:	e000e100 	.word	0xe000e100
 8003b98:	001e847f 	.word	0x001e847f
 8003b9c:	003d08ff 	.word	0x003d08ff
 8003ba0:	003d0900 	.word	0x003d0900
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ba4:	4ecb      	ldr	r6, [pc, #812]	; (8003ed4 <main+0x7d8>)
  freqrange = I2C_FREQRANGE(pclk1);
 8003ba6:	49cc      	ldr	r1, [pc, #816]	; (8003ed8 <main+0x7dc>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ba8:	45b4      	cmp	ip, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8003baa:	fbb3 f1f1 	udiv	r1, r3, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bae:	bf88      	it	hi
 8003bb0:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bb4:	6850      	ldr	r0, [r2, #4]
 8003bb6:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8003bba:	ea40 0001 	orr.w	r0, r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bbe:	bf82      	ittt	hi
 8003bc0:	4371      	mulhi	r1, r6
 8003bc2:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8003bc6:	fbb1 f1f6 	udivhi	r1, r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bca:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bcc:	6a10      	ldr	r0, [r2, #32]
 8003bce:	3101      	adds	r1, #1
 8003bd0:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8003bd4:	4301      	orrs	r1, r0
 8003bd6:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bd8:	69d1      	ldr	r1, [r2, #28]
 8003bda:	1e5e      	subs	r6, r3, #1
 8003bdc:	4bbd      	ldr	r3, [pc, #756]	; (8003ed4 <main+0x7d8>)
 8003bde:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003be2:	459c      	cmp	ip, r3
 8003be4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003be8:	f200 81de 	bhi.w	8003fa8 <main+0x8ac>
 8003bec:	ea4f 034c 	mov.w	r3, ip, lsl #1
 8003bf0:	fbb6 f3f3 	udiv	r3, r6, r3
 8003bf4:	f640 70fc 	movw	r0, #4092	; 0xffc
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	4203      	tst	r3, r0
 8003bfc:	f000 81fb 	beq.w	8003ff6 <main+0x8fa>
 8003c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c04:	430b      	orrs	r3, r1
 8003c06:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c08:	6811      	ldr	r1, [r2, #0]
 8003c0a:	e9d4 3008 	ldrd	r3, r0, [r4, #32]
 8003c0e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8003c12:	4303      	orrs	r3, r0
 8003c14:	430b      	orrs	r3, r1
 8003c16:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c18:	6891      	ldr	r1, [r2, #8]
 8003c1a:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
 8003c1e:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8003c22:	4303      	orrs	r3, r0
 8003c24:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c2c:	68d1      	ldr	r1, [r2, #12]
 8003c2e:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8003c32:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003c36:	4303      	orrs	r3, r0
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003c3c:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c3e:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003c46:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c48:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c4e:	6361      	str	r1, [r4, #52]	; 0x34
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c50:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c54:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003c56:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	616b      	str	r3, [r5, #20]
 8003c5e:	696b      	ldr	r3, [r5, #20]
 8003c60:	4e9e      	ldr	r6, [pc, #632]	; (8003edc <main+0x7e0>)
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	9305      	str	r3, [sp, #20]
 8003c68:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003c6a:	f7fc ff11 	bl	8000a90 <HAL_NVIC_SetPriority.constprop.0>
 8003c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003c72:	200e      	movs	r0, #14
 8003c74:	6033      	str	r3, [r6, #0]
 8003c76:	f7fc ff0b 	bl	8000a90 <HAL_NVIC_SetPriority.constprop.0>
 8003c7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003c7e:	200f      	movs	r0, #15
 8003c80:	6033      	str	r3, [r6, #0]
 8003c82:	f7fc ff05 	bl	8000a90 <HAL_NVIC_SetPriority.constprop.0>
 8003c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8003c8a:	2010      	movs	r0, #16
 8003c8c:	6033      	str	r3, [r6, #0]
 8003c8e:	f7fc feff 	bl	8000a90 <HAL_NVIC_SetPriority.constprop.0>
 8003c92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8003c96:	2011      	movs	r0, #17
 8003c98:	6033      	str	r3, [r6, #0]
 8003c9a:	f7fc fef9 	bl	8000a90 <HAL_NVIC_SetPriority.constprop.0>
 8003c9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ca2:	6033      	str	r3, [r6, #0]
  huart1.Init.BaudRate = 115200;
 8003ca4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ca8:	f04f 0b0c 	mov.w	fp, #12
  huart1.Init.BaudRate = 115200;
 8003cac:	f8df e230 	ldr.w	lr, [pc, #560]	; 8003ee0 <main+0x7e4>
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003cb0:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
  huart1.Init.BaudRate = 115200;
 8003cb4:	e9c4 e316 	strd	lr, r3, [r4, #88]	; 0x58
  if (huart->gState == HAL_UART_STATE_RESET)
 8003cb8:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cbc:	e9c4 b11b 	strd	fp, r1, [r4, #108]	; 0x6c
  huart1.Init.Parity = UART_PARITY_NONE;
 8003cc0:	66a1      	str	r1, [r4, #104]	; 0x68
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cc2:	6761      	str	r1, [r4, #116]	; 0x74
 8003cc4:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d16c      	bne.n	8003da6 <main+0x6aa>
    huart->Lock = HAL_UNLOCKED;
 8003ccc:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd0:	961b      	str	r6, [sp, #108]	; 0x6c
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003cd2:	69ab      	ldr	r3, [r5, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd4:	f44f 7c00 	mov.w	ip, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8003cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cdc:	61ab      	str	r3, [r5, #24]
 8003cde:	69ab      	ldr	r3, [r5, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce0:	4641      	mov	r1, r8
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce6:	930f      	str	r3, [sp, #60]	; 0x3c
 8003ce8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cea:	69ab      	ldr	r3, [r5, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cec:	487d      	ldr	r0, [pc, #500]	; (8003ee4 <main+0x7e8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cee:	f043 0304 	orr.w	r3, r3, #4
 8003cf2:	61ab      	str	r3, [r5, #24]
 8003cf4:	69ab      	ldr	r3, [r5, #24]
    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003cf6:	f04f 0980 	mov.w	r9, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	930e      	str	r3, [sp, #56]	; 0x38
 8003d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d02:	2302      	movs	r3, #2
 8003d04:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	931c      	str	r3, [sp, #112]	; 0x70
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d0c:	f7fc fbea 	bl	80004e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d14:	961b      	str	r6, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d16:	e9cd 3619 	strd	r3, r6, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d1a:	f7fc fbe3 	bl	80004e4 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d1e:	f04f 0e10 	mov.w	lr, #16
  hdma->Lock = HAL_UNLOCKED;
 8003d22:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003d26:	4b70      	ldr	r3, [pc, #448]	; (8003ee8 <main+0x7ec>)
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d28:	e9c4 9671 	strd	r9, r6, [r4, #452]	; 0x1c4
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d2c:	e9c4 3e6e 	strd	r3, lr, [r4, #440]	; 0x1b8
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003d30:	e9c4 6673 	strd	r6, r6, [r4, #460]	; 0x1cc
  hdma->DmaBaseAddress = DMA1;
 8003d34:	3b44      	subs	r3, #68	; 0x44
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d36:	f8c4 b1f8 	str.w	fp, [r4, #504]	; 0x1f8
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d3a:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d3e:	f8c4 61d4 	str.w	r6, [r4, #468]	; 0x1d4
  tmp = hdma->Instance->CCR;
 8003d42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d44:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8003eec <main+0x7f0>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003d48:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 8003ef0 <main+0x7f4>
 8003d4c:	ea02 020c 	and.w	r2, r2, ip
  tmp |=  hdma->Init.Direction        |
 8003d50:	f042 0290 	orr.w	r2, r2, #144	; 0x90
  hdma->DmaBaseAddress = DMA1;
 8003d54:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  hdma->Instance->CCR = tmp;
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d5a:	e9c4 b67f 	strd	fp, r6, [r4, #508]	; 0x1fc
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d5e:	e9c4 6981 	strd	r6, r9, [r4, #516]	; 0x204
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d62:	e9c4 6683 	strd	r6, r6, [r4, #524]	; 0x20c
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d66:	e9c4 6685 	strd	r6, r6, [r4, #532]	; 0x214
  hdma->DmaBaseAddress = DMA1;
 8003d6a:	e9c4 3e8e 	strd	r3, lr, [r4, #568]	; 0x238
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d6e:	f8c4 61f0 	str.w	r6, [r4, #496]	; 0x1f0
  hdma->Lock = HAL_UNLOCKED;
 8003d72:	f8a4 01d8 	strh.w	r0, [r4, #472]	; 0x1d8
  tmp = hdma->Instance->CCR;
 8003d76:	f8d3 e058 	ldr.w	lr, [r3, #88]	; 0x58
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003d7a:	4a5e      	ldr	r2, [pc, #376]	; (8003ef4 <main+0x7f8>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d7c:	ea0e 0c0c 	and.w	ip, lr, ip
 8003d80:	f5a2 71b0 	sub.w	r1, r2, #352	; 0x160
 8003d84:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  tmp |=  hdma->Init.Direction        |
 8003d88:	ea4c 0c09 	orr.w	ip, ip, r9
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003d8c:	3244      	adds	r2, #68	; 0x44
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003d8e:	f8c4 11dc 	str.w	r1, [r4, #476]	; 0x1dc
  hdma->Instance->CCR = tmp;
 8003d92:	f8c3 c058 	str.w	ip, [r3, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d96:	f8c4 6234 	str.w	r6, [r4, #564]	; 0x234
  hdma->Lock = HAL_UNLOCKED;
 8003d9a:	f8a4 021c 	strh.w	r0, [r4, #540]	; 0x21c
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003d9e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8003da2:	f8c4 1220 	str.w	r1, [r4, #544]	; 0x220
  huart->gState = HAL_UART_STATE_BUSY;
 8003da6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003da8:	6da2      	ldr	r2, [r4, #88]	; 0x58
  huart->gState = HAL_UART_STATE_BUSY;
 8003daa:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  __HAL_UART_DISABLE(huart);
 8003dae:	68d3      	ldr	r3, [r2, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003db0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8003db2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003db6:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003db8:	6913      	ldr	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dba:	6ea0      	ldr	r0, [r4, #104]	; 0x68
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dbc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dc4:	6e23      	ldr	r3, [r4, #96]	; 0x60
  MODIFY_REG(huart->Instance->CR1,
 8003dc6:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dc8:	4303      	orrs	r3, r0
 8003dca:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  MODIFY_REG(huart->Instance->CR1,
 8003dcc:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dd0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003dd2:	f021 010c 	bic.w	r1, r1, #12
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dda:	6953      	ldr	r3, [r2, #20]
 8003ddc:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de2:	430b      	orrs	r3, r1
 8003de4:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8003de6:	4b3e      	ldr	r3, [pc, #248]	; (8003ee0 <main+0x7e4>)
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003de8:	2164      	movs	r1, #100	; 0x64
  if(huart->Instance == USART1)
 8003dea:	429a      	cmp	r2, r3
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dec:	686b      	ldr	r3, [r5, #4]
 8003dee:	bf0c      	ite	eq
 8003df0:	f3c3 23c2 	ubfxeq	r3, r3, #11, #3
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003df4:	f3c3 2302 	ubfxne	r3, r3, #8, #3
 8003df8:	449a      	add	sl, r3
 8003dfa:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8003dfe:	40df      	lsrs	r7, r3
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e00:	2319      	movs	r3, #25
 8003e02:	435f      	muls	r7, r3
 8003e04:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	fbb7 f7f3 	udiv	r7, r7, r3
 8003e0c:	fbb7 f0f1 	udiv	r0, r7, r1
 8003e10:	fb01 7310 	mls	r3, r1, r0, r7
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	3332      	adds	r3, #50	; 0x32
 8003e18:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e1c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8003e20:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e22:	6913      	ldr	r3, [r2, #16]
 8003e24:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003e28:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e2a:	6953      	ldr	r3, [r2, #20]
 8003e2c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003e30:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003e32:	68d3      	ldr	r3, [r2, #12]
 8003e34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e38:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003e3c:	2220      	movs	r2, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  huart->gState = HAL_UART_STATE_READY;
 8003e42:	f884 2095 	strb.w	r2, [r4, #149]	; 0x95
  huart->RxState = HAL_UART_STATE_READY;
 8003e46:	f884 2096 	strb.w	r2, [r4, #150]	; 0x96
  htim1.Instance = TIM1;
 8003e4a:	4a2b      	ldr	r2, [pc, #172]	; (8003ef8 <main+0x7fc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e4c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  htim1.Init.Prescaler = 0;
 8003e50:	e9c4 2327 	strd	r2, r3, [r4, #156]	; 0x9c
  htim1.Init.Period = 65535;
 8003e54:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e58:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e5c:	e9c4 332c 	strd	r3, r3, [r4, #176]	; 0xb0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003e60:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
 8003e64:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d14d      	bne.n	8003f08 <main+0x80c>
    htim->Lock = HAL_UNLOCKED;
 8003e6c:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e70:	69ab      	ldr	r3, [r5, #24]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e72:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e7a:	61ab      	str	r3, [r5, #24]
 8003e7c:	69ab      	ldr	r3, [r5, #24]
  hdma->DmaBaseAddress = DMA1;
 8003e7e:	491f      	ldr	r1, [pc, #124]	; (8003efc <main+0x800>)
 8003e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e84:	9310      	str	r3, [sp, #64]	; 0x40
 8003e86:	9b10      	ldr	r3, [sp, #64]	; 0x40
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8003e88:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <main+0x804>)
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e8a:	f8c4 2248 	str.w	r2, [r4, #584]	; 0x248
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e8e:	e9c4 3290 	strd	r3, r2, [r4, #576]	; 0x240
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e92:	2380      	movs	r3, #128	; 0x80
 8003e94:	e9c4 3093 	strd	r3, r0, [r4, #588]	; 0x24c
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8003e9c:	e9c4 3295 	strd	r3, r2, [r4, #596]	; 0x254
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	e9c4 139f 	strd	r1, r3, [r4, #636]	; 0x27c
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003ea6:	f8c4 225c 	str.w	r2, [r4, #604]	; 0x25c
  tmp = hdma->Instance->CCR;
 8003eaa:	69cb      	ldr	r3, [r1, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003eac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003eb0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8003eb4:	f443 63b0 	orr.w	r3, r3, #1408	; 0x580
  hdma->Instance->CCR = tmp;
 8003eb8:	61cb      	str	r3, [r1, #28]
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003eba:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <main+0x808>)
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ebc:	f8c4 2278 	str.w	r2, [r4, #632]	; 0x278
 8003ec0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8003ec4:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
  hdma->Lock = HAL_UNLOCKED;
 8003ec8:	f8a4 0260 	strh.w	r0, [r4, #608]	; 0x260
 8003ecc:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
 8003ed0:	e01a      	b.n	8003f08 <main+0x80c>
 8003ed2:	bf00      	nop
 8003ed4:	000186a0 	.word	0x000186a0
 8003ed8:	000f4240 	.word	0x000f4240
 8003edc:	e000e100 	.word	0xe000e100
 8003ee0:	40013800 	.word	0x40013800
 8003ee4:	40010800 	.word	0x40010800
 8003ee8:	40020044 	.word	0x40020044
 8003eec:	ffffc00f 	.word	0xffffc00f
 8003ef0:	40020058 	.word	0x40020058
 8003ef4:	200003b8 	.word	0x200003b8
 8003ef8:	40012c00 	.word	0x40012c00
 8003efc:	40020000 	.word	0x40020000
 8003f00:	4002001c 	.word	0x4002001c
 8003f04:	20000440 	.word	0x20000440
  htim->State = HAL_TIM_STATE_BUSY;
 8003f08:	f04f 0902 	mov.w	r9, #2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f0c:	2601      	movs	r6, #1
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f0e:	4f3d      	ldr	r7, [pc, #244]	; (8004004 <main+0x908>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003f10:	f884 90d9 	strb.w	r9, [r4, #217]	; 0xd9
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f14:	4638      	mov	r0, r7
 8003f16:	f7fc fd79 	bl	8000a0c <TIM_Base_SetConfig.constprop.0>
  __HAL_LOCK(htim);
 8003f1a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f1e:	f884 60e2 	strb.w	r6, [r4, #226]	; 0xe2
  __HAL_LOCK(htim);
 8003f22:	42b3      	cmp	r3, r6
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f24:	f884 60da 	strb.w	r6, [r4, #218]	; 0xda
 8003f28:	f884 60db 	strb.w	r6, [r4, #219]	; 0xdb
 8003f2c:	f884 60dc 	strb.w	r6, [r4, #220]	; 0xdc
 8003f30:	f884 60dd 	strb.w	r6, [r4, #221]	; 0xdd
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f34:	f884 60de 	strb.w	r6, [r4, #222]	; 0xde
 8003f38:	f884 60df 	strb.w	r6, [r4, #223]	; 0xdf
 8003f3c:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
 8003f40:	f884 60e1 	strb.w	r6, [r4, #225]	; 0xe1
  htim->State = HAL_TIM_STATE_READY;
 8003f44:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
  __HAL_LOCK(htim);
 8003f48:	d059      	beq.n	8003ffe <main+0x902>
  tmpsmcr = htim->Instance->SMCR;
 8003f4a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
  htim->State = HAL_TIM_STATE_BUSY;
 8003f4e:	f884 90d9 	strb.w	r9, [r4, #217]	; 0xd9
  tmpsmcr = htim->Instance->SMCR;
 8003f52:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f58:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003f5c:	6083      	str	r3, [r0, #8]
  __HAL_UNLOCK(htim);
 8003f5e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003f60:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
  __HAL_UNLOCK(htim);
 8003f64:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f68:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
  htim->State = HAL_TIM_STATE_BUSY;
 8003f6c:	f884 90d9 	strb.w	r9, [r4, #217]	; 0xd9
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f70:	f7fc fd4c 	bl	8000a0c <TIM_Base_SetConfig.constprop.0>
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f74:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f78:	f884 60e2 	strb.w	r6, [r4, #226]	; 0xe2
 8003f7c:	42b3      	cmp	r3, r6
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f7e:	f884 60da 	strb.w	r6, [r4, #218]	; 0xda
 8003f82:	f884 60db 	strb.w	r6, [r4, #219]	; 0xdb
 8003f86:	f884 60dc 	strb.w	r6, [r4, #220]	; 0xdc
 8003f8a:	f884 60dd 	strb.w	r6, [r4, #221]	; 0xdd
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f8e:	f884 60de 	strb.w	r6, [r4, #222]	; 0xde
 8003f92:	f884 60df 	strb.w	r6, [r4, #223]	; 0xdf
 8003f96:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
 8003f9a:	f884 60e1 	strb.w	r6, [r4, #225]	; 0xe1
  htim->State = HAL_TIM_STATE_READY;
 8003f9e:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
 8003fa2:	d131      	bne.n	8004008 <main+0x90c>
 8003fa4:	b672      	cpsid	i
	while (1)
 8003fa6:	e7fe      	b.n	8003fa6 <main+0x8aa>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fa8:	68e3      	ldr	r3, [r4, #12]
 8003faa:	b9ab      	cbnz	r3, 8003fd8 <main+0x8dc>
 8003fac:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
 8003fb0:	fbb6 f0f0 	udiv	r0, r6, r0
 8003fb4:	0500      	lsls	r0, r0, #20
 8003fb6:	f510 1f80 	cmn.w	r0, #1048576	; 0x100000
 8003fba:	bf14      	ite	ne
 8003fbc:	2000      	movne	r0, #0
 8003fbe:	2001      	moveq	r0, #1
 8003fc0:	b9d8      	cbnz	r0, 8003ffa <main+0x8fe>
 8003fc2:	b96b      	cbnz	r3, 8003fe0 <main+0x8e4>
 8003fc4:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 8003fc8:	fbb6 f3f3 	udiv	r3, r6, r3
 8003fcc:	3301      	adds	r3, #1
 8003fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fd6:	e615      	b.n	8003c04 <main+0x508>
 8003fd8:	2019      	movs	r0, #25
 8003fda:	fb00 f00c 	mul.w	r0, r0, ip
 8003fde:	e7e7      	b.n	8003fb0 <main+0x8b4>
 8003fe0:	2319      	movs	r3, #25
 8003fe2:	fb03 f30c 	mul.w	r3, r3, ip
 8003fe6:	fbb6 f3f3 	udiv	r3, r6, r3
 8003fea:	3301      	adds	r3, #1
 8003fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ff4:	e606      	b.n	8003c04 <main+0x508>
 8003ff6:	2304      	movs	r3, #4
 8003ff8:	e604      	b.n	8003c04 <main+0x508>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e602      	b.n	8003c04 <main+0x508>
 8003ffe:	b672      	cpsid	i
 8004000:	e7fe      	b.n	8004000 <main+0x904>
 8004002:	bf00      	nop
 8004004:	40012c00 	.word	0x40012c00

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004008:	f8d4 609c 	ldr.w	r6, [r4, #156]	; 0x9c
  htim->State = HAL_TIM_STATE_BUSY;
 800400c:	f884 90d9 	strb.w	r9, [r4, #217]	; 0xd9
  tmpcr2 = htim->Instance->CR2;
 8004010:	6872      	ldr	r2, [r6, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004012:	42be      	cmp	r6, r7
  tmpcr2 &= ~TIM_CR2_MMS;
 8004014:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr = htim->Instance->SMCR;
 8004018:	68b3      	ldr	r3, [r6, #8]
  htim->Instance->CR2 = tmpcr2;
 800401a:	6072      	str	r2, [r6, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800401c:	d009      	beq.n	8004032 <main+0x936>
 800401e:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8004022:	d006      	beq.n	8004032 <main+0x936>
 8004024:	4ad6      	ldr	r2, [pc, #856]	; (8004380 <main+0xc84>)
 8004026:	4296      	cmp	r6, r2
 8004028:	d003      	beq.n	8004032 <main+0x936>
 800402a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800402e:	4296      	cmp	r6, r2
 8004030:	d102      	bne.n	8004038 <main+0x93c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004036:	60b3      	str	r3, [r6, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004038:	2301      	movs	r3, #1
 800403a:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800403e:	6a33      	ldr	r3, [r6, #32]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004040:	48d0      	ldr	r0, [pc, #832]	; (8004384 <main+0xc88>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004042:	f023 0301 	bic.w	r3, r3, #1
 8004046:	6233      	str	r3, [r6, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004048:	4286      	cmp	r6, r0
  tmpccer = TIMx->CCER;
 800404a:	6a33      	ldr	r3, [r6, #32]
  tmpcr2 =  TIMx->CR2;
 800404c:	6871      	ldr	r1, [r6, #4]
  tmpccmrx = TIMx->CCMR1;
 800404e:	69b2      	ldr	r2, [r6, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004050:	f000 8474 	beq.w	800493c <main+0x1240>
  tmpccer &= ~TIM_CCER_CC1P;
 8004054:	f023 0302 	bic.w	r3, r3, #2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004058:	6071      	str	r1, [r6, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800405a:	2100      	movs	r1, #0
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800405c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004060:	f042 0260 	orr.w	r2, r2, #96	; 0x60
  TIMx->CCMR1 = tmpccmrx;
 8004064:	61b2      	str	r2, [r6, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004066:	6371      	str	r1, [r6, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004068:	6233      	str	r3, [r6, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800406a:	69b3      	ldr	r3, [r6, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800406c:	2210      	movs	r2, #16
 800406e:	f043 0308 	orr.w	r3, r3, #8
 8004072:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004074:	69b3      	ldr	r3, [r6, #24]
 8004076:	4640      	mov	r0, r8
 8004078:	f023 0304 	bic.w	r3, r3, #4
 800407c:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800407e:	69b3      	ldr	r3, [r6, #24]
 8004080:	61b3      	str	r3, [r6, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004082:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004086:	6473      	str	r3, [r6, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004088:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
 800408c:	f001 f990 	bl	80053b0 <memset>
  if(htim->Instance==TIM1)
 8004090:	4bbc      	ldr	r3, [pc, #752]	; (8004384 <main+0xc88>)
 8004092:	429e      	cmp	r6, r3
 8004094:	d112      	bne.n	80040bc <main+0x9c0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004096:	69ab      	ldr	r3, [r5, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004098:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800409c:	f043 0304 	orr.w	r3, r3, #4
 80040a0:	61ab      	str	r3, [r5, #24]
 80040a2:	69ab      	ldr	r3, [r5, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a4:	4641      	mov	r1, r8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	9311      	str	r3, [sp, #68]	; 0x44
 80040ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ae:	2302      	movs	r3, #2
 80040b0:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b4:	48b4      	ldr	r0, [pc, #720]	; (8004388 <main+0xc8c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b6:	931c      	str	r3, [sp, #112]	; 0x70
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b8:	f7fc fa14 	bl	80004e4 <HAL_GPIO_Init>
 80040bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040c0:	4db2      	ldr	r5, [pc, #712]	; (800438c <main+0xc90>)

void LCD_Init(void)
{	
	LCD_RST_R
	HAL_Delay(200);
 80040c2:	20c8      	movs	r0, #200	; 0xc8
 80040c4:	612b      	str	r3, [r5, #16]
 80040c6:	f7fc f92b 	bl	8000320 <HAL_Delay>
    GPIOx->BSRR = GPIO_Pin;
 80040ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
	LCD_RST_S
	
  LCD_Send_Cmd(HX8357_SLPOUT);
 80040ce:	2011      	movs	r0, #17
 80040d0:	612b      	str	r3, [r5, #16]
 80040d2:	f7fc f8a7 	bl	8000224 <LCD_Send_Cmd>
  HAL_Delay(120);
 80040d6:	2078      	movs	r0, #120	; 0x78
 80040d8:	f7fc f922 	bl	8000320 <HAL_Delay>
	LCD_Send_Cmd(HX8357_COLMOD);
 80040dc:	203a      	movs	r0, #58	; 0x3a
 80040de:	f7fc f8a1 	bl	8000224 <LCD_Send_Cmd>
	LCD_Send_Dat(0x55);
 80040e2:	2055      	movs	r0, #85	; 0x55
 80040e4:	f7fc f8b4 	bl	8000250 <LCD_Send_Dat>
  HAL_Delay(5);
 80040e8:	2005      	movs	r0, #5
 80040ea:	f7fc f919 	bl	8000320 <HAL_Delay>
  LCD_Send_Cmd(HX8357_DISPON);
 80040ee:	2029      	movs	r0, #41	; 0x29
 80040f0:	f7fc f898 	bl	8000224 <LCD_Send_Cmd>
	LCD_Orientation(DEFAULT_ORIENTATION);
}

void LCD_Orientation(uint8_t orientation)
{
	LCD_Send_Cmd(HX8357_MADCTL);
 80040f4:	2036      	movs	r0, #54	; 0x36
 80040f6:	f7fc f895 	bl	8000224 <LCD_Send_Cmd>
	switch (orientation)
	{
	case 0:
	if (BGR) LCD_Send_Dat(MADCTL_BGR);
 80040fa:	2008      	movs	r0, #8
 80040fc:	f7fc f8a8 	bl	8000250 <LCD_Send_Dat>
	LCD_Rect_Fill(0, 0, 480, 320, BLUE);
 8004100:	2100      	movs	r1, #0
 8004102:	23ff      	movs	r3, #255	; 0xff
 8004104:	4608      	mov	r0, r1
 8004106:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004110:	f7fc f8b2 	bl	8000278 <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 478, 318, BLACK);
 8004114:	2600      	movs	r6, #0
 8004116:	2101      	movs	r1, #1
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_48, 1, RED);
 8004118:	f44f 057f 	mov.w	r5, #16711680	; 0xff0000
	LCD_Rect_Fill(1, 1, 478, 318, BLACK);
 800411c:	4608      	mov	r0, r1
 800411e:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8004122:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8004126:	9600      	str	r6, [sp, #0]
 8004128:	f7fc f8a6 	bl	8000278 <LCD_Rect_Fill>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_48, 1, RED);
 800412c:	217f      	movs	r1, #127	; 0x7f
 800412e:	2014      	movs	r0, #20
 8004130:	4b97      	ldr	r3, [pc, #604]	; (8004390 <main+0xc94>)
 8004132:	4a98      	ldr	r2, [pc, #608]	; (8004394 <main+0xc98>)
 8004134:	9500      	str	r5, [sp, #0]
 8004136:	f7fd fcd5 	bl	8001ae4 <LCD_Font.constprop.0>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_48, 1, BLACK);
 800413a:	f8df b25c 	ldr.w	fp, [pc, #604]	; 8004398 <main+0xc9c>
 800413e:	217f      	movs	r1, #127	; 0x7f
 8004140:	2014      	movs	r0, #20
 8004142:	4b93      	ldr	r3, [pc, #588]	; (8004390 <main+0xc94>)
 8004144:	4a93      	ldr	r2, [pc, #588]	; (8004394 <main+0xc98>)
 8004146:	9600      	str	r6, [sp, #0]
 8004148:	f7fd fccc 	bl	8001ae4 <LCD_Font.constprop.0>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, RED);
 800414c:	9500      	str	r5, [sp, #0]
 800414e:	217f      	movs	r1, #127	; 0x7f
 8004150:	2014      	movs	r0, #20
 8004152:	4b8f      	ldr	r3, [pc, #572]	; (8004390 <main+0xc94>)
 8004154:	4a91      	ldr	r2, [pc, #580]	; (800439c <main+0xca0>)
 8004156:	f7fd fcc5 	bl	8001ae4 <LCD_Font.constprop.0>
 800415a:	465f      	mov	r7, fp
 800415c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8004160:	f240 591e 	movw	r9, #1310	; 0x51e
 8004164:	4628      	mov	r0, r5
 8004166:	f7fc fe6d 	bl	8000e44 <AT24XX_Read>
 800416a:	4606      	mov	r6, r0
 800416c:	1c68      	adds	r0, r5, #1
 800416e:	b280      	uxth	r0, r0
 8004170:	f7fc fe68 	bl	8000e44 <AT24XX_Read>
 8004174:	3502      	adds	r5, #2
 8004176:	b2ad      	uxth	r5, r5
	return (byteH << 8) | byteL;
 8004178:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 800417c:	454d      	cmp	r5, r9
 800417e:	f827 6b02 	strh.w	r6, [r7], #2
 8004182:	d1ef      	bne.n	8004164 <main+0xa68>
 8004184:	4d86      	ldr	r5, [pc, #536]	; (80043a0 <main+0xca4>)
 8004186:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
 800418a:	46a9      	mov	r9, r5
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 800418c:	f640 1a06 	movw	sl, #2310	; 0x906
 8004190:	4630      	mov	r0, r6
 8004192:	f7fc fe57 	bl	8000e44 <AT24XX_Read>
 8004196:	4607      	mov	r7, r0
 8004198:	1c70      	adds	r0, r6, #1
 800419a:	b280      	uxth	r0, r0
 800419c:	f7fc fe52 	bl	8000e44 <AT24XX_Read>
 80041a0:	3602      	adds	r6, #2
 80041a2:	b2b6      	uxth	r6, r6
	return (byteH << 8) | byteL;
 80041a4:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 80041a8:	4556      	cmp	r6, sl
 80041aa:	f829 7b02 	strh.w	r7, [r9], #2
 80041ae:	d1ef      	bne.n	8004190 <main+0xa94>
 80041b0:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 80043a4 <main+0xca8>
 80041b4:	f640 36b8 	movw	r6, #3000	; 0xbb8
 80041b8:	46ca      	mov	sl, r9
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 80041ba:	4630      	mov	r0, r6
 80041bc:	f7fc fe42 	bl	8000e44 <AT24XX_Read>
 80041c0:	4607      	mov	r7, r0
 80041c2:	1c70      	adds	r0, r6, #1
 80041c4:	b280      	uxth	r0, r0
 80041c6:	f7fc fe3d 	bl	8000e44 <AT24XX_Read>
 80041ca:	f640 43ee 	movw	r3, #3310	; 0xcee
 80041ce:	3602      	adds	r6, #2
 80041d0:	b2b6      	uxth	r6, r6
	return (byteH << 8) | byteL;
 80041d2:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 80041d6:	429e      	cmp	r6, r3
 80041d8:	f82a 7b02 	strh.w	r7, [sl], #2
 80041dc:	d1ed      	bne.n	80041ba <main+0xabe>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, BLACK);
 80041de:	2300      	movs	r3, #0
 80041e0:	217f      	movs	r1, #127	; 0x7f
 80041e2:	2014      	movs	r0, #20
 80041e4:	4a6d      	ldr	r2, [pc, #436]	; (800439c <main+0xca0>)
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	4b69      	ldr	r3, [pc, #420]	; (8004390 <main+0xc94>)
 80041ea:	f7fd fc7b 	bl	8001ae4 <LCD_Font.constprop.0>

void BME280_Init(void) {
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 80041ee:	23f2      	movs	r3, #242	; 0xf2
 80041f0:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    cmd[1] = 0x05; // Humidity oversampling x16
 80041f4:	2305      	movs	r3, #5
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80041f6:	2202      	movs	r2, #2
 80041f8:	4641      	mov	r1, r8
 80041fa:	20ec      	movs	r0, #236	; 0xec
    cmd[1] = 0x05; // Humidity oversampling x16
 80041fc:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8004200:	f7fd fa0b 	bl	800161a <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF4; // ctrl_meas
 8004204:	23f4      	movs	r3, #244	; 0xf4
 8004206:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 800420a:	23b7      	movs	r3, #183	; 0xb7
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800420c:	2202      	movs	r2, #2
 800420e:	4641      	mov	r1, r8
 8004210:	20ec      	movs	r0, #236	; 0xec
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 8004212:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8004216:	f7fd fa00 	bl	800161a <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF5; // config
 800421a:	23f5      	movs	r3, #245	; 0xf5
 800421c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
 8004220:	23a0      	movs	r3, #160	; 0xa0
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8004222:	2202      	movs	r2, #2
 8004224:	4641      	mov	r1, r8
 8004226:	20ec      	movs	r0, #236	; 0xec
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
 8004228:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800422c:	f7fd f9f5 	bl	800161a <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0x88; // read dig_T regs
 8004230:	2388      	movs	r3, #136	; 0x88
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8004232:	2201      	movs	r2, #1
 8004234:	4641      	mov	r1, r8
 8004236:	20ec      	movs	r0, #236	; 0xec
    cmd[0] = 0x88; // read dig_T regs
 8004238:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800423c:	f7fd f9ed 	bl	800161a <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 8004240:	2206      	movs	r2, #6
 8004242:	4641      	mov	r1, r8
 8004244:	20ec      	movs	r0, #236	; 0xec
 8004246:	f7fd f865 	bl	8001314 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_T1 = (cmd[1] << 8) | cmd[0];
 800424a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    dig_T2 = (cmd[3] << 8) | cmd[2];
    dig_T3 = (cmd[5] << 8) | cmd[4];

    cmd[0] = 0x8E; // read dig_P regs
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800424e:	2201      	movs	r2, #1
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8004250:	f8a4 3626 	strh.w	r3, [r4, #1574]	; 0x626
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8004254:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8004258:	4641      	mov	r1, r8
    dig_T2 = (cmd[3] << 8) | cmd[2];
 800425a:	f8a4 3628 	strh.w	r3, [r4, #1576]	; 0x628
    dig_T3 = (cmd[5] << 8) | cmd[4];
 800425e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8004262:	20ec      	movs	r0, #236	; 0xec
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8004264:	f8a4 362a 	strh.w	r3, [r4, #1578]	; 0x62a
    cmd[0] = 0x8E; // read dig_P regs
 8004268:	238e      	movs	r3, #142	; 0x8e
 800426a:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800426e:	f7fd f9d4 	bl	800161a <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 8004272:	2212      	movs	r2, #18
 8004274:	4641      	mov	r1, r8
 8004276:	20ec      	movs	r0, #236	; 0xec
 8004278:	f7fd f84c 	bl	8001314 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_P1 = (cmd[1] << 8) | cmd[0];
 800427c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    dig_P7 = (cmd[13] << 8) | cmd[12];
    dig_P8 = (cmd[15] << 8) | cmd[14];
    dig_P9 = (cmd[17] << 8) | cmd[16];

    cmd[0] = 0xA1; // read dig_H regs
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8004280:	2201      	movs	r2, #1
    dig_P1 = (cmd[1] << 8) | cmd[0];
 8004282:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8004286:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800428a:	4641      	mov	r1, r8
    dig_P2 = (cmd[3] << 8) | cmd[2];
 800428c:	f8a4 30ea 	strh.w	r3, [r4, #234]	; 0xea
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8004290:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8004294:	20ec      	movs	r0, #236	; 0xec
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8004296:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
    dig_P4 = (cmd[7] << 8) | cmd[6];
 800429a:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 800429e:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
    dig_P5 = (cmd[9] << 8) | cmd[8];
 80042a2:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 80042a6:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
    dig_P6 = (cmd[11] << 8) | cmd[10];
 80042aa:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 80042ae:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    dig_P7 = (cmd[13] << 8) | cmd[12];
 80042b2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80042b6:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    dig_P8 = (cmd[15] << 8) | cmd[14];
 80042ba:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 80042be:	f8a4 30f6 	strh.w	r3, [r4, #246]	; 0xf6
    dig_P9 = (cmd[17] << 8) | cmd[16];
 80042c2:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
 80042c6:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
    cmd[0] = 0xA1; // read dig_H regs
 80042ca:	23a1      	movs	r3, #161	; 0xa1
 80042cc:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80042d0:	f7fd f9a3 	bl	800161a <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80042d4:	2201      	movs	r2, #1
 80042d6:	4641      	mov	r1, r8
 80042d8:	20ec      	movs	r0, #236	; 0xec
 80042da:	f7fd f81b 	bl	8001314 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    cmd[1] = 0xE1; // read dig_H regs
 80042de:	23e1      	movs	r3, #225	; 0xe1

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 80042e0:	2201      	movs	r2, #1
 80042e2:	20ec      	movs	r0, #236	; 0xec
 80042e4:	f10d 0165 	add.w	r1, sp, #101	; 0x65
    cmd[1] = 0xE1; // read dig_H regs
 80042e8:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 80042ec:	f7fd f995 	bl	800161a <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 80042f0:	2207      	movs	r2, #7
 80042f2:	f10d 0165 	add.w	r1, sp, #101	; 0x65
 80042f6:	20ec      	movs	r0, #236	; 0xec
 80042f8:	f7fd f80c 	bl	8001314 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_H1 = cmd[0];
 80042fc:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
    dig_H2 = (cmd[2] << 8) | cmd[1];
    dig_H3 = cmd[3];
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8004300:	f89d 1068 	ldrb.w	r1, [sp, #104]	; 0x68
    dig_H1 = cmd[0];
 8004304:	f8a4 362c 	strh.w	r3, [r4, #1580]	; 0x62c
    dig_H2 = (cmd[2] << 8) | cmd[1];
 8004308:	f8bd 3065 	ldrh.w	r3, [sp, #101]	; 0x65
 800430c:	f8a4 362e 	strh.w	r3, [r4, #1582]	; 0x62e
    dig_H3 = cmd[3];
 8004310:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8004314:	f8a4 3630 	strh.w	r3, [r4, #1584]	; 0x630
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8004318:	f89d 3069 	ldrb.w	r3, [sp, #105]	; 0x69
 800431c:	f003 020f 	and.w	r2, r3, #15
 8004320:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8004324:	f8a4 2632 	strh.w	r2, [r4, #1586]	; 0x632
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8004328:	f89d 206a 	ldrb.w	r2, [sp, #106]	; 0x6a
 800432c:	091b      	lsrs	r3, r3, #4
 800432e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004332:	f8a4 3634 	strh.w	r3, [r4, #1588]	; 0x634
    dig_H6 = cmd[7];
 8004336:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800433a:	f8a4 3636 	strh.w	r3, [r4, #1590]	; 0x636
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800433e:	f894 30da 	ldrb.w	r3, [r4, #218]	; 0xda
 8004342:	2b01      	cmp	r3, #1
 8004344:	d130      	bne.n	80043a8 <main+0xcac>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004346:	2302      	movs	r3, #2
 8004348:	f884 30da 	strb.w	r3, [r4, #218]	; 0xda
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800434c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004350:	6a1a      	ldr	r2, [r3, #32]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004358:	6a1a      	ldr	r2, [r3, #32]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004360:	4a08      	ldr	r2, [pc, #32]	; (8004384 <main+0xc88>)
 8004362:	4293      	cmp	r3, r2
 8004364:	f040 87ad 	bne.w	80052c2 <main+0x1bc6>
    __HAL_TIM_MOE_ENABLE(htim);
 8004368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800436a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800436e:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004376:	2a06      	cmp	r2, #6
 8004378:	f040 87b0 	bne.w	80052dc <main+0x1be0>
 800437c:	e014      	b.n	80043a8 <main+0xcac>
 800437e:	bf00      	nop
 8004380:	40000400 	.word	0x40000400
 8004384:	40012c00 	.word	0x40012c00
 8004388:	40010800 	.word	0x40010800
 800438c:	40010c00 	.word	0x40010c00
 8004390:	08009d88 	.word	0x08009d88
 8004394:	0801b56b 	.word	0x0801b56b
 8004398:	20000484 	.word	0x20000484
 800439c:	0801b57b 	.word	0x0801b57b
 80043a0:	200005ba 	.word	0x200005ba
 80043a4:	200006f0 	.word	0x200006f0
	uint8_t uartTransmitDMA[] = "UART DMA OK\r\n";
 80043a8:	aa15      	add	r2, sp, #84	; 0x54
 80043aa:	4617      	mov	r7, r2
 80043ac:	4bd7      	ldr	r3, [pc, #860]	; (800470c <main+0x1010>)
 80043ae:	f103 0c08 	add.w	ip, r3, #8
 80043b2:	4616      	mov	r6, r2
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	6859      	ldr	r1, [r3, #4]
 80043b8:	3308      	adds	r3, #8
 80043ba:	c603      	stmia	r6!, {r0, r1}
 80043bc:	4563      	cmp	r3, ip
 80043be:	4632      	mov	r2, r6
 80043c0:	d1f7      	bne.n	80043b2 <main+0xcb6>
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	889b      	ldrh	r3, [r3, #4]
 80043c6:	6030      	str	r0, [r6, #0]
 80043c8:	80b3      	strh	r3, [r6, #4]
  if (huart->gState == HAL_UART_STATE_READY)
 80043ca:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 80043ce:	2b20      	cmp	r3, #32
 80043d0:	d12a      	bne.n	8004428 <main+0xd2c>
    __HAL_LOCK(huart);
 80043d2:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d026      	beq.n	8004428 <main+0xd2c>
 80043da:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043dc:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 80043de:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043e2:	2221      	movs	r2, #33	; 0x21
    huart->TxXferSize = Size;
 80043e4:	230e      	movs	r3, #14
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80043e6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    huart->TxXferCount = Size;
 80043ea:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ee:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043f2:	f884 2095 	strb.w	r2, [r4, #149]	; 0x95
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80043f6:	4ac6      	ldr	r2, [pc, #792]	; (8004710 <main+0x1014>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80043f8:	4639      	mov	r1, r7
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80043fa:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80043fc:	4ac5      	ldr	r2, [pc, #788]	; (8004714 <main+0x1018>)
    huart->TxXferSize = Size;
 80043fe:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004402:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004404:	4ac4      	ldr	r2, [pc, #784]	; (8004718 <main+0x101c>)
    huart->pTxBuffPtr = pData;
 8004406:	67a7      	str	r7, [r4, #120]	; 0x78
    huart->hdmatx->XferAbortCallback = NULL;
 8004408:	e9c0 260c 	strd	r2, r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800440c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800440e:	3204      	adds	r2, #4
 8004410:	f7fd fa88 	bl	8001924 <HAL_DMA_Start_IT.isra.0>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004414:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004418:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800441a:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800441c:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004420:	695a      	ldr	r2, [r3, #20]
 8004422:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004426:	615a      	str	r2, [r3, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 8004428:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800442c:	2b20      	cmp	r3, #32
 800442e:	d10d      	bne.n	800444c <main+0xd50>
    __HAL_LOCK(huart);
 8004430:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8004434:	2b01      	cmp	r3, #1
 8004436:	d009      	beq.n	800444c <main+0xd50>
 8004438:	2301      	movs	r3, #1
 800443a:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443e:	2300      	movs	r3, #0
    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004440:	2110      	movs	r1, #16
 8004442:	48b6      	ldr	r0, [pc, #728]	; (800471c <main+0x1020>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004444:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004448:	f7fd faa5 	bl	8001996 <UART_Start_Receive_DMA.constprop.0.isra.0>
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 800444c:	2300      	movs	r3, #0
	for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 800444e:	4ab4      	ldr	r2, [pc, #720]	; (8004720 <main+0x1024>)
 8004450:	6353      	str	r3, [r2, #52]	; 0x34
 8004452:	3301      	adds	r3, #1
 8004454:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8004458:	d1fa      	bne.n	8004450 <main+0xd54>
		if (rx_index != 0) uartDecode();
 800445a:	4eb2      	ldr	r6, [pc, #712]	; (8004724 <main+0x1028>)
 800445c:	f896 311e 	ldrb.w	r3, [r6, #286]	; 0x11e
 8004460:	2b00      	cmp	r3, #0
 8004462:	f040 8283 	bne.w	800496c <main+0x1270>

uint8_t DS3231_getSec(void) {
	DS3231_Update();
 8004466:	f7fd fa07 	bl	8001878 <DS3231_Update>
    return bcdToDec(rtcBuffer[0]);
 800446a:	f896 20fa 	ldrb.w	r2, [r6, #250]	; 0xfa
		if (rtcSecLast != rtcSec) {
 800446e:	4fae      	ldr	r7, [pc, #696]	; (8004728 <main+0x102c>)
    return ((val / 16 * 10) + (val % 16));
 8004470:	0914      	lsrs	r4, r2, #4
 8004472:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004476:	f002 040f 	and.w	r4, r2, #15
 800447a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800447e:	7a3b      	ldrb	r3, [r7, #8]
 8004480:	b2e4      	uxtb	r4, r4
 8004482:	42a3      	cmp	r3, r4
		rtcSec = DS3231_getSec();
 8004484:	f886 4638 	strb.w	r4, [r6, #1592]	; 0x638
		if (rtcSecLast != rtcSec) {
 8004488:	d0e7      	beq.n	800445a <main+0xd5e>
}

uint8_t DS3231_getMin(void) {
	DS3231_Update();
 800448a:	f7fd f9f5 	bl	8001878 <DS3231_Update>
    return bcdToDec(rtcBuffer[1]);
 800448e:	f896 30fb 	ldrb.w	r3, [r6, #251]	; 0xfb
			LCD_Circle(172, 35, 8, 0, 1, ORANGE);
 8004492:	2108      	movs	r1, #8
    return ((val / 16 * 10) + (val % 16));
 8004494:	ea4f 1813 	mov.w	r8, r3, lsr #4
 8004498:	eb08 0288 	add.w	r2, r8, r8, lsl #2
 800449c:	f003 080f 	and.w	r8, r3, #15
 80044a0:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 80044a4:	2023      	movs	r0, #35	; 0x23
 80044a6:	2200      	movs	r2, #0
 80044a8:	4ba0      	ldr	r3, [pc, #640]	; (800472c <main+0x1030>)
 80044aa:	fa5f f888 	uxtb.w	r8, r8
			rtcMin = DS3231_getMin();
 80044ae:	f886 8639 	strb.w	r8, [r6, #1593]	; 0x639
			LCD_Circle(172, 35, 8, 0, 1, ORANGE);
 80044b2:	f7fc fb15 	bl	8000ae0 <LCD_Circle.constprop.0>
			LCD_Circle(172, 75, 8, 0, 1, ORANGE);
 80044b6:	2200      	movs	r2, #0
 80044b8:	2108      	movs	r1, #8
 80044ba:	204b      	movs	r0, #75	; 0x4b
 80044bc:	4b9b      	ldr	r3, [pc, #620]	; (800472c <main+0x1030>)
 80044be:	f7fc fb0f 	bl	8000ae0 <LCD_Circle.constprop.0>
			if (rtcSec % 2 != 0) {
 80044c2:	f014 0401 	ands.w	r4, r4, #1
 80044c6:	f000 83ae 	beq.w	8004c26 <main+0x152a>
				LCD_Circle(172, 35, 7, 1, 1, ORANGE);
 80044ca:	2201      	movs	r2, #1
 80044cc:	2107      	movs	r1, #7
 80044ce:	2023      	movs	r0, #35	; 0x23
 80044d0:	4b96      	ldr	r3, [pc, #600]	; (800472c <main+0x1030>)
 80044d2:	f7fc fb05 	bl	8000ae0 <LCD_Circle.constprop.0>
				LCD_Circle(172, 75, 7, 1, 1, ORANGE);
 80044d6:	4b95      	ldr	r3, [pc, #596]	; (800472c <main+0x1030>)
 80044d8:	2201      	movs	r2, #1
 80044da:	2107      	movs	r1, #7
 80044dc:	204b      	movs	r0, #75	; 0x4b
 80044de:	f7fc faff 	bl	8000ae0 <LCD_Circle.constprop.0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044e2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    GPIOx->BSRR = GPIO_Pin;
 80044e6:	4a92      	ldr	r2, [pc, #584]	; (8004730 <main+0x1034>)
 80044e8:	6113      	str	r3, [r2, #16]
			if (rtcMinLast != rtcMin) {
 80044ea:	7a7c      	ldrb	r4, [r7, #9]
 80044ec:	4544      	cmp	r4, r8
 80044ee:	f000 86c6 	beq.w	800527e <main+0x1b82>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 80044f2:	f04f 0800 	mov.w	r8, #0
}

uint8_t DS3231_getHrs(void) {
	DS3231_Update();
 80044f6:	f7fd f9bf 	bl	8001878 <DS3231_Update>
    return bcdToDec(rtcBuffer[2]);
 80044fa:	f896 30fc 	ldrb.w	r3, [r6, #252]	; 0xfc
				sprintf(clockPrint, "%02d", rtcMinLast);
 80044fe:	498d      	ldr	r1, [pc, #564]	; (8004734 <main+0x1038>)
    return ((val / 16 * 10) + (val % 16));
 8004500:	091a      	lsrs	r2, r3, #4
 8004502:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800450e:	4622      	mov	r2, r4
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8004510:	4c89      	ldr	r4, [pc, #548]	; (8004738 <main+0x103c>)
				sprintf(clockPrint, "%02d", rtcMinLast);
 8004512:	a819      	add	r0, sp, #100	; 0x64
				rtcHrs = DS3231_getHrs();
 8004514:	f886 363a 	strb.w	r3, [r6, #1594]	; 0x63a
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8004518:	f8df a210 	ldr.w	sl, [pc, #528]	; 800472c <main+0x1030>
				sprintf(clockPrint, "%02d", rtcMinLast);
 800451c:	f001 fdc2 	bl	80060a4 <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8004520:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8004524:	2164      	movs	r1, #100	; 0x64
 8004526:	20b4      	movs	r0, #180	; 0xb4
 8004528:	aa19      	add	r2, sp, #100	; 0x64
 800452a:	f8cd 8000 	str.w	r8, [sp]
 800452e:	f7fd fad9 	bl	8001ae4 <LCD_Font.constprop.0>
				sprintf(clockPrint, "%02d", rtcMin);
 8004532:	f896 2639 	ldrb.w	r2, [r6, #1593]	; 0x639
 8004536:	497f      	ldr	r1, [pc, #508]	; (8004734 <main+0x1038>)
 8004538:	a819      	add	r0, sp, #100	; 0x64
 800453a:	f001 fdb3 	bl	80060a4 <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 800453e:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8004542:	2164      	movs	r1, #100	; 0x64
 8004544:	20b4      	movs	r0, #180	; 0xb4
 8004546:	f8cd a000 	str.w	sl, [sp]
 800454a:	aa19      	add	r2, sp, #100	; 0x64
 800454c:	f7fd faca 	bl	8001ae4 <LCD_Font.constprop.0>
				if (rtcHrsLast != rtcHrs) {
 8004550:	7abf      	ldrb	r7, [r7, #10]
 8004552:	f896 363a 	ldrb.w	r3, [r6, #1594]	; 0x63a
 8004556:	42bb      	cmp	r3, r7
 8004558:	f000 80fa 	beq.w	8004750 <main+0x1054>
}

uint8_t DS3231_getDay(void) {
	DS3231_Update();
 800455c:	f7fd f98c 	bl	8001878 <DS3231_Update>
    return bcdToDec(rtcBuffer[3]);
 8004560:	f896 30fd 	ldrb.w	r3, [r6, #253]	; 0xfd
    return ((val / 16 * 10) + (val % 16));
 8004564:	091a      	lsrs	r2, r3, #4
 8004566:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					rtcDay = DS3231_getDay();
 8004572:	f886 363b 	strb.w	r3, [r6, #1595]	; 0x63b
}

uint8_t DS3231_getDate(void) {
	DS3231_Update();
 8004576:	f7fd f97f 	bl	8001878 <DS3231_Update>
    return bcdToDec(rtcBuffer[4]);
 800457a:	f896 30fe 	ldrb.w	r3, [r6, #254]	; 0xfe
    return ((val / 16 * 10) + (val % 16));
 800457e:	091a      	lsrs	r2, r3, #4
 8004580:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					rtcDate = DS3231_getDate();
 800458c:	f886 363c 	strb.w	r3, [r6, #1596]	; 0x63c
}

uint8_t DS3231_getMonth(void) {
	DS3231_Update();
 8004590:	f7fd f972 	bl	8001878 <DS3231_Update>
    return bcdToDec(rtcBuffer[5]);
 8004594:	f896 30ff 	ldrb.w	r3, [r6, #255]	; 0xff
    return ((val / 16 * 10) + (val % 16));
 8004598:	091a      	lsrs	r2, r3, #4
 800459a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					rtcMonth = DS3231_getMonth();
 80045a6:	f886 363d 	strb.w	r3, [r6, #1597]	; 0x63d
}

uint8_t DS3231_getYear(void) {
	DS3231_Update();
 80045aa:	f7fd f965 	bl	8001878 <DS3231_Update>
    return bcdToDec(rtcBuffer[6]);
 80045ae:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
					sprintf(clockPrint, "%02d", rtcHrsLast);
 80045b2:	4960      	ldr	r1, [pc, #384]	; (8004734 <main+0x1038>)
    return ((val / 16 * 10) + (val % 16));
 80045b4:	091a      	lsrs	r2, r3, #4
 80045b6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80045c2:	a819      	add	r0, sp, #100	; 0x64
 80045c4:	463a      	mov	r2, r7
					rtcYear = DS3231_getYear();
 80045c6:	f886 363e 	strb.w	r3, [r6, #1598]	; 0x63e
					sprintf(clockPrint, "%02d", rtcHrsLast);
 80045ca:	f001 fd6b 	bl	80060a4 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 80045ce:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80045d2:	2164      	movs	r1, #100	; 0x64
 80045d4:	4640      	mov	r0, r8
 80045d6:	aa19      	add	r2, sp, #100	; 0x64
 80045d8:	f8cd 8000 	str.w	r8, [sp]
 80045dc:	f7fd fa82 	bl	8001ae4 <LCD_Font.constprop.0>
					sprintf(clockPrint, "%02d", rtcHrs);
 80045e0:	f896 263a 	ldrb.w	r2, [r6, #1594]	; 0x63a
 80045e4:	4953      	ldr	r1, [pc, #332]	; (8004734 <main+0x1038>)
 80045e6:	a819      	add	r0, sp, #100	; 0x64
 80045e8:	f001 fd5c 	bl	80060a4 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 80045ec:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80045f0:	2164      	movs	r1, #100	; 0x64
 80045f2:	4640      	mov	r0, r8
 80045f4:	f8cd a000 	str.w	sl, [sp]
 80045f8:	aa19      	add	r2, sp, #100	; 0x64
 80045fa:	f7fd fa73 	bl	8001ae4 <LCD_Font.constprop.0>
					if (rtcDayLast != rtcDay) {
 80045fe:	f896 763b 	ldrb.w	r7, [r6, #1595]	; 0x63b
 8004602:	f896 363f 	ldrb.w	r3, [r6, #1599]	; 0x63f
 8004606:	42bb      	cmp	r3, r7
 8004608:	d07a      	beq.n	8004700 <main+0x1004>
						LCD_Font(5, 140, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 800460a:	f04f 0a07 	mov.w	sl, #7
 800460e:	1d7b      	adds	r3, r7, #5
 8004610:	fbb3 f2fa 	udiv	r2, r3, sl
 8004614:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800461e:	218c      	movs	r1, #140	; 0x8c
 8004620:	2005      	movs	r0, #5
 8004622:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004624:	f104 0318 	add.w	r3, r4, #24
						LCD_Font(5, 140, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 8004628:	3706      	adds	r7, #6
						LCD_Font(5, 140, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 800462a:	f8cd 8000 	str.w	r8, [sp]
 800462e:	f7fd fa59 	bl	8001ae4 <LCD_Font.constprop.0>
						LCD_Font(5, 140, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 8004632:	fbb7 fafa 	udiv	sl, r7, sl
 8004636:	23ff      	movs	r3, #255	; 0xff
 8004638:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 800463c:	eba7 070a 	sub.w	r7, r7, sl
						LCD_Font(150, 140, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 8004640:	f04f 0a0c 	mov.w	sl, #12
						LCD_Font(5, 140, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 8004644:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8004648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800464a:	218c      	movs	r1, #140	; 0x8c
 800464c:	2005      	movs	r0, #5
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	f104 0318 	add.w	r3, r4, #24
 8004654:	f7fd fa46 	bl	8001ae4 <LCD_Font.constprop.0>
						LCD_Font(150, 140, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 8004658:	f896 763d 	ldrb.w	r7, [r6, #1597]	; 0x63d
 800465c:	218c      	movs	r1, #140	; 0x8c
 800465e:	f107 030a 	add.w	r3, r7, #10
 8004662:	fbb3 f2fa 	udiv	r2, r3, sl
 8004666:	fb0a 3312 	mls	r3, sl, r2, r3
 800466a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800466e:	2096      	movs	r0, #150	; 0x96
 8004670:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004672:	f104 0318 	add.w	r3, r4, #24
						LCD_Font(150, 140, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8004676:	370b      	adds	r7, #11
						LCD_Font(150, 140, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 8004678:	f8cd 8000 	str.w	r8, [sp]
 800467c:	f7fd fa32 	bl	8001ae4 <LCD_Font.constprop.0>
						LCD_Font(150, 140, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8004680:	fbb7 f3fa 	udiv	r3, r7, sl
 8004684:	fb0a 7713 	mls	r7, sl, r3, r7
 8004688:	eb04 0a87 	add.w	sl, r4, r7, lsl #2
 800468c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8004690:	218c      	movs	r1, #140	; 0x8c
 8004692:	2096      	movs	r0, #150	; 0x96
 8004694:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
 8004698:	f104 0318 	add.w	r3, r4, #24
 800469c:	9700      	str	r7, [sp, #0]
 800469e:	f7fd fa21 	bl	8001ae4 <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 80046a2:	f896 3642 	ldrb.w	r3, [r6, #1602]	; 0x642
 80046a6:	4925      	ldr	r1, [pc, #148]	; (800473c <main+0x1040>)
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	f896 3640 	ldrb.w	r3, [r6, #1600]	; 0x640
 80046ae:	f896 2641 	ldrb.w	r2, [r6, #1601]	; 0x641
 80046b2:	a819      	add	r0, sp, #100	; 0x64
 80046b4:	f001 fcf6 	bl	80060a4 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 80046b8:	218c      	movs	r1, #140	; 0x8c
 80046ba:	20fa      	movs	r0, #250	; 0xfa
 80046bc:	f104 0318 	add.w	r3, r4, #24
 80046c0:	aa19      	add	r2, sp, #100	; 0x64
 80046c2:	f8cd 8000 	str.w	r8, [sp]
 80046c6:	f7fd fa0d 	bl	8001ae4 <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear);
 80046ca:	f896 363e 	ldrb.w	r3, [r6, #1598]	; 0x63e
 80046ce:	491b      	ldr	r1, [pc, #108]	; (800473c <main+0x1040>)
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	f896 363d 	ldrb.w	r3, [r6, #1597]	; 0x63d
 80046d6:	f896 263c 	ldrb.w	r2, [r6, #1596]	; 0x63c
 80046da:	a819      	add	r0, sp, #100	; 0x64
 80046dc:	f001 fce2 	bl	80060a4 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 80046e0:	f104 0318 	add.w	r3, r4, #24
 80046e4:	218c      	movs	r1, #140	; 0x8c
 80046e6:	20fa      	movs	r0, #250	; 0xfa
 80046e8:	9700      	str	r7, [sp, #0]
 80046ea:	aa19      	add	r2, sp, #100	; 0x64
 80046ec:	f7fd f9fa 	bl	8001ae4 <LCD_Font.constprop.0>
						rtcDayLast = rtcDay;
 80046f0:	f896 363b 	ldrb.w	r3, [r6, #1595]	; 0x63b
 80046f4:	f886 363f 	strb.w	r3, [r6, #1599]	; 0x63f
						rtcDateLast = rtcDate;
 80046f8:	f896 363c 	ldrb.w	r3, [r6, #1596]	; 0x63c
 80046fc:	f886 3641 	strb.w	r3, [r6, #1601]	; 0x641
					rtcMonthLast = rtcMonth;
 8004700:	4b08      	ldr	r3, [pc, #32]	; (8004724 <main+0x1028>)
 8004702:	f893 263d 	ldrb.w	r2, [r3, #1597]	; 0x63d
 8004706:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640
 800470a:	e019      	b.n	8004740 <main+0x1044>
 800470c:	0801b5cf 	.word	0x0801b5cf
 8004710:	08000751 	.word	0x08000751
 8004714:	0800031f 	.word	0x0800031f
 8004718:	08000779 	.word	0x08000779
 800471c:	2000031f 	.word	0x2000031f
 8004720:	40012c00 	.word	0x40012c00
 8004724:	20000200 	.word	0x20000200
 8004728:	20000000 	.word	0x20000000
 800472c:	00ffa500 	.word	0x00ffa500
 8004730:	40011000 	.word	0x40011000
 8004734:	0801b59e 	.word	0x0801b59e
 8004738:	08009d70 	.word	0x08009d70
 800473c:	0801b594 	.word	0x0801b594
					rtcYearLast = rtcYear;
 8004740:	f893 263e 	ldrb.w	r2, [r3, #1598]	; 0x63e
 8004744:	f883 2642 	strb.w	r2, [r3, #1602]	; 0x642
					rtcHrsLast = rtcHrs;
 8004748:	f893 263a 	ldrb.w	r2, [r3, #1594]	; 0x63a
 800474c:	4b7e      	ldr	r3, [pc, #504]	; (8004948 <main+0x124c>)
 800474e:	729a      	strb	r2, [r3, #10]
				rtcMinLast = rtcMin;
 8004750:	f896 2639 	ldrb.w	r2, [r6, #1593]	; 0x639
 8004754:	4b7c      	ldr	r3, [pc, #496]	; (8004948 <main+0x124c>)
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8004756:	20ec      	movs	r0, #236	; 0xec
 8004758:	725a      	strb	r2, [r3, #9]
    cmd[0] = 0xFA; // temp_msb
 800475a:	23fa      	movs	r3, #250	; 0xfa
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800475c:	2201      	movs	r2, #1
 800475e:	a912      	add	r1, sp, #72	; 0x48
    cmd[0] = 0xFA; // temp_msb
 8004760:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8004764:	f7fc ff59 	bl	800161a <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8004768:	f10d 0149 	add.w	r1, sp, #73	; 0x49
 800476c:	2203      	movs	r2, #3
 800476e:	20ec      	movs	r0, #236	; 0xec
 8004770:	f7fc fdd0 	bl	8001314 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8004774:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8004778:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004782:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
				temperature = BME280_getTemperature(-1);
 8004786:	4c71      	ldr	r4, [pc, #452]	; (800494c <main+0x1250>)
 8004788:	ea43 1712 	orr.w	r7, r3, r2, lsr #4
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800478c:	f8b6 2626 	ldrh.w	r2, [r6, #1574]	; 0x626
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8004790:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8004794:	0052      	lsls	r2, r2, #1
 8004796:	ebc2 02d7 	rsb	r2, r2, r7, lsr #3
 800479a:	f9b6 7628 	ldrsh.w	r7, [r6, #1576]	; 0x628
 800479e:	437a      	muls	r2, r7
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 80047a0:	fb03 f703 	mul.w	r7, r3, r3
 80047a4:	f9b6 362a 	ldrsh.w	r3, [r6, #1578]	; 0x62a
 80047a8:	0b3f      	lsrs	r7, r7, #12
 80047aa:	435f      	muls	r7, r3
 80047ac:	0bbf      	lsrs	r7, r7, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 80047ae:	eb07 27d2 	add.w	r7, r7, r2, lsr #11
    temp = (temp * 5 + 128) >> 8;
 80047b2:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 80047b6:	3080      	adds	r0, #128	; 0x80
    t_fine = temp;
 80047b8:	f8c6 70e4 	str.w	r7, [r6, #228]	; 0xe4
    tempf = (float) temp;
 80047bc:	1200      	asrs	r0, r0, #8
 80047be:	f7fe fdd9 	bl	8003374 <__aeabi_i2f>
    return round_nth((tempf / 100.0f), n);
 80047c2:	4963      	ldr	r1, [pc, #396]	; (8004950 <main+0x1254>)
 80047c4:	f7fe fede 	bl	8003584 <__aeabi_fdiv>
 80047c8:	f7fd fa20 	bl	8001c0c <round_nth.constprop.0>
 80047cc:	4680      	mov	r8, r0
 80047ce:	f7fe f8c9 	bl	8002964 <__aeabi_f2d>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	e944 2302 	strd	r2, r3, [r4, #-8]
    cmd[0] = 0xFD; // hum_msb
 80047da:	23fd      	movs	r3, #253	; 0xfd
 80047dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80047e0:	2201      	movs	r2, #1
 80047e2:	20ec      	movs	r0, #236	; 0xec
 80047e4:	a912      	add	r1, sp, #72	; 0x48
    cmd[0] = 0xFD; // hum_msb
 80047e6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80047ea:	f7fc ff16 	bl	800161a <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 80047ee:	f10d 0149 	add.w	r1, sp, #73	; 0x49
 80047f2:	2202      	movs	r2, #2
 80047f4:	20ec      	movs	r0, #236	; 0xec
 80047f6:	f7fc fd8d 	bl	8001314 <HAL_I2C_Master_Receive.constprop.0.isra.0>
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80047fa:	f8b6 0630 	ldrh.w	r0, [r6, #1584]	; 0x630
    v_x1 = t_fine - 76800;
 80047fe:	f5a7 3796 	sub.w	r7, r7, #76800	; 0x12c00
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8004802:	f9b6 3636 	ldrsh.w	r3, [r6, #1590]	; 0x636
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8004806:	4378      	muls	r0, r7
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8004808:	437b      	muls	r3, r7
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800480a:	12c0      	asrs	r0, r0, #11
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 800480c:	129b      	asrs	r3, r3, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800480e:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8004812:	4358      	muls	r0, r3
                                            (int32_t) dig_H2 + 8192) >> 14));
 8004814:	f9b6 362e 	ldrsh.w	r3, [r6, #1582]	; 0x62e
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8004818:	1280      	asrs	r0, r0, #10
 800481a:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
 800481e:	4358      	muls	r0, r3
    hum_raw = (cmd[1] << 8) | cmd[2];
 8004820:	f8bd 3049 	ldrh.w	r3, [sp, #73]	; 0x49
                                            (int32_t) dig_H2 + 8192) >> 14));
 8004824:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
    hum_raw = (cmd[1] << 8) | cmd[2];
 8004828:	ba5b      	rev16	r3, r3
 800482a:	b29a      	uxth	r2, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 800482c:	f9b6 3632 	ldrsh.w	r3, [r6, #1586]	; 0x632
                                            (int32_t) dig_H2 + 8192) >> 14));
 8004830:	1380      	asrs	r0, r0, #14
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8004832:	051b      	lsls	r3, r3, #20
 8004834:	ebc3 3382 	rsb	r3, r3, r2, lsl #14
 8004838:	f9b6 2634 	ldrsh.w	r2, [r6, #1588]	; 0x634
 800483c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8004840:	fb07 3712 	mls	r7, r7, r2, r3
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8004844:	0bff      	lsrs	r7, r7, #15
 8004846:	4378      	muls	r0, r7
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8004848:	13c3      	asrs	r3, r0, #15
 800484a:	435b      	muls	r3, r3
 800484c:	f8b6 262c 	ldrh.w	r2, [r6, #1580]	; 0x62c
 8004850:	11db      	asrs	r3, r3, #7
 8004852:	4353      	muls	r3, r2
 8004854:	eba0 1023 	sub.w	r0, r0, r3, asr #4
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 8004858:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 800485c:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 8004860:	bfa8      	it	ge
 8004862:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
    humf = (float) (v_x1 >> 12);
 8004866:	1300      	asrs	r0, r0, #12
 8004868:	f7fe fd84 	bl	8003374 <__aeabi_i2f>
    return round_nth((humf / 1024.0f), n);
 800486c:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 8004870:	f7fe fdd4 	bl	800341c <__aeabi_fmul>
 8004874:	f7fd f9ca 	bl	8001c0c <round_nth.constprop.0>
 8004878:	4607      	mov	r7, r0
				humidity = BME280_getHumidity(-1);
 800487a:	f7fe f873 	bl	8002964 <__aeabi_f2d>
 800487e:	e9c4 0100 	strd	r0, r1, [r4]
				pressure = (uint16_t)BME280_getPressure();
 8004882:	f7fc ff85 	bl	8001790 <BME280_getPressure>
 8004886:	f7fe ff19 	bl	80036bc <__aeabi_f2uiz>
				if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 800488a:	f46f 7196 	mvn.w	r1, #300	; 0x12c
 800488e:	f240 331e 	movw	r3, #798	; 0x31e
				pressure = (uint16_t)BME280_getPressure();
 8004892:	b280      	uxth	r0, r0
 8004894:	f8a6 0658 	strh.w	r0, [r6, #1624]	; 0x658
				if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8004898:	4408      	add	r0, r1
 800489a:	b280      	uxth	r0, r0
 800489c:	4298      	cmp	r0, r3
 800489e:	f200 84ee 	bhi.w	800527e <main+0x1b82>
 80048a2:	4640      	mov	r0, r8
 80048a4:	492b      	ldr	r1, [pc, #172]	; (8004954 <main+0x1258>)
 80048a6:	f7fe fc4b 	bl	8003140 <__aeabi_fcmplt>
 80048aa:	2800      	cmp	r0, #0
 80048ac:	f000 84e7 	beq.w	800527e <main+0x1b82>
 80048b0:	4640      	mov	r0, r8
 80048b2:	4929      	ldr	r1, [pc, #164]	; (8004958 <main+0x125c>)
 80048b4:	f7fe fc62 	bl	800317c <__aeabi_fcmpgt>
 80048b8:	2800      	cmp	r0, #0
 80048ba:	f000 84e0 	beq.w	800527e <main+0x1b82>
 80048be:	2100      	movs	r1, #0
 80048c0:	4638      	mov	r0, r7
 80048c2:	f7fe fc5b 	bl	800317c <__aeabi_fcmpgt>
 80048c6:	2800      	cmp	r0, #0
 80048c8:	f000 84d9 	beq.w	800527e <main+0x1b82>
 80048cc:	4638      	mov	r0, r7
 80048ce:	4920      	ldr	r1, [pc, #128]	; (8004950 <main+0x1254>)
 80048d0:	f7fe fc36 	bl	8003140 <__aeabi_fcmplt>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	f000 84d2 	beq.w	800527e <main+0x1b82>
					if (temperature != temperatureLast) {
 80048da:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
 80048de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048e2:	4632      	mov	r2, r6
 80048e4:	463b      	mov	r3, r7
 80048e6:	f7fe fafd 	bl	8002ee4 <__aeabi_dcmpeq>
 80048ea:	2800      	cmp	r0, #0
 80048ec:	f040 823c 	bne.w	8004d68 <main+0x166c>
						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 80048f0:	2200      	movs	r2, #0
 80048f2:	4630      	mov	r0, r6
 80048f4:	4639      	mov	r1, r7
 80048f6:	4b19      	ldr	r3, [pc, #100]	; (800495c <main+0x1260>)
 80048f8:	f7fe fb12 	bl	8002f20 <__aeabi_dcmpge>
 80048fc:	b988      	cbnz	r0, 8004922 <main+0x1226>
 80048fe:	2200      	movs	r2, #0
 8004900:	2300      	movs	r3, #0
 8004902:	4630      	mov	r0, r6
 8004904:	4639      	mov	r1, r7
 8004906:	f7fe faf7 	bl	8002ef8 <__aeabi_dcmplt>
 800490a:	2800      	cmp	r0, #0
 800490c:	f000 81a6 	beq.w	8004c5c <main+0x1560>
 8004910:	2200      	movs	r2, #0
 8004912:	4630      	mov	r0, r6
 8004914:	4639      	mov	r1, r7
 8004916:	4b12      	ldr	r3, [pc, #72]	; (8004960 <main+0x1264>)
 8004918:	f7fe fb0c 	bl	8002f34 <__aeabi_dcmpgt>
 800491c:	2800      	cmp	r0, #0
 800491e:	f000 819d 	beq.w	8004c5c <main+0x1560>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8004922:	4632      	mov	r2, r6
 8004924:	463b      	mov	r3, r7
 8004926:	490f      	ldr	r1, [pc, #60]	; (8004964 <main+0x1268>)
 8004928:	a812      	add	r0, sp, #72	; 0x48
 800492a:	f001 fbbb 	bl	80060a4 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 800492e:	2300      	movs	r3, #0
 8004930:	21bb      	movs	r1, #187	; 0xbb
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	2001      	movs	r0, #1
 8004936:	4b0c      	ldr	r3, [pc, #48]	; (8004968 <main+0x126c>)
 8004938:	aa12      	add	r2, sp, #72	; 0x48
 800493a:	e1ab      	b.n	8004c94 <main+0x1598>
    tmpccer &= ~TIM_CCER_CC1NE;
 800493c:	f023 030e 	bic.w	r3, r3, #14
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004940:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004944:	f7ff bb88 	b.w	8004058 <main+0x95c>
 8004948:	20000000 	.word	0x20000000
 800494c:	20000850 	.word	0x20000850
 8004950:	42c80000 	.word	0x42c80000
 8004954:	42aa0000 	.word	0x42aa0000
 8004958:	c2200000 	.word	0xc2200000
 800495c:	40240000 	.word	0x40240000
 8004960:	c0240000 	.word	0xc0240000
 8004964:	0801b5a3 	.word	0x0801b5a3
 8004968:	08009d88 	.word	0x08009d88
	if (memcmp(rx_buffer, "TS", 2) == 0) {
 800496c:	2202      	movs	r2, #2
 800496e:	49b5      	ldr	r1, [pc, #724]	; (8004c44 <main+0x1548>)
 8004970:	f206 101f 	addw	r0, r6, #287	; 0x11f
 8004974:	f005 f95e 	bl	8009c34 <memcmp>
 8004978:	4607      	mov	r7, r0
 800497a:	2800      	cmp	r0, #0
 800497c:	f040 80ca 	bne.w	8004b14 <main+0x1418>
		val[0] = rx_buffer[2];
 8004980:	f896 3121 	ldrb.w	r3, [r6, #289]	; 0x121
		DS3231_setHrs(atoi(val));
 8004984:	a819      	add	r0, sp, #100	; 0x64
		val[0] = rx_buffer[2];
 8004986:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		val[1] = rx_buffer[3];
 800498a:	f896 3122 	ldrb.w	r3, [r6, #290]	; 0x122
    return ((val / 10 * 16) + (val % 10));
 800498e:	240a      	movs	r4, #10
 8004990:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
		DS3231_setHrs(atoi(val));
 8004994:	f000 fcdd 	bl	8005352 <atoi>
 8004998:	fa5f f880 	uxtb.w	r8, r0
    rtcBufferSet[2] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
}

void DS3231_setHrs(uint8_t value) {
    DS3231_Update();
 800499c:	f7fc ff6c 	bl	8001878 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80049a0:	fbb8 f0f4 	udiv	r0, r8, r4
 80049a4:	fb04 8810 	mls	r8, r4, r0, r8
 80049a8:	eb08 1800 	add.w	r8, r8, r0, lsl #4
    rtcBufferSet[3] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80049ac:	2211      	movs	r2, #17
 80049ae:	f206 110d 	addw	r1, r6, #269	; 0x10d
 80049b2:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[3] = decToBcd(value);
 80049b4:	f886 8110 	strb.w	r8, [r6, #272]	; 0x110
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80049b8:	f7fc fe2f 	bl	800161a <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[0] = rx_buffer[4];
 80049bc:	f896 3123 	ldrb.w	r3, [r6, #291]	; 0x123
		DS3231_setMin(atoi(val));
 80049c0:	a819      	add	r0, sp, #100	; 0x64
		val[0] = rx_buffer[4];
 80049c2:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		val[1] = rx_buffer[5];
 80049c6:	f896 3124 	ldrb.w	r3, [r6, #292]	; 0x124
 80049ca:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
		DS3231_setMin(atoi(val));
 80049ce:	f000 fcc0 	bl	8005352 <atoi>
 80049d2:	fa5f f880 	uxtb.w	r8, r0
    DS3231_Update();
 80049d6:	f7fc ff4f 	bl	8001878 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80049da:	fbb8 f0f4 	udiv	r0, r8, r4
 80049de:	fb04 8810 	mls	r8, r4, r0, r8
 80049e2:	eb08 1800 	add.w	r8, r8, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80049e6:	2211      	movs	r2, #17
 80049e8:	f206 110d 	addw	r1, r6, #269	; 0x10d
 80049ec:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[2] = decToBcd(value);
 80049ee:	f886 810f 	strb.w	r8, [r6, #271]	; 0x10f
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80049f2:	f7fc fe12 	bl	800161a <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		DS3231_setSec(atoi(val));
 80049f6:	a819      	add	r0, sp, #100	; 0x64
		val[0] = 0;
 80049f8:	f88d 7064 	strb.w	r7, [sp, #100]	; 0x64
		val[1] = 0;
 80049fc:	f88d 7065 	strb.w	r7, [sp, #101]	; 0x65
		DS3231_setSec(atoi(val));
 8004a00:	f000 fca7 	bl	8005352 <atoi>
 8004a04:	fa5f f880 	uxtb.w	r8, r0
    DS3231_Update();
 8004a08:	f7fc ff36 	bl	8001878 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8004a0c:	fbb8 f0f4 	udiv	r0, r8, r4
 8004a10:	fb04 8810 	mls	r8, r4, r0, r8
 8004a14:	eb08 1800 	add.w	r8, r8, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8004a18:	2211      	movs	r2, #17
 8004a1a:	f206 110d 	addw	r1, r6, #269	; 0x10d
 8004a1e:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[1] = decToBcd(value);
 8004a20:	f886 810e 	strb.w	r8, [r6, #270]	; 0x10e
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8004a24:	f7fc fdf9 	bl	800161a <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[0] = rx_buffer[6];
 8004a28:	f896 3125 	ldrb.w	r3, [r6, #293]	; 0x125
		DS3231_setDate(atoi(val));
 8004a2c:	a819      	add	r0, sp, #100	; 0x64
		val[0] = rx_buffer[6];
 8004a2e:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		val[1] = rx_buffer[7];
 8004a32:	f896 3126 	ldrb.w	r3, [r6, #294]	; 0x126
 8004a36:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
		DS3231_setDate(atoi(val));
 8004a3a:	f000 fc8a 	bl	8005352 <atoi>
 8004a3e:	fa5f f880 	uxtb.w	r8, r0
    rtcBufferSet[4] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
}

void DS3231_setDate(uint8_t value) {
    DS3231_Update();
 8004a42:	f7fc ff19 	bl	8001878 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8004a46:	fbb8 f0f4 	udiv	r0, r8, r4
 8004a4a:	fb04 8810 	mls	r8, r4, r0, r8
 8004a4e:	eb08 1800 	add.w	r8, r8, r0, lsl #4
    rtcBufferSet[5] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8004a52:	2211      	movs	r2, #17
 8004a54:	f206 110d 	addw	r1, r6, #269	; 0x10d
 8004a58:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[5] = decToBcd(value);
 8004a5a:	f886 8112 	strb.w	r8, [r6, #274]	; 0x112
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8004a5e:	f7fc fddc 	bl	800161a <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[0] = rx_buffer[8];
 8004a62:	f896 3127 	ldrb.w	r3, [r6, #295]	; 0x127
		DS3231_setMonth(atoi(val));
 8004a66:	a819      	add	r0, sp, #100	; 0x64
		val[0] = rx_buffer[8];
 8004a68:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		val[1] = rx_buffer[9];
 8004a6c:	f896 3128 	ldrb.w	r3, [r6, #296]	; 0x128
 8004a70:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
		DS3231_setMonth(atoi(val));
 8004a74:	f000 fc6d 	bl	8005352 <atoi>
 8004a78:	fa5f f880 	uxtb.w	r8, r0
}

void DS3231_setMonth(uint8_t value) {
    DS3231_Update();
 8004a7c:	f7fc fefc 	bl	8001878 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8004a80:	fbb8 f0f4 	udiv	r0, r8, r4
 8004a84:	fb04 8810 	mls	r8, r4, r0, r8
 8004a88:	eb08 1800 	add.w	r8, r8, r0, lsl #4
    rtcBufferSet[6] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8004a8c:	2211      	movs	r2, #17
 8004a8e:	f206 110d 	addw	r1, r6, #269	; 0x10d
 8004a92:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[6] = decToBcd(value);
 8004a94:	f886 8113 	strb.w	r8, [r6, #275]	; 0x113
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8004a98:	f7fc fdbf 	bl	800161a <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[0] = rx_buffer[10];
 8004a9c:	f896 3129 	ldrb.w	r3, [r6, #297]	; 0x129
		DS3231_setYear(atoi(val));
 8004aa0:	a819      	add	r0, sp, #100	; 0x64
		val[0] = rx_buffer[10];
 8004aa2:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		val[1] = rx_buffer[11];
 8004aa6:	f896 312a 	ldrb.w	r3, [r6, #298]	; 0x12a
 8004aaa:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
		DS3231_setYear(atoi(val));
 8004aae:	f000 fc50 	bl	8005352 <atoi>
 8004ab2:	fa5f f880 	uxtb.w	r8, r0
}

void DS3231_setYear(uint8_t value) {
    DS3231_Update();
 8004ab6:	f7fc fedf 	bl	8001878 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8004aba:	fbb8 f0f4 	udiv	r0, r8, r4
 8004abe:	fb04 8810 	mls	r8, r4, r0, r8
 8004ac2:	eb08 1800 	add.w	r8, r8, r0, lsl #4
    rtcBufferSet[7] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8004ac6:	2211      	movs	r2, #17
 8004ac8:	f206 110d 	addw	r1, r6, #269	; 0x10d
 8004acc:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[7] = decToBcd(value);
 8004ace:	f886 8114 	strb.w	r8, [r6, #276]	; 0x114
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8004ad2:	f7fc fda2 	bl	800161a <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		val[1] = rx_buffer[12];
 8004ad6:	f896 312b 	ldrb.w	r3, [r6, #299]	; 0x12b
		DS3231_setDay(atoi(val));
 8004ada:	a819      	add	r0, sp, #100	; 0x64
		val[1] = rx_buffer[12];
 8004adc:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
		DS3231_setDay(atoi(val));
 8004ae0:	f000 fc37 	bl	8005352 <atoi>
 8004ae4:	fa5f f880 	uxtb.w	r8, r0
    DS3231_Update();
 8004ae8:	f7fc fec6 	bl	8001878 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8004aec:	fbb8 f0f4 	udiv	r0, r8, r4
 8004af0:	fb04 8810 	mls	r8, r4, r0, r8
 8004af4:	eb08 1800 	add.w	r8, r8, r0, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8004af8:	2211      	movs	r2, #17
 8004afa:	20d0      	movs	r0, #208	; 0xd0
    rtcBufferSet[4] = decToBcd(value);
 8004afc:	f886 8111 	strb.w	r8, [r6, #273]	; 0x111
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8004b00:	f206 110d 	addw	r1, r6, #269	; 0x10d
 8004b04:	f7fc fd89 	bl	800161a <HAL_I2C_Master_Transmit.constprop.0.isra.0>
		for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8004b08:	4b4f      	ldr	r3, [pc, #316]	; (8004c48 <main+0x154c>)
 8004b0a:	635f      	str	r7, [r3, #52]	; 0x34
 8004b0c:	3701      	adds	r7, #1
 8004b0e:	f1b7 1f01 	cmp.w	r7, #65537	; 0x10001
 8004b12:	d1fa      	bne.n	8004b0a <main+0x140e>
	if (memcmp(rx_buffer, "CE", 2) == 0) {
 8004b14:	2202      	movs	r2, #2
 8004b16:	494d      	ldr	r1, [pc, #308]	; (8004c4c <main+0x1550>)
 8004b18:	484d      	ldr	r0, [pc, #308]	; (8004c50 <main+0x1554>)
 8004b1a:	f005 f88b 	bl	8009c34 <memcmp>
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d13b      	bne.n	8004b9a <main+0x149e>
		uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 8004b22:	aa19      	add	r2, sp, #100	; 0x64
 8004b24:	4614      	mov	r4, r2
 8004b26:	4b4b      	ldr	r3, [pc, #300]	; (8004c54 <main+0x1558>)
 8004b28:	f103 0c10 	add.w	ip, r3, #16
 8004b2c:	4617      	mov	r7, r2
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	6859      	ldr	r1, [r3, #4]
 8004b32:	3308      	adds	r3, #8
 8004b34:	c703      	stmia	r7!, {r0, r1}
 8004b36:	4563      	cmp	r3, ip
 8004b38:	463a      	mov	r2, r7
 8004b3a:	d1f7      	bne.n	8004b2c <main+0x1430>
 8004b3c:	6818      	ldr	r0, [r3, #0]
 8004b3e:	6038      	str	r0, [r7, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8004b40:	f896 3095 	ldrb.w	r3, [r6, #149]	; 0x95
 8004b44:	2b20      	cmp	r3, #32
 8004b46:	d128      	bne.n	8004b9a <main+0x149e>
    __HAL_LOCK(huart);
 8004b48:	f896 3094 	ldrb.w	r3, [r6, #148]	; 0x94
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d024      	beq.n	8004b9a <main+0x149e>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b50:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b52:	2700      	movs	r7, #0
 8004b54:	f8c6 7098 	str.w	r7, [r6, #152]	; 0x98
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b58:	f886 3095 	strb.w	r3, [r6, #149]	; 0x95
    huart->TxXferSize = Size;
 8004b5c:	2314      	movs	r3, #20
 8004b5e:	f8d6 8000 	ldr.w	r8, [r6]
 8004b62:	f8a6 307c 	strh.w	r3, [r6, #124]	; 0x7c
    huart->TxXferCount = Size;
 8004b66:	f8a6 307e 	strh.w	r3, [r6, #126]	; 0x7e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b6a:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8004b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b70:	d104      	bne.n	8004b7c <main+0x1480>
 8004b72:	6eb3      	ldr	r3, [r6, #104]	; 0x68
      pdata16bits = (uint16_t *) pData;
 8004b74:	42bb      	cmp	r3, r7
 8004b76:	bf04      	itt	eq
 8004b78:	4627      	moveq	r7, r4
 8004b7a:	2400      	moveq	r4, #0
    __HAL_UNLOCK(huart);
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f886 3094 	strb.w	r3, [r6, #148]	; 0x94
    while (huart->TxXferCount > 0U)
 8004b82:	f8b6 307e 	ldrh.w	r3, [r6, #126]	; 0x7e
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b86:	4641      	mov	r1, r8
    while (huart->TxXferCount > 0U)
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	bbb3      	cbnz	r3, 8004bfa <main+0x14fe>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b8c:	2040      	movs	r0, #64	; 0x40
 8004b8e:	f7fb ff1b 	bl	80009c8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8004b92:	b910      	cbnz	r0, 8004b9a <main+0x149e>
    huart->gState = HAL_UART_STATE_READY;
 8004b94:	2320      	movs	r3, #32
 8004b96:	f886 3095 	strb.w	r3, [r6, #149]	; 0x95
	if (memcmp(rx_buffer, "RS", 2) == 0) {
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	492e      	ldr	r1, [pc, #184]	; (8004c58 <main+0x155c>)
 8004b9e:	482c      	ldr	r0, [pc, #176]	; (8004c50 <main+0x1554>)
 8004ba0:	f005 f848 	bl	8009c34 <memcmp>
 8004ba4:	bb08      	cbnz	r0, 8004bea <main+0x14ee>
		for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 8004ba6:	f896 3121 	ldrb.w	r3, [r6, #289]	; 0x121
		temperatureRemote = atoi(valT);
 8004baa:	a819      	add	r0, sp, #100	; 0x64
		for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 8004bac:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8004bb0:	f896 3122 	ldrb.w	r3, [r6, #290]	; 0x122
 8004bb4:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
 8004bb8:	f896 3123 	ldrb.w	r3, [r6, #291]	; 0x123
 8004bbc:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
 8004bc0:	f896 3124 	ldrb.w	r3, [r6, #292]	; 0x124
 8004bc4:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
		temperatureRemote = atoi(valT);
 8004bc8:	f000 fbc3 	bl	8005352 <atoi>
		for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 8004bcc:	f896 3125 	ldrb.w	r3, [r6, #293]	; 0x125
		humidityRemote = atoi(valH);
 8004bd0:	a812      	add	r0, sp, #72	; 0x48
		for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 8004bd2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8004bd6:	f896 3126 	ldrb.w	r3, [r6, #294]	; 0x126
 8004bda:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 8004bde:	f896 3127 	ldrb.w	r3, [r6, #295]	; 0x127
 8004be2:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		humidityRemote = atoi(valH);
 8004be6:	f000 fbb4 	bl	8005352 <atoi>
	rx_index = 0;
 8004bea:	2100      	movs	r1, #0
	for (uint8_t i = 0; i < UART_BUFFER_SIZE; i++) rx_buffer[i] = 0;
 8004bec:	2210      	movs	r2, #16
 8004bee:	4818      	ldr	r0, [pc, #96]	; (8004c50 <main+0x1554>)
	rx_index = 0;
 8004bf0:	f886 111e 	strb.w	r1, [r6, #286]	; 0x11e
	for (uint8_t i = 0; i < UART_BUFFER_SIZE; i++) rx_buffer[i] = 0;
 8004bf4:	f000 fbdc 	bl	80053b0 <memset>
 8004bf8:	e435      	b.n	8004466 <main+0xd6a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bfa:	2080      	movs	r0, #128	; 0x80
 8004bfc:	f7fb fee4 	bl	80009c8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8004c00:	2800      	cmp	r0, #0
 8004c02:	d1ca      	bne.n	8004b9a <main+0x149e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c04:	6db2      	ldr	r2, [r6, #88]	; 0x58
      if (pdata8bits == NULL)
 8004c06:	b95c      	cbnz	r4, 8004c20 <main+0x1524>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c08:	f837 3b02 	ldrh.w	r3, [r7], #2
 8004c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c10:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004c12:	f8b6 307e 	ldrh.w	r3, [r6, #126]	; 0x7e
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	f8a6 307e 	strh.w	r3, [r6, #126]	; 0x7e
 8004c1e:	e7b0      	b.n	8004b82 <main+0x1486>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004c24:	e7f4      	b.n	8004c10 <main+0x1514>
				LCD_Circle(172, 35, 7, 1, 1, BLACK);
 8004c26:	4623      	mov	r3, r4
 8004c28:	2201      	movs	r2, #1
 8004c2a:	2107      	movs	r1, #7
 8004c2c:	2023      	movs	r0, #35	; 0x23
 8004c2e:	f7fb ff57 	bl	8000ae0 <LCD_Circle.constprop.0>
				LCD_Circle(172, 75, 7, 1, 1, BLACK);
 8004c32:	4623      	mov	r3, r4
 8004c34:	2201      	movs	r2, #1
 8004c36:	2107      	movs	r1, #7
 8004c38:	204b      	movs	r0, #75	; 0x4b
 8004c3a:	f7fb ff51 	bl	8000ae0 <LCD_Circle.constprop.0>
 8004c3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c42:	e450      	b.n	80044e6 <main+0xdea>
 8004c44:	0801b58b 	.word	0x0801b58b
 8004c48:	40012c00 	.word	0x40012c00
 8004c4c:	0801b58e 	.word	0x0801b58e
 8004c50:	2000031f 	.word	0x2000031f
 8004c54:	0801b5dd 	.word	0x0801b5dd
 8004c58:	0801b591 	.word	0x0801b591
						else if (temperatureLast < 10 && temperatureLast > 0) {
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	4630      	mov	r0, r6
 8004c60:	4639      	mov	r1, r7
 8004c62:	4b29      	ldr	r3, [pc, #164]	; (8004d08 <main+0x160c>)
 8004c64:	f7fe f948 	bl	8002ef8 <__aeabi_dcmplt>
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	d03a      	beq.n	8004ce2 <main+0x15e6>
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2300      	movs	r3, #0
 8004c70:	4630      	mov	r0, r6
 8004c72:	4639      	mov	r1, r7
 8004c74:	f7fe f95e 	bl	8002f34 <__aeabi_dcmpgt>
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	d032      	beq.n	8004ce2 <main+0x15e6>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8004c7c:	4632      	mov	r2, r6
 8004c7e:	463b      	mov	r3, r7
 8004c80:	4922      	ldr	r1, [pc, #136]	; (8004d0c <main+0x1610>)
 8004c82:	a812      	add	r0, sp, #72	; 0x48
 8004c84:	f001 fa0e 	bl	80060a4 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8004c88:	2300      	movs	r3, #0
 8004c8a:	21bb      	movs	r1, #187	; 0xbb
 8004c8c:	201b      	movs	r0, #27
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	4b1f      	ldr	r3, [pc, #124]	; (8004d10 <main+0x1614>)
 8004c92:	aa12      	add	r2, sp, #72	; 0x48
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8004c94:	f7fc ff26 	bl	8001ae4 <LCD_Font.constprop.0>
						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8004c98:	e954 6702 	ldrd	r6, r7, [r4, #-8]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	4639      	mov	r1, r7
 8004ca2:	4b19      	ldr	r3, [pc, #100]	; (8004d08 <main+0x160c>)
 8004ca4:	f7fe f93c 	bl	8002f20 <__aeabi_dcmpge>
 8004ca8:	b970      	cbnz	r0, 8004cc8 <main+0x15cc>
 8004caa:	2200      	movs	r2, #0
 8004cac:	2300      	movs	r3, #0
 8004cae:	4630      	mov	r0, r6
 8004cb0:	4639      	mov	r1, r7
 8004cb2:	f7fe f921 	bl	8002ef8 <__aeabi_dcmplt>
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	d032      	beq.n	8004d20 <main+0x1624>
 8004cba:	2200      	movs	r2, #0
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	4639      	mov	r1, r7
 8004cc0:	4b14      	ldr	r3, [pc, #80]	; (8004d14 <main+0x1618>)
 8004cc2:	f7fe f937 	bl	8002f34 <__aeabi_dcmpgt>
 8004cc6:	b358      	cbz	r0, 8004d20 <main+0x1624>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8004cc8:	4632      	mov	r2, r6
 8004cca:	463b      	mov	r3, r7
 8004ccc:	490f      	ldr	r1, [pc, #60]	; (8004d0c <main+0x1610>)
 8004cce:	a812      	add	r0, sp, #72	; 0x48
 8004cd0:	f001 f9e8 	bl	80060a4 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8004cd4:	4b10      	ldr	r3, [pc, #64]	; (8004d18 <main+0x161c>)
 8004cd6:	21bb      	movs	r1, #187	; 0xbb
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	2001      	movs	r0, #1
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <main+0x1614>)
 8004cde:	aa12      	add	r2, sp, #72	; 0x48
 8004ce0:	e03c      	b.n	8004d5c <main+0x1660>
						else if (temperatureLast <= -10) {
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	4639      	mov	r1, r7
 8004ce8:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <main+0x1618>)
 8004cea:	f7fe f90f 	bl	8002f0c <__aeabi_dcmple>
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	d0d2      	beq.n	8004c98 <main+0x159c>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 8004cf2:	4639      	mov	r1, r7
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	f7fe f93d 	bl	8002f74 <__aeabi_d2iz>
 8004cfa:	4908      	ldr	r1, [pc, #32]	; (8004d1c <main+0x1620>)
 8004cfc:	b242      	sxtb	r2, r0
 8004cfe:	a812      	add	r0, sp, #72	; 0x48
 8004d00:	f001 f9d0 	bl	80060a4 <siprintf>
 8004d04:	e613      	b.n	800492e <main+0x1232>
 8004d06:	bf00      	nop
 8004d08:	40240000 	.word	0x40240000
 8004d0c:	0801b5a3 	.word	0x0801b5a3
 8004d10:	08009d88 	.word	0x08009d88
 8004d14:	c0240000 	.word	0xc0240000
 8004d18:	00ffa500 	.word	0x00ffa500
 8004d1c:	0801b5aa 	.word	0x0801b5aa
						else if (temperature < 10 && temperature > 0) {
 8004d20:	2200      	movs	r2, #0
 8004d22:	4630      	mov	r0, r6
 8004d24:	4639      	mov	r1, r7
 8004d26:	4bc3      	ldr	r3, [pc, #780]	; (8005034 <main+0x1938>)
 8004d28:	f7fe f8e6 	bl	8002ef8 <__aeabi_dcmplt>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	f000 82ad 	beq.w	800528c <main+0x1b90>
 8004d32:	2200      	movs	r2, #0
 8004d34:	2300      	movs	r3, #0
 8004d36:	4630      	mov	r0, r6
 8004d38:	4639      	mov	r1, r7
 8004d3a:	f7fe f8fb 	bl	8002f34 <__aeabi_dcmpgt>
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	f000 82a4 	beq.w	800528c <main+0x1b90>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8004d44:	4632      	mov	r2, r6
 8004d46:	463b      	mov	r3, r7
 8004d48:	49bb      	ldr	r1, [pc, #748]	; (8005038 <main+0x193c>)
 8004d4a:	a812      	add	r0, sp, #72	; 0x48
 8004d4c:	f001 f9aa 	bl	80060a4 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8004d50:	21bb      	movs	r1, #187	; 0xbb
 8004d52:	201b      	movs	r0, #27
 8004d54:	4bb9      	ldr	r3, [pc, #740]	; (800503c <main+0x1940>)
 8004d56:	aa12      	add	r2, sp, #72	; 0x48
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	4bb9      	ldr	r3, [pc, #740]	; (8005040 <main+0x1944>)
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8004d5c:	f7fc fec2 	bl	8001ae4 <LCD_Font.constprop.0>
						temperatureLast = temperature;
 8004d60:	e954 2302 	ldrd	r2, r3, [r4, #-8]
 8004d64:	e9c4 2304 	strd	r2, r3, [r4, #16]
					if (humidity != humidityLast) {
 8004d68:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004d6c:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 8005044 <main+0x1948>
 8004d70:	e958 6702 	ldrd	r6, r7, [r8, #-8]
 8004d74:	4632      	mov	r2, r6
 8004d76:	463b      	mov	r3, r7
 8004d78:	f7fe f8b4 	bl	8002ee4 <__aeabi_dcmpeq>
 8004d7c:	4682      	mov	sl, r0
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	d132      	bne.n	8004de8 <main+0x16ec>
						sprintf(weatherPrintH, "%.1f'H", humidityLast);
 8004d82:	4632      	mov	r2, r6
 8004d84:	463b      	mov	r3, r7
 8004d86:	49b0      	ldr	r1, [pc, #704]	; (8005048 <main+0x194c>)
 8004d88:	a812      	add	r0, sp, #72	; 0x48
 8004d8a:	f001 f98b 	bl	80060a4 <siprintf>
						if (humidityLast >= 10)
 8004d8e:	e958 0102 	ldrd	r0, r1, [r8, #-8]
 8004d92:	2200      	movs	r2, #0
 8004d94:	4ba7      	ldr	r3, [pc, #668]	; (8005034 <main+0x1938>)
 8004d96:	f7fe f8c3 	bl	8002f20 <__aeabi_dcmpge>
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	f000 8289 	beq.w	80052b2 <main+0x1bb6>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8004da0:	21bb      	movs	r1, #187	; 0xbb
 8004da2:	20a0      	movs	r0, #160	; 0xa0
 8004da4:	4ba6      	ldr	r3, [pc, #664]	; (8005040 <main+0x1944>)
 8004da6:	f8cd a000 	str.w	sl, [sp]
 8004daa:	aa12      	add	r2, sp, #72	; 0x48
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8004dac:	f7fc fe9a 	bl	8001ae4 <LCD_Font.constprop.0>
						sprintf(weatherPrintH, "%.1f'H", humidity);
 8004db0:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004db4:	49a4      	ldr	r1, [pc, #656]	; (8005048 <main+0x194c>)
 8004db6:	a812      	add	r0, sp, #72	; 0x48
 8004db8:	f001 f974 	bl	80060a4 <siprintf>
						if (humidity >= 10)
 8004dbc:	e9d4 6700 	ldrd	r6, r7, [r4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	4639      	mov	r1, r7
 8004dc4:	4b9b      	ldr	r3, [pc, #620]	; (8005034 <main+0x1938>)
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	f7fe f8aa 	bl	8002f20 <__aeabi_dcmpge>
 8004dcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8004dd0:	21bb      	movs	r1, #187	; 0xbb
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	aa12      	add	r2, sp, #72	; 0x48
 8004dd6:	4b9a      	ldr	r3, [pc, #616]	; (8005040 <main+0x1944>)
						if (humidity >= 10)
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	f000 8270 	beq.w	80052be <main+0x1bc2>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8004dde:	20a0      	movs	r0, #160	; 0xa0
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8004de0:	f7fc fe80 	bl	8001ae4 <LCD_Font.constprop.0>
						humidityLast = humidity;
 8004de4:	e948 6702 	strd	r6, r7, [r8, #-8]
					if (pressureLast != pressure) {
 8004de8:	4e98      	ldr	r6, [pc, #608]	; (800504c <main+0x1950>)
 8004dea:	f8b6 2670 	ldrh.w	r2, [r6, #1648]	; 0x670
 8004dee:	f8b6 3658 	ldrh.w	r3, [r6, #1624]	; 0x658
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d031      	beq.n	8004e5a <main+0x175e>
						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d", pressureLast);
 8004df6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8004dfa:	bf2c      	ite	cs
 8004dfc:	4994      	ldrcs	r1, [pc, #592]	; (8005050 <main+0x1954>)
						else sprintf(weatherPrintP, "0%02dP", pressureLast);
 8004dfe:	4995      	ldrcc	r1, [pc, #596]	; (8005054 <main+0x1958>)
 8004e00:	a812      	add	r0, sp, #72	; 0x48
 8004e02:	f001 f94f 	bl	80060a4 <siprintf>
						LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 8004e06:	2300      	movs	r3, #0
 8004e08:	21bb      	movs	r1, #187	; 0xbb
 8004e0a:	f240 1041 	movw	r0, #321	; 0x141
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	aa12      	add	r2, sp, #72	; 0x48
 8004e12:	4b8b      	ldr	r3, [pc, #556]	; (8005040 <main+0x1944>)
 8004e14:	f7fc fe66 	bl	8001ae4 <LCD_Font.constprop.0>
						if (pressure >= 1000) sprintf(weatherPrintP, "%02d", pressure);
 8004e18:	f8b6 2658 	ldrh.w	r2, [r6, #1624]	; 0x658
						else sprintf(weatherPrintP, "0%02dP", pressure);
 8004e1c:	a812      	add	r0, sp, #72	; 0x48
						if (pressure >= 1000) sprintf(weatherPrintP, "%02d", pressure);
 8004e1e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8004e22:	bf2c      	ite	cs
 8004e24:	498a      	ldrcs	r1, [pc, #552]	; (8005050 <main+0x1954>)
						else sprintf(weatherPrintP, "0%02dP", pressure);
 8004e26:	498b      	ldrcc	r1, [pc, #556]	; (8005054 <main+0x1958>)
 8004e28:	f001 f93c 	bl	80060a4 <siprintf>
						LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 8004e2c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004e30:	21bb      	movs	r1, #187	; 0xbb
 8004e32:	f240 1041 	movw	r0, #321	; 0x141
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	aa12      	add	r2, sp, #72	; 0x48
 8004e3a:	4b81      	ldr	r3, [pc, #516]	; (8005040 <main+0x1944>)
 8004e3c:	f7fc fe52 	bl	8001ae4 <LCD_Font.constprop.0>
						LCD_Font(321, 187, "0", &DejaVu_Sans_48, 1, BLACK);
 8004e40:	2300      	movs	r3, #0
 8004e42:	21bb      	movs	r1, #187	; 0xbb
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	f240 1041 	movw	r0, #321	; 0x141
 8004e4a:	4b7d      	ldr	r3, [pc, #500]	; (8005040 <main+0x1944>)
 8004e4c:	4a82      	ldr	r2, [pc, #520]	; (8005058 <main+0x195c>)
 8004e4e:	f7fc fe49 	bl	8001ae4 <LCD_Font.constprop.0>
						pressureLast = pressure;
 8004e52:	f8b6 3658 	ldrh.w	r3, [r6, #1624]	; 0x658
 8004e56:	f8a6 3670 	strh.w	r3, [r6, #1648]	; 0x670
					if (AT24XX_Read(0) != rtcHrs) {
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	f7fb fff2 	bl	8000e44 <AT24XX_Read>
 8004e60:	f896 163a 	ldrb.w	r1, [r6, #1594]	; 0x63a
 8004e64:	4288      	cmp	r0, r1
 8004e66:	f000 80b1 	beq.w	8004fcc <main+0x18d0>
						AT24XX_Update(0, rtcHrs);
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	f7fc f99c 	bl	80011a8 <AT24XX_Update>
 8004e70:	46da      	mov	sl, fp
 8004e72:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8004e76:	4638      	mov	r0, r7
 8004e78:	f7fb ffe4 	bl	8000e44 <AT24XX_Read>
 8004e7c:	4680      	mov	r8, r0
 8004e7e:	1c78      	adds	r0, r7, #1
 8004e80:	b280      	uxth	r0, r0
 8004e82:	f7fb ffdf 	bl	8000e44 <AT24XX_Read>
 8004e86:	f240 531e 	movw	r3, #1310	; 0x51e
 8004e8a:	3702      	adds	r7, #2
 8004e8c:	b2bf      	uxth	r7, r7
	return (byteH << 8) | byteL;
 8004e8e:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8004e92:	429f      	cmp	r7, r3
 8004e94:	f82a 8b02 	strh.w	r8, [sl], #2
 8004e98:	d1ed      	bne.n	8004e76 <main+0x177a>
						for (uint16_t i = 154; i > 0; i--) hT[i] = hT[i - 1];
 8004e9a:	4970      	ldr	r1, [pc, #448]	; (800505c <main+0x1960>)
 8004e9c:	f44f 729a 	mov.w	r2, #308	; 0x134
 8004ea0:	1c88      	adds	r0, r1, #2
 8004ea2:	f004 f93f 	bl	8009124 <memmove>
						hT[0] = (uint16_t) (temperature * 10);
 8004ea6:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	4b61      	ldr	r3, [pc, #388]	; (8005034 <main+0x1938>)
 8004eae:	f7fd fdb1 	bl	8002a14 <__aeabi_dmul>
 8004eb2:	f7fe f887 	bl	8002fc4 <__aeabi_d2uiz>
 8004eb6:	46da      	mov	sl, fp
 8004eb8:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 8004ebc:	f8a6 0284 	strh.w	r0, [r6, #644]	; 0x284
							AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 8004ec0:	f93a 8b02 	ldrsh.w	r8, [sl], #2
 8004ec4:	4638      	mov	r0, r7
 8004ec6:	fa5f f188 	uxtb.w	r1, r8
 8004eca:	f7fc f96d 	bl	80011a8 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 8004ece:	1c78      	adds	r0, r7, #1
 8004ed0:	f3c8 2107 	ubfx	r1, r8, #8, #8
 8004ed4:	b280      	uxth	r0, r0
 8004ed6:	f7fc f967 	bl	80011a8 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8004eda:	f240 531e 	movw	r3, #1310	; 0x51e
 8004ede:	3702      	adds	r7, #2
 8004ee0:	b2bf      	uxth	r7, r7
 8004ee2:	429f      	cmp	r7, r3
 8004ee4:	d1ec      	bne.n	8004ec0 <main+0x17c4>
 8004ee6:	46aa      	mov	sl, r5
 8004ee8:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8004eec:	4638      	mov	r0, r7
 8004eee:	f7fb ffa9 	bl	8000e44 <AT24XX_Read>
 8004ef2:	4680      	mov	r8, r0
 8004ef4:	1c78      	adds	r0, r7, #1
 8004ef6:	b280      	uxth	r0, r0
 8004ef8:	f7fb ffa4 	bl	8000e44 <AT24XX_Read>
 8004efc:	f640 1306 	movw	r3, #2310	; 0x906
 8004f00:	3702      	adds	r7, #2
 8004f02:	b2bf      	uxth	r7, r7
	return (byteH << 8) | byteL;
 8004f04:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8004f08:	429f      	cmp	r7, r3
 8004f0a:	f82a 8b02 	strh.w	r8, [sl], #2
 8004f0e:	d1ed      	bne.n	8004eec <main+0x17f0>
						for (uint16_t i = 154; i > 0; i--) hH[i] = hH[i - 1];
 8004f10:	4953      	ldr	r1, [pc, #332]	; (8005060 <main+0x1964>)
 8004f12:	f44f 729a 	mov.w	r2, #308	; 0x134
 8004f16:	1c88      	adds	r0, r1, #2
 8004f18:	f004 f904 	bl	8009124 <memmove>
						hH[0] = (uint16_t) (humidity * 10);
 8004f1c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	4b44      	ldr	r3, [pc, #272]	; (8005034 <main+0x1938>)
 8004f24:	f7fd fd76 	bl	8002a14 <__aeabi_dmul>
 8004f28:	f7fe f84c 	bl	8002fc4 <__aeabi_d2uiz>
 8004f2c:	46aa      	mov	sl, r5
 8004f2e:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
 8004f32:	f8a6 03ba 	strh.w	r0, [r6, #954]	; 0x3ba
							AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 8004f36:	f93a 8b02 	ldrsh.w	r8, [sl], #2
 8004f3a:	4638      	mov	r0, r7
 8004f3c:	fa5f f188 	uxtb.w	r1, r8
 8004f40:	f7fc f932 	bl	80011a8 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8004f44:	1c78      	adds	r0, r7, #1
 8004f46:	f3c8 2107 	ubfx	r1, r8, #8, #8
 8004f4a:	b280      	uxth	r0, r0
 8004f4c:	f7fc f92c 	bl	80011a8 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8004f50:	f640 1306 	movw	r3, #2310	; 0x906
 8004f54:	3702      	adds	r7, #2
 8004f56:	b2bf      	uxth	r7, r7
 8004f58:	429f      	cmp	r7, r3
 8004f5a:	d1ec      	bne.n	8004f36 <main+0x183a>
 8004f5c:	46ca      	mov	sl, r9
 8004f5e:	f640 37b8 	movw	r7, #3000	; 0xbb8
						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8004f62:	4638      	mov	r0, r7
 8004f64:	f7fb ff6e 	bl	8000e44 <AT24XX_Read>
 8004f68:	4680      	mov	r8, r0
 8004f6a:	1c78      	adds	r0, r7, #1
 8004f6c:	b280      	uxth	r0, r0
 8004f6e:	f7fb ff69 	bl	8000e44 <AT24XX_Read>
 8004f72:	f640 43ee 	movw	r3, #3310	; 0xcee
 8004f76:	3702      	adds	r7, #2
 8004f78:	b2bf      	uxth	r7, r7
	return (byteH << 8) | byteL;
 8004f7a:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8004f7e:	429f      	cmp	r7, r3
 8004f80:	f82a 8b02 	strh.w	r8, [sl], #2
 8004f84:	d1ed      	bne.n	8004f62 <main+0x1866>
						hP[0] = (uint16_t)pressure;
 8004f86:	46ca      	mov	sl, r9
 8004f88:	f640 37b8 	movw	r7, #3000	; 0xbb8
						for (uint16_t i = 154; i > 0; i--) hP[i] = hP[i - 1];
 8004f8c:	4935      	ldr	r1, [pc, #212]	; (8005064 <main+0x1968>)
 8004f8e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8004f92:	1c88      	adds	r0, r1, #2
 8004f94:	f004 f8c6 	bl	8009124 <memmove>
						hP[0] = (uint16_t)pressure;
 8004f98:	f8b6 3658 	ldrh.w	r3, [r6, #1624]	; 0x658
 8004f9c:	f8a6 34f0 	strh.w	r3, [r6, #1264]	; 0x4f0
							AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 8004fa0:	f93a 8b02 	ldrsh.w	r8, [sl], #2
 8004fa4:	4638      	mov	r0, r7
 8004fa6:	fa5f f188 	uxtb.w	r1, r8
 8004faa:	f7fc f8fd 	bl	80011a8 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8004fae:	1c78      	adds	r0, r7, #1
 8004fb0:	f3c8 2107 	ubfx	r1, r8, #8, #8
 8004fb4:	b280      	uxth	r0, r0
 8004fb6:	f7fc f8f7 	bl	80011a8 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8004fba:	f640 43ee 	movw	r3, #3310	; 0xcee
 8004fbe:	3702      	adds	r7, #2
 8004fc0:	b2bf      	uxth	r7, r7
 8004fc2:	429f      	cmp	r7, r3
 8004fc4:	d1ec      	bne.n	8004fa0 <main+0x18a4>
						viewGraphs = 0;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f886 3672 	strb.w	r3, [r6, #1650]	; 0x672
					LCD_Rect(2, 189, 157, 129, 1, BLUE);
 8004fcc:	2002      	movs	r0, #2
 8004fce:	f7fb fe56 	bl	8000c7e <LCD_Rect.constprop.0>
					int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8004fd2:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	4b16      	ldr	r3, [pc, #88]	; (8005034 <main+0x1938>)
 8004fda:	f7fd fd1b 	bl	8002a14 <__aeabi_dmul>
 8004fde:	f7fd ffc9 	bl	8002f74 <__aeabi_d2iz>
					LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	229e      	movs	r2, #158	; 0x9e
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004fe6:	b287      	uxth	r7, r0
 8004fe8:	3fe2      	subs	r7, #226	; 0xe2
 8004fea:	01ff      	lsls	r7, r7, #7
 8004fec:	bf48      	it	mi
 8004fee:	373f      	addmi	r7, #63	; 0x3f
					LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	21bf      	movs	r1, #191	; 0xbf
 8004ff4:	f240 133d 	movw	r3, #317	; 0x13d
 8004ff8:	4610      	mov	r0, r2
					int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8004ffa:	f347 178f 	sbfx	r7, r7, #6, #16
					LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 8004ffe:	f7fb fe03 	bl	8000c08 <LCD_Line.constprop.0>
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8005002:	2f00      	cmp	r7, #0
 8005004:	dd30      	ble.n	8005068 <main+0x196c>
 8005006:	2f7f      	cmp	r7, #127	; 0x7f
 8005008:	bfa8      	it	ge
 800500a:	277f      	movge	r7, #127	; 0x7f
 800500c:	b23f      	sxth	r7, r7
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 800500e:	f1c7 037f 	rsb	r3, r7, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	b2db      	uxtb	r3, r3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8005016:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 800501a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800501e:	229e      	movs	r2, #158	; 0x9e
 8005020:	f5c7 779f 	rsb	r7, r7, #318	; 0x13e
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	4610      	mov	r0, r2
 8005028:	f240 133d 	movw	r3, #317	; 0x13d
 800502c:	b2b9      	uxth	r1, r7
 800502e:	f7fb fdeb 	bl	8000c08 <LCD_Line.constprop.0>
 8005032:	e019      	b.n	8005068 <main+0x196c>
 8005034:	40240000 	.word	0x40240000
 8005038:	0801b5a3 	.word	0x0801b5a3
 800503c:	00ffa500 	.word	0x00ffa500
 8005040:	08009d88 	.word	0x08009d88
 8005044:	20000870 	.word	0x20000870
 8005048:	0801b5b0 	.word	0x0801b5b0
 800504c:	20000200 	.word	0x20000200
 8005050:	0801b59e 	.word	0x0801b59e
 8005054:	0801b5b7 	.word	0x0801b5b7
 8005058:	0801b654 	.word	0x0801b654
 800505c:	20000484 	.word	0x20000484
 8005060:	200005ba 	.word	0x200005ba
 8005064:	200006f0 	.word	0x200006f0
					LCD_Rect(161, 189, 157, 129, 1, BLUE);
 8005068:	20a1      	movs	r0, #161	; 0xa1
 800506a:	f7fb fe08 	bl	8000c7e <LCD_Rect.constprop.0>
					valMap = map(((int16_t)(humidity * 10)), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 800506e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005072:	2200      	movs	r2, #0
 8005074:	4b9c      	ldr	r3, [pc, #624]	; (80052e8 <main+0x1bec>)
 8005076:	f7fd fccd 	bl	8002a14 <__aeabi_dmul>
 800507a:	f7fd ff7b 	bl	8002f74 <__aeabi_d2iz>
					LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 800507e:	2300      	movs	r3, #0
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	f240 133d 	movw	r3, #317	; 0x13d
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005086:	b284      	uxth	r4, r0
 8005088:	3c64      	subs	r4, #100	; 0x64
					LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 800508a:	461a      	mov	r2, r3
 800508c:	21bf      	movs	r1, #191	; 0xbf
 800508e:	4618      	mov	r0, r3
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005090:	01e4      	lsls	r4, r4, #7
					LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 8005092:	f7fb fdb9 	bl	8000c08 <LCD_Line.constprop.0>
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8005096:	f5b4 7f20 	cmp.w	r4, #640	; 0x280
 800509a:	db19      	blt.n	80050d0 <main+0x19d4>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800509c:	f44f 7120 	mov.w	r1, #640	; 0x280
 80050a0:	fb94 f4f1 	sdiv	r4, r4, r1
 80050a4:	b224      	sxth	r4, r4
 80050a6:	2c7f      	cmp	r4, #127	; 0x7f
 80050a8:	bfa8      	it	ge
 80050aa:	247f      	movge	r4, #127	; 0x7f
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80050ac:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 80050b8:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	f240 133d 	movw	r3, #317	; 0x13d
 80050c2:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 80050c6:	461a      	mov	r2, r3
 80050c8:	4618      	mov	r0, r3
 80050ca:	b289      	uxth	r1, r1
 80050cc:	f7fb fd9c 	bl	8000c08 <LCD_Line.constprop.0>
					LCD_Rect(320, 189, 157, 129, 1, BLUE);
 80050d0:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80050d4:	f7fb fdd3 	bl	8000c7e <LCD_Rect.constprop.0>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80050d8:	f46f 726a 	mvn.w	r2, #936	; 0x3a8
 80050dc:	f8b6 4658 	ldrh.w	r4, [r6, #1624]	; 0x658
					LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 80050e0:	2300      	movs	r3, #0
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80050e2:	4414      	add	r4, r2
					LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 80050e4:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	21bf      	movs	r1, #191	; 0xbf
 80050ec:	f240 133d 	movw	r3, #317	; 0x13d
 80050f0:	4610      	mov	r0, r2
					valMap = map(((int16_t)(pressure)), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 80050f2:	b224      	sxth	r4, r4
					LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 80050f4:	f7fb fd88 	bl	8000c08 <LCD_Line.constprop.0>
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 80050f8:	2c00      	cmp	r4, #0
 80050fa:	dd15      	ble.n	8005128 <main+0x1a2c>
 80050fc:	2c7f      	cmp	r4, #127	; 0x7f
 80050fe:	bfa8      	it	ge
 8005100:	247f      	movge	r4, #127	; 0x7f
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8005102:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	b2db      	uxtb	r3, r3
 800510a:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 800510e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8005112:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8005116:	f5c4 749f 	rsb	r4, r4, #318	; 0x13e
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	4610      	mov	r0, r2
 800511e:	f240 133d 	movw	r3, #317	; 0x13d
 8005122:	b2a1      	uxth	r1, r4
 8005124:	f7fb fd70 	bl	8000c08 <LCD_Line.constprop.0>
					if (!viewGraphs) {
 8005128:	f896 8672 	ldrb.w	r8, [r6, #1650]	; 0x672
 800512c:	f1b8 0f00 	cmp.w	r8, #0
 8005130:	f040 80a5 	bne.w	800527e <main+0x1b82>
 8005134:	465f      	mov	r7, fp
 8005136:	f04f 0a9d 	mov.w	sl, #157	; 0x9d
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800513a:	f837 4b02 	ldrh.w	r4, [r7], #2
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 800513e:	f240 133d 	movw	r3, #317	; 0x13d
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005142:	3ce2      	subs	r4, #226	; 0xe2
 8005144:	01e4      	lsls	r4, r4, #7
 8005146:	bf48      	it	mi
 8005148:	343f      	addmi	r4, #63	; 0x3f
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 800514a:	4652      	mov	r2, sl
 800514c:	21bf      	movs	r1, #191	; 0xbf
 800514e:	4650      	mov	r0, sl
							valMap = map(((int16_t)hT[i]), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8005150:	f344 148f 	sbfx	r4, r4, #6, #16
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8005154:	f8cd 8000 	str.w	r8, [sp]
 8005158:	f7fb fd56 	bl	8000c08 <LCD_Line.constprop.0>
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 800515c:	2c00      	cmp	r4, #0
 800515e:	dd15      	ble.n	800518c <main+0x1a90>
 8005160:	2c7f      	cmp	r4, #127	; 0x7f
 8005162:	bfa8      	it	ge
 8005164:	247f      	movge	r4, #127	; 0x7f
 8005166:	b224      	sxth	r4, r4
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8005168:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	b2db      	uxtb	r3, r3
 8005170:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 8005174:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8005178:	f5c4 749f 	rsb	r4, r4, #318	; 0x13e
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	4652      	mov	r2, sl
 8005180:	f240 133d 	movw	r3, #317	; 0x13d
 8005184:	4650      	mov	r0, sl
 8005186:	b2a1      	uxth	r1, r4
 8005188:	f7fb fd3e 	bl	8000c08 <LCD_Line.constprop.0>
						for (uint16_t i = 0; i < 155 ; i++) {
 800518c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005190:	fa1f fa8a 	uxth.w	sl, sl
 8005194:	f1ba 0f02 	cmp.w	sl, #2
 8005198:	d1cf      	bne.n	800513a <main+0x1a3e>
 800519a:	462f      	mov	r7, r5
 800519c:	f44f 7a9e 	mov.w	sl, #316	; 0x13c
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 80051a0:	f04f 0800 	mov.w	r8, #0
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80051a4:	f837 4b02 	ldrh.w	r4, [r7], #2
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 80051a8:	f240 133d 	movw	r3, #317	; 0x13d
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80051ac:	3c64      	subs	r4, #100	; 0x64
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 80051ae:	4652      	mov	r2, sl
 80051b0:	21bf      	movs	r1, #191	; 0xbf
 80051b2:	4650      	mov	r0, sl
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80051b4:	01e4      	lsls	r4, r4, #7
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 80051b6:	f8cd 8000 	str.w	r8, [sp]
 80051ba:	f7fb fd25 	bl	8000c08 <LCD_Line.constprop.0>
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 80051be:	f5b4 7f20 	cmp.w	r4, #640	; 0x280
 80051c2:	db19      	blt.n	80051f8 <main+0x1afc>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80051c4:	f44f 7120 	mov.w	r1, #640	; 0x280
 80051c8:	fb94 f4f1 	sdiv	r4, r4, r1
 80051cc:	b224      	sxth	r4, r4
 80051ce:	2c7f      	cmp	r4, #127	; 0x7f
 80051d0:	bfa8      	it	ge
 80051d2:	247f      	movge	r4, #127	; 0x7f
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80051d4:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 80051e0:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80051e4:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	4652      	mov	r2, sl
 80051ec:	f240 133d 	movw	r3, #317	; 0x13d
 80051f0:	4650      	mov	r0, sl
 80051f2:	b289      	uxth	r1, r1
 80051f4:	f7fb fd08 	bl	8000c08 <LCD_Line.constprop.0>
						for (uint16_t i = 0; i < 155 ; i++) {
 80051f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051fc:	fa1f fa8a 	uxth.w	sl, sl
 8005200:	f1ba 0fa1 	cmp.w	sl, #161	; 0xa1
 8005204:	d1ce      	bne.n	80051a4 <main+0x1aa8>
 8005206:	464f      	mov	r7, r9
 8005208:	f240 1adb 	movw	sl, #475	; 0x1db
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 800520c:	f04f 0800 	mov.w	r8, #0
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005210:	f46f 736a 	mvn.w	r3, #936	; 0x3a8
 8005214:	f837 4b02 	ldrh.w	r4, [r7], #2
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 8005218:	4652      	mov	r2, sl
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800521a:	441c      	add	r4, r3
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 800521c:	21bf      	movs	r1, #191	; 0xbf
 800521e:	f240 133d 	movw	r3, #317	; 0x13d
 8005222:	4650      	mov	r0, sl
							valMap = map(((int16_t)hP[i]), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8005224:	b224      	sxth	r4, r4
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 8005226:	f8cd 8000 	str.w	r8, [sp]
 800522a:	f7fb fced 	bl	8000c08 <LCD_Line.constprop.0>
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 800522e:	2c00      	cmp	r4, #0
 8005230:	dd14      	ble.n	800525c <main+0x1b60>
 8005232:	2c7f      	cmp	r4, #127	; 0x7f
 8005234:	bfa8      	it	ge
 8005236:	247f      	movge	r4, #127	; 0x7f
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8005238:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 8005244:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8005248:	f5c4 749f 	rsb	r4, r4, #318	; 0x13e
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	4652      	mov	r2, sl
 8005250:	f240 133d 	movw	r3, #317	; 0x13d
 8005254:	4650      	mov	r0, sl
 8005256:	b2a1      	uxth	r1, r4
 8005258:	f7fb fcd6 	bl	8000c08 <LCD_Line.constprop.0>
						for (uint16_t i = 0; i < 155 ; i++) {
 800525c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005260:	fa1f fa8a 	uxth.w	sl, sl
 8005264:	f5ba 7fa0 	cmp.w	sl, #320	; 0x140
 8005268:	d1d2      	bne.n	8005210 <main+0x1b14>
						for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 800526a:	2300      	movs	r3, #0
 800526c:	4a1f      	ldr	r2, [pc, #124]	; (80052ec <main+0x1bf0>)
 800526e:	6353      	str	r3, [r2, #52]	; 0x34
 8005270:	3301      	adds	r3, #1
 8005272:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8005276:	d1fa      	bne.n	800526e <main+0x1b72>
						viewGraphs = 1;
 8005278:	2301      	movs	r3, #1
 800527a:	f886 3672 	strb.w	r3, [r6, #1650]	; 0x672
			rtcSecLast = rtcSec;
 800527e:	4b1c      	ldr	r3, [pc, #112]	; (80052f0 <main+0x1bf4>)
 8005280:	f893 2638 	ldrb.w	r2, [r3, #1592]	; 0x638
 8005284:	4b1b      	ldr	r3, [pc, #108]	; (80052f4 <main+0x1bf8>)
 8005286:	721a      	strb	r2, [r3, #8]
	{
 8005288:	f7ff b8e7 	b.w	800445a <main+0xd5e>
						else if (temperature <= -10) {
 800528c:	2200      	movs	r2, #0
 800528e:	4630      	mov	r0, r6
 8005290:	4639      	mov	r1, r7
 8005292:	4b19      	ldr	r3, [pc, #100]	; (80052f8 <main+0x1bfc>)
 8005294:	f7fd fe3a 	bl	8002f0c <__aeabi_dcmple>
 8005298:	2800      	cmp	r0, #0
 800529a:	f43f ad61 	beq.w	8004d60 <main+0x1664>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 800529e:	4639      	mov	r1, r7
 80052a0:	4630      	mov	r0, r6
 80052a2:	f7fd fe67 	bl	8002f74 <__aeabi_d2iz>
 80052a6:	4915      	ldr	r1, [pc, #84]	; (80052fc <main+0x1c00>)
 80052a8:	b242      	sxtb	r2, r0
 80052aa:	a812      	add	r0, sp, #72	; 0x48
 80052ac:	f000 fefa 	bl	80060a4 <siprintf>
 80052b0:	e510      	b.n	8004cd4 <main+0x15d8>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 80052b2:	9000      	str	r0, [sp, #0]
 80052b4:	21bb      	movs	r1, #187	; 0xbb
 80052b6:	20ba      	movs	r0, #186	; 0xba
 80052b8:	4b11      	ldr	r3, [pc, #68]	; (8005300 <main+0x1c04>)
 80052ba:	aa12      	add	r2, sp, #72	; 0x48
 80052bc:	e576      	b.n	8004dac <main+0x16b0>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 80052be:	20ba      	movs	r0, #186	; 0xba
 80052c0:	e58e      	b.n	8004de0 <main+0x16e4>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c6:	f43f a853 	beq.w	8004370 <main+0xc74>
 80052ca:	4a0e      	ldr	r2, [pc, #56]	; (8005304 <main+0x1c08>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	f43f a84f 	beq.w	8004370 <main+0xc74>
 80052d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052d6:	4293      	cmp	r3, r2
 80052d8:	f43f a84a 	beq.w	8004370 <main+0xc74>
    __HAL_TIM_ENABLE(htim);
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	f7ff b860 	b.w	80043a8 <main+0xcac>
 80052e8:	40240000 	.word	0x40240000
 80052ec:	40012c00 	.word	0x40012c00
 80052f0:	20000200 	.word	0x20000200
 80052f4:	20000000 	.word	0x20000000
 80052f8:	c0240000 	.word	0xc0240000
 80052fc:	0801b5aa 	.word	0x0801b5aa
 8005300:	08009d88 	.word	0x08009d88
 8005304:	40000400 	.word	0x40000400

08005308 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005308:	480c      	ldr	r0, [pc, #48]	; (800533c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800530a:	490d      	ldr	r1, [pc, #52]	; (8005340 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800530c:	4a0d      	ldr	r2, [pc, #52]	; (8005344 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800530e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005310:	e002      	b.n	8005318 <LoopCopyDataInit>

08005312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005316:	3304      	adds	r3, #4

08005318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800531a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800531c:	d3f9      	bcc.n	8005312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800531e:	4a0a      	ldr	r2, [pc, #40]	; (8005348 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005320:	4c0a      	ldr	r4, [pc, #40]	; (800534c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005324:	e001      	b.n	800532a <LoopFillZerobss>

08005326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005328:	3204      	adds	r2, #4

0800532a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800532a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800532c:	d3fb      	bcc.n	8005326 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800532e:	f7fd f9ab 	bl	8002688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005332:	f000 f819 	bl	8005368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005336:	f7fe f9e1 	bl	80036fc <main>
  bx lr
 800533a:	4770      	bx	lr
  ldr r0, =_sdata
 800533c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005340:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8005344:	0801baec 	.word	0x0801baec
  ldr r2, =_sbss
 8005348:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800534c:	20000888 	.word	0x20000888

08005350 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005350:	e7fe      	b.n	8005350 <ADC1_2_IRQHandler>

08005352 <atoi>:
 8005352:	220a      	movs	r2, #10
 8005354:	2100      	movs	r1, #0
 8005356:	f001 bd53 	b.w	8006e00 <strtol>
	...

0800535c <__errno>:
 800535c:	4b01      	ldr	r3, [pc, #4]	; (8005364 <__errno+0x8>)
 800535e:	6818      	ldr	r0, [r3, #0]
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	2000000c 	.word	0x2000000c

08005368 <__libc_init_array>:
 8005368:	b570      	push	{r4, r5, r6, lr}
 800536a:	2600      	movs	r6, #0
 800536c:	4d0c      	ldr	r5, [pc, #48]	; (80053a0 <__libc_init_array+0x38>)
 800536e:	4c0d      	ldr	r4, [pc, #52]	; (80053a4 <__libc_init_array+0x3c>)
 8005370:	1b64      	subs	r4, r4, r5
 8005372:	10a4      	asrs	r4, r4, #2
 8005374:	42a6      	cmp	r6, r4
 8005376:	d109      	bne.n	800538c <__libc_init_array+0x24>
 8005378:	f004 fcee 	bl	8009d58 <_init>
 800537c:	2600      	movs	r6, #0
 800537e:	4d0a      	ldr	r5, [pc, #40]	; (80053a8 <__libc_init_array+0x40>)
 8005380:	4c0a      	ldr	r4, [pc, #40]	; (80053ac <__libc_init_array+0x44>)
 8005382:	1b64      	subs	r4, r4, r5
 8005384:	10a4      	asrs	r4, r4, #2
 8005386:	42a6      	cmp	r6, r4
 8005388:	d105      	bne.n	8005396 <__libc_init_array+0x2e>
 800538a:	bd70      	pop	{r4, r5, r6, pc}
 800538c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005390:	4798      	blx	r3
 8005392:	3601      	adds	r6, #1
 8005394:	e7ee      	b.n	8005374 <__libc_init_array+0xc>
 8005396:	f855 3b04 	ldr.w	r3, [r5], #4
 800539a:	4798      	blx	r3
 800539c:	3601      	adds	r6, #1
 800539e:	e7f2      	b.n	8005386 <__libc_init_array+0x1e>
 80053a0:	0801bae4 	.word	0x0801bae4
 80053a4:	0801bae4 	.word	0x0801bae4
 80053a8:	0801bae4 	.word	0x0801bae4
 80053ac:	0801bae8 	.word	0x0801bae8

080053b0 <memset>:
 80053b0:	4603      	mov	r3, r0
 80053b2:	4402      	add	r2, r0
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d100      	bne.n	80053ba <memset+0xa>
 80053b8:	4770      	bx	lr
 80053ba:	f803 1b01 	strb.w	r1, [r3], #1
 80053be:	e7f9      	b.n	80053b4 <memset+0x4>

080053c0 <__cvt>:
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053c6:	461f      	mov	r7, r3
 80053c8:	bfbb      	ittet	lt
 80053ca:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80053ce:	461f      	movlt	r7, r3
 80053d0:	2300      	movge	r3, #0
 80053d2:	232d      	movlt	r3, #45	; 0x2d
 80053d4:	b088      	sub	sp, #32
 80053d6:	4614      	mov	r4, r2
 80053d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80053da:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80053dc:	7013      	strb	r3, [r2, #0]
 80053de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80053e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80053e4:	f023 0820 	bic.w	r8, r3, #32
 80053e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80053ec:	d005      	beq.n	80053fa <__cvt+0x3a>
 80053ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80053f2:	d100      	bne.n	80053f6 <__cvt+0x36>
 80053f4:	3501      	adds	r5, #1
 80053f6:	2302      	movs	r3, #2
 80053f8:	e000      	b.n	80053fc <__cvt+0x3c>
 80053fa:	2303      	movs	r3, #3
 80053fc:	aa07      	add	r2, sp, #28
 80053fe:	9204      	str	r2, [sp, #16]
 8005400:	aa06      	add	r2, sp, #24
 8005402:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005406:	e9cd 3500 	strd	r3, r5, [sp]
 800540a:	4622      	mov	r2, r4
 800540c:	463b      	mov	r3, r7
 800540e:	f001 fd8f 	bl	8006f30 <_dtoa_r>
 8005412:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005416:	4606      	mov	r6, r0
 8005418:	d102      	bne.n	8005420 <__cvt+0x60>
 800541a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800541c:	07db      	lsls	r3, r3, #31
 800541e:	d522      	bpl.n	8005466 <__cvt+0xa6>
 8005420:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005424:	eb06 0905 	add.w	r9, r6, r5
 8005428:	d110      	bne.n	800544c <__cvt+0x8c>
 800542a:	7833      	ldrb	r3, [r6, #0]
 800542c:	2b30      	cmp	r3, #48	; 0x30
 800542e:	d10a      	bne.n	8005446 <__cvt+0x86>
 8005430:	2200      	movs	r2, #0
 8005432:	2300      	movs	r3, #0
 8005434:	4620      	mov	r0, r4
 8005436:	4639      	mov	r1, r7
 8005438:	f7fd fd54 	bl	8002ee4 <__aeabi_dcmpeq>
 800543c:	b918      	cbnz	r0, 8005446 <__cvt+0x86>
 800543e:	f1c5 0501 	rsb	r5, r5, #1
 8005442:	f8ca 5000 	str.w	r5, [sl]
 8005446:	f8da 3000 	ldr.w	r3, [sl]
 800544a:	4499      	add	r9, r3
 800544c:	2200      	movs	r2, #0
 800544e:	2300      	movs	r3, #0
 8005450:	4620      	mov	r0, r4
 8005452:	4639      	mov	r1, r7
 8005454:	f7fd fd46 	bl	8002ee4 <__aeabi_dcmpeq>
 8005458:	b108      	cbz	r0, 800545e <__cvt+0x9e>
 800545a:	f8cd 901c 	str.w	r9, [sp, #28]
 800545e:	2230      	movs	r2, #48	; 0x30
 8005460:	9b07      	ldr	r3, [sp, #28]
 8005462:	454b      	cmp	r3, r9
 8005464:	d307      	bcc.n	8005476 <__cvt+0xb6>
 8005466:	4630      	mov	r0, r6
 8005468:	9b07      	ldr	r3, [sp, #28]
 800546a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800546c:	1b9b      	subs	r3, r3, r6
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	b008      	add	sp, #32
 8005472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005476:	1c59      	adds	r1, r3, #1
 8005478:	9107      	str	r1, [sp, #28]
 800547a:	701a      	strb	r2, [r3, #0]
 800547c:	e7f0      	b.n	8005460 <__cvt+0xa0>

0800547e <__exponent>:
 800547e:	4603      	mov	r3, r0
 8005480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005482:	2900      	cmp	r1, #0
 8005484:	f803 2b02 	strb.w	r2, [r3], #2
 8005488:	bfb6      	itet	lt
 800548a:	222d      	movlt	r2, #45	; 0x2d
 800548c:	222b      	movge	r2, #43	; 0x2b
 800548e:	4249      	neglt	r1, r1
 8005490:	2909      	cmp	r1, #9
 8005492:	7042      	strb	r2, [r0, #1]
 8005494:	dd2b      	ble.n	80054ee <__exponent+0x70>
 8005496:	f10d 0407 	add.w	r4, sp, #7
 800549a:	46a4      	mov	ip, r4
 800549c:	270a      	movs	r7, #10
 800549e:	fb91 f6f7 	sdiv	r6, r1, r7
 80054a2:	460a      	mov	r2, r1
 80054a4:	46a6      	mov	lr, r4
 80054a6:	fb07 1516 	mls	r5, r7, r6, r1
 80054aa:	2a63      	cmp	r2, #99	; 0x63
 80054ac:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80054b0:	4631      	mov	r1, r6
 80054b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80054b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80054ba:	dcf0      	bgt.n	800549e <__exponent+0x20>
 80054bc:	3130      	adds	r1, #48	; 0x30
 80054be:	f1ae 0502 	sub.w	r5, lr, #2
 80054c2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80054c6:	4629      	mov	r1, r5
 80054c8:	1c44      	adds	r4, r0, #1
 80054ca:	4561      	cmp	r1, ip
 80054cc:	d30a      	bcc.n	80054e4 <__exponent+0x66>
 80054ce:	f10d 0209 	add.w	r2, sp, #9
 80054d2:	eba2 020e 	sub.w	r2, r2, lr
 80054d6:	4565      	cmp	r5, ip
 80054d8:	bf88      	it	hi
 80054da:	2200      	movhi	r2, #0
 80054dc:	4413      	add	r3, r2
 80054de:	1a18      	subs	r0, r3, r0
 80054e0:	b003      	add	sp, #12
 80054e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054e8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80054ec:	e7ed      	b.n	80054ca <__exponent+0x4c>
 80054ee:	2330      	movs	r3, #48	; 0x30
 80054f0:	3130      	adds	r1, #48	; 0x30
 80054f2:	7083      	strb	r3, [r0, #2]
 80054f4:	70c1      	strb	r1, [r0, #3]
 80054f6:	1d03      	adds	r3, r0, #4
 80054f8:	e7f1      	b.n	80054de <__exponent+0x60>
	...

080054fc <_printf_float>:
 80054fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005500:	b091      	sub	sp, #68	; 0x44
 8005502:	460c      	mov	r4, r1
 8005504:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005508:	4616      	mov	r6, r2
 800550a:	461f      	mov	r7, r3
 800550c:	4605      	mov	r5, r0
 800550e:	f002 fe63 	bl	80081d8 <_localeconv_r>
 8005512:	6803      	ldr	r3, [r0, #0]
 8005514:	4618      	mov	r0, r3
 8005516:	9309      	str	r3, [sp, #36]	; 0x24
 8005518:	f7fd f8b8 	bl	800268c <strlen>
 800551c:	2300      	movs	r3, #0
 800551e:	930e      	str	r3, [sp, #56]	; 0x38
 8005520:	f8d8 3000 	ldr.w	r3, [r8]
 8005524:	900a      	str	r0, [sp, #40]	; 0x28
 8005526:	3307      	adds	r3, #7
 8005528:	f023 0307 	bic.w	r3, r3, #7
 800552c:	f103 0208 	add.w	r2, r3, #8
 8005530:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005534:	f8d4 b000 	ldr.w	fp, [r4]
 8005538:	f8c8 2000 	str.w	r2, [r8]
 800553c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005540:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005544:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005548:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800554c:	930b      	str	r3, [sp, #44]	; 0x2c
 800554e:	f04f 32ff 	mov.w	r2, #4294967295
 8005552:	4640      	mov	r0, r8
 8005554:	4b9c      	ldr	r3, [pc, #624]	; (80057c8 <_printf_float+0x2cc>)
 8005556:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005558:	f7fd fcf6 	bl	8002f48 <__aeabi_dcmpun>
 800555c:	bb70      	cbnz	r0, 80055bc <_printf_float+0xc0>
 800555e:	f04f 32ff 	mov.w	r2, #4294967295
 8005562:	4640      	mov	r0, r8
 8005564:	4b98      	ldr	r3, [pc, #608]	; (80057c8 <_printf_float+0x2cc>)
 8005566:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005568:	f7fd fcd0 	bl	8002f0c <__aeabi_dcmple>
 800556c:	bb30      	cbnz	r0, 80055bc <_printf_float+0xc0>
 800556e:	2200      	movs	r2, #0
 8005570:	2300      	movs	r3, #0
 8005572:	4640      	mov	r0, r8
 8005574:	4651      	mov	r1, sl
 8005576:	f7fd fcbf 	bl	8002ef8 <__aeabi_dcmplt>
 800557a:	b110      	cbz	r0, 8005582 <_printf_float+0x86>
 800557c:	232d      	movs	r3, #45	; 0x2d
 800557e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005582:	4b92      	ldr	r3, [pc, #584]	; (80057cc <_printf_float+0x2d0>)
 8005584:	4892      	ldr	r0, [pc, #584]	; (80057d0 <_printf_float+0x2d4>)
 8005586:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800558a:	bf94      	ite	ls
 800558c:	4698      	movls	r8, r3
 800558e:	4680      	movhi	r8, r0
 8005590:	2303      	movs	r3, #3
 8005592:	f04f 0a00 	mov.w	sl, #0
 8005596:	6123      	str	r3, [r4, #16]
 8005598:	f02b 0304 	bic.w	r3, fp, #4
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	4633      	mov	r3, r6
 80055a0:	4621      	mov	r1, r4
 80055a2:	4628      	mov	r0, r5
 80055a4:	9700      	str	r7, [sp, #0]
 80055a6:	aa0f      	add	r2, sp, #60	; 0x3c
 80055a8:	f000 f9d4 	bl	8005954 <_printf_common>
 80055ac:	3001      	adds	r0, #1
 80055ae:	f040 8090 	bne.w	80056d2 <_printf_float+0x1d6>
 80055b2:	f04f 30ff 	mov.w	r0, #4294967295
 80055b6:	b011      	add	sp, #68	; 0x44
 80055b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055bc:	4642      	mov	r2, r8
 80055be:	4653      	mov	r3, sl
 80055c0:	4640      	mov	r0, r8
 80055c2:	4651      	mov	r1, sl
 80055c4:	f7fd fcc0 	bl	8002f48 <__aeabi_dcmpun>
 80055c8:	b148      	cbz	r0, 80055de <_printf_float+0xe2>
 80055ca:	f1ba 0f00 	cmp.w	sl, #0
 80055ce:	bfb8      	it	lt
 80055d0:	232d      	movlt	r3, #45	; 0x2d
 80055d2:	4880      	ldr	r0, [pc, #512]	; (80057d4 <_printf_float+0x2d8>)
 80055d4:	bfb8      	it	lt
 80055d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80055da:	4b7f      	ldr	r3, [pc, #508]	; (80057d8 <_printf_float+0x2dc>)
 80055dc:	e7d3      	b.n	8005586 <_printf_float+0x8a>
 80055de:	6863      	ldr	r3, [r4, #4]
 80055e0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	d142      	bne.n	800566e <_printf_float+0x172>
 80055e8:	2306      	movs	r3, #6
 80055ea:	6063      	str	r3, [r4, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	9206      	str	r2, [sp, #24]
 80055f0:	aa0e      	add	r2, sp, #56	; 0x38
 80055f2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80055f6:	aa0d      	add	r2, sp, #52	; 0x34
 80055f8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80055fc:	9203      	str	r2, [sp, #12]
 80055fe:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005602:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005606:	6023      	str	r3, [r4, #0]
 8005608:	6863      	ldr	r3, [r4, #4]
 800560a:	4642      	mov	r2, r8
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	4628      	mov	r0, r5
 8005610:	4653      	mov	r3, sl
 8005612:	910b      	str	r1, [sp, #44]	; 0x2c
 8005614:	f7ff fed4 	bl	80053c0 <__cvt>
 8005618:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800561a:	4680      	mov	r8, r0
 800561c:	2947      	cmp	r1, #71	; 0x47
 800561e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005620:	d108      	bne.n	8005634 <_printf_float+0x138>
 8005622:	1cc8      	adds	r0, r1, #3
 8005624:	db02      	blt.n	800562c <_printf_float+0x130>
 8005626:	6863      	ldr	r3, [r4, #4]
 8005628:	4299      	cmp	r1, r3
 800562a:	dd40      	ble.n	80056ae <_printf_float+0x1b2>
 800562c:	f1a9 0902 	sub.w	r9, r9, #2
 8005630:	fa5f f989 	uxtb.w	r9, r9
 8005634:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005638:	d81f      	bhi.n	800567a <_printf_float+0x17e>
 800563a:	464a      	mov	r2, r9
 800563c:	3901      	subs	r1, #1
 800563e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005642:	910d      	str	r1, [sp, #52]	; 0x34
 8005644:	f7ff ff1b 	bl	800547e <__exponent>
 8005648:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800564a:	4682      	mov	sl, r0
 800564c:	1813      	adds	r3, r2, r0
 800564e:	2a01      	cmp	r2, #1
 8005650:	6123      	str	r3, [r4, #16]
 8005652:	dc02      	bgt.n	800565a <_printf_float+0x15e>
 8005654:	6822      	ldr	r2, [r4, #0]
 8005656:	07d2      	lsls	r2, r2, #31
 8005658:	d501      	bpl.n	800565e <_printf_float+0x162>
 800565a:	3301      	adds	r3, #1
 800565c:	6123      	str	r3, [r4, #16]
 800565e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005662:	2b00      	cmp	r3, #0
 8005664:	d09b      	beq.n	800559e <_printf_float+0xa2>
 8005666:	232d      	movs	r3, #45	; 0x2d
 8005668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800566c:	e797      	b.n	800559e <_printf_float+0xa2>
 800566e:	2947      	cmp	r1, #71	; 0x47
 8005670:	d1bc      	bne.n	80055ec <_printf_float+0xf0>
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1ba      	bne.n	80055ec <_printf_float+0xf0>
 8005676:	2301      	movs	r3, #1
 8005678:	e7b7      	b.n	80055ea <_printf_float+0xee>
 800567a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800567e:	d118      	bne.n	80056b2 <_printf_float+0x1b6>
 8005680:	2900      	cmp	r1, #0
 8005682:	6863      	ldr	r3, [r4, #4]
 8005684:	dd0b      	ble.n	800569e <_printf_float+0x1a2>
 8005686:	6121      	str	r1, [r4, #16]
 8005688:	b913      	cbnz	r3, 8005690 <_printf_float+0x194>
 800568a:	6822      	ldr	r2, [r4, #0]
 800568c:	07d0      	lsls	r0, r2, #31
 800568e:	d502      	bpl.n	8005696 <_printf_float+0x19a>
 8005690:	3301      	adds	r3, #1
 8005692:	440b      	add	r3, r1
 8005694:	6123      	str	r3, [r4, #16]
 8005696:	f04f 0a00 	mov.w	sl, #0
 800569a:	65a1      	str	r1, [r4, #88]	; 0x58
 800569c:	e7df      	b.n	800565e <_printf_float+0x162>
 800569e:	b913      	cbnz	r3, 80056a6 <_printf_float+0x1aa>
 80056a0:	6822      	ldr	r2, [r4, #0]
 80056a2:	07d2      	lsls	r2, r2, #31
 80056a4:	d501      	bpl.n	80056aa <_printf_float+0x1ae>
 80056a6:	3302      	adds	r3, #2
 80056a8:	e7f4      	b.n	8005694 <_printf_float+0x198>
 80056aa:	2301      	movs	r3, #1
 80056ac:	e7f2      	b.n	8005694 <_printf_float+0x198>
 80056ae:	f04f 0967 	mov.w	r9, #103	; 0x67
 80056b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056b4:	4299      	cmp	r1, r3
 80056b6:	db05      	blt.n	80056c4 <_printf_float+0x1c8>
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	6121      	str	r1, [r4, #16]
 80056bc:	07d8      	lsls	r0, r3, #31
 80056be:	d5ea      	bpl.n	8005696 <_printf_float+0x19a>
 80056c0:	1c4b      	adds	r3, r1, #1
 80056c2:	e7e7      	b.n	8005694 <_printf_float+0x198>
 80056c4:	2900      	cmp	r1, #0
 80056c6:	bfcc      	ite	gt
 80056c8:	2201      	movgt	r2, #1
 80056ca:	f1c1 0202 	rsble	r2, r1, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	e7e0      	b.n	8005694 <_printf_float+0x198>
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	055a      	lsls	r2, r3, #21
 80056d6:	d407      	bmi.n	80056e8 <_printf_float+0x1ec>
 80056d8:	6923      	ldr	r3, [r4, #16]
 80056da:	4642      	mov	r2, r8
 80056dc:	4631      	mov	r1, r6
 80056de:	4628      	mov	r0, r5
 80056e0:	47b8      	blx	r7
 80056e2:	3001      	adds	r0, #1
 80056e4:	d12b      	bne.n	800573e <_printf_float+0x242>
 80056e6:	e764      	b.n	80055b2 <_printf_float+0xb6>
 80056e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80056ec:	f240 80dd 	bls.w	80058aa <_printf_float+0x3ae>
 80056f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056f4:	2200      	movs	r2, #0
 80056f6:	2300      	movs	r3, #0
 80056f8:	f7fd fbf4 	bl	8002ee4 <__aeabi_dcmpeq>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	d033      	beq.n	8005768 <_printf_float+0x26c>
 8005700:	2301      	movs	r3, #1
 8005702:	4631      	mov	r1, r6
 8005704:	4628      	mov	r0, r5
 8005706:	4a35      	ldr	r2, [pc, #212]	; (80057dc <_printf_float+0x2e0>)
 8005708:	47b8      	blx	r7
 800570a:	3001      	adds	r0, #1
 800570c:	f43f af51 	beq.w	80055b2 <_printf_float+0xb6>
 8005710:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005714:	429a      	cmp	r2, r3
 8005716:	db02      	blt.n	800571e <_printf_float+0x222>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	07d8      	lsls	r0, r3, #31
 800571c:	d50f      	bpl.n	800573e <_printf_float+0x242>
 800571e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005722:	4631      	mov	r1, r6
 8005724:	4628      	mov	r0, r5
 8005726:	47b8      	blx	r7
 8005728:	3001      	adds	r0, #1
 800572a:	f43f af42 	beq.w	80055b2 <_printf_float+0xb6>
 800572e:	f04f 0800 	mov.w	r8, #0
 8005732:	f104 091a 	add.w	r9, r4, #26
 8005736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005738:	3b01      	subs	r3, #1
 800573a:	4543      	cmp	r3, r8
 800573c:	dc09      	bgt.n	8005752 <_printf_float+0x256>
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	079b      	lsls	r3, r3, #30
 8005742:	f100 8102 	bmi.w	800594a <_printf_float+0x44e>
 8005746:	68e0      	ldr	r0, [r4, #12]
 8005748:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800574a:	4298      	cmp	r0, r3
 800574c:	bfb8      	it	lt
 800574e:	4618      	movlt	r0, r3
 8005750:	e731      	b.n	80055b6 <_printf_float+0xba>
 8005752:	2301      	movs	r3, #1
 8005754:	464a      	mov	r2, r9
 8005756:	4631      	mov	r1, r6
 8005758:	4628      	mov	r0, r5
 800575a:	47b8      	blx	r7
 800575c:	3001      	adds	r0, #1
 800575e:	f43f af28 	beq.w	80055b2 <_printf_float+0xb6>
 8005762:	f108 0801 	add.w	r8, r8, #1
 8005766:	e7e6      	b.n	8005736 <_printf_float+0x23a>
 8005768:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800576a:	2b00      	cmp	r3, #0
 800576c:	dc38      	bgt.n	80057e0 <_printf_float+0x2e4>
 800576e:	2301      	movs	r3, #1
 8005770:	4631      	mov	r1, r6
 8005772:	4628      	mov	r0, r5
 8005774:	4a19      	ldr	r2, [pc, #100]	; (80057dc <_printf_float+0x2e0>)
 8005776:	47b8      	blx	r7
 8005778:	3001      	adds	r0, #1
 800577a:	f43f af1a 	beq.w	80055b2 <_printf_float+0xb6>
 800577e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005782:	4313      	orrs	r3, r2
 8005784:	d102      	bne.n	800578c <_printf_float+0x290>
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	07d9      	lsls	r1, r3, #31
 800578a:	d5d8      	bpl.n	800573e <_printf_float+0x242>
 800578c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005790:	4631      	mov	r1, r6
 8005792:	4628      	mov	r0, r5
 8005794:	47b8      	blx	r7
 8005796:	3001      	adds	r0, #1
 8005798:	f43f af0b 	beq.w	80055b2 <_printf_float+0xb6>
 800579c:	f04f 0900 	mov.w	r9, #0
 80057a0:	f104 0a1a 	add.w	sl, r4, #26
 80057a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057a6:	425b      	negs	r3, r3
 80057a8:	454b      	cmp	r3, r9
 80057aa:	dc01      	bgt.n	80057b0 <_printf_float+0x2b4>
 80057ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057ae:	e794      	b.n	80056da <_printf_float+0x1de>
 80057b0:	2301      	movs	r3, #1
 80057b2:	4652      	mov	r2, sl
 80057b4:	4631      	mov	r1, r6
 80057b6:	4628      	mov	r0, r5
 80057b8:	47b8      	blx	r7
 80057ba:	3001      	adds	r0, #1
 80057bc:	f43f aef9 	beq.w	80055b2 <_printf_float+0xb6>
 80057c0:	f109 0901 	add.w	r9, r9, #1
 80057c4:	e7ee      	b.n	80057a4 <_printf_float+0x2a8>
 80057c6:	bf00      	nop
 80057c8:	7fefffff 	.word	0x7fefffff
 80057cc:	0801b644 	.word	0x0801b644
 80057d0:	0801b648 	.word	0x0801b648
 80057d4:	0801b650 	.word	0x0801b650
 80057d8:	0801b64c 	.word	0x0801b64c
 80057dc:	0801b654 	.word	0x0801b654
 80057e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057e4:	429a      	cmp	r2, r3
 80057e6:	bfa8      	it	ge
 80057e8:	461a      	movge	r2, r3
 80057ea:	2a00      	cmp	r2, #0
 80057ec:	4691      	mov	r9, r2
 80057ee:	dc37      	bgt.n	8005860 <_printf_float+0x364>
 80057f0:	f04f 0b00 	mov.w	fp, #0
 80057f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057f8:	f104 021a 	add.w	r2, r4, #26
 80057fc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005800:	ebaa 0309 	sub.w	r3, sl, r9
 8005804:	455b      	cmp	r3, fp
 8005806:	dc33      	bgt.n	8005870 <_printf_float+0x374>
 8005808:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800580c:	429a      	cmp	r2, r3
 800580e:	db3b      	blt.n	8005888 <_printf_float+0x38c>
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	07da      	lsls	r2, r3, #31
 8005814:	d438      	bmi.n	8005888 <_printf_float+0x38c>
 8005816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005818:	990d      	ldr	r1, [sp, #52]	; 0x34
 800581a:	eba3 020a 	sub.w	r2, r3, sl
 800581e:	eba3 0901 	sub.w	r9, r3, r1
 8005822:	4591      	cmp	r9, r2
 8005824:	bfa8      	it	ge
 8005826:	4691      	movge	r9, r2
 8005828:	f1b9 0f00 	cmp.w	r9, #0
 800582c:	dc34      	bgt.n	8005898 <_printf_float+0x39c>
 800582e:	f04f 0800 	mov.w	r8, #0
 8005832:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005836:	f104 0a1a 	add.w	sl, r4, #26
 800583a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800583e:	1a9b      	subs	r3, r3, r2
 8005840:	eba3 0309 	sub.w	r3, r3, r9
 8005844:	4543      	cmp	r3, r8
 8005846:	f77f af7a 	ble.w	800573e <_printf_float+0x242>
 800584a:	2301      	movs	r3, #1
 800584c:	4652      	mov	r2, sl
 800584e:	4631      	mov	r1, r6
 8005850:	4628      	mov	r0, r5
 8005852:	47b8      	blx	r7
 8005854:	3001      	adds	r0, #1
 8005856:	f43f aeac 	beq.w	80055b2 <_printf_float+0xb6>
 800585a:	f108 0801 	add.w	r8, r8, #1
 800585e:	e7ec      	b.n	800583a <_printf_float+0x33e>
 8005860:	4613      	mov	r3, r2
 8005862:	4631      	mov	r1, r6
 8005864:	4642      	mov	r2, r8
 8005866:	4628      	mov	r0, r5
 8005868:	47b8      	blx	r7
 800586a:	3001      	adds	r0, #1
 800586c:	d1c0      	bne.n	80057f0 <_printf_float+0x2f4>
 800586e:	e6a0      	b.n	80055b2 <_printf_float+0xb6>
 8005870:	2301      	movs	r3, #1
 8005872:	4631      	mov	r1, r6
 8005874:	4628      	mov	r0, r5
 8005876:	920b      	str	r2, [sp, #44]	; 0x2c
 8005878:	47b8      	blx	r7
 800587a:	3001      	adds	r0, #1
 800587c:	f43f ae99 	beq.w	80055b2 <_printf_float+0xb6>
 8005880:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005882:	f10b 0b01 	add.w	fp, fp, #1
 8005886:	e7b9      	b.n	80057fc <_printf_float+0x300>
 8005888:	4631      	mov	r1, r6
 800588a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800588e:	4628      	mov	r0, r5
 8005890:	47b8      	blx	r7
 8005892:	3001      	adds	r0, #1
 8005894:	d1bf      	bne.n	8005816 <_printf_float+0x31a>
 8005896:	e68c      	b.n	80055b2 <_printf_float+0xb6>
 8005898:	464b      	mov	r3, r9
 800589a:	4631      	mov	r1, r6
 800589c:	4628      	mov	r0, r5
 800589e:	eb08 020a 	add.w	r2, r8, sl
 80058a2:	47b8      	blx	r7
 80058a4:	3001      	adds	r0, #1
 80058a6:	d1c2      	bne.n	800582e <_printf_float+0x332>
 80058a8:	e683      	b.n	80055b2 <_printf_float+0xb6>
 80058aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058ac:	2a01      	cmp	r2, #1
 80058ae:	dc01      	bgt.n	80058b4 <_printf_float+0x3b8>
 80058b0:	07db      	lsls	r3, r3, #31
 80058b2:	d537      	bpl.n	8005924 <_printf_float+0x428>
 80058b4:	2301      	movs	r3, #1
 80058b6:	4642      	mov	r2, r8
 80058b8:	4631      	mov	r1, r6
 80058ba:	4628      	mov	r0, r5
 80058bc:	47b8      	blx	r7
 80058be:	3001      	adds	r0, #1
 80058c0:	f43f ae77 	beq.w	80055b2 <_printf_float+0xb6>
 80058c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058c8:	4631      	mov	r1, r6
 80058ca:	4628      	mov	r0, r5
 80058cc:	47b8      	blx	r7
 80058ce:	3001      	adds	r0, #1
 80058d0:	f43f ae6f 	beq.w	80055b2 <_printf_float+0xb6>
 80058d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058d8:	2200      	movs	r2, #0
 80058da:	2300      	movs	r3, #0
 80058dc:	f7fd fb02 	bl	8002ee4 <__aeabi_dcmpeq>
 80058e0:	b9d8      	cbnz	r0, 800591a <_printf_float+0x41e>
 80058e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058e4:	f108 0201 	add.w	r2, r8, #1
 80058e8:	3b01      	subs	r3, #1
 80058ea:	4631      	mov	r1, r6
 80058ec:	4628      	mov	r0, r5
 80058ee:	47b8      	blx	r7
 80058f0:	3001      	adds	r0, #1
 80058f2:	d10e      	bne.n	8005912 <_printf_float+0x416>
 80058f4:	e65d      	b.n	80055b2 <_printf_float+0xb6>
 80058f6:	2301      	movs	r3, #1
 80058f8:	464a      	mov	r2, r9
 80058fa:	4631      	mov	r1, r6
 80058fc:	4628      	mov	r0, r5
 80058fe:	47b8      	blx	r7
 8005900:	3001      	adds	r0, #1
 8005902:	f43f ae56 	beq.w	80055b2 <_printf_float+0xb6>
 8005906:	f108 0801 	add.w	r8, r8, #1
 800590a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800590c:	3b01      	subs	r3, #1
 800590e:	4543      	cmp	r3, r8
 8005910:	dcf1      	bgt.n	80058f6 <_printf_float+0x3fa>
 8005912:	4653      	mov	r3, sl
 8005914:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005918:	e6e0      	b.n	80056dc <_printf_float+0x1e0>
 800591a:	f04f 0800 	mov.w	r8, #0
 800591e:	f104 091a 	add.w	r9, r4, #26
 8005922:	e7f2      	b.n	800590a <_printf_float+0x40e>
 8005924:	2301      	movs	r3, #1
 8005926:	4642      	mov	r2, r8
 8005928:	e7df      	b.n	80058ea <_printf_float+0x3ee>
 800592a:	2301      	movs	r3, #1
 800592c:	464a      	mov	r2, r9
 800592e:	4631      	mov	r1, r6
 8005930:	4628      	mov	r0, r5
 8005932:	47b8      	blx	r7
 8005934:	3001      	adds	r0, #1
 8005936:	f43f ae3c 	beq.w	80055b2 <_printf_float+0xb6>
 800593a:	f108 0801 	add.w	r8, r8, #1
 800593e:	68e3      	ldr	r3, [r4, #12]
 8005940:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005942:	1a5b      	subs	r3, r3, r1
 8005944:	4543      	cmp	r3, r8
 8005946:	dcf0      	bgt.n	800592a <_printf_float+0x42e>
 8005948:	e6fd      	b.n	8005746 <_printf_float+0x24a>
 800594a:	f04f 0800 	mov.w	r8, #0
 800594e:	f104 0919 	add.w	r9, r4, #25
 8005952:	e7f4      	b.n	800593e <_printf_float+0x442>

08005954 <_printf_common>:
 8005954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005958:	4616      	mov	r6, r2
 800595a:	4699      	mov	r9, r3
 800595c:	688a      	ldr	r2, [r1, #8]
 800595e:	690b      	ldr	r3, [r1, #16]
 8005960:	4607      	mov	r7, r0
 8005962:	4293      	cmp	r3, r2
 8005964:	bfb8      	it	lt
 8005966:	4613      	movlt	r3, r2
 8005968:	6033      	str	r3, [r6, #0]
 800596a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800596e:	460c      	mov	r4, r1
 8005970:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005974:	b10a      	cbz	r2, 800597a <_printf_common+0x26>
 8005976:	3301      	adds	r3, #1
 8005978:	6033      	str	r3, [r6, #0]
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	0699      	lsls	r1, r3, #26
 800597e:	bf42      	ittt	mi
 8005980:	6833      	ldrmi	r3, [r6, #0]
 8005982:	3302      	addmi	r3, #2
 8005984:	6033      	strmi	r3, [r6, #0]
 8005986:	6825      	ldr	r5, [r4, #0]
 8005988:	f015 0506 	ands.w	r5, r5, #6
 800598c:	d106      	bne.n	800599c <_printf_common+0x48>
 800598e:	f104 0a19 	add.w	sl, r4, #25
 8005992:	68e3      	ldr	r3, [r4, #12]
 8005994:	6832      	ldr	r2, [r6, #0]
 8005996:	1a9b      	subs	r3, r3, r2
 8005998:	42ab      	cmp	r3, r5
 800599a:	dc28      	bgt.n	80059ee <_printf_common+0x9a>
 800599c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059a0:	1e13      	subs	r3, r2, #0
 80059a2:	6822      	ldr	r2, [r4, #0]
 80059a4:	bf18      	it	ne
 80059a6:	2301      	movne	r3, #1
 80059a8:	0692      	lsls	r2, r2, #26
 80059aa:	d42d      	bmi.n	8005a08 <_printf_common+0xb4>
 80059ac:	4649      	mov	r1, r9
 80059ae:	4638      	mov	r0, r7
 80059b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059b4:	47c0      	blx	r8
 80059b6:	3001      	adds	r0, #1
 80059b8:	d020      	beq.n	80059fc <_printf_common+0xa8>
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	68e5      	ldr	r5, [r4, #12]
 80059be:	f003 0306 	and.w	r3, r3, #6
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	bf18      	it	ne
 80059c6:	2500      	movne	r5, #0
 80059c8:	6832      	ldr	r2, [r6, #0]
 80059ca:	f04f 0600 	mov.w	r6, #0
 80059ce:	68a3      	ldr	r3, [r4, #8]
 80059d0:	bf08      	it	eq
 80059d2:	1aad      	subeq	r5, r5, r2
 80059d4:	6922      	ldr	r2, [r4, #16]
 80059d6:	bf08      	it	eq
 80059d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059dc:	4293      	cmp	r3, r2
 80059de:	bfc4      	itt	gt
 80059e0:	1a9b      	subgt	r3, r3, r2
 80059e2:	18ed      	addgt	r5, r5, r3
 80059e4:	341a      	adds	r4, #26
 80059e6:	42b5      	cmp	r5, r6
 80059e8:	d11a      	bne.n	8005a20 <_printf_common+0xcc>
 80059ea:	2000      	movs	r0, #0
 80059ec:	e008      	b.n	8005a00 <_printf_common+0xac>
 80059ee:	2301      	movs	r3, #1
 80059f0:	4652      	mov	r2, sl
 80059f2:	4649      	mov	r1, r9
 80059f4:	4638      	mov	r0, r7
 80059f6:	47c0      	blx	r8
 80059f8:	3001      	adds	r0, #1
 80059fa:	d103      	bne.n	8005a04 <_printf_common+0xb0>
 80059fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a04:	3501      	adds	r5, #1
 8005a06:	e7c4      	b.n	8005992 <_printf_common+0x3e>
 8005a08:	2030      	movs	r0, #48	; 0x30
 8005a0a:	18e1      	adds	r1, r4, r3
 8005a0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a16:	4422      	add	r2, r4
 8005a18:	3302      	adds	r3, #2
 8005a1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a1e:	e7c5      	b.n	80059ac <_printf_common+0x58>
 8005a20:	2301      	movs	r3, #1
 8005a22:	4622      	mov	r2, r4
 8005a24:	4649      	mov	r1, r9
 8005a26:	4638      	mov	r0, r7
 8005a28:	47c0      	blx	r8
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	d0e6      	beq.n	80059fc <_printf_common+0xa8>
 8005a2e:	3601      	adds	r6, #1
 8005a30:	e7d9      	b.n	80059e6 <_printf_common+0x92>
	...

08005a34 <_printf_i>:
 8005a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a38:	7e0f      	ldrb	r7, [r1, #24]
 8005a3a:	4691      	mov	r9, r2
 8005a3c:	2f78      	cmp	r7, #120	; 0x78
 8005a3e:	4680      	mov	r8, r0
 8005a40:	460c      	mov	r4, r1
 8005a42:	469a      	mov	sl, r3
 8005a44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a4a:	d807      	bhi.n	8005a5c <_printf_i+0x28>
 8005a4c:	2f62      	cmp	r7, #98	; 0x62
 8005a4e:	d80a      	bhi.n	8005a66 <_printf_i+0x32>
 8005a50:	2f00      	cmp	r7, #0
 8005a52:	f000 80d9 	beq.w	8005c08 <_printf_i+0x1d4>
 8005a56:	2f58      	cmp	r7, #88	; 0x58
 8005a58:	f000 80a4 	beq.w	8005ba4 <_printf_i+0x170>
 8005a5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a64:	e03a      	b.n	8005adc <_printf_i+0xa8>
 8005a66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a6a:	2b15      	cmp	r3, #21
 8005a6c:	d8f6      	bhi.n	8005a5c <_printf_i+0x28>
 8005a6e:	a101      	add	r1, pc, #4	; (adr r1, 8005a74 <_printf_i+0x40>)
 8005a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a74:	08005acd 	.word	0x08005acd
 8005a78:	08005ae1 	.word	0x08005ae1
 8005a7c:	08005a5d 	.word	0x08005a5d
 8005a80:	08005a5d 	.word	0x08005a5d
 8005a84:	08005a5d 	.word	0x08005a5d
 8005a88:	08005a5d 	.word	0x08005a5d
 8005a8c:	08005ae1 	.word	0x08005ae1
 8005a90:	08005a5d 	.word	0x08005a5d
 8005a94:	08005a5d 	.word	0x08005a5d
 8005a98:	08005a5d 	.word	0x08005a5d
 8005a9c:	08005a5d 	.word	0x08005a5d
 8005aa0:	08005bef 	.word	0x08005bef
 8005aa4:	08005b11 	.word	0x08005b11
 8005aa8:	08005bd1 	.word	0x08005bd1
 8005aac:	08005a5d 	.word	0x08005a5d
 8005ab0:	08005a5d 	.word	0x08005a5d
 8005ab4:	08005c11 	.word	0x08005c11
 8005ab8:	08005a5d 	.word	0x08005a5d
 8005abc:	08005b11 	.word	0x08005b11
 8005ac0:	08005a5d 	.word	0x08005a5d
 8005ac4:	08005a5d 	.word	0x08005a5d
 8005ac8:	08005bd9 	.word	0x08005bd9
 8005acc:	682b      	ldr	r3, [r5, #0]
 8005ace:	1d1a      	adds	r2, r3, #4
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	602a      	str	r2, [r5, #0]
 8005ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ad8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005adc:	2301      	movs	r3, #1
 8005ade:	e0a4      	b.n	8005c2a <_printf_i+0x1f6>
 8005ae0:	6820      	ldr	r0, [r4, #0]
 8005ae2:	6829      	ldr	r1, [r5, #0]
 8005ae4:	0606      	lsls	r6, r0, #24
 8005ae6:	f101 0304 	add.w	r3, r1, #4
 8005aea:	d50a      	bpl.n	8005b02 <_printf_i+0xce>
 8005aec:	680e      	ldr	r6, [r1, #0]
 8005aee:	602b      	str	r3, [r5, #0]
 8005af0:	2e00      	cmp	r6, #0
 8005af2:	da03      	bge.n	8005afc <_printf_i+0xc8>
 8005af4:	232d      	movs	r3, #45	; 0x2d
 8005af6:	4276      	negs	r6, r6
 8005af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005afc:	230a      	movs	r3, #10
 8005afe:	485e      	ldr	r0, [pc, #376]	; (8005c78 <_printf_i+0x244>)
 8005b00:	e019      	b.n	8005b36 <_printf_i+0x102>
 8005b02:	680e      	ldr	r6, [r1, #0]
 8005b04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b08:	602b      	str	r3, [r5, #0]
 8005b0a:	bf18      	it	ne
 8005b0c:	b236      	sxthne	r6, r6
 8005b0e:	e7ef      	b.n	8005af0 <_printf_i+0xbc>
 8005b10:	682b      	ldr	r3, [r5, #0]
 8005b12:	6820      	ldr	r0, [r4, #0]
 8005b14:	1d19      	adds	r1, r3, #4
 8005b16:	6029      	str	r1, [r5, #0]
 8005b18:	0601      	lsls	r1, r0, #24
 8005b1a:	d501      	bpl.n	8005b20 <_printf_i+0xec>
 8005b1c:	681e      	ldr	r6, [r3, #0]
 8005b1e:	e002      	b.n	8005b26 <_printf_i+0xf2>
 8005b20:	0646      	lsls	r6, r0, #25
 8005b22:	d5fb      	bpl.n	8005b1c <_printf_i+0xe8>
 8005b24:	881e      	ldrh	r6, [r3, #0]
 8005b26:	2f6f      	cmp	r7, #111	; 0x6f
 8005b28:	bf0c      	ite	eq
 8005b2a:	2308      	moveq	r3, #8
 8005b2c:	230a      	movne	r3, #10
 8005b2e:	4852      	ldr	r0, [pc, #328]	; (8005c78 <_printf_i+0x244>)
 8005b30:	2100      	movs	r1, #0
 8005b32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b36:	6865      	ldr	r5, [r4, #4]
 8005b38:	2d00      	cmp	r5, #0
 8005b3a:	bfa8      	it	ge
 8005b3c:	6821      	ldrge	r1, [r4, #0]
 8005b3e:	60a5      	str	r5, [r4, #8]
 8005b40:	bfa4      	itt	ge
 8005b42:	f021 0104 	bicge.w	r1, r1, #4
 8005b46:	6021      	strge	r1, [r4, #0]
 8005b48:	b90e      	cbnz	r6, 8005b4e <_printf_i+0x11a>
 8005b4a:	2d00      	cmp	r5, #0
 8005b4c:	d04d      	beq.n	8005bea <_printf_i+0x1b6>
 8005b4e:	4615      	mov	r5, r2
 8005b50:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b54:	fb03 6711 	mls	r7, r3, r1, r6
 8005b58:	5dc7      	ldrb	r7, [r0, r7]
 8005b5a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b5e:	4637      	mov	r7, r6
 8005b60:	42bb      	cmp	r3, r7
 8005b62:	460e      	mov	r6, r1
 8005b64:	d9f4      	bls.n	8005b50 <_printf_i+0x11c>
 8005b66:	2b08      	cmp	r3, #8
 8005b68:	d10b      	bne.n	8005b82 <_printf_i+0x14e>
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	07de      	lsls	r6, r3, #31
 8005b6e:	d508      	bpl.n	8005b82 <_printf_i+0x14e>
 8005b70:	6923      	ldr	r3, [r4, #16]
 8005b72:	6861      	ldr	r1, [r4, #4]
 8005b74:	4299      	cmp	r1, r3
 8005b76:	bfde      	ittt	le
 8005b78:	2330      	movle	r3, #48	; 0x30
 8005b7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b82:	1b52      	subs	r2, r2, r5
 8005b84:	6122      	str	r2, [r4, #16]
 8005b86:	464b      	mov	r3, r9
 8005b88:	4621      	mov	r1, r4
 8005b8a:	4640      	mov	r0, r8
 8005b8c:	f8cd a000 	str.w	sl, [sp]
 8005b90:	aa03      	add	r2, sp, #12
 8005b92:	f7ff fedf 	bl	8005954 <_printf_common>
 8005b96:	3001      	adds	r0, #1
 8005b98:	d14c      	bne.n	8005c34 <_printf_i+0x200>
 8005b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9e:	b004      	add	sp, #16
 8005ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba4:	4834      	ldr	r0, [pc, #208]	; (8005c78 <_printf_i+0x244>)
 8005ba6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005baa:	6829      	ldr	r1, [r5, #0]
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	f851 6b04 	ldr.w	r6, [r1], #4
 8005bb2:	6029      	str	r1, [r5, #0]
 8005bb4:	061d      	lsls	r5, r3, #24
 8005bb6:	d514      	bpl.n	8005be2 <_printf_i+0x1ae>
 8005bb8:	07df      	lsls	r7, r3, #31
 8005bba:	bf44      	itt	mi
 8005bbc:	f043 0320 	orrmi.w	r3, r3, #32
 8005bc0:	6023      	strmi	r3, [r4, #0]
 8005bc2:	b91e      	cbnz	r6, 8005bcc <_printf_i+0x198>
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	f023 0320 	bic.w	r3, r3, #32
 8005bca:	6023      	str	r3, [r4, #0]
 8005bcc:	2310      	movs	r3, #16
 8005bce:	e7af      	b.n	8005b30 <_printf_i+0xfc>
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	f043 0320 	orr.w	r3, r3, #32
 8005bd6:	6023      	str	r3, [r4, #0]
 8005bd8:	2378      	movs	r3, #120	; 0x78
 8005bda:	4828      	ldr	r0, [pc, #160]	; (8005c7c <_printf_i+0x248>)
 8005bdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005be0:	e7e3      	b.n	8005baa <_printf_i+0x176>
 8005be2:	0659      	lsls	r1, r3, #25
 8005be4:	bf48      	it	mi
 8005be6:	b2b6      	uxthmi	r6, r6
 8005be8:	e7e6      	b.n	8005bb8 <_printf_i+0x184>
 8005bea:	4615      	mov	r5, r2
 8005bec:	e7bb      	b.n	8005b66 <_printf_i+0x132>
 8005bee:	682b      	ldr	r3, [r5, #0]
 8005bf0:	6826      	ldr	r6, [r4, #0]
 8005bf2:	1d18      	adds	r0, r3, #4
 8005bf4:	6961      	ldr	r1, [r4, #20]
 8005bf6:	6028      	str	r0, [r5, #0]
 8005bf8:	0635      	lsls	r5, r6, #24
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	d501      	bpl.n	8005c02 <_printf_i+0x1ce>
 8005bfe:	6019      	str	r1, [r3, #0]
 8005c00:	e002      	b.n	8005c08 <_printf_i+0x1d4>
 8005c02:	0670      	lsls	r0, r6, #25
 8005c04:	d5fb      	bpl.n	8005bfe <_printf_i+0x1ca>
 8005c06:	8019      	strh	r1, [r3, #0]
 8005c08:	2300      	movs	r3, #0
 8005c0a:	4615      	mov	r5, r2
 8005c0c:	6123      	str	r3, [r4, #16]
 8005c0e:	e7ba      	b.n	8005b86 <_printf_i+0x152>
 8005c10:	682b      	ldr	r3, [r5, #0]
 8005c12:	2100      	movs	r1, #0
 8005c14:	1d1a      	adds	r2, r3, #4
 8005c16:	602a      	str	r2, [r5, #0]
 8005c18:	681d      	ldr	r5, [r3, #0]
 8005c1a:	6862      	ldr	r2, [r4, #4]
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f002 faf9 	bl	8008214 <memchr>
 8005c22:	b108      	cbz	r0, 8005c28 <_printf_i+0x1f4>
 8005c24:	1b40      	subs	r0, r0, r5
 8005c26:	6060      	str	r0, [r4, #4]
 8005c28:	6863      	ldr	r3, [r4, #4]
 8005c2a:	6123      	str	r3, [r4, #16]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c32:	e7a8      	b.n	8005b86 <_printf_i+0x152>
 8005c34:	462a      	mov	r2, r5
 8005c36:	4649      	mov	r1, r9
 8005c38:	4640      	mov	r0, r8
 8005c3a:	6923      	ldr	r3, [r4, #16]
 8005c3c:	47d0      	blx	sl
 8005c3e:	3001      	adds	r0, #1
 8005c40:	d0ab      	beq.n	8005b9a <_printf_i+0x166>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	079b      	lsls	r3, r3, #30
 8005c46:	d413      	bmi.n	8005c70 <_printf_i+0x23c>
 8005c48:	68e0      	ldr	r0, [r4, #12]
 8005c4a:	9b03      	ldr	r3, [sp, #12]
 8005c4c:	4298      	cmp	r0, r3
 8005c4e:	bfb8      	it	lt
 8005c50:	4618      	movlt	r0, r3
 8005c52:	e7a4      	b.n	8005b9e <_printf_i+0x16a>
 8005c54:	2301      	movs	r3, #1
 8005c56:	4632      	mov	r2, r6
 8005c58:	4649      	mov	r1, r9
 8005c5a:	4640      	mov	r0, r8
 8005c5c:	47d0      	blx	sl
 8005c5e:	3001      	adds	r0, #1
 8005c60:	d09b      	beq.n	8005b9a <_printf_i+0x166>
 8005c62:	3501      	adds	r5, #1
 8005c64:	68e3      	ldr	r3, [r4, #12]
 8005c66:	9903      	ldr	r1, [sp, #12]
 8005c68:	1a5b      	subs	r3, r3, r1
 8005c6a:	42ab      	cmp	r3, r5
 8005c6c:	dcf2      	bgt.n	8005c54 <_printf_i+0x220>
 8005c6e:	e7eb      	b.n	8005c48 <_printf_i+0x214>
 8005c70:	2500      	movs	r5, #0
 8005c72:	f104 0619 	add.w	r6, r4, #25
 8005c76:	e7f5      	b.n	8005c64 <_printf_i+0x230>
 8005c78:	0801b656 	.word	0x0801b656
 8005c7c:	0801b667 	.word	0x0801b667

08005c80 <_scanf_float>:
 8005c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c84:	b087      	sub	sp, #28
 8005c86:	9303      	str	r3, [sp, #12]
 8005c88:	688b      	ldr	r3, [r1, #8]
 8005c8a:	4617      	mov	r7, r2
 8005c8c:	1e5a      	subs	r2, r3, #1
 8005c8e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005c92:	bf85      	ittet	hi
 8005c94:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005c98:	195b      	addhi	r3, r3, r5
 8005c9a:	2300      	movls	r3, #0
 8005c9c:	9302      	strhi	r3, [sp, #8]
 8005c9e:	bf88      	it	hi
 8005ca0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005ca4:	468b      	mov	fp, r1
 8005ca6:	f04f 0500 	mov.w	r5, #0
 8005caa:	bf8c      	ite	hi
 8005cac:	608b      	strhi	r3, [r1, #8]
 8005cae:	9302      	strls	r3, [sp, #8]
 8005cb0:	680b      	ldr	r3, [r1, #0]
 8005cb2:	4680      	mov	r8, r0
 8005cb4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005cb8:	f84b 3b1c 	str.w	r3, [fp], #28
 8005cbc:	460c      	mov	r4, r1
 8005cbe:	465e      	mov	r6, fp
 8005cc0:	46aa      	mov	sl, r5
 8005cc2:	46a9      	mov	r9, r5
 8005cc4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005cc8:	9501      	str	r5, [sp, #4]
 8005cca:	68a2      	ldr	r2, [r4, #8]
 8005ccc:	b152      	cbz	r2, 8005ce4 <_scanf_float+0x64>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b4e      	cmp	r3, #78	; 0x4e
 8005cd4:	d864      	bhi.n	8005da0 <_scanf_float+0x120>
 8005cd6:	2b40      	cmp	r3, #64	; 0x40
 8005cd8:	d83c      	bhi.n	8005d54 <_scanf_float+0xd4>
 8005cda:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005cde:	b2c8      	uxtb	r0, r1
 8005ce0:	280e      	cmp	r0, #14
 8005ce2:	d93a      	bls.n	8005d5a <_scanf_float+0xda>
 8005ce4:	f1b9 0f00 	cmp.w	r9, #0
 8005ce8:	d003      	beq.n	8005cf2 <_scanf_float+0x72>
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cf6:	f1ba 0f01 	cmp.w	sl, #1
 8005cfa:	f200 8113 	bhi.w	8005f24 <_scanf_float+0x2a4>
 8005cfe:	455e      	cmp	r6, fp
 8005d00:	f200 8105 	bhi.w	8005f0e <_scanf_float+0x28e>
 8005d04:	2501      	movs	r5, #1
 8005d06:	4628      	mov	r0, r5
 8005d08:	b007      	add	sp, #28
 8005d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d0e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005d12:	2a0d      	cmp	r2, #13
 8005d14:	d8e6      	bhi.n	8005ce4 <_scanf_float+0x64>
 8005d16:	a101      	add	r1, pc, #4	; (adr r1, 8005d1c <_scanf_float+0x9c>)
 8005d18:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005d1c:	08005e5b 	.word	0x08005e5b
 8005d20:	08005ce5 	.word	0x08005ce5
 8005d24:	08005ce5 	.word	0x08005ce5
 8005d28:	08005ce5 	.word	0x08005ce5
 8005d2c:	08005ebb 	.word	0x08005ebb
 8005d30:	08005e93 	.word	0x08005e93
 8005d34:	08005ce5 	.word	0x08005ce5
 8005d38:	08005ce5 	.word	0x08005ce5
 8005d3c:	08005e69 	.word	0x08005e69
 8005d40:	08005ce5 	.word	0x08005ce5
 8005d44:	08005ce5 	.word	0x08005ce5
 8005d48:	08005ce5 	.word	0x08005ce5
 8005d4c:	08005ce5 	.word	0x08005ce5
 8005d50:	08005e21 	.word	0x08005e21
 8005d54:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005d58:	e7db      	b.n	8005d12 <_scanf_float+0x92>
 8005d5a:	290e      	cmp	r1, #14
 8005d5c:	d8c2      	bhi.n	8005ce4 <_scanf_float+0x64>
 8005d5e:	a001      	add	r0, pc, #4	; (adr r0, 8005d64 <_scanf_float+0xe4>)
 8005d60:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005d64:	08005e13 	.word	0x08005e13
 8005d68:	08005ce5 	.word	0x08005ce5
 8005d6c:	08005e13 	.word	0x08005e13
 8005d70:	08005ea7 	.word	0x08005ea7
 8005d74:	08005ce5 	.word	0x08005ce5
 8005d78:	08005dc1 	.word	0x08005dc1
 8005d7c:	08005dfd 	.word	0x08005dfd
 8005d80:	08005dfd 	.word	0x08005dfd
 8005d84:	08005dfd 	.word	0x08005dfd
 8005d88:	08005dfd 	.word	0x08005dfd
 8005d8c:	08005dfd 	.word	0x08005dfd
 8005d90:	08005dfd 	.word	0x08005dfd
 8005d94:	08005dfd 	.word	0x08005dfd
 8005d98:	08005dfd 	.word	0x08005dfd
 8005d9c:	08005dfd 	.word	0x08005dfd
 8005da0:	2b6e      	cmp	r3, #110	; 0x6e
 8005da2:	d809      	bhi.n	8005db8 <_scanf_float+0x138>
 8005da4:	2b60      	cmp	r3, #96	; 0x60
 8005da6:	d8b2      	bhi.n	8005d0e <_scanf_float+0x8e>
 8005da8:	2b54      	cmp	r3, #84	; 0x54
 8005daa:	d077      	beq.n	8005e9c <_scanf_float+0x21c>
 8005dac:	2b59      	cmp	r3, #89	; 0x59
 8005dae:	d199      	bne.n	8005ce4 <_scanf_float+0x64>
 8005db0:	2d07      	cmp	r5, #7
 8005db2:	d197      	bne.n	8005ce4 <_scanf_float+0x64>
 8005db4:	2508      	movs	r5, #8
 8005db6:	e029      	b.n	8005e0c <_scanf_float+0x18c>
 8005db8:	2b74      	cmp	r3, #116	; 0x74
 8005dba:	d06f      	beq.n	8005e9c <_scanf_float+0x21c>
 8005dbc:	2b79      	cmp	r3, #121	; 0x79
 8005dbe:	e7f6      	b.n	8005dae <_scanf_float+0x12e>
 8005dc0:	6821      	ldr	r1, [r4, #0]
 8005dc2:	05c8      	lsls	r0, r1, #23
 8005dc4:	d51a      	bpl.n	8005dfc <_scanf_float+0x17c>
 8005dc6:	9b02      	ldr	r3, [sp, #8]
 8005dc8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005dcc:	6021      	str	r1, [r4, #0]
 8005dce:	f109 0901 	add.w	r9, r9, #1
 8005dd2:	b11b      	cbz	r3, 8005ddc <_scanf_float+0x15c>
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	3201      	adds	r2, #1
 8005dd8:	9302      	str	r3, [sp, #8]
 8005dda:	60a2      	str	r2, [r4, #8]
 8005ddc:	68a3      	ldr	r3, [r4, #8]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	60a3      	str	r3, [r4, #8]
 8005de2:	6923      	ldr	r3, [r4, #16]
 8005de4:	3301      	adds	r3, #1
 8005de6:	6123      	str	r3, [r4, #16]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	607b      	str	r3, [r7, #4]
 8005df0:	f340 8084 	ble.w	8005efc <_scanf_float+0x27c>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	3301      	adds	r3, #1
 8005df8:	603b      	str	r3, [r7, #0]
 8005dfa:	e766      	b.n	8005cca <_scanf_float+0x4a>
 8005dfc:	eb1a 0f05 	cmn.w	sl, r5
 8005e00:	f47f af70 	bne.w	8005ce4 <_scanf_float+0x64>
 8005e04:	6822      	ldr	r2, [r4, #0]
 8005e06:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005e0a:	6022      	str	r2, [r4, #0]
 8005e0c:	f806 3b01 	strb.w	r3, [r6], #1
 8005e10:	e7e4      	b.n	8005ddc <_scanf_float+0x15c>
 8005e12:	6822      	ldr	r2, [r4, #0]
 8005e14:	0610      	lsls	r0, r2, #24
 8005e16:	f57f af65 	bpl.w	8005ce4 <_scanf_float+0x64>
 8005e1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e1e:	e7f4      	b.n	8005e0a <_scanf_float+0x18a>
 8005e20:	f1ba 0f00 	cmp.w	sl, #0
 8005e24:	d10e      	bne.n	8005e44 <_scanf_float+0x1c4>
 8005e26:	f1b9 0f00 	cmp.w	r9, #0
 8005e2a:	d10e      	bne.n	8005e4a <_scanf_float+0x1ca>
 8005e2c:	6822      	ldr	r2, [r4, #0]
 8005e2e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005e32:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005e36:	d108      	bne.n	8005e4a <_scanf_float+0x1ca>
 8005e38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e3c:	f04f 0a01 	mov.w	sl, #1
 8005e40:	6022      	str	r2, [r4, #0]
 8005e42:	e7e3      	b.n	8005e0c <_scanf_float+0x18c>
 8005e44:	f1ba 0f02 	cmp.w	sl, #2
 8005e48:	d055      	beq.n	8005ef6 <_scanf_float+0x276>
 8005e4a:	2d01      	cmp	r5, #1
 8005e4c:	d002      	beq.n	8005e54 <_scanf_float+0x1d4>
 8005e4e:	2d04      	cmp	r5, #4
 8005e50:	f47f af48 	bne.w	8005ce4 <_scanf_float+0x64>
 8005e54:	3501      	adds	r5, #1
 8005e56:	b2ed      	uxtb	r5, r5
 8005e58:	e7d8      	b.n	8005e0c <_scanf_float+0x18c>
 8005e5a:	f1ba 0f01 	cmp.w	sl, #1
 8005e5e:	f47f af41 	bne.w	8005ce4 <_scanf_float+0x64>
 8005e62:	f04f 0a02 	mov.w	sl, #2
 8005e66:	e7d1      	b.n	8005e0c <_scanf_float+0x18c>
 8005e68:	b97d      	cbnz	r5, 8005e8a <_scanf_float+0x20a>
 8005e6a:	f1b9 0f00 	cmp.w	r9, #0
 8005e6e:	f47f af3c 	bne.w	8005cea <_scanf_float+0x6a>
 8005e72:	6822      	ldr	r2, [r4, #0]
 8005e74:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005e78:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005e7c:	f47f af39 	bne.w	8005cf2 <_scanf_float+0x72>
 8005e80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e84:	2501      	movs	r5, #1
 8005e86:	6022      	str	r2, [r4, #0]
 8005e88:	e7c0      	b.n	8005e0c <_scanf_float+0x18c>
 8005e8a:	2d03      	cmp	r5, #3
 8005e8c:	d0e2      	beq.n	8005e54 <_scanf_float+0x1d4>
 8005e8e:	2d05      	cmp	r5, #5
 8005e90:	e7de      	b.n	8005e50 <_scanf_float+0x1d0>
 8005e92:	2d02      	cmp	r5, #2
 8005e94:	f47f af26 	bne.w	8005ce4 <_scanf_float+0x64>
 8005e98:	2503      	movs	r5, #3
 8005e9a:	e7b7      	b.n	8005e0c <_scanf_float+0x18c>
 8005e9c:	2d06      	cmp	r5, #6
 8005e9e:	f47f af21 	bne.w	8005ce4 <_scanf_float+0x64>
 8005ea2:	2507      	movs	r5, #7
 8005ea4:	e7b2      	b.n	8005e0c <_scanf_float+0x18c>
 8005ea6:	6822      	ldr	r2, [r4, #0]
 8005ea8:	0591      	lsls	r1, r2, #22
 8005eaa:	f57f af1b 	bpl.w	8005ce4 <_scanf_float+0x64>
 8005eae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005eb2:	6022      	str	r2, [r4, #0]
 8005eb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8005eb8:	e7a8      	b.n	8005e0c <_scanf_float+0x18c>
 8005eba:	6822      	ldr	r2, [r4, #0]
 8005ebc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005ec0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005ec4:	d006      	beq.n	8005ed4 <_scanf_float+0x254>
 8005ec6:	0550      	lsls	r0, r2, #21
 8005ec8:	f57f af0c 	bpl.w	8005ce4 <_scanf_float+0x64>
 8005ecc:	f1b9 0f00 	cmp.w	r9, #0
 8005ed0:	f43f af0f 	beq.w	8005cf2 <_scanf_float+0x72>
 8005ed4:	0591      	lsls	r1, r2, #22
 8005ed6:	bf58      	it	pl
 8005ed8:	9901      	ldrpl	r1, [sp, #4]
 8005eda:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ede:	bf58      	it	pl
 8005ee0:	eba9 0101 	subpl.w	r1, r9, r1
 8005ee4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005ee8:	f04f 0900 	mov.w	r9, #0
 8005eec:	bf58      	it	pl
 8005eee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005ef2:	6022      	str	r2, [r4, #0]
 8005ef4:	e78a      	b.n	8005e0c <_scanf_float+0x18c>
 8005ef6:	f04f 0a03 	mov.w	sl, #3
 8005efa:	e787      	b.n	8005e0c <_scanf_float+0x18c>
 8005efc:	4639      	mov	r1, r7
 8005efe:	4640      	mov	r0, r8
 8005f00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005f04:	4798      	blx	r3
 8005f06:	2800      	cmp	r0, #0
 8005f08:	f43f aedf 	beq.w	8005cca <_scanf_float+0x4a>
 8005f0c:	e6ea      	b.n	8005ce4 <_scanf_float+0x64>
 8005f0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f12:	463a      	mov	r2, r7
 8005f14:	4640      	mov	r0, r8
 8005f16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f1a:	4798      	blx	r3
 8005f1c:	6923      	ldr	r3, [r4, #16]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	6123      	str	r3, [r4, #16]
 8005f22:	e6ec      	b.n	8005cfe <_scanf_float+0x7e>
 8005f24:	1e6b      	subs	r3, r5, #1
 8005f26:	2b06      	cmp	r3, #6
 8005f28:	d825      	bhi.n	8005f76 <_scanf_float+0x2f6>
 8005f2a:	2d02      	cmp	r5, #2
 8005f2c:	d836      	bhi.n	8005f9c <_scanf_float+0x31c>
 8005f2e:	455e      	cmp	r6, fp
 8005f30:	f67f aee8 	bls.w	8005d04 <_scanf_float+0x84>
 8005f34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f38:	463a      	mov	r2, r7
 8005f3a:	4640      	mov	r0, r8
 8005f3c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f40:	4798      	blx	r3
 8005f42:	6923      	ldr	r3, [r4, #16]
 8005f44:	3b01      	subs	r3, #1
 8005f46:	6123      	str	r3, [r4, #16]
 8005f48:	e7f1      	b.n	8005f2e <_scanf_float+0x2ae>
 8005f4a:	9802      	ldr	r0, [sp, #8]
 8005f4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f50:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005f54:	463a      	mov	r2, r7
 8005f56:	9002      	str	r0, [sp, #8]
 8005f58:	4640      	mov	r0, r8
 8005f5a:	4798      	blx	r3
 8005f5c:	6923      	ldr	r3, [r4, #16]
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	6123      	str	r3, [r4, #16]
 8005f62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f66:	fa5f fa8a 	uxtb.w	sl, sl
 8005f6a:	f1ba 0f02 	cmp.w	sl, #2
 8005f6e:	d1ec      	bne.n	8005f4a <_scanf_float+0x2ca>
 8005f70:	3d03      	subs	r5, #3
 8005f72:	b2ed      	uxtb	r5, r5
 8005f74:	1b76      	subs	r6, r6, r5
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	05da      	lsls	r2, r3, #23
 8005f7a:	d52f      	bpl.n	8005fdc <_scanf_float+0x35c>
 8005f7c:	055b      	lsls	r3, r3, #21
 8005f7e:	d510      	bpl.n	8005fa2 <_scanf_float+0x322>
 8005f80:	455e      	cmp	r6, fp
 8005f82:	f67f aebf 	bls.w	8005d04 <_scanf_float+0x84>
 8005f86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f8a:	463a      	mov	r2, r7
 8005f8c:	4640      	mov	r0, r8
 8005f8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f92:	4798      	blx	r3
 8005f94:	6923      	ldr	r3, [r4, #16]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	6123      	str	r3, [r4, #16]
 8005f9a:	e7f1      	b.n	8005f80 <_scanf_float+0x300>
 8005f9c:	46aa      	mov	sl, r5
 8005f9e:	9602      	str	r6, [sp, #8]
 8005fa0:	e7df      	b.n	8005f62 <_scanf_float+0x2e2>
 8005fa2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005fa6:	6923      	ldr	r3, [r4, #16]
 8005fa8:	2965      	cmp	r1, #101	; 0x65
 8005faa:	f103 33ff 	add.w	r3, r3, #4294967295
 8005fae:	f106 35ff 	add.w	r5, r6, #4294967295
 8005fb2:	6123      	str	r3, [r4, #16]
 8005fb4:	d00c      	beq.n	8005fd0 <_scanf_float+0x350>
 8005fb6:	2945      	cmp	r1, #69	; 0x45
 8005fb8:	d00a      	beq.n	8005fd0 <_scanf_float+0x350>
 8005fba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fbe:	463a      	mov	r2, r7
 8005fc0:	4640      	mov	r0, r8
 8005fc2:	4798      	blx	r3
 8005fc4:	6923      	ldr	r3, [r4, #16]
 8005fc6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	1eb5      	subs	r5, r6, #2
 8005fce:	6123      	str	r3, [r4, #16]
 8005fd0:	463a      	mov	r2, r7
 8005fd2:	4640      	mov	r0, r8
 8005fd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fd8:	4798      	blx	r3
 8005fda:	462e      	mov	r6, r5
 8005fdc:	6825      	ldr	r5, [r4, #0]
 8005fde:	f015 0510 	ands.w	r5, r5, #16
 8005fe2:	d155      	bne.n	8006090 <_scanf_float+0x410>
 8005fe4:	7035      	strb	r5, [r6, #0]
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff0:	d11b      	bne.n	800602a <_scanf_float+0x3aa>
 8005ff2:	9b01      	ldr	r3, [sp, #4]
 8005ff4:	454b      	cmp	r3, r9
 8005ff6:	eba3 0209 	sub.w	r2, r3, r9
 8005ffa:	d123      	bne.n	8006044 <_scanf_float+0x3c4>
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	4659      	mov	r1, fp
 8006000:	4640      	mov	r0, r8
 8006002:	f000 fe79 	bl	8006cf8 <_strtod_r>
 8006006:	6822      	ldr	r2, [r4, #0]
 8006008:	9b03      	ldr	r3, [sp, #12]
 800600a:	f012 0f02 	tst.w	r2, #2
 800600e:	4606      	mov	r6, r0
 8006010:	460f      	mov	r7, r1
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	d021      	beq.n	800605a <_scanf_float+0x3da>
 8006016:	1d1a      	adds	r2, r3, #4
 8006018:	9903      	ldr	r1, [sp, #12]
 800601a:	600a      	str	r2, [r1, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	e9c3 6700 	strd	r6, r7, [r3]
 8006022:	68e3      	ldr	r3, [r4, #12]
 8006024:	3301      	adds	r3, #1
 8006026:	60e3      	str	r3, [r4, #12]
 8006028:	e66d      	b.n	8005d06 <_scanf_float+0x86>
 800602a:	9b04      	ldr	r3, [sp, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0e5      	beq.n	8005ffc <_scanf_float+0x37c>
 8006030:	9905      	ldr	r1, [sp, #20]
 8006032:	230a      	movs	r3, #10
 8006034:	462a      	mov	r2, r5
 8006036:	4640      	mov	r0, r8
 8006038:	3101      	adds	r1, #1
 800603a:	f000 fedf 	bl	8006dfc <_strtol_r>
 800603e:	9b04      	ldr	r3, [sp, #16]
 8006040:	9e05      	ldr	r6, [sp, #20]
 8006042:	1ac2      	subs	r2, r0, r3
 8006044:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006048:	429e      	cmp	r6, r3
 800604a:	bf28      	it	cs
 800604c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006050:	4630      	mov	r0, r6
 8006052:	4910      	ldr	r1, [pc, #64]	; (8006094 <_scanf_float+0x414>)
 8006054:	f000 f826 	bl	80060a4 <siprintf>
 8006058:	e7d0      	b.n	8005ffc <_scanf_float+0x37c>
 800605a:	f012 0f04 	tst.w	r2, #4
 800605e:	f103 0204 	add.w	r2, r3, #4
 8006062:	d1d9      	bne.n	8006018 <_scanf_float+0x398>
 8006064:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006068:	f8cc 2000 	str.w	r2, [ip]
 800606c:	f8d3 8000 	ldr.w	r8, [r3]
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	f7fc ff68 	bl	8002f48 <__aeabi_dcmpun>
 8006078:	b128      	cbz	r0, 8006086 <_scanf_float+0x406>
 800607a:	4807      	ldr	r0, [pc, #28]	; (8006098 <_scanf_float+0x418>)
 800607c:	f000 f80e 	bl	800609c <nanf>
 8006080:	f8c8 0000 	str.w	r0, [r8]
 8006084:	e7cd      	b.n	8006022 <_scanf_float+0x3a2>
 8006086:	4630      	mov	r0, r6
 8006088:	4639      	mov	r1, r7
 800608a:	f7fc ffbb 	bl	8003004 <__aeabi_d2f>
 800608e:	e7f7      	b.n	8006080 <_scanf_float+0x400>
 8006090:	2500      	movs	r5, #0
 8006092:	e638      	b.n	8005d06 <_scanf_float+0x86>
 8006094:	0801b678 	.word	0x0801b678
 8006098:	0801b5f0 	.word	0x0801b5f0

0800609c <nanf>:
 800609c:	4800      	ldr	r0, [pc, #0]	; (80060a0 <nanf+0x4>)
 800609e:	4770      	bx	lr
 80060a0:	7fc00000 	.word	0x7fc00000

080060a4 <siprintf>:
 80060a4:	b40e      	push	{r1, r2, r3}
 80060a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060aa:	b500      	push	{lr}
 80060ac:	b09c      	sub	sp, #112	; 0x70
 80060ae:	ab1d      	add	r3, sp, #116	; 0x74
 80060b0:	9002      	str	r0, [sp, #8]
 80060b2:	9006      	str	r0, [sp, #24]
 80060b4:	9107      	str	r1, [sp, #28]
 80060b6:	9104      	str	r1, [sp, #16]
 80060b8:	4808      	ldr	r0, [pc, #32]	; (80060dc <siprintf+0x38>)
 80060ba:	4909      	ldr	r1, [pc, #36]	; (80060e0 <siprintf+0x3c>)
 80060bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80060c0:	9105      	str	r1, [sp, #20]
 80060c2:	6800      	ldr	r0, [r0, #0]
 80060c4:	a902      	add	r1, sp, #8
 80060c6:	9301      	str	r3, [sp, #4]
 80060c8:	f002 fec4 	bl	8008e54 <_svfiprintf_r>
 80060cc:	2200      	movs	r2, #0
 80060ce:	9b02      	ldr	r3, [sp, #8]
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	b01c      	add	sp, #112	; 0x70
 80060d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80060d8:	b003      	add	sp, #12
 80060da:	4770      	bx	lr
 80060dc:	2000000c 	.word	0x2000000c
 80060e0:	ffff0208 	.word	0xffff0208

080060e4 <sulp>:
 80060e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060e8:	460f      	mov	r7, r1
 80060ea:	4690      	mov	r8, r2
 80060ec:	f002 fc1e 	bl	800892c <__ulp>
 80060f0:	4604      	mov	r4, r0
 80060f2:	460d      	mov	r5, r1
 80060f4:	f1b8 0f00 	cmp.w	r8, #0
 80060f8:	d011      	beq.n	800611e <sulp+0x3a>
 80060fa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80060fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006102:	2b00      	cmp	r3, #0
 8006104:	dd0b      	ble.n	800611e <sulp+0x3a>
 8006106:	2400      	movs	r4, #0
 8006108:	051b      	lsls	r3, r3, #20
 800610a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800610e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006112:	4622      	mov	r2, r4
 8006114:	462b      	mov	r3, r5
 8006116:	f7fc fc7d 	bl	8002a14 <__aeabi_dmul>
 800611a:	4604      	mov	r4, r0
 800611c:	460d      	mov	r5, r1
 800611e:	4620      	mov	r0, r4
 8006120:	4629      	mov	r1, r5
 8006122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006128 <_strtod_l>:
 8006128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612c:	469b      	mov	fp, r3
 800612e:	2300      	movs	r3, #0
 8006130:	b09f      	sub	sp, #124	; 0x7c
 8006132:	931a      	str	r3, [sp, #104]	; 0x68
 8006134:	4b9e      	ldr	r3, [pc, #632]	; (80063b0 <_strtod_l+0x288>)
 8006136:	4682      	mov	sl, r0
 8006138:	681f      	ldr	r7, [r3, #0]
 800613a:	460e      	mov	r6, r1
 800613c:	4638      	mov	r0, r7
 800613e:	9215      	str	r2, [sp, #84]	; 0x54
 8006140:	f7fc faa4 	bl	800268c <strlen>
 8006144:	f04f 0800 	mov.w	r8, #0
 8006148:	4604      	mov	r4, r0
 800614a:	f04f 0900 	mov.w	r9, #0
 800614e:	9619      	str	r6, [sp, #100]	; 0x64
 8006150:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006152:	781a      	ldrb	r2, [r3, #0]
 8006154:	2a2b      	cmp	r2, #43	; 0x2b
 8006156:	d04c      	beq.n	80061f2 <_strtod_l+0xca>
 8006158:	d83a      	bhi.n	80061d0 <_strtod_l+0xa8>
 800615a:	2a0d      	cmp	r2, #13
 800615c:	d833      	bhi.n	80061c6 <_strtod_l+0x9e>
 800615e:	2a08      	cmp	r2, #8
 8006160:	d833      	bhi.n	80061ca <_strtod_l+0xa2>
 8006162:	2a00      	cmp	r2, #0
 8006164:	d03d      	beq.n	80061e2 <_strtod_l+0xba>
 8006166:	2300      	movs	r3, #0
 8006168:	930a      	str	r3, [sp, #40]	; 0x28
 800616a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800616c:	782b      	ldrb	r3, [r5, #0]
 800616e:	2b30      	cmp	r3, #48	; 0x30
 8006170:	f040 80aa 	bne.w	80062c8 <_strtod_l+0x1a0>
 8006174:	786b      	ldrb	r3, [r5, #1]
 8006176:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800617a:	2b58      	cmp	r3, #88	; 0x58
 800617c:	d166      	bne.n	800624c <_strtod_l+0x124>
 800617e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006180:	4650      	mov	r0, sl
 8006182:	9301      	str	r3, [sp, #4]
 8006184:	ab1a      	add	r3, sp, #104	; 0x68
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	4a8a      	ldr	r2, [pc, #552]	; (80063b4 <_strtod_l+0x28c>)
 800618a:	f8cd b008 	str.w	fp, [sp, #8]
 800618e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006190:	a919      	add	r1, sp, #100	; 0x64
 8006192:	f001 fd23 	bl	8007bdc <__gethex>
 8006196:	f010 0607 	ands.w	r6, r0, #7
 800619a:	4604      	mov	r4, r0
 800619c:	d005      	beq.n	80061aa <_strtod_l+0x82>
 800619e:	2e06      	cmp	r6, #6
 80061a0:	d129      	bne.n	80061f6 <_strtod_l+0xce>
 80061a2:	2300      	movs	r3, #0
 80061a4:	3501      	adds	r5, #1
 80061a6:	9519      	str	r5, [sp, #100]	; 0x64
 80061a8:	930a      	str	r3, [sp, #40]	; 0x28
 80061aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f040 858a 	bne.w	8006cc6 <_strtod_l+0xb9e>
 80061b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061b4:	b1d3      	cbz	r3, 80061ec <_strtod_l+0xc4>
 80061b6:	4642      	mov	r2, r8
 80061b8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80061bc:	4610      	mov	r0, r2
 80061be:	4619      	mov	r1, r3
 80061c0:	b01f      	add	sp, #124	; 0x7c
 80061c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c6:	2a20      	cmp	r2, #32
 80061c8:	d1cd      	bne.n	8006166 <_strtod_l+0x3e>
 80061ca:	3301      	adds	r3, #1
 80061cc:	9319      	str	r3, [sp, #100]	; 0x64
 80061ce:	e7bf      	b.n	8006150 <_strtod_l+0x28>
 80061d0:	2a2d      	cmp	r2, #45	; 0x2d
 80061d2:	d1c8      	bne.n	8006166 <_strtod_l+0x3e>
 80061d4:	2201      	movs	r2, #1
 80061d6:	920a      	str	r2, [sp, #40]	; 0x28
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	9219      	str	r2, [sp, #100]	; 0x64
 80061dc:	785b      	ldrb	r3, [r3, #1]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1c3      	bne.n	800616a <_strtod_l+0x42>
 80061e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061e4:	9619      	str	r6, [sp, #100]	; 0x64
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f040 856b 	bne.w	8006cc2 <_strtod_l+0xb9a>
 80061ec:	4642      	mov	r2, r8
 80061ee:	464b      	mov	r3, r9
 80061f0:	e7e4      	b.n	80061bc <_strtod_l+0x94>
 80061f2:	2200      	movs	r2, #0
 80061f4:	e7ef      	b.n	80061d6 <_strtod_l+0xae>
 80061f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80061f8:	b13a      	cbz	r2, 800620a <_strtod_l+0xe2>
 80061fa:	2135      	movs	r1, #53	; 0x35
 80061fc:	a81c      	add	r0, sp, #112	; 0x70
 80061fe:	f002 fc99 	bl	8008b34 <__copybits>
 8006202:	4650      	mov	r0, sl
 8006204:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006206:	f002 f861 	bl	80082cc <_Bfree>
 800620a:	3e01      	subs	r6, #1
 800620c:	2e04      	cmp	r6, #4
 800620e:	d806      	bhi.n	800621e <_strtod_l+0xf6>
 8006210:	e8df f006 	tbb	[pc, r6]
 8006214:	1714030a 	.word	0x1714030a
 8006218:	0a          	.byte	0x0a
 8006219:	00          	.byte	0x00
 800621a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800621e:	0721      	lsls	r1, r4, #28
 8006220:	d5c3      	bpl.n	80061aa <_strtod_l+0x82>
 8006222:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006226:	e7c0      	b.n	80061aa <_strtod_l+0x82>
 8006228:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800622a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800622e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006232:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006236:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800623a:	e7f0      	b.n	800621e <_strtod_l+0xf6>
 800623c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80063b8 <_strtod_l+0x290>
 8006240:	e7ed      	b.n	800621e <_strtod_l+0xf6>
 8006242:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006246:	f04f 38ff 	mov.w	r8, #4294967295
 800624a:	e7e8      	b.n	800621e <_strtod_l+0xf6>
 800624c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	9219      	str	r2, [sp, #100]	; 0x64
 8006252:	785b      	ldrb	r3, [r3, #1]
 8006254:	2b30      	cmp	r3, #48	; 0x30
 8006256:	d0f9      	beq.n	800624c <_strtod_l+0x124>
 8006258:	2b00      	cmp	r3, #0
 800625a:	d0a6      	beq.n	80061aa <_strtod_l+0x82>
 800625c:	2301      	movs	r3, #1
 800625e:	9307      	str	r3, [sp, #28]
 8006260:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006262:	220a      	movs	r2, #10
 8006264:	9308      	str	r3, [sp, #32]
 8006266:	2300      	movs	r3, #0
 8006268:	469b      	mov	fp, r3
 800626a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800626e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006270:	7805      	ldrb	r5, [r0, #0]
 8006272:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006276:	b2d9      	uxtb	r1, r3
 8006278:	2909      	cmp	r1, #9
 800627a:	d927      	bls.n	80062cc <_strtod_l+0x1a4>
 800627c:	4622      	mov	r2, r4
 800627e:	4639      	mov	r1, r7
 8006280:	f002 fefe 	bl	8009080 <strncmp>
 8006284:	2800      	cmp	r0, #0
 8006286:	d033      	beq.n	80062f0 <_strtod_l+0x1c8>
 8006288:	2000      	movs	r0, #0
 800628a:	462a      	mov	r2, r5
 800628c:	465c      	mov	r4, fp
 800628e:	4603      	mov	r3, r0
 8006290:	9004      	str	r0, [sp, #16]
 8006292:	2a65      	cmp	r2, #101	; 0x65
 8006294:	d001      	beq.n	800629a <_strtod_l+0x172>
 8006296:	2a45      	cmp	r2, #69	; 0x45
 8006298:	d114      	bne.n	80062c4 <_strtod_l+0x19c>
 800629a:	b91c      	cbnz	r4, 80062a4 <_strtod_l+0x17c>
 800629c:	9a07      	ldr	r2, [sp, #28]
 800629e:	4302      	orrs	r2, r0
 80062a0:	d09f      	beq.n	80061e2 <_strtod_l+0xba>
 80062a2:	2400      	movs	r4, #0
 80062a4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80062a6:	1c72      	adds	r2, r6, #1
 80062a8:	9219      	str	r2, [sp, #100]	; 0x64
 80062aa:	7872      	ldrb	r2, [r6, #1]
 80062ac:	2a2b      	cmp	r2, #43	; 0x2b
 80062ae:	d079      	beq.n	80063a4 <_strtod_l+0x27c>
 80062b0:	2a2d      	cmp	r2, #45	; 0x2d
 80062b2:	f000 8083 	beq.w	80063bc <_strtod_l+0x294>
 80062b6:	2700      	movs	r7, #0
 80062b8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80062bc:	2909      	cmp	r1, #9
 80062be:	f240 8083 	bls.w	80063c8 <_strtod_l+0x2a0>
 80062c2:	9619      	str	r6, [sp, #100]	; 0x64
 80062c4:	2500      	movs	r5, #0
 80062c6:	e09f      	b.n	8006408 <_strtod_l+0x2e0>
 80062c8:	2300      	movs	r3, #0
 80062ca:	e7c8      	b.n	800625e <_strtod_l+0x136>
 80062cc:	f1bb 0f08 	cmp.w	fp, #8
 80062d0:	bfd5      	itete	le
 80062d2:	9906      	ldrle	r1, [sp, #24]
 80062d4:	9905      	ldrgt	r1, [sp, #20]
 80062d6:	fb02 3301 	mlale	r3, r2, r1, r3
 80062da:	fb02 3301 	mlagt	r3, r2, r1, r3
 80062de:	f100 0001 	add.w	r0, r0, #1
 80062e2:	bfd4      	ite	le
 80062e4:	9306      	strle	r3, [sp, #24]
 80062e6:	9305      	strgt	r3, [sp, #20]
 80062e8:	f10b 0b01 	add.w	fp, fp, #1
 80062ec:	9019      	str	r0, [sp, #100]	; 0x64
 80062ee:	e7be      	b.n	800626e <_strtod_l+0x146>
 80062f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062f2:	191a      	adds	r2, r3, r4
 80062f4:	9219      	str	r2, [sp, #100]	; 0x64
 80062f6:	5d1a      	ldrb	r2, [r3, r4]
 80062f8:	f1bb 0f00 	cmp.w	fp, #0
 80062fc:	d036      	beq.n	800636c <_strtod_l+0x244>
 80062fe:	465c      	mov	r4, fp
 8006300:	9004      	str	r0, [sp, #16]
 8006302:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006306:	2b09      	cmp	r3, #9
 8006308:	d912      	bls.n	8006330 <_strtod_l+0x208>
 800630a:	2301      	movs	r3, #1
 800630c:	e7c1      	b.n	8006292 <_strtod_l+0x16a>
 800630e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006310:	3001      	adds	r0, #1
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	9219      	str	r2, [sp, #100]	; 0x64
 8006316:	785a      	ldrb	r2, [r3, #1]
 8006318:	2a30      	cmp	r2, #48	; 0x30
 800631a:	d0f8      	beq.n	800630e <_strtod_l+0x1e6>
 800631c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006320:	2b08      	cmp	r3, #8
 8006322:	f200 84d5 	bhi.w	8006cd0 <_strtod_l+0xba8>
 8006326:	9004      	str	r0, [sp, #16]
 8006328:	2000      	movs	r0, #0
 800632a:	4604      	mov	r4, r0
 800632c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800632e:	9308      	str	r3, [sp, #32]
 8006330:	3a30      	subs	r2, #48	; 0x30
 8006332:	f100 0301 	add.w	r3, r0, #1
 8006336:	d013      	beq.n	8006360 <_strtod_l+0x238>
 8006338:	9904      	ldr	r1, [sp, #16]
 800633a:	1905      	adds	r5, r0, r4
 800633c:	4419      	add	r1, r3
 800633e:	9104      	str	r1, [sp, #16]
 8006340:	4623      	mov	r3, r4
 8006342:	210a      	movs	r1, #10
 8006344:	42ab      	cmp	r3, r5
 8006346:	d113      	bne.n	8006370 <_strtod_l+0x248>
 8006348:	1823      	adds	r3, r4, r0
 800634a:	2b08      	cmp	r3, #8
 800634c:	f104 0401 	add.w	r4, r4, #1
 8006350:	4404      	add	r4, r0
 8006352:	dc1b      	bgt.n	800638c <_strtod_l+0x264>
 8006354:	230a      	movs	r3, #10
 8006356:	9906      	ldr	r1, [sp, #24]
 8006358:	fb03 2301 	mla	r3, r3, r1, r2
 800635c:	9306      	str	r3, [sp, #24]
 800635e:	2300      	movs	r3, #0
 8006360:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006362:	4618      	mov	r0, r3
 8006364:	1c51      	adds	r1, r2, #1
 8006366:	9119      	str	r1, [sp, #100]	; 0x64
 8006368:	7852      	ldrb	r2, [r2, #1]
 800636a:	e7ca      	b.n	8006302 <_strtod_l+0x1da>
 800636c:	4658      	mov	r0, fp
 800636e:	e7d3      	b.n	8006318 <_strtod_l+0x1f0>
 8006370:	2b08      	cmp	r3, #8
 8006372:	dc04      	bgt.n	800637e <_strtod_l+0x256>
 8006374:	9f06      	ldr	r7, [sp, #24]
 8006376:	434f      	muls	r7, r1
 8006378:	9706      	str	r7, [sp, #24]
 800637a:	3301      	adds	r3, #1
 800637c:	e7e2      	b.n	8006344 <_strtod_l+0x21c>
 800637e:	1c5f      	adds	r7, r3, #1
 8006380:	2f10      	cmp	r7, #16
 8006382:	bfde      	ittt	le
 8006384:	9f05      	ldrle	r7, [sp, #20]
 8006386:	434f      	mulle	r7, r1
 8006388:	9705      	strle	r7, [sp, #20]
 800638a:	e7f6      	b.n	800637a <_strtod_l+0x252>
 800638c:	2c10      	cmp	r4, #16
 800638e:	bfdf      	itttt	le
 8006390:	230a      	movle	r3, #10
 8006392:	9905      	ldrle	r1, [sp, #20]
 8006394:	fb03 2301 	mlale	r3, r3, r1, r2
 8006398:	9305      	strle	r3, [sp, #20]
 800639a:	e7e0      	b.n	800635e <_strtod_l+0x236>
 800639c:	2300      	movs	r3, #0
 800639e:	9304      	str	r3, [sp, #16]
 80063a0:	2301      	movs	r3, #1
 80063a2:	e77b      	b.n	800629c <_strtod_l+0x174>
 80063a4:	2700      	movs	r7, #0
 80063a6:	1cb2      	adds	r2, r6, #2
 80063a8:	9219      	str	r2, [sp, #100]	; 0x64
 80063aa:	78b2      	ldrb	r2, [r6, #2]
 80063ac:	e784      	b.n	80062b8 <_strtod_l+0x190>
 80063ae:	bf00      	nop
 80063b0:	0801b8c8 	.word	0x0801b8c8
 80063b4:	0801b680 	.word	0x0801b680
 80063b8:	7ff00000 	.word	0x7ff00000
 80063bc:	2701      	movs	r7, #1
 80063be:	e7f2      	b.n	80063a6 <_strtod_l+0x27e>
 80063c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80063c2:	1c51      	adds	r1, r2, #1
 80063c4:	9119      	str	r1, [sp, #100]	; 0x64
 80063c6:	7852      	ldrb	r2, [r2, #1]
 80063c8:	2a30      	cmp	r2, #48	; 0x30
 80063ca:	d0f9      	beq.n	80063c0 <_strtod_l+0x298>
 80063cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80063d0:	2908      	cmp	r1, #8
 80063d2:	f63f af77 	bhi.w	80062c4 <_strtod_l+0x19c>
 80063d6:	f04f 0e0a 	mov.w	lr, #10
 80063da:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80063de:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80063e0:	9209      	str	r2, [sp, #36]	; 0x24
 80063e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80063e4:	1c51      	adds	r1, r2, #1
 80063e6:	9119      	str	r1, [sp, #100]	; 0x64
 80063e8:	7852      	ldrb	r2, [r2, #1]
 80063ea:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80063ee:	2d09      	cmp	r5, #9
 80063f0:	d935      	bls.n	800645e <_strtod_l+0x336>
 80063f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80063f4:	1b49      	subs	r1, r1, r5
 80063f6:	2908      	cmp	r1, #8
 80063f8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80063fc:	dc02      	bgt.n	8006404 <_strtod_l+0x2dc>
 80063fe:	4565      	cmp	r5, ip
 8006400:	bfa8      	it	ge
 8006402:	4665      	movge	r5, ip
 8006404:	b107      	cbz	r7, 8006408 <_strtod_l+0x2e0>
 8006406:	426d      	negs	r5, r5
 8006408:	2c00      	cmp	r4, #0
 800640a:	d14c      	bne.n	80064a6 <_strtod_l+0x37e>
 800640c:	9907      	ldr	r1, [sp, #28]
 800640e:	4301      	orrs	r1, r0
 8006410:	f47f aecb 	bne.w	80061aa <_strtod_l+0x82>
 8006414:	2b00      	cmp	r3, #0
 8006416:	f47f aee4 	bne.w	80061e2 <_strtod_l+0xba>
 800641a:	2a69      	cmp	r2, #105	; 0x69
 800641c:	d026      	beq.n	800646c <_strtod_l+0x344>
 800641e:	dc23      	bgt.n	8006468 <_strtod_l+0x340>
 8006420:	2a49      	cmp	r2, #73	; 0x49
 8006422:	d023      	beq.n	800646c <_strtod_l+0x344>
 8006424:	2a4e      	cmp	r2, #78	; 0x4e
 8006426:	f47f aedc 	bne.w	80061e2 <_strtod_l+0xba>
 800642a:	499d      	ldr	r1, [pc, #628]	; (80066a0 <_strtod_l+0x578>)
 800642c:	a819      	add	r0, sp, #100	; 0x64
 800642e:	f001 fe23 	bl	8008078 <__match>
 8006432:	2800      	cmp	r0, #0
 8006434:	f43f aed5 	beq.w	80061e2 <_strtod_l+0xba>
 8006438:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b28      	cmp	r3, #40	; 0x28
 800643e:	d12c      	bne.n	800649a <_strtod_l+0x372>
 8006440:	4998      	ldr	r1, [pc, #608]	; (80066a4 <_strtod_l+0x57c>)
 8006442:	aa1c      	add	r2, sp, #112	; 0x70
 8006444:	a819      	add	r0, sp, #100	; 0x64
 8006446:	f001 fe2b 	bl	80080a0 <__hexnan>
 800644a:	2805      	cmp	r0, #5
 800644c:	d125      	bne.n	800649a <_strtod_l+0x372>
 800644e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006450:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006454:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006458:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800645c:	e6a5      	b.n	80061aa <_strtod_l+0x82>
 800645e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8006462:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006466:	e7bc      	b.n	80063e2 <_strtod_l+0x2ba>
 8006468:	2a6e      	cmp	r2, #110	; 0x6e
 800646a:	e7dc      	b.n	8006426 <_strtod_l+0x2fe>
 800646c:	498e      	ldr	r1, [pc, #568]	; (80066a8 <_strtod_l+0x580>)
 800646e:	a819      	add	r0, sp, #100	; 0x64
 8006470:	f001 fe02 	bl	8008078 <__match>
 8006474:	2800      	cmp	r0, #0
 8006476:	f43f aeb4 	beq.w	80061e2 <_strtod_l+0xba>
 800647a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800647c:	498b      	ldr	r1, [pc, #556]	; (80066ac <_strtod_l+0x584>)
 800647e:	3b01      	subs	r3, #1
 8006480:	a819      	add	r0, sp, #100	; 0x64
 8006482:	9319      	str	r3, [sp, #100]	; 0x64
 8006484:	f001 fdf8 	bl	8008078 <__match>
 8006488:	b910      	cbnz	r0, 8006490 <_strtod_l+0x368>
 800648a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800648c:	3301      	adds	r3, #1
 800648e:	9319      	str	r3, [sp, #100]	; 0x64
 8006490:	f04f 0800 	mov.w	r8, #0
 8006494:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80066b0 <_strtod_l+0x588>
 8006498:	e687      	b.n	80061aa <_strtod_l+0x82>
 800649a:	4886      	ldr	r0, [pc, #536]	; (80066b4 <_strtod_l+0x58c>)
 800649c:	f002 fdda 	bl	8009054 <nan>
 80064a0:	4680      	mov	r8, r0
 80064a2:	4689      	mov	r9, r1
 80064a4:	e681      	b.n	80061aa <_strtod_l+0x82>
 80064a6:	9b04      	ldr	r3, [sp, #16]
 80064a8:	f1bb 0f00 	cmp.w	fp, #0
 80064ac:	bf08      	it	eq
 80064ae:	46a3      	moveq	fp, r4
 80064b0:	1aeb      	subs	r3, r5, r3
 80064b2:	2c10      	cmp	r4, #16
 80064b4:	9806      	ldr	r0, [sp, #24]
 80064b6:	4626      	mov	r6, r4
 80064b8:	9307      	str	r3, [sp, #28]
 80064ba:	bfa8      	it	ge
 80064bc:	2610      	movge	r6, #16
 80064be:	f7fc fa2f 	bl	8002920 <__aeabi_ui2d>
 80064c2:	2c09      	cmp	r4, #9
 80064c4:	4680      	mov	r8, r0
 80064c6:	4689      	mov	r9, r1
 80064c8:	dd13      	ble.n	80064f2 <_strtod_l+0x3ca>
 80064ca:	4b7b      	ldr	r3, [pc, #492]	; (80066b8 <_strtod_l+0x590>)
 80064cc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80064d0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80064d4:	f7fc fa9e 	bl	8002a14 <__aeabi_dmul>
 80064d8:	4680      	mov	r8, r0
 80064da:	9805      	ldr	r0, [sp, #20]
 80064dc:	4689      	mov	r9, r1
 80064de:	f7fc fa1f 	bl	8002920 <__aeabi_ui2d>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	4640      	mov	r0, r8
 80064e8:	4649      	mov	r1, r9
 80064ea:	f7fc f8dd 	bl	80026a8 <__adddf3>
 80064ee:	4680      	mov	r8, r0
 80064f0:	4689      	mov	r9, r1
 80064f2:	2c0f      	cmp	r4, #15
 80064f4:	dc36      	bgt.n	8006564 <_strtod_l+0x43c>
 80064f6:	9b07      	ldr	r3, [sp, #28]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f43f ae56 	beq.w	80061aa <_strtod_l+0x82>
 80064fe:	dd22      	ble.n	8006546 <_strtod_l+0x41e>
 8006500:	2b16      	cmp	r3, #22
 8006502:	dc09      	bgt.n	8006518 <_strtod_l+0x3f0>
 8006504:	496c      	ldr	r1, [pc, #432]	; (80066b8 <_strtod_l+0x590>)
 8006506:	4642      	mov	r2, r8
 8006508:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800650c:	464b      	mov	r3, r9
 800650e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006512:	f7fc fa7f 	bl	8002a14 <__aeabi_dmul>
 8006516:	e7c3      	b.n	80064a0 <_strtod_l+0x378>
 8006518:	9a07      	ldr	r2, [sp, #28]
 800651a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800651e:	4293      	cmp	r3, r2
 8006520:	db20      	blt.n	8006564 <_strtod_l+0x43c>
 8006522:	4d65      	ldr	r5, [pc, #404]	; (80066b8 <_strtod_l+0x590>)
 8006524:	f1c4 040f 	rsb	r4, r4, #15
 8006528:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800652c:	4642      	mov	r2, r8
 800652e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006532:	464b      	mov	r3, r9
 8006534:	f7fc fa6e 	bl	8002a14 <__aeabi_dmul>
 8006538:	9b07      	ldr	r3, [sp, #28]
 800653a:	1b1c      	subs	r4, r3, r4
 800653c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006540:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006544:	e7e5      	b.n	8006512 <_strtod_l+0x3ea>
 8006546:	9b07      	ldr	r3, [sp, #28]
 8006548:	3316      	adds	r3, #22
 800654a:	db0b      	blt.n	8006564 <_strtod_l+0x43c>
 800654c:	9b04      	ldr	r3, [sp, #16]
 800654e:	4640      	mov	r0, r8
 8006550:	1b5d      	subs	r5, r3, r5
 8006552:	4b59      	ldr	r3, [pc, #356]	; (80066b8 <_strtod_l+0x590>)
 8006554:	4649      	mov	r1, r9
 8006556:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800655a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800655e:	f7fc fb83 	bl	8002c68 <__aeabi_ddiv>
 8006562:	e79d      	b.n	80064a0 <_strtod_l+0x378>
 8006564:	9b07      	ldr	r3, [sp, #28]
 8006566:	1ba6      	subs	r6, r4, r6
 8006568:	441e      	add	r6, r3
 800656a:	2e00      	cmp	r6, #0
 800656c:	dd74      	ble.n	8006658 <_strtod_l+0x530>
 800656e:	f016 030f 	ands.w	r3, r6, #15
 8006572:	d00a      	beq.n	800658a <_strtod_l+0x462>
 8006574:	4950      	ldr	r1, [pc, #320]	; (80066b8 <_strtod_l+0x590>)
 8006576:	4642      	mov	r2, r8
 8006578:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800657c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006580:	464b      	mov	r3, r9
 8006582:	f7fc fa47 	bl	8002a14 <__aeabi_dmul>
 8006586:	4680      	mov	r8, r0
 8006588:	4689      	mov	r9, r1
 800658a:	f036 060f 	bics.w	r6, r6, #15
 800658e:	d052      	beq.n	8006636 <_strtod_l+0x50e>
 8006590:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006594:	dd27      	ble.n	80065e6 <_strtod_l+0x4be>
 8006596:	f04f 0b00 	mov.w	fp, #0
 800659a:	f8cd b010 	str.w	fp, [sp, #16]
 800659e:	f8cd b020 	str.w	fp, [sp, #32]
 80065a2:	f8cd b018 	str.w	fp, [sp, #24]
 80065a6:	2322      	movs	r3, #34	; 0x22
 80065a8:	f04f 0800 	mov.w	r8, #0
 80065ac:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80066b0 <_strtod_l+0x588>
 80065b0:	f8ca 3000 	str.w	r3, [sl]
 80065b4:	9b08      	ldr	r3, [sp, #32]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f43f adf7 	beq.w	80061aa <_strtod_l+0x82>
 80065bc:	4650      	mov	r0, sl
 80065be:	991a      	ldr	r1, [sp, #104]	; 0x68
 80065c0:	f001 fe84 	bl	80082cc <_Bfree>
 80065c4:	4650      	mov	r0, sl
 80065c6:	9906      	ldr	r1, [sp, #24]
 80065c8:	f001 fe80 	bl	80082cc <_Bfree>
 80065cc:	4650      	mov	r0, sl
 80065ce:	9904      	ldr	r1, [sp, #16]
 80065d0:	f001 fe7c 	bl	80082cc <_Bfree>
 80065d4:	4650      	mov	r0, sl
 80065d6:	9908      	ldr	r1, [sp, #32]
 80065d8:	f001 fe78 	bl	80082cc <_Bfree>
 80065dc:	4659      	mov	r1, fp
 80065de:	4650      	mov	r0, sl
 80065e0:	f001 fe74 	bl	80082cc <_Bfree>
 80065e4:	e5e1      	b.n	80061aa <_strtod_l+0x82>
 80065e6:	4b35      	ldr	r3, [pc, #212]	; (80066bc <_strtod_l+0x594>)
 80065e8:	4640      	mov	r0, r8
 80065ea:	9305      	str	r3, [sp, #20]
 80065ec:	2300      	movs	r3, #0
 80065ee:	4649      	mov	r1, r9
 80065f0:	461f      	mov	r7, r3
 80065f2:	1136      	asrs	r6, r6, #4
 80065f4:	2e01      	cmp	r6, #1
 80065f6:	dc21      	bgt.n	800663c <_strtod_l+0x514>
 80065f8:	b10b      	cbz	r3, 80065fe <_strtod_l+0x4d6>
 80065fa:	4680      	mov	r8, r0
 80065fc:	4689      	mov	r9, r1
 80065fe:	4b2f      	ldr	r3, [pc, #188]	; (80066bc <_strtod_l+0x594>)
 8006600:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006604:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006608:	4642      	mov	r2, r8
 800660a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800660e:	464b      	mov	r3, r9
 8006610:	f7fc fa00 	bl	8002a14 <__aeabi_dmul>
 8006614:	4b26      	ldr	r3, [pc, #152]	; (80066b0 <_strtod_l+0x588>)
 8006616:	460a      	mov	r2, r1
 8006618:	400b      	ands	r3, r1
 800661a:	4929      	ldr	r1, [pc, #164]	; (80066c0 <_strtod_l+0x598>)
 800661c:	4680      	mov	r8, r0
 800661e:	428b      	cmp	r3, r1
 8006620:	d8b9      	bhi.n	8006596 <_strtod_l+0x46e>
 8006622:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006626:	428b      	cmp	r3, r1
 8006628:	bf86      	itte	hi
 800662a:	f04f 38ff 	movhi.w	r8, #4294967295
 800662e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80066c4 <_strtod_l+0x59c>
 8006632:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006636:	2300      	movs	r3, #0
 8006638:	9305      	str	r3, [sp, #20]
 800663a:	e07f      	b.n	800673c <_strtod_l+0x614>
 800663c:	07f2      	lsls	r2, r6, #31
 800663e:	d505      	bpl.n	800664c <_strtod_l+0x524>
 8006640:	9b05      	ldr	r3, [sp, #20]
 8006642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006646:	f7fc f9e5 	bl	8002a14 <__aeabi_dmul>
 800664a:	2301      	movs	r3, #1
 800664c:	9a05      	ldr	r2, [sp, #20]
 800664e:	3701      	adds	r7, #1
 8006650:	3208      	adds	r2, #8
 8006652:	1076      	asrs	r6, r6, #1
 8006654:	9205      	str	r2, [sp, #20]
 8006656:	e7cd      	b.n	80065f4 <_strtod_l+0x4cc>
 8006658:	d0ed      	beq.n	8006636 <_strtod_l+0x50e>
 800665a:	4276      	negs	r6, r6
 800665c:	f016 020f 	ands.w	r2, r6, #15
 8006660:	d00a      	beq.n	8006678 <_strtod_l+0x550>
 8006662:	4b15      	ldr	r3, [pc, #84]	; (80066b8 <_strtod_l+0x590>)
 8006664:	4640      	mov	r0, r8
 8006666:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800666a:	4649      	mov	r1, r9
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	f7fc fafa 	bl	8002c68 <__aeabi_ddiv>
 8006674:	4680      	mov	r8, r0
 8006676:	4689      	mov	r9, r1
 8006678:	1136      	asrs	r6, r6, #4
 800667a:	d0dc      	beq.n	8006636 <_strtod_l+0x50e>
 800667c:	2e1f      	cmp	r6, #31
 800667e:	dd23      	ble.n	80066c8 <_strtod_l+0x5a0>
 8006680:	f04f 0b00 	mov.w	fp, #0
 8006684:	f8cd b010 	str.w	fp, [sp, #16]
 8006688:	f8cd b020 	str.w	fp, [sp, #32]
 800668c:	f8cd b018 	str.w	fp, [sp, #24]
 8006690:	2322      	movs	r3, #34	; 0x22
 8006692:	f04f 0800 	mov.w	r8, #0
 8006696:	f04f 0900 	mov.w	r9, #0
 800669a:	f8ca 3000 	str.w	r3, [sl]
 800669e:	e789      	b.n	80065b4 <_strtod_l+0x48c>
 80066a0:	0801b651 	.word	0x0801b651
 80066a4:	0801b694 	.word	0x0801b694
 80066a8:	0801b649 	.word	0x0801b649
 80066ac:	0801b7d4 	.word	0x0801b7d4
 80066b0:	7ff00000 	.word	0x7ff00000
 80066b4:	0801b5f0 	.word	0x0801b5f0
 80066b8:	0801b960 	.word	0x0801b960
 80066bc:	0801b938 	.word	0x0801b938
 80066c0:	7ca00000 	.word	0x7ca00000
 80066c4:	7fefffff 	.word	0x7fefffff
 80066c8:	f016 0310 	ands.w	r3, r6, #16
 80066cc:	bf18      	it	ne
 80066ce:	236a      	movne	r3, #106	; 0x6a
 80066d0:	4640      	mov	r0, r8
 80066d2:	9305      	str	r3, [sp, #20]
 80066d4:	4649      	mov	r1, r9
 80066d6:	2300      	movs	r3, #0
 80066d8:	4fb0      	ldr	r7, [pc, #704]	; (800699c <_strtod_l+0x874>)
 80066da:	07f2      	lsls	r2, r6, #31
 80066dc:	d504      	bpl.n	80066e8 <_strtod_l+0x5c0>
 80066de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066e2:	f7fc f997 	bl	8002a14 <__aeabi_dmul>
 80066e6:	2301      	movs	r3, #1
 80066e8:	1076      	asrs	r6, r6, #1
 80066ea:	f107 0708 	add.w	r7, r7, #8
 80066ee:	d1f4      	bne.n	80066da <_strtod_l+0x5b2>
 80066f0:	b10b      	cbz	r3, 80066f6 <_strtod_l+0x5ce>
 80066f2:	4680      	mov	r8, r0
 80066f4:	4689      	mov	r9, r1
 80066f6:	9b05      	ldr	r3, [sp, #20]
 80066f8:	b1c3      	cbz	r3, 800672c <_strtod_l+0x604>
 80066fa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80066fe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006702:	2b00      	cmp	r3, #0
 8006704:	4649      	mov	r1, r9
 8006706:	dd11      	ble.n	800672c <_strtod_l+0x604>
 8006708:	2b1f      	cmp	r3, #31
 800670a:	f340 8127 	ble.w	800695c <_strtod_l+0x834>
 800670e:	2b34      	cmp	r3, #52	; 0x34
 8006710:	bfd8      	it	le
 8006712:	f04f 33ff 	movle.w	r3, #4294967295
 8006716:	f04f 0800 	mov.w	r8, #0
 800671a:	bfcf      	iteee	gt
 800671c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006720:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006724:	fa03 f202 	lslle.w	r2, r3, r2
 8006728:	ea02 0901 	andle.w	r9, r2, r1
 800672c:	2200      	movs	r2, #0
 800672e:	2300      	movs	r3, #0
 8006730:	4640      	mov	r0, r8
 8006732:	4649      	mov	r1, r9
 8006734:	f7fc fbd6 	bl	8002ee4 <__aeabi_dcmpeq>
 8006738:	2800      	cmp	r0, #0
 800673a:	d1a1      	bne.n	8006680 <_strtod_l+0x558>
 800673c:	9b06      	ldr	r3, [sp, #24]
 800673e:	465a      	mov	r2, fp
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	4650      	mov	r0, sl
 8006744:	4623      	mov	r3, r4
 8006746:	9908      	ldr	r1, [sp, #32]
 8006748:	f001 fe28 	bl	800839c <__s2b>
 800674c:	9008      	str	r0, [sp, #32]
 800674e:	2800      	cmp	r0, #0
 8006750:	f43f af21 	beq.w	8006596 <_strtod_l+0x46e>
 8006754:	9b04      	ldr	r3, [sp, #16]
 8006756:	f04f 0b00 	mov.w	fp, #0
 800675a:	1b5d      	subs	r5, r3, r5
 800675c:	9b07      	ldr	r3, [sp, #28]
 800675e:	f8cd b010 	str.w	fp, [sp, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	bfb4      	ite	lt
 8006766:	462b      	movlt	r3, r5
 8006768:	2300      	movge	r3, #0
 800676a:	930e      	str	r3, [sp, #56]	; 0x38
 800676c:	9b07      	ldr	r3, [sp, #28]
 800676e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006772:	9314      	str	r3, [sp, #80]	; 0x50
 8006774:	9b08      	ldr	r3, [sp, #32]
 8006776:	4650      	mov	r0, sl
 8006778:	6859      	ldr	r1, [r3, #4]
 800677a:	f001 fd67 	bl	800824c <_Balloc>
 800677e:	9006      	str	r0, [sp, #24]
 8006780:	2800      	cmp	r0, #0
 8006782:	f43f af10 	beq.w	80065a6 <_strtod_l+0x47e>
 8006786:	9b08      	ldr	r3, [sp, #32]
 8006788:	300c      	adds	r0, #12
 800678a:	691a      	ldr	r2, [r3, #16]
 800678c:	f103 010c 	add.w	r1, r3, #12
 8006790:	3202      	adds	r2, #2
 8006792:	0092      	lsls	r2, r2, #2
 8006794:	f001 fd4c 	bl	8008230 <memcpy>
 8006798:	ab1c      	add	r3, sp, #112	; 0x70
 800679a:	9301      	str	r3, [sp, #4]
 800679c:	ab1b      	add	r3, sp, #108	; 0x6c
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	4642      	mov	r2, r8
 80067a2:	464b      	mov	r3, r9
 80067a4:	4650      	mov	r0, sl
 80067a6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80067aa:	f002 f939 	bl	8008a20 <__d2b>
 80067ae:	901a      	str	r0, [sp, #104]	; 0x68
 80067b0:	2800      	cmp	r0, #0
 80067b2:	f43f aef8 	beq.w	80065a6 <_strtod_l+0x47e>
 80067b6:	2101      	movs	r1, #1
 80067b8:	4650      	mov	r0, sl
 80067ba:	f001 fe87 	bl	80084cc <__i2b>
 80067be:	4603      	mov	r3, r0
 80067c0:	9004      	str	r0, [sp, #16]
 80067c2:	2800      	cmp	r0, #0
 80067c4:	f43f aeef 	beq.w	80065a6 <_strtod_l+0x47e>
 80067c8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80067ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80067cc:	2d00      	cmp	r5, #0
 80067ce:	bfab      	itete	ge
 80067d0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80067d2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80067d4:	18ee      	addge	r6, r5, r3
 80067d6:	1b5c      	sublt	r4, r3, r5
 80067d8:	9b05      	ldr	r3, [sp, #20]
 80067da:	bfa8      	it	ge
 80067dc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80067de:	eba5 0503 	sub.w	r5, r5, r3
 80067e2:	4415      	add	r5, r2
 80067e4:	4b6e      	ldr	r3, [pc, #440]	; (80069a0 <_strtod_l+0x878>)
 80067e6:	f105 35ff 	add.w	r5, r5, #4294967295
 80067ea:	bfb8      	it	lt
 80067ec:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80067ee:	429d      	cmp	r5, r3
 80067f0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80067f4:	f280 80c4 	bge.w	8006980 <_strtod_l+0x858>
 80067f8:	1b5b      	subs	r3, r3, r5
 80067fa:	2b1f      	cmp	r3, #31
 80067fc:	f04f 0701 	mov.w	r7, #1
 8006800:	eba2 0203 	sub.w	r2, r2, r3
 8006804:	f300 80b1 	bgt.w	800696a <_strtod_l+0x842>
 8006808:	2500      	movs	r5, #0
 800680a:	fa07 f303 	lsl.w	r3, r7, r3
 800680e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006810:	18b7      	adds	r7, r6, r2
 8006812:	9b05      	ldr	r3, [sp, #20]
 8006814:	42be      	cmp	r6, r7
 8006816:	4414      	add	r4, r2
 8006818:	441c      	add	r4, r3
 800681a:	4633      	mov	r3, r6
 800681c:	bfa8      	it	ge
 800681e:	463b      	movge	r3, r7
 8006820:	42a3      	cmp	r3, r4
 8006822:	bfa8      	it	ge
 8006824:	4623      	movge	r3, r4
 8006826:	2b00      	cmp	r3, #0
 8006828:	bfc2      	ittt	gt
 800682a:	1aff      	subgt	r7, r7, r3
 800682c:	1ae4      	subgt	r4, r4, r3
 800682e:	1af6      	subgt	r6, r6, r3
 8006830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006832:	2b00      	cmp	r3, #0
 8006834:	dd17      	ble.n	8006866 <_strtod_l+0x73e>
 8006836:	461a      	mov	r2, r3
 8006838:	4650      	mov	r0, sl
 800683a:	9904      	ldr	r1, [sp, #16]
 800683c:	f001 ff04 	bl	8008648 <__pow5mult>
 8006840:	9004      	str	r0, [sp, #16]
 8006842:	2800      	cmp	r0, #0
 8006844:	f43f aeaf 	beq.w	80065a6 <_strtod_l+0x47e>
 8006848:	4601      	mov	r1, r0
 800684a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800684c:	4650      	mov	r0, sl
 800684e:	f001 fe53 	bl	80084f8 <__multiply>
 8006852:	9009      	str	r0, [sp, #36]	; 0x24
 8006854:	2800      	cmp	r0, #0
 8006856:	f43f aea6 	beq.w	80065a6 <_strtod_l+0x47e>
 800685a:	4650      	mov	r0, sl
 800685c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800685e:	f001 fd35 	bl	80082cc <_Bfree>
 8006862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006864:	931a      	str	r3, [sp, #104]	; 0x68
 8006866:	2f00      	cmp	r7, #0
 8006868:	f300 808e 	bgt.w	8006988 <_strtod_l+0x860>
 800686c:	9b07      	ldr	r3, [sp, #28]
 800686e:	2b00      	cmp	r3, #0
 8006870:	dd08      	ble.n	8006884 <_strtod_l+0x75c>
 8006872:	4650      	mov	r0, sl
 8006874:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006876:	9906      	ldr	r1, [sp, #24]
 8006878:	f001 fee6 	bl	8008648 <__pow5mult>
 800687c:	9006      	str	r0, [sp, #24]
 800687e:	2800      	cmp	r0, #0
 8006880:	f43f ae91 	beq.w	80065a6 <_strtod_l+0x47e>
 8006884:	2c00      	cmp	r4, #0
 8006886:	dd08      	ble.n	800689a <_strtod_l+0x772>
 8006888:	4622      	mov	r2, r4
 800688a:	4650      	mov	r0, sl
 800688c:	9906      	ldr	r1, [sp, #24]
 800688e:	f001 ff35 	bl	80086fc <__lshift>
 8006892:	9006      	str	r0, [sp, #24]
 8006894:	2800      	cmp	r0, #0
 8006896:	f43f ae86 	beq.w	80065a6 <_strtod_l+0x47e>
 800689a:	2e00      	cmp	r6, #0
 800689c:	dd08      	ble.n	80068b0 <_strtod_l+0x788>
 800689e:	4632      	mov	r2, r6
 80068a0:	4650      	mov	r0, sl
 80068a2:	9904      	ldr	r1, [sp, #16]
 80068a4:	f001 ff2a 	bl	80086fc <__lshift>
 80068a8:	9004      	str	r0, [sp, #16]
 80068aa:	2800      	cmp	r0, #0
 80068ac:	f43f ae7b 	beq.w	80065a6 <_strtod_l+0x47e>
 80068b0:	4650      	mov	r0, sl
 80068b2:	9a06      	ldr	r2, [sp, #24]
 80068b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80068b6:	f001 ffad 	bl	8008814 <__mdiff>
 80068ba:	4683      	mov	fp, r0
 80068bc:	2800      	cmp	r0, #0
 80068be:	f43f ae72 	beq.w	80065a6 <_strtod_l+0x47e>
 80068c2:	2400      	movs	r4, #0
 80068c4:	68c3      	ldr	r3, [r0, #12]
 80068c6:	9904      	ldr	r1, [sp, #16]
 80068c8:	60c4      	str	r4, [r0, #12]
 80068ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80068cc:	f001 ff86 	bl	80087dc <__mcmp>
 80068d0:	42a0      	cmp	r0, r4
 80068d2:	da6b      	bge.n	80069ac <_strtod_l+0x884>
 80068d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068d6:	ea53 0308 	orrs.w	r3, r3, r8
 80068da:	f040 8091 	bne.w	8006a00 <_strtod_l+0x8d8>
 80068de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f040 808c 	bne.w	8006a00 <_strtod_l+0x8d8>
 80068e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068ec:	0d1b      	lsrs	r3, r3, #20
 80068ee:	051b      	lsls	r3, r3, #20
 80068f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80068f4:	f240 8084 	bls.w	8006a00 <_strtod_l+0x8d8>
 80068f8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80068fc:	b91b      	cbnz	r3, 8006906 <_strtod_l+0x7de>
 80068fe:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006902:	2b01      	cmp	r3, #1
 8006904:	dd7c      	ble.n	8006a00 <_strtod_l+0x8d8>
 8006906:	4659      	mov	r1, fp
 8006908:	2201      	movs	r2, #1
 800690a:	4650      	mov	r0, sl
 800690c:	f001 fef6 	bl	80086fc <__lshift>
 8006910:	9904      	ldr	r1, [sp, #16]
 8006912:	4683      	mov	fp, r0
 8006914:	f001 ff62 	bl	80087dc <__mcmp>
 8006918:	2800      	cmp	r0, #0
 800691a:	dd71      	ble.n	8006a00 <_strtod_l+0x8d8>
 800691c:	9905      	ldr	r1, [sp, #20]
 800691e:	464b      	mov	r3, r9
 8006920:	4a20      	ldr	r2, [pc, #128]	; (80069a4 <_strtod_l+0x87c>)
 8006922:	2900      	cmp	r1, #0
 8006924:	f000 808c 	beq.w	8006a40 <_strtod_l+0x918>
 8006928:	ea02 0109 	and.w	r1, r2, r9
 800692c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006930:	f300 8086 	bgt.w	8006a40 <_strtod_l+0x918>
 8006934:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006938:	f77f aeaa 	ble.w	8006690 <_strtod_l+0x568>
 800693c:	4640      	mov	r0, r8
 800693e:	4649      	mov	r1, r9
 8006940:	4b19      	ldr	r3, [pc, #100]	; (80069a8 <_strtod_l+0x880>)
 8006942:	2200      	movs	r2, #0
 8006944:	f7fc f866 	bl	8002a14 <__aeabi_dmul>
 8006948:	460b      	mov	r3, r1
 800694a:	4303      	orrs	r3, r0
 800694c:	bf08      	it	eq
 800694e:	2322      	moveq	r3, #34	; 0x22
 8006950:	4680      	mov	r8, r0
 8006952:	4689      	mov	r9, r1
 8006954:	bf08      	it	eq
 8006956:	f8ca 3000 	streq.w	r3, [sl]
 800695a:	e62f      	b.n	80065bc <_strtod_l+0x494>
 800695c:	f04f 32ff 	mov.w	r2, #4294967295
 8006960:	fa02 f303 	lsl.w	r3, r2, r3
 8006964:	ea03 0808 	and.w	r8, r3, r8
 8006968:	e6e0      	b.n	800672c <_strtod_l+0x604>
 800696a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800696e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006972:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006976:	35e2      	adds	r5, #226	; 0xe2
 8006978:	fa07 f505 	lsl.w	r5, r7, r5
 800697c:	970f      	str	r7, [sp, #60]	; 0x3c
 800697e:	e747      	b.n	8006810 <_strtod_l+0x6e8>
 8006980:	2301      	movs	r3, #1
 8006982:	2500      	movs	r5, #0
 8006984:	930f      	str	r3, [sp, #60]	; 0x3c
 8006986:	e743      	b.n	8006810 <_strtod_l+0x6e8>
 8006988:	463a      	mov	r2, r7
 800698a:	4650      	mov	r0, sl
 800698c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800698e:	f001 feb5 	bl	80086fc <__lshift>
 8006992:	901a      	str	r0, [sp, #104]	; 0x68
 8006994:	2800      	cmp	r0, #0
 8006996:	f47f af69 	bne.w	800686c <_strtod_l+0x744>
 800699a:	e604      	b.n	80065a6 <_strtod_l+0x47e>
 800699c:	0801b6a8 	.word	0x0801b6a8
 80069a0:	fffffc02 	.word	0xfffffc02
 80069a4:	7ff00000 	.word	0x7ff00000
 80069a8:	39500000 	.word	0x39500000
 80069ac:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80069b0:	d165      	bne.n	8006a7e <_strtod_l+0x956>
 80069b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069b8:	b35a      	cbz	r2, 8006a12 <_strtod_l+0x8ea>
 80069ba:	4a99      	ldr	r2, [pc, #612]	; (8006c20 <_strtod_l+0xaf8>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d12b      	bne.n	8006a18 <_strtod_l+0x8f0>
 80069c0:	9b05      	ldr	r3, [sp, #20]
 80069c2:	4641      	mov	r1, r8
 80069c4:	b303      	cbz	r3, 8006a08 <_strtod_l+0x8e0>
 80069c6:	464a      	mov	r2, r9
 80069c8:	4b96      	ldr	r3, [pc, #600]	; (8006c24 <_strtod_l+0xafc>)
 80069ca:	4013      	ands	r3, r2
 80069cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80069d0:	f04f 32ff 	mov.w	r2, #4294967295
 80069d4:	d81b      	bhi.n	8006a0e <_strtod_l+0x8e6>
 80069d6:	0d1b      	lsrs	r3, r3, #20
 80069d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80069dc:	fa02 f303 	lsl.w	r3, r2, r3
 80069e0:	4299      	cmp	r1, r3
 80069e2:	d119      	bne.n	8006a18 <_strtod_l+0x8f0>
 80069e4:	4b90      	ldr	r3, [pc, #576]	; (8006c28 <_strtod_l+0xb00>)
 80069e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d102      	bne.n	80069f2 <_strtod_l+0x8ca>
 80069ec:	3101      	adds	r1, #1
 80069ee:	f43f adda 	beq.w	80065a6 <_strtod_l+0x47e>
 80069f2:	f04f 0800 	mov.w	r8, #0
 80069f6:	4b8b      	ldr	r3, [pc, #556]	; (8006c24 <_strtod_l+0xafc>)
 80069f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069fa:	401a      	ands	r2, r3
 80069fc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006a00:	9b05      	ldr	r3, [sp, #20]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d19a      	bne.n	800693c <_strtod_l+0x814>
 8006a06:	e5d9      	b.n	80065bc <_strtod_l+0x494>
 8006a08:	f04f 33ff 	mov.w	r3, #4294967295
 8006a0c:	e7e8      	b.n	80069e0 <_strtod_l+0x8b8>
 8006a0e:	4613      	mov	r3, r2
 8006a10:	e7e6      	b.n	80069e0 <_strtod_l+0x8b8>
 8006a12:	ea53 0308 	orrs.w	r3, r3, r8
 8006a16:	d081      	beq.n	800691c <_strtod_l+0x7f4>
 8006a18:	b1e5      	cbz	r5, 8006a54 <_strtod_l+0x92c>
 8006a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a1c:	421d      	tst	r5, r3
 8006a1e:	d0ef      	beq.n	8006a00 <_strtod_l+0x8d8>
 8006a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a22:	4640      	mov	r0, r8
 8006a24:	4649      	mov	r1, r9
 8006a26:	9a05      	ldr	r2, [sp, #20]
 8006a28:	b1c3      	cbz	r3, 8006a5c <_strtod_l+0x934>
 8006a2a:	f7ff fb5b 	bl	80060e4 <sulp>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a36:	f7fb fe37 	bl	80026a8 <__adddf3>
 8006a3a:	4680      	mov	r8, r0
 8006a3c:	4689      	mov	r9, r1
 8006a3e:	e7df      	b.n	8006a00 <_strtod_l+0x8d8>
 8006a40:	4013      	ands	r3, r2
 8006a42:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006a46:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006a4a:	f04f 38ff 	mov.w	r8, #4294967295
 8006a4e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006a52:	e7d5      	b.n	8006a00 <_strtod_l+0x8d8>
 8006a54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a56:	ea13 0f08 	tst.w	r3, r8
 8006a5a:	e7e0      	b.n	8006a1e <_strtod_l+0x8f6>
 8006a5c:	f7ff fb42 	bl	80060e4 <sulp>
 8006a60:	4602      	mov	r2, r0
 8006a62:	460b      	mov	r3, r1
 8006a64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a68:	f7fb fe1c 	bl	80026a4 <__aeabi_dsub>
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	2300      	movs	r3, #0
 8006a70:	4680      	mov	r8, r0
 8006a72:	4689      	mov	r9, r1
 8006a74:	f7fc fa36 	bl	8002ee4 <__aeabi_dcmpeq>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d0c1      	beq.n	8006a00 <_strtod_l+0x8d8>
 8006a7c:	e608      	b.n	8006690 <_strtod_l+0x568>
 8006a7e:	4658      	mov	r0, fp
 8006a80:	9904      	ldr	r1, [sp, #16]
 8006a82:	f002 f829 	bl	8008ad8 <__ratio>
 8006a86:	2200      	movs	r2, #0
 8006a88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a8c:	4606      	mov	r6, r0
 8006a8e:	460f      	mov	r7, r1
 8006a90:	f7fc fa3c 	bl	8002f0c <__aeabi_dcmple>
 8006a94:	2800      	cmp	r0, #0
 8006a96:	d070      	beq.n	8006b7a <_strtod_l+0xa52>
 8006a98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d042      	beq.n	8006b24 <_strtod_l+0x9fc>
 8006a9e:	2600      	movs	r6, #0
 8006aa0:	4f62      	ldr	r7, [pc, #392]	; (8006c2c <_strtod_l+0xb04>)
 8006aa2:	4d62      	ldr	r5, [pc, #392]	; (8006c2c <_strtod_l+0xb04>)
 8006aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006aaa:	0d1b      	lsrs	r3, r3, #20
 8006aac:	051b      	lsls	r3, r3, #20
 8006aae:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ab0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ab2:	4b5f      	ldr	r3, [pc, #380]	; (8006c30 <_strtod_l+0xb08>)
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	f040 80c3 	bne.w	8006c40 <_strtod_l+0xb18>
 8006aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006abc:	4640      	mov	r0, r8
 8006abe:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	f001 ff32 	bl	800892c <__ulp>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4630      	mov	r0, r6
 8006ace:	4639      	mov	r1, r7
 8006ad0:	f7fb ffa0 	bl	8002a14 <__aeabi_dmul>
 8006ad4:	4642      	mov	r2, r8
 8006ad6:	464b      	mov	r3, r9
 8006ad8:	f7fb fde6 	bl	80026a8 <__adddf3>
 8006adc:	460b      	mov	r3, r1
 8006ade:	4951      	ldr	r1, [pc, #324]	; (8006c24 <_strtod_l+0xafc>)
 8006ae0:	4a54      	ldr	r2, [pc, #336]	; (8006c34 <_strtod_l+0xb0c>)
 8006ae2:	4019      	ands	r1, r3
 8006ae4:	4291      	cmp	r1, r2
 8006ae6:	4680      	mov	r8, r0
 8006ae8:	d95d      	bls.n	8006ba6 <_strtod_l+0xa7e>
 8006aea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006aec:	4b4e      	ldr	r3, [pc, #312]	; (8006c28 <_strtod_l+0xb00>)
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d103      	bne.n	8006afa <_strtod_l+0x9d2>
 8006af2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006af4:	3301      	adds	r3, #1
 8006af6:	f43f ad56 	beq.w	80065a6 <_strtod_l+0x47e>
 8006afa:	f04f 38ff 	mov.w	r8, #4294967295
 8006afe:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006c28 <_strtod_l+0xb00>
 8006b02:	4650      	mov	r0, sl
 8006b04:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006b06:	f001 fbe1 	bl	80082cc <_Bfree>
 8006b0a:	4650      	mov	r0, sl
 8006b0c:	9906      	ldr	r1, [sp, #24]
 8006b0e:	f001 fbdd 	bl	80082cc <_Bfree>
 8006b12:	4650      	mov	r0, sl
 8006b14:	9904      	ldr	r1, [sp, #16]
 8006b16:	f001 fbd9 	bl	80082cc <_Bfree>
 8006b1a:	4659      	mov	r1, fp
 8006b1c:	4650      	mov	r0, sl
 8006b1e:	f001 fbd5 	bl	80082cc <_Bfree>
 8006b22:	e627      	b.n	8006774 <_strtod_l+0x64c>
 8006b24:	f1b8 0f00 	cmp.w	r8, #0
 8006b28:	d119      	bne.n	8006b5e <_strtod_l+0xa36>
 8006b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b30:	b9e3      	cbnz	r3, 8006b6c <_strtod_l+0xa44>
 8006b32:	2200      	movs	r2, #0
 8006b34:	4630      	mov	r0, r6
 8006b36:	4639      	mov	r1, r7
 8006b38:	4b3c      	ldr	r3, [pc, #240]	; (8006c2c <_strtod_l+0xb04>)
 8006b3a:	f7fc f9dd 	bl	8002ef8 <__aeabi_dcmplt>
 8006b3e:	b9c8      	cbnz	r0, 8006b74 <_strtod_l+0xa4c>
 8006b40:	2200      	movs	r2, #0
 8006b42:	4630      	mov	r0, r6
 8006b44:	4639      	mov	r1, r7
 8006b46:	4b3c      	ldr	r3, [pc, #240]	; (8006c38 <_strtod_l+0xb10>)
 8006b48:	f7fb ff64 	bl	8002a14 <__aeabi_dmul>
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	460d      	mov	r5, r1
 8006b50:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006b54:	9416      	str	r4, [sp, #88]	; 0x58
 8006b56:	9317      	str	r3, [sp, #92]	; 0x5c
 8006b58:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006b5c:	e7a2      	b.n	8006aa4 <_strtod_l+0x97c>
 8006b5e:	f1b8 0f01 	cmp.w	r8, #1
 8006b62:	d103      	bne.n	8006b6c <_strtod_l+0xa44>
 8006b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f43f ad92 	beq.w	8006690 <_strtod_l+0x568>
 8006b6c:	2600      	movs	r6, #0
 8006b6e:	2400      	movs	r4, #0
 8006b70:	4f32      	ldr	r7, [pc, #200]	; (8006c3c <_strtod_l+0xb14>)
 8006b72:	e796      	b.n	8006aa2 <_strtod_l+0x97a>
 8006b74:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006b76:	4d30      	ldr	r5, [pc, #192]	; (8006c38 <_strtod_l+0xb10>)
 8006b78:	e7ea      	b.n	8006b50 <_strtod_l+0xa28>
 8006b7a:	4b2f      	ldr	r3, [pc, #188]	; (8006c38 <_strtod_l+0xb10>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	4630      	mov	r0, r6
 8006b80:	4639      	mov	r1, r7
 8006b82:	f7fb ff47 	bl	8002a14 <__aeabi_dmul>
 8006b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b88:	4604      	mov	r4, r0
 8006b8a:	460d      	mov	r5, r1
 8006b8c:	b933      	cbnz	r3, 8006b9c <_strtod_l+0xa74>
 8006b8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b92:	9010      	str	r0, [sp, #64]	; 0x40
 8006b94:	9311      	str	r3, [sp, #68]	; 0x44
 8006b96:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006b9a:	e783      	b.n	8006aa4 <_strtod_l+0x97c>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006ba4:	e7f7      	b.n	8006b96 <_strtod_l+0xa6e>
 8006ba6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006baa:	9b05      	ldr	r3, [sp, #20]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1a8      	bne.n	8006b02 <_strtod_l+0x9da>
 8006bb0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006bb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bb6:	0d1b      	lsrs	r3, r3, #20
 8006bb8:	051b      	lsls	r3, r3, #20
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d1a1      	bne.n	8006b02 <_strtod_l+0x9da>
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	f7fc fae5 	bl	8003190 <__aeabi_d2lz>
 8006bc6:	f7fb fef7 	bl	80029b8 <__aeabi_l2d>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4620      	mov	r0, r4
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	f7fb fd67 	bl	80026a4 <__aeabi_dsub>
 8006bd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006bd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bdc:	ea43 0308 	orr.w	r3, r3, r8
 8006be0:	4313      	orrs	r3, r2
 8006be2:	4604      	mov	r4, r0
 8006be4:	460d      	mov	r5, r1
 8006be6:	d066      	beq.n	8006cb6 <_strtod_l+0xb8e>
 8006be8:	a309      	add	r3, pc, #36	; (adr r3, 8006c10 <_strtod_l+0xae8>)
 8006bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bee:	f7fc f983 	bl	8002ef8 <__aeabi_dcmplt>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	f47f ace2 	bne.w	80065bc <_strtod_l+0x494>
 8006bf8:	a307      	add	r3, pc, #28	; (adr r3, 8006c18 <_strtod_l+0xaf0>)
 8006bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfe:	4620      	mov	r0, r4
 8006c00:	4629      	mov	r1, r5
 8006c02:	f7fc f997 	bl	8002f34 <__aeabi_dcmpgt>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	f43f af7b 	beq.w	8006b02 <_strtod_l+0x9da>
 8006c0c:	e4d6      	b.n	80065bc <_strtod_l+0x494>
 8006c0e:	bf00      	nop
 8006c10:	94a03595 	.word	0x94a03595
 8006c14:	3fdfffff 	.word	0x3fdfffff
 8006c18:	35afe535 	.word	0x35afe535
 8006c1c:	3fe00000 	.word	0x3fe00000
 8006c20:	000fffff 	.word	0x000fffff
 8006c24:	7ff00000 	.word	0x7ff00000
 8006c28:	7fefffff 	.word	0x7fefffff
 8006c2c:	3ff00000 	.word	0x3ff00000
 8006c30:	7fe00000 	.word	0x7fe00000
 8006c34:	7c9fffff 	.word	0x7c9fffff
 8006c38:	3fe00000 	.word	0x3fe00000
 8006c3c:	bff00000 	.word	0xbff00000
 8006c40:	9b05      	ldr	r3, [sp, #20]
 8006c42:	b313      	cbz	r3, 8006c8a <_strtod_l+0xb62>
 8006c44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006c4a:	d81e      	bhi.n	8006c8a <_strtod_l+0xb62>
 8006c4c:	a326      	add	r3, pc, #152	; (adr r3, 8006ce8 <_strtod_l+0xbc0>)
 8006c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c52:	4620      	mov	r0, r4
 8006c54:	4629      	mov	r1, r5
 8006c56:	f7fc f959 	bl	8002f0c <__aeabi_dcmple>
 8006c5a:	b190      	cbz	r0, 8006c82 <_strtod_l+0xb5a>
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f7fc f9b0 	bl	8002fc4 <__aeabi_d2uiz>
 8006c64:	2801      	cmp	r0, #1
 8006c66:	bf38      	it	cc
 8006c68:	2001      	movcc	r0, #1
 8006c6a:	f7fb fe59 	bl	8002920 <__aeabi_ui2d>
 8006c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c70:	4604      	mov	r4, r0
 8006c72:	460d      	mov	r5, r1
 8006c74:	b9d3      	cbnz	r3, 8006cac <_strtod_l+0xb84>
 8006c76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c7a:	9012      	str	r0, [sp, #72]	; 0x48
 8006c7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c7e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006c82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c84:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006c88:	1a9f      	subs	r7, r3, r2
 8006c8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c8e:	f001 fe4d 	bl	800892c <__ulp>
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	4630      	mov	r0, r6
 8006c98:	4639      	mov	r1, r7
 8006c9a:	f7fb febb 	bl	8002a14 <__aeabi_dmul>
 8006c9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006ca2:	f7fb fd01 	bl	80026a8 <__adddf3>
 8006ca6:	4680      	mov	r8, r0
 8006ca8:	4689      	mov	r9, r1
 8006caa:	e77e      	b.n	8006baa <_strtod_l+0xa82>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006cb4:	e7e3      	b.n	8006c7e <_strtod_l+0xb56>
 8006cb6:	a30e      	add	r3, pc, #56	; (adr r3, 8006cf0 <_strtod_l+0xbc8>)
 8006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbc:	f7fc f91c 	bl	8002ef8 <__aeabi_dcmplt>
 8006cc0:	e7a1      	b.n	8006c06 <_strtod_l+0xade>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	930a      	str	r3, [sp, #40]	; 0x28
 8006cc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006cc8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006cca:	6013      	str	r3, [r2, #0]
 8006ccc:	f7ff ba71 	b.w	80061b2 <_strtod_l+0x8a>
 8006cd0:	2a65      	cmp	r2, #101	; 0x65
 8006cd2:	f43f ab63 	beq.w	800639c <_strtod_l+0x274>
 8006cd6:	2a45      	cmp	r2, #69	; 0x45
 8006cd8:	f43f ab60 	beq.w	800639c <_strtod_l+0x274>
 8006cdc:	2301      	movs	r3, #1
 8006cde:	f7ff bb95 	b.w	800640c <_strtod_l+0x2e4>
 8006ce2:	bf00      	nop
 8006ce4:	f3af 8000 	nop.w
 8006ce8:	ffc00000 	.word	0xffc00000
 8006cec:	41dfffff 	.word	0x41dfffff
 8006cf0:	94a03595 	.word	0x94a03595
 8006cf4:	3fcfffff 	.word	0x3fcfffff

08006cf8 <_strtod_r>:
 8006cf8:	4b01      	ldr	r3, [pc, #4]	; (8006d00 <_strtod_r+0x8>)
 8006cfa:	f7ff ba15 	b.w	8006128 <_strtod_l>
 8006cfe:	bf00      	nop
 8006d00:	20000074 	.word	0x20000074

08006d04 <_strtol_l.constprop.0>:
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d0a:	4680      	mov	r8, r0
 8006d0c:	d001      	beq.n	8006d12 <_strtol_l.constprop.0+0xe>
 8006d0e:	2b24      	cmp	r3, #36	; 0x24
 8006d10:	d906      	bls.n	8006d20 <_strtol_l.constprop.0+0x1c>
 8006d12:	f7fe fb23 	bl	800535c <__errno>
 8006d16:	2316      	movs	r3, #22
 8006d18:	6003      	str	r3, [r0, #0]
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d20:	460d      	mov	r5, r1
 8006d22:	4f35      	ldr	r7, [pc, #212]	; (8006df8 <_strtol_l.constprop.0+0xf4>)
 8006d24:	4628      	mov	r0, r5
 8006d26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d2a:	5de6      	ldrb	r6, [r4, r7]
 8006d2c:	f016 0608 	ands.w	r6, r6, #8
 8006d30:	d1f8      	bne.n	8006d24 <_strtol_l.constprop.0+0x20>
 8006d32:	2c2d      	cmp	r4, #45	; 0x2d
 8006d34:	d12f      	bne.n	8006d96 <_strtol_l.constprop.0+0x92>
 8006d36:	2601      	movs	r6, #1
 8006d38:	782c      	ldrb	r4, [r5, #0]
 8006d3a:	1c85      	adds	r5, r0, #2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d057      	beq.n	8006df0 <_strtol_l.constprop.0+0xec>
 8006d40:	2b10      	cmp	r3, #16
 8006d42:	d109      	bne.n	8006d58 <_strtol_l.constprop.0+0x54>
 8006d44:	2c30      	cmp	r4, #48	; 0x30
 8006d46:	d107      	bne.n	8006d58 <_strtol_l.constprop.0+0x54>
 8006d48:	7828      	ldrb	r0, [r5, #0]
 8006d4a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006d4e:	2858      	cmp	r0, #88	; 0x58
 8006d50:	d149      	bne.n	8006de6 <_strtol_l.constprop.0+0xe2>
 8006d52:	2310      	movs	r3, #16
 8006d54:	786c      	ldrb	r4, [r5, #1]
 8006d56:	3502      	adds	r5, #2
 8006d58:	2700      	movs	r7, #0
 8006d5a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006d5e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006d62:	fbbe f9f3 	udiv	r9, lr, r3
 8006d66:	4638      	mov	r0, r7
 8006d68:	fb03 ea19 	mls	sl, r3, r9, lr
 8006d6c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006d70:	f1bc 0f09 	cmp.w	ip, #9
 8006d74:	d814      	bhi.n	8006da0 <_strtol_l.constprop.0+0x9c>
 8006d76:	4664      	mov	r4, ip
 8006d78:	42a3      	cmp	r3, r4
 8006d7a:	dd22      	ble.n	8006dc2 <_strtol_l.constprop.0+0xbe>
 8006d7c:	2f00      	cmp	r7, #0
 8006d7e:	db1d      	blt.n	8006dbc <_strtol_l.constprop.0+0xb8>
 8006d80:	4581      	cmp	r9, r0
 8006d82:	d31b      	bcc.n	8006dbc <_strtol_l.constprop.0+0xb8>
 8006d84:	d101      	bne.n	8006d8a <_strtol_l.constprop.0+0x86>
 8006d86:	45a2      	cmp	sl, r4
 8006d88:	db18      	blt.n	8006dbc <_strtol_l.constprop.0+0xb8>
 8006d8a:	2701      	movs	r7, #1
 8006d8c:	fb00 4003 	mla	r0, r0, r3, r4
 8006d90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d94:	e7ea      	b.n	8006d6c <_strtol_l.constprop.0+0x68>
 8006d96:	2c2b      	cmp	r4, #43	; 0x2b
 8006d98:	bf04      	itt	eq
 8006d9a:	782c      	ldrbeq	r4, [r5, #0]
 8006d9c:	1c85      	addeq	r5, r0, #2
 8006d9e:	e7cd      	b.n	8006d3c <_strtol_l.constprop.0+0x38>
 8006da0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006da4:	f1bc 0f19 	cmp.w	ip, #25
 8006da8:	d801      	bhi.n	8006dae <_strtol_l.constprop.0+0xaa>
 8006daa:	3c37      	subs	r4, #55	; 0x37
 8006dac:	e7e4      	b.n	8006d78 <_strtol_l.constprop.0+0x74>
 8006dae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006db2:	f1bc 0f19 	cmp.w	ip, #25
 8006db6:	d804      	bhi.n	8006dc2 <_strtol_l.constprop.0+0xbe>
 8006db8:	3c57      	subs	r4, #87	; 0x57
 8006dba:	e7dd      	b.n	8006d78 <_strtol_l.constprop.0+0x74>
 8006dbc:	f04f 37ff 	mov.w	r7, #4294967295
 8006dc0:	e7e6      	b.n	8006d90 <_strtol_l.constprop.0+0x8c>
 8006dc2:	2f00      	cmp	r7, #0
 8006dc4:	da07      	bge.n	8006dd6 <_strtol_l.constprop.0+0xd2>
 8006dc6:	2322      	movs	r3, #34	; 0x22
 8006dc8:	4670      	mov	r0, lr
 8006dca:	f8c8 3000 	str.w	r3, [r8]
 8006dce:	2a00      	cmp	r2, #0
 8006dd0:	d0a4      	beq.n	8006d1c <_strtol_l.constprop.0+0x18>
 8006dd2:	1e69      	subs	r1, r5, #1
 8006dd4:	e005      	b.n	8006de2 <_strtol_l.constprop.0+0xde>
 8006dd6:	b106      	cbz	r6, 8006dda <_strtol_l.constprop.0+0xd6>
 8006dd8:	4240      	negs	r0, r0
 8006dda:	2a00      	cmp	r2, #0
 8006ddc:	d09e      	beq.n	8006d1c <_strtol_l.constprop.0+0x18>
 8006dde:	2f00      	cmp	r7, #0
 8006de0:	d1f7      	bne.n	8006dd2 <_strtol_l.constprop.0+0xce>
 8006de2:	6011      	str	r1, [r2, #0]
 8006de4:	e79a      	b.n	8006d1c <_strtol_l.constprop.0+0x18>
 8006de6:	2430      	movs	r4, #48	; 0x30
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1b5      	bne.n	8006d58 <_strtol_l.constprop.0+0x54>
 8006dec:	2308      	movs	r3, #8
 8006dee:	e7b3      	b.n	8006d58 <_strtol_l.constprop.0+0x54>
 8006df0:	2c30      	cmp	r4, #48	; 0x30
 8006df2:	d0a9      	beq.n	8006d48 <_strtol_l.constprop.0+0x44>
 8006df4:	230a      	movs	r3, #10
 8006df6:	e7af      	b.n	8006d58 <_strtol_l.constprop.0+0x54>
 8006df8:	0801b6d1 	.word	0x0801b6d1

08006dfc <_strtol_r>:
 8006dfc:	f7ff bf82 	b.w	8006d04 <_strtol_l.constprop.0>

08006e00 <strtol>:
 8006e00:	4613      	mov	r3, r2
 8006e02:	460a      	mov	r2, r1
 8006e04:	4601      	mov	r1, r0
 8006e06:	4802      	ldr	r0, [pc, #8]	; (8006e10 <strtol+0x10>)
 8006e08:	6800      	ldr	r0, [r0, #0]
 8006e0a:	f7ff bf7b 	b.w	8006d04 <_strtol_l.constprop.0>
 8006e0e:	bf00      	nop
 8006e10:	2000000c 	.word	0x2000000c

08006e14 <quorem>:
 8006e14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e18:	6903      	ldr	r3, [r0, #16]
 8006e1a:	690c      	ldr	r4, [r1, #16]
 8006e1c:	4607      	mov	r7, r0
 8006e1e:	42a3      	cmp	r3, r4
 8006e20:	f2c0 8082 	blt.w	8006f28 <quorem+0x114>
 8006e24:	3c01      	subs	r4, #1
 8006e26:	f100 0514 	add.w	r5, r0, #20
 8006e2a:	f101 0814 	add.w	r8, r1, #20
 8006e2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e32:	9301      	str	r3, [sp, #4]
 8006e34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006e48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e4c:	d331      	bcc.n	8006eb2 <quorem+0x9e>
 8006e4e:	f04f 0e00 	mov.w	lr, #0
 8006e52:	4640      	mov	r0, r8
 8006e54:	46ac      	mov	ip, r5
 8006e56:	46f2      	mov	sl, lr
 8006e58:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e5c:	b293      	uxth	r3, r2
 8006e5e:	fb06 e303 	mla	r3, r6, r3, lr
 8006e62:	0c12      	lsrs	r2, r2, #16
 8006e64:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	fb06 e202 	mla	r2, r6, r2, lr
 8006e6e:	ebaa 0303 	sub.w	r3, sl, r3
 8006e72:	f8dc a000 	ldr.w	sl, [ip]
 8006e76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006e7a:	fa1f fa8a 	uxth.w	sl, sl
 8006e7e:	4453      	add	r3, sl
 8006e80:	f8dc a000 	ldr.w	sl, [ip]
 8006e84:	b292      	uxth	r2, r2
 8006e86:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006e8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e94:	4581      	cmp	r9, r0
 8006e96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006e9a:	f84c 3b04 	str.w	r3, [ip], #4
 8006e9e:	d2db      	bcs.n	8006e58 <quorem+0x44>
 8006ea0:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ea4:	b92b      	cbnz	r3, 8006eb2 <quorem+0x9e>
 8006ea6:	9b01      	ldr	r3, [sp, #4]
 8006ea8:	3b04      	subs	r3, #4
 8006eaa:	429d      	cmp	r5, r3
 8006eac:	461a      	mov	r2, r3
 8006eae:	d32f      	bcc.n	8006f10 <quorem+0xfc>
 8006eb0:	613c      	str	r4, [r7, #16]
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	f001 fc92 	bl	80087dc <__mcmp>
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	db25      	blt.n	8006f08 <quorem+0xf4>
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	f04f 0c00 	mov.w	ip, #0
 8006ec2:	3601      	adds	r6, #1
 8006ec4:	f858 1b04 	ldr.w	r1, [r8], #4
 8006ec8:	f8d0 e000 	ldr.w	lr, [r0]
 8006ecc:	b28b      	uxth	r3, r1
 8006ece:	ebac 0303 	sub.w	r3, ip, r3
 8006ed2:	fa1f f28e 	uxth.w	r2, lr
 8006ed6:	4413      	add	r3, r2
 8006ed8:	0c0a      	lsrs	r2, r1, #16
 8006eda:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ede:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ee8:	45c1      	cmp	r9, r8
 8006eea:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006eee:	f840 3b04 	str.w	r3, [r0], #4
 8006ef2:	d2e7      	bcs.n	8006ec4 <quorem+0xb0>
 8006ef4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ef8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006efc:	b922      	cbnz	r2, 8006f08 <quorem+0xf4>
 8006efe:	3b04      	subs	r3, #4
 8006f00:	429d      	cmp	r5, r3
 8006f02:	461a      	mov	r2, r3
 8006f04:	d30a      	bcc.n	8006f1c <quorem+0x108>
 8006f06:	613c      	str	r4, [r7, #16]
 8006f08:	4630      	mov	r0, r6
 8006f0a:	b003      	add	sp, #12
 8006f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f10:	6812      	ldr	r2, [r2, #0]
 8006f12:	3b04      	subs	r3, #4
 8006f14:	2a00      	cmp	r2, #0
 8006f16:	d1cb      	bne.n	8006eb0 <quorem+0x9c>
 8006f18:	3c01      	subs	r4, #1
 8006f1a:	e7c6      	b.n	8006eaa <quorem+0x96>
 8006f1c:	6812      	ldr	r2, [r2, #0]
 8006f1e:	3b04      	subs	r3, #4
 8006f20:	2a00      	cmp	r2, #0
 8006f22:	d1f0      	bne.n	8006f06 <quorem+0xf2>
 8006f24:	3c01      	subs	r4, #1
 8006f26:	e7eb      	b.n	8006f00 <quorem+0xec>
 8006f28:	2000      	movs	r0, #0
 8006f2a:	e7ee      	b.n	8006f0a <quorem+0xf6>
 8006f2c:	0000      	movs	r0, r0
	...

08006f30 <_dtoa_r>:
 8006f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f34:	4616      	mov	r6, r2
 8006f36:	461f      	mov	r7, r3
 8006f38:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006f3a:	b099      	sub	sp, #100	; 0x64
 8006f3c:	4605      	mov	r5, r0
 8006f3e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006f42:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006f46:	b974      	cbnz	r4, 8006f66 <_dtoa_r+0x36>
 8006f48:	2010      	movs	r0, #16
 8006f4a:	f001 f949 	bl	80081e0 <malloc>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	6268      	str	r0, [r5, #36]	; 0x24
 8006f52:	b920      	cbnz	r0, 8006f5e <_dtoa_r+0x2e>
 8006f54:	21ea      	movs	r1, #234	; 0xea
 8006f56:	4ba8      	ldr	r3, [pc, #672]	; (80071f8 <_dtoa_r+0x2c8>)
 8006f58:	48a8      	ldr	r0, [pc, #672]	; (80071fc <_dtoa_r+0x2cc>)
 8006f5a:	f002 f8b3 	bl	80090c4 <__assert_func>
 8006f5e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f62:	6004      	str	r4, [r0, #0]
 8006f64:	60c4      	str	r4, [r0, #12]
 8006f66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f68:	6819      	ldr	r1, [r3, #0]
 8006f6a:	b151      	cbz	r1, 8006f82 <_dtoa_r+0x52>
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	2301      	movs	r3, #1
 8006f70:	4093      	lsls	r3, r2
 8006f72:	604a      	str	r2, [r1, #4]
 8006f74:	608b      	str	r3, [r1, #8]
 8006f76:	4628      	mov	r0, r5
 8006f78:	f001 f9a8 	bl	80082cc <_Bfree>
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	1e3b      	subs	r3, r7, #0
 8006f84:	bfaf      	iteee	ge
 8006f86:	2300      	movge	r3, #0
 8006f88:	2201      	movlt	r2, #1
 8006f8a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006f8e:	9305      	strlt	r3, [sp, #20]
 8006f90:	bfa8      	it	ge
 8006f92:	f8c8 3000 	strge.w	r3, [r8]
 8006f96:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006f9a:	4b99      	ldr	r3, [pc, #612]	; (8007200 <_dtoa_r+0x2d0>)
 8006f9c:	bfb8      	it	lt
 8006f9e:	f8c8 2000 	strlt.w	r2, [r8]
 8006fa2:	ea33 0309 	bics.w	r3, r3, r9
 8006fa6:	d119      	bne.n	8006fdc <_dtoa_r+0xac>
 8006fa8:	f242 730f 	movw	r3, #9999	; 0x270f
 8006fac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006fae:	6013      	str	r3, [r2, #0]
 8006fb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006fb4:	4333      	orrs	r3, r6
 8006fb6:	f000 857f 	beq.w	8007ab8 <_dtoa_r+0xb88>
 8006fba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006fbc:	b953      	cbnz	r3, 8006fd4 <_dtoa_r+0xa4>
 8006fbe:	4b91      	ldr	r3, [pc, #580]	; (8007204 <_dtoa_r+0x2d4>)
 8006fc0:	e022      	b.n	8007008 <_dtoa_r+0xd8>
 8006fc2:	4b91      	ldr	r3, [pc, #580]	; (8007208 <_dtoa_r+0x2d8>)
 8006fc4:	9303      	str	r3, [sp, #12]
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006fca:	6013      	str	r3, [r2, #0]
 8006fcc:	9803      	ldr	r0, [sp, #12]
 8006fce:	b019      	add	sp, #100	; 0x64
 8006fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd4:	4b8b      	ldr	r3, [pc, #556]	; (8007204 <_dtoa_r+0x2d4>)
 8006fd6:	9303      	str	r3, [sp, #12]
 8006fd8:	3303      	adds	r3, #3
 8006fda:	e7f5      	b.n	8006fc8 <_dtoa_r+0x98>
 8006fdc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006fe0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006fe4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2300      	movs	r3, #0
 8006fec:	f7fb ff7a 	bl	8002ee4 <__aeabi_dcmpeq>
 8006ff0:	4680      	mov	r8, r0
 8006ff2:	b158      	cbz	r0, 800700c <_dtoa_r+0xdc>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006ff8:	6013      	str	r3, [r2, #0]
 8006ffa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 8558 	beq.w	8007ab2 <_dtoa_r+0xb82>
 8007002:	4882      	ldr	r0, [pc, #520]	; (800720c <_dtoa_r+0x2dc>)
 8007004:	6018      	str	r0, [r3, #0]
 8007006:	1e43      	subs	r3, r0, #1
 8007008:	9303      	str	r3, [sp, #12]
 800700a:	e7df      	b.n	8006fcc <_dtoa_r+0x9c>
 800700c:	ab16      	add	r3, sp, #88	; 0x58
 800700e:	9301      	str	r3, [sp, #4]
 8007010:	ab17      	add	r3, sp, #92	; 0x5c
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	4628      	mov	r0, r5
 8007016:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800701a:	f001 fd01 	bl	8008a20 <__d2b>
 800701e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007022:	4683      	mov	fp, r0
 8007024:	2c00      	cmp	r4, #0
 8007026:	d07f      	beq.n	8007128 <_dtoa_r+0x1f8>
 8007028:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800702c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800702e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007032:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007036:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800703a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800703e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007042:	2200      	movs	r2, #0
 8007044:	4b72      	ldr	r3, [pc, #456]	; (8007210 <_dtoa_r+0x2e0>)
 8007046:	f7fb fb2d 	bl	80026a4 <__aeabi_dsub>
 800704a:	a365      	add	r3, pc, #404	; (adr r3, 80071e0 <_dtoa_r+0x2b0>)
 800704c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007050:	f7fb fce0 	bl	8002a14 <__aeabi_dmul>
 8007054:	a364      	add	r3, pc, #400	; (adr r3, 80071e8 <_dtoa_r+0x2b8>)
 8007056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705a:	f7fb fb25 	bl	80026a8 <__adddf3>
 800705e:	4606      	mov	r6, r0
 8007060:	4620      	mov	r0, r4
 8007062:	460f      	mov	r7, r1
 8007064:	f7fb fc6c 	bl	8002940 <__aeabi_i2d>
 8007068:	a361      	add	r3, pc, #388	; (adr r3, 80071f0 <_dtoa_r+0x2c0>)
 800706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706e:	f7fb fcd1 	bl	8002a14 <__aeabi_dmul>
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	4630      	mov	r0, r6
 8007078:	4639      	mov	r1, r7
 800707a:	f7fb fb15 	bl	80026a8 <__adddf3>
 800707e:	4606      	mov	r6, r0
 8007080:	460f      	mov	r7, r1
 8007082:	f7fb ff77 	bl	8002f74 <__aeabi_d2iz>
 8007086:	2200      	movs	r2, #0
 8007088:	4682      	mov	sl, r0
 800708a:	2300      	movs	r3, #0
 800708c:	4630      	mov	r0, r6
 800708e:	4639      	mov	r1, r7
 8007090:	f7fb ff32 	bl	8002ef8 <__aeabi_dcmplt>
 8007094:	b148      	cbz	r0, 80070aa <_dtoa_r+0x17a>
 8007096:	4650      	mov	r0, sl
 8007098:	f7fb fc52 	bl	8002940 <__aeabi_i2d>
 800709c:	4632      	mov	r2, r6
 800709e:	463b      	mov	r3, r7
 80070a0:	f7fb ff20 	bl	8002ee4 <__aeabi_dcmpeq>
 80070a4:	b908      	cbnz	r0, 80070aa <_dtoa_r+0x17a>
 80070a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070aa:	f1ba 0f16 	cmp.w	sl, #22
 80070ae:	d858      	bhi.n	8007162 <_dtoa_r+0x232>
 80070b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070b4:	4b57      	ldr	r3, [pc, #348]	; (8007214 <_dtoa_r+0x2e4>)
 80070b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80070ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070be:	f7fb ff1b 	bl	8002ef8 <__aeabi_dcmplt>
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d04f      	beq.n	8007166 <_dtoa_r+0x236>
 80070c6:	2300      	movs	r3, #0
 80070c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80070ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80070d0:	1b1c      	subs	r4, r3, r4
 80070d2:	1e63      	subs	r3, r4, #1
 80070d4:	9309      	str	r3, [sp, #36]	; 0x24
 80070d6:	bf49      	itett	mi
 80070d8:	f1c4 0301 	rsbmi	r3, r4, #1
 80070dc:	2300      	movpl	r3, #0
 80070de:	9306      	strmi	r3, [sp, #24]
 80070e0:	2300      	movmi	r3, #0
 80070e2:	bf54      	ite	pl
 80070e4:	9306      	strpl	r3, [sp, #24]
 80070e6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80070e8:	f1ba 0f00 	cmp.w	sl, #0
 80070ec:	db3d      	blt.n	800716a <_dtoa_r+0x23a>
 80070ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070f0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80070f4:	4453      	add	r3, sl
 80070f6:	9309      	str	r3, [sp, #36]	; 0x24
 80070f8:	2300      	movs	r3, #0
 80070fa:	930a      	str	r3, [sp, #40]	; 0x28
 80070fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070fe:	2b09      	cmp	r3, #9
 8007100:	f200 808c 	bhi.w	800721c <_dtoa_r+0x2ec>
 8007104:	2b05      	cmp	r3, #5
 8007106:	bfc4      	itt	gt
 8007108:	3b04      	subgt	r3, #4
 800710a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800710c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800710e:	bfc8      	it	gt
 8007110:	2400      	movgt	r4, #0
 8007112:	f1a3 0302 	sub.w	r3, r3, #2
 8007116:	bfd8      	it	le
 8007118:	2401      	movle	r4, #1
 800711a:	2b03      	cmp	r3, #3
 800711c:	f200 808a 	bhi.w	8007234 <_dtoa_r+0x304>
 8007120:	e8df f003 	tbb	[pc, r3]
 8007124:	5b4d4f2d 	.word	0x5b4d4f2d
 8007128:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800712c:	441c      	add	r4, r3
 800712e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007132:	2b20      	cmp	r3, #32
 8007134:	bfc3      	ittte	gt
 8007136:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800713a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800713e:	fa09 f303 	lslgt.w	r3, r9, r3
 8007142:	f1c3 0320 	rsble	r3, r3, #32
 8007146:	bfc6      	itte	gt
 8007148:	fa26 f000 	lsrgt.w	r0, r6, r0
 800714c:	4318      	orrgt	r0, r3
 800714e:	fa06 f003 	lslle.w	r0, r6, r3
 8007152:	f7fb fbe5 	bl	8002920 <__aeabi_ui2d>
 8007156:	2301      	movs	r3, #1
 8007158:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800715c:	3c01      	subs	r4, #1
 800715e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007160:	e76f      	b.n	8007042 <_dtoa_r+0x112>
 8007162:	2301      	movs	r3, #1
 8007164:	e7b2      	b.n	80070cc <_dtoa_r+0x19c>
 8007166:	900f      	str	r0, [sp, #60]	; 0x3c
 8007168:	e7b1      	b.n	80070ce <_dtoa_r+0x19e>
 800716a:	9b06      	ldr	r3, [sp, #24]
 800716c:	eba3 030a 	sub.w	r3, r3, sl
 8007170:	9306      	str	r3, [sp, #24]
 8007172:	f1ca 0300 	rsb	r3, sl, #0
 8007176:	930a      	str	r3, [sp, #40]	; 0x28
 8007178:	2300      	movs	r3, #0
 800717a:	930e      	str	r3, [sp, #56]	; 0x38
 800717c:	e7be      	b.n	80070fc <_dtoa_r+0x1cc>
 800717e:	2300      	movs	r3, #0
 8007180:	930b      	str	r3, [sp, #44]	; 0x2c
 8007182:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007184:	2b00      	cmp	r3, #0
 8007186:	dc58      	bgt.n	800723a <_dtoa_r+0x30a>
 8007188:	f04f 0901 	mov.w	r9, #1
 800718c:	464b      	mov	r3, r9
 800718e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007192:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007196:	2200      	movs	r2, #0
 8007198:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800719a:	6042      	str	r2, [r0, #4]
 800719c:	2204      	movs	r2, #4
 800719e:	f102 0614 	add.w	r6, r2, #20
 80071a2:	429e      	cmp	r6, r3
 80071a4:	6841      	ldr	r1, [r0, #4]
 80071a6:	d94e      	bls.n	8007246 <_dtoa_r+0x316>
 80071a8:	4628      	mov	r0, r5
 80071aa:	f001 f84f 	bl	800824c <_Balloc>
 80071ae:	9003      	str	r0, [sp, #12]
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d14c      	bne.n	800724e <_dtoa_r+0x31e>
 80071b4:	4602      	mov	r2, r0
 80071b6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80071ba:	4b17      	ldr	r3, [pc, #92]	; (8007218 <_dtoa_r+0x2e8>)
 80071bc:	e6cc      	b.n	8006f58 <_dtoa_r+0x28>
 80071be:	2301      	movs	r3, #1
 80071c0:	e7de      	b.n	8007180 <_dtoa_r+0x250>
 80071c2:	2300      	movs	r3, #0
 80071c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80071c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071c8:	eb0a 0903 	add.w	r9, sl, r3
 80071cc:	f109 0301 	add.w	r3, r9, #1
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	9308      	str	r3, [sp, #32]
 80071d4:	bfb8      	it	lt
 80071d6:	2301      	movlt	r3, #1
 80071d8:	e7dd      	b.n	8007196 <_dtoa_r+0x266>
 80071da:	2301      	movs	r3, #1
 80071dc:	e7f2      	b.n	80071c4 <_dtoa_r+0x294>
 80071de:	bf00      	nop
 80071e0:	636f4361 	.word	0x636f4361
 80071e4:	3fd287a7 	.word	0x3fd287a7
 80071e8:	8b60c8b3 	.word	0x8b60c8b3
 80071ec:	3fc68a28 	.word	0x3fc68a28
 80071f0:	509f79fb 	.word	0x509f79fb
 80071f4:	3fd34413 	.word	0x3fd34413
 80071f8:	0801b7de 	.word	0x0801b7de
 80071fc:	0801b7f5 	.word	0x0801b7f5
 8007200:	7ff00000 	.word	0x7ff00000
 8007204:	0801b7da 	.word	0x0801b7da
 8007208:	0801b7d1 	.word	0x0801b7d1
 800720c:	0801b655 	.word	0x0801b655
 8007210:	3ff80000 	.word	0x3ff80000
 8007214:	0801b960 	.word	0x0801b960
 8007218:	0801b850 	.word	0x0801b850
 800721c:	2401      	movs	r4, #1
 800721e:	2300      	movs	r3, #0
 8007220:	940b      	str	r4, [sp, #44]	; 0x2c
 8007222:	9322      	str	r3, [sp, #136]	; 0x88
 8007224:	f04f 39ff 	mov.w	r9, #4294967295
 8007228:	2200      	movs	r2, #0
 800722a:	2312      	movs	r3, #18
 800722c:	f8cd 9020 	str.w	r9, [sp, #32]
 8007230:	9223      	str	r2, [sp, #140]	; 0x8c
 8007232:	e7b0      	b.n	8007196 <_dtoa_r+0x266>
 8007234:	2301      	movs	r3, #1
 8007236:	930b      	str	r3, [sp, #44]	; 0x2c
 8007238:	e7f4      	b.n	8007224 <_dtoa_r+0x2f4>
 800723a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800723e:	464b      	mov	r3, r9
 8007240:	f8cd 9020 	str.w	r9, [sp, #32]
 8007244:	e7a7      	b.n	8007196 <_dtoa_r+0x266>
 8007246:	3101      	adds	r1, #1
 8007248:	6041      	str	r1, [r0, #4]
 800724a:	0052      	lsls	r2, r2, #1
 800724c:	e7a7      	b.n	800719e <_dtoa_r+0x26e>
 800724e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007250:	9a03      	ldr	r2, [sp, #12]
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	9b08      	ldr	r3, [sp, #32]
 8007256:	2b0e      	cmp	r3, #14
 8007258:	f200 80a8 	bhi.w	80073ac <_dtoa_r+0x47c>
 800725c:	2c00      	cmp	r4, #0
 800725e:	f000 80a5 	beq.w	80073ac <_dtoa_r+0x47c>
 8007262:	f1ba 0f00 	cmp.w	sl, #0
 8007266:	dd34      	ble.n	80072d2 <_dtoa_r+0x3a2>
 8007268:	4a9a      	ldr	r2, [pc, #616]	; (80074d4 <_dtoa_r+0x5a4>)
 800726a:	f00a 030f 	and.w	r3, sl, #15
 800726e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007272:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007276:	e9d3 3400 	ldrd	r3, r4, [r3]
 800727a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800727e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007282:	d016      	beq.n	80072b2 <_dtoa_r+0x382>
 8007284:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007288:	4b93      	ldr	r3, [pc, #588]	; (80074d8 <_dtoa_r+0x5a8>)
 800728a:	2703      	movs	r7, #3
 800728c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007290:	f7fb fcea 	bl	8002c68 <__aeabi_ddiv>
 8007294:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007298:	f004 040f 	and.w	r4, r4, #15
 800729c:	4e8e      	ldr	r6, [pc, #568]	; (80074d8 <_dtoa_r+0x5a8>)
 800729e:	b954      	cbnz	r4, 80072b6 <_dtoa_r+0x386>
 80072a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80072a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072a8:	f7fb fcde 	bl	8002c68 <__aeabi_ddiv>
 80072ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072b0:	e029      	b.n	8007306 <_dtoa_r+0x3d6>
 80072b2:	2702      	movs	r7, #2
 80072b4:	e7f2      	b.n	800729c <_dtoa_r+0x36c>
 80072b6:	07e1      	lsls	r1, r4, #31
 80072b8:	d508      	bpl.n	80072cc <_dtoa_r+0x39c>
 80072ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80072be:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072c2:	f7fb fba7 	bl	8002a14 <__aeabi_dmul>
 80072c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80072ca:	3701      	adds	r7, #1
 80072cc:	1064      	asrs	r4, r4, #1
 80072ce:	3608      	adds	r6, #8
 80072d0:	e7e5      	b.n	800729e <_dtoa_r+0x36e>
 80072d2:	f000 80a5 	beq.w	8007420 <_dtoa_r+0x4f0>
 80072d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072da:	f1ca 0400 	rsb	r4, sl, #0
 80072de:	4b7d      	ldr	r3, [pc, #500]	; (80074d4 <_dtoa_r+0x5a4>)
 80072e0:	f004 020f 	and.w	r2, r4, #15
 80072e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ec:	f7fb fb92 	bl	8002a14 <__aeabi_dmul>
 80072f0:	2702      	movs	r7, #2
 80072f2:	2300      	movs	r3, #0
 80072f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072f8:	4e77      	ldr	r6, [pc, #476]	; (80074d8 <_dtoa_r+0x5a8>)
 80072fa:	1124      	asrs	r4, r4, #4
 80072fc:	2c00      	cmp	r4, #0
 80072fe:	f040 8084 	bne.w	800740a <_dtoa_r+0x4da>
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1d2      	bne.n	80072ac <_dtoa_r+0x37c>
 8007306:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 808b 	beq.w	8007424 <_dtoa_r+0x4f4>
 800730e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007312:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007316:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800731a:	2200      	movs	r2, #0
 800731c:	4b6f      	ldr	r3, [pc, #444]	; (80074dc <_dtoa_r+0x5ac>)
 800731e:	f7fb fdeb 	bl	8002ef8 <__aeabi_dcmplt>
 8007322:	2800      	cmp	r0, #0
 8007324:	d07e      	beq.n	8007424 <_dtoa_r+0x4f4>
 8007326:	9b08      	ldr	r3, [sp, #32]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d07b      	beq.n	8007424 <_dtoa_r+0x4f4>
 800732c:	f1b9 0f00 	cmp.w	r9, #0
 8007330:	dd38      	ble.n	80073a4 <_dtoa_r+0x474>
 8007332:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007336:	2200      	movs	r2, #0
 8007338:	4b69      	ldr	r3, [pc, #420]	; (80074e0 <_dtoa_r+0x5b0>)
 800733a:	f7fb fb6b 	bl	8002a14 <__aeabi_dmul>
 800733e:	464c      	mov	r4, r9
 8007340:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007344:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007348:	3701      	adds	r7, #1
 800734a:	4638      	mov	r0, r7
 800734c:	f7fb faf8 	bl	8002940 <__aeabi_i2d>
 8007350:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007354:	f7fb fb5e 	bl	8002a14 <__aeabi_dmul>
 8007358:	2200      	movs	r2, #0
 800735a:	4b62      	ldr	r3, [pc, #392]	; (80074e4 <_dtoa_r+0x5b4>)
 800735c:	f7fb f9a4 	bl	80026a8 <__adddf3>
 8007360:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007364:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007368:	9611      	str	r6, [sp, #68]	; 0x44
 800736a:	2c00      	cmp	r4, #0
 800736c:	d15d      	bne.n	800742a <_dtoa_r+0x4fa>
 800736e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007372:	2200      	movs	r2, #0
 8007374:	4b5c      	ldr	r3, [pc, #368]	; (80074e8 <_dtoa_r+0x5b8>)
 8007376:	f7fb f995 	bl	80026a4 <__aeabi_dsub>
 800737a:	4602      	mov	r2, r0
 800737c:	460b      	mov	r3, r1
 800737e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007382:	4633      	mov	r3, r6
 8007384:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007386:	f7fb fdd5 	bl	8002f34 <__aeabi_dcmpgt>
 800738a:	2800      	cmp	r0, #0
 800738c:	f040 829c 	bne.w	80078c8 <_dtoa_r+0x998>
 8007390:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007394:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007396:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800739a:	f7fb fdad 	bl	8002ef8 <__aeabi_dcmplt>
 800739e:	2800      	cmp	r0, #0
 80073a0:	f040 8290 	bne.w	80078c4 <_dtoa_r+0x994>
 80073a4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80073a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80073ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f2c0 8152 	blt.w	8007658 <_dtoa_r+0x728>
 80073b4:	f1ba 0f0e 	cmp.w	sl, #14
 80073b8:	f300 814e 	bgt.w	8007658 <_dtoa_r+0x728>
 80073bc:	4b45      	ldr	r3, [pc, #276]	; (80074d4 <_dtoa_r+0x5a4>)
 80073be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80073c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073c6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80073ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f280 80db 	bge.w	8007588 <_dtoa_r+0x658>
 80073d2:	9b08      	ldr	r3, [sp, #32]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f300 80d7 	bgt.w	8007588 <_dtoa_r+0x658>
 80073da:	f040 8272 	bne.w	80078c2 <_dtoa_r+0x992>
 80073de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073e2:	2200      	movs	r2, #0
 80073e4:	4b40      	ldr	r3, [pc, #256]	; (80074e8 <_dtoa_r+0x5b8>)
 80073e6:	f7fb fb15 	bl	8002a14 <__aeabi_dmul>
 80073ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073ee:	f7fb fd97 	bl	8002f20 <__aeabi_dcmpge>
 80073f2:	9c08      	ldr	r4, [sp, #32]
 80073f4:	4626      	mov	r6, r4
 80073f6:	2800      	cmp	r0, #0
 80073f8:	f040 8248 	bne.w	800788c <_dtoa_r+0x95c>
 80073fc:	2331      	movs	r3, #49	; 0x31
 80073fe:	9f03      	ldr	r7, [sp, #12]
 8007400:	f10a 0a01 	add.w	sl, sl, #1
 8007404:	f807 3b01 	strb.w	r3, [r7], #1
 8007408:	e244      	b.n	8007894 <_dtoa_r+0x964>
 800740a:	07e2      	lsls	r2, r4, #31
 800740c:	d505      	bpl.n	800741a <_dtoa_r+0x4ea>
 800740e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007412:	f7fb faff 	bl	8002a14 <__aeabi_dmul>
 8007416:	2301      	movs	r3, #1
 8007418:	3701      	adds	r7, #1
 800741a:	1064      	asrs	r4, r4, #1
 800741c:	3608      	adds	r6, #8
 800741e:	e76d      	b.n	80072fc <_dtoa_r+0x3cc>
 8007420:	2702      	movs	r7, #2
 8007422:	e770      	b.n	8007306 <_dtoa_r+0x3d6>
 8007424:	46d0      	mov	r8, sl
 8007426:	9c08      	ldr	r4, [sp, #32]
 8007428:	e78f      	b.n	800734a <_dtoa_r+0x41a>
 800742a:	9903      	ldr	r1, [sp, #12]
 800742c:	4b29      	ldr	r3, [pc, #164]	; (80074d4 <_dtoa_r+0x5a4>)
 800742e:	4421      	add	r1, r4
 8007430:	9112      	str	r1, [sp, #72]	; 0x48
 8007432:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007434:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007438:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800743c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007440:	2900      	cmp	r1, #0
 8007442:	d055      	beq.n	80074f0 <_dtoa_r+0x5c0>
 8007444:	2000      	movs	r0, #0
 8007446:	4929      	ldr	r1, [pc, #164]	; (80074ec <_dtoa_r+0x5bc>)
 8007448:	f7fb fc0e 	bl	8002c68 <__aeabi_ddiv>
 800744c:	463b      	mov	r3, r7
 800744e:	4632      	mov	r2, r6
 8007450:	f7fb f928 	bl	80026a4 <__aeabi_dsub>
 8007454:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007458:	9f03      	ldr	r7, [sp, #12]
 800745a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800745e:	f7fb fd89 	bl	8002f74 <__aeabi_d2iz>
 8007462:	4604      	mov	r4, r0
 8007464:	f7fb fa6c 	bl	8002940 <__aeabi_i2d>
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007470:	f7fb f918 	bl	80026a4 <__aeabi_dsub>
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	3430      	adds	r4, #48	; 0x30
 800747a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800747e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007482:	f807 4b01 	strb.w	r4, [r7], #1
 8007486:	f7fb fd37 	bl	8002ef8 <__aeabi_dcmplt>
 800748a:	2800      	cmp	r0, #0
 800748c:	d174      	bne.n	8007578 <_dtoa_r+0x648>
 800748e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007492:	2000      	movs	r0, #0
 8007494:	4911      	ldr	r1, [pc, #68]	; (80074dc <_dtoa_r+0x5ac>)
 8007496:	f7fb f905 	bl	80026a4 <__aeabi_dsub>
 800749a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800749e:	f7fb fd2b 	bl	8002ef8 <__aeabi_dcmplt>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	f040 80b7 	bne.w	8007616 <_dtoa_r+0x6e6>
 80074a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074aa:	429f      	cmp	r7, r3
 80074ac:	f43f af7a 	beq.w	80073a4 <_dtoa_r+0x474>
 80074b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80074b4:	2200      	movs	r2, #0
 80074b6:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <_dtoa_r+0x5b0>)
 80074b8:	f7fb faac 	bl	8002a14 <__aeabi_dmul>
 80074bc:	2200      	movs	r2, #0
 80074be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80074c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074c6:	4b06      	ldr	r3, [pc, #24]	; (80074e0 <_dtoa_r+0x5b0>)
 80074c8:	f7fb faa4 	bl	8002a14 <__aeabi_dmul>
 80074cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074d0:	e7c3      	b.n	800745a <_dtoa_r+0x52a>
 80074d2:	bf00      	nop
 80074d4:	0801b960 	.word	0x0801b960
 80074d8:	0801b938 	.word	0x0801b938
 80074dc:	3ff00000 	.word	0x3ff00000
 80074e0:	40240000 	.word	0x40240000
 80074e4:	401c0000 	.word	0x401c0000
 80074e8:	40140000 	.word	0x40140000
 80074ec:	3fe00000 	.word	0x3fe00000
 80074f0:	4630      	mov	r0, r6
 80074f2:	4639      	mov	r1, r7
 80074f4:	f7fb fa8e 	bl	8002a14 <__aeabi_dmul>
 80074f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80074fe:	9c03      	ldr	r4, [sp, #12]
 8007500:	9314      	str	r3, [sp, #80]	; 0x50
 8007502:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007506:	f7fb fd35 	bl	8002f74 <__aeabi_d2iz>
 800750a:	9015      	str	r0, [sp, #84]	; 0x54
 800750c:	f7fb fa18 	bl	8002940 <__aeabi_i2d>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007518:	f7fb f8c4 	bl	80026a4 <__aeabi_dsub>
 800751c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800751e:	4606      	mov	r6, r0
 8007520:	3330      	adds	r3, #48	; 0x30
 8007522:	f804 3b01 	strb.w	r3, [r4], #1
 8007526:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007528:	460f      	mov	r7, r1
 800752a:	429c      	cmp	r4, r3
 800752c:	f04f 0200 	mov.w	r2, #0
 8007530:	d124      	bne.n	800757c <_dtoa_r+0x64c>
 8007532:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007536:	4bb0      	ldr	r3, [pc, #704]	; (80077f8 <_dtoa_r+0x8c8>)
 8007538:	f7fb f8b6 	bl	80026a8 <__adddf3>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	4630      	mov	r0, r6
 8007542:	4639      	mov	r1, r7
 8007544:	f7fb fcf6 	bl	8002f34 <__aeabi_dcmpgt>
 8007548:	2800      	cmp	r0, #0
 800754a:	d163      	bne.n	8007614 <_dtoa_r+0x6e4>
 800754c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007550:	2000      	movs	r0, #0
 8007552:	49a9      	ldr	r1, [pc, #676]	; (80077f8 <_dtoa_r+0x8c8>)
 8007554:	f7fb f8a6 	bl	80026a4 <__aeabi_dsub>
 8007558:	4602      	mov	r2, r0
 800755a:	460b      	mov	r3, r1
 800755c:	4630      	mov	r0, r6
 800755e:	4639      	mov	r1, r7
 8007560:	f7fb fcca 	bl	8002ef8 <__aeabi_dcmplt>
 8007564:	2800      	cmp	r0, #0
 8007566:	f43f af1d 	beq.w	80073a4 <_dtoa_r+0x474>
 800756a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800756c:	1e7b      	subs	r3, r7, #1
 800756e:	9314      	str	r3, [sp, #80]	; 0x50
 8007570:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007574:	2b30      	cmp	r3, #48	; 0x30
 8007576:	d0f8      	beq.n	800756a <_dtoa_r+0x63a>
 8007578:	46c2      	mov	sl, r8
 800757a:	e03b      	b.n	80075f4 <_dtoa_r+0x6c4>
 800757c:	4b9f      	ldr	r3, [pc, #636]	; (80077fc <_dtoa_r+0x8cc>)
 800757e:	f7fb fa49 	bl	8002a14 <__aeabi_dmul>
 8007582:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007586:	e7bc      	b.n	8007502 <_dtoa_r+0x5d2>
 8007588:	9f03      	ldr	r7, [sp, #12]
 800758a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800758e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007592:	4640      	mov	r0, r8
 8007594:	4649      	mov	r1, r9
 8007596:	f7fb fb67 	bl	8002c68 <__aeabi_ddiv>
 800759a:	f7fb fceb 	bl	8002f74 <__aeabi_d2iz>
 800759e:	4604      	mov	r4, r0
 80075a0:	f7fb f9ce 	bl	8002940 <__aeabi_i2d>
 80075a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075a8:	f7fb fa34 	bl	8002a14 <__aeabi_dmul>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4640      	mov	r0, r8
 80075b2:	4649      	mov	r1, r9
 80075b4:	f7fb f876 	bl	80026a4 <__aeabi_dsub>
 80075b8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80075bc:	f807 6b01 	strb.w	r6, [r7], #1
 80075c0:	9e03      	ldr	r6, [sp, #12]
 80075c2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80075c6:	1bbe      	subs	r6, r7, r6
 80075c8:	45b4      	cmp	ip, r6
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	d136      	bne.n	800763e <_dtoa_r+0x70e>
 80075d0:	f7fb f86a 	bl	80026a8 <__adddf3>
 80075d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075d8:	4680      	mov	r8, r0
 80075da:	4689      	mov	r9, r1
 80075dc:	f7fb fcaa 	bl	8002f34 <__aeabi_dcmpgt>
 80075e0:	bb58      	cbnz	r0, 800763a <_dtoa_r+0x70a>
 80075e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075e6:	4640      	mov	r0, r8
 80075e8:	4649      	mov	r1, r9
 80075ea:	f7fb fc7b 	bl	8002ee4 <__aeabi_dcmpeq>
 80075ee:	b108      	cbz	r0, 80075f4 <_dtoa_r+0x6c4>
 80075f0:	07e1      	lsls	r1, r4, #31
 80075f2:	d422      	bmi.n	800763a <_dtoa_r+0x70a>
 80075f4:	4628      	mov	r0, r5
 80075f6:	4659      	mov	r1, fp
 80075f8:	f000 fe68 	bl	80082cc <_Bfree>
 80075fc:	2300      	movs	r3, #0
 80075fe:	703b      	strb	r3, [r7, #0]
 8007600:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007602:	f10a 0001 	add.w	r0, sl, #1
 8007606:	6018      	str	r0, [r3, #0]
 8007608:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800760a:	2b00      	cmp	r3, #0
 800760c:	f43f acde 	beq.w	8006fcc <_dtoa_r+0x9c>
 8007610:	601f      	str	r7, [r3, #0]
 8007612:	e4db      	b.n	8006fcc <_dtoa_r+0x9c>
 8007614:	4627      	mov	r7, r4
 8007616:	463b      	mov	r3, r7
 8007618:	461f      	mov	r7, r3
 800761a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800761e:	2a39      	cmp	r2, #57	; 0x39
 8007620:	d107      	bne.n	8007632 <_dtoa_r+0x702>
 8007622:	9a03      	ldr	r2, [sp, #12]
 8007624:	429a      	cmp	r2, r3
 8007626:	d1f7      	bne.n	8007618 <_dtoa_r+0x6e8>
 8007628:	2230      	movs	r2, #48	; 0x30
 800762a:	9903      	ldr	r1, [sp, #12]
 800762c:	f108 0801 	add.w	r8, r8, #1
 8007630:	700a      	strb	r2, [r1, #0]
 8007632:	781a      	ldrb	r2, [r3, #0]
 8007634:	3201      	adds	r2, #1
 8007636:	701a      	strb	r2, [r3, #0]
 8007638:	e79e      	b.n	8007578 <_dtoa_r+0x648>
 800763a:	46d0      	mov	r8, sl
 800763c:	e7eb      	b.n	8007616 <_dtoa_r+0x6e6>
 800763e:	2200      	movs	r2, #0
 8007640:	4b6e      	ldr	r3, [pc, #440]	; (80077fc <_dtoa_r+0x8cc>)
 8007642:	f7fb f9e7 	bl	8002a14 <__aeabi_dmul>
 8007646:	2200      	movs	r2, #0
 8007648:	2300      	movs	r3, #0
 800764a:	4680      	mov	r8, r0
 800764c:	4689      	mov	r9, r1
 800764e:	f7fb fc49 	bl	8002ee4 <__aeabi_dcmpeq>
 8007652:	2800      	cmp	r0, #0
 8007654:	d09b      	beq.n	800758e <_dtoa_r+0x65e>
 8007656:	e7cd      	b.n	80075f4 <_dtoa_r+0x6c4>
 8007658:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800765a:	2a00      	cmp	r2, #0
 800765c:	f000 80d0 	beq.w	8007800 <_dtoa_r+0x8d0>
 8007660:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007662:	2a01      	cmp	r2, #1
 8007664:	f300 80ae 	bgt.w	80077c4 <_dtoa_r+0x894>
 8007668:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800766a:	2a00      	cmp	r2, #0
 800766c:	f000 80a6 	beq.w	80077bc <_dtoa_r+0x88c>
 8007670:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007674:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007676:	9f06      	ldr	r7, [sp, #24]
 8007678:	9a06      	ldr	r2, [sp, #24]
 800767a:	2101      	movs	r1, #1
 800767c:	441a      	add	r2, r3
 800767e:	9206      	str	r2, [sp, #24]
 8007680:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007682:	4628      	mov	r0, r5
 8007684:	441a      	add	r2, r3
 8007686:	9209      	str	r2, [sp, #36]	; 0x24
 8007688:	f000 ff20 	bl	80084cc <__i2b>
 800768c:	4606      	mov	r6, r0
 800768e:	2f00      	cmp	r7, #0
 8007690:	dd0c      	ble.n	80076ac <_dtoa_r+0x77c>
 8007692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007694:	2b00      	cmp	r3, #0
 8007696:	dd09      	ble.n	80076ac <_dtoa_r+0x77c>
 8007698:	42bb      	cmp	r3, r7
 800769a:	bfa8      	it	ge
 800769c:	463b      	movge	r3, r7
 800769e:	9a06      	ldr	r2, [sp, #24]
 80076a0:	1aff      	subs	r7, r7, r3
 80076a2:	1ad2      	subs	r2, r2, r3
 80076a4:	9206      	str	r2, [sp, #24]
 80076a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	9309      	str	r3, [sp, #36]	; 0x24
 80076ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ae:	b1f3      	cbz	r3, 80076ee <_dtoa_r+0x7be>
 80076b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 80a8 	beq.w	8007808 <_dtoa_r+0x8d8>
 80076b8:	2c00      	cmp	r4, #0
 80076ba:	dd10      	ble.n	80076de <_dtoa_r+0x7ae>
 80076bc:	4631      	mov	r1, r6
 80076be:	4622      	mov	r2, r4
 80076c0:	4628      	mov	r0, r5
 80076c2:	f000 ffc1 	bl	8008648 <__pow5mult>
 80076c6:	465a      	mov	r2, fp
 80076c8:	4601      	mov	r1, r0
 80076ca:	4606      	mov	r6, r0
 80076cc:	4628      	mov	r0, r5
 80076ce:	f000 ff13 	bl	80084f8 <__multiply>
 80076d2:	4680      	mov	r8, r0
 80076d4:	4659      	mov	r1, fp
 80076d6:	4628      	mov	r0, r5
 80076d8:	f000 fdf8 	bl	80082cc <_Bfree>
 80076dc:	46c3      	mov	fp, r8
 80076de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076e0:	1b1a      	subs	r2, r3, r4
 80076e2:	d004      	beq.n	80076ee <_dtoa_r+0x7be>
 80076e4:	4659      	mov	r1, fp
 80076e6:	4628      	mov	r0, r5
 80076e8:	f000 ffae 	bl	8008648 <__pow5mult>
 80076ec:	4683      	mov	fp, r0
 80076ee:	2101      	movs	r1, #1
 80076f0:	4628      	mov	r0, r5
 80076f2:	f000 feeb 	bl	80084cc <__i2b>
 80076f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076f8:	4604      	mov	r4, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f340 8086 	ble.w	800780c <_dtoa_r+0x8dc>
 8007700:	461a      	mov	r2, r3
 8007702:	4601      	mov	r1, r0
 8007704:	4628      	mov	r0, r5
 8007706:	f000 ff9f 	bl	8008648 <__pow5mult>
 800770a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800770c:	4604      	mov	r4, r0
 800770e:	2b01      	cmp	r3, #1
 8007710:	dd7f      	ble.n	8007812 <_dtoa_r+0x8e2>
 8007712:	f04f 0800 	mov.w	r8, #0
 8007716:	6923      	ldr	r3, [r4, #16]
 8007718:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800771c:	6918      	ldr	r0, [r3, #16]
 800771e:	f000 fe87 	bl	8008430 <__hi0bits>
 8007722:	f1c0 0020 	rsb	r0, r0, #32
 8007726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007728:	4418      	add	r0, r3
 800772a:	f010 001f 	ands.w	r0, r0, #31
 800772e:	f000 8092 	beq.w	8007856 <_dtoa_r+0x926>
 8007732:	f1c0 0320 	rsb	r3, r0, #32
 8007736:	2b04      	cmp	r3, #4
 8007738:	f340 808a 	ble.w	8007850 <_dtoa_r+0x920>
 800773c:	f1c0 001c 	rsb	r0, r0, #28
 8007740:	9b06      	ldr	r3, [sp, #24]
 8007742:	4407      	add	r7, r0
 8007744:	4403      	add	r3, r0
 8007746:	9306      	str	r3, [sp, #24]
 8007748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800774a:	4403      	add	r3, r0
 800774c:	9309      	str	r3, [sp, #36]	; 0x24
 800774e:	9b06      	ldr	r3, [sp, #24]
 8007750:	2b00      	cmp	r3, #0
 8007752:	dd05      	ble.n	8007760 <_dtoa_r+0x830>
 8007754:	4659      	mov	r1, fp
 8007756:	461a      	mov	r2, r3
 8007758:	4628      	mov	r0, r5
 800775a:	f000 ffcf 	bl	80086fc <__lshift>
 800775e:	4683      	mov	fp, r0
 8007760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007762:	2b00      	cmp	r3, #0
 8007764:	dd05      	ble.n	8007772 <_dtoa_r+0x842>
 8007766:	4621      	mov	r1, r4
 8007768:	461a      	mov	r2, r3
 800776a:	4628      	mov	r0, r5
 800776c:	f000 ffc6 	bl	80086fc <__lshift>
 8007770:	4604      	mov	r4, r0
 8007772:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007774:	2b00      	cmp	r3, #0
 8007776:	d070      	beq.n	800785a <_dtoa_r+0x92a>
 8007778:	4621      	mov	r1, r4
 800777a:	4658      	mov	r0, fp
 800777c:	f001 f82e 	bl	80087dc <__mcmp>
 8007780:	2800      	cmp	r0, #0
 8007782:	da6a      	bge.n	800785a <_dtoa_r+0x92a>
 8007784:	2300      	movs	r3, #0
 8007786:	4659      	mov	r1, fp
 8007788:	220a      	movs	r2, #10
 800778a:	4628      	mov	r0, r5
 800778c:	f000 fdc0 	bl	8008310 <__multadd>
 8007790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007792:	4683      	mov	fp, r0
 8007794:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 8194 	beq.w	8007ac6 <_dtoa_r+0xb96>
 800779e:	4631      	mov	r1, r6
 80077a0:	2300      	movs	r3, #0
 80077a2:	220a      	movs	r2, #10
 80077a4:	4628      	mov	r0, r5
 80077a6:	f000 fdb3 	bl	8008310 <__multadd>
 80077aa:	f1b9 0f00 	cmp.w	r9, #0
 80077ae:	4606      	mov	r6, r0
 80077b0:	f300 8093 	bgt.w	80078da <_dtoa_r+0x9aa>
 80077b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	dc57      	bgt.n	800786a <_dtoa_r+0x93a>
 80077ba:	e08e      	b.n	80078da <_dtoa_r+0x9aa>
 80077bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80077be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80077c2:	e757      	b.n	8007674 <_dtoa_r+0x744>
 80077c4:	9b08      	ldr	r3, [sp, #32]
 80077c6:	1e5c      	subs	r4, r3, #1
 80077c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ca:	42a3      	cmp	r3, r4
 80077cc:	bfb7      	itett	lt
 80077ce:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80077d0:	1b1c      	subge	r4, r3, r4
 80077d2:	1ae2      	sublt	r2, r4, r3
 80077d4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80077d6:	bfbe      	ittt	lt
 80077d8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80077da:	189b      	addlt	r3, r3, r2
 80077dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80077de:	9b08      	ldr	r3, [sp, #32]
 80077e0:	bfb8      	it	lt
 80077e2:	2400      	movlt	r4, #0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	bfbb      	ittet	lt
 80077e8:	9b06      	ldrlt	r3, [sp, #24]
 80077ea:	9a08      	ldrlt	r2, [sp, #32]
 80077ec:	9f06      	ldrge	r7, [sp, #24]
 80077ee:	1a9f      	sublt	r7, r3, r2
 80077f0:	bfac      	ite	ge
 80077f2:	9b08      	ldrge	r3, [sp, #32]
 80077f4:	2300      	movlt	r3, #0
 80077f6:	e73f      	b.n	8007678 <_dtoa_r+0x748>
 80077f8:	3fe00000 	.word	0x3fe00000
 80077fc:	40240000 	.word	0x40240000
 8007800:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007802:	9f06      	ldr	r7, [sp, #24]
 8007804:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007806:	e742      	b.n	800768e <_dtoa_r+0x75e>
 8007808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800780a:	e76b      	b.n	80076e4 <_dtoa_r+0x7b4>
 800780c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800780e:	2b01      	cmp	r3, #1
 8007810:	dc19      	bgt.n	8007846 <_dtoa_r+0x916>
 8007812:	9b04      	ldr	r3, [sp, #16]
 8007814:	b9bb      	cbnz	r3, 8007846 <_dtoa_r+0x916>
 8007816:	9b05      	ldr	r3, [sp, #20]
 8007818:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800781c:	b99b      	cbnz	r3, 8007846 <_dtoa_r+0x916>
 800781e:	9b05      	ldr	r3, [sp, #20]
 8007820:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007824:	0d1b      	lsrs	r3, r3, #20
 8007826:	051b      	lsls	r3, r3, #20
 8007828:	b183      	cbz	r3, 800784c <_dtoa_r+0x91c>
 800782a:	f04f 0801 	mov.w	r8, #1
 800782e:	9b06      	ldr	r3, [sp, #24]
 8007830:	3301      	adds	r3, #1
 8007832:	9306      	str	r3, [sp, #24]
 8007834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007836:	3301      	adds	r3, #1
 8007838:	9309      	str	r3, [sp, #36]	; 0x24
 800783a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800783c:	2b00      	cmp	r3, #0
 800783e:	f47f af6a 	bne.w	8007716 <_dtoa_r+0x7e6>
 8007842:	2001      	movs	r0, #1
 8007844:	e76f      	b.n	8007726 <_dtoa_r+0x7f6>
 8007846:	f04f 0800 	mov.w	r8, #0
 800784a:	e7f6      	b.n	800783a <_dtoa_r+0x90a>
 800784c:	4698      	mov	r8, r3
 800784e:	e7f4      	b.n	800783a <_dtoa_r+0x90a>
 8007850:	f43f af7d 	beq.w	800774e <_dtoa_r+0x81e>
 8007854:	4618      	mov	r0, r3
 8007856:	301c      	adds	r0, #28
 8007858:	e772      	b.n	8007740 <_dtoa_r+0x810>
 800785a:	9b08      	ldr	r3, [sp, #32]
 800785c:	2b00      	cmp	r3, #0
 800785e:	dc36      	bgt.n	80078ce <_dtoa_r+0x99e>
 8007860:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007862:	2b02      	cmp	r3, #2
 8007864:	dd33      	ble.n	80078ce <_dtoa_r+0x99e>
 8007866:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800786a:	f1b9 0f00 	cmp.w	r9, #0
 800786e:	d10d      	bne.n	800788c <_dtoa_r+0x95c>
 8007870:	4621      	mov	r1, r4
 8007872:	464b      	mov	r3, r9
 8007874:	2205      	movs	r2, #5
 8007876:	4628      	mov	r0, r5
 8007878:	f000 fd4a 	bl	8008310 <__multadd>
 800787c:	4601      	mov	r1, r0
 800787e:	4604      	mov	r4, r0
 8007880:	4658      	mov	r0, fp
 8007882:	f000 ffab 	bl	80087dc <__mcmp>
 8007886:	2800      	cmp	r0, #0
 8007888:	f73f adb8 	bgt.w	80073fc <_dtoa_r+0x4cc>
 800788c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800788e:	9f03      	ldr	r7, [sp, #12]
 8007890:	ea6f 0a03 	mvn.w	sl, r3
 8007894:	f04f 0800 	mov.w	r8, #0
 8007898:	4621      	mov	r1, r4
 800789a:	4628      	mov	r0, r5
 800789c:	f000 fd16 	bl	80082cc <_Bfree>
 80078a0:	2e00      	cmp	r6, #0
 80078a2:	f43f aea7 	beq.w	80075f4 <_dtoa_r+0x6c4>
 80078a6:	f1b8 0f00 	cmp.w	r8, #0
 80078aa:	d005      	beq.n	80078b8 <_dtoa_r+0x988>
 80078ac:	45b0      	cmp	r8, r6
 80078ae:	d003      	beq.n	80078b8 <_dtoa_r+0x988>
 80078b0:	4641      	mov	r1, r8
 80078b2:	4628      	mov	r0, r5
 80078b4:	f000 fd0a 	bl	80082cc <_Bfree>
 80078b8:	4631      	mov	r1, r6
 80078ba:	4628      	mov	r0, r5
 80078bc:	f000 fd06 	bl	80082cc <_Bfree>
 80078c0:	e698      	b.n	80075f4 <_dtoa_r+0x6c4>
 80078c2:	2400      	movs	r4, #0
 80078c4:	4626      	mov	r6, r4
 80078c6:	e7e1      	b.n	800788c <_dtoa_r+0x95c>
 80078c8:	46c2      	mov	sl, r8
 80078ca:	4626      	mov	r6, r4
 80078cc:	e596      	b.n	80073fc <_dtoa_r+0x4cc>
 80078ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 80fd 	beq.w	8007ad4 <_dtoa_r+0xba4>
 80078da:	2f00      	cmp	r7, #0
 80078dc:	dd05      	ble.n	80078ea <_dtoa_r+0x9ba>
 80078de:	4631      	mov	r1, r6
 80078e0:	463a      	mov	r2, r7
 80078e2:	4628      	mov	r0, r5
 80078e4:	f000 ff0a 	bl	80086fc <__lshift>
 80078e8:	4606      	mov	r6, r0
 80078ea:	f1b8 0f00 	cmp.w	r8, #0
 80078ee:	d05c      	beq.n	80079aa <_dtoa_r+0xa7a>
 80078f0:	4628      	mov	r0, r5
 80078f2:	6871      	ldr	r1, [r6, #4]
 80078f4:	f000 fcaa 	bl	800824c <_Balloc>
 80078f8:	4607      	mov	r7, r0
 80078fa:	b928      	cbnz	r0, 8007908 <_dtoa_r+0x9d8>
 80078fc:	4602      	mov	r2, r0
 80078fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007902:	4b7f      	ldr	r3, [pc, #508]	; (8007b00 <_dtoa_r+0xbd0>)
 8007904:	f7ff bb28 	b.w	8006f58 <_dtoa_r+0x28>
 8007908:	6932      	ldr	r2, [r6, #16]
 800790a:	f106 010c 	add.w	r1, r6, #12
 800790e:	3202      	adds	r2, #2
 8007910:	0092      	lsls	r2, r2, #2
 8007912:	300c      	adds	r0, #12
 8007914:	f000 fc8c 	bl	8008230 <memcpy>
 8007918:	2201      	movs	r2, #1
 800791a:	4639      	mov	r1, r7
 800791c:	4628      	mov	r0, r5
 800791e:	f000 feed 	bl	80086fc <__lshift>
 8007922:	46b0      	mov	r8, r6
 8007924:	4606      	mov	r6, r0
 8007926:	9b03      	ldr	r3, [sp, #12]
 8007928:	3301      	adds	r3, #1
 800792a:	9308      	str	r3, [sp, #32]
 800792c:	9b03      	ldr	r3, [sp, #12]
 800792e:	444b      	add	r3, r9
 8007930:	930a      	str	r3, [sp, #40]	; 0x28
 8007932:	9b04      	ldr	r3, [sp, #16]
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	9309      	str	r3, [sp, #36]	; 0x24
 800793a:	9b08      	ldr	r3, [sp, #32]
 800793c:	4621      	mov	r1, r4
 800793e:	3b01      	subs	r3, #1
 8007940:	4658      	mov	r0, fp
 8007942:	9304      	str	r3, [sp, #16]
 8007944:	f7ff fa66 	bl	8006e14 <quorem>
 8007948:	4603      	mov	r3, r0
 800794a:	4641      	mov	r1, r8
 800794c:	3330      	adds	r3, #48	; 0x30
 800794e:	9006      	str	r0, [sp, #24]
 8007950:	4658      	mov	r0, fp
 8007952:	930b      	str	r3, [sp, #44]	; 0x2c
 8007954:	f000 ff42 	bl	80087dc <__mcmp>
 8007958:	4632      	mov	r2, r6
 800795a:	4681      	mov	r9, r0
 800795c:	4621      	mov	r1, r4
 800795e:	4628      	mov	r0, r5
 8007960:	f000 ff58 	bl	8008814 <__mdiff>
 8007964:	68c2      	ldr	r2, [r0, #12]
 8007966:	4607      	mov	r7, r0
 8007968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800796a:	bb02      	cbnz	r2, 80079ae <_dtoa_r+0xa7e>
 800796c:	4601      	mov	r1, r0
 800796e:	4658      	mov	r0, fp
 8007970:	f000 ff34 	bl	80087dc <__mcmp>
 8007974:	4602      	mov	r2, r0
 8007976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007978:	4639      	mov	r1, r7
 800797a:	4628      	mov	r0, r5
 800797c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007980:	f000 fca4 	bl	80082cc <_Bfree>
 8007984:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007986:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007988:	9f08      	ldr	r7, [sp, #32]
 800798a:	ea43 0102 	orr.w	r1, r3, r2
 800798e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007990:	430b      	orrs	r3, r1
 8007992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007994:	d10d      	bne.n	80079b2 <_dtoa_r+0xa82>
 8007996:	2b39      	cmp	r3, #57	; 0x39
 8007998:	d029      	beq.n	80079ee <_dtoa_r+0xabe>
 800799a:	f1b9 0f00 	cmp.w	r9, #0
 800799e:	dd01      	ble.n	80079a4 <_dtoa_r+0xa74>
 80079a0:	9b06      	ldr	r3, [sp, #24]
 80079a2:	3331      	adds	r3, #49	; 0x31
 80079a4:	9a04      	ldr	r2, [sp, #16]
 80079a6:	7013      	strb	r3, [r2, #0]
 80079a8:	e776      	b.n	8007898 <_dtoa_r+0x968>
 80079aa:	4630      	mov	r0, r6
 80079ac:	e7b9      	b.n	8007922 <_dtoa_r+0x9f2>
 80079ae:	2201      	movs	r2, #1
 80079b0:	e7e2      	b.n	8007978 <_dtoa_r+0xa48>
 80079b2:	f1b9 0f00 	cmp.w	r9, #0
 80079b6:	db06      	blt.n	80079c6 <_dtoa_r+0xa96>
 80079b8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80079ba:	ea41 0909 	orr.w	r9, r1, r9
 80079be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079c0:	ea59 0101 	orrs.w	r1, r9, r1
 80079c4:	d120      	bne.n	8007a08 <_dtoa_r+0xad8>
 80079c6:	2a00      	cmp	r2, #0
 80079c8:	ddec      	ble.n	80079a4 <_dtoa_r+0xa74>
 80079ca:	4659      	mov	r1, fp
 80079cc:	2201      	movs	r2, #1
 80079ce:	4628      	mov	r0, r5
 80079d0:	9308      	str	r3, [sp, #32]
 80079d2:	f000 fe93 	bl	80086fc <__lshift>
 80079d6:	4621      	mov	r1, r4
 80079d8:	4683      	mov	fp, r0
 80079da:	f000 feff 	bl	80087dc <__mcmp>
 80079de:	2800      	cmp	r0, #0
 80079e0:	9b08      	ldr	r3, [sp, #32]
 80079e2:	dc02      	bgt.n	80079ea <_dtoa_r+0xaba>
 80079e4:	d1de      	bne.n	80079a4 <_dtoa_r+0xa74>
 80079e6:	07da      	lsls	r2, r3, #31
 80079e8:	d5dc      	bpl.n	80079a4 <_dtoa_r+0xa74>
 80079ea:	2b39      	cmp	r3, #57	; 0x39
 80079ec:	d1d8      	bne.n	80079a0 <_dtoa_r+0xa70>
 80079ee:	2339      	movs	r3, #57	; 0x39
 80079f0:	9a04      	ldr	r2, [sp, #16]
 80079f2:	7013      	strb	r3, [r2, #0]
 80079f4:	463b      	mov	r3, r7
 80079f6:	461f      	mov	r7, r3
 80079f8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80079fc:	3b01      	subs	r3, #1
 80079fe:	2a39      	cmp	r2, #57	; 0x39
 8007a00:	d050      	beq.n	8007aa4 <_dtoa_r+0xb74>
 8007a02:	3201      	adds	r2, #1
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	e747      	b.n	8007898 <_dtoa_r+0x968>
 8007a08:	2a00      	cmp	r2, #0
 8007a0a:	dd03      	ble.n	8007a14 <_dtoa_r+0xae4>
 8007a0c:	2b39      	cmp	r3, #57	; 0x39
 8007a0e:	d0ee      	beq.n	80079ee <_dtoa_r+0xabe>
 8007a10:	3301      	adds	r3, #1
 8007a12:	e7c7      	b.n	80079a4 <_dtoa_r+0xa74>
 8007a14:	9a08      	ldr	r2, [sp, #32]
 8007a16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007a18:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007a1c:	428a      	cmp	r2, r1
 8007a1e:	d02a      	beq.n	8007a76 <_dtoa_r+0xb46>
 8007a20:	4659      	mov	r1, fp
 8007a22:	2300      	movs	r3, #0
 8007a24:	220a      	movs	r2, #10
 8007a26:	4628      	mov	r0, r5
 8007a28:	f000 fc72 	bl	8008310 <__multadd>
 8007a2c:	45b0      	cmp	r8, r6
 8007a2e:	4683      	mov	fp, r0
 8007a30:	f04f 0300 	mov.w	r3, #0
 8007a34:	f04f 020a 	mov.w	r2, #10
 8007a38:	4641      	mov	r1, r8
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	d107      	bne.n	8007a4e <_dtoa_r+0xb1e>
 8007a3e:	f000 fc67 	bl	8008310 <__multadd>
 8007a42:	4680      	mov	r8, r0
 8007a44:	4606      	mov	r6, r0
 8007a46:	9b08      	ldr	r3, [sp, #32]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	9308      	str	r3, [sp, #32]
 8007a4c:	e775      	b.n	800793a <_dtoa_r+0xa0a>
 8007a4e:	f000 fc5f 	bl	8008310 <__multadd>
 8007a52:	4631      	mov	r1, r6
 8007a54:	4680      	mov	r8, r0
 8007a56:	2300      	movs	r3, #0
 8007a58:	220a      	movs	r2, #10
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	f000 fc58 	bl	8008310 <__multadd>
 8007a60:	4606      	mov	r6, r0
 8007a62:	e7f0      	b.n	8007a46 <_dtoa_r+0xb16>
 8007a64:	f1b9 0f00 	cmp.w	r9, #0
 8007a68:	bfcc      	ite	gt
 8007a6a:	464f      	movgt	r7, r9
 8007a6c:	2701      	movle	r7, #1
 8007a6e:	f04f 0800 	mov.w	r8, #0
 8007a72:	9a03      	ldr	r2, [sp, #12]
 8007a74:	4417      	add	r7, r2
 8007a76:	4659      	mov	r1, fp
 8007a78:	2201      	movs	r2, #1
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	9308      	str	r3, [sp, #32]
 8007a7e:	f000 fe3d 	bl	80086fc <__lshift>
 8007a82:	4621      	mov	r1, r4
 8007a84:	4683      	mov	fp, r0
 8007a86:	f000 fea9 	bl	80087dc <__mcmp>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	dcb2      	bgt.n	80079f4 <_dtoa_r+0xac4>
 8007a8e:	d102      	bne.n	8007a96 <_dtoa_r+0xb66>
 8007a90:	9b08      	ldr	r3, [sp, #32]
 8007a92:	07db      	lsls	r3, r3, #31
 8007a94:	d4ae      	bmi.n	80079f4 <_dtoa_r+0xac4>
 8007a96:	463b      	mov	r3, r7
 8007a98:	461f      	mov	r7, r3
 8007a9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a9e:	2a30      	cmp	r2, #48	; 0x30
 8007aa0:	d0fa      	beq.n	8007a98 <_dtoa_r+0xb68>
 8007aa2:	e6f9      	b.n	8007898 <_dtoa_r+0x968>
 8007aa4:	9a03      	ldr	r2, [sp, #12]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d1a5      	bne.n	80079f6 <_dtoa_r+0xac6>
 8007aaa:	2331      	movs	r3, #49	; 0x31
 8007aac:	f10a 0a01 	add.w	sl, sl, #1
 8007ab0:	e779      	b.n	80079a6 <_dtoa_r+0xa76>
 8007ab2:	4b14      	ldr	r3, [pc, #80]	; (8007b04 <_dtoa_r+0xbd4>)
 8007ab4:	f7ff baa8 	b.w	8007008 <_dtoa_r+0xd8>
 8007ab8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f47f aa81 	bne.w	8006fc2 <_dtoa_r+0x92>
 8007ac0:	4b11      	ldr	r3, [pc, #68]	; (8007b08 <_dtoa_r+0xbd8>)
 8007ac2:	f7ff baa1 	b.w	8007008 <_dtoa_r+0xd8>
 8007ac6:	f1b9 0f00 	cmp.w	r9, #0
 8007aca:	dc03      	bgt.n	8007ad4 <_dtoa_r+0xba4>
 8007acc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	f73f aecb 	bgt.w	800786a <_dtoa_r+0x93a>
 8007ad4:	9f03      	ldr	r7, [sp, #12]
 8007ad6:	4621      	mov	r1, r4
 8007ad8:	4658      	mov	r0, fp
 8007ada:	f7ff f99b 	bl	8006e14 <quorem>
 8007ade:	9a03      	ldr	r2, [sp, #12]
 8007ae0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007ae4:	f807 3b01 	strb.w	r3, [r7], #1
 8007ae8:	1aba      	subs	r2, r7, r2
 8007aea:	4591      	cmp	r9, r2
 8007aec:	ddba      	ble.n	8007a64 <_dtoa_r+0xb34>
 8007aee:	4659      	mov	r1, fp
 8007af0:	2300      	movs	r3, #0
 8007af2:	220a      	movs	r2, #10
 8007af4:	4628      	mov	r0, r5
 8007af6:	f000 fc0b 	bl	8008310 <__multadd>
 8007afa:	4683      	mov	fp, r0
 8007afc:	e7eb      	b.n	8007ad6 <_dtoa_r+0xba6>
 8007afe:	bf00      	nop
 8007b00:	0801b850 	.word	0x0801b850
 8007b04:	0801b654 	.word	0x0801b654
 8007b08:	0801b7d1 	.word	0x0801b7d1

08007b0c <rshift>:
 8007b0c:	6903      	ldr	r3, [r0, #16]
 8007b0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b12:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007b16:	f100 0414 	add.w	r4, r0, #20
 8007b1a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007b1e:	dd46      	ble.n	8007bae <rshift+0xa2>
 8007b20:	f011 011f 	ands.w	r1, r1, #31
 8007b24:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007b28:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007b2c:	d10c      	bne.n	8007b48 <rshift+0x3c>
 8007b2e:	4629      	mov	r1, r5
 8007b30:	f100 0710 	add.w	r7, r0, #16
 8007b34:	42b1      	cmp	r1, r6
 8007b36:	d335      	bcc.n	8007ba4 <rshift+0x98>
 8007b38:	1a9b      	subs	r3, r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	1eea      	subs	r2, r5, #3
 8007b3e:	4296      	cmp	r6, r2
 8007b40:	bf38      	it	cc
 8007b42:	2300      	movcc	r3, #0
 8007b44:	4423      	add	r3, r4
 8007b46:	e015      	b.n	8007b74 <rshift+0x68>
 8007b48:	46a1      	mov	r9, r4
 8007b4a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007b4e:	f1c1 0820 	rsb	r8, r1, #32
 8007b52:	40cf      	lsrs	r7, r1
 8007b54:	f105 0e04 	add.w	lr, r5, #4
 8007b58:	4576      	cmp	r6, lr
 8007b5a:	46f4      	mov	ip, lr
 8007b5c:	d816      	bhi.n	8007b8c <rshift+0x80>
 8007b5e:	1a9a      	subs	r2, r3, r2
 8007b60:	0092      	lsls	r2, r2, #2
 8007b62:	3a04      	subs	r2, #4
 8007b64:	3501      	adds	r5, #1
 8007b66:	42ae      	cmp	r6, r5
 8007b68:	bf38      	it	cc
 8007b6a:	2200      	movcc	r2, #0
 8007b6c:	18a3      	adds	r3, r4, r2
 8007b6e:	50a7      	str	r7, [r4, r2]
 8007b70:	b107      	cbz	r7, 8007b74 <rshift+0x68>
 8007b72:	3304      	adds	r3, #4
 8007b74:	42a3      	cmp	r3, r4
 8007b76:	eba3 0204 	sub.w	r2, r3, r4
 8007b7a:	bf08      	it	eq
 8007b7c:	2300      	moveq	r3, #0
 8007b7e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007b82:	6102      	str	r2, [r0, #16]
 8007b84:	bf08      	it	eq
 8007b86:	6143      	streq	r3, [r0, #20]
 8007b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b8c:	f8dc c000 	ldr.w	ip, [ip]
 8007b90:	fa0c fc08 	lsl.w	ip, ip, r8
 8007b94:	ea4c 0707 	orr.w	r7, ip, r7
 8007b98:	f849 7b04 	str.w	r7, [r9], #4
 8007b9c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ba0:	40cf      	lsrs	r7, r1
 8007ba2:	e7d9      	b.n	8007b58 <rshift+0x4c>
 8007ba4:	f851 cb04 	ldr.w	ip, [r1], #4
 8007ba8:	f847 cf04 	str.w	ip, [r7, #4]!
 8007bac:	e7c2      	b.n	8007b34 <rshift+0x28>
 8007bae:	4623      	mov	r3, r4
 8007bb0:	e7e0      	b.n	8007b74 <rshift+0x68>

08007bb2 <__hexdig_fun>:
 8007bb2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007bb6:	2b09      	cmp	r3, #9
 8007bb8:	d802      	bhi.n	8007bc0 <__hexdig_fun+0xe>
 8007bba:	3820      	subs	r0, #32
 8007bbc:	b2c0      	uxtb	r0, r0
 8007bbe:	4770      	bx	lr
 8007bc0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007bc4:	2b05      	cmp	r3, #5
 8007bc6:	d801      	bhi.n	8007bcc <__hexdig_fun+0x1a>
 8007bc8:	3847      	subs	r0, #71	; 0x47
 8007bca:	e7f7      	b.n	8007bbc <__hexdig_fun+0xa>
 8007bcc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007bd0:	2b05      	cmp	r3, #5
 8007bd2:	d801      	bhi.n	8007bd8 <__hexdig_fun+0x26>
 8007bd4:	3827      	subs	r0, #39	; 0x27
 8007bd6:	e7f1      	b.n	8007bbc <__hexdig_fun+0xa>
 8007bd8:	2000      	movs	r0, #0
 8007bda:	4770      	bx	lr

08007bdc <__gethex>:
 8007bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be0:	b08b      	sub	sp, #44	; 0x2c
 8007be2:	9305      	str	r3, [sp, #20]
 8007be4:	4bb2      	ldr	r3, [pc, #712]	; (8007eb0 <__gethex+0x2d4>)
 8007be6:	9002      	str	r0, [sp, #8]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	468b      	mov	fp, r1
 8007bec:	4618      	mov	r0, r3
 8007bee:	4690      	mov	r8, r2
 8007bf0:	9303      	str	r3, [sp, #12]
 8007bf2:	f7fa fd4b 	bl	800268c <strlen>
 8007bf6:	4682      	mov	sl, r0
 8007bf8:	9b03      	ldr	r3, [sp, #12]
 8007bfa:	f8db 2000 	ldr.w	r2, [fp]
 8007bfe:	4403      	add	r3, r0
 8007c00:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007c04:	9306      	str	r3, [sp, #24]
 8007c06:	1c93      	adds	r3, r2, #2
 8007c08:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007c0c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007c10:	32fe      	adds	r2, #254	; 0xfe
 8007c12:	18d1      	adds	r1, r2, r3
 8007c14:	461f      	mov	r7, r3
 8007c16:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007c1a:	9101      	str	r1, [sp, #4]
 8007c1c:	2830      	cmp	r0, #48	; 0x30
 8007c1e:	d0f8      	beq.n	8007c12 <__gethex+0x36>
 8007c20:	f7ff ffc7 	bl	8007bb2 <__hexdig_fun>
 8007c24:	4604      	mov	r4, r0
 8007c26:	2800      	cmp	r0, #0
 8007c28:	d13a      	bne.n	8007ca0 <__gethex+0xc4>
 8007c2a:	4652      	mov	r2, sl
 8007c2c:	4638      	mov	r0, r7
 8007c2e:	9903      	ldr	r1, [sp, #12]
 8007c30:	f001 fa26 	bl	8009080 <strncmp>
 8007c34:	4605      	mov	r5, r0
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d166      	bne.n	8007d08 <__gethex+0x12c>
 8007c3a:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007c3e:	eb07 060a 	add.w	r6, r7, sl
 8007c42:	f7ff ffb6 	bl	8007bb2 <__hexdig_fun>
 8007c46:	2800      	cmp	r0, #0
 8007c48:	d060      	beq.n	8007d0c <__gethex+0x130>
 8007c4a:	4633      	mov	r3, r6
 8007c4c:	7818      	ldrb	r0, [r3, #0]
 8007c4e:	461f      	mov	r7, r3
 8007c50:	2830      	cmp	r0, #48	; 0x30
 8007c52:	f103 0301 	add.w	r3, r3, #1
 8007c56:	d0f9      	beq.n	8007c4c <__gethex+0x70>
 8007c58:	f7ff ffab 	bl	8007bb2 <__hexdig_fun>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	fab0 f480 	clz	r4, r0
 8007c62:	4635      	mov	r5, r6
 8007c64:	0964      	lsrs	r4, r4, #5
 8007c66:	9301      	str	r3, [sp, #4]
 8007c68:	463a      	mov	r2, r7
 8007c6a:	4616      	mov	r6, r2
 8007c6c:	7830      	ldrb	r0, [r6, #0]
 8007c6e:	3201      	adds	r2, #1
 8007c70:	f7ff ff9f 	bl	8007bb2 <__hexdig_fun>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	d1f8      	bne.n	8007c6a <__gethex+0x8e>
 8007c78:	4652      	mov	r2, sl
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	9903      	ldr	r1, [sp, #12]
 8007c7e:	f001 f9ff 	bl	8009080 <strncmp>
 8007c82:	b980      	cbnz	r0, 8007ca6 <__gethex+0xca>
 8007c84:	b94d      	cbnz	r5, 8007c9a <__gethex+0xbe>
 8007c86:	eb06 050a 	add.w	r5, r6, sl
 8007c8a:	462a      	mov	r2, r5
 8007c8c:	4616      	mov	r6, r2
 8007c8e:	7830      	ldrb	r0, [r6, #0]
 8007c90:	3201      	adds	r2, #1
 8007c92:	f7ff ff8e 	bl	8007bb2 <__hexdig_fun>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d1f8      	bne.n	8007c8c <__gethex+0xb0>
 8007c9a:	1bad      	subs	r5, r5, r6
 8007c9c:	00ad      	lsls	r5, r5, #2
 8007c9e:	e004      	b.n	8007caa <__gethex+0xce>
 8007ca0:	2400      	movs	r4, #0
 8007ca2:	4625      	mov	r5, r4
 8007ca4:	e7e0      	b.n	8007c68 <__gethex+0x8c>
 8007ca6:	2d00      	cmp	r5, #0
 8007ca8:	d1f7      	bne.n	8007c9a <__gethex+0xbe>
 8007caa:	7833      	ldrb	r3, [r6, #0]
 8007cac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007cb0:	2b50      	cmp	r3, #80	; 0x50
 8007cb2:	d139      	bne.n	8007d28 <__gethex+0x14c>
 8007cb4:	7873      	ldrb	r3, [r6, #1]
 8007cb6:	2b2b      	cmp	r3, #43	; 0x2b
 8007cb8:	d02a      	beq.n	8007d10 <__gethex+0x134>
 8007cba:	2b2d      	cmp	r3, #45	; 0x2d
 8007cbc:	d02c      	beq.n	8007d18 <__gethex+0x13c>
 8007cbe:	f04f 0900 	mov.w	r9, #0
 8007cc2:	1c71      	adds	r1, r6, #1
 8007cc4:	7808      	ldrb	r0, [r1, #0]
 8007cc6:	f7ff ff74 	bl	8007bb2 <__hexdig_fun>
 8007cca:	1e43      	subs	r3, r0, #1
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b18      	cmp	r3, #24
 8007cd0:	d82a      	bhi.n	8007d28 <__gethex+0x14c>
 8007cd2:	f1a0 0210 	sub.w	r2, r0, #16
 8007cd6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007cda:	f7ff ff6a 	bl	8007bb2 <__hexdig_fun>
 8007cde:	1e43      	subs	r3, r0, #1
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b18      	cmp	r3, #24
 8007ce4:	d91b      	bls.n	8007d1e <__gethex+0x142>
 8007ce6:	f1b9 0f00 	cmp.w	r9, #0
 8007cea:	d000      	beq.n	8007cee <__gethex+0x112>
 8007cec:	4252      	negs	r2, r2
 8007cee:	4415      	add	r5, r2
 8007cf0:	f8cb 1000 	str.w	r1, [fp]
 8007cf4:	b1d4      	cbz	r4, 8007d2c <__gethex+0x150>
 8007cf6:	9b01      	ldr	r3, [sp, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	bf14      	ite	ne
 8007cfc:	2700      	movne	r7, #0
 8007cfe:	2706      	moveq	r7, #6
 8007d00:	4638      	mov	r0, r7
 8007d02:	b00b      	add	sp, #44	; 0x2c
 8007d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d08:	463e      	mov	r6, r7
 8007d0a:	4625      	mov	r5, r4
 8007d0c:	2401      	movs	r4, #1
 8007d0e:	e7cc      	b.n	8007caa <__gethex+0xce>
 8007d10:	f04f 0900 	mov.w	r9, #0
 8007d14:	1cb1      	adds	r1, r6, #2
 8007d16:	e7d5      	b.n	8007cc4 <__gethex+0xe8>
 8007d18:	f04f 0901 	mov.w	r9, #1
 8007d1c:	e7fa      	b.n	8007d14 <__gethex+0x138>
 8007d1e:	230a      	movs	r3, #10
 8007d20:	fb03 0202 	mla	r2, r3, r2, r0
 8007d24:	3a10      	subs	r2, #16
 8007d26:	e7d6      	b.n	8007cd6 <__gethex+0xfa>
 8007d28:	4631      	mov	r1, r6
 8007d2a:	e7e1      	b.n	8007cf0 <__gethex+0x114>
 8007d2c:	4621      	mov	r1, r4
 8007d2e:	1bf3      	subs	r3, r6, r7
 8007d30:	3b01      	subs	r3, #1
 8007d32:	2b07      	cmp	r3, #7
 8007d34:	dc0a      	bgt.n	8007d4c <__gethex+0x170>
 8007d36:	9802      	ldr	r0, [sp, #8]
 8007d38:	f000 fa88 	bl	800824c <_Balloc>
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	b940      	cbnz	r0, 8007d52 <__gethex+0x176>
 8007d40:	4602      	mov	r2, r0
 8007d42:	21de      	movs	r1, #222	; 0xde
 8007d44:	4b5b      	ldr	r3, [pc, #364]	; (8007eb4 <__gethex+0x2d8>)
 8007d46:	485c      	ldr	r0, [pc, #368]	; (8007eb8 <__gethex+0x2dc>)
 8007d48:	f001 f9bc 	bl	80090c4 <__assert_func>
 8007d4c:	3101      	adds	r1, #1
 8007d4e:	105b      	asrs	r3, r3, #1
 8007d50:	e7ef      	b.n	8007d32 <__gethex+0x156>
 8007d52:	f04f 0b00 	mov.w	fp, #0
 8007d56:	f100 0914 	add.w	r9, r0, #20
 8007d5a:	f1ca 0301 	rsb	r3, sl, #1
 8007d5e:	f8cd 9010 	str.w	r9, [sp, #16]
 8007d62:	f8cd b004 	str.w	fp, [sp, #4]
 8007d66:	9308      	str	r3, [sp, #32]
 8007d68:	42b7      	cmp	r7, r6
 8007d6a:	d33f      	bcc.n	8007dec <__gethex+0x210>
 8007d6c:	9f04      	ldr	r7, [sp, #16]
 8007d6e:	9b01      	ldr	r3, [sp, #4]
 8007d70:	f847 3b04 	str.w	r3, [r7], #4
 8007d74:	eba7 0709 	sub.w	r7, r7, r9
 8007d78:	10bf      	asrs	r7, r7, #2
 8007d7a:	6127      	str	r7, [r4, #16]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 fb57 	bl	8008430 <__hi0bits>
 8007d82:	017f      	lsls	r7, r7, #5
 8007d84:	f8d8 6000 	ldr.w	r6, [r8]
 8007d88:	1a3f      	subs	r7, r7, r0
 8007d8a:	42b7      	cmp	r7, r6
 8007d8c:	dd62      	ble.n	8007e54 <__gethex+0x278>
 8007d8e:	1bbf      	subs	r7, r7, r6
 8007d90:	4639      	mov	r1, r7
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 fef1 	bl	8008b7a <__any_on>
 8007d98:	4682      	mov	sl, r0
 8007d9a:	b1a8      	cbz	r0, 8007dc8 <__gethex+0x1ec>
 8007d9c:	f04f 0a01 	mov.w	sl, #1
 8007da0:	1e7b      	subs	r3, r7, #1
 8007da2:	1159      	asrs	r1, r3, #5
 8007da4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007da8:	f003 021f 	and.w	r2, r3, #31
 8007dac:	fa0a f202 	lsl.w	r2, sl, r2
 8007db0:	420a      	tst	r2, r1
 8007db2:	d009      	beq.n	8007dc8 <__gethex+0x1ec>
 8007db4:	4553      	cmp	r3, sl
 8007db6:	dd05      	ble.n	8007dc4 <__gethex+0x1e8>
 8007db8:	4620      	mov	r0, r4
 8007dba:	1eb9      	subs	r1, r7, #2
 8007dbc:	f000 fedd 	bl	8008b7a <__any_on>
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	d144      	bne.n	8007e4e <__gethex+0x272>
 8007dc4:	f04f 0a02 	mov.w	sl, #2
 8007dc8:	4639      	mov	r1, r7
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f7ff fe9e 	bl	8007b0c <rshift>
 8007dd0:	443d      	add	r5, r7
 8007dd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007dd6:	42ab      	cmp	r3, r5
 8007dd8:	da4a      	bge.n	8007e70 <__gethex+0x294>
 8007dda:	4621      	mov	r1, r4
 8007ddc:	9802      	ldr	r0, [sp, #8]
 8007dde:	f000 fa75 	bl	80082cc <_Bfree>
 8007de2:	2300      	movs	r3, #0
 8007de4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007de6:	27a3      	movs	r7, #163	; 0xa3
 8007de8:	6013      	str	r3, [r2, #0]
 8007dea:	e789      	b.n	8007d00 <__gethex+0x124>
 8007dec:	1e73      	subs	r3, r6, #1
 8007dee:	9a06      	ldr	r2, [sp, #24]
 8007df0:	9307      	str	r3, [sp, #28]
 8007df2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d019      	beq.n	8007e2e <__gethex+0x252>
 8007dfa:	f1bb 0f20 	cmp.w	fp, #32
 8007dfe:	d107      	bne.n	8007e10 <__gethex+0x234>
 8007e00:	9b04      	ldr	r3, [sp, #16]
 8007e02:	9a01      	ldr	r2, [sp, #4]
 8007e04:	f843 2b04 	str.w	r2, [r3], #4
 8007e08:	9304      	str	r3, [sp, #16]
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	469b      	mov	fp, r3
 8007e0e:	9301      	str	r3, [sp, #4]
 8007e10:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007e14:	f7ff fecd 	bl	8007bb2 <__hexdig_fun>
 8007e18:	9b01      	ldr	r3, [sp, #4]
 8007e1a:	f000 000f 	and.w	r0, r0, #15
 8007e1e:	fa00 f00b 	lsl.w	r0, r0, fp
 8007e22:	4303      	orrs	r3, r0
 8007e24:	9301      	str	r3, [sp, #4]
 8007e26:	f10b 0b04 	add.w	fp, fp, #4
 8007e2a:	9b07      	ldr	r3, [sp, #28]
 8007e2c:	e00d      	b.n	8007e4a <__gethex+0x26e>
 8007e2e:	9a08      	ldr	r2, [sp, #32]
 8007e30:	1e73      	subs	r3, r6, #1
 8007e32:	4413      	add	r3, r2
 8007e34:	42bb      	cmp	r3, r7
 8007e36:	d3e0      	bcc.n	8007dfa <__gethex+0x21e>
 8007e38:	4618      	mov	r0, r3
 8007e3a:	4652      	mov	r2, sl
 8007e3c:	9903      	ldr	r1, [sp, #12]
 8007e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e40:	f001 f91e 	bl	8009080 <strncmp>
 8007e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d1d7      	bne.n	8007dfa <__gethex+0x21e>
 8007e4a:	461e      	mov	r6, r3
 8007e4c:	e78c      	b.n	8007d68 <__gethex+0x18c>
 8007e4e:	f04f 0a03 	mov.w	sl, #3
 8007e52:	e7b9      	b.n	8007dc8 <__gethex+0x1ec>
 8007e54:	da09      	bge.n	8007e6a <__gethex+0x28e>
 8007e56:	1bf7      	subs	r7, r6, r7
 8007e58:	4621      	mov	r1, r4
 8007e5a:	463a      	mov	r2, r7
 8007e5c:	9802      	ldr	r0, [sp, #8]
 8007e5e:	f000 fc4d 	bl	80086fc <__lshift>
 8007e62:	4604      	mov	r4, r0
 8007e64:	1bed      	subs	r5, r5, r7
 8007e66:	f100 0914 	add.w	r9, r0, #20
 8007e6a:	f04f 0a00 	mov.w	sl, #0
 8007e6e:	e7b0      	b.n	8007dd2 <__gethex+0x1f6>
 8007e70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007e74:	42a8      	cmp	r0, r5
 8007e76:	dd72      	ble.n	8007f5e <__gethex+0x382>
 8007e78:	1b45      	subs	r5, r0, r5
 8007e7a:	42ae      	cmp	r6, r5
 8007e7c:	dc35      	bgt.n	8007eea <__gethex+0x30e>
 8007e7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d029      	beq.n	8007eda <__gethex+0x2fe>
 8007e86:	2b03      	cmp	r3, #3
 8007e88:	d02b      	beq.n	8007ee2 <__gethex+0x306>
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d11c      	bne.n	8007ec8 <__gethex+0x2ec>
 8007e8e:	42ae      	cmp	r6, r5
 8007e90:	d11a      	bne.n	8007ec8 <__gethex+0x2ec>
 8007e92:	2e01      	cmp	r6, #1
 8007e94:	d112      	bne.n	8007ebc <__gethex+0x2e0>
 8007e96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007e9a:	9a05      	ldr	r2, [sp, #20]
 8007e9c:	2762      	movs	r7, #98	; 0x62
 8007e9e:	6013      	str	r3, [r2, #0]
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	6123      	str	r3, [r4, #16]
 8007ea4:	f8c9 3000 	str.w	r3, [r9]
 8007ea8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007eaa:	601c      	str	r4, [r3, #0]
 8007eac:	e728      	b.n	8007d00 <__gethex+0x124>
 8007eae:	bf00      	nop
 8007eb0:	0801b8c8 	.word	0x0801b8c8
 8007eb4:	0801b850 	.word	0x0801b850
 8007eb8:	0801b861 	.word	0x0801b861
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	1e71      	subs	r1, r6, #1
 8007ec0:	f000 fe5b 	bl	8008b7a <__any_on>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d1e6      	bne.n	8007e96 <__gethex+0x2ba>
 8007ec8:	4621      	mov	r1, r4
 8007eca:	9802      	ldr	r0, [sp, #8]
 8007ecc:	f000 f9fe 	bl	80082cc <_Bfree>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ed4:	2750      	movs	r7, #80	; 0x50
 8007ed6:	6013      	str	r3, [r2, #0]
 8007ed8:	e712      	b.n	8007d00 <__gethex+0x124>
 8007eda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1f3      	bne.n	8007ec8 <__gethex+0x2ec>
 8007ee0:	e7d9      	b.n	8007e96 <__gethex+0x2ba>
 8007ee2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1d6      	bne.n	8007e96 <__gethex+0x2ba>
 8007ee8:	e7ee      	b.n	8007ec8 <__gethex+0x2ec>
 8007eea:	1e6f      	subs	r7, r5, #1
 8007eec:	f1ba 0f00 	cmp.w	sl, #0
 8007ef0:	d132      	bne.n	8007f58 <__gethex+0x37c>
 8007ef2:	b127      	cbz	r7, 8007efe <__gethex+0x322>
 8007ef4:	4639      	mov	r1, r7
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f000 fe3f 	bl	8008b7a <__any_on>
 8007efc:	4682      	mov	sl, r0
 8007efe:	2101      	movs	r1, #1
 8007f00:	117b      	asrs	r3, r7, #5
 8007f02:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007f06:	f007 071f 	and.w	r7, r7, #31
 8007f0a:	fa01 f707 	lsl.w	r7, r1, r7
 8007f0e:	421f      	tst	r7, r3
 8007f10:	f04f 0702 	mov.w	r7, #2
 8007f14:	4629      	mov	r1, r5
 8007f16:	4620      	mov	r0, r4
 8007f18:	bf18      	it	ne
 8007f1a:	f04a 0a02 	orrne.w	sl, sl, #2
 8007f1e:	1b76      	subs	r6, r6, r5
 8007f20:	f7ff fdf4 	bl	8007b0c <rshift>
 8007f24:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007f28:	f1ba 0f00 	cmp.w	sl, #0
 8007f2c:	d048      	beq.n	8007fc0 <__gethex+0x3e4>
 8007f2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d015      	beq.n	8007f62 <__gethex+0x386>
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d017      	beq.n	8007f6a <__gethex+0x38e>
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d109      	bne.n	8007f52 <__gethex+0x376>
 8007f3e:	f01a 0f02 	tst.w	sl, #2
 8007f42:	d006      	beq.n	8007f52 <__gethex+0x376>
 8007f44:	f8d9 0000 	ldr.w	r0, [r9]
 8007f48:	ea4a 0a00 	orr.w	sl, sl, r0
 8007f4c:	f01a 0f01 	tst.w	sl, #1
 8007f50:	d10e      	bne.n	8007f70 <__gethex+0x394>
 8007f52:	f047 0710 	orr.w	r7, r7, #16
 8007f56:	e033      	b.n	8007fc0 <__gethex+0x3e4>
 8007f58:	f04f 0a01 	mov.w	sl, #1
 8007f5c:	e7cf      	b.n	8007efe <__gethex+0x322>
 8007f5e:	2701      	movs	r7, #1
 8007f60:	e7e2      	b.n	8007f28 <__gethex+0x34c>
 8007f62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f64:	f1c3 0301 	rsb	r3, r3, #1
 8007f68:	9315      	str	r3, [sp, #84]	; 0x54
 8007f6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d0f0      	beq.n	8007f52 <__gethex+0x376>
 8007f70:	f04f 0c00 	mov.w	ip, #0
 8007f74:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007f78:	f104 0314 	add.w	r3, r4, #20
 8007f7c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007f80:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007f84:	4618      	mov	r0, r3
 8007f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f8a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007f8e:	d01c      	beq.n	8007fca <__gethex+0x3ee>
 8007f90:	3201      	adds	r2, #1
 8007f92:	6002      	str	r2, [r0, #0]
 8007f94:	2f02      	cmp	r7, #2
 8007f96:	f104 0314 	add.w	r3, r4, #20
 8007f9a:	d13d      	bne.n	8008018 <__gethex+0x43c>
 8007f9c:	f8d8 2000 	ldr.w	r2, [r8]
 8007fa0:	3a01      	subs	r2, #1
 8007fa2:	42b2      	cmp	r2, r6
 8007fa4:	d10a      	bne.n	8007fbc <__gethex+0x3e0>
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	1171      	asrs	r1, r6, #5
 8007faa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007fae:	f006 061f 	and.w	r6, r6, #31
 8007fb2:	fa02 f606 	lsl.w	r6, r2, r6
 8007fb6:	421e      	tst	r6, r3
 8007fb8:	bf18      	it	ne
 8007fba:	4617      	movne	r7, r2
 8007fbc:	f047 0720 	orr.w	r7, r7, #32
 8007fc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fc2:	601c      	str	r4, [r3, #0]
 8007fc4:	9b05      	ldr	r3, [sp, #20]
 8007fc6:	601d      	str	r5, [r3, #0]
 8007fc8:	e69a      	b.n	8007d00 <__gethex+0x124>
 8007fca:	4299      	cmp	r1, r3
 8007fcc:	f843 cc04 	str.w	ip, [r3, #-4]
 8007fd0:	d8d8      	bhi.n	8007f84 <__gethex+0x3a8>
 8007fd2:	68a3      	ldr	r3, [r4, #8]
 8007fd4:	459b      	cmp	fp, r3
 8007fd6:	db17      	blt.n	8008008 <__gethex+0x42c>
 8007fd8:	6861      	ldr	r1, [r4, #4]
 8007fda:	9802      	ldr	r0, [sp, #8]
 8007fdc:	3101      	adds	r1, #1
 8007fde:	f000 f935 	bl	800824c <_Balloc>
 8007fe2:	4681      	mov	r9, r0
 8007fe4:	b918      	cbnz	r0, 8007fee <__gethex+0x412>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	2184      	movs	r1, #132	; 0x84
 8007fea:	4b19      	ldr	r3, [pc, #100]	; (8008050 <__gethex+0x474>)
 8007fec:	e6ab      	b.n	8007d46 <__gethex+0x16a>
 8007fee:	6922      	ldr	r2, [r4, #16]
 8007ff0:	f104 010c 	add.w	r1, r4, #12
 8007ff4:	3202      	adds	r2, #2
 8007ff6:	0092      	lsls	r2, r2, #2
 8007ff8:	300c      	adds	r0, #12
 8007ffa:	f000 f919 	bl	8008230 <memcpy>
 8007ffe:	4621      	mov	r1, r4
 8008000:	9802      	ldr	r0, [sp, #8]
 8008002:	f000 f963 	bl	80082cc <_Bfree>
 8008006:	464c      	mov	r4, r9
 8008008:	6923      	ldr	r3, [r4, #16]
 800800a:	1c5a      	adds	r2, r3, #1
 800800c:	6122      	str	r2, [r4, #16]
 800800e:	2201      	movs	r2, #1
 8008010:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008014:	615a      	str	r2, [r3, #20]
 8008016:	e7bd      	b.n	8007f94 <__gethex+0x3b8>
 8008018:	6922      	ldr	r2, [r4, #16]
 800801a:	455a      	cmp	r2, fp
 800801c:	dd0b      	ble.n	8008036 <__gethex+0x45a>
 800801e:	2101      	movs	r1, #1
 8008020:	4620      	mov	r0, r4
 8008022:	f7ff fd73 	bl	8007b0c <rshift>
 8008026:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800802a:	3501      	adds	r5, #1
 800802c:	42ab      	cmp	r3, r5
 800802e:	f6ff aed4 	blt.w	8007dda <__gethex+0x1fe>
 8008032:	2701      	movs	r7, #1
 8008034:	e7c2      	b.n	8007fbc <__gethex+0x3e0>
 8008036:	f016 061f 	ands.w	r6, r6, #31
 800803a:	d0fa      	beq.n	8008032 <__gethex+0x456>
 800803c:	4453      	add	r3, sl
 800803e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008042:	f000 f9f5 	bl	8008430 <__hi0bits>
 8008046:	f1c6 0620 	rsb	r6, r6, #32
 800804a:	42b0      	cmp	r0, r6
 800804c:	dbe7      	blt.n	800801e <__gethex+0x442>
 800804e:	e7f0      	b.n	8008032 <__gethex+0x456>
 8008050:	0801b850 	.word	0x0801b850

08008054 <L_shift>:
 8008054:	f1c2 0208 	rsb	r2, r2, #8
 8008058:	0092      	lsls	r2, r2, #2
 800805a:	b570      	push	{r4, r5, r6, lr}
 800805c:	f1c2 0620 	rsb	r6, r2, #32
 8008060:	6843      	ldr	r3, [r0, #4]
 8008062:	6804      	ldr	r4, [r0, #0]
 8008064:	fa03 f506 	lsl.w	r5, r3, r6
 8008068:	432c      	orrs	r4, r5
 800806a:	40d3      	lsrs	r3, r2
 800806c:	6004      	str	r4, [r0, #0]
 800806e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008072:	4288      	cmp	r0, r1
 8008074:	d3f4      	bcc.n	8008060 <L_shift+0xc>
 8008076:	bd70      	pop	{r4, r5, r6, pc}

08008078 <__match>:
 8008078:	b530      	push	{r4, r5, lr}
 800807a:	6803      	ldr	r3, [r0, #0]
 800807c:	3301      	adds	r3, #1
 800807e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008082:	b914      	cbnz	r4, 800808a <__match+0x12>
 8008084:	6003      	str	r3, [r0, #0]
 8008086:	2001      	movs	r0, #1
 8008088:	bd30      	pop	{r4, r5, pc}
 800808a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800808e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008092:	2d19      	cmp	r5, #25
 8008094:	bf98      	it	ls
 8008096:	3220      	addls	r2, #32
 8008098:	42a2      	cmp	r2, r4
 800809a:	d0f0      	beq.n	800807e <__match+0x6>
 800809c:	2000      	movs	r0, #0
 800809e:	e7f3      	b.n	8008088 <__match+0x10>

080080a0 <__hexnan>:
 80080a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a4:	2500      	movs	r5, #0
 80080a6:	680b      	ldr	r3, [r1, #0]
 80080a8:	4682      	mov	sl, r0
 80080aa:	115e      	asrs	r6, r3, #5
 80080ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80080b0:	f013 031f 	ands.w	r3, r3, #31
 80080b4:	bf18      	it	ne
 80080b6:	3604      	addne	r6, #4
 80080b8:	1f37      	subs	r7, r6, #4
 80080ba:	46b9      	mov	r9, r7
 80080bc:	463c      	mov	r4, r7
 80080be:	46ab      	mov	fp, r5
 80080c0:	b087      	sub	sp, #28
 80080c2:	4690      	mov	r8, r2
 80080c4:	6802      	ldr	r2, [r0, #0]
 80080c6:	9301      	str	r3, [sp, #4]
 80080c8:	f846 5c04 	str.w	r5, [r6, #-4]
 80080cc:	9502      	str	r5, [sp, #8]
 80080ce:	7851      	ldrb	r1, [r2, #1]
 80080d0:	1c53      	adds	r3, r2, #1
 80080d2:	9303      	str	r3, [sp, #12]
 80080d4:	b341      	cbz	r1, 8008128 <__hexnan+0x88>
 80080d6:	4608      	mov	r0, r1
 80080d8:	9205      	str	r2, [sp, #20]
 80080da:	9104      	str	r1, [sp, #16]
 80080dc:	f7ff fd69 	bl	8007bb2 <__hexdig_fun>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	d14f      	bne.n	8008184 <__hexnan+0xe4>
 80080e4:	9904      	ldr	r1, [sp, #16]
 80080e6:	9a05      	ldr	r2, [sp, #20]
 80080e8:	2920      	cmp	r1, #32
 80080ea:	d818      	bhi.n	800811e <__hexnan+0x7e>
 80080ec:	9b02      	ldr	r3, [sp, #8]
 80080ee:	459b      	cmp	fp, r3
 80080f0:	dd13      	ble.n	800811a <__hexnan+0x7a>
 80080f2:	454c      	cmp	r4, r9
 80080f4:	d206      	bcs.n	8008104 <__hexnan+0x64>
 80080f6:	2d07      	cmp	r5, #7
 80080f8:	dc04      	bgt.n	8008104 <__hexnan+0x64>
 80080fa:	462a      	mov	r2, r5
 80080fc:	4649      	mov	r1, r9
 80080fe:	4620      	mov	r0, r4
 8008100:	f7ff ffa8 	bl	8008054 <L_shift>
 8008104:	4544      	cmp	r4, r8
 8008106:	d950      	bls.n	80081aa <__hexnan+0x10a>
 8008108:	2300      	movs	r3, #0
 800810a:	f1a4 0904 	sub.w	r9, r4, #4
 800810e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008112:	461d      	mov	r5, r3
 8008114:	464c      	mov	r4, r9
 8008116:	f8cd b008 	str.w	fp, [sp, #8]
 800811a:	9a03      	ldr	r2, [sp, #12]
 800811c:	e7d7      	b.n	80080ce <__hexnan+0x2e>
 800811e:	2929      	cmp	r1, #41	; 0x29
 8008120:	d156      	bne.n	80081d0 <__hexnan+0x130>
 8008122:	3202      	adds	r2, #2
 8008124:	f8ca 2000 	str.w	r2, [sl]
 8008128:	f1bb 0f00 	cmp.w	fp, #0
 800812c:	d050      	beq.n	80081d0 <__hexnan+0x130>
 800812e:	454c      	cmp	r4, r9
 8008130:	d206      	bcs.n	8008140 <__hexnan+0xa0>
 8008132:	2d07      	cmp	r5, #7
 8008134:	dc04      	bgt.n	8008140 <__hexnan+0xa0>
 8008136:	462a      	mov	r2, r5
 8008138:	4649      	mov	r1, r9
 800813a:	4620      	mov	r0, r4
 800813c:	f7ff ff8a 	bl	8008054 <L_shift>
 8008140:	4544      	cmp	r4, r8
 8008142:	d934      	bls.n	80081ae <__hexnan+0x10e>
 8008144:	4623      	mov	r3, r4
 8008146:	f1a8 0204 	sub.w	r2, r8, #4
 800814a:	f853 1b04 	ldr.w	r1, [r3], #4
 800814e:	429f      	cmp	r7, r3
 8008150:	f842 1f04 	str.w	r1, [r2, #4]!
 8008154:	d2f9      	bcs.n	800814a <__hexnan+0xaa>
 8008156:	1b3b      	subs	r3, r7, r4
 8008158:	f023 0303 	bic.w	r3, r3, #3
 800815c:	3304      	adds	r3, #4
 800815e:	3401      	adds	r4, #1
 8008160:	3e03      	subs	r6, #3
 8008162:	42b4      	cmp	r4, r6
 8008164:	bf88      	it	hi
 8008166:	2304      	movhi	r3, #4
 8008168:	2200      	movs	r2, #0
 800816a:	4443      	add	r3, r8
 800816c:	f843 2b04 	str.w	r2, [r3], #4
 8008170:	429f      	cmp	r7, r3
 8008172:	d2fb      	bcs.n	800816c <__hexnan+0xcc>
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	b91b      	cbnz	r3, 8008180 <__hexnan+0xe0>
 8008178:	4547      	cmp	r7, r8
 800817a:	d127      	bne.n	80081cc <__hexnan+0x12c>
 800817c:	2301      	movs	r3, #1
 800817e:	603b      	str	r3, [r7, #0]
 8008180:	2005      	movs	r0, #5
 8008182:	e026      	b.n	80081d2 <__hexnan+0x132>
 8008184:	3501      	adds	r5, #1
 8008186:	2d08      	cmp	r5, #8
 8008188:	f10b 0b01 	add.w	fp, fp, #1
 800818c:	dd06      	ble.n	800819c <__hexnan+0xfc>
 800818e:	4544      	cmp	r4, r8
 8008190:	d9c3      	bls.n	800811a <__hexnan+0x7a>
 8008192:	2300      	movs	r3, #0
 8008194:	2501      	movs	r5, #1
 8008196:	f844 3c04 	str.w	r3, [r4, #-4]
 800819a:	3c04      	subs	r4, #4
 800819c:	6822      	ldr	r2, [r4, #0]
 800819e:	f000 000f 	and.w	r0, r0, #15
 80081a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80081a6:	6022      	str	r2, [r4, #0]
 80081a8:	e7b7      	b.n	800811a <__hexnan+0x7a>
 80081aa:	2508      	movs	r5, #8
 80081ac:	e7b5      	b.n	800811a <__hexnan+0x7a>
 80081ae:	9b01      	ldr	r3, [sp, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d0df      	beq.n	8008174 <__hexnan+0xd4>
 80081b4:	f04f 32ff 	mov.w	r2, #4294967295
 80081b8:	f1c3 0320 	rsb	r3, r3, #32
 80081bc:	fa22 f303 	lsr.w	r3, r2, r3
 80081c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80081c4:	401a      	ands	r2, r3
 80081c6:	f846 2c04 	str.w	r2, [r6, #-4]
 80081ca:	e7d3      	b.n	8008174 <__hexnan+0xd4>
 80081cc:	3f04      	subs	r7, #4
 80081ce:	e7d1      	b.n	8008174 <__hexnan+0xd4>
 80081d0:	2004      	movs	r0, #4
 80081d2:	b007      	add	sp, #28
 80081d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080081d8 <_localeconv_r>:
 80081d8:	4800      	ldr	r0, [pc, #0]	; (80081dc <_localeconv_r+0x4>)
 80081da:	4770      	bx	lr
 80081dc:	20000164 	.word	0x20000164

080081e0 <malloc>:
 80081e0:	4b02      	ldr	r3, [pc, #8]	; (80081ec <malloc+0xc>)
 80081e2:	4601      	mov	r1, r0
 80081e4:	6818      	ldr	r0, [r3, #0]
 80081e6:	f000 bd65 	b.w	8008cb4 <_malloc_r>
 80081ea:	bf00      	nop
 80081ec:	2000000c 	.word	0x2000000c

080081f0 <__ascii_mbtowc>:
 80081f0:	b082      	sub	sp, #8
 80081f2:	b901      	cbnz	r1, 80081f6 <__ascii_mbtowc+0x6>
 80081f4:	a901      	add	r1, sp, #4
 80081f6:	b142      	cbz	r2, 800820a <__ascii_mbtowc+0x1a>
 80081f8:	b14b      	cbz	r3, 800820e <__ascii_mbtowc+0x1e>
 80081fa:	7813      	ldrb	r3, [r2, #0]
 80081fc:	600b      	str	r3, [r1, #0]
 80081fe:	7812      	ldrb	r2, [r2, #0]
 8008200:	1e10      	subs	r0, r2, #0
 8008202:	bf18      	it	ne
 8008204:	2001      	movne	r0, #1
 8008206:	b002      	add	sp, #8
 8008208:	4770      	bx	lr
 800820a:	4610      	mov	r0, r2
 800820c:	e7fb      	b.n	8008206 <__ascii_mbtowc+0x16>
 800820e:	f06f 0001 	mvn.w	r0, #1
 8008212:	e7f8      	b.n	8008206 <__ascii_mbtowc+0x16>

08008214 <memchr>:
 8008214:	4603      	mov	r3, r0
 8008216:	b510      	push	{r4, lr}
 8008218:	b2c9      	uxtb	r1, r1
 800821a:	4402      	add	r2, r0
 800821c:	4293      	cmp	r3, r2
 800821e:	4618      	mov	r0, r3
 8008220:	d101      	bne.n	8008226 <memchr+0x12>
 8008222:	2000      	movs	r0, #0
 8008224:	e003      	b.n	800822e <memchr+0x1a>
 8008226:	7804      	ldrb	r4, [r0, #0]
 8008228:	3301      	adds	r3, #1
 800822a:	428c      	cmp	r4, r1
 800822c:	d1f6      	bne.n	800821c <memchr+0x8>
 800822e:	bd10      	pop	{r4, pc}

08008230 <memcpy>:
 8008230:	440a      	add	r2, r1
 8008232:	4291      	cmp	r1, r2
 8008234:	f100 33ff 	add.w	r3, r0, #4294967295
 8008238:	d100      	bne.n	800823c <memcpy+0xc>
 800823a:	4770      	bx	lr
 800823c:	b510      	push	{r4, lr}
 800823e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008242:	4291      	cmp	r1, r2
 8008244:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008248:	d1f9      	bne.n	800823e <memcpy+0xe>
 800824a:	bd10      	pop	{r4, pc}

0800824c <_Balloc>:
 800824c:	b570      	push	{r4, r5, r6, lr}
 800824e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008250:	4604      	mov	r4, r0
 8008252:	460d      	mov	r5, r1
 8008254:	b976      	cbnz	r6, 8008274 <_Balloc+0x28>
 8008256:	2010      	movs	r0, #16
 8008258:	f7ff ffc2 	bl	80081e0 <malloc>
 800825c:	4602      	mov	r2, r0
 800825e:	6260      	str	r0, [r4, #36]	; 0x24
 8008260:	b920      	cbnz	r0, 800826c <_Balloc+0x20>
 8008262:	2166      	movs	r1, #102	; 0x66
 8008264:	4b17      	ldr	r3, [pc, #92]	; (80082c4 <_Balloc+0x78>)
 8008266:	4818      	ldr	r0, [pc, #96]	; (80082c8 <_Balloc+0x7c>)
 8008268:	f000 ff2c 	bl	80090c4 <__assert_func>
 800826c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008270:	6006      	str	r6, [r0, #0]
 8008272:	60c6      	str	r6, [r0, #12]
 8008274:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008276:	68f3      	ldr	r3, [r6, #12]
 8008278:	b183      	cbz	r3, 800829c <_Balloc+0x50>
 800827a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008282:	b9b8      	cbnz	r0, 80082b4 <_Balloc+0x68>
 8008284:	2101      	movs	r1, #1
 8008286:	fa01 f605 	lsl.w	r6, r1, r5
 800828a:	1d72      	adds	r2, r6, #5
 800828c:	4620      	mov	r0, r4
 800828e:	0092      	lsls	r2, r2, #2
 8008290:	f000 fc94 	bl	8008bbc <_calloc_r>
 8008294:	b160      	cbz	r0, 80082b0 <_Balloc+0x64>
 8008296:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800829a:	e00e      	b.n	80082ba <_Balloc+0x6e>
 800829c:	2221      	movs	r2, #33	; 0x21
 800829e:	2104      	movs	r1, #4
 80082a0:	4620      	mov	r0, r4
 80082a2:	f000 fc8b 	bl	8008bbc <_calloc_r>
 80082a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082a8:	60f0      	str	r0, [r6, #12]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1e4      	bne.n	800827a <_Balloc+0x2e>
 80082b0:	2000      	movs	r0, #0
 80082b2:	bd70      	pop	{r4, r5, r6, pc}
 80082b4:	6802      	ldr	r2, [r0, #0]
 80082b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80082ba:	2300      	movs	r3, #0
 80082bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082c0:	e7f7      	b.n	80082b2 <_Balloc+0x66>
 80082c2:	bf00      	nop
 80082c4:	0801b7de 	.word	0x0801b7de
 80082c8:	0801b8da 	.word	0x0801b8da

080082cc <_Bfree>:
 80082cc:	b570      	push	{r4, r5, r6, lr}
 80082ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082d0:	4605      	mov	r5, r0
 80082d2:	460c      	mov	r4, r1
 80082d4:	b976      	cbnz	r6, 80082f4 <_Bfree+0x28>
 80082d6:	2010      	movs	r0, #16
 80082d8:	f7ff ff82 	bl	80081e0 <malloc>
 80082dc:	4602      	mov	r2, r0
 80082de:	6268      	str	r0, [r5, #36]	; 0x24
 80082e0:	b920      	cbnz	r0, 80082ec <_Bfree+0x20>
 80082e2:	218a      	movs	r1, #138	; 0x8a
 80082e4:	4b08      	ldr	r3, [pc, #32]	; (8008308 <_Bfree+0x3c>)
 80082e6:	4809      	ldr	r0, [pc, #36]	; (800830c <_Bfree+0x40>)
 80082e8:	f000 feec 	bl	80090c4 <__assert_func>
 80082ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082f0:	6006      	str	r6, [r0, #0]
 80082f2:	60c6      	str	r6, [r0, #12]
 80082f4:	b13c      	cbz	r4, 8008306 <_Bfree+0x3a>
 80082f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80082f8:	6862      	ldr	r2, [r4, #4]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008300:	6021      	str	r1, [r4, #0]
 8008302:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008306:	bd70      	pop	{r4, r5, r6, pc}
 8008308:	0801b7de 	.word	0x0801b7de
 800830c:	0801b8da 	.word	0x0801b8da

08008310 <__multadd>:
 8008310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008314:	4607      	mov	r7, r0
 8008316:	460c      	mov	r4, r1
 8008318:	461e      	mov	r6, r3
 800831a:	2000      	movs	r0, #0
 800831c:	690d      	ldr	r5, [r1, #16]
 800831e:	f101 0c14 	add.w	ip, r1, #20
 8008322:	f8dc 3000 	ldr.w	r3, [ip]
 8008326:	3001      	adds	r0, #1
 8008328:	b299      	uxth	r1, r3
 800832a:	fb02 6101 	mla	r1, r2, r1, r6
 800832e:	0c1e      	lsrs	r6, r3, #16
 8008330:	0c0b      	lsrs	r3, r1, #16
 8008332:	fb02 3306 	mla	r3, r2, r6, r3
 8008336:	b289      	uxth	r1, r1
 8008338:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800833c:	4285      	cmp	r5, r0
 800833e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008342:	f84c 1b04 	str.w	r1, [ip], #4
 8008346:	dcec      	bgt.n	8008322 <__multadd+0x12>
 8008348:	b30e      	cbz	r6, 800838e <__multadd+0x7e>
 800834a:	68a3      	ldr	r3, [r4, #8]
 800834c:	42ab      	cmp	r3, r5
 800834e:	dc19      	bgt.n	8008384 <__multadd+0x74>
 8008350:	6861      	ldr	r1, [r4, #4]
 8008352:	4638      	mov	r0, r7
 8008354:	3101      	adds	r1, #1
 8008356:	f7ff ff79 	bl	800824c <_Balloc>
 800835a:	4680      	mov	r8, r0
 800835c:	b928      	cbnz	r0, 800836a <__multadd+0x5a>
 800835e:	4602      	mov	r2, r0
 8008360:	21b5      	movs	r1, #181	; 0xb5
 8008362:	4b0c      	ldr	r3, [pc, #48]	; (8008394 <__multadd+0x84>)
 8008364:	480c      	ldr	r0, [pc, #48]	; (8008398 <__multadd+0x88>)
 8008366:	f000 fead 	bl	80090c4 <__assert_func>
 800836a:	6922      	ldr	r2, [r4, #16]
 800836c:	f104 010c 	add.w	r1, r4, #12
 8008370:	3202      	adds	r2, #2
 8008372:	0092      	lsls	r2, r2, #2
 8008374:	300c      	adds	r0, #12
 8008376:	f7ff ff5b 	bl	8008230 <memcpy>
 800837a:	4621      	mov	r1, r4
 800837c:	4638      	mov	r0, r7
 800837e:	f7ff ffa5 	bl	80082cc <_Bfree>
 8008382:	4644      	mov	r4, r8
 8008384:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008388:	3501      	adds	r5, #1
 800838a:	615e      	str	r6, [r3, #20]
 800838c:	6125      	str	r5, [r4, #16]
 800838e:	4620      	mov	r0, r4
 8008390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008394:	0801b850 	.word	0x0801b850
 8008398:	0801b8da 	.word	0x0801b8da

0800839c <__s2b>:
 800839c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083a0:	4615      	mov	r5, r2
 80083a2:	2209      	movs	r2, #9
 80083a4:	461f      	mov	r7, r3
 80083a6:	3308      	adds	r3, #8
 80083a8:	460c      	mov	r4, r1
 80083aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80083ae:	4606      	mov	r6, r0
 80083b0:	2201      	movs	r2, #1
 80083b2:	2100      	movs	r1, #0
 80083b4:	429a      	cmp	r2, r3
 80083b6:	db09      	blt.n	80083cc <__s2b+0x30>
 80083b8:	4630      	mov	r0, r6
 80083ba:	f7ff ff47 	bl	800824c <_Balloc>
 80083be:	b940      	cbnz	r0, 80083d2 <__s2b+0x36>
 80083c0:	4602      	mov	r2, r0
 80083c2:	21ce      	movs	r1, #206	; 0xce
 80083c4:	4b18      	ldr	r3, [pc, #96]	; (8008428 <__s2b+0x8c>)
 80083c6:	4819      	ldr	r0, [pc, #100]	; (800842c <__s2b+0x90>)
 80083c8:	f000 fe7c 	bl	80090c4 <__assert_func>
 80083cc:	0052      	lsls	r2, r2, #1
 80083ce:	3101      	adds	r1, #1
 80083d0:	e7f0      	b.n	80083b4 <__s2b+0x18>
 80083d2:	9b08      	ldr	r3, [sp, #32]
 80083d4:	2d09      	cmp	r5, #9
 80083d6:	6143      	str	r3, [r0, #20]
 80083d8:	f04f 0301 	mov.w	r3, #1
 80083dc:	6103      	str	r3, [r0, #16]
 80083de:	dd16      	ble.n	800840e <__s2b+0x72>
 80083e0:	f104 0909 	add.w	r9, r4, #9
 80083e4:	46c8      	mov	r8, r9
 80083e6:	442c      	add	r4, r5
 80083e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80083ec:	4601      	mov	r1, r0
 80083ee:	220a      	movs	r2, #10
 80083f0:	4630      	mov	r0, r6
 80083f2:	3b30      	subs	r3, #48	; 0x30
 80083f4:	f7ff ff8c 	bl	8008310 <__multadd>
 80083f8:	45a0      	cmp	r8, r4
 80083fa:	d1f5      	bne.n	80083e8 <__s2b+0x4c>
 80083fc:	f1a5 0408 	sub.w	r4, r5, #8
 8008400:	444c      	add	r4, r9
 8008402:	1b2d      	subs	r5, r5, r4
 8008404:	1963      	adds	r3, r4, r5
 8008406:	42bb      	cmp	r3, r7
 8008408:	db04      	blt.n	8008414 <__s2b+0x78>
 800840a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800840e:	2509      	movs	r5, #9
 8008410:	340a      	adds	r4, #10
 8008412:	e7f6      	b.n	8008402 <__s2b+0x66>
 8008414:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008418:	4601      	mov	r1, r0
 800841a:	220a      	movs	r2, #10
 800841c:	4630      	mov	r0, r6
 800841e:	3b30      	subs	r3, #48	; 0x30
 8008420:	f7ff ff76 	bl	8008310 <__multadd>
 8008424:	e7ee      	b.n	8008404 <__s2b+0x68>
 8008426:	bf00      	nop
 8008428:	0801b850 	.word	0x0801b850
 800842c:	0801b8da 	.word	0x0801b8da

08008430 <__hi0bits>:
 8008430:	0c02      	lsrs	r2, r0, #16
 8008432:	0412      	lsls	r2, r2, #16
 8008434:	4603      	mov	r3, r0
 8008436:	b9ca      	cbnz	r2, 800846c <__hi0bits+0x3c>
 8008438:	0403      	lsls	r3, r0, #16
 800843a:	2010      	movs	r0, #16
 800843c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008440:	bf04      	itt	eq
 8008442:	021b      	lsleq	r3, r3, #8
 8008444:	3008      	addeq	r0, #8
 8008446:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800844a:	bf04      	itt	eq
 800844c:	011b      	lsleq	r3, r3, #4
 800844e:	3004      	addeq	r0, #4
 8008450:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008454:	bf04      	itt	eq
 8008456:	009b      	lsleq	r3, r3, #2
 8008458:	3002      	addeq	r0, #2
 800845a:	2b00      	cmp	r3, #0
 800845c:	db05      	blt.n	800846a <__hi0bits+0x3a>
 800845e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008462:	f100 0001 	add.w	r0, r0, #1
 8008466:	bf08      	it	eq
 8008468:	2020      	moveq	r0, #32
 800846a:	4770      	bx	lr
 800846c:	2000      	movs	r0, #0
 800846e:	e7e5      	b.n	800843c <__hi0bits+0xc>

08008470 <__lo0bits>:
 8008470:	6803      	ldr	r3, [r0, #0]
 8008472:	4602      	mov	r2, r0
 8008474:	f013 0007 	ands.w	r0, r3, #7
 8008478:	d00b      	beq.n	8008492 <__lo0bits+0x22>
 800847a:	07d9      	lsls	r1, r3, #31
 800847c:	d421      	bmi.n	80084c2 <__lo0bits+0x52>
 800847e:	0798      	lsls	r0, r3, #30
 8008480:	bf49      	itett	mi
 8008482:	085b      	lsrmi	r3, r3, #1
 8008484:	089b      	lsrpl	r3, r3, #2
 8008486:	2001      	movmi	r0, #1
 8008488:	6013      	strmi	r3, [r2, #0]
 800848a:	bf5c      	itt	pl
 800848c:	2002      	movpl	r0, #2
 800848e:	6013      	strpl	r3, [r2, #0]
 8008490:	4770      	bx	lr
 8008492:	b299      	uxth	r1, r3
 8008494:	b909      	cbnz	r1, 800849a <__lo0bits+0x2a>
 8008496:	2010      	movs	r0, #16
 8008498:	0c1b      	lsrs	r3, r3, #16
 800849a:	b2d9      	uxtb	r1, r3
 800849c:	b909      	cbnz	r1, 80084a2 <__lo0bits+0x32>
 800849e:	3008      	adds	r0, #8
 80084a0:	0a1b      	lsrs	r3, r3, #8
 80084a2:	0719      	lsls	r1, r3, #28
 80084a4:	bf04      	itt	eq
 80084a6:	091b      	lsreq	r3, r3, #4
 80084a8:	3004      	addeq	r0, #4
 80084aa:	0799      	lsls	r1, r3, #30
 80084ac:	bf04      	itt	eq
 80084ae:	089b      	lsreq	r3, r3, #2
 80084b0:	3002      	addeq	r0, #2
 80084b2:	07d9      	lsls	r1, r3, #31
 80084b4:	d403      	bmi.n	80084be <__lo0bits+0x4e>
 80084b6:	085b      	lsrs	r3, r3, #1
 80084b8:	f100 0001 	add.w	r0, r0, #1
 80084bc:	d003      	beq.n	80084c6 <__lo0bits+0x56>
 80084be:	6013      	str	r3, [r2, #0]
 80084c0:	4770      	bx	lr
 80084c2:	2000      	movs	r0, #0
 80084c4:	4770      	bx	lr
 80084c6:	2020      	movs	r0, #32
 80084c8:	4770      	bx	lr
	...

080084cc <__i2b>:
 80084cc:	b510      	push	{r4, lr}
 80084ce:	460c      	mov	r4, r1
 80084d0:	2101      	movs	r1, #1
 80084d2:	f7ff febb 	bl	800824c <_Balloc>
 80084d6:	4602      	mov	r2, r0
 80084d8:	b928      	cbnz	r0, 80084e6 <__i2b+0x1a>
 80084da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80084de:	4b04      	ldr	r3, [pc, #16]	; (80084f0 <__i2b+0x24>)
 80084e0:	4804      	ldr	r0, [pc, #16]	; (80084f4 <__i2b+0x28>)
 80084e2:	f000 fdef 	bl	80090c4 <__assert_func>
 80084e6:	2301      	movs	r3, #1
 80084e8:	6144      	str	r4, [r0, #20]
 80084ea:	6103      	str	r3, [r0, #16]
 80084ec:	bd10      	pop	{r4, pc}
 80084ee:	bf00      	nop
 80084f0:	0801b850 	.word	0x0801b850
 80084f4:	0801b8da 	.word	0x0801b8da

080084f8 <__multiply>:
 80084f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fc:	4691      	mov	r9, r2
 80084fe:	690a      	ldr	r2, [r1, #16]
 8008500:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008504:	460c      	mov	r4, r1
 8008506:	429a      	cmp	r2, r3
 8008508:	bfbe      	ittt	lt
 800850a:	460b      	movlt	r3, r1
 800850c:	464c      	movlt	r4, r9
 800850e:	4699      	movlt	r9, r3
 8008510:	6927      	ldr	r7, [r4, #16]
 8008512:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008516:	68a3      	ldr	r3, [r4, #8]
 8008518:	6861      	ldr	r1, [r4, #4]
 800851a:	eb07 060a 	add.w	r6, r7, sl
 800851e:	42b3      	cmp	r3, r6
 8008520:	b085      	sub	sp, #20
 8008522:	bfb8      	it	lt
 8008524:	3101      	addlt	r1, #1
 8008526:	f7ff fe91 	bl	800824c <_Balloc>
 800852a:	b930      	cbnz	r0, 800853a <__multiply+0x42>
 800852c:	4602      	mov	r2, r0
 800852e:	f240 115d 	movw	r1, #349	; 0x15d
 8008532:	4b43      	ldr	r3, [pc, #268]	; (8008640 <__multiply+0x148>)
 8008534:	4843      	ldr	r0, [pc, #268]	; (8008644 <__multiply+0x14c>)
 8008536:	f000 fdc5 	bl	80090c4 <__assert_func>
 800853a:	f100 0514 	add.w	r5, r0, #20
 800853e:	462b      	mov	r3, r5
 8008540:	2200      	movs	r2, #0
 8008542:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008546:	4543      	cmp	r3, r8
 8008548:	d321      	bcc.n	800858e <__multiply+0x96>
 800854a:	f104 0314 	add.w	r3, r4, #20
 800854e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008552:	f109 0314 	add.w	r3, r9, #20
 8008556:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800855a:	9202      	str	r2, [sp, #8]
 800855c:	1b3a      	subs	r2, r7, r4
 800855e:	3a15      	subs	r2, #21
 8008560:	f022 0203 	bic.w	r2, r2, #3
 8008564:	3204      	adds	r2, #4
 8008566:	f104 0115 	add.w	r1, r4, #21
 800856a:	428f      	cmp	r7, r1
 800856c:	bf38      	it	cc
 800856e:	2204      	movcc	r2, #4
 8008570:	9201      	str	r2, [sp, #4]
 8008572:	9a02      	ldr	r2, [sp, #8]
 8008574:	9303      	str	r3, [sp, #12]
 8008576:	429a      	cmp	r2, r3
 8008578:	d80c      	bhi.n	8008594 <__multiply+0x9c>
 800857a:	2e00      	cmp	r6, #0
 800857c:	dd03      	ble.n	8008586 <__multiply+0x8e>
 800857e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008582:	2b00      	cmp	r3, #0
 8008584:	d059      	beq.n	800863a <__multiply+0x142>
 8008586:	6106      	str	r6, [r0, #16]
 8008588:	b005      	add	sp, #20
 800858a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800858e:	f843 2b04 	str.w	r2, [r3], #4
 8008592:	e7d8      	b.n	8008546 <__multiply+0x4e>
 8008594:	f8b3 a000 	ldrh.w	sl, [r3]
 8008598:	f1ba 0f00 	cmp.w	sl, #0
 800859c:	d023      	beq.n	80085e6 <__multiply+0xee>
 800859e:	46a9      	mov	r9, r5
 80085a0:	f04f 0c00 	mov.w	ip, #0
 80085a4:	f104 0e14 	add.w	lr, r4, #20
 80085a8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80085ac:	f8d9 1000 	ldr.w	r1, [r9]
 80085b0:	fa1f fb82 	uxth.w	fp, r2
 80085b4:	b289      	uxth	r1, r1
 80085b6:	fb0a 110b 	mla	r1, sl, fp, r1
 80085ba:	4461      	add	r1, ip
 80085bc:	f8d9 c000 	ldr.w	ip, [r9]
 80085c0:	0c12      	lsrs	r2, r2, #16
 80085c2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80085c6:	fb0a c202 	mla	r2, sl, r2, ip
 80085ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80085ce:	b289      	uxth	r1, r1
 80085d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80085d4:	4577      	cmp	r7, lr
 80085d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085da:	f849 1b04 	str.w	r1, [r9], #4
 80085de:	d8e3      	bhi.n	80085a8 <__multiply+0xb0>
 80085e0:	9a01      	ldr	r2, [sp, #4]
 80085e2:	f845 c002 	str.w	ip, [r5, r2]
 80085e6:	9a03      	ldr	r2, [sp, #12]
 80085e8:	3304      	adds	r3, #4
 80085ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80085ee:	f1b9 0f00 	cmp.w	r9, #0
 80085f2:	d020      	beq.n	8008636 <__multiply+0x13e>
 80085f4:	46ae      	mov	lr, r5
 80085f6:	f04f 0a00 	mov.w	sl, #0
 80085fa:	6829      	ldr	r1, [r5, #0]
 80085fc:	f104 0c14 	add.w	ip, r4, #20
 8008600:	f8bc b000 	ldrh.w	fp, [ip]
 8008604:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008608:	b289      	uxth	r1, r1
 800860a:	fb09 220b 	mla	r2, r9, fp, r2
 800860e:	4492      	add	sl, r2
 8008610:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008614:	f84e 1b04 	str.w	r1, [lr], #4
 8008618:	f85c 2b04 	ldr.w	r2, [ip], #4
 800861c:	f8be 1000 	ldrh.w	r1, [lr]
 8008620:	0c12      	lsrs	r2, r2, #16
 8008622:	fb09 1102 	mla	r1, r9, r2, r1
 8008626:	4567      	cmp	r7, ip
 8008628:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800862c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008630:	d8e6      	bhi.n	8008600 <__multiply+0x108>
 8008632:	9a01      	ldr	r2, [sp, #4]
 8008634:	50a9      	str	r1, [r5, r2]
 8008636:	3504      	adds	r5, #4
 8008638:	e79b      	b.n	8008572 <__multiply+0x7a>
 800863a:	3e01      	subs	r6, #1
 800863c:	e79d      	b.n	800857a <__multiply+0x82>
 800863e:	bf00      	nop
 8008640:	0801b850 	.word	0x0801b850
 8008644:	0801b8da 	.word	0x0801b8da

08008648 <__pow5mult>:
 8008648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800864c:	4615      	mov	r5, r2
 800864e:	f012 0203 	ands.w	r2, r2, #3
 8008652:	4606      	mov	r6, r0
 8008654:	460f      	mov	r7, r1
 8008656:	d007      	beq.n	8008668 <__pow5mult+0x20>
 8008658:	4c25      	ldr	r4, [pc, #148]	; (80086f0 <__pow5mult+0xa8>)
 800865a:	3a01      	subs	r2, #1
 800865c:	2300      	movs	r3, #0
 800865e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008662:	f7ff fe55 	bl	8008310 <__multadd>
 8008666:	4607      	mov	r7, r0
 8008668:	10ad      	asrs	r5, r5, #2
 800866a:	d03d      	beq.n	80086e8 <__pow5mult+0xa0>
 800866c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800866e:	b97c      	cbnz	r4, 8008690 <__pow5mult+0x48>
 8008670:	2010      	movs	r0, #16
 8008672:	f7ff fdb5 	bl	80081e0 <malloc>
 8008676:	4602      	mov	r2, r0
 8008678:	6270      	str	r0, [r6, #36]	; 0x24
 800867a:	b928      	cbnz	r0, 8008688 <__pow5mult+0x40>
 800867c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008680:	4b1c      	ldr	r3, [pc, #112]	; (80086f4 <__pow5mult+0xac>)
 8008682:	481d      	ldr	r0, [pc, #116]	; (80086f8 <__pow5mult+0xb0>)
 8008684:	f000 fd1e 	bl	80090c4 <__assert_func>
 8008688:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800868c:	6004      	str	r4, [r0, #0]
 800868e:	60c4      	str	r4, [r0, #12]
 8008690:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008694:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008698:	b94c      	cbnz	r4, 80086ae <__pow5mult+0x66>
 800869a:	f240 2171 	movw	r1, #625	; 0x271
 800869e:	4630      	mov	r0, r6
 80086a0:	f7ff ff14 	bl	80084cc <__i2b>
 80086a4:	2300      	movs	r3, #0
 80086a6:	4604      	mov	r4, r0
 80086a8:	f8c8 0008 	str.w	r0, [r8, #8]
 80086ac:	6003      	str	r3, [r0, #0]
 80086ae:	f04f 0900 	mov.w	r9, #0
 80086b2:	07eb      	lsls	r3, r5, #31
 80086b4:	d50a      	bpl.n	80086cc <__pow5mult+0x84>
 80086b6:	4639      	mov	r1, r7
 80086b8:	4622      	mov	r2, r4
 80086ba:	4630      	mov	r0, r6
 80086bc:	f7ff ff1c 	bl	80084f8 <__multiply>
 80086c0:	4680      	mov	r8, r0
 80086c2:	4639      	mov	r1, r7
 80086c4:	4630      	mov	r0, r6
 80086c6:	f7ff fe01 	bl	80082cc <_Bfree>
 80086ca:	4647      	mov	r7, r8
 80086cc:	106d      	asrs	r5, r5, #1
 80086ce:	d00b      	beq.n	80086e8 <__pow5mult+0xa0>
 80086d0:	6820      	ldr	r0, [r4, #0]
 80086d2:	b938      	cbnz	r0, 80086e4 <__pow5mult+0x9c>
 80086d4:	4622      	mov	r2, r4
 80086d6:	4621      	mov	r1, r4
 80086d8:	4630      	mov	r0, r6
 80086da:	f7ff ff0d 	bl	80084f8 <__multiply>
 80086de:	6020      	str	r0, [r4, #0]
 80086e0:	f8c0 9000 	str.w	r9, [r0]
 80086e4:	4604      	mov	r4, r0
 80086e6:	e7e4      	b.n	80086b2 <__pow5mult+0x6a>
 80086e8:	4638      	mov	r0, r7
 80086ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ee:	bf00      	nop
 80086f0:	0801ba28 	.word	0x0801ba28
 80086f4:	0801b7de 	.word	0x0801b7de
 80086f8:	0801b8da 	.word	0x0801b8da

080086fc <__lshift>:
 80086fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008700:	460c      	mov	r4, r1
 8008702:	4607      	mov	r7, r0
 8008704:	4691      	mov	r9, r2
 8008706:	6923      	ldr	r3, [r4, #16]
 8008708:	6849      	ldr	r1, [r1, #4]
 800870a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800870e:	68a3      	ldr	r3, [r4, #8]
 8008710:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008714:	f108 0601 	add.w	r6, r8, #1
 8008718:	42b3      	cmp	r3, r6
 800871a:	db0b      	blt.n	8008734 <__lshift+0x38>
 800871c:	4638      	mov	r0, r7
 800871e:	f7ff fd95 	bl	800824c <_Balloc>
 8008722:	4605      	mov	r5, r0
 8008724:	b948      	cbnz	r0, 800873a <__lshift+0x3e>
 8008726:	4602      	mov	r2, r0
 8008728:	f240 11d9 	movw	r1, #473	; 0x1d9
 800872c:	4b29      	ldr	r3, [pc, #164]	; (80087d4 <__lshift+0xd8>)
 800872e:	482a      	ldr	r0, [pc, #168]	; (80087d8 <__lshift+0xdc>)
 8008730:	f000 fcc8 	bl	80090c4 <__assert_func>
 8008734:	3101      	adds	r1, #1
 8008736:	005b      	lsls	r3, r3, #1
 8008738:	e7ee      	b.n	8008718 <__lshift+0x1c>
 800873a:	2300      	movs	r3, #0
 800873c:	f100 0114 	add.w	r1, r0, #20
 8008740:	f100 0210 	add.w	r2, r0, #16
 8008744:	4618      	mov	r0, r3
 8008746:	4553      	cmp	r3, sl
 8008748:	db37      	blt.n	80087ba <__lshift+0xbe>
 800874a:	6920      	ldr	r0, [r4, #16]
 800874c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008750:	f104 0314 	add.w	r3, r4, #20
 8008754:	f019 091f 	ands.w	r9, r9, #31
 8008758:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800875c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008760:	d02f      	beq.n	80087c2 <__lshift+0xc6>
 8008762:	468a      	mov	sl, r1
 8008764:	f04f 0c00 	mov.w	ip, #0
 8008768:	f1c9 0e20 	rsb	lr, r9, #32
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	fa02 f209 	lsl.w	r2, r2, r9
 8008772:	ea42 020c 	orr.w	r2, r2, ip
 8008776:	f84a 2b04 	str.w	r2, [sl], #4
 800877a:	f853 2b04 	ldr.w	r2, [r3], #4
 800877e:	4298      	cmp	r0, r3
 8008780:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008784:	d8f2      	bhi.n	800876c <__lshift+0x70>
 8008786:	1b03      	subs	r3, r0, r4
 8008788:	3b15      	subs	r3, #21
 800878a:	f023 0303 	bic.w	r3, r3, #3
 800878e:	3304      	adds	r3, #4
 8008790:	f104 0215 	add.w	r2, r4, #21
 8008794:	4290      	cmp	r0, r2
 8008796:	bf38      	it	cc
 8008798:	2304      	movcc	r3, #4
 800879a:	f841 c003 	str.w	ip, [r1, r3]
 800879e:	f1bc 0f00 	cmp.w	ip, #0
 80087a2:	d001      	beq.n	80087a8 <__lshift+0xac>
 80087a4:	f108 0602 	add.w	r6, r8, #2
 80087a8:	3e01      	subs	r6, #1
 80087aa:	4638      	mov	r0, r7
 80087ac:	4621      	mov	r1, r4
 80087ae:	612e      	str	r6, [r5, #16]
 80087b0:	f7ff fd8c 	bl	80082cc <_Bfree>
 80087b4:	4628      	mov	r0, r5
 80087b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80087be:	3301      	adds	r3, #1
 80087c0:	e7c1      	b.n	8008746 <__lshift+0x4a>
 80087c2:	3904      	subs	r1, #4
 80087c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80087c8:	4298      	cmp	r0, r3
 80087ca:	f841 2f04 	str.w	r2, [r1, #4]!
 80087ce:	d8f9      	bhi.n	80087c4 <__lshift+0xc8>
 80087d0:	e7ea      	b.n	80087a8 <__lshift+0xac>
 80087d2:	bf00      	nop
 80087d4:	0801b850 	.word	0x0801b850
 80087d8:	0801b8da 	.word	0x0801b8da

080087dc <__mcmp>:
 80087dc:	4603      	mov	r3, r0
 80087de:	690a      	ldr	r2, [r1, #16]
 80087e0:	6900      	ldr	r0, [r0, #16]
 80087e2:	b530      	push	{r4, r5, lr}
 80087e4:	1a80      	subs	r0, r0, r2
 80087e6:	d10d      	bne.n	8008804 <__mcmp+0x28>
 80087e8:	3314      	adds	r3, #20
 80087ea:	3114      	adds	r1, #20
 80087ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80087f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80087f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80087f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80087fc:	4295      	cmp	r5, r2
 80087fe:	d002      	beq.n	8008806 <__mcmp+0x2a>
 8008800:	d304      	bcc.n	800880c <__mcmp+0x30>
 8008802:	2001      	movs	r0, #1
 8008804:	bd30      	pop	{r4, r5, pc}
 8008806:	42a3      	cmp	r3, r4
 8008808:	d3f4      	bcc.n	80087f4 <__mcmp+0x18>
 800880a:	e7fb      	b.n	8008804 <__mcmp+0x28>
 800880c:	f04f 30ff 	mov.w	r0, #4294967295
 8008810:	e7f8      	b.n	8008804 <__mcmp+0x28>
	...

08008814 <__mdiff>:
 8008814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008818:	460d      	mov	r5, r1
 800881a:	4607      	mov	r7, r0
 800881c:	4611      	mov	r1, r2
 800881e:	4628      	mov	r0, r5
 8008820:	4614      	mov	r4, r2
 8008822:	f7ff ffdb 	bl	80087dc <__mcmp>
 8008826:	1e06      	subs	r6, r0, #0
 8008828:	d111      	bne.n	800884e <__mdiff+0x3a>
 800882a:	4631      	mov	r1, r6
 800882c:	4638      	mov	r0, r7
 800882e:	f7ff fd0d 	bl	800824c <_Balloc>
 8008832:	4602      	mov	r2, r0
 8008834:	b928      	cbnz	r0, 8008842 <__mdiff+0x2e>
 8008836:	f240 2132 	movw	r1, #562	; 0x232
 800883a:	4b3a      	ldr	r3, [pc, #232]	; (8008924 <__mdiff+0x110>)
 800883c:	483a      	ldr	r0, [pc, #232]	; (8008928 <__mdiff+0x114>)
 800883e:	f000 fc41 	bl	80090c4 <__assert_func>
 8008842:	2301      	movs	r3, #1
 8008844:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008848:	4610      	mov	r0, r2
 800884a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884e:	bfa4      	itt	ge
 8008850:	4623      	movge	r3, r4
 8008852:	462c      	movge	r4, r5
 8008854:	4638      	mov	r0, r7
 8008856:	6861      	ldr	r1, [r4, #4]
 8008858:	bfa6      	itte	ge
 800885a:	461d      	movge	r5, r3
 800885c:	2600      	movge	r6, #0
 800885e:	2601      	movlt	r6, #1
 8008860:	f7ff fcf4 	bl	800824c <_Balloc>
 8008864:	4602      	mov	r2, r0
 8008866:	b918      	cbnz	r0, 8008870 <__mdiff+0x5c>
 8008868:	f44f 7110 	mov.w	r1, #576	; 0x240
 800886c:	4b2d      	ldr	r3, [pc, #180]	; (8008924 <__mdiff+0x110>)
 800886e:	e7e5      	b.n	800883c <__mdiff+0x28>
 8008870:	f102 0814 	add.w	r8, r2, #20
 8008874:	46c2      	mov	sl, r8
 8008876:	f04f 0c00 	mov.w	ip, #0
 800887a:	6927      	ldr	r7, [r4, #16]
 800887c:	60c6      	str	r6, [r0, #12]
 800887e:	692e      	ldr	r6, [r5, #16]
 8008880:	f104 0014 	add.w	r0, r4, #20
 8008884:	f105 0914 	add.w	r9, r5, #20
 8008888:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800888c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008890:	3410      	adds	r4, #16
 8008892:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008896:	f859 3b04 	ldr.w	r3, [r9], #4
 800889a:	fa1f f18b 	uxth.w	r1, fp
 800889e:	448c      	add	ip, r1
 80088a0:	b299      	uxth	r1, r3
 80088a2:	0c1b      	lsrs	r3, r3, #16
 80088a4:	ebac 0101 	sub.w	r1, ip, r1
 80088a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80088ac:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80088b0:	b289      	uxth	r1, r1
 80088b2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80088b6:	454e      	cmp	r6, r9
 80088b8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80088bc:	f84a 3b04 	str.w	r3, [sl], #4
 80088c0:	d8e7      	bhi.n	8008892 <__mdiff+0x7e>
 80088c2:	1b73      	subs	r3, r6, r5
 80088c4:	3b15      	subs	r3, #21
 80088c6:	f023 0303 	bic.w	r3, r3, #3
 80088ca:	3515      	adds	r5, #21
 80088cc:	3304      	adds	r3, #4
 80088ce:	42ae      	cmp	r6, r5
 80088d0:	bf38      	it	cc
 80088d2:	2304      	movcc	r3, #4
 80088d4:	4418      	add	r0, r3
 80088d6:	4443      	add	r3, r8
 80088d8:	461e      	mov	r6, r3
 80088da:	4605      	mov	r5, r0
 80088dc:	4575      	cmp	r5, lr
 80088de:	d30e      	bcc.n	80088fe <__mdiff+0xea>
 80088e0:	f10e 0103 	add.w	r1, lr, #3
 80088e4:	1a09      	subs	r1, r1, r0
 80088e6:	f021 0103 	bic.w	r1, r1, #3
 80088ea:	3803      	subs	r0, #3
 80088ec:	4586      	cmp	lr, r0
 80088ee:	bf38      	it	cc
 80088f0:	2100      	movcc	r1, #0
 80088f2:	4419      	add	r1, r3
 80088f4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80088f8:	b18b      	cbz	r3, 800891e <__mdiff+0x10a>
 80088fa:	6117      	str	r7, [r2, #16]
 80088fc:	e7a4      	b.n	8008848 <__mdiff+0x34>
 80088fe:	f855 8b04 	ldr.w	r8, [r5], #4
 8008902:	fa1f f188 	uxth.w	r1, r8
 8008906:	4461      	add	r1, ip
 8008908:	140c      	asrs	r4, r1, #16
 800890a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800890e:	b289      	uxth	r1, r1
 8008910:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008914:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008918:	f846 1b04 	str.w	r1, [r6], #4
 800891c:	e7de      	b.n	80088dc <__mdiff+0xc8>
 800891e:	3f01      	subs	r7, #1
 8008920:	e7e8      	b.n	80088f4 <__mdiff+0xe0>
 8008922:	bf00      	nop
 8008924:	0801b850 	.word	0x0801b850
 8008928:	0801b8da 	.word	0x0801b8da

0800892c <__ulp>:
 800892c:	4b11      	ldr	r3, [pc, #68]	; (8008974 <__ulp+0x48>)
 800892e:	400b      	ands	r3, r1
 8008930:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008934:	2b00      	cmp	r3, #0
 8008936:	dd02      	ble.n	800893e <__ulp+0x12>
 8008938:	2000      	movs	r0, #0
 800893a:	4619      	mov	r1, r3
 800893c:	4770      	bx	lr
 800893e:	425b      	negs	r3, r3
 8008940:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008944:	f04f 0000 	mov.w	r0, #0
 8008948:	f04f 0100 	mov.w	r1, #0
 800894c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008950:	da04      	bge.n	800895c <__ulp+0x30>
 8008952:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008956:	fa43 f102 	asr.w	r1, r3, r2
 800895a:	4770      	bx	lr
 800895c:	f1a2 0314 	sub.w	r3, r2, #20
 8008960:	2b1e      	cmp	r3, #30
 8008962:	bfd6      	itet	le
 8008964:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008968:	2301      	movgt	r3, #1
 800896a:	fa22 f303 	lsrle.w	r3, r2, r3
 800896e:	4618      	mov	r0, r3
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	7ff00000 	.word	0x7ff00000

08008978 <__b2d>:
 8008978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800897c:	6907      	ldr	r7, [r0, #16]
 800897e:	f100 0914 	add.w	r9, r0, #20
 8008982:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008986:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800898a:	f1a7 0804 	sub.w	r8, r7, #4
 800898e:	4630      	mov	r0, r6
 8008990:	f7ff fd4e 	bl	8008430 <__hi0bits>
 8008994:	f1c0 0320 	rsb	r3, r0, #32
 8008998:	280a      	cmp	r0, #10
 800899a:	600b      	str	r3, [r1, #0]
 800899c:	491f      	ldr	r1, [pc, #124]	; (8008a1c <__b2d+0xa4>)
 800899e:	dc17      	bgt.n	80089d0 <__b2d+0x58>
 80089a0:	45c1      	cmp	r9, r8
 80089a2:	bf28      	it	cs
 80089a4:	2200      	movcs	r2, #0
 80089a6:	f1c0 0c0b 	rsb	ip, r0, #11
 80089aa:	fa26 f30c 	lsr.w	r3, r6, ip
 80089ae:	bf38      	it	cc
 80089b0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80089b4:	ea43 0501 	orr.w	r5, r3, r1
 80089b8:	f100 0315 	add.w	r3, r0, #21
 80089bc:	fa06 f303 	lsl.w	r3, r6, r3
 80089c0:	fa22 f20c 	lsr.w	r2, r2, ip
 80089c4:	ea43 0402 	orr.w	r4, r3, r2
 80089c8:	4620      	mov	r0, r4
 80089ca:	4629      	mov	r1, r5
 80089cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089d0:	45c1      	cmp	r9, r8
 80089d2:	bf2e      	itee	cs
 80089d4:	2200      	movcs	r2, #0
 80089d6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80089da:	f1a7 0808 	subcc.w	r8, r7, #8
 80089de:	f1b0 030b 	subs.w	r3, r0, #11
 80089e2:	d016      	beq.n	8008a12 <__b2d+0x9a>
 80089e4:	f1c3 0720 	rsb	r7, r3, #32
 80089e8:	fa22 f107 	lsr.w	r1, r2, r7
 80089ec:	45c8      	cmp	r8, r9
 80089ee:	fa06 f603 	lsl.w	r6, r6, r3
 80089f2:	ea46 0601 	orr.w	r6, r6, r1
 80089f6:	bf94      	ite	ls
 80089f8:	2100      	movls	r1, #0
 80089fa:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80089fe:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008a02:	fa02 f003 	lsl.w	r0, r2, r3
 8008a06:	40f9      	lsrs	r1, r7
 8008a08:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008a0c:	ea40 0401 	orr.w	r4, r0, r1
 8008a10:	e7da      	b.n	80089c8 <__b2d+0x50>
 8008a12:	4614      	mov	r4, r2
 8008a14:	ea46 0501 	orr.w	r5, r6, r1
 8008a18:	e7d6      	b.n	80089c8 <__b2d+0x50>
 8008a1a:	bf00      	nop
 8008a1c:	3ff00000 	.word	0x3ff00000

08008a20 <__d2b>:
 8008a20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008a24:	2101      	movs	r1, #1
 8008a26:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008a2a:	4690      	mov	r8, r2
 8008a2c:	461d      	mov	r5, r3
 8008a2e:	f7ff fc0d 	bl	800824c <_Balloc>
 8008a32:	4604      	mov	r4, r0
 8008a34:	b930      	cbnz	r0, 8008a44 <__d2b+0x24>
 8008a36:	4602      	mov	r2, r0
 8008a38:	f240 310a 	movw	r1, #778	; 0x30a
 8008a3c:	4b24      	ldr	r3, [pc, #144]	; (8008ad0 <__d2b+0xb0>)
 8008a3e:	4825      	ldr	r0, [pc, #148]	; (8008ad4 <__d2b+0xb4>)
 8008a40:	f000 fb40 	bl	80090c4 <__assert_func>
 8008a44:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008a48:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008a4c:	bb2d      	cbnz	r5, 8008a9a <__d2b+0x7a>
 8008a4e:	9301      	str	r3, [sp, #4]
 8008a50:	f1b8 0300 	subs.w	r3, r8, #0
 8008a54:	d026      	beq.n	8008aa4 <__d2b+0x84>
 8008a56:	4668      	mov	r0, sp
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	f7ff fd09 	bl	8008470 <__lo0bits>
 8008a5e:	9900      	ldr	r1, [sp, #0]
 8008a60:	b1f0      	cbz	r0, 8008aa0 <__d2b+0x80>
 8008a62:	9a01      	ldr	r2, [sp, #4]
 8008a64:	f1c0 0320 	rsb	r3, r0, #32
 8008a68:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6c:	430b      	orrs	r3, r1
 8008a6e:	40c2      	lsrs	r2, r0
 8008a70:	6163      	str	r3, [r4, #20]
 8008a72:	9201      	str	r2, [sp, #4]
 8008a74:	9b01      	ldr	r3, [sp, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	bf14      	ite	ne
 8008a7a:	2102      	movne	r1, #2
 8008a7c:	2101      	moveq	r1, #1
 8008a7e:	61a3      	str	r3, [r4, #24]
 8008a80:	6121      	str	r1, [r4, #16]
 8008a82:	b1c5      	cbz	r5, 8008ab6 <__d2b+0x96>
 8008a84:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008a88:	4405      	add	r5, r0
 8008a8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a8e:	603d      	str	r5, [r7, #0]
 8008a90:	6030      	str	r0, [r6, #0]
 8008a92:	4620      	mov	r0, r4
 8008a94:	b002      	add	sp, #8
 8008a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a9e:	e7d6      	b.n	8008a4e <__d2b+0x2e>
 8008aa0:	6161      	str	r1, [r4, #20]
 8008aa2:	e7e7      	b.n	8008a74 <__d2b+0x54>
 8008aa4:	a801      	add	r0, sp, #4
 8008aa6:	f7ff fce3 	bl	8008470 <__lo0bits>
 8008aaa:	2101      	movs	r1, #1
 8008aac:	9b01      	ldr	r3, [sp, #4]
 8008aae:	6121      	str	r1, [r4, #16]
 8008ab0:	6163      	str	r3, [r4, #20]
 8008ab2:	3020      	adds	r0, #32
 8008ab4:	e7e5      	b.n	8008a82 <__d2b+0x62>
 8008ab6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008aba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008abe:	6038      	str	r0, [r7, #0]
 8008ac0:	6918      	ldr	r0, [r3, #16]
 8008ac2:	f7ff fcb5 	bl	8008430 <__hi0bits>
 8008ac6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008aca:	6031      	str	r1, [r6, #0]
 8008acc:	e7e1      	b.n	8008a92 <__d2b+0x72>
 8008ace:	bf00      	nop
 8008ad0:	0801b850 	.word	0x0801b850
 8008ad4:	0801b8da 	.word	0x0801b8da

08008ad8 <__ratio>:
 8008ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008adc:	4688      	mov	r8, r1
 8008ade:	4669      	mov	r1, sp
 8008ae0:	4681      	mov	r9, r0
 8008ae2:	f7ff ff49 	bl	8008978 <__b2d>
 8008ae6:	460f      	mov	r7, r1
 8008ae8:	4604      	mov	r4, r0
 8008aea:	460d      	mov	r5, r1
 8008aec:	4640      	mov	r0, r8
 8008aee:	a901      	add	r1, sp, #4
 8008af0:	f7ff ff42 	bl	8008978 <__b2d>
 8008af4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008af8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008afc:	468b      	mov	fp, r1
 8008afe:	eba3 0c02 	sub.w	ip, r3, r2
 8008b02:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008b06:	1a9b      	subs	r3, r3, r2
 8008b08:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	bfd5      	itete	le
 8008b10:	460a      	movle	r2, r1
 8008b12:	462a      	movgt	r2, r5
 8008b14:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008b18:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008b1c:	bfd8      	it	le
 8008b1e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008b22:	465b      	mov	r3, fp
 8008b24:	4602      	mov	r2, r0
 8008b26:	4639      	mov	r1, r7
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f7fa f89d 	bl	8002c68 <__aeabi_ddiv>
 8008b2e:	b003      	add	sp, #12
 8008b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b34 <__copybits>:
 8008b34:	3901      	subs	r1, #1
 8008b36:	b570      	push	{r4, r5, r6, lr}
 8008b38:	1149      	asrs	r1, r1, #5
 8008b3a:	6914      	ldr	r4, [r2, #16]
 8008b3c:	3101      	adds	r1, #1
 8008b3e:	f102 0314 	add.w	r3, r2, #20
 8008b42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008b46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008b4a:	1f05      	subs	r5, r0, #4
 8008b4c:	42a3      	cmp	r3, r4
 8008b4e:	d30c      	bcc.n	8008b6a <__copybits+0x36>
 8008b50:	1aa3      	subs	r3, r4, r2
 8008b52:	3b11      	subs	r3, #17
 8008b54:	f023 0303 	bic.w	r3, r3, #3
 8008b58:	3211      	adds	r2, #17
 8008b5a:	42a2      	cmp	r2, r4
 8008b5c:	bf88      	it	hi
 8008b5e:	2300      	movhi	r3, #0
 8008b60:	4418      	add	r0, r3
 8008b62:	2300      	movs	r3, #0
 8008b64:	4288      	cmp	r0, r1
 8008b66:	d305      	bcc.n	8008b74 <__copybits+0x40>
 8008b68:	bd70      	pop	{r4, r5, r6, pc}
 8008b6a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008b6e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008b72:	e7eb      	b.n	8008b4c <__copybits+0x18>
 8008b74:	f840 3b04 	str.w	r3, [r0], #4
 8008b78:	e7f4      	b.n	8008b64 <__copybits+0x30>

08008b7a <__any_on>:
 8008b7a:	f100 0214 	add.w	r2, r0, #20
 8008b7e:	6900      	ldr	r0, [r0, #16]
 8008b80:	114b      	asrs	r3, r1, #5
 8008b82:	4298      	cmp	r0, r3
 8008b84:	b510      	push	{r4, lr}
 8008b86:	db11      	blt.n	8008bac <__any_on+0x32>
 8008b88:	dd0a      	ble.n	8008ba0 <__any_on+0x26>
 8008b8a:	f011 011f 	ands.w	r1, r1, #31
 8008b8e:	d007      	beq.n	8008ba0 <__any_on+0x26>
 8008b90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008b94:	fa24 f001 	lsr.w	r0, r4, r1
 8008b98:	fa00 f101 	lsl.w	r1, r0, r1
 8008b9c:	428c      	cmp	r4, r1
 8008b9e:	d10b      	bne.n	8008bb8 <__any_on+0x3e>
 8008ba0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d803      	bhi.n	8008bb0 <__any_on+0x36>
 8008ba8:	2000      	movs	r0, #0
 8008baa:	bd10      	pop	{r4, pc}
 8008bac:	4603      	mov	r3, r0
 8008bae:	e7f7      	b.n	8008ba0 <__any_on+0x26>
 8008bb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008bb4:	2900      	cmp	r1, #0
 8008bb6:	d0f5      	beq.n	8008ba4 <__any_on+0x2a>
 8008bb8:	2001      	movs	r0, #1
 8008bba:	e7f6      	b.n	8008baa <__any_on+0x30>

08008bbc <_calloc_r>:
 8008bbc:	b570      	push	{r4, r5, r6, lr}
 8008bbe:	fba1 5402 	umull	r5, r4, r1, r2
 8008bc2:	b934      	cbnz	r4, 8008bd2 <_calloc_r+0x16>
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	f000 f875 	bl	8008cb4 <_malloc_r>
 8008bca:	4606      	mov	r6, r0
 8008bcc:	b928      	cbnz	r0, 8008bda <_calloc_r+0x1e>
 8008bce:	4630      	mov	r0, r6
 8008bd0:	bd70      	pop	{r4, r5, r6, pc}
 8008bd2:	220c      	movs	r2, #12
 8008bd4:	2600      	movs	r6, #0
 8008bd6:	6002      	str	r2, [r0, #0]
 8008bd8:	e7f9      	b.n	8008bce <_calloc_r+0x12>
 8008bda:	462a      	mov	r2, r5
 8008bdc:	4621      	mov	r1, r4
 8008bde:	f7fc fbe7 	bl	80053b0 <memset>
 8008be2:	e7f4      	b.n	8008bce <_calloc_r+0x12>

08008be4 <_free_r>:
 8008be4:	b538      	push	{r3, r4, r5, lr}
 8008be6:	4605      	mov	r5, r0
 8008be8:	2900      	cmp	r1, #0
 8008bea:	d040      	beq.n	8008c6e <_free_r+0x8a>
 8008bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bf0:	1f0c      	subs	r4, r1, #4
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	bfb8      	it	lt
 8008bf6:	18e4      	addlt	r4, r4, r3
 8008bf8:	f000 faae 	bl	8009158 <__malloc_lock>
 8008bfc:	4a1c      	ldr	r2, [pc, #112]	; (8008c70 <_free_r+0x8c>)
 8008bfe:	6813      	ldr	r3, [r2, #0]
 8008c00:	b933      	cbnz	r3, 8008c10 <_free_r+0x2c>
 8008c02:	6063      	str	r3, [r4, #4]
 8008c04:	6014      	str	r4, [r2, #0]
 8008c06:	4628      	mov	r0, r5
 8008c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c0c:	f000 baaa 	b.w	8009164 <__malloc_unlock>
 8008c10:	42a3      	cmp	r3, r4
 8008c12:	d908      	bls.n	8008c26 <_free_r+0x42>
 8008c14:	6820      	ldr	r0, [r4, #0]
 8008c16:	1821      	adds	r1, r4, r0
 8008c18:	428b      	cmp	r3, r1
 8008c1a:	bf01      	itttt	eq
 8008c1c:	6819      	ldreq	r1, [r3, #0]
 8008c1e:	685b      	ldreq	r3, [r3, #4]
 8008c20:	1809      	addeq	r1, r1, r0
 8008c22:	6021      	streq	r1, [r4, #0]
 8008c24:	e7ed      	b.n	8008c02 <_free_r+0x1e>
 8008c26:	461a      	mov	r2, r3
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	b10b      	cbz	r3, 8008c30 <_free_r+0x4c>
 8008c2c:	42a3      	cmp	r3, r4
 8008c2e:	d9fa      	bls.n	8008c26 <_free_r+0x42>
 8008c30:	6811      	ldr	r1, [r2, #0]
 8008c32:	1850      	adds	r0, r2, r1
 8008c34:	42a0      	cmp	r0, r4
 8008c36:	d10b      	bne.n	8008c50 <_free_r+0x6c>
 8008c38:	6820      	ldr	r0, [r4, #0]
 8008c3a:	4401      	add	r1, r0
 8008c3c:	1850      	adds	r0, r2, r1
 8008c3e:	4283      	cmp	r3, r0
 8008c40:	6011      	str	r1, [r2, #0]
 8008c42:	d1e0      	bne.n	8008c06 <_free_r+0x22>
 8008c44:	6818      	ldr	r0, [r3, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	4401      	add	r1, r0
 8008c4a:	6011      	str	r1, [r2, #0]
 8008c4c:	6053      	str	r3, [r2, #4]
 8008c4e:	e7da      	b.n	8008c06 <_free_r+0x22>
 8008c50:	d902      	bls.n	8008c58 <_free_r+0x74>
 8008c52:	230c      	movs	r3, #12
 8008c54:	602b      	str	r3, [r5, #0]
 8008c56:	e7d6      	b.n	8008c06 <_free_r+0x22>
 8008c58:	6820      	ldr	r0, [r4, #0]
 8008c5a:	1821      	adds	r1, r4, r0
 8008c5c:	428b      	cmp	r3, r1
 8008c5e:	bf01      	itttt	eq
 8008c60:	6819      	ldreq	r1, [r3, #0]
 8008c62:	685b      	ldreq	r3, [r3, #4]
 8008c64:	1809      	addeq	r1, r1, r0
 8008c66:	6021      	streq	r1, [r4, #0]
 8008c68:	6063      	str	r3, [r4, #4]
 8008c6a:	6054      	str	r4, [r2, #4]
 8008c6c:	e7cb      	b.n	8008c06 <_free_r+0x22>
 8008c6e:	bd38      	pop	{r3, r4, r5, pc}
 8008c70:	20000878 	.word	0x20000878

08008c74 <sbrk_aligned>:
 8008c74:	b570      	push	{r4, r5, r6, lr}
 8008c76:	4e0e      	ldr	r6, [pc, #56]	; (8008cb0 <sbrk_aligned+0x3c>)
 8008c78:	460c      	mov	r4, r1
 8008c7a:	6831      	ldr	r1, [r6, #0]
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	b911      	cbnz	r1, 8008c86 <sbrk_aligned+0x12>
 8008c80:	f000 f9ee 	bl	8009060 <_sbrk_r>
 8008c84:	6030      	str	r0, [r6, #0]
 8008c86:	4621      	mov	r1, r4
 8008c88:	4628      	mov	r0, r5
 8008c8a:	f000 f9e9 	bl	8009060 <_sbrk_r>
 8008c8e:	1c43      	adds	r3, r0, #1
 8008c90:	d00a      	beq.n	8008ca8 <sbrk_aligned+0x34>
 8008c92:	1cc4      	adds	r4, r0, #3
 8008c94:	f024 0403 	bic.w	r4, r4, #3
 8008c98:	42a0      	cmp	r0, r4
 8008c9a:	d007      	beq.n	8008cac <sbrk_aligned+0x38>
 8008c9c:	1a21      	subs	r1, r4, r0
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	f000 f9de 	bl	8009060 <_sbrk_r>
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	d101      	bne.n	8008cac <sbrk_aligned+0x38>
 8008ca8:	f04f 34ff 	mov.w	r4, #4294967295
 8008cac:	4620      	mov	r0, r4
 8008cae:	bd70      	pop	{r4, r5, r6, pc}
 8008cb0:	2000087c 	.word	0x2000087c

08008cb4 <_malloc_r>:
 8008cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb8:	1ccd      	adds	r5, r1, #3
 8008cba:	f025 0503 	bic.w	r5, r5, #3
 8008cbe:	3508      	adds	r5, #8
 8008cc0:	2d0c      	cmp	r5, #12
 8008cc2:	bf38      	it	cc
 8008cc4:	250c      	movcc	r5, #12
 8008cc6:	2d00      	cmp	r5, #0
 8008cc8:	4607      	mov	r7, r0
 8008cca:	db01      	blt.n	8008cd0 <_malloc_r+0x1c>
 8008ccc:	42a9      	cmp	r1, r5
 8008cce:	d905      	bls.n	8008cdc <_malloc_r+0x28>
 8008cd0:	230c      	movs	r3, #12
 8008cd2:	2600      	movs	r6, #0
 8008cd4:	603b      	str	r3, [r7, #0]
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cdc:	4e2e      	ldr	r6, [pc, #184]	; (8008d98 <_malloc_r+0xe4>)
 8008cde:	f000 fa3b 	bl	8009158 <__malloc_lock>
 8008ce2:	6833      	ldr	r3, [r6, #0]
 8008ce4:	461c      	mov	r4, r3
 8008ce6:	bb34      	cbnz	r4, 8008d36 <_malloc_r+0x82>
 8008ce8:	4629      	mov	r1, r5
 8008cea:	4638      	mov	r0, r7
 8008cec:	f7ff ffc2 	bl	8008c74 <sbrk_aligned>
 8008cf0:	1c43      	adds	r3, r0, #1
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	d14d      	bne.n	8008d92 <_malloc_r+0xde>
 8008cf6:	6834      	ldr	r4, [r6, #0]
 8008cf8:	4626      	mov	r6, r4
 8008cfa:	2e00      	cmp	r6, #0
 8008cfc:	d140      	bne.n	8008d80 <_malloc_r+0xcc>
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	4631      	mov	r1, r6
 8008d02:	4638      	mov	r0, r7
 8008d04:	eb04 0803 	add.w	r8, r4, r3
 8008d08:	f000 f9aa 	bl	8009060 <_sbrk_r>
 8008d0c:	4580      	cmp	r8, r0
 8008d0e:	d13a      	bne.n	8008d86 <_malloc_r+0xd2>
 8008d10:	6821      	ldr	r1, [r4, #0]
 8008d12:	3503      	adds	r5, #3
 8008d14:	1a6d      	subs	r5, r5, r1
 8008d16:	f025 0503 	bic.w	r5, r5, #3
 8008d1a:	3508      	adds	r5, #8
 8008d1c:	2d0c      	cmp	r5, #12
 8008d1e:	bf38      	it	cc
 8008d20:	250c      	movcc	r5, #12
 8008d22:	4638      	mov	r0, r7
 8008d24:	4629      	mov	r1, r5
 8008d26:	f7ff ffa5 	bl	8008c74 <sbrk_aligned>
 8008d2a:	3001      	adds	r0, #1
 8008d2c:	d02b      	beq.n	8008d86 <_malloc_r+0xd2>
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	442b      	add	r3, r5
 8008d32:	6023      	str	r3, [r4, #0]
 8008d34:	e00e      	b.n	8008d54 <_malloc_r+0xa0>
 8008d36:	6822      	ldr	r2, [r4, #0]
 8008d38:	1b52      	subs	r2, r2, r5
 8008d3a:	d41e      	bmi.n	8008d7a <_malloc_r+0xc6>
 8008d3c:	2a0b      	cmp	r2, #11
 8008d3e:	d916      	bls.n	8008d6e <_malloc_r+0xba>
 8008d40:	1961      	adds	r1, r4, r5
 8008d42:	42a3      	cmp	r3, r4
 8008d44:	6025      	str	r5, [r4, #0]
 8008d46:	bf18      	it	ne
 8008d48:	6059      	strne	r1, [r3, #4]
 8008d4a:	6863      	ldr	r3, [r4, #4]
 8008d4c:	bf08      	it	eq
 8008d4e:	6031      	streq	r1, [r6, #0]
 8008d50:	5162      	str	r2, [r4, r5]
 8008d52:	604b      	str	r3, [r1, #4]
 8008d54:	4638      	mov	r0, r7
 8008d56:	f104 060b 	add.w	r6, r4, #11
 8008d5a:	f000 fa03 	bl	8009164 <__malloc_unlock>
 8008d5e:	f026 0607 	bic.w	r6, r6, #7
 8008d62:	1d23      	adds	r3, r4, #4
 8008d64:	1af2      	subs	r2, r6, r3
 8008d66:	d0b6      	beq.n	8008cd6 <_malloc_r+0x22>
 8008d68:	1b9b      	subs	r3, r3, r6
 8008d6a:	50a3      	str	r3, [r4, r2]
 8008d6c:	e7b3      	b.n	8008cd6 <_malloc_r+0x22>
 8008d6e:	6862      	ldr	r2, [r4, #4]
 8008d70:	42a3      	cmp	r3, r4
 8008d72:	bf0c      	ite	eq
 8008d74:	6032      	streq	r2, [r6, #0]
 8008d76:	605a      	strne	r2, [r3, #4]
 8008d78:	e7ec      	b.n	8008d54 <_malloc_r+0xa0>
 8008d7a:	4623      	mov	r3, r4
 8008d7c:	6864      	ldr	r4, [r4, #4]
 8008d7e:	e7b2      	b.n	8008ce6 <_malloc_r+0x32>
 8008d80:	4634      	mov	r4, r6
 8008d82:	6876      	ldr	r6, [r6, #4]
 8008d84:	e7b9      	b.n	8008cfa <_malloc_r+0x46>
 8008d86:	230c      	movs	r3, #12
 8008d88:	4638      	mov	r0, r7
 8008d8a:	603b      	str	r3, [r7, #0]
 8008d8c:	f000 f9ea 	bl	8009164 <__malloc_unlock>
 8008d90:	e7a1      	b.n	8008cd6 <_malloc_r+0x22>
 8008d92:	6025      	str	r5, [r4, #0]
 8008d94:	e7de      	b.n	8008d54 <_malloc_r+0xa0>
 8008d96:	bf00      	nop
 8008d98:	20000878 	.word	0x20000878

08008d9c <__ssputs_r>:
 8008d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da0:	688e      	ldr	r6, [r1, #8]
 8008da2:	4682      	mov	sl, r0
 8008da4:	429e      	cmp	r6, r3
 8008da6:	460c      	mov	r4, r1
 8008da8:	4690      	mov	r8, r2
 8008daa:	461f      	mov	r7, r3
 8008dac:	d838      	bhi.n	8008e20 <__ssputs_r+0x84>
 8008dae:	898a      	ldrh	r2, [r1, #12]
 8008db0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008db4:	d032      	beq.n	8008e1c <__ssputs_r+0x80>
 8008db6:	6825      	ldr	r5, [r4, #0]
 8008db8:	6909      	ldr	r1, [r1, #16]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	eba5 0901 	sub.w	r9, r5, r1
 8008dc0:	6965      	ldr	r5, [r4, #20]
 8008dc2:	444b      	add	r3, r9
 8008dc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dcc:	106d      	asrs	r5, r5, #1
 8008dce:	429d      	cmp	r5, r3
 8008dd0:	bf38      	it	cc
 8008dd2:	461d      	movcc	r5, r3
 8008dd4:	0553      	lsls	r3, r2, #21
 8008dd6:	d531      	bpl.n	8008e3c <__ssputs_r+0xa0>
 8008dd8:	4629      	mov	r1, r5
 8008dda:	f7ff ff6b 	bl	8008cb4 <_malloc_r>
 8008dde:	4606      	mov	r6, r0
 8008de0:	b950      	cbnz	r0, 8008df8 <__ssputs_r+0x5c>
 8008de2:	230c      	movs	r3, #12
 8008de4:	f04f 30ff 	mov.w	r0, #4294967295
 8008de8:	f8ca 3000 	str.w	r3, [sl]
 8008dec:	89a3      	ldrh	r3, [r4, #12]
 8008dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008df2:	81a3      	strh	r3, [r4, #12]
 8008df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df8:	464a      	mov	r2, r9
 8008dfa:	6921      	ldr	r1, [r4, #16]
 8008dfc:	f7ff fa18 	bl	8008230 <memcpy>
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e0a:	81a3      	strh	r3, [r4, #12]
 8008e0c:	6126      	str	r6, [r4, #16]
 8008e0e:	444e      	add	r6, r9
 8008e10:	6026      	str	r6, [r4, #0]
 8008e12:	463e      	mov	r6, r7
 8008e14:	6165      	str	r5, [r4, #20]
 8008e16:	eba5 0509 	sub.w	r5, r5, r9
 8008e1a:	60a5      	str	r5, [r4, #8]
 8008e1c:	42be      	cmp	r6, r7
 8008e1e:	d900      	bls.n	8008e22 <__ssputs_r+0x86>
 8008e20:	463e      	mov	r6, r7
 8008e22:	4632      	mov	r2, r6
 8008e24:	4641      	mov	r1, r8
 8008e26:	6820      	ldr	r0, [r4, #0]
 8008e28:	f000 f97c 	bl	8009124 <memmove>
 8008e2c:	68a3      	ldr	r3, [r4, #8]
 8008e2e:	2000      	movs	r0, #0
 8008e30:	1b9b      	subs	r3, r3, r6
 8008e32:	60a3      	str	r3, [r4, #8]
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	4433      	add	r3, r6
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	e7db      	b.n	8008df4 <__ssputs_r+0x58>
 8008e3c:	462a      	mov	r2, r5
 8008e3e:	f000 f997 	bl	8009170 <_realloc_r>
 8008e42:	4606      	mov	r6, r0
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d1e1      	bne.n	8008e0c <__ssputs_r+0x70>
 8008e48:	4650      	mov	r0, sl
 8008e4a:	6921      	ldr	r1, [r4, #16]
 8008e4c:	f7ff feca 	bl	8008be4 <_free_r>
 8008e50:	e7c7      	b.n	8008de2 <__ssputs_r+0x46>
	...

08008e54 <_svfiprintf_r>:
 8008e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e58:	4698      	mov	r8, r3
 8008e5a:	898b      	ldrh	r3, [r1, #12]
 8008e5c:	4607      	mov	r7, r0
 8008e5e:	061b      	lsls	r3, r3, #24
 8008e60:	460d      	mov	r5, r1
 8008e62:	4614      	mov	r4, r2
 8008e64:	b09d      	sub	sp, #116	; 0x74
 8008e66:	d50e      	bpl.n	8008e86 <_svfiprintf_r+0x32>
 8008e68:	690b      	ldr	r3, [r1, #16]
 8008e6a:	b963      	cbnz	r3, 8008e86 <_svfiprintf_r+0x32>
 8008e6c:	2140      	movs	r1, #64	; 0x40
 8008e6e:	f7ff ff21 	bl	8008cb4 <_malloc_r>
 8008e72:	6028      	str	r0, [r5, #0]
 8008e74:	6128      	str	r0, [r5, #16]
 8008e76:	b920      	cbnz	r0, 8008e82 <_svfiprintf_r+0x2e>
 8008e78:	230c      	movs	r3, #12
 8008e7a:	603b      	str	r3, [r7, #0]
 8008e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e80:	e0d1      	b.n	8009026 <_svfiprintf_r+0x1d2>
 8008e82:	2340      	movs	r3, #64	; 0x40
 8008e84:	616b      	str	r3, [r5, #20]
 8008e86:	2300      	movs	r3, #0
 8008e88:	9309      	str	r3, [sp, #36]	; 0x24
 8008e8a:	2320      	movs	r3, #32
 8008e8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e90:	2330      	movs	r3, #48	; 0x30
 8008e92:	f04f 0901 	mov.w	r9, #1
 8008e96:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009040 <_svfiprintf_r+0x1ec>
 8008e9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ea2:	4623      	mov	r3, r4
 8008ea4:	469a      	mov	sl, r3
 8008ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eaa:	b10a      	cbz	r2, 8008eb0 <_svfiprintf_r+0x5c>
 8008eac:	2a25      	cmp	r2, #37	; 0x25
 8008eae:	d1f9      	bne.n	8008ea4 <_svfiprintf_r+0x50>
 8008eb0:	ebba 0b04 	subs.w	fp, sl, r4
 8008eb4:	d00b      	beq.n	8008ece <_svfiprintf_r+0x7a>
 8008eb6:	465b      	mov	r3, fp
 8008eb8:	4622      	mov	r2, r4
 8008eba:	4629      	mov	r1, r5
 8008ebc:	4638      	mov	r0, r7
 8008ebe:	f7ff ff6d 	bl	8008d9c <__ssputs_r>
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	f000 80aa 	beq.w	800901c <_svfiprintf_r+0x1c8>
 8008ec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eca:	445a      	add	r2, fp
 8008ecc:	9209      	str	r2, [sp, #36]	; 0x24
 8008ece:	f89a 3000 	ldrb.w	r3, [sl]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 80a2 	beq.w	800901c <_svfiprintf_r+0x1c8>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f04f 32ff 	mov.w	r2, #4294967295
 8008ede:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ee2:	f10a 0a01 	add.w	sl, sl, #1
 8008ee6:	9304      	str	r3, [sp, #16]
 8008ee8:	9307      	str	r3, [sp, #28]
 8008eea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008eee:	931a      	str	r3, [sp, #104]	; 0x68
 8008ef0:	4654      	mov	r4, sl
 8008ef2:	2205      	movs	r2, #5
 8008ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef8:	4851      	ldr	r0, [pc, #324]	; (8009040 <_svfiprintf_r+0x1ec>)
 8008efa:	f7ff f98b 	bl	8008214 <memchr>
 8008efe:	9a04      	ldr	r2, [sp, #16]
 8008f00:	b9d8      	cbnz	r0, 8008f3a <_svfiprintf_r+0xe6>
 8008f02:	06d0      	lsls	r0, r2, #27
 8008f04:	bf44      	itt	mi
 8008f06:	2320      	movmi	r3, #32
 8008f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f0c:	0711      	lsls	r1, r2, #28
 8008f0e:	bf44      	itt	mi
 8008f10:	232b      	movmi	r3, #43	; 0x2b
 8008f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f16:	f89a 3000 	ldrb.w	r3, [sl]
 8008f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8008f1c:	d015      	beq.n	8008f4a <_svfiprintf_r+0xf6>
 8008f1e:	4654      	mov	r4, sl
 8008f20:	2000      	movs	r0, #0
 8008f22:	f04f 0c0a 	mov.w	ip, #10
 8008f26:	9a07      	ldr	r2, [sp, #28]
 8008f28:	4621      	mov	r1, r4
 8008f2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f2e:	3b30      	subs	r3, #48	; 0x30
 8008f30:	2b09      	cmp	r3, #9
 8008f32:	d94e      	bls.n	8008fd2 <_svfiprintf_r+0x17e>
 8008f34:	b1b0      	cbz	r0, 8008f64 <_svfiprintf_r+0x110>
 8008f36:	9207      	str	r2, [sp, #28]
 8008f38:	e014      	b.n	8008f64 <_svfiprintf_r+0x110>
 8008f3a:	eba0 0308 	sub.w	r3, r0, r8
 8008f3e:	fa09 f303 	lsl.w	r3, r9, r3
 8008f42:	4313      	orrs	r3, r2
 8008f44:	46a2      	mov	sl, r4
 8008f46:	9304      	str	r3, [sp, #16]
 8008f48:	e7d2      	b.n	8008ef0 <_svfiprintf_r+0x9c>
 8008f4a:	9b03      	ldr	r3, [sp, #12]
 8008f4c:	1d19      	adds	r1, r3, #4
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	9103      	str	r1, [sp, #12]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	bfbb      	ittet	lt
 8008f56:	425b      	neglt	r3, r3
 8008f58:	f042 0202 	orrlt.w	r2, r2, #2
 8008f5c:	9307      	strge	r3, [sp, #28]
 8008f5e:	9307      	strlt	r3, [sp, #28]
 8008f60:	bfb8      	it	lt
 8008f62:	9204      	strlt	r2, [sp, #16]
 8008f64:	7823      	ldrb	r3, [r4, #0]
 8008f66:	2b2e      	cmp	r3, #46	; 0x2e
 8008f68:	d10c      	bne.n	8008f84 <_svfiprintf_r+0x130>
 8008f6a:	7863      	ldrb	r3, [r4, #1]
 8008f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f6e:	d135      	bne.n	8008fdc <_svfiprintf_r+0x188>
 8008f70:	9b03      	ldr	r3, [sp, #12]
 8008f72:	3402      	adds	r4, #2
 8008f74:	1d1a      	adds	r2, r3, #4
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	9203      	str	r2, [sp, #12]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	bfb8      	it	lt
 8008f7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f82:	9305      	str	r3, [sp, #20]
 8008f84:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009044 <_svfiprintf_r+0x1f0>
 8008f88:	2203      	movs	r2, #3
 8008f8a:	4650      	mov	r0, sl
 8008f8c:	7821      	ldrb	r1, [r4, #0]
 8008f8e:	f7ff f941 	bl	8008214 <memchr>
 8008f92:	b140      	cbz	r0, 8008fa6 <_svfiprintf_r+0x152>
 8008f94:	2340      	movs	r3, #64	; 0x40
 8008f96:	eba0 000a 	sub.w	r0, r0, sl
 8008f9a:	fa03 f000 	lsl.w	r0, r3, r0
 8008f9e:	9b04      	ldr	r3, [sp, #16]
 8008fa0:	3401      	adds	r4, #1
 8008fa2:	4303      	orrs	r3, r0
 8008fa4:	9304      	str	r3, [sp, #16]
 8008fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008faa:	2206      	movs	r2, #6
 8008fac:	4826      	ldr	r0, [pc, #152]	; (8009048 <_svfiprintf_r+0x1f4>)
 8008fae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fb2:	f7ff f92f 	bl	8008214 <memchr>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d038      	beq.n	800902c <_svfiprintf_r+0x1d8>
 8008fba:	4b24      	ldr	r3, [pc, #144]	; (800904c <_svfiprintf_r+0x1f8>)
 8008fbc:	bb1b      	cbnz	r3, 8009006 <_svfiprintf_r+0x1b2>
 8008fbe:	9b03      	ldr	r3, [sp, #12]
 8008fc0:	3307      	adds	r3, #7
 8008fc2:	f023 0307 	bic.w	r3, r3, #7
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	9303      	str	r3, [sp, #12]
 8008fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fcc:	4433      	add	r3, r6
 8008fce:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd0:	e767      	b.n	8008ea2 <_svfiprintf_r+0x4e>
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	2001      	movs	r0, #1
 8008fd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fda:	e7a5      	b.n	8008f28 <_svfiprintf_r+0xd4>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	f04f 0c0a 	mov.w	ip, #10
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	3401      	adds	r4, #1
 8008fe6:	9305      	str	r3, [sp, #20]
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fee:	3a30      	subs	r2, #48	; 0x30
 8008ff0:	2a09      	cmp	r2, #9
 8008ff2:	d903      	bls.n	8008ffc <_svfiprintf_r+0x1a8>
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d0c5      	beq.n	8008f84 <_svfiprintf_r+0x130>
 8008ff8:	9105      	str	r1, [sp, #20]
 8008ffa:	e7c3      	b.n	8008f84 <_svfiprintf_r+0x130>
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	2301      	movs	r3, #1
 8009000:	fb0c 2101 	mla	r1, ip, r1, r2
 8009004:	e7f0      	b.n	8008fe8 <_svfiprintf_r+0x194>
 8009006:	ab03      	add	r3, sp, #12
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	462a      	mov	r2, r5
 800900c:	4638      	mov	r0, r7
 800900e:	4b10      	ldr	r3, [pc, #64]	; (8009050 <_svfiprintf_r+0x1fc>)
 8009010:	a904      	add	r1, sp, #16
 8009012:	f7fc fa73 	bl	80054fc <_printf_float>
 8009016:	1c42      	adds	r2, r0, #1
 8009018:	4606      	mov	r6, r0
 800901a:	d1d6      	bne.n	8008fca <_svfiprintf_r+0x176>
 800901c:	89ab      	ldrh	r3, [r5, #12]
 800901e:	065b      	lsls	r3, r3, #25
 8009020:	f53f af2c 	bmi.w	8008e7c <_svfiprintf_r+0x28>
 8009024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009026:	b01d      	add	sp, #116	; 0x74
 8009028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902c:	ab03      	add	r3, sp, #12
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	462a      	mov	r2, r5
 8009032:	4638      	mov	r0, r7
 8009034:	4b06      	ldr	r3, [pc, #24]	; (8009050 <_svfiprintf_r+0x1fc>)
 8009036:	a904      	add	r1, sp, #16
 8009038:	f7fc fcfc 	bl	8005a34 <_printf_i>
 800903c:	e7eb      	b.n	8009016 <_svfiprintf_r+0x1c2>
 800903e:	bf00      	nop
 8009040:	0801ba34 	.word	0x0801ba34
 8009044:	0801ba3a 	.word	0x0801ba3a
 8009048:	0801ba3e 	.word	0x0801ba3e
 800904c:	080054fd 	.word	0x080054fd
 8009050:	08008d9d 	.word	0x08008d9d

08009054 <nan>:
 8009054:	2000      	movs	r0, #0
 8009056:	4901      	ldr	r1, [pc, #4]	; (800905c <nan+0x8>)
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	7ff80000 	.word	0x7ff80000

08009060 <_sbrk_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	2300      	movs	r3, #0
 8009064:	4d05      	ldr	r5, [pc, #20]	; (800907c <_sbrk_r+0x1c>)
 8009066:	4604      	mov	r4, r0
 8009068:	4608      	mov	r0, r1
 800906a:	602b      	str	r3, [r5, #0]
 800906c:	f7f9 fae8 	bl	8002640 <_sbrk>
 8009070:	1c43      	adds	r3, r0, #1
 8009072:	d102      	bne.n	800907a <_sbrk_r+0x1a>
 8009074:	682b      	ldr	r3, [r5, #0]
 8009076:	b103      	cbz	r3, 800907a <_sbrk_r+0x1a>
 8009078:	6023      	str	r3, [r4, #0]
 800907a:	bd38      	pop	{r3, r4, r5, pc}
 800907c:	20000880 	.word	0x20000880

08009080 <strncmp>:
 8009080:	4603      	mov	r3, r0
 8009082:	b510      	push	{r4, lr}
 8009084:	b172      	cbz	r2, 80090a4 <strncmp+0x24>
 8009086:	3901      	subs	r1, #1
 8009088:	1884      	adds	r4, r0, r2
 800908a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800908e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009092:	4290      	cmp	r0, r2
 8009094:	d101      	bne.n	800909a <strncmp+0x1a>
 8009096:	42a3      	cmp	r3, r4
 8009098:	d101      	bne.n	800909e <strncmp+0x1e>
 800909a:	1a80      	subs	r0, r0, r2
 800909c:	bd10      	pop	{r4, pc}
 800909e:	2800      	cmp	r0, #0
 80090a0:	d1f3      	bne.n	800908a <strncmp+0xa>
 80090a2:	e7fa      	b.n	800909a <strncmp+0x1a>
 80090a4:	4610      	mov	r0, r2
 80090a6:	e7f9      	b.n	800909c <strncmp+0x1c>

080090a8 <__ascii_wctomb>:
 80090a8:	4603      	mov	r3, r0
 80090aa:	4608      	mov	r0, r1
 80090ac:	b141      	cbz	r1, 80090c0 <__ascii_wctomb+0x18>
 80090ae:	2aff      	cmp	r2, #255	; 0xff
 80090b0:	d904      	bls.n	80090bc <__ascii_wctomb+0x14>
 80090b2:	228a      	movs	r2, #138	; 0x8a
 80090b4:	f04f 30ff 	mov.w	r0, #4294967295
 80090b8:	601a      	str	r2, [r3, #0]
 80090ba:	4770      	bx	lr
 80090bc:	2001      	movs	r0, #1
 80090be:	700a      	strb	r2, [r1, #0]
 80090c0:	4770      	bx	lr
	...

080090c4 <__assert_func>:
 80090c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090c6:	4614      	mov	r4, r2
 80090c8:	461a      	mov	r2, r3
 80090ca:	4b09      	ldr	r3, [pc, #36]	; (80090f0 <__assert_func+0x2c>)
 80090cc:	4605      	mov	r5, r0
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68d8      	ldr	r0, [r3, #12]
 80090d2:	b14c      	cbz	r4, 80090e8 <__assert_func+0x24>
 80090d4:	4b07      	ldr	r3, [pc, #28]	; (80090f4 <__assert_func+0x30>)
 80090d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090da:	9100      	str	r1, [sp, #0]
 80090dc:	462b      	mov	r3, r5
 80090de:	4906      	ldr	r1, [pc, #24]	; (80090f8 <__assert_func+0x34>)
 80090e0:	f000 f80e 	bl	8009100 <fiprintf>
 80090e4:	f000 fa8a 	bl	80095fc <abort>
 80090e8:	4b04      	ldr	r3, [pc, #16]	; (80090fc <__assert_func+0x38>)
 80090ea:	461c      	mov	r4, r3
 80090ec:	e7f3      	b.n	80090d6 <__assert_func+0x12>
 80090ee:	bf00      	nop
 80090f0:	2000000c 	.word	0x2000000c
 80090f4:	0801ba45 	.word	0x0801ba45
 80090f8:	0801ba52 	.word	0x0801ba52
 80090fc:	0801b5f0 	.word	0x0801b5f0

08009100 <fiprintf>:
 8009100:	b40e      	push	{r1, r2, r3}
 8009102:	b503      	push	{r0, r1, lr}
 8009104:	4601      	mov	r1, r0
 8009106:	ab03      	add	r3, sp, #12
 8009108:	4805      	ldr	r0, [pc, #20]	; (8009120 <fiprintf+0x20>)
 800910a:	f853 2b04 	ldr.w	r2, [r3], #4
 800910e:	6800      	ldr	r0, [r0, #0]
 8009110:	9301      	str	r3, [sp, #4]
 8009112:	f000 f883 	bl	800921c <_vfiprintf_r>
 8009116:	b002      	add	sp, #8
 8009118:	f85d eb04 	ldr.w	lr, [sp], #4
 800911c:	b003      	add	sp, #12
 800911e:	4770      	bx	lr
 8009120:	2000000c 	.word	0x2000000c

08009124 <memmove>:
 8009124:	4288      	cmp	r0, r1
 8009126:	b510      	push	{r4, lr}
 8009128:	eb01 0402 	add.w	r4, r1, r2
 800912c:	d902      	bls.n	8009134 <memmove+0x10>
 800912e:	4284      	cmp	r4, r0
 8009130:	4623      	mov	r3, r4
 8009132:	d807      	bhi.n	8009144 <memmove+0x20>
 8009134:	1e43      	subs	r3, r0, #1
 8009136:	42a1      	cmp	r1, r4
 8009138:	d008      	beq.n	800914c <memmove+0x28>
 800913a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800913e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009142:	e7f8      	b.n	8009136 <memmove+0x12>
 8009144:	4601      	mov	r1, r0
 8009146:	4402      	add	r2, r0
 8009148:	428a      	cmp	r2, r1
 800914a:	d100      	bne.n	800914e <memmove+0x2a>
 800914c:	bd10      	pop	{r4, pc}
 800914e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009156:	e7f7      	b.n	8009148 <memmove+0x24>

08009158 <__malloc_lock>:
 8009158:	4801      	ldr	r0, [pc, #4]	; (8009160 <__malloc_lock+0x8>)
 800915a:	f000 bc0b 	b.w	8009974 <__retarget_lock_acquire_recursive>
 800915e:	bf00      	nop
 8009160:	20000884 	.word	0x20000884

08009164 <__malloc_unlock>:
 8009164:	4801      	ldr	r0, [pc, #4]	; (800916c <__malloc_unlock+0x8>)
 8009166:	f000 bc06 	b.w	8009976 <__retarget_lock_release_recursive>
 800916a:	bf00      	nop
 800916c:	20000884 	.word	0x20000884

08009170 <_realloc_r>:
 8009170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009174:	4680      	mov	r8, r0
 8009176:	4614      	mov	r4, r2
 8009178:	460e      	mov	r6, r1
 800917a:	b921      	cbnz	r1, 8009186 <_realloc_r+0x16>
 800917c:	4611      	mov	r1, r2
 800917e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009182:	f7ff bd97 	b.w	8008cb4 <_malloc_r>
 8009186:	b92a      	cbnz	r2, 8009194 <_realloc_r+0x24>
 8009188:	f7ff fd2c 	bl	8008be4 <_free_r>
 800918c:	4625      	mov	r5, r4
 800918e:	4628      	mov	r0, r5
 8009190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009194:	f000 fc56 	bl	8009a44 <_malloc_usable_size_r>
 8009198:	4284      	cmp	r4, r0
 800919a:	4607      	mov	r7, r0
 800919c:	d802      	bhi.n	80091a4 <_realloc_r+0x34>
 800919e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091a2:	d812      	bhi.n	80091ca <_realloc_r+0x5a>
 80091a4:	4621      	mov	r1, r4
 80091a6:	4640      	mov	r0, r8
 80091a8:	f7ff fd84 	bl	8008cb4 <_malloc_r>
 80091ac:	4605      	mov	r5, r0
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d0ed      	beq.n	800918e <_realloc_r+0x1e>
 80091b2:	42bc      	cmp	r4, r7
 80091b4:	4622      	mov	r2, r4
 80091b6:	4631      	mov	r1, r6
 80091b8:	bf28      	it	cs
 80091ba:	463a      	movcs	r2, r7
 80091bc:	f7ff f838 	bl	8008230 <memcpy>
 80091c0:	4631      	mov	r1, r6
 80091c2:	4640      	mov	r0, r8
 80091c4:	f7ff fd0e 	bl	8008be4 <_free_r>
 80091c8:	e7e1      	b.n	800918e <_realloc_r+0x1e>
 80091ca:	4635      	mov	r5, r6
 80091cc:	e7df      	b.n	800918e <_realloc_r+0x1e>

080091ce <__sfputc_r>:
 80091ce:	6893      	ldr	r3, [r2, #8]
 80091d0:	b410      	push	{r4}
 80091d2:	3b01      	subs	r3, #1
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	6093      	str	r3, [r2, #8]
 80091d8:	da07      	bge.n	80091ea <__sfputc_r+0x1c>
 80091da:	6994      	ldr	r4, [r2, #24]
 80091dc:	42a3      	cmp	r3, r4
 80091de:	db01      	blt.n	80091e4 <__sfputc_r+0x16>
 80091e0:	290a      	cmp	r1, #10
 80091e2:	d102      	bne.n	80091ea <__sfputc_r+0x1c>
 80091e4:	bc10      	pop	{r4}
 80091e6:	f000 b949 	b.w	800947c <__swbuf_r>
 80091ea:	6813      	ldr	r3, [r2, #0]
 80091ec:	1c58      	adds	r0, r3, #1
 80091ee:	6010      	str	r0, [r2, #0]
 80091f0:	7019      	strb	r1, [r3, #0]
 80091f2:	4608      	mov	r0, r1
 80091f4:	bc10      	pop	{r4}
 80091f6:	4770      	bx	lr

080091f8 <__sfputs_r>:
 80091f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fa:	4606      	mov	r6, r0
 80091fc:	460f      	mov	r7, r1
 80091fe:	4614      	mov	r4, r2
 8009200:	18d5      	adds	r5, r2, r3
 8009202:	42ac      	cmp	r4, r5
 8009204:	d101      	bne.n	800920a <__sfputs_r+0x12>
 8009206:	2000      	movs	r0, #0
 8009208:	e007      	b.n	800921a <__sfputs_r+0x22>
 800920a:	463a      	mov	r2, r7
 800920c:	4630      	mov	r0, r6
 800920e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009212:	f7ff ffdc 	bl	80091ce <__sfputc_r>
 8009216:	1c43      	adds	r3, r0, #1
 8009218:	d1f3      	bne.n	8009202 <__sfputs_r+0xa>
 800921a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800921c <_vfiprintf_r>:
 800921c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009220:	460d      	mov	r5, r1
 8009222:	4614      	mov	r4, r2
 8009224:	4698      	mov	r8, r3
 8009226:	4606      	mov	r6, r0
 8009228:	b09d      	sub	sp, #116	; 0x74
 800922a:	b118      	cbz	r0, 8009234 <_vfiprintf_r+0x18>
 800922c:	6983      	ldr	r3, [r0, #24]
 800922e:	b90b      	cbnz	r3, 8009234 <_vfiprintf_r+0x18>
 8009230:	f000 fb02 	bl	8009838 <__sinit>
 8009234:	4b89      	ldr	r3, [pc, #548]	; (800945c <_vfiprintf_r+0x240>)
 8009236:	429d      	cmp	r5, r3
 8009238:	d11b      	bne.n	8009272 <_vfiprintf_r+0x56>
 800923a:	6875      	ldr	r5, [r6, #4]
 800923c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800923e:	07d9      	lsls	r1, r3, #31
 8009240:	d405      	bmi.n	800924e <_vfiprintf_r+0x32>
 8009242:	89ab      	ldrh	r3, [r5, #12]
 8009244:	059a      	lsls	r2, r3, #22
 8009246:	d402      	bmi.n	800924e <_vfiprintf_r+0x32>
 8009248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800924a:	f000 fb93 	bl	8009974 <__retarget_lock_acquire_recursive>
 800924e:	89ab      	ldrh	r3, [r5, #12]
 8009250:	071b      	lsls	r3, r3, #28
 8009252:	d501      	bpl.n	8009258 <_vfiprintf_r+0x3c>
 8009254:	692b      	ldr	r3, [r5, #16]
 8009256:	b9eb      	cbnz	r3, 8009294 <_vfiprintf_r+0x78>
 8009258:	4629      	mov	r1, r5
 800925a:	4630      	mov	r0, r6
 800925c:	f000 f960 	bl	8009520 <__swsetup_r>
 8009260:	b1c0      	cbz	r0, 8009294 <_vfiprintf_r+0x78>
 8009262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009264:	07dc      	lsls	r4, r3, #31
 8009266:	d50e      	bpl.n	8009286 <_vfiprintf_r+0x6a>
 8009268:	f04f 30ff 	mov.w	r0, #4294967295
 800926c:	b01d      	add	sp, #116	; 0x74
 800926e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009272:	4b7b      	ldr	r3, [pc, #492]	; (8009460 <_vfiprintf_r+0x244>)
 8009274:	429d      	cmp	r5, r3
 8009276:	d101      	bne.n	800927c <_vfiprintf_r+0x60>
 8009278:	68b5      	ldr	r5, [r6, #8]
 800927a:	e7df      	b.n	800923c <_vfiprintf_r+0x20>
 800927c:	4b79      	ldr	r3, [pc, #484]	; (8009464 <_vfiprintf_r+0x248>)
 800927e:	429d      	cmp	r5, r3
 8009280:	bf08      	it	eq
 8009282:	68f5      	ldreq	r5, [r6, #12]
 8009284:	e7da      	b.n	800923c <_vfiprintf_r+0x20>
 8009286:	89ab      	ldrh	r3, [r5, #12]
 8009288:	0598      	lsls	r0, r3, #22
 800928a:	d4ed      	bmi.n	8009268 <_vfiprintf_r+0x4c>
 800928c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800928e:	f000 fb72 	bl	8009976 <__retarget_lock_release_recursive>
 8009292:	e7e9      	b.n	8009268 <_vfiprintf_r+0x4c>
 8009294:	2300      	movs	r3, #0
 8009296:	9309      	str	r3, [sp, #36]	; 0x24
 8009298:	2320      	movs	r3, #32
 800929a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800929e:	2330      	movs	r3, #48	; 0x30
 80092a0:	f04f 0901 	mov.w	r9, #1
 80092a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80092a8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009468 <_vfiprintf_r+0x24c>
 80092ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092b0:	4623      	mov	r3, r4
 80092b2:	469a      	mov	sl, r3
 80092b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092b8:	b10a      	cbz	r2, 80092be <_vfiprintf_r+0xa2>
 80092ba:	2a25      	cmp	r2, #37	; 0x25
 80092bc:	d1f9      	bne.n	80092b2 <_vfiprintf_r+0x96>
 80092be:	ebba 0b04 	subs.w	fp, sl, r4
 80092c2:	d00b      	beq.n	80092dc <_vfiprintf_r+0xc0>
 80092c4:	465b      	mov	r3, fp
 80092c6:	4622      	mov	r2, r4
 80092c8:	4629      	mov	r1, r5
 80092ca:	4630      	mov	r0, r6
 80092cc:	f7ff ff94 	bl	80091f8 <__sfputs_r>
 80092d0:	3001      	adds	r0, #1
 80092d2:	f000 80aa 	beq.w	800942a <_vfiprintf_r+0x20e>
 80092d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092d8:	445a      	add	r2, fp
 80092da:	9209      	str	r2, [sp, #36]	; 0x24
 80092dc:	f89a 3000 	ldrb.w	r3, [sl]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 80a2 	beq.w	800942a <_vfiprintf_r+0x20e>
 80092e6:	2300      	movs	r3, #0
 80092e8:	f04f 32ff 	mov.w	r2, #4294967295
 80092ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092f0:	f10a 0a01 	add.w	sl, sl, #1
 80092f4:	9304      	str	r3, [sp, #16]
 80092f6:	9307      	str	r3, [sp, #28]
 80092f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092fc:	931a      	str	r3, [sp, #104]	; 0x68
 80092fe:	4654      	mov	r4, sl
 8009300:	2205      	movs	r2, #5
 8009302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009306:	4858      	ldr	r0, [pc, #352]	; (8009468 <_vfiprintf_r+0x24c>)
 8009308:	f7fe ff84 	bl	8008214 <memchr>
 800930c:	9a04      	ldr	r2, [sp, #16]
 800930e:	b9d8      	cbnz	r0, 8009348 <_vfiprintf_r+0x12c>
 8009310:	06d1      	lsls	r1, r2, #27
 8009312:	bf44      	itt	mi
 8009314:	2320      	movmi	r3, #32
 8009316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800931a:	0713      	lsls	r3, r2, #28
 800931c:	bf44      	itt	mi
 800931e:	232b      	movmi	r3, #43	; 0x2b
 8009320:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009324:	f89a 3000 	ldrb.w	r3, [sl]
 8009328:	2b2a      	cmp	r3, #42	; 0x2a
 800932a:	d015      	beq.n	8009358 <_vfiprintf_r+0x13c>
 800932c:	4654      	mov	r4, sl
 800932e:	2000      	movs	r0, #0
 8009330:	f04f 0c0a 	mov.w	ip, #10
 8009334:	9a07      	ldr	r2, [sp, #28]
 8009336:	4621      	mov	r1, r4
 8009338:	f811 3b01 	ldrb.w	r3, [r1], #1
 800933c:	3b30      	subs	r3, #48	; 0x30
 800933e:	2b09      	cmp	r3, #9
 8009340:	d94e      	bls.n	80093e0 <_vfiprintf_r+0x1c4>
 8009342:	b1b0      	cbz	r0, 8009372 <_vfiprintf_r+0x156>
 8009344:	9207      	str	r2, [sp, #28]
 8009346:	e014      	b.n	8009372 <_vfiprintf_r+0x156>
 8009348:	eba0 0308 	sub.w	r3, r0, r8
 800934c:	fa09 f303 	lsl.w	r3, r9, r3
 8009350:	4313      	orrs	r3, r2
 8009352:	46a2      	mov	sl, r4
 8009354:	9304      	str	r3, [sp, #16]
 8009356:	e7d2      	b.n	80092fe <_vfiprintf_r+0xe2>
 8009358:	9b03      	ldr	r3, [sp, #12]
 800935a:	1d19      	adds	r1, r3, #4
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	9103      	str	r1, [sp, #12]
 8009360:	2b00      	cmp	r3, #0
 8009362:	bfbb      	ittet	lt
 8009364:	425b      	neglt	r3, r3
 8009366:	f042 0202 	orrlt.w	r2, r2, #2
 800936a:	9307      	strge	r3, [sp, #28]
 800936c:	9307      	strlt	r3, [sp, #28]
 800936e:	bfb8      	it	lt
 8009370:	9204      	strlt	r2, [sp, #16]
 8009372:	7823      	ldrb	r3, [r4, #0]
 8009374:	2b2e      	cmp	r3, #46	; 0x2e
 8009376:	d10c      	bne.n	8009392 <_vfiprintf_r+0x176>
 8009378:	7863      	ldrb	r3, [r4, #1]
 800937a:	2b2a      	cmp	r3, #42	; 0x2a
 800937c:	d135      	bne.n	80093ea <_vfiprintf_r+0x1ce>
 800937e:	9b03      	ldr	r3, [sp, #12]
 8009380:	3402      	adds	r4, #2
 8009382:	1d1a      	adds	r2, r3, #4
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	9203      	str	r2, [sp, #12]
 8009388:	2b00      	cmp	r3, #0
 800938a:	bfb8      	it	lt
 800938c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009390:	9305      	str	r3, [sp, #20]
 8009392:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800946c <_vfiprintf_r+0x250>
 8009396:	2203      	movs	r2, #3
 8009398:	4650      	mov	r0, sl
 800939a:	7821      	ldrb	r1, [r4, #0]
 800939c:	f7fe ff3a 	bl	8008214 <memchr>
 80093a0:	b140      	cbz	r0, 80093b4 <_vfiprintf_r+0x198>
 80093a2:	2340      	movs	r3, #64	; 0x40
 80093a4:	eba0 000a 	sub.w	r0, r0, sl
 80093a8:	fa03 f000 	lsl.w	r0, r3, r0
 80093ac:	9b04      	ldr	r3, [sp, #16]
 80093ae:	3401      	adds	r4, #1
 80093b0:	4303      	orrs	r3, r0
 80093b2:	9304      	str	r3, [sp, #16]
 80093b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093b8:	2206      	movs	r2, #6
 80093ba:	482d      	ldr	r0, [pc, #180]	; (8009470 <_vfiprintf_r+0x254>)
 80093bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093c0:	f7fe ff28 	bl	8008214 <memchr>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d03f      	beq.n	8009448 <_vfiprintf_r+0x22c>
 80093c8:	4b2a      	ldr	r3, [pc, #168]	; (8009474 <_vfiprintf_r+0x258>)
 80093ca:	bb1b      	cbnz	r3, 8009414 <_vfiprintf_r+0x1f8>
 80093cc:	9b03      	ldr	r3, [sp, #12]
 80093ce:	3307      	adds	r3, #7
 80093d0:	f023 0307 	bic.w	r3, r3, #7
 80093d4:	3308      	adds	r3, #8
 80093d6:	9303      	str	r3, [sp, #12]
 80093d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093da:	443b      	add	r3, r7
 80093dc:	9309      	str	r3, [sp, #36]	; 0x24
 80093de:	e767      	b.n	80092b0 <_vfiprintf_r+0x94>
 80093e0:	460c      	mov	r4, r1
 80093e2:	2001      	movs	r0, #1
 80093e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80093e8:	e7a5      	b.n	8009336 <_vfiprintf_r+0x11a>
 80093ea:	2300      	movs	r3, #0
 80093ec:	f04f 0c0a 	mov.w	ip, #10
 80093f0:	4619      	mov	r1, r3
 80093f2:	3401      	adds	r4, #1
 80093f4:	9305      	str	r3, [sp, #20]
 80093f6:	4620      	mov	r0, r4
 80093f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093fc:	3a30      	subs	r2, #48	; 0x30
 80093fe:	2a09      	cmp	r2, #9
 8009400:	d903      	bls.n	800940a <_vfiprintf_r+0x1ee>
 8009402:	2b00      	cmp	r3, #0
 8009404:	d0c5      	beq.n	8009392 <_vfiprintf_r+0x176>
 8009406:	9105      	str	r1, [sp, #20]
 8009408:	e7c3      	b.n	8009392 <_vfiprintf_r+0x176>
 800940a:	4604      	mov	r4, r0
 800940c:	2301      	movs	r3, #1
 800940e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009412:	e7f0      	b.n	80093f6 <_vfiprintf_r+0x1da>
 8009414:	ab03      	add	r3, sp, #12
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	462a      	mov	r2, r5
 800941a:	4630      	mov	r0, r6
 800941c:	4b16      	ldr	r3, [pc, #88]	; (8009478 <_vfiprintf_r+0x25c>)
 800941e:	a904      	add	r1, sp, #16
 8009420:	f7fc f86c 	bl	80054fc <_printf_float>
 8009424:	4607      	mov	r7, r0
 8009426:	1c78      	adds	r0, r7, #1
 8009428:	d1d6      	bne.n	80093d8 <_vfiprintf_r+0x1bc>
 800942a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800942c:	07d9      	lsls	r1, r3, #31
 800942e:	d405      	bmi.n	800943c <_vfiprintf_r+0x220>
 8009430:	89ab      	ldrh	r3, [r5, #12]
 8009432:	059a      	lsls	r2, r3, #22
 8009434:	d402      	bmi.n	800943c <_vfiprintf_r+0x220>
 8009436:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009438:	f000 fa9d 	bl	8009976 <__retarget_lock_release_recursive>
 800943c:	89ab      	ldrh	r3, [r5, #12]
 800943e:	065b      	lsls	r3, r3, #25
 8009440:	f53f af12 	bmi.w	8009268 <_vfiprintf_r+0x4c>
 8009444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009446:	e711      	b.n	800926c <_vfiprintf_r+0x50>
 8009448:	ab03      	add	r3, sp, #12
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	462a      	mov	r2, r5
 800944e:	4630      	mov	r0, r6
 8009450:	4b09      	ldr	r3, [pc, #36]	; (8009478 <_vfiprintf_r+0x25c>)
 8009452:	a904      	add	r1, sp, #16
 8009454:	f7fc faee 	bl	8005a34 <_printf_i>
 8009458:	e7e4      	b.n	8009424 <_vfiprintf_r+0x208>
 800945a:	bf00      	nop
 800945c:	0801baa4 	.word	0x0801baa4
 8009460:	0801bac4 	.word	0x0801bac4
 8009464:	0801ba84 	.word	0x0801ba84
 8009468:	0801ba34 	.word	0x0801ba34
 800946c:	0801ba3a 	.word	0x0801ba3a
 8009470:	0801ba3e 	.word	0x0801ba3e
 8009474:	080054fd 	.word	0x080054fd
 8009478:	080091f9 	.word	0x080091f9

0800947c <__swbuf_r>:
 800947c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947e:	460e      	mov	r6, r1
 8009480:	4614      	mov	r4, r2
 8009482:	4605      	mov	r5, r0
 8009484:	b118      	cbz	r0, 800948e <__swbuf_r+0x12>
 8009486:	6983      	ldr	r3, [r0, #24]
 8009488:	b90b      	cbnz	r3, 800948e <__swbuf_r+0x12>
 800948a:	f000 f9d5 	bl	8009838 <__sinit>
 800948e:	4b21      	ldr	r3, [pc, #132]	; (8009514 <__swbuf_r+0x98>)
 8009490:	429c      	cmp	r4, r3
 8009492:	d12b      	bne.n	80094ec <__swbuf_r+0x70>
 8009494:	686c      	ldr	r4, [r5, #4]
 8009496:	69a3      	ldr	r3, [r4, #24]
 8009498:	60a3      	str	r3, [r4, #8]
 800949a:	89a3      	ldrh	r3, [r4, #12]
 800949c:	071a      	lsls	r2, r3, #28
 800949e:	d52f      	bpl.n	8009500 <__swbuf_r+0x84>
 80094a0:	6923      	ldr	r3, [r4, #16]
 80094a2:	b36b      	cbz	r3, 8009500 <__swbuf_r+0x84>
 80094a4:	6923      	ldr	r3, [r4, #16]
 80094a6:	6820      	ldr	r0, [r4, #0]
 80094a8:	b2f6      	uxtb	r6, r6
 80094aa:	1ac0      	subs	r0, r0, r3
 80094ac:	6963      	ldr	r3, [r4, #20]
 80094ae:	4637      	mov	r7, r6
 80094b0:	4283      	cmp	r3, r0
 80094b2:	dc04      	bgt.n	80094be <__swbuf_r+0x42>
 80094b4:	4621      	mov	r1, r4
 80094b6:	4628      	mov	r0, r5
 80094b8:	f000 f92a 	bl	8009710 <_fflush_r>
 80094bc:	bb30      	cbnz	r0, 800950c <__swbuf_r+0x90>
 80094be:	68a3      	ldr	r3, [r4, #8]
 80094c0:	3001      	adds	r0, #1
 80094c2:	3b01      	subs	r3, #1
 80094c4:	60a3      	str	r3, [r4, #8]
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	1c5a      	adds	r2, r3, #1
 80094ca:	6022      	str	r2, [r4, #0]
 80094cc:	701e      	strb	r6, [r3, #0]
 80094ce:	6963      	ldr	r3, [r4, #20]
 80094d0:	4283      	cmp	r3, r0
 80094d2:	d004      	beq.n	80094de <__swbuf_r+0x62>
 80094d4:	89a3      	ldrh	r3, [r4, #12]
 80094d6:	07db      	lsls	r3, r3, #31
 80094d8:	d506      	bpl.n	80094e8 <__swbuf_r+0x6c>
 80094da:	2e0a      	cmp	r6, #10
 80094dc:	d104      	bne.n	80094e8 <__swbuf_r+0x6c>
 80094de:	4621      	mov	r1, r4
 80094e0:	4628      	mov	r0, r5
 80094e2:	f000 f915 	bl	8009710 <_fflush_r>
 80094e6:	b988      	cbnz	r0, 800950c <__swbuf_r+0x90>
 80094e8:	4638      	mov	r0, r7
 80094ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094ec:	4b0a      	ldr	r3, [pc, #40]	; (8009518 <__swbuf_r+0x9c>)
 80094ee:	429c      	cmp	r4, r3
 80094f0:	d101      	bne.n	80094f6 <__swbuf_r+0x7a>
 80094f2:	68ac      	ldr	r4, [r5, #8]
 80094f4:	e7cf      	b.n	8009496 <__swbuf_r+0x1a>
 80094f6:	4b09      	ldr	r3, [pc, #36]	; (800951c <__swbuf_r+0xa0>)
 80094f8:	429c      	cmp	r4, r3
 80094fa:	bf08      	it	eq
 80094fc:	68ec      	ldreq	r4, [r5, #12]
 80094fe:	e7ca      	b.n	8009496 <__swbuf_r+0x1a>
 8009500:	4621      	mov	r1, r4
 8009502:	4628      	mov	r0, r5
 8009504:	f000 f80c 	bl	8009520 <__swsetup_r>
 8009508:	2800      	cmp	r0, #0
 800950a:	d0cb      	beq.n	80094a4 <__swbuf_r+0x28>
 800950c:	f04f 37ff 	mov.w	r7, #4294967295
 8009510:	e7ea      	b.n	80094e8 <__swbuf_r+0x6c>
 8009512:	bf00      	nop
 8009514:	0801baa4 	.word	0x0801baa4
 8009518:	0801bac4 	.word	0x0801bac4
 800951c:	0801ba84 	.word	0x0801ba84

08009520 <__swsetup_r>:
 8009520:	4b32      	ldr	r3, [pc, #200]	; (80095ec <__swsetup_r+0xcc>)
 8009522:	b570      	push	{r4, r5, r6, lr}
 8009524:	681d      	ldr	r5, [r3, #0]
 8009526:	4606      	mov	r6, r0
 8009528:	460c      	mov	r4, r1
 800952a:	b125      	cbz	r5, 8009536 <__swsetup_r+0x16>
 800952c:	69ab      	ldr	r3, [r5, #24]
 800952e:	b913      	cbnz	r3, 8009536 <__swsetup_r+0x16>
 8009530:	4628      	mov	r0, r5
 8009532:	f000 f981 	bl	8009838 <__sinit>
 8009536:	4b2e      	ldr	r3, [pc, #184]	; (80095f0 <__swsetup_r+0xd0>)
 8009538:	429c      	cmp	r4, r3
 800953a:	d10f      	bne.n	800955c <__swsetup_r+0x3c>
 800953c:	686c      	ldr	r4, [r5, #4]
 800953e:	89a3      	ldrh	r3, [r4, #12]
 8009540:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009544:	0719      	lsls	r1, r3, #28
 8009546:	d42c      	bmi.n	80095a2 <__swsetup_r+0x82>
 8009548:	06dd      	lsls	r5, r3, #27
 800954a:	d411      	bmi.n	8009570 <__swsetup_r+0x50>
 800954c:	2309      	movs	r3, #9
 800954e:	6033      	str	r3, [r6, #0]
 8009550:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009554:	f04f 30ff 	mov.w	r0, #4294967295
 8009558:	81a3      	strh	r3, [r4, #12]
 800955a:	e03e      	b.n	80095da <__swsetup_r+0xba>
 800955c:	4b25      	ldr	r3, [pc, #148]	; (80095f4 <__swsetup_r+0xd4>)
 800955e:	429c      	cmp	r4, r3
 8009560:	d101      	bne.n	8009566 <__swsetup_r+0x46>
 8009562:	68ac      	ldr	r4, [r5, #8]
 8009564:	e7eb      	b.n	800953e <__swsetup_r+0x1e>
 8009566:	4b24      	ldr	r3, [pc, #144]	; (80095f8 <__swsetup_r+0xd8>)
 8009568:	429c      	cmp	r4, r3
 800956a:	bf08      	it	eq
 800956c:	68ec      	ldreq	r4, [r5, #12]
 800956e:	e7e6      	b.n	800953e <__swsetup_r+0x1e>
 8009570:	0758      	lsls	r0, r3, #29
 8009572:	d512      	bpl.n	800959a <__swsetup_r+0x7a>
 8009574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009576:	b141      	cbz	r1, 800958a <__swsetup_r+0x6a>
 8009578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800957c:	4299      	cmp	r1, r3
 800957e:	d002      	beq.n	8009586 <__swsetup_r+0x66>
 8009580:	4630      	mov	r0, r6
 8009582:	f7ff fb2f 	bl	8008be4 <_free_r>
 8009586:	2300      	movs	r3, #0
 8009588:	6363      	str	r3, [r4, #52]	; 0x34
 800958a:	89a3      	ldrh	r3, [r4, #12]
 800958c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009590:	81a3      	strh	r3, [r4, #12]
 8009592:	2300      	movs	r3, #0
 8009594:	6063      	str	r3, [r4, #4]
 8009596:	6923      	ldr	r3, [r4, #16]
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	89a3      	ldrh	r3, [r4, #12]
 800959c:	f043 0308 	orr.w	r3, r3, #8
 80095a0:	81a3      	strh	r3, [r4, #12]
 80095a2:	6923      	ldr	r3, [r4, #16]
 80095a4:	b94b      	cbnz	r3, 80095ba <__swsetup_r+0x9a>
 80095a6:	89a3      	ldrh	r3, [r4, #12]
 80095a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095b0:	d003      	beq.n	80095ba <__swsetup_r+0x9a>
 80095b2:	4621      	mov	r1, r4
 80095b4:	4630      	mov	r0, r6
 80095b6:	f000 fa05 	bl	80099c4 <__smakebuf_r>
 80095ba:	89a0      	ldrh	r0, [r4, #12]
 80095bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095c0:	f010 0301 	ands.w	r3, r0, #1
 80095c4:	d00a      	beq.n	80095dc <__swsetup_r+0xbc>
 80095c6:	2300      	movs	r3, #0
 80095c8:	60a3      	str	r3, [r4, #8]
 80095ca:	6963      	ldr	r3, [r4, #20]
 80095cc:	425b      	negs	r3, r3
 80095ce:	61a3      	str	r3, [r4, #24]
 80095d0:	6923      	ldr	r3, [r4, #16]
 80095d2:	b943      	cbnz	r3, 80095e6 <__swsetup_r+0xc6>
 80095d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095d8:	d1ba      	bne.n	8009550 <__swsetup_r+0x30>
 80095da:	bd70      	pop	{r4, r5, r6, pc}
 80095dc:	0781      	lsls	r1, r0, #30
 80095de:	bf58      	it	pl
 80095e0:	6963      	ldrpl	r3, [r4, #20]
 80095e2:	60a3      	str	r3, [r4, #8]
 80095e4:	e7f4      	b.n	80095d0 <__swsetup_r+0xb0>
 80095e6:	2000      	movs	r0, #0
 80095e8:	e7f7      	b.n	80095da <__swsetup_r+0xba>
 80095ea:	bf00      	nop
 80095ec:	2000000c 	.word	0x2000000c
 80095f0:	0801baa4 	.word	0x0801baa4
 80095f4:	0801bac4 	.word	0x0801bac4
 80095f8:	0801ba84 	.word	0x0801ba84

080095fc <abort>:
 80095fc:	2006      	movs	r0, #6
 80095fe:	b508      	push	{r3, lr}
 8009600:	f000 fa50 	bl	8009aa4 <raise>
 8009604:	2001      	movs	r0, #1
 8009606:	f7f8 ffed 	bl	80025e4 <_exit>
	...

0800960c <__sflush_r>:
 800960c:	898a      	ldrh	r2, [r1, #12]
 800960e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009610:	4605      	mov	r5, r0
 8009612:	0710      	lsls	r0, r2, #28
 8009614:	460c      	mov	r4, r1
 8009616:	d457      	bmi.n	80096c8 <__sflush_r+0xbc>
 8009618:	684b      	ldr	r3, [r1, #4]
 800961a:	2b00      	cmp	r3, #0
 800961c:	dc04      	bgt.n	8009628 <__sflush_r+0x1c>
 800961e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009620:	2b00      	cmp	r3, #0
 8009622:	dc01      	bgt.n	8009628 <__sflush_r+0x1c>
 8009624:	2000      	movs	r0, #0
 8009626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009628:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800962a:	2e00      	cmp	r6, #0
 800962c:	d0fa      	beq.n	8009624 <__sflush_r+0x18>
 800962e:	2300      	movs	r3, #0
 8009630:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009634:	682f      	ldr	r7, [r5, #0]
 8009636:	602b      	str	r3, [r5, #0]
 8009638:	d032      	beq.n	80096a0 <__sflush_r+0x94>
 800963a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800963c:	89a3      	ldrh	r3, [r4, #12]
 800963e:	075a      	lsls	r2, r3, #29
 8009640:	d505      	bpl.n	800964e <__sflush_r+0x42>
 8009642:	6863      	ldr	r3, [r4, #4]
 8009644:	1ac0      	subs	r0, r0, r3
 8009646:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009648:	b10b      	cbz	r3, 800964e <__sflush_r+0x42>
 800964a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800964c:	1ac0      	subs	r0, r0, r3
 800964e:	2300      	movs	r3, #0
 8009650:	4602      	mov	r2, r0
 8009652:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009654:	4628      	mov	r0, r5
 8009656:	6a21      	ldr	r1, [r4, #32]
 8009658:	47b0      	blx	r6
 800965a:	1c43      	adds	r3, r0, #1
 800965c:	89a3      	ldrh	r3, [r4, #12]
 800965e:	d106      	bne.n	800966e <__sflush_r+0x62>
 8009660:	6829      	ldr	r1, [r5, #0]
 8009662:	291d      	cmp	r1, #29
 8009664:	d82c      	bhi.n	80096c0 <__sflush_r+0xb4>
 8009666:	4a29      	ldr	r2, [pc, #164]	; (800970c <__sflush_r+0x100>)
 8009668:	40ca      	lsrs	r2, r1
 800966a:	07d6      	lsls	r6, r2, #31
 800966c:	d528      	bpl.n	80096c0 <__sflush_r+0xb4>
 800966e:	2200      	movs	r2, #0
 8009670:	6062      	str	r2, [r4, #4]
 8009672:	6922      	ldr	r2, [r4, #16]
 8009674:	04d9      	lsls	r1, r3, #19
 8009676:	6022      	str	r2, [r4, #0]
 8009678:	d504      	bpl.n	8009684 <__sflush_r+0x78>
 800967a:	1c42      	adds	r2, r0, #1
 800967c:	d101      	bne.n	8009682 <__sflush_r+0x76>
 800967e:	682b      	ldr	r3, [r5, #0]
 8009680:	b903      	cbnz	r3, 8009684 <__sflush_r+0x78>
 8009682:	6560      	str	r0, [r4, #84]	; 0x54
 8009684:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009686:	602f      	str	r7, [r5, #0]
 8009688:	2900      	cmp	r1, #0
 800968a:	d0cb      	beq.n	8009624 <__sflush_r+0x18>
 800968c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009690:	4299      	cmp	r1, r3
 8009692:	d002      	beq.n	800969a <__sflush_r+0x8e>
 8009694:	4628      	mov	r0, r5
 8009696:	f7ff faa5 	bl	8008be4 <_free_r>
 800969a:	2000      	movs	r0, #0
 800969c:	6360      	str	r0, [r4, #52]	; 0x34
 800969e:	e7c2      	b.n	8009626 <__sflush_r+0x1a>
 80096a0:	6a21      	ldr	r1, [r4, #32]
 80096a2:	2301      	movs	r3, #1
 80096a4:	4628      	mov	r0, r5
 80096a6:	47b0      	blx	r6
 80096a8:	1c41      	adds	r1, r0, #1
 80096aa:	d1c7      	bne.n	800963c <__sflush_r+0x30>
 80096ac:	682b      	ldr	r3, [r5, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d0c4      	beq.n	800963c <__sflush_r+0x30>
 80096b2:	2b1d      	cmp	r3, #29
 80096b4:	d001      	beq.n	80096ba <__sflush_r+0xae>
 80096b6:	2b16      	cmp	r3, #22
 80096b8:	d101      	bne.n	80096be <__sflush_r+0xb2>
 80096ba:	602f      	str	r7, [r5, #0]
 80096bc:	e7b2      	b.n	8009624 <__sflush_r+0x18>
 80096be:	89a3      	ldrh	r3, [r4, #12]
 80096c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096c4:	81a3      	strh	r3, [r4, #12]
 80096c6:	e7ae      	b.n	8009626 <__sflush_r+0x1a>
 80096c8:	690f      	ldr	r7, [r1, #16]
 80096ca:	2f00      	cmp	r7, #0
 80096cc:	d0aa      	beq.n	8009624 <__sflush_r+0x18>
 80096ce:	0793      	lsls	r3, r2, #30
 80096d0:	bf18      	it	ne
 80096d2:	2300      	movne	r3, #0
 80096d4:	680e      	ldr	r6, [r1, #0]
 80096d6:	bf08      	it	eq
 80096d8:	694b      	ldreq	r3, [r1, #20]
 80096da:	1bf6      	subs	r6, r6, r7
 80096dc:	600f      	str	r7, [r1, #0]
 80096de:	608b      	str	r3, [r1, #8]
 80096e0:	2e00      	cmp	r6, #0
 80096e2:	dd9f      	ble.n	8009624 <__sflush_r+0x18>
 80096e4:	4633      	mov	r3, r6
 80096e6:	463a      	mov	r2, r7
 80096e8:	4628      	mov	r0, r5
 80096ea:	6a21      	ldr	r1, [r4, #32]
 80096ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80096f0:	47e0      	blx	ip
 80096f2:	2800      	cmp	r0, #0
 80096f4:	dc06      	bgt.n	8009704 <__sflush_r+0xf8>
 80096f6:	89a3      	ldrh	r3, [r4, #12]
 80096f8:	f04f 30ff 	mov.w	r0, #4294967295
 80096fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009700:	81a3      	strh	r3, [r4, #12]
 8009702:	e790      	b.n	8009626 <__sflush_r+0x1a>
 8009704:	4407      	add	r7, r0
 8009706:	1a36      	subs	r6, r6, r0
 8009708:	e7ea      	b.n	80096e0 <__sflush_r+0xd4>
 800970a:	bf00      	nop
 800970c:	20400001 	.word	0x20400001

08009710 <_fflush_r>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	690b      	ldr	r3, [r1, #16]
 8009714:	4605      	mov	r5, r0
 8009716:	460c      	mov	r4, r1
 8009718:	b913      	cbnz	r3, 8009720 <_fflush_r+0x10>
 800971a:	2500      	movs	r5, #0
 800971c:	4628      	mov	r0, r5
 800971e:	bd38      	pop	{r3, r4, r5, pc}
 8009720:	b118      	cbz	r0, 800972a <_fflush_r+0x1a>
 8009722:	6983      	ldr	r3, [r0, #24]
 8009724:	b90b      	cbnz	r3, 800972a <_fflush_r+0x1a>
 8009726:	f000 f887 	bl	8009838 <__sinit>
 800972a:	4b14      	ldr	r3, [pc, #80]	; (800977c <_fflush_r+0x6c>)
 800972c:	429c      	cmp	r4, r3
 800972e:	d11b      	bne.n	8009768 <_fflush_r+0x58>
 8009730:	686c      	ldr	r4, [r5, #4]
 8009732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d0ef      	beq.n	800971a <_fflush_r+0xa>
 800973a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800973c:	07d0      	lsls	r0, r2, #31
 800973e:	d404      	bmi.n	800974a <_fflush_r+0x3a>
 8009740:	0599      	lsls	r1, r3, #22
 8009742:	d402      	bmi.n	800974a <_fflush_r+0x3a>
 8009744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009746:	f000 f915 	bl	8009974 <__retarget_lock_acquire_recursive>
 800974a:	4628      	mov	r0, r5
 800974c:	4621      	mov	r1, r4
 800974e:	f7ff ff5d 	bl	800960c <__sflush_r>
 8009752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009754:	4605      	mov	r5, r0
 8009756:	07da      	lsls	r2, r3, #31
 8009758:	d4e0      	bmi.n	800971c <_fflush_r+0xc>
 800975a:	89a3      	ldrh	r3, [r4, #12]
 800975c:	059b      	lsls	r3, r3, #22
 800975e:	d4dd      	bmi.n	800971c <_fflush_r+0xc>
 8009760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009762:	f000 f908 	bl	8009976 <__retarget_lock_release_recursive>
 8009766:	e7d9      	b.n	800971c <_fflush_r+0xc>
 8009768:	4b05      	ldr	r3, [pc, #20]	; (8009780 <_fflush_r+0x70>)
 800976a:	429c      	cmp	r4, r3
 800976c:	d101      	bne.n	8009772 <_fflush_r+0x62>
 800976e:	68ac      	ldr	r4, [r5, #8]
 8009770:	e7df      	b.n	8009732 <_fflush_r+0x22>
 8009772:	4b04      	ldr	r3, [pc, #16]	; (8009784 <_fflush_r+0x74>)
 8009774:	429c      	cmp	r4, r3
 8009776:	bf08      	it	eq
 8009778:	68ec      	ldreq	r4, [r5, #12]
 800977a:	e7da      	b.n	8009732 <_fflush_r+0x22>
 800977c:	0801baa4 	.word	0x0801baa4
 8009780:	0801bac4 	.word	0x0801bac4
 8009784:	0801ba84 	.word	0x0801ba84

08009788 <std>:
 8009788:	2300      	movs	r3, #0
 800978a:	b510      	push	{r4, lr}
 800978c:	4604      	mov	r4, r0
 800978e:	e9c0 3300 	strd	r3, r3, [r0]
 8009792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009796:	6083      	str	r3, [r0, #8]
 8009798:	8181      	strh	r1, [r0, #12]
 800979a:	6643      	str	r3, [r0, #100]	; 0x64
 800979c:	81c2      	strh	r2, [r0, #14]
 800979e:	6183      	str	r3, [r0, #24]
 80097a0:	4619      	mov	r1, r3
 80097a2:	2208      	movs	r2, #8
 80097a4:	305c      	adds	r0, #92	; 0x5c
 80097a6:	f7fb fe03 	bl	80053b0 <memset>
 80097aa:	4b05      	ldr	r3, [pc, #20]	; (80097c0 <std+0x38>)
 80097ac:	6224      	str	r4, [r4, #32]
 80097ae:	6263      	str	r3, [r4, #36]	; 0x24
 80097b0:	4b04      	ldr	r3, [pc, #16]	; (80097c4 <std+0x3c>)
 80097b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80097b4:	4b04      	ldr	r3, [pc, #16]	; (80097c8 <std+0x40>)
 80097b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097b8:	4b04      	ldr	r3, [pc, #16]	; (80097cc <std+0x44>)
 80097ba:	6323      	str	r3, [r4, #48]	; 0x30
 80097bc:	bd10      	pop	{r4, pc}
 80097be:	bf00      	nop
 80097c0:	08009add 	.word	0x08009add
 80097c4:	08009aff 	.word	0x08009aff
 80097c8:	08009b37 	.word	0x08009b37
 80097cc:	08009b5b 	.word	0x08009b5b

080097d0 <_cleanup_r>:
 80097d0:	4901      	ldr	r1, [pc, #4]	; (80097d8 <_cleanup_r+0x8>)
 80097d2:	f000 b8af 	b.w	8009934 <_fwalk_reent>
 80097d6:	bf00      	nop
 80097d8:	08009711 	.word	0x08009711

080097dc <__sfmoreglue>:
 80097dc:	2268      	movs	r2, #104	; 0x68
 80097de:	b570      	push	{r4, r5, r6, lr}
 80097e0:	1e4d      	subs	r5, r1, #1
 80097e2:	4355      	muls	r5, r2
 80097e4:	460e      	mov	r6, r1
 80097e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80097ea:	f7ff fa63 	bl	8008cb4 <_malloc_r>
 80097ee:	4604      	mov	r4, r0
 80097f0:	b140      	cbz	r0, 8009804 <__sfmoreglue+0x28>
 80097f2:	2100      	movs	r1, #0
 80097f4:	e9c0 1600 	strd	r1, r6, [r0]
 80097f8:	300c      	adds	r0, #12
 80097fa:	60a0      	str	r0, [r4, #8]
 80097fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009800:	f7fb fdd6 	bl	80053b0 <memset>
 8009804:	4620      	mov	r0, r4
 8009806:	bd70      	pop	{r4, r5, r6, pc}

08009808 <__sfp_lock_acquire>:
 8009808:	4801      	ldr	r0, [pc, #4]	; (8009810 <__sfp_lock_acquire+0x8>)
 800980a:	f000 b8b3 	b.w	8009974 <__retarget_lock_acquire_recursive>
 800980e:	bf00      	nop
 8009810:	20000885 	.word	0x20000885

08009814 <__sfp_lock_release>:
 8009814:	4801      	ldr	r0, [pc, #4]	; (800981c <__sfp_lock_release+0x8>)
 8009816:	f000 b8ae 	b.w	8009976 <__retarget_lock_release_recursive>
 800981a:	bf00      	nop
 800981c:	20000885 	.word	0x20000885

08009820 <__sinit_lock_acquire>:
 8009820:	4801      	ldr	r0, [pc, #4]	; (8009828 <__sinit_lock_acquire+0x8>)
 8009822:	f000 b8a7 	b.w	8009974 <__retarget_lock_acquire_recursive>
 8009826:	bf00      	nop
 8009828:	20000886 	.word	0x20000886

0800982c <__sinit_lock_release>:
 800982c:	4801      	ldr	r0, [pc, #4]	; (8009834 <__sinit_lock_release+0x8>)
 800982e:	f000 b8a2 	b.w	8009976 <__retarget_lock_release_recursive>
 8009832:	bf00      	nop
 8009834:	20000886 	.word	0x20000886

08009838 <__sinit>:
 8009838:	b510      	push	{r4, lr}
 800983a:	4604      	mov	r4, r0
 800983c:	f7ff fff0 	bl	8009820 <__sinit_lock_acquire>
 8009840:	69a3      	ldr	r3, [r4, #24]
 8009842:	b11b      	cbz	r3, 800984c <__sinit+0x14>
 8009844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009848:	f7ff bff0 	b.w	800982c <__sinit_lock_release>
 800984c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009850:	6523      	str	r3, [r4, #80]	; 0x50
 8009852:	4b13      	ldr	r3, [pc, #76]	; (80098a0 <__sinit+0x68>)
 8009854:	4a13      	ldr	r2, [pc, #76]	; (80098a4 <__sinit+0x6c>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	62a2      	str	r2, [r4, #40]	; 0x28
 800985a:	42a3      	cmp	r3, r4
 800985c:	bf08      	it	eq
 800985e:	2301      	moveq	r3, #1
 8009860:	4620      	mov	r0, r4
 8009862:	bf08      	it	eq
 8009864:	61a3      	streq	r3, [r4, #24]
 8009866:	f000 f81f 	bl	80098a8 <__sfp>
 800986a:	6060      	str	r0, [r4, #4]
 800986c:	4620      	mov	r0, r4
 800986e:	f000 f81b 	bl	80098a8 <__sfp>
 8009872:	60a0      	str	r0, [r4, #8]
 8009874:	4620      	mov	r0, r4
 8009876:	f000 f817 	bl	80098a8 <__sfp>
 800987a:	2200      	movs	r2, #0
 800987c:	2104      	movs	r1, #4
 800987e:	60e0      	str	r0, [r4, #12]
 8009880:	6860      	ldr	r0, [r4, #4]
 8009882:	f7ff ff81 	bl	8009788 <std>
 8009886:	2201      	movs	r2, #1
 8009888:	2109      	movs	r1, #9
 800988a:	68a0      	ldr	r0, [r4, #8]
 800988c:	f7ff ff7c 	bl	8009788 <std>
 8009890:	2202      	movs	r2, #2
 8009892:	2112      	movs	r1, #18
 8009894:	68e0      	ldr	r0, [r4, #12]
 8009896:	f7ff ff77 	bl	8009788 <std>
 800989a:	2301      	movs	r3, #1
 800989c:	61a3      	str	r3, [r4, #24]
 800989e:	e7d1      	b.n	8009844 <__sinit+0xc>
 80098a0:	0801b640 	.word	0x0801b640
 80098a4:	080097d1 	.word	0x080097d1

080098a8 <__sfp>:
 80098a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098aa:	4607      	mov	r7, r0
 80098ac:	f7ff ffac 	bl	8009808 <__sfp_lock_acquire>
 80098b0:	4b1e      	ldr	r3, [pc, #120]	; (800992c <__sfp+0x84>)
 80098b2:	681e      	ldr	r6, [r3, #0]
 80098b4:	69b3      	ldr	r3, [r6, #24]
 80098b6:	b913      	cbnz	r3, 80098be <__sfp+0x16>
 80098b8:	4630      	mov	r0, r6
 80098ba:	f7ff ffbd 	bl	8009838 <__sinit>
 80098be:	3648      	adds	r6, #72	; 0x48
 80098c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80098c4:	3b01      	subs	r3, #1
 80098c6:	d503      	bpl.n	80098d0 <__sfp+0x28>
 80098c8:	6833      	ldr	r3, [r6, #0]
 80098ca:	b30b      	cbz	r3, 8009910 <__sfp+0x68>
 80098cc:	6836      	ldr	r6, [r6, #0]
 80098ce:	e7f7      	b.n	80098c0 <__sfp+0x18>
 80098d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80098d4:	b9d5      	cbnz	r5, 800990c <__sfp+0x64>
 80098d6:	4b16      	ldr	r3, [pc, #88]	; (8009930 <__sfp+0x88>)
 80098d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098dc:	60e3      	str	r3, [r4, #12]
 80098de:	6665      	str	r5, [r4, #100]	; 0x64
 80098e0:	f000 f847 	bl	8009972 <__retarget_lock_init_recursive>
 80098e4:	f7ff ff96 	bl	8009814 <__sfp_lock_release>
 80098e8:	2208      	movs	r2, #8
 80098ea:	4629      	mov	r1, r5
 80098ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80098f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80098f4:	6025      	str	r5, [r4, #0]
 80098f6:	61a5      	str	r5, [r4, #24]
 80098f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098fc:	f7fb fd58 	bl	80053b0 <memset>
 8009900:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009904:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009908:	4620      	mov	r0, r4
 800990a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800990c:	3468      	adds	r4, #104	; 0x68
 800990e:	e7d9      	b.n	80098c4 <__sfp+0x1c>
 8009910:	2104      	movs	r1, #4
 8009912:	4638      	mov	r0, r7
 8009914:	f7ff ff62 	bl	80097dc <__sfmoreglue>
 8009918:	4604      	mov	r4, r0
 800991a:	6030      	str	r0, [r6, #0]
 800991c:	2800      	cmp	r0, #0
 800991e:	d1d5      	bne.n	80098cc <__sfp+0x24>
 8009920:	f7ff ff78 	bl	8009814 <__sfp_lock_release>
 8009924:	230c      	movs	r3, #12
 8009926:	603b      	str	r3, [r7, #0]
 8009928:	e7ee      	b.n	8009908 <__sfp+0x60>
 800992a:	bf00      	nop
 800992c:	0801b640 	.word	0x0801b640
 8009930:	ffff0001 	.word	0xffff0001

08009934 <_fwalk_reent>:
 8009934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009938:	4606      	mov	r6, r0
 800993a:	4688      	mov	r8, r1
 800993c:	2700      	movs	r7, #0
 800993e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009942:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009946:	f1b9 0901 	subs.w	r9, r9, #1
 800994a:	d505      	bpl.n	8009958 <_fwalk_reent+0x24>
 800994c:	6824      	ldr	r4, [r4, #0]
 800994e:	2c00      	cmp	r4, #0
 8009950:	d1f7      	bne.n	8009942 <_fwalk_reent+0xe>
 8009952:	4638      	mov	r0, r7
 8009954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009958:	89ab      	ldrh	r3, [r5, #12]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d907      	bls.n	800996e <_fwalk_reent+0x3a>
 800995e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009962:	3301      	adds	r3, #1
 8009964:	d003      	beq.n	800996e <_fwalk_reent+0x3a>
 8009966:	4629      	mov	r1, r5
 8009968:	4630      	mov	r0, r6
 800996a:	47c0      	blx	r8
 800996c:	4307      	orrs	r7, r0
 800996e:	3568      	adds	r5, #104	; 0x68
 8009970:	e7e9      	b.n	8009946 <_fwalk_reent+0x12>

08009972 <__retarget_lock_init_recursive>:
 8009972:	4770      	bx	lr

08009974 <__retarget_lock_acquire_recursive>:
 8009974:	4770      	bx	lr

08009976 <__retarget_lock_release_recursive>:
 8009976:	4770      	bx	lr

08009978 <__swhatbuf_r>:
 8009978:	b570      	push	{r4, r5, r6, lr}
 800997a:	460e      	mov	r6, r1
 800997c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009980:	4614      	mov	r4, r2
 8009982:	2900      	cmp	r1, #0
 8009984:	461d      	mov	r5, r3
 8009986:	b096      	sub	sp, #88	; 0x58
 8009988:	da08      	bge.n	800999c <__swhatbuf_r+0x24>
 800998a:	2200      	movs	r2, #0
 800998c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009990:	602a      	str	r2, [r5, #0]
 8009992:	061a      	lsls	r2, r3, #24
 8009994:	d410      	bmi.n	80099b8 <__swhatbuf_r+0x40>
 8009996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800999a:	e00e      	b.n	80099ba <__swhatbuf_r+0x42>
 800999c:	466a      	mov	r2, sp
 800999e:	f000 f903 	bl	8009ba8 <_fstat_r>
 80099a2:	2800      	cmp	r0, #0
 80099a4:	dbf1      	blt.n	800998a <__swhatbuf_r+0x12>
 80099a6:	9a01      	ldr	r2, [sp, #4]
 80099a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099b0:	425a      	negs	r2, r3
 80099b2:	415a      	adcs	r2, r3
 80099b4:	602a      	str	r2, [r5, #0]
 80099b6:	e7ee      	b.n	8009996 <__swhatbuf_r+0x1e>
 80099b8:	2340      	movs	r3, #64	; 0x40
 80099ba:	2000      	movs	r0, #0
 80099bc:	6023      	str	r3, [r4, #0]
 80099be:	b016      	add	sp, #88	; 0x58
 80099c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080099c4 <__smakebuf_r>:
 80099c4:	898b      	ldrh	r3, [r1, #12]
 80099c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099c8:	079d      	lsls	r5, r3, #30
 80099ca:	4606      	mov	r6, r0
 80099cc:	460c      	mov	r4, r1
 80099ce:	d507      	bpl.n	80099e0 <__smakebuf_r+0x1c>
 80099d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	6123      	str	r3, [r4, #16]
 80099d8:	2301      	movs	r3, #1
 80099da:	6163      	str	r3, [r4, #20]
 80099dc:	b002      	add	sp, #8
 80099de:	bd70      	pop	{r4, r5, r6, pc}
 80099e0:	466a      	mov	r2, sp
 80099e2:	ab01      	add	r3, sp, #4
 80099e4:	f7ff ffc8 	bl	8009978 <__swhatbuf_r>
 80099e8:	9900      	ldr	r1, [sp, #0]
 80099ea:	4605      	mov	r5, r0
 80099ec:	4630      	mov	r0, r6
 80099ee:	f7ff f961 	bl	8008cb4 <_malloc_r>
 80099f2:	b948      	cbnz	r0, 8009a08 <__smakebuf_r+0x44>
 80099f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f8:	059a      	lsls	r2, r3, #22
 80099fa:	d4ef      	bmi.n	80099dc <__smakebuf_r+0x18>
 80099fc:	f023 0303 	bic.w	r3, r3, #3
 8009a00:	f043 0302 	orr.w	r3, r3, #2
 8009a04:	81a3      	strh	r3, [r4, #12]
 8009a06:	e7e3      	b.n	80099d0 <__smakebuf_r+0xc>
 8009a08:	4b0d      	ldr	r3, [pc, #52]	; (8009a40 <__smakebuf_r+0x7c>)
 8009a0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	6020      	str	r0, [r4, #0]
 8009a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a14:	81a3      	strh	r3, [r4, #12]
 8009a16:	9b00      	ldr	r3, [sp, #0]
 8009a18:	6120      	str	r0, [r4, #16]
 8009a1a:	6163      	str	r3, [r4, #20]
 8009a1c:	9b01      	ldr	r3, [sp, #4]
 8009a1e:	b15b      	cbz	r3, 8009a38 <__smakebuf_r+0x74>
 8009a20:	4630      	mov	r0, r6
 8009a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a26:	f000 f8d1 	bl	8009bcc <_isatty_r>
 8009a2a:	b128      	cbz	r0, 8009a38 <__smakebuf_r+0x74>
 8009a2c:	89a3      	ldrh	r3, [r4, #12]
 8009a2e:	f023 0303 	bic.w	r3, r3, #3
 8009a32:	f043 0301 	orr.w	r3, r3, #1
 8009a36:	81a3      	strh	r3, [r4, #12]
 8009a38:	89a0      	ldrh	r0, [r4, #12]
 8009a3a:	4305      	orrs	r5, r0
 8009a3c:	81a5      	strh	r5, [r4, #12]
 8009a3e:	e7cd      	b.n	80099dc <__smakebuf_r+0x18>
 8009a40:	080097d1 	.word	0x080097d1

08009a44 <_malloc_usable_size_r>:
 8009a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a48:	1f18      	subs	r0, r3, #4
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	bfbc      	itt	lt
 8009a4e:	580b      	ldrlt	r3, [r1, r0]
 8009a50:	18c0      	addlt	r0, r0, r3
 8009a52:	4770      	bx	lr

08009a54 <_raise_r>:
 8009a54:	291f      	cmp	r1, #31
 8009a56:	b538      	push	{r3, r4, r5, lr}
 8009a58:	4604      	mov	r4, r0
 8009a5a:	460d      	mov	r5, r1
 8009a5c:	d904      	bls.n	8009a68 <_raise_r+0x14>
 8009a5e:	2316      	movs	r3, #22
 8009a60:	6003      	str	r3, [r0, #0]
 8009a62:	f04f 30ff 	mov.w	r0, #4294967295
 8009a66:	bd38      	pop	{r3, r4, r5, pc}
 8009a68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a6a:	b112      	cbz	r2, 8009a72 <_raise_r+0x1e>
 8009a6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a70:	b94b      	cbnz	r3, 8009a86 <_raise_r+0x32>
 8009a72:	4620      	mov	r0, r4
 8009a74:	f000 f830 	bl	8009ad8 <_getpid_r>
 8009a78:	462a      	mov	r2, r5
 8009a7a:	4601      	mov	r1, r0
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a82:	f000 b817 	b.w	8009ab4 <_kill_r>
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d00a      	beq.n	8009aa0 <_raise_r+0x4c>
 8009a8a:	1c59      	adds	r1, r3, #1
 8009a8c:	d103      	bne.n	8009a96 <_raise_r+0x42>
 8009a8e:	2316      	movs	r3, #22
 8009a90:	6003      	str	r3, [r0, #0]
 8009a92:	2001      	movs	r0, #1
 8009a94:	e7e7      	b.n	8009a66 <_raise_r+0x12>
 8009a96:	2400      	movs	r4, #0
 8009a98:	4628      	mov	r0, r5
 8009a9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a9e:	4798      	blx	r3
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	e7e0      	b.n	8009a66 <_raise_r+0x12>

08009aa4 <raise>:
 8009aa4:	4b02      	ldr	r3, [pc, #8]	; (8009ab0 <raise+0xc>)
 8009aa6:	4601      	mov	r1, r0
 8009aa8:	6818      	ldr	r0, [r3, #0]
 8009aaa:	f7ff bfd3 	b.w	8009a54 <_raise_r>
 8009aae:	bf00      	nop
 8009ab0:	2000000c 	.word	0x2000000c

08009ab4 <_kill_r>:
 8009ab4:	b538      	push	{r3, r4, r5, lr}
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	4d06      	ldr	r5, [pc, #24]	; (8009ad4 <_kill_r+0x20>)
 8009aba:	4604      	mov	r4, r0
 8009abc:	4608      	mov	r0, r1
 8009abe:	4611      	mov	r1, r2
 8009ac0:	602b      	str	r3, [r5, #0]
 8009ac2:	f7f8 fd87 	bl	80025d4 <_kill>
 8009ac6:	1c43      	adds	r3, r0, #1
 8009ac8:	d102      	bne.n	8009ad0 <_kill_r+0x1c>
 8009aca:	682b      	ldr	r3, [r5, #0]
 8009acc:	b103      	cbz	r3, 8009ad0 <_kill_r+0x1c>
 8009ace:	6023      	str	r3, [r4, #0]
 8009ad0:	bd38      	pop	{r3, r4, r5, pc}
 8009ad2:	bf00      	nop
 8009ad4:	20000880 	.word	0x20000880

08009ad8 <_getpid_r>:
 8009ad8:	f7f8 bd7a 	b.w	80025d0 <_getpid>

08009adc <__sread>:
 8009adc:	b510      	push	{r4, lr}
 8009ade:	460c      	mov	r4, r1
 8009ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ae4:	f000 f894 	bl	8009c10 <_read_r>
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	bfab      	itete	ge
 8009aec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009aee:	89a3      	ldrhlt	r3, [r4, #12]
 8009af0:	181b      	addge	r3, r3, r0
 8009af2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009af6:	bfac      	ite	ge
 8009af8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009afa:	81a3      	strhlt	r3, [r4, #12]
 8009afc:	bd10      	pop	{r4, pc}

08009afe <__swrite>:
 8009afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b02:	461f      	mov	r7, r3
 8009b04:	898b      	ldrh	r3, [r1, #12]
 8009b06:	4605      	mov	r5, r0
 8009b08:	05db      	lsls	r3, r3, #23
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	4616      	mov	r6, r2
 8009b0e:	d505      	bpl.n	8009b1c <__swrite+0x1e>
 8009b10:	2302      	movs	r3, #2
 8009b12:	2200      	movs	r2, #0
 8009b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b18:	f000 f868 	bl	8009bec <_lseek_r>
 8009b1c:	89a3      	ldrh	r3, [r4, #12]
 8009b1e:	4632      	mov	r2, r6
 8009b20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b24:	81a3      	strh	r3, [r4, #12]
 8009b26:	4628      	mov	r0, r5
 8009b28:	463b      	mov	r3, r7
 8009b2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b32:	f000 b817 	b.w	8009b64 <_write_r>

08009b36 <__sseek>:
 8009b36:	b510      	push	{r4, lr}
 8009b38:	460c      	mov	r4, r1
 8009b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b3e:	f000 f855 	bl	8009bec <_lseek_r>
 8009b42:	1c43      	adds	r3, r0, #1
 8009b44:	89a3      	ldrh	r3, [r4, #12]
 8009b46:	bf15      	itete	ne
 8009b48:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b52:	81a3      	strheq	r3, [r4, #12]
 8009b54:	bf18      	it	ne
 8009b56:	81a3      	strhne	r3, [r4, #12]
 8009b58:	bd10      	pop	{r4, pc}

08009b5a <__sclose>:
 8009b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b5e:	f000 b813 	b.w	8009b88 <_close_r>
	...

08009b64 <_write_r>:
 8009b64:	b538      	push	{r3, r4, r5, lr}
 8009b66:	4604      	mov	r4, r0
 8009b68:	4608      	mov	r0, r1
 8009b6a:	4611      	mov	r1, r2
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	4d05      	ldr	r5, [pc, #20]	; (8009b84 <_write_r+0x20>)
 8009b70:	602a      	str	r2, [r5, #0]
 8009b72:	461a      	mov	r2, r3
 8009b74:	f7f8 fd4a 	bl	800260c <_write>
 8009b78:	1c43      	adds	r3, r0, #1
 8009b7a:	d102      	bne.n	8009b82 <_write_r+0x1e>
 8009b7c:	682b      	ldr	r3, [r5, #0]
 8009b7e:	b103      	cbz	r3, 8009b82 <_write_r+0x1e>
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	bd38      	pop	{r3, r4, r5, pc}
 8009b84:	20000880 	.word	0x20000880

08009b88 <_close_r>:
 8009b88:	b538      	push	{r3, r4, r5, lr}
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	4d05      	ldr	r5, [pc, #20]	; (8009ba4 <_close_r+0x1c>)
 8009b8e:	4604      	mov	r4, r0
 8009b90:	4608      	mov	r0, r1
 8009b92:	602b      	str	r3, [r5, #0]
 8009b94:	f7f8 fd48 	bl	8002628 <_close>
 8009b98:	1c43      	adds	r3, r0, #1
 8009b9a:	d102      	bne.n	8009ba2 <_close_r+0x1a>
 8009b9c:	682b      	ldr	r3, [r5, #0]
 8009b9e:	b103      	cbz	r3, 8009ba2 <_close_r+0x1a>
 8009ba0:	6023      	str	r3, [r4, #0]
 8009ba2:	bd38      	pop	{r3, r4, r5, pc}
 8009ba4:	20000880 	.word	0x20000880

08009ba8 <_fstat_r>:
 8009ba8:	b538      	push	{r3, r4, r5, lr}
 8009baa:	2300      	movs	r3, #0
 8009bac:	4d06      	ldr	r5, [pc, #24]	; (8009bc8 <_fstat_r+0x20>)
 8009bae:	4604      	mov	r4, r0
 8009bb0:	4608      	mov	r0, r1
 8009bb2:	4611      	mov	r1, r2
 8009bb4:	602b      	str	r3, [r5, #0]
 8009bb6:	f7f8 fd3a 	bl	800262e <_fstat>
 8009bba:	1c43      	adds	r3, r0, #1
 8009bbc:	d102      	bne.n	8009bc4 <_fstat_r+0x1c>
 8009bbe:	682b      	ldr	r3, [r5, #0]
 8009bc0:	b103      	cbz	r3, 8009bc4 <_fstat_r+0x1c>
 8009bc2:	6023      	str	r3, [r4, #0]
 8009bc4:	bd38      	pop	{r3, r4, r5, pc}
 8009bc6:	bf00      	nop
 8009bc8:	20000880 	.word	0x20000880

08009bcc <_isatty_r>:
 8009bcc:	b538      	push	{r3, r4, r5, lr}
 8009bce:	2300      	movs	r3, #0
 8009bd0:	4d05      	ldr	r5, [pc, #20]	; (8009be8 <_isatty_r+0x1c>)
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	4608      	mov	r0, r1
 8009bd6:	602b      	str	r3, [r5, #0]
 8009bd8:	f7f8 fd2e 	bl	8002638 <_isatty>
 8009bdc:	1c43      	adds	r3, r0, #1
 8009bde:	d102      	bne.n	8009be6 <_isatty_r+0x1a>
 8009be0:	682b      	ldr	r3, [r5, #0]
 8009be2:	b103      	cbz	r3, 8009be6 <_isatty_r+0x1a>
 8009be4:	6023      	str	r3, [r4, #0]
 8009be6:	bd38      	pop	{r3, r4, r5, pc}
 8009be8:	20000880 	.word	0x20000880

08009bec <_lseek_r>:
 8009bec:	b538      	push	{r3, r4, r5, lr}
 8009bee:	4604      	mov	r4, r0
 8009bf0:	4608      	mov	r0, r1
 8009bf2:	4611      	mov	r1, r2
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	4d05      	ldr	r5, [pc, #20]	; (8009c0c <_lseek_r+0x20>)
 8009bf8:	602a      	str	r2, [r5, #0]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	f7f8 fd1e 	bl	800263c <_lseek>
 8009c00:	1c43      	adds	r3, r0, #1
 8009c02:	d102      	bne.n	8009c0a <_lseek_r+0x1e>
 8009c04:	682b      	ldr	r3, [r5, #0]
 8009c06:	b103      	cbz	r3, 8009c0a <_lseek_r+0x1e>
 8009c08:	6023      	str	r3, [r4, #0]
 8009c0a:	bd38      	pop	{r3, r4, r5, pc}
 8009c0c:	20000880 	.word	0x20000880

08009c10 <_read_r>:
 8009c10:	b538      	push	{r3, r4, r5, lr}
 8009c12:	4604      	mov	r4, r0
 8009c14:	4608      	mov	r0, r1
 8009c16:	4611      	mov	r1, r2
 8009c18:	2200      	movs	r2, #0
 8009c1a:	4d05      	ldr	r5, [pc, #20]	; (8009c30 <_read_r+0x20>)
 8009c1c:	602a      	str	r2, [r5, #0]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	f7f8 fce6 	bl	80025f0 <_read>
 8009c24:	1c43      	adds	r3, r0, #1
 8009c26:	d102      	bne.n	8009c2e <_read_r+0x1e>
 8009c28:	682b      	ldr	r3, [r5, #0]
 8009c2a:	b103      	cbz	r3, 8009c2e <_read_r+0x1e>
 8009c2c:	6023      	str	r3, [r4, #0]
 8009c2e:	bd38      	pop	{r3, r4, r5, pc}
 8009c30:	20000880 	.word	0x20000880

08009c34 <memcmp>:
 8009c34:	b510      	push	{r4, lr}
 8009c36:	3901      	subs	r1, #1
 8009c38:	4402      	add	r2, r0
 8009c3a:	4290      	cmp	r0, r2
 8009c3c:	d101      	bne.n	8009c42 <memcmp+0xe>
 8009c3e:	2000      	movs	r0, #0
 8009c40:	e005      	b.n	8009c4e <memcmp+0x1a>
 8009c42:	7803      	ldrb	r3, [r0, #0]
 8009c44:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009c48:	42a3      	cmp	r3, r4
 8009c4a:	d001      	beq.n	8009c50 <memcmp+0x1c>
 8009c4c:	1b18      	subs	r0, r3, r4
 8009c4e:	bd10      	pop	{r4, pc}
 8009c50:	3001      	adds	r0, #1
 8009c52:	e7f2      	b.n	8009c3a <memcmp+0x6>
 8009c54:	0000      	movs	r0, r0
	...

08009c58 <floor>:
 8009c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c5c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8009c60:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8009c64:	2e13      	cmp	r6, #19
 8009c66:	4602      	mov	r2, r0
 8009c68:	460b      	mov	r3, r1
 8009c6a:	4607      	mov	r7, r0
 8009c6c:	460c      	mov	r4, r1
 8009c6e:	4605      	mov	r5, r0
 8009c70:	dc33      	bgt.n	8009cda <floor+0x82>
 8009c72:	2e00      	cmp	r6, #0
 8009c74:	da14      	bge.n	8009ca0 <floor+0x48>
 8009c76:	a334      	add	r3, pc, #208	; (adr r3, 8009d48 <floor+0xf0>)
 8009c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7c:	f7f8 fd14 	bl	80026a8 <__adddf3>
 8009c80:	2200      	movs	r2, #0
 8009c82:	2300      	movs	r3, #0
 8009c84:	f7f9 f956 	bl	8002f34 <__aeabi_dcmpgt>
 8009c88:	b138      	cbz	r0, 8009c9a <floor+0x42>
 8009c8a:	2c00      	cmp	r4, #0
 8009c8c:	da58      	bge.n	8009d40 <floor+0xe8>
 8009c8e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009c92:	431d      	orrs	r5, r3
 8009c94:	d001      	beq.n	8009c9a <floor+0x42>
 8009c96:	2500      	movs	r5, #0
 8009c98:	4c2d      	ldr	r4, [pc, #180]	; (8009d50 <floor+0xf8>)
 8009c9a:	4623      	mov	r3, r4
 8009c9c:	462f      	mov	r7, r5
 8009c9e:	e025      	b.n	8009cec <floor+0x94>
 8009ca0:	4a2c      	ldr	r2, [pc, #176]	; (8009d54 <floor+0xfc>)
 8009ca2:	fa42 f806 	asr.w	r8, r2, r6
 8009ca6:	ea01 0208 	and.w	r2, r1, r8
 8009caa:	4302      	orrs	r2, r0
 8009cac:	d01e      	beq.n	8009cec <floor+0x94>
 8009cae:	a326      	add	r3, pc, #152	; (adr r3, 8009d48 <floor+0xf0>)
 8009cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb4:	f7f8 fcf8 	bl	80026a8 <__adddf3>
 8009cb8:	2200      	movs	r2, #0
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f7f9 f93a 	bl	8002f34 <__aeabi_dcmpgt>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d0ea      	beq.n	8009c9a <floor+0x42>
 8009cc4:	2c00      	cmp	r4, #0
 8009cc6:	bfbe      	ittt	lt
 8009cc8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009ccc:	fa43 f606 	asrlt.w	r6, r3, r6
 8009cd0:	19a4      	addlt	r4, r4, r6
 8009cd2:	2500      	movs	r5, #0
 8009cd4:	ea24 0408 	bic.w	r4, r4, r8
 8009cd8:	e7df      	b.n	8009c9a <floor+0x42>
 8009cda:	2e33      	cmp	r6, #51	; 0x33
 8009cdc:	dd0a      	ble.n	8009cf4 <floor+0x9c>
 8009cde:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009ce2:	d103      	bne.n	8009cec <floor+0x94>
 8009ce4:	f7f8 fce0 	bl	80026a8 <__adddf3>
 8009ce8:	4607      	mov	r7, r0
 8009cea:	460b      	mov	r3, r1
 8009cec:	4638      	mov	r0, r7
 8009cee:	4619      	mov	r1, r3
 8009cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8009cfc:	fa22 f808 	lsr.w	r8, r2, r8
 8009d00:	ea18 0f00 	tst.w	r8, r0
 8009d04:	d0f2      	beq.n	8009cec <floor+0x94>
 8009d06:	a310      	add	r3, pc, #64	; (adr r3, 8009d48 <floor+0xf0>)
 8009d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0c:	f7f8 fccc 	bl	80026a8 <__adddf3>
 8009d10:	2200      	movs	r2, #0
 8009d12:	2300      	movs	r3, #0
 8009d14:	f7f9 f90e 	bl	8002f34 <__aeabi_dcmpgt>
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	d0be      	beq.n	8009c9a <floor+0x42>
 8009d1c:	2c00      	cmp	r4, #0
 8009d1e:	da02      	bge.n	8009d26 <floor+0xce>
 8009d20:	2e14      	cmp	r6, #20
 8009d22:	d103      	bne.n	8009d2c <floor+0xd4>
 8009d24:	3401      	adds	r4, #1
 8009d26:	ea25 0508 	bic.w	r5, r5, r8
 8009d2a:	e7b6      	b.n	8009c9a <floor+0x42>
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009d32:	fa03 f606 	lsl.w	r6, r3, r6
 8009d36:	4435      	add	r5, r6
 8009d38:	42bd      	cmp	r5, r7
 8009d3a:	bf38      	it	cc
 8009d3c:	18e4      	addcc	r4, r4, r3
 8009d3e:	e7f2      	b.n	8009d26 <floor+0xce>
 8009d40:	2500      	movs	r5, #0
 8009d42:	462c      	mov	r4, r5
 8009d44:	e7a9      	b.n	8009c9a <floor+0x42>
 8009d46:	bf00      	nop
 8009d48:	8800759c 	.word	0x8800759c
 8009d4c:	7e37e43c 	.word	0x7e37e43c
 8009d50:	bff00000 	.word	0xbff00000
 8009d54:	000fffff 	.word	0x000fffff

08009d58 <_init>:
 8009d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5a:	bf00      	nop
 8009d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d5e:	bc08      	pop	{r3}
 8009d60:	469e      	mov	lr, r3
 8009d62:	4770      	bx	lr

08009d64 <_fini>:
 8009d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d66:	bf00      	nop
 8009d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d6a:	bc08      	pop	{r3}
 8009d6c:	469e      	mov	lr, r3
 8009d6e:	4770      	bx	lr
