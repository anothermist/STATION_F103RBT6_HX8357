
STATION_F103RB_HX8357.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1d0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00010ec0  0800a2e0  0800a2e0  0001a2e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b1a0  0801b1a0  00030320  2**0
                  CONTENTS
  4 .ARM          00000000  0801b1a0  0801b1a0  00030320  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801b1a0  0801b1a0  00030320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b1a0  0801b1a0  0002b1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b1a4  0801b1a4  0002b1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000320  20000000  0801b1a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001158  20000320  0801b4c8  00030320  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001478  0801b4c8  00031478  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030320  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018012  00000000  00000000  00030349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b6a  00000000  00000000  0004835b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000f5c0  00000000  00000000  0004aec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  0005a488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002f18  00000000  00000000  0005ae88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001278c  00000000  00000000  0005dda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003ba5  00000000  00000000  0007052c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000740d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039d0  00000000  00000000  00074124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000320 	.word	0x20000320
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a2c8 	.word	0x0800a2c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000324 	.word	0x20000324
 800014c:	0800a2c8 	.word	0x0800a2c8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	; 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__aeabi_f2uiz>:
 8000eec:	0042      	lsls	r2, r0, #1
 8000eee:	d20e      	bcs.n	8000f0e <__aeabi_f2uiz+0x22>
 8000ef0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ef4:	d30b      	bcc.n	8000f0e <__aeabi_f2uiz+0x22>
 8000ef6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000efa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000efe:	d409      	bmi.n	8000f14 <__aeabi_f2uiz+0x28>
 8000f00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f08:	fa23 f002 	lsr.w	r0, r3, r2
 8000f0c:	4770      	bx	lr
 8000f0e:	f04f 0000 	mov.w	r0, #0
 8000f12:	4770      	bx	lr
 8000f14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f18:	d101      	bne.n	8000f1e <__aeabi_f2uiz+0x32>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d102      	bne.n	8000f24 <__aeabi_f2uiz+0x38>
 8000f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f22:	4770      	bx	lr
 8000f24:	f04f 0000 	mov.w	r0, #0
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <__aeabi_d2lz>:
 8000f2c:	b538      	push	{r3, r4, r5, lr}
 8000f2e:	4605      	mov	r5, r0
 8000f30:	460c      	mov	r4, r1
 8000f32:	2200      	movs	r2, #0
 8000f34:	2300      	movs	r3, #0
 8000f36:	4628      	mov	r0, r5
 8000f38:	4621      	mov	r1, r4
 8000f3a:	f7ff fdf3 	bl	8000b24 <__aeabi_dcmplt>
 8000f3e:	b928      	cbnz	r0, 8000f4c <__aeabi_d2lz+0x20>
 8000f40:	4628      	mov	r0, r5
 8000f42:	4621      	mov	r1, r4
 8000f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f48:	f000 b80a 	b.w	8000f60 <__aeabi_d2ulz>
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000f52:	f000 f805 	bl	8000f60 <__aeabi_d2ulz>
 8000f56:	4240      	negs	r0, r0
 8000f58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f5c:	bd38      	pop	{r3, r4, r5, pc}
 8000f5e:	bf00      	nop

08000f60 <__aeabi_d2ulz>:
 8000f60:	b5d0      	push	{r4, r6, r7, lr}
 8000f62:	2200      	movs	r2, #0
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <__aeabi_d2ulz+0x34>)
 8000f66:	4606      	mov	r6, r0
 8000f68:	460f      	mov	r7, r1
 8000f6a:	f7ff fb69 	bl	8000640 <__aeabi_dmul>
 8000f6e:	f7ff fe3f 	bl	8000bf0 <__aeabi_d2uiz>
 8000f72:	4604      	mov	r4, r0
 8000f74:	f7ff faea 	bl	800054c <__aeabi_ui2d>
 8000f78:	2200      	movs	r2, #0
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <__aeabi_d2ulz+0x38>)
 8000f7c:	f7ff fb60 	bl	8000640 <__aeabi_dmul>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4630      	mov	r0, r6
 8000f86:	4639      	mov	r1, r7
 8000f88:	f7ff f9a2 	bl	80002d0 <__aeabi_dsub>
 8000f8c:	f7ff fe30 	bl	8000bf0 <__aeabi_d2uiz>
 8000f90:	4621      	mov	r1, r4
 8000f92:	bdd0      	pop	{r4, r6, r7, pc}
 8000f94:	3df00000 	.word	0x3df00000
 8000f98:	41f00000 	.word	0x41f00000

08000f9c <AT24XX_Read>:
        return true;
    } else
        return false;
}

uint8_t AT24XX_Read(uint16_t address) {
 8000f9c:	b530      	push	{r4, r5, lr}
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8000f9e:	2564      	movs	r5, #100	; 0x64
 8000fa0:	2401      	movs	r4, #1
    uint16_t dt[1] = {NULL};
 8000fa2:	f04f 0c00 	mov.w	ip, #0
uint8_t AT24XX_Read(uint16_t address) {
 8000fa6:	b087      	sub	sp, #28
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8000fa8:	ab05      	add	r3, sp, #20
uint8_t AT24XX_Read(uint16_t address) {
 8000faa:	4602      	mov	r2, r0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	21ae      	movs	r1, #174	; 0xae
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8000fb6:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <AT24XX_Read+0x2c>)
    uint16_t dt[1] = {NULL};
 8000fb8:	f8ad c014 	strh.w	ip, [sp, #20]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8000fbc:	f003 fdb2 	bl	8004b24 <HAL_I2C_Mem_Read>
    AT24XX_Load(address, dt, 1);
    return dt[0];
}
 8000fc0:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8000fc4:	b007      	add	sp, #28
 8000fc6:	bd30      	pop	{r4, r5, pc}
 8000fc8:	20001390 	.word	0x20001390

08000fcc <AT24XX_Update>:
void AT24XX_Write(uint16_t address, uint8_t val) {
    uint8_t save[] = {val};
    AT24XX_Save(address, save, 1);
}

void AT24XX_Update(uint16_t address, uint8_t val) {
 8000fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t dt[1] = {NULL};
 8000fce:	2200      	movs	r2, #0
void AT24XX_Update(uint16_t address, uint8_t val) {
 8000fd0:	4605      	mov	r5, r0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8000fd2:	2764      	movs	r7, #100	; 0x64
 8000fd4:	2601      	movs	r6, #1
void AT24XX_Update(uint16_t address, uint8_t val) {
 8000fd6:	460c      	mov	r4, r1
 8000fd8:	b087      	sub	sp, #28
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8000fda:	ab05      	add	r3, sp, #20
 8000fdc:	9300      	str	r3, [sp, #0]
    uint16_t dt[1] = {NULL};
 8000fde:	f8ad 2014 	strh.w	r2, [sp, #20]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8000fe2:	2310      	movs	r3, #16
 8000fe4:	21ae      	movs	r1, #174	; 0xae
 8000fe6:	462a      	mov	r2, r5
 8000fe8:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <AT24XX_Update+0x58>)
 8000fee:	f003 fd99 	bl	8004b24 <HAL_I2C_Mem_Read>
    return dt[0];
 8000ff2:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 8000ff6:	429c      	cmp	r4, r3
 8000ff8:	d101      	bne.n	8000ffe <AT24XX_Update+0x32>
}
 8000ffa:	b007      	add	sp, #28
 8000ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8000ffe:	a905      	add	r1, sp, #20
 8001000:	9100      	str	r1, [sp, #0]
 8001002:	462a      	mov	r2, r5
 8001004:	2310      	movs	r3, #16
 8001006:	21ae      	movs	r1, #174	; 0xae
 8001008:	4806      	ldr	r0, [pc, #24]	; (8001024 <AT24XX_Update+0x58>)
 800100a:	9702      	str	r7, [sp, #8]
 800100c:	9601      	str	r6, [sp, #4]
    uint8_t save[] = {val};
 800100e:	f88d 4014 	strb.w	r4, [sp, #20]
    if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8001012:	f003 fc65 	bl	80048e0 <HAL_I2C_Mem_Write>
 8001016:	2800      	cmp	r0, #0
 8001018:	d1ef      	bne.n	8000ffa <AT24XX_Update+0x2e>
        HAL_Delay(5);
 800101a:	2005      	movs	r0, #5
 800101c:	f002 fb6e 	bl	80036fc <HAL_Delay>
}
 8001020:	b007      	add	sp, #28
 8001022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001024:	20001390 	.word	0x20001390

08001028 <BME280_getTemperature>:
float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
{                                                                                        // round_nth(1.235, 0) = 1.
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
}                                                                                        // round_nth(1.235, -2) = 1.24

float BME280_getTemperature(int8_t n) {
 8001028:	b570      	push	{r4, r5, r6, lr}
    uint32_t temp_raw;
    float tempf;
    uint8_t cmd[4];

    cmd[0] = 0xFA; // temp_msb
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800102a:	2564      	movs	r5, #100	; 0x64
    cmd[0] = 0xFA; // temp_msb
 800102c:	f04f 0cfa 	mov.w	ip, #250	; 0xfa
float BME280_getTemperature(int8_t n) {
 8001030:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001032:	4e33      	ldr	r6, [pc, #204]	; (8001100 <BME280_getTemperature+0xd8>)
float BME280_getTemperature(int8_t n) {
 8001034:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001036:	aa03      	add	r2, sp, #12
 8001038:	9500      	str	r5, [sp, #0]
 800103a:	2301      	movs	r3, #1
 800103c:	21ec      	movs	r1, #236	; 0xec
 800103e:	4630      	mov	r0, r6
    cmd[0] = 0xFA; // temp_msb
 8001040:	f88d c00c 	strb.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001044:	f003 f826 	bl	8004094 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8001048:	f10d 020d 	add.w	r2, sp, #13
 800104c:	9500      	str	r5, [sp, #0]
 800104e:	2303      	movs	r3, #3
 8001050:	4630      	mov	r0, r6
 8001052:	21ec      	movs	r1, #236	; 0xec
 8001054:	f003 f9b4 	bl	80043c0 <HAL_I2C_Master_Receive>

    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8001058:	f89d 000e 	ldrb.w	r0, [sp, #14]

    int32_t temp;

    temp =
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800105c:	4a29      	ldr	r2, [pc, #164]	; (8001104 <BME280_getTemperature+0xdc>)
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800105e:	f89d 300d 	ldrb.w	r3, [sp, #13]
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8001062:	8811      	ldrh	r1, [r2, #0]
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8001064:	0100      	lsls	r0, r0, #4
 8001066:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 800106a:	ebc1 1210 	rsb	r2, r1, r0, lsr #4
 800106e:	fb02 f302 	mul.w	r3, r2, r2
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8001072:	f89d 200f 	ldrb.w	r2, [sp, #15]
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8001076:	0049      	lsls	r1, r1, #1
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8001078:	ea40 1012 	orr.w	r0, r0, r2, lsr #4
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 800107c:	4a22      	ldr	r2, [pc, #136]	; (8001108 <BME280_getTemperature+0xe0>)
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800107e:	ebc1 01d0 	rsb	r1, r1, r0, lsr #3
 8001082:	4822      	ldr	r0, [pc, #136]	; (800110c <BME280_getTemperature+0xe4>)
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8001084:	f9b2 2000 	ldrsh.w	r2, [r2]
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8001088:	f9b0 0000 	ldrsh.w	r0, [r0]
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 800108c:	0b1b      	lsrs	r3, r3, #12
 800108e:	fb02 f303 	mul.w	r3, r2, r3
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8001092:	fb00 f101 	mul.w	r1, r0, r1

    t_fine = temp;
 8001096:	4a1e      	ldr	r2, [pc, #120]	; (8001110 <BME280_getTemperature+0xe8>)
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8001098:	0b9b      	lsrs	r3, r3, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800109a:	eb03 23d1 	add.w	r3, r3, r1, lsr #11
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 800109e:	4620      	mov	r0, r4
    t_fine = temp;
 80010a0:	6013      	str	r3, [r2, #0]
    temp = (temp * 5 + 128) >> 8;
 80010a2:	eb03 0683 	add.w	r6, r3, r3, lsl #2
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80010a6:	f7ff fa61 	bl	800056c <__aeabi_i2d>
 80010aa:	a313      	add	r3, pc, #76	; (adr r3, 80010f8 <BME280_getTemperature+0xd0>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	f7ff fac6 	bl	8000640 <__aeabi_dmul>
 80010b4:	f008 ff2c 	bl	8009f10 <exp>
 80010b8:	460d      	mov	r5, r1
 80010ba:	4604      	mov	r4, r0
    temp = (temp * 5 + 128) >> 8;
 80010bc:	3680      	adds	r6, #128	; 0x80
    tempf = (float) temp;
 80010be:	1230      	asrs	r0, r6, #8
 80010c0:	f7ff fec0 	bl	8000e44 <__aeabi_i2f>

    return round_nth((tempf / 100.0f), n);
 80010c4:	4913      	ldr	r1, [pc, #76]	; (8001114 <BME280_getTemperature+0xec>)
 80010c6:	f7ff f84b 	bl	8000160 <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80010ca:	f7ff fa61 	bl	8000590 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 80010ce:	4622      	mov	r2, r4
 80010d0:	462b      	mov	r3, r5
 80010d2:	f7ff fbdf 	bl	8000894 <__aeabi_ddiv>
 80010d6:	2200      	movs	r2, #0
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <BME280_getTemperature+0xf0>)
 80010da:	f7ff f8fb 	bl	80002d4 <__adddf3>
 80010de:	f008 fe97 	bl	8009e10 <floor>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4620      	mov	r0, r4
 80010e8:	4629      	mov	r1, r5
 80010ea:	f7ff faa9 	bl	8000640 <__aeabi_dmul>
 80010ee:	f7ff fd9f 	bl	8000c30 <__aeabi_d2f>
}
 80010f2:	b004      	add	sp, #16
 80010f4:	bd70      	pop	{r4, r5, r6, pc}
 80010f6:	bf00      	nop
 80010f8:	bbb55516 	.word	0xbbb55516
 80010fc:	40026bb1 	.word	0x40026bb1
 8001100:	20001390 	.word	0x20001390
 8001104:	2000035a 	.word	0x2000035a
 8001108:	2000035e 	.word	0x2000035e
 800110c:	2000035c 	.word	0x2000035c
 8001110:	20000360 	.word	0x20000360
 8001114:	3c23d70a 	.word	0x3c23d70a
 8001118:	3fe00000 	.word	0x3fe00000
 800111c:	00000000 	.word	0x00000000

08001120 <BME280_getHumidity>:

float BME280_getHumidity(int8_t n) {
 8001120:	b5d0      	push	{r4, r6, r7, lr}
    uint32_t hum_raw;
    float humf;
    uint8_t cmd[4];

    cmd[0] = 0xFD; // hum_msb
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001122:	2664      	movs	r6, #100	; 0x64
    cmd[0] = 0xFD; // hum_msb
 8001124:	f04f 0cfd 	mov.w	ip, #253	; 0xfd
float BME280_getHumidity(int8_t n) {
 8001128:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800112a:	4f41      	ldr	r7, [pc, #260]	; (8001230 <BME280_getHumidity+0x110>)
float BME280_getHumidity(int8_t n) {
 800112c:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800112e:	aa03      	add	r2, sp, #12
 8001130:	9600      	str	r6, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	21ec      	movs	r1, #236	; 0xec
 8001136:	4638      	mov	r0, r7
    cmd[0] = 0xFD; // hum_msb
 8001138:	f88d c00c 	strb.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800113c:	f002 ffaa 	bl	8004094 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 8001140:	f10d 020d 	add.w	r2, sp, #13
 8001144:	9600      	str	r6, [sp, #0]
 8001146:	2302      	movs	r3, #2
 8001148:	4638      	mov	r0, r7
 800114a:	21ec      	movs	r1, #236	; 0xec
 800114c:	f003 f938 	bl	80043c0 <HAL_I2C_Master_Receive>

    hum_raw = (cmd[1] << 8) | cmd[2];

    int32_t v_x1;

    v_x1 = t_fine - 76800;
 8001150:	4a38      	ldr	r2, [pc, #224]	; (8001234 <BME280_getHumidity+0x114>)
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8001152:	4b39      	ldr	r3, [pc, #228]	; (8001238 <BME280_getHumidity+0x118>)
    v_x1 = t_fine - 76800;
 8001154:	6811      	ldr	r1, [r2, #0]
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8001156:	4839      	ldr	r0, [pc, #228]	; (800123c <BME280_getHumidity+0x11c>)
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8001158:	881b      	ldrh	r3, [r3, #0]
    v_x1 = t_fine - 76800;
 800115a:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 800115e:	f9b0 2000 	ldrsh.w	r2, [r0]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8001162:	fb01 f303 	mul.w	r3, r1, r3
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8001166:	fb01 f202 	mul.w	r2, r1, r2
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 800116a:	4e35      	ldr	r6, [pc, #212]	; (8001240 <BME280_getHumidity+0x120>)
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800116c:	12db      	asrs	r3, r3, #11
    hum_raw = (cmd[1] << 8) | cmd[2];
 800116e:	f8bd 000d 	ldrh.w	r0, [sp, #13]
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8001172:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8001174:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8001178:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 800117c:	f9b6 2000 	ldrsh.w	r2, [r6]
    hum_raw = (cmd[1] << 8) | cmd[2];
 8001180:	ba40      	rev16	r0, r0
 8001182:	b280      	uxth	r0, r0
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8001184:	0512      	lsls	r2, r2, #20
 8001186:	ebc2 3280 	rsb	r2, r2, r0, lsl #14
 800118a:	482e      	ldr	r0, [pc, #184]	; (8001244 <BME280_getHumidity+0x124>)
 800118c:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001190:	f9b0 0000 	ldrsh.w	r0, [r0]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8001194:	129b      	asrs	r3, r3, #10
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8001196:	fb01 2210 	mls	r2, r1, r0, r2
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 800119a:	4620      	mov	r0, r4
                                            (int32_t) dig_H2 + 8192) >> 14));
 800119c:	4c2a      	ldr	r4, [pc, #168]	; (8001248 <BME280_getHumidity+0x128>)
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800119e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                                            (int32_t) dig_H2 + 8192) >> 14));
 80011a2:	f9b4 4000 	ldrsh.w	r4, [r4]
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80011a6:	0bd2      	lsrs	r2, r2, #15
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80011a8:	fb04 f303 	mul.w	r3, r4, r3
                                            (int32_t) dig_H2 + 8192) >> 14));
 80011ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80011b0:	139b      	asrs	r3, r3, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80011b2:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 80011b6:	13da      	asrs	r2, r3, #15
 80011b8:	fb02 f202 	mul.w	r2, r2, r2
 80011bc:	4923      	ldr	r1, [pc, #140]	; (800124c <BME280_getHumidity+0x12c>)
 80011be:	11d4      	asrs	r4, r2, #7
 80011c0:	8809      	ldrh	r1, [r1, #0]
 80011c2:	fb01 f404 	mul.w	r4, r1, r4
 80011c6:	eba3 1324 	sub.w	r3, r3, r4, asr #4
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 80011ca:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80011ce:	f7ff f9cd 	bl	800056c <__aeabi_i2d>
 80011d2:	a315      	add	r3, pc, #84	; (adr r3, 8001228 <BME280_getHumidity+0x108>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	f7ff fa32 	bl	8000640 <__aeabi_dmul>
 80011dc:	f008 fe98 	bl	8009f10 <exp>
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 80011e0:	f1b4 5fc8 	cmp.w	r4, #419430400	; 0x19000000
 80011e4:	bfa8      	it	ge
 80011e6:	f04f 54c8 	movge.w	r4, #419430400	; 0x19000000
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80011ea:	460f      	mov	r7, r1
 80011ec:	4606      	mov	r6, r0

    humf = (float) (v_x1 >> 12);
 80011ee:	1320      	asrs	r0, r4, #12
 80011f0:	f7ff fe28 	bl	8000e44 <__aeabi_i2f>

    return round_nth((humf / 1024.0f), n);
 80011f4:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 80011f8:	f7fe ffb2 	bl	8000160 <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 80011fc:	f7ff f9c8 	bl	8000590 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8001200:	4632      	mov	r2, r6
 8001202:	463b      	mov	r3, r7
 8001204:	f7ff fb46 	bl	8000894 <__aeabi_ddiv>
 8001208:	2200      	movs	r2, #0
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <BME280_getHumidity+0x130>)
 800120c:	f7ff f862 	bl	80002d4 <__adddf3>
 8001210:	f008 fdfe 	bl	8009e10 <floor>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4630      	mov	r0, r6
 800121a:	4639      	mov	r1, r7
 800121c:	f7ff fa10 	bl	8000640 <__aeabi_dmul>
 8001220:	f7ff fd06 	bl	8000c30 <__aeabi_d2f>
}
 8001224:	b004      	add	sp, #16
 8001226:	bdd0      	pop	{r4, r6, r7, pc}
 8001228:	bbb55516 	.word	0xbbb55516
 800122c:	40026bb1 	.word	0x40026bb1
 8001230:	20001390 	.word	0x20001390
 8001234:	20000360 	.word	0x20000360
 8001238:	20000340 	.word	0x20000340
 800123c:	20000346 	.word	0x20000346
 8001240:	20000342 	.word	0x20000342
 8001244:	20000344 	.word	0x20000344
 8001248:	2000033e 	.word	0x2000033e
 800124c:	2000033c 	.word	0x2000033c
 8001250:	3fe00000 	.word	0x3fe00000

08001254 <BME280_getPressure>:

float BME280_getPressure(void) {
 8001254:	b510      	push	{r4, lr}
    uint32_t press_raw;
    float pressf;
    uint8_t cmd[4];

    cmd[0] = 0xF7; // press_msb
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001256:	2464      	movs	r4, #100	; 0x64
    cmd[0] = 0xF7; // press_msb
 8001258:	f04f 0cf7 	mov.w	ip, #247	; 0xf7
float BME280_getPressure(void) {
 800125c:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800125e:	2301      	movs	r3, #1
 8001260:	21ec      	movs	r1, #236	; 0xec
 8001262:	aa03      	add	r2, sp, #12
 8001264:	9400      	str	r4, [sp, #0]
 8001266:	483e      	ldr	r0, [pc, #248]	; (8001360 <BME280_getPressure+0x10c>)
    cmd[0] = 0xF7; // press_msb
 8001268:	f88d c00c 	strb.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800126c:	f002 ff12 	bl	8004094 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8001270:	2303      	movs	r3, #3
 8001272:	21ec      	movs	r1, #236	; 0xec
 8001274:	9400      	str	r4, [sp, #0]
 8001276:	f10d 020d 	add.w	r2, sp, #13
 800127a:	4839      	ldr	r0, [pc, #228]	; (8001360 <BME280_getPressure+0x10c>)
 800127c:	f003 f8a0 	bl	80043c0 <HAL_I2C_Master_Receive>
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);

    int32_t var1, var2;
    uint32_t press;

    var1 = (t_fine >> 1) - 64000;
 8001280:	4b38      	ldr	r3, [pc, #224]	; (8001364 <BME280_getPressure+0x110>)
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
    var2 = var2 + ((var1 * dig_P5) << 1);
    var2 = (var2 >> 2) + (dig_P4 << 16);
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 8001282:	4839      	ldr	r0, [pc, #228]	; (8001368 <BME280_getPressure+0x114>)
    var1 = (t_fine >> 1) - 64000;
 8001284:	681a      	ldr	r2, [r3, #0]
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 8001286:	4c39      	ldr	r4, [pc, #228]	; (800136c <BME280_getPressure+0x118>)
    var1 = (t_fine >> 1) - 64000;
 8001288:	1052      	asrs	r2, r2, #1
 800128a:	f5a2 427a 	sub.w	r2, r2, #64000	; 0xfa00
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 800128e:	1091      	asrs	r1, r2, #2
 8001290:	fb01 f301 	mul.w	r3, r1, r1
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 8001294:	f9b0 0000 	ldrsh.w	r0, [r0]
 8001298:	f9b4 1000 	ldrsh.w	r1, [r4]
 800129c:	fb02 f000 	mul.w	r0, r2, r0
 80012a0:	135c      	asrs	r4, r3, #13
 80012a2:	fb04 f101 	mul.w	r1, r4, r1
 80012a6:	1040      	asrs	r0, r0, #1
 80012a8:	eb00 00e1 	add.w	r0, r0, r1, asr #3
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80012ac:	4930      	ldr	r1, [pc, #192]	; (8001370 <BME280_getPressure+0x11c>)
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80012ae:	1480      	asrs	r0, r0, #18
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80012b0:	8809      	ldrh	r1, [r1, #0]
 80012b2:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 80012b6:	fb01 f000 	mul.w	r0, r1, r0
    if (var1 == 0) {
 80012ba:	13c0      	asrs	r0, r0, #15
 80012bc:	d04c      	beq.n	8001358 <BME280_getPressure+0x104>
    var2 = var2 + ((var1 * dig_P5) << 1);
 80012be:	492d      	ldr	r1, [pc, #180]	; (8001374 <BME280_getPressure+0x120>)
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80012c0:	4c2d      	ldr	r4, [pc, #180]	; (8001378 <BME280_getPressure+0x124>)
    var2 = var2 + ((var1 * dig_P5) << 1);
 80012c2:	f9b1 1000 	ldrsh.w	r1, [r1]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80012c6:	f9b4 c000 	ldrsh.w	ip, [r4]
    var2 = var2 + ((var1 * dig_P5) << 1);
 80012ca:	fb01 f202 	mul.w	r2, r1, r2
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80012ce:	12d9      	asrs	r1, r3, #11
    var2 = var2 + ((var1 * dig_P5) << 1);
 80012d0:	0052      	lsls	r2, r2, #1
 80012d2:	fb0c 2201 	mla	r2, ip, r1, r2
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80012d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 80012da:	4928      	ldr	r1, [pc, #160]	; (800137c <BME280_getPressure+0x128>)
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80012dc:	f89d 400e 	ldrb.w	r4, [sp, #14]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 80012e0:	f9b1 1000 	ldrsh.w	r1, [r1]
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80012ea:	f89d 400d 	ldrb.w	r4, [sp, #13]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 80012ee:	0409      	lsls	r1, r1, #16
 80012f0:	eb01 02a2 	add.w	r2, r1, r2, asr #2
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80012f4:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
        return 0;
    }
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 80012f8:	4921      	ldr	r1, [pc, #132]	; (8001380 <BME280_getPressure+0x12c>)
 80012fa:	eb03 3322 	add.w	r3, r3, r2, asr #12
 80012fe:	fb01 f303 	mul.w	r3, r1, r3
 8001302:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8001306:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    if (press < 0x80000000) {
 800130a:	2b00      	cmp	r3, #0
        press = (press << 1) / var1;
    } else {
        press = (press / var1) * 2;
 800130c:	bfb3      	iteet	lt
 800130e:	fbb3 f0f0 	udivlt	r0, r3, r0
        press = (press << 1) / var1;
 8001312:	005b      	lslge	r3, r3, #1
 8001314:	fbb3 f0f0 	udivge	r0, r3, r0
        press = (press / var1) * 2;
 8001318:	0040      	lsllt	r0, r0, #1
    }
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 800131a:	08c3      	lsrs	r3, r0, #3
 800131c:	fb03 f203 	mul.w	r2, r3, r3
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8001320:	4918      	ldr	r1, [pc, #96]	; (8001384 <BME280_getPressure+0x130>)
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <BME280_getPressure+0x134>)
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8001324:	f9b1 4000 	ldrsh.w	r4, [r1]
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8001328:	f9b3 1000 	ldrsh.w	r1, [r3]
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800132c:	0883      	lsrs	r3, r0, #2
 800132e:	fb04 f303 	mul.w	r3, r4, r3
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8001332:	0b52      	lsrs	r2, r2, #13
 8001334:	fb01 f202 	mul.w	r2, r1, r2
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8001338:	4914      	ldr	r1, [pc, #80]	; (800138c <BME280_getPressure+0x138>)
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800133a:	135b      	asrs	r3, r3, #13
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 800133c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001340:	eb03 3322 	add.w	r3, r3, r2, asr #12
 8001344:	440b      	add	r3, r1

    pressf = (float) press;
 8001346:	eb00 1023 	add.w	r0, r0, r3, asr #4
 800134a:	f7ff fd77 	bl	8000e3c <__aeabi_ui2f>
    return (pressf / 100.0f);
 800134e:	4910      	ldr	r1, [pc, #64]	; (8001390 <BME280_getPressure+0x13c>)
 8001350:	f7fe ff06 	bl	8000160 <__aeabi_fmul>
}
 8001354:	b004      	add	sp, #16
 8001356:	bd10      	pop	{r4, pc}
        return 0;
 8001358:	2000      	movs	r0, #0
}
 800135a:	b004      	add	sp, #16
 800135c:	bd10      	pop	{r4, pc}
 800135e:	bf00      	nop
 8001360:	20001390 	.word	0x20001390
 8001364:	20000360 	.word	0x20000360
 8001368:	2000034a 	.word	0x2000034a
 800136c:	2000034c 	.word	0x2000034c
 8001370:	20000348 	.word	0x20000348
 8001374:	20000350 	.word	0x20000350
 8001378:	20000352 	.word	0x20000352
 800137c:	2000034e 	.word	0x2000034e
 8001380:	fffff3cb 	.word	0xfffff3cb
 8001384:	20000356 	.word	0x20000356
 8001388:	20000358 	.word	0x20000358
 800138c:	20000354 	.word	0x20000354
 8001390:	3c23d70a 	.word	0x3c23d70a

08001394 <BME280_Init>:

void BME280_Init(void) {
 8001394:	b570      	push	{r4, r5, r6, lr}
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
    cmd[1] = 0x05; // Humidity oversampling x16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8001396:	2464      	movs	r4, #100	; 0x64
    cmd[0] = 0xF2; // ctrl_hum
 8001398:	f240 5cf2 	movw	ip, #1522	; 0x5f2
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800139c:	4d5e      	ldr	r5, [pc, #376]	; (8001518 <BME280_Init+0x184>)
void BME280_Init(void) {
 800139e:	b088      	sub	sp, #32
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80013a0:	aa03      	add	r2, sp, #12
 80013a2:	9400      	str	r4, [sp, #0]
 80013a4:	2302      	movs	r3, #2
 80013a6:	21ec      	movs	r1, #236	; 0xec
 80013a8:	4628      	mov	r0, r5
    cmd[0] = 0xF2; // ctrl_hum
 80013aa:	f8ad c00c 	strh.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80013ae:	f002 fe71 	bl	8004094 <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF4; // ctrl_meas
 80013b2:	f24b 7cf4 	movw	ip, #47092	; 0xb7f4
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80013b6:	9400      	str	r4, [sp, #0]
 80013b8:	aa03      	add	r2, sp, #12
 80013ba:	2302      	movs	r3, #2
 80013bc:	21ec      	movs	r1, #236	; 0xec
 80013be:	4628      	mov	r0, r5
    cmd[0] = 0xF4; // ctrl_meas
 80013c0:	f8ad c00c 	strh.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80013c4:	f002 fe66 	bl	8004094 <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF5; // config
 80013c8:	f24a 0cf5 	movw	ip, #41205	; 0xa0f5
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80013cc:	9400      	str	r4, [sp, #0]
 80013ce:	aa03      	add	r2, sp, #12
 80013d0:	2302      	movs	r3, #2
 80013d2:	21ec      	movs	r1, #236	; 0xec
 80013d4:	4628      	mov	r0, r5
    cmd[0] = 0xF5; // config
 80013d6:	f8ad c00c 	strh.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80013da:	f002 fe5b 	bl	8004094 <HAL_I2C_Master_Transmit>

    cmd[0] = 0x88; // read dig_T regs
 80013de:	f04f 0c88 	mov.w	ip, #136	; 0x88
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80013e2:	9400      	str	r4, [sp, #0]
 80013e4:	aa03      	add	r2, sp, #12
 80013e6:	2301      	movs	r3, #1
 80013e8:	21ec      	movs	r1, #236	; 0xec
 80013ea:	4628      	mov	r0, r5
    cmd[0] = 0x88; // read dig_T regs
 80013ec:	f88d c00c 	strb.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80013f0:	f002 fe50 	bl	8004094 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 80013f4:	9400      	str	r4, [sp, #0]
 80013f6:	aa03      	add	r2, sp, #12
 80013f8:	2306      	movs	r3, #6
 80013fa:	21ec      	movs	r1, #236	; 0xec
 80013fc:	4628      	mov	r0, r5
 80013fe:	f002 ffdf 	bl	80043c0 <HAL_I2C_Master_Receive>

    dig_T1 = (cmd[1] << 8) | cmd[0];
    dig_T2 = (cmd[3] << 8) | cmd[2];
    dig_T3 = (cmd[5] << 8) | cmd[4];

    cmd[0] = 0x8E; // read dig_P regs
 8001402:	238e      	movs	r3, #142	; 0x8e
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8001404:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8001408:	4a44      	ldr	r2, [pc, #272]	; (800151c <BME280_Init+0x188>)
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800140a:	9400      	str	r4, [sp, #0]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 800140c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8001410:	8011      	strh	r1, [r2, #0]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8001412:	4a43      	ldr	r2, [pc, #268]	; (8001520 <BME280_Init+0x18c>)
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8001414:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8001418:	8010      	strh	r0, [r2, #0]
    dig_T3 = (cmd[5] << 8) | cmd[4];
 800141a:	4a42      	ldr	r2, [pc, #264]	; (8001524 <BME280_Init+0x190>)
    cmd[0] = 0x8E; // read dig_P regs
 800141c:	f88d 300c 	strb.w	r3, [sp, #12]
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8001420:	8011      	strh	r1, [r2, #0]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001422:	2301      	movs	r3, #1
 8001424:	aa03      	add	r2, sp, #12
 8001426:	21ec      	movs	r1, #236	; 0xec
 8001428:	4628      	mov	r0, r5
 800142a:	f002 fe33 	bl	8004094 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 800142e:	9400      	str	r4, [sp, #0]
 8001430:	aa03      	add	r2, sp, #12
 8001432:	2312      	movs	r3, #18
 8001434:	21ec      	movs	r1, #236	; 0xec
 8001436:	4628      	mov	r0, r5
 8001438:	f002 ffc2 	bl	80043c0 <HAL_I2C_Master_Receive>
    dig_P6 = (cmd[11] << 8) | cmd[10];
    dig_P7 = (cmd[13] << 8) | cmd[12];
    dig_P8 = (cmd[15] << 8) | cmd[14];
    dig_P9 = (cmd[17] << 8) | cmd[16];

    cmd[0] = 0xA1; // read dig_H regs
 800143c:	23a1      	movs	r3, #161	; 0xa1
    dig_P1 = (cmd[1] << 8) | cmd[0];
 800143e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8001442:	4a39      	ldr	r2, [pc, #228]	; (8001528 <BME280_Init+0x194>)
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001444:	9400      	str	r4, [sp, #0]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8001446:	f8bd 600e 	ldrh.w	r6, [sp, #14]
    dig_P1 = (cmd[1] << 8) | cmd[0];
 800144a:	8011      	strh	r1, [r2, #0]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 800144c:	4a37      	ldr	r2, [pc, #220]	; (800152c <BME280_Init+0x198>)
    dig_P6 = (cmd[11] << 8) | cmd[10];
 800144e:	f8bd e016 	ldrh.w	lr, [sp, #22]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8001452:	8016      	strh	r6, [r2, #0]
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8001454:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 8001458:	4a35      	ldr	r2, [pc, #212]	; (8001530 <BME280_Init+0x19c>)
    dig_P7 = (cmd[13] << 8) | cmd[12];
 800145a:	f8bd c018 	ldrh.w	ip, [sp, #24]
    dig_P3 = (cmd[5] << 8) | cmd[4];
 800145e:	8016      	strh	r6, [r2, #0]
    dig_P4 = (cmd[7] << 8) | cmd[6];
 8001460:	f8bd 6012 	ldrh.w	r6, [sp, #18]
 8001464:	4a33      	ldr	r2, [pc, #204]	; (8001534 <BME280_Init+0x1a0>)
    dig_P8 = (cmd[15] << 8) | cmd[14];
 8001466:	f8bd 001a 	ldrh.w	r0, [sp, #26]
    dig_P4 = (cmd[7] << 8) | cmd[6];
 800146a:	8016      	strh	r6, [r2, #0]
    dig_P5 = (cmd[9] << 8) | cmd[8];
 800146c:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 8001470:	4a31      	ldr	r2, [pc, #196]	; (8001538 <BME280_Init+0x1a4>)
    dig_P9 = (cmd[17] << 8) | cmd[16];
 8001472:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    dig_P5 = (cmd[9] << 8) | cmd[8];
 8001476:	8016      	strh	r6, [r2, #0]
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8001478:	4a30      	ldr	r2, [pc, #192]	; (800153c <BME280_Init+0x1a8>)
    cmd[0] = 0xA1; // read dig_H regs
 800147a:	f88d 300c 	strb.w	r3, [sp, #12]
    dig_P6 = (cmd[11] << 8) | cmd[10];
 800147e:	f8a2 e000 	strh.w	lr, [r2]
    dig_P7 = (cmd[13] << 8) | cmd[12];
 8001482:	4a2f      	ldr	r2, [pc, #188]	; (8001540 <BME280_Init+0x1ac>)
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001484:	2301      	movs	r3, #1
    dig_P7 = (cmd[13] << 8) | cmd[12];
 8001486:	f8a2 c000 	strh.w	ip, [r2]
    dig_P8 = (cmd[15] << 8) | cmd[14];
 800148a:	4a2e      	ldr	r2, [pc, #184]	; (8001544 <BME280_Init+0x1b0>)
 800148c:	8010      	strh	r0, [r2, #0]
    dig_P9 = (cmd[17] << 8) | cmd[16];
 800148e:	4a2e      	ldr	r2, [pc, #184]	; (8001548 <BME280_Init+0x1b4>)
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001490:	4628      	mov	r0, r5
    dig_P9 = (cmd[17] << 8) | cmd[16];
 8001492:	8011      	strh	r1, [r2, #0]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8001494:	aa03      	add	r2, sp, #12
 8001496:	21ec      	movs	r1, #236	; 0xec
 8001498:	f002 fdfc 	bl	8004094 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800149c:	aa03      	add	r2, sp, #12
 800149e:	9400      	str	r4, [sp, #0]
 80014a0:	2301      	movs	r3, #1
 80014a2:	21ec      	movs	r1, #236	; 0xec
 80014a4:	4628      	mov	r0, r5
 80014a6:	f002 ff8b 	bl	80043c0 <HAL_I2C_Master_Receive>

    cmd[1] = 0xE1; // read dig_H regs
 80014aa:	f04f 0ce1 	mov.w	ip, #225	; 0xe1

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 80014ae:	9400      	str	r4, [sp, #0]
 80014b0:	f10d 020d 	add.w	r2, sp, #13
 80014b4:	2301      	movs	r3, #1
 80014b6:	21ec      	movs	r1, #236	; 0xec
 80014b8:	4628      	mov	r0, r5
    cmd[1] = 0xE1; // read dig_H regs
 80014ba:	f88d c00d 	strb.w	ip, [sp, #13]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 80014be:	f002 fde9 	bl	8004094 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 80014c2:	f10d 020d 	add.w	r2, sp, #13
 80014c6:	9400      	str	r4, [sp, #0]
 80014c8:	2307      	movs	r3, #7
 80014ca:	21ec      	movs	r1, #236	; 0xec
 80014cc:	4628      	mov	r0, r5
 80014ce:	f002 ff77 	bl	80043c0 <HAL_I2C_Master_Receive>

    dig_H1 = cmd[0];
 80014d2:	f89d 400c 	ldrb.w	r4, [sp, #12]
 80014d6:	4a1d      	ldr	r2, [pc, #116]	; (800154c <BME280_Init+0x1b8>)
    dig_H2 = (cmd[2] << 8) | cmd[1];
    dig_H3 = cmd[3];
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80014d8:	f89d 3011 	ldrb.w	r3, [sp, #17]
    dig_H1 = cmd[0];
 80014dc:	8014      	strh	r4, [r2, #0]
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80014de:	f8bd 400d 	ldrh.w	r4, [sp, #13]
 80014e2:	4a1b      	ldr	r2, [pc, #108]	; (8001550 <BME280_Init+0x1bc>)
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80014e4:	f89d 0010 	ldrb.w	r0, [sp, #16]
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80014e8:	8014      	strh	r4, [r2, #0]
    dig_H3 = cmd[3];
 80014ea:	f89d 400f 	ldrb.w	r4, [sp, #15]
 80014ee:	4a19      	ldr	r2, [pc, #100]	; (8001554 <BME280_Init+0x1c0>)
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80014f0:	f89d 1012 	ldrb.w	r1, [sp, #18]
    dig_H3 = cmd[3];
 80014f4:	8014      	strh	r4, [r2, #0]
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80014f6:	f003 020f 	and.w	r2, r3, #15
 80014fa:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	4815      	ldr	r0, [pc, #84]	; (8001558 <BME280_Init+0x1c4>)
 8001502:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8001506:	4c15      	ldr	r4, [pc, #84]	; (800155c <BME280_Init+0x1c8>)
    dig_H6 = cmd[7];
 8001508:	4915      	ldr	r1, [pc, #84]	; (8001560 <BME280_Init+0x1cc>)
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 800150a:	8003      	strh	r3, [r0, #0]
    dig_H6 = cmd[7];
 800150c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8001510:	8022      	strh	r2, [r4, #0]
    dig_H6 = cmd[7];
 8001512:	800b      	strh	r3, [r1, #0]
}
 8001514:	b008      	add	sp, #32
 8001516:	bd70      	pop	{r4, r5, r6, pc}
 8001518:	20001390 	.word	0x20001390
 800151c:	2000035a 	.word	0x2000035a
 8001520:	2000035c 	.word	0x2000035c
 8001524:	2000035e 	.word	0x2000035e
 8001528:	20000348 	.word	0x20000348
 800152c:	2000034a 	.word	0x2000034a
 8001530:	2000034c 	.word	0x2000034c
 8001534:	2000034e 	.word	0x2000034e
 8001538:	20000350 	.word	0x20000350
 800153c:	20000352 	.word	0x20000352
 8001540:	20000354 	.word	0x20000354
 8001544:	20000356 	.word	0x20000356
 8001548:	20000358 	.word	0x20000358
 800154c:	2000033c 	.word	0x2000033c
 8001550:	2000033e 	.word	0x2000033e
 8001554:	20000340 	.word	0x20000340
 8001558:	20000344 	.word	0x20000344
 800155c:	20000342 	.word	0x20000342
 8001560:	20000346 	.word	0x20000346

08001564 <DS3231_Update>:

uint8_t bcdToDec(uint8_t val) {
    return ((val / 16 * 10) + (val % 16));
}

void DS3231_Update(void) {
 8001564:	b570      	push	{r4, r5, r6, lr}
    uint8_t cmd = 0;
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8001566:	2564      	movs	r5, #100	; 0x64
    uint8_t cmd = 0;
 8001568:	f04f 0c00 	mov.w	ip, #0
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 800156c:	4e11      	ldr	r6, [pc, #68]	; (80015b4 <DS3231_Update+0x50>)
void DS3231_Update(void) {
 800156e:	b084      	sub	sp, #16
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8001570:	4c11      	ldr	r4, [pc, #68]	; (80015b8 <DS3231_Update+0x54>)
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8001572:	f10d 020f 	add.w	r2, sp, #15
 8001576:	2301      	movs	r3, #1
 8001578:	21d0      	movs	r1, #208	; 0xd0
 800157a:	4630      	mov	r0, r6
 800157c:	9500      	str	r5, [sp, #0]
    uint8_t cmd = 0;
 800157e:	f88d c00f 	strb.w	ip, [sp, #15]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8001582:	f002 fd87 	bl	8004094 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8001586:	4622      	mov	r2, r4
 8001588:	2313      	movs	r3, #19
 800158a:	4630      	mov	r0, r6
 800158c:	21d0      	movs	r1, #208	; 0xd0
 800158e:	9500      	str	r5, [sp, #0]
 8001590:	f002 ff16 	bl	80043c0 <HAL_I2C_Master_Receive>
    rtcBufferSet[1] = rtcBuffer[0];
 8001594:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <DS3231_Update+0x58>)
 800159a:	68e2      	ldr	r2, [r4, #12]
 800159c:	6824      	ldr	r4, [r4, #0]
 800159e:	f8c3 0005 	str.w	r0, [r3, #5]
 80015a2:	f8c3 4001 	str.w	r4, [r3, #1]
 80015a6:	f8c3 1009 	str.w	r1, [r3, #9]
 80015aa:	f8c3 200d 	str.w	r2, [r3, #13]
    rtcBufferSet[12] = rtcBuffer[11];
    rtcBufferSet[13] = rtcBuffer[12];
    rtcBufferSet[14] = rtcBuffer[13];
    rtcBufferSet[15] = rtcBuffer[14];
    rtcBufferSet[16] = rtcBuffer[15];
}
 80015ae:	b004      	add	sp, #16
 80015b0:	bd70      	pop	{r4, r5, r6, pc}
 80015b2:	bf00      	nop
 80015b4:	20001390 	.word	0x20001390
 80015b8:	20000364 	.word	0x20000364
 80015bc:	20000378 	.word	0x20000378

080015c0 <DS3231_getSec>:

uint8_t DS3231_getSec(void) {
    return bcdToDec(rtcBuffer[0]);
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <DS3231_getSec+0x18>)
 80015c2:	7818      	ldrb	r0, [r3, #0]
    return ((val / 16 * 10) + (val % 16));
 80015c4:	0903      	lsrs	r3, r0, #4
 80015c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80015ca:	f000 000f 	and.w	r0, r0, #15
 80015ce:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80015d2:	b2c0      	uxtb	r0, r0
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000364 	.word	0x20000364

080015dc <DS3231_getMin>:

uint8_t DS3231_getMin(void) {
    return bcdToDec(rtcBuffer[1]);
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <DS3231_getMin+0x18>)
 80015de:	7858      	ldrb	r0, [r3, #1]
    return ((val / 16 * 10) + (val % 16));
 80015e0:	0903      	lsrs	r3, r0, #4
 80015e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80015e6:	f000 000f 	and.w	r0, r0, #15
 80015ea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80015ee:	b2c0      	uxtb	r0, r0
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000364 	.word	0x20000364

080015f8 <DS3231_getHrs>:

uint8_t DS3231_getHrs(void) {
    return bcdToDec(rtcBuffer[2]);
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <DS3231_getHrs+0x18>)
 80015fa:	7898      	ldrb	r0, [r3, #2]
    return ((val / 16 * 10) + (val % 16));
 80015fc:	0903      	lsrs	r3, r0, #4
 80015fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001602:	f000 000f 	and.w	r0, r0, #15
 8001606:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800160a:	b2c0      	uxtb	r0, r0
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000364 	.word	0x20000364

08001614 <DS3231_getDay>:

uint8_t DS3231_getDay(void) {
    return bcdToDec(rtcBuffer[3]);
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <DS3231_getDay+0x18>)
 8001616:	78d8      	ldrb	r0, [r3, #3]
    return ((val / 16 * 10) + (val % 16));
 8001618:	0903      	lsrs	r3, r0, #4
 800161a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800161e:	f000 000f 	and.w	r0, r0, #15
 8001622:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001626:	b2c0      	uxtb	r0, r0
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000364 	.word	0x20000364

08001630 <DS3231_getDate>:

uint8_t DS3231_getDate(void) {
    return bcdToDec(rtcBuffer[4]);
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <DS3231_getDate+0x18>)
 8001632:	7918      	ldrb	r0, [r3, #4]
    return ((val / 16 * 10) + (val % 16));
 8001634:	0903      	lsrs	r3, r0, #4
 8001636:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800163a:	f000 000f 	and.w	r0, r0, #15
 800163e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001642:	b2c0      	uxtb	r0, r0
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000364 	.word	0x20000364

0800164c <DS3231_getMonth>:

uint8_t DS3231_getMonth(void) {
    return bcdToDec(rtcBuffer[5]);
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <DS3231_getMonth+0x18>)
 800164e:	7958      	ldrb	r0, [r3, #5]
    return ((val / 16 * 10) + (val % 16));
 8001650:	0903      	lsrs	r3, r0, #4
 8001652:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001656:	f000 000f 	and.w	r0, r0, #15
 800165a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800165e:	b2c0      	uxtb	r0, r0
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000364 	.word	0x20000364

08001668 <DS3231_getYear>:

uint8_t DS3231_getYear(void) {
    return bcdToDec(rtcBuffer[6]);
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <DS3231_getYear+0x18>)
 800166a:	7998      	ldrb	r0, [r3, #6]
    return ((val / 16 * 10) + (val % 16));
 800166c:	0903      	lsrs	r3, r0, #4
 800166e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001672:	f000 000f 	and.w	r0, r0, #15
 8001676:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800167a:	b2c0      	uxtb	r0, r0
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000364 	.word	0x20000364

08001684 <DS3231_getAlarm1Min>:
uint8_t DS3231_getAlarm1Sec(void) {
    return bcdToDec(rtcBuffer[7]);
}

uint8_t DS3231_getAlarm1Min(void) {
    return bcdToDec(rtcBuffer[8]);
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <DS3231_getAlarm1Min+0x18>)
 8001686:	7a18      	ldrb	r0, [r3, #8]
    return ((val / 16 * 10) + (val % 16));
 8001688:	0903      	lsrs	r3, r0, #4
 800168a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800168e:	f000 000f 	and.w	r0, r0, #15
 8001692:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001696:	b2c0      	uxtb	r0, r0
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000364 	.word	0x20000364

080016a0 <DS3231_getAlarm1Hour>:

uint8_t DS3231_getAlarm1Hour(void) {
    return bcdToDec(rtcBuffer[9]);
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <DS3231_getAlarm1Hour+0x18>)
 80016a2:	7a58      	ldrb	r0, [r3, #9]
    return ((val / 16 * 10) + (val % 16));
 80016a4:	0903      	lsrs	r3, r0, #4
 80016a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80016aa:	f000 000f 	and.w	r0, r0, #15
 80016ae:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80016b2:	b2c0      	uxtb	r0, r0
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000364 	.word	0x20000364

080016bc <RGB>:
#include "hx8357.h"

uint32_t RGB(uint8_t r, uint8_t g, uint8_t b)
{   
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 80016bc:	0209      	lsls	r1, r1, #8
 80016be:	eb01 4000 	add.w	r0, r1, r0, lsl #16
}
 80016c2:	4410      	add	r0, r2
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop

080016c8 <LCD_Rect_Fill>:
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(0, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 80016c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016cc:	460c      	mov	r4, r1
 80016ce:	4605      	mov	r5, r0
 80016d0:	4694      	mov	ip, r2
	LCD_RS_R
 80016d2:	48cc      	ldr	r0, [pc, #816]	; (8001a04 <LCD_Rect_Fill+0x33c>)
{
 80016d4:	b091      	sub	sp, #68	; 0x44
	LCD_RS_S
 80016d6:	4680      	mov	r8, r0
{
 80016d8:	9501      	str	r5, [sp, #4]
  data[1] = x1 & 0xFF;
 80016da:	f88d 403d 	strb.w	r4, [sp, #61]	; 0x3d
	uint32_t i = 0;
	uint32_t j = (uint32_t) w * (uint32_t) h;
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80016de:	f104 3eff 	add.w	lr, r4, #4294967295
	data[0] = x1 >> 8;
 80016e2:	0a24      	lsrs	r4, r4, #8
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80016e4:	449e      	add	lr, r3
	data[0] = x1 >> 8;
 80016e6:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
	uint32_t j = (uint32_t) w * (uint32_t) h;
 80016ea:	fb03 f40c 	mul.w	r4, r3, ip
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80016ee:	9b01      	ldr	r3, [sp, #4]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 80016f0:	4ec5      	ldr	r6, [pc, #788]	; (8001a08 <LCD_Rect_Fill+0x340>)
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80016f2:	3b01      	subs	r3, #1
 80016f4:	449c      	add	ip, r3
 80016f6:	fa1f f38c 	uxth.w	r3, ip
	LCD_RS_R
 80016fa:	2200      	movs	r2, #0
 80016fc:	2101      	movs	r1, #1
  data[3] = x2 & 0xFF;
 80016fe:	f88d e03f 	strb.w	lr, [sp, #63]	; 0x3f
  data[2] = x2 >> 8;
 8001702:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8001706:	f88d e03e 	strb.w	lr, [sp, #62]	; 0x3e
	LCD_Window(y, x, y + h - 1, x + w - 1);
 800170a:	9302      	str	r3, [sp, #8]
{
 800170c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
	uint32_t j = (uint32_t) w * (uint32_t) h;
 800170e:	940d      	str	r4, [sp, #52]	; 0x34
	LCD_RS_R
 8001710:	f002 f97c 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_R
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800171a:	4640      	mov	r0, r8
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 800171c:	4dbb      	ldr	r5, [pc, #748]	; (8001a0c <LCD_Rect_Fill+0x344>)
	LCD_CS_R
 800171e:	f002 f975 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001722:	2200      	movs	r2, #0
 8001724:	2102      	movs	r1, #2
 8001726:	4630      	mov	r0, r6
 8001728:	f002 f970 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800172c:	2200      	movs	r2, #0
 800172e:	2101      	movs	r1, #1
 8001730:	4630      	mov	r0, r6
 8001732:	f002 f96b 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001736:	2200      	movs	r2, #0
 8001738:	2108      	movs	r1, #8
 800173a:	4628      	mov	r0, r5
 800173c:	f002 f966 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001740:	2200      	movs	r2, #0
 8001742:	2104      	movs	r1, #4
 8001744:	4628      	mov	r0, r5
 8001746:	f002 f961 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 800174a:	2200      	movs	r2, #0
 800174c:	2102      	movs	r1, #2
 800174e:	4628      	mov	r0, r5
 8001750:	f002 f95c 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001754:	2200      	movs	r2, #0
 8001756:	2101      	movs	r1, #1
 8001758:	4628      	mov	r0, r5
 800175a:	f002 f957 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 800175e:	2200      	movs	r2, #0
 8001760:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001764:	4628      	mov	r0, r5
 8001766:	f002 f951 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 800176a:	2200      	movs	r2, #0
 800176c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001770:	4628      	mov	r0, r5
 8001772:	f002 f94b 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001776:	2200      	movs	r2, #0
 8001778:	2104      	movs	r1, #4
 800177a:	4630      	mov	r0, r6
 800177c:	f002 f946 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001780:	2200      	movs	r2, #0
 8001782:	2108      	movs	r1, #8
 8001784:	4630      	mov	r0, r6
 8001786:	f002 f941 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800178a:	2201      	movs	r2, #1
 800178c:	2110      	movs	r1, #16
 800178e:	4630      	mov	r0, r6
 8001790:	f002 f93c 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001794:	2200      	movs	r2, #0
 8001796:	2120      	movs	r1, #32
 8001798:	4630      	mov	r0, r6
 800179a:	f002 f937 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800179e:	2201      	movs	r2, #1
 80017a0:	2140      	movs	r1, #64	; 0x40
 80017a2:	4630      	mov	r0, r6
 80017a4:	f002 f932 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80017a8:	2200      	movs	r2, #0
 80017aa:	2180      	movs	r1, #128	; 0x80
 80017ac:	4630      	mov	r0, r6
 80017ae:	f002 f92d 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80017b2:	2201      	movs	r2, #1
 80017b4:	2110      	movs	r1, #16
 80017b6:	4628      	mov	r0, r5
 80017b8:	f002 f928 	bl	8003a0c <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80017bc:	2200      	movs	r2, #0
 80017be:	2120      	movs	r1, #32
 80017c0:	4628      	mov	r0, r5
 80017c2:	f002 f923 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_R
 80017c6:	2200      	movs	r2, #0
 80017c8:	2102      	movs	r1, #2
 80017ca:	4640      	mov	r0, r8
 80017cc:	f002 f91e 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_S
 80017d0:	2201      	movs	r2, #1
 80017d2:	2102      	movs	r1, #2
 80017d4:	4640      	mov	r0, r8
 80017d6:	f002 f919 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_S
 80017da:	f10d 093c 	add.w	r9, sp, #60	; 0x3c
 80017de:	2201      	movs	r2, #1
 80017e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017e4:	4640      	mov	r0, r8
 80017e6:	46ca      	mov	sl, r9
 80017e8:	f10d 0b40 	add.w	fp, sp, #64	; 0x40
 80017ec:	f002 f90e 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_RS_S
 80017f0:	2201      	movs	r2, #1
 80017f2:	4640      	mov	r0, r8
 80017f4:	4611      	mov	r1, r2
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 80017f6:	f81a 4b01 	ldrb.w	r4, [sl], #1
	LCD_RS_S
 80017fa:	f002 f907 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_R	
 80017fe:	2200      	movs	r2, #0
 8001800:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001804:	4640      	mov	r0, r8
 8001806:	f002 f901 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 800180a:	2200      	movs	r2, #0
 800180c:	2102      	movs	r1, #2
 800180e:	4630      	mov	r0, r6
 8001810:	f002 f8fc 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001814:	2200      	movs	r2, #0
 8001816:	2101      	movs	r1, #1
 8001818:	4630      	mov	r0, r6
 800181a:	f002 f8f7 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 800181e:	2200      	movs	r2, #0
 8001820:	2108      	movs	r1, #8
 8001822:	4628      	mov	r0, r5
 8001824:	f002 f8f2 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001828:	2200      	movs	r2, #0
 800182a:	2104      	movs	r1, #4
 800182c:	4628      	mov	r0, r5
 800182e:	f002 f8ed 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8001832:	2200      	movs	r2, #0
 8001834:	2102      	movs	r1, #2
 8001836:	4628      	mov	r0, r5
 8001838:	f002 f8e8 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 800183c:	2200      	movs	r2, #0
 800183e:	2101      	movs	r1, #1
 8001840:	4628      	mov	r0, r5
 8001842:	f002 f8e3 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8001846:	2200      	movs	r2, #0
 8001848:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800184c:	4628      	mov	r0, r5
 800184e:	f002 f8dd 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001858:	4628      	mov	r0, r5
 800185a:	f002 f8d7 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800185e:	09e2      	lsrs	r2, r4, #7
 8001860:	bf18      	it	ne
 8001862:	2201      	movne	r2, #1
 8001864:	2104      	movs	r1, #4
 8001866:	4630      	mov	r0, r6
 8001868:	f002 f8d0 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800186c:	f014 0240 	ands.w	r2, r4, #64	; 0x40
 8001870:	bf18      	it	ne
 8001872:	2201      	movne	r2, #1
 8001874:	2108      	movs	r1, #8
 8001876:	4630      	mov	r0, r6
 8001878:	f002 f8c8 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800187c:	f014 0220 	ands.w	r2, r4, #32
 8001880:	bf18      	it	ne
 8001882:	2201      	movne	r2, #1
 8001884:	2110      	movs	r1, #16
 8001886:	4630      	mov	r0, r6
 8001888:	f002 f8c0 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800188c:	f014 0210 	ands.w	r2, r4, #16
 8001890:	bf18      	it	ne
 8001892:	2201      	movne	r2, #1
 8001894:	2120      	movs	r1, #32
 8001896:	4630      	mov	r0, r6
 8001898:	f002 f8b8 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800189c:	f014 0208 	ands.w	r2, r4, #8
 80018a0:	bf18      	it	ne
 80018a2:	2201      	movne	r2, #1
 80018a4:	2140      	movs	r1, #64	; 0x40
 80018a6:	4630      	mov	r0, r6
 80018a8:	f002 f8b0 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80018ac:	f014 0204 	ands.w	r2, r4, #4
 80018b0:	bf18      	it	ne
 80018b2:	2201      	movne	r2, #1
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	4630      	mov	r0, r6
 80018b8:	f002 f8a8 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80018bc:	f014 0202 	ands.w	r2, r4, #2
 80018c0:	bf18      	it	ne
 80018c2:	2201      	movne	r2, #1
 80018c4:	2110      	movs	r1, #16
 80018c6:	4628      	mov	r0, r5
 80018c8:	f002 f8a0 	bl	8003a0c <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80018cc:	f014 0401 	ands.w	r4, r4, #1
 80018d0:	f000 82ea 	beq.w	8001ea8 <LCD_Rect_Fill+0x7e0>
 80018d4:	2201      	movs	r2, #1
 80018d6:	2120      	movs	r1, #32
 80018d8:	4628      	mov	r0, r5
 80018da:	f002 f897 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_R
 80018de:	2200      	movs	r2, #0
 80018e0:	2102      	movs	r1, #2
 80018e2:	4640      	mov	r0, r8
 80018e4:	f002 f892 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_S
 80018e8:	2201      	movs	r2, #1
 80018ea:	2102      	movs	r1, #2
 80018ec:	4640      	mov	r0, r8
 80018ee:	f002 f88d 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_S
 80018f2:	2201      	movs	r2, #1
 80018f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018f8:	4640      	mov	r0, r8
 80018fa:	f002 f887 	bl	8003a0c <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 80018fe:	45d3      	cmp	fp, sl
 8001900:	f47f af76 	bne.w	80017f0 <LCD_Rect_Fill+0x128>
  data[1] = y1;
 8001904:	9b01      	ldr	r3, [sp, #4]
	LCD_RS_R
 8001906:	2200      	movs	r2, #0
  data[1] = y1;
 8001908:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
	data[0] = y1 >> 8;
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  data[3] = y2;
 8001912:	9b02      	ldr	r3, [sp, #8]
	LCD_RS_R
 8001914:	2101      	movs	r1, #1
  data[2] = y2 >> 8;
 8001916:	ea4f 2c13 	mov.w	ip, r3, lsr #8
	LCD_RS_R
 800191a:	483a      	ldr	r0, [pc, #232]	; (8001a04 <LCD_Rect_Fill+0x33c>)
  data[3] = y2;
 800191c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
  data[2] = y2 >> 8;
 8001920:	f88d c03e 	strb.w	ip, [sp, #62]	; 0x3e
	LCD_RS_R
 8001924:	f002 f872 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_R
 8001928:	2200      	movs	r2, #0
 800192a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800192e:	4835      	ldr	r0, [pc, #212]	; (8001a04 <LCD_Rect_Fill+0x33c>)
 8001930:	f002 f86c 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001934:	2200      	movs	r2, #0
 8001936:	2102      	movs	r1, #2
 8001938:	4833      	ldr	r0, [pc, #204]	; (8001a08 <LCD_Rect_Fill+0x340>)
 800193a:	f002 f867 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800193e:	2200      	movs	r2, #0
 8001940:	2101      	movs	r1, #1
 8001942:	4831      	ldr	r0, [pc, #196]	; (8001a08 <LCD_Rect_Fill+0x340>)
 8001944:	f002 f862 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001948:	2200      	movs	r2, #0
 800194a:	2108      	movs	r1, #8
 800194c:	482f      	ldr	r0, [pc, #188]	; (8001a0c <LCD_Rect_Fill+0x344>)
 800194e:	f002 f85d 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001952:	2200      	movs	r2, #0
 8001954:	2104      	movs	r1, #4
 8001956:	482d      	ldr	r0, [pc, #180]	; (8001a0c <LCD_Rect_Fill+0x344>)
 8001958:	f002 f858 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 800195c:	2200      	movs	r2, #0
 800195e:	2102      	movs	r1, #2
 8001960:	482a      	ldr	r0, [pc, #168]	; (8001a0c <LCD_Rect_Fill+0x344>)
 8001962:	f002 f853 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001966:	2200      	movs	r2, #0
 8001968:	2101      	movs	r1, #1
 800196a:	4828      	ldr	r0, [pc, #160]	; (8001a0c <LCD_Rect_Fill+0x344>)
 800196c:	f002 f84e 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8001970:	2200      	movs	r2, #0
 8001972:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001976:	4825      	ldr	r0, [pc, #148]	; (8001a0c <LCD_Rect_Fill+0x344>)
 8001978:	f002 f848 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 800197c:	2200      	movs	r2, #0
 800197e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001982:	4822      	ldr	r0, [pc, #136]	; (8001a0c <LCD_Rect_Fill+0x344>)
 8001984:	f002 f842 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001988:	2200      	movs	r2, #0
 800198a:	2104      	movs	r1, #4
 800198c:	481e      	ldr	r0, [pc, #120]	; (8001a08 <LCD_Rect_Fill+0x340>)
 800198e:	f002 f83d 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001992:	2200      	movs	r2, #0
 8001994:	2108      	movs	r1, #8
 8001996:	481c      	ldr	r0, [pc, #112]	; (8001a08 <LCD_Rect_Fill+0x340>)
 8001998:	f002 f838 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800199c:	2201      	movs	r2, #1
 800199e:	2110      	movs	r1, #16
 80019a0:	4819      	ldr	r0, [pc, #100]	; (8001a08 <LCD_Rect_Fill+0x340>)
 80019a2:	f002 f833 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80019a6:	2200      	movs	r2, #0
 80019a8:	2120      	movs	r1, #32
 80019aa:	4817      	ldr	r0, [pc, #92]	; (8001a08 <LCD_Rect_Fill+0x340>)
 80019ac:	f002 f82e 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80019b0:	2201      	movs	r2, #1
 80019b2:	2140      	movs	r1, #64	; 0x40
 80019b4:	4814      	ldr	r0, [pc, #80]	; (8001a08 <LCD_Rect_Fill+0x340>)
 80019b6:	f002 f829 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80019ba:	2200      	movs	r2, #0
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	4812      	ldr	r0, [pc, #72]	; (8001a08 <LCD_Rect_Fill+0x340>)
 80019c0:	f002 f824 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80019c4:	2201      	movs	r2, #1
 80019c6:	2110      	movs	r1, #16
 80019c8:	4810      	ldr	r0, [pc, #64]	; (8001a0c <LCD_Rect_Fill+0x344>)
 80019ca:	f002 f81f 	bl	8003a0c <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80019ce:	2201      	movs	r2, #1
 80019d0:	2120      	movs	r1, #32
 80019d2:	480e      	ldr	r0, [pc, #56]	; (8001a0c <LCD_Rect_Fill+0x344>)
 80019d4:	f002 f81a 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_R
 80019d8:	2200      	movs	r2, #0
 80019da:	2102      	movs	r1, #2
 80019dc:	4809      	ldr	r0, [pc, #36]	; (8001a04 <LCD_Rect_Fill+0x33c>)
 80019de:	f002 f815 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_S
 80019e2:	2201      	movs	r2, #1
 80019e4:	2102      	movs	r1, #2
 80019e6:	4807      	ldr	r0, [pc, #28]	; (8001a04 <LCD_Rect_Fill+0x33c>)
 80019e8:	f002 f810 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_S
 80019ec:	2201      	movs	r2, #1
 80019ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019f2:	4804      	ldr	r0, [pc, #16]	; (8001a04 <LCD_Rect_Fill+0x33c>)
 80019f4:	f002 f80a 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_RS_S
 80019f8:	f8df 8008 	ldr.w	r8, [pc, #8]	; 8001a04 <LCD_Rect_Fill+0x33c>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 80019fc:	4e02      	ldr	r6, [pc, #8]	; (8001a08 <LCD_Rect_Fill+0x340>)
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 80019fe:	4d03      	ldr	r5, [pc, #12]	; (8001a0c <LCD_Rect_Fill+0x344>)
 8001a00:	e006      	b.n	8001a10 <LCD_Rect_Fill+0x348>
 8001a02:	bf00      	nop
 8001a04:	40010c00 	.word	0x40010c00
 8001a08:	40010800 	.word	0x40010800
 8001a0c:	40011000 	.word	0x40011000
	LCD_RS_S
 8001a10:	2201      	movs	r2, #1
 8001a12:	4640      	mov	r0, r8
 8001a14:	4611      	mov	r1, r2
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 8001a16:	f819 4b01 	ldrb.w	r4, [r9], #1
	LCD_RS_S
 8001a1a:	f001 fff7 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_R	
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a24:	4640      	mov	r0, r8
 8001a26:	f001 fff1 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	4630      	mov	r0, r6
 8001a30:	f001 ffec 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001a34:	2200      	movs	r2, #0
 8001a36:	2101      	movs	r1, #1
 8001a38:	4630      	mov	r0, r6
 8001a3a:	f001 ffe7 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2108      	movs	r1, #8
 8001a42:	4628      	mov	r0, r5
 8001a44:	f001 ffe2 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2104      	movs	r1, #4
 8001a4c:	4628      	mov	r0, r5
 8001a4e:	f001 ffdd 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8001a52:	2200      	movs	r2, #0
 8001a54:	2102      	movs	r1, #2
 8001a56:	4628      	mov	r0, r5
 8001a58:	f001 ffd8 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2101      	movs	r1, #1
 8001a60:	4628      	mov	r0, r5
 8001a62:	f001 ffd3 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8001a66:	2200      	movs	r2, #0
 8001a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a6c:	4628      	mov	r0, r5
 8001a6e:	f001 ffcd 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a78:	4628      	mov	r0, r5
 8001a7a:	f001 ffc7 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001a7e:	09e2      	lsrs	r2, r4, #7
 8001a80:	bf18      	it	ne
 8001a82:	2201      	movne	r2, #1
 8001a84:	2104      	movs	r1, #4
 8001a86:	4630      	mov	r0, r6
 8001a88:	f001 ffc0 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001a8c:	f014 0240 	ands.w	r2, r4, #64	; 0x40
 8001a90:	bf18      	it	ne
 8001a92:	2201      	movne	r2, #1
 8001a94:	2108      	movs	r1, #8
 8001a96:	4630      	mov	r0, r6
 8001a98:	f001 ffb8 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001a9c:	f014 0220 	ands.w	r2, r4, #32
 8001aa0:	bf18      	it	ne
 8001aa2:	2201      	movne	r2, #1
 8001aa4:	2110      	movs	r1, #16
 8001aa6:	4630      	mov	r0, r6
 8001aa8:	f001 ffb0 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001aac:	f014 0210 	ands.w	r2, r4, #16
 8001ab0:	bf18      	it	ne
 8001ab2:	2201      	movne	r2, #1
 8001ab4:	2120      	movs	r1, #32
 8001ab6:	4630      	mov	r0, r6
 8001ab8:	f001 ffa8 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001abc:	f014 0208 	ands.w	r2, r4, #8
 8001ac0:	bf18      	it	ne
 8001ac2:	2201      	movne	r2, #1
 8001ac4:	2140      	movs	r1, #64	; 0x40
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	f001 ffa0 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001acc:	f014 0204 	ands.w	r2, r4, #4
 8001ad0:	bf18      	it	ne
 8001ad2:	2201      	movne	r2, #1
 8001ad4:	2180      	movs	r1, #128	; 0x80
 8001ad6:	4630      	mov	r0, r6
 8001ad8:	f001 ff98 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001adc:	f014 0202 	ands.w	r2, r4, #2
 8001ae0:	bf18      	it	ne
 8001ae2:	2201      	movne	r2, #1
 8001ae4:	2110      	movs	r1, #16
 8001ae6:	4628      	mov	r0, r5
 8001ae8:	f001 ff90 	bl	8003a0c <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001aec:	f014 0401 	ands.w	r4, r4, #1
 8001af0:	f000 81d8 	beq.w	8001ea4 <LCD_Rect_Fill+0x7dc>
 8001af4:	2201      	movs	r2, #1
 8001af6:	2120      	movs	r1, #32
 8001af8:	4628      	mov	r0, r5
 8001afa:	f001 ff87 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_R
 8001afe:	2200      	movs	r2, #0
 8001b00:	2102      	movs	r1, #2
 8001b02:	4640      	mov	r0, r8
 8001b04:	f001 ff82 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_S
 8001b08:	2201      	movs	r2, #1
 8001b0a:	2102      	movs	r1, #2
 8001b0c:	4640      	mov	r0, r8
 8001b0e:	f001 ff7d 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_S
 8001b12:	2201      	movs	r2, #1
 8001b14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b18:	4640      	mov	r0, r8
 8001b1a:	f001 ff77 	bl	8003a0c <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 8001b1e:	45d9      	cmp	r9, fp
 8001b20:	f47f af76 	bne.w	8001a10 <LCD_Rect_Fill+0x348>
	LCD_RS_R
 8001b24:	2200      	movs	r2, #0
 8001b26:	2101      	movs	r1, #1
 8001b28:	48cf      	ldr	r0, [pc, #828]	; (8001e68 <LCD_Rect_Fill+0x7a0>)
 8001b2a:	f001 ff6f 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_R
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b34:	48cc      	ldr	r0, [pc, #816]	; (8001e68 <LCD_Rect_Fill+0x7a0>)
 8001b36:	f001 ff69 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	48cb      	ldr	r0, [pc, #812]	; (8001e6c <LCD_Rect_Fill+0x7a4>)
 8001b40:	f001 ff64 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001b44:	2200      	movs	r2, #0
 8001b46:	2101      	movs	r1, #1
 8001b48:	48c8      	ldr	r0, [pc, #800]	; (8001e6c <LCD_Rect_Fill+0x7a4>)
 8001b4a:	f001 ff5f 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2108      	movs	r1, #8
 8001b52:	48c7      	ldr	r0, [pc, #796]	; (8001e70 <LCD_Rect_Fill+0x7a8>)
 8001b54:	f001 ff5a 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2104      	movs	r1, #4
 8001b5c:	48c4      	ldr	r0, [pc, #784]	; (8001e70 <LCD_Rect_Fill+0x7a8>)
 8001b5e:	f001 ff55 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8001b62:	2200      	movs	r2, #0
 8001b64:	2102      	movs	r1, #2
 8001b66:	48c2      	ldr	r0, [pc, #776]	; (8001e70 <LCD_Rect_Fill+0x7a8>)
 8001b68:	f001 ff50 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2101      	movs	r1, #1
 8001b70:	48bf      	ldr	r0, [pc, #764]	; (8001e70 <LCD_Rect_Fill+0x7a8>)
 8001b72:	f001 ff4b 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8001b76:	2200      	movs	r2, #0
 8001b78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b7c:	48bc      	ldr	r0, [pc, #752]	; (8001e70 <LCD_Rect_Fill+0x7a8>)
 8001b7e:	f001 ff45 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b88:	48b9      	ldr	r0, [pc, #740]	; (8001e70 <LCD_Rect_Fill+0x7a8>)
 8001b8a:	f001 ff3f 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2104      	movs	r1, #4
 8001b92:	48b6      	ldr	r0, [pc, #728]	; (8001e6c <LCD_Rect_Fill+0x7a4>)
 8001b94:	f001 ff3a 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2108      	movs	r1, #8
 8001b9c:	48b3      	ldr	r0, [pc, #716]	; (8001e6c <LCD_Rect_Fill+0x7a4>)
 8001b9e:	f001 ff35 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	2110      	movs	r1, #16
 8001ba6:	48b1      	ldr	r0, [pc, #708]	; (8001e6c <LCD_Rect_Fill+0x7a4>)
 8001ba8:	f001 ff30 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001bac:	2200      	movs	r2, #0
 8001bae:	2120      	movs	r1, #32
 8001bb0:	48ae      	ldr	r0, [pc, #696]	; (8001e6c <LCD_Rect_Fill+0x7a4>)
 8001bb2:	f001 ff2b 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	2140      	movs	r1, #64	; 0x40
 8001bba:	48ac      	ldr	r0, [pc, #688]	; (8001e6c <LCD_Rect_Fill+0x7a4>)
 8001bbc:	f001 ff26 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2180      	movs	r1, #128	; 0x80
 8001bc4:	48a9      	ldr	r0, [pc, #676]	; (8001e6c <LCD_Rect_Fill+0x7a4>)
 8001bc6:	f001 ff21 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2110      	movs	r1, #16
 8001bce:	48a8      	ldr	r0, [pc, #672]	; (8001e70 <LCD_Rect_Fill+0x7a8>)
 8001bd0:	f001 ff1c 	bl	8003a0c <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2120      	movs	r1, #32
 8001bd8:	48a5      	ldr	r0, [pc, #660]	; (8001e70 <LCD_Rect_Fill+0x7a8>)
 8001bda:	f001 ff17 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_R
 8001bde:	2200      	movs	r2, #0
 8001be0:	2102      	movs	r1, #2
 8001be2:	48a1      	ldr	r0, [pc, #644]	; (8001e68 <LCD_Rect_Fill+0x7a0>)
 8001be4:	f001 ff12 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_S
 8001be8:	2201      	movs	r2, #1
 8001bea:	2102      	movs	r1, #2
 8001bec:	489e      	ldr	r0, [pc, #632]	; (8001e68 <LCD_Rect_Fill+0x7a0>)
 8001bee:	f001 ff0d 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_S
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bf8:	489b      	ldr	r0, [pc, #620]	; (8001e68 <LCD_Rect_Fill+0x7a0>)
 8001bfa:	f001 ff07 	bl	8003a0c <HAL_GPIO_WritePin>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8001bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80df 	beq.w	8001dc4 <LCD_Rect_Fill+0x6fc>
 8001c06:	f04f 0900 	mov.w	r9, #0
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8001c0a:	f3c7 2685 	ubfx	r6, r7, #10, #6
 8001c0e:	f3c7 43c4 	ubfx	r3, r7, #19, #5
 8001c12:	0176      	lsls	r6, r6, #5
 8001c14:	ea46 26c3 	orr.w	r6, r6, r3, lsl #11
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001c18:	f3c3 1310 	ubfx	r3, r3, #4, #17
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	f3c6 3380 	ubfx	r3, r6, #14, #1
 8001c22:	9302      	str	r3, [sp, #8]
 8001c24:	f3c6 3340 	ubfx	r3, r6, #13, #1
 8001c28:	9303      	str	r3, [sp, #12]
 8001c2a:	f3c6 3300 	ubfx	r3, r6, #12, #1
 8001c2e:	9304      	str	r3, [sp, #16]
 8001c30:	f3c6 23c0 	ubfx	r3, r6, #11, #1
 8001c34:	9305      	str	r3, [sp, #20]
 8001c36:	f3c6 2380 	ubfx	r3, r6, #10, #1
 8001c3a:	9306      	str	r3, [sp, #24]
 8001c3c:	f3c6 2340 	ubfx	r3, r6, #9, #1
 8001c40:	9307      	str	r3, [sp, #28]
 8001c42:	f3c6 2300 	ubfx	r3, r6, #8, #1
 8001c46:	9308      	str	r3, [sp, #32]
 8001c48:	f3c6 13c0 	ubfx	r3, r6, #7, #1
 8001c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8001c4e:	f3c6 1380 	ubfx	r3, r6, #6, #1
 8001c52:	930a      	str	r3, [sp, #40]	; 0x28
 8001c54:	f3c7 1340 	ubfx	r3, r7, #5, #1
 8001c58:	930b      	str	r3, [sp, #44]	; 0x2c
	LCD_RS_S
 8001c5a:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8001e68 <LCD_Rect_Fill+0x7a0>
 8001c5e:	f3c7 1300 	ubfx	r3, r7, #4, #1
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001c62:	4d82      	ldr	r5, [pc, #520]	; (8001e6c <LCD_Rect_Fill+0x7a4>)
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001c64:	4c82      	ldr	r4, [pc, #520]	; (8001e70 <LCD_Rect_Fill+0x7a8>)
 8001c66:	f3c7 1bc0 	ubfx	fp, r7, #7, #1
 8001c6a:	f3c7 1a80 	ubfx	sl, r7, #6, #1
 8001c6e:	f3c6 1640 	ubfx	r6, r6, #5, #1
 8001c72:	930c      	str	r3, [sp, #48]	; 0x30
 8001c74:	f3c7 07c0 	ubfx	r7, r7, #3, #1
	LCD_RS_S
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4640      	mov	r0, r8
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	f001 fec5 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_R	
 8001c82:	2200      	movs	r2, #0
 8001c84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c88:	4640      	mov	r0, r8
 8001c8a:	f001 febf 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001c8e:	9b01      	ldr	r3, [sp, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80ef 	beq.w	8001e74 <LCD_Rect_Fill+0x7ac>
 8001c96:	2201      	movs	r2, #1
 8001c98:	2102      	movs	r1, #2
 8001c9a:	4628      	mov	r0, r5
 8001c9c:	f001 feb6 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001ca0:	9b02      	ldr	r3, [sp, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 80ef 	beq.w	8001e86 <LCD_Rect_Fill+0x7be>
 8001ca8:	2201      	movs	r2, #1
 8001caa:	4628      	mov	r0, r5
 8001cac:	4611      	mov	r1, r2
 8001cae:	f001 fead 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001cb2:	9b03      	ldr	r3, [sp, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80ef 	beq.w	8001e98 <LCD_Rect_Fill+0x7d0>
 8001cba:	2201      	movs	r2, #1
 8001cbc:	2108      	movs	r1, #8
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f001 fea4 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001cc4:	9b04      	ldr	r3, [sp, #16]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 80c7 	beq.w	8001e5a <LCD_Rect_Fill+0x792>
 8001ccc:	2201      	movs	r2, #1
 8001cce:	2104      	movs	r1, #4
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	f001 fe9b 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8001cd6:	9b05      	ldr	r3, [sp, #20]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 80b8 	beq.w	8001e4e <LCD_Rect_Fill+0x786>
 8001cde:	2201      	movs	r2, #1
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	f001 fe92 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001ce8:	9b06      	ldr	r3, [sp, #24]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80a9 	beq.w	8001e42 <LCD_Rect_Fill+0x77a>
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	f001 fe89 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8001cfa:	9b07      	ldr	r3, [sp, #28]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 8099 	beq.w	8001e34 <LCD_Rect_Fill+0x76c>
 8001d02:	2201      	movs	r2, #1
 8001d04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d08:	4620      	mov	r0, r4
 8001d0a:	f001 fe7f 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001d0e:	9b08      	ldr	r3, [sp, #32]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 8088 	beq.w	8001e26 <LCD_Rect_Fill+0x75e>
 8001d16:	2201      	movs	r2, #1
 8001d18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	f001 fe75 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d078      	beq.n	8001e1a <LCD_Rect_Fill+0x752>
 8001d28:	2201      	movs	r2, #1
 8001d2a:	2104      	movs	r1, #4
 8001d2c:	4628      	mov	r0, r5
 8001d2e:	f001 fe6d 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d06a      	beq.n	8001e0e <LCD_Rect_Fill+0x746>
 8001d38:	2201      	movs	r2, #1
 8001d3a:	2108      	movs	r1, #8
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	f001 fe65 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001d42:	2e00      	cmp	r6, #0
 8001d44:	d05d      	beq.n	8001e02 <LCD_Rect_Fill+0x73a>
 8001d46:	2201      	movs	r2, #1
 8001d48:	2110      	movs	r1, #16
 8001d4a:	4628      	mov	r0, r5
 8001d4c:	f001 fe5e 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001d50:	f1bb 0f00 	cmp.w	fp, #0
 8001d54:	d04f      	beq.n	8001df6 <LCD_Rect_Fill+0x72e>
 8001d56:	2201      	movs	r2, #1
 8001d58:	2120      	movs	r1, #32
 8001d5a:	4628      	mov	r0, r5
 8001d5c:	f001 fe56 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001d60:	f1ba 0f00 	cmp.w	sl, #0
 8001d64:	d041      	beq.n	8001dea <LCD_Rect_Fill+0x722>
 8001d66:	2201      	movs	r2, #1
 8001d68:	2140      	movs	r1, #64	; 0x40
 8001d6a:	4628      	mov	r0, r5
 8001d6c:	f001 fe4e 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001d72:	b3a3      	cbz	r3, 8001dde <LCD_Rect_Fill+0x716>
 8001d74:	2201      	movs	r2, #1
 8001d76:	2180      	movs	r1, #128	; 0x80
 8001d78:	4628      	mov	r0, r5
 8001d7a:	f001 fe47 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001d7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001d80:	b33b      	cbz	r3, 8001dd2 <LCD_Rect_Fill+0x70a>
 8001d82:	2201      	movs	r2, #1
 8001d84:	2110      	movs	r1, #16
 8001d86:	4620      	mov	r0, r4
 8001d88:	f001 fe40 	bl	8003a0c <HAL_GPIO_WritePin>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8001d8c:	f109 0901 	add.w	r9, r9, #1
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001d90:	b1df      	cbz	r7, 8001dca <LCD_Rect_Fill+0x702>
 8001d92:	2201      	movs	r2, #1
 8001d94:	2120      	movs	r1, #32
 8001d96:	4620      	mov	r0, r4
 8001d98:	f001 fe38 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_R
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2102      	movs	r1, #2
 8001da0:	4640      	mov	r0, r8
 8001da2:	f001 fe33 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_S
 8001da6:	2201      	movs	r2, #1
 8001da8:	2102      	movs	r1, #2
 8001daa:	4640      	mov	r0, r8
 8001dac:	f001 fe2e 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_S
 8001db0:	2201      	movs	r2, #1
 8001db2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001db6:	4640      	mov	r0, r8
 8001db8:	f001 fe28 	bl	8003a0c <HAL_GPIO_WritePin>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8001dbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001dbe:	454b      	cmp	r3, r9
 8001dc0:	f47f af5a 	bne.w	8001c78 <LCD_Rect_Fill+0x5b0>
}
 8001dc4:	b011      	add	sp, #68	; 0x44
 8001dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001dca:	2120      	movs	r1, #32
 8001dcc:	4620      	mov	r0, r4
 8001dce:	463a      	mov	r2, r7
 8001dd0:	e7e2      	b.n	8001d98 <LCD_Rect_Fill+0x6d0>
 8001dd2:	461a      	mov	r2, r3
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001dd4:	2110      	movs	r1, #16
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f001 fe18 	bl	8003a0c <HAL_GPIO_WritePin>
 8001ddc:	e7d6      	b.n	8001d8c <LCD_Rect_Fill+0x6c4>
 8001dde:	461a      	mov	r2, r3
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001de0:	2180      	movs	r1, #128	; 0x80
 8001de2:	4628      	mov	r0, r5
 8001de4:	f001 fe12 	bl	8003a0c <HAL_GPIO_WritePin>
 8001de8:	e7c9      	b.n	8001d7e <LCD_Rect_Fill+0x6b6>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001dea:	4652      	mov	r2, sl
 8001dec:	2140      	movs	r1, #64	; 0x40
 8001dee:	4628      	mov	r0, r5
 8001df0:	f001 fe0c 	bl	8003a0c <HAL_GPIO_WritePin>
 8001df4:	e7bc      	b.n	8001d70 <LCD_Rect_Fill+0x6a8>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001df6:	465a      	mov	r2, fp
 8001df8:	2120      	movs	r1, #32
 8001dfa:	4628      	mov	r0, r5
 8001dfc:	f001 fe06 	bl	8003a0c <HAL_GPIO_WritePin>
 8001e00:	e7ae      	b.n	8001d60 <LCD_Rect_Fill+0x698>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001e02:	4632      	mov	r2, r6
 8001e04:	2110      	movs	r1, #16
 8001e06:	4628      	mov	r0, r5
 8001e08:	f001 fe00 	bl	8003a0c <HAL_GPIO_WritePin>
 8001e0c:	e7a0      	b.n	8001d50 <LCD_Rect_Fill+0x688>
 8001e0e:	461a      	mov	r2, r3
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001e10:	2108      	movs	r1, #8
 8001e12:	4628      	mov	r0, r5
 8001e14:	f001 fdfa 	bl	8003a0c <HAL_GPIO_WritePin>
 8001e18:	e793      	b.n	8001d42 <LCD_Rect_Fill+0x67a>
 8001e1a:	461a      	mov	r2, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001e1c:	2104      	movs	r1, #4
 8001e1e:	4628      	mov	r0, r5
 8001e20:	f001 fdf4 	bl	8003a0c <HAL_GPIO_WritePin>
 8001e24:	e785      	b.n	8001d32 <LCD_Rect_Fill+0x66a>
 8001e26:	461a      	mov	r2, r3
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001e28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f001 fded 	bl	8003a0c <HAL_GPIO_WritePin>
 8001e32:	e776      	b.n	8001d22 <LCD_Rect_Fill+0x65a>
 8001e34:	461a      	mov	r2, r3
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8001e36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f001 fde6 	bl	8003a0c <HAL_GPIO_WritePin>
 8001e40:	e765      	b.n	8001d0e <LCD_Rect_Fill+0x646>
 8001e42:	461a      	mov	r2, r3
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001e44:	2101      	movs	r1, #1
 8001e46:	4620      	mov	r0, r4
 8001e48:	f001 fde0 	bl	8003a0c <HAL_GPIO_WritePin>
 8001e4c:	e755      	b.n	8001cfa <LCD_Rect_Fill+0x632>
 8001e4e:	461a      	mov	r2, r3
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8001e50:	2102      	movs	r1, #2
 8001e52:	4620      	mov	r0, r4
 8001e54:	f001 fdda 	bl	8003a0c <HAL_GPIO_WritePin>
 8001e58:	e746      	b.n	8001ce8 <LCD_Rect_Fill+0x620>
 8001e5a:	461a      	mov	r2, r3
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001e5c:	2104      	movs	r1, #4
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f001 fdd4 	bl	8003a0c <HAL_GPIO_WritePin>
 8001e64:	e737      	b.n	8001cd6 <LCD_Rect_Fill+0x60e>
 8001e66:	bf00      	nop
 8001e68:	40010c00 	.word	0x40010c00
 8001e6c:	40010800 	.word	0x40010800
 8001e70:	40011000 	.word	0x40011000
 8001e74:	461a      	mov	r2, r3
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001e76:	2102      	movs	r1, #2
 8001e78:	4628      	mov	r0, r5
 8001e7a:	f001 fdc7 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001e7e:	9b02      	ldr	r3, [sp, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f47f af11 	bne.w	8001ca8 <LCD_Rect_Fill+0x5e0>
 8001e86:	461a      	mov	r2, r3
 8001e88:	2101      	movs	r1, #1
 8001e8a:	4628      	mov	r0, r5
 8001e8c:	f001 fdbe 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001e90:	9b03      	ldr	r3, [sp, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f47f af11 	bne.w	8001cba <LCD_Rect_Fill+0x5f2>
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2108      	movs	r1, #8
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	f001 fdb5 	bl	8003a0c <HAL_GPIO_WritePin>
 8001ea2:	e70f      	b.n	8001cc4 <LCD_Rect_Fill+0x5fc>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001ea4:	4622      	mov	r2, r4
 8001ea6:	e626      	b.n	8001af6 <LCD_Rect_Fill+0x42e>
 8001ea8:	2120      	movs	r1, #32
 8001eaa:	4628      	mov	r0, r5
 8001eac:	4622      	mov	r2, r4
 8001eae:	e514      	b.n	80018da <LCD_Rect_Fill+0x212>

08001eb0 <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
{
 8001eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eb4:	b087      	sub	sp, #28
 8001eb6:	461c      	mov	r4, r3
 8001eb8:	9305      	str	r3, [sp, #20]
	int deltaX = abs(x2 - x1);
	int deltaY = abs(y2 - y1);
 8001eba:	1a5b      	subs	r3, r3, r1
	int deltaX = abs(x2 - x1);
 8001ebc:	1a15      	subs	r5, r2, r0
{
 8001ebe:	468b      	mov	fp, r1
	int deltaY = abs(y2 - y1);
 8001ec0:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
	int deltaX = abs(x2 - x1);
 8001ec4:	2d00      	cmp	r5, #0
	int deltaY = abs(y2 - y1);
 8001ec6:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001eca:	460b      	mov	r3, r1
	int deltaX = abs(x2 - x1);
 8001ecc:	bfb8      	it	lt
 8001ece:	426d      	neglt	r5, r5
	int deltaY = abs(y2 - y1);
 8001ed0:	9104      	str	r1, [sp, #16]
	int signX = x1 < x2 ? 1 : -1;
 8001ed2:	4282      	cmp	r2, r0
 8001ed4:	bf8c      	ite	hi
 8001ed6:	2101      	movhi	r1, #1
 8001ed8:	f04f 31ff 	movls.w	r1, #4294967295
{
 8001edc:	4682      	mov	sl, r0
 8001ede:	4616      	mov	r6, r2
	int signY = y1 < y2 ? 1 : -1;
	int error = deltaX - deltaY;
	int error2 = 0;
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8001ee0:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	int signY = y1 < y2 ? 1 : -1;
 8001ee4:	455c      	cmp	r4, fp
 8001ee6:	bf8c      	ite	hi
 8001ee8:	2701      	movhi	r7, #1
 8001eea:	f04f 37ff 	movls.w	r7, #4294967295
	int signX = x1 < x2 ? 1 : -1;
 8001eee:	9103      	str	r1, [sp, #12]
	int error = deltaX - deltaY;
 8001ef0:	1aec      	subs	r4, r5, r3
		if (x1 == x2 && y1 == y2)
		break;
		error2 = error * 2;
		if (error2 > -deltaY)
 8001ef2:	f1c3 0900 	rsb	r9, r3, #0
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8001ef6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001ef8:	4643      	mov	r3, r8
 8001efa:	9200      	str	r2, [sp, #0]
 8001efc:	4659      	mov	r1, fp
 8001efe:	4642      	mov	r2, r8
 8001f00:	4650      	mov	r0, sl
 8001f02:	f7ff fbe1 	bl	80016c8 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8001f06:	45b2      	cmp	sl, r6
		error2 = error * 2;
 8001f08:	ea4f 0344 	mov.w	r3, r4, lsl #1
			x1 += signX;
		}
		if (error2 < deltaX)
		{
			error += deltaX;
			y1 += signY;
 8001f0c:	eb0b 0207 	add.w	r2, fp, r7
		if (x1 == x2 && y1 == y2)
 8001f10:	d00e      	beq.n	8001f30 <LCD_Line+0x80>
		if (error2 > -deltaY)
 8001f12:	ebb9 0f44 	cmp.w	r9, r4, lsl #1
 8001f16:	da05      	bge.n	8001f24 <LCD_Line+0x74>
			x1 += signX;
 8001f18:	9903      	ldr	r1, [sp, #12]
 8001f1a:	448a      	add	sl, r1
			error -= deltaY;
 8001f1c:	9904      	ldr	r1, [sp, #16]
			x1 += signX;
 8001f1e:	fa1f fa8a 	uxth.w	sl, sl
			error -= deltaY;
 8001f22:	1a64      	subs	r4, r4, r1
		if (error2 < deltaX)
 8001f24:	429d      	cmp	r5, r3
 8001f26:	dde6      	ble.n	8001ef6 <LCD_Line+0x46>
			error += deltaX;
 8001f28:	442c      	add	r4, r5
			y1 += signY;
 8001f2a:	fa1f fb82 	uxth.w	fp, r2
 8001f2e:	e7e2      	b.n	8001ef6 <LCD_Line+0x46>
		if (x1 == x2 && y1 == y2)
 8001f30:	9905      	ldr	r1, [sp, #20]
 8001f32:	458b      	cmp	fp, r1
 8001f34:	d1ed      	bne.n	8001f12 <LCD_Line+0x62>
		}
	}
}
 8001f36:	b007      	add	sp, #28
 8001f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001f3c <LCD_Rect>:
		y += yinc2;
	}
}

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
{
 8001f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LCD_Line(x, y, x + w, y, size, color24);
 8001f40:	4402      	add	r2, r0
 8001f42:	fa1f f982 	uxth.w	r9, r2
	int deltaX = abs(x2 - x1);
 8001f46:	eba9 0600 	sub.w	r6, r9, r0
{
 8001f4a:	b087      	sub	sp, #28
	int deltaX = abs(x2 - x1);
 8001f4c:	2e00      	cmp	r6, #0
 8001f4e:	bfb8      	it	lt
 8001f50:	4276      	neglt	r6, r6
{
 8001f52:	9304      	str	r3, [sp, #16]
	int signX = x1 < x2 ? 1 : -1;
 8001f54:	4581      	cmp	r9, r0
 8001f56:	bf8c      	ite	hi
 8001f58:	2301      	movhi	r3, #1
 8001f5a:	f04f 33ff 	movls.w	r3, #4294967295
{
 8001f5e:	4604      	mov	r4, r0
 8001f60:	4688      	mov	r8, r1
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8001f62:	468a      	mov	sl, r1
	int deltaX = abs(x2 - x1);
 8001f64:	4637      	mov	r7, r6
{
 8001f66:	9d11      	ldr	r5, [sp, #68]	; 0x44
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8001f68:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
{
 8001f6c:	9003      	str	r0, [sp, #12]
	int signX = x1 < x2 ? 1 : -1;
 8001f6e:	9302      	str	r3, [sp, #8]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8001f70:	465a      	mov	r2, fp
 8001f72:	4651      	mov	r1, sl
 8001f74:	4620      	mov	r0, r4
 8001f76:	465b      	mov	r3, fp
 8001f78:	9500      	str	r5, [sp, #0]
 8001f7a:	f7ff fba5 	bl	80016c8 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8001f7e:	45a1      	cmp	r9, r4
			y1 += signY;
 8001f80:	f10a 32ff 	add.w	r2, sl, #4294967295
		if (x1 == x2 && y1 == y2)
 8001f84:	d00a      	beq.n	8001f9c <LCD_Rect+0x60>
		if (error2 > -deltaY)
 8001f86:	007b      	lsls	r3, r7, #1
 8001f88:	d002      	beq.n	8001f90 <LCD_Rect+0x54>
			x1 += signX;
 8001f8a:	9902      	ldr	r1, [sp, #8]
 8001f8c:	440c      	add	r4, r1
 8001f8e:	b2a4      	uxth	r4, r4
		if (error2 < deltaX)
 8001f90:	429e      	cmp	r6, r3
 8001f92:	dded      	ble.n	8001f70 <LCD_Rect+0x34>
			error += deltaX;
 8001f94:	4437      	add	r7, r6
			y1 += signY;
 8001f96:	fa1f fa82 	uxth.w	sl, r2
 8001f9a:	e7e9      	b.n	8001f70 <LCD_Rect+0x34>
		if (x1 == x2 && y1 == y2)
 8001f9c:	45d0      	cmp	r8, sl
 8001f9e:	d1f2      	bne.n	8001f86 <LCD_Rect+0x4a>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8001fa0:	9b04      	ldr	r3, [sp, #16]
	int deltaX = abs(x2 - x1);
 8001fa2:	46b1      	mov	r9, r6
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8001fa4:	4443      	add	r3, r8
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	461f      	mov	r7, r3
 8001faa:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8001fae:	9304      	str	r3, [sp, #16]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8001fb0:	465a      	mov	r2, fp
 8001fb2:	4639      	mov	r1, r7
 8001fb4:	4650      	mov	r0, sl
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	9500      	str	r5, [sp, #0]
 8001fba:	f7ff fb85 	bl	80016c8 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8001fbe:	45a2      	cmp	sl, r4
			y1 += signY;
 8001fc0:	f107 32ff 	add.w	r2, r7, #4294967295
		if (x1 == x2 && y1 == y2)
 8001fc4:	d00b      	beq.n	8001fde <LCD_Rect+0xa2>
		if (error2 > -deltaY)
 8001fc6:	ea5f 0349 	movs.w	r3, r9, lsl #1
 8001fca:	d003      	beq.n	8001fd4 <LCD_Rect+0x98>
			x1 += signX;
 8001fcc:	9902      	ldr	r1, [sp, #8]
 8001fce:	448a      	add	sl, r1
 8001fd0:	fa1f fa8a 	uxth.w	sl, sl
		if (error2 < deltaX)
 8001fd4:	42b3      	cmp	r3, r6
 8001fd6:	daeb      	bge.n	8001fb0 <LCD_Rect+0x74>
			error += deltaX;
 8001fd8:	44b1      	add	r9, r6
			y1 += signY;
 8001fda:	b297      	uxth	r7, r2
 8001fdc:	e7e8      	b.n	8001fb0 <LCD_Rect+0x74>
		if (x1 == x2 && y1 == y2)
 8001fde:	9b04      	ldr	r3, [sp, #16]
 8001fe0:	42bb      	cmp	r3, r7
 8001fe2:	d1f0      	bne.n	8001fc6 <LCD_Rect+0x8a>
	int error = deltaX - deltaY;
 8001fe4:	4641      	mov	r1, r8
	int deltaY = abs(y2 - y1);
 8001fe6:	eba7 0208 	sub.w	r2, r7, r8
 8001fea:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8001fee:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8001ff2:	9304      	str	r3, [sp, #16]
	int error = deltaX - deltaY;
 8001ff4:	425b      	negs	r3, r3
	int signY = y1 < y2 ? 1 : -1;
 8001ff6:	45b8      	cmp	r8, r7
 8001ff8:	bf34      	ite	cc
 8001ffa:	f04f 0a01 	movcc.w	sl, #1
 8001ffe:	f04f 3aff 	movcs.w	sl, #4294967295
	int error = deltaX - deltaY;
 8002002:	9405      	str	r4, [sp, #20]
 8002004:	4699      	mov	r9, r3
 8002006:	4644      	mov	r4, r8
 8002008:	46d8      	mov	r8, fp
 800200a:	468b      	mov	fp, r1
 800200c:	9e03      	ldr	r6, [sp, #12]
 800200e:	9302      	str	r3, [sp, #8]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8002010:	4621      	mov	r1, r4
 8002012:	4643      	mov	r3, r8
 8002014:	4642      	mov	r2, r8
 8002016:	4630      	mov	r0, r6
 8002018:	9500      	str	r5, [sp, #0]
 800201a:	f7ff fb55 	bl	80016c8 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 800201e:	9b03      	ldr	r3, [sp, #12]
		error2 = error * 2;
 8002020:	ea4f 0249 	mov.w	r2, r9, lsl #1
		if (x1 == x2 && y1 == y2)
 8002024:	42b3      	cmp	r3, r6
			y1 += signY;
 8002026:	eb04 010a 	add.w	r1, r4, sl
		if (x1 == x2 && y1 == y2)
 800202a:	d00c      	beq.n	8002046 <LCD_Rect+0x10a>
		if (error2 > -deltaY)
 800202c:	9b02      	ldr	r3, [sp, #8]
 800202e:	ebb3 0f49 	cmp.w	r3, r9, lsl #1
 8002032:	da04      	bge.n	800203e <LCD_Rect+0x102>
			error -= deltaY;
 8002034:	9b04      	ldr	r3, [sp, #16]
			x1 += signX;
 8002036:	3e01      	subs	r6, #1
			error -= deltaY;
 8002038:	eba9 0903 	sub.w	r9, r9, r3
			x1 += signX;
 800203c:	b2b6      	uxth	r6, r6
		if (error2 < deltaX)
 800203e:	2a00      	cmp	r2, #0
 8002040:	d0e6      	beq.n	8002010 <LCD_Rect+0xd4>
			y1 += signY;
 8002042:	b28c      	uxth	r4, r1
 8002044:	e7e4      	b.n	8002010 <LCD_Rect+0xd4>
		if (x1 == x2 && y1 == y2)
 8002046:	42bc      	cmp	r4, r7
 8002048:	d1f0      	bne.n	800202c <LCD_Rect+0xf0>
	int error = deltaX - deltaY;
 800204a:	465b      	mov	r3, fp
 800204c:	9c05      	ldr	r4, [sp, #20]
 800204e:	46c3      	mov	fp, r8
 8002050:	46a1      	mov	r9, r4
 8002052:	4698      	mov	r8, r3
 8002054:	9e02      	ldr	r6, [sp, #8]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8002056:	465b      	mov	r3, fp
 8002058:	465a      	mov	r2, fp
 800205a:	4641      	mov	r1, r8
 800205c:	4648      	mov	r0, r9
 800205e:	9500      	str	r5, [sp, #0]
 8002060:	f7ff fb32 	bl	80016c8 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8002064:	45a1      	cmp	r9, r4
		error2 = error * 2;
 8002066:	ea4f 0346 	mov.w	r3, r6, lsl #1
			y1 += signY;
 800206a:	eb08 020a 	add.w	r2, r8, sl
		if (x1 == x2 && y1 == y2)
 800206e:	d00e      	beq.n	800208e <LCD_Rect+0x152>
		if (error2 > -deltaY)
 8002070:	9902      	ldr	r1, [sp, #8]
 8002072:	ebb1 0f46 	cmp.w	r1, r6, lsl #1
 8002076:	da05      	bge.n	8002084 <LCD_Rect+0x148>
			error -= deltaY;
 8002078:	9904      	ldr	r1, [sp, #16]
			x1 += signX;
 800207a:	f109 39ff 	add.w	r9, r9, #4294967295
			error -= deltaY;
 800207e:	1a76      	subs	r6, r6, r1
			x1 += signX;
 8002080:	fa1f f989 	uxth.w	r9, r9
		if (error2 < deltaX)
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0e6      	beq.n	8002056 <LCD_Rect+0x11a>
			y1 += signY;
 8002088:	fa1f f882 	uxth.w	r8, r2
 800208c:	e7e3      	b.n	8002056 <LCD_Rect+0x11a>
		if (x1 == x2 && y1 == y2)
 800208e:	45b8      	cmp	r8, r7
 8002090:	d1ee      	bne.n	8002070 <LCD_Rect+0x134>
	LCD_Line(x, y, x, y + h, size, color24);
	LCD_Line(x + w, y, x + w, y + h, size, color24);
}
 8002092:	b007      	add	sp, #28
 8002094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002098 <LCD_Circle>:
		}
	}
}

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
{
 8002098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int a_, b_, P;
	a_ = 0;
	b_ = radius;
	P = 1 - radius;
 800209c:	2700      	movs	r7, #0
{
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80020a4:	9307      	str	r3, [sp, #28]
 80020a6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
	P = 1 - radius;
 80020a8:	f1c2 0301 	rsb	r3, r2, #1
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 80020ac:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
	b_ = radius;
 80020b0:	9205      	str	r2, [sp, #20]
	P = 1 - radius;
 80020b2:	9306      	str	r3, [sp, #24]
	while (a_ <= b_)
 80020b4:	fa1f fb82 	uxth.w	fp, r2
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 80020b8:	9b03      	ldr	r3, [sp, #12]
 80020ba:	b2bd      	uxth	r5, r7
 80020bc:	eb0b 0903 	add.w	r9, fp, r3
 80020c0:	9b02      	ldr	r3, [sp, #8]
 80020c2:	fa1f f989 	uxth.w	r9, r9
 80020c6:	442b      	add	r3, r5
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	9304      	str	r3, [sp, #16]
		if (fill == 1)
 80020cc:	9b07      	ldr	r3, [sp, #28]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d072      	beq.n	80021b8 <LCD_Circle+0x120>
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 80020d2:	4649      	mov	r1, r9
 80020d4:	4623      	mov	r3, r4
 80020d6:	4622      	mov	r2, r4
 80020d8:	9804      	ldr	r0, [sp, #16]
 80020da:	9600      	str	r6, [sp, #0]
 80020dc:	f7ff faf4 	bl	80016c8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 80020e0:	9b02      	ldr	r3, [sp, #8]
 80020e2:	9903      	ldr	r1, [sp, #12]
 80020e4:	eb0b 0a03 	add.w	sl, fp, r3
 80020e8:	eb01 0805 	add.w	r8, r1, r5
 80020ec:	fa1f fa8a 	uxth.w	sl, sl
 80020f0:	fa1f f888 	uxth.w	r8, r8
 80020f4:	4641      	mov	r1, r8
 80020f6:	4650      	mov	r0, sl
 80020f8:	4623      	mov	r3, r4
 80020fa:	4622      	mov	r2, r4
 80020fc:	9600      	str	r6, [sp, #0]
 80020fe:	f7ff fae3 	bl	80016c8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8002102:	9a02      	ldr	r2, [sp, #8]
 8002104:	4649      	mov	r1, r9
 8002106:	eba2 0905 	sub.w	r9, r2, r5
 800210a:	fa1f f989 	uxth.w	r9, r9
 800210e:	4623      	mov	r3, r4
 8002110:	4622      	mov	r2, r4
 8002112:	4648      	mov	r0, r9
 8002114:	9600      	str	r6, [sp, #0]
 8002116:	f7ff fad7 	bl	80016c8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 800211a:	9a02      	ldr	r2, [sp, #8]
 800211c:	4641      	mov	r1, r8
 800211e:	eba2 080b 	sub.w	r8, r2, fp
 8002122:	fa1f f888 	uxth.w	r8, r8
 8002126:	4623      	mov	r3, r4
 8002128:	4622      	mov	r2, r4
 800212a:	4640      	mov	r0, r8
 800212c:	9600      	str	r6, [sp, #0]
 800212e:	f7ff facb 	bl	80016c8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8002132:	9b03      	ldr	r3, [sp, #12]
 8002134:	4650      	mov	r0, sl
 8002136:	1b5d      	subs	r5, r3, r5
 8002138:	b2ad      	uxth	r5, r5
 800213a:	4623      	mov	r3, r4
 800213c:	4622      	mov	r2, r4
 800213e:	4629      	mov	r1, r5
 8002140:	9600      	str	r6, [sp, #0]
 8002142:	f7ff fac1 	bl	80016c8 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8002146:	9b03      	ldr	r3, [sp, #12]
 8002148:	4622      	mov	r2, r4
 800214a:	eba3 0a0b 	sub.w	sl, r3, fp
 800214e:	fa1f fa8a 	uxth.w	sl, sl
 8002152:	4623      	mov	r3, r4
 8002154:	4651      	mov	r1, sl
 8002156:	9804      	ldr	r0, [sp, #16]
 8002158:	9600      	str	r6, [sp, #0]
 800215a:	f7ff fab5 	bl	80016c8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 800215e:	4651      	mov	r1, sl
 8002160:	4648      	mov	r0, r9
 8002162:	4623      	mov	r3, r4
 8002164:	4622      	mov	r2, r4
 8002166:	9600      	str	r6, [sp, #0]
 8002168:	f7ff faae 	bl	80016c8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 800216c:	4623      	mov	r3, r4
 800216e:	4622      	mov	r2, r4
 8002170:	4629      	mov	r1, r5
 8002172:	4640      	mov	r0, r8
 8002174:	9600      	str	r6, [sp, #0]
 8002176:	f7ff faa7 	bl	80016c8 <LCD_Rect_Fill>
		}
		if (P < 0)
		{
			P = (P + 3) + (2 * a_);
 800217a:	9806      	ldr	r0, [sp, #24]
			a_++;
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 800217c:	9d05      	ldr	r5, [sp, #20]
		if (P < 0)
 800217e:	2800      	cmp	r0, #0
			P = (P + 3) + (2 * a_);
 8002180:	f100 0103 	add.w	r1, r0, #3
			P = (P + 5) + (2 * (a_ - b_));
 8002184:	eba7 0205 	sub.w	r2, r7, r5
 8002188:	f100 0305 	add.w	r3, r0, #5
		if (P < 0)
 800218c:	db0b      	blt.n	80021a6 <LCD_Circle+0x10e>
			P = (P + 5) + (2 * (a_ - b_));
 800218e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002192:	9306      	str	r3, [sp, #24]
			a_++;
			b_--;
 8002194:	9b05      	ldr	r3, [sp, #20]
 8002196:	3701      	adds	r7, #1
 8002198:	3b01      	subs	r3, #1
	while (a_ <= b_)
 800219a:	42bb      	cmp	r3, r7
			b_--;
 800219c:	9305      	str	r3, [sp, #20]
	while (a_ <= b_)
 800219e:	db08      	blt.n	80021b2 <LCD_Circle+0x11a>
 80021a0:	fa1f fb83 	uxth.w	fp, r3
 80021a4:	e788      	b.n	80020b8 <LCD_Circle+0x20>
			P = (P + 3) + (2 * a_);
 80021a6:	eb01 0347 	add.w	r3, r1, r7, lsl #1
 80021aa:	3701      	adds	r7, #1
	while (a_ <= b_)
 80021ac:	42af      	cmp	r7, r5
			P = (P + 3) + (2 * a_);
 80021ae:	9306      	str	r3, [sp, #24]
	while (a_ <= b_)
 80021b0:	dd82      	ble.n	80020b8 <LCD_Circle+0x20>
		}
	}
}
 80021b2:	b009      	add	sp, #36	; 0x24
 80021b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 80021b8:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80021bc:	9b02      	ldr	r3, [sp, #8]
 80021be:	ea4f 0945 	mov.w	r9, r5, lsl #1
 80021c2:	ea4f 084b 	mov.w	r8, fp, lsl #1
 80021c6:	f109 0901 	add.w	r9, r9, #1
 80021ca:	f108 0801 	add.w	r8, r8, #1
 80021ce:	fa1f f989 	uxth.w	r9, r9
 80021d2:	fa1f f888 	uxth.w	r8, r8
 80021d6:	1b58      	subs	r0, r3, r5
 80021d8:	ebaa 010b 	sub.w	r1, sl, fp
 80021dc:	4643      	mov	r3, r8
 80021de:	464a      	mov	r2, r9
 80021e0:	9600      	str	r6, [sp, #0]
 80021e2:	b289      	uxth	r1, r1
 80021e4:	b280      	uxth	r0, r0
 80021e6:	f7ff fa6f 	bl	80016c8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 80021ea:	4652      	mov	r2, sl
 80021ec:	9802      	ldr	r0, [sp, #8]
 80021ee:	1b51      	subs	r1, r2, r5
 80021f0:	eba0 000b 	sub.w	r0, r0, fp
 80021f4:	464b      	mov	r3, r9
 80021f6:	4642      	mov	r2, r8
 80021f8:	9600      	str	r6, [sp, #0]
 80021fa:	b289      	uxth	r1, r1
 80021fc:	b280      	uxth	r0, r0
 80021fe:	f7ff fa63 	bl	80016c8 <LCD_Rect_Fill>
 8002202:	e7ba      	b.n	800217a <LCD_Circle+0xe2>

08002204 <LCD_Font>:
		}
	}
}

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 8002204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002208:	4615      	mov	r5, r2
 800220a:	b091      	sub	sp, #68	; 0x44
 800220c:	f89d 4068 	ldrb.w	r4, [sp, #104]	; 0x68
 8002210:	9205      	str	r2, [sp, #20]
	int16_t cursor_x = x;
	int16_t cursor_y = y;
 8002212:	b20a      	sxth	r2, r1
	int16_t cursor_x = x;
 8002214:	b206      	sxth	r6, r0
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	6818      	ldr	r0, [r3, #0]
	int16_t cursor_y = y;
 800221a:	9202      	str	r2, [sp, #8]
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 800221c:	689a      	ldr	r2, [r3, #8]
{
 800221e:	9407      	str	r4, [sp, #28]
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8002220:	ac0d      	add	r4, sp, #52	; 0x34
 8002222:	c407      	stmia	r4!, {r0, r1, r2}
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8002224:	4628      	mov	r0, r5
	int16_t cursor_x = x;
 8002226:	9608      	str	r6, [sp, #32]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8002228:	f7fd ff92 	bl	8000150 <strlen>
 800222c:	2800      	cmp	r0, #0
 800222e:	d075      	beq.n	800231c <LCD_Font+0x118>
 8002230:	f04f 0b00 	mov.w	fp, #0
	int16_t cursor_x = x;
 8002234:	4634      	mov	r4, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8002236:	465b      	mov	r3, fp
	{
		char c = text[text_pos];
 8002238:	9a05      	ldr	r2, [sp, #20]
 800223a:	5cd3      	ldrb	r3, [r2, r3]
		if(c == '\n')
 800223c:	2b0a      	cmp	r3, #10
 800223e:	f000 8096 	beq.w	800236e <LCD_Font+0x16a>
		{
			cursor_x = x;
			cursor_y += font.yAdvance * size;
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 8002242:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8002246:	429a      	cmp	r2, r3
 8002248:	d861      	bhi.n	800230e <LCD_Font+0x10a>
 800224a:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800224e:	4299      	cmp	r1, r3
 8002250:	d35d      	bcc.n	800230e <LCD_Font+0x10a>
 8002252:	2b0d      	cmp	r3, #13
 8002254:	d05b      	beq.n	800230e <LCD_Font+0x10a>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8002256:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
 800225e:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 8002262:	6869      	ldr	r1, [r5, #4]
 8002264:	aa0b      	add	r2, sp, #44	; 0x2c
 8002266:	c203      	stmia	r2!, {r0, r1}
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8002268:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800226c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	uint16_t bo = glyph -> bitmapOffset;
 800226e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8002272:	9306      	str	r3, [sp, #24]
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 8084 	beq.w	8002382 <LCD_Font+0x17e>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
			cursor_x += glyph.xAdvance * size;
 800227a:	f04f 0a00 	mov.w	sl, #0
 800227e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
	uint8_t bits = 0, bit = 0;
 8002282:	4656      	mov	r6, sl
 8002284:	4657      	mov	r7, sl
 8002286:	4693      	mov	fp, r2
			cursor_x += glyph.xAdvance * size;
 8002288:	b2a3      	uxth	r3, r4
 800228a:	9304      	str	r3, [sp, #16]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 800228c:	f89d 902e 	ldrb.w	r9, [sp, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 8002290:	f8bd 301c 	ldrh.w	r3, [sp, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8002294:	f1b9 0f00 	cmp.w	r9, #0
 8002298:	d027      	beq.n	80022ea <LCD_Font+0xe6>
 800229a:	2500      	movs	r5, #0
 800229c:	4628      	mov	r0, r5
			if(bit == 0)
 800229e:	2e00      	cmp	r6, #0
 80022a0:	d05c      	beq.n	800235c <LCD_Font+0x158>
			bit >>= 1;
 80022a2:	4634      	mov	r4, r6
 80022a4:	0876      	lsrs	r6, r6, #1
			if(bits & bit)
 80022a6:	403c      	ands	r4, r7
				set_pixels++;
 80022a8:	f100 0201 	add.w	r2, r0, #1
			if(bits & bit)
 80022ac:	d039      	beq.n	8002322 <LCD_Font+0x11e>
				set_pixels++;
 80022ae:	b290      	uxth	r0, r2
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80022b0:	3501      	adds	r5, #1
 80022b2:	b2ea      	uxtb	r2, r5
 80022b4:	454a      	cmp	r2, r9
 80022b6:	d3f2      	bcc.n	800229e <LCD_Font+0x9a>
		if (set_pixels > 0)
 80022b8:	b1b8      	cbz	r0, 80022ea <LCD_Font+0xe6>
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80022ba:	f99d 1031 	ldrsb.w	r1, [sp, #49]	; 0x31
 80022be:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80022c0:	4449      	add	r1, r9
 80022c2:	1a09      	subs	r1, r1, r0
 80022c4:	9200      	str	r2, [sp, #0]
 80022c6:	fb03 f200 	mul.w	r2, r3, r0
 80022ca:	9804      	ldr	r0, [sp, #16]
 80022cc:	9c02      	ldr	r4, [sp, #8]
 80022ce:	fb01 0003 	mla	r0, r1, r3, r0
 80022d2:	f99d 1032 	ldrsb.w	r1, [sp, #50]	; 0x32
 80022d6:	b292      	uxth	r2, r2
 80022d8:	4451      	add	r1, sl
 80022da:	fb01 4103 	mla	r1, r1, r3, r4
 80022de:	b280      	uxth	r0, r0
 80022e0:	b289      	uxth	r1, r1
 80022e2:	9303      	str	r3, [sp, #12]
 80022e4:	f7ff f9f0 	bl	80016c8 <LCD_Rect_Fill>
 80022e8:	9b03      	ldr	r3, [sp, #12]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80022ea:	9906      	ldr	r1, [sp, #24]
 80022ec:	f10a 0a01 	add.w	sl, sl, #1
 80022f0:	fa5f f28a 	uxtb.w	r2, sl
 80022f4:	428a      	cmp	r2, r1
 80022f6:	d3cd      	bcc.n	8002294 <LCD_Font+0x90>
 80022f8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
			cursor_x += glyph.xAdvance * size;
 80022fc:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8002300:	9a04      	ldr	r2, [sp, #16]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8002302:	9805      	ldr	r0, [sp, #20]
			cursor_x += glyph.xAdvance * size;
 8002304:	fb04 2303 	mla	r3, r4, r3, r2
 8002308:	b21c      	sxth	r4, r3
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800230a:	f7fd ff21 	bl	8000150 <strlen>
 800230e:	f10b 0b01 	add.w	fp, fp, #1
 8002312:	fa1f fb8b 	uxth.w	fp, fp
 8002316:	4583      	cmp	fp, r0
 8002318:	465b      	mov	r3, fp
 800231a:	d38d      	bcc.n	8002238 <LCD_Font+0x34>
		}
	}
}
 800231c:	b011      	add	sp, #68	; 0x44
 800231e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else if (set_pixels > 0)
 8002322:	2800      	cmp	r0, #0
 8002324:	d0c4      	beq.n	80022b0 <LCD_Font+0xac>
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8002326:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8002328:	fb03 f200 	mul.w	r2, r3, r0
 800232c:	9100      	str	r1, [sp, #0]
 800232e:	f99d 1031 	ldrsb.w	r1, [sp, #49]	; 0x31
 8002332:	f8dd c008 	ldr.w	ip, [sp, #8]
 8002336:	4429      	add	r1, r5
 8002338:	1a08      	subs	r0, r1, r0
 800233a:	9904      	ldr	r1, [sp, #16]
 800233c:	b292      	uxth	r2, r2
 800233e:	fb00 1003 	mla	r0, r0, r3, r1
 8002342:	f99d 1032 	ldrsb.w	r1, [sp, #50]	; 0x32
 8002346:	b280      	uxth	r0, r0
 8002348:	4451      	add	r1, sl
 800234a:	fb01 c103 	mla	r1, r1, r3, ip
 800234e:	b289      	uxth	r1, r1
 8002350:	9303      	str	r3, [sp, #12]
 8002352:	f7ff f9b9 	bl	80016c8 <LCD_Rect_Fill>
				set_pixels = 0;
 8002356:	4620      	mov	r0, r4
 8002358:	9b03      	ldr	r3, [sp, #12]
 800235a:	e7a9      	b.n	80022b0 <LCD_Font+0xac>
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 800235c:	f108 0201 	add.w	r2, r8, #1
 8002360:	f81b 7008 	ldrb.w	r7, [fp, r8]
				bit  = 0x80;
 8002364:	2480      	movs	r4, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8002366:	2640      	movs	r6, #64	; 0x40
 8002368:	fa1f f882 	uxth.w	r8, r2
 800236c:	e79b      	b.n	80022a6 <LCD_Font+0xa2>
			cursor_y += font.yAdvance * size;
 800236e:	9a02      	ldr	r2, [sp, #8]
 8002370:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8002374:	9907      	ldr	r1, [sp, #28]
			cursor_x = x;
 8002376:	9c08      	ldr	r4, [sp, #32]
			cursor_y += font.yAdvance * size;
 8002378:	fb03 2301 	mla	r3, r3, r1, r2
 800237c:	b21b      	sxth	r3, r3
 800237e:	9302      	str	r3, [sp, #8]
 8002380:	e7c5      	b.n	800230e <LCD_Font+0x10a>
			cursor_x += glyph.xAdvance * size;
 8002382:	b2a3      	uxth	r3, r4
 8002384:	9304      	str	r3, [sp, #16]
			cursor_y += font.yAdvance * size;
 8002386:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800238a:	e7b7      	b.n	80022fc <LCD_Font+0xf8>

0800238c <LCD_Init>:

void LCD_Init(void)
{	
 800238c:	b570      	push	{r4, r5, r6, lr}
	LCD_RST_R
 800238e:	4efd      	ldr	r6, [pc, #1012]	; (8002784 <LCD_Init+0x3f8>)
 8002390:	2200      	movs	r2, #0
 8002392:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002396:	4630      	mov	r0, r6
 8002398:	f001 fb38 	bl	8003a0c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800239c:	20c8      	movs	r0, #200	; 0xc8
 800239e:	f001 f9ad 	bl	80036fc <HAL_Delay>
	LCD_RST_S
 80023a2:	4630      	mov	r0, r6
 80023a4:	2201      	movs	r2, #1
 80023a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 80023aa:	4df7      	ldr	r5, [pc, #988]	; (8002788 <LCD_Init+0x3fc>)
	LCD_RST_S
 80023ac:	f001 fb2e 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_RS_R
 80023b0:	4630      	mov	r0, r6
 80023b2:	2200      	movs	r2, #0
 80023b4:	2101      	movs	r1, #1
 80023b6:	f001 fb29 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_R
 80023ba:	4630      	mov	r0, r6
 80023bc:	2200      	movs	r2, #0
 80023be:	f44f 6180 	mov.w	r1, #1024	; 0x400
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 80023c2:	4cf2      	ldr	r4, [pc, #968]	; (800278c <LCD_Init+0x400>)
	LCD_CS_R
 80023c4:	f001 fb22 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 80023c8:	4628      	mov	r0, r5
 80023ca:	2200      	movs	r2, #0
 80023cc:	2102      	movs	r1, #2
 80023ce:	f001 fb1d 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 80023d2:	4628      	mov	r0, r5
 80023d4:	2200      	movs	r2, #0
 80023d6:	2101      	movs	r1, #1
 80023d8:	f001 fb18 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 80023dc:	4620      	mov	r0, r4
 80023de:	2200      	movs	r2, #0
 80023e0:	2108      	movs	r1, #8
 80023e2:	f001 fb13 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 80023e6:	4620      	mov	r0, r4
 80023e8:	2200      	movs	r2, #0
 80023ea:	2104      	movs	r1, #4
 80023ec:	f001 fb0e 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 80023f0:	4620      	mov	r0, r4
 80023f2:	2200      	movs	r2, #0
 80023f4:	2102      	movs	r1, #2
 80023f6:	f001 fb09 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 80023fa:	4620      	mov	r0, r4
 80023fc:	2200      	movs	r2, #0
 80023fe:	2101      	movs	r1, #1
 8002400:	f001 fb04 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8002404:	4620      	mov	r0, r4
 8002406:	2200      	movs	r2, #0
 8002408:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800240c:	f001 fafe 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8002410:	4620      	mov	r0, r4
 8002412:	2200      	movs	r2, #0
 8002414:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002418:	f001 faf8 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800241c:	4628      	mov	r0, r5
 800241e:	2200      	movs	r2, #0
 8002420:	2104      	movs	r1, #4
 8002422:	f001 faf3 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002426:	4628      	mov	r0, r5
 8002428:	2200      	movs	r2, #0
 800242a:	2108      	movs	r1, #8
 800242c:	f001 faee 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002430:	4628      	mov	r0, r5
 8002432:	2200      	movs	r2, #0
 8002434:	2110      	movs	r1, #16
 8002436:	f001 fae9 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800243a:	4628      	mov	r0, r5
 800243c:	2201      	movs	r2, #1
 800243e:	2120      	movs	r1, #32
 8002440:	f001 fae4 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002444:	4628      	mov	r0, r5
 8002446:	2200      	movs	r2, #0
 8002448:	2140      	movs	r1, #64	; 0x40
 800244a:	f001 fadf 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800244e:	4628      	mov	r0, r5
 8002450:	2200      	movs	r2, #0
 8002452:	2180      	movs	r1, #128	; 0x80
 8002454:	f001 fada 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002458:	4620      	mov	r0, r4
 800245a:	2200      	movs	r2, #0
 800245c:	2110      	movs	r1, #16
 800245e:	f001 fad5 	bl	8003a0c <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002462:	4620      	mov	r0, r4
 8002464:	2201      	movs	r2, #1
 8002466:	2120      	movs	r1, #32
 8002468:	f001 fad0 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_R
 800246c:	4630      	mov	r0, r6
 800246e:	2200      	movs	r2, #0
 8002470:	2102      	movs	r1, #2
 8002472:	f001 facb 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_S
 8002476:	4630      	mov	r0, r6
 8002478:	2201      	movs	r2, #1
 800247a:	2102      	movs	r1, #2
 800247c:	f001 fac6 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_S
 8002480:	2201      	movs	r2, #1
 8002482:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002486:	4630      	mov	r0, r6
 8002488:	f001 fac0 	bl	8003a0c <HAL_GPIO_WritePin>
	
  LCD_Send_Cmd(HX8357_SLPOUT);
  HAL_Delay(120);
 800248c:	2078      	movs	r0, #120	; 0x78
 800248e:	f001 f935 	bl	80036fc <HAL_Delay>
	LCD_RS_R
 8002492:	4630      	mov	r0, r6
 8002494:	2200      	movs	r2, #0
 8002496:	2101      	movs	r1, #1
 8002498:	f001 fab8 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_R
 800249c:	4630      	mov	r0, r6
 800249e:	2200      	movs	r2, #0
 80024a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024a4:	f001 fab2 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 80024a8:	4628      	mov	r0, r5
 80024aa:	2200      	movs	r2, #0
 80024ac:	2102      	movs	r1, #2
 80024ae:	f001 faad 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 80024b2:	4628      	mov	r0, r5
 80024b4:	2200      	movs	r2, #0
 80024b6:	2101      	movs	r1, #1
 80024b8:	f001 faa8 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 80024bc:	4620      	mov	r0, r4
 80024be:	2200      	movs	r2, #0
 80024c0:	2108      	movs	r1, #8
 80024c2:	f001 faa3 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 80024c6:	4620      	mov	r0, r4
 80024c8:	2200      	movs	r2, #0
 80024ca:	2104      	movs	r1, #4
 80024cc:	f001 fa9e 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 80024d0:	4620      	mov	r0, r4
 80024d2:	2200      	movs	r2, #0
 80024d4:	2102      	movs	r1, #2
 80024d6:	f001 fa99 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 80024da:	4620      	mov	r0, r4
 80024dc:	2200      	movs	r2, #0
 80024de:	2101      	movs	r1, #1
 80024e0:	f001 fa94 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 80024e4:	4620      	mov	r0, r4
 80024e6:	2200      	movs	r2, #0
 80024e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024ec:	f001 fa8e 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80024f0:	4620      	mov	r0, r4
 80024f2:	2200      	movs	r2, #0
 80024f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024f8:	f001 fa88 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80024fc:	4628      	mov	r0, r5
 80024fe:	2200      	movs	r2, #0
 8002500:	2104      	movs	r1, #4
 8002502:	f001 fa83 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002506:	4628      	mov	r0, r5
 8002508:	2200      	movs	r2, #0
 800250a:	2108      	movs	r1, #8
 800250c:	f001 fa7e 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002510:	4628      	mov	r0, r5
 8002512:	2201      	movs	r2, #1
 8002514:	2110      	movs	r1, #16
 8002516:	f001 fa79 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800251a:	4628      	mov	r0, r5
 800251c:	2201      	movs	r2, #1
 800251e:	2120      	movs	r1, #32
 8002520:	f001 fa74 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002524:	4628      	mov	r0, r5
 8002526:	2201      	movs	r2, #1
 8002528:	2140      	movs	r1, #64	; 0x40
 800252a:	f001 fa6f 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800252e:	4628      	mov	r0, r5
 8002530:	2200      	movs	r2, #0
 8002532:	2180      	movs	r1, #128	; 0x80
 8002534:	f001 fa6a 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002538:	4620      	mov	r0, r4
 800253a:	2201      	movs	r2, #1
 800253c:	2110      	movs	r1, #16
 800253e:	f001 fa65 	bl	8003a0c <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002542:	4620      	mov	r0, r4
 8002544:	2200      	movs	r2, #0
 8002546:	2120      	movs	r1, #32
 8002548:	f001 fa60 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_R
 800254c:	4630      	mov	r0, r6
 800254e:	2200      	movs	r2, #0
 8002550:	2102      	movs	r1, #2
 8002552:	f001 fa5b 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_S
 8002556:	4630      	mov	r0, r6
 8002558:	2201      	movs	r2, #1
 800255a:	2102      	movs	r1, #2
 800255c:	f001 fa56 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_S
 8002560:	4630      	mov	r0, r6
 8002562:	2201      	movs	r2, #1
 8002564:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002568:	f001 fa50 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_RS_S
 800256c:	2201      	movs	r2, #1
 800256e:	4630      	mov	r0, r6
 8002570:	4611      	mov	r1, r2
 8002572:	f001 fa4b 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_R	
 8002576:	4630      	mov	r0, r6
 8002578:	2200      	movs	r2, #0
 800257a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800257e:	f001 fa45 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8002582:	4628      	mov	r0, r5
 8002584:	2200      	movs	r2, #0
 8002586:	2102      	movs	r1, #2
 8002588:	f001 fa40 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800258c:	4628      	mov	r0, r5
 800258e:	2200      	movs	r2, #0
 8002590:	2101      	movs	r1, #1
 8002592:	f001 fa3b 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8002596:	4620      	mov	r0, r4
 8002598:	2200      	movs	r2, #0
 800259a:	2108      	movs	r1, #8
 800259c:	f001 fa36 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 80025a0:	4620      	mov	r0, r4
 80025a2:	2200      	movs	r2, #0
 80025a4:	2104      	movs	r1, #4
 80025a6:	f001 fa31 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 80025aa:	4620      	mov	r0, r4
 80025ac:	2200      	movs	r2, #0
 80025ae:	2102      	movs	r1, #2
 80025b0:	f001 fa2c 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 80025b4:	4620      	mov	r0, r4
 80025b6:	2200      	movs	r2, #0
 80025b8:	2101      	movs	r1, #1
 80025ba:	f001 fa27 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 80025be:	4620      	mov	r0, r4
 80025c0:	2200      	movs	r2, #0
 80025c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025c6:	f001 fa21 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80025ca:	4620      	mov	r0, r4
 80025cc:	2200      	movs	r2, #0
 80025ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025d2:	f001 fa1b 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80025d6:	4628      	mov	r0, r5
 80025d8:	2200      	movs	r2, #0
 80025da:	2104      	movs	r1, #4
 80025dc:	f001 fa16 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80025e0:	4628      	mov	r0, r5
 80025e2:	2201      	movs	r2, #1
 80025e4:	2108      	movs	r1, #8
 80025e6:	f001 fa11 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80025ea:	4628      	mov	r0, r5
 80025ec:	2200      	movs	r2, #0
 80025ee:	2110      	movs	r1, #16
 80025f0:	f001 fa0c 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80025f4:	4628      	mov	r0, r5
 80025f6:	2201      	movs	r2, #1
 80025f8:	2120      	movs	r1, #32
 80025fa:	f001 fa07 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80025fe:	4628      	mov	r0, r5
 8002600:	2200      	movs	r2, #0
 8002602:	2140      	movs	r1, #64	; 0x40
 8002604:	f001 fa02 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002608:	4628      	mov	r0, r5
 800260a:	2201      	movs	r2, #1
 800260c:	2180      	movs	r1, #128	; 0x80
 800260e:	f001 f9fd 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002612:	4620      	mov	r0, r4
 8002614:	2200      	movs	r2, #0
 8002616:	2110      	movs	r1, #16
 8002618:	f001 f9f8 	bl	8003a0c <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800261c:	4620      	mov	r0, r4
 800261e:	2201      	movs	r2, #1
 8002620:	2120      	movs	r1, #32
 8002622:	f001 f9f3 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_R
 8002626:	4630      	mov	r0, r6
 8002628:	2200      	movs	r2, #0
 800262a:	2102      	movs	r1, #2
 800262c:	f001 f9ee 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_S
 8002630:	4630      	mov	r0, r6
 8002632:	2201      	movs	r2, #1
 8002634:	2102      	movs	r1, #2
 8002636:	f001 f9e9 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_S
 800263a:	2201      	movs	r2, #1
 800263c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002640:	4630      	mov	r0, r6
 8002642:	f001 f9e3 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_Send_Cmd(HX8357_COLMOD);
	LCD_Send_Dat(0x55);
  HAL_Delay(5);
 8002646:	2005      	movs	r0, #5
 8002648:	f001 f858 	bl	80036fc <HAL_Delay>
	LCD_RS_R
 800264c:	4630      	mov	r0, r6
 800264e:	2200      	movs	r2, #0
 8002650:	2101      	movs	r1, #1
 8002652:	f001 f9db 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_R
 8002656:	4630      	mov	r0, r6
 8002658:	2200      	movs	r2, #0
 800265a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800265e:	f001 f9d5 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8002662:	4628      	mov	r0, r5
 8002664:	2200      	movs	r2, #0
 8002666:	2102      	movs	r1, #2
 8002668:	f001 f9d0 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800266c:	4628      	mov	r0, r5
 800266e:	2200      	movs	r2, #0
 8002670:	2101      	movs	r1, #1
 8002672:	f001 f9cb 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8002676:	4620      	mov	r0, r4
 8002678:	2200      	movs	r2, #0
 800267a:	2108      	movs	r1, #8
 800267c:	f001 f9c6 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8002680:	4620      	mov	r0, r4
 8002682:	2200      	movs	r2, #0
 8002684:	2104      	movs	r1, #4
 8002686:	f001 f9c1 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 800268a:	4620      	mov	r0, r4
 800268c:	2200      	movs	r2, #0
 800268e:	2102      	movs	r1, #2
 8002690:	f001 f9bc 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8002694:	4620      	mov	r0, r4
 8002696:	2200      	movs	r2, #0
 8002698:	2101      	movs	r1, #1
 800269a:	f001 f9b7 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 800269e:	4620      	mov	r0, r4
 80026a0:	2200      	movs	r2, #0
 80026a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026a6:	f001 f9b1 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80026aa:	4620      	mov	r0, r4
 80026ac:	2200      	movs	r2, #0
 80026ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026b2:	f001 f9ab 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80026b6:	4628      	mov	r0, r5
 80026b8:	2200      	movs	r2, #0
 80026ba:	2104      	movs	r1, #4
 80026bc:	f001 f9a6 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80026c0:	4628      	mov	r0, r5
 80026c2:	2200      	movs	r2, #0
 80026c4:	2108      	movs	r1, #8
 80026c6:	f001 f9a1 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80026ca:	4628      	mov	r0, r5
 80026cc:	2201      	movs	r2, #1
 80026ce:	2110      	movs	r1, #16
 80026d0:	f001 f99c 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80026d4:	4628      	mov	r0, r5
 80026d6:	2200      	movs	r2, #0
 80026d8:	2120      	movs	r1, #32
 80026da:	f001 f997 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80026de:	4628      	mov	r0, r5
 80026e0:	2201      	movs	r2, #1
 80026e2:	2140      	movs	r1, #64	; 0x40
 80026e4:	f001 f992 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80026e8:	4628      	mov	r0, r5
 80026ea:	2200      	movs	r2, #0
 80026ec:	2180      	movs	r1, #128	; 0x80
 80026ee:	f001 f98d 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80026f2:	4620      	mov	r0, r4
 80026f4:	2200      	movs	r2, #0
 80026f6:	2110      	movs	r1, #16
 80026f8:	f001 f988 	bl	8003a0c <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80026fc:	4620      	mov	r0, r4
 80026fe:	2201      	movs	r2, #1
 8002700:	2120      	movs	r1, #32
 8002702:	f001 f983 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_R
 8002706:	4630      	mov	r0, r6
 8002708:	2200      	movs	r2, #0
 800270a:	2102      	movs	r1, #2
 800270c:	f001 f97e 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_S
 8002710:	4630      	mov	r0, r6
 8002712:	2201      	movs	r2, #1
 8002714:	2102      	movs	r1, #2
 8002716:	f001 f979 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_S
 800271a:	4630      	mov	r0, r6
 800271c:	2201      	movs	r2, #1
 800271e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002722:	f001 f973 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_RS_R
 8002726:	4630      	mov	r0, r6
 8002728:	2200      	movs	r2, #0
 800272a:	2101      	movs	r1, #1
 800272c:	f001 f96e 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_R
 8002730:	4630      	mov	r0, r6
 8002732:	2200      	movs	r2, #0
 8002734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002738:	f001 f968 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 800273c:	4628      	mov	r0, r5
 800273e:	2200      	movs	r2, #0
 8002740:	2102      	movs	r1, #2
 8002742:	f001 f963 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8002746:	4628      	mov	r0, r5
 8002748:	2200      	movs	r2, #0
 800274a:	2101      	movs	r1, #1
 800274c:	f001 f95e 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8002750:	4620      	mov	r0, r4
 8002752:	2200      	movs	r2, #0
 8002754:	2108      	movs	r1, #8
 8002756:	f001 f959 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 800275a:	4620      	mov	r0, r4
 800275c:	2200      	movs	r2, #0
 800275e:	2104      	movs	r1, #4
 8002760:	f001 f954 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8002764:	4620      	mov	r0, r4
 8002766:	2200      	movs	r2, #0
 8002768:	2102      	movs	r1, #2
 800276a:	f001 f94f 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 800276e:	4620      	mov	r0, r4
 8002770:	2200      	movs	r2, #0
 8002772:	2101      	movs	r1, #1
 8002774:	f001 f94a 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8002778:	4620      	mov	r0, r4
 800277a:	2200      	movs	r2, #0
 800277c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002780:	e006      	b.n	8002790 <LCD_Init+0x404>
 8002782:	bf00      	nop
 8002784:	40010c00 	.word	0x40010c00
 8002788:	40010800 	.word	0x40010800
 800278c:	40011000 	.word	0x40011000
 8002790:	f001 f93c 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8002794:	4620      	mov	r0, r4
 8002796:	2200      	movs	r2, #0
 8002798:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800279c:	f001 f936 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80027a0:	4628      	mov	r0, r5
 80027a2:	2200      	movs	r2, #0
 80027a4:	2104      	movs	r1, #4
 80027a6:	f001 f931 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80027aa:	4628      	mov	r0, r5
 80027ac:	2200      	movs	r2, #0
 80027ae:	2108      	movs	r1, #8
 80027b0:	f001 f92c 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80027b4:	4628      	mov	r0, r5
 80027b6:	2201      	movs	r2, #1
 80027b8:	2110      	movs	r1, #16
 80027ba:	f001 f927 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80027be:	4628      	mov	r0, r5
 80027c0:	2201      	movs	r2, #1
 80027c2:	2120      	movs	r1, #32
 80027c4:	f001 f922 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80027c8:	4628      	mov	r0, r5
 80027ca:	2200      	movs	r2, #0
 80027cc:	2140      	movs	r1, #64	; 0x40
 80027ce:	f001 f91d 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80027d2:	4628      	mov	r0, r5
 80027d4:	2201      	movs	r2, #1
 80027d6:	2180      	movs	r1, #128	; 0x80
 80027d8:	f001 f918 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80027dc:	4620      	mov	r0, r4
 80027de:	2201      	movs	r2, #1
 80027e0:	2110      	movs	r1, #16
 80027e2:	f001 f913 	bl	8003a0c <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80027e6:	4620      	mov	r0, r4
 80027e8:	2200      	movs	r2, #0
 80027ea:	2120      	movs	r1, #32
 80027ec:	f001 f90e 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_R
 80027f0:	4630      	mov	r0, r6
 80027f2:	2200      	movs	r2, #0
 80027f4:	2102      	movs	r1, #2
 80027f6:	f001 f909 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_S
 80027fa:	4630      	mov	r0, r6
 80027fc:	2201      	movs	r2, #1
 80027fe:	2102      	movs	r1, #2
 8002800:	f001 f904 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_S
 8002804:	4630      	mov	r0, r6
 8002806:	2201      	movs	r2, #1
 8002808:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800280c:	f001 f8fe 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_RS_S
 8002810:	2201      	movs	r2, #1
 8002812:	4630      	mov	r0, r6
 8002814:	4611      	mov	r1, r2
 8002816:	f001 f8f9 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_R	
 800281a:	4630      	mov	r0, r6
 800281c:	2200      	movs	r2, #0
 800281e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002822:	f001 f8f3 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8002826:	4628      	mov	r0, r5
 8002828:	2200      	movs	r2, #0
 800282a:	2102      	movs	r1, #2
 800282c:	f001 f8ee 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8002830:	4628      	mov	r0, r5
 8002832:	2200      	movs	r2, #0
 8002834:	2101      	movs	r1, #1
 8002836:	f001 f8e9 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 800283a:	4620      	mov	r0, r4
 800283c:	2200      	movs	r2, #0
 800283e:	2108      	movs	r1, #8
 8002840:	f001 f8e4 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8002844:	4620      	mov	r0, r4
 8002846:	2200      	movs	r2, #0
 8002848:	2104      	movs	r1, #4
 800284a:	f001 f8df 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 800284e:	4620      	mov	r0, r4
 8002850:	2200      	movs	r2, #0
 8002852:	2102      	movs	r1, #2
 8002854:	f001 f8da 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8002858:	4620      	mov	r0, r4
 800285a:	2200      	movs	r2, #0
 800285c:	2101      	movs	r1, #1
 800285e:	f001 f8d5 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8002862:	4620      	mov	r0, r4
 8002864:	2200      	movs	r2, #0
 8002866:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800286a:	f001 f8cf 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 800286e:	4620      	mov	r0, r4
 8002870:	2200      	movs	r2, #0
 8002872:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002876:	f001 f8c9 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800287a:	4628      	mov	r0, r5
 800287c:	2200      	movs	r2, #0
 800287e:	2104      	movs	r1, #4
 8002880:	f001 f8c4 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002884:	4628      	mov	r0, r5
 8002886:	2200      	movs	r2, #0
 8002888:	2108      	movs	r1, #8
 800288a:	f001 f8bf 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800288e:	4628      	mov	r0, r5
 8002890:	2200      	movs	r2, #0
 8002892:	2110      	movs	r1, #16
 8002894:	f001 f8ba 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002898:	4628      	mov	r0, r5
 800289a:	2200      	movs	r2, #0
 800289c:	2120      	movs	r1, #32
 800289e:	f001 f8b5 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80028a2:	4628      	mov	r0, r5
 80028a4:	2201      	movs	r2, #1
 80028a6:	2140      	movs	r1, #64	; 0x40
 80028a8:	f001 f8b0 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80028ac:	4628      	mov	r0, r5
 80028ae:	2200      	movs	r2, #0
 80028b0:	2180      	movs	r1, #128	; 0x80
 80028b2:	f001 f8ab 	bl	8003a0c <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80028b6:	4620      	mov	r0, r4
 80028b8:	2200      	movs	r2, #0
 80028ba:	2110      	movs	r1, #16
 80028bc:	f001 f8a6 	bl	8003a0c <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80028c0:	4620      	mov	r0, r4
 80028c2:	2200      	movs	r2, #0
 80028c4:	2120      	movs	r1, #32
 80028c6:	f001 f8a1 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_R
 80028ca:	4630      	mov	r0, r6
 80028cc:	2200      	movs	r2, #0
 80028ce:	2102      	movs	r1, #2
 80028d0:	f001 f89c 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_WR_S
 80028d4:	4630      	mov	r0, r6
 80028d6:	2201      	movs	r2, #1
 80028d8:	2102      	movs	r1, #2
 80028da:	f001 f897 	bl	8003a0c <HAL_GPIO_WritePin>
	LCD_CS_S
 80028de:	4630      	mov	r0, r6
  LCD_Send_Cmd(HX8357_DISPON);
	
	LCD_Orientation(DEFAULT_ORIENTATION);
}
 80028e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	LCD_CS_S
 80028e4:	2201      	movs	r2, #1
 80028e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028ea:	f001 b88f 	b.w	8003a0c <HAL_GPIO_WritePin>
 80028ee:	bf00      	nop

080028f0 <bme280>:

uint16_t byteS(uint8_t byteL, uint8_t byteH) {
	return (byteH << 8) | byteL;
}

void bme280(void) {
 80028f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	temperature = BME280_getTemperature(-1);
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
void bme280(void) {
 80028f8:	b089      	sub	sp, #36	; 0x24
	temperature = BME280_getTemperature(-1);
 80028fa:	f7fe fb95 	bl	8001028 <BME280_getTemperature>
 80028fe:	f7fd fe47 	bl	8000590 <__aeabi_f2d>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 8002bf0 <bme280+0x300>
	humidity = BME280_getHumidity(-1);
 800290a:	f04f 30ff 	mov.w	r0, #4294967295
	temperature = BME280_getTemperature(-1);
 800290e:	e9c8 2300 	strd	r2, r3, [r8]
	humidity = BME280_getHumidity(-1);
 8002912:	f7fe fc05 	bl	8001120 <BME280_getHumidity>
 8002916:	f7fd fe3b 	bl	8000590 <__aeabi_f2d>
 800291a:	4bb6      	ldr	r3, [pc, #728]	; (8002bf4 <bme280+0x304>)
 800291c:	4cb6      	ldr	r4, [pc, #728]	; (8002bf8 <bme280+0x308>)
 800291e:	e9c3 0100 	strd	r0, r1, [r3]
	pressure = (uint16_t)BME280_getPressure();
 8002922:	f7fe fc97 	bl	8001254 <BME280_getPressure>
 8002926:	f7fe fae1 	bl	8000eec <__aeabi_f2uiz>
 800292a:	2600      	movs	r6, #0
 800292c:	4627      	mov	r7, r4
 800292e:	4db3      	ldr	r5, [pc, #716]	; (8002bfc <bme280+0x30c>)
 8002930:	8028      	strh	r0, [r5, #0]

	for (uint16_t i = 0; i < 4096; i++) {
		eeprom[i] = AT24XX_Read(i);
 8002932:	b2b0      	uxth	r0, r6
 8002934:	f7fe fb32 	bl	8000f9c <AT24XX_Read>
	for (uint16_t i = 0; i < 4096; i++) {
 8002938:	3601      	adds	r6, #1
 800293a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
		eeprom[i] = AT24XX_Read(i);
 800293e:	f807 0f01 	strb.w	r0, [r7, #1]!
	for (uint16_t i = 0; i < 4096; i++) {
 8002942:	d1f6      	bne.n	8002932 <bme280+0x42>
	}

	LCD_Rect(2, 190, 157, 128, 1, BLUE);
 8002944:	27ff      	movs	r7, #255	; 0xff
 8002946:	2601      	movs	r6, #1
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	229d      	movs	r2, #157	; 0x9d
 800294c:	21be      	movs	r1, #190	; 0xbe
 800294e:	2002      	movs	r0, #2
 8002950:	e9cd 6700 	strd	r6, r7, [sp]
	LCD_Rect(161, 190, 157, 128, 1, BLUE);

	if (temperature != temperatureLast && temperature >= -40 && temperature <= 40) {
 8002954:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8002c00 <bme280+0x310>
	LCD_Rect(2, 190, 157, 128, 1, BLUE);
 8002958:	f7ff faf0 	bl	8001f3c <LCD_Rect>
	LCD_Rect(161, 190, 157, 128, 1, BLUE);
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	229d      	movs	r2, #157	; 0x9d
 8002960:	21be      	movs	r1, #190	; 0xbe
 8002962:	20a1      	movs	r0, #161	; 0xa1
 8002964:	e9cd 6700 	strd	r6, r7, [sp]
 8002968:	f7ff fae8 	bl	8001f3c <LCD_Rect>
	if (temperature != temperatureLast && temperature >= -40 && temperature <= 40) {
 800296c:	e9d8 6700 	ldrd	r6, r7, [r8]
 8002970:	e9d9 ab00 	ldrd	sl, fp, [r9]
 8002974:	4630      	mov	r0, r6
 8002976:	4639      	mov	r1, r7
 8002978:	4652      	mov	r2, sl
 800297a:	465b      	mov	r3, fp
 800297c:	f7fe f8c8 	bl	8000b10 <__aeabi_dcmpeq>
 8002980:	b940      	cbnz	r0, 8002994 <bme280+0xa4>
 8002982:	2200      	movs	r2, #0
 8002984:	4630      	mov	r0, r6
 8002986:	4639      	mov	r1, r7
 8002988:	4b9e      	ldr	r3, [pc, #632]	; (8002c04 <bme280+0x314>)
 800298a:	f7fe f8df 	bl	8000b4c <__aeabi_dcmpge>
 800298e:	2800      	cmp	r0, #0
 8002990:	f040 80ec 	bne.w	8002b6c <bme280+0x27c>
		}

		temperatureLast = temperature;
	}

	if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 8002994:	4b97      	ldr	r3, [pc, #604]	; (8002bf4 <bme280+0x304>)
 8002996:	f8df b270 	ldr.w	fp, [pc, #624]	; 8002c08 <bme280+0x318>
 800299a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800299e:	e9db 8900 	ldrd	r8, r9, [fp]
 80029a2:	4630      	mov	r0, r6
 80029a4:	4639      	mov	r1, r7
 80029a6:	4642      	mov	r2, r8
 80029a8:	464b      	mov	r3, r9
 80029aa:	f7fe f8b1 	bl	8000b10 <__aeabi_dcmpeq>
 80029ae:	b978      	cbnz	r0, 80029d0 <bme280+0xe0>
 80029b0:	2200      	movs	r2, #0
 80029b2:	2300      	movs	r3, #0
 80029b4:	4630      	mov	r0, r6
 80029b6:	4639      	mov	r1, r7
 80029b8:	f7fe f8c8 	bl	8000b4c <__aeabi_dcmpge>
 80029bc:	b140      	cbz	r0, 80029d0 <bme280+0xe0>
 80029be:	4630      	mov	r0, r6
 80029c0:	4639      	mov	r1, r7
 80029c2:	2200      	movs	r2, #0
 80029c4:	4b91      	ldr	r3, [pc, #580]	; (8002c0c <bme280+0x31c>)
 80029c6:	f7fe f8ad 	bl	8000b24 <__aeabi_dcmplt>
 80029ca:	2800      	cmp	r0, #0
 80029cc:	f040 8142 	bne.w	8002c54 <bme280+0x364>
		else LCD_Font(166, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);

		humidityLast = humidity;
	}

	if (pressureLast != pressure) {
 80029d0:	4f8f      	ldr	r7, [pc, #572]	; (8002c10 <bme280+0x320>)
 80029d2:	882b      	ldrh	r3, [r5, #0]
 80029d4:	883a      	ldrh	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d029      	beq.n	8002a2e <bme280+0x13e>

		char weatherPrintP[9];

		if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d HP", pressureLast);
 80029da:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80029de:	ae05      	add	r6, sp, #20
 80029e0:	bf2c      	ite	cs
 80029e2:	498c      	ldrcs	r1, [pc, #560]	; (8002c14 <bme280+0x324>)
		else sprintf(weatherPrintP, " %02d HPa", pressureLast);
 80029e4:	498c      	ldrcc	r1, [pc, #560]	; (8002c18 <bme280+0x328>)
		if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d HP", pressureLast);
 80029e6:	4630      	mov	r0, r6
		else sprintf(weatherPrintP, " %02d HPa", pressureLast);
 80029e8:	f003 fc70 	bl	80062cc <siprintf>
		LCD_Font(310, 187, weatherPrintP, &DejaVu_Sans_36, 1, BLACK);
 80029ec:	2300      	movs	r3, #0
 80029ee:	2201      	movs	r2, #1
 80029f0:	21bb      	movs	r1, #187	; 0xbb
 80029f2:	e9cd 2300 	strd	r2, r3, [sp]
 80029f6:	f44f 709b 	mov.w	r0, #310	; 0x136
 80029fa:	4632      	mov	r2, r6
 80029fc:	4b87      	ldr	r3, [pc, #540]	; (8002c1c <bme280+0x32c>)
 80029fe:	f7ff fc01 	bl	8002204 <LCD_Font>

		if (pressure >= 1000) sprintf(weatherPrintP, "%02d HP", pressure);
 8002a02:	882a      	ldrh	r2, [r5, #0]
 8002a04:	4630      	mov	r0, r6
 8002a06:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8002a0a:	bf2c      	ite	cs
 8002a0c:	4981      	ldrcs	r1, [pc, #516]	; (8002c14 <bme280+0x324>)
		else sprintf(weatherPrintP, " %02d HP", pressure);
 8002a0e:	4984      	ldrcc	r1, [pc, #528]	; (8002c20 <bme280+0x330>)
 8002a10:	f003 fc5c 	bl	80062cc <siprintf>
		LCD_Font(310, 187, weatherPrintP, &DejaVu_Sans_36, 1, GRAY);
 8002a14:	4632      	mov	r2, r6
 8002a16:	2601      	movs	r6, #1
 8002a18:	4b82      	ldr	r3, [pc, #520]	; (8002c24 <bme280+0x334>)
 8002a1a:	21bb      	movs	r1, #187	; 0xbb
 8002a1c:	9301      	str	r3, [sp, #4]
 8002a1e:	f44f 709b 	mov.w	r0, #310	; 0x136
 8002a22:	4b7e      	ldr	r3, [pc, #504]	; (8002c1c <bme280+0x32c>)
 8002a24:	9600      	str	r6, [sp, #0]
 8002a26:	f7ff fbed 	bl	8002204 <LCD_Font>

		pressureLast = pressure;
 8002a2a:	882b      	ldrh	r3, [r5, #0]
 8002a2c:	803b      	strh	r3, [r7, #0]
	}


	if (pressure > 300 && pressure < 1100) {
 8002a2e:	f46f 7196 	mvn.w	r1, #300	; 0x12c
 8002a32:	f240 321e 	movw	r2, #798	; 0x31e
 8002a36:	440b      	add	r3, r1
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	f200 8093 	bhi.w	8002b66 <bme280+0x276>
 8002a40:	2600      	movs	r6, #0

		for (uint16_t i = 0; i < 4096; i++) eeprom[i] = AT24XX_Read(i);
 8002a42:	b2b0      	uxth	r0, r6
 8002a44:	f7fe faaa 	bl	8000f9c <AT24XX_Read>
 8002a48:	3601      	adds	r6, #1
 8002a4a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 8002a4e:	f804 0f01 	strb.w	r0, [r4, #1]!
 8002a52:	d1f6      	bne.n	8002a42 <bme280+0x152>
 8002a54:	4c74      	ldr	r4, [pc, #464]	; (8002c28 <bme280+0x338>)
 8002a56:	4b75      	ldr	r3, [pc, #468]	; (8002c2c <bme280+0x33c>)
 8002a58:	f104 0802 	add.w	r8, r4, #2
 8002a5c:	4647      	mov	r7, r8
 8002a5e:	4621      	mov	r1, r4
 8002a60:	f508 769c 	add.w	r6, r8, #312	; 0x138
	return (byteH << 8) | byteL;
 8002a64:	f893 0bb9 	ldrb.w	r0, [r3, #3001]	; 0xbb9
 8002a68:	f893 2bb8 	ldrb.w	r2, [r3, #3000]	; 0xbb8


		for (uint16_t i = 0; i < 157; i++) {
 8002a6c:	3302      	adds	r3, #2
	return (byteH << 8) | byteL;
 8002a6e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
			hourlyPressure[i] = byteS(eeprom[i * 2 + 3000], eeprom[i * 2 + 1 + 3000]);
 8002a72:	f821 2f02 	strh.w	r2, [r1, #2]!
		for (uint16_t i = 0; i < 157; i++) {
 8002a76:	428e      	cmp	r6, r1
 8002a78:	d1f4      	bne.n	8002a64 <bme280+0x174>
		}

		if (hourlyPressure[0] != rtcHrs) {
 8002a7a:	4b6d      	ldr	r3, [pc, #436]	; (8002c30 <bme280+0x340>)
 8002a7c:	f8b8 2000 	ldrh.w	r2, [r8]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	f000 80aa 	beq.w	8002bdc <bme280+0x2ec>
			hourlyPressure[0] = rtcHrs;

			for (uint16_t i = 1; i < 156; i++) hourlyPressure[i] = hourlyPressure[i + 1];
 8002a88:	496a      	ldr	r1, [pc, #424]	; (8002c34 <bme280+0x344>)
			hourlyPressure[0] = rtcHrs;
 8002a8a:	f8a8 3000 	strh.w	r3, [r8]
			for (uint16_t i = 1; i < 156; i++) hourlyPressure[i] = hourlyPressure[i + 1];
 8002a8e:	f44f 729b 	mov.w	r2, #310	; 0x136
 8002a92:	1e88      	subs	r0, r1, #2
 8002a94:	f002 fd86 	bl	80055a4 <memmove>
			hourlyPressure[155] = (uint16_t)pressure;
 8002a98:	882b      	ldrh	r3, [r5, #0]
 8002a9a:	b2a5      	uxth	r5, r4
 8002a9c:	f8a8 3136 	strh.w	r3, [r8, #310]	; 0x136

			for (uint16_t i = 0; i < 157; i++) {
 8002aa0:	f5c5 683b 	rsb	r8, r5, #2992	; 0xbb0
				AT24XX_Update(i * 2 + 3000, byteL(hourlyPressure[i]));
				AT24XX_Update(i * 2 + 1 + 3000, byteH(hourlyPressure[i]));
 8002aa4:	4645      	mov	r5, r8
 8002aa6:	f108 0808 	add.w	r8, r8, #8
 8002aaa:	3507      	adds	r5, #7
	return (val & 0xFF);
 8002aac:	eb08 0004 	add.w	r0, r8, r4
 8002ab0:	f834 1f02 	ldrh.w	r1, [r4, #2]!
				AT24XX_Update(i * 2 + 3000, byteL(hourlyPressure[i]));
 8002ab4:	b280      	uxth	r0, r0
 8002ab6:	b2c9      	uxtb	r1, r1
 8002ab8:	f7fe fa88 	bl	8000fcc <AT24XX_Update>
	return ((val >> 8) & 0xFF);
 8002abc:	8821      	ldrh	r1, [r4, #0]
				AT24XX_Update(i * 2 + 1 + 3000, byteH(hourlyPressure[i]));
 8002abe:	1928      	adds	r0, r5, r4
 8002ac0:	0a09      	lsrs	r1, r1, #8
 8002ac2:	b280      	uxth	r0, r0
 8002ac4:	f7fe fa82 	bl	8000fcc <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 8002ac8:	42a6      	cmp	r6, r4
 8002aca:	d1ef      	bne.n	8002aac <bme280+0x1bc>
			}

			graphViewed = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	4a5a      	ldr	r2, [pc, #360]	; (8002c38 <bme280+0x348>)
 8002ad0:	9203      	str	r2, [sp, #12]
 8002ad2:	7013      	strb	r3, [r2, #0]
		}

		if (!graphViewed) {

			LCD_Rect(320, 190, 157, 128, 1, BLUE);
 8002ad4:	24ff      	movs	r4, #255	; 0xff
 8002ad6:	f04f 0801 	mov.w	r8, #1
 8002ada:	2380      	movs	r3, #128	; 0x80
 8002adc:	229d      	movs	r2, #157	; 0x9d
 8002ade:	21be      	movs	r1, #190	; 0xbe
 8002ae0:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002ae4:	e9cd 8400 	strd	r8, r4, [sp]
 8002ae8:	f240 1541 	movw	r5, #321	; 0x141
 8002aec:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8002c3c <bme280+0x34c>
 8002af0:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8002c40 <bme280+0x350>

			for (uint16_t i = 1; i < 156 ; i++) {
				int16_t val = 0;
				val = hourlyPressure[i];
				if (val < maximumPressure - 127) val = maximumPressure - 127;
								LCD_Line(320 + i, 318, 320 + i, 191, 1, GRAY);
 8002af4:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8002c24 <bme280+0x334>
			LCD_Rect(320, 190, 157, 128, 1, BLUE);
 8002af8:	f7ff fa20 	bl	8001f3c <LCD_Rect>
				val = hourlyPressure[i];
 8002afc:	f837 6f02 	ldrh.w	r6, [r7, #2]!
				if (val < maximumPressure - 127) val = maximumPressure - 127;
 8002b00:	f8b9 c000 	ldrh.w	ip, [r9]
 8002b04:	b234      	sxth	r4, r6
 8002b06:	f1ac 0c7f 	sub.w	ip, ip, #127	; 0x7f
 8002b0a:	4564      	cmp	r4, ip
								LCD_Line(320 + i, 318, 320 + i, 191, 1, GRAY);
 8002b0c:	462a      	mov	r2, r5
 8002b0e:	4628      	mov	r0, r5
 8002b10:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002b14:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8002b18:	e9cd 8a00 	strd	r8, sl, [sp]
								LCD_Line(320 + i, 318, 320 + i, 191 + (maximumPressure - val), 1, RGB(255 - ((maximumPressure - val) * 2), 0, 255 - (255 - ((maximumPressure - val) * 2))));
 8002b1c:	bfbc      	itt	lt
 8002b1e:	fa0f f48c 	sxthlt.w	r4, ip
				if (val < maximumPressure - 127) val = maximumPressure - 127;
 8002b22:	fa1f f68c 	uxthlt.w	r6, ip
								LCD_Line(320 + i, 318, 320 + i, 191, 1, GRAY);
 8002b26:	f7ff f9c3 	bl	8001eb0 <LCD_Line>
								LCD_Line(320 + i, 318, 320 + i, 191 + (maximumPressure - val), 1, RGB(255 - ((maximumPressure - val) * 2), 0, 255 - (255 - ((maximumPressure - val) * 2))));
 8002b2a:	f8b9 3000 	ldrh.w	r3, [r9]
 8002b2e:	2100      	movs	r1, #0
 8002b30:	1b1a      	subs	r2, r3, r4
 8002b32:	0052      	lsls	r2, r2, #1
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	33bf      	adds	r3, #191	; 0xbf
 8002b38:	f082 00ff 	eor.w	r0, r2, #255	; 0xff
 8002b3c:	1b9e      	subs	r6, r3, r6
 8002b3e:	f7fe fdbd 	bl	80016bc <RGB>
 8002b42:	4604      	mov	r4, r0
 8002b44:	b2b6      	uxth	r6, r6
 8002b46:	462a      	mov	r2, r5
 8002b48:	4628      	mov	r0, r5
 8002b4a:	4633      	mov	r3, r6
 8002b4c:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8002b50:	e9cd 8400 	strd	r8, r4, [sp]
 8002b54:	f7ff f9ac 	bl	8001eb0 <LCD_Line>
			for (uint16_t i = 1; i < 156 ; i++) {
 8002b58:	3501      	adds	r5, #1
 8002b5a:	455f      	cmp	r7, fp
 8002b5c:	b2ad      	uxth	r5, r5
 8002b5e:	d1cd      	bne.n	8002afc <bme280+0x20c>
			}

			graphViewed = 1;
 8002b60:	9b03      	ldr	r3, [sp, #12]
 8002b62:	f883 8000 	strb.w	r8, [r3]
		}
	}
}
 8002b66:	b009      	add	sp, #36	; 0x24
 8002b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (temperature != temperatureLast && temperature >= -40 && temperature <= 40) {
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	4630      	mov	r0, r6
 8002b70:	4639      	mov	r1, r7
 8002b72:	4b34      	ldr	r3, [pc, #208]	; (8002c44 <bme280+0x354>)
 8002b74:	f7fd ffe0 	bl	8000b38 <__aeabi_dcmple>
 8002b78:	2800      	cmp	r0, #0
 8002b7a:	f43f af0b 	beq.w	8002994 <bme280+0xa4>
		if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8002b7e:	2200      	movs	r2, #0
 8002b80:	4650      	mov	r0, sl
 8002b82:	4659      	mov	r1, fp
 8002b84:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <bme280+0x358>)
 8002b86:	f7fd ffe1 	bl	8000b4c <__aeabi_dcmpge>
 8002b8a:	2800      	cmp	r0, #0
 8002b8c:	f040 809c 	bne.w	8002cc8 <bme280+0x3d8>
 8002b90:	2200      	movs	r2, #0
 8002b92:	2300      	movs	r3, #0
 8002b94:	4650      	mov	r0, sl
 8002b96:	4659      	mov	r1, fp
 8002b98:	f7fd ffc4 	bl	8000b24 <__aeabi_dcmplt>
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	f040 8110 	bne.w	8002dc4 <bme280+0x4d4>
		else if (temperatureLast < 10 && temperatureLast > 0) {
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	4650      	mov	r0, sl
 8002ba8:	4659      	mov	r1, fp
 8002baa:	f7fd ffd9 	bl	8000b60 <__aeabi_dcmpgt>
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	f040 8119 	bne.w	8002de6 <bme280+0x4f6>
		else if (temperatureLast <= -10) {
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	4650      	mov	r0, sl
 8002bb8:	4659      	mov	r1, fp
 8002bba:	4b24      	ldr	r3, [pc, #144]	; (8002c4c <bme280+0x35c>)
 8002bbc:	f7fd ffbc 	bl	8000b38 <__aeabi_dcmple>
 8002bc0:	2800      	cmp	r0, #0
 8002bc2:	f000 8092 	beq.w	8002cea <bme280+0x3fa>
			sprintf(weatherPrintT, "%2d", (int8_t)temperatureLast);
 8002bc6:	4659      	mov	r1, fp
 8002bc8:	4650      	mov	r0, sl
 8002bca:	f7fd ffe9 	bl	8000ba0 <__aeabi_d2iz>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	491f      	ldr	r1, [pc, #124]	; (8002c50 <bme280+0x360>)
 8002bd2:	a805      	add	r0, sp, #20
 8002bd4:	b252      	sxtb	r2, r2
 8002bd6:	f003 fb79 	bl	80062cc <siprintf>
 8002bda:	e07b      	b.n	8002cd4 <bme280+0x3e4>
		if (!graphViewed) {
 8002bdc:	4b16      	ldr	r3, [pc, #88]	; (8002c38 <bme280+0x348>)
 8002bde:	9303      	str	r3, [sp, #12]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f43f af76 	beq.w	8002ad4 <bme280+0x1e4>
}
 8002be8:	b009      	add	sp, #36	; 0x24
 8002bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bee:	bf00      	nop
 8002bf0:	20001450 	.word	0x20001450
 8002bf4:	20001428 	.word	0x20001428
 8002bf8:	2000038b 	.word	0x2000038b
 8002bfc:	20001438 	.word	0x20001438
 8002c00:	20001458 	.word	0x20001458
 8002c04:	c0440000 	.word	0xc0440000
 8002c08:	20001430 	.word	0x20001430
 8002c0c:	40590000 	.word	0x40590000
 8002c10:	2000143a 	.word	0x2000143a
 8002c14:	0800a300 	.word	0x0800a300
 8002c18:	0800a308 	.word	0x0800a308
 8002c1c:	080195bc 	.word	0x080195bc
 8002c20:	0800a314 	.word	0x0800a314
 8002c24:	007f7f7f 	.word	0x007f7f7f
 8002c28:	1ffffffe 	.word	0x1ffffffe
 8002c2c:	2000038c 	.word	0x2000038c
 8002c30:	20001440 	.word	0x20001440
 8002c34:	20000004 	.word	0x20000004
 8002c38:	2000138c 	.word	0x2000138c
 8002c3c:	20000136 	.word	0x20000136
 8002c40:	2000013a 	.word	0x2000013a
 8002c44:	40440000 	.word	0x40440000
 8002c48:	40240000 	.word	0x40240000
 8002c4c:	c0240000 	.word	0xc0240000
 8002c50:	0800a2e8 	.word	0x0800a2e8
				sprintf(weatherPrintH, "%.1f %%H", humidityLast);
 8002c54:	ae05      	add	r6, sp, #20
 8002c56:	4642      	mov	r2, r8
 8002c58:	464b      	mov	r3, r9
 8002c5a:	496f      	ldr	r1, [pc, #444]	; (8002e18 <bme280+0x528>)
 8002c5c:	4630      	mov	r0, r6
 8002c5e:	f003 fb35 	bl	80062cc <siprintf>
		if (humidityLast >= 10)
 8002c62:	e9db 0100 	ldrd	r0, r1, [fp]
 8002c66:	2200      	movs	r2, #0
 8002c68:	4b6c      	ldr	r3, [pc, #432]	; (8002e1c <bme280+0x52c>)
 8002c6a:	f7fd ff6f 	bl	8000b4c <__aeabi_dcmpge>
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	d17a      	bne.n	8002d68 <bme280+0x478>
		else LCD_Font(166, 187, weatherPrintH, &DejaVu_Sans_36, 1, BLACK);
 8002c72:	2301      	movs	r3, #1
 8002c74:	9001      	str	r0, [sp, #4]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	4632      	mov	r2, r6
 8002c7a:	21bb      	movs	r1, #187	; 0xbb
 8002c7c:	20a6      	movs	r0, #166	; 0xa6
 8002c7e:	4b68      	ldr	r3, [pc, #416]	; (8002e20 <bme280+0x530>)
 8002c80:	f7ff fac0 	bl	8002204 <LCD_Font>
				sprintf(weatherPrintH, "%.1f %%H", humidity);
 8002c84:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <bme280+0x534>)
 8002c86:	4630      	mov	r0, r6
 8002c88:	461f      	mov	r7, r3
 8002c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8e:	4962      	ldr	r1, [pc, #392]	; (8002e18 <bme280+0x528>)
 8002c90:	f003 fb1c 	bl	80062cc <siprintf>
		if (humidity >= 10)
 8002c94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	4b60      	ldr	r3, [pc, #384]	; (8002e1c <bme280+0x52c>)
 8002c9c:	f7fd ff56 	bl	8000b4c <__aeabi_dcmpge>
			LCD_Font(140, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 8002ca0:	4632      	mov	r2, r6
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8002ca8:	21bb      	movs	r1, #187	; 0xbb
 8002caa:	e9cd 3600 	strd	r3, r6, [sp]
		if (humidity >= 10)
 8002cae:	2800      	cmp	r0, #0
 8002cb0:	f000 80ad 	beq.w	8002e0e <bme280+0x51e>
			LCD_Font(140, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 8002cb4:	208c      	movs	r0, #140	; 0x8c
 8002cb6:	4b5a      	ldr	r3, [pc, #360]	; (8002e20 <bme280+0x530>)
 8002cb8:	f7ff faa4 	bl	8002204 <LCD_Font>
		humidityLast = humidity;
 8002cbc:	4b59      	ldr	r3, [pc, #356]	; (8002e24 <bme280+0x534>)
 8002cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc2:	e9cb 2300 	strd	r2, r3, [fp]
 8002cc6:	e683      	b.n	80029d0 <bme280+0xe0>
			sprintf(weatherPrintT, "%.1f 'C", temperatureLast);
 8002cc8:	4652      	mov	r2, sl
 8002cca:	465b      	mov	r3, fp
 8002ccc:	4956      	ldr	r1, [pc, #344]	; (8002e28 <bme280+0x538>)
 8002cce:	a805      	add	r0, sp, #20
 8002cd0:	f003 fafc 	bl	80062cc <siprintf>
			LCD_Font(0, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	21bb      	movs	r1, #187	; 0xbb
 8002cda:	e9cd 3000 	strd	r3, r0, [sp]
 8002cde:	aa05      	add	r2, sp, #20
 8002ce0:	4b4f      	ldr	r3, [pc, #316]	; (8002e20 <bme280+0x530>)
 8002ce2:	f7ff fa8f 	bl	8002204 <LCD_Font>
		if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8002ce6:	e9d8 6700 	ldrd	r6, r7, [r8]
 8002cea:	2200      	movs	r2, #0
 8002cec:	4630      	mov	r0, r6
 8002cee:	4639      	mov	r1, r7
 8002cf0:	4b4a      	ldr	r3, [pc, #296]	; (8002e1c <bme280+0x52c>)
 8002cf2:	f7fd ff2b 	bl	8000b4c <__aeabi_dcmpge>
 8002cf6:	bb08      	cbnz	r0, 8002d3c <bme280+0x44c>
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	4630      	mov	r0, r6
 8002cfe:	4639      	mov	r1, r7
 8002d00:	f7fd ff10 	bl	8000b24 <__aeabi_dcmplt>
 8002d04:	2200      	movs	r2, #0
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d139      	bne.n	8002d7e <bme280+0x48e>
		else if (temperature < 10 && temperature > 0) {
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	4630      	mov	r0, r6
 8002d0e:	4639      	mov	r1, r7
 8002d10:	f7fd ff26 	bl	8000b60 <__aeabi_dcmpgt>
 8002d14:	2800      	cmp	r0, #0
 8002d16:	d141      	bne.n	8002d9c <bme280+0x4ac>
		else if (temperature <= -10) {
 8002d18:	2200      	movs	r2, #0
 8002d1a:	4630      	mov	r0, r6
 8002d1c:	4639      	mov	r1, r7
 8002d1e:	4b43      	ldr	r3, [pc, #268]	; (8002e2c <bme280+0x53c>)
 8002d20:	f7fd ff0a 	bl	8000b38 <__aeabi_dcmple>
 8002d24:	b1e8      	cbz	r0, 8002d62 <bme280+0x472>
			sprintf(weatherPrintT, "%2d 'C", (int8_t)temperature);
 8002d26:	4639      	mov	r1, r7
 8002d28:	4630      	mov	r0, r6
 8002d2a:	f7fd ff39 	bl	8000ba0 <__aeabi_d2iz>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	493f      	ldr	r1, [pc, #252]	; (8002e30 <bme280+0x540>)
 8002d32:	a805      	add	r0, sp, #20
 8002d34:	b252      	sxtb	r2, r2
 8002d36:	f003 fac9 	bl	80062cc <siprintf>
 8002d3a:	e005      	b.n	8002d48 <bme280+0x458>
			sprintf(weatherPrintT, "%.1f 'C", temperature);
 8002d3c:	4632      	mov	r2, r6
 8002d3e:	463b      	mov	r3, r7
 8002d40:	4939      	ldr	r1, [pc, #228]	; (8002e28 <bme280+0x538>)
 8002d42:	a805      	add	r0, sp, #20
 8002d44:	f003 fac2 	bl	80062cc <siprintf>
			LCD_Font(0, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
 8002d48:	f04f 0c01 	mov.w	ip, #1
 8002d4c:	4b39      	ldr	r3, [pc, #228]	; (8002e34 <bme280+0x544>)
 8002d4e:	21bb      	movs	r1, #187	; 0xbb
 8002d50:	e9cd c300 	strd	ip, r3, [sp]
 8002d54:	2000      	movs	r0, #0
 8002d56:	4b32      	ldr	r3, [pc, #200]	; (8002e20 <bme280+0x530>)
 8002d58:	aa05      	add	r2, sp, #20
 8002d5a:	f7ff fa53 	bl	8002204 <LCD_Font>
		temperatureLast = temperature;
 8002d5e:	e9d8 6700 	ldrd	r6, r7, [r8]
 8002d62:	e9c9 6700 	strd	r6, r7, [r9]
 8002d66:	e615      	b.n	8002994 <bme280+0xa4>
			LCD_Font(140, 187, weatherPrintH, &DejaVu_Sans_36, 1, BLACK);
 8002d68:	2301      	movs	r3, #1
 8002d6a:	2700      	movs	r7, #0
 8002d6c:	4632      	mov	r2, r6
 8002d6e:	e9cd 3700 	strd	r3, r7, [sp]
 8002d72:	21bb      	movs	r1, #187	; 0xbb
 8002d74:	208c      	movs	r0, #140	; 0x8c
 8002d76:	4b2a      	ldr	r3, [pc, #168]	; (8002e20 <bme280+0x530>)
 8002d78:	f7ff fa44 	bl	8002204 <LCD_Font>
 8002d7c:	e782      	b.n	8002c84 <bme280+0x394>
		if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8002d7e:	4630      	mov	r0, r6
 8002d80:	4639      	mov	r1, r7
 8002d82:	4b2a      	ldr	r3, [pc, #168]	; (8002e2c <bme280+0x53c>)
 8002d84:	f7fd feec 	bl	8000b60 <__aeabi_dcmpgt>
 8002d88:	2800      	cmp	r0, #0
 8002d8a:	d1d7      	bne.n	8002d3c <bme280+0x44c>
		else if (temperature < 10 && temperature > 0) {
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2300      	movs	r3, #0
 8002d90:	4630      	mov	r0, r6
 8002d92:	4639      	mov	r1, r7
 8002d94:	f7fd fee4 	bl	8000b60 <__aeabi_dcmpgt>
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	d0c4      	beq.n	8002d26 <bme280+0x436>
			sprintf(weatherPrintT, "%.1f 'C", temperature);
 8002d9c:	4632      	mov	r2, r6
 8002d9e:	463b      	mov	r3, r7
 8002da0:	4921      	ldr	r1, [pc, #132]	; (8002e28 <bme280+0x538>)
 8002da2:	a805      	add	r0, sp, #20
 8002da4:	f003 fa92 	bl	80062cc <siprintf>
			LCD_Font(26, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
 8002da8:	f04f 0e01 	mov.w	lr, #1
 8002dac:	4b21      	ldr	r3, [pc, #132]	; (8002e34 <bme280+0x544>)
 8002dae:	21bb      	movs	r1, #187	; 0xbb
 8002db0:	e9cd e300 	strd	lr, r3, [sp]
 8002db4:	201a      	movs	r0, #26
 8002db6:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <bme280+0x530>)
 8002db8:	aa05      	add	r2, sp, #20
 8002dba:	f7ff fa23 	bl	8002204 <LCD_Font>
		temperatureLast = temperature;
 8002dbe:	e9d8 6700 	ldrd	r6, r7, [r8]
			LCD_Font(26, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
 8002dc2:	e7ce      	b.n	8002d62 <bme280+0x472>
		if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8002dc4:	4650      	mov	r0, sl
 8002dc6:	4659      	mov	r1, fp
 8002dc8:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <bme280+0x53c>)
 8002dca:	f7fd fec9 	bl	8000b60 <__aeabi_dcmpgt>
 8002dce:	2800      	cmp	r0, #0
 8002dd0:	f47f af7a 	bne.w	8002cc8 <bme280+0x3d8>
		else if (temperatureLast < 10 && temperatureLast > 0) {
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	4650      	mov	r0, sl
 8002dda:	4659      	mov	r1, fp
 8002ddc:	f7fd fec0 	bl	8000b60 <__aeabi_dcmpgt>
 8002de0:	2800      	cmp	r0, #0
 8002de2:	f43f aef0 	beq.w	8002bc6 <bme280+0x2d6>
			sprintf(weatherPrintT, "%.1f 'C", temperatureLast);
 8002de6:	4652      	mov	r2, sl
 8002de8:	465b      	mov	r3, fp
 8002dea:	490f      	ldr	r1, [pc, #60]	; (8002e28 <bme280+0x538>)
 8002dec:	a805      	add	r0, sp, #20
 8002dee:	f003 fa6d 	bl	80062cc <siprintf>
			LCD_Font(26, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
 8002df2:	f04f 0a00 	mov.w	sl, #0
 8002df6:	2301      	movs	r3, #1
 8002df8:	21bb      	movs	r1, #187	; 0xbb
 8002dfa:	e9cd 3a00 	strd	r3, sl, [sp]
 8002dfe:	201a      	movs	r0, #26
 8002e00:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <bme280+0x530>)
 8002e02:	aa05      	add	r2, sp, #20
 8002e04:	f7ff f9fe 	bl	8002204 <LCD_Font>
		if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8002e08:	e9d8 6700 	ldrd	r6, r7, [r8]
			LCD_Font(26, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
 8002e0c:	e76d      	b.n	8002cea <bme280+0x3fa>
		else LCD_Font(166, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 8002e0e:	20a6      	movs	r0, #166	; 0xa6
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <bme280+0x530>)
 8002e12:	f7ff f9f7 	bl	8002204 <LCD_Font>
 8002e16:	e751      	b.n	8002cbc <bme280+0x3cc>
 8002e18:	0800a2f4 	.word	0x0800a2f4
 8002e1c:	40240000 	.word	0x40240000
 8002e20:	080195bc 	.word	0x080195bc
 8002e24:	20001428 	.word	0x20001428
 8002e28:	0800a2e0 	.word	0x0800a2e0
 8002e2c:	c0240000 	.word	0xc0240000
 8002e30:	0800a2ec 	.word	0x0800a2ec
 8002e34:	00ffa500 	.word	0x00ffa500

08002e38 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e38:	2300      	movs	r3, #0
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e3a:	2201      	movs	r2, #1
{
 8002e3c:	b5d0      	push	{r4, r6, r7, lr}
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e3e:	2001      	movs	r0, #1
{
 8002e40:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e42:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e46:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e48:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e4c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8002e50:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e54:	9308      	str	r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e56:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e58:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e5a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002e60:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e64:	e9cd 0106 	strd	r0, r1, [sp, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e68:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002e6a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e6e:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e70:	f002 f820 	bl	8004eb4 <HAL_RCC_OscConfig>
 8002e74:	b108      	cbz	r0, 8002e7a <SystemClock_Config+0x42>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e76:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002e78:	e7fe      	b.n	8002e78 <SystemClock_Config+0x40>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e7a:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e7c:	260f      	movs	r6, #15
 8002e7e:	2702      	movs	r7, #2
 8002e80:	2200      	movs	r2, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e82:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e88:	4621      	mov	r1, r4
 8002e8a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e8c:	e9cd 6700 	strd	r6, r7, [sp]
 8002e90:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e94:	f002 f9fe 	bl	8005294 <HAL_RCC_ClockConfig>
 8002e98:	b108      	cbz	r0, 8002e9e <SystemClock_Config+0x66>
 8002e9a:	b672      	cpsid	i
	while (1)
 8002e9c:	e7fe      	b.n	8002e9c <SystemClock_Config+0x64>
}
 8002e9e:	b010      	add	sp, #64	; 0x40
 8002ea0:	bdd0      	pop	{r4, r6, r7, pc}
 8002ea2:	bf00      	nop

08002ea4 <main>:
{
 8002ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea8:	2400      	movs	r4, #0
{
 8002eaa:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8002eac:	f000 fc02 	bl	80036b4 <HAL_Init>
  SystemClock_Config();
 8002eb0:	f7ff ffc2 	bl	8002e38 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb4:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002eb8:	e9cd 4408 	strd	r4, r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ebc:	4b4a      	ldr	r3, [pc, #296]	; (8002fe8 <main+0x144>)
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin
 8002ebe:	f24e 013f 	movw	r1, #57407	; 0xe03f
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin
 8002ec4:	4849      	ldr	r0, [pc, #292]	; (8002fec <main+0x148>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec6:	f042 0210 	orr.w	r2, r2, #16
 8002eca:	619a      	str	r2, [r3, #24]
 8002ecc:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = LED_Pin;
 8002ece:	2600      	movs	r6, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed0:	f002 0210 	and.w	r2, r2, #16
 8002ed4:	9202      	str	r2, [sp, #8]
 8002ed6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ed8:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = LED_Pin;
 8002eda:	2702      	movs	r7, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002edc:	f042 0220 	orr.w	r2, r2, #32
 8002ee0:	619a      	str	r2, [r3, #24]
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	f002 0220 	and.w	r2, r2, #32
 8002ee8:	9203      	str	r2, [sp, #12]
 8002eea:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	f042 0204 	orr.w	r2, r2, #4
 8002ef2:	619a      	str	r2, [r3, #24]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	f002 0204 	and.w	r2, r2, #4
 8002efa:	9204      	str	r2, [sp, #16]
 8002efc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002efe:	699a      	ldr	r2, [r3, #24]
 8002f00:	f042 0208 	orr.w	r2, r2, #8
 8002f04:	619a      	str	r2, [r3, #24]
 8002f06:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin
 8002f08:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	9305      	str	r3, [sp, #20]
 8002f10:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin
 8002f12:	f000 fd7b 	bl	8003a0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8002f16:	4622      	mov	r2, r4
 8002f18:	21ff      	movs	r1, #255	; 0xff
 8002f1a:	4835      	ldr	r0, [pc, #212]	; (8002ff0 <main+0x14c>)
 8002f1c:	f000 fd76 	bl	8003a0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8002f20:	4622      	mov	r2, r4
 8002f22:	f640 4103 	movw	r1, #3075	; 0xc03
 8002f26:	4833      	ldr	r0, [pc, #204]	; (8002ff4 <main+0x150>)
 8002f28:	f000 fd70 	bl	8003a0c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 8002f2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f30:	2301      	movs	r3, #1
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002f32:	482e      	ldr	r0, [pc, #184]	; (8002fec <main+0x148>)
 8002f34:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = LED_Pin;
 8002f36:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8002f3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8002f3e:	2600      	movs	r6, #0
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002f40:	f000 fc56 	bl	80037f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8002f44:	2703      	movs	r7, #3
 8002f46:	f24c 023f 	movw	r2, #49215	; 0xc03f
 8002f4a:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f4c:	4827      	ldr	r0, [pc, #156]	; (8002fec <main+0x148>)
 8002f4e:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8002f50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002f54:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f58:	f000 fc4a 	bl	80037f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8002f5c:	22ff      	movs	r2, #255	; 0xff
 8002f5e:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f60:	4823      	ldr	r0, [pc, #140]	; (8002ff0 <main+0x14c>)
 8002f62:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8002f64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002f68:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6c:	f000 fc40 	bl	80037f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8002f70:	f640 4203 	movw	r2, #3075	; 0xc03
 8002f74:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f76:	481f      	ldr	r0, [pc, #124]	; (8002ff4 <main+0x150>)
 8002f78:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8002f7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002f7e:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f82:	f000 fc35 	bl	80037f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 8002f86:	2204      	movs	r2, #4
 8002f88:	2300      	movs	r3, #0
  HAL_GPIO_Init(SYSTEM_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8002f8a:	481a      	ldr	r0, [pc, #104]	; (8002ff4 <main+0x150>)
 8002f8c:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 8002f8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f92:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SYSTEM_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8002f94:	f000 fc2c 	bl	80037f0 <HAL_GPIO_Init>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Instance = I2C1;
 8002f9c:	4816      	ldr	r0, [pc, #88]	; (8002ff8 <main+0x154>)
 8002f9e:	4a17      	ldr	r2, [pc, #92]	; (8002ffc <main+0x158>)
  hi2c1.Init.OwnAddress2 = 0;
 8002fa0:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hi2c1.Instance = I2C1;
 8002fa4:	6002      	str	r2, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002fa6:	4a16      	ldr	r2, [pc, #88]	; (8003000 <main+0x15c>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fa8:	e9c0 4407 	strd	r4, r4, [r0, #28]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002fac:	6084      	str	r4, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002fae:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.ClockSpeed = 400000;
 8002fb0:	6042      	str	r2, [r0, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fb2:	6103      	str	r3, [r0, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fb4:	f000 ffa6 	bl	8003f04 <HAL_I2C_Init>
 8002fb8:	b108      	cbz	r0, 8002fbe <main+0x11a>
 8002fba:	b672      	cpsid	i
	while (1)
 8002fbc:	e7fe      	b.n	8002fbc <main+0x118>
  huart1.Instance = USART1;
 8002fbe:	4603      	mov	r3, r0
  huart1.Init.BaudRate = 115200;
 8002fc0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fc4:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 8002fc6:	480f      	ldr	r0, [pc, #60]	; (8003004 <main+0x160>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fc8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fcc:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fd0:	6103      	str	r3, [r0, #16]
  huart1.Instance = USART1;
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <main+0x164>)
  huart1.Init.BaudRate = 115200;
 8002fd4:	6041      	str	r1, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fd6:	6142      	str	r2, [r0, #20]
  huart1.Instance = USART1;
 8002fd8:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fda:	f002 fa4b 	bl	8005474 <HAL_UART_Init>
 8002fde:	4604      	mov	r4, r0
 8002fe0:	b1a0      	cbz	r0, 800300c <main+0x168>
 8002fe2:	b672      	cpsid	i
	while (1)
 8002fe4:	e7fe      	b.n	8002fe4 <main+0x140>
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40011000 	.word	0x40011000
 8002ff0:	40010800 	.word	0x40010800
 8002ff4:	40010c00 	.word	0x40010c00
 8002ff8:	20001390 	.word	0x20001390
 8002ffc:	40005400 	.word	0x40005400
 8003000:	00061a80 	.word	0x00061a80
 8003004:	200013e4 	.word	0x200013e4
 8003008:	40013800 	.word	0x40013800
	LCD_Rect_Fill(0, 0, 480, 320, BLUE);
 800300c:	25ff      	movs	r5, #255	; 0xff
	LCD_Init();
 800300e:	f7ff f9bd 	bl	800238c <LCD_Init>
	LCD_Rect_Fill(0, 0, 480, 320, BLUE);
 8003012:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003016:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800301a:	4621      	mov	r1, r4
 800301c:	4620      	mov	r0, r4
 800301e:	9500      	str	r5, [sp, #0]
 8003020:	f7fe fb52 	bl	80016c8 <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 478, 318, BLACK);
 8003024:	2101      	movs	r1, #1
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_36, 1, RED);
 8003026:	f44f 067f 	mov.w	r6, #16711680	; 0xff0000
 800302a:	2501      	movs	r5, #1
	LCD_Rect_Fill(1, 1, 478, 318, BLACK);
 800302c:	4608      	mov	r0, r1
 800302e:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8003032:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8003036:	9400      	str	r4, [sp, #0]
 8003038:	f7fe fb46 	bl	80016c8 <LCD_Rect_Fill>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_36, 1, RED);
 800303c:	4bc5      	ldr	r3, [pc, #788]	; (8003354 <main+0x4b0>)
 800303e:	217f      	movs	r1, #127	; 0x7f
 8003040:	2014      	movs	r0, #20
 8003042:	e9cd 5600 	strd	r5, r6, [sp]
 8003046:	4ac4      	ldr	r2, [pc, #784]	; (8003358 <main+0x4b4>)
 8003048:	f7ff f8dc 	bl	8002204 <LCD_Font>
	if (clearEEPROM) {
 800304c:	4bc3      	ldr	r3, [pc, #780]	; (800335c <main+0x4b8>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	f040 81bf 	bne.w	80033d4 <main+0x530>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_36, 1, BLACK);
 8003056:	2601      	movs	r6, #1
 8003058:	2400      	movs	r4, #0
	LCD_Font(20, 127, "Waiting for I2C devices", &DejaVu_Sans_36, 1, RED);
 800305a:	f44f 077f 	mov.w	r7, #16711680	; 0xff0000
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_36, 1, BLACK);
 800305e:	217f      	movs	r1, #127	; 0x7f
 8003060:	2014      	movs	r0, #20
 8003062:	4bbc      	ldr	r3, [pc, #752]	; (8003354 <main+0x4b0>)
 8003064:	4abc      	ldr	r2, [pc, #752]	; (8003358 <main+0x4b4>)
 8003066:	e9cd 6400 	strd	r6, r4, [sp]
 800306a:	f7ff f8cb 	bl	8002204 <LCD_Font>
	LCD_Font(20, 127, "Waiting for I2C devices", &DejaVu_Sans_36, 1, RED);
 800306e:	217f      	movs	r1, #127	; 0x7f
 8003070:	2014      	movs	r0, #20
 8003072:	4bb8      	ldr	r3, [pc, #736]	; (8003354 <main+0x4b0>)
 8003074:	4aba      	ldr	r2, [pc, #744]	; (8003360 <main+0x4bc>)
 8003076:	9600      	str	r6, [sp, #0]
 8003078:	9701      	str	r7, [sp, #4]
 800307a:	4dba      	ldr	r5, [pc, #744]	; (8003364 <main+0x4c0>)
 800307c:	f7ff f8c2 	bl	8002204 <LCD_Font>
	for (uint16_t i = 0; i < 4096; i++) eeprom[i] = AT24XX_Read(i);
 8003080:	b2a0      	uxth	r0, r4
 8003082:	f7fd ff8b 	bl	8000f9c <AT24XX_Read>
 8003086:	3401      	adds	r4, #1
 8003088:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800308c:	f805 0f01 	strb.w	r0, [r5, #1]!
 8003090:	d1f6      	bne.n	8003080 <main+0x1dc>
	LCD_Font(20, 127, "Waiting for I2C devices", &DejaVu_Sans_36, 1, BLACK);
 8003092:	2501      	movs	r5, #1
 8003094:	2700      	movs	r7, #0
 8003096:	217f      	movs	r1, #127	; 0x7f
 8003098:	2014      	movs	r0, #20
 800309a:	4bae      	ldr	r3, [pc, #696]	; (8003354 <main+0x4b0>)
 800309c:	4ab0      	ldr	r2, [pc, #704]	; (8003360 <main+0x4bc>)
 800309e:	e9cd 5700 	strd	r5, r7, [sp]
 80030a2:	f7ff f8af 	bl	8002204 <LCD_Font>
	BME280_Init();
 80030a6:	f7fe f975 	bl	8001394 <BME280_Init>
	DS3231_Update();
 80030aa:	f7fe fa5b 	bl	8001564 <DS3231_Update>
 80030ae:	4cae      	ldr	r4, [pc, #696]	; (8003368 <main+0x4c4>)
 80030b0:	4eae      	ldr	r6, [pc, #696]	; (800336c <main+0x4c8>)
 80030b2:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 8003370 <main+0x4cc>
 80030b6:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 8003374 <main+0x4d0>
 80030ba:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 8003378 <main+0x4d4>
			LCD_Circle(172, 35, 8, 0, 1, HUE_14);
 80030be:	4daf      	ldr	r5, [pc, #700]	; (800337c <main+0x4d8>)
		DS3231_Update();
 80030c0:	f7fe fa50 	bl	8001564 <DS3231_Update>
		rtcSec = DS3231_getSec();
 80030c4:	f7fe fa7c 	bl	80015c0 <DS3231_getSec>
 80030c8:	7020      	strb	r0, [r4, #0]
		rtcMin = DS3231_getMin();
 80030ca:	f7fe fa87 	bl	80015dc <DS3231_getMin>
 80030ce:	7030      	strb	r0, [r6, #0]
		rtcHrs = DS3231_getHrs();
 80030d0:	f7fe fa92 	bl	80015f8 <DS3231_getHrs>
 80030d4:	f88a 0000 	strb.w	r0, [sl]
		rtcDay = DS3231_getDay();
 80030d8:	f7fe fa9c 	bl	8001614 <DS3231_getDay>
 80030dc:	4ba8      	ldr	r3, [pc, #672]	; (8003380 <main+0x4dc>)
 80030de:	7018      	strb	r0, [r3, #0]
		rtcDate = DS3231_getDate();
 80030e0:	f7fe faa6 	bl	8001630 <DS3231_getDate>
 80030e4:	4ba7      	ldr	r3, [pc, #668]	; (8003384 <main+0x4e0>)
 80030e6:	7018      	strb	r0, [r3, #0]
		rtcMonth = DS3231_getMonth();
 80030e8:	f7fe fab0 	bl	800164c <DS3231_getMonth>
 80030ec:	f88b 0000 	strb.w	r0, [fp]
		rtcYear = DS3231_getYear();
 80030f0:	f7fe faba 	bl	8001668 <DS3231_getYear>
 80030f4:	4ba4      	ldr	r3, [pc, #656]	; (8003388 <main+0x4e4>)
 80030f6:	7018      	strb	r0, [r3, #0]
		rtcMinA1 = DS3231_getAlarm1Min();
 80030f8:	f7fe fac4 	bl	8001684 <DS3231_getAlarm1Min>
 80030fc:	4ba3      	ldr	r3, [pc, #652]	; (800338c <main+0x4e8>)
 80030fe:	7018      	strb	r0, [r3, #0]
		rtcHrsA1 = DS3231_getAlarm1Hour();
 8003100:	f7fe face 	bl	80016a0 <DS3231_getAlarm1Hour>
 8003104:	4ba2      	ldr	r3, [pc, #648]	; (8003390 <main+0x4ec>)
		if (rtcSecLast != rtcSec) {
 8003106:	f898 2000 	ldrb.w	r2, [r8]
		rtcHrsA1 = DS3231_getAlarm1Hour();
 800310a:	7018      	strb	r0, [r3, #0]
		if (rtcSecLast != rtcSec) {
 800310c:	7823      	ldrb	r3, [r4, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d0d6      	beq.n	80030c0 <main+0x21c>
			LCD_Circle(172, 35, 8, 0, 1, HUE_14);
 8003112:	2701      	movs	r7, #1
			bme280();
 8003114:	f7ff fbec 	bl	80028f0 <bme280>
			LCD_Circle(172, 35, 8, 0, 1, HUE_14);
 8003118:	2300      	movs	r3, #0
 800311a:	2208      	movs	r2, #8
 800311c:	2123      	movs	r1, #35	; 0x23
 800311e:	20ac      	movs	r0, #172	; 0xac
 8003120:	9501      	str	r5, [sp, #4]
 8003122:	9700      	str	r7, [sp, #0]
 8003124:	f7fe ffb8 	bl	8002098 <LCD_Circle>
			LCD_Circle(172, 75, 8, 0, 1, HUE_14);
 8003128:	2300      	movs	r3, #0
 800312a:	2208      	movs	r2, #8
 800312c:	214b      	movs	r1, #75	; 0x4b
 800312e:	20ac      	movs	r0, #172	; 0xac
 8003130:	e9cd 7500 	strd	r7, r5, [sp]
 8003134:	f7fe ffb0 	bl	8002098 <LCD_Circle>
			if (rtcSec % 2 != 0) {
 8003138:	7823      	ldrb	r3, [r4, #0]
 800313a:	ea13 0907 	ands.w	r9, r3, r7
 800313e:	f000 8152 	beq.w	80033e6 <main+0x542>
				LCD_Circle(172, 35, 7, 1, 1, HUE_14);
 8003142:	463b      	mov	r3, r7
 8003144:	2207      	movs	r2, #7
 8003146:	2123      	movs	r1, #35	; 0x23
 8003148:	20ac      	movs	r0, #172	; 0xac
 800314a:	e9cd 7500 	strd	r7, r5, [sp]
 800314e:	f7fe ffa3 	bl	8002098 <LCD_Circle>
				LCD_Circle(172, 75, 7, 1, 1, HUE_14);
 8003152:	2207      	movs	r2, #7
 8003154:	214b      	movs	r1, #75	; 0x4b
 8003156:	20ac      	movs	r0, #172	; 0xac
 8003158:	463b      	mov	r3, r7
 800315a:	e9cd 7500 	strd	r7, r5, [sp]
 800315e:	f7fe ff9b 	bl	8002098 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003162:	2200      	movs	r2, #0
 8003164:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003168:	488a      	ldr	r0, [pc, #552]	; (8003394 <main+0x4f0>)
 800316a:	f000 fc4f 	bl	8003a0c <HAL_GPIO_WritePin>
			if (rtcMinLast != rtcMin) {
 800316e:	4b8a      	ldr	r3, [pc, #552]	; (8003398 <main+0x4f4>)
 8003170:	781a      	ldrb	r2, [r3, #0]
 8003172:	7833      	ldrb	r3, [r6, #0]
 8003174:	4293      	cmp	r3, r2
 8003176:	f000 80e8 	beq.w	800334a <main+0x4a6>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 800317a:	f04f 0901 	mov.w	r9, #1
 800317e:	2700      	movs	r7, #0
				sprintf(clockPrint, "%02d", rtcMinLast);
 8003180:	4986      	ldr	r1, [pc, #536]	; (800339c <main+0x4f8>)
 8003182:	a806      	add	r0, sp, #24
 8003184:	f003 f8a2 	bl	80062cc <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8003188:	4b85      	ldr	r3, [pc, #532]	; (80033a0 <main+0x4fc>)
 800318a:	2164      	movs	r1, #100	; 0x64
 800318c:	20b4      	movs	r0, #180	; 0xb4
 800318e:	aa06      	add	r2, sp, #24
 8003190:	e9cd 9700 	strd	r9, r7, [sp]
 8003194:	f7ff f836 	bl	8002204 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcMin);
 8003198:	7832      	ldrb	r2, [r6, #0]
 800319a:	4980      	ldr	r1, [pc, #512]	; (800339c <main+0x4f8>)
 800319c:	a806      	add	r0, sp, #24
 800319e:	f003 f895 	bl	80062cc <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, HUE_14);
 80031a2:	4b7f      	ldr	r3, [pc, #508]	; (80033a0 <main+0x4fc>)
 80031a4:	aa06      	add	r2, sp, #24
 80031a6:	2164      	movs	r1, #100	; 0x64
 80031a8:	20b4      	movs	r0, #180	; 0xb4
 80031aa:	e9cd 9500 	strd	r9, r5, [sp]
 80031ae:	f7ff f829 	bl	8002204 <LCD_Font>
				if (rtcHrsLast != rtcHrs) {
 80031b2:	4b7c      	ldr	r3, [pc, #496]	; (80033a4 <main+0x500>)
 80031b4:	781a      	ldrb	r2, [r3, #0]
 80031b6:	f89a 3000 	ldrb.w	r3, [sl]
 80031ba:	4293      	cmp	r3, r2
 80031bc:	f000 80c2 	beq.w	8003344 <main+0x4a0>
					sprintf(clockPrint, "%02d", rtcHrsLast);
 80031c0:	4976      	ldr	r1, [pc, #472]	; (800339c <main+0x4f8>)
 80031c2:	a806      	add	r0, sp, #24
 80031c4:	f003 f882 	bl	80062cc <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 80031c8:	4b75      	ldr	r3, [pc, #468]	; (80033a0 <main+0x4fc>)
 80031ca:	2164      	movs	r1, #100	; 0x64
 80031cc:	4638      	mov	r0, r7
 80031ce:	aa06      	add	r2, sp, #24
 80031d0:	e9cd 9700 	strd	r9, r7, [sp]
 80031d4:	f7ff f816 	bl	8002204 <LCD_Font>
					sprintf(clockPrint, "%02d", rtcHrs);
 80031d8:	f89a 2000 	ldrb.w	r2, [sl]
 80031dc:	496f      	ldr	r1, [pc, #444]	; (800339c <main+0x4f8>)
 80031de:	a806      	add	r0, sp, #24
 80031e0:	f003 f874 	bl	80062cc <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, HUE_14);
 80031e4:	2164      	movs	r1, #100	; 0x64
 80031e6:	4b6e      	ldr	r3, [pc, #440]	; (80033a0 <main+0x4fc>)
 80031e8:	aa06      	add	r2, sp, #24
 80031ea:	4638      	mov	r0, r7
 80031ec:	e9cd 9500 	strd	r9, r5, [sp]
 80031f0:	f7ff f808 	bl	8002204 <LCD_Font>
					if (rtcDayLast != rtcDay) {
 80031f4:	4b62      	ldr	r3, [pc, #392]	; (8003380 <main+0x4dc>)
 80031f6:	496c      	ldr	r1, [pc, #432]	; (80033a8 <main+0x504>)
 80031f8:	781a      	ldrb	r2, [r3, #0]
 80031fa:	780b      	ldrb	r3, [r1, #0]
 80031fc:	4293      	cmp	r3, r2
 80031fe:	f000 808e 	beq.w	800331e <main+0x47a>
						LCD_Font(2, 130, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_36, 1, BLACK);
 8003202:	486a      	ldr	r0, [pc, #424]	; (80033ac <main+0x508>)
 8003204:	3205      	adds	r2, #5
 8003206:	fba0 ec02 	umull	lr, ip, r0, r2
 800320a:	2002      	movs	r0, #2
 800320c:	eba2 0e0c 	sub.w	lr, r2, ip
 8003210:	eb0c 0c5e 	add.w	ip, ip, lr, lsr #1
 8003214:	fa2c fc00 	lsr.w	ip, ip, r0
 8003218:	ebcc 0ccc 	rsb	ip, ip, ip, lsl #3
 800321c:	eba2 0c0c 	sub.w	ip, r2, ip
 8003220:	4a63      	ldr	r2, [pc, #396]	; (80033b0 <main+0x50c>)
 8003222:	2182      	movs	r1, #130	; 0x82
 8003224:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8003228:	e9cd 9700 	strd	r9, r7, [sp]
 800322c:	4b49      	ldr	r3, [pc, #292]	; (8003354 <main+0x4b0>)
 800322e:	f7fe ffe9 	bl	8002204 <LCD_Font>
						LCD_Font(2, 130, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_36, 1, GRAY);
 8003232:	4b53      	ldr	r3, [pc, #332]	; (8003380 <main+0x4dc>)
 8003234:	f8cd 9000 	str.w	r9, [sp]
 8003238:	781a      	ldrb	r2, [r3, #0]
 800323a:	485c      	ldr	r0, [pc, #368]	; (80033ac <main+0x508>)
 800323c:	3206      	adds	r2, #6
 800323e:	fba0 0302 	umull	r0, r3, r0, r2
 8003242:	1ad1      	subs	r1, r2, r3
 8003244:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8003248:	089b      	lsrs	r3, r3, #2
 800324a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	4858      	ldr	r0, [pc, #352]	; (80033b4 <main+0x510>)
 8003252:	4a57      	ldr	r2, [pc, #348]	; (80033b0 <main+0x50c>)
 8003254:	2182      	movs	r1, #130	; 0x82
 8003256:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800325a:	9001      	str	r0, [sp, #4]
 800325c:	4b3d      	ldr	r3, [pc, #244]	; (8003354 <main+0x4b0>)
 800325e:	2002      	movs	r0, #2
 8003260:	f7fe ffd0 	bl	8002204 <LCD_Font>
						LCD_Font(260, 130, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_36, 1, BLACK);
 8003264:	f89b 3000 	ldrb.w	r3, [fp]
 8003268:	4a53      	ldr	r2, [pc, #332]	; (80033b8 <main+0x514>)
 800326a:	330a      	adds	r3, #10
 800326c:	fba2 c203 	umull	ip, r2, r2, r3
 8003270:	08d2      	lsrs	r2, r2, #3
 8003272:	f8df c148 	ldr.w	ip, [pc, #328]	; 80033bc <main+0x518>
 8003276:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800327a:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 800327e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8003282:	2182      	movs	r1, #130	; 0x82
 8003284:	f44f 7082 	mov.w	r0, #260	; 0x104
 8003288:	e9cd 9700 	strd	r9, r7, [sp]
 800328c:	4b31      	ldr	r3, [pc, #196]	; (8003354 <main+0x4b0>)
 800328e:	f7fe ffb9 	bl	8002204 <LCD_Font>
						LCD_Font(260, 130, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_36, 1, GRAY);
 8003292:	f89b 3000 	ldrb.w	r3, [fp]
 8003296:	4a48      	ldr	r2, [pc, #288]	; (80033b8 <main+0x514>)
 8003298:	330b      	adds	r3, #11
 800329a:	fba2 e203 	umull	lr, r2, r2, r3
 800329e:	08d2      	lsrs	r2, r2, #3
 80032a0:	f8df c118 	ldr.w	ip, [pc, #280]	; 80033bc <main+0x518>
 80032a4:	4843      	ldr	r0, [pc, #268]	; (80033b4 <main+0x510>)
 80032a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80032aa:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 80032ae:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80032b2:	2182      	movs	r1, #130	; 0x82
 80032b4:	e9cd 9000 	strd	r9, r0, [sp]
 80032b8:	4b26      	ldr	r3, [pc, #152]	; (8003354 <main+0x4b0>)
 80032ba:	f44f 7082 	mov.w	r0, #260	; 0x104
 80032be:	f7fe ffa1 	bl	8002204 <LCD_Font>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 80032c2:	4a3f      	ldr	r2, [pc, #252]	; (80033c0 <main+0x51c>)
 80032c4:	f10d 0c18 	add.w	ip, sp, #24
 80032c8:	7813      	ldrb	r3, [r2, #0]
 80032ca:	4a3e      	ldr	r2, [pc, #248]	; (80033c4 <main+0x520>)
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	7813      	ldrb	r3, [r2, #0]
 80032d0:	4a3d      	ldr	r2, [pc, #244]	; (80033c8 <main+0x524>)
 80032d2:	4660      	mov	r0, ip
 80032d4:	7812      	ldrb	r2, [r2, #0]
 80032d6:	493d      	ldr	r1, [pc, #244]	; (80033cc <main+0x528>)
 80032d8:	f002 fff8 	bl	80062cc <siprintf>
						LCD_Font(80, 130, clockPrint, &DejaVu_Sans_36, 1, BLACK);
 80032dc:	2182      	movs	r1, #130	; 0x82
 80032de:	2050      	movs	r0, #80	; 0x50
 80032e0:	e9cd 9700 	strd	r9, r7, [sp]
 80032e4:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <main+0x4b0>)
 80032e6:	aa06      	add	r2, sp, #24
 80032e8:	f7fe ff8c 	bl	8002204 <LCD_Font>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear);
 80032ec:	4a26      	ldr	r2, [pc, #152]	; (8003388 <main+0x4e4>)
 80032ee:	af06      	add	r7, sp, #24
 80032f0:	7813      	ldrb	r3, [r2, #0]
 80032f2:	4a24      	ldr	r2, [pc, #144]	; (8003384 <main+0x4e0>)
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	7812      	ldrb	r2, [r2, #0]
 80032f8:	f89b 3000 	ldrb.w	r3, [fp]
 80032fc:	4933      	ldr	r1, [pc, #204]	; (80033cc <main+0x528>)
 80032fe:	4638      	mov	r0, r7
 8003300:	f002 ffe4 	bl	80062cc <siprintf>
						LCD_Font(80, 130, clockPrint, &DejaVu_Sans_36, 1, GRAY);
 8003304:	482b      	ldr	r0, [pc, #172]	; (80033b4 <main+0x510>)
 8003306:	2182      	movs	r1, #130	; 0x82
 8003308:	e9cd 9000 	strd	r9, r0, [sp]
 800330c:	4b11      	ldr	r3, [pc, #68]	; (8003354 <main+0x4b0>)
 800330e:	463a      	mov	r2, r7
 8003310:	2050      	movs	r0, #80	; 0x50
 8003312:	f7fe ff77 	bl	8002204 <LCD_Font>
						rtcDayLast = rtcDay;
 8003316:	4b1a      	ldr	r3, [pc, #104]	; (8003380 <main+0x4dc>)
 8003318:	4923      	ldr	r1, [pc, #140]	; (80033a8 <main+0x504>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	700b      	strb	r3, [r1, #0]
					sound = 1;
 800331e:	2301      	movs	r3, #1
 8003320:	4a2b      	ldr	r2, [pc, #172]	; (80033d0 <main+0x52c>)
 8003322:	7013      	strb	r3, [r2, #0]
					rtcDateLast = rtcDate;
 8003324:	4b17      	ldr	r3, [pc, #92]	; (8003384 <main+0x4e0>)
 8003326:	4a28      	ldr	r2, [pc, #160]	; (80033c8 <main+0x524>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	7013      	strb	r3, [r2, #0]
					rtcMonthLast = rtcMonth;
 800332c:	f89b 3000 	ldrb.w	r3, [fp]
 8003330:	4a24      	ldr	r2, [pc, #144]	; (80033c4 <main+0x520>)
 8003332:	7013      	strb	r3, [r2, #0]
					rtcYearLast = rtcYear;
 8003334:	4b14      	ldr	r3, [pc, #80]	; (8003388 <main+0x4e4>)
 8003336:	4a22      	ldr	r2, [pc, #136]	; (80033c0 <main+0x51c>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	7013      	strb	r3, [r2, #0]
					rtcHrsLast = rtcHrs;
 800333c:	f89a 3000 	ldrb.w	r3, [sl]
 8003340:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <main+0x500>)
 8003342:	7013      	strb	r3, [r2, #0]
				rtcMinLast = rtcMin;
 8003344:	7833      	ldrb	r3, [r6, #0]
 8003346:	4a14      	ldr	r2, [pc, #80]	; (8003398 <main+0x4f4>)
 8003348:	7013      	strb	r3, [r2, #0]
			rtcSecLast = rtcSec;
 800334a:	7823      	ldrb	r3, [r4, #0]
 800334c:	f888 3000 	strb.w	r3, [r8]
	{
 8003350:	e6b6      	b.n	80030c0 <main+0x21c>
 8003352:	bf00      	nop
 8003354:	080195bc 	.word	0x080195bc
 8003358:	0800a320 	.word	0x0800a320
 800335c:	20000389 	.word	0x20000389
 8003360:	0800a330 	.word	0x0800a330
 8003364:	2000038b 	.word	0x2000038b
 8003368:	20001446 	.word	0x20001446
 800336c:	20001442 	.word	0x20001442
 8003370:	20001440 	.word	0x20001440
 8003374:	20001444 	.word	0x20001444
 8003378:	2000013e 	.word	0x2000013e
 800337c:	00ffbf00 	.word	0x00ffbf00
 8003380:	2000143e 	.word	0x2000143e
 8003384:	2000143c 	.word	0x2000143c
 8003388:	20001447 	.word	0x20001447
 800338c:	20001443 	.word	0x20001443
 8003390:	20001441 	.word	0x20001441
 8003394:	40011000 	.word	0x40011000
 8003398:	2000013d 	.word	0x2000013d
 800339c:	0800a348 	.word	0x0800a348
 80033a0:	0800a3ac 	.word	0x0800a3ac
 80033a4:	2000013c 	.word	0x2000013c
 80033a8:	2000143f 	.word	0x2000143f
 80033ac:	24924925 	.word	0x24924925
 80033b0:	0801ac50 	.word	0x0801ac50
 80033b4:	007f7f7f 	.word	0x007f7f7f
 80033b8:	aaaaaaab 	.word	0xaaaaaaab
 80033bc:	0801ac6c 	.word	0x0801ac6c
 80033c0:	20001448 	.word	0x20001448
 80033c4:	20001445 	.word	0x20001445
 80033c8:	2000143d 	.word	0x2000143d
 80033cc:	0800a350 	.word	0x0800a350
 80033d0:	2000013f 	.word	0x2000013f
			AT24XX_Update(i, 0);
 80033d4:	b2a0      	uxth	r0, r4
 80033d6:	2100      	movs	r1, #0
		for (uint16_t i = 0; i < 4096; i++) {
 80033d8:	3401      	adds	r4, #1
			AT24XX_Update(i, 0);
 80033da:	f7fd fdf7 	bl	8000fcc <AT24XX_Update>
		for (uint16_t i = 0; i < 4096; i++) {
 80033de:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80033e2:	d1f7      	bne.n	80033d4 <main+0x530>
 80033e4:	e637      	b.n	8003056 <main+0x1b2>
				LCD_Circle(172, 35, 7, 1, 1, BLACK);
 80033e6:	463b      	mov	r3, r7
 80033e8:	2207      	movs	r2, #7
 80033ea:	2123      	movs	r1, #35	; 0x23
 80033ec:	20ac      	movs	r0, #172	; 0xac
 80033ee:	e9cd 7900 	strd	r7, r9, [sp]
 80033f2:	f7fe fe51 	bl	8002098 <LCD_Circle>
				LCD_Circle(172, 75, 7, 1, 1, BLACK);
 80033f6:	214b      	movs	r1, #75	; 0x4b
 80033f8:	20ac      	movs	r0, #172	; 0xac
 80033fa:	463b      	mov	r3, r7
 80033fc:	2207      	movs	r2, #7
 80033fe:	e9cd 7900 	strd	r7, r9, [sp]
 8003402:	f7fe fe49 	bl	8002098 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8003406:	463a      	mov	r2, r7
 8003408:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800340c:	4801      	ldr	r0, [pc, #4]	; (8003414 <main+0x570>)
 800340e:	f000 fafd 	bl	8003a0c <HAL_GPIO_WritePin>
 8003412:	e6ac      	b.n	800316e <main+0x2ca>
 8003414:	40011000 	.word	0x40011000

08003418 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003418:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <HAL_MspInit+0x3c>)
{
 800341a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800341c:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800341e:	490e      	ldr	r1, [pc, #56]	; (8003458 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003420:	f042 0201 	orr.w	r2, r2, #1
 8003424:	619a      	str	r2, [r3, #24]
 8003426:	699a      	ldr	r2, [r3, #24]
 8003428:	f002 0201 	and.w	r2, r2, #1
 800342c:	9200      	str	r2, [sp, #0]
 800342e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003430:	69da      	ldr	r2, [r3, #28]
 8003432:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003436:	61da      	str	r2, [r3, #28]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	9301      	str	r3, [sp, #4]
 8003440:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003442:	684b      	ldr	r3, [r1, #4]
 8003444:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003448:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800344c:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800344e:	b002      	add	sp, #8
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40021000 	.word	0x40021000
 8003458:	40010000 	.word	0x40010000

0800345c <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800345c:	2300      	movs	r3, #0
{
 800345e:	b5d0      	push	{r4, r6, r7, lr}
  if(hi2c->Instance==I2C1)
 8003460:	4a14      	ldr	r2, [pc, #80]	; (80034b4 <HAL_I2C_MspInit+0x58>)
 8003462:	6801      	ldr	r1, [r0, #0]
{
 8003464:	b086      	sub	sp, #24
  if(hi2c->Instance==I2C1)
 8003466:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003468:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800346c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C1)
 8003470:	d001      	beq.n	8003476 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003472:	b006      	add	sp, #24
 8003474:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003476:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003478:	26c0      	movs	r6, #192	; 0xc0
 800347a:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800347c:	4c0e      	ldr	r4, [pc, #56]	; (80034b8 <HAL_I2C_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800347e:	480f      	ldr	r0, [pc, #60]	; (80034bc <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003480:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003482:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003484:	f043 0308 	orr.w	r3, r3, #8
 8003488:	61a3      	str	r3, [r4, #24]
 800348a:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800348c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003498:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800349a:	f000 f9a9 	bl	80037f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800349e:	69e3      	ldr	r3, [r4, #28]
 80034a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034a4:	61e3      	str	r3, [r4, #28]
 80034a6:	69e3      	ldr	r3, [r4, #28]
 80034a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	9b01      	ldr	r3, [sp, #4]
}
 80034b0:	b006      	add	sp, #24
 80034b2:	bdd0      	pop	{r4, r6, r7, pc}
 80034b4:	40005400 	.word	0x40005400
 80034b8:	40021000 	.word	0x40021000
 80034bc:	40010c00 	.word	0x40010c00

080034c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034c0:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c2:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 80034c4:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <HAL_UART_MspInit+0x70>)
 80034c6:	6802      	ldr	r2, [r0, #0]
{
 80034c8:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 80034ca:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034cc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80034d0:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 80034d4:	d001      	beq.n	80034da <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80034d6:	b006      	add	sp, #24
 80034d8:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80034da:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80034de:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80034e0:	f44f 7600 	mov.w	r6, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 80034e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034e8:	619a      	str	r2, [r3, #24]
 80034ea:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80034ec:	2702      	movs	r7, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 80034ee:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80034f2:	9200      	str	r2, [sp, #0]
 80034f4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f8:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fa:	f042 0204 	orr.w	r2, r2, #4
 80034fe:	619a      	str	r2, [r3, #24]
 8003500:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003502:	480c      	ldr	r0, [pc, #48]	; (8003534 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800350a:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800350c:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800350e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003510:	e9cd 6702 	strd	r6, r7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003514:	f000 f96c 	bl	80037f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003518:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800351c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351e:	4805      	ldr	r0, [pc, #20]	; (8003534 <HAL_UART_MspInit+0x74>)
 8003520:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003522:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003528:	f000 f962 	bl	80037f0 <HAL_GPIO_Init>
}
 800352c:	b006      	add	sp, #24
 800352e:	bdd0      	pop	{r4, r6, r7, pc}
 8003530:	40013800 	.word	0x40013800
 8003534:	40010800 	.word	0x40010800

08003538 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003538:	e7fe      	b.n	8003538 <NMI_Handler>
 800353a:	bf00      	nop

0800353c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800353c:	e7fe      	b.n	800353c <HardFault_Handler>
 800353e:	bf00      	nop

08003540 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003540:	e7fe      	b.n	8003540 <MemManage_Handler>
 8003542:	bf00      	nop

08003544 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003544:	e7fe      	b.n	8003544 <BusFault_Handler>
 8003546:	bf00      	nop

08003548 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003548:	e7fe      	b.n	8003548 <UsageFault_Handler>
 800354a:	bf00      	nop

0800354c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop

08003550 <DebugMon_Handler>:
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop

08003554 <PendSV_Handler>:
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop

08003558 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003558:	f000 b8be 	b.w	80036d8 <HAL_IncTick>

0800355c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800355c:	2001      	movs	r0, #1
 800355e:	4770      	bx	lr

08003560 <_kill>:

int _kill(int pid, int sig)
{
 8003560:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003562:	f001 fff5 	bl	8005550 <__errno>
 8003566:	2216      	movs	r2, #22
 8003568:	4603      	mov	r3, r0
	return -1;
}
 800356a:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 800356e:	601a      	str	r2, [r3, #0]
}
 8003570:	bd08      	pop	{r3, pc}
 8003572:	bf00      	nop

08003574 <_exit>:

void _exit (int status)
{
 8003574:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003576:	f001 ffeb 	bl	8005550 <__errno>
 800357a:	2316      	movs	r3, #22
 800357c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800357e:	e7fe      	b.n	800357e <_exit+0xa>

08003580 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003580:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003582:	1e16      	subs	r6, r2, #0
 8003584:	dd07      	ble.n	8003596 <_read+0x16>
 8003586:	460c      	mov	r4, r1
 8003588:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800358a:	f3af 8000 	nop.w
 800358e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003592:	42a5      	cmp	r5, r4
 8003594:	d1f9      	bne.n	800358a <_read+0xa>
	}

return len;
}
 8003596:	4630      	mov	r0, r6
 8003598:	bd70      	pop	{r4, r5, r6, pc}
 800359a:	bf00      	nop

0800359c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800359c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800359e:	1e16      	subs	r6, r2, #0
 80035a0:	dd07      	ble.n	80035b2 <_write+0x16>
 80035a2:	460c      	mov	r4, r1
 80035a4:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80035a6:	f814 0b01 	ldrb.w	r0, [r4], #1
 80035aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ae:	42ac      	cmp	r4, r5
 80035b0:	d1f9      	bne.n	80035a6 <_write+0xa>
	}
	return len;
}
 80035b2:	4630      	mov	r0, r6
 80035b4:	bd70      	pop	{r4, r5, r6, pc}
 80035b6:	bf00      	nop

080035b8 <_close>:

int _close(int file)
{
	return -1;
}
 80035b8:	f04f 30ff 	mov.w	r0, #4294967295
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop

080035c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80035c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80035c4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80035c6:	604b      	str	r3, [r1, #4]
}
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop

080035cc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80035cc:	2001      	movs	r0, #1
 80035ce:	4770      	bx	lr

080035d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80035d0:	2000      	movs	r0, #0
 80035d2:	4770      	bx	lr

080035d4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035d4:	490d      	ldr	r1, [pc, #52]	; (800360c <_sbrk+0x38>)
{
 80035d6:	4603      	mov	r3, r0
 80035d8:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035da:	4a0d      	ldr	r2, [pc, #52]	; (8003610 <_sbrk+0x3c>)
 80035dc:	4c0d      	ldr	r4, [pc, #52]	; (8003614 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80035de:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035e0:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80035e2:	b120      	cbz	r0, 80035ee <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035e4:	4403      	add	r3, r0
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d807      	bhi.n	80035fa <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80035ea:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80035ec:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80035ee:	4c0a      	ldr	r4, [pc, #40]	; (8003618 <_sbrk+0x44>)
 80035f0:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 80035f2:	4403      	add	r3, r0
 80035f4:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 80035f6:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80035f8:	d9f7      	bls.n	80035ea <_sbrk+0x16>
    errno = ENOMEM;
 80035fa:	f001 ffa9 	bl	8005550 <__errno>
 80035fe:	220c      	movs	r2, #12
 8003600:	4603      	mov	r3, r0
    return (void *)-1;
 8003602:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8003606:	601a      	str	r2, [r3, #0]
}
 8003608:	bd10      	pop	{r4, pc}
 800360a:	bf00      	nop
 800360c:	20001460 	.word	0x20001460
 8003610:	20005000 	.word	0x20005000
 8003614:	00000400 	.word	0x00000400
 8003618:	20001478 	.word	0x20001478

0800361c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800361c:	480c      	ldr	r0, [pc, #48]	; (8003650 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800361e:	490d      	ldr	r1, [pc, #52]	; (8003654 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003620:	4a0d      	ldr	r2, [pc, #52]	; (8003658 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003624:	e002      	b.n	800362c <LoopCopyDataInit>

08003626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800362a:	3304      	adds	r3, #4

0800362c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800362c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800362e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003630:	d3f9      	bcc.n	8003626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003632:	4a0a      	ldr	r2, [pc, #40]	; (800365c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003634:	4c0a      	ldr	r4, [pc, #40]	; (8003660 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003638:	e001      	b.n	800363e <LoopFillZerobss>

0800363a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800363a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800363c:	3204      	adds	r2, #4

0800363e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800363e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003640:	d3fb      	bcc.n	800363a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003642:	f000 f811 	bl	8003668 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003646:	f001 ff89 	bl	800555c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800364a:	f7ff fc2b 	bl	8002ea4 <main>
  bx lr
 800364e:	4770      	bx	lr
  ldr r0, =_sdata
 8003650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003654:	20000320 	.word	0x20000320
  ldr r2, =_sidata
 8003658:	0801b1a8 	.word	0x0801b1a8
  ldr r2, =_sbss
 800365c:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8003660:	20001478 	.word	0x20001478

08003664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003664:	e7fe      	b.n	8003664 <ADC1_2_IRQHandler>
	...

08003668 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop

0800366c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800366c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800366e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003672:	4a0d      	ldr	r2, [pc, #52]	; (80036a8 <HAL_InitTick+0x3c>)
{
 8003674:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003676:	7811      	ldrb	r1, [r2, #0]
 8003678:	4a0c      	ldr	r2, [pc, #48]	; (80036ac <HAL_InitTick+0x40>)
 800367a:	fbb3 f3f1 	udiv	r3, r3, r1
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	fbb2 f0f3 	udiv	r0, r2, r3
 8003684:	f000 f89c 	bl	80037c0 <HAL_SYSTICK_Config>
 8003688:	b908      	cbnz	r0, 800368e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800368a:	2d0f      	cmp	r5, #15
 800368c:	d901      	bls.n	8003692 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800368e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003690:	bd38      	pop	{r3, r4, r5, pc}
 8003692:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003694:	4602      	mov	r2, r0
 8003696:	4629      	mov	r1, r5
 8003698:	f04f 30ff 	mov.w	r0, #4294967295
 800369c:	f000 f852 	bl	8003744 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036a0:	4b03      	ldr	r3, [pc, #12]	; (80036b0 <HAL_InitTick+0x44>)
 80036a2:	4620      	mov	r0, r4
 80036a4:	601d      	str	r5, [r3, #0]
}
 80036a6:	bd38      	pop	{r3, r4, r5, pc}
 80036a8:	20000144 	.word	0x20000144
 80036ac:	20000140 	.word	0x20000140
 80036b0:	20000148 	.word	0x20000148

080036b4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036b4:	4a07      	ldr	r2, [pc, #28]	; (80036d4 <HAL_Init+0x20>)
{
 80036b6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036b8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ba:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036bc:	f043 0310 	orr.w	r3, r3, #16
 80036c0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036c2:	f000 f82d 	bl	8003720 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80036c6:	200f      	movs	r0, #15
 80036c8:	f7ff ffd0 	bl	800366c <HAL_InitTick>
  HAL_MspInit();
 80036cc:	f7ff fea4 	bl	8003418 <HAL_MspInit>
}
 80036d0:	2000      	movs	r0, #0
 80036d2:	bd08      	pop	{r3, pc}
 80036d4:	40022000 	.word	0x40022000

080036d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80036d8:	4a03      	ldr	r2, [pc, #12]	; (80036e8 <HAL_IncTick+0x10>)
 80036da:	4b04      	ldr	r3, [pc, #16]	; (80036ec <HAL_IncTick+0x14>)
 80036dc:	6811      	ldr	r1, [r2, #0]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	440b      	add	r3, r1
 80036e2:	6013      	str	r3, [r2, #0]
}
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20001464 	.word	0x20001464
 80036ec:	20000144 	.word	0x20000144

080036f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80036f0:	4b01      	ldr	r3, [pc, #4]	; (80036f8 <HAL_GetTick+0x8>)
 80036f2:	6818      	ldr	r0, [r3, #0]
}
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	20001464 	.word	0x20001464

080036fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036fc:	b538      	push	{r3, r4, r5, lr}
 80036fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003700:	f7ff fff6 	bl	80036f0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003704:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003706:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003708:	d002      	beq.n	8003710 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800370a:	4b04      	ldr	r3, [pc, #16]	; (800371c <HAL_Delay+0x20>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003710:	f7ff ffee 	bl	80036f0 <HAL_GetTick>
 8003714:	1b40      	subs	r0, r0, r5
 8003716:	42a0      	cmp	r0, r4
 8003718:	d3fa      	bcc.n	8003710 <HAL_Delay+0x14>
  {
  }
}
 800371a:	bd38      	pop	{r3, r4, r5, pc}
 800371c:	20000144 	.word	0x20000144

08003720 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003720:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003724:	4906      	ldr	r1, [pc, #24]	; (8003740 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003726:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003728:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800372a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800372e:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800373c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800373e:	4770      	bx	lr
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003744:	4b1c      	ldr	r3, [pc, #112]	; (80037b8 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003746:	b500      	push	{lr}
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800374e:	f1c3 0e07 	rsb	lr, r3, #7
 8003752:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003756:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800375a:	bf28      	it	cs
 800375c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003760:	f1bc 0f06 	cmp.w	ip, #6
 8003764:	d91b      	bls.n	800379e <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003766:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800376a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800376c:	fa0c fc03 	lsl.w	ip, ip, r3
 8003770:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003774:	f04f 3cff 	mov.w	ip, #4294967295
 8003778:	fa0c fc0e 	lsl.w	ip, ip, lr
 800377c:	ea21 010c 	bic.w	r1, r1, ip
 8003780:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003782:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003784:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003788:	db0c      	blt.n	80037a4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800378a:	0109      	lsls	r1, r1, #4
 800378c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003790:	b2c9      	uxtb	r1, r1
 8003792:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003796:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800379a:	f85d fb04 	ldr.w	pc, [sp], #4
 800379e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037a0:	4613      	mov	r3, r2
 80037a2:	e7e7      	b.n	8003774 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a4:	4b05      	ldr	r3, [pc, #20]	; (80037bc <HAL_NVIC_SetPriority+0x78>)
 80037a6:	f000 000f 	and.w	r0, r0, #15
 80037aa:	0109      	lsls	r1, r1, #4
 80037ac:	b2c9      	uxtb	r1, r1
 80037ae:	4403      	add	r3, r0
 80037b0:	7619      	strb	r1, [r3, #24]
 80037b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80037b6:	bf00      	nop
 80037b8:	e000ed00 	.word	0xe000ed00
 80037bc:	e000ecfc 	.word	0xe000ecfc

080037c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037c0:	3801      	subs	r0, #1
 80037c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80037c6:	d20f      	bcs.n	80037e8 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037cc:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037d0:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037d2:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037d4:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d6:	4c05      	ldr	r4, [pc, #20]	; (80037ec <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037d8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037da:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037de:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037e0:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80037e2:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037e4:	6119      	str	r1, [r3, #16]
 80037e6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80037e8:	2001      	movs	r0, #1
 80037ea:	4770      	bx	lr
 80037ec:	e000ed00 	.word	0xe000ed00

080037f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037f4:	680e      	ldr	r6, [r1, #0]
{
 80037f6:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037f8:	2e00      	cmp	r6, #0
 80037fa:	f000 80b5 	beq.w	8003968 <HAL_GPIO_Init+0x178>
 80037fe:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003800:	4f7a      	ldr	r7, [pc, #488]	; (80039ec <HAL_GPIO_Init+0x1fc>)
  uint32_t config = 0x00u;
 8003802:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8003804:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003806:	4d7a      	ldr	r5, [pc, #488]	; (80039f0 <HAL_GPIO_Init+0x200>)
      switch (GPIO_Init->Mode)
 8003808:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 80039f4 <HAL_GPIO_Init+0x204>
 800380c:	e006      	b.n	800381c <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 800380e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003810:	fa36 f403 	lsrs.w	r4, r6, r3
 8003814:	f102 0204 	add.w	r2, r2, #4
 8003818:	f000 80a6 	beq.w	8003968 <HAL_GPIO_Init+0x178>
    ioposition = (0x01uL << position);
 800381c:	2401      	movs	r4, #1
 800381e:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8003820:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003824:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8003828:	d1f1      	bne.n	800380e <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 800382a:	684e      	ldr	r6, [r1, #4]
 800382c:	2e12      	cmp	r6, #18
 800382e:	f200 809e 	bhi.w	800396e <HAL_GPIO_Init+0x17e>
 8003832:	2e12      	cmp	r6, #18
 8003834:	d81a      	bhi.n	800386c <HAL_GPIO_Init+0x7c>
 8003836:	e8df f006 	tbb	[pc, r6]
 800383a:	b9a7      	.short	0xb9a7
 800383c:	1919ceb5 	.word	0x1919ceb5
 8003840:	19191919 	.word	0x19191919
 8003844:	19191919 	.word	0x19191919
 8003848:	b1191919 	.word	0xb1191919
 800384c:	bc          	.byte	0xbc
 800384d:	00          	.byte	0x00
 800384e:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 80039f8 <HAL_GPIO_Init+0x208>
 8003852:	4576      	cmp	r6, lr
 8003854:	f000 8098 	beq.w	8003988 <HAL_GPIO_Init+0x198>
 8003858:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 800385c:	4576      	cmp	r6, lr
 800385e:	f000 8093 	beq.w	8003988 <HAL_GPIO_Init+0x198>
 8003862:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8003866:	4576      	cmp	r6, lr
 8003868:	f000 808e 	beq.w	8003988 <HAL_GPIO_Init+0x198>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800386c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8003870:	bf9c      	itt	ls
 8003872:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003874:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003876:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800387a:	bf84      	itt	hi
 800387c:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003880:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003884:	f8de 4000 	ldr.w	r4, [lr]
 8003888:	fa0a f90b 	lsl.w	r9, sl, fp
 800388c:	fa06 fb0b 	lsl.w	fp, r6, fp
 8003890:	ea24 040b 	bic.w	r4, r4, fp
 8003894:	ea44 0409 	orr.w	r4, r4, r9
 8003898:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800389c:	684c      	ldr	r4, [r1, #4]
 800389e:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80038a2:	d079      	beq.n	8003998 <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038a4:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038a8:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038ac:	f04e 0e01 	orr.w	lr, lr, #1
 80038b0:	f8c7 e018 	str.w	lr, [r7, #24]
 80038b4:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038b8:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038bc:	f00e 0e01 	and.w	lr, lr, #1
 80038c0:	f8cd e004 	str.w	lr, [sp, #4]
 80038c4:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80038c8:	f023 0e03 	bic.w	lr, r3, #3
 80038cc:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 80038d0:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 80038d4:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038d8:	fa06 f609 	lsl.w	r6, r6, r9
 80038dc:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038e0:	f8df b118 	ldr.w	fp, [pc, #280]	; 80039fc <HAL_GPIO_Init+0x20c>
 80038e4:	4558      	cmp	r0, fp
 80038e6:	d013      	beq.n	8003910 <HAL_GPIO_Init+0x120>
 80038e8:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 80038ec:	4558      	cmp	r0, fp
 80038ee:	d06b      	beq.n	80039c8 <HAL_GPIO_Init+0x1d8>
 80038f0:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8003a00 <HAL_GPIO_Init+0x210>
 80038f4:	4558      	cmp	r0, fp
 80038f6:	d060      	beq.n	80039ba <HAL_GPIO_Init+0x1ca>
 80038f8:	f8df b108 	ldr.w	fp, [pc, #264]	; 8003a04 <HAL_GPIO_Init+0x214>
 80038fc:	4558      	cmp	r0, fp
 80038fe:	bf0c      	ite	eq
 8003900:	f04f 0b03 	moveq.w	fp, #3
 8003904:	f04f 0b04 	movne.w	fp, #4
 8003908:	fa0b f909 	lsl.w	r9, fp, r9
 800390c:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8003910:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8003914:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003916:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800391a:	bf14      	ite	ne
 800391c:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003920:	ea26 060c 	biceq.w	r6, r6, ip
 8003924:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8003926:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003928:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800392c:	bf14      	ite	ne
 800392e:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003932:	ea26 060c 	biceq.w	r6, r6, ip
 8003936:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8003938:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800393a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800393e:	bf14      	ite	ne
 8003940:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003944:	ea26 060c 	biceq.w	r6, r6, ip
 8003948:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800394a:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800394e:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003950:	d01f      	beq.n	8003992 <HAL_GPIO_Init+0x1a2>
          SET_BIT(EXTI->FTSR, iocurrent);
 8003952:	ea44 040c 	orr.w	r4, r4, ip
 8003956:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003958:	680e      	ldr	r6, [r1, #0]
	position++;
 800395a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800395c:	fa36 f403 	lsrs.w	r4, r6, r3
 8003960:	f102 0204 	add.w	r2, r2, #4
 8003964:	f47f af5a 	bne.w	800381c <HAL_GPIO_Init+0x2c>
  }
}
 8003968:	b003      	add	sp, #12
 800396a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800396e:	4546      	cmp	r6, r8
 8003970:	d00a      	beq.n	8003988 <HAL_GPIO_Init+0x198>
 8003972:	f67f af6c 	bls.w	800384e <HAL_GPIO_Init+0x5e>
 8003976:	f8df e090 	ldr.w	lr, [pc, #144]	; 8003a08 <HAL_GPIO_Init+0x218>
 800397a:	4576      	cmp	r6, lr
 800397c:	d004      	beq.n	8003988 <HAL_GPIO_Init+0x198>
 800397e:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8003982:	4576      	cmp	r6, lr
 8003984:	f47f af72 	bne.w	800386c <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003988:	688e      	ldr	r6, [r1, #8]
 800398a:	bb3e      	cbnz	r6, 80039dc <HAL_GPIO_Init+0x1ec>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800398c:	f04f 0a04 	mov.w	sl, #4
 8003990:	e76c      	b.n	800386c <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003992:	ea24 040c 	bic.w	r4, r4, ip
 8003996:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003998:	680e      	ldr	r6, [r1, #0]
 800399a:	e738      	b.n	800380e <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800399c:	68cc      	ldr	r4, [r1, #12]
 800399e:	f104 0a04 	add.w	sl, r4, #4
          break;
 80039a2:	e763      	b.n	800386c <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80039a4:	68cc      	ldr	r4, [r1, #12]
 80039a6:	f104 0a08 	add.w	sl, r4, #8
          break;
 80039aa:	e75f      	b.n	800386c <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80039ac:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 80039b0:	e75c      	b.n	800386c <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80039b2:	68cc      	ldr	r4, [r1, #12]
 80039b4:	f104 0a0c 	add.w	sl, r4, #12
          break;
 80039b8:	e758      	b.n	800386c <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80039ba:	f04f 0b02 	mov.w	fp, #2
 80039be:	fa0b f909 	lsl.w	r9, fp, r9
 80039c2:	ea46 0609 	orr.w	r6, r6, r9
 80039c6:	e7a3      	b.n	8003910 <HAL_GPIO_Init+0x120>
 80039c8:	f04f 0b01 	mov.w	fp, #1
 80039cc:	fa0b f909 	lsl.w	r9, fp, r9
 80039d0:	ea46 0609 	orr.w	r6, r6, r9
 80039d4:	e79c      	b.n	8003910 <HAL_GPIO_Init+0x120>
      switch (GPIO_Init->Mode)
 80039d6:	f04f 0a00 	mov.w	sl, #0
 80039da:	e747      	b.n	800386c <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80039dc:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039de:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 80039e2:	bf0c      	ite	eq
 80039e4:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 80039e6:	6144      	strne	r4, [r0, #20]
 80039e8:	e740      	b.n	800386c <HAL_GPIO_Init+0x7c>
 80039ea:	bf00      	nop
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40010400 	.word	0x40010400
 80039f4:	10220000 	.word	0x10220000
 80039f8:	10120000 	.word	0x10120000
 80039fc:	40010800 	.word	0x40010800
 8003a00:	40011000 	.word	0x40011000
 8003a04:	40011400 	.word	0x40011400
 8003a08:	10310000 	.word	0x10310000

08003a0c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a0c:	b902      	cbnz	r2, 8003a10 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a0e:	0409      	lsls	r1, r1, #16
 8003a10:	6101      	str	r1, [r0, #16]
  }
}
 8003a12:	4770      	bx	lr

08003a14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a18:	4606      	mov	r6, r0
 8003a1a:	468a      	mov	sl, r1
 8003a1c:	4617      	mov	r7, r2
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a1e:	6804      	ldr	r4, [r0, #0]
{
 8003a20:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a22:	6823      	ldr	r3, [r4, #0]
{
 8003a24:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2a:	6023      	str	r3, [r4, #0]
{
 8003a2c:	e9dd 9b0c 	ldrd	r9, fp, [sp, #48]	; 0x30
 8003a30:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003a34:	d136      	bne.n	8003aa4 <I2C_RequestMemoryWrite+0x90>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a36:	6965      	ldr	r5, [r4, #20]
 8003a38:	07e8      	lsls	r0, r5, #31
 8003a3a:	d5fc      	bpl.n	8003a36 <I2C_RequestMemoryWrite+0x22>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a3c:	f00a 01fe 	and.w	r1, sl, #254	; 0xfe
 8003a40:	6121      	str	r1, [r4, #16]
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8003a42:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003a46:	d003      	beq.n	8003a50 <I2C_RequestMemoryWrite+0x3c>
 8003a48:	e052      	b.n	8003af0 <I2C_RequestMemoryWrite+0xdc>
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a4a:	6961      	ldr	r1, [r4, #20]
 8003a4c:	054d      	lsls	r5, r1, #21
 8003a4e:	d460      	bmi.n	8003b12 <I2C_RequestMemoryWrite+0xfe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a50:	6961      	ldr	r1, [r4, #20]
 8003a52:	078b      	lsls	r3, r1, #30
 8003a54:	d5f9      	bpl.n	8003a4a <I2C_RequestMemoryWrite+0x36>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a56:	2300      	movs	r3, #0
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	6963      	ldr	r3, [r4, #20]
 8003a5c:	9301      	str	r3, [sp, #4]
 8003a5e:	69a3      	ldr	r3, [r4, #24]
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a64:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003a68:	f040 80a4 	bne.w	8003bb4 <I2C_RequestMemoryWrite+0x1a0>
 8003a6c:	6963      	ldr	r3, [r4, #20]
 8003a6e:	061a      	lsls	r2, r3, #24
 8003a70:	d467      	bmi.n	8003b42 <I2C_RequestMemoryWrite+0x12e>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a72:	6963      	ldr	r3, [r4, #20]
 8003a74:	055b      	lsls	r3, r3, #21
 8003a76:	d5f9      	bpl.n	8003a6c <I2C_RequestMemoryWrite+0x58>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a78:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a7a:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a7c:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8003a80:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a82:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a84:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a88:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a8c:	6c33      	ldr	r3, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a8e:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a92:	f043 0304 	orr.w	r3, r3, #4
 8003a96:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a98:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	f000 8083 	beq.w	8003ba6 <I2C_RequestMemoryWrite+0x192>
    return HAL_ERROR;
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	e04b      	b.n	8003b3c <I2C_RequestMemoryWrite+0x128>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aa4:	6963      	ldr	r3, [r4, #20]
 8003aa6:	07d9      	lsls	r1, r3, #31
 8003aa8:	d4c8      	bmi.n	8003a3c <I2C_RequestMemoryWrite+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aaa:	f7ff fe21 	bl	80036f0 <HAL_GetTick>
 8003aae:	eba0 000b 	sub.w	r0, r0, fp
 8003ab2:	4581      	cmp	r9, r0
 8003ab4:	d304      	bcc.n	8003ac0 <I2C_RequestMemoryWrite+0xac>
 8003ab6:	f1b9 0f00 	cmp.w	r9, #0
 8003aba:	d001      	beq.n	8003ac0 <I2C_RequestMemoryWrite+0xac>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003abc:	6834      	ldr	r4, [r6, #0]
 8003abe:	e7b7      	b.n	8003a30 <I2C_RequestMemoryWrite+0x1c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ac0:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ac2:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ac4:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ac6:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003aca:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ace:	6c33      	ldr	r3, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ad0:	6831      	ldr	r1, [r6, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ad2:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003ad6:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ada:	6433      	str	r3, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003adc:	680b      	ldr	r3, [r1, #0]
 8003ade:	05dc      	lsls	r4, r3, #23
 8003ae0:	d538      	bpl.n	8003b54 <I2C_RequestMemoryWrite+0x140>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8003ae6:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ae8:	6433      	str	r3, [r6, #64]	; 0x40
}
 8003aea:	b003      	add	sp, #12
 8003aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003af0:	6963      	ldr	r3, [r4, #20]
 8003af2:	0798      	lsls	r0, r3, #30
 8003af4:	d4af      	bmi.n	8003a56 <I2C_RequestMemoryWrite+0x42>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003af6:	6963      	ldr	r3, [r4, #20]
 8003af8:	055a      	lsls	r2, r3, #21
 8003afa:	d40a      	bmi.n	8003b12 <I2C_RequestMemoryWrite+0xfe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afc:	f7ff fdf8 	bl	80036f0 <HAL_GetTick>
 8003b00:	eba0 000b 	sub.w	r0, r0, fp
 8003b04:	4581      	cmp	r9, r0
 8003b06:	d367      	bcc.n	8003bd8 <I2C_RequestMemoryWrite+0x1c4>
 8003b08:	f1b9 0f00 	cmp.w	r9, #0
 8003b0c:	d064      	beq.n	8003bd8 <I2C_RequestMemoryWrite+0x1c4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b0e:	6834      	ldr	r4, [r6, #0]
 8003b10:	e797      	b.n	8003a42 <I2C_RequestMemoryWrite+0x2e>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b12:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b14:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b18:	2120      	movs	r1, #32
    return HAL_ERROR;
 8003b1a:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b22:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b24:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b26:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b28:	f886 103d 	strb.w	r1, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b2c:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b30:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003b32:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b36:	f043 0304 	orr.w	r3, r3, #4
 8003b3a:	6433      	str	r3, [r6, #64]	; 0x40
}
 8003b3c:	b003      	add	sp, #12
 8003b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b42:	f1b8 0f01 	cmp.w	r8, #1
 8003b46:	d109      	bne.n	8003b5c <I2C_RequestMemoryWrite+0x148>
  return HAL_OK;
 8003b48:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b4a:	b2ff      	uxtb	r7, r7
 8003b4c:	6127      	str	r7, [r4, #16]
}
 8003b4e:	b003      	add	sp, #12
 8003b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_TIMEOUT;
 8003b54:	2003      	movs	r0, #3
}
 8003b56:	b003      	add	sp, #12
 8003b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b5c:	0a3b      	lsrs	r3, r7, #8
 8003b5e:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b60:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003b64:	d147      	bne.n	8003bf6 <I2C_RequestMemoryWrite+0x1e2>
 8003b66:	6963      	ldr	r3, [r4, #20]
 8003b68:	0619      	lsls	r1, r3, #24
 8003b6a:	d4ed      	bmi.n	8003b48 <I2C_RequestMemoryWrite+0x134>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b6c:	6963      	ldr	r3, [r4, #20]
 8003b6e:	055a      	lsls	r2, r3, #21
 8003b70:	d5f9      	bpl.n	8003b66 <I2C_RequestMemoryWrite+0x152>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b72:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b74:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b76:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8003b7a:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b7c:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b7e:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b82:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b86:	6c33      	ldr	r3, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003b88:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b8c:	f043 0304 	orr.w	r3, r3, #4
 8003b90:	6433      	str	r3, [r6, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b92:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d183      	bne.n	8003aa0 <I2C_RequestMemoryWrite+0x8c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b98:	6832      	ldr	r2, [r6, #0]
      return HAL_ERROR;
 8003b9a:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9c:	6813      	ldr	r3, [r2, #0]
 8003b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	e7ca      	b.n	8003b3c <I2C_RequestMemoryWrite+0x128>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba6:	6832      	ldr	r2, [r6, #0]
    return HAL_ERROR;
 8003ba8:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003baa:	6813      	ldr	r3, [r2, #0]
 8003bac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e7c3      	b.n	8003b3c <I2C_RequestMemoryWrite+0x128>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bb4:	6963      	ldr	r3, [r4, #20]
 8003bb6:	061d      	lsls	r5, r3, #24
 8003bb8:	d4c3      	bmi.n	8003b42 <I2C_RequestMemoryWrite+0x12e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bba:	6963      	ldr	r3, [r4, #20]
 8003bbc:	0559      	lsls	r1, r3, #21
 8003bbe:	f53f af5b 	bmi.w	8003a78 <I2C_RequestMemoryWrite+0x64>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc2:	f7ff fd95 	bl	80036f0 <HAL_GetTick>
 8003bc6:	eba0 030b 	sub.w	r3, r0, fp
 8003bca:	4599      	cmp	r9, r3
 8003bcc:	d324      	bcc.n	8003c18 <I2C_RequestMemoryWrite+0x204>
 8003bce:	f1b9 0f00 	cmp.w	r9, #0
 8003bd2:	d021      	beq.n	8003c18 <I2C_RequestMemoryWrite+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bd4:	6834      	ldr	r4, [r6, #0]
 8003bd6:	e745      	b.n	8003a64 <I2C_RequestMemoryWrite+0x50>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bd8:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bda:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bdc:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bde:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003be2:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003be6:	6c33      	ldr	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 8003be8:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bea:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003bee:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bf2:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003bf4:	e7a2      	b.n	8003b3c <I2C_RequestMemoryWrite+0x128>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bf6:	6963      	ldr	r3, [r4, #20]
 8003bf8:	061b      	lsls	r3, r3, #24
 8003bfa:	d4a5      	bmi.n	8003b48 <I2C_RequestMemoryWrite+0x134>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bfc:	6963      	ldr	r3, [r4, #20]
 8003bfe:	0558      	lsls	r0, r3, #21
 8003c00:	d4b7      	bmi.n	8003b72 <I2C_RequestMemoryWrite+0x15e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c02:	f7ff fd75 	bl	80036f0 <HAL_GetTick>
 8003c06:	eba0 030b 	sub.w	r3, r0, fp
 8003c0a:	4599      	cmp	r9, r3
 8003c0c:	d312      	bcc.n	8003c34 <I2C_RequestMemoryWrite+0x220>
 8003c0e:	f1b9 0f00 	cmp.w	r9, #0
 8003c12:	d00f      	beq.n	8003c34 <I2C_RequestMemoryWrite+0x220>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c14:	6834      	ldr	r4, [r6, #0]
 8003c16:	e7a3      	b.n	8003b60 <I2C_RequestMemoryWrite+0x14c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c18:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c1a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c1c:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c1e:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c22:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c26:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003c28:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c2c:	f043 0320 	orr.w	r3, r3, #32
 8003c30:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003c32:	e731      	b.n	8003a98 <I2C_RequestMemoryWrite+0x84>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c34:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c36:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c38:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c3a:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c3e:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c42:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003c44:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c48:	f043 0320 	orr.w	r3, r3, #32
 8003c4c:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003c4e:	e7a0      	b.n	8003b92 <I2C_RequestMemoryWrite+0x17e>

08003c50 <I2C_RequestMemoryRead>:
{
 8003c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c54:	4606      	mov	r6, r0
 8003c56:	468b      	mov	fp, r1
 8003c58:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5a:	6804      	ldr	r4, [r0, #0]
{
 8003c5c:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5e:	6823      	ldr	r3, [r4, #0]
{
 8003c60:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c66:	6023      	str	r3, [r4, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c68:	6823      	ldr	r3, [r4, #0]
{
 8003c6a:	e9dd a90c 	ldrd	sl, r9, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c72:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8003c74:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003c78:	d139      	bne.n	8003cee <I2C_RequestMemoryRead+0x9e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c7a:	6965      	ldr	r5, [r4, #20]
 8003c7c:	07eb      	lsls	r3, r5, #31
 8003c7e:	d5fc      	bpl.n	8003c7a <I2C_RequestMemoryRead+0x2a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c80:	f00b 03fe 	and.w	r3, fp, #254	; 0xfe
 8003c84:	6123      	str	r3, [r4, #16]
 8003c86:	fa5f fb8b 	uxtb.w	fp, fp
 8003c8a:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003c8e:	d003      	beq.n	8003c98 <I2C_RequestMemoryRead+0x48>
 8003c90:	e06b      	b.n	8003d6a <I2C_RequestMemoryRead+0x11a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c92:	6961      	ldr	r1, [r4, #20]
 8003c94:	054a      	lsls	r2, r1, #21
 8003c96:	d450      	bmi.n	8003d3a <I2C_RequestMemoryRead+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c98:	6961      	ldr	r1, [r4, #20]
 8003c9a:	0789      	lsls	r1, r1, #30
 8003c9c:	d5f9      	bpl.n	8003c92 <I2C_RequestMemoryRead+0x42>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	6963      	ldr	r3, [r4, #20]
 8003ca4:	9301      	str	r3, [sp, #4]
 8003ca6:	69a3      	ldr	r3, [r4, #24]
 8003ca8:	9301      	str	r3, [sp, #4]
 8003caa:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cac:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003cb0:	f040 80bf 	bne.w	8003e32 <I2C_RequestMemoryRead+0x1e2>
 8003cb4:	6963      	ldr	r3, [r4, #20]
 8003cb6:	0618      	lsls	r0, r3, #24
 8003cb8:	d46a      	bmi.n	8003d90 <I2C_RequestMemoryRead+0x140>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cba:	6963      	ldr	r3, [r4, #20]
 8003cbc:	0559      	lsls	r1, r3, #21
 8003cbe:	d5f9      	bpl.n	8003cb4 <I2C_RequestMemoryRead+0x64>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc0:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cc2:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cc4:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8003cc8:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cca:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ccc:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd0:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cd4:	6c33      	ldr	r3, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003cd6:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cda:	f043 0304 	orr.w	r3, r3, #4
 8003cde:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce0:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d073      	beq.n	8003dce <I2C_RequestMemoryRead+0x17e>
    return HAL_ERROR;
 8003ce6:	2001      	movs	r0, #1
}
 8003ce8:	b003      	add	sp, #12
 8003cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cee:	6963      	ldr	r3, [r4, #20]
 8003cf0:	07dd      	lsls	r5, r3, #31
 8003cf2:	d4c5      	bmi.n	8003c80 <I2C_RequestMemoryRead+0x30>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf4:	f7ff fcfc 	bl	80036f0 <HAL_GetTick>
 8003cf8:	eba0 0009 	sub.w	r0, r0, r9
 8003cfc:	4582      	cmp	sl, r0
 8003cfe:	d304      	bcc.n	8003d0a <I2C_RequestMemoryRead+0xba>
 8003d00:	f1ba 0f00 	cmp.w	sl, #0
 8003d04:	d001      	beq.n	8003d0a <I2C_RequestMemoryRead+0xba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d06:	6834      	ldr	r4, [r6, #0]
 8003d08:	e7b4      	b.n	8003c74 <I2C_RequestMemoryRead+0x24>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d0a:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d0c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d0e:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d10:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d14:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d18:	6c33      	ldr	r3, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d1a:	6831      	ldr	r1, [r6, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d1c:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003d20:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d24:	6433      	str	r3, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d26:	680b      	ldr	r3, [r1, #0]
 8003d28:	05da      	lsls	r2, r3, #23
 8003d2a:	d540      	bpl.n	8003dae <I2C_RequestMemoryRead+0x15e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8003d30:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d32:	6433      	str	r3, [r6, #64]	; 0x40
}
 8003d34:	b003      	add	sp, #12
 8003d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d3a:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d3c:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d40:	2120      	movs	r1, #32
    return HAL_ERROR;
 8003d42:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d4a:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d4c:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d4e:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d50:	f886 103d 	strb.w	r1, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d54:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d58:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003d5a:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d5e:	f043 0304 	orr.w	r3, r3, #4
 8003d62:	6433      	str	r3, [r6, #64]	; 0x40
}
 8003d64:	b003      	add	sp, #12
 8003d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d6a:	6963      	ldr	r3, [r4, #20]
 8003d6c:	079b      	lsls	r3, r3, #30
 8003d6e:	d496      	bmi.n	8003c9e <I2C_RequestMemoryRead+0x4e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d70:	6963      	ldr	r3, [r4, #20]
 8003d72:	0558      	lsls	r0, r3, #21
 8003d74:	d4e1      	bmi.n	8003d3a <I2C_RequestMemoryRead+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d76:	f7ff fcbb 	bl	80036f0 <HAL_GetTick>
 8003d7a:	eba0 0009 	sub.w	r0, r0, r9
 8003d7e:	4582      	cmp	sl, r0
 8003d80:	f0c0 808f 	bcc.w	8003ea2 <I2C_RequestMemoryRead+0x252>
 8003d84:	f1ba 0f00 	cmp.w	sl, #0
 8003d88:	f000 808b 	beq.w	8003ea2 <I2C_RequestMemoryRead+0x252>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d8c:	6834      	ldr	r4, [r6, #0]
 8003d8e:	e77c      	b.n	8003c8a <I2C_RequestMemoryRead+0x3a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d90:	f1b8 0f01 	cmp.w	r8, #1
 8003d94:	d10f      	bne.n	8003db6 <I2C_RequestMemoryRead+0x166>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d96:	b2ff      	uxtb	r7, r7
 8003d98:	6127      	str	r7, [r4, #16]
 8003d9a:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003d9e:	d16e      	bne.n	8003e7e <I2C_RequestMemoryRead+0x22e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003da0:	6963      	ldr	r3, [r4, #20]
 8003da2:	061b      	lsls	r3, r3, #24
 8003da4:	d41a      	bmi.n	8003ddc <I2C_RequestMemoryRead+0x18c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003da6:	6963      	ldr	r3, [r4, #20]
 8003da8:	055f      	lsls	r7, r3, #21
 8003daa:	d5f9      	bpl.n	8003da0 <I2C_RequestMemoryRead+0x150>
 8003dac:	e788      	b.n	8003cc0 <I2C_RequestMemoryRead+0x70>
    return HAL_TIMEOUT;
 8003dae:	2003      	movs	r0, #3
}
 8003db0:	b003      	add	sp, #12
 8003db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003db6:	0a3b      	lsrs	r3, r7, #8
 8003db8:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dba:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003dbe:	d17f      	bne.n	8003ec0 <I2C_RequestMemoryRead+0x270>
 8003dc0:	6963      	ldr	r3, [r4, #20]
 8003dc2:	061d      	lsls	r5, r3, #24
 8003dc4:	d4e7      	bmi.n	8003d96 <I2C_RequestMemoryRead+0x146>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dc6:	6963      	ldr	r3, [r4, #20]
 8003dc8:	0558      	lsls	r0, r3, #21
 8003dca:	d5f9      	bpl.n	8003dc0 <I2C_RequestMemoryRead+0x170>
 8003dcc:	e778      	b.n	8003cc0 <I2C_RequestMemoryRead+0x70>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dce:	6832      	ldr	r2, [r6, #0]
    return HAL_ERROR;
 8003dd0:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd2:	6813      	ldr	r3, [r2, #0]
 8003dd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e7c3      	b.n	8003d64 <I2C_RequestMemoryRead+0x114>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de2:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8003de4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003de8:	d113      	bne.n	8003e12 <I2C_RequestMemoryRead+0x1c2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dea:	6963      	ldr	r3, [r4, #20]
 8003dec:	07d8      	lsls	r0, r3, #31
 8003dee:	d5fc      	bpl.n	8003dea <I2C_RequestMemoryRead+0x19a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003df0:	f04b 0301 	orr.w	r3, fp, #1
 8003df4:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8003df6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003dfa:	d003      	beq.n	8003e04 <I2C_RequestMemoryRead+0x1b4>
 8003dfc:	e02b      	b.n	8003e56 <I2C_RequestMemoryRead+0x206>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dfe:	6963      	ldr	r3, [r4, #20]
 8003e00:	055b      	lsls	r3, r3, #21
 8003e02:	d49a      	bmi.n	8003d3a <I2C_RequestMemoryRead+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e04:	6963      	ldr	r3, [r4, #20]
 8003e06:	43db      	mvns	r3, r3
 8003e08:	f013 0302 	ands.w	r3, r3, #2
 8003e0c:	d1f7      	bne.n	8003dfe <I2C_RequestMemoryRead+0x1ae>
  return HAL_OK;
 8003e0e:	4618      	mov	r0, r3
 8003e10:	e7a8      	b.n	8003d64 <I2C_RequestMemoryRead+0x114>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e12:	6963      	ldr	r3, [r4, #20]
 8003e14:	07d9      	lsls	r1, r3, #31
 8003e16:	d4eb      	bmi.n	8003df0 <I2C_RequestMemoryRead+0x1a0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e18:	f7ff fc6a 	bl	80036f0 <HAL_GetTick>
 8003e1c:	eba0 0309 	sub.w	r3, r0, r9
 8003e20:	459a      	cmp	sl, r3
 8003e22:	f4ff af72 	bcc.w	8003d0a <I2C_RequestMemoryRead+0xba>
 8003e26:	f1ba 0f00 	cmp.w	sl, #0
 8003e2a:	f43f af6e 	beq.w	8003d0a <I2C_RequestMemoryRead+0xba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e2e:	6834      	ldr	r4, [r6, #0]
 8003e30:	e7d8      	b.n	8003de4 <I2C_RequestMemoryRead+0x194>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e32:	6963      	ldr	r3, [r4, #20]
 8003e34:	061a      	lsls	r2, r3, #24
 8003e36:	d4ab      	bmi.n	8003d90 <I2C_RequestMemoryRead+0x140>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e38:	6963      	ldr	r3, [r4, #20]
 8003e3a:	055d      	lsls	r5, r3, #21
 8003e3c:	f53f af40 	bmi.w	8003cc0 <I2C_RequestMemoryRead+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e40:	f7ff fc56 	bl	80036f0 <HAL_GetTick>
 8003e44:	eba0 0309 	sub.w	r3, r0, r9
 8003e48:	459a      	cmp	sl, r3
 8003e4a:	d34c      	bcc.n	8003ee6 <I2C_RequestMemoryRead+0x296>
 8003e4c:	f1ba 0f00 	cmp.w	sl, #0
 8003e50:	d049      	beq.n	8003ee6 <I2C_RequestMemoryRead+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e52:	6834      	ldr	r4, [r6, #0]
 8003e54:	e72a      	b.n	8003cac <I2C_RequestMemoryRead+0x5c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e56:	6963      	ldr	r3, [r4, #20]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	f013 0302 	ands.w	r3, r3, #2
 8003e5e:	d0d6      	beq.n	8003e0e <I2C_RequestMemoryRead+0x1be>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e60:	6963      	ldr	r3, [r4, #20]
 8003e62:	055a      	lsls	r2, r3, #21
 8003e64:	f53f af69 	bmi.w	8003d3a <I2C_RequestMemoryRead+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e68:	f7ff fc42 	bl	80036f0 <HAL_GetTick>
 8003e6c:	eba0 0309 	sub.w	r3, r0, r9
 8003e70:	459a      	cmp	sl, r3
 8003e72:	d316      	bcc.n	8003ea2 <I2C_RequestMemoryRead+0x252>
 8003e74:	f1ba 0f00 	cmp.w	sl, #0
 8003e78:	d013      	beq.n	8003ea2 <I2C_RequestMemoryRead+0x252>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e7a:	6834      	ldr	r4, [r6, #0]
 8003e7c:	e7bb      	b.n	8003df6 <I2C_RequestMemoryRead+0x1a6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e7e:	6963      	ldr	r3, [r4, #20]
 8003e80:	061d      	lsls	r5, r3, #24
 8003e82:	d4ab      	bmi.n	8003ddc <I2C_RequestMemoryRead+0x18c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e84:	6963      	ldr	r3, [r4, #20]
 8003e86:	055a      	lsls	r2, r3, #21
 8003e88:	f53f af1a 	bmi.w	8003cc0 <I2C_RequestMemoryRead+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8c:	f7ff fc30 	bl	80036f0 <HAL_GetTick>
 8003e90:	eba0 0309 	sub.w	r3, r0, r9
 8003e94:	459a      	cmp	sl, r3
 8003e96:	d326      	bcc.n	8003ee6 <I2C_RequestMemoryRead+0x296>
 8003e98:	f1ba 0f00 	cmp.w	sl, #0
 8003e9c:	d023      	beq.n	8003ee6 <I2C_RequestMemoryRead+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e9e:	6834      	ldr	r4, [r6, #0]
 8003ea0:	e77b      	b.n	8003d9a <I2C_RequestMemoryRead+0x14a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea2:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ea4:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea6:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ea8:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eac:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eb0:	6c33      	ldr	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 8003eb2:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eb4:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003eb8:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ebc:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003ebe:	e751      	b.n	8003d64 <I2C_RequestMemoryRead+0x114>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ec0:	6963      	ldr	r3, [r4, #20]
 8003ec2:	0619      	lsls	r1, r3, #24
 8003ec4:	f53f af67 	bmi.w	8003d96 <I2C_RequestMemoryRead+0x146>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ec8:	6963      	ldr	r3, [r4, #20]
 8003eca:	055b      	lsls	r3, r3, #21
 8003ecc:	f53f aef8 	bmi.w	8003cc0 <I2C_RequestMemoryRead+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed0:	f7ff fc0e 	bl	80036f0 <HAL_GetTick>
 8003ed4:	eba0 0309 	sub.w	r3, r0, r9
 8003ed8:	459a      	cmp	sl, r3
 8003eda:	d304      	bcc.n	8003ee6 <I2C_RequestMemoryRead+0x296>
 8003edc:	f1ba 0f00 	cmp.w	sl, #0
 8003ee0:	d001      	beq.n	8003ee6 <I2C_RequestMemoryRead+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ee2:	6834      	ldr	r4, [r6, #0]
 8003ee4:	e769      	b.n	8003dba <I2C_RequestMemoryRead+0x16a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ee6:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ee8:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003eea:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003eec:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ef0:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ef4:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003ef6:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003efa:	f043 0320 	orr.w	r3, r3, #32
 8003efe:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003f00:	e6ee      	b.n	8003ce0 <I2C_RequestMemoryRead+0x90>
 8003f02:	bf00      	nop

08003f04 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003f04:	2800      	cmp	r0, #0
 8003f06:	f000 80b9 	beq.w	800407c <HAL_I2C_Init+0x178>
{
 8003f0a:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f0c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f10:	4604      	mov	r4, r0
 8003f12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 8098 	beq.w	800404c <HAL_I2C_Init+0x148>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f1c:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003f1e:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f20:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	f022 0201 	bic.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f3a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f3c:	f001 fa7a 	bl	8005434 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f40:	6863      	ldr	r3, [r4, #4]
 8003f42:	494f      	ldr	r1, [pc, #316]	; (8004080 <HAL_I2C_Init+0x17c>)
 8003f44:	428b      	cmp	r3, r1
 8003f46:	d84f      	bhi.n	8003fe8 <HAL_I2C_Init+0xe4>
 8003f48:	4a4e      	ldr	r2, [pc, #312]	; (8004084 <HAL_I2C_Init+0x180>)
 8003f4a:	4290      	cmp	r0, r2
 8003f4c:	d97c      	bls.n	8004048 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8003f4e:	4d4e      	ldr	r5, [pc, #312]	; (8004088 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f50:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8003f52:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f56:	1e43      	subs	r3, r0, #1
 8003f58:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f5c:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f60:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8003f62:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f64:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f66:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f6a:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8003f6e:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 8003f72:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f74:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f76:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f78:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003f7c:	ea41 010c 	orr.w	r1, r1, ip
 8003f80:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f82:	69d1      	ldr	r1, [r2, #28]
 8003f84:	ea13 0f0e 	tst.w	r3, lr
 8003f88:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003f8c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003f90:	d161      	bne.n	8004056 <HAL_I2C_Init+0x152>
 8003f92:	2304      	movs	r3, #4
 8003f94:	430b      	orrs	r3, r1
 8003f96:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f98:	6811      	ldr	r1, [r2, #0]
 8003f9a:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8003f9e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8003fa2:	4303      	orrs	r3, r0
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fa8:	6891      	ldr	r1, [r2, #8]
 8003faa:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8003fae:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8003fb2:	4303      	orrs	r3, r0
 8003fb4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fbc:	68d0      	ldr	r0, [r2, #12]
 8003fbe:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8003fc2:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003fc6:	430b      	orrs	r3, r1
 8003fc8:	4303      	orrs	r3, r0
 8003fca:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003fcc:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fce:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003fd6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd8:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fde:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8003fe4:	4608      	mov	r0, r1
}
 8003fe6:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fe8:	4a28      	ldr	r2, [pc, #160]	; (800408c <HAL_I2C_Init+0x188>)
 8003fea:	4290      	cmp	r0, r2
 8003fec:	d92c      	bls.n	8004048 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8003fee:	4d26      	ldr	r5, [pc, #152]	; (8004088 <HAL_I2C_Init+0x184>)
 8003ff0:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ff4:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8003ff8:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ffc:	fb02 f101 	mul.w	r1, r2, r1
 8004000:	4d23      	ldr	r5, [pc, #140]	; (8004090 <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004002:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004004:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004008:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800400a:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800400c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8004010:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8004014:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004016:	6a15      	ldr	r5, [r2, #32]
 8004018:	3101      	adds	r1, #1
 800401a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800401e:	4329      	orrs	r1, r5
 8004020:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004022:	69d1      	ldr	r1, [r2, #28]
 8004024:	68a5      	ldr	r5, [r4, #8]
 8004026:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800402a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800402e:	b9ad      	cbnz	r5, 800405c <HAL_I2C_Init+0x158>
 8004030:	3801      	subs	r0, #1
 8004032:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004036:	fbb0 f3f3 	udiv	r3, r0, r3
 800403a:	3301      	adds	r3, #1
 800403c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004040:	b1d3      	cbz	r3, 8004078 <HAL_I2C_Init+0x174>
 8004042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004046:	e7a5      	b.n	8003f94 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8004048:	2001      	movs	r0, #1
}
 800404a:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800404c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8004050:	f7ff fa04 	bl	800345c <HAL_I2C_MspInit>
 8004054:	e762      	b.n	8003f1c <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800405a:	e79b      	b.n	8003f94 <HAL_I2C_Init+0x90>
 800405c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004060:	3801      	subs	r0, #1
 8004062:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004066:	fbb0 f3f3 	udiv	r3, r0, r3
 800406a:	3301      	adds	r3, #1
 800406c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004070:	b113      	cbz	r3, 8004078 <HAL_I2C_Init+0x174>
 8004072:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004076:	e78d      	b.n	8003f94 <HAL_I2C_Init+0x90>
 8004078:	2301      	movs	r3, #1
 800407a:	e78b      	b.n	8003f94 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 800407c:	2001      	movs	r0, #1
}
 800407e:	4770      	bx	lr
 8004080:	000186a0 	.word	0x000186a0
 8004084:	001e847f 	.word	0x001e847f
 8004088:	431bde83 	.word	0x431bde83
 800408c:	003d08ff 	.word	0x003d08ff
 8004090:	10624dd3 	.word	0x10624dd3

08004094 <HAL_I2C_Master_Transmit>:
{
 8004094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004098:	4605      	mov	r5, r0
 800409a:	b083      	sub	sp, #12
 800409c:	4699      	mov	r9, r3
 800409e:	4688      	mov	r8, r1
 80040a0:	4692      	mov	sl, r2
 80040a2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80040a4:	f7ff fb24 	bl	80036f0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80040a8:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d003      	beq.n	80040b8 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 80040b0:	2002      	movs	r0, #2
}
 80040b2:	b003      	add	sp, #12
 80040b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b8:	4606      	mov	r6, r0
 80040ba:	e005      	b.n	80040c8 <HAL_I2C_Master_Transmit+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040bc:	f7ff fb18 	bl	80036f0 <HAL_GetTick>
 80040c0:	1b80      	subs	r0, r0, r6
 80040c2:	2819      	cmp	r0, #25
 80040c4:	f200 80f8 	bhi.w	80042b8 <HAL_I2C_Master_Transmit+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040c8:	682c      	ldr	r4, [r5, #0]
 80040ca:	69a3      	ldr	r3, [r4, #24]
 80040cc:	ea6f 0c03 	mvn.w	ip, r3
 80040d0:	f01c 0b02 	ands.w	fp, ip, #2
 80040d4:	d0f2      	beq.n	80040bc <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 80040d6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d0e8      	beq.n	80040b0 <HAL_I2C_Master_Transmit+0x1c>
 80040de:	2301      	movs	r3, #1
 80040e0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	07d9      	lsls	r1, r3, #31
 80040e8:	d571      	bpl.n	80041ce <HAL_I2C_Master_Transmit+0x13a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040ea:	2200      	movs	r2, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80040ec:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040ee:	2110      	movs	r1, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040f6:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80040f8:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040fc:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004100:	642a      	str	r2, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004102:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004106:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004108:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800410c:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800410e:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004110:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8004112:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004116:	2b08      	cmp	r3, #8
 8004118:	d006      	beq.n	8004128 <HAL_I2C_Master_Transmit+0x94>
 800411a:	2b01      	cmp	r3, #1
 800411c:	d004      	beq.n	8004128 <HAL_I2C_Master_Transmit+0x94>
 800411e:	4293      	cmp	r3, r2
 8004120:	d002      	beq.n	8004128 <HAL_I2C_Master_Transmit+0x94>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004122:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004124:	2b12      	cmp	r3, #18
 8004126:	d103      	bne.n	8004130 <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412e:	6023      	str	r3, [r4, #0]
 8004130:	1c7b      	adds	r3, r7, #1
 8004132:	d13e      	bne.n	80041b2 <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004134:	6963      	ldr	r3, [r4, #20]
 8004136:	07d8      	lsls	r0, r3, #31
 8004138:	d5fc      	bpl.n	8004134 <HAL_I2C_Master_Transmit+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800413a:	692b      	ldr	r3, [r5, #16]
 800413c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004140:	d14a      	bne.n	80041d8 <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004142:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8004146:	6121      	str	r1, [r4, #16]
 8004148:	1c78      	adds	r0, r7, #1
 800414a:	d004      	beq.n	8004156 <HAL_I2C_Master_Transmit+0xc2>
 800414c:	e0dd      	b.n	800430a <HAL_I2C_Master_Transmit+0x276>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800414e:	6963      	ldr	r3, [r4, #20]
 8004150:	055a      	lsls	r2, r3, #21
 8004152:	f100 80c2 	bmi.w	80042da <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004156:	6963      	ldr	r3, [r4, #20]
 8004158:	0799      	lsls	r1, r3, #30
 800415a:	d5f8      	bpl.n	800414e <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415c:	2200      	movs	r2, #0
 800415e:	9201      	str	r2, [sp, #4]
 8004160:	6962      	ldr	r2, [r4, #20]
    while (hi2c->XferSize > 0U)
 8004162:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004164:	9201      	str	r2, [sp, #4]
 8004166:	69a2      	ldr	r2, [r4, #24]
 8004168:	9201      	str	r2, [sp, #4]
 800416a:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 800416c:	2b00      	cmp	r3, #0
 800416e:	d075      	beq.n	800425c <HAL_I2C_Master_Transmit+0x1c8>
 8004170:	1c79      	adds	r1, r7, #1
 8004172:	f040 8081 	bne.w	8004278 <HAL_I2C_Master_Transmit+0x1e4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004176:	6963      	ldr	r3, [r4, #20]
 8004178:	061a      	lsls	r2, r3, #24
 800417a:	d441      	bmi.n	8004200 <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800417c:	6963      	ldr	r3, [r4, #20]
 800417e:	055b      	lsls	r3, r3, #21
 8004180:	d5f9      	bpl.n	8004176 <HAL_I2C_Master_Transmit+0xe2>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004182:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8004184:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004186:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800418a:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800418c:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800418e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004192:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004196:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004198:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800419c:	f043 0304 	orr.w	r3, r3, #4
 80041a0:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041a2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	f000 80e6 	beq.w	8004376 <HAL_I2C_Master_Transmit+0x2e2>
      return HAL_ERROR;
 80041aa:	2001      	movs	r0, #1
}
 80041ac:	b003      	add	sp, #12
 80041ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041b2:	6963      	ldr	r3, [r4, #20]
 80041b4:	07d9      	lsls	r1, r3, #31
 80041b6:	d4c0      	bmi.n	800413a <HAL_I2C_Master_Transmit+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b8:	f7ff fa9a 	bl	80036f0 <HAL_GetTick>
 80041bc:	1b80      	subs	r0, r0, r6
 80041be:	4287      	cmp	r7, r0
 80041c0:	f0c0 80b3 	bcc.w	800432a <HAL_I2C_Master_Transmit+0x296>
 80041c4:	2f00      	cmp	r7, #0
 80041c6:	f000 80b0 	beq.w	800432a <HAL_I2C_Master_Transmit+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041ca:	682c      	ldr	r4, [r5, #0]
 80041cc:	e7b0      	b.n	8004130 <HAL_I2C_Master_Transmit+0x9c>
      __HAL_I2C_ENABLE(hi2c);
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	6023      	str	r3, [r4, #0]
 80041d6:	e788      	b.n	80040ea <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041d8:	ea4f 13e8 	mov.w	r3, r8, asr #7
 80041dc:	f003 0306 	and.w	r3, r3, #6
 80041e0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80041e4:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80041e6:	1c7b      	adds	r3, r7, #1
 80041e8:	d003      	beq.n	80041f2 <HAL_I2C_Master_Transmit+0x15e>
 80041ea:	e0b5      	b.n	8004358 <HAL_I2C_Master_Transmit+0x2c4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041ec:	6963      	ldr	r3, [r4, #20]
 80041ee:	0559      	lsls	r1, r3, #21
 80041f0:	d473      	bmi.n	80042da <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041f2:	6963      	ldr	r3, [r4, #20]
 80041f4:	0718      	lsls	r0, r3, #28
 80041f6:	d5f9      	bpl.n	80041ec <HAL_I2C_Master_Transmit+0x158>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041f8:	fa5f f388 	uxtb.w	r3, r8
 80041fc:	6123      	str	r3, [r4, #16]
 80041fe:	e7a3      	b.n	8004148 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004200:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 8004202:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004206:	4601      	mov	r1, r0
 8004208:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 800420c:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004210:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 8004212:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 8004214:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004216:	3b01      	subs	r3, #1
 8004218:	b29b      	uxth	r3, r3
 800421a:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800421c:	6963      	ldr	r3, [r4, #20]
      hi2c->pBuffPtr++;
 800421e:	6269      	str	r1, [r5, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004220:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 8004222:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004224:	d50c      	bpl.n	8004240 <HAL_I2C_Master_Transmit+0x1ac>
 8004226:	b15a      	cbz	r2, 8004240 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004228:	7843      	ldrb	r3, [r0, #1]
        hi2c->XferSize--;
 800422a:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800422e:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 8004230:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8004232:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8004234:	3b01      	subs	r3, #1
 8004236:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8004238:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 800423c:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 800423e:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 8004240:	1c78      	adds	r0, r7, #1
 8004242:	d129      	bne.n	8004298 <HAL_I2C_Master_Transmit+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004244:	6963      	ldr	r3, [r4, #20]
 8004246:	0759      	lsls	r1, r3, #29
 8004248:	d405      	bmi.n	8004256 <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800424a:	6963      	ldr	r3, [r4, #20]
 800424c:	055a      	lsls	r2, r3, #21
 800424e:	d498      	bmi.n	8004182 <HAL_I2C_Master_Transmit+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004250:	6963      	ldr	r3, [r4, #20]
 8004252:	0759      	lsls	r1, r3, #29
 8004254:	d5f9      	bpl.n	800424a <HAL_I2C_Master_Transmit+0x1b6>
    while (hi2c->XferSize > 0U)
 8004256:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8004258:	2b00      	cmp	r3, #0
 800425a:	d189      	bne.n	8004170 <HAL_I2C_Master_Transmit+0xdc>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800425c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800425e:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004260:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8004262:	4618      	mov	r0, r3
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004268:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800426a:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800426e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004272:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    return HAL_OK;
 8004276:	e71c      	b.n	80040b2 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004278:	6963      	ldr	r3, [r4, #20]
 800427a:	0618      	lsls	r0, r3, #24
 800427c:	d4c0      	bmi.n	8004200 <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800427e:	6963      	ldr	r3, [r4, #20]
 8004280:	0558      	lsls	r0, r3, #21
 8004282:	f53f af7e 	bmi.w	8004182 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004286:	f7ff fa33 	bl	80036f0 <HAL_GetTick>
 800428a:	1b80      	subs	r0, r0, r6
 800428c:	4287      	cmp	r7, r0
 800428e:	d379      	bcc.n	8004384 <HAL_I2C_Master_Transmit+0x2f0>
 8004290:	2f00      	cmp	r7, #0
 8004292:	d077      	beq.n	8004384 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004294:	682c      	ldr	r4, [r5, #0]
 8004296:	e76b      	b.n	8004170 <HAL_I2C_Master_Transmit+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004298:	6963      	ldr	r3, [r4, #20]
 800429a:	075b      	lsls	r3, r3, #29
 800429c:	d4db      	bmi.n	8004256 <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800429e:	6963      	ldr	r3, [r4, #20]
 80042a0:	055b      	lsls	r3, r3, #21
 80042a2:	f53f af6e 	bmi.w	8004182 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a6:	f7ff fa23 	bl	80036f0 <HAL_GetTick>
 80042aa:	1b80      	subs	r0, r0, r6
 80042ac:	4287      	cmp	r7, r0
 80042ae:	d369      	bcc.n	8004384 <HAL_I2C_Master_Transmit+0x2f0>
 80042b0:	2f00      	cmp	r7, #0
 80042b2:	d067      	beq.n	8004384 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042b4:	682c      	ldr	r4, [r5, #0]
 80042b6:	e7c3      	b.n	8004240 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->State             = HAL_I2C_STATE_READY;
 80042b8:	2320      	movs	r3, #32
      return HAL_BUSY;
 80042ba:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042bc:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042c0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042c4:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042c8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80042ca:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042ce:	f043 0320 	orr.w	r3, r3, #32
 80042d2:	642b      	str	r3, [r5, #64]	; 0x40
}
 80042d4:	b003      	add	sp, #12
 80042d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042da:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042dc:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80042e0:	2120      	movs	r1, #32
      return HAL_ERROR;
 80042e2:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ea:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ec:	6166      	str	r6, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042ee:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042f0:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f4:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042f8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80042fa:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042fe:	f043 0304 	orr.w	r3, r3, #4
 8004302:	642b      	str	r3, [r5, #64]	; 0x40
}
 8004304:	b003      	add	sp, #12
 8004306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800430a:	6963      	ldr	r3, [r4, #20]
 800430c:	079b      	lsls	r3, r3, #30
 800430e:	f53f af25 	bmi.w	800415c <HAL_I2C_Master_Transmit+0xc8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004312:	6963      	ldr	r3, [r4, #20]
 8004314:	055b      	lsls	r3, r3, #21
 8004316:	d4e0      	bmi.n	80042da <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004318:	f7ff f9ea 	bl	80036f0 <HAL_GetTick>
 800431c:	1b80      	subs	r0, r0, r6
 800431e:	4287      	cmp	r7, r0
 8004320:	d33e      	bcc.n	80043a0 <HAL_I2C_Master_Transmit+0x30c>
 8004322:	2f00      	cmp	r7, #0
 8004324:	d03c      	beq.n	80043a0 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004326:	682c      	ldr	r4, [r5, #0]
 8004328:	e70e      	b.n	8004148 <HAL_I2C_Master_Transmit+0xb4>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800432a:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800432c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800432e:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004330:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004334:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004338:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800433a:	6829      	ldr	r1, [r5, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800433c:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004340:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004344:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004346:	680b      	ldr	r3, [r1, #0]
 8004348:	05da      	lsls	r2, r3, #23
 800434a:	f57f af2e 	bpl.w	80041aa <HAL_I2C_Master_Transmit+0x116>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800434e:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 8004352:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004354:	642b      	str	r3, [r5, #64]	; 0x40
 8004356:	e6ac      	b.n	80040b2 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004358:	6963      	ldr	r3, [r4, #20]
 800435a:	071a      	lsls	r2, r3, #28
 800435c:	f53f af4c 	bmi.w	80041f8 <HAL_I2C_Master_Transmit+0x164>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004360:	6963      	ldr	r3, [r4, #20]
 8004362:	055a      	lsls	r2, r3, #21
 8004364:	d4b9      	bmi.n	80042da <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004366:	f7ff f9c3 	bl	80036f0 <HAL_GetTick>
 800436a:	1b83      	subs	r3, r0, r6
 800436c:	429f      	cmp	r7, r3
 800436e:	d317      	bcc.n	80043a0 <HAL_I2C_Master_Transmit+0x30c>
 8004370:	b1b7      	cbz	r7, 80043a0 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004372:	682c      	ldr	r4, [r5, #0]
 8004374:	e737      	b.n	80041e6 <HAL_I2C_Master_Transmit+0x152>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004376:	682a      	ldr	r2, [r5, #0]
        return HAL_ERROR;
 8004378:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437a:	6813      	ldr	r3, [r2, #0]
 800437c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	e696      	b.n	80040b2 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004384:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004386:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004388:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800438a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800438e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004392:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004394:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004398:	f043 0320 	orr.w	r3, r3, #32
 800439c:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 800439e:	e700      	b.n	80041a2 <HAL_I2C_Master_Transmit+0x10e>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043a0:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80043a2:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043a4:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043a6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043aa:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ae:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80043b0:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043b2:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80043b6:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ba:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80043bc:	e679      	b.n	80040b2 <HAL_I2C_Master_Transmit+0x1e>
 80043be:	bf00      	nop

080043c0 <HAL_I2C_Master_Receive>:
{
 80043c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c4:	4605      	mov	r5, r0
  __IO uint32_t count = 0U;
 80043c6:	2400      	movs	r4, #0
{
 80043c8:	b087      	sub	sp, #28
 80043ca:	4699      	mov	r9, r3
 80043cc:	4688      	mov	r8, r1
 80043ce:	4692      	mov	sl, r2
 80043d0:	9f10      	ldr	r7, [sp, #64]	; 0x40
  __IO uint32_t count = 0U;
 80043d2:	9400      	str	r4, [sp, #0]
  uint32_t tickstart = HAL_GetTick();
 80043d4:	f7ff f98c 	bl	80036f0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80043d8:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d003      	beq.n	80043e8 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 80043e0:	2002      	movs	r0, #2
}
 80043e2:	b007      	add	sp, #28
 80043e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043e8:	4606      	mov	r6, r0
 80043ea:	e005      	b.n	80043f8 <HAL_I2C_Master_Receive+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ec:	f7ff f980 	bl	80036f0 <HAL_GetTick>
 80043f0:	1b80      	subs	r0, r0, r6
 80043f2:	2819      	cmp	r0, #25
 80043f4:	f200 80ac 	bhi.w	8004550 <HAL_I2C_Master_Receive+0x190>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043f8:	682c      	ldr	r4, [r5, #0]
 80043fa:	69a3      	ldr	r3, [r4, #24]
 80043fc:	ea6f 0c03 	mvn.w	ip, r3
 8004400:	f01c 0b02 	ands.w	fp, ip, #2
 8004404:	d0f2      	beq.n	80043ec <HAL_I2C_Master_Receive+0x2c>
    __HAL_LOCK(hi2c);
 8004406:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800440a:	2b01      	cmp	r3, #1
 800440c:	d0e8      	beq.n	80043e0 <HAL_I2C_Master_Receive+0x20>
 800440e:	2301      	movs	r3, #1
 8004410:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	07db      	lsls	r3, r3, #31
 8004418:	d564      	bpl.n	80044e4 <HAL_I2C_Master_Receive+0x124>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800441a:	2200      	movs	r2, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800441c:	2022      	movs	r0, #34	; 0x22
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800441e:	2110      	movs	r1, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004426:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004428:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800442c:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004430:	642a      	str	r2, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004432:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004436:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004438:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800443c:	62ea      	str	r2, [r5, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800443e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004440:	852b      	strh	r3, [r5, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004442:	6823      	ldr	r3, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004444:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    hi2c->pBuffPtr    = pData;
 800444a:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800444e:	6023      	str	r3, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004450:	d007      	beq.n	8004462 <HAL_I2C_Master_Receive+0xa2>
 8004452:	2a01      	cmp	r2, #1
 8004454:	d005      	beq.n	8004462 <HAL_I2C_Master_Receive+0xa2>
 8004456:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800445a:	d002      	beq.n	8004462 <HAL_I2C_Master_Receive+0xa2>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800445c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800445e:	2b11      	cmp	r3, #17
 8004460:	d103      	bne.n	800446a <HAL_I2C_Master_Receive+0xaa>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004468:	6023      	str	r3, [r4, #0]
 800446a:	1c78      	adds	r0, r7, #1
 800446c:	d12c      	bne.n	80044c8 <HAL_I2C_Master_Receive+0x108>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800446e:	6963      	ldr	r3, [r4, #20]
 8004470:	07d9      	lsls	r1, r3, #31
 8004472:	d5fc      	bpl.n	800446e <HAL_I2C_Master_Receive+0xae>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004474:	692b      	ldr	r3, [r5, #16]
 8004476:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800447a:	d138      	bne.n	80044ee <HAL_I2C_Master_Receive+0x12e>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800447c:	f048 0801 	orr.w	r8, r8, #1
 8004480:	fa5f f388 	uxtb.w	r3, r8
 8004484:	6123      	str	r3, [r4, #16]
 8004486:	1c79      	adds	r1, r7, #1
 8004488:	d003      	beq.n	8004492 <HAL_I2C_Master_Receive+0xd2>
 800448a:	e111      	b.n	80046b0 <HAL_I2C_Master_Receive+0x2f0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800448c:	6963      	ldr	r3, [r4, #20]
 800448e:	055b      	lsls	r3, r3, #21
 8004490:	d46f      	bmi.n	8004572 <HAL_I2C_Master_Receive+0x1b2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004492:	6963      	ldr	r3, [r4, #20]
 8004494:	079a      	lsls	r2, r3, #30
 8004496:	d5f9      	bpl.n	800448c <HAL_I2C_Master_Receive+0xcc>
    if (hi2c->XferSize == 0U)
 8004498:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800449a:	2b00      	cmp	r3, #0
 800449c:	f040 8081 	bne.w	80045a2 <HAL_I2C_Master_Receive+0x1e2>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a0:	9301      	str	r3, [sp, #4]
 80044a2:	6963      	ldr	r3, [r4, #20]
 80044a4:	9301      	str	r3, [sp, #4]
 80044a6:	69a3      	ldr	r3, [r4, #24]
 80044a8:	9301      	str	r3, [sp, #4]
 80044aa:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044b2:	6023      	str	r3, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80044b6:	2220      	movs	r2, #32
    return HAL_OK;
 80044b8:	4618      	mov	r0, r3
    hi2c->State = HAL_I2C_STATE_READY;
 80044ba:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80044be:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    return HAL_OK;
 80044c6:	e78c      	b.n	80043e2 <HAL_I2C_Master_Receive+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044c8:	6963      	ldr	r3, [r4, #20]
 80044ca:	07da      	lsls	r2, r3, #31
 80044cc:	d4d2      	bmi.n	8004474 <HAL_I2C_Master_Receive+0xb4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ce:	f7ff f90f 	bl	80036f0 <HAL_GetTick>
 80044d2:	1b80      	subs	r0, r0, r6
 80044d4:	4287      	cmp	r7, r0
 80044d6:	f0c0 80d4 	bcc.w	8004682 <HAL_I2C_Master_Receive+0x2c2>
 80044da:	2f00      	cmp	r7, #0
 80044dc:	f000 80d1 	beq.w	8004682 <HAL_I2C_Master_Receive+0x2c2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044e0:	682c      	ldr	r4, [r5, #0]
 80044e2:	e7c2      	b.n	800446a <HAL_I2C_Master_Receive+0xaa>
      __HAL_I2C_ENABLE(hi2c);
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	6023      	str	r3, [r4, #0]
 80044ec:	e795      	b.n	800441a <HAL_I2C_Master_Receive+0x5a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044ee:	ea4f 19e8 	mov.w	r9, r8, asr #7
 80044f2:	f009 0906 	and.w	r9, r9, #6
 80044f6:	f049 03f0 	orr.w	r3, r9, #240	; 0xf0
 80044fa:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80044fc:	1c78      	adds	r0, r7, #1
 80044fe:	d003      	beq.n	8004508 <HAL_I2C_Master_Receive+0x148>
 8004500:	e100      	b.n	8004704 <HAL_I2C_Master_Receive+0x344>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004502:	6963      	ldr	r3, [r4, #20]
 8004504:	055a      	lsls	r2, r3, #21
 8004506:	d434      	bmi.n	8004572 <HAL_I2C_Master_Receive+0x1b2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004508:	6963      	ldr	r3, [r4, #20]
 800450a:	0719      	lsls	r1, r3, #28
 800450c:	d5f9      	bpl.n	8004502 <HAL_I2C_Master_Receive+0x142>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800450e:	fa5f f388 	uxtb.w	r3, r8
 8004512:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8004514:	1c79      	adds	r1, r7, #1
 8004516:	d003      	beq.n	8004520 <HAL_I2C_Master_Receive+0x160>
 8004518:	e1c0      	b.n	800489c <HAL_I2C_Master_Receive+0x4dc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800451a:	6963      	ldr	r3, [r4, #20]
 800451c:	055b      	lsls	r3, r3, #21
 800451e:	d428      	bmi.n	8004572 <HAL_I2C_Master_Receive+0x1b2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004520:	6963      	ldr	r3, [r4, #20]
 8004522:	079a      	lsls	r2, r3, #30
 8004524:	d5f9      	bpl.n	800451a <HAL_I2C_Master_Receive+0x15a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004526:	2300      	movs	r3, #0
 8004528:	9305      	str	r3, [sp, #20]
 800452a:	6963      	ldr	r3, [r4, #20]
 800452c:	9305      	str	r3, [sp, #20]
 800452e:	69a3      	ldr	r3, [r4, #24]
 8004530:	9305      	str	r3, [sp, #20]
 8004532:	9b05      	ldr	r3, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453a:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800453c:	1c79      	adds	r1, r7, #1
 800453e:	f040 81c0 	bne.w	80048c2 <HAL_I2C_Master_Receive+0x502>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004542:	6963      	ldr	r3, [r4, #20]
 8004544:	07da      	lsls	r2, r3, #31
 8004546:	d5fc      	bpl.n	8004542 <HAL_I2C_Master_Receive+0x182>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004548:	f049 03f1 	orr.w	r3, r9, #241	; 0xf1
 800454c:	6123      	str	r3, [r4, #16]
 800454e:	e79a      	b.n	8004486 <HAL_I2C_Master_Receive+0xc6>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004550:	2320      	movs	r3, #32
      return HAL_BUSY;
 8004552:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004554:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004558:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800455c:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004560:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004562:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004566:	f043 0320 	orr.w	r3, r3, #32
 800456a:	642b      	str	r3, [r5, #64]	; 0x40
}
 800456c:	b007      	add	sp, #28
 800456e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004572:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004574:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8004578:	2120      	movs	r1, #32
      return HAL_ERROR;
 800457a:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004582:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004584:	6166      	str	r6, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004586:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004588:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800458c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004590:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004592:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004596:	f043 0304 	orr.w	r3, r3, #4
 800459a:	642b      	str	r3, [r5, #64]	; 0x40
}
 800459c:	b007      	add	sp, #28
 800459e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (hi2c->XferSize == 1U)
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	f000 8167 	beq.w	8004876 <HAL_I2C_Master_Receive+0x4b6>
    else if (hi2c->XferSize == 2U)
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	f000 8108 	beq.w	80047be <HAL_I2C_Master_Receive+0x3fe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ae:	2100      	movs	r1, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b0:	6822      	ldr	r2, [r4, #0]
 80045b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045b6:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b8:	9104      	str	r1, [sp, #16]
 80045ba:	6962      	ldr	r2, [r4, #20]
 80045bc:	9204      	str	r2, [sp, #16]
 80045be:	69a2      	ldr	r2, [r4, #24]
 80045c0:	9204      	str	r2, [sp, #16]
 80045c2:	9a04      	ldr	r2, [sp, #16]
      if (hi2c->XferSize <= 3U)
 80045c4:	2b03      	cmp	r3, #3
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80045c6:	f8df 9248 	ldr.w	r9, [pc, #584]	; 8004810 <HAL_I2C_Master_Receive+0x450>
 80045ca:	f8df 8248 	ldr.w	r8, [pc, #584]	; 8004814 <HAL_I2C_Master_Receive+0x454>
      if (hi2c->XferSize <= 3U)
 80045ce:	d834      	bhi.n	800463a <HAL_I2C_Master_Receive+0x27a>
        if (hi2c->XferSize == 1U)
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	f000 811b 	beq.w	800480c <HAL_I2C_Master_Receive+0x44c>
        else if (hi2c->XferSize == 2U)
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	f040 80b0 	bne.w	800473c <HAL_I2C_Master_Receive+0x37c>
 80045dc:	1c7a      	adds	r2, r7, #1
 80045de:	f040 8106 	bne.w	80047ee <HAL_I2C_Master_Receive+0x42e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045e2:	6963      	ldr	r3, [r4, #20]
 80045e4:	075b      	lsls	r3, r3, #29
 80045e6:	d5fc      	bpl.n	80045e2 <HAL_I2C_Master_Receive+0x222>
 80045e8:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ea:	682b      	ldr	r3, [r5, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ec:	6a69      	ldr	r1, [r5, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f4:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80045fa:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29b      	uxth	r3, r3
 8004600:	856b      	strh	r3, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004602:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004604:	3301      	adds	r3, #1
 8004606:	626b      	str	r3, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8004608:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800460a:	3b01      	subs	r3, #1
 800460c:	852b      	strh	r3, [r5, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800460e:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004610:	682b      	ldr	r3, [r5, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004616:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8004618:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          hi2c->XferSize--;
 800461a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 800461c:	3a01      	subs	r2, #1
 800461e:	b292      	uxth	r2, r2
 8004620:	856a      	strh	r2, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004622:	6a6a      	ldr	r2, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8004624:	3b01      	subs	r3, #1
 8004626:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8004628:	3201      	adds	r2, #1
          hi2c->XferSize--;
 800462a:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->pBuffPtr++;
 800462c:	626a      	str	r2, [r5, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 800462e:	2b00      	cmp	r3, #0
 8004630:	f43f af40 	beq.w	80044b4 <HAL_I2C_Master_Receive+0xf4>
      if (hi2c->XferSize <= 3U)
 8004634:	2b03      	cmp	r3, #3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004636:	682c      	ldr	r4, [r5, #0]
      if (hi2c->XferSize <= 3U)
 8004638:	d9ca      	bls.n	80045d0 <HAL_I2C_Master_Receive+0x210>
 800463a:	b957      	cbnz	r7, 8004652 <HAL_I2C_Master_Receive+0x292>
 800463c:	e048      	b.n	80046d0 <HAL_I2C_Master_Receive+0x310>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800463e:	6963      	ldr	r3, [r4, #20]
 8004640:	06da      	lsls	r2, r3, #27
 8004642:	f100 80fa 	bmi.w	800483a <HAL_I2C_Master_Receive+0x47a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004646:	f7ff f853 	bl	80036f0 <HAL_GetTick>
 800464a:	1b80      	subs	r0, r0, r6
 800464c:	4287      	cmp	r7, r0
 800464e:	d348      	bcc.n	80046e2 <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004650:	682c      	ldr	r4, [r5, #0]
 8004652:	6963      	ldr	r3, [r4, #20]
 8004654:	0659      	lsls	r1, r3, #25
 8004656:	d5f2      	bpl.n	800463e <HAL_I2C_Master_Receive+0x27e>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004658:	6922      	ldr	r2, [r4, #16]
 800465a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800465c:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 800465e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004660:	6829      	ldr	r1, [r5, #0]
        hi2c->XferCount--;
 8004662:	3b01      	subs	r3, #1
 8004664:	b29b      	uxth	r3, r3
 8004666:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 8004668:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 800466a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800466c:	6948      	ldr	r0, [r1, #20]
        hi2c->XferSize--;
 800466e:	3b01      	subs	r3, #1
 8004670:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8004672:	1c54      	adds	r4, r2, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004674:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8004676:	852b      	strh	r3, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004678:	626c      	str	r4, [r5, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800467a:	d5d8      	bpl.n	800462e <HAL_I2C_Master_Receive+0x26e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467c:	690b      	ldr	r3, [r1, #16]
 800467e:	7053      	strb	r3, [r2, #1]
 8004680:	e7ca      	b.n	8004618 <HAL_I2C_Master_Receive+0x258>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004682:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004684:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004686:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004688:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800468c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004690:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004692:	6829      	ldr	r1, [r5, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004694:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8004698:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800469c:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800469e:	680b      	ldr	r3, [r1, #0]
 80046a0:	05dc      	lsls	r4, r3, #23
 80046a2:	f140 808a 	bpl.w	80047ba <HAL_I2C_Master_Receive+0x3fa>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046a6:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 80046aa:	2001      	movs	r0, #1
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046ac:	642b      	str	r3, [r5, #64]	; 0x40
 80046ae:	e698      	b.n	80043e2 <HAL_I2C_Master_Receive+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046b0:	6963      	ldr	r3, [r4, #20]
 80046b2:	0798      	lsls	r0, r3, #30
 80046b4:	f53f aef0 	bmi.w	8004498 <HAL_I2C_Master_Receive+0xd8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046b8:	6963      	ldr	r3, [r4, #20]
 80046ba:	0558      	lsls	r0, r3, #21
 80046bc:	f53f af59 	bmi.w	8004572 <HAL_I2C_Master_Receive+0x1b2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c0:	f7ff f816 	bl	80036f0 <HAL_GetTick>
 80046c4:	1b83      	subs	r3, r0, r6
 80046c6:	429f      	cmp	r7, r3
 80046c8:	d30b      	bcc.n	80046e2 <HAL_I2C_Master_Receive+0x322>
 80046ca:	b157      	cbz	r7, 80046e2 <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046cc:	682c      	ldr	r4, [r5, #0]
 80046ce:	e6da      	b.n	8004486 <HAL_I2C_Master_Receive+0xc6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046d0:	6963      	ldr	r3, [r4, #20]
 80046d2:	065b      	lsls	r3, r3, #25
 80046d4:	d4c0      	bmi.n	8004658 <HAL_I2C_Master_Receive+0x298>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046d6:	6963      	ldr	r3, [r4, #20]
 80046d8:	06da      	lsls	r2, r3, #27
 80046da:	f100 80ae 	bmi.w	800483a <HAL_I2C_Master_Receive+0x47a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046de:	f7ff f807 	bl	80036f0 <HAL_GetTick>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046e2:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80046e4:	2320      	movs	r3, #32
          return HAL_ERROR;
 80046e6:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046e8:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046ea:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046ee:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046f2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80046f4:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046f8:	f043 0320 	orr.w	r3, r3, #32
 80046fc:	642b      	str	r3, [r5, #64]	; 0x40
}
 80046fe:	b007      	add	sp, #28
 8004700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004704:	6963      	ldr	r3, [r4, #20]
 8004706:	071b      	lsls	r3, r3, #28
 8004708:	f53f af01 	bmi.w	800450e <HAL_I2C_Master_Receive+0x14e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800470c:	6963      	ldr	r3, [r4, #20]
 800470e:	055b      	lsls	r3, r3, #21
 8004710:	f53f af2f 	bmi.w	8004572 <HAL_I2C_Master_Receive+0x1b2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004714:	f7fe ffec 	bl	80036f0 <HAL_GetTick>
 8004718:	1b83      	subs	r3, r0, r6
 800471a:	429f      	cmp	r7, r3
 800471c:	d3e1      	bcc.n	80046e2 <HAL_I2C_Master_Receive+0x322>
 800471e:	2f00      	cmp	r7, #0
 8004720:	d0df      	beq.n	80046e2 <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004722:	682c      	ldr	r4, [r5, #0]
 8004724:	e6ea      	b.n	80044fc <HAL_I2C_Master_Receive+0x13c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004726:	6963      	ldr	r3, [r4, #20]
 8004728:	075b      	lsls	r3, r3, #29
 800472a:	d40c      	bmi.n	8004746 <HAL_I2C_Master_Receive+0x386>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472c:	f7fe ffe0 	bl	80036f0 <HAL_GetTick>
 8004730:	1b80      	subs	r0, r0, r6
 8004732:	4287      	cmp	r7, r0
 8004734:	d3d5      	bcc.n	80046e2 <HAL_I2C_Master_Receive+0x322>
 8004736:	2f00      	cmp	r7, #0
 8004738:	d0d3      	beq.n	80046e2 <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800473a:	682c      	ldr	r4, [r5, #0]
 800473c:	1c79      	adds	r1, r7, #1
 800473e:	d1f2      	bne.n	8004726 <HAL_I2C_Master_Receive+0x366>
 8004740:	6963      	ldr	r3, [r4, #20]
 8004742:	075a      	lsls	r2, r3, #29
 8004744:	d5fc      	bpl.n	8004740 <HAL_I2C_Master_Receive+0x380>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800474c:	6023      	str	r3, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800474e:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004750:	682b      	ldr	r3, [r5, #0]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004756:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004758:	f8d9 3000 	ldr.w	r3, [r9]
          hi2c->pBuffPtr++;
 800475c:	6a69      	ldr	r1, [r5, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800475e:	08db      	lsrs	r3, r3, #3
 8004760:	fba8 2303 	umull	r2, r3, r8, r3
          hi2c->XferCount--;
 8004764:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004766:	0a1b      	lsrs	r3, r3, #8
 8004768:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 800476c:	3a01      	subs	r2, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800476e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->XferCount--;
 8004772:	b292      	uxth	r2, r2
 8004774:	856a      	strh	r2, [r5, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004776:	9300      	str	r3, [sp, #0]
          hi2c->XferSize--;
 8004778:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800477a:	3b01      	subs	r3, #1
 800477c:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->pBuffPtr++;
 800477e:	1c4b      	adds	r3, r1, #1
 8004780:	626b      	str	r3, [r5, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004782:	e003      	b.n	800478c <HAL_I2C_Master_Receive+0x3cc>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	695a      	ldr	r2, [r3, #20]
 8004788:	0750      	lsls	r0, r2, #29
 800478a:	d468      	bmi.n	800485e <HAL_I2C_Master_Receive+0x49e>
            count--;
 800478c:	9b00      	ldr	r3, [sp, #0]
 800478e:	3b01      	subs	r3, #1
 8004790:	9300      	str	r3, [sp, #0]
            if (count == 0U)
 8004792:	9b00      	ldr	r3, [sp, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1f5      	bne.n	8004784 <HAL_I2C_Master_Receive+0x3c4>
              hi2c->State               = HAL_I2C_STATE_READY;
 8004798:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 800479a:	632b      	str	r3, [r5, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800479c:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047a4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80047a6:	f042 0220 	orr.w	r2, r2, #32
 80047aa:	642a      	str	r2, [r5, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80047ac:	b662      	cpsie	i
              return HAL_ERROR;
 80047ae:	2001      	movs	r0, #1
              __HAL_UNLOCK(hi2c);
 80047b0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80047b4:	b007      	add	sp, #28
 80047b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return HAL_ERROR;
 80047ba:	2001      	movs	r0, #1
 80047bc:	e611      	b.n	80043e2 <HAL_I2C_Master_Receive+0x22>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047be:	6823      	ldr	r3, [r4, #0]
 80047c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80047c4:	6023      	str	r3, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80047c6:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047c8:	2200      	movs	r2, #0
 80047ca:	682b      	ldr	r3, [r5, #0]
 80047cc:	9203      	str	r2, [sp, #12]
 80047ce:	695a      	ldr	r2, [r3, #20]
 80047d0:	9203      	str	r2, [sp, #12]
 80047d2:	699a      	ldr	r2, [r3, #24]
 80047d4:	9203      	str	r2, [sp, #12]
 80047d6:	9a03      	ldr	r2, [sp, #12]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80047e0:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 80047e2:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f43f ae65 	beq.w	80044b4 <HAL_I2C_Master_Receive+0xf4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ea:	682c      	ldr	r4, [r5, #0]
 80047ec:	e6ea      	b.n	80045c4 <HAL_I2C_Master_Receive+0x204>
 80047ee:	6963      	ldr	r3, [r4, #20]
 80047f0:	0758      	lsls	r0, r3, #29
 80047f2:	f53f aef9 	bmi.w	80045e8 <HAL_I2C_Master_Receive+0x228>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f6:	f7fe ff7b 	bl	80036f0 <HAL_GetTick>
 80047fa:	1b80      	subs	r0, r0, r6
 80047fc:	4287      	cmp	r7, r0
 80047fe:	f4ff af70 	bcc.w	80046e2 <HAL_I2C_Master_Receive+0x322>
 8004802:	2f00      	cmp	r7, #0
 8004804:	f43f af6d 	beq.w	80046e2 <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004808:	682c      	ldr	r4, [r5, #0]
 800480a:	e6e7      	b.n	80045dc <HAL_I2C_Master_Receive+0x21c>
 800480c:	b977      	cbnz	r7, 800482c <HAL_I2C_Master_Receive+0x46c>
 800480e:	e02d      	b.n	800486c <HAL_I2C_Master_Receive+0x4ac>
 8004810:	20000140 	.word	0x20000140
 8004814:	14f8b589 	.word	0x14f8b589
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004818:	6963      	ldr	r3, [r4, #20]
 800481a:	06d8      	lsls	r0, r3, #27
 800481c:	d40d      	bmi.n	800483a <HAL_I2C_Master_Receive+0x47a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481e:	f7fe ff67 	bl	80036f0 <HAL_GetTick>
 8004822:	1b80      	subs	r0, r0, r6
 8004824:	4287      	cmp	r7, r0
 8004826:	f4ff af5c 	bcc.w	80046e2 <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800482a:	682c      	ldr	r4, [r5, #0]
 800482c:	6963      	ldr	r3, [r4, #20]
 800482e:	065b      	lsls	r3, r3, #25
 8004830:	d5f2      	bpl.n	8004818 <HAL_I2C_Master_Receive+0x458>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004832:	6922      	ldr	r2, [r4, #16]
 8004834:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004836:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004838:	e6ee      	b.n	8004618 <HAL_I2C_Master_Receive+0x258>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800483a:	2300      	movs	r3, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800483c:	f06f 0110 	mvn.w	r1, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8004840:	2220      	movs	r2, #32
          return HAL_ERROR;
 8004842:	2001      	movs	r0, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004844:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004846:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004848:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800484c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004850:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004852:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004856:	642a      	str	r2, [r5, #64]	; 0x40
}
 8004858:	b007      	add	sp, #28
 800485a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004864:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	704b      	strb	r3, [r1, #1]
 800486a:	e6c6      	b.n	80045fa <HAL_I2C_Master_Receive+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800486c:	6963      	ldr	r3, [r4, #20]
 800486e:	0659      	lsls	r1, r3, #25
 8004870:	f57f af31 	bpl.w	80046d6 <HAL_I2C_Master_Receive+0x316>
 8004874:	e7dd      	b.n	8004832 <HAL_I2C_Master_Receive+0x472>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800487c:	6023      	str	r3, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800487e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004880:	2200      	movs	r2, #0
 8004882:	682b      	ldr	r3, [r5, #0]
 8004884:	9202      	str	r2, [sp, #8]
 8004886:	695a      	ldr	r2, [r3, #20]
 8004888:	9202      	str	r2, [sp, #8]
 800488a:	699a      	ldr	r2, [r3, #24]
 800488c:	9202      	str	r2, [sp, #8]
 800488e:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004896:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004898:	b662      	cpsie	i
}
 800489a:	e7a2      	b.n	80047e2 <HAL_I2C_Master_Receive+0x422>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800489c:	6963      	ldr	r3, [r4, #20]
 800489e:	0798      	lsls	r0, r3, #30
 80048a0:	f53f ae41 	bmi.w	8004526 <HAL_I2C_Master_Receive+0x166>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048a4:	6963      	ldr	r3, [r4, #20]
 80048a6:	0558      	lsls	r0, r3, #21
 80048a8:	f53f ae63 	bmi.w	8004572 <HAL_I2C_Master_Receive+0x1b2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ac:	f7fe ff20 	bl	80036f0 <HAL_GetTick>
 80048b0:	1b83      	subs	r3, r0, r6
 80048b2:	429f      	cmp	r7, r3
 80048b4:	f4ff af15 	bcc.w	80046e2 <HAL_I2C_Master_Receive+0x322>
 80048b8:	2f00      	cmp	r7, #0
 80048ba:	f43f af12 	beq.w	80046e2 <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048be:	682c      	ldr	r4, [r5, #0]
 80048c0:	e628      	b.n	8004514 <HAL_I2C_Master_Receive+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048c2:	6963      	ldr	r3, [r4, #20]
 80048c4:	07db      	lsls	r3, r3, #31
 80048c6:	f53f ae3f 	bmi.w	8004548 <HAL_I2C_Master_Receive+0x188>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ca:	f7fe ff11 	bl	80036f0 <HAL_GetTick>
 80048ce:	1b83      	subs	r3, r0, r6
 80048d0:	429f      	cmp	r7, r3
 80048d2:	f4ff aed6 	bcc.w	8004682 <HAL_I2C_Master_Receive+0x2c2>
 80048d6:	2f00      	cmp	r7, #0
 80048d8:	f43f aed3 	beq.w	8004682 <HAL_I2C_Master_Receive+0x2c2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048dc:	682c      	ldr	r4, [r5, #0]
 80048de:	e62d      	b.n	800453c <HAL_I2C_Master_Receive+0x17c>

080048e0 <HAL_I2C_Mem_Write>:
{
 80048e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e4:	4604      	mov	r4, r0
 80048e6:	b083      	sub	sp, #12
 80048e8:	4699      	mov	r9, r3
 80048ea:	460f      	mov	r7, r1
 80048ec:	4690      	mov	r8, r2
 80048ee:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80048f2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 80048f4:	f7fe fefc 	bl	80036f0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d004      	beq.n	800490a <HAL_I2C_Mem_Write+0x2a>
    return HAL_BUSY;
 8004900:	2702      	movs	r7, #2
}
 8004902:	4638      	mov	r0, r7
 8004904:	b003      	add	sp, #12
 8004906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800490a:	4605      	mov	r5, r0
 800490c:	e005      	b.n	800491a <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800490e:	f7fe feef 	bl	80036f0 <HAL_GetTick>
 8004912:	1b40      	subs	r0, r0, r5
 8004914:	2819      	cmp	r0, #25
 8004916:	f200 80c0 	bhi.w	8004a9a <HAL_I2C_Mem_Write+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800491a:	6820      	ldr	r0, [r4, #0]
 800491c:	6983      	ldr	r3, [r0, #24]
 800491e:	ea6f 0c03 	mvn.w	ip, r3
 8004922:	f01c 0b02 	ands.w	fp, ip, #2
 8004926:	d0f2      	beq.n	800490e <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 8004928:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800492c:	2b01      	cmp	r3, #1
 800492e:	d0e7      	beq.n	8004900 <HAL_I2C_Mem_Write+0x20>
 8004930:	2301      	movs	r3, #1
 8004932:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004936:	6803      	ldr	r3, [r0, #0]
 8004938:	07db      	lsls	r3, r3, #31
 800493a:	f140 808e 	bpl.w	8004a5a <HAL_I2C_Mem_Write+0x17a>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800493e:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004940:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004944:	f04f 0c00 	mov.w	ip, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004948:	f04f 0821 	mov.w	r8, #33	; 0x21
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800494c:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800494e:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004950:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004952:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8004956:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8004958:	980c      	ldr	r0, [sp, #48]	; 0x30
 800495a:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800495c:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004960:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004964:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004968:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800496c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004970:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8004972:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004974:	486a      	ldr	r0, [pc, #424]	; (8004b20 <HAL_I2C_Mem_Write+0x240>)
 8004976:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004978:	4620      	mov	r0, r4
 800497a:	f7ff f84b 	bl	8003a14 <I2C_RequestMemoryWrite>
 800497e:	4607      	mov	r7, r0
 8004980:	bb00      	cbnz	r0, 80049c4 <HAL_I2C_Mem_Write+0xe4>
    while (hi2c->XferSize > 0U)
 8004982:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80ba 	beq.w	8004afe <HAL_I2C_Mem_Write+0x21e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	1c71      	adds	r1, r6, #1
 800498e:	d169      	bne.n	8004a64 <HAL_I2C_Mem_Write+0x184>
 8004990:	695a      	ldr	r2, [r3, #20]
 8004992:	0612      	lsls	r2, r2, #24
 8004994:	d41b      	bmi.n	80049ce <HAL_I2C_Mem_Write+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004996:	695a      	ldr	r2, [r3, #20]
 8004998:	0550      	lsls	r0, r2, #21
 800499a:	d5f9      	bpl.n	8004990 <HAL_I2C_Mem_Write+0xb0>
    hi2c->PreviousState       = I2C_STATE_NONE;
 800499c:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800499e:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80049a2:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a4:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80049a6:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049a8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ac:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80049b2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049b6:	f043 0304 	orr.w	r3, r3, #4
 80049ba:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049be:	2b04      	cmp	r3, #4
 80049c0:	f000 808a 	beq.w	8004ad8 <HAL_I2C_Mem_Write+0x1f8>
      return HAL_ERROR;
 80049c4:	2701      	movs	r7, #1
}
 80049c6:	4638      	mov	r0, r7
 80049c8:	b003      	add	sp, #12
 80049ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80049d0:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049d4:	4602      	mov	r2, r0
 80049d6:	f812 eb01 	ldrb.w	lr, [r2], #1
      hi2c->XferSize--;
 80049da:	f10c 31ff 	add.w	r1, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049de:	f8c3 e010 	str.w	lr, [r3, #16]
      hi2c->pBuffPtr++;
 80049e2:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80049e4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80049e6:	b289      	uxth	r1, r1
      hi2c->XferCount--;
 80049e8:	3a01      	subs	r2, #1
 80049ea:	b292      	uxth	r2, r2
 80049ec:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049ee:	695a      	ldr	r2, [r3, #20]
      hi2c->XferSize--;
 80049f0:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049f2:	0752      	lsls	r2, r2, #29
 80049f4:	d52e      	bpl.n	8004a54 <HAL_I2C_Mem_Write+0x174>
 80049f6:	bb09      	cbnz	r1, 8004a3c <HAL_I2C_Mem_Write+0x15c>
 80049f8:	1c72      	adds	r2, r6, #1
 80049fa:	d174      	bne.n	8004ae6 <HAL_I2C_Mem_Write+0x206>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049fc:	695a      	ldr	r2, [r3, #20]
 80049fe:	0750      	lsls	r0, r2, #29
 8004a00:	d45d      	bmi.n	8004abe <HAL_I2C_Mem_Write+0x1de>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a02:	695a      	ldr	r2, [r3, #20]
 8004a04:	0551      	lsls	r1, r2, #21
 8004a06:	d5f9      	bpl.n	80049fc <HAL_I2C_Mem_Write+0x11c>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a08:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a0a:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a0e:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a10:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a12:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a14:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a18:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004a1e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a22:	f043 0304 	orr.w	r3, r3, #4
 8004a26:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d1ca      	bne.n	80049c4 <HAL_I2C_Mem_Write+0xe4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2e:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 8004a30:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a32:	6813      	ldr	r3, [r2, #0]
 8004a34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	e762      	b.n	8004902 <HAL_I2C_Mem_Write+0x22>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a3c:	7842      	ldrb	r2, [r0, #1]
        hi2c->XferSize--;
 8004a3e:	f1ac 0102 	sub.w	r1, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a42:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8004a44:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8004a46:	b289      	uxth	r1, r1
        hi2c->XferCount--;
 8004a48:	3a01      	subs	r2, #1
        hi2c->pBuffPtr++;
 8004a4a:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8004a4c:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8004a4e:	6260      	str	r0, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8004a50:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004a52:	8562      	strh	r2, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a54:	2900      	cmp	r1, #0
 8004a56:	d199      	bne.n	800498c <HAL_I2C_Mem_Write+0xac>
 8004a58:	e7ce      	b.n	80049f8 <HAL_I2C_Mem_Write+0x118>
      __HAL_I2C_ENABLE(hi2c);
 8004a5a:	6803      	ldr	r3, [r0, #0]
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	6003      	str	r3, [r0, #0]
 8004a62:	e76c      	b.n	800493e <HAL_I2C_Mem_Write+0x5e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a64:	695a      	ldr	r2, [r3, #20]
 8004a66:	0611      	lsls	r1, r2, #24
 8004a68:	d4b1      	bmi.n	80049ce <HAL_I2C_Mem_Write+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a6a:	695a      	ldr	r2, [r3, #20]
 8004a6c:	0550      	lsls	r0, r2, #21
 8004a6e:	d495      	bmi.n	800499c <HAL_I2C_Mem_Write+0xbc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a70:	f7fe fe3e 	bl	80036f0 <HAL_GetTick>
 8004a74:	1b40      	subs	r0, r0, r5
 8004a76:	4286      	cmp	r6, r0
 8004a78:	d301      	bcc.n	8004a7e <HAL_I2C_Mem_Write+0x19e>
 8004a7a:	2e00      	cmp	r6, #0
 8004a7c:	d185      	bne.n	800498a <HAL_I2C_Mem_Write+0xaa>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a7e:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a80:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a82:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a88:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004a8e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a92:	f043 0320 	orr.w	r3, r3, #32
 8004a96:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004a98:	e790      	b.n	80049bc <HAL_I2C_Mem_Write+0xdc>
      return HAL_BUSY;
 8004a9a:	2702      	movs	r7, #2
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a9c:	2320      	movs	r3, #32
}
 8004a9e:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004aa0:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004aa4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004aa8:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004aac:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004aae:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ab2:	f043 0320 	orr.w	r3, r3, #32
 8004ab6:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004ab8:	b003      	add	sp, #12
 8004aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004abe:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004ac0:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004aca:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004ace:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad2:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 8004ad6:	e714      	b.n	8004902 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad8:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 8004ada:	2701      	movs	r7, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004adc:	6813      	ldr	r3, [r2, #0]
 8004ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	e70d      	b.n	8004902 <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ae6:	695a      	ldr	r2, [r3, #20]
 8004ae8:	0752      	lsls	r2, r2, #29
 8004aea:	d4e8      	bmi.n	8004abe <HAL_I2C_Mem_Write+0x1de>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aec:	695a      	ldr	r2, [r3, #20]
 8004aee:	0551      	lsls	r1, r2, #21
 8004af0:	d48a      	bmi.n	8004a08 <HAL_I2C_Mem_Write+0x128>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af2:	f7fe fdfd 	bl	80036f0 <HAL_GetTick>
 8004af6:	1b43      	subs	r3, r0, r5
 8004af8:	429e      	cmp	r6, r3
 8004afa:	d302      	bcc.n	8004b02 <HAL_I2C_Mem_Write+0x222>
 8004afc:	b10e      	cbz	r6, 8004b02 <HAL_I2C_Mem_Write+0x222>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	e77a      	b.n	80049f8 <HAL_I2C_Mem_Write+0x118>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b02:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b04:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b06:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b0c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b10:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004b12:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b16:	f043 0320 	orr.w	r3, r3, #32
 8004b1a:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004b1c:	e784      	b.n	8004a28 <HAL_I2C_Mem_Write+0x148>
 8004b1e:	bf00      	nop
 8004b20:	ffff0000 	.word	0xffff0000

08004b24 <HAL_I2C_Mem_Read>:
{
 8004b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint32_t count = 0U;
 8004b28:	2400      	movs	r4, #0
{
 8004b2a:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8004b2c:	9403      	str	r4, [sp, #12]
{
 8004b2e:	4604      	mov	r4, r0
 8004b30:	4699      	mov	r9, r3
 8004b32:	460f      	mov	r7, r1
 8004b34:	4690      	mov	r8, r2
 8004b36:	f8bd a04c 	ldrh.w	sl, [sp, #76]	; 0x4c
 8004b3a:	9e14      	ldr	r6, [sp, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
 8004b3c:	f7fe fdd8 	bl	80036f0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b40:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004b44:	2b20      	cmp	r3, #32
 8004b46:	d004      	beq.n	8004b52 <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 8004b48:	2702      	movs	r7, #2
}
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	b009      	add	sp, #36	; 0x24
 8004b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b52:	4605      	mov	r5, r0
 8004b54:	e005      	b.n	8004b62 <HAL_I2C_Mem_Read+0x3e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b56:	f7fe fdcb 	bl	80036f0 <HAL_GetTick>
 8004b5a:	1b40      	subs	r0, r0, r5
 8004b5c:	2819      	cmp	r0, #25
 8004b5e:	f200 80c1 	bhi.w	8004ce4 <HAL_I2C_Mem_Read+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b62:	6820      	ldr	r0, [r4, #0]
 8004b64:	6983      	ldr	r3, [r0, #24]
 8004b66:	ea6f 0c03 	mvn.w	ip, r3
 8004b6a:	f01c 0b02 	ands.w	fp, ip, #2
 8004b6e:	d0f2      	beq.n	8004b56 <HAL_I2C_Mem_Read+0x32>
    __HAL_LOCK(hi2c);
 8004b70:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d0e7      	beq.n	8004b48 <HAL_I2C_Mem_Read+0x24>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b7e:	6803      	ldr	r3, [r0, #0]
 8004b80:	07d9      	lsls	r1, r3, #31
 8004b82:	d539      	bpl.n	8004bf8 <HAL_I2C_Mem_Read+0xd4>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b84:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b86:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b8a:	f04f 0c00 	mov.w	ip, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b8e:	f04f 0822 	mov.w	r8, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b92:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b94:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b96:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b98:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8004b9c:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8004b9e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004ba0:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ba2:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ba6:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004baa:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bae:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004bb2:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bb6:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8004bb8:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bba:	489c      	ldr	r0, [pc, #624]	; (8004e2c <HAL_I2C_Mem_Read+0x308>)
 8004bbc:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f7ff f846 	bl	8003c50 <I2C_RequestMemoryRead>
 8004bc4:	4607      	mov	r7, r0
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	f040 809e 	bne.w	8004d08 <HAL_I2C_Mem_Read+0x1e4>
    if (hi2c->XferSize == 0U)
 8004bcc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004bce:	b9c2      	cbnz	r2, 8004c02 <HAL_I2C_Mem_Read+0xde>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	9004      	str	r0, [sp, #16]
 8004bd4:	695a      	ldr	r2, [r3, #20]
 8004bd6:	9204      	str	r2, [sp, #16]
 8004bd8:	699a      	ldr	r2, [r3, #24]
 8004bda:	9204      	str	r2, [sp, #16]
 8004bdc:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be4:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004be8:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8004bea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8004bee:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8004bf6:	e7a8      	b.n	8004b4a <HAL_I2C_Mem_Read+0x26>
      __HAL_I2C_ENABLE(hi2c);
 8004bf8:	6803      	ldr	r3, [r0, #0]
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	6003      	str	r3, [r0, #0]
 8004c00:	e7c0      	b.n	8004b84 <HAL_I2C_Mem_Read+0x60>
    else if (hi2c->XferSize == 1U)
 8004c02:	2a01      	cmp	r2, #1
 8004c04:	f000 8143 	beq.w	8004e8e <HAL_I2C_Mem_Read+0x36a>
    else if (hi2c->XferSize == 2U)
 8004c08:	2a02      	cmp	r2, #2
 8004c0a:	f000 80cd 	beq.w	8004da8 <HAL_I2C_Mem_Read+0x284>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	6819      	ldr	r1, [r3, #0]
 8004c12:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8004c16:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c18:	9007      	str	r0, [sp, #28]
 8004c1a:	6959      	ldr	r1, [r3, #20]
 8004c1c:	9107      	str	r1, [sp, #28]
 8004c1e:	6999      	ldr	r1, [r3, #24]
 8004c20:	9107      	str	r1, [sp, #28]
 8004c22:	9907      	ldr	r1, [sp, #28]
      if (hi2c->XferSize <= 3U)
 8004c24:	2a03      	cmp	r2, #3
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c26:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8004e30 <HAL_I2C_Mem_Read+0x30c>
 8004c2a:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8004e34 <HAL_I2C_Mem_Read+0x310>
      if (hi2c->XferSize <= 3U)
 8004c2e:	d832      	bhi.n	8004c96 <HAL_I2C_Mem_Read+0x172>
        if (hi2c->XferSize == 1U)
 8004c30:	2a01      	cmp	r2, #1
 8004c32:	f000 80f8 	beq.w	8004e26 <HAL_I2C_Mem_Read+0x302>
        else if (hi2c->XferSize == 2U)
 8004c36:	2a02      	cmp	r2, #2
 8004c38:	d176      	bne.n	8004d28 <HAL_I2C_Mem_Read+0x204>
 8004c3a:	1c71      	adds	r1, r6, #1
 8004c3c:	f040 80cc 	bne.w	8004dd8 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c40:	695a      	ldr	r2, [r3, #20]
 8004c42:	0752      	lsls	r2, r2, #29
 8004c44:	d5fc      	bpl.n	8004c40 <HAL_I2C_Mem_Read+0x11c>
  __ASM volatile ("cpsid i" : : : "memory");
 8004c46:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c48:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c52:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8004c58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c62:	3301      	adds	r3, #1
 8004c64:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004c66:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	8523      	strh	r3, [r4, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004c6c:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c74:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8004c76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8004c78:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004c80:	6a63      	ldr	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004c82:	3a01      	subs	r2, #1
 8004c84:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8004c86:	3301      	adds	r3, #1
          hi2c->XferSize--;
 8004c88:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8004c8a:	6263      	str	r3, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 8004c8c:	2a00      	cmp	r2, #0
 8004c8e:	d0aa      	beq.n	8004be6 <HAL_I2C_Mem_Read+0xc2>
      if (hi2c->XferSize <= 3U)
 8004c90:	2a03      	cmp	r2, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c92:	6823      	ldr	r3, [r4, #0]
      if (hi2c->XferSize <= 3U)
 8004c94:	d9cc      	bls.n	8004c30 <HAL_I2C_Mem_Read+0x10c>
 8004c96:	b95e      	cbnz	r6, 8004cb0 <HAL_I2C_Mem_Read+0x18c>
 8004c98:	e0aa      	b.n	8004df0 <HAL_I2C_Mem_Read+0x2cc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c9a:	695a      	ldr	r2, [r3, #20]
 8004c9c:	06d0      	lsls	r0, r2, #27
 8004c9e:	f100 80d8 	bmi.w	8004e52 <HAL_I2C_Mem_Read+0x32e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca2:	f7fe fd25 	bl	80036f0 <HAL_GetTick>
 8004ca6:	1b40      	subs	r0, r0, r5
 8004ca8:	4286      	cmp	r6, r0
 8004caa:	f0c0 80aa 	bcc.w	8004e02 <HAL_I2C_Mem_Read+0x2de>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	695a      	ldr	r2, [r3, #20]
 8004cb2:	0652      	lsls	r2, r2, #25
 8004cb4:	d5f1      	bpl.n	8004c9a <HAL_I2C_Mem_Read+0x176>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cba:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8004cbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cbe:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8004cc4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004cc6:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cc8:	6948      	ldr	r0, [r1, #20]
        hi2c->pBuffPtr++;
 8004cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8004ccc:	3a01      	subs	r2, #1
 8004cce:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8004cd0:	f103 0c01 	add.w	ip, r3, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cd4:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8004cd6:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004cd8:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cdc:	d5d6      	bpl.n	8004c8c <HAL_I2C_Mem_Read+0x168>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cde:	690a      	ldr	r2, [r1, #16]
 8004ce0:	705a      	strb	r2, [r3, #1]
 8004ce2:	e7c8      	b.n	8004c76 <HAL_I2C_Mem_Read+0x152>
      return HAL_BUSY;
 8004ce4:	2702      	movs	r7, #2
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ce6:	2320      	movs	r3, #32
}
 8004ce8:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004cea:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cf2:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004cf8:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cfc:	f043 0320 	orr.w	r3, r3, #32
 8004d00:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004d02:	b009      	add	sp, #36	; 0x24
 8004d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return HAL_ERROR;
 8004d08:	2701      	movs	r7, #1
}
 8004d0a:	4638      	mov	r0, r7
 8004d0c:	b009      	add	sp, #36	; 0x24
 8004d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d12:	695a      	ldr	r2, [r3, #20]
 8004d14:	0752      	lsls	r2, r2, #29
 8004d16:	d40c      	bmi.n	8004d32 <HAL_I2C_Mem_Read+0x20e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d18:	f7fe fcea 	bl	80036f0 <HAL_GetTick>
 8004d1c:	1b40      	subs	r0, r0, r5
 8004d1e:	4286      	cmp	r6, r0
 8004d20:	d36f      	bcc.n	8004e02 <HAL_I2C_Mem_Read+0x2de>
 8004d22:	2e00      	cmp	r6, #0
 8004d24:	d06d      	beq.n	8004e02 <HAL_I2C_Mem_Read+0x2de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	1c70      	adds	r0, r6, #1
 8004d2a:	d1f2      	bne.n	8004d12 <HAL_I2C_Mem_Read+0x1ee>
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	0751      	lsls	r1, r2, #29
 8004d30:	d5fc      	bpl.n	8004d2c <HAL_I2C_Mem_Read+0x208>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d3a:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d42:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d44:	f8d9 3000 	ldr.w	r3, [r9]
          hi2c->pBuffPtr++;
 8004d48:	6a61      	ldr	r1, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d4a:	08db      	lsrs	r3, r3, #3
 8004d4c:	fba8 2303 	umull	r2, r3, r8, r3
          hi2c->XferCount--;
 8004d50:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d52:	0a1b      	lsrs	r3, r3, #8
 8004d54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 8004d58:	3a01      	subs	r2, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d5a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->XferCount--;
 8004d5e:	b292      	uxth	r2, r2
 8004d60:	8562      	strh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d62:	9303      	str	r3, [sp, #12]
          hi2c->XferSize--;
 8004d64:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004d66:	3b01      	subs	r3, #1
 8004d68:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8004d6a:	1c4b      	adds	r3, r1, #1
 8004d6c:	6263      	str	r3, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d6e:	e003      	b.n	8004d78 <HAL_I2C_Mem_Read+0x254>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	695a      	ldr	r2, [r3, #20]
 8004d74:	0750      	lsls	r0, r2, #29
 8004d76:	d47f      	bmi.n	8004e78 <HAL_I2C_Mem_Read+0x354>
            count--;
 8004d78:	9b03      	ldr	r3, [sp, #12]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8004d7e:	9b03      	ldr	r3, [sp, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f5      	bne.n	8004d70 <HAL_I2C_Mem_Read+0x24c>
              hi2c->State               = HAL_I2C_STATE_READY;
 8004d84:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004d86:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004d88:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d8c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004d92:	f042 0220 	orr.w	r2, r2, #32
 8004d96:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004d98:	b662      	cpsie	i
              return HAL_ERROR;
 8004d9a:	2701      	movs	r7, #1
}
 8004d9c:	4638      	mov	r0, r7
              __HAL_UNLOCK(hi2c);
 8004d9e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004da2:	b009      	add	sp, #36	; 0x24
 8004da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004da8:	6822      	ldr	r2, [r4, #0]
 8004daa:	6813      	ldr	r3, [r2, #0]
 8004dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004db0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004db2:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004db4:	6823      	ldr	r3, [r4, #0]
 8004db6:	9006      	str	r0, [sp, #24]
 8004db8:	695a      	ldr	r2, [r3, #20]
 8004dba:	9206      	str	r2, [sp, #24]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	9206      	str	r2, [sp, #24]
 8004dc0:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004dca:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 8004dcc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004dce:	2a00      	cmp	r2, #0
 8004dd0:	f43f af09 	beq.w	8004be6 <HAL_I2C_Mem_Read+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	e725      	b.n	8004c24 <HAL_I2C_Mem_Read+0x100>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	075b      	lsls	r3, r3, #29
 8004ddc:	f53f af33 	bmi.w	8004c46 <HAL_I2C_Mem_Read+0x122>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de0:	f7fe fc86 	bl	80036f0 <HAL_GetTick>
 8004de4:	1b40      	subs	r0, r0, r5
 8004de6:	4286      	cmp	r6, r0
 8004de8:	d30b      	bcc.n	8004e02 <HAL_I2C_Mem_Read+0x2de>
 8004dea:	b156      	cbz	r6, 8004e02 <HAL_I2C_Mem_Read+0x2de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	e724      	b.n	8004c3a <HAL_I2C_Mem_Read+0x116>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004df0:	695a      	ldr	r2, [r3, #20]
 8004df2:	0652      	lsls	r2, r2, #25
 8004df4:	f53f af5f 	bmi.w	8004cb6 <HAL_I2C_Mem_Read+0x192>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004df8:	695a      	ldr	r2, [r3, #20]
 8004dfa:	06d1      	lsls	r1, r2, #27
 8004dfc:	d429      	bmi.n	8004e52 <HAL_I2C_Mem_Read+0x32e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfe:	f7fe fc77 	bl	80036f0 <HAL_GetTick>
          return HAL_ERROR;
 8004e02:	2701      	movs	r7, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e04:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e06:	2320      	movs	r3, #32
}
 8004e08:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e0a:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e10:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e14:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004e16:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e1a:	f043 0320 	orr.w	r3, r3, #32
 8004e1e:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004e20:	b009      	add	sp, #36	; 0x24
 8004e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e26:	b96e      	cbnz	r6, 8004e44 <HAL_I2C_Mem_Read+0x320>
 8004e28:	e02d      	b.n	8004e86 <HAL_I2C_Mem_Read+0x362>
 8004e2a:	bf00      	nop
 8004e2c:	ffff0000 	.word	0xffff0000
 8004e30:	20000140 	.word	0x20000140
 8004e34:	14f8b589 	.word	0x14f8b589
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e38:	f7fe fc5a 	bl	80036f0 <HAL_GetTick>
 8004e3c:	1b40      	subs	r0, r0, r5
 8004e3e:	4286      	cmp	r6, r0
 8004e40:	d3df      	bcc.n	8004e02 <HAL_I2C_Mem_Read+0x2de>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	695a      	ldr	r2, [r3, #20]
 8004e46:	0651      	lsls	r1, r2, #25
 8004e48:	f53f af12 	bmi.w	8004c70 <HAL_I2C_Mem_Read+0x14c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e4c:	695a      	ldr	r2, [r3, #20]
 8004e4e:	06d2      	lsls	r2, r2, #27
 8004e50:	d5f2      	bpl.n	8004e38 <HAL_I2C_Mem_Read+0x314>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e52:	f06f 0010 	mvn.w	r0, #16
          return HAL_ERROR;
 8004e56:	2701      	movs	r7, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e58:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e5a:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e5c:	6158      	str	r0, [r3, #20]
}
 8004e5e:	4638      	mov	r0, r7
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e60:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e62:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e66:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004e6c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e70:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004e72:	b009      	add	sp, #36	; 0x24
 8004e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	704b      	strb	r3, [r1, #1]
 8004e84:	e6e8      	b.n	8004c58 <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e86:	695a      	ldr	r2, [r3, #20]
 8004e88:	0650      	lsls	r0, r2, #25
 8004e8a:	d5b5      	bpl.n	8004df8 <HAL_I2C_Mem_Read+0x2d4>
 8004e8c:	e6f0      	b.n	8004c70 <HAL_I2C_Mem_Read+0x14c>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e8e:	6822      	ldr	r2, [r4, #0]
 8004e90:	6813      	ldr	r3, [r2, #0]
 8004e92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e96:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e98:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	9005      	str	r0, [sp, #20]
 8004e9e:	695a      	ldr	r2, [r3, #20]
 8004ea0:	9205      	str	r2, [sp, #20]
 8004ea2:	699a      	ldr	r2, [r3, #24]
 8004ea4:	9205      	str	r2, [sp, #20]
 8004ea6:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004eb0:	b662      	cpsie	i
}
 8004eb2:	e78b      	b.n	8004dcc <HAL_I2C_Mem_Read+0x2a8>

08004eb4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	f000 81b6 	beq.w	8005226 <HAL_RCC_OscConfig+0x372>
{
 8004eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ebe:	6803      	ldr	r3, [r0, #0]
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	07dd      	lsls	r5, r3, #31
{
 8004ec4:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ec6:	d535      	bpl.n	8004f34 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ec8:	499a      	ldr	r1, [pc, #616]	; (8005134 <HAL_RCC_OscConfig+0x280>)
 8004eca:	684a      	ldr	r2, [r1, #4]
 8004ecc:	f002 020c 	and.w	r2, r2, #12
 8004ed0:	2a04      	cmp	r2, #4
 8004ed2:	f000 80ef 	beq.w	80050b4 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ed6:	684a      	ldr	r2, [r1, #4]
 8004ed8:	f002 020c 	and.w	r2, r2, #12
 8004edc:	2a08      	cmp	r2, #8
 8004ede:	f000 80e5 	beq.w	80050ac <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ee2:	6863      	ldr	r3, [r4, #4]
 8004ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee8:	d010      	beq.n	8004f0c <HAL_RCC_OscConfig+0x58>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 810c 	beq.w	8005108 <HAL_RCC_OscConfig+0x254>
 8004ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ef4:	f000 8182 	beq.w	80051fc <HAL_RCC_OscConfig+0x348>
 8004ef8:	4b8e      	ldr	r3, [pc, #568]	; (8005134 <HAL_RCC_OscConfig+0x280>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	e004      	b.n	8004f16 <HAL_RCC_OscConfig+0x62>
 8004f0c:	4a89      	ldr	r2, [pc, #548]	; (8005134 <HAL_RCC_OscConfig+0x280>)
 8004f0e:	6813      	ldr	r3, [r2, #0]
 8004f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f14:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f16:	f7fe fbeb 	bl	80036f0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1a:	4e86      	ldr	r6, [pc, #536]	; (8005134 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8004f1c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1e:	e005      	b.n	8004f2c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f20:	f7fe fbe6 	bl	80036f0 <HAL_GetTick>
 8004f24:	1b40      	subs	r0, r0, r5
 8004f26:	2864      	cmp	r0, #100	; 0x64
 8004f28:	f200 80ea 	bhi.w	8005100 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f2c:	6833      	ldr	r3, [r6, #0]
 8004f2e:	039a      	lsls	r2, r3, #14
 8004f30:	d5f6      	bpl.n	8004f20 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	079f      	lsls	r7, r3, #30
 8004f36:	d528      	bpl.n	8004f8a <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f38:	4a7e      	ldr	r2, [pc, #504]	; (8005134 <HAL_RCC_OscConfig+0x280>)
 8004f3a:	6851      	ldr	r1, [r2, #4]
 8004f3c:	f011 0f0c 	tst.w	r1, #12
 8004f40:	f000 808d 	beq.w	800505e <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f44:	6851      	ldr	r1, [r2, #4]
 8004f46:	f001 010c 	and.w	r1, r1, #12
 8004f4a:	2908      	cmp	r1, #8
 8004f4c:	f000 8083 	beq.w	8005056 <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f50:	6923      	ldr	r3, [r4, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 8118 	beq.w	8005188 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f58:	2201      	movs	r2, #1
 8004f5a:	4b77      	ldr	r3, [pc, #476]	; (8005138 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f5c:	4e75      	ldr	r6, [pc, #468]	; (8005134 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8004f5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004f60:	f7fe fbc6 	bl	80036f0 <HAL_GetTick>
 8004f64:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f66:	e005      	b.n	8004f74 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f68:	f7fe fbc2 	bl	80036f0 <HAL_GetTick>
 8004f6c:	1b40      	subs	r0, r0, r5
 8004f6e:	2802      	cmp	r0, #2
 8004f70:	f200 80c6 	bhi.w	8005100 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f74:	6833      	ldr	r3, [r6, #0]
 8004f76:	0798      	lsls	r0, r3, #30
 8004f78:	d5f6      	bpl.n	8004f68 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f7a:	6833      	ldr	r3, [r6, #0]
 8004f7c:	6962      	ldr	r2, [r4, #20]
 8004f7e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004f82:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004f86:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f88:	6823      	ldr	r3, [r4, #0]
 8004f8a:	071a      	lsls	r2, r3, #28
 8004f8c:	d41f      	bmi.n	8004fce <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f8e:	075d      	lsls	r5, r3, #29
 8004f90:	d542      	bpl.n	8005018 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f92:	4b68      	ldr	r3, [pc, #416]	; (8005134 <HAL_RCC_OscConfig+0x280>)
 8004f94:	69da      	ldr	r2, [r3, #28]
 8004f96:	00d0      	lsls	r0, r2, #3
 8004f98:	d57d      	bpl.n	8005096 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8004f9a:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f9c:	4e67      	ldr	r6, [pc, #412]	; (800513c <HAL_RCC_OscConfig+0x288>)
 8004f9e:	6833      	ldr	r3, [r6, #0]
 8004fa0:	05d9      	lsls	r1, r3, #23
 8004fa2:	f140 809d 	bpl.w	80050e0 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fa6:	68e3      	ldr	r3, [r4, #12]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	f000 80fe 	beq.w	80051aa <HAL_RCC_OscConfig+0x2f6>
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 80ca 	beq.w	8005148 <HAL_RCC_OscConfig+0x294>
 8004fb4:	2b05      	cmp	r3, #5
 8004fb6:	4b5f      	ldr	r3, [pc, #380]	; (8005134 <HAL_RCC_OscConfig+0x280>)
 8004fb8:	6a1a      	ldr	r2, [r3, #32]
 8004fba:	f000 812c 	beq.w	8005216 <HAL_RCC_OscConfig+0x362>
 8004fbe:	f022 0201 	bic.w	r2, r2, #1
 8004fc2:	621a      	str	r2, [r3, #32]
 8004fc4:	6a1a      	ldr	r2, [r3, #32]
 8004fc6:	f022 0204 	bic.w	r2, r2, #4
 8004fca:	621a      	str	r2, [r3, #32]
 8004fcc:	e0f2      	b.n	80051b4 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fce:	69a3      	ldr	r3, [r4, #24]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d04f      	beq.n	8005074 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	4b58      	ldr	r3, [pc, #352]	; (8005138 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fd8:	4e56      	ldr	r6, [pc, #344]	; (8005134 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 8004fda:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8004fde:	f7fe fb87 	bl	80036f0 <HAL_GetTick>
 8004fe2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fe4:	e005      	b.n	8004ff2 <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fe6:	f7fe fb83 	bl	80036f0 <HAL_GetTick>
 8004fea:	1b40      	subs	r0, r0, r5
 8004fec:	2802      	cmp	r0, #2
 8004fee:	f200 8087 	bhi.w	8005100 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004ff4:	079b      	lsls	r3, r3, #30
 8004ff6:	d5f6      	bpl.n	8004fe6 <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ff8:	4b51      	ldr	r3, [pc, #324]	; (8005140 <HAL_RCC_OscConfig+0x28c>)
 8004ffa:	4a52      	ldr	r2, [pc, #328]	; (8005144 <HAL_RCC_OscConfig+0x290>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8005002:	0a5b      	lsrs	r3, r3, #9
 8005004:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8005006:	bf00      	nop
  }
  while (Delay --);
 8005008:	9b01      	ldr	r3, [sp, #4]
 800500a:	1e5a      	subs	r2, r3, #1
 800500c:	9201      	str	r2, [sp, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f9      	bne.n	8005006 <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	075d      	lsls	r5, r3, #29
 8005016:	d4bc      	bmi.n	8004f92 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005018:	69e0      	ldr	r0, [r4, #28]
 800501a:	b1c0      	cbz	r0, 800504e <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800501c:	4d45      	ldr	r5, [pc, #276]	; (8005134 <HAL_RCC_OscConfig+0x280>)
 800501e:	686b      	ldr	r3, [r5, #4]
 8005020:	f003 030c 	and.w	r3, r3, #12
 8005024:	2b08      	cmp	r3, #8
 8005026:	f000 80d8 	beq.w	80051da <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 800502a:	2200      	movs	r2, #0
 800502c:	4b42      	ldr	r3, [pc, #264]	; (8005138 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800502e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005030:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005032:	f000 80fa 	beq.w	800522a <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8005036:	f7fe fb5b 	bl	80036f0 <HAL_GetTick>
 800503a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800503c:	e004      	b.n	8005048 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800503e:	f7fe fb57 	bl	80036f0 <HAL_GetTick>
 8005042:	1b00      	subs	r0, r0, r4
 8005044:	2802      	cmp	r0, #2
 8005046:	d85b      	bhi.n	8005100 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005048:	682b      	ldr	r3, [r5, #0]
 800504a:	019b      	lsls	r3, r3, #6
 800504c:	d4f7      	bmi.n	800503e <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 800504e:	2000      	movs	r0, #0
}
 8005050:	b002      	add	sp, #8
 8005052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005056:	6852      	ldr	r2, [r2, #4]
 8005058:	03d6      	lsls	r6, r2, #15
 800505a:	f53f af79 	bmi.w	8004f50 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800505e:	4a35      	ldr	r2, [pc, #212]	; (8005134 <HAL_RCC_OscConfig+0x280>)
 8005060:	6812      	ldr	r2, [r2, #0]
 8005062:	0795      	lsls	r5, r2, #30
 8005064:	d530      	bpl.n	80050c8 <HAL_RCC_OscConfig+0x214>
 8005066:	6922      	ldr	r2, [r4, #16]
 8005068:	2a01      	cmp	r2, #1
 800506a:	d02d      	beq.n	80050c8 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 800506c:	2001      	movs	r0, #1
}
 800506e:	b002      	add	sp, #8
 8005070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8005074:	4a30      	ldr	r2, [pc, #192]	; (8005138 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005076:	4e2f      	ldr	r6, [pc, #188]	; (8005134 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8005078:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800507c:	f7fe fb38 	bl	80036f0 <HAL_GetTick>
 8005080:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005082:	e004      	b.n	800508e <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005084:	f7fe fb34 	bl	80036f0 <HAL_GetTick>
 8005088:	1b40      	subs	r0, r0, r5
 800508a:	2802      	cmp	r0, #2
 800508c:	d838      	bhi.n	8005100 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800508e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005090:	079f      	lsls	r7, r3, #30
 8005092:	d4f7      	bmi.n	8005084 <HAL_RCC_OscConfig+0x1d0>
 8005094:	e7bd      	b.n	8005012 <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005096:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8005098:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800509a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800509e:	61da      	str	r2, [r3, #28]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80050aa:	e777      	b.n	8004f9c <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80050ac:	684a      	ldr	r2, [r1, #4]
 80050ae:	03d0      	lsls	r0, r2, #15
 80050b0:	f57f af17 	bpl.w	8004ee2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b4:	4a1f      	ldr	r2, [pc, #124]	; (8005134 <HAL_RCC_OscConfig+0x280>)
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	0391      	lsls	r1, r2, #14
 80050ba:	f57f af3b 	bpl.w	8004f34 <HAL_RCC_OscConfig+0x80>
 80050be:	6862      	ldr	r2, [r4, #4]
 80050c0:	2a00      	cmp	r2, #0
 80050c2:	f47f af37 	bne.w	8004f34 <HAL_RCC_OscConfig+0x80>
 80050c6:	e7d1      	b.n	800506c <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c8:	491a      	ldr	r1, [pc, #104]	; (8005134 <HAL_RCC_OscConfig+0x280>)
 80050ca:	6960      	ldr	r0, [r4, #20]
 80050cc:	680a      	ldr	r2, [r1, #0]
 80050ce:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80050d2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80050d6:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050d8:	071a      	lsls	r2, r3, #28
 80050da:	f57f af58 	bpl.w	8004f8e <HAL_RCC_OscConfig+0xda>
 80050de:	e776      	b.n	8004fce <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050e0:	6833      	ldr	r3, [r6, #0]
 80050e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80050e8:	f7fe fb02 	bl	80036f0 <HAL_GetTick>
 80050ec:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ee:	6833      	ldr	r3, [r6, #0]
 80050f0:	05da      	lsls	r2, r3, #23
 80050f2:	f53f af58 	bmi.w	8004fa6 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f6:	f7fe fafb 	bl	80036f0 <HAL_GetTick>
 80050fa:	1bc0      	subs	r0, r0, r7
 80050fc:	2864      	cmp	r0, #100	; 0x64
 80050fe:	d9f6      	bls.n	80050ee <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8005100:	2003      	movs	r0, #3
}
 8005102:	b002      	add	sp, #8
 8005104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005108:	4d0a      	ldr	r5, [pc, #40]	; (8005134 <HAL_RCC_OscConfig+0x280>)
 800510a:	682b      	ldr	r3, [r5, #0]
 800510c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005110:	602b      	str	r3, [r5, #0]
 8005112:	682b      	ldr	r3, [r5, #0]
 8005114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005118:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800511a:	f7fe fae9 	bl	80036f0 <HAL_GetTick>
 800511e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005120:	e004      	b.n	800512c <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005122:	f7fe fae5 	bl	80036f0 <HAL_GetTick>
 8005126:	1b80      	subs	r0, r0, r6
 8005128:	2864      	cmp	r0, #100	; 0x64
 800512a:	d8e9      	bhi.n	8005100 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	039b      	lsls	r3, r3, #14
 8005130:	d4f7      	bmi.n	8005122 <HAL_RCC_OscConfig+0x26e>
 8005132:	e6fe      	b.n	8004f32 <HAL_RCC_OscConfig+0x7e>
 8005134:	40021000 	.word	0x40021000
 8005138:	42420000 	.word	0x42420000
 800513c:	40007000 	.word	0x40007000
 8005140:	20000140 	.word	0x20000140
 8005144:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005148:	4e50      	ldr	r6, [pc, #320]	; (800528c <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800514e:	6a33      	ldr	r3, [r6, #32]
 8005150:	f023 0301 	bic.w	r3, r3, #1
 8005154:	6233      	str	r3, [r6, #32]
 8005156:	6a33      	ldr	r3, [r6, #32]
 8005158:	f023 0304 	bic.w	r3, r3, #4
 800515c:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800515e:	f7fe fac7 	bl	80036f0 <HAL_GetTick>
 8005162:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005164:	e004      	b.n	8005170 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005166:	f7fe fac3 	bl	80036f0 <HAL_GetTick>
 800516a:	1bc0      	subs	r0, r0, r7
 800516c:	4540      	cmp	r0, r8
 800516e:	d8c7      	bhi.n	8005100 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005170:	6a33      	ldr	r3, [r6, #32]
 8005172:	0798      	lsls	r0, r3, #30
 8005174:	d4f7      	bmi.n	8005166 <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8005176:	2d00      	cmp	r5, #0
 8005178:	f43f af4e 	beq.w	8005018 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 800517c:	4a43      	ldr	r2, [pc, #268]	; (800528c <HAL_RCC_OscConfig+0x3d8>)
 800517e:	69d3      	ldr	r3, [r2, #28]
 8005180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005184:	61d3      	str	r3, [r2, #28]
 8005186:	e747      	b.n	8005018 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8005188:	4a41      	ldr	r2, [pc, #260]	; (8005290 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800518a:	4e40      	ldr	r6, [pc, #256]	; (800528c <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 800518c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800518e:	f7fe faaf 	bl	80036f0 <HAL_GetTick>
 8005192:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005194:	e004      	b.n	80051a0 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005196:	f7fe faab 	bl	80036f0 <HAL_GetTick>
 800519a:	1b40      	subs	r0, r0, r5
 800519c:	2802      	cmp	r0, #2
 800519e:	d8af      	bhi.n	8005100 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051a0:	6833      	ldr	r3, [r6, #0]
 80051a2:	0799      	lsls	r1, r3, #30
 80051a4:	d4f7      	bmi.n	8005196 <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	e6ef      	b.n	8004f8a <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051aa:	4a38      	ldr	r2, [pc, #224]	; (800528c <HAL_RCC_OscConfig+0x3d8>)
 80051ac:	6a13      	ldr	r3, [r2, #32]
 80051ae:	f043 0301 	orr.w	r3, r3, #1
 80051b2:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80051b4:	f7fe fa9c 	bl	80036f0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80051bc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051be:	4f33      	ldr	r7, [pc, #204]	; (800528c <HAL_RCC_OscConfig+0x3d8>)
 80051c0:	e004      	b.n	80051cc <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c2:	f7fe fa95 	bl	80036f0 <HAL_GetTick>
 80051c6:	1b80      	subs	r0, r0, r6
 80051c8:	4540      	cmp	r0, r8
 80051ca:	d899      	bhi.n	8005100 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	079b      	lsls	r3, r3, #30
 80051d0:	d5f7      	bpl.n	80051c2 <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 80051d2:	2d00      	cmp	r5, #0
 80051d4:	f43f af20 	beq.w	8005018 <HAL_RCC_OscConfig+0x164>
 80051d8:	e7d0      	b.n	800517c <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051da:	2801      	cmp	r0, #1
 80051dc:	f43f af38 	beq.w	8005050 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 80051e0:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e2:	6a22      	ldr	r2, [r4, #32]
 80051e4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80051e8:	4291      	cmp	r1, r2
 80051ea:	f47f af3f 	bne.w	800506c <HAL_RCC_OscConfig+0x1b8>
 80051ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80051f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 80051f4:	1a18      	subs	r0, r3, r0
 80051f6:	bf18      	it	ne
 80051f8:	2001      	movne	r0, #1
 80051fa:	e729      	b.n	8005050 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005200:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	e67f      	b.n	8004f16 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005216:	f042 0204 	orr.w	r2, r2, #4
 800521a:	621a      	str	r2, [r3, #32]
 800521c:	6a1a      	ldr	r2, [r3, #32]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	621a      	str	r2, [r3, #32]
 8005224:	e7c6      	b.n	80051b4 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8005226:	2001      	movs	r0, #1
}
 8005228:	4770      	bx	lr
        tickstart = HAL_GetTick();
 800522a:	f7fe fa61 	bl	80036f0 <HAL_GetTick>
 800522e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005230:	e005      	b.n	800523e <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005232:	f7fe fa5d 	bl	80036f0 <HAL_GetTick>
 8005236:	1b80      	subs	r0, r0, r6
 8005238:	2802      	cmp	r0, #2
 800523a:	f63f af61 	bhi.w	8005100 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800523e:	682b      	ldr	r3, [r5, #0]
 8005240:	0199      	lsls	r1, r3, #6
 8005242:	d4f6      	bmi.n	8005232 <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005244:	6a23      	ldr	r3, [r4, #32]
 8005246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800524a:	d105      	bne.n	8005258 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800524c:	686a      	ldr	r2, [r5, #4]
 800524e:	68a1      	ldr	r1, [r4, #8]
 8005250:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005254:	430a      	orrs	r2, r1
 8005256:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005258:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800525a:	4d0c      	ldr	r5, [pc, #48]	; (800528c <HAL_RCC_OscConfig+0x3d8>)
 800525c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800525e:	686a      	ldr	r2, [r5, #4]
 8005260:	430b      	orrs	r3, r1
 8005262:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8005266:	490a      	ldr	r1, [pc, #40]	; (8005290 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005268:	4313      	orrs	r3, r2
 800526a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800526c:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 800526e:	f7fe fa3f 	bl	80036f0 <HAL_GetTick>
 8005272:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005274:	e005      	b.n	8005282 <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005276:	f7fe fa3b 	bl	80036f0 <HAL_GetTick>
 800527a:	1b00      	subs	r0, r0, r4
 800527c:	2802      	cmp	r0, #2
 800527e:	f63f af3f 	bhi.w	8005100 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005282:	682b      	ldr	r3, [r5, #0]
 8005284:	019a      	lsls	r2, r3, #6
 8005286:	d5f6      	bpl.n	8005276 <HAL_RCC_OscConfig+0x3c2>
 8005288:	e6e1      	b.n	800504e <HAL_RCC_OscConfig+0x19a>
 800528a:	bf00      	nop
 800528c:	40021000 	.word	0x40021000
 8005290:	42420000 	.word	0x42420000

08005294 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005294:	2800      	cmp	r0, #0
 8005296:	f000 80b1 	beq.w	80053fc <HAL_RCC_ClockConfig+0x168>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800529a:	4a5e      	ldr	r2, [pc, #376]	; (8005414 <HAL_RCC_ClockConfig+0x180>)
{
 800529c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052a0:	6813      	ldr	r3, [r2, #0]
 80052a2:	4604      	mov	r4, r0
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	428b      	cmp	r3, r1
 80052aa:	460d      	mov	r5, r1
{
 80052ac:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052ae:	d20d      	bcs.n	80052cc <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b0:	6813      	ldr	r3, [r2, #0]
 80052b2:	f023 0307 	bic.w	r3, r3, #7
 80052b6:	430b      	orrs	r3, r1
 80052b8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ba:	6813      	ldr	r3, [r2, #0]
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	428b      	cmp	r3, r1
 80052c2:	d003      	beq.n	80052cc <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 80052c4:	2001      	movs	r0, #1
}
 80052c6:	b006      	add	sp, #24
 80052c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	079e      	lsls	r6, r3, #30
 80052d0:	d514      	bpl.n	80052fc <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d2:	0758      	lsls	r0, r3, #29
 80052d4:	d504      	bpl.n	80052e0 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052d6:	4950      	ldr	r1, [pc, #320]	; (8005418 <HAL_RCC_ClockConfig+0x184>)
 80052d8:	684a      	ldr	r2, [r1, #4]
 80052da:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80052de:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e0:	0719      	lsls	r1, r3, #28
 80052e2:	d504      	bpl.n	80052ee <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052e4:	494c      	ldr	r1, [pc, #304]	; (8005418 <HAL_RCC_ClockConfig+0x184>)
 80052e6:	684a      	ldr	r2, [r1, #4]
 80052e8:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80052ec:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052ee:	494a      	ldr	r1, [pc, #296]	; (8005418 <HAL_RCC_ClockConfig+0x184>)
 80052f0:	68a0      	ldr	r0, [r4, #8]
 80052f2:	684a      	ldr	r2, [r1, #4]
 80052f4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80052f8:	4302      	orrs	r2, r0
 80052fa:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052fc:	07da      	lsls	r2, r3, #31
 80052fe:	d520      	bpl.n	8005342 <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005300:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005302:	4b45      	ldr	r3, [pc, #276]	; (8005418 <HAL_RCC_ClockConfig+0x184>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005304:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005306:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005308:	d07a      	beq.n	8005400 <HAL_RCC_ClockConfig+0x16c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800530a:	2a02      	cmp	r2, #2
 800530c:	d073      	beq.n	80053f6 <HAL_RCC_ClockConfig+0x162>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800530e:	079e      	lsls	r6, r3, #30
 8005310:	d5d8      	bpl.n	80052c4 <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005312:	4e41      	ldr	r6, [pc, #260]	; (8005418 <HAL_RCC_ClockConfig+0x184>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005314:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005318:	6873      	ldr	r3, [r6, #4]
 800531a:	f023 0303 	bic.w	r3, r3, #3
 800531e:	4313      	orrs	r3, r2
 8005320:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8005322:	f7fe f9e5 	bl	80036f0 <HAL_GetTick>
 8005326:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005328:	e004      	b.n	8005334 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800532a:	f7fe f9e1 	bl	80036f0 <HAL_GetTick>
 800532e:	1bc0      	subs	r0, r0, r7
 8005330:	4540      	cmp	r0, r8
 8005332:	d868      	bhi.n	8005406 <HAL_RCC_ClockConfig+0x172>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005334:	6873      	ldr	r3, [r6, #4]
 8005336:	6862      	ldr	r2, [r4, #4]
 8005338:	f003 030c 	and.w	r3, r3, #12
 800533c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005340:	d1f3      	bne.n	800532a <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005342:	4a34      	ldr	r2, [pc, #208]	; (8005414 <HAL_RCC_ClockConfig+0x180>)
 8005344:	6813      	ldr	r3, [r2, #0]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	42ab      	cmp	r3, r5
 800534c:	d909      	bls.n	8005362 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800534e:	6813      	ldr	r3, [r2, #0]
 8005350:	f023 0307 	bic.w	r3, r3, #7
 8005354:	432b      	orrs	r3, r5
 8005356:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005358:	6813      	ldr	r3, [r2, #0]
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	42ab      	cmp	r3, r5
 8005360:	d1b0      	bne.n	80052c4 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	0758      	lsls	r0, r3, #29
 8005366:	d506      	bpl.n	8005376 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005368:	492b      	ldr	r1, [pc, #172]	; (8005418 <HAL_RCC_ClockConfig+0x184>)
 800536a:	68e0      	ldr	r0, [r4, #12]
 800536c:	684a      	ldr	r2, [r1, #4]
 800536e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005372:	4302      	orrs	r2, r0
 8005374:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005376:	0719      	lsls	r1, r3, #28
 8005378:	d507      	bpl.n	800538a <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800537a:	4a27      	ldr	r2, [pc, #156]	; (8005418 <HAL_RCC_ClockConfig+0x184>)
 800537c:	6921      	ldr	r1, [r4, #16]
 800537e:	6853      	ldr	r3, [r2, #4]
 8005380:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005384:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005388:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800538a:	f240 2401 	movw	r4, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800538e:	4b23      	ldr	r3, [pc, #140]	; (800541c <HAL_RCC_ClockConfig+0x188>)
 8005390:	ad06      	add	r5, sp, #24
 8005392:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005394:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8005398:	491f      	ldr	r1, [pc, #124]	; (8005418 <HAL_RCC_ClockConfig+0x184>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800539a:	f8ad 4004 	strh.w	r4, [sp, #4]
  tmpreg = RCC->CFGR;
 800539e:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80053a0:	f002 030c 	and.w	r3, r2, #12
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d011      	beq.n	80053cc <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 80053a8:	4b1d      	ldr	r3, [pc, #116]	; (8005420 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053aa:	4a1b      	ldr	r2, [pc, #108]	; (8005418 <HAL_RCC_ClockConfig+0x184>)
 80053ac:	481d      	ldr	r0, [pc, #116]	; (8005424 <HAL_RCC_ClockConfig+0x190>)
 80053ae:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 80053b0:	491d      	ldr	r1, [pc, #116]	; (8005428 <HAL_RCC_ClockConfig+0x194>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053b2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80053b6:	5c80      	ldrb	r0, [r0, r2]
 80053b8:	4a1c      	ldr	r2, [pc, #112]	; (800542c <HAL_RCC_ClockConfig+0x198>)
 80053ba:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 80053bc:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053be:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 80053c0:	f7fe f954 	bl	800366c <HAL_InitTick>
  return HAL_OK;
 80053c4:	2000      	movs	r0, #0
}
 80053c6:	b006      	add	sp, #24
 80053c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053cc:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80053d0:	3318      	adds	r3, #24
 80053d2:	446b      	add	r3, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053d4:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053d6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053da:	d516      	bpl.n	800540a <HAL_RCC_ClockConfig+0x176>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053dc:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053de:	4910      	ldr	r1, [pc, #64]	; (8005420 <HAL_RCC_ClockConfig+0x18c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053e0:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053e4:	fb01 f303 	mul.w	r3, r1, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053e8:	3218      	adds	r2, #24
 80053ea:	446a      	add	r2, sp
 80053ec:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80053f4:	e7d9      	b.n	80053aa <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053f6:	019f      	lsls	r7, r3, #6
 80053f8:	d48b      	bmi.n	8005312 <HAL_RCC_ClockConfig+0x7e>
 80053fa:	e763      	b.n	80052c4 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 80053fc:	2001      	movs	r0, #1
}
 80053fe:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005400:	039b      	lsls	r3, r3, #14
 8005402:	d486      	bmi.n	8005312 <HAL_RCC_ClockConfig+0x7e>
 8005404:	e75e      	b.n	80052c4 <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 8005406:	2003      	movs	r0, #3
 8005408:	e75d      	b.n	80052c6 <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800540a:	4a09      	ldr	r2, [pc, #36]	; (8005430 <HAL_RCC_ClockConfig+0x19c>)
 800540c:	fb02 f303 	mul.w	r3, r2, r3
 8005410:	e7cb      	b.n	80053aa <HAL_RCC_ClockConfig+0x116>
 8005412:	bf00      	nop
 8005414:	40022000 	.word	0x40022000
 8005418:	40021000 	.word	0x40021000
 800541c:	0801acb4 	.word	0x0801acb4
 8005420:	007a1200 	.word	0x007a1200
 8005424:	0801ac9c 	.word	0x0801ac9c
 8005428:	20000148 	.word	0x20000148
 800542c:	20000140 	.word	0x20000140
 8005430:	003d0900 	.word	0x003d0900

08005434 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005434:	4b04      	ldr	r3, [pc, #16]	; (8005448 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8005436:	4a05      	ldr	r2, [pc, #20]	; (800544c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	4905      	ldr	r1, [pc, #20]	; (8005450 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800543c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005440:	5ccb      	ldrb	r3, [r1, r3]
 8005442:	6810      	ldr	r0, [r2, #0]
}
 8005444:	40d8      	lsrs	r0, r3
 8005446:	4770      	bx	lr
 8005448:	40021000 	.word	0x40021000
 800544c:	20000140 	.word	0x20000140
 8005450:	0801acac 	.word	0x0801acac

08005454 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005454:	4b04      	ldr	r3, [pc, #16]	; (8005468 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8005456:	4a05      	ldr	r2, [pc, #20]	; (800546c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	4905      	ldr	r1, [pc, #20]	; (8005470 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800545c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005460:	5ccb      	ldrb	r3, [r1, r3]
 8005462:	6810      	ldr	r0, [r2, #0]
}
 8005464:	40d8      	lsrs	r0, r3
 8005466:	4770      	bx	lr
 8005468:	40021000 	.word	0x40021000
 800546c:	20000140 	.word	0x20000140
 8005470:	0801acac 	.word	0x0801acac

08005474 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005474:	2800      	cmp	r0, #0
 8005476:	d064      	beq.n	8005542 <HAL_UART_Init+0xce>
{
 8005478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800547a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800547e:	4604      	mov	r4, r0
 8005480:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005484:	2b00      	cmp	r3, #0
 8005486:	d054      	beq.n	8005532 <HAL_UART_Init+0xbe>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005488:	e9d4 2702 	ldrd	r2, r7, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 800548c:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800548e:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8005490:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005492:	4302      	orrs	r2, r0
 8005494:	6960      	ldr	r0, [r4, #20]
  huart->gState = HAL_UART_STATE_BUSY;
 8005496:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800549a:	4302      	orrs	r2, r0
  __HAL_UART_DISABLE(huart);
 800549c:	68d8      	ldr	r0, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800549e:	69a6      	ldr	r6, [r4, #24]
  __HAL_UART_DISABLE(huart);
 80054a0:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 80054a4:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054a6:	6919      	ldr	r1, [r3, #16]


  if(huart->Instance == USART1)
 80054a8:	4d27      	ldr	r5, [pc, #156]	; (8005548 <HAL_UART_Init+0xd4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054aa:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80054ae:	4339      	orrs	r1, r7
 80054b0:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 80054b2:	68d9      	ldr	r1, [r3, #12]
  if(huart->Instance == USART1)
 80054b4:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1,
 80054b6:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80054ba:	f021 010c 	bic.w	r1, r1, #12
 80054be:	ea42 0201 	orr.w	r2, r2, r1
 80054c2:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054c4:	695a      	ldr	r2, [r3, #20]
 80054c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80054ca:	ea42 0206 	orr.w	r2, r2, r6
 80054ce:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 80054d0:	d034      	beq.n	800553c <HAL_UART_Init+0xc8>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80054d2:	f7ff ffaf 	bl	8005434 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054d6:	6862      	ldr	r2, [r4, #4]
 80054d8:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80054dc:	0092      	lsls	r2, r2, #2
 80054de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80054e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80054e6:	2664      	movs	r6, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e8:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80054ea:	f04f 0c20 	mov.w	ip, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054ee:	4817      	ldr	r0, [pc, #92]	; (800554c <HAL_UART_Init+0xd8>)
 80054f0:	6821      	ldr	r1, [r4, #0]
 80054f2:	fba0 7203 	umull	r7, r2, r0, r3
 80054f6:	0952      	lsrs	r2, r2, #5
 80054f8:	fb06 3312 	mls	r3, r6, r2, r3
 80054fc:	011b      	lsls	r3, r3, #4
 80054fe:	3332      	adds	r3, #50	; 0x32
 8005500:	fba0 0303 	umull	r0, r3, r0, r3
 8005504:	0112      	lsls	r2, r2, #4
 8005506:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 800550a:	608b      	str	r3, [r1, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800550c:	690b      	ldr	r3, [r1, #16]
  return HAL_OK;
 800550e:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005510:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005514:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005516:	694b      	ldr	r3, [r1, #20]
 8005518:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800551c:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE(huart);
 800551e:	68cb      	ldr	r3, [r1, #12]
 8005520:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005524:	60cb      	str	r3, [r1, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005526:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005528:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800552c:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
}
 8005530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8005532:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8005536:	f7fd ffc3 	bl	80034c0 <HAL_UART_MspInit>
 800553a:	e7a5      	b.n	8005488 <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 800553c:	f7ff ff8a 	bl	8005454 <HAL_RCC_GetPCLK2Freq>
 8005540:	e7c9      	b.n	80054d6 <HAL_UART_Init+0x62>
    return HAL_ERROR;
 8005542:	2001      	movs	r0, #1
}
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40013800 	.word	0x40013800
 800554c:	51eb851f 	.word	0x51eb851f

08005550 <__errno>:
 8005550:	4b01      	ldr	r3, [pc, #4]	; (8005558 <__errno+0x8>)
 8005552:	6818      	ldr	r0, [r3, #0]
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	2000014c 	.word	0x2000014c

0800555c <__libc_init_array>:
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	2600      	movs	r6, #0
 8005560:	4d0c      	ldr	r5, [pc, #48]	; (8005594 <__libc_init_array+0x38>)
 8005562:	4c0d      	ldr	r4, [pc, #52]	; (8005598 <__libc_init_array+0x3c>)
 8005564:	1b64      	subs	r4, r4, r5
 8005566:	10a4      	asrs	r4, r4, #2
 8005568:	42a6      	cmp	r6, r4
 800556a:	d109      	bne.n	8005580 <__libc_init_array+0x24>
 800556c:	f004 feac 	bl	800a2c8 <_init>
 8005570:	2600      	movs	r6, #0
 8005572:	4d0a      	ldr	r5, [pc, #40]	; (800559c <__libc_init_array+0x40>)
 8005574:	4c0a      	ldr	r4, [pc, #40]	; (80055a0 <__libc_init_array+0x44>)
 8005576:	1b64      	subs	r4, r4, r5
 8005578:	10a4      	asrs	r4, r4, #2
 800557a:	42a6      	cmp	r6, r4
 800557c:	d105      	bne.n	800558a <__libc_init_array+0x2e>
 800557e:	bd70      	pop	{r4, r5, r6, pc}
 8005580:	f855 3b04 	ldr.w	r3, [r5], #4
 8005584:	4798      	blx	r3
 8005586:	3601      	adds	r6, #1
 8005588:	e7ee      	b.n	8005568 <__libc_init_array+0xc>
 800558a:	f855 3b04 	ldr.w	r3, [r5], #4
 800558e:	4798      	blx	r3
 8005590:	3601      	adds	r6, #1
 8005592:	e7f2      	b.n	800557a <__libc_init_array+0x1e>
 8005594:	0801b1a0 	.word	0x0801b1a0
 8005598:	0801b1a0 	.word	0x0801b1a0
 800559c:	0801b1a0 	.word	0x0801b1a0
 80055a0:	0801b1a4 	.word	0x0801b1a4

080055a4 <memmove>:
 80055a4:	4288      	cmp	r0, r1
 80055a6:	b510      	push	{r4, lr}
 80055a8:	eb01 0402 	add.w	r4, r1, r2
 80055ac:	d902      	bls.n	80055b4 <memmove+0x10>
 80055ae:	4284      	cmp	r4, r0
 80055b0:	4623      	mov	r3, r4
 80055b2:	d807      	bhi.n	80055c4 <memmove+0x20>
 80055b4:	1e43      	subs	r3, r0, #1
 80055b6:	42a1      	cmp	r1, r4
 80055b8:	d008      	beq.n	80055cc <memmove+0x28>
 80055ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055c2:	e7f8      	b.n	80055b6 <memmove+0x12>
 80055c4:	4601      	mov	r1, r0
 80055c6:	4402      	add	r2, r0
 80055c8:	428a      	cmp	r2, r1
 80055ca:	d100      	bne.n	80055ce <memmove+0x2a>
 80055cc:	bd10      	pop	{r4, pc}
 80055ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055d6:	e7f7      	b.n	80055c8 <memmove+0x24>

080055d8 <memset>:
 80055d8:	4603      	mov	r3, r0
 80055da:	4402      	add	r2, r0
 80055dc:	4293      	cmp	r3, r2
 80055de:	d100      	bne.n	80055e2 <memset+0xa>
 80055e0:	4770      	bx	lr
 80055e2:	f803 1b01 	strb.w	r1, [r3], #1
 80055e6:	e7f9      	b.n	80055dc <memset+0x4>

080055e8 <__cvt>:
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ee:	461f      	mov	r7, r3
 80055f0:	bfbb      	ittet	lt
 80055f2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80055f6:	461f      	movlt	r7, r3
 80055f8:	2300      	movge	r3, #0
 80055fa:	232d      	movlt	r3, #45	; 0x2d
 80055fc:	b088      	sub	sp, #32
 80055fe:	4614      	mov	r4, r2
 8005600:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005602:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005604:	7013      	strb	r3, [r2, #0]
 8005606:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005608:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800560c:	f023 0820 	bic.w	r8, r3, #32
 8005610:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005614:	d005      	beq.n	8005622 <__cvt+0x3a>
 8005616:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800561a:	d100      	bne.n	800561e <__cvt+0x36>
 800561c:	3501      	adds	r5, #1
 800561e:	2302      	movs	r3, #2
 8005620:	e000      	b.n	8005624 <__cvt+0x3c>
 8005622:	2303      	movs	r3, #3
 8005624:	aa07      	add	r2, sp, #28
 8005626:	9204      	str	r2, [sp, #16]
 8005628:	aa06      	add	r2, sp, #24
 800562a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800562e:	e9cd 3500 	strd	r3, r5, [sp]
 8005632:	4622      	mov	r2, r4
 8005634:	463b      	mov	r3, r7
 8005636:	f001 fd83 	bl	8007140 <_dtoa_r>
 800563a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800563e:	4606      	mov	r6, r0
 8005640:	d102      	bne.n	8005648 <__cvt+0x60>
 8005642:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005644:	07db      	lsls	r3, r3, #31
 8005646:	d522      	bpl.n	800568e <__cvt+0xa6>
 8005648:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800564c:	eb06 0905 	add.w	r9, r6, r5
 8005650:	d110      	bne.n	8005674 <__cvt+0x8c>
 8005652:	7833      	ldrb	r3, [r6, #0]
 8005654:	2b30      	cmp	r3, #48	; 0x30
 8005656:	d10a      	bne.n	800566e <__cvt+0x86>
 8005658:	2200      	movs	r2, #0
 800565a:	2300      	movs	r3, #0
 800565c:	4620      	mov	r0, r4
 800565e:	4639      	mov	r1, r7
 8005660:	f7fb fa56 	bl	8000b10 <__aeabi_dcmpeq>
 8005664:	b918      	cbnz	r0, 800566e <__cvt+0x86>
 8005666:	f1c5 0501 	rsb	r5, r5, #1
 800566a:	f8ca 5000 	str.w	r5, [sl]
 800566e:	f8da 3000 	ldr.w	r3, [sl]
 8005672:	4499      	add	r9, r3
 8005674:	2200      	movs	r2, #0
 8005676:	2300      	movs	r3, #0
 8005678:	4620      	mov	r0, r4
 800567a:	4639      	mov	r1, r7
 800567c:	f7fb fa48 	bl	8000b10 <__aeabi_dcmpeq>
 8005680:	b108      	cbz	r0, 8005686 <__cvt+0x9e>
 8005682:	f8cd 901c 	str.w	r9, [sp, #28]
 8005686:	2230      	movs	r2, #48	; 0x30
 8005688:	9b07      	ldr	r3, [sp, #28]
 800568a:	454b      	cmp	r3, r9
 800568c:	d307      	bcc.n	800569e <__cvt+0xb6>
 800568e:	4630      	mov	r0, r6
 8005690:	9b07      	ldr	r3, [sp, #28]
 8005692:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005694:	1b9b      	subs	r3, r3, r6
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	b008      	add	sp, #32
 800569a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800569e:	1c59      	adds	r1, r3, #1
 80056a0:	9107      	str	r1, [sp, #28]
 80056a2:	701a      	strb	r2, [r3, #0]
 80056a4:	e7f0      	b.n	8005688 <__cvt+0xa0>

080056a6 <__exponent>:
 80056a6:	4603      	mov	r3, r0
 80056a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056aa:	2900      	cmp	r1, #0
 80056ac:	f803 2b02 	strb.w	r2, [r3], #2
 80056b0:	bfb6      	itet	lt
 80056b2:	222d      	movlt	r2, #45	; 0x2d
 80056b4:	222b      	movge	r2, #43	; 0x2b
 80056b6:	4249      	neglt	r1, r1
 80056b8:	2909      	cmp	r1, #9
 80056ba:	7042      	strb	r2, [r0, #1]
 80056bc:	dd2b      	ble.n	8005716 <__exponent+0x70>
 80056be:	f10d 0407 	add.w	r4, sp, #7
 80056c2:	46a4      	mov	ip, r4
 80056c4:	270a      	movs	r7, #10
 80056c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80056ca:	460a      	mov	r2, r1
 80056cc:	46a6      	mov	lr, r4
 80056ce:	fb07 1516 	mls	r5, r7, r6, r1
 80056d2:	2a63      	cmp	r2, #99	; 0x63
 80056d4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80056d8:	4631      	mov	r1, r6
 80056da:	f104 34ff 	add.w	r4, r4, #4294967295
 80056de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80056e2:	dcf0      	bgt.n	80056c6 <__exponent+0x20>
 80056e4:	3130      	adds	r1, #48	; 0x30
 80056e6:	f1ae 0502 	sub.w	r5, lr, #2
 80056ea:	f804 1c01 	strb.w	r1, [r4, #-1]
 80056ee:	4629      	mov	r1, r5
 80056f0:	1c44      	adds	r4, r0, #1
 80056f2:	4561      	cmp	r1, ip
 80056f4:	d30a      	bcc.n	800570c <__exponent+0x66>
 80056f6:	f10d 0209 	add.w	r2, sp, #9
 80056fa:	eba2 020e 	sub.w	r2, r2, lr
 80056fe:	4565      	cmp	r5, ip
 8005700:	bf88      	it	hi
 8005702:	2200      	movhi	r2, #0
 8005704:	4413      	add	r3, r2
 8005706:	1a18      	subs	r0, r3, r0
 8005708:	b003      	add	sp, #12
 800570a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800570c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005710:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005714:	e7ed      	b.n	80056f2 <__exponent+0x4c>
 8005716:	2330      	movs	r3, #48	; 0x30
 8005718:	3130      	adds	r1, #48	; 0x30
 800571a:	7083      	strb	r3, [r0, #2]
 800571c:	70c1      	strb	r1, [r0, #3]
 800571e:	1d03      	adds	r3, r0, #4
 8005720:	e7f1      	b.n	8005706 <__exponent+0x60>
	...

08005724 <_printf_float>:
 8005724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005728:	b091      	sub	sp, #68	; 0x44
 800572a:	460c      	mov	r4, r1
 800572c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005730:	4616      	mov	r6, r2
 8005732:	461f      	mov	r7, r3
 8005734:	4605      	mov	r5, r0
 8005736:	f002 fe57 	bl	80083e8 <_localeconv_r>
 800573a:	6803      	ldr	r3, [r0, #0]
 800573c:	4618      	mov	r0, r3
 800573e:	9309      	str	r3, [sp, #36]	; 0x24
 8005740:	f7fa fd06 	bl	8000150 <strlen>
 8005744:	2300      	movs	r3, #0
 8005746:	930e      	str	r3, [sp, #56]	; 0x38
 8005748:	f8d8 3000 	ldr.w	r3, [r8]
 800574c:	900a      	str	r0, [sp, #40]	; 0x28
 800574e:	3307      	adds	r3, #7
 8005750:	f023 0307 	bic.w	r3, r3, #7
 8005754:	f103 0208 	add.w	r2, r3, #8
 8005758:	f894 9018 	ldrb.w	r9, [r4, #24]
 800575c:	f8d4 b000 	ldr.w	fp, [r4]
 8005760:	f8c8 2000 	str.w	r2, [r8]
 8005764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005768:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800576c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005770:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005774:	930b      	str	r3, [sp, #44]	; 0x2c
 8005776:	f04f 32ff 	mov.w	r2, #4294967295
 800577a:	4640      	mov	r0, r8
 800577c:	4b9c      	ldr	r3, [pc, #624]	; (80059f0 <_printf_float+0x2cc>)
 800577e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005780:	f7fb f9f8 	bl	8000b74 <__aeabi_dcmpun>
 8005784:	bb70      	cbnz	r0, 80057e4 <_printf_float+0xc0>
 8005786:	f04f 32ff 	mov.w	r2, #4294967295
 800578a:	4640      	mov	r0, r8
 800578c:	4b98      	ldr	r3, [pc, #608]	; (80059f0 <_printf_float+0x2cc>)
 800578e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005790:	f7fb f9d2 	bl	8000b38 <__aeabi_dcmple>
 8005794:	bb30      	cbnz	r0, 80057e4 <_printf_float+0xc0>
 8005796:	2200      	movs	r2, #0
 8005798:	2300      	movs	r3, #0
 800579a:	4640      	mov	r0, r8
 800579c:	4651      	mov	r1, sl
 800579e:	f7fb f9c1 	bl	8000b24 <__aeabi_dcmplt>
 80057a2:	b110      	cbz	r0, 80057aa <_printf_float+0x86>
 80057a4:	232d      	movs	r3, #45	; 0x2d
 80057a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057aa:	4b92      	ldr	r3, [pc, #584]	; (80059f4 <_printf_float+0x2d0>)
 80057ac:	4892      	ldr	r0, [pc, #584]	; (80059f8 <_printf_float+0x2d4>)
 80057ae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80057b2:	bf94      	ite	ls
 80057b4:	4698      	movls	r8, r3
 80057b6:	4680      	movhi	r8, r0
 80057b8:	2303      	movs	r3, #3
 80057ba:	f04f 0a00 	mov.w	sl, #0
 80057be:	6123      	str	r3, [r4, #16]
 80057c0:	f02b 0304 	bic.w	r3, fp, #4
 80057c4:	6023      	str	r3, [r4, #0]
 80057c6:	4633      	mov	r3, r6
 80057c8:	4621      	mov	r1, r4
 80057ca:	4628      	mov	r0, r5
 80057cc:	9700      	str	r7, [sp, #0]
 80057ce:	aa0f      	add	r2, sp, #60	; 0x3c
 80057d0:	f000 f9d4 	bl	8005b7c <_printf_common>
 80057d4:	3001      	adds	r0, #1
 80057d6:	f040 8090 	bne.w	80058fa <_printf_float+0x1d6>
 80057da:	f04f 30ff 	mov.w	r0, #4294967295
 80057de:	b011      	add	sp, #68	; 0x44
 80057e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e4:	4642      	mov	r2, r8
 80057e6:	4653      	mov	r3, sl
 80057e8:	4640      	mov	r0, r8
 80057ea:	4651      	mov	r1, sl
 80057ec:	f7fb f9c2 	bl	8000b74 <__aeabi_dcmpun>
 80057f0:	b148      	cbz	r0, 8005806 <_printf_float+0xe2>
 80057f2:	f1ba 0f00 	cmp.w	sl, #0
 80057f6:	bfb8      	it	lt
 80057f8:	232d      	movlt	r3, #45	; 0x2d
 80057fa:	4880      	ldr	r0, [pc, #512]	; (80059fc <_printf_float+0x2d8>)
 80057fc:	bfb8      	it	lt
 80057fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005802:	4b7f      	ldr	r3, [pc, #508]	; (8005a00 <_printf_float+0x2dc>)
 8005804:	e7d3      	b.n	80057ae <_printf_float+0x8a>
 8005806:	6863      	ldr	r3, [r4, #4]
 8005808:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	d142      	bne.n	8005896 <_printf_float+0x172>
 8005810:	2306      	movs	r3, #6
 8005812:	6063      	str	r3, [r4, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	9206      	str	r2, [sp, #24]
 8005818:	aa0e      	add	r2, sp, #56	; 0x38
 800581a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800581e:	aa0d      	add	r2, sp, #52	; 0x34
 8005820:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005824:	9203      	str	r2, [sp, #12]
 8005826:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800582a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800582e:	6023      	str	r3, [r4, #0]
 8005830:	6863      	ldr	r3, [r4, #4]
 8005832:	4642      	mov	r2, r8
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	4628      	mov	r0, r5
 8005838:	4653      	mov	r3, sl
 800583a:	910b      	str	r1, [sp, #44]	; 0x2c
 800583c:	f7ff fed4 	bl	80055e8 <__cvt>
 8005840:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005842:	4680      	mov	r8, r0
 8005844:	2947      	cmp	r1, #71	; 0x47
 8005846:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005848:	d108      	bne.n	800585c <_printf_float+0x138>
 800584a:	1cc8      	adds	r0, r1, #3
 800584c:	db02      	blt.n	8005854 <_printf_float+0x130>
 800584e:	6863      	ldr	r3, [r4, #4]
 8005850:	4299      	cmp	r1, r3
 8005852:	dd40      	ble.n	80058d6 <_printf_float+0x1b2>
 8005854:	f1a9 0902 	sub.w	r9, r9, #2
 8005858:	fa5f f989 	uxtb.w	r9, r9
 800585c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005860:	d81f      	bhi.n	80058a2 <_printf_float+0x17e>
 8005862:	464a      	mov	r2, r9
 8005864:	3901      	subs	r1, #1
 8005866:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800586a:	910d      	str	r1, [sp, #52]	; 0x34
 800586c:	f7ff ff1b 	bl	80056a6 <__exponent>
 8005870:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005872:	4682      	mov	sl, r0
 8005874:	1813      	adds	r3, r2, r0
 8005876:	2a01      	cmp	r2, #1
 8005878:	6123      	str	r3, [r4, #16]
 800587a:	dc02      	bgt.n	8005882 <_printf_float+0x15e>
 800587c:	6822      	ldr	r2, [r4, #0]
 800587e:	07d2      	lsls	r2, r2, #31
 8005880:	d501      	bpl.n	8005886 <_printf_float+0x162>
 8005882:	3301      	adds	r3, #1
 8005884:	6123      	str	r3, [r4, #16]
 8005886:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800588a:	2b00      	cmp	r3, #0
 800588c:	d09b      	beq.n	80057c6 <_printf_float+0xa2>
 800588e:	232d      	movs	r3, #45	; 0x2d
 8005890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005894:	e797      	b.n	80057c6 <_printf_float+0xa2>
 8005896:	2947      	cmp	r1, #71	; 0x47
 8005898:	d1bc      	bne.n	8005814 <_printf_float+0xf0>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1ba      	bne.n	8005814 <_printf_float+0xf0>
 800589e:	2301      	movs	r3, #1
 80058a0:	e7b7      	b.n	8005812 <_printf_float+0xee>
 80058a2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80058a6:	d118      	bne.n	80058da <_printf_float+0x1b6>
 80058a8:	2900      	cmp	r1, #0
 80058aa:	6863      	ldr	r3, [r4, #4]
 80058ac:	dd0b      	ble.n	80058c6 <_printf_float+0x1a2>
 80058ae:	6121      	str	r1, [r4, #16]
 80058b0:	b913      	cbnz	r3, 80058b8 <_printf_float+0x194>
 80058b2:	6822      	ldr	r2, [r4, #0]
 80058b4:	07d0      	lsls	r0, r2, #31
 80058b6:	d502      	bpl.n	80058be <_printf_float+0x19a>
 80058b8:	3301      	adds	r3, #1
 80058ba:	440b      	add	r3, r1
 80058bc:	6123      	str	r3, [r4, #16]
 80058be:	f04f 0a00 	mov.w	sl, #0
 80058c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80058c4:	e7df      	b.n	8005886 <_printf_float+0x162>
 80058c6:	b913      	cbnz	r3, 80058ce <_printf_float+0x1aa>
 80058c8:	6822      	ldr	r2, [r4, #0]
 80058ca:	07d2      	lsls	r2, r2, #31
 80058cc:	d501      	bpl.n	80058d2 <_printf_float+0x1ae>
 80058ce:	3302      	adds	r3, #2
 80058d0:	e7f4      	b.n	80058bc <_printf_float+0x198>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e7f2      	b.n	80058bc <_printf_float+0x198>
 80058d6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80058da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058dc:	4299      	cmp	r1, r3
 80058de:	db05      	blt.n	80058ec <_printf_float+0x1c8>
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	6121      	str	r1, [r4, #16]
 80058e4:	07d8      	lsls	r0, r3, #31
 80058e6:	d5ea      	bpl.n	80058be <_printf_float+0x19a>
 80058e8:	1c4b      	adds	r3, r1, #1
 80058ea:	e7e7      	b.n	80058bc <_printf_float+0x198>
 80058ec:	2900      	cmp	r1, #0
 80058ee:	bfcc      	ite	gt
 80058f0:	2201      	movgt	r2, #1
 80058f2:	f1c1 0202 	rsble	r2, r1, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	e7e0      	b.n	80058bc <_printf_float+0x198>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	055a      	lsls	r2, r3, #21
 80058fe:	d407      	bmi.n	8005910 <_printf_float+0x1ec>
 8005900:	6923      	ldr	r3, [r4, #16]
 8005902:	4642      	mov	r2, r8
 8005904:	4631      	mov	r1, r6
 8005906:	4628      	mov	r0, r5
 8005908:	47b8      	blx	r7
 800590a:	3001      	adds	r0, #1
 800590c:	d12b      	bne.n	8005966 <_printf_float+0x242>
 800590e:	e764      	b.n	80057da <_printf_float+0xb6>
 8005910:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005914:	f240 80dd 	bls.w	8005ad2 <_printf_float+0x3ae>
 8005918:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800591c:	2200      	movs	r2, #0
 800591e:	2300      	movs	r3, #0
 8005920:	f7fb f8f6 	bl	8000b10 <__aeabi_dcmpeq>
 8005924:	2800      	cmp	r0, #0
 8005926:	d033      	beq.n	8005990 <_printf_float+0x26c>
 8005928:	2301      	movs	r3, #1
 800592a:	4631      	mov	r1, r6
 800592c:	4628      	mov	r0, r5
 800592e:	4a35      	ldr	r2, [pc, #212]	; (8005a04 <_printf_float+0x2e0>)
 8005930:	47b8      	blx	r7
 8005932:	3001      	adds	r0, #1
 8005934:	f43f af51 	beq.w	80057da <_printf_float+0xb6>
 8005938:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800593c:	429a      	cmp	r2, r3
 800593e:	db02      	blt.n	8005946 <_printf_float+0x222>
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	07d8      	lsls	r0, r3, #31
 8005944:	d50f      	bpl.n	8005966 <_printf_float+0x242>
 8005946:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800594a:	4631      	mov	r1, r6
 800594c:	4628      	mov	r0, r5
 800594e:	47b8      	blx	r7
 8005950:	3001      	adds	r0, #1
 8005952:	f43f af42 	beq.w	80057da <_printf_float+0xb6>
 8005956:	f04f 0800 	mov.w	r8, #0
 800595a:	f104 091a 	add.w	r9, r4, #26
 800595e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005960:	3b01      	subs	r3, #1
 8005962:	4543      	cmp	r3, r8
 8005964:	dc09      	bgt.n	800597a <_printf_float+0x256>
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	079b      	lsls	r3, r3, #30
 800596a:	f100 8102 	bmi.w	8005b72 <_printf_float+0x44e>
 800596e:	68e0      	ldr	r0, [r4, #12]
 8005970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005972:	4298      	cmp	r0, r3
 8005974:	bfb8      	it	lt
 8005976:	4618      	movlt	r0, r3
 8005978:	e731      	b.n	80057de <_printf_float+0xba>
 800597a:	2301      	movs	r3, #1
 800597c:	464a      	mov	r2, r9
 800597e:	4631      	mov	r1, r6
 8005980:	4628      	mov	r0, r5
 8005982:	47b8      	blx	r7
 8005984:	3001      	adds	r0, #1
 8005986:	f43f af28 	beq.w	80057da <_printf_float+0xb6>
 800598a:	f108 0801 	add.w	r8, r8, #1
 800598e:	e7e6      	b.n	800595e <_printf_float+0x23a>
 8005990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005992:	2b00      	cmp	r3, #0
 8005994:	dc38      	bgt.n	8005a08 <_printf_float+0x2e4>
 8005996:	2301      	movs	r3, #1
 8005998:	4631      	mov	r1, r6
 800599a:	4628      	mov	r0, r5
 800599c:	4a19      	ldr	r2, [pc, #100]	; (8005a04 <_printf_float+0x2e0>)
 800599e:	47b8      	blx	r7
 80059a0:	3001      	adds	r0, #1
 80059a2:	f43f af1a 	beq.w	80057da <_printf_float+0xb6>
 80059a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059aa:	4313      	orrs	r3, r2
 80059ac:	d102      	bne.n	80059b4 <_printf_float+0x290>
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	07d9      	lsls	r1, r3, #31
 80059b2:	d5d8      	bpl.n	8005966 <_printf_float+0x242>
 80059b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059b8:	4631      	mov	r1, r6
 80059ba:	4628      	mov	r0, r5
 80059bc:	47b8      	blx	r7
 80059be:	3001      	adds	r0, #1
 80059c0:	f43f af0b 	beq.w	80057da <_printf_float+0xb6>
 80059c4:	f04f 0900 	mov.w	r9, #0
 80059c8:	f104 0a1a 	add.w	sl, r4, #26
 80059cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059ce:	425b      	negs	r3, r3
 80059d0:	454b      	cmp	r3, r9
 80059d2:	dc01      	bgt.n	80059d8 <_printf_float+0x2b4>
 80059d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059d6:	e794      	b.n	8005902 <_printf_float+0x1de>
 80059d8:	2301      	movs	r3, #1
 80059da:	4652      	mov	r2, sl
 80059dc:	4631      	mov	r1, r6
 80059de:	4628      	mov	r0, r5
 80059e0:	47b8      	blx	r7
 80059e2:	3001      	adds	r0, #1
 80059e4:	f43f aef9 	beq.w	80057da <_printf_float+0xb6>
 80059e8:	f109 0901 	add.w	r9, r9, #1
 80059ec:	e7ee      	b.n	80059cc <_printf_float+0x2a8>
 80059ee:	bf00      	nop
 80059f0:	7fefffff 	.word	0x7fefffff
 80059f4:	0801accc 	.word	0x0801accc
 80059f8:	0801acd0 	.word	0x0801acd0
 80059fc:	0801acd8 	.word	0x0801acd8
 8005a00:	0801acd4 	.word	0x0801acd4
 8005a04:	0801acdc 	.word	0x0801acdc
 8005a08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	bfa8      	it	ge
 8005a10:	461a      	movge	r2, r3
 8005a12:	2a00      	cmp	r2, #0
 8005a14:	4691      	mov	r9, r2
 8005a16:	dc37      	bgt.n	8005a88 <_printf_float+0x364>
 8005a18:	f04f 0b00 	mov.w	fp, #0
 8005a1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a20:	f104 021a 	add.w	r2, r4, #26
 8005a24:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005a28:	ebaa 0309 	sub.w	r3, sl, r9
 8005a2c:	455b      	cmp	r3, fp
 8005a2e:	dc33      	bgt.n	8005a98 <_printf_float+0x374>
 8005a30:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a34:	429a      	cmp	r2, r3
 8005a36:	db3b      	blt.n	8005ab0 <_printf_float+0x38c>
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	07da      	lsls	r2, r3, #31
 8005a3c:	d438      	bmi.n	8005ab0 <_printf_float+0x38c>
 8005a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a40:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005a42:	eba3 020a 	sub.w	r2, r3, sl
 8005a46:	eba3 0901 	sub.w	r9, r3, r1
 8005a4a:	4591      	cmp	r9, r2
 8005a4c:	bfa8      	it	ge
 8005a4e:	4691      	movge	r9, r2
 8005a50:	f1b9 0f00 	cmp.w	r9, #0
 8005a54:	dc34      	bgt.n	8005ac0 <_printf_float+0x39c>
 8005a56:	f04f 0800 	mov.w	r8, #0
 8005a5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a5e:	f104 0a1a 	add.w	sl, r4, #26
 8005a62:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a66:	1a9b      	subs	r3, r3, r2
 8005a68:	eba3 0309 	sub.w	r3, r3, r9
 8005a6c:	4543      	cmp	r3, r8
 8005a6e:	f77f af7a 	ble.w	8005966 <_printf_float+0x242>
 8005a72:	2301      	movs	r3, #1
 8005a74:	4652      	mov	r2, sl
 8005a76:	4631      	mov	r1, r6
 8005a78:	4628      	mov	r0, r5
 8005a7a:	47b8      	blx	r7
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	f43f aeac 	beq.w	80057da <_printf_float+0xb6>
 8005a82:	f108 0801 	add.w	r8, r8, #1
 8005a86:	e7ec      	b.n	8005a62 <_printf_float+0x33e>
 8005a88:	4613      	mov	r3, r2
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	4642      	mov	r2, r8
 8005a8e:	4628      	mov	r0, r5
 8005a90:	47b8      	blx	r7
 8005a92:	3001      	adds	r0, #1
 8005a94:	d1c0      	bne.n	8005a18 <_printf_float+0x2f4>
 8005a96:	e6a0      	b.n	80057da <_printf_float+0xb6>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005aa0:	47b8      	blx	r7
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	f43f ae99 	beq.w	80057da <_printf_float+0xb6>
 8005aa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005aaa:	f10b 0b01 	add.w	fp, fp, #1
 8005aae:	e7b9      	b.n	8005a24 <_printf_float+0x300>
 8005ab0:	4631      	mov	r1, r6
 8005ab2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	47b8      	blx	r7
 8005aba:	3001      	adds	r0, #1
 8005abc:	d1bf      	bne.n	8005a3e <_printf_float+0x31a>
 8005abe:	e68c      	b.n	80057da <_printf_float+0xb6>
 8005ac0:	464b      	mov	r3, r9
 8005ac2:	4631      	mov	r1, r6
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	eb08 020a 	add.w	r2, r8, sl
 8005aca:	47b8      	blx	r7
 8005acc:	3001      	adds	r0, #1
 8005ace:	d1c2      	bne.n	8005a56 <_printf_float+0x332>
 8005ad0:	e683      	b.n	80057da <_printf_float+0xb6>
 8005ad2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ad4:	2a01      	cmp	r2, #1
 8005ad6:	dc01      	bgt.n	8005adc <_printf_float+0x3b8>
 8005ad8:	07db      	lsls	r3, r3, #31
 8005ada:	d537      	bpl.n	8005b4c <_printf_float+0x428>
 8005adc:	2301      	movs	r3, #1
 8005ade:	4642      	mov	r2, r8
 8005ae0:	4631      	mov	r1, r6
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	47b8      	blx	r7
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	f43f ae77 	beq.w	80057da <_printf_float+0xb6>
 8005aec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005af0:	4631      	mov	r1, r6
 8005af2:	4628      	mov	r0, r5
 8005af4:	47b8      	blx	r7
 8005af6:	3001      	adds	r0, #1
 8005af8:	f43f ae6f 	beq.w	80057da <_printf_float+0xb6>
 8005afc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b00:	2200      	movs	r2, #0
 8005b02:	2300      	movs	r3, #0
 8005b04:	f7fb f804 	bl	8000b10 <__aeabi_dcmpeq>
 8005b08:	b9d8      	cbnz	r0, 8005b42 <_printf_float+0x41e>
 8005b0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b0c:	f108 0201 	add.w	r2, r8, #1
 8005b10:	3b01      	subs	r3, #1
 8005b12:	4631      	mov	r1, r6
 8005b14:	4628      	mov	r0, r5
 8005b16:	47b8      	blx	r7
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d10e      	bne.n	8005b3a <_printf_float+0x416>
 8005b1c:	e65d      	b.n	80057da <_printf_float+0xb6>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	464a      	mov	r2, r9
 8005b22:	4631      	mov	r1, r6
 8005b24:	4628      	mov	r0, r5
 8005b26:	47b8      	blx	r7
 8005b28:	3001      	adds	r0, #1
 8005b2a:	f43f ae56 	beq.w	80057da <_printf_float+0xb6>
 8005b2e:	f108 0801 	add.w	r8, r8, #1
 8005b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b34:	3b01      	subs	r3, #1
 8005b36:	4543      	cmp	r3, r8
 8005b38:	dcf1      	bgt.n	8005b1e <_printf_float+0x3fa>
 8005b3a:	4653      	mov	r3, sl
 8005b3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b40:	e6e0      	b.n	8005904 <_printf_float+0x1e0>
 8005b42:	f04f 0800 	mov.w	r8, #0
 8005b46:	f104 091a 	add.w	r9, r4, #26
 8005b4a:	e7f2      	b.n	8005b32 <_printf_float+0x40e>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	4642      	mov	r2, r8
 8005b50:	e7df      	b.n	8005b12 <_printf_float+0x3ee>
 8005b52:	2301      	movs	r3, #1
 8005b54:	464a      	mov	r2, r9
 8005b56:	4631      	mov	r1, r6
 8005b58:	4628      	mov	r0, r5
 8005b5a:	47b8      	blx	r7
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	f43f ae3c 	beq.w	80057da <_printf_float+0xb6>
 8005b62:	f108 0801 	add.w	r8, r8, #1
 8005b66:	68e3      	ldr	r3, [r4, #12]
 8005b68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b6a:	1a5b      	subs	r3, r3, r1
 8005b6c:	4543      	cmp	r3, r8
 8005b6e:	dcf0      	bgt.n	8005b52 <_printf_float+0x42e>
 8005b70:	e6fd      	b.n	800596e <_printf_float+0x24a>
 8005b72:	f04f 0800 	mov.w	r8, #0
 8005b76:	f104 0919 	add.w	r9, r4, #25
 8005b7a:	e7f4      	b.n	8005b66 <_printf_float+0x442>

08005b7c <_printf_common>:
 8005b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b80:	4616      	mov	r6, r2
 8005b82:	4699      	mov	r9, r3
 8005b84:	688a      	ldr	r2, [r1, #8]
 8005b86:	690b      	ldr	r3, [r1, #16]
 8005b88:	4607      	mov	r7, r0
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	bfb8      	it	lt
 8005b8e:	4613      	movlt	r3, r2
 8005b90:	6033      	str	r3, [r6, #0]
 8005b92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b96:	460c      	mov	r4, r1
 8005b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b9c:	b10a      	cbz	r2, 8005ba2 <_printf_common+0x26>
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	6033      	str	r3, [r6, #0]
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	0699      	lsls	r1, r3, #26
 8005ba6:	bf42      	ittt	mi
 8005ba8:	6833      	ldrmi	r3, [r6, #0]
 8005baa:	3302      	addmi	r3, #2
 8005bac:	6033      	strmi	r3, [r6, #0]
 8005bae:	6825      	ldr	r5, [r4, #0]
 8005bb0:	f015 0506 	ands.w	r5, r5, #6
 8005bb4:	d106      	bne.n	8005bc4 <_printf_common+0x48>
 8005bb6:	f104 0a19 	add.w	sl, r4, #25
 8005bba:	68e3      	ldr	r3, [r4, #12]
 8005bbc:	6832      	ldr	r2, [r6, #0]
 8005bbe:	1a9b      	subs	r3, r3, r2
 8005bc0:	42ab      	cmp	r3, r5
 8005bc2:	dc28      	bgt.n	8005c16 <_printf_common+0x9a>
 8005bc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bc8:	1e13      	subs	r3, r2, #0
 8005bca:	6822      	ldr	r2, [r4, #0]
 8005bcc:	bf18      	it	ne
 8005bce:	2301      	movne	r3, #1
 8005bd0:	0692      	lsls	r2, r2, #26
 8005bd2:	d42d      	bmi.n	8005c30 <_printf_common+0xb4>
 8005bd4:	4649      	mov	r1, r9
 8005bd6:	4638      	mov	r0, r7
 8005bd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bdc:	47c0      	blx	r8
 8005bde:	3001      	adds	r0, #1
 8005be0:	d020      	beq.n	8005c24 <_printf_common+0xa8>
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	68e5      	ldr	r5, [r4, #12]
 8005be6:	f003 0306 	and.w	r3, r3, #6
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	bf18      	it	ne
 8005bee:	2500      	movne	r5, #0
 8005bf0:	6832      	ldr	r2, [r6, #0]
 8005bf2:	f04f 0600 	mov.w	r6, #0
 8005bf6:	68a3      	ldr	r3, [r4, #8]
 8005bf8:	bf08      	it	eq
 8005bfa:	1aad      	subeq	r5, r5, r2
 8005bfc:	6922      	ldr	r2, [r4, #16]
 8005bfe:	bf08      	it	eq
 8005c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c04:	4293      	cmp	r3, r2
 8005c06:	bfc4      	itt	gt
 8005c08:	1a9b      	subgt	r3, r3, r2
 8005c0a:	18ed      	addgt	r5, r5, r3
 8005c0c:	341a      	adds	r4, #26
 8005c0e:	42b5      	cmp	r5, r6
 8005c10:	d11a      	bne.n	8005c48 <_printf_common+0xcc>
 8005c12:	2000      	movs	r0, #0
 8005c14:	e008      	b.n	8005c28 <_printf_common+0xac>
 8005c16:	2301      	movs	r3, #1
 8005c18:	4652      	mov	r2, sl
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	4638      	mov	r0, r7
 8005c1e:	47c0      	blx	r8
 8005c20:	3001      	adds	r0, #1
 8005c22:	d103      	bne.n	8005c2c <_printf_common+0xb0>
 8005c24:	f04f 30ff 	mov.w	r0, #4294967295
 8005c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c2c:	3501      	adds	r5, #1
 8005c2e:	e7c4      	b.n	8005bba <_printf_common+0x3e>
 8005c30:	2030      	movs	r0, #48	; 0x30
 8005c32:	18e1      	adds	r1, r4, r3
 8005c34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c3e:	4422      	add	r2, r4
 8005c40:	3302      	adds	r3, #2
 8005c42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c46:	e7c5      	b.n	8005bd4 <_printf_common+0x58>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	4622      	mov	r2, r4
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	4638      	mov	r0, r7
 8005c50:	47c0      	blx	r8
 8005c52:	3001      	adds	r0, #1
 8005c54:	d0e6      	beq.n	8005c24 <_printf_common+0xa8>
 8005c56:	3601      	adds	r6, #1
 8005c58:	e7d9      	b.n	8005c0e <_printf_common+0x92>
	...

08005c5c <_printf_i>:
 8005c5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c60:	7e0f      	ldrb	r7, [r1, #24]
 8005c62:	4691      	mov	r9, r2
 8005c64:	2f78      	cmp	r7, #120	; 0x78
 8005c66:	4680      	mov	r8, r0
 8005c68:	460c      	mov	r4, r1
 8005c6a:	469a      	mov	sl, r3
 8005c6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c72:	d807      	bhi.n	8005c84 <_printf_i+0x28>
 8005c74:	2f62      	cmp	r7, #98	; 0x62
 8005c76:	d80a      	bhi.n	8005c8e <_printf_i+0x32>
 8005c78:	2f00      	cmp	r7, #0
 8005c7a:	f000 80d9 	beq.w	8005e30 <_printf_i+0x1d4>
 8005c7e:	2f58      	cmp	r7, #88	; 0x58
 8005c80:	f000 80a4 	beq.w	8005dcc <_printf_i+0x170>
 8005c84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c8c:	e03a      	b.n	8005d04 <_printf_i+0xa8>
 8005c8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c92:	2b15      	cmp	r3, #21
 8005c94:	d8f6      	bhi.n	8005c84 <_printf_i+0x28>
 8005c96:	a101      	add	r1, pc, #4	; (adr r1, 8005c9c <_printf_i+0x40>)
 8005c98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c9c:	08005cf5 	.word	0x08005cf5
 8005ca0:	08005d09 	.word	0x08005d09
 8005ca4:	08005c85 	.word	0x08005c85
 8005ca8:	08005c85 	.word	0x08005c85
 8005cac:	08005c85 	.word	0x08005c85
 8005cb0:	08005c85 	.word	0x08005c85
 8005cb4:	08005d09 	.word	0x08005d09
 8005cb8:	08005c85 	.word	0x08005c85
 8005cbc:	08005c85 	.word	0x08005c85
 8005cc0:	08005c85 	.word	0x08005c85
 8005cc4:	08005c85 	.word	0x08005c85
 8005cc8:	08005e17 	.word	0x08005e17
 8005ccc:	08005d39 	.word	0x08005d39
 8005cd0:	08005df9 	.word	0x08005df9
 8005cd4:	08005c85 	.word	0x08005c85
 8005cd8:	08005c85 	.word	0x08005c85
 8005cdc:	08005e39 	.word	0x08005e39
 8005ce0:	08005c85 	.word	0x08005c85
 8005ce4:	08005d39 	.word	0x08005d39
 8005ce8:	08005c85 	.word	0x08005c85
 8005cec:	08005c85 	.word	0x08005c85
 8005cf0:	08005e01 	.word	0x08005e01
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	1d1a      	adds	r2, r3, #4
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	602a      	str	r2, [r5, #0]
 8005cfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d04:	2301      	movs	r3, #1
 8005d06:	e0a4      	b.n	8005e52 <_printf_i+0x1f6>
 8005d08:	6820      	ldr	r0, [r4, #0]
 8005d0a:	6829      	ldr	r1, [r5, #0]
 8005d0c:	0606      	lsls	r6, r0, #24
 8005d0e:	f101 0304 	add.w	r3, r1, #4
 8005d12:	d50a      	bpl.n	8005d2a <_printf_i+0xce>
 8005d14:	680e      	ldr	r6, [r1, #0]
 8005d16:	602b      	str	r3, [r5, #0]
 8005d18:	2e00      	cmp	r6, #0
 8005d1a:	da03      	bge.n	8005d24 <_printf_i+0xc8>
 8005d1c:	232d      	movs	r3, #45	; 0x2d
 8005d1e:	4276      	negs	r6, r6
 8005d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d24:	230a      	movs	r3, #10
 8005d26:	485e      	ldr	r0, [pc, #376]	; (8005ea0 <_printf_i+0x244>)
 8005d28:	e019      	b.n	8005d5e <_printf_i+0x102>
 8005d2a:	680e      	ldr	r6, [r1, #0]
 8005d2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d30:	602b      	str	r3, [r5, #0]
 8005d32:	bf18      	it	ne
 8005d34:	b236      	sxthne	r6, r6
 8005d36:	e7ef      	b.n	8005d18 <_printf_i+0xbc>
 8005d38:	682b      	ldr	r3, [r5, #0]
 8005d3a:	6820      	ldr	r0, [r4, #0]
 8005d3c:	1d19      	adds	r1, r3, #4
 8005d3e:	6029      	str	r1, [r5, #0]
 8005d40:	0601      	lsls	r1, r0, #24
 8005d42:	d501      	bpl.n	8005d48 <_printf_i+0xec>
 8005d44:	681e      	ldr	r6, [r3, #0]
 8005d46:	e002      	b.n	8005d4e <_printf_i+0xf2>
 8005d48:	0646      	lsls	r6, r0, #25
 8005d4a:	d5fb      	bpl.n	8005d44 <_printf_i+0xe8>
 8005d4c:	881e      	ldrh	r6, [r3, #0]
 8005d4e:	2f6f      	cmp	r7, #111	; 0x6f
 8005d50:	bf0c      	ite	eq
 8005d52:	2308      	moveq	r3, #8
 8005d54:	230a      	movne	r3, #10
 8005d56:	4852      	ldr	r0, [pc, #328]	; (8005ea0 <_printf_i+0x244>)
 8005d58:	2100      	movs	r1, #0
 8005d5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d5e:	6865      	ldr	r5, [r4, #4]
 8005d60:	2d00      	cmp	r5, #0
 8005d62:	bfa8      	it	ge
 8005d64:	6821      	ldrge	r1, [r4, #0]
 8005d66:	60a5      	str	r5, [r4, #8]
 8005d68:	bfa4      	itt	ge
 8005d6a:	f021 0104 	bicge.w	r1, r1, #4
 8005d6e:	6021      	strge	r1, [r4, #0]
 8005d70:	b90e      	cbnz	r6, 8005d76 <_printf_i+0x11a>
 8005d72:	2d00      	cmp	r5, #0
 8005d74:	d04d      	beq.n	8005e12 <_printf_i+0x1b6>
 8005d76:	4615      	mov	r5, r2
 8005d78:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d7c:	fb03 6711 	mls	r7, r3, r1, r6
 8005d80:	5dc7      	ldrb	r7, [r0, r7]
 8005d82:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d86:	4637      	mov	r7, r6
 8005d88:	42bb      	cmp	r3, r7
 8005d8a:	460e      	mov	r6, r1
 8005d8c:	d9f4      	bls.n	8005d78 <_printf_i+0x11c>
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d10b      	bne.n	8005daa <_printf_i+0x14e>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	07de      	lsls	r6, r3, #31
 8005d96:	d508      	bpl.n	8005daa <_printf_i+0x14e>
 8005d98:	6923      	ldr	r3, [r4, #16]
 8005d9a:	6861      	ldr	r1, [r4, #4]
 8005d9c:	4299      	cmp	r1, r3
 8005d9e:	bfde      	ittt	le
 8005da0:	2330      	movle	r3, #48	; 0x30
 8005da2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005da6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005daa:	1b52      	subs	r2, r2, r5
 8005dac:	6122      	str	r2, [r4, #16]
 8005dae:	464b      	mov	r3, r9
 8005db0:	4621      	mov	r1, r4
 8005db2:	4640      	mov	r0, r8
 8005db4:	f8cd a000 	str.w	sl, [sp]
 8005db8:	aa03      	add	r2, sp, #12
 8005dba:	f7ff fedf 	bl	8005b7c <_printf_common>
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	d14c      	bne.n	8005e5c <_printf_i+0x200>
 8005dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc6:	b004      	add	sp, #16
 8005dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dcc:	4834      	ldr	r0, [pc, #208]	; (8005ea0 <_printf_i+0x244>)
 8005dce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005dd2:	6829      	ldr	r1, [r5, #0]
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	f851 6b04 	ldr.w	r6, [r1], #4
 8005dda:	6029      	str	r1, [r5, #0]
 8005ddc:	061d      	lsls	r5, r3, #24
 8005dde:	d514      	bpl.n	8005e0a <_printf_i+0x1ae>
 8005de0:	07df      	lsls	r7, r3, #31
 8005de2:	bf44      	itt	mi
 8005de4:	f043 0320 	orrmi.w	r3, r3, #32
 8005de8:	6023      	strmi	r3, [r4, #0]
 8005dea:	b91e      	cbnz	r6, 8005df4 <_printf_i+0x198>
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	f023 0320 	bic.w	r3, r3, #32
 8005df2:	6023      	str	r3, [r4, #0]
 8005df4:	2310      	movs	r3, #16
 8005df6:	e7af      	b.n	8005d58 <_printf_i+0xfc>
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	f043 0320 	orr.w	r3, r3, #32
 8005dfe:	6023      	str	r3, [r4, #0]
 8005e00:	2378      	movs	r3, #120	; 0x78
 8005e02:	4828      	ldr	r0, [pc, #160]	; (8005ea4 <_printf_i+0x248>)
 8005e04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e08:	e7e3      	b.n	8005dd2 <_printf_i+0x176>
 8005e0a:	0659      	lsls	r1, r3, #25
 8005e0c:	bf48      	it	mi
 8005e0e:	b2b6      	uxthmi	r6, r6
 8005e10:	e7e6      	b.n	8005de0 <_printf_i+0x184>
 8005e12:	4615      	mov	r5, r2
 8005e14:	e7bb      	b.n	8005d8e <_printf_i+0x132>
 8005e16:	682b      	ldr	r3, [r5, #0]
 8005e18:	6826      	ldr	r6, [r4, #0]
 8005e1a:	1d18      	adds	r0, r3, #4
 8005e1c:	6961      	ldr	r1, [r4, #20]
 8005e1e:	6028      	str	r0, [r5, #0]
 8005e20:	0635      	lsls	r5, r6, #24
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	d501      	bpl.n	8005e2a <_printf_i+0x1ce>
 8005e26:	6019      	str	r1, [r3, #0]
 8005e28:	e002      	b.n	8005e30 <_printf_i+0x1d4>
 8005e2a:	0670      	lsls	r0, r6, #25
 8005e2c:	d5fb      	bpl.n	8005e26 <_printf_i+0x1ca>
 8005e2e:	8019      	strh	r1, [r3, #0]
 8005e30:	2300      	movs	r3, #0
 8005e32:	4615      	mov	r5, r2
 8005e34:	6123      	str	r3, [r4, #16]
 8005e36:	e7ba      	b.n	8005dae <_printf_i+0x152>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	1d1a      	adds	r2, r3, #4
 8005e3e:	602a      	str	r2, [r5, #0]
 8005e40:	681d      	ldr	r5, [r3, #0]
 8005e42:	6862      	ldr	r2, [r4, #4]
 8005e44:	4628      	mov	r0, r5
 8005e46:	f002 faed 	bl	8008424 <memchr>
 8005e4a:	b108      	cbz	r0, 8005e50 <_printf_i+0x1f4>
 8005e4c:	1b40      	subs	r0, r0, r5
 8005e4e:	6060      	str	r0, [r4, #4]
 8005e50:	6863      	ldr	r3, [r4, #4]
 8005e52:	6123      	str	r3, [r4, #16]
 8005e54:	2300      	movs	r3, #0
 8005e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e5a:	e7a8      	b.n	8005dae <_printf_i+0x152>
 8005e5c:	462a      	mov	r2, r5
 8005e5e:	4649      	mov	r1, r9
 8005e60:	4640      	mov	r0, r8
 8005e62:	6923      	ldr	r3, [r4, #16]
 8005e64:	47d0      	blx	sl
 8005e66:	3001      	adds	r0, #1
 8005e68:	d0ab      	beq.n	8005dc2 <_printf_i+0x166>
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	079b      	lsls	r3, r3, #30
 8005e6e:	d413      	bmi.n	8005e98 <_printf_i+0x23c>
 8005e70:	68e0      	ldr	r0, [r4, #12]
 8005e72:	9b03      	ldr	r3, [sp, #12]
 8005e74:	4298      	cmp	r0, r3
 8005e76:	bfb8      	it	lt
 8005e78:	4618      	movlt	r0, r3
 8005e7a:	e7a4      	b.n	8005dc6 <_printf_i+0x16a>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	4632      	mov	r2, r6
 8005e80:	4649      	mov	r1, r9
 8005e82:	4640      	mov	r0, r8
 8005e84:	47d0      	blx	sl
 8005e86:	3001      	adds	r0, #1
 8005e88:	d09b      	beq.n	8005dc2 <_printf_i+0x166>
 8005e8a:	3501      	adds	r5, #1
 8005e8c:	68e3      	ldr	r3, [r4, #12]
 8005e8e:	9903      	ldr	r1, [sp, #12]
 8005e90:	1a5b      	subs	r3, r3, r1
 8005e92:	42ab      	cmp	r3, r5
 8005e94:	dcf2      	bgt.n	8005e7c <_printf_i+0x220>
 8005e96:	e7eb      	b.n	8005e70 <_printf_i+0x214>
 8005e98:	2500      	movs	r5, #0
 8005e9a:	f104 0619 	add.w	r6, r4, #25
 8005e9e:	e7f5      	b.n	8005e8c <_printf_i+0x230>
 8005ea0:	0801acde 	.word	0x0801acde
 8005ea4:	0801acef 	.word	0x0801acef

08005ea8 <_scanf_float>:
 8005ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eac:	b087      	sub	sp, #28
 8005eae:	9303      	str	r3, [sp, #12]
 8005eb0:	688b      	ldr	r3, [r1, #8]
 8005eb2:	4617      	mov	r7, r2
 8005eb4:	1e5a      	subs	r2, r3, #1
 8005eb6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005eba:	bf85      	ittet	hi
 8005ebc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005ec0:	195b      	addhi	r3, r3, r5
 8005ec2:	2300      	movls	r3, #0
 8005ec4:	9302      	strhi	r3, [sp, #8]
 8005ec6:	bf88      	it	hi
 8005ec8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005ecc:	468b      	mov	fp, r1
 8005ece:	f04f 0500 	mov.w	r5, #0
 8005ed2:	bf8c      	ite	hi
 8005ed4:	608b      	strhi	r3, [r1, #8]
 8005ed6:	9302      	strls	r3, [sp, #8]
 8005ed8:	680b      	ldr	r3, [r1, #0]
 8005eda:	4680      	mov	r8, r0
 8005edc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005ee0:	f84b 3b1c 	str.w	r3, [fp], #28
 8005ee4:	460c      	mov	r4, r1
 8005ee6:	465e      	mov	r6, fp
 8005ee8:	46aa      	mov	sl, r5
 8005eea:	46a9      	mov	r9, r5
 8005eec:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005ef0:	9501      	str	r5, [sp, #4]
 8005ef2:	68a2      	ldr	r2, [r4, #8]
 8005ef4:	b152      	cbz	r2, 8005f0c <_scanf_float+0x64>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	2b4e      	cmp	r3, #78	; 0x4e
 8005efc:	d864      	bhi.n	8005fc8 <_scanf_float+0x120>
 8005efe:	2b40      	cmp	r3, #64	; 0x40
 8005f00:	d83c      	bhi.n	8005f7c <_scanf_float+0xd4>
 8005f02:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005f06:	b2c8      	uxtb	r0, r1
 8005f08:	280e      	cmp	r0, #14
 8005f0a:	d93a      	bls.n	8005f82 <_scanf_float+0xda>
 8005f0c:	f1b9 0f00 	cmp.w	r9, #0
 8005f10:	d003      	beq.n	8005f1a <_scanf_float+0x72>
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f18:	6023      	str	r3, [r4, #0]
 8005f1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f1e:	f1ba 0f01 	cmp.w	sl, #1
 8005f22:	f200 8113 	bhi.w	800614c <_scanf_float+0x2a4>
 8005f26:	455e      	cmp	r6, fp
 8005f28:	f200 8105 	bhi.w	8006136 <_scanf_float+0x28e>
 8005f2c:	2501      	movs	r5, #1
 8005f2e:	4628      	mov	r0, r5
 8005f30:	b007      	add	sp, #28
 8005f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f36:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005f3a:	2a0d      	cmp	r2, #13
 8005f3c:	d8e6      	bhi.n	8005f0c <_scanf_float+0x64>
 8005f3e:	a101      	add	r1, pc, #4	; (adr r1, 8005f44 <_scanf_float+0x9c>)
 8005f40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005f44:	08006083 	.word	0x08006083
 8005f48:	08005f0d 	.word	0x08005f0d
 8005f4c:	08005f0d 	.word	0x08005f0d
 8005f50:	08005f0d 	.word	0x08005f0d
 8005f54:	080060e3 	.word	0x080060e3
 8005f58:	080060bb 	.word	0x080060bb
 8005f5c:	08005f0d 	.word	0x08005f0d
 8005f60:	08005f0d 	.word	0x08005f0d
 8005f64:	08006091 	.word	0x08006091
 8005f68:	08005f0d 	.word	0x08005f0d
 8005f6c:	08005f0d 	.word	0x08005f0d
 8005f70:	08005f0d 	.word	0x08005f0d
 8005f74:	08005f0d 	.word	0x08005f0d
 8005f78:	08006049 	.word	0x08006049
 8005f7c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005f80:	e7db      	b.n	8005f3a <_scanf_float+0x92>
 8005f82:	290e      	cmp	r1, #14
 8005f84:	d8c2      	bhi.n	8005f0c <_scanf_float+0x64>
 8005f86:	a001      	add	r0, pc, #4	; (adr r0, 8005f8c <_scanf_float+0xe4>)
 8005f88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005f8c:	0800603b 	.word	0x0800603b
 8005f90:	08005f0d 	.word	0x08005f0d
 8005f94:	0800603b 	.word	0x0800603b
 8005f98:	080060cf 	.word	0x080060cf
 8005f9c:	08005f0d 	.word	0x08005f0d
 8005fa0:	08005fe9 	.word	0x08005fe9
 8005fa4:	08006025 	.word	0x08006025
 8005fa8:	08006025 	.word	0x08006025
 8005fac:	08006025 	.word	0x08006025
 8005fb0:	08006025 	.word	0x08006025
 8005fb4:	08006025 	.word	0x08006025
 8005fb8:	08006025 	.word	0x08006025
 8005fbc:	08006025 	.word	0x08006025
 8005fc0:	08006025 	.word	0x08006025
 8005fc4:	08006025 	.word	0x08006025
 8005fc8:	2b6e      	cmp	r3, #110	; 0x6e
 8005fca:	d809      	bhi.n	8005fe0 <_scanf_float+0x138>
 8005fcc:	2b60      	cmp	r3, #96	; 0x60
 8005fce:	d8b2      	bhi.n	8005f36 <_scanf_float+0x8e>
 8005fd0:	2b54      	cmp	r3, #84	; 0x54
 8005fd2:	d077      	beq.n	80060c4 <_scanf_float+0x21c>
 8005fd4:	2b59      	cmp	r3, #89	; 0x59
 8005fd6:	d199      	bne.n	8005f0c <_scanf_float+0x64>
 8005fd8:	2d07      	cmp	r5, #7
 8005fda:	d197      	bne.n	8005f0c <_scanf_float+0x64>
 8005fdc:	2508      	movs	r5, #8
 8005fde:	e029      	b.n	8006034 <_scanf_float+0x18c>
 8005fe0:	2b74      	cmp	r3, #116	; 0x74
 8005fe2:	d06f      	beq.n	80060c4 <_scanf_float+0x21c>
 8005fe4:	2b79      	cmp	r3, #121	; 0x79
 8005fe6:	e7f6      	b.n	8005fd6 <_scanf_float+0x12e>
 8005fe8:	6821      	ldr	r1, [r4, #0]
 8005fea:	05c8      	lsls	r0, r1, #23
 8005fec:	d51a      	bpl.n	8006024 <_scanf_float+0x17c>
 8005fee:	9b02      	ldr	r3, [sp, #8]
 8005ff0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005ff4:	6021      	str	r1, [r4, #0]
 8005ff6:	f109 0901 	add.w	r9, r9, #1
 8005ffa:	b11b      	cbz	r3, 8006004 <_scanf_float+0x15c>
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	3201      	adds	r2, #1
 8006000:	9302      	str	r3, [sp, #8]
 8006002:	60a2      	str	r2, [r4, #8]
 8006004:	68a3      	ldr	r3, [r4, #8]
 8006006:	3b01      	subs	r3, #1
 8006008:	60a3      	str	r3, [r4, #8]
 800600a:	6923      	ldr	r3, [r4, #16]
 800600c:	3301      	adds	r3, #1
 800600e:	6123      	str	r3, [r4, #16]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	3b01      	subs	r3, #1
 8006014:	2b00      	cmp	r3, #0
 8006016:	607b      	str	r3, [r7, #4]
 8006018:	f340 8084 	ble.w	8006124 <_scanf_float+0x27c>
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	3301      	adds	r3, #1
 8006020:	603b      	str	r3, [r7, #0]
 8006022:	e766      	b.n	8005ef2 <_scanf_float+0x4a>
 8006024:	eb1a 0f05 	cmn.w	sl, r5
 8006028:	f47f af70 	bne.w	8005f0c <_scanf_float+0x64>
 800602c:	6822      	ldr	r2, [r4, #0]
 800602e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006032:	6022      	str	r2, [r4, #0]
 8006034:	f806 3b01 	strb.w	r3, [r6], #1
 8006038:	e7e4      	b.n	8006004 <_scanf_float+0x15c>
 800603a:	6822      	ldr	r2, [r4, #0]
 800603c:	0610      	lsls	r0, r2, #24
 800603e:	f57f af65 	bpl.w	8005f0c <_scanf_float+0x64>
 8006042:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006046:	e7f4      	b.n	8006032 <_scanf_float+0x18a>
 8006048:	f1ba 0f00 	cmp.w	sl, #0
 800604c:	d10e      	bne.n	800606c <_scanf_float+0x1c4>
 800604e:	f1b9 0f00 	cmp.w	r9, #0
 8006052:	d10e      	bne.n	8006072 <_scanf_float+0x1ca>
 8006054:	6822      	ldr	r2, [r4, #0]
 8006056:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800605a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800605e:	d108      	bne.n	8006072 <_scanf_float+0x1ca>
 8006060:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006064:	f04f 0a01 	mov.w	sl, #1
 8006068:	6022      	str	r2, [r4, #0]
 800606a:	e7e3      	b.n	8006034 <_scanf_float+0x18c>
 800606c:	f1ba 0f02 	cmp.w	sl, #2
 8006070:	d055      	beq.n	800611e <_scanf_float+0x276>
 8006072:	2d01      	cmp	r5, #1
 8006074:	d002      	beq.n	800607c <_scanf_float+0x1d4>
 8006076:	2d04      	cmp	r5, #4
 8006078:	f47f af48 	bne.w	8005f0c <_scanf_float+0x64>
 800607c:	3501      	adds	r5, #1
 800607e:	b2ed      	uxtb	r5, r5
 8006080:	e7d8      	b.n	8006034 <_scanf_float+0x18c>
 8006082:	f1ba 0f01 	cmp.w	sl, #1
 8006086:	f47f af41 	bne.w	8005f0c <_scanf_float+0x64>
 800608a:	f04f 0a02 	mov.w	sl, #2
 800608e:	e7d1      	b.n	8006034 <_scanf_float+0x18c>
 8006090:	b97d      	cbnz	r5, 80060b2 <_scanf_float+0x20a>
 8006092:	f1b9 0f00 	cmp.w	r9, #0
 8006096:	f47f af3c 	bne.w	8005f12 <_scanf_float+0x6a>
 800609a:	6822      	ldr	r2, [r4, #0]
 800609c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80060a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80060a4:	f47f af39 	bne.w	8005f1a <_scanf_float+0x72>
 80060a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80060ac:	2501      	movs	r5, #1
 80060ae:	6022      	str	r2, [r4, #0]
 80060b0:	e7c0      	b.n	8006034 <_scanf_float+0x18c>
 80060b2:	2d03      	cmp	r5, #3
 80060b4:	d0e2      	beq.n	800607c <_scanf_float+0x1d4>
 80060b6:	2d05      	cmp	r5, #5
 80060b8:	e7de      	b.n	8006078 <_scanf_float+0x1d0>
 80060ba:	2d02      	cmp	r5, #2
 80060bc:	f47f af26 	bne.w	8005f0c <_scanf_float+0x64>
 80060c0:	2503      	movs	r5, #3
 80060c2:	e7b7      	b.n	8006034 <_scanf_float+0x18c>
 80060c4:	2d06      	cmp	r5, #6
 80060c6:	f47f af21 	bne.w	8005f0c <_scanf_float+0x64>
 80060ca:	2507      	movs	r5, #7
 80060cc:	e7b2      	b.n	8006034 <_scanf_float+0x18c>
 80060ce:	6822      	ldr	r2, [r4, #0]
 80060d0:	0591      	lsls	r1, r2, #22
 80060d2:	f57f af1b 	bpl.w	8005f0c <_scanf_float+0x64>
 80060d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80060da:	6022      	str	r2, [r4, #0]
 80060dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80060e0:	e7a8      	b.n	8006034 <_scanf_float+0x18c>
 80060e2:	6822      	ldr	r2, [r4, #0]
 80060e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80060e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80060ec:	d006      	beq.n	80060fc <_scanf_float+0x254>
 80060ee:	0550      	lsls	r0, r2, #21
 80060f0:	f57f af0c 	bpl.w	8005f0c <_scanf_float+0x64>
 80060f4:	f1b9 0f00 	cmp.w	r9, #0
 80060f8:	f43f af0f 	beq.w	8005f1a <_scanf_float+0x72>
 80060fc:	0591      	lsls	r1, r2, #22
 80060fe:	bf58      	it	pl
 8006100:	9901      	ldrpl	r1, [sp, #4]
 8006102:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006106:	bf58      	it	pl
 8006108:	eba9 0101 	subpl.w	r1, r9, r1
 800610c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006110:	f04f 0900 	mov.w	r9, #0
 8006114:	bf58      	it	pl
 8006116:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800611a:	6022      	str	r2, [r4, #0]
 800611c:	e78a      	b.n	8006034 <_scanf_float+0x18c>
 800611e:	f04f 0a03 	mov.w	sl, #3
 8006122:	e787      	b.n	8006034 <_scanf_float+0x18c>
 8006124:	4639      	mov	r1, r7
 8006126:	4640      	mov	r0, r8
 8006128:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800612c:	4798      	blx	r3
 800612e:	2800      	cmp	r0, #0
 8006130:	f43f aedf 	beq.w	8005ef2 <_scanf_float+0x4a>
 8006134:	e6ea      	b.n	8005f0c <_scanf_float+0x64>
 8006136:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800613a:	463a      	mov	r2, r7
 800613c:	4640      	mov	r0, r8
 800613e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006142:	4798      	blx	r3
 8006144:	6923      	ldr	r3, [r4, #16]
 8006146:	3b01      	subs	r3, #1
 8006148:	6123      	str	r3, [r4, #16]
 800614a:	e6ec      	b.n	8005f26 <_scanf_float+0x7e>
 800614c:	1e6b      	subs	r3, r5, #1
 800614e:	2b06      	cmp	r3, #6
 8006150:	d825      	bhi.n	800619e <_scanf_float+0x2f6>
 8006152:	2d02      	cmp	r5, #2
 8006154:	d836      	bhi.n	80061c4 <_scanf_float+0x31c>
 8006156:	455e      	cmp	r6, fp
 8006158:	f67f aee8 	bls.w	8005f2c <_scanf_float+0x84>
 800615c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006160:	463a      	mov	r2, r7
 8006162:	4640      	mov	r0, r8
 8006164:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006168:	4798      	blx	r3
 800616a:	6923      	ldr	r3, [r4, #16]
 800616c:	3b01      	subs	r3, #1
 800616e:	6123      	str	r3, [r4, #16]
 8006170:	e7f1      	b.n	8006156 <_scanf_float+0x2ae>
 8006172:	9802      	ldr	r0, [sp, #8]
 8006174:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006178:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800617c:	463a      	mov	r2, r7
 800617e:	9002      	str	r0, [sp, #8]
 8006180:	4640      	mov	r0, r8
 8006182:	4798      	blx	r3
 8006184:	6923      	ldr	r3, [r4, #16]
 8006186:	3b01      	subs	r3, #1
 8006188:	6123      	str	r3, [r4, #16]
 800618a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800618e:	fa5f fa8a 	uxtb.w	sl, sl
 8006192:	f1ba 0f02 	cmp.w	sl, #2
 8006196:	d1ec      	bne.n	8006172 <_scanf_float+0x2ca>
 8006198:	3d03      	subs	r5, #3
 800619a:	b2ed      	uxtb	r5, r5
 800619c:	1b76      	subs	r6, r6, r5
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	05da      	lsls	r2, r3, #23
 80061a2:	d52f      	bpl.n	8006204 <_scanf_float+0x35c>
 80061a4:	055b      	lsls	r3, r3, #21
 80061a6:	d510      	bpl.n	80061ca <_scanf_float+0x322>
 80061a8:	455e      	cmp	r6, fp
 80061aa:	f67f aebf 	bls.w	8005f2c <_scanf_float+0x84>
 80061ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061b2:	463a      	mov	r2, r7
 80061b4:	4640      	mov	r0, r8
 80061b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061ba:	4798      	blx	r3
 80061bc:	6923      	ldr	r3, [r4, #16]
 80061be:	3b01      	subs	r3, #1
 80061c0:	6123      	str	r3, [r4, #16]
 80061c2:	e7f1      	b.n	80061a8 <_scanf_float+0x300>
 80061c4:	46aa      	mov	sl, r5
 80061c6:	9602      	str	r6, [sp, #8]
 80061c8:	e7df      	b.n	800618a <_scanf_float+0x2e2>
 80061ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80061ce:	6923      	ldr	r3, [r4, #16]
 80061d0:	2965      	cmp	r1, #101	; 0x65
 80061d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80061d6:	f106 35ff 	add.w	r5, r6, #4294967295
 80061da:	6123      	str	r3, [r4, #16]
 80061dc:	d00c      	beq.n	80061f8 <_scanf_float+0x350>
 80061de:	2945      	cmp	r1, #69	; 0x45
 80061e0:	d00a      	beq.n	80061f8 <_scanf_float+0x350>
 80061e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061e6:	463a      	mov	r2, r7
 80061e8:	4640      	mov	r0, r8
 80061ea:	4798      	blx	r3
 80061ec:	6923      	ldr	r3, [r4, #16]
 80061ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	1eb5      	subs	r5, r6, #2
 80061f6:	6123      	str	r3, [r4, #16]
 80061f8:	463a      	mov	r2, r7
 80061fa:	4640      	mov	r0, r8
 80061fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006200:	4798      	blx	r3
 8006202:	462e      	mov	r6, r5
 8006204:	6825      	ldr	r5, [r4, #0]
 8006206:	f015 0510 	ands.w	r5, r5, #16
 800620a:	d155      	bne.n	80062b8 <_scanf_float+0x410>
 800620c:	7035      	strb	r5, [r6, #0]
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006218:	d11b      	bne.n	8006252 <_scanf_float+0x3aa>
 800621a:	9b01      	ldr	r3, [sp, #4]
 800621c:	454b      	cmp	r3, r9
 800621e:	eba3 0209 	sub.w	r2, r3, r9
 8006222:	d123      	bne.n	800626c <_scanf_float+0x3c4>
 8006224:	2200      	movs	r2, #0
 8006226:	4659      	mov	r1, fp
 8006228:	4640      	mov	r0, r8
 800622a:	f000 fe79 	bl	8006f20 <_strtod_r>
 800622e:	6822      	ldr	r2, [r4, #0]
 8006230:	9b03      	ldr	r3, [sp, #12]
 8006232:	f012 0f02 	tst.w	r2, #2
 8006236:	4606      	mov	r6, r0
 8006238:	460f      	mov	r7, r1
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	d021      	beq.n	8006282 <_scanf_float+0x3da>
 800623e:	1d1a      	adds	r2, r3, #4
 8006240:	9903      	ldr	r1, [sp, #12]
 8006242:	600a      	str	r2, [r1, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	e9c3 6700 	strd	r6, r7, [r3]
 800624a:	68e3      	ldr	r3, [r4, #12]
 800624c:	3301      	adds	r3, #1
 800624e:	60e3      	str	r3, [r4, #12]
 8006250:	e66d      	b.n	8005f2e <_scanf_float+0x86>
 8006252:	9b04      	ldr	r3, [sp, #16]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0e5      	beq.n	8006224 <_scanf_float+0x37c>
 8006258:	9905      	ldr	r1, [sp, #20]
 800625a:	230a      	movs	r3, #10
 800625c:	462a      	mov	r2, r5
 800625e:	4640      	mov	r0, r8
 8006260:	3101      	adds	r1, #1
 8006262:	f000 fedf 	bl	8007024 <_strtol_r>
 8006266:	9b04      	ldr	r3, [sp, #16]
 8006268:	9e05      	ldr	r6, [sp, #20]
 800626a:	1ac2      	subs	r2, r0, r3
 800626c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006270:	429e      	cmp	r6, r3
 8006272:	bf28      	it	cs
 8006274:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006278:	4630      	mov	r0, r6
 800627a:	4910      	ldr	r1, [pc, #64]	; (80062bc <_scanf_float+0x414>)
 800627c:	f000 f826 	bl	80062cc <siprintf>
 8006280:	e7d0      	b.n	8006224 <_scanf_float+0x37c>
 8006282:	f012 0f04 	tst.w	r2, #4
 8006286:	f103 0204 	add.w	r2, r3, #4
 800628a:	d1d9      	bne.n	8006240 <_scanf_float+0x398>
 800628c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006290:	f8cc 2000 	str.w	r2, [ip]
 8006294:	f8d3 8000 	ldr.w	r8, [r3]
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	f7fa fc6a 	bl	8000b74 <__aeabi_dcmpun>
 80062a0:	b128      	cbz	r0, 80062ae <_scanf_float+0x406>
 80062a2:	4807      	ldr	r0, [pc, #28]	; (80062c0 <_scanf_float+0x418>)
 80062a4:	f000 f80e 	bl	80062c4 <nanf>
 80062a8:	f8c8 0000 	str.w	r0, [r8]
 80062ac:	e7cd      	b.n	800624a <_scanf_float+0x3a2>
 80062ae:	4630      	mov	r0, r6
 80062b0:	4639      	mov	r1, r7
 80062b2:	f7fa fcbd 	bl	8000c30 <__aeabi_d2f>
 80062b6:	e7f7      	b.n	80062a8 <_scanf_float+0x400>
 80062b8:	2500      	movs	r5, #0
 80062ba:	e638      	b.n	8005f2e <_scanf_float+0x86>
 80062bc:	0801ad00 	.word	0x0801ad00
 80062c0:	0801b108 	.word	0x0801b108

080062c4 <nanf>:
 80062c4:	4800      	ldr	r0, [pc, #0]	; (80062c8 <nanf+0x4>)
 80062c6:	4770      	bx	lr
 80062c8:	7fc00000 	.word	0x7fc00000

080062cc <siprintf>:
 80062cc:	b40e      	push	{r1, r2, r3}
 80062ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062d2:	b500      	push	{lr}
 80062d4:	b09c      	sub	sp, #112	; 0x70
 80062d6:	ab1d      	add	r3, sp, #116	; 0x74
 80062d8:	9002      	str	r0, [sp, #8]
 80062da:	9006      	str	r0, [sp, #24]
 80062dc:	9107      	str	r1, [sp, #28]
 80062de:	9104      	str	r1, [sp, #16]
 80062e0:	4808      	ldr	r0, [pc, #32]	; (8006304 <siprintf+0x38>)
 80062e2:	4909      	ldr	r1, [pc, #36]	; (8006308 <siprintf+0x3c>)
 80062e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80062e8:	9105      	str	r1, [sp, #20]
 80062ea:	6800      	ldr	r0, [r0, #0]
 80062ec:	a902      	add	r1, sp, #8
 80062ee:	9301      	str	r3, [sp, #4]
 80062f0:	f002 feb8 	bl	8009064 <_svfiprintf_r>
 80062f4:	2200      	movs	r2, #0
 80062f6:	9b02      	ldr	r3, [sp, #8]
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	b01c      	add	sp, #112	; 0x70
 80062fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006300:	b003      	add	sp, #12
 8006302:	4770      	bx	lr
 8006304:	2000014c 	.word	0x2000014c
 8006308:	ffff0208 	.word	0xffff0208

0800630c <sulp>:
 800630c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006310:	460f      	mov	r7, r1
 8006312:	4690      	mov	r8, r2
 8006314:	f002 fc12 	bl	8008b3c <__ulp>
 8006318:	4604      	mov	r4, r0
 800631a:	460d      	mov	r5, r1
 800631c:	f1b8 0f00 	cmp.w	r8, #0
 8006320:	d011      	beq.n	8006346 <sulp+0x3a>
 8006322:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006326:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800632a:	2b00      	cmp	r3, #0
 800632c:	dd0b      	ble.n	8006346 <sulp+0x3a>
 800632e:	2400      	movs	r4, #0
 8006330:	051b      	lsls	r3, r3, #20
 8006332:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006336:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800633a:	4622      	mov	r2, r4
 800633c:	462b      	mov	r3, r5
 800633e:	f7fa f97f 	bl	8000640 <__aeabi_dmul>
 8006342:	4604      	mov	r4, r0
 8006344:	460d      	mov	r5, r1
 8006346:	4620      	mov	r0, r4
 8006348:	4629      	mov	r1, r5
 800634a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006350 <_strtod_l>:
 8006350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006354:	469b      	mov	fp, r3
 8006356:	2300      	movs	r3, #0
 8006358:	b09f      	sub	sp, #124	; 0x7c
 800635a:	931a      	str	r3, [sp, #104]	; 0x68
 800635c:	4b9e      	ldr	r3, [pc, #632]	; (80065d8 <_strtod_l+0x288>)
 800635e:	4682      	mov	sl, r0
 8006360:	681f      	ldr	r7, [r3, #0]
 8006362:	460e      	mov	r6, r1
 8006364:	4638      	mov	r0, r7
 8006366:	9215      	str	r2, [sp, #84]	; 0x54
 8006368:	f7f9 fef2 	bl	8000150 <strlen>
 800636c:	f04f 0800 	mov.w	r8, #0
 8006370:	4604      	mov	r4, r0
 8006372:	f04f 0900 	mov.w	r9, #0
 8006376:	9619      	str	r6, [sp, #100]	; 0x64
 8006378:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800637a:	781a      	ldrb	r2, [r3, #0]
 800637c:	2a2b      	cmp	r2, #43	; 0x2b
 800637e:	d04c      	beq.n	800641a <_strtod_l+0xca>
 8006380:	d83a      	bhi.n	80063f8 <_strtod_l+0xa8>
 8006382:	2a0d      	cmp	r2, #13
 8006384:	d833      	bhi.n	80063ee <_strtod_l+0x9e>
 8006386:	2a08      	cmp	r2, #8
 8006388:	d833      	bhi.n	80063f2 <_strtod_l+0xa2>
 800638a:	2a00      	cmp	r2, #0
 800638c:	d03d      	beq.n	800640a <_strtod_l+0xba>
 800638e:	2300      	movs	r3, #0
 8006390:	930a      	str	r3, [sp, #40]	; 0x28
 8006392:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006394:	782b      	ldrb	r3, [r5, #0]
 8006396:	2b30      	cmp	r3, #48	; 0x30
 8006398:	f040 80aa 	bne.w	80064f0 <_strtod_l+0x1a0>
 800639c:	786b      	ldrb	r3, [r5, #1]
 800639e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80063a2:	2b58      	cmp	r3, #88	; 0x58
 80063a4:	d166      	bne.n	8006474 <_strtod_l+0x124>
 80063a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063a8:	4650      	mov	r0, sl
 80063aa:	9301      	str	r3, [sp, #4]
 80063ac:	ab1a      	add	r3, sp, #104	; 0x68
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	4a8a      	ldr	r2, [pc, #552]	; (80065dc <_strtod_l+0x28c>)
 80063b2:	f8cd b008 	str.w	fp, [sp, #8]
 80063b6:	ab1b      	add	r3, sp, #108	; 0x6c
 80063b8:	a919      	add	r1, sp, #100	; 0x64
 80063ba:	f001 fd17 	bl	8007dec <__gethex>
 80063be:	f010 0607 	ands.w	r6, r0, #7
 80063c2:	4604      	mov	r4, r0
 80063c4:	d005      	beq.n	80063d2 <_strtod_l+0x82>
 80063c6:	2e06      	cmp	r6, #6
 80063c8:	d129      	bne.n	800641e <_strtod_l+0xce>
 80063ca:	2300      	movs	r3, #0
 80063cc:	3501      	adds	r5, #1
 80063ce:	9519      	str	r5, [sp, #100]	; 0x64
 80063d0:	930a      	str	r3, [sp, #40]	; 0x28
 80063d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f040 858a 	bne.w	8006eee <_strtod_l+0xb9e>
 80063da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063dc:	b1d3      	cbz	r3, 8006414 <_strtod_l+0xc4>
 80063de:	4642      	mov	r2, r8
 80063e0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80063e4:	4610      	mov	r0, r2
 80063e6:	4619      	mov	r1, r3
 80063e8:	b01f      	add	sp, #124	; 0x7c
 80063ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ee:	2a20      	cmp	r2, #32
 80063f0:	d1cd      	bne.n	800638e <_strtod_l+0x3e>
 80063f2:	3301      	adds	r3, #1
 80063f4:	9319      	str	r3, [sp, #100]	; 0x64
 80063f6:	e7bf      	b.n	8006378 <_strtod_l+0x28>
 80063f8:	2a2d      	cmp	r2, #45	; 0x2d
 80063fa:	d1c8      	bne.n	800638e <_strtod_l+0x3e>
 80063fc:	2201      	movs	r2, #1
 80063fe:	920a      	str	r2, [sp, #40]	; 0x28
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	9219      	str	r2, [sp, #100]	; 0x64
 8006404:	785b      	ldrb	r3, [r3, #1]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1c3      	bne.n	8006392 <_strtod_l+0x42>
 800640a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800640c:	9619      	str	r6, [sp, #100]	; 0x64
 800640e:	2b00      	cmp	r3, #0
 8006410:	f040 856b 	bne.w	8006eea <_strtod_l+0xb9a>
 8006414:	4642      	mov	r2, r8
 8006416:	464b      	mov	r3, r9
 8006418:	e7e4      	b.n	80063e4 <_strtod_l+0x94>
 800641a:	2200      	movs	r2, #0
 800641c:	e7ef      	b.n	80063fe <_strtod_l+0xae>
 800641e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006420:	b13a      	cbz	r2, 8006432 <_strtod_l+0xe2>
 8006422:	2135      	movs	r1, #53	; 0x35
 8006424:	a81c      	add	r0, sp, #112	; 0x70
 8006426:	f002 fc8d 	bl	8008d44 <__copybits>
 800642a:	4650      	mov	r0, sl
 800642c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800642e:	f002 f855 	bl	80084dc <_Bfree>
 8006432:	3e01      	subs	r6, #1
 8006434:	2e04      	cmp	r6, #4
 8006436:	d806      	bhi.n	8006446 <_strtod_l+0xf6>
 8006438:	e8df f006 	tbb	[pc, r6]
 800643c:	1714030a 	.word	0x1714030a
 8006440:	0a          	.byte	0x0a
 8006441:	00          	.byte	0x00
 8006442:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006446:	0721      	lsls	r1, r4, #28
 8006448:	d5c3      	bpl.n	80063d2 <_strtod_l+0x82>
 800644a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800644e:	e7c0      	b.n	80063d2 <_strtod_l+0x82>
 8006450:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006452:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006456:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800645a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800645e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006462:	e7f0      	b.n	8006446 <_strtod_l+0xf6>
 8006464:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80065e0 <_strtod_l+0x290>
 8006468:	e7ed      	b.n	8006446 <_strtod_l+0xf6>
 800646a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800646e:	f04f 38ff 	mov.w	r8, #4294967295
 8006472:	e7e8      	b.n	8006446 <_strtod_l+0xf6>
 8006474:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	9219      	str	r2, [sp, #100]	; 0x64
 800647a:	785b      	ldrb	r3, [r3, #1]
 800647c:	2b30      	cmp	r3, #48	; 0x30
 800647e:	d0f9      	beq.n	8006474 <_strtod_l+0x124>
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0a6      	beq.n	80063d2 <_strtod_l+0x82>
 8006484:	2301      	movs	r3, #1
 8006486:	9307      	str	r3, [sp, #28]
 8006488:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800648a:	220a      	movs	r2, #10
 800648c:	9308      	str	r3, [sp, #32]
 800648e:	2300      	movs	r3, #0
 8006490:	469b      	mov	fp, r3
 8006492:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006496:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006498:	7805      	ldrb	r5, [r0, #0]
 800649a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800649e:	b2d9      	uxtb	r1, r3
 80064a0:	2909      	cmp	r1, #9
 80064a2:	d927      	bls.n	80064f4 <_strtod_l+0x1a4>
 80064a4:	4622      	mov	r2, r4
 80064a6:	4639      	mov	r1, r7
 80064a8:	f002 fef2 	bl	8009290 <strncmp>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d033      	beq.n	8006518 <_strtod_l+0x1c8>
 80064b0:	2000      	movs	r0, #0
 80064b2:	462a      	mov	r2, r5
 80064b4:	465c      	mov	r4, fp
 80064b6:	4603      	mov	r3, r0
 80064b8:	9004      	str	r0, [sp, #16]
 80064ba:	2a65      	cmp	r2, #101	; 0x65
 80064bc:	d001      	beq.n	80064c2 <_strtod_l+0x172>
 80064be:	2a45      	cmp	r2, #69	; 0x45
 80064c0:	d114      	bne.n	80064ec <_strtod_l+0x19c>
 80064c2:	b91c      	cbnz	r4, 80064cc <_strtod_l+0x17c>
 80064c4:	9a07      	ldr	r2, [sp, #28]
 80064c6:	4302      	orrs	r2, r0
 80064c8:	d09f      	beq.n	800640a <_strtod_l+0xba>
 80064ca:	2400      	movs	r4, #0
 80064cc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80064ce:	1c72      	adds	r2, r6, #1
 80064d0:	9219      	str	r2, [sp, #100]	; 0x64
 80064d2:	7872      	ldrb	r2, [r6, #1]
 80064d4:	2a2b      	cmp	r2, #43	; 0x2b
 80064d6:	d079      	beq.n	80065cc <_strtod_l+0x27c>
 80064d8:	2a2d      	cmp	r2, #45	; 0x2d
 80064da:	f000 8083 	beq.w	80065e4 <_strtod_l+0x294>
 80064de:	2700      	movs	r7, #0
 80064e0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80064e4:	2909      	cmp	r1, #9
 80064e6:	f240 8083 	bls.w	80065f0 <_strtod_l+0x2a0>
 80064ea:	9619      	str	r6, [sp, #100]	; 0x64
 80064ec:	2500      	movs	r5, #0
 80064ee:	e09f      	b.n	8006630 <_strtod_l+0x2e0>
 80064f0:	2300      	movs	r3, #0
 80064f2:	e7c8      	b.n	8006486 <_strtod_l+0x136>
 80064f4:	f1bb 0f08 	cmp.w	fp, #8
 80064f8:	bfd5      	itete	le
 80064fa:	9906      	ldrle	r1, [sp, #24]
 80064fc:	9905      	ldrgt	r1, [sp, #20]
 80064fe:	fb02 3301 	mlale	r3, r2, r1, r3
 8006502:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006506:	f100 0001 	add.w	r0, r0, #1
 800650a:	bfd4      	ite	le
 800650c:	9306      	strle	r3, [sp, #24]
 800650e:	9305      	strgt	r3, [sp, #20]
 8006510:	f10b 0b01 	add.w	fp, fp, #1
 8006514:	9019      	str	r0, [sp, #100]	; 0x64
 8006516:	e7be      	b.n	8006496 <_strtod_l+0x146>
 8006518:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800651a:	191a      	adds	r2, r3, r4
 800651c:	9219      	str	r2, [sp, #100]	; 0x64
 800651e:	5d1a      	ldrb	r2, [r3, r4]
 8006520:	f1bb 0f00 	cmp.w	fp, #0
 8006524:	d036      	beq.n	8006594 <_strtod_l+0x244>
 8006526:	465c      	mov	r4, fp
 8006528:	9004      	str	r0, [sp, #16]
 800652a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800652e:	2b09      	cmp	r3, #9
 8006530:	d912      	bls.n	8006558 <_strtod_l+0x208>
 8006532:	2301      	movs	r3, #1
 8006534:	e7c1      	b.n	80064ba <_strtod_l+0x16a>
 8006536:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006538:	3001      	adds	r0, #1
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	9219      	str	r2, [sp, #100]	; 0x64
 800653e:	785a      	ldrb	r2, [r3, #1]
 8006540:	2a30      	cmp	r2, #48	; 0x30
 8006542:	d0f8      	beq.n	8006536 <_strtod_l+0x1e6>
 8006544:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006548:	2b08      	cmp	r3, #8
 800654a:	f200 84d5 	bhi.w	8006ef8 <_strtod_l+0xba8>
 800654e:	9004      	str	r0, [sp, #16]
 8006550:	2000      	movs	r0, #0
 8006552:	4604      	mov	r4, r0
 8006554:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006556:	9308      	str	r3, [sp, #32]
 8006558:	3a30      	subs	r2, #48	; 0x30
 800655a:	f100 0301 	add.w	r3, r0, #1
 800655e:	d013      	beq.n	8006588 <_strtod_l+0x238>
 8006560:	9904      	ldr	r1, [sp, #16]
 8006562:	1905      	adds	r5, r0, r4
 8006564:	4419      	add	r1, r3
 8006566:	9104      	str	r1, [sp, #16]
 8006568:	4623      	mov	r3, r4
 800656a:	210a      	movs	r1, #10
 800656c:	42ab      	cmp	r3, r5
 800656e:	d113      	bne.n	8006598 <_strtod_l+0x248>
 8006570:	1823      	adds	r3, r4, r0
 8006572:	2b08      	cmp	r3, #8
 8006574:	f104 0401 	add.w	r4, r4, #1
 8006578:	4404      	add	r4, r0
 800657a:	dc1b      	bgt.n	80065b4 <_strtod_l+0x264>
 800657c:	230a      	movs	r3, #10
 800657e:	9906      	ldr	r1, [sp, #24]
 8006580:	fb03 2301 	mla	r3, r3, r1, r2
 8006584:	9306      	str	r3, [sp, #24]
 8006586:	2300      	movs	r3, #0
 8006588:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800658a:	4618      	mov	r0, r3
 800658c:	1c51      	adds	r1, r2, #1
 800658e:	9119      	str	r1, [sp, #100]	; 0x64
 8006590:	7852      	ldrb	r2, [r2, #1]
 8006592:	e7ca      	b.n	800652a <_strtod_l+0x1da>
 8006594:	4658      	mov	r0, fp
 8006596:	e7d3      	b.n	8006540 <_strtod_l+0x1f0>
 8006598:	2b08      	cmp	r3, #8
 800659a:	dc04      	bgt.n	80065a6 <_strtod_l+0x256>
 800659c:	9f06      	ldr	r7, [sp, #24]
 800659e:	434f      	muls	r7, r1
 80065a0:	9706      	str	r7, [sp, #24]
 80065a2:	3301      	adds	r3, #1
 80065a4:	e7e2      	b.n	800656c <_strtod_l+0x21c>
 80065a6:	1c5f      	adds	r7, r3, #1
 80065a8:	2f10      	cmp	r7, #16
 80065aa:	bfde      	ittt	le
 80065ac:	9f05      	ldrle	r7, [sp, #20]
 80065ae:	434f      	mulle	r7, r1
 80065b0:	9705      	strle	r7, [sp, #20]
 80065b2:	e7f6      	b.n	80065a2 <_strtod_l+0x252>
 80065b4:	2c10      	cmp	r4, #16
 80065b6:	bfdf      	itttt	le
 80065b8:	230a      	movle	r3, #10
 80065ba:	9905      	ldrle	r1, [sp, #20]
 80065bc:	fb03 2301 	mlale	r3, r3, r1, r2
 80065c0:	9305      	strle	r3, [sp, #20]
 80065c2:	e7e0      	b.n	8006586 <_strtod_l+0x236>
 80065c4:	2300      	movs	r3, #0
 80065c6:	9304      	str	r3, [sp, #16]
 80065c8:	2301      	movs	r3, #1
 80065ca:	e77b      	b.n	80064c4 <_strtod_l+0x174>
 80065cc:	2700      	movs	r7, #0
 80065ce:	1cb2      	adds	r2, r6, #2
 80065d0:	9219      	str	r2, [sp, #100]	; 0x64
 80065d2:	78b2      	ldrb	r2, [r6, #2]
 80065d4:	e784      	b.n	80064e0 <_strtod_l+0x190>
 80065d6:	bf00      	nop
 80065d8:	0801af50 	.word	0x0801af50
 80065dc:	0801ad08 	.word	0x0801ad08
 80065e0:	7ff00000 	.word	0x7ff00000
 80065e4:	2701      	movs	r7, #1
 80065e6:	e7f2      	b.n	80065ce <_strtod_l+0x27e>
 80065e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80065ea:	1c51      	adds	r1, r2, #1
 80065ec:	9119      	str	r1, [sp, #100]	; 0x64
 80065ee:	7852      	ldrb	r2, [r2, #1]
 80065f0:	2a30      	cmp	r2, #48	; 0x30
 80065f2:	d0f9      	beq.n	80065e8 <_strtod_l+0x298>
 80065f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80065f8:	2908      	cmp	r1, #8
 80065fa:	f63f af77 	bhi.w	80064ec <_strtod_l+0x19c>
 80065fe:	f04f 0e0a 	mov.w	lr, #10
 8006602:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006606:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006608:	9209      	str	r2, [sp, #36]	; 0x24
 800660a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800660c:	1c51      	adds	r1, r2, #1
 800660e:	9119      	str	r1, [sp, #100]	; 0x64
 8006610:	7852      	ldrb	r2, [r2, #1]
 8006612:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006616:	2d09      	cmp	r5, #9
 8006618:	d935      	bls.n	8006686 <_strtod_l+0x336>
 800661a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800661c:	1b49      	subs	r1, r1, r5
 800661e:	2908      	cmp	r1, #8
 8006620:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006624:	dc02      	bgt.n	800662c <_strtod_l+0x2dc>
 8006626:	4565      	cmp	r5, ip
 8006628:	bfa8      	it	ge
 800662a:	4665      	movge	r5, ip
 800662c:	b107      	cbz	r7, 8006630 <_strtod_l+0x2e0>
 800662e:	426d      	negs	r5, r5
 8006630:	2c00      	cmp	r4, #0
 8006632:	d14c      	bne.n	80066ce <_strtod_l+0x37e>
 8006634:	9907      	ldr	r1, [sp, #28]
 8006636:	4301      	orrs	r1, r0
 8006638:	f47f aecb 	bne.w	80063d2 <_strtod_l+0x82>
 800663c:	2b00      	cmp	r3, #0
 800663e:	f47f aee4 	bne.w	800640a <_strtod_l+0xba>
 8006642:	2a69      	cmp	r2, #105	; 0x69
 8006644:	d026      	beq.n	8006694 <_strtod_l+0x344>
 8006646:	dc23      	bgt.n	8006690 <_strtod_l+0x340>
 8006648:	2a49      	cmp	r2, #73	; 0x49
 800664a:	d023      	beq.n	8006694 <_strtod_l+0x344>
 800664c:	2a4e      	cmp	r2, #78	; 0x4e
 800664e:	f47f aedc 	bne.w	800640a <_strtod_l+0xba>
 8006652:	499d      	ldr	r1, [pc, #628]	; (80068c8 <_strtod_l+0x578>)
 8006654:	a819      	add	r0, sp, #100	; 0x64
 8006656:	f001 fe17 	bl	8008288 <__match>
 800665a:	2800      	cmp	r0, #0
 800665c:	f43f aed5 	beq.w	800640a <_strtod_l+0xba>
 8006660:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	2b28      	cmp	r3, #40	; 0x28
 8006666:	d12c      	bne.n	80066c2 <_strtod_l+0x372>
 8006668:	4998      	ldr	r1, [pc, #608]	; (80068cc <_strtod_l+0x57c>)
 800666a:	aa1c      	add	r2, sp, #112	; 0x70
 800666c:	a819      	add	r0, sp, #100	; 0x64
 800666e:	f001 fe1f 	bl	80082b0 <__hexnan>
 8006672:	2805      	cmp	r0, #5
 8006674:	d125      	bne.n	80066c2 <_strtod_l+0x372>
 8006676:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006678:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800667c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006680:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006684:	e6a5      	b.n	80063d2 <_strtod_l+0x82>
 8006686:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800668a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800668e:	e7bc      	b.n	800660a <_strtod_l+0x2ba>
 8006690:	2a6e      	cmp	r2, #110	; 0x6e
 8006692:	e7dc      	b.n	800664e <_strtod_l+0x2fe>
 8006694:	498e      	ldr	r1, [pc, #568]	; (80068d0 <_strtod_l+0x580>)
 8006696:	a819      	add	r0, sp, #100	; 0x64
 8006698:	f001 fdf6 	bl	8008288 <__match>
 800669c:	2800      	cmp	r0, #0
 800669e:	f43f aeb4 	beq.w	800640a <_strtod_l+0xba>
 80066a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066a4:	498b      	ldr	r1, [pc, #556]	; (80068d4 <_strtod_l+0x584>)
 80066a6:	3b01      	subs	r3, #1
 80066a8:	a819      	add	r0, sp, #100	; 0x64
 80066aa:	9319      	str	r3, [sp, #100]	; 0x64
 80066ac:	f001 fdec 	bl	8008288 <__match>
 80066b0:	b910      	cbnz	r0, 80066b8 <_strtod_l+0x368>
 80066b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066b4:	3301      	adds	r3, #1
 80066b6:	9319      	str	r3, [sp, #100]	; 0x64
 80066b8:	f04f 0800 	mov.w	r8, #0
 80066bc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80068d8 <_strtod_l+0x588>
 80066c0:	e687      	b.n	80063d2 <_strtod_l+0x82>
 80066c2:	4886      	ldr	r0, [pc, #536]	; (80068dc <_strtod_l+0x58c>)
 80066c4:	f002 fdce 	bl	8009264 <nan>
 80066c8:	4680      	mov	r8, r0
 80066ca:	4689      	mov	r9, r1
 80066cc:	e681      	b.n	80063d2 <_strtod_l+0x82>
 80066ce:	9b04      	ldr	r3, [sp, #16]
 80066d0:	f1bb 0f00 	cmp.w	fp, #0
 80066d4:	bf08      	it	eq
 80066d6:	46a3      	moveq	fp, r4
 80066d8:	1aeb      	subs	r3, r5, r3
 80066da:	2c10      	cmp	r4, #16
 80066dc:	9806      	ldr	r0, [sp, #24]
 80066de:	4626      	mov	r6, r4
 80066e0:	9307      	str	r3, [sp, #28]
 80066e2:	bfa8      	it	ge
 80066e4:	2610      	movge	r6, #16
 80066e6:	f7f9 ff31 	bl	800054c <__aeabi_ui2d>
 80066ea:	2c09      	cmp	r4, #9
 80066ec:	4680      	mov	r8, r0
 80066ee:	4689      	mov	r9, r1
 80066f0:	dd13      	ble.n	800671a <_strtod_l+0x3ca>
 80066f2:	4b7b      	ldr	r3, [pc, #492]	; (80068e0 <_strtod_l+0x590>)
 80066f4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80066f8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80066fc:	f7f9 ffa0 	bl	8000640 <__aeabi_dmul>
 8006700:	4680      	mov	r8, r0
 8006702:	9805      	ldr	r0, [sp, #20]
 8006704:	4689      	mov	r9, r1
 8006706:	f7f9 ff21 	bl	800054c <__aeabi_ui2d>
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	4640      	mov	r0, r8
 8006710:	4649      	mov	r1, r9
 8006712:	f7f9 fddf 	bl	80002d4 <__adddf3>
 8006716:	4680      	mov	r8, r0
 8006718:	4689      	mov	r9, r1
 800671a:	2c0f      	cmp	r4, #15
 800671c:	dc36      	bgt.n	800678c <_strtod_l+0x43c>
 800671e:	9b07      	ldr	r3, [sp, #28]
 8006720:	2b00      	cmp	r3, #0
 8006722:	f43f ae56 	beq.w	80063d2 <_strtod_l+0x82>
 8006726:	dd22      	ble.n	800676e <_strtod_l+0x41e>
 8006728:	2b16      	cmp	r3, #22
 800672a:	dc09      	bgt.n	8006740 <_strtod_l+0x3f0>
 800672c:	496c      	ldr	r1, [pc, #432]	; (80068e0 <_strtod_l+0x590>)
 800672e:	4642      	mov	r2, r8
 8006730:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006734:	464b      	mov	r3, r9
 8006736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800673a:	f7f9 ff81 	bl	8000640 <__aeabi_dmul>
 800673e:	e7c3      	b.n	80066c8 <_strtod_l+0x378>
 8006740:	9a07      	ldr	r2, [sp, #28]
 8006742:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006746:	4293      	cmp	r3, r2
 8006748:	db20      	blt.n	800678c <_strtod_l+0x43c>
 800674a:	4d65      	ldr	r5, [pc, #404]	; (80068e0 <_strtod_l+0x590>)
 800674c:	f1c4 040f 	rsb	r4, r4, #15
 8006750:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006754:	4642      	mov	r2, r8
 8006756:	e9d1 0100 	ldrd	r0, r1, [r1]
 800675a:	464b      	mov	r3, r9
 800675c:	f7f9 ff70 	bl	8000640 <__aeabi_dmul>
 8006760:	9b07      	ldr	r3, [sp, #28]
 8006762:	1b1c      	subs	r4, r3, r4
 8006764:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006768:	e9d5 2300 	ldrd	r2, r3, [r5]
 800676c:	e7e5      	b.n	800673a <_strtod_l+0x3ea>
 800676e:	9b07      	ldr	r3, [sp, #28]
 8006770:	3316      	adds	r3, #22
 8006772:	db0b      	blt.n	800678c <_strtod_l+0x43c>
 8006774:	9b04      	ldr	r3, [sp, #16]
 8006776:	4640      	mov	r0, r8
 8006778:	1b5d      	subs	r5, r3, r5
 800677a:	4b59      	ldr	r3, [pc, #356]	; (80068e0 <_strtod_l+0x590>)
 800677c:	4649      	mov	r1, r9
 800677e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006782:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006786:	f7fa f885 	bl	8000894 <__aeabi_ddiv>
 800678a:	e79d      	b.n	80066c8 <_strtod_l+0x378>
 800678c:	9b07      	ldr	r3, [sp, #28]
 800678e:	1ba6      	subs	r6, r4, r6
 8006790:	441e      	add	r6, r3
 8006792:	2e00      	cmp	r6, #0
 8006794:	dd74      	ble.n	8006880 <_strtod_l+0x530>
 8006796:	f016 030f 	ands.w	r3, r6, #15
 800679a:	d00a      	beq.n	80067b2 <_strtod_l+0x462>
 800679c:	4950      	ldr	r1, [pc, #320]	; (80068e0 <_strtod_l+0x590>)
 800679e:	4642      	mov	r2, r8
 80067a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80067a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067a8:	464b      	mov	r3, r9
 80067aa:	f7f9 ff49 	bl	8000640 <__aeabi_dmul>
 80067ae:	4680      	mov	r8, r0
 80067b0:	4689      	mov	r9, r1
 80067b2:	f036 060f 	bics.w	r6, r6, #15
 80067b6:	d052      	beq.n	800685e <_strtod_l+0x50e>
 80067b8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80067bc:	dd27      	ble.n	800680e <_strtod_l+0x4be>
 80067be:	f04f 0b00 	mov.w	fp, #0
 80067c2:	f8cd b010 	str.w	fp, [sp, #16]
 80067c6:	f8cd b020 	str.w	fp, [sp, #32]
 80067ca:	f8cd b018 	str.w	fp, [sp, #24]
 80067ce:	2322      	movs	r3, #34	; 0x22
 80067d0:	f04f 0800 	mov.w	r8, #0
 80067d4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80068d8 <_strtod_l+0x588>
 80067d8:	f8ca 3000 	str.w	r3, [sl]
 80067dc:	9b08      	ldr	r3, [sp, #32]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f43f adf7 	beq.w	80063d2 <_strtod_l+0x82>
 80067e4:	4650      	mov	r0, sl
 80067e6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80067e8:	f001 fe78 	bl	80084dc <_Bfree>
 80067ec:	4650      	mov	r0, sl
 80067ee:	9906      	ldr	r1, [sp, #24]
 80067f0:	f001 fe74 	bl	80084dc <_Bfree>
 80067f4:	4650      	mov	r0, sl
 80067f6:	9904      	ldr	r1, [sp, #16]
 80067f8:	f001 fe70 	bl	80084dc <_Bfree>
 80067fc:	4650      	mov	r0, sl
 80067fe:	9908      	ldr	r1, [sp, #32]
 8006800:	f001 fe6c 	bl	80084dc <_Bfree>
 8006804:	4659      	mov	r1, fp
 8006806:	4650      	mov	r0, sl
 8006808:	f001 fe68 	bl	80084dc <_Bfree>
 800680c:	e5e1      	b.n	80063d2 <_strtod_l+0x82>
 800680e:	4b35      	ldr	r3, [pc, #212]	; (80068e4 <_strtod_l+0x594>)
 8006810:	4640      	mov	r0, r8
 8006812:	9305      	str	r3, [sp, #20]
 8006814:	2300      	movs	r3, #0
 8006816:	4649      	mov	r1, r9
 8006818:	461f      	mov	r7, r3
 800681a:	1136      	asrs	r6, r6, #4
 800681c:	2e01      	cmp	r6, #1
 800681e:	dc21      	bgt.n	8006864 <_strtod_l+0x514>
 8006820:	b10b      	cbz	r3, 8006826 <_strtod_l+0x4d6>
 8006822:	4680      	mov	r8, r0
 8006824:	4689      	mov	r9, r1
 8006826:	4b2f      	ldr	r3, [pc, #188]	; (80068e4 <_strtod_l+0x594>)
 8006828:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800682c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006830:	4642      	mov	r2, r8
 8006832:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006836:	464b      	mov	r3, r9
 8006838:	f7f9 ff02 	bl	8000640 <__aeabi_dmul>
 800683c:	4b26      	ldr	r3, [pc, #152]	; (80068d8 <_strtod_l+0x588>)
 800683e:	460a      	mov	r2, r1
 8006840:	400b      	ands	r3, r1
 8006842:	4929      	ldr	r1, [pc, #164]	; (80068e8 <_strtod_l+0x598>)
 8006844:	4680      	mov	r8, r0
 8006846:	428b      	cmp	r3, r1
 8006848:	d8b9      	bhi.n	80067be <_strtod_l+0x46e>
 800684a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800684e:	428b      	cmp	r3, r1
 8006850:	bf86      	itte	hi
 8006852:	f04f 38ff 	movhi.w	r8, #4294967295
 8006856:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80068ec <_strtod_l+0x59c>
 800685a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800685e:	2300      	movs	r3, #0
 8006860:	9305      	str	r3, [sp, #20]
 8006862:	e07f      	b.n	8006964 <_strtod_l+0x614>
 8006864:	07f2      	lsls	r2, r6, #31
 8006866:	d505      	bpl.n	8006874 <_strtod_l+0x524>
 8006868:	9b05      	ldr	r3, [sp, #20]
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	f7f9 fee7 	bl	8000640 <__aeabi_dmul>
 8006872:	2301      	movs	r3, #1
 8006874:	9a05      	ldr	r2, [sp, #20]
 8006876:	3701      	adds	r7, #1
 8006878:	3208      	adds	r2, #8
 800687a:	1076      	asrs	r6, r6, #1
 800687c:	9205      	str	r2, [sp, #20]
 800687e:	e7cd      	b.n	800681c <_strtod_l+0x4cc>
 8006880:	d0ed      	beq.n	800685e <_strtod_l+0x50e>
 8006882:	4276      	negs	r6, r6
 8006884:	f016 020f 	ands.w	r2, r6, #15
 8006888:	d00a      	beq.n	80068a0 <_strtod_l+0x550>
 800688a:	4b15      	ldr	r3, [pc, #84]	; (80068e0 <_strtod_l+0x590>)
 800688c:	4640      	mov	r0, r8
 800688e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006892:	4649      	mov	r1, r9
 8006894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006898:	f7f9 fffc 	bl	8000894 <__aeabi_ddiv>
 800689c:	4680      	mov	r8, r0
 800689e:	4689      	mov	r9, r1
 80068a0:	1136      	asrs	r6, r6, #4
 80068a2:	d0dc      	beq.n	800685e <_strtod_l+0x50e>
 80068a4:	2e1f      	cmp	r6, #31
 80068a6:	dd23      	ble.n	80068f0 <_strtod_l+0x5a0>
 80068a8:	f04f 0b00 	mov.w	fp, #0
 80068ac:	f8cd b010 	str.w	fp, [sp, #16]
 80068b0:	f8cd b020 	str.w	fp, [sp, #32]
 80068b4:	f8cd b018 	str.w	fp, [sp, #24]
 80068b8:	2322      	movs	r3, #34	; 0x22
 80068ba:	f04f 0800 	mov.w	r8, #0
 80068be:	f04f 0900 	mov.w	r9, #0
 80068c2:	f8ca 3000 	str.w	r3, [sl]
 80068c6:	e789      	b.n	80067dc <_strtod_l+0x48c>
 80068c8:	0801acd9 	.word	0x0801acd9
 80068cc:	0801ad1c 	.word	0x0801ad1c
 80068d0:	0801acd1 	.word	0x0801acd1
 80068d4:	0801ae5c 	.word	0x0801ae5c
 80068d8:	7ff00000 	.word	0x7ff00000
 80068dc:	0801b108 	.word	0x0801b108
 80068e0:	0801afe8 	.word	0x0801afe8
 80068e4:	0801afc0 	.word	0x0801afc0
 80068e8:	7ca00000 	.word	0x7ca00000
 80068ec:	7fefffff 	.word	0x7fefffff
 80068f0:	f016 0310 	ands.w	r3, r6, #16
 80068f4:	bf18      	it	ne
 80068f6:	236a      	movne	r3, #106	; 0x6a
 80068f8:	4640      	mov	r0, r8
 80068fa:	9305      	str	r3, [sp, #20]
 80068fc:	4649      	mov	r1, r9
 80068fe:	2300      	movs	r3, #0
 8006900:	4fb0      	ldr	r7, [pc, #704]	; (8006bc4 <_strtod_l+0x874>)
 8006902:	07f2      	lsls	r2, r6, #31
 8006904:	d504      	bpl.n	8006910 <_strtod_l+0x5c0>
 8006906:	e9d7 2300 	ldrd	r2, r3, [r7]
 800690a:	f7f9 fe99 	bl	8000640 <__aeabi_dmul>
 800690e:	2301      	movs	r3, #1
 8006910:	1076      	asrs	r6, r6, #1
 8006912:	f107 0708 	add.w	r7, r7, #8
 8006916:	d1f4      	bne.n	8006902 <_strtod_l+0x5b2>
 8006918:	b10b      	cbz	r3, 800691e <_strtod_l+0x5ce>
 800691a:	4680      	mov	r8, r0
 800691c:	4689      	mov	r9, r1
 800691e:	9b05      	ldr	r3, [sp, #20]
 8006920:	b1c3      	cbz	r3, 8006954 <_strtod_l+0x604>
 8006922:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006926:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800692a:	2b00      	cmp	r3, #0
 800692c:	4649      	mov	r1, r9
 800692e:	dd11      	ble.n	8006954 <_strtod_l+0x604>
 8006930:	2b1f      	cmp	r3, #31
 8006932:	f340 8127 	ble.w	8006b84 <_strtod_l+0x834>
 8006936:	2b34      	cmp	r3, #52	; 0x34
 8006938:	bfd8      	it	le
 800693a:	f04f 33ff 	movle.w	r3, #4294967295
 800693e:	f04f 0800 	mov.w	r8, #0
 8006942:	bfcf      	iteee	gt
 8006944:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006948:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800694c:	fa03 f202 	lslle.w	r2, r3, r2
 8006950:	ea02 0901 	andle.w	r9, r2, r1
 8006954:	2200      	movs	r2, #0
 8006956:	2300      	movs	r3, #0
 8006958:	4640      	mov	r0, r8
 800695a:	4649      	mov	r1, r9
 800695c:	f7fa f8d8 	bl	8000b10 <__aeabi_dcmpeq>
 8006960:	2800      	cmp	r0, #0
 8006962:	d1a1      	bne.n	80068a8 <_strtod_l+0x558>
 8006964:	9b06      	ldr	r3, [sp, #24]
 8006966:	465a      	mov	r2, fp
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	4650      	mov	r0, sl
 800696c:	4623      	mov	r3, r4
 800696e:	9908      	ldr	r1, [sp, #32]
 8006970:	f001 fe1c 	bl	80085ac <__s2b>
 8006974:	9008      	str	r0, [sp, #32]
 8006976:	2800      	cmp	r0, #0
 8006978:	f43f af21 	beq.w	80067be <_strtod_l+0x46e>
 800697c:	9b04      	ldr	r3, [sp, #16]
 800697e:	f04f 0b00 	mov.w	fp, #0
 8006982:	1b5d      	subs	r5, r3, r5
 8006984:	9b07      	ldr	r3, [sp, #28]
 8006986:	f8cd b010 	str.w	fp, [sp, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	bfb4      	ite	lt
 800698e:	462b      	movlt	r3, r5
 8006990:	2300      	movge	r3, #0
 8006992:	930e      	str	r3, [sp, #56]	; 0x38
 8006994:	9b07      	ldr	r3, [sp, #28]
 8006996:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800699a:	9314      	str	r3, [sp, #80]	; 0x50
 800699c:	9b08      	ldr	r3, [sp, #32]
 800699e:	4650      	mov	r0, sl
 80069a0:	6859      	ldr	r1, [r3, #4]
 80069a2:	f001 fd5b 	bl	800845c <_Balloc>
 80069a6:	9006      	str	r0, [sp, #24]
 80069a8:	2800      	cmp	r0, #0
 80069aa:	f43f af10 	beq.w	80067ce <_strtod_l+0x47e>
 80069ae:	9b08      	ldr	r3, [sp, #32]
 80069b0:	300c      	adds	r0, #12
 80069b2:	691a      	ldr	r2, [r3, #16]
 80069b4:	f103 010c 	add.w	r1, r3, #12
 80069b8:	3202      	adds	r2, #2
 80069ba:	0092      	lsls	r2, r2, #2
 80069bc:	f001 fd40 	bl	8008440 <memcpy>
 80069c0:	ab1c      	add	r3, sp, #112	; 0x70
 80069c2:	9301      	str	r3, [sp, #4]
 80069c4:	ab1b      	add	r3, sp, #108	; 0x6c
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	4642      	mov	r2, r8
 80069ca:	464b      	mov	r3, r9
 80069cc:	4650      	mov	r0, sl
 80069ce:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80069d2:	f002 f92d 	bl	8008c30 <__d2b>
 80069d6:	901a      	str	r0, [sp, #104]	; 0x68
 80069d8:	2800      	cmp	r0, #0
 80069da:	f43f aef8 	beq.w	80067ce <_strtod_l+0x47e>
 80069de:	2101      	movs	r1, #1
 80069e0:	4650      	mov	r0, sl
 80069e2:	f001 fe7b 	bl	80086dc <__i2b>
 80069e6:	4603      	mov	r3, r0
 80069e8:	9004      	str	r0, [sp, #16]
 80069ea:	2800      	cmp	r0, #0
 80069ec:	f43f aeef 	beq.w	80067ce <_strtod_l+0x47e>
 80069f0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80069f2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80069f4:	2d00      	cmp	r5, #0
 80069f6:	bfab      	itete	ge
 80069f8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80069fa:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80069fc:	18ee      	addge	r6, r5, r3
 80069fe:	1b5c      	sublt	r4, r3, r5
 8006a00:	9b05      	ldr	r3, [sp, #20]
 8006a02:	bfa8      	it	ge
 8006a04:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8006a06:	eba5 0503 	sub.w	r5, r5, r3
 8006a0a:	4415      	add	r5, r2
 8006a0c:	4b6e      	ldr	r3, [pc, #440]	; (8006bc8 <_strtod_l+0x878>)
 8006a0e:	f105 35ff 	add.w	r5, r5, #4294967295
 8006a12:	bfb8      	it	lt
 8006a14:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006a16:	429d      	cmp	r5, r3
 8006a18:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006a1c:	f280 80c4 	bge.w	8006ba8 <_strtod_l+0x858>
 8006a20:	1b5b      	subs	r3, r3, r5
 8006a22:	2b1f      	cmp	r3, #31
 8006a24:	f04f 0701 	mov.w	r7, #1
 8006a28:	eba2 0203 	sub.w	r2, r2, r3
 8006a2c:	f300 80b1 	bgt.w	8006b92 <_strtod_l+0x842>
 8006a30:	2500      	movs	r5, #0
 8006a32:	fa07 f303 	lsl.w	r3, r7, r3
 8006a36:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a38:	18b7      	adds	r7, r6, r2
 8006a3a:	9b05      	ldr	r3, [sp, #20]
 8006a3c:	42be      	cmp	r6, r7
 8006a3e:	4414      	add	r4, r2
 8006a40:	441c      	add	r4, r3
 8006a42:	4633      	mov	r3, r6
 8006a44:	bfa8      	it	ge
 8006a46:	463b      	movge	r3, r7
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	bfa8      	it	ge
 8006a4c:	4623      	movge	r3, r4
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	bfc2      	ittt	gt
 8006a52:	1aff      	subgt	r7, r7, r3
 8006a54:	1ae4      	subgt	r4, r4, r3
 8006a56:	1af6      	subgt	r6, r6, r3
 8006a58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	dd17      	ble.n	8006a8e <_strtod_l+0x73e>
 8006a5e:	461a      	mov	r2, r3
 8006a60:	4650      	mov	r0, sl
 8006a62:	9904      	ldr	r1, [sp, #16]
 8006a64:	f001 fef8 	bl	8008858 <__pow5mult>
 8006a68:	9004      	str	r0, [sp, #16]
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	f43f aeaf 	beq.w	80067ce <_strtod_l+0x47e>
 8006a70:	4601      	mov	r1, r0
 8006a72:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006a74:	4650      	mov	r0, sl
 8006a76:	f001 fe47 	bl	8008708 <__multiply>
 8006a7a:	9009      	str	r0, [sp, #36]	; 0x24
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	f43f aea6 	beq.w	80067ce <_strtod_l+0x47e>
 8006a82:	4650      	mov	r0, sl
 8006a84:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006a86:	f001 fd29 	bl	80084dc <_Bfree>
 8006a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a8c:	931a      	str	r3, [sp, #104]	; 0x68
 8006a8e:	2f00      	cmp	r7, #0
 8006a90:	f300 808e 	bgt.w	8006bb0 <_strtod_l+0x860>
 8006a94:	9b07      	ldr	r3, [sp, #28]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	dd08      	ble.n	8006aac <_strtod_l+0x75c>
 8006a9a:	4650      	mov	r0, sl
 8006a9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006a9e:	9906      	ldr	r1, [sp, #24]
 8006aa0:	f001 feda 	bl	8008858 <__pow5mult>
 8006aa4:	9006      	str	r0, [sp, #24]
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	f43f ae91 	beq.w	80067ce <_strtod_l+0x47e>
 8006aac:	2c00      	cmp	r4, #0
 8006aae:	dd08      	ble.n	8006ac2 <_strtod_l+0x772>
 8006ab0:	4622      	mov	r2, r4
 8006ab2:	4650      	mov	r0, sl
 8006ab4:	9906      	ldr	r1, [sp, #24]
 8006ab6:	f001 ff29 	bl	800890c <__lshift>
 8006aba:	9006      	str	r0, [sp, #24]
 8006abc:	2800      	cmp	r0, #0
 8006abe:	f43f ae86 	beq.w	80067ce <_strtod_l+0x47e>
 8006ac2:	2e00      	cmp	r6, #0
 8006ac4:	dd08      	ble.n	8006ad8 <_strtod_l+0x788>
 8006ac6:	4632      	mov	r2, r6
 8006ac8:	4650      	mov	r0, sl
 8006aca:	9904      	ldr	r1, [sp, #16]
 8006acc:	f001 ff1e 	bl	800890c <__lshift>
 8006ad0:	9004      	str	r0, [sp, #16]
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	f43f ae7b 	beq.w	80067ce <_strtod_l+0x47e>
 8006ad8:	4650      	mov	r0, sl
 8006ada:	9a06      	ldr	r2, [sp, #24]
 8006adc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006ade:	f001 ffa1 	bl	8008a24 <__mdiff>
 8006ae2:	4683      	mov	fp, r0
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	f43f ae72 	beq.w	80067ce <_strtod_l+0x47e>
 8006aea:	2400      	movs	r4, #0
 8006aec:	68c3      	ldr	r3, [r0, #12]
 8006aee:	9904      	ldr	r1, [sp, #16]
 8006af0:	60c4      	str	r4, [r0, #12]
 8006af2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006af4:	f001 ff7a 	bl	80089ec <__mcmp>
 8006af8:	42a0      	cmp	r0, r4
 8006afa:	da6b      	bge.n	8006bd4 <_strtod_l+0x884>
 8006afc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006afe:	ea53 0308 	orrs.w	r3, r3, r8
 8006b02:	f040 8091 	bne.w	8006c28 <_strtod_l+0x8d8>
 8006b06:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f040 808c 	bne.w	8006c28 <_strtod_l+0x8d8>
 8006b10:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b14:	0d1b      	lsrs	r3, r3, #20
 8006b16:	051b      	lsls	r3, r3, #20
 8006b18:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006b1c:	f240 8084 	bls.w	8006c28 <_strtod_l+0x8d8>
 8006b20:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006b24:	b91b      	cbnz	r3, 8006b2e <_strtod_l+0x7de>
 8006b26:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	dd7c      	ble.n	8006c28 <_strtod_l+0x8d8>
 8006b2e:	4659      	mov	r1, fp
 8006b30:	2201      	movs	r2, #1
 8006b32:	4650      	mov	r0, sl
 8006b34:	f001 feea 	bl	800890c <__lshift>
 8006b38:	9904      	ldr	r1, [sp, #16]
 8006b3a:	4683      	mov	fp, r0
 8006b3c:	f001 ff56 	bl	80089ec <__mcmp>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	dd71      	ble.n	8006c28 <_strtod_l+0x8d8>
 8006b44:	9905      	ldr	r1, [sp, #20]
 8006b46:	464b      	mov	r3, r9
 8006b48:	4a20      	ldr	r2, [pc, #128]	; (8006bcc <_strtod_l+0x87c>)
 8006b4a:	2900      	cmp	r1, #0
 8006b4c:	f000 808c 	beq.w	8006c68 <_strtod_l+0x918>
 8006b50:	ea02 0109 	and.w	r1, r2, r9
 8006b54:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006b58:	f300 8086 	bgt.w	8006c68 <_strtod_l+0x918>
 8006b5c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006b60:	f77f aeaa 	ble.w	80068b8 <_strtod_l+0x568>
 8006b64:	4640      	mov	r0, r8
 8006b66:	4649      	mov	r1, r9
 8006b68:	4b19      	ldr	r3, [pc, #100]	; (8006bd0 <_strtod_l+0x880>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f7f9 fd68 	bl	8000640 <__aeabi_dmul>
 8006b70:	460b      	mov	r3, r1
 8006b72:	4303      	orrs	r3, r0
 8006b74:	bf08      	it	eq
 8006b76:	2322      	moveq	r3, #34	; 0x22
 8006b78:	4680      	mov	r8, r0
 8006b7a:	4689      	mov	r9, r1
 8006b7c:	bf08      	it	eq
 8006b7e:	f8ca 3000 	streq.w	r3, [sl]
 8006b82:	e62f      	b.n	80067e4 <_strtod_l+0x494>
 8006b84:	f04f 32ff 	mov.w	r2, #4294967295
 8006b88:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8c:	ea03 0808 	and.w	r8, r3, r8
 8006b90:	e6e0      	b.n	8006954 <_strtod_l+0x604>
 8006b92:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006b96:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006b9a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006b9e:	35e2      	adds	r5, #226	; 0xe2
 8006ba0:	fa07 f505 	lsl.w	r5, r7, r5
 8006ba4:	970f      	str	r7, [sp, #60]	; 0x3c
 8006ba6:	e747      	b.n	8006a38 <_strtod_l+0x6e8>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	2500      	movs	r5, #0
 8006bac:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bae:	e743      	b.n	8006a38 <_strtod_l+0x6e8>
 8006bb0:	463a      	mov	r2, r7
 8006bb2:	4650      	mov	r0, sl
 8006bb4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006bb6:	f001 fea9 	bl	800890c <__lshift>
 8006bba:	901a      	str	r0, [sp, #104]	; 0x68
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	f47f af69 	bne.w	8006a94 <_strtod_l+0x744>
 8006bc2:	e604      	b.n	80067ce <_strtod_l+0x47e>
 8006bc4:	0801ad30 	.word	0x0801ad30
 8006bc8:	fffffc02 	.word	0xfffffc02
 8006bcc:	7ff00000 	.word	0x7ff00000
 8006bd0:	39500000 	.word	0x39500000
 8006bd4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006bd8:	d165      	bne.n	8006ca6 <_strtod_l+0x956>
 8006bda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006bdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006be0:	b35a      	cbz	r2, 8006c3a <_strtod_l+0x8ea>
 8006be2:	4a99      	ldr	r2, [pc, #612]	; (8006e48 <_strtod_l+0xaf8>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d12b      	bne.n	8006c40 <_strtod_l+0x8f0>
 8006be8:	9b05      	ldr	r3, [sp, #20]
 8006bea:	4641      	mov	r1, r8
 8006bec:	b303      	cbz	r3, 8006c30 <_strtod_l+0x8e0>
 8006bee:	464a      	mov	r2, r9
 8006bf0:	4b96      	ldr	r3, [pc, #600]	; (8006e4c <_strtod_l+0xafc>)
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfc:	d81b      	bhi.n	8006c36 <_strtod_l+0x8e6>
 8006bfe:	0d1b      	lsrs	r3, r3, #20
 8006c00:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006c04:	fa02 f303 	lsl.w	r3, r2, r3
 8006c08:	4299      	cmp	r1, r3
 8006c0a:	d119      	bne.n	8006c40 <_strtod_l+0x8f0>
 8006c0c:	4b90      	ldr	r3, [pc, #576]	; (8006e50 <_strtod_l+0xb00>)
 8006c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d102      	bne.n	8006c1a <_strtod_l+0x8ca>
 8006c14:	3101      	adds	r1, #1
 8006c16:	f43f adda 	beq.w	80067ce <_strtod_l+0x47e>
 8006c1a:	f04f 0800 	mov.w	r8, #0
 8006c1e:	4b8b      	ldr	r3, [pc, #556]	; (8006e4c <_strtod_l+0xafc>)
 8006c20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c22:	401a      	ands	r2, r3
 8006c24:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006c28:	9b05      	ldr	r3, [sp, #20]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d19a      	bne.n	8006b64 <_strtod_l+0x814>
 8006c2e:	e5d9      	b.n	80067e4 <_strtod_l+0x494>
 8006c30:	f04f 33ff 	mov.w	r3, #4294967295
 8006c34:	e7e8      	b.n	8006c08 <_strtod_l+0x8b8>
 8006c36:	4613      	mov	r3, r2
 8006c38:	e7e6      	b.n	8006c08 <_strtod_l+0x8b8>
 8006c3a:	ea53 0308 	orrs.w	r3, r3, r8
 8006c3e:	d081      	beq.n	8006b44 <_strtod_l+0x7f4>
 8006c40:	b1e5      	cbz	r5, 8006c7c <_strtod_l+0x92c>
 8006c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c44:	421d      	tst	r5, r3
 8006c46:	d0ef      	beq.n	8006c28 <_strtod_l+0x8d8>
 8006c48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c4a:	4640      	mov	r0, r8
 8006c4c:	4649      	mov	r1, r9
 8006c4e:	9a05      	ldr	r2, [sp, #20]
 8006c50:	b1c3      	cbz	r3, 8006c84 <_strtod_l+0x934>
 8006c52:	f7ff fb5b 	bl	800630c <sulp>
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c5e:	f7f9 fb39 	bl	80002d4 <__adddf3>
 8006c62:	4680      	mov	r8, r0
 8006c64:	4689      	mov	r9, r1
 8006c66:	e7df      	b.n	8006c28 <_strtod_l+0x8d8>
 8006c68:	4013      	ands	r3, r2
 8006c6a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006c6e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006c72:	f04f 38ff 	mov.w	r8, #4294967295
 8006c76:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006c7a:	e7d5      	b.n	8006c28 <_strtod_l+0x8d8>
 8006c7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c7e:	ea13 0f08 	tst.w	r3, r8
 8006c82:	e7e0      	b.n	8006c46 <_strtod_l+0x8f6>
 8006c84:	f7ff fb42 	bl	800630c <sulp>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c90:	f7f9 fb1e 	bl	80002d0 <__aeabi_dsub>
 8006c94:	2200      	movs	r2, #0
 8006c96:	2300      	movs	r3, #0
 8006c98:	4680      	mov	r8, r0
 8006c9a:	4689      	mov	r9, r1
 8006c9c:	f7f9 ff38 	bl	8000b10 <__aeabi_dcmpeq>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d0c1      	beq.n	8006c28 <_strtod_l+0x8d8>
 8006ca4:	e608      	b.n	80068b8 <_strtod_l+0x568>
 8006ca6:	4658      	mov	r0, fp
 8006ca8:	9904      	ldr	r1, [sp, #16]
 8006caa:	f002 f81d 	bl	8008ce8 <__ratio>
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	460f      	mov	r7, r1
 8006cb8:	f7f9 ff3e 	bl	8000b38 <__aeabi_dcmple>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d070      	beq.n	8006da2 <_strtod_l+0xa52>
 8006cc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d042      	beq.n	8006d4c <_strtod_l+0x9fc>
 8006cc6:	2600      	movs	r6, #0
 8006cc8:	4f62      	ldr	r7, [pc, #392]	; (8006e54 <_strtod_l+0xb04>)
 8006cca:	4d62      	ldr	r5, [pc, #392]	; (8006e54 <_strtod_l+0xb04>)
 8006ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cd2:	0d1b      	lsrs	r3, r3, #20
 8006cd4:	051b      	lsls	r3, r3, #20
 8006cd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006cda:	4b5f      	ldr	r3, [pc, #380]	; (8006e58 <_strtod_l+0xb08>)
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	f040 80c3 	bne.w	8006e68 <_strtod_l+0xb18>
 8006ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ce4:	4640      	mov	r0, r8
 8006ce6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006cea:	4649      	mov	r1, r9
 8006cec:	f001 ff26 	bl	8008b3c <__ulp>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	4639      	mov	r1, r7
 8006cf8:	f7f9 fca2 	bl	8000640 <__aeabi_dmul>
 8006cfc:	4642      	mov	r2, r8
 8006cfe:	464b      	mov	r3, r9
 8006d00:	f7f9 fae8 	bl	80002d4 <__adddf3>
 8006d04:	460b      	mov	r3, r1
 8006d06:	4951      	ldr	r1, [pc, #324]	; (8006e4c <_strtod_l+0xafc>)
 8006d08:	4a54      	ldr	r2, [pc, #336]	; (8006e5c <_strtod_l+0xb0c>)
 8006d0a:	4019      	ands	r1, r3
 8006d0c:	4291      	cmp	r1, r2
 8006d0e:	4680      	mov	r8, r0
 8006d10:	d95d      	bls.n	8006dce <_strtod_l+0xa7e>
 8006d12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d14:	4b4e      	ldr	r3, [pc, #312]	; (8006e50 <_strtod_l+0xb00>)
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d103      	bne.n	8006d22 <_strtod_l+0x9d2>
 8006d1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	f43f ad56 	beq.w	80067ce <_strtod_l+0x47e>
 8006d22:	f04f 38ff 	mov.w	r8, #4294967295
 8006d26:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006e50 <_strtod_l+0xb00>
 8006d2a:	4650      	mov	r0, sl
 8006d2c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d2e:	f001 fbd5 	bl	80084dc <_Bfree>
 8006d32:	4650      	mov	r0, sl
 8006d34:	9906      	ldr	r1, [sp, #24]
 8006d36:	f001 fbd1 	bl	80084dc <_Bfree>
 8006d3a:	4650      	mov	r0, sl
 8006d3c:	9904      	ldr	r1, [sp, #16]
 8006d3e:	f001 fbcd 	bl	80084dc <_Bfree>
 8006d42:	4659      	mov	r1, fp
 8006d44:	4650      	mov	r0, sl
 8006d46:	f001 fbc9 	bl	80084dc <_Bfree>
 8006d4a:	e627      	b.n	800699c <_strtod_l+0x64c>
 8006d4c:	f1b8 0f00 	cmp.w	r8, #0
 8006d50:	d119      	bne.n	8006d86 <_strtod_l+0xa36>
 8006d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d58:	b9e3      	cbnz	r3, 8006d94 <_strtod_l+0xa44>
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	4639      	mov	r1, r7
 8006d60:	4b3c      	ldr	r3, [pc, #240]	; (8006e54 <_strtod_l+0xb04>)
 8006d62:	f7f9 fedf 	bl	8000b24 <__aeabi_dcmplt>
 8006d66:	b9c8      	cbnz	r0, 8006d9c <_strtod_l+0xa4c>
 8006d68:	2200      	movs	r2, #0
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	4639      	mov	r1, r7
 8006d6e:	4b3c      	ldr	r3, [pc, #240]	; (8006e60 <_strtod_l+0xb10>)
 8006d70:	f7f9 fc66 	bl	8000640 <__aeabi_dmul>
 8006d74:	4604      	mov	r4, r0
 8006d76:	460d      	mov	r5, r1
 8006d78:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006d7c:	9416      	str	r4, [sp, #88]	; 0x58
 8006d7e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006d80:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006d84:	e7a2      	b.n	8006ccc <_strtod_l+0x97c>
 8006d86:	f1b8 0f01 	cmp.w	r8, #1
 8006d8a:	d103      	bne.n	8006d94 <_strtod_l+0xa44>
 8006d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f43f ad92 	beq.w	80068b8 <_strtod_l+0x568>
 8006d94:	2600      	movs	r6, #0
 8006d96:	2400      	movs	r4, #0
 8006d98:	4f32      	ldr	r7, [pc, #200]	; (8006e64 <_strtod_l+0xb14>)
 8006d9a:	e796      	b.n	8006cca <_strtod_l+0x97a>
 8006d9c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006d9e:	4d30      	ldr	r5, [pc, #192]	; (8006e60 <_strtod_l+0xb10>)
 8006da0:	e7ea      	b.n	8006d78 <_strtod_l+0xa28>
 8006da2:	4b2f      	ldr	r3, [pc, #188]	; (8006e60 <_strtod_l+0xb10>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	4630      	mov	r0, r6
 8006da8:	4639      	mov	r1, r7
 8006daa:	f7f9 fc49 	bl	8000640 <__aeabi_dmul>
 8006dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006db0:	4604      	mov	r4, r0
 8006db2:	460d      	mov	r5, r1
 8006db4:	b933      	cbnz	r3, 8006dc4 <_strtod_l+0xa74>
 8006db6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dba:	9010      	str	r0, [sp, #64]	; 0x40
 8006dbc:	9311      	str	r3, [sp, #68]	; 0x44
 8006dbe:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006dc2:	e783      	b.n	8006ccc <_strtod_l+0x97c>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006dcc:	e7f7      	b.n	8006dbe <_strtod_l+0xa6e>
 8006dce:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006dd2:	9b05      	ldr	r3, [sp, #20]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1a8      	bne.n	8006d2a <_strtod_l+0x9da>
 8006dd8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ddc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006dde:	0d1b      	lsrs	r3, r3, #20
 8006de0:	051b      	lsls	r3, r3, #20
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d1a1      	bne.n	8006d2a <_strtod_l+0x9da>
 8006de6:	4620      	mov	r0, r4
 8006de8:	4629      	mov	r1, r5
 8006dea:	f7fa f89f 	bl	8000f2c <__aeabi_d2lz>
 8006dee:	f7f9 fbf9 	bl	80005e4 <__aeabi_l2d>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4620      	mov	r0, r4
 8006df8:	4629      	mov	r1, r5
 8006dfa:	f7f9 fa69 	bl	80002d0 <__aeabi_dsub>
 8006dfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e04:	ea43 0308 	orr.w	r3, r3, r8
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	460d      	mov	r5, r1
 8006e0e:	d066      	beq.n	8006ede <_strtod_l+0xb8e>
 8006e10:	a309      	add	r3, pc, #36	; (adr r3, 8006e38 <_strtod_l+0xae8>)
 8006e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e16:	f7f9 fe85 	bl	8000b24 <__aeabi_dcmplt>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	f47f ace2 	bne.w	80067e4 <_strtod_l+0x494>
 8006e20:	a307      	add	r3, pc, #28	; (adr r3, 8006e40 <_strtod_l+0xaf0>)
 8006e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e26:	4620      	mov	r0, r4
 8006e28:	4629      	mov	r1, r5
 8006e2a:	f7f9 fe99 	bl	8000b60 <__aeabi_dcmpgt>
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	f43f af7b 	beq.w	8006d2a <_strtod_l+0x9da>
 8006e34:	e4d6      	b.n	80067e4 <_strtod_l+0x494>
 8006e36:	bf00      	nop
 8006e38:	94a03595 	.word	0x94a03595
 8006e3c:	3fdfffff 	.word	0x3fdfffff
 8006e40:	35afe535 	.word	0x35afe535
 8006e44:	3fe00000 	.word	0x3fe00000
 8006e48:	000fffff 	.word	0x000fffff
 8006e4c:	7ff00000 	.word	0x7ff00000
 8006e50:	7fefffff 	.word	0x7fefffff
 8006e54:	3ff00000 	.word	0x3ff00000
 8006e58:	7fe00000 	.word	0x7fe00000
 8006e5c:	7c9fffff 	.word	0x7c9fffff
 8006e60:	3fe00000 	.word	0x3fe00000
 8006e64:	bff00000 	.word	0xbff00000
 8006e68:	9b05      	ldr	r3, [sp, #20]
 8006e6a:	b313      	cbz	r3, 8006eb2 <_strtod_l+0xb62>
 8006e6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006e72:	d81e      	bhi.n	8006eb2 <_strtod_l+0xb62>
 8006e74:	a326      	add	r3, pc, #152	; (adr r3, 8006f10 <_strtod_l+0xbc0>)
 8006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	f7f9 fe5b 	bl	8000b38 <__aeabi_dcmple>
 8006e82:	b190      	cbz	r0, 8006eaa <_strtod_l+0xb5a>
 8006e84:	4629      	mov	r1, r5
 8006e86:	4620      	mov	r0, r4
 8006e88:	f7f9 feb2 	bl	8000bf0 <__aeabi_d2uiz>
 8006e8c:	2801      	cmp	r0, #1
 8006e8e:	bf38      	it	cc
 8006e90:	2001      	movcc	r0, #1
 8006e92:	f7f9 fb5b 	bl	800054c <__aeabi_ui2d>
 8006e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e98:	4604      	mov	r4, r0
 8006e9a:	460d      	mov	r5, r1
 8006e9c:	b9d3      	cbnz	r3, 8006ed4 <_strtod_l+0xb84>
 8006e9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ea2:	9012      	str	r0, [sp, #72]	; 0x48
 8006ea4:	9313      	str	r3, [sp, #76]	; 0x4c
 8006ea6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006eaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006eac:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006eb0:	1a9f      	subs	r7, r3, r2
 8006eb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006eb6:	f001 fe41 	bl	8008b3c <__ulp>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	4639      	mov	r1, r7
 8006ec2:	f7f9 fbbd 	bl	8000640 <__aeabi_dmul>
 8006ec6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006eca:	f7f9 fa03 	bl	80002d4 <__adddf3>
 8006ece:	4680      	mov	r8, r0
 8006ed0:	4689      	mov	r9, r1
 8006ed2:	e77e      	b.n	8006dd2 <_strtod_l+0xa82>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006edc:	e7e3      	b.n	8006ea6 <_strtod_l+0xb56>
 8006ede:	a30e      	add	r3, pc, #56	; (adr r3, 8006f18 <_strtod_l+0xbc8>)
 8006ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee4:	f7f9 fe1e 	bl	8000b24 <__aeabi_dcmplt>
 8006ee8:	e7a1      	b.n	8006e2e <_strtod_l+0xade>
 8006eea:	2300      	movs	r3, #0
 8006eec:	930a      	str	r3, [sp, #40]	; 0x28
 8006eee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ef0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006ef2:	6013      	str	r3, [r2, #0]
 8006ef4:	f7ff ba71 	b.w	80063da <_strtod_l+0x8a>
 8006ef8:	2a65      	cmp	r2, #101	; 0x65
 8006efa:	f43f ab63 	beq.w	80065c4 <_strtod_l+0x274>
 8006efe:	2a45      	cmp	r2, #69	; 0x45
 8006f00:	f43f ab60 	beq.w	80065c4 <_strtod_l+0x274>
 8006f04:	2301      	movs	r3, #1
 8006f06:	f7ff bb95 	b.w	8006634 <_strtod_l+0x2e4>
 8006f0a:	bf00      	nop
 8006f0c:	f3af 8000 	nop.w
 8006f10:	ffc00000 	.word	0xffc00000
 8006f14:	41dfffff 	.word	0x41dfffff
 8006f18:	94a03595 	.word	0x94a03595
 8006f1c:	3fcfffff 	.word	0x3fcfffff

08006f20 <_strtod_r>:
 8006f20:	4b01      	ldr	r3, [pc, #4]	; (8006f28 <_strtod_r+0x8>)
 8006f22:	f7ff ba15 	b.w	8006350 <_strtod_l>
 8006f26:	bf00      	nop
 8006f28:	200001b4 	.word	0x200001b4

08006f2c <_strtol_l.constprop.0>:
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f32:	4680      	mov	r8, r0
 8006f34:	d001      	beq.n	8006f3a <_strtol_l.constprop.0+0xe>
 8006f36:	2b24      	cmp	r3, #36	; 0x24
 8006f38:	d906      	bls.n	8006f48 <_strtol_l.constprop.0+0x1c>
 8006f3a:	f7fe fb09 	bl	8005550 <__errno>
 8006f3e:	2316      	movs	r3, #22
 8006f40:	6003      	str	r3, [r0, #0]
 8006f42:	2000      	movs	r0, #0
 8006f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f48:	460d      	mov	r5, r1
 8006f4a:	4f35      	ldr	r7, [pc, #212]	; (8007020 <_strtol_l.constprop.0+0xf4>)
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f52:	5de6      	ldrb	r6, [r4, r7]
 8006f54:	f016 0608 	ands.w	r6, r6, #8
 8006f58:	d1f8      	bne.n	8006f4c <_strtol_l.constprop.0+0x20>
 8006f5a:	2c2d      	cmp	r4, #45	; 0x2d
 8006f5c:	d12f      	bne.n	8006fbe <_strtol_l.constprop.0+0x92>
 8006f5e:	2601      	movs	r6, #1
 8006f60:	782c      	ldrb	r4, [r5, #0]
 8006f62:	1c85      	adds	r5, r0, #2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d057      	beq.n	8007018 <_strtol_l.constprop.0+0xec>
 8006f68:	2b10      	cmp	r3, #16
 8006f6a:	d109      	bne.n	8006f80 <_strtol_l.constprop.0+0x54>
 8006f6c:	2c30      	cmp	r4, #48	; 0x30
 8006f6e:	d107      	bne.n	8006f80 <_strtol_l.constprop.0+0x54>
 8006f70:	7828      	ldrb	r0, [r5, #0]
 8006f72:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006f76:	2858      	cmp	r0, #88	; 0x58
 8006f78:	d149      	bne.n	800700e <_strtol_l.constprop.0+0xe2>
 8006f7a:	2310      	movs	r3, #16
 8006f7c:	786c      	ldrb	r4, [r5, #1]
 8006f7e:	3502      	adds	r5, #2
 8006f80:	2700      	movs	r7, #0
 8006f82:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006f86:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006f8a:	fbbe f9f3 	udiv	r9, lr, r3
 8006f8e:	4638      	mov	r0, r7
 8006f90:	fb03 ea19 	mls	sl, r3, r9, lr
 8006f94:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006f98:	f1bc 0f09 	cmp.w	ip, #9
 8006f9c:	d814      	bhi.n	8006fc8 <_strtol_l.constprop.0+0x9c>
 8006f9e:	4664      	mov	r4, ip
 8006fa0:	42a3      	cmp	r3, r4
 8006fa2:	dd22      	ble.n	8006fea <_strtol_l.constprop.0+0xbe>
 8006fa4:	2f00      	cmp	r7, #0
 8006fa6:	db1d      	blt.n	8006fe4 <_strtol_l.constprop.0+0xb8>
 8006fa8:	4581      	cmp	r9, r0
 8006faa:	d31b      	bcc.n	8006fe4 <_strtol_l.constprop.0+0xb8>
 8006fac:	d101      	bne.n	8006fb2 <_strtol_l.constprop.0+0x86>
 8006fae:	45a2      	cmp	sl, r4
 8006fb0:	db18      	blt.n	8006fe4 <_strtol_l.constprop.0+0xb8>
 8006fb2:	2701      	movs	r7, #1
 8006fb4:	fb00 4003 	mla	r0, r0, r3, r4
 8006fb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006fbc:	e7ea      	b.n	8006f94 <_strtol_l.constprop.0+0x68>
 8006fbe:	2c2b      	cmp	r4, #43	; 0x2b
 8006fc0:	bf04      	itt	eq
 8006fc2:	782c      	ldrbeq	r4, [r5, #0]
 8006fc4:	1c85      	addeq	r5, r0, #2
 8006fc6:	e7cd      	b.n	8006f64 <_strtol_l.constprop.0+0x38>
 8006fc8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006fcc:	f1bc 0f19 	cmp.w	ip, #25
 8006fd0:	d801      	bhi.n	8006fd6 <_strtol_l.constprop.0+0xaa>
 8006fd2:	3c37      	subs	r4, #55	; 0x37
 8006fd4:	e7e4      	b.n	8006fa0 <_strtol_l.constprop.0+0x74>
 8006fd6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006fda:	f1bc 0f19 	cmp.w	ip, #25
 8006fde:	d804      	bhi.n	8006fea <_strtol_l.constprop.0+0xbe>
 8006fe0:	3c57      	subs	r4, #87	; 0x57
 8006fe2:	e7dd      	b.n	8006fa0 <_strtol_l.constprop.0+0x74>
 8006fe4:	f04f 37ff 	mov.w	r7, #4294967295
 8006fe8:	e7e6      	b.n	8006fb8 <_strtol_l.constprop.0+0x8c>
 8006fea:	2f00      	cmp	r7, #0
 8006fec:	da07      	bge.n	8006ffe <_strtol_l.constprop.0+0xd2>
 8006fee:	2322      	movs	r3, #34	; 0x22
 8006ff0:	4670      	mov	r0, lr
 8006ff2:	f8c8 3000 	str.w	r3, [r8]
 8006ff6:	2a00      	cmp	r2, #0
 8006ff8:	d0a4      	beq.n	8006f44 <_strtol_l.constprop.0+0x18>
 8006ffa:	1e69      	subs	r1, r5, #1
 8006ffc:	e005      	b.n	800700a <_strtol_l.constprop.0+0xde>
 8006ffe:	b106      	cbz	r6, 8007002 <_strtol_l.constprop.0+0xd6>
 8007000:	4240      	negs	r0, r0
 8007002:	2a00      	cmp	r2, #0
 8007004:	d09e      	beq.n	8006f44 <_strtol_l.constprop.0+0x18>
 8007006:	2f00      	cmp	r7, #0
 8007008:	d1f7      	bne.n	8006ffa <_strtol_l.constprop.0+0xce>
 800700a:	6011      	str	r1, [r2, #0]
 800700c:	e79a      	b.n	8006f44 <_strtol_l.constprop.0+0x18>
 800700e:	2430      	movs	r4, #48	; 0x30
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1b5      	bne.n	8006f80 <_strtol_l.constprop.0+0x54>
 8007014:	2308      	movs	r3, #8
 8007016:	e7b3      	b.n	8006f80 <_strtol_l.constprop.0+0x54>
 8007018:	2c30      	cmp	r4, #48	; 0x30
 800701a:	d0a9      	beq.n	8006f70 <_strtol_l.constprop.0+0x44>
 800701c:	230a      	movs	r3, #10
 800701e:	e7af      	b.n	8006f80 <_strtol_l.constprop.0+0x54>
 8007020:	0801ad59 	.word	0x0801ad59

08007024 <_strtol_r>:
 8007024:	f7ff bf82 	b.w	8006f2c <_strtol_l.constprop.0>

08007028 <quorem>:
 8007028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702c:	6903      	ldr	r3, [r0, #16]
 800702e:	690c      	ldr	r4, [r1, #16]
 8007030:	4607      	mov	r7, r0
 8007032:	42a3      	cmp	r3, r4
 8007034:	f2c0 8082 	blt.w	800713c <quorem+0x114>
 8007038:	3c01      	subs	r4, #1
 800703a:	f100 0514 	add.w	r5, r0, #20
 800703e:	f101 0814 	add.w	r8, r1, #20
 8007042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007046:	9301      	str	r3, [sp, #4]
 8007048:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800704c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007050:	3301      	adds	r3, #1
 8007052:	429a      	cmp	r2, r3
 8007054:	fbb2 f6f3 	udiv	r6, r2, r3
 8007058:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800705c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007060:	d331      	bcc.n	80070c6 <quorem+0x9e>
 8007062:	f04f 0e00 	mov.w	lr, #0
 8007066:	4640      	mov	r0, r8
 8007068:	46ac      	mov	ip, r5
 800706a:	46f2      	mov	sl, lr
 800706c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007070:	b293      	uxth	r3, r2
 8007072:	fb06 e303 	mla	r3, r6, r3, lr
 8007076:	0c12      	lsrs	r2, r2, #16
 8007078:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800707c:	b29b      	uxth	r3, r3
 800707e:	fb06 e202 	mla	r2, r6, r2, lr
 8007082:	ebaa 0303 	sub.w	r3, sl, r3
 8007086:	f8dc a000 	ldr.w	sl, [ip]
 800708a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800708e:	fa1f fa8a 	uxth.w	sl, sl
 8007092:	4453      	add	r3, sl
 8007094:	f8dc a000 	ldr.w	sl, [ip]
 8007098:	b292      	uxth	r2, r2
 800709a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800709e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070a8:	4581      	cmp	r9, r0
 80070aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80070ae:	f84c 3b04 	str.w	r3, [ip], #4
 80070b2:	d2db      	bcs.n	800706c <quorem+0x44>
 80070b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80070b8:	b92b      	cbnz	r3, 80070c6 <quorem+0x9e>
 80070ba:	9b01      	ldr	r3, [sp, #4]
 80070bc:	3b04      	subs	r3, #4
 80070be:	429d      	cmp	r5, r3
 80070c0:	461a      	mov	r2, r3
 80070c2:	d32f      	bcc.n	8007124 <quorem+0xfc>
 80070c4:	613c      	str	r4, [r7, #16]
 80070c6:	4638      	mov	r0, r7
 80070c8:	f001 fc90 	bl	80089ec <__mcmp>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	db25      	blt.n	800711c <quorem+0xf4>
 80070d0:	4628      	mov	r0, r5
 80070d2:	f04f 0c00 	mov.w	ip, #0
 80070d6:	3601      	adds	r6, #1
 80070d8:	f858 1b04 	ldr.w	r1, [r8], #4
 80070dc:	f8d0 e000 	ldr.w	lr, [r0]
 80070e0:	b28b      	uxth	r3, r1
 80070e2:	ebac 0303 	sub.w	r3, ip, r3
 80070e6:	fa1f f28e 	uxth.w	r2, lr
 80070ea:	4413      	add	r3, r2
 80070ec:	0c0a      	lsrs	r2, r1, #16
 80070ee:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80070f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070fc:	45c1      	cmp	r9, r8
 80070fe:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007102:	f840 3b04 	str.w	r3, [r0], #4
 8007106:	d2e7      	bcs.n	80070d8 <quorem+0xb0>
 8007108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800710c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007110:	b922      	cbnz	r2, 800711c <quorem+0xf4>
 8007112:	3b04      	subs	r3, #4
 8007114:	429d      	cmp	r5, r3
 8007116:	461a      	mov	r2, r3
 8007118:	d30a      	bcc.n	8007130 <quorem+0x108>
 800711a:	613c      	str	r4, [r7, #16]
 800711c:	4630      	mov	r0, r6
 800711e:	b003      	add	sp, #12
 8007120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007124:	6812      	ldr	r2, [r2, #0]
 8007126:	3b04      	subs	r3, #4
 8007128:	2a00      	cmp	r2, #0
 800712a:	d1cb      	bne.n	80070c4 <quorem+0x9c>
 800712c:	3c01      	subs	r4, #1
 800712e:	e7c6      	b.n	80070be <quorem+0x96>
 8007130:	6812      	ldr	r2, [r2, #0]
 8007132:	3b04      	subs	r3, #4
 8007134:	2a00      	cmp	r2, #0
 8007136:	d1f0      	bne.n	800711a <quorem+0xf2>
 8007138:	3c01      	subs	r4, #1
 800713a:	e7eb      	b.n	8007114 <quorem+0xec>
 800713c:	2000      	movs	r0, #0
 800713e:	e7ee      	b.n	800711e <quorem+0xf6>

08007140 <_dtoa_r>:
 8007140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007144:	4616      	mov	r6, r2
 8007146:	461f      	mov	r7, r3
 8007148:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800714a:	b099      	sub	sp, #100	; 0x64
 800714c:	4605      	mov	r5, r0
 800714e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007152:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007156:	b974      	cbnz	r4, 8007176 <_dtoa_r+0x36>
 8007158:	2010      	movs	r0, #16
 800715a:	f001 f949 	bl	80083f0 <malloc>
 800715e:	4602      	mov	r2, r0
 8007160:	6268      	str	r0, [r5, #36]	; 0x24
 8007162:	b920      	cbnz	r0, 800716e <_dtoa_r+0x2e>
 8007164:	21ea      	movs	r1, #234	; 0xea
 8007166:	4ba8      	ldr	r3, [pc, #672]	; (8007408 <_dtoa_r+0x2c8>)
 8007168:	48a8      	ldr	r0, [pc, #672]	; (800740c <_dtoa_r+0x2cc>)
 800716a:	f002 f8b3 	bl	80092d4 <__assert_func>
 800716e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007172:	6004      	str	r4, [r0, #0]
 8007174:	60c4      	str	r4, [r0, #12]
 8007176:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007178:	6819      	ldr	r1, [r3, #0]
 800717a:	b151      	cbz	r1, 8007192 <_dtoa_r+0x52>
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	2301      	movs	r3, #1
 8007180:	4093      	lsls	r3, r2
 8007182:	604a      	str	r2, [r1, #4]
 8007184:	608b      	str	r3, [r1, #8]
 8007186:	4628      	mov	r0, r5
 8007188:	f001 f9a8 	bl	80084dc <_Bfree>
 800718c:	2200      	movs	r2, #0
 800718e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	1e3b      	subs	r3, r7, #0
 8007194:	bfaf      	iteee	ge
 8007196:	2300      	movge	r3, #0
 8007198:	2201      	movlt	r2, #1
 800719a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800719e:	9305      	strlt	r3, [sp, #20]
 80071a0:	bfa8      	it	ge
 80071a2:	f8c8 3000 	strge.w	r3, [r8]
 80071a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80071aa:	4b99      	ldr	r3, [pc, #612]	; (8007410 <_dtoa_r+0x2d0>)
 80071ac:	bfb8      	it	lt
 80071ae:	f8c8 2000 	strlt.w	r2, [r8]
 80071b2:	ea33 0309 	bics.w	r3, r3, r9
 80071b6:	d119      	bne.n	80071ec <_dtoa_r+0xac>
 80071b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80071bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80071be:	6013      	str	r3, [r2, #0]
 80071c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071c4:	4333      	orrs	r3, r6
 80071c6:	f000 857f 	beq.w	8007cc8 <_dtoa_r+0xb88>
 80071ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80071cc:	b953      	cbnz	r3, 80071e4 <_dtoa_r+0xa4>
 80071ce:	4b91      	ldr	r3, [pc, #580]	; (8007414 <_dtoa_r+0x2d4>)
 80071d0:	e022      	b.n	8007218 <_dtoa_r+0xd8>
 80071d2:	4b91      	ldr	r3, [pc, #580]	; (8007418 <_dtoa_r+0x2d8>)
 80071d4:	9303      	str	r3, [sp, #12]
 80071d6:	3308      	adds	r3, #8
 80071d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80071da:	6013      	str	r3, [r2, #0]
 80071dc:	9803      	ldr	r0, [sp, #12]
 80071de:	b019      	add	sp, #100	; 0x64
 80071e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e4:	4b8b      	ldr	r3, [pc, #556]	; (8007414 <_dtoa_r+0x2d4>)
 80071e6:	9303      	str	r3, [sp, #12]
 80071e8:	3303      	adds	r3, #3
 80071ea:	e7f5      	b.n	80071d8 <_dtoa_r+0x98>
 80071ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80071f0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80071f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071f8:	2200      	movs	r2, #0
 80071fa:	2300      	movs	r3, #0
 80071fc:	f7f9 fc88 	bl	8000b10 <__aeabi_dcmpeq>
 8007200:	4680      	mov	r8, r0
 8007202:	b158      	cbz	r0, 800721c <_dtoa_r+0xdc>
 8007204:	2301      	movs	r3, #1
 8007206:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007208:	6013      	str	r3, [r2, #0]
 800720a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 8558 	beq.w	8007cc2 <_dtoa_r+0xb82>
 8007212:	4882      	ldr	r0, [pc, #520]	; (800741c <_dtoa_r+0x2dc>)
 8007214:	6018      	str	r0, [r3, #0]
 8007216:	1e43      	subs	r3, r0, #1
 8007218:	9303      	str	r3, [sp, #12]
 800721a:	e7df      	b.n	80071dc <_dtoa_r+0x9c>
 800721c:	ab16      	add	r3, sp, #88	; 0x58
 800721e:	9301      	str	r3, [sp, #4]
 8007220:	ab17      	add	r3, sp, #92	; 0x5c
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	4628      	mov	r0, r5
 8007226:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800722a:	f001 fd01 	bl	8008c30 <__d2b>
 800722e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007232:	4683      	mov	fp, r0
 8007234:	2c00      	cmp	r4, #0
 8007236:	d07f      	beq.n	8007338 <_dtoa_r+0x1f8>
 8007238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800723c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800723e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007242:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007246:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800724a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800724e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007252:	2200      	movs	r2, #0
 8007254:	4b72      	ldr	r3, [pc, #456]	; (8007420 <_dtoa_r+0x2e0>)
 8007256:	f7f9 f83b 	bl	80002d0 <__aeabi_dsub>
 800725a:	a365      	add	r3, pc, #404	; (adr r3, 80073f0 <_dtoa_r+0x2b0>)
 800725c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007260:	f7f9 f9ee 	bl	8000640 <__aeabi_dmul>
 8007264:	a364      	add	r3, pc, #400	; (adr r3, 80073f8 <_dtoa_r+0x2b8>)
 8007266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726a:	f7f9 f833 	bl	80002d4 <__adddf3>
 800726e:	4606      	mov	r6, r0
 8007270:	4620      	mov	r0, r4
 8007272:	460f      	mov	r7, r1
 8007274:	f7f9 f97a 	bl	800056c <__aeabi_i2d>
 8007278:	a361      	add	r3, pc, #388	; (adr r3, 8007400 <_dtoa_r+0x2c0>)
 800727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727e:	f7f9 f9df 	bl	8000640 <__aeabi_dmul>
 8007282:	4602      	mov	r2, r0
 8007284:	460b      	mov	r3, r1
 8007286:	4630      	mov	r0, r6
 8007288:	4639      	mov	r1, r7
 800728a:	f7f9 f823 	bl	80002d4 <__adddf3>
 800728e:	4606      	mov	r6, r0
 8007290:	460f      	mov	r7, r1
 8007292:	f7f9 fc85 	bl	8000ba0 <__aeabi_d2iz>
 8007296:	2200      	movs	r2, #0
 8007298:	4682      	mov	sl, r0
 800729a:	2300      	movs	r3, #0
 800729c:	4630      	mov	r0, r6
 800729e:	4639      	mov	r1, r7
 80072a0:	f7f9 fc40 	bl	8000b24 <__aeabi_dcmplt>
 80072a4:	b148      	cbz	r0, 80072ba <_dtoa_r+0x17a>
 80072a6:	4650      	mov	r0, sl
 80072a8:	f7f9 f960 	bl	800056c <__aeabi_i2d>
 80072ac:	4632      	mov	r2, r6
 80072ae:	463b      	mov	r3, r7
 80072b0:	f7f9 fc2e 	bl	8000b10 <__aeabi_dcmpeq>
 80072b4:	b908      	cbnz	r0, 80072ba <_dtoa_r+0x17a>
 80072b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072ba:	f1ba 0f16 	cmp.w	sl, #22
 80072be:	d858      	bhi.n	8007372 <_dtoa_r+0x232>
 80072c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072c4:	4b57      	ldr	r3, [pc, #348]	; (8007424 <_dtoa_r+0x2e4>)
 80072c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80072ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ce:	f7f9 fc29 	bl	8000b24 <__aeabi_dcmplt>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	d04f      	beq.n	8007376 <_dtoa_r+0x236>
 80072d6:	2300      	movs	r3, #0
 80072d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80072de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80072e0:	1b1c      	subs	r4, r3, r4
 80072e2:	1e63      	subs	r3, r4, #1
 80072e4:	9309      	str	r3, [sp, #36]	; 0x24
 80072e6:	bf49      	itett	mi
 80072e8:	f1c4 0301 	rsbmi	r3, r4, #1
 80072ec:	2300      	movpl	r3, #0
 80072ee:	9306      	strmi	r3, [sp, #24]
 80072f0:	2300      	movmi	r3, #0
 80072f2:	bf54      	ite	pl
 80072f4:	9306      	strpl	r3, [sp, #24]
 80072f6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80072f8:	f1ba 0f00 	cmp.w	sl, #0
 80072fc:	db3d      	blt.n	800737a <_dtoa_r+0x23a>
 80072fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007300:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007304:	4453      	add	r3, sl
 8007306:	9309      	str	r3, [sp, #36]	; 0x24
 8007308:	2300      	movs	r3, #0
 800730a:	930a      	str	r3, [sp, #40]	; 0x28
 800730c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800730e:	2b09      	cmp	r3, #9
 8007310:	f200 808c 	bhi.w	800742c <_dtoa_r+0x2ec>
 8007314:	2b05      	cmp	r3, #5
 8007316:	bfc4      	itt	gt
 8007318:	3b04      	subgt	r3, #4
 800731a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800731c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800731e:	bfc8      	it	gt
 8007320:	2400      	movgt	r4, #0
 8007322:	f1a3 0302 	sub.w	r3, r3, #2
 8007326:	bfd8      	it	le
 8007328:	2401      	movle	r4, #1
 800732a:	2b03      	cmp	r3, #3
 800732c:	f200 808a 	bhi.w	8007444 <_dtoa_r+0x304>
 8007330:	e8df f003 	tbb	[pc, r3]
 8007334:	5b4d4f2d 	.word	0x5b4d4f2d
 8007338:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800733c:	441c      	add	r4, r3
 800733e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007342:	2b20      	cmp	r3, #32
 8007344:	bfc3      	ittte	gt
 8007346:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800734a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800734e:	fa09 f303 	lslgt.w	r3, r9, r3
 8007352:	f1c3 0320 	rsble	r3, r3, #32
 8007356:	bfc6      	itte	gt
 8007358:	fa26 f000 	lsrgt.w	r0, r6, r0
 800735c:	4318      	orrgt	r0, r3
 800735e:	fa06 f003 	lslle.w	r0, r6, r3
 8007362:	f7f9 f8f3 	bl	800054c <__aeabi_ui2d>
 8007366:	2301      	movs	r3, #1
 8007368:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800736c:	3c01      	subs	r4, #1
 800736e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007370:	e76f      	b.n	8007252 <_dtoa_r+0x112>
 8007372:	2301      	movs	r3, #1
 8007374:	e7b2      	b.n	80072dc <_dtoa_r+0x19c>
 8007376:	900f      	str	r0, [sp, #60]	; 0x3c
 8007378:	e7b1      	b.n	80072de <_dtoa_r+0x19e>
 800737a:	9b06      	ldr	r3, [sp, #24]
 800737c:	eba3 030a 	sub.w	r3, r3, sl
 8007380:	9306      	str	r3, [sp, #24]
 8007382:	f1ca 0300 	rsb	r3, sl, #0
 8007386:	930a      	str	r3, [sp, #40]	; 0x28
 8007388:	2300      	movs	r3, #0
 800738a:	930e      	str	r3, [sp, #56]	; 0x38
 800738c:	e7be      	b.n	800730c <_dtoa_r+0x1cc>
 800738e:	2300      	movs	r3, #0
 8007390:	930b      	str	r3, [sp, #44]	; 0x2c
 8007392:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007394:	2b00      	cmp	r3, #0
 8007396:	dc58      	bgt.n	800744a <_dtoa_r+0x30a>
 8007398:	f04f 0901 	mov.w	r9, #1
 800739c:	464b      	mov	r3, r9
 800739e:	f8cd 9020 	str.w	r9, [sp, #32]
 80073a2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80073a6:	2200      	movs	r2, #0
 80073a8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80073aa:	6042      	str	r2, [r0, #4]
 80073ac:	2204      	movs	r2, #4
 80073ae:	f102 0614 	add.w	r6, r2, #20
 80073b2:	429e      	cmp	r6, r3
 80073b4:	6841      	ldr	r1, [r0, #4]
 80073b6:	d94e      	bls.n	8007456 <_dtoa_r+0x316>
 80073b8:	4628      	mov	r0, r5
 80073ba:	f001 f84f 	bl	800845c <_Balloc>
 80073be:	9003      	str	r0, [sp, #12]
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d14c      	bne.n	800745e <_dtoa_r+0x31e>
 80073c4:	4602      	mov	r2, r0
 80073c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80073ca:	4b17      	ldr	r3, [pc, #92]	; (8007428 <_dtoa_r+0x2e8>)
 80073cc:	e6cc      	b.n	8007168 <_dtoa_r+0x28>
 80073ce:	2301      	movs	r3, #1
 80073d0:	e7de      	b.n	8007390 <_dtoa_r+0x250>
 80073d2:	2300      	movs	r3, #0
 80073d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80073d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80073d8:	eb0a 0903 	add.w	r9, sl, r3
 80073dc:	f109 0301 	add.w	r3, r9, #1
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	9308      	str	r3, [sp, #32]
 80073e4:	bfb8      	it	lt
 80073e6:	2301      	movlt	r3, #1
 80073e8:	e7dd      	b.n	80073a6 <_dtoa_r+0x266>
 80073ea:	2301      	movs	r3, #1
 80073ec:	e7f2      	b.n	80073d4 <_dtoa_r+0x294>
 80073ee:	bf00      	nop
 80073f0:	636f4361 	.word	0x636f4361
 80073f4:	3fd287a7 	.word	0x3fd287a7
 80073f8:	8b60c8b3 	.word	0x8b60c8b3
 80073fc:	3fc68a28 	.word	0x3fc68a28
 8007400:	509f79fb 	.word	0x509f79fb
 8007404:	3fd34413 	.word	0x3fd34413
 8007408:	0801ae66 	.word	0x0801ae66
 800740c:	0801ae7d 	.word	0x0801ae7d
 8007410:	7ff00000 	.word	0x7ff00000
 8007414:	0801ae62 	.word	0x0801ae62
 8007418:	0801ae59 	.word	0x0801ae59
 800741c:	0801acdd 	.word	0x0801acdd
 8007420:	3ff80000 	.word	0x3ff80000
 8007424:	0801afe8 	.word	0x0801afe8
 8007428:	0801aed8 	.word	0x0801aed8
 800742c:	2401      	movs	r4, #1
 800742e:	2300      	movs	r3, #0
 8007430:	940b      	str	r4, [sp, #44]	; 0x2c
 8007432:	9322      	str	r3, [sp, #136]	; 0x88
 8007434:	f04f 39ff 	mov.w	r9, #4294967295
 8007438:	2200      	movs	r2, #0
 800743a:	2312      	movs	r3, #18
 800743c:	f8cd 9020 	str.w	r9, [sp, #32]
 8007440:	9223      	str	r2, [sp, #140]	; 0x8c
 8007442:	e7b0      	b.n	80073a6 <_dtoa_r+0x266>
 8007444:	2301      	movs	r3, #1
 8007446:	930b      	str	r3, [sp, #44]	; 0x2c
 8007448:	e7f4      	b.n	8007434 <_dtoa_r+0x2f4>
 800744a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800744e:	464b      	mov	r3, r9
 8007450:	f8cd 9020 	str.w	r9, [sp, #32]
 8007454:	e7a7      	b.n	80073a6 <_dtoa_r+0x266>
 8007456:	3101      	adds	r1, #1
 8007458:	6041      	str	r1, [r0, #4]
 800745a:	0052      	lsls	r2, r2, #1
 800745c:	e7a7      	b.n	80073ae <_dtoa_r+0x26e>
 800745e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007460:	9a03      	ldr	r2, [sp, #12]
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	9b08      	ldr	r3, [sp, #32]
 8007466:	2b0e      	cmp	r3, #14
 8007468:	f200 80a8 	bhi.w	80075bc <_dtoa_r+0x47c>
 800746c:	2c00      	cmp	r4, #0
 800746e:	f000 80a5 	beq.w	80075bc <_dtoa_r+0x47c>
 8007472:	f1ba 0f00 	cmp.w	sl, #0
 8007476:	dd34      	ble.n	80074e2 <_dtoa_r+0x3a2>
 8007478:	4a9a      	ldr	r2, [pc, #616]	; (80076e4 <_dtoa_r+0x5a4>)
 800747a:	f00a 030f 	and.w	r3, sl, #15
 800747e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007482:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007486:	e9d3 3400 	ldrd	r3, r4, [r3]
 800748a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800748e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007492:	d016      	beq.n	80074c2 <_dtoa_r+0x382>
 8007494:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007498:	4b93      	ldr	r3, [pc, #588]	; (80076e8 <_dtoa_r+0x5a8>)
 800749a:	2703      	movs	r7, #3
 800749c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074a0:	f7f9 f9f8 	bl	8000894 <__aeabi_ddiv>
 80074a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074a8:	f004 040f 	and.w	r4, r4, #15
 80074ac:	4e8e      	ldr	r6, [pc, #568]	; (80076e8 <_dtoa_r+0x5a8>)
 80074ae:	b954      	cbnz	r4, 80074c6 <_dtoa_r+0x386>
 80074b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80074b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074b8:	f7f9 f9ec 	bl	8000894 <__aeabi_ddiv>
 80074bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074c0:	e029      	b.n	8007516 <_dtoa_r+0x3d6>
 80074c2:	2702      	movs	r7, #2
 80074c4:	e7f2      	b.n	80074ac <_dtoa_r+0x36c>
 80074c6:	07e1      	lsls	r1, r4, #31
 80074c8:	d508      	bpl.n	80074dc <_dtoa_r+0x39c>
 80074ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80074ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80074d2:	f7f9 f8b5 	bl	8000640 <__aeabi_dmul>
 80074d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80074da:	3701      	adds	r7, #1
 80074dc:	1064      	asrs	r4, r4, #1
 80074de:	3608      	adds	r6, #8
 80074e0:	e7e5      	b.n	80074ae <_dtoa_r+0x36e>
 80074e2:	f000 80a5 	beq.w	8007630 <_dtoa_r+0x4f0>
 80074e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074ea:	f1ca 0400 	rsb	r4, sl, #0
 80074ee:	4b7d      	ldr	r3, [pc, #500]	; (80076e4 <_dtoa_r+0x5a4>)
 80074f0:	f004 020f 	and.w	r2, r4, #15
 80074f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	f7f9 f8a0 	bl	8000640 <__aeabi_dmul>
 8007500:	2702      	movs	r7, #2
 8007502:	2300      	movs	r3, #0
 8007504:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007508:	4e77      	ldr	r6, [pc, #476]	; (80076e8 <_dtoa_r+0x5a8>)
 800750a:	1124      	asrs	r4, r4, #4
 800750c:	2c00      	cmp	r4, #0
 800750e:	f040 8084 	bne.w	800761a <_dtoa_r+0x4da>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1d2      	bne.n	80074bc <_dtoa_r+0x37c>
 8007516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 808b 	beq.w	8007634 <_dtoa_r+0x4f4>
 800751e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007522:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007526:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800752a:	2200      	movs	r2, #0
 800752c:	4b6f      	ldr	r3, [pc, #444]	; (80076ec <_dtoa_r+0x5ac>)
 800752e:	f7f9 faf9 	bl	8000b24 <__aeabi_dcmplt>
 8007532:	2800      	cmp	r0, #0
 8007534:	d07e      	beq.n	8007634 <_dtoa_r+0x4f4>
 8007536:	9b08      	ldr	r3, [sp, #32]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d07b      	beq.n	8007634 <_dtoa_r+0x4f4>
 800753c:	f1b9 0f00 	cmp.w	r9, #0
 8007540:	dd38      	ble.n	80075b4 <_dtoa_r+0x474>
 8007542:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007546:	2200      	movs	r2, #0
 8007548:	4b69      	ldr	r3, [pc, #420]	; (80076f0 <_dtoa_r+0x5b0>)
 800754a:	f7f9 f879 	bl	8000640 <__aeabi_dmul>
 800754e:	464c      	mov	r4, r9
 8007550:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007554:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007558:	3701      	adds	r7, #1
 800755a:	4638      	mov	r0, r7
 800755c:	f7f9 f806 	bl	800056c <__aeabi_i2d>
 8007560:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007564:	f7f9 f86c 	bl	8000640 <__aeabi_dmul>
 8007568:	2200      	movs	r2, #0
 800756a:	4b62      	ldr	r3, [pc, #392]	; (80076f4 <_dtoa_r+0x5b4>)
 800756c:	f7f8 feb2 	bl	80002d4 <__adddf3>
 8007570:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007574:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007578:	9611      	str	r6, [sp, #68]	; 0x44
 800757a:	2c00      	cmp	r4, #0
 800757c:	d15d      	bne.n	800763a <_dtoa_r+0x4fa>
 800757e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007582:	2200      	movs	r2, #0
 8007584:	4b5c      	ldr	r3, [pc, #368]	; (80076f8 <_dtoa_r+0x5b8>)
 8007586:	f7f8 fea3 	bl	80002d0 <__aeabi_dsub>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007592:	4633      	mov	r3, r6
 8007594:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007596:	f7f9 fae3 	bl	8000b60 <__aeabi_dcmpgt>
 800759a:	2800      	cmp	r0, #0
 800759c:	f040 829c 	bne.w	8007ad8 <_dtoa_r+0x998>
 80075a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075a6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80075aa:	f7f9 fabb 	bl	8000b24 <__aeabi_dcmplt>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	f040 8290 	bne.w	8007ad4 <_dtoa_r+0x994>
 80075b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80075b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80075bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f2c0 8152 	blt.w	8007868 <_dtoa_r+0x728>
 80075c4:	f1ba 0f0e 	cmp.w	sl, #14
 80075c8:	f300 814e 	bgt.w	8007868 <_dtoa_r+0x728>
 80075cc:	4b45      	ldr	r3, [pc, #276]	; (80076e4 <_dtoa_r+0x5a4>)
 80075ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80075d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075d6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80075da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f280 80db 	bge.w	8007798 <_dtoa_r+0x658>
 80075e2:	9b08      	ldr	r3, [sp, #32]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f300 80d7 	bgt.w	8007798 <_dtoa_r+0x658>
 80075ea:	f040 8272 	bne.w	8007ad2 <_dtoa_r+0x992>
 80075ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075f2:	2200      	movs	r2, #0
 80075f4:	4b40      	ldr	r3, [pc, #256]	; (80076f8 <_dtoa_r+0x5b8>)
 80075f6:	f7f9 f823 	bl	8000640 <__aeabi_dmul>
 80075fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075fe:	f7f9 faa5 	bl	8000b4c <__aeabi_dcmpge>
 8007602:	9c08      	ldr	r4, [sp, #32]
 8007604:	4626      	mov	r6, r4
 8007606:	2800      	cmp	r0, #0
 8007608:	f040 8248 	bne.w	8007a9c <_dtoa_r+0x95c>
 800760c:	2331      	movs	r3, #49	; 0x31
 800760e:	9f03      	ldr	r7, [sp, #12]
 8007610:	f10a 0a01 	add.w	sl, sl, #1
 8007614:	f807 3b01 	strb.w	r3, [r7], #1
 8007618:	e244      	b.n	8007aa4 <_dtoa_r+0x964>
 800761a:	07e2      	lsls	r2, r4, #31
 800761c:	d505      	bpl.n	800762a <_dtoa_r+0x4ea>
 800761e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007622:	f7f9 f80d 	bl	8000640 <__aeabi_dmul>
 8007626:	2301      	movs	r3, #1
 8007628:	3701      	adds	r7, #1
 800762a:	1064      	asrs	r4, r4, #1
 800762c:	3608      	adds	r6, #8
 800762e:	e76d      	b.n	800750c <_dtoa_r+0x3cc>
 8007630:	2702      	movs	r7, #2
 8007632:	e770      	b.n	8007516 <_dtoa_r+0x3d6>
 8007634:	46d0      	mov	r8, sl
 8007636:	9c08      	ldr	r4, [sp, #32]
 8007638:	e78f      	b.n	800755a <_dtoa_r+0x41a>
 800763a:	9903      	ldr	r1, [sp, #12]
 800763c:	4b29      	ldr	r3, [pc, #164]	; (80076e4 <_dtoa_r+0x5a4>)
 800763e:	4421      	add	r1, r4
 8007640:	9112      	str	r1, [sp, #72]	; 0x48
 8007642:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007644:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007648:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800764c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007650:	2900      	cmp	r1, #0
 8007652:	d055      	beq.n	8007700 <_dtoa_r+0x5c0>
 8007654:	2000      	movs	r0, #0
 8007656:	4929      	ldr	r1, [pc, #164]	; (80076fc <_dtoa_r+0x5bc>)
 8007658:	f7f9 f91c 	bl	8000894 <__aeabi_ddiv>
 800765c:	463b      	mov	r3, r7
 800765e:	4632      	mov	r2, r6
 8007660:	f7f8 fe36 	bl	80002d0 <__aeabi_dsub>
 8007664:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007668:	9f03      	ldr	r7, [sp, #12]
 800766a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800766e:	f7f9 fa97 	bl	8000ba0 <__aeabi_d2iz>
 8007672:	4604      	mov	r4, r0
 8007674:	f7f8 ff7a 	bl	800056c <__aeabi_i2d>
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007680:	f7f8 fe26 	bl	80002d0 <__aeabi_dsub>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	3430      	adds	r4, #48	; 0x30
 800768a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800768e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007692:	f807 4b01 	strb.w	r4, [r7], #1
 8007696:	f7f9 fa45 	bl	8000b24 <__aeabi_dcmplt>
 800769a:	2800      	cmp	r0, #0
 800769c:	d174      	bne.n	8007788 <_dtoa_r+0x648>
 800769e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076a2:	2000      	movs	r0, #0
 80076a4:	4911      	ldr	r1, [pc, #68]	; (80076ec <_dtoa_r+0x5ac>)
 80076a6:	f7f8 fe13 	bl	80002d0 <__aeabi_dsub>
 80076aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076ae:	f7f9 fa39 	bl	8000b24 <__aeabi_dcmplt>
 80076b2:	2800      	cmp	r0, #0
 80076b4:	f040 80b7 	bne.w	8007826 <_dtoa_r+0x6e6>
 80076b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076ba:	429f      	cmp	r7, r3
 80076bc:	f43f af7a 	beq.w	80075b4 <_dtoa_r+0x474>
 80076c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076c4:	2200      	movs	r2, #0
 80076c6:	4b0a      	ldr	r3, [pc, #40]	; (80076f0 <_dtoa_r+0x5b0>)
 80076c8:	f7f8 ffba 	bl	8000640 <__aeabi_dmul>
 80076cc:	2200      	movs	r2, #0
 80076ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80076d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076d6:	4b06      	ldr	r3, [pc, #24]	; (80076f0 <_dtoa_r+0x5b0>)
 80076d8:	f7f8 ffb2 	bl	8000640 <__aeabi_dmul>
 80076dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076e0:	e7c3      	b.n	800766a <_dtoa_r+0x52a>
 80076e2:	bf00      	nop
 80076e4:	0801afe8 	.word	0x0801afe8
 80076e8:	0801afc0 	.word	0x0801afc0
 80076ec:	3ff00000 	.word	0x3ff00000
 80076f0:	40240000 	.word	0x40240000
 80076f4:	401c0000 	.word	0x401c0000
 80076f8:	40140000 	.word	0x40140000
 80076fc:	3fe00000 	.word	0x3fe00000
 8007700:	4630      	mov	r0, r6
 8007702:	4639      	mov	r1, r7
 8007704:	f7f8 ff9c 	bl	8000640 <__aeabi_dmul>
 8007708:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800770a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800770e:	9c03      	ldr	r4, [sp, #12]
 8007710:	9314      	str	r3, [sp, #80]	; 0x50
 8007712:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007716:	f7f9 fa43 	bl	8000ba0 <__aeabi_d2iz>
 800771a:	9015      	str	r0, [sp, #84]	; 0x54
 800771c:	f7f8 ff26 	bl	800056c <__aeabi_i2d>
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007728:	f7f8 fdd2 	bl	80002d0 <__aeabi_dsub>
 800772c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800772e:	4606      	mov	r6, r0
 8007730:	3330      	adds	r3, #48	; 0x30
 8007732:	f804 3b01 	strb.w	r3, [r4], #1
 8007736:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007738:	460f      	mov	r7, r1
 800773a:	429c      	cmp	r4, r3
 800773c:	f04f 0200 	mov.w	r2, #0
 8007740:	d124      	bne.n	800778c <_dtoa_r+0x64c>
 8007742:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007746:	4bb0      	ldr	r3, [pc, #704]	; (8007a08 <_dtoa_r+0x8c8>)
 8007748:	f7f8 fdc4 	bl	80002d4 <__adddf3>
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	4630      	mov	r0, r6
 8007752:	4639      	mov	r1, r7
 8007754:	f7f9 fa04 	bl	8000b60 <__aeabi_dcmpgt>
 8007758:	2800      	cmp	r0, #0
 800775a:	d163      	bne.n	8007824 <_dtoa_r+0x6e4>
 800775c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007760:	2000      	movs	r0, #0
 8007762:	49a9      	ldr	r1, [pc, #676]	; (8007a08 <_dtoa_r+0x8c8>)
 8007764:	f7f8 fdb4 	bl	80002d0 <__aeabi_dsub>
 8007768:	4602      	mov	r2, r0
 800776a:	460b      	mov	r3, r1
 800776c:	4630      	mov	r0, r6
 800776e:	4639      	mov	r1, r7
 8007770:	f7f9 f9d8 	bl	8000b24 <__aeabi_dcmplt>
 8007774:	2800      	cmp	r0, #0
 8007776:	f43f af1d 	beq.w	80075b4 <_dtoa_r+0x474>
 800777a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800777c:	1e7b      	subs	r3, r7, #1
 800777e:	9314      	str	r3, [sp, #80]	; 0x50
 8007780:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007784:	2b30      	cmp	r3, #48	; 0x30
 8007786:	d0f8      	beq.n	800777a <_dtoa_r+0x63a>
 8007788:	46c2      	mov	sl, r8
 800778a:	e03b      	b.n	8007804 <_dtoa_r+0x6c4>
 800778c:	4b9f      	ldr	r3, [pc, #636]	; (8007a0c <_dtoa_r+0x8cc>)
 800778e:	f7f8 ff57 	bl	8000640 <__aeabi_dmul>
 8007792:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007796:	e7bc      	b.n	8007712 <_dtoa_r+0x5d2>
 8007798:	9f03      	ldr	r7, [sp, #12]
 800779a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800779e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077a2:	4640      	mov	r0, r8
 80077a4:	4649      	mov	r1, r9
 80077a6:	f7f9 f875 	bl	8000894 <__aeabi_ddiv>
 80077aa:	f7f9 f9f9 	bl	8000ba0 <__aeabi_d2iz>
 80077ae:	4604      	mov	r4, r0
 80077b0:	f7f8 fedc 	bl	800056c <__aeabi_i2d>
 80077b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077b8:	f7f8 ff42 	bl	8000640 <__aeabi_dmul>
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	4640      	mov	r0, r8
 80077c2:	4649      	mov	r1, r9
 80077c4:	f7f8 fd84 	bl	80002d0 <__aeabi_dsub>
 80077c8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80077cc:	f807 6b01 	strb.w	r6, [r7], #1
 80077d0:	9e03      	ldr	r6, [sp, #12]
 80077d2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80077d6:	1bbe      	subs	r6, r7, r6
 80077d8:	45b4      	cmp	ip, r6
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	d136      	bne.n	800784e <_dtoa_r+0x70e>
 80077e0:	f7f8 fd78 	bl	80002d4 <__adddf3>
 80077e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077e8:	4680      	mov	r8, r0
 80077ea:	4689      	mov	r9, r1
 80077ec:	f7f9 f9b8 	bl	8000b60 <__aeabi_dcmpgt>
 80077f0:	bb58      	cbnz	r0, 800784a <_dtoa_r+0x70a>
 80077f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077f6:	4640      	mov	r0, r8
 80077f8:	4649      	mov	r1, r9
 80077fa:	f7f9 f989 	bl	8000b10 <__aeabi_dcmpeq>
 80077fe:	b108      	cbz	r0, 8007804 <_dtoa_r+0x6c4>
 8007800:	07e1      	lsls	r1, r4, #31
 8007802:	d422      	bmi.n	800784a <_dtoa_r+0x70a>
 8007804:	4628      	mov	r0, r5
 8007806:	4659      	mov	r1, fp
 8007808:	f000 fe68 	bl	80084dc <_Bfree>
 800780c:	2300      	movs	r3, #0
 800780e:	703b      	strb	r3, [r7, #0]
 8007810:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007812:	f10a 0001 	add.w	r0, sl, #1
 8007816:	6018      	str	r0, [r3, #0]
 8007818:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800781a:	2b00      	cmp	r3, #0
 800781c:	f43f acde 	beq.w	80071dc <_dtoa_r+0x9c>
 8007820:	601f      	str	r7, [r3, #0]
 8007822:	e4db      	b.n	80071dc <_dtoa_r+0x9c>
 8007824:	4627      	mov	r7, r4
 8007826:	463b      	mov	r3, r7
 8007828:	461f      	mov	r7, r3
 800782a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800782e:	2a39      	cmp	r2, #57	; 0x39
 8007830:	d107      	bne.n	8007842 <_dtoa_r+0x702>
 8007832:	9a03      	ldr	r2, [sp, #12]
 8007834:	429a      	cmp	r2, r3
 8007836:	d1f7      	bne.n	8007828 <_dtoa_r+0x6e8>
 8007838:	2230      	movs	r2, #48	; 0x30
 800783a:	9903      	ldr	r1, [sp, #12]
 800783c:	f108 0801 	add.w	r8, r8, #1
 8007840:	700a      	strb	r2, [r1, #0]
 8007842:	781a      	ldrb	r2, [r3, #0]
 8007844:	3201      	adds	r2, #1
 8007846:	701a      	strb	r2, [r3, #0]
 8007848:	e79e      	b.n	8007788 <_dtoa_r+0x648>
 800784a:	46d0      	mov	r8, sl
 800784c:	e7eb      	b.n	8007826 <_dtoa_r+0x6e6>
 800784e:	2200      	movs	r2, #0
 8007850:	4b6e      	ldr	r3, [pc, #440]	; (8007a0c <_dtoa_r+0x8cc>)
 8007852:	f7f8 fef5 	bl	8000640 <__aeabi_dmul>
 8007856:	2200      	movs	r2, #0
 8007858:	2300      	movs	r3, #0
 800785a:	4680      	mov	r8, r0
 800785c:	4689      	mov	r9, r1
 800785e:	f7f9 f957 	bl	8000b10 <__aeabi_dcmpeq>
 8007862:	2800      	cmp	r0, #0
 8007864:	d09b      	beq.n	800779e <_dtoa_r+0x65e>
 8007866:	e7cd      	b.n	8007804 <_dtoa_r+0x6c4>
 8007868:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800786a:	2a00      	cmp	r2, #0
 800786c:	f000 80d0 	beq.w	8007a10 <_dtoa_r+0x8d0>
 8007870:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007872:	2a01      	cmp	r2, #1
 8007874:	f300 80ae 	bgt.w	80079d4 <_dtoa_r+0x894>
 8007878:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800787a:	2a00      	cmp	r2, #0
 800787c:	f000 80a6 	beq.w	80079cc <_dtoa_r+0x88c>
 8007880:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007884:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007886:	9f06      	ldr	r7, [sp, #24]
 8007888:	9a06      	ldr	r2, [sp, #24]
 800788a:	2101      	movs	r1, #1
 800788c:	441a      	add	r2, r3
 800788e:	9206      	str	r2, [sp, #24]
 8007890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007892:	4628      	mov	r0, r5
 8007894:	441a      	add	r2, r3
 8007896:	9209      	str	r2, [sp, #36]	; 0x24
 8007898:	f000 ff20 	bl	80086dc <__i2b>
 800789c:	4606      	mov	r6, r0
 800789e:	2f00      	cmp	r7, #0
 80078a0:	dd0c      	ble.n	80078bc <_dtoa_r+0x77c>
 80078a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	dd09      	ble.n	80078bc <_dtoa_r+0x77c>
 80078a8:	42bb      	cmp	r3, r7
 80078aa:	bfa8      	it	ge
 80078ac:	463b      	movge	r3, r7
 80078ae:	9a06      	ldr	r2, [sp, #24]
 80078b0:	1aff      	subs	r7, r7, r3
 80078b2:	1ad2      	subs	r2, r2, r3
 80078b4:	9206      	str	r2, [sp, #24]
 80078b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	9309      	str	r3, [sp, #36]	; 0x24
 80078bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078be:	b1f3      	cbz	r3, 80078fe <_dtoa_r+0x7be>
 80078c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 80a8 	beq.w	8007a18 <_dtoa_r+0x8d8>
 80078c8:	2c00      	cmp	r4, #0
 80078ca:	dd10      	ble.n	80078ee <_dtoa_r+0x7ae>
 80078cc:	4631      	mov	r1, r6
 80078ce:	4622      	mov	r2, r4
 80078d0:	4628      	mov	r0, r5
 80078d2:	f000 ffc1 	bl	8008858 <__pow5mult>
 80078d6:	465a      	mov	r2, fp
 80078d8:	4601      	mov	r1, r0
 80078da:	4606      	mov	r6, r0
 80078dc:	4628      	mov	r0, r5
 80078de:	f000 ff13 	bl	8008708 <__multiply>
 80078e2:	4680      	mov	r8, r0
 80078e4:	4659      	mov	r1, fp
 80078e6:	4628      	mov	r0, r5
 80078e8:	f000 fdf8 	bl	80084dc <_Bfree>
 80078ec:	46c3      	mov	fp, r8
 80078ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078f0:	1b1a      	subs	r2, r3, r4
 80078f2:	d004      	beq.n	80078fe <_dtoa_r+0x7be>
 80078f4:	4659      	mov	r1, fp
 80078f6:	4628      	mov	r0, r5
 80078f8:	f000 ffae 	bl	8008858 <__pow5mult>
 80078fc:	4683      	mov	fp, r0
 80078fe:	2101      	movs	r1, #1
 8007900:	4628      	mov	r0, r5
 8007902:	f000 feeb 	bl	80086dc <__i2b>
 8007906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007908:	4604      	mov	r4, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	f340 8086 	ble.w	8007a1c <_dtoa_r+0x8dc>
 8007910:	461a      	mov	r2, r3
 8007912:	4601      	mov	r1, r0
 8007914:	4628      	mov	r0, r5
 8007916:	f000 ff9f 	bl	8008858 <__pow5mult>
 800791a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800791c:	4604      	mov	r4, r0
 800791e:	2b01      	cmp	r3, #1
 8007920:	dd7f      	ble.n	8007a22 <_dtoa_r+0x8e2>
 8007922:	f04f 0800 	mov.w	r8, #0
 8007926:	6923      	ldr	r3, [r4, #16]
 8007928:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800792c:	6918      	ldr	r0, [r3, #16]
 800792e:	f000 fe87 	bl	8008640 <__hi0bits>
 8007932:	f1c0 0020 	rsb	r0, r0, #32
 8007936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007938:	4418      	add	r0, r3
 800793a:	f010 001f 	ands.w	r0, r0, #31
 800793e:	f000 8092 	beq.w	8007a66 <_dtoa_r+0x926>
 8007942:	f1c0 0320 	rsb	r3, r0, #32
 8007946:	2b04      	cmp	r3, #4
 8007948:	f340 808a 	ble.w	8007a60 <_dtoa_r+0x920>
 800794c:	f1c0 001c 	rsb	r0, r0, #28
 8007950:	9b06      	ldr	r3, [sp, #24]
 8007952:	4407      	add	r7, r0
 8007954:	4403      	add	r3, r0
 8007956:	9306      	str	r3, [sp, #24]
 8007958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800795a:	4403      	add	r3, r0
 800795c:	9309      	str	r3, [sp, #36]	; 0x24
 800795e:	9b06      	ldr	r3, [sp, #24]
 8007960:	2b00      	cmp	r3, #0
 8007962:	dd05      	ble.n	8007970 <_dtoa_r+0x830>
 8007964:	4659      	mov	r1, fp
 8007966:	461a      	mov	r2, r3
 8007968:	4628      	mov	r0, r5
 800796a:	f000 ffcf 	bl	800890c <__lshift>
 800796e:	4683      	mov	fp, r0
 8007970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007972:	2b00      	cmp	r3, #0
 8007974:	dd05      	ble.n	8007982 <_dtoa_r+0x842>
 8007976:	4621      	mov	r1, r4
 8007978:	461a      	mov	r2, r3
 800797a:	4628      	mov	r0, r5
 800797c:	f000 ffc6 	bl	800890c <__lshift>
 8007980:	4604      	mov	r4, r0
 8007982:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007984:	2b00      	cmp	r3, #0
 8007986:	d070      	beq.n	8007a6a <_dtoa_r+0x92a>
 8007988:	4621      	mov	r1, r4
 800798a:	4658      	mov	r0, fp
 800798c:	f001 f82e 	bl	80089ec <__mcmp>
 8007990:	2800      	cmp	r0, #0
 8007992:	da6a      	bge.n	8007a6a <_dtoa_r+0x92a>
 8007994:	2300      	movs	r3, #0
 8007996:	4659      	mov	r1, fp
 8007998:	220a      	movs	r2, #10
 800799a:	4628      	mov	r0, r5
 800799c:	f000 fdc0 	bl	8008520 <__multadd>
 80079a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079a2:	4683      	mov	fp, r0
 80079a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 8194 	beq.w	8007cd6 <_dtoa_r+0xb96>
 80079ae:	4631      	mov	r1, r6
 80079b0:	2300      	movs	r3, #0
 80079b2:	220a      	movs	r2, #10
 80079b4:	4628      	mov	r0, r5
 80079b6:	f000 fdb3 	bl	8008520 <__multadd>
 80079ba:	f1b9 0f00 	cmp.w	r9, #0
 80079be:	4606      	mov	r6, r0
 80079c0:	f300 8093 	bgt.w	8007aea <_dtoa_r+0x9aa>
 80079c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	dc57      	bgt.n	8007a7a <_dtoa_r+0x93a>
 80079ca:	e08e      	b.n	8007aea <_dtoa_r+0x9aa>
 80079cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80079ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80079d2:	e757      	b.n	8007884 <_dtoa_r+0x744>
 80079d4:	9b08      	ldr	r3, [sp, #32]
 80079d6:	1e5c      	subs	r4, r3, #1
 80079d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079da:	42a3      	cmp	r3, r4
 80079dc:	bfb7      	itett	lt
 80079de:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80079e0:	1b1c      	subge	r4, r3, r4
 80079e2:	1ae2      	sublt	r2, r4, r3
 80079e4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80079e6:	bfbe      	ittt	lt
 80079e8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80079ea:	189b      	addlt	r3, r3, r2
 80079ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80079ee:	9b08      	ldr	r3, [sp, #32]
 80079f0:	bfb8      	it	lt
 80079f2:	2400      	movlt	r4, #0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	bfbb      	ittet	lt
 80079f8:	9b06      	ldrlt	r3, [sp, #24]
 80079fa:	9a08      	ldrlt	r2, [sp, #32]
 80079fc:	9f06      	ldrge	r7, [sp, #24]
 80079fe:	1a9f      	sublt	r7, r3, r2
 8007a00:	bfac      	ite	ge
 8007a02:	9b08      	ldrge	r3, [sp, #32]
 8007a04:	2300      	movlt	r3, #0
 8007a06:	e73f      	b.n	8007888 <_dtoa_r+0x748>
 8007a08:	3fe00000 	.word	0x3fe00000
 8007a0c:	40240000 	.word	0x40240000
 8007a10:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a12:	9f06      	ldr	r7, [sp, #24]
 8007a14:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007a16:	e742      	b.n	800789e <_dtoa_r+0x75e>
 8007a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a1a:	e76b      	b.n	80078f4 <_dtoa_r+0x7b4>
 8007a1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	dc19      	bgt.n	8007a56 <_dtoa_r+0x916>
 8007a22:	9b04      	ldr	r3, [sp, #16]
 8007a24:	b9bb      	cbnz	r3, 8007a56 <_dtoa_r+0x916>
 8007a26:	9b05      	ldr	r3, [sp, #20]
 8007a28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a2c:	b99b      	cbnz	r3, 8007a56 <_dtoa_r+0x916>
 8007a2e:	9b05      	ldr	r3, [sp, #20]
 8007a30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a34:	0d1b      	lsrs	r3, r3, #20
 8007a36:	051b      	lsls	r3, r3, #20
 8007a38:	b183      	cbz	r3, 8007a5c <_dtoa_r+0x91c>
 8007a3a:	f04f 0801 	mov.w	r8, #1
 8007a3e:	9b06      	ldr	r3, [sp, #24]
 8007a40:	3301      	adds	r3, #1
 8007a42:	9306      	str	r3, [sp, #24]
 8007a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a46:	3301      	adds	r3, #1
 8007a48:	9309      	str	r3, [sp, #36]	; 0x24
 8007a4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f47f af6a 	bne.w	8007926 <_dtoa_r+0x7e6>
 8007a52:	2001      	movs	r0, #1
 8007a54:	e76f      	b.n	8007936 <_dtoa_r+0x7f6>
 8007a56:	f04f 0800 	mov.w	r8, #0
 8007a5a:	e7f6      	b.n	8007a4a <_dtoa_r+0x90a>
 8007a5c:	4698      	mov	r8, r3
 8007a5e:	e7f4      	b.n	8007a4a <_dtoa_r+0x90a>
 8007a60:	f43f af7d 	beq.w	800795e <_dtoa_r+0x81e>
 8007a64:	4618      	mov	r0, r3
 8007a66:	301c      	adds	r0, #28
 8007a68:	e772      	b.n	8007950 <_dtoa_r+0x810>
 8007a6a:	9b08      	ldr	r3, [sp, #32]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	dc36      	bgt.n	8007ade <_dtoa_r+0x99e>
 8007a70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	dd33      	ble.n	8007ade <_dtoa_r+0x99e>
 8007a76:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a7a:	f1b9 0f00 	cmp.w	r9, #0
 8007a7e:	d10d      	bne.n	8007a9c <_dtoa_r+0x95c>
 8007a80:	4621      	mov	r1, r4
 8007a82:	464b      	mov	r3, r9
 8007a84:	2205      	movs	r2, #5
 8007a86:	4628      	mov	r0, r5
 8007a88:	f000 fd4a 	bl	8008520 <__multadd>
 8007a8c:	4601      	mov	r1, r0
 8007a8e:	4604      	mov	r4, r0
 8007a90:	4658      	mov	r0, fp
 8007a92:	f000 ffab 	bl	80089ec <__mcmp>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	f73f adb8 	bgt.w	800760c <_dtoa_r+0x4cc>
 8007a9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a9e:	9f03      	ldr	r7, [sp, #12]
 8007aa0:	ea6f 0a03 	mvn.w	sl, r3
 8007aa4:	f04f 0800 	mov.w	r8, #0
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	4628      	mov	r0, r5
 8007aac:	f000 fd16 	bl	80084dc <_Bfree>
 8007ab0:	2e00      	cmp	r6, #0
 8007ab2:	f43f aea7 	beq.w	8007804 <_dtoa_r+0x6c4>
 8007ab6:	f1b8 0f00 	cmp.w	r8, #0
 8007aba:	d005      	beq.n	8007ac8 <_dtoa_r+0x988>
 8007abc:	45b0      	cmp	r8, r6
 8007abe:	d003      	beq.n	8007ac8 <_dtoa_r+0x988>
 8007ac0:	4641      	mov	r1, r8
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	f000 fd0a 	bl	80084dc <_Bfree>
 8007ac8:	4631      	mov	r1, r6
 8007aca:	4628      	mov	r0, r5
 8007acc:	f000 fd06 	bl	80084dc <_Bfree>
 8007ad0:	e698      	b.n	8007804 <_dtoa_r+0x6c4>
 8007ad2:	2400      	movs	r4, #0
 8007ad4:	4626      	mov	r6, r4
 8007ad6:	e7e1      	b.n	8007a9c <_dtoa_r+0x95c>
 8007ad8:	46c2      	mov	sl, r8
 8007ada:	4626      	mov	r6, r4
 8007adc:	e596      	b.n	800760c <_dtoa_r+0x4cc>
 8007ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ae0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 80fd 	beq.w	8007ce4 <_dtoa_r+0xba4>
 8007aea:	2f00      	cmp	r7, #0
 8007aec:	dd05      	ble.n	8007afa <_dtoa_r+0x9ba>
 8007aee:	4631      	mov	r1, r6
 8007af0:	463a      	mov	r2, r7
 8007af2:	4628      	mov	r0, r5
 8007af4:	f000 ff0a 	bl	800890c <__lshift>
 8007af8:	4606      	mov	r6, r0
 8007afa:	f1b8 0f00 	cmp.w	r8, #0
 8007afe:	d05c      	beq.n	8007bba <_dtoa_r+0xa7a>
 8007b00:	4628      	mov	r0, r5
 8007b02:	6871      	ldr	r1, [r6, #4]
 8007b04:	f000 fcaa 	bl	800845c <_Balloc>
 8007b08:	4607      	mov	r7, r0
 8007b0a:	b928      	cbnz	r0, 8007b18 <_dtoa_r+0x9d8>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007b12:	4b7f      	ldr	r3, [pc, #508]	; (8007d10 <_dtoa_r+0xbd0>)
 8007b14:	f7ff bb28 	b.w	8007168 <_dtoa_r+0x28>
 8007b18:	6932      	ldr	r2, [r6, #16]
 8007b1a:	f106 010c 	add.w	r1, r6, #12
 8007b1e:	3202      	adds	r2, #2
 8007b20:	0092      	lsls	r2, r2, #2
 8007b22:	300c      	adds	r0, #12
 8007b24:	f000 fc8c 	bl	8008440 <memcpy>
 8007b28:	2201      	movs	r2, #1
 8007b2a:	4639      	mov	r1, r7
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	f000 feed 	bl	800890c <__lshift>
 8007b32:	46b0      	mov	r8, r6
 8007b34:	4606      	mov	r6, r0
 8007b36:	9b03      	ldr	r3, [sp, #12]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	9308      	str	r3, [sp, #32]
 8007b3c:	9b03      	ldr	r3, [sp, #12]
 8007b3e:	444b      	add	r3, r9
 8007b40:	930a      	str	r3, [sp, #40]	; 0x28
 8007b42:	9b04      	ldr	r3, [sp, #16]
 8007b44:	f003 0301 	and.w	r3, r3, #1
 8007b48:	9309      	str	r3, [sp, #36]	; 0x24
 8007b4a:	9b08      	ldr	r3, [sp, #32]
 8007b4c:	4621      	mov	r1, r4
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	4658      	mov	r0, fp
 8007b52:	9304      	str	r3, [sp, #16]
 8007b54:	f7ff fa68 	bl	8007028 <quorem>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	4641      	mov	r1, r8
 8007b5c:	3330      	adds	r3, #48	; 0x30
 8007b5e:	9006      	str	r0, [sp, #24]
 8007b60:	4658      	mov	r0, fp
 8007b62:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b64:	f000 ff42 	bl	80089ec <__mcmp>
 8007b68:	4632      	mov	r2, r6
 8007b6a:	4681      	mov	r9, r0
 8007b6c:	4621      	mov	r1, r4
 8007b6e:	4628      	mov	r0, r5
 8007b70:	f000 ff58 	bl	8008a24 <__mdiff>
 8007b74:	68c2      	ldr	r2, [r0, #12]
 8007b76:	4607      	mov	r7, r0
 8007b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b7a:	bb02      	cbnz	r2, 8007bbe <_dtoa_r+0xa7e>
 8007b7c:	4601      	mov	r1, r0
 8007b7e:	4658      	mov	r0, fp
 8007b80:	f000 ff34 	bl	80089ec <__mcmp>
 8007b84:	4602      	mov	r2, r0
 8007b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b88:	4639      	mov	r1, r7
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007b90:	f000 fca4 	bl	80084dc <_Bfree>
 8007b94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b98:	9f08      	ldr	r7, [sp, #32]
 8007b9a:	ea43 0102 	orr.w	r1, r3, r2
 8007b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba0:	430b      	orrs	r3, r1
 8007ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ba4:	d10d      	bne.n	8007bc2 <_dtoa_r+0xa82>
 8007ba6:	2b39      	cmp	r3, #57	; 0x39
 8007ba8:	d029      	beq.n	8007bfe <_dtoa_r+0xabe>
 8007baa:	f1b9 0f00 	cmp.w	r9, #0
 8007bae:	dd01      	ble.n	8007bb4 <_dtoa_r+0xa74>
 8007bb0:	9b06      	ldr	r3, [sp, #24]
 8007bb2:	3331      	adds	r3, #49	; 0x31
 8007bb4:	9a04      	ldr	r2, [sp, #16]
 8007bb6:	7013      	strb	r3, [r2, #0]
 8007bb8:	e776      	b.n	8007aa8 <_dtoa_r+0x968>
 8007bba:	4630      	mov	r0, r6
 8007bbc:	e7b9      	b.n	8007b32 <_dtoa_r+0x9f2>
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	e7e2      	b.n	8007b88 <_dtoa_r+0xa48>
 8007bc2:	f1b9 0f00 	cmp.w	r9, #0
 8007bc6:	db06      	blt.n	8007bd6 <_dtoa_r+0xa96>
 8007bc8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007bca:	ea41 0909 	orr.w	r9, r1, r9
 8007bce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bd0:	ea59 0101 	orrs.w	r1, r9, r1
 8007bd4:	d120      	bne.n	8007c18 <_dtoa_r+0xad8>
 8007bd6:	2a00      	cmp	r2, #0
 8007bd8:	ddec      	ble.n	8007bb4 <_dtoa_r+0xa74>
 8007bda:	4659      	mov	r1, fp
 8007bdc:	2201      	movs	r2, #1
 8007bde:	4628      	mov	r0, r5
 8007be0:	9308      	str	r3, [sp, #32]
 8007be2:	f000 fe93 	bl	800890c <__lshift>
 8007be6:	4621      	mov	r1, r4
 8007be8:	4683      	mov	fp, r0
 8007bea:	f000 feff 	bl	80089ec <__mcmp>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	9b08      	ldr	r3, [sp, #32]
 8007bf2:	dc02      	bgt.n	8007bfa <_dtoa_r+0xaba>
 8007bf4:	d1de      	bne.n	8007bb4 <_dtoa_r+0xa74>
 8007bf6:	07da      	lsls	r2, r3, #31
 8007bf8:	d5dc      	bpl.n	8007bb4 <_dtoa_r+0xa74>
 8007bfa:	2b39      	cmp	r3, #57	; 0x39
 8007bfc:	d1d8      	bne.n	8007bb0 <_dtoa_r+0xa70>
 8007bfe:	2339      	movs	r3, #57	; 0x39
 8007c00:	9a04      	ldr	r2, [sp, #16]
 8007c02:	7013      	strb	r3, [r2, #0]
 8007c04:	463b      	mov	r3, r7
 8007c06:	461f      	mov	r7, r3
 8007c08:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	2a39      	cmp	r2, #57	; 0x39
 8007c10:	d050      	beq.n	8007cb4 <_dtoa_r+0xb74>
 8007c12:	3201      	adds	r2, #1
 8007c14:	701a      	strb	r2, [r3, #0]
 8007c16:	e747      	b.n	8007aa8 <_dtoa_r+0x968>
 8007c18:	2a00      	cmp	r2, #0
 8007c1a:	dd03      	ble.n	8007c24 <_dtoa_r+0xae4>
 8007c1c:	2b39      	cmp	r3, #57	; 0x39
 8007c1e:	d0ee      	beq.n	8007bfe <_dtoa_r+0xabe>
 8007c20:	3301      	adds	r3, #1
 8007c22:	e7c7      	b.n	8007bb4 <_dtoa_r+0xa74>
 8007c24:	9a08      	ldr	r2, [sp, #32]
 8007c26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c28:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007c2c:	428a      	cmp	r2, r1
 8007c2e:	d02a      	beq.n	8007c86 <_dtoa_r+0xb46>
 8007c30:	4659      	mov	r1, fp
 8007c32:	2300      	movs	r3, #0
 8007c34:	220a      	movs	r2, #10
 8007c36:	4628      	mov	r0, r5
 8007c38:	f000 fc72 	bl	8008520 <__multadd>
 8007c3c:	45b0      	cmp	r8, r6
 8007c3e:	4683      	mov	fp, r0
 8007c40:	f04f 0300 	mov.w	r3, #0
 8007c44:	f04f 020a 	mov.w	r2, #10
 8007c48:	4641      	mov	r1, r8
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	d107      	bne.n	8007c5e <_dtoa_r+0xb1e>
 8007c4e:	f000 fc67 	bl	8008520 <__multadd>
 8007c52:	4680      	mov	r8, r0
 8007c54:	4606      	mov	r6, r0
 8007c56:	9b08      	ldr	r3, [sp, #32]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	9308      	str	r3, [sp, #32]
 8007c5c:	e775      	b.n	8007b4a <_dtoa_r+0xa0a>
 8007c5e:	f000 fc5f 	bl	8008520 <__multadd>
 8007c62:	4631      	mov	r1, r6
 8007c64:	4680      	mov	r8, r0
 8007c66:	2300      	movs	r3, #0
 8007c68:	220a      	movs	r2, #10
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	f000 fc58 	bl	8008520 <__multadd>
 8007c70:	4606      	mov	r6, r0
 8007c72:	e7f0      	b.n	8007c56 <_dtoa_r+0xb16>
 8007c74:	f1b9 0f00 	cmp.w	r9, #0
 8007c78:	bfcc      	ite	gt
 8007c7a:	464f      	movgt	r7, r9
 8007c7c:	2701      	movle	r7, #1
 8007c7e:	f04f 0800 	mov.w	r8, #0
 8007c82:	9a03      	ldr	r2, [sp, #12]
 8007c84:	4417      	add	r7, r2
 8007c86:	4659      	mov	r1, fp
 8007c88:	2201      	movs	r2, #1
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	9308      	str	r3, [sp, #32]
 8007c8e:	f000 fe3d 	bl	800890c <__lshift>
 8007c92:	4621      	mov	r1, r4
 8007c94:	4683      	mov	fp, r0
 8007c96:	f000 fea9 	bl	80089ec <__mcmp>
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	dcb2      	bgt.n	8007c04 <_dtoa_r+0xac4>
 8007c9e:	d102      	bne.n	8007ca6 <_dtoa_r+0xb66>
 8007ca0:	9b08      	ldr	r3, [sp, #32]
 8007ca2:	07db      	lsls	r3, r3, #31
 8007ca4:	d4ae      	bmi.n	8007c04 <_dtoa_r+0xac4>
 8007ca6:	463b      	mov	r3, r7
 8007ca8:	461f      	mov	r7, r3
 8007caa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cae:	2a30      	cmp	r2, #48	; 0x30
 8007cb0:	d0fa      	beq.n	8007ca8 <_dtoa_r+0xb68>
 8007cb2:	e6f9      	b.n	8007aa8 <_dtoa_r+0x968>
 8007cb4:	9a03      	ldr	r2, [sp, #12]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d1a5      	bne.n	8007c06 <_dtoa_r+0xac6>
 8007cba:	2331      	movs	r3, #49	; 0x31
 8007cbc:	f10a 0a01 	add.w	sl, sl, #1
 8007cc0:	e779      	b.n	8007bb6 <_dtoa_r+0xa76>
 8007cc2:	4b14      	ldr	r3, [pc, #80]	; (8007d14 <_dtoa_r+0xbd4>)
 8007cc4:	f7ff baa8 	b.w	8007218 <_dtoa_r+0xd8>
 8007cc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f47f aa81 	bne.w	80071d2 <_dtoa_r+0x92>
 8007cd0:	4b11      	ldr	r3, [pc, #68]	; (8007d18 <_dtoa_r+0xbd8>)
 8007cd2:	f7ff baa1 	b.w	8007218 <_dtoa_r+0xd8>
 8007cd6:	f1b9 0f00 	cmp.w	r9, #0
 8007cda:	dc03      	bgt.n	8007ce4 <_dtoa_r+0xba4>
 8007cdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	f73f aecb 	bgt.w	8007a7a <_dtoa_r+0x93a>
 8007ce4:	9f03      	ldr	r7, [sp, #12]
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	4658      	mov	r0, fp
 8007cea:	f7ff f99d 	bl	8007028 <quorem>
 8007cee:	9a03      	ldr	r2, [sp, #12]
 8007cf0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007cf4:	f807 3b01 	strb.w	r3, [r7], #1
 8007cf8:	1aba      	subs	r2, r7, r2
 8007cfa:	4591      	cmp	r9, r2
 8007cfc:	ddba      	ble.n	8007c74 <_dtoa_r+0xb34>
 8007cfe:	4659      	mov	r1, fp
 8007d00:	2300      	movs	r3, #0
 8007d02:	220a      	movs	r2, #10
 8007d04:	4628      	mov	r0, r5
 8007d06:	f000 fc0b 	bl	8008520 <__multadd>
 8007d0a:	4683      	mov	fp, r0
 8007d0c:	e7eb      	b.n	8007ce6 <_dtoa_r+0xba6>
 8007d0e:	bf00      	nop
 8007d10:	0801aed8 	.word	0x0801aed8
 8007d14:	0801acdc 	.word	0x0801acdc
 8007d18:	0801ae59 	.word	0x0801ae59

08007d1c <rshift>:
 8007d1c:	6903      	ldr	r3, [r0, #16]
 8007d1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007d26:	f100 0414 	add.w	r4, r0, #20
 8007d2a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007d2e:	dd46      	ble.n	8007dbe <rshift+0xa2>
 8007d30:	f011 011f 	ands.w	r1, r1, #31
 8007d34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007d38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007d3c:	d10c      	bne.n	8007d58 <rshift+0x3c>
 8007d3e:	4629      	mov	r1, r5
 8007d40:	f100 0710 	add.w	r7, r0, #16
 8007d44:	42b1      	cmp	r1, r6
 8007d46:	d335      	bcc.n	8007db4 <rshift+0x98>
 8007d48:	1a9b      	subs	r3, r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	1eea      	subs	r2, r5, #3
 8007d4e:	4296      	cmp	r6, r2
 8007d50:	bf38      	it	cc
 8007d52:	2300      	movcc	r3, #0
 8007d54:	4423      	add	r3, r4
 8007d56:	e015      	b.n	8007d84 <rshift+0x68>
 8007d58:	46a1      	mov	r9, r4
 8007d5a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007d5e:	f1c1 0820 	rsb	r8, r1, #32
 8007d62:	40cf      	lsrs	r7, r1
 8007d64:	f105 0e04 	add.w	lr, r5, #4
 8007d68:	4576      	cmp	r6, lr
 8007d6a:	46f4      	mov	ip, lr
 8007d6c:	d816      	bhi.n	8007d9c <rshift+0x80>
 8007d6e:	1a9a      	subs	r2, r3, r2
 8007d70:	0092      	lsls	r2, r2, #2
 8007d72:	3a04      	subs	r2, #4
 8007d74:	3501      	adds	r5, #1
 8007d76:	42ae      	cmp	r6, r5
 8007d78:	bf38      	it	cc
 8007d7a:	2200      	movcc	r2, #0
 8007d7c:	18a3      	adds	r3, r4, r2
 8007d7e:	50a7      	str	r7, [r4, r2]
 8007d80:	b107      	cbz	r7, 8007d84 <rshift+0x68>
 8007d82:	3304      	adds	r3, #4
 8007d84:	42a3      	cmp	r3, r4
 8007d86:	eba3 0204 	sub.w	r2, r3, r4
 8007d8a:	bf08      	it	eq
 8007d8c:	2300      	moveq	r3, #0
 8007d8e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007d92:	6102      	str	r2, [r0, #16]
 8007d94:	bf08      	it	eq
 8007d96:	6143      	streq	r3, [r0, #20]
 8007d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d9c:	f8dc c000 	ldr.w	ip, [ip]
 8007da0:	fa0c fc08 	lsl.w	ip, ip, r8
 8007da4:	ea4c 0707 	orr.w	r7, ip, r7
 8007da8:	f849 7b04 	str.w	r7, [r9], #4
 8007dac:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007db0:	40cf      	lsrs	r7, r1
 8007db2:	e7d9      	b.n	8007d68 <rshift+0x4c>
 8007db4:	f851 cb04 	ldr.w	ip, [r1], #4
 8007db8:	f847 cf04 	str.w	ip, [r7, #4]!
 8007dbc:	e7c2      	b.n	8007d44 <rshift+0x28>
 8007dbe:	4623      	mov	r3, r4
 8007dc0:	e7e0      	b.n	8007d84 <rshift+0x68>

08007dc2 <__hexdig_fun>:
 8007dc2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007dc6:	2b09      	cmp	r3, #9
 8007dc8:	d802      	bhi.n	8007dd0 <__hexdig_fun+0xe>
 8007dca:	3820      	subs	r0, #32
 8007dcc:	b2c0      	uxtb	r0, r0
 8007dce:	4770      	bx	lr
 8007dd0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007dd4:	2b05      	cmp	r3, #5
 8007dd6:	d801      	bhi.n	8007ddc <__hexdig_fun+0x1a>
 8007dd8:	3847      	subs	r0, #71	; 0x47
 8007dda:	e7f7      	b.n	8007dcc <__hexdig_fun+0xa>
 8007ddc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007de0:	2b05      	cmp	r3, #5
 8007de2:	d801      	bhi.n	8007de8 <__hexdig_fun+0x26>
 8007de4:	3827      	subs	r0, #39	; 0x27
 8007de6:	e7f1      	b.n	8007dcc <__hexdig_fun+0xa>
 8007de8:	2000      	movs	r0, #0
 8007dea:	4770      	bx	lr

08007dec <__gethex>:
 8007dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df0:	b08b      	sub	sp, #44	; 0x2c
 8007df2:	9305      	str	r3, [sp, #20]
 8007df4:	4bb2      	ldr	r3, [pc, #712]	; (80080c0 <__gethex+0x2d4>)
 8007df6:	9002      	str	r0, [sp, #8]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	468b      	mov	fp, r1
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	4690      	mov	r8, r2
 8007e00:	9303      	str	r3, [sp, #12]
 8007e02:	f7f8 f9a5 	bl	8000150 <strlen>
 8007e06:	4682      	mov	sl, r0
 8007e08:	9b03      	ldr	r3, [sp, #12]
 8007e0a:	f8db 2000 	ldr.w	r2, [fp]
 8007e0e:	4403      	add	r3, r0
 8007e10:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007e14:	9306      	str	r3, [sp, #24]
 8007e16:	1c93      	adds	r3, r2, #2
 8007e18:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007e1c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007e20:	32fe      	adds	r2, #254	; 0xfe
 8007e22:	18d1      	adds	r1, r2, r3
 8007e24:	461f      	mov	r7, r3
 8007e26:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007e2a:	9101      	str	r1, [sp, #4]
 8007e2c:	2830      	cmp	r0, #48	; 0x30
 8007e2e:	d0f8      	beq.n	8007e22 <__gethex+0x36>
 8007e30:	f7ff ffc7 	bl	8007dc2 <__hexdig_fun>
 8007e34:	4604      	mov	r4, r0
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d13a      	bne.n	8007eb0 <__gethex+0xc4>
 8007e3a:	4652      	mov	r2, sl
 8007e3c:	4638      	mov	r0, r7
 8007e3e:	9903      	ldr	r1, [sp, #12]
 8007e40:	f001 fa26 	bl	8009290 <strncmp>
 8007e44:	4605      	mov	r5, r0
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d166      	bne.n	8007f18 <__gethex+0x12c>
 8007e4a:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007e4e:	eb07 060a 	add.w	r6, r7, sl
 8007e52:	f7ff ffb6 	bl	8007dc2 <__hexdig_fun>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d060      	beq.n	8007f1c <__gethex+0x130>
 8007e5a:	4633      	mov	r3, r6
 8007e5c:	7818      	ldrb	r0, [r3, #0]
 8007e5e:	461f      	mov	r7, r3
 8007e60:	2830      	cmp	r0, #48	; 0x30
 8007e62:	f103 0301 	add.w	r3, r3, #1
 8007e66:	d0f9      	beq.n	8007e5c <__gethex+0x70>
 8007e68:	f7ff ffab 	bl	8007dc2 <__hexdig_fun>
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	fab0 f480 	clz	r4, r0
 8007e72:	4635      	mov	r5, r6
 8007e74:	0964      	lsrs	r4, r4, #5
 8007e76:	9301      	str	r3, [sp, #4]
 8007e78:	463a      	mov	r2, r7
 8007e7a:	4616      	mov	r6, r2
 8007e7c:	7830      	ldrb	r0, [r6, #0]
 8007e7e:	3201      	adds	r2, #1
 8007e80:	f7ff ff9f 	bl	8007dc2 <__hexdig_fun>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	d1f8      	bne.n	8007e7a <__gethex+0x8e>
 8007e88:	4652      	mov	r2, sl
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	9903      	ldr	r1, [sp, #12]
 8007e8e:	f001 f9ff 	bl	8009290 <strncmp>
 8007e92:	b980      	cbnz	r0, 8007eb6 <__gethex+0xca>
 8007e94:	b94d      	cbnz	r5, 8007eaa <__gethex+0xbe>
 8007e96:	eb06 050a 	add.w	r5, r6, sl
 8007e9a:	462a      	mov	r2, r5
 8007e9c:	4616      	mov	r6, r2
 8007e9e:	7830      	ldrb	r0, [r6, #0]
 8007ea0:	3201      	adds	r2, #1
 8007ea2:	f7ff ff8e 	bl	8007dc2 <__hexdig_fun>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d1f8      	bne.n	8007e9c <__gethex+0xb0>
 8007eaa:	1bad      	subs	r5, r5, r6
 8007eac:	00ad      	lsls	r5, r5, #2
 8007eae:	e004      	b.n	8007eba <__gethex+0xce>
 8007eb0:	2400      	movs	r4, #0
 8007eb2:	4625      	mov	r5, r4
 8007eb4:	e7e0      	b.n	8007e78 <__gethex+0x8c>
 8007eb6:	2d00      	cmp	r5, #0
 8007eb8:	d1f7      	bne.n	8007eaa <__gethex+0xbe>
 8007eba:	7833      	ldrb	r3, [r6, #0]
 8007ebc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007ec0:	2b50      	cmp	r3, #80	; 0x50
 8007ec2:	d139      	bne.n	8007f38 <__gethex+0x14c>
 8007ec4:	7873      	ldrb	r3, [r6, #1]
 8007ec6:	2b2b      	cmp	r3, #43	; 0x2b
 8007ec8:	d02a      	beq.n	8007f20 <__gethex+0x134>
 8007eca:	2b2d      	cmp	r3, #45	; 0x2d
 8007ecc:	d02c      	beq.n	8007f28 <__gethex+0x13c>
 8007ece:	f04f 0900 	mov.w	r9, #0
 8007ed2:	1c71      	adds	r1, r6, #1
 8007ed4:	7808      	ldrb	r0, [r1, #0]
 8007ed6:	f7ff ff74 	bl	8007dc2 <__hexdig_fun>
 8007eda:	1e43      	subs	r3, r0, #1
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b18      	cmp	r3, #24
 8007ee0:	d82a      	bhi.n	8007f38 <__gethex+0x14c>
 8007ee2:	f1a0 0210 	sub.w	r2, r0, #16
 8007ee6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007eea:	f7ff ff6a 	bl	8007dc2 <__hexdig_fun>
 8007eee:	1e43      	subs	r3, r0, #1
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b18      	cmp	r3, #24
 8007ef4:	d91b      	bls.n	8007f2e <__gethex+0x142>
 8007ef6:	f1b9 0f00 	cmp.w	r9, #0
 8007efa:	d000      	beq.n	8007efe <__gethex+0x112>
 8007efc:	4252      	negs	r2, r2
 8007efe:	4415      	add	r5, r2
 8007f00:	f8cb 1000 	str.w	r1, [fp]
 8007f04:	b1d4      	cbz	r4, 8007f3c <__gethex+0x150>
 8007f06:	9b01      	ldr	r3, [sp, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	bf14      	ite	ne
 8007f0c:	2700      	movne	r7, #0
 8007f0e:	2706      	moveq	r7, #6
 8007f10:	4638      	mov	r0, r7
 8007f12:	b00b      	add	sp, #44	; 0x2c
 8007f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f18:	463e      	mov	r6, r7
 8007f1a:	4625      	mov	r5, r4
 8007f1c:	2401      	movs	r4, #1
 8007f1e:	e7cc      	b.n	8007eba <__gethex+0xce>
 8007f20:	f04f 0900 	mov.w	r9, #0
 8007f24:	1cb1      	adds	r1, r6, #2
 8007f26:	e7d5      	b.n	8007ed4 <__gethex+0xe8>
 8007f28:	f04f 0901 	mov.w	r9, #1
 8007f2c:	e7fa      	b.n	8007f24 <__gethex+0x138>
 8007f2e:	230a      	movs	r3, #10
 8007f30:	fb03 0202 	mla	r2, r3, r2, r0
 8007f34:	3a10      	subs	r2, #16
 8007f36:	e7d6      	b.n	8007ee6 <__gethex+0xfa>
 8007f38:	4631      	mov	r1, r6
 8007f3a:	e7e1      	b.n	8007f00 <__gethex+0x114>
 8007f3c:	4621      	mov	r1, r4
 8007f3e:	1bf3      	subs	r3, r6, r7
 8007f40:	3b01      	subs	r3, #1
 8007f42:	2b07      	cmp	r3, #7
 8007f44:	dc0a      	bgt.n	8007f5c <__gethex+0x170>
 8007f46:	9802      	ldr	r0, [sp, #8]
 8007f48:	f000 fa88 	bl	800845c <_Balloc>
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	b940      	cbnz	r0, 8007f62 <__gethex+0x176>
 8007f50:	4602      	mov	r2, r0
 8007f52:	21de      	movs	r1, #222	; 0xde
 8007f54:	4b5b      	ldr	r3, [pc, #364]	; (80080c4 <__gethex+0x2d8>)
 8007f56:	485c      	ldr	r0, [pc, #368]	; (80080c8 <__gethex+0x2dc>)
 8007f58:	f001 f9bc 	bl	80092d4 <__assert_func>
 8007f5c:	3101      	adds	r1, #1
 8007f5e:	105b      	asrs	r3, r3, #1
 8007f60:	e7ef      	b.n	8007f42 <__gethex+0x156>
 8007f62:	f04f 0b00 	mov.w	fp, #0
 8007f66:	f100 0914 	add.w	r9, r0, #20
 8007f6a:	f1ca 0301 	rsb	r3, sl, #1
 8007f6e:	f8cd 9010 	str.w	r9, [sp, #16]
 8007f72:	f8cd b004 	str.w	fp, [sp, #4]
 8007f76:	9308      	str	r3, [sp, #32]
 8007f78:	42b7      	cmp	r7, r6
 8007f7a:	d33f      	bcc.n	8007ffc <__gethex+0x210>
 8007f7c:	9f04      	ldr	r7, [sp, #16]
 8007f7e:	9b01      	ldr	r3, [sp, #4]
 8007f80:	f847 3b04 	str.w	r3, [r7], #4
 8007f84:	eba7 0709 	sub.w	r7, r7, r9
 8007f88:	10bf      	asrs	r7, r7, #2
 8007f8a:	6127      	str	r7, [r4, #16]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 fb57 	bl	8008640 <__hi0bits>
 8007f92:	017f      	lsls	r7, r7, #5
 8007f94:	f8d8 6000 	ldr.w	r6, [r8]
 8007f98:	1a3f      	subs	r7, r7, r0
 8007f9a:	42b7      	cmp	r7, r6
 8007f9c:	dd62      	ble.n	8008064 <__gethex+0x278>
 8007f9e:	1bbf      	subs	r7, r7, r6
 8007fa0:	4639      	mov	r1, r7
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f000 fef1 	bl	8008d8a <__any_on>
 8007fa8:	4682      	mov	sl, r0
 8007faa:	b1a8      	cbz	r0, 8007fd8 <__gethex+0x1ec>
 8007fac:	f04f 0a01 	mov.w	sl, #1
 8007fb0:	1e7b      	subs	r3, r7, #1
 8007fb2:	1159      	asrs	r1, r3, #5
 8007fb4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007fb8:	f003 021f 	and.w	r2, r3, #31
 8007fbc:	fa0a f202 	lsl.w	r2, sl, r2
 8007fc0:	420a      	tst	r2, r1
 8007fc2:	d009      	beq.n	8007fd8 <__gethex+0x1ec>
 8007fc4:	4553      	cmp	r3, sl
 8007fc6:	dd05      	ble.n	8007fd4 <__gethex+0x1e8>
 8007fc8:	4620      	mov	r0, r4
 8007fca:	1eb9      	subs	r1, r7, #2
 8007fcc:	f000 fedd 	bl	8008d8a <__any_on>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d144      	bne.n	800805e <__gethex+0x272>
 8007fd4:	f04f 0a02 	mov.w	sl, #2
 8007fd8:	4639      	mov	r1, r7
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f7ff fe9e 	bl	8007d1c <rshift>
 8007fe0:	443d      	add	r5, r7
 8007fe2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007fe6:	42ab      	cmp	r3, r5
 8007fe8:	da4a      	bge.n	8008080 <__gethex+0x294>
 8007fea:	4621      	mov	r1, r4
 8007fec:	9802      	ldr	r0, [sp, #8]
 8007fee:	f000 fa75 	bl	80084dc <_Bfree>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ff6:	27a3      	movs	r7, #163	; 0xa3
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	e789      	b.n	8007f10 <__gethex+0x124>
 8007ffc:	1e73      	subs	r3, r6, #1
 8007ffe:	9a06      	ldr	r2, [sp, #24]
 8008000:	9307      	str	r3, [sp, #28]
 8008002:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008006:	4293      	cmp	r3, r2
 8008008:	d019      	beq.n	800803e <__gethex+0x252>
 800800a:	f1bb 0f20 	cmp.w	fp, #32
 800800e:	d107      	bne.n	8008020 <__gethex+0x234>
 8008010:	9b04      	ldr	r3, [sp, #16]
 8008012:	9a01      	ldr	r2, [sp, #4]
 8008014:	f843 2b04 	str.w	r2, [r3], #4
 8008018:	9304      	str	r3, [sp, #16]
 800801a:	2300      	movs	r3, #0
 800801c:	469b      	mov	fp, r3
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008024:	f7ff fecd 	bl	8007dc2 <__hexdig_fun>
 8008028:	9b01      	ldr	r3, [sp, #4]
 800802a:	f000 000f 	and.w	r0, r0, #15
 800802e:	fa00 f00b 	lsl.w	r0, r0, fp
 8008032:	4303      	orrs	r3, r0
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	f10b 0b04 	add.w	fp, fp, #4
 800803a:	9b07      	ldr	r3, [sp, #28]
 800803c:	e00d      	b.n	800805a <__gethex+0x26e>
 800803e:	9a08      	ldr	r2, [sp, #32]
 8008040:	1e73      	subs	r3, r6, #1
 8008042:	4413      	add	r3, r2
 8008044:	42bb      	cmp	r3, r7
 8008046:	d3e0      	bcc.n	800800a <__gethex+0x21e>
 8008048:	4618      	mov	r0, r3
 800804a:	4652      	mov	r2, sl
 800804c:	9903      	ldr	r1, [sp, #12]
 800804e:	9309      	str	r3, [sp, #36]	; 0x24
 8008050:	f001 f91e 	bl	8009290 <strncmp>
 8008054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008056:	2800      	cmp	r0, #0
 8008058:	d1d7      	bne.n	800800a <__gethex+0x21e>
 800805a:	461e      	mov	r6, r3
 800805c:	e78c      	b.n	8007f78 <__gethex+0x18c>
 800805e:	f04f 0a03 	mov.w	sl, #3
 8008062:	e7b9      	b.n	8007fd8 <__gethex+0x1ec>
 8008064:	da09      	bge.n	800807a <__gethex+0x28e>
 8008066:	1bf7      	subs	r7, r6, r7
 8008068:	4621      	mov	r1, r4
 800806a:	463a      	mov	r2, r7
 800806c:	9802      	ldr	r0, [sp, #8]
 800806e:	f000 fc4d 	bl	800890c <__lshift>
 8008072:	4604      	mov	r4, r0
 8008074:	1bed      	subs	r5, r5, r7
 8008076:	f100 0914 	add.w	r9, r0, #20
 800807a:	f04f 0a00 	mov.w	sl, #0
 800807e:	e7b0      	b.n	8007fe2 <__gethex+0x1f6>
 8008080:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008084:	42a8      	cmp	r0, r5
 8008086:	dd72      	ble.n	800816e <__gethex+0x382>
 8008088:	1b45      	subs	r5, r0, r5
 800808a:	42ae      	cmp	r6, r5
 800808c:	dc35      	bgt.n	80080fa <__gethex+0x30e>
 800808e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008092:	2b02      	cmp	r3, #2
 8008094:	d029      	beq.n	80080ea <__gethex+0x2fe>
 8008096:	2b03      	cmp	r3, #3
 8008098:	d02b      	beq.n	80080f2 <__gethex+0x306>
 800809a:	2b01      	cmp	r3, #1
 800809c:	d11c      	bne.n	80080d8 <__gethex+0x2ec>
 800809e:	42ae      	cmp	r6, r5
 80080a0:	d11a      	bne.n	80080d8 <__gethex+0x2ec>
 80080a2:	2e01      	cmp	r6, #1
 80080a4:	d112      	bne.n	80080cc <__gethex+0x2e0>
 80080a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80080aa:	9a05      	ldr	r2, [sp, #20]
 80080ac:	2762      	movs	r7, #98	; 0x62
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	2301      	movs	r3, #1
 80080b2:	6123      	str	r3, [r4, #16]
 80080b4:	f8c9 3000 	str.w	r3, [r9]
 80080b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080ba:	601c      	str	r4, [r3, #0]
 80080bc:	e728      	b.n	8007f10 <__gethex+0x124>
 80080be:	bf00      	nop
 80080c0:	0801af50 	.word	0x0801af50
 80080c4:	0801aed8 	.word	0x0801aed8
 80080c8:	0801aee9 	.word	0x0801aee9
 80080cc:	4620      	mov	r0, r4
 80080ce:	1e71      	subs	r1, r6, #1
 80080d0:	f000 fe5b 	bl	8008d8a <__any_on>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	d1e6      	bne.n	80080a6 <__gethex+0x2ba>
 80080d8:	4621      	mov	r1, r4
 80080da:	9802      	ldr	r0, [sp, #8]
 80080dc:	f000 f9fe 	bl	80084dc <_Bfree>
 80080e0:	2300      	movs	r3, #0
 80080e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80080e4:	2750      	movs	r7, #80	; 0x50
 80080e6:	6013      	str	r3, [r2, #0]
 80080e8:	e712      	b.n	8007f10 <__gethex+0x124>
 80080ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1f3      	bne.n	80080d8 <__gethex+0x2ec>
 80080f0:	e7d9      	b.n	80080a6 <__gethex+0x2ba>
 80080f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1d6      	bne.n	80080a6 <__gethex+0x2ba>
 80080f8:	e7ee      	b.n	80080d8 <__gethex+0x2ec>
 80080fa:	1e6f      	subs	r7, r5, #1
 80080fc:	f1ba 0f00 	cmp.w	sl, #0
 8008100:	d132      	bne.n	8008168 <__gethex+0x37c>
 8008102:	b127      	cbz	r7, 800810e <__gethex+0x322>
 8008104:	4639      	mov	r1, r7
 8008106:	4620      	mov	r0, r4
 8008108:	f000 fe3f 	bl	8008d8a <__any_on>
 800810c:	4682      	mov	sl, r0
 800810e:	2101      	movs	r1, #1
 8008110:	117b      	asrs	r3, r7, #5
 8008112:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008116:	f007 071f 	and.w	r7, r7, #31
 800811a:	fa01 f707 	lsl.w	r7, r1, r7
 800811e:	421f      	tst	r7, r3
 8008120:	f04f 0702 	mov.w	r7, #2
 8008124:	4629      	mov	r1, r5
 8008126:	4620      	mov	r0, r4
 8008128:	bf18      	it	ne
 800812a:	f04a 0a02 	orrne.w	sl, sl, #2
 800812e:	1b76      	subs	r6, r6, r5
 8008130:	f7ff fdf4 	bl	8007d1c <rshift>
 8008134:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008138:	f1ba 0f00 	cmp.w	sl, #0
 800813c:	d048      	beq.n	80081d0 <__gethex+0x3e4>
 800813e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008142:	2b02      	cmp	r3, #2
 8008144:	d015      	beq.n	8008172 <__gethex+0x386>
 8008146:	2b03      	cmp	r3, #3
 8008148:	d017      	beq.n	800817a <__gethex+0x38e>
 800814a:	2b01      	cmp	r3, #1
 800814c:	d109      	bne.n	8008162 <__gethex+0x376>
 800814e:	f01a 0f02 	tst.w	sl, #2
 8008152:	d006      	beq.n	8008162 <__gethex+0x376>
 8008154:	f8d9 0000 	ldr.w	r0, [r9]
 8008158:	ea4a 0a00 	orr.w	sl, sl, r0
 800815c:	f01a 0f01 	tst.w	sl, #1
 8008160:	d10e      	bne.n	8008180 <__gethex+0x394>
 8008162:	f047 0710 	orr.w	r7, r7, #16
 8008166:	e033      	b.n	80081d0 <__gethex+0x3e4>
 8008168:	f04f 0a01 	mov.w	sl, #1
 800816c:	e7cf      	b.n	800810e <__gethex+0x322>
 800816e:	2701      	movs	r7, #1
 8008170:	e7e2      	b.n	8008138 <__gethex+0x34c>
 8008172:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008174:	f1c3 0301 	rsb	r3, r3, #1
 8008178:	9315      	str	r3, [sp, #84]	; 0x54
 800817a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800817c:	2b00      	cmp	r3, #0
 800817e:	d0f0      	beq.n	8008162 <__gethex+0x376>
 8008180:	f04f 0c00 	mov.w	ip, #0
 8008184:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008188:	f104 0314 	add.w	r3, r4, #20
 800818c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008190:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008194:	4618      	mov	r0, r3
 8008196:	f853 2b04 	ldr.w	r2, [r3], #4
 800819a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800819e:	d01c      	beq.n	80081da <__gethex+0x3ee>
 80081a0:	3201      	adds	r2, #1
 80081a2:	6002      	str	r2, [r0, #0]
 80081a4:	2f02      	cmp	r7, #2
 80081a6:	f104 0314 	add.w	r3, r4, #20
 80081aa:	d13d      	bne.n	8008228 <__gethex+0x43c>
 80081ac:	f8d8 2000 	ldr.w	r2, [r8]
 80081b0:	3a01      	subs	r2, #1
 80081b2:	42b2      	cmp	r2, r6
 80081b4:	d10a      	bne.n	80081cc <__gethex+0x3e0>
 80081b6:	2201      	movs	r2, #1
 80081b8:	1171      	asrs	r1, r6, #5
 80081ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80081be:	f006 061f 	and.w	r6, r6, #31
 80081c2:	fa02 f606 	lsl.w	r6, r2, r6
 80081c6:	421e      	tst	r6, r3
 80081c8:	bf18      	it	ne
 80081ca:	4617      	movne	r7, r2
 80081cc:	f047 0720 	orr.w	r7, r7, #32
 80081d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081d2:	601c      	str	r4, [r3, #0]
 80081d4:	9b05      	ldr	r3, [sp, #20]
 80081d6:	601d      	str	r5, [r3, #0]
 80081d8:	e69a      	b.n	8007f10 <__gethex+0x124>
 80081da:	4299      	cmp	r1, r3
 80081dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80081e0:	d8d8      	bhi.n	8008194 <__gethex+0x3a8>
 80081e2:	68a3      	ldr	r3, [r4, #8]
 80081e4:	459b      	cmp	fp, r3
 80081e6:	db17      	blt.n	8008218 <__gethex+0x42c>
 80081e8:	6861      	ldr	r1, [r4, #4]
 80081ea:	9802      	ldr	r0, [sp, #8]
 80081ec:	3101      	adds	r1, #1
 80081ee:	f000 f935 	bl	800845c <_Balloc>
 80081f2:	4681      	mov	r9, r0
 80081f4:	b918      	cbnz	r0, 80081fe <__gethex+0x412>
 80081f6:	4602      	mov	r2, r0
 80081f8:	2184      	movs	r1, #132	; 0x84
 80081fa:	4b19      	ldr	r3, [pc, #100]	; (8008260 <__gethex+0x474>)
 80081fc:	e6ab      	b.n	8007f56 <__gethex+0x16a>
 80081fe:	6922      	ldr	r2, [r4, #16]
 8008200:	f104 010c 	add.w	r1, r4, #12
 8008204:	3202      	adds	r2, #2
 8008206:	0092      	lsls	r2, r2, #2
 8008208:	300c      	adds	r0, #12
 800820a:	f000 f919 	bl	8008440 <memcpy>
 800820e:	4621      	mov	r1, r4
 8008210:	9802      	ldr	r0, [sp, #8]
 8008212:	f000 f963 	bl	80084dc <_Bfree>
 8008216:	464c      	mov	r4, r9
 8008218:	6923      	ldr	r3, [r4, #16]
 800821a:	1c5a      	adds	r2, r3, #1
 800821c:	6122      	str	r2, [r4, #16]
 800821e:	2201      	movs	r2, #1
 8008220:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008224:	615a      	str	r2, [r3, #20]
 8008226:	e7bd      	b.n	80081a4 <__gethex+0x3b8>
 8008228:	6922      	ldr	r2, [r4, #16]
 800822a:	455a      	cmp	r2, fp
 800822c:	dd0b      	ble.n	8008246 <__gethex+0x45a>
 800822e:	2101      	movs	r1, #1
 8008230:	4620      	mov	r0, r4
 8008232:	f7ff fd73 	bl	8007d1c <rshift>
 8008236:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800823a:	3501      	adds	r5, #1
 800823c:	42ab      	cmp	r3, r5
 800823e:	f6ff aed4 	blt.w	8007fea <__gethex+0x1fe>
 8008242:	2701      	movs	r7, #1
 8008244:	e7c2      	b.n	80081cc <__gethex+0x3e0>
 8008246:	f016 061f 	ands.w	r6, r6, #31
 800824a:	d0fa      	beq.n	8008242 <__gethex+0x456>
 800824c:	4453      	add	r3, sl
 800824e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008252:	f000 f9f5 	bl	8008640 <__hi0bits>
 8008256:	f1c6 0620 	rsb	r6, r6, #32
 800825a:	42b0      	cmp	r0, r6
 800825c:	dbe7      	blt.n	800822e <__gethex+0x442>
 800825e:	e7f0      	b.n	8008242 <__gethex+0x456>
 8008260:	0801aed8 	.word	0x0801aed8

08008264 <L_shift>:
 8008264:	f1c2 0208 	rsb	r2, r2, #8
 8008268:	0092      	lsls	r2, r2, #2
 800826a:	b570      	push	{r4, r5, r6, lr}
 800826c:	f1c2 0620 	rsb	r6, r2, #32
 8008270:	6843      	ldr	r3, [r0, #4]
 8008272:	6804      	ldr	r4, [r0, #0]
 8008274:	fa03 f506 	lsl.w	r5, r3, r6
 8008278:	432c      	orrs	r4, r5
 800827a:	40d3      	lsrs	r3, r2
 800827c:	6004      	str	r4, [r0, #0]
 800827e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008282:	4288      	cmp	r0, r1
 8008284:	d3f4      	bcc.n	8008270 <L_shift+0xc>
 8008286:	bd70      	pop	{r4, r5, r6, pc}

08008288 <__match>:
 8008288:	b530      	push	{r4, r5, lr}
 800828a:	6803      	ldr	r3, [r0, #0]
 800828c:	3301      	adds	r3, #1
 800828e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008292:	b914      	cbnz	r4, 800829a <__match+0x12>
 8008294:	6003      	str	r3, [r0, #0]
 8008296:	2001      	movs	r0, #1
 8008298:	bd30      	pop	{r4, r5, pc}
 800829a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800829e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80082a2:	2d19      	cmp	r5, #25
 80082a4:	bf98      	it	ls
 80082a6:	3220      	addls	r2, #32
 80082a8:	42a2      	cmp	r2, r4
 80082aa:	d0f0      	beq.n	800828e <__match+0x6>
 80082ac:	2000      	movs	r0, #0
 80082ae:	e7f3      	b.n	8008298 <__match+0x10>

080082b0 <__hexnan>:
 80082b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b4:	2500      	movs	r5, #0
 80082b6:	680b      	ldr	r3, [r1, #0]
 80082b8:	4682      	mov	sl, r0
 80082ba:	115e      	asrs	r6, r3, #5
 80082bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80082c0:	f013 031f 	ands.w	r3, r3, #31
 80082c4:	bf18      	it	ne
 80082c6:	3604      	addne	r6, #4
 80082c8:	1f37      	subs	r7, r6, #4
 80082ca:	46b9      	mov	r9, r7
 80082cc:	463c      	mov	r4, r7
 80082ce:	46ab      	mov	fp, r5
 80082d0:	b087      	sub	sp, #28
 80082d2:	4690      	mov	r8, r2
 80082d4:	6802      	ldr	r2, [r0, #0]
 80082d6:	9301      	str	r3, [sp, #4]
 80082d8:	f846 5c04 	str.w	r5, [r6, #-4]
 80082dc:	9502      	str	r5, [sp, #8]
 80082de:	7851      	ldrb	r1, [r2, #1]
 80082e0:	1c53      	adds	r3, r2, #1
 80082e2:	9303      	str	r3, [sp, #12]
 80082e4:	b341      	cbz	r1, 8008338 <__hexnan+0x88>
 80082e6:	4608      	mov	r0, r1
 80082e8:	9205      	str	r2, [sp, #20]
 80082ea:	9104      	str	r1, [sp, #16]
 80082ec:	f7ff fd69 	bl	8007dc2 <__hexdig_fun>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	d14f      	bne.n	8008394 <__hexnan+0xe4>
 80082f4:	9904      	ldr	r1, [sp, #16]
 80082f6:	9a05      	ldr	r2, [sp, #20]
 80082f8:	2920      	cmp	r1, #32
 80082fa:	d818      	bhi.n	800832e <__hexnan+0x7e>
 80082fc:	9b02      	ldr	r3, [sp, #8]
 80082fe:	459b      	cmp	fp, r3
 8008300:	dd13      	ble.n	800832a <__hexnan+0x7a>
 8008302:	454c      	cmp	r4, r9
 8008304:	d206      	bcs.n	8008314 <__hexnan+0x64>
 8008306:	2d07      	cmp	r5, #7
 8008308:	dc04      	bgt.n	8008314 <__hexnan+0x64>
 800830a:	462a      	mov	r2, r5
 800830c:	4649      	mov	r1, r9
 800830e:	4620      	mov	r0, r4
 8008310:	f7ff ffa8 	bl	8008264 <L_shift>
 8008314:	4544      	cmp	r4, r8
 8008316:	d950      	bls.n	80083ba <__hexnan+0x10a>
 8008318:	2300      	movs	r3, #0
 800831a:	f1a4 0904 	sub.w	r9, r4, #4
 800831e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008322:	461d      	mov	r5, r3
 8008324:	464c      	mov	r4, r9
 8008326:	f8cd b008 	str.w	fp, [sp, #8]
 800832a:	9a03      	ldr	r2, [sp, #12]
 800832c:	e7d7      	b.n	80082de <__hexnan+0x2e>
 800832e:	2929      	cmp	r1, #41	; 0x29
 8008330:	d156      	bne.n	80083e0 <__hexnan+0x130>
 8008332:	3202      	adds	r2, #2
 8008334:	f8ca 2000 	str.w	r2, [sl]
 8008338:	f1bb 0f00 	cmp.w	fp, #0
 800833c:	d050      	beq.n	80083e0 <__hexnan+0x130>
 800833e:	454c      	cmp	r4, r9
 8008340:	d206      	bcs.n	8008350 <__hexnan+0xa0>
 8008342:	2d07      	cmp	r5, #7
 8008344:	dc04      	bgt.n	8008350 <__hexnan+0xa0>
 8008346:	462a      	mov	r2, r5
 8008348:	4649      	mov	r1, r9
 800834a:	4620      	mov	r0, r4
 800834c:	f7ff ff8a 	bl	8008264 <L_shift>
 8008350:	4544      	cmp	r4, r8
 8008352:	d934      	bls.n	80083be <__hexnan+0x10e>
 8008354:	4623      	mov	r3, r4
 8008356:	f1a8 0204 	sub.w	r2, r8, #4
 800835a:	f853 1b04 	ldr.w	r1, [r3], #4
 800835e:	429f      	cmp	r7, r3
 8008360:	f842 1f04 	str.w	r1, [r2, #4]!
 8008364:	d2f9      	bcs.n	800835a <__hexnan+0xaa>
 8008366:	1b3b      	subs	r3, r7, r4
 8008368:	f023 0303 	bic.w	r3, r3, #3
 800836c:	3304      	adds	r3, #4
 800836e:	3401      	adds	r4, #1
 8008370:	3e03      	subs	r6, #3
 8008372:	42b4      	cmp	r4, r6
 8008374:	bf88      	it	hi
 8008376:	2304      	movhi	r3, #4
 8008378:	2200      	movs	r2, #0
 800837a:	4443      	add	r3, r8
 800837c:	f843 2b04 	str.w	r2, [r3], #4
 8008380:	429f      	cmp	r7, r3
 8008382:	d2fb      	bcs.n	800837c <__hexnan+0xcc>
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	b91b      	cbnz	r3, 8008390 <__hexnan+0xe0>
 8008388:	4547      	cmp	r7, r8
 800838a:	d127      	bne.n	80083dc <__hexnan+0x12c>
 800838c:	2301      	movs	r3, #1
 800838e:	603b      	str	r3, [r7, #0]
 8008390:	2005      	movs	r0, #5
 8008392:	e026      	b.n	80083e2 <__hexnan+0x132>
 8008394:	3501      	adds	r5, #1
 8008396:	2d08      	cmp	r5, #8
 8008398:	f10b 0b01 	add.w	fp, fp, #1
 800839c:	dd06      	ble.n	80083ac <__hexnan+0xfc>
 800839e:	4544      	cmp	r4, r8
 80083a0:	d9c3      	bls.n	800832a <__hexnan+0x7a>
 80083a2:	2300      	movs	r3, #0
 80083a4:	2501      	movs	r5, #1
 80083a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80083aa:	3c04      	subs	r4, #4
 80083ac:	6822      	ldr	r2, [r4, #0]
 80083ae:	f000 000f 	and.w	r0, r0, #15
 80083b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80083b6:	6022      	str	r2, [r4, #0]
 80083b8:	e7b7      	b.n	800832a <__hexnan+0x7a>
 80083ba:	2508      	movs	r5, #8
 80083bc:	e7b5      	b.n	800832a <__hexnan+0x7a>
 80083be:	9b01      	ldr	r3, [sp, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0df      	beq.n	8008384 <__hexnan+0xd4>
 80083c4:	f04f 32ff 	mov.w	r2, #4294967295
 80083c8:	f1c3 0320 	rsb	r3, r3, #32
 80083cc:	fa22 f303 	lsr.w	r3, r2, r3
 80083d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80083d4:	401a      	ands	r2, r3
 80083d6:	f846 2c04 	str.w	r2, [r6, #-4]
 80083da:	e7d3      	b.n	8008384 <__hexnan+0xd4>
 80083dc:	3f04      	subs	r7, #4
 80083de:	e7d1      	b.n	8008384 <__hexnan+0xd4>
 80083e0:	2004      	movs	r0, #4
 80083e2:	b007      	add	sp, #28
 80083e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080083e8 <_localeconv_r>:
 80083e8:	4800      	ldr	r0, [pc, #0]	; (80083ec <_localeconv_r+0x4>)
 80083ea:	4770      	bx	lr
 80083ec:	200002a4 	.word	0x200002a4

080083f0 <malloc>:
 80083f0:	4b02      	ldr	r3, [pc, #8]	; (80083fc <malloc+0xc>)
 80083f2:	4601      	mov	r1, r0
 80083f4:	6818      	ldr	r0, [r3, #0]
 80083f6:	f000 bd65 	b.w	8008ec4 <_malloc_r>
 80083fa:	bf00      	nop
 80083fc:	2000014c 	.word	0x2000014c

08008400 <__ascii_mbtowc>:
 8008400:	b082      	sub	sp, #8
 8008402:	b901      	cbnz	r1, 8008406 <__ascii_mbtowc+0x6>
 8008404:	a901      	add	r1, sp, #4
 8008406:	b142      	cbz	r2, 800841a <__ascii_mbtowc+0x1a>
 8008408:	b14b      	cbz	r3, 800841e <__ascii_mbtowc+0x1e>
 800840a:	7813      	ldrb	r3, [r2, #0]
 800840c:	600b      	str	r3, [r1, #0]
 800840e:	7812      	ldrb	r2, [r2, #0]
 8008410:	1e10      	subs	r0, r2, #0
 8008412:	bf18      	it	ne
 8008414:	2001      	movne	r0, #1
 8008416:	b002      	add	sp, #8
 8008418:	4770      	bx	lr
 800841a:	4610      	mov	r0, r2
 800841c:	e7fb      	b.n	8008416 <__ascii_mbtowc+0x16>
 800841e:	f06f 0001 	mvn.w	r0, #1
 8008422:	e7f8      	b.n	8008416 <__ascii_mbtowc+0x16>

08008424 <memchr>:
 8008424:	4603      	mov	r3, r0
 8008426:	b510      	push	{r4, lr}
 8008428:	b2c9      	uxtb	r1, r1
 800842a:	4402      	add	r2, r0
 800842c:	4293      	cmp	r3, r2
 800842e:	4618      	mov	r0, r3
 8008430:	d101      	bne.n	8008436 <memchr+0x12>
 8008432:	2000      	movs	r0, #0
 8008434:	e003      	b.n	800843e <memchr+0x1a>
 8008436:	7804      	ldrb	r4, [r0, #0]
 8008438:	3301      	adds	r3, #1
 800843a:	428c      	cmp	r4, r1
 800843c:	d1f6      	bne.n	800842c <memchr+0x8>
 800843e:	bd10      	pop	{r4, pc}

08008440 <memcpy>:
 8008440:	440a      	add	r2, r1
 8008442:	4291      	cmp	r1, r2
 8008444:	f100 33ff 	add.w	r3, r0, #4294967295
 8008448:	d100      	bne.n	800844c <memcpy+0xc>
 800844a:	4770      	bx	lr
 800844c:	b510      	push	{r4, lr}
 800844e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008452:	4291      	cmp	r1, r2
 8008454:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008458:	d1f9      	bne.n	800844e <memcpy+0xe>
 800845a:	bd10      	pop	{r4, pc}

0800845c <_Balloc>:
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008460:	4604      	mov	r4, r0
 8008462:	460d      	mov	r5, r1
 8008464:	b976      	cbnz	r6, 8008484 <_Balloc+0x28>
 8008466:	2010      	movs	r0, #16
 8008468:	f7ff ffc2 	bl	80083f0 <malloc>
 800846c:	4602      	mov	r2, r0
 800846e:	6260      	str	r0, [r4, #36]	; 0x24
 8008470:	b920      	cbnz	r0, 800847c <_Balloc+0x20>
 8008472:	2166      	movs	r1, #102	; 0x66
 8008474:	4b17      	ldr	r3, [pc, #92]	; (80084d4 <_Balloc+0x78>)
 8008476:	4818      	ldr	r0, [pc, #96]	; (80084d8 <_Balloc+0x7c>)
 8008478:	f000 ff2c 	bl	80092d4 <__assert_func>
 800847c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008480:	6006      	str	r6, [r0, #0]
 8008482:	60c6      	str	r6, [r0, #12]
 8008484:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008486:	68f3      	ldr	r3, [r6, #12]
 8008488:	b183      	cbz	r3, 80084ac <_Balloc+0x50>
 800848a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008492:	b9b8      	cbnz	r0, 80084c4 <_Balloc+0x68>
 8008494:	2101      	movs	r1, #1
 8008496:	fa01 f605 	lsl.w	r6, r1, r5
 800849a:	1d72      	adds	r2, r6, #5
 800849c:	4620      	mov	r0, r4
 800849e:	0092      	lsls	r2, r2, #2
 80084a0:	f000 fc94 	bl	8008dcc <_calloc_r>
 80084a4:	b160      	cbz	r0, 80084c0 <_Balloc+0x64>
 80084a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084aa:	e00e      	b.n	80084ca <_Balloc+0x6e>
 80084ac:	2221      	movs	r2, #33	; 0x21
 80084ae:	2104      	movs	r1, #4
 80084b0:	4620      	mov	r0, r4
 80084b2:	f000 fc8b 	bl	8008dcc <_calloc_r>
 80084b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084b8:	60f0      	str	r0, [r6, #12]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1e4      	bne.n	800848a <_Balloc+0x2e>
 80084c0:	2000      	movs	r0, #0
 80084c2:	bd70      	pop	{r4, r5, r6, pc}
 80084c4:	6802      	ldr	r2, [r0, #0]
 80084c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084ca:	2300      	movs	r3, #0
 80084cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084d0:	e7f7      	b.n	80084c2 <_Balloc+0x66>
 80084d2:	bf00      	nop
 80084d4:	0801ae66 	.word	0x0801ae66
 80084d8:	0801af64 	.word	0x0801af64

080084dc <_Bfree>:
 80084dc:	b570      	push	{r4, r5, r6, lr}
 80084de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084e0:	4605      	mov	r5, r0
 80084e2:	460c      	mov	r4, r1
 80084e4:	b976      	cbnz	r6, 8008504 <_Bfree+0x28>
 80084e6:	2010      	movs	r0, #16
 80084e8:	f7ff ff82 	bl	80083f0 <malloc>
 80084ec:	4602      	mov	r2, r0
 80084ee:	6268      	str	r0, [r5, #36]	; 0x24
 80084f0:	b920      	cbnz	r0, 80084fc <_Bfree+0x20>
 80084f2:	218a      	movs	r1, #138	; 0x8a
 80084f4:	4b08      	ldr	r3, [pc, #32]	; (8008518 <_Bfree+0x3c>)
 80084f6:	4809      	ldr	r0, [pc, #36]	; (800851c <_Bfree+0x40>)
 80084f8:	f000 feec 	bl	80092d4 <__assert_func>
 80084fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008500:	6006      	str	r6, [r0, #0]
 8008502:	60c6      	str	r6, [r0, #12]
 8008504:	b13c      	cbz	r4, 8008516 <_Bfree+0x3a>
 8008506:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008508:	6862      	ldr	r2, [r4, #4]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008510:	6021      	str	r1, [r4, #0]
 8008512:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008516:	bd70      	pop	{r4, r5, r6, pc}
 8008518:	0801ae66 	.word	0x0801ae66
 800851c:	0801af64 	.word	0x0801af64

08008520 <__multadd>:
 8008520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008524:	4607      	mov	r7, r0
 8008526:	460c      	mov	r4, r1
 8008528:	461e      	mov	r6, r3
 800852a:	2000      	movs	r0, #0
 800852c:	690d      	ldr	r5, [r1, #16]
 800852e:	f101 0c14 	add.w	ip, r1, #20
 8008532:	f8dc 3000 	ldr.w	r3, [ip]
 8008536:	3001      	adds	r0, #1
 8008538:	b299      	uxth	r1, r3
 800853a:	fb02 6101 	mla	r1, r2, r1, r6
 800853e:	0c1e      	lsrs	r6, r3, #16
 8008540:	0c0b      	lsrs	r3, r1, #16
 8008542:	fb02 3306 	mla	r3, r2, r6, r3
 8008546:	b289      	uxth	r1, r1
 8008548:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800854c:	4285      	cmp	r5, r0
 800854e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008552:	f84c 1b04 	str.w	r1, [ip], #4
 8008556:	dcec      	bgt.n	8008532 <__multadd+0x12>
 8008558:	b30e      	cbz	r6, 800859e <__multadd+0x7e>
 800855a:	68a3      	ldr	r3, [r4, #8]
 800855c:	42ab      	cmp	r3, r5
 800855e:	dc19      	bgt.n	8008594 <__multadd+0x74>
 8008560:	6861      	ldr	r1, [r4, #4]
 8008562:	4638      	mov	r0, r7
 8008564:	3101      	adds	r1, #1
 8008566:	f7ff ff79 	bl	800845c <_Balloc>
 800856a:	4680      	mov	r8, r0
 800856c:	b928      	cbnz	r0, 800857a <__multadd+0x5a>
 800856e:	4602      	mov	r2, r0
 8008570:	21b5      	movs	r1, #181	; 0xb5
 8008572:	4b0c      	ldr	r3, [pc, #48]	; (80085a4 <__multadd+0x84>)
 8008574:	480c      	ldr	r0, [pc, #48]	; (80085a8 <__multadd+0x88>)
 8008576:	f000 fead 	bl	80092d4 <__assert_func>
 800857a:	6922      	ldr	r2, [r4, #16]
 800857c:	f104 010c 	add.w	r1, r4, #12
 8008580:	3202      	adds	r2, #2
 8008582:	0092      	lsls	r2, r2, #2
 8008584:	300c      	adds	r0, #12
 8008586:	f7ff ff5b 	bl	8008440 <memcpy>
 800858a:	4621      	mov	r1, r4
 800858c:	4638      	mov	r0, r7
 800858e:	f7ff ffa5 	bl	80084dc <_Bfree>
 8008592:	4644      	mov	r4, r8
 8008594:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008598:	3501      	adds	r5, #1
 800859a:	615e      	str	r6, [r3, #20]
 800859c:	6125      	str	r5, [r4, #16]
 800859e:	4620      	mov	r0, r4
 80085a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a4:	0801aed8 	.word	0x0801aed8
 80085a8:	0801af64 	.word	0x0801af64

080085ac <__s2b>:
 80085ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b0:	4615      	mov	r5, r2
 80085b2:	2209      	movs	r2, #9
 80085b4:	461f      	mov	r7, r3
 80085b6:	3308      	adds	r3, #8
 80085b8:	460c      	mov	r4, r1
 80085ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80085be:	4606      	mov	r6, r0
 80085c0:	2201      	movs	r2, #1
 80085c2:	2100      	movs	r1, #0
 80085c4:	429a      	cmp	r2, r3
 80085c6:	db09      	blt.n	80085dc <__s2b+0x30>
 80085c8:	4630      	mov	r0, r6
 80085ca:	f7ff ff47 	bl	800845c <_Balloc>
 80085ce:	b940      	cbnz	r0, 80085e2 <__s2b+0x36>
 80085d0:	4602      	mov	r2, r0
 80085d2:	21ce      	movs	r1, #206	; 0xce
 80085d4:	4b18      	ldr	r3, [pc, #96]	; (8008638 <__s2b+0x8c>)
 80085d6:	4819      	ldr	r0, [pc, #100]	; (800863c <__s2b+0x90>)
 80085d8:	f000 fe7c 	bl	80092d4 <__assert_func>
 80085dc:	0052      	lsls	r2, r2, #1
 80085de:	3101      	adds	r1, #1
 80085e0:	e7f0      	b.n	80085c4 <__s2b+0x18>
 80085e2:	9b08      	ldr	r3, [sp, #32]
 80085e4:	2d09      	cmp	r5, #9
 80085e6:	6143      	str	r3, [r0, #20]
 80085e8:	f04f 0301 	mov.w	r3, #1
 80085ec:	6103      	str	r3, [r0, #16]
 80085ee:	dd16      	ble.n	800861e <__s2b+0x72>
 80085f0:	f104 0909 	add.w	r9, r4, #9
 80085f4:	46c8      	mov	r8, r9
 80085f6:	442c      	add	r4, r5
 80085f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80085fc:	4601      	mov	r1, r0
 80085fe:	220a      	movs	r2, #10
 8008600:	4630      	mov	r0, r6
 8008602:	3b30      	subs	r3, #48	; 0x30
 8008604:	f7ff ff8c 	bl	8008520 <__multadd>
 8008608:	45a0      	cmp	r8, r4
 800860a:	d1f5      	bne.n	80085f8 <__s2b+0x4c>
 800860c:	f1a5 0408 	sub.w	r4, r5, #8
 8008610:	444c      	add	r4, r9
 8008612:	1b2d      	subs	r5, r5, r4
 8008614:	1963      	adds	r3, r4, r5
 8008616:	42bb      	cmp	r3, r7
 8008618:	db04      	blt.n	8008624 <__s2b+0x78>
 800861a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800861e:	2509      	movs	r5, #9
 8008620:	340a      	adds	r4, #10
 8008622:	e7f6      	b.n	8008612 <__s2b+0x66>
 8008624:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008628:	4601      	mov	r1, r0
 800862a:	220a      	movs	r2, #10
 800862c:	4630      	mov	r0, r6
 800862e:	3b30      	subs	r3, #48	; 0x30
 8008630:	f7ff ff76 	bl	8008520 <__multadd>
 8008634:	e7ee      	b.n	8008614 <__s2b+0x68>
 8008636:	bf00      	nop
 8008638:	0801aed8 	.word	0x0801aed8
 800863c:	0801af64 	.word	0x0801af64

08008640 <__hi0bits>:
 8008640:	0c02      	lsrs	r2, r0, #16
 8008642:	0412      	lsls	r2, r2, #16
 8008644:	4603      	mov	r3, r0
 8008646:	b9ca      	cbnz	r2, 800867c <__hi0bits+0x3c>
 8008648:	0403      	lsls	r3, r0, #16
 800864a:	2010      	movs	r0, #16
 800864c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008650:	bf04      	itt	eq
 8008652:	021b      	lsleq	r3, r3, #8
 8008654:	3008      	addeq	r0, #8
 8008656:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800865a:	bf04      	itt	eq
 800865c:	011b      	lsleq	r3, r3, #4
 800865e:	3004      	addeq	r0, #4
 8008660:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008664:	bf04      	itt	eq
 8008666:	009b      	lsleq	r3, r3, #2
 8008668:	3002      	addeq	r0, #2
 800866a:	2b00      	cmp	r3, #0
 800866c:	db05      	blt.n	800867a <__hi0bits+0x3a>
 800866e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008672:	f100 0001 	add.w	r0, r0, #1
 8008676:	bf08      	it	eq
 8008678:	2020      	moveq	r0, #32
 800867a:	4770      	bx	lr
 800867c:	2000      	movs	r0, #0
 800867e:	e7e5      	b.n	800864c <__hi0bits+0xc>

08008680 <__lo0bits>:
 8008680:	6803      	ldr	r3, [r0, #0]
 8008682:	4602      	mov	r2, r0
 8008684:	f013 0007 	ands.w	r0, r3, #7
 8008688:	d00b      	beq.n	80086a2 <__lo0bits+0x22>
 800868a:	07d9      	lsls	r1, r3, #31
 800868c:	d421      	bmi.n	80086d2 <__lo0bits+0x52>
 800868e:	0798      	lsls	r0, r3, #30
 8008690:	bf49      	itett	mi
 8008692:	085b      	lsrmi	r3, r3, #1
 8008694:	089b      	lsrpl	r3, r3, #2
 8008696:	2001      	movmi	r0, #1
 8008698:	6013      	strmi	r3, [r2, #0]
 800869a:	bf5c      	itt	pl
 800869c:	2002      	movpl	r0, #2
 800869e:	6013      	strpl	r3, [r2, #0]
 80086a0:	4770      	bx	lr
 80086a2:	b299      	uxth	r1, r3
 80086a4:	b909      	cbnz	r1, 80086aa <__lo0bits+0x2a>
 80086a6:	2010      	movs	r0, #16
 80086a8:	0c1b      	lsrs	r3, r3, #16
 80086aa:	b2d9      	uxtb	r1, r3
 80086ac:	b909      	cbnz	r1, 80086b2 <__lo0bits+0x32>
 80086ae:	3008      	adds	r0, #8
 80086b0:	0a1b      	lsrs	r3, r3, #8
 80086b2:	0719      	lsls	r1, r3, #28
 80086b4:	bf04      	itt	eq
 80086b6:	091b      	lsreq	r3, r3, #4
 80086b8:	3004      	addeq	r0, #4
 80086ba:	0799      	lsls	r1, r3, #30
 80086bc:	bf04      	itt	eq
 80086be:	089b      	lsreq	r3, r3, #2
 80086c0:	3002      	addeq	r0, #2
 80086c2:	07d9      	lsls	r1, r3, #31
 80086c4:	d403      	bmi.n	80086ce <__lo0bits+0x4e>
 80086c6:	085b      	lsrs	r3, r3, #1
 80086c8:	f100 0001 	add.w	r0, r0, #1
 80086cc:	d003      	beq.n	80086d6 <__lo0bits+0x56>
 80086ce:	6013      	str	r3, [r2, #0]
 80086d0:	4770      	bx	lr
 80086d2:	2000      	movs	r0, #0
 80086d4:	4770      	bx	lr
 80086d6:	2020      	movs	r0, #32
 80086d8:	4770      	bx	lr
	...

080086dc <__i2b>:
 80086dc:	b510      	push	{r4, lr}
 80086de:	460c      	mov	r4, r1
 80086e0:	2101      	movs	r1, #1
 80086e2:	f7ff febb 	bl	800845c <_Balloc>
 80086e6:	4602      	mov	r2, r0
 80086e8:	b928      	cbnz	r0, 80086f6 <__i2b+0x1a>
 80086ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80086ee:	4b04      	ldr	r3, [pc, #16]	; (8008700 <__i2b+0x24>)
 80086f0:	4804      	ldr	r0, [pc, #16]	; (8008704 <__i2b+0x28>)
 80086f2:	f000 fdef 	bl	80092d4 <__assert_func>
 80086f6:	2301      	movs	r3, #1
 80086f8:	6144      	str	r4, [r0, #20]
 80086fa:	6103      	str	r3, [r0, #16]
 80086fc:	bd10      	pop	{r4, pc}
 80086fe:	bf00      	nop
 8008700:	0801aed8 	.word	0x0801aed8
 8008704:	0801af64 	.word	0x0801af64

08008708 <__multiply>:
 8008708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800870c:	4691      	mov	r9, r2
 800870e:	690a      	ldr	r2, [r1, #16]
 8008710:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008714:	460c      	mov	r4, r1
 8008716:	429a      	cmp	r2, r3
 8008718:	bfbe      	ittt	lt
 800871a:	460b      	movlt	r3, r1
 800871c:	464c      	movlt	r4, r9
 800871e:	4699      	movlt	r9, r3
 8008720:	6927      	ldr	r7, [r4, #16]
 8008722:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008726:	68a3      	ldr	r3, [r4, #8]
 8008728:	6861      	ldr	r1, [r4, #4]
 800872a:	eb07 060a 	add.w	r6, r7, sl
 800872e:	42b3      	cmp	r3, r6
 8008730:	b085      	sub	sp, #20
 8008732:	bfb8      	it	lt
 8008734:	3101      	addlt	r1, #1
 8008736:	f7ff fe91 	bl	800845c <_Balloc>
 800873a:	b930      	cbnz	r0, 800874a <__multiply+0x42>
 800873c:	4602      	mov	r2, r0
 800873e:	f240 115d 	movw	r1, #349	; 0x15d
 8008742:	4b43      	ldr	r3, [pc, #268]	; (8008850 <__multiply+0x148>)
 8008744:	4843      	ldr	r0, [pc, #268]	; (8008854 <__multiply+0x14c>)
 8008746:	f000 fdc5 	bl	80092d4 <__assert_func>
 800874a:	f100 0514 	add.w	r5, r0, #20
 800874e:	462b      	mov	r3, r5
 8008750:	2200      	movs	r2, #0
 8008752:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008756:	4543      	cmp	r3, r8
 8008758:	d321      	bcc.n	800879e <__multiply+0x96>
 800875a:	f104 0314 	add.w	r3, r4, #20
 800875e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008762:	f109 0314 	add.w	r3, r9, #20
 8008766:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800876a:	9202      	str	r2, [sp, #8]
 800876c:	1b3a      	subs	r2, r7, r4
 800876e:	3a15      	subs	r2, #21
 8008770:	f022 0203 	bic.w	r2, r2, #3
 8008774:	3204      	adds	r2, #4
 8008776:	f104 0115 	add.w	r1, r4, #21
 800877a:	428f      	cmp	r7, r1
 800877c:	bf38      	it	cc
 800877e:	2204      	movcc	r2, #4
 8008780:	9201      	str	r2, [sp, #4]
 8008782:	9a02      	ldr	r2, [sp, #8]
 8008784:	9303      	str	r3, [sp, #12]
 8008786:	429a      	cmp	r2, r3
 8008788:	d80c      	bhi.n	80087a4 <__multiply+0x9c>
 800878a:	2e00      	cmp	r6, #0
 800878c:	dd03      	ble.n	8008796 <__multiply+0x8e>
 800878e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008792:	2b00      	cmp	r3, #0
 8008794:	d059      	beq.n	800884a <__multiply+0x142>
 8008796:	6106      	str	r6, [r0, #16]
 8008798:	b005      	add	sp, #20
 800879a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800879e:	f843 2b04 	str.w	r2, [r3], #4
 80087a2:	e7d8      	b.n	8008756 <__multiply+0x4e>
 80087a4:	f8b3 a000 	ldrh.w	sl, [r3]
 80087a8:	f1ba 0f00 	cmp.w	sl, #0
 80087ac:	d023      	beq.n	80087f6 <__multiply+0xee>
 80087ae:	46a9      	mov	r9, r5
 80087b0:	f04f 0c00 	mov.w	ip, #0
 80087b4:	f104 0e14 	add.w	lr, r4, #20
 80087b8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80087bc:	f8d9 1000 	ldr.w	r1, [r9]
 80087c0:	fa1f fb82 	uxth.w	fp, r2
 80087c4:	b289      	uxth	r1, r1
 80087c6:	fb0a 110b 	mla	r1, sl, fp, r1
 80087ca:	4461      	add	r1, ip
 80087cc:	f8d9 c000 	ldr.w	ip, [r9]
 80087d0:	0c12      	lsrs	r2, r2, #16
 80087d2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80087d6:	fb0a c202 	mla	r2, sl, r2, ip
 80087da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087de:	b289      	uxth	r1, r1
 80087e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087e4:	4577      	cmp	r7, lr
 80087e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087ea:	f849 1b04 	str.w	r1, [r9], #4
 80087ee:	d8e3      	bhi.n	80087b8 <__multiply+0xb0>
 80087f0:	9a01      	ldr	r2, [sp, #4]
 80087f2:	f845 c002 	str.w	ip, [r5, r2]
 80087f6:	9a03      	ldr	r2, [sp, #12]
 80087f8:	3304      	adds	r3, #4
 80087fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087fe:	f1b9 0f00 	cmp.w	r9, #0
 8008802:	d020      	beq.n	8008846 <__multiply+0x13e>
 8008804:	46ae      	mov	lr, r5
 8008806:	f04f 0a00 	mov.w	sl, #0
 800880a:	6829      	ldr	r1, [r5, #0]
 800880c:	f104 0c14 	add.w	ip, r4, #20
 8008810:	f8bc b000 	ldrh.w	fp, [ip]
 8008814:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008818:	b289      	uxth	r1, r1
 800881a:	fb09 220b 	mla	r2, r9, fp, r2
 800881e:	4492      	add	sl, r2
 8008820:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008824:	f84e 1b04 	str.w	r1, [lr], #4
 8008828:	f85c 2b04 	ldr.w	r2, [ip], #4
 800882c:	f8be 1000 	ldrh.w	r1, [lr]
 8008830:	0c12      	lsrs	r2, r2, #16
 8008832:	fb09 1102 	mla	r1, r9, r2, r1
 8008836:	4567      	cmp	r7, ip
 8008838:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800883c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008840:	d8e6      	bhi.n	8008810 <__multiply+0x108>
 8008842:	9a01      	ldr	r2, [sp, #4]
 8008844:	50a9      	str	r1, [r5, r2]
 8008846:	3504      	adds	r5, #4
 8008848:	e79b      	b.n	8008782 <__multiply+0x7a>
 800884a:	3e01      	subs	r6, #1
 800884c:	e79d      	b.n	800878a <__multiply+0x82>
 800884e:	bf00      	nop
 8008850:	0801aed8 	.word	0x0801aed8
 8008854:	0801af64 	.word	0x0801af64

08008858 <__pow5mult>:
 8008858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800885c:	4615      	mov	r5, r2
 800885e:	f012 0203 	ands.w	r2, r2, #3
 8008862:	4606      	mov	r6, r0
 8008864:	460f      	mov	r7, r1
 8008866:	d007      	beq.n	8008878 <__pow5mult+0x20>
 8008868:	4c25      	ldr	r4, [pc, #148]	; (8008900 <__pow5mult+0xa8>)
 800886a:	3a01      	subs	r2, #1
 800886c:	2300      	movs	r3, #0
 800886e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008872:	f7ff fe55 	bl	8008520 <__multadd>
 8008876:	4607      	mov	r7, r0
 8008878:	10ad      	asrs	r5, r5, #2
 800887a:	d03d      	beq.n	80088f8 <__pow5mult+0xa0>
 800887c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800887e:	b97c      	cbnz	r4, 80088a0 <__pow5mult+0x48>
 8008880:	2010      	movs	r0, #16
 8008882:	f7ff fdb5 	bl	80083f0 <malloc>
 8008886:	4602      	mov	r2, r0
 8008888:	6270      	str	r0, [r6, #36]	; 0x24
 800888a:	b928      	cbnz	r0, 8008898 <__pow5mult+0x40>
 800888c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008890:	4b1c      	ldr	r3, [pc, #112]	; (8008904 <__pow5mult+0xac>)
 8008892:	481d      	ldr	r0, [pc, #116]	; (8008908 <__pow5mult+0xb0>)
 8008894:	f000 fd1e 	bl	80092d4 <__assert_func>
 8008898:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800889c:	6004      	str	r4, [r0, #0]
 800889e:	60c4      	str	r4, [r0, #12]
 80088a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80088a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088a8:	b94c      	cbnz	r4, 80088be <__pow5mult+0x66>
 80088aa:	f240 2171 	movw	r1, #625	; 0x271
 80088ae:	4630      	mov	r0, r6
 80088b0:	f7ff ff14 	bl	80086dc <__i2b>
 80088b4:	2300      	movs	r3, #0
 80088b6:	4604      	mov	r4, r0
 80088b8:	f8c8 0008 	str.w	r0, [r8, #8]
 80088bc:	6003      	str	r3, [r0, #0]
 80088be:	f04f 0900 	mov.w	r9, #0
 80088c2:	07eb      	lsls	r3, r5, #31
 80088c4:	d50a      	bpl.n	80088dc <__pow5mult+0x84>
 80088c6:	4639      	mov	r1, r7
 80088c8:	4622      	mov	r2, r4
 80088ca:	4630      	mov	r0, r6
 80088cc:	f7ff ff1c 	bl	8008708 <__multiply>
 80088d0:	4680      	mov	r8, r0
 80088d2:	4639      	mov	r1, r7
 80088d4:	4630      	mov	r0, r6
 80088d6:	f7ff fe01 	bl	80084dc <_Bfree>
 80088da:	4647      	mov	r7, r8
 80088dc:	106d      	asrs	r5, r5, #1
 80088de:	d00b      	beq.n	80088f8 <__pow5mult+0xa0>
 80088e0:	6820      	ldr	r0, [r4, #0]
 80088e2:	b938      	cbnz	r0, 80088f4 <__pow5mult+0x9c>
 80088e4:	4622      	mov	r2, r4
 80088e6:	4621      	mov	r1, r4
 80088e8:	4630      	mov	r0, r6
 80088ea:	f7ff ff0d 	bl	8008708 <__multiply>
 80088ee:	6020      	str	r0, [r4, #0]
 80088f0:	f8c0 9000 	str.w	r9, [r0]
 80088f4:	4604      	mov	r4, r0
 80088f6:	e7e4      	b.n	80088c2 <__pow5mult+0x6a>
 80088f8:	4638      	mov	r0, r7
 80088fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088fe:	bf00      	nop
 8008900:	0801b0b0 	.word	0x0801b0b0
 8008904:	0801ae66 	.word	0x0801ae66
 8008908:	0801af64 	.word	0x0801af64

0800890c <__lshift>:
 800890c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008910:	460c      	mov	r4, r1
 8008912:	4607      	mov	r7, r0
 8008914:	4691      	mov	r9, r2
 8008916:	6923      	ldr	r3, [r4, #16]
 8008918:	6849      	ldr	r1, [r1, #4]
 800891a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800891e:	68a3      	ldr	r3, [r4, #8]
 8008920:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008924:	f108 0601 	add.w	r6, r8, #1
 8008928:	42b3      	cmp	r3, r6
 800892a:	db0b      	blt.n	8008944 <__lshift+0x38>
 800892c:	4638      	mov	r0, r7
 800892e:	f7ff fd95 	bl	800845c <_Balloc>
 8008932:	4605      	mov	r5, r0
 8008934:	b948      	cbnz	r0, 800894a <__lshift+0x3e>
 8008936:	4602      	mov	r2, r0
 8008938:	f240 11d9 	movw	r1, #473	; 0x1d9
 800893c:	4b29      	ldr	r3, [pc, #164]	; (80089e4 <__lshift+0xd8>)
 800893e:	482a      	ldr	r0, [pc, #168]	; (80089e8 <__lshift+0xdc>)
 8008940:	f000 fcc8 	bl	80092d4 <__assert_func>
 8008944:	3101      	adds	r1, #1
 8008946:	005b      	lsls	r3, r3, #1
 8008948:	e7ee      	b.n	8008928 <__lshift+0x1c>
 800894a:	2300      	movs	r3, #0
 800894c:	f100 0114 	add.w	r1, r0, #20
 8008950:	f100 0210 	add.w	r2, r0, #16
 8008954:	4618      	mov	r0, r3
 8008956:	4553      	cmp	r3, sl
 8008958:	db37      	blt.n	80089ca <__lshift+0xbe>
 800895a:	6920      	ldr	r0, [r4, #16]
 800895c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008960:	f104 0314 	add.w	r3, r4, #20
 8008964:	f019 091f 	ands.w	r9, r9, #31
 8008968:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800896c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008970:	d02f      	beq.n	80089d2 <__lshift+0xc6>
 8008972:	468a      	mov	sl, r1
 8008974:	f04f 0c00 	mov.w	ip, #0
 8008978:	f1c9 0e20 	rsb	lr, r9, #32
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	fa02 f209 	lsl.w	r2, r2, r9
 8008982:	ea42 020c 	orr.w	r2, r2, ip
 8008986:	f84a 2b04 	str.w	r2, [sl], #4
 800898a:	f853 2b04 	ldr.w	r2, [r3], #4
 800898e:	4298      	cmp	r0, r3
 8008990:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008994:	d8f2      	bhi.n	800897c <__lshift+0x70>
 8008996:	1b03      	subs	r3, r0, r4
 8008998:	3b15      	subs	r3, #21
 800899a:	f023 0303 	bic.w	r3, r3, #3
 800899e:	3304      	adds	r3, #4
 80089a0:	f104 0215 	add.w	r2, r4, #21
 80089a4:	4290      	cmp	r0, r2
 80089a6:	bf38      	it	cc
 80089a8:	2304      	movcc	r3, #4
 80089aa:	f841 c003 	str.w	ip, [r1, r3]
 80089ae:	f1bc 0f00 	cmp.w	ip, #0
 80089b2:	d001      	beq.n	80089b8 <__lshift+0xac>
 80089b4:	f108 0602 	add.w	r6, r8, #2
 80089b8:	3e01      	subs	r6, #1
 80089ba:	4638      	mov	r0, r7
 80089bc:	4621      	mov	r1, r4
 80089be:	612e      	str	r6, [r5, #16]
 80089c0:	f7ff fd8c 	bl	80084dc <_Bfree>
 80089c4:	4628      	mov	r0, r5
 80089c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80089ce:	3301      	adds	r3, #1
 80089d0:	e7c1      	b.n	8008956 <__lshift+0x4a>
 80089d2:	3904      	subs	r1, #4
 80089d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80089d8:	4298      	cmp	r0, r3
 80089da:	f841 2f04 	str.w	r2, [r1, #4]!
 80089de:	d8f9      	bhi.n	80089d4 <__lshift+0xc8>
 80089e0:	e7ea      	b.n	80089b8 <__lshift+0xac>
 80089e2:	bf00      	nop
 80089e4:	0801aed8 	.word	0x0801aed8
 80089e8:	0801af64 	.word	0x0801af64

080089ec <__mcmp>:
 80089ec:	4603      	mov	r3, r0
 80089ee:	690a      	ldr	r2, [r1, #16]
 80089f0:	6900      	ldr	r0, [r0, #16]
 80089f2:	b530      	push	{r4, r5, lr}
 80089f4:	1a80      	subs	r0, r0, r2
 80089f6:	d10d      	bne.n	8008a14 <__mcmp+0x28>
 80089f8:	3314      	adds	r3, #20
 80089fa:	3114      	adds	r1, #20
 80089fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a0c:	4295      	cmp	r5, r2
 8008a0e:	d002      	beq.n	8008a16 <__mcmp+0x2a>
 8008a10:	d304      	bcc.n	8008a1c <__mcmp+0x30>
 8008a12:	2001      	movs	r0, #1
 8008a14:	bd30      	pop	{r4, r5, pc}
 8008a16:	42a3      	cmp	r3, r4
 8008a18:	d3f4      	bcc.n	8008a04 <__mcmp+0x18>
 8008a1a:	e7fb      	b.n	8008a14 <__mcmp+0x28>
 8008a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a20:	e7f8      	b.n	8008a14 <__mcmp+0x28>
	...

08008a24 <__mdiff>:
 8008a24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a28:	460d      	mov	r5, r1
 8008a2a:	4607      	mov	r7, r0
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	4628      	mov	r0, r5
 8008a30:	4614      	mov	r4, r2
 8008a32:	f7ff ffdb 	bl	80089ec <__mcmp>
 8008a36:	1e06      	subs	r6, r0, #0
 8008a38:	d111      	bne.n	8008a5e <__mdiff+0x3a>
 8008a3a:	4631      	mov	r1, r6
 8008a3c:	4638      	mov	r0, r7
 8008a3e:	f7ff fd0d 	bl	800845c <_Balloc>
 8008a42:	4602      	mov	r2, r0
 8008a44:	b928      	cbnz	r0, 8008a52 <__mdiff+0x2e>
 8008a46:	f240 2132 	movw	r1, #562	; 0x232
 8008a4a:	4b3a      	ldr	r3, [pc, #232]	; (8008b34 <__mdiff+0x110>)
 8008a4c:	483a      	ldr	r0, [pc, #232]	; (8008b38 <__mdiff+0x114>)
 8008a4e:	f000 fc41 	bl	80092d4 <__assert_func>
 8008a52:	2301      	movs	r3, #1
 8008a54:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008a58:	4610      	mov	r0, r2
 8008a5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a5e:	bfa4      	itt	ge
 8008a60:	4623      	movge	r3, r4
 8008a62:	462c      	movge	r4, r5
 8008a64:	4638      	mov	r0, r7
 8008a66:	6861      	ldr	r1, [r4, #4]
 8008a68:	bfa6      	itte	ge
 8008a6a:	461d      	movge	r5, r3
 8008a6c:	2600      	movge	r6, #0
 8008a6e:	2601      	movlt	r6, #1
 8008a70:	f7ff fcf4 	bl	800845c <_Balloc>
 8008a74:	4602      	mov	r2, r0
 8008a76:	b918      	cbnz	r0, 8008a80 <__mdiff+0x5c>
 8008a78:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008a7c:	4b2d      	ldr	r3, [pc, #180]	; (8008b34 <__mdiff+0x110>)
 8008a7e:	e7e5      	b.n	8008a4c <__mdiff+0x28>
 8008a80:	f102 0814 	add.w	r8, r2, #20
 8008a84:	46c2      	mov	sl, r8
 8008a86:	f04f 0c00 	mov.w	ip, #0
 8008a8a:	6927      	ldr	r7, [r4, #16]
 8008a8c:	60c6      	str	r6, [r0, #12]
 8008a8e:	692e      	ldr	r6, [r5, #16]
 8008a90:	f104 0014 	add.w	r0, r4, #20
 8008a94:	f105 0914 	add.w	r9, r5, #20
 8008a98:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008a9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008aa0:	3410      	adds	r4, #16
 8008aa2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008aa6:	f859 3b04 	ldr.w	r3, [r9], #4
 8008aaa:	fa1f f18b 	uxth.w	r1, fp
 8008aae:	448c      	add	ip, r1
 8008ab0:	b299      	uxth	r1, r3
 8008ab2:	0c1b      	lsrs	r3, r3, #16
 8008ab4:	ebac 0101 	sub.w	r1, ip, r1
 8008ab8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008abc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008ac0:	b289      	uxth	r1, r1
 8008ac2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008ac6:	454e      	cmp	r6, r9
 8008ac8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008acc:	f84a 3b04 	str.w	r3, [sl], #4
 8008ad0:	d8e7      	bhi.n	8008aa2 <__mdiff+0x7e>
 8008ad2:	1b73      	subs	r3, r6, r5
 8008ad4:	3b15      	subs	r3, #21
 8008ad6:	f023 0303 	bic.w	r3, r3, #3
 8008ada:	3515      	adds	r5, #21
 8008adc:	3304      	adds	r3, #4
 8008ade:	42ae      	cmp	r6, r5
 8008ae0:	bf38      	it	cc
 8008ae2:	2304      	movcc	r3, #4
 8008ae4:	4418      	add	r0, r3
 8008ae6:	4443      	add	r3, r8
 8008ae8:	461e      	mov	r6, r3
 8008aea:	4605      	mov	r5, r0
 8008aec:	4575      	cmp	r5, lr
 8008aee:	d30e      	bcc.n	8008b0e <__mdiff+0xea>
 8008af0:	f10e 0103 	add.w	r1, lr, #3
 8008af4:	1a09      	subs	r1, r1, r0
 8008af6:	f021 0103 	bic.w	r1, r1, #3
 8008afa:	3803      	subs	r0, #3
 8008afc:	4586      	cmp	lr, r0
 8008afe:	bf38      	it	cc
 8008b00:	2100      	movcc	r1, #0
 8008b02:	4419      	add	r1, r3
 8008b04:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008b08:	b18b      	cbz	r3, 8008b2e <__mdiff+0x10a>
 8008b0a:	6117      	str	r7, [r2, #16]
 8008b0c:	e7a4      	b.n	8008a58 <__mdiff+0x34>
 8008b0e:	f855 8b04 	ldr.w	r8, [r5], #4
 8008b12:	fa1f f188 	uxth.w	r1, r8
 8008b16:	4461      	add	r1, ip
 8008b18:	140c      	asrs	r4, r1, #16
 8008b1a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b1e:	b289      	uxth	r1, r1
 8008b20:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008b24:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008b28:	f846 1b04 	str.w	r1, [r6], #4
 8008b2c:	e7de      	b.n	8008aec <__mdiff+0xc8>
 8008b2e:	3f01      	subs	r7, #1
 8008b30:	e7e8      	b.n	8008b04 <__mdiff+0xe0>
 8008b32:	bf00      	nop
 8008b34:	0801aed8 	.word	0x0801aed8
 8008b38:	0801af64 	.word	0x0801af64

08008b3c <__ulp>:
 8008b3c:	4b11      	ldr	r3, [pc, #68]	; (8008b84 <__ulp+0x48>)
 8008b3e:	400b      	ands	r3, r1
 8008b40:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	dd02      	ble.n	8008b4e <__ulp+0x12>
 8008b48:	2000      	movs	r0, #0
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	4770      	bx	lr
 8008b4e:	425b      	negs	r3, r3
 8008b50:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008b54:	f04f 0000 	mov.w	r0, #0
 8008b58:	f04f 0100 	mov.w	r1, #0
 8008b5c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008b60:	da04      	bge.n	8008b6c <__ulp+0x30>
 8008b62:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b66:	fa43 f102 	asr.w	r1, r3, r2
 8008b6a:	4770      	bx	lr
 8008b6c:	f1a2 0314 	sub.w	r3, r2, #20
 8008b70:	2b1e      	cmp	r3, #30
 8008b72:	bfd6      	itet	le
 8008b74:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008b78:	2301      	movgt	r3, #1
 8008b7a:	fa22 f303 	lsrle.w	r3, r2, r3
 8008b7e:	4618      	mov	r0, r3
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	7ff00000 	.word	0x7ff00000

08008b88 <__b2d>:
 8008b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b8c:	6907      	ldr	r7, [r0, #16]
 8008b8e:	f100 0914 	add.w	r9, r0, #20
 8008b92:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008b96:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008b9a:	f1a7 0804 	sub.w	r8, r7, #4
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	f7ff fd4e 	bl	8008640 <__hi0bits>
 8008ba4:	f1c0 0320 	rsb	r3, r0, #32
 8008ba8:	280a      	cmp	r0, #10
 8008baa:	600b      	str	r3, [r1, #0]
 8008bac:	491f      	ldr	r1, [pc, #124]	; (8008c2c <__b2d+0xa4>)
 8008bae:	dc17      	bgt.n	8008be0 <__b2d+0x58>
 8008bb0:	45c1      	cmp	r9, r8
 8008bb2:	bf28      	it	cs
 8008bb4:	2200      	movcs	r2, #0
 8008bb6:	f1c0 0c0b 	rsb	ip, r0, #11
 8008bba:	fa26 f30c 	lsr.w	r3, r6, ip
 8008bbe:	bf38      	it	cc
 8008bc0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008bc4:	ea43 0501 	orr.w	r5, r3, r1
 8008bc8:	f100 0315 	add.w	r3, r0, #21
 8008bcc:	fa06 f303 	lsl.w	r3, r6, r3
 8008bd0:	fa22 f20c 	lsr.w	r2, r2, ip
 8008bd4:	ea43 0402 	orr.w	r4, r3, r2
 8008bd8:	4620      	mov	r0, r4
 8008bda:	4629      	mov	r1, r5
 8008bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008be0:	45c1      	cmp	r9, r8
 8008be2:	bf2e      	itee	cs
 8008be4:	2200      	movcs	r2, #0
 8008be6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008bea:	f1a7 0808 	subcc.w	r8, r7, #8
 8008bee:	f1b0 030b 	subs.w	r3, r0, #11
 8008bf2:	d016      	beq.n	8008c22 <__b2d+0x9a>
 8008bf4:	f1c3 0720 	rsb	r7, r3, #32
 8008bf8:	fa22 f107 	lsr.w	r1, r2, r7
 8008bfc:	45c8      	cmp	r8, r9
 8008bfe:	fa06 f603 	lsl.w	r6, r6, r3
 8008c02:	ea46 0601 	orr.w	r6, r6, r1
 8008c06:	bf94      	ite	ls
 8008c08:	2100      	movls	r1, #0
 8008c0a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008c0e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008c12:	fa02 f003 	lsl.w	r0, r2, r3
 8008c16:	40f9      	lsrs	r1, r7
 8008c18:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008c1c:	ea40 0401 	orr.w	r4, r0, r1
 8008c20:	e7da      	b.n	8008bd8 <__b2d+0x50>
 8008c22:	4614      	mov	r4, r2
 8008c24:	ea46 0501 	orr.w	r5, r6, r1
 8008c28:	e7d6      	b.n	8008bd8 <__b2d+0x50>
 8008c2a:	bf00      	nop
 8008c2c:	3ff00000 	.word	0x3ff00000

08008c30 <__d2b>:
 8008c30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008c34:	2101      	movs	r1, #1
 8008c36:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008c3a:	4690      	mov	r8, r2
 8008c3c:	461d      	mov	r5, r3
 8008c3e:	f7ff fc0d 	bl	800845c <_Balloc>
 8008c42:	4604      	mov	r4, r0
 8008c44:	b930      	cbnz	r0, 8008c54 <__d2b+0x24>
 8008c46:	4602      	mov	r2, r0
 8008c48:	f240 310a 	movw	r1, #778	; 0x30a
 8008c4c:	4b24      	ldr	r3, [pc, #144]	; (8008ce0 <__d2b+0xb0>)
 8008c4e:	4825      	ldr	r0, [pc, #148]	; (8008ce4 <__d2b+0xb4>)
 8008c50:	f000 fb40 	bl	80092d4 <__assert_func>
 8008c54:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008c58:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008c5c:	bb2d      	cbnz	r5, 8008caa <__d2b+0x7a>
 8008c5e:	9301      	str	r3, [sp, #4]
 8008c60:	f1b8 0300 	subs.w	r3, r8, #0
 8008c64:	d026      	beq.n	8008cb4 <__d2b+0x84>
 8008c66:	4668      	mov	r0, sp
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	f7ff fd09 	bl	8008680 <__lo0bits>
 8008c6e:	9900      	ldr	r1, [sp, #0]
 8008c70:	b1f0      	cbz	r0, 8008cb0 <__d2b+0x80>
 8008c72:	9a01      	ldr	r2, [sp, #4]
 8008c74:	f1c0 0320 	rsb	r3, r0, #32
 8008c78:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7c:	430b      	orrs	r3, r1
 8008c7e:	40c2      	lsrs	r2, r0
 8008c80:	6163      	str	r3, [r4, #20]
 8008c82:	9201      	str	r2, [sp, #4]
 8008c84:	9b01      	ldr	r3, [sp, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	bf14      	ite	ne
 8008c8a:	2102      	movne	r1, #2
 8008c8c:	2101      	moveq	r1, #1
 8008c8e:	61a3      	str	r3, [r4, #24]
 8008c90:	6121      	str	r1, [r4, #16]
 8008c92:	b1c5      	cbz	r5, 8008cc6 <__d2b+0x96>
 8008c94:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c98:	4405      	add	r5, r0
 8008c9a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c9e:	603d      	str	r5, [r7, #0]
 8008ca0:	6030      	str	r0, [r6, #0]
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	b002      	add	sp, #8
 8008ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cae:	e7d6      	b.n	8008c5e <__d2b+0x2e>
 8008cb0:	6161      	str	r1, [r4, #20]
 8008cb2:	e7e7      	b.n	8008c84 <__d2b+0x54>
 8008cb4:	a801      	add	r0, sp, #4
 8008cb6:	f7ff fce3 	bl	8008680 <__lo0bits>
 8008cba:	2101      	movs	r1, #1
 8008cbc:	9b01      	ldr	r3, [sp, #4]
 8008cbe:	6121      	str	r1, [r4, #16]
 8008cc0:	6163      	str	r3, [r4, #20]
 8008cc2:	3020      	adds	r0, #32
 8008cc4:	e7e5      	b.n	8008c92 <__d2b+0x62>
 8008cc6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008cca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008cce:	6038      	str	r0, [r7, #0]
 8008cd0:	6918      	ldr	r0, [r3, #16]
 8008cd2:	f7ff fcb5 	bl	8008640 <__hi0bits>
 8008cd6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008cda:	6031      	str	r1, [r6, #0]
 8008cdc:	e7e1      	b.n	8008ca2 <__d2b+0x72>
 8008cde:	bf00      	nop
 8008ce0:	0801aed8 	.word	0x0801aed8
 8008ce4:	0801af64 	.word	0x0801af64

08008ce8 <__ratio>:
 8008ce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cec:	4688      	mov	r8, r1
 8008cee:	4669      	mov	r1, sp
 8008cf0:	4681      	mov	r9, r0
 8008cf2:	f7ff ff49 	bl	8008b88 <__b2d>
 8008cf6:	460f      	mov	r7, r1
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	460d      	mov	r5, r1
 8008cfc:	4640      	mov	r0, r8
 8008cfe:	a901      	add	r1, sp, #4
 8008d00:	f7ff ff42 	bl	8008b88 <__b2d>
 8008d04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d08:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008d0c:	468b      	mov	fp, r1
 8008d0e:	eba3 0c02 	sub.w	ip, r3, r2
 8008d12:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008d16:	1a9b      	subs	r3, r3, r2
 8008d18:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	bfd5      	itete	le
 8008d20:	460a      	movle	r2, r1
 8008d22:	462a      	movgt	r2, r5
 8008d24:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d28:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008d2c:	bfd8      	it	le
 8008d2e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008d32:	465b      	mov	r3, fp
 8008d34:	4602      	mov	r2, r0
 8008d36:	4639      	mov	r1, r7
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f7f7 fdab 	bl	8000894 <__aeabi_ddiv>
 8008d3e:	b003      	add	sp, #12
 8008d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d44 <__copybits>:
 8008d44:	3901      	subs	r1, #1
 8008d46:	b570      	push	{r4, r5, r6, lr}
 8008d48:	1149      	asrs	r1, r1, #5
 8008d4a:	6914      	ldr	r4, [r2, #16]
 8008d4c:	3101      	adds	r1, #1
 8008d4e:	f102 0314 	add.w	r3, r2, #20
 8008d52:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d56:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d5a:	1f05      	subs	r5, r0, #4
 8008d5c:	42a3      	cmp	r3, r4
 8008d5e:	d30c      	bcc.n	8008d7a <__copybits+0x36>
 8008d60:	1aa3      	subs	r3, r4, r2
 8008d62:	3b11      	subs	r3, #17
 8008d64:	f023 0303 	bic.w	r3, r3, #3
 8008d68:	3211      	adds	r2, #17
 8008d6a:	42a2      	cmp	r2, r4
 8008d6c:	bf88      	it	hi
 8008d6e:	2300      	movhi	r3, #0
 8008d70:	4418      	add	r0, r3
 8008d72:	2300      	movs	r3, #0
 8008d74:	4288      	cmp	r0, r1
 8008d76:	d305      	bcc.n	8008d84 <__copybits+0x40>
 8008d78:	bd70      	pop	{r4, r5, r6, pc}
 8008d7a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008d7e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008d82:	e7eb      	b.n	8008d5c <__copybits+0x18>
 8008d84:	f840 3b04 	str.w	r3, [r0], #4
 8008d88:	e7f4      	b.n	8008d74 <__copybits+0x30>

08008d8a <__any_on>:
 8008d8a:	f100 0214 	add.w	r2, r0, #20
 8008d8e:	6900      	ldr	r0, [r0, #16]
 8008d90:	114b      	asrs	r3, r1, #5
 8008d92:	4298      	cmp	r0, r3
 8008d94:	b510      	push	{r4, lr}
 8008d96:	db11      	blt.n	8008dbc <__any_on+0x32>
 8008d98:	dd0a      	ble.n	8008db0 <__any_on+0x26>
 8008d9a:	f011 011f 	ands.w	r1, r1, #31
 8008d9e:	d007      	beq.n	8008db0 <__any_on+0x26>
 8008da0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008da4:	fa24 f001 	lsr.w	r0, r4, r1
 8008da8:	fa00 f101 	lsl.w	r1, r0, r1
 8008dac:	428c      	cmp	r4, r1
 8008dae:	d10b      	bne.n	8008dc8 <__any_on+0x3e>
 8008db0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d803      	bhi.n	8008dc0 <__any_on+0x36>
 8008db8:	2000      	movs	r0, #0
 8008dba:	bd10      	pop	{r4, pc}
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	e7f7      	b.n	8008db0 <__any_on+0x26>
 8008dc0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008dc4:	2900      	cmp	r1, #0
 8008dc6:	d0f5      	beq.n	8008db4 <__any_on+0x2a>
 8008dc8:	2001      	movs	r0, #1
 8008dca:	e7f6      	b.n	8008dba <__any_on+0x30>

08008dcc <_calloc_r>:
 8008dcc:	b570      	push	{r4, r5, r6, lr}
 8008dce:	fba1 5402 	umull	r5, r4, r1, r2
 8008dd2:	b934      	cbnz	r4, 8008de2 <_calloc_r+0x16>
 8008dd4:	4629      	mov	r1, r5
 8008dd6:	f000 f875 	bl	8008ec4 <_malloc_r>
 8008dda:	4606      	mov	r6, r0
 8008ddc:	b928      	cbnz	r0, 8008dea <_calloc_r+0x1e>
 8008dde:	4630      	mov	r0, r6
 8008de0:	bd70      	pop	{r4, r5, r6, pc}
 8008de2:	220c      	movs	r2, #12
 8008de4:	2600      	movs	r6, #0
 8008de6:	6002      	str	r2, [r0, #0]
 8008de8:	e7f9      	b.n	8008dde <_calloc_r+0x12>
 8008dea:	462a      	mov	r2, r5
 8008dec:	4621      	mov	r1, r4
 8008dee:	f7fc fbf3 	bl	80055d8 <memset>
 8008df2:	e7f4      	b.n	8008dde <_calloc_r+0x12>

08008df4 <_free_r>:
 8008df4:	b538      	push	{r3, r4, r5, lr}
 8008df6:	4605      	mov	r5, r0
 8008df8:	2900      	cmp	r1, #0
 8008dfa:	d040      	beq.n	8008e7e <_free_r+0x8a>
 8008dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e00:	1f0c      	subs	r4, r1, #4
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	bfb8      	it	lt
 8008e06:	18e4      	addlt	r4, r4, r3
 8008e08:	f000 fa94 	bl	8009334 <__malloc_lock>
 8008e0c:	4a1c      	ldr	r2, [pc, #112]	; (8008e80 <_free_r+0x8c>)
 8008e0e:	6813      	ldr	r3, [r2, #0]
 8008e10:	b933      	cbnz	r3, 8008e20 <_free_r+0x2c>
 8008e12:	6063      	str	r3, [r4, #4]
 8008e14:	6014      	str	r4, [r2, #0]
 8008e16:	4628      	mov	r0, r5
 8008e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e1c:	f000 ba90 	b.w	8009340 <__malloc_unlock>
 8008e20:	42a3      	cmp	r3, r4
 8008e22:	d908      	bls.n	8008e36 <_free_r+0x42>
 8008e24:	6820      	ldr	r0, [r4, #0]
 8008e26:	1821      	adds	r1, r4, r0
 8008e28:	428b      	cmp	r3, r1
 8008e2a:	bf01      	itttt	eq
 8008e2c:	6819      	ldreq	r1, [r3, #0]
 8008e2e:	685b      	ldreq	r3, [r3, #4]
 8008e30:	1809      	addeq	r1, r1, r0
 8008e32:	6021      	streq	r1, [r4, #0]
 8008e34:	e7ed      	b.n	8008e12 <_free_r+0x1e>
 8008e36:	461a      	mov	r2, r3
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	b10b      	cbz	r3, 8008e40 <_free_r+0x4c>
 8008e3c:	42a3      	cmp	r3, r4
 8008e3e:	d9fa      	bls.n	8008e36 <_free_r+0x42>
 8008e40:	6811      	ldr	r1, [r2, #0]
 8008e42:	1850      	adds	r0, r2, r1
 8008e44:	42a0      	cmp	r0, r4
 8008e46:	d10b      	bne.n	8008e60 <_free_r+0x6c>
 8008e48:	6820      	ldr	r0, [r4, #0]
 8008e4a:	4401      	add	r1, r0
 8008e4c:	1850      	adds	r0, r2, r1
 8008e4e:	4283      	cmp	r3, r0
 8008e50:	6011      	str	r1, [r2, #0]
 8008e52:	d1e0      	bne.n	8008e16 <_free_r+0x22>
 8008e54:	6818      	ldr	r0, [r3, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	4401      	add	r1, r0
 8008e5a:	6011      	str	r1, [r2, #0]
 8008e5c:	6053      	str	r3, [r2, #4]
 8008e5e:	e7da      	b.n	8008e16 <_free_r+0x22>
 8008e60:	d902      	bls.n	8008e68 <_free_r+0x74>
 8008e62:	230c      	movs	r3, #12
 8008e64:	602b      	str	r3, [r5, #0]
 8008e66:	e7d6      	b.n	8008e16 <_free_r+0x22>
 8008e68:	6820      	ldr	r0, [r4, #0]
 8008e6a:	1821      	adds	r1, r4, r0
 8008e6c:	428b      	cmp	r3, r1
 8008e6e:	bf01      	itttt	eq
 8008e70:	6819      	ldreq	r1, [r3, #0]
 8008e72:	685b      	ldreq	r3, [r3, #4]
 8008e74:	1809      	addeq	r1, r1, r0
 8008e76:	6021      	streq	r1, [r4, #0]
 8008e78:	6063      	str	r3, [r4, #4]
 8008e7a:	6054      	str	r4, [r2, #4]
 8008e7c:	e7cb      	b.n	8008e16 <_free_r+0x22>
 8008e7e:	bd38      	pop	{r3, r4, r5, pc}
 8008e80:	20001468 	.word	0x20001468

08008e84 <sbrk_aligned>:
 8008e84:	b570      	push	{r4, r5, r6, lr}
 8008e86:	4e0e      	ldr	r6, [pc, #56]	; (8008ec0 <sbrk_aligned+0x3c>)
 8008e88:	460c      	mov	r4, r1
 8008e8a:	6831      	ldr	r1, [r6, #0]
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	b911      	cbnz	r1, 8008e96 <sbrk_aligned+0x12>
 8008e90:	f000 f9ee 	bl	8009270 <_sbrk_r>
 8008e94:	6030      	str	r0, [r6, #0]
 8008e96:	4621      	mov	r1, r4
 8008e98:	4628      	mov	r0, r5
 8008e9a:	f000 f9e9 	bl	8009270 <_sbrk_r>
 8008e9e:	1c43      	adds	r3, r0, #1
 8008ea0:	d00a      	beq.n	8008eb8 <sbrk_aligned+0x34>
 8008ea2:	1cc4      	adds	r4, r0, #3
 8008ea4:	f024 0403 	bic.w	r4, r4, #3
 8008ea8:	42a0      	cmp	r0, r4
 8008eaa:	d007      	beq.n	8008ebc <sbrk_aligned+0x38>
 8008eac:	1a21      	subs	r1, r4, r0
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f000 f9de 	bl	8009270 <_sbrk_r>
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	d101      	bne.n	8008ebc <sbrk_aligned+0x38>
 8008eb8:	f04f 34ff 	mov.w	r4, #4294967295
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	bd70      	pop	{r4, r5, r6, pc}
 8008ec0:	2000146c 	.word	0x2000146c

08008ec4 <_malloc_r>:
 8008ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec8:	1ccd      	adds	r5, r1, #3
 8008eca:	f025 0503 	bic.w	r5, r5, #3
 8008ece:	3508      	adds	r5, #8
 8008ed0:	2d0c      	cmp	r5, #12
 8008ed2:	bf38      	it	cc
 8008ed4:	250c      	movcc	r5, #12
 8008ed6:	2d00      	cmp	r5, #0
 8008ed8:	4607      	mov	r7, r0
 8008eda:	db01      	blt.n	8008ee0 <_malloc_r+0x1c>
 8008edc:	42a9      	cmp	r1, r5
 8008ede:	d905      	bls.n	8008eec <_malloc_r+0x28>
 8008ee0:	230c      	movs	r3, #12
 8008ee2:	2600      	movs	r6, #0
 8008ee4:	603b      	str	r3, [r7, #0]
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eec:	4e2e      	ldr	r6, [pc, #184]	; (8008fa8 <_malloc_r+0xe4>)
 8008eee:	f000 fa21 	bl	8009334 <__malloc_lock>
 8008ef2:	6833      	ldr	r3, [r6, #0]
 8008ef4:	461c      	mov	r4, r3
 8008ef6:	bb34      	cbnz	r4, 8008f46 <_malloc_r+0x82>
 8008ef8:	4629      	mov	r1, r5
 8008efa:	4638      	mov	r0, r7
 8008efc:	f7ff ffc2 	bl	8008e84 <sbrk_aligned>
 8008f00:	1c43      	adds	r3, r0, #1
 8008f02:	4604      	mov	r4, r0
 8008f04:	d14d      	bne.n	8008fa2 <_malloc_r+0xde>
 8008f06:	6834      	ldr	r4, [r6, #0]
 8008f08:	4626      	mov	r6, r4
 8008f0a:	2e00      	cmp	r6, #0
 8008f0c:	d140      	bne.n	8008f90 <_malloc_r+0xcc>
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	4631      	mov	r1, r6
 8008f12:	4638      	mov	r0, r7
 8008f14:	eb04 0803 	add.w	r8, r4, r3
 8008f18:	f000 f9aa 	bl	8009270 <_sbrk_r>
 8008f1c:	4580      	cmp	r8, r0
 8008f1e:	d13a      	bne.n	8008f96 <_malloc_r+0xd2>
 8008f20:	6821      	ldr	r1, [r4, #0]
 8008f22:	3503      	adds	r5, #3
 8008f24:	1a6d      	subs	r5, r5, r1
 8008f26:	f025 0503 	bic.w	r5, r5, #3
 8008f2a:	3508      	adds	r5, #8
 8008f2c:	2d0c      	cmp	r5, #12
 8008f2e:	bf38      	it	cc
 8008f30:	250c      	movcc	r5, #12
 8008f32:	4638      	mov	r0, r7
 8008f34:	4629      	mov	r1, r5
 8008f36:	f7ff ffa5 	bl	8008e84 <sbrk_aligned>
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	d02b      	beq.n	8008f96 <_malloc_r+0xd2>
 8008f3e:	6823      	ldr	r3, [r4, #0]
 8008f40:	442b      	add	r3, r5
 8008f42:	6023      	str	r3, [r4, #0]
 8008f44:	e00e      	b.n	8008f64 <_malloc_r+0xa0>
 8008f46:	6822      	ldr	r2, [r4, #0]
 8008f48:	1b52      	subs	r2, r2, r5
 8008f4a:	d41e      	bmi.n	8008f8a <_malloc_r+0xc6>
 8008f4c:	2a0b      	cmp	r2, #11
 8008f4e:	d916      	bls.n	8008f7e <_malloc_r+0xba>
 8008f50:	1961      	adds	r1, r4, r5
 8008f52:	42a3      	cmp	r3, r4
 8008f54:	6025      	str	r5, [r4, #0]
 8008f56:	bf18      	it	ne
 8008f58:	6059      	strne	r1, [r3, #4]
 8008f5a:	6863      	ldr	r3, [r4, #4]
 8008f5c:	bf08      	it	eq
 8008f5e:	6031      	streq	r1, [r6, #0]
 8008f60:	5162      	str	r2, [r4, r5]
 8008f62:	604b      	str	r3, [r1, #4]
 8008f64:	4638      	mov	r0, r7
 8008f66:	f104 060b 	add.w	r6, r4, #11
 8008f6a:	f000 f9e9 	bl	8009340 <__malloc_unlock>
 8008f6e:	f026 0607 	bic.w	r6, r6, #7
 8008f72:	1d23      	adds	r3, r4, #4
 8008f74:	1af2      	subs	r2, r6, r3
 8008f76:	d0b6      	beq.n	8008ee6 <_malloc_r+0x22>
 8008f78:	1b9b      	subs	r3, r3, r6
 8008f7a:	50a3      	str	r3, [r4, r2]
 8008f7c:	e7b3      	b.n	8008ee6 <_malloc_r+0x22>
 8008f7e:	6862      	ldr	r2, [r4, #4]
 8008f80:	42a3      	cmp	r3, r4
 8008f82:	bf0c      	ite	eq
 8008f84:	6032      	streq	r2, [r6, #0]
 8008f86:	605a      	strne	r2, [r3, #4]
 8008f88:	e7ec      	b.n	8008f64 <_malloc_r+0xa0>
 8008f8a:	4623      	mov	r3, r4
 8008f8c:	6864      	ldr	r4, [r4, #4]
 8008f8e:	e7b2      	b.n	8008ef6 <_malloc_r+0x32>
 8008f90:	4634      	mov	r4, r6
 8008f92:	6876      	ldr	r6, [r6, #4]
 8008f94:	e7b9      	b.n	8008f0a <_malloc_r+0x46>
 8008f96:	230c      	movs	r3, #12
 8008f98:	4638      	mov	r0, r7
 8008f9a:	603b      	str	r3, [r7, #0]
 8008f9c:	f000 f9d0 	bl	8009340 <__malloc_unlock>
 8008fa0:	e7a1      	b.n	8008ee6 <_malloc_r+0x22>
 8008fa2:	6025      	str	r5, [r4, #0]
 8008fa4:	e7de      	b.n	8008f64 <_malloc_r+0xa0>
 8008fa6:	bf00      	nop
 8008fa8:	20001468 	.word	0x20001468

08008fac <__ssputs_r>:
 8008fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb0:	688e      	ldr	r6, [r1, #8]
 8008fb2:	4682      	mov	sl, r0
 8008fb4:	429e      	cmp	r6, r3
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	4690      	mov	r8, r2
 8008fba:	461f      	mov	r7, r3
 8008fbc:	d838      	bhi.n	8009030 <__ssputs_r+0x84>
 8008fbe:	898a      	ldrh	r2, [r1, #12]
 8008fc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fc4:	d032      	beq.n	800902c <__ssputs_r+0x80>
 8008fc6:	6825      	ldr	r5, [r4, #0]
 8008fc8:	6909      	ldr	r1, [r1, #16]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	eba5 0901 	sub.w	r9, r5, r1
 8008fd0:	6965      	ldr	r5, [r4, #20]
 8008fd2:	444b      	add	r3, r9
 8008fd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fdc:	106d      	asrs	r5, r5, #1
 8008fde:	429d      	cmp	r5, r3
 8008fe0:	bf38      	it	cc
 8008fe2:	461d      	movcc	r5, r3
 8008fe4:	0553      	lsls	r3, r2, #21
 8008fe6:	d531      	bpl.n	800904c <__ssputs_r+0xa0>
 8008fe8:	4629      	mov	r1, r5
 8008fea:	f7ff ff6b 	bl	8008ec4 <_malloc_r>
 8008fee:	4606      	mov	r6, r0
 8008ff0:	b950      	cbnz	r0, 8009008 <__ssputs_r+0x5c>
 8008ff2:	230c      	movs	r3, #12
 8008ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff8:	f8ca 3000 	str.w	r3, [sl]
 8008ffc:	89a3      	ldrh	r3, [r4, #12]
 8008ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009002:	81a3      	strh	r3, [r4, #12]
 8009004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009008:	464a      	mov	r2, r9
 800900a:	6921      	ldr	r1, [r4, #16]
 800900c:	f7ff fa18 	bl	8008440 <memcpy>
 8009010:	89a3      	ldrh	r3, [r4, #12]
 8009012:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800901a:	81a3      	strh	r3, [r4, #12]
 800901c:	6126      	str	r6, [r4, #16]
 800901e:	444e      	add	r6, r9
 8009020:	6026      	str	r6, [r4, #0]
 8009022:	463e      	mov	r6, r7
 8009024:	6165      	str	r5, [r4, #20]
 8009026:	eba5 0509 	sub.w	r5, r5, r9
 800902a:	60a5      	str	r5, [r4, #8]
 800902c:	42be      	cmp	r6, r7
 800902e:	d900      	bls.n	8009032 <__ssputs_r+0x86>
 8009030:	463e      	mov	r6, r7
 8009032:	4632      	mov	r2, r6
 8009034:	4641      	mov	r1, r8
 8009036:	6820      	ldr	r0, [r4, #0]
 8009038:	f7fc fab4 	bl	80055a4 <memmove>
 800903c:	68a3      	ldr	r3, [r4, #8]
 800903e:	2000      	movs	r0, #0
 8009040:	1b9b      	subs	r3, r3, r6
 8009042:	60a3      	str	r3, [r4, #8]
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	4433      	add	r3, r6
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	e7db      	b.n	8009004 <__ssputs_r+0x58>
 800904c:	462a      	mov	r2, r5
 800904e:	f000 f97d 	bl	800934c <_realloc_r>
 8009052:	4606      	mov	r6, r0
 8009054:	2800      	cmp	r0, #0
 8009056:	d1e1      	bne.n	800901c <__ssputs_r+0x70>
 8009058:	4650      	mov	r0, sl
 800905a:	6921      	ldr	r1, [r4, #16]
 800905c:	f7ff feca 	bl	8008df4 <_free_r>
 8009060:	e7c7      	b.n	8008ff2 <__ssputs_r+0x46>
	...

08009064 <_svfiprintf_r>:
 8009064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009068:	4698      	mov	r8, r3
 800906a:	898b      	ldrh	r3, [r1, #12]
 800906c:	4607      	mov	r7, r0
 800906e:	061b      	lsls	r3, r3, #24
 8009070:	460d      	mov	r5, r1
 8009072:	4614      	mov	r4, r2
 8009074:	b09d      	sub	sp, #116	; 0x74
 8009076:	d50e      	bpl.n	8009096 <_svfiprintf_r+0x32>
 8009078:	690b      	ldr	r3, [r1, #16]
 800907a:	b963      	cbnz	r3, 8009096 <_svfiprintf_r+0x32>
 800907c:	2140      	movs	r1, #64	; 0x40
 800907e:	f7ff ff21 	bl	8008ec4 <_malloc_r>
 8009082:	6028      	str	r0, [r5, #0]
 8009084:	6128      	str	r0, [r5, #16]
 8009086:	b920      	cbnz	r0, 8009092 <_svfiprintf_r+0x2e>
 8009088:	230c      	movs	r3, #12
 800908a:	603b      	str	r3, [r7, #0]
 800908c:	f04f 30ff 	mov.w	r0, #4294967295
 8009090:	e0d1      	b.n	8009236 <_svfiprintf_r+0x1d2>
 8009092:	2340      	movs	r3, #64	; 0x40
 8009094:	616b      	str	r3, [r5, #20]
 8009096:	2300      	movs	r3, #0
 8009098:	9309      	str	r3, [sp, #36]	; 0x24
 800909a:	2320      	movs	r3, #32
 800909c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090a0:	2330      	movs	r3, #48	; 0x30
 80090a2:	f04f 0901 	mov.w	r9, #1
 80090a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80090aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009250 <_svfiprintf_r+0x1ec>
 80090ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090b2:	4623      	mov	r3, r4
 80090b4:	469a      	mov	sl, r3
 80090b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090ba:	b10a      	cbz	r2, 80090c0 <_svfiprintf_r+0x5c>
 80090bc:	2a25      	cmp	r2, #37	; 0x25
 80090be:	d1f9      	bne.n	80090b4 <_svfiprintf_r+0x50>
 80090c0:	ebba 0b04 	subs.w	fp, sl, r4
 80090c4:	d00b      	beq.n	80090de <_svfiprintf_r+0x7a>
 80090c6:	465b      	mov	r3, fp
 80090c8:	4622      	mov	r2, r4
 80090ca:	4629      	mov	r1, r5
 80090cc:	4638      	mov	r0, r7
 80090ce:	f7ff ff6d 	bl	8008fac <__ssputs_r>
 80090d2:	3001      	adds	r0, #1
 80090d4:	f000 80aa 	beq.w	800922c <_svfiprintf_r+0x1c8>
 80090d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090da:	445a      	add	r2, fp
 80090dc:	9209      	str	r2, [sp, #36]	; 0x24
 80090de:	f89a 3000 	ldrb.w	r3, [sl]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 80a2 	beq.w	800922c <_svfiprintf_r+0x1c8>
 80090e8:	2300      	movs	r3, #0
 80090ea:	f04f 32ff 	mov.w	r2, #4294967295
 80090ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090f2:	f10a 0a01 	add.w	sl, sl, #1
 80090f6:	9304      	str	r3, [sp, #16]
 80090f8:	9307      	str	r3, [sp, #28]
 80090fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090fe:	931a      	str	r3, [sp, #104]	; 0x68
 8009100:	4654      	mov	r4, sl
 8009102:	2205      	movs	r2, #5
 8009104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009108:	4851      	ldr	r0, [pc, #324]	; (8009250 <_svfiprintf_r+0x1ec>)
 800910a:	f7ff f98b 	bl	8008424 <memchr>
 800910e:	9a04      	ldr	r2, [sp, #16]
 8009110:	b9d8      	cbnz	r0, 800914a <_svfiprintf_r+0xe6>
 8009112:	06d0      	lsls	r0, r2, #27
 8009114:	bf44      	itt	mi
 8009116:	2320      	movmi	r3, #32
 8009118:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800911c:	0711      	lsls	r1, r2, #28
 800911e:	bf44      	itt	mi
 8009120:	232b      	movmi	r3, #43	; 0x2b
 8009122:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009126:	f89a 3000 	ldrb.w	r3, [sl]
 800912a:	2b2a      	cmp	r3, #42	; 0x2a
 800912c:	d015      	beq.n	800915a <_svfiprintf_r+0xf6>
 800912e:	4654      	mov	r4, sl
 8009130:	2000      	movs	r0, #0
 8009132:	f04f 0c0a 	mov.w	ip, #10
 8009136:	9a07      	ldr	r2, [sp, #28]
 8009138:	4621      	mov	r1, r4
 800913a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800913e:	3b30      	subs	r3, #48	; 0x30
 8009140:	2b09      	cmp	r3, #9
 8009142:	d94e      	bls.n	80091e2 <_svfiprintf_r+0x17e>
 8009144:	b1b0      	cbz	r0, 8009174 <_svfiprintf_r+0x110>
 8009146:	9207      	str	r2, [sp, #28]
 8009148:	e014      	b.n	8009174 <_svfiprintf_r+0x110>
 800914a:	eba0 0308 	sub.w	r3, r0, r8
 800914e:	fa09 f303 	lsl.w	r3, r9, r3
 8009152:	4313      	orrs	r3, r2
 8009154:	46a2      	mov	sl, r4
 8009156:	9304      	str	r3, [sp, #16]
 8009158:	e7d2      	b.n	8009100 <_svfiprintf_r+0x9c>
 800915a:	9b03      	ldr	r3, [sp, #12]
 800915c:	1d19      	adds	r1, r3, #4
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	9103      	str	r1, [sp, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	bfbb      	ittet	lt
 8009166:	425b      	neglt	r3, r3
 8009168:	f042 0202 	orrlt.w	r2, r2, #2
 800916c:	9307      	strge	r3, [sp, #28]
 800916e:	9307      	strlt	r3, [sp, #28]
 8009170:	bfb8      	it	lt
 8009172:	9204      	strlt	r2, [sp, #16]
 8009174:	7823      	ldrb	r3, [r4, #0]
 8009176:	2b2e      	cmp	r3, #46	; 0x2e
 8009178:	d10c      	bne.n	8009194 <_svfiprintf_r+0x130>
 800917a:	7863      	ldrb	r3, [r4, #1]
 800917c:	2b2a      	cmp	r3, #42	; 0x2a
 800917e:	d135      	bne.n	80091ec <_svfiprintf_r+0x188>
 8009180:	9b03      	ldr	r3, [sp, #12]
 8009182:	3402      	adds	r4, #2
 8009184:	1d1a      	adds	r2, r3, #4
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	9203      	str	r2, [sp, #12]
 800918a:	2b00      	cmp	r3, #0
 800918c:	bfb8      	it	lt
 800918e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009192:	9305      	str	r3, [sp, #20]
 8009194:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009254 <_svfiprintf_r+0x1f0>
 8009198:	2203      	movs	r2, #3
 800919a:	4650      	mov	r0, sl
 800919c:	7821      	ldrb	r1, [r4, #0]
 800919e:	f7ff f941 	bl	8008424 <memchr>
 80091a2:	b140      	cbz	r0, 80091b6 <_svfiprintf_r+0x152>
 80091a4:	2340      	movs	r3, #64	; 0x40
 80091a6:	eba0 000a 	sub.w	r0, r0, sl
 80091aa:	fa03 f000 	lsl.w	r0, r3, r0
 80091ae:	9b04      	ldr	r3, [sp, #16]
 80091b0:	3401      	adds	r4, #1
 80091b2:	4303      	orrs	r3, r0
 80091b4:	9304      	str	r3, [sp, #16]
 80091b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ba:	2206      	movs	r2, #6
 80091bc:	4826      	ldr	r0, [pc, #152]	; (8009258 <_svfiprintf_r+0x1f4>)
 80091be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091c2:	f7ff f92f 	bl	8008424 <memchr>
 80091c6:	2800      	cmp	r0, #0
 80091c8:	d038      	beq.n	800923c <_svfiprintf_r+0x1d8>
 80091ca:	4b24      	ldr	r3, [pc, #144]	; (800925c <_svfiprintf_r+0x1f8>)
 80091cc:	bb1b      	cbnz	r3, 8009216 <_svfiprintf_r+0x1b2>
 80091ce:	9b03      	ldr	r3, [sp, #12]
 80091d0:	3307      	adds	r3, #7
 80091d2:	f023 0307 	bic.w	r3, r3, #7
 80091d6:	3308      	adds	r3, #8
 80091d8:	9303      	str	r3, [sp, #12]
 80091da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091dc:	4433      	add	r3, r6
 80091de:	9309      	str	r3, [sp, #36]	; 0x24
 80091e0:	e767      	b.n	80090b2 <_svfiprintf_r+0x4e>
 80091e2:	460c      	mov	r4, r1
 80091e4:	2001      	movs	r0, #1
 80091e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80091ea:	e7a5      	b.n	8009138 <_svfiprintf_r+0xd4>
 80091ec:	2300      	movs	r3, #0
 80091ee:	f04f 0c0a 	mov.w	ip, #10
 80091f2:	4619      	mov	r1, r3
 80091f4:	3401      	adds	r4, #1
 80091f6:	9305      	str	r3, [sp, #20]
 80091f8:	4620      	mov	r0, r4
 80091fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091fe:	3a30      	subs	r2, #48	; 0x30
 8009200:	2a09      	cmp	r2, #9
 8009202:	d903      	bls.n	800920c <_svfiprintf_r+0x1a8>
 8009204:	2b00      	cmp	r3, #0
 8009206:	d0c5      	beq.n	8009194 <_svfiprintf_r+0x130>
 8009208:	9105      	str	r1, [sp, #20]
 800920a:	e7c3      	b.n	8009194 <_svfiprintf_r+0x130>
 800920c:	4604      	mov	r4, r0
 800920e:	2301      	movs	r3, #1
 8009210:	fb0c 2101 	mla	r1, ip, r1, r2
 8009214:	e7f0      	b.n	80091f8 <_svfiprintf_r+0x194>
 8009216:	ab03      	add	r3, sp, #12
 8009218:	9300      	str	r3, [sp, #0]
 800921a:	462a      	mov	r2, r5
 800921c:	4638      	mov	r0, r7
 800921e:	4b10      	ldr	r3, [pc, #64]	; (8009260 <_svfiprintf_r+0x1fc>)
 8009220:	a904      	add	r1, sp, #16
 8009222:	f7fc fa7f 	bl	8005724 <_printf_float>
 8009226:	1c42      	adds	r2, r0, #1
 8009228:	4606      	mov	r6, r0
 800922a:	d1d6      	bne.n	80091da <_svfiprintf_r+0x176>
 800922c:	89ab      	ldrh	r3, [r5, #12]
 800922e:	065b      	lsls	r3, r3, #25
 8009230:	f53f af2c 	bmi.w	800908c <_svfiprintf_r+0x28>
 8009234:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009236:	b01d      	add	sp, #116	; 0x74
 8009238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923c:	ab03      	add	r3, sp, #12
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	462a      	mov	r2, r5
 8009242:	4638      	mov	r0, r7
 8009244:	4b06      	ldr	r3, [pc, #24]	; (8009260 <_svfiprintf_r+0x1fc>)
 8009246:	a904      	add	r1, sp, #16
 8009248:	f7fc fd08 	bl	8005c5c <_printf_i>
 800924c:	e7eb      	b.n	8009226 <_svfiprintf_r+0x1c2>
 800924e:	bf00      	nop
 8009250:	0801b0bc 	.word	0x0801b0bc
 8009254:	0801b0c2 	.word	0x0801b0c2
 8009258:	0801b0c6 	.word	0x0801b0c6
 800925c:	08005725 	.word	0x08005725
 8009260:	08008fad 	.word	0x08008fad

08009264 <nan>:
 8009264:	2000      	movs	r0, #0
 8009266:	4901      	ldr	r1, [pc, #4]	; (800926c <nan+0x8>)
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	7ff80000 	.word	0x7ff80000

08009270 <_sbrk_r>:
 8009270:	b538      	push	{r3, r4, r5, lr}
 8009272:	2300      	movs	r3, #0
 8009274:	4d05      	ldr	r5, [pc, #20]	; (800928c <_sbrk_r+0x1c>)
 8009276:	4604      	mov	r4, r0
 8009278:	4608      	mov	r0, r1
 800927a:	602b      	str	r3, [r5, #0]
 800927c:	f7fa f9aa 	bl	80035d4 <_sbrk>
 8009280:	1c43      	adds	r3, r0, #1
 8009282:	d102      	bne.n	800928a <_sbrk_r+0x1a>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	b103      	cbz	r3, 800928a <_sbrk_r+0x1a>
 8009288:	6023      	str	r3, [r4, #0]
 800928a:	bd38      	pop	{r3, r4, r5, pc}
 800928c:	20001470 	.word	0x20001470

08009290 <strncmp>:
 8009290:	4603      	mov	r3, r0
 8009292:	b510      	push	{r4, lr}
 8009294:	b172      	cbz	r2, 80092b4 <strncmp+0x24>
 8009296:	3901      	subs	r1, #1
 8009298:	1884      	adds	r4, r0, r2
 800929a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800929e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80092a2:	4290      	cmp	r0, r2
 80092a4:	d101      	bne.n	80092aa <strncmp+0x1a>
 80092a6:	42a3      	cmp	r3, r4
 80092a8:	d101      	bne.n	80092ae <strncmp+0x1e>
 80092aa:	1a80      	subs	r0, r0, r2
 80092ac:	bd10      	pop	{r4, pc}
 80092ae:	2800      	cmp	r0, #0
 80092b0:	d1f3      	bne.n	800929a <strncmp+0xa>
 80092b2:	e7fa      	b.n	80092aa <strncmp+0x1a>
 80092b4:	4610      	mov	r0, r2
 80092b6:	e7f9      	b.n	80092ac <strncmp+0x1c>

080092b8 <__ascii_wctomb>:
 80092b8:	4603      	mov	r3, r0
 80092ba:	4608      	mov	r0, r1
 80092bc:	b141      	cbz	r1, 80092d0 <__ascii_wctomb+0x18>
 80092be:	2aff      	cmp	r2, #255	; 0xff
 80092c0:	d904      	bls.n	80092cc <__ascii_wctomb+0x14>
 80092c2:	228a      	movs	r2, #138	; 0x8a
 80092c4:	f04f 30ff 	mov.w	r0, #4294967295
 80092c8:	601a      	str	r2, [r3, #0]
 80092ca:	4770      	bx	lr
 80092cc:	2001      	movs	r0, #1
 80092ce:	700a      	strb	r2, [r1, #0]
 80092d0:	4770      	bx	lr
	...

080092d4 <__assert_func>:
 80092d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092d6:	4614      	mov	r4, r2
 80092d8:	461a      	mov	r2, r3
 80092da:	4b09      	ldr	r3, [pc, #36]	; (8009300 <__assert_func+0x2c>)
 80092dc:	4605      	mov	r5, r0
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68d8      	ldr	r0, [r3, #12]
 80092e2:	b14c      	cbz	r4, 80092f8 <__assert_func+0x24>
 80092e4:	4b07      	ldr	r3, [pc, #28]	; (8009304 <__assert_func+0x30>)
 80092e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092ea:	9100      	str	r1, [sp, #0]
 80092ec:	462b      	mov	r3, r5
 80092ee:	4906      	ldr	r1, [pc, #24]	; (8009308 <__assert_func+0x34>)
 80092f0:	f000 f80e 	bl	8009310 <fiprintf>
 80092f4:	f000 fa70 	bl	80097d8 <abort>
 80092f8:	4b04      	ldr	r3, [pc, #16]	; (800930c <__assert_func+0x38>)
 80092fa:	461c      	mov	r4, r3
 80092fc:	e7f3      	b.n	80092e6 <__assert_func+0x12>
 80092fe:	bf00      	nop
 8009300:	2000014c 	.word	0x2000014c
 8009304:	0801b0cd 	.word	0x0801b0cd
 8009308:	0801b0da 	.word	0x0801b0da
 800930c:	0801b108 	.word	0x0801b108

08009310 <fiprintf>:
 8009310:	b40e      	push	{r1, r2, r3}
 8009312:	b503      	push	{r0, r1, lr}
 8009314:	4601      	mov	r1, r0
 8009316:	ab03      	add	r3, sp, #12
 8009318:	4805      	ldr	r0, [pc, #20]	; (8009330 <fiprintf+0x20>)
 800931a:	f853 2b04 	ldr.w	r2, [r3], #4
 800931e:	6800      	ldr	r0, [r0, #0]
 8009320:	9301      	str	r3, [sp, #4]
 8009322:	f000 f869 	bl	80093f8 <_vfiprintf_r>
 8009326:	b002      	add	sp, #8
 8009328:	f85d eb04 	ldr.w	lr, [sp], #4
 800932c:	b003      	add	sp, #12
 800932e:	4770      	bx	lr
 8009330:	2000014c 	.word	0x2000014c

08009334 <__malloc_lock>:
 8009334:	4801      	ldr	r0, [pc, #4]	; (800933c <__malloc_lock+0x8>)
 8009336:	f000 bc0b 	b.w	8009b50 <__retarget_lock_acquire_recursive>
 800933a:	bf00      	nop
 800933c:	20001474 	.word	0x20001474

08009340 <__malloc_unlock>:
 8009340:	4801      	ldr	r0, [pc, #4]	; (8009348 <__malloc_unlock+0x8>)
 8009342:	f000 bc06 	b.w	8009b52 <__retarget_lock_release_recursive>
 8009346:	bf00      	nop
 8009348:	20001474 	.word	0x20001474

0800934c <_realloc_r>:
 800934c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009350:	4680      	mov	r8, r0
 8009352:	4614      	mov	r4, r2
 8009354:	460e      	mov	r6, r1
 8009356:	b921      	cbnz	r1, 8009362 <_realloc_r+0x16>
 8009358:	4611      	mov	r1, r2
 800935a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800935e:	f7ff bdb1 	b.w	8008ec4 <_malloc_r>
 8009362:	b92a      	cbnz	r2, 8009370 <_realloc_r+0x24>
 8009364:	f7ff fd46 	bl	8008df4 <_free_r>
 8009368:	4625      	mov	r5, r4
 800936a:	4628      	mov	r0, r5
 800936c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009370:	f000 fc56 	bl	8009c20 <_malloc_usable_size_r>
 8009374:	4284      	cmp	r4, r0
 8009376:	4607      	mov	r7, r0
 8009378:	d802      	bhi.n	8009380 <_realloc_r+0x34>
 800937a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800937e:	d812      	bhi.n	80093a6 <_realloc_r+0x5a>
 8009380:	4621      	mov	r1, r4
 8009382:	4640      	mov	r0, r8
 8009384:	f7ff fd9e 	bl	8008ec4 <_malloc_r>
 8009388:	4605      	mov	r5, r0
 800938a:	2800      	cmp	r0, #0
 800938c:	d0ed      	beq.n	800936a <_realloc_r+0x1e>
 800938e:	42bc      	cmp	r4, r7
 8009390:	4622      	mov	r2, r4
 8009392:	4631      	mov	r1, r6
 8009394:	bf28      	it	cs
 8009396:	463a      	movcs	r2, r7
 8009398:	f7ff f852 	bl	8008440 <memcpy>
 800939c:	4631      	mov	r1, r6
 800939e:	4640      	mov	r0, r8
 80093a0:	f7ff fd28 	bl	8008df4 <_free_r>
 80093a4:	e7e1      	b.n	800936a <_realloc_r+0x1e>
 80093a6:	4635      	mov	r5, r6
 80093a8:	e7df      	b.n	800936a <_realloc_r+0x1e>

080093aa <__sfputc_r>:
 80093aa:	6893      	ldr	r3, [r2, #8]
 80093ac:	b410      	push	{r4}
 80093ae:	3b01      	subs	r3, #1
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	6093      	str	r3, [r2, #8]
 80093b4:	da07      	bge.n	80093c6 <__sfputc_r+0x1c>
 80093b6:	6994      	ldr	r4, [r2, #24]
 80093b8:	42a3      	cmp	r3, r4
 80093ba:	db01      	blt.n	80093c0 <__sfputc_r+0x16>
 80093bc:	290a      	cmp	r1, #10
 80093be:	d102      	bne.n	80093c6 <__sfputc_r+0x1c>
 80093c0:	bc10      	pop	{r4}
 80093c2:	f000 b949 	b.w	8009658 <__swbuf_r>
 80093c6:	6813      	ldr	r3, [r2, #0]
 80093c8:	1c58      	adds	r0, r3, #1
 80093ca:	6010      	str	r0, [r2, #0]
 80093cc:	7019      	strb	r1, [r3, #0]
 80093ce:	4608      	mov	r0, r1
 80093d0:	bc10      	pop	{r4}
 80093d2:	4770      	bx	lr

080093d4 <__sfputs_r>:
 80093d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d6:	4606      	mov	r6, r0
 80093d8:	460f      	mov	r7, r1
 80093da:	4614      	mov	r4, r2
 80093dc:	18d5      	adds	r5, r2, r3
 80093de:	42ac      	cmp	r4, r5
 80093e0:	d101      	bne.n	80093e6 <__sfputs_r+0x12>
 80093e2:	2000      	movs	r0, #0
 80093e4:	e007      	b.n	80093f6 <__sfputs_r+0x22>
 80093e6:	463a      	mov	r2, r7
 80093e8:	4630      	mov	r0, r6
 80093ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ee:	f7ff ffdc 	bl	80093aa <__sfputc_r>
 80093f2:	1c43      	adds	r3, r0, #1
 80093f4:	d1f3      	bne.n	80093de <__sfputs_r+0xa>
 80093f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080093f8 <_vfiprintf_r>:
 80093f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fc:	460d      	mov	r5, r1
 80093fe:	4614      	mov	r4, r2
 8009400:	4698      	mov	r8, r3
 8009402:	4606      	mov	r6, r0
 8009404:	b09d      	sub	sp, #116	; 0x74
 8009406:	b118      	cbz	r0, 8009410 <_vfiprintf_r+0x18>
 8009408:	6983      	ldr	r3, [r0, #24]
 800940a:	b90b      	cbnz	r3, 8009410 <_vfiprintf_r+0x18>
 800940c:	f000 fb02 	bl	8009a14 <__sinit>
 8009410:	4b89      	ldr	r3, [pc, #548]	; (8009638 <_vfiprintf_r+0x240>)
 8009412:	429d      	cmp	r5, r3
 8009414:	d11b      	bne.n	800944e <_vfiprintf_r+0x56>
 8009416:	6875      	ldr	r5, [r6, #4]
 8009418:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800941a:	07d9      	lsls	r1, r3, #31
 800941c:	d405      	bmi.n	800942a <_vfiprintf_r+0x32>
 800941e:	89ab      	ldrh	r3, [r5, #12]
 8009420:	059a      	lsls	r2, r3, #22
 8009422:	d402      	bmi.n	800942a <_vfiprintf_r+0x32>
 8009424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009426:	f000 fb93 	bl	8009b50 <__retarget_lock_acquire_recursive>
 800942a:	89ab      	ldrh	r3, [r5, #12]
 800942c:	071b      	lsls	r3, r3, #28
 800942e:	d501      	bpl.n	8009434 <_vfiprintf_r+0x3c>
 8009430:	692b      	ldr	r3, [r5, #16]
 8009432:	b9eb      	cbnz	r3, 8009470 <_vfiprintf_r+0x78>
 8009434:	4629      	mov	r1, r5
 8009436:	4630      	mov	r0, r6
 8009438:	f000 f960 	bl	80096fc <__swsetup_r>
 800943c:	b1c0      	cbz	r0, 8009470 <_vfiprintf_r+0x78>
 800943e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009440:	07dc      	lsls	r4, r3, #31
 8009442:	d50e      	bpl.n	8009462 <_vfiprintf_r+0x6a>
 8009444:	f04f 30ff 	mov.w	r0, #4294967295
 8009448:	b01d      	add	sp, #116	; 0x74
 800944a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944e:	4b7b      	ldr	r3, [pc, #492]	; (800963c <_vfiprintf_r+0x244>)
 8009450:	429d      	cmp	r5, r3
 8009452:	d101      	bne.n	8009458 <_vfiprintf_r+0x60>
 8009454:	68b5      	ldr	r5, [r6, #8]
 8009456:	e7df      	b.n	8009418 <_vfiprintf_r+0x20>
 8009458:	4b79      	ldr	r3, [pc, #484]	; (8009640 <_vfiprintf_r+0x248>)
 800945a:	429d      	cmp	r5, r3
 800945c:	bf08      	it	eq
 800945e:	68f5      	ldreq	r5, [r6, #12]
 8009460:	e7da      	b.n	8009418 <_vfiprintf_r+0x20>
 8009462:	89ab      	ldrh	r3, [r5, #12]
 8009464:	0598      	lsls	r0, r3, #22
 8009466:	d4ed      	bmi.n	8009444 <_vfiprintf_r+0x4c>
 8009468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800946a:	f000 fb72 	bl	8009b52 <__retarget_lock_release_recursive>
 800946e:	e7e9      	b.n	8009444 <_vfiprintf_r+0x4c>
 8009470:	2300      	movs	r3, #0
 8009472:	9309      	str	r3, [sp, #36]	; 0x24
 8009474:	2320      	movs	r3, #32
 8009476:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800947a:	2330      	movs	r3, #48	; 0x30
 800947c:	f04f 0901 	mov.w	r9, #1
 8009480:	f8cd 800c 	str.w	r8, [sp, #12]
 8009484:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009644 <_vfiprintf_r+0x24c>
 8009488:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800948c:	4623      	mov	r3, r4
 800948e:	469a      	mov	sl, r3
 8009490:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009494:	b10a      	cbz	r2, 800949a <_vfiprintf_r+0xa2>
 8009496:	2a25      	cmp	r2, #37	; 0x25
 8009498:	d1f9      	bne.n	800948e <_vfiprintf_r+0x96>
 800949a:	ebba 0b04 	subs.w	fp, sl, r4
 800949e:	d00b      	beq.n	80094b8 <_vfiprintf_r+0xc0>
 80094a0:	465b      	mov	r3, fp
 80094a2:	4622      	mov	r2, r4
 80094a4:	4629      	mov	r1, r5
 80094a6:	4630      	mov	r0, r6
 80094a8:	f7ff ff94 	bl	80093d4 <__sfputs_r>
 80094ac:	3001      	adds	r0, #1
 80094ae:	f000 80aa 	beq.w	8009606 <_vfiprintf_r+0x20e>
 80094b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094b4:	445a      	add	r2, fp
 80094b6:	9209      	str	r2, [sp, #36]	; 0x24
 80094b8:	f89a 3000 	ldrb.w	r3, [sl]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f000 80a2 	beq.w	8009606 <_vfiprintf_r+0x20e>
 80094c2:	2300      	movs	r3, #0
 80094c4:	f04f 32ff 	mov.w	r2, #4294967295
 80094c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094cc:	f10a 0a01 	add.w	sl, sl, #1
 80094d0:	9304      	str	r3, [sp, #16]
 80094d2:	9307      	str	r3, [sp, #28]
 80094d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094d8:	931a      	str	r3, [sp, #104]	; 0x68
 80094da:	4654      	mov	r4, sl
 80094dc:	2205      	movs	r2, #5
 80094de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094e2:	4858      	ldr	r0, [pc, #352]	; (8009644 <_vfiprintf_r+0x24c>)
 80094e4:	f7fe ff9e 	bl	8008424 <memchr>
 80094e8:	9a04      	ldr	r2, [sp, #16]
 80094ea:	b9d8      	cbnz	r0, 8009524 <_vfiprintf_r+0x12c>
 80094ec:	06d1      	lsls	r1, r2, #27
 80094ee:	bf44      	itt	mi
 80094f0:	2320      	movmi	r3, #32
 80094f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094f6:	0713      	lsls	r3, r2, #28
 80094f8:	bf44      	itt	mi
 80094fa:	232b      	movmi	r3, #43	; 0x2b
 80094fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009500:	f89a 3000 	ldrb.w	r3, [sl]
 8009504:	2b2a      	cmp	r3, #42	; 0x2a
 8009506:	d015      	beq.n	8009534 <_vfiprintf_r+0x13c>
 8009508:	4654      	mov	r4, sl
 800950a:	2000      	movs	r0, #0
 800950c:	f04f 0c0a 	mov.w	ip, #10
 8009510:	9a07      	ldr	r2, [sp, #28]
 8009512:	4621      	mov	r1, r4
 8009514:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009518:	3b30      	subs	r3, #48	; 0x30
 800951a:	2b09      	cmp	r3, #9
 800951c:	d94e      	bls.n	80095bc <_vfiprintf_r+0x1c4>
 800951e:	b1b0      	cbz	r0, 800954e <_vfiprintf_r+0x156>
 8009520:	9207      	str	r2, [sp, #28]
 8009522:	e014      	b.n	800954e <_vfiprintf_r+0x156>
 8009524:	eba0 0308 	sub.w	r3, r0, r8
 8009528:	fa09 f303 	lsl.w	r3, r9, r3
 800952c:	4313      	orrs	r3, r2
 800952e:	46a2      	mov	sl, r4
 8009530:	9304      	str	r3, [sp, #16]
 8009532:	e7d2      	b.n	80094da <_vfiprintf_r+0xe2>
 8009534:	9b03      	ldr	r3, [sp, #12]
 8009536:	1d19      	adds	r1, r3, #4
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	9103      	str	r1, [sp, #12]
 800953c:	2b00      	cmp	r3, #0
 800953e:	bfbb      	ittet	lt
 8009540:	425b      	neglt	r3, r3
 8009542:	f042 0202 	orrlt.w	r2, r2, #2
 8009546:	9307      	strge	r3, [sp, #28]
 8009548:	9307      	strlt	r3, [sp, #28]
 800954a:	bfb8      	it	lt
 800954c:	9204      	strlt	r2, [sp, #16]
 800954e:	7823      	ldrb	r3, [r4, #0]
 8009550:	2b2e      	cmp	r3, #46	; 0x2e
 8009552:	d10c      	bne.n	800956e <_vfiprintf_r+0x176>
 8009554:	7863      	ldrb	r3, [r4, #1]
 8009556:	2b2a      	cmp	r3, #42	; 0x2a
 8009558:	d135      	bne.n	80095c6 <_vfiprintf_r+0x1ce>
 800955a:	9b03      	ldr	r3, [sp, #12]
 800955c:	3402      	adds	r4, #2
 800955e:	1d1a      	adds	r2, r3, #4
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	9203      	str	r2, [sp, #12]
 8009564:	2b00      	cmp	r3, #0
 8009566:	bfb8      	it	lt
 8009568:	f04f 33ff 	movlt.w	r3, #4294967295
 800956c:	9305      	str	r3, [sp, #20]
 800956e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009648 <_vfiprintf_r+0x250>
 8009572:	2203      	movs	r2, #3
 8009574:	4650      	mov	r0, sl
 8009576:	7821      	ldrb	r1, [r4, #0]
 8009578:	f7fe ff54 	bl	8008424 <memchr>
 800957c:	b140      	cbz	r0, 8009590 <_vfiprintf_r+0x198>
 800957e:	2340      	movs	r3, #64	; 0x40
 8009580:	eba0 000a 	sub.w	r0, r0, sl
 8009584:	fa03 f000 	lsl.w	r0, r3, r0
 8009588:	9b04      	ldr	r3, [sp, #16]
 800958a:	3401      	adds	r4, #1
 800958c:	4303      	orrs	r3, r0
 800958e:	9304      	str	r3, [sp, #16]
 8009590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009594:	2206      	movs	r2, #6
 8009596:	482d      	ldr	r0, [pc, #180]	; (800964c <_vfiprintf_r+0x254>)
 8009598:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800959c:	f7fe ff42 	bl	8008424 <memchr>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d03f      	beq.n	8009624 <_vfiprintf_r+0x22c>
 80095a4:	4b2a      	ldr	r3, [pc, #168]	; (8009650 <_vfiprintf_r+0x258>)
 80095a6:	bb1b      	cbnz	r3, 80095f0 <_vfiprintf_r+0x1f8>
 80095a8:	9b03      	ldr	r3, [sp, #12]
 80095aa:	3307      	adds	r3, #7
 80095ac:	f023 0307 	bic.w	r3, r3, #7
 80095b0:	3308      	adds	r3, #8
 80095b2:	9303      	str	r3, [sp, #12]
 80095b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b6:	443b      	add	r3, r7
 80095b8:	9309      	str	r3, [sp, #36]	; 0x24
 80095ba:	e767      	b.n	800948c <_vfiprintf_r+0x94>
 80095bc:	460c      	mov	r4, r1
 80095be:	2001      	movs	r0, #1
 80095c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80095c4:	e7a5      	b.n	8009512 <_vfiprintf_r+0x11a>
 80095c6:	2300      	movs	r3, #0
 80095c8:	f04f 0c0a 	mov.w	ip, #10
 80095cc:	4619      	mov	r1, r3
 80095ce:	3401      	adds	r4, #1
 80095d0:	9305      	str	r3, [sp, #20]
 80095d2:	4620      	mov	r0, r4
 80095d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095d8:	3a30      	subs	r2, #48	; 0x30
 80095da:	2a09      	cmp	r2, #9
 80095dc:	d903      	bls.n	80095e6 <_vfiprintf_r+0x1ee>
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d0c5      	beq.n	800956e <_vfiprintf_r+0x176>
 80095e2:	9105      	str	r1, [sp, #20]
 80095e4:	e7c3      	b.n	800956e <_vfiprintf_r+0x176>
 80095e6:	4604      	mov	r4, r0
 80095e8:	2301      	movs	r3, #1
 80095ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80095ee:	e7f0      	b.n	80095d2 <_vfiprintf_r+0x1da>
 80095f0:	ab03      	add	r3, sp, #12
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	462a      	mov	r2, r5
 80095f6:	4630      	mov	r0, r6
 80095f8:	4b16      	ldr	r3, [pc, #88]	; (8009654 <_vfiprintf_r+0x25c>)
 80095fa:	a904      	add	r1, sp, #16
 80095fc:	f7fc f892 	bl	8005724 <_printf_float>
 8009600:	4607      	mov	r7, r0
 8009602:	1c78      	adds	r0, r7, #1
 8009604:	d1d6      	bne.n	80095b4 <_vfiprintf_r+0x1bc>
 8009606:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009608:	07d9      	lsls	r1, r3, #31
 800960a:	d405      	bmi.n	8009618 <_vfiprintf_r+0x220>
 800960c:	89ab      	ldrh	r3, [r5, #12]
 800960e:	059a      	lsls	r2, r3, #22
 8009610:	d402      	bmi.n	8009618 <_vfiprintf_r+0x220>
 8009612:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009614:	f000 fa9d 	bl	8009b52 <__retarget_lock_release_recursive>
 8009618:	89ab      	ldrh	r3, [r5, #12]
 800961a:	065b      	lsls	r3, r3, #25
 800961c:	f53f af12 	bmi.w	8009444 <_vfiprintf_r+0x4c>
 8009620:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009622:	e711      	b.n	8009448 <_vfiprintf_r+0x50>
 8009624:	ab03      	add	r3, sp, #12
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	462a      	mov	r2, r5
 800962a:	4630      	mov	r0, r6
 800962c:	4b09      	ldr	r3, [pc, #36]	; (8009654 <_vfiprintf_r+0x25c>)
 800962e:	a904      	add	r1, sp, #16
 8009630:	f7fc fb14 	bl	8005c5c <_printf_i>
 8009634:	e7e4      	b.n	8009600 <_vfiprintf_r+0x208>
 8009636:	bf00      	nop
 8009638:	0801b12c 	.word	0x0801b12c
 800963c:	0801b14c 	.word	0x0801b14c
 8009640:	0801b10c 	.word	0x0801b10c
 8009644:	0801b0bc 	.word	0x0801b0bc
 8009648:	0801b0c2 	.word	0x0801b0c2
 800964c:	0801b0c6 	.word	0x0801b0c6
 8009650:	08005725 	.word	0x08005725
 8009654:	080093d5 	.word	0x080093d5

08009658 <__swbuf_r>:
 8009658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965a:	460e      	mov	r6, r1
 800965c:	4614      	mov	r4, r2
 800965e:	4605      	mov	r5, r0
 8009660:	b118      	cbz	r0, 800966a <__swbuf_r+0x12>
 8009662:	6983      	ldr	r3, [r0, #24]
 8009664:	b90b      	cbnz	r3, 800966a <__swbuf_r+0x12>
 8009666:	f000 f9d5 	bl	8009a14 <__sinit>
 800966a:	4b21      	ldr	r3, [pc, #132]	; (80096f0 <__swbuf_r+0x98>)
 800966c:	429c      	cmp	r4, r3
 800966e:	d12b      	bne.n	80096c8 <__swbuf_r+0x70>
 8009670:	686c      	ldr	r4, [r5, #4]
 8009672:	69a3      	ldr	r3, [r4, #24]
 8009674:	60a3      	str	r3, [r4, #8]
 8009676:	89a3      	ldrh	r3, [r4, #12]
 8009678:	071a      	lsls	r2, r3, #28
 800967a:	d52f      	bpl.n	80096dc <__swbuf_r+0x84>
 800967c:	6923      	ldr	r3, [r4, #16]
 800967e:	b36b      	cbz	r3, 80096dc <__swbuf_r+0x84>
 8009680:	6923      	ldr	r3, [r4, #16]
 8009682:	6820      	ldr	r0, [r4, #0]
 8009684:	b2f6      	uxtb	r6, r6
 8009686:	1ac0      	subs	r0, r0, r3
 8009688:	6963      	ldr	r3, [r4, #20]
 800968a:	4637      	mov	r7, r6
 800968c:	4283      	cmp	r3, r0
 800968e:	dc04      	bgt.n	800969a <__swbuf_r+0x42>
 8009690:	4621      	mov	r1, r4
 8009692:	4628      	mov	r0, r5
 8009694:	f000 f92a 	bl	80098ec <_fflush_r>
 8009698:	bb30      	cbnz	r0, 80096e8 <__swbuf_r+0x90>
 800969a:	68a3      	ldr	r3, [r4, #8]
 800969c:	3001      	adds	r0, #1
 800969e:	3b01      	subs	r3, #1
 80096a0:	60a3      	str	r3, [r4, #8]
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	1c5a      	adds	r2, r3, #1
 80096a6:	6022      	str	r2, [r4, #0]
 80096a8:	701e      	strb	r6, [r3, #0]
 80096aa:	6963      	ldr	r3, [r4, #20]
 80096ac:	4283      	cmp	r3, r0
 80096ae:	d004      	beq.n	80096ba <__swbuf_r+0x62>
 80096b0:	89a3      	ldrh	r3, [r4, #12]
 80096b2:	07db      	lsls	r3, r3, #31
 80096b4:	d506      	bpl.n	80096c4 <__swbuf_r+0x6c>
 80096b6:	2e0a      	cmp	r6, #10
 80096b8:	d104      	bne.n	80096c4 <__swbuf_r+0x6c>
 80096ba:	4621      	mov	r1, r4
 80096bc:	4628      	mov	r0, r5
 80096be:	f000 f915 	bl	80098ec <_fflush_r>
 80096c2:	b988      	cbnz	r0, 80096e8 <__swbuf_r+0x90>
 80096c4:	4638      	mov	r0, r7
 80096c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096c8:	4b0a      	ldr	r3, [pc, #40]	; (80096f4 <__swbuf_r+0x9c>)
 80096ca:	429c      	cmp	r4, r3
 80096cc:	d101      	bne.n	80096d2 <__swbuf_r+0x7a>
 80096ce:	68ac      	ldr	r4, [r5, #8]
 80096d0:	e7cf      	b.n	8009672 <__swbuf_r+0x1a>
 80096d2:	4b09      	ldr	r3, [pc, #36]	; (80096f8 <__swbuf_r+0xa0>)
 80096d4:	429c      	cmp	r4, r3
 80096d6:	bf08      	it	eq
 80096d8:	68ec      	ldreq	r4, [r5, #12]
 80096da:	e7ca      	b.n	8009672 <__swbuf_r+0x1a>
 80096dc:	4621      	mov	r1, r4
 80096de:	4628      	mov	r0, r5
 80096e0:	f000 f80c 	bl	80096fc <__swsetup_r>
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d0cb      	beq.n	8009680 <__swbuf_r+0x28>
 80096e8:	f04f 37ff 	mov.w	r7, #4294967295
 80096ec:	e7ea      	b.n	80096c4 <__swbuf_r+0x6c>
 80096ee:	bf00      	nop
 80096f0:	0801b12c 	.word	0x0801b12c
 80096f4:	0801b14c 	.word	0x0801b14c
 80096f8:	0801b10c 	.word	0x0801b10c

080096fc <__swsetup_r>:
 80096fc:	4b32      	ldr	r3, [pc, #200]	; (80097c8 <__swsetup_r+0xcc>)
 80096fe:	b570      	push	{r4, r5, r6, lr}
 8009700:	681d      	ldr	r5, [r3, #0]
 8009702:	4606      	mov	r6, r0
 8009704:	460c      	mov	r4, r1
 8009706:	b125      	cbz	r5, 8009712 <__swsetup_r+0x16>
 8009708:	69ab      	ldr	r3, [r5, #24]
 800970a:	b913      	cbnz	r3, 8009712 <__swsetup_r+0x16>
 800970c:	4628      	mov	r0, r5
 800970e:	f000 f981 	bl	8009a14 <__sinit>
 8009712:	4b2e      	ldr	r3, [pc, #184]	; (80097cc <__swsetup_r+0xd0>)
 8009714:	429c      	cmp	r4, r3
 8009716:	d10f      	bne.n	8009738 <__swsetup_r+0x3c>
 8009718:	686c      	ldr	r4, [r5, #4]
 800971a:	89a3      	ldrh	r3, [r4, #12]
 800971c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009720:	0719      	lsls	r1, r3, #28
 8009722:	d42c      	bmi.n	800977e <__swsetup_r+0x82>
 8009724:	06dd      	lsls	r5, r3, #27
 8009726:	d411      	bmi.n	800974c <__swsetup_r+0x50>
 8009728:	2309      	movs	r3, #9
 800972a:	6033      	str	r3, [r6, #0]
 800972c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009730:	f04f 30ff 	mov.w	r0, #4294967295
 8009734:	81a3      	strh	r3, [r4, #12]
 8009736:	e03e      	b.n	80097b6 <__swsetup_r+0xba>
 8009738:	4b25      	ldr	r3, [pc, #148]	; (80097d0 <__swsetup_r+0xd4>)
 800973a:	429c      	cmp	r4, r3
 800973c:	d101      	bne.n	8009742 <__swsetup_r+0x46>
 800973e:	68ac      	ldr	r4, [r5, #8]
 8009740:	e7eb      	b.n	800971a <__swsetup_r+0x1e>
 8009742:	4b24      	ldr	r3, [pc, #144]	; (80097d4 <__swsetup_r+0xd8>)
 8009744:	429c      	cmp	r4, r3
 8009746:	bf08      	it	eq
 8009748:	68ec      	ldreq	r4, [r5, #12]
 800974a:	e7e6      	b.n	800971a <__swsetup_r+0x1e>
 800974c:	0758      	lsls	r0, r3, #29
 800974e:	d512      	bpl.n	8009776 <__swsetup_r+0x7a>
 8009750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009752:	b141      	cbz	r1, 8009766 <__swsetup_r+0x6a>
 8009754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009758:	4299      	cmp	r1, r3
 800975a:	d002      	beq.n	8009762 <__swsetup_r+0x66>
 800975c:	4630      	mov	r0, r6
 800975e:	f7ff fb49 	bl	8008df4 <_free_r>
 8009762:	2300      	movs	r3, #0
 8009764:	6363      	str	r3, [r4, #52]	; 0x34
 8009766:	89a3      	ldrh	r3, [r4, #12]
 8009768:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800976c:	81a3      	strh	r3, [r4, #12]
 800976e:	2300      	movs	r3, #0
 8009770:	6063      	str	r3, [r4, #4]
 8009772:	6923      	ldr	r3, [r4, #16]
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	89a3      	ldrh	r3, [r4, #12]
 8009778:	f043 0308 	orr.w	r3, r3, #8
 800977c:	81a3      	strh	r3, [r4, #12]
 800977e:	6923      	ldr	r3, [r4, #16]
 8009780:	b94b      	cbnz	r3, 8009796 <__swsetup_r+0x9a>
 8009782:	89a3      	ldrh	r3, [r4, #12]
 8009784:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800978c:	d003      	beq.n	8009796 <__swsetup_r+0x9a>
 800978e:	4621      	mov	r1, r4
 8009790:	4630      	mov	r0, r6
 8009792:	f000 fa05 	bl	8009ba0 <__smakebuf_r>
 8009796:	89a0      	ldrh	r0, [r4, #12]
 8009798:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800979c:	f010 0301 	ands.w	r3, r0, #1
 80097a0:	d00a      	beq.n	80097b8 <__swsetup_r+0xbc>
 80097a2:	2300      	movs	r3, #0
 80097a4:	60a3      	str	r3, [r4, #8]
 80097a6:	6963      	ldr	r3, [r4, #20]
 80097a8:	425b      	negs	r3, r3
 80097aa:	61a3      	str	r3, [r4, #24]
 80097ac:	6923      	ldr	r3, [r4, #16]
 80097ae:	b943      	cbnz	r3, 80097c2 <__swsetup_r+0xc6>
 80097b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097b4:	d1ba      	bne.n	800972c <__swsetup_r+0x30>
 80097b6:	bd70      	pop	{r4, r5, r6, pc}
 80097b8:	0781      	lsls	r1, r0, #30
 80097ba:	bf58      	it	pl
 80097bc:	6963      	ldrpl	r3, [r4, #20]
 80097be:	60a3      	str	r3, [r4, #8]
 80097c0:	e7f4      	b.n	80097ac <__swsetup_r+0xb0>
 80097c2:	2000      	movs	r0, #0
 80097c4:	e7f7      	b.n	80097b6 <__swsetup_r+0xba>
 80097c6:	bf00      	nop
 80097c8:	2000014c 	.word	0x2000014c
 80097cc:	0801b12c 	.word	0x0801b12c
 80097d0:	0801b14c 	.word	0x0801b14c
 80097d4:	0801b10c 	.word	0x0801b10c

080097d8 <abort>:
 80097d8:	2006      	movs	r0, #6
 80097da:	b508      	push	{r3, lr}
 80097dc:	f000 fa50 	bl	8009c80 <raise>
 80097e0:	2001      	movs	r0, #1
 80097e2:	f7f9 fec7 	bl	8003574 <_exit>
	...

080097e8 <__sflush_r>:
 80097e8:	898a      	ldrh	r2, [r1, #12]
 80097ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ec:	4605      	mov	r5, r0
 80097ee:	0710      	lsls	r0, r2, #28
 80097f0:	460c      	mov	r4, r1
 80097f2:	d457      	bmi.n	80098a4 <__sflush_r+0xbc>
 80097f4:	684b      	ldr	r3, [r1, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	dc04      	bgt.n	8009804 <__sflush_r+0x1c>
 80097fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	dc01      	bgt.n	8009804 <__sflush_r+0x1c>
 8009800:	2000      	movs	r0, #0
 8009802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009806:	2e00      	cmp	r6, #0
 8009808:	d0fa      	beq.n	8009800 <__sflush_r+0x18>
 800980a:	2300      	movs	r3, #0
 800980c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009810:	682f      	ldr	r7, [r5, #0]
 8009812:	602b      	str	r3, [r5, #0]
 8009814:	d032      	beq.n	800987c <__sflush_r+0x94>
 8009816:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009818:	89a3      	ldrh	r3, [r4, #12]
 800981a:	075a      	lsls	r2, r3, #29
 800981c:	d505      	bpl.n	800982a <__sflush_r+0x42>
 800981e:	6863      	ldr	r3, [r4, #4]
 8009820:	1ac0      	subs	r0, r0, r3
 8009822:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009824:	b10b      	cbz	r3, 800982a <__sflush_r+0x42>
 8009826:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009828:	1ac0      	subs	r0, r0, r3
 800982a:	2300      	movs	r3, #0
 800982c:	4602      	mov	r2, r0
 800982e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009830:	4628      	mov	r0, r5
 8009832:	6a21      	ldr	r1, [r4, #32]
 8009834:	47b0      	blx	r6
 8009836:	1c43      	adds	r3, r0, #1
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	d106      	bne.n	800984a <__sflush_r+0x62>
 800983c:	6829      	ldr	r1, [r5, #0]
 800983e:	291d      	cmp	r1, #29
 8009840:	d82c      	bhi.n	800989c <__sflush_r+0xb4>
 8009842:	4a29      	ldr	r2, [pc, #164]	; (80098e8 <__sflush_r+0x100>)
 8009844:	40ca      	lsrs	r2, r1
 8009846:	07d6      	lsls	r6, r2, #31
 8009848:	d528      	bpl.n	800989c <__sflush_r+0xb4>
 800984a:	2200      	movs	r2, #0
 800984c:	6062      	str	r2, [r4, #4]
 800984e:	6922      	ldr	r2, [r4, #16]
 8009850:	04d9      	lsls	r1, r3, #19
 8009852:	6022      	str	r2, [r4, #0]
 8009854:	d504      	bpl.n	8009860 <__sflush_r+0x78>
 8009856:	1c42      	adds	r2, r0, #1
 8009858:	d101      	bne.n	800985e <__sflush_r+0x76>
 800985a:	682b      	ldr	r3, [r5, #0]
 800985c:	b903      	cbnz	r3, 8009860 <__sflush_r+0x78>
 800985e:	6560      	str	r0, [r4, #84]	; 0x54
 8009860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009862:	602f      	str	r7, [r5, #0]
 8009864:	2900      	cmp	r1, #0
 8009866:	d0cb      	beq.n	8009800 <__sflush_r+0x18>
 8009868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800986c:	4299      	cmp	r1, r3
 800986e:	d002      	beq.n	8009876 <__sflush_r+0x8e>
 8009870:	4628      	mov	r0, r5
 8009872:	f7ff fabf 	bl	8008df4 <_free_r>
 8009876:	2000      	movs	r0, #0
 8009878:	6360      	str	r0, [r4, #52]	; 0x34
 800987a:	e7c2      	b.n	8009802 <__sflush_r+0x1a>
 800987c:	6a21      	ldr	r1, [r4, #32]
 800987e:	2301      	movs	r3, #1
 8009880:	4628      	mov	r0, r5
 8009882:	47b0      	blx	r6
 8009884:	1c41      	adds	r1, r0, #1
 8009886:	d1c7      	bne.n	8009818 <__sflush_r+0x30>
 8009888:	682b      	ldr	r3, [r5, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d0c4      	beq.n	8009818 <__sflush_r+0x30>
 800988e:	2b1d      	cmp	r3, #29
 8009890:	d001      	beq.n	8009896 <__sflush_r+0xae>
 8009892:	2b16      	cmp	r3, #22
 8009894:	d101      	bne.n	800989a <__sflush_r+0xb2>
 8009896:	602f      	str	r7, [r5, #0]
 8009898:	e7b2      	b.n	8009800 <__sflush_r+0x18>
 800989a:	89a3      	ldrh	r3, [r4, #12]
 800989c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098a0:	81a3      	strh	r3, [r4, #12]
 80098a2:	e7ae      	b.n	8009802 <__sflush_r+0x1a>
 80098a4:	690f      	ldr	r7, [r1, #16]
 80098a6:	2f00      	cmp	r7, #0
 80098a8:	d0aa      	beq.n	8009800 <__sflush_r+0x18>
 80098aa:	0793      	lsls	r3, r2, #30
 80098ac:	bf18      	it	ne
 80098ae:	2300      	movne	r3, #0
 80098b0:	680e      	ldr	r6, [r1, #0]
 80098b2:	bf08      	it	eq
 80098b4:	694b      	ldreq	r3, [r1, #20]
 80098b6:	1bf6      	subs	r6, r6, r7
 80098b8:	600f      	str	r7, [r1, #0]
 80098ba:	608b      	str	r3, [r1, #8]
 80098bc:	2e00      	cmp	r6, #0
 80098be:	dd9f      	ble.n	8009800 <__sflush_r+0x18>
 80098c0:	4633      	mov	r3, r6
 80098c2:	463a      	mov	r2, r7
 80098c4:	4628      	mov	r0, r5
 80098c6:	6a21      	ldr	r1, [r4, #32]
 80098c8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80098cc:	47e0      	blx	ip
 80098ce:	2800      	cmp	r0, #0
 80098d0:	dc06      	bgt.n	80098e0 <__sflush_r+0xf8>
 80098d2:	89a3      	ldrh	r3, [r4, #12]
 80098d4:	f04f 30ff 	mov.w	r0, #4294967295
 80098d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098dc:	81a3      	strh	r3, [r4, #12]
 80098de:	e790      	b.n	8009802 <__sflush_r+0x1a>
 80098e0:	4407      	add	r7, r0
 80098e2:	1a36      	subs	r6, r6, r0
 80098e4:	e7ea      	b.n	80098bc <__sflush_r+0xd4>
 80098e6:	bf00      	nop
 80098e8:	20400001 	.word	0x20400001

080098ec <_fflush_r>:
 80098ec:	b538      	push	{r3, r4, r5, lr}
 80098ee:	690b      	ldr	r3, [r1, #16]
 80098f0:	4605      	mov	r5, r0
 80098f2:	460c      	mov	r4, r1
 80098f4:	b913      	cbnz	r3, 80098fc <_fflush_r+0x10>
 80098f6:	2500      	movs	r5, #0
 80098f8:	4628      	mov	r0, r5
 80098fa:	bd38      	pop	{r3, r4, r5, pc}
 80098fc:	b118      	cbz	r0, 8009906 <_fflush_r+0x1a>
 80098fe:	6983      	ldr	r3, [r0, #24]
 8009900:	b90b      	cbnz	r3, 8009906 <_fflush_r+0x1a>
 8009902:	f000 f887 	bl	8009a14 <__sinit>
 8009906:	4b14      	ldr	r3, [pc, #80]	; (8009958 <_fflush_r+0x6c>)
 8009908:	429c      	cmp	r4, r3
 800990a:	d11b      	bne.n	8009944 <_fflush_r+0x58>
 800990c:	686c      	ldr	r4, [r5, #4]
 800990e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0ef      	beq.n	80098f6 <_fflush_r+0xa>
 8009916:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009918:	07d0      	lsls	r0, r2, #31
 800991a:	d404      	bmi.n	8009926 <_fflush_r+0x3a>
 800991c:	0599      	lsls	r1, r3, #22
 800991e:	d402      	bmi.n	8009926 <_fflush_r+0x3a>
 8009920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009922:	f000 f915 	bl	8009b50 <__retarget_lock_acquire_recursive>
 8009926:	4628      	mov	r0, r5
 8009928:	4621      	mov	r1, r4
 800992a:	f7ff ff5d 	bl	80097e8 <__sflush_r>
 800992e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009930:	4605      	mov	r5, r0
 8009932:	07da      	lsls	r2, r3, #31
 8009934:	d4e0      	bmi.n	80098f8 <_fflush_r+0xc>
 8009936:	89a3      	ldrh	r3, [r4, #12]
 8009938:	059b      	lsls	r3, r3, #22
 800993a:	d4dd      	bmi.n	80098f8 <_fflush_r+0xc>
 800993c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800993e:	f000 f908 	bl	8009b52 <__retarget_lock_release_recursive>
 8009942:	e7d9      	b.n	80098f8 <_fflush_r+0xc>
 8009944:	4b05      	ldr	r3, [pc, #20]	; (800995c <_fflush_r+0x70>)
 8009946:	429c      	cmp	r4, r3
 8009948:	d101      	bne.n	800994e <_fflush_r+0x62>
 800994a:	68ac      	ldr	r4, [r5, #8]
 800994c:	e7df      	b.n	800990e <_fflush_r+0x22>
 800994e:	4b04      	ldr	r3, [pc, #16]	; (8009960 <_fflush_r+0x74>)
 8009950:	429c      	cmp	r4, r3
 8009952:	bf08      	it	eq
 8009954:	68ec      	ldreq	r4, [r5, #12]
 8009956:	e7da      	b.n	800990e <_fflush_r+0x22>
 8009958:	0801b12c 	.word	0x0801b12c
 800995c:	0801b14c 	.word	0x0801b14c
 8009960:	0801b10c 	.word	0x0801b10c

08009964 <std>:
 8009964:	2300      	movs	r3, #0
 8009966:	b510      	push	{r4, lr}
 8009968:	4604      	mov	r4, r0
 800996a:	e9c0 3300 	strd	r3, r3, [r0]
 800996e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009972:	6083      	str	r3, [r0, #8]
 8009974:	8181      	strh	r1, [r0, #12]
 8009976:	6643      	str	r3, [r0, #100]	; 0x64
 8009978:	81c2      	strh	r2, [r0, #14]
 800997a:	6183      	str	r3, [r0, #24]
 800997c:	4619      	mov	r1, r3
 800997e:	2208      	movs	r2, #8
 8009980:	305c      	adds	r0, #92	; 0x5c
 8009982:	f7fb fe29 	bl	80055d8 <memset>
 8009986:	4b05      	ldr	r3, [pc, #20]	; (800999c <std+0x38>)
 8009988:	6224      	str	r4, [r4, #32]
 800998a:	6263      	str	r3, [r4, #36]	; 0x24
 800998c:	4b04      	ldr	r3, [pc, #16]	; (80099a0 <std+0x3c>)
 800998e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009990:	4b04      	ldr	r3, [pc, #16]	; (80099a4 <std+0x40>)
 8009992:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009994:	4b04      	ldr	r3, [pc, #16]	; (80099a8 <std+0x44>)
 8009996:	6323      	str	r3, [r4, #48]	; 0x30
 8009998:	bd10      	pop	{r4, pc}
 800999a:	bf00      	nop
 800999c:	08009cb9 	.word	0x08009cb9
 80099a0:	08009cdb 	.word	0x08009cdb
 80099a4:	08009d13 	.word	0x08009d13
 80099a8:	08009d37 	.word	0x08009d37

080099ac <_cleanup_r>:
 80099ac:	4901      	ldr	r1, [pc, #4]	; (80099b4 <_cleanup_r+0x8>)
 80099ae:	f000 b8af 	b.w	8009b10 <_fwalk_reent>
 80099b2:	bf00      	nop
 80099b4:	080098ed 	.word	0x080098ed

080099b8 <__sfmoreglue>:
 80099b8:	2268      	movs	r2, #104	; 0x68
 80099ba:	b570      	push	{r4, r5, r6, lr}
 80099bc:	1e4d      	subs	r5, r1, #1
 80099be:	4355      	muls	r5, r2
 80099c0:	460e      	mov	r6, r1
 80099c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099c6:	f7ff fa7d 	bl	8008ec4 <_malloc_r>
 80099ca:	4604      	mov	r4, r0
 80099cc:	b140      	cbz	r0, 80099e0 <__sfmoreglue+0x28>
 80099ce:	2100      	movs	r1, #0
 80099d0:	e9c0 1600 	strd	r1, r6, [r0]
 80099d4:	300c      	adds	r0, #12
 80099d6:	60a0      	str	r0, [r4, #8]
 80099d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80099dc:	f7fb fdfc 	bl	80055d8 <memset>
 80099e0:	4620      	mov	r0, r4
 80099e2:	bd70      	pop	{r4, r5, r6, pc}

080099e4 <__sfp_lock_acquire>:
 80099e4:	4801      	ldr	r0, [pc, #4]	; (80099ec <__sfp_lock_acquire+0x8>)
 80099e6:	f000 b8b3 	b.w	8009b50 <__retarget_lock_acquire_recursive>
 80099ea:	bf00      	nop
 80099ec:	20001475 	.word	0x20001475

080099f0 <__sfp_lock_release>:
 80099f0:	4801      	ldr	r0, [pc, #4]	; (80099f8 <__sfp_lock_release+0x8>)
 80099f2:	f000 b8ae 	b.w	8009b52 <__retarget_lock_release_recursive>
 80099f6:	bf00      	nop
 80099f8:	20001475 	.word	0x20001475

080099fc <__sinit_lock_acquire>:
 80099fc:	4801      	ldr	r0, [pc, #4]	; (8009a04 <__sinit_lock_acquire+0x8>)
 80099fe:	f000 b8a7 	b.w	8009b50 <__retarget_lock_acquire_recursive>
 8009a02:	bf00      	nop
 8009a04:	20001476 	.word	0x20001476

08009a08 <__sinit_lock_release>:
 8009a08:	4801      	ldr	r0, [pc, #4]	; (8009a10 <__sinit_lock_release+0x8>)
 8009a0a:	f000 b8a2 	b.w	8009b52 <__retarget_lock_release_recursive>
 8009a0e:	bf00      	nop
 8009a10:	20001476 	.word	0x20001476

08009a14 <__sinit>:
 8009a14:	b510      	push	{r4, lr}
 8009a16:	4604      	mov	r4, r0
 8009a18:	f7ff fff0 	bl	80099fc <__sinit_lock_acquire>
 8009a1c:	69a3      	ldr	r3, [r4, #24]
 8009a1e:	b11b      	cbz	r3, 8009a28 <__sinit+0x14>
 8009a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a24:	f7ff bff0 	b.w	8009a08 <__sinit_lock_release>
 8009a28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a2c:	6523      	str	r3, [r4, #80]	; 0x50
 8009a2e:	4b13      	ldr	r3, [pc, #76]	; (8009a7c <__sinit+0x68>)
 8009a30:	4a13      	ldr	r2, [pc, #76]	; (8009a80 <__sinit+0x6c>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a36:	42a3      	cmp	r3, r4
 8009a38:	bf08      	it	eq
 8009a3a:	2301      	moveq	r3, #1
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	bf08      	it	eq
 8009a40:	61a3      	streq	r3, [r4, #24]
 8009a42:	f000 f81f 	bl	8009a84 <__sfp>
 8009a46:	6060      	str	r0, [r4, #4]
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f000 f81b 	bl	8009a84 <__sfp>
 8009a4e:	60a0      	str	r0, [r4, #8]
 8009a50:	4620      	mov	r0, r4
 8009a52:	f000 f817 	bl	8009a84 <__sfp>
 8009a56:	2200      	movs	r2, #0
 8009a58:	2104      	movs	r1, #4
 8009a5a:	60e0      	str	r0, [r4, #12]
 8009a5c:	6860      	ldr	r0, [r4, #4]
 8009a5e:	f7ff ff81 	bl	8009964 <std>
 8009a62:	2201      	movs	r2, #1
 8009a64:	2109      	movs	r1, #9
 8009a66:	68a0      	ldr	r0, [r4, #8]
 8009a68:	f7ff ff7c 	bl	8009964 <std>
 8009a6c:	2202      	movs	r2, #2
 8009a6e:	2112      	movs	r1, #18
 8009a70:	68e0      	ldr	r0, [r4, #12]
 8009a72:	f7ff ff77 	bl	8009964 <std>
 8009a76:	2301      	movs	r3, #1
 8009a78:	61a3      	str	r3, [r4, #24]
 8009a7a:	e7d1      	b.n	8009a20 <__sinit+0xc>
 8009a7c:	0801acc8 	.word	0x0801acc8
 8009a80:	080099ad 	.word	0x080099ad

08009a84 <__sfp>:
 8009a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a86:	4607      	mov	r7, r0
 8009a88:	f7ff ffac 	bl	80099e4 <__sfp_lock_acquire>
 8009a8c:	4b1e      	ldr	r3, [pc, #120]	; (8009b08 <__sfp+0x84>)
 8009a8e:	681e      	ldr	r6, [r3, #0]
 8009a90:	69b3      	ldr	r3, [r6, #24]
 8009a92:	b913      	cbnz	r3, 8009a9a <__sfp+0x16>
 8009a94:	4630      	mov	r0, r6
 8009a96:	f7ff ffbd 	bl	8009a14 <__sinit>
 8009a9a:	3648      	adds	r6, #72	; 0x48
 8009a9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	d503      	bpl.n	8009aac <__sfp+0x28>
 8009aa4:	6833      	ldr	r3, [r6, #0]
 8009aa6:	b30b      	cbz	r3, 8009aec <__sfp+0x68>
 8009aa8:	6836      	ldr	r6, [r6, #0]
 8009aaa:	e7f7      	b.n	8009a9c <__sfp+0x18>
 8009aac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ab0:	b9d5      	cbnz	r5, 8009ae8 <__sfp+0x64>
 8009ab2:	4b16      	ldr	r3, [pc, #88]	; (8009b0c <__sfp+0x88>)
 8009ab4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ab8:	60e3      	str	r3, [r4, #12]
 8009aba:	6665      	str	r5, [r4, #100]	; 0x64
 8009abc:	f000 f847 	bl	8009b4e <__retarget_lock_init_recursive>
 8009ac0:	f7ff ff96 	bl	80099f0 <__sfp_lock_release>
 8009ac4:	2208      	movs	r2, #8
 8009ac6:	4629      	mov	r1, r5
 8009ac8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009acc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ad0:	6025      	str	r5, [r4, #0]
 8009ad2:	61a5      	str	r5, [r4, #24]
 8009ad4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ad8:	f7fb fd7e 	bl	80055d8 <memset>
 8009adc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ae0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ae8:	3468      	adds	r4, #104	; 0x68
 8009aea:	e7d9      	b.n	8009aa0 <__sfp+0x1c>
 8009aec:	2104      	movs	r1, #4
 8009aee:	4638      	mov	r0, r7
 8009af0:	f7ff ff62 	bl	80099b8 <__sfmoreglue>
 8009af4:	4604      	mov	r4, r0
 8009af6:	6030      	str	r0, [r6, #0]
 8009af8:	2800      	cmp	r0, #0
 8009afa:	d1d5      	bne.n	8009aa8 <__sfp+0x24>
 8009afc:	f7ff ff78 	bl	80099f0 <__sfp_lock_release>
 8009b00:	230c      	movs	r3, #12
 8009b02:	603b      	str	r3, [r7, #0]
 8009b04:	e7ee      	b.n	8009ae4 <__sfp+0x60>
 8009b06:	bf00      	nop
 8009b08:	0801acc8 	.word	0x0801acc8
 8009b0c:	ffff0001 	.word	0xffff0001

08009b10 <_fwalk_reent>:
 8009b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b14:	4606      	mov	r6, r0
 8009b16:	4688      	mov	r8, r1
 8009b18:	2700      	movs	r7, #0
 8009b1a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b22:	f1b9 0901 	subs.w	r9, r9, #1
 8009b26:	d505      	bpl.n	8009b34 <_fwalk_reent+0x24>
 8009b28:	6824      	ldr	r4, [r4, #0]
 8009b2a:	2c00      	cmp	r4, #0
 8009b2c:	d1f7      	bne.n	8009b1e <_fwalk_reent+0xe>
 8009b2e:	4638      	mov	r0, r7
 8009b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b34:	89ab      	ldrh	r3, [r5, #12]
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d907      	bls.n	8009b4a <_fwalk_reent+0x3a>
 8009b3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	d003      	beq.n	8009b4a <_fwalk_reent+0x3a>
 8009b42:	4629      	mov	r1, r5
 8009b44:	4630      	mov	r0, r6
 8009b46:	47c0      	blx	r8
 8009b48:	4307      	orrs	r7, r0
 8009b4a:	3568      	adds	r5, #104	; 0x68
 8009b4c:	e7e9      	b.n	8009b22 <_fwalk_reent+0x12>

08009b4e <__retarget_lock_init_recursive>:
 8009b4e:	4770      	bx	lr

08009b50 <__retarget_lock_acquire_recursive>:
 8009b50:	4770      	bx	lr

08009b52 <__retarget_lock_release_recursive>:
 8009b52:	4770      	bx	lr

08009b54 <__swhatbuf_r>:
 8009b54:	b570      	push	{r4, r5, r6, lr}
 8009b56:	460e      	mov	r6, r1
 8009b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b5c:	4614      	mov	r4, r2
 8009b5e:	2900      	cmp	r1, #0
 8009b60:	461d      	mov	r5, r3
 8009b62:	b096      	sub	sp, #88	; 0x58
 8009b64:	da08      	bge.n	8009b78 <__swhatbuf_r+0x24>
 8009b66:	2200      	movs	r2, #0
 8009b68:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009b6c:	602a      	str	r2, [r5, #0]
 8009b6e:	061a      	lsls	r2, r3, #24
 8009b70:	d410      	bmi.n	8009b94 <__swhatbuf_r+0x40>
 8009b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b76:	e00e      	b.n	8009b96 <__swhatbuf_r+0x42>
 8009b78:	466a      	mov	r2, sp
 8009b7a:	f000 f903 	bl	8009d84 <_fstat_r>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	dbf1      	blt.n	8009b66 <__swhatbuf_r+0x12>
 8009b82:	9a01      	ldr	r2, [sp, #4]
 8009b84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b8c:	425a      	negs	r2, r3
 8009b8e:	415a      	adcs	r2, r3
 8009b90:	602a      	str	r2, [r5, #0]
 8009b92:	e7ee      	b.n	8009b72 <__swhatbuf_r+0x1e>
 8009b94:	2340      	movs	r3, #64	; 0x40
 8009b96:	2000      	movs	r0, #0
 8009b98:	6023      	str	r3, [r4, #0]
 8009b9a:	b016      	add	sp, #88	; 0x58
 8009b9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ba0 <__smakebuf_r>:
 8009ba0:	898b      	ldrh	r3, [r1, #12]
 8009ba2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ba4:	079d      	lsls	r5, r3, #30
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	460c      	mov	r4, r1
 8009baa:	d507      	bpl.n	8009bbc <__smakebuf_r+0x1c>
 8009bac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bb0:	6023      	str	r3, [r4, #0]
 8009bb2:	6123      	str	r3, [r4, #16]
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	6163      	str	r3, [r4, #20]
 8009bb8:	b002      	add	sp, #8
 8009bba:	bd70      	pop	{r4, r5, r6, pc}
 8009bbc:	466a      	mov	r2, sp
 8009bbe:	ab01      	add	r3, sp, #4
 8009bc0:	f7ff ffc8 	bl	8009b54 <__swhatbuf_r>
 8009bc4:	9900      	ldr	r1, [sp, #0]
 8009bc6:	4605      	mov	r5, r0
 8009bc8:	4630      	mov	r0, r6
 8009bca:	f7ff f97b 	bl	8008ec4 <_malloc_r>
 8009bce:	b948      	cbnz	r0, 8009be4 <__smakebuf_r+0x44>
 8009bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bd4:	059a      	lsls	r2, r3, #22
 8009bd6:	d4ef      	bmi.n	8009bb8 <__smakebuf_r+0x18>
 8009bd8:	f023 0303 	bic.w	r3, r3, #3
 8009bdc:	f043 0302 	orr.w	r3, r3, #2
 8009be0:	81a3      	strh	r3, [r4, #12]
 8009be2:	e7e3      	b.n	8009bac <__smakebuf_r+0xc>
 8009be4:	4b0d      	ldr	r3, [pc, #52]	; (8009c1c <__smakebuf_r+0x7c>)
 8009be6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009be8:	89a3      	ldrh	r3, [r4, #12]
 8009bea:	6020      	str	r0, [r4, #0]
 8009bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bf0:	81a3      	strh	r3, [r4, #12]
 8009bf2:	9b00      	ldr	r3, [sp, #0]
 8009bf4:	6120      	str	r0, [r4, #16]
 8009bf6:	6163      	str	r3, [r4, #20]
 8009bf8:	9b01      	ldr	r3, [sp, #4]
 8009bfa:	b15b      	cbz	r3, 8009c14 <__smakebuf_r+0x74>
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c02:	f000 f8d1 	bl	8009da8 <_isatty_r>
 8009c06:	b128      	cbz	r0, 8009c14 <__smakebuf_r+0x74>
 8009c08:	89a3      	ldrh	r3, [r4, #12]
 8009c0a:	f023 0303 	bic.w	r3, r3, #3
 8009c0e:	f043 0301 	orr.w	r3, r3, #1
 8009c12:	81a3      	strh	r3, [r4, #12]
 8009c14:	89a0      	ldrh	r0, [r4, #12]
 8009c16:	4305      	orrs	r5, r0
 8009c18:	81a5      	strh	r5, [r4, #12]
 8009c1a:	e7cd      	b.n	8009bb8 <__smakebuf_r+0x18>
 8009c1c:	080099ad 	.word	0x080099ad

08009c20 <_malloc_usable_size_r>:
 8009c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c24:	1f18      	subs	r0, r3, #4
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	bfbc      	itt	lt
 8009c2a:	580b      	ldrlt	r3, [r1, r0]
 8009c2c:	18c0      	addlt	r0, r0, r3
 8009c2e:	4770      	bx	lr

08009c30 <_raise_r>:
 8009c30:	291f      	cmp	r1, #31
 8009c32:	b538      	push	{r3, r4, r5, lr}
 8009c34:	4604      	mov	r4, r0
 8009c36:	460d      	mov	r5, r1
 8009c38:	d904      	bls.n	8009c44 <_raise_r+0x14>
 8009c3a:	2316      	movs	r3, #22
 8009c3c:	6003      	str	r3, [r0, #0]
 8009c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c46:	b112      	cbz	r2, 8009c4e <_raise_r+0x1e>
 8009c48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c4c:	b94b      	cbnz	r3, 8009c62 <_raise_r+0x32>
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f000 f830 	bl	8009cb4 <_getpid_r>
 8009c54:	462a      	mov	r2, r5
 8009c56:	4601      	mov	r1, r0
 8009c58:	4620      	mov	r0, r4
 8009c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c5e:	f000 b817 	b.w	8009c90 <_kill_r>
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d00a      	beq.n	8009c7c <_raise_r+0x4c>
 8009c66:	1c59      	adds	r1, r3, #1
 8009c68:	d103      	bne.n	8009c72 <_raise_r+0x42>
 8009c6a:	2316      	movs	r3, #22
 8009c6c:	6003      	str	r3, [r0, #0]
 8009c6e:	2001      	movs	r0, #1
 8009c70:	e7e7      	b.n	8009c42 <_raise_r+0x12>
 8009c72:	2400      	movs	r4, #0
 8009c74:	4628      	mov	r0, r5
 8009c76:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c7a:	4798      	blx	r3
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	e7e0      	b.n	8009c42 <_raise_r+0x12>

08009c80 <raise>:
 8009c80:	4b02      	ldr	r3, [pc, #8]	; (8009c8c <raise+0xc>)
 8009c82:	4601      	mov	r1, r0
 8009c84:	6818      	ldr	r0, [r3, #0]
 8009c86:	f7ff bfd3 	b.w	8009c30 <_raise_r>
 8009c8a:	bf00      	nop
 8009c8c:	2000014c 	.word	0x2000014c

08009c90 <_kill_r>:
 8009c90:	b538      	push	{r3, r4, r5, lr}
 8009c92:	2300      	movs	r3, #0
 8009c94:	4d06      	ldr	r5, [pc, #24]	; (8009cb0 <_kill_r+0x20>)
 8009c96:	4604      	mov	r4, r0
 8009c98:	4608      	mov	r0, r1
 8009c9a:	4611      	mov	r1, r2
 8009c9c:	602b      	str	r3, [r5, #0]
 8009c9e:	f7f9 fc5f 	bl	8003560 <_kill>
 8009ca2:	1c43      	adds	r3, r0, #1
 8009ca4:	d102      	bne.n	8009cac <_kill_r+0x1c>
 8009ca6:	682b      	ldr	r3, [r5, #0]
 8009ca8:	b103      	cbz	r3, 8009cac <_kill_r+0x1c>
 8009caa:	6023      	str	r3, [r4, #0]
 8009cac:	bd38      	pop	{r3, r4, r5, pc}
 8009cae:	bf00      	nop
 8009cb0:	20001470 	.word	0x20001470

08009cb4 <_getpid_r>:
 8009cb4:	f7f9 bc52 	b.w	800355c <_getpid>

08009cb8 <__sread>:
 8009cb8:	b510      	push	{r4, lr}
 8009cba:	460c      	mov	r4, r1
 8009cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cc0:	f000 f894 	bl	8009dec <_read_r>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	bfab      	itete	ge
 8009cc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009cca:	89a3      	ldrhlt	r3, [r4, #12]
 8009ccc:	181b      	addge	r3, r3, r0
 8009cce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cd2:	bfac      	ite	ge
 8009cd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cd6:	81a3      	strhlt	r3, [r4, #12]
 8009cd8:	bd10      	pop	{r4, pc}

08009cda <__swrite>:
 8009cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cde:	461f      	mov	r7, r3
 8009ce0:	898b      	ldrh	r3, [r1, #12]
 8009ce2:	4605      	mov	r5, r0
 8009ce4:	05db      	lsls	r3, r3, #23
 8009ce6:	460c      	mov	r4, r1
 8009ce8:	4616      	mov	r6, r2
 8009cea:	d505      	bpl.n	8009cf8 <__swrite+0x1e>
 8009cec:	2302      	movs	r3, #2
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf4:	f000 f868 	bl	8009dc8 <_lseek_r>
 8009cf8:	89a3      	ldrh	r3, [r4, #12]
 8009cfa:	4632      	mov	r2, r6
 8009cfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d00:	81a3      	strh	r3, [r4, #12]
 8009d02:	4628      	mov	r0, r5
 8009d04:	463b      	mov	r3, r7
 8009d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d0e:	f000 b817 	b.w	8009d40 <_write_r>

08009d12 <__sseek>:
 8009d12:	b510      	push	{r4, lr}
 8009d14:	460c      	mov	r4, r1
 8009d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d1a:	f000 f855 	bl	8009dc8 <_lseek_r>
 8009d1e:	1c43      	adds	r3, r0, #1
 8009d20:	89a3      	ldrh	r3, [r4, #12]
 8009d22:	bf15      	itete	ne
 8009d24:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d2e:	81a3      	strheq	r3, [r4, #12]
 8009d30:	bf18      	it	ne
 8009d32:	81a3      	strhne	r3, [r4, #12]
 8009d34:	bd10      	pop	{r4, pc}

08009d36 <__sclose>:
 8009d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d3a:	f000 b813 	b.w	8009d64 <_close_r>
	...

08009d40 <_write_r>:
 8009d40:	b538      	push	{r3, r4, r5, lr}
 8009d42:	4604      	mov	r4, r0
 8009d44:	4608      	mov	r0, r1
 8009d46:	4611      	mov	r1, r2
 8009d48:	2200      	movs	r2, #0
 8009d4a:	4d05      	ldr	r5, [pc, #20]	; (8009d60 <_write_r+0x20>)
 8009d4c:	602a      	str	r2, [r5, #0]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	f7f9 fc24 	bl	800359c <_write>
 8009d54:	1c43      	adds	r3, r0, #1
 8009d56:	d102      	bne.n	8009d5e <_write_r+0x1e>
 8009d58:	682b      	ldr	r3, [r5, #0]
 8009d5a:	b103      	cbz	r3, 8009d5e <_write_r+0x1e>
 8009d5c:	6023      	str	r3, [r4, #0]
 8009d5e:	bd38      	pop	{r3, r4, r5, pc}
 8009d60:	20001470 	.word	0x20001470

08009d64 <_close_r>:
 8009d64:	b538      	push	{r3, r4, r5, lr}
 8009d66:	2300      	movs	r3, #0
 8009d68:	4d05      	ldr	r5, [pc, #20]	; (8009d80 <_close_r+0x1c>)
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	4608      	mov	r0, r1
 8009d6e:	602b      	str	r3, [r5, #0]
 8009d70:	f7f9 fc22 	bl	80035b8 <_close>
 8009d74:	1c43      	adds	r3, r0, #1
 8009d76:	d102      	bne.n	8009d7e <_close_r+0x1a>
 8009d78:	682b      	ldr	r3, [r5, #0]
 8009d7a:	b103      	cbz	r3, 8009d7e <_close_r+0x1a>
 8009d7c:	6023      	str	r3, [r4, #0]
 8009d7e:	bd38      	pop	{r3, r4, r5, pc}
 8009d80:	20001470 	.word	0x20001470

08009d84 <_fstat_r>:
 8009d84:	b538      	push	{r3, r4, r5, lr}
 8009d86:	2300      	movs	r3, #0
 8009d88:	4d06      	ldr	r5, [pc, #24]	; (8009da4 <_fstat_r+0x20>)
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	4608      	mov	r0, r1
 8009d8e:	4611      	mov	r1, r2
 8009d90:	602b      	str	r3, [r5, #0]
 8009d92:	f7f9 fc15 	bl	80035c0 <_fstat>
 8009d96:	1c43      	adds	r3, r0, #1
 8009d98:	d102      	bne.n	8009da0 <_fstat_r+0x1c>
 8009d9a:	682b      	ldr	r3, [r5, #0]
 8009d9c:	b103      	cbz	r3, 8009da0 <_fstat_r+0x1c>
 8009d9e:	6023      	str	r3, [r4, #0]
 8009da0:	bd38      	pop	{r3, r4, r5, pc}
 8009da2:	bf00      	nop
 8009da4:	20001470 	.word	0x20001470

08009da8 <_isatty_r>:
 8009da8:	b538      	push	{r3, r4, r5, lr}
 8009daa:	2300      	movs	r3, #0
 8009dac:	4d05      	ldr	r5, [pc, #20]	; (8009dc4 <_isatty_r+0x1c>)
 8009dae:	4604      	mov	r4, r0
 8009db0:	4608      	mov	r0, r1
 8009db2:	602b      	str	r3, [r5, #0]
 8009db4:	f7f9 fc0a 	bl	80035cc <_isatty>
 8009db8:	1c43      	adds	r3, r0, #1
 8009dba:	d102      	bne.n	8009dc2 <_isatty_r+0x1a>
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	b103      	cbz	r3, 8009dc2 <_isatty_r+0x1a>
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	bd38      	pop	{r3, r4, r5, pc}
 8009dc4:	20001470 	.word	0x20001470

08009dc8 <_lseek_r>:
 8009dc8:	b538      	push	{r3, r4, r5, lr}
 8009dca:	4604      	mov	r4, r0
 8009dcc:	4608      	mov	r0, r1
 8009dce:	4611      	mov	r1, r2
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	4d05      	ldr	r5, [pc, #20]	; (8009de8 <_lseek_r+0x20>)
 8009dd4:	602a      	str	r2, [r5, #0]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	f7f9 fbfa 	bl	80035d0 <_lseek>
 8009ddc:	1c43      	adds	r3, r0, #1
 8009dde:	d102      	bne.n	8009de6 <_lseek_r+0x1e>
 8009de0:	682b      	ldr	r3, [r5, #0]
 8009de2:	b103      	cbz	r3, 8009de6 <_lseek_r+0x1e>
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	bd38      	pop	{r3, r4, r5, pc}
 8009de8:	20001470 	.word	0x20001470

08009dec <_read_r>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	4604      	mov	r4, r0
 8009df0:	4608      	mov	r0, r1
 8009df2:	4611      	mov	r1, r2
 8009df4:	2200      	movs	r2, #0
 8009df6:	4d05      	ldr	r5, [pc, #20]	; (8009e0c <_read_r+0x20>)
 8009df8:	602a      	str	r2, [r5, #0]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	f7f9 fbc0 	bl	8003580 <_read>
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d102      	bne.n	8009e0a <_read_r+0x1e>
 8009e04:	682b      	ldr	r3, [r5, #0]
 8009e06:	b103      	cbz	r3, 8009e0a <_read_r+0x1e>
 8009e08:	6023      	str	r3, [r4, #0]
 8009e0a:	bd38      	pop	{r3, r4, r5, pc}
 8009e0c:	20001470 	.word	0x20001470

08009e10 <floor>:
 8009e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e14:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8009e18:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8009e1c:	2e13      	cmp	r6, #19
 8009e1e:	4602      	mov	r2, r0
 8009e20:	460b      	mov	r3, r1
 8009e22:	4607      	mov	r7, r0
 8009e24:	460c      	mov	r4, r1
 8009e26:	4605      	mov	r5, r0
 8009e28:	dc33      	bgt.n	8009e92 <floor+0x82>
 8009e2a:	2e00      	cmp	r6, #0
 8009e2c:	da14      	bge.n	8009e58 <floor+0x48>
 8009e2e:	a334      	add	r3, pc, #208	; (adr r3, 8009f00 <floor+0xf0>)
 8009e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e34:	f7f6 fa4e 	bl	80002d4 <__adddf3>
 8009e38:	2200      	movs	r2, #0
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	f7f6 fe90 	bl	8000b60 <__aeabi_dcmpgt>
 8009e40:	b138      	cbz	r0, 8009e52 <floor+0x42>
 8009e42:	2c00      	cmp	r4, #0
 8009e44:	da58      	bge.n	8009ef8 <floor+0xe8>
 8009e46:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009e4a:	431d      	orrs	r5, r3
 8009e4c:	d001      	beq.n	8009e52 <floor+0x42>
 8009e4e:	2500      	movs	r5, #0
 8009e50:	4c2d      	ldr	r4, [pc, #180]	; (8009f08 <floor+0xf8>)
 8009e52:	4623      	mov	r3, r4
 8009e54:	462f      	mov	r7, r5
 8009e56:	e025      	b.n	8009ea4 <floor+0x94>
 8009e58:	4a2c      	ldr	r2, [pc, #176]	; (8009f0c <floor+0xfc>)
 8009e5a:	fa42 f806 	asr.w	r8, r2, r6
 8009e5e:	ea01 0208 	and.w	r2, r1, r8
 8009e62:	4302      	orrs	r2, r0
 8009e64:	d01e      	beq.n	8009ea4 <floor+0x94>
 8009e66:	a326      	add	r3, pc, #152	; (adr r3, 8009f00 <floor+0xf0>)
 8009e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6c:	f7f6 fa32 	bl	80002d4 <__adddf3>
 8009e70:	2200      	movs	r2, #0
 8009e72:	2300      	movs	r3, #0
 8009e74:	f7f6 fe74 	bl	8000b60 <__aeabi_dcmpgt>
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	d0ea      	beq.n	8009e52 <floor+0x42>
 8009e7c:	2c00      	cmp	r4, #0
 8009e7e:	bfbe      	ittt	lt
 8009e80:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009e84:	fa43 f606 	asrlt.w	r6, r3, r6
 8009e88:	19a4      	addlt	r4, r4, r6
 8009e8a:	2500      	movs	r5, #0
 8009e8c:	ea24 0408 	bic.w	r4, r4, r8
 8009e90:	e7df      	b.n	8009e52 <floor+0x42>
 8009e92:	2e33      	cmp	r6, #51	; 0x33
 8009e94:	dd0a      	ble.n	8009eac <floor+0x9c>
 8009e96:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009e9a:	d103      	bne.n	8009ea4 <floor+0x94>
 8009e9c:	f7f6 fa1a 	bl	80002d4 <__adddf3>
 8009ea0:	4607      	mov	r7, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4638      	mov	r0, r7
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eac:	f04f 32ff 	mov.w	r2, #4294967295
 8009eb0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8009eb4:	fa22 f808 	lsr.w	r8, r2, r8
 8009eb8:	ea18 0f00 	tst.w	r8, r0
 8009ebc:	d0f2      	beq.n	8009ea4 <floor+0x94>
 8009ebe:	a310      	add	r3, pc, #64	; (adr r3, 8009f00 <floor+0xf0>)
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	f7f6 fa06 	bl	80002d4 <__adddf3>
 8009ec8:	2200      	movs	r2, #0
 8009eca:	2300      	movs	r3, #0
 8009ecc:	f7f6 fe48 	bl	8000b60 <__aeabi_dcmpgt>
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	d0be      	beq.n	8009e52 <floor+0x42>
 8009ed4:	2c00      	cmp	r4, #0
 8009ed6:	da02      	bge.n	8009ede <floor+0xce>
 8009ed8:	2e14      	cmp	r6, #20
 8009eda:	d103      	bne.n	8009ee4 <floor+0xd4>
 8009edc:	3401      	adds	r4, #1
 8009ede:	ea25 0508 	bic.w	r5, r5, r8
 8009ee2:	e7b6      	b.n	8009e52 <floor+0x42>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009eea:	fa03 f606 	lsl.w	r6, r3, r6
 8009eee:	4435      	add	r5, r6
 8009ef0:	42bd      	cmp	r5, r7
 8009ef2:	bf38      	it	cc
 8009ef4:	18e4      	addcc	r4, r4, r3
 8009ef6:	e7f2      	b.n	8009ede <floor+0xce>
 8009ef8:	2500      	movs	r5, #0
 8009efa:	462c      	mov	r4, r5
 8009efc:	e7a9      	b.n	8009e52 <floor+0x42>
 8009efe:	bf00      	nop
 8009f00:	8800759c 	.word	0x8800759c
 8009f04:	7e37e43c 	.word	0x7e37e43c
 8009f08:	bff00000 	.word	0xbff00000
 8009f0c:	000fffff 	.word	0x000fffff

08009f10 <exp>:
 8009f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f12:	4606      	mov	r6, r0
 8009f14:	460f      	mov	r7, r1
 8009f16:	f000 f837 	bl	8009f88 <__ieee754_exp>
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	460d      	mov	r5, r1
 8009f1e:	4630      	mov	r0, r6
 8009f20:	4639      	mov	r1, r7
 8009f22:	f000 f9cb 	bl	800a2bc <finite>
 8009f26:	b168      	cbz	r0, 8009f44 <exp+0x34>
 8009f28:	a311      	add	r3, pc, #68	; (adr r3, 8009f70 <exp+0x60>)
 8009f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2e:	4630      	mov	r0, r6
 8009f30:	4639      	mov	r1, r7
 8009f32:	f7f6 fe15 	bl	8000b60 <__aeabi_dcmpgt>
 8009f36:	b140      	cbz	r0, 8009f4a <exp+0x3a>
 8009f38:	f7fb fb0a 	bl	8005550 <__errno>
 8009f3c:	2322      	movs	r3, #34	; 0x22
 8009f3e:	2400      	movs	r4, #0
 8009f40:	4d0f      	ldr	r5, [pc, #60]	; (8009f80 <exp+0x70>)
 8009f42:	6003      	str	r3, [r0, #0]
 8009f44:	4620      	mov	r0, r4
 8009f46:	4629      	mov	r1, r5
 8009f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	a30a      	add	r3, pc, #40	; (adr r3, 8009f78 <exp+0x68>)
 8009f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f52:	4639      	mov	r1, r7
 8009f54:	f7f6 fde6 	bl	8000b24 <__aeabi_dcmplt>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d0f3      	beq.n	8009f44 <exp+0x34>
 8009f5c:	f7fb faf8 	bl	8005550 <__errno>
 8009f60:	2322      	movs	r3, #34	; 0x22
 8009f62:	2400      	movs	r4, #0
 8009f64:	2500      	movs	r5, #0
 8009f66:	6003      	str	r3, [r0, #0]
 8009f68:	e7ec      	b.n	8009f44 <exp+0x34>
 8009f6a:	bf00      	nop
 8009f6c:	f3af 8000 	nop.w
 8009f70:	fefa39ef 	.word	0xfefa39ef
 8009f74:	40862e42 	.word	0x40862e42
 8009f78:	d52d3051 	.word	0xd52d3051
 8009f7c:	c0874910 	.word	0xc0874910
 8009f80:	7ff00000 	.word	0x7ff00000
 8009f84:	00000000 	.word	0x00000000

08009f88 <__ieee754_exp>:
 8009f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f8c:	4fac      	ldr	r7, [pc, #688]	; (800a240 <__ieee754_exp+0x2b8>)
 8009f8e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f92:	42bb      	cmp	r3, r7
 8009f94:	4605      	mov	r5, r0
 8009f96:	460c      	mov	r4, r1
 8009f98:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8009f9c:	d933      	bls.n	800a006 <__ieee754_exp+0x7e>
 8009f9e:	4fa9      	ldr	r7, [pc, #676]	; (800a244 <__ieee754_exp+0x2bc>)
 8009fa0:	42bb      	cmp	r3, r7
 8009fa2:	d913      	bls.n	8009fcc <__ieee754_exp+0x44>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009faa:	4313      	orrs	r3, r2
 8009fac:	d006      	beq.n	8009fbc <__ieee754_exp+0x34>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	f7f6 f98f 	bl	80002d4 <__adddf3>
 8009fb6:	4605      	mov	r5, r0
 8009fb8:	460c      	mov	r4, r1
 8009fba:	e002      	b.n	8009fc2 <__ieee754_exp+0x3a>
 8009fbc:	b10e      	cbz	r6, 8009fc2 <__ieee754_exp+0x3a>
 8009fbe:	2500      	movs	r5, #0
 8009fc0:	462c      	mov	r4, r5
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	4621      	mov	r1, r4
 8009fc6:	b004      	add	sp, #16
 8009fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fcc:	a386      	add	r3, pc, #536	; (adr r3, 800a1e8 <__ieee754_exp+0x260>)
 8009fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd2:	f7f6 fdc5 	bl	8000b60 <__aeabi_dcmpgt>
 8009fd6:	4607      	mov	r7, r0
 8009fd8:	b128      	cbz	r0, 8009fe6 <__ieee754_exp+0x5e>
 8009fda:	2000      	movs	r0, #0
 8009fdc:	b004      	add	sp, #16
 8009fde:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe2:	f000 b966 	b.w	800a2b2 <__math_oflow>
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	a381      	add	r3, pc, #516	; (adr r3, 800a1f0 <__ieee754_exp+0x268>)
 8009fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fee:	4621      	mov	r1, r4
 8009ff0:	f7f6 fd98 	bl	8000b24 <__aeabi_dcmplt>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	f000 8085 	beq.w	800a104 <__ieee754_exp+0x17c>
 8009ffa:	4638      	mov	r0, r7
 8009ffc:	b004      	add	sp, #16
 8009ffe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a002:	f000 b951 	b.w	800a2a8 <__math_uflow>
 800a006:	4a90      	ldr	r2, [pc, #576]	; (800a248 <__ieee754_exp+0x2c0>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	f240 80a7 	bls.w	800a15c <__ieee754_exp+0x1d4>
 800a00e:	4a8f      	ldr	r2, [pc, #572]	; (800a24c <__ieee754_exp+0x2c4>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d877      	bhi.n	800a104 <__ieee754_exp+0x17c>
 800a014:	4b8e      	ldr	r3, [pc, #568]	; (800a250 <__ieee754_exp+0x2c8>)
 800a016:	00f4      	lsls	r4, r6, #3
 800a018:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a020:	f7f6 f956 	bl	80002d0 <__aeabi_dsub>
 800a024:	4680      	mov	r8, r0
 800a026:	4689      	mov	r9, r1
 800a028:	4b8a      	ldr	r3, [pc, #552]	; (800a254 <__ieee754_exp+0x2cc>)
 800a02a:	f1c6 0a01 	rsb	sl, r6, #1
 800a02e:	4423      	add	r3, r4
 800a030:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a034:	e9cd 3400 	strd	r3, r4, [sp]
 800a038:	ebaa 0a06 	sub.w	sl, sl, r6
 800a03c:	4640      	mov	r0, r8
 800a03e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a042:	4649      	mov	r1, r9
 800a044:	f7f6 f944 	bl	80002d0 <__aeabi_dsub>
 800a048:	4605      	mov	r5, r0
 800a04a:	460c      	mov	r4, r1
 800a04c:	462a      	mov	r2, r5
 800a04e:	4623      	mov	r3, r4
 800a050:	4628      	mov	r0, r5
 800a052:	4621      	mov	r1, r4
 800a054:	f7f6 faf4 	bl	8000640 <__aeabi_dmul>
 800a058:	a367      	add	r3, pc, #412	; (adr r3, 800a1f8 <__ieee754_exp+0x270>)
 800a05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05e:	4606      	mov	r6, r0
 800a060:	460f      	mov	r7, r1
 800a062:	f7f6 faed 	bl	8000640 <__aeabi_dmul>
 800a066:	a366      	add	r3, pc, #408	; (adr r3, 800a200 <__ieee754_exp+0x278>)
 800a068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06c:	f7f6 f930 	bl	80002d0 <__aeabi_dsub>
 800a070:	4632      	mov	r2, r6
 800a072:	463b      	mov	r3, r7
 800a074:	f7f6 fae4 	bl	8000640 <__aeabi_dmul>
 800a078:	a363      	add	r3, pc, #396	; (adr r3, 800a208 <__ieee754_exp+0x280>)
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	f7f6 f929 	bl	80002d4 <__adddf3>
 800a082:	4632      	mov	r2, r6
 800a084:	463b      	mov	r3, r7
 800a086:	f7f6 fadb 	bl	8000640 <__aeabi_dmul>
 800a08a:	a361      	add	r3, pc, #388	; (adr r3, 800a210 <__ieee754_exp+0x288>)
 800a08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a090:	f7f6 f91e 	bl	80002d0 <__aeabi_dsub>
 800a094:	4632      	mov	r2, r6
 800a096:	463b      	mov	r3, r7
 800a098:	f7f6 fad2 	bl	8000640 <__aeabi_dmul>
 800a09c:	a35e      	add	r3, pc, #376	; (adr r3, 800a218 <__ieee754_exp+0x290>)
 800a09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a2:	f7f6 f917 	bl	80002d4 <__adddf3>
 800a0a6:	4632      	mov	r2, r6
 800a0a8:	463b      	mov	r3, r7
 800a0aa:	f7f6 fac9 	bl	8000640 <__aeabi_dmul>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	4621      	mov	r1, r4
 800a0b6:	f7f6 f90b 	bl	80002d0 <__aeabi_dsub>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	460b      	mov	r3, r1
 800a0be:	4606      	mov	r6, r0
 800a0c0:	460f      	mov	r7, r1
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	f7f6 fabb 	bl	8000640 <__aeabi_dmul>
 800a0ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0ce:	f1ba 0f00 	cmp.w	sl, #0
 800a0d2:	d15a      	bne.n	800a18a <__ieee754_exp+0x202>
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a0da:	4630      	mov	r0, r6
 800a0dc:	4639      	mov	r1, r7
 800a0de:	f7f6 f8f7 	bl	80002d0 <__aeabi_dsub>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0ea:	f7f6 fbd3 	bl	8000894 <__aeabi_ddiv>
 800a0ee:	462a      	mov	r2, r5
 800a0f0:	4623      	mov	r3, r4
 800a0f2:	f7f6 f8ed 	bl	80002d0 <__aeabi_dsub>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	4956      	ldr	r1, [pc, #344]	; (800a258 <__ieee754_exp+0x2d0>)
 800a0fe:	f7f6 f8e7 	bl	80002d0 <__aeabi_dsub>
 800a102:	e758      	b.n	8009fb6 <__ieee754_exp+0x2e>
 800a104:	4855      	ldr	r0, [pc, #340]	; (800a25c <__ieee754_exp+0x2d4>)
 800a106:	a346      	add	r3, pc, #280	; (adr r3, 800a220 <__ieee754_exp+0x298>)
 800a108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10c:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800a110:	4621      	mov	r1, r4
 800a112:	4628      	mov	r0, r5
 800a114:	f7f6 fa94 	bl	8000640 <__aeabi_dmul>
 800a118:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a11c:	f7f6 f8da 	bl	80002d4 <__adddf3>
 800a120:	f7f6 fd3e 	bl	8000ba0 <__aeabi_d2iz>
 800a124:	4682      	mov	sl, r0
 800a126:	f7f6 fa21 	bl	800056c <__aeabi_i2d>
 800a12a:	a33f      	add	r3, pc, #252	; (adr r3, 800a228 <__ieee754_exp+0x2a0>)
 800a12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a130:	4606      	mov	r6, r0
 800a132:	460f      	mov	r7, r1
 800a134:	f7f6 fa84 	bl	8000640 <__aeabi_dmul>
 800a138:	4602      	mov	r2, r0
 800a13a:	460b      	mov	r3, r1
 800a13c:	4628      	mov	r0, r5
 800a13e:	4621      	mov	r1, r4
 800a140:	f7f6 f8c6 	bl	80002d0 <__aeabi_dsub>
 800a144:	a33a      	add	r3, pc, #232	; (adr r3, 800a230 <__ieee754_exp+0x2a8>)
 800a146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14a:	4680      	mov	r8, r0
 800a14c:	4689      	mov	r9, r1
 800a14e:	4630      	mov	r0, r6
 800a150:	4639      	mov	r1, r7
 800a152:	f7f6 fa75 	bl	8000640 <__aeabi_dmul>
 800a156:	e9cd 0100 	strd	r0, r1, [sp]
 800a15a:	e76f      	b.n	800a03c <__ieee754_exp+0xb4>
 800a15c:	4a40      	ldr	r2, [pc, #256]	; (800a260 <__ieee754_exp+0x2d8>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d80e      	bhi.n	800a180 <__ieee754_exp+0x1f8>
 800a162:	a335      	add	r3, pc, #212	; (adr r3, 800a238 <__ieee754_exp+0x2b0>)
 800a164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a168:	f7f6 f8b4 	bl	80002d4 <__adddf3>
 800a16c:	2200      	movs	r2, #0
 800a16e:	4b3a      	ldr	r3, [pc, #232]	; (800a258 <__ieee754_exp+0x2d0>)
 800a170:	f7f6 fcf6 	bl	8000b60 <__aeabi_dcmpgt>
 800a174:	b138      	cbz	r0, 800a186 <__ieee754_exp+0x1fe>
 800a176:	2200      	movs	r2, #0
 800a178:	4628      	mov	r0, r5
 800a17a:	4621      	mov	r1, r4
 800a17c:	4b36      	ldr	r3, [pc, #216]	; (800a258 <__ieee754_exp+0x2d0>)
 800a17e:	e718      	b.n	8009fb2 <__ieee754_exp+0x2a>
 800a180:	f04f 0a00 	mov.w	sl, #0
 800a184:	e762      	b.n	800a04c <__ieee754_exp+0xc4>
 800a186:	4682      	mov	sl, r0
 800a188:	e760      	b.n	800a04c <__ieee754_exp+0xc4>
 800a18a:	4632      	mov	r2, r6
 800a18c:	463b      	mov	r3, r7
 800a18e:	2000      	movs	r0, #0
 800a190:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a194:	f7f6 f89c 	bl	80002d0 <__aeabi_dsub>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1a0:	f7f6 fb78 	bl	8000894 <__aeabi_ddiv>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1ac:	f7f6 f890 	bl	80002d0 <__aeabi_dsub>
 800a1b0:	4642      	mov	r2, r8
 800a1b2:	464b      	mov	r3, r9
 800a1b4:	f7f6 f88c 	bl	80002d0 <__aeabi_dsub>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	2000      	movs	r0, #0
 800a1be:	4926      	ldr	r1, [pc, #152]	; (800a258 <__ieee754_exp+0x2d0>)
 800a1c0:	f7f6 f886 	bl	80002d0 <__aeabi_dsub>
 800a1c4:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800a1c8:	4592      	cmp	sl, r2
 800a1ca:	db02      	blt.n	800a1d2 <__ieee754_exp+0x24a>
 800a1cc:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800a1d0:	e6f1      	b.n	8009fb6 <__ieee754_exp+0x2e>
 800a1d2:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800a1dc:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800a1e0:	f7f6 fa2e 	bl	8000640 <__aeabi_dmul>
 800a1e4:	e6e7      	b.n	8009fb6 <__ieee754_exp+0x2e>
 800a1e6:	bf00      	nop
 800a1e8:	fefa39ef 	.word	0xfefa39ef
 800a1ec:	40862e42 	.word	0x40862e42
 800a1f0:	d52d3051 	.word	0xd52d3051
 800a1f4:	c0874910 	.word	0xc0874910
 800a1f8:	72bea4d0 	.word	0x72bea4d0
 800a1fc:	3e663769 	.word	0x3e663769
 800a200:	c5d26bf1 	.word	0xc5d26bf1
 800a204:	3ebbbd41 	.word	0x3ebbbd41
 800a208:	af25de2c 	.word	0xaf25de2c
 800a20c:	3f11566a 	.word	0x3f11566a
 800a210:	16bebd93 	.word	0x16bebd93
 800a214:	3f66c16c 	.word	0x3f66c16c
 800a218:	5555553e 	.word	0x5555553e
 800a21c:	3fc55555 	.word	0x3fc55555
 800a220:	652b82fe 	.word	0x652b82fe
 800a224:	3ff71547 	.word	0x3ff71547
 800a228:	fee00000 	.word	0xfee00000
 800a22c:	3fe62e42 	.word	0x3fe62e42
 800a230:	35793c76 	.word	0x35793c76
 800a234:	3dea39ef 	.word	0x3dea39ef
 800a238:	8800759c 	.word	0x8800759c
 800a23c:	7e37e43c 	.word	0x7e37e43c
 800a240:	40862e41 	.word	0x40862e41
 800a244:	7fefffff 	.word	0x7fefffff
 800a248:	3fd62e42 	.word	0x3fd62e42
 800a24c:	3ff0a2b1 	.word	0x3ff0a2b1
 800a250:	0801b180 	.word	0x0801b180
 800a254:	0801b190 	.word	0x0801b190
 800a258:	3ff00000 	.word	0x3ff00000
 800a25c:	0801b170 	.word	0x0801b170
 800a260:	3defffff 	.word	0x3defffff

0800a264 <with_errno>:
 800a264:	b570      	push	{r4, r5, r6, lr}
 800a266:	4604      	mov	r4, r0
 800a268:	460d      	mov	r5, r1
 800a26a:	4616      	mov	r6, r2
 800a26c:	f7fb f970 	bl	8005550 <__errno>
 800a270:	4629      	mov	r1, r5
 800a272:	6006      	str	r6, [r0, #0]
 800a274:	4620      	mov	r0, r4
 800a276:	bd70      	pop	{r4, r5, r6, pc}

0800a278 <xflow>:
 800a278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a27a:	4615      	mov	r5, r2
 800a27c:	461c      	mov	r4, r3
 800a27e:	b180      	cbz	r0, 800a2a2 <xflow+0x2a>
 800a280:	4610      	mov	r0, r2
 800a282:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a286:	e9cd 0100 	strd	r0, r1, [sp]
 800a28a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a28e:	4628      	mov	r0, r5
 800a290:	4621      	mov	r1, r4
 800a292:	f7f6 f9d5 	bl	8000640 <__aeabi_dmul>
 800a296:	2222      	movs	r2, #34	; 0x22
 800a298:	b003      	add	sp, #12
 800a29a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a29e:	f7ff bfe1 	b.w	800a264 <with_errno>
 800a2a2:	4610      	mov	r0, r2
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	e7ee      	b.n	800a286 <xflow+0xe>

0800a2a8 <__math_uflow>:
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a2ae:	f7ff bfe3 	b.w	800a278 <xflow>

0800a2b2 <__math_oflow>:
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a2b8:	f7ff bfde 	b.w	800a278 <xflow>

0800a2bc <finite>:
 800a2bc:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800a2c0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a2c4:	0fc0      	lsrs	r0, r0, #31
 800a2c6:	4770      	bx	lr

0800a2c8 <_init>:
 800a2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ca:	bf00      	nop
 800a2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ce:	bc08      	pop	{r3}
 800a2d0:	469e      	mov	lr, r3
 800a2d2:	4770      	bx	lr

0800a2d4 <_fini>:
 800a2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d6:	bf00      	nop
 800a2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2da:	bc08      	pop	{r3}
 800a2dc:	469e      	mov	lr, r3
 800a2de:	4770      	bx	lr
