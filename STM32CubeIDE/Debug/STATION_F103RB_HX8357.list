
STATION_F103RB_HX8357.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7d0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00010e84  0800c8e0  0800c8e0  0001c8e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d764  0801d764  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  0801d764  0801d764  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801d764  0801d764  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d764  0801d764  0002d764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d768  0801d768  0002d768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801d76c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014f8  200001e8  0801d950  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200016e0  0801d950  000316e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dd15  00000000  00000000  0003020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cff  00000000  00000000  0004df22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001dbaf  00000000  00000000  0004fc21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  0006d7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000b0b8  00000000  00000000  0006d820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011329  00000000  00000000  000788d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088d75  00000000  00000000  00089c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00112976  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ca4  00000000  00000000  001129c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00018d1e  00000000  00000000  0011466c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c8c8 	.word	0x0800c8c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800c8c8 	.word	0x0800c8c8

08000150 <HAL_Delay>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000150:	4a03      	ldr	r2, [pc, #12]	; (8000160 <HAL_Delay+0x10>)
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait += (uint32_t)(uwTickFreq);
 8000152:	3001      	adds	r0, #1
  return uwTick;
 8000154:	6811      	ldr	r1, [r2, #0]
 8000156:	6813      	ldr	r3, [r2, #0]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000158:	1a5b      	subs	r3, r3, r1
 800015a:	4283      	cmp	r3, r0
 800015c:	d3fb      	bcc.n	8000156 <HAL_Delay+0x6>
  {
  }
}
 800015e:	4770      	bx	lr
 8000160:	20000208 	.word	0x20000208

08000164 <LCD_Send_Cmd>:
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
	if ((val&0x01)==1)        DB_00_S else DB_00_R
}

inline static void LCD_Send_Cmd(uint16_t cmd)
{
 8000164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000168:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800016c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000170:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8000174:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8000178:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 800017c:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8000180:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8000184:	4b24      	ldr	r3, [pc, #144]	; (8000218 <LCD_Send_Cmd+0xb4>)
 8000186:	4a25      	ldr	r2, [pc, #148]	; (800021c <LCD_Send_Cmd+0xb8>)
 8000188:	4f25      	ldr	r7, [pc, #148]	; (8000220 <LCD_Send_Cmd+0xbc>)
 800018a:	6139      	str	r1, [r7, #16]
 800018c:	f8c7 8010 	str.w	r8, [r7, #16]
 8000190:	6116      	str	r6, [r2, #16]
 8000192:	6111      	str	r1, [r2, #16]
 8000194:	611c      	str	r4, [r3, #16]
 8000196:	611d      	str	r5, [r3, #16]
 8000198:	611e      	str	r6, [r3, #16]
 800019a:	6119      	str	r1, [r3, #16]
 800019c:	f8c3 e010 	str.w	lr, [r3, #16]
 80001a0:	f8c3 c010 	str.w	ip, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80001a4:	0943      	lsrs	r3, r0, #5
 80001a6:	6115      	str	r5, [r2, #16]
 80001a8:	6114      	str	r4, [r2, #16]
 80001aa:	d02e      	beq.n	800020a <LCD_Send_Cmd+0xa6>
    GPIOx->BSRR = GPIO_Pin;
 80001ac:	2110      	movs	r1, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80001ae:	0903      	lsrs	r3, r0, #4
 80001b0:	2b02      	cmp	r3, #2
 80001b2:	6111      	str	r1, [r2, #16]
 80001b4:	d12c      	bne.n	8000210 <LCD_Send_Cmd+0xac>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80001ba:	6113      	str	r3, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80001bc:	0704      	lsls	r4, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 80001be:	bf4c      	ite	mi
 80001c0:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001c2:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 80001c6:	4b15      	ldr	r3, [pc, #84]	; (800021c <LCD_Send_Cmd+0xb8>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80001c8:	0741      	lsls	r1, r0, #29
 80001ca:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001cc:	bf4c      	ite	mi
 80001ce:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001d0:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 80001d4:	4b11      	ldr	r3, [pc, #68]	; (800021c <LCD_Send_Cmd+0xb8>)
    GPIOx->BSRR = GPIO_Pin;
 80001d6:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001d8:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80001da:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 80001dc:	bf4c      	ite	mi
 80001de:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001e0:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80001e4:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <LCD_Send_Cmd+0xb4>)
 80001e6:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80001e8:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 80001ea:	bf4c      	ite	mi
 80001ec:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001ee:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80001f2:	4b09      	ldr	r3, [pc, #36]	; (8000218 <LCD_Send_Cmd+0xb4>)
 80001f4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80001f8:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001fe:	4b08      	ldr	r3, [pc, #32]	; (8000220 <LCD_Send_Cmd+0xbc>)
 8000200:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000202:	6119      	str	r1, [r3, #16]
 8000204:	611a      	str	r2, [r3, #16]
	LCD_Bus(cmd);
	LCD_WR_R
	//_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 8000206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800020a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800020e:	6113      	str	r3, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000210:	2220      	movs	r2, #32
 8000212:	4b02      	ldr	r3, [pc, #8]	; (800021c <LCD_Send_Cmd+0xb8>)
 8000214:	611a      	str	r2, [r3, #16]
  }
}
 8000216:	e7d1      	b.n	80001bc <LCD_Send_Cmd+0x58>
 8000218:	40011000 	.word	0x40011000
 800021c:	40010800 	.word	0x40010800
 8000220:	40010c00 	.word	0x40010c00

08000224 <LCD_Send_Dat>:
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000224:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000228:	2101      	movs	r1, #1
 800022a:	4b3f      	ldr	r3, [pc, #252]	; (8000328 <LCD_Send_Dat+0x104>)
 800022c:	6119      	str	r1, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800022e:	611a      	str	r2, [r3, #16]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8000230:	0bc3      	lsrs	r3, r0, #15
    GPIOx->BSRR = GPIO_Pin;
 8000232:	bf14      	ite	ne
 8000234:	2202      	movne	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000236:	f44f 3200 	moveq.w	r2, #131072	; 0x20000
 800023a:	4b3c      	ldr	r3, [pc, #240]	; (800032c <LCD_Send_Dat+0x108>)
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800023c:	0441      	lsls	r1, r0, #17
 800023e:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000240:	bf4c      	ite	mi
 8000242:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000244:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 8000248:	4b38      	ldr	r3, [pc, #224]	; (800032c <LCD_Send_Dat+0x108>)
 800024a:	611a      	str	r2, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 800024c:	0482      	lsls	r2, r0, #18
    GPIOx->BSRR = GPIO_Pin;
 800024e:	bf4c      	ite	mi
 8000250:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000252:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 8000256:	4b36      	ldr	r3, [pc, #216]	; (8000330 <LCD_Send_Dat+0x10c>)
 8000258:	611a      	str	r2, [r3, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 800025a:	04c3      	lsls	r3, r0, #19
    GPIOx->BSRR = GPIO_Pin;
 800025c:	bf4c      	ite	mi
 800025e:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000260:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 8000264:	4b32      	ldr	r3, [pc, #200]	; (8000330 <LCD_Send_Dat+0x10c>)
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8000266:	0501      	lsls	r1, r0, #20
 8000268:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800026a:	bf4c      	ite	mi
 800026c:	2202      	movmi	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800026e:	f44f 3200 	movpl.w	r2, #131072	; 0x20000
 8000272:	4b2f      	ldr	r3, [pc, #188]	; (8000330 <LCD_Send_Dat+0x10c>)
 8000274:	611a      	str	r2, [r3, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8000276:	0542      	lsls	r2, r0, #21
    GPIOx->BSRR = GPIO_Pin;
 8000278:	bf4c      	ite	mi
 800027a:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800027c:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 8000280:	4b2b      	ldr	r3, [pc, #172]	; (8000330 <LCD_Send_Dat+0x10c>)
 8000282:	611a      	str	r2, [r3, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8000284:	0583      	lsls	r3, r0, #22
    GPIOx->BSRR = GPIO_Pin;
 8000286:	bf4c      	ite	mi
 8000288:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800028c:	f04f 4200 	movpl.w	r2, #2147483648	; 0x80000000
 8000290:	4b27      	ldr	r3, [pc, #156]	; (8000330 <LCD_Send_Dat+0x10c>)
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8000292:	05c1      	lsls	r1, r0, #23
 8000294:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000296:	bf4c      	ite	mi
 8000298:	f44f 4280 	movmi.w	r2, #16384	; 0x4000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800029c:	f04f 4280 	movpl.w	r2, #1073741824	; 0x40000000
 80002a0:	4b23      	ldr	r3, [pc, #140]	; (8000330 <LCD_Send_Dat+0x10c>)
 80002a2:	611a      	str	r2, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80002a4:	0602      	lsls	r2, r0, #24
    GPIOx->BSRR = GPIO_Pin;
 80002a6:	bf4c      	ite	mi
 80002a8:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002aa:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 80002ae:	4b1f      	ldr	r3, [pc, #124]	; (800032c <LCD_Send_Dat+0x108>)
 80002b0:	611a      	str	r2, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80002b2:	0643      	lsls	r3, r0, #25
    GPIOx->BSRR = GPIO_Pin;
 80002b4:	bf4c      	ite	mi
 80002b6:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002b8:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <LCD_Send_Dat+0x108>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80002be:	0681      	lsls	r1, r0, #26
 80002c0:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80002c2:	bf4c      	ite	mi
 80002c4:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002c6:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80002ca:	4b18      	ldr	r3, [pc, #96]	; (800032c <LCD_Send_Dat+0x108>)
 80002cc:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80002ce:	06c2      	lsls	r2, r0, #27
    GPIOx->BSRR = GPIO_Pin;
 80002d0:	bf4c      	ite	mi
 80002d2:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002d4:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80002d8:	4b14      	ldr	r3, [pc, #80]	; (800032c <LCD_Send_Dat+0x108>)
 80002da:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80002dc:	0703      	lsls	r3, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 80002de:	bf4c      	ite	mi
 80002e0:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002e2:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 80002e6:	4b11      	ldr	r3, [pc, #68]	; (800032c <LCD_Send_Dat+0x108>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80002e8:	0741      	lsls	r1, r0, #29
 80002ea:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80002ec:	bf4c      	ite	mi
 80002ee:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002f0:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 80002f4:	4b0d      	ldr	r3, [pc, #52]	; (800032c <LCD_Send_Dat+0x108>)
    GPIOx->BSRR = GPIO_Pin;
 80002f6:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002f8:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80002fa:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 80002fc:	bf4c      	ite	mi
 80002fe:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000300:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000304:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <LCD_Send_Dat+0x10c>)
 8000306:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000308:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 800030a:	bf4c      	ite	mi
 800030c:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800030e:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000312:	4b07      	ldr	r3, [pc, #28]	; (8000330 <LCD_Send_Dat+0x10c>)
 8000314:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000318:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800031a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800031e:	4b02      	ldr	r3, [pc, #8]	; (8000328 <LCD_Send_Dat+0x104>)
 8000320:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000322:	6119      	str	r1, [r3, #16]
 8000324:	611a      	str	r2, [r3, #16]
	LCD_Bus(dat);
	LCD_WR_R
//	_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 8000326:	4770      	bx	lr
 8000328:	40010c00 	.word	0x40010c00
 800032c:	40010800 	.word	0x40010800
 8000330:	40011000 	.word	0x40011000

08000334 <LCD_Window>:


inline static void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{		
 8000334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000338:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800033c:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8000340:	468b      	mov	fp, r1
 8000342:	49ab      	ldr	r1, [pc, #684]	; (80005f0 <LCD_Window+0x2bc>)
 8000344:	b085      	sub	sp, #20
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800034c:	610d      	str	r5, [r1, #16]
 800034e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000352:	610c      	str	r4, [r1, #16]
 8000354:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000358:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800035c:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000360:	f04f 0810 	mov.w	r8, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000364:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8000368:	4ba2      	ldr	r3, [pc, #648]	; (80005f4 <LCD_Window+0x2c0>)
 800036a:	4696      	mov	lr, r2
 800036c:	4aa2      	ldr	r2, [pc, #648]	; (80005f8 <LCD_Window+0x2c4>)
 800036e:	6116      	str	r6, [r2, #16]
 8000370:	6115      	str	r5, [r2, #16]
 8000372:	f8c3 c010 	str.w	ip, [r3, #16]
 8000376:	611f      	str	r7, [r3, #16]
 8000378:	611e      	str	r6, [r3, #16]
 800037a:	611d      	str	r5, [r3, #16]
 800037c:	f8c3 9010 	str.w	r9, [r3, #16]
 8000380:	f8c3 a010 	str.w	sl, [r3, #16]
 8000384:	6117      	str	r7, [r2, #16]
 8000386:	f8c2 c010 	str.w	ip, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800038a:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800038e:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000390:	2440      	movs	r4, #64	; 0x40
 8000392:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000394:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 8000398:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800039a:	f8c3 8010 	str.w	r8, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800039e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80003a2:	f04f 0802 	mov.w	r8, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003a6:	611c      	str	r4, [r3, #16]
 80003a8:	610e      	str	r6, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 80003aa:	f8c1 8010 	str.w	r8, [r1, #16]
 80003ae:	f44f 6880 	mov.w	r8, #1024	; 0x400
 80003b2:	f8c1 8010 	str.w	r8, [r1, #16]
 80003b6:	f04f 0801 	mov.w	r8, #1
 80003ba:	f8c1 8010 	str.w	r8, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003be:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 80003c2:	f8c1 8010 	str.w	r8, [r1, #16]
 80003c6:	6116      	str	r6, [r2, #16]
 80003c8:	6115      	str	r5, [r2, #16]
 80003ca:	f8c3 c010 	str.w	ip, [r3, #16]
 80003ce:	611f      	str	r7, [r3, #16]
 80003d0:	611e      	str	r6, [r3, #16]
 80003d2:	611d      	str	r5, [r3, #16]
	uint8_t data[4] = { 0 };
	data[0] = x1 >> 8;
  data[1] = x1 & 0xFF;
  data[2] = x2 >> 8;
  data[3] = x2 & 0xFF;
 80003d4:	fa5f f58e 	uxtb.w	r5, lr
 80003d8:	f8c3 9010 	str.w	r9, [r3, #16]
 80003dc:	f8c3 a010 	str.w	sl, [r3, #16]
 80003e0:	9502      	str	r5, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80003e2:	0bc5      	lsrs	r5, r0, #15
    GPIOx->BSRR = GPIO_Pin;
 80003e4:	bf18      	it	ne
 80003e6:	2504      	movne	r5, #4
	data[0] = x1 >> 8;
 80003e8:	ea4f 2410 	mov.w	r4, r0, lsr #8
 80003ec:	bf14      	ite	ne
 80003ee:	6115      	strne	r5, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003f0:	6117      	streq	r7, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80003f2:	0667      	lsls	r7, r4, #25
 80003f4:	bf54      	ite	pl
 80003f6:	f44f 2500 	movpl.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80003fa:	2508      	movmi	r5, #8
 80003fc:	4a7e      	ldr	r2, [pc, #504]	; (80005f8 <LCD_Window+0x2c4>)
	data[0] = x1 >> 8;
 80003fe:	4621      	mov	r1, r4
 8000400:	6115      	str	r5, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000402:	06a5      	lsls	r5, r4, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000404:	bf54      	ite	pl
 8000406:	f44f 1580 	movpl.w	r5, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800040a:	2510      	movmi	r5, #16
 800040c:	4a7a      	ldr	r2, [pc, #488]	; (80005f8 <LCD_Window+0x2c4>)
 800040e:	f04f 0a02 	mov.w	sl, #2
 8000412:	6115      	str	r5, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000414:	06e2      	lsls	r2, r4, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000416:	bf54      	ite	pl
 8000418:	f44f 1500 	movpl.w	r5, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800041c:	2520      	movmi	r5, #32
 800041e:	4a76      	ldr	r2, [pc, #472]	; (80005f8 <LCD_Window+0x2c4>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000420:	0727      	lsls	r7, r4, #28
 8000422:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000424:	bf54      	ite	pl
 8000426:	f44f 0580 	movpl.w	r5, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800042a:	2540      	movmi	r5, #64	; 0x40
 800042c:	4a72      	ldr	r2, [pc, #456]	; (80005f8 <LCD_Window+0x2c4>)
 800042e:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8000432:	6115      	str	r5, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000434:	0765      	lsls	r5, r4, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000436:	bf54      	ite	pl
 8000438:	f44f 0500 	movpl.w	r5, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800043c:	2580      	movmi	r5, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800043e:	07a4      	lsls	r4, r4, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000440:	bf54      	ite	pl
 8000442:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000446:	2410      	movmi	r4, #16
 8000448:	4a6b      	ldr	r2, [pc, #428]	; (80005f8 <LCD_Window+0x2c4>)
 800044a:	f04f 0801 	mov.w	r8, #1
 800044e:	6115      	str	r5, [r2, #16]
 8000450:	4a68      	ldr	r2, [pc, #416]	; (80005f4 <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000452:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000456:	6114      	str	r4, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000458:	07ca      	lsls	r2, r1, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800045a:	bf54      	ite	pl
 800045c:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000460:	2120      	movmi	r1, #32
 8000462:	4a64      	ldr	r2, [pc, #400]	; (80005f4 <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000464:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000468:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800046a:	4961      	ldr	r1, [pc, #388]	; (80005f0 <LCD_Window+0x2bc>)
 800046c:	4a61      	ldr	r2, [pc, #388]	; (80005f4 <LCD_Window+0x2c0>)
 800046e:	610d      	str	r5, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000470:	f8c1 a010 	str.w	sl, [r1, #16]
 8000474:	f8c1 9010 	str.w	r9, [r1, #16]
 8000478:	f8c1 8010 	str.w	r8, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800047c:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000480:	f8c1 8010 	str.w	r8, [r1, #16]
 8000484:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000488:	4c5b      	ldr	r4, [pc, #364]	; (80005f8 <LCD_Window+0x2c4>)
 800048a:	f44f 2c80 	mov.w	ip, #262144	; 0x40000
 800048e:	6125      	str	r5, [r4, #16]
 8000490:	6127      	str	r7, [r4, #16]
 8000492:	6111      	str	r1, [r2, #16]
 8000494:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000498:	f8c2 c010 	str.w	ip, [r2, #16]
 800049c:	6115      	str	r5, [r2, #16]
 800049e:	6117      	str	r7, [r2, #16]
 80004a0:	6111      	str	r1, [r2, #16]
 80004a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  data[1] = x1 & 0xFF;
 80004a6:	b2c6      	uxtb	r6, r0
 80004a8:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80004aa:	09f2      	lsrs	r2, r6, #7
    GPIOx->BSRR = GPIO_Pin;
 80004ac:	bf16      	itet	ne
 80004ae:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004b0:	f8c4 c010 	streq.w	ip, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 80004b4:	6122      	strne	r2, [r4, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80004b6:	0647      	lsls	r7, r0, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004b8:	bf54      	ite	pl
 80004ba:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80004be:	2108      	movmi	r1, #8
 80004c0:	4a4d      	ldr	r2, [pc, #308]	; (80005f8 <LCD_Window+0x2c4>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80004c2:	0685      	lsls	r5, r0, #26
 80004c4:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004c6:	bf54      	ite	pl
 80004c8:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80004cc:	2110      	movmi	r1, #16
 80004ce:	4a4a      	ldr	r2, [pc, #296]	; (80005f8 <LCD_Window+0x2c4>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80004d0:	06c4      	lsls	r4, r0, #27
 80004d2:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004d4:	bf54      	ite	pl
 80004d6:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80004da:	2120      	movmi	r1, #32
 80004dc:	4a46      	ldr	r2, [pc, #280]	; (80005f8 <LCD_Window+0x2c4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004de:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80004e2:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80004e4:	0701      	lsls	r1, r0, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004e6:	bf54      	ite	pl
 80004e8:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80004ec:	2140      	movmi	r1, #64	; 0x40
 80004ee:	4a42      	ldr	r2, [pc, #264]	; (80005f8 <LCD_Window+0x2c4>)
 80004f0:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80004f4:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80004f6:	0742      	lsls	r2, r0, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004f8:	bf54      	ite	pl
 80004fa:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80004fe:	2180      	movmi	r1, #128	; 0x80
 8000500:	4a3d      	ldr	r2, [pc, #244]	; (80005f8 <LCD_Window+0x2c4>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000502:	0787      	lsls	r7, r0, #30
 8000504:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000506:	bf54      	ite	pl
 8000508:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800050c:	2110      	movmi	r1, #16
 800050e:	4a39      	ldr	r2, [pc, #228]	; (80005f4 <LCD_Window+0x2c0>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000510:	07f5      	lsls	r5, r6, #31
 8000512:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000514:	bf54      	ite	pl
 8000516:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800051a:	2120      	movmi	r1, #32
 800051c:	2702      	movs	r7, #2
 800051e:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000522:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000526:	4a33      	ldr	r2, [pc, #204]	; (80005f4 <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000528:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 800052c:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800052e:	4930      	ldr	r1, [pc, #192]	; (80005f0 <LCD_Window+0x2bc>)
 8000530:	4a30      	ldr	r2, [pc, #192]	; (80005f4 <LCD_Window+0x2c0>)
 8000532:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000534:	610f      	str	r7, [r1, #16]
 8000536:	f8c1 a010 	str.w	sl, [r1, #16]
 800053a:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800053e:	f8c1 8010 	str.w	r8, [r1, #16]
 8000542:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000546:	482c      	ldr	r0, [pc, #176]	; (80005f8 <LCD_Window+0x2c4>)
 8000548:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 800054c:	6104      	str	r4, [r0, #16]
 800054e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000552:	6105      	str	r5, [r0, #16]
 8000554:	6111      	str	r1, [r2, #16]
 8000556:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800055a:	6116      	str	r6, [r2, #16]
 800055c:	6114      	str	r4, [r2, #16]
 800055e:	6115      	str	r5, [r2, #16]
 8000560:	f8c2 c010 	str.w	ip, [r2, #16]
 8000564:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000566:	ea5f 32de 	movs.w	r2, lr, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 800056a:	bf18      	it	ne
 800056c:	2204      	movne	r2, #4
  data[2] = x2 >> 8;
 800056e:	ea4f 231e 	mov.w	r3, lr, lsr #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000572:	bf0c      	ite	eq
 8000574:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000576:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000578:	065c      	lsls	r4, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800057a:	bf54      	ite	pl
 800057c:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000580:	2108      	movmi	r1, #8
 8000582:	4a1d      	ldr	r2, [pc, #116]	; (80005f8 <LCD_Window+0x2c4>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000584:	0698      	lsls	r0, r3, #26
 8000586:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000588:	bf54      	ite	pl
 800058a:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800058e:	2110      	movmi	r1, #16
 8000590:	4a19      	ldr	r2, [pc, #100]	; (80005f8 <LCD_Window+0x2c4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000592:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000596:	6111      	str	r1, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000598:	06d9      	lsls	r1, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800059a:	bf54      	ite	pl
 800059c:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80005a0:	2120      	movmi	r1, #32
 80005a2:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <LCD_Window+0x2c4>)
 80005a4:	f04f 0a02 	mov.w	sl, #2
 80005a8:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80005aa:	071a      	lsls	r2, r3, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005ac:	bf54      	ite	pl
 80005ae:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80005b2:	2140      	movmi	r1, #64	; 0x40
 80005b4:	4a10      	ldr	r2, [pc, #64]	; (80005f8 <LCD_Window+0x2c4>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80005b6:	075f      	lsls	r7, r3, #29
 80005b8:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005ba:	bf54      	ite	pl
 80005bc:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80005c0:	2180      	movmi	r1, #128	; 0x80
 80005c2:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <LCD_Window+0x2c4>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80005c4:	079e      	lsls	r6, r3, #30
 80005c6:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005c8:	bf54      	ite	pl
 80005ca:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80005ce:	2210      	movmi	r2, #16
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <LCD_Window+0x2c0>)
 80005d2:	f44f 6980 	mov.w	r9, #1024	; 0x400
 80005d6:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80005d8:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80005dc:	f013 0f01 	tst.w	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005e0:	bf0c      	ite	eq
 80005e2:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80005e6:	2220      	movne	r2, #32
 80005e8:	f04f 0801 	mov.w	r8, #1
 80005ec:	e006      	b.n	80005fc <LCD_Window+0x2c8>
 80005ee:	bf00      	nop
 80005f0:	40010c00 	.word	0x40010c00
 80005f4:	40011000 	.word	0x40011000
 80005f8:	40010800 	.word	0x40010800
 80005fc:	4bac      	ldr	r3, [pc, #688]	; (80008b0 <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005fe:	f44f 2580 	mov.w	r5, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000602:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000604:	4aab      	ldr	r2, [pc, #684]	; (80008b4 <LCD_Window+0x580>)
 8000606:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800060a:	6110      	str	r0, [r2, #16]
 800060c:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000610:	f8c2 a010 	str.w	sl, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000614:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000618:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800061c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000620:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000624:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000628:	4ba1      	ldr	r3, [pc, #644]	; (80008b0 <LCD_Window+0x57c>)
 800062a:	49a3      	ldr	r1, [pc, #652]	; (80008b8 <LCD_Window+0x584>)
 800062c:	f8c2 8010 	str.w	r8, [r2, #16]
 8000630:	6108      	str	r0, [r1, #16]
 8000632:	610c      	str	r4, [r1, #16]
 8000634:	f8c3 c010 	str.w	ip, [r3, #16]
 8000638:	611d      	str	r5, [r3, #16]
 800063a:	6118      	str	r0, [r3, #16]
 800063c:	611c      	str	r4, [r3, #16]
 800063e:	611f      	str	r7, [r3, #16]
 8000640:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000642:	fa5f f38e 	uxtb.w	r3, lr
 8000646:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 8000648:	bf16      	itet	ne
 800064a:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800064c:	610d      	streq	r5, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800064e:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000650:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8000654:	bf14      	ite	ne
 8000656:	2208      	movne	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000658:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800065c:	4b96      	ldr	r3, [pc, #600]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800065e:	f01e 0f20 	tst.w	lr, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000662:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000664:	bf14      	ite	ne
 8000666:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000668:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800066c:	4b92      	ldr	r3, [pc, #584]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800066e:	f01e 0f10 	tst.w	lr, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000672:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000674:	bf14      	ite	ne
 8000676:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000678:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800067c:	4b8e      	ldr	r3, [pc, #568]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800067e:	f01e 0f08 	tst.w	lr, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000682:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000684:	bf14      	ite	ne
 8000686:	2240      	movne	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000688:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800068c:	4b8a      	ldr	r3, [pc, #552]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800068e:	f01e 0f04 	tst.w	lr, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000692:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000694:	bf14      	ite	ne
 8000696:	2280      	movne	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000698:	f44f 0200 	moveq.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800069c:	4b86      	ldr	r3, [pc, #536]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800069e:	f01e 0f02 	tst.w	lr, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006a2:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80006a4:	bf14      	ite	ne
 80006a6:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006a8:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 80006ac:	4b80      	ldr	r3, [pc, #512]	; (80008b0 <LCD_Window+0x57c>)
 80006ae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80006b2:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80006b4:	9b02      	ldr	r3, [sp, #8]
 80006b6:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80006ba:	07dd      	lsls	r5, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 80006bc:	bf4c      	ite	mi
 80006be:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006c0:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80006c4:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80006c8:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80006cc:	f04f 0802 	mov.w	r8, #2
 80006d0:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006d4:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
 80006d8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80006dc:	4b74      	ldr	r3, [pc, #464]	; (80008b0 <LCD_Window+0x57c>)
 80006de:	4975      	ldr	r1, [pc, #468]	; (80008b4 <LCD_Window+0x580>)
 80006e0:	611a      	str	r2, [r3, #16]
 80006e2:	4b73      	ldr	r3, [pc, #460]	; (80008b0 <LCD_Window+0x57c>)
 80006e4:	4a74      	ldr	r2, [pc, #464]	; (80008b8 <LCD_Window+0x584>)
 80006e6:	6108      	str	r0, [r1, #16]
 80006e8:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80006ec:	f8c1 8010 	str.w	r8, [r1, #16]
 80006f0:	f04f 0910 	mov.w	r9, #16
 80006f4:	f8c1 e010 	str.w	lr, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006f8:	610c      	str	r4, [r1, #16]
 80006fa:	f8c1 c010 	str.w	ip, [r1, #16]
 80006fe:	6110      	str	r0, [r2, #16]
 8000700:	6114      	str	r4, [r2, #16]
 8000702:	611d      	str	r5, [r3, #16]
 8000704:	611e      	str	r6, [r3, #16]
 8000706:	6118      	str	r0, [r3, #16]
 8000708:	611c      	str	r4, [r3, #16]
 800070a:	611f      	str	r7, [r3, #16]
 800070c:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 8000710:	f8c3 a010 	str.w	sl, [r3, #16]
 8000714:	6116      	str	r6, [r2, #16]
 8000716:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000718:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800071c:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800071e:	2740      	movs	r7, #64	; 0x40
 8000720:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000722:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
 8000726:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000728:	2720      	movs	r7, #32
 800072a:	f8c3 9010 	str.w	r9, [r3, #16]
 800072e:	611f      	str	r7, [r3, #16]
 8000730:	2701      	movs	r7, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000732:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000734:	f8c1 8010 	str.w	r8, [r1, #16]
 8000738:	f8c1 e010 	str.w	lr, [r1, #16]
 800073c:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800073e:	f8c1 c010 	str.w	ip, [r1, #16]
 8000742:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000746:	6110      	str	r0, [r2, #16]
 8000748:	6114      	str	r4, [r2, #16]
 800074a:	611d      	str	r5, [r3, #16]
 800074c:	611e      	str	r6, [r3, #16]
 800074e:	6118      	str	r0, [r3, #16]
 8000750:	611c      	str	r4, [r3, #16]
	LCD_Send_Cmd(HX8357_CASET);
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
	data[0] = y1 >> 8;
  data[1] = y1;
  data[2] = y2 >> 8;
 8000752:	9c01      	ldr	r4, [sp, #4]
 8000754:	6119      	str	r1, [r3, #16]
 8000756:	f8c3 a010 	str.w	sl, [r3, #16]
 800075a:	0a23      	lsrs	r3, r4, #8
  data[3] = y2;
 800075c:	b2e4      	uxtb	r4, r4
 800075e:	9402      	str	r4, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000760:	ea5f 34db 	movs.w	r4, fp, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8000764:	bf18      	it	ne
 8000766:	2404      	movne	r4, #4
	data[0] = y1 >> 8;
 8000768:	ea4f 211b 	mov.w	r1, fp, lsr #8
  data[2] = y2 >> 8;
 800076c:	9303      	str	r3, [sp, #12]
 800076e:	bf14      	ite	ne
 8000770:	6114      	strne	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000772:	6116      	streq	r6, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000774:	064c      	lsls	r4, r1, #25
 8000776:	bf54      	ite	pl
 8000778:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800077c:	2408      	movmi	r4, #8
 800077e:	4a4e      	ldr	r2, [pc, #312]	; (80008b8 <LCD_Window+0x584>)
	data[0] = y1 >> 8;
 8000780:	4608      	mov	r0, r1
 8000782:	6114      	str	r4, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000784:	068a      	lsls	r2, r1, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000786:	bf54      	ite	pl
 8000788:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800078c:	2410      	movmi	r4, #16
 800078e:	4a4a      	ldr	r2, [pc, #296]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000790:	06cf      	lsls	r7, r1, #27
 8000792:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000794:	bf54      	ite	pl
 8000796:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800079a:	2420      	movmi	r4, #32
 800079c:	4a46      	ldr	r2, [pc, #280]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800079e:	070e      	lsls	r6, r1, #28
 80007a0:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007a2:	bf54      	ite	pl
 80007a4:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80007a8:	2440      	movmi	r4, #64	; 0x40
 80007aa:	4a43      	ldr	r2, [pc, #268]	; (80008b8 <LCD_Window+0x584>)
 80007ac:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80007b0:	6114      	str	r4, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80007b2:	074c      	lsls	r4, r1, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007b4:	bf54      	ite	pl
 80007b6:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80007ba:	2480      	movmi	r4, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80007bc:	0789      	lsls	r1, r1, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007be:	bf54      	ite	pl
 80007c0:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80007c4:	2110      	movmi	r1, #16
 80007c6:	4a3c      	ldr	r2, [pc, #240]	; (80008b8 <LCD_Window+0x584>)
 80007c8:	f04f 0901 	mov.w	r9, #1
 80007cc:	6114      	str	r4, [r2, #16]
 80007ce:	4a38      	ldr	r2, [pc, #224]	; (80008b0 <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007d0:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80007d4:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80007d6:	07c2      	lsls	r2, r0, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007d8:	bf54      	ite	pl
 80007da:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80007de:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007e0:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 80007e4:	f04f 0c02 	mov.w	ip, #2
 80007e8:	4a31      	ldr	r2, [pc, #196]	; (80008b0 <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007ea:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80007ee:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007f0:	4930      	ldr	r1, [pc, #192]	; (80008b4 <LCD_Window+0x580>)
 80007f2:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80007f6:	610c      	str	r4, [r1, #16]
 80007f8:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80007fc:	f8c1 c010 	str.w	ip, [r1, #16]
 8000800:	f8c1 a010 	str.w	sl, [r1, #16]
 8000804:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000808:	f8c1 8010 	str.w	r8, [r1, #16]
 800080c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000810:	4a27      	ldr	r2, [pc, #156]	; (80008b0 <LCD_Window+0x57c>)
 8000812:	4829      	ldr	r0, [pc, #164]	; (80008b8 <LCD_Window+0x584>)
  data[1] = y1;
 8000814:	fa5f f58b 	uxtb.w	r5, fp
 8000818:	6104      	str	r4, [r0, #16]
 800081a:	6106      	str	r6, [r0, #16]
 800081c:	f8c2 e010 	str.w	lr, [r2, #16]
 8000820:	6117      	str	r7, [r2, #16]
 8000822:	6114      	str	r4, [r2, #16]
 8000824:	6116      	str	r6, [r2, #16]
 8000826:	6111      	str	r1, [r2, #16]
 8000828:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800082c:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800082e:	09ea      	lsrs	r2, r5, #7
    GPIOx->BSRR = GPIO_Pin;
 8000830:	bf16      	itet	ne
 8000832:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000834:	6107      	streq	r7, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000836:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000838:	f01b 0f40 	tst.w	fp, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800083c:	bf0c      	ite	eq
 800083e:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000842:	2108      	movne	r1, #8
 8000844:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000846:	f01b 0f20 	tst.w	fp, #32
 800084a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800084c:	bf0c      	ite	eq
 800084e:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000852:	2110      	movne	r1, #16
 8000854:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000856:	f01b 0f10 	tst.w	fp, #16
 800085a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800085c:	bf0c      	ite	eq
 800085e:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000862:	2120      	movne	r1, #32
 8000864:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000866:	f01b 0f08 	tst.w	fp, #8
 800086a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800086c:	bf0c      	ite	eq
 800086e:	f44f 0180 	moveq.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000872:	2140      	movne	r1, #64	; 0x40
 8000874:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000876:	f01b 0f04 	tst.w	fp, #4
 800087a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800087c:	bf0c      	ite	eq
 800087e:	f44f 0100 	moveq.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000882:	2180      	movne	r1, #128	; 0x80
 8000884:	4a0c      	ldr	r2, [pc, #48]	; (80008b8 <LCD_Window+0x584>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000886:	f01b 0f02 	tst.w	fp, #2
 800088a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800088c:	bf0c      	ite	eq
 800088e:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000892:	2110      	movne	r1, #16
 8000894:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <LCD_Window+0x57c>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000896:	07ef      	lsls	r7, r5, #31
 8000898:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800089a:	bf54      	ite	pl
 800089c:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80008a0:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008a2:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 80008a6:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80008aa:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80008ae:	e005      	b.n	80008bc <LCD_Window+0x588>
 80008b0:	40011000 	.word	0x40011000
 80008b4:	40010c00 	.word	0x40010c00
 80008b8:	40010800 	.word	0x40010800
 80008bc:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80008c0:	f04f 0b02 	mov.w	fp, #2
 80008c4:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80008c8:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008cc:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 80008d0:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 80008d4:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 80008d8:	4a7d      	ldr	r2, [pc, #500]	; (8000ad0 <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008da:	487e      	ldr	r0, [pc, #504]	; (8000ad4 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 80008dc:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008de:	497e      	ldr	r1, [pc, #504]	; (8000ad8 <LCD_Window+0x7a4>)
 80008e0:	4a7b      	ldr	r2, [pc, #492]	; (8000ad0 <LCD_Window+0x79c>)
 80008e2:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 80008e4:	f8c1 b010 	str.w	fp, [r1, #16]
 80008e8:	f8c1 a010 	str.w	sl, [r1, #16]
 80008ec:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008f0:	f8c1 8010 	str.w	r8, [r1, #16]
 80008f4:	6104      	str	r4, [r0, #16]
 80008f6:	6105      	str	r5, [r0, #16]
 80008f8:	f8c2 e010 	str.w	lr, [r2, #16]
 80008fc:	6116      	str	r6, [r2, #16]
 80008fe:	6114      	str	r4, [r2, #16]
 8000900:	6115      	str	r5, [r2, #16]
 8000902:	f8c2 c010 	str.w	ip, [r2, #16]
 8000906:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000908:	9a01      	ldr	r2, [sp, #4]
    GPIOx->BSRR = GPIO_Pin;
 800090a:	f04f 0a02 	mov.w	sl, #2
 800090e:	0bd2      	lsrs	r2, r2, #15
 8000910:	bf16      	itet	ne
 8000912:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000914:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000916:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000918:	065e      	lsls	r6, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800091a:	bf54      	ite	pl
 800091c:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000920:	2108      	movmi	r1, #8
 8000922:	4a6c      	ldr	r2, [pc, #432]	; (8000ad4 <LCD_Window+0x7a0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000924:	069d      	lsls	r5, r3, #26
 8000926:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000928:	bf54      	ite	pl
 800092a:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800092e:	2110      	movmi	r1, #16
 8000930:	4a68      	ldr	r2, [pc, #416]	; (8000ad4 <LCD_Window+0x7a0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000932:	06dc      	lsls	r4, r3, #27
 8000934:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000936:	bf54      	ite	pl
 8000938:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800093c:	2120      	movmi	r1, #32
 800093e:	4a65      	ldr	r2, [pc, #404]	; (8000ad4 <LCD_Window+0x7a0>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000940:	0718      	lsls	r0, r3, #28
 8000942:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000944:	bf54      	ite	pl
 8000946:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800094a:	2140      	movmi	r1, #64	; 0x40
 800094c:	4a61      	ldr	r2, [pc, #388]	; (8000ad4 <LCD_Window+0x7a0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800094e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000952:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000954:	0759      	lsls	r1, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000956:	bf54      	ite	pl
 8000958:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800095c:	2180      	movmi	r1, #128	; 0x80
 800095e:	4a5d      	ldr	r2, [pc, #372]	; (8000ad4 <LCD_Window+0x7a0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000960:	079b      	lsls	r3, r3, #30
 8000962:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000964:	bf54      	ite	pl
 8000966:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800096a:	2210      	movmi	r2, #16
 800096c:	4b58      	ldr	r3, [pc, #352]	; (8000ad0 <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800096e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000972:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000974:	9b03      	ldr	r3, [sp, #12]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000976:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 800097a:	07df      	lsls	r7, r3, #31
 800097c:	bf54      	ite	pl
 800097e:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000982:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000984:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000988:	f44f 6980 	mov.w	r9, #1024	; 0x400
 800098c:	f04f 0801 	mov.w	r8, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000990:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8000994:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000998:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 800099c:	4b4c      	ldr	r3, [pc, #304]	; (8000ad0 <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800099e:	494d      	ldr	r1, [pc, #308]	; (8000ad4 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 80009a0:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009a2:	4a4d      	ldr	r2, [pc, #308]	; (8000ad8 <LCD_Window+0x7a4>)
 80009a4:	4b4a      	ldr	r3, [pc, #296]	; (8000ad0 <LCD_Window+0x79c>)
 80009a6:	6110      	str	r0, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 80009a8:	f8c2 a010 	str.w	sl, [r2, #16]
 80009ac:	f8c2 9010 	str.w	r9, [r2, #16]
 80009b0:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009b4:	f8c2 e010 	str.w	lr, [r2, #16]
 80009b8:	6108      	str	r0, [r1, #16]
 80009ba:	610c      	str	r4, [r1, #16]
 80009bc:	f8c3 c010 	str.w	ip, [r3, #16]
 80009c0:	611d      	str	r5, [r3, #16]
 80009c2:	6118      	str	r0, [r3, #16]
 80009c4:	611c      	str	r4, [r3, #16]
 80009c6:	611f      	str	r7, [r3, #16]
 80009c8:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80009ca:	9b02      	ldr	r3, [sp, #8]
 80009cc:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009d0:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 80009d2:	bf1c      	itt	ne
 80009d4:	2304      	movne	r3, #4
 80009d6:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80009d8:	9b01      	ldr	r3, [sp, #4]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009da:	bf08      	it	eq
 80009dc:	610d      	streq	r5, [r1, #16]
 80009de:	065e      	lsls	r6, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 80009e0:	bf4c      	ite	mi
 80009e2:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009e4:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 80009e8:	4b3a      	ldr	r3, [pc, #232]	; (8000ad4 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 80009ea:	2602      	movs	r6, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009ec:	611a      	str	r2, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80009ee:	9b01      	ldr	r3, [sp, #4]
 80009f0:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 80009f4:	069d      	lsls	r5, r3, #26
    GPIOx->BSRR = GPIO_Pin;
 80009f6:	bf4c      	ite	mi
 80009f8:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009fa:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80009fe:	4b35      	ldr	r3, [pc, #212]	; (8000ad4 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 8000a00:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a04:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000a06:	9b01      	ldr	r3, [sp, #4]
 8000a08:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 8000a0c:	06dc      	lsls	r4, r3, #27
    GPIOx->BSRR = GPIO_Pin;
 8000a0e:	bf4c      	ite	mi
 8000a10:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a12:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000a16:	4b2f      	ldr	r3, [pc, #188]	; (8000ad4 <LCD_Window+0x7a0>)
 8000a18:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8000a1c:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000a1e:	9b01      	ldr	r3, [sp, #4]
 8000a20:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 8000a24:	0718      	lsls	r0, r3, #28
    GPIOx->BSRR = GPIO_Pin;
 8000a26:	bf4c      	ite	mi
 8000a28:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a2a:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 8000a2e:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <LCD_Window+0x7a0>)
 8000a30:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a34:	611a      	str	r2, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000a36:	9b01      	ldr	r3, [sp, #4]
 8000a38:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000a3c:	0759      	lsls	r1, r3, #29
    GPIOx->BSRR = GPIO_Pin;
 8000a3e:	bf4c      	ite	mi
 8000a40:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a42:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 8000a46:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <LCD_Window+0x7a0>)
 8000a48:	4922      	ldr	r1, [pc, #136]	; (8000ad4 <LCD_Window+0x7a0>)
 8000a4a:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000a4c:	9b01      	ldr	r3, [sp, #4]
    GPIOx->BSRR = GPIO_Pin;
 8000a4e:	f04f 0910 	mov.w	r9, #16
 8000a52:	079a      	lsls	r2, r3, #30
 8000a54:	bf4c      	ite	mi
 8000a56:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a58:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <LCD_Window+0x79c>)
    GPIOx->BSRR = GPIO_Pin;
 8000a5e:	f04f 0840 	mov.w	r8, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a62:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000a64:	9b02      	ldr	r3, [sp, #8]
 8000a66:	07db      	lsls	r3, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 8000a68:	bf4c      	ite	mi
 8000a6a:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a6c:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <LCD_Window+0x79c>)
 8000a72:	611a      	str	r2, [r3, #16]
 8000a74:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <LCD_Window+0x7a4>)
 8000a7a:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000a7c:	611e      	str	r6, [r3, #16]
 8000a7e:	611d      	str	r5, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a80:	611c      	str	r4, [r3, #16]
 8000a82:	611a      	str	r2, [r3, #16]
 8000a84:	f102 5270 	add.w	r2, r2, #1006632960	; 0x3c000000
 8000a88:	f502 3288 	add.w	r2, r2, #69632	; 0x11000
 8000a8c:	6108      	str	r0, [r1, #16]
 8000a8e:	610c      	str	r4, [r1, #16]
 8000a90:	f8c2 c010 	str.w	ip, [r2, #16]
 8000a94:	f8c2 e010 	str.w	lr, [r2, #16]
 8000a98:	6110      	str	r0, [r2, #16]
 8000a9a:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000a9c:	2480      	movs	r4, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a9e:	f8c2 b010 	str.w	fp, [r2, #16]
 8000aa2:	f8c2 a010 	str.w	sl, [r2, #16]
 8000aa6:	f8c1 e010 	str.w	lr, [r1, #16]
 8000aaa:	f8c1 c010 	str.w	ip, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000aae:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ab2:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ab4:	f8c1 8010 	str.w	r8, [r1, #16]
 8000ab8:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aba:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000abe:	6111      	str	r1, [r2, #16]
 8000ac0:	6117      	str	r7, [r2, #16]
 8000ac2:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ac4:	611e      	str	r6, [r3, #16]
 8000ac6:	611d      	str	r5, [r3, #16]
	LCD_Send_Cmd(HX8357_PASET);
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
  LCD_Send_Cmd(HX83h7_RAMWR);
}
 8000ac8:	b005      	add	sp, #20
 8000aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ace:	bf00      	nop
 8000ad0:	40011000 	.word	0x40011000
 8000ad4:	40010800 	.word	0x40010800
 8000ad8:	40010c00 	.word	0x40010c00

08000adc <LCD_Rect_Fill>:
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(0, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 8000adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ae0:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8000ae4:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
 8000ae8:	4caf      	ldr	r4, [pc, #700]	; (8000da8 <LCD_Rect_Fill+0x2cc>)
 8000aea:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8000aee:	6125      	str	r5, [r4, #16]
 8000af0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000af4:	f8c4 a010 	str.w	sl, [r4, #16]
 8000af8:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000afc:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8000b00:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000b04:	4681      	mov	r9, r0
 8000b06:	4696      	mov	lr, r2
 8000b08:	48a8      	ldr	r0, [pc, #672]	; (8000dac <LCD_Rect_Fill+0x2d0>)
 8000b0a:	4aa9      	ldr	r2, [pc, #676]	; (8000db0 <LCD_Rect_Fill+0x2d4>)
 8000b0c:	6106      	str	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b0e:	f04f 0b10 	mov.w	fp, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b12:	6105      	str	r5, [r0, #16]
 8000b14:	f8c2 c010 	str.w	ip, [r2, #16]
 8000b18:	6117      	str	r7, [r2, #16]
 8000b1a:	6116      	str	r6, [r2, #16]
 8000b1c:	6115      	str	r5, [r2, #16]
 8000b1e:	f8c2 8010 	str.w	r8, [r2, #16]
 8000b22:	f8c2 a010 	str.w	sl, [r2, #16]
 8000b26:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
 8000b2a:	6107      	str	r7, [r0, #16]
 8000b2c:	f8c0 c010 	str.w	ip, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b30:	f8c0 b010 	str.w	fp, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b34:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b38:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8000b3c:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b40:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
 8000b44:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b48:	f8c2 b010 	str.w	fp, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b4c:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000b50:	f04f 0b02 	mov.w	fp, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b54:	f8c2 a010 	str.w	sl, [r2, #16]
 8000b58:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b5a:	f8c4 b010 	str.w	fp, [r4, #16]
 8000b5e:	f44f 6b80 	mov.w	fp, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b62:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000b66:	f8c4 b010 	str.w	fp, [r4, #16]
 8000b6a:	f04f 0b01 	mov.w	fp, #1
 8000b6e:	f8c4 b010 	str.w	fp, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b72:	f8c4 a010 	str.w	sl, [r4, #16]
 8000b76:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000b7a:	6106      	str	r6, [r0, #16]
 8000b7c:	6105      	str	r5, [r0, #16]
 8000b7e:	f8c2 c010 	str.w	ip, [r2, #16]
 8000b82:	6117      	str	r7, [r2, #16]
 8000b84:	6116      	str	r6, [r2, #16]
 8000b86:	6115      	str	r5, [r2, #16]
	uint32_t i = 0;
	uint32_t j = (uint32_t) w * (uint32_t) h;
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000b88:	1e4d      	subs	r5, r1, #1
 8000b8a:	441d      	add	r5, r3
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8000b8c:	fb03 f30e 	mul.w	r3, r3, lr
 8000b90:	f8c2 8010 	str.w	r8, [r2, #16]
 8000b94:	f8c2 a010 	str.w	sl, [r2, #16]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000b98:	f109 32ff 	add.w	r2, r9, #4294967295
{
 8000b9c:	b08f      	sub	sp, #60	; 0x3c
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000b9e:	4472      	add	r2, lr
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8000ba0:	9301      	str	r3, [sp, #4]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000ba2:	b293      	uxth	r3, r2
 8000ba4:	9302      	str	r3, [sp, #8]
  data[2] = x2 >> 8;
 8000ba6:	f3c5 2207 	ubfx	r2, r5, #8, #8
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000baa:	b2ab      	uxth	r3, r5
  data[3] = x2 & 0xFF;
 8000bac:	b2ed      	uxtb	r5, r5
 8000bae:	9503      	str	r5, [sp, #12]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000bb0:	0bcd      	lsrs	r5, r1, #15
    GPIOx->BSRR = GPIO_Pin;
 8000bb2:	bf18      	it	ne
 8000bb4:	2504      	movne	r5, #4
	data[0] = x1 >> 8;
 8000bb6:	ea4f 2411 	mov.w	r4, r1, lsr #8
  data[2] = x2 >> 8;
 8000bba:	9204      	str	r2, [sp, #16]
 8000bbc:	bf14      	ite	ne
 8000bbe:	6105      	strne	r5, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bc0:	6107      	streq	r7, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000bc2:	0667      	lsls	r7, r4, #25
 8000bc4:	bf54      	ite	pl
 8000bc6:	f44f 2500 	movpl.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000bca:	2508      	movmi	r5, #8
 8000bcc:	4877      	ldr	r0, [pc, #476]	; (8000dac <LCD_Rect_Fill+0x2d0>)
	data[0] = x1 >> 8;
 8000bce:	4626      	mov	r6, r4
 8000bd0:	6105      	str	r5, [r0, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000bd2:	06a5      	lsls	r5, r4, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bd4:	bf54      	ite	pl
 8000bd6:	f44f 1580 	movpl.w	r5, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000bda:	2510      	movmi	r5, #16
 8000bdc:	4873      	ldr	r0, [pc, #460]	; (8000dac <LCD_Rect_Fill+0x2d0>)
 8000bde:	f04f 0b02 	mov.w	fp, #2
 8000be2:	6105      	str	r5, [r0, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000be4:	06e0      	lsls	r0, r4, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000be6:	bf54      	ite	pl
 8000be8:	f44f 1500 	movpl.w	r5, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000bec:	2520      	movmi	r5, #32
 8000bee:	486f      	ldr	r0, [pc, #444]	; (8000dac <LCD_Rect_Fill+0x2d0>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000bf0:	0727      	lsls	r7, r4, #28
 8000bf2:	6105      	str	r5, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bf4:	bf54      	ite	pl
 8000bf6:	f44f 0580 	movpl.w	r5, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000bfa:	2540      	movmi	r5, #64	; 0x40
 8000bfc:	486b      	ldr	r0, [pc, #428]	; (8000dac <LCD_Rect_Fill+0x2d0>)
 8000bfe:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000c02:	6105      	str	r5, [r0, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000c04:	0765      	lsls	r5, r4, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c06:	bf54      	ite	pl
 8000c08:	f44f 0500 	movpl.w	r5, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000c0c:	2580      	movmi	r5, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000c0e:	07a4      	lsls	r4, r4, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c10:	bf54      	ite	pl
 8000c12:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000c16:	2410      	movmi	r4, #16
 8000c18:	4864      	ldr	r0, [pc, #400]	; (8000dac <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c1a:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000c1e:	6105      	str	r5, [r0, #16]
 8000c20:	4863      	ldr	r0, [pc, #396]	; (8000db0 <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c22:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000c26:	6104      	str	r4, [r0, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000c28:	07f0      	lsls	r0, r6, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c2a:	bf54      	ite	pl
 8000c2c:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000c30:	2420      	movmi	r4, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c32:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000c36:	485e      	ldr	r0, [pc, #376]	; (8000db0 <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c38:	4d5c      	ldr	r5, [pc, #368]	; (8000dac <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = GPIO_Pin;
 8000c3a:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c3c:	4c5a      	ldr	r4, [pc, #360]	; (8000da8 <LCD_Rect_Fill+0x2cc>)
 8000c3e:	485c      	ldr	r0, [pc, #368]	; (8000db0 <LCD_Rect_Fill+0x2d4>)
 8000c40:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c42:	f8c4 b010 	str.w	fp, [r4, #16]
 8000c46:	f8c4 a010 	str.w	sl, [r4, #16]
 8000c4a:	f04f 0a01 	mov.w	sl, #1
 8000c4e:	f8c4 a010 	str.w	sl, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c52:	f8c4 8010 	str.w	r8, [r4, #16]
 8000c56:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8000c5a:	612e      	str	r6, [r5, #16]
 8000c5c:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 8000c60:	612f      	str	r7, [r5, #16]
 8000c62:	6104      	str	r4, [r0, #16]
 8000c64:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8000c68:	f8c0 e010 	str.w	lr, [r0, #16]
 8000c6c:	6106      	str	r6, [r0, #16]
 8000c6e:	6107      	str	r7, [r0, #16]
 8000c70:	6104      	str	r4, [r0, #16]
 8000c72:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  data[1] = x1 & 0xFF;
 8000c76:	fa5f fc81 	uxtb.w	ip, r1
 8000c7a:	6104      	str	r4, [r0, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000c7c:	ea5f 10dc 	movs.w	r0, ip, lsr #7
    GPIOx->BSRR = GPIO_Pin;
 8000c80:	bf16      	itet	ne
 8000c82:	2004      	movne	r0, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c84:	f8c5 e010 	streq.w	lr, [r5, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c88:	6128      	strne	r0, [r5, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000c8a:	064f      	lsls	r7, r1, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c8c:	bf54      	ite	pl
 8000c8e:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000c92:	2408      	movmi	r4, #8
 8000c94:	4845      	ldr	r0, [pc, #276]	; (8000dac <LCD_Rect_Fill+0x2d0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000c96:	068e      	lsls	r6, r1, #26
 8000c98:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c9a:	bf54      	ite	pl
 8000c9c:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000ca0:	2410      	movmi	r4, #16
 8000ca2:	4842      	ldr	r0, [pc, #264]	; (8000dac <LCD_Rect_Fill+0x2d0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000ca4:	06cd      	lsls	r5, r1, #27
 8000ca6:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ca8:	bf54      	ite	pl
 8000caa:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000cae:	2420      	movmi	r4, #32
 8000cb0:	483e      	ldr	r0, [pc, #248]	; (8000dac <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cb2:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000cb6:	6104      	str	r4, [r0, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000cb8:	070c      	lsls	r4, r1, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cba:	bf54      	ite	pl
 8000cbc:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000cc0:	2440      	movmi	r4, #64	; 0x40
 8000cc2:	483a      	ldr	r0, [pc, #232]	; (8000dac <LCD_Rect_Fill+0x2d0>)
 8000cc4:	f04f 0b02 	mov.w	fp, #2
 8000cc8:	6104      	str	r4, [r0, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000cca:	0748      	lsls	r0, r1, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ccc:	bf54      	ite	pl
 8000cce:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000cd2:	2480      	movmi	r4, #128	; 0x80
 8000cd4:	4835      	ldr	r0, [pc, #212]	; (8000dac <LCD_Rect_Fill+0x2d0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000cd6:	078f      	lsls	r7, r1, #30
 8000cd8:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cda:	bf54      	ite	pl
 8000cdc:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000ce0:	2010      	movmi	r0, #16
 8000ce2:	4933      	ldr	r1, [pc, #204]	; (8000db0 <LCD_Rect_Fill+0x2d4>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000ce4:	f01c 0f01 	tst.w	ip, #1
 8000ce8:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cea:	bf0c      	ite	eq
 8000cec:	f44f 1000 	moveq.w	r0, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000cf0:	2020      	movne	r0, #32
 8000cf2:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000cf6:	492e      	ldr	r1, [pc, #184]	; (8000db0 <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cf8:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000cfc:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cfe:	482a      	ldr	r0, [pc, #168]	; (8000da8 <LCD_Rect_Fill+0x2cc>)
 8000d00:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8000d04:	6105      	str	r5, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000d06:	f8c0 b010 	str.w	fp, [r0, #16]
 8000d0a:	f8c0 a010 	str.w	sl, [r0, #16]
 8000d0e:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d12:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000d16:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d1a:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8000d1e:	f8c0 8010 	str.w	r8, [r0, #16]
 8000d22:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8000d26:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000d2a:	4921      	ldr	r1, [pc, #132]	; (8000db0 <LCD_Rect_Fill+0x2d4>)
 8000d2c:	4c1f      	ldr	r4, [pc, #124]	; (8000dac <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = GPIO_Pin;
 8000d2e:	f04f 0b02 	mov.w	fp, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d32:	6125      	str	r5, [r4, #16]
 8000d34:	6126      	str	r6, [r4, #16]
 8000d36:	f8c1 e010 	str.w	lr, [r1, #16]
 8000d3a:	610f      	str	r7, [r1, #16]
 8000d3c:	610d      	str	r5, [r1, #16]
 8000d3e:	610e      	str	r6, [r1, #16]
 8000d40:	6108      	str	r0, [r1, #16]
 8000d42:	f8c1 c010 	str.w	ip, [r1, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000d46:	0bd9      	lsrs	r1, r3, #15
    GPIOx->BSRR = GPIO_Pin;
 8000d48:	bf16      	itet	ne
 8000d4a:	2104      	movne	r1, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d4c:	6127      	streq	r7, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000d4e:	6121      	strne	r1, [r4, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000d50:	0656      	lsls	r6, r2, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d52:	bf54      	ite	pl
 8000d54:	f44f 2000 	movpl.w	r0, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000d58:	2008      	movmi	r0, #8
 8000d5a:	4914      	ldr	r1, [pc, #80]	; (8000dac <LCD_Rect_Fill+0x2d0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000d5c:	0695      	lsls	r5, r2, #26
 8000d5e:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d60:	bf54      	ite	pl
 8000d62:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000d66:	2010      	movmi	r0, #16
 8000d68:	4910      	ldr	r1, [pc, #64]	; (8000dac <LCD_Rect_Fill+0x2d0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000d6a:	06d4      	lsls	r4, r2, #27
 8000d6c:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d6e:	bf54      	ite	pl
 8000d70:	f44f 1000 	movpl.w	r0, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000d74:	2020      	movmi	r0, #32
 8000d76:	490d      	ldr	r1, [pc, #52]	; (8000dac <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d78:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000d7c:	6108      	str	r0, [r1, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000d7e:	0710      	lsls	r0, r2, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d80:	bf54      	ite	pl
 8000d82:	f44f 0080 	movpl.w	r0, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000d86:	2040      	movmi	r0, #64	; 0x40
 8000d88:	4908      	ldr	r1, [pc, #32]	; (8000dac <LCD_Rect_Fill+0x2d0>)
 8000d8a:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000d8e:	6108      	str	r0, [r1, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000d90:	0751      	lsls	r1, r2, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d92:	bf54      	ite	pl
 8000d94:	f44f 0000 	movpl.w	r0, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000d98:	2080      	movmi	r0, #128	; 0x80
 8000d9a:	4904      	ldr	r1, [pc, #16]	; (8000dac <LCD_Rect_Fill+0x2d0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000d9c:	0797      	lsls	r7, r2, #30
 8000d9e:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000da0:	bf58      	it	pl
 8000da2:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 8000da6:	e005      	b.n	8000db4 <LCD_Rect_Fill+0x2d8>
 8000da8:	40010c00 	.word	0x40010c00
 8000dac:	40010800 	.word	0x40010800
 8000db0:	40011000 	.word	0x40011000
    GPIOx->BSRR = GPIO_Pin;
 8000db4:	bf48      	it	mi
 8000db6:	2110      	movmi	r1, #16
 8000db8:	4aa9      	ldr	r2, [pc, #676]	; (8001060 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dba:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000dbe:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000dc0:	9a04      	ldr	r2, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dc2:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8000dc6:	07d6      	lsls	r6, r2, #31
 8000dc8:	bf54      	ite	pl
 8000dca:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000dce:	2120      	movmi	r1, #32
 8000dd0:	4aa3      	ldr	r2, [pc, #652]	; (8001060 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dd2:	f44f 2680 	mov.w	r6, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000dd6:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dd8:	49a2      	ldr	r1, [pc, #648]	; (8001064 <LCD_Rect_Fill+0x588>)
 8000dda:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000dde:	610c      	str	r4, [r1, #16]
 8000de0:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000de4:	f8c1 b010 	str.w	fp, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000de8:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000dec:	f8c1 a010 	str.w	sl, [r1, #16]
 8000df0:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000df4:	4a9a      	ldr	r2, [pc, #616]	; (8001060 <LCD_Rect_Fill+0x584>)
 8000df6:	489c      	ldr	r0, [pc, #624]	; (8001068 <LCD_Rect_Fill+0x58c>)
    GPIOx->BSRR = GPIO_Pin;
 8000df8:	f8c1 a010 	str.w	sl, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dfc:	f8c1 8010 	str.w	r8, [r1, #16]
 8000e00:	6104      	str	r4, [r0, #16]
 8000e02:	6105      	str	r5, [r0, #16]
 8000e04:	f8c2 e010 	str.w	lr, [r2, #16]
 8000e08:	6116      	str	r6, [r2, #16]
 8000e0a:	6114      	str	r4, [r2, #16]
 8000e0c:	6115      	str	r5, [r2, #16]
 8000e0e:	f8c2 c010 	str.w	ip, [r2, #16]
 8000e12:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000e14:	9a03      	ldr	r2, [sp, #12]
    GPIOx->BSRR = GPIO_Pin;
 8000e16:	f04f 0e02 	mov.w	lr, #2
 8000e1a:	09d2      	lsrs	r2, r2, #7
 8000e1c:	bf16      	itet	ne
 8000e1e:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e20:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e22:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000e24:	065d      	lsls	r5, r3, #25
 8000e26:	bf4c      	ite	mi
 8000e28:	2108      	movmi	r1, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e2a:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
 8000e2e:	4a8e      	ldr	r2, [pc, #568]	; (8001068 <LCD_Rect_Fill+0x58c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000e30:	069c      	lsls	r4, r3, #26
 8000e32:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e34:	bf4c      	ite	mi
 8000e36:	2110      	movmi	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e38:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 8000e3c:	4a8a      	ldr	r2, [pc, #552]	; (8001068 <LCD_Rect_Fill+0x58c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000e3e:	06d8      	lsls	r0, r3, #27
 8000e40:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e42:	bf4c      	ite	mi
 8000e44:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e46:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
 8000e4a:	4a87      	ldr	r2, [pc, #540]	; (8001068 <LCD_Rect_Fill+0x58c>)
 8000e4c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e50:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000e52:	0719      	lsls	r1, r3, #28
    GPIOx->BSRR = GPIO_Pin;
 8000e54:	bf4c      	ite	mi
 8000e56:	2140      	movmi	r1, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e58:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
 8000e5c:	4a82      	ldr	r2, [pc, #520]	; (8001068 <LCD_Rect_Fill+0x58c>)
 8000e5e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8000e62:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000e64:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = GPIO_Pin;
 8000e66:	bf4c      	ite	mi
 8000e68:	2180      	movmi	r1, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e6a:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
 8000e6e:	4a7e      	ldr	r2, [pc, #504]	; (8001068 <LCD_Rect_Fill+0x58c>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000e70:	079f      	lsls	r7, r3, #30
 8000e72:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e74:	bf4c      	ite	mi
 8000e76:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e78:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000e7c:	4b78      	ldr	r3, [pc, #480]	; (8001060 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = GPIO_Pin;
 8000e7e:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e82:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000e84:	9b03      	ldr	r3, [sp, #12]
 8000e86:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
 8000e8a:	f013 0f01 	tst.w	r3, #1
    GPIOx->BSRR = GPIO_Pin;
 8000e8e:	bf14      	ite	ne
 8000e90:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e92:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000e96:	4973      	ldr	r1, [pc, #460]	; (8001064 <LCD_Rect_Fill+0x588>)
    GPIOx->BSRR = GPIO_Pin;
 8000e98:	4b71      	ldr	r3, [pc, #452]	; (8001060 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e9a:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8000ea4:	6108      	str	r0, [r1, #16]
 8000ea6:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000eaa:	f8c1 e010 	str.w	lr, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eae:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000eb2:	f8c1 c010 	str.w	ip, [r1, #16]
 8000eb6:	f04f 0810 	mov.w	r8, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eba:	610c      	str	r4, [r1, #16]
 8000ebc:	610f      	str	r7, [r1, #16]
 8000ebe:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 8000ec2:	4b67      	ldr	r3, [pc, #412]	; (8001060 <LCD_Rect_Fill+0x584>)
 8000ec4:	4a68      	ldr	r2, [pc, #416]	; (8001068 <LCD_Rect_Fill+0x58c>)
 8000ec6:	6110      	str	r0, [r2, #16]
 8000ec8:	6114      	str	r4, [r2, #16]
 8000eca:	611d      	str	r5, [r3, #16]
 8000ecc:	611e      	str	r6, [r3, #16]
 8000ece:	6118      	str	r0, [r3, #16]
 8000ed0:	611c      	str	r4, [r3, #16]
 8000ed2:	f8c3 a010 	str.w	sl, [r3, #16]
 8000ed6:	f8c3 b010 	str.w	fp, [r3, #16]
 8000eda:	6116      	str	r6, [r2, #16]
 8000edc:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ede:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ee2:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ee4:	2740      	movs	r7, #64	; 0x40
 8000ee6:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ee8:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
 8000eec:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000eee:	2720      	movs	r7, #32
 8000ef0:	f8c3 8010 	str.w	r8, [r3, #16]
 8000ef4:	611f      	str	r7, [r3, #16]
 8000ef6:	2701      	movs	r7, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ef8:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000efa:	f8c1 e010 	str.w	lr, [r1, #16]
 8000efe:	f8c1 c010 	str.w	ip, [r1, #16]
 8000f02:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f04:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
 8000f08:	610f      	str	r7, [r1, #16]
 8000f0a:	6110      	str	r0, [r2, #16]
 8000f0c:	6114      	str	r4, [r2, #16]
 8000f0e:	611d      	str	r5, [r3, #16]
 8000f10:	611e      	str	r6, [r3, #16]
 8000f12:	6118      	str	r0, [r3, #16]
 8000f14:	611c      	str	r4, [r3, #16]
  data[2] = y2 >> 8;
 8000f16:	9c02      	ldr	r4, [sp, #8]
 8000f18:	f8c3 a010 	str.w	sl, [r3, #16]
 8000f1c:	f8c3 b010 	str.w	fp, [r3, #16]
 8000f20:	0a23      	lsrs	r3, r4, #8
  data[3] = y2;
 8000f22:	b2e4      	uxtb	r4, r4
 8000f24:	9403      	str	r4, [sp, #12]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000f26:	ea5f 34d9 	movs.w	r4, r9, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8000f2a:	bf18      	it	ne
 8000f2c:	2404      	movne	r4, #4
	data[0] = y1 >> 8;
 8000f2e:	ea4f 2119 	mov.w	r1, r9, lsr #8
  data[2] = y2 >> 8;
 8000f32:	9304      	str	r3, [sp, #16]
 8000f34:	bf14      	ite	ne
 8000f36:	6114      	strne	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f38:	6116      	streq	r6, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000f3a:	064e      	lsls	r6, r1, #25
 8000f3c:	bf54      	ite	pl
 8000f3e:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000f42:	2408      	movmi	r4, #8
 8000f44:	4a48      	ldr	r2, [pc, #288]	; (8001068 <LCD_Rect_Fill+0x58c>)
	data[0] = y1 >> 8;
 8000f46:	4608      	mov	r0, r1
 8000f48:	6114      	str	r4, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000f4a:	068c      	lsls	r4, r1, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f4c:	bf54      	ite	pl
 8000f4e:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000f52:	2410      	movmi	r4, #16
 8000f54:	4a44      	ldr	r2, [pc, #272]	; (8001068 <LCD_Rect_Fill+0x58c>)
 8000f56:	f04f 0b02 	mov.w	fp, #2
 8000f5a:	6114      	str	r4, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000f5c:	06ca      	lsls	r2, r1, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f5e:	bf54      	ite	pl
 8000f60:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000f64:	2420      	movmi	r4, #32
 8000f66:	4a40      	ldr	r2, [pc, #256]	; (8001068 <LCD_Rect_Fill+0x58c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000f68:	070f      	lsls	r7, r1, #28
 8000f6a:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f6c:	bf54      	ite	pl
 8000f6e:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000f72:	2440      	movmi	r4, #64	; 0x40
 8000f74:	4a3c      	ldr	r2, [pc, #240]	; (8001068 <LCD_Rect_Fill+0x58c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000f76:	074e      	lsls	r6, r1, #29
 8000f78:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f7a:	bf54      	ite	pl
 8000f7c:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000f80:	2480      	movmi	r4, #128	; 0x80
 8000f82:	4a39      	ldr	r2, [pc, #228]	; (8001068 <LCD_Rect_Fill+0x58c>)
 8000f84:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000f88:	6114      	str	r4, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000f8a:	078c      	lsls	r4, r1, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f8c:	bf54      	ite	pl
 8000f8e:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000f92:	2110      	movmi	r1, #16
 8000f94:	4a32      	ldr	r2, [pc, #200]	; (8001060 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f96:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000f9a:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000f9c:	07c1      	lsls	r1, r0, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f9e:	bf54      	ite	pl
 8000fa0:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000fa4:	2120      	movmi	r1, #32
 8000fa6:	4a2e      	ldr	r2, [pc, #184]	; (8001060 <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fa8:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000fac:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fae:	492d      	ldr	r1, [pc, #180]	; (8001064 <LCD_Rect_Fill+0x588>)
 8000fb0:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8000fb4:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000fb6:	f8c1 b010 	str.w	fp, [r1, #16]
 8000fba:	f8c1 a010 	str.w	sl, [r1, #16]
 8000fbe:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fc2:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000fc6:	f8c1 a010 	str.w	sl, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fca:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8000fce:	f8c1 8010 	str.w	r8, [r1, #16]
 8000fd2:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8000fd6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000fda:	4a21      	ldr	r2, [pc, #132]	; (8001060 <LCD_Rect_Fill+0x584>)
 8000fdc:	4822      	ldr	r0, [pc, #136]	; (8001068 <LCD_Rect_Fill+0x58c>)
  data[1] = y1;
 8000fde:	fa5f f589 	uxtb.w	r5, r9
 8000fe2:	6104      	str	r4, [r0, #16]
 8000fe4:	6106      	str	r6, [r0, #16]
 8000fe6:	f8c2 e010 	str.w	lr, [r2, #16]
 8000fea:	6117      	str	r7, [r2, #16]
 8000fec:	6114      	str	r4, [r2, #16]
 8000fee:	6116      	str	r6, [r2, #16]
 8000ff0:	6111      	str	r1, [r2, #16]
 8000ff2:	f8c2 c010 	str.w	ip, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000ff6:	09ea      	lsrs	r2, r5, #7
    GPIOx->BSRR = GPIO_Pin;
 8000ff8:	bf16      	itet	ne
 8000ffa:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ffc:	6107      	streq	r7, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ffe:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001000:	f019 0f40 	tst.w	r9, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001004:	bf0c      	ite	eq
 8001006:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800100a:	2108      	movne	r1, #8
 800100c:	4a16      	ldr	r2, [pc, #88]	; (8001068 <LCD_Rect_Fill+0x58c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800100e:	f019 0f20 	tst.w	r9, #32
 8001012:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001014:	bf0c      	ite	eq
 8001016:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800101a:	2110      	movne	r1, #16
 800101c:	4a12      	ldr	r2, [pc, #72]	; (8001068 <LCD_Rect_Fill+0x58c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800101e:	f019 0f10 	tst.w	r9, #16
 8001022:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001024:	bf0c      	ite	eq
 8001026:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800102a:	2120      	movne	r1, #32
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <LCD_Rect_Fill+0x58c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800102e:	f019 0f08 	tst.w	r9, #8
 8001032:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001034:	bf0c      	ite	eq
 8001036:	f44f 0180 	moveq.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800103a:	2140      	movne	r1, #64	; 0x40
 800103c:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <LCD_Rect_Fill+0x58c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800103e:	f019 0f04 	tst.w	r9, #4
 8001042:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001044:	bf0c      	ite	eq
 8001046:	f44f 0100 	moveq.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800104a:	2180      	movne	r1, #128	; 0x80
 800104c:	4a06      	ldr	r2, [pc, #24]	; (8001068 <LCD_Rect_Fill+0x58c>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800104e:	f019 0f02 	tst.w	r9, #2
 8001052:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001054:	bf0c      	ite	eq
 8001056:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800105a:	2110      	movne	r1, #16
 800105c:	e006      	b.n	800106c <LCD_Rect_Fill+0x590>
 800105e:	bf00      	nop
 8001060:	40011000 	.word	0x40011000
 8001064:	40010c00 	.word	0x40010c00
 8001068:	40010800 	.word	0x40010800
 800106c:	4ab5      	ldr	r2, [pc, #724]	; (8001344 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800106e:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8001072:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001074:	07ea      	lsls	r2, r5, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001076:	bf54      	ite	pl
 8001078:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800107c:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800107e:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8001082:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8001086:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 800108a:	f04f 0b02 	mov.w	fp, #2
 800108e:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8001092:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001096:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 800109a:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 800109e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 80010a2:	4aa8      	ldr	r2, [pc, #672]	; (8001344 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010a4:	48a8      	ldr	r0, [pc, #672]	; (8001348 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = GPIO_Pin;
 80010a6:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010a8:	49a8      	ldr	r1, [pc, #672]	; (800134c <LCD_Rect_Fill+0x870>)
 80010aa:	4aa6      	ldr	r2, [pc, #664]	; (8001344 <LCD_Rect_Fill+0x868>)
 80010ac:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 80010ae:	f8c1 b010 	str.w	fp, [r1, #16]
 80010b2:	f8c1 a010 	str.w	sl, [r1, #16]
 80010b6:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010ba:	f8c1 8010 	str.w	r8, [r1, #16]
 80010be:	6104      	str	r4, [r0, #16]
 80010c0:	6105      	str	r5, [r0, #16]
 80010c2:	f8c2 e010 	str.w	lr, [r2, #16]
 80010c6:	6116      	str	r6, [r2, #16]
 80010c8:	6114      	str	r4, [r2, #16]
 80010ca:	6115      	str	r5, [r2, #16]
 80010cc:	f8c2 c010 	str.w	ip, [r2, #16]
 80010d0:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80010d2:	9a02      	ldr	r2, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 80010d4:	f04f 0a02 	mov.w	sl, #2
 80010d8:	0bd2      	lsrs	r2, r2, #15
 80010da:	bf16      	itet	ne
 80010dc:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010de:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 80010e0:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80010e2:	065f      	lsls	r7, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010e4:	bf54      	ite	pl
 80010e6:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80010ea:	2108      	movmi	r1, #8
 80010ec:	4a96      	ldr	r2, [pc, #600]	; (8001348 <LCD_Rect_Fill+0x86c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80010ee:	069e      	lsls	r6, r3, #26
 80010f0:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010f2:	bf54      	ite	pl
 80010f4:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80010f8:	2110      	movmi	r1, #16
 80010fa:	4a93      	ldr	r2, [pc, #588]	; (8001348 <LCD_Rect_Fill+0x86c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80010fc:	06dd      	lsls	r5, r3, #27
 80010fe:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001100:	bf54      	ite	pl
 8001102:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001106:	2120      	movmi	r1, #32
 8001108:	4a8f      	ldr	r2, [pc, #572]	; (8001348 <LCD_Rect_Fill+0x86c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800110a:	071c      	lsls	r4, r3, #28
 800110c:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800110e:	bf54      	ite	pl
 8001110:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001114:	2140      	movmi	r1, #64	; 0x40
 8001116:	4a8c      	ldr	r2, [pc, #560]	; (8001348 <LCD_Rect_Fill+0x86c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001118:	0758      	lsls	r0, r3, #29
 800111a:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800111c:	bf54      	ite	pl
 800111e:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001122:	2180      	movmi	r1, #128	; 0x80
 8001124:	4a88      	ldr	r2, [pc, #544]	; (8001348 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001126:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 800112a:	6111      	str	r1, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800112c:	0799      	lsls	r1, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800112e:	bf54      	ite	pl
 8001130:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001134:	2210      	movmi	r2, #16
 8001136:	4b83      	ldr	r3, [pc, #524]	; (8001344 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001138:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 800113c:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800113e:	9b04      	ldr	r3, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001140:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8001144:	f013 0f01 	tst.w	r3, #1
 8001148:	bf0c      	ite	eq
 800114a:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800114e:	2220      	movne	r2, #32
 8001150:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8001154:	f04f 0801 	mov.w	r8, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001158:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 800115c:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8001160:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8001164:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8001168:	4b76      	ldr	r3, [pc, #472]	; (8001344 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800116a:	4977      	ldr	r1, [pc, #476]	; (8001348 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = GPIO_Pin;
 800116c:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800116e:	4a77      	ldr	r2, [pc, #476]	; (800134c <LCD_Rect_Fill+0x870>)
 8001170:	4b74      	ldr	r3, [pc, #464]	; (8001344 <LCD_Rect_Fill+0x868>)
 8001172:	6110      	str	r0, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001174:	f8c2 a010 	str.w	sl, [r2, #16]
 8001178:	f8c2 9010 	str.w	r9, [r2, #16]
 800117c:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001180:	f8c2 e010 	str.w	lr, [r2, #16]
 8001184:	6108      	str	r0, [r1, #16]
 8001186:	610c      	str	r4, [r1, #16]
 8001188:	f8c3 c010 	str.w	ip, [r3, #16]
 800118c:	611d      	str	r5, [r3, #16]
 800118e:	6118      	str	r0, [r3, #16]
 8001190:	611c      	str	r4, [r3, #16]
 8001192:	611f      	str	r7, [r3, #16]
 8001194:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001196:	9b03      	ldr	r3, [sp, #12]
 8001198:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800119c:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 800119e:	bf1c      	itt	ne
 80011a0:	2304      	movne	r3, #4
 80011a2:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80011a4:	9b02      	ldr	r3, [sp, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011a6:	bf08      	it	eq
 80011a8:	610d      	streq	r5, [r1, #16]
 80011aa:	f013 0f40 	tst.w	r3, #64	; 0x40
    GPIOx->BSRR = GPIO_Pin;
 80011ae:	bf14      	ite	ne
 80011b0:	2208      	movne	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011b2:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80011b6:	4b64      	ldr	r3, [pc, #400]	; (8001348 <LCD_Rect_Fill+0x86c>)
 80011b8:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011bc:	611a      	str	r2, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80011be:	9b02      	ldr	r3, [sp, #8]
 80011c0:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 80011c4:	f013 0f20 	tst.w	r3, #32
    GPIOx->BSRR = GPIO_Pin;
 80011c8:	bf14      	ite	ne
 80011ca:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011cc:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80011d0:	4b5d      	ldr	r3, [pc, #372]	; (8001348 <LCD_Rect_Fill+0x86c>)
 80011d2:	2402      	movs	r4, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011d4:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80011d6:	9b02      	ldr	r3, [sp, #8]
 80011d8:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 80011dc:	f013 0f10 	tst.w	r3, #16
    GPIOx->BSRR = GPIO_Pin;
 80011e0:	bf14      	ite	ne
 80011e2:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011e4:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80011e8:	4b57      	ldr	r3, [pc, #348]	; (8001348 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80011ee:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80011f0:	9b02      	ldr	r3, [sp, #8]
 80011f2:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 80011f6:	f013 0f08 	tst.w	r3, #8
    GPIOx->BSRR = GPIO_Pin;
 80011fa:	bf14      	ite	ne
 80011fc:	2240      	movne	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011fe:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001202:	4b51      	ldr	r3, [pc, #324]	; (8001348 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001204:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8001208:	611a      	str	r2, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800120a:	9b02      	ldr	r3, [sp, #8]
 800120c:	494f      	ldr	r1, [pc, #316]	; (800134c <LCD_Rect_Fill+0x870>)
 800120e:	f013 0f04 	tst.w	r3, #4
    GPIOx->BSRR = GPIO_Pin;
 8001212:	bf14      	ite	ne
 8001214:	2280      	movne	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001216:	f44f 0200 	moveq.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800121a:	4b4b      	ldr	r3, [pc, #300]	; (8001348 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800121c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8001220:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001222:	9b02      	ldr	r3, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 8001224:	f04f 0910 	mov.w	r9, #16
 8001228:	079a      	lsls	r2, r3, #30
 800122a:	bf4c      	ite	mi
 800122c:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800122e:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8001232:	4b44      	ldr	r3, [pc, #272]	; (8001344 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = GPIO_Pin;
 8001234:	f04f 0840 	mov.w	r8, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001238:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800123a:	9b03      	ldr	r3, [sp, #12]
 800123c:	07db      	lsls	r3, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 800123e:	bf4c      	ite	mi
 8001240:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001242:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8001246:	4b3f      	ldr	r3, [pc, #252]	; (8001344 <LCD_Rect_Fill+0x868>)
 8001248:	611a      	str	r2, [r3, #16]
 800124a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800124e:	6108      	str	r0, [r1, #16]
 8001250:	4a3c      	ldr	r2, [pc, #240]	; (8001344 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = GPIO_Pin;
 8001252:	610c      	str	r4, [r1, #16]
 8001254:	610d      	str	r5, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001256:	f8c1 e010 	str.w	lr, [r1, #16]
 800125a:	610b      	str	r3, [r1, #16]
 800125c:	f103 5370 	add.w	r3, r3, #1006632960	; 0x3c000000
 8001260:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001264:	6118      	str	r0, [r3, #16]
 8001266:	f8c3 e010 	str.w	lr, [r3, #16]
 800126a:	f8c2 c010 	str.w	ip, [r2, #16]
 800126e:	6117      	str	r7, [r2, #16]
 8001270:	6110      	str	r0, [r2, #16]
 8001272:	f8c2 e010 	str.w	lr, [r2, #16]
 8001276:	f8c2 b010 	str.w	fp, [r2, #16]
 800127a:	f8c2 a010 	str.w	sl, [r2, #16]
 800127e:	611f      	str	r7, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001280:	2780      	movs	r7, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001282:	f8c3 c010 	str.w	ip, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001286:	f8c3 9010 	str.w	r9, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800128a:	611e      	str	r6, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800128c:	f8c3 8010 	str.w	r8, [r3, #16]
 8001290:	611f      	str	r7, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001292:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 8001296:	6117      	str	r7, [r2, #16]
 8001298:	6116      	str	r6, [r2, #16]
 800129a:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800129c:	610c      	str	r4, [r1, #16]
 800129e:	610d      	str	r5, [r1, #16]
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80012a0:	9d01      	ldr	r5, [sp, #4]
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	f000 80c8 	beq.w	8001438 <LCD_Rect_Fill+0x95c>
 80012a8:	2500      	movs	r5, #0
 80012aa:	2601      	movs	r6, #1
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 80012ac:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80012ae:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80012b2:	f3c7 2785 	ubfx	r7, r7, #10, #6
 80012b6:	f3cc 4cc4 	ubfx	ip, ip, #19, #5
 80012ba:	017f      	lsls	r7, r7, #5
 80012bc:	ea47 27cc 	orr.w	r7, r7, ip, lsl #11
 80012c0:	f3c7 3880 	ubfx	r8, r7, #14, #1
 80012c4:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80012c8:	f8cd 8008 	str.w	r8, [sp, #8]
 80012cc:	f3c7 3840 	ubfx	r8, r7, #13, #1
 80012d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80012d4:	f3c7 3800 	ubfx	r8, r7, #12, #1
 80012d8:	f3c9 1940 	ubfx	r9, r9, #5, #1
 80012dc:	f8cd 8010 	str.w	r8, [sp, #16]
 80012e0:	f3c7 28c0 	ubfx	r8, r7, #11, #1
 80012e4:	f8cd 8014 	str.w	r8, [sp, #20]
 80012e8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80012ec:	f3c7 2880 	ubfx	r8, r7, #10, #1
 80012f0:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80012f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80012f8:	f3c7 2840 	ubfx	r8, r7, #9, #1
 80012fc:	f3c9 1900 	ubfx	r9, r9, #4, #1
 8001300:	f8cd 801c 	str.w	r8, [sp, #28]
 8001304:	f3c7 2800 	ubfx	r8, r7, #8, #1
 8001308:	f8cd 8020 	str.w	r8, [sp, #32]
 800130c:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8001310:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8001314:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8001318:	f3c8 18c0 	ubfx	r8, r8, #7, #1
 800131c:	f3c7 1ac0 	ubfx	sl, r7, #7, #1
 8001320:	f3c7 1b80 	ubfx	fp, r7, #6, #1
 8001324:	f3c9 09c0 	ubfx	r9, r9, #3, #1
 8001328:	f3c7 1740 	ubfx	r7, r7, #5, #1
 800132c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8001330:	e9cd 970c 	strd	r9, r7, [sp, #48]	; 0x30
 8001334:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001338:	f3cc 1c10 	ubfx	ip, ip, #4, #17
 800133c:	f3c8 1880 	ubfx	r8, r8, #6, #1
 8001340:	e006      	b.n	8001350 <LCD_Rect_Fill+0x874>
 8001342:	bf00      	nop
 8001344:	40011000 	.word	0x40011000
 8001348:	40010800 	.word	0x40010800
 800134c:	40010c00 	.word	0x40010c00
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001350:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8001354:	610e      	str	r6, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001356:	610f      	str	r7, [r1, #16]
 8001358:	f1bc 0f00 	cmp.w	ip, #0
 800135c:	f000 80ac 	beq.w	80014b8 <LCD_Rect_Fill+0x9dc>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001360:	9f02      	ldr	r7, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 8001362:	611c      	str	r4, [r3, #16]
 8001364:	2f00      	cmp	r7, #0
 8001366:	f000 80ac 	beq.w	80014c2 <LCD_Rect_Fill+0x9e6>
 800136a:	611e      	str	r6, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 800136c:	9f03      	ldr	r7, [sp, #12]
 800136e:	2f00      	cmp	r7, #0
 8001370:	f000 809e 	beq.w	80014b0 <LCD_Rect_Fill+0x9d4>
 8001374:	f04f 0908 	mov.w	r9, #8
 8001378:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 800137c:	9f04      	ldr	r7, [sp, #16]
 800137e:	2f00      	cmp	r7, #0
 8001380:	f000 8091 	beq.w	80014a6 <LCD_Rect_Fill+0x9ca>
 8001384:	f04f 0904 	mov.w	r9, #4
 8001388:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 800138c:	9f05      	ldr	r7, [sp, #20]
 800138e:	2f00      	cmp	r7, #0
 8001390:	f000 8087 	beq.w	80014a2 <LCD_Rect_Fill+0x9c6>
 8001394:	6114      	str	r4, [r2, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001396:	9f06      	ldr	r7, [sp, #24]
 8001398:	2f00      	cmp	r7, #0
 800139a:	d07f      	beq.n	800149c <LCD_Rect_Fill+0x9c0>
 800139c:	6116      	str	r6, [r2, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 800139e:	9f07      	ldr	r7, [sp, #28]
 80013a0:	2f00      	cmp	r7, #0
 80013a2:	d076      	beq.n	8001492 <LCD_Rect_Fill+0x9b6>
 80013a4:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 80013a8:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 80013ac:	9f08      	ldr	r7, [sp, #32]
 80013ae:	2f00      	cmp	r7, #0
 80013b0:	d06a      	beq.n	8001488 <LCD_Rect_Fill+0x9ac>
 80013b2:	f44f 4980 	mov.w	r9, #16384	; 0x4000
 80013b6:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80013ba:	f1ba 0f00 	cmp.w	sl, #0
 80013be:	d05e      	beq.n	800147e <LCD_Rect_Fill+0x9a2>
 80013c0:	f04f 0904 	mov.w	r9, #4
 80013c4:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80013c8:	f1bb 0f00 	cmp.w	fp, #0
 80013cc:	d053      	beq.n	8001476 <LCD_Rect_Fill+0x99a>
 80013ce:	f04f 0908 	mov.w	r9, #8
 80013d2:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80013d6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80013d8:	2f00      	cmp	r7, #0
 80013da:	d047      	beq.n	800146c <LCD_Rect_Fill+0x990>
 80013dc:	f04f 0910 	mov.w	r9, #16
 80013e0:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80013e4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80013e6:	2f00      	cmp	r7, #0
 80013e8:	d03b      	beq.n	8001462 <LCD_Rect_Fill+0x986>
 80013ea:	f04f 0920 	mov.w	r9, #32
 80013ee:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80013f2:	f1b8 0f00 	cmp.w	r8, #0
 80013f6:	d02f      	beq.n	8001458 <LCD_Rect_Fill+0x97c>
 80013f8:	f04f 0940 	mov.w	r9, #64	; 0x40
 80013fc:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001400:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8001402:	b327      	cbz	r7, 800144e <LCD_Rect_Fill+0x972>
 8001404:	f04f 0980 	mov.w	r9, #128	; 0x80
 8001408:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800140c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800140e:	b1cf      	cbz	r7, 8001444 <LCD_Rect_Fill+0x968>
 8001410:	f04f 0910 	mov.w	r9, #16
 8001414:	f8c2 9010 	str.w	r9, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001418:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 800141a:	3501      	adds	r5, #1
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800141c:	b17f      	cbz	r7, 800143e <LCD_Rect_Fill+0x962>
 800141e:	f04f 0920 	mov.w	r9, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001422:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001426:	f44f 6980 	mov.w	r9, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 800142a:	9f01      	ldr	r7, [sp, #4]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800142c:	6108      	str	r0, [r1, #16]
 800142e:	42af      	cmp	r7, r5
    GPIOx->BSRR = GPIO_Pin;
 8001430:	610c      	str	r4, [r1, #16]
 8001432:	f8c1 9010 	str.w	r9, [r1, #16]
 8001436:	d18b      	bne.n	8001350 <LCD_Rect_Fill+0x874>
}
 8001438:	b00f      	add	sp, #60	; 0x3c
 800143a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800143e:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
 8001442:	e7ee      	b.n	8001422 <LCD_Rect_Fill+0x946>
 8001444:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
 8001448:	f8c2 9010 	str.w	r9, [r2, #16]
}
 800144c:	e7e4      	b.n	8001418 <LCD_Rect_Fill+0x93c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800144e:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
 8001452:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001456:	e7d9      	b.n	800140c <LCD_Rect_Fill+0x930>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001458:	f44f 0980 	mov.w	r9, #4194304	; 0x400000
 800145c:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001460:	e7ce      	b.n	8001400 <LCD_Rect_Fill+0x924>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001462:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
 8001466:	f8c3 9010 	str.w	r9, [r3, #16]
}
 800146a:	e7c2      	b.n	80013f2 <LCD_Rect_Fill+0x916>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800146c:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
 8001470:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001474:	e7b6      	b.n	80013e4 <LCD_Rect_Fill+0x908>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001476:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 800147a:	611f      	str	r7, [r3, #16]
}
 800147c:	e7ab      	b.n	80013d6 <LCD_Rect_Fill+0x8fa>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800147e:	f44f 2980 	mov.w	r9, #262144	; 0x40000
 8001482:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001486:	e79f      	b.n	80013c8 <LCD_Rect_Fill+0x8ec>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001488:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 800148c:	f8c2 9010 	str.w	r9, [r2, #16]
}
 8001490:	e793      	b.n	80013ba <LCD_Rect_Fill+0x8de>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001492:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8001496:	f8c2 9010 	str.w	r9, [r2, #16]
}
 800149a:	e787      	b.n	80013ac <LCD_Rect_Fill+0x8d0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800149c:	f8c2 e010 	str.w	lr, [r2, #16]
}
 80014a0:	e77d      	b.n	800139e <LCD_Rect_Fill+0x8c2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014a2:	6110      	str	r0, [r2, #16]
}
 80014a4:	e777      	b.n	8001396 <LCD_Rect_Fill+0x8ba>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014a6:	f44f 2980 	mov.w	r9, #262144	; 0x40000
 80014aa:	f8c2 9010 	str.w	r9, [r2, #16]
}
 80014ae:	e76d      	b.n	800138c <LCD_Rect_Fill+0x8b0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014b0:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 80014b4:	6117      	str	r7, [r2, #16]
}
 80014b6:	e761      	b.n	800137c <LCD_Rect_Fill+0x8a0>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 80014b8:	9f02      	ldr	r7, [sp, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014ba:	6118      	str	r0, [r3, #16]
 80014bc:	2f00      	cmp	r7, #0
 80014be:	f47f af54 	bne.w	800136a <LCD_Rect_Fill+0x88e>
 80014c2:	f8c3 e010 	str.w	lr, [r3, #16]
}
 80014c6:	e751      	b.n	800136c <LCD_Rect_Fill+0x890>

080014c8 <HAL_GPIO_Init>:
{
 80014c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014cc:	680e      	ldr	r6, [r1, #0]
{
 80014ce:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d0:	2e00      	cmp	r6, #0
 80014d2:	f000 80b2 	beq.w	800163a <HAL_GPIO_Init+0x172>
 80014d6:	2200      	movs	r2, #0
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014d8:	4f74      	ldr	r7, [pc, #464]	; (80016ac <HAL_GPIO_Init+0x1e4>)
  uint32_t config = 0x00u;
 80014da:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 80014dc:	4613      	mov	r3, r2
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014de:	4d74      	ldr	r5, [pc, #464]	; (80016b0 <HAL_GPIO_Init+0x1e8>)
      switch (GPIO_Init->Mode)
 80014e0:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 80016b4 <HAL_GPIO_Init+0x1ec>
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x2c>
	position++;
 80014e6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e8:	fa36 f403 	lsrs.w	r4, r6, r3
 80014ec:	f102 0204 	add.w	r2, r2, #4
 80014f0:	f000 80a3 	beq.w	800163a <HAL_GPIO_Init+0x172>
    ioposition = (0x01uL << position);
 80014f4:	2401      	movs	r4, #1
 80014f6:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 80014f8:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fc:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8001500:	d1f1      	bne.n	80014e6 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8001502:	684e      	ldr	r6, [r1, #4]
 8001504:	2e12      	cmp	r6, #18
 8001506:	f200 809b 	bhi.w	8001640 <HAL_GPIO_Init+0x178>
 800150a:	2e12      	cmp	r6, #18
 800150c:	d81a      	bhi.n	8001544 <HAL_GPIO_Init+0x7c>
 800150e:	e8df f006 	tbb	[pc, r6]
 8001512:	baa4      	.short	0xbaa4
 8001514:	1919c3b6 	.word	0x1919c3b6
 8001518:	19191919 	.word	0x19191919
 800151c:	19191919 	.word	0x19191919
 8001520:	ae191919 	.word	0xae191919
 8001524:	b2          	.byte	0xb2
 8001525:	00          	.byte	0x00
 8001526:	f8df e190 	ldr.w	lr, [pc, #400]	; 80016b8 <HAL_GPIO_Init+0x1f0>
 800152a:	4576      	cmp	r6, lr
 800152c:	f000 8095 	beq.w	800165a <HAL_GPIO_Init+0x192>
 8001530:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8001534:	4576      	cmp	r6, lr
 8001536:	f000 8090 	beq.w	800165a <HAL_GPIO_Init+0x192>
 800153a:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800153e:	4576      	cmp	r6, lr
 8001540:	f000 808b 	beq.w	800165a <HAL_GPIO_Init+0x192>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001544:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8001548:	bf9c      	itt	ls
 800154a:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800154c:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800154e:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001552:	bf84      	itt	hi
 8001554:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001558:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800155c:	f8de 4000 	ldr.w	r4, [lr]
 8001560:	fa0a f90b 	lsl.w	r9, sl, fp
 8001564:	fa06 fb0b 	lsl.w	fp, r6, fp
 8001568:	ea24 040b 	bic.w	r4, r4, fp
 800156c:	ea44 0409 	orr.w	r4, r4, r9
 8001570:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001574:	684c      	ldr	r4, [r1, #4]
 8001576:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800157a:	d076      	beq.n	800166a <HAL_GPIO_Init+0x1a2>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800157c:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001580:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001584:	f04e 0e01 	orr.w	lr, lr, #1
 8001588:	f8c7 e018 	str.w	lr, [r7, #24]
 800158c:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001590:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001594:	f00e 0e01 	and.w	lr, lr, #1
 8001598:	f8cd e004 	str.w	lr, [sp, #4]
 800159c:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80015a0:	f023 0e03 	bic.w	lr, r3, #3
 80015a4:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 80015a8:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 80015ac:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015b0:	fa06 f609 	lsl.w	r6, r6, r9
 80015b4:	ea2b 0b06 	bic.w	fp, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015b8:	4e40      	ldr	r6, [pc, #256]	; (80016bc <HAL_GPIO_Init+0x1f4>)
 80015ba:	42b0      	cmp	r0, r6
 80015bc:	d068      	beq.n	8001690 <HAL_GPIO_Init+0x1c8>
 80015be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015c2:	42b0      	cmp	r0, r6
 80015c4:	d066      	beq.n	8001694 <HAL_GPIO_Init+0x1cc>
 80015c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015ca:	42b0      	cmp	r0, r6
 80015cc:	d05e      	beq.n	800168c <HAL_GPIO_Init+0x1c4>
 80015ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015d2:	42b0      	cmp	r0, r6
 80015d4:	bf0c      	ite	eq
 80015d6:	2603      	moveq	r6, #3
 80015d8:	2604      	movne	r6, #4
 80015da:	fa06 f609 	lsl.w	r6, r6, r9
 80015de:	ea46 060b 	orr.w	r6, r6, fp
        AFIO->EXTICR[position >> 2u] = temp;
 80015e2:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80015e6:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015e8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80015ec:	bf14      	ite	ne
 80015ee:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015f2:	ea26 060c 	biceq.w	r6, r6, ip
 80015f6:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80015f8:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015fa:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80015fe:	bf14      	ite	ne
 8001600:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001604:	ea26 060c 	biceq.w	r6, r6, ip
 8001608:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800160a:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800160c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001610:	bf14      	ite	ne
 8001612:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001616:	ea26 060c 	biceq.w	r6, r6, ip
 800161a:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800161c:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001620:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001622:	d01f      	beq.n	8001664 <HAL_GPIO_Init+0x19c>
          SET_BIT(EXTI->FTSR, iocurrent);
 8001624:	ea44 040c 	orr.w	r4, r4, ip
 8001628:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162a:	680e      	ldr	r6, [r1, #0]
	position++;
 800162c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162e:	fa36 f403 	lsrs.w	r4, r6, r3
 8001632:	f102 0204 	add.w	r2, r2, #4
 8001636:	f47f af5d 	bne.w	80014f4 <HAL_GPIO_Init+0x2c>
}
 800163a:	b003      	add	sp, #12
 800163c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001640:	4546      	cmp	r6, r8
 8001642:	d00a      	beq.n	800165a <HAL_GPIO_Init+0x192>
 8001644:	f67f af6f 	bls.w	8001526 <HAL_GPIO_Init+0x5e>
 8001648:	f8df e074 	ldr.w	lr, [pc, #116]	; 80016c0 <HAL_GPIO_Init+0x1f8>
 800164c:	4576      	cmp	r6, lr
 800164e:	d004      	beq.n	800165a <HAL_GPIO_Init+0x192>
 8001650:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001654:	4576      	cmp	r6, lr
 8001656:	f47f af75 	bne.w	8001544 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800165a:	688e      	ldr	r6, [r1, #8]
 800165c:	b9fe      	cbnz	r6, 800169e <HAL_GPIO_Init+0x1d6>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800165e:	f04f 0a04 	mov.w	sl, #4
 8001662:	e76f      	b.n	8001544 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001664:	ea24 040c 	bic.w	r4, r4, ip
 8001668:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166a:	680e      	ldr	r6, [r1, #0]
 800166c:	e73b      	b.n	80014e6 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800166e:	68cc      	ldr	r4, [r1, #12]
 8001670:	f104 0a04 	add.w	sl, r4, #4
          break;
 8001674:	e766      	b.n	8001544 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001676:	68cc      	ldr	r4, [r1, #12]
 8001678:	f104 0a0c 	add.w	sl, r4, #12
          break;
 800167c:	e762      	b.n	8001544 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800167e:	68cc      	ldr	r4, [r1, #12]
 8001680:	f104 0a08 	add.w	sl, r4, #8
          break;
 8001684:	e75e      	b.n	8001544 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001686:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 800168a:	e75b      	b.n	8001544 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800168c:	2602      	movs	r6, #2
 800168e:	e7a4      	b.n	80015da <HAL_GPIO_Init+0x112>
 8001690:	2600      	movs	r6, #0
 8001692:	e7a2      	b.n	80015da <HAL_GPIO_Init+0x112>
 8001694:	2601      	movs	r6, #1
 8001696:	e7a0      	b.n	80015da <HAL_GPIO_Init+0x112>
      switch (GPIO_Init->Mode)
 8001698:	f04f 0a00 	mov.w	sl, #0
 800169c:	e752      	b.n	8001544 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800169e:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016a0:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 80016a4:	bf0c      	ite	eq
 80016a6:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 80016a8:	6144      	strne	r4, [r0, #20]
 80016aa:	e74b      	b.n	8001544 <HAL_GPIO_Init+0x7c>
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010400 	.word	0x40010400
 80016b4:	10220000 	.word	0x10220000
 80016b8:	10120000 	.word	0x10120000
 80016bc:	40010800 	.word	0x40010800
 80016c0:	10310000 	.word	0x10310000

080016c4 <LCD_Line.constprop.0>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 80016c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016c8:	4605      	mov	r5, r0
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80016ca:	f44f 709f 	mov.w	r0, #318	; 0x13e
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 80016ce:	46ae      	mov	lr, r5
 80016d0:	b0bb      	sub	sp, #236	; 0xec
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80016d2:	9034      	str	r0, [sp, #208]	; 0xd0
 80016d4:	2001      	movs	r0, #1
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 80016d6:	4615      	mov	r5, r2
 80016d8:	9110      	str	r1, [sp, #64]	; 0x40
 80016da:	9239      	str	r2, [sp, #228]	; 0xe4
 80016dc:	461a      	mov	r2, r3
{
	int deltaX = abs(x2 - x1);
 80016de:	eba1 030e 	sub.w	r3, r1, lr
	int deltaY = abs(y2 - y1);
	int signX = x1 < x2 ? 1 : -1;
 80016e2:	4571      	cmp	r1, lr
 80016e4:	bf8c      	ite	hi
 80016e6:	2101      	movhi	r1, #1
 80016e8:	f04f 31ff 	movls.w	r1, #4294967295
 80016ec:	2600      	movs	r6, #0
 80016ee:	9021      	str	r0, [sp, #132]	; 0x84
 80016f0:	203e      	movs	r0, #62	; 0x3e
	int signY = y1 < y2 ? 1 : -1;
 80016f2:	f5b5 7f9f 	cmp.w	r5, #318	; 0x13e
	int signX = x1 < x2 ? 1 : -1;
 80016f6:	9137      	str	r1, [sp, #220]	; 0xdc
	int signY = y1 < y2 ? 1 : -1;
 80016f8:	bf8c      	ite	hi
 80016fa:	2101      	movhi	r1, #1
 80016fc:	f04f 31ff 	movls.w	r1, #4294967295
 8001700:	e9cd 6626 	strd	r6, r6, [sp, #152]	; 0x98
 8001704:	e9cd 6624 	strd	r6, r6, [sp, #144]	; 0x90
 8001708:	e9cd 6622 	strd	r6, r6, [sp, #136]	; 0x88
 800170c:	9628      	str	r6, [sp, #160]	; 0xa0
 800170e:	9029      	str	r0, [sp, #164]	; 0xa4
 8001710:	9620      	str	r6, [sp, #128]	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001712:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 8001716:	f04f 6b80 	mov.w	fp, #67108864	; 0x4000000
 800171a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800171e:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8001722:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8001726:	2602      	movs	r6, #2
	int deltaX = abs(x2 - x1);
 8001728:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
 800172c:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
	int deltaY = abs(y2 - y1);
 8001730:	f5a5 739f 	sub.w	r3, r5, #318	; 0x13e
 8001734:	ea83 78e3 	eor.w	r8, r3, r3, asr #31
 8001738:	eba8 78e3 	sub.w	r8, r8, r3, asr #31
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 800173c:	f3c2 2385 	ubfx	r3, r2, #10, #6
	int signY = y1 < y2 ? 1 : -1;
 8001740:	9138      	str	r1, [sp, #224]	; 0xe0
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8001742:	015b      	lsls	r3, r3, #5
 8001744:	f3c2 41c4 	ubfx	r1, r2, #19, #5
 8001748:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 800174c:	f3c1 1110 	ubfx	r1, r1, #4, #17
 8001750:	9135      	str	r1, [sp, #212]	; 0xd4
 8001752:	f3c3 3180 	ubfx	r1, r3, #14, #1
 8001756:	9101      	str	r1, [sp, #4]
 8001758:	f3c3 3140 	ubfx	r1, r3, #13, #1
 800175c:	9102      	str	r1, [sp, #8]
 800175e:	f3c3 3100 	ubfx	r1, r3, #12, #1
 8001762:	9103      	str	r1, [sp, #12]
 8001764:	f3c3 21c0 	ubfx	r1, r3, #11, #1
 8001768:	9104      	str	r1, [sp, #16]
 800176a:	f3c3 2180 	ubfx	r1, r3, #10, #1
 800176e:	9105      	str	r1, [sp, #20]
 8001770:	f3c3 2140 	ubfx	r1, r3, #9, #1
 8001774:	9106      	str	r1, [sp, #24]
 8001776:	f3c3 2100 	ubfx	r1, r3, #8, #1
 800177a:	9107      	str	r1, [sp, #28]
 800177c:	f3c3 11c0 	ubfx	r1, r3, #7, #1
 8001780:	9108      	str	r1, [sp, #32]
 8001782:	f3c3 1180 	ubfx	r1, r3, #6, #1
 8001786:	9109      	str	r1, [sp, #36]	; 0x24
 8001788:	f3c3 1140 	ubfx	r1, r3, #5, #1
 800178c:	910a      	str	r1, [sp, #40]	; 0x28
 800178e:	f3c2 11c0 	ubfx	r1, r2, #7, #1
 8001792:	910b      	str	r1, [sp, #44]	; 0x2c
 8001794:	f3c2 1180 	ubfx	r1, r2, #6, #1
 8001798:	910c      	str	r1, [sp, #48]	; 0x30
 800179a:	f3c2 1140 	ubfx	r1, r2, #5, #1
 800179e:	910d      	str	r1, [sp, #52]	; 0x34
 80017a0:	f3c2 1100 	ubfx	r1, r2, #4, #1
	int deltaX = abs(x2 - x1);
 80017a4:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
	int deltaY = abs(y2 - y1);
 80017a8:	f8cd 80cc 	str.w	r8, [sp, #204]	; 0xcc
 80017ac:	910e      	str	r1, [sp, #56]	; 0x38
 80017ae:	f3c2 01c0 	ubfx	r1, r2, #3, #1
	int error = deltaX - deltaY;
 80017b2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80017b4:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80017b6:	910f      	str	r1, [sp, #60]	; 0x3c
 80017b8:	ea4f 211e 	mov.w	r1, lr, lsr #8
 80017bc:	1a9b      	subs	r3, r3, r2
 80017be:	912b      	str	r1, [sp, #172]	; 0xac
 80017c0:	ea4f 31de 	mov.w	r1, lr, lsr #15
 80017c4:	9132      	str	r1, [sp, #200]	; 0xc8
 80017c6:	9311      	str	r3, [sp, #68]	; 0x44
 80017c8:	ea4f 319e 	mov.w	r1, lr, lsr #14
 80017cc:	ea4f 239e 	mov.w	r3, lr, lsr #10
 80017d0:	9131      	str	r1, [sp, #196]	; 0xc4
 80017d2:	932d      	str	r3, [sp, #180]	; 0xb4
 80017d4:	ea4f 315e 	mov.w	r1, lr, lsr #13
 80017d8:	ea4f 235e 	mov.w	r3, lr, lsr #9
 80017dc:	9130      	str	r1, [sp, #192]	; 0xc0
 80017de:	932c      	str	r3, [sp, #176]	; 0xb0
 80017e0:	ea4f 311e 	mov.w	r1, lr, lsr #12
 80017e4:	fa5f f38e 	uxtb.w	r3, lr
 80017e8:	912f      	str	r1, [sp, #188]	; 0xbc
 80017ea:	931f      	str	r3, [sp, #124]	; 0x7c
 80017ec:	ea4f 21de 	mov.w	r1, lr, lsr #11
 80017f0:	f00e 0301 	and.w	r3, lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017f4:	f8df a358 	ldr.w	sl, [pc, #856]	; 8001b50 <LCD_Line.constprop.0+0x48c>
 80017f8:	f8df 8358 	ldr.w	r8, [pc, #856]	; 8001b54 <LCD_Line.constprop.0+0x490>
 80017fc:	f8df c358 	ldr.w	ip, [pc, #856]	; 8001b58 <LCD_Line.constprop.0+0x494>
 8001800:	912e      	str	r1, [sp, #184]	; 0xb8
 8001802:	932a      	str	r3, [sp, #168]	; 0xa8
 8001804:	f8cd e000 	str.w	lr, [sp]
	data[0] = x1 >> 8;
 8001808:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 800180c:	f8ca 9010 	str.w	r9, [sl, #16]
 8001810:	f8ca b010 	str.w	fp, [sl, #16]
 8001814:	f8c8 0010 	str.w	r0, [r8, #16]
 8001818:	f8c8 9010 	str.w	r9, [r8, #16]
 800181c:	f8cc 4010 	str.w	r4, [ip, #16]
 8001820:	f8cc 7010 	str.w	r7, [ip, #16]
 8001824:	f8cc 0010 	str.w	r0, [ip, #16]
 8001828:	f8cc 9010 	str.w	r9, [ip, #16]
 800182c:	9512      	str	r5, [sp, #72]	; 0x48
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800182e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8001830:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001834:	b2ab      	uxth	r3, r5
 8001836:	9314      	str	r3, [sp, #80]	; 0x50
 8001838:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 800183c:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800183e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001842:	f8cc e010 	str.w	lr, [ip, #16]
 8001846:	f8cc 1010 	str.w	r1, [ip, #16]
 800184a:	f8c8 7010 	str.w	r7, [r8, #16]
 800184e:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001852:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001856:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800185a:	2340      	movs	r3, #64	; 0x40
 800185c:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001860:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001864:	f8c8 3010 	str.w	r3, [r8, #16]
 8001868:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800186c:	f8cc 2010 	str.w	r2, [ip, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001870:	f8cc 3010 	str.w	r3, [ip, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001874:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001878:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800187c:	f8ca 6010 	str.w	r6, [sl, #16]
 8001880:	f8ca 3010 	str.w	r3, [sl, #16]
 8001884:	2301      	movs	r3, #1
 8001886:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800188a:	f8ca b010 	str.w	fp, [sl, #16]
 800188e:	f8c8 0010 	str.w	r0, [r8, #16]
 8001892:	f8c8 9010 	str.w	r9, [r8, #16]
 8001896:	f8cc 4010 	str.w	r4, [ip, #16]
 800189a:	f8cc 7010 	str.w	r7, [ip, #16]
 800189e:	f8cc 0010 	str.w	r0, [ip, #16]
 80018a2:	f8cc 9010 	str.w	r9, [ip, #16]
 80018a6:	f8cc e010 	str.w	lr, [ip, #16]
 80018aa:	f8cc 1010 	str.w	r1, [ip, #16]
 80018ae:	2d00      	cmp	r5, #0
 80018b0:	f000 8560 	beq.w	8002374 <LCD_Line.constprop.0+0xcb0>
    GPIOx->BSRR = GPIO_Pin;
 80018b4:	2304      	movs	r3, #4
 80018b6:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80018ba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80018bc:	f013 0301 	ands.w	r3, r3, #1
 80018c0:	9315      	str	r3, [sp, #84]	; 0x54
 80018c2:	bf1c      	itt	ne
 80018c4:	2308      	movne	r3, #8
 80018c6:	f8c8 3010 	strne.w	r3, [r8, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80018ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018cc:	bf08      	it	eq
 80018ce:	f8c8 4010 	streq.w	r4, [r8, #16]
 80018d2:	f013 0301 	ands.w	r3, r3, #1
 80018d6:	9316      	str	r3, [sp, #88]	; 0x58
 80018d8:	bf0c      	ite	eq
 80018da:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80018de:	2310      	movne	r3, #16
 80018e0:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80018e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80018e6:	f013 0301 	ands.w	r3, r3, #1
 80018ea:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018ec:	bf0c      	ite	eq
 80018ee:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80018f2:	2320      	movne	r3, #32
 80018f4:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80018f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80018fa:	f013 0301 	ands.w	r3, r3, #1
 80018fe:	9318      	str	r3, [sp, #96]	; 0x60
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001900:	bf0c      	ite	eq
 8001902:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001906:	2340      	movne	r3, #64	; 0x40
 8001908:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800190c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800190e:	f013 0301 	ands.w	r3, r3, #1
 8001912:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001914:	bf0c      	ite	eq
 8001916:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800191a:	2380      	movne	r3, #128	; 0x80
 800191c:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001920:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001922:	f013 0301 	ands.w	r3, r3, #1
 8001926:	9319      	str	r3, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001928:	bf0c      	ite	eq
 800192a:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800192e:	2310      	movne	r3, #16
 8001930:	f8cc 3010 	str.w	r3, [ip, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001934:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001936:	f013 0301 	ands.w	r3, r3, #1
 800193a:	9312      	str	r3, [sp, #72]	; 0x48
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800193c:	bf0c      	ite	eq
 800193e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001942:	2320      	movne	r3, #32
 8001944:	f8cc 3010 	str.w	r3, [ip, #16]
 8001948:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800194c:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001950:	f8ca 6010 	str.w	r6, [sl, #16]
 8001954:	f8ca 3010 	str.w	r3, [sl, #16]
 8001958:	2301      	movs	r3, #1
 800195a:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800195e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001962:	f8ca b010 	str.w	fp, [sl, #16]
 8001966:	f8c8 0010 	str.w	r0, [r8, #16]
 800196a:	f8c8 9010 	str.w	r9, [r8, #16]
 800196e:	f8cc 4010 	str.w	r4, [ip, #16]
 8001972:	f8cc 7010 	str.w	r7, [ip, #16]
 8001976:	f8cc 0010 	str.w	r0, [ip, #16]
 800197a:	f8cc 9010 	str.w	r9, [ip, #16]
 800197e:	f8cc 3010 	str.w	r3, [ip, #16]
 8001982:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001986:	f8cc 3010 	str.w	r3, [ip, #16]
 800198a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800198c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800198e:	fa1f fe83 	uxth.w	lr, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001992:	09db      	lsrs	r3, r3, #7
 8001994:	931a      	str	r3, [sp, #104]	; 0x68
    GPIOx->BSRR = GPIO_Pin;
 8001996:	bf16      	itet	ne
 8001998:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800199a:	f8c8 7010 	streq.w	r7, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800199e:	f8c8 3010 	strne.w	r3, [r8, #16]
 80019a2:	f3ce 1380 	ubfx	r3, lr, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80019a6:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80019aa:	931c      	str	r3, [sp, #112]	; 0x70
 80019ac:	bf16      	itet	ne
 80019ae:	2308      	movne	r3, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019b0:	f8c8 4010 	streq.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80019b4:	f8c8 3010 	strne.w	r3, [r8, #16]
 80019b8:	f3ce 1340 	ubfx	r3, lr, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80019bc:	f01e 0f20 	tst.w	lr, #32
 80019c0:	931d      	str	r3, [sp, #116]	; 0x74
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019c2:	bf0c      	ite	eq
 80019c4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80019c8:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80019ca:	f01e 0f10 	tst.w	lr, #16
 80019ce:	f8c8 3010 	str.w	r3, [r8, #16]
 80019d2:	f3ce 1300 	ubfx	r3, lr, #4, #1
 80019d6:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019d8:	bf0c      	ite	eq
 80019da:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80019de:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80019e0:	f01e 0f08 	tst.w	lr, #8
 80019e4:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019e8:	bf0c      	ite	eq
 80019ea:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80019ee:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80019f0:	f01e 0f04 	tst.w	lr, #4
 80019f4:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019f8:	bf0c      	ite	eq
 80019fa:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80019fe:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001a00:	f01e 0f02 	tst.w	lr, #2
 8001a04:	f3ce 01c0 	ubfx	r1, lr, #3, #1
 8001a08:	f3ce 0280 	ubfx	r2, lr, #2, #1
 8001a0c:	f8c8 3010 	str.w	r3, [r8, #16]
 8001a10:	f3ce 0340 	ubfx	r3, lr, #1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a14:	bf0c      	ite	eq
 8001a16:	f44f 1e80 	moveq.w	lr, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001a1a:	f04f 0e10 	movne.w	lr, #16
 8001a1e:	f8cc e010 	str.w	lr, [ip, #16]
 8001a22:	fa1f fe85 	uxth.w	lr, r5
 8001a26:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001a2a:	2d00      	cmp	r5, #0
 8001a2c:	f040 849c 	bne.w	8002368 <LCD_Line.constprop.0+0xca4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a30:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001a34:	f8cc e010 	str.w	lr, [ip, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001a38:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001a3c:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a40:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001a44:	f8ca 6010 	str.w	r6, [sl, #16]
 8001a48:	f8ca 5010 	str.w	r5, [sl, #16]
 8001a4c:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a50:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001a54:	f8ca b010 	str.w	fp, [sl, #16]
 8001a58:	f8c8 0010 	str.w	r0, [r8, #16]
 8001a5c:	f8c8 9010 	str.w	r9, [r8, #16]
 8001a60:	f8cc 4010 	str.w	r4, [ip, #16]
 8001a64:	f8cc 7010 	str.w	r7, [ip, #16]
 8001a68:	f8cc 0010 	str.w	r0, [ip, #16]
 8001a6c:	f8cc 9010 	str.w	r9, [ip, #16]
 8001a70:	f8cc e010 	str.w	lr, [ip, #16]
 8001a74:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001a78:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8001a7a:	f8cc e010 	str.w	lr, [ip, #16]
 8001a7e:	2d00      	cmp	r5, #0
 8001a80:	f000 846e 	beq.w	8002360 <LCD_Line.constprop.0+0xc9c>
    GPIOx->BSRR = GPIO_Pin;
 8001a84:	f04f 0e04 	mov.w	lr, #4
 8001a88:	f8c8 e010 	str.w	lr, [r8, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001a8c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001a8e:	2d00      	cmp	r5, #0
 8001a90:	f040 8460 	bne.w	8002354 <LCD_Line.constprop.0+0xc90>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a94:	f8c8 4010 	str.w	r4, [r8, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001a98:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8001a9a:	2d00      	cmp	r5, #0
 8001a9c:	f040 8454 	bne.w	8002348 <LCD_Line.constprop.0+0xc84>
 8001aa0:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001aa4:	f8c8 e010 	str.w	lr, [r8, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001aa8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8001aaa:	2d00      	cmp	r5, #0
 8001aac:	f040 8446 	bne.w	800233c <LCD_Line.constprop.0+0xc78>
 8001ab0:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001ab4:	f8c8 e010 	str.w	lr, [r8, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001ab8:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8001aba:	2d00      	cmp	r5, #0
 8001abc:	f040 8438 	bne.w	8002330 <LCD_Line.constprop.0+0xc6c>
 8001ac0:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 8001ac4:	f8c8 e010 	str.w	lr, [r8, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001ac8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8001aca:	2d00      	cmp	r5, #0
 8001acc:	f040 842a 	bne.w	8002324 <LCD_Line.constprop.0+0xc60>
 8001ad0:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
 8001ad4:	f8c8 e010 	str.w	lr, [r8, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001ad8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8001ada:	2d00      	cmp	r5, #0
 8001adc:	f040 841c 	bne.w	8002318 <LCD_Line.constprop.0+0xc54>
 8001ae0:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001ae4:	f8cc e010 	str.w	lr, [ip, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001ae8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8001aea:	2d00      	cmp	r5, #0
 8001aec:	f040 840e 	bne.w	800230c <LCD_Line.constprop.0+0xc48>
 8001af0:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001af4:	f8cc e010 	str.w	lr, [ip, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001af8:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001afc:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b00:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001b04:	f8ca 6010 	str.w	r6, [sl, #16]
 8001b08:	f8ca 5010 	str.w	r5, [sl, #16]
 8001b0c:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b10:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001b14:	f8ca b010 	str.w	fp, [sl, #16]
 8001b18:	f8c8 0010 	str.w	r0, [r8, #16]
 8001b1c:	f8c8 9010 	str.w	r9, [r8, #16]
 8001b20:	f8cc 4010 	str.w	r4, [ip, #16]
 8001b24:	f8cc 7010 	str.w	r7, [ip, #16]
 8001b28:	f8cc 0010 	str.w	r0, [ip, #16]
 8001b2c:	f8cc 9010 	str.w	r9, [ip, #16]
 8001b30:	f8cc e010 	str.w	lr, [ip, #16]
 8001b34:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001b38:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8001b3a:	f8cc e010 	str.w	lr, [ip, #16]
 8001b3e:	2d00      	cmp	r5, #0
 8001b40:	f000 83e1 	beq.w	8002306 <LCD_Line.constprop.0+0xc42>
    GPIOx->BSRR = GPIO_Pin;
 8001b44:	f04f 0e04 	mov.w	lr, #4
 8001b48:	f8c8 e010 	str.w	lr, [r8, #16]
 8001b4c:	e006      	b.n	8001b5c <LCD_Line.constprop.0+0x498>
 8001b4e:	bf00      	nop
 8001b50:	40010c00 	.word	0x40010c00
 8001b54:	40010800 	.word	0x40010800
 8001b58:	40011000 	.word	0x40011000
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001b5c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8001b5e:	2d00      	cmp	r5, #0
 8001b60:	f040 83cc 	bne.w	80022fc <LCD_Line.constprop.0+0xc38>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b64:	f8c8 4010 	str.w	r4, [r8, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001b68:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8001b6a:	2d00      	cmp	r5, #0
 8001b6c:	f040 83c1 	bne.w	80022f2 <LCD_Line.constprop.0+0xc2e>
 8001b70:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001b74:	f8c8 e010 	str.w	lr, [r8, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001b78:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8001b7a:	2d00      	cmp	r5, #0
 8001b7c:	f040 83b4 	bne.w	80022e8 <LCD_Line.constprop.0+0xc24>
 8001b80:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001b84:	f8c8 e010 	str.w	lr, [r8, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001b88:	2900      	cmp	r1, #0
 8001b8a:	f040 83a9 	bne.w	80022e0 <LCD_Line.constprop.0+0xc1c>
 8001b8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001b92:	f8c8 1010 	str.w	r1, [r8, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001b96:	2a00      	cmp	r2, #0
 8001b98:	f040 839e 	bne.w	80022d8 <LCD_Line.constprop.0+0xc14>
 8001b9c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ba0:	f8c8 2010 	str.w	r2, [r8, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f040 8393 	bne.w	80022d0 <LCD_Line.constprop.0+0xc0c>
 8001baa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001bae:	f8cc 3010 	str.w	r3, [ip, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001bb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f040 8387 	bne.w	80022c8 <LCD_Line.constprop.0+0xc04>
 8001bba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bbe:	f8cc 3010 	str.w	r3, [ip, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001bc6:	9d32      	ldr	r5, [sp, #200]	; 0xc8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bc8:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001bcc:	f8ca 6010 	str.w	r6, [sl, #16]
 8001bd0:	f8ca 3010 	str.w	r3, [sl, #16]
 8001bd4:	b2ab      	uxth	r3, r5
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bd6:	f8ca 9010 	str.w	r9, [sl, #16]
 8001bda:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001bde:	f8ca b010 	str.w	fp, [sl, #16]
 8001be2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001be6:	f8c8 0010 	str.w	r0, [r8, #16]
 8001bea:	f8c8 9010 	str.w	r9, [r8, #16]
 8001bee:	f8cc 4010 	str.w	r4, [ip, #16]
 8001bf2:	f8cc 7010 	str.w	r7, [ip, #16]
 8001bf6:	f8cc 0010 	str.w	r0, [ip, #16]
 8001bfa:	f8cc 9010 	str.w	r9, [ip, #16]
 8001bfe:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIOx->BSRR = GPIO_Pin;
 8001c00:	2310      	movs	r3, #16
	data[0] = y1 >> 8;
 8001c02:	f8bd e0ac 	ldrh.w	lr, [sp, #172]	; 0xac
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c06:	f8cc 1010 	str.w	r1, [ip, #16]
 8001c0a:	f8cc 2010 	str.w	r2, [ip, #16]
 8001c0e:	f8c8 7010 	str.w	r7, [r8, #16]
 8001c12:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001c16:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c1e:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001c22:	2340      	movs	r3, #64	; 0x40
 8001c24:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c28:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001c2c:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001c30:	2310      	movs	r3, #16
 8001c32:	f8cc 3010 	str.w	r3, [ip, #16]
 8001c36:	2320      	movs	r3, #32
 8001c38:	f8cc 3010 	str.w	r3, [ip, #16]
 8001c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c40:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001c44:	f8ca 6010 	str.w	r6, [sl, #16]
 8001c48:	f8ca 3010 	str.w	r3, [sl, #16]
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c52:	f8ca b010 	str.w	fp, [sl, #16]
 8001c56:	f8c8 0010 	str.w	r0, [r8, #16]
 8001c5a:	f8c8 9010 	str.w	r9, [r8, #16]
 8001c5e:	f8cc 4010 	str.w	r4, [ip, #16]
 8001c62:	f8cc 7010 	str.w	r7, [ip, #16]
 8001c66:	f8cc 0010 	str.w	r0, [ip, #16]
 8001c6a:	f8cc 9010 	str.w	r9, [ip, #16]
 8001c6e:	f8cc 1010 	str.w	r1, [ip, #16]
 8001c72:	f8cc 2010 	str.w	r2, [ip, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001c76:	2d00      	cmp	r5, #0
 8001c78:	f000 8323 	beq.w	80022c2 <LCD_Line.constprop.0+0xbfe>
    GPIOx->BSRR = GPIO_Pin;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001c82:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8001c84:	f013 0301 	ands.w	r3, r3, #1
 8001c88:	931a      	str	r3, [sp, #104]	; 0x68
 8001c8a:	bf1c      	itt	ne
 8001c8c:	2308      	movne	r3, #8
 8001c8e:	f8c8 3010 	strne.w	r3, [r8, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001c92:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c94:	bf08      	it	eq
 8001c96:	f8c8 4010 	streq.w	r4, [r8, #16]
 8001c9a:	f013 0301 	ands.w	r3, r3, #1
 8001c9e:	9319      	str	r3, [sp, #100]	; 0x64
 8001ca0:	bf0c      	ite	eq
 8001ca2:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001ca6:	2310      	movne	r3, #16
 8001ca8:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001cac:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8001cae:	f013 0301 	ands.w	r3, r3, #1
 8001cb2:	9318      	str	r3, [sp, #96]	; 0x60
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cb4:	bf0c      	ite	eq
 8001cb6:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001cba:	2320      	movne	r3, #32
 8001cbc:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001cc0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8001cc2:	f013 0301 	ands.w	r3, r3, #1
 8001cc6:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cc8:	bf0c      	ite	eq
 8001cca:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001cce:	2340      	movne	r3, #64	; 0x40
 8001cd0:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001cd4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8001cd6:	f013 0301 	ands.w	r3, r3, #1
 8001cda:	9316      	str	r3, [sp, #88]	; 0x58
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cdc:	bf0c      	ite	eq
 8001cde:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001ce2:	2380      	movne	r3, #128	; 0x80
 8001ce4:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001ce8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001cea:	f013 0301 	ands.w	r3, r3, #1
 8001cee:	9315      	str	r3, [sp, #84]	; 0x54
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cf0:	bf0c      	ite	eq
 8001cf2:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001cf6:	2310      	movne	r3, #16
 8001cf8:	f8cc 3010 	str.w	r3, [ip, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001cfc:	f01e 0301 	ands.w	r3, lr, #1
 8001d00:	9314      	str	r3, [sp, #80]	; 0x50
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d02:	bf0c      	ite	eq
 8001d04:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001d08:	2320      	movne	r3, #32
 8001d0a:	f8cc 3010 	str.w	r3, [ip, #16]
 8001d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d12:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001d16:	f8ca 6010 	str.w	r6, [sl, #16]
 8001d1a:	f8ca 3010 	str.w	r3, [sl, #16]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001d28:	f8ca b010 	str.w	fp, [sl, #16]
 8001d2c:	f8c8 0010 	str.w	r0, [r8, #16]
 8001d30:	f8c8 9010 	str.w	r9, [r8, #16]
 8001d34:	f8cc 4010 	str.w	r4, [ip, #16]
 8001d38:	f8cc 7010 	str.w	r7, [ip, #16]
 8001d3c:	f8cc 0010 	str.w	r0, [ip, #16]
 8001d40:	f8cc 9010 	str.w	r9, [ip, #16]
 8001d44:	f8cc 3010 	str.w	r3, [ip, #16]
 8001d48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d4c:	f8cc 3010 	str.w	r3, [ip, #16]
 8001d50:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001d52:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8001d54:	fa1f fe83 	uxth.w	lr, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001d58:	09db      	lsrs	r3, r3, #7
 8001d5a:	931d      	str	r3, [sp, #116]	; 0x74
    GPIOx->BSRR = GPIO_Pin;
 8001d5c:	bf16      	itet	ne
 8001d5e:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d60:	f8c8 7010 	streq.w	r7, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001d64:	f8c8 3010 	strne.w	r3, [r8, #16]
 8001d68:	f3ce 1380 	ubfx	r3, lr, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001d6c:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8001d70:	9313      	str	r3, [sp, #76]	; 0x4c
 8001d72:	bf16      	itet	ne
 8001d74:	2308      	movne	r3, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d76:	f8c8 4010 	streq.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001d7a:	f8c8 3010 	strne.w	r3, [r8, #16]
 8001d7e:	f3ce 1340 	ubfx	r3, lr, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001d82:	f01e 0f20 	tst.w	lr, #32
 8001d86:	931c      	str	r3, [sp, #112]	; 0x70
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d88:	bf0c      	ite	eq
 8001d8a:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001d8e:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001d90:	f01e 0f10 	tst.w	lr, #16
 8001d94:	f8c8 3010 	str.w	r3, [r8, #16]
 8001d98:	f3ce 1300 	ubfx	r3, lr, #4, #1
 8001d9c:	9312      	str	r3, [sp, #72]	; 0x48
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d9e:	bf0c      	ite	eq
 8001da0:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001da4:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001da6:	f01e 0f08 	tst.w	lr, #8
 8001daa:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dae:	bf0c      	ite	eq
 8001db0:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001db4:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001db6:	f01e 0f04 	tst.w	lr, #4
 8001dba:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dbe:	bf0c      	ite	eq
 8001dc0:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001dc4:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001dc6:	f01e 0f02 	tst.w	lr, #2
 8001dca:	f3ce 01c0 	ubfx	r1, lr, #3, #1
 8001dce:	f3ce 0280 	ubfx	r2, lr, #2, #1
 8001dd2:	f8c8 3010 	str.w	r3, [r8, #16]
 8001dd6:	f3ce 0340 	ubfx	r3, lr, #1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dda:	bf0c      	ite	eq
 8001ddc:	f44f 1e80 	moveq.w	lr, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001de0:	f04f 0e10 	movne.w	lr, #16
 8001de4:	f8cc e010 	str.w	lr, [ip, #16]
 8001de8:	fa1f fe85 	uxth.w	lr, r5
 8001dec:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001df0:	2d00      	cmp	r5, #0
 8001df2:	f040 8261 	bne.w	80022b8 <LCD_Line.constprop.0+0xbf4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001df6:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001dfa:	f8cc e010 	str.w	lr, [ip, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001dfe:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001e02:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e06:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001e0a:	f8ca 6010 	str.w	r6, [sl, #16]
 8001e0e:	f8ca 5010 	str.w	r5, [sl, #16]
 8001e12:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e16:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001e1a:	f8ca b010 	str.w	fp, [sl, #16]
 8001e1e:	f8c8 0010 	str.w	r0, [r8, #16]
 8001e22:	f8c8 9010 	str.w	r9, [r8, #16]
 8001e26:	f8cc 4010 	str.w	r4, [ip, #16]
 8001e2a:	f8cc 7010 	str.w	r7, [ip, #16]
 8001e2e:	f8cc 0010 	str.w	r0, [ip, #16]
 8001e32:	f8cc 9010 	str.w	r9, [ip, #16]
 8001e36:	f8cc e010 	str.w	lr, [ip, #16]
 8001e3a:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001e3e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8001e40:	f8cc e010 	str.w	lr, [ip, #16]
 8001e44:	2d00      	cmp	r5, #0
 8001e46:	f000 8234 	beq.w	80022b2 <LCD_Line.constprop.0+0xbee>
    GPIOx->BSRR = GPIO_Pin;
 8001e4a:	f04f 0e04 	mov.w	lr, #4
 8001e4e:	f8c8 e010 	str.w	lr, [r8, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001e52:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8001e54:	2d00      	cmp	r5, #0
 8001e56:	f040 8227 	bne.w	80022a8 <LCD_Line.constprop.0+0xbe4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e5a:	f8c8 4010 	str.w	r4, [r8, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001e5e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8001e60:	2d00      	cmp	r5, #0
 8001e62:	f040 821c 	bne.w	800229e <LCD_Line.constprop.0+0xbda>
 8001e66:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001e6a:	f8c8 e010 	str.w	lr, [r8, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001e6e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8001e70:	2d00      	cmp	r5, #0
 8001e72:	f040 820f 	bne.w	8002294 <LCD_Line.constprop.0+0xbd0>
 8001e76:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001e7a:	f8c8 e010 	str.w	lr, [r8, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001e7e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8001e80:	2d00      	cmp	r5, #0
 8001e82:	f040 8202 	bne.w	800228a <LCD_Line.constprop.0+0xbc6>
 8001e86:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 8001e8a:	f8c8 e010 	str.w	lr, [r8, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001e8e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8001e90:	2d00      	cmp	r5, #0
 8001e92:	f040 81f5 	bne.w	8002280 <LCD_Line.constprop.0+0xbbc>
 8001e96:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
 8001e9a:	f8c8 e010 	str.w	lr, [r8, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001e9e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001ea0:	2d00      	cmp	r5, #0
 8001ea2:	f040 81e8 	bne.w	8002276 <LCD_Line.constprop.0+0xbb2>
 8001ea6:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001eaa:	f8cc e010 	str.w	lr, [ip, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001eae:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8001eb0:	2d00      	cmp	r5, #0
 8001eb2:	f040 81db 	bne.w	800226c <LCD_Line.constprop.0+0xba8>
 8001eb6:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001eba:	f8cc e010 	str.w	lr, [ip, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001ebe:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001ec2:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ec6:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001eca:	f8ca 6010 	str.w	r6, [sl, #16]
 8001ece:	f8ca 5010 	str.w	r5, [sl, #16]
 8001ed2:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ed6:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001eda:	f8ca b010 	str.w	fp, [sl, #16]
 8001ede:	f8c8 0010 	str.w	r0, [r8, #16]
 8001ee2:	f8c8 9010 	str.w	r9, [r8, #16]
 8001ee6:	f8cc 4010 	str.w	r4, [ip, #16]
 8001eea:	f8cc 7010 	str.w	r7, [ip, #16]
 8001eee:	f8cc 0010 	str.w	r0, [ip, #16]
 8001ef2:	f8cc 9010 	str.w	r9, [ip, #16]
 8001ef6:	f8cc e010 	str.w	lr, [ip, #16]
 8001efa:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001efe:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8001f00:	f8cc e010 	str.w	lr, [ip, #16]
 8001f04:	2d00      	cmp	r5, #0
 8001f06:	f000 81ae 	beq.w	8002266 <LCD_Line.constprop.0+0xba2>
    GPIOx->BSRR = GPIO_Pin;
 8001f0a:	f04f 0e04 	mov.w	lr, #4
 8001f0e:	f8c8 e010 	str.w	lr, [r8, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001f12:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8001f14:	2d00      	cmp	r5, #0
 8001f16:	f040 81a1 	bne.w	800225c <LCD_Line.constprop.0+0xb98>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f1a:	f8c8 4010 	str.w	r4, [r8, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001f1e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8001f20:	2d00      	cmp	r5, #0
 8001f22:	f040 8196 	bne.w	8002252 <LCD_Line.constprop.0+0xb8e>
 8001f26:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001f2a:	f8c8 e010 	str.w	lr, [r8, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001f2e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8001f30:	2d00      	cmp	r5, #0
 8001f32:	f040 8189 	bne.w	8002248 <LCD_Line.constprop.0+0xb84>
 8001f36:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001f3a:	f8c8 e010 	str.w	lr, [r8, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001f3e:	2900      	cmp	r1, #0
 8001f40:	f040 817e 	bne.w	8002240 <LCD_Line.constprop.0+0xb7c>
 8001f44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001f48:	f8c8 1010 	str.w	r1, [r8, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001f4c:	2a00      	cmp	r2, #0
 8001f4e:	f040 8173 	bne.w	8002238 <LCD_Line.constprop.0+0xb74>
 8001f52:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f56:	f8c8 2010 	str.w	r2, [r8, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f040 8168 	bne.w	8002230 <LCD_Line.constprop.0+0xb6c>
 8001f60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f64:	f8cc 3010 	str.w	r3, [ip, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001f68:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f040 815c 	bne.w	8002228 <LCD_Line.constprop.0+0xb64>
 8001f70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f74:	f8cc 3010 	str.w	r3, [ip, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001f78:	f44f 6180 	mov.w	r1, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f80:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001f84:	f8ca 6010 	str.w	r6, [sl, #16]
 8001f88:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f8c:	f8ca 9010 	str.w	r9, [sl, #16]
 8001f90:	f8ca b010 	str.w	fp, [sl, #16]
 8001f94:	f8c8 0010 	str.w	r0, [r8, #16]
 8001f98:	f8c8 9010 	str.w	r9, [r8, #16]
 8001f9c:	f8cc 4010 	str.w	r4, [ip, #16]
 8001fa0:	f8cc 7010 	str.w	r7, [ip, #16]
 8001fa4:	f8cc 0010 	str.w	r0, [ip, #16]
 8001fa8:	f8cc 9010 	str.w	r9, [ip, #16]
 8001fac:	f8cc 2010 	str.w	r2, [ip, #16]
 8001fb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fb4:	f8cc 2010 	str.w	r2, [ip, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001fb8:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fba:	f8c8 7010 	str.w	r7, [r8, #16]
 8001fbe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fc2:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001fc6:	f8c8 2010 	str.w	r2, [r8, #16]
 8001fca:	2240      	movs	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fcc:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001fd0:	f8c8 2010 	str.w	r2, [r8, #16]
 8001fd4:	2280      	movs	r2, #128	; 0x80
 8001fd6:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001fde:	f8cc 2010 	str.w	r2, [ip, #16]
 8001fe2:	f8cc 3010 	str.w	r3, [ip, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001fe6:	2301      	movs	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fe8:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001fec:	f8ca 6010 	str.w	r6, [sl, #16]
 8001ff0:	f8ca 1010 	str.w	r1, [sl, #16]
 8001ff4:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001ff8:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ffa:	f8ca b010 	str.w	fp, [sl, #16]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 810f 	beq.w	8002222 <LCD_Line.constprop.0+0xb5e>
    GPIOx->BSRR = GPIO_Pin;
 8002004:	f8c8 6010 	str.w	r6, [r8, #16]
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8002008:	9b01      	ldr	r3, [sp, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 8106 	beq.w	800221c <LCD_Line.constprop.0+0xb58>
 8002010:	2301      	movs	r3, #1
 8002012:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8002016:	9b02      	ldr	r3, [sp, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80fc 	beq.w	8002216 <LCD_Line.constprop.0+0xb52>
 800201e:	2308      	movs	r3, #8
 8002020:	f8cc 3010 	str.w	r3, [ip, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8002024:	9b03      	ldr	r3, [sp, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 80f2 	beq.w	8002210 <LCD_Line.constprop.0+0xb4c>
 800202c:	2304      	movs	r3, #4
 800202e:	f8cc 3010 	str.w	r3, [ip, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8002032:	9b04      	ldr	r3, [sp, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80e8 	beq.w	800220a <LCD_Line.constprop.0+0xb46>
 800203a:	f8cc 6010 	str.w	r6, [ip, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 800203e:	9b05      	ldr	r3, [sp, #20]
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 80df 	beq.w	8002204 <LCD_Line.constprop.0+0xb40>
 8002046:	2301      	movs	r3, #1
 8002048:	f8cc 3010 	str.w	r3, [ip, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 800204c:	9b06      	ldr	r3, [sp, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 80d3 	beq.w	80021fa <LCD_Line.constprop.0+0xb36>
 8002054:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002058:	f8cc 3010 	str.w	r3, [ip, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 800205c:	9b07      	ldr	r3, [sp, #28]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 80c6 	beq.w	80021f0 <LCD_Line.constprop.0+0xb2c>
 8002064:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002068:	f8cc 3010 	str.w	r3, [ip, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800206c:	9b08      	ldr	r3, [sp, #32]
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 80bb 	beq.w	80021ea <LCD_Line.constprop.0+0xb26>
 8002074:	2304      	movs	r3, #4
 8002076:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800207a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80b1 	beq.w	80021e4 <LCD_Line.constprop.0+0xb20>
 8002082:	2308      	movs	r3, #8
 8002084:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80a5 	beq.w	80021da <LCD_Line.constprop.0+0xb16>
 8002090:	2310      	movs	r3, #16
 8002092:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 8099 	beq.w	80021d0 <LCD_Line.constprop.0+0xb0c>
 800209e:	2320      	movs	r3, #32
 80020a0:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80020a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 808d 	beq.w	80021c6 <LCD_Line.constprop.0+0xb02>
 80020ac:	2340      	movs	r3, #64	; 0x40
 80020ae:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80020b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8081 	beq.w	80021bc <LCD_Line.constprop.0+0xaf8>
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80020c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d075      	beq.n	80021b2 <LCD_Line.constprop.0+0xaee>
 80020c6:	2310      	movs	r3, #16
 80020c8:	f8cc 3010 	str.w	r3, [ip, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80020cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d06a      	beq.n	80021a8 <LCD_Line.constprop.0+0xae4>
 80020d2:	2320      	movs	r3, #32
 80020d4:	f8cc 3010 	str.w	r3, [ip, #16]
 80020d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020dc:	f8ca 0010 	str.w	r0, [sl, #16]
	int error2 = 0;
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
		if (x1 == x2 && y1 == y2)
 80020e0:	9a00      	ldr	r2, [sp, #0]
    GPIOx->BSRR = GPIO_Pin;
 80020e2:	f8ca 6010 	str.w	r6, [sl, #16]
 80020e6:	f8ca 3010 	str.w	r3, [sl, #16]
 80020ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80020ec:	4293      	cmp	r3, r2
 80020ee:	f000 8145 	beq.w	800237c <LCD_Line.constprop.0+0xcb8>
		break;
		error2 = error * 2;
		if (error2 > -deltaY)
 80020f2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
		error2 = error * 2;
 80020f4:	9911      	ldr	r1, [sp, #68]	; 0x44
		if (error2 > -deltaY)
 80020f6:	425b      	negs	r3, r3
 80020f8:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
		error2 = error * 2;
 80020fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
		if (error2 > -deltaY)
 8002100:	da27      	bge.n	8002152 <LCD_Line.constprop.0+0xa8e>
		{
			error -= deltaY;
			x1 += signX;
 8002102:	9d00      	ldr	r5, [sp, #0]
 8002104:	f8dd e0dc 	ldr.w	lr, [sp, #220]	; 0xdc
 8002108:	4475      	add	r5, lr
 800210a:	462b      	mov	r3, r5
			error -= deltaY;
 800210c:	460d      	mov	r5, r1
 800210e:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8002110:	1a69      	subs	r1, r5, r1
 8002112:	9111      	str	r1, [sp, #68]	; 0x44
			x1 += signX;
 8002114:	b299      	uxth	r1, r3
 8002116:	9100      	str	r1, [sp, #0]
 8002118:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800211c:	912b      	str	r1, [sp, #172]	; 0xac
 800211e:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 8002122:	9132      	str	r1, [sp, #200]	; 0xc8
 8002124:	f3c3 3181 	ubfx	r1, r3, #14, #2
 8002128:	9131      	str	r1, [sp, #196]	; 0xc4
 800212a:	f3c3 3142 	ubfx	r1, r3, #13, #3
 800212e:	9130      	str	r1, [sp, #192]	; 0xc0
 8002130:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8002134:	912f      	str	r1, [sp, #188]	; 0xbc
 8002136:	f3c3 21c4 	ubfx	r1, r3, #11, #5
 800213a:	912e      	str	r1, [sp, #184]	; 0xb8
 800213c:	f3c3 2185 	ubfx	r1, r3, #10, #6
 8002140:	912d      	str	r1, [sp, #180]	; 0xb4
 8002142:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8002146:	912c      	str	r1, [sp, #176]	; 0xb0
 8002148:	b2d9      	uxtb	r1, r3
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	911f      	str	r1, [sp, #124]	; 0x7c
 8002150:	932a      	str	r3, [sp, #168]	; 0xa8
		}
		if (error2 < deltaX)
 8002152:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8002154:	4291      	cmp	r1, r2
 8002156:	f77f ab57 	ble.w	8001808 <LCD_Line.constprop.0+0x144>
		{
			error += deltaX;
			y1 += signY;
 800215a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800215c:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800215e:	4413      	add	r3, r2
			error += deltaX;
 8002160:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002162:	440a      	add	r2, r1
 8002164:	9211      	str	r2, [sp, #68]	; 0x44
			y1 += signY;
 8002166:	b29a      	uxth	r2, r3
 8002168:	9234      	str	r2, [sp, #208]	; 0xd0
 800216a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800216e:	9221      	str	r2, [sp, #132]	; 0x84
 8002170:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002174:	9228      	str	r2, [sp, #160]	; 0xa0
 8002176:	f3c3 3281 	ubfx	r2, r3, #14, #2
 800217a:	9227      	str	r2, [sp, #156]	; 0x9c
 800217c:	f3c3 3242 	ubfx	r2, r3, #13, #3
 8002180:	9226      	str	r2, [sp, #152]	; 0x98
 8002182:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8002186:	9225      	str	r2, [sp, #148]	; 0x94
 8002188:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 800218c:	9224      	str	r2, [sp, #144]	; 0x90
 800218e:	f3c3 2285 	ubfx	r2, r3, #10, #6
 8002192:	9223      	str	r2, [sp, #140]	; 0x8c
 8002194:	f3c3 2246 	ubfx	r2, r3, #9, #7
 8002198:	9222      	str	r2, [sp, #136]	; 0x88
 800219a:	b2da      	uxtb	r2, r3
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	9229      	str	r2, [sp, #164]	; 0xa4
 80021a2:	9320      	str	r3, [sp, #128]	; 0x80
 80021a4:	f7ff bb30 	b.w	8001808 <LCD_Line.constprop.0+0x144>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021ac:	f8cc 3010 	str.w	r3, [ip, #16]
}
 80021b0:	e792      	b.n	80020d8 <LCD_Line.constprop.0+0xa14>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021b6:	f8cc 3010 	str.w	r3, [ip, #16]
}
 80021ba:	e787      	b.n	80020cc <LCD_Line.constprop.0+0xa08>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80021c0:	f8c8 3010 	str.w	r3, [r8, #16]
}
 80021c4:	e77c      	b.n	80020c0 <LCD_Line.constprop.0+0x9fc>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021ca:	f8c8 3010 	str.w	r3, [r8, #16]
}
 80021ce:	e770      	b.n	80020b2 <LCD_Line.constprop.0+0x9ee>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021d4:	f8c8 3010 	str.w	r3, [r8, #16]
}
 80021d8:	e764      	b.n	80020a4 <LCD_Line.constprop.0+0x9e0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021de:	f8c8 3010 	str.w	r3, [r8, #16]
}
 80021e2:	e758      	b.n	8002096 <LCD_Line.constprop.0+0x9d2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021e4:	f8c8 4010 	str.w	r4, [r8, #16]
}
 80021e8:	e74e      	b.n	8002088 <LCD_Line.constprop.0+0x9c4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021ea:	f8c8 7010 	str.w	r7, [r8, #16]
}
 80021ee:	e744      	b.n	800207a <LCD_Line.constprop.0+0x9b6>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021f4:	f8cc 3010 	str.w	r3, [ip, #16]
}
 80021f8:	e738      	b.n	800206c <LCD_Line.constprop.0+0x9a8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80021fe:	f8cc 3010 	str.w	r3, [ip, #16]
}
 8002202:	e72b      	b.n	800205c <LCD_Line.constprop.0+0x998>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002204:	f8cc 9010 	str.w	r9, [ip, #16]
}
 8002208:	e720      	b.n	800204c <LCD_Line.constprop.0+0x988>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800220a:	f8cc 0010 	str.w	r0, [ip, #16]
}
 800220e:	e716      	b.n	800203e <LCD_Line.constprop.0+0x97a>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002210:	f8cc 7010 	str.w	r7, [ip, #16]
}
 8002214:	e70d      	b.n	8002032 <LCD_Line.constprop.0+0x96e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002216:	f8cc 4010 	str.w	r4, [ip, #16]
}
 800221a:	e703      	b.n	8002024 <LCD_Line.constprop.0+0x960>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800221c:	f8c8 9010 	str.w	r9, [r8, #16]
}
 8002220:	e6f9      	b.n	8002016 <LCD_Line.constprop.0+0x952>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002222:	f8c8 0010 	str.w	r0, [r8, #16]
}
 8002226:	e6ef      	b.n	8002008 <LCD_Line.constprop.0+0x944>
    GPIOx->BSRR = GPIO_Pin;
 8002228:	2320      	movs	r3, #32
 800222a:	f8cc 3010 	str.w	r3, [ip, #16]
 800222e:	e6a3      	b.n	8001f78 <LCD_Line.constprop.0+0x8b4>
 8002230:	2310      	movs	r3, #16
 8002232:	f8cc 3010 	str.w	r3, [ip, #16]
 8002236:	e697      	b.n	8001f68 <LCD_Line.constprop.0+0x8a4>
 8002238:	2280      	movs	r2, #128	; 0x80
 800223a:	f8c8 2010 	str.w	r2, [r8, #16]
 800223e:	e68c      	b.n	8001f5a <LCD_Line.constprop.0+0x896>
 8002240:	2140      	movs	r1, #64	; 0x40
 8002242:	f8c8 1010 	str.w	r1, [r8, #16]
 8002246:	e681      	b.n	8001f4c <LCD_Line.constprop.0+0x888>
 8002248:	f04f 0e20 	mov.w	lr, #32
 800224c:	f8c8 e010 	str.w	lr, [r8, #16]
 8002250:	e675      	b.n	8001f3e <LCD_Line.constprop.0+0x87a>
 8002252:	f04f 0e10 	mov.w	lr, #16
 8002256:	f8c8 e010 	str.w	lr, [r8, #16]
 800225a:	e668      	b.n	8001f2e <LCD_Line.constprop.0+0x86a>
 800225c:	f04f 0e08 	mov.w	lr, #8
 8002260:	f8c8 e010 	str.w	lr, [r8, #16]
 8002264:	e65b      	b.n	8001f1e <LCD_Line.constprop.0+0x85a>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002266:	f8c8 7010 	str.w	r7, [r8, #16]
 800226a:	e652      	b.n	8001f12 <LCD_Line.constprop.0+0x84e>
    GPIOx->BSRR = GPIO_Pin;
 800226c:	f04f 0e20 	mov.w	lr, #32
 8002270:	f8cc e010 	str.w	lr, [ip, #16]
 8002274:	e623      	b.n	8001ebe <LCD_Line.constprop.0+0x7fa>
 8002276:	f04f 0e10 	mov.w	lr, #16
 800227a:	f8cc e010 	str.w	lr, [ip, #16]
 800227e:	e616      	b.n	8001eae <LCD_Line.constprop.0+0x7ea>
 8002280:	f04f 0e80 	mov.w	lr, #128	; 0x80
 8002284:	f8c8 e010 	str.w	lr, [r8, #16]
 8002288:	e609      	b.n	8001e9e <LCD_Line.constprop.0+0x7da>
 800228a:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800228e:	f8c8 e010 	str.w	lr, [r8, #16]
 8002292:	e5fc      	b.n	8001e8e <LCD_Line.constprop.0+0x7ca>
 8002294:	f04f 0e20 	mov.w	lr, #32
 8002298:	f8c8 e010 	str.w	lr, [r8, #16]
 800229c:	e5ef      	b.n	8001e7e <LCD_Line.constprop.0+0x7ba>
 800229e:	f04f 0e10 	mov.w	lr, #16
 80022a2:	f8c8 e010 	str.w	lr, [r8, #16]
 80022a6:	e5e2      	b.n	8001e6e <LCD_Line.constprop.0+0x7aa>
 80022a8:	f04f 0e08 	mov.w	lr, #8
 80022ac:	f8c8 e010 	str.w	lr, [r8, #16]
 80022b0:	e5d5      	b.n	8001e5e <LCD_Line.constprop.0+0x79a>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022b2:	f8c8 7010 	str.w	r7, [r8, #16]
 80022b6:	e5cc      	b.n	8001e52 <LCD_Line.constprop.0+0x78e>
    GPIOx->BSRR = GPIO_Pin;
 80022b8:	f04f 0e20 	mov.w	lr, #32
 80022bc:	f8cc e010 	str.w	lr, [ip, #16]
 80022c0:	e59d      	b.n	8001dfe <LCD_Line.constprop.0+0x73a>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022c2:	f8c8 7010 	str.w	r7, [r8, #16]
 80022c6:	e4dc      	b.n	8001c82 <LCD_Line.constprop.0+0x5be>
    GPIOx->BSRR = GPIO_Pin;
 80022c8:	2320      	movs	r3, #32
 80022ca:	f8cc 3010 	str.w	r3, [ip, #16]
 80022ce:	e478      	b.n	8001bc2 <LCD_Line.constprop.0+0x4fe>
 80022d0:	2310      	movs	r3, #16
 80022d2:	f8cc 3010 	str.w	r3, [ip, #16]
 80022d6:	e46c      	b.n	8001bb2 <LCD_Line.constprop.0+0x4ee>
 80022d8:	2280      	movs	r2, #128	; 0x80
 80022da:	f8c8 2010 	str.w	r2, [r8, #16]
 80022de:	e461      	b.n	8001ba4 <LCD_Line.constprop.0+0x4e0>
 80022e0:	2140      	movs	r1, #64	; 0x40
 80022e2:	f8c8 1010 	str.w	r1, [r8, #16]
 80022e6:	e456      	b.n	8001b96 <LCD_Line.constprop.0+0x4d2>
 80022e8:	f04f 0e20 	mov.w	lr, #32
 80022ec:	f8c8 e010 	str.w	lr, [r8, #16]
 80022f0:	e44a      	b.n	8001b88 <LCD_Line.constprop.0+0x4c4>
 80022f2:	f04f 0e10 	mov.w	lr, #16
 80022f6:	f8c8 e010 	str.w	lr, [r8, #16]
 80022fa:	e43d      	b.n	8001b78 <LCD_Line.constprop.0+0x4b4>
 80022fc:	f04f 0e08 	mov.w	lr, #8
 8002300:	f8c8 e010 	str.w	lr, [r8, #16]
 8002304:	e430      	b.n	8001b68 <LCD_Line.constprop.0+0x4a4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002306:	f8c8 7010 	str.w	r7, [r8, #16]
 800230a:	e427      	b.n	8001b5c <LCD_Line.constprop.0+0x498>
    GPIOx->BSRR = GPIO_Pin;
 800230c:	f04f 0e20 	mov.w	lr, #32
 8002310:	f8cc e010 	str.w	lr, [ip, #16]
 8002314:	f7ff bbf0 	b.w	8001af8 <LCD_Line.constprop.0+0x434>
 8002318:	f04f 0e10 	mov.w	lr, #16
 800231c:	f8cc e010 	str.w	lr, [ip, #16]
 8002320:	f7ff bbe2 	b.w	8001ae8 <LCD_Line.constprop.0+0x424>
 8002324:	f04f 0e80 	mov.w	lr, #128	; 0x80
 8002328:	f8c8 e010 	str.w	lr, [r8, #16]
 800232c:	f7ff bbd4 	b.w	8001ad8 <LCD_Line.constprop.0+0x414>
 8002330:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8002334:	f8c8 e010 	str.w	lr, [r8, #16]
 8002338:	f7ff bbc6 	b.w	8001ac8 <LCD_Line.constprop.0+0x404>
 800233c:	f04f 0e20 	mov.w	lr, #32
 8002340:	f8c8 e010 	str.w	lr, [r8, #16]
 8002344:	f7ff bbb8 	b.w	8001ab8 <LCD_Line.constprop.0+0x3f4>
 8002348:	f04f 0e10 	mov.w	lr, #16
 800234c:	f8c8 e010 	str.w	lr, [r8, #16]
 8002350:	f7ff bbaa 	b.w	8001aa8 <LCD_Line.constprop.0+0x3e4>
 8002354:	f04f 0e08 	mov.w	lr, #8
 8002358:	f8c8 e010 	str.w	lr, [r8, #16]
 800235c:	f7ff bb9c 	b.w	8001a98 <LCD_Line.constprop.0+0x3d4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002360:	f8c8 7010 	str.w	r7, [r8, #16]
 8002364:	f7ff bb92 	b.w	8001a8c <LCD_Line.constprop.0+0x3c8>
    GPIOx->BSRR = GPIO_Pin;
 8002368:	f04f 0e20 	mov.w	lr, #32
 800236c:	f8cc e010 	str.w	lr, [ip, #16]
 8002370:	f7ff bb62 	b.w	8001a38 <LCD_Line.constprop.0+0x374>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002374:	f8c8 7010 	str.w	r7, [r8, #16]
 8002378:	f7ff ba9f 	b.w	80018ba <LCD_Line.constprop.0+0x1f6>
		if (x1 == x2 && y1 == y2)
 800237c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800237e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8002380:	4293      	cmp	r3, r2
 8002382:	f47f aeb6 	bne.w	80020f2 <LCD_Line.constprop.0+0xa2e>
		}
	}
}
 8002386:	b03b      	add	sp, #236	; 0xec
 8002388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800238c <LCD_Line.constprop.1>:
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 800238c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002390:	b0ab      	sub	sp, #172	; 0xac
 8002392:	9123      	str	r1, [sp, #140]	; 0x8c
 8002394:	4619      	mov	r1, r3
 8002396:	9329      	str	r3, [sp, #164]	; 0xa4
	int deltaX = abs(x2 - x1);
 8002398:	1a13      	subs	r3, r2, r0
 800239a:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
 800239e:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
	int deltaY = abs(y2 - y1);
 80023a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
	int deltaX = abs(x2 - x1);
 80023a4:	9224      	str	r2, [sp, #144]	; 0x90
	int deltaY = abs(y2 - y1);
 80023a6:	1acb      	subs	r3, r1, r3
 80023a8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80023ac:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80023b0:	9225      	str	r2, [sp, #148]	; 0x94
	int signX = x1 < x2 ? 1 : -1;
 80023b2:	9a24      	ldr	r2, [sp, #144]	; 0x90
	int signY = y1 < y2 ? 1 : -1;
 80023b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
	int signX = x1 < x2 ? 1 : -1;
 80023b6:	4282      	cmp	r2, r0
 80023b8:	bf8c      	ite	hi
 80023ba:	2201      	movhi	r2, #1
 80023bc:	f04f 32ff 	movls.w	r2, #4294967295
	int signY = y1 < y2 ? 1 : -1;
 80023c0:	4299      	cmp	r1, r3
 80023c2:	bf8c      	ite	hi
 80023c4:	2101      	movhi	r1, #1
 80023c6:	f04f 31ff 	movls.w	r1, #4294967295
	int signX = x1 < x2 ? 1 : -1;
 80023ca:	9227      	str	r2, [sp, #156]	; 0x9c
 80023cc:	0a1a      	lsrs	r2, r3, #8
 80023ce:	9214      	str	r2, [sp, #80]	; 0x50
 80023d0:	0bda      	lsrs	r2, r3, #15
 80023d2:	9201      	str	r2, [sp, #4]
 80023d4:	0b9a      	lsrs	r2, r3, #14
 80023d6:	9220      	str	r2, [sp, #128]	; 0x80
 80023d8:	0b5a      	lsrs	r2, r3, #13
 80023da:	921e      	str	r2, [sp, #120]	; 0x78
 80023dc:	0b1a      	lsrs	r2, r3, #12
 80023de:	921c      	str	r2, [sp, #112]	; 0x70
 80023e0:	0ada      	lsrs	r2, r3, #11
 80023e2:	921a      	str	r2, [sp, #104]	; 0x68
 80023e4:	0a9a      	lsrs	r2, r3, #10
	int signY = y1 < y2 ? 1 : -1;
 80023e6:	9128      	str	r1, [sp, #160]	; 0xa0
 80023e8:	9218      	str	r2, [sp, #96]	; 0x60
 80023ea:	b2d9      	uxtb	r1, r3
 80023ec:	0a5a      	lsrs	r2, r3, #9
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	9312      	str	r3, [sp, #72]	; 0x48
 80023f4:	f000 0301 	and.w	r3, r0, #1
 80023f8:	9311      	str	r3, [sp, #68]	; 0x44
	int error = deltaX - deltaY;
 80023fa:	4663      	mov	r3, ip
 80023fc:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8002400:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8002404:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8002408:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 800240c:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8002410:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8002414:	9216      	str	r2, [sp, #88]	; 0x58
 8002416:	0a02      	lsrs	r2, r0, #8
 8002418:	9213      	str	r2, [sp, #76]	; 0x4c
 800241a:	0bc2      	lsrs	r2, r0, #15
 800241c:	9200      	str	r2, [sp, #0]
 800241e:	0b82      	lsrs	r2, r0, #14
 8002420:	921f      	str	r2, [sp, #124]	; 0x7c
 8002422:	0b42      	lsrs	r2, r0, #13
 8002424:	921d      	str	r2, [sp, #116]	; 0x74
 8002426:	0b02      	lsrs	r2, r0, #12
 8002428:	921b      	str	r2, [sp, #108]	; 0x6c
 800242a:	0ac2      	lsrs	r2, r0, #11
 800242c:	9219      	str	r2, [sp, #100]	; 0x64
 800242e:	0a82      	lsrs	r2, r0, #10
 8002430:	9122      	str	r1, [sp, #136]	; 0x88
 8002432:	9217      	str	r2, [sp, #92]	; 0x5c
 8002434:	b2c1      	uxtb	r1, r0
 8002436:	0a42      	lsrs	r2, r0, #9
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8002438:	9010      	str	r0, [sp, #64]	; 0x40
	int deltaX = abs(x2 - x1);
 800243a:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
 800243e:	9215      	str	r2, [sp, #84]	; 0x54
 8002440:	9121      	str	r1, [sp, #132]	; 0x84
	int error = deltaX - deltaY;
 8002442:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8002444:	f8df b350 	ldr.w	fp, [pc, #848]	; 8002798 <LCD_Line.constprop.1+0x40c>
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	f8df a350 	ldr.w	sl, [pc, #848]	; 800279c <LCD_Line.constprop.1+0x410>
 800244e:	f8df 9350 	ldr.w	r9, [pc, #848]	; 80027a0 <LCD_Line.constprop.1+0x414>
 8002452:	9302      	str	r3, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002454:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002458:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800245c:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800245e:	f8cb e010 	str.w	lr, [fp, #16]
 8002462:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002466:	f8ca 7010 	str.w	r7, [sl, #16]
 800246a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800246e:	f8ca 4010 	str.w	r4, [sl, #16]
 8002472:	f8c9 6010 	str.w	r6, [r9, #16]
 8002476:	f8c9 5010 	str.w	r5, [r9, #16]
 800247a:	f8c9 7010 	str.w	r7, [r9, #16]
 800247e:	f8c9 4010 	str.w	r4, [r9, #16]
 8002482:	f8c9 8010 	str.w	r8, [r9, #16]
 8002486:	900b      	str	r0, [sp, #44]	; 0x2c
    GPIOx->BSRR = GPIO_Pin;
 8002488:	2040      	movs	r0, #64	; 0x40
	data[0] = x1 >> 8;
 800248a:	f8bd c050 	ldrh.w	ip, [sp, #80]	; 0x50
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800248e:	f8c9 1010 	str.w	r1, [r9, #16]
 8002492:	f8ca 5010 	str.w	r5, [sl, #16]
 8002496:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800249a:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800249e:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80024a2:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024a6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80024aa:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80024ae:	f8c9 2010 	str.w	r2, [r9, #16]
 80024b2:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024b4:	f8c9 3010 	str.w	r3, [r9, #16]
 80024b8:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80024bc:	f8cb 2010 	str.w	r2, [fp, #16]
 80024c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024c4:	f8cb 2010 	str.w	r2, [fp, #16]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024ce:	f8cb e010 	str.w	lr, [fp, #16]
 80024d2:	f8ca 7010 	str.w	r7, [sl, #16]
 80024d6:	f8ca 4010 	str.w	r4, [sl, #16]
 80024da:	f8c9 6010 	str.w	r6, [r9, #16]
 80024de:	f8c9 5010 	str.w	r5, [r9, #16]
 80024e2:	f8c9 7010 	str.w	r7, [r9, #16]
 80024e6:	f8c9 4010 	str.w	r4, [r9, #16]
 80024ea:	f8c9 8010 	str.w	r8, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80024ee:	9b01      	ldr	r3, [sp, #4]
 80024f0:	f8c9 1010 	str.w	r1, [r9, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 849f 	beq.w	8002e38 <LCD_Line.constprop.1+0xaac>
    GPIOx->BSRR = GPIO_Pin;
 80024fa:	2304      	movs	r3, #4
 80024fc:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002500:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002502:	f013 0001 	ands.w	r0, r3, #1
 8002506:	bf1c      	itt	ne
 8002508:	2308      	movne	r3, #8
 800250a:	f8ca 3010 	strne.w	r3, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800250e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002510:	bf08      	it	eq
 8002512:	f8ca 6010 	streq.w	r6, [sl, #16]
 8002516:	f013 0301 	ands.w	r3, r3, #1
 800251a:	9303      	str	r3, [sp, #12]
 800251c:	bf0c      	ite	eq
 800251e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002522:	2310      	movne	r3, #16
 8002524:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002528:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800252a:	f013 0301 	ands.w	r3, r3, #1
 800252e:	9304      	str	r3, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002530:	bf0c      	ite	eq
 8002532:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002536:	2320      	movne	r3, #32
 8002538:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800253c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800253e:	f013 0301 	ands.w	r3, r3, #1
 8002542:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002544:	bf0c      	ite	eq
 8002546:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800254a:	2340      	movne	r3, #64	; 0x40
 800254c:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002550:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002552:	f013 0301 	ands.w	r3, r3, #1
 8002556:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002558:	bf0c      	ite	eq
 800255a:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800255e:	2380      	movne	r3, #128	; 0x80
 8002560:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002564:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002566:	f013 0301 	ands.w	r3, r3, #1
 800256a:	9305      	str	r3, [sp, #20]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800256c:	bf0c      	ite	eq
 800256e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002572:	2310      	movne	r3, #16
 8002574:	f8c9 3010 	str.w	r3, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002578:	f01c 0301 	ands.w	r3, ip, #1
 800257c:	9306      	str	r3, [sp, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800257e:	bf0c      	ite	eq
 8002580:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002584:	2320      	movne	r3, #32
 8002586:	f8c9 3010 	str.w	r3, [r9, #16]
 800258a:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800258c:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002590:	f8cb 3010 	str.w	r3, [fp, #16]
 8002594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002598:	f8cb 3010 	str.w	r3, [fp, #16]
 800259c:	2301      	movs	r3, #1
 800259e:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025a6:	f8cb e010 	str.w	lr, [fp, #16]
 80025aa:	f8ca 7010 	str.w	r7, [sl, #16]
 80025ae:	f8ca 4010 	str.w	r4, [sl, #16]
 80025b2:	f8c9 6010 	str.w	r6, [r9, #16]
 80025b6:	f8c9 5010 	str.w	r5, [r9, #16]
 80025ba:	f8c9 7010 	str.w	r7, [r9, #16]
 80025be:	f8c9 4010 	str.w	r4, [r9, #16]
 80025c2:	f8c9 8010 	str.w	r8, [r9, #16]
 80025c6:	f8c9 3010 	str.w	r3, [r9, #16]
 80025ca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80025cc:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80025ce:	09d2      	lsrs	r2, r2, #7
 80025d0:	9207      	str	r2, [sp, #28]
    GPIOx->BSRR = GPIO_Pin;
 80025d2:	bf1c      	itt	ne
 80025d4:	2204      	movne	r2, #4
 80025d6:	f8ca 2010 	strne.w	r2, [sl, #16]
 80025da:	f3c3 1280 	ubfx	r2, r3, #6, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025de:	bf08      	it	eq
 80025e0:	f8ca 5010 	streq.w	r5, [sl, #16]
 80025e4:	920c      	str	r2, [sp, #48]	; 0x30
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80025e6:	065a      	lsls	r2, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 80025e8:	bf4a      	itet	mi
 80025ea:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025ec:	f8ca 6010 	strpl.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80025f0:	f8ca 2010 	strmi.w	r2, [sl, #16]
 80025f4:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80025f8:	0699      	lsls	r1, r3, #26
 80025fa:	9208      	str	r2, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025fc:	bf54      	ite	pl
 80025fe:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002602:	2210      	movmi	r2, #16
 8002604:	f8ca 2010 	str.w	r2, [sl, #16]
 8002608:	f3c3 1200 	ubfx	r2, r3, #4, #1
 800260c:	920d      	str	r2, [sp, #52]	; 0x34
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800260e:	06da      	lsls	r2, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002610:	bf54      	ite	pl
 8002612:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002616:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002618:	0719      	lsls	r1, r3, #28
 800261a:	f8ca 2010 	str.w	r2, [sl, #16]
 800261e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8002622:	920e      	str	r2, [sp, #56]	; 0x38
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002624:	bf54      	ite	pl
 8002626:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800262a:	2240      	movmi	r2, #64	; 0x40
 800262c:	f8ca 2010 	str.w	r2, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002630:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002632:	bf54      	ite	pl
 8002634:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8002638:	2280      	movmi	r2, #128	; 0x80
 800263a:	f3c3 0180 	ubfx	r1, r3, #2, #1
 800263e:	f8ca 2010 	str.w	r2, [sl, #16]
 8002642:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002646:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002648:	bf54      	ite	pl
 800264a:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800264e:	2310      	movmi	r3, #16
 8002650:	f8c9 3010 	str.w	r3, [r9, #16]
 8002654:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002656:	fa1f fc83 	uxth.w	ip, r3
 800265a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800265e:	2b00      	cmp	r3, #0
 8002660:	f040 83e5 	bne.w	8002e2e <LCD_Line.constprop.1+0xaa2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002664:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 8002668:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 800266c:	f04f 0c02 	mov.w	ip, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002670:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002674:	f8cb c010 	str.w	ip, [fp, #16]
 8002678:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 800267c:	f8cb c010 	str.w	ip, [fp, #16]
 8002680:	f04f 0c01 	mov.w	ip, #1
 8002684:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002688:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800268c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800268e:	f8cb e010 	str.w	lr, [fp, #16]
 8002692:	f8ca 7010 	str.w	r7, [sl, #16]
 8002696:	f8ca 4010 	str.w	r4, [sl, #16]
 800269a:	f8c9 6010 	str.w	r6, [r9, #16]
 800269e:	f8c9 5010 	str.w	r5, [r9, #16]
 80026a2:	f8c9 7010 	str.w	r7, [r9, #16]
 80026a6:	f8c9 4010 	str.w	r4, [r9, #16]
 80026aa:	f8c9 8010 	str.w	r8, [r9, #16]
 80026ae:	f8c9 c010 	str.w	ip, [r9, #16]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 83b8 	beq.w	8002e28 <LCD_Line.constprop.1+0xa9c>
    GPIOx->BSRR = GPIO_Pin;
 80026b8:	f04f 0c04 	mov.w	ip, #4
 80026bc:	f8ca c010 	str.w	ip, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80026c0:	2800      	cmp	r0, #0
 80026c2:	f040 83ad 	bne.w	8002e20 <LCD_Line.constprop.1+0xa94>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026c6:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80026ca:	9b03      	ldr	r3, [sp, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f040 83a3 	bne.w	8002e18 <LCD_Line.constprop.1+0xa8c>
 80026d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80026d6:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80026da:	9b04      	ldr	r3, [sp, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f040 8397 	bne.w	8002e10 <LCD_Line.constprop.1+0xa84>
 80026e2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80026e6:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80026ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f040 838b 	bne.w	8002e08 <LCD_Line.constprop.1+0xa7c>
 80026f2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80026f6:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80026fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f040 837f 	bne.w	8002e00 <LCD_Line.constprop.1+0xa74>
 8002702:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002706:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800270a:	9b05      	ldr	r3, [sp, #20]
 800270c:	2b00      	cmp	r3, #0
 800270e:	f040 8373 	bne.w	8002df8 <LCD_Line.constprop.1+0xa6c>
 8002712:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002716:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800271a:	9b06      	ldr	r3, [sp, #24]
 800271c:	2b00      	cmp	r3, #0
 800271e:	f040 8367 	bne.w	8002df0 <LCD_Line.constprop.1+0xa64>
 8002722:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002726:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 800272a:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800272c:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002730:	f8cb 0010 	str.w	r0, [fp, #16]
 8002734:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002738:	f8cb 0010 	str.w	r0, [fp, #16]
 800273c:	2001      	movs	r0, #1
 800273e:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002742:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002746:	9b07      	ldr	r3, [sp, #28]
 8002748:	f8cb e010 	str.w	lr, [fp, #16]
 800274c:	f8ca 7010 	str.w	r7, [sl, #16]
 8002750:	f8ca 4010 	str.w	r4, [sl, #16]
 8002754:	f8c9 6010 	str.w	r6, [r9, #16]
 8002758:	f8c9 5010 	str.w	r5, [r9, #16]
 800275c:	f8c9 7010 	str.w	r7, [r9, #16]
 8002760:	f8c9 4010 	str.w	r4, [r9, #16]
 8002764:	f8c9 8010 	str.w	r8, [r9, #16]
 8002768:	f8c9 0010 	str.w	r0, [r9, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 833c 	beq.w	8002dea <LCD_Line.constprop.1+0xa5e>
    GPIOx->BSRR = GPIO_Pin;
 8002772:	2004      	movs	r0, #4
 8002774:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800277a:	2b00      	cmp	r3, #0
 800277c:	f040 8331 	bne.w	8002de2 <LCD_Line.constprop.1+0xa56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002780:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002784:	9b08      	ldr	r3, [sp, #32]
 8002786:	2b00      	cmp	r3, #0
 8002788:	f040 8327 	bne.w	8002dda <LCD_Line.constprop.1+0xa4e>
 800278c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002790:	f8ca 0010 	str.w	r0, [sl, #16]
 8002794:	e006      	b.n	80027a4 <LCD_Line.constprop.1+0x418>
 8002796:	bf00      	nop
 8002798:	40010c00 	.word	0x40010c00
 800279c:	40010800 	.word	0x40010800
 80027a0:	40011000 	.word	0x40011000
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80027a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f040 8313 	bne.w	8002dd2 <LCD_Line.constprop.1+0xa46>
 80027ac:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80027b0:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80027b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 8307 	bne.w	8002dca <LCD_Line.constprop.1+0xa3e>
 80027bc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80027c0:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80027c4:	2900      	cmp	r1, #0
 80027c6:	f040 82fc 	bne.w	8002dc2 <LCD_Line.constprop.1+0xa36>
 80027ca:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80027ce:	f8ca 1010 	str.w	r1, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80027d2:	2a00      	cmp	r2, #0
 80027d4:	f040 82f1 	bne.w	8002dba <LCD_Line.constprop.1+0xa2e>
 80027d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027dc:	f8c9 2010 	str.w	r2, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80027e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 82e5 	bne.w	8002db2 <LCD_Line.constprop.1+0xa26>
 80027e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027ec:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80027f0:	f8bd 2000 	ldrh.w	r2, [sp]
 80027f4:	f8cb 7010 	str.w	r7, [fp, #16]
 80027f8:	920d      	str	r2, [sp, #52]	; 0x34
    GPIOx->BSRR = GPIO_Pin;
 80027fa:	2202      	movs	r2, #2
	data[0] = y1 >> 8;
 80027fc:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
 8002800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002804:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002808:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 800280c:	2110      	movs	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800280e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002812:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002816:	f8cb 4010 	str.w	r4, [fp, #16]
 800281a:	f8cb e010 	str.w	lr, [fp, #16]
 800281e:	f8ca 7010 	str.w	r7, [sl, #16]
 8002822:	f8ca 4010 	str.w	r4, [sl, #16]
 8002826:	f8c9 6010 	str.w	r6, [r9, #16]
 800282a:	f8c9 5010 	str.w	r5, [r9, #16]
 800282e:	f8c9 7010 	str.w	r7, [r9, #16]
 8002832:	f8c9 4010 	str.w	r4, [r9, #16]
 8002836:	f8c9 8010 	str.w	r8, [r9, #16]
 800283a:	f8c9 0010 	str.w	r0, [r9, #16]
 800283e:	f8ca 5010 	str.w	r5, [sl, #16]
 8002842:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002846:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800284a:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800284e:	2240      	movs	r2, #64	; 0x40
 8002850:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002854:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002858:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800285c:	2220      	movs	r2, #32
 800285e:	f8c9 1010 	str.w	r1, [r9, #16]
 8002862:	f8c9 2010 	str.w	r2, [r9, #16]
 8002866:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002868:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800286c:	f8cb 2010 	str.w	r2, [fp, #16]
 8002870:	2201      	movs	r2, #1
 8002872:	f8cb 3010 	str.w	r3, [fp, #16]
 8002876:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800287a:	f8cb e010 	str.w	lr, [fp, #16]
 800287e:	f8ca 7010 	str.w	r7, [sl, #16]
 8002882:	f8ca 4010 	str.w	r4, [sl, #16]
 8002886:	f8c9 6010 	str.w	r6, [r9, #16]
 800288a:	f8c9 5010 	str.w	r5, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800288e:	9b00      	ldr	r3, [sp, #0]
 8002890:	f8c9 7010 	str.w	r7, [r9, #16]
 8002894:	f8c9 4010 	str.w	r4, [r9, #16]
 8002898:	f8c9 8010 	str.w	r8, [r9, #16]
 800289c:	f8c9 0010 	str.w	r0, [r9, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8283 	beq.w	8002dac <LCD_Line.constprop.1+0xa20>
    GPIOx->BSRR = GPIO_Pin;
 80028a6:	2304      	movs	r3, #4
 80028a8:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80028ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80028ae:	f013 0001 	ands.w	r0, r3, #1
 80028b2:	bf1c      	itt	ne
 80028b4:	2308      	movne	r3, #8
 80028b6:	f8ca 3010 	strne.w	r3, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80028ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028bc:	bf08      	it	eq
 80028be:	f8ca 6010 	streq.w	r6, [sl, #16]
 80028c2:	f013 0301 	ands.w	r3, r3, #1
 80028c6:	930c      	str	r3, [sp, #48]	; 0x30
 80028c8:	bf0c      	ite	eq
 80028ca:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80028ce:	2310      	movne	r3, #16
 80028d0:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80028d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80028d6:	f013 0301 	ands.w	r3, r3, #1
 80028da:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028dc:	bf0c      	ite	eq
 80028de:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80028e2:	2320      	movne	r3, #32
 80028e4:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80028e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80028ea:	f013 0301 	ands.w	r3, r3, #1
 80028ee:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028f0:	bf0c      	ite	eq
 80028f2:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80028f6:	2340      	movne	r3, #64	; 0x40
 80028f8:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80028fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80028fe:	f013 0301 	ands.w	r3, r3, #1
 8002902:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002904:	bf0c      	ite	eq
 8002906:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800290a:	2380      	movne	r3, #128	; 0x80
 800290c:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002910:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002912:	f013 0301 	ands.w	r3, r3, #1
 8002916:	9308      	str	r3, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002918:	bf0c      	ite	eq
 800291a:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800291e:	2310      	movne	r3, #16
 8002920:	f8c9 3010 	str.w	r3, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002924:	f01c 0301 	ands.w	r3, ip, #1
 8002928:	9307      	str	r3, [sp, #28]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800292a:	bf0c      	ite	eq
 800292c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002930:	2320      	movne	r3, #32
 8002932:	f8c9 3010 	str.w	r3, [r9, #16]
 8002936:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002938:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800293c:	f8cb 3010 	str.w	r3, [fp, #16]
 8002940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002944:	f8cb 3010 	str.w	r3, [fp, #16]
 8002948:	2301      	movs	r3, #1
 800294a:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800294e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002952:	f8cb e010 	str.w	lr, [fp, #16]
 8002956:	f8ca 7010 	str.w	r7, [sl, #16]
 800295a:	f8ca 4010 	str.w	r4, [sl, #16]
 800295e:	f8c9 6010 	str.w	r6, [r9, #16]
 8002962:	f8c9 5010 	str.w	r5, [r9, #16]
 8002966:	f8c9 7010 	str.w	r7, [r9, #16]
 800296a:	f8c9 4010 	str.w	r4, [r9, #16]
 800296e:	f8c9 8010 	str.w	r8, [r9, #16]
 8002972:	f8c9 3010 	str.w	r3, [r9, #16]
 8002976:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002978:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800297a:	09d2      	lsrs	r2, r2, #7
 800297c:	9206      	str	r2, [sp, #24]
    GPIOx->BSRR = GPIO_Pin;
 800297e:	bf1c      	itt	ne
 8002980:	2204      	movne	r2, #4
 8002982:	f8ca 2010 	strne.w	r2, [sl, #16]
 8002986:	f3c3 1280 	ubfx	r2, r3, #6, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800298a:	bf08      	it	eq
 800298c:	f8ca 5010 	streq.w	r5, [sl, #16]
 8002990:	9205      	str	r2, [sp, #20]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002992:	065a      	lsls	r2, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 8002994:	bf4a      	itet	mi
 8002996:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002998:	f8ca 6010 	strpl.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800299c:	f8ca 2010 	strmi.w	r2, [sl, #16]
 80029a0:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80029a4:	0699      	lsls	r1, r3, #26
 80029a6:	9204      	str	r2, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029a8:	bf54      	ite	pl
 80029aa:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80029ae:	2210      	movmi	r2, #16
 80029b0:	f8ca 2010 	str.w	r2, [sl, #16]
 80029b4:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80029b8:	9203      	str	r2, [sp, #12]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80029ba:	06da      	lsls	r2, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029bc:	bf54      	ite	pl
 80029be:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80029c2:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80029c4:	0719      	lsls	r1, r3, #28
 80029c6:	f8ca 2010 	str.w	r2, [sl, #16]
 80029ca:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 80029ce:	920f      	str	r2, [sp, #60]	; 0x3c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029d0:	bf54      	ite	pl
 80029d2:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80029d6:	2240      	movmi	r2, #64	; 0x40
 80029d8:	f8ca 2010 	str.w	r2, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80029dc:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029de:	bf54      	ite	pl
 80029e0:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80029e4:	2280      	movmi	r2, #128	; 0x80
 80029e6:	f3c3 0180 	ubfx	r1, r3, #2, #1
 80029ea:	f8ca 2010 	str.w	r2, [sl, #16]
 80029ee:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80029f2:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029f4:	bf54      	ite	pl
 80029f6:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80029fa:	2310      	movmi	r3, #16
 80029fc:	f8c9 3010 	str.w	r3, [r9, #16]
 8002a00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a02:	fa1f fc83 	uxth.w	ip, r3
 8002a06:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f040 81c9 	bne.w	8002da2 <LCD_Line.constprop.1+0xa16>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a10:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 8002a14:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002a18:	f04f 0c02 	mov.w	ip, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a1c:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002a20:	f8cb c010 	str.w	ip, [fp, #16]
 8002a24:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8002a28:	f8cb c010 	str.w	ip, [fp, #16]
 8002a2c:	f04f 0c01 	mov.w	ip, #1
 8002a30:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a34:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002a38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002a3a:	f8cb e010 	str.w	lr, [fp, #16]
 8002a3e:	f8ca 7010 	str.w	r7, [sl, #16]
 8002a42:	f8ca 4010 	str.w	r4, [sl, #16]
 8002a46:	f8c9 6010 	str.w	r6, [r9, #16]
 8002a4a:	f8c9 5010 	str.w	r5, [r9, #16]
 8002a4e:	f8c9 7010 	str.w	r7, [r9, #16]
 8002a52:	f8c9 4010 	str.w	r4, [r9, #16]
 8002a56:	f8c9 8010 	str.w	r8, [r9, #16]
 8002a5a:	f8c9 c010 	str.w	ip, [r9, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 819c 	beq.w	8002d9c <LCD_Line.constprop.1+0xa10>
    GPIOx->BSRR = GPIO_Pin;
 8002a64:	f04f 0c04 	mov.w	ip, #4
 8002a68:	f8ca c010 	str.w	ip, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	f040 8191 	bne.w	8002d94 <LCD_Line.constprop.1+0xa08>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a72:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002a76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f040 8187 	bne.w	8002d8c <LCD_Line.constprop.1+0xa00>
 8002a7e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002a82:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002a86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f040 817b 	bne.w	8002d84 <LCD_Line.constprop.1+0x9f8>
 8002a8e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002a92:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f040 816f 	bne.w	8002d7c <LCD_Line.constprop.1+0x9f0>
 8002a9e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002aa2:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f040 8163 	bne.w	8002d74 <LCD_Line.constprop.1+0x9e8>
 8002aae:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002ab2:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002ab6:	9b08      	ldr	r3, [sp, #32]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f040 8157 	bne.w	8002d6c <LCD_Line.constprop.1+0x9e0>
 8002abe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002ac2:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002ac6:	9b07      	ldr	r3, [sp, #28]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f040 814b 	bne.w	8002d64 <LCD_Line.constprop.1+0x9d8>
 8002ace:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002ad2:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002ad6:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ad8:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002adc:	f8cb 0010 	str.w	r0, [fp, #16]
 8002ae0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002ae4:	f8cb 0010 	str.w	r0, [fp, #16]
 8002ae8:	2001      	movs	r0, #1
 8002aea:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002aee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002af2:	9b06      	ldr	r3, [sp, #24]
 8002af4:	f8cb e010 	str.w	lr, [fp, #16]
 8002af8:	f8ca 7010 	str.w	r7, [sl, #16]
 8002afc:	f8ca 4010 	str.w	r4, [sl, #16]
 8002b00:	f8c9 6010 	str.w	r6, [r9, #16]
 8002b04:	f8c9 5010 	str.w	r5, [r9, #16]
 8002b08:	f8c9 7010 	str.w	r7, [r9, #16]
 8002b0c:	f8c9 4010 	str.w	r4, [r9, #16]
 8002b10:	f8c9 8010 	str.w	r8, [r9, #16]
 8002b14:	f8c9 0010 	str.w	r0, [r9, #16]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8120 	beq.w	8002d5e <LCD_Line.constprop.1+0x9d2>
    GPIOx->BSRR = GPIO_Pin;
 8002b1e:	2004      	movs	r0, #4
 8002b20:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002b24:	9b05      	ldr	r3, [sp, #20]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f040 8115 	bne.w	8002d56 <LCD_Line.constprop.1+0x9ca>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b2c:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002b30:	9b04      	ldr	r3, [sp, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f040 810b 	bne.w	8002d4e <LCD_Line.constprop.1+0x9c2>
 8002b38:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b3c:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002b40:	9b03      	ldr	r3, [sp, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f040 80ff 	bne.w	8002d46 <LCD_Line.constprop.1+0x9ba>
 8002b48:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002b4c:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002b50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f040 80f3 	bne.w	8002d3e <LCD_Line.constprop.1+0x9b2>
 8002b58:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002b5c:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002b60:	2900      	cmp	r1, #0
 8002b62:	f040 80e8 	bne.w	8002d36 <LCD_Line.constprop.1+0x9aa>
 8002b66:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8002b6a:	f8ca 1010 	str.w	r1, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002b6e:	2a00      	cmp	r2, #0
 8002b70:	f040 80dd 	bne.w	8002d2e <LCD_Line.constprop.1+0x9a2>
 8002b74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b78:	f8c9 2010 	str.w	r2, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002b7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f040 80d1 	bne.w	8002d26 <LCD_Line.constprop.1+0x99a>
 8002b84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b88:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b92:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002b96:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002b9a:	f8cb 2010 	str.w	r2, [fp, #16]
 8002b9e:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ba2:	f8cb 4010 	str.w	r4, [fp, #16]
 8002ba6:	f8cb e010 	str.w	lr, [fp, #16]
 8002baa:	f8ca 7010 	str.w	r7, [sl, #16]
 8002bae:	f8ca 4010 	str.w	r4, [sl, #16]
 8002bb2:	f8c9 6010 	str.w	r6, [r9, #16]
 8002bb6:	f8c9 5010 	str.w	r5, [r9, #16]
 8002bba:	f8c9 7010 	str.w	r7, [r9, #16]
 8002bbe:	f8c9 4010 	str.w	r4, [r9, #16]
 8002bc2:	f8c9 8010 	str.w	r8, [r9, #16]
 8002bc6:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002bca:	2010      	movs	r0, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bcc:	f8ca 5010 	str.w	r5, [sl, #16]
 8002bd0:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002bd4:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bd8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002bdc:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002be0:	2040      	movs	r0, #64	; 0x40
 8002be2:	f8ca 0010 	str.w	r0, [sl, #16]
 8002be6:	2080      	movs	r0, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002be8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002bec:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bf0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002bf4:	f8c9 1010 	str.w	r1, [r9, #16]
 8002bf8:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002bfc:	2001      	movs	r0, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bfe:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002c02:	f8cb 2010 	str.w	r2, [fp, #16]
 8002c06:	f8cb 3010 	str.w	r3, [fp, #16]
 8002c0a:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c0e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c12:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002c16:	f04f 0c20 	mov.w	ip, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c1a:	f8ca 7010 	str.w	r7, [sl, #16]
 8002c1e:	f8ca 4010 	str.w	r4, [sl, #16]
 8002c22:	f8c9 6010 	str.w	r6, [r9, #16]
 8002c26:	f8c9 5010 	str.w	r5, [r9, #16]
 8002c2a:	f8c9 7010 	str.w	r7, [r9, #16]
 8002c2e:	f8c9 4010 	str.w	r4, [r9, #16]
 8002c32:	f8c9 8010 	str.w	r8, [r9, #16]
 8002c36:	f8c9 0010 	str.w	r0, [r9, #16]
 8002c3a:	f8ca 5010 	str.w	r5, [sl, #16]
 8002c3e:	f8ca 6010 	str.w	r6, [sl, #16]
 8002c42:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002c46:	2140      	movs	r1, #64	; 0x40
 8002c48:	f8ca c010 	str.w	ip, [sl, #16]
 8002c4c:	2010      	movs	r0, #16
 8002c4e:	f8ca 1010 	str.w	r1, [sl, #16]
 8002c52:	2180      	movs	r1, #128	; 0x80
 8002c54:	f8ca 1010 	str.w	r1, [sl, #16]
 8002c58:	f8c9 0010 	str.w	r0, [r9, #16]
 8002c5c:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c60:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002c64:	f8cb 2010 	str.w	r2, [fp, #16]
		if (x1 == x2 && y1 == y2)
 8002c68:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002c6a:	f8cb 3010 	str.w	r3, [fp, #16]
 8002c6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002c70:	4293      	cmp	r3, r2
 8002c72:	f000 80e5 	beq.w	8002e40 <LCD_Line.constprop.1+0xab4>
		if (error2 > -deltaY)
 8002c76:	9825      	ldr	r0, [sp, #148]	; 0x94
		error2 = error * 2;
 8002c78:	9902      	ldr	r1, [sp, #8]
		if (error2 > -deltaY)
 8002c7a:	4243      	negs	r3, r0
 8002c7c:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
		error2 = error * 2;
 8002c80:	ea4f 0241 	mov.w	r2, r1, lsl #1
		if (error2 > -deltaY)
 8002c84:	da24      	bge.n	8002cd0 <LCD_Line.constprop.1+0x944>
			x1 += signX;
 8002c86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002c88:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
			error -= deltaY;
 8002c8c:	1a09      	subs	r1, r1, r0
			x1 += signX;
 8002c8e:	4463      	add	r3, ip
			error -= deltaY;
 8002c90:	9102      	str	r1, [sp, #8]
			x1 += signX;
 8002c92:	b299      	uxth	r1, r3
 8002c94:	9110      	str	r1, [sp, #64]	; 0x40
 8002c96:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002c9a:	9113      	str	r1, [sp, #76]	; 0x4c
 8002c9c:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 8002ca0:	9100      	str	r1, [sp, #0]
 8002ca2:	f3c3 3181 	ubfx	r1, r3, #14, #2
 8002ca6:	911f      	str	r1, [sp, #124]	; 0x7c
 8002ca8:	f3c3 3142 	ubfx	r1, r3, #13, #3
 8002cac:	911d      	str	r1, [sp, #116]	; 0x74
 8002cae:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8002cb2:	911b      	str	r1, [sp, #108]	; 0x6c
 8002cb4:	f3c3 21c4 	ubfx	r1, r3, #11, #5
 8002cb8:	9119      	str	r1, [sp, #100]	; 0x64
 8002cba:	f3c3 2185 	ubfx	r1, r3, #10, #6
 8002cbe:	9117      	str	r1, [sp, #92]	; 0x5c
 8002cc0:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8002cc4:	9115      	str	r1, [sp, #84]	; 0x54
 8002cc6:	b2d9      	uxtb	r1, r3
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	9121      	str	r1, [sp, #132]	; 0x84
 8002cce:	9311      	str	r3, [sp, #68]	; 0x44
		if (error2 < deltaX)
 8002cd0:	9926      	ldr	r1, [sp, #152]	; 0x98
 8002cd2:	4291      	cmp	r1, r2
 8002cd4:	f77f abbe 	ble.w	8002454 <LCD_Line.constprop.1+0xc8>
			y1 += signY;
 8002cd8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002cda:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002cdc:	4413      	add	r3, r2
			error += deltaX;
 8002cde:	9a02      	ldr	r2, [sp, #8]
 8002ce0:	440a      	add	r2, r1
 8002ce2:	9202      	str	r2, [sp, #8]
			y1 += signY;
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	9223      	str	r2, [sp, #140]	; 0x8c
 8002ce8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002cec:	9214      	str	r2, [sp, #80]	; 0x50
 8002cee:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002cf2:	9201      	str	r2, [sp, #4]
 8002cf4:	f3c3 3281 	ubfx	r2, r3, #14, #2
 8002cf8:	9220      	str	r2, [sp, #128]	; 0x80
 8002cfa:	f3c3 3242 	ubfx	r2, r3, #13, #3
 8002cfe:	921e      	str	r2, [sp, #120]	; 0x78
 8002d00:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8002d04:	921c      	str	r2, [sp, #112]	; 0x70
 8002d06:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 8002d0a:	921a      	str	r2, [sp, #104]	; 0x68
 8002d0c:	f3c3 2285 	ubfx	r2, r3, #10, #6
 8002d10:	9218      	str	r2, [sp, #96]	; 0x60
 8002d12:	f3c3 2246 	ubfx	r2, r3, #9, #7
 8002d16:	9216      	str	r2, [sp, #88]	; 0x58
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	9222      	str	r2, [sp, #136]	; 0x88
 8002d20:	9312      	str	r3, [sp, #72]	; 0x48
 8002d22:	f7ff bb97 	b.w	8002454 <LCD_Line.constprop.1+0xc8>
 8002d26:	2320      	movs	r3, #32
 8002d28:	f8c9 3010 	str.w	r3, [r9, #16]
 8002d2c:	e72e      	b.n	8002b8c <LCD_Line.constprop.1+0x800>
 8002d2e:	2210      	movs	r2, #16
 8002d30:	f8c9 2010 	str.w	r2, [r9, #16]
 8002d34:	e722      	b.n	8002b7c <LCD_Line.constprop.1+0x7f0>
 8002d36:	2180      	movs	r1, #128	; 0x80
 8002d38:	f8ca 1010 	str.w	r1, [sl, #16]
 8002d3c:	e717      	b.n	8002b6e <LCD_Line.constprop.1+0x7e2>
 8002d3e:	2040      	movs	r0, #64	; 0x40
 8002d40:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d44:	e70c      	b.n	8002b60 <LCD_Line.constprop.1+0x7d4>
 8002d46:	2020      	movs	r0, #32
 8002d48:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d4c:	e700      	b.n	8002b50 <LCD_Line.constprop.1+0x7c4>
 8002d4e:	2010      	movs	r0, #16
 8002d50:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d54:	e6f4      	b.n	8002b40 <LCD_Line.constprop.1+0x7b4>
 8002d56:	2008      	movs	r0, #8
 8002d58:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d5c:	e6e8      	b.n	8002b30 <LCD_Line.constprop.1+0x7a4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d5e:	f8ca 5010 	str.w	r5, [sl, #16]
 8002d62:	e6df      	b.n	8002b24 <LCD_Line.constprop.1+0x798>
    GPIOx->BSRR = GPIO_Pin;
 8002d64:	2020      	movs	r0, #32
 8002d66:	f8c9 0010 	str.w	r0, [r9, #16]
 8002d6a:	e6b4      	b.n	8002ad6 <LCD_Line.constprop.1+0x74a>
 8002d6c:	2010      	movs	r0, #16
 8002d6e:	f8c9 0010 	str.w	r0, [r9, #16]
 8002d72:	e6a8      	b.n	8002ac6 <LCD_Line.constprop.1+0x73a>
 8002d74:	2080      	movs	r0, #128	; 0x80
 8002d76:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d7a:	e69c      	b.n	8002ab6 <LCD_Line.constprop.1+0x72a>
 8002d7c:	2040      	movs	r0, #64	; 0x40
 8002d7e:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d82:	e690      	b.n	8002aa6 <LCD_Line.constprop.1+0x71a>
 8002d84:	2020      	movs	r0, #32
 8002d86:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d8a:	e684      	b.n	8002a96 <LCD_Line.constprop.1+0x70a>
 8002d8c:	2010      	movs	r0, #16
 8002d8e:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d92:	e678      	b.n	8002a86 <LCD_Line.constprop.1+0x6fa>
 8002d94:	2008      	movs	r0, #8
 8002d96:	f8ca 0010 	str.w	r0, [sl, #16]
 8002d9a:	e66c      	b.n	8002a76 <LCD_Line.constprop.1+0x6ea>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d9c:	f8ca 5010 	str.w	r5, [sl, #16]
 8002da0:	e664      	b.n	8002a6c <LCD_Line.constprop.1+0x6e0>
    GPIOx->BSRR = GPIO_Pin;
 8002da2:	f04f 0c20 	mov.w	ip, #32
 8002da6:	f8c9 c010 	str.w	ip, [r9, #16]
 8002daa:	e635      	b.n	8002a18 <LCD_Line.constprop.1+0x68c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dac:	f8ca 5010 	str.w	r5, [sl, #16]
 8002db0:	e57c      	b.n	80028ac <LCD_Line.constprop.1+0x520>
    GPIOx->BSRR = GPIO_Pin;
 8002db2:	2320      	movs	r3, #32
 8002db4:	f8c9 3010 	str.w	r3, [r9, #16]
 8002db8:	e51a      	b.n	80027f0 <LCD_Line.constprop.1+0x464>
 8002dba:	2210      	movs	r2, #16
 8002dbc:	f8c9 2010 	str.w	r2, [r9, #16]
 8002dc0:	e50e      	b.n	80027e0 <LCD_Line.constprop.1+0x454>
 8002dc2:	2180      	movs	r1, #128	; 0x80
 8002dc4:	f8ca 1010 	str.w	r1, [sl, #16]
 8002dc8:	e503      	b.n	80027d2 <LCD_Line.constprop.1+0x446>
 8002dca:	2040      	movs	r0, #64	; 0x40
 8002dcc:	f8ca 0010 	str.w	r0, [sl, #16]
 8002dd0:	e4f8      	b.n	80027c4 <LCD_Line.constprop.1+0x438>
 8002dd2:	2020      	movs	r0, #32
 8002dd4:	f8ca 0010 	str.w	r0, [sl, #16]
 8002dd8:	e4ec      	b.n	80027b4 <LCD_Line.constprop.1+0x428>
 8002dda:	2010      	movs	r0, #16
 8002ddc:	f8ca 0010 	str.w	r0, [sl, #16]
 8002de0:	e4e0      	b.n	80027a4 <LCD_Line.constprop.1+0x418>
 8002de2:	2008      	movs	r0, #8
 8002de4:	f8ca 0010 	str.w	r0, [sl, #16]
 8002de8:	e4cc      	b.n	8002784 <LCD_Line.constprop.1+0x3f8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dea:	f8ca 5010 	str.w	r5, [sl, #16]
 8002dee:	e4c3      	b.n	8002778 <LCD_Line.constprop.1+0x3ec>
    GPIOx->BSRR = GPIO_Pin;
 8002df0:	2020      	movs	r0, #32
 8002df2:	f8c9 0010 	str.w	r0, [r9, #16]
 8002df6:	e498      	b.n	800272a <LCD_Line.constprop.1+0x39e>
 8002df8:	2010      	movs	r0, #16
 8002dfa:	f8c9 0010 	str.w	r0, [r9, #16]
 8002dfe:	e48c      	b.n	800271a <LCD_Line.constprop.1+0x38e>
 8002e00:	2080      	movs	r0, #128	; 0x80
 8002e02:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e06:	e480      	b.n	800270a <LCD_Line.constprop.1+0x37e>
 8002e08:	2040      	movs	r0, #64	; 0x40
 8002e0a:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e0e:	e474      	b.n	80026fa <LCD_Line.constprop.1+0x36e>
 8002e10:	2020      	movs	r0, #32
 8002e12:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e16:	e468      	b.n	80026ea <LCD_Line.constprop.1+0x35e>
 8002e18:	2010      	movs	r0, #16
 8002e1a:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e1e:	e45c      	b.n	80026da <LCD_Line.constprop.1+0x34e>
 8002e20:	2008      	movs	r0, #8
 8002e22:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e26:	e450      	b.n	80026ca <LCD_Line.constprop.1+0x33e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e28:	f8ca 5010 	str.w	r5, [sl, #16]
 8002e2c:	e448      	b.n	80026c0 <LCD_Line.constprop.1+0x334>
    GPIOx->BSRR = GPIO_Pin;
 8002e2e:	f04f 0c20 	mov.w	ip, #32
 8002e32:	f8c9 c010 	str.w	ip, [r9, #16]
 8002e36:	e419      	b.n	800266c <LCD_Line.constprop.1+0x2e0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e38:	f8ca 5010 	str.w	r5, [sl, #16]
 8002e3c:	f7ff bb60 	b.w	8002500 <LCD_Line.constprop.1+0x174>
		if (x1 == x2 && y1 == y2)
 8002e40:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8002e42:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8002e44:	4293      	cmp	r3, r2
 8002e46:	f47f af16 	bne.w	8002c76 <LCD_Line.constprop.1+0x8ea>
}
 8002e4a:	b02b      	add	sp, #172	; 0xac
 8002e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002e50 <I2C_RequestMemoryWrite.constprop.0>:
  * @param  MemAddSize Size of internal memory address
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
 8002e50:	b470      	push	{r4, r5, r6}
{
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e52:	4c6c      	ldr	r4, [pc, #432]	; (8003004 <I2C_RequestMemoryWrite.constprop.0+0x1b4>)
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
 8002e54:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e56:	6862      	ldr	r2, [r4, #4]
 8002e58:	6813      	ldr	r3, [r2, #0]
 8002e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	e003      	b.n	8002e6a <I2C_RequestMemoryWrite.constprop.0+0x1a>
  return uwTick;
 8002e62:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e64:	1a5b      	subs	r3, r3, r1
 8002e66:	2b64      	cmp	r3, #100	; 0x64
 8002e68:	d834      	bhi.n	8002ed4 <I2C_RequestMemoryWrite.constprop.0+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e6a:	6953      	ldr	r3, [r2, #20]
 8002e6c:	07db      	lsls	r3, r3, #31
 8002e6e:	d5f8      	bpl.n	8002e62 <I2C_RequestMemoryWrite.constprop.0+0x12>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e70:	23ae      	movs	r3, #174	; 0xae
 8002e72:	6113      	str	r3, [r2, #16]
 8002e74:	e00a      	b.n	8002e8c <I2C_RequestMemoryWrite.constprop.0+0x3c>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e76:	6953      	ldr	r3, [r2, #20]
 8002e78:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002e7c:	d157      	bne.n	8002f2e <I2C_RequestMemoryWrite.constprop.0+0xde>
 8002e7e:	6825      	ldr	r5, [r4, #0]
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e80:	eba5 0c01 	sub.w	ip, r5, r1
 8002e84:	f1bc 0f64 	cmp.w	ip, #100	; 0x64
 8002e88:	f200 80a0 	bhi.w	8002fcc <I2C_RequestMemoryWrite.constprop.0+0x17c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e8c:	6953      	ldr	r3, [r2, #20]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	f013 0302 	ands.w	r3, r3, #2
 8002e94:	d1ef      	bne.n	8002e76 <I2C_RequestMemoryWrite.constprop.0+0x26>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	6953      	ldr	r3, [r2, #20]
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	6993      	ldr	r3, [r2, #24]
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ea2:	6953      	ldr	r3, [r2, #20]
 8002ea4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8002ea8:	d159      	bne.n	8002f5e <I2C_RequestMemoryWrite.constprop.0+0x10e>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eaa:	6955      	ldr	r5, [r2, #20]
 8002eac:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
 8002eb0:	d127      	bne.n	8002f02 <I2C_RequestMemoryWrite.constprop.0+0xb2>
 8002eb2:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb4:	1a5b      	subs	r3, r3, r1
 8002eb6:	2b64      	cmp	r3, #100	; 0x64
 8002eb8:	d9f3      	bls.n	8002ea2 <I2C_RequestMemoryWrite.constprop.0+0x52>
        hi2c->State             = HAL_I2C_STATE_READY;
 8002eba:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ebc:	6365      	str	r5, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ebe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ec2:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ec6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002ec8:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ecc:	f043 0320 	orr.w	r3, r3, #32
 8002ed0:	6463      	str	r3, [r4, #68]	; 0x44
 8002ed2:	e025      	b.n	8002f20 <I2C_RequestMemoryWrite.constprop.0+0xd0>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ed4:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ed6:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ed8:	6361      	str	r1, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8002eda:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ede:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ee2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002ee4:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ee8:	f043 0320 	orr.w	r3, r3, #32
 8002eec:	6463      	str	r3, [r4, #68]	; 0x44
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eee:	6813      	ldr	r3, [r2, #0]
 8002ef0:	05da      	lsls	r2, r3, #23
 8002ef2:	d54f      	bpl.n	8002f94 <I2C_RequestMemoryWrite.constprop.0+0x144>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8002ef8:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002efa:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002efc:	b003      	add	sp, #12
 8002efe:	bc70      	pop	{r4, r5, r6}
 8002f00:	4770      	bx	lr
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f02:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f04:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8002f08:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0a:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f0c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f14:	6c61      	ldr	r1, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f1a:	f041 0104 	orr.w	r1, r1, #4
 8002f1e:	6461      	str	r1, [r4, #68]	; 0x44
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d067      	beq.n	8002ff6 <I2C_RequestMemoryWrite.constprop.0+0x1a6>
    return HAL_ERROR;
 8002f26:	2001      	movs	r0, #1
}
 8002f28:	b003      	add	sp, #12
 8002f2a:	bc70      	pop	{r4, r5, r6}
 8002f2c:	4770      	bx	lr
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f2e:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f30:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f34:	2520      	movs	r5, #32
    return HAL_ERROR;
 8002f36:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f38:	6813      	ldr	r3, [r2, #0]
 8002f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f3e:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f40:	6156      	str	r6, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f42:	6361      	str	r1, [r4, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f44:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002f4e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f52:	f043 0304 	orr.w	r3, r3, #4
 8002f56:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002f58:	b003      	add	sp, #12
 8002f5a:	bc70      	pop	{r4, r5, r6}
 8002f5c:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f5e:	0a03      	lsrs	r3, r0, #8
 8002f60:	6113      	str	r3, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f62:	6953      	ldr	r3, [r2, #20]
 8002f64:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8002f68:	d13f      	bne.n	8002fea <I2C_RequestMemoryWrite.constprop.0+0x19a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f6a:	6955      	ldr	r5, [r2, #20]
 8002f6c:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
 8002f70:	d114      	bne.n	8002f9c <I2C_RequestMemoryWrite.constprop.0+0x14c>
 8002f72:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f74:	1a5b      	subs	r3, r3, r1
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d9f3      	bls.n	8002f62 <I2C_RequestMemoryWrite.constprop.0+0x112>
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f7a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f7c:	6365      	str	r5, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f82:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f86:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002f88:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f8c:	f043 0320 	orr.w	r3, r3, #32
 8002f90:	6463      	str	r3, [r4, #68]	; 0x44
 8002f92:	e012      	b.n	8002fba <I2C_RequestMemoryWrite.constprop.0+0x16a>
    return HAL_TIMEOUT;
 8002f94:	2003      	movs	r0, #3
}
 8002f96:	b003      	add	sp, #12
 8002f98:	bc70      	pop	{r4, r5, r6}
 8002f9a:	4770      	bx	lr
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f9c:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f9e:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8002fa2:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa4:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fa6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002faa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fae:	6c61      	ldr	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8002fb0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fb4:	f041 0104 	orr.w	r1, r1, #4
 8002fb8:	6461      	str	r1, [r4, #68]	; 0x44
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d1b2      	bne.n	8002f26 <I2C_RequestMemoryWrite.constprop.0+0xd6>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc0:	6813      	ldr	r3, [r2, #0]
      return HAL_ERROR;
 8002fc2:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	e7c5      	b.n	8002f58 <I2C_RequestMemoryWrite.constprop.0+0x108>
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fcc:	2220      	movs	r2, #32
    return HAL_ERROR;
 8002fce:	2001      	movs	r0, #1
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd0:	6363      	str	r3, [r4, #52]	; 0x34
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fd2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002fda:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fde:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002fe4:	b003      	add	sp, #12
 8002fe6:	bc70      	pop	{r4, r5, r6}
 8002fe8:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fea:	b2c3      	uxtb	r3, r0
  return HAL_OK;
 8002fec:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fee:	6113      	str	r3, [r2, #16]
}
 8002ff0:	b003      	add	sp, #12
 8002ff2:	bc70      	pop	{r4, r5, r6}
 8002ff4:	4770      	bx	lr
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff6:	6813      	ldr	r3, [r2, #0]
    return HAL_ERROR;
 8002ff8:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	e7aa      	b.n	8002f58 <I2C_RequestMemoryWrite.constprop.0+0x108>
 8003002:	bf00      	nop
 8003004:	20000208 	.word	0x20000208

08003008 <HAL_I2C_Mem_Read.constprop.0.isra.0>:
  __IO uint32_t count = 0U;
 8003008:	2200      	movs	r2, #0
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 800300a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800300c:	4ba1      	ldr	r3, [pc, #644]	; (8003294 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x28c>)
 800300e:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 8003010:	9200      	str	r2, [sp, #0]
 8003012:	681d      	ldr	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003014:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8003018:	2a20      	cmp	r2, #32
 800301a:	d001      	beq.n	8003020 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x18>
}
 800301c:	b007      	add	sp, #28
 800301e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	e003      	b.n	800302c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x24>
 8003024:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003026:	1b64      	subs	r4, r4, r5
 8003028:	2c19      	cmp	r4, #25
 800302a:	d86a      	bhi.n	8003102 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800302c:	6994      	ldr	r4, [r2, #24]
 800302e:	ea6f 0c04 	mvn.w	ip, r4
 8003032:	f01c 0c02 	ands.w	ip, ip, #2
 8003036:	d0f5      	beq.n	8003024 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1c>
    __HAL_LOCK(hi2c);
 8003038:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
 800303c:	2c01      	cmp	r4, #1
 800303e:	d0ed      	beq.n	800301c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
 8003040:	2401      	movs	r4, #1
 8003042:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003046:	6814      	ldr	r4, [r2, #0]
 8003048:	07e7      	lsls	r7, r4, #31
 800304a:	d555      	bpl.n	80030f8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xf0>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800304c:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003050:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003054:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 8003056:	2601      	movs	r6, #1
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003058:	6814      	ldr	r4, [r2, #0]
 800305a:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 800305e:	6014      	str	r4, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003060:	4c8d      	ldr	r4, [pc, #564]	; (8003298 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x290>)
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003062:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003066:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800306a:	645f      	str	r7, [r3, #68]	; 0x44
    hi2c->XferCount   = Size;
 800306c:	85de      	strh	r6, [r3, #46]	; 0x2e
    hi2c->pBuffPtr    = pData;
 800306e:	6299      	str	r1, [r3, #40]	; 0x28
    hi2c->XferSize    = hi2c->XferCount;
 8003070:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003072:	631c      	str	r4, [r3, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003074:	6814      	ldr	r4, [r2, #0]
    hi2c->XferSize    = hi2c->XferCount;
 8003076:	b289      	uxth	r1, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003078:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    hi2c->XferSize    = hi2c->XferCount;
 800307c:	8599      	strh	r1, [r3, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800307e:	6014      	str	r4, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003080:	6814      	ldr	r4, [r2, #0]
 8003082:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8003086:	6014      	str	r4, [r2, #0]
 8003088:	e003      	b.n	8003092 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x8a>
 800308a:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308c:	1b64      	subs	r4, r4, r5
 800308e:	2c64      	cmp	r4, #100	; 0x64
 8003090:	d85e      	bhi.n	8003150 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003092:	6954      	ldr	r4, [r2, #20]
 8003094:	07e6      	lsls	r6, r4, #31
 8003096:	d5f8      	bpl.n	800308a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003098:	24ae      	movs	r4, #174	; 0xae
 800309a:	6114      	str	r4, [r2, #16]
 800309c:	e008      	b.n	80030b0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xa8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800309e:	6954      	ldr	r4, [r2, #20]
 80030a0:	f414 6480 	ands.w	r4, r4, #1024	; 0x400
 80030a4:	d169      	bne.n	800317a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x172>
 80030a6:	681e      	ldr	r6, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a8:	1b76      	subs	r6, r6, r5
 80030aa:	2e64      	cmp	r6, #100	; 0x64
 80030ac:	f200 8089 	bhi.w	80031c2 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030b0:	6954      	ldr	r4, [r2, #20]
 80030b2:	43e4      	mvns	r4, r4
 80030b4:	f014 0402 	ands.w	r4, r4, #2
 80030b8:	d1f1      	bne.n	800309e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x96>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ba:	9405      	str	r4, [sp, #20]
 80030bc:	6954      	ldr	r4, [r2, #20]
 80030be:	9405      	str	r4, [sp, #20]
 80030c0:	6994      	ldr	r4, [r2, #24]
 80030c2:	9405      	str	r4, [sp, #20]
 80030c4:	9c05      	ldr	r4, [sp, #20]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030c6:	6954      	ldr	r4, [r2, #20]
 80030c8:	f014 0480 	ands.w	r4, r4, #128	; 0x80
 80030cc:	d16a      	bne.n	80031a4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x19c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ce:	6956      	ldr	r6, [r2, #20]
 80030d0:	f416 6680 	ands.w	r6, r6, #1024	; 0x400
 80030d4:	d124      	bne.n	8003120 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x118>
 80030d6:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d8:	1b64      	subs	r4, r4, r5
 80030da:	2c64      	cmp	r4, #100	; 0x64
 80030dc:	d9f3      	bls.n	80030c6 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xbe>
        hi2c->State             = HAL_I2C_STATE_READY;
 80030de:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030e0:	635e      	str	r6, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 80030e2:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030e6:	f883 6042 	strb.w	r6, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030ea:	6c59      	ldr	r1, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80030ec:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030f0:	f041 0120 	orr.w	r1, r1, #32
 80030f4:	6459      	str	r1, [r3, #68]	; 0x44
 80030f6:	e022      	b.n	800313e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x136>
      __HAL_I2C_ENABLE(hi2c);
 80030f8:	6814      	ldr	r4, [r2, #0]
 80030fa:	f044 0401 	orr.w	r4, r4, #1
 80030fe:	6014      	str	r4, [r2, #0]
 8003100:	e7a4      	b.n	800304c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x44>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003102:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003104:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800310c:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003112:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003116:	f042 0220 	orr.w	r2, r2, #32
 800311a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800311c:	b007      	add	sp, #28
 800311e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State               = HAL_I2C_STATE_READY;
 8003120:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003122:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8003126:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003128:	635c      	str	r4, [r3, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 800312a:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800312e:	f883 4042 	strb.w	r4, [r3, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003132:	6c59      	ldr	r1, [r3, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8003134:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003138:	f041 0104 	orr.w	r1, r1, #4
 800313c:	6459      	str	r1, [r3, #68]	; 0x44
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003140:	2b04      	cmp	r3, #4
 8003142:	f47f af6b 	bne.w	800301c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003146:	6813      	ldr	r3, [r2, #0]
 8003148:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e765      	b.n	800301c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003150:	2000      	movs	r0, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003152:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003154:	6358      	str	r0, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003156:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800315a:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800315e:	6c59      	ldr	r1, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003160:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003164:	f041 0120 	orr.w	r1, r1, #32
 8003168:	6459      	str	r1, [r3, #68]	; 0x44
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	05d5      	lsls	r5, r2, #23
 800316e:	f57f af55 	bpl.w	800301c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003176:	645a      	str	r2, [r3, #68]	; 0x44
 8003178:	e750      	b.n	800301c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800317a:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800317c:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003180:	2420      	movs	r4, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003182:	6810      	ldr	r0, [r2, #0]
 8003184:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8003188:	6010      	str	r0, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800318a:	6155      	str	r5, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800318c:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 800318e:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003192:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003196:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003198:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800319c:	f042 0204 	orr.w	r2, r2, #4
 80031a0:	645a      	str	r2, [r3, #68]	; 0x44
 80031a2:	e73b      	b.n	800301c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031a4:	0a04      	lsrs	r4, r0, #8
 80031a6:	6114      	str	r4, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031a8:	6954      	ldr	r4, [r2, #20]
 80031aa:	f014 0480 	ands.w	r4, r4, #128	; 0x80
 80031ae:	d115      	bne.n	80031dc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1d4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031b0:	6956      	ldr	r6, [r2, #20]
 80031b2:	f416 6680 	ands.w	r6, r6, #1024	; 0x400
 80031b6:	d1b3      	bne.n	8003120 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x118>
 80031b8:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ba:	1b64      	subs	r4, r4, r5
 80031bc:	2c64      	cmp	r4, #100	; 0x64
 80031be:	d9f3      	bls.n	80031a8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1a0>
 80031c0:	e78d      	b.n	80030de <HAL_I2C_Mem_Read.constprop.0.isra.0+0xd6>
        hi2c->State               = HAL_I2C_STATE_READY;
 80031c2:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031c4:	635c      	str	r4, [r3, #52]	; 0x34
        hi2c->State               = HAL_I2C_STATE_READY;
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ca:	f883 4042 	strb.w	r4, [r3, #66]	; 0x42
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80031d0:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d4:	f042 0220 	orr.w	r2, r2, #32
 80031d8:	645a      	str	r2, [r3, #68]	; 0x44
 80031da:	e71f      	b.n	800301c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031dc:	b2c0      	uxtb	r0, r0
 80031de:	6110      	str	r0, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031e0:	6950      	ldr	r0, [r2, #20]
 80031e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80031e6:	d124      	bne.n	8003232 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x22a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031e8:	6954      	ldr	r4, [r2, #20]
 80031ea:	f414 6480 	ands.w	r4, r4, #1024	; 0x400
 80031ee:	d110      	bne.n	8003212 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x20a>
 80031f0:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f2:	1b40      	subs	r0, r0, r5
 80031f4:	2864      	cmp	r0, #100	; 0x64
 80031f6:	d9f3      	bls.n	80031e0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1d8>
        hi2c->State             = HAL_I2C_STATE_READY;
 80031f8:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031fa:	635c      	str	r4, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 80031fc:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003200:	f883 4042 	strb.w	r4, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003204:	6c59      	ldr	r1, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003206:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800320a:	f041 0120 	orr.w	r1, r1, #32
 800320e:	6459      	str	r1, [r3, #68]	; 0x44
 8003210:	e795      	b.n	800313e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x136>
    hi2c->State               = HAL_I2C_STATE_READY;
 8003212:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003214:	f46f 6480 	mvn.w	r4, #1024	; 0x400
 8003218:	6154      	str	r4, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800321a:	6358      	str	r0, [r3, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 800321c:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003220:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003224:	6c59      	ldr	r1, [r3, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8003226:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800322a:	f041 0104 	orr.w	r1, r1, #4
 800322e:	6459      	str	r1, [r3, #68]	; 0x44
 8003230:	e785      	b.n	800313e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x136>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003232:	6810      	ldr	r0, [r2, #0]
 8003234:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8003238:	6010      	str	r0, [r2, #0]
 800323a:	e003      	b.n	8003244 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x23c>
 800323c:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323e:	1b40      	subs	r0, r0, r5
 8003240:	2864      	cmp	r0, #100	; 0x64
 8003242:	d885      	bhi.n	8003150 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003244:	6950      	ldr	r0, [r2, #20]
 8003246:	07c4      	lsls	r4, r0, #31
 8003248:	d5f8      	bpl.n	800323c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x234>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800324a:	20af      	movs	r0, #175	; 0xaf
 800324c:	6110      	str	r0, [r2, #16]
 800324e:	e007      	b.n	8003260 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x258>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003250:	6950      	ldr	r0, [r2, #20]
 8003252:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8003256:	d190      	bne.n	800317a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x172>
 8003258:	681c      	ldr	r4, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800325a:	1b64      	subs	r4, r4, r5
 800325c:	2c64      	cmp	r4, #100	; 0x64
 800325e:	d81d      	bhi.n	800329c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x294>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003260:	6950      	ldr	r0, [r2, #20]
 8003262:	43c0      	mvns	r0, r0
 8003264:	f010 0002 	ands.w	r0, r0, #2
 8003268:	d1f2      	bne.n	8003250 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x248>
    if (hi2c->XferSize == 0U)
 800326a:	bb29      	cbnz	r1, 80032b8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2b0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326c:	9104      	str	r1, [sp, #16]
 800326e:	6951      	ldr	r1, [r2, #20]
 8003270:	9104      	str	r1, [sp, #16]
 8003272:	6991      	ldr	r1, [r2, #24]
 8003274:	9104      	str	r1, [sp, #16]
 8003276:	9904      	ldr	r1, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003278:	6811      	ldr	r1, [r2, #0]
 800327a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800327e:	6011      	str	r1, [r2, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003280:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003282:	2120      	movs	r1, #32
    __HAL_UNLOCK(hi2c);
 8003284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003288:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800328c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    return HAL_OK;
 8003290:	e6c4      	b.n	800301c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
 8003292:	bf00      	nop
 8003294:	20000208 	.word	0x20000208
 8003298:	ffff0000 	.word	0xffff0000
        hi2c->State             = HAL_I2C_STATE_READY;
 800329c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800329e:	6358      	str	r0, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032a4:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80032aa:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032ae:	f042 0220 	orr.w	r2, r2, #32
 80032b2:	645a      	str	r2, [r3, #68]	; 0x44
}
 80032b4:	b007      	add	sp, #28
 80032b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (hi2c->XferSize == 1U)
 80032b8:	2901      	cmp	r1, #1
 80032ba:	f000 80d8 	beq.w	800346e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x466>
    else if (hi2c->XferSize == 2U)
 80032be:	2902      	cmp	r1, #2
 80032c0:	f000 80ec 	beq.w	800349c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x494>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c4:	6814      	ldr	r4, [r2, #0]
 80032c6:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 80032ca:	6014      	str	r4, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032cc:	9001      	str	r0, [sp, #4]
 80032ce:	6950      	ldr	r0, [r2, #20]
 80032d0:	9001      	str	r0, [sp, #4]
 80032d2:	6990      	ldr	r0, [r2, #24]
 80032d4:	9001      	str	r0, [sp, #4]
 80032d6:	9801      	ldr	r0, [sp, #4]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80032d8:	4e79      	ldr	r6, [pc, #484]	; (80034c0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4b8>)
 80032da:	4c7a      	ldr	r4, [pc, #488]	; (80034c4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4bc>)
      if (hi2c->XferSize <= 3U)
 80032dc:	2903      	cmp	r1, #3
 80032de:	d83c      	bhi.n	800335a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x352>
        if (hi2c->XferSize == 1U)
 80032e0:	2901      	cmp	r1, #1
 80032e2:	f000 809a 	beq.w	800341a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x412>
        else if (hi2c->XferSize == 2U)
 80032e6:	2902      	cmp	r1, #2
 80032e8:	d005      	beq.n	80032f6 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2ee>
 80032ea:	e053      	b.n	8003394 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x38c>
 80032ec:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ee:	1b49      	subs	r1, r1, r5
 80032f0:	2964      	cmp	r1, #100	; 0x64
 80032f2:	f200 8097 	bhi.w	8003424 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x41c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032f6:	6951      	ldr	r1, [r2, #20]
 80032f8:	0748      	lsls	r0, r1, #29
 80032fa:	d5f7      	bpl.n	80032ec <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2e4>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032fc:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fe:	685a      	ldr	r2, [r3, #4]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003300:	6a98      	ldr	r0, [r3, #40]	; 0x28
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003302:	6811      	ldr	r1, [r2, #0]
 8003304:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003308:	6011      	str	r1, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330a:	6912      	ldr	r2, [r2, #16]
 800330c:	7002      	strb	r2, [r0, #0]
          hi2c->pBuffPtr++;
 800330e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003310:	3201      	adds	r2, #1
 8003312:	629a      	str	r2, [r3, #40]	; 0x28
          hi2c->XferSize--;
 8003314:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003316:	3a01      	subs	r2, #1
 8003318:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 800331a:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800331c:	3a01      	subs	r2, #1
 800331e:	b292      	uxth	r2, r2
 8003320:	85da      	strh	r2, [r3, #46]	; 0x2e
  __ASM volatile ("cpsie i" : : : "memory");
 8003322:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	6911      	ldr	r1, [r2, #16]
 8003328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800332a:	7011      	strb	r1, [r2, #0]
          hi2c->pBuffPtr++;
 800332c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
          hi2c->XferSize--;
 800332e:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 8003330:	3201      	adds	r2, #1
 8003332:	629a      	str	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003334:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
          hi2c->XferSize--;
 8003336:	3901      	subs	r1, #1
          hi2c->XferCount--;
 8003338:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 800333a:	b289      	uxth	r1, r1
          hi2c->XferCount--;
 800333c:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 800333e:	8599      	strh	r1, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 8003340:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (hi2c->XferSize > 0U)
 8003342:	2900      	cmp	r1, #0
 8003344:	d09c      	beq.n	8003280 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x278>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	e7c8      	b.n	80032dc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2d4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800334a:	6950      	ldr	r0, [r2, #20]
 800334c:	f010 0010 	ands.w	r0, r0, #16
 8003350:	d177      	bne.n	8003442 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x43a>
 8003352:	6819      	ldr	r1, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003354:	1b49      	subs	r1, r1, r5
 8003356:	2964      	cmp	r1, #100	; 0x64
 8003358:	d8a0      	bhi.n	800329c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x294>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800335a:	6951      	ldr	r1, [r2, #20]
 800335c:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 8003360:	d0f3      	beq.n	800334a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x342>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003362:	6911      	ldr	r1, [r2, #16]
 8003364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003366:	7011      	strb	r1, [r2, #0]
        hi2c->XferCount--;
 8003368:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
        hi2c->pBuffPtr++;
 800336a:	6a98      	ldr	r0, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800336c:	3a01      	subs	r2, #1
 800336e:	b292      	uxth	r2, r2
 8003370:	85da      	strh	r2, [r3, #46]	; 0x2e
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003372:	685a      	ldr	r2, [r3, #4]
        hi2c->XferSize--;
 8003374:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
        hi2c->pBuffPtr++;
 8003376:	1c47      	adds	r7, r0, #1
 8003378:	629f      	str	r7, [r3, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800337a:	6957      	ldr	r7, [r2, #20]
        hi2c->XferSize--;
 800337c:	3901      	subs	r1, #1
 800337e:	b289      	uxth	r1, r1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003380:	077f      	lsls	r7, r7, #29
        hi2c->XferSize--;
 8003382:	8599      	strh	r1, [r3, #44]	; 0x2c
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003384:	d5dd      	bpl.n	8003342 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x33a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003386:	6912      	ldr	r2, [r2, #16]
 8003388:	7042      	strb	r2, [r0, #1]
 800338a:	e7cf      	b.n	800332c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x324>
 800338c:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338e:	1b49      	subs	r1, r1, r5
 8003390:	2964      	cmp	r1, #100	; 0x64
 8003392:	d847      	bhi.n	8003424 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x41c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003394:	6951      	ldr	r1, [r2, #20]
 8003396:	0749      	lsls	r1, r1, #29
 8003398:	d5f8      	bpl.n	800338c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x384>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339a:	6811      	ldr	r1, [r2, #0]
 800339c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80033a0:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033a2:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	6910      	ldr	r0, [r2, #16]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033a8:	6832      	ldr	r2, [r6, #0]
 80033aa:	08d2      	lsrs	r2, r2, #3
 80033ac:	fba4 1202 	umull	r1, r2, r4, r2
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033b2:	0a12      	lsrs	r2, r2, #8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b4:	7008      	strb	r0, [r1, #0]
          hi2c->XferCount--;
 80033b6:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
          hi2c->XferCount--;
 80033bc:	3901      	subs	r1, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033be:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
          hi2c->XferCount--;
 80033c2:	b289      	uxth	r1, r1
 80033c4:	85d9      	strh	r1, [r3, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033c6:	9200      	str	r2, [sp, #0]
          hi2c->XferSize--;
 80033c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 80033ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
          hi2c->XferSize--;
 80033cc:	3a01      	subs	r2, #1
 80033ce:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 80033d0:	1c42      	adds	r2, r0, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80033d2:	6859      	ldr	r1, [r3, #4]
          hi2c->pBuffPtr++;
 80033d4:	629a      	str	r2, [r3, #40]	; 0x28
 80033d6:	e002      	b.n	80033de <HAL_I2C_Mem_Read.constprop.0.isra.0+0x3d6>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80033d8:	694a      	ldr	r2, [r1, #20]
 80033da:	0752      	lsls	r2, r2, #29
 80033dc:	d440      	bmi.n	8003460 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x458>
            count--;
 80033de:	9a00      	ldr	r2, [sp, #0]
 80033e0:	3a01      	subs	r2, #1
 80033e2:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 80033e4:	9a00      	ldr	r2, [sp, #0]
 80033e6:	2a00      	cmp	r2, #0
 80033e8:	d1f6      	bne.n	80033d8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x3d0>
              hi2c->State               = HAL_I2C_STATE_READY;
 80033ea:	2120      	movs	r1, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80033ec:	635a      	str	r2, [r3, #52]	; 0x34
              hi2c->State               = HAL_I2C_STATE_READY;
 80033ee:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80033f8:	f041 0120 	orr.w	r1, r1, #32
 80033fc:	6459      	str	r1, [r3, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 80033fe:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003404:	b007      	add	sp, #28
 8003406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003408:	6950      	ldr	r0, [r2, #20]
 800340a:	f010 0010 	ands.w	r0, r0, #16
 800340e:	d118      	bne.n	8003442 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x43a>
 8003410:	6819      	ldr	r1, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003412:	1b49      	subs	r1, r1, r5
 8003414:	2964      	cmp	r1, #100	; 0x64
 8003416:	f63f af41 	bhi.w	800329c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x294>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800341a:	6951      	ldr	r1, [r2, #20]
 800341c:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 8003420:	d0f2      	beq.n	8003408 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x400>
 8003422:	e780      	b.n	8003326 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x31e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003424:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003426:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003428:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 800342a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800342e:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003432:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003434:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003438:	f042 0220 	orr.w	r2, r2, #32
 800343c:	645a      	str	r2, [r3, #68]	; 0x44
}
 800343e:	b007      	add	sp, #28
 8003440:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003442:	f06f 0410 	mvn.w	r4, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8003446:	2020      	movs	r0, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003448:	6154      	str	r4, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800344a:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 800344c:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003450:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003456:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800345a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800345c:	b007      	add	sp, #28
 800345e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003460:	680a      	ldr	r2, [r1, #0]
 8003462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003466:	600a      	str	r2, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003468:	690a      	ldr	r2, [r1, #16]
 800346a:	7042      	strb	r2, [r0, #1]
 800346c:	e74f      	b.n	800330e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x306>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346e:	6811      	ldr	r1, [r2, #0]
 8003470:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003474:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003476:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	9003      	str	r0, [sp, #12]
 800347c:	6951      	ldr	r1, [r2, #20]
 800347e:	9103      	str	r1, [sp, #12]
 8003480:	6991      	ldr	r1, [r2, #24]
 8003482:	9103      	str	r1, [sp, #12]
 8003484:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003486:	6811      	ldr	r1, [r2, #0]
 8003488:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800348c:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800348e:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 8003490:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8003492:	2900      	cmp	r1, #0
 8003494:	f43f aef4 	beq.w	8003280 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x278>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	e71d      	b.n	80032d8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2d0>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800349c:	6811      	ldr	r1, [r2, #0]
 800349e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80034a2:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034a4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	9002      	str	r0, [sp, #8]
 80034aa:	6951      	ldr	r1, [r2, #20]
 80034ac:	9102      	str	r1, [sp, #8]
 80034ae:	6991      	ldr	r1, [r2, #24]
 80034b0:	9102      	str	r1, [sp, #8]
 80034b2:	9902      	ldr	r1, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b4:	6811      	ldr	r1, [r2, #0]
 80034b6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80034ba:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034bc:	b662      	cpsie	i
}
 80034be:	e7e7      	b.n	8003490 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x488>
 80034c0:	20000000 	.word	0x20000000
 80034c4:	14f8b589 	.word	0x14f8b589

080034c8 <AT24XX_Update>:
    } else
        return false;
}

uint8_t AT24XX_Read(uint16_t address) {
    uint16_t dt[1] = {0};
 80034c8:	2300      	movs	r3, #0
void AT24XX_Write(uint16_t address, uint8_t val) {
    uint8_t save[] = {val};
    AT24XX_Save(address, save, 1);
}

void AT24XX_Update(uint16_t address, uint8_t val) {
 80034ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034cc:	460d      	mov	r5, r1
 80034ce:	b083      	sub	sp, #12
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80034d0:	a901      	add	r1, sp, #4
    uint16_t dt[1] = {0};
 80034d2:	f8ad 3004 	strh.w	r3, [sp, #4]
void AT24XX_Update(uint16_t address, uint8_t val) {
 80034d6:	4606      	mov	r6, r0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80034d8:	f7ff fd96 	bl	8003008 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 80034dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80034e0:	429d      	cmp	r5, r3
 80034e2:	d101      	bne.n	80034e8 <AT24XX_Update+0x20>
}
 80034e4:	b003      	add	sp, #12
 80034e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034e8:	4c61      	ldr	r4, [pc, #388]	; (8003670 <AT24XX_Update+0x1a8>)
    uint8_t save[] = {val};
 80034ea:	f88d 5004 	strb.w	r5, [sp, #4]
 80034ee:	6825      	ldr	r5, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d1f5      	bne.n	80034e4 <AT24XX_Update+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034f8:	6861      	ldr	r1, [r4, #4]
 80034fa:	e004      	b.n	8003506 <AT24XX_Update+0x3e>
 80034fc:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fe:	1b52      	subs	r2, r2, r5
 8003500:	2a19      	cmp	r2, #25
 8003502:	f200 80a7 	bhi.w	8003654 <AT24XX_Update+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003506:	698b      	ldr	r3, [r1, #24]
 8003508:	43db      	mvns	r3, r3
 800350a:	f013 0302 	ands.w	r3, r3, #2
 800350e:	d0f5      	beq.n	80034fc <AT24XX_Update+0x34>
    __HAL_LOCK(hi2c);
 8003510:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003514:	2b01      	cmp	r3, #1
 8003516:	d0e5      	beq.n	80034e4 <AT24XX_Update+0x1c>
 8003518:	2301      	movs	r3, #1
 800351a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800351e:	680b      	ldr	r3, [r1, #0]
 8003520:	07da      	lsls	r2, r3, #31
 8003522:	d403      	bmi.n	800352c <AT24XX_Update+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8003524:	680b      	ldr	r3, [r1, #0]
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	600b      	str	r3, [r1, #0]
    hi2c->XferCount   = Size;
 800352c:	2201      	movs	r2, #1
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800352e:	4630      	mov	r0, r6
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003530:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003534:	2740      	movs	r7, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003536:	2600      	movs	r6, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003538:	680b      	ldr	r3, [r1, #0]
 800353a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800353e:	600b      	str	r3, [r1, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003540:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
    hi2c->pBuffPtr    = pData;
 8003544:	ab01      	add	r3, sp, #4
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003546:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800354a:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 800354c:	85e2      	strh	r2, [r4, #46]	; 0x2e
    hi2c->XferSize    = hi2c->XferCount;
 800354e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    hi2c->pBuffPtr    = pData;
 8003550:	62a3      	str	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003552:	4b48      	ldr	r3, [pc, #288]	; (8003674 <AT24XX_Update+0x1ac>)
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003554:	4629      	mov	r1, r5
    hi2c->XferSize    = hi2c->XferCount;
 8003556:	85a2      	strh	r2, [r4, #44]	; 0x2c
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003558:	6323      	str	r3, [r4, #48]	; 0x30
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800355a:	f7ff fc79 	bl	8002e50 <I2C_RequestMemoryWrite.constprop.0>
 800355e:	2800      	cmp	r0, #0
 8003560:	d1c0      	bne.n	80034e4 <AT24XX_Update+0x1c>
    while (hi2c->XferSize > 0U)
 8003562:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8003564:	2800      	cmp	r0, #0
 8003566:	f000 8081 	beq.w	800366c <AT24XX_Update+0x1a4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800356a:	6861      	ldr	r1, [r4, #4]
 800356c:	694b      	ldr	r3, [r1, #20]
 800356e:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003572:	d114      	bne.n	800359e <AT24XX_Update+0xd6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003574:	694a      	ldr	r2, [r1, #20]
 8003576:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 800357a:	d130      	bne.n	80035de <AT24XX_Update+0x116>
 800357c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357e:	1b5b      	subs	r3, r3, r5
 8003580:	2b64      	cmp	r3, #100	; 0x64
 8003582:	d9f3      	bls.n	800356c <AT24XX_Update+0xa4>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003584:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003586:	6362      	str	r2, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003588:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800358c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003590:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003592:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003596:	f043 0320 	orr.w	r3, r3, #32
 800359a:	6463      	str	r3, [r4, #68]	; 0x44
 800359c:	e02e      	b.n	80035fc <AT24XX_Update+0x134>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800359e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
      hi2c->XferSize--;
 80035a0:	1e42      	subs	r2, r0, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035a2:	4633      	mov	r3, r6
 80035a4:	f813 7b01 	ldrb.w	r7, [r3], #1
      hi2c->XferSize--;
 80035a8:	b292      	uxth	r2, r2
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035aa:	610f      	str	r7, [r1, #16]
      hi2c->pBuffPtr++;
 80035ac:	62a3      	str	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80035ae:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
      hi2c->XferSize--;
 80035b0:	85a2      	strh	r2, [r4, #44]	; 0x2c
      hi2c->XferCount--;
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035b8:	694b      	ldr	r3, [r1, #20]
 80035ba:	075b      	lsls	r3, r3, #29
 80035bc:	d427      	bmi.n	800360e <AT24XX_Update+0x146>
      hi2c->XferSize--;
 80035be:	4610      	mov	r0, r2
    while (hi2c->XferSize > 0U)
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d1d3      	bne.n	800356c <AT24XX_Update+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035c4:	694b      	ldr	r3, [r1, #20]
 80035c6:	f013 0304 	ands.w	r3, r3, #4
 80035ca:	d130      	bne.n	800362e <AT24XX_Update+0x166>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035cc:	694a      	ldr	r2, [r1, #20]
 80035ce:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 80035d2:	d104      	bne.n	80035de <AT24XX_Update+0x116>
 80035d4:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d6:	1b5b      	subs	r3, r3, r5
 80035d8:	2b64      	cmp	r3, #100	; 0x64
 80035da:	d9f3      	bls.n	80035c4 <AT24XX_Update+0xfc>
 80035dc:	e7d2      	b.n	8003584 <AT24XX_Update+0xbc>
    hi2c->State               = HAL_I2C_STATE_READY;
 80035de:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035e0:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 80035e4:	6148      	str	r0, [r1, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80035e6:	6363      	str	r3, [r4, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 80035e8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035f0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80035f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035f6:	f042 0204 	orr.w	r2, r2, #4
 80035fa:	6462      	str	r2, [r4, #68]	; 0x44
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80035fe:	2b04      	cmp	r3, #4
 8003600:	f47f af70 	bne.w	80034e4 <AT24XX_Update+0x1c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003604:	680b      	ldr	r3, [r1, #0]
 8003606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800360a:	600b      	str	r3, [r1, #0]
 800360c:	e76a      	b.n	80034e4 <AT24XX_Update+0x1c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800360e:	2a00      	cmp	r2, #0
 8003610:	d0d8      	beq.n	80035c4 <AT24XX_Update+0xfc>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003612:	7873      	ldrb	r3, [r6, #1]
        hi2c->XferSize--;
 8003614:	3802      	subs	r0, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003616:	610b      	str	r3, [r1, #16]
        hi2c->XferCount--;
 8003618:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        hi2c->XferSize--;
 800361a:	b280      	uxth	r0, r0
        hi2c->XferCount--;
 800361c:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 800361e:	3602      	adds	r6, #2
        hi2c->XferCount--;
 8003620:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8003622:	62a6      	str	r6, [r4, #40]	; 0x28
        hi2c->XferSize--;
 8003624:	85a0      	strh	r0, [r4, #44]	; 0x2c
        hi2c->XferCount--;
 8003626:	85e3      	strh	r3, [r4, #46]	; 0x2e
    while (hi2c->XferSize > 0U)
 8003628:	2800      	cmp	r0, #0
 800362a:	d19f      	bne.n	800356c <AT24XX_Update+0xa4>
 800362c:	e7ca      	b.n	80035c4 <AT24XX_Update+0xfc>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800362e:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003630:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003632:	680b      	ldr	r3, [r1, #0]
 8003634:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003638:	600b      	str	r3, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800363a:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800363e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003642:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8003646:	6822      	ldr	r2, [r4, #0]
 8003648:	6823      	ldr	r3, [r4, #0]
  while ((HAL_GetTick() - tickstart) < wait)
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	2b05      	cmp	r3, #5
 800364e:	d9fb      	bls.n	8003648 <AT24XX_Update+0x180>
}
 8003650:	b003      	add	sp, #12
 8003652:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 8003654:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003656:	6363      	str	r3, [r4, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003658:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800365c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003660:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003664:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003666:	4313      	orrs	r3, r2
 8003668:	6463      	str	r3, [r4, #68]	; 0x44
 800366a:	e73b      	b.n	80034e4 <AT24XX_Update+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800366c:	6861      	ldr	r1, [r4, #4]
 800366e:	e7a9      	b.n	80035c4 <AT24XX_Update+0xfc>
 8003670:	20000208 	.word	0x20000208
 8003674:	ffff0000 	.word	0xffff0000

08003678 <HAL_I2C_Master_Receive.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8003678:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800367a:	2400      	movs	r4, #0
  return uwTick;
 800367c:	4b8b      	ldr	r3, [pc, #556]	; (80038ac <HAL_I2C_Master_Receive.constprop.0.isra.0+0x234>)
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 800367e:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 8003680:	9400      	str	r4, [sp, #0]
 8003682:	681e      	ldr	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003684:	f893 4041 	ldrb.w	r4, [r3, #65]	; 0x41
 8003688:	2c20      	cmp	r4, #32
 800368a:	d001      	beq.n	8003690 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x18>
}
 800368c:	b007      	add	sp, #28
 800368e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003690:	685c      	ldr	r4, [r3, #4]
 8003692:	e004      	b.n	800369e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x26>
 8003694:	681d      	ldr	r5, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003696:	1bad      	subs	r5, r5, r6
 8003698:	2d19      	cmp	r5, #25
 800369a:	f200 80b3 	bhi.w	8003804 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800369e:	69a5      	ldr	r5, [r4, #24]
 80036a0:	ea6f 0c05 	mvn.w	ip, r5
 80036a4:	f01c 0c02 	ands.w	ip, ip, #2
 80036a8:	d0f4      	beq.n	8003694 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1c>
    __HAL_LOCK(hi2c);
 80036aa:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
 80036ae:	2d01      	cmp	r5, #1
 80036b0:	d0ec      	beq.n	800368c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
 80036b2:	2501      	movs	r5, #1
 80036b4:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036b8:	6825      	ldr	r5, [r4, #0]
 80036ba:	07ed      	lsls	r5, r5, #31
 80036bc:	d55d      	bpl.n	800377a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x102>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80036be:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036c2:	f04f 0c10 	mov.w	ip, #16
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036c6:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036c8:	6825      	ldr	r5, [r4, #0]
 80036ca:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 80036ce:	6025      	str	r5, [r4, #0]
    hi2c->pBuffPtr    = pData;
 80036d0:	6299      	str	r1, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036d2:	4977      	ldr	r1, [pc, #476]	; (80038b0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x238>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80036d4:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036d8:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036dc:	645f      	str	r7, [r3, #68]	; 0x44
    hi2c->XferCount   = Size;
 80036de:	85da      	strh	r2, [r3, #46]	; 0x2e
    hi2c->XferSize    = hi2c->XferCount;
 80036e0:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036e2:	6319      	str	r1, [r3, #48]	; 0x30
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036e4:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e6:	6821      	ldr	r1, [r4, #0]
    hi2c->XferSize    = hi2c->XferCount;
 80036e8:	b292      	uxth	r2, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ea:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036ee:	2d08      	cmp	r5, #8
    hi2c->XferSize    = hi2c->XferCount;
 80036f0:	859a      	strh	r2, [r3, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f2:	6021      	str	r1, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036f4:	d007      	beq.n	8003706 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8e>
 80036f6:	2d01      	cmp	r5, #1
 80036f8:	d005      	beq.n	8003706 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8e>
 80036fa:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 80036fe:	d002      	beq.n	8003706 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003700:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003702:	2911      	cmp	r1, #17
 8003704:	d109      	bne.n	800371a <HAL_I2C_Master_Receive.constprop.0.isra.0+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003706:	6821      	ldr	r1, [r4, #0]
 8003708:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800370c:	6021      	str	r1, [r4, #0]
 800370e:	e004      	b.n	800371a <HAL_I2C_Master_Receive.constprop.0.isra.0+0xa2>
 8003710:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003712:	1b89      	subs	r1, r1, r6
 8003714:	2964      	cmp	r1, #100	; 0x64
 8003716:	f200 8084 	bhi.w	8003822 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1aa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800371a:	6961      	ldr	r1, [r4, #20]
 800371c:	07cf      	lsls	r7, r1, #31
 800371e:	d5f7      	bpl.n	8003710 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x98>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003720:	6959      	ldr	r1, [r3, #20]
 8003722:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8003726:	d12d      	bne.n	8003784 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x10c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003728:	f040 0001 	orr.w	r0, r0, #1
 800372c:	b2c0      	uxtb	r0, r0
 800372e:	6120      	str	r0, [r4, #16]
 8003730:	e008      	b.n	8003744 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xcc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003732:	6961      	ldr	r1, [r4, #20]
 8003734:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003738:	f040 8088 	bne.w	800384c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d4>
 800373c:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373e:	1b80      	subs	r0, r0, r6
 8003740:	2864      	cmp	r0, #100	; 0x64
 8003742:	d851      	bhi.n	80037e8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003744:	6961      	ldr	r1, [r4, #20]
 8003746:	43c9      	mvns	r1, r1
 8003748:	f011 0102 	ands.w	r1, r1, #2
 800374c:	d1f1      	bne.n	8003732 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xba>
    if (hi2c->XferSize == 0U)
 800374e:	2a00      	cmp	r2, #0
 8003750:	f040 8092 	bne.w	8003878 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x200>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003754:	9204      	str	r2, [sp, #16]
 8003756:	6962      	ldr	r2, [r4, #20]
 8003758:	9204      	str	r2, [sp, #16]
 800375a:	69a2      	ldr	r2, [r4, #24]
 800375c:	9204      	str	r2, [sp, #16]
 800375e:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003760:	6822      	ldr	r2, [r4, #0]
 8003762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003766:	6022      	str	r2, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003768:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800376a:	2120      	movs	r1, #32
    __HAL_UNLOCK(hi2c);
 800376c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003770:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    return HAL_OK;
 8003778:	e788      	b.n	800368c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
      __HAL_I2C_ENABLE(hi2c);
 800377a:	6825      	ldr	r5, [r4, #0]
 800377c:	f045 0501 	orr.w	r5, r5, #1
 8003780:	6025      	str	r5, [r4, #0]
 8003782:	e79c      	b.n	80036be <HAL_I2C_Master_Receive.constprop.0.isra.0+0x46>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003784:	21f0      	movs	r1, #240	; 0xf0
 8003786:	6121      	str	r1, [r4, #16]
 8003788:	e007      	b.n	800379a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x122>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800378a:	6961      	ldr	r1, [r4, #20]
 800378c:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003790:	d15c      	bne.n	800384c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d4>
 8003792:	681d      	ldr	r5, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003794:	1bad      	subs	r5, r5, r6
 8003796:	2d64      	cmp	r5, #100	; 0x64
 8003798:	d826      	bhi.n	80037e8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800379a:	6961      	ldr	r1, [r4, #20]
 800379c:	070d      	lsls	r5, r1, #28
 800379e:	d5f4      	bpl.n	800378a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x112>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037a0:	6120      	str	r0, [r4, #16]
 80037a2:	e007      	b.n	80037b4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x13c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037a4:	6961      	ldr	r1, [r4, #20]
 80037a6:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 80037aa:	d14f      	bne.n	800384c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d4>
 80037ac:	6818      	ldr	r0, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ae:	1b80      	subs	r0, r0, r6
 80037b0:	2864      	cmp	r0, #100	; 0x64
 80037b2:	d819      	bhi.n	80037e8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037b4:	6961      	ldr	r1, [r4, #20]
 80037b6:	43c9      	mvns	r1, r1
 80037b8:	f011 0102 	ands.w	r1, r1, #2
 80037bc:	d1f2      	bne.n	80037a4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x12c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037be:	9105      	str	r1, [sp, #20]
 80037c0:	6961      	ldr	r1, [r4, #20]
 80037c2:	9105      	str	r1, [sp, #20]
 80037c4:	69a1      	ldr	r1, [r4, #24]
 80037c6:	9105      	str	r1, [sp, #20]
 80037c8:	9905      	ldr	r1, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ca:	6821      	ldr	r1, [r4, #0]
 80037cc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80037d0:	6021      	str	r1, [r4, #0]
 80037d2:	e003      	b.n	80037dc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x164>
 80037d4:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d6:	1b89      	subs	r1, r1, r6
 80037d8:	2964      	cmp	r1, #100	; 0x64
 80037da:	d822      	bhi.n	8003822 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1aa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037dc:	6961      	ldr	r1, [r4, #20]
 80037de:	07c9      	lsls	r1, r1, #31
 80037e0:	d5f8      	bpl.n	80037d4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x15c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80037e2:	21f1      	movs	r1, #241	; 0xf1
 80037e4:	6121      	str	r1, [r4, #16]
 80037e6:	e7ad      	b.n	8003744 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xcc>
        hi2c->State             = HAL_I2C_STATE_READY;
 80037e8:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037ea:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037f0:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80037f6:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037fa:	f042 0220 	orr.w	r2, r2, #32
 80037fe:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003800:	b007      	add	sp, #28
 8003802:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 8003804:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003806:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 800380a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800380e:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003812:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003814:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003818:	f042 0220 	orr.w	r2, r2, #32
 800381c:	645a      	str	r2, [r3, #68]	; 0x44
}
 800381e:	b007      	add	sp, #28
 8003820:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003822:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003824:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003826:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800382c:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003832:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003836:	f042 0220 	orr.w	r2, r2, #32
 800383a:	645a      	str	r2, [r3, #68]	; 0x44
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800383c:	6822      	ldr	r2, [r4, #0]
 800383e:	05d0      	lsls	r0, r2, #23
 8003840:	f57f af24 	bpl.w	800368c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003848:	645a      	str	r2, [r3, #68]	; 0x44
 800384a:	e71f      	b.n	800368c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800384c:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800384e:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003852:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003854:	6822      	ldr	r2, [r4, #0]
 8003856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800385a:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800385c:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800385e:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8003860:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003864:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800386a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800386e:	f042 0204 	orr.w	r2, r2, #4
 8003872:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003874:	b007      	add	sp, #28
 8003876:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (hi2c->XferSize == 1U)
 8003878:	2a01      	cmp	r2, #1
 800387a:	f000 80fc 	beq.w	8003a76 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3fe>
    else if (hi2c->XferSize == 2U)
 800387e:	2a02      	cmp	r2, #2
 8003880:	f000 80be 	beq.w	8003a00 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x388>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003884:	6820      	ldr	r0, [r4, #0]
 8003886:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 800388a:	6020      	str	r0, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388c:	9101      	str	r1, [sp, #4]
 800388e:	6961      	ldr	r1, [r4, #20]
 8003890:	9101      	str	r1, [sp, #4]
 8003892:	69a1      	ldr	r1, [r4, #24]
 8003894:	9101      	str	r1, [sp, #4]
 8003896:	9901      	ldr	r1, [sp, #4]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003898:	4d06      	ldr	r5, [pc, #24]	; (80038b4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x23c>)
 800389a:	4807      	ldr	r0, [pc, #28]	; (80038b8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x240>)
      if (hi2c->XferSize <= 3U)
 800389c:	2a03      	cmp	r2, #3
 800389e:	d847      	bhi.n	8003930 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2b8>
        if (hi2c->XferSize == 1U)
 80038a0:	2a01      	cmp	r2, #1
 80038a2:	f000 80a5 	beq.w	80039f0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x378>
        else if (hi2c->XferSize == 2U)
 80038a6:	2a02      	cmp	r2, #2
 80038a8:	d00d      	beq.n	80038c6 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x24e>
 80038aa:	e05e      	b.n	800396a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2f2>
 80038ac:	20000208 	.word	0x20000208
 80038b0:	ffff0000 	.word	0xffff0000
 80038b4:	20000000 	.word	0x20000000
 80038b8:	14f8b589 	.word	0x14f8b589
 80038bc:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038be:	1b92      	subs	r2, r2, r6
 80038c0:	2a64      	cmp	r2, #100	; 0x64
 80038c2:	f200 80b4 	bhi.w	8003a2e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c6:	6962      	ldr	r2, [r4, #20]
 80038c8:	0757      	lsls	r7, r2, #29
 80038ca:	d5f7      	bpl.n	80038bc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x244>
  __ASM volatile ("cpsid i" : : : "memory");
 80038cc:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ce:	685a      	ldr	r2, [r3, #4]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d2:	6811      	ldr	r1, [r2, #0]
 80038d4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80038d8:	6011      	str	r1, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038da:	6912      	ldr	r2, [r2, #16]
 80038dc:	7022      	strb	r2, [r4, #0]
          hi2c->pBuffPtr++;
 80038de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038e0:	3201      	adds	r2, #1
 80038e2:	629a      	str	r2, [r3, #40]	; 0x28
          hi2c->XferSize--;
 80038e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038e6:	3a01      	subs	r2, #1
 80038e8:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 80038ea:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80038ec:	3a01      	subs	r2, #1
 80038ee:	b292      	uxth	r2, r2
 80038f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  __ASM volatile ("cpsie i" : : : "memory");
 80038f2:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	6911      	ldr	r1, [r2, #16]
 80038f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038fa:	7011      	strb	r1, [r2, #0]
          hi2c->pBuffPtr++;
 80038fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038fe:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
          hi2c->pBuffPtr++;
 8003900:	3201      	adds	r2, #1
 8003902:	629a      	str	r2, [r3, #40]	; 0x28
          hi2c->XferSize--;
 8003904:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 8003906:	3901      	subs	r1, #1
          hi2c->XferSize--;
 8003908:	3a01      	subs	r2, #1
 800390a:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 800390c:	b289      	uxth	r1, r1
          hi2c->XferSize--;
 800390e:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->XferCount--;
 8003910:	85d9      	strh	r1, [r3, #46]	; 0x2e
    while (hi2c->XferSize > 0U)
 8003912:	2a00      	cmp	r2, #0
 8003914:	f43f af28 	beq.w	8003768 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003918:	685c      	ldr	r4, [r3, #4]
 800391a:	e7bf      	b.n	800389c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x224>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800391c:	6961      	ldr	r1, [r4, #20]
 800391e:	f011 0110 	ands.w	r1, r1, #16
 8003922:	f040 8093 	bne.w	8003a4c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3d4>
 8003926:	681a      	ldr	r2, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003928:	1b92      	subs	r2, r2, r6
 800392a:	2a64      	cmp	r2, #100	; 0x64
 800392c:	f63f af5c 	bhi.w	80037e8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003930:	6962      	ldr	r2, [r4, #20]
 8003932:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8003936:	d0f1      	beq.n	800391c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2a4>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003938:	6921      	ldr	r1, [r4, #16]
 800393a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800393c:	7011      	strb	r1, [r2, #0]
        hi2c->XferCount--;
 800393e:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
        hi2c->pBuffPtr++;
 8003940:	6a99      	ldr	r1, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003942:	3a01      	subs	r2, #1
 8003944:	b292      	uxth	r2, r2
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003946:	685c      	ldr	r4, [r3, #4]
        hi2c->XferCount--;
 8003948:	85da      	strh	r2, [r3, #46]	; 0x2e
        hi2c->pBuffPtr++;
 800394a:	1c4f      	adds	r7, r1, #1
        hi2c->XferSize--;
 800394c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
        hi2c->pBuffPtr++;
 800394e:	629f      	str	r7, [r3, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003950:	6967      	ldr	r7, [r4, #20]
        hi2c->XferSize--;
 8003952:	3a01      	subs	r2, #1
 8003954:	b292      	uxth	r2, r2
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003956:	077f      	lsls	r7, r7, #29
        hi2c->XferSize--;
 8003958:	859a      	strh	r2, [r3, #44]	; 0x2c
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800395a:	d5da      	bpl.n	8003912 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x29a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800395c:	6922      	ldr	r2, [r4, #16]
 800395e:	704a      	strb	r2, [r1, #1]
 8003960:	e7cc      	b.n	80038fc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x284>
 8003962:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003964:	1b92      	subs	r2, r2, r6
 8003966:	2a64      	cmp	r2, #100	; 0x64
 8003968:	d861      	bhi.n	8003a2e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800396a:	6962      	ldr	r2, [r4, #20]
 800396c:	0751      	lsls	r1, r2, #29
 800396e:	d5f8      	bpl.n	8003962 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2ea>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003970:	6822      	ldr	r2, [r4, #0]
 8003972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003976:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003978:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	6914      	ldr	r4, [r2, #16]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800397e:	682a      	ldr	r2, [r5, #0]
 8003980:	08d2      	lsrs	r2, r2, #3
 8003982:	fba0 1202 	umull	r1, r2, r0, r2
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003986:	6a99      	ldr	r1, [r3, #40]	; 0x28
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003988:	0a12      	lsrs	r2, r2, #8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398a:	700c      	strb	r4, [r1, #0]
          hi2c->XferCount--;
 800398c:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800398e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
          hi2c->XferCount--;
 8003992:	3901      	subs	r1, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003994:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
          hi2c->XferCount--;
 8003998:	b289      	uxth	r1, r1
 800399a:	85d9      	strh	r1, [r3, #46]	; 0x2e
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800399c:	9200      	str	r2, [sp, #0]
          hi2c->XferSize--;
 800399e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 80039a0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
          hi2c->XferSize--;
 80039a2:	3a01      	subs	r2, #1
 80039a4:	859a      	strh	r2, [r3, #44]	; 0x2c
          hi2c->pBuffPtr++;
 80039a6:	1c62      	adds	r2, r4, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80039a8:	6859      	ldr	r1, [r3, #4]
          hi2c->pBuffPtr++;
 80039aa:	629a      	str	r2, [r3, #40]	; 0x28
 80039ac:	e002      	b.n	80039b4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x33c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80039ae:	694a      	ldr	r2, [r1, #20]
 80039b0:	0752      	lsls	r2, r2, #29
 80039b2:	d459      	bmi.n	8003a68 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3f0>
            count--;
 80039b4:	9a00      	ldr	r2, [sp, #0]
 80039b6:	3a01      	subs	r2, #1
 80039b8:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 80039ba:	9a00      	ldr	r2, [sp, #0]
 80039bc:	2a00      	cmp	r2, #0
 80039be:	d1f6      	bne.n	80039ae <HAL_I2C_Master_Receive.constprop.0.isra.0+0x336>
              hi2c->State               = HAL_I2C_STATE_READY;
 80039c0:	2120      	movs	r1, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80039c2:	635a      	str	r2, [r3, #52]	; 0x34
              hi2c->State               = HAL_I2C_STATE_READY;
 80039c4:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039cc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80039ce:	f041 0120 	orr.w	r1, r1, #32
 80039d2:	6459      	str	r1, [r3, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 80039d4:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80039d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80039da:	b007      	add	sp, #28
 80039dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039de:	6961      	ldr	r1, [r4, #20]
 80039e0:	f011 0110 	ands.w	r1, r1, #16
 80039e4:	d132      	bne.n	8003a4c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3d4>
 80039e6:	681a      	ldr	r2, [r3, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e8:	1b92      	subs	r2, r2, r6
 80039ea:	2a64      	cmp	r2, #100	; 0x64
 80039ec:	f63f aefc 	bhi.w	80037e8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039f0:	6962      	ldr	r2, [r4, #20]
 80039f2:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80039f6:	d0f2      	beq.n	80039de <HAL_I2C_Master_Receive.constprop.0.isra.0+0x366>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f8:	6921      	ldr	r1, [r4, #16]
 80039fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039fc:	7011      	strb	r1, [r2, #0]
 80039fe:	e77d      	b.n	80038fc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x284>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a00:	6822      	ldr	r2, [r4, #0]
 8003a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a06:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a08:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	9102      	str	r1, [sp, #8]
 8003a0e:	6951      	ldr	r1, [r2, #20]
 8003a10:	9102      	str	r1, [sp, #8]
 8003a12:	6991      	ldr	r1, [r2, #24]
 8003a14:	9102      	str	r1, [sp, #8]
 8003a16:	9902      	ldr	r1, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a18:	6811      	ldr	r1, [r2, #0]
 8003a1a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003a1e:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a20:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 8003a22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a24:	2a00      	cmp	r2, #0
 8003a26:	f43f ae9f 	beq.w	8003768 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a2a:	685c      	ldr	r4, [r3, #4]
 8003a2c:	e734      	b.n	8003898 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x220>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a2e:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a30:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a32:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a38:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003a3e:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a42:	f042 0220 	orr.w	r2, r2, #32
 8003a46:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003a48:	b007      	add	sp, #28
 8003a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a4c:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a4e:	f06f 0010 	mvn.w	r0, #16
 8003a52:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a54:	635a      	str	r2, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a56:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a5e:	6c59      	ldr	r1, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a64:	6459      	str	r1, [r3, #68]	; 0x44
 8003a66:	e611      	b.n	800368c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a68:	680a      	ldr	r2, [r1, #0]
 8003a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6e:	600a      	str	r2, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a70:	690a      	ldr	r2, [r1, #16]
 8003a72:	7062      	strb	r2, [r4, #1]
 8003a74:	e733      	b.n	80038de <HAL_I2C_Master_Receive.constprop.0.isra.0+0x266>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a76:	6822      	ldr	r2, [r4, #0]
 8003a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a7c:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a7e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	9103      	str	r1, [sp, #12]
 8003a84:	6951      	ldr	r1, [r2, #20]
 8003a86:	9103      	str	r1, [sp, #12]
 8003a88:	6991      	ldr	r1, [r2, #24]
 8003a8a:	9103      	str	r1, [sp, #12]
 8003a8c:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a8e:	6811      	ldr	r1, [r2, #0]
 8003a90:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003a94:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a96:	b662      	cpsie	i
}
 8003a98:	e7c3      	b.n	8003a22 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3aa>
 8003a9a:	bf00      	nop

08003a9c <HAL_I2C_Master_Transmit.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8003a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a9e:	4b97      	ldr	r3, [pc, #604]	; (8003cfc <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x260>)
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	681e      	ldr	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa4:	f893 4041 	ldrb.w	r4, [r3, #65]	; 0x41
 8003aa8:	2c20      	cmp	r4, #32
 8003aaa:	d001      	beq.n	8003ab0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x14>
}
 8003aac:	b003      	add	sp, #12
 8003aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ab0:	685c      	ldr	r4, [r3, #4]
 8003ab2:	e004      	b.n	8003abe <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22>
 8003ab4:	681d      	ldr	r5, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab6:	1bad      	subs	r5, r5, r6
 8003ab8:	2d19      	cmp	r5, #25
 8003aba:	f200 80cc 	bhi.w	8003c56 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003abe:	69a5      	ldr	r5, [r4, #24]
 8003ac0:	ea6f 0c05 	mvn.w	ip, r5
 8003ac4:	f01c 0c02 	ands.w	ip, ip, #2
 8003ac8:	d0f4      	beq.n	8003ab4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18>
    __HAL_LOCK(hi2c);
 8003aca:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
 8003ace:	2d01      	cmp	r5, #1
 8003ad0:	d0ec      	beq.n	8003aac <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
 8003ad2:	2501      	movs	r5, #1
 8003ad4:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ad8:	6825      	ldr	r5, [r4, #0]
 8003ada:	07ed      	lsls	r5, r5, #31
 8003adc:	f140 80a7 	bpl.w	8003c2e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x192>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ae0:	f04f 0e21 	mov.w	lr, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ae4:	f04f 0c10 	mov.w	ip, #16
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ae8:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aea:	6825      	ldr	r5, [r4, #0]
 8003aec:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8003af0:	6025      	str	r5, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003af2:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003af6:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003afa:	645f      	str	r7, [r3, #68]	; 0x44
    hi2c->XferCount   = Size;
 8003afc:	85da      	strh	r2, [r3, #46]	; 0x2e
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003afe:	4a80      	ldr	r2, [pc, #512]	; (8003d00 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x264>)
    hi2c->XferSize    = hi2c->XferCount;
 8003b00:	8ddd      	ldrh	r5, [r3, #46]	; 0x2e
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    hi2c->XferSize    = hi2c->XferCount;
 8003b06:	b2ad      	uxth	r5, r5
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b08:	2a08      	cmp	r2, #8
    hi2c->pBuffPtr    = pData;
 8003b0a:	6299      	str	r1, [r3, #40]	; 0x28
    hi2c->XferSize    = hi2c->XferCount;
 8003b0c:	859d      	strh	r5, [r3, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b0e:	d007      	beq.n	8003b20 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
 8003b10:	2a01      	cmp	r2, #1
 8003b12:	d005      	beq.n	8003b20 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
 8003b14:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003b18:	d002      	beq.n	8003b20 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b1c:	2a12      	cmp	r2, #18
 8003b1e:	d109      	bne.n	8003b34 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x98>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b20:	6822      	ldr	r2, [r4, #0]
 8003b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b26:	6022      	str	r2, [r4, #0]
 8003b28:	e004      	b.n	8003b34 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x98>
 8003b2a:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2c:	1b92      	subs	r2, r2, r6
 8003b2e:	2a64      	cmp	r2, #100	; 0x64
 8003b30:	f200 80a0 	bhi.w	8003c74 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1d8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b34:	6962      	ldr	r2, [r4, #20]
 8003b36:	07d2      	lsls	r2, r2, #31
 8003b38:	d5f7      	bpl.n	8003b2a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x8e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b3a:	695a      	ldr	r2, [r3, #20]
 8003b3c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003b40:	d17a      	bne.n	8003c38 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x19c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b42:	6120      	str	r0, [r4, #16]
 8003b44:	e009      	b.n	8003b5a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xbe>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b46:	6962      	ldr	r2, [r4, #20]
 8003b48:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8003b4c:	f040 80a7 	bne.w	8003c9e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x202>
 8003b50:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b52:	1b89      	subs	r1, r1, r6
 8003b54:	2964      	cmp	r1, #100	; 0x64
 8003b56:	f200 80b8 	bhi.w	8003cca <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b5a:	6962      	ldr	r2, [r4, #20]
 8003b5c:	43d2      	mvns	r2, r2
 8003b5e:	f012 0202 	ands.w	r2, r2, #2
 8003b62:	d1f0      	bne.n	8003b46 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xaa>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b64:	9201      	str	r2, [sp, #4]
 8003b66:	6962      	ldr	r2, [r4, #20]
 8003b68:	9201      	str	r2, [sp, #4]
 8003b6a:	69a2      	ldr	r2, [r4, #24]
 8003b6c:	9201      	str	r2, [sp, #4]
 8003b6e:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8003b70:	2d00      	cmp	r5, #0
 8003b72:	f000 80b6 	beq.w	8003ce2 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b76:	6962      	ldr	r2, [r4, #20]
 8003b78:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8003b7c:	d12c      	bne.n	8003bd8 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x13c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b7e:	6961      	ldr	r1, [r4, #20]
 8003b80:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003b84:	d110      	bne.n	8003ba8 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10c>
 8003b86:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b88:	1b92      	subs	r2, r2, r6
 8003b8a:	2a64      	cmp	r2, #100	; 0x64
 8003b8c:	d9f3      	bls.n	8003b76 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xda>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b8e:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b90:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b96:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003b9c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ba0:	f042 0220 	orr.w	r2, r2, #32
 8003ba4:	645a      	str	r2, [r3, #68]	; 0x44
 8003ba6:	e00e      	b.n	8003bc6 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x12a>
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ba8:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003baa:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8003bae:	6160      	str	r0, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb0:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bb2:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bba:	6c59      	ldr	r1, [r3, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8003bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bc0:	f041 0104 	orr.w	r1, r1, #4
 8003bc4:	6459      	str	r1, [r3, #68]	; 0x44
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	f47f af6f 	bne.w	8003aac <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bd4:	6023      	str	r3, [r4, #0]
 8003bd6:	e769      	b.n	8003aac <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bd8:	6a9f      	ldr	r7, [r3, #40]	; 0x28
      hi2c->XferSize--;
 8003bda:	1e6a      	subs	r2, r5, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bdc:	4638      	mov	r0, r7
 8003bde:	f810 1b01 	ldrb.w	r1, [r0], #1
      hi2c->XferSize--;
 8003be2:	b292      	uxth	r2, r2
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003be4:	6121      	str	r1, [r4, #16]
      hi2c->XferCount--;
 8003be6:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
      hi2c->pBuffPtr++;
 8003be8:	6298      	str	r0, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bea:	3901      	subs	r1, #1
 8003bec:	b289      	uxth	r1, r1
 8003bee:	85d9      	strh	r1, [r3, #46]	; 0x2e
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bf0:	6961      	ldr	r1, [r4, #20]
      hi2c->XferSize--;
 8003bf2:	859a      	strh	r2, [r3, #44]	; 0x2c
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bf4:	0749      	lsls	r1, r1, #29
 8003bf6:	d518      	bpl.n	8003c2a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18e>
 8003bf8:	b1ba      	cbz	r2, 8003c2a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bfa:	787a      	ldrb	r2, [r7, #1]
        hi2c->XferSize--;
 8003bfc:	3d02      	subs	r5, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bfe:	6122      	str	r2, [r4, #16]
        hi2c->XferCount--;
 8003c00:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
        hi2c->XferSize--;
 8003c02:	b2ad      	uxth	r5, r5
        hi2c->XferCount--;
 8003c04:	3a01      	subs	r2, #1
        hi2c->pBuffPtr++;
 8003c06:	3702      	adds	r7, #2
        hi2c->XferCount--;
 8003c08:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8003c0a:	629f      	str	r7, [r3, #40]	; 0x28
        hi2c->XferSize--;
 8003c0c:	859d      	strh	r5, [r3, #44]	; 0x2c
        hi2c->XferCount--;
 8003c0e:	85da      	strh	r2, [r3, #46]	; 0x2e
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c10:	6962      	ldr	r2, [r4, #20]
 8003c12:	f012 0204 	ands.w	r2, r2, #4
 8003c16:	d1ab      	bne.n	8003b70 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xd4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c18:	6961      	ldr	r1, [r4, #20]
 8003c1a:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003c1e:	d1c3      	bne.n	8003ba8 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10c>
 8003c20:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c22:	1b92      	subs	r2, r2, r6
 8003c24:	2a64      	cmp	r2, #100	; 0x64
 8003c26:	d9f3      	bls.n	8003c10 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x174>
 8003c28:	e7b1      	b.n	8003b8e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xf2>
 8003c2a:	4615      	mov	r5, r2
 8003c2c:	e7f0      	b.n	8003c10 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x174>
      __HAL_I2C_ENABLE(hi2c);
 8003c2e:	6825      	ldr	r5, [r4, #0]
 8003c30:	f045 0501 	orr.w	r5, r5, #1
 8003c34:	6025      	str	r5, [r4, #0]
 8003c36:	e753      	b.n	8003ae0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x44>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c38:	22f0      	movs	r2, #240	; 0xf0
 8003c3a:	6122      	str	r2, [r4, #16]
 8003c3c:	e007      	b.n	8003c4e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1b2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c3e:	6962      	ldr	r2, [r4, #20]
 8003c40:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8003c44:	d12b      	bne.n	8003c9e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x202>
 8003c46:	6819      	ldr	r1, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c48:	1b89      	subs	r1, r1, r6
 8003c4a:	2964      	cmp	r1, #100	; 0x64
 8003c4c:	d83d      	bhi.n	8003cca <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c4e:	6962      	ldr	r2, [r4, #20]
 8003c50:	0717      	lsls	r7, r2, #28
 8003c52:	d5f4      	bpl.n	8003c3e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1a2>
 8003c54:	e775      	b.n	8003b42 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c56:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c58:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c60:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003c66:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c6a:	f042 0220 	orr.w	r2, r2, #32
 8003c6e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003c70:	b003      	add	sp, #12
 8003c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c74:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c76:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c78:	6359      	str	r1, [r3, #52]	; 0x34
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c7e:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003c84:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c88:	f042 0220 	orr.w	r2, r2, #32
 8003c8c:	645a      	str	r2, [r3, #68]	; 0x44
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c8e:	6822      	ldr	r2, [r4, #0]
 8003c90:	05d1      	lsls	r1, r2, #23
 8003c92:	f57f af0b 	bpl.w	8003aac <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c9a:	645a      	str	r2, [r3, #68]	; 0x44
 8003c9c:	e706      	b.n	8003aac <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c9e:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ca0:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ca4:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca6:	6822      	ldr	r2, [r4, #0]
 8003ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cac:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cae:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb0:	6359      	str	r1, [r3, #52]	; 0x34
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cb2:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb6:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003cbc:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cc0:	f042 0204 	orr.w	r2, r2, #4
 8003cc4:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003cc6:	b003      	add	sp, #12
 8003cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cca:	2120      	movs	r1, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ccc:	635a      	str	r2, [r3, #52]	; 0x34
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cce:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	645a      	str	r2, [r3, #68]	; 0x44
 8003ce0:	e6e4      	b.n	8003aac <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce2:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003ce4:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce6:	6822      	ldr	r2, [r4, #0]
 8003ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cec:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003cee:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003cf2:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf6:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
    return HAL_OK;
 8003cfa:	e6d7      	b.n	8003aac <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
 8003cfc:	20000208 	.word	0x20000208
 8003d00:	ffff0000 	.word	0xffff0000

08003d04 <DS3231_Update>:
uint8_t bcdToDec(uint8_t val) {
    return ((val / 16 * 10) + (val % 16));
}

void DS3231_Update(void) {
    uint8_t cmd = 0;
 8003d04:	2300      	movs	r3, #0
void DS3231_Update(void) {
 8003d06:	b500      	push	{lr}
 8003d08:	b083      	sub	sp, #12
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8003d0a:	f10d 0107 	add.w	r1, sp, #7
 8003d0e:	2201      	movs	r2, #1
 8003d10:	20d0      	movs	r0, #208	; 0xd0
    uint8_t cmd = 0;
 8003d12:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8003d16:	f7ff fec1 	bl	8003a9c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8003d1a:	2213      	movs	r2, #19
 8003d1c:	20d0      	movs	r0, #208	; 0xd0
 8003d1e:	4903      	ldr	r1, [pc, #12]	; (8003d2c <DS3231_Update+0x28>)
 8003d20:	f7ff fcaa 	bl	8003678 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    rtcBufferSet[12] = rtcBuffer[11];
    rtcBufferSet[13] = rtcBuffer[12];
    rtcBufferSet[14] = rtcBuffer[13];
    rtcBufferSet[15] = rtcBuffer[14];
    rtcBufferSet[16] = rtcBuffer[15];
}
 8003d24:	b003      	add	sp, #12
 8003d26:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d2a:	bf00      	nop
 8003d2c:	20000260 	.word	0x20000260

08003d30 <LCD_Char.constprop.1.isra.0>:
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
}

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
 8003d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d34:	469b      	mov	fp, r3
	uint8_t  *bitmap = font -> bitmap;
	uint16_t bo = glyph -> bitmapOffset;
	uint8_t bits = 0, bit = 0;
	uint16_t set_pixels = 0;
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003d36:	78d3      	ldrb	r3, [r2, #3]
static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
 8003d38:	b085      	sub	sp, #20
 8003d3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
	uint16_t bo = glyph -> bitmapOffset;
 8003d3e:	f8b2 8000 	ldrh.w	r8, [r2]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003d42:	b38b      	cbz	r3, 8003da8 <LCD_Char.constprop.1.isra.0+0x78>
	uint8_t bits = 0, bit = 0;
 8003d44:	2600      	movs	r6, #0
 8003d46:	4691      	mov	r9, r2
 8003d48:	4637      	mov	r7, r6
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003d4a:	46b2      	mov	sl, r6
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8003d4c:	f899 1002 	ldrb.w	r1, [r9, #2]
 8003d50:	b351      	cbz	r1, 8003da8 <LCD_Char.constprop.1.isra.0+0x78>
 8003d52:	2400      	movs	r4, #0
 8003d54:	4622      	mov	r2, r4
		{
			if(bit == 0)
 8003d56:	2e00      	cmp	r6, #0
 8003d58:	d045      	beq.n	8003de6 <LCD_Char.constprop.1.isra.0+0xb6>
			else if (set_pixels > 0)
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
				set_pixels = 0;
			}
			bit >>= 1;
 8003d5a:	4633      	mov	r3, r6
 8003d5c:	0876      	lsrs	r6, r6, #1
			if(bits & bit)
 8003d5e:	ea17 0503 	ands.w	r5, r7, r3
				set_pixels++;
 8003d62:	f102 0301 	add.w	r3, r2, #1
			if(bits & bit)
 8003d66:	d022      	beq.n	8003dae <LCD_Char.constprop.1.isra.0+0x7e>
				set_pixels++;
 8003d68:	b29a      	uxth	r2, r3
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8003d6a:	3401      	adds	r4, #1
 8003d6c:	b2e4      	uxtb	r4, r4
 8003d6e:	42a1      	cmp	r1, r4
 8003d70:	d8f1      	bhi.n	8003d56 <LCD_Char.constprop.1.isra.0+0x26>
		}
		if (set_pixels > 0)
 8003d72:	b18a      	cbz	r2, 8003d98 <LCD_Char.constprop.1.isra.0+0x68>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8003d74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	f999 0005 	ldrsb.w	r0, [r9, #5]
 8003d7c:	9b02      	ldr	r3, [sp, #8]
 8003d7e:	4420      	add	r0, r4
 8003d80:	f999 1006 	ldrsb.w	r1, [r9, #6]
 8003d84:	1a80      	subs	r0, r0, r2
 8003d86:	4418      	add	r0, r3
 8003d88:	9b03      	ldr	r3, [sp, #12]
 8003d8a:	4451      	add	r1, sl
 8003d8c:	4419      	add	r1, r3
 8003d8e:	b280      	uxth	r0, r0
 8003d90:	2301      	movs	r3, #1
 8003d92:	b289      	uxth	r1, r1
 8003d94:	f7fc fea2 	bl	8000adc <LCD_Rect_Fill>
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003d98:	f899 3003 	ldrb.w	r3, [r9, #3]
 8003d9c:	f10a 0a01 	add.w	sl, sl, #1
 8003da0:	fa5f fa8a 	uxtb.w	sl, sl
 8003da4:	459a      	cmp	sl, r3
 8003da6:	d3d1      	bcc.n	8003d4c <LCD_Char.constprop.1.isra.0+0x1c>
			set_pixels = 0;
		}
	}
}
 8003da8:	b005      	add	sp, #20
 8003daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else if (set_pixels > 0)
 8003dae:	2a00      	cmp	r2, #0
 8003db0:	d0db      	beq.n	8003d6a <LCD_Char.constprop.1.isra.0+0x3a>
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8003db2:	f999 1006 	ldrsb.w	r1, [r9, #6]
 8003db6:	f999 0005 	ldrsb.w	r0, [r9, #5]
 8003dba:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003dbe:	4451      	add	r1, sl
 8003dc0:	4461      	add	r1, ip
 8003dc2:	4420      	add	r0, r4
 8003dc4:	f8dd c008 	ldr.w	ip, [sp, #8]
 8003dc8:	1a80      	subs	r0, r0, r2
 8003dca:	4460      	add	r0, ip
 8003dcc:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8003dd0:	b289      	uxth	r1, r1
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	f8cd c000 	str.w	ip, [sp]
 8003dd8:	b280      	uxth	r0, r0
 8003dda:	f7fc fe7f 	bl	8000adc <LCD_Rect_Fill>
				set_pixels = 0;
 8003dde:	462a      	mov	r2, r5
 8003de0:	f899 1002 	ldrb.w	r1, [r9, #2]
 8003de4:	e7c1      	b.n	8003d6a <LCD_Char.constprop.1.isra.0+0x3a>
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8003de6:	f108 0001 	add.w	r0, r8, #1
 8003dea:	f81b 7008 	ldrb.w	r7, [fp, r8]
				bit  = 0x80;
 8003dee:	2380      	movs	r3, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8003df0:	2640      	movs	r6, #64	; 0x40
 8003df2:	fa1f f880 	uxth.w	r8, r0
 8003df6:	e7b2      	b.n	8003d5e <LCD_Char.constprop.1.isra.0+0x2e>

08003df8 <HAL_InitTick.isra.0>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 8003df8:	b470      	push	{r4, r5, r6}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dfa:	4c19      	ldr	r4, [pc, #100]	; (8003e60 <HAL_InitTick.isra.0+0x68>)
 8003dfc:	4a19      	ldr	r2, [pc, #100]	; (8003e64 <HAL_InitTick.isra.0+0x6c>)
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	fba2 2303 	umull	r2, r3, r2, r3
 8003e04:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e06:	3b01      	subs	r3, #1
 8003e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e0c:	d20d      	bcs.n	8003e2a <HAL_InitTick.isra.0+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e0e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e12:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e16:	2100      	movs	r1, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e18:	2607      	movs	r6, #7
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e1a:	4d13      	ldr	r5, [pc, #76]	; (8003e68 <HAL_InitTick.isra.0+0x70>)
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e1c:	280f      	cmp	r0, #15
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e1e:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e20:	f885 c023 	strb.w	ip, [r5, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e24:	6191      	str	r1, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e26:	6116      	str	r6, [r2, #16]
 8003e28:	d901      	bls.n	8003e2e <HAL_InitTick.isra.0+0x36>
}
 8003e2a:	bc70      	pop	{r4, r5, r6}
 8003e2c:	4770      	bx	lr
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e2e:	68eb      	ldr	r3, [r5, #12]
    uwTickPrio = TickPriority;
 8003e30:	6060      	str	r0, [r4, #4]
 8003e32:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e36:	1af2      	subs	r2, r6, r3
 8003e38:	2a04      	cmp	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e3a:	f103 0504 	add.w	r5, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e3e:	bf28      	it	cs
 8003e40:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e42:	2d06      	cmp	r5, #6
 8003e44:	bf88      	it	hi
 8003e46:	1ed9      	subhi	r1, r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e48:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4c:	4093      	lsls	r3, r2
 8003e4e:	ea20 0003 	bic.w	r0, r0, r3
 8003e52:	4088      	lsls	r0, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e54:	4c04      	ldr	r4, [pc, #16]	; (8003e68 <HAL_InitTick.isra.0+0x70>)
 8003e56:	0100      	lsls	r0, r0, #4
 8003e58:	b2c0      	uxtb	r0, r0
 8003e5a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 8003e5e:	e7e4      	b.n	8003e2a <HAL_InitTick.isra.0+0x32>
 8003e60:	20000000 	.word	0x20000000
 8003e64:	10624dd3 	.word	0x10624dd3
 8003e68:	e000ed00 	.word	0xe000ed00

08003e6c <LCD_Font.constprop.0>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8003e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	int16_t cursor_x = x;
 8003e70:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8003e74:	b085      	sub	sp, #20
	int16_t cursor_y = y;
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003e76:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8003e78:	460d      	mov	r5, r1
 8003e7a:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003e7c:	f001 face 	bl	800541c <strlen>
 8003e80:	b3a8      	cbz	r0, 8003eee <LCD_Font.constprop.0+0x82>
 8003e82:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 8003e84:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 8003e86:	2682      	movs	r6, #130	; 0x82
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003e88:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
		}
		else if(c >= font.first && c <= font.last && c != '\r')
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003e8a:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8003ef4 <LCD_Font.constprop.0+0x88>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8003e8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <LCD_Font.constprop.0+0x8c>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003e90:	f10d 0b08 	add.w	fp, sp, #8
 8003e94:	e01c      	b.n	8003ed0 <LCD_Font.constprop.0+0x64>
		else if(c >= font.first && c <= font.last && c != '\r')
 8003e96:	f1bc 0f5e 	cmp.w	ip, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003e9a:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 8003e9e:	d812      	bhi.n	8003ec6 <LCD_Font.constprop.0+0x5a>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8003ea0:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003ea4:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8003ea8:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003eaa:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8003eae:	4638      	mov	r0, r7
 8003eb0:	4631      	mov	r1, r6
 8003eb2:	f7ff ff3d 	bl	8003d30 <LCD_Char.constprop.1.isra.0>
			cursor_x += glyph.xAdvance * size;
 8003eb6:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003eba:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 8003ebc:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003ebe:	f001 faad 	bl	800541c <strlen>
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <LCD_Font.constprop.0+0x8c>)
			cursor_x += glyph.xAdvance * size;
 8003ec4:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003ec6:	3401      	adds	r4, #1
 8003ec8:	b2a4      	uxth	r4, r4
 8003eca:	4284      	cmp	r4, r0
 8003ecc:	4622      	mov	r2, r4
 8003ece:	d20e      	bcs.n	8003eee <LCD_Font.constprop.0+0x82>
		char c = text[text_pos];
 8003ed0:	5ca9      	ldrb	r1, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 8003ed2:	f1a1 0220 	sub.w	r2, r1, #32
		if(c == '\n')
 8003ed6:	290a      	cmp	r1, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 8003ed8:	fa5f fc82 	uxtb.w	ip, r2
		if(c == '\n')
 8003edc:	d1db      	bne.n	8003e96 <LCD_Font.constprop.0+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003ede:	3401      	adds	r4, #1
 8003ee0:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 8003ee2:	362b      	adds	r6, #43	; 0x2b
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003ee4:	4284      	cmp	r4, r0
			cursor_x = x;
 8003ee6:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003ee8:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 8003eea:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003eec:	d3f0      	bcc.n	8003ed0 <LCD_Font.constprop.0+0x64>
		}
	}
}
 8003eee:	b005      	add	sp, #20
 8003ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef4:	0800c8e0 	.word	0x0800c8e0
 8003ef8:	0801be38 	.word	0x0801be38

08003efc <LCD_Font.constprop.1>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8003efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 8003f00:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8003f04:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f06:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8003f08:	460d      	mov	r5, r1
 8003f0a:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f0c:	f001 fa86 	bl	800541c <strlen>
 8003f10:	b3b8      	cbz	r0, 8003f82 <LCD_Font.constprop.1+0x86>
 8003f12:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 8003f14:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 8003f16:	2664      	movs	r6, #100	; 0x64
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f18:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003f1a:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8003f88 <LCD_Font.constprop.1+0x8c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8003f1e:	4b1b      	ldr	r3, [pc, #108]	; (8003f8c <LCD_Font.constprop.1+0x90>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003f20:	f10d 0b08 	add.w	fp, sp, #8
 8003f24:	e01d      	b.n	8003f62 <LCD_Font.constprop.1+0x66>
 8003f26:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 8003f2a:	295e      	cmp	r1, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003f2c:	f502 723c 	add.w	r2, r2, #752	; 0x2f0
		else if(c >= font.first && c <= font.last && c != '\r')
 8003f30:	d812      	bhi.n	8003f58 <LCD_Font.constprop.1+0x5c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8003f32:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003f36:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8003f3a:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003f3c:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8003f40:	4638      	mov	r0, r7
 8003f42:	4631      	mov	r1, r6
 8003f44:	f7ff fef4 	bl	8003d30 <LCD_Char.constprop.1.isra.0>
			cursor_x += glyph.xAdvance * size;
 8003f48:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f4c:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 8003f4e:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f50:	f001 fa64 	bl	800541c <strlen>
 8003f54:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <LCD_Font.constprop.1+0x90>)
			cursor_x += glyph.xAdvance * size;
 8003f56:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f58:	3401      	adds	r4, #1
 8003f5a:	b2a4      	uxth	r4, r4
 8003f5c:	4284      	cmp	r4, r0
 8003f5e:	4622      	mov	r2, r4
 8003f60:	d20f      	bcs.n	8003f82 <LCD_Font.constprop.1+0x86>
		char c = text[text_pos];
 8003f62:	f815 c002 	ldrb.w	ip, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 8003f66:	f1ac 0220 	sub.w	r2, ip, #32
		if(c == '\n')
 8003f6a:	f1bc 0f0a 	cmp.w	ip, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 8003f6e:	b2d1      	uxtb	r1, r2
		if(c == '\n')
 8003f70:	d1d9      	bne.n	8003f26 <LCD_Font.constprop.1+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f72:	3401      	adds	r4, #1
 8003f74:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 8003f76:	3696      	adds	r6, #150	; 0x96
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f78:	4284      	cmp	r4, r0
			cursor_x = x;
 8003f7a:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f7c:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 8003f7e:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f80:	d3ef      	bcc.n	8003f62 <LCD_Font.constprop.1+0x66>
}
 8003f82:	b005      	add	sp, #20
 8003f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f88:	0800c8e0 	.word	0x0800c8e0
 8003f8c:	0800cf24 	.word	0x0800cf24

08003f90 <LCD_Font.constprop.2>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8003f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_y = y;
 8003f94:	b20b      	sxth	r3, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8003f96:	b09f      	sub	sp, #124	; 0x7c
	int16_t cursor_x = x;
 8003f98:	b204      	sxth	r4, r0
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003f9a:	4610      	mov	r0, r2
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8003f9c:	9216      	str	r2, [sp, #88]	; 0x58
	int16_t cursor_x = x;
 8003f9e:	9418      	str	r4, [sp, #96]	; 0x60
	int16_t cursor_y = y;
 8003fa0:	9308      	str	r3, [sp, #32]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8003fa2:	f001 fa3b 	bl	800541c <strlen>
 8003fa6:	2800      	cmp	r0, #0
 8003fa8:	d068      	beq.n	800407c <LCD_Font.constprop.2+0xec>
 8003faa:	2300      	movs	r3, #0
 8003fac:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8004084 <LCD_Font.constprop.2+0xf4>
 8003fb0:	4f35      	ldr	r7, [pc, #212]	; (8004088 <LCD_Font.constprop.2+0xf8>)
 8003fb2:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800408c <LCD_Font.constprop.2+0xfc>
 8003fb6:	9307      	str	r3, [sp, #28]
		char c = text[text_pos];
 8003fb8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003fba:	5cd3      	ldrb	r3, [r2, r3]
		if(c == '\n')
 8003fbc:	2b0a      	cmp	r3, #10
 8003fbe:	d052      	beq.n	8004066 <LCD_Font.constprop.2+0xd6>
		else if(c >= font.first && c <= font.last && c != '\r')
 8003fc0:	3b20      	subs	r3, #32
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	2a5e      	cmp	r2, #94	; 0x5e
 8003fc6:	d853      	bhi.n	8004070 <LCD_Font.constprop.2+0xe0>
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8003fc8:	4a31      	ldr	r2, [pc, #196]	; (8004090 <LCD_Font.constprop.2+0x100>)
 8003fca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003fce:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003fd2:	ab1e      	add	r3, sp, #120	; 0x78
 8003fd4:	e903 0003 	stmdb	r3, {r0, r1}
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003fd8:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
	uint16_t bo = glyph -> bitmapOffset;
 8003fdc:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003fe0:	9317      	str	r3, [sp, #92]	; 0x5c
	uint16_t bo = glyph -> bitmapOffset;
 8003fe2:	9205      	str	r2, [sp, #20]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f001 8151 	beq.w	800528c <LCD_Font.constprop.2+0x12fc>
			cursor_x += glyph.xAdvance * size;
 8003fea:	b2a3      	uxth	r3, r4
 8003fec:	9315      	str	r3, [sp, #84]	; 0x54
 8003fee:	2300      	movs	r3, #0
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8003ff0:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
	uint8_t bits = 0, bit = 0;
 8003ff4:	e9cd 3301 	strd	r3, r3, [sp, #4]
			cursor_x += glyph.xAdvance * size;
 8003ff8:	9306      	str	r3, [sp, #24]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8003ffa:	9204      	str	r2, [sp, #16]
 8003ffc:	9b04      	ldr	r3, [sp, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 846d 	beq.w	80048de <LCD_Font.constprop.2+0x94e>
 8004004:	2300      	movs	r3, #0
 8004006:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800400a:	469e      	mov	lr, r3
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	e011      	b.n	8004034 <LCD_Font.constprop.2+0xa4>
			bit >>= 1;
 8004010:	0852      	lsrs	r2, r2, #1
 8004012:	9201      	str	r2, [sp, #4]
			if(bits & bit)
 8004014:	9a02      	ldr	r2, [sp, #8]
 8004016:	421a      	tst	r2, r3
 8004018:	d01d      	beq.n	8004056 <LCD_Font.constprop.2+0xc6>
				set_pixels++;
 800401a:	f10e 0201 	add.w	r2, lr, #1
 800401e:	4673      	mov	r3, lr
 8004020:	fa1f fe82 	uxth.w	lr, r2
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8004024:	9a00      	ldr	r2, [sp, #0]
 8004026:	9904      	ldr	r1, [sp, #16]
 8004028:	3201      	adds	r2, #1
 800402a:	9200      	str	r2, [sp, #0]
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	428a      	cmp	r2, r1
 8004030:	f080 8451 	bcs.w	80048d6 <LCD_Font.constprop.2+0x946>
			if(bit == 0)
 8004034:	9a01      	ldr	r2, [sp, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	2a00      	cmp	r2, #0
 800403a:	d1e9      	bne.n	8004010 <LCD_Font.constprop.2+0x80>
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 800403c:	2340      	movs	r3, #64	; 0x40
 800403e:	9301      	str	r3, [sp, #4]
				bit  = 0x80;
 8004040:	2380      	movs	r3, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8004042:	9905      	ldr	r1, [sp, #20]
 8004044:	4813      	ldr	r0, [pc, #76]	; (8004094 <LCD_Font.constprop.2+0x104>)
 8004046:	1c4a      	adds	r2, r1, #1
 8004048:	5c09      	ldrb	r1, [r1, r0]
 800404a:	b292      	uxth	r2, r2
 800404c:	9102      	str	r1, [sp, #8]
 800404e:	9205      	str	r2, [sp, #20]
			if(bits & bit)
 8004050:	9a02      	ldr	r2, [sp, #8]
 8004052:	421a      	tst	r2, r3
 8004054:	d1e1      	bne.n	800401a <LCD_Font.constprop.2+0x8a>
			else if (set_pixels > 0)
 8004056:	f1be 0f00 	cmp.w	lr, #0
 800405a:	d11d      	bne.n	8004098 <LCD_Font.constprop.2+0x108>
				set_pixels++;
 800405c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004060:	f04f 0e00 	mov.w	lr, #0
 8004064:	e7de      	b.n	8004024 <LCD_Font.constprop.2+0x94>
			cursor_y += font.yAdvance * size;
 8004066:	9b08      	ldr	r3, [sp, #32]
			cursor_x = x;
 8004068:	9c18      	ldr	r4, [sp, #96]	; 0x60
			cursor_y += font.yAdvance * size;
 800406a:	332b      	adds	r3, #43	; 0x2b
 800406c:	b21b      	sxth	r3, r3
 800406e:	9308      	str	r3, [sp, #32]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004070:	9b07      	ldr	r3, [sp, #28]
 8004072:	3301      	adds	r3, #1
 8004074:	b29b      	uxth	r3, r3
 8004076:	4283      	cmp	r3, r0
 8004078:	9307      	str	r3, [sp, #28]
 800407a:	d39d      	bcc.n	8003fb8 <LCD_Font.constprop.2+0x28>
}
 800407c:	b01f      	add	sp, #124	; 0x7c
 800407e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004082:	bf00      	nop
 8004084:	40010c00 	.word	0x40010c00
 8004088:	40010800 	.word	0x40010800
 800408c:	40011000 	.word	0x40011000
 8004090:	0800c8e0 	.word	0x0800c8e0
 8004094:	0801be38 	.word	0x0801be38
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004098:	9c00      	ldr	r4, [sp, #0]
 800409a:	f99d 3075 	ldrsb.w	r3, [sp, #117]	; 0x75
 800409e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80040a2:	4423      	add	r3, r4
 80040a4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80040a6:	eba3 030e 	sub.w	r3, r3, lr
 80040aa:	4423      	add	r3, r4
 80040ac:	fa1f fa83 	uxth.w	sl, r3
 80040b0:	9c06      	ldr	r4, [sp, #24]
 80040b2:	f99d 3076 	ldrsb.w	r3, [sp, #118]	; 0x76
 80040b6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80040ba:	4423      	add	r3, r4
 80040bc:	9c08      	ldr	r4, [sp, #32]
 80040be:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80040c2:	4423      	add	r3, r4
 80040c4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80040c8:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
 80040cc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80040d0:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80040d4:	f04f 0910 	mov.w	r9, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80040d8:	f8cb c010 	str.w	ip, [fp, #16]
 80040dc:	613e      	str	r6, [r7, #16]
 80040de:	613a      	str	r2, [r7, #16]
 80040e0:	f8c8 0010 	str.w	r0, [r8, #16]
 80040e4:	f8c8 1010 	str.w	r1, [r8, #16]
 80040e8:	f8c8 6010 	str.w	r6, [r8, #16]
 80040ec:	f8c8 2010 	str.w	r2, [r8, #16]
 80040f0:	f8c8 5010 	str.w	r5, [r8, #16]
 80040f4:	f8c8 4010 	str.w	r4, [r8, #16]
 80040f8:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80040fc:	6139      	str	r1, [r7, #16]
 80040fe:	6138      	str	r0, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004100:	f8c7 9010 	str.w	r9, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004104:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004106:	2440      	movs	r4, #64	; 0x40
 8004108:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800410a:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 800410e:	613c      	str	r4, [r7, #16]
 8004110:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004114:	f8c8 9010 	str.w	r9, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004118:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800411c:	2402      	movs	r4, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800411e:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004122:	f8cb 4010 	str.w	r4, [fp, #16]
 8004126:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800412a:	f8cb 4010 	str.w	r4, [fp, #16]
 800412e:	2401      	movs	r4, #1
 8004130:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004134:	f8cb c010 	str.w	ip, [fp, #16]
 8004138:	613e      	str	r6, [r7, #16]
 800413a:	613a      	str	r2, [r7, #16]
 800413c:	f8c8 0010 	str.w	r0, [r8, #16]
 8004140:	f8c8 1010 	str.w	r1, [r8, #16]
 8004144:	f8c8 6010 	str.w	r6, [r8, #16]
 8004148:	f8c8 2010 	str.w	r2, [r8, #16]
 800414c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004150:	f8c8 5010 	str.w	r5, [r8, #16]
 8004154:	f8c8 2010 	str.w	r2, [r8, #16]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8004158:	f10e 32ff 	add.w	r2, lr, #4294967295
 800415c:	4452      	add	r2, sl
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800415e:	f3c3 34c0 	ubfx	r4, r3, #15, #1
	data[0] = x1 >> 8;
 8004162:	f3c3 2007 	ubfx	r0, r3, #8, #8
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8004166:	fa1f f982 	uxth.w	r9, r2
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 800416a:	b29a      	uxth	r2, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800416c:	041b      	lsls	r3, r3, #16
    GPIOx->BSRR = GPIO_Pin;
 800416e:	bf48      	it	mi
 8004170:	2304      	movmi	r3, #4
 8004172:	9403      	str	r4, [sp, #12]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004174:	bf54      	ite	pl
 8004176:	6139      	strpl	r1, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004178:	613b      	strmi	r3, [r7, #16]
 800417a:	f3c2 3380 	ubfx	r3, r2, #14, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800417e:	0455      	lsls	r5, r2, #17
 8004180:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004182:	bf54      	ite	pl
 8004184:	f44f 2300 	movpl.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004188:	2308      	movmi	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800418a:	0494      	lsls	r4, r2, #18
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	f3c2 3340 	ubfx	r3, r2, #13, #1
 8004192:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004194:	bf54      	ite	pl
 8004196:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800419a:	2310      	movmi	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800419c:	04d1      	lsls	r1, r2, #19
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	f3c2 3300 	ubfx	r3, r2, #12, #1
 80041a4:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041a6:	bf54      	ite	pl
 80041a8:	f44f 1300 	movpl.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80041ac:	2320      	movmi	r3, #32
 80041ae:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80041b0:	0513      	lsls	r3, r2, #20
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041b2:	bf54      	ite	pl
 80041b4:	f44f 0380 	movpl.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80041b8:	2340      	movmi	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80041ba:	0555      	lsls	r5, r2, #21
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	f3c2 2380 	ubfx	r3, r2, #10, #1
 80041c2:	9310      	str	r3, [sp, #64]	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041c4:	bf54      	ite	pl
 80041c6:	f44f 0300 	movpl.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80041ca:	2380      	movmi	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80041cc:	0594      	lsls	r4, r2, #22
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	f3c2 2340 	ubfx	r3, r2, #9, #1
 80041d4:	9311      	str	r3, [sp, #68]	; 0x44
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041d6:	bf54      	ite	pl
 80041d8:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80041dc:	2310      	movmi	r3, #16
 80041de:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80041e2:	f010 0301 	ands.w	r3, r0, #1
 80041e6:	9312      	str	r3, [sp, #72]	; 0x48
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041e8:	bf0c      	ite	eq
 80041ea:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80041ee:	2320      	movne	r3, #32
 80041f0:	f8c8 3010 	str.w	r3, [r8, #16]
 80041f4:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041f6:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80041fa:	f8cb 3010 	str.w	r3, [fp, #16]
 80041fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004202:	f8cb 3010 	str.w	r3, [fp, #16]
 8004206:	2301      	movs	r3, #1
 8004208:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800420c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004210:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004214:	f8cb 3010 	str.w	r3, [fp, #16]
 8004218:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800421c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004220:	f3c2 14c0 	ubfx	r4, r2, #7, #1
 8004224:	613e      	str	r6, [r7, #16]
 8004226:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800422a:	6139      	str	r1, [r7, #16]
 800422c:	f8c8 3010 	str.w	r3, [r8, #16]
 8004230:	9413      	str	r4, [sp, #76]	; 0x4c
 8004232:	f8c8 0010 	str.w	r0, [r8, #16]
 8004236:	f8c8 6010 	str.w	r6, [r8, #16]
 800423a:	f8c8 1010 	str.w	r1, [r8, #16]
 800423e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004242:	f8c8 5010 	str.w	r5, [r8, #16]
 8004246:	f8c8 1010 	str.w	r1, [r8, #16]
 800424a:	0611      	lsls	r1, r2, #24
    GPIOx->BSRR = GPIO_Pin;
 800424c:	bf48      	it	mi
 800424e:	2104      	movmi	r1, #4
 8004250:	b2d3      	uxtb	r3, r2
 8004252:	bf4c      	ite	mi
 8004254:	6139      	strmi	r1, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004256:	6138      	strpl	r0, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004258:	065d      	lsls	r5, r3, #25
 800425a:	bf54      	ite	pl
 800425c:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004260:	2108      	movmi	r1, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004262:	0698      	lsls	r0, r3, #26
 8004264:	6139      	str	r1, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004266:	bf54      	ite	pl
 8004268:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800426c:	2110      	movmi	r1, #16
 800426e:	6139      	str	r1, [r7, #16]
 8004270:	f3c3 1100 	ubfx	r1, r3, #4, #1
 8004274:	9114      	str	r1, [sp, #80]	; 0x50
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004276:	06d9      	lsls	r1, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004278:	bf54      	ite	pl
 800427a:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800427e:	2120      	movmi	r1, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004280:	0718      	lsls	r0, r3, #28
 8004282:	6139      	str	r1, [r7, #16]
 8004284:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 8004288:	910e      	str	r1, [sp, #56]	; 0x38
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800428a:	bf54      	ite	pl
 800428c:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004290:	2140      	movmi	r1, #64	; 0x40
 8004292:	6139      	str	r1, [r7, #16]
 8004294:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8004298:	910d      	str	r1, [sp, #52]	; 0x34
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800429a:	0759      	lsls	r1, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800429c:	bf54      	ite	pl
 800429e:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80042a2:	2180      	movmi	r1, #128	; 0x80
 80042a4:	f3c3 1480 	ubfx	r4, r3, #6, #1
 80042a8:	6139      	str	r1, [r7, #16]
 80042aa:	f3c3 1540 	ubfx	r5, r3, #5, #1
 80042ae:	f3c3 0140 	ubfx	r1, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80042b2:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042b4:	bf54      	ite	pl
 80042b6:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80042ba:	2310      	movmi	r3, #16
 80042bc:	910b      	str	r1, [sp, #44]	; 0x2c
 80042be:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80042c2:	f012 0301 	ands.w	r3, r2, #1
 80042c6:	930c      	str	r3, [sp, #48]	; 0x30
 80042c8:	f3c2 2cc0 	ubfx	ip, r2, #11, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042cc:	bf0c      	ite	eq
 80042ce:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80042d2:	2320      	movne	r3, #32
 80042d4:	2202      	movs	r2, #2
 80042d6:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042da:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80042de:	f8cb 2010 	str.w	r2, [fp, #16]
 80042e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042e6:	f8cb 2010 	str.w	r2, [fp, #16]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80042f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042f8:	f8cb 2010 	str.w	r2, [fp, #16]
 80042fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004300:	613e      	str	r6, [r7, #16]
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	f8c8 2010 	str.w	r2, [r8, #16]
 8004308:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800430c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004310:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004314:	f8c8 2010 	str.w	r2, [r8, #16]
 8004318:	f8c8 6010 	str.w	r6, [r8, #16]
 800431c:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004320:	9b03      	ldr	r3, [sp, #12]
 8004322:	f8c8 0010 	str.w	r0, [r8, #16]
 8004326:	f8c8 1010 	str.w	r1, [r8, #16]
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 8721 	beq.w	8005172 <LCD_Font.constprop.2+0x11e2>
    GPIOx->BSRR = GPIO_Pin;
 8004330:	2304      	movs	r3, #4
 8004332:	613b      	str	r3, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004336:	2b00      	cmp	r3, #0
 8004338:	f040 8720 	bne.w	800517c <LCD_Font.constprop.2+0x11ec>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800433c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004340:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004344:	2b00      	cmp	r3, #0
 8004346:	f040 871f 	bne.w	8005188 <LCD_Font.constprop.2+0x11f8>
 800434a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800434e:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004350:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004352:	2b00      	cmp	r3, #0
 8004354:	f040 871e 	bne.w	8005194 <LCD_Font.constprop.2+0x1204>
 8004358:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800435c:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800435e:	f1bc 0f00 	cmp.w	ip, #0
 8004362:	f040 871d 	bne.w	80051a0 <LCD_Font.constprop.2+0x1210>
 8004366:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800436a:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800436c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800436e:	2b00      	cmp	r3, #0
 8004370:	f040 871c 	bne.w	80051ac <LCD_Font.constprop.2+0x121c>
 8004374:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004378:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800437a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800437c:	2b00      	cmp	r3, #0
 800437e:	f040 871b 	bne.w	80051b8 <LCD_Font.constprop.2+0x1228>
 8004382:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004386:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800438a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800438c:	2b00      	cmp	r3, #0
 800438e:	f040 871a 	bne.w	80051c6 <LCD_Font.constprop.2+0x1236>
 8004392:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004396:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800439a:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800439c:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80043a0:	f8cb 2010 	str.w	r2, [fp, #16]
 80043a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043a8:	f8cb 2010 	str.w	r2, [fp, #16]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80043b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043ba:	f8cb 2010 	str.w	r2, [fp, #16]
 80043be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80043c2:	613e      	str	r6, [r7, #16]
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	f8c8 2010 	str.w	r2, [r8, #16]
 80043ca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80043ce:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80043d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80043d6:	f8c8 2010 	str.w	r2, [r8, #16]
 80043da:	f8c8 6010 	str.w	r6, [r8, #16]
 80043de:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80043e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80043e4:	f8c8 0010 	str.w	r0, [r8, #16]
 80043e8:	f8c8 1010 	str.w	r1, [r8, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8718 	beq.w	8005222 <LCD_Font.constprop.2+0x1292>
    GPIOx->BSRR = GPIO_Pin;
 80043f2:	2304      	movs	r3, #4
 80043f4:	613b      	str	r3, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80043f6:	2c00      	cmp	r4, #0
 80043f8:	f040 86ea 	bne.w	80051d0 <LCD_Font.constprop.2+0x1240>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004400:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004402:	2d00      	cmp	r5, #0
 8004404:	f040 86e9 	bne.w	80051da <LCD_Font.constprop.2+0x124a>
 8004408:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800440c:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800440e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004410:	2b00      	cmp	r3, #0
 8004412:	f040 86e8 	bne.w	80051e6 <LCD_Font.constprop.2+0x1256>
 8004416:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800441a:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800441c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800441e:	2b00      	cmp	r3, #0
 8004420:	f040 86e7 	bne.w	80051f2 <LCD_Font.constprop.2+0x1262>
 8004424:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004428:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800442a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800442c:	2b00      	cmp	r3, #0
 800442e:	f040 86e6 	bne.w	80051fe <LCD_Font.constprop.2+0x126e>
 8004432:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004436:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800443a:	2b00      	cmp	r3, #0
 800443c:	f040 86e5 	bne.w	800520a <LCD_Font.constprop.2+0x127a>
 8004440:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004444:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800444a:	2b00      	cmp	r3, #0
 800444c:	f040 86e4 	bne.w	8005218 <LCD_Font.constprop.2+0x1288>
 8004450:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004454:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004458:	2502      	movs	r5, #2
 800445a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800445e:	f8cb 6010 	str.w	r6, [fp, #16]
 8004462:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8004466:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800446a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 800446e:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004472:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004476:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800447a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800447e:	f8cb 3010 	str.w	r3, [fp, #16]
 8004482:	f8cb 0010 	str.w	r0, [fp, #16]
 8004486:	613e      	str	r6, [r7, #16]
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	f8c8 1010 	str.w	r1, [r8, #16]
 800448e:	f8c8 2010 	str.w	r2, [r8, #16]
 8004492:	f8c8 6010 	str.w	r6, [r8, #16]
 8004496:	f8c8 3010 	str.w	r3, [r8, #16]
 800449a:	f8c8 4010 	str.w	r4, [r8, #16]
 800449e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80044a2:	f04f 0c10 	mov.w	ip, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044a6:	f8c8 4010 	str.w	r4, [r8, #16]
 80044aa:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80044ae:	613a      	str	r2, [r7, #16]
 80044b0:	6139      	str	r1, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80044b2:	f8c7 c010 	str.w	ip, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044b6:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80044b8:	2440      	movs	r4, #64	; 0x40
 80044ba:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044bc:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 80044c0:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80044c2:	f8c8 c010 	str.w	ip, [r8, #16]
 80044c6:	f04f 0c20 	mov.w	ip, #32
 80044ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80044ce:	f8c8 c010 	str.w	ip, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044d2:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80044d6:	f8cb 5010 	str.w	r5, [fp, #16]
 80044da:	2501      	movs	r5, #1
 80044dc:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 80044e4:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044e8:	f8cb 0010 	str.w	r0, [fp, #16]
 80044ec:	613e      	str	r6, [r7, #16]
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	f8c8 1010 	str.w	r1, [r8, #16]
 80044f4:	f8c8 2010 	str.w	r2, [r8, #16]
 80044f8:	f8c8 6010 	str.w	r6, [r8, #16]
 80044fc:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004500:	ea5f 33da 	movs.w	r3, sl, lsr #15
 8004504:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004508:	bf18      	it	ne
 800450a:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800450c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8004510:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004514:	bf14      	ite	ne
 8004516:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004518:	613a      	streq	r2, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800451a:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
 800451e:	bf0c      	ite	eq
 8004520:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004524:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004526:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 800452a:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800452c:	bf0c      	ite	eq
 800452e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004532:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004534:	f41a 5f80 	tst.w	sl, #4096	; 0x1000
 8004538:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800453a:	bf0c      	ite	eq
 800453c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004540:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004542:	f41a 6f00 	tst.w	sl, #2048	; 0x800
 8004546:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004548:	bf0c      	ite	eq
 800454a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800454e:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004550:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8004554:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004556:	bf0c      	ite	eq
 8004558:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800455c:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800455e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8004562:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004564:	bf0c      	ite	eq
 8004566:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800456a:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800456c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004570:	f8c8 3010 	str.w	r3, [r8, #16]
 8004574:	f04f 0202 	mov.w	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004578:	bf0c      	ite	eq
 800457a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800457e:	2320      	movne	r3, #32
 8004580:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004584:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004588:	f8cb 2010 	str.w	r2, [fp, #16]
 800458c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004590:	f8cb 2010 	str.w	r2, [fp, #16]
 8004594:	2201      	movs	r2, #1
 8004596:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800459a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800459e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045a2:	f8cb 2010 	str.w	r2, [fp, #16]
 80045a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80045aa:	613e      	str	r6, [r7, #16]
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	f8c8 2010 	str.w	r2, [r8, #16]
 80045b2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80045b6:	f01a 0f80 	tst.w	sl, #128	; 0x80
 80045ba:	f8c8 2010 	str.w	r2, [r8, #16]
 80045be:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80045c2:	f8c8 6010 	str.w	r6, [r8, #16]
 80045c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80045ca:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80045ce:	bf18      	it	ne
 80045d0:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045d2:	f8c8 0010 	str.w	r0, [r8, #16]
 80045d6:	f8c8 1010 	str.w	r1, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80045da:	bf14      	ite	ne
 80045dc:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045de:	613a      	streq	r2, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80045e0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80045e4:	bf0c      	ite	eq
 80045e6:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80045ea:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80045ec:	f01a 0f20 	tst.w	sl, #32
 80045f0:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045f2:	bf0c      	ite	eq
 80045f4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80045f8:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80045fa:	f01a 0f10 	tst.w	sl, #16
 80045fe:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004600:	bf0c      	ite	eq
 8004602:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004606:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004608:	f01a 0f08 	tst.w	sl, #8
 800460c:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800460e:	bf0c      	ite	eq
 8004610:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004614:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004616:	f01a 0f04 	tst.w	sl, #4
 800461a:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800461c:	bf0c      	ite	eq
 800461e:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004622:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004624:	f01a 0f02 	tst.w	sl, #2
 8004628:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800462a:	bf0c      	ite	eq
 800462c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004630:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004632:	f01a 0f01 	tst.w	sl, #1
 8004636:	f8c8 3010 	str.w	r3, [r8, #16]
 800463a:	f04f 0202 	mov.w	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800463e:	bf0c      	ite	eq
 8004640:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004644:	2320      	movne	r3, #32
 8004646:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800464a:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800464e:	f8cb 2010 	str.w	r2, [fp, #16]
 8004652:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004656:	f8cb 2010 	str.w	r2, [fp, #16]
 800465a:	2201      	movs	r2, #1
 800465c:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004660:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004668:	f8cb 2010 	str.w	r2, [fp, #16]
 800466c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004670:	613e      	str	r6, [r7, #16]
 8004672:	613b      	str	r3, [r7, #16]
 8004674:	f8c8 2010 	str.w	r2, [r8, #16]
 8004678:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800467c:	f8c8 2010 	str.w	r2, [r8, #16]
 8004680:	f8c8 6010 	str.w	r6, [r8, #16]
 8004684:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004688:	ea5f 33d9 	movs.w	r3, r9, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 800468c:	bf18      	it	ne
 800468e:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004690:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004694:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004698:	f8c8 0010 	str.w	r0, [r8, #16]
 800469c:	f8c8 1010 	str.w	r1, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80046a0:	bf14      	ite	ne
 80046a2:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046a4:	613a      	streq	r2, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80046a6:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 80046aa:	bf0c      	ite	eq
 80046ac:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80046b0:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80046b2:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 80046b6:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046b8:	bf0c      	ite	eq
 80046ba:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80046be:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80046c0:	f419 5f80 	tst.w	r9, #4096	; 0x1000
 80046c4:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046c6:	bf0c      	ite	eq
 80046c8:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80046cc:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80046ce:	f419 6f00 	tst.w	r9, #2048	; 0x800
 80046d2:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046d4:	bf0c      	ite	eq
 80046d6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80046da:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80046dc:	f419 6f80 	tst.w	r9, #1024	; 0x400
 80046e0:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046e2:	bf0c      	ite	eq
 80046e4:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80046e8:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80046ea:	f419 7f00 	tst.w	r9, #512	; 0x200
 80046ee:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046f0:	bf0c      	ite	eq
 80046f2:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80046f6:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80046f8:	f419 7f80 	tst.w	r9, #256	; 0x100
 80046fc:	f8c8 3010 	str.w	r3, [r8, #16]
 8004700:	f04f 0202 	mov.w	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004704:	bf0c      	ite	eq
 8004706:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800470a:	2320      	movne	r3, #32
 800470c:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004710:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004714:	f8cb 2010 	str.w	r2, [fp, #16]
 8004718:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800471c:	f8cb 2010 	str.w	r2, [fp, #16]
 8004720:	2201      	movs	r2, #1
 8004722:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004726:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800472a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800472e:	f8cb 2010 	str.w	r2, [fp, #16]
 8004732:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004736:	613e      	str	r6, [r7, #16]
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	f8c8 2010 	str.w	r2, [r8, #16]
 800473e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004742:	f019 0f80 	tst.w	r9, #128	; 0x80
 8004746:	f8c8 2010 	str.w	r2, [r8, #16]
 800474a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800474e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004752:	f8c8 6010 	str.w	r6, [r8, #16]
 8004756:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800475a:	bf18      	it	ne
 800475c:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800475e:	f8c8 0010 	str.w	r0, [r8, #16]
 8004762:	f8c8 1010 	str.w	r1, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004766:	bf14      	ite	ne
 8004768:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800476a:	613a      	streq	r2, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800476c:	f019 0f40 	tst.w	r9, #64	; 0x40
 8004770:	bf0c      	ite	eq
 8004772:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004776:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004778:	f019 0f20 	tst.w	r9, #32
 800477c:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800477e:	bf0c      	ite	eq
 8004780:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004784:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004786:	f019 0f10 	tst.w	r9, #16
 800478a:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800478c:	bf0c      	ite	eq
 800478e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004792:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004794:	f019 0f08 	tst.w	r9, #8
 8004798:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800479a:	bf0c      	ite	eq
 800479c:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80047a0:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80047a2:	f019 0f04 	tst.w	r9, #4
 80047a6:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047a8:	bf0c      	ite	eq
 80047aa:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80047ae:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80047b0:	f019 0f02 	tst.w	r9, #2
 80047b4:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047b6:	bf0c      	ite	eq
 80047b8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80047bc:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80047be:	f019 0f01 	tst.w	r9, #1
 80047c2:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047c6:	bf0c      	ite	eq
 80047c8:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80047cc:	2320      	movne	r3, #32
 80047ce:	f04f 0902 	mov.w	r9, #2
 80047d2:	f8c8 3010 	str.w	r3, [r8, #16]
 80047d6:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047de:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 80047e2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80047e6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80047ea:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80047ee:	f8cb 9010 	str.w	r9, [fp, #16]
 80047f2:	f8cb a010 	str.w	sl, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047f6:	f8cb 3010 	str.w	r3, [fp, #16]
 80047fa:	f8cb 0010 	str.w	r0, [fp, #16]
 80047fe:	613e      	str	r6, [r7, #16]
 8004800:	613b      	str	r3, [r7, #16]
 8004802:	f8c8 4010 	str.w	r4, [r8, #16]
 8004806:	f8c8 1010 	str.w	r1, [r8, #16]
 800480a:	f8c8 6010 	str.w	r6, [r8, #16]
 800480e:	f8c8 3010 	str.w	r3, [r8, #16]
 8004812:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004816:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 800481a:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800481e:	2310      	movs	r3, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004820:	f8c8 5010 	str.w	r5, [r8, #16]
 8004824:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004828:	6139      	str	r1, [r7, #16]
 800482a:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	2340      	movs	r3, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004830:	613a      	str	r2, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004832:	613b      	str	r3, [r7, #16]
 8004834:	2380      	movs	r3, #128	; 0x80
 8004836:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004838:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 800483c:	f04f 0c00 	mov.w	ip, #0
 8004840:	f8c8 3010 	str.w	r3, [r8, #16]
 8004844:	f8c8 2010 	str.w	r2, [r8, #16]
 8004848:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800484c:	f8cb 9010 	str.w	r9, [fp, #16]
 8004850:	f8cb a010 	str.w	sl, [fp, #16]
 8004854:	f8cd e00c 	str.w	lr, [sp, #12]
 8004858:	2301      	movs	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800485a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 800485e:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004862:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004866:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800486a:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800486e:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 8004872:	f8cb 3010 	str.w	r3, [fp, #16]
 8004876:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800487a:	613e      	str	r6, [r7, #16]
 800487c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004880:	6138      	str	r0, [r7, #16]
 8004882:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
 8004886:	f8c8 4010 	str.w	r4, [r8, #16]
 800488a:	f8c8 1010 	str.w	r1, [r8, #16]
 800488e:	f8c8 6010 	str.w	r6, [r8, #16]
 8004892:	f8c8 0010 	str.w	r0, [r8, #16]
 8004896:	f8c8 a010 	str.w	sl, [r8, #16]
 800489a:	f8c8 9010 	str.w	r9, [r8, #16]
 800489e:	6139      	str	r1, [r7, #16]
 80048a0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80048a4:	613c      	str	r4, [r7, #16]
 80048a6:	613a      	str	r2, [r7, #16]
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	613d      	str	r5, [r7, #16]
 80048ac:	6139      	str	r1, [r7, #16]
 80048ae:	f8c8 2010 	str.w	r2, [r8, #16]
 80048b2:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80048b6:	2302      	movs	r3, #2
 80048b8:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048bc:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80048c0:	f8cb 3010 	str.w	r3, [fp, #16]
 80048c4:	9b03      	ldr	r3, [sp, #12]
 80048c6:	f10c 0c01 	add.w	ip, ip, #1
 80048ca:	4563      	cmp	r3, ip
 80048cc:	f8cb e010 	str.w	lr, [fp, #16]
 80048d0:	d1c2      	bne.n	8004858 <LCD_Font.constprop.2+0x8c8>
 80048d2:	f7ff bbc3 	b.w	800405c <LCD_Font.constprop.2+0xcc>
		if (set_pixels > 0)
 80048d6:	4672      	mov	r2, lr
 80048d8:	f8cd e000 	str.w	lr, [sp]
 80048dc:	b98a      	cbnz	r2, 8004902 <LCD_Font.constprop.2+0x972>
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80048de:	9b06      	ldr	r3, [sp, #24]
 80048e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80048e2:	3301      	adds	r3, #1
 80048e4:	9306      	str	r3, [sp, #24]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	429a      	cmp	r2, r3
 80048ea:	f63f ab87 	bhi.w	8003ffc <LCD_Font.constprop.2+0x6c>
			cursor_x += glyph.xAdvance * size;
 80048ee:	f89d 4074 	ldrb.w	r4, [sp, #116]	; 0x74
 80048f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80048f4:	9816      	ldr	r0, [sp, #88]	; 0x58
			cursor_x += glyph.xAdvance * size;
 80048f6:	4423      	add	r3, r4
 80048f8:	b21c      	sxth	r4, r3
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80048fa:	f000 fd8f 	bl	800541c <strlen>
 80048fe:	f7ff bbb7 	b.w	8004070 <LCD_Font.constprop.2+0xe0>
 8004902:	460e      	mov	r6, r1
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004904:	f99d 2075 	ldrsb.w	r2, [sp, #117]	; 0x75
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004908:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800490c:	4432      	add	r2, r6
 800490e:	9e00      	ldr	r6, [sp, #0]
 8004910:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004914:	1b92      	subs	r2, r2, r6
 8004916:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8004918:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 800491c:	4432      	add	r2, r6
 800491e:	fa1f fa82 	uxth.w	sl, r2
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8004922:	4453      	add	r3, sl
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004924:	f99d 2076 	ldrsb.w	r2, [sp, #118]	; 0x76
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8004928:	fa1f f983 	uxth.w	r9, r3
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 800492c:	9b06      	ldr	r3, [sp, #24]
 800492e:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8004932:	441a      	add	r2, r3
 8004934:	9b08      	ldr	r3, [sp, #32]
 8004936:	f8cb 1010 	str.w	r1, [fp, #16]
 800493a:	441a      	add	r2, r3
 800493c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004940:	f8cb 3010 	str.w	r3, [fp, #16]
 8004944:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004948:	6138      	str	r0, [r7, #16]
 800494a:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 800494e:	6139      	str	r1, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004950:	f04f 0e10 	mov.w	lr, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004954:	f8c8 5010 	str.w	r5, [r8, #16]
 8004958:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 800495c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004960:	f8c8 0010 	str.w	r0, [r8, #16]
 8004964:	f8c8 1010 	str.w	r1, [r8, #16]
 8004968:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800496c:	2340      	movs	r3, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800496e:	f8c8 6010 	str.w	r6, [r8, #16]
 8004972:	613c      	str	r4, [r7, #16]
 8004974:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004976:	f8c7 e010 	str.w	lr, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800497a:	f8c7 c010 	str.w	ip, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 800497e:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004980:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004984:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004986:	2302      	movs	r3, #2
 8004988:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800498c:	f8c8 c010 	str.w	ip, [r8, #16]
 8004990:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004994:	f8cb 3010 	str.w	r3, [fp, #16]
 8004998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800499c:	f8cb 3010 	str.w	r3, [fp, #16]
 80049a0:	2301      	movs	r3, #1
 80049a2:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80049aa:	f8cb 3010 	str.w	r3, [fp, #16]
 80049ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049b2:	6138      	str	r0, [r7, #16]
 80049b4:	6139      	str	r1, [r7, #16]
 80049b6:	f8c8 5010 	str.w	r5, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80049ba:	0415      	lsls	r5, r2, #16
 80049bc:	f8c8 4010 	str.w	r4, [r8, #16]
 80049c0:	f8c8 0010 	str.w	r0, [r8, #16]
 80049c4:	f8c8 1010 	str.w	r1, [r8, #16]
 80049c8:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 80049cc:	f8c8 3010 	str.w	r3, [r8, #16]
	data[0] = x1 >> 8;
 80049d0:	f3c2 2107 	ubfx	r1, r2, #8, #8
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80049d4:	b293      	uxth	r3, r2
    GPIOx->BSRR = GPIO_Pin;
 80049d6:	bf48      	it	mi
 80049d8:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049da:	f8c8 6010 	str.w	r6, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80049de:	900f      	str	r0, [sp, #60]	; 0x3c
 80049e0:	bf54      	ite	pl
 80049e2:	613c      	strpl	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80049e4:	613a      	strmi	r2, [r7, #16]
 80049e6:	f3c3 3280 	ubfx	r2, r3, #14, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80049ea:	0458      	lsls	r0, r3, #17
 80049ec:	9219      	str	r2, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049ee:	bf54      	ite	pl
 80049f0:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80049f4:	2208      	movmi	r2, #8
 80049f6:	613a      	str	r2, [r7, #16]
 80049f8:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80049fc:	9214      	str	r2, [sp, #80]	; 0x50
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80049fe:	049a      	lsls	r2, r3, #18
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a00:	bf54      	ite	pl
 8004a02:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004a06:	2210      	movmi	r2, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004a08:	04de      	lsls	r6, r3, #19
 8004a0a:	613a      	str	r2, [r7, #16]
 8004a0c:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8004a10:	920e      	str	r2, [sp, #56]	; 0x38
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a12:	bf54      	ite	pl
 8004a14:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004a18:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004a1a:	051d      	lsls	r5, r3, #20
 8004a1c:	613a      	str	r2, [r7, #16]
 8004a1e:	f3c3 22c0 	ubfx	r2, r3, #11, #1
 8004a22:	9213      	str	r2, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a24:	bf54      	ite	pl
 8004a26:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004a2a:	2240      	movmi	r2, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004a2c:	055c      	lsls	r4, r3, #21
 8004a2e:	613a      	str	r2, [r7, #16]
 8004a30:	f3c3 2280 	ubfx	r2, r3, #10, #1
 8004a34:	920d      	str	r2, [sp, #52]	; 0x34
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a36:	bf54      	ite	pl
 8004a38:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004a3c:	2280      	movmi	r2, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004a3e:	0598      	lsls	r0, r3, #22
 8004a40:	613a      	str	r2, [r7, #16]
 8004a42:	f3c3 2240 	ubfx	r2, r3, #9, #1
 8004a46:	9212      	str	r2, [sp, #72]	; 0x48
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a48:	bf54      	ite	pl
 8004a4a:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004a4e:	2210      	movmi	r2, #16
 8004a50:	f8c8 2010 	str.w	r2, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004a54:	f011 0201 	ands.w	r2, r1, #1
 8004a58:	921a      	str	r2, [sp, #104]	; 0x68
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a5a:	bf0c      	ite	eq
 8004a5c:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004a60:	2220      	movne	r2, #32
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004a62:	f3c3 15c0 	ubfx	r5, r3, #7, #1
 8004a66:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a6a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8004a6e:	950c      	str	r5, [sp, #48]	; 0x30
    GPIOx->BSRR = GPIO_Pin;
 8004a70:	2502      	movs	r5, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a72:	f8cb 1010 	str.w	r1, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004a76:	f8cb 5010 	str.w	r5, [fp, #16]
 8004a7a:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a7e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8004a82:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a86:	f44f 2480 	mov.w	r4, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004a8a:	2501      	movs	r5, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a8c:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8004a90:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004a94:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a98:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004a9c:	f8cb e010 	str.w	lr, [fp, #16]
 8004aa0:	6139      	str	r1, [r7, #16]
 8004aa2:	6138      	str	r0, [r7, #16]
 8004aa4:	f8c8 c010 	str.w	ip, [r8, #16]
 8004aa8:	f8c8 4010 	str.w	r4, [r8, #16]
 8004aac:	f8c8 1010 	str.w	r1, [r8, #16]
 8004ab0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004ab4:	f8c8 0010 	str.w	r0, [r8, #16]
 8004ab8:	f8c8 6010 	str.w	r6, [r8, #16]
 8004abc:	f8c8 1010 	str.w	r1, [r8, #16]
 8004ac0:	0619      	lsls	r1, r3, #24
    GPIOx->BSRR = GPIO_Pin;
 8004ac2:	bf48      	it	mi
 8004ac4:	2104      	movmi	r1, #4
 8004ac6:	b2da      	uxtb	r2, r3
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ac8:	bf54      	ite	pl
 8004aca:	613c      	strpl	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004acc:	6139      	strmi	r1, [r7, #16]
 8004ace:	f3c2 1180 	ubfx	r1, r2, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004ad2:	0656      	lsls	r6, r2, #25
 8004ad4:	9111      	str	r1, [sp, #68]	; 0x44
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ad6:	bf54      	ite	pl
 8004ad8:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004adc:	2108      	movmi	r1, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004ade:	0695      	lsls	r5, r2, #26
 8004ae0:	6139      	str	r1, [r7, #16]
 8004ae2:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8004ae6:	910b      	str	r1, [sp, #44]	; 0x2c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ae8:	bf54      	ite	pl
 8004aea:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004aee:	2110      	movmi	r1, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004af0:	06d4      	lsls	r4, r2, #27
 8004af2:	6139      	str	r1, [r7, #16]
 8004af4:	f3c2 1100 	ubfx	r1, r2, #4, #1
 8004af8:	9110      	str	r1, [sp, #64]	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004afa:	bf54      	ite	pl
 8004afc:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004b00:	2120      	movmi	r1, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004b02:	0710      	lsls	r0, r2, #28
 8004b04:	6139      	str	r1, [r7, #16]
 8004b06:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 8004b0a:	910a      	str	r1, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b0c:	bf54      	ite	pl
 8004b0e:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004b12:	2140      	movmi	r1, #64	; 0x40
 8004b14:	6139      	str	r1, [r7, #16]
 8004b16:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8004b1a:	911b      	str	r1, [sp, #108]	; 0x6c
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004b1c:	0751      	lsls	r1, r2, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b1e:	bf54      	ite	pl
 8004b20:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004b24:	2180      	movmi	r1, #128	; 0x80
 8004b26:	6139      	str	r1, [r7, #16]
 8004b28:	f3c2 0140 	ubfx	r1, r2, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004b2c:	0792      	lsls	r2, r2, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b2e:	bf54      	ite	pl
 8004b30:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004b34:	2210      	movmi	r2, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004b36:	f013 0301 	ands.w	r3, r3, #1
 8004b3a:	9109      	str	r1, [sp, #36]	; 0x24
 8004b3c:	f8c8 2010 	str.w	r2, [r8, #16]
 8004b40:	9303      	str	r3, [sp, #12]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b42:	bf0c      	ite	eq
 8004b44:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004b48:	2320      	movne	r3, #32
 8004b4a:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8004b4e:	f8c8 3010 	str.w	r3, [r8, #16]
 8004b52:	f04f 0e02 	mov.w	lr, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004b5e:	f8cb 3010 	str.w	r3, [fp, #16]
 8004b62:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8004b66:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b6a:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004b6e:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b72:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004b76:	f04f 0c01 	mov.w	ip, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b7a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004b7e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8004b82:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b86:	f8cb 6010 	str.w	r6, [fp, #16]
 8004b8a:	613b      	str	r3, [r7, #16]
 8004b8c:	613a      	str	r2, [r7, #16]
 8004b8e:	f8c8 5010 	str.w	r5, [r8, #16]
 8004b92:	f8c8 1010 	str.w	r1, [r8, #16]
 8004b96:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004b9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b9c:	f8c8 2010 	str.w	r2, [r8, #16]
 8004ba0:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ba4:	f8c8 0010 	str.w	r0, [r8, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 836d 	beq.w	8005288 <LCD_Font.constprop.2+0x12f8>
    GPIOx->BSRR = GPIO_Pin;
 8004bae:	2304      	movs	r3, #4
 8004bb0:	613b      	str	r3, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004bb2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f040 8364 	bne.w	8005282 <LCD_Font.constprop.2+0x12f2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004bba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004bbe:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004bc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f040 835a 	bne.w	800527c <LCD_Font.constprop.2+0x12ec>
 8004bc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004bcc:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f040 8350 	bne.w	8005276 <LCD_Font.constprop.2+0x12e6>
 8004bd6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004bda:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004bdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f040 8346 	bne.w	8005270 <LCD_Font.constprop.2+0x12e0>
 8004be4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004be8:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f040 833c 	bne.w	800526a <LCD_Font.constprop.2+0x12da>
 8004bf2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004bf6:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004bf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f040 8331 	bne.w	8005262 <LCD_Font.constprop.2+0x12d2>
 8004c00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004c04:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004c08:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f040 8325 	bne.w	800525a <LCD_Font.constprop.2+0x12ca>
 8004c10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c14:	f8c8 3010 	str.w	r3, [r8, #16]
 8004c18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8004c1c:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8004c20:	f04f 0e02 	mov.w	lr, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c24:	f8cb 3010 	str.w	r3, [fp, #16]
 8004c28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8004c2c:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c30:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8004c34:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c38:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8004c3c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004c40:	f04f 0c01 	mov.w	ip, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c44:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004c48:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8004c4c:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c50:	f8cb 6010 	str.w	r6, [fp, #16]
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	613a      	str	r2, [r7, #16]
 8004c58:	f8c8 5010 	str.w	r5, [r8, #16]
 8004c5c:	f8c8 1010 	str.w	r1, [r8, #16]
 8004c60:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004c64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c66:	f8c8 2010 	str.w	r2, [r8, #16]
 8004c6a:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c6e:	f8c8 0010 	str.w	r0, [r8, #16]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 82ef 	beq.w	8005256 <LCD_Font.constprop.2+0x12c6>
    GPIOx->BSRR = GPIO_Pin;
 8004c78:	2304      	movs	r3, #4
 8004c7a:	613b      	str	r3, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004c7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f040 82e6 	bne.w	8005250 <LCD_Font.constprop.2+0x12c0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004c88:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f040 82dc 	bne.w	800524a <LCD_Font.constprop.2+0x12ba>
 8004c92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004c96:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004c98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f040 82d2 	bne.w	8005244 <LCD_Font.constprop.2+0x12b4>
 8004ca0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ca4:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f040 82c8 	bne.w	800523e <LCD_Font.constprop.2+0x12ae>
 8004cae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004cb2:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004cb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f040 82be 	bne.w	8005238 <LCD_Font.constprop.2+0x12a8>
 8004cbc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004cc0:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f040 82b3 	bne.w	8005230 <LCD_Font.constprop.2+0x12a0>
 8004cca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004cce:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004cd2:	9b03      	ldr	r3, [sp, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f040 82a7 	bne.w	8005228 <LCD_Font.constprop.2+0x1298>
 8004cda:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004cde:	f8c8 3010 	str.w	r3, [r8, #16]
 8004ce2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8004ce6:	2602      	movs	r6, #2
 8004ce8:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cec:	f8cb 3010 	str.w	r3, [fp, #16]
 8004cf0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8004cf4:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cf8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004cfc:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004d04:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8004d08:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8004d0c:	f8cb 2010 	str.w	r2, [fp, #16]
 8004d10:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 8004d14:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004d18:	f04f 0c10 	mov.w	ip, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d1c:	613b      	str	r3, [r7, #16]
 8004d1e:	613a      	str	r2, [r7, #16]
 8004d20:	f8c8 0010 	str.w	r0, [r8, #16]
 8004d24:	f8c8 1010 	str.w	r1, [r8, #16]
 8004d28:	f8c8 3010 	str.w	r3, [r8, #16]
 8004d2c:	f8c8 2010 	str.w	r2, [r8, #16]
 8004d30:	f8c8 5010 	str.w	r5, [r8, #16]
 8004d34:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
 8004d38:	f8c8 e010 	str.w	lr, [r8, #16]
 8004d3c:	6139      	str	r1, [r7, #16]
 8004d3e:	6138      	str	r0, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004d40:	f8c7 c010 	str.w	ip, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d44:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004d46:	2540      	movs	r5, #64	; 0x40
 8004d48:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d4a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
 8004d4e:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004d50:	f8c8 c010 	str.w	ip, [r8, #16]
 8004d54:	f04f 0c20 	mov.w	ip, #32
 8004d58:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8004d5c:	f8c8 c010 	str.w	ip, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d60:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004d64:	f8cb 6010 	str.w	r6, [fp, #16]
 8004d68:	2601      	movs	r6, #1
 8004d6a:	f8cb 5010 	str.w	r5, [fp, #16]
 8004d6e:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d72:	f8cb 4010 	str.w	r4, [fp, #16]
 8004d76:	613b      	str	r3, [r7, #16]
 8004d78:	613a      	str	r2, [r7, #16]
 8004d7a:	f8c8 0010 	str.w	r0, [r8, #16]
 8004d7e:	f8c8 1010 	str.w	r1, [r8, #16]
 8004d82:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004d86:	ea5f 33da 	movs.w	r3, sl, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8004d8a:	bf18      	it	ne
 8004d8c:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d8e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8004d92:	f8c8 2010 	str.w	r2, [r8, #16]
 8004d96:	f8c8 5010 	str.w	r5, [r8, #16]
 8004d9a:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004d9e:	bf14      	ite	ne
 8004da0:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004da2:	6139      	streq	r1, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004da4:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
 8004da8:	bf0c      	ite	eq
 8004daa:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004dae:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004db0:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8004db4:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004db6:	bf0c      	ite	eq
 8004db8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004dbc:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004dbe:	f41a 5f80 	tst.w	sl, #4096	; 0x1000
 8004dc2:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004dc4:	bf0c      	ite	eq
 8004dc6:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004dca:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004dcc:	f41a 6f00 	tst.w	sl, #2048	; 0x800
 8004dd0:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004dd2:	bf0c      	ite	eq
 8004dd4:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004dd8:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004dda:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8004dde:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004de0:	bf0c      	ite	eq
 8004de2:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004de6:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004de8:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8004dec:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004dee:	bf0c      	ite	eq
 8004df0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004df4:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004df6:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004dfa:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004dfe:	bf0c      	ite	eq
 8004e00:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004e04:	2320      	movne	r3, #32
 8004e06:	f04f 0e02 	mov.w	lr, #2
 8004e0a:	f8c8 3010 	str.w	r3, [r8, #16]
 8004e0e:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e1a:	f8cb 3010 	str.w	r3, [fp, #16]
 8004e1e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004e22:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e26:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8004e2a:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e2e:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004e32:	f04f 0c01 	mov.w	ip, #1
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004e36:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8004e3a:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e3e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004e42:	f8cb 6010 	str.w	r6, [fp, #16]
 8004e46:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004e4a:	613b      	str	r3, [r7, #16]
 8004e4c:	613a      	str	r2, [r7, #16]
 8004e4e:	f8c8 5010 	str.w	r5, [r8, #16]
 8004e52:	f8c8 1010 	str.w	r1, [r8, #16]
 8004e56:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004e5a:	bf18      	it	ne
 8004e5c:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e5e:	f8c8 2010 	str.w	r2, [r8, #16]
 8004e62:	f8c8 4010 	str.w	r4, [r8, #16]
 8004e66:	f8c8 0010 	str.w	r0, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004e6a:	bf14      	ite	ne
 8004e6c:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e6e:	6139      	streq	r1, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004e70:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8004e74:	bf0c      	ite	eq
 8004e76:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004e7a:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004e7c:	f01a 0f20 	tst.w	sl, #32
 8004e80:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e82:	bf0c      	ite	eq
 8004e84:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004e88:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004e8a:	f01a 0f10 	tst.w	sl, #16
 8004e8e:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e90:	bf0c      	ite	eq
 8004e92:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004e96:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004e98:	f01a 0f08 	tst.w	sl, #8
 8004e9c:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e9e:	bf0c      	ite	eq
 8004ea0:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004ea4:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004ea6:	f01a 0f04 	tst.w	sl, #4
 8004eaa:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004eac:	bf0c      	ite	eq
 8004eae:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004eb2:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004eb4:	f01a 0f02 	tst.w	sl, #2
 8004eb8:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004eba:	bf0c      	ite	eq
 8004ebc:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004ec0:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004ec2:	f01a 0f01 	tst.w	sl, #1
 8004ec6:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004eca:	bf0c      	ite	eq
 8004ecc:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004ed0:	2320      	movne	r3, #32
 8004ed2:	f04f 0e02 	mov.w	lr, #2
 8004ed6:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8004eda:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ede:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ee2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ee6:	f8cb 3010 	str.w	r3, [fp, #16]
 8004eea:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004eee:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ef2:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8004ef6:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004efa:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004efe:	f04f 0c01 	mov.w	ip, #1
 8004f02:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f06:	f8cb 6010 	str.w	r6, [fp, #16]
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	613a      	str	r2, [r7, #16]
 8004f0e:	f8c8 5010 	str.w	r5, [r8, #16]
 8004f12:	f8c8 1010 	str.w	r1, [r8, #16]
 8004f16:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004f1a:	ea5f 33d9 	movs.w	r3, r9, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8004f1e:	bf18      	it	ne
 8004f20:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f22:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004f26:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004f2a:	f8c8 2010 	str.w	r2, [r8, #16]
 8004f2e:	f8c8 4010 	str.w	r4, [r8, #16]
 8004f32:	f8c8 0010 	str.w	r0, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004f36:	bf14      	ite	ne
 8004f38:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f3a:	6139      	streq	r1, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004f3c:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8004f40:	bf0c      	ite	eq
 8004f42:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004f46:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004f48:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8004f4c:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f4e:	bf0c      	ite	eq
 8004f50:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004f54:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004f56:	f419 5f80 	tst.w	r9, #4096	; 0x1000
 8004f5a:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f5c:	bf0c      	ite	eq
 8004f5e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004f62:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004f64:	f419 6f00 	tst.w	r9, #2048	; 0x800
 8004f68:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f6a:	bf0c      	ite	eq
 8004f6c:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004f70:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004f72:	f419 6f80 	tst.w	r9, #1024	; 0x400
 8004f76:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f78:	bf0c      	ite	eq
 8004f7a:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004f7e:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004f80:	f419 7f00 	tst.w	r9, #512	; 0x200
 8004f84:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f86:	bf0c      	ite	eq
 8004f88:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004f8c:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004f8e:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004f92:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f96:	bf0c      	ite	eq
 8004f98:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004f9c:	2320      	movne	r3, #32
 8004f9e:	f04f 0e02 	mov.w	lr, #2
 8004fa2:	f8c8 3010 	str.w	r3, [r8, #16]
 8004fa6:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004faa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004fb2:	f8cb 3010 	str.w	r3, [fp, #16]
 8004fb6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004fba:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fbe:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8004fc2:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fc6:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004fca:	f04f 0c01 	mov.w	ip, #1
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004fce:	f019 0f80 	tst.w	r9, #128	; 0x80
 8004fd2:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fd6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004fda:	f8cb 6010 	str.w	r6, [fp, #16]
 8004fde:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004fe2:	613b      	str	r3, [r7, #16]
 8004fe4:	613a      	str	r2, [r7, #16]
 8004fe6:	f8c8 5010 	str.w	r5, [r8, #16]
 8004fea:	f8c8 1010 	str.w	r1, [r8, #16]
 8004fee:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004ff2:	bf18      	it	ne
 8004ff4:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ff6:	f8c8 2010 	str.w	r2, [r8, #16]
 8004ffa:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ffe:	f8c8 0010 	str.w	r0, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005002:	bf14      	ite	ne
 8005004:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005006:	6139      	streq	r1, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8005008:	f019 0f40 	tst.w	r9, #64	; 0x40
 800500c:	bf0c      	ite	eq
 800500e:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8005012:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8005014:	f019 0f20 	tst.w	r9, #32
 8005018:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800501a:	bf0c      	ite	eq
 800501c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8005020:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8005022:	f019 0f10 	tst.w	r9, #16
 8005026:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005028:	bf0c      	ite	eq
 800502a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800502e:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8005030:	f019 0f08 	tst.w	r9, #8
 8005034:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005036:	bf0c      	ite	eq
 8005038:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800503c:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800503e:	f019 0f04 	tst.w	r9, #4
 8005042:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005044:	bf0c      	ite	eq
 8005046:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800504a:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800504c:	f019 0f02 	tst.w	r9, #2
 8005050:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005052:	bf0c      	ite	eq
 8005054:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8005058:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800505a:	f019 0f01 	tst.w	r9, #1
 800505e:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005062:	bf0c      	ite	eq
 8005064:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8005068:	2320      	movne	r3, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800506a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 800506e:	f8c8 3010 	str.w	r3, [r8, #16]
 8005072:	f04f 0902 	mov.w	r9, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005076:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 800507a:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800507e:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8005082:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005086:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 800508a:	f8cb 3010 	str.w	r3, [fp, #16]
 800508e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8005092:	f8cb 9010 	str.w	r9, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005096:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 800509a:	f8cb a010 	str.w	sl, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800509e:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 80050a2:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80050a6:	2610      	movs	r6, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050a8:	f8cb 4010 	str.w	r4, [fp, #16]
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	613a      	str	r2, [r7, #16]
 80050b0:	f8c8 5010 	str.w	r5, [r8, #16]
 80050b4:	f8c8 0010 	str.w	r0, [r8, #16]
 80050b8:	f8c8 3010 	str.w	r3, [r8, #16]
 80050bc:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80050c0:	2240      	movs	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050c2:	f8c8 e010 	str.w	lr, [r8, #16]
 80050c6:	f8c8 c010 	str.w	ip, [r8, #16]
 80050ca:	6138      	str	r0, [r7, #16]
 80050cc:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80050ce:	613e      	str	r6, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050d0:	6139      	str	r1, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80050d2:	613a      	str	r2, [r7, #16]
 80050d4:	2280      	movs	r2, #128	; 0x80
 80050d6:	613a      	str	r2, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80050dc:	f04f 0c00 	mov.w	ip, #0
 80050e0:	f8c8 2010 	str.w	r2, [r8, #16]
 80050e4:	f8c8 1010 	str.w	r1, [r8, #16]
 80050e8:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80050ec:	f8cb 9010 	str.w	r9, [fp, #16]
 80050f0:	f8cb a010 	str.w	sl, [fp, #16]
 80050f4:	2201      	movs	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050f6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80050fa:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050fe:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8005102:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005106:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800510a:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 800510e:	f8cb 2010 	str.w	r2, [fp, #16]
 8005112:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800511c:	613c      	str	r4, [r7, #16]
 800511e:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 8005122:	f8c8 5010 	str.w	r5, [r8, #16]
 8005126:	f8c8 0010 	str.w	r0, [r8, #16]
 800512a:	f8c8 3010 	str.w	r3, [r8, #16]
 800512e:	f8c8 4010 	str.w	r4, [r8, #16]
 8005132:	f8c8 9010 	str.w	r9, [r8, #16]
 8005136:	f8c8 e010 	str.w	lr, [r8, #16]
 800513a:	6138      	str	r0, [r7, #16]
 800513c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005140:	613d      	str	r5, [r7, #16]
 8005142:	6139      	str	r1, [r7, #16]
 8005144:	613a      	str	r2, [r7, #16]
 8005146:	613e      	str	r6, [r7, #16]
 8005148:	6138      	str	r0, [r7, #16]
 800514a:	f8c8 1010 	str.w	r1, [r8, #16]
 800514e:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005152:	2202      	movs	r2, #2
 8005154:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005158:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800515c:	f8cb 2010 	str.w	r2, [fp, #16]
 8005160:	9a00      	ldr	r2, [sp, #0]
 8005162:	f10c 0c01 	add.w	ip, ip, #1
 8005166:	4562      	cmp	r2, ip
 8005168:	f8cb a010 	str.w	sl, [fp, #16]
 800516c:	d1c2      	bne.n	80050f4 <LCD_Font.constprop.2+0x1164>
 800516e:	f7ff bbb6 	b.w	80048de <LCD_Font.constprop.2+0x94e>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8005172:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005174:	613a      	str	r2, [r7, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	f43f a8e0 	beq.w	800433c <LCD_Font.constprop.2+0x3ac>
    GPIOx->BSRR = GPIO_Pin;
 800517c:	2308      	movs	r3, #8
 800517e:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8005180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005182:	2b00      	cmp	r3, #0
 8005184:	f43f a8e1 	beq.w	800434a <LCD_Font.constprop.2+0x3ba>
 8005188:	2310      	movs	r3, #16
 800518a:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800518c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800518e:	2b00      	cmp	r3, #0
 8005190:	f43f a8e2 	beq.w	8004358 <LCD_Font.constprop.2+0x3c8>
 8005194:	2320      	movs	r3, #32
 8005196:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8005198:	f1bc 0f00 	cmp.w	ip, #0
 800519c:	f43f a8e3 	beq.w	8004366 <LCD_Font.constprop.2+0x3d6>
 80051a0:	2340      	movs	r3, #64	; 0x40
 80051a2:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80051a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f43f a8e4 	beq.w	8004374 <LCD_Font.constprop.2+0x3e4>
 80051ac:	2380      	movs	r3, #128	; 0x80
 80051ae:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80051b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f43f a8e5 	beq.w	8004382 <LCD_Font.constprop.2+0x3f2>
 80051b8:	2310      	movs	r3, #16
 80051ba:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80051be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f43f a8e6 	beq.w	8004392 <LCD_Font.constprop.2+0x402>
 80051c6:	2320      	movs	r3, #32
 80051c8:	f8c8 3010 	str.w	r3, [r8, #16]
 80051cc:	f7ff b8e5 	b.w	800439a <LCD_Font.constprop.2+0x40a>
 80051d0:	2308      	movs	r3, #8
 80051d2:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80051d4:	2d00      	cmp	r5, #0
 80051d6:	f43f a917 	beq.w	8004408 <LCD_Font.constprop.2+0x478>
 80051da:	2310      	movs	r3, #16
 80051dc:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80051de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f43f a918 	beq.w	8004416 <LCD_Font.constprop.2+0x486>
 80051e6:	2320      	movs	r3, #32
 80051e8:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80051ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f43f a919 	beq.w	8004424 <LCD_Font.constprop.2+0x494>
 80051f2:	2340      	movs	r3, #64	; 0x40
 80051f4:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80051f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f43f a91a 	beq.w	8004432 <LCD_Font.constprop.2+0x4a2>
 80051fe:	2380      	movs	r3, #128	; 0x80
 8005200:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8005202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005204:	2b00      	cmp	r3, #0
 8005206:	f43f a91b 	beq.w	8004440 <LCD_Font.constprop.2+0x4b0>
 800520a:	2310      	movs	r3, #16
 800520c:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8005210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005212:	2b00      	cmp	r3, #0
 8005214:	f43f a91c 	beq.w	8004450 <LCD_Font.constprop.2+0x4c0>
 8005218:	2320      	movs	r3, #32
 800521a:	f8c8 3010 	str.w	r3, [r8, #16]
 800521e:	f7ff b91b 	b.w	8004458 <LCD_Font.constprop.2+0x4c8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005222:	613a      	str	r2, [r7, #16]
 8005224:	f7ff b8e7 	b.w	80043f6 <LCD_Font.constprop.2+0x466>
    GPIOx->BSRR = GPIO_Pin;
 8005228:	2320      	movs	r3, #32
 800522a:	f8c8 3010 	str.w	r3, [r8, #16]
 800522e:	e558      	b.n	8004ce2 <LCD_Font.constprop.2+0xd52>
 8005230:	2310      	movs	r3, #16
 8005232:	f8c8 3010 	str.w	r3, [r8, #16]
 8005236:	e54c      	b.n	8004cd2 <LCD_Font.constprop.2+0xd42>
 8005238:	2380      	movs	r3, #128	; 0x80
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	e541      	b.n	8004cc2 <LCD_Font.constprop.2+0xd32>
 800523e:	2340      	movs	r3, #64	; 0x40
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	e537      	b.n	8004cb4 <LCD_Font.constprop.2+0xd24>
 8005244:	2320      	movs	r3, #32
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	e52d      	b.n	8004ca6 <LCD_Font.constprop.2+0xd16>
 800524a:	2310      	movs	r3, #16
 800524c:	613b      	str	r3, [r7, #16]
 800524e:	e523      	b.n	8004c98 <LCD_Font.constprop.2+0xd08>
 8005250:	2308      	movs	r3, #8
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	e519      	b.n	8004c8a <LCD_Font.constprop.2+0xcfa>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005256:	6139      	str	r1, [r7, #16]
 8005258:	e510      	b.n	8004c7c <LCD_Font.constprop.2+0xcec>
    GPIOx->BSRR = GPIO_Pin;
 800525a:	2320      	movs	r3, #32
 800525c:	f8c8 3010 	str.w	r3, [r8, #16]
 8005260:	e4da      	b.n	8004c18 <LCD_Font.constprop.2+0xc88>
 8005262:	2310      	movs	r3, #16
 8005264:	f8c8 3010 	str.w	r3, [r8, #16]
 8005268:	e4ce      	b.n	8004c08 <LCD_Font.constprop.2+0xc78>
 800526a:	2380      	movs	r3, #128	; 0x80
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	e4c3      	b.n	8004bf8 <LCD_Font.constprop.2+0xc68>
 8005270:	2340      	movs	r3, #64	; 0x40
 8005272:	613b      	str	r3, [r7, #16]
 8005274:	e4b9      	b.n	8004bea <LCD_Font.constprop.2+0xc5a>
 8005276:	2320      	movs	r3, #32
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	e4af      	b.n	8004bdc <LCD_Font.constprop.2+0xc4c>
 800527c:	2310      	movs	r3, #16
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	e4a5      	b.n	8004bce <LCD_Font.constprop.2+0xc3e>
 8005282:	2308      	movs	r3, #8
 8005284:	613b      	str	r3, [r7, #16]
 8005286:	e49b      	b.n	8004bc0 <LCD_Font.constprop.2+0xc30>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005288:	6139      	str	r1, [r7, #16]
 800528a:	e492      	b.n	8004bb2 <LCD_Font.constprop.2+0xc22>
			cursor_x += glyph.xAdvance * size;
 800528c:	b2a3      	uxth	r3, r4
 800528e:	9315      	str	r3, [sp, #84]	; 0x54
 8005290:	f7ff bb2d 	b.w	80048ee <LCD_Font.constprop.2+0x95e>

08005294 <LCD_Font.constprop.3>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 8005298:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 800529c:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800529e:	4610      	mov	r0, r2
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80052a0:	4616      	mov	r6, r2
 80052a2:	469a      	mov	sl, r3
	int16_t cursor_y = y;
 80052a4:	b20d      	sxth	r5, r1
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80052a6:	f000 f8b9 	bl	800541c <strlen>
 80052aa:	b3a0      	cbz	r0, 8005316 <LCD_Font.constprop.3+0x82>
 80052ac:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 80052ae:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80052b0:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80052b2:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800531c <LCD_Font.constprop.3+0x88>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80052b6:	4b1a      	ldr	r3, [pc, #104]	; (8005320 <LCD_Font.constprop.3+0x8c>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80052b8:	f10d 0b08 	add.w	fp, sp, #8
 80052bc:	e01c      	b.n	80052f8 <LCD_Font.constprop.3+0x64>
		else if(c >= font.first && c <= font.last && c != '\r')
 80052be:	f1bc 0f5e 	cmp.w	ip, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80052c2:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 80052c6:	d812      	bhi.n	80052ee <LCD_Font.constprop.3+0x5a>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80052c8:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80052cc:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80052d0:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80052d2:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80052d6:	4638      	mov	r0, r7
 80052d8:	4629      	mov	r1, r5
 80052da:	f7fe fd29 	bl	8003d30 <LCD_Char.constprop.1.isra.0>
			cursor_x += glyph.xAdvance * size;
 80052de:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80052e2:	4630      	mov	r0, r6
			cursor_x += glyph.xAdvance * size;
 80052e4:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80052e6:	f000 f899 	bl	800541c <strlen>
 80052ea:	4b0d      	ldr	r3, [pc, #52]	; (8005320 <LCD_Font.constprop.3+0x8c>)
			cursor_x += glyph.xAdvance * size;
 80052ec:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80052ee:	3401      	adds	r4, #1
 80052f0:	b2a4      	uxth	r4, r4
 80052f2:	4284      	cmp	r4, r0
 80052f4:	4622      	mov	r2, r4
 80052f6:	d20e      	bcs.n	8005316 <LCD_Font.constprop.3+0x82>
		char c = text[text_pos];
 80052f8:	5cb1      	ldrb	r1, [r6, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 80052fa:	f1a1 0220 	sub.w	r2, r1, #32
		if(c == '\n')
 80052fe:	290a      	cmp	r1, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 8005300:	fa5f fc82 	uxtb.w	ip, r2
		if(c == '\n')
 8005304:	d1db      	bne.n	80052be <LCD_Font.constprop.3+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005306:	3401      	adds	r4, #1
 8005308:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 800530a:	352b      	adds	r5, #43	; 0x2b
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800530c:	4284      	cmp	r4, r0
			cursor_x = x;
 800530e:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005310:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 8005312:	b22d      	sxth	r5, r5
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005314:	d3f0      	bcc.n	80052f8 <LCD_Font.constprop.3+0x64>
}
 8005316:	b005      	add	sp, #20
 8005318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800531c:	0800c8e0 	.word	0x0800c8e0
 8005320:	0801be38 	.word	0x0801be38

08005324 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005324:	e7fe      	b.n	8005324 <NMI_Handler>
 8005326:	bf00      	nop

08005328 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005328:	e7fe      	b.n	8005328 <HardFault_Handler>
 800532a:	bf00      	nop

0800532c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800532c:	e7fe      	b.n	800532c <MemManage_Handler>
 800532e:	bf00      	nop

08005330 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005330:	e7fe      	b.n	8005330 <BusFault_Handler>
 8005332:	bf00      	nop

08005334 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005334:	e7fe      	b.n	8005334 <UsageFault_Handler>
 8005336:	bf00      	nop

08005338 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop

0800533c <DebugMon_Handler>:
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop

08005340 <PendSV_Handler>:
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop

08005344 <SysTick_Handler>:
  uwTick += uwTickFreq;
 8005344:	4a02      	ldr	r2, [pc, #8]	; (8005350 <SysTick_Handler+0xc>)
 8005346:	6813      	ldr	r3, [r2, #0]
 8005348:	3301      	adds	r3, #1
 800534a:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	20000208 	.word	0x20000208

08005354 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005354:	2001      	movs	r0, #1
 8005356:	4770      	bx	lr

08005358 <_kill>:

int _kill(int pid, int sig)
{
 8005358:	b508      	push	{r3, lr}
	errno = EINVAL;
 800535a:	f002 fdd3 	bl	8007f04 <__errno>
 800535e:	2216      	movs	r2, #22
 8005360:	4603      	mov	r3, r0
	return -1;
}
 8005362:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8005366:	601a      	str	r2, [r3, #0]
}
 8005368:	bd08      	pop	{r3, pc}
 800536a:	bf00      	nop

0800536c <_exit>:

void _exit (int status)
{
 800536c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800536e:	f002 fdc9 	bl	8007f04 <__errno>
 8005372:	2316      	movs	r3, #22
 8005374:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8005376:	e7fe      	b.n	8005376 <_exit+0xa>

08005378 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005378:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800537a:	1e16      	subs	r6, r2, #0
 800537c:	dd07      	ble.n	800538e <_read+0x16>
 800537e:	460c      	mov	r4, r1
 8005380:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8005382:	f3af 8000 	nop.w
 8005386:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800538a:	42a5      	cmp	r5, r4
 800538c:	d1f9      	bne.n	8005382 <_read+0xa>
	}

return len;
}
 800538e:	4630      	mov	r0, r6
 8005390:	bd70      	pop	{r4, r5, r6, pc}
 8005392:	bf00      	nop

08005394 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005394:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005396:	1e16      	subs	r6, r2, #0
 8005398:	dd07      	ble.n	80053aa <_write+0x16>
 800539a:	460c      	mov	r4, r1
 800539c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800539e:	f814 0b01 	ldrb.w	r0, [r4], #1
 80053a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053a6:	42ac      	cmp	r4, r5
 80053a8:	d1f9      	bne.n	800539e <_write+0xa>
	}
	return len;
}
 80053aa:	4630      	mov	r0, r6
 80053ac:	bd70      	pop	{r4, r5, r6, pc}
 80053ae:	bf00      	nop

080053b0 <_close>:

int _close(int file)
{
	return -1;
}
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop

080053b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80053b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80053bc:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80053be:	604b      	str	r3, [r1, #4]
}
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop

080053c4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80053c4:	2001      	movs	r0, #1
 80053c6:	4770      	bx	lr

080053c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80053c8:	2000      	movs	r0, #0
 80053ca:	4770      	bx	lr

080053cc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80053cc:	490e      	ldr	r1, [pc, #56]	; (8005408 <_sbrk+0x3c>)
{
 80053ce:	4603      	mov	r3, r0
 80053d0:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053d2:	4a0e      	ldr	r2, [pc, #56]	; (800540c <_sbrk+0x40>)
 80053d4:	4c0e      	ldr	r4, [pc, #56]	; (8005410 <_sbrk+0x44>)
  if (NULL == __sbrk_heap_end)
 80053d6:	f8d1 04c4 	ldr.w	r0, [r1, #1220]	; 0x4c4
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053da:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80053dc:	b128      	cbz	r0, 80053ea <_sbrk+0x1e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053de:	4403      	add	r3, r0
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d809      	bhi.n	80053f8 <_sbrk+0x2c>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80053e4:	f8c1 34c4 	str.w	r3, [r1, #1220]	; 0x4c4

  return (void *)prev_heap_end;
}
 80053e8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80053ea:	4c0a      	ldr	r4, [pc, #40]	; (8005414 <_sbrk+0x48>)
 80053ec:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 80053ee:	4403      	add	r3, r0
 80053f0:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 80053f2:	f8c1 44c4 	str.w	r4, [r1, #1220]	; 0x4c4
  if (__sbrk_heap_end + incr > max_heap)
 80053f6:	d9f5      	bls.n	80053e4 <_sbrk+0x18>
    errno = ENOMEM;
 80053f8:	f002 fd84 	bl	8007f04 <__errno>
 80053fc:	220c      	movs	r2, #12
 80053fe:	4603      	mov	r3, r0
 8005400:	f04f 30ff 	mov.w	r0, #4294967295
 8005404:	601a      	str	r2, [r3, #0]
}
 8005406:	bd10      	pop	{r4, pc}
 8005408:	20000208 	.word	0x20000208
 800540c:	20005000 	.word	0x20005000
 8005410:	00000400 	.word	0x00000400
 8005414:	200016e0 	.word	0x200016e0

08005418 <SystemInit>:
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop

0800541c <strlen>:
 800541c:	4603      	mov	r3, r0
 800541e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005422:	2a00      	cmp	r2, #0
 8005424:	d1fb      	bne.n	800541e <strlen+0x2>
 8005426:	1a18      	subs	r0, r3, r0
 8005428:	3801      	subs	r0, #1
 800542a:	4770      	bx	lr

0800542c <__aeabi_drsub>:
 800542c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005430:	e002      	b.n	8005438 <__adddf3>
 8005432:	bf00      	nop

08005434 <__aeabi_dsub>:
 8005434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005438 <__adddf3>:
 8005438:	b530      	push	{r4, r5, lr}
 800543a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800543e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005442:	ea94 0f05 	teq	r4, r5
 8005446:	bf08      	it	eq
 8005448:	ea90 0f02 	teqeq	r0, r2
 800544c:	bf1f      	itttt	ne
 800544e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800545a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800545e:	f000 80e2 	beq.w	8005626 <__adddf3+0x1ee>
 8005462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800546a:	bfb8      	it	lt
 800546c:	426d      	neglt	r5, r5
 800546e:	dd0c      	ble.n	800548a <__adddf3+0x52>
 8005470:	442c      	add	r4, r5
 8005472:	ea80 0202 	eor.w	r2, r0, r2
 8005476:	ea81 0303 	eor.w	r3, r1, r3
 800547a:	ea82 0000 	eor.w	r0, r2, r0
 800547e:	ea83 0101 	eor.w	r1, r3, r1
 8005482:	ea80 0202 	eor.w	r2, r0, r2
 8005486:	ea81 0303 	eor.w	r3, r1, r3
 800548a:	2d36      	cmp	r5, #54	; 0x36
 800548c:	bf88      	it	hi
 800548e:	bd30      	pophi	{r4, r5, pc}
 8005490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800549c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80054a0:	d002      	beq.n	80054a8 <__adddf3+0x70>
 80054a2:	4240      	negs	r0, r0
 80054a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80054a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80054ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80054b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80054b4:	d002      	beq.n	80054bc <__adddf3+0x84>
 80054b6:	4252      	negs	r2, r2
 80054b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80054bc:	ea94 0f05 	teq	r4, r5
 80054c0:	f000 80a7 	beq.w	8005612 <__adddf3+0x1da>
 80054c4:	f1a4 0401 	sub.w	r4, r4, #1
 80054c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80054cc:	db0d      	blt.n	80054ea <__adddf3+0xb2>
 80054ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80054d2:	fa22 f205 	lsr.w	r2, r2, r5
 80054d6:	1880      	adds	r0, r0, r2
 80054d8:	f141 0100 	adc.w	r1, r1, #0
 80054dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80054e0:	1880      	adds	r0, r0, r2
 80054e2:	fa43 f305 	asr.w	r3, r3, r5
 80054e6:	4159      	adcs	r1, r3
 80054e8:	e00e      	b.n	8005508 <__adddf3+0xd0>
 80054ea:	f1a5 0520 	sub.w	r5, r5, #32
 80054ee:	f10e 0e20 	add.w	lr, lr, #32
 80054f2:	2a01      	cmp	r2, #1
 80054f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80054f8:	bf28      	it	cs
 80054fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80054fe:	fa43 f305 	asr.w	r3, r3, r5
 8005502:	18c0      	adds	r0, r0, r3
 8005504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800550c:	d507      	bpl.n	800551e <__adddf3+0xe6>
 800550e:	f04f 0e00 	mov.w	lr, #0
 8005512:	f1dc 0c00 	rsbs	ip, ip, #0
 8005516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800551a:	eb6e 0101 	sbc.w	r1, lr, r1
 800551e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005522:	d31b      	bcc.n	800555c <__adddf3+0x124>
 8005524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005528:	d30c      	bcc.n	8005544 <__adddf3+0x10c>
 800552a:	0849      	lsrs	r1, r1, #1
 800552c:	ea5f 0030 	movs.w	r0, r0, rrx
 8005530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005534:	f104 0401 	add.w	r4, r4, #1
 8005538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800553c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005540:	f080 809a 	bcs.w	8005678 <__adddf3+0x240>
 8005544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005548:	bf08      	it	eq
 800554a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800554e:	f150 0000 	adcs.w	r0, r0, #0
 8005552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005556:	ea41 0105 	orr.w	r1, r1, r5
 800555a:	bd30      	pop	{r4, r5, pc}
 800555c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005560:	4140      	adcs	r0, r0
 8005562:	eb41 0101 	adc.w	r1, r1, r1
 8005566:	3c01      	subs	r4, #1
 8005568:	bf28      	it	cs
 800556a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800556e:	d2e9      	bcs.n	8005544 <__adddf3+0x10c>
 8005570:	f091 0f00 	teq	r1, #0
 8005574:	bf04      	itt	eq
 8005576:	4601      	moveq	r1, r0
 8005578:	2000      	moveq	r0, #0
 800557a:	fab1 f381 	clz	r3, r1
 800557e:	bf08      	it	eq
 8005580:	3320      	addeq	r3, #32
 8005582:	f1a3 030b 	sub.w	r3, r3, #11
 8005586:	f1b3 0220 	subs.w	r2, r3, #32
 800558a:	da0c      	bge.n	80055a6 <__adddf3+0x16e>
 800558c:	320c      	adds	r2, #12
 800558e:	dd08      	ble.n	80055a2 <__adddf3+0x16a>
 8005590:	f102 0c14 	add.w	ip, r2, #20
 8005594:	f1c2 020c 	rsb	r2, r2, #12
 8005598:	fa01 f00c 	lsl.w	r0, r1, ip
 800559c:	fa21 f102 	lsr.w	r1, r1, r2
 80055a0:	e00c      	b.n	80055bc <__adddf3+0x184>
 80055a2:	f102 0214 	add.w	r2, r2, #20
 80055a6:	bfd8      	it	le
 80055a8:	f1c2 0c20 	rsble	ip, r2, #32
 80055ac:	fa01 f102 	lsl.w	r1, r1, r2
 80055b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80055b4:	bfdc      	itt	le
 80055b6:	ea41 010c 	orrle.w	r1, r1, ip
 80055ba:	4090      	lslle	r0, r2
 80055bc:	1ae4      	subs	r4, r4, r3
 80055be:	bfa2      	ittt	ge
 80055c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80055c4:	4329      	orrge	r1, r5
 80055c6:	bd30      	popge	{r4, r5, pc}
 80055c8:	ea6f 0404 	mvn.w	r4, r4
 80055cc:	3c1f      	subs	r4, #31
 80055ce:	da1c      	bge.n	800560a <__adddf3+0x1d2>
 80055d0:	340c      	adds	r4, #12
 80055d2:	dc0e      	bgt.n	80055f2 <__adddf3+0x1ba>
 80055d4:	f104 0414 	add.w	r4, r4, #20
 80055d8:	f1c4 0220 	rsb	r2, r4, #32
 80055dc:	fa20 f004 	lsr.w	r0, r0, r4
 80055e0:	fa01 f302 	lsl.w	r3, r1, r2
 80055e4:	ea40 0003 	orr.w	r0, r0, r3
 80055e8:	fa21 f304 	lsr.w	r3, r1, r4
 80055ec:	ea45 0103 	orr.w	r1, r5, r3
 80055f0:	bd30      	pop	{r4, r5, pc}
 80055f2:	f1c4 040c 	rsb	r4, r4, #12
 80055f6:	f1c4 0220 	rsb	r2, r4, #32
 80055fa:	fa20 f002 	lsr.w	r0, r0, r2
 80055fe:	fa01 f304 	lsl.w	r3, r1, r4
 8005602:	ea40 0003 	orr.w	r0, r0, r3
 8005606:	4629      	mov	r1, r5
 8005608:	bd30      	pop	{r4, r5, pc}
 800560a:	fa21 f004 	lsr.w	r0, r1, r4
 800560e:	4629      	mov	r1, r5
 8005610:	bd30      	pop	{r4, r5, pc}
 8005612:	f094 0f00 	teq	r4, #0
 8005616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800561a:	bf06      	itte	eq
 800561c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005620:	3401      	addeq	r4, #1
 8005622:	3d01      	subne	r5, #1
 8005624:	e74e      	b.n	80054c4 <__adddf3+0x8c>
 8005626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800562a:	bf18      	it	ne
 800562c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005630:	d029      	beq.n	8005686 <__adddf3+0x24e>
 8005632:	ea94 0f05 	teq	r4, r5
 8005636:	bf08      	it	eq
 8005638:	ea90 0f02 	teqeq	r0, r2
 800563c:	d005      	beq.n	800564a <__adddf3+0x212>
 800563e:	ea54 0c00 	orrs.w	ip, r4, r0
 8005642:	bf04      	itt	eq
 8005644:	4619      	moveq	r1, r3
 8005646:	4610      	moveq	r0, r2
 8005648:	bd30      	pop	{r4, r5, pc}
 800564a:	ea91 0f03 	teq	r1, r3
 800564e:	bf1e      	ittt	ne
 8005650:	2100      	movne	r1, #0
 8005652:	2000      	movne	r0, #0
 8005654:	bd30      	popne	{r4, r5, pc}
 8005656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800565a:	d105      	bne.n	8005668 <__adddf3+0x230>
 800565c:	0040      	lsls	r0, r0, #1
 800565e:	4149      	adcs	r1, r1
 8005660:	bf28      	it	cs
 8005662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8005666:	bd30      	pop	{r4, r5, pc}
 8005668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800566c:	bf3c      	itt	cc
 800566e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8005672:	bd30      	popcc	{r4, r5, pc}
 8005674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800567c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005680:	f04f 0000 	mov.w	r0, #0
 8005684:	bd30      	pop	{r4, r5, pc}
 8005686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800568a:	bf1a      	itte	ne
 800568c:	4619      	movne	r1, r3
 800568e:	4610      	movne	r0, r2
 8005690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8005694:	bf1c      	itt	ne
 8005696:	460b      	movne	r3, r1
 8005698:	4602      	movne	r2, r0
 800569a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800569e:	bf06      	itte	eq
 80056a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80056a4:	ea91 0f03 	teqeq	r1, r3
 80056a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80056ac:	bd30      	pop	{r4, r5, pc}
 80056ae:	bf00      	nop

080056b0 <__aeabi_ui2d>:
 80056b0:	f090 0f00 	teq	r0, #0
 80056b4:	bf04      	itt	eq
 80056b6:	2100      	moveq	r1, #0
 80056b8:	4770      	bxeq	lr
 80056ba:	b530      	push	{r4, r5, lr}
 80056bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80056c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80056c4:	f04f 0500 	mov.w	r5, #0
 80056c8:	f04f 0100 	mov.w	r1, #0
 80056cc:	e750      	b.n	8005570 <__adddf3+0x138>
 80056ce:	bf00      	nop

080056d0 <__aeabi_i2d>:
 80056d0:	f090 0f00 	teq	r0, #0
 80056d4:	bf04      	itt	eq
 80056d6:	2100      	moveq	r1, #0
 80056d8:	4770      	bxeq	lr
 80056da:	b530      	push	{r4, r5, lr}
 80056dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80056e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80056e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80056e8:	bf48      	it	mi
 80056ea:	4240      	negmi	r0, r0
 80056ec:	f04f 0100 	mov.w	r1, #0
 80056f0:	e73e      	b.n	8005570 <__adddf3+0x138>
 80056f2:	bf00      	nop

080056f4 <__aeabi_f2d>:
 80056f4:	0042      	lsls	r2, r0, #1
 80056f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80056fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80056fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005702:	bf1f      	itttt	ne
 8005704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800570c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005710:	4770      	bxne	lr
 8005712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8005716:	bf08      	it	eq
 8005718:	4770      	bxeq	lr
 800571a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800571e:	bf04      	itt	eq
 8005720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8005724:	4770      	bxeq	lr
 8005726:	b530      	push	{r4, r5, lr}
 8005728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800572c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005734:	e71c      	b.n	8005570 <__adddf3+0x138>
 8005736:	bf00      	nop

08005738 <__aeabi_ul2d>:
 8005738:	ea50 0201 	orrs.w	r2, r0, r1
 800573c:	bf08      	it	eq
 800573e:	4770      	bxeq	lr
 8005740:	b530      	push	{r4, r5, lr}
 8005742:	f04f 0500 	mov.w	r5, #0
 8005746:	e00a      	b.n	800575e <__aeabi_l2d+0x16>

08005748 <__aeabi_l2d>:
 8005748:	ea50 0201 	orrs.w	r2, r0, r1
 800574c:	bf08      	it	eq
 800574e:	4770      	bxeq	lr
 8005750:	b530      	push	{r4, r5, lr}
 8005752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8005756:	d502      	bpl.n	800575e <__aeabi_l2d+0x16>
 8005758:	4240      	negs	r0, r0
 800575a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800575e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800576a:	f43f aed8 	beq.w	800551e <__adddf3+0xe6>
 800576e:	f04f 0203 	mov.w	r2, #3
 8005772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005776:	bf18      	it	ne
 8005778:	3203      	addne	r2, #3
 800577a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800577e:	bf18      	it	ne
 8005780:	3203      	addne	r2, #3
 8005782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8005786:	f1c2 0320 	rsb	r3, r2, #32
 800578a:	fa00 fc03 	lsl.w	ip, r0, r3
 800578e:	fa20 f002 	lsr.w	r0, r0, r2
 8005792:	fa01 fe03 	lsl.w	lr, r1, r3
 8005796:	ea40 000e 	orr.w	r0, r0, lr
 800579a:	fa21 f102 	lsr.w	r1, r1, r2
 800579e:	4414      	add	r4, r2
 80057a0:	e6bd      	b.n	800551e <__adddf3+0xe6>
 80057a2:	bf00      	nop

080057a4 <__aeabi_dmul>:
 80057a4:	b570      	push	{r4, r5, r6, lr}
 80057a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80057aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80057ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80057b2:	bf1d      	ittte	ne
 80057b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80057b8:	ea94 0f0c 	teqne	r4, ip
 80057bc:	ea95 0f0c 	teqne	r5, ip
 80057c0:	f000 f8de 	bleq	8005980 <__aeabi_dmul+0x1dc>
 80057c4:	442c      	add	r4, r5
 80057c6:	ea81 0603 	eor.w	r6, r1, r3
 80057ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80057ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80057d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80057d6:	bf18      	it	ne
 80057d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80057dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80057e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057e4:	d038      	beq.n	8005858 <__aeabi_dmul+0xb4>
 80057e6:	fba0 ce02 	umull	ip, lr, r0, r2
 80057ea:	f04f 0500 	mov.w	r5, #0
 80057ee:	fbe1 e502 	umlal	lr, r5, r1, r2
 80057f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80057f6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80057fa:	f04f 0600 	mov.w	r6, #0
 80057fe:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005802:	f09c 0f00 	teq	ip, #0
 8005806:	bf18      	it	ne
 8005808:	f04e 0e01 	orrne.w	lr, lr, #1
 800580c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005810:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005814:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005818:	d204      	bcs.n	8005824 <__aeabi_dmul+0x80>
 800581a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800581e:	416d      	adcs	r5, r5
 8005820:	eb46 0606 	adc.w	r6, r6, r6
 8005824:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005828:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800582c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005830:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005834:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005838:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800583c:	bf88      	it	hi
 800583e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005842:	d81e      	bhi.n	8005882 <__aeabi_dmul+0xde>
 8005844:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005848:	bf08      	it	eq
 800584a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800584e:	f150 0000 	adcs.w	r0, r0, #0
 8005852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005856:	bd70      	pop	{r4, r5, r6, pc}
 8005858:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800585c:	ea46 0101 	orr.w	r1, r6, r1
 8005860:	ea40 0002 	orr.w	r0, r0, r2
 8005864:	ea81 0103 	eor.w	r1, r1, r3
 8005868:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800586c:	bfc2      	ittt	gt
 800586e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005876:	bd70      	popgt	{r4, r5, r6, pc}
 8005878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800587c:	f04f 0e00 	mov.w	lr, #0
 8005880:	3c01      	subs	r4, #1
 8005882:	f300 80ab 	bgt.w	80059dc <__aeabi_dmul+0x238>
 8005886:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800588a:	bfde      	ittt	le
 800588c:	2000      	movle	r0, #0
 800588e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8005892:	bd70      	pople	{r4, r5, r6, pc}
 8005894:	f1c4 0400 	rsb	r4, r4, #0
 8005898:	3c20      	subs	r4, #32
 800589a:	da35      	bge.n	8005908 <__aeabi_dmul+0x164>
 800589c:	340c      	adds	r4, #12
 800589e:	dc1b      	bgt.n	80058d8 <__aeabi_dmul+0x134>
 80058a0:	f104 0414 	add.w	r4, r4, #20
 80058a4:	f1c4 0520 	rsb	r5, r4, #32
 80058a8:	fa00 f305 	lsl.w	r3, r0, r5
 80058ac:	fa20 f004 	lsr.w	r0, r0, r4
 80058b0:	fa01 f205 	lsl.w	r2, r1, r5
 80058b4:	ea40 0002 	orr.w	r0, r0, r2
 80058b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80058bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80058c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80058c4:	fa21 f604 	lsr.w	r6, r1, r4
 80058c8:	eb42 0106 	adc.w	r1, r2, r6
 80058cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80058d0:	bf08      	it	eq
 80058d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80058d6:	bd70      	pop	{r4, r5, r6, pc}
 80058d8:	f1c4 040c 	rsb	r4, r4, #12
 80058dc:	f1c4 0520 	rsb	r5, r4, #32
 80058e0:	fa00 f304 	lsl.w	r3, r0, r4
 80058e4:	fa20 f005 	lsr.w	r0, r0, r5
 80058e8:	fa01 f204 	lsl.w	r2, r1, r4
 80058ec:	ea40 0002 	orr.w	r0, r0, r2
 80058f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80058f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80058f8:	f141 0100 	adc.w	r1, r1, #0
 80058fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005900:	bf08      	it	eq
 8005902:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005906:	bd70      	pop	{r4, r5, r6, pc}
 8005908:	f1c4 0520 	rsb	r5, r4, #32
 800590c:	fa00 f205 	lsl.w	r2, r0, r5
 8005910:	ea4e 0e02 	orr.w	lr, lr, r2
 8005914:	fa20 f304 	lsr.w	r3, r0, r4
 8005918:	fa01 f205 	lsl.w	r2, r1, r5
 800591c:	ea43 0302 	orr.w	r3, r3, r2
 8005920:	fa21 f004 	lsr.w	r0, r1, r4
 8005924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005928:	fa21 f204 	lsr.w	r2, r1, r4
 800592c:	ea20 0002 	bic.w	r0, r0, r2
 8005930:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005934:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005938:	bf08      	it	eq
 800593a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800593e:	bd70      	pop	{r4, r5, r6, pc}
 8005940:	f094 0f00 	teq	r4, #0
 8005944:	d10f      	bne.n	8005966 <__aeabi_dmul+0x1c2>
 8005946:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800594a:	0040      	lsls	r0, r0, #1
 800594c:	eb41 0101 	adc.w	r1, r1, r1
 8005950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005954:	bf08      	it	eq
 8005956:	3c01      	subeq	r4, #1
 8005958:	d0f7      	beq.n	800594a <__aeabi_dmul+0x1a6>
 800595a:	ea41 0106 	orr.w	r1, r1, r6
 800595e:	f095 0f00 	teq	r5, #0
 8005962:	bf18      	it	ne
 8005964:	4770      	bxne	lr
 8005966:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800596a:	0052      	lsls	r2, r2, #1
 800596c:	eb43 0303 	adc.w	r3, r3, r3
 8005970:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005974:	bf08      	it	eq
 8005976:	3d01      	subeq	r5, #1
 8005978:	d0f7      	beq.n	800596a <__aeabi_dmul+0x1c6>
 800597a:	ea43 0306 	orr.w	r3, r3, r6
 800597e:	4770      	bx	lr
 8005980:	ea94 0f0c 	teq	r4, ip
 8005984:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005988:	bf18      	it	ne
 800598a:	ea95 0f0c 	teqne	r5, ip
 800598e:	d00c      	beq.n	80059aa <__aeabi_dmul+0x206>
 8005990:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005994:	bf18      	it	ne
 8005996:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800599a:	d1d1      	bne.n	8005940 <__aeabi_dmul+0x19c>
 800599c:	ea81 0103 	eor.w	r1, r1, r3
 80059a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80059a4:	f04f 0000 	mov.w	r0, #0
 80059a8:	bd70      	pop	{r4, r5, r6, pc}
 80059aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80059ae:	bf06      	itte	eq
 80059b0:	4610      	moveq	r0, r2
 80059b2:	4619      	moveq	r1, r3
 80059b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80059b8:	d019      	beq.n	80059ee <__aeabi_dmul+0x24a>
 80059ba:	ea94 0f0c 	teq	r4, ip
 80059be:	d102      	bne.n	80059c6 <__aeabi_dmul+0x222>
 80059c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80059c4:	d113      	bne.n	80059ee <__aeabi_dmul+0x24a>
 80059c6:	ea95 0f0c 	teq	r5, ip
 80059ca:	d105      	bne.n	80059d8 <__aeabi_dmul+0x234>
 80059cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80059d0:	bf1c      	itt	ne
 80059d2:	4610      	movne	r0, r2
 80059d4:	4619      	movne	r1, r3
 80059d6:	d10a      	bne.n	80059ee <__aeabi_dmul+0x24a>
 80059d8:	ea81 0103 	eor.w	r1, r1, r3
 80059dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80059e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80059e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80059e8:	f04f 0000 	mov.w	r0, #0
 80059ec:	bd70      	pop	{r4, r5, r6, pc}
 80059ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80059f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80059f6:	bd70      	pop	{r4, r5, r6, pc}

080059f8 <__aeabi_ddiv>:
 80059f8:	b570      	push	{r4, r5, r6, lr}
 80059fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80059fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005a02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005a06:	bf1d      	ittte	ne
 8005a08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005a0c:	ea94 0f0c 	teqne	r4, ip
 8005a10:	ea95 0f0c 	teqne	r5, ip
 8005a14:	f000 f8a7 	bleq	8005b66 <__aeabi_ddiv+0x16e>
 8005a18:	eba4 0405 	sub.w	r4, r4, r5
 8005a1c:	ea81 0e03 	eor.w	lr, r1, r3
 8005a20:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005a24:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005a28:	f000 8088 	beq.w	8005b3c <__aeabi_ddiv+0x144>
 8005a2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005a30:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005a34:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005a38:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005a3c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005a40:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005a44:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005a48:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005a4c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005a50:	429d      	cmp	r5, r3
 8005a52:	bf08      	it	eq
 8005a54:	4296      	cmpeq	r6, r2
 8005a56:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8005a5a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005a5e:	d202      	bcs.n	8005a66 <__aeabi_ddiv+0x6e>
 8005a60:	085b      	lsrs	r3, r3, #1
 8005a62:	ea4f 0232 	mov.w	r2, r2, rrx
 8005a66:	1ab6      	subs	r6, r6, r2
 8005a68:	eb65 0503 	sbc.w	r5, r5, r3
 8005a6c:	085b      	lsrs	r3, r3, #1
 8005a6e:	ea4f 0232 	mov.w	r2, r2, rrx
 8005a72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005a76:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8005a7a:	ebb6 0e02 	subs.w	lr, r6, r2
 8005a7e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005a82:	bf22      	ittt	cs
 8005a84:	1ab6      	subcs	r6, r6, r2
 8005a86:	4675      	movcs	r5, lr
 8005a88:	ea40 000c 	orrcs.w	r0, r0, ip
 8005a8c:	085b      	lsrs	r3, r3, #1
 8005a8e:	ea4f 0232 	mov.w	r2, r2, rrx
 8005a92:	ebb6 0e02 	subs.w	lr, r6, r2
 8005a96:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005a9a:	bf22      	ittt	cs
 8005a9c:	1ab6      	subcs	r6, r6, r2
 8005a9e:	4675      	movcs	r5, lr
 8005aa0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005aa4:	085b      	lsrs	r3, r3, #1
 8005aa6:	ea4f 0232 	mov.w	r2, r2, rrx
 8005aaa:	ebb6 0e02 	subs.w	lr, r6, r2
 8005aae:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005ab2:	bf22      	ittt	cs
 8005ab4:	1ab6      	subcs	r6, r6, r2
 8005ab6:	4675      	movcs	r5, lr
 8005ab8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005abc:	085b      	lsrs	r3, r3, #1
 8005abe:	ea4f 0232 	mov.w	r2, r2, rrx
 8005ac2:	ebb6 0e02 	subs.w	lr, r6, r2
 8005ac6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005aca:	bf22      	ittt	cs
 8005acc:	1ab6      	subcs	r6, r6, r2
 8005ace:	4675      	movcs	r5, lr
 8005ad0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005ad4:	ea55 0e06 	orrs.w	lr, r5, r6
 8005ad8:	d018      	beq.n	8005b0c <__aeabi_ddiv+0x114>
 8005ada:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005ade:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8005ae2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8005ae6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005aea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005aee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8005af2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8005af6:	d1c0      	bne.n	8005a7a <__aeabi_ddiv+0x82>
 8005af8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005afc:	d10b      	bne.n	8005b16 <__aeabi_ddiv+0x11e>
 8005afe:	ea41 0100 	orr.w	r1, r1, r0
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005b0a:	e7b6      	b.n	8005a7a <__aeabi_ddiv+0x82>
 8005b0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005b10:	bf04      	itt	eq
 8005b12:	4301      	orreq	r1, r0
 8005b14:	2000      	moveq	r0, #0
 8005b16:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005b1a:	bf88      	it	hi
 8005b1c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005b20:	f63f aeaf 	bhi.w	8005882 <__aeabi_dmul+0xde>
 8005b24:	ebb5 0c03 	subs.w	ip, r5, r3
 8005b28:	bf04      	itt	eq
 8005b2a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005b2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005b32:	f150 0000 	adcs.w	r0, r0, #0
 8005b36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005b3a:	bd70      	pop	{r4, r5, r6, pc}
 8005b3c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005b40:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005b44:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005b48:	bfc2      	ittt	gt
 8005b4a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005b4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005b52:	bd70      	popgt	{r4, r5, r6, pc}
 8005b54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005b58:	f04f 0e00 	mov.w	lr, #0
 8005b5c:	3c01      	subs	r4, #1
 8005b5e:	e690      	b.n	8005882 <__aeabi_dmul+0xde>
 8005b60:	ea45 0e06 	orr.w	lr, r5, r6
 8005b64:	e68d      	b.n	8005882 <__aeabi_dmul+0xde>
 8005b66:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005b6a:	ea94 0f0c 	teq	r4, ip
 8005b6e:	bf08      	it	eq
 8005b70:	ea95 0f0c 	teqeq	r5, ip
 8005b74:	f43f af3b 	beq.w	80059ee <__aeabi_dmul+0x24a>
 8005b78:	ea94 0f0c 	teq	r4, ip
 8005b7c:	d10a      	bne.n	8005b94 <__aeabi_ddiv+0x19c>
 8005b7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005b82:	f47f af34 	bne.w	80059ee <__aeabi_dmul+0x24a>
 8005b86:	ea95 0f0c 	teq	r5, ip
 8005b8a:	f47f af25 	bne.w	80059d8 <__aeabi_dmul+0x234>
 8005b8e:	4610      	mov	r0, r2
 8005b90:	4619      	mov	r1, r3
 8005b92:	e72c      	b.n	80059ee <__aeabi_dmul+0x24a>
 8005b94:	ea95 0f0c 	teq	r5, ip
 8005b98:	d106      	bne.n	8005ba8 <__aeabi_ddiv+0x1b0>
 8005b9a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005b9e:	f43f aefd 	beq.w	800599c <__aeabi_dmul+0x1f8>
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	e722      	b.n	80059ee <__aeabi_dmul+0x24a>
 8005ba8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005bac:	bf18      	it	ne
 8005bae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005bb2:	f47f aec5 	bne.w	8005940 <__aeabi_dmul+0x19c>
 8005bb6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8005bba:	f47f af0d 	bne.w	80059d8 <__aeabi_dmul+0x234>
 8005bbe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8005bc2:	f47f aeeb 	bne.w	800599c <__aeabi_dmul+0x1f8>
 8005bc6:	e712      	b.n	80059ee <__aeabi_dmul+0x24a>

08005bc8 <__gedf2>:
 8005bc8:	f04f 3cff 	mov.w	ip, #4294967295
 8005bcc:	e006      	b.n	8005bdc <__cmpdf2+0x4>
 8005bce:	bf00      	nop

08005bd0 <__ledf2>:
 8005bd0:	f04f 0c01 	mov.w	ip, #1
 8005bd4:	e002      	b.n	8005bdc <__cmpdf2+0x4>
 8005bd6:	bf00      	nop

08005bd8 <__cmpdf2>:
 8005bd8:	f04f 0c01 	mov.w	ip, #1
 8005bdc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005be0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005be4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005be8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005bec:	bf18      	it	ne
 8005bee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8005bf2:	d01b      	beq.n	8005c2c <__cmpdf2+0x54>
 8005bf4:	b001      	add	sp, #4
 8005bf6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8005bfa:	bf0c      	ite	eq
 8005bfc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8005c00:	ea91 0f03 	teqne	r1, r3
 8005c04:	bf02      	ittt	eq
 8005c06:	ea90 0f02 	teqeq	r0, r2
 8005c0a:	2000      	moveq	r0, #0
 8005c0c:	4770      	bxeq	lr
 8005c0e:	f110 0f00 	cmn.w	r0, #0
 8005c12:	ea91 0f03 	teq	r1, r3
 8005c16:	bf58      	it	pl
 8005c18:	4299      	cmppl	r1, r3
 8005c1a:	bf08      	it	eq
 8005c1c:	4290      	cmpeq	r0, r2
 8005c1e:	bf2c      	ite	cs
 8005c20:	17d8      	asrcs	r0, r3, #31
 8005c22:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8005c26:	f040 0001 	orr.w	r0, r0, #1
 8005c2a:	4770      	bx	lr
 8005c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005c34:	d102      	bne.n	8005c3c <__cmpdf2+0x64>
 8005c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005c3a:	d107      	bne.n	8005c4c <__cmpdf2+0x74>
 8005c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005c44:	d1d6      	bne.n	8005bf4 <__cmpdf2+0x1c>
 8005c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005c4a:	d0d3      	beq.n	8005bf4 <__cmpdf2+0x1c>
 8005c4c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop

08005c54 <__aeabi_cdrcmple>:
 8005c54:	4684      	mov	ip, r0
 8005c56:	4610      	mov	r0, r2
 8005c58:	4662      	mov	r2, ip
 8005c5a:	468c      	mov	ip, r1
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4663      	mov	r3, ip
 8005c60:	e000      	b.n	8005c64 <__aeabi_cdcmpeq>
 8005c62:	bf00      	nop

08005c64 <__aeabi_cdcmpeq>:
 8005c64:	b501      	push	{r0, lr}
 8005c66:	f7ff ffb7 	bl	8005bd8 <__cmpdf2>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	bf48      	it	mi
 8005c6e:	f110 0f00 	cmnmi.w	r0, #0
 8005c72:	bd01      	pop	{r0, pc}

08005c74 <__aeabi_dcmpeq>:
 8005c74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005c78:	f7ff fff4 	bl	8005c64 <__aeabi_cdcmpeq>
 8005c7c:	bf0c      	ite	eq
 8005c7e:	2001      	moveq	r0, #1
 8005c80:	2000      	movne	r0, #0
 8005c82:	f85d fb08 	ldr.w	pc, [sp], #8
 8005c86:	bf00      	nop

08005c88 <__aeabi_dcmplt>:
 8005c88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005c8c:	f7ff ffea 	bl	8005c64 <__aeabi_cdcmpeq>
 8005c90:	bf34      	ite	cc
 8005c92:	2001      	movcc	r0, #1
 8005c94:	2000      	movcs	r0, #0
 8005c96:	f85d fb08 	ldr.w	pc, [sp], #8
 8005c9a:	bf00      	nop

08005c9c <__aeabi_dcmple>:
 8005c9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005ca0:	f7ff ffe0 	bl	8005c64 <__aeabi_cdcmpeq>
 8005ca4:	bf94      	ite	ls
 8005ca6:	2001      	movls	r0, #1
 8005ca8:	2000      	movhi	r0, #0
 8005caa:	f85d fb08 	ldr.w	pc, [sp], #8
 8005cae:	bf00      	nop

08005cb0 <__aeabi_dcmpge>:
 8005cb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005cb4:	f7ff ffce 	bl	8005c54 <__aeabi_cdrcmple>
 8005cb8:	bf94      	ite	ls
 8005cba:	2001      	movls	r0, #1
 8005cbc:	2000      	movhi	r0, #0
 8005cbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8005cc2:	bf00      	nop

08005cc4 <__aeabi_dcmpgt>:
 8005cc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005cc8:	f7ff ffc4 	bl	8005c54 <__aeabi_cdrcmple>
 8005ccc:	bf34      	ite	cc
 8005cce:	2001      	movcc	r0, #1
 8005cd0:	2000      	movcs	r0, #0
 8005cd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8005cd6:	bf00      	nop

08005cd8 <__aeabi_dcmpun>:
 8005cd8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005cdc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005ce0:	d102      	bne.n	8005ce8 <__aeabi_dcmpun+0x10>
 8005ce2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005ce6:	d10a      	bne.n	8005cfe <__aeabi_dcmpun+0x26>
 8005ce8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005cec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005cf0:	d102      	bne.n	8005cf8 <__aeabi_dcmpun+0x20>
 8005cf2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005cf6:	d102      	bne.n	8005cfe <__aeabi_dcmpun+0x26>
 8005cf8:	f04f 0000 	mov.w	r0, #0
 8005cfc:	4770      	bx	lr
 8005cfe:	f04f 0001 	mov.w	r0, #1
 8005d02:	4770      	bx	lr

08005d04 <__aeabi_d2iz>:
 8005d04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005d08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005d0c:	d215      	bcs.n	8005d3a <__aeabi_d2iz+0x36>
 8005d0e:	d511      	bpl.n	8005d34 <__aeabi_d2iz+0x30>
 8005d10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8005d14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005d18:	d912      	bls.n	8005d40 <__aeabi_d2iz+0x3c>
 8005d1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005d1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005d26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005d2a:	fa23 f002 	lsr.w	r0, r3, r2
 8005d2e:	bf18      	it	ne
 8005d30:	4240      	negne	r0, r0
 8005d32:	4770      	bx	lr
 8005d34:	f04f 0000 	mov.w	r0, #0
 8005d38:	4770      	bx	lr
 8005d3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005d3e:	d105      	bne.n	8005d4c <__aeabi_d2iz+0x48>
 8005d40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8005d44:	bf08      	it	eq
 8005d46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8005d4a:	4770      	bx	lr
 8005d4c:	f04f 0000 	mov.w	r0, #0
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop

08005d54 <__aeabi_d2uiz>:
 8005d54:	004a      	lsls	r2, r1, #1
 8005d56:	d211      	bcs.n	8005d7c <__aeabi_d2uiz+0x28>
 8005d58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005d5c:	d211      	bcs.n	8005d82 <__aeabi_d2uiz+0x2e>
 8005d5e:	d50d      	bpl.n	8005d7c <__aeabi_d2uiz+0x28>
 8005d60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8005d64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005d68:	d40e      	bmi.n	8005d88 <__aeabi_d2uiz+0x34>
 8005d6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005d6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005d76:	fa23 f002 	lsr.w	r0, r3, r2
 8005d7a:	4770      	bx	lr
 8005d7c:	f04f 0000 	mov.w	r0, #0
 8005d80:	4770      	bx	lr
 8005d82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005d86:	d102      	bne.n	8005d8e <__aeabi_d2uiz+0x3a>
 8005d88:	f04f 30ff 	mov.w	r0, #4294967295
 8005d8c:	4770      	bx	lr
 8005d8e:	f04f 0000 	mov.w	r0, #0
 8005d92:	4770      	bx	lr

08005d94 <__aeabi_d2f>:
 8005d94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005d98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8005d9c:	bf24      	itt	cs
 8005d9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8005da2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8005da6:	d90d      	bls.n	8005dc4 <__aeabi_d2f+0x30>
 8005da8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005dac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8005db0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005db4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005db8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005dbc:	bf08      	it	eq
 8005dbe:	f020 0001 	biceq.w	r0, r0, #1
 8005dc2:	4770      	bx	lr
 8005dc4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005dc8:	d121      	bne.n	8005e0e <__aeabi_d2f+0x7a>
 8005dca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8005dce:	bfbc      	itt	lt
 8005dd0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8005dd4:	4770      	bxlt	lr
 8005dd6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005dda:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005dde:	f1c2 0218 	rsb	r2, r2, #24
 8005de2:	f1c2 0c20 	rsb	ip, r2, #32
 8005de6:	fa10 f30c 	lsls.w	r3, r0, ip
 8005dea:	fa20 f002 	lsr.w	r0, r0, r2
 8005dee:	bf18      	it	ne
 8005df0:	f040 0001 	orrne.w	r0, r0, #1
 8005df4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005df8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005dfc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005e00:	ea40 000c 	orr.w	r0, r0, ip
 8005e04:	fa23 f302 	lsr.w	r3, r3, r2
 8005e08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005e0c:	e7cc      	b.n	8005da8 <__aeabi_d2f+0x14>
 8005e0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8005e12:	d107      	bne.n	8005e24 <__aeabi_d2f+0x90>
 8005e14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005e18:	bf1e      	ittt	ne
 8005e1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8005e1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8005e22:	4770      	bxne	lr
 8005e24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8005e28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop

08005e34 <__gesf2>:
 8005e34:	f04f 3cff 	mov.w	ip, #4294967295
 8005e38:	e006      	b.n	8005e48 <__cmpsf2+0x4>
 8005e3a:	bf00      	nop

08005e3c <__lesf2>:
 8005e3c:	f04f 0c01 	mov.w	ip, #1
 8005e40:	e002      	b.n	8005e48 <__cmpsf2+0x4>
 8005e42:	bf00      	nop

08005e44 <__cmpsf2>:
 8005e44:	f04f 0c01 	mov.w	ip, #1
 8005e48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005e4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005e50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005e54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005e58:	bf18      	it	ne
 8005e5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005e5e:	d011      	beq.n	8005e84 <__cmpsf2+0x40>
 8005e60:	b001      	add	sp, #4
 8005e62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8005e66:	bf18      	it	ne
 8005e68:	ea90 0f01 	teqne	r0, r1
 8005e6c:	bf58      	it	pl
 8005e6e:	ebb2 0003 	subspl.w	r0, r2, r3
 8005e72:	bf88      	it	hi
 8005e74:	17c8      	asrhi	r0, r1, #31
 8005e76:	bf38      	it	cc
 8005e78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8005e7c:	bf18      	it	ne
 8005e7e:	f040 0001 	orrne.w	r0, r0, #1
 8005e82:	4770      	bx	lr
 8005e84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005e88:	d102      	bne.n	8005e90 <__cmpsf2+0x4c>
 8005e8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8005e8e:	d105      	bne.n	8005e9c <__cmpsf2+0x58>
 8005e90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8005e94:	d1e4      	bne.n	8005e60 <__cmpsf2+0x1c>
 8005e96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8005e9a:	d0e1      	beq.n	8005e60 <__cmpsf2+0x1c>
 8005e9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop

08005ea4 <__aeabi_cfrcmple>:
 8005ea4:	4684      	mov	ip, r0
 8005ea6:	4608      	mov	r0, r1
 8005ea8:	4661      	mov	r1, ip
 8005eaa:	e7ff      	b.n	8005eac <__aeabi_cfcmpeq>

08005eac <__aeabi_cfcmpeq>:
 8005eac:	b50f      	push	{r0, r1, r2, r3, lr}
 8005eae:	f7ff ffc9 	bl	8005e44 <__cmpsf2>
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	bf48      	it	mi
 8005eb6:	f110 0f00 	cmnmi.w	r0, #0
 8005eba:	bd0f      	pop	{r0, r1, r2, r3, pc}

08005ebc <__aeabi_fcmpeq>:
 8005ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005ec0:	f7ff fff4 	bl	8005eac <__aeabi_cfcmpeq>
 8005ec4:	bf0c      	ite	eq
 8005ec6:	2001      	moveq	r0, #1
 8005ec8:	2000      	movne	r0, #0
 8005eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8005ece:	bf00      	nop

08005ed0 <__aeabi_fcmplt>:
 8005ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005ed4:	f7ff ffea 	bl	8005eac <__aeabi_cfcmpeq>
 8005ed8:	bf34      	ite	cc
 8005eda:	2001      	movcc	r0, #1
 8005edc:	2000      	movcs	r0, #0
 8005ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8005ee2:	bf00      	nop

08005ee4 <__aeabi_fcmple>:
 8005ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005ee8:	f7ff ffe0 	bl	8005eac <__aeabi_cfcmpeq>
 8005eec:	bf94      	ite	ls
 8005eee:	2001      	movls	r0, #1
 8005ef0:	2000      	movhi	r0, #0
 8005ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8005ef6:	bf00      	nop

08005ef8 <__aeabi_fcmpge>:
 8005ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005efc:	f7ff ffd2 	bl	8005ea4 <__aeabi_cfrcmple>
 8005f00:	bf94      	ite	ls
 8005f02:	2001      	movls	r0, #1
 8005f04:	2000      	movhi	r0, #0
 8005f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8005f0a:	bf00      	nop

08005f0c <__aeabi_fcmpgt>:
 8005f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005f10:	f7ff ffc8 	bl	8005ea4 <__aeabi_cfrcmple>
 8005f14:	bf34      	ite	cc
 8005f16:	2001      	movcc	r0, #1
 8005f18:	2000      	movcs	r0, #0
 8005f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8005f1e:	bf00      	nop

08005f20 <__aeabi_d2lz>:
 8005f20:	b538      	push	{r3, r4, r5, lr}
 8005f22:	4605      	mov	r5, r0
 8005f24:	460c      	mov	r4, r1
 8005f26:	2200      	movs	r2, #0
 8005f28:	2300      	movs	r3, #0
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	f7ff feab 	bl	8005c88 <__aeabi_dcmplt>
 8005f32:	b928      	cbnz	r0, 8005f40 <__aeabi_d2lz+0x20>
 8005f34:	4628      	mov	r0, r5
 8005f36:	4621      	mov	r1, r4
 8005f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f3c:	f000 b80a 	b.w	8005f54 <__aeabi_d2ulz>
 8005f40:	4628      	mov	r0, r5
 8005f42:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8005f46:	f000 f805 	bl	8005f54 <__aeabi_d2ulz>
 8005f4a:	4240      	negs	r0, r0
 8005f4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005f50:	bd38      	pop	{r3, r4, r5, pc}
 8005f52:	bf00      	nop

08005f54 <__aeabi_d2ulz>:
 8005f54:	b5d0      	push	{r4, r6, r7, lr}
 8005f56:	2200      	movs	r2, #0
 8005f58:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <__aeabi_d2ulz+0x34>)
 8005f5a:	4606      	mov	r6, r0
 8005f5c:	460f      	mov	r7, r1
 8005f5e:	f7ff fc21 	bl	80057a4 <__aeabi_dmul>
 8005f62:	f7ff fef7 	bl	8005d54 <__aeabi_d2uiz>
 8005f66:	4604      	mov	r4, r0
 8005f68:	f7ff fba2 	bl	80056b0 <__aeabi_ui2d>
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	4b07      	ldr	r3, [pc, #28]	; (8005f8c <__aeabi_d2ulz+0x38>)
 8005f70:	f7ff fc18 	bl	80057a4 <__aeabi_dmul>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4630      	mov	r0, r6
 8005f7a:	4639      	mov	r1, r7
 8005f7c:	f7ff fa5a 	bl	8005434 <__aeabi_dsub>
 8005f80:	f7ff fee8 	bl	8005d54 <__aeabi_d2uiz>
 8005f84:	4621      	mov	r1, r4
 8005f86:	bdd0      	pop	{r4, r6, r7, pc}
 8005f88:	3df00000 	.word	0x3df00000
 8005f8c:	41f00000 	.word	0x41f00000

08005f90 <__aeabi_fmul>:
 8005f90:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005f94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8005f98:	bf1e      	ittt	ne
 8005f9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8005f9e:	ea92 0f0c 	teqne	r2, ip
 8005fa2:	ea93 0f0c 	teqne	r3, ip
 8005fa6:	d06f      	beq.n	8006088 <__aeabi_fmul+0xf8>
 8005fa8:	441a      	add	r2, r3
 8005faa:	ea80 0c01 	eor.w	ip, r0, r1
 8005fae:	0240      	lsls	r0, r0, #9
 8005fb0:	bf18      	it	ne
 8005fb2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8005fb6:	d01e      	beq.n	8005ff6 <__aeabi_fmul+0x66>
 8005fb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fbc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8005fc0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8005fc4:	fba0 3101 	umull	r3, r1, r0, r1
 8005fc8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8005fcc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8005fd0:	bf3e      	ittt	cc
 8005fd2:	0049      	lslcc	r1, r1, #1
 8005fd4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8005fd8:	005b      	lslcc	r3, r3, #1
 8005fda:	ea40 0001 	orr.w	r0, r0, r1
 8005fde:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8005fe2:	2afd      	cmp	r2, #253	; 0xfd
 8005fe4:	d81d      	bhi.n	8006022 <__aeabi_fmul+0x92>
 8005fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8005fee:	bf08      	it	eq
 8005ff0:	f020 0001 	biceq.w	r0, r0, #1
 8005ff4:	4770      	bx	lr
 8005ff6:	f090 0f00 	teq	r0, #0
 8005ffa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8005ffe:	bf08      	it	eq
 8006000:	0249      	lsleq	r1, r1, #9
 8006002:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8006006:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800600a:	3a7f      	subs	r2, #127	; 0x7f
 800600c:	bfc2      	ittt	gt
 800600e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8006012:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8006016:	4770      	bxgt	lr
 8006018:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	3a01      	subs	r2, #1
 8006022:	dc5d      	bgt.n	80060e0 <__aeabi_fmul+0x150>
 8006024:	f112 0f19 	cmn.w	r2, #25
 8006028:	bfdc      	itt	le
 800602a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800602e:	4770      	bxle	lr
 8006030:	f1c2 0200 	rsb	r2, r2, #0
 8006034:	0041      	lsls	r1, r0, #1
 8006036:	fa21 f102 	lsr.w	r1, r1, r2
 800603a:	f1c2 0220 	rsb	r2, r2, #32
 800603e:	fa00 fc02 	lsl.w	ip, r0, r2
 8006042:	ea5f 0031 	movs.w	r0, r1, rrx
 8006046:	f140 0000 	adc.w	r0, r0, #0
 800604a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800604e:	bf08      	it	eq
 8006050:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8006054:	4770      	bx	lr
 8006056:	f092 0f00 	teq	r2, #0
 800605a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800605e:	bf02      	ittt	eq
 8006060:	0040      	lsleq	r0, r0, #1
 8006062:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8006066:	3a01      	subeq	r2, #1
 8006068:	d0f9      	beq.n	800605e <__aeabi_fmul+0xce>
 800606a:	ea40 000c 	orr.w	r0, r0, ip
 800606e:	f093 0f00 	teq	r3, #0
 8006072:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006076:	bf02      	ittt	eq
 8006078:	0049      	lsleq	r1, r1, #1
 800607a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800607e:	3b01      	subeq	r3, #1
 8006080:	d0f9      	beq.n	8006076 <__aeabi_fmul+0xe6>
 8006082:	ea41 010c 	orr.w	r1, r1, ip
 8006086:	e78f      	b.n	8005fa8 <__aeabi_fmul+0x18>
 8006088:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800608c:	ea92 0f0c 	teq	r2, ip
 8006090:	bf18      	it	ne
 8006092:	ea93 0f0c 	teqne	r3, ip
 8006096:	d00a      	beq.n	80060ae <__aeabi_fmul+0x11e>
 8006098:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800609c:	bf18      	it	ne
 800609e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80060a2:	d1d8      	bne.n	8006056 <__aeabi_fmul+0xc6>
 80060a4:	ea80 0001 	eor.w	r0, r0, r1
 80060a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80060ac:	4770      	bx	lr
 80060ae:	f090 0f00 	teq	r0, #0
 80060b2:	bf17      	itett	ne
 80060b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80060b8:	4608      	moveq	r0, r1
 80060ba:	f091 0f00 	teqne	r1, #0
 80060be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80060c2:	d014      	beq.n	80060ee <__aeabi_fmul+0x15e>
 80060c4:	ea92 0f0c 	teq	r2, ip
 80060c8:	d101      	bne.n	80060ce <__aeabi_fmul+0x13e>
 80060ca:	0242      	lsls	r2, r0, #9
 80060cc:	d10f      	bne.n	80060ee <__aeabi_fmul+0x15e>
 80060ce:	ea93 0f0c 	teq	r3, ip
 80060d2:	d103      	bne.n	80060dc <__aeabi_fmul+0x14c>
 80060d4:	024b      	lsls	r3, r1, #9
 80060d6:	bf18      	it	ne
 80060d8:	4608      	movne	r0, r1
 80060da:	d108      	bne.n	80060ee <__aeabi_fmul+0x15e>
 80060dc:	ea80 0001 	eor.w	r0, r0, r1
 80060e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80060e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80060e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80060ec:	4770      	bx	lr
 80060ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80060f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80060f6:	4770      	bx	lr

080060f8 <__aeabi_frsub>:
 80060f8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80060fc:	e002      	b.n	8006104 <__addsf3>
 80060fe:	bf00      	nop

08006100 <__aeabi_fsub>:
 8006100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08006104 <__addsf3>:
 8006104:	0042      	lsls	r2, r0, #1
 8006106:	bf1f      	itttt	ne
 8006108:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800610c:	ea92 0f03 	teqne	r2, r3
 8006110:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8006114:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8006118:	d06a      	beq.n	80061f0 <__addsf3+0xec>
 800611a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800611e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8006122:	bfc1      	itttt	gt
 8006124:	18d2      	addgt	r2, r2, r3
 8006126:	4041      	eorgt	r1, r0
 8006128:	4048      	eorgt	r0, r1
 800612a:	4041      	eorgt	r1, r0
 800612c:	bfb8      	it	lt
 800612e:	425b      	neglt	r3, r3
 8006130:	2b19      	cmp	r3, #25
 8006132:	bf88      	it	hi
 8006134:	4770      	bxhi	lr
 8006136:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800613a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800613e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006142:	bf18      	it	ne
 8006144:	4240      	negne	r0, r0
 8006146:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800614a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800614e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8006152:	bf18      	it	ne
 8006154:	4249      	negne	r1, r1
 8006156:	ea92 0f03 	teq	r2, r3
 800615a:	d03f      	beq.n	80061dc <__addsf3+0xd8>
 800615c:	f1a2 0201 	sub.w	r2, r2, #1
 8006160:	fa41 fc03 	asr.w	ip, r1, r3
 8006164:	eb10 000c 	adds.w	r0, r0, ip
 8006168:	f1c3 0320 	rsb	r3, r3, #32
 800616c:	fa01 f103 	lsl.w	r1, r1, r3
 8006170:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006174:	d502      	bpl.n	800617c <__addsf3+0x78>
 8006176:	4249      	negs	r1, r1
 8006178:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800617c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006180:	d313      	bcc.n	80061aa <__addsf3+0xa6>
 8006182:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006186:	d306      	bcc.n	8006196 <__addsf3+0x92>
 8006188:	0840      	lsrs	r0, r0, #1
 800618a:	ea4f 0131 	mov.w	r1, r1, rrx
 800618e:	f102 0201 	add.w	r2, r2, #1
 8006192:	2afe      	cmp	r2, #254	; 0xfe
 8006194:	d251      	bcs.n	800623a <__addsf3+0x136>
 8006196:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800619a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800619e:	bf08      	it	eq
 80061a0:	f020 0001 	biceq.w	r0, r0, #1
 80061a4:	ea40 0003 	orr.w	r0, r0, r3
 80061a8:	4770      	bx	lr
 80061aa:	0049      	lsls	r1, r1, #1
 80061ac:	eb40 0000 	adc.w	r0, r0, r0
 80061b0:	3a01      	subs	r2, #1
 80061b2:	bf28      	it	cs
 80061b4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80061b8:	d2ed      	bcs.n	8006196 <__addsf3+0x92>
 80061ba:	fab0 fc80 	clz	ip, r0
 80061be:	f1ac 0c08 	sub.w	ip, ip, #8
 80061c2:	ebb2 020c 	subs.w	r2, r2, ip
 80061c6:	fa00 f00c 	lsl.w	r0, r0, ip
 80061ca:	bfaa      	itet	ge
 80061cc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80061d0:	4252      	neglt	r2, r2
 80061d2:	4318      	orrge	r0, r3
 80061d4:	bfbc      	itt	lt
 80061d6:	40d0      	lsrlt	r0, r2
 80061d8:	4318      	orrlt	r0, r3
 80061da:	4770      	bx	lr
 80061dc:	f092 0f00 	teq	r2, #0
 80061e0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80061e4:	bf06      	itte	eq
 80061e6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80061ea:	3201      	addeq	r2, #1
 80061ec:	3b01      	subne	r3, #1
 80061ee:	e7b5      	b.n	800615c <__addsf3+0x58>
 80061f0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80061f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80061f8:	bf18      	it	ne
 80061fa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80061fe:	d021      	beq.n	8006244 <__addsf3+0x140>
 8006200:	ea92 0f03 	teq	r2, r3
 8006204:	d004      	beq.n	8006210 <__addsf3+0x10c>
 8006206:	f092 0f00 	teq	r2, #0
 800620a:	bf08      	it	eq
 800620c:	4608      	moveq	r0, r1
 800620e:	4770      	bx	lr
 8006210:	ea90 0f01 	teq	r0, r1
 8006214:	bf1c      	itt	ne
 8006216:	2000      	movne	r0, #0
 8006218:	4770      	bxne	lr
 800621a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800621e:	d104      	bne.n	800622a <__addsf3+0x126>
 8006220:	0040      	lsls	r0, r0, #1
 8006222:	bf28      	it	cs
 8006224:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8006228:	4770      	bx	lr
 800622a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800622e:	bf3c      	itt	cc
 8006230:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8006234:	4770      	bxcc	lr
 8006236:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800623a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800623e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006242:	4770      	bx	lr
 8006244:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8006248:	bf16      	itet	ne
 800624a:	4608      	movne	r0, r1
 800624c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8006250:	4601      	movne	r1, r0
 8006252:	0242      	lsls	r2, r0, #9
 8006254:	bf06      	itte	eq
 8006256:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800625a:	ea90 0f01 	teqeq	r0, r1
 800625e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8006262:	4770      	bx	lr

08006264 <__aeabi_ui2f>:
 8006264:	f04f 0300 	mov.w	r3, #0
 8006268:	e004      	b.n	8006274 <__aeabi_i2f+0x8>
 800626a:	bf00      	nop

0800626c <__aeabi_i2f>:
 800626c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8006270:	bf48      	it	mi
 8006272:	4240      	negmi	r0, r0
 8006274:	ea5f 0c00 	movs.w	ip, r0
 8006278:	bf08      	it	eq
 800627a:	4770      	bxeq	lr
 800627c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8006280:	4601      	mov	r1, r0
 8006282:	f04f 0000 	mov.w	r0, #0
 8006286:	e01c      	b.n	80062c2 <__aeabi_l2f+0x2a>

08006288 <__aeabi_ul2f>:
 8006288:	ea50 0201 	orrs.w	r2, r0, r1
 800628c:	bf08      	it	eq
 800628e:	4770      	bxeq	lr
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	e00a      	b.n	80062ac <__aeabi_l2f+0x14>
 8006296:	bf00      	nop

08006298 <__aeabi_l2f>:
 8006298:	ea50 0201 	orrs.w	r2, r0, r1
 800629c:	bf08      	it	eq
 800629e:	4770      	bxeq	lr
 80062a0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80062a4:	d502      	bpl.n	80062ac <__aeabi_l2f+0x14>
 80062a6:	4240      	negs	r0, r0
 80062a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80062ac:	ea5f 0c01 	movs.w	ip, r1
 80062b0:	bf02      	ittt	eq
 80062b2:	4684      	moveq	ip, r0
 80062b4:	4601      	moveq	r1, r0
 80062b6:	2000      	moveq	r0, #0
 80062b8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80062bc:	bf08      	it	eq
 80062be:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80062c2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80062c6:	fabc f28c 	clz	r2, ip
 80062ca:	3a08      	subs	r2, #8
 80062cc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80062d0:	db10      	blt.n	80062f4 <__aeabi_l2f+0x5c>
 80062d2:	fa01 fc02 	lsl.w	ip, r1, r2
 80062d6:	4463      	add	r3, ip
 80062d8:	fa00 fc02 	lsl.w	ip, r0, r2
 80062dc:	f1c2 0220 	rsb	r2, r2, #32
 80062e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80062e4:	fa20 f202 	lsr.w	r2, r0, r2
 80062e8:	eb43 0002 	adc.w	r0, r3, r2
 80062ec:	bf08      	it	eq
 80062ee:	f020 0001 	biceq.w	r0, r0, #1
 80062f2:	4770      	bx	lr
 80062f4:	f102 0220 	add.w	r2, r2, #32
 80062f8:	fa01 fc02 	lsl.w	ip, r1, r2
 80062fc:	f1c2 0220 	rsb	r2, r2, #32
 8006300:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8006304:	fa21 f202 	lsr.w	r2, r1, r2
 8006308:	eb43 0002 	adc.w	r0, r3, r2
 800630c:	bf08      	it	eq
 800630e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8006312:	4770      	bx	lr

08006314 <__aeabi_f2uiz>:
 8006314:	0042      	lsls	r2, r0, #1
 8006316:	d20e      	bcs.n	8006336 <__aeabi_f2uiz+0x22>
 8006318:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800631c:	d30b      	bcc.n	8006336 <__aeabi_f2uiz+0x22>
 800631e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8006322:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8006326:	d409      	bmi.n	800633c <__aeabi_f2uiz+0x28>
 8006328:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800632c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006330:	fa23 f002 	lsr.w	r0, r3, r2
 8006334:	4770      	bx	lr
 8006336:	f04f 0000 	mov.w	r0, #0
 800633a:	4770      	bx	lr
 800633c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8006340:	d101      	bne.n	8006346 <__aeabi_f2uiz+0x32>
 8006342:	0242      	lsls	r2, r0, #9
 8006344:	d102      	bne.n	800634c <__aeabi_f2uiz+0x38>
 8006346:	f04f 30ff 	mov.w	r0, #4294967295
 800634a:	4770      	bx	lr
 800634c:	f04f 0000 	mov.w	r0, #0
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	0000      	movs	r0, r0
	...

08006358 <main>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006358:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800635c:	4858      	ldr	r0, [pc, #352]	; (80064c0 <main+0x168>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800635e:	4959      	ldr	r1, [pc, #356]	; (80064c4 <main+0x16c>)
 8006360:	6802      	ldr	r2, [r0, #0]
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8006362:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8006366:	f042 0210 	orr.w	r2, r2, #16
 800636a:	6002      	str	r2, [r0, #0]
 800636c:	68ca      	ldr	r2, [r1, #12]
  reg_value  =  (reg_value                                   |
 800636e:	4b56      	ldr	r3, [pc, #344]	; (80064c8 <main+0x170>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006370:	4022      	ands	r2, r4
  reg_value  =  (reg_value                                   |
 8006372:	4313      	orrs	r3, r2
 8006374:	b09f      	sub	sp, #124	; 0x7c
  SCB->AIRCR =  reg_value;
 8006376:	60cb      	str	r3, [r1, #12]
  HAL_InitTick(TICK_INT_PRIORITY);
 8006378:	200f      	movs	r0, #15
 800637a:	f7fd fd3d 	bl	8003df8 <HAL_InitTick.isra.0>
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800637e:	4b53      	ldr	r3, [pc, #332]	; (80064cc <main+0x174>)

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006380:	4953      	ldr	r1, [pc, #332]	; (80064d0 <main+0x178>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8006382:	699a      	ldr	r2, [r3, #24]
 8006384:	f042 0201 	orr.w	r2, r2, #1
 8006388:	619a      	str	r2, [r3, #24]
 800638a:	699a      	ldr	r2, [r3, #24]
 800638c:	f002 0201 	and.w	r2, r2, #1
 8006390:	9210      	str	r2, [sp, #64]	; 0x40
 8006392:	9a10      	ldr	r2, [sp, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8006394:	69da      	ldr	r2, [r3, #28]
 8006396:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800639a:	61da      	str	r2, [r3, #28]
 800639c:	69da      	ldr	r2, [r3, #28]
 800639e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80063a2:	920f      	str	r2, [sp, #60]	; 0x3c
 80063a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80063a6:	684a      	ldr	r2, [r1, #4]
 80063a8:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80063ac:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80063b0:	604a      	str	r2, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	f002 020c 	and.w	r2, r2, #12
 80063b8:	2a04      	cmp	r2, #4
 80063ba:	d060      	beq.n	800647e <main+0x126>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	f002 020c 	and.w	r2, r2, #12
 80063c2:	2a08      	cmp	r2, #8
 80063c4:	d058      	beq.n	8006478 <main+0x120>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063c6:	4a41      	ldr	r2, [pc, #260]	; (80064cc <main+0x174>)
  return uwTick;
 80063c8:	4842      	ldr	r0, [pc, #264]	; (80064d4 <main+0x17c>)
 80063ca:	6813      	ldr	r3, [r2, #0]
 80063cc:	9007      	str	r0, [sp, #28]
 80063ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063d2:	6013      	str	r3, [r2, #0]
 80063d4:	6801      	ldr	r1, [r0, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063d6:	e003      	b.n	80063e0 <main+0x88>
 80063d8:	6803      	ldr	r3, [r0, #0]
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063da:	1a5b      	subs	r3, r3, r1
 80063dc:	2b64      	cmp	r3, #100	; 0x64
 80063de:	d849      	bhi.n	8006474 <main+0x11c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063e0:	6813      	ldr	r3, [r2, #0]
 80063e2:	039d      	lsls	r5, r3, #14
 80063e4:	d5f8      	bpl.n	80063d8 <main+0x80>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063e6:	4b39      	ldr	r3, [pc, #228]	; (80064cc <main+0x174>)
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	f002 020c 	and.w	r2, r2, #12
 80063ee:	2a08      	cmp	r2, #8
 80063f0:	d038      	beq.n	8006464 <main+0x10c>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063f2:	2100      	movs	r1, #0
 80063f4:	4a38      	ldr	r2, [pc, #224]	; (80064d8 <main+0x180>)
 80063f6:	6611      	str	r1, [r2, #96]	; 0x60
 80063f8:	9a07      	ldr	r2, [sp, #28]
 80063fa:	6811      	ldr	r1, [r2, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063fc:	e004      	b.n	8006408 <main+0xb0>
 80063fe:	9a07      	ldr	r2, [sp, #28]
 8006400:	6812      	ldr	r2, [r2, #0]
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006402:	1a52      	subs	r2, r2, r1
 8006404:	2a02      	cmp	r2, #2
 8006406:	d835      	bhi.n	8006474 <main+0x11c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	0194      	lsls	r4, r2, #6
 800640c:	d4f7      	bmi.n	80063fe <main+0xa6>

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800640e:	2001      	movs	r0, #1
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006410:	685a      	ldr	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8006412:	4931      	ldr	r1, [pc, #196]	; (80064d8 <main+0x180>)
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006414:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006418:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800641a:	685a      	ldr	r2, [r3, #4]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800641c:	4c2b      	ldr	r4, [pc, #172]	; (80064cc <main+0x174>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800641e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8006422:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8006426:	605a      	str	r2, [r3, #4]
 8006428:	9b07      	ldr	r3, [sp, #28]
        __HAL_RCC_PLL_ENABLE();
 800642a:	6608      	str	r0, [r1, #96]	; 0x60
 800642c:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800642e:	e004      	b.n	800643a <main+0xe2>
 8006430:	9b07      	ldr	r3, [sp, #28]
 8006432:	681b      	ldr	r3, [r3, #0]
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006434:	1a9b      	subs	r3, r3, r2
 8006436:	2b02      	cmp	r3, #2
 8006438:	d81c      	bhi.n	8006474 <main+0x11c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	0198      	lsls	r0, r3, #6
 800643e:	d5f7      	bpl.n	8006430 <main+0xd8>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006440:	4a1f      	ldr	r2, [pc, #124]	; (80064c0 <main+0x168>)
 8006442:	6813      	ldr	r3, [r2, #0]
 8006444:	f013 0f06 	tst.w	r3, #6
 8006448:	d11e      	bne.n	8006488 <main+0x130>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800644a:	6813      	ldr	r3, [r2, #0]
 800644c:	f023 0307 	bic.w	r3, r3, #7
 8006450:	f043 0302 	orr.w	r3, r3, #2
 8006454:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006456:	6813      	ldr	r3, [r2, #0]
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	2b02      	cmp	r3, #2
 800645e:	d013      	beq.n	8006488 <main+0x130>
  __ASM volatile ("cpsid i" : : : "memory");
 8006460:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8006462:	e7fe      	b.n	8006462 <main+0x10a>
        pll_config = RCC->CFGR;
 8006464:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006466:	03d9      	lsls	r1, r3, #15
 8006468:	d504      	bpl.n	8006474 <main+0x11c>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800646a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800646e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006472:	d0e5      	beq.n	8006440 <main+0xe8>
 8006474:	b672      	cpsid	i
 8006476:	e7fe      	b.n	8006476 <main+0x11e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	03de      	lsls	r6, r3, #15
 800647c:	d5a3      	bpl.n	80063c6 <main+0x6e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800647e:	4b13      	ldr	r3, [pc, #76]	; (80064cc <main+0x174>)
 8006480:	4a14      	ldr	r2, [pc, #80]	; (80064d4 <main+0x17c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	9207      	str	r2, [sp, #28]
 8006486:	e7ae      	b.n	80063e6 <main+0x8e>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006488:	4b10      	ldr	r3, [pc, #64]	; (80064cc <main+0x174>)
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006490:	605a      	str	r2, [r3, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8006498:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80064a0:	605a      	str	r2, [r3, #4]
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	0192      	lsls	r2, r2, #6
 80064a6:	d5db      	bpl.n	8006460 <main+0x108>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	9c07      	ldr	r4, [sp, #28]
 80064ac:	f022 0203 	bic.w	r2, r2, #3
 80064b0:	f042 0202 	orr.w	r2, r2, #2
 80064b4:	605a      	str	r2, [r3, #4]
    /* Get Start Tick */
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064b6:	f241 3088 	movw	r0, #5000	; 0x1388
 80064ba:	6821      	ldr	r1, [r4, #0]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064bc:	e012      	b.n	80064e4 <main+0x18c>
 80064be:	bf00      	nop
 80064c0:	40022000 	.word	0x40022000
 80064c4:	e000ed00 	.word	0xe000ed00
 80064c8:	05fa0300 	.word	0x05fa0300
 80064cc:	40021000 	.word	0x40021000
 80064d0:	40010000 	.word	0x40010000
 80064d4:	20000208 	.word	0x20000208
 80064d8:	42420000 	.word	0x42420000
 80064dc:	6822      	ldr	r2, [r4, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064de:	1a52      	subs	r2, r2, r1
 80064e0:	4282      	cmp	r2, r0
 80064e2:	d8bd      	bhi.n	8006460 <main+0x108>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	f002 020c 	and.w	r2, r2, #12
 80064ea:	2a08      	cmp	r2, #8
 80064ec:	d1f6      	bne.n	80064dc <main+0x184>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064ee:	4abb      	ldr	r2, [pc, #748]	; (80067dc <main+0x484>)
 80064f0:	6813      	ldr	r3, [r2, #0]
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d90a      	bls.n	8006510 <main+0x1b8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064fa:	6813      	ldr	r3, [r2, #0]
 80064fc:	f023 0307 	bic.w	r3, r3, #7
 8006500:	f043 0302 	orr.w	r3, r3, #2
 8006504:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006506:	6813      	ldr	r3, [r2, #0]
 8006508:	f003 0307 	and.w	r3, r3, #7
 800650c:	2b02      	cmp	r3, #2
 800650e:	d1a7      	bne.n	8006460 <main+0x108>

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006510:	4cb3      	ldr	r4, [pc, #716]	; (80067e0 <main+0x488>)
{
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006512:	4ab4      	ldr	r2, [pc, #720]	; (80067e4 <main+0x48c>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006514:	6863      	ldr	r3, [r4, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006516:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800651a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800651e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006522:	6063      	str	r3, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006524:	6863      	ldr	r3, [r4, #4]
 8006526:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800652a:	6063      	str	r3, [r4, #4]
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800652c:	f240 2301 	movw	r3, #513	; 0x201
 8006530:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006534:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8006536:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
  uint32_t sysclockfreq = 0U;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800653a:	6863      	ldr	r3, [r4, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800653c:	f003 020c 	and.w	r2, r3, #12
 8006540:	2a08      	cmp	r2, #8
 8006542:	f001 836d 	beq.w	8007c20 <main+0x18c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006546:	4da8      	ldr	r5, [pc, #672]	; (80067e8 <main+0x490>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006548:	2600      	movs	r6, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800654a:	4ca5      	ldr	r4, [pc, #660]	; (80067e0 <main+0x488>)
 800654c:	4aa7      	ldr	r2, [pc, #668]	; (80067ec <main+0x494>)
 800654e:	6863      	ldr	r3, [r4, #4]
 8006550:	f8df a29c 	ldr.w	sl, [pc, #668]	; 80067f0 <main+0x498>
 8006554:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006558:	4413      	add	r3, r2
 800655a:	f893 35e0 	ldrb.w	r3, [r3, #1504]	; 0x5e0
 800655e:	4fa5      	ldr	r7, [pc, #660]	; (80067f4 <main+0x49c>)
 8006560:	40dd      	lsrs	r5, r3
 8006562:	4ba5      	ldr	r3, [pc, #660]	; (80067f8 <main+0x4a0>)
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8006564:	f04f 0800 	mov.w	r8, #0
  HAL_InitTick(uwTickPrio);
 8006568:	6858      	ldr	r0, [r3, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800656a:	601d      	str	r5, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800656c:	f7fd fc44 	bl	8003df8 <HAL_InitTick.isra.0>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006570:	961a      	str	r6, [sp, #104]	; 0x68
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8006572:	69a3      	ldr	r3, [r4, #24]
 8006574:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8006578:	f043 0310 	orr.w	r3, r3, #16
 800657c:	61a3      	str	r3, [r4, #24]
 800657e:	69a3      	ldr	r3, [r4, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006580:	2202      	movs	r2, #2
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8006582:	f003 0310 	and.w	r3, r3, #16
 8006586:	930e      	str	r3, [sp, #56]	; 0x38
 8006588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800658a:	69a3      	ldr	r3, [r4, #24]
 800658c:	489b      	ldr	r0, [pc, #620]	; (80067fc <main+0x4a4>)
 800658e:	f043 0320 	orr.w	r3, r3, #32
 8006592:	61a3      	str	r3, [r4, #24]
 8006594:	69a3      	ldr	r3, [r4, #24]
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8006596:	f04f 0903 	mov.w	r9, #3
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	930d      	str	r3, [sp, #52]	; 0x34
 80065a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80065a2:	69a3      	ldr	r3, [r4, #24]
 80065a4:	f043 0304 	orr.w	r3, r3, #4
 80065a8:	61a3      	str	r3, [r4, #24]
 80065aa:	69a3      	ldr	r3, [r4, #24]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	930c      	str	r3, [sp, #48]	; 0x30
 80065b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80065b4:	69a3      	ldr	r3, [r4, #24]
 80065b6:	f043 0308 	orr.w	r3, r3, #8
 80065ba:	61a3      	str	r3, [r4, #24]
 80065bc:	69a3      	ldr	r3, [r4, #24]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80065c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065c6:	4b8e      	ldr	r3, [pc, #568]	; (8006800 <main+0x4a8>)
 80065c8:	6103      	str	r3, [r0, #16]
 80065ca:	4b8e      	ldr	r3, [pc, #568]	; (8006804 <main+0x4ac>)
 80065cc:	f8ca 1010 	str.w	r1, [sl, #16]
 80065d0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pin = LED_Pin;
 80065d2:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065d4:	921b      	str	r2, [sp, #108]	; 0x6c
	GPIO_InitStruct.Pin = LED_Pin;
 80065d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80065da:	4659      	mov	r1, fp
	GPIO_InitStruct.Pin = LED_Pin;
 80065dc:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80065e0:	f7fa ff72 	bl	80014c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 80065e4:	f24c 023f 	movw	r2, #49215	; 0xc03f
 80065e8:	2301      	movs	r3, #1
 80065ea:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
 80065ee:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065f2:	f7fa ff69 	bl	80014c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 80065f6:	22ff      	movs	r2, #255	; 0xff
 80065f8:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065fa:	4650      	mov	r0, sl
	GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 80065fc:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8006600:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006604:	f7fa ff60 	bl	80014c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8006608:	f640 4203 	movw	r2, #3075	; 0xc03
 800660c:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800660e:	4638      	mov	r0, r7
	GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8006610:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8006614:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006618:	f7fa ff56 	bl	80014c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 800661c:	2204      	movs	r2, #4
 800661e:	2300      	movs	r3, #0
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006620:	961a      	str	r6, [sp, #104]	; 0x68
	GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 8006622:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	HAL_GPIO_Init(SYSTEM_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8006626:	f7fa ff4f 	bl	80014c8 <HAL_GPIO_Init>
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800662a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800662e:	9a07      	ldr	r2, [sp, #28]
	hi2c1.Init.ClockSpeed = 400000;
 8006630:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8006808 <main+0x4b0>
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006634:	6153      	str	r3, [r2, #20]
	hi2c1.Init.ClockSpeed = 400000;
 8006636:	4b75      	ldr	r3, [pc, #468]	; (800680c <main+0x4b4>)
	hi2c1.Init.OwnAddress1 = 0;
 8006638:	e9c2 6603 	strd	r6, r6, [r2, #12]
	hi2c1.Init.ClockSpeed = 400000;
 800663c:	e9c2 8301 	strd	r8, r3, [r2, #4]
	hi2c1.Init.OwnAddress2 = 0;
 8006640:	e9c2 6606 	strd	r6, r6, [r2, #24]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006644:	e9c2 6608 	strd	r6, r6, [r2, #32]
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006648:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 800664c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8006650:	2a00      	cmp	r2, #0
 8006652:	f001 82c5 	beq.w	8007be0 <main+0x1888>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006656:	2324      	movs	r3, #36	; 0x24
 8006658:	9807      	ldr	r0, [sp, #28]
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800665a:	4961      	ldr	r1, [pc, #388]	; (80067e0 <main+0x488>)
 800665c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006660:	6843      	ldr	r3, [r0, #4]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006662:	6886      	ldr	r6, [r0, #8]
  __HAL_I2C_DISABLE(hi2c);
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	f022 0201 	bic.w	r2, r2, #1
 800666a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006672:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	684a      	ldr	r2, [r1, #4]
 800667e:	495b      	ldr	r1, [pc, #364]	; (80067ec <main+0x494>)
 8006680:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8006684:	440a      	add	r2, r1
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006686:	4962      	ldr	r1, [pc, #392]	; (8006810 <main+0x4b8>)
 8006688:	f892 25f0 	ldrb.w	r2, [r2, #1520]	; 0x5f0
 800668c:	428e      	cmp	r6, r1
 800668e:	bf94      	ite	ls
 8006690:	4960      	ldrls	r1, [pc, #384]	; (8006814 <main+0x4bc>)
 8006692:	4961      	ldrhi	r1, [pc, #388]	; (8006818 <main+0x4c0>)
 8006694:	fa25 f202 	lsr.w	r2, r5, r2
 8006698:	428a      	cmp	r2, r1
 800669a:	bf8c      	ite	hi
 800669c:	2100      	movhi	r1, #0
 800669e:	2101      	movls	r1, #1
 80066a0:	2900      	cmp	r1, #0
 80066a2:	f041 824b 	bne.w	8007b3c <main+0x17e4>
  freqrange = I2C_FREQRANGE(pclk1);
 80066a6:	495d      	ldr	r1, [pc, #372]	; (800681c <main+0x4c4>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066a8:	6858      	ldr	r0, [r3, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80066aa:	fbb2 f1f1 	udiv	r1, r2, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066ae:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80066b2:	4308      	orrs	r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066b4:	4c56      	ldr	r4, [pc, #344]	; (8006810 <main+0x4b8>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066b6:	6058      	str	r0, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066b8:	6a18      	ldr	r0, [r3, #32]
 80066ba:	42a6      	cmp	r6, r4
 80066bc:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80066c0:	f201 82c4 	bhi.w	8007c4c <main+0x18f4>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066c4:	3a01      	subs	r2, #1
 80066c6:	0076      	lsls	r6, r6, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066c8:	3101      	adds	r1, #1
 80066ca:	4301      	orrs	r1, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066cc:	fbb2 f2f6 	udiv	r2, r2, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066d0:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066d2:	f640 71fc 	movw	r1, #4092	; 0xffc
 80066d6:	69d8      	ldr	r0, [r3, #28]
 80066d8:	3201      	adds	r2, #1
 80066da:	f420 404f 	bic.w	r0, r0, #52992	; 0xcf00
 80066de:	420a      	tst	r2, r1
 80066e0:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80066e4:	f041 82f3 	bne.w	8007cce <main+0x1976>
 80066e8:	2204      	movs	r2, #4
 80066ea:	4302      	orrs	r2, r0
 80066ec:	61da      	str	r2, [r3, #28]
  hi2c->State = HAL_I2C_STATE_READY;
 80066ee:	2020      	movs	r0, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066f0:	2200      	movs	r2, #0
	huart1.Init.BaudRate = 115200;
 80066f2:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
	huart1.Init.Mode = UART_MODE_TX_RX;
 80066f6:	260c      	movs	r6, #12
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80066f8:	6819      	ldr	r1, [r3, #0]
 80066fa:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80066fe:	f021 0cc0 	bic.w	ip, r1, #192	; 0xc0
 8006702:	e9de 1408 	ldrd	r1, r4, [lr, #32]
 8006706:	4321      	orrs	r1, r4
 8006708:	ea41 010c 	orr.w	r1, r1, ip
 800670c:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800670e:	6899      	ldr	r1, [r3, #8]
 8006710:	f421 4c03 	bic.w	ip, r1, #33536	; 0x8300
 8006714:	f02c 0cff 	bic.w	ip, ip, #255	; 0xff
 8006718:	e9de 4104 	ldrd	r4, r1, [lr, #16]
 800671c:	4321      	orrs	r1, r4
 800671e:	ea41 010c 	orr.w	r1, r1, ip
 8006722:	6099      	str	r1, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006724:	68d9      	ldr	r1, [r3, #12]
 8006726:	f021 0cff 	bic.w	ip, r1, #255	; 0xff
 800672a:	e9de 1406 	ldrd	r1, r4, [lr, #24]
 800672e:	4321      	orrs	r1, r4
 8006730:	ea41 010c 	orr.w	r1, r1, ip
 8006734:	60d9      	str	r1, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 8006736:	6819      	ldr	r1, [r3, #0]
 8006738:	f041 0101 	orr.w	r1, r1, #1
 800673c:	6019      	str	r1, [r3, #0]
	huart1.Instance = USART1;
 800673e:	4b38      	ldr	r3, [pc, #224]	; (8006820 <main+0x4c8>)
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006740:	f8ce 2044 	str.w	r2, [lr, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006744:	f88e 0041 	strb.w	r0, [lr, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006748:	f8ce 2034 	str.w	r2, [lr, #52]	; 0x34
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800674c:	f88e 2042 	strb.w	r2, [lr, #66]	; 0x42
 8006750:	f8ce 306c 	str.w	r3, [lr, #108]	; 0x6c
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006754:	f89e 30a9 	ldrb.w	r3, [lr, #169]	; 0xa9
	huart1.Init.StopBits = UART_STOPBITS_1;
 8006758:	e9ce 221d 	strd	r2, r2, [lr, #116]	; 0x74
	huart1.Init.BaudRate = 115200;
 800675c:	f8ce 7070 	str.w	r7, [lr, #112]	; 0x70
	huart1.Init.Mode = UART_MODE_TX_RX;
 8006760:	f8ce 6080 	str.w	r6, [lr, #128]	; 0x80
	huart1.Init.Parity = UART_PARITY_NONE;
 8006764:	f8ce 207c 	str.w	r2, [lr, #124]	; 0x7c
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006768:	f8ce 2084 	str.w	r2, [lr, #132]	; 0x84
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800676c:	f8ce 2088 	str.w	r2, [lr, #136]	; 0x88
 8006770:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8006774:	2b00      	cmp	r3, #0
 8006776:	f001 82bf 	beq.w	8007cf8 <main+0x19a0>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800677a:	2324      	movs	r3, #36	; 0x24
 800677c:	9c07      	ldr	r4, [sp, #28]

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800677e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  huart->gState = HAL_UART_STATE_BUSY;
 8006780:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
  __HAL_UART_DISABLE(huart);
 8006784:	68d3      	ldr	r3, [r2, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006786:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8006788:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800678c:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800678e:	6913      	ldr	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006790:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006792:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006796:	430b      	orrs	r3, r1
 8006798:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800679a:	6f63      	ldr	r3, [r4, #116]	; 0x74
  MODIFY_REG(huart->Instance->CR1,
 800679c:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800679e:	4303      	orrs	r3, r0
 80067a0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
  MODIFY_REG(huart->Instance->CR1,
 80067a4:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80067a8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80067ac:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80067ae:	430b      	orrs	r3, r1
 80067b0:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067b2:	6953      	ldr	r3, [r2, #20]
 80067b4:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80067b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067bc:	430b      	orrs	r3, r1
 80067be:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80067c0:	4b17      	ldr	r3, [pc, #92]	; (8006820 <main+0x4c8>)
 80067c2:	429a      	cmp	r2, r3
 80067c4:	f001 828c 	beq.w	8007ce0 <main+0x1988>
 80067c8:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <main+0x488>)
 80067ca:	4908      	ldr	r1, [pc, #32]	; (80067ec <main+0x494>)
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80067d2:	440b      	add	r3, r1
 80067d4:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 80067d8:	e024      	b.n	8006824 <main+0x4cc>
 80067da:	bf00      	nop
 80067dc:	40022000 	.word	0x40022000
 80067e0:	40021000 	.word	0x40021000
 80067e4:	0801d250 	.word	0x0801d250
 80067e8:	007a1200 	.word	0x007a1200
 80067ec:	0800c8e0 	.word	0x0800c8e0
 80067f0:	40010800 	.word	0x40010800
 80067f4:	40010c00 	.word	0x40010c00
 80067f8:	20000000 	.word	0x20000000
 80067fc:	40011000 	.word	0x40011000
 8006800:	e03f0000 	.word	0xe03f0000
 8006804:	0c030000 	.word	0x0c030000
 8006808:	40005400 	.word	0x40005400
 800680c:	00061a80 	.word	0x00061a80
 8006810:	000186a0 	.word	0x000186a0
 8006814:	001e847f 	.word	0x001e847f
 8006818:	003d08ff 	.word	0x003d08ff
 800681c:	000f4240 	.word	0x000f4240
 8006820:	40013800 	.word	0x40013800
 8006824:	40dd      	lsrs	r5, r3
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006826:	2319      	movs	r3, #25
 8006828:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800682c:	fb03 f505 	mul.w	r5, r3, r5
 8006830:	f8dc 3070 	ldr.w	r3, [ip, #112]	; 0x70
 8006834:	2764      	movs	r7, #100	; 0x64
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	fbb5 f3f3 	udiv	r3, r5, r3
 800683c:	fbb3 f6f7 	udiv	r6, r3, r7
 8006840:	fb07 3316 	mls	r3, r7, r6, r3
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	3332      	adds	r3, #50	; 0x32
 8006848:	fbb3 f3f7 	udiv	r3, r3, r7
  huart->gState = HAL_UART_STATE_READY;
 800684c:	2120      	movs	r1, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800684e:	2400      	movs	r4, #0
 8006850:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006854:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8006858:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800685a:	6913      	ldr	r3, [r2, #16]
 800685c:	f8df 837c 	ldr.w	r8, [pc, #892]	; 8006bdc <main+0x884>
 8006860:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006864:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006866:	6953      	ldr	r3, [r2, #20]

void LCD_Init(void)
{	
	LCD_RST_R
	HAL_Delay(200);
 8006868:	20c8      	movs	r0, #200	; 0xc8
 800686a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800686e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8006870:	68d3      	ldr	r3, [r2, #12]
 8006872:	f8df a36c 	ldr.w	sl, [pc, #876]	; 8006be0 <main+0x888>
 8006876:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800687a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800687c:	f8cc 40ac 	str.w	r4, [ip, #172]	; 0xac
  huart->gState = HAL_UART_STATE_READY;
 8006880:	f88c 10a9 	strb.w	r1, [ip, #169]	; 0xa9
  huart->RxState = HAL_UART_STATE_READY;
 8006884:	f88c 10aa 	strb.w	r1, [ip, #170]	; 0xaa
 8006888:	f8c8 5010 	str.w	r5, [r8, #16]
 800688c:	f7f9 fc60 	bl	8000150 <HAL_Delay>
    GPIOx->BSRR = GPIO_Pin;
 8006890:	f44f 6300 	mov.w	r3, #2048	; 0x800
	LCD_RST_S
	
  LCD_Send_Cmd(HX8357_SLPOUT);
 8006894:	2011      	movs	r0, #17
 8006896:	f8c8 3010 	str.w	r3, [r8, #16]
 800689a:	f7f9 fc63 	bl	8000164 <LCD_Send_Cmd>
  HAL_Delay(120);
 800689e:	2078      	movs	r0, #120	; 0x78
 80068a0:	f7f9 fc56 	bl	8000150 <HAL_Delay>
	LCD_Send_Cmd(HX8357_COLMOD);
 80068a4:	203a      	movs	r0, #58	; 0x3a
 80068a6:	f7f9 fc5d 	bl	8000164 <LCD_Send_Cmd>
	LCD_Send_Dat(0x55);
 80068aa:	2055      	movs	r0, #85	; 0x55
 80068ac:	f7f9 fcba 	bl	8000224 <LCD_Send_Dat>
  HAL_Delay(5);
 80068b0:	2005      	movs	r0, #5
 80068b2:	f7f9 fc4d 	bl	8000150 <HAL_Delay>
  LCD_Send_Cmd(HX8357_DISPON);
 80068b6:	2029      	movs	r0, #41	; 0x29
 80068b8:	f7f9 fc54 	bl	8000164 <LCD_Send_Cmd>
	LCD_Orientation(DEFAULT_ORIENTATION);
}

void LCD_Orientation(uint8_t orientation)
{
	LCD_Send_Cmd(HX8357_MADCTL);
 80068bc:	2036      	movs	r0, #54	; 0x36
 80068be:	f7f9 fc51 	bl	8000164 <LCD_Send_Cmd>
	switch (orientation)
	{
	case 0:
	if (BGR) LCD_Send_Dat(MADCTL_BGR);
 80068c2:	2008      	movs	r0, #8
 80068c4:	f7f9 fcae 	bl	8000224 <LCD_Send_Dat>
	LCD_Window(y, x, y + h - 1, x + w - 1);
 80068c8:	f240 13df 	movw	r3, #479	; 0x1df
 80068cc:	4621      	mov	r1, r4
 80068ce:	4620      	mov	r0, r4
 80068d0:	f240 123f 	movw	r2, #319	; 0x13f
 80068d4:	f7f9 fd2e 	bl	8000334 <LCD_Window>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80068d8:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80068dc:	f44f 3c16 	mov.w	ip, #153600	; 0x25800
 80068e0:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 80068e4:	4bbf      	ldr	r3, [pc, #764]	; (8006be4 <main+0x88c>)
    GPIOx->BSRR = GPIO_Pin;
 80068e6:	2201      	movs	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80068e8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80068ec:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80068f0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80068f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80068f8:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80068fc:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 8006900:	f8c8 2010 	str.w	r2, [r8, #16]
 8006904:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 8006908:	611d      	str	r5, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800690a:	2220      	movs	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800690c:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800690e:	2640      	movs	r6, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006910:	f8ca 4010 	str.w	r4, [sl, #16]
 8006914:	f8ca 1010 	str.w	r1, [sl, #16]
 8006918:	f8ca 5010 	str.w	r5, [sl, #16]
 800691c:	f8ca 0010 	str.w	r0, [sl, #16]
 8006920:	f8ca 9010 	str.w	r9, [sl, #16]
 8006924:	f8ca e010 	str.w	lr, [sl, #16]
 8006928:	6119      	str	r1, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800692a:	2180      	movs	r1, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800692c:	611c      	str	r4, [r3, #16]
 800692e:	611f      	str	r7, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8006930:	611a      	str	r2, [r3, #16]
 8006932:	611e      	str	r6, [r3, #16]
 8006934:	6119      	str	r1, [r3, #16]
 8006936:	2110      	movs	r1, #16
 8006938:	f8ca 1010 	str.w	r1, [sl, #16]
 800693c:	f8ca 2010 	str.w	r2, [sl, #16]
 8006940:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006942:	f8c8 5010 	str.w	r5, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8006946:	f8c8 2010 	str.w	r2, [r8, #16]
 800694a:	f44f 6280 	mov.w	r2, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 800694e:	f1bc 0c01 	subs.w	ip, ip, #1
 8006952:	f8c8 2010 	str.w	r2, [r8, #16]
 8006956:	d1c6      	bne.n	80068e6 <main+0x58e>
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8006958:	2101      	movs	r1, #1
 800695a:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 800695e:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8006962:	4608      	mov	r0, r1
 8006964:	f7f9 fce6 	bl	8000334 <LCD_Window>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006968:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 800696c:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 8006970:	4e9d      	ldr	r6, [pc, #628]	; (8006be8 <main+0x890>)
    GPIOx->BSRR = GPIO_Pin;
 8006972:	f8df a268 	ldr.w	sl, [pc, #616]	; 8006bdc <main+0x884>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006976:	4a9b      	ldr	r2, [pc, #620]	; (8006be4 <main+0x88c>)
 8006978:	4b99      	ldr	r3, [pc, #612]	; (8006be0 <main+0x888>)
    GPIOx->BSRR = GPIO_Pin;
 800697a:	2101      	movs	r1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800697c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8006980:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006984:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8006988:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800698c:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8006990:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8006994:	f8ca 1010 	str.w	r1, [sl, #16]
 8006998:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800699c:	f8c2 c010 	str.w	ip, [r2, #16]
 80069a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069a4:	6115      	str	r5, [r2, #16]
 80069a6:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 80069aa:	611f      	str	r7, [r3, #16]
 80069ac:	611c      	str	r4, [r3, #16]
 80069ae:	f8c3 c010 	str.w	ip, [r3, #16]
 80069b2:	611d      	str	r5, [r3, #16]
 80069b4:	f8c3 9010 	str.w	r9, [r3, #16]
 80069b8:	f8c3 8010 	str.w	r8, [r3, #16]
 80069bc:	6114      	str	r4, [r2, #16]
 80069be:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 80069c2:	6117      	str	r7, [r2, #16]
 80069c4:	6110      	str	r0, [r2, #16]
 80069c6:	6111      	str	r1, [r2, #16]
 80069c8:	f8c2 e010 	str.w	lr, [r2, #16]
 80069cc:	6114      	str	r4, [r2, #16]
 80069ce:	6118      	str	r0, [r3, #16]
 80069d0:	6119      	str	r1, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80069d2:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80069d4:	f8ca c010 	str.w	ip, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80069d8:	f8ca 1010 	str.w	r1, [sl, #16]
 80069dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80069e0:	3e01      	subs	r6, #1
 80069e2:	f8ca 1010 	str.w	r1, [sl, #16]
 80069e6:	d1c8      	bne.n	800697a <main+0x622>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_36, 1, RED);
 80069e8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80069ec:	217f      	movs	r1, #127	; 0x7f
 80069ee:	2014      	movs	r0, #20
 80069f0:	4a7e      	ldr	r2, [pc, #504]	; (8006bec <main+0x894>)
 80069f2:	f7fe fc4f 	bl	8005294 <LCD_Font.constprop.3>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_36, 1, BLACK);
 80069f6:	217f      	movs	r1, #127	; 0x7f
 80069f8:	2014      	movs	r0, #20
 80069fa:	4a7c      	ldr	r2, [pc, #496]	; (8006bec <main+0x894>)
 80069fc:	f7fd fac8 	bl	8003f90 <LCD_Font.constprop.2>
	LCD_Font(20, 127, "Waiting for I2C devices", &DejaVu_Sans_36, 1, RED);
 8006a00:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8006a04:	217f      	movs	r1, #127	; 0x7f
 8006a06:	2014      	movs	r0, #20
 8006a08:	4a79      	ldr	r2, [pc, #484]	; (8006bf0 <main+0x898>)
 8006a0a:	4634      	mov	r4, r6
 8006a0c:	f7fe fc42 	bl	8005294 <LCD_Font.constprop.3>
 8006a10:	4d78      	ldr	r5, [pc, #480]	; (8006bf4 <main+0x89c>)
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8006a12:	b2a0      	uxth	r0, r4
 8006a14:	4659      	mov	r1, fp
    uint16_t dt[1] = {0};
 8006a16:	f8ad 6060 	strh.w	r6, [sp, #96]	; 0x60
	for (uint16_t i = 0; i < 4096; i++) eeprom[i] = AT24XX_Read(i);
 8006a1a:	3401      	adds	r4, #1
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8006a1c:	f7fc faf4 	bl	8003008 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8006a20:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8006a24:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8006a28:	f805 3f01 	strb.w	r3, [r5, #1]!
 8006a2c:	d1f1      	bne.n	8006a12 <main+0x6ba>
	LCD_Font(20, 127, "Waiting for I2C devices", &DejaVu_Sans_36, 1, BLACK);
 8006a2e:	217f      	movs	r1, #127	; 0x7f
 8006a30:	2014      	movs	r0, #20
 8006a32:	4a6f      	ldr	r2, [pc, #444]	; (8006bf0 <main+0x898>)
 8006a34:	f7fd faac 	bl	8003f90 <LCD_Font.constprop.2>
}

void BME280_Init(void) {
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 8006a38:	f240 53f2 	movw	r3, #1522	; 0x5f2
    cmd[1] = 0x05; // Humidity oversampling x16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	4659      	mov	r1, fp
 8006a40:	20ec      	movs	r0, #236	; 0xec
    cmd[0] = 0xF2; // ctrl_hum
 8006a42:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006a46:	f7fd f829 	bl	8003a9c <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF4; // ctrl_meas
 8006a4a:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006a4e:	2202      	movs	r2, #2
 8006a50:	4659      	mov	r1, fp
 8006a52:	20ec      	movs	r0, #236	; 0xec
    cmd[0] = 0xF4; // ctrl_meas
 8006a54:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006a58:	f7fd f820 	bl	8003a9c <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF5; // config
 8006a5c:	f24a 03f5 	movw	r3, #41205	; 0xa0f5
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006a60:	2202      	movs	r2, #2
 8006a62:	4659      	mov	r1, fp
 8006a64:	20ec      	movs	r0, #236	; 0xec
    cmd[0] = 0xF5; // config
 8006a66:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8006a6a:	f7fd f817 	bl	8003a9c <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0x88; // read dig_T regs
 8006a6e:	2388      	movs	r3, #136	; 0x88
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006a70:	2201      	movs	r2, #1
 8006a72:	4659      	mov	r1, fp
 8006a74:	20ec      	movs	r0, #236	; 0xec
    cmd[0] = 0x88; // read dig_T regs
 8006a76:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006a7a:	f7fd f80f 	bl	8003a9c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 8006a7e:	2206      	movs	r2, #6
 8006a80:	4659      	mov	r1, fp
 8006a82:	20ec      	movs	r0, #236	; 0xec
 8006a84:	f7fc fdf8 	bl	8003678 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_T1 = (cmd[1] << 8) | cmd[0];
    dig_T2 = (cmd[3] << 8) | cmd[2];
    dig_T3 = (cmd[5] << 8) | cmd[4];

    cmd[0] = 0x8E; // read dig_P regs
 8006a88:	238e      	movs	r3, #142	; 0x8e
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8006a8a:	9d07      	ldr	r5, [sp, #28]
 8006a8c:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
    cmd[0] = 0x8E; // read dig_P regs
 8006a90:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8006a94:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006a98:	4659      	mov	r1, fp
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8006a9a:	f8a5 30b2 	strh.w	r3, [r5, #178]	; 0xb2
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8006a9e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006aa2:	20ec      	movs	r0, #236	; 0xec
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8006aa4:	f8a5 20b0 	strh.w	r2, [r5, #176]	; 0xb0
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006aa8:	2201      	movs	r2, #1
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8006aaa:	f8a5 30b4 	strh.w	r3, [r5, #180]	; 0xb4
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006aae:	f7fc fff5 	bl	8003a9c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 8006ab2:	2212      	movs	r2, #18
 8006ab4:	4659      	mov	r1, fp
 8006ab6:	20ec      	movs	r0, #236	; 0xec
 8006ab8:	f7fc fdde 	bl	8003678 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    dig_P6 = (cmd[11] << 8) | cmd[10];
    dig_P7 = (cmd[13] << 8) | cmd[12];
    dig_P8 = (cmd[15] << 8) | cmd[14];
    dig_P9 = (cmd[17] << 8) | cmd[16];

    cmd[0] = 0xA1; // read dig_H regs
 8006abc:	23a1      	movs	r3, #161	; 0xa1
    dig_P1 = (cmd[1] << 8) | cmd[0];
 8006abe:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
    cmd[0] = 0xA1; // read dig_H regs
 8006ac2:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8006ac6:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006aca:	4659      	mov	r1, fp
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8006acc:	f8a5 30b8 	strh.w	r3, [r5, #184]	; 0xb8
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8006ad0:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006ad4:	20ec      	movs	r0, #236	; 0xec
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8006ad6:	f8a5 30ba 	strh.w	r3, [r5, #186]	; 0xba
    dig_P4 = (cmd[7] << 8) | cmd[6];
 8006ada:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    dig_P1 = (cmd[1] << 8) | cmd[0];
 8006ade:	f8a5 20b6 	strh.w	r2, [r5, #182]	; 0xb6
    dig_P4 = (cmd[7] << 8) | cmd[6];
 8006ae2:	f8a5 30bc 	strh.w	r3, [r5, #188]	; 0xbc
    dig_P5 = (cmd[9] << 8) | cmd[8];
 8006ae6:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006aea:	2201      	movs	r2, #1
    dig_P5 = (cmd[9] << 8) | cmd[8];
 8006aec:	f8a5 30be 	strh.w	r3, [r5, #190]	; 0xbe
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8006af0:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
	uint8_t uartTransmit[] = "UART OK\r\n";
 8006af4:	af15      	add	r7, sp, #84	; 0x54
 8006af6:	f8a5 30c0 	strh.w	r3, [r5, #192]	; 0xc0
    dig_P7 = (cmd[13] << 8) | cmd[12];
 8006afa:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8006afe:	f8a5 30c2 	strh.w	r3, [r5, #194]	; 0xc2
    dig_P8 = (cmd[15] << 8) | cmd[14];
 8006b02:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 8006b06:	f8a5 30c4 	strh.w	r3, [r5, #196]	; 0xc4
    dig_P9 = (cmd[17] << 8) | cmd[16];
 8006b0a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8006b0e:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006b12:	f7fc ffc3 	bl	8003a9c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006b16:	2201      	movs	r2, #1
 8006b18:	4659      	mov	r1, fp
 8006b1a:	20ec      	movs	r0, #236	; 0xec
 8006b1c:	f7fc fdac 	bl	8003678 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    cmd[1] = 0xE1; // read dig_H regs
 8006b20:	23e1      	movs	r3, #225	; 0xe1

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8006b22:	2201      	movs	r2, #1
 8006b24:	20ec      	movs	r0, #236	; 0xec
 8006b26:	f10d 0161 	add.w	r1, sp, #97	; 0x61
    cmd[1] = 0xE1; // read dig_H regs
 8006b2a:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8006b2e:	f7fc ffb5 	bl	8003a9c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 8006b32:	2207      	movs	r2, #7
 8006b34:	20ec      	movs	r0, #236	; 0xec
 8006b36:	f10d 0161 	add.w	r1, sp, #97	; 0x61
 8006b3a:	f7fc fd9d 	bl	8003678 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_H1 = cmd[0];
 8006b3e:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    dig_H2 = (cmd[2] << 8) | cmd[1];
    dig_H3 = cmd[3];
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8006b42:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
    dig_H1 = cmd[0];
 8006b46:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
    dig_H2 = (cmd[2] << 8) | cmd[1];
 8006b4a:	f8bd 2061 	ldrh.w	r2, [sp, #97]	; 0x61
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8006b4e:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
    dig_H2 = (cmd[2] << 8) | cmd[1];
 8006b52:	f8a5 20ca 	strh.w	r2, [r5, #202]	; 0xca
    dig_H3 = cmd[3];
 8006b56:	f89d 2063 	ldrb.w	r2, [sp, #99]	; 0x63
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8006b5a:	f89d 1066 	ldrb.w	r1, [sp, #102]	; 0x66
    dig_H3 = cmd[3];
 8006b5e:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
    dig_H6 = cmd[7];
 8006b62:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 8006b66:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8006b6a:	f003 020f 	and.w	r2, r3, #15
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8006b6e:	091b      	lsrs	r3, r3, #4
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8006b70:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8006b74:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8006b78:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8006b7c:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
	DS3231_Update();
 8006b80:	f7fd f8c0 	bl	8003d04 <DS3231_Update>
	uint8_t uartTransmit[] = "UART OK\r\n";
 8006b84:	463b      	mov	r3, r7
 8006b86:	4a1c      	ldr	r2, [pc, #112]	; (8006bf8 <main+0x8a0>)
  if (huart->gState == HAL_UART_STATE_READY)
 8006b88:	f895 40a9 	ldrb.w	r4, [r5, #169]	; 0xa9
 8006b8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8006b8e:	c303      	stmia	r3!, {r0, r1}
 8006b90:	2c20      	cmp	r4, #32
 8006b92:	801a      	strh	r2, [r3, #0]
 8006b94:	f040 8666 	bne.w	8007864 <main+0x150c>
    __HAL_LOCK(huart);
 8006b98:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	f000 8661 	beq.w	8007864 <main+0x150c>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ba2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba4:	f8c5 60ac 	str.w	r6, [r5, #172]	; 0xac
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ba8:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
    huart->TxXferSize = Size;
 8006bac:	230a      	movs	r3, #10
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bae:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 8006bb0:	682c      	ldr	r4, [r5, #0]
 8006bb2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferSize = Size;
 8006bb6:	f8a5 3090 	strh.w	r3, [r5, #144]	; 0x90
    huart->TxXferCount = Size;
 8006bba:	f8a5 3092 	strh.w	r3, [r5, #146]	; 0x92
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bbe:	f001 80d3 	beq.w	8007d68 <main+0x1a10>
      pdata16bits = NULL;
 8006bc2:	2500      	movs	r5, #0
    __HAL_UNLOCK(huart);
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	9807      	ldr	r0, [sp, #28]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc8:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
    __HAL_UNLOCK(huart);
 8006bca:	f880 30a8 	strb.w	r3, [r0, #168]	; 0xa8
    while (huart->TxXferCount > 0U)
 8006bce:	f8b0 3092 	ldrh.w	r3, [r0, #146]	; 0x92
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	b9bb      	cbnz	r3, 8006c06 <main+0x8ae>
 8006bd6:	f000 beb9 	b.w	800794c <main+0x15f4>
 8006bda:	bf00      	nop
 8006bdc:	40010c00 	.word	0x40010c00
 8006be0:	40011000 	.word	0x40011000
 8006be4:	40010800 	.word	0x40010800
 8006be8:	000251c4 	.word	0x000251c4
 8006bec:	0801d1d0 	.word	0x0801d1d0
 8006bf0:	0801d1e0 	.word	0x0801d1e0
 8006bf4:	200006cf 	.word	0x200006cf
 8006bf8:	0801d264 	.word	0x0801d264
 8006bfc:	6803      	ldr	r3, [r0, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006bfe:	1b1b      	subs	r3, r3, r4
 8006c00:	2b64      	cmp	r3, #100	; 0x64
 8006c02:	f200 878a 	bhi.w	8007b1a <main+0x17c2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c06:	680a      	ldr	r2, [r1, #0]
 8006c08:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8006c0c:	d0f6      	beq.n	8006bfc <main+0x8a4>
      if (pdata8bits == NULL)
 8006c0e:	2f00      	cmp	r7, #0
 8006c10:	f000 87d7 	beq.w	8007bc2 <main+0x186a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c14:	f817 3b01 	ldrb.w	r3, [r7], #1
 8006c18:	604b      	str	r3, [r1, #4]
      huart->TxXferCount--;
 8006c1a:	f8b0 3092 	ldrh.w	r3, [r0, #146]	; 0x92
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	f8a0 3092 	strh.w	r3, [r0, #146]	; 0x92
 8006c26:	e7d2      	b.n	8006bce <main+0x876>
    cmd[0] = 0xFA; // temp_msb
 8006c28:	23fa      	movs	r3, #250	; 0xfa
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	4659      	mov	r1, fp
 8006c2e:	20ec      	movs	r0, #236	; 0xec
    cmd[0] = 0xFA; // temp_msb
 8006c30:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006c34:	f7fc ff32 	bl	8003a9c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8006c38:	2203      	movs	r2, #3
 8006c3a:	20ec      	movs	r0, #236	; 0xec
 8006c3c:	f10d 0161 	add.w	r1, sp, #97	; 0x61
 8006c40:	f7fc fd1a 	bl	8003678 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8006c44:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8006c48:	f8dd 801c 	ldr.w	r8, [sp, #28]
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8006c4c:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 8006c50:	011b      	lsls	r3, r3, #4
 8006c52:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006c56:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8006c5a:	f8b8 20b0 	ldrh.w	r2, [r8, #176]	; 0xb0
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8006c5e:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8006c62:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
 8006c66:	fb03 f303 	mul.w	r3, r3, r3
 8006c6a:	0b1e      	lsrs	r6, r3, #12
 8006c6c:	f9b8 30b4 	ldrsh.w	r3, [r8, #180]	; 0xb4
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8006c70:	0052      	lsls	r2, r2, #1
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8006c72:	fb03 f606 	mul.w	r6, r3, r6
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8006c76:	f9b8 30b2 	ldrsh.w	r3, [r8, #178]	; 0xb2
 8006c7a:	ebc2 02d1 	rsb	r2, r2, r1, lsr #3
 8006c7e:	fb02 f303 	mul.w	r3, r2, r3
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8006c82:	0bb6      	lsrs	r6, r6, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8006c84:	eb06 26d3 	add.w	r6, r6, r3, lsr #11
    temp = (temp * 5 + 128) >> 8;
 8006c88:	eb06 0086 	add.w	r0, r6, r6, lsl #2
 8006c8c:	3080      	adds	r0, #128	; 0x80
    t_fine = temp;
 8006c8e:	f8c8 60dc 	str.w	r6, [r8, #220]	; 0xdc
    tempf = (float) temp;
 8006c92:	1200      	asrs	r0, r0, #8
 8006c94:	f7ff faea 	bl	800626c <__aeabi_i2f>
    return round_nth((tempf / 100.0f), n);
 8006c98:	49d5      	ldr	r1, [pc, #852]	; (8006ff0 <main+0xc98>)
 8006c9a:	f7ff f979 	bl	8005f90 <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8006c9e:	f7fe fd29 	bl	80056f4 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	4bd3      	ldr	r3, [pc, #844]	; (8006ff4 <main+0xc9c>)
 8006ca6:	f7fe fd7d 	bl	80057a4 <__aeabi_dmul>
 8006caa:	2200      	movs	r2, #0
 8006cac:	4bd2      	ldr	r3, [pc, #840]	; (8006ff8 <main+0xca0>)
 8006cae:	f7fe fbc3 	bl	8005438 <__adddf3>
 8006cb2:	f005 fd89 	bl	800c7c8 <floor>
 8006cb6:	a3cc      	add	r3, pc, #816	; (adr r3, 8006fe8 <main+0xc90>)
 8006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbc:	f7fe fd72 	bl	80057a4 <__aeabi_dmul>
 8006cc0:	f7ff f868 	bl	8005d94 <__aeabi_d2f>
 8006cc4:	4607      	mov	r7, r0
	temperature = BME280_getTemperature(-1);
 8006cc6:	f7fe fd15 	bl	80056f4 <__aeabi_f2d>
    cmd[0] = 0xFD; // hum_msb
 8006cca:	23fd      	movs	r3, #253	; 0xfd
 8006ccc:	4604      	mov	r4, r0
 8006cce:	460d      	mov	r5, r1
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	4659      	mov	r1, fp
 8006cd4:	20ec      	movs	r0, #236	; 0xec
    cmd[0] = 0xFD; // hum_msb
 8006cd6:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8006cda:	e9c8 4538 	strd	r4, r5, [r8, #224]	; 0xe0
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006cde:	f7fc fedd 	bl	8003a9c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	20ec      	movs	r0, #236	; 0xec
 8006ce6:	f10d 0161 	add.w	r1, sp, #97	; 0x61
 8006cea:	f7fc fcc5 	bl	8003678 <HAL_I2C_Master_Receive.constprop.0.isra.0>
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8006cee:	f8b8 30cc 	ldrh.w	r3, [r8, #204]	; 0xcc
    v_x1 = t_fine - 76800;
 8006cf2:	f5a6 3296 	sub.w	r2, r6, #76800	; 0x12c00
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8006cf6:	f9b8 10d2 	ldrsh.w	r1, [r8, #210]	; 0xd2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8006cfa:	fb02 f303 	mul.w	r3, r2, r3
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8006cfe:	fb02 f101 	mul.w	r1, r2, r1
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8006d02:	12db      	asrs	r3, r3, #11
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8006d04:	1289      	asrs	r1, r1, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8006d06:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8006d0a:	fb01 f303 	mul.w	r3, r1, r3
    hum_raw = (cmd[1] << 8) | cmd[2];
 8006d0e:	f8bd 1061 	ldrh.w	r1, [sp, #97]	; 0x61
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8006d12:	129b      	asrs	r3, r3, #10
    hum_raw = (cmd[1] << 8) | cmd[2];
 8006d14:	ba49      	rev16	r1, r1
 8006d16:	b288      	uxth	r0, r1
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8006d18:	f9b8 10ce 	ldrsh.w	r1, [r8, #206]	; 0xce
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8006d1c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8006d20:	0509      	lsls	r1, r1, #20
 8006d22:	ebc1 3180 	rsb	r1, r1, r0, lsl #14
                                            (int32_t) dig_H2 + 8192) >> 14));
 8006d26:	f9b8 00ca 	ldrsh.w	r0, [r8, #202]	; 0xca
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8006d2a:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8006d2e:	fb00 f303 	mul.w	r3, r0, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8006d32:	f9b8 00d0 	ldrsh.w	r0, [r8, #208]	; 0xd0
                                            (int32_t) dig_H2 + 8192) >> 14));
 8006d36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8006d3a:	fb02 1210 	mls	r2, r2, r0, r1
                                            (int32_t) dig_H2 + 8192) >> 14));
 8006d3e:	139b      	asrs	r3, r3, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8006d40:	0bd2      	lsrs	r2, r2, #15
 8006d42:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8006d46:	13da      	asrs	r2, r3, #15
 8006d48:	fb02 f202 	mul.w	r2, r2, r2
 8006d4c:	f8b8 10c8 	ldrh.w	r1, [r8, #200]	; 0xc8
 8006d50:	11d0      	asrs	r0, r2, #7
 8006d52:	fb01 f000 	mul.w	r0, r1, r0
 8006d56:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 8006d5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 8006d5e:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 8006d62:	bfa8      	it	ge
 8006d64:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
    humf = (float) (v_x1 >> 12);
 8006d68:	1300      	asrs	r0, r0, #12
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8006d6a:	f8cd 801c 	str.w	r8, [sp, #28]
    humf = (float) (v_x1 >> 12);
 8006d6e:	f7ff fa7d 	bl	800626c <__aeabi_i2f>
    return round_nth((humf / 1024.0f), n);
 8006d72:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 8006d76:	f7ff f90b 	bl	8005f90 <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8006d7a:	f7fe fcbb 	bl	80056f4 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8006d7e:	2200      	movs	r2, #0
 8006d80:	4b9c      	ldr	r3, [pc, #624]	; (8006ff4 <main+0xc9c>)
 8006d82:	f7fe fd0f 	bl	80057a4 <__aeabi_dmul>
 8006d86:	2200      	movs	r2, #0
 8006d88:	4b9b      	ldr	r3, [pc, #620]	; (8006ff8 <main+0xca0>)
 8006d8a:	f7fe fb55 	bl	8005438 <__adddf3>
 8006d8e:	f005 fd1b 	bl	800c7c8 <floor>
 8006d92:	a395      	add	r3, pc, #596	; (adr r3, 8006fe8 <main+0xc90>)
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	f7fe fd04 	bl	80057a4 <__aeabi_dmul>
 8006d9c:	f7fe fffa 	bl	8005d94 <__aeabi_d2f>
 8006da0:	4682      	mov	sl, r0
	humidity = BME280_getHumidity(-1);
 8006da2:	f7fe fca7 	bl	80056f4 <__aeabi_f2d>
    cmd[0] = 0xF7; // press_msb
 8006da6:	23f7      	movs	r3, #247	; 0xf7
 8006da8:	4680      	mov	r8, r0
 8006daa:	4689      	mov	r9, r1
 8006dac:	f8dd c01c 	ldr.w	ip, [sp, #28]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006db0:	2201      	movs	r2, #1
 8006db2:	4659      	mov	r1, fp
 8006db4:	20ec      	movs	r0, #236	; 0xec
 8006db6:	e9cc 893a 	strd	r8, r9, [ip, #232]	; 0xe8
    cmd[0] = 0xF7; // press_msb
 8006dba:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8006dbe:	f7fc fe6d 	bl	8003a9c <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8006dc2:	2203      	movs	r2, #3
 8006dc4:	20ec      	movs	r0, #236	; 0xec
 8006dc6:	f10d 0161 	add.w	r1, sp, #97	; 0x61
 8006dca:	f7fc fc55 	bl	8003678 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    var1 = (t_fine >> 1) - 64000;
 8006dce:	1072      	asrs	r2, r6, #1
 8006dd0:	f5a2 427a 	sub.w	r2, r2, #64000	; 0xfa00
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8006dd4:	1091      	asrs	r1, r2, #2
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 8006dd6:	f8dd c01c 	ldr.w	ip, [sp, #28]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8006dda:	fb01 f101 	mul.w	r1, r1, r1
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 8006dde:	f9bc 30b8 	ldrsh.w	r3, [ip, #184]	; 0xb8
 8006de2:	f9bc 00ba 	ldrsh.w	r0, [ip, #186]	; 0xba
 8006de6:	fb02 f303 	mul.w	r3, r2, r3
 8006dea:	134e      	asrs	r6, r1, #13
 8006dec:	fb06 f000 	mul.w	r0, r6, r0
 8006df0:	105b      	asrs	r3, r3, #1
 8006df2:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8006df6:	149b      	asrs	r3, r3, #18
    var1 = ((32768 + var1) * dig_P1) >> 15;
 8006df8:	f8bc 00b6 	ldrh.w	r0, [ip, #182]	; 0xb6
 8006dfc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006e00:	fb00 f303 	mul.w	r3, r0, r3
    if (var1 == 0) {
 8006e04:	13db      	asrs	r3, r3, #15
 8006e06:	f000 8685 	beq.w	8007b14 <main+0x17bc>
    var2 = var2 + ((var1 * dig_P5) << 1);
 8006e0a:	f9bc 00be 	ldrsh.w	r0, [ip, #190]	; 0xbe
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8006e0e:	12c9      	asrs	r1, r1, #11
    var2 = var2 + ((var1 * dig_P5) << 1);
 8006e10:	fb00 f202 	mul.w	r2, r0, r2
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8006e14:	f9bc 00c0 	ldrsh.w	r0, [ip, #192]	; 0xc0
    var2 = var2 + ((var1 * dig_P5) << 1);
 8006e18:	0052      	lsls	r2, r2, #1
 8006e1a:	fb00 2001 	mla	r0, r0, r1, r2
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8006e1e:	f89d 2063 	ldrb.w	r2, [sp, #99]	; 0x63
 8006e22:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8006e26:	0912      	lsrs	r2, r2, #4
 8006e28:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8006e2c:	f9bc 10bc 	ldrsh.w	r1, [ip, #188]	; 0xbc
 8006e30:	4666      	mov	r6, ip
 8006e32:	0409      	lsls	r1, r1, #16
 8006e34:	eb01 01a0 	add.w	r1, r1, r0, asr #2
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8006e38:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
 8006e3c:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 8006e40:	eb02 3221 	add.w	r2, r2, r1, asr #12
 8006e44:	496d      	ldr	r1, [pc, #436]	; (8006ffc <main+0xca4>)
 8006e46:	fb01 f202 	mul.w	r2, r1, r2
 8006e4a:	f102 4243 	add.w	r2, r2, #3271557120	; 0xc3000000
 8006e4e:	f502 02a0 	add.w	r2, r2, #5242880	; 0x500000
    if (press < 0x80000000) {
 8006e52:	2a00      	cmp	r2, #0
        press = (press / var1) * 2;
 8006e54:	bfb3      	iteet	lt
 8006e56:	fbb2 f3f3 	udivlt	r3, r2, r3
        press = (press << 1) / var1;
 8006e5a:	0052      	lslge	r2, r2, #1
 8006e5c:	fbb2 f3f3 	udivge	r3, r2, r3
        press = (press / var1) * 2;
 8006e60:	005b      	lsllt	r3, r3, #1
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8006e62:	08da      	lsrs	r2, r3, #3
 8006e64:	fb02 f202 	mul.w	r2, r2, r2
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8006e68:	f9bc 10c4 	ldrsh.w	r1, [ip, #196]	; 0xc4
 8006e6c:	0898      	lsrs	r0, r3, #2
 8006e6e:	fb01 f000 	mul.w	r0, r1, r0
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8006e72:	f9bc 10c6 	ldrsh.w	r1, [ip, #198]	; 0xc6
 8006e76:	0b52      	lsrs	r2, r2, #13
 8006e78:	fb01 f202 	mul.w	r2, r1, r2
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8006e7c:	1340      	asrs	r0, r0, #13
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8006e7e:	eb00 3022 	add.w	r0, r0, r2, asr #12
 8006e82:	f9bc 20c2 	ldrsh.w	r2, [ip, #194]	; 0xc2
 8006e86:	4410      	add	r0, r2
    pressf = (float) press;
 8006e88:	eb03 1020 	add.w	r0, r3, r0, asr #4
 8006e8c:	f7ff f9ea 	bl	8006264 <__aeabi_ui2f>
    return (pressf / 100.0f);
 8006e90:	4957      	ldr	r1, [pc, #348]	; (8006ff0 <main+0xc98>)
 8006e92:	f7ff f87d 	bl	8005f90 <__aeabi_fmul>
	pressure = (uint16_t)BME280_getPressure();
 8006e96:	f7ff fa3d 	bl	8006314 <__aeabi_f2uiz>
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8006e9a:	f46f 7c96 	mvn.w	ip, #300	; 0x12c
 8006e9e:	f240 321e 	movw	r2, #798	; 0x31e
	pressure = (uint16_t)BME280_getPressure();
 8006ea2:	b283      	uxth	r3, r0
 8006ea4:	f8a6 30f0 	strh.w	r3, [r6, #240]	; 0xf0
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8006ea8:	4463      	add	r3, ip
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	4293      	cmp	r3, r2
 8006eae:	f200 828a 	bhi.w	80073c6 <main+0x106e>
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	4952      	ldr	r1, [pc, #328]	; (8007000 <main+0xca8>)
 8006eb6:	f7ff f80b 	bl	8005ed0 <__aeabi_fcmplt>
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	f000 8283 	beq.w	80073c6 <main+0x106e>
 8006ec0:	4638      	mov	r0, r7
 8006ec2:	4950      	ldr	r1, [pc, #320]	; (8007004 <main+0xcac>)
 8006ec4:	f7ff f822 	bl	8005f0c <__aeabi_fcmpgt>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	f000 827c 	beq.w	80073c6 <main+0x106e>
 8006ece:	4650      	mov	r0, sl
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	f7ff f81b 	bl	8005f0c <__aeabi_fcmpgt>
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	f000 8275 	beq.w	80073c6 <main+0x106e>
 8006edc:	4650      	mov	r0, sl
 8006ede:	494a      	ldr	r1, [pc, #296]	; (8007008 <main+0xcb0>)
 8006ee0:	f7fe fff6 	bl	8005ed0 <__aeabi_fcmplt>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	f000 826e 	beq.w	80073c6 <main+0x106e>
		if (temperature != temperatureLast && temperature >= -40 && temperature <= 40) {
 8006eea:	4620      	mov	r0, r4
 8006eec:	4629      	mov	r1, r5
 8006eee:	e9d6 453e 	ldrd	r4, r5, [r6, #248]	; 0xf8
 8006ef2:	4622      	mov	r2, r4
 8006ef4:	462b      	mov	r3, r5
 8006ef6:	f7fe febd 	bl	8005c74 <__aeabi_dcmpeq>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	f040 8620 	bne.w	8007b40 <main+0x17e8>
 8006f00:	4638      	mov	r0, r7
 8006f02:	4942      	ldr	r1, [pc, #264]	; (800700c <main+0xcb4>)
 8006f04:	f7fe ffee 	bl	8005ee4 <__aeabi_fcmple>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	f000 8619 	beq.w	8007b40 <main+0x17e8>
			if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8006f0e:	2200      	movs	r2, #0
 8006f10:	4620      	mov	r0, r4
 8006f12:	4629      	mov	r1, r5
 8006f14:	4b37      	ldr	r3, [pc, #220]	; (8006ff4 <main+0xc9c>)
 8006f16:	f7fe fecb 	bl	8005cb0 <__aeabi_dcmpge>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	f040 87b5 	bne.w	8007e8a <main+0x1b32>
 8006f20:	2200      	movs	r2, #0
 8006f22:	2300      	movs	r3, #0
 8006f24:	4620      	mov	r0, r4
 8006f26:	4629      	mov	r1, r5
 8006f28:	f7fe feae 	bl	8005c88 <__aeabi_dcmplt>
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	f040 8780 	bne.w	8007e34 <main+0x1adc>
			else if (temperatureLast < 10 && temperatureLast > 0) {
 8006f34:	2300      	movs	r3, #0
 8006f36:	4620      	mov	r0, r4
 8006f38:	4629      	mov	r1, r5
 8006f3a:	f7fe fec3 	bl	8005cc4 <__aeabi_dcmpgt>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	f040 8796 	bne.w	8007e70 <main+0x1b18>
			else if (temperatureLast <= -10) {
 8006f44:	2200      	movs	r2, #0
 8006f46:	4620      	mov	r0, r4
 8006f48:	4629      	mov	r1, r5
 8006f4a:	4b31      	ldr	r3, [pc, #196]	; (8007010 <main+0xcb8>)
 8006f4c:	f7fe fea6 	bl	8005c9c <__aeabi_dcmple>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	f040 877c 	bne.w	8007e4e <main+0x1af6>
			if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8006f56:	9907      	ldr	r1, [sp, #28]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	e9d1 4538 	ldrd	r4, r5, [r1, #224]	; 0xe0
 8006f5e:	4b25      	ldr	r3, [pc, #148]	; (8006ff4 <main+0xc9c>)
 8006f60:	4620      	mov	r0, r4
 8006f62:	4629      	mov	r1, r5
 8006f64:	f7fe fea4 	bl	8005cb0 <__aeabi_dcmpge>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	f040 875c 	bne.w	8007e26 <main+0x1ace>
 8006f6e:	2200      	movs	r2, #0
 8006f70:	2300      	movs	r3, #0
 8006f72:	4620      	mov	r0, r4
 8006f74:	4629      	mov	r1, r5
 8006f76:	f7fe fe87 	bl	8005c88 <__aeabi_dcmplt>
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	f040 8725 	bne.w	8007dcc <main+0x1a74>
			else if (temperature < 10 && temperature > 0) {
 8006f82:	2300      	movs	r3, #0
 8006f84:	4620      	mov	r0, r4
 8006f86:	4629      	mov	r1, r5
 8006f88:	f7fe fe9c 	bl	8005cc4 <__aeabi_dcmpgt>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	f040 873c 	bne.w	8007e0a <main+0x1ab2>
			else if (temperature <= -10) {
 8006f92:	2200      	movs	r2, #0
 8006f94:	4620      	mov	r0, r4
 8006f96:	4629      	mov	r1, r5
 8006f98:	4b1d      	ldr	r3, [pc, #116]	; (8007010 <main+0xcb8>)
 8006f9a:	f7fe fe7f 	bl	8005c9c <__aeabi_dcmple>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	f040 8721 	bne.w	8007de6 <main+0x1a8e>
		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 8006fa4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8006fa8:	e9dc 673a 	ldrd	r6, r7, [ip, #232]	; 0xe8
 8006fac:	e9dc 4540 	ldrd	r4, r5, [ip, #256]	; 0x100
			temperatureLast = temperature;
 8006fb0:	e9dc 8938 	ldrd	r8, r9, [ip, #224]	; 0xe0
		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	4622      	mov	r2, r4
 8006fba:	462b      	mov	r3, r5
			temperatureLast = temperature;
 8006fbc:	e9cc 893e 	strd	r8, r9, [ip, #248]	; 0xf8
		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 8006fc0:	f7fe fe58 	bl	8005c74 <__aeabi_dcmpeq>
 8006fc4:	bb40      	cbnz	r0, 8007018 <main+0xcc0>
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	2300      	movs	r3, #0
 8006fca:	4630      	mov	r0, r6
 8006fcc:	4639      	mov	r1, r7
 8006fce:	f7fe fe6f 	bl	8005cb0 <__aeabi_dcmpge>
 8006fd2:	b308      	cbz	r0, 8007018 <main+0xcc0>
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	4639      	mov	r1, r7
 8006fd8:	2200      	movs	r2, #0
 8006fda:	4b0e      	ldr	r3, [pc, #56]	; (8007014 <main+0xcbc>)
 8006fdc:	f7fe fe54 	bl	8005c88 <__aeabi_dcmplt>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	f040 85b9 	bne.w	8007b58 <main+0x1800>
 8006fe6:	e017      	b.n	8007018 <main+0xcc0>
 8006fe8:	9999999a 	.word	0x9999999a
 8006fec:	3fb99999 	.word	0x3fb99999
 8006ff0:	3c23d70a 	.word	0x3c23d70a
 8006ff4:	40240000 	.word	0x40240000
 8006ff8:	3fe00000 	.word	0x3fe00000
 8006ffc:	fffff3cb 	.word	0xfffff3cb
 8007000:	42aa0000 	.word	0x42aa0000
 8007004:	c2200000 	.word	0xc2200000
 8007008:	42c80000 	.word	0x42c80000
 800700c:	42200000 	.word	0x42200000
 8007010:	c0240000 	.word	0xc0240000
 8007014:	40590000 	.word	0x40590000
		if (pressureLast != pressure) {
 8007018:	9b07      	ldr	r3, [sp, #28]
 800701a:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 800701e:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8007022:	4293      	cmp	r3, r2
 8007024:	d024      	beq.n	8007070 <main+0xd18>
			if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d HP", pressureLast);
 8007026:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800702a:	bf2c      	ite	cs
 800702c:	49d0      	ldrcs	r1, [pc, #832]	; (8007370 <main+0x1018>)
			else sprintf(weatherPrintP, " %02d HPa", pressureLast);
 800702e:	49d1      	ldrcc	r1, [pc, #836]	; (8007374 <main+0x101c>)
			if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d HP", pressureLast);
 8007030:	4658      	mov	r0, fp
			else sprintf(weatherPrintP, " %02d HPa", pressureLast);
 8007032:	f001 fe0b 	bl	8008c4c <siprintf>
			LCD_Font(310, 187, weatherPrintP, &DejaVu_Sans_36, 1, BLACK);
 8007036:	21bb      	movs	r1, #187	; 0xbb
 8007038:	465a      	mov	r2, fp
 800703a:	f44f 709b 	mov.w	r0, #310	; 0x136
 800703e:	f7fc ffa7 	bl	8003f90 <LCD_Font.constprop.2>
			if (pressure >= 1000) sprintf(weatherPrintP, "%02d HP", pressure);
 8007042:	9b07      	ldr	r3, [sp, #28]
 8007044:	4658      	mov	r0, fp
 8007046:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 800704a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800704e:	bf2c      	ite	cs
 8007050:	49c7      	ldrcs	r1, [pc, #796]	; (8007370 <main+0x1018>)
			else sprintf(weatherPrintP, " %02d HP", pressure);
 8007052:	49c9      	ldrcc	r1, [pc, #804]	; (8007378 <main+0x1020>)
 8007054:	f001 fdfa 	bl	8008c4c <siprintf>
			LCD_Font(310, 187, weatherPrintP, &DejaVu_Sans_36, 1, GRAY);
 8007058:	465a      	mov	r2, fp
 800705a:	4bc8      	ldr	r3, [pc, #800]	; (800737c <main+0x1024>)
 800705c:	21bb      	movs	r1, #187	; 0xbb
 800705e:	f44f 709b 	mov.w	r0, #310	; 0x136
 8007062:	f7fe f917 	bl	8005294 <LCD_Font.constprop.3>
			pressureLast = pressure;
 8007066:	9a07      	ldr	r2, [sp, #28]
 8007068:	f8b2 30f0 	ldrh.w	r3, [r2, #240]	; 0xf0
 800706c:	f8a2 3108 	strh.w	r3, [r2, #264]	; 0x108
		if (updateTime != rtcHrs) {
 8007070:	9907      	ldr	r1, [sp, #28]
 8007072:	4dc3      	ldr	r5, [pc, #780]	; (8007380 <main+0x1028>)
 8007074:	f891 30d6 	ldrb.w	r3, [r1, #214]	; 0xd6
 8007078:	896a      	ldrh	r2, [r5, #10]
 800707a:	4619      	mov	r1, r3
 800707c:	429a      	cmp	r2, r3
 800707e:	f000 85a7 	beq.w	8007bd0 <main+0x1878>
			AT24XX_Update(0, rtcHrs);
 8007082:	2000      	movs	r0, #0
 8007084:	f7fc fa20 	bl	80034c8 <AT24XX_Update>
    uint16_t dt[1] = {0};
 8007088:	2000      	movs	r0, #0
 800708a:	4cbe      	ldr	r4, [pc, #760]	; (8007384 <main+0x102c>)
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800708c:	4659      	mov	r1, fp
    uint16_t dt[1] = {0};
 800708e:	f8ad 0060 	strh.w	r0, [sp, #96]	; 0x60
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007092:	f7fb ffb9 	bl	8003008 <HAL_I2C_Mem_Read.constprop.0.isra.0>
			updateTime = AT24XX_Read(0);
 8007096:	4623      	mov	r3, r4
 8007098:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800709c:	49ba      	ldr	r1, [pc, #744]	; (8007388 <main+0x1030>)
 800709e:	816a      	strh	r2, [r5, #10]
	return (byteH << 8) | byteL;
 80070a0:	f893 03e9 	ldrb.w	r0, [r3, #1001]	; 0x3e9
 80070a4:	f893 23e8 	ldrb.w	r2, [r3, #1000]	; 0x3e8
			for (uint16_t i = 0; i < 157; i++) {
 80070a8:	3302      	adds	r3, #2
	return (byteH << 8) | byteL;
 80070aa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				hourlyTemperature[i] = byteS(eeprom[i * 2 + 1000], eeprom[i * 2 + 1 + 1000]);
 80070ae:	f821 2f02 	strh.w	r2, [r1, #2]!
			for (uint16_t i = 0; i < 157; i++) {
 80070b2:	4ab6      	ldr	r2, [pc, #728]	; (800738c <main+0x1034>)
 80070b4:	428a      	cmp	r2, r1
 80070b6:	d1f3      	bne.n	80070a0 <main+0xd48>
			for (uint16_t i = 1; i < 156; i++) hourlyTemperature[i] = hourlyTemperature[i + 1];
 80070b8:	f5a2 719a 	sub.w	r1, r2, #308	; 0x134
 80070bc:	1e88      	subs	r0, r1, #2
 80070be:	f44f 729b 	mov.w	r2, #310	; 0x136
 80070c2:	f004 fdf7 	bl	800bcb4 <memmove>
			hourlyTemperature[155] = (uint16_t) (temperature * 10);
 80070c6:	9e07      	ldr	r6, [sp, #28]
 80070c8:	2200      	movs	r2, #0
 80070ca:	e9d6 0138 	ldrd	r0, r1, [r6, #224]	; 0xe0
 80070ce:	4bb0      	ldr	r3, [pc, #704]	; (8007390 <main+0x1038>)
 80070d0:	f7fe fb68 	bl	80057a4 <__aeabi_dmul>
 80070d4:	f7fe fe3e 	bl	8005d54 <__aeabi_d2uiz>
 80070d8:	4dab      	ldr	r5, [pc, #684]	; (8007388 <main+0x1030>)
 80070da:	f8a6 0242 	strh.w	r0, [r6, #578]	; 0x242
			for (uint16_t i = 0; i < 157; i++) {
 80070de:	b2af      	uxth	r7, r5
				AT24XX_Update(i * 2 + 1 + 1000, byteH(hourlyTemperature[i]));
 80070e0:	f5c7 7879 	rsb	r8, r7, #996	; 0x3e4
 80070e4:	f108 0803 	add.w	r8, r8, #3
 80070e8:	f5c7 777a 	rsb	r7, r7, #1000	; 0x3e8
				AT24XX_Update(i * 2 + 1000, byteL(hourlyTemperature[i]));
 80070ec:	1978      	adds	r0, r7, r5
 80070ee:	f835 6f02 	ldrh.w	r6, [r5, #2]!
 80070f2:	b280      	uxth	r0, r0
 80070f4:	b2f1      	uxtb	r1, r6
 80070f6:	f7fc f9e7 	bl	80034c8 <AT24XX_Update>
				AT24XX_Update(i * 2 + 1 + 1000, byteH(hourlyTemperature[i]));
 80070fa:	eb08 0005 	add.w	r0, r8, r5
 80070fe:	0a31      	lsrs	r1, r6, #8
 8007100:	b280      	uxth	r0, r0
 8007102:	f7fc f9e1 	bl	80034c8 <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 8007106:	4ba1      	ldr	r3, [pc, #644]	; (800738c <main+0x1034>)
 8007108:	42ab      	cmp	r3, r5
 800710a:	d1ef      	bne.n	80070ec <main+0xd94>
 800710c:	1c99      	adds	r1, r3, #2
 800710e:	4b9d      	ldr	r3, [pc, #628]	; (8007384 <main+0x102c>)
	return (byteH << 8) | byteL;
 8007110:	f893 07d1 	ldrb.w	r0, [r3, #2001]	; 0x7d1
 8007114:	f893 27d0 	ldrb.w	r2, [r3, #2000]	; 0x7d0
			for (uint16_t i = 0; i < 157; i++) {
 8007118:	3302      	adds	r3, #2
	return (byteH << 8) | byteL;
 800711a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				hourlyHumidity[i] = byteS(eeprom[i * 2 + 2000], eeprom[i * 2 + 1 + 2000]);
 800711e:	f821 2f02 	strh.w	r2, [r1, #2]!
			for (uint16_t i = 0; i < 157; i++) {
 8007122:	4a9c      	ldr	r2, [pc, #624]	; (8007394 <main+0x103c>)
 8007124:	428a      	cmp	r2, r1
 8007126:	d1f3      	bne.n	8007110 <main+0xdb8>
			for (uint16_t i = 1; i < 156; i++) hourlyHumidity[i] = hourlyHumidity[i + 1];
 8007128:	f5a2 719a 	sub.w	r1, r2, #308	; 0x134
 800712c:	1e88      	subs	r0, r1, #2
 800712e:	f44f 729b 	mov.w	r2, #310	; 0x136
 8007132:	f004 fdbf 	bl	800bcb4 <memmove>
			hourlyHumidity[155] = (uint16_t) (humidity * 10);
 8007136:	9e07      	ldr	r6, [sp, #28]
 8007138:	2200      	movs	r2, #0
 800713a:	e9d6 013a 	ldrd	r0, r1, [r6, #232]	; 0xe8
 800713e:	4b94      	ldr	r3, [pc, #592]	; (8007390 <main+0x1038>)
 8007140:	f7fe fb30 	bl	80057a4 <__aeabi_dmul>
 8007144:	f7fe fe06 	bl	8005d54 <__aeabi_d2uiz>
 8007148:	4d93      	ldr	r5, [pc, #588]	; (8007398 <main+0x1040>)
 800714a:	f8a6 037e 	strh.w	r0, [r6, #894]	; 0x37e
			for (uint16_t i = 0; i < 157; i++) {
 800714e:	b2af      	uxth	r7, r5
				AT24XX_Update(i * 2 + 1 + 2000, byteH(hourlyHumidity[i]));
 8007150:	f5c7 68f9 	rsb	r8, r7, #1992	; 0x7c8
 8007154:	f108 0807 	add.w	r8, r8, #7
 8007158:	f5c7 67fa 	rsb	r7, r7, #2000	; 0x7d0
				AT24XX_Update(i * 2 + 2000, byteL(hourlyHumidity[i]));
 800715c:	1978      	adds	r0, r7, r5
 800715e:	f835 6f02 	ldrh.w	r6, [r5, #2]!
 8007162:	b280      	uxth	r0, r0
 8007164:	b2f1      	uxtb	r1, r6
 8007166:	f7fc f9af 	bl	80034c8 <AT24XX_Update>
				AT24XX_Update(i * 2 + 1 + 2000, byteH(hourlyHumidity[i]));
 800716a:	eb08 0005 	add.w	r0, r8, r5
 800716e:	0a31      	lsrs	r1, r6, #8
 8007170:	b280      	uxth	r0, r0
 8007172:	f7fc f9a9 	bl	80034c8 <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 8007176:	4b87      	ldr	r3, [pc, #540]	; (8007394 <main+0x103c>)
 8007178:	42ab      	cmp	r3, r5
 800717a:	d1ef      	bne.n	800715c <main+0xe04>
 800717c:	1c9a      	adds	r2, r3, #2
	return (byteH << 8) | byteL;
 800717e:	f894 1bb9 	ldrb.w	r1, [r4, #3001]	; 0xbb9
 8007182:	f894 3bb8 	ldrb.w	r3, [r4, #3000]	; 0xbb8
			for (uint16_t i = 0; i < 157; i++) {
 8007186:	3402      	adds	r4, #2
	return (byteH << 8) | byteL;
 8007188:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				hourlyPressure[i] = byteS(eeprom[i * 2 + 3000], eeprom[i * 2 + 1 + 3000]);
 800718c:	f822 3f02 	strh.w	r3, [r2, #2]!
			for (uint16_t i = 0; i < 157; i++) {
 8007190:	4b82      	ldr	r3, [pc, #520]	; (800739c <main+0x1044>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d1f3      	bne.n	800717e <main+0xe26>
			hourlyPressure[155] = (uint16_t)pressure;
 8007196:	f5a3 749d 	sub.w	r4, r3, #314	; 0x13a
 800719a:	b2a6      	uxth	r6, r4
 800719c:	f5c6 673b 	rsb	r7, r6, #2992	; 0xbb0
				AT24XX_Update(i * 2 + 1 + 3000, byteH(hourlyPressure[i]));
 80071a0:	463e      	mov	r6, r7
			for (uint16_t i = 1; i < 156; i++) hourlyPressure[i] = hourlyPressure[i + 1];
 80071a2:	f5a3 719a 	sub.w	r1, r3, #308	; 0x134
 80071a6:	f44f 729b 	mov.w	r2, #310	; 0x136
 80071aa:	1e88      	subs	r0, r1, #2
 80071ac:	f004 fd82 	bl	800bcb4 <memmove>
			hourlyPressure[155] = (uint16_t)pressure;
 80071b0:	9a07      	ldr	r2, [sp, #28]
 80071b2:	3708      	adds	r7, #8
 80071b4:	f8b2 30f0 	ldrh.w	r3, [r2, #240]	; 0xf0
				AT24XX_Update(i * 2 + 1 + 3000, byteH(hourlyPressure[i]));
 80071b8:	3607      	adds	r6, #7
			hourlyPressure[155] = (uint16_t)pressure;
 80071ba:	f8a2 34ba 	strh.w	r3, [r2, #1210]	; 0x4ba
				AT24XX_Update(i * 2 + 3000, byteL(hourlyPressure[i]));
 80071be:	1938      	adds	r0, r7, r4
 80071c0:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 80071c4:	b280      	uxth	r0, r0
 80071c6:	b2e9      	uxtb	r1, r5
 80071c8:	f7fc f97e 	bl	80034c8 <AT24XX_Update>
				AT24XX_Update(i * 2 + 1 + 3000, byteH(hourlyPressure[i]));
 80071cc:	1930      	adds	r0, r6, r4
 80071ce:	0a29      	lsrs	r1, r5, #8
 80071d0:	b280      	uxth	r0, r0
 80071d2:	f7fc f979 	bl	80034c8 <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 80071d6:	4b71      	ldr	r3, [pc, #452]	; (800739c <main+0x1044>)
 80071d8:	42a3      	cmp	r3, r4
 80071da:	d1f0      	bne.n	80071be <main+0xe66>
	LCD_Line(x, y, x + w, y, size, color24);
 80071dc:	23be      	movs	r3, #190	; 0xbe
 80071de:	229f      	movs	r2, #159	; 0x9f
 80071e0:	4619      	mov	r1, r3
 80071e2:	2002      	movs	r0, #2
 80071e4:	f7fb f8d2 	bl	800238c <LCD_Line.constprop.1>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 80071e8:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80071ec:	229f      	movs	r2, #159	; 0x9f
 80071ee:	4619      	mov	r1, r3
 80071f0:	2002      	movs	r0, #2
 80071f2:	f7fb f8cb 	bl	800238c <LCD_Line.constprop.1>
	LCD_Line(x, y, x, y + h, size, color24);
 80071f6:	2202      	movs	r2, #2
 80071f8:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80071fc:	4610      	mov	r0, r2
 80071fe:	21be      	movs	r1, #190	; 0xbe
 8007200:	f7fb f8c4 	bl	800238c <LCD_Line.constprop.1>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8007204:	229f      	movs	r2, #159	; 0x9f
 8007206:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800720a:	21be      	movs	r1, #190	; 0xbe
 800720c:	4610      	mov	r0, r2
 800720e:	2403      	movs	r4, #3
				LCD_Line(2 + i, 318, 2 + i, 191 + (maximumTemperature  * 10 - val), 1, RGB(255 - ((maximumTemperature  * 10 - val) * 2), 0, 255 - (255 - ((maximumTemperature  * 10 - val) * 2))));
 8007210:	f240 17ff 	movw	r7, #511	; 0x1ff
 8007214:	4e62      	ldr	r6, [pc, #392]	; (80073a0 <main+0x1048>)
 8007216:	f7fb f8b9 	bl	800238c <LCD_Line.constprop.1>
				val = hourlyTemperature[i];
 800721a:	f936 5f02 	ldrsh.w	r5, [r6, #2]!
				LCD_Line(2 + i, 318, 2 + i, 191, 1, BLACK);
 800721e:	4621      	mov	r1, r4
 8007220:	2dc1      	cmp	r5, #193	; 0xc1
 8007222:	bfb8      	it	lt
 8007224:	25c1      	movlt	r5, #193	; 0xc1
 8007226:	4620      	mov	r0, r4
 8007228:	2300      	movs	r3, #0
 800722a:	22bf      	movs	r2, #191	; 0xbf
 800722c:	f7fa fa4a 	bl	80016c4 <LCD_Line.constprop.0>
				LCD_Line(2 + i, 318, 2 + i, 191 + (maximumTemperature  * 10 - val), 1, RGB(255 - ((maximumTemperature  * 10 - val) * 2), 0, 255 - (255 - ((maximumTemperature  * 10 - val) * 2))));
 8007230:	f5c5 73a0 	rsb	r3, r5, #320	; 0x140
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	b2db      	uxtb	r3, r3
 8007238:	1b7a      	subs	r2, r7, r5
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 800723a:	f083 05ff 	eor.w	r5, r3, #255	; 0xff
 800723e:	4621      	mov	r1, r4
 8007240:	4620      	mov	r0, r4
 8007242:	eb03 4305 	add.w	r3, r3, r5, lsl #16
 8007246:	b292      	uxth	r2, r2
 8007248:	f7fa fa3c 	bl	80016c4 <LCD_Line.constprop.0>
			for (uint16_t i = 1; i < 156 ; i++) {
 800724c:	4b55      	ldr	r3, [pc, #340]	; (80073a4 <main+0x104c>)
 800724e:	3401      	adds	r4, #1
 8007250:	42b3      	cmp	r3, r6
 8007252:	b2a4      	uxth	r4, r4
 8007254:	d1e1      	bne.n	800721a <main+0xec2>
	LCD_Line(x, y, x + w, y, size, color24);
 8007256:	23be      	movs	r3, #190	; 0xbe
 8007258:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800725c:	4619      	mov	r1, r3
 800725e:	20a1      	movs	r0, #161	; 0xa1
 8007260:	f7fb f894 	bl	800238c <LCD_Line.constprop.1>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8007264:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8007268:	20a1      	movs	r0, #161	; 0xa1
 800726a:	461a      	mov	r2, r3
 800726c:	4619      	mov	r1, r3
 800726e:	f7fb f88d 	bl	800238c <LCD_Line.constprop.1>
	LCD_Line(x, y, x, y + h, size, color24);
 8007272:	22a1      	movs	r2, #161	; 0xa1
 8007274:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8007278:	4610      	mov	r0, r2
 800727a:	21be      	movs	r1, #190	; 0xbe
 800727c:	f7fb f886 	bl	800238c <LCD_Line.constprop.1>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8007280:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8007284:	21be      	movs	r1, #190	; 0xbe
 8007286:	461a      	mov	r2, r3
 8007288:	4618      	mov	r0, r3
 800728a:	25a2      	movs	r5, #162	; 0xa2
 800728c:	f240 1711 	movw	r7, #273	; 0x111
 8007290:	4e45      	ldr	r6, [pc, #276]	; (80073a8 <main+0x1050>)
 8007292:	f7fb f87b 	bl	800238c <LCD_Line.constprop.1>
				val = hourlyHumidity[i];
 8007296:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
				LCD_Line(161 + i, 318, 161 + i, 191, 1, BLACK);
 800729a:	4629      	mov	r1, r5
 800729c:	42ba      	cmp	r2, r7
 800729e:	bfb8      	it	lt
 80072a0:	463a      	movlt	r2, r7
 80072a2:	4614      	mov	r4, r2
 80072a4:	4628      	mov	r0, r5
 80072a6:	2300      	movs	r3, #0
 80072a8:	22bf      	movs	r2, #191	; 0xbf
 80072aa:	f7fa fa0b 	bl	80016c4 <LCD_Line.constprop.0>
				LCD_Line(161 + i, 318, 161 + i, 191 + (maximumHumidity * 10 - val), 1, RGB(255 - ((maximumHumidity * 10 - val) * 2), 0, 255 - (255 - ((maximumHumidity * 10 - val) * 2))));
 80072ae:	f5c4 73c8 	rsb	r3, r4, #400	; 0x190
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	f5c4 7213 	rsb	r2, r4, #588	; 0x24c
 80072ba:	3203      	adds	r2, #3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 80072bc:	f083 04ff 	eor.w	r4, r3, #255	; 0xff
 80072c0:	4629      	mov	r1, r5
 80072c2:	4628      	mov	r0, r5
 80072c4:	eb03 4304 	add.w	r3, r3, r4, lsl #16
 80072c8:	b292      	uxth	r2, r2
 80072ca:	f7fa f9fb 	bl	80016c4 <LCD_Line.constprop.0>
			for (uint16_t i = 1; i < 156 ; i++) {
 80072ce:	4b37      	ldr	r3, [pc, #220]	; (80073ac <main+0x1054>)
 80072d0:	3501      	adds	r5, #1
 80072d2:	42b3      	cmp	r3, r6
 80072d4:	b2ad      	uxth	r5, r5
 80072d6:	d1de      	bne.n	8007296 <main+0xf3e>
	LCD_Line(x, y, x + w, y, size, color24);
 80072d8:	23be      	movs	r3, #190	; 0xbe
 80072da:	f240 12dd 	movw	r2, #477	; 0x1dd
 80072de:	4619      	mov	r1, r3
 80072e0:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80072e4:	f7fb f852 	bl	800238c <LCD_Line.constprop.1>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 80072e8:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80072ec:	f240 12dd 	movw	r2, #477	; 0x1dd
 80072f0:	4619      	mov	r1, r3
 80072f2:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80072f6:	f7fb f849 	bl	800238c <LCD_Line.constprop.1>
	LCD_Line(x, y, x, y + h, size, color24);
 80072fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80072fe:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8007302:	4610      	mov	r0, r2
 8007304:	21be      	movs	r1, #190	; 0xbe
 8007306:	f7fb f841 	bl	800238c <LCD_Line.constprop.1>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 800730a:	f240 12dd 	movw	r2, #477	; 0x1dd
 800730e:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8007312:	21be      	movs	r1, #190	; 0xbe
 8007314:	4610      	mov	r0, r2
 8007316:	f240 1541 	movw	r5, #321	; 0x141
 800731a:	f240 3791 	movw	r7, #913	; 0x391
 800731e:	4e24      	ldr	r6, [pc, #144]	; (80073b0 <main+0x1058>)
 8007320:	f7fb f834 	bl	800238c <LCD_Line.constprop.1>
				val = hourlyPressure[i];
 8007324:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
				LCD_Line(320 + i, 318, 320 + i, 191, 1, BLACK);
 8007328:	4629      	mov	r1, r5
 800732a:	42ba      	cmp	r2, r7
 800732c:	bfb8      	it	lt
 800732e:	463a      	movlt	r2, r7
 8007330:	4614      	mov	r4, r2
 8007332:	4628      	mov	r0, r5
 8007334:	2300      	movs	r3, #0
 8007336:	22bf      	movs	r2, #191	; 0xbf
 8007338:	f7fa f9c4 	bl	80016c4 <LCD_Line.constprop.0>
				LCD_Line(320 + i, 318, 320 + i, 191 + (maximumPressure - val), 1, RGB(255 - ((maximumPressure - val) * 2), 0, 255 - (255 - ((maximumPressure - val) * 2))));
 800733c:	f5c4 6382 	rsb	r3, r4, #1040	; 0x410
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	b2db      	uxtb	r3, r3
 8007344:	f5c4 6299 	rsb	r2, r4, #1224	; 0x4c8
 8007348:	3207      	adds	r2, #7
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 800734a:	f083 04ff 	eor.w	r4, r3, #255	; 0xff
 800734e:	4629      	mov	r1, r5
 8007350:	4628      	mov	r0, r5
 8007352:	eb03 4304 	add.w	r3, r3, r4, lsl #16
 8007356:	b292      	uxth	r2, r2
 8007358:	f7fa f9b4 	bl	80016c4 <LCD_Line.constprop.0>
			for (uint16_t i = 1; i < 156 ; i++) {
 800735c:	4b15      	ldr	r3, [pc, #84]	; (80073b4 <main+0x105c>)
 800735e:	3501      	adds	r5, #1
 8007360:	42b3      	cmp	r3, r6
 8007362:	b2ad      	uxth	r5, r5
 8007364:	d1de      	bne.n	8007324 <main+0xfcc>
			graphViewed = 1;
 8007366:	2301      	movs	r3, #1
 8007368:	9a07      	ldr	r2, [sp, #28]
 800736a:	f882 34be 	strb.w	r3, [r2, #1214]	; 0x4be
 800736e:	e023      	b.n	80073b8 <main+0x1060>
 8007370:	0801d218 	.word	0x0801d218
 8007374:	0801d220 	.word	0x0801d220
 8007378:	0801d22c 	.word	0x0801d22c
 800737c:	007f7f7f 	.word	0x007f7f7f
 8007380:	20000000 	.word	0x20000000
 8007384:	200006d0 	.word	0x200006d0
 8007388:	20000312 	.word	0x20000312
 800738c:	2000044c 	.word	0x2000044c
 8007390:	40240000 	.word	0x40240000
 8007394:	20000588 	.word	0x20000588
 8007398:	2000044e 	.word	0x2000044e
 800739c:	200006c4 	.word	0x200006c4
 80073a0:	20000314 	.word	0x20000314
 80073a4:	2000044a 	.word	0x2000044a
 80073a8:	20000450 	.word	0x20000450
 80073ac:	20000586 	.word	0x20000586
 80073b0:	2000058c 	.word	0x2000058c
 80073b4:	200006c2 	.word	0x200006c2
			if (rtcSec % 2 != 0) {
 80073b8:	4613      	mov	r3, r2
 80073ba:	f892 20d4 	ldrb.w	r2, [r2, #212]	; 0xd4
			if (rtcMinLast != rtcMin) {
 80073be:	f893 30d5 	ldrb.w	r3, [r3, #213]	; 0xd5
			if (rtcSec % 2 != 0) {
 80073c2:	9208      	str	r2, [sp, #32]
			if (rtcMinLast != rtcMin) {
 80073c4:	9309      	str	r3, [sp, #36]	; 0x24
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 80073c6:	2200      	movs	r2, #0
 80073c8:	2308      	movs	r3, #8
 80073ca:	2001      	movs	r0, #1
 80073cc:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80073d0:	f06f 0206 	mvn.w	r2, #6
 80073d4:	e9cd 0205 	strd	r0, r2, [sp, #20]
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 80073d8:	4dcc      	ldr	r5, [pc, #816]	; (800770c <main+0x13b4>)
 80073da:	9302      	str	r3, [sp, #8]
 80073dc:	2301      	movs	r3, #1
 80073de:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80073e2:	9e02      	ldr	r6, [sp, #8]
 80073e4:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 80073e8:	f106 0723 	add.w	r7, r6, #35	; 0x23
 80073ec:	b2bf      	uxth	r7, r7
 80073ee:	fa1f f989 	uxth.w	r9, r9
 80073f2:	4639      	mov	r1, r7
 80073f4:	461a      	mov	r2, r3
 80073f6:	4648      	mov	r0, r9
 80073f8:	9500      	str	r5, [sp, #0]
 80073fa:	f7f9 fb6f 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 80073fe:	2301      	movs	r3, #1
 8007400:	9602      	str	r6, [sp, #8]
 8007402:	f104 0a23 	add.w	sl, r4, #35	; 0x23
 8007406:	36ac      	adds	r6, #172	; 0xac
 8007408:	b2b6      	uxth	r6, r6
 800740a:	fa1f fa8a 	uxth.w	sl, sl
 800740e:	4630      	mov	r0, r6
 8007410:	461a      	mov	r2, r3
 8007412:	4651      	mov	r1, sl
 8007414:	9500      	str	r5, [sp, #0]
 8007416:	f7f9 fb61 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 800741a:	2301      	movs	r3, #1
 800741c:	f1c4 08ac 	rsb	r8, r4, #172	; 0xac
 8007420:	fa1f f888 	uxth.w	r8, r8
 8007424:	4639      	mov	r1, r7
 8007426:	461a      	mov	r2, r3
 8007428:	4640      	mov	r0, r8
 800742a:	9500      	str	r5, [sp, #0]
 800742c:	f7f9 fb56 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8007430:	2301      	movs	r3, #1
 8007432:	9a02      	ldr	r2, [sp, #8]
 8007434:	4651      	mov	r1, sl
 8007436:	f1c2 07ac 	rsb	r7, r2, #172	; 0xac
 800743a:	b2bf      	uxth	r7, r7
 800743c:	461a      	mov	r2, r3
 800743e:	4638      	mov	r0, r7
 8007440:	9500      	str	r5, [sp, #0]
 8007442:	f7f9 fb4b 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8007446:	2301      	movs	r3, #1
 8007448:	f1c4 0423 	rsb	r4, r4, #35	; 0x23
 800744c:	b2a4      	uxth	r4, r4
 800744e:	4621      	mov	r1, r4
 8007450:	4630      	mov	r0, r6
 8007452:	461a      	mov	r2, r3
 8007454:	9500      	str	r5, [sp, #0]
 8007456:	f7f9 fb41 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 800745a:	2301      	movs	r3, #1
 800745c:	9a02      	ldr	r2, [sp, #8]
 800745e:	4648      	mov	r0, r9
 8007460:	f1c2 0623 	rsb	r6, r2, #35	; 0x23
 8007464:	b2b6      	uxth	r6, r6
 8007466:	4631      	mov	r1, r6
 8007468:	461a      	mov	r2, r3
 800746a:	9500      	str	r5, [sp, #0]
 800746c:	f7f9 fb36 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8007470:	2301      	movs	r3, #1
 8007472:	4631      	mov	r1, r6
 8007474:	461a      	mov	r2, r3
 8007476:	4640      	mov	r0, r8
 8007478:	9500      	str	r5, [sp, #0]
 800747a:	f7f9 fb2f 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 800747e:	2301      	movs	r3, #1
 8007480:	4621      	mov	r1, r4
 8007482:	461a      	mov	r2, r3
 8007484:	4638      	mov	r0, r7
 8007486:	9500      	str	r5, [sp, #0]
 8007488:	f7f9 fb28 	bl	8000adc <LCD_Rect_Fill>
			P = (P + 5) + (2 * (a_ - b_));
 800748c:	e9dd 4603 	ldrd	r4, r6, [sp, #12]
 8007490:	9b06      	ldr	r3, [sp, #24]
 8007492:	1ba1      	subs	r1, r4, r6
		if (P < 0)
 8007494:	2b00      	cmp	r3, #0
			P = (P + 5) + (2 * (a_ - b_));
 8007496:	f103 0205 	add.w	r2, r3, #5
			P = (P + 3) + (2 * a_);
 800749a:	f103 0003 	add.w	r0, r3, #3
		if (P < 0)
 800749e:	f2c0 8305 	blt.w	8007aac <main+0x1754>
			a_++;
 80074a2:	9c05      	ldr	r4, [sp, #20]
			P = (P + 5) + (2 * (a_ - b_));
 80074a4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			a_++;
 80074a8:	4623      	mov	r3, r4
			P = (P + 5) + (2 * (a_ - b_));
 80074aa:	9206      	str	r2, [sp, #24]
	while (a_ <= b_)
 80074ac:	9a03      	ldr	r2, [sp, #12]
			b_--;
 80074ae:	1e70      	subs	r0, r6, #1
	while (a_ <= b_)
 80074b0:	3201      	adds	r2, #1
 80074b2:	9203      	str	r2, [sp, #12]
 80074b4:	3301      	adds	r3, #1
 80074b6:	b282      	uxth	r2, r0
 80074b8:	4284      	cmp	r4, r0
			b_--;
 80074ba:	9004      	str	r0, [sp, #16]
 80074bc:	9202      	str	r2, [sp, #8]
	while (a_ <= b_)
 80074be:	9305      	str	r3, [sp, #20]
 80074c0:	dd8c      	ble.n	80073dc <main+0x1084>
 80074c2:	2200      	movs	r2, #0
 80074c4:	2308      	movs	r3, #8
 80074c6:	2101      	movs	r1, #1
 80074c8:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80074cc:	f06f 0206 	mvn.w	r2, #6
 80074d0:	e9cd 1205 	strd	r1, r2, [sp, #20]
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 80074d4:	4d8d      	ldr	r5, [pc, #564]	; (800770c <main+0x13b4>)
 80074d6:	9302      	str	r3, [sp, #8]
 80074d8:	2301      	movs	r3, #1
 80074da:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80074de:	9e02      	ldr	r6, [sp, #8]
 80074e0:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 80074e4:	f106 074b 	add.w	r7, r6, #75	; 0x4b
 80074e8:	b2bf      	uxth	r7, r7
 80074ea:	fa1f f989 	uxth.w	r9, r9
 80074ee:	4639      	mov	r1, r7
 80074f0:	461a      	mov	r2, r3
 80074f2:	4648      	mov	r0, r9
 80074f4:	9500      	str	r5, [sp, #0]
 80074f6:	f7f9 faf1 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 80074fa:	2301      	movs	r3, #1
 80074fc:	9602      	str	r6, [sp, #8]
 80074fe:	f104 0a4b 	add.w	sl, r4, #75	; 0x4b
 8007502:	36ac      	adds	r6, #172	; 0xac
 8007504:	b2b6      	uxth	r6, r6
 8007506:	fa1f fa8a 	uxth.w	sl, sl
 800750a:	4630      	mov	r0, r6
 800750c:	461a      	mov	r2, r3
 800750e:	4651      	mov	r1, sl
 8007510:	9500      	str	r5, [sp, #0]
 8007512:	f7f9 fae3 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8007516:	2301      	movs	r3, #1
 8007518:	f1c4 08ac 	rsb	r8, r4, #172	; 0xac
 800751c:	fa1f f888 	uxth.w	r8, r8
 8007520:	4639      	mov	r1, r7
 8007522:	461a      	mov	r2, r3
 8007524:	4640      	mov	r0, r8
 8007526:	9500      	str	r5, [sp, #0]
 8007528:	f7f9 fad8 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 800752c:	2301      	movs	r3, #1
 800752e:	9a02      	ldr	r2, [sp, #8]
 8007530:	4651      	mov	r1, sl
 8007532:	f1c2 07ac 	rsb	r7, r2, #172	; 0xac
 8007536:	b2bf      	uxth	r7, r7
 8007538:	461a      	mov	r2, r3
 800753a:	4638      	mov	r0, r7
 800753c:	9500      	str	r5, [sp, #0]
 800753e:	f7f9 facd 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8007542:	2301      	movs	r3, #1
 8007544:	f1c4 044b 	rsb	r4, r4, #75	; 0x4b
 8007548:	b2a4      	uxth	r4, r4
 800754a:	4621      	mov	r1, r4
 800754c:	4630      	mov	r0, r6
 800754e:	461a      	mov	r2, r3
 8007550:	9500      	str	r5, [sp, #0]
 8007552:	f7f9 fac3 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8007556:	2301      	movs	r3, #1
 8007558:	9a02      	ldr	r2, [sp, #8]
 800755a:	4648      	mov	r0, r9
 800755c:	f1c2 064b 	rsb	r6, r2, #75	; 0x4b
 8007560:	b2b6      	uxth	r6, r6
 8007562:	4631      	mov	r1, r6
 8007564:	461a      	mov	r2, r3
 8007566:	9500      	str	r5, [sp, #0]
 8007568:	f7f9 fab8 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 800756c:	2301      	movs	r3, #1
 800756e:	4631      	mov	r1, r6
 8007570:	461a      	mov	r2, r3
 8007572:	4640      	mov	r0, r8
 8007574:	9500      	str	r5, [sp, #0]
 8007576:	f7f9 fab1 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 800757a:	2301      	movs	r3, #1
 800757c:	4621      	mov	r1, r4
 800757e:	461a      	mov	r2, r3
 8007580:	4638      	mov	r0, r7
 8007582:	9500      	str	r5, [sp, #0]
 8007584:	f7f9 faaa 	bl	8000adc <LCD_Rect_Fill>
			P = (P + 5) + (2 * (a_ - b_));
 8007588:	e9dd 4603 	ldrd	r4, r6, [sp, #12]
 800758c:	9b06      	ldr	r3, [sp, #24]
 800758e:	1ba1      	subs	r1, r4, r6
		if (P < 0)
 8007590:	2b00      	cmp	r3, #0
			P = (P + 5) + (2 * (a_ - b_));
 8007592:	f103 0205 	add.w	r2, r3, #5
			P = (P + 3) + (2 * a_);
 8007596:	f103 0003 	add.w	r0, r3, #3
		if (P < 0)
 800759a:	f2c0 81ef 	blt.w	800797c <main+0x1624>
			a_++;
 800759e:	9c05      	ldr	r4, [sp, #20]
			P = (P + 5) + (2 * (a_ - b_));
 80075a0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			a_++;
 80075a4:	4623      	mov	r3, r4
			P = (P + 5) + (2 * (a_ - b_));
 80075a6:	9206      	str	r2, [sp, #24]
	while (a_ <= b_)
 80075a8:	9a03      	ldr	r2, [sp, #12]
			b_--;
 80075aa:	1e70      	subs	r0, r6, #1
	while (a_ <= b_)
 80075ac:	3201      	adds	r2, #1
 80075ae:	9203      	str	r2, [sp, #12]
 80075b0:	3301      	adds	r3, #1
 80075b2:	b282      	uxth	r2, r0
 80075b4:	4284      	cmp	r4, r0
			b_--;
 80075b6:	9004      	str	r0, [sp, #16]
 80075b8:	9202      	str	r2, [sp, #8]
	while (a_ <= b_)
 80075ba:	9305      	str	r3, [sp, #20]
 80075bc:	dd8c      	ble.n	80074d8 <main+0x1180>
			if (rtcSec % 2 != 0) {
 80075be:	9b08      	ldr	r3, [sp, #32]
 80075c0:	f013 0801 	ands.w	r8, r3, #1
 80075c4:	f000 81eb 	beq.w	800799e <main+0x1646>
	b_ = radius;
 80075c8:	f04f 0807 	mov.w	r8, #7
 80075cc:	f04f 0a00 	mov.w	sl, #0
 80075d0:	2601      	movs	r6, #1
	P = 1 - radius;
 80075d2:	f06f 0705 	mvn.w	r7, #5
 80075d6:	46c1      	mov	r9, r8
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 80075d8:	ea4f 0449 	mov.w	r4, r9, lsl #1
 80075dc:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800770c <main+0x13b4>
 80075e0:	b2b5      	uxth	r5, r6
 80075e2:	3401      	adds	r4, #1
 80075e4:	b2a4      	uxth	r4, r4
 80075e6:	f10a 0201 	add.w	r2, sl, #1
 80075ea:	f1c9 0123 	rsb	r1, r9, #35	; 0x23
 80075ee:	f1c5 00ad 	rsb	r0, r5, #173	; 0xad
 80075f2:	4623      	mov	r3, r4
 80075f4:	b292      	uxth	r2, r2
 80075f6:	b289      	uxth	r1, r1
 80075f8:	b280      	uxth	r0, r0
 80075fa:	f8cd c000 	str.w	ip, [sp]
 80075fe:	9202      	str	r2, [sp, #8]
 8007600:	f7f9 fa6c 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8007604:	9a02      	ldr	r2, [sp, #8]
 8007606:	f8df c104 	ldr.w	ip, [pc, #260]	; 800770c <main+0x13b4>
 800760a:	f1c9 00ac 	rsb	r0, r9, #172	; 0xac
 800760e:	f1c5 0124 	rsb	r1, r5, #36	; 0x24
 8007612:	4613      	mov	r3, r2
 8007614:	b289      	uxth	r1, r1
 8007616:	4622      	mov	r2, r4
 8007618:	f8cd c000 	str.w	ip, [sp]
 800761c:	b280      	uxth	r0, r0
 800761e:	f7f9 fa5d 	bl	8000adc <LCD_Rect_Fill>
 8007622:	1e74      	subs	r4, r6, #1
		if (P < 0)
 8007624:	2f00      	cmp	r7, #0
			P = (P + 5) + (2 * (a_ - b_));
 8007626:	eba4 0408 	sub.w	r4, r4, r8
 800762a:	f107 0205 	add.w	r2, r7, #5
			P = (P + 3) + (2 * a_);
 800762e:	f107 0103 	add.w	r1, r7, #3
		if (P < 0)
 8007632:	f2c0 8252 	blt.w	8007ada <main+0x1782>
			b_--;
 8007636:	f108 38ff 	add.w	r8, r8, #4294967295
	while (a_ <= b_)
 800763a:	4546      	cmp	r6, r8
			P = (P + 5) + (2 * (a_ - b_));
 800763c:	eb02 0744 	add.w	r7, r2, r4, lsl #1
	while (a_ <= b_)
 8007640:	f10a 0a02 	add.w	sl, sl, #2
 8007644:	fa1f f988 	uxth.w	r9, r8
 8007648:	f106 0601 	add.w	r6, r6, #1
 800764c:	ddc4      	ble.n	80075d8 <main+0x1280>
 800764e:	f04f 0807 	mov.w	r8, #7
 8007652:	f04f 0a00 	mov.w	sl, #0
 8007656:	2601      	movs	r6, #1
 8007658:	f06f 0705 	mvn.w	r7, #5
 800765c:	46c1      	mov	r9, r8
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 800765e:	ea4f 0449 	mov.w	r4, r9, lsl #1
 8007662:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800770c <main+0x13b4>
 8007666:	b2b5      	uxth	r5, r6
 8007668:	3401      	adds	r4, #1
 800766a:	b2a4      	uxth	r4, r4
 800766c:	f10a 0201 	add.w	r2, sl, #1
 8007670:	f1c9 014b 	rsb	r1, r9, #75	; 0x4b
 8007674:	f1c5 00ad 	rsb	r0, r5, #173	; 0xad
 8007678:	4623      	mov	r3, r4
 800767a:	b292      	uxth	r2, r2
 800767c:	b289      	uxth	r1, r1
 800767e:	b280      	uxth	r0, r0
 8007680:	f8cd c000 	str.w	ip, [sp]
 8007684:	9202      	str	r2, [sp, #8]
 8007686:	f7f9 fa29 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 800768a:	9a02      	ldr	r2, [sp, #8]
 800768c:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800770c <main+0x13b4>
 8007690:	f1c9 00ac 	rsb	r0, r9, #172	; 0xac
 8007694:	f1c5 014c 	rsb	r1, r5, #76	; 0x4c
 8007698:	4613      	mov	r3, r2
 800769a:	b289      	uxth	r1, r1
 800769c:	4622      	mov	r2, r4
 800769e:	f8cd c000 	str.w	ip, [sp]
 80076a2:	b280      	uxth	r0, r0
 80076a4:	f7f9 fa1a 	bl	8000adc <LCD_Rect_Fill>
 80076a8:	1e74      	subs	r4, r6, #1
		if (P < 0)
 80076aa:	2f00      	cmp	r7, #0
			P = (P + 5) + (2 * (a_ - b_));
 80076ac:	eba4 0408 	sub.w	r4, r4, r8
 80076b0:	f107 0205 	add.w	r2, r7, #5
			P = (P + 3) + (2 * a_);
 80076b4:	f107 0103 	add.w	r1, r7, #3
		if (P < 0)
 80076b8:	f2c0 8205 	blt.w	8007ac6 <main+0x176e>
			b_--;
 80076bc:	f108 38ff 	add.w	r8, r8, #4294967295
	while (a_ <= b_)
 80076c0:	4546      	cmp	r6, r8
			P = (P + 5) + (2 * (a_ - b_));
 80076c2:	eb02 0744 	add.w	r7, r2, r4, lsl #1
	while (a_ <= b_)
 80076c6:	f10a 0a02 	add.w	sl, sl, #2
 80076ca:	fa1f f988 	uxth.w	r9, r8
 80076ce:	f106 0601 	add.w	r6, r6, #1
 80076d2:	ddc4      	ble.n	800765e <main+0x1306>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80076d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80076d8:	4b0d      	ldr	r3, [pc, #52]	; (8007710 <main+0x13b8>)
 80076da:	611a      	str	r2, [r3, #16]
			if (rtcMinLast != rtcMin) {
 80076dc:	4c0d      	ldr	r4, [pc, #52]	; (8007714 <main+0x13bc>)
 80076de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e0:	7b22      	ldrb	r2, [r4, #12]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	f000 80bb 	beq.w	800785e <main+0x1506>
				sprintf(clockPrint, "%02d", rtcMinLast);
 80076e8:	490b      	ldr	r1, [pc, #44]	; (8007718 <main+0x13c0>)
 80076ea:	4658      	mov	r0, fp
 80076ec:	f001 faae 	bl	8008c4c <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 80076f0:	2200      	movs	r2, #0
 80076f2:	4659      	mov	r1, fp
 80076f4:	20b4      	movs	r0, #180	; 0xb4
 80076f6:	f7fc fc01 	bl	8003efc <LCD_Font.constprop.1>
				sprintf(clockPrint, "%02d", rtcMin);
 80076fa:	9f07      	ldr	r7, [sp, #28]
 80076fc:	4906      	ldr	r1, [pc, #24]	; (8007718 <main+0x13c0>)
 80076fe:	f897 20d5 	ldrb.w	r2, [r7, #213]	; 0xd5
 8007702:	4658      	mov	r0, fp
 8007704:	f001 faa2 	bl	8008c4c <siprintf>
 8007708:	e008      	b.n	800771c <main+0x13c4>
 800770a:	bf00      	nop
 800770c:	00ffbf00 	.word	0x00ffbf00
 8007710:	40011000 	.word	0x40011000
 8007714:	20000000 	.word	0x20000000
 8007718:	0801d238 	.word	0x0801d238
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, HUE_14);
 800771c:	4a90      	ldr	r2, [pc, #576]	; (8007960 <main+0x1608>)
 800771e:	4659      	mov	r1, fp
 8007720:	20b4      	movs	r0, #180	; 0xb4
 8007722:	f7fc fbeb 	bl	8003efc <LCD_Font.constprop.1>
				if (rtcHrsLast != rtcHrs) {
 8007726:	7b62      	ldrb	r2, [r4, #13]
 8007728:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800772c:	4293      	cmp	r3, r2
 800772e:	f000 808e 	beq.w	800784e <main+0x14f6>
					sprintf(clockPrint, "%02d", rtcHrsLast);
 8007732:	498c      	ldr	r1, [pc, #560]	; (8007964 <main+0x160c>)
 8007734:	4658      	mov	r0, fp
 8007736:	f001 fa89 	bl	8008c4c <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 800773a:	2200      	movs	r2, #0
 800773c:	4659      	mov	r1, fp
 800773e:	4610      	mov	r0, r2
 8007740:	f7fc fbdc 	bl	8003efc <LCD_Font.constprop.1>
					sprintf(clockPrint, "%02d", rtcHrs);
 8007744:	f897 20d6 	ldrb.w	r2, [r7, #214]	; 0xd6
 8007748:	4986      	ldr	r1, [pc, #536]	; (8007964 <main+0x160c>)
 800774a:	4658      	mov	r0, fp
 800774c:	f001 fa7e 	bl	8008c4c <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, HUE_14);
 8007750:	4659      	mov	r1, fp
 8007752:	2000      	movs	r0, #0
 8007754:	4a82      	ldr	r2, [pc, #520]	; (8007960 <main+0x1608>)
 8007756:	f7fc fbd1 	bl	8003efc <LCD_Font.constprop.1>
					if (rtcDayLast != rtcDay) {
 800775a:	f897 40d7 	ldrb.w	r4, [r7, #215]	; 0xd7
 800775e:	f897 34bf 	ldrb.w	r3, [r7, #1215]	; 0x4bf
 8007762:	42a3      	cmp	r3, r4
 8007764:	d062      	beq.n	800782c <main+0x14d4>
						LCD_Font(2, 130, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_36, 1, BLACK);
 8007766:	2607      	movs	r6, #7
 8007768:	1d63      	adds	r3, r4, #5
 800776a:	fbb3 f1f6 	udiv	r1, r3, r6
 800776e:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8007968 <main+0x1610>
 8007772:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007776:	1a5b      	subs	r3, r3, r1
 8007778:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800777c:	f8d3 15f8 	ldr.w	r1, [r3, #1528]	; 0x5f8
 8007780:	2200      	movs	r2, #0
 8007782:	2002      	movs	r0, #2
						LCD_Font(2, 130, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_36, 1, GRAY);
 8007784:	3406      	adds	r4, #6
						LCD_Font(2, 130, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_36, 1, BLACK);
 8007786:	f7fc fb71 	bl	8003e6c <LCD_Font.constprop.0>
						LCD_Font(2, 130, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_36, 1, GRAY);
 800778a:	fbb4 f6f6 	udiv	r6, r4, r6
						LCD_Font(260, 130, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_36, 1, BLACK);
 800778e:	250c      	movs	r5, #12
						LCD_Font(2, 130, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_36, 1, GRAY);
 8007790:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8007794:	1ba4      	subs	r4, r4, r6
 8007796:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800779a:	f8d3 15f8 	ldr.w	r1, [r3, #1528]	; 0x5f8
 800779e:	2002      	movs	r0, #2
 80077a0:	4a72      	ldr	r2, [pc, #456]	; (800796c <main+0x1614>)
 80077a2:	f7fc fb63 	bl	8003e6c <LCD_Font.constprop.0>
						LCD_Font(260, 130, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_36, 1, BLACK);
 80077a6:	f897 40d9 	ldrb.w	r4, [r7, #217]	; 0xd9
 80077aa:	2200      	movs	r2, #0
 80077ac:	f104 030a 	add.w	r3, r4, #10
 80077b0:	fbb3 f1f5 	udiv	r1, r3, r5
 80077b4:	fb05 3311 	mls	r3, r5, r1, r3
 80077b8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80077bc:	f8d3 1614 	ldr.w	r1, [r3, #1556]	; 0x614
 80077c0:	f44f 7082 	mov.w	r0, #260	; 0x104
						LCD_Font(260, 130, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_36, 1, GRAY);
 80077c4:	340b      	adds	r4, #11
						LCD_Font(260, 130, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_36, 1, BLACK);
 80077c6:	f7fc fb51 	bl	8003e6c <LCD_Font.constprop.0>
						LCD_Font(260, 130, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_36, 1, GRAY);
 80077ca:	fbb4 f3f5 	udiv	r3, r4, r5
 80077ce:	fb05 4413 	mls	r4, r5, r3, r4
 80077d2:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80077d6:	f8d3 1614 	ldr.w	r1, [r3, #1556]	; 0x614
 80077da:	f44f 7082 	mov.w	r0, #260	; 0x104
 80077de:	4a63      	ldr	r2, [pc, #396]	; (800796c <main+0x1614>)
 80077e0:	f7fc fb44 	bl	8003e6c <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 80077e4:	f897 34c2 	ldrb.w	r3, [r7, #1218]	; 0x4c2
 80077e8:	4961      	ldr	r1, [pc, #388]	; (8007970 <main+0x1618>)
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	f897 34c0 	ldrb.w	r3, [r7, #1216]	; 0x4c0
 80077f0:	f897 24c1 	ldrb.w	r2, [r7, #1217]	; 0x4c1
 80077f4:	4658      	mov	r0, fp
 80077f6:	f001 fa29 	bl	8008c4c <siprintf>
						LCD_Font(80, 130, clockPrint, &DejaVu_Sans_36, 1, BLACK);
 80077fa:	2200      	movs	r2, #0
 80077fc:	4659      	mov	r1, fp
 80077fe:	2050      	movs	r0, #80	; 0x50
 8007800:	f7fc fb34 	bl	8003e6c <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear);
 8007804:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8007808:	4959      	ldr	r1, [pc, #356]	; (8007970 <main+0x1618>)
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8007810:	f897 20d8 	ldrb.w	r2, [r7, #216]	; 0xd8
 8007814:	4658      	mov	r0, fp
 8007816:	f001 fa19 	bl	8008c4c <siprintf>
						LCD_Font(80, 130, clockPrint, &DejaVu_Sans_36, 1, GRAY);
 800781a:	4659      	mov	r1, fp
 800781c:	2050      	movs	r0, #80	; 0x50
 800781e:	4a53      	ldr	r2, [pc, #332]	; (800796c <main+0x1614>)
 8007820:	f7fc fb24 	bl	8003e6c <LCD_Font.constprop.0>
						rtcDayLast = rtcDay;
 8007824:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8007828:	f887 34bf 	strb.w	r3, [r7, #1215]	; 0x4bf
					rtcDateLast = rtcDate;
 800782c:	9a07      	ldr	r2, [sp, #28]
 800782e:	f892 30d8 	ldrb.w	r3, [r2, #216]	; 0xd8
 8007832:	f882 34c1 	strb.w	r3, [r2, #1217]	; 0x4c1
					rtcMonthLast = rtcMonth;
 8007836:	f892 30d9 	ldrb.w	r3, [r2, #217]	; 0xd9
 800783a:	f882 34c0 	strb.w	r3, [r2, #1216]	; 0x4c0
					rtcYearLast = rtcYear;
 800783e:	f892 30da 	ldrb.w	r3, [r2, #218]	; 0xda
 8007842:	f882 34c2 	strb.w	r3, [r2, #1218]	; 0x4c2
					rtcHrsLast = rtcHrs;
 8007846:	f892 30d6 	ldrb.w	r3, [r2, #214]	; 0xd6
 800784a:	4a4a      	ldr	r2, [pc, #296]	; (8007974 <main+0x161c>)
 800784c:	7353      	strb	r3, [r2, #13]
				rtcMinLast = rtcMin;
 800784e:	9a07      	ldr	r2, [sp, #28]
 8007850:	4948      	ldr	r1, [pc, #288]	; (8007974 <main+0x161c>)
 8007852:	f892 30d5 	ldrb.w	r3, [r2, #213]	; 0xd5
 8007856:	730b      	strb	r3, [r1, #12]
			rtcSecLast = rtcSec;
 8007858:	f892 30d4 	ldrb.w	r3, [r2, #212]	; 0xd4
 800785c:	9308      	str	r3, [sp, #32]
 800785e:	4a45      	ldr	r2, [pc, #276]	; (8007974 <main+0x161c>)
 8007860:	9b08      	ldr	r3, [sp, #32]
 8007862:	7213      	strb	r3, [r2, #8]
		DS3231_Update();
 8007864:	f7fc fa4e 	bl	8003d04 <DS3231_Update>

uint8_t DS3231_getSec(void) {
    return bcdToDec(rtcBuffer[0]);
 8007868:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800786c:	f89c 6058 	ldrb.w	r6, [ip, #88]	; 0x58
}

uint8_t DS3231_getMin(void) {
    return bcdToDec(rtcBuffer[1]);
 8007870:	f89c 5059 	ldrb.w	r5, [ip, #89]	; 0x59
    return ((val / 16 * 10) + (val % 16));
 8007874:	0937      	lsrs	r7, r6, #4
 8007876:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800787a:	f006 060f 	and.w	r6, r6, #15
 800787e:	eb06 0647 	add.w	r6, r6, r7, lsl #1
		rtcSec = DS3231_getSec();
 8007882:	4667      	mov	r7, ip
 8007884:	b2f6      	uxtb	r6, r6
}

uint8_t DS3231_getHrs(void) {
    return bcdToDec(rtcBuffer[2]);
 8007886:	f89c 405a 	ldrb.w	r4, [ip, #90]	; 0x5a
}

uint8_t DS3231_getDay(void) {
    return bcdToDec(rtcBuffer[3]);
 800788a:	f89c 005b 	ldrb.w	r0, [ip, #91]	; 0x5b
}

uint8_t DS3231_getDate(void) {
    return bcdToDec(rtcBuffer[4]);
 800788e:	f89c 105c 	ldrb.w	r1, [ip, #92]	; 0x5c
}

uint8_t DS3231_getMonth(void) {
    return bcdToDec(rtcBuffer[5]);
 8007892:	f89c 205d 	ldrb.w	r2, [ip, #93]	; 0x5d
}

uint8_t DS3231_getYear(void) {
    return bcdToDec(rtcBuffer[6]);
 8007896:	f89c 305e 	ldrb.w	r3, [ip, #94]	; 0x5e
 800789a:	46b4      	mov	ip, r6
    return ((val / 16 * 10) + (val % 16));
 800789c:	9608      	str	r6, [sp, #32]
 800789e:	f887 60d4 	strb.w	r6, [r7, #212]	; 0xd4
 80078a2:	092e      	lsrs	r6, r5, #4
 80078a4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80078a8:	f005 050f 	and.w	r5, r5, #15
 80078ac:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 80078b0:	b2ed      	uxtb	r5, r5
 80078b2:	9509      	str	r5, [sp, #36]	; 0x24
		rtcMin = DS3231_getMin();
 80078b4:	f887 50d5 	strb.w	r5, [r7, #213]	; 0xd5
 80078b8:	0925      	lsrs	r5, r4, #4
 80078ba:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80078be:	f004 040f 	and.w	r4, r4, #15
 80078c2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
		rtcHrs = DS3231_getHrs();
 80078c6:	f887 40d6 	strb.w	r4, [r7, #214]	; 0xd6
 80078ca:	0904      	lsrs	r4, r0, #4
 80078cc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80078d0:	f000 000f 	and.w	r0, r0, #15
 80078d4:	eb00 0044 	add.w	r0, r0, r4, lsl #1
		rtcDay = DS3231_getDay();
 80078d8:	f887 00d7 	strb.w	r0, [r7, #215]	; 0xd7
 80078dc:	0908      	lsrs	r0, r1, #4
 80078de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80078e2:	f001 010f 	and.w	r1, r1, #15
 80078e6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
		rtcDate = DS3231_getDate();
 80078ea:	f887 10d8 	strb.w	r1, [r7, #216]	; 0xd8
 80078ee:	0911      	lsrs	r1, r2, #4
 80078f0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80078f4:	f002 020f 	and.w	r2, r2, #15
 80078f8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
		rtcMonth = DS3231_getMonth();
 80078fc:	f887 20d9 	strb.w	r2, [r7, #217]	; 0xd9
 8007900:	091a      	lsrs	r2, r3, #4
 8007902:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
		rtcYear = DS3231_getYear();
 800790e:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
		if (rtcSecLast != rtcSec) {
 8007912:	4b18      	ldr	r3, [pc, #96]	; (8007974 <main+0x161c>)
 8007914:	7a1b      	ldrb	r3, [r3, #8]
 8007916:	4563      	cmp	r3, ip
 8007918:	d0a4      	beq.n	8007864 <main+0x150c>
 800791a:	2400      	movs	r4, #0
    uint16_t dt[1] = {0};
 800791c:	4626      	mov	r6, r4
 800791e:	4d16      	ldr	r5, [pc, #88]	; (8007978 <main+0x1620>)
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007920:	b2a0      	uxth	r0, r4
 8007922:	4659      	mov	r1, fp
    uint16_t dt[1] = {0};
 8007924:	f8ad 6060 	strh.w	r6, [sp, #96]	; 0x60
			for (uint16_t i = 0; i < 4096; i++) eeprom[i] = AT24XX_Read(i);
 8007928:	3401      	adds	r4, #1
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800792a:	f7fb fb6d 	bl	8003008 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 800792e:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8007932:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8007936:	f805 3f01 	strb.w	r3, [r5, #1]!
 800793a:	d1f1      	bne.n	8007920 <main+0x15c8>
 800793c:	f7ff b974 	b.w	8006c28 <main+0x8d0>
 8007940:	9a07      	ldr	r2, [sp, #28]
 8007942:	6812      	ldr	r2, [r2, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007944:	1b12      	subs	r2, r2, r4
 8007946:	2a64      	cmp	r2, #100	; 0x64
 8007948:	f200 8217 	bhi.w	8007d7a <main+0x1a22>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800794c:	680b      	ldr	r3, [r1, #0]
 800794e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8007952:	d0f5      	beq.n	8007940 <main+0x15e8>
    huart->gState = HAL_UART_STATE_READY;
 8007954:	2320      	movs	r3, #32
 8007956:	9a07      	ldr	r2, [sp, #28]
 8007958:	f882 30a9 	strb.w	r3, [r2, #169]	; 0xa9
    return HAL_OK;
 800795c:	e782      	b.n	8007864 <main+0x150c>
 800795e:	bf00      	nop
 8007960:	00ffbf00 	.word	0x00ffbf00
 8007964:	0801d238 	.word	0x0801d238
 8007968:	0800c8e0 	.word	0x0800c8e0
 800796c:	007f7f7f 	.word	0x007f7f7f
 8007970:	0801d240 	.word	0x0801d240
 8007974:	20000000 	.word	0x20000000
 8007978:	200006cf 	.word	0x200006cf
			a_++;
 800797c:	9905      	ldr	r1, [sp, #20]
			P = (P + 3) + (2 * a_);
 800797e:	eb00 0244 	add.w	r2, r0, r4, lsl #1
			a_++;
 8007982:	460b      	mov	r3, r1
			P = (P + 3) + (2 * a_);
 8007984:	9206      	str	r2, [sp, #24]
	while (a_ <= b_)
 8007986:	3301      	adds	r3, #1
 8007988:	1c62      	adds	r2, r4, #1
 800798a:	42b1      	cmp	r1, r6
 800798c:	9203      	str	r2, [sp, #12]
 800798e:	9305      	str	r3, [sp, #20]
 8007990:	f77f ada2 	ble.w	80074d8 <main+0x1180>
			if (rtcSec % 2 != 0) {
 8007994:	9b08      	ldr	r3, [sp, #32]
 8007996:	f013 0801 	ands.w	r8, r3, #1
 800799a:	f47f ae15 	bne.w	80075c8 <main+0x1270>
	b_ = radius;
 800799e:	f04f 0907 	mov.w	r9, #7
 80079a2:	2601      	movs	r6, #1
	P = 1 - radius;
 80079a4:	f06f 0705 	mvn.w	r7, #5
 80079a8:	46ca      	mov	sl, r9
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 80079aa:	f04f 0c00 	mov.w	ip, #0
 80079ae:	ea4f 044a 	mov.w	r4, sl, lsl #1
 80079b2:	b2b5      	uxth	r5, r6
 80079b4:	3401      	adds	r4, #1
 80079b6:	b2a4      	uxth	r4, r4
 80079b8:	f108 0201 	add.w	r2, r8, #1
 80079bc:	f1ca 0123 	rsb	r1, sl, #35	; 0x23
 80079c0:	f1c5 00ad 	rsb	r0, r5, #173	; 0xad
 80079c4:	4623      	mov	r3, r4
 80079c6:	b292      	uxth	r2, r2
 80079c8:	b289      	uxth	r1, r1
 80079ca:	b280      	uxth	r0, r0
 80079cc:	f8cd c000 	str.w	ip, [sp]
 80079d0:	9202      	str	r2, [sp, #8]
 80079d2:	f7f9 f883 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 80079d6:	f04f 0c00 	mov.w	ip, #0
 80079da:	9a02      	ldr	r2, [sp, #8]
 80079dc:	f1ca 00ac 	rsb	r0, sl, #172	; 0xac
 80079e0:	f1c5 0124 	rsb	r1, r5, #36	; 0x24
 80079e4:	4613      	mov	r3, r2
 80079e6:	b289      	uxth	r1, r1
 80079e8:	4622      	mov	r2, r4
 80079ea:	f8cd c000 	str.w	ip, [sp]
 80079ee:	b280      	uxth	r0, r0
 80079f0:	f7f9 f874 	bl	8000adc <LCD_Rect_Fill>
 80079f4:	1e74      	subs	r4, r6, #1
		if (P < 0)
 80079f6:	2f00      	cmp	r7, #0
			P = (P + 5) + (2 * (a_ - b_));
 80079f8:	eba4 0409 	sub.w	r4, r4, r9
 80079fc:	f107 0205 	add.w	r2, r7, #5
			P = (P + 3) + (2 * a_);
 8007a00:	f107 0103 	add.w	r1, r7, #3
		if (P < 0)
 8007a04:	db7c      	blt.n	8007b00 <main+0x17a8>
			b_--;
 8007a06:	f109 39ff 	add.w	r9, r9, #4294967295
	while (a_ <= b_)
 8007a0a:	454e      	cmp	r6, r9
			P = (P + 5) + (2 * (a_ - b_));
 8007a0c:	eb02 0744 	add.w	r7, r2, r4, lsl #1
	while (a_ <= b_)
 8007a10:	f108 0802 	add.w	r8, r8, #2
 8007a14:	fa1f fa89 	uxth.w	sl, r9
 8007a18:	f106 0601 	add.w	r6, r6, #1
 8007a1c:	ddc5      	ble.n	80079aa <main+0x1652>
 8007a1e:	f04f 0807 	mov.w	r8, #7
 8007a22:	f04f 0a00 	mov.w	sl, #0
 8007a26:	2601      	movs	r6, #1
 8007a28:	f06f 0705 	mvn.w	r7, #5
 8007a2c:	46c1      	mov	r9, r8
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8007a2e:	f04f 0c00 	mov.w	ip, #0
 8007a32:	ea4f 0449 	mov.w	r4, r9, lsl #1
 8007a36:	b2b5      	uxth	r5, r6
 8007a38:	3401      	adds	r4, #1
 8007a3a:	b2a4      	uxth	r4, r4
 8007a3c:	f10a 0201 	add.w	r2, sl, #1
 8007a40:	f1c9 014b 	rsb	r1, r9, #75	; 0x4b
 8007a44:	f1c5 00ad 	rsb	r0, r5, #173	; 0xad
 8007a48:	4623      	mov	r3, r4
 8007a4a:	b292      	uxth	r2, r2
 8007a4c:	b289      	uxth	r1, r1
 8007a4e:	b280      	uxth	r0, r0
 8007a50:	f8cd c000 	str.w	ip, [sp]
 8007a54:	9202      	str	r2, [sp, #8]
 8007a56:	f7f9 f841 	bl	8000adc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8007a5a:	f04f 0c00 	mov.w	ip, #0
 8007a5e:	9a02      	ldr	r2, [sp, #8]
 8007a60:	f1c9 00ac 	rsb	r0, r9, #172	; 0xac
 8007a64:	f1c5 014c 	rsb	r1, r5, #76	; 0x4c
 8007a68:	4613      	mov	r3, r2
 8007a6a:	b289      	uxth	r1, r1
 8007a6c:	4622      	mov	r2, r4
 8007a6e:	f8cd c000 	str.w	ip, [sp]
 8007a72:	b280      	uxth	r0, r0
 8007a74:	f7f9 f832 	bl	8000adc <LCD_Rect_Fill>
 8007a78:	1e74      	subs	r4, r6, #1
		if (P < 0)
 8007a7a:	2f00      	cmp	r7, #0
			P = (P + 5) + (2 * (a_ - b_));
 8007a7c:	eba4 0408 	sub.w	r4, r4, r8
 8007a80:	f107 0205 	add.w	r2, r7, #5
			P = (P + 3) + (2 * a_);
 8007a84:	f107 0103 	add.w	r1, r7, #3
		if (P < 0)
 8007a88:	db31      	blt.n	8007aee <main+0x1796>
			b_--;
 8007a8a:	f108 38ff 	add.w	r8, r8, #4294967295
	while (a_ <= b_)
 8007a8e:	4546      	cmp	r6, r8
			P = (P + 5) + (2 * (a_ - b_));
 8007a90:	eb02 0744 	add.w	r7, r2, r4, lsl #1
	while (a_ <= b_)
 8007a94:	f10a 0a02 	add.w	sl, sl, #2
 8007a98:	fa1f f988 	uxth.w	r9, r8
 8007a9c:	f106 0601 	add.w	r6, r6, #1
 8007aa0:	ddc5      	ble.n	8007a2e <main+0x16d6>
    GPIOx->BSRR = GPIO_Pin;
 8007aa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007aa6:	4bbf      	ldr	r3, [pc, #764]	; (8007da4 <main+0x1a4c>)
 8007aa8:	611a      	str	r2, [r3, #16]
 8007aaa:	e617      	b.n	80076dc <main+0x1384>
			a_++;
 8007aac:	9905      	ldr	r1, [sp, #20]
			P = (P + 3) + (2 * a_);
 8007aae:	eb00 0244 	add.w	r2, r0, r4, lsl #1
			a_++;
 8007ab2:	460b      	mov	r3, r1
			P = (P + 3) + (2 * a_);
 8007ab4:	9206      	str	r2, [sp, #24]
	while (a_ <= b_)
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	1c62      	adds	r2, r4, #1
 8007aba:	428e      	cmp	r6, r1
 8007abc:	9203      	str	r2, [sp, #12]
 8007abe:	9305      	str	r3, [sp, #20]
 8007ac0:	f6bf ac8c 	bge.w	80073dc <main+0x1084>
 8007ac4:	e4fd      	b.n	80074c2 <main+0x116a>
 8007ac6:	45b0      	cmp	r8, r6
			P = (P + 3) + (2 * a_);
 8007ac8:	eb0a 0701 	add.w	r7, sl, r1
	while (a_ <= b_)
 8007acc:	f106 0601 	add.w	r6, r6, #1
 8007ad0:	f10a 0a02 	add.w	sl, sl, #2
 8007ad4:	f6bf adc3 	bge.w	800765e <main+0x1306>
 8007ad8:	e5fc      	b.n	80076d4 <main+0x137c>
 8007ada:	45b0      	cmp	r8, r6
			P = (P + 3) + (2 * a_);
 8007adc:	eb0a 0701 	add.w	r7, sl, r1
	while (a_ <= b_)
 8007ae0:	f106 0601 	add.w	r6, r6, #1
 8007ae4:	f10a 0a02 	add.w	sl, sl, #2
 8007ae8:	f6bf ad76 	bge.w	80075d8 <main+0x1280>
 8007aec:	e5af      	b.n	800764e <main+0x12f6>
 8007aee:	45b0      	cmp	r8, r6
			P = (P + 3) + (2 * a_);
 8007af0:	eb0a 0701 	add.w	r7, sl, r1
	while (a_ <= b_)
 8007af4:	f106 0601 	add.w	r6, r6, #1
 8007af8:	f10a 0a02 	add.w	sl, sl, #2
 8007afc:	da97      	bge.n	8007a2e <main+0x16d6>
 8007afe:	e7d0      	b.n	8007aa2 <main+0x174a>
 8007b00:	45b1      	cmp	r9, r6
			P = (P + 3) + (2 * a_);
 8007b02:	eb08 0701 	add.w	r7, r8, r1
	while (a_ <= b_)
 8007b06:	f106 0601 	add.w	r6, r6, #1
 8007b0a:	f108 0802 	add.w	r8, r8, #2
 8007b0e:	f6bf af4c 	bge.w	80079aa <main+0x1652>
 8007b12:	e784      	b.n	8007a1e <main+0x16c6>
	pressure = (uint16_t)BME280_getPressure();
 8007b14:	f8ac 30f0 	strh.w	r3, [ip, #240]	; 0xf0
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8007b18:	e455      	b.n	80073c6 <main+0x106e>
        huart->gState  = HAL_UART_STATE_READY;
 8007b1a:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b1c:	68cb      	ldr	r3, [r1, #12]
 8007b1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b22:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b24:	694b      	ldr	r3, [r1, #20]
 8007b26:	f023 0301 	bic.w	r3, r3, #1
 8007b2a:	614b      	str	r3, [r1, #20]
        __HAL_UNLOCK(huart);
 8007b2c:	9b07      	ldr	r3, [sp, #28]
        huart->gState  = HAL_UART_STATE_READY;
 8007b2e:	f883 00a9 	strb.w	r0, [r3, #169]	; 0xa9
        __HAL_UNLOCK(huart);
 8007b32:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        huart->RxState = HAL_UART_STATE_READY;
 8007b36:	f883 00aa 	strb.w	r0, [r3, #170]	; 0xaa
 8007b3a:	e693      	b.n	8007864 <main+0x150c>
 8007b3c:	b672      	cpsid	i
	while (1)
 8007b3e:	e7fe      	b.n	8007b3e <main+0x17e6>
		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 8007b40:	9907      	ldr	r1, [sp, #28]
 8007b42:	4642      	mov	r2, r8
 8007b44:	e9d1 4540 	ldrd	r4, r5, [r1, #256]	; 0x100
 8007b48:	464b      	mov	r3, r9
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	f7fe f891 	bl	8005c74 <__aeabi_dcmpeq>
 8007b52:	2800      	cmp	r0, #0
 8007b54:	f47f aa60 	bne.w	8007018 <main+0xcc0>
			sprintf(weatherPrintH, "%.1f %%H", humidityLast);
 8007b58:	4622      	mov	r2, r4
 8007b5a:	462b      	mov	r3, r5
 8007b5c:	4992      	ldr	r1, [pc, #584]	; (8007da8 <main+0x1a50>)
 8007b5e:	4658      	mov	r0, fp
 8007b60:	f001 f874 	bl	8008c4c <siprintf>
			if (humidityLast >= 10)
 8007b64:	9907      	ldr	r1, [sp, #28]
 8007b66:	2200      	movs	r2, #0
 8007b68:	e9d1 0140 	ldrd	r0, r1, [r1, #256]	; 0x100
 8007b6c:	4b8f      	ldr	r3, [pc, #572]	; (8007dac <main+0x1a54>)
 8007b6e:	f7fe f89f 	bl	8005cb0 <__aeabi_dcmpge>
				LCD_Font(140, 187, weatherPrintH, &DejaVu_Sans_36, 1, BLACK);
 8007b72:	465a      	mov	r2, fp
 8007b74:	21bb      	movs	r1, #187	; 0xbb
			if (humidityLast >= 10)
 8007b76:	2800      	cmp	r0, #0
 8007b78:	f000 8124 	beq.w	8007dc4 <main+0x1a6c>
				LCD_Font(140, 187, weatherPrintH, &DejaVu_Sans_36, 1, BLACK);
 8007b7c:	208c      	movs	r0, #140	; 0x8c
 8007b7e:	f7fc fa07 	bl	8003f90 <LCD_Font.constprop.2>
			sprintf(weatherPrintH, "%.1f %%H", humidity);
 8007b82:	9c07      	ldr	r4, [sp, #28]
 8007b84:	4988      	ldr	r1, [pc, #544]	; (8007da8 <main+0x1a50>)
 8007b86:	e9d4 233a 	ldrd	r2, r3, [r4, #232]	; 0xe8
 8007b8a:	4658      	mov	r0, fp
 8007b8c:	f001 f85e 	bl	8008c4c <siprintf>
			if (humidity >= 10)
 8007b90:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
 8007b94:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	4b83      	ldr	r3, [pc, #524]	; (8007dac <main+0x1a54>)
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f7fe f886 	bl	8005cb0 <__aeabi_dcmpge>
				LCD_Font(140, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 8007ba4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ba8:	465a      	mov	r2, fp
 8007baa:	21bb      	movs	r1, #187	; 0xbb
			if (humidity >= 10)
 8007bac:	2800      	cmp	r0, #0
 8007bae:	f000 80f5 	beq.w	8007d9c <main+0x1a44>
				LCD_Font(140, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 8007bb2:	208c      	movs	r0, #140	; 0x8c
 8007bb4:	f7fd fb6e 	bl	8005294 <LCD_Font.constprop.3>
			humidityLast = humidity;
 8007bb8:	9b07      	ldr	r3, [sp, #28]
 8007bba:	e9c3 4540 	strd	r4, r5, [r3, #256]	; 0x100
 8007bbe:	f7ff ba2b 	b.w	8007018 <main+0xcc0>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bc2:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bca:	604b      	str	r3, [r1, #4]
 8007bcc:	f7ff b825 	b.w	8006c1a <main+0x8c2>
		if (!graphViewed) {
 8007bd0:	9a07      	ldr	r2, [sp, #28]
 8007bd2:	f892 34be 	ldrb.w	r3, [r2, #1214]	; 0x4be
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f47f abee 	bne.w	80073b8 <main+0x1060>
 8007bdc:	f7ff bafe 	b.w	80071dc <main+0xe84>
    hi2c->Lock = HAL_UNLOCKED;
 8007be0:	9a07      	ldr	r2, [sp, #28]
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007be2:	931a      	str	r3, [sp, #104]	; 0x68
 8007be4:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007be8:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bea:	69a3      	ldr	r3, [r4, #24]
 8007bec:	f043 0308 	orr.w	r3, r3, #8
 8007bf0:	61a3      	str	r3, [r4, #24]
 8007bf2:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007bf4:	921b      	str	r2, [sp, #108]	; 0x6c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bf6:	f003 0308 	and.w	r3, r3, #8
 8007bfa:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007bfc:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007c00:	2312      	movs	r3, #18
 8007c02:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c06:	f7f9 fc5f 	bl	80014c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007c0a:	69e3      	ldr	r3, [r4, #28]
 8007c0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c10:	61e3      	str	r3, [r4, #28]
 8007c12:	69e3      	ldr	r3, [r4, #28]
 8007c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c18:	9311      	str	r3, [sp, #68]	; 0x44
 8007c1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007c1c:	f7fe bd1b 	b.w	8006656 <main+0x2fe>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007c20:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8007c24:	3278      	adds	r2, #120	; 0x78
 8007c26:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007c28:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007c2a:	f812 5c18 	ldrb.w	r5, [r2, #-24]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007c2e:	d552      	bpl.n	8007cd6 <main+0x197e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007c30:	6863      	ldr	r3, [r4, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007c32:	4a5f      	ldr	r2, [pc, #380]	; (8007db0 <main+0x1a58>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007c34:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007c38:	fb02 f505 	mul.w	r5, r2, r5
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007c3c:	3378      	adds	r3, #120	; 0x78
 8007c3e:	446b      	add	r3, sp
 8007c40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007c44:	fbb5 f5f3 	udiv	r5, r5, r3
 8007c48:	f7fe bc7e 	b.w	8006548 <main+0x1f0>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007c4c:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8007c50:	fb04 f101 	mul.w	r1, r4, r1
 8007c54:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8007c58:	fbb1 f1f4 	udiv	r1, r1, r4
 8007c5c:	3101      	adds	r1, #1
 8007c5e:	4301      	orrs	r1, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007c60:	9c07      	ldr	r4, [sp, #28]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007c62:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007c64:	69d8      	ldr	r0, [r3, #28]
 8007c66:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8007c6a:	f420 404f 	bic.w	r0, r0, #52992	; 0xcf00
 8007c6e:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8007c72:	f1bc 0f00 	cmp.w	ip, #0
 8007c76:	d11c      	bne.n	8007cb2 <main+0x195a>
 8007c78:	1e57      	subs	r7, r2, #1
 8007c7a:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 8007c7e:	fbb7 f4f4 	udiv	r4, r7, r4
 8007c82:	0524      	lsls	r4, r4, #20
 8007c84:	f514 1f80 	cmn.w	r4, #1048576	; 0x100000
 8007c88:	bf14      	ite	ne
 8007c8a:	2400      	movne	r4, #0
 8007c8c:	2401      	moveq	r4, #1
 8007c8e:	0071      	lsls	r1, r6, #1
 8007c90:	b964      	cbnz	r4, 8007cac <main+0x1954>
 8007c92:	f1bc 0f00 	cmp.w	ip, #0
 8007c96:	d15b      	bne.n	8007d50 <main+0x19f8>
 8007c98:	198a      	adds	r2, r1, r6
 8007c9a:	fbb7 f2f2 	udiv	r2, r7, r2
 8007c9e:	3201      	adds	r2, #1
 8007ca0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007ca4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ca8:	f7fe bd1f 	b.w	80066ea <main+0x392>
 8007cac:	2201      	movs	r2, #1
 8007cae:	f7fe bd1c 	b.w	80066ea <main+0x392>
 8007cb2:	2419      	movs	r4, #25
 8007cb4:	fb06 f404 	mul.w	r4, r6, r4
 8007cb8:	1e57      	subs	r7, r2, #1
 8007cba:	fbb7 f4f4 	udiv	r4, r7, r4
 8007cbe:	0524      	lsls	r4, r4, #20
 8007cc0:	f514 1f80 	cmn.w	r4, #1048576	; 0x100000
 8007cc4:	bf14      	ite	ne
 8007cc6:	2400      	movne	r4, #0
 8007cc8:	2401      	moveq	r4, #1
 8007cca:	0071      	lsls	r1, r6, #1
 8007ccc:	e7e0      	b.n	8007c90 <main+0x1938>
 8007cce:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007cd2:	f7fe bd0a 	b.w	80066ea <main+0x392>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007cd6:	4b37      	ldr	r3, [pc, #220]	; (8007db4 <main+0x1a5c>)
 8007cd8:	fb03 f505 	mul.w	r5, r3, r5
 8007cdc:	f7fe bc34 	b.w	8006548 <main+0x1f0>
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007ce0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	4934      	ldr	r1, [pc, #208]	; (8007db8 <main+0x1a60>)
 8007ce8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007cec:	440b      	add	r3, r1
 8007cee:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 8007cf2:	40dd      	lsrs	r5, r3
 8007cf4:	f7fe bd97 	b.w	8006826 <main+0x4ce>
    huart->Lock = HAL_UNLOCKED;
 8007cf8:	9b07      	ldr	r3, [sp, #28]
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cfa:	941a      	str	r4, [sp, #104]	; 0x68
 8007cfc:	f883 40a8 	strb.w	r4, [r3, #168]	; 0xa8
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007d00:	4b2e      	ldr	r3, [pc, #184]	; (8007dbc <main+0x1a64>)
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007d02:	2003      	movs	r0, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8007d04:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d06:	4659      	mov	r1, fp
    __HAL_RCC_USART1_CLK_ENABLE();
 8007d08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d0c:	619a      	str	r2, [r3, #24]
 8007d0e:	699a      	ldr	r2, [r3, #24]
 8007d10:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007d14:	9214      	str	r2, [sp, #80]	; 0x50
 8007d16:	9a14      	ldr	r2, [sp, #80]	; 0x50
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d18:	699a      	ldr	r2, [r3, #24]
 8007d1a:	f042 0204 	orr.w	r2, r2, #4
 8007d1e:	619a      	str	r2, [r3, #24]
 8007d20:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007d22:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d26:	f003 0304 	and.w	r3, r3, #4
 8007d2a:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007d2e:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007d30:	901b      	str	r0, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d32:	4823      	ldr	r0, [pc, #140]	; (8007dc0 <main+0x1a68>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007d34:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d38:	f7f9 fbc6 	bl	80014c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007d3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d40:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d42:	941a      	str	r4, [sp, #104]	; 0x68
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007d44:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d48:	f7f9 fbbe 	bl	80014c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007d4c:	f7fe bd15 	b.w	800677a <main+0x422>
 8007d50:	2219      	movs	r2, #25
 8007d52:	fb06 f202 	mul.w	r2, r6, r2
 8007d56:	fbb7 f2f2 	udiv	r2, r7, r2
 8007d5a:	3201      	adds	r2, #1
 8007d5c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007d60:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007d64:	f7fe bcc1 	b.w	80066ea <main+0x392>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d68:	9b07      	ldr	r3, [sp, #28]
 8007d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
      pdata16bits = (uint16_t *) pData;
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	bf0a      	itet	eq
 8007d70:	463d      	moveq	r5, r7
 8007d72:	2500      	movne	r5, #0
 8007d74:	2700      	moveq	r7, #0
 8007d76:	f7fe bf25 	b.w	8006bc4 <main+0x86c>
        huart->gState  = HAL_UART_STATE_READY;
 8007d7a:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d7c:	68ca      	ldr	r2, [r1, #12]
 8007d7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007d82:	60ca      	str	r2, [r1, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d84:	694a      	ldr	r2, [r1, #20]
 8007d86:	f022 0201 	bic.w	r2, r2, #1
 8007d8a:	614a      	str	r2, [r1, #20]
        __HAL_UNLOCK(huart);
 8007d8c:	9a07      	ldr	r2, [sp, #28]
        huart->gState  = HAL_UART_STATE_READY;
 8007d8e:	f882 00a9 	strb.w	r0, [r2, #169]	; 0xa9
        __HAL_UNLOCK(huart);
 8007d92:	f882 30a8 	strb.w	r3, [r2, #168]	; 0xa8
        huart->RxState = HAL_UART_STATE_READY;
 8007d96:	f882 00aa 	strb.w	r0, [r2, #170]	; 0xaa
 8007d9a:	e563      	b.n	8007864 <main+0x150c>
			else LCD_Font(166, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 8007d9c:	20a6      	movs	r0, #166	; 0xa6
 8007d9e:	f7fd fa79 	bl	8005294 <LCD_Font.constprop.3>
 8007da2:	e709      	b.n	8007bb8 <main+0x1860>
 8007da4:	40011000 	.word	0x40011000
 8007da8:	0801d20c 	.word	0x0801d20c
 8007dac:	40240000 	.word	0x40240000
 8007db0:	007a1200 	.word	0x007a1200
 8007db4:	003d0900 	.word	0x003d0900
 8007db8:	0800c8e0 	.word	0x0800c8e0
 8007dbc:	40021000 	.word	0x40021000
 8007dc0:	40010800 	.word	0x40010800
			else LCD_Font(166, 187, weatherPrintH, &DejaVu_Sans_36, 1, BLACK);
 8007dc4:	20a6      	movs	r0, #166	; 0xa6
 8007dc6:	f7fc f8e3 	bl	8003f90 <LCD_Font.constprop.2>
 8007dca:	e6da      	b.n	8007b82 <main+0x182a>
			if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8007dcc:	4620      	mov	r0, r4
 8007dce:	4629      	mov	r1, r5
 8007dd0:	4b34      	ldr	r3, [pc, #208]	; (8007ea4 <main+0x1b4c>)
 8007dd2:	f7fd ff77 	bl	8005cc4 <__aeabi_dcmpgt>
 8007dd6:	bb30      	cbnz	r0, 8007e26 <main+0x1ace>
			else if (temperature < 10 && temperature > 0) {
 8007dd8:	2200      	movs	r2, #0
 8007dda:	2300      	movs	r3, #0
 8007ddc:	4620      	mov	r0, r4
 8007dde:	4629      	mov	r1, r5
 8007de0:	f7fd ff70 	bl	8005cc4 <__aeabi_dcmpgt>
 8007de4:	b988      	cbnz	r0, 8007e0a <main+0x1ab2>
				sprintf(weatherPrintT, "%2d 'C", (int8_t)temperature);
 8007de6:	4629      	mov	r1, r5
 8007de8:	4620      	mov	r0, r4
 8007dea:	f7fd ff8b 	bl	8005d04 <__aeabi_d2iz>
 8007dee:	4602      	mov	r2, r0
 8007df0:	492d      	ldr	r1, [pc, #180]	; (8007ea8 <main+0x1b50>)
 8007df2:	4658      	mov	r0, fp
 8007df4:	b252      	sxtb	r2, r2
 8007df6:	f000 ff29 	bl	8008c4c <siprintf>
				LCD_Font(0, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
 8007dfa:	465a      	mov	r2, fp
 8007dfc:	21bb      	movs	r1, #187	; 0xbb
 8007dfe:	2000      	movs	r0, #0
 8007e00:	4b2a      	ldr	r3, [pc, #168]	; (8007eac <main+0x1b54>)
 8007e02:	f7fd fa47 	bl	8005294 <LCD_Font.constprop.3>
 8007e06:	f7ff b8cd 	b.w	8006fa4 <main+0xc4c>
				sprintf(weatherPrintT, "%.1f 'C", temperature);
 8007e0a:	4622      	mov	r2, r4
 8007e0c:	462b      	mov	r3, r5
 8007e0e:	4658      	mov	r0, fp
 8007e10:	4927      	ldr	r1, [pc, #156]	; (8007eb0 <main+0x1b58>)
 8007e12:	f000 ff1b 	bl	8008c4c <siprintf>
				LCD_Font(26, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
 8007e16:	465a      	mov	r2, fp
 8007e18:	21bb      	movs	r1, #187	; 0xbb
 8007e1a:	201a      	movs	r0, #26
 8007e1c:	4b23      	ldr	r3, [pc, #140]	; (8007eac <main+0x1b54>)
 8007e1e:	f7fd fa39 	bl	8005294 <LCD_Font.constprop.3>
 8007e22:	f7ff b8bf 	b.w	8006fa4 <main+0xc4c>
				sprintf(weatherPrintT, "%.1f 'C", temperature);
 8007e26:	4622      	mov	r2, r4
 8007e28:	462b      	mov	r3, r5
 8007e2a:	4658      	mov	r0, fp
 8007e2c:	4920      	ldr	r1, [pc, #128]	; (8007eb0 <main+0x1b58>)
 8007e2e:	f000 ff0d 	bl	8008c4c <siprintf>
				LCD_Font(0, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
 8007e32:	e7e2      	b.n	8007dfa <main+0x1aa2>
			if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8007e34:	4620      	mov	r0, r4
 8007e36:	4629      	mov	r1, r5
 8007e38:	4b1a      	ldr	r3, [pc, #104]	; (8007ea4 <main+0x1b4c>)
 8007e3a:	f7fd ff43 	bl	8005cc4 <__aeabi_dcmpgt>
 8007e3e:	bb20      	cbnz	r0, 8007e8a <main+0x1b32>
			else if (temperatureLast < 10 && temperatureLast > 0) {
 8007e40:	2200      	movs	r2, #0
 8007e42:	2300      	movs	r3, #0
 8007e44:	4620      	mov	r0, r4
 8007e46:	4629      	mov	r1, r5
 8007e48:	f7fd ff3c 	bl	8005cc4 <__aeabi_dcmpgt>
 8007e4c:	b980      	cbnz	r0, 8007e70 <main+0x1b18>
				sprintf(weatherPrintT, "%2d", (int8_t)temperatureLast);
 8007e4e:	4629      	mov	r1, r5
 8007e50:	4620      	mov	r0, r4
 8007e52:	f7fd ff57 	bl	8005d04 <__aeabi_d2iz>
 8007e56:	4602      	mov	r2, r0
 8007e58:	4916      	ldr	r1, [pc, #88]	; (8007eb4 <main+0x1b5c>)
 8007e5a:	4658      	mov	r0, fp
 8007e5c:	b252      	sxtb	r2, r2
 8007e5e:	f000 fef5 	bl	8008c4c <siprintf>
				LCD_Font(0, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
 8007e62:	465a      	mov	r2, fp
 8007e64:	21bb      	movs	r1, #187	; 0xbb
 8007e66:	2000      	movs	r0, #0
 8007e68:	f7fc f892 	bl	8003f90 <LCD_Font.constprop.2>
 8007e6c:	f7ff b873 	b.w	8006f56 <main+0xbfe>
				sprintf(weatherPrintT, "%.1f 'C", temperatureLast);
 8007e70:	4622      	mov	r2, r4
 8007e72:	462b      	mov	r3, r5
 8007e74:	4658      	mov	r0, fp
 8007e76:	490e      	ldr	r1, [pc, #56]	; (8007eb0 <main+0x1b58>)
 8007e78:	f000 fee8 	bl	8008c4c <siprintf>
				LCD_Font(26, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
 8007e7c:	465a      	mov	r2, fp
 8007e7e:	21bb      	movs	r1, #187	; 0xbb
 8007e80:	201a      	movs	r0, #26
 8007e82:	f7fc f885 	bl	8003f90 <LCD_Font.constprop.2>
 8007e86:	f7ff b866 	b.w	8006f56 <main+0xbfe>
				sprintf(weatherPrintT, "%.1f 'C", temperatureLast);
 8007e8a:	4622      	mov	r2, r4
 8007e8c:	462b      	mov	r3, r5
 8007e8e:	4658      	mov	r0, fp
 8007e90:	4907      	ldr	r1, [pc, #28]	; (8007eb0 <main+0x1b58>)
 8007e92:	f000 fedb 	bl	8008c4c <siprintf>
				LCD_Font(0, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
 8007e96:	465a      	mov	r2, fp
 8007e98:	21bb      	movs	r1, #187	; 0xbb
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	f7fc f878 	bl	8003f90 <LCD_Font.constprop.2>
 8007ea0:	f7ff b859 	b.w	8006f56 <main+0xbfe>
 8007ea4:	c0240000 	.word	0xc0240000
 8007ea8:	0801d204 	.word	0x0801d204
 8007eac:	00ffa500 	.word	0x00ffa500
 8007eb0:	0801d1f8 	.word	0x0801d1f8
 8007eb4:	0801d200 	.word	0x0801d200

08007eb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007eb8:	480c      	ldr	r0, [pc, #48]	; (8007eec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007eba:	490d      	ldr	r1, [pc, #52]	; (8007ef0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007ebc:	4a0d      	ldr	r2, [pc, #52]	; (8007ef4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007ec0:	e002      	b.n	8007ec8 <LoopCopyDataInit>

08007ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007ec6:	3304      	adds	r3, #4

08007ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007ecc:	d3f9      	bcc.n	8007ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007ece:	4a0a      	ldr	r2, [pc, #40]	; (8007ef8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007ed0:	4c0a      	ldr	r4, [pc, #40]	; (8007efc <LoopFillZerobss+0x22>)
  movs r3, #0
 8007ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007ed4:	e001      	b.n	8007eda <LoopFillZerobss>

08007ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007ed8:	3204      	adds	r2, #4

08007eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007edc:	d3fb      	bcc.n	8007ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007ede:	f7fd fa9b 	bl	8005418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007ee2:	f000 f815 	bl	8007f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007ee6:	f7fe fa37 	bl	8006358 <main>
  bx lr
 8007eea:	4770      	bx	lr
  ldr r0, =_sdata
 8007eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007ef0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8007ef4:	0801d76c 	.word	0x0801d76c
  ldr r2, =_sbss
 8007ef8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8007efc:	200016e0 	.word	0x200016e0

08007f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007f00:	e7fe      	b.n	8007f00 <ADC1_2_IRQHandler>
	...

08007f04 <__errno>:
 8007f04:	4b01      	ldr	r3, [pc, #4]	; (8007f0c <__errno+0x8>)
 8007f06:	6818      	ldr	r0, [r3, #0]
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	20000010 	.word	0x20000010

08007f10 <__libc_init_array>:
 8007f10:	b570      	push	{r4, r5, r6, lr}
 8007f12:	2600      	movs	r6, #0
 8007f14:	4d0c      	ldr	r5, [pc, #48]	; (8007f48 <__libc_init_array+0x38>)
 8007f16:	4c0d      	ldr	r4, [pc, #52]	; (8007f4c <__libc_init_array+0x3c>)
 8007f18:	1b64      	subs	r4, r4, r5
 8007f1a:	10a4      	asrs	r4, r4, #2
 8007f1c:	42a6      	cmp	r6, r4
 8007f1e:	d109      	bne.n	8007f34 <__libc_init_array+0x24>
 8007f20:	f004 fcd2 	bl	800c8c8 <_init>
 8007f24:	2600      	movs	r6, #0
 8007f26:	4d0a      	ldr	r5, [pc, #40]	; (8007f50 <__libc_init_array+0x40>)
 8007f28:	4c0a      	ldr	r4, [pc, #40]	; (8007f54 <__libc_init_array+0x44>)
 8007f2a:	1b64      	subs	r4, r4, r5
 8007f2c:	10a4      	asrs	r4, r4, #2
 8007f2e:	42a6      	cmp	r6, r4
 8007f30:	d105      	bne.n	8007f3e <__libc_init_array+0x2e>
 8007f32:	bd70      	pop	{r4, r5, r6, pc}
 8007f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f38:	4798      	blx	r3
 8007f3a:	3601      	adds	r6, #1
 8007f3c:	e7ee      	b.n	8007f1c <__libc_init_array+0xc>
 8007f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f42:	4798      	blx	r3
 8007f44:	3601      	adds	r6, #1
 8007f46:	e7f2      	b.n	8007f2e <__libc_init_array+0x1e>
 8007f48:	0801d764 	.word	0x0801d764
 8007f4c:	0801d764 	.word	0x0801d764
 8007f50:	0801d764 	.word	0x0801d764
 8007f54:	0801d768 	.word	0x0801d768

08007f58 <memset>:
 8007f58:	4603      	mov	r3, r0
 8007f5a:	4402      	add	r2, r0
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d100      	bne.n	8007f62 <memset+0xa>
 8007f60:	4770      	bx	lr
 8007f62:	f803 1b01 	strb.w	r1, [r3], #1
 8007f66:	e7f9      	b.n	8007f5c <memset+0x4>

08007f68 <__cvt>:
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f6e:	461f      	mov	r7, r3
 8007f70:	bfbb      	ittet	lt
 8007f72:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007f76:	461f      	movlt	r7, r3
 8007f78:	2300      	movge	r3, #0
 8007f7a:	232d      	movlt	r3, #45	; 0x2d
 8007f7c:	b088      	sub	sp, #32
 8007f7e:	4614      	mov	r4, r2
 8007f80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f82:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007f84:	7013      	strb	r3, [r2, #0]
 8007f86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f88:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007f8c:	f023 0820 	bic.w	r8, r3, #32
 8007f90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f94:	d005      	beq.n	8007fa2 <__cvt+0x3a>
 8007f96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f9a:	d100      	bne.n	8007f9e <__cvt+0x36>
 8007f9c:	3501      	adds	r5, #1
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	e000      	b.n	8007fa4 <__cvt+0x3c>
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	aa07      	add	r2, sp, #28
 8007fa6:	9204      	str	r2, [sp, #16]
 8007fa8:	aa06      	add	r2, sp, #24
 8007faa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007fae:	e9cd 3500 	strd	r3, r5, [sp]
 8007fb2:	4622      	mov	r2, r4
 8007fb4:	463b      	mov	r3, r7
 8007fb6:	f001 fd83 	bl	8009ac0 <_dtoa_r>
 8007fba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	d102      	bne.n	8007fc8 <__cvt+0x60>
 8007fc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fc4:	07db      	lsls	r3, r3, #31
 8007fc6:	d522      	bpl.n	800800e <__cvt+0xa6>
 8007fc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fcc:	eb06 0905 	add.w	r9, r6, r5
 8007fd0:	d110      	bne.n	8007ff4 <__cvt+0x8c>
 8007fd2:	7833      	ldrb	r3, [r6, #0]
 8007fd4:	2b30      	cmp	r3, #48	; 0x30
 8007fd6:	d10a      	bne.n	8007fee <__cvt+0x86>
 8007fd8:	2200      	movs	r2, #0
 8007fda:	2300      	movs	r3, #0
 8007fdc:	4620      	mov	r0, r4
 8007fde:	4639      	mov	r1, r7
 8007fe0:	f7fd fe48 	bl	8005c74 <__aeabi_dcmpeq>
 8007fe4:	b918      	cbnz	r0, 8007fee <__cvt+0x86>
 8007fe6:	f1c5 0501 	rsb	r5, r5, #1
 8007fea:	f8ca 5000 	str.w	r5, [sl]
 8007fee:	f8da 3000 	ldr.w	r3, [sl]
 8007ff2:	4499      	add	r9, r3
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	4639      	mov	r1, r7
 8007ffc:	f7fd fe3a 	bl	8005c74 <__aeabi_dcmpeq>
 8008000:	b108      	cbz	r0, 8008006 <__cvt+0x9e>
 8008002:	f8cd 901c 	str.w	r9, [sp, #28]
 8008006:	2230      	movs	r2, #48	; 0x30
 8008008:	9b07      	ldr	r3, [sp, #28]
 800800a:	454b      	cmp	r3, r9
 800800c:	d307      	bcc.n	800801e <__cvt+0xb6>
 800800e:	4630      	mov	r0, r6
 8008010:	9b07      	ldr	r3, [sp, #28]
 8008012:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008014:	1b9b      	subs	r3, r3, r6
 8008016:	6013      	str	r3, [r2, #0]
 8008018:	b008      	add	sp, #32
 800801a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800801e:	1c59      	adds	r1, r3, #1
 8008020:	9107      	str	r1, [sp, #28]
 8008022:	701a      	strb	r2, [r3, #0]
 8008024:	e7f0      	b.n	8008008 <__cvt+0xa0>

08008026 <__exponent>:
 8008026:	4603      	mov	r3, r0
 8008028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800802a:	2900      	cmp	r1, #0
 800802c:	f803 2b02 	strb.w	r2, [r3], #2
 8008030:	bfb6      	itet	lt
 8008032:	222d      	movlt	r2, #45	; 0x2d
 8008034:	222b      	movge	r2, #43	; 0x2b
 8008036:	4249      	neglt	r1, r1
 8008038:	2909      	cmp	r1, #9
 800803a:	7042      	strb	r2, [r0, #1]
 800803c:	dd2b      	ble.n	8008096 <__exponent+0x70>
 800803e:	f10d 0407 	add.w	r4, sp, #7
 8008042:	46a4      	mov	ip, r4
 8008044:	270a      	movs	r7, #10
 8008046:	fb91 f6f7 	sdiv	r6, r1, r7
 800804a:	460a      	mov	r2, r1
 800804c:	46a6      	mov	lr, r4
 800804e:	fb07 1516 	mls	r5, r7, r6, r1
 8008052:	2a63      	cmp	r2, #99	; 0x63
 8008054:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008058:	4631      	mov	r1, r6
 800805a:	f104 34ff 	add.w	r4, r4, #4294967295
 800805e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008062:	dcf0      	bgt.n	8008046 <__exponent+0x20>
 8008064:	3130      	adds	r1, #48	; 0x30
 8008066:	f1ae 0502 	sub.w	r5, lr, #2
 800806a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800806e:	4629      	mov	r1, r5
 8008070:	1c44      	adds	r4, r0, #1
 8008072:	4561      	cmp	r1, ip
 8008074:	d30a      	bcc.n	800808c <__exponent+0x66>
 8008076:	f10d 0209 	add.w	r2, sp, #9
 800807a:	eba2 020e 	sub.w	r2, r2, lr
 800807e:	4565      	cmp	r5, ip
 8008080:	bf88      	it	hi
 8008082:	2200      	movhi	r2, #0
 8008084:	4413      	add	r3, r2
 8008086:	1a18      	subs	r0, r3, r0
 8008088:	b003      	add	sp, #12
 800808a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800808c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008090:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008094:	e7ed      	b.n	8008072 <__exponent+0x4c>
 8008096:	2330      	movs	r3, #48	; 0x30
 8008098:	3130      	adds	r1, #48	; 0x30
 800809a:	7083      	strb	r3, [r0, #2]
 800809c:	70c1      	strb	r1, [r0, #3]
 800809e:	1d03      	adds	r3, r0, #4
 80080a0:	e7f1      	b.n	8008086 <__exponent+0x60>
	...

080080a4 <_printf_float>:
 80080a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a8:	b091      	sub	sp, #68	; 0x44
 80080aa:	460c      	mov	r4, r1
 80080ac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80080b0:	4616      	mov	r6, r2
 80080b2:	461f      	mov	r7, r3
 80080b4:	4605      	mov	r5, r0
 80080b6:	f002 fe57 	bl	800ad68 <_localeconv_r>
 80080ba:	6803      	ldr	r3, [r0, #0]
 80080bc:	4618      	mov	r0, r3
 80080be:	9309      	str	r3, [sp, #36]	; 0x24
 80080c0:	f7fd f9ac 	bl	800541c <strlen>
 80080c4:	2300      	movs	r3, #0
 80080c6:	930e      	str	r3, [sp, #56]	; 0x38
 80080c8:	f8d8 3000 	ldr.w	r3, [r8]
 80080cc:	900a      	str	r0, [sp, #40]	; 0x28
 80080ce:	3307      	adds	r3, #7
 80080d0:	f023 0307 	bic.w	r3, r3, #7
 80080d4:	f103 0208 	add.w	r2, r3, #8
 80080d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80080dc:	f8d4 b000 	ldr.w	fp, [r4]
 80080e0:	f8c8 2000 	str.w	r2, [r8]
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80080ec:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80080f0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80080f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80080f6:	f04f 32ff 	mov.w	r2, #4294967295
 80080fa:	4640      	mov	r0, r8
 80080fc:	4b9c      	ldr	r3, [pc, #624]	; (8008370 <_printf_float+0x2cc>)
 80080fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008100:	f7fd fdea 	bl	8005cd8 <__aeabi_dcmpun>
 8008104:	bb70      	cbnz	r0, 8008164 <_printf_float+0xc0>
 8008106:	f04f 32ff 	mov.w	r2, #4294967295
 800810a:	4640      	mov	r0, r8
 800810c:	4b98      	ldr	r3, [pc, #608]	; (8008370 <_printf_float+0x2cc>)
 800810e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008110:	f7fd fdc4 	bl	8005c9c <__aeabi_dcmple>
 8008114:	bb30      	cbnz	r0, 8008164 <_printf_float+0xc0>
 8008116:	2200      	movs	r2, #0
 8008118:	2300      	movs	r3, #0
 800811a:	4640      	mov	r0, r8
 800811c:	4651      	mov	r1, sl
 800811e:	f7fd fdb3 	bl	8005c88 <__aeabi_dcmplt>
 8008122:	b110      	cbz	r0, 800812a <_printf_float+0x86>
 8008124:	232d      	movs	r3, #45	; 0x2d
 8008126:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800812a:	4b92      	ldr	r3, [pc, #584]	; (8008374 <_printf_float+0x2d0>)
 800812c:	4892      	ldr	r0, [pc, #584]	; (8008378 <_printf_float+0x2d4>)
 800812e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008132:	bf94      	ite	ls
 8008134:	4698      	movls	r8, r3
 8008136:	4680      	movhi	r8, r0
 8008138:	2303      	movs	r3, #3
 800813a:	f04f 0a00 	mov.w	sl, #0
 800813e:	6123      	str	r3, [r4, #16]
 8008140:	f02b 0304 	bic.w	r3, fp, #4
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	4633      	mov	r3, r6
 8008148:	4621      	mov	r1, r4
 800814a:	4628      	mov	r0, r5
 800814c:	9700      	str	r7, [sp, #0]
 800814e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008150:	f000 f9d4 	bl	80084fc <_printf_common>
 8008154:	3001      	adds	r0, #1
 8008156:	f040 8090 	bne.w	800827a <_printf_float+0x1d6>
 800815a:	f04f 30ff 	mov.w	r0, #4294967295
 800815e:	b011      	add	sp, #68	; 0x44
 8008160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008164:	4642      	mov	r2, r8
 8008166:	4653      	mov	r3, sl
 8008168:	4640      	mov	r0, r8
 800816a:	4651      	mov	r1, sl
 800816c:	f7fd fdb4 	bl	8005cd8 <__aeabi_dcmpun>
 8008170:	b148      	cbz	r0, 8008186 <_printf_float+0xe2>
 8008172:	f1ba 0f00 	cmp.w	sl, #0
 8008176:	bfb8      	it	lt
 8008178:	232d      	movlt	r3, #45	; 0x2d
 800817a:	4880      	ldr	r0, [pc, #512]	; (800837c <_printf_float+0x2d8>)
 800817c:	bfb8      	it	lt
 800817e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008182:	4b7f      	ldr	r3, [pc, #508]	; (8008380 <_printf_float+0x2dc>)
 8008184:	e7d3      	b.n	800812e <_printf_float+0x8a>
 8008186:	6863      	ldr	r3, [r4, #4]
 8008188:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800818c:	1c5a      	adds	r2, r3, #1
 800818e:	d142      	bne.n	8008216 <_printf_float+0x172>
 8008190:	2306      	movs	r3, #6
 8008192:	6063      	str	r3, [r4, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	9206      	str	r2, [sp, #24]
 8008198:	aa0e      	add	r2, sp, #56	; 0x38
 800819a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800819e:	aa0d      	add	r2, sp, #52	; 0x34
 80081a0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80081a4:	9203      	str	r2, [sp, #12]
 80081a6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80081aa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80081ae:	6023      	str	r3, [r4, #0]
 80081b0:	6863      	ldr	r3, [r4, #4]
 80081b2:	4642      	mov	r2, r8
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	4628      	mov	r0, r5
 80081b8:	4653      	mov	r3, sl
 80081ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80081bc:	f7ff fed4 	bl	8007f68 <__cvt>
 80081c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081c2:	4680      	mov	r8, r0
 80081c4:	2947      	cmp	r1, #71	; 0x47
 80081c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80081c8:	d108      	bne.n	80081dc <_printf_float+0x138>
 80081ca:	1cc8      	adds	r0, r1, #3
 80081cc:	db02      	blt.n	80081d4 <_printf_float+0x130>
 80081ce:	6863      	ldr	r3, [r4, #4]
 80081d0:	4299      	cmp	r1, r3
 80081d2:	dd40      	ble.n	8008256 <_printf_float+0x1b2>
 80081d4:	f1a9 0902 	sub.w	r9, r9, #2
 80081d8:	fa5f f989 	uxtb.w	r9, r9
 80081dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80081e0:	d81f      	bhi.n	8008222 <_printf_float+0x17e>
 80081e2:	464a      	mov	r2, r9
 80081e4:	3901      	subs	r1, #1
 80081e6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80081ea:	910d      	str	r1, [sp, #52]	; 0x34
 80081ec:	f7ff ff1b 	bl	8008026 <__exponent>
 80081f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081f2:	4682      	mov	sl, r0
 80081f4:	1813      	adds	r3, r2, r0
 80081f6:	2a01      	cmp	r2, #1
 80081f8:	6123      	str	r3, [r4, #16]
 80081fa:	dc02      	bgt.n	8008202 <_printf_float+0x15e>
 80081fc:	6822      	ldr	r2, [r4, #0]
 80081fe:	07d2      	lsls	r2, r2, #31
 8008200:	d501      	bpl.n	8008206 <_printf_float+0x162>
 8008202:	3301      	adds	r3, #1
 8008204:	6123      	str	r3, [r4, #16]
 8008206:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800820a:	2b00      	cmp	r3, #0
 800820c:	d09b      	beq.n	8008146 <_printf_float+0xa2>
 800820e:	232d      	movs	r3, #45	; 0x2d
 8008210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008214:	e797      	b.n	8008146 <_printf_float+0xa2>
 8008216:	2947      	cmp	r1, #71	; 0x47
 8008218:	d1bc      	bne.n	8008194 <_printf_float+0xf0>
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1ba      	bne.n	8008194 <_printf_float+0xf0>
 800821e:	2301      	movs	r3, #1
 8008220:	e7b7      	b.n	8008192 <_printf_float+0xee>
 8008222:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008226:	d118      	bne.n	800825a <_printf_float+0x1b6>
 8008228:	2900      	cmp	r1, #0
 800822a:	6863      	ldr	r3, [r4, #4]
 800822c:	dd0b      	ble.n	8008246 <_printf_float+0x1a2>
 800822e:	6121      	str	r1, [r4, #16]
 8008230:	b913      	cbnz	r3, 8008238 <_printf_float+0x194>
 8008232:	6822      	ldr	r2, [r4, #0]
 8008234:	07d0      	lsls	r0, r2, #31
 8008236:	d502      	bpl.n	800823e <_printf_float+0x19a>
 8008238:	3301      	adds	r3, #1
 800823a:	440b      	add	r3, r1
 800823c:	6123      	str	r3, [r4, #16]
 800823e:	f04f 0a00 	mov.w	sl, #0
 8008242:	65a1      	str	r1, [r4, #88]	; 0x58
 8008244:	e7df      	b.n	8008206 <_printf_float+0x162>
 8008246:	b913      	cbnz	r3, 800824e <_printf_float+0x1aa>
 8008248:	6822      	ldr	r2, [r4, #0]
 800824a:	07d2      	lsls	r2, r2, #31
 800824c:	d501      	bpl.n	8008252 <_printf_float+0x1ae>
 800824e:	3302      	adds	r3, #2
 8008250:	e7f4      	b.n	800823c <_printf_float+0x198>
 8008252:	2301      	movs	r3, #1
 8008254:	e7f2      	b.n	800823c <_printf_float+0x198>
 8008256:	f04f 0967 	mov.w	r9, #103	; 0x67
 800825a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800825c:	4299      	cmp	r1, r3
 800825e:	db05      	blt.n	800826c <_printf_float+0x1c8>
 8008260:	6823      	ldr	r3, [r4, #0]
 8008262:	6121      	str	r1, [r4, #16]
 8008264:	07d8      	lsls	r0, r3, #31
 8008266:	d5ea      	bpl.n	800823e <_printf_float+0x19a>
 8008268:	1c4b      	adds	r3, r1, #1
 800826a:	e7e7      	b.n	800823c <_printf_float+0x198>
 800826c:	2900      	cmp	r1, #0
 800826e:	bfcc      	ite	gt
 8008270:	2201      	movgt	r2, #1
 8008272:	f1c1 0202 	rsble	r2, r1, #2
 8008276:	4413      	add	r3, r2
 8008278:	e7e0      	b.n	800823c <_printf_float+0x198>
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	055a      	lsls	r2, r3, #21
 800827e:	d407      	bmi.n	8008290 <_printf_float+0x1ec>
 8008280:	6923      	ldr	r3, [r4, #16]
 8008282:	4642      	mov	r2, r8
 8008284:	4631      	mov	r1, r6
 8008286:	4628      	mov	r0, r5
 8008288:	47b8      	blx	r7
 800828a:	3001      	adds	r0, #1
 800828c:	d12b      	bne.n	80082e6 <_printf_float+0x242>
 800828e:	e764      	b.n	800815a <_printf_float+0xb6>
 8008290:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008294:	f240 80dd 	bls.w	8008452 <_printf_float+0x3ae>
 8008298:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800829c:	2200      	movs	r2, #0
 800829e:	2300      	movs	r3, #0
 80082a0:	f7fd fce8 	bl	8005c74 <__aeabi_dcmpeq>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	d033      	beq.n	8008310 <_printf_float+0x26c>
 80082a8:	2301      	movs	r3, #1
 80082aa:	4631      	mov	r1, r6
 80082ac:	4628      	mov	r0, r5
 80082ae:	4a35      	ldr	r2, [pc, #212]	; (8008384 <_printf_float+0x2e0>)
 80082b0:	47b8      	blx	r7
 80082b2:	3001      	adds	r0, #1
 80082b4:	f43f af51 	beq.w	800815a <_printf_float+0xb6>
 80082b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80082bc:	429a      	cmp	r2, r3
 80082be:	db02      	blt.n	80082c6 <_printf_float+0x222>
 80082c0:	6823      	ldr	r3, [r4, #0]
 80082c2:	07d8      	lsls	r0, r3, #31
 80082c4:	d50f      	bpl.n	80082e6 <_printf_float+0x242>
 80082c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082ca:	4631      	mov	r1, r6
 80082cc:	4628      	mov	r0, r5
 80082ce:	47b8      	blx	r7
 80082d0:	3001      	adds	r0, #1
 80082d2:	f43f af42 	beq.w	800815a <_printf_float+0xb6>
 80082d6:	f04f 0800 	mov.w	r8, #0
 80082da:	f104 091a 	add.w	r9, r4, #26
 80082de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082e0:	3b01      	subs	r3, #1
 80082e2:	4543      	cmp	r3, r8
 80082e4:	dc09      	bgt.n	80082fa <_printf_float+0x256>
 80082e6:	6823      	ldr	r3, [r4, #0]
 80082e8:	079b      	lsls	r3, r3, #30
 80082ea:	f100 8102 	bmi.w	80084f2 <_printf_float+0x44e>
 80082ee:	68e0      	ldr	r0, [r4, #12]
 80082f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082f2:	4298      	cmp	r0, r3
 80082f4:	bfb8      	it	lt
 80082f6:	4618      	movlt	r0, r3
 80082f8:	e731      	b.n	800815e <_printf_float+0xba>
 80082fa:	2301      	movs	r3, #1
 80082fc:	464a      	mov	r2, r9
 80082fe:	4631      	mov	r1, r6
 8008300:	4628      	mov	r0, r5
 8008302:	47b8      	blx	r7
 8008304:	3001      	adds	r0, #1
 8008306:	f43f af28 	beq.w	800815a <_printf_float+0xb6>
 800830a:	f108 0801 	add.w	r8, r8, #1
 800830e:	e7e6      	b.n	80082de <_printf_float+0x23a>
 8008310:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008312:	2b00      	cmp	r3, #0
 8008314:	dc38      	bgt.n	8008388 <_printf_float+0x2e4>
 8008316:	2301      	movs	r3, #1
 8008318:	4631      	mov	r1, r6
 800831a:	4628      	mov	r0, r5
 800831c:	4a19      	ldr	r2, [pc, #100]	; (8008384 <_printf_float+0x2e0>)
 800831e:	47b8      	blx	r7
 8008320:	3001      	adds	r0, #1
 8008322:	f43f af1a 	beq.w	800815a <_printf_float+0xb6>
 8008326:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800832a:	4313      	orrs	r3, r2
 800832c:	d102      	bne.n	8008334 <_printf_float+0x290>
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	07d9      	lsls	r1, r3, #31
 8008332:	d5d8      	bpl.n	80082e6 <_printf_float+0x242>
 8008334:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008338:	4631      	mov	r1, r6
 800833a:	4628      	mov	r0, r5
 800833c:	47b8      	blx	r7
 800833e:	3001      	adds	r0, #1
 8008340:	f43f af0b 	beq.w	800815a <_printf_float+0xb6>
 8008344:	f04f 0900 	mov.w	r9, #0
 8008348:	f104 0a1a 	add.w	sl, r4, #26
 800834c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800834e:	425b      	negs	r3, r3
 8008350:	454b      	cmp	r3, r9
 8008352:	dc01      	bgt.n	8008358 <_printf_float+0x2b4>
 8008354:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008356:	e794      	b.n	8008282 <_printf_float+0x1de>
 8008358:	2301      	movs	r3, #1
 800835a:	4652      	mov	r2, sl
 800835c:	4631      	mov	r1, r6
 800835e:	4628      	mov	r0, r5
 8008360:	47b8      	blx	r7
 8008362:	3001      	adds	r0, #1
 8008364:	f43f aef9 	beq.w	800815a <_printf_float+0xb6>
 8008368:	f109 0901 	add.w	r9, r9, #1
 800836c:	e7ee      	b.n	800834c <_printf_float+0x2a8>
 800836e:	bf00      	nop
 8008370:	7fefffff 	.word	0x7fefffff
 8008374:	0801d2c0 	.word	0x0801d2c0
 8008378:	0801d2c4 	.word	0x0801d2c4
 800837c:	0801d2cc 	.word	0x0801d2cc
 8008380:	0801d2c8 	.word	0x0801d2c8
 8008384:	0801d2d0 	.word	0x0801d2d0
 8008388:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800838a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800838c:	429a      	cmp	r2, r3
 800838e:	bfa8      	it	ge
 8008390:	461a      	movge	r2, r3
 8008392:	2a00      	cmp	r2, #0
 8008394:	4691      	mov	r9, r2
 8008396:	dc37      	bgt.n	8008408 <_printf_float+0x364>
 8008398:	f04f 0b00 	mov.w	fp, #0
 800839c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083a0:	f104 021a 	add.w	r2, r4, #26
 80083a4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80083a8:	ebaa 0309 	sub.w	r3, sl, r9
 80083ac:	455b      	cmp	r3, fp
 80083ae:	dc33      	bgt.n	8008418 <_printf_float+0x374>
 80083b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80083b4:	429a      	cmp	r2, r3
 80083b6:	db3b      	blt.n	8008430 <_printf_float+0x38c>
 80083b8:	6823      	ldr	r3, [r4, #0]
 80083ba:	07da      	lsls	r2, r3, #31
 80083bc:	d438      	bmi.n	8008430 <_printf_float+0x38c>
 80083be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80083c2:	eba3 020a 	sub.w	r2, r3, sl
 80083c6:	eba3 0901 	sub.w	r9, r3, r1
 80083ca:	4591      	cmp	r9, r2
 80083cc:	bfa8      	it	ge
 80083ce:	4691      	movge	r9, r2
 80083d0:	f1b9 0f00 	cmp.w	r9, #0
 80083d4:	dc34      	bgt.n	8008440 <_printf_float+0x39c>
 80083d6:	f04f 0800 	mov.w	r8, #0
 80083da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083de:	f104 0a1a 	add.w	sl, r4, #26
 80083e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80083e6:	1a9b      	subs	r3, r3, r2
 80083e8:	eba3 0309 	sub.w	r3, r3, r9
 80083ec:	4543      	cmp	r3, r8
 80083ee:	f77f af7a 	ble.w	80082e6 <_printf_float+0x242>
 80083f2:	2301      	movs	r3, #1
 80083f4:	4652      	mov	r2, sl
 80083f6:	4631      	mov	r1, r6
 80083f8:	4628      	mov	r0, r5
 80083fa:	47b8      	blx	r7
 80083fc:	3001      	adds	r0, #1
 80083fe:	f43f aeac 	beq.w	800815a <_printf_float+0xb6>
 8008402:	f108 0801 	add.w	r8, r8, #1
 8008406:	e7ec      	b.n	80083e2 <_printf_float+0x33e>
 8008408:	4613      	mov	r3, r2
 800840a:	4631      	mov	r1, r6
 800840c:	4642      	mov	r2, r8
 800840e:	4628      	mov	r0, r5
 8008410:	47b8      	blx	r7
 8008412:	3001      	adds	r0, #1
 8008414:	d1c0      	bne.n	8008398 <_printf_float+0x2f4>
 8008416:	e6a0      	b.n	800815a <_printf_float+0xb6>
 8008418:	2301      	movs	r3, #1
 800841a:	4631      	mov	r1, r6
 800841c:	4628      	mov	r0, r5
 800841e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008420:	47b8      	blx	r7
 8008422:	3001      	adds	r0, #1
 8008424:	f43f ae99 	beq.w	800815a <_printf_float+0xb6>
 8008428:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800842a:	f10b 0b01 	add.w	fp, fp, #1
 800842e:	e7b9      	b.n	80083a4 <_printf_float+0x300>
 8008430:	4631      	mov	r1, r6
 8008432:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008436:	4628      	mov	r0, r5
 8008438:	47b8      	blx	r7
 800843a:	3001      	adds	r0, #1
 800843c:	d1bf      	bne.n	80083be <_printf_float+0x31a>
 800843e:	e68c      	b.n	800815a <_printf_float+0xb6>
 8008440:	464b      	mov	r3, r9
 8008442:	4631      	mov	r1, r6
 8008444:	4628      	mov	r0, r5
 8008446:	eb08 020a 	add.w	r2, r8, sl
 800844a:	47b8      	blx	r7
 800844c:	3001      	adds	r0, #1
 800844e:	d1c2      	bne.n	80083d6 <_printf_float+0x332>
 8008450:	e683      	b.n	800815a <_printf_float+0xb6>
 8008452:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008454:	2a01      	cmp	r2, #1
 8008456:	dc01      	bgt.n	800845c <_printf_float+0x3b8>
 8008458:	07db      	lsls	r3, r3, #31
 800845a:	d537      	bpl.n	80084cc <_printf_float+0x428>
 800845c:	2301      	movs	r3, #1
 800845e:	4642      	mov	r2, r8
 8008460:	4631      	mov	r1, r6
 8008462:	4628      	mov	r0, r5
 8008464:	47b8      	blx	r7
 8008466:	3001      	adds	r0, #1
 8008468:	f43f ae77 	beq.w	800815a <_printf_float+0xb6>
 800846c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008470:	4631      	mov	r1, r6
 8008472:	4628      	mov	r0, r5
 8008474:	47b8      	blx	r7
 8008476:	3001      	adds	r0, #1
 8008478:	f43f ae6f 	beq.w	800815a <_printf_float+0xb6>
 800847c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008480:	2200      	movs	r2, #0
 8008482:	2300      	movs	r3, #0
 8008484:	f7fd fbf6 	bl	8005c74 <__aeabi_dcmpeq>
 8008488:	b9d8      	cbnz	r0, 80084c2 <_printf_float+0x41e>
 800848a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800848c:	f108 0201 	add.w	r2, r8, #1
 8008490:	3b01      	subs	r3, #1
 8008492:	4631      	mov	r1, r6
 8008494:	4628      	mov	r0, r5
 8008496:	47b8      	blx	r7
 8008498:	3001      	adds	r0, #1
 800849a:	d10e      	bne.n	80084ba <_printf_float+0x416>
 800849c:	e65d      	b.n	800815a <_printf_float+0xb6>
 800849e:	2301      	movs	r3, #1
 80084a0:	464a      	mov	r2, r9
 80084a2:	4631      	mov	r1, r6
 80084a4:	4628      	mov	r0, r5
 80084a6:	47b8      	blx	r7
 80084a8:	3001      	adds	r0, #1
 80084aa:	f43f ae56 	beq.w	800815a <_printf_float+0xb6>
 80084ae:	f108 0801 	add.w	r8, r8, #1
 80084b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084b4:	3b01      	subs	r3, #1
 80084b6:	4543      	cmp	r3, r8
 80084b8:	dcf1      	bgt.n	800849e <_printf_float+0x3fa>
 80084ba:	4653      	mov	r3, sl
 80084bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80084c0:	e6e0      	b.n	8008284 <_printf_float+0x1e0>
 80084c2:	f04f 0800 	mov.w	r8, #0
 80084c6:	f104 091a 	add.w	r9, r4, #26
 80084ca:	e7f2      	b.n	80084b2 <_printf_float+0x40e>
 80084cc:	2301      	movs	r3, #1
 80084ce:	4642      	mov	r2, r8
 80084d0:	e7df      	b.n	8008492 <_printf_float+0x3ee>
 80084d2:	2301      	movs	r3, #1
 80084d4:	464a      	mov	r2, r9
 80084d6:	4631      	mov	r1, r6
 80084d8:	4628      	mov	r0, r5
 80084da:	47b8      	blx	r7
 80084dc:	3001      	adds	r0, #1
 80084de:	f43f ae3c 	beq.w	800815a <_printf_float+0xb6>
 80084e2:	f108 0801 	add.w	r8, r8, #1
 80084e6:	68e3      	ldr	r3, [r4, #12]
 80084e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80084ea:	1a5b      	subs	r3, r3, r1
 80084ec:	4543      	cmp	r3, r8
 80084ee:	dcf0      	bgt.n	80084d2 <_printf_float+0x42e>
 80084f0:	e6fd      	b.n	80082ee <_printf_float+0x24a>
 80084f2:	f04f 0800 	mov.w	r8, #0
 80084f6:	f104 0919 	add.w	r9, r4, #25
 80084fa:	e7f4      	b.n	80084e6 <_printf_float+0x442>

080084fc <_printf_common>:
 80084fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008500:	4616      	mov	r6, r2
 8008502:	4699      	mov	r9, r3
 8008504:	688a      	ldr	r2, [r1, #8]
 8008506:	690b      	ldr	r3, [r1, #16]
 8008508:	4607      	mov	r7, r0
 800850a:	4293      	cmp	r3, r2
 800850c:	bfb8      	it	lt
 800850e:	4613      	movlt	r3, r2
 8008510:	6033      	str	r3, [r6, #0]
 8008512:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008516:	460c      	mov	r4, r1
 8008518:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800851c:	b10a      	cbz	r2, 8008522 <_printf_common+0x26>
 800851e:	3301      	adds	r3, #1
 8008520:	6033      	str	r3, [r6, #0]
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	0699      	lsls	r1, r3, #26
 8008526:	bf42      	ittt	mi
 8008528:	6833      	ldrmi	r3, [r6, #0]
 800852a:	3302      	addmi	r3, #2
 800852c:	6033      	strmi	r3, [r6, #0]
 800852e:	6825      	ldr	r5, [r4, #0]
 8008530:	f015 0506 	ands.w	r5, r5, #6
 8008534:	d106      	bne.n	8008544 <_printf_common+0x48>
 8008536:	f104 0a19 	add.w	sl, r4, #25
 800853a:	68e3      	ldr	r3, [r4, #12]
 800853c:	6832      	ldr	r2, [r6, #0]
 800853e:	1a9b      	subs	r3, r3, r2
 8008540:	42ab      	cmp	r3, r5
 8008542:	dc28      	bgt.n	8008596 <_printf_common+0x9a>
 8008544:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008548:	1e13      	subs	r3, r2, #0
 800854a:	6822      	ldr	r2, [r4, #0]
 800854c:	bf18      	it	ne
 800854e:	2301      	movne	r3, #1
 8008550:	0692      	lsls	r2, r2, #26
 8008552:	d42d      	bmi.n	80085b0 <_printf_common+0xb4>
 8008554:	4649      	mov	r1, r9
 8008556:	4638      	mov	r0, r7
 8008558:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800855c:	47c0      	blx	r8
 800855e:	3001      	adds	r0, #1
 8008560:	d020      	beq.n	80085a4 <_printf_common+0xa8>
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	68e5      	ldr	r5, [r4, #12]
 8008566:	f003 0306 	and.w	r3, r3, #6
 800856a:	2b04      	cmp	r3, #4
 800856c:	bf18      	it	ne
 800856e:	2500      	movne	r5, #0
 8008570:	6832      	ldr	r2, [r6, #0]
 8008572:	f04f 0600 	mov.w	r6, #0
 8008576:	68a3      	ldr	r3, [r4, #8]
 8008578:	bf08      	it	eq
 800857a:	1aad      	subeq	r5, r5, r2
 800857c:	6922      	ldr	r2, [r4, #16]
 800857e:	bf08      	it	eq
 8008580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008584:	4293      	cmp	r3, r2
 8008586:	bfc4      	itt	gt
 8008588:	1a9b      	subgt	r3, r3, r2
 800858a:	18ed      	addgt	r5, r5, r3
 800858c:	341a      	adds	r4, #26
 800858e:	42b5      	cmp	r5, r6
 8008590:	d11a      	bne.n	80085c8 <_printf_common+0xcc>
 8008592:	2000      	movs	r0, #0
 8008594:	e008      	b.n	80085a8 <_printf_common+0xac>
 8008596:	2301      	movs	r3, #1
 8008598:	4652      	mov	r2, sl
 800859a:	4649      	mov	r1, r9
 800859c:	4638      	mov	r0, r7
 800859e:	47c0      	blx	r8
 80085a0:	3001      	adds	r0, #1
 80085a2:	d103      	bne.n	80085ac <_printf_common+0xb0>
 80085a4:	f04f 30ff 	mov.w	r0, #4294967295
 80085a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ac:	3501      	adds	r5, #1
 80085ae:	e7c4      	b.n	800853a <_printf_common+0x3e>
 80085b0:	2030      	movs	r0, #48	; 0x30
 80085b2:	18e1      	adds	r1, r4, r3
 80085b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085b8:	1c5a      	adds	r2, r3, #1
 80085ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085be:	4422      	add	r2, r4
 80085c0:	3302      	adds	r3, #2
 80085c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085c6:	e7c5      	b.n	8008554 <_printf_common+0x58>
 80085c8:	2301      	movs	r3, #1
 80085ca:	4622      	mov	r2, r4
 80085cc:	4649      	mov	r1, r9
 80085ce:	4638      	mov	r0, r7
 80085d0:	47c0      	blx	r8
 80085d2:	3001      	adds	r0, #1
 80085d4:	d0e6      	beq.n	80085a4 <_printf_common+0xa8>
 80085d6:	3601      	adds	r6, #1
 80085d8:	e7d9      	b.n	800858e <_printf_common+0x92>
	...

080085dc <_printf_i>:
 80085dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085e0:	7e0f      	ldrb	r7, [r1, #24]
 80085e2:	4691      	mov	r9, r2
 80085e4:	2f78      	cmp	r7, #120	; 0x78
 80085e6:	4680      	mov	r8, r0
 80085e8:	460c      	mov	r4, r1
 80085ea:	469a      	mov	sl, r3
 80085ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085f2:	d807      	bhi.n	8008604 <_printf_i+0x28>
 80085f4:	2f62      	cmp	r7, #98	; 0x62
 80085f6:	d80a      	bhi.n	800860e <_printf_i+0x32>
 80085f8:	2f00      	cmp	r7, #0
 80085fa:	f000 80d9 	beq.w	80087b0 <_printf_i+0x1d4>
 80085fe:	2f58      	cmp	r7, #88	; 0x58
 8008600:	f000 80a4 	beq.w	800874c <_printf_i+0x170>
 8008604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008608:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800860c:	e03a      	b.n	8008684 <_printf_i+0xa8>
 800860e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008612:	2b15      	cmp	r3, #21
 8008614:	d8f6      	bhi.n	8008604 <_printf_i+0x28>
 8008616:	a101      	add	r1, pc, #4	; (adr r1, 800861c <_printf_i+0x40>)
 8008618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800861c:	08008675 	.word	0x08008675
 8008620:	08008689 	.word	0x08008689
 8008624:	08008605 	.word	0x08008605
 8008628:	08008605 	.word	0x08008605
 800862c:	08008605 	.word	0x08008605
 8008630:	08008605 	.word	0x08008605
 8008634:	08008689 	.word	0x08008689
 8008638:	08008605 	.word	0x08008605
 800863c:	08008605 	.word	0x08008605
 8008640:	08008605 	.word	0x08008605
 8008644:	08008605 	.word	0x08008605
 8008648:	08008797 	.word	0x08008797
 800864c:	080086b9 	.word	0x080086b9
 8008650:	08008779 	.word	0x08008779
 8008654:	08008605 	.word	0x08008605
 8008658:	08008605 	.word	0x08008605
 800865c:	080087b9 	.word	0x080087b9
 8008660:	08008605 	.word	0x08008605
 8008664:	080086b9 	.word	0x080086b9
 8008668:	08008605 	.word	0x08008605
 800866c:	08008605 	.word	0x08008605
 8008670:	08008781 	.word	0x08008781
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	1d1a      	adds	r2, r3, #4
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	602a      	str	r2, [r5, #0]
 800867c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008680:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008684:	2301      	movs	r3, #1
 8008686:	e0a4      	b.n	80087d2 <_printf_i+0x1f6>
 8008688:	6820      	ldr	r0, [r4, #0]
 800868a:	6829      	ldr	r1, [r5, #0]
 800868c:	0606      	lsls	r6, r0, #24
 800868e:	f101 0304 	add.w	r3, r1, #4
 8008692:	d50a      	bpl.n	80086aa <_printf_i+0xce>
 8008694:	680e      	ldr	r6, [r1, #0]
 8008696:	602b      	str	r3, [r5, #0]
 8008698:	2e00      	cmp	r6, #0
 800869a:	da03      	bge.n	80086a4 <_printf_i+0xc8>
 800869c:	232d      	movs	r3, #45	; 0x2d
 800869e:	4276      	negs	r6, r6
 80086a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086a4:	230a      	movs	r3, #10
 80086a6:	485e      	ldr	r0, [pc, #376]	; (8008820 <_printf_i+0x244>)
 80086a8:	e019      	b.n	80086de <_printf_i+0x102>
 80086aa:	680e      	ldr	r6, [r1, #0]
 80086ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086b0:	602b      	str	r3, [r5, #0]
 80086b2:	bf18      	it	ne
 80086b4:	b236      	sxthne	r6, r6
 80086b6:	e7ef      	b.n	8008698 <_printf_i+0xbc>
 80086b8:	682b      	ldr	r3, [r5, #0]
 80086ba:	6820      	ldr	r0, [r4, #0]
 80086bc:	1d19      	adds	r1, r3, #4
 80086be:	6029      	str	r1, [r5, #0]
 80086c0:	0601      	lsls	r1, r0, #24
 80086c2:	d501      	bpl.n	80086c8 <_printf_i+0xec>
 80086c4:	681e      	ldr	r6, [r3, #0]
 80086c6:	e002      	b.n	80086ce <_printf_i+0xf2>
 80086c8:	0646      	lsls	r6, r0, #25
 80086ca:	d5fb      	bpl.n	80086c4 <_printf_i+0xe8>
 80086cc:	881e      	ldrh	r6, [r3, #0]
 80086ce:	2f6f      	cmp	r7, #111	; 0x6f
 80086d0:	bf0c      	ite	eq
 80086d2:	2308      	moveq	r3, #8
 80086d4:	230a      	movne	r3, #10
 80086d6:	4852      	ldr	r0, [pc, #328]	; (8008820 <_printf_i+0x244>)
 80086d8:	2100      	movs	r1, #0
 80086da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086de:	6865      	ldr	r5, [r4, #4]
 80086e0:	2d00      	cmp	r5, #0
 80086e2:	bfa8      	it	ge
 80086e4:	6821      	ldrge	r1, [r4, #0]
 80086e6:	60a5      	str	r5, [r4, #8]
 80086e8:	bfa4      	itt	ge
 80086ea:	f021 0104 	bicge.w	r1, r1, #4
 80086ee:	6021      	strge	r1, [r4, #0]
 80086f0:	b90e      	cbnz	r6, 80086f6 <_printf_i+0x11a>
 80086f2:	2d00      	cmp	r5, #0
 80086f4:	d04d      	beq.n	8008792 <_printf_i+0x1b6>
 80086f6:	4615      	mov	r5, r2
 80086f8:	fbb6 f1f3 	udiv	r1, r6, r3
 80086fc:	fb03 6711 	mls	r7, r3, r1, r6
 8008700:	5dc7      	ldrb	r7, [r0, r7]
 8008702:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008706:	4637      	mov	r7, r6
 8008708:	42bb      	cmp	r3, r7
 800870a:	460e      	mov	r6, r1
 800870c:	d9f4      	bls.n	80086f8 <_printf_i+0x11c>
 800870e:	2b08      	cmp	r3, #8
 8008710:	d10b      	bne.n	800872a <_printf_i+0x14e>
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	07de      	lsls	r6, r3, #31
 8008716:	d508      	bpl.n	800872a <_printf_i+0x14e>
 8008718:	6923      	ldr	r3, [r4, #16]
 800871a:	6861      	ldr	r1, [r4, #4]
 800871c:	4299      	cmp	r1, r3
 800871e:	bfde      	ittt	le
 8008720:	2330      	movle	r3, #48	; 0x30
 8008722:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008726:	f105 35ff 	addle.w	r5, r5, #4294967295
 800872a:	1b52      	subs	r2, r2, r5
 800872c:	6122      	str	r2, [r4, #16]
 800872e:	464b      	mov	r3, r9
 8008730:	4621      	mov	r1, r4
 8008732:	4640      	mov	r0, r8
 8008734:	f8cd a000 	str.w	sl, [sp]
 8008738:	aa03      	add	r2, sp, #12
 800873a:	f7ff fedf 	bl	80084fc <_printf_common>
 800873e:	3001      	adds	r0, #1
 8008740:	d14c      	bne.n	80087dc <_printf_i+0x200>
 8008742:	f04f 30ff 	mov.w	r0, #4294967295
 8008746:	b004      	add	sp, #16
 8008748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800874c:	4834      	ldr	r0, [pc, #208]	; (8008820 <_printf_i+0x244>)
 800874e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008752:	6829      	ldr	r1, [r5, #0]
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	f851 6b04 	ldr.w	r6, [r1], #4
 800875a:	6029      	str	r1, [r5, #0]
 800875c:	061d      	lsls	r5, r3, #24
 800875e:	d514      	bpl.n	800878a <_printf_i+0x1ae>
 8008760:	07df      	lsls	r7, r3, #31
 8008762:	bf44      	itt	mi
 8008764:	f043 0320 	orrmi.w	r3, r3, #32
 8008768:	6023      	strmi	r3, [r4, #0]
 800876a:	b91e      	cbnz	r6, 8008774 <_printf_i+0x198>
 800876c:	6823      	ldr	r3, [r4, #0]
 800876e:	f023 0320 	bic.w	r3, r3, #32
 8008772:	6023      	str	r3, [r4, #0]
 8008774:	2310      	movs	r3, #16
 8008776:	e7af      	b.n	80086d8 <_printf_i+0xfc>
 8008778:	6823      	ldr	r3, [r4, #0]
 800877a:	f043 0320 	orr.w	r3, r3, #32
 800877e:	6023      	str	r3, [r4, #0]
 8008780:	2378      	movs	r3, #120	; 0x78
 8008782:	4828      	ldr	r0, [pc, #160]	; (8008824 <_printf_i+0x248>)
 8008784:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008788:	e7e3      	b.n	8008752 <_printf_i+0x176>
 800878a:	0659      	lsls	r1, r3, #25
 800878c:	bf48      	it	mi
 800878e:	b2b6      	uxthmi	r6, r6
 8008790:	e7e6      	b.n	8008760 <_printf_i+0x184>
 8008792:	4615      	mov	r5, r2
 8008794:	e7bb      	b.n	800870e <_printf_i+0x132>
 8008796:	682b      	ldr	r3, [r5, #0]
 8008798:	6826      	ldr	r6, [r4, #0]
 800879a:	1d18      	adds	r0, r3, #4
 800879c:	6961      	ldr	r1, [r4, #20]
 800879e:	6028      	str	r0, [r5, #0]
 80087a0:	0635      	lsls	r5, r6, #24
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	d501      	bpl.n	80087aa <_printf_i+0x1ce>
 80087a6:	6019      	str	r1, [r3, #0]
 80087a8:	e002      	b.n	80087b0 <_printf_i+0x1d4>
 80087aa:	0670      	lsls	r0, r6, #25
 80087ac:	d5fb      	bpl.n	80087a6 <_printf_i+0x1ca>
 80087ae:	8019      	strh	r1, [r3, #0]
 80087b0:	2300      	movs	r3, #0
 80087b2:	4615      	mov	r5, r2
 80087b4:	6123      	str	r3, [r4, #16]
 80087b6:	e7ba      	b.n	800872e <_printf_i+0x152>
 80087b8:	682b      	ldr	r3, [r5, #0]
 80087ba:	2100      	movs	r1, #0
 80087bc:	1d1a      	adds	r2, r3, #4
 80087be:	602a      	str	r2, [r5, #0]
 80087c0:	681d      	ldr	r5, [r3, #0]
 80087c2:	6862      	ldr	r2, [r4, #4]
 80087c4:	4628      	mov	r0, r5
 80087c6:	f002 faed 	bl	800ada4 <memchr>
 80087ca:	b108      	cbz	r0, 80087d0 <_printf_i+0x1f4>
 80087cc:	1b40      	subs	r0, r0, r5
 80087ce:	6060      	str	r0, [r4, #4]
 80087d0:	6863      	ldr	r3, [r4, #4]
 80087d2:	6123      	str	r3, [r4, #16]
 80087d4:	2300      	movs	r3, #0
 80087d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087da:	e7a8      	b.n	800872e <_printf_i+0x152>
 80087dc:	462a      	mov	r2, r5
 80087de:	4649      	mov	r1, r9
 80087e0:	4640      	mov	r0, r8
 80087e2:	6923      	ldr	r3, [r4, #16]
 80087e4:	47d0      	blx	sl
 80087e6:	3001      	adds	r0, #1
 80087e8:	d0ab      	beq.n	8008742 <_printf_i+0x166>
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	079b      	lsls	r3, r3, #30
 80087ee:	d413      	bmi.n	8008818 <_printf_i+0x23c>
 80087f0:	68e0      	ldr	r0, [r4, #12]
 80087f2:	9b03      	ldr	r3, [sp, #12]
 80087f4:	4298      	cmp	r0, r3
 80087f6:	bfb8      	it	lt
 80087f8:	4618      	movlt	r0, r3
 80087fa:	e7a4      	b.n	8008746 <_printf_i+0x16a>
 80087fc:	2301      	movs	r3, #1
 80087fe:	4632      	mov	r2, r6
 8008800:	4649      	mov	r1, r9
 8008802:	4640      	mov	r0, r8
 8008804:	47d0      	blx	sl
 8008806:	3001      	adds	r0, #1
 8008808:	d09b      	beq.n	8008742 <_printf_i+0x166>
 800880a:	3501      	adds	r5, #1
 800880c:	68e3      	ldr	r3, [r4, #12]
 800880e:	9903      	ldr	r1, [sp, #12]
 8008810:	1a5b      	subs	r3, r3, r1
 8008812:	42ab      	cmp	r3, r5
 8008814:	dcf2      	bgt.n	80087fc <_printf_i+0x220>
 8008816:	e7eb      	b.n	80087f0 <_printf_i+0x214>
 8008818:	2500      	movs	r5, #0
 800881a:	f104 0619 	add.w	r6, r4, #25
 800881e:	e7f5      	b.n	800880c <_printf_i+0x230>
 8008820:	0801d2d2 	.word	0x0801d2d2
 8008824:	0801d2e3 	.word	0x0801d2e3

08008828 <_scanf_float>:
 8008828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882c:	b087      	sub	sp, #28
 800882e:	9303      	str	r3, [sp, #12]
 8008830:	688b      	ldr	r3, [r1, #8]
 8008832:	4617      	mov	r7, r2
 8008834:	1e5a      	subs	r2, r3, #1
 8008836:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800883a:	bf85      	ittet	hi
 800883c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008840:	195b      	addhi	r3, r3, r5
 8008842:	2300      	movls	r3, #0
 8008844:	9302      	strhi	r3, [sp, #8]
 8008846:	bf88      	it	hi
 8008848:	f240 135d 	movwhi	r3, #349	; 0x15d
 800884c:	468b      	mov	fp, r1
 800884e:	f04f 0500 	mov.w	r5, #0
 8008852:	bf8c      	ite	hi
 8008854:	608b      	strhi	r3, [r1, #8]
 8008856:	9302      	strls	r3, [sp, #8]
 8008858:	680b      	ldr	r3, [r1, #0]
 800885a:	4680      	mov	r8, r0
 800885c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008860:	f84b 3b1c 	str.w	r3, [fp], #28
 8008864:	460c      	mov	r4, r1
 8008866:	465e      	mov	r6, fp
 8008868:	46aa      	mov	sl, r5
 800886a:	46a9      	mov	r9, r5
 800886c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008870:	9501      	str	r5, [sp, #4]
 8008872:	68a2      	ldr	r2, [r4, #8]
 8008874:	b152      	cbz	r2, 800888c <_scanf_float+0x64>
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	2b4e      	cmp	r3, #78	; 0x4e
 800887c:	d864      	bhi.n	8008948 <_scanf_float+0x120>
 800887e:	2b40      	cmp	r3, #64	; 0x40
 8008880:	d83c      	bhi.n	80088fc <_scanf_float+0xd4>
 8008882:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008886:	b2c8      	uxtb	r0, r1
 8008888:	280e      	cmp	r0, #14
 800888a:	d93a      	bls.n	8008902 <_scanf_float+0xda>
 800888c:	f1b9 0f00 	cmp.w	r9, #0
 8008890:	d003      	beq.n	800889a <_scanf_float+0x72>
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008898:	6023      	str	r3, [r4, #0]
 800889a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800889e:	f1ba 0f01 	cmp.w	sl, #1
 80088a2:	f200 8113 	bhi.w	8008acc <_scanf_float+0x2a4>
 80088a6:	455e      	cmp	r6, fp
 80088a8:	f200 8105 	bhi.w	8008ab6 <_scanf_float+0x28e>
 80088ac:	2501      	movs	r5, #1
 80088ae:	4628      	mov	r0, r5
 80088b0:	b007      	add	sp, #28
 80088b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80088ba:	2a0d      	cmp	r2, #13
 80088bc:	d8e6      	bhi.n	800888c <_scanf_float+0x64>
 80088be:	a101      	add	r1, pc, #4	; (adr r1, 80088c4 <_scanf_float+0x9c>)
 80088c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80088c4:	08008a03 	.word	0x08008a03
 80088c8:	0800888d 	.word	0x0800888d
 80088cc:	0800888d 	.word	0x0800888d
 80088d0:	0800888d 	.word	0x0800888d
 80088d4:	08008a63 	.word	0x08008a63
 80088d8:	08008a3b 	.word	0x08008a3b
 80088dc:	0800888d 	.word	0x0800888d
 80088e0:	0800888d 	.word	0x0800888d
 80088e4:	08008a11 	.word	0x08008a11
 80088e8:	0800888d 	.word	0x0800888d
 80088ec:	0800888d 	.word	0x0800888d
 80088f0:	0800888d 	.word	0x0800888d
 80088f4:	0800888d 	.word	0x0800888d
 80088f8:	080089c9 	.word	0x080089c9
 80088fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008900:	e7db      	b.n	80088ba <_scanf_float+0x92>
 8008902:	290e      	cmp	r1, #14
 8008904:	d8c2      	bhi.n	800888c <_scanf_float+0x64>
 8008906:	a001      	add	r0, pc, #4	; (adr r0, 800890c <_scanf_float+0xe4>)
 8008908:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800890c:	080089bb 	.word	0x080089bb
 8008910:	0800888d 	.word	0x0800888d
 8008914:	080089bb 	.word	0x080089bb
 8008918:	08008a4f 	.word	0x08008a4f
 800891c:	0800888d 	.word	0x0800888d
 8008920:	08008969 	.word	0x08008969
 8008924:	080089a5 	.word	0x080089a5
 8008928:	080089a5 	.word	0x080089a5
 800892c:	080089a5 	.word	0x080089a5
 8008930:	080089a5 	.word	0x080089a5
 8008934:	080089a5 	.word	0x080089a5
 8008938:	080089a5 	.word	0x080089a5
 800893c:	080089a5 	.word	0x080089a5
 8008940:	080089a5 	.word	0x080089a5
 8008944:	080089a5 	.word	0x080089a5
 8008948:	2b6e      	cmp	r3, #110	; 0x6e
 800894a:	d809      	bhi.n	8008960 <_scanf_float+0x138>
 800894c:	2b60      	cmp	r3, #96	; 0x60
 800894e:	d8b2      	bhi.n	80088b6 <_scanf_float+0x8e>
 8008950:	2b54      	cmp	r3, #84	; 0x54
 8008952:	d077      	beq.n	8008a44 <_scanf_float+0x21c>
 8008954:	2b59      	cmp	r3, #89	; 0x59
 8008956:	d199      	bne.n	800888c <_scanf_float+0x64>
 8008958:	2d07      	cmp	r5, #7
 800895a:	d197      	bne.n	800888c <_scanf_float+0x64>
 800895c:	2508      	movs	r5, #8
 800895e:	e029      	b.n	80089b4 <_scanf_float+0x18c>
 8008960:	2b74      	cmp	r3, #116	; 0x74
 8008962:	d06f      	beq.n	8008a44 <_scanf_float+0x21c>
 8008964:	2b79      	cmp	r3, #121	; 0x79
 8008966:	e7f6      	b.n	8008956 <_scanf_float+0x12e>
 8008968:	6821      	ldr	r1, [r4, #0]
 800896a:	05c8      	lsls	r0, r1, #23
 800896c:	d51a      	bpl.n	80089a4 <_scanf_float+0x17c>
 800896e:	9b02      	ldr	r3, [sp, #8]
 8008970:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008974:	6021      	str	r1, [r4, #0]
 8008976:	f109 0901 	add.w	r9, r9, #1
 800897a:	b11b      	cbz	r3, 8008984 <_scanf_float+0x15c>
 800897c:	3b01      	subs	r3, #1
 800897e:	3201      	adds	r2, #1
 8008980:	9302      	str	r3, [sp, #8]
 8008982:	60a2      	str	r2, [r4, #8]
 8008984:	68a3      	ldr	r3, [r4, #8]
 8008986:	3b01      	subs	r3, #1
 8008988:	60a3      	str	r3, [r4, #8]
 800898a:	6923      	ldr	r3, [r4, #16]
 800898c:	3301      	adds	r3, #1
 800898e:	6123      	str	r3, [r4, #16]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	3b01      	subs	r3, #1
 8008994:	2b00      	cmp	r3, #0
 8008996:	607b      	str	r3, [r7, #4]
 8008998:	f340 8084 	ble.w	8008aa4 <_scanf_float+0x27c>
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	3301      	adds	r3, #1
 80089a0:	603b      	str	r3, [r7, #0]
 80089a2:	e766      	b.n	8008872 <_scanf_float+0x4a>
 80089a4:	eb1a 0f05 	cmn.w	sl, r5
 80089a8:	f47f af70 	bne.w	800888c <_scanf_float+0x64>
 80089ac:	6822      	ldr	r2, [r4, #0]
 80089ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80089b2:	6022      	str	r2, [r4, #0]
 80089b4:	f806 3b01 	strb.w	r3, [r6], #1
 80089b8:	e7e4      	b.n	8008984 <_scanf_float+0x15c>
 80089ba:	6822      	ldr	r2, [r4, #0]
 80089bc:	0610      	lsls	r0, r2, #24
 80089be:	f57f af65 	bpl.w	800888c <_scanf_float+0x64>
 80089c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089c6:	e7f4      	b.n	80089b2 <_scanf_float+0x18a>
 80089c8:	f1ba 0f00 	cmp.w	sl, #0
 80089cc:	d10e      	bne.n	80089ec <_scanf_float+0x1c4>
 80089ce:	f1b9 0f00 	cmp.w	r9, #0
 80089d2:	d10e      	bne.n	80089f2 <_scanf_float+0x1ca>
 80089d4:	6822      	ldr	r2, [r4, #0]
 80089d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80089da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80089de:	d108      	bne.n	80089f2 <_scanf_float+0x1ca>
 80089e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80089e4:	f04f 0a01 	mov.w	sl, #1
 80089e8:	6022      	str	r2, [r4, #0]
 80089ea:	e7e3      	b.n	80089b4 <_scanf_float+0x18c>
 80089ec:	f1ba 0f02 	cmp.w	sl, #2
 80089f0:	d055      	beq.n	8008a9e <_scanf_float+0x276>
 80089f2:	2d01      	cmp	r5, #1
 80089f4:	d002      	beq.n	80089fc <_scanf_float+0x1d4>
 80089f6:	2d04      	cmp	r5, #4
 80089f8:	f47f af48 	bne.w	800888c <_scanf_float+0x64>
 80089fc:	3501      	adds	r5, #1
 80089fe:	b2ed      	uxtb	r5, r5
 8008a00:	e7d8      	b.n	80089b4 <_scanf_float+0x18c>
 8008a02:	f1ba 0f01 	cmp.w	sl, #1
 8008a06:	f47f af41 	bne.w	800888c <_scanf_float+0x64>
 8008a0a:	f04f 0a02 	mov.w	sl, #2
 8008a0e:	e7d1      	b.n	80089b4 <_scanf_float+0x18c>
 8008a10:	b97d      	cbnz	r5, 8008a32 <_scanf_float+0x20a>
 8008a12:	f1b9 0f00 	cmp.w	r9, #0
 8008a16:	f47f af3c 	bne.w	8008892 <_scanf_float+0x6a>
 8008a1a:	6822      	ldr	r2, [r4, #0]
 8008a1c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a20:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a24:	f47f af39 	bne.w	800889a <_scanf_float+0x72>
 8008a28:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a2c:	2501      	movs	r5, #1
 8008a2e:	6022      	str	r2, [r4, #0]
 8008a30:	e7c0      	b.n	80089b4 <_scanf_float+0x18c>
 8008a32:	2d03      	cmp	r5, #3
 8008a34:	d0e2      	beq.n	80089fc <_scanf_float+0x1d4>
 8008a36:	2d05      	cmp	r5, #5
 8008a38:	e7de      	b.n	80089f8 <_scanf_float+0x1d0>
 8008a3a:	2d02      	cmp	r5, #2
 8008a3c:	f47f af26 	bne.w	800888c <_scanf_float+0x64>
 8008a40:	2503      	movs	r5, #3
 8008a42:	e7b7      	b.n	80089b4 <_scanf_float+0x18c>
 8008a44:	2d06      	cmp	r5, #6
 8008a46:	f47f af21 	bne.w	800888c <_scanf_float+0x64>
 8008a4a:	2507      	movs	r5, #7
 8008a4c:	e7b2      	b.n	80089b4 <_scanf_float+0x18c>
 8008a4e:	6822      	ldr	r2, [r4, #0]
 8008a50:	0591      	lsls	r1, r2, #22
 8008a52:	f57f af1b 	bpl.w	800888c <_scanf_float+0x64>
 8008a56:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008a5a:	6022      	str	r2, [r4, #0]
 8008a5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a60:	e7a8      	b.n	80089b4 <_scanf_float+0x18c>
 8008a62:	6822      	ldr	r2, [r4, #0]
 8008a64:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008a68:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008a6c:	d006      	beq.n	8008a7c <_scanf_float+0x254>
 8008a6e:	0550      	lsls	r0, r2, #21
 8008a70:	f57f af0c 	bpl.w	800888c <_scanf_float+0x64>
 8008a74:	f1b9 0f00 	cmp.w	r9, #0
 8008a78:	f43f af0f 	beq.w	800889a <_scanf_float+0x72>
 8008a7c:	0591      	lsls	r1, r2, #22
 8008a7e:	bf58      	it	pl
 8008a80:	9901      	ldrpl	r1, [sp, #4]
 8008a82:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a86:	bf58      	it	pl
 8008a88:	eba9 0101 	subpl.w	r1, r9, r1
 8008a8c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008a90:	f04f 0900 	mov.w	r9, #0
 8008a94:	bf58      	it	pl
 8008a96:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008a9a:	6022      	str	r2, [r4, #0]
 8008a9c:	e78a      	b.n	80089b4 <_scanf_float+0x18c>
 8008a9e:	f04f 0a03 	mov.w	sl, #3
 8008aa2:	e787      	b.n	80089b4 <_scanf_float+0x18c>
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	4640      	mov	r0, r8
 8008aa8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008aac:	4798      	blx	r3
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	f43f aedf 	beq.w	8008872 <_scanf_float+0x4a>
 8008ab4:	e6ea      	b.n	800888c <_scanf_float+0x64>
 8008ab6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008aba:	463a      	mov	r2, r7
 8008abc:	4640      	mov	r0, r8
 8008abe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ac2:	4798      	blx	r3
 8008ac4:	6923      	ldr	r3, [r4, #16]
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	6123      	str	r3, [r4, #16]
 8008aca:	e6ec      	b.n	80088a6 <_scanf_float+0x7e>
 8008acc:	1e6b      	subs	r3, r5, #1
 8008ace:	2b06      	cmp	r3, #6
 8008ad0:	d825      	bhi.n	8008b1e <_scanf_float+0x2f6>
 8008ad2:	2d02      	cmp	r5, #2
 8008ad4:	d836      	bhi.n	8008b44 <_scanf_float+0x31c>
 8008ad6:	455e      	cmp	r6, fp
 8008ad8:	f67f aee8 	bls.w	80088ac <_scanf_float+0x84>
 8008adc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ae0:	463a      	mov	r2, r7
 8008ae2:	4640      	mov	r0, r8
 8008ae4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ae8:	4798      	blx	r3
 8008aea:	6923      	ldr	r3, [r4, #16]
 8008aec:	3b01      	subs	r3, #1
 8008aee:	6123      	str	r3, [r4, #16]
 8008af0:	e7f1      	b.n	8008ad6 <_scanf_float+0x2ae>
 8008af2:	9802      	ldr	r0, [sp, #8]
 8008af4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008af8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008afc:	463a      	mov	r2, r7
 8008afe:	9002      	str	r0, [sp, #8]
 8008b00:	4640      	mov	r0, r8
 8008b02:	4798      	blx	r3
 8008b04:	6923      	ldr	r3, [r4, #16]
 8008b06:	3b01      	subs	r3, #1
 8008b08:	6123      	str	r3, [r4, #16]
 8008b0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b0e:	fa5f fa8a 	uxtb.w	sl, sl
 8008b12:	f1ba 0f02 	cmp.w	sl, #2
 8008b16:	d1ec      	bne.n	8008af2 <_scanf_float+0x2ca>
 8008b18:	3d03      	subs	r5, #3
 8008b1a:	b2ed      	uxtb	r5, r5
 8008b1c:	1b76      	subs	r6, r6, r5
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	05da      	lsls	r2, r3, #23
 8008b22:	d52f      	bpl.n	8008b84 <_scanf_float+0x35c>
 8008b24:	055b      	lsls	r3, r3, #21
 8008b26:	d510      	bpl.n	8008b4a <_scanf_float+0x322>
 8008b28:	455e      	cmp	r6, fp
 8008b2a:	f67f aebf 	bls.w	80088ac <_scanf_float+0x84>
 8008b2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b32:	463a      	mov	r2, r7
 8008b34:	4640      	mov	r0, r8
 8008b36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b3a:	4798      	blx	r3
 8008b3c:	6923      	ldr	r3, [r4, #16]
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	6123      	str	r3, [r4, #16]
 8008b42:	e7f1      	b.n	8008b28 <_scanf_float+0x300>
 8008b44:	46aa      	mov	sl, r5
 8008b46:	9602      	str	r6, [sp, #8]
 8008b48:	e7df      	b.n	8008b0a <_scanf_float+0x2e2>
 8008b4a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008b4e:	6923      	ldr	r3, [r4, #16]
 8008b50:	2965      	cmp	r1, #101	; 0x65
 8008b52:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b56:	f106 35ff 	add.w	r5, r6, #4294967295
 8008b5a:	6123      	str	r3, [r4, #16]
 8008b5c:	d00c      	beq.n	8008b78 <_scanf_float+0x350>
 8008b5e:	2945      	cmp	r1, #69	; 0x45
 8008b60:	d00a      	beq.n	8008b78 <_scanf_float+0x350>
 8008b62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b66:	463a      	mov	r2, r7
 8008b68:	4640      	mov	r0, r8
 8008b6a:	4798      	blx	r3
 8008b6c:	6923      	ldr	r3, [r4, #16]
 8008b6e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008b72:	3b01      	subs	r3, #1
 8008b74:	1eb5      	subs	r5, r6, #2
 8008b76:	6123      	str	r3, [r4, #16]
 8008b78:	463a      	mov	r2, r7
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b80:	4798      	blx	r3
 8008b82:	462e      	mov	r6, r5
 8008b84:	6825      	ldr	r5, [r4, #0]
 8008b86:	f015 0510 	ands.w	r5, r5, #16
 8008b8a:	d155      	bne.n	8008c38 <_scanf_float+0x410>
 8008b8c:	7035      	strb	r5, [r6, #0]
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b98:	d11b      	bne.n	8008bd2 <_scanf_float+0x3aa>
 8008b9a:	9b01      	ldr	r3, [sp, #4]
 8008b9c:	454b      	cmp	r3, r9
 8008b9e:	eba3 0209 	sub.w	r2, r3, r9
 8008ba2:	d123      	bne.n	8008bec <_scanf_float+0x3c4>
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	4659      	mov	r1, fp
 8008ba8:	4640      	mov	r0, r8
 8008baa:	f000 fe79 	bl	80098a0 <_strtod_r>
 8008bae:	6822      	ldr	r2, [r4, #0]
 8008bb0:	9b03      	ldr	r3, [sp, #12]
 8008bb2:	f012 0f02 	tst.w	r2, #2
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	460f      	mov	r7, r1
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	d021      	beq.n	8008c02 <_scanf_float+0x3da>
 8008bbe:	1d1a      	adds	r2, r3, #4
 8008bc0:	9903      	ldr	r1, [sp, #12]
 8008bc2:	600a      	str	r2, [r1, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	e9c3 6700 	strd	r6, r7, [r3]
 8008bca:	68e3      	ldr	r3, [r4, #12]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	60e3      	str	r3, [r4, #12]
 8008bd0:	e66d      	b.n	80088ae <_scanf_float+0x86>
 8008bd2:	9b04      	ldr	r3, [sp, #16]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d0e5      	beq.n	8008ba4 <_scanf_float+0x37c>
 8008bd8:	9905      	ldr	r1, [sp, #20]
 8008bda:	230a      	movs	r3, #10
 8008bdc:	462a      	mov	r2, r5
 8008bde:	4640      	mov	r0, r8
 8008be0:	3101      	adds	r1, #1
 8008be2:	f000 fedf 	bl	80099a4 <_strtol_r>
 8008be6:	9b04      	ldr	r3, [sp, #16]
 8008be8:	9e05      	ldr	r6, [sp, #20]
 8008bea:	1ac2      	subs	r2, r0, r3
 8008bec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008bf0:	429e      	cmp	r6, r3
 8008bf2:	bf28      	it	cs
 8008bf4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	4910      	ldr	r1, [pc, #64]	; (8008c3c <_scanf_float+0x414>)
 8008bfc:	f000 f826 	bl	8008c4c <siprintf>
 8008c00:	e7d0      	b.n	8008ba4 <_scanf_float+0x37c>
 8008c02:	f012 0f04 	tst.w	r2, #4
 8008c06:	f103 0204 	add.w	r2, r3, #4
 8008c0a:	d1d9      	bne.n	8008bc0 <_scanf_float+0x398>
 8008c0c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008c10:	f8cc 2000 	str.w	r2, [ip]
 8008c14:	f8d3 8000 	ldr.w	r8, [r3]
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	f7fd f85c 	bl	8005cd8 <__aeabi_dcmpun>
 8008c20:	b128      	cbz	r0, 8008c2e <_scanf_float+0x406>
 8008c22:	4807      	ldr	r0, [pc, #28]	; (8008c40 <_scanf_float+0x418>)
 8008c24:	f000 f80e 	bl	8008c44 <nanf>
 8008c28:	f8c8 0000 	str.w	r0, [r8]
 8008c2c:	e7cd      	b.n	8008bca <_scanf_float+0x3a2>
 8008c2e:	4630      	mov	r0, r6
 8008c30:	4639      	mov	r1, r7
 8008c32:	f7fd f8af 	bl	8005d94 <__aeabi_d2f>
 8008c36:	e7f7      	b.n	8008c28 <_scanf_float+0x400>
 8008c38:	2500      	movs	r5, #0
 8008c3a:	e638      	b.n	80088ae <_scanf_float+0x86>
 8008c3c:	0801d2f4 	.word	0x0801d2f4
 8008c40:	0801d700 	.word	0x0801d700

08008c44 <nanf>:
 8008c44:	4800      	ldr	r0, [pc, #0]	; (8008c48 <nanf+0x4>)
 8008c46:	4770      	bx	lr
 8008c48:	7fc00000 	.word	0x7fc00000

08008c4c <siprintf>:
 8008c4c:	b40e      	push	{r1, r2, r3}
 8008c4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c52:	b500      	push	{lr}
 8008c54:	b09c      	sub	sp, #112	; 0x70
 8008c56:	ab1d      	add	r3, sp, #116	; 0x74
 8008c58:	9002      	str	r0, [sp, #8]
 8008c5a:	9006      	str	r0, [sp, #24]
 8008c5c:	9107      	str	r1, [sp, #28]
 8008c5e:	9104      	str	r1, [sp, #16]
 8008c60:	4808      	ldr	r0, [pc, #32]	; (8008c84 <siprintf+0x38>)
 8008c62:	4909      	ldr	r1, [pc, #36]	; (8008c88 <siprintf+0x3c>)
 8008c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c68:	9105      	str	r1, [sp, #20]
 8008c6a:	6800      	ldr	r0, [r0, #0]
 8008c6c:	a902      	add	r1, sp, #8
 8008c6e:	9301      	str	r3, [sp, #4]
 8008c70:	f002 feb8 	bl	800b9e4 <_svfiprintf_r>
 8008c74:	2200      	movs	r2, #0
 8008c76:	9b02      	ldr	r3, [sp, #8]
 8008c78:	701a      	strb	r2, [r3, #0]
 8008c7a:	b01c      	add	sp, #112	; 0x70
 8008c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c80:	b003      	add	sp, #12
 8008c82:	4770      	bx	lr
 8008c84:	20000010 	.word	0x20000010
 8008c88:	ffff0208 	.word	0xffff0208

08008c8c <sulp>:
 8008c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c90:	460f      	mov	r7, r1
 8008c92:	4690      	mov	r8, r2
 8008c94:	f002 fc12 	bl	800b4bc <__ulp>
 8008c98:	4604      	mov	r4, r0
 8008c9a:	460d      	mov	r5, r1
 8008c9c:	f1b8 0f00 	cmp.w	r8, #0
 8008ca0:	d011      	beq.n	8008cc6 <sulp+0x3a>
 8008ca2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008ca6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	dd0b      	ble.n	8008cc6 <sulp+0x3a>
 8008cae:	2400      	movs	r4, #0
 8008cb0:	051b      	lsls	r3, r3, #20
 8008cb2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008cb6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008cba:	4622      	mov	r2, r4
 8008cbc:	462b      	mov	r3, r5
 8008cbe:	f7fc fd71 	bl	80057a4 <__aeabi_dmul>
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	460d      	mov	r5, r1
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	4629      	mov	r1, r5
 8008cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008cd0 <_strtod_l>:
 8008cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd4:	469b      	mov	fp, r3
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	b09f      	sub	sp, #124	; 0x7c
 8008cda:	931a      	str	r3, [sp, #104]	; 0x68
 8008cdc:	4b9e      	ldr	r3, [pc, #632]	; (8008f58 <_strtod_l+0x288>)
 8008cde:	4682      	mov	sl, r0
 8008ce0:	681f      	ldr	r7, [r3, #0]
 8008ce2:	460e      	mov	r6, r1
 8008ce4:	4638      	mov	r0, r7
 8008ce6:	9215      	str	r2, [sp, #84]	; 0x54
 8008ce8:	f7fc fb98 	bl	800541c <strlen>
 8008cec:	f04f 0800 	mov.w	r8, #0
 8008cf0:	4604      	mov	r4, r0
 8008cf2:	f04f 0900 	mov.w	r9, #0
 8008cf6:	9619      	str	r6, [sp, #100]	; 0x64
 8008cf8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cfa:	781a      	ldrb	r2, [r3, #0]
 8008cfc:	2a2b      	cmp	r2, #43	; 0x2b
 8008cfe:	d04c      	beq.n	8008d9a <_strtod_l+0xca>
 8008d00:	d83a      	bhi.n	8008d78 <_strtod_l+0xa8>
 8008d02:	2a0d      	cmp	r2, #13
 8008d04:	d833      	bhi.n	8008d6e <_strtod_l+0x9e>
 8008d06:	2a08      	cmp	r2, #8
 8008d08:	d833      	bhi.n	8008d72 <_strtod_l+0xa2>
 8008d0a:	2a00      	cmp	r2, #0
 8008d0c:	d03d      	beq.n	8008d8a <_strtod_l+0xba>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	930a      	str	r3, [sp, #40]	; 0x28
 8008d12:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008d14:	782b      	ldrb	r3, [r5, #0]
 8008d16:	2b30      	cmp	r3, #48	; 0x30
 8008d18:	f040 80aa 	bne.w	8008e70 <_strtod_l+0x1a0>
 8008d1c:	786b      	ldrb	r3, [r5, #1]
 8008d1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d22:	2b58      	cmp	r3, #88	; 0x58
 8008d24:	d166      	bne.n	8008df4 <_strtod_l+0x124>
 8008d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d28:	4650      	mov	r0, sl
 8008d2a:	9301      	str	r3, [sp, #4]
 8008d2c:	ab1a      	add	r3, sp, #104	; 0x68
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	4a8a      	ldr	r2, [pc, #552]	; (8008f5c <_strtod_l+0x28c>)
 8008d32:	f8cd b008 	str.w	fp, [sp, #8]
 8008d36:	ab1b      	add	r3, sp, #108	; 0x6c
 8008d38:	a919      	add	r1, sp, #100	; 0x64
 8008d3a:	f001 fd17 	bl	800a76c <__gethex>
 8008d3e:	f010 0607 	ands.w	r6, r0, #7
 8008d42:	4604      	mov	r4, r0
 8008d44:	d005      	beq.n	8008d52 <_strtod_l+0x82>
 8008d46:	2e06      	cmp	r6, #6
 8008d48:	d129      	bne.n	8008d9e <_strtod_l+0xce>
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	3501      	adds	r5, #1
 8008d4e:	9519      	str	r5, [sp, #100]	; 0x64
 8008d50:	930a      	str	r3, [sp, #40]	; 0x28
 8008d52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f040 858a 	bne.w	800986e <_strtod_l+0xb9e>
 8008d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d5c:	b1d3      	cbz	r3, 8008d94 <_strtod_l+0xc4>
 8008d5e:	4642      	mov	r2, r8
 8008d60:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008d64:	4610      	mov	r0, r2
 8008d66:	4619      	mov	r1, r3
 8008d68:	b01f      	add	sp, #124	; 0x7c
 8008d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6e:	2a20      	cmp	r2, #32
 8008d70:	d1cd      	bne.n	8008d0e <_strtod_l+0x3e>
 8008d72:	3301      	adds	r3, #1
 8008d74:	9319      	str	r3, [sp, #100]	; 0x64
 8008d76:	e7bf      	b.n	8008cf8 <_strtod_l+0x28>
 8008d78:	2a2d      	cmp	r2, #45	; 0x2d
 8008d7a:	d1c8      	bne.n	8008d0e <_strtod_l+0x3e>
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	920a      	str	r2, [sp, #40]	; 0x28
 8008d80:	1c5a      	adds	r2, r3, #1
 8008d82:	9219      	str	r2, [sp, #100]	; 0x64
 8008d84:	785b      	ldrb	r3, [r3, #1]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1c3      	bne.n	8008d12 <_strtod_l+0x42>
 8008d8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d8c:	9619      	str	r6, [sp, #100]	; 0x64
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f040 856b 	bne.w	800986a <_strtod_l+0xb9a>
 8008d94:	4642      	mov	r2, r8
 8008d96:	464b      	mov	r3, r9
 8008d98:	e7e4      	b.n	8008d64 <_strtod_l+0x94>
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	e7ef      	b.n	8008d7e <_strtod_l+0xae>
 8008d9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008da0:	b13a      	cbz	r2, 8008db2 <_strtod_l+0xe2>
 8008da2:	2135      	movs	r1, #53	; 0x35
 8008da4:	a81c      	add	r0, sp, #112	; 0x70
 8008da6:	f002 fc8d 	bl	800b6c4 <__copybits>
 8008daa:	4650      	mov	r0, sl
 8008dac:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008dae:	f002 f855 	bl	800ae5c <_Bfree>
 8008db2:	3e01      	subs	r6, #1
 8008db4:	2e04      	cmp	r6, #4
 8008db6:	d806      	bhi.n	8008dc6 <_strtod_l+0xf6>
 8008db8:	e8df f006 	tbb	[pc, r6]
 8008dbc:	1714030a 	.word	0x1714030a
 8008dc0:	0a          	.byte	0x0a
 8008dc1:	00          	.byte	0x00
 8008dc2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008dc6:	0721      	lsls	r1, r4, #28
 8008dc8:	d5c3      	bpl.n	8008d52 <_strtod_l+0x82>
 8008dca:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008dce:	e7c0      	b.n	8008d52 <_strtod_l+0x82>
 8008dd0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008dd2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008dd6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008dda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008dde:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008de2:	e7f0      	b.n	8008dc6 <_strtod_l+0xf6>
 8008de4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008f60 <_strtod_l+0x290>
 8008de8:	e7ed      	b.n	8008dc6 <_strtod_l+0xf6>
 8008dea:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008dee:	f04f 38ff 	mov.w	r8, #4294967295
 8008df2:	e7e8      	b.n	8008dc6 <_strtod_l+0xf6>
 8008df4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008df6:	1c5a      	adds	r2, r3, #1
 8008df8:	9219      	str	r2, [sp, #100]	; 0x64
 8008dfa:	785b      	ldrb	r3, [r3, #1]
 8008dfc:	2b30      	cmp	r3, #48	; 0x30
 8008dfe:	d0f9      	beq.n	8008df4 <_strtod_l+0x124>
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0a6      	beq.n	8008d52 <_strtod_l+0x82>
 8008e04:	2301      	movs	r3, #1
 8008e06:	9307      	str	r3, [sp, #28]
 8008e08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e0a:	220a      	movs	r2, #10
 8008e0c:	9308      	str	r3, [sp, #32]
 8008e0e:	2300      	movs	r3, #0
 8008e10:	469b      	mov	fp, r3
 8008e12:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008e16:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008e18:	7805      	ldrb	r5, [r0, #0]
 8008e1a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008e1e:	b2d9      	uxtb	r1, r3
 8008e20:	2909      	cmp	r1, #9
 8008e22:	d927      	bls.n	8008e74 <_strtod_l+0x1a4>
 8008e24:	4622      	mov	r2, r4
 8008e26:	4639      	mov	r1, r7
 8008e28:	f002 fef2 	bl	800bc10 <strncmp>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d033      	beq.n	8008e98 <_strtod_l+0x1c8>
 8008e30:	2000      	movs	r0, #0
 8008e32:	462a      	mov	r2, r5
 8008e34:	465c      	mov	r4, fp
 8008e36:	4603      	mov	r3, r0
 8008e38:	9004      	str	r0, [sp, #16]
 8008e3a:	2a65      	cmp	r2, #101	; 0x65
 8008e3c:	d001      	beq.n	8008e42 <_strtod_l+0x172>
 8008e3e:	2a45      	cmp	r2, #69	; 0x45
 8008e40:	d114      	bne.n	8008e6c <_strtod_l+0x19c>
 8008e42:	b91c      	cbnz	r4, 8008e4c <_strtod_l+0x17c>
 8008e44:	9a07      	ldr	r2, [sp, #28]
 8008e46:	4302      	orrs	r2, r0
 8008e48:	d09f      	beq.n	8008d8a <_strtod_l+0xba>
 8008e4a:	2400      	movs	r4, #0
 8008e4c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008e4e:	1c72      	adds	r2, r6, #1
 8008e50:	9219      	str	r2, [sp, #100]	; 0x64
 8008e52:	7872      	ldrb	r2, [r6, #1]
 8008e54:	2a2b      	cmp	r2, #43	; 0x2b
 8008e56:	d079      	beq.n	8008f4c <_strtod_l+0x27c>
 8008e58:	2a2d      	cmp	r2, #45	; 0x2d
 8008e5a:	f000 8083 	beq.w	8008f64 <_strtod_l+0x294>
 8008e5e:	2700      	movs	r7, #0
 8008e60:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008e64:	2909      	cmp	r1, #9
 8008e66:	f240 8083 	bls.w	8008f70 <_strtod_l+0x2a0>
 8008e6a:	9619      	str	r6, [sp, #100]	; 0x64
 8008e6c:	2500      	movs	r5, #0
 8008e6e:	e09f      	b.n	8008fb0 <_strtod_l+0x2e0>
 8008e70:	2300      	movs	r3, #0
 8008e72:	e7c8      	b.n	8008e06 <_strtod_l+0x136>
 8008e74:	f1bb 0f08 	cmp.w	fp, #8
 8008e78:	bfd5      	itete	le
 8008e7a:	9906      	ldrle	r1, [sp, #24]
 8008e7c:	9905      	ldrgt	r1, [sp, #20]
 8008e7e:	fb02 3301 	mlale	r3, r2, r1, r3
 8008e82:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008e86:	f100 0001 	add.w	r0, r0, #1
 8008e8a:	bfd4      	ite	le
 8008e8c:	9306      	strle	r3, [sp, #24]
 8008e8e:	9305      	strgt	r3, [sp, #20]
 8008e90:	f10b 0b01 	add.w	fp, fp, #1
 8008e94:	9019      	str	r0, [sp, #100]	; 0x64
 8008e96:	e7be      	b.n	8008e16 <_strtod_l+0x146>
 8008e98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e9a:	191a      	adds	r2, r3, r4
 8008e9c:	9219      	str	r2, [sp, #100]	; 0x64
 8008e9e:	5d1a      	ldrb	r2, [r3, r4]
 8008ea0:	f1bb 0f00 	cmp.w	fp, #0
 8008ea4:	d036      	beq.n	8008f14 <_strtod_l+0x244>
 8008ea6:	465c      	mov	r4, fp
 8008ea8:	9004      	str	r0, [sp, #16]
 8008eaa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008eae:	2b09      	cmp	r3, #9
 8008eb0:	d912      	bls.n	8008ed8 <_strtod_l+0x208>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e7c1      	b.n	8008e3a <_strtod_l+0x16a>
 8008eb6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008eb8:	3001      	adds	r0, #1
 8008eba:	1c5a      	adds	r2, r3, #1
 8008ebc:	9219      	str	r2, [sp, #100]	; 0x64
 8008ebe:	785a      	ldrb	r2, [r3, #1]
 8008ec0:	2a30      	cmp	r2, #48	; 0x30
 8008ec2:	d0f8      	beq.n	8008eb6 <_strtod_l+0x1e6>
 8008ec4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008ec8:	2b08      	cmp	r3, #8
 8008eca:	f200 84d5 	bhi.w	8009878 <_strtod_l+0xba8>
 8008ece:	9004      	str	r0, [sp, #16]
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ed6:	9308      	str	r3, [sp, #32]
 8008ed8:	3a30      	subs	r2, #48	; 0x30
 8008eda:	f100 0301 	add.w	r3, r0, #1
 8008ede:	d013      	beq.n	8008f08 <_strtod_l+0x238>
 8008ee0:	9904      	ldr	r1, [sp, #16]
 8008ee2:	1905      	adds	r5, r0, r4
 8008ee4:	4419      	add	r1, r3
 8008ee6:	9104      	str	r1, [sp, #16]
 8008ee8:	4623      	mov	r3, r4
 8008eea:	210a      	movs	r1, #10
 8008eec:	42ab      	cmp	r3, r5
 8008eee:	d113      	bne.n	8008f18 <_strtod_l+0x248>
 8008ef0:	1823      	adds	r3, r4, r0
 8008ef2:	2b08      	cmp	r3, #8
 8008ef4:	f104 0401 	add.w	r4, r4, #1
 8008ef8:	4404      	add	r4, r0
 8008efa:	dc1b      	bgt.n	8008f34 <_strtod_l+0x264>
 8008efc:	230a      	movs	r3, #10
 8008efe:	9906      	ldr	r1, [sp, #24]
 8008f00:	fb03 2301 	mla	r3, r3, r1, r2
 8008f04:	9306      	str	r3, [sp, #24]
 8008f06:	2300      	movs	r3, #0
 8008f08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	1c51      	adds	r1, r2, #1
 8008f0e:	9119      	str	r1, [sp, #100]	; 0x64
 8008f10:	7852      	ldrb	r2, [r2, #1]
 8008f12:	e7ca      	b.n	8008eaa <_strtod_l+0x1da>
 8008f14:	4658      	mov	r0, fp
 8008f16:	e7d3      	b.n	8008ec0 <_strtod_l+0x1f0>
 8008f18:	2b08      	cmp	r3, #8
 8008f1a:	dc04      	bgt.n	8008f26 <_strtod_l+0x256>
 8008f1c:	9f06      	ldr	r7, [sp, #24]
 8008f1e:	434f      	muls	r7, r1
 8008f20:	9706      	str	r7, [sp, #24]
 8008f22:	3301      	adds	r3, #1
 8008f24:	e7e2      	b.n	8008eec <_strtod_l+0x21c>
 8008f26:	1c5f      	adds	r7, r3, #1
 8008f28:	2f10      	cmp	r7, #16
 8008f2a:	bfde      	ittt	le
 8008f2c:	9f05      	ldrle	r7, [sp, #20]
 8008f2e:	434f      	mulle	r7, r1
 8008f30:	9705      	strle	r7, [sp, #20]
 8008f32:	e7f6      	b.n	8008f22 <_strtod_l+0x252>
 8008f34:	2c10      	cmp	r4, #16
 8008f36:	bfdf      	itttt	le
 8008f38:	230a      	movle	r3, #10
 8008f3a:	9905      	ldrle	r1, [sp, #20]
 8008f3c:	fb03 2301 	mlale	r3, r3, r1, r2
 8008f40:	9305      	strle	r3, [sp, #20]
 8008f42:	e7e0      	b.n	8008f06 <_strtod_l+0x236>
 8008f44:	2300      	movs	r3, #0
 8008f46:	9304      	str	r3, [sp, #16]
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e77b      	b.n	8008e44 <_strtod_l+0x174>
 8008f4c:	2700      	movs	r7, #0
 8008f4e:	1cb2      	adds	r2, r6, #2
 8008f50:	9219      	str	r2, [sp, #100]	; 0x64
 8008f52:	78b2      	ldrb	r2, [r6, #2]
 8008f54:	e784      	b.n	8008e60 <_strtod_l+0x190>
 8008f56:	bf00      	nop
 8008f58:	0801d548 	.word	0x0801d548
 8008f5c:	0801d2fc 	.word	0x0801d2fc
 8008f60:	7ff00000 	.word	0x7ff00000
 8008f64:	2701      	movs	r7, #1
 8008f66:	e7f2      	b.n	8008f4e <_strtod_l+0x27e>
 8008f68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f6a:	1c51      	adds	r1, r2, #1
 8008f6c:	9119      	str	r1, [sp, #100]	; 0x64
 8008f6e:	7852      	ldrb	r2, [r2, #1]
 8008f70:	2a30      	cmp	r2, #48	; 0x30
 8008f72:	d0f9      	beq.n	8008f68 <_strtod_l+0x298>
 8008f74:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008f78:	2908      	cmp	r1, #8
 8008f7a:	f63f af77 	bhi.w	8008e6c <_strtod_l+0x19c>
 8008f7e:	f04f 0e0a 	mov.w	lr, #10
 8008f82:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008f86:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f88:	9209      	str	r2, [sp, #36]	; 0x24
 8008f8a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f8c:	1c51      	adds	r1, r2, #1
 8008f8e:	9119      	str	r1, [sp, #100]	; 0x64
 8008f90:	7852      	ldrb	r2, [r2, #1]
 8008f92:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008f96:	2d09      	cmp	r5, #9
 8008f98:	d935      	bls.n	8009006 <_strtod_l+0x336>
 8008f9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f9c:	1b49      	subs	r1, r1, r5
 8008f9e:	2908      	cmp	r1, #8
 8008fa0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008fa4:	dc02      	bgt.n	8008fac <_strtod_l+0x2dc>
 8008fa6:	4565      	cmp	r5, ip
 8008fa8:	bfa8      	it	ge
 8008faa:	4665      	movge	r5, ip
 8008fac:	b107      	cbz	r7, 8008fb0 <_strtod_l+0x2e0>
 8008fae:	426d      	negs	r5, r5
 8008fb0:	2c00      	cmp	r4, #0
 8008fb2:	d14c      	bne.n	800904e <_strtod_l+0x37e>
 8008fb4:	9907      	ldr	r1, [sp, #28]
 8008fb6:	4301      	orrs	r1, r0
 8008fb8:	f47f aecb 	bne.w	8008d52 <_strtod_l+0x82>
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f47f aee4 	bne.w	8008d8a <_strtod_l+0xba>
 8008fc2:	2a69      	cmp	r2, #105	; 0x69
 8008fc4:	d026      	beq.n	8009014 <_strtod_l+0x344>
 8008fc6:	dc23      	bgt.n	8009010 <_strtod_l+0x340>
 8008fc8:	2a49      	cmp	r2, #73	; 0x49
 8008fca:	d023      	beq.n	8009014 <_strtod_l+0x344>
 8008fcc:	2a4e      	cmp	r2, #78	; 0x4e
 8008fce:	f47f aedc 	bne.w	8008d8a <_strtod_l+0xba>
 8008fd2:	499d      	ldr	r1, [pc, #628]	; (8009248 <_strtod_l+0x578>)
 8008fd4:	a819      	add	r0, sp, #100	; 0x64
 8008fd6:	f001 fe17 	bl	800ac08 <__match>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	f43f aed5 	beq.w	8008d8a <_strtod_l+0xba>
 8008fe0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b28      	cmp	r3, #40	; 0x28
 8008fe6:	d12c      	bne.n	8009042 <_strtod_l+0x372>
 8008fe8:	4998      	ldr	r1, [pc, #608]	; (800924c <_strtod_l+0x57c>)
 8008fea:	aa1c      	add	r2, sp, #112	; 0x70
 8008fec:	a819      	add	r0, sp, #100	; 0x64
 8008fee:	f001 fe1f 	bl	800ac30 <__hexnan>
 8008ff2:	2805      	cmp	r0, #5
 8008ff4:	d125      	bne.n	8009042 <_strtod_l+0x372>
 8008ff6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ff8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008ffc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009000:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009004:	e6a5      	b.n	8008d52 <_strtod_l+0x82>
 8009006:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800900a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800900e:	e7bc      	b.n	8008f8a <_strtod_l+0x2ba>
 8009010:	2a6e      	cmp	r2, #110	; 0x6e
 8009012:	e7dc      	b.n	8008fce <_strtod_l+0x2fe>
 8009014:	498e      	ldr	r1, [pc, #568]	; (8009250 <_strtod_l+0x580>)
 8009016:	a819      	add	r0, sp, #100	; 0x64
 8009018:	f001 fdf6 	bl	800ac08 <__match>
 800901c:	2800      	cmp	r0, #0
 800901e:	f43f aeb4 	beq.w	8008d8a <_strtod_l+0xba>
 8009022:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009024:	498b      	ldr	r1, [pc, #556]	; (8009254 <_strtod_l+0x584>)
 8009026:	3b01      	subs	r3, #1
 8009028:	a819      	add	r0, sp, #100	; 0x64
 800902a:	9319      	str	r3, [sp, #100]	; 0x64
 800902c:	f001 fdec 	bl	800ac08 <__match>
 8009030:	b910      	cbnz	r0, 8009038 <_strtod_l+0x368>
 8009032:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009034:	3301      	adds	r3, #1
 8009036:	9319      	str	r3, [sp, #100]	; 0x64
 8009038:	f04f 0800 	mov.w	r8, #0
 800903c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009258 <_strtod_l+0x588>
 8009040:	e687      	b.n	8008d52 <_strtod_l+0x82>
 8009042:	4886      	ldr	r0, [pc, #536]	; (800925c <_strtod_l+0x58c>)
 8009044:	f002 fdce 	bl	800bbe4 <nan>
 8009048:	4680      	mov	r8, r0
 800904a:	4689      	mov	r9, r1
 800904c:	e681      	b.n	8008d52 <_strtod_l+0x82>
 800904e:	9b04      	ldr	r3, [sp, #16]
 8009050:	f1bb 0f00 	cmp.w	fp, #0
 8009054:	bf08      	it	eq
 8009056:	46a3      	moveq	fp, r4
 8009058:	1aeb      	subs	r3, r5, r3
 800905a:	2c10      	cmp	r4, #16
 800905c:	9806      	ldr	r0, [sp, #24]
 800905e:	4626      	mov	r6, r4
 8009060:	9307      	str	r3, [sp, #28]
 8009062:	bfa8      	it	ge
 8009064:	2610      	movge	r6, #16
 8009066:	f7fc fb23 	bl	80056b0 <__aeabi_ui2d>
 800906a:	2c09      	cmp	r4, #9
 800906c:	4680      	mov	r8, r0
 800906e:	4689      	mov	r9, r1
 8009070:	dd13      	ble.n	800909a <_strtod_l+0x3ca>
 8009072:	4b7b      	ldr	r3, [pc, #492]	; (8009260 <_strtod_l+0x590>)
 8009074:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009078:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800907c:	f7fc fb92 	bl	80057a4 <__aeabi_dmul>
 8009080:	4680      	mov	r8, r0
 8009082:	9805      	ldr	r0, [sp, #20]
 8009084:	4689      	mov	r9, r1
 8009086:	f7fc fb13 	bl	80056b0 <__aeabi_ui2d>
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	4640      	mov	r0, r8
 8009090:	4649      	mov	r1, r9
 8009092:	f7fc f9d1 	bl	8005438 <__adddf3>
 8009096:	4680      	mov	r8, r0
 8009098:	4689      	mov	r9, r1
 800909a:	2c0f      	cmp	r4, #15
 800909c:	dc36      	bgt.n	800910c <_strtod_l+0x43c>
 800909e:	9b07      	ldr	r3, [sp, #28]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f43f ae56 	beq.w	8008d52 <_strtod_l+0x82>
 80090a6:	dd22      	ble.n	80090ee <_strtod_l+0x41e>
 80090a8:	2b16      	cmp	r3, #22
 80090aa:	dc09      	bgt.n	80090c0 <_strtod_l+0x3f0>
 80090ac:	496c      	ldr	r1, [pc, #432]	; (8009260 <_strtod_l+0x590>)
 80090ae:	4642      	mov	r2, r8
 80090b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090b4:	464b      	mov	r3, r9
 80090b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090ba:	f7fc fb73 	bl	80057a4 <__aeabi_dmul>
 80090be:	e7c3      	b.n	8009048 <_strtod_l+0x378>
 80090c0:	9a07      	ldr	r2, [sp, #28]
 80090c2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80090c6:	4293      	cmp	r3, r2
 80090c8:	db20      	blt.n	800910c <_strtod_l+0x43c>
 80090ca:	4d65      	ldr	r5, [pc, #404]	; (8009260 <_strtod_l+0x590>)
 80090cc:	f1c4 040f 	rsb	r4, r4, #15
 80090d0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80090d4:	4642      	mov	r2, r8
 80090d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090da:	464b      	mov	r3, r9
 80090dc:	f7fc fb62 	bl	80057a4 <__aeabi_dmul>
 80090e0:	9b07      	ldr	r3, [sp, #28]
 80090e2:	1b1c      	subs	r4, r3, r4
 80090e4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80090e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090ec:	e7e5      	b.n	80090ba <_strtod_l+0x3ea>
 80090ee:	9b07      	ldr	r3, [sp, #28]
 80090f0:	3316      	adds	r3, #22
 80090f2:	db0b      	blt.n	800910c <_strtod_l+0x43c>
 80090f4:	9b04      	ldr	r3, [sp, #16]
 80090f6:	4640      	mov	r0, r8
 80090f8:	1b5d      	subs	r5, r3, r5
 80090fa:	4b59      	ldr	r3, [pc, #356]	; (8009260 <_strtod_l+0x590>)
 80090fc:	4649      	mov	r1, r9
 80090fe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009102:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009106:	f7fc fc77 	bl	80059f8 <__aeabi_ddiv>
 800910a:	e79d      	b.n	8009048 <_strtod_l+0x378>
 800910c:	9b07      	ldr	r3, [sp, #28]
 800910e:	1ba6      	subs	r6, r4, r6
 8009110:	441e      	add	r6, r3
 8009112:	2e00      	cmp	r6, #0
 8009114:	dd74      	ble.n	8009200 <_strtod_l+0x530>
 8009116:	f016 030f 	ands.w	r3, r6, #15
 800911a:	d00a      	beq.n	8009132 <_strtod_l+0x462>
 800911c:	4950      	ldr	r1, [pc, #320]	; (8009260 <_strtod_l+0x590>)
 800911e:	4642      	mov	r2, r8
 8009120:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009124:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009128:	464b      	mov	r3, r9
 800912a:	f7fc fb3b 	bl	80057a4 <__aeabi_dmul>
 800912e:	4680      	mov	r8, r0
 8009130:	4689      	mov	r9, r1
 8009132:	f036 060f 	bics.w	r6, r6, #15
 8009136:	d052      	beq.n	80091de <_strtod_l+0x50e>
 8009138:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800913c:	dd27      	ble.n	800918e <_strtod_l+0x4be>
 800913e:	f04f 0b00 	mov.w	fp, #0
 8009142:	f8cd b010 	str.w	fp, [sp, #16]
 8009146:	f8cd b020 	str.w	fp, [sp, #32]
 800914a:	f8cd b018 	str.w	fp, [sp, #24]
 800914e:	2322      	movs	r3, #34	; 0x22
 8009150:	f04f 0800 	mov.w	r8, #0
 8009154:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009258 <_strtod_l+0x588>
 8009158:	f8ca 3000 	str.w	r3, [sl]
 800915c:	9b08      	ldr	r3, [sp, #32]
 800915e:	2b00      	cmp	r3, #0
 8009160:	f43f adf7 	beq.w	8008d52 <_strtod_l+0x82>
 8009164:	4650      	mov	r0, sl
 8009166:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009168:	f001 fe78 	bl	800ae5c <_Bfree>
 800916c:	4650      	mov	r0, sl
 800916e:	9906      	ldr	r1, [sp, #24]
 8009170:	f001 fe74 	bl	800ae5c <_Bfree>
 8009174:	4650      	mov	r0, sl
 8009176:	9904      	ldr	r1, [sp, #16]
 8009178:	f001 fe70 	bl	800ae5c <_Bfree>
 800917c:	4650      	mov	r0, sl
 800917e:	9908      	ldr	r1, [sp, #32]
 8009180:	f001 fe6c 	bl	800ae5c <_Bfree>
 8009184:	4659      	mov	r1, fp
 8009186:	4650      	mov	r0, sl
 8009188:	f001 fe68 	bl	800ae5c <_Bfree>
 800918c:	e5e1      	b.n	8008d52 <_strtod_l+0x82>
 800918e:	4b35      	ldr	r3, [pc, #212]	; (8009264 <_strtod_l+0x594>)
 8009190:	4640      	mov	r0, r8
 8009192:	9305      	str	r3, [sp, #20]
 8009194:	2300      	movs	r3, #0
 8009196:	4649      	mov	r1, r9
 8009198:	461f      	mov	r7, r3
 800919a:	1136      	asrs	r6, r6, #4
 800919c:	2e01      	cmp	r6, #1
 800919e:	dc21      	bgt.n	80091e4 <_strtod_l+0x514>
 80091a0:	b10b      	cbz	r3, 80091a6 <_strtod_l+0x4d6>
 80091a2:	4680      	mov	r8, r0
 80091a4:	4689      	mov	r9, r1
 80091a6:	4b2f      	ldr	r3, [pc, #188]	; (8009264 <_strtod_l+0x594>)
 80091a8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80091ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80091b0:	4642      	mov	r2, r8
 80091b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091b6:	464b      	mov	r3, r9
 80091b8:	f7fc faf4 	bl	80057a4 <__aeabi_dmul>
 80091bc:	4b26      	ldr	r3, [pc, #152]	; (8009258 <_strtod_l+0x588>)
 80091be:	460a      	mov	r2, r1
 80091c0:	400b      	ands	r3, r1
 80091c2:	4929      	ldr	r1, [pc, #164]	; (8009268 <_strtod_l+0x598>)
 80091c4:	4680      	mov	r8, r0
 80091c6:	428b      	cmp	r3, r1
 80091c8:	d8b9      	bhi.n	800913e <_strtod_l+0x46e>
 80091ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80091ce:	428b      	cmp	r3, r1
 80091d0:	bf86      	itte	hi
 80091d2:	f04f 38ff 	movhi.w	r8, #4294967295
 80091d6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800926c <_strtod_l+0x59c>
 80091da:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80091de:	2300      	movs	r3, #0
 80091e0:	9305      	str	r3, [sp, #20]
 80091e2:	e07f      	b.n	80092e4 <_strtod_l+0x614>
 80091e4:	07f2      	lsls	r2, r6, #31
 80091e6:	d505      	bpl.n	80091f4 <_strtod_l+0x524>
 80091e8:	9b05      	ldr	r3, [sp, #20]
 80091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ee:	f7fc fad9 	bl	80057a4 <__aeabi_dmul>
 80091f2:	2301      	movs	r3, #1
 80091f4:	9a05      	ldr	r2, [sp, #20]
 80091f6:	3701      	adds	r7, #1
 80091f8:	3208      	adds	r2, #8
 80091fa:	1076      	asrs	r6, r6, #1
 80091fc:	9205      	str	r2, [sp, #20]
 80091fe:	e7cd      	b.n	800919c <_strtod_l+0x4cc>
 8009200:	d0ed      	beq.n	80091de <_strtod_l+0x50e>
 8009202:	4276      	negs	r6, r6
 8009204:	f016 020f 	ands.w	r2, r6, #15
 8009208:	d00a      	beq.n	8009220 <_strtod_l+0x550>
 800920a:	4b15      	ldr	r3, [pc, #84]	; (8009260 <_strtod_l+0x590>)
 800920c:	4640      	mov	r0, r8
 800920e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009212:	4649      	mov	r1, r9
 8009214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009218:	f7fc fbee 	bl	80059f8 <__aeabi_ddiv>
 800921c:	4680      	mov	r8, r0
 800921e:	4689      	mov	r9, r1
 8009220:	1136      	asrs	r6, r6, #4
 8009222:	d0dc      	beq.n	80091de <_strtod_l+0x50e>
 8009224:	2e1f      	cmp	r6, #31
 8009226:	dd23      	ble.n	8009270 <_strtod_l+0x5a0>
 8009228:	f04f 0b00 	mov.w	fp, #0
 800922c:	f8cd b010 	str.w	fp, [sp, #16]
 8009230:	f8cd b020 	str.w	fp, [sp, #32]
 8009234:	f8cd b018 	str.w	fp, [sp, #24]
 8009238:	2322      	movs	r3, #34	; 0x22
 800923a:	f04f 0800 	mov.w	r8, #0
 800923e:	f04f 0900 	mov.w	r9, #0
 8009242:	f8ca 3000 	str.w	r3, [sl]
 8009246:	e789      	b.n	800915c <_strtod_l+0x48c>
 8009248:	0801d2cd 	.word	0x0801d2cd
 800924c:	0801d310 	.word	0x0801d310
 8009250:	0801d2c5 	.word	0x0801d2c5
 8009254:	0801d454 	.word	0x0801d454
 8009258:	7ff00000 	.word	0x7ff00000
 800925c:	0801d700 	.word	0x0801d700
 8009260:	0801d5e0 	.word	0x0801d5e0
 8009264:	0801d5b8 	.word	0x0801d5b8
 8009268:	7ca00000 	.word	0x7ca00000
 800926c:	7fefffff 	.word	0x7fefffff
 8009270:	f016 0310 	ands.w	r3, r6, #16
 8009274:	bf18      	it	ne
 8009276:	236a      	movne	r3, #106	; 0x6a
 8009278:	4640      	mov	r0, r8
 800927a:	9305      	str	r3, [sp, #20]
 800927c:	4649      	mov	r1, r9
 800927e:	2300      	movs	r3, #0
 8009280:	4fb0      	ldr	r7, [pc, #704]	; (8009544 <_strtod_l+0x874>)
 8009282:	07f2      	lsls	r2, r6, #31
 8009284:	d504      	bpl.n	8009290 <_strtod_l+0x5c0>
 8009286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800928a:	f7fc fa8b 	bl	80057a4 <__aeabi_dmul>
 800928e:	2301      	movs	r3, #1
 8009290:	1076      	asrs	r6, r6, #1
 8009292:	f107 0708 	add.w	r7, r7, #8
 8009296:	d1f4      	bne.n	8009282 <_strtod_l+0x5b2>
 8009298:	b10b      	cbz	r3, 800929e <_strtod_l+0x5ce>
 800929a:	4680      	mov	r8, r0
 800929c:	4689      	mov	r9, r1
 800929e:	9b05      	ldr	r3, [sp, #20]
 80092a0:	b1c3      	cbz	r3, 80092d4 <_strtod_l+0x604>
 80092a2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80092a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	4649      	mov	r1, r9
 80092ae:	dd11      	ble.n	80092d4 <_strtod_l+0x604>
 80092b0:	2b1f      	cmp	r3, #31
 80092b2:	f340 8127 	ble.w	8009504 <_strtod_l+0x834>
 80092b6:	2b34      	cmp	r3, #52	; 0x34
 80092b8:	bfd8      	it	le
 80092ba:	f04f 33ff 	movle.w	r3, #4294967295
 80092be:	f04f 0800 	mov.w	r8, #0
 80092c2:	bfcf      	iteee	gt
 80092c4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80092c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80092cc:	fa03 f202 	lslle.w	r2, r3, r2
 80092d0:	ea02 0901 	andle.w	r9, r2, r1
 80092d4:	2200      	movs	r2, #0
 80092d6:	2300      	movs	r3, #0
 80092d8:	4640      	mov	r0, r8
 80092da:	4649      	mov	r1, r9
 80092dc:	f7fc fcca 	bl	8005c74 <__aeabi_dcmpeq>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d1a1      	bne.n	8009228 <_strtod_l+0x558>
 80092e4:	9b06      	ldr	r3, [sp, #24]
 80092e6:	465a      	mov	r2, fp
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	4650      	mov	r0, sl
 80092ec:	4623      	mov	r3, r4
 80092ee:	9908      	ldr	r1, [sp, #32]
 80092f0:	f001 fe1c 	bl	800af2c <__s2b>
 80092f4:	9008      	str	r0, [sp, #32]
 80092f6:	2800      	cmp	r0, #0
 80092f8:	f43f af21 	beq.w	800913e <_strtod_l+0x46e>
 80092fc:	9b04      	ldr	r3, [sp, #16]
 80092fe:	f04f 0b00 	mov.w	fp, #0
 8009302:	1b5d      	subs	r5, r3, r5
 8009304:	9b07      	ldr	r3, [sp, #28]
 8009306:	f8cd b010 	str.w	fp, [sp, #16]
 800930a:	2b00      	cmp	r3, #0
 800930c:	bfb4      	ite	lt
 800930e:	462b      	movlt	r3, r5
 8009310:	2300      	movge	r3, #0
 8009312:	930e      	str	r3, [sp, #56]	; 0x38
 8009314:	9b07      	ldr	r3, [sp, #28]
 8009316:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800931a:	9314      	str	r3, [sp, #80]	; 0x50
 800931c:	9b08      	ldr	r3, [sp, #32]
 800931e:	4650      	mov	r0, sl
 8009320:	6859      	ldr	r1, [r3, #4]
 8009322:	f001 fd5b 	bl	800addc <_Balloc>
 8009326:	9006      	str	r0, [sp, #24]
 8009328:	2800      	cmp	r0, #0
 800932a:	f43f af10 	beq.w	800914e <_strtod_l+0x47e>
 800932e:	9b08      	ldr	r3, [sp, #32]
 8009330:	300c      	adds	r0, #12
 8009332:	691a      	ldr	r2, [r3, #16]
 8009334:	f103 010c 	add.w	r1, r3, #12
 8009338:	3202      	adds	r2, #2
 800933a:	0092      	lsls	r2, r2, #2
 800933c:	f001 fd40 	bl	800adc0 <memcpy>
 8009340:	ab1c      	add	r3, sp, #112	; 0x70
 8009342:	9301      	str	r3, [sp, #4]
 8009344:	ab1b      	add	r3, sp, #108	; 0x6c
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	4642      	mov	r2, r8
 800934a:	464b      	mov	r3, r9
 800934c:	4650      	mov	r0, sl
 800934e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8009352:	f002 f92d 	bl	800b5b0 <__d2b>
 8009356:	901a      	str	r0, [sp, #104]	; 0x68
 8009358:	2800      	cmp	r0, #0
 800935a:	f43f aef8 	beq.w	800914e <_strtod_l+0x47e>
 800935e:	2101      	movs	r1, #1
 8009360:	4650      	mov	r0, sl
 8009362:	f001 fe7b 	bl	800b05c <__i2b>
 8009366:	4603      	mov	r3, r0
 8009368:	9004      	str	r0, [sp, #16]
 800936a:	2800      	cmp	r0, #0
 800936c:	f43f aeef 	beq.w	800914e <_strtod_l+0x47e>
 8009370:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009372:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009374:	2d00      	cmp	r5, #0
 8009376:	bfab      	itete	ge
 8009378:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800937a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800937c:	18ee      	addge	r6, r5, r3
 800937e:	1b5c      	sublt	r4, r3, r5
 8009380:	9b05      	ldr	r3, [sp, #20]
 8009382:	bfa8      	it	ge
 8009384:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8009386:	eba5 0503 	sub.w	r5, r5, r3
 800938a:	4415      	add	r5, r2
 800938c:	4b6e      	ldr	r3, [pc, #440]	; (8009548 <_strtod_l+0x878>)
 800938e:	f105 35ff 	add.w	r5, r5, #4294967295
 8009392:	bfb8      	it	lt
 8009394:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009396:	429d      	cmp	r5, r3
 8009398:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800939c:	f280 80c4 	bge.w	8009528 <_strtod_l+0x858>
 80093a0:	1b5b      	subs	r3, r3, r5
 80093a2:	2b1f      	cmp	r3, #31
 80093a4:	f04f 0701 	mov.w	r7, #1
 80093a8:	eba2 0203 	sub.w	r2, r2, r3
 80093ac:	f300 80b1 	bgt.w	8009512 <_strtod_l+0x842>
 80093b0:	2500      	movs	r5, #0
 80093b2:	fa07 f303 	lsl.w	r3, r7, r3
 80093b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80093b8:	18b7      	adds	r7, r6, r2
 80093ba:	9b05      	ldr	r3, [sp, #20]
 80093bc:	42be      	cmp	r6, r7
 80093be:	4414      	add	r4, r2
 80093c0:	441c      	add	r4, r3
 80093c2:	4633      	mov	r3, r6
 80093c4:	bfa8      	it	ge
 80093c6:	463b      	movge	r3, r7
 80093c8:	42a3      	cmp	r3, r4
 80093ca:	bfa8      	it	ge
 80093cc:	4623      	movge	r3, r4
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	bfc2      	ittt	gt
 80093d2:	1aff      	subgt	r7, r7, r3
 80093d4:	1ae4      	subgt	r4, r4, r3
 80093d6:	1af6      	subgt	r6, r6, r3
 80093d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093da:	2b00      	cmp	r3, #0
 80093dc:	dd17      	ble.n	800940e <_strtod_l+0x73e>
 80093de:	461a      	mov	r2, r3
 80093e0:	4650      	mov	r0, sl
 80093e2:	9904      	ldr	r1, [sp, #16]
 80093e4:	f001 fef8 	bl	800b1d8 <__pow5mult>
 80093e8:	9004      	str	r0, [sp, #16]
 80093ea:	2800      	cmp	r0, #0
 80093ec:	f43f aeaf 	beq.w	800914e <_strtod_l+0x47e>
 80093f0:	4601      	mov	r1, r0
 80093f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80093f4:	4650      	mov	r0, sl
 80093f6:	f001 fe47 	bl	800b088 <__multiply>
 80093fa:	9009      	str	r0, [sp, #36]	; 0x24
 80093fc:	2800      	cmp	r0, #0
 80093fe:	f43f aea6 	beq.w	800914e <_strtod_l+0x47e>
 8009402:	4650      	mov	r0, sl
 8009404:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009406:	f001 fd29 	bl	800ae5c <_Bfree>
 800940a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800940c:	931a      	str	r3, [sp, #104]	; 0x68
 800940e:	2f00      	cmp	r7, #0
 8009410:	f300 808e 	bgt.w	8009530 <_strtod_l+0x860>
 8009414:	9b07      	ldr	r3, [sp, #28]
 8009416:	2b00      	cmp	r3, #0
 8009418:	dd08      	ble.n	800942c <_strtod_l+0x75c>
 800941a:	4650      	mov	r0, sl
 800941c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800941e:	9906      	ldr	r1, [sp, #24]
 8009420:	f001 feda 	bl	800b1d8 <__pow5mult>
 8009424:	9006      	str	r0, [sp, #24]
 8009426:	2800      	cmp	r0, #0
 8009428:	f43f ae91 	beq.w	800914e <_strtod_l+0x47e>
 800942c:	2c00      	cmp	r4, #0
 800942e:	dd08      	ble.n	8009442 <_strtod_l+0x772>
 8009430:	4622      	mov	r2, r4
 8009432:	4650      	mov	r0, sl
 8009434:	9906      	ldr	r1, [sp, #24]
 8009436:	f001 ff29 	bl	800b28c <__lshift>
 800943a:	9006      	str	r0, [sp, #24]
 800943c:	2800      	cmp	r0, #0
 800943e:	f43f ae86 	beq.w	800914e <_strtod_l+0x47e>
 8009442:	2e00      	cmp	r6, #0
 8009444:	dd08      	ble.n	8009458 <_strtod_l+0x788>
 8009446:	4632      	mov	r2, r6
 8009448:	4650      	mov	r0, sl
 800944a:	9904      	ldr	r1, [sp, #16]
 800944c:	f001 ff1e 	bl	800b28c <__lshift>
 8009450:	9004      	str	r0, [sp, #16]
 8009452:	2800      	cmp	r0, #0
 8009454:	f43f ae7b 	beq.w	800914e <_strtod_l+0x47e>
 8009458:	4650      	mov	r0, sl
 800945a:	9a06      	ldr	r2, [sp, #24]
 800945c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800945e:	f001 ffa1 	bl	800b3a4 <__mdiff>
 8009462:	4683      	mov	fp, r0
 8009464:	2800      	cmp	r0, #0
 8009466:	f43f ae72 	beq.w	800914e <_strtod_l+0x47e>
 800946a:	2400      	movs	r4, #0
 800946c:	68c3      	ldr	r3, [r0, #12]
 800946e:	9904      	ldr	r1, [sp, #16]
 8009470:	60c4      	str	r4, [r0, #12]
 8009472:	930b      	str	r3, [sp, #44]	; 0x2c
 8009474:	f001 ff7a 	bl	800b36c <__mcmp>
 8009478:	42a0      	cmp	r0, r4
 800947a:	da6b      	bge.n	8009554 <_strtod_l+0x884>
 800947c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800947e:	ea53 0308 	orrs.w	r3, r3, r8
 8009482:	f040 8091 	bne.w	80095a8 <_strtod_l+0x8d8>
 8009486:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800948a:	2b00      	cmp	r3, #0
 800948c:	f040 808c 	bne.w	80095a8 <_strtod_l+0x8d8>
 8009490:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009494:	0d1b      	lsrs	r3, r3, #20
 8009496:	051b      	lsls	r3, r3, #20
 8009498:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800949c:	f240 8084 	bls.w	80095a8 <_strtod_l+0x8d8>
 80094a0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80094a4:	b91b      	cbnz	r3, 80094ae <_strtod_l+0x7de>
 80094a6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	dd7c      	ble.n	80095a8 <_strtod_l+0x8d8>
 80094ae:	4659      	mov	r1, fp
 80094b0:	2201      	movs	r2, #1
 80094b2:	4650      	mov	r0, sl
 80094b4:	f001 feea 	bl	800b28c <__lshift>
 80094b8:	9904      	ldr	r1, [sp, #16]
 80094ba:	4683      	mov	fp, r0
 80094bc:	f001 ff56 	bl	800b36c <__mcmp>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	dd71      	ble.n	80095a8 <_strtod_l+0x8d8>
 80094c4:	9905      	ldr	r1, [sp, #20]
 80094c6:	464b      	mov	r3, r9
 80094c8:	4a20      	ldr	r2, [pc, #128]	; (800954c <_strtod_l+0x87c>)
 80094ca:	2900      	cmp	r1, #0
 80094cc:	f000 808c 	beq.w	80095e8 <_strtod_l+0x918>
 80094d0:	ea02 0109 	and.w	r1, r2, r9
 80094d4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80094d8:	f300 8086 	bgt.w	80095e8 <_strtod_l+0x918>
 80094dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80094e0:	f77f aeaa 	ble.w	8009238 <_strtod_l+0x568>
 80094e4:	4640      	mov	r0, r8
 80094e6:	4649      	mov	r1, r9
 80094e8:	4b19      	ldr	r3, [pc, #100]	; (8009550 <_strtod_l+0x880>)
 80094ea:	2200      	movs	r2, #0
 80094ec:	f7fc f95a 	bl	80057a4 <__aeabi_dmul>
 80094f0:	460b      	mov	r3, r1
 80094f2:	4303      	orrs	r3, r0
 80094f4:	bf08      	it	eq
 80094f6:	2322      	moveq	r3, #34	; 0x22
 80094f8:	4680      	mov	r8, r0
 80094fa:	4689      	mov	r9, r1
 80094fc:	bf08      	it	eq
 80094fe:	f8ca 3000 	streq.w	r3, [sl]
 8009502:	e62f      	b.n	8009164 <_strtod_l+0x494>
 8009504:	f04f 32ff 	mov.w	r2, #4294967295
 8009508:	fa02 f303 	lsl.w	r3, r2, r3
 800950c:	ea03 0808 	and.w	r8, r3, r8
 8009510:	e6e0      	b.n	80092d4 <_strtod_l+0x604>
 8009512:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009516:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800951a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800951e:	35e2      	adds	r5, #226	; 0xe2
 8009520:	fa07 f505 	lsl.w	r5, r7, r5
 8009524:	970f      	str	r7, [sp, #60]	; 0x3c
 8009526:	e747      	b.n	80093b8 <_strtod_l+0x6e8>
 8009528:	2301      	movs	r3, #1
 800952a:	2500      	movs	r5, #0
 800952c:	930f      	str	r3, [sp, #60]	; 0x3c
 800952e:	e743      	b.n	80093b8 <_strtod_l+0x6e8>
 8009530:	463a      	mov	r2, r7
 8009532:	4650      	mov	r0, sl
 8009534:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009536:	f001 fea9 	bl	800b28c <__lshift>
 800953a:	901a      	str	r0, [sp, #104]	; 0x68
 800953c:	2800      	cmp	r0, #0
 800953e:	f47f af69 	bne.w	8009414 <_strtod_l+0x744>
 8009542:	e604      	b.n	800914e <_strtod_l+0x47e>
 8009544:	0801d328 	.word	0x0801d328
 8009548:	fffffc02 	.word	0xfffffc02
 800954c:	7ff00000 	.word	0x7ff00000
 8009550:	39500000 	.word	0x39500000
 8009554:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009558:	d165      	bne.n	8009626 <_strtod_l+0x956>
 800955a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800955c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009560:	b35a      	cbz	r2, 80095ba <_strtod_l+0x8ea>
 8009562:	4a99      	ldr	r2, [pc, #612]	; (80097c8 <_strtod_l+0xaf8>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d12b      	bne.n	80095c0 <_strtod_l+0x8f0>
 8009568:	9b05      	ldr	r3, [sp, #20]
 800956a:	4641      	mov	r1, r8
 800956c:	b303      	cbz	r3, 80095b0 <_strtod_l+0x8e0>
 800956e:	464a      	mov	r2, r9
 8009570:	4b96      	ldr	r3, [pc, #600]	; (80097cc <_strtod_l+0xafc>)
 8009572:	4013      	ands	r3, r2
 8009574:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009578:	f04f 32ff 	mov.w	r2, #4294967295
 800957c:	d81b      	bhi.n	80095b6 <_strtod_l+0x8e6>
 800957e:	0d1b      	lsrs	r3, r3, #20
 8009580:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009584:	fa02 f303 	lsl.w	r3, r2, r3
 8009588:	4299      	cmp	r1, r3
 800958a:	d119      	bne.n	80095c0 <_strtod_l+0x8f0>
 800958c:	4b90      	ldr	r3, [pc, #576]	; (80097d0 <_strtod_l+0xb00>)
 800958e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009590:	429a      	cmp	r2, r3
 8009592:	d102      	bne.n	800959a <_strtod_l+0x8ca>
 8009594:	3101      	adds	r1, #1
 8009596:	f43f adda 	beq.w	800914e <_strtod_l+0x47e>
 800959a:	f04f 0800 	mov.w	r8, #0
 800959e:	4b8b      	ldr	r3, [pc, #556]	; (80097cc <_strtod_l+0xafc>)
 80095a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095a2:	401a      	ands	r2, r3
 80095a4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80095a8:	9b05      	ldr	r3, [sp, #20]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d19a      	bne.n	80094e4 <_strtod_l+0x814>
 80095ae:	e5d9      	b.n	8009164 <_strtod_l+0x494>
 80095b0:	f04f 33ff 	mov.w	r3, #4294967295
 80095b4:	e7e8      	b.n	8009588 <_strtod_l+0x8b8>
 80095b6:	4613      	mov	r3, r2
 80095b8:	e7e6      	b.n	8009588 <_strtod_l+0x8b8>
 80095ba:	ea53 0308 	orrs.w	r3, r3, r8
 80095be:	d081      	beq.n	80094c4 <_strtod_l+0x7f4>
 80095c0:	b1e5      	cbz	r5, 80095fc <_strtod_l+0x92c>
 80095c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095c4:	421d      	tst	r5, r3
 80095c6:	d0ef      	beq.n	80095a8 <_strtod_l+0x8d8>
 80095c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ca:	4640      	mov	r0, r8
 80095cc:	4649      	mov	r1, r9
 80095ce:	9a05      	ldr	r2, [sp, #20]
 80095d0:	b1c3      	cbz	r3, 8009604 <_strtod_l+0x934>
 80095d2:	f7ff fb5b 	bl	8008c8c <sulp>
 80095d6:	4602      	mov	r2, r0
 80095d8:	460b      	mov	r3, r1
 80095da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80095de:	f7fb ff2b 	bl	8005438 <__adddf3>
 80095e2:	4680      	mov	r8, r0
 80095e4:	4689      	mov	r9, r1
 80095e6:	e7df      	b.n	80095a8 <_strtod_l+0x8d8>
 80095e8:	4013      	ands	r3, r2
 80095ea:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80095ee:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80095f2:	f04f 38ff 	mov.w	r8, #4294967295
 80095f6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80095fa:	e7d5      	b.n	80095a8 <_strtod_l+0x8d8>
 80095fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095fe:	ea13 0f08 	tst.w	r3, r8
 8009602:	e7e0      	b.n	80095c6 <_strtod_l+0x8f6>
 8009604:	f7ff fb42 	bl	8008c8c <sulp>
 8009608:	4602      	mov	r2, r0
 800960a:	460b      	mov	r3, r1
 800960c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009610:	f7fb ff10 	bl	8005434 <__aeabi_dsub>
 8009614:	2200      	movs	r2, #0
 8009616:	2300      	movs	r3, #0
 8009618:	4680      	mov	r8, r0
 800961a:	4689      	mov	r9, r1
 800961c:	f7fc fb2a 	bl	8005c74 <__aeabi_dcmpeq>
 8009620:	2800      	cmp	r0, #0
 8009622:	d0c1      	beq.n	80095a8 <_strtod_l+0x8d8>
 8009624:	e608      	b.n	8009238 <_strtod_l+0x568>
 8009626:	4658      	mov	r0, fp
 8009628:	9904      	ldr	r1, [sp, #16]
 800962a:	f002 f81d 	bl	800b668 <__ratio>
 800962e:	2200      	movs	r2, #0
 8009630:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009634:	4606      	mov	r6, r0
 8009636:	460f      	mov	r7, r1
 8009638:	f7fc fb30 	bl	8005c9c <__aeabi_dcmple>
 800963c:	2800      	cmp	r0, #0
 800963e:	d070      	beq.n	8009722 <_strtod_l+0xa52>
 8009640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009642:	2b00      	cmp	r3, #0
 8009644:	d042      	beq.n	80096cc <_strtod_l+0x9fc>
 8009646:	2600      	movs	r6, #0
 8009648:	4f62      	ldr	r7, [pc, #392]	; (80097d4 <_strtod_l+0xb04>)
 800964a:	4d62      	ldr	r5, [pc, #392]	; (80097d4 <_strtod_l+0xb04>)
 800964c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800964e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009652:	0d1b      	lsrs	r3, r3, #20
 8009654:	051b      	lsls	r3, r3, #20
 8009656:	930f      	str	r3, [sp, #60]	; 0x3c
 8009658:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800965a:	4b5f      	ldr	r3, [pc, #380]	; (80097d8 <_strtod_l+0xb08>)
 800965c:	429a      	cmp	r2, r3
 800965e:	f040 80c3 	bne.w	80097e8 <_strtod_l+0xb18>
 8009662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009664:	4640      	mov	r0, r8
 8009666:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800966a:	4649      	mov	r1, r9
 800966c:	f001 ff26 	bl	800b4bc <__ulp>
 8009670:	4602      	mov	r2, r0
 8009672:	460b      	mov	r3, r1
 8009674:	4630      	mov	r0, r6
 8009676:	4639      	mov	r1, r7
 8009678:	f7fc f894 	bl	80057a4 <__aeabi_dmul>
 800967c:	4642      	mov	r2, r8
 800967e:	464b      	mov	r3, r9
 8009680:	f7fb feda 	bl	8005438 <__adddf3>
 8009684:	460b      	mov	r3, r1
 8009686:	4951      	ldr	r1, [pc, #324]	; (80097cc <_strtod_l+0xafc>)
 8009688:	4a54      	ldr	r2, [pc, #336]	; (80097dc <_strtod_l+0xb0c>)
 800968a:	4019      	ands	r1, r3
 800968c:	4291      	cmp	r1, r2
 800968e:	4680      	mov	r8, r0
 8009690:	d95d      	bls.n	800974e <_strtod_l+0xa7e>
 8009692:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009694:	4b4e      	ldr	r3, [pc, #312]	; (80097d0 <_strtod_l+0xb00>)
 8009696:	429a      	cmp	r2, r3
 8009698:	d103      	bne.n	80096a2 <_strtod_l+0x9d2>
 800969a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800969c:	3301      	adds	r3, #1
 800969e:	f43f ad56 	beq.w	800914e <_strtod_l+0x47e>
 80096a2:	f04f 38ff 	mov.w	r8, #4294967295
 80096a6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80097d0 <_strtod_l+0xb00>
 80096aa:	4650      	mov	r0, sl
 80096ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80096ae:	f001 fbd5 	bl	800ae5c <_Bfree>
 80096b2:	4650      	mov	r0, sl
 80096b4:	9906      	ldr	r1, [sp, #24]
 80096b6:	f001 fbd1 	bl	800ae5c <_Bfree>
 80096ba:	4650      	mov	r0, sl
 80096bc:	9904      	ldr	r1, [sp, #16]
 80096be:	f001 fbcd 	bl	800ae5c <_Bfree>
 80096c2:	4659      	mov	r1, fp
 80096c4:	4650      	mov	r0, sl
 80096c6:	f001 fbc9 	bl	800ae5c <_Bfree>
 80096ca:	e627      	b.n	800931c <_strtod_l+0x64c>
 80096cc:	f1b8 0f00 	cmp.w	r8, #0
 80096d0:	d119      	bne.n	8009706 <_strtod_l+0xa36>
 80096d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096d8:	b9e3      	cbnz	r3, 8009714 <_strtod_l+0xa44>
 80096da:	2200      	movs	r2, #0
 80096dc:	4630      	mov	r0, r6
 80096de:	4639      	mov	r1, r7
 80096e0:	4b3c      	ldr	r3, [pc, #240]	; (80097d4 <_strtod_l+0xb04>)
 80096e2:	f7fc fad1 	bl	8005c88 <__aeabi_dcmplt>
 80096e6:	b9c8      	cbnz	r0, 800971c <_strtod_l+0xa4c>
 80096e8:	2200      	movs	r2, #0
 80096ea:	4630      	mov	r0, r6
 80096ec:	4639      	mov	r1, r7
 80096ee:	4b3c      	ldr	r3, [pc, #240]	; (80097e0 <_strtod_l+0xb10>)
 80096f0:	f7fc f858 	bl	80057a4 <__aeabi_dmul>
 80096f4:	4604      	mov	r4, r0
 80096f6:	460d      	mov	r5, r1
 80096f8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80096fc:	9416      	str	r4, [sp, #88]	; 0x58
 80096fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8009700:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8009704:	e7a2      	b.n	800964c <_strtod_l+0x97c>
 8009706:	f1b8 0f01 	cmp.w	r8, #1
 800970a:	d103      	bne.n	8009714 <_strtod_l+0xa44>
 800970c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800970e:	2b00      	cmp	r3, #0
 8009710:	f43f ad92 	beq.w	8009238 <_strtod_l+0x568>
 8009714:	2600      	movs	r6, #0
 8009716:	2400      	movs	r4, #0
 8009718:	4f32      	ldr	r7, [pc, #200]	; (80097e4 <_strtod_l+0xb14>)
 800971a:	e796      	b.n	800964a <_strtod_l+0x97a>
 800971c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800971e:	4d30      	ldr	r5, [pc, #192]	; (80097e0 <_strtod_l+0xb10>)
 8009720:	e7ea      	b.n	80096f8 <_strtod_l+0xa28>
 8009722:	4b2f      	ldr	r3, [pc, #188]	; (80097e0 <_strtod_l+0xb10>)
 8009724:	2200      	movs	r2, #0
 8009726:	4630      	mov	r0, r6
 8009728:	4639      	mov	r1, r7
 800972a:	f7fc f83b 	bl	80057a4 <__aeabi_dmul>
 800972e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009730:	4604      	mov	r4, r0
 8009732:	460d      	mov	r5, r1
 8009734:	b933      	cbnz	r3, 8009744 <_strtod_l+0xa74>
 8009736:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800973a:	9010      	str	r0, [sp, #64]	; 0x40
 800973c:	9311      	str	r3, [sp, #68]	; 0x44
 800973e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009742:	e783      	b.n	800964c <_strtod_l+0x97c>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800974c:	e7f7      	b.n	800973e <_strtod_l+0xa6e>
 800974e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009752:	9b05      	ldr	r3, [sp, #20]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1a8      	bne.n	80096aa <_strtod_l+0x9da>
 8009758:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800975c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800975e:	0d1b      	lsrs	r3, r3, #20
 8009760:	051b      	lsls	r3, r3, #20
 8009762:	429a      	cmp	r2, r3
 8009764:	d1a1      	bne.n	80096aa <_strtod_l+0x9da>
 8009766:	4620      	mov	r0, r4
 8009768:	4629      	mov	r1, r5
 800976a:	f7fc fbd9 	bl	8005f20 <__aeabi_d2lz>
 800976e:	f7fb ffeb 	bl	8005748 <__aeabi_l2d>
 8009772:	4602      	mov	r2, r0
 8009774:	460b      	mov	r3, r1
 8009776:	4620      	mov	r0, r4
 8009778:	4629      	mov	r1, r5
 800977a:	f7fb fe5b 	bl	8005434 <__aeabi_dsub>
 800977e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009780:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009784:	ea43 0308 	orr.w	r3, r3, r8
 8009788:	4313      	orrs	r3, r2
 800978a:	4604      	mov	r4, r0
 800978c:	460d      	mov	r5, r1
 800978e:	d066      	beq.n	800985e <_strtod_l+0xb8e>
 8009790:	a309      	add	r3, pc, #36	; (adr r3, 80097b8 <_strtod_l+0xae8>)
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	f7fc fa77 	bl	8005c88 <__aeabi_dcmplt>
 800979a:	2800      	cmp	r0, #0
 800979c:	f47f ace2 	bne.w	8009164 <_strtod_l+0x494>
 80097a0:	a307      	add	r3, pc, #28	; (adr r3, 80097c0 <_strtod_l+0xaf0>)
 80097a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a6:	4620      	mov	r0, r4
 80097a8:	4629      	mov	r1, r5
 80097aa:	f7fc fa8b 	bl	8005cc4 <__aeabi_dcmpgt>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	f43f af7b 	beq.w	80096aa <_strtod_l+0x9da>
 80097b4:	e4d6      	b.n	8009164 <_strtod_l+0x494>
 80097b6:	bf00      	nop
 80097b8:	94a03595 	.word	0x94a03595
 80097bc:	3fdfffff 	.word	0x3fdfffff
 80097c0:	35afe535 	.word	0x35afe535
 80097c4:	3fe00000 	.word	0x3fe00000
 80097c8:	000fffff 	.word	0x000fffff
 80097cc:	7ff00000 	.word	0x7ff00000
 80097d0:	7fefffff 	.word	0x7fefffff
 80097d4:	3ff00000 	.word	0x3ff00000
 80097d8:	7fe00000 	.word	0x7fe00000
 80097dc:	7c9fffff 	.word	0x7c9fffff
 80097e0:	3fe00000 	.word	0x3fe00000
 80097e4:	bff00000 	.word	0xbff00000
 80097e8:	9b05      	ldr	r3, [sp, #20]
 80097ea:	b313      	cbz	r3, 8009832 <_strtod_l+0xb62>
 80097ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80097f2:	d81e      	bhi.n	8009832 <_strtod_l+0xb62>
 80097f4:	a326      	add	r3, pc, #152	; (adr r3, 8009890 <_strtod_l+0xbc0>)
 80097f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fa:	4620      	mov	r0, r4
 80097fc:	4629      	mov	r1, r5
 80097fe:	f7fc fa4d 	bl	8005c9c <__aeabi_dcmple>
 8009802:	b190      	cbz	r0, 800982a <_strtod_l+0xb5a>
 8009804:	4629      	mov	r1, r5
 8009806:	4620      	mov	r0, r4
 8009808:	f7fc faa4 	bl	8005d54 <__aeabi_d2uiz>
 800980c:	2801      	cmp	r0, #1
 800980e:	bf38      	it	cc
 8009810:	2001      	movcc	r0, #1
 8009812:	f7fb ff4d 	bl	80056b0 <__aeabi_ui2d>
 8009816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009818:	4604      	mov	r4, r0
 800981a:	460d      	mov	r5, r1
 800981c:	b9d3      	cbnz	r3, 8009854 <_strtod_l+0xb84>
 800981e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009822:	9012      	str	r0, [sp, #72]	; 0x48
 8009824:	9313      	str	r3, [sp, #76]	; 0x4c
 8009826:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800982a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800982c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009830:	1a9f      	subs	r7, r3, r2
 8009832:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009836:	f001 fe41 	bl	800b4bc <__ulp>
 800983a:	4602      	mov	r2, r0
 800983c:	460b      	mov	r3, r1
 800983e:	4630      	mov	r0, r6
 8009840:	4639      	mov	r1, r7
 8009842:	f7fb ffaf 	bl	80057a4 <__aeabi_dmul>
 8009846:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800984a:	f7fb fdf5 	bl	8005438 <__adddf3>
 800984e:	4680      	mov	r8, r0
 8009850:	4689      	mov	r9, r1
 8009852:	e77e      	b.n	8009752 <_strtod_l+0xa82>
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800985c:	e7e3      	b.n	8009826 <_strtod_l+0xb56>
 800985e:	a30e      	add	r3, pc, #56	; (adr r3, 8009898 <_strtod_l+0xbc8>)
 8009860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009864:	f7fc fa10 	bl	8005c88 <__aeabi_dcmplt>
 8009868:	e7a1      	b.n	80097ae <_strtod_l+0xade>
 800986a:	2300      	movs	r3, #0
 800986c:	930a      	str	r3, [sp, #40]	; 0x28
 800986e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009870:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009872:	6013      	str	r3, [r2, #0]
 8009874:	f7ff ba71 	b.w	8008d5a <_strtod_l+0x8a>
 8009878:	2a65      	cmp	r2, #101	; 0x65
 800987a:	f43f ab63 	beq.w	8008f44 <_strtod_l+0x274>
 800987e:	2a45      	cmp	r2, #69	; 0x45
 8009880:	f43f ab60 	beq.w	8008f44 <_strtod_l+0x274>
 8009884:	2301      	movs	r3, #1
 8009886:	f7ff bb95 	b.w	8008fb4 <_strtod_l+0x2e4>
 800988a:	bf00      	nop
 800988c:	f3af 8000 	nop.w
 8009890:	ffc00000 	.word	0xffc00000
 8009894:	41dfffff 	.word	0x41dfffff
 8009898:	94a03595 	.word	0x94a03595
 800989c:	3fcfffff 	.word	0x3fcfffff

080098a0 <_strtod_r>:
 80098a0:	4b01      	ldr	r3, [pc, #4]	; (80098a8 <_strtod_r+0x8>)
 80098a2:	f7ff ba15 	b.w	8008cd0 <_strtod_l>
 80098a6:	bf00      	nop
 80098a8:	20000078 	.word	0x20000078

080098ac <_strtol_l.constprop.0>:
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098b2:	4680      	mov	r8, r0
 80098b4:	d001      	beq.n	80098ba <_strtol_l.constprop.0+0xe>
 80098b6:	2b24      	cmp	r3, #36	; 0x24
 80098b8:	d906      	bls.n	80098c8 <_strtol_l.constprop.0+0x1c>
 80098ba:	f7fe fb23 	bl	8007f04 <__errno>
 80098be:	2316      	movs	r3, #22
 80098c0:	6003      	str	r3, [r0, #0]
 80098c2:	2000      	movs	r0, #0
 80098c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c8:	460d      	mov	r5, r1
 80098ca:	4f35      	ldr	r7, [pc, #212]	; (80099a0 <_strtol_l.constprop.0+0xf4>)
 80098cc:	4628      	mov	r0, r5
 80098ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098d2:	5de6      	ldrb	r6, [r4, r7]
 80098d4:	f016 0608 	ands.w	r6, r6, #8
 80098d8:	d1f8      	bne.n	80098cc <_strtol_l.constprop.0+0x20>
 80098da:	2c2d      	cmp	r4, #45	; 0x2d
 80098dc:	d12f      	bne.n	800993e <_strtol_l.constprop.0+0x92>
 80098de:	2601      	movs	r6, #1
 80098e0:	782c      	ldrb	r4, [r5, #0]
 80098e2:	1c85      	adds	r5, r0, #2
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d057      	beq.n	8009998 <_strtol_l.constprop.0+0xec>
 80098e8:	2b10      	cmp	r3, #16
 80098ea:	d109      	bne.n	8009900 <_strtol_l.constprop.0+0x54>
 80098ec:	2c30      	cmp	r4, #48	; 0x30
 80098ee:	d107      	bne.n	8009900 <_strtol_l.constprop.0+0x54>
 80098f0:	7828      	ldrb	r0, [r5, #0]
 80098f2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80098f6:	2858      	cmp	r0, #88	; 0x58
 80098f8:	d149      	bne.n	800998e <_strtol_l.constprop.0+0xe2>
 80098fa:	2310      	movs	r3, #16
 80098fc:	786c      	ldrb	r4, [r5, #1]
 80098fe:	3502      	adds	r5, #2
 8009900:	2700      	movs	r7, #0
 8009902:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8009906:	f10e 3eff 	add.w	lr, lr, #4294967295
 800990a:	fbbe f9f3 	udiv	r9, lr, r3
 800990e:	4638      	mov	r0, r7
 8009910:	fb03 ea19 	mls	sl, r3, r9, lr
 8009914:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009918:	f1bc 0f09 	cmp.w	ip, #9
 800991c:	d814      	bhi.n	8009948 <_strtol_l.constprop.0+0x9c>
 800991e:	4664      	mov	r4, ip
 8009920:	42a3      	cmp	r3, r4
 8009922:	dd22      	ble.n	800996a <_strtol_l.constprop.0+0xbe>
 8009924:	2f00      	cmp	r7, #0
 8009926:	db1d      	blt.n	8009964 <_strtol_l.constprop.0+0xb8>
 8009928:	4581      	cmp	r9, r0
 800992a:	d31b      	bcc.n	8009964 <_strtol_l.constprop.0+0xb8>
 800992c:	d101      	bne.n	8009932 <_strtol_l.constprop.0+0x86>
 800992e:	45a2      	cmp	sl, r4
 8009930:	db18      	blt.n	8009964 <_strtol_l.constprop.0+0xb8>
 8009932:	2701      	movs	r7, #1
 8009934:	fb00 4003 	mla	r0, r0, r3, r4
 8009938:	f815 4b01 	ldrb.w	r4, [r5], #1
 800993c:	e7ea      	b.n	8009914 <_strtol_l.constprop.0+0x68>
 800993e:	2c2b      	cmp	r4, #43	; 0x2b
 8009940:	bf04      	itt	eq
 8009942:	782c      	ldrbeq	r4, [r5, #0]
 8009944:	1c85      	addeq	r5, r0, #2
 8009946:	e7cd      	b.n	80098e4 <_strtol_l.constprop.0+0x38>
 8009948:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800994c:	f1bc 0f19 	cmp.w	ip, #25
 8009950:	d801      	bhi.n	8009956 <_strtol_l.constprop.0+0xaa>
 8009952:	3c37      	subs	r4, #55	; 0x37
 8009954:	e7e4      	b.n	8009920 <_strtol_l.constprop.0+0x74>
 8009956:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800995a:	f1bc 0f19 	cmp.w	ip, #25
 800995e:	d804      	bhi.n	800996a <_strtol_l.constprop.0+0xbe>
 8009960:	3c57      	subs	r4, #87	; 0x57
 8009962:	e7dd      	b.n	8009920 <_strtol_l.constprop.0+0x74>
 8009964:	f04f 37ff 	mov.w	r7, #4294967295
 8009968:	e7e6      	b.n	8009938 <_strtol_l.constprop.0+0x8c>
 800996a:	2f00      	cmp	r7, #0
 800996c:	da07      	bge.n	800997e <_strtol_l.constprop.0+0xd2>
 800996e:	2322      	movs	r3, #34	; 0x22
 8009970:	4670      	mov	r0, lr
 8009972:	f8c8 3000 	str.w	r3, [r8]
 8009976:	2a00      	cmp	r2, #0
 8009978:	d0a4      	beq.n	80098c4 <_strtol_l.constprop.0+0x18>
 800997a:	1e69      	subs	r1, r5, #1
 800997c:	e005      	b.n	800998a <_strtol_l.constprop.0+0xde>
 800997e:	b106      	cbz	r6, 8009982 <_strtol_l.constprop.0+0xd6>
 8009980:	4240      	negs	r0, r0
 8009982:	2a00      	cmp	r2, #0
 8009984:	d09e      	beq.n	80098c4 <_strtol_l.constprop.0+0x18>
 8009986:	2f00      	cmp	r7, #0
 8009988:	d1f7      	bne.n	800997a <_strtol_l.constprop.0+0xce>
 800998a:	6011      	str	r1, [r2, #0]
 800998c:	e79a      	b.n	80098c4 <_strtol_l.constprop.0+0x18>
 800998e:	2430      	movs	r4, #48	; 0x30
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1b5      	bne.n	8009900 <_strtol_l.constprop.0+0x54>
 8009994:	2308      	movs	r3, #8
 8009996:	e7b3      	b.n	8009900 <_strtol_l.constprop.0+0x54>
 8009998:	2c30      	cmp	r4, #48	; 0x30
 800999a:	d0a9      	beq.n	80098f0 <_strtol_l.constprop.0+0x44>
 800999c:	230a      	movs	r3, #10
 800999e:	e7af      	b.n	8009900 <_strtol_l.constprop.0+0x54>
 80099a0:	0801d351 	.word	0x0801d351

080099a4 <_strtol_r>:
 80099a4:	f7ff bf82 	b.w	80098ac <_strtol_l.constprop.0>

080099a8 <quorem>:
 80099a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ac:	6903      	ldr	r3, [r0, #16]
 80099ae:	690c      	ldr	r4, [r1, #16]
 80099b0:	4607      	mov	r7, r0
 80099b2:	42a3      	cmp	r3, r4
 80099b4:	f2c0 8082 	blt.w	8009abc <quorem+0x114>
 80099b8:	3c01      	subs	r4, #1
 80099ba:	f100 0514 	add.w	r5, r0, #20
 80099be:	f101 0814 	add.w	r8, r1, #20
 80099c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099c6:	9301      	str	r3, [sp, #4]
 80099c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80099cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099d0:	3301      	adds	r3, #1
 80099d2:	429a      	cmp	r2, r3
 80099d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80099d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80099dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80099e0:	d331      	bcc.n	8009a46 <quorem+0x9e>
 80099e2:	f04f 0e00 	mov.w	lr, #0
 80099e6:	4640      	mov	r0, r8
 80099e8:	46ac      	mov	ip, r5
 80099ea:	46f2      	mov	sl, lr
 80099ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80099f0:	b293      	uxth	r3, r2
 80099f2:	fb06 e303 	mla	r3, r6, r3, lr
 80099f6:	0c12      	lsrs	r2, r2, #16
 80099f8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	fb06 e202 	mla	r2, r6, r2, lr
 8009a02:	ebaa 0303 	sub.w	r3, sl, r3
 8009a06:	f8dc a000 	ldr.w	sl, [ip]
 8009a0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a0e:	fa1f fa8a 	uxth.w	sl, sl
 8009a12:	4453      	add	r3, sl
 8009a14:	f8dc a000 	ldr.w	sl, [ip]
 8009a18:	b292      	uxth	r2, r2
 8009a1a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009a1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a28:	4581      	cmp	r9, r0
 8009a2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009a2e:	f84c 3b04 	str.w	r3, [ip], #4
 8009a32:	d2db      	bcs.n	80099ec <quorem+0x44>
 8009a34:	f855 300b 	ldr.w	r3, [r5, fp]
 8009a38:	b92b      	cbnz	r3, 8009a46 <quorem+0x9e>
 8009a3a:	9b01      	ldr	r3, [sp, #4]
 8009a3c:	3b04      	subs	r3, #4
 8009a3e:	429d      	cmp	r5, r3
 8009a40:	461a      	mov	r2, r3
 8009a42:	d32f      	bcc.n	8009aa4 <quorem+0xfc>
 8009a44:	613c      	str	r4, [r7, #16]
 8009a46:	4638      	mov	r0, r7
 8009a48:	f001 fc90 	bl	800b36c <__mcmp>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	db25      	blt.n	8009a9c <quorem+0xf4>
 8009a50:	4628      	mov	r0, r5
 8009a52:	f04f 0c00 	mov.w	ip, #0
 8009a56:	3601      	adds	r6, #1
 8009a58:	f858 1b04 	ldr.w	r1, [r8], #4
 8009a5c:	f8d0 e000 	ldr.w	lr, [r0]
 8009a60:	b28b      	uxth	r3, r1
 8009a62:	ebac 0303 	sub.w	r3, ip, r3
 8009a66:	fa1f f28e 	uxth.w	r2, lr
 8009a6a:	4413      	add	r3, r2
 8009a6c:	0c0a      	lsrs	r2, r1, #16
 8009a6e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009a72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a7c:	45c1      	cmp	r9, r8
 8009a7e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009a82:	f840 3b04 	str.w	r3, [r0], #4
 8009a86:	d2e7      	bcs.n	8009a58 <quorem+0xb0>
 8009a88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a90:	b922      	cbnz	r2, 8009a9c <quorem+0xf4>
 8009a92:	3b04      	subs	r3, #4
 8009a94:	429d      	cmp	r5, r3
 8009a96:	461a      	mov	r2, r3
 8009a98:	d30a      	bcc.n	8009ab0 <quorem+0x108>
 8009a9a:	613c      	str	r4, [r7, #16]
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	b003      	add	sp, #12
 8009aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa4:	6812      	ldr	r2, [r2, #0]
 8009aa6:	3b04      	subs	r3, #4
 8009aa8:	2a00      	cmp	r2, #0
 8009aaa:	d1cb      	bne.n	8009a44 <quorem+0x9c>
 8009aac:	3c01      	subs	r4, #1
 8009aae:	e7c6      	b.n	8009a3e <quorem+0x96>
 8009ab0:	6812      	ldr	r2, [r2, #0]
 8009ab2:	3b04      	subs	r3, #4
 8009ab4:	2a00      	cmp	r2, #0
 8009ab6:	d1f0      	bne.n	8009a9a <quorem+0xf2>
 8009ab8:	3c01      	subs	r4, #1
 8009aba:	e7eb      	b.n	8009a94 <quorem+0xec>
 8009abc:	2000      	movs	r0, #0
 8009abe:	e7ee      	b.n	8009a9e <quorem+0xf6>

08009ac0 <_dtoa_r>:
 8009ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac4:	4616      	mov	r6, r2
 8009ac6:	461f      	mov	r7, r3
 8009ac8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009aca:	b099      	sub	sp, #100	; 0x64
 8009acc:	4605      	mov	r5, r0
 8009ace:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009ad2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009ad6:	b974      	cbnz	r4, 8009af6 <_dtoa_r+0x36>
 8009ad8:	2010      	movs	r0, #16
 8009ada:	f001 f949 	bl	800ad70 <malloc>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	6268      	str	r0, [r5, #36]	; 0x24
 8009ae2:	b920      	cbnz	r0, 8009aee <_dtoa_r+0x2e>
 8009ae4:	21ea      	movs	r1, #234	; 0xea
 8009ae6:	4ba8      	ldr	r3, [pc, #672]	; (8009d88 <_dtoa_r+0x2c8>)
 8009ae8:	48a8      	ldr	r0, [pc, #672]	; (8009d8c <_dtoa_r+0x2cc>)
 8009aea:	f002 f8b3 	bl	800bc54 <__assert_func>
 8009aee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009af2:	6004      	str	r4, [r0, #0]
 8009af4:	60c4      	str	r4, [r0, #12]
 8009af6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009af8:	6819      	ldr	r1, [r3, #0]
 8009afa:	b151      	cbz	r1, 8009b12 <_dtoa_r+0x52>
 8009afc:	685a      	ldr	r2, [r3, #4]
 8009afe:	2301      	movs	r3, #1
 8009b00:	4093      	lsls	r3, r2
 8009b02:	604a      	str	r2, [r1, #4]
 8009b04:	608b      	str	r3, [r1, #8]
 8009b06:	4628      	mov	r0, r5
 8009b08:	f001 f9a8 	bl	800ae5c <_Bfree>
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b10:	601a      	str	r2, [r3, #0]
 8009b12:	1e3b      	subs	r3, r7, #0
 8009b14:	bfaf      	iteee	ge
 8009b16:	2300      	movge	r3, #0
 8009b18:	2201      	movlt	r2, #1
 8009b1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009b1e:	9305      	strlt	r3, [sp, #20]
 8009b20:	bfa8      	it	ge
 8009b22:	f8c8 3000 	strge.w	r3, [r8]
 8009b26:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009b2a:	4b99      	ldr	r3, [pc, #612]	; (8009d90 <_dtoa_r+0x2d0>)
 8009b2c:	bfb8      	it	lt
 8009b2e:	f8c8 2000 	strlt.w	r2, [r8]
 8009b32:	ea33 0309 	bics.w	r3, r3, r9
 8009b36:	d119      	bne.n	8009b6c <_dtoa_r+0xac>
 8009b38:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009b3e:	6013      	str	r3, [r2, #0]
 8009b40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b44:	4333      	orrs	r3, r6
 8009b46:	f000 857f 	beq.w	800a648 <_dtoa_r+0xb88>
 8009b4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009b4c:	b953      	cbnz	r3, 8009b64 <_dtoa_r+0xa4>
 8009b4e:	4b91      	ldr	r3, [pc, #580]	; (8009d94 <_dtoa_r+0x2d4>)
 8009b50:	e022      	b.n	8009b98 <_dtoa_r+0xd8>
 8009b52:	4b91      	ldr	r3, [pc, #580]	; (8009d98 <_dtoa_r+0x2d8>)
 8009b54:	9303      	str	r3, [sp, #12]
 8009b56:	3308      	adds	r3, #8
 8009b58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009b5a:	6013      	str	r3, [r2, #0]
 8009b5c:	9803      	ldr	r0, [sp, #12]
 8009b5e:	b019      	add	sp, #100	; 0x64
 8009b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b64:	4b8b      	ldr	r3, [pc, #556]	; (8009d94 <_dtoa_r+0x2d4>)
 8009b66:	9303      	str	r3, [sp, #12]
 8009b68:	3303      	adds	r3, #3
 8009b6a:	e7f5      	b.n	8009b58 <_dtoa_r+0x98>
 8009b6c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009b70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009b74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b78:	2200      	movs	r2, #0
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f7fc f87a 	bl	8005c74 <__aeabi_dcmpeq>
 8009b80:	4680      	mov	r8, r0
 8009b82:	b158      	cbz	r0, 8009b9c <_dtoa_r+0xdc>
 8009b84:	2301      	movs	r3, #1
 8009b86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009b88:	6013      	str	r3, [r2, #0]
 8009b8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 8558 	beq.w	800a642 <_dtoa_r+0xb82>
 8009b92:	4882      	ldr	r0, [pc, #520]	; (8009d9c <_dtoa_r+0x2dc>)
 8009b94:	6018      	str	r0, [r3, #0]
 8009b96:	1e43      	subs	r3, r0, #1
 8009b98:	9303      	str	r3, [sp, #12]
 8009b9a:	e7df      	b.n	8009b5c <_dtoa_r+0x9c>
 8009b9c:	ab16      	add	r3, sp, #88	; 0x58
 8009b9e:	9301      	str	r3, [sp, #4]
 8009ba0:	ab17      	add	r3, sp, #92	; 0x5c
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009baa:	f001 fd01 	bl	800b5b0 <__d2b>
 8009bae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009bb2:	4683      	mov	fp, r0
 8009bb4:	2c00      	cmp	r4, #0
 8009bb6:	d07f      	beq.n	8009cb8 <_dtoa_r+0x1f8>
 8009bb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009bbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bbe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009bc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bc6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009bca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009bce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	4b72      	ldr	r3, [pc, #456]	; (8009da0 <_dtoa_r+0x2e0>)
 8009bd6:	f7fb fc2d 	bl	8005434 <__aeabi_dsub>
 8009bda:	a365      	add	r3, pc, #404	; (adr r3, 8009d70 <_dtoa_r+0x2b0>)
 8009bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be0:	f7fb fde0 	bl	80057a4 <__aeabi_dmul>
 8009be4:	a364      	add	r3, pc, #400	; (adr r3, 8009d78 <_dtoa_r+0x2b8>)
 8009be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bea:	f7fb fc25 	bl	8005438 <__adddf3>
 8009bee:	4606      	mov	r6, r0
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	460f      	mov	r7, r1
 8009bf4:	f7fb fd6c 	bl	80056d0 <__aeabi_i2d>
 8009bf8:	a361      	add	r3, pc, #388	; (adr r3, 8009d80 <_dtoa_r+0x2c0>)
 8009bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfe:	f7fb fdd1 	bl	80057a4 <__aeabi_dmul>
 8009c02:	4602      	mov	r2, r0
 8009c04:	460b      	mov	r3, r1
 8009c06:	4630      	mov	r0, r6
 8009c08:	4639      	mov	r1, r7
 8009c0a:	f7fb fc15 	bl	8005438 <__adddf3>
 8009c0e:	4606      	mov	r6, r0
 8009c10:	460f      	mov	r7, r1
 8009c12:	f7fc f877 	bl	8005d04 <__aeabi_d2iz>
 8009c16:	2200      	movs	r2, #0
 8009c18:	4682      	mov	sl, r0
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	4639      	mov	r1, r7
 8009c20:	f7fc f832 	bl	8005c88 <__aeabi_dcmplt>
 8009c24:	b148      	cbz	r0, 8009c3a <_dtoa_r+0x17a>
 8009c26:	4650      	mov	r0, sl
 8009c28:	f7fb fd52 	bl	80056d0 <__aeabi_i2d>
 8009c2c:	4632      	mov	r2, r6
 8009c2e:	463b      	mov	r3, r7
 8009c30:	f7fc f820 	bl	8005c74 <__aeabi_dcmpeq>
 8009c34:	b908      	cbnz	r0, 8009c3a <_dtoa_r+0x17a>
 8009c36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c3a:	f1ba 0f16 	cmp.w	sl, #22
 8009c3e:	d858      	bhi.n	8009cf2 <_dtoa_r+0x232>
 8009c40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c44:	4b57      	ldr	r3, [pc, #348]	; (8009da4 <_dtoa_r+0x2e4>)
 8009c46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	f7fc f81b 	bl	8005c88 <__aeabi_dcmplt>
 8009c52:	2800      	cmp	r0, #0
 8009c54:	d04f      	beq.n	8009cf6 <_dtoa_r+0x236>
 8009c56:	2300      	movs	r3, #0
 8009c58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009c60:	1b1c      	subs	r4, r3, r4
 8009c62:	1e63      	subs	r3, r4, #1
 8009c64:	9309      	str	r3, [sp, #36]	; 0x24
 8009c66:	bf49      	itett	mi
 8009c68:	f1c4 0301 	rsbmi	r3, r4, #1
 8009c6c:	2300      	movpl	r3, #0
 8009c6e:	9306      	strmi	r3, [sp, #24]
 8009c70:	2300      	movmi	r3, #0
 8009c72:	bf54      	ite	pl
 8009c74:	9306      	strpl	r3, [sp, #24]
 8009c76:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009c78:	f1ba 0f00 	cmp.w	sl, #0
 8009c7c:	db3d      	blt.n	8009cfa <_dtoa_r+0x23a>
 8009c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c80:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009c84:	4453      	add	r3, sl
 8009c86:	9309      	str	r3, [sp, #36]	; 0x24
 8009c88:	2300      	movs	r3, #0
 8009c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8009c8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c8e:	2b09      	cmp	r3, #9
 8009c90:	f200 808c 	bhi.w	8009dac <_dtoa_r+0x2ec>
 8009c94:	2b05      	cmp	r3, #5
 8009c96:	bfc4      	itt	gt
 8009c98:	3b04      	subgt	r3, #4
 8009c9a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009c9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c9e:	bfc8      	it	gt
 8009ca0:	2400      	movgt	r4, #0
 8009ca2:	f1a3 0302 	sub.w	r3, r3, #2
 8009ca6:	bfd8      	it	le
 8009ca8:	2401      	movle	r4, #1
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	f200 808a 	bhi.w	8009dc4 <_dtoa_r+0x304>
 8009cb0:	e8df f003 	tbb	[pc, r3]
 8009cb4:	5b4d4f2d 	.word	0x5b4d4f2d
 8009cb8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009cbc:	441c      	add	r4, r3
 8009cbe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009cc2:	2b20      	cmp	r3, #32
 8009cc4:	bfc3      	ittte	gt
 8009cc6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009cca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009cce:	fa09 f303 	lslgt.w	r3, r9, r3
 8009cd2:	f1c3 0320 	rsble	r3, r3, #32
 8009cd6:	bfc6      	itte	gt
 8009cd8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009cdc:	4318      	orrgt	r0, r3
 8009cde:	fa06 f003 	lslle.w	r0, r6, r3
 8009ce2:	f7fb fce5 	bl	80056b0 <__aeabi_ui2d>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009cec:	3c01      	subs	r4, #1
 8009cee:	9313      	str	r3, [sp, #76]	; 0x4c
 8009cf0:	e76f      	b.n	8009bd2 <_dtoa_r+0x112>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e7b2      	b.n	8009c5c <_dtoa_r+0x19c>
 8009cf6:	900f      	str	r0, [sp, #60]	; 0x3c
 8009cf8:	e7b1      	b.n	8009c5e <_dtoa_r+0x19e>
 8009cfa:	9b06      	ldr	r3, [sp, #24]
 8009cfc:	eba3 030a 	sub.w	r3, r3, sl
 8009d00:	9306      	str	r3, [sp, #24]
 8009d02:	f1ca 0300 	rsb	r3, sl, #0
 8009d06:	930a      	str	r3, [sp, #40]	; 0x28
 8009d08:	2300      	movs	r3, #0
 8009d0a:	930e      	str	r3, [sp, #56]	; 0x38
 8009d0c:	e7be      	b.n	8009c8c <_dtoa_r+0x1cc>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	dc58      	bgt.n	8009dca <_dtoa_r+0x30a>
 8009d18:	f04f 0901 	mov.w	r9, #1
 8009d1c:	464b      	mov	r3, r9
 8009d1e:	f8cd 9020 	str.w	r9, [sp, #32]
 8009d22:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009d26:	2200      	movs	r2, #0
 8009d28:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009d2a:	6042      	str	r2, [r0, #4]
 8009d2c:	2204      	movs	r2, #4
 8009d2e:	f102 0614 	add.w	r6, r2, #20
 8009d32:	429e      	cmp	r6, r3
 8009d34:	6841      	ldr	r1, [r0, #4]
 8009d36:	d94e      	bls.n	8009dd6 <_dtoa_r+0x316>
 8009d38:	4628      	mov	r0, r5
 8009d3a:	f001 f84f 	bl	800addc <_Balloc>
 8009d3e:	9003      	str	r0, [sp, #12]
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d14c      	bne.n	8009dde <_dtoa_r+0x31e>
 8009d44:	4602      	mov	r2, r0
 8009d46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009d4a:	4b17      	ldr	r3, [pc, #92]	; (8009da8 <_dtoa_r+0x2e8>)
 8009d4c:	e6cc      	b.n	8009ae8 <_dtoa_r+0x28>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e7de      	b.n	8009d10 <_dtoa_r+0x250>
 8009d52:	2300      	movs	r3, #0
 8009d54:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d58:	eb0a 0903 	add.w	r9, sl, r3
 8009d5c:	f109 0301 	add.w	r3, r9, #1
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	9308      	str	r3, [sp, #32]
 8009d64:	bfb8      	it	lt
 8009d66:	2301      	movlt	r3, #1
 8009d68:	e7dd      	b.n	8009d26 <_dtoa_r+0x266>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e7f2      	b.n	8009d54 <_dtoa_r+0x294>
 8009d6e:	bf00      	nop
 8009d70:	636f4361 	.word	0x636f4361
 8009d74:	3fd287a7 	.word	0x3fd287a7
 8009d78:	8b60c8b3 	.word	0x8b60c8b3
 8009d7c:	3fc68a28 	.word	0x3fc68a28
 8009d80:	509f79fb 	.word	0x509f79fb
 8009d84:	3fd34413 	.word	0x3fd34413
 8009d88:	0801d45e 	.word	0x0801d45e
 8009d8c:	0801d475 	.word	0x0801d475
 8009d90:	7ff00000 	.word	0x7ff00000
 8009d94:	0801d45a 	.word	0x0801d45a
 8009d98:	0801d451 	.word	0x0801d451
 8009d9c:	0801d2d1 	.word	0x0801d2d1
 8009da0:	3ff80000 	.word	0x3ff80000
 8009da4:	0801d5e0 	.word	0x0801d5e0
 8009da8:	0801d4d0 	.word	0x0801d4d0
 8009dac:	2401      	movs	r4, #1
 8009dae:	2300      	movs	r3, #0
 8009db0:	940b      	str	r4, [sp, #44]	; 0x2c
 8009db2:	9322      	str	r3, [sp, #136]	; 0x88
 8009db4:	f04f 39ff 	mov.w	r9, #4294967295
 8009db8:	2200      	movs	r2, #0
 8009dba:	2312      	movs	r3, #18
 8009dbc:	f8cd 9020 	str.w	r9, [sp, #32]
 8009dc0:	9223      	str	r2, [sp, #140]	; 0x8c
 8009dc2:	e7b0      	b.n	8009d26 <_dtoa_r+0x266>
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009dc8:	e7f4      	b.n	8009db4 <_dtoa_r+0x2f4>
 8009dca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009dce:	464b      	mov	r3, r9
 8009dd0:	f8cd 9020 	str.w	r9, [sp, #32]
 8009dd4:	e7a7      	b.n	8009d26 <_dtoa_r+0x266>
 8009dd6:	3101      	adds	r1, #1
 8009dd8:	6041      	str	r1, [r0, #4]
 8009dda:	0052      	lsls	r2, r2, #1
 8009ddc:	e7a7      	b.n	8009d2e <_dtoa_r+0x26e>
 8009dde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009de0:	9a03      	ldr	r2, [sp, #12]
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	9b08      	ldr	r3, [sp, #32]
 8009de6:	2b0e      	cmp	r3, #14
 8009de8:	f200 80a8 	bhi.w	8009f3c <_dtoa_r+0x47c>
 8009dec:	2c00      	cmp	r4, #0
 8009dee:	f000 80a5 	beq.w	8009f3c <_dtoa_r+0x47c>
 8009df2:	f1ba 0f00 	cmp.w	sl, #0
 8009df6:	dd34      	ble.n	8009e62 <_dtoa_r+0x3a2>
 8009df8:	4a9a      	ldr	r2, [pc, #616]	; (800a064 <_dtoa_r+0x5a4>)
 8009dfa:	f00a 030f 	and.w	r3, sl, #15
 8009dfe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009e02:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009e06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009e0e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009e12:	d016      	beq.n	8009e42 <_dtoa_r+0x382>
 8009e14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e18:	4b93      	ldr	r3, [pc, #588]	; (800a068 <_dtoa_r+0x5a8>)
 8009e1a:	2703      	movs	r7, #3
 8009e1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e20:	f7fb fdea 	bl	80059f8 <__aeabi_ddiv>
 8009e24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e28:	f004 040f 	and.w	r4, r4, #15
 8009e2c:	4e8e      	ldr	r6, [pc, #568]	; (800a068 <_dtoa_r+0x5a8>)
 8009e2e:	b954      	cbnz	r4, 8009e46 <_dtoa_r+0x386>
 8009e30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e38:	f7fb fdde 	bl	80059f8 <__aeabi_ddiv>
 8009e3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e40:	e029      	b.n	8009e96 <_dtoa_r+0x3d6>
 8009e42:	2702      	movs	r7, #2
 8009e44:	e7f2      	b.n	8009e2c <_dtoa_r+0x36c>
 8009e46:	07e1      	lsls	r1, r4, #31
 8009e48:	d508      	bpl.n	8009e5c <_dtoa_r+0x39c>
 8009e4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e4e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e52:	f7fb fca7 	bl	80057a4 <__aeabi_dmul>
 8009e56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e5a:	3701      	adds	r7, #1
 8009e5c:	1064      	asrs	r4, r4, #1
 8009e5e:	3608      	adds	r6, #8
 8009e60:	e7e5      	b.n	8009e2e <_dtoa_r+0x36e>
 8009e62:	f000 80a5 	beq.w	8009fb0 <_dtoa_r+0x4f0>
 8009e66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e6a:	f1ca 0400 	rsb	r4, sl, #0
 8009e6e:	4b7d      	ldr	r3, [pc, #500]	; (800a064 <_dtoa_r+0x5a4>)
 8009e70:	f004 020f 	and.w	r2, r4, #15
 8009e74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7c:	f7fb fc92 	bl	80057a4 <__aeabi_dmul>
 8009e80:	2702      	movs	r7, #2
 8009e82:	2300      	movs	r3, #0
 8009e84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e88:	4e77      	ldr	r6, [pc, #476]	; (800a068 <_dtoa_r+0x5a8>)
 8009e8a:	1124      	asrs	r4, r4, #4
 8009e8c:	2c00      	cmp	r4, #0
 8009e8e:	f040 8084 	bne.w	8009f9a <_dtoa_r+0x4da>
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1d2      	bne.n	8009e3c <_dtoa_r+0x37c>
 8009e96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f000 808b 	beq.w	8009fb4 <_dtoa_r+0x4f4>
 8009e9e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009ea2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009ea6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009eaa:	2200      	movs	r2, #0
 8009eac:	4b6f      	ldr	r3, [pc, #444]	; (800a06c <_dtoa_r+0x5ac>)
 8009eae:	f7fb feeb 	bl	8005c88 <__aeabi_dcmplt>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d07e      	beq.n	8009fb4 <_dtoa_r+0x4f4>
 8009eb6:	9b08      	ldr	r3, [sp, #32]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d07b      	beq.n	8009fb4 <_dtoa_r+0x4f4>
 8009ebc:	f1b9 0f00 	cmp.w	r9, #0
 8009ec0:	dd38      	ble.n	8009f34 <_dtoa_r+0x474>
 8009ec2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	4b69      	ldr	r3, [pc, #420]	; (800a070 <_dtoa_r+0x5b0>)
 8009eca:	f7fb fc6b 	bl	80057a4 <__aeabi_dmul>
 8009ece:	464c      	mov	r4, r9
 8009ed0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ed4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009ed8:	3701      	adds	r7, #1
 8009eda:	4638      	mov	r0, r7
 8009edc:	f7fb fbf8 	bl	80056d0 <__aeabi_i2d>
 8009ee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ee4:	f7fb fc5e 	bl	80057a4 <__aeabi_dmul>
 8009ee8:	2200      	movs	r2, #0
 8009eea:	4b62      	ldr	r3, [pc, #392]	; (800a074 <_dtoa_r+0x5b4>)
 8009eec:	f7fb faa4 	bl	8005438 <__adddf3>
 8009ef0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009ef4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009ef8:	9611      	str	r6, [sp, #68]	; 0x44
 8009efa:	2c00      	cmp	r4, #0
 8009efc:	d15d      	bne.n	8009fba <_dtoa_r+0x4fa>
 8009efe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f02:	2200      	movs	r2, #0
 8009f04:	4b5c      	ldr	r3, [pc, #368]	; (800a078 <_dtoa_r+0x5b8>)
 8009f06:	f7fb fa95 	bl	8005434 <__aeabi_dsub>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009f12:	4633      	mov	r3, r6
 8009f14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f16:	f7fb fed5 	bl	8005cc4 <__aeabi_dcmpgt>
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	f040 829c 	bne.w	800a458 <_dtoa_r+0x998>
 8009f20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f26:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009f2a:	f7fb fead 	bl	8005c88 <__aeabi_dcmplt>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	f040 8290 	bne.w	800a454 <_dtoa_r+0x994>
 8009f34:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009f38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009f3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f2c0 8152 	blt.w	800a1e8 <_dtoa_r+0x728>
 8009f44:	f1ba 0f0e 	cmp.w	sl, #14
 8009f48:	f300 814e 	bgt.w	800a1e8 <_dtoa_r+0x728>
 8009f4c:	4b45      	ldr	r3, [pc, #276]	; (800a064 <_dtoa_r+0x5a4>)
 8009f4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009f52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f56:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009f5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f280 80db 	bge.w	800a118 <_dtoa_r+0x658>
 8009f62:	9b08      	ldr	r3, [sp, #32]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f300 80d7 	bgt.w	800a118 <_dtoa_r+0x658>
 8009f6a:	f040 8272 	bne.w	800a452 <_dtoa_r+0x992>
 8009f6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f72:	2200      	movs	r2, #0
 8009f74:	4b40      	ldr	r3, [pc, #256]	; (800a078 <_dtoa_r+0x5b8>)
 8009f76:	f7fb fc15 	bl	80057a4 <__aeabi_dmul>
 8009f7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f7e:	f7fb fe97 	bl	8005cb0 <__aeabi_dcmpge>
 8009f82:	9c08      	ldr	r4, [sp, #32]
 8009f84:	4626      	mov	r6, r4
 8009f86:	2800      	cmp	r0, #0
 8009f88:	f040 8248 	bne.w	800a41c <_dtoa_r+0x95c>
 8009f8c:	2331      	movs	r3, #49	; 0x31
 8009f8e:	9f03      	ldr	r7, [sp, #12]
 8009f90:	f10a 0a01 	add.w	sl, sl, #1
 8009f94:	f807 3b01 	strb.w	r3, [r7], #1
 8009f98:	e244      	b.n	800a424 <_dtoa_r+0x964>
 8009f9a:	07e2      	lsls	r2, r4, #31
 8009f9c:	d505      	bpl.n	8009faa <_dtoa_r+0x4ea>
 8009f9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fa2:	f7fb fbff 	bl	80057a4 <__aeabi_dmul>
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	3701      	adds	r7, #1
 8009faa:	1064      	asrs	r4, r4, #1
 8009fac:	3608      	adds	r6, #8
 8009fae:	e76d      	b.n	8009e8c <_dtoa_r+0x3cc>
 8009fb0:	2702      	movs	r7, #2
 8009fb2:	e770      	b.n	8009e96 <_dtoa_r+0x3d6>
 8009fb4:	46d0      	mov	r8, sl
 8009fb6:	9c08      	ldr	r4, [sp, #32]
 8009fb8:	e78f      	b.n	8009eda <_dtoa_r+0x41a>
 8009fba:	9903      	ldr	r1, [sp, #12]
 8009fbc:	4b29      	ldr	r3, [pc, #164]	; (800a064 <_dtoa_r+0x5a4>)
 8009fbe:	4421      	add	r1, r4
 8009fc0:	9112      	str	r1, [sp, #72]	; 0x48
 8009fc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009fc8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009fcc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009fd0:	2900      	cmp	r1, #0
 8009fd2:	d055      	beq.n	800a080 <_dtoa_r+0x5c0>
 8009fd4:	2000      	movs	r0, #0
 8009fd6:	4929      	ldr	r1, [pc, #164]	; (800a07c <_dtoa_r+0x5bc>)
 8009fd8:	f7fb fd0e 	bl	80059f8 <__aeabi_ddiv>
 8009fdc:	463b      	mov	r3, r7
 8009fde:	4632      	mov	r2, r6
 8009fe0:	f7fb fa28 	bl	8005434 <__aeabi_dsub>
 8009fe4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009fe8:	9f03      	ldr	r7, [sp, #12]
 8009fea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fee:	f7fb fe89 	bl	8005d04 <__aeabi_d2iz>
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	f7fb fb6c 	bl	80056d0 <__aeabi_i2d>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a000:	f7fb fa18 	bl	8005434 <__aeabi_dsub>
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	3430      	adds	r4, #48	; 0x30
 800a00a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a00e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a012:	f807 4b01 	strb.w	r4, [r7], #1
 800a016:	f7fb fe37 	bl	8005c88 <__aeabi_dcmplt>
 800a01a:	2800      	cmp	r0, #0
 800a01c:	d174      	bne.n	800a108 <_dtoa_r+0x648>
 800a01e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a022:	2000      	movs	r0, #0
 800a024:	4911      	ldr	r1, [pc, #68]	; (800a06c <_dtoa_r+0x5ac>)
 800a026:	f7fb fa05 	bl	8005434 <__aeabi_dsub>
 800a02a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a02e:	f7fb fe2b 	bl	8005c88 <__aeabi_dcmplt>
 800a032:	2800      	cmp	r0, #0
 800a034:	f040 80b7 	bne.w	800a1a6 <_dtoa_r+0x6e6>
 800a038:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a03a:	429f      	cmp	r7, r3
 800a03c:	f43f af7a 	beq.w	8009f34 <_dtoa_r+0x474>
 800a040:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a044:	2200      	movs	r2, #0
 800a046:	4b0a      	ldr	r3, [pc, #40]	; (800a070 <_dtoa_r+0x5b0>)
 800a048:	f7fb fbac 	bl	80057a4 <__aeabi_dmul>
 800a04c:	2200      	movs	r2, #0
 800a04e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a052:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a056:	4b06      	ldr	r3, [pc, #24]	; (800a070 <_dtoa_r+0x5b0>)
 800a058:	f7fb fba4 	bl	80057a4 <__aeabi_dmul>
 800a05c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a060:	e7c3      	b.n	8009fea <_dtoa_r+0x52a>
 800a062:	bf00      	nop
 800a064:	0801d5e0 	.word	0x0801d5e0
 800a068:	0801d5b8 	.word	0x0801d5b8
 800a06c:	3ff00000 	.word	0x3ff00000
 800a070:	40240000 	.word	0x40240000
 800a074:	401c0000 	.word	0x401c0000
 800a078:	40140000 	.word	0x40140000
 800a07c:	3fe00000 	.word	0x3fe00000
 800a080:	4630      	mov	r0, r6
 800a082:	4639      	mov	r1, r7
 800a084:	f7fb fb8e 	bl	80057a4 <__aeabi_dmul>
 800a088:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a08a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a08e:	9c03      	ldr	r4, [sp, #12]
 800a090:	9314      	str	r3, [sp, #80]	; 0x50
 800a092:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a096:	f7fb fe35 	bl	8005d04 <__aeabi_d2iz>
 800a09a:	9015      	str	r0, [sp, #84]	; 0x54
 800a09c:	f7fb fb18 	bl	80056d0 <__aeabi_i2d>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0a8:	f7fb f9c4 	bl	8005434 <__aeabi_dsub>
 800a0ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0ae:	4606      	mov	r6, r0
 800a0b0:	3330      	adds	r3, #48	; 0x30
 800a0b2:	f804 3b01 	strb.w	r3, [r4], #1
 800a0b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0b8:	460f      	mov	r7, r1
 800a0ba:	429c      	cmp	r4, r3
 800a0bc:	f04f 0200 	mov.w	r2, #0
 800a0c0:	d124      	bne.n	800a10c <_dtoa_r+0x64c>
 800a0c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a0c6:	4bb0      	ldr	r3, [pc, #704]	; (800a388 <_dtoa_r+0x8c8>)
 800a0c8:	f7fb f9b6 	bl	8005438 <__adddf3>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	4639      	mov	r1, r7
 800a0d4:	f7fb fdf6 	bl	8005cc4 <__aeabi_dcmpgt>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d163      	bne.n	800a1a4 <_dtoa_r+0x6e4>
 800a0dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	49a9      	ldr	r1, [pc, #676]	; (800a388 <_dtoa_r+0x8c8>)
 800a0e4:	f7fb f9a6 	bl	8005434 <__aeabi_dsub>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	4639      	mov	r1, r7
 800a0f0:	f7fb fdca 	bl	8005c88 <__aeabi_dcmplt>
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	f43f af1d 	beq.w	8009f34 <_dtoa_r+0x474>
 800a0fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a0fc:	1e7b      	subs	r3, r7, #1
 800a0fe:	9314      	str	r3, [sp, #80]	; 0x50
 800a100:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a104:	2b30      	cmp	r3, #48	; 0x30
 800a106:	d0f8      	beq.n	800a0fa <_dtoa_r+0x63a>
 800a108:	46c2      	mov	sl, r8
 800a10a:	e03b      	b.n	800a184 <_dtoa_r+0x6c4>
 800a10c:	4b9f      	ldr	r3, [pc, #636]	; (800a38c <_dtoa_r+0x8cc>)
 800a10e:	f7fb fb49 	bl	80057a4 <__aeabi_dmul>
 800a112:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a116:	e7bc      	b.n	800a092 <_dtoa_r+0x5d2>
 800a118:	9f03      	ldr	r7, [sp, #12]
 800a11a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a11e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a122:	4640      	mov	r0, r8
 800a124:	4649      	mov	r1, r9
 800a126:	f7fb fc67 	bl	80059f8 <__aeabi_ddiv>
 800a12a:	f7fb fdeb 	bl	8005d04 <__aeabi_d2iz>
 800a12e:	4604      	mov	r4, r0
 800a130:	f7fb face 	bl	80056d0 <__aeabi_i2d>
 800a134:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a138:	f7fb fb34 	bl	80057a4 <__aeabi_dmul>
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	4640      	mov	r0, r8
 800a142:	4649      	mov	r1, r9
 800a144:	f7fb f976 	bl	8005434 <__aeabi_dsub>
 800a148:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a14c:	f807 6b01 	strb.w	r6, [r7], #1
 800a150:	9e03      	ldr	r6, [sp, #12]
 800a152:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a156:	1bbe      	subs	r6, r7, r6
 800a158:	45b4      	cmp	ip, r6
 800a15a:	4602      	mov	r2, r0
 800a15c:	460b      	mov	r3, r1
 800a15e:	d136      	bne.n	800a1ce <_dtoa_r+0x70e>
 800a160:	f7fb f96a 	bl	8005438 <__adddf3>
 800a164:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a168:	4680      	mov	r8, r0
 800a16a:	4689      	mov	r9, r1
 800a16c:	f7fb fdaa 	bl	8005cc4 <__aeabi_dcmpgt>
 800a170:	bb58      	cbnz	r0, 800a1ca <_dtoa_r+0x70a>
 800a172:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a176:	4640      	mov	r0, r8
 800a178:	4649      	mov	r1, r9
 800a17a:	f7fb fd7b 	bl	8005c74 <__aeabi_dcmpeq>
 800a17e:	b108      	cbz	r0, 800a184 <_dtoa_r+0x6c4>
 800a180:	07e1      	lsls	r1, r4, #31
 800a182:	d422      	bmi.n	800a1ca <_dtoa_r+0x70a>
 800a184:	4628      	mov	r0, r5
 800a186:	4659      	mov	r1, fp
 800a188:	f000 fe68 	bl	800ae5c <_Bfree>
 800a18c:	2300      	movs	r3, #0
 800a18e:	703b      	strb	r3, [r7, #0]
 800a190:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a192:	f10a 0001 	add.w	r0, sl, #1
 800a196:	6018      	str	r0, [r3, #0]
 800a198:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f43f acde 	beq.w	8009b5c <_dtoa_r+0x9c>
 800a1a0:	601f      	str	r7, [r3, #0]
 800a1a2:	e4db      	b.n	8009b5c <_dtoa_r+0x9c>
 800a1a4:	4627      	mov	r7, r4
 800a1a6:	463b      	mov	r3, r7
 800a1a8:	461f      	mov	r7, r3
 800a1aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1ae:	2a39      	cmp	r2, #57	; 0x39
 800a1b0:	d107      	bne.n	800a1c2 <_dtoa_r+0x702>
 800a1b2:	9a03      	ldr	r2, [sp, #12]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d1f7      	bne.n	800a1a8 <_dtoa_r+0x6e8>
 800a1b8:	2230      	movs	r2, #48	; 0x30
 800a1ba:	9903      	ldr	r1, [sp, #12]
 800a1bc:	f108 0801 	add.w	r8, r8, #1
 800a1c0:	700a      	strb	r2, [r1, #0]
 800a1c2:	781a      	ldrb	r2, [r3, #0]
 800a1c4:	3201      	adds	r2, #1
 800a1c6:	701a      	strb	r2, [r3, #0]
 800a1c8:	e79e      	b.n	800a108 <_dtoa_r+0x648>
 800a1ca:	46d0      	mov	r8, sl
 800a1cc:	e7eb      	b.n	800a1a6 <_dtoa_r+0x6e6>
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	4b6e      	ldr	r3, [pc, #440]	; (800a38c <_dtoa_r+0x8cc>)
 800a1d2:	f7fb fae7 	bl	80057a4 <__aeabi_dmul>
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	2300      	movs	r3, #0
 800a1da:	4680      	mov	r8, r0
 800a1dc:	4689      	mov	r9, r1
 800a1de:	f7fb fd49 	bl	8005c74 <__aeabi_dcmpeq>
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	d09b      	beq.n	800a11e <_dtoa_r+0x65e>
 800a1e6:	e7cd      	b.n	800a184 <_dtoa_r+0x6c4>
 800a1e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1ea:	2a00      	cmp	r2, #0
 800a1ec:	f000 80d0 	beq.w	800a390 <_dtoa_r+0x8d0>
 800a1f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a1f2:	2a01      	cmp	r2, #1
 800a1f4:	f300 80ae 	bgt.w	800a354 <_dtoa_r+0x894>
 800a1f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a1fa:	2a00      	cmp	r2, #0
 800a1fc:	f000 80a6 	beq.w	800a34c <_dtoa_r+0x88c>
 800a200:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a204:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a206:	9f06      	ldr	r7, [sp, #24]
 800a208:	9a06      	ldr	r2, [sp, #24]
 800a20a:	2101      	movs	r1, #1
 800a20c:	441a      	add	r2, r3
 800a20e:	9206      	str	r2, [sp, #24]
 800a210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a212:	4628      	mov	r0, r5
 800a214:	441a      	add	r2, r3
 800a216:	9209      	str	r2, [sp, #36]	; 0x24
 800a218:	f000 ff20 	bl	800b05c <__i2b>
 800a21c:	4606      	mov	r6, r0
 800a21e:	2f00      	cmp	r7, #0
 800a220:	dd0c      	ble.n	800a23c <_dtoa_r+0x77c>
 800a222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a224:	2b00      	cmp	r3, #0
 800a226:	dd09      	ble.n	800a23c <_dtoa_r+0x77c>
 800a228:	42bb      	cmp	r3, r7
 800a22a:	bfa8      	it	ge
 800a22c:	463b      	movge	r3, r7
 800a22e:	9a06      	ldr	r2, [sp, #24]
 800a230:	1aff      	subs	r7, r7, r3
 800a232:	1ad2      	subs	r2, r2, r3
 800a234:	9206      	str	r2, [sp, #24]
 800a236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a238:	1ad3      	subs	r3, r2, r3
 800a23a:	9309      	str	r3, [sp, #36]	; 0x24
 800a23c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a23e:	b1f3      	cbz	r3, 800a27e <_dtoa_r+0x7be>
 800a240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a242:	2b00      	cmp	r3, #0
 800a244:	f000 80a8 	beq.w	800a398 <_dtoa_r+0x8d8>
 800a248:	2c00      	cmp	r4, #0
 800a24a:	dd10      	ble.n	800a26e <_dtoa_r+0x7ae>
 800a24c:	4631      	mov	r1, r6
 800a24e:	4622      	mov	r2, r4
 800a250:	4628      	mov	r0, r5
 800a252:	f000 ffc1 	bl	800b1d8 <__pow5mult>
 800a256:	465a      	mov	r2, fp
 800a258:	4601      	mov	r1, r0
 800a25a:	4606      	mov	r6, r0
 800a25c:	4628      	mov	r0, r5
 800a25e:	f000 ff13 	bl	800b088 <__multiply>
 800a262:	4680      	mov	r8, r0
 800a264:	4659      	mov	r1, fp
 800a266:	4628      	mov	r0, r5
 800a268:	f000 fdf8 	bl	800ae5c <_Bfree>
 800a26c:	46c3      	mov	fp, r8
 800a26e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a270:	1b1a      	subs	r2, r3, r4
 800a272:	d004      	beq.n	800a27e <_dtoa_r+0x7be>
 800a274:	4659      	mov	r1, fp
 800a276:	4628      	mov	r0, r5
 800a278:	f000 ffae 	bl	800b1d8 <__pow5mult>
 800a27c:	4683      	mov	fp, r0
 800a27e:	2101      	movs	r1, #1
 800a280:	4628      	mov	r0, r5
 800a282:	f000 feeb 	bl	800b05c <__i2b>
 800a286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a288:	4604      	mov	r4, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f340 8086 	ble.w	800a39c <_dtoa_r+0x8dc>
 800a290:	461a      	mov	r2, r3
 800a292:	4601      	mov	r1, r0
 800a294:	4628      	mov	r0, r5
 800a296:	f000 ff9f 	bl	800b1d8 <__pow5mult>
 800a29a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a29c:	4604      	mov	r4, r0
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	dd7f      	ble.n	800a3a2 <_dtoa_r+0x8e2>
 800a2a2:	f04f 0800 	mov.w	r8, #0
 800a2a6:	6923      	ldr	r3, [r4, #16]
 800a2a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a2ac:	6918      	ldr	r0, [r3, #16]
 800a2ae:	f000 fe87 	bl	800afc0 <__hi0bits>
 800a2b2:	f1c0 0020 	rsb	r0, r0, #32
 800a2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2b8:	4418      	add	r0, r3
 800a2ba:	f010 001f 	ands.w	r0, r0, #31
 800a2be:	f000 8092 	beq.w	800a3e6 <_dtoa_r+0x926>
 800a2c2:	f1c0 0320 	rsb	r3, r0, #32
 800a2c6:	2b04      	cmp	r3, #4
 800a2c8:	f340 808a 	ble.w	800a3e0 <_dtoa_r+0x920>
 800a2cc:	f1c0 001c 	rsb	r0, r0, #28
 800a2d0:	9b06      	ldr	r3, [sp, #24]
 800a2d2:	4407      	add	r7, r0
 800a2d4:	4403      	add	r3, r0
 800a2d6:	9306      	str	r3, [sp, #24]
 800a2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2da:	4403      	add	r3, r0
 800a2dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a2de:	9b06      	ldr	r3, [sp, #24]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	dd05      	ble.n	800a2f0 <_dtoa_r+0x830>
 800a2e4:	4659      	mov	r1, fp
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	f000 ffcf 	bl	800b28c <__lshift>
 800a2ee:	4683      	mov	fp, r0
 800a2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	dd05      	ble.n	800a302 <_dtoa_r+0x842>
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f000 ffc6 	bl	800b28c <__lshift>
 800a300:	4604      	mov	r4, r0
 800a302:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a304:	2b00      	cmp	r3, #0
 800a306:	d070      	beq.n	800a3ea <_dtoa_r+0x92a>
 800a308:	4621      	mov	r1, r4
 800a30a:	4658      	mov	r0, fp
 800a30c:	f001 f82e 	bl	800b36c <__mcmp>
 800a310:	2800      	cmp	r0, #0
 800a312:	da6a      	bge.n	800a3ea <_dtoa_r+0x92a>
 800a314:	2300      	movs	r3, #0
 800a316:	4659      	mov	r1, fp
 800a318:	220a      	movs	r2, #10
 800a31a:	4628      	mov	r0, r5
 800a31c:	f000 fdc0 	bl	800aea0 <__multadd>
 800a320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a322:	4683      	mov	fp, r0
 800a324:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f000 8194 	beq.w	800a656 <_dtoa_r+0xb96>
 800a32e:	4631      	mov	r1, r6
 800a330:	2300      	movs	r3, #0
 800a332:	220a      	movs	r2, #10
 800a334:	4628      	mov	r0, r5
 800a336:	f000 fdb3 	bl	800aea0 <__multadd>
 800a33a:	f1b9 0f00 	cmp.w	r9, #0
 800a33e:	4606      	mov	r6, r0
 800a340:	f300 8093 	bgt.w	800a46a <_dtoa_r+0x9aa>
 800a344:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a346:	2b02      	cmp	r3, #2
 800a348:	dc57      	bgt.n	800a3fa <_dtoa_r+0x93a>
 800a34a:	e08e      	b.n	800a46a <_dtoa_r+0x9aa>
 800a34c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a34e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a352:	e757      	b.n	800a204 <_dtoa_r+0x744>
 800a354:	9b08      	ldr	r3, [sp, #32]
 800a356:	1e5c      	subs	r4, r3, #1
 800a358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a35a:	42a3      	cmp	r3, r4
 800a35c:	bfb7      	itett	lt
 800a35e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a360:	1b1c      	subge	r4, r3, r4
 800a362:	1ae2      	sublt	r2, r4, r3
 800a364:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a366:	bfbe      	ittt	lt
 800a368:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a36a:	189b      	addlt	r3, r3, r2
 800a36c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a36e:	9b08      	ldr	r3, [sp, #32]
 800a370:	bfb8      	it	lt
 800a372:	2400      	movlt	r4, #0
 800a374:	2b00      	cmp	r3, #0
 800a376:	bfbb      	ittet	lt
 800a378:	9b06      	ldrlt	r3, [sp, #24]
 800a37a:	9a08      	ldrlt	r2, [sp, #32]
 800a37c:	9f06      	ldrge	r7, [sp, #24]
 800a37e:	1a9f      	sublt	r7, r3, r2
 800a380:	bfac      	ite	ge
 800a382:	9b08      	ldrge	r3, [sp, #32]
 800a384:	2300      	movlt	r3, #0
 800a386:	e73f      	b.n	800a208 <_dtoa_r+0x748>
 800a388:	3fe00000 	.word	0x3fe00000
 800a38c:	40240000 	.word	0x40240000
 800a390:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a392:	9f06      	ldr	r7, [sp, #24]
 800a394:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a396:	e742      	b.n	800a21e <_dtoa_r+0x75e>
 800a398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a39a:	e76b      	b.n	800a274 <_dtoa_r+0x7b4>
 800a39c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	dc19      	bgt.n	800a3d6 <_dtoa_r+0x916>
 800a3a2:	9b04      	ldr	r3, [sp, #16]
 800a3a4:	b9bb      	cbnz	r3, 800a3d6 <_dtoa_r+0x916>
 800a3a6:	9b05      	ldr	r3, [sp, #20]
 800a3a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3ac:	b99b      	cbnz	r3, 800a3d6 <_dtoa_r+0x916>
 800a3ae:	9b05      	ldr	r3, [sp, #20]
 800a3b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3b4:	0d1b      	lsrs	r3, r3, #20
 800a3b6:	051b      	lsls	r3, r3, #20
 800a3b8:	b183      	cbz	r3, 800a3dc <_dtoa_r+0x91c>
 800a3ba:	f04f 0801 	mov.w	r8, #1
 800a3be:	9b06      	ldr	r3, [sp, #24]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	9306      	str	r3, [sp, #24]
 800a3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f47f af6a 	bne.w	800a2a6 <_dtoa_r+0x7e6>
 800a3d2:	2001      	movs	r0, #1
 800a3d4:	e76f      	b.n	800a2b6 <_dtoa_r+0x7f6>
 800a3d6:	f04f 0800 	mov.w	r8, #0
 800a3da:	e7f6      	b.n	800a3ca <_dtoa_r+0x90a>
 800a3dc:	4698      	mov	r8, r3
 800a3de:	e7f4      	b.n	800a3ca <_dtoa_r+0x90a>
 800a3e0:	f43f af7d 	beq.w	800a2de <_dtoa_r+0x81e>
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	301c      	adds	r0, #28
 800a3e8:	e772      	b.n	800a2d0 <_dtoa_r+0x810>
 800a3ea:	9b08      	ldr	r3, [sp, #32]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	dc36      	bgt.n	800a45e <_dtoa_r+0x99e>
 800a3f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	dd33      	ble.n	800a45e <_dtoa_r+0x99e>
 800a3f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a3fa:	f1b9 0f00 	cmp.w	r9, #0
 800a3fe:	d10d      	bne.n	800a41c <_dtoa_r+0x95c>
 800a400:	4621      	mov	r1, r4
 800a402:	464b      	mov	r3, r9
 800a404:	2205      	movs	r2, #5
 800a406:	4628      	mov	r0, r5
 800a408:	f000 fd4a 	bl	800aea0 <__multadd>
 800a40c:	4601      	mov	r1, r0
 800a40e:	4604      	mov	r4, r0
 800a410:	4658      	mov	r0, fp
 800a412:	f000 ffab 	bl	800b36c <__mcmp>
 800a416:	2800      	cmp	r0, #0
 800a418:	f73f adb8 	bgt.w	8009f8c <_dtoa_r+0x4cc>
 800a41c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a41e:	9f03      	ldr	r7, [sp, #12]
 800a420:	ea6f 0a03 	mvn.w	sl, r3
 800a424:	f04f 0800 	mov.w	r8, #0
 800a428:	4621      	mov	r1, r4
 800a42a:	4628      	mov	r0, r5
 800a42c:	f000 fd16 	bl	800ae5c <_Bfree>
 800a430:	2e00      	cmp	r6, #0
 800a432:	f43f aea7 	beq.w	800a184 <_dtoa_r+0x6c4>
 800a436:	f1b8 0f00 	cmp.w	r8, #0
 800a43a:	d005      	beq.n	800a448 <_dtoa_r+0x988>
 800a43c:	45b0      	cmp	r8, r6
 800a43e:	d003      	beq.n	800a448 <_dtoa_r+0x988>
 800a440:	4641      	mov	r1, r8
 800a442:	4628      	mov	r0, r5
 800a444:	f000 fd0a 	bl	800ae5c <_Bfree>
 800a448:	4631      	mov	r1, r6
 800a44a:	4628      	mov	r0, r5
 800a44c:	f000 fd06 	bl	800ae5c <_Bfree>
 800a450:	e698      	b.n	800a184 <_dtoa_r+0x6c4>
 800a452:	2400      	movs	r4, #0
 800a454:	4626      	mov	r6, r4
 800a456:	e7e1      	b.n	800a41c <_dtoa_r+0x95c>
 800a458:	46c2      	mov	sl, r8
 800a45a:	4626      	mov	r6, r4
 800a45c:	e596      	b.n	8009f8c <_dtoa_r+0x4cc>
 800a45e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a460:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a464:	2b00      	cmp	r3, #0
 800a466:	f000 80fd 	beq.w	800a664 <_dtoa_r+0xba4>
 800a46a:	2f00      	cmp	r7, #0
 800a46c:	dd05      	ble.n	800a47a <_dtoa_r+0x9ba>
 800a46e:	4631      	mov	r1, r6
 800a470:	463a      	mov	r2, r7
 800a472:	4628      	mov	r0, r5
 800a474:	f000 ff0a 	bl	800b28c <__lshift>
 800a478:	4606      	mov	r6, r0
 800a47a:	f1b8 0f00 	cmp.w	r8, #0
 800a47e:	d05c      	beq.n	800a53a <_dtoa_r+0xa7a>
 800a480:	4628      	mov	r0, r5
 800a482:	6871      	ldr	r1, [r6, #4]
 800a484:	f000 fcaa 	bl	800addc <_Balloc>
 800a488:	4607      	mov	r7, r0
 800a48a:	b928      	cbnz	r0, 800a498 <_dtoa_r+0x9d8>
 800a48c:	4602      	mov	r2, r0
 800a48e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a492:	4b7f      	ldr	r3, [pc, #508]	; (800a690 <_dtoa_r+0xbd0>)
 800a494:	f7ff bb28 	b.w	8009ae8 <_dtoa_r+0x28>
 800a498:	6932      	ldr	r2, [r6, #16]
 800a49a:	f106 010c 	add.w	r1, r6, #12
 800a49e:	3202      	adds	r2, #2
 800a4a0:	0092      	lsls	r2, r2, #2
 800a4a2:	300c      	adds	r0, #12
 800a4a4:	f000 fc8c 	bl	800adc0 <memcpy>
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	4639      	mov	r1, r7
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	f000 feed 	bl	800b28c <__lshift>
 800a4b2:	46b0      	mov	r8, r6
 800a4b4:	4606      	mov	r6, r0
 800a4b6:	9b03      	ldr	r3, [sp, #12]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	9308      	str	r3, [sp, #32]
 800a4bc:	9b03      	ldr	r3, [sp, #12]
 800a4be:	444b      	add	r3, r9
 800a4c0:	930a      	str	r3, [sp, #40]	; 0x28
 800a4c2:	9b04      	ldr	r3, [sp, #16]
 800a4c4:	f003 0301 	and.w	r3, r3, #1
 800a4c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ca:	9b08      	ldr	r3, [sp, #32]
 800a4cc:	4621      	mov	r1, r4
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	4658      	mov	r0, fp
 800a4d2:	9304      	str	r3, [sp, #16]
 800a4d4:	f7ff fa68 	bl	80099a8 <quorem>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	4641      	mov	r1, r8
 800a4dc:	3330      	adds	r3, #48	; 0x30
 800a4de:	9006      	str	r0, [sp, #24]
 800a4e0:	4658      	mov	r0, fp
 800a4e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4e4:	f000 ff42 	bl	800b36c <__mcmp>
 800a4e8:	4632      	mov	r2, r6
 800a4ea:	4681      	mov	r9, r0
 800a4ec:	4621      	mov	r1, r4
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	f000 ff58 	bl	800b3a4 <__mdiff>
 800a4f4:	68c2      	ldr	r2, [r0, #12]
 800a4f6:	4607      	mov	r7, r0
 800a4f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4fa:	bb02      	cbnz	r2, 800a53e <_dtoa_r+0xa7e>
 800a4fc:	4601      	mov	r1, r0
 800a4fe:	4658      	mov	r0, fp
 800a500:	f000 ff34 	bl	800b36c <__mcmp>
 800a504:	4602      	mov	r2, r0
 800a506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a508:	4639      	mov	r1, r7
 800a50a:	4628      	mov	r0, r5
 800a50c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a510:	f000 fca4 	bl	800ae5c <_Bfree>
 800a514:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a516:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a518:	9f08      	ldr	r7, [sp, #32]
 800a51a:	ea43 0102 	orr.w	r1, r3, r2
 800a51e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a520:	430b      	orrs	r3, r1
 800a522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a524:	d10d      	bne.n	800a542 <_dtoa_r+0xa82>
 800a526:	2b39      	cmp	r3, #57	; 0x39
 800a528:	d029      	beq.n	800a57e <_dtoa_r+0xabe>
 800a52a:	f1b9 0f00 	cmp.w	r9, #0
 800a52e:	dd01      	ble.n	800a534 <_dtoa_r+0xa74>
 800a530:	9b06      	ldr	r3, [sp, #24]
 800a532:	3331      	adds	r3, #49	; 0x31
 800a534:	9a04      	ldr	r2, [sp, #16]
 800a536:	7013      	strb	r3, [r2, #0]
 800a538:	e776      	b.n	800a428 <_dtoa_r+0x968>
 800a53a:	4630      	mov	r0, r6
 800a53c:	e7b9      	b.n	800a4b2 <_dtoa_r+0x9f2>
 800a53e:	2201      	movs	r2, #1
 800a540:	e7e2      	b.n	800a508 <_dtoa_r+0xa48>
 800a542:	f1b9 0f00 	cmp.w	r9, #0
 800a546:	db06      	blt.n	800a556 <_dtoa_r+0xa96>
 800a548:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a54a:	ea41 0909 	orr.w	r9, r1, r9
 800a54e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a550:	ea59 0101 	orrs.w	r1, r9, r1
 800a554:	d120      	bne.n	800a598 <_dtoa_r+0xad8>
 800a556:	2a00      	cmp	r2, #0
 800a558:	ddec      	ble.n	800a534 <_dtoa_r+0xa74>
 800a55a:	4659      	mov	r1, fp
 800a55c:	2201      	movs	r2, #1
 800a55e:	4628      	mov	r0, r5
 800a560:	9308      	str	r3, [sp, #32]
 800a562:	f000 fe93 	bl	800b28c <__lshift>
 800a566:	4621      	mov	r1, r4
 800a568:	4683      	mov	fp, r0
 800a56a:	f000 feff 	bl	800b36c <__mcmp>
 800a56e:	2800      	cmp	r0, #0
 800a570:	9b08      	ldr	r3, [sp, #32]
 800a572:	dc02      	bgt.n	800a57a <_dtoa_r+0xaba>
 800a574:	d1de      	bne.n	800a534 <_dtoa_r+0xa74>
 800a576:	07da      	lsls	r2, r3, #31
 800a578:	d5dc      	bpl.n	800a534 <_dtoa_r+0xa74>
 800a57a:	2b39      	cmp	r3, #57	; 0x39
 800a57c:	d1d8      	bne.n	800a530 <_dtoa_r+0xa70>
 800a57e:	2339      	movs	r3, #57	; 0x39
 800a580:	9a04      	ldr	r2, [sp, #16]
 800a582:	7013      	strb	r3, [r2, #0]
 800a584:	463b      	mov	r3, r7
 800a586:	461f      	mov	r7, r3
 800a588:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a58c:	3b01      	subs	r3, #1
 800a58e:	2a39      	cmp	r2, #57	; 0x39
 800a590:	d050      	beq.n	800a634 <_dtoa_r+0xb74>
 800a592:	3201      	adds	r2, #1
 800a594:	701a      	strb	r2, [r3, #0]
 800a596:	e747      	b.n	800a428 <_dtoa_r+0x968>
 800a598:	2a00      	cmp	r2, #0
 800a59a:	dd03      	ble.n	800a5a4 <_dtoa_r+0xae4>
 800a59c:	2b39      	cmp	r3, #57	; 0x39
 800a59e:	d0ee      	beq.n	800a57e <_dtoa_r+0xabe>
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	e7c7      	b.n	800a534 <_dtoa_r+0xa74>
 800a5a4:	9a08      	ldr	r2, [sp, #32]
 800a5a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a5a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a5ac:	428a      	cmp	r2, r1
 800a5ae:	d02a      	beq.n	800a606 <_dtoa_r+0xb46>
 800a5b0:	4659      	mov	r1, fp
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	220a      	movs	r2, #10
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	f000 fc72 	bl	800aea0 <__multadd>
 800a5bc:	45b0      	cmp	r8, r6
 800a5be:	4683      	mov	fp, r0
 800a5c0:	f04f 0300 	mov.w	r3, #0
 800a5c4:	f04f 020a 	mov.w	r2, #10
 800a5c8:	4641      	mov	r1, r8
 800a5ca:	4628      	mov	r0, r5
 800a5cc:	d107      	bne.n	800a5de <_dtoa_r+0xb1e>
 800a5ce:	f000 fc67 	bl	800aea0 <__multadd>
 800a5d2:	4680      	mov	r8, r0
 800a5d4:	4606      	mov	r6, r0
 800a5d6:	9b08      	ldr	r3, [sp, #32]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	9308      	str	r3, [sp, #32]
 800a5dc:	e775      	b.n	800a4ca <_dtoa_r+0xa0a>
 800a5de:	f000 fc5f 	bl	800aea0 <__multadd>
 800a5e2:	4631      	mov	r1, r6
 800a5e4:	4680      	mov	r8, r0
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	220a      	movs	r2, #10
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	f000 fc58 	bl	800aea0 <__multadd>
 800a5f0:	4606      	mov	r6, r0
 800a5f2:	e7f0      	b.n	800a5d6 <_dtoa_r+0xb16>
 800a5f4:	f1b9 0f00 	cmp.w	r9, #0
 800a5f8:	bfcc      	ite	gt
 800a5fa:	464f      	movgt	r7, r9
 800a5fc:	2701      	movle	r7, #1
 800a5fe:	f04f 0800 	mov.w	r8, #0
 800a602:	9a03      	ldr	r2, [sp, #12]
 800a604:	4417      	add	r7, r2
 800a606:	4659      	mov	r1, fp
 800a608:	2201      	movs	r2, #1
 800a60a:	4628      	mov	r0, r5
 800a60c:	9308      	str	r3, [sp, #32]
 800a60e:	f000 fe3d 	bl	800b28c <__lshift>
 800a612:	4621      	mov	r1, r4
 800a614:	4683      	mov	fp, r0
 800a616:	f000 fea9 	bl	800b36c <__mcmp>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	dcb2      	bgt.n	800a584 <_dtoa_r+0xac4>
 800a61e:	d102      	bne.n	800a626 <_dtoa_r+0xb66>
 800a620:	9b08      	ldr	r3, [sp, #32]
 800a622:	07db      	lsls	r3, r3, #31
 800a624:	d4ae      	bmi.n	800a584 <_dtoa_r+0xac4>
 800a626:	463b      	mov	r3, r7
 800a628:	461f      	mov	r7, r3
 800a62a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a62e:	2a30      	cmp	r2, #48	; 0x30
 800a630:	d0fa      	beq.n	800a628 <_dtoa_r+0xb68>
 800a632:	e6f9      	b.n	800a428 <_dtoa_r+0x968>
 800a634:	9a03      	ldr	r2, [sp, #12]
 800a636:	429a      	cmp	r2, r3
 800a638:	d1a5      	bne.n	800a586 <_dtoa_r+0xac6>
 800a63a:	2331      	movs	r3, #49	; 0x31
 800a63c:	f10a 0a01 	add.w	sl, sl, #1
 800a640:	e779      	b.n	800a536 <_dtoa_r+0xa76>
 800a642:	4b14      	ldr	r3, [pc, #80]	; (800a694 <_dtoa_r+0xbd4>)
 800a644:	f7ff baa8 	b.w	8009b98 <_dtoa_r+0xd8>
 800a648:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f47f aa81 	bne.w	8009b52 <_dtoa_r+0x92>
 800a650:	4b11      	ldr	r3, [pc, #68]	; (800a698 <_dtoa_r+0xbd8>)
 800a652:	f7ff baa1 	b.w	8009b98 <_dtoa_r+0xd8>
 800a656:	f1b9 0f00 	cmp.w	r9, #0
 800a65a:	dc03      	bgt.n	800a664 <_dtoa_r+0xba4>
 800a65c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a65e:	2b02      	cmp	r3, #2
 800a660:	f73f aecb 	bgt.w	800a3fa <_dtoa_r+0x93a>
 800a664:	9f03      	ldr	r7, [sp, #12]
 800a666:	4621      	mov	r1, r4
 800a668:	4658      	mov	r0, fp
 800a66a:	f7ff f99d 	bl	80099a8 <quorem>
 800a66e:	9a03      	ldr	r2, [sp, #12]
 800a670:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a674:	f807 3b01 	strb.w	r3, [r7], #1
 800a678:	1aba      	subs	r2, r7, r2
 800a67a:	4591      	cmp	r9, r2
 800a67c:	ddba      	ble.n	800a5f4 <_dtoa_r+0xb34>
 800a67e:	4659      	mov	r1, fp
 800a680:	2300      	movs	r3, #0
 800a682:	220a      	movs	r2, #10
 800a684:	4628      	mov	r0, r5
 800a686:	f000 fc0b 	bl	800aea0 <__multadd>
 800a68a:	4683      	mov	fp, r0
 800a68c:	e7eb      	b.n	800a666 <_dtoa_r+0xba6>
 800a68e:	bf00      	nop
 800a690:	0801d4d0 	.word	0x0801d4d0
 800a694:	0801d2d0 	.word	0x0801d2d0
 800a698:	0801d451 	.word	0x0801d451

0800a69c <rshift>:
 800a69c:	6903      	ldr	r3, [r0, #16]
 800a69e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a6a6:	f100 0414 	add.w	r4, r0, #20
 800a6aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a6ae:	dd46      	ble.n	800a73e <rshift+0xa2>
 800a6b0:	f011 011f 	ands.w	r1, r1, #31
 800a6b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a6b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a6bc:	d10c      	bne.n	800a6d8 <rshift+0x3c>
 800a6be:	4629      	mov	r1, r5
 800a6c0:	f100 0710 	add.w	r7, r0, #16
 800a6c4:	42b1      	cmp	r1, r6
 800a6c6:	d335      	bcc.n	800a734 <rshift+0x98>
 800a6c8:	1a9b      	subs	r3, r3, r2
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	1eea      	subs	r2, r5, #3
 800a6ce:	4296      	cmp	r6, r2
 800a6d0:	bf38      	it	cc
 800a6d2:	2300      	movcc	r3, #0
 800a6d4:	4423      	add	r3, r4
 800a6d6:	e015      	b.n	800a704 <rshift+0x68>
 800a6d8:	46a1      	mov	r9, r4
 800a6da:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a6de:	f1c1 0820 	rsb	r8, r1, #32
 800a6e2:	40cf      	lsrs	r7, r1
 800a6e4:	f105 0e04 	add.w	lr, r5, #4
 800a6e8:	4576      	cmp	r6, lr
 800a6ea:	46f4      	mov	ip, lr
 800a6ec:	d816      	bhi.n	800a71c <rshift+0x80>
 800a6ee:	1a9a      	subs	r2, r3, r2
 800a6f0:	0092      	lsls	r2, r2, #2
 800a6f2:	3a04      	subs	r2, #4
 800a6f4:	3501      	adds	r5, #1
 800a6f6:	42ae      	cmp	r6, r5
 800a6f8:	bf38      	it	cc
 800a6fa:	2200      	movcc	r2, #0
 800a6fc:	18a3      	adds	r3, r4, r2
 800a6fe:	50a7      	str	r7, [r4, r2]
 800a700:	b107      	cbz	r7, 800a704 <rshift+0x68>
 800a702:	3304      	adds	r3, #4
 800a704:	42a3      	cmp	r3, r4
 800a706:	eba3 0204 	sub.w	r2, r3, r4
 800a70a:	bf08      	it	eq
 800a70c:	2300      	moveq	r3, #0
 800a70e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a712:	6102      	str	r2, [r0, #16]
 800a714:	bf08      	it	eq
 800a716:	6143      	streq	r3, [r0, #20]
 800a718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a71c:	f8dc c000 	ldr.w	ip, [ip]
 800a720:	fa0c fc08 	lsl.w	ip, ip, r8
 800a724:	ea4c 0707 	orr.w	r7, ip, r7
 800a728:	f849 7b04 	str.w	r7, [r9], #4
 800a72c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a730:	40cf      	lsrs	r7, r1
 800a732:	e7d9      	b.n	800a6e8 <rshift+0x4c>
 800a734:	f851 cb04 	ldr.w	ip, [r1], #4
 800a738:	f847 cf04 	str.w	ip, [r7, #4]!
 800a73c:	e7c2      	b.n	800a6c4 <rshift+0x28>
 800a73e:	4623      	mov	r3, r4
 800a740:	e7e0      	b.n	800a704 <rshift+0x68>

0800a742 <__hexdig_fun>:
 800a742:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a746:	2b09      	cmp	r3, #9
 800a748:	d802      	bhi.n	800a750 <__hexdig_fun+0xe>
 800a74a:	3820      	subs	r0, #32
 800a74c:	b2c0      	uxtb	r0, r0
 800a74e:	4770      	bx	lr
 800a750:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a754:	2b05      	cmp	r3, #5
 800a756:	d801      	bhi.n	800a75c <__hexdig_fun+0x1a>
 800a758:	3847      	subs	r0, #71	; 0x47
 800a75a:	e7f7      	b.n	800a74c <__hexdig_fun+0xa>
 800a75c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a760:	2b05      	cmp	r3, #5
 800a762:	d801      	bhi.n	800a768 <__hexdig_fun+0x26>
 800a764:	3827      	subs	r0, #39	; 0x27
 800a766:	e7f1      	b.n	800a74c <__hexdig_fun+0xa>
 800a768:	2000      	movs	r0, #0
 800a76a:	4770      	bx	lr

0800a76c <__gethex>:
 800a76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a770:	b08b      	sub	sp, #44	; 0x2c
 800a772:	9305      	str	r3, [sp, #20]
 800a774:	4bb2      	ldr	r3, [pc, #712]	; (800aa40 <__gethex+0x2d4>)
 800a776:	9002      	str	r0, [sp, #8]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	468b      	mov	fp, r1
 800a77c:	4618      	mov	r0, r3
 800a77e:	4690      	mov	r8, r2
 800a780:	9303      	str	r3, [sp, #12]
 800a782:	f7fa fe4b 	bl	800541c <strlen>
 800a786:	4682      	mov	sl, r0
 800a788:	9b03      	ldr	r3, [sp, #12]
 800a78a:	f8db 2000 	ldr.w	r2, [fp]
 800a78e:	4403      	add	r3, r0
 800a790:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a794:	9306      	str	r3, [sp, #24]
 800a796:	1c93      	adds	r3, r2, #2
 800a798:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a79c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a7a0:	32fe      	adds	r2, #254	; 0xfe
 800a7a2:	18d1      	adds	r1, r2, r3
 800a7a4:	461f      	mov	r7, r3
 800a7a6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a7aa:	9101      	str	r1, [sp, #4]
 800a7ac:	2830      	cmp	r0, #48	; 0x30
 800a7ae:	d0f8      	beq.n	800a7a2 <__gethex+0x36>
 800a7b0:	f7ff ffc7 	bl	800a742 <__hexdig_fun>
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	d13a      	bne.n	800a830 <__gethex+0xc4>
 800a7ba:	4652      	mov	r2, sl
 800a7bc:	4638      	mov	r0, r7
 800a7be:	9903      	ldr	r1, [sp, #12]
 800a7c0:	f001 fa26 	bl	800bc10 <strncmp>
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d166      	bne.n	800a898 <__gethex+0x12c>
 800a7ca:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a7ce:	eb07 060a 	add.w	r6, r7, sl
 800a7d2:	f7ff ffb6 	bl	800a742 <__hexdig_fun>
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	d060      	beq.n	800a89c <__gethex+0x130>
 800a7da:	4633      	mov	r3, r6
 800a7dc:	7818      	ldrb	r0, [r3, #0]
 800a7de:	461f      	mov	r7, r3
 800a7e0:	2830      	cmp	r0, #48	; 0x30
 800a7e2:	f103 0301 	add.w	r3, r3, #1
 800a7e6:	d0f9      	beq.n	800a7dc <__gethex+0x70>
 800a7e8:	f7ff ffab 	bl	800a742 <__hexdig_fun>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	fab0 f480 	clz	r4, r0
 800a7f2:	4635      	mov	r5, r6
 800a7f4:	0964      	lsrs	r4, r4, #5
 800a7f6:	9301      	str	r3, [sp, #4]
 800a7f8:	463a      	mov	r2, r7
 800a7fa:	4616      	mov	r6, r2
 800a7fc:	7830      	ldrb	r0, [r6, #0]
 800a7fe:	3201      	adds	r2, #1
 800a800:	f7ff ff9f 	bl	800a742 <__hexdig_fun>
 800a804:	2800      	cmp	r0, #0
 800a806:	d1f8      	bne.n	800a7fa <__gethex+0x8e>
 800a808:	4652      	mov	r2, sl
 800a80a:	4630      	mov	r0, r6
 800a80c:	9903      	ldr	r1, [sp, #12]
 800a80e:	f001 f9ff 	bl	800bc10 <strncmp>
 800a812:	b980      	cbnz	r0, 800a836 <__gethex+0xca>
 800a814:	b94d      	cbnz	r5, 800a82a <__gethex+0xbe>
 800a816:	eb06 050a 	add.w	r5, r6, sl
 800a81a:	462a      	mov	r2, r5
 800a81c:	4616      	mov	r6, r2
 800a81e:	7830      	ldrb	r0, [r6, #0]
 800a820:	3201      	adds	r2, #1
 800a822:	f7ff ff8e 	bl	800a742 <__hexdig_fun>
 800a826:	2800      	cmp	r0, #0
 800a828:	d1f8      	bne.n	800a81c <__gethex+0xb0>
 800a82a:	1bad      	subs	r5, r5, r6
 800a82c:	00ad      	lsls	r5, r5, #2
 800a82e:	e004      	b.n	800a83a <__gethex+0xce>
 800a830:	2400      	movs	r4, #0
 800a832:	4625      	mov	r5, r4
 800a834:	e7e0      	b.n	800a7f8 <__gethex+0x8c>
 800a836:	2d00      	cmp	r5, #0
 800a838:	d1f7      	bne.n	800a82a <__gethex+0xbe>
 800a83a:	7833      	ldrb	r3, [r6, #0]
 800a83c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a840:	2b50      	cmp	r3, #80	; 0x50
 800a842:	d139      	bne.n	800a8b8 <__gethex+0x14c>
 800a844:	7873      	ldrb	r3, [r6, #1]
 800a846:	2b2b      	cmp	r3, #43	; 0x2b
 800a848:	d02a      	beq.n	800a8a0 <__gethex+0x134>
 800a84a:	2b2d      	cmp	r3, #45	; 0x2d
 800a84c:	d02c      	beq.n	800a8a8 <__gethex+0x13c>
 800a84e:	f04f 0900 	mov.w	r9, #0
 800a852:	1c71      	adds	r1, r6, #1
 800a854:	7808      	ldrb	r0, [r1, #0]
 800a856:	f7ff ff74 	bl	800a742 <__hexdig_fun>
 800a85a:	1e43      	subs	r3, r0, #1
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	2b18      	cmp	r3, #24
 800a860:	d82a      	bhi.n	800a8b8 <__gethex+0x14c>
 800a862:	f1a0 0210 	sub.w	r2, r0, #16
 800a866:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a86a:	f7ff ff6a 	bl	800a742 <__hexdig_fun>
 800a86e:	1e43      	subs	r3, r0, #1
 800a870:	b2db      	uxtb	r3, r3
 800a872:	2b18      	cmp	r3, #24
 800a874:	d91b      	bls.n	800a8ae <__gethex+0x142>
 800a876:	f1b9 0f00 	cmp.w	r9, #0
 800a87a:	d000      	beq.n	800a87e <__gethex+0x112>
 800a87c:	4252      	negs	r2, r2
 800a87e:	4415      	add	r5, r2
 800a880:	f8cb 1000 	str.w	r1, [fp]
 800a884:	b1d4      	cbz	r4, 800a8bc <__gethex+0x150>
 800a886:	9b01      	ldr	r3, [sp, #4]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	bf14      	ite	ne
 800a88c:	2700      	movne	r7, #0
 800a88e:	2706      	moveq	r7, #6
 800a890:	4638      	mov	r0, r7
 800a892:	b00b      	add	sp, #44	; 0x2c
 800a894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a898:	463e      	mov	r6, r7
 800a89a:	4625      	mov	r5, r4
 800a89c:	2401      	movs	r4, #1
 800a89e:	e7cc      	b.n	800a83a <__gethex+0xce>
 800a8a0:	f04f 0900 	mov.w	r9, #0
 800a8a4:	1cb1      	adds	r1, r6, #2
 800a8a6:	e7d5      	b.n	800a854 <__gethex+0xe8>
 800a8a8:	f04f 0901 	mov.w	r9, #1
 800a8ac:	e7fa      	b.n	800a8a4 <__gethex+0x138>
 800a8ae:	230a      	movs	r3, #10
 800a8b0:	fb03 0202 	mla	r2, r3, r2, r0
 800a8b4:	3a10      	subs	r2, #16
 800a8b6:	e7d6      	b.n	800a866 <__gethex+0xfa>
 800a8b8:	4631      	mov	r1, r6
 800a8ba:	e7e1      	b.n	800a880 <__gethex+0x114>
 800a8bc:	4621      	mov	r1, r4
 800a8be:	1bf3      	subs	r3, r6, r7
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	2b07      	cmp	r3, #7
 800a8c4:	dc0a      	bgt.n	800a8dc <__gethex+0x170>
 800a8c6:	9802      	ldr	r0, [sp, #8]
 800a8c8:	f000 fa88 	bl	800addc <_Balloc>
 800a8cc:	4604      	mov	r4, r0
 800a8ce:	b940      	cbnz	r0, 800a8e2 <__gethex+0x176>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	21de      	movs	r1, #222	; 0xde
 800a8d4:	4b5b      	ldr	r3, [pc, #364]	; (800aa44 <__gethex+0x2d8>)
 800a8d6:	485c      	ldr	r0, [pc, #368]	; (800aa48 <__gethex+0x2dc>)
 800a8d8:	f001 f9bc 	bl	800bc54 <__assert_func>
 800a8dc:	3101      	adds	r1, #1
 800a8de:	105b      	asrs	r3, r3, #1
 800a8e0:	e7ef      	b.n	800a8c2 <__gethex+0x156>
 800a8e2:	f04f 0b00 	mov.w	fp, #0
 800a8e6:	f100 0914 	add.w	r9, r0, #20
 800a8ea:	f1ca 0301 	rsb	r3, sl, #1
 800a8ee:	f8cd 9010 	str.w	r9, [sp, #16]
 800a8f2:	f8cd b004 	str.w	fp, [sp, #4]
 800a8f6:	9308      	str	r3, [sp, #32]
 800a8f8:	42b7      	cmp	r7, r6
 800a8fa:	d33f      	bcc.n	800a97c <__gethex+0x210>
 800a8fc:	9f04      	ldr	r7, [sp, #16]
 800a8fe:	9b01      	ldr	r3, [sp, #4]
 800a900:	f847 3b04 	str.w	r3, [r7], #4
 800a904:	eba7 0709 	sub.w	r7, r7, r9
 800a908:	10bf      	asrs	r7, r7, #2
 800a90a:	6127      	str	r7, [r4, #16]
 800a90c:	4618      	mov	r0, r3
 800a90e:	f000 fb57 	bl	800afc0 <__hi0bits>
 800a912:	017f      	lsls	r7, r7, #5
 800a914:	f8d8 6000 	ldr.w	r6, [r8]
 800a918:	1a3f      	subs	r7, r7, r0
 800a91a:	42b7      	cmp	r7, r6
 800a91c:	dd62      	ble.n	800a9e4 <__gethex+0x278>
 800a91e:	1bbf      	subs	r7, r7, r6
 800a920:	4639      	mov	r1, r7
 800a922:	4620      	mov	r0, r4
 800a924:	f000 fef1 	bl	800b70a <__any_on>
 800a928:	4682      	mov	sl, r0
 800a92a:	b1a8      	cbz	r0, 800a958 <__gethex+0x1ec>
 800a92c:	f04f 0a01 	mov.w	sl, #1
 800a930:	1e7b      	subs	r3, r7, #1
 800a932:	1159      	asrs	r1, r3, #5
 800a934:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a938:	f003 021f 	and.w	r2, r3, #31
 800a93c:	fa0a f202 	lsl.w	r2, sl, r2
 800a940:	420a      	tst	r2, r1
 800a942:	d009      	beq.n	800a958 <__gethex+0x1ec>
 800a944:	4553      	cmp	r3, sl
 800a946:	dd05      	ble.n	800a954 <__gethex+0x1e8>
 800a948:	4620      	mov	r0, r4
 800a94a:	1eb9      	subs	r1, r7, #2
 800a94c:	f000 fedd 	bl	800b70a <__any_on>
 800a950:	2800      	cmp	r0, #0
 800a952:	d144      	bne.n	800a9de <__gethex+0x272>
 800a954:	f04f 0a02 	mov.w	sl, #2
 800a958:	4639      	mov	r1, r7
 800a95a:	4620      	mov	r0, r4
 800a95c:	f7ff fe9e 	bl	800a69c <rshift>
 800a960:	443d      	add	r5, r7
 800a962:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a966:	42ab      	cmp	r3, r5
 800a968:	da4a      	bge.n	800aa00 <__gethex+0x294>
 800a96a:	4621      	mov	r1, r4
 800a96c:	9802      	ldr	r0, [sp, #8]
 800a96e:	f000 fa75 	bl	800ae5c <_Bfree>
 800a972:	2300      	movs	r3, #0
 800a974:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a976:	27a3      	movs	r7, #163	; 0xa3
 800a978:	6013      	str	r3, [r2, #0]
 800a97a:	e789      	b.n	800a890 <__gethex+0x124>
 800a97c:	1e73      	subs	r3, r6, #1
 800a97e:	9a06      	ldr	r2, [sp, #24]
 800a980:	9307      	str	r3, [sp, #28]
 800a982:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a986:	4293      	cmp	r3, r2
 800a988:	d019      	beq.n	800a9be <__gethex+0x252>
 800a98a:	f1bb 0f20 	cmp.w	fp, #32
 800a98e:	d107      	bne.n	800a9a0 <__gethex+0x234>
 800a990:	9b04      	ldr	r3, [sp, #16]
 800a992:	9a01      	ldr	r2, [sp, #4]
 800a994:	f843 2b04 	str.w	r2, [r3], #4
 800a998:	9304      	str	r3, [sp, #16]
 800a99a:	2300      	movs	r3, #0
 800a99c:	469b      	mov	fp, r3
 800a99e:	9301      	str	r3, [sp, #4]
 800a9a0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a9a4:	f7ff fecd 	bl	800a742 <__hexdig_fun>
 800a9a8:	9b01      	ldr	r3, [sp, #4]
 800a9aa:	f000 000f 	and.w	r0, r0, #15
 800a9ae:	fa00 f00b 	lsl.w	r0, r0, fp
 800a9b2:	4303      	orrs	r3, r0
 800a9b4:	9301      	str	r3, [sp, #4]
 800a9b6:	f10b 0b04 	add.w	fp, fp, #4
 800a9ba:	9b07      	ldr	r3, [sp, #28]
 800a9bc:	e00d      	b.n	800a9da <__gethex+0x26e>
 800a9be:	9a08      	ldr	r2, [sp, #32]
 800a9c0:	1e73      	subs	r3, r6, #1
 800a9c2:	4413      	add	r3, r2
 800a9c4:	42bb      	cmp	r3, r7
 800a9c6:	d3e0      	bcc.n	800a98a <__gethex+0x21e>
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	4652      	mov	r2, sl
 800a9cc:	9903      	ldr	r1, [sp, #12]
 800a9ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a9d0:	f001 f91e 	bl	800bc10 <strncmp>
 800a9d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	d1d7      	bne.n	800a98a <__gethex+0x21e>
 800a9da:	461e      	mov	r6, r3
 800a9dc:	e78c      	b.n	800a8f8 <__gethex+0x18c>
 800a9de:	f04f 0a03 	mov.w	sl, #3
 800a9e2:	e7b9      	b.n	800a958 <__gethex+0x1ec>
 800a9e4:	da09      	bge.n	800a9fa <__gethex+0x28e>
 800a9e6:	1bf7      	subs	r7, r6, r7
 800a9e8:	4621      	mov	r1, r4
 800a9ea:	463a      	mov	r2, r7
 800a9ec:	9802      	ldr	r0, [sp, #8]
 800a9ee:	f000 fc4d 	bl	800b28c <__lshift>
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	1bed      	subs	r5, r5, r7
 800a9f6:	f100 0914 	add.w	r9, r0, #20
 800a9fa:	f04f 0a00 	mov.w	sl, #0
 800a9fe:	e7b0      	b.n	800a962 <__gethex+0x1f6>
 800aa00:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aa04:	42a8      	cmp	r0, r5
 800aa06:	dd72      	ble.n	800aaee <__gethex+0x382>
 800aa08:	1b45      	subs	r5, r0, r5
 800aa0a:	42ae      	cmp	r6, r5
 800aa0c:	dc35      	bgt.n	800aa7a <__gethex+0x30e>
 800aa0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d029      	beq.n	800aa6a <__gethex+0x2fe>
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	d02b      	beq.n	800aa72 <__gethex+0x306>
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d11c      	bne.n	800aa58 <__gethex+0x2ec>
 800aa1e:	42ae      	cmp	r6, r5
 800aa20:	d11a      	bne.n	800aa58 <__gethex+0x2ec>
 800aa22:	2e01      	cmp	r6, #1
 800aa24:	d112      	bne.n	800aa4c <__gethex+0x2e0>
 800aa26:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aa2a:	9a05      	ldr	r2, [sp, #20]
 800aa2c:	2762      	movs	r7, #98	; 0x62
 800aa2e:	6013      	str	r3, [r2, #0]
 800aa30:	2301      	movs	r3, #1
 800aa32:	6123      	str	r3, [r4, #16]
 800aa34:	f8c9 3000 	str.w	r3, [r9]
 800aa38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa3a:	601c      	str	r4, [r3, #0]
 800aa3c:	e728      	b.n	800a890 <__gethex+0x124>
 800aa3e:	bf00      	nop
 800aa40:	0801d548 	.word	0x0801d548
 800aa44:	0801d4d0 	.word	0x0801d4d0
 800aa48:	0801d4e1 	.word	0x0801d4e1
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	1e71      	subs	r1, r6, #1
 800aa50:	f000 fe5b 	bl	800b70a <__any_on>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	d1e6      	bne.n	800aa26 <__gethex+0x2ba>
 800aa58:	4621      	mov	r1, r4
 800aa5a:	9802      	ldr	r0, [sp, #8]
 800aa5c:	f000 f9fe 	bl	800ae5c <_Bfree>
 800aa60:	2300      	movs	r3, #0
 800aa62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa64:	2750      	movs	r7, #80	; 0x50
 800aa66:	6013      	str	r3, [r2, #0]
 800aa68:	e712      	b.n	800a890 <__gethex+0x124>
 800aa6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1f3      	bne.n	800aa58 <__gethex+0x2ec>
 800aa70:	e7d9      	b.n	800aa26 <__gethex+0x2ba>
 800aa72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d1d6      	bne.n	800aa26 <__gethex+0x2ba>
 800aa78:	e7ee      	b.n	800aa58 <__gethex+0x2ec>
 800aa7a:	1e6f      	subs	r7, r5, #1
 800aa7c:	f1ba 0f00 	cmp.w	sl, #0
 800aa80:	d132      	bne.n	800aae8 <__gethex+0x37c>
 800aa82:	b127      	cbz	r7, 800aa8e <__gethex+0x322>
 800aa84:	4639      	mov	r1, r7
 800aa86:	4620      	mov	r0, r4
 800aa88:	f000 fe3f 	bl	800b70a <__any_on>
 800aa8c:	4682      	mov	sl, r0
 800aa8e:	2101      	movs	r1, #1
 800aa90:	117b      	asrs	r3, r7, #5
 800aa92:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800aa96:	f007 071f 	and.w	r7, r7, #31
 800aa9a:	fa01 f707 	lsl.w	r7, r1, r7
 800aa9e:	421f      	tst	r7, r3
 800aaa0:	f04f 0702 	mov.w	r7, #2
 800aaa4:	4629      	mov	r1, r5
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	bf18      	it	ne
 800aaaa:	f04a 0a02 	orrne.w	sl, sl, #2
 800aaae:	1b76      	subs	r6, r6, r5
 800aab0:	f7ff fdf4 	bl	800a69c <rshift>
 800aab4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aab8:	f1ba 0f00 	cmp.w	sl, #0
 800aabc:	d048      	beq.n	800ab50 <__gethex+0x3e4>
 800aabe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d015      	beq.n	800aaf2 <__gethex+0x386>
 800aac6:	2b03      	cmp	r3, #3
 800aac8:	d017      	beq.n	800aafa <__gethex+0x38e>
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d109      	bne.n	800aae2 <__gethex+0x376>
 800aace:	f01a 0f02 	tst.w	sl, #2
 800aad2:	d006      	beq.n	800aae2 <__gethex+0x376>
 800aad4:	f8d9 0000 	ldr.w	r0, [r9]
 800aad8:	ea4a 0a00 	orr.w	sl, sl, r0
 800aadc:	f01a 0f01 	tst.w	sl, #1
 800aae0:	d10e      	bne.n	800ab00 <__gethex+0x394>
 800aae2:	f047 0710 	orr.w	r7, r7, #16
 800aae6:	e033      	b.n	800ab50 <__gethex+0x3e4>
 800aae8:	f04f 0a01 	mov.w	sl, #1
 800aaec:	e7cf      	b.n	800aa8e <__gethex+0x322>
 800aaee:	2701      	movs	r7, #1
 800aaf0:	e7e2      	b.n	800aab8 <__gethex+0x34c>
 800aaf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aaf4:	f1c3 0301 	rsb	r3, r3, #1
 800aaf8:	9315      	str	r3, [sp, #84]	; 0x54
 800aafa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d0f0      	beq.n	800aae2 <__gethex+0x376>
 800ab00:	f04f 0c00 	mov.w	ip, #0
 800ab04:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ab08:	f104 0314 	add.w	r3, r4, #20
 800ab0c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ab10:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ab14:	4618      	mov	r0, r3
 800ab16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab1a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ab1e:	d01c      	beq.n	800ab5a <__gethex+0x3ee>
 800ab20:	3201      	adds	r2, #1
 800ab22:	6002      	str	r2, [r0, #0]
 800ab24:	2f02      	cmp	r7, #2
 800ab26:	f104 0314 	add.w	r3, r4, #20
 800ab2a:	d13d      	bne.n	800aba8 <__gethex+0x43c>
 800ab2c:	f8d8 2000 	ldr.w	r2, [r8]
 800ab30:	3a01      	subs	r2, #1
 800ab32:	42b2      	cmp	r2, r6
 800ab34:	d10a      	bne.n	800ab4c <__gethex+0x3e0>
 800ab36:	2201      	movs	r2, #1
 800ab38:	1171      	asrs	r1, r6, #5
 800ab3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab3e:	f006 061f 	and.w	r6, r6, #31
 800ab42:	fa02 f606 	lsl.w	r6, r2, r6
 800ab46:	421e      	tst	r6, r3
 800ab48:	bf18      	it	ne
 800ab4a:	4617      	movne	r7, r2
 800ab4c:	f047 0720 	orr.w	r7, r7, #32
 800ab50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab52:	601c      	str	r4, [r3, #0]
 800ab54:	9b05      	ldr	r3, [sp, #20]
 800ab56:	601d      	str	r5, [r3, #0]
 800ab58:	e69a      	b.n	800a890 <__gethex+0x124>
 800ab5a:	4299      	cmp	r1, r3
 800ab5c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ab60:	d8d8      	bhi.n	800ab14 <__gethex+0x3a8>
 800ab62:	68a3      	ldr	r3, [r4, #8]
 800ab64:	459b      	cmp	fp, r3
 800ab66:	db17      	blt.n	800ab98 <__gethex+0x42c>
 800ab68:	6861      	ldr	r1, [r4, #4]
 800ab6a:	9802      	ldr	r0, [sp, #8]
 800ab6c:	3101      	adds	r1, #1
 800ab6e:	f000 f935 	bl	800addc <_Balloc>
 800ab72:	4681      	mov	r9, r0
 800ab74:	b918      	cbnz	r0, 800ab7e <__gethex+0x412>
 800ab76:	4602      	mov	r2, r0
 800ab78:	2184      	movs	r1, #132	; 0x84
 800ab7a:	4b19      	ldr	r3, [pc, #100]	; (800abe0 <__gethex+0x474>)
 800ab7c:	e6ab      	b.n	800a8d6 <__gethex+0x16a>
 800ab7e:	6922      	ldr	r2, [r4, #16]
 800ab80:	f104 010c 	add.w	r1, r4, #12
 800ab84:	3202      	adds	r2, #2
 800ab86:	0092      	lsls	r2, r2, #2
 800ab88:	300c      	adds	r0, #12
 800ab8a:	f000 f919 	bl	800adc0 <memcpy>
 800ab8e:	4621      	mov	r1, r4
 800ab90:	9802      	ldr	r0, [sp, #8]
 800ab92:	f000 f963 	bl	800ae5c <_Bfree>
 800ab96:	464c      	mov	r4, r9
 800ab98:	6923      	ldr	r3, [r4, #16]
 800ab9a:	1c5a      	adds	r2, r3, #1
 800ab9c:	6122      	str	r2, [r4, #16]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aba4:	615a      	str	r2, [r3, #20]
 800aba6:	e7bd      	b.n	800ab24 <__gethex+0x3b8>
 800aba8:	6922      	ldr	r2, [r4, #16]
 800abaa:	455a      	cmp	r2, fp
 800abac:	dd0b      	ble.n	800abc6 <__gethex+0x45a>
 800abae:	2101      	movs	r1, #1
 800abb0:	4620      	mov	r0, r4
 800abb2:	f7ff fd73 	bl	800a69c <rshift>
 800abb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abba:	3501      	adds	r5, #1
 800abbc:	42ab      	cmp	r3, r5
 800abbe:	f6ff aed4 	blt.w	800a96a <__gethex+0x1fe>
 800abc2:	2701      	movs	r7, #1
 800abc4:	e7c2      	b.n	800ab4c <__gethex+0x3e0>
 800abc6:	f016 061f 	ands.w	r6, r6, #31
 800abca:	d0fa      	beq.n	800abc2 <__gethex+0x456>
 800abcc:	4453      	add	r3, sl
 800abce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800abd2:	f000 f9f5 	bl	800afc0 <__hi0bits>
 800abd6:	f1c6 0620 	rsb	r6, r6, #32
 800abda:	42b0      	cmp	r0, r6
 800abdc:	dbe7      	blt.n	800abae <__gethex+0x442>
 800abde:	e7f0      	b.n	800abc2 <__gethex+0x456>
 800abe0:	0801d4d0 	.word	0x0801d4d0

0800abe4 <L_shift>:
 800abe4:	f1c2 0208 	rsb	r2, r2, #8
 800abe8:	0092      	lsls	r2, r2, #2
 800abea:	b570      	push	{r4, r5, r6, lr}
 800abec:	f1c2 0620 	rsb	r6, r2, #32
 800abf0:	6843      	ldr	r3, [r0, #4]
 800abf2:	6804      	ldr	r4, [r0, #0]
 800abf4:	fa03 f506 	lsl.w	r5, r3, r6
 800abf8:	432c      	orrs	r4, r5
 800abfa:	40d3      	lsrs	r3, r2
 800abfc:	6004      	str	r4, [r0, #0]
 800abfe:	f840 3f04 	str.w	r3, [r0, #4]!
 800ac02:	4288      	cmp	r0, r1
 800ac04:	d3f4      	bcc.n	800abf0 <L_shift+0xc>
 800ac06:	bd70      	pop	{r4, r5, r6, pc}

0800ac08 <__match>:
 800ac08:	b530      	push	{r4, r5, lr}
 800ac0a:	6803      	ldr	r3, [r0, #0]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac12:	b914      	cbnz	r4, 800ac1a <__match+0x12>
 800ac14:	6003      	str	r3, [r0, #0]
 800ac16:	2001      	movs	r0, #1
 800ac18:	bd30      	pop	{r4, r5, pc}
 800ac1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac1e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ac22:	2d19      	cmp	r5, #25
 800ac24:	bf98      	it	ls
 800ac26:	3220      	addls	r2, #32
 800ac28:	42a2      	cmp	r2, r4
 800ac2a:	d0f0      	beq.n	800ac0e <__match+0x6>
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	e7f3      	b.n	800ac18 <__match+0x10>

0800ac30 <__hexnan>:
 800ac30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac34:	2500      	movs	r5, #0
 800ac36:	680b      	ldr	r3, [r1, #0]
 800ac38:	4682      	mov	sl, r0
 800ac3a:	115e      	asrs	r6, r3, #5
 800ac3c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ac40:	f013 031f 	ands.w	r3, r3, #31
 800ac44:	bf18      	it	ne
 800ac46:	3604      	addne	r6, #4
 800ac48:	1f37      	subs	r7, r6, #4
 800ac4a:	46b9      	mov	r9, r7
 800ac4c:	463c      	mov	r4, r7
 800ac4e:	46ab      	mov	fp, r5
 800ac50:	b087      	sub	sp, #28
 800ac52:	4690      	mov	r8, r2
 800ac54:	6802      	ldr	r2, [r0, #0]
 800ac56:	9301      	str	r3, [sp, #4]
 800ac58:	f846 5c04 	str.w	r5, [r6, #-4]
 800ac5c:	9502      	str	r5, [sp, #8]
 800ac5e:	7851      	ldrb	r1, [r2, #1]
 800ac60:	1c53      	adds	r3, r2, #1
 800ac62:	9303      	str	r3, [sp, #12]
 800ac64:	b341      	cbz	r1, 800acb8 <__hexnan+0x88>
 800ac66:	4608      	mov	r0, r1
 800ac68:	9205      	str	r2, [sp, #20]
 800ac6a:	9104      	str	r1, [sp, #16]
 800ac6c:	f7ff fd69 	bl	800a742 <__hexdig_fun>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	d14f      	bne.n	800ad14 <__hexnan+0xe4>
 800ac74:	9904      	ldr	r1, [sp, #16]
 800ac76:	9a05      	ldr	r2, [sp, #20]
 800ac78:	2920      	cmp	r1, #32
 800ac7a:	d818      	bhi.n	800acae <__hexnan+0x7e>
 800ac7c:	9b02      	ldr	r3, [sp, #8]
 800ac7e:	459b      	cmp	fp, r3
 800ac80:	dd13      	ble.n	800acaa <__hexnan+0x7a>
 800ac82:	454c      	cmp	r4, r9
 800ac84:	d206      	bcs.n	800ac94 <__hexnan+0x64>
 800ac86:	2d07      	cmp	r5, #7
 800ac88:	dc04      	bgt.n	800ac94 <__hexnan+0x64>
 800ac8a:	462a      	mov	r2, r5
 800ac8c:	4649      	mov	r1, r9
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f7ff ffa8 	bl	800abe4 <L_shift>
 800ac94:	4544      	cmp	r4, r8
 800ac96:	d950      	bls.n	800ad3a <__hexnan+0x10a>
 800ac98:	2300      	movs	r3, #0
 800ac9a:	f1a4 0904 	sub.w	r9, r4, #4
 800ac9e:	f844 3c04 	str.w	r3, [r4, #-4]
 800aca2:	461d      	mov	r5, r3
 800aca4:	464c      	mov	r4, r9
 800aca6:	f8cd b008 	str.w	fp, [sp, #8]
 800acaa:	9a03      	ldr	r2, [sp, #12]
 800acac:	e7d7      	b.n	800ac5e <__hexnan+0x2e>
 800acae:	2929      	cmp	r1, #41	; 0x29
 800acb0:	d156      	bne.n	800ad60 <__hexnan+0x130>
 800acb2:	3202      	adds	r2, #2
 800acb4:	f8ca 2000 	str.w	r2, [sl]
 800acb8:	f1bb 0f00 	cmp.w	fp, #0
 800acbc:	d050      	beq.n	800ad60 <__hexnan+0x130>
 800acbe:	454c      	cmp	r4, r9
 800acc0:	d206      	bcs.n	800acd0 <__hexnan+0xa0>
 800acc2:	2d07      	cmp	r5, #7
 800acc4:	dc04      	bgt.n	800acd0 <__hexnan+0xa0>
 800acc6:	462a      	mov	r2, r5
 800acc8:	4649      	mov	r1, r9
 800acca:	4620      	mov	r0, r4
 800accc:	f7ff ff8a 	bl	800abe4 <L_shift>
 800acd0:	4544      	cmp	r4, r8
 800acd2:	d934      	bls.n	800ad3e <__hexnan+0x10e>
 800acd4:	4623      	mov	r3, r4
 800acd6:	f1a8 0204 	sub.w	r2, r8, #4
 800acda:	f853 1b04 	ldr.w	r1, [r3], #4
 800acde:	429f      	cmp	r7, r3
 800ace0:	f842 1f04 	str.w	r1, [r2, #4]!
 800ace4:	d2f9      	bcs.n	800acda <__hexnan+0xaa>
 800ace6:	1b3b      	subs	r3, r7, r4
 800ace8:	f023 0303 	bic.w	r3, r3, #3
 800acec:	3304      	adds	r3, #4
 800acee:	3401      	adds	r4, #1
 800acf0:	3e03      	subs	r6, #3
 800acf2:	42b4      	cmp	r4, r6
 800acf4:	bf88      	it	hi
 800acf6:	2304      	movhi	r3, #4
 800acf8:	2200      	movs	r2, #0
 800acfa:	4443      	add	r3, r8
 800acfc:	f843 2b04 	str.w	r2, [r3], #4
 800ad00:	429f      	cmp	r7, r3
 800ad02:	d2fb      	bcs.n	800acfc <__hexnan+0xcc>
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	b91b      	cbnz	r3, 800ad10 <__hexnan+0xe0>
 800ad08:	4547      	cmp	r7, r8
 800ad0a:	d127      	bne.n	800ad5c <__hexnan+0x12c>
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	603b      	str	r3, [r7, #0]
 800ad10:	2005      	movs	r0, #5
 800ad12:	e026      	b.n	800ad62 <__hexnan+0x132>
 800ad14:	3501      	adds	r5, #1
 800ad16:	2d08      	cmp	r5, #8
 800ad18:	f10b 0b01 	add.w	fp, fp, #1
 800ad1c:	dd06      	ble.n	800ad2c <__hexnan+0xfc>
 800ad1e:	4544      	cmp	r4, r8
 800ad20:	d9c3      	bls.n	800acaa <__hexnan+0x7a>
 800ad22:	2300      	movs	r3, #0
 800ad24:	2501      	movs	r5, #1
 800ad26:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad2a:	3c04      	subs	r4, #4
 800ad2c:	6822      	ldr	r2, [r4, #0]
 800ad2e:	f000 000f 	and.w	r0, r0, #15
 800ad32:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ad36:	6022      	str	r2, [r4, #0]
 800ad38:	e7b7      	b.n	800acaa <__hexnan+0x7a>
 800ad3a:	2508      	movs	r5, #8
 800ad3c:	e7b5      	b.n	800acaa <__hexnan+0x7a>
 800ad3e:	9b01      	ldr	r3, [sp, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d0df      	beq.n	800ad04 <__hexnan+0xd4>
 800ad44:	f04f 32ff 	mov.w	r2, #4294967295
 800ad48:	f1c3 0320 	rsb	r3, r3, #32
 800ad4c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ad54:	401a      	ands	r2, r3
 800ad56:	f846 2c04 	str.w	r2, [r6, #-4]
 800ad5a:	e7d3      	b.n	800ad04 <__hexnan+0xd4>
 800ad5c:	3f04      	subs	r7, #4
 800ad5e:	e7d1      	b.n	800ad04 <__hexnan+0xd4>
 800ad60:	2004      	movs	r0, #4
 800ad62:	b007      	add	sp, #28
 800ad64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad68 <_localeconv_r>:
 800ad68:	4800      	ldr	r0, [pc, #0]	; (800ad6c <_localeconv_r+0x4>)
 800ad6a:	4770      	bx	lr
 800ad6c:	20000168 	.word	0x20000168

0800ad70 <malloc>:
 800ad70:	4b02      	ldr	r3, [pc, #8]	; (800ad7c <malloc+0xc>)
 800ad72:	4601      	mov	r1, r0
 800ad74:	6818      	ldr	r0, [r3, #0]
 800ad76:	f000 bd65 	b.w	800b844 <_malloc_r>
 800ad7a:	bf00      	nop
 800ad7c:	20000010 	.word	0x20000010

0800ad80 <__ascii_mbtowc>:
 800ad80:	b082      	sub	sp, #8
 800ad82:	b901      	cbnz	r1, 800ad86 <__ascii_mbtowc+0x6>
 800ad84:	a901      	add	r1, sp, #4
 800ad86:	b142      	cbz	r2, 800ad9a <__ascii_mbtowc+0x1a>
 800ad88:	b14b      	cbz	r3, 800ad9e <__ascii_mbtowc+0x1e>
 800ad8a:	7813      	ldrb	r3, [r2, #0]
 800ad8c:	600b      	str	r3, [r1, #0]
 800ad8e:	7812      	ldrb	r2, [r2, #0]
 800ad90:	1e10      	subs	r0, r2, #0
 800ad92:	bf18      	it	ne
 800ad94:	2001      	movne	r0, #1
 800ad96:	b002      	add	sp, #8
 800ad98:	4770      	bx	lr
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	e7fb      	b.n	800ad96 <__ascii_mbtowc+0x16>
 800ad9e:	f06f 0001 	mvn.w	r0, #1
 800ada2:	e7f8      	b.n	800ad96 <__ascii_mbtowc+0x16>

0800ada4 <memchr>:
 800ada4:	4603      	mov	r3, r0
 800ada6:	b510      	push	{r4, lr}
 800ada8:	b2c9      	uxtb	r1, r1
 800adaa:	4402      	add	r2, r0
 800adac:	4293      	cmp	r3, r2
 800adae:	4618      	mov	r0, r3
 800adb0:	d101      	bne.n	800adb6 <memchr+0x12>
 800adb2:	2000      	movs	r0, #0
 800adb4:	e003      	b.n	800adbe <memchr+0x1a>
 800adb6:	7804      	ldrb	r4, [r0, #0]
 800adb8:	3301      	adds	r3, #1
 800adba:	428c      	cmp	r4, r1
 800adbc:	d1f6      	bne.n	800adac <memchr+0x8>
 800adbe:	bd10      	pop	{r4, pc}

0800adc0 <memcpy>:
 800adc0:	440a      	add	r2, r1
 800adc2:	4291      	cmp	r1, r2
 800adc4:	f100 33ff 	add.w	r3, r0, #4294967295
 800adc8:	d100      	bne.n	800adcc <memcpy+0xc>
 800adca:	4770      	bx	lr
 800adcc:	b510      	push	{r4, lr}
 800adce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800add2:	4291      	cmp	r1, r2
 800add4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800add8:	d1f9      	bne.n	800adce <memcpy+0xe>
 800adda:	bd10      	pop	{r4, pc}

0800addc <_Balloc>:
 800addc:	b570      	push	{r4, r5, r6, lr}
 800adde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ade0:	4604      	mov	r4, r0
 800ade2:	460d      	mov	r5, r1
 800ade4:	b976      	cbnz	r6, 800ae04 <_Balloc+0x28>
 800ade6:	2010      	movs	r0, #16
 800ade8:	f7ff ffc2 	bl	800ad70 <malloc>
 800adec:	4602      	mov	r2, r0
 800adee:	6260      	str	r0, [r4, #36]	; 0x24
 800adf0:	b920      	cbnz	r0, 800adfc <_Balloc+0x20>
 800adf2:	2166      	movs	r1, #102	; 0x66
 800adf4:	4b17      	ldr	r3, [pc, #92]	; (800ae54 <_Balloc+0x78>)
 800adf6:	4818      	ldr	r0, [pc, #96]	; (800ae58 <_Balloc+0x7c>)
 800adf8:	f000 ff2c 	bl	800bc54 <__assert_func>
 800adfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae00:	6006      	str	r6, [r0, #0]
 800ae02:	60c6      	str	r6, [r0, #12]
 800ae04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae06:	68f3      	ldr	r3, [r6, #12]
 800ae08:	b183      	cbz	r3, 800ae2c <_Balloc+0x50>
 800ae0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae12:	b9b8      	cbnz	r0, 800ae44 <_Balloc+0x68>
 800ae14:	2101      	movs	r1, #1
 800ae16:	fa01 f605 	lsl.w	r6, r1, r5
 800ae1a:	1d72      	adds	r2, r6, #5
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	0092      	lsls	r2, r2, #2
 800ae20:	f000 fc94 	bl	800b74c <_calloc_r>
 800ae24:	b160      	cbz	r0, 800ae40 <_Balloc+0x64>
 800ae26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae2a:	e00e      	b.n	800ae4a <_Balloc+0x6e>
 800ae2c:	2221      	movs	r2, #33	; 0x21
 800ae2e:	2104      	movs	r1, #4
 800ae30:	4620      	mov	r0, r4
 800ae32:	f000 fc8b 	bl	800b74c <_calloc_r>
 800ae36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae38:	60f0      	str	r0, [r6, #12]
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d1e4      	bne.n	800ae0a <_Balloc+0x2e>
 800ae40:	2000      	movs	r0, #0
 800ae42:	bd70      	pop	{r4, r5, r6, pc}
 800ae44:	6802      	ldr	r2, [r0, #0]
 800ae46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae50:	e7f7      	b.n	800ae42 <_Balloc+0x66>
 800ae52:	bf00      	nop
 800ae54:	0801d45e 	.word	0x0801d45e
 800ae58:	0801d55c 	.word	0x0801d55c

0800ae5c <_Bfree>:
 800ae5c:	b570      	push	{r4, r5, r6, lr}
 800ae5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae60:	4605      	mov	r5, r0
 800ae62:	460c      	mov	r4, r1
 800ae64:	b976      	cbnz	r6, 800ae84 <_Bfree+0x28>
 800ae66:	2010      	movs	r0, #16
 800ae68:	f7ff ff82 	bl	800ad70 <malloc>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	6268      	str	r0, [r5, #36]	; 0x24
 800ae70:	b920      	cbnz	r0, 800ae7c <_Bfree+0x20>
 800ae72:	218a      	movs	r1, #138	; 0x8a
 800ae74:	4b08      	ldr	r3, [pc, #32]	; (800ae98 <_Bfree+0x3c>)
 800ae76:	4809      	ldr	r0, [pc, #36]	; (800ae9c <_Bfree+0x40>)
 800ae78:	f000 feec 	bl	800bc54 <__assert_func>
 800ae7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae80:	6006      	str	r6, [r0, #0]
 800ae82:	60c6      	str	r6, [r0, #12]
 800ae84:	b13c      	cbz	r4, 800ae96 <_Bfree+0x3a>
 800ae86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ae88:	6862      	ldr	r2, [r4, #4]
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae90:	6021      	str	r1, [r4, #0]
 800ae92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae96:	bd70      	pop	{r4, r5, r6, pc}
 800ae98:	0801d45e 	.word	0x0801d45e
 800ae9c:	0801d55c 	.word	0x0801d55c

0800aea0 <__multadd>:
 800aea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aea4:	4607      	mov	r7, r0
 800aea6:	460c      	mov	r4, r1
 800aea8:	461e      	mov	r6, r3
 800aeaa:	2000      	movs	r0, #0
 800aeac:	690d      	ldr	r5, [r1, #16]
 800aeae:	f101 0c14 	add.w	ip, r1, #20
 800aeb2:	f8dc 3000 	ldr.w	r3, [ip]
 800aeb6:	3001      	adds	r0, #1
 800aeb8:	b299      	uxth	r1, r3
 800aeba:	fb02 6101 	mla	r1, r2, r1, r6
 800aebe:	0c1e      	lsrs	r6, r3, #16
 800aec0:	0c0b      	lsrs	r3, r1, #16
 800aec2:	fb02 3306 	mla	r3, r2, r6, r3
 800aec6:	b289      	uxth	r1, r1
 800aec8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aecc:	4285      	cmp	r5, r0
 800aece:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aed2:	f84c 1b04 	str.w	r1, [ip], #4
 800aed6:	dcec      	bgt.n	800aeb2 <__multadd+0x12>
 800aed8:	b30e      	cbz	r6, 800af1e <__multadd+0x7e>
 800aeda:	68a3      	ldr	r3, [r4, #8]
 800aedc:	42ab      	cmp	r3, r5
 800aede:	dc19      	bgt.n	800af14 <__multadd+0x74>
 800aee0:	6861      	ldr	r1, [r4, #4]
 800aee2:	4638      	mov	r0, r7
 800aee4:	3101      	adds	r1, #1
 800aee6:	f7ff ff79 	bl	800addc <_Balloc>
 800aeea:	4680      	mov	r8, r0
 800aeec:	b928      	cbnz	r0, 800aefa <__multadd+0x5a>
 800aeee:	4602      	mov	r2, r0
 800aef0:	21b5      	movs	r1, #181	; 0xb5
 800aef2:	4b0c      	ldr	r3, [pc, #48]	; (800af24 <__multadd+0x84>)
 800aef4:	480c      	ldr	r0, [pc, #48]	; (800af28 <__multadd+0x88>)
 800aef6:	f000 fead 	bl	800bc54 <__assert_func>
 800aefa:	6922      	ldr	r2, [r4, #16]
 800aefc:	f104 010c 	add.w	r1, r4, #12
 800af00:	3202      	adds	r2, #2
 800af02:	0092      	lsls	r2, r2, #2
 800af04:	300c      	adds	r0, #12
 800af06:	f7ff ff5b 	bl	800adc0 <memcpy>
 800af0a:	4621      	mov	r1, r4
 800af0c:	4638      	mov	r0, r7
 800af0e:	f7ff ffa5 	bl	800ae5c <_Bfree>
 800af12:	4644      	mov	r4, r8
 800af14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af18:	3501      	adds	r5, #1
 800af1a:	615e      	str	r6, [r3, #20]
 800af1c:	6125      	str	r5, [r4, #16]
 800af1e:	4620      	mov	r0, r4
 800af20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af24:	0801d4d0 	.word	0x0801d4d0
 800af28:	0801d55c 	.word	0x0801d55c

0800af2c <__s2b>:
 800af2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af30:	4615      	mov	r5, r2
 800af32:	2209      	movs	r2, #9
 800af34:	461f      	mov	r7, r3
 800af36:	3308      	adds	r3, #8
 800af38:	460c      	mov	r4, r1
 800af3a:	fb93 f3f2 	sdiv	r3, r3, r2
 800af3e:	4606      	mov	r6, r0
 800af40:	2201      	movs	r2, #1
 800af42:	2100      	movs	r1, #0
 800af44:	429a      	cmp	r2, r3
 800af46:	db09      	blt.n	800af5c <__s2b+0x30>
 800af48:	4630      	mov	r0, r6
 800af4a:	f7ff ff47 	bl	800addc <_Balloc>
 800af4e:	b940      	cbnz	r0, 800af62 <__s2b+0x36>
 800af50:	4602      	mov	r2, r0
 800af52:	21ce      	movs	r1, #206	; 0xce
 800af54:	4b18      	ldr	r3, [pc, #96]	; (800afb8 <__s2b+0x8c>)
 800af56:	4819      	ldr	r0, [pc, #100]	; (800afbc <__s2b+0x90>)
 800af58:	f000 fe7c 	bl	800bc54 <__assert_func>
 800af5c:	0052      	lsls	r2, r2, #1
 800af5e:	3101      	adds	r1, #1
 800af60:	e7f0      	b.n	800af44 <__s2b+0x18>
 800af62:	9b08      	ldr	r3, [sp, #32]
 800af64:	2d09      	cmp	r5, #9
 800af66:	6143      	str	r3, [r0, #20]
 800af68:	f04f 0301 	mov.w	r3, #1
 800af6c:	6103      	str	r3, [r0, #16]
 800af6e:	dd16      	ble.n	800af9e <__s2b+0x72>
 800af70:	f104 0909 	add.w	r9, r4, #9
 800af74:	46c8      	mov	r8, r9
 800af76:	442c      	add	r4, r5
 800af78:	f818 3b01 	ldrb.w	r3, [r8], #1
 800af7c:	4601      	mov	r1, r0
 800af7e:	220a      	movs	r2, #10
 800af80:	4630      	mov	r0, r6
 800af82:	3b30      	subs	r3, #48	; 0x30
 800af84:	f7ff ff8c 	bl	800aea0 <__multadd>
 800af88:	45a0      	cmp	r8, r4
 800af8a:	d1f5      	bne.n	800af78 <__s2b+0x4c>
 800af8c:	f1a5 0408 	sub.w	r4, r5, #8
 800af90:	444c      	add	r4, r9
 800af92:	1b2d      	subs	r5, r5, r4
 800af94:	1963      	adds	r3, r4, r5
 800af96:	42bb      	cmp	r3, r7
 800af98:	db04      	blt.n	800afa4 <__s2b+0x78>
 800af9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af9e:	2509      	movs	r5, #9
 800afa0:	340a      	adds	r4, #10
 800afa2:	e7f6      	b.n	800af92 <__s2b+0x66>
 800afa4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800afa8:	4601      	mov	r1, r0
 800afaa:	220a      	movs	r2, #10
 800afac:	4630      	mov	r0, r6
 800afae:	3b30      	subs	r3, #48	; 0x30
 800afb0:	f7ff ff76 	bl	800aea0 <__multadd>
 800afb4:	e7ee      	b.n	800af94 <__s2b+0x68>
 800afb6:	bf00      	nop
 800afb8:	0801d4d0 	.word	0x0801d4d0
 800afbc:	0801d55c 	.word	0x0801d55c

0800afc0 <__hi0bits>:
 800afc0:	0c02      	lsrs	r2, r0, #16
 800afc2:	0412      	lsls	r2, r2, #16
 800afc4:	4603      	mov	r3, r0
 800afc6:	b9ca      	cbnz	r2, 800affc <__hi0bits+0x3c>
 800afc8:	0403      	lsls	r3, r0, #16
 800afca:	2010      	movs	r0, #16
 800afcc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800afd0:	bf04      	itt	eq
 800afd2:	021b      	lsleq	r3, r3, #8
 800afd4:	3008      	addeq	r0, #8
 800afd6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800afda:	bf04      	itt	eq
 800afdc:	011b      	lsleq	r3, r3, #4
 800afde:	3004      	addeq	r0, #4
 800afe0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800afe4:	bf04      	itt	eq
 800afe6:	009b      	lsleq	r3, r3, #2
 800afe8:	3002      	addeq	r0, #2
 800afea:	2b00      	cmp	r3, #0
 800afec:	db05      	blt.n	800affa <__hi0bits+0x3a>
 800afee:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800aff2:	f100 0001 	add.w	r0, r0, #1
 800aff6:	bf08      	it	eq
 800aff8:	2020      	moveq	r0, #32
 800affa:	4770      	bx	lr
 800affc:	2000      	movs	r0, #0
 800affe:	e7e5      	b.n	800afcc <__hi0bits+0xc>

0800b000 <__lo0bits>:
 800b000:	6803      	ldr	r3, [r0, #0]
 800b002:	4602      	mov	r2, r0
 800b004:	f013 0007 	ands.w	r0, r3, #7
 800b008:	d00b      	beq.n	800b022 <__lo0bits+0x22>
 800b00a:	07d9      	lsls	r1, r3, #31
 800b00c:	d421      	bmi.n	800b052 <__lo0bits+0x52>
 800b00e:	0798      	lsls	r0, r3, #30
 800b010:	bf49      	itett	mi
 800b012:	085b      	lsrmi	r3, r3, #1
 800b014:	089b      	lsrpl	r3, r3, #2
 800b016:	2001      	movmi	r0, #1
 800b018:	6013      	strmi	r3, [r2, #0]
 800b01a:	bf5c      	itt	pl
 800b01c:	2002      	movpl	r0, #2
 800b01e:	6013      	strpl	r3, [r2, #0]
 800b020:	4770      	bx	lr
 800b022:	b299      	uxth	r1, r3
 800b024:	b909      	cbnz	r1, 800b02a <__lo0bits+0x2a>
 800b026:	2010      	movs	r0, #16
 800b028:	0c1b      	lsrs	r3, r3, #16
 800b02a:	b2d9      	uxtb	r1, r3
 800b02c:	b909      	cbnz	r1, 800b032 <__lo0bits+0x32>
 800b02e:	3008      	adds	r0, #8
 800b030:	0a1b      	lsrs	r3, r3, #8
 800b032:	0719      	lsls	r1, r3, #28
 800b034:	bf04      	itt	eq
 800b036:	091b      	lsreq	r3, r3, #4
 800b038:	3004      	addeq	r0, #4
 800b03a:	0799      	lsls	r1, r3, #30
 800b03c:	bf04      	itt	eq
 800b03e:	089b      	lsreq	r3, r3, #2
 800b040:	3002      	addeq	r0, #2
 800b042:	07d9      	lsls	r1, r3, #31
 800b044:	d403      	bmi.n	800b04e <__lo0bits+0x4e>
 800b046:	085b      	lsrs	r3, r3, #1
 800b048:	f100 0001 	add.w	r0, r0, #1
 800b04c:	d003      	beq.n	800b056 <__lo0bits+0x56>
 800b04e:	6013      	str	r3, [r2, #0]
 800b050:	4770      	bx	lr
 800b052:	2000      	movs	r0, #0
 800b054:	4770      	bx	lr
 800b056:	2020      	movs	r0, #32
 800b058:	4770      	bx	lr
	...

0800b05c <__i2b>:
 800b05c:	b510      	push	{r4, lr}
 800b05e:	460c      	mov	r4, r1
 800b060:	2101      	movs	r1, #1
 800b062:	f7ff febb 	bl	800addc <_Balloc>
 800b066:	4602      	mov	r2, r0
 800b068:	b928      	cbnz	r0, 800b076 <__i2b+0x1a>
 800b06a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b06e:	4b04      	ldr	r3, [pc, #16]	; (800b080 <__i2b+0x24>)
 800b070:	4804      	ldr	r0, [pc, #16]	; (800b084 <__i2b+0x28>)
 800b072:	f000 fdef 	bl	800bc54 <__assert_func>
 800b076:	2301      	movs	r3, #1
 800b078:	6144      	str	r4, [r0, #20]
 800b07a:	6103      	str	r3, [r0, #16]
 800b07c:	bd10      	pop	{r4, pc}
 800b07e:	bf00      	nop
 800b080:	0801d4d0 	.word	0x0801d4d0
 800b084:	0801d55c 	.word	0x0801d55c

0800b088 <__multiply>:
 800b088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b08c:	4691      	mov	r9, r2
 800b08e:	690a      	ldr	r2, [r1, #16]
 800b090:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b094:	460c      	mov	r4, r1
 800b096:	429a      	cmp	r2, r3
 800b098:	bfbe      	ittt	lt
 800b09a:	460b      	movlt	r3, r1
 800b09c:	464c      	movlt	r4, r9
 800b09e:	4699      	movlt	r9, r3
 800b0a0:	6927      	ldr	r7, [r4, #16]
 800b0a2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b0a6:	68a3      	ldr	r3, [r4, #8]
 800b0a8:	6861      	ldr	r1, [r4, #4]
 800b0aa:	eb07 060a 	add.w	r6, r7, sl
 800b0ae:	42b3      	cmp	r3, r6
 800b0b0:	b085      	sub	sp, #20
 800b0b2:	bfb8      	it	lt
 800b0b4:	3101      	addlt	r1, #1
 800b0b6:	f7ff fe91 	bl	800addc <_Balloc>
 800b0ba:	b930      	cbnz	r0, 800b0ca <__multiply+0x42>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	f240 115d 	movw	r1, #349	; 0x15d
 800b0c2:	4b43      	ldr	r3, [pc, #268]	; (800b1d0 <__multiply+0x148>)
 800b0c4:	4843      	ldr	r0, [pc, #268]	; (800b1d4 <__multiply+0x14c>)
 800b0c6:	f000 fdc5 	bl	800bc54 <__assert_func>
 800b0ca:	f100 0514 	add.w	r5, r0, #20
 800b0ce:	462b      	mov	r3, r5
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b0d6:	4543      	cmp	r3, r8
 800b0d8:	d321      	bcc.n	800b11e <__multiply+0x96>
 800b0da:	f104 0314 	add.w	r3, r4, #20
 800b0de:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b0e2:	f109 0314 	add.w	r3, r9, #20
 800b0e6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b0ea:	9202      	str	r2, [sp, #8]
 800b0ec:	1b3a      	subs	r2, r7, r4
 800b0ee:	3a15      	subs	r2, #21
 800b0f0:	f022 0203 	bic.w	r2, r2, #3
 800b0f4:	3204      	adds	r2, #4
 800b0f6:	f104 0115 	add.w	r1, r4, #21
 800b0fa:	428f      	cmp	r7, r1
 800b0fc:	bf38      	it	cc
 800b0fe:	2204      	movcc	r2, #4
 800b100:	9201      	str	r2, [sp, #4]
 800b102:	9a02      	ldr	r2, [sp, #8]
 800b104:	9303      	str	r3, [sp, #12]
 800b106:	429a      	cmp	r2, r3
 800b108:	d80c      	bhi.n	800b124 <__multiply+0x9c>
 800b10a:	2e00      	cmp	r6, #0
 800b10c:	dd03      	ble.n	800b116 <__multiply+0x8e>
 800b10e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b112:	2b00      	cmp	r3, #0
 800b114:	d059      	beq.n	800b1ca <__multiply+0x142>
 800b116:	6106      	str	r6, [r0, #16]
 800b118:	b005      	add	sp, #20
 800b11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b11e:	f843 2b04 	str.w	r2, [r3], #4
 800b122:	e7d8      	b.n	800b0d6 <__multiply+0x4e>
 800b124:	f8b3 a000 	ldrh.w	sl, [r3]
 800b128:	f1ba 0f00 	cmp.w	sl, #0
 800b12c:	d023      	beq.n	800b176 <__multiply+0xee>
 800b12e:	46a9      	mov	r9, r5
 800b130:	f04f 0c00 	mov.w	ip, #0
 800b134:	f104 0e14 	add.w	lr, r4, #20
 800b138:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b13c:	f8d9 1000 	ldr.w	r1, [r9]
 800b140:	fa1f fb82 	uxth.w	fp, r2
 800b144:	b289      	uxth	r1, r1
 800b146:	fb0a 110b 	mla	r1, sl, fp, r1
 800b14a:	4461      	add	r1, ip
 800b14c:	f8d9 c000 	ldr.w	ip, [r9]
 800b150:	0c12      	lsrs	r2, r2, #16
 800b152:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b156:	fb0a c202 	mla	r2, sl, r2, ip
 800b15a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b15e:	b289      	uxth	r1, r1
 800b160:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b164:	4577      	cmp	r7, lr
 800b166:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b16a:	f849 1b04 	str.w	r1, [r9], #4
 800b16e:	d8e3      	bhi.n	800b138 <__multiply+0xb0>
 800b170:	9a01      	ldr	r2, [sp, #4]
 800b172:	f845 c002 	str.w	ip, [r5, r2]
 800b176:	9a03      	ldr	r2, [sp, #12]
 800b178:	3304      	adds	r3, #4
 800b17a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b17e:	f1b9 0f00 	cmp.w	r9, #0
 800b182:	d020      	beq.n	800b1c6 <__multiply+0x13e>
 800b184:	46ae      	mov	lr, r5
 800b186:	f04f 0a00 	mov.w	sl, #0
 800b18a:	6829      	ldr	r1, [r5, #0]
 800b18c:	f104 0c14 	add.w	ip, r4, #20
 800b190:	f8bc b000 	ldrh.w	fp, [ip]
 800b194:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b198:	b289      	uxth	r1, r1
 800b19a:	fb09 220b 	mla	r2, r9, fp, r2
 800b19e:	4492      	add	sl, r2
 800b1a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b1a4:	f84e 1b04 	str.w	r1, [lr], #4
 800b1a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b1ac:	f8be 1000 	ldrh.w	r1, [lr]
 800b1b0:	0c12      	lsrs	r2, r2, #16
 800b1b2:	fb09 1102 	mla	r1, r9, r2, r1
 800b1b6:	4567      	cmp	r7, ip
 800b1b8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b1bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b1c0:	d8e6      	bhi.n	800b190 <__multiply+0x108>
 800b1c2:	9a01      	ldr	r2, [sp, #4]
 800b1c4:	50a9      	str	r1, [r5, r2]
 800b1c6:	3504      	adds	r5, #4
 800b1c8:	e79b      	b.n	800b102 <__multiply+0x7a>
 800b1ca:	3e01      	subs	r6, #1
 800b1cc:	e79d      	b.n	800b10a <__multiply+0x82>
 800b1ce:	bf00      	nop
 800b1d0:	0801d4d0 	.word	0x0801d4d0
 800b1d4:	0801d55c 	.word	0x0801d55c

0800b1d8 <__pow5mult>:
 800b1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1dc:	4615      	mov	r5, r2
 800b1de:	f012 0203 	ands.w	r2, r2, #3
 800b1e2:	4606      	mov	r6, r0
 800b1e4:	460f      	mov	r7, r1
 800b1e6:	d007      	beq.n	800b1f8 <__pow5mult+0x20>
 800b1e8:	4c25      	ldr	r4, [pc, #148]	; (800b280 <__pow5mult+0xa8>)
 800b1ea:	3a01      	subs	r2, #1
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1f2:	f7ff fe55 	bl	800aea0 <__multadd>
 800b1f6:	4607      	mov	r7, r0
 800b1f8:	10ad      	asrs	r5, r5, #2
 800b1fa:	d03d      	beq.n	800b278 <__pow5mult+0xa0>
 800b1fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b1fe:	b97c      	cbnz	r4, 800b220 <__pow5mult+0x48>
 800b200:	2010      	movs	r0, #16
 800b202:	f7ff fdb5 	bl	800ad70 <malloc>
 800b206:	4602      	mov	r2, r0
 800b208:	6270      	str	r0, [r6, #36]	; 0x24
 800b20a:	b928      	cbnz	r0, 800b218 <__pow5mult+0x40>
 800b20c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b210:	4b1c      	ldr	r3, [pc, #112]	; (800b284 <__pow5mult+0xac>)
 800b212:	481d      	ldr	r0, [pc, #116]	; (800b288 <__pow5mult+0xb0>)
 800b214:	f000 fd1e 	bl	800bc54 <__assert_func>
 800b218:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b21c:	6004      	str	r4, [r0, #0]
 800b21e:	60c4      	str	r4, [r0, #12]
 800b220:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b224:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b228:	b94c      	cbnz	r4, 800b23e <__pow5mult+0x66>
 800b22a:	f240 2171 	movw	r1, #625	; 0x271
 800b22e:	4630      	mov	r0, r6
 800b230:	f7ff ff14 	bl	800b05c <__i2b>
 800b234:	2300      	movs	r3, #0
 800b236:	4604      	mov	r4, r0
 800b238:	f8c8 0008 	str.w	r0, [r8, #8]
 800b23c:	6003      	str	r3, [r0, #0]
 800b23e:	f04f 0900 	mov.w	r9, #0
 800b242:	07eb      	lsls	r3, r5, #31
 800b244:	d50a      	bpl.n	800b25c <__pow5mult+0x84>
 800b246:	4639      	mov	r1, r7
 800b248:	4622      	mov	r2, r4
 800b24a:	4630      	mov	r0, r6
 800b24c:	f7ff ff1c 	bl	800b088 <__multiply>
 800b250:	4680      	mov	r8, r0
 800b252:	4639      	mov	r1, r7
 800b254:	4630      	mov	r0, r6
 800b256:	f7ff fe01 	bl	800ae5c <_Bfree>
 800b25a:	4647      	mov	r7, r8
 800b25c:	106d      	asrs	r5, r5, #1
 800b25e:	d00b      	beq.n	800b278 <__pow5mult+0xa0>
 800b260:	6820      	ldr	r0, [r4, #0]
 800b262:	b938      	cbnz	r0, 800b274 <__pow5mult+0x9c>
 800b264:	4622      	mov	r2, r4
 800b266:	4621      	mov	r1, r4
 800b268:	4630      	mov	r0, r6
 800b26a:	f7ff ff0d 	bl	800b088 <__multiply>
 800b26e:	6020      	str	r0, [r4, #0]
 800b270:	f8c0 9000 	str.w	r9, [r0]
 800b274:	4604      	mov	r4, r0
 800b276:	e7e4      	b.n	800b242 <__pow5mult+0x6a>
 800b278:	4638      	mov	r0, r7
 800b27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b27e:	bf00      	nop
 800b280:	0801d6a8 	.word	0x0801d6a8
 800b284:	0801d45e 	.word	0x0801d45e
 800b288:	0801d55c 	.word	0x0801d55c

0800b28c <__lshift>:
 800b28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b290:	460c      	mov	r4, r1
 800b292:	4607      	mov	r7, r0
 800b294:	4691      	mov	r9, r2
 800b296:	6923      	ldr	r3, [r4, #16]
 800b298:	6849      	ldr	r1, [r1, #4]
 800b29a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b29e:	68a3      	ldr	r3, [r4, #8]
 800b2a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2a4:	f108 0601 	add.w	r6, r8, #1
 800b2a8:	42b3      	cmp	r3, r6
 800b2aa:	db0b      	blt.n	800b2c4 <__lshift+0x38>
 800b2ac:	4638      	mov	r0, r7
 800b2ae:	f7ff fd95 	bl	800addc <_Balloc>
 800b2b2:	4605      	mov	r5, r0
 800b2b4:	b948      	cbnz	r0, 800b2ca <__lshift+0x3e>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b2bc:	4b29      	ldr	r3, [pc, #164]	; (800b364 <__lshift+0xd8>)
 800b2be:	482a      	ldr	r0, [pc, #168]	; (800b368 <__lshift+0xdc>)
 800b2c0:	f000 fcc8 	bl	800bc54 <__assert_func>
 800b2c4:	3101      	adds	r1, #1
 800b2c6:	005b      	lsls	r3, r3, #1
 800b2c8:	e7ee      	b.n	800b2a8 <__lshift+0x1c>
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	f100 0114 	add.w	r1, r0, #20
 800b2d0:	f100 0210 	add.w	r2, r0, #16
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	4553      	cmp	r3, sl
 800b2d8:	db37      	blt.n	800b34a <__lshift+0xbe>
 800b2da:	6920      	ldr	r0, [r4, #16]
 800b2dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2e0:	f104 0314 	add.w	r3, r4, #20
 800b2e4:	f019 091f 	ands.w	r9, r9, #31
 800b2e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b2f0:	d02f      	beq.n	800b352 <__lshift+0xc6>
 800b2f2:	468a      	mov	sl, r1
 800b2f4:	f04f 0c00 	mov.w	ip, #0
 800b2f8:	f1c9 0e20 	rsb	lr, r9, #32
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	fa02 f209 	lsl.w	r2, r2, r9
 800b302:	ea42 020c 	orr.w	r2, r2, ip
 800b306:	f84a 2b04 	str.w	r2, [sl], #4
 800b30a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b30e:	4298      	cmp	r0, r3
 800b310:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b314:	d8f2      	bhi.n	800b2fc <__lshift+0x70>
 800b316:	1b03      	subs	r3, r0, r4
 800b318:	3b15      	subs	r3, #21
 800b31a:	f023 0303 	bic.w	r3, r3, #3
 800b31e:	3304      	adds	r3, #4
 800b320:	f104 0215 	add.w	r2, r4, #21
 800b324:	4290      	cmp	r0, r2
 800b326:	bf38      	it	cc
 800b328:	2304      	movcc	r3, #4
 800b32a:	f841 c003 	str.w	ip, [r1, r3]
 800b32e:	f1bc 0f00 	cmp.w	ip, #0
 800b332:	d001      	beq.n	800b338 <__lshift+0xac>
 800b334:	f108 0602 	add.w	r6, r8, #2
 800b338:	3e01      	subs	r6, #1
 800b33a:	4638      	mov	r0, r7
 800b33c:	4621      	mov	r1, r4
 800b33e:	612e      	str	r6, [r5, #16]
 800b340:	f7ff fd8c 	bl	800ae5c <_Bfree>
 800b344:	4628      	mov	r0, r5
 800b346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b34a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b34e:	3301      	adds	r3, #1
 800b350:	e7c1      	b.n	800b2d6 <__lshift+0x4a>
 800b352:	3904      	subs	r1, #4
 800b354:	f853 2b04 	ldr.w	r2, [r3], #4
 800b358:	4298      	cmp	r0, r3
 800b35a:	f841 2f04 	str.w	r2, [r1, #4]!
 800b35e:	d8f9      	bhi.n	800b354 <__lshift+0xc8>
 800b360:	e7ea      	b.n	800b338 <__lshift+0xac>
 800b362:	bf00      	nop
 800b364:	0801d4d0 	.word	0x0801d4d0
 800b368:	0801d55c 	.word	0x0801d55c

0800b36c <__mcmp>:
 800b36c:	4603      	mov	r3, r0
 800b36e:	690a      	ldr	r2, [r1, #16]
 800b370:	6900      	ldr	r0, [r0, #16]
 800b372:	b530      	push	{r4, r5, lr}
 800b374:	1a80      	subs	r0, r0, r2
 800b376:	d10d      	bne.n	800b394 <__mcmp+0x28>
 800b378:	3314      	adds	r3, #20
 800b37a:	3114      	adds	r1, #20
 800b37c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b380:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b384:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b388:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b38c:	4295      	cmp	r5, r2
 800b38e:	d002      	beq.n	800b396 <__mcmp+0x2a>
 800b390:	d304      	bcc.n	800b39c <__mcmp+0x30>
 800b392:	2001      	movs	r0, #1
 800b394:	bd30      	pop	{r4, r5, pc}
 800b396:	42a3      	cmp	r3, r4
 800b398:	d3f4      	bcc.n	800b384 <__mcmp+0x18>
 800b39a:	e7fb      	b.n	800b394 <__mcmp+0x28>
 800b39c:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a0:	e7f8      	b.n	800b394 <__mcmp+0x28>
	...

0800b3a4 <__mdiff>:
 800b3a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a8:	460d      	mov	r5, r1
 800b3aa:	4607      	mov	r7, r0
 800b3ac:	4611      	mov	r1, r2
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	4614      	mov	r4, r2
 800b3b2:	f7ff ffdb 	bl	800b36c <__mcmp>
 800b3b6:	1e06      	subs	r6, r0, #0
 800b3b8:	d111      	bne.n	800b3de <__mdiff+0x3a>
 800b3ba:	4631      	mov	r1, r6
 800b3bc:	4638      	mov	r0, r7
 800b3be:	f7ff fd0d 	bl	800addc <_Balloc>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	b928      	cbnz	r0, 800b3d2 <__mdiff+0x2e>
 800b3c6:	f240 2132 	movw	r1, #562	; 0x232
 800b3ca:	4b3a      	ldr	r3, [pc, #232]	; (800b4b4 <__mdiff+0x110>)
 800b3cc:	483a      	ldr	r0, [pc, #232]	; (800b4b8 <__mdiff+0x114>)
 800b3ce:	f000 fc41 	bl	800bc54 <__assert_func>
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b3d8:	4610      	mov	r0, r2
 800b3da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3de:	bfa4      	itt	ge
 800b3e0:	4623      	movge	r3, r4
 800b3e2:	462c      	movge	r4, r5
 800b3e4:	4638      	mov	r0, r7
 800b3e6:	6861      	ldr	r1, [r4, #4]
 800b3e8:	bfa6      	itte	ge
 800b3ea:	461d      	movge	r5, r3
 800b3ec:	2600      	movge	r6, #0
 800b3ee:	2601      	movlt	r6, #1
 800b3f0:	f7ff fcf4 	bl	800addc <_Balloc>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	b918      	cbnz	r0, 800b400 <__mdiff+0x5c>
 800b3f8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b3fc:	4b2d      	ldr	r3, [pc, #180]	; (800b4b4 <__mdiff+0x110>)
 800b3fe:	e7e5      	b.n	800b3cc <__mdiff+0x28>
 800b400:	f102 0814 	add.w	r8, r2, #20
 800b404:	46c2      	mov	sl, r8
 800b406:	f04f 0c00 	mov.w	ip, #0
 800b40a:	6927      	ldr	r7, [r4, #16]
 800b40c:	60c6      	str	r6, [r0, #12]
 800b40e:	692e      	ldr	r6, [r5, #16]
 800b410:	f104 0014 	add.w	r0, r4, #20
 800b414:	f105 0914 	add.w	r9, r5, #20
 800b418:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b41c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b420:	3410      	adds	r4, #16
 800b422:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b426:	f859 3b04 	ldr.w	r3, [r9], #4
 800b42a:	fa1f f18b 	uxth.w	r1, fp
 800b42e:	448c      	add	ip, r1
 800b430:	b299      	uxth	r1, r3
 800b432:	0c1b      	lsrs	r3, r3, #16
 800b434:	ebac 0101 	sub.w	r1, ip, r1
 800b438:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b43c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b440:	b289      	uxth	r1, r1
 800b442:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b446:	454e      	cmp	r6, r9
 800b448:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b44c:	f84a 3b04 	str.w	r3, [sl], #4
 800b450:	d8e7      	bhi.n	800b422 <__mdiff+0x7e>
 800b452:	1b73      	subs	r3, r6, r5
 800b454:	3b15      	subs	r3, #21
 800b456:	f023 0303 	bic.w	r3, r3, #3
 800b45a:	3515      	adds	r5, #21
 800b45c:	3304      	adds	r3, #4
 800b45e:	42ae      	cmp	r6, r5
 800b460:	bf38      	it	cc
 800b462:	2304      	movcc	r3, #4
 800b464:	4418      	add	r0, r3
 800b466:	4443      	add	r3, r8
 800b468:	461e      	mov	r6, r3
 800b46a:	4605      	mov	r5, r0
 800b46c:	4575      	cmp	r5, lr
 800b46e:	d30e      	bcc.n	800b48e <__mdiff+0xea>
 800b470:	f10e 0103 	add.w	r1, lr, #3
 800b474:	1a09      	subs	r1, r1, r0
 800b476:	f021 0103 	bic.w	r1, r1, #3
 800b47a:	3803      	subs	r0, #3
 800b47c:	4586      	cmp	lr, r0
 800b47e:	bf38      	it	cc
 800b480:	2100      	movcc	r1, #0
 800b482:	4419      	add	r1, r3
 800b484:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b488:	b18b      	cbz	r3, 800b4ae <__mdiff+0x10a>
 800b48a:	6117      	str	r7, [r2, #16]
 800b48c:	e7a4      	b.n	800b3d8 <__mdiff+0x34>
 800b48e:	f855 8b04 	ldr.w	r8, [r5], #4
 800b492:	fa1f f188 	uxth.w	r1, r8
 800b496:	4461      	add	r1, ip
 800b498:	140c      	asrs	r4, r1, #16
 800b49a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b49e:	b289      	uxth	r1, r1
 800b4a0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b4a4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b4a8:	f846 1b04 	str.w	r1, [r6], #4
 800b4ac:	e7de      	b.n	800b46c <__mdiff+0xc8>
 800b4ae:	3f01      	subs	r7, #1
 800b4b0:	e7e8      	b.n	800b484 <__mdiff+0xe0>
 800b4b2:	bf00      	nop
 800b4b4:	0801d4d0 	.word	0x0801d4d0
 800b4b8:	0801d55c 	.word	0x0801d55c

0800b4bc <__ulp>:
 800b4bc:	4b11      	ldr	r3, [pc, #68]	; (800b504 <__ulp+0x48>)
 800b4be:	400b      	ands	r3, r1
 800b4c0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	dd02      	ble.n	800b4ce <__ulp+0x12>
 800b4c8:	2000      	movs	r0, #0
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	4770      	bx	lr
 800b4ce:	425b      	negs	r3, r3
 800b4d0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b4d4:	f04f 0000 	mov.w	r0, #0
 800b4d8:	f04f 0100 	mov.w	r1, #0
 800b4dc:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b4e0:	da04      	bge.n	800b4ec <__ulp+0x30>
 800b4e2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b4e6:	fa43 f102 	asr.w	r1, r3, r2
 800b4ea:	4770      	bx	lr
 800b4ec:	f1a2 0314 	sub.w	r3, r2, #20
 800b4f0:	2b1e      	cmp	r3, #30
 800b4f2:	bfd6      	itet	le
 800b4f4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b4f8:	2301      	movgt	r3, #1
 800b4fa:	fa22 f303 	lsrle.w	r3, r2, r3
 800b4fe:	4618      	mov	r0, r3
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	7ff00000 	.word	0x7ff00000

0800b508 <__b2d>:
 800b508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b50c:	6907      	ldr	r7, [r0, #16]
 800b50e:	f100 0914 	add.w	r9, r0, #20
 800b512:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b516:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b51a:	f1a7 0804 	sub.w	r8, r7, #4
 800b51e:	4630      	mov	r0, r6
 800b520:	f7ff fd4e 	bl	800afc0 <__hi0bits>
 800b524:	f1c0 0320 	rsb	r3, r0, #32
 800b528:	280a      	cmp	r0, #10
 800b52a:	600b      	str	r3, [r1, #0]
 800b52c:	491f      	ldr	r1, [pc, #124]	; (800b5ac <__b2d+0xa4>)
 800b52e:	dc17      	bgt.n	800b560 <__b2d+0x58>
 800b530:	45c1      	cmp	r9, r8
 800b532:	bf28      	it	cs
 800b534:	2200      	movcs	r2, #0
 800b536:	f1c0 0c0b 	rsb	ip, r0, #11
 800b53a:	fa26 f30c 	lsr.w	r3, r6, ip
 800b53e:	bf38      	it	cc
 800b540:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b544:	ea43 0501 	orr.w	r5, r3, r1
 800b548:	f100 0315 	add.w	r3, r0, #21
 800b54c:	fa06 f303 	lsl.w	r3, r6, r3
 800b550:	fa22 f20c 	lsr.w	r2, r2, ip
 800b554:	ea43 0402 	orr.w	r4, r3, r2
 800b558:	4620      	mov	r0, r4
 800b55a:	4629      	mov	r1, r5
 800b55c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b560:	45c1      	cmp	r9, r8
 800b562:	bf2e      	itee	cs
 800b564:	2200      	movcs	r2, #0
 800b566:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b56a:	f1a7 0808 	subcc.w	r8, r7, #8
 800b56e:	f1b0 030b 	subs.w	r3, r0, #11
 800b572:	d016      	beq.n	800b5a2 <__b2d+0x9a>
 800b574:	f1c3 0720 	rsb	r7, r3, #32
 800b578:	fa22 f107 	lsr.w	r1, r2, r7
 800b57c:	45c8      	cmp	r8, r9
 800b57e:	fa06 f603 	lsl.w	r6, r6, r3
 800b582:	ea46 0601 	orr.w	r6, r6, r1
 800b586:	bf94      	ite	ls
 800b588:	2100      	movls	r1, #0
 800b58a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b58e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b592:	fa02 f003 	lsl.w	r0, r2, r3
 800b596:	40f9      	lsrs	r1, r7
 800b598:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b59c:	ea40 0401 	orr.w	r4, r0, r1
 800b5a0:	e7da      	b.n	800b558 <__b2d+0x50>
 800b5a2:	4614      	mov	r4, r2
 800b5a4:	ea46 0501 	orr.w	r5, r6, r1
 800b5a8:	e7d6      	b.n	800b558 <__b2d+0x50>
 800b5aa:	bf00      	nop
 800b5ac:	3ff00000 	.word	0x3ff00000

0800b5b0 <__d2b>:
 800b5b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b5b4:	2101      	movs	r1, #1
 800b5b6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b5ba:	4690      	mov	r8, r2
 800b5bc:	461d      	mov	r5, r3
 800b5be:	f7ff fc0d 	bl	800addc <_Balloc>
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	b930      	cbnz	r0, 800b5d4 <__d2b+0x24>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	f240 310a 	movw	r1, #778	; 0x30a
 800b5cc:	4b24      	ldr	r3, [pc, #144]	; (800b660 <__d2b+0xb0>)
 800b5ce:	4825      	ldr	r0, [pc, #148]	; (800b664 <__d2b+0xb4>)
 800b5d0:	f000 fb40 	bl	800bc54 <__assert_func>
 800b5d4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b5d8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b5dc:	bb2d      	cbnz	r5, 800b62a <__d2b+0x7a>
 800b5de:	9301      	str	r3, [sp, #4]
 800b5e0:	f1b8 0300 	subs.w	r3, r8, #0
 800b5e4:	d026      	beq.n	800b634 <__d2b+0x84>
 800b5e6:	4668      	mov	r0, sp
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	f7ff fd09 	bl	800b000 <__lo0bits>
 800b5ee:	9900      	ldr	r1, [sp, #0]
 800b5f0:	b1f0      	cbz	r0, 800b630 <__d2b+0x80>
 800b5f2:	9a01      	ldr	r2, [sp, #4]
 800b5f4:	f1c0 0320 	rsb	r3, r0, #32
 800b5f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b5fc:	430b      	orrs	r3, r1
 800b5fe:	40c2      	lsrs	r2, r0
 800b600:	6163      	str	r3, [r4, #20]
 800b602:	9201      	str	r2, [sp, #4]
 800b604:	9b01      	ldr	r3, [sp, #4]
 800b606:	2b00      	cmp	r3, #0
 800b608:	bf14      	ite	ne
 800b60a:	2102      	movne	r1, #2
 800b60c:	2101      	moveq	r1, #1
 800b60e:	61a3      	str	r3, [r4, #24]
 800b610:	6121      	str	r1, [r4, #16]
 800b612:	b1c5      	cbz	r5, 800b646 <__d2b+0x96>
 800b614:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b618:	4405      	add	r5, r0
 800b61a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b61e:	603d      	str	r5, [r7, #0]
 800b620:	6030      	str	r0, [r6, #0]
 800b622:	4620      	mov	r0, r4
 800b624:	b002      	add	sp, #8
 800b626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b62a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b62e:	e7d6      	b.n	800b5de <__d2b+0x2e>
 800b630:	6161      	str	r1, [r4, #20]
 800b632:	e7e7      	b.n	800b604 <__d2b+0x54>
 800b634:	a801      	add	r0, sp, #4
 800b636:	f7ff fce3 	bl	800b000 <__lo0bits>
 800b63a:	2101      	movs	r1, #1
 800b63c:	9b01      	ldr	r3, [sp, #4]
 800b63e:	6121      	str	r1, [r4, #16]
 800b640:	6163      	str	r3, [r4, #20]
 800b642:	3020      	adds	r0, #32
 800b644:	e7e5      	b.n	800b612 <__d2b+0x62>
 800b646:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b64a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b64e:	6038      	str	r0, [r7, #0]
 800b650:	6918      	ldr	r0, [r3, #16]
 800b652:	f7ff fcb5 	bl	800afc0 <__hi0bits>
 800b656:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b65a:	6031      	str	r1, [r6, #0]
 800b65c:	e7e1      	b.n	800b622 <__d2b+0x72>
 800b65e:	bf00      	nop
 800b660:	0801d4d0 	.word	0x0801d4d0
 800b664:	0801d55c 	.word	0x0801d55c

0800b668 <__ratio>:
 800b668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b66c:	4688      	mov	r8, r1
 800b66e:	4669      	mov	r1, sp
 800b670:	4681      	mov	r9, r0
 800b672:	f7ff ff49 	bl	800b508 <__b2d>
 800b676:	460f      	mov	r7, r1
 800b678:	4604      	mov	r4, r0
 800b67a:	460d      	mov	r5, r1
 800b67c:	4640      	mov	r0, r8
 800b67e:	a901      	add	r1, sp, #4
 800b680:	f7ff ff42 	bl	800b508 <__b2d>
 800b684:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b688:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b68c:	468b      	mov	fp, r1
 800b68e:	eba3 0c02 	sub.w	ip, r3, r2
 800b692:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b696:	1a9b      	subs	r3, r3, r2
 800b698:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	bfd5      	itete	le
 800b6a0:	460a      	movle	r2, r1
 800b6a2:	462a      	movgt	r2, r5
 800b6a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b6a8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b6ac:	bfd8      	it	le
 800b6ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b6b2:	465b      	mov	r3, fp
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	4639      	mov	r1, r7
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	f7fa f99d 	bl	80059f8 <__aeabi_ddiv>
 800b6be:	b003      	add	sp, #12
 800b6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6c4 <__copybits>:
 800b6c4:	3901      	subs	r1, #1
 800b6c6:	b570      	push	{r4, r5, r6, lr}
 800b6c8:	1149      	asrs	r1, r1, #5
 800b6ca:	6914      	ldr	r4, [r2, #16]
 800b6cc:	3101      	adds	r1, #1
 800b6ce:	f102 0314 	add.w	r3, r2, #20
 800b6d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b6d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b6da:	1f05      	subs	r5, r0, #4
 800b6dc:	42a3      	cmp	r3, r4
 800b6de:	d30c      	bcc.n	800b6fa <__copybits+0x36>
 800b6e0:	1aa3      	subs	r3, r4, r2
 800b6e2:	3b11      	subs	r3, #17
 800b6e4:	f023 0303 	bic.w	r3, r3, #3
 800b6e8:	3211      	adds	r2, #17
 800b6ea:	42a2      	cmp	r2, r4
 800b6ec:	bf88      	it	hi
 800b6ee:	2300      	movhi	r3, #0
 800b6f0:	4418      	add	r0, r3
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	4288      	cmp	r0, r1
 800b6f6:	d305      	bcc.n	800b704 <__copybits+0x40>
 800b6f8:	bd70      	pop	{r4, r5, r6, pc}
 800b6fa:	f853 6b04 	ldr.w	r6, [r3], #4
 800b6fe:	f845 6f04 	str.w	r6, [r5, #4]!
 800b702:	e7eb      	b.n	800b6dc <__copybits+0x18>
 800b704:	f840 3b04 	str.w	r3, [r0], #4
 800b708:	e7f4      	b.n	800b6f4 <__copybits+0x30>

0800b70a <__any_on>:
 800b70a:	f100 0214 	add.w	r2, r0, #20
 800b70e:	6900      	ldr	r0, [r0, #16]
 800b710:	114b      	asrs	r3, r1, #5
 800b712:	4298      	cmp	r0, r3
 800b714:	b510      	push	{r4, lr}
 800b716:	db11      	blt.n	800b73c <__any_on+0x32>
 800b718:	dd0a      	ble.n	800b730 <__any_on+0x26>
 800b71a:	f011 011f 	ands.w	r1, r1, #31
 800b71e:	d007      	beq.n	800b730 <__any_on+0x26>
 800b720:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b724:	fa24 f001 	lsr.w	r0, r4, r1
 800b728:	fa00 f101 	lsl.w	r1, r0, r1
 800b72c:	428c      	cmp	r4, r1
 800b72e:	d10b      	bne.n	800b748 <__any_on+0x3e>
 800b730:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b734:	4293      	cmp	r3, r2
 800b736:	d803      	bhi.n	800b740 <__any_on+0x36>
 800b738:	2000      	movs	r0, #0
 800b73a:	bd10      	pop	{r4, pc}
 800b73c:	4603      	mov	r3, r0
 800b73e:	e7f7      	b.n	800b730 <__any_on+0x26>
 800b740:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b744:	2900      	cmp	r1, #0
 800b746:	d0f5      	beq.n	800b734 <__any_on+0x2a>
 800b748:	2001      	movs	r0, #1
 800b74a:	e7f6      	b.n	800b73a <__any_on+0x30>

0800b74c <_calloc_r>:
 800b74c:	b570      	push	{r4, r5, r6, lr}
 800b74e:	fba1 5402 	umull	r5, r4, r1, r2
 800b752:	b934      	cbnz	r4, 800b762 <_calloc_r+0x16>
 800b754:	4629      	mov	r1, r5
 800b756:	f000 f875 	bl	800b844 <_malloc_r>
 800b75a:	4606      	mov	r6, r0
 800b75c:	b928      	cbnz	r0, 800b76a <_calloc_r+0x1e>
 800b75e:	4630      	mov	r0, r6
 800b760:	bd70      	pop	{r4, r5, r6, pc}
 800b762:	220c      	movs	r2, #12
 800b764:	2600      	movs	r6, #0
 800b766:	6002      	str	r2, [r0, #0]
 800b768:	e7f9      	b.n	800b75e <_calloc_r+0x12>
 800b76a:	462a      	mov	r2, r5
 800b76c:	4621      	mov	r1, r4
 800b76e:	f7fc fbf3 	bl	8007f58 <memset>
 800b772:	e7f4      	b.n	800b75e <_calloc_r+0x12>

0800b774 <_free_r>:
 800b774:	b538      	push	{r3, r4, r5, lr}
 800b776:	4605      	mov	r5, r0
 800b778:	2900      	cmp	r1, #0
 800b77a:	d040      	beq.n	800b7fe <_free_r+0x8a>
 800b77c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b780:	1f0c      	subs	r4, r1, #4
 800b782:	2b00      	cmp	r3, #0
 800b784:	bfb8      	it	lt
 800b786:	18e4      	addlt	r4, r4, r3
 800b788:	f000 faae 	bl	800bce8 <__malloc_lock>
 800b78c:	4a1c      	ldr	r2, [pc, #112]	; (800b800 <_free_r+0x8c>)
 800b78e:	6813      	ldr	r3, [r2, #0]
 800b790:	b933      	cbnz	r3, 800b7a0 <_free_r+0x2c>
 800b792:	6063      	str	r3, [r4, #4]
 800b794:	6014      	str	r4, [r2, #0]
 800b796:	4628      	mov	r0, r5
 800b798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b79c:	f000 baaa 	b.w	800bcf4 <__malloc_unlock>
 800b7a0:	42a3      	cmp	r3, r4
 800b7a2:	d908      	bls.n	800b7b6 <_free_r+0x42>
 800b7a4:	6820      	ldr	r0, [r4, #0]
 800b7a6:	1821      	adds	r1, r4, r0
 800b7a8:	428b      	cmp	r3, r1
 800b7aa:	bf01      	itttt	eq
 800b7ac:	6819      	ldreq	r1, [r3, #0]
 800b7ae:	685b      	ldreq	r3, [r3, #4]
 800b7b0:	1809      	addeq	r1, r1, r0
 800b7b2:	6021      	streq	r1, [r4, #0]
 800b7b4:	e7ed      	b.n	800b792 <_free_r+0x1e>
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	b10b      	cbz	r3, 800b7c0 <_free_r+0x4c>
 800b7bc:	42a3      	cmp	r3, r4
 800b7be:	d9fa      	bls.n	800b7b6 <_free_r+0x42>
 800b7c0:	6811      	ldr	r1, [r2, #0]
 800b7c2:	1850      	adds	r0, r2, r1
 800b7c4:	42a0      	cmp	r0, r4
 800b7c6:	d10b      	bne.n	800b7e0 <_free_r+0x6c>
 800b7c8:	6820      	ldr	r0, [r4, #0]
 800b7ca:	4401      	add	r1, r0
 800b7cc:	1850      	adds	r0, r2, r1
 800b7ce:	4283      	cmp	r3, r0
 800b7d0:	6011      	str	r1, [r2, #0]
 800b7d2:	d1e0      	bne.n	800b796 <_free_r+0x22>
 800b7d4:	6818      	ldr	r0, [r3, #0]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	4401      	add	r1, r0
 800b7da:	6011      	str	r1, [r2, #0]
 800b7dc:	6053      	str	r3, [r2, #4]
 800b7de:	e7da      	b.n	800b796 <_free_r+0x22>
 800b7e0:	d902      	bls.n	800b7e8 <_free_r+0x74>
 800b7e2:	230c      	movs	r3, #12
 800b7e4:	602b      	str	r3, [r5, #0]
 800b7e6:	e7d6      	b.n	800b796 <_free_r+0x22>
 800b7e8:	6820      	ldr	r0, [r4, #0]
 800b7ea:	1821      	adds	r1, r4, r0
 800b7ec:	428b      	cmp	r3, r1
 800b7ee:	bf01      	itttt	eq
 800b7f0:	6819      	ldreq	r1, [r3, #0]
 800b7f2:	685b      	ldreq	r3, [r3, #4]
 800b7f4:	1809      	addeq	r1, r1, r0
 800b7f6:	6021      	streq	r1, [r4, #0]
 800b7f8:	6063      	str	r3, [r4, #4]
 800b7fa:	6054      	str	r4, [r2, #4]
 800b7fc:	e7cb      	b.n	800b796 <_free_r+0x22>
 800b7fe:	bd38      	pop	{r3, r4, r5, pc}
 800b800:	200016d0 	.word	0x200016d0

0800b804 <sbrk_aligned>:
 800b804:	b570      	push	{r4, r5, r6, lr}
 800b806:	4e0e      	ldr	r6, [pc, #56]	; (800b840 <sbrk_aligned+0x3c>)
 800b808:	460c      	mov	r4, r1
 800b80a:	6831      	ldr	r1, [r6, #0]
 800b80c:	4605      	mov	r5, r0
 800b80e:	b911      	cbnz	r1, 800b816 <sbrk_aligned+0x12>
 800b810:	f000 f9ee 	bl	800bbf0 <_sbrk_r>
 800b814:	6030      	str	r0, [r6, #0]
 800b816:	4621      	mov	r1, r4
 800b818:	4628      	mov	r0, r5
 800b81a:	f000 f9e9 	bl	800bbf0 <_sbrk_r>
 800b81e:	1c43      	adds	r3, r0, #1
 800b820:	d00a      	beq.n	800b838 <sbrk_aligned+0x34>
 800b822:	1cc4      	adds	r4, r0, #3
 800b824:	f024 0403 	bic.w	r4, r4, #3
 800b828:	42a0      	cmp	r0, r4
 800b82a:	d007      	beq.n	800b83c <sbrk_aligned+0x38>
 800b82c:	1a21      	subs	r1, r4, r0
 800b82e:	4628      	mov	r0, r5
 800b830:	f000 f9de 	bl	800bbf0 <_sbrk_r>
 800b834:	3001      	adds	r0, #1
 800b836:	d101      	bne.n	800b83c <sbrk_aligned+0x38>
 800b838:	f04f 34ff 	mov.w	r4, #4294967295
 800b83c:	4620      	mov	r0, r4
 800b83e:	bd70      	pop	{r4, r5, r6, pc}
 800b840:	200016d4 	.word	0x200016d4

0800b844 <_malloc_r>:
 800b844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b848:	1ccd      	adds	r5, r1, #3
 800b84a:	f025 0503 	bic.w	r5, r5, #3
 800b84e:	3508      	adds	r5, #8
 800b850:	2d0c      	cmp	r5, #12
 800b852:	bf38      	it	cc
 800b854:	250c      	movcc	r5, #12
 800b856:	2d00      	cmp	r5, #0
 800b858:	4607      	mov	r7, r0
 800b85a:	db01      	blt.n	800b860 <_malloc_r+0x1c>
 800b85c:	42a9      	cmp	r1, r5
 800b85e:	d905      	bls.n	800b86c <_malloc_r+0x28>
 800b860:	230c      	movs	r3, #12
 800b862:	2600      	movs	r6, #0
 800b864:	603b      	str	r3, [r7, #0]
 800b866:	4630      	mov	r0, r6
 800b868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b86c:	4e2e      	ldr	r6, [pc, #184]	; (800b928 <_malloc_r+0xe4>)
 800b86e:	f000 fa3b 	bl	800bce8 <__malloc_lock>
 800b872:	6833      	ldr	r3, [r6, #0]
 800b874:	461c      	mov	r4, r3
 800b876:	bb34      	cbnz	r4, 800b8c6 <_malloc_r+0x82>
 800b878:	4629      	mov	r1, r5
 800b87a:	4638      	mov	r0, r7
 800b87c:	f7ff ffc2 	bl	800b804 <sbrk_aligned>
 800b880:	1c43      	adds	r3, r0, #1
 800b882:	4604      	mov	r4, r0
 800b884:	d14d      	bne.n	800b922 <_malloc_r+0xde>
 800b886:	6834      	ldr	r4, [r6, #0]
 800b888:	4626      	mov	r6, r4
 800b88a:	2e00      	cmp	r6, #0
 800b88c:	d140      	bne.n	800b910 <_malloc_r+0xcc>
 800b88e:	6823      	ldr	r3, [r4, #0]
 800b890:	4631      	mov	r1, r6
 800b892:	4638      	mov	r0, r7
 800b894:	eb04 0803 	add.w	r8, r4, r3
 800b898:	f000 f9aa 	bl	800bbf0 <_sbrk_r>
 800b89c:	4580      	cmp	r8, r0
 800b89e:	d13a      	bne.n	800b916 <_malloc_r+0xd2>
 800b8a0:	6821      	ldr	r1, [r4, #0]
 800b8a2:	3503      	adds	r5, #3
 800b8a4:	1a6d      	subs	r5, r5, r1
 800b8a6:	f025 0503 	bic.w	r5, r5, #3
 800b8aa:	3508      	adds	r5, #8
 800b8ac:	2d0c      	cmp	r5, #12
 800b8ae:	bf38      	it	cc
 800b8b0:	250c      	movcc	r5, #12
 800b8b2:	4638      	mov	r0, r7
 800b8b4:	4629      	mov	r1, r5
 800b8b6:	f7ff ffa5 	bl	800b804 <sbrk_aligned>
 800b8ba:	3001      	adds	r0, #1
 800b8bc:	d02b      	beq.n	800b916 <_malloc_r+0xd2>
 800b8be:	6823      	ldr	r3, [r4, #0]
 800b8c0:	442b      	add	r3, r5
 800b8c2:	6023      	str	r3, [r4, #0]
 800b8c4:	e00e      	b.n	800b8e4 <_malloc_r+0xa0>
 800b8c6:	6822      	ldr	r2, [r4, #0]
 800b8c8:	1b52      	subs	r2, r2, r5
 800b8ca:	d41e      	bmi.n	800b90a <_malloc_r+0xc6>
 800b8cc:	2a0b      	cmp	r2, #11
 800b8ce:	d916      	bls.n	800b8fe <_malloc_r+0xba>
 800b8d0:	1961      	adds	r1, r4, r5
 800b8d2:	42a3      	cmp	r3, r4
 800b8d4:	6025      	str	r5, [r4, #0]
 800b8d6:	bf18      	it	ne
 800b8d8:	6059      	strne	r1, [r3, #4]
 800b8da:	6863      	ldr	r3, [r4, #4]
 800b8dc:	bf08      	it	eq
 800b8de:	6031      	streq	r1, [r6, #0]
 800b8e0:	5162      	str	r2, [r4, r5]
 800b8e2:	604b      	str	r3, [r1, #4]
 800b8e4:	4638      	mov	r0, r7
 800b8e6:	f104 060b 	add.w	r6, r4, #11
 800b8ea:	f000 fa03 	bl	800bcf4 <__malloc_unlock>
 800b8ee:	f026 0607 	bic.w	r6, r6, #7
 800b8f2:	1d23      	adds	r3, r4, #4
 800b8f4:	1af2      	subs	r2, r6, r3
 800b8f6:	d0b6      	beq.n	800b866 <_malloc_r+0x22>
 800b8f8:	1b9b      	subs	r3, r3, r6
 800b8fa:	50a3      	str	r3, [r4, r2]
 800b8fc:	e7b3      	b.n	800b866 <_malloc_r+0x22>
 800b8fe:	6862      	ldr	r2, [r4, #4]
 800b900:	42a3      	cmp	r3, r4
 800b902:	bf0c      	ite	eq
 800b904:	6032      	streq	r2, [r6, #0]
 800b906:	605a      	strne	r2, [r3, #4]
 800b908:	e7ec      	b.n	800b8e4 <_malloc_r+0xa0>
 800b90a:	4623      	mov	r3, r4
 800b90c:	6864      	ldr	r4, [r4, #4]
 800b90e:	e7b2      	b.n	800b876 <_malloc_r+0x32>
 800b910:	4634      	mov	r4, r6
 800b912:	6876      	ldr	r6, [r6, #4]
 800b914:	e7b9      	b.n	800b88a <_malloc_r+0x46>
 800b916:	230c      	movs	r3, #12
 800b918:	4638      	mov	r0, r7
 800b91a:	603b      	str	r3, [r7, #0]
 800b91c:	f000 f9ea 	bl	800bcf4 <__malloc_unlock>
 800b920:	e7a1      	b.n	800b866 <_malloc_r+0x22>
 800b922:	6025      	str	r5, [r4, #0]
 800b924:	e7de      	b.n	800b8e4 <_malloc_r+0xa0>
 800b926:	bf00      	nop
 800b928:	200016d0 	.word	0x200016d0

0800b92c <__ssputs_r>:
 800b92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b930:	688e      	ldr	r6, [r1, #8]
 800b932:	4682      	mov	sl, r0
 800b934:	429e      	cmp	r6, r3
 800b936:	460c      	mov	r4, r1
 800b938:	4690      	mov	r8, r2
 800b93a:	461f      	mov	r7, r3
 800b93c:	d838      	bhi.n	800b9b0 <__ssputs_r+0x84>
 800b93e:	898a      	ldrh	r2, [r1, #12]
 800b940:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b944:	d032      	beq.n	800b9ac <__ssputs_r+0x80>
 800b946:	6825      	ldr	r5, [r4, #0]
 800b948:	6909      	ldr	r1, [r1, #16]
 800b94a:	3301      	adds	r3, #1
 800b94c:	eba5 0901 	sub.w	r9, r5, r1
 800b950:	6965      	ldr	r5, [r4, #20]
 800b952:	444b      	add	r3, r9
 800b954:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b958:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b95c:	106d      	asrs	r5, r5, #1
 800b95e:	429d      	cmp	r5, r3
 800b960:	bf38      	it	cc
 800b962:	461d      	movcc	r5, r3
 800b964:	0553      	lsls	r3, r2, #21
 800b966:	d531      	bpl.n	800b9cc <__ssputs_r+0xa0>
 800b968:	4629      	mov	r1, r5
 800b96a:	f7ff ff6b 	bl	800b844 <_malloc_r>
 800b96e:	4606      	mov	r6, r0
 800b970:	b950      	cbnz	r0, 800b988 <__ssputs_r+0x5c>
 800b972:	230c      	movs	r3, #12
 800b974:	f04f 30ff 	mov.w	r0, #4294967295
 800b978:	f8ca 3000 	str.w	r3, [sl]
 800b97c:	89a3      	ldrh	r3, [r4, #12]
 800b97e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b982:	81a3      	strh	r3, [r4, #12]
 800b984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b988:	464a      	mov	r2, r9
 800b98a:	6921      	ldr	r1, [r4, #16]
 800b98c:	f7ff fa18 	bl	800adc0 <memcpy>
 800b990:	89a3      	ldrh	r3, [r4, #12]
 800b992:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b99a:	81a3      	strh	r3, [r4, #12]
 800b99c:	6126      	str	r6, [r4, #16]
 800b99e:	444e      	add	r6, r9
 800b9a0:	6026      	str	r6, [r4, #0]
 800b9a2:	463e      	mov	r6, r7
 800b9a4:	6165      	str	r5, [r4, #20]
 800b9a6:	eba5 0509 	sub.w	r5, r5, r9
 800b9aa:	60a5      	str	r5, [r4, #8]
 800b9ac:	42be      	cmp	r6, r7
 800b9ae:	d900      	bls.n	800b9b2 <__ssputs_r+0x86>
 800b9b0:	463e      	mov	r6, r7
 800b9b2:	4632      	mov	r2, r6
 800b9b4:	4641      	mov	r1, r8
 800b9b6:	6820      	ldr	r0, [r4, #0]
 800b9b8:	f000 f97c 	bl	800bcb4 <memmove>
 800b9bc:	68a3      	ldr	r3, [r4, #8]
 800b9be:	2000      	movs	r0, #0
 800b9c0:	1b9b      	subs	r3, r3, r6
 800b9c2:	60a3      	str	r3, [r4, #8]
 800b9c4:	6823      	ldr	r3, [r4, #0]
 800b9c6:	4433      	add	r3, r6
 800b9c8:	6023      	str	r3, [r4, #0]
 800b9ca:	e7db      	b.n	800b984 <__ssputs_r+0x58>
 800b9cc:	462a      	mov	r2, r5
 800b9ce:	f000 f997 	bl	800bd00 <_realloc_r>
 800b9d2:	4606      	mov	r6, r0
 800b9d4:	2800      	cmp	r0, #0
 800b9d6:	d1e1      	bne.n	800b99c <__ssputs_r+0x70>
 800b9d8:	4650      	mov	r0, sl
 800b9da:	6921      	ldr	r1, [r4, #16]
 800b9dc:	f7ff feca 	bl	800b774 <_free_r>
 800b9e0:	e7c7      	b.n	800b972 <__ssputs_r+0x46>
	...

0800b9e4 <_svfiprintf_r>:
 800b9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e8:	4698      	mov	r8, r3
 800b9ea:	898b      	ldrh	r3, [r1, #12]
 800b9ec:	4607      	mov	r7, r0
 800b9ee:	061b      	lsls	r3, r3, #24
 800b9f0:	460d      	mov	r5, r1
 800b9f2:	4614      	mov	r4, r2
 800b9f4:	b09d      	sub	sp, #116	; 0x74
 800b9f6:	d50e      	bpl.n	800ba16 <_svfiprintf_r+0x32>
 800b9f8:	690b      	ldr	r3, [r1, #16]
 800b9fa:	b963      	cbnz	r3, 800ba16 <_svfiprintf_r+0x32>
 800b9fc:	2140      	movs	r1, #64	; 0x40
 800b9fe:	f7ff ff21 	bl	800b844 <_malloc_r>
 800ba02:	6028      	str	r0, [r5, #0]
 800ba04:	6128      	str	r0, [r5, #16]
 800ba06:	b920      	cbnz	r0, 800ba12 <_svfiprintf_r+0x2e>
 800ba08:	230c      	movs	r3, #12
 800ba0a:	603b      	str	r3, [r7, #0]
 800ba0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba10:	e0d1      	b.n	800bbb6 <_svfiprintf_r+0x1d2>
 800ba12:	2340      	movs	r3, #64	; 0x40
 800ba14:	616b      	str	r3, [r5, #20]
 800ba16:	2300      	movs	r3, #0
 800ba18:	9309      	str	r3, [sp, #36]	; 0x24
 800ba1a:	2320      	movs	r3, #32
 800ba1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba20:	2330      	movs	r3, #48	; 0x30
 800ba22:	f04f 0901 	mov.w	r9, #1
 800ba26:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bbd0 <_svfiprintf_r+0x1ec>
 800ba2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba32:	4623      	mov	r3, r4
 800ba34:	469a      	mov	sl, r3
 800ba36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba3a:	b10a      	cbz	r2, 800ba40 <_svfiprintf_r+0x5c>
 800ba3c:	2a25      	cmp	r2, #37	; 0x25
 800ba3e:	d1f9      	bne.n	800ba34 <_svfiprintf_r+0x50>
 800ba40:	ebba 0b04 	subs.w	fp, sl, r4
 800ba44:	d00b      	beq.n	800ba5e <_svfiprintf_r+0x7a>
 800ba46:	465b      	mov	r3, fp
 800ba48:	4622      	mov	r2, r4
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	4638      	mov	r0, r7
 800ba4e:	f7ff ff6d 	bl	800b92c <__ssputs_r>
 800ba52:	3001      	adds	r0, #1
 800ba54:	f000 80aa 	beq.w	800bbac <_svfiprintf_r+0x1c8>
 800ba58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba5a:	445a      	add	r2, fp
 800ba5c:	9209      	str	r2, [sp, #36]	; 0x24
 800ba5e:	f89a 3000 	ldrb.w	r3, [sl]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	f000 80a2 	beq.w	800bbac <_svfiprintf_r+0x1c8>
 800ba68:	2300      	movs	r3, #0
 800ba6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba72:	f10a 0a01 	add.w	sl, sl, #1
 800ba76:	9304      	str	r3, [sp, #16]
 800ba78:	9307      	str	r3, [sp, #28]
 800ba7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba7e:	931a      	str	r3, [sp, #104]	; 0x68
 800ba80:	4654      	mov	r4, sl
 800ba82:	2205      	movs	r2, #5
 800ba84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba88:	4851      	ldr	r0, [pc, #324]	; (800bbd0 <_svfiprintf_r+0x1ec>)
 800ba8a:	f7ff f98b 	bl	800ada4 <memchr>
 800ba8e:	9a04      	ldr	r2, [sp, #16]
 800ba90:	b9d8      	cbnz	r0, 800baca <_svfiprintf_r+0xe6>
 800ba92:	06d0      	lsls	r0, r2, #27
 800ba94:	bf44      	itt	mi
 800ba96:	2320      	movmi	r3, #32
 800ba98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba9c:	0711      	lsls	r1, r2, #28
 800ba9e:	bf44      	itt	mi
 800baa0:	232b      	movmi	r3, #43	; 0x2b
 800baa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baa6:	f89a 3000 	ldrb.w	r3, [sl]
 800baaa:	2b2a      	cmp	r3, #42	; 0x2a
 800baac:	d015      	beq.n	800bada <_svfiprintf_r+0xf6>
 800baae:	4654      	mov	r4, sl
 800bab0:	2000      	movs	r0, #0
 800bab2:	f04f 0c0a 	mov.w	ip, #10
 800bab6:	9a07      	ldr	r2, [sp, #28]
 800bab8:	4621      	mov	r1, r4
 800baba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800babe:	3b30      	subs	r3, #48	; 0x30
 800bac0:	2b09      	cmp	r3, #9
 800bac2:	d94e      	bls.n	800bb62 <_svfiprintf_r+0x17e>
 800bac4:	b1b0      	cbz	r0, 800baf4 <_svfiprintf_r+0x110>
 800bac6:	9207      	str	r2, [sp, #28]
 800bac8:	e014      	b.n	800baf4 <_svfiprintf_r+0x110>
 800baca:	eba0 0308 	sub.w	r3, r0, r8
 800bace:	fa09 f303 	lsl.w	r3, r9, r3
 800bad2:	4313      	orrs	r3, r2
 800bad4:	46a2      	mov	sl, r4
 800bad6:	9304      	str	r3, [sp, #16]
 800bad8:	e7d2      	b.n	800ba80 <_svfiprintf_r+0x9c>
 800bada:	9b03      	ldr	r3, [sp, #12]
 800badc:	1d19      	adds	r1, r3, #4
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	9103      	str	r1, [sp, #12]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	bfbb      	ittet	lt
 800bae6:	425b      	neglt	r3, r3
 800bae8:	f042 0202 	orrlt.w	r2, r2, #2
 800baec:	9307      	strge	r3, [sp, #28]
 800baee:	9307      	strlt	r3, [sp, #28]
 800baf0:	bfb8      	it	lt
 800baf2:	9204      	strlt	r2, [sp, #16]
 800baf4:	7823      	ldrb	r3, [r4, #0]
 800baf6:	2b2e      	cmp	r3, #46	; 0x2e
 800baf8:	d10c      	bne.n	800bb14 <_svfiprintf_r+0x130>
 800bafa:	7863      	ldrb	r3, [r4, #1]
 800bafc:	2b2a      	cmp	r3, #42	; 0x2a
 800bafe:	d135      	bne.n	800bb6c <_svfiprintf_r+0x188>
 800bb00:	9b03      	ldr	r3, [sp, #12]
 800bb02:	3402      	adds	r4, #2
 800bb04:	1d1a      	adds	r2, r3, #4
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	9203      	str	r2, [sp, #12]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	bfb8      	it	lt
 800bb0e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb12:	9305      	str	r3, [sp, #20]
 800bb14:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800bbd4 <_svfiprintf_r+0x1f0>
 800bb18:	2203      	movs	r2, #3
 800bb1a:	4650      	mov	r0, sl
 800bb1c:	7821      	ldrb	r1, [r4, #0]
 800bb1e:	f7ff f941 	bl	800ada4 <memchr>
 800bb22:	b140      	cbz	r0, 800bb36 <_svfiprintf_r+0x152>
 800bb24:	2340      	movs	r3, #64	; 0x40
 800bb26:	eba0 000a 	sub.w	r0, r0, sl
 800bb2a:	fa03 f000 	lsl.w	r0, r3, r0
 800bb2e:	9b04      	ldr	r3, [sp, #16]
 800bb30:	3401      	adds	r4, #1
 800bb32:	4303      	orrs	r3, r0
 800bb34:	9304      	str	r3, [sp, #16]
 800bb36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb3a:	2206      	movs	r2, #6
 800bb3c:	4826      	ldr	r0, [pc, #152]	; (800bbd8 <_svfiprintf_r+0x1f4>)
 800bb3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb42:	f7ff f92f 	bl	800ada4 <memchr>
 800bb46:	2800      	cmp	r0, #0
 800bb48:	d038      	beq.n	800bbbc <_svfiprintf_r+0x1d8>
 800bb4a:	4b24      	ldr	r3, [pc, #144]	; (800bbdc <_svfiprintf_r+0x1f8>)
 800bb4c:	bb1b      	cbnz	r3, 800bb96 <_svfiprintf_r+0x1b2>
 800bb4e:	9b03      	ldr	r3, [sp, #12]
 800bb50:	3307      	adds	r3, #7
 800bb52:	f023 0307 	bic.w	r3, r3, #7
 800bb56:	3308      	adds	r3, #8
 800bb58:	9303      	str	r3, [sp, #12]
 800bb5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb5c:	4433      	add	r3, r6
 800bb5e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb60:	e767      	b.n	800ba32 <_svfiprintf_r+0x4e>
 800bb62:	460c      	mov	r4, r1
 800bb64:	2001      	movs	r0, #1
 800bb66:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb6a:	e7a5      	b.n	800bab8 <_svfiprintf_r+0xd4>
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	f04f 0c0a 	mov.w	ip, #10
 800bb72:	4619      	mov	r1, r3
 800bb74:	3401      	adds	r4, #1
 800bb76:	9305      	str	r3, [sp, #20]
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb7e:	3a30      	subs	r2, #48	; 0x30
 800bb80:	2a09      	cmp	r2, #9
 800bb82:	d903      	bls.n	800bb8c <_svfiprintf_r+0x1a8>
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d0c5      	beq.n	800bb14 <_svfiprintf_r+0x130>
 800bb88:	9105      	str	r1, [sp, #20]
 800bb8a:	e7c3      	b.n	800bb14 <_svfiprintf_r+0x130>
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	2301      	movs	r3, #1
 800bb90:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb94:	e7f0      	b.n	800bb78 <_svfiprintf_r+0x194>
 800bb96:	ab03      	add	r3, sp, #12
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	462a      	mov	r2, r5
 800bb9c:	4638      	mov	r0, r7
 800bb9e:	4b10      	ldr	r3, [pc, #64]	; (800bbe0 <_svfiprintf_r+0x1fc>)
 800bba0:	a904      	add	r1, sp, #16
 800bba2:	f7fc fa7f 	bl	80080a4 <_printf_float>
 800bba6:	1c42      	adds	r2, r0, #1
 800bba8:	4606      	mov	r6, r0
 800bbaa:	d1d6      	bne.n	800bb5a <_svfiprintf_r+0x176>
 800bbac:	89ab      	ldrh	r3, [r5, #12]
 800bbae:	065b      	lsls	r3, r3, #25
 800bbb0:	f53f af2c 	bmi.w	800ba0c <_svfiprintf_r+0x28>
 800bbb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbb6:	b01d      	add	sp, #116	; 0x74
 800bbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbbc:	ab03      	add	r3, sp, #12
 800bbbe:	9300      	str	r3, [sp, #0]
 800bbc0:	462a      	mov	r2, r5
 800bbc2:	4638      	mov	r0, r7
 800bbc4:	4b06      	ldr	r3, [pc, #24]	; (800bbe0 <_svfiprintf_r+0x1fc>)
 800bbc6:	a904      	add	r1, sp, #16
 800bbc8:	f7fc fd08 	bl	80085dc <_printf_i>
 800bbcc:	e7eb      	b.n	800bba6 <_svfiprintf_r+0x1c2>
 800bbce:	bf00      	nop
 800bbd0:	0801d6b4 	.word	0x0801d6b4
 800bbd4:	0801d6ba 	.word	0x0801d6ba
 800bbd8:	0801d6be 	.word	0x0801d6be
 800bbdc:	080080a5 	.word	0x080080a5
 800bbe0:	0800b92d 	.word	0x0800b92d

0800bbe4 <nan>:
 800bbe4:	2000      	movs	r0, #0
 800bbe6:	4901      	ldr	r1, [pc, #4]	; (800bbec <nan+0x8>)
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	7ff80000 	.word	0x7ff80000

0800bbf0 <_sbrk_r>:
 800bbf0:	b538      	push	{r3, r4, r5, lr}
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	4d05      	ldr	r5, [pc, #20]	; (800bc0c <_sbrk_r+0x1c>)
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	4608      	mov	r0, r1
 800bbfa:	602b      	str	r3, [r5, #0]
 800bbfc:	f7f9 fbe6 	bl	80053cc <_sbrk>
 800bc00:	1c43      	adds	r3, r0, #1
 800bc02:	d102      	bne.n	800bc0a <_sbrk_r+0x1a>
 800bc04:	682b      	ldr	r3, [r5, #0]
 800bc06:	b103      	cbz	r3, 800bc0a <_sbrk_r+0x1a>
 800bc08:	6023      	str	r3, [r4, #0]
 800bc0a:	bd38      	pop	{r3, r4, r5, pc}
 800bc0c:	200016d8 	.word	0x200016d8

0800bc10 <strncmp>:
 800bc10:	4603      	mov	r3, r0
 800bc12:	b510      	push	{r4, lr}
 800bc14:	b172      	cbz	r2, 800bc34 <strncmp+0x24>
 800bc16:	3901      	subs	r1, #1
 800bc18:	1884      	adds	r4, r0, r2
 800bc1a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bc1e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bc22:	4290      	cmp	r0, r2
 800bc24:	d101      	bne.n	800bc2a <strncmp+0x1a>
 800bc26:	42a3      	cmp	r3, r4
 800bc28:	d101      	bne.n	800bc2e <strncmp+0x1e>
 800bc2a:	1a80      	subs	r0, r0, r2
 800bc2c:	bd10      	pop	{r4, pc}
 800bc2e:	2800      	cmp	r0, #0
 800bc30:	d1f3      	bne.n	800bc1a <strncmp+0xa>
 800bc32:	e7fa      	b.n	800bc2a <strncmp+0x1a>
 800bc34:	4610      	mov	r0, r2
 800bc36:	e7f9      	b.n	800bc2c <strncmp+0x1c>

0800bc38 <__ascii_wctomb>:
 800bc38:	4603      	mov	r3, r0
 800bc3a:	4608      	mov	r0, r1
 800bc3c:	b141      	cbz	r1, 800bc50 <__ascii_wctomb+0x18>
 800bc3e:	2aff      	cmp	r2, #255	; 0xff
 800bc40:	d904      	bls.n	800bc4c <__ascii_wctomb+0x14>
 800bc42:	228a      	movs	r2, #138	; 0x8a
 800bc44:	f04f 30ff 	mov.w	r0, #4294967295
 800bc48:	601a      	str	r2, [r3, #0]
 800bc4a:	4770      	bx	lr
 800bc4c:	2001      	movs	r0, #1
 800bc4e:	700a      	strb	r2, [r1, #0]
 800bc50:	4770      	bx	lr
	...

0800bc54 <__assert_func>:
 800bc54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc56:	4614      	mov	r4, r2
 800bc58:	461a      	mov	r2, r3
 800bc5a:	4b09      	ldr	r3, [pc, #36]	; (800bc80 <__assert_func+0x2c>)
 800bc5c:	4605      	mov	r5, r0
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	68d8      	ldr	r0, [r3, #12]
 800bc62:	b14c      	cbz	r4, 800bc78 <__assert_func+0x24>
 800bc64:	4b07      	ldr	r3, [pc, #28]	; (800bc84 <__assert_func+0x30>)
 800bc66:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc6a:	9100      	str	r1, [sp, #0]
 800bc6c:	462b      	mov	r3, r5
 800bc6e:	4906      	ldr	r1, [pc, #24]	; (800bc88 <__assert_func+0x34>)
 800bc70:	f000 f80e 	bl	800bc90 <fiprintf>
 800bc74:	f000 fa8a 	bl	800c18c <abort>
 800bc78:	4b04      	ldr	r3, [pc, #16]	; (800bc8c <__assert_func+0x38>)
 800bc7a:	461c      	mov	r4, r3
 800bc7c:	e7f3      	b.n	800bc66 <__assert_func+0x12>
 800bc7e:	bf00      	nop
 800bc80:	20000010 	.word	0x20000010
 800bc84:	0801d6c5 	.word	0x0801d6c5
 800bc88:	0801d6d2 	.word	0x0801d6d2
 800bc8c:	0801d700 	.word	0x0801d700

0800bc90 <fiprintf>:
 800bc90:	b40e      	push	{r1, r2, r3}
 800bc92:	b503      	push	{r0, r1, lr}
 800bc94:	4601      	mov	r1, r0
 800bc96:	ab03      	add	r3, sp, #12
 800bc98:	4805      	ldr	r0, [pc, #20]	; (800bcb0 <fiprintf+0x20>)
 800bc9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc9e:	6800      	ldr	r0, [r0, #0]
 800bca0:	9301      	str	r3, [sp, #4]
 800bca2:	f000 f883 	bl	800bdac <_vfiprintf_r>
 800bca6:	b002      	add	sp, #8
 800bca8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcac:	b003      	add	sp, #12
 800bcae:	4770      	bx	lr
 800bcb0:	20000010 	.word	0x20000010

0800bcb4 <memmove>:
 800bcb4:	4288      	cmp	r0, r1
 800bcb6:	b510      	push	{r4, lr}
 800bcb8:	eb01 0402 	add.w	r4, r1, r2
 800bcbc:	d902      	bls.n	800bcc4 <memmove+0x10>
 800bcbe:	4284      	cmp	r4, r0
 800bcc0:	4623      	mov	r3, r4
 800bcc2:	d807      	bhi.n	800bcd4 <memmove+0x20>
 800bcc4:	1e43      	subs	r3, r0, #1
 800bcc6:	42a1      	cmp	r1, r4
 800bcc8:	d008      	beq.n	800bcdc <memmove+0x28>
 800bcca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bcd2:	e7f8      	b.n	800bcc6 <memmove+0x12>
 800bcd4:	4601      	mov	r1, r0
 800bcd6:	4402      	add	r2, r0
 800bcd8:	428a      	cmp	r2, r1
 800bcda:	d100      	bne.n	800bcde <memmove+0x2a>
 800bcdc:	bd10      	pop	{r4, pc}
 800bcde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bce2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bce6:	e7f7      	b.n	800bcd8 <memmove+0x24>

0800bce8 <__malloc_lock>:
 800bce8:	4801      	ldr	r0, [pc, #4]	; (800bcf0 <__malloc_lock+0x8>)
 800bcea:	f000 bc0b 	b.w	800c504 <__retarget_lock_acquire_recursive>
 800bcee:	bf00      	nop
 800bcf0:	200016dc 	.word	0x200016dc

0800bcf4 <__malloc_unlock>:
 800bcf4:	4801      	ldr	r0, [pc, #4]	; (800bcfc <__malloc_unlock+0x8>)
 800bcf6:	f000 bc06 	b.w	800c506 <__retarget_lock_release_recursive>
 800bcfa:	bf00      	nop
 800bcfc:	200016dc 	.word	0x200016dc

0800bd00 <_realloc_r>:
 800bd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd04:	4680      	mov	r8, r0
 800bd06:	4614      	mov	r4, r2
 800bd08:	460e      	mov	r6, r1
 800bd0a:	b921      	cbnz	r1, 800bd16 <_realloc_r+0x16>
 800bd0c:	4611      	mov	r1, r2
 800bd0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd12:	f7ff bd97 	b.w	800b844 <_malloc_r>
 800bd16:	b92a      	cbnz	r2, 800bd24 <_realloc_r+0x24>
 800bd18:	f7ff fd2c 	bl	800b774 <_free_r>
 800bd1c:	4625      	mov	r5, r4
 800bd1e:	4628      	mov	r0, r5
 800bd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd24:	f000 fc56 	bl	800c5d4 <_malloc_usable_size_r>
 800bd28:	4284      	cmp	r4, r0
 800bd2a:	4607      	mov	r7, r0
 800bd2c:	d802      	bhi.n	800bd34 <_realloc_r+0x34>
 800bd2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd32:	d812      	bhi.n	800bd5a <_realloc_r+0x5a>
 800bd34:	4621      	mov	r1, r4
 800bd36:	4640      	mov	r0, r8
 800bd38:	f7ff fd84 	bl	800b844 <_malloc_r>
 800bd3c:	4605      	mov	r5, r0
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	d0ed      	beq.n	800bd1e <_realloc_r+0x1e>
 800bd42:	42bc      	cmp	r4, r7
 800bd44:	4622      	mov	r2, r4
 800bd46:	4631      	mov	r1, r6
 800bd48:	bf28      	it	cs
 800bd4a:	463a      	movcs	r2, r7
 800bd4c:	f7ff f838 	bl	800adc0 <memcpy>
 800bd50:	4631      	mov	r1, r6
 800bd52:	4640      	mov	r0, r8
 800bd54:	f7ff fd0e 	bl	800b774 <_free_r>
 800bd58:	e7e1      	b.n	800bd1e <_realloc_r+0x1e>
 800bd5a:	4635      	mov	r5, r6
 800bd5c:	e7df      	b.n	800bd1e <_realloc_r+0x1e>

0800bd5e <__sfputc_r>:
 800bd5e:	6893      	ldr	r3, [r2, #8]
 800bd60:	b410      	push	{r4}
 800bd62:	3b01      	subs	r3, #1
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	6093      	str	r3, [r2, #8]
 800bd68:	da07      	bge.n	800bd7a <__sfputc_r+0x1c>
 800bd6a:	6994      	ldr	r4, [r2, #24]
 800bd6c:	42a3      	cmp	r3, r4
 800bd6e:	db01      	blt.n	800bd74 <__sfputc_r+0x16>
 800bd70:	290a      	cmp	r1, #10
 800bd72:	d102      	bne.n	800bd7a <__sfputc_r+0x1c>
 800bd74:	bc10      	pop	{r4}
 800bd76:	f000 b949 	b.w	800c00c <__swbuf_r>
 800bd7a:	6813      	ldr	r3, [r2, #0]
 800bd7c:	1c58      	adds	r0, r3, #1
 800bd7e:	6010      	str	r0, [r2, #0]
 800bd80:	7019      	strb	r1, [r3, #0]
 800bd82:	4608      	mov	r0, r1
 800bd84:	bc10      	pop	{r4}
 800bd86:	4770      	bx	lr

0800bd88 <__sfputs_r>:
 800bd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd8a:	4606      	mov	r6, r0
 800bd8c:	460f      	mov	r7, r1
 800bd8e:	4614      	mov	r4, r2
 800bd90:	18d5      	adds	r5, r2, r3
 800bd92:	42ac      	cmp	r4, r5
 800bd94:	d101      	bne.n	800bd9a <__sfputs_r+0x12>
 800bd96:	2000      	movs	r0, #0
 800bd98:	e007      	b.n	800bdaa <__sfputs_r+0x22>
 800bd9a:	463a      	mov	r2, r7
 800bd9c:	4630      	mov	r0, r6
 800bd9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bda2:	f7ff ffdc 	bl	800bd5e <__sfputc_r>
 800bda6:	1c43      	adds	r3, r0, #1
 800bda8:	d1f3      	bne.n	800bd92 <__sfputs_r+0xa>
 800bdaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bdac <_vfiprintf_r>:
 800bdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb0:	460d      	mov	r5, r1
 800bdb2:	4614      	mov	r4, r2
 800bdb4:	4698      	mov	r8, r3
 800bdb6:	4606      	mov	r6, r0
 800bdb8:	b09d      	sub	sp, #116	; 0x74
 800bdba:	b118      	cbz	r0, 800bdc4 <_vfiprintf_r+0x18>
 800bdbc:	6983      	ldr	r3, [r0, #24]
 800bdbe:	b90b      	cbnz	r3, 800bdc4 <_vfiprintf_r+0x18>
 800bdc0:	f000 fb02 	bl	800c3c8 <__sinit>
 800bdc4:	4b89      	ldr	r3, [pc, #548]	; (800bfec <_vfiprintf_r+0x240>)
 800bdc6:	429d      	cmp	r5, r3
 800bdc8:	d11b      	bne.n	800be02 <_vfiprintf_r+0x56>
 800bdca:	6875      	ldr	r5, [r6, #4]
 800bdcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdce:	07d9      	lsls	r1, r3, #31
 800bdd0:	d405      	bmi.n	800bdde <_vfiprintf_r+0x32>
 800bdd2:	89ab      	ldrh	r3, [r5, #12]
 800bdd4:	059a      	lsls	r2, r3, #22
 800bdd6:	d402      	bmi.n	800bdde <_vfiprintf_r+0x32>
 800bdd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdda:	f000 fb93 	bl	800c504 <__retarget_lock_acquire_recursive>
 800bdde:	89ab      	ldrh	r3, [r5, #12]
 800bde0:	071b      	lsls	r3, r3, #28
 800bde2:	d501      	bpl.n	800bde8 <_vfiprintf_r+0x3c>
 800bde4:	692b      	ldr	r3, [r5, #16]
 800bde6:	b9eb      	cbnz	r3, 800be24 <_vfiprintf_r+0x78>
 800bde8:	4629      	mov	r1, r5
 800bdea:	4630      	mov	r0, r6
 800bdec:	f000 f960 	bl	800c0b0 <__swsetup_r>
 800bdf0:	b1c0      	cbz	r0, 800be24 <_vfiprintf_r+0x78>
 800bdf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdf4:	07dc      	lsls	r4, r3, #31
 800bdf6:	d50e      	bpl.n	800be16 <_vfiprintf_r+0x6a>
 800bdf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdfc:	b01d      	add	sp, #116	; 0x74
 800bdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be02:	4b7b      	ldr	r3, [pc, #492]	; (800bff0 <_vfiprintf_r+0x244>)
 800be04:	429d      	cmp	r5, r3
 800be06:	d101      	bne.n	800be0c <_vfiprintf_r+0x60>
 800be08:	68b5      	ldr	r5, [r6, #8]
 800be0a:	e7df      	b.n	800bdcc <_vfiprintf_r+0x20>
 800be0c:	4b79      	ldr	r3, [pc, #484]	; (800bff4 <_vfiprintf_r+0x248>)
 800be0e:	429d      	cmp	r5, r3
 800be10:	bf08      	it	eq
 800be12:	68f5      	ldreq	r5, [r6, #12]
 800be14:	e7da      	b.n	800bdcc <_vfiprintf_r+0x20>
 800be16:	89ab      	ldrh	r3, [r5, #12]
 800be18:	0598      	lsls	r0, r3, #22
 800be1a:	d4ed      	bmi.n	800bdf8 <_vfiprintf_r+0x4c>
 800be1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be1e:	f000 fb72 	bl	800c506 <__retarget_lock_release_recursive>
 800be22:	e7e9      	b.n	800bdf8 <_vfiprintf_r+0x4c>
 800be24:	2300      	movs	r3, #0
 800be26:	9309      	str	r3, [sp, #36]	; 0x24
 800be28:	2320      	movs	r3, #32
 800be2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be2e:	2330      	movs	r3, #48	; 0x30
 800be30:	f04f 0901 	mov.w	r9, #1
 800be34:	f8cd 800c 	str.w	r8, [sp, #12]
 800be38:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bff8 <_vfiprintf_r+0x24c>
 800be3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be40:	4623      	mov	r3, r4
 800be42:	469a      	mov	sl, r3
 800be44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be48:	b10a      	cbz	r2, 800be4e <_vfiprintf_r+0xa2>
 800be4a:	2a25      	cmp	r2, #37	; 0x25
 800be4c:	d1f9      	bne.n	800be42 <_vfiprintf_r+0x96>
 800be4e:	ebba 0b04 	subs.w	fp, sl, r4
 800be52:	d00b      	beq.n	800be6c <_vfiprintf_r+0xc0>
 800be54:	465b      	mov	r3, fp
 800be56:	4622      	mov	r2, r4
 800be58:	4629      	mov	r1, r5
 800be5a:	4630      	mov	r0, r6
 800be5c:	f7ff ff94 	bl	800bd88 <__sfputs_r>
 800be60:	3001      	adds	r0, #1
 800be62:	f000 80aa 	beq.w	800bfba <_vfiprintf_r+0x20e>
 800be66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be68:	445a      	add	r2, fp
 800be6a:	9209      	str	r2, [sp, #36]	; 0x24
 800be6c:	f89a 3000 	ldrb.w	r3, [sl]
 800be70:	2b00      	cmp	r3, #0
 800be72:	f000 80a2 	beq.w	800bfba <_vfiprintf_r+0x20e>
 800be76:	2300      	movs	r3, #0
 800be78:	f04f 32ff 	mov.w	r2, #4294967295
 800be7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be80:	f10a 0a01 	add.w	sl, sl, #1
 800be84:	9304      	str	r3, [sp, #16]
 800be86:	9307      	str	r3, [sp, #28]
 800be88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be8c:	931a      	str	r3, [sp, #104]	; 0x68
 800be8e:	4654      	mov	r4, sl
 800be90:	2205      	movs	r2, #5
 800be92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be96:	4858      	ldr	r0, [pc, #352]	; (800bff8 <_vfiprintf_r+0x24c>)
 800be98:	f7fe ff84 	bl	800ada4 <memchr>
 800be9c:	9a04      	ldr	r2, [sp, #16]
 800be9e:	b9d8      	cbnz	r0, 800bed8 <_vfiprintf_r+0x12c>
 800bea0:	06d1      	lsls	r1, r2, #27
 800bea2:	bf44      	itt	mi
 800bea4:	2320      	movmi	r3, #32
 800bea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800beaa:	0713      	lsls	r3, r2, #28
 800beac:	bf44      	itt	mi
 800beae:	232b      	movmi	r3, #43	; 0x2b
 800beb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800beb4:	f89a 3000 	ldrb.w	r3, [sl]
 800beb8:	2b2a      	cmp	r3, #42	; 0x2a
 800beba:	d015      	beq.n	800bee8 <_vfiprintf_r+0x13c>
 800bebc:	4654      	mov	r4, sl
 800bebe:	2000      	movs	r0, #0
 800bec0:	f04f 0c0a 	mov.w	ip, #10
 800bec4:	9a07      	ldr	r2, [sp, #28]
 800bec6:	4621      	mov	r1, r4
 800bec8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800becc:	3b30      	subs	r3, #48	; 0x30
 800bece:	2b09      	cmp	r3, #9
 800bed0:	d94e      	bls.n	800bf70 <_vfiprintf_r+0x1c4>
 800bed2:	b1b0      	cbz	r0, 800bf02 <_vfiprintf_r+0x156>
 800bed4:	9207      	str	r2, [sp, #28]
 800bed6:	e014      	b.n	800bf02 <_vfiprintf_r+0x156>
 800bed8:	eba0 0308 	sub.w	r3, r0, r8
 800bedc:	fa09 f303 	lsl.w	r3, r9, r3
 800bee0:	4313      	orrs	r3, r2
 800bee2:	46a2      	mov	sl, r4
 800bee4:	9304      	str	r3, [sp, #16]
 800bee6:	e7d2      	b.n	800be8e <_vfiprintf_r+0xe2>
 800bee8:	9b03      	ldr	r3, [sp, #12]
 800beea:	1d19      	adds	r1, r3, #4
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	9103      	str	r1, [sp, #12]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	bfbb      	ittet	lt
 800bef4:	425b      	neglt	r3, r3
 800bef6:	f042 0202 	orrlt.w	r2, r2, #2
 800befa:	9307      	strge	r3, [sp, #28]
 800befc:	9307      	strlt	r3, [sp, #28]
 800befe:	bfb8      	it	lt
 800bf00:	9204      	strlt	r2, [sp, #16]
 800bf02:	7823      	ldrb	r3, [r4, #0]
 800bf04:	2b2e      	cmp	r3, #46	; 0x2e
 800bf06:	d10c      	bne.n	800bf22 <_vfiprintf_r+0x176>
 800bf08:	7863      	ldrb	r3, [r4, #1]
 800bf0a:	2b2a      	cmp	r3, #42	; 0x2a
 800bf0c:	d135      	bne.n	800bf7a <_vfiprintf_r+0x1ce>
 800bf0e:	9b03      	ldr	r3, [sp, #12]
 800bf10:	3402      	adds	r4, #2
 800bf12:	1d1a      	adds	r2, r3, #4
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	9203      	str	r2, [sp, #12]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	bfb8      	it	lt
 800bf1c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf20:	9305      	str	r3, [sp, #20]
 800bf22:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800bffc <_vfiprintf_r+0x250>
 800bf26:	2203      	movs	r2, #3
 800bf28:	4650      	mov	r0, sl
 800bf2a:	7821      	ldrb	r1, [r4, #0]
 800bf2c:	f7fe ff3a 	bl	800ada4 <memchr>
 800bf30:	b140      	cbz	r0, 800bf44 <_vfiprintf_r+0x198>
 800bf32:	2340      	movs	r3, #64	; 0x40
 800bf34:	eba0 000a 	sub.w	r0, r0, sl
 800bf38:	fa03 f000 	lsl.w	r0, r3, r0
 800bf3c:	9b04      	ldr	r3, [sp, #16]
 800bf3e:	3401      	adds	r4, #1
 800bf40:	4303      	orrs	r3, r0
 800bf42:	9304      	str	r3, [sp, #16]
 800bf44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf48:	2206      	movs	r2, #6
 800bf4a:	482d      	ldr	r0, [pc, #180]	; (800c000 <_vfiprintf_r+0x254>)
 800bf4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf50:	f7fe ff28 	bl	800ada4 <memchr>
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d03f      	beq.n	800bfd8 <_vfiprintf_r+0x22c>
 800bf58:	4b2a      	ldr	r3, [pc, #168]	; (800c004 <_vfiprintf_r+0x258>)
 800bf5a:	bb1b      	cbnz	r3, 800bfa4 <_vfiprintf_r+0x1f8>
 800bf5c:	9b03      	ldr	r3, [sp, #12]
 800bf5e:	3307      	adds	r3, #7
 800bf60:	f023 0307 	bic.w	r3, r3, #7
 800bf64:	3308      	adds	r3, #8
 800bf66:	9303      	str	r3, [sp, #12]
 800bf68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf6a:	443b      	add	r3, r7
 800bf6c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf6e:	e767      	b.n	800be40 <_vfiprintf_r+0x94>
 800bf70:	460c      	mov	r4, r1
 800bf72:	2001      	movs	r0, #1
 800bf74:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf78:	e7a5      	b.n	800bec6 <_vfiprintf_r+0x11a>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	f04f 0c0a 	mov.w	ip, #10
 800bf80:	4619      	mov	r1, r3
 800bf82:	3401      	adds	r4, #1
 800bf84:	9305      	str	r3, [sp, #20]
 800bf86:	4620      	mov	r0, r4
 800bf88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf8c:	3a30      	subs	r2, #48	; 0x30
 800bf8e:	2a09      	cmp	r2, #9
 800bf90:	d903      	bls.n	800bf9a <_vfiprintf_r+0x1ee>
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d0c5      	beq.n	800bf22 <_vfiprintf_r+0x176>
 800bf96:	9105      	str	r1, [sp, #20]
 800bf98:	e7c3      	b.n	800bf22 <_vfiprintf_r+0x176>
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfa2:	e7f0      	b.n	800bf86 <_vfiprintf_r+0x1da>
 800bfa4:	ab03      	add	r3, sp, #12
 800bfa6:	9300      	str	r3, [sp, #0]
 800bfa8:	462a      	mov	r2, r5
 800bfaa:	4630      	mov	r0, r6
 800bfac:	4b16      	ldr	r3, [pc, #88]	; (800c008 <_vfiprintf_r+0x25c>)
 800bfae:	a904      	add	r1, sp, #16
 800bfb0:	f7fc f878 	bl	80080a4 <_printf_float>
 800bfb4:	4607      	mov	r7, r0
 800bfb6:	1c78      	adds	r0, r7, #1
 800bfb8:	d1d6      	bne.n	800bf68 <_vfiprintf_r+0x1bc>
 800bfba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfbc:	07d9      	lsls	r1, r3, #31
 800bfbe:	d405      	bmi.n	800bfcc <_vfiprintf_r+0x220>
 800bfc0:	89ab      	ldrh	r3, [r5, #12]
 800bfc2:	059a      	lsls	r2, r3, #22
 800bfc4:	d402      	bmi.n	800bfcc <_vfiprintf_r+0x220>
 800bfc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfc8:	f000 fa9d 	bl	800c506 <__retarget_lock_release_recursive>
 800bfcc:	89ab      	ldrh	r3, [r5, #12]
 800bfce:	065b      	lsls	r3, r3, #25
 800bfd0:	f53f af12 	bmi.w	800bdf8 <_vfiprintf_r+0x4c>
 800bfd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfd6:	e711      	b.n	800bdfc <_vfiprintf_r+0x50>
 800bfd8:	ab03      	add	r3, sp, #12
 800bfda:	9300      	str	r3, [sp, #0]
 800bfdc:	462a      	mov	r2, r5
 800bfde:	4630      	mov	r0, r6
 800bfe0:	4b09      	ldr	r3, [pc, #36]	; (800c008 <_vfiprintf_r+0x25c>)
 800bfe2:	a904      	add	r1, sp, #16
 800bfe4:	f7fc fafa 	bl	80085dc <_printf_i>
 800bfe8:	e7e4      	b.n	800bfb4 <_vfiprintf_r+0x208>
 800bfea:	bf00      	nop
 800bfec:	0801d724 	.word	0x0801d724
 800bff0:	0801d744 	.word	0x0801d744
 800bff4:	0801d704 	.word	0x0801d704
 800bff8:	0801d6b4 	.word	0x0801d6b4
 800bffc:	0801d6ba 	.word	0x0801d6ba
 800c000:	0801d6be 	.word	0x0801d6be
 800c004:	080080a5 	.word	0x080080a5
 800c008:	0800bd89 	.word	0x0800bd89

0800c00c <__swbuf_r>:
 800c00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c00e:	460e      	mov	r6, r1
 800c010:	4614      	mov	r4, r2
 800c012:	4605      	mov	r5, r0
 800c014:	b118      	cbz	r0, 800c01e <__swbuf_r+0x12>
 800c016:	6983      	ldr	r3, [r0, #24]
 800c018:	b90b      	cbnz	r3, 800c01e <__swbuf_r+0x12>
 800c01a:	f000 f9d5 	bl	800c3c8 <__sinit>
 800c01e:	4b21      	ldr	r3, [pc, #132]	; (800c0a4 <__swbuf_r+0x98>)
 800c020:	429c      	cmp	r4, r3
 800c022:	d12b      	bne.n	800c07c <__swbuf_r+0x70>
 800c024:	686c      	ldr	r4, [r5, #4]
 800c026:	69a3      	ldr	r3, [r4, #24]
 800c028:	60a3      	str	r3, [r4, #8]
 800c02a:	89a3      	ldrh	r3, [r4, #12]
 800c02c:	071a      	lsls	r2, r3, #28
 800c02e:	d52f      	bpl.n	800c090 <__swbuf_r+0x84>
 800c030:	6923      	ldr	r3, [r4, #16]
 800c032:	b36b      	cbz	r3, 800c090 <__swbuf_r+0x84>
 800c034:	6923      	ldr	r3, [r4, #16]
 800c036:	6820      	ldr	r0, [r4, #0]
 800c038:	b2f6      	uxtb	r6, r6
 800c03a:	1ac0      	subs	r0, r0, r3
 800c03c:	6963      	ldr	r3, [r4, #20]
 800c03e:	4637      	mov	r7, r6
 800c040:	4283      	cmp	r3, r0
 800c042:	dc04      	bgt.n	800c04e <__swbuf_r+0x42>
 800c044:	4621      	mov	r1, r4
 800c046:	4628      	mov	r0, r5
 800c048:	f000 f92a 	bl	800c2a0 <_fflush_r>
 800c04c:	bb30      	cbnz	r0, 800c09c <__swbuf_r+0x90>
 800c04e:	68a3      	ldr	r3, [r4, #8]
 800c050:	3001      	adds	r0, #1
 800c052:	3b01      	subs	r3, #1
 800c054:	60a3      	str	r3, [r4, #8]
 800c056:	6823      	ldr	r3, [r4, #0]
 800c058:	1c5a      	adds	r2, r3, #1
 800c05a:	6022      	str	r2, [r4, #0]
 800c05c:	701e      	strb	r6, [r3, #0]
 800c05e:	6963      	ldr	r3, [r4, #20]
 800c060:	4283      	cmp	r3, r0
 800c062:	d004      	beq.n	800c06e <__swbuf_r+0x62>
 800c064:	89a3      	ldrh	r3, [r4, #12]
 800c066:	07db      	lsls	r3, r3, #31
 800c068:	d506      	bpl.n	800c078 <__swbuf_r+0x6c>
 800c06a:	2e0a      	cmp	r6, #10
 800c06c:	d104      	bne.n	800c078 <__swbuf_r+0x6c>
 800c06e:	4621      	mov	r1, r4
 800c070:	4628      	mov	r0, r5
 800c072:	f000 f915 	bl	800c2a0 <_fflush_r>
 800c076:	b988      	cbnz	r0, 800c09c <__swbuf_r+0x90>
 800c078:	4638      	mov	r0, r7
 800c07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c07c:	4b0a      	ldr	r3, [pc, #40]	; (800c0a8 <__swbuf_r+0x9c>)
 800c07e:	429c      	cmp	r4, r3
 800c080:	d101      	bne.n	800c086 <__swbuf_r+0x7a>
 800c082:	68ac      	ldr	r4, [r5, #8]
 800c084:	e7cf      	b.n	800c026 <__swbuf_r+0x1a>
 800c086:	4b09      	ldr	r3, [pc, #36]	; (800c0ac <__swbuf_r+0xa0>)
 800c088:	429c      	cmp	r4, r3
 800c08a:	bf08      	it	eq
 800c08c:	68ec      	ldreq	r4, [r5, #12]
 800c08e:	e7ca      	b.n	800c026 <__swbuf_r+0x1a>
 800c090:	4621      	mov	r1, r4
 800c092:	4628      	mov	r0, r5
 800c094:	f000 f80c 	bl	800c0b0 <__swsetup_r>
 800c098:	2800      	cmp	r0, #0
 800c09a:	d0cb      	beq.n	800c034 <__swbuf_r+0x28>
 800c09c:	f04f 37ff 	mov.w	r7, #4294967295
 800c0a0:	e7ea      	b.n	800c078 <__swbuf_r+0x6c>
 800c0a2:	bf00      	nop
 800c0a4:	0801d724 	.word	0x0801d724
 800c0a8:	0801d744 	.word	0x0801d744
 800c0ac:	0801d704 	.word	0x0801d704

0800c0b0 <__swsetup_r>:
 800c0b0:	4b32      	ldr	r3, [pc, #200]	; (800c17c <__swsetup_r+0xcc>)
 800c0b2:	b570      	push	{r4, r5, r6, lr}
 800c0b4:	681d      	ldr	r5, [r3, #0]
 800c0b6:	4606      	mov	r6, r0
 800c0b8:	460c      	mov	r4, r1
 800c0ba:	b125      	cbz	r5, 800c0c6 <__swsetup_r+0x16>
 800c0bc:	69ab      	ldr	r3, [r5, #24]
 800c0be:	b913      	cbnz	r3, 800c0c6 <__swsetup_r+0x16>
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	f000 f981 	bl	800c3c8 <__sinit>
 800c0c6:	4b2e      	ldr	r3, [pc, #184]	; (800c180 <__swsetup_r+0xd0>)
 800c0c8:	429c      	cmp	r4, r3
 800c0ca:	d10f      	bne.n	800c0ec <__swsetup_r+0x3c>
 800c0cc:	686c      	ldr	r4, [r5, #4]
 800c0ce:	89a3      	ldrh	r3, [r4, #12]
 800c0d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0d4:	0719      	lsls	r1, r3, #28
 800c0d6:	d42c      	bmi.n	800c132 <__swsetup_r+0x82>
 800c0d8:	06dd      	lsls	r5, r3, #27
 800c0da:	d411      	bmi.n	800c100 <__swsetup_r+0x50>
 800c0dc:	2309      	movs	r3, #9
 800c0de:	6033      	str	r3, [r6, #0]
 800c0e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e8:	81a3      	strh	r3, [r4, #12]
 800c0ea:	e03e      	b.n	800c16a <__swsetup_r+0xba>
 800c0ec:	4b25      	ldr	r3, [pc, #148]	; (800c184 <__swsetup_r+0xd4>)
 800c0ee:	429c      	cmp	r4, r3
 800c0f0:	d101      	bne.n	800c0f6 <__swsetup_r+0x46>
 800c0f2:	68ac      	ldr	r4, [r5, #8]
 800c0f4:	e7eb      	b.n	800c0ce <__swsetup_r+0x1e>
 800c0f6:	4b24      	ldr	r3, [pc, #144]	; (800c188 <__swsetup_r+0xd8>)
 800c0f8:	429c      	cmp	r4, r3
 800c0fa:	bf08      	it	eq
 800c0fc:	68ec      	ldreq	r4, [r5, #12]
 800c0fe:	e7e6      	b.n	800c0ce <__swsetup_r+0x1e>
 800c100:	0758      	lsls	r0, r3, #29
 800c102:	d512      	bpl.n	800c12a <__swsetup_r+0x7a>
 800c104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c106:	b141      	cbz	r1, 800c11a <__swsetup_r+0x6a>
 800c108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c10c:	4299      	cmp	r1, r3
 800c10e:	d002      	beq.n	800c116 <__swsetup_r+0x66>
 800c110:	4630      	mov	r0, r6
 800c112:	f7ff fb2f 	bl	800b774 <_free_r>
 800c116:	2300      	movs	r3, #0
 800c118:	6363      	str	r3, [r4, #52]	; 0x34
 800c11a:	89a3      	ldrh	r3, [r4, #12]
 800c11c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c120:	81a3      	strh	r3, [r4, #12]
 800c122:	2300      	movs	r3, #0
 800c124:	6063      	str	r3, [r4, #4]
 800c126:	6923      	ldr	r3, [r4, #16]
 800c128:	6023      	str	r3, [r4, #0]
 800c12a:	89a3      	ldrh	r3, [r4, #12]
 800c12c:	f043 0308 	orr.w	r3, r3, #8
 800c130:	81a3      	strh	r3, [r4, #12]
 800c132:	6923      	ldr	r3, [r4, #16]
 800c134:	b94b      	cbnz	r3, 800c14a <__swsetup_r+0x9a>
 800c136:	89a3      	ldrh	r3, [r4, #12]
 800c138:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c13c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c140:	d003      	beq.n	800c14a <__swsetup_r+0x9a>
 800c142:	4621      	mov	r1, r4
 800c144:	4630      	mov	r0, r6
 800c146:	f000 fa05 	bl	800c554 <__smakebuf_r>
 800c14a:	89a0      	ldrh	r0, [r4, #12]
 800c14c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c150:	f010 0301 	ands.w	r3, r0, #1
 800c154:	d00a      	beq.n	800c16c <__swsetup_r+0xbc>
 800c156:	2300      	movs	r3, #0
 800c158:	60a3      	str	r3, [r4, #8]
 800c15a:	6963      	ldr	r3, [r4, #20]
 800c15c:	425b      	negs	r3, r3
 800c15e:	61a3      	str	r3, [r4, #24]
 800c160:	6923      	ldr	r3, [r4, #16]
 800c162:	b943      	cbnz	r3, 800c176 <__swsetup_r+0xc6>
 800c164:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c168:	d1ba      	bne.n	800c0e0 <__swsetup_r+0x30>
 800c16a:	bd70      	pop	{r4, r5, r6, pc}
 800c16c:	0781      	lsls	r1, r0, #30
 800c16e:	bf58      	it	pl
 800c170:	6963      	ldrpl	r3, [r4, #20]
 800c172:	60a3      	str	r3, [r4, #8]
 800c174:	e7f4      	b.n	800c160 <__swsetup_r+0xb0>
 800c176:	2000      	movs	r0, #0
 800c178:	e7f7      	b.n	800c16a <__swsetup_r+0xba>
 800c17a:	bf00      	nop
 800c17c:	20000010 	.word	0x20000010
 800c180:	0801d724 	.word	0x0801d724
 800c184:	0801d744 	.word	0x0801d744
 800c188:	0801d704 	.word	0x0801d704

0800c18c <abort>:
 800c18c:	2006      	movs	r0, #6
 800c18e:	b508      	push	{r3, lr}
 800c190:	f000 fa50 	bl	800c634 <raise>
 800c194:	2001      	movs	r0, #1
 800c196:	f7f9 f8e9 	bl	800536c <_exit>
	...

0800c19c <__sflush_r>:
 800c19c:	898a      	ldrh	r2, [r1, #12]
 800c19e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1a0:	4605      	mov	r5, r0
 800c1a2:	0710      	lsls	r0, r2, #28
 800c1a4:	460c      	mov	r4, r1
 800c1a6:	d457      	bmi.n	800c258 <__sflush_r+0xbc>
 800c1a8:	684b      	ldr	r3, [r1, #4]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	dc04      	bgt.n	800c1b8 <__sflush_r+0x1c>
 800c1ae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	dc01      	bgt.n	800c1b8 <__sflush_r+0x1c>
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1ba:	2e00      	cmp	r6, #0
 800c1bc:	d0fa      	beq.n	800c1b4 <__sflush_r+0x18>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1c4:	682f      	ldr	r7, [r5, #0]
 800c1c6:	602b      	str	r3, [r5, #0]
 800c1c8:	d032      	beq.n	800c230 <__sflush_r+0x94>
 800c1ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1cc:	89a3      	ldrh	r3, [r4, #12]
 800c1ce:	075a      	lsls	r2, r3, #29
 800c1d0:	d505      	bpl.n	800c1de <__sflush_r+0x42>
 800c1d2:	6863      	ldr	r3, [r4, #4]
 800c1d4:	1ac0      	subs	r0, r0, r3
 800c1d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1d8:	b10b      	cbz	r3, 800c1de <__sflush_r+0x42>
 800c1da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1dc:	1ac0      	subs	r0, r0, r3
 800c1de:	2300      	movs	r3, #0
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1e4:	4628      	mov	r0, r5
 800c1e6:	6a21      	ldr	r1, [r4, #32]
 800c1e8:	47b0      	blx	r6
 800c1ea:	1c43      	adds	r3, r0, #1
 800c1ec:	89a3      	ldrh	r3, [r4, #12]
 800c1ee:	d106      	bne.n	800c1fe <__sflush_r+0x62>
 800c1f0:	6829      	ldr	r1, [r5, #0]
 800c1f2:	291d      	cmp	r1, #29
 800c1f4:	d82c      	bhi.n	800c250 <__sflush_r+0xb4>
 800c1f6:	4a29      	ldr	r2, [pc, #164]	; (800c29c <__sflush_r+0x100>)
 800c1f8:	40ca      	lsrs	r2, r1
 800c1fa:	07d6      	lsls	r6, r2, #31
 800c1fc:	d528      	bpl.n	800c250 <__sflush_r+0xb4>
 800c1fe:	2200      	movs	r2, #0
 800c200:	6062      	str	r2, [r4, #4]
 800c202:	6922      	ldr	r2, [r4, #16]
 800c204:	04d9      	lsls	r1, r3, #19
 800c206:	6022      	str	r2, [r4, #0]
 800c208:	d504      	bpl.n	800c214 <__sflush_r+0x78>
 800c20a:	1c42      	adds	r2, r0, #1
 800c20c:	d101      	bne.n	800c212 <__sflush_r+0x76>
 800c20e:	682b      	ldr	r3, [r5, #0]
 800c210:	b903      	cbnz	r3, 800c214 <__sflush_r+0x78>
 800c212:	6560      	str	r0, [r4, #84]	; 0x54
 800c214:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c216:	602f      	str	r7, [r5, #0]
 800c218:	2900      	cmp	r1, #0
 800c21a:	d0cb      	beq.n	800c1b4 <__sflush_r+0x18>
 800c21c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c220:	4299      	cmp	r1, r3
 800c222:	d002      	beq.n	800c22a <__sflush_r+0x8e>
 800c224:	4628      	mov	r0, r5
 800c226:	f7ff faa5 	bl	800b774 <_free_r>
 800c22a:	2000      	movs	r0, #0
 800c22c:	6360      	str	r0, [r4, #52]	; 0x34
 800c22e:	e7c2      	b.n	800c1b6 <__sflush_r+0x1a>
 800c230:	6a21      	ldr	r1, [r4, #32]
 800c232:	2301      	movs	r3, #1
 800c234:	4628      	mov	r0, r5
 800c236:	47b0      	blx	r6
 800c238:	1c41      	adds	r1, r0, #1
 800c23a:	d1c7      	bne.n	800c1cc <__sflush_r+0x30>
 800c23c:	682b      	ldr	r3, [r5, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d0c4      	beq.n	800c1cc <__sflush_r+0x30>
 800c242:	2b1d      	cmp	r3, #29
 800c244:	d001      	beq.n	800c24a <__sflush_r+0xae>
 800c246:	2b16      	cmp	r3, #22
 800c248:	d101      	bne.n	800c24e <__sflush_r+0xb2>
 800c24a:	602f      	str	r7, [r5, #0]
 800c24c:	e7b2      	b.n	800c1b4 <__sflush_r+0x18>
 800c24e:	89a3      	ldrh	r3, [r4, #12]
 800c250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c254:	81a3      	strh	r3, [r4, #12]
 800c256:	e7ae      	b.n	800c1b6 <__sflush_r+0x1a>
 800c258:	690f      	ldr	r7, [r1, #16]
 800c25a:	2f00      	cmp	r7, #0
 800c25c:	d0aa      	beq.n	800c1b4 <__sflush_r+0x18>
 800c25e:	0793      	lsls	r3, r2, #30
 800c260:	bf18      	it	ne
 800c262:	2300      	movne	r3, #0
 800c264:	680e      	ldr	r6, [r1, #0]
 800c266:	bf08      	it	eq
 800c268:	694b      	ldreq	r3, [r1, #20]
 800c26a:	1bf6      	subs	r6, r6, r7
 800c26c:	600f      	str	r7, [r1, #0]
 800c26e:	608b      	str	r3, [r1, #8]
 800c270:	2e00      	cmp	r6, #0
 800c272:	dd9f      	ble.n	800c1b4 <__sflush_r+0x18>
 800c274:	4633      	mov	r3, r6
 800c276:	463a      	mov	r2, r7
 800c278:	4628      	mov	r0, r5
 800c27a:	6a21      	ldr	r1, [r4, #32]
 800c27c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c280:	47e0      	blx	ip
 800c282:	2800      	cmp	r0, #0
 800c284:	dc06      	bgt.n	800c294 <__sflush_r+0xf8>
 800c286:	89a3      	ldrh	r3, [r4, #12]
 800c288:	f04f 30ff 	mov.w	r0, #4294967295
 800c28c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c290:	81a3      	strh	r3, [r4, #12]
 800c292:	e790      	b.n	800c1b6 <__sflush_r+0x1a>
 800c294:	4407      	add	r7, r0
 800c296:	1a36      	subs	r6, r6, r0
 800c298:	e7ea      	b.n	800c270 <__sflush_r+0xd4>
 800c29a:	bf00      	nop
 800c29c:	20400001 	.word	0x20400001

0800c2a0 <_fflush_r>:
 800c2a0:	b538      	push	{r3, r4, r5, lr}
 800c2a2:	690b      	ldr	r3, [r1, #16]
 800c2a4:	4605      	mov	r5, r0
 800c2a6:	460c      	mov	r4, r1
 800c2a8:	b913      	cbnz	r3, 800c2b0 <_fflush_r+0x10>
 800c2aa:	2500      	movs	r5, #0
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	bd38      	pop	{r3, r4, r5, pc}
 800c2b0:	b118      	cbz	r0, 800c2ba <_fflush_r+0x1a>
 800c2b2:	6983      	ldr	r3, [r0, #24]
 800c2b4:	b90b      	cbnz	r3, 800c2ba <_fflush_r+0x1a>
 800c2b6:	f000 f887 	bl	800c3c8 <__sinit>
 800c2ba:	4b14      	ldr	r3, [pc, #80]	; (800c30c <_fflush_r+0x6c>)
 800c2bc:	429c      	cmp	r4, r3
 800c2be:	d11b      	bne.n	800c2f8 <_fflush_r+0x58>
 800c2c0:	686c      	ldr	r4, [r5, #4]
 800c2c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d0ef      	beq.n	800c2aa <_fflush_r+0xa>
 800c2ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2cc:	07d0      	lsls	r0, r2, #31
 800c2ce:	d404      	bmi.n	800c2da <_fflush_r+0x3a>
 800c2d0:	0599      	lsls	r1, r3, #22
 800c2d2:	d402      	bmi.n	800c2da <_fflush_r+0x3a>
 800c2d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2d6:	f000 f915 	bl	800c504 <__retarget_lock_acquire_recursive>
 800c2da:	4628      	mov	r0, r5
 800c2dc:	4621      	mov	r1, r4
 800c2de:	f7ff ff5d 	bl	800c19c <__sflush_r>
 800c2e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2e4:	4605      	mov	r5, r0
 800c2e6:	07da      	lsls	r2, r3, #31
 800c2e8:	d4e0      	bmi.n	800c2ac <_fflush_r+0xc>
 800c2ea:	89a3      	ldrh	r3, [r4, #12]
 800c2ec:	059b      	lsls	r3, r3, #22
 800c2ee:	d4dd      	bmi.n	800c2ac <_fflush_r+0xc>
 800c2f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2f2:	f000 f908 	bl	800c506 <__retarget_lock_release_recursive>
 800c2f6:	e7d9      	b.n	800c2ac <_fflush_r+0xc>
 800c2f8:	4b05      	ldr	r3, [pc, #20]	; (800c310 <_fflush_r+0x70>)
 800c2fa:	429c      	cmp	r4, r3
 800c2fc:	d101      	bne.n	800c302 <_fflush_r+0x62>
 800c2fe:	68ac      	ldr	r4, [r5, #8]
 800c300:	e7df      	b.n	800c2c2 <_fflush_r+0x22>
 800c302:	4b04      	ldr	r3, [pc, #16]	; (800c314 <_fflush_r+0x74>)
 800c304:	429c      	cmp	r4, r3
 800c306:	bf08      	it	eq
 800c308:	68ec      	ldreq	r4, [r5, #12]
 800c30a:	e7da      	b.n	800c2c2 <_fflush_r+0x22>
 800c30c:	0801d724 	.word	0x0801d724
 800c310:	0801d744 	.word	0x0801d744
 800c314:	0801d704 	.word	0x0801d704

0800c318 <std>:
 800c318:	2300      	movs	r3, #0
 800c31a:	b510      	push	{r4, lr}
 800c31c:	4604      	mov	r4, r0
 800c31e:	e9c0 3300 	strd	r3, r3, [r0]
 800c322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c326:	6083      	str	r3, [r0, #8]
 800c328:	8181      	strh	r1, [r0, #12]
 800c32a:	6643      	str	r3, [r0, #100]	; 0x64
 800c32c:	81c2      	strh	r2, [r0, #14]
 800c32e:	6183      	str	r3, [r0, #24]
 800c330:	4619      	mov	r1, r3
 800c332:	2208      	movs	r2, #8
 800c334:	305c      	adds	r0, #92	; 0x5c
 800c336:	f7fb fe0f 	bl	8007f58 <memset>
 800c33a:	4b05      	ldr	r3, [pc, #20]	; (800c350 <std+0x38>)
 800c33c:	6224      	str	r4, [r4, #32]
 800c33e:	6263      	str	r3, [r4, #36]	; 0x24
 800c340:	4b04      	ldr	r3, [pc, #16]	; (800c354 <std+0x3c>)
 800c342:	62a3      	str	r3, [r4, #40]	; 0x28
 800c344:	4b04      	ldr	r3, [pc, #16]	; (800c358 <std+0x40>)
 800c346:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c348:	4b04      	ldr	r3, [pc, #16]	; (800c35c <std+0x44>)
 800c34a:	6323      	str	r3, [r4, #48]	; 0x30
 800c34c:	bd10      	pop	{r4, pc}
 800c34e:	bf00      	nop
 800c350:	0800c66d 	.word	0x0800c66d
 800c354:	0800c68f 	.word	0x0800c68f
 800c358:	0800c6c7 	.word	0x0800c6c7
 800c35c:	0800c6eb 	.word	0x0800c6eb

0800c360 <_cleanup_r>:
 800c360:	4901      	ldr	r1, [pc, #4]	; (800c368 <_cleanup_r+0x8>)
 800c362:	f000 b8af 	b.w	800c4c4 <_fwalk_reent>
 800c366:	bf00      	nop
 800c368:	0800c2a1 	.word	0x0800c2a1

0800c36c <__sfmoreglue>:
 800c36c:	2268      	movs	r2, #104	; 0x68
 800c36e:	b570      	push	{r4, r5, r6, lr}
 800c370:	1e4d      	subs	r5, r1, #1
 800c372:	4355      	muls	r5, r2
 800c374:	460e      	mov	r6, r1
 800c376:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c37a:	f7ff fa63 	bl	800b844 <_malloc_r>
 800c37e:	4604      	mov	r4, r0
 800c380:	b140      	cbz	r0, 800c394 <__sfmoreglue+0x28>
 800c382:	2100      	movs	r1, #0
 800c384:	e9c0 1600 	strd	r1, r6, [r0]
 800c388:	300c      	adds	r0, #12
 800c38a:	60a0      	str	r0, [r4, #8]
 800c38c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c390:	f7fb fde2 	bl	8007f58 <memset>
 800c394:	4620      	mov	r0, r4
 800c396:	bd70      	pop	{r4, r5, r6, pc}

0800c398 <__sfp_lock_acquire>:
 800c398:	4801      	ldr	r0, [pc, #4]	; (800c3a0 <__sfp_lock_acquire+0x8>)
 800c39a:	f000 b8b3 	b.w	800c504 <__retarget_lock_acquire_recursive>
 800c39e:	bf00      	nop
 800c3a0:	200016dd 	.word	0x200016dd

0800c3a4 <__sfp_lock_release>:
 800c3a4:	4801      	ldr	r0, [pc, #4]	; (800c3ac <__sfp_lock_release+0x8>)
 800c3a6:	f000 b8ae 	b.w	800c506 <__retarget_lock_release_recursive>
 800c3aa:	bf00      	nop
 800c3ac:	200016dd 	.word	0x200016dd

0800c3b0 <__sinit_lock_acquire>:
 800c3b0:	4801      	ldr	r0, [pc, #4]	; (800c3b8 <__sinit_lock_acquire+0x8>)
 800c3b2:	f000 b8a7 	b.w	800c504 <__retarget_lock_acquire_recursive>
 800c3b6:	bf00      	nop
 800c3b8:	200016de 	.word	0x200016de

0800c3bc <__sinit_lock_release>:
 800c3bc:	4801      	ldr	r0, [pc, #4]	; (800c3c4 <__sinit_lock_release+0x8>)
 800c3be:	f000 b8a2 	b.w	800c506 <__retarget_lock_release_recursive>
 800c3c2:	bf00      	nop
 800c3c4:	200016de 	.word	0x200016de

0800c3c8 <__sinit>:
 800c3c8:	b510      	push	{r4, lr}
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	f7ff fff0 	bl	800c3b0 <__sinit_lock_acquire>
 800c3d0:	69a3      	ldr	r3, [r4, #24]
 800c3d2:	b11b      	cbz	r3, 800c3dc <__sinit+0x14>
 800c3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3d8:	f7ff bff0 	b.w	800c3bc <__sinit_lock_release>
 800c3dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c3e0:	6523      	str	r3, [r4, #80]	; 0x50
 800c3e2:	4b13      	ldr	r3, [pc, #76]	; (800c430 <__sinit+0x68>)
 800c3e4:	4a13      	ldr	r2, [pc, #76]	; (800c434 <__sinit+0x6c>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c3ea:	42a3      	cmp	r3, r4
 800c3ec:	bf08      	it	eq
 800c3ee:	2301      	moveq	r3, #1
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	bf08      	it	eq
 800c3f4:	61a3      	streq	r3, [r4, #24]
 800c3f6:	f000 f81f 	bl	800c438 <__sfp>
 800c3fa:	6060      	str	r0, [r4, #4]
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f000 f81b 	bl	800c438 <__sfp>
 800c402:	60a0      	str	r0, [r4, #8]
 800c404:	4620      	mov	r0, r4
 800c406:	f000 f817 	bl	800c438 <__sfp>
 800c40a:	2200      	movs	r2, #0
 800c40c:	2104      	movs	r1, #4
 800c40e:	60e0      	str	r0, [r4, #12]
 800c410:	6860      	ldr	r0, [r4, #4]
 800c412:	f7ff ff81 	bl	800c318 <std>
 800c416:	2201      	movs	r2, #1
 800c418:	2109      	movs	r1, #9
 800c41a:	68a0      	ldr	r0, [r4, #8]
 800c41c:	f7ff ff7c 	bl	800c318 <std>
 800c420:	2202      	movs	r2, #2
 800c422:	2112      	movs	r1, #18
 800c424:	68e0      	ldr	r0, [r4, #12]
 800c426:	f7ff ff77 	bl	800c318 <std>
 800c42a:	2301      	movs	r3, #1
 800c42c:	61a3      	str	r3, [r4, #24]
 800c42e:	e7d1      	b.n	800c3d4 <__sinit+0xc>
 800c430:	0801d2bc 	.word	0x0801d2bc
 800c434:	0800c361 	.word	0x0800c361

0800c438 <__sfp>:
 800c438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c43a:	4607      	mov	r7, r0
 800c43c:	f7ff ffac 	bl	800c398 <__sfp_lock_acquire>
 800c440:	4b1e      	ldr	r3, [pc, #120]	; (800c4bc <__sfp+0x84>)
 800c442:	681e      	ldr	r6, [r3, #0]
 800c444:	69b3      	ldr	r3, [r6, #24]
 800c446:	b913      	cbnz	r3, 800c44e <__sfp+0x16>
 800c448:	4630      	mov	r0, r6
 800c44a:	f7ff ffbd 	bl	800c3c8 <__sinit>
 800c44e:	3648      	adds	r6, #72	; 0x48
 800c450:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c454:	3b01      	subs	r3, #1
 800c456:	d503      	bpl.n	800c460 <__sfp+0x28>
 800c458:	6833      	ldr	r3, [r6, #0]
 800c45a:	b30b      	cbz	r3, 800c4a0 <__sfp+0x68>
 800c45c:	6836      	ldr	r6, [r6, #0]
 800c45e:	e7f7      	b.n	800c450 <__sfp+0x18>
 800c460:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c464:	b9d5      	cbnz	r5, 800c49c <__sfp+0x64>
 800c466:	4b16      	ldr	r3, [pc, #88]	; (800c4c0 <__sfp+0x88>)
 800c468:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c46c:	60e3      	str	r3, [r4, #12]
 800c46e:	6665      	str	r5, [r4, #100]	; 0x64
 800c470:	f000 f847 	bl	800c502 <__retarget_lock_init_recursive>
 800c474:	f7ff ff96 	bl	800c3a4 <__sfp_lock_release>
 800c478:	2208      	movs	r2, #8
 800c47a:	4629      	mov	r1, r5
 800c47c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c480:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c484:	6025      	str	r5, [r4, #0]
 800c486:	61a5      	str	r5, [r4, #24]
 800c488:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c48c:	f7fb fd64 	bl	8007f58 <memset>
 800c490:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c494:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c498:	4620      	mov	r0, r4
 800c49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c49c:	3468      	adds	r4, #104	; 0x68
 800c49e:	e7d9      	b.n	800c454 <__sfp+0x1c>
 800c4a0:	2104      	movs	r1, #4
 800c4a2:	4638      	mov	r0, r7
 800c4a4:	f7ff ff62 	bl	800c36c <__sfmoreglue>
 800c4a8:	4604      	mov	r4, r0
 800c4aa:	6030      	str	r0, [r6, #0]
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	d1d5      	bne.n	800c45c <__sfp+0x24>
 800c4b0:	f7ff ff78 	bl	800c3a4 <__sfp_lock_release>
 800c4b4:	230c      	movs	r3, #12
 800c4b6:	603b      	str	r3, [r7, #0]
 800c4b8:	e7ee      	b.n	800c498 <__sfp+0x60>
 800c4ba:	bf00      	nop
 800c4bc:	0801d2bc 	.word	0x0801d2bc
 800c4c0:	ffff0001 	.word	0xffff0001

0800c4c4 <_fwalk_reent>:
 800c4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4c8:	4606      	mov	r6, r0
 800c4ca:	4688      	mov	r8, r1
 800c4cc:	2700      	movs	r7, #0
 800c4ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c4d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c4d6:	f1b9 0901 	subs.w	r9, r9, #1
 800c4da:	d505      	bpl.n	800c4e8 <_fwalk_reent+0x24>
 800c4dc:	6824      	ldr	r4, [r4, #0]
 800c4de:	2c00      	cmp	r4, #0
 800c4e0:	d1f7      	bne.n	800c4d2 <_fwalk_reent+0xe>
 800c4e2:	4638      	mov	r0, r7
 800c4e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4e8:	89ab      	ldrh	r3, [r5, #12]
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	d907      	bls.n	800c4fe <_fwalk_reent+0x3a>
 800c4ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	d003      	beq.n	800c4fe <_fwalk_reent+0x3a>
 800c4f6:	4629      	mov	r1, r5
 800c4f8:	4630      	mov	r0, r6
 800c4fa:	47c0      	blx	r8
 800c4fc:	4307      	orrs	r7, r0
 800c4fe:	3568      	adds	r5, #104	; 0x68
 800c500:	e7e9      	b.n	800c4d6 <_fwalk_reent+0x12>

0800c502 <__retarget_lock_init_recursive>:
 800c502:	4770      	bx	lr

0800c504 <__retarget_lock_acquire_recursive>:
 800c504:	4770      	bx	lr

0800c506 <__retarget_lock_release_recursive>:
 800c506:	4770      	bx	lr

0800c508 <__swhatbuf_r>:
 800c508:	b570      	push	{r4, r5, r6, lr}
 800c50a:	460e      	mov	r6, r1
 800c50c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c510:	4614      	mov	r4, r2
 800c512:	2900      	cmp	r1, #0
 800c514:	461d      	mov	r5, r3
 800c516:	b096      	sub	sp, #88	; 0x58
 800c518:	da08      	bge.n	800c52c <__swhatbuf_r+0x24>
 800c51a:	2200      	movs	r2, #0
 800c51c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c520:	602a      	str	r2, [r5, #0]
 800c522:	061a      	lsls	r2, r3, #24
 800c524:	d410      	bmi.n	800c548 <__swhatbuf_r+0x40>
 800c526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c52a:	e00e      	b.n	800c54a <__swhatbuf_r+0x42>
 800c52c:	466a      	mov	r2, sp
 800c52e:	f000 f903 	bl	800c738 <_fstat_r>
 800c532:	2800      	cmp	r0, #0
 800c534:	dbf1      	blt.n	800c51a <__swhatbuf_r+0x12>
 800c536:	9a01      	ldr	r2, [sp, #4]
 800c538:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c53c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c540:	425a      	negs	r2, r3
 800c542:	415a      	adcs	r2, r3
 800c544:	602a      	str	r2, [r5, #0]
 800c546:	e7ee      	b.n	800c526 <__swhatbuf_r+0x1e>
 800c548:	2340      	movs	r3, #64	; 0x40
 800c54a:	2000      	movs	r0, #0
 800c54c:	6023      	str	r3, [r4, #0]
 800c54e:	b016      	add	sp, #88	; 0x58
 800c550:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c554 <__smakebuf_r>:
 800c554:	898b      	ldrh	r3, [r1, #12]
 800c556:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c558:	079d      	lsls	r5, r3, #30
 800c55a:	4606      	mov	r6, r0
 800c55c:	460c      	mov	r4, r1
 800c55e:	d507      	bpl.n	800c570 <__smakebuf_r+0x1c>
 800c560:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c564:	6023      	str	r3, [r4, #0]
 800c566:	6123      	str	r3, [r4, #16]
 800c568:	2301      	movs	r3, #1
 800c56a:	6163      	str	r3, [r4, #20]
 800c56c:	b002      	add	sp, #8
 800c56e:	bd70      	pop	{r4, r5, r6, pc}
 800c570:	466a      	mov	r2, sp
 800c572:	ab01      	add	r3, sp, #4
 800c574:	f7ff ffc8 	bl	800c508 <__swhatbuf_r>
 800c578:	9900      	ldr	r1, [sp, #0]
 800c57a:	4605      	mov	r5, r0
 800c57c:	4630      	mov	r0, r6
 800c57e:	f7ff f961 	bl	800b844 <_malloc_r>
 800c582:	b948      	cbnz	r0, 800c598 <__smakebuf_r+0x44>
 800c584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c588:	059a      	lsls	r2, r3, #22
 800c58a:	d4ef      	bmi.n	800c56c <__smakebuf_r+0x18>
 800c58c:	f023 0303 	bic.w	r3, r3, #3
 800c590:	f043 0302 	orr.w	r3, r3, #2
 800c594:	81a3      	strh	r3, [r4, #12]
 800c596:	e7e3      	b.n	800c560 <__smakebuf_r+0xc>
 800c598:	4b0d      	ldr	r3, [pc, #52]	; (800c5d0 <__smakebuf_r+0x7c>)
 800c59a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c59c:	89a3      	ldrh	r3, [r4, #12]
 800c59e:	6020      	str	r0, [r4, #0]
 800c5a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5a4:	81a3      	strh	r3, [r4, #12]
 800c5a6:	9b00      	ldr	r3, [sp, #0]
 800c5a8:	6120      	str	r0, [r4, #16]
 800c5aa:	6163      	str	r3, [r4, #20]
 800c5ac:	9b01      	ldr	r3, [sp, #4]
 800c5ae:	b15b      	cbz	r3, 800c5c8 <__smakebuf_r+0x74>
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5b6:	f000 f8d1 	bl	800c75c <_isatty_r>
 800c5ba:	b128      	cbz	r0, 800c5c8 <__smakebuf_r+0x74>
 800c5bc:	89a3      	ldrh	r3, [r4, #12]
 800c5be:	f023 0303 	bic.w	r3, r3, #3
 800c5c2:	f043 0301 	orr.w	r3, r3, #1
 800c5c6:	81a3      	strh	r3, [r4, #12]
 800c5c8:	89a0      	ldrh	r0, [r4, #12]
 800c5ca:	4305      	orrs	r5, r0
 800c5cc:	81a5      	strh	r5, [r4, #12]
 800c5ce:	e7cd      	b.n	800c56c <__smakebuf_r+0x18>
 800c5d0:	0800c361 	.word	0x0800c361

0800c5d4 <_malloc_usable_size_r>:
 800c5d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5d8:	1f18      	subs	r0, r3, #4
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	bfbc      	itt	lt
 800c5de:	580b      	ldrlt	r3, [r1, r0]
 800c5e0:	18c0      	addlt	r0, r0, r3
 800c5e2:	4770      	bx	lr

0800c5e4 <_raise_r>:
 800c5e4:	291f      	cmp	r1, #31
 800c5e6:	b538      	push	{r3, r4, r5, lr}
 800c5e8:	4604      	mov	r4, r0
 800c5ea:	460d      	mov	r5, r1
 800c5ec:	d904      	bls.n	800c5f8 <_raise_r+0x14>
 800c5ee:	2316      	movs	r3, #22
 800c5f0:	6003      	str	r3, [r0, #0]
 800c5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f6:	bd38      	pop	{r3, r4, r5, pc}
 800c5f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c5fa:	b112      	cbz	r2, 800c602 <_raise_r+0x1e>
 800c5fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c600:	b94b      	cbnz	r3, 800c616 <_raise_r+0x32>
 800c602:	4620      	mov	r0, r4
 800c604:	f000 f830 	bl	800c668 <_getpid_r>
 800c608:	462a      	mov	r2, r5
 800c60a:	4601      	mov	r1, r0
 800c60c:	4620      	mov	r0, r4
 800c60e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c612:	f000 b817 	b.w	800c644 <_kill_r>
 800c616:	2b01      	cmp	r3, #1
 800c618:	d00a      	beq.n	800c630 <_raise_r+0x4c>
 800c61a:	1c59      	adds	r1, r3, #1
 800c61c:	d103      	bne.n	800c626 <_raise_r+0x42>
 800c61e:	2316      	movs	r3, #22
 800c620:	6003      	str	r3, [r0, #0]
 800c622:	2001      	movs	r0, #1
 800c624:	e7e7      	b.n	800c5f6 <_raise_r+0x12>
 800c626:	2400      	movs	r4, #0
 800c628:	4628      	mov	r0, r5
 800c62a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c62e:	4798      	blx	r3
 800c630:	2000      	movs	r0, #0
 800c632:	e7e0      	b.n	800c5f6 <_raise_r+0x12>

0800c634 <raise>:
 800c634:	4b02      	ldr	r3, [pc, #8]	; (800c640 <raise+0xc>)
 800c636:	4601      	mov	r1, r0
 800c638:	6818      	ldr	r0, [r3, #0]
 800c63a:	f7ff bfd3 	b.w	800c5e4 <_raise_r>
 800c63e:	bf00      	nop
 800c640:	20000010 	.word	0x20000010

0800c644 <_kill_r>:
 800c644:	b538      	push	{r3, r4, r5, lr}
 800c646:	2300      	movs	r3, #0
 800c648:	4d06      	ldr	r5, [pc, #24]	; (800c664 <_kill_r+0x20>)
 800c64a:	4604      	mov	r4, r0
 800c64c:	4608      	mov	r0, r1
 800c64e:	4611      	mov	r1, r2
 800c650:	602b      	str	r3, [r5, #0]
 800c652:	f7f8 fe81 	bl	8005358 <_kill>
 800c656:	1c43      	adds	r3, r0, #1
 800c658:	d102      	bne.n	800c660 <_kill_r+0x1c>
 800c65a:	682b      	ldr	r3, [r5, #0]
 800c65c:	b103      	cbz	r3, 800c660 <_kill_r+0x1c>
 800c65e:	6023      	str	r3, [r4, #0]
 800c660:	bd38      	pop	{r3, r4, r5, pc}
 800c662:	bf00      	nop
 800c664:	200016d8 	.word	0x200016d8

0800c668 <_getpid_r>:
 800c668:	f7f8 be74 	b.w	8005354 <_getpid>

0800c66c <__sread>:
 800c66c:	b510      	push	{r4, lr}
 800c66e:	460c      	mov	r4, r1
 800c670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c674:	f000 f894 	bl	800c7a0 <_read_r>
 800c678:	2800      	cmp	r0, #0
 800c67a:	bfab      	itete	ge
 800c67c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c67e:	89a3      	ldrhlt	r3, [r4, #12]
 800c680:	181b      	addge	r3, r3, r0
 800c682:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c686:	bfac      	ite	ge
 800c688:	6563      	strge	r3, [r4, #84]	; 0x54
 800c68a:	81a3      	strhlt	r3, [r4, #12]
 800c68c:	bd10      	pop	{r4, pc}

0800c68e <__swrite>:
 800c68e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c692:	461f      	mov	r7, r3
 800c694:	898b      	ldrh	r3, [r1, #12]
 800c696:	4605      	mov	r5, r0
 800c698:	05db      	lsls	r3, r3, #23
 800c69a:	460c      	mov	r4, r1
 800c69c:	4616      	mov	r6, r2
 800c69e:	d505      	bpl.n	800c6ac <__swrite+0x1e>
 800c6a0:	2302      	movs	r3, #2
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6a8:	f000 f868 	bl	800c77c <_lseek_r>
 800c6ac:	89a3      	ldrh	r3, [r4, #12]
 800c6ae:	4632      	mov	r2, r6
 800c6b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6b4:	81a3      	strh	r3, [r4, #12]
 800c6b6:	4628      	mov	r0, r5
 800c6b8:	463b      	mov	r3, r7
 800c6ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c2:	f000 b817 	b.w	800c6f4 <_write_r>

0800c6c6 <__sseek>:
 800c6c6:	b510      	push	{r4, lr}
 800c6c8:	460c      	mov	r4, r1
 800c6ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6ce:	f000 f855 	bl	800c77c <_lseek_r>
 800c6d2:	1c43      	adds	r3, r0, #1
 800c6d4:	89a3      	ldrh	r3, [r4, #12]
 800c6d6:	bf15      	itete	ne
 800c6d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c6da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c6de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c6e2:	81a3      	strheq	r3, [r4, #12]
 800c6e4:	bf18      	it	ne
 800c6e6:	81a3      	strhne	r3, [r4, #12]
 800c6e8:	bd10      	pop	{r4, pc}

0800c6ea <__sclose>:
 800c6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6ee:	f000 b813 	b.w	800c718 <_close_r>
	...

0800c6f4 <_write_r>:
 800c6f4:	b538      	push	{r3, r4, r5, lr}
 800c6f6:	4604      	mov	r4, r0
 800c6f8:	4608      	mov	r0, r1
 800c6fa:	4611      	mov	r1, r2
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	4d05      	ldr	r5, [pc, #20]	; (800c714 <_write_r+0x20>)
 800c700:	602a      	str	r2, [r5, #0]
 800c702:	461a      	mov	r2, r3
 800c704:	f7f8 fe46 	bl	8005394 <_write>
 800c708:	1c43      	adds	r3, r0, #1
 800c70a:	d102      	bne.n	800c712 <_write_r+0x1e>
 800c70c:	682b      	ldr	r3, [r5, #0]
 800c70e:	b103      	cbz	r3, 800c712 <_write_r+0x1e>
 800c710:	6023      	str	r3, [r4, #0]
 800c712:	bd38      	pop	{r3, r4, r5, pc}
 800c714:	200016d8 	.word	0x200016d8

0800c718 <_close_r>:
 800c718:	b538      	push	{r3, r4, r5, lr}
 800c71a:	2300      	movs	r3, #0
 800c71c:	4d05      	ldr	r5, [pc, #20]	; (800c734 <_close_r+0x1c>)
 800c71e:	4604      	mov	r4, r0
 800c720:	4608      	mov	r0, r1
 800c722:	602b      	str	r3, [r5, #0]
 800c724:	f7f8 fe44 	bl	80053b0 <_close>
 800c728:	1c43      	adds	r3, r0, #1
 800c72a:	d102      	bne.n	800c732 <_close_r+0x1a>
 800c72c:	682b      	ldr	r3, [r5, #0]
 800c72e:	b103      	cbz	r3, 800c732 <_close_r+0x1a>
 800c730:	6023      	str	r3, [r4, #0]
 800c732:	bd38      	pop	{r3, r4, r5, pc}
 800c734:	200016d8 	.word	0x200016d8

0800c738 <_fstat_r>:
 800c738:	b538      	push	{r3, r4, r5, lr}
 800c73a:	2300      	movs	r3, #0
 800c73c:	4d06      	ldr	r5, [pc, #24]	; (800c758 <_fstat_r+0x20>)
 800c73e:	4604      	mov	r4, r0
 800c740:	4608      	mov	r0, r1
 800c742:	4611      	mov	r1, r2
 800c744:	602b      	str	r3, [r5, #0]
 800c746:	f7f8 fe37 	bl	80053b8 <_fstat>
 800c74a:	1c43      	adds	r3, r0, #1
 800c74c:	d102      	bne.n	800c754 <_fstat_r+0x1c>
 800c74e:	682b      	ldr	r3, [r5, #0]
 800c750:	b103      	cbz	r3, 800c754 <_fstat_r+0x1c>
 800c752:	6023      	str	r3, [r4, #0]
 800c754:	bd38      	pop	{r3, r4, r5, pc}
 800c756:	bf00      	nop
 800c758:	200016d8 	.word	0x200016d8

0800c75c <_isatty_r>:
 800c75c:	b538      	push	{r3, r4, r5, lr}
 800c75e:	2300      	movs	r3, #0
 800c760:	4d05      	ldr	r5, [pc, #20]	; (800c778 <_isatty_r+0x1c>)
 800c762:	4604      	mov	r4, r0
 800c764:	4608      	mov	r0, r1
 800c766:	602b      	str	r3, [r5, #0]
 800c768:	f7f8 fe2c 	bl	80053c4 <_isatty>
 800c76c:	1c43      	adds	r3, r0, #1
 800c76e:	d102      	bne.n	800c776 <_isatty_r+0x1a>
 800c770:	682b      	ldr	r3, [r5, #0]
 800c772:	b103      	cbz	r3, 800c776 <_isatty_r+0x1a>
 800c774:	6023      	str	r3, [r4, #0]
 800c776:	bd38      	pop	{r3, r4, r5, pc}
 800c778:	200016d8 	.word	0x200016d8

0800c77c <_lseek_r>:
 800c77c:	b538      	push	{r3, r4, r5, lr}
 800c77e:	4604      	mov	r4, r0
 800c780:	4608      	mov	r0, r1
 800c782:	4611      	mov	r1, r2
 800c784:	2200      	movs	r2, #0
 800c786:	4d05      	ldr	r5, [pc, #20]	; (800c79c <_lseek_r+0x20>)
 800c788:	602a      	str	r2, [r5, #0]
 800c78a:	461a      	mov	r2, r3
 800c78c:	f7f8 fe1c 	bl	80053c8 <_lseek>
 800c790:	1c43      	adds	r3, r0, #1
 800c792:	d102      	bne.n	800c79a <_lseek_r+0x1e>
 800c794:	682b      	ldr	r3, [r5, #0]
 800c796:	b103      	cbz	r3, 800c79a <_lseek_r+0x1e>
 800c798:	6023      	str	r3, [r4, #0]
 800c79a:	bd38      	pop	{r3, r4, r5, pc}
 800c79c:	200016d8 	.word	0x200016d8

0800c7a0 <_read_r>:
 800c7a0:	b538      	push	{r3, r4, r5, lr}
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	4608      	mov	r0, r1
 800c7a6:	4611      	mov	r1, r2
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	4d05      	ldr	r5, [pc, #20]	; (800c7c0 <_read_r+0x20>)
 800c7ac:	602a      	str	r2, [r5, #0]
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	f7f8 fde2 	bl	8005378 <_read>
 800c7b4:	1c43      	adds	r3, r0, #1
 800c7b6:	d102      	bne.n	800c7be <_read_r+0x1e>
 800c7b8:	682b      	ldr	r3, [r5, #0]
 800c7ba:	b103      	cbz	r3, 800c7be <_read_r+0x1e>
 800c7bc:	6023      	str	r3, [r4, #0]
 800c7be:	bd38      	pop	{r3, r4, r5, pc}
 800c7c0:	200016d8 	.word	0x200016d8
 800c7c4:	00000000 	.word	0x00000000

0800c7c8 <floor>:
 800c7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7cc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800c7d0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800c7d4:	2e13      	cmp	r6, #19
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	460b      	mov	r3, r1
 800c7da:	4607      	mov	r7, r0
 800c7dc:	460c      	mov	r4, r1
 800c7de:	4605      	mov	r5, r0
 800c7e0:	dc33      	bgt.n	800c84a <floor+0x82>
 800c7e2:	2e00      	cmp	r6, #0
 800c7e4:	da14      	bge.n	800c810 <floor+0x48>
 800c7e6:	a334      	add	r3, pc, #208	; (adr r3, 800c8b8 <floor+0xf0>)
 800c7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ec:	f7f8 fe24 	bl	8005438 <__adddf3>
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	f7f9 fa66 	bl	8005cc4 <__aeabi_dcmpgt>
 800c7f8:	b138      	cbz	r0, 800c80a <floor+0x42>
 800c7fa:	2c00      	cmp	r4, #0
 800c7fc:	da58      	bge.n	800c8b0 <floor+0xe8>
 800c7fe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c802:	431d      	orrs	r5, r3
 800c804:	d001      	beq.n	800c80a <floor+0x42>
 800c806:	2500      	movs	r5, #0
 800c808:	4c2d      	ldr	r4, [pc, #180]	; (800c8c0 <floor+0xf8>)
 800c80a:	4623      	mov	r3, r4
 800c80c:	462f      	mov	r7, r5
 800c80e:	e025      	b.n	800c85c <floor+0x94>
 800c810:	4a2c      	ldr	r2, [pc, #176]	; (800c8c4 <floor+0xfc>)
 800c812:	fa42 f806 	asr.w	r8, r2, r6
 800c816:	ea01 0208 	and.w	r2, r1, r8
 800c81a:	4302      	orrs	r2, r0
 800c81c:	d01e      	beq.n	800c85c <floor+0x94>
 800c81e:	a326      	add	r3, pc, #152	; (adr r3, 800c8b8 <floor+0xf0>)
 800c820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c824:	f7f8 fe08 	bl	8005438 <__adddf3>
 800c828:	2200      	movs	r2, #0
 800c82a:	2300      	movs	r3, #0
 800c82c:	f7f9 fa4a 	bl	8005cc4 <__aeabi_dcmpgt>
 800c830:	2800      	cmp	r0, #0
 800c832:	d0ea      	beq.n	800c80a <floor+0x42>
 800c834:	2c00      	cmp	r4, #0
 800c836:	bfbe      	ittt	lt
 800c838:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c83c:	fa43 f606 	asrlt.w	r6, r3, r6
 800c840:	19a4      	addlt	r4, r4, r6
 800c842:	2500      	movs	r5, #0
 800c844:	ea24 0408 	bic.w	r4, r4, r8
 800c848:	e7df      	b.n	800c80a <floor+0x42>
 800c84a:	2e33      	cmp	r6, #51	; 0x33
 800c84c:	dd0a      	ble.n	800c864 <floor+0x9c>
 800c84e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c852:	d103      	bne.n	800c85c <floor+0x94>
 800c854:	f7f8 fdf0 	bl	8005438 <__adddf3>
 800c858:	4607      	mov	r7, r0
 800c85a:	460b      	mov	r3, r1
 800c85c:	4638      	mov	r0, r7
 800c85e:	4619      	mov	r1, r3
 800c860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c864:	f04f 32ff 	mov.w	r2, #4294967295
 800c868:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800c86c:	fa22 f808 	lsr.w	r8, r2, r8
 800c870:	ea18 0f00 	tst.w	r8, r0
 800c874:	d0f2      	beq.n	800c85c <floor+0x94>
 800c876:	a310      	add	r3, pc, #64	; (adr r3, 800c8b8 <floor+0xf0>)
 800c878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87c:	f7f8 fddc 	bl	8005438 <__adddf3>
 800c880:	2200      	movs	r2, #0
 800c882:	2300      	movs	r3, #0
 800c884:	f7f9 fa1e 	bl	8005cc4 <__aeabi_dcmpgt>
 800c888:	2800      	cmp	r0, #0
 800c88a:	d0be      	beq.n	800c80a <floor+0x42>
 800c88c:	2c00      	cmp	r4, #0
 800c88e:	da02      	bge.n	800c896 <floor+0xce>
 800c890:	2e14      	cmp	r6, #20
 800c892:	d103      	bne.n	800c89c <floor+0xd4>
 800c894:	3401      	adds	r4, #1
 800c896:	ea25 0508 	bic.w	r5, r5, r8
 800c89a:	e7b6      	b.n	800c80a <floor+0x42>
 800c89c:	2301      	movs	r3, #1
 800c89e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c8a2:	fa03 f606 	lsl.w	r6, r3, r6
 800c8a6:	4435      	add	r5, r6
 800c8a8:	42bd      	cmp	r5, r7
 800c8aa:	bf38      	it	cc
 800c8ac:	18e4      	addcc	r4, r4, r3
 800c8ae:	e7f2      	b.n	800c896 <floor+0xce>
 800c8b0:	2500      	movs	r5, #0
 800c8b2:	462c      	mov	r4, r5
 800c8b4:	e7a9      	b.n	800c80a <floor+0x42>
 800c8b6:	bf00      	nop
 800c8b8:	8800759c 	.word	0x8800759c
 800c8bc:	7e37e43c 	.word	0x7e37e43c
 800c8c0:	bff00000 	.word	0xbff00000
 800c8c4:	000fffff 	.word	0x000fffff

0800c8c8 <_init>:
 800c8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ca:	bf00      	nop
 800c8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ce:	bc08      	pop	{r3}
 800c8d0:	469e      	mov	lr, r3
 800c8d2:	4770      	bx	lr

0800c8d4 <_fini>:
 800c8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8d6:	bf00      	nop
 800c8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8da:	bc08      	pop	{r3}
 800c8dc:	469e      	mov	lr, r3
 800c8de:	4770      	bx	lr
