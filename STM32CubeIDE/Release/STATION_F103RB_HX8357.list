
STATION_F103RB_HX8357.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d538  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00010f04  0800d648  0800d648  0001d648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e54c  0801e54c  000301e0  2**0
                  CONTENTS
  4 .ARM          00000000  0801e54c  0801e54c  000301e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801e54c  0801e54c  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e54c  0801e54c  0002e54c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e550  0801e550  0002e550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801e554  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000071c  200001e0  0801e734  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008fc  0801e734  000308fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fa60  00000000  00000000  00030209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d26  00000000  00000000  0004fc69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001ee00  00000000  00000000  0005198f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  00070790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000ba58  00000000  00000000  000707e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ec6  00000000  00000000  0007c238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088f5a  00000000  00000000  0008f0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  00118058  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d6c  00000000  00000000  001180a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00018eb0  00000000  00000000  00119e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d630 	.word	0x0800d630

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800d630 	.word	0x0800d630

08000150 <LCD_Send_Cmd>:
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
	if ((val&0x01)==1)        DB_00_S else DB_00_R
}

inline static void LCD_Send_Cmd(uint16_t cmd)
{
 8000150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000154:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000158:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800015c:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8000160:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8000164:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000168:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 800016c:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8000170:	4b24      	ldr	r3, [pc, #144]	; (8000204 <LCD_Send_Cmd+0xb4>)
 8000172:	4a25      	ldr	r2, [pc, #148]	; (8000208 <LCD_Send_Cmd+0xb8>)
 8000174:	4f25      	ldr	r7, [pc, #148]	; (800020c <LCD_Send_Cmd+0xbc>)
 8000176:	6139      	str	r1, [r7, #16]
 8000178:	f8c7 8010 	str.w	r8, [r7, #16]
 800017c:	6116      	str	r6, [r2, #16]
 800017e:	6111      	str	r1, [r2, #16]
 8000180:	611c      	str	r4, [r3, #16]
 8000182:	611d      	str	r5, [r3, #16]
 8000184:	611e      	str	r6, [r3, #16]
 8000186:	6119      	str	r1, [r3, #16]
 8000188:	f8c3 e010 	str.w	lr, [r3, #16]
 800018c:	f8c3 c010 	str.w	ip, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000190:	0943      	lsrs	r3, r0, #5
 8000192:	6115      	str	r5, [r2, #16]
 8000194:	6114      	str	r4, [r2, #16]
 8000196:	d02e      	beq.n	80001f6 <LCD_Send_Cmd+0xa6>
    GPIOx->BSRR = GPIO_Pin;
 8000198:	2110      	movs	r1, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800019a:	0903      	lsrs	r3, r0, #4
 800019c:	2b02      	cmp	r3, #2
 800019e:	6111      	str	r1, [r2, #16]
 80001a0:	d12c      	bne.n	80001fc <LCD_Send_Cmd+0xac>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80001a6:	6113      	str	r3, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80001a8:	0704      	lsls	r4, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 80001aa:	bf4c      	ite	mi
 80001ac:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001ae:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 80001b2:	4b15      	ldr	r3, [pc, #84]	; (8000208 <LCD_Send_Cmd+0xb8>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80001b4:	0741      	lsls	r1, r0, #29
 80001b6:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001b8:	bf4c      	ite	mi
 80001ba:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001bc:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 80001c0:	4b11      	ldr	r3, [pc, #68]	; (8000208 <LCD_Send_Cmd+0xb8>)
    GPIOx->BSRR = GPIO_Pin;
 80001c2:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001c4:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80001c6:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 80001c8:	bf4c      	ite	mi
 80001ca:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001cc:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LCD_Send_Cmd+0xb4>)
 80001d2:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80001d4:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 80001d6:	bf4c      	ite	mi
 80001d8:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001da:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80001de:	4b09      	ldr	r3, [pc, #36]	; (8000204 <LCD_Send_Cmd+0xb4>)
 80001e0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80001e4:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001ea:	4b08      	ldr	r3, [pc, #32]	; (800020c <LCD_Send_Cmd+0xbc>)
 80001ec:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001ee:	6119      	str	r1, [r3, #16]
 80001f0:	611a      	str	r2, [r3, #16]
	LCD_Bus(cmd);
	LCD_WR_R
	//_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 80001f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80001f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001fa:	6113      	str	r3, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 80001fc:	2220      	movs	r2, #32
 80001fe:	4b02      	ldr	r3, [pc, #8]	; (8000208 <LCD_Send_Cmd+0xb8>)
 8000200:	611a      	str	r2, [r3, #16]
  }
}
 8000202:	e7d1      	b.n	80001a8 <LCD_Send_Cmd+0x58>
 8000204:	40011000 	.word	0x40011000
 8000208:	40010800 	.word	0x40010800
 800020c:	40010c00 	.word	0x40010c00

08000210 <LCD_Send_Dat>:
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000210:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000214:	2101      	movs	r1, #1
 8000216:	4b3f      	ldr	r3, [pc, #252]	; (8000314 <LCD_Send_Dat+0x104>)
 8000218:	6119      	str	r1, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800021a:	611a      	str	r2, [r3, #16]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 800021c:	0bc3      	lsrs	r3, r0, #15
    GPIOx->BSRR = GPIO_Pin;
 800021e:	bf14      	ite	ne
 8000220:	2202      	movne	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000222:	f44f 3200 	moveq.w	r2, #131072	; 0x20000
 8000226:	4b3c      	ldr	r3, [pc, #240]	; (8000318 <LCD_Send_Dat+0x108>)
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8000228:	0441      	lsls	r1, r0, #17
 800022a:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800022c:	bf4c      	ite	mi
 800022e:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000230:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 8000234:	4b38      	ldr	r3, [pc, #224]	; (8000318 <LCD_Send_Dat+0x108>)
 8000236:	611a      	str	r2, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8000238:	0482      	lsls	r2, r0, #18
    GPIOx->BSRR = GPIO_Pin;
 800023a:	bf4c      	ite	mi
 800023c:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800023e:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 8000242:	4b36      	ldr	r3, [pc, #216]	; (800031c <LCD_Send_Dat+0x10c>)
 8000244:	611a      	str	r2, [r3, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8000246:	04c3      	lsls	r3, r0, #19
    GPIOx->BSRR = GPIO_Pin;
 8000248:	bf4c      	ite	mi
 800024a:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800024c:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 8000250:	4b32      	ldr	r3, [pc, #200]	; (800031c <LCD_Send_Dat+0x10c>)
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8000252:	0501      	lsls	r1, r0, #20
 8000254:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000256:	bf4c      	ite	mi
 8000258:	2202      	movmi	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800025a:	f44f 3200 	movpl.w	r2, #131072	; 0x20000
 800025e:	4b2f      	ldr	r3, [pc, #188]	; (800031c <LCD_Send_Dat+0x10c>)
 8000260:	611a      	str	r2, [r3, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8000262:	0542      	lsls	r2, r0, #21
    GPIOx->BSRR = GPIO_Pin;
 8000264:	bf4c      	ite	mi
 8000266:	2201      	movmi	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000268:	f44f 3280 	movpl.w	r2, #65536	; 0x10000
 800026c:	4b2b      	ldr	r3, [pc, #172]	; (800031c <LCD_Send_Dat+0x10c>)
 800026e:	611a      	str	r2, [r3, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8000270:	0583      	lsls	r3, r0, #22
    GPIOx->BSRR = GPIO_Pin;
 8000272:	bf4c      	ite	mi
 8000274:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000278:	f04f 4200 	movpl.w	r2, #2147483648	; 0x80000000
 800027c:	4b27      	ldr	r3, [pc, #156]	; (800031c <LCD_Send_Dat+0x10c>)
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 800027e:	05c1      	lsls	r1, r0, #23
 8000280:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000282:	bf4c      	ite	mi
 8000284:	f44f 4280 	movmi.w	r2, #16384	; 0x4000
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000288:	f04f 4280 	movpl.w	r2, #1073741824	; 0x40000000
 800028c:	4b23      	ldr	r3, [pc, #140]	; (800031c <LCD_Send_Dat+0x10c>)
 800028e:	611a      	str	r2, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000290:	0602      	lsls	r2, r0, #24
    GPIOx->BSRR = GPIO_Pin;
 8000292:	bf4c      	ite	mi
 8000294:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000296:	f44f 2280 	movpl.w	r2, #262144	; 0x40000
 800029a:	4b1f      	ldr	r3, [pc, #124]	; (8000318 <LCD_Send_Dat+0x108>)
 800029c:	611a      	str	r2, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800029e:	0643      	lsls	r3, r0, #25
    GPIOx->BSRR = GPIO_Pin;
 80002a0:	bf4c      	ite	mi
 80002a2:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002a4:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 80002a8:	4b1b      	ldr	r3, [pc, #108]	; (8000318 <LCD_Send_Dat+0x108>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80002aa:	0681      	lsls	r1, r0, #26
 80002ac:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80002ae:	bf4c      	ite	mi
 80002b0:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002b2:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80002b6:	4b18      	ldr	r3, [pc, #96]	; (8000318 <LCD_Send_Dat+0x108>)
 80002b8:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80002ba:	06c2      	lsls	r2, r0, #27
    GPIOx->BSRR = GPIO_Pin;
 80002bc:	bf4c      	ite	mi
 80002be:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002c0:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80002c4:	4b14      	ldr	r3, [pc, #80]	; (8000318 <LCD_Send_Dat+0x108>)
 80002c6:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80002c8:	0703      	lsls	r3, r0, #28
    GPIOx->BSRR = GPIO_Pin;
 80002ca:	bf4c      	ite	mi
 80002cc:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002ce:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 80002d2:	4b11      	ldr	r3, [pc, #68]	; (8000318 <LCD_Send_Dat+0x108>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80002d4:	0741      	lsls	r1, r0, #29
 80002d6:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80002d8:	bf4c      	ite	mi
 80002da:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002dc:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 80002e0:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <LCD_Send_Dat+0x108>)
    GPIOx->BSRR = GPIO_Pin;
 80002e2:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002e4:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80002e6:	0782      	lsls	r2, r0, #30
    GPIOx->BSRR = GPIO_Pin;
 80002e8:	bf4c      	ite	mi
 80002ea:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002ec:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80002f0:	4b0a      	ldr	r3, [pc, #40]	; (800031c <LCD_Send_Dat+0x10c>)
 80002f2:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80002f4:	07c3      	lsls	r3, r0, #31
    GPIOx->BSRR = GPIO_Pin;
 80002f6:	bf4c      	ite	mi
 80002f8:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002fa:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80002fe:	4b07      	ldr	r3, [pc, #28]	; (800031c <LCD_Send_Dat+0x10c>)
 8000300:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000304:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000306:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800030a:	4b02      	ldr	r3, [pc, #8]	; (8000314 <LCD_Send_Dat+0x104>)
 800030c:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800030e:	6119      	str	r1, [r3, #16]
 8000310:	611a      	str	r2, [r3, #16]
	LCD_Bus(dat);
	LCD_WR_R
//	_delay_us(5);
	LCD_WR_S
	LCD_CS_S
}
 8000312:	4770      	bx	lr
 8000314:	40010c00 	.word	0x40010c00
 8000318:	40010800 	.word	0x40010800
 800031c:	40011000 	.word	0x40011000

08000320 <LCD_Window>:


inline static void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{		
 8000320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000324:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8000328:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 800032c:	468b      	mov	fp, r1
 800032e:	49ab      	ldr	r1, [pc, #684]	; (80005dc <LCD_Window+0x2bc>)
 8000330:	b085      	sub	sp, #20
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8000338:	610d      	str	r5, [r1, #16]
 800033a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800033e:	610c      	str	r4, [r1, #16]
 8000340:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000344:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8000348:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 800034c:	f04f 0810 	mov.w	r8, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000350:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8000354:	4ba2      	ldr	r3, [pc, #648]	; (80005e0 <LCD_Window+0x2c0>)
 8000356:	4696      	mov	lr, r2
 8000358:	4aa2      	ldr	r2, [pc, #648]	; (80005e4 <LCD_Window+0x2c4>)
 800035a:	6116      	str	r6, [r2, #16]
 800035c:	6115      	str	r5, [r2, #16]
 800035e:	f8c3 c010 	str.w	ip, [r3, #16]
 8000362:	611f      	str	r7, [r3, #16]
 8000364:	611e      	str	r6, [r3, #16]
 8000366:	611d      	str	r5, [r3, #16]
 8000368:	f8c3 9010 	str.w	r9, [r3, #16]
 800036c:	f8c3 a010 	str.w	sl, [r3, #16]
 8000370:	6117      	str	r7, [r2, #16]
 8000372:	f8c2 c010 	str.w	ip, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000376:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800037a:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800037c:	2440      	movs	r4, #64	; 0x40
 800037e:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000380:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 8000384:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000386:	f8c3 8010 	str.w	r8, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800038a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800038e:	f04f 0802 	mov.w	r8, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000392:	611c      	str	r4, [r3, #16]
 8000394:	610e      	str	r6, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000396:	f8c1 8010 	str.w	r8, [r1, #16]
 800039a:	f44f 6880 	mov.w	r8, #1024	; 0x400
 800039e:	f8c1 8010 	str.w	r8, [r1, #16]
 80003a2:	f04f 0801 	mov.w	r8, #1
 80003a6:	f8c1 8010 	str.w	r8, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003aa:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 80003ae:	f8c1 8010 	str.w	r8, [r1, #16]
 80003b2:	6116      	str	r6, [r2, #16]
 80003b4:	6115      	str	r5, [r2, #16]
 80003b6:	f8c3 c010 	str.w	ip, [r3, #16]
 80003ba:	611f      	str	r7, [r3, #16]
 80003bc:	611e      	str	r6, [r3, #16]
 80003be:	611d      	str	r5, [r3, #16]
	uint8_t data[4] = { 0 };
	data[0] = x1 >> 8;
  data[1] = x1 & 0xFF;
  data[2] = x2 >> 8;
  data[3] = x2 & 0xFF;
 80003c0:	fa5f f58e 	uxtb.w	r5, lr
 80003c4:	f8c3 9010 	str.w	r9, [r3, #16]
 80003c8:	f8c3 a010 	str.w	sl, [r3, #16]
 80003cc:	9502      	str	r5, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80003ce:	0bc5      	lsrs	r5, r0, #15
    GPIOx->BSRR = GPIO_Pin;
 80003d0:	bf18      	it	ne
 80003d2:	2504      	movne	r5, #4
	data[0] = x1 >> 8;
 80003d4:	ea4f 2410 	mov.w	r4, r0, lsr #8
 80003d8:	bf14      	ite	ne
 80003da:	6115      	strne	r5, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003dc:	6117      	streq	r7, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80003de:	0667      	lsls	r7, r4, #25
 80003e0:	bf54      	ite	pl
 80003e2:	f44f 2500 	movpl.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80003e6:	2508      	movmi	r5, #8
 80003e8:	4a7e      	ldr	r2, [pc, #504]	; (80005e4 <LCD_Window+0x2c4>)
	data[0] = x1 >> 8;
 80003ea:	4621      	mov	r1, r4
 80003ec:	6115      	str	r5, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80003ee:	06a5      	lsls	r5, r4, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80003f0:	bf54      	ite	pl
 80003f2:	f44f 1580 	movpl.w	r5, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80003f6:	2510      	movmi	r5, #16
 80003f8:	4a7a      	ldr	r2, [pc, #488]	; (80005e4 <LCD_Window+0x2c4>)
 80003fa:	f04f 0a02 	mov.w	sl, #2
 80003fe:	6115      	str	r5, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000400:	06e2      	lsls	r2, r4, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000402:	bf54      	ite	pl
 8000404:	f44f 1500 	movpl.w	r5, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000408:	2520      	movmi	r5, #32
 800040a:	4a76      	ldr	r2, [pc, #472]	; (80005e4 <LCD_Window+0x2c4>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800040c:	0727      	lsls	r7, r4, #28
 800040e:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000410:	bf54      	ite	pl
 8000412:	f44f 0580 	movpl.w	r5, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000416:	2540      	movmi	r5, #64	; 0x40
 8000418:	4a72      	ldr	r2, [pc, #456]	; (80005e4 <LCD_Window+0x2c4>)
 800041a:	f44f 6980 	mov.w	r9, #1024	; 0x400
 800041e:	6115      	str	r5, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000420:	0765      	lsls	r5, r4, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000422:	bf54      	ite	pl
 8000424:	f44f 0500 	movpl.w	r5, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000428:	2580      	movmi	r5, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800042a:	07a4      	lsls	r4, r4, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800042c:	bf54      	ite	pl
 800042e:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000432:	2410      	movmi	r4, #16
 8000434:	4a6b      	ldr	r2, [pc, #428]	; (80005e4 <LCD_Window+0x2c4>)
 8000436:	f04f 0801 	mov.w	r8, #1
 800043a:	6115      	str	r5, [r2, #16]
 800043c:	4a68      	ldr	r2, [pc, #416]	; (80005e0 <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800043e:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000442:	6114      	str	r4, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000444:	07ca      	lsls	r2, r1, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000446:	bf54      	ite	pl
 8000448:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800044c:	2120      	movmi	r1, #32
 800044e:	4a64      	ldr	r2, [pc, #400]	; (80005e0 <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000450:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000454:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000456:	4961      	ldr	r1, [pc, #388]	; (80005dc <LCD_Window+0x2bc>)
 8000458:	4a61      	ldr	r2, [pc, #388]	; (80005e0 <LCD_Window+0x2c0>)
 800045a:	610d      	str	r5, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800045c:	f8c1 a010 	str.w	sl, [r1, #16]
 8000460:	f8c1 9010 	str.w	r9, [r1, #16]
 8000464:	f8c1 8010 	str.w	r8, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000468:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 800046c:	f8c1 8010 	str.w	r8, [r1, #16]
 8000470:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000474:	4c5b      	ldr	r4, [pc, #364]	; (80005e4 <LCD_Window+0x2c4>)
 8000476:	f44f 2c80 	mov.w	ip, #262144	; 0x40000
 800047a:	6125      	str	r5, [r4, #16]
 800047c:	6127      	str	r7, [r4, #16]
 800047e:	6111      	str	r1, [r2, #16]
 8000480:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000484:	f8c2 c010 	str.w	ip, [r2, #16]
 8000488:	6115      	str	r5, [r2, #16]
 800048a:	6117      	str	r7, [r2, #16]
 800048c:	6111      	str	r1, [r2, #16]
 800048e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  data[1] = x1 & 0xFF;
 8000492:	b2c6      	uxtb	r6, r0
 8000494:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000496:	09f2      	lsrs	r2, r6, #7
    GPIOx->BSRR = GPIO_Pin;
 8000498:	bf16      	itet	ne
 800049a:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800049c:	f8c4 c010 	streq.w	ip, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 80004a0:	6122      	strne	r2, [r4, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80004a2:	0647      	lsls	r7, r0, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004a4:	bf54      	ite	pl
 80004a6:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80004aa:	2108      	movmi	r1, #8
 80004ac:	4a4d      	ldr	r2, [pc, #308]	; (80005e4 <LCD_Window+0x2c4>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80004ae:	0685      	lsls	r5, r0, #26
 80004b0:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004b2:	bf54      	ite	pl
 80004b4:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80004b8:	2110      	movmi	r1, #16
 80004ba:	4a4a      	ldr	r2, [pc, #296]	; (80005e4 <LCD_Window+0x2c4>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80004bc:	06c4      	lsls	r4, r0, #27
 80004be:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004c0:	bf54      	ite	pl
 80004c2:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80004c6:	2120      	movmi	r1, #32
 80004c8:	4a46      	ldr	r2, [pc, #280]	; (80005e4 <LCD_Window+0x2c4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004ca:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80004ce:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80004d0:	0701      	lsls	r1, r0, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004d2:	bf54      	ite	pl
 80004d4:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80004d8:	2140      	movmi	r1, #64	; 0x40
 80004da:	4a42      	ldr	r2, [pc, #264]	; (80005e4 <LCD_Window+0x2c4>)
 80004dc:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80004e0:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80004e2:	0742      	lsls	r2, r0, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004e4:	bf54      	ite	pl
 80004e6:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80004ea:	2180      	movmi	r1, #128	; 0x80
 80004ec:	4a3d      	ldr	r2, [pc, #244]	; (80005e4 <LCD_Window+0x2c4>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80004ee:	0787      	lsls	r7, r0, #30
 80004f0:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004f2:	bf54      	ite	pl
 80004f4:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80004f8:	2110      	movmi	r1, #16
 80004fa:	4a39      	ldr	r2, [pc, #228]	; (80005e0 <LCD_Window+0x2c0>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80004fc:	07f5      	lsls	r5, r6, #31
 80004fe:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000500:	bf54      	ite	pl
 8000502:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000506:	2120      	movmi	r1, #32
 8000508:	2702      	movs	r7, #2
 800050a:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800050e:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000512:	4a33      	ldr	r2, [pc, #204]	; (80005e0 <LCD_Window+0x2c0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000514:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000518:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800051a:	4930      	ldr	r1, [pc, #192]	; (80005dc <LCD_Window+0x2bc>)
 800051c:	4a30      	ldr	r2, [pc, #192]	; (80005e0 <LCD_Window+0x2c0>)
 800051e:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000520:	610f      	str	r7, [r1, #16]
 8000522:	f8c1 a010 	str.w	sl, [r1, #16]
 8000526:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800052a:	f8c1 8010 	str.w	r8, [r1, #16]
 800052e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000532:	482c      	ldr	r0, [pc, #176]	; (80005e4 <LCD_Window+0x2c4>)
 8000534:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8000538:	6104      	str	r4, [r0, #16]
 800053a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800053e:	6105      	str	r5, [r0, #16]
 8000540:	6111      	str	r1, [r2, #16]
 8000542:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000546:	6116      	str	r6, [r2, #16]
 8000548:	6114      	str	r4, [r2, #16]
 800054a:	6115      	str	r5, [r2, #16]
 800054c:	f8c2 c010 	str.w	ip, [r2, #16]
 8000550:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000552:	ea5f 32de 	movs.w	r2, lr, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8000556:	bf18      	it	ne
 8000558:	2204      	movne	r2, #4
  data[2] = x2 >> 8;
 800055a:	ea4f 231e 	mov.w	r3, lr, lsr #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800055e:	bf0c      	ite	eq
 8000560:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000562:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000564:	065c      	lsls	r4, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000566:	bf54      	ite	pl
 8000568:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800056c:	2108      	movmi	r1, #8
 800056e:	4a1d      	ldr	r2, [pc, #116]	; (80005e4 <LCD_Window+0x2c4>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000570:	0698      	lsls	r0, r3, #26
 8000572:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000574:	bf54      	ite	pl
 8000576:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800057a:	2110      	movmi	r1, #16
 800057c:	4a19      	ldr	r2, [pc, #100]	; (80005e4 <LCD_Window+0x2c4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800057e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000582:	6111      	str	r1, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000584:	06d9      	lsls	r1, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000586:	bf54      	ite	pl
 8000588:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800058c:	2120      	movmi	r1, #32
 800058e:	4a15      	ldr	r2, [pc, #84]	; (80005e4 <LCD_Window+0x2c4>)
 8000590:	f04f 0a02 	mov.w	sl, #2
 8000594:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000596:	071a      	lsls	r2, r3, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000598:	bf54      	ite	pl
 800059a:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800059e:	2140      	movmi	r1, #64	; 0x40
 80005a0:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <LCD_Window+0x2c4>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80005a2:	075f      	lsls	r7, r3, #29
 80005a4:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005a6:	bf54      	ite	pl
 80005a8:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80005ac:	2180      	movmi	r1, #128	; 0x80
 80005ae:	4a0d      	ldr	r2, [pc, #52]	; (80005e4 <LCD_Window+0x2c4>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80005b0:	079e      	lsls	r6, r3, #30
 80005b2:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005b4:	bf54      	ite	pl
 80005b6:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80005ba:	2210      	movmi	r2, #16
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <LCD_Window+0x2c0>)
 80005be:	f44f 6980 	mov.w	r9, #1024	; 0x400
 80005c2:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80005c4:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80005c8:	f013 0f01 	tst.w	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005cc:	bf0c      	ite	eq
 80005ce:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80005d2:	2220      	movne	r2, #32
 80005d4:	f04f 0801 	mov.w	r8, #1
 80005d8:	e006      	b.n	80005e8 <LCD_Window+0x2c8>
 80005da:	bf00      	nop
 80005dc:	40010c00 	.word	0x40010c00
 80005e0:	40011000 	.word	0x40011000
 80005e4:	40010800 	.word	0x40010800
 80005e8:	4bac      	ldr	r3, [pc, #688]	; (800089c <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005ea:	f44f 2580 	mov.w	r5, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80005ee:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005f0:	4aab      	ldr	r2, [pc, #684]	; (80008a0 <LCD_Window+0x580>)
 80005f2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80005f6:	6110      	str	r0, [r2, #16]
 80005f8:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80005fc:	f8c2 a010 	str.w	sl, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000600:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000604:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000608:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 800060c:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000610:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000614:	4ba1      	ldr	r3, [pc, #644]	; (800089c <LCD_Window+0x57c>)
 8000616:	49a3      	ldr	r1, [pc, #652]	; (80008a4 <LCD_Window+0x584>)
 8000618:	f8c2 8010 	str.w	r8, [r2, #16]
 800061c:	6108      	str	r0, [r1, #16]
 800061e:	610c      	str	r4, [r1, #16]
 8000620:	f8c3 c010 	str.w	ip, [r3, #16]
 8000624:	611d      	str	r5, [r3, #16]
 8000626:	6118      	str	r0, [r3, #16]
 8000628:	611c      	str	r4, [r3, #16]
 800062a:	611f      	str	r7, [r3, #16]
 800062c:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800062e:	fa5f f38e 	uxtb.w	r3, lr
 8000632:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 8000634:	bf16      	itet	ne
 8000636:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000638:	610d      	streq	r5, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800063a:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800063c:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8000640:	bf14      	ite	ne
 8000642:	2208      	movne	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000644:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000648:	4b96      	ldr	r3, [pc, #600]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800064a:	f01e 0f20 	tst.w	lr, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800064e:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000650:	bf14      	ite	ne
 8000652:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000654:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000658:	4b92      	ldr	r3, [pc, #584]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800065a:	f01e 0f10 	tst.w	lr, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800065e:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000660:	bf14      	ite	ne
 8000662:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000664:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000668:	4b8e      	ldr	r3, [pc, #568]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800066a:	f01e 0f08 	tst.w	lr, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800066e:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000670:	bf14      	ite	ne
 8000672:	2240      	movne	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000674:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000678:	4b8a      	ldr	r3, [pc, #552]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800067a:	f01e 0f04 	tst.w	lr, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800067e:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000680:	bf14      	ite	ne
 8000682:	2280      	movne	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000684:	f44f 0200 	moveq.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000688:	4b86      	ldr	r3, [pc, #536]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800068a:	f01e 0f02 	tst.w	lr, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800068e:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000690:	bf14      	ite	ne
 8000692:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000694:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8000698:	4b80      	ldr	r3, [pc, #512]	; (800089c <LCD_Window+0x57c>)
 800069a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800069e:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80006a0:	9b02      	ldr	r3, [sp, #8]
 80006a2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80006a6:	07dd      	lsls	r5, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 80006a8:	bf4c      	ite	mi
 80006aa:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006ac:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 80006b0:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80006b4:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80006b8:	f04f 0802 	mov.w	r8, #2
 80006bc:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006c0:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
 80006c4:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80006c8:	4b74      	ldr	r3, [pc, #464]	; (800089c <LCD_Window+0x57c>)
 80006ca:	4975      	ldr	r1, [pc, #468]	; (80008a0 <LCD_Window+0x580>)
 80006cc:	611a      	str	r2, [r3, #16]
 80006ce:	4b73      	ldr	r3, [pc, #460]	; (800089c <LCD_Window+0x57c>)
 80006d0:	4a74      	ldr	r2, [pc, #464]	; (80008a4 <LCD_Window+0x584>)
 80006d2:	6108      	str	r0, [r1, #16]
 80006d4:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80006d8:	f8c1 8010 	str.w	r8, [r1, #16]
 80006dc:	f04f 0910 	mov.w	r9, #16
 80006e0:	f8c1 e010 	str.w	lr, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006e4:	610c      	str	r4, [r1, #16]
 80006e6:	f8c1 c010 	str.w	ip, [r1, #16]
 80006ea:	6110      	str	r0, [r2, #16]
 80006ec:	6114      	str	r4, [r2, #16]
 80006ee:	611d      	str	r5, [r3, #16]
 80006f0:	611e      	str	r6, [r3, #16]
 80006f2:	6118      	str	r0, [r3, #16]
 80006f4:	611c      	str	r4, [r3, #16]
 80006f6:	611f      	str	r7, [r3, #16]
 80006f8:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 80006fc:	f8c3 a010 	str.w	sl, [r3, #16]
 8000700:	6116      	str	r6, [r2, #16]
 8000702:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000704:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000708:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 800070a:	2740      	movs	r7, #64	; 0x40
 800070c:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800070e:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
 8000712:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000714:	2720      	movs	r7, #32
 8000716:	f8c3 9010 	str.w	r9, [r3, #16]
 800071a:	611f      	str	r7, [r3, #16]
 800071c:	2701      	movs	r7, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800071e:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000720:	f8c1 8010 	str.w	r8, [r1, #16]
 8000724:	f8c1 e010 	str.w	lr, [r1, #16]
 8000728:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800072a:	f8c1 c010 	str.w	ip, [r1, #16]
 800072e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000732:	6110      	str	r0, [r2, #16]
 8000734:	6114      	str	r4, [r2, #16]
 8000736:	611d      	str	r5, [r3, #16]
 8000738:	611e      	str	r6, [r3, #16]
 800073a:	6118      	str	r0, [r3, #16]
 800073c:	611c      	str	r4, [r3, #16]
	LCD_Send_Cmd(HX8357_CASET);
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
	data[0] = y1 >> 8;
  data[1] = y1;
  data[2] = y2 >> 8;
 800073e:	9c01      	ldr	r4, [sp, #4]
 8000740:	6119      	str	r1, [r3, #16]
 8000742:	f8c3 a010 	str.w	sl, [r3, #16]
 8000746:	0a23      	lsrs	r3, r4, #8
  data[3] = y2;
 8000748:	b2e4      	uxtb	r4, r4
 800074a:	9402      	str	r4, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800074c:	ea5f 34db 	movs.w	r4, fp, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8000750:	bf18      	it	ne
 8000752:	2404      	movne	r4, #4
	data[0] = y1 >> 8;
 8000754:	ea4f 211b 	mov.w	r1, fp, lsr #8
  data[2] = y2 >> 8;
 8000758:	9303      	str	r3, [sp, #12]
 800075a:	bf14      	ite	ne
 800075c:	6114      	strne	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800075e:	6116      	streq	r6, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000760:	064c      	lsls	r4, r1, #25
 8000762:	bf54      	ite	pl
 8000764:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000768:	2408      	movmi	r4, #8
 800076a:	4a4e      	ldr	r2, [pc, #312]	; (80008a4 <LCD_Window+0x584>)
	data[0] = y1 >> 8;
 800076c:	4608      	mov	r0, r1
 800076e:	6114      	str	r4, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000770:	068a      	lsls	r2, r1, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000772:	bf54      	ite	pl
 8000774:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000778:	2410      	movmi	r4, #16
 800077a:	4a4a      	ldr	r2, [pc, #296]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800077c:	06cf      	lsls	r7, r1, #27
 800077e:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000780:	bf54      	ite	pl
 8000782:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000786:	2420      	movmi	r4, #32
 8000788:	4a46      	ldr	r2, [pc, #280]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800078a:	070e      	lsls	r6, r1, #28
 800078c:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800078e:	bf54      	ite	pl
 8000790:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000794:	2440      	movmi	r4, #64	; 0x40
 8000796:	4a43      	ldr	r2, [pc, #268]	; (80008a4 <LCD_Window+0x584>)
 8000798:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 800079c:	6114      	str	r4, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800079e:	074c      	lsls	r4, r1, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007a0:	bf54      	ite	pl
 80007a2:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80007a6:	2480      	movmi	r4, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80007a8:	0789      	lsls	r1, r1, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007aa:	bf54      	ite	pl
 80007ac:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80007b0:	2110      	movmi	r1, #16
 80007b2:	4a3c      	ldr	r2, [pc, #240]	; (80008a4 <LCD_Window+0x584>)
 80007b4:	f04f 0901 	mov.w	r9, #1
 80007b8:	6114      	str	r4, [r2, #16]
 80007ba:	4a38      	ldr	r2, [pc, #224]	; (800089c <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007bc:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 80007c0:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80007c2:	07c2      	lsls	r2, r0, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007c4:	bf54      	ite	pl
 80007c6:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80007ca:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007cc:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 80007d0:	f04f 0c02 	mov.w	ip, #2
 80007d4:	4a31      	ldr	r2, [pc, #196]	; (800089c <LCD_Window+0x57c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007d6:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80007da:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007dc:	4930      	ldr	r1, [pc, #192]	; (80008a0 <LCD_Window+0x580>)
 80007de:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80007e2:	610c      	str	r4, [r1, #16]
 80007e4:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80007e8:	f8c1 c010 	str.w	ip, [r1, #16]
 80007ec:	f8c1 a010 	str.w	sl, [r1, #16]
 80007f0:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007f4:	f8c1 8010 	str.w	r8, [r1, #16]
 80007f8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80007fc:	4a27      	ldr	r2, [pc, #156]	; (800089c <LCD_Window+0x57c>)
 80007fe:	4829      	ldr	r0, [pc, #164]	; (80008a4 <LCD_Window+0x584>)
  data[1] = y1;
 8000800:	fa5f f58b 	uxtb.w	r5, fp
 8000804:	6104      	str	r4, [r0, #16]
 8000806:	6106      	str	r6, [r0, #16]
 8000808:	f8c2 e010 	str.w	lr, [r2, #16]
 800080c:	6117      	str	r7, [r2, #16]
 800080e:	6114      	str	r4, [r2, #16]
 8000810:	6116      	str	r6, [r2, #16]
 8000812:	6111      	str	r1, [r2, #16]
 8000814:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000818:	6111      	str	r1, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800081a:	09ea      	lsrs	r2, r5, #7
    GPIOx->BSRR = GPIO_Pin;
 800081c:	bf16      	itet	ne
 800081e:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000820:	6107      	streq	r7, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000822:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000824:	f01b 0f40 	tst.w	fp, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000828:	bf0c      	ite	eq
 800082a:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800082e:	2108      	movne	r1, #8
 8000830:	4a1c      	ldr	r2, [pc, #112]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000832:	f01b 0f20 	tst.w	fp, #32
 8000836:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000838:	bf0c      	ite	eq
 800083a:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800083e:	2110      	movne	r1, #16
 8000840:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000842:	f01b 0f10 	tst.w	fp, #16
 8000846:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000848:	bf0c      	ite	eq
 800084a:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800084e:	2120      	movne	r1, #32
 8000850:	4a14      	ldr	r2, [pc, #80]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000852:	f01b 0f08 	tst.w	fp, #8
 8000856:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000858:	bf0c      	ite	eq
 800085a:	f44f 0180 	moveq.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800085e:	2140      	movne	r1, #64	; 0x40
 8000860:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000862:	f01b 0f04 	tst.w	fp, #4
 8000866:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000868:	bf0c      	ite	eq
 800086a:	f44f 0100 	moveq.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800086e:	2180      	movne	r1, #128	; 0x80
 8000870:	4a0c      	ldr	r2, [pc, #48]	; (80008a4 <LCD_Window+0x584>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000872:	f01b 0f02 	tst.w	fp, #2
 8000876:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000878:	bf0c      	ite	eq
 800087a:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800087e:	2110      	movne	r1, #16
 8000880:	4a06      	ldr	r2, [pc, #24]	; (800089c <LCD_Window+0x57c>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000882:	07ef      	lsls	r7, r5, #31
 8000884:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000886:	bf54      	ite	pl
 8000888:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800088c:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800088e:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 8000892:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8000896:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 800089a:	e005      	b.n	80008a8 <LCD_Window+0x588>
 800089c:	40011000 	.word	0x40011000
 80008a0:	40010c00 	.word	0x40010c00
 80008a4:	40010800 	.word	0x40010800
 80008a8:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80008ac:	f04f 0b02 	mov.w	fp, #2
 80008b0:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80008b4:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008b8:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 80008bc:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 80008c0:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 80008c4:	4a7d      	ldr	r2, [pc, #500]	; (8000abc <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008c6:	487e      	ldr	r0, [pc, #504]	; (8000ac0 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 80008c8:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008ca:	497e      	ldr	r1, [pc, #504]	; (8000ac4 <LCD_Window+0x7a4>)
 80008cc:	4a7b      	ldr	r2, [pc, #492]	; (8000abc <LCD_Window+0x79c>)
 80008ce:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 80008d0:	f8c1 b010 	str.w	fp, [r1, #16]
 80008d4:	f8c1 a010 	str.w	sl, [r1, #16]
 80008d8:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008dc:	f8c1 8010 	str.w	r8, [r1, #16]
 80008e0:	6104      	str	r4, [r0, #16]
 80008e2:	6105      	str	r5, [r0, #16]
 80008e4:	f8c2 e010 	str.w	lr, [r2, #16]
 80008e8:	6116      	str	r6, [r2, #16]
 80008ea:	6114      	str	r4, [r2, #16]
 80008ec:	6115      	str	r5, [r2, #16]
 80008ee:	f8c2 c010 	str.w	ip, [r2, #16]
 80008f2:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80008f4:	9a01      	ldr	r2, [sp, #4]
    GPIOx->BSRR = GPIO_Pin;
 80008f6:	f04f 0a02 	mov.w	sl, #2
 80008fa:	0bd2      	lsrs	r2, r2, #15
 80008fc:	bf16      	itet	ne
 80008fe:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000900:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000902:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000904:	065e      	lsls	r6, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000906:	bf54      	ite	pl
 8000908:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800090c:	2108      	movmi	r1, #8
 800090e:	4a6c      	ldr	r2, [pc, #432]	; (8000ac0 <LCD_Window+0x7a0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000910:	069d      	lsls	r5, r3, #26
 8000912:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000914:	bf54      	ite	pl
 8000916:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800091a:	2110      	movmi	r1, #16
 800091c:	4a68      	ldr	r2, [pc, #416]	; (8000ac0 <LCD_Window+0x7a0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800091e:	06dc      	lsls	r4, r3, #27
 8000920:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000922:	bf54      	ite	pl
 8000924:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000928:	2120      	movmi	r1, #32
 800092a:	4a65      	ldr	r2, [pc, #404]	; (8000ac0 <LCD_Window+0x7a0>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800092c:	0718      	lsls	r0, r3, #28
 800092e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000930:	bf54      	ite	pl
 8000932:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000936:	2140      	movmi	r1, #64	; 0x40
 8000938:	4a61      	ldr	r2, [pc, #388]	; (8000ac0 <LCD_Window+0x7a0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800093a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 800093e:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000940:	0759      	lsls	r1, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000942:	bf54      	ite	pl
 8000944:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000948:	2180      	movmi	r1, #128	; 0x80
 800094a:	4a5d      	ldr	r2, [pc, #372]	; (8000ac0 <LCD_Window+0x7a0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800094c:	079b      	lsls	r3, r3, #30
 800094e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000950:	bf54      	ite	pl
 8000952:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000956:	2210      	movmi	r2, #16
 8000958:	4b58      	ldr	r3, [pc, #352]	; (8000abc <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800095a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 800095e:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000960:	9b03      	ldr	r3, [sp, #12]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000962:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8000966:	07df      	lsls	r7, r3, #31
 8000968:	bf54      	ite	pl
 800096a:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800096e:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000970:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000974:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8000978:	f04f 0801 	mov.w	r8, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800097c:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8000980:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000984:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000988:	4b4c      	ldr	r3, [pc, #304]	; (8000abc <LCD_Window+0x79c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800098a:	494d      	ldr	r1, [pc, #308]	; (8000ac0 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 800098c:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800098e:	4a4d      	ldr	r2, [pc, #308]	; (8000ac4 <LCD_Window+0x7a4>)
 8000990:	4b4a      	ldr	r3, [pc, #296]	; (8000abc <LCD_Window+0x79c>)
 8000992:	6110      	str	r0, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000994:	f8c2 a010 	str.w	sl, [r2, #16]
 8000998:	f8c2 9010 	str.w	r9, [r2, #16]
 800099c:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009a0:	f8c2 e010 	str.w	lr, [r2, #16]
 80009a4:	6108      	str	r0, [r1, #16]
 80009a6:	610c      	str	r4, [r1, #16]
 80009a8:	f8c3 c010 	str.w	ip, [r3, #16]
 80009ac:	611d      	str	r5, [r3, #16]
 80009ae:	6118      	str	r0, [r3, #16]
 80009b0:	611c      	str	r4, [r3, #16]
 80009b2:	611f      	str	r7, [r3, #16]
 80009b4:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80009b6:	9b02      	ldr	r3, [sp, #8]
 80009b8:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009bc:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 80009be:	bf1c      	itt	ne
 80009c0:	2304      	movne	r3, #4
 80009c2:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80009c4:	9b01      	ldr	r3, [sp, #4]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009c6:	bf08      	it	eq
 80009c8:	610d      	streq	r5, [r1, #16]
 80009ca:	065e      	lsls	r6, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 80009cc:	bf4c      	ite	mi
 80009ce:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009d0:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
 80009d4:	4b3a      	ldr	r3, [pc, #232]	; (8000ac0 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 80009d6:	2602      	movs	r6, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009d8:	611a      	str	r2, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80009da:	9b01      	ldr	r3, [sp, #4]
 80009dc:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 80009e0:	069d      	lsls	r5, r3, #26
    GPIOx->BSRR = GPIO_Pin;
 80009e2:	bf4c      	ite	mi
 80009e4:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009e6:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 80009ea:	4b35      	ldr	r3, [pc, #212]	; (8000ac0 <LCD_Window+0x7a0>)
    GPIOx->BSRR = GPIO_Pin;
 80009ec:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009f0:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80009f2:	9b01      	ldr	r3, [sp, #4]
 80009f4:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 80009f8:	06dc      	lsls	r4, r3, #27
    GPIOx->BSRR = GPIO_Pin;
 80009fa:	bf4c      	ite	mi
 80009fc:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009fe:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000a02:	4b2f      	ldr	r3, [pc, #188]	; (8000ac0 <LCD_Window+0x7a0>)
 8000a04:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8000a08:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000a0a:	9b01      	ldr	r3, [sp, #4]
 8000a0c:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 8000a10:	0718      	lsls	r0, r3, #28
    GPIOx->BSRR = GPIO_Pin;
 8000a12:	bf4c      	ite	mi
 8000a14:	2240      	movmi	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a16:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
 8000a1a:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <LCD_Window+0x7a0>)
 8000a1c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a20:	611a      	str	r2, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000a22:	9b01      	ldr	r3, [sp, #4]
 8000a24:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000a28:	0759      	lsls	r1, r3, #29
    GPIOx->BSRR = GPIO_Pin;
 8000a2a:	bf4c      	ite	mi
 8000a2c:	2280      	movmi	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a2e:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
 8000a32:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <LCD_Window+0x7a0>)
 8000a34:	4922      	ldr	r1, [pc, #136]	; (8000ac0 <LCD_Window+0x7a0>)
 8000a36:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000a38:	9b01      	ldr	r3, [sp, #4]
    GPIOx->BSRR = GPIO_Pin;
 8000a3a:	f04f 0910 	mov.w	r9, #16
 8000a3e:	079a      	lsls	r2, r3, #30
 8000a40:	bf4c      	ite	mi
 8000a42:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a44:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <LCD_Window+0x79c>)
    GPIOx->BSRR = GPIO_Pin;
 8000a4a:	f04f 0840 	mov.w	r8, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a4e:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000a50:	9b02      	ldr	r3, [sp, #8]
 8000a52:	07db      	lsls	r3, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 8000a54:	bf4c      	ite	mi
 8000a56:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a58:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <LCD_Window+0x79c>)
 8000a5e:	611a      	str	r2, [r3, #16]
 8000a60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a64:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <LCD_Window+0x7a4>)
 8000a66:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000a68:	611e      	str	r6, [r3, #16]
 8000a6a:	611d      	str	r5, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a6c:	611c      	str	r4, [r3, #16]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	f102 5270 	add.w	r2, r2, #1006632960	; 0x3c000000
 8000a74:	f502 3288 	add.w	r2, r2, #69632	; 0x11000
 8000a78:	6108      	str	r0, [r1, #16]
 8000a7a:	610c      	str	r4, [r1, #16]
 8000a7c:	f8c2 c010 	str.w	ip, [r2, #16]
 8000a80:	f8c2 e010 	str.w	lr, [r2, #16]
 8000a84:	6110      	str	r0, [r2, #16]
 8000a86:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000a88:	2480      	movs	r4, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a8a:	f8c2 b010 	str.w	fp, [r2, #16]
 8000a8e:	f8c2 a010 	str.w	sl, [r2, #16]
 8000a92:	f8c1 e010 	str.w	lr, [r1, #16]
 8000a96:	f8c1 c010 	str.w	ip, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000a9a:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a9e:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000aa0:	f8c1 8010 	str.w	r8, [r1, #16]
 8000aa4:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aa6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000aaa:	6111      	str	r1, [r2, #16]
 8000aac:	6117      	str	r7, [r2, #16]
 8000aae:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ab0:	611e      	str	r6, [r3, #16]
 8000ab2:	611d      	str	r5, [r3, #16]
	LCD_Send_Cmd(HX8357_PASET);
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
  LCD_Send_Cmd(HX83h7_RAMWR);
}
 8000ab4:	b005      	add	sp, #20
 8000ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aba:	bf00      	nop
 8000abc:	40011000 	.word	0x40011000
 8000ac0:	40010800 	.word	0x40010800
 8000ac4:	40010c00 	.word	0x40010c00

08000ac8 <LCD_Rect_Fill>:
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(0, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 8000ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000acc:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8000ad0:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
 8000ad4:	4caf      	ldr	r4, [pc, #700]	; (8000d94 <LCD_Rect_Fill+0x2cc>)
 8000ad6:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8000ada:	6125      	str	r5, [r4, #16]
 8000adc:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000ae0:	f8c4 a010 	str.w	sl, [r4, #16]
 8000ae4:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000ae8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8000aec:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000af0:	4681      	mov	r9, r0
 8000af2:	4696      	mov	lr, r2
 8000af4:	48a8      	ldr	r0, [pc, #672]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
 8000af6:	4aa9      	ldr	r2, [pc, #676]	; (8000d9c <LCD_Rect_Fill+0x2d4>)
 8000af8:	6106      	str	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000afa:	f04f 0b10 	mov.w	fp, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000afe:	6105      	str	r5, [r0, #16]
 8000b00:	f8c2 c010 	str.w	ip, [r2, #16]
 8000b04:	6117      	str	r7, [r2, #16]
 8000b06:	6116      	str	r6, [r2, #16]
 8000b08:	6115      	str	r5, [r2, #16]
 8000b0a:	f8c2 8010 	str.w	r8, [r2, #16]
 8000b0e:	f8c2 a010 	str.w	sl, [r2, #16]
 8000b12:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
 8000b16:	6107      	str	r7, [r0, #16]
 8000b18:	f8c0 c010 	str.w	ip, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b1c:	f8c0 b010 	str.w	fp, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b20:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b24:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8000b28:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b2c:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
 8000b30:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b34:	f8c2 b010 	str.w	fp, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b38:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000b3c:	f04f 0b02 	mov.w	fp, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b40:	f8c2 a010 	str.w	sl, [r2, #16]
 8000b44:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000b46:	f8c4 b010 	str.w	fp, [r4, #16]
 8000b4a:	f44f 6b80 	mov.w	fp, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b4e:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000b52:	f8c4 b010 	str.w	fp, [r4, #16]
 8000b56:	f04f 0b01 	mov.w	fp, #1
 8000b5a:	f8c4 b010 	str.w	fp, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b5e:	f8c4 a010 	str.w	sl, [r4, #16]
 8000b62:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 8000b66:	6106      	str	r6, [r0, #16]
 8000b68:	6105      	str	r5, [r0, #16]
 8000b6a:	f8c2 c010 	str.w	ip, [r2, #16]
 8000b6e:	6117      	str	r7, [r2, #16]
 8000b70:	6116      	str	r6, [r2, #16]
 8000b72:	6115      	str	r5, [r2, #16]
	uint32_t i = 0;
	uint32_t j = (uint32_t) w * (uint32_t) h;
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000b74:	1e4d      	subs	r5, r1, #1
 8000b76:	441d      	add	r5, r3
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8000b78:	fb03 f30e 	mul.w	r3, r3, lr
 8000b7c:	f8c2 8010 	str.w	r8, [r2, #16]
 8000b80:	f8c2 a010 	str.w	sl, [r2, #16]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000b84:	f109 32ff 	add.w	r2, r9, #4294967295
{
 8000b88:	b08f      	sub	sp, #60	; 0x3c
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000b8a:	4472      	add	r2, lr
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8000b8c:	9301      	str	r3, [sp, #4]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000b8e:	b293      	uxth	r3, r2
 8000b90:	9302      	str	r3, [sp, #8]
  data[2] = x2 >> 8;
 8000b92:	f3c5 2207 	ubfx	r2, r5, #8, #8
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8000b96:	b2ab      	uxth	r3, r5
  data[3] = x2 & 0xFF;
 8000b98:	b2ed      	uxtb	r5, r5
 8000b9a:	9503      	str	r5, [sp, #12]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000b9c:	0bcd      	lsrs	r5, r1, #15
    GPIOx->BSRR = GPIO_Pin;
 8000b9e:	bf18      	it	ne
 8000ba0:	2504      	movne	r5, #4
	data[0] = x1 >> 8;
 8000ba2:	ea4f 2411 	mov.w	r4, r1, lsr #8
  data[2] = x2 >> 8;
 8000ba6:	9204      	str	r2, [sp, #16]
 8000ba8:	bf14      	ite	ne
 8000baa:	6105      	strne	r5, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bac:	6107      	streq	r7, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000bae:	0667      	lsls	r7, r4, #25
 8000bb0:	bf54      	ite	pl
 8000bb2:	f44f 2500 	movpl.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000bb6:	2508      	movmi	r5, #8
 8000bb8:	4877      	ldr	r0, [pc, #476]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	data[0] = x1 >> 8;
 8000bba:	4626      	mov	r6, r4
 8000bbc:	6105      	str	r5, [r0, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000bbe:	06a5      	lsls	r5, r4, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bc0:	bf54      	ite	pl
 8000bc2:	f44f 1580 	movpl.w	r5, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000bc6:	2510      	movmi	r5, #16
 8000bc8:	4873      	ldr	r0, [pc, #460]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
 8000bca:	f04f 0b02 	mov.w	fp, #2
 8000bce:	6105      	str	r5, [r0, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000bd0:	06e0      	lsls	r0, r4, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bd2:	bf54      	ite	pl
 8000bd4:	f44f 1500 	movpl.w	r5, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000bd8:	2520      	movmi	r5, #32
 8000bda:	486f      	ldr	r0, [pc, #444]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000bdc:	0727      	lsls	r7, r4, #28
 8000bde:	6105      	str	r5, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000be0:	bf54      	ite	pl
 8000be2:	f44f 0580 	movpl.w	r5, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000be6:	2540      	movmi	r5, #64	; 0x40
 8000be8:	486b      	ldr	r0, [pc, #428]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
 8000bea:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000bee:	6105      	str	r5, [r0, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000bf0:	0765      	lsls	r5, r4, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bf2:	bf54      	ite	pl
 8000bf4:	f44f 0500 	movpl.w	r5, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000bf8:	2580      	movmi	r5, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000bfa:	07a4      	lsls	r4, r4, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bfc:	bf54      	ite	pl
 8000bfe:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000c02:	2410      	movmi	r4, #16
 8000c04:	4864      	ldr	r0, [pc, #400]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c06:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000c0a:	6105      	str	r5, [r0, #16]
 8000c0c:	4863      	ldr	r0, [pc, #396]	; (8000d9c <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c0e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000c12:	6104      	str	r4, [r0, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000c14:	07f0      	lsls	r0, r6, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c16:	bf54      	ite	pl
 8000c18:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000c1c:	2420      	movmi	r4, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c1e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000c22:	485e      	ldr	r0, [pc, #376]	; (8000d9c <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c24:	4d5c      	ldr	r5, [pc, #368]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = GPIO_Pin;
 8000c26:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c28:	4c5a      	ldr	r4, [pc, #360]	; (8000d94 <LCD_Rect_Fill+0x2cc>)
 8000c2a:	485c      	ldr	r0, [pc, #368]	; (8000d9c <LCD_Rect_Fill+0x2d4>)
 8000c2c:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c2e:	f8c4 b010 	str.w	fp, [r4, #16]
 8000c32:	f8c4 a010 	str.w	sl, [r4, #16]
 8000c36:	f04f 0a01 	mov.w	sl, #1
 8000c3a:	f8c4 a010 	str.w	sl, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c3e:	f8c4 8010 	str.w	r8, [r4, #16]
 8000c42:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8000c46:	612e      	str	r6, [r5, #16]
 8000c48:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 8000c4c:	612f      	str	r7, [r5, #16]
 8000c4e:	6104      	str	r4, [r0, #16]
 8000c50:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8000c54:	f8c0 e010 	str.w	lr, [r0, #16]
 8000c58:	6106      	str	r6, [r0, #16]
 8000c5a:	6107      	str	r7, [r0, #16]
 8000c5c:	6104      	str	r4, [r0, #16]
 8000c5e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  data[1] = x1 & 0xFF;
 8000c62:	fa5f fc81 	uxtb.w	ip, r1
 8000c66:	6104      	str	r4, [r0, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000c68:	ea5f 10dc 	movs.w	r0, ip, lsr #7
    GPIOx->BSRR = GPIO_Pin;
 8000c6c:	bf16      	itet	ne
 8000c6e:	2004      	movne	r0, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c70:	f8c5 e010 	streq.w	lr, [r5, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000c74:	6128      	strne	r0, [r5, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000c76:	064f      	lsls	r7, r1, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c78:	bf54      	ite	pl
 8000c7a:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000c7e:	2408      	movmi	r4, #8
 8000c80:	4845      	ldr	r0, [pc, #276]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000c82:	068e      	lsls	r6, r1, #26
 8000c84:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c86:	bf54      	ite	pl
 8000c88:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000c8c:	2410      	movmi	r4, #16
 8000c8e:	4842      	ldr	r0, [pc, #264]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000c90:	06cd      	lsls	r5, r1, #27
 8000c92:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c94:	bf54      	ite	pl
 8000c96:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000c9a:	2420      	movmi	r4, #32
 8000c9c:	483e      	ldr	r0, [pc, #248]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c9e:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000ca2:	6104      	str	r4, [r0, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000ca4:	070c      	lsls	r4, r1, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ca6:	bf54      	ite	pl
 8000ca8:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000cac:	2440      	movmi	r4, #64	; 0x40
 8000cae:	483a      	ldr	r0, [pc, #232]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
 8000cb0:	f04f 0b02 	mov.w	fp, #2
 8000cb4:	6104      	str	r4, [r0, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000cb6:	0748      	lsls	r0, r1, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cb8:	bf54      	ite	pl
 8000cba:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000cbe:	2480      	movmi	r4, #128	; 0x80
 8000cc0:	4835      	ldr	r0, [pc, #212]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000cc2:	078f      	lsls	r7, r1, #30
 8000cc4:	6104      	str	r4, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cc6:	bf54      	ite	pl
 8000cc8:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000ccc:	2010      	movmi	r0, #16
 8000cce:	4933      	ldr	r1, [pc, #204]	; (8000d9c <LCD_Rect_Fill+0x2d4>)
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000cd0:	f01c 0f01 	tst.w	ip, #1
 8000cd4:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cd6:	bf0c      	ite	eq
 8000cd8:	f44f 1000 	moveq.w	r0, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000cdc:	2020      	movne	r0, #32
 8000cde:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000ce2:	492e      	ldr	r1, [pc, #184]	; (8000d9c <LCD_Rect_Fill+0x2d4>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ce4:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000ce8:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cea:	482a      	ldr	r0, [pc, #168]	; (8000d94 <LCD_Rect_Fill+0x2cc>)
 8000cec:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8000cf0:	6105      	str	r5, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000cf2:	f8c0 b010 	str.w	fp, [r0, #16]
 8000cf6:	f8c0 a010 	str.w	sl, [r0, #16]
 8000cfa:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cfe:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000d02:	f8c0 a010 	str.w	sl, [r0, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d06:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8000d0a:	f8c0 8010 	str.w	r8, [r0, #16]
 8000d0e:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8000d12:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000d16:	4921      	ldr	r1, [pc, #132]	; (8000d9c <LCD_Rect_Fill+0x2d4>)
 8000d18:	4c1f      	ldr	r4, [pc, #124]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = GPIO_Pin;
 8000d1a:	f04f 0b02 	mov.w	fp, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d1e:	6125      	str	r5, [r4, #16]
 8000d20:	6126      	str	r6, [r4, #16]
 8000d22:	f8c1 e010 	str.w	lr, [r1, #16]
 8000d26:	610f      	str	r7, [r1, #16]
 8000d28:	610d      	str	r5, [r1, #16]
 8000d2a:	610e      	str	r6, [r1, #16]
 8000d2c:	6108      	str	r0, [r1, #16]
 8000d2e:	f8c1 c010 	str.w	ip, [r1, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000d32:	0bd9      	lsrs	r1, r3, #15
    GPIOx->BSRR = GPIO_Pin;
 8000d34:	bf16      	itet	ne
 8000d36:	2104      	movne	r1, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d38:	6127      	streq	r7, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000d3a:	6121      	strne	r1, [r4, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000d3c:	0656      	lsls	r6, r2, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d3e:	bf54      	ite	pl
 8000d40:	f44f 2000 	movpl.w	r0, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000d44:	2008      	movmi	r0, #8
 8000d46:	4914      	ldr	r1, [pc, #80]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000d48:	0695      	lsls	r5, r2, #26
 8000d4a:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d4c:	bf54      	ite	pl
 8000d4e:	f44f 1080 	movpl.w	r0, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000d52:	2010      	movmi	r0, #16
 8000d54:	4910      	ldr	r1, [pc, #64]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000d56:	06d4      	lsls	r4, r2, #27
 8000d58:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d5a:	bf54      	ite	pl
 8000d5c:	f44f 1000 	movpl.w	r0, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000d60:	2020      	movmi	r0, #32
 8000d62:	490d      	ldr	r1, [pc, #52]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d64:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000d68:	6108      	str	r0, [r1, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000d6a:	0710      	lsls	r0, r2, #28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d6c:	bf54      	ite	pl
 8000d6e:	f44f 0080 	movpl.w	r0, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000d72:	2040      	movmi	r0, #64	; 0x40
 8000d74:	4908      	ldr	r1, [pc, #32]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
 8000d76:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000d7a:	6108      	str	r0, [r1, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000d7c:	0751      	lsls	r1, r2, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d7e:	bf54      	ite	pl
 8000d80:	f44f 0000 	movpl.w	r0, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000d84:	2080      	movmi	r0, #128	; 0x80
 8000d86:	4904      	ldr	r1, [pc, #16]	; (8000d98 <LCD_Rect_Fill+0x2d0>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000d88:	0797      	lsls	r7, r2, #30
 8000d8a:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d8c:	bf58      	it	pl
 8000d8e:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 8000d92:	e005      	b.n	8000da0 <LCD_Rect_Fill+0x2d8>
 8000d94:	40010c00 	.word	0x40010c00
 8000d98:	40010800 	.word	0x40010800
 8000d9c:	40011000 	.word	0x40011000
    GPIOx->BSRR = GPIO_Pin;
 8000da0:	bf48      	it	mi
 8000da2:	2110      	movmi	r1, #16
 8000da4:	4aa9      	ldr	r2, [pc, #676]	; (800104c <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000da6:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8000daa:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000dac:	9a04      	ldr	r2, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dae:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8000db2:	07d6      	lsls	r6, r2, #31
 8000db4:	bf54      	ite	pl
 8000db6:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000dba:	2120      	movmi	r1, #32
 8000dbc:	4aa3      	ldr	r2, [pc, #652]	; (800104c <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dbe:	f44f 2680 	mov.w	r6, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000dc2:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dc4:	49a2      	ldr	r1, [pc, #648]	; (8001050 <LCD_Rect_Fill+0x588>)
 8000dc6:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8000dca:	610c      	str	r4, [r1, #16]
 8000dcc:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000dd0:	f8c1 b010 	str.w	fp, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dd4:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000dd8:	f8c1 a010 	str.w	sl, [r1, #16]
 8000ddc:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000de0:	4a9a      	ldr	r2, [pc, #616]	; (800104c <LCD_Rect_Fill+0x584>)
 8000de2:	489c      	ldr	r0, [pc, #624]	; (8001054 <LCD_Rect_Fill+0x58c>)
    GPIOx->BSRR = GPIO_Pin;
 8000de4:	f8c1 a010 	str.w	sl, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000de8:	f8c1 8010 	str.w	r8, [r1, #16]
 8000dec:	6104      	str	r4, [r0, #16]
 8000dee:	6105      	str	r5, [r0, #16]
 8000df0:	f8c2 e010 	str.w	lr, [r2, #16]
 8000df4:	6116      	str	r6, [r2, #16]
 8000df6:	6114      	str	r4, [r2, #16]
 8000df8:	6115      	str	r5, [r2, #16]
 8000dfa:	f8c2 c010 	str.w	ip, [r2, #16]
 8000dfe:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000e00:	9a03      	ldr	r2, [sp, #12]
    GPIOx->BSRR = GPIO_Pin;
 8000e02:	f04f 0e02 	mov.w	lr, #2
 8000e06:	09d2      	lsrs	r2, r2, #7
 8000e08:	bf16      	itet	ne
 8000e0a:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e0c:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e0e:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000e10:	065d      	lsls	r5, r3, #25
 8000e12:	bf4c      	ite	mi
 8000e14:	2108      	movmi	r1, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e16:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
 8000e1a:	4a8e      	ldr	r2, [pc, #568]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000e1c:	069c      	lsls	r4, r3, #26
 8000e1e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e20:	bf4c      	ite	mi
 8000e22:	2110      	movmi	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e24:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
 8000e28:	4a8a      	ldr	r2, [pc, #552]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000e2a:	06d8      	lsls	r0, r3, #27
 8000e2c:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e2e:	bf4c      	ite	mi
 8000e30:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e32:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
 8000e36:	4a87      	ldr	r2, [pc, #540]	; (8001054 <LCD_Rect_Fill+0x58c>)
 8000e38:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e3c:	6111      	str	r1, [r2, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000e3e:	0719      	lsls	r1, r3, #28
    GPIOx->BSRR = GPIO_Pin;
 8000e40:	bf4c      	ite	mi
 8000e42:	2140      	movmi	r1, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e44:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
 8000e48:	4a82      	ldr	r2, [pc, #520]	; (8001054 <LCD_Rect_Fill+0x58c>)
 8000e4a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8000e4e:	6111      	str	r1, [r2, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000e50:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = GPIO_Pin;
 8000e52:	bf4c      	ite	mi
 8000e54:	2180      	movmi	r1, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e56:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
 8000e5a:	4a7e      	ldr	r2, [pc, #504]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000e5c:	079f      	lsls	r7, r3, #30
 8000e5e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000e60:	bf4c      	ite	mi
 8000e62:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e64:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 8000e68:	4b78      	ldr	r3, [pc, #480]	; (800104c <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = GPIO_Pin;
 8000e6a:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e6e:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000e70:	9b03      	ldr	r3, [sp, #12]
 8000e72:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
 8000e76:	f013 0f01 	tst.w	r3, #1
    GPIOx->BSRR = GPIO_Pin;
 8000e7a:	bf14      	ite	ne
 8000e7c:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e7e:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000e82:	4973      	ldr	r1, [pc, #460]	; (8001050 <LCD_Rect_Fill+0x588>)
    GPIOx->BSRR = GPIO_Pin;
 8000e84:	4b71      	ldr	r3, [pc, #452]	; (800104c <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e86:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8000e8a:	611a      	str	r2, [r3, #16]
 8000e8c:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8000e90:	6108      	str	r0, [r1, #16]
 8000e92:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8000e96:	f8c1 e010 	str.w	lr, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e9a:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8000e9e:	f8c1 c010 	str.w	ip, [r1, #16]
 8000ea2:	f04f 0810 	mov.w	r8, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ea6:	610c      	str	r4, [r1, #16]
 8000ea8:	610f      	str	r7, [r1, #16]
 8000eaa:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 8000eae:	4b67      	ldr	r3, [pc, #412]	; (800104c <LCD_Rect_Fill+0x584>)
 8000eb0:	4a68      	ldr	r2, [pc, #416]	; (8001054 <LCD_Rect_Fill+0x58c>)
 8000eb2:	6110      	str	r0, [r2, #16]
 8000eb4:	6114      	str	r4, [r2, #16]
 8000eb6:	611d      	str	r5, [r3, #16]
 8000eb8:	611e      	str	r6, [r3, #16]
 8000eba:	6118      	str	r0, [r3, #16]
 8000ebc:	611c      	str	r4, [r3, #16]
 8000ebe:	f8c3 a010 	str.w	sl, [r3, #16]
 8000ec2:	f8c3 b010 	str.w	fp, [r3, #16]
 8000ec6:	6116      	str	r6, [r2, #16]
 8000ec8:	6115      	str	r5, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000eca:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ece:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ed0:	2740      	movs	r7, #64	; 0x40
 8000ed2:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ed4:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
 8000ed8:	6117      	str	r7, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000eda:	2720      	movs	r7, #32
 8000edc:	f8c3 8010 	str.w	r8, [r3, #16]
 8000ee0:	611f      	str	r7, [r3, #16]
 8000ee2:	2701      	movs	r7, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ee4:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000ee6:	f8c1 e010 	str.w	lr, [r1, #16]
 8000eea:	f8c1 c010 	str.w	ip, [r1, #16]
 8000eee:	610f      	str	r7, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ef0:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
 8000ef4:	610f      	str	r7, [r1, #16]
 8000ef6:	6110      	str	r0, [r2, #16]
 8000ef8:	6114      	str	r4, [r2, #16]
 8000efa:	611d      	str	r5, [r3, #16]
 8000efc:	611e      	str	r6, [r3, #16]
 8000efe:	6118      	str	r0, [r3, #16]
 8000f00:	611c      	str	r4, [r3, #16]
  data[2] = y2 >> 8;
 8000f02:	9c02      	ldr	r4, [sp, #8]
 8000f04:	f8c3 a010 	str.w	sl, [r3, #16]
 8000f08:	f8c3 b010 	str.w	fp, [r3, #16]
 8000f0c:	0a23      	lsrs	r3, r4, #8
  data[3] = y2;
 8000f0e:	b2e4      	uxtb	r4, r4
 8000f10:	9403      	str	r4, [sp, #12]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000f12:	ea5f 34d9 	movs.w	r4, r9, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8000f16:	bf18      	it	ne
 8000f18:	2404      	movne	r4, #4
	data[0] = y1 >> 8;
 8000f1a:	ea4f 2119 	mov.w	r1, r9, lsr #8
  data[2] = y2 >> 8;
 8000f1e:	9304      	str	r3, [sp, #16]
 8000f20:	bf14      	ite	ne
 8000f22:	6114      	strne	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f24:	6116      	streq	r6, [r2, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000f26:	064e      	lsls	r6, r1, #25
 8000f28:	bf54      	ite	pl
 8000f2a:	f44f 2400 	movpl.w	r4, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000f2e:	2408      	movmi	r4, #8
 8000f30:	4a48      	ldr	r2, [pc, #288]	; (8001054 <LCD_Rect_Fill+0x58c>)
	data[0] = y1 >> 8;
 8000f32:	4608      	mov	r0, r1
 8000f34:	6114      	str	r4, [r2, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000f36:	068c      	lsls	r4, r1, #26
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f38:	bf54      	ite	pl
 8000f3a:	f44f 1480 	movpl.w	r4, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000f3e:	2410      	movmi	r4, #16
 8000f40:	4a44      	ldr	r2, [pc, #272]	; (8001054 <LCD_Rect_Fill+0x58c>)
 8000f42:	f04f 0b02 	mov.w	fp, #2
 8000f46:	6114      	str	r4, [r2, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8000f48:	06ca      	lsls	r2, r1, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f4a:	bf54      	ite	pl
 8000f4c:	f44f 1400 	movpl.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000f50:	2420      	movmi	r4, #32
 8000f52:	4a40      	ldr	r2, [pc, #256]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8000f54:	070f      	lsls	r7, r1, #28
 8000f56:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f58:	bf54      	ite	pl
 8000f5a:	f44f 0480 	movpl.w	r4, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8000f5e:	2440      	movmi	r4, #64	; 0x40
 8000f60:	4a3c      	ldr	r2, [pc, #240]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8000f62:	074e      	lsls	r6, r1, #29
 8000f64:	6114      	str	r4, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f66:	bf54      	ite	pl
 8000f68:	f44f 0400 	movpl.w	r4, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8000f6c:	2480      	movmi	r4, #128	; 0x80
 8000f6e:	4a39      	ldr	r2, [pc, #228]	; (8001054 <LCD_Rect_Fill+0x58c>)
 8000f70:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8000f74:	6114      	str	r4, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8000f76:	078c      	lsls	r4, r1, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f78:	bf54      	ite	pl
 8000f7a:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8000f7e:	2110      	movmi	r1, #16
 8000f80:	4a32      	ldr	r2, [pc, #200]	; (800104c <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f82:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8000f86:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8000f88:	07c1      	lsls	r1, r0, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f8a:	bf54      	ite	pl
 8000f8c:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000f90:	2120      	movmi	r1, #32
 8000f92:	4a2e      	ldr	r2, [pc, #184]	; (800104c <LCD_Rect_Fill+0x584>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f94:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8000f98:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f9a:	492d      	ldr	r1, [pc, #180]	; (8001050 <LCD_Rect_Fill+0x588>)
 8000f9c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8000fa0:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000fa2:	f8c1 b010 	str.w	fp, [r1, #16]
 8000fa6:	f8c1 a010 	str.w	sl, [r1, #16]
 8000faa:	f04f 0a01 	mov.w	sl, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fae:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8000fb2:	f8c1 a010 	str.w	sl, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fb6:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8000fba:	f8c1 8010 	str.w	r8, [r1, #16]
 8000fbe:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8000fc2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000fc6:	4a21      	ldr	r2, [pc, #132]	; (800104c <LCD_Rect_Fill+0x584>)
 8000fc8:	4822      	ldr	r0, [pc, #136]	; (8001054 <LCD_Rect_Fill+0x58c>)
  data[1] = y1;
 8000fca:	fa5f f589 	uxtb.w	r5, r9
 8000fce:	6104      	str	r4, [r0, #16]
 8000fd0:	6106      	str	r6, [r0, #16]
 8000fd2:	f8c2 e010 	str.w	lr, [r2, #16]
 8000fd6:	6117      	str	r7, [r2, #16]
 8000fd8:	6114      	str	r4, [r2, #16]
 8000fda:	6116      	str	r6, [r2, #16]
 8000fdc:	6111      	str	r1, [r2, #16]
 8000fde:	f8c2 c010 	str.w	ip, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8000fe2:	09ea      	lsrs	r2, r5, #7
    GPIOx->BSRR = GPIO_Pin;
 8000fe4:	bf16      	itet	ne
 8000fe6:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fe8:	6107      	streq	r7, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 8000fea:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8000fec:	f019 0f40 	tst.w	r9, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ff0:	bf0c      	ite	eq
 8000ff2:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8000ff6:	2108      	movne	r1, #8
 8000ff8:	4a16      	ldr	r2, [pc, #88]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8000ffa:	f019 0f20 	tst.w	r9, #32
 8000ffe:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001000:	bf0c      	ite	eq
 8001002:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001006:	2110      	movne	r1, #16
 8001008:	4a12      	ldr	r2, [pc, #72]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800100a:	f019 0f10 	tst.w	r9, #16
 800100e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001010:	bf0c      	ite	eq
 8001012:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001016:	2120      	movne	r1, #32
 8001018:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800101a:	f019 0f08 	tst.w	r9, #8
 800101e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001020:	bf0c      	ite	eq
 8001022:	f44f 0180 	moveq.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001026:	2140      	movne	r1, #64	; 0x40
 8001028:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800102a:	f019 0f04 	tst.w	r9, #4
 800102e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001030:	bf0c      	ite	eq
 8001032:	f44f 0100 	moveq.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001036:	2180      	movne	r1, #128	; 0x80
 8001038:	4a06      	ldr	r2, [pc, #24]	; (8001054 <LCD_Rect_Fill+0x58c>)
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800103a:	f019 0f02 	tst.w	r9, #2
 800103e:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001040:	bf0c      	ite	eq
 8001042:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001046:	2110      	movne	r1, #16
 8001048:	e006      	b.n	8001058 <LCD_Rect_Fill+0x590>
 800104a:	bf00      	nop
 800104c:	40011000 	.word	0x40011000
 8001050:	40010c00 	.word	0x40010c00
 8001054:	40010800 	.word	0x40010800
 8001058:	4ab5      	ldr	r2, [pc, #724]	; (8001330 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800105a:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 800105e:	6111      	str	r1, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001060:	07ea      	lsls	r2, r5, #31
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001062:	bf54      	ite	pl
 8001064:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001068:	2120      	movmi	r1, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800106a:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800106e:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8001072:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8001076:	f04f 0b02 	mov.w	fp, #2
 800107a:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 800107e:	f04f 0901 	mov.w	r9, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001082:	f04f 6880 	mov.w	r8, #67108864	; 0x4000000
 8001086:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 800108a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 800108e:	4aa8      	ldr	r2, [pc, #672]	; (8001330 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001090:	48a8      	ldr	r0, [pc, #672]	; (8001334 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = GPIO_Pin;
 8001092:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001094:	49a8      	ldr	r1, [pc, #672]	; (8001338 <LCD_Rect_Fill+0x870>)
 8001096:	4aa6      	ldr	r2, [pc, #664]	; (8001330 <LCD_Rect_Fill+0x868>)
 8001098:	610c      	str	r4, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 800109a:	f8c1 b010 	str.w	fp, [r1, #16]
 800109e:	f8c1 a010 	str.w	sl, [r1, #16]
 80010a2:	f8c1 9010 	str.w	r9, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010a6:	f8c1 8010 	str.w	r8, [r1, #16]
 80010aa:	6104      	str	r4, [r0, #16]
 80010ac:	6105      	str	r5, [r0, #16]
 80010ae:	f8c2 e010 	str.w	lr, [r2, #16]
 80010b2:	6116      	str	r6, [r2, #16]
 80010b4:	6114      	str	r4, [r2, #16]
 80010b6:	6115      	str	r5, [r2, #16]
 80010b8:	f8c2 c010 	str.w	ip, [r2, #16]
 80010bc:	6117      	str	r7, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80010be:	9a02      	ldr	r2, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 80010c0:	f04f 0a02 	mov.w	sl, #2
 80010c4:	0bd2      	lsrs	r2, r2, #15
 80010c6:	bf16      	itet	ne
 80010c8:	2204      	movne	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010ca:	6106      	streq	r6, [r0, #16]
    GPIOx->BSRR = GPIO_Pin;
 80010cc:	6102      	strne	r2, [r0, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80010ce:	065f      	lsls	r7, r3, #25
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010d0:	bf54      	ite	pl
 80010d2:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80010d6:	2108      	movmi	r1, #8
 80010d8:	4a96      	ldr	r2, [pc, #600]	; (8001334 <LCD_Rect_Fill+0x86c>)
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80010da:	069e      	lsls	r6, r3, #26
 80010dc:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010de:	bf54      	ite	pl
 80010e0:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80010e4:	2110      	movmi	r1, #16
 80010e6:	4a93      	ldr	r2, [pc, #588]	; (8001334 <LCD_Rect_Fill+0x86c>)
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80010e8:	06dd      	lsls	r5, r3, #27
 80010ea:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010ec:	bf54      	ite	pl
 80010ee:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80010f2:	2120      	movmi	r1, #32
 80010f4:	4a8f      	ldr	r2, [pc, #572]	; (8001334 <LCD_Rect_Fill+0x86c>)
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80010f6:	071c      	lsls	r4, r3, #28
 80010f8:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010fa:	bf54      	ite	pl
 80010fc:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001100:	2140      	movmi	r1, #64	; 0x40
 8001102:	4a8c      	ldr	r2, [pc, #560]	; (8001334 <LCD_Rect_Fill+0x86c>)
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001104:	0758      	lsls	r0, r3, #29
 8001106:	6111      	str	r1, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001108:	bf54      	ite	pl
 800110a:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800110e:	2180      	movmi	r1, #128	; 0x80
 8001110:	4a88      	ldr	r2, [pc, #544]	; (8001334 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001112:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8001116:	6111      	str	r1, [r2, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001118:	0799      	lsls	r1, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800111a:	bf54      	ite	pl
 800111c:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001120:	2210      	movmi	r2, #16
 8001122:	4b83      	ldr	r3, [pc, #524]	; (8001330 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001124:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8001128:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800112a:	9b04      	ldr	r3, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800112c:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8001130:	f013 0f01 	tst.w	r3, #1
 8001134:	bf0c      	ite	eq
 8001136:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800113a:	2220      	movne	r2, #32
 800113c:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8001140:	f04f 0801 	mov.w	r8, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001144:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8001148:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800114c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8001150:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8001154:	4b76      	ldr	r3, [pc, #472]	; (8001330 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001156:	4977      	ldr	r1, [pc, #476]	; (8001334 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = GPIO_Pin;
 8001158:	611a      	str	r2, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800115a:	4a77      	ldr	r2, [pc, #476]	; (8001338 <LCD_Rect_Fill+0x870>)
 800115c:	4b74      	ldr	r3, [pc, #464]	; (8001330 <LCD_Rect_Fill+0x868>)
 800115e:	6110      	str	r0, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001160:	f8c2 a010 	str.w	sl, [r2, #16]
 8001164:	f8c2 9010 	str.w	r9, [r2, #16]
 8001168:	f8c2 8010 	str.w	r8, [r2, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800116c:	f8c2 e010 	str.w	lr, [r2, #16]
 8001170:	6108      	str	r0, [r1, #16]
 8001172:	610c      	str	r4, [r1, #16]
 8001174:	f8c3 c010 	str.w	ip, [r3, #16]
 8001178:	611d      	str	r5, [r3, #16]
 800117a:	6118      	str	r0, [r3, #16]
 800117c:	611c      	str	r4, [r3, #16]
 800117e:	611f      	str	r7, [r3, #16]
 8001180:	611e      	str	r6, [r3, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001182:	9b03      	ldr	r3, [sp, #12]
 8001184:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001188:	09db      	lsrs	r3, r3, #7
    GPIOx->BSRR = GPIO_Pin;
 800118a:	bf1c      	itt	ne
 800118c:	2304      	movne	r3, #4
 800118e:	610b      	strne	r3, [r1, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001190:	9b02      	ldr	r3, [sp, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001192:	bf08      	it	eq
 8001194:	610d      	streq	r5, [r1, #16]
 8001196:	f013 0f40 	tst.w	r3, #64	; 0x40
    GPIOx->BSRR = GPIO_Pin;
 800119a:	bf14      	ite	ne
 800119c:	2208      	movne	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800119e:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80011a2:	4b64      	ldr	r3, [pc, #400]	; (8001334 <LCD_Rect_Fill+0x86c>)
 80011a4:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011a8:	611a      	str	r2, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80011aa:	9b02      	ldr	r3, [sp, #8]
 80011ac:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 80011b0:	f013 0f20 	tst.w	r3, #32
    GPIOx->BSRR = GPIO_Pin;
 80011b4:	bf14      	ite	ne
 80011b6:	2210      	movne	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011b8:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80011bc:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <LCD_Rect_Fill+0x86c>)
 80011be:	2402      	movs	r4, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011c0:	611a      	str	r2, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80011c2:	9b02      	ldr	r3, [sp, #8]
 80011c4:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 80011c8:	f013 0f10 	tst.w	r3, #16
    GPIOx->BSRR = GPIO_Pin;
 80011cc:	bf14      	ite	ne
 80011ce:	2220      	movne	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011d0:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80011d4:	4b57      	ldr	r3, [pc, #348]	; (8001334 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80011da:	611a      	str	r2, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80011dc:	9b02      	ldr	r3, [sp, #8]
 80011de:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 80011e2:	f013 0f08 	tst.w	r3, #8
    GPIOx->BSRR = GPIO_Pin;
 80011e6:	bf14      	ite	ne
 80011e8:	2240      	movne	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ea:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80011ee:	4b51      	ldr	r3, [pc, #324]	; (8001334 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011f0:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 80011f4:	611a      	str	r2, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80011f6:	9b02      	ldr	r3, [sp, #8]
 80011f8:	494f      	ldr	r1, [pc, #316]	; (8001338 <LCD_Rect_Fill+0x870>)
 80011fa:	f013 0f04 	tst.w	r3, #4
    GPIOx->BSRR = GPIO_Pin;
 80011fe:	bf14      	ite	ne
 8001200:	2280      	movne	r2, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001202:	f44f 0200 	moveq.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001206:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <LCD_Rect_Fill+0x86c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001208:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800120c:	611a      	str	r2, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800120e:	9b02      	ldr	r3, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 8001210:	f04f 0910 	mov.w	r9, #16
 8001214:	079a      	lsls	r2, r3, #30
 8001216:	bf4c      	ite	mi
 8001218:	2210      	movmi	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800121a:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
 800121e:	4b44      	ldr	r3, [pc, #272]	; (8001330 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = GPIO_Pin;
 8001220:	f04f 0840 	mov.w	r8, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001224:	611a      	str	r2, [r3, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001226:	9b03      	ldr	r3, [sp, #12]
 8001228:	07db      	lsls	r3, r3, #31
    GPIOx->BSRR = GPIO_Pin;
 800122a:	bf4c      	ite	mi
 800122c:	2220      	movmi	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800122e:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
 8001232:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <LCD_Rect_Fill+0x868>)
 8001234:	611a      	str	r2, [r3, #16]
 8001236:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800123a:	6108      	str	r0, [r1, #16]
 800123c:	4a3c      	ldr	r2, [pc, #240]	; (8001330 <LCD_Rect_Fill+0x868>)
    GPIOx->BSRR = GPIO_Pin;
 800123e:	610c      	str	r4, [r1, #16]
 8001240:	610d      	str	r5, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001242:	f8c1 e010 	str.w	lr, [r1, #16]
 8001246:	610b      	str	r3, [r1, #16]
 8001248:	f103 5370 	add.w	r3, r3, #1006632960	; 0x3c000000
 800124c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001250:	6118      	str	r0, [r3, #16]
 8001252:	f8c3 e010 	str.w	lr, [r3, #16]
 8001256:	f8c2 c010 	str.w	ip, [r2, #16]
 800125a:	6117      	str	r7, [r2, #16]
 800125c:	6110      	str	r0, [r2, #16]
 800125e:	f8c2 e010 	str.w	lr, [r2, #16]
 8001262:	f8c2 b010 	str.w	fp, [r2, #16]
 8001266:	f8c2 a010 	str.w	sl, [r2, #16]
 800126a:	611f      	str	r7, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 800126c:	2780      	movs	r7, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800126e:	f8c3 c010 	str.w	ip, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001272:	f8c3 9010 	str.w	r9, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001276:	611e      	str	r6, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001278:	f8c3 8010 	str.w	r8, [r3, #16]
 800127c:	611f      	str	r7, [r3, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800127e:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 8001282:	6117      	str	r7, [r2, #16]
 8001284:	6116      	str	r6, [r2, #16]
 8001286:	6108      	str	r0, [r1, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001288:	610c      	str	r4, [r1, #16]
 800128a:	610d      	str	r5, [r1, #16]
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 800128c:	9d01      	ldr	r5, [sp, #4]
 800128e:	2d00      	cmp	r5, #0
 8001290:	f000 80c8 	beq.w	8001424 <LCD_Rect_Fill+0x95c>
 8001294:	2500      	movs	r5, #0
 8001296:	2601      	movs	r6, #1
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8001298:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800129a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 800129e:	f3c7 2785 	ubfx	r7, r7, #10, #6
 80012a2:	f3cc 4cc4 	ubfx	ip, ip, #19, #5
 80012a6:	017f      	lsls	r7, r7, #5
 80012a8:	ea47 27cc 	orr.w	r7, r7, ip, lsl #11
 80012ac:	f3c7 3880 	ubfx	r8, r7, #14, #1
 80012b0:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80012b4:	f8cd 8008 	str.w	r8, [sp, #8]
 80012b8:	f3c7 3840 	ubfx	r8, r7, #13, #1
 80012bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80012c0:	f3c7 3800 	ubfx	r8, r7, #12, #1
 80012c4:	f3c9 1940 	ubfx	r9, r9, #5, #1
 80012c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80012cc:	f3c7 28c0 	ubfx	r8, r7, #11, #1
 80012d0:	f8cd 8014 	str.w	r8, [sp, #20]
 80012d4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80012d8:	f3c7 2880 	ubfx	r8, r7, #10, #1
 80012dc:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80012e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80012e4:	f3c7 2840 	ubfx	r8, r7, #9, #1
 80012e8:	f3c9 1900 	ubfx	r9, r9, #4, #1
 80012ec:	f8cd 801c 	str.w	r8, [sp, #28]
 80012f0:	f3c7 2800 	ubfx	r8, r7, #8, #1
 80012f4:	f8cd 8020 	str.w	r8, [sp, #32]
 80012f8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 80012fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8001300:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8001304:	f3c8 18c0 	ubfx	r8, r8, #7, #1
 8001308:	f3c7 1ac0 	ubfx	sl, r7, #7, #1
 800130c:	f3c7 1b80 	ubfx	fp, r7, #6, #1
 8001310:	f3c9 09c0 	ubfx	r9, r9, #3, #1
 8001314:	f3c7 1740 	ubfx	r7, r7, #5, #1
 8001318:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800131c:	e9cd 970c 	strd	r9, r7, [sp, #48]	; 0x30
 8001320:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001324:	f3cc 1c10 	ubfx	ip, ip, #4, #17
 8001328:	f3c8 1880 	ubfx	r8, r8, #6, #1
 800132c:	e006      	b.n	800133c <LCD_Rect_Fill+0x874>
 800132e:	bf00      	nop
 8001330:	40011000 	.word	0x40011000
 8001334:	40010800 	.word	0x40010800
 8001338:	40010c00 	.word	0x40010c00
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800133c:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8001340:	610e      	str	r6, [r1, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001342:	610f      	str	r7, [r1, #16]
 8001344:	f1bc 0f00 	cmp.w	ip, #0
 8001348:	f000 80ac 	beq.w	80014a4 <LCD_Rect_Fill+0x9dc>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 800134c:	9f02      	ldr	r7, [sp, #8]
    GPIOx->BSRR = GPIO_Pin;
 800134e:	611c      	str	r4, [r3, #16]
 8001350:	2f00      	cmp	r7, #0
 8001352:	f000 80ac 	beq.w	80014ae <LCD_Rect_Fill+0x9e6>
 8001356:	611e      	str	r6, [r3, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8001358:	9f03      	ldr	r7, [sp, #12]
 800135a:	2f00      	cmp	r7, #0
 800135c:	f000 809e 	beq.w	800149c <LCD_Rect_Fill+0x9d4>
 8001360:	f04f 0908 	mov.w	r9, #8
 8001364:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8001368:	9f04      	ldr	r7, [sp, #16]
 800136a:	2f00      	cmp	r7, #0
 800136c:	f000 8091 	beq.w	8001492 <LCD_Rect_Fill+0x9ca>
 8001370:	f04f 0904 	mov.w	r9, #4
 8001374:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 8001378:	9f05      	ldr	r7, [sp, #20]
 800137a:	2f00      	cmp	r7, #0
 800137c:	f000 8087 	beq.w	800148e <LCD_Rect_Fill+0x9c6>
 8001380:	6114      	str	r4, [r2, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001382:	9f06      	ldr	r7, [sp, #24]
 8001384:	2f00      	cmp	r7, #0
 8001386:	d07f      	beq.n	8001488 <LCD_Rect_Fill+0x9c0>
 8001388:	6116      	str	r6, [r2, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 800138a:	9f07      	ldr	r7, [sp, #28]
 800138c:	2f00      	cmp	r7, #0
 800138e:	d076      	beq.n	800147e <LCD_Rect_Fill+0x9b6>
 8001390:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 8001394:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001398:	9f08      	ldr	r7, [sp, #32]
 800139a:	2f00      	cmp	r7, #0
 800139c:	d06a      	beq.n	8001474 <LCD_Rect_Fill+0x9ac>
 800139e:	f44f 4980 	mov.w	r9, #16384	; 0x4000
 80013a2:	f8c2 9010 	str.w	r9, [r2, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80013a6:	f1ba 0f00 	cmp.w	sl, #0
 80013aa:	d05e      	beq.n	800146a <LCD_Rect_Fill+0x9a2>
 80013ac:	f04f 0904 	mov.w	r9, #4
 80013b0:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80013b4:	f1bb 0f00 	cmp.w	fp, #0
 80013b8:	d053      	beq.n	8001462 <LCD_Rect_Fill+0x99a>
 80013ba:	f04f 0908 	mov.w	r9, #8
 80013be:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80013c2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80013c4:	2f00      	cmp	r7, #0
 80013c6:	d047      	beq.n	8001458 <LCD_Rect_Fill+0x990>
 80013c8:	f04f 0910 	mov.w	r9, #16
 80013cc:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80013d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80013d2:	2f00      	cmp	r7, #0
 80013d4:	d03b      	beq.n	800144e <LCD_Rect_Fill+0x986>
 80013d6:	f04f 0920 	mov.w	r9, #32
 80013da:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80013de:	f1b8 0f00 	cmp.w	r8, #0
 80013e2:	d02f      	beq.n	8001444 <LCD_Rect_Fill+0x97c>
 80013e4:	f04f 0940 	mov.w	r9, #64	; 0x40
 80013e8:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80013ec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80013ee:	b327      	cbz	r7, 800143a <LCD_Rect_Fill+0x972>
 80013f0:	f04f 0980 	mov.w	r9, #128	; 0x80
 80013f4:	f8c3 9010 	str.w	r9, [r3, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80013f8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80013fa:	b1cf      	cbz	r7, 8001430 <LCD_Rect_Fill+0x968>
 80013fc:	f04f 0910 	mov.w	r9, #16
 8001400:	f8c2 9010 	str.w	r9, [r2, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001404:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8001406:	3501      	adds	r5, #1
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001408:	b17f      	cbz	r7, 800142a <LCD_Rect_Fill+0x962>
 800140a:	f04f 0920 	mov.w	r9, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800140e:	f8c2 9010 	str.w	r9, [r2, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001412:	f44f 6980 	mov.w	r9, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8001416:	9f01      	ldr	r7, [sp, #4]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001418:	6108      	str	r0, [r1, #16]
 800141a:	42af      	cmp	r7, r5
    GPIOx->BSRR = GPIO_Pin;
 800141c:	610c      	str	r4, [r1, #16]
 800141e:	f8c1 9010 	str.w	r9, [r1, #16]
 8001422:	d18b      	bne.n	800133c <LCD_Rect_Fill+0x874>
}
 8001424:	b00f      	add	sp, #60	; 0x3c
 8001426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800142a:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
 800142e:	e7ee      	b.n	800140e <LCD_Rect_Fill+0x946>
 8001430:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
 8001434:	f8c2 9010 	str.w	r9, [r2, #16]
}
 8001438:	e7e4      	b.n	8001404 <LCD_Rect_Fill+0x93c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800143a:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
 800143e:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001442:	e7d9      	b.n	80013f8 <LCD_Rect_Fill+0x930>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001444:	f44f 0980 	mov.w	r9, #4194304	; 0x400000
 8001448:	f8c3 9010 	str.w	r9, [r3, #16]
}
 800144c:	e7ce      	b.n	80013ec <LCD_Rect_Fill+0x924>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800144e:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
 8001452:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001456:	e7c2      	b.n	80013de <LCD_Rect_Fill+0x916>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001458:	f44f 1980 	mov.w	r9, #1048576	; 0x100000
 800145c:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001460:	e7b6      	b.n	80013d0 <LCD_Rect_Fill+0x908>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001462:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 8001466:	611f      	str	r7, [r3, #16]
}
 8001468:	e7ab      	b.n	80013c2 <LCD_Rect_Fill+0x8fa>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800146a:	f44f 2980 	mov.w	r9, #262144	; 0x40000
 800146e:	f8c3 9010 	str.w	r9, [r3, #16]
}
 8001472:	e79f      	b.n	80013b4 <LCD_Rect_Fill+0x8ec>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001474:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 8001478:	f8c2 9010 	str.w	r9, [r2, #16]
}
 800147c:	e793      	b.n	80013a6 <LCD_Rect_Fill+0x8de>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800147e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8001482:	f8c2 9010 	str.w	r9, [r2, #16]
}
 8001486:	e787      	b.n	8001398 <LCD_Rect_Fill+0x8d0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001488:	f8c2 e010 	str.w	lr, [r2, #16]
}
 800148c:	e77d      	b.n	800138a <LCD_Rect_Fill+0x8c2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800148e:	6110      	str	r0, [r2, #16]
}
 8001490:	e777      	b.n	8001382 <LCD_Rect_Fill+0x8ba>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001492:	f44f 2980 	mov.w	r9, #262144	; 0x40000
 8001496:	f8c2 9010 	str.w	r9, [r2, #16]
}
 800149a:	e76d      	b.n	8001378 <LCD_Rect_Fill+0x8b0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800149c:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 80014a0:	6117      	str	r7, [r2, #16]
}
 80014a2:	e761      	b.n	8001368 <LCD_Rect_Fill+0x8a0>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 80014a4:	9f02      	ldr	r7, [sp, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014a6:	6118      	str	r0, [r3, #16]
 80014a8:	2f00      	cmp	r7, #0
 80014aa:	f47f af54 	bne.w	8001356 <LCD_Rect_Fill+0x88e>
 80014ae:	f8c3 e010 	str.w	lr, [r3, #16]
}
 80014b2:	e751      	b.n	8001358 <LCD_Rect_Fill+0x890>

080014b4 <HAL_GPIO_Init>:
{
 80014b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b8:	680e      	ldr	r6, [r1, #0]
{
 80014ba:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014bc:	2e00      	cmp	r6, #0
 80014be:	f000 80b2 	beq.w	8001626 <HAL_GPIO_Init+0x172>
 80014c2:	2200      	movs	r2, #0
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014c4:	4f74      	ldr	r7, [pc, #464]	; (8001698 <HAL_GPIO_Init+0x1e4>)
  uint32_t config = 0x00u;
 80014c6:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 80014c8:	4613      	mov	r3, r2
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014ca:	4d74      	ldr	r5, [pc, #464]	; (800169c <HAL_GPIO_Init+0x1e8>)
      switch (GPIO_Init->Mode)
 80014cc:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 80016a0 <HAL_GPIO_Init+0x1ec>
 80014d0:	e006      	b.n	80014e0 <HAL_GPIO_Init+0x2c>
	position++;
 80014d2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d4:	fa36 f403 	lsrs.w	r4, r6, r3
 80014d8:	f102 0204 	add.w	r2, r2, #4
 80014dc:	f000 80a3 	beq.w	8001626 <HAL_GPIO_Init+0x172>
    ioposition = (0x01uL << position);
 80014e0:	2401      	movs	r4, #1
 80014e2:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 80014e4:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014e8:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 80014ec:	d1f1      	bne.n	80014d2 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 80014ee:	684e      	ldr	r6, [r1, #4]
 80014f0:	2e12      	cmp	r6, #18
 80014f2:	f200 809b 	bhi.w	800162c <HAL_GPIO_Init+0x178>
 80014f6:	2e12      	cmp	r6, #18
 80014f8:	d81a      	bhi.n	8001530 <HAL_GPIO_Init+0x7c>
 80014fa:	e8df f006 	tbb	[pc, r6]
 80014fe:	baa4      	.short	0xbaa4
 8001500:	1919c3b6 	.word	0x1919c3b6
 8001504:	19191919 	.word	0x19191919
 8001508:	19191919 	.word	0x19191919
 800150c:	ae191919 	.word	0xae191919
 8001510:	b2          	.byte	0xb2
 8001511:	00          	.byte	0x00
 8001512:	f8df e190 	ldr.w	lr, [pc, #400]	; 80016a4 <HAL_GPIO_Init+0x1f0>
 8001516:	4576      	cmp	r6, lr
 8001518:	f000 8095 	beq.w	8001646 <HAL_GPIO_Init+0x192>
 800151c:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8001520:	4576      	cmp	r6, lr
 8001522:	f000 8090 	beq.w	8001646 <HAL_GPIO_Init+0x192>
 8001526:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800152a:	4576      	cmp	r6, lr
 800152c:	f000 808b 	beq.w	8001646 <HAL_GPIO_Init+0x192>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001530:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8001534:	bf9c      	itt	ls
 8001536:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001538:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800153a:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800153e:	bf84      	itt	hi
 8001540:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001544:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001548:	f8de 4000 	ldr.w	r4, [lr]
 800154c:	fa0a f90b 	lsl.w	r9, sl, fp
 8001550:	fa06 fb0b 	lsl.w	fp, r6, fp
 8001554:	ea24 040b 	bic.w	r4, r4, fp
 8001558:	ea44 0409 	orr.w	r4, r4, r9
 800155c:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001560:	684c      	ldr	r4, [r1, #4]
 8001562:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001566:	d076      	beq.n	8001656 <HAL_GPIO_Init+0x1a2>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001568:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800156c:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001570:	f04e 0e01 	orr.w	lr, lr, #1
 8001574:	f8c7 e018 	str.w	lr, [r7, #24]
 8001578:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800157c:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001580:	f00e 0e01 	and.w	lr, lr, #1
 8001584:	f8cd e004 	str.w	lr, [sp, #4]
 8001588:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800158c:	f023 0e03 	bic.w	lr, r3, #3
 8001590:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8001594:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001598:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800159c:	fa06 f609 	lsl.w	r6, r6, r9
 80015a0:	ea2b 0b06 	bic.w	fp, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015a4:	4e40      	ldr	r6, [pc, #256]	; (80016a8 <HAL_GPIO_Init+0x1f4>)
 80015a6:	42b0      	cmp	r0, r6
 80015a8:	d068      	beq.n	800167c <HAL_GPIO_Init+0x1c8>
 80015aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015ae:	42b0      	cmp	r0, r6
 80015b0:	d066      	beq.n	8001680 <HAL_GPIO_Init+0x1cc>
 80015b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015b6:	42b0      	cmp	r0, r6
 80015b8:	d05e      	beq.n	8001678 <HAL_GPIO_Init+0x1c4>
 80015ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015be:	42b0      	cmp	r0, r6
 80015c0:	bf0c      	ite	eq
 80015c2:	2603      	moveq	r6, #3
 80015c4:	2604      	movne	r6, #4
 80015c6:	fa06 f609 	lsl.w	r6, r6, r9
 80015ca:	ea46 060b 	orr.w	r6, r6, fp
        AFIO->EXTICR[position >> 2u] = temp;
 80015ce:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80015d2:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80015d8:	bf14      	ite	ne
 80015da:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015de:	ea26 060c 	biceq.w	r6, r6, ip
 80015e2:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80015e4:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80015ea:	bf14      	ite	ne
 80015ec:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015f0:	ea26 060c 	biceq.w	r6, r6, ip
 80015f4:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80015f6:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015f8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80015fc:	bf14      	ite	ne
 80015fe:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001602:	ea26 060c 	biceq.w	r6, r6, ip
 8001606:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001608:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800160c:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800160e:	d01f      	beq.n	8001650 <HAL_GPIO_Init+0x19c>
          SET_BIT(EXTI->FTSR, iocurrent);
 8001610:	ea44 040c 	orr.w	r4, r4, ip
 8001614:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001616:	680e      	ldr	r6, [r1, #0]
	position++;
 8001618:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161a:	fa36 f403 	lsrs.w	r4, r6, r3
 800161e:	f102 0204 	add.w	r2, r2, #4
 8001622:	f47f af5d 	bne.w	80014e0 <HAL_GPIO_Init+0x2c>
}
 8001626:	b003      	add	sp, #12
 8001628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800162c:	4546      	cmp	r6, r8
 800162e:	d00a      	beq.n	8001646 <HAL_GPIO_Init+0x192>
 8001630:	f67f af6f 	bls.w	8001512 <HAL_GPIO_Init+0x5e>
 8001634:	f8df e074 	ldr.w	lr, [pc, #116]	; 80016ac <HAL_GPIO_Init+0x1f8>
 8001638:	4576      	cmp	r6, lr
 800163a:	d004      	beq.n	8001646 <HAL_GPIO_Init+0x192>
 800163c:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001640:	4576      	cmp	r6, lr
 8001642:	f47f af75 	bne.w	8001530 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001646:	688e      	ldr	r6, [r1, #8]
 8001648:	b9fe      	cbnz	r6, 800168a <HAL_GPIO_Init+0x1d6>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800164a:	f04f 0a04 	mov.w	sl, #4
 800164e:	e76f      	b.n	8001530 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001650:	ea24 040c 	bic.w	r4, r4, ip
 8001654:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001656:	680e      	ldr	r6, [r1, #0]
 8001658:	e73b      	b.n	80014d2 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800165a:	68cc      	ldr	r4, [r1, #12]
 800165c:	f104 0a04 	add.w	sl, r4, #4
          break;
 8001660:	e766      	b.n	8001530 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001662:	68cc      	ldr	r4, [r1, #12]
 8001664:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8001668:	e762      	b.n	8001530 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800166a:	68cc      	ldr	r4, [r1, #12]
 800166c:	f104 0a08 	add.w	sl, r4, #8
          break;
 8001670:	e75e      	b.n	8001530 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001672:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8001676:	e75b      	b.n	8001530 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001678:	2602      	movs	r6, #2
 800167a:	e7a4      	b.n	80015c6 <HAL_GPIO_Init+0x112>
 800167c:	2600      	movs	r6, #0
 800167e:	e7a2      	b.n	80015c6 <HAL_GPIO_Init+0x112>
 8001680:	2601      	movs	r6, #1
 8001682:	e7a0      	b.n	80015c6 <HAL_GPIO_Init+0x112>
      switch (GPIO_Init->Mode)
 8001684:	f04f 0a00 	mov.w	sl, #0
 8001688:	e752      	b.n	8001530 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800168a:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800168c:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8001690:	bf0c      	ite	eq
 8001692:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8001694:	6144      	strne	r4, [r0, #20]
 8001696:	e74b      	b.n	8001530 <HAL_GPIO_Init+0x7c>
 8001698:	40021000 	.word	0x40021000
 800169c:	40010400 	.word	0x40010400
 80016a0:	10220000 	.word	0x10220000
 80016a4:	10120000 	.word	0x10120000
 80016a8:	40010800 	.word	0x40010800
 80016ac:	10310000 	.word	0x10310000

080016b0 <UART_DMATxHalfCplt>:
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop

080016b4 <UART_DMATransmitCplt>:
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016b4:	6803      	ldr	r3, [r0, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f013 0320 	ands.w	r3, r3, #32
 80016bc:	d10a      	bne.n	80016d4 <UART_DMATransmitCplt+0x20>
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016be:	6a41      	ldr	r1, [r0, #36]	; 0x24
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80016c0:	680a      	ldr	r2, [r1, #0]
    huart->TxXferCount = 0x00U;
 80016c2:	84cb      	strh	r3, [r1, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80016c4:	6953      	ldr	r3, [r2, #20]
 80016c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016ca:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80016cc:	68d3      	ldr	r3, [r2, #12]
 80016ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d2:	60d3      	str	r3, [r2, #12]
}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop

080016d8 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016d8:	6a43      	ldr	r3, [r0, #36]	; 0x24

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	6950      	ldr	r0, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80016de:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
 80016e2:	2921      	cmp	r1, #33	; 0x21
 80016e4:	d009      	beq.n	80016fa <UART_DMAError+0x22>
    huart->TxXferCount = 0x00U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80016e6:	6950      	ldr	r0, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80016e8:	f893 103e 	ldrb.w	r1, [r3, #62]	; 0x3e
 80016ec:	2922      	cmp	r1, #34	; 0x22
 80016ee:	d014      	beq.n	800171a <UART_DMAError+0x42>
  {
    huart->RxXferCount = 0x00U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80016f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f2:	f042 0210 	orr.w	r2, r2, #16
 80016f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80016f8:	4770      	bx	lr
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80016fa:	0600      	lsls	r0, r0, #24
 80016fc:	d5f3      	bpl.n	80016e6 <UART_DMAError+0xe>
    huart->TxXferCount = 0x00U;
 80016fe:	2100      	movs	r1, #0
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001700:	2020      	movs	r0, #32
    huart->TxXferCount = 0x00U;
 8001702:	84d9      	strh	r1, [r3, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001704:	68d1      	ldr	r1, [r2, #12]
 8001706:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800170a:	60d1      	str	r1, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 800170c:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001710:	6950      	ldr	r0, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001712:	f893 103e 	ldrb.w	r1, [r3, #62]	; 0x3e
 8001716:	2922      	cmp	r1, #34	; 0x22
 8001718:	d1ea      	bne.n	80016f0 <UART_DMAError+0x18>
 800171a:	0641      	lsls	r1, r0, #25
 800171c:	d5e8      	bpl.n	80016f0 <UART_DMAError+0x18>
    huart->RxXferCount = 0x00U;
 800171e:	2100      	movs	r1, #0
 8001720:	85d9      	strh	r1, [r3, #46]	; 0x2e
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001722:	68d1      	ldr	r1, [r2, #12]
 8001724:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8001728:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800172a:	6951      	ldr	r1, [r2, #20]
 800172c:	f021 0101 	bic.w	r1, r1, #1
 8001730:	6151      	str	r1, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001732:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001734:	2901      	cmp	r1, #1
 8001736:	d103      	bne.n	8001740 <UART_DMAError+0x68>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001738:	68d1      	ldr	r1, [r2, #12]
 800173a:	f021 0110 	bic.w	r1, r1, #16
 800173e:	60d1      	str	r1, [r2, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001740:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8001742:	2120      	movs	r1, #32
 8001744:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001748:	631a      	str	r2, [r3, #48]	; 0x30
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800174a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800174c:	f042 0210 	orr.w	r2, r2, #16
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001752:	4770      	bx	lr

08001754 <HAL_NVIC_SetPriority.constprop.0>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_NVIC_SetPriority.constprop.0+0x54>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800175c:	f1c3 0c07 	rsb	ip, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001760:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001762:	f1bc 0f04 	cmp.w	ip, #4
 8001766:	bf28      	it	cs
 8001768:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176c:	2a06      	cmp	r2, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176e:	f04f 32ff 	mov.w	r2, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001772:	bf98      	it	ls
 8001774:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001776:	fa02 f20c 	lsl.w	r2, r2, ip
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	bf88      	it	hi
 800177c:	3b03      	subhi	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177e:	ea21 0102 	bic.w	r1, r1, r2
 8001782:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001784:	1c43      	adds	r3, r0, #1
 8001786:	d008      	beq.n	800179a <HAL_NVIC_SetPriority.constprop.0+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001788:	0109      	lsls	r1, r1, #4
 800178a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800178e:	b2c9      	uxtb	r1, r1
 8001790:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001794:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8001798:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <HAL_NVIC_SetPriority.constprop.0+0x54>)
 800179c:	0109      	lsls	r1, r1, #4
 800179e:	b2c9      	uxtb	r1, r1
 80017a0:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <LCD_Line.constprop.0>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 80017ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017b0:	4686      	mov	lr, r0
 80017b2:	b0bb      	sub	sp, #236	; 0xec
{
	int deltaX = abs(x2 - x1);
 80017b4:	9202      	str	r2, [sp, #8]
 80017b6:	eba2 020e 	sub.w	r2, r2, lr
 80017ba:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 80017be:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
	int deltaY = abs(y2 - y1);
 80017c2:	f5c1 729f 	rsb	r2, r1, #318	; 0x13e
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 80017c6:	9135      	str	r1, [sp, #212]	; 0xd4
	int deltaX = abs(x2 - x1);
 80017c8:	9537      	str	r5, [sp, #220]	; 0xdc
	int deltaY = abs(y2 - y1);
 80017ca:	460d      	mov	r5, r1
 80017cc:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 80017d0:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
	int signX = x1 < x2 ? 1 : -1;
 80017d4:	9a02      	ldr	r2, [sp, #8]
	int deltaY = abs(y2 - y1);
 80017d6:	9134      	str	r1, [sp, #208]	; 0xd0
	int signX = x1 < x2 ? 1 : -1;
 80017d8:	4572      	cmp	r2, lr
 80017da:	bf8c      	ite	hi
 80017dc:	2201      	movhi	r2, #1
 80017de:	f04f 32ff 	movls.w	r2, #4294967295
	int signY = y1 < y2 ? 1 : -1;
 80017e2:	f5b5 7f9f 	cmp.w	r5, #318	; 0x13e
	int signX = x1 < x2 ? 1 : -1;
 80017e6:	9238      	str	r2, [sp, #224]	; 0xe0
	int signY = y1 < y2 ? 1 : -1;
 80017e8:	bf34      	ite	cc
 80017ea:	2201      	movcc	r2, #1
 80017ec:	f04f 32ff 	movcs.w	r2, #4294967295
 80017f0:	9239      	str	r2, [sp, #228]	; 0xe4
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 80017f2:	f3c3 2285 	ubfx	r2, r3, #10, #6
 80017f6:	f3c3 41c4 	ubfx	r1, r3, #19, #5
 80017fa:	0152      	lsls	r2, r2, #5
 80017fc:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 8001800:	f3c1 1110 	ubfx	r1, r1, #4, #17
 8001804:	9136      	str	r1, [sp, #216]	; 0xd8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001806:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800180a:	f3c2 3180 	ubfx	r1, r2, #14, #1
 800180e:	f04f 6b80 	mov.w	fp, #67108864	; 0x4000000
 8001812:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001816:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 800181a:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 800181e:	2602      	movs	r6, #2
 8001820:	9103      	str	r1, [sp, #12]
 8001822:	f3c2 3140 	ubfx	r1, r2, #13, #1
 8001826:	9104      	str	r1, [sp, #16]
 8001828:	f3c2 3100 	ubfx	r1, r2, #12, #1
 800182c:	9105      	str	r1, [sp, #20]
 800182e:	f3c2 21c0 	ubfx	r1, r2, #11, #1
 8001832:	9106      	str	r1, [sp, #24]
 8001834:	f3c2 2180 	ubfx	r1, r2, #10, #1
 8001838:	9107      	str	r1, [sp, #28]
 800183a:	f3c2 2140 	ubfx	r1, r2, #9, #1
 800183e:	9108      	str	r1, [sp, #32]
 8001840:	f3c2 2100 	ubfx	r1, r2, #8, #1
 8001844:	9109      	str	r1, [sp, #36]	; 0x24
 8001846:	f3c2 11c0 	ubfx	r1, r2, #7, #1
 800184a:	910a      	str	r1, [sp, #40]	; 0x28
 800184c:	f3c2 1180 	ubfx	r1, r2, #6, #1
 8001850:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8001854:	920c      	str	r2, [sp, #48]	; 0x30
 8001856:	f3c3 12c0 	ubfx	r2, r3, #7, #1
 800185a:	920d      	str	r2, [sp, #52]	; 0x34
 800185c:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8001860:	920e      	str	r2, [sp, #56]	; 0x38
 8001862:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8001866:	920f      	str	r2, [sp, #60]	; 0x3c
 8001868:	f3c3 1200 	ubfx	r2, r3, #4, #1
 800186c:	9210      	str	r2, [sp, #64]	; 0x40
 800186e:	0a2a      	lsrs	r2, r5, #8
 8001870:	9225      	str	r2, [sp, #148]	; 0x94
 8001872:	0bea      	lsrs	r2, r5, #15
 8001874:	9233      	str	r2, [sp, #204]	; 0xcc
 8001876:	0baa      	lsrs	r2, r5, #14
 8001878:	9231      	str	r2, [sp, #196]	; 0xc4
 800187a:	0b6a      	lsrs	r2, r5, #13
 800187c:	922f      	str	r2, [sp, #188]	; 0xbc
 800187e:	0b2a      	lsrs	r2, r5, #12
 8001880:	922d      	str	r2, [sp, #180]	; 0xb4
 8001882:	0aea      	lsrs	r2, r5, #11
 8001884:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001888:	922b      	str	r2, [sp, #172]	; 0xac
 800188a:	0aaa      	lsrs	r2, r5, #10
 800188c:	9311      	str	r3, [sp, #68]	; 0x44
 800188e:	9229      	str	r2, [sp, #164]	; 0xa4
 8001890:	f005 0301 	and.w	r3, r5, #1
 8001894:	0a6a      	lsrs	r2, r5, #9
 8001896:	910b      	str	r1, [sp, #44]	; 0x2c
 8001898:	9227      	str	r2, [sp, #156]	; 0x9c
	int error = deltaX - deltaY;
 800189a:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 800189c:	9323      	str	r3, [sp, #140]	; 0x8c
 800189e:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80018a2:	9324      	str	r3, [sp, #144]	; 0x90
 80018a4:	ea4f 33de 	mov.w	r3, lr, lsr #15
 80018a8:	9332      	str	r3, [sp, #200]	; 0xc8
 80018aa:	ea4f 339e 	mov.w	r3, lr, lsr #14
 80018ae:	9330      	str	r3, [sp, #192]	; 0xc0
 80018b0:	ea4f 335e 	mov.w	r3, lr, lsr #13
 80018b4:	932e      	str	r3, [sp, #184]	; 0xb8
 80018b6:	ea4f 331e 	mov.w	r3, lr, lsr #12
 80018ba:	932c      	str	r3, [sp, #176]	; 0xb0
 80018bc:	ea4f 23de 	mov.w	r3, lr, lsr #11
 80018c0:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80018c2:	932a      	str	r3, [sp, #168]	; 0xa8
 80018c4:	ea4f 239e 	mov.w	r3, lr, lsr #10
 80018c8:	9328      	str	r3, [sp, #160]	; 0xa0
 80018ca:	ea4f 235e 	mov.w	r3, lr, lsr #9
 80018ce:	1a52      	subs	r2, r2, r1
 80018d0:	9326      	str	r3, [sp, #152]	; 0x98
 80018d2:	fa5f f38e 	uxtb.w	r3, lr
 80018d6:	9212      	str	r2, [sp, #72]	; 0x48
 80018d8:	9320      	str	r3, [sp, #128]	; 0x80
 80018da:	b2ea      	uxtb	r2, r5
 80018dc:	f00e 0301 	and.w	r3, lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018e0:	f8df a358 	ldr.w	sl, [pc, #856]	; 8001c3c <LCD_Line.constprop.0+0x490>
 80018e4:	f8df 9358 	ldr.w	r9, [pc, #856]	; 8001c40 <LCD_Line.constprop.0+0x494>
 80018e8:	f8df 8358 	ldr.w	r8, [pc, #856]	; 8001c44 <LCD_Line.constprop.0+0x498>
 80018ec:	9221      	str	r2, [sp, #132]	; 0x84
 80018ee:	9322      	str	r3, [sp, #136]	; 0x88
 80018f0:	f8cd e004 	str.w	lr, [sp, #4]
	data[0] = x1 >> 8;
 80018f4:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
 80018f8:	f8ca c010 	str.w	ip, [sl, #16]
 80018fc:	f8ca b010 	str.w	fp, [sl, #16]
 8001900:	f8c9 0010 	str.w	r0, [r9, #16]
 8001904:	f8c9 c010 	str.w	ip, [r9, #16]
 8001908:	f8c8 4010 	str.w	r4, [r8, #16]
 800190c:	f8c8 7010 	str.w	r7, [r8, #16]
 8001910:	f8c8 0010 	str.w	r0, [r8, #16]
 8001914:	f8c8 c010 	str.w	ip, [r8, #16]
 8001918:	9513      	str	r5, [sp, #76]	; 0x4c
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800191a:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 800191c:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001920:	b2ab      	uxth	r3, r5
 8001922:	9315      	str	r3, [sp, #84]	; 0x54
 8001924:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8001928:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800192a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800192e:	f8c8 e010 	str.w	lr, [r8, #16]
 8001932:	f8c8 1010 	str.w	r1, [r8, #16]
 8001936:	f8c9 7010 	str.w	r7, [r9, #16]
 800193a:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 800193e:	f8c9 2010 	str.w	r2, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001942:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001946:	2340      	movs	r3, #64	; 0x40
 8001948:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800194c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001950:	f8c9 3010 	str.w	r3, [r9, #16]
 8001954:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001958:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800195c:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001960:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001964:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001968:	f8ca 6010 	str.w	r6, [sl, #16]
 800196c:	f8ca 3010 	str.w	r3, [sl, #16]
 8001970:	2301      	movs	r3, #1
 8001972:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001976:	f8ca b010 	str.w	fp, [sl, #16]
 800197a:	f8c9 0010 	str.w	r0, [r9, #16]
 800197e:	f8c9 c010 	str.w	ip, [r9, #16]
 8001982:	f8c8 4010 	str.w	r4, [r8, #16]
 8001986:	f8c8 7010 	str.w	r7, [r8, #16]
 800198a:	f8c8 0010 	str.w	r0, [r8, #16]
 800198e:	f8c8 c010 	str.w	ip, [r8, #16]
 8001992:	f8c8 e010 	str.w	lr, [r8, #16]
 8001996:	f8c8 1010 	str.w	r1, [r8, #16]
 800199a:	2d00      	cmp	r5, #0
 800199c:	f000 8560 	beq.w	8002460 <LCD_Line.constprop.0+0xcb4>
    GPIOx->BSRR = GPIO_Pin;
 80019a0:	2304      	movs	r3, #4
 80019a2:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80019a6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80019a8:	f013 0301 	ands.w	r3, r3, #1
 80019ac:	9316      	str	r3, [sp, #88]	; 0x58
 80019ae:	bf1c      	itt	ne
 80019b0:	2308      	movne	r3, #8
 80019b2:	f8c9 3010 	strne.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80019b6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019b8:	bf08      	it	eq
 80019ba:	f8c9 4010 	streq.w	r4, [r9, #16]
 80019be:	f013 0301 	ands.w	r3, r3, #1
 80019c2:	9317      	str	r3, [sp, #92]	; 0x5c
 80019c4:	bf0c      	ite	eq
 80019c6:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80019ca:	2310      	movne	r3, #16
 80019cc:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80019d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80019d2:	f013 0301 	ands.w	r3, r3, #1
 80019d6:	9318      	str	r3, [sp, #96]	; 0x60
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019d8:	bf0c      	ite	eq
 80019da:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80019de:	2320      	movne	r3, #32
 80019e0:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80019e4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80019e6:	f013 0301 	ands.w	r3, r3, #1
 80019ea:	9319      	str	r3, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019ec:	bf0c      	ite	eq
 80019ee:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80019f2:	2340      	movne	r3, #64	; 0x40
 80019f4:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80019f8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80019fa:	f013 0301 	ands.w	r3, r3, #1
 80019fe:	9314      	str	r3, [sp, #80]	; 0x50
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a00:	bf0c      	ite	eq
 8001a02:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001a06:	2380      	movne	r3, #128	; 0x80
 8001a08:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001a0c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001a0e:	f013 0301 	ands.w	r3, r3, #1
 8001a12:	931a      	str	r3, [sp, #104]	; 0x68
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a14:	bf0c      	ite	eq
 8001a16:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001a1a:	2310      	movne	r3, #16
 8001a1c:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001a20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001a22:	f013 0301 	ands.w	r3, r3, #1
 8001a26:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a28:	bf0c      	ite	eq
 8001a2a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001a2e:	2320      	movne	r3, #32
 8001a30:	f8c8 3010 	str.w	r3, [r8, #16]
 8001a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a38:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001a3c:	f8ca 6010 	str.w	r6, [sl, #16]
 8001a40:	f8ca 3010 	str.w	r3, [sl, #16]
 8001a44:	2301      	movs	r3, #1
 8001a46:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001a4e:	f8ca b010 	str.w	fp, [sl, #16]
 8001a52:	f8c9 0010 	str.w	r0, [r9, #16]
 8001a56:	f8c9 c010 	str.w	ip, [r9, #16]
 8001a5a:	f8c8 4010 	str.w	r4, [r8, #16]
 8001a5e:	f8c8 7010 	str.w	r7, [r8, #16]
 8001a62:	f8c8 0010 	str.w	r0, [r8, #16]
 8001a66:	f8c8 c010 	str.w	ip, [r8, #16]
 8001a6a:	f8c8 3010 	str.w	r3, [r8, #16]
 8001a6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a72:	f8c8 3010 	str.w	r3, [r8, #16]
 8001a76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001a78:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8001a7a:	fa1f fe83 	uxth.w	lr, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001a7e:	09db      	lsrs	r3, r3, #7
 8001a80:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIOx->BSRR = GPIO_Pin;
 8001a82:	bf16      	itet	ne
 8001a84:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a86:	f8c9 7010 	streq.w	r7, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001a8a:	f8c9 3010 	strne.w	r3, [r9, #16]
 8001a8e:	f3ce 1380 	ubfx	r3, lr, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001a92:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8001a96:	931d      	str	r3, [sp, #116]	; 0x74
 8001a98:	bf16      	itet	ne
 8001a9a:	2308      	movne	r3, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a9c:	f8c9 4010 	streq.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001aa0:	f8c9 3010 	strne.w	r3, [r9, #16]
 8001aa4:	f3ce 1340 	ubfx	r3, lr, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001aa8:	f01e 0f20 	tst.w	lr, #32
 8001aac:	931e      	str	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aae:	bf0c      	ite	eq
 8001ab0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001ab4:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001ab6:	f01e 0f10 	tst.w	lr, #16
 8001aba:	f8c9 3010 	str.w	r3, [r9, #16]
 8001abe:	f3ce 1300 	ubfx	r3, lr, #4, #1
 8001ac2:	931c      	str	r3, [sp, #112]	; 0x70
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ac4:	bf0c      	ite	eq
 8001ac6:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001aca:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001acc:	f01e 0f08 	tst.w	lr, #8
 8001ad0:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ad4:	bf0c      	ite	eq
 8001ad6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001ada:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001adc:	f01e 0f04 	tst.w	lr, #4
 8001ae0:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ae4:	bf0c      	ite	eq
 8001ae6:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001aea:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001aec:	f01e 0f02 	tst.w	lr, #2
 8001af0:	f3ce 01c0 	ubfx	r1, lr, #3, #1
 8001af4:	f3ce 0280 	ubfx	r2, lr, #2, #1
 8001af8:	f8c9 3010 	str.w	r3, [r9, #16]
 8001afc:	f3ce 0340 	ubfx	r3, lr, #1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b00:	bf0c      	ite	eq
 8001b02:	f44f 1e80 	moveq.w	lr, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001b06:	f04f 0e10 	movne.w	lr, #16
 8001b0a:	f8c8 e010 	str.w	lr, [r8, #16]
 8001b0e:	fa1f fe85 	uxth.w	lr, r5
 8001b12:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001b16:	2d00      	cmp	r5, #0
 8001b18:	f040 849c 	bne.w	8002454 <LCD_Line.constprop.0+0xca8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b1c:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001b20:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001b24:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001b28:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b2c:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001b30:	f8ca 6010 	str.w	r6, [sl, #16]
 8001b34:	f8ca 5010 	str.w	r5, [sl, #16]
 8001b38:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b3c:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001b40:	f8ca b010 	str.w	fp, [sl, #16]
 8001b44:	f8c9 0010 	str.w	r0, [r9, #16]
 8001b48:	f8c9 c010 	str.w	ip, [r9, #16]
 8001b4c:	f8c8 4010 	str.w	r4, [r8, #16]
 8001b50:	f8c8 7010 	str.w	r7, [r8, #16]
 8001b54:	f8c8 0010 	str.w	r0, [r8, #16]
 8001b58:	f8c8 c010 	str.w	ip, [r8, #16]
 8001b5c:	f8c8 e010 	str.w	lr, [r8, #16]
 8001b60:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001b64:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001b66:	f8c8 e010 	str.w	lr, [r8, #16]
 8001b6a:	2d00      	cmp	r5, #0
 8001b6c:	f000 846e 	beq.w	800244c <LCD_Line.constprop.0+0xca0>
    GPIOx->BSRR = GPIO_Pin;
 8001b70:	f04f 0e04 	mov.w	lr, #4
 8001b74:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001b78:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8001b7a:	2d00      	cmp	r5, #0
 8001b7c:	f040 8460 	bne.w	8002440 <LCD_Line.constprop.0+0xc94>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b80:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001b84:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8001b86:	2d00      	cmp	r5, #0
 8001b88:	f040 8454 	bne.w	8002434 <LCD_Line.constprop.0+0xc88>
 8001b8c:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001b90:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001b94:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8001b96:	2d00      	cmp	r5, #0
 8001b98:	f040 8446 	bne.w	8002428 <LCD_Line.constprop.0+0xc7c>
 8001b9c:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001ba0:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001ba4:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8001ba6:	2d00      	cmp	r5, #0
 8001ba8:	f040 8438 	bne.w	800241c <LCD_Line.constprop.0+0xc70>
 8001bac:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 8001bb0:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001bb4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8001bb6:	2d00      	cmp	r5, #0
 8001bb8:	f040 842a 	bne.w	8002410 <LCD_Line.constprop.0+0xc64>
 8001bbc:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
 8001bc0:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001bc4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8001bc6:	2d00      	cmp	r5, #0
 8001bc8:	f040 841c 	bne.w	8002404 <LCD_Line.constprop.0+0xc58>
 8001bcc:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001bd0:	f8c8 e010 	str.w	lr, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001bd4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8001bd6:	2d00      	cmp	r5, #0
 8001bd8:	f040 840e 	bne.w	80023f8 <LCD_Line.constprop.0+0xc4c>
 8001bdc:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001be0:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001be4:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001be8:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bec:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001bf0:	f8ca 6010 	str.w	r6, [sl, #16]
 8001bf4:	f8ca 5010 	str.w	r5, [sl, #16]
 8001bf8:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bfc:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001c00:	f8ca b010 	str.w	fp, [sl, #16]
 8001c04:	f8c9 0010 	str.w	r0, [r9, #16]
 8001c08:	f8c9 c010 	str.w	ip, [r9, #16]
 8001c0c:	f8c8 4010 	str.w	r4, [r8, #16]
 8001c10:	f8c8 7010 	str.w	r7, [r8, #16]
 8001c14:	f8c8 0010 	str.w	r0, [r8, #16]
 8001c18:	f8c8 c010 	str.w	ip, [r8, #16]
 8001c1c:	f8c8 e010 	str.w	lr, [r8, #16]
 8001c20:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001c24:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8001c26:	f8c8 e010 	str.w	lr, [r8, #16]
 8001c2a:	2d00      	cmp	r5, #0
 8001c2c:	f000 83e1 	beq.w	80023f2 <LCD_Line.constprop.0+0xc46>
    GPIOx->BSRR = GPIO_Pin;
 8001c30:	f04f 0e04 	mov.w	lr, #4
 8001c34:	f8c9 e010 	str.w	lr, [r9, #16]
 8001c38:	e006      	b.n	8001c48 <LCD_Line.constprop.0+0x49c>
 8001c3a:	bf00      	nop
 8001c3c:	40010c00 	.word	0x40010c00
 8001c40:	40010800 	.word	0x40010800
 8001c44:	40011000 	.word	0x40011000
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001c48:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8001c4a:	2d00      	cmp	r5, #0
 8001c4c:	f040 83cc 	bne.w	80023e8 <LCD_Line.constprop.0+0xc3c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c50:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001c54:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8001c56:	2d00      	cmp	r5, #0
 8001c58:	f040 83c1 	bne.w	80023de <LCD_Line.constprop.0+0xc32>
 8001c5c:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001c60:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001c64:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8001c66:	2d00      	cmp	r5, #0
 8001c68:	f040 83b4 	bne.w	80023d4 <LCD_Line.constprop.0+0xc28>
 8001c6c:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001c70:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001c74:	2900      	cmp	r1, #0
 8001c76:	f040 83a9 	bne.w	80023cc <LCD_Line.constprop.0+0xc20>
 8001c7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001c7e:	f8c9 1010 	str.w	r1, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001c82:	2a00      	cmp	r2, #0
 8001c84:	f040 839e 	bne.w	80023c4 <LCD_Line.constprop.0+0xc18>
 8001c88:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c8c:	f8c9 2010 	str.w	r2, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f040 8393 	bne.w	80023bc <LCD_Line.constprop.0+0xc10>
 8001c96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c9a:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001c9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f040 8387 	bne.w	80023b4 <LCD_Line.constprop.0+0xc08>
 8001ca6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001caa:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001cb2:	9d32      	ldr	r5, [sp, #200]	; 0xc8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cb4:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001cb8:	f8ca 6010 	str.w	r6, [sl, #16]
 8001cbc:	f8ca 3010 	str.w	r3, [sl, #16]
 8001cc0:	b2ab      	uxth	r3, r5
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cc2:	f8ca c010 	str.w	ip, [sl, #16]
 8001cc6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001cca:	f8ca b010 	str.w	fp, [sl, #16]
 8001cce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cd2:	f8c9 0010 	str.w	r0, [r9, #16]
 8001cd6:	f8c9 c010 	str.w	ip, [r9, #16]
 8001cda:	f8c8 4010 	str.w	r4, [r8, #16]
 8001cde:	f8c8 7010 	str.w	r7, [r8, #16]
 8001ce2:	f8c8 0010 	str.w	r0, [r8, #16]
 8001ce6:	f8c8 c010 	str.w	ip, [r8, #16]
 8001cea:	931c      	str	r3, [sp, #112]	; 0x70
    GPIOx->BSRR = GPIO_Pin;
 8001cec:	2310      	movs	r3, #16
	data[0] = y1 >> 8;
 8001cee:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cf2:	f8c8 1010 	str.w	r1, [r8, #16]
 8001cf6:	f8c8 2010 	str.w	r2, [r8, #16]
 8001cfa:	f8c9 7010 	str.w	r7, [r9, #16]
 8001cfe:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001d02:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d06:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d0a:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001d0e:	2340      	movs	r3, #64	; 0x40
 8001d10:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001d18:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001d1c:	2310      	movs	r3, #16
 8001d1e:	f8c8 3010 	str.w	r3, [r8, #16]
 8001d22:	2320      	movs	r3, #32
 8001d24:	f8c8 3010 	str.w	r3, [r8, #16]
 8001d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d2c:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001d30:	f8ca 6010 	str.w	r6, [sl, #16]
 8001d34:	f8ca 3010 	str.w	r3, [sl, #16]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d3e:	f8ca b010 	str.w	fp, [sl, #16]
 8001d42:	f8c9 0010 	str.w	r0, [r9, #16]
 8001d46:	f8c9 c010 	str.w	ip, [r9, #16]
 8001d4a:	f8c8 4010 	str.w	r4, [r8, #16]
 8001d4e:	f8c8 7010 	str.w	r7, [r8, #16]
 8001d52:	f8c8 0010 	str.w	r0, [r8, #16]
 8001d56:	f8c8 c010 	str.w	ip, [r8, #16]
 8001d5a:	f8c8 1010 	str.w	r1, [r8, #16]
 8001d5e:	f8c8 2010 	str.w	r2, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001d62:	2d00      	cmp	r5, #0
 8001d64:	f000 8323 	beq.w	80023ae <LCD_Line.constprop.0+0xc02>
    GPIOx->BSRR = GPIO_Pin;
 8001d68:	2304      	movs	r3, #4
 8001d6a:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001d6e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8001d70:	f013 0301 	ands.w	r3, r3, #1
 8001d74:	931b      	str	r3, [sp, #108]	; 0x6c
 8001d76:	bf1c      	itt	ne
 8001d78:	2308      	movne	r3, #8
 8001d7a:	f8c9 3010 	strne.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001d7e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d80:	bf08      	it	eq
 8001d82:	f8c9 4010 	streq.w	r4, [r9, #16]
 8001d86:	f013 0301 	ands.w	r3, r3, #1
 8001d8a:	931a      	str	r3, [sp, #104]	; 0x68
 8001d8c:	bf0c      	ite	eq
 8001d8e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001d92:	2310      	movne	r3, #16
 8001d94:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001d98:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001d9a:	f013 0301 	ands.w	r3, r3, #1
 8001d9e:	9319      	str	r3, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001da0:	bf0c      	ite	eq
 8001da2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001da6:	2320      	movne	r3, #32
 8001da8:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001dac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8001dae:	f013 0301 	ands.w	r3, r3, #1
 8001db2:	9318      	str	r3, [sp, #96]	; 0x60
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001db4:	bf0c      	ite	eq
 8001db6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001dba:	2340      	movne	r3, #64	; 0x40
 8001dbc:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001dc0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001dc2:	f013 0301 	ands.w	r3, r3, #1
 8001dc6:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dc8:	bf0c      	ite	eq
 8001dca:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001dce:	2380      	movne	r3, #128	; 0x80
 8001dd0:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001dd4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001dd6:	f013 0301 	ands.w	r3, r3, #1
 8001dda:	9316      	str	r3, [sp, #88]	; 0x58
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ddc:	bf0c      	ite	eq
 8001dde:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001de2:	2310      	movne	r3, #16
 8001de4:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001de8:	f01e 0301 	ands.w	r3, lr, #1
 8001dec:	9315      	str	r3, [sp, #84]	; 0x54
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dee:	bf0c      	ite	eq
 8001df0:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001df4:	2320      	movne	r3, #32
 8001df6:	f8c8 3010 	str.w	r3, [r8, #16]
 8001dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dfe:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001e02:	f8ca 6010 	str.w	r6, [sl, #16]
 8001e06:	f8ca 3010 	str.w	r3, [sl, #16]
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001e14:	f8ca b010 	str.w	fp, [sl, #16]
 8001e18:	f8c9 0010 	str.w	r0, [r9, #16]
 8001e1c:	f8c9 c010 	str.w	ip, [r9, #16]
 8001e20:	f8c8 4010 	str.w	r4, [r8, #16]
 8001e24:	f8c8 7010 	str.w	r7, [r8, #16]
 8001e28:	f8c8 0010 	str.w	r0, [r8, #16]
 8001e2c:	f8c8 c010 	str.w	ip, [r8, #16]
 8001e30:	f8c8 3010 	str.w	r3, [r8, #16]
 8001e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e38:	f8c8 3010 	str.w	r3, [r8, #16]
 8001e3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001e3e:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8001e40:	fa1f fe83 	uxth.w	lr, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001e44:	09db      	lsrs	r3, r3, #7
 8001e46:	931e      	str	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = GPIO_Pin;
 8001e48:	bf16      	itet	ne
 8001e4a:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e4c:	f8c9 7010 	streq.w	r7, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001e50:	f8c9 3010 	strne.w	r3, [r9, #16]
 8001e54:	f3ce 1380 	ubfx	r3, lr, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001e58:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8001e5c:	9314      	str	r3, [sp, #80]	; 0x50
 8001e5e:	bf16      	itet	ne
 8001e60:	2308      	movne	r3, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e62:	f8c9 4010 	streq.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001e66:	f8c9 3010 	strne.w	r3, [r9, #16]
 8001e6a:	f3ce 1340 	ubfx	r3, lr, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001e6e:	f01e 0f20 	tst.w	lr, #32
 8001e72:	931d      	str	r3, [sp, #116]	; 0x74
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e74:	bf0c      	ite	eq
 8001e76:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001e7a:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001e7c:	f01e 0f10 	tst.w	lr, #16
 8001e80:	f8c9 3010 	str.w	r3, [r9, #16]
 8001e84:	f3ce 1300 	ubfx	r3, lr, #4, #1
 8001e88:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e8a:	bf0c      	ite	eq
 8001e8c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8001e90:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001e92:	f01e 0f08 	tst.w	lr, #8
 8001e96:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e9a:	bf0c      	ite	eq
 8001e9c:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8001ea0:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001ea2:	f01e 0f04 	tst.w	lr, #4
 8001ea6:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eaa:	bf0c      	ite	eq
 8001eac:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8001eb0:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001eb2:	f01e 0f02 	tst.w	lr, #2
 8001eb6:	f3ce 01c0 	ubfx	r1, lr, #3, #1
 8001eba:	f3ce 0280 	ubfx	r2, lr, #2, #1
 8001ebe:	f8c9 3010 	str.w	r3, [r9, #16]
 8001ec2:	f3ce 0340 	ubfx	r3, lr, #1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ec6:	bf0c      	ite	eq
 8001ec8:	f44f 1e80 	moveq.w	lr, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8001ecc:	f04f 0e10 	movne.w	lr, #16
 8001ed0:	f8c8 e010 	str.w	lr, [r8, #16]
 8001ed4:	fa1f fe85 	uxth.w	lr, r5
 8001ed8:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001edc:	2d00      	cmp	r5, #0
 8001ede:	f040 8261 	bne.w	80023a4 <LCD_Line.constprop.0+0xbf8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ee2:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001ee6:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001eea:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001eee:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ef2:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001ef6:	f8ca 6010 	str.w	r6, [sl, #16]
 8001efa:	f8ca 5010 	str.w	r5, [sl, #16]
 8001efe:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f02:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001f06:	f8ca b010 	str.w	fp, [sl, #16]
 8001f0a:	f8c9 0010 	str.w	r0, [r9, #16]
 8001f0e:	f8c9 c010 	str.w	ip, [r9, #16]
 8001f12:	f8c8 4010 	str.w	r4, [r8, #16]
 8001f16:	f8c8 7010 	str.w	r7, [r8, #16]
 8001f1a:	f8c8 0010 	str.w	r0, [r8, #16]
 8001f1e:	f8c8 c010 	str.w	ip, [r8, #16]
 8001f22:	f8c8 e010 	str.w	lr, [r8, #16]
 8001f26:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001f2a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8001f2c:	f8c8 e010 	str.w	lr, [r8, #16]
 8001f30:	2d00      	cmp	r5, #0
 8001f32:	f000 8234 	beq.w	800239e <LCD_Line.constprop.0+0xbf2>
    GPIOx->BSRR = GPIO_Pin;
 8001f36:	f04f 0e04 	mov.w	lr, #4
 8001f3a:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001f3e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8001f40:	2d00      	cmp	r5, #0
 8001f42:	f040 8227 	bne.w	8002394 <LCD_Line.constprop.0+0xbe8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f46:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8001f4a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8001f4c:	2d00      	cmp	r5, #0
 8001f4e:	f040 821c 	bne.w	800238a <LCD_Line.constprop.0+0xbde>
 8001f52:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001f56:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001f5a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8001f5c:	2d00      	cmp	r5, #0
 8001f5e:	f040 820f 	bne.w	8002380 <LCD_Line.constprop.0+0xbd4>
 8001f62:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001f66:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8001f6a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8001f6c:	2d00      	cmp	r5, #0
 8001f6e:	f040 8202 	bne.w	8002376 <LCD_Line.constprop.0+0xbca>
 8001f72:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 8001f76:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8001f7a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8001f7c:	2d00      	cmp	r5, #0
 8001f7e:	f040 81f5 	bne.w	800236c <LCD_Line.constprop.0+0xbc0>
 8001f82:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
 8001f86:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001f8a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8001f8c:	2d00      	cmp	r5, #0
 8001f8e:	f040 81e8 	bne.w	8002362 <LCD_Line.constprop.0+0xbb6>
 8001f92:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8001f96:	f8c8 e010 	str.w	lr, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001f9a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001f9c:	2d00      	cmp	r5, #0
 8001f9e:	f040 81db 	bne.w	8002358 <LCD_Line.constprop.0+0xbac>
 8001fa2:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8001fa6:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001faa:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001fae:	f04f 0e01 	mov.w	lr, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fb2:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8001fb6:	f8ca 6010 	str.w	r6, [sl, #16]
 8001fba:	f8ca 5010 	str.w	r5, [sl, #16]
 8001fbe:	f8ca e010 	str.w	lr, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fc2:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8001fc6:	f8ca b010 	str.w	fp, [sl, #16]
 8001fca:	f8c9 0010 	str.w	r0, [r9, #16]
 8001fce:	f8c9 c010 	str.w	ip, [r9, #16]
 8001fd2:	f8c8 4010 	str.w	r4, [r8, #16]
 8001fd6:	f8c8 7010 	str.w	r7, [r8, #16]
 8001fda:	f8c8 0010 	str.w	r0, [r8, #16]
 8001fde:	f8c8 c010 	str.w	ip, [r8, #16]
 8001fe2:	f8c8 e010 	str.w	lr, [r8, #16]
 8001fe6:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8001fea:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8001fec:	f8c8 e010 	str.w	lr, [r8, #16]
 8001ff0:	2d00      	cmp	r5, #0
 8001ff2:	f000 81ae 	beq.w	8002352 <LCD_Line.constprop.0+0xba6>
    GPIOx->BSRR = GPIO_Pin;
 8001ff6:	f04f 0e04 	mov.w	lr, #4
 8001ffa:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8001ffe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8002000:	2d00      	cmp	r5, #0
 8002002:	f040 81a1 	bne.w	8002348 <LCD_Line.constprop.0+0xb9c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002006:	f8c9 4010 	str.w	r4, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800200a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800200c:	2d00      	cmp	r5, #0
 800200e:	f040 8196 	bne.w	800233e <LCD_Line.constprop.0+0xb92>
 8002012:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8002016:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800201a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800201c:	2d00      	cmp	r5, #0
 800201e:	f040 8189 	bne.w	8002334 <LCD_Line.constprop.0+0xb88>
 8002022:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
 8002026:	f8c9 e010 	str.w	lr, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800202a:	2900      	cmp	r1, #0
 800202c:	f040 817e 	bne.w	800232c <LCD_Line.constprop.0+0xb80>
 8002030:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002034:	f8c9 1010 	str.w	r1, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002038:	2a00      	cmp	r2, #0
 800203a:	f040 8173 	bne.w	8002324 <LCD_Line.constprop.0+0xb78>
 800203e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002042:	f8c9 2010 	str.w	r2, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 8168 	bne.w	800231c <LCD_Line.constprop.0+0xb70>
 800204c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002050:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002054:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002056:	2b00      	cmp	r3, #0
 8002058:	f040 815c 	bne.w	8002314 <LCD_Line.constprop.0+0xb68>
 800205c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002060:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002064:	f44f 6180 	mov.w	r1, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002068:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800206c:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002070:	f8ca 6010 	str.w	r6, [sl, #16]
 8002074:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002078:	f8ca c010 	str.w	ip, [sl, #16]
 800207c:	f8ca b010 	str.w	fp, [sl, #16]
 8002080:	f8c9 0010 	str.w	r0, [r9, #16]
 8002084:	f8c9 c010 	str.w	ip, [r9, #16]
 8002088:	f8c8 4010 	str.w	r4, [r8, #16]
 800208c:	f8c8 7010 	str.w	r7, [r8, #16]
 8002090:	f8c8 0010 	str.w	r0, [r8, #16]
 8002094:	f8c8 c010 	str.w	ip, [r8, #16]
 8002098:	f8c8 2010 	str.w	r2, [r8, #16]
 800209c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020a0:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80020a4:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020a6:	f8c9 7010 	str.w	r7, [r9, #16]
 80020aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020ae:	f8c9 4010 	str.w	r4, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80020b2:	f8c9 2010 	str.w	r2, [r9, #16]
 80020b6:	2240      	movs	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020b8:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 80020bc:	f8c9 2010 	str.w	r2, [r9, #16]
 80020c0:	2280      	movs	r2, #128	; 0x80
 80020c2:	f8c9 2010 	str.w	r2, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020ca:	f8c8 2010 	str.w	r2, [r8, #16]
 80020ce:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80020d2:	2301      	movs	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020d4:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80020d8:	f8ca 6010 	str.w	r6, [sl, #16]
 80020dc:	f8ca 1010 	str.w	r1, [sl, #16]
 80020e0:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 80020e4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020e6:	f8ca b010 	str.w	fp, [sl, #16]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 810f 	beq.w	800230e <LCD_Line.constprop.0+0xb62>
    GPIOx->BSRR = GPIO_Pin;
 80020f0:	f8c9 6010 	str.w	r6, [r9, #16]
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 80020f4:	9b03      	ldr	r3, [sp, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 8106 	beq.w	8002308 <LCD_Line.constprop.0+0xb5c>
 80020fc:	2301      	movs	r3, #1
 80020fe:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 8002102:	9b04      	ldr	r3, [sp, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80fc 	beq.w	8002302 <LCD_Line.constprop.0+0xb56>
 800210a:	2308      	movs	r3, #8
 800210c:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 8002110:	9b05      	ldr	r3, [sp, #20]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 80f2 	beq.w	80022fc <LCD_Line.constprop.0+0xb50>
 8002118:	2304      	movs	r3, #4
 800211a:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 800211e:	9b06      	ldr	r3, [sp, #24]
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80e8 	beq.w	80022f6 <LCD_Line.constprop.0+0xb4a>
 8002126:	f8c8 6010 	str.w	r6, [r8, #16]
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 800212a:	9b07      	ldr	r3, [sp, #28]
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80df 	beq.w	80022f0 <LCD_Line.constprop.0+0xb44>
 8002132:	2301      	movs	r3, #1
 8002134:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 8002138:	9b08      	ldr	r3, [sp, #32]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 80d3 	beq.w	80022e6 <LCD_Line.constprop.0+0xb3a>
 8002140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002144:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8002148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 80c6 	beq.w	80022dc <LCD_Line.constprop.0+0xb30>
 8002150:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002154:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 80bb 	beq.w	80022d6 <LCD_Line.constprop.0+0xb2a>
 8002160:	2304      	movs	r3, #4
 8002162:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80b1 	beq.w	80022d0 <LCD_Line.constprop.0+0xb24>
 800216e:	2308      	movs	r3, #8
 8002170:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002174:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 80a5 	beq.w	80022c6 <LCD_Line.constprop.0+0xb1a>
 800217c:	2310      	movs	r3, #16
 800217e:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 8099 	beq.w	80022bc <LCD_Line.constprop.0+0xb10>
 800218a:	2320      	movs	r3, #32
 800218c:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 808d 	beq.w	80022b2 <LCD_Line.constprop.0+0xb06>
 8002198:	2340      	movs	r3, #64	; 0x40
 800219a:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800219e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 8081 	beq.w	80022a8 <LCD_Line.constprop.0+0xafc>
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80021ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d075      	beq.n	800229e <LCD_Line.constprop.0+0xaf2>
 80021b2:	2310      	movs	r3, #16
 80021b4:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80021b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d06a      	beq.n	8002294 <LCD_Line.constprop.0+0xae8>
 80021be:	2320      	movs	r3, #32
 80021c0:	f8c8 3010 	str.w	r3, [r8, #16]
 80021c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021c8:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80021cc:	f8ca 6010 	str.w	r6, [sl, #16]
 80021d0:	f8ca 3010 	str.w	r3, [sl, #16]
	int error2 = 0;
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
		if (x1 == x2 && y1 == y2)
 80021d4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80021d8:	4293      	cmp	r3, r2
 80021da:	f000 8145 	beq.w	8002468 <LCD_Line.constprop.0+0xcbc>
		break;
		error2 = error * 2;
		if (error2 > -deltaY)
 80021de:	9b34      	ldr	r3, [sp, #208]	; 0xd0
		error2 = error * 2;
 80021e0:	9912      	ldr	r1, [sp, #72]	; 0x48
		if (error2 > -deltaY)
 80021e2:	425b      	negs	r3, r3
 80021e4:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
		error2 = error * 2;
 80021e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
		if (error2 > -deltaY)
 80021ec:	da27      	bge.n	800223e <LCD_Line.constprop.0+0xa92>
		{
			error -= deltaY;
			x1 += signX;
 80021ee:	9d01      	ldr	r5, [sp, #4]
 80021f0:	f8dd e0e0 	ldr.w	lr, [sp, #224]	; 0xe0
 80021f4:	4475      	add	r5, lr
 80021f6:	462b      	mov	r3, r5
			error -= deltaY;
 80021f8:	460d      	mov	r5, r1
 80021fa:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80021fc:	1a69      	subs	r1, r5, r1
 80021fe:	9112      	str	r1, [sp, #72]	; 0x48
			x1 += signX;
 8002200:	b299      	uxth	r1, r3
 8002202:	9101      	str	r1, [sp, #4]
 8002204:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002208:	9124      	str	r1, [sp, #144]	; 0x90
 800220a:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 800220e:	9132      	str	r1, [sp, #200]	; 0xc8
 8002210:	f3c3 3181 	ubfx	r1, r3, #14, #2
 8002214:	9130      	str	r1, [sp, #192]	; 0xc0
 8002216:	f3c3 3142 	ubfx	r1, r3, #13, #3
 800221a:	912e      	str	r1, [sp, #184]	; 0xb8
 800221c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8002220:	912c      	str	r1, [sp, #176]	; 0xb0
 8002222:	f3c3 21c4 	ubfx	r1, r3, #11, #5
 8002226:	912a      	str	r1, [sp, #168]	; 0xa8
 8002228:	f3c3 2185 	ubfx	r1, r3, #10, #6
 800222c:	9128      	str	r1, [sp, #160]	; 0xa0
 800222e:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8002232:	9126      	str	r1, [sp, #152]	; 0x98
 8002234:	b2d9      	uxtb	r1, r3
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	9120      	str	r1, [sp, #128]	; 0x80
 800223c:	9322      	str	r3, [sp, #136]	; 0x88
		}
		if (error2 < deltaX)
 800223e:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8002240:	4291      	cmp	r1, r2
 8002242:	f77f ab57 	ble.w	80018f4 <LCD_Line.constprop.0+0x148>
		{
			error += deltaX;
			y1 += signY;
 8002246:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8002248:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800224a:	4413      	add	r3, r2
			error += deltaX;
 800224c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800224e:	440a      	add	r2, r1
 8002250:	9212      	str	r2, [sp, #72]	; 0x48
			y1 += signY;
 8002252:	b29a      	uxth	r2, r3
 8002254:	9235      	str	r2, [sp, #212]	; 0xd4
 8002256:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800225a:	9225      	str	r2, [sp, #148]	; 0x94
 800225c:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002260:	9233      	str	r2, [sp, #204]	; 0xcc
 8002262:	f3c3 3281 	ubfx	r2, r3, #14, #2
 8002266:	9231      	str	r2, [sp, #196]	; 0xc4
 8002268:	f3c3 3242 	ubfx	r2, r3, #13, #3
 800226c:	922f      	str	r2, [sp, #188]	; 0xbc
 800226e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8002272:	922d      	str	r2, [sp, #180]	; 0xb4
 8002274:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 8002278:	922b      	str	r2, [sp, #172]	; 0xac
 800227a:	f3c3 2285 	ubfx	r2, r3, #10, #6
 800227e:	9229      	str	r2, [sp, #164]	; 0xa4
 8002280:	f3c3 2246 	ubfx	r2, r3, #9, #7
 8002284:	9227      	str	r2, [sp, #156]	; 0x9c
 8002286:	b2da      	uxtb	r2, r3
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	9221      	str	r2, [sp, #132]	; 0x84
 800228e:	9323      	str	r3, [sp, #140]	; 0x8c
 8002290:	f7ff bb30 	b.w	80018f4 <LCD_Line.constprop.0+0x148>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002294:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002298:	f8c8 3010 	str.w	r3, [r8, #16]
}
 800229c:	e792      	b.n	80021c4 <LCD_Line.constprop.0+0xa18>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800229e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022a2:	f8c8 3010 	str.w	r3, [r8, #16]
}
 80022a6:	e787      	b.n	80021b8 <LCD_Line.constprop.0+0xa0c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80022ac:	f8c9 3010 	str.w	r3, [r9, #16]
}
 80022b0:	e77c      	b.n	80021ac <LCD_Line.constprop.0+0xa00>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022b6:	f8c9 3010 	str.w	r3, [r9, #16]
}
 80022ba:	e770      	b.n	800219e <LCD_Line.constprop.0+0x9f2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022c0:	f8c9 3010 	str.w	r3, [r9, #16]
}
 80022c4:	e764      	b.n	8002190 <LCD_Line.constprop.0+0x9e4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022ca:	f8c9 3010 	str.w	r3, [r9, #16]
}
 80022ce:	e758      	b.n	8002182 <LCD_Line.constprop.0+0x9d6>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022d0:	f8c9 4010 	str.w	r4, [r9, #16]
}
 80022d4:	e74e      	b.n	8002174 <LCD_Line.constprop.0+0x9c8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022d6:	f8c9 7010 	str.w	r7, [r9, #16]
}
 80022da:	e744      	b.n	8002166 <LCD_Line.constprop.0+0x9ba>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022e0:	f8c8 3010 	str.w	r3, [r8, #16]
}
 80022e4:	e738      	b.n	8002158 <LCD_Line.constprop.0+0x9ac>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80022ea:	f8c8 3010 	str.w	r3, [r8, #16]
}
 80022ee:	e72b      	b.n	8002148 <LCD_Line.constprop.0+0x99c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022f0:	f8c8 c010 	str.w	ip, [r8, #16]
}
 80022f4:	e720      	b.n	8002138 <LCD_Line.constprop.0+0x98c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022f6:	f8c8 0010 	str.w	r0, [r8, #16]
}
 80022fa:	e716      	b.n	800212a <LCD_Line.constprop.0+0x97e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022fc:	f8c8 7010 	str.w	r7, [r8, #16]
}
 8002300:	e70d      	b.n	800211e <LCD_Line.constprop.0+0x972>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002302:	f8c8 4010 	str.w	r4, [r8, #16]
}
 8002306:	e703      	b.n	8002110 <LCD_Line.constprop.0+0x964>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002308:	f8c9 c010 	str.w	ip, [r9, #16]
}
 800230c:	e6f9      	b.n	8002102 <LCD_Line.constprop.0+0x956>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800230e:	f8c9 0010 	str.w	r0, [r9, #16]
}
 8002312:	e6ef      	b.n	80020f4 <LCD_Line.constprop.0+0x948>
    GPIOx->BSRR = GPIO_Pin;
 8002314:	2320      	movs	r3, #32
 8002316:	f8c8 3010 	str.w	r3, [r8, #16]
 800231a:	e6a3      	b.n	8002064 <LCD_Line.constprop.0+0x8b8>
 800231c:	2310      	movs	r3, #16
 800231e:	f8c8 3010 	str.w	r3, [r8, #16]
 8002322:	e697      	b.n	8002054 <LCD_Line.constprop.0+0x8a8>
 8002324:	2280      	movs	r2, #128	; 0x80
 8002326:	f8c9 2010 	str.w	r2, [r9, #16]
 800232a:	e68c      	b.n	8002046 <LCD_Line.constprop.0+0x89a>
 800232c:	2140      	movs	r1, #64	; 0x40
 800232e:	f8c9 1010 	str.w	r1, [r9, #16]
 8002332:	e681      	b.n	8002038 <LCD_Line.constprop.0+0x88c>
 8002334:	f04f 0e20 	mov.w	lr, #32
 8002338:	f8c9 e010 	str.w	lr, [r9, #16]
 800233c:	e675      	b.n	800202a <LCD_Line.constprop.0+0x87e>
 800233e:	f04f 0e10 	mov.w	lr, #16
 8002342:	f8c9 e010 	str.w	lr, [r9, #16]
 8002346:	e668      	b.n	800201a <LCD_Line.constprop.0+0x86e>
 8002348:	f04f 0e08 	mov.w	lr, #8
 800234c:	f8c9 e010 	str.w	lr, [r9, #16]
 8002350:	e65b      	b.n	800200a <LCD_Line.constprop.0+0x85e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002352:	f8c9 7010 	str.w	r7, [r9, #16]
 8002356:	e652      	b.n	8001ffe <LCD_Line.constprop.0+0x852>
    GPIOx->BSRR = GPIO_Pin;
 8002358:	f04f 0e20 	mov.w	lr, #32
 800235c:	f8c8 e010 	str.w	lr, [r8, #16]
 8002360:	e623      	b.n	8001faa <LCD_Line.constprop.0+0x7fe>
 8002362:	f04f 0e10 	mov.w	lr, #16
 8002366:	f8c8 e010 	str.w	lr, [r8, #16]
 800236a:	e616      	b.n	8001f9a <LCD_Line.constprop.0+0x7ee>
 800236c:	f04f 0e80 	mov.w	lr, #128	; 0x80
 8002370:	f8c9 e010 	str.w	lr, [r9, #16]
 8002374:	e609      	b.n	8001f8a <LCD_Line.constprop.0+0x7de>
 8002376:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800237a:	f8c9 e010 	str.w	lr, [r9, #16]
 800237e:	e5fc      	b.n	8001f7a <LCD_Line.constprop.0+0x7ce>
 8002380:	f04f 0e20 	mov.w	lr, #32
 8002384:	f8c9 e010 	str.w	lr, [r9, #16]
 8002388:	e5ef      	b.n	8001f6a <LCD_Line.constprop.0+0x7be>
 800238a:	f04f 0e10 	mov.w	lr, #16
 800238e:	f8c9 e010 	str.w	lr, [r9, #16]
 8002392:	e5e2      	b.n	8001f5a <LCD_Line.constprop.0+0x7ae>
 8002394:	f04f 0e08 	mov.w	lr, #8
 8002398:	f8c9 e010 	str.w	lr, [r9, #16]
 800239c:	e5d5      	b.n	8001f4a <LCD_Line.constprop.0+0x79e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800239e:	f8c9 7010 	str.w	r7, [r9, #16]
 80023a2:	e5cc      	b.n	8001f3e <LCD_Line.constprop.0+0x792>
    GPIOx->BSRR = GPIO_Pin;
 80023a4:	f04f 0e20 	mov.w	lr, #32
 80023a8:	f8c8 e010 	str.w	lr, [r8, #16]
 80023ac:	e59d      	b.n	8001eea <LCD_Line.constprop.0+0x73e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023ae:	f8c9 7010 	str.w	r7, [r9, #16]
 80023b2:	e4dc      	b.n	8001d6e <LCD_Line.constprop.0+0x5c2>
    GPIOx->BSRR = GPIO_Pin;
 80023b4:	2320      	movs	r3, #32
 80023b6:	f8c8 3010 	str.w	r3, [r8, #16]
 80023ba:	e478      	b.n	8001cae <LCD_Line.constprop.0+0x502>
 80023bc:	2310      	movs	r3, #16
 80023be:	f8c8 3010 	str.w	r3, [r8, #16]
 80023c2:	e46c      	b.n	8001c9e <LCD_Line.constprop.0+0x4f2>
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	f8c9 2010 	str.w	r2, [r9, #16]
 80023ca:	e461      	b.n	8001c90 <LCD_Line.constprop.0+0x4e4>
 80023cc:	2140      	movs	r1, #64	; 0x40
 80023ce:	f8c9 1010 	str.w	r1, [r9, #16]
 80023d2:	e456      	b.n	8001c82 <LCD_Line.constprop.0+0x4d6>
 80023d4:	f04f 0e20 	mov.w	lr, #32
 80023d8:	f8c9 e010 	str.w	lr, [r9, #16]
 80023dc:	e44a      	b.n	8001c74 <LCD_Line.constprop.0+0x4c8>
 80023de:	f04f 0e10 	mov.w	lr, #16
 80023e2:	f8c9 e010 	str.w	lr, [r9, #16]
 80023e6:	e43d      	b.n	8001c64 <LCD_Line.constprop.0+0x4b8>
 80023e8:	f04f 0e08 	mov.w	lr, #8
 80023ec:	f8c9 e010 	str.w	lr, [r9, #16]
 80023f0:	e430      	b.n	8001c54 <LCD_Line.constprop.0+0x4a8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023f2:	f8c9 7010 	str.w	r7, [r9, #16]
 80023f6:	e427      	b.n	8001c48 <LCD_Line.constprop.0+0x49c>
    GPIOx->BSRR = GPIO_Pin;
 80023f8:	f04f 0e20 	mov.w	lr, #32
 80023fc:	f8c8 e010 	str.w	lr, [r8, #16]
 8002400:	f7ff bbf0 	b.w	8001be4 <LCD_Line.constprop.0+0x438>
 8002404:	f04f 0e10 	mov.w	lr, #16
 8002408:	f8c8 e010 	str.w	lr, [r8, #16]
 800240c:	f7ff bbe2 	b.w	8001bd4 <LCD_Line.constprop.0+0x428>
 8002410:	f04f 0e80 	mov.w	lr, #128	; 0x80
 8002414:	f8c9 e010 	str.w	lr, [r9, #16]
 8002418:	f7ff bbd4 	b.w	8001bc4 <LCD_Line.constprop.0+0x418>
 800241c:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8002420:	f8c9 e010 	str.w	lr, [r9, #16]
 8002424:	f7ff bbc6 	b.w	8001bb4 <LCD_Line.constprop.0+0x408>
 8002428:	f04f 0e20 	mov.w	lr, #32
 800242c:	f8c9 e010 	str.w	lr, [r9, #16]
 8002430:	f7ff bbb8 	b.w	8001ba4 <LCD_Line.constprop.0+0x3f8>
 8002434:	f04f 0e10 	mov.w	lr, #16
 8002438:	f8c9 e010 	str.w	lr, [r9, #16]
 800243c:	f7ff bbaa 	b.w	8001b94 <LCD_Line.constprop.0+0x3e8>
 8002440:	f04f 0e08 	mov.w	lr, #8
 8002444:	f8c9 e010 	str.w	lr, [r9, #16]
 8002448:	f7ff bb9c 	b.w	8001b84 <LCD_Line.constprop.0+0x3d8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800244c:	f8c9 7010 	str.w	r7, [r9, #16]
 8002450:	f7ff bb92 	b.w	8001b78 <LCD_Line.constprop.0+0x3cc>
    GPIOx->BSRR = GPIO_Pin;
 8002454:	f04f 0e20 	mov.w	lr, #32
 8002458:	f8c8 e010 	str.w	lr, [r8, #16]
 800245c:	f7ff bb62 	b.w	8001b24 <LCD_Line.constprop.0+0x378>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002460:	f8c9 7010 	str.w	r7, [r9, #16]
 8002464:	f7ff ba9f 	b.w	80019a6 <LCD_Line.constprop.0+0x1fa>
		if (x1 == x2 && y1 == y2)
 8002468:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800246a:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 800246e:	f47f aeb6 	bne.w	80021de <LCD_Line.constprop.0+0xa32>
		}
	}
}
 8002472:	b03b      	add	sp, #236	; 0xec
 8002474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002478 <LCD_Line.constprop.1>:
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8002478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800247c:	b0ab      	sub	sp, #172	; 0xac
 800247e:	9123      	str	r1, [sp, #140]	; 0x8c
 8002480:	4619      	mov	r1, r3
 8002482:	9329      	str	r3, [sp, #164]	; 0xa4
	int deltaX = abs(x2 - x1);
 8002484:	1a13      	subs	r3, r2, r0
 8002486:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
 800248a:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
	int deltaY = abs(y2 - y1);
 800248e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
	int deltaX = abs(x2 - x1);
 8002490:	9224      	str	r2, [sp, #144]	; 0x90
	int deltaY = abs(y2 - y1);
 8002492:	1acb      	subs	r3, r1, r3
 8002494:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002498:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800249c:	9225      	str	r2, [sp, #148]	; 0x94
	int signX = x1 < x2 ? 1 : -1;
 800249e:	9a24      	ldr	r2, [sp, #144]	; 0x90
	int signY = y1 < y2 ? 1 : -1;
 80024a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
	int signX = x1 < x2 ? 1 : -1;
 80024a2:	4282      	cmp	r2, r0
 80024a4:	bf8c      	ite	hi
 80024a6:	2201      	movhi	r2, #1
 80024a8:	f04f 32ff 	movls.w	r2, #4294967295
	int signY = y1 < y2 ? 1 : -1;
 80024ac:	4299      	cmp	r1, r3
 80024ae:	bf8c      	ite	hi
 80024b0:	2101      	movhi	r1, #1
 80024b2:	f04f 31ff 	movls.w	r1, #4294967295
	int signX = x1 < x2 ? 1 : -1;
 80024b6:	9227      	str	r2, [sp, #156]	; 0x9c
 80024b8:	0a1a      	lsrs	r2, r3, #8
 80024ba:	9214      	str	r2, [sp, #80]	; 0x50
 80024bc:	0bda      	lsrs	r2, r3, #15
 80024be:	9201      	str	r2, [sp, #4]
 80024c0:	0b9a      	lsrs	r2, r3, #14
 80024c2:	9220      	str	r2, [sp, #128]	; 0x80
 80024c4:	0b5a      	lsrs	r2, r3, #13
 80024c6:	921e      	str	r2, [sp, #120]	; 0x78
 80024c8:	0b1a      	lsrs	r2, r3, #12
 80024ca:	921c      	str	r2, [sp, #112]	; 0x70
 80024cc:	0ada      	lsrs	r2, r3, #11
 80024ce:	921a      	str	r2, [sp, #104]	; 0x68
 80024d0:	0a9a      	lsrs	r2, r3, #10
	int signY = y1 < y2 ? 1 : -1;
 80024d2:	9128      	str	r1, [sp, #160]	; 0xa0
 80024d4:	9218      	str	r2, [sp, #96]	; 0x60
 80024d6:	b2d9      	uxtb	r1, r3
 80024d8:	0a5a      	lsrs	r2, r3, #9
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	9312      	str	r3, [sp, #72]	; 0x48
 80024e0:	f000 0301 	and.w	r3, r0, #1
 80024e4:	9311      	str	r3, [sp, #68]	; 0x44
	int error = deltaX - deltaY;
 80024e6:	4663      	mov	r3, ip
 80024e8:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80024ec:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 80024f0:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 80024f4:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 80024f8:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80024fc:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8002500:	9216      	str	r2, [sp, #88]	; 0x58
 8002502:	0a02      	lsrs	r2, r0, #8
 8002504:	9213      	str	r2, [sp, #76]	; 0x4c
 8002506:	0bc2      	lsrs	r2, r0, #15
 8002508:	9200      	str	r2, [sp, #0]
 800250a:	0b82      	lsrs	r2, r0, #14
 800250c:	921f      	str	r2, [sp, #124]	; 0x7c
 800250e:	0b42      	lsrs	r2, r0, #13
 8002510:	921d      	str	r2, [sp, #116]	; 0x74
 8002512:	0b02      	lsrs	r2, r0, #12
 8002514:	921b      	str	r2, [sp, #108]	; 0x6c
 8002516:	0ac2      	lsrs	r2, r0, #11
 8002518:	9219      	str	r2, [sp, #100]	; 0x64
 800251a:	0a82      	lsrs	r2, r0, #10
 800251c:	9122      	str	r1, [sp, #136]	; 0x88
 800251e:	9217      	str	r2, [sp, #92]	; 0x5c
 8002520:	b2c1      	uxtb	r1, r0
 8002522:	0a42      	lsrs	r2, r0, #9
void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
 8002524:	9010      	str	r0, [sp, #64]	; 0x40
	int deltaX = abs(x2 - x1);
 8002526:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
 800252a:	9215      	str	r2, [sp, #84]	; 0x54
 800252c:	9121      	str	r1, [sp, #132]	; 0x84
	int error = deltaX - deltaY;
 800252e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8002530:	f8df b350 	ldr.w	fp, [pc, #848]	; 8002884 <LCD_Line.constprop.1+0x40c>
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	f8df a350 	ldr.w	sl, [pc, #848]	; 8002888 <LCD_Line.constprop.1+0x410>
 800253a:	f8df 9350 	ldr.w	r9, [pc, #848]	; 800288c <LCD_Line.constprop.1+0x414>
 800253e:	9302      	str	r3, [sp, #8]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002540:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002544:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002548:	2210      	movs	r2, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800254a:	f8cb e010 	str.w	lr, [fp, #16]
 800254e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002552:	f8ca 7010 	str.w	r7, [sl, #16]
 8002556:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800255a:	f8ca 4010 	str.w	r4, [sl, #16]
 800255e:	f8c9 6010 	str.w	r6, [r9, #16]
 8002562:	f8c9 5010 	str.w	r5, [r9, #16]
 8002566:	f8c9 7010 	str.w	r7, [r9, #16]
 800256a:	f8c9 4010 	str.w	r4, [r9, #16]
 800256e:	f8c9 8010 	str.w	r8, [r9, #16]
 8002572:	900b      	str	r0, [sp, #44]	; 0x2c
    GPIOx->BSRR = GPIO_Pin;
 8002574:	2040      	movs	r0, #64	; 0x40
	data[0] = x1 >> 8;
 8002576:	f8bd c050 	ldrh.w	ip, [sp, #80]	; 0x50
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800257a:	f8c9 1010 	str.w	r1, [r9, #16]
 800257e:	f8ca 5010 	str.w	r5, [sl, #16]
 8002582:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002586:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800258a:	f8ca 3010 	str.w	r3, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800258e:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002592:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002596:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800259a:	f8c9 2010 	str.w	r2, [r9, #16]
 800259e:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025a0:	f8c9 3010 	str.w	r3, [r9, #16]
 80025a4:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80025a8:	f8cb 2010 	str.w	r2, [fp, #16]
 80025ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025b0:	f8cb 2010 	str.w	r2, [fp, #16]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025ba:	f8cb e010 	str.w	lr, [fp, #16]
 80025be:	f8ca 7010 	str.w	r7, [sl, #16]
 80025c2:	f8ca 4010 	str.w	r4, [sl, #16]
 80025c6:	f8c9 6010 	str.w	r6, [r9, #16]
 80025ca:	f8c9 5010 	str.w	r5, [r9, #16]
 80025ce:	f8c9 7010 	str.w	r7, [r9, #16]
 80025d2:	f8c9 4010 	str.w	r4, [r9, #16]
 80025d6:	f8c9 8010 	str.w	r8, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80025da:	9b01      	ldr	r3, [sp, #4]
 80025dc:	f8c9 1010 	str.w	r1, [r9, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 849f 	beq.w	8002f24 <LCD_Line.constprop.1+0xaac>
    GPIOx->BSRR = GPIO_Pin;
 80025e6:	2304      	movs	r3, #4
 80025e8:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80025ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80025ee:	f013 0001 	ands.w	r0, r3, #1
 80025f2:	bf1c      	itt	ne
 80025f4:	2308      	movne	r3, #8
 80025f6:	f8ca 3010 	strne.w	r3, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80025fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025fc:	bf08      	it	eq
 80025fe:	f8ca 6010 	streq.w	r6, [sl, #16]
 8002602:	f013 0301 	ands.w	r3, r3, #1
 8002606:	9303      	str	r3, [sp, #12]
 8002608:	bf0c      	ite	eq
 800260a:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800260e:	2310      	movne	r3, #16
 8002610:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002614:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8002616:	f013 0301 	ands.w	r3, r3, #1
 800261a:	9304      	str	r3, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800261c:	bf0c      	ite	eq
 800261e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002622:	2320      	movne	r3, #32
 8002624:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002628:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800262a:	f013 0301 	ands.w	r3, r3, #1
 800262e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002630:	bf0c      	ite	eq
 8002632:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8002636:	2340      	movne	r3, #64	; 0x40
 8002638:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800263c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800263e:	f013 0301 	ands.w	r3, r3, #1
 8002642:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002644:	bf0c      	ite	eq
 8002646:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800264a:	2380      	movne	r3, #128	; 0x80
 800264c:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002650:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002652:	f013 0301 	ands.w	r3, r3, #1
 8002656:	9305      	str	r3, [sp, #20]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002658:	bf0c      	ite	eq
 800265a:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800265e:	2310      	movne	r3, #16
 8002660:	f8c9 3010 	str.w	r3, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002664:	f01c 0301 	ands.w	r3, ip, #1
 8002668:	9306      	str	r3, [sp, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800266a:	bf0c      	ite	eq
 800266c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002670:	2320      	movne	r3, #32
 8002672:	f8c9 3010 	str.w	r3, [r9, #16]
 8002676:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002678:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800267c:	f8cb 3010 	str.w	r3, [fp, #16]
 8002680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002684:	f8cb 3010 	str.w	r3, [fp, #16]
 8002688:	2301      	movs	r3, #1
 800268a:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800268e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002692:	f8cb e010 	str.w	lr, [fp, #16]
 8002696:	f8ca 7010 	str.w	r7, [sl, #16]
 800269a:	f8ca 4010 	str.w	r4, [sl, #16]
 800269e:	f8c9 6010 	str.w	r6, [r9, #16]
 80026a2:	f8c9 5010 	str.w	r5, [r9, #16]
 80026a6:	f8c9 7010 	str.w	r7, [r9, #16]
 80026aa:	f8c9 4010 	str.w	r4, [r9, #16]
 80026ae:	f8c9 8010 	str.w	r8, [r9, #16]
 80026b2:	f8c9 3010 	str.w	r3, [r9, #16]
 80026b6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80026b8:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80026ba:	09d2      	lsrs	r2, r2, #7
 80026bc:	9207      	str	r2, [sp, #28]
    GPIOx->BSRR = GPIO_Pin;
 80026be:	bf1c      	itt	ne
 80026c0:	2204      	movne	r2, #4
 80026c2:	f8ca 2010 	strne.w	r2, [sl, #16]
 80026c6:	f3c3 1280 	ubfx	r2, r3, #6, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026ca:	bf08      	it	eq
 80026cc:	f8ca 5010 	streq.w	r5, [sl, #16]
 80026d0:	920c      	str	r2, [sp, #48]	; 0x30
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80026d2:	065a      	lsls	r2, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 80026d4:	bf4a      	itet	mi
 80026d6:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026d8:	f8ca 6010 	strpl.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 80026dc:	f8ca 2010 	strmi.w	r2, [sl, #16]
 80026e0:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80026e4:	0699      	lsls	r1, r3, #26
 80026e6:	9208      	str	r2, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026e8:	bf54      	ite	pl
 80026ea:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80026ee:	2210      	movmi	r2, #16
 80026f0:	f8ca 2010 	str.w	r2, [sl, #16]
 80026f4:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80026f8:	920d      	str	r2, [sp, #52]	; 0x34
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80026fa:	06da      	lsls	r2, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026fc:	bf54      	ite	pl
 80026fe:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002702:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002704:	0719      	lsls	r1, r3, #28
 8002706:	f8ca 2010 	str.w	r2, [sl, #16]
 800270a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800270e:	920e      	str	r2, [sp, #56]	; 0x38
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002710:	bf54      	ite	pl
 8002712:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8002716:	2240      	movmi	r2, #64	; 0x40
 8002718:	f8ca 2010 	str.w	r2, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800271c:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800271e:	bf54      	ite	pl
 8002720:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8002724:	2280      	movmi	r2, #128	; 0x80
 8002726:	f3c3 0180 	ubfx	r1, r3, #2, #1
 800272a:	f8ca 2010 	str.w	r2, [sl, #16]
 800272e:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002732:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002734:	bf54      	ite	pl
 8002736:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800273a:	2310      	movmi	r3, #16
 800273c:	f8c9 3010 	str.w	r3, [r9, #16]
 8002740:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002742:	fa1f fc83 	uxth.w	ip, r3
 8002746:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800274a:	2b00      	cmp	r3, #0
 800274c:	f040 83e5 	bne.w	8002f1a <LCD_Line.constprop.1+0xaa2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002750:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 8002754:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002758:	f04f 0c02 	mov.w	ip, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800275c:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002760:	f8cb c010 	str.w	ip, [fp, #16]
 8002764:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8002768:	f8cb c010 	str.w	ip, [fp, #16]
 800276c:	f04f 0c01 	mov.w	ip, #1
 8002770:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002774:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800277a:	f8cb e010 	str.w	lr, [fp, #16]
 800277e:	f8ca 7010 	str.w	r7, [sl, #16]
 8002782:	f8ca 4010 	str.w	r4, [sl, #16]
 8002786:	f8c9 6010 	str.w	r6, [r9, #16]
 800278a:	f8c9 5010 	str.w	r5, [r9, #16]
 800278e:	f8c9 7010 	str.w	r7, [r9, #16]
 8002792:	f8c9 4010 	str.w	r4, [r9, #16]
 8002796:	f8c9 8010 	str.w	r8, [r9, #16]
 800279a:	f8c9 c010 	str.w	ip, [r9, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 83b8 	beq.w	8002f14 <LCD_Line.constprop.1+0xa9c>
    GPIOx->BSRR = GPIO_Pin;
 80027a4:	f04f 0c04 	mov.w	ip, #4
 80027a8:	f8ca c010 	str.w	ip, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80027ac:	2800      	cmp	r0, #0
 80027ae:	f040 83ad 	bne.w	8002f0c <LCD_Line.constprop.1+0xa94>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027b2:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80027b6:	9b03      	ldr	r3, [sp, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f040 83a3 	bne.w	8002f04 <LCD_Line.constprop.1+0xa8c>
 80027be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80027c2:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80027c6:	9b04      	ldr	r3, [sp, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f040 8397 	bne.w	8002efc <LCD_Line.constprop.1+0xa84>
 80027ce:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80027d2:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80027d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f040 838b 	bne.w	8002ef4 <LCD_Line.constprop.1+0xa7c>
 80027de:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80027e2:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80027e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f040 837f 	bne.w	8002eec <LCD_Line.constprop.1+0xa74>
 80027ee:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80027f2:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80027f6:	9b05      	ldr	r3, [sp, #20]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f040 8373 	bne.w	8002ee4 <LCD_Line.constprop.1+0xa6c>
 80027fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002802:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002806:	9b06      	ldr	r3, [sp, #24]
 8002808:	2b00      	cmp	r3, #0
 800280a:	f040 8367 	bne.w	8002edc <LCD_Line.constprop.1+0xa64>
 800280e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002812:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002816:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002818:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800281c:	f8cb 0010 	str.w	r0, [fp, #16]
 8002820:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002824:	f8cb 0010 	str.w	r0, [fp, #16]
 8002828:	2001      	movs	r0, #1
 800282a:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800282e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002832:	9b07      	ldr	r3, [sp, #28]
 8002834:	f8cb e010 	str.w	lr, [fp, #16]
 8002838:	f8ca 7010 	str.w	r7, [sl, #16]
 800283c:	f8ca 4010 	str.w	r4, [sl, #16]
 8002840:	f8c9 6010 	str.w	r6, [r9, #16]
 8002844:	f8c9 5010 	str.w	r5, [r9, #16]
 8002848:	f8c9 7010 	str.w	r7, [r9, #16]
 800284c:	f8c9 4010 	str.w	r4, [r9, #16]
 8002850:	f8c9 8010 	str.w	r8, [r9, #16]
 8002854:	f8c9 0010 	str.w	r0, [r9, #16]
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 833c 	beq.w	8002ed6 <LCD_Line.constprop.1+0xa5e>
    GPIOx->BSRR = GPIO_Pin;
 800285e:	2004      	movs	r0, #4
 8002860:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002864:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002866:	2b00      	cmp	r3, #0
 8002868:	f040 8331 	bne.w	8002ece <LCD_Line.constprop.1+0xa56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800286c:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002870:	9b08      	ldr	r3, [sp, #32]
 8002872:	2b00      	cmp	r3, #0
 8002874:	f040 8327 	bne.w	8002ec6 <LCD_Line.constprop.1+0xa4e>
 8002878:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800287c:	f8ca 0010 	str.w	r0, [sl, #16]
 8002880:	e006      	b.n	8002890 <LCD_Line.constprop.1+0x418>
 8002882:	bf00      	nop
 8002884:	40010c00 	.word	0x40010c00
 8002888:	40010800 	.word	0x40010800
 800288c:	40011000 	.word	0x40011000
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002890:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002892:	2b00      	cmp	r3, #0
 8002894:	f040 8313 	bne.w	8002ebe <LCD_Line.constprop.1+0xa46>
 8002898:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800289c:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80028a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f040 8307 	bne.w	8002eb6 <LCD_Line.constprop.1+0xa3e>
 80028a8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80028ac:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80028b0:	2900      	cmp	r1, #0
 80028b2:	f040 82fc 	bne.w	8002eae <LCD_Line.constprop.1+0xa36>
 80028b6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80028ba:	f8ca 1010 	str.w	r1, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80028be:	2a00      	cmp	r2, #0
 80028c0:	f040 82f1 	bne.w	8002ea6 <LCD_Line.constprop.1+0xa2e>
 80028c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80028c8:	f8c9 2010 	str.w	r2, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80028cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 82e5 	bne.w	8002e9e <LCD_Line.constprop.1+0xa26>
 80028d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028d8:	f8c9 3010 	str.w	r3, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80028dc:	f8bd 2000 	ldrh.w	r2, [sp]
 80028e0:	f8cb 7010 	str.w	r7, [fp, #16]
 80028e4:	920d      	str	r2, [sp, #52]	; 0x34
    GPIOx->BSRR = GPIO_Pin;
 80028e6:	2202      	movs	r2, #2
	data[0] = y1 >> 8;
 80028e8:	f8bd c04c 	ldrh.w	ip, [sp, #76]	; 0x4c
 80028ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f0:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 80028f8:	2110      	movs	r1, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80028fe:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002902:	f8cb 4010 	str.w	r4, [fp, #16]
 8002906:	f8cb e010 	str.w	lr, [fp, #16]
 800290a:	f8ca 7010 	str.w	r7, [sl, #16]
 800290e:	f8ca 4010 	str.w	r4, [sl, #16]
 8002912:	f8c9 6010 	str.w	r6, [r9, #16]
 8002916:	f8c9 5010 	str.w	r5, [r9, #16]
 800291a:	f8c9 7010 	str.w	r7, [r9, #16]
 800291e:	f8c9 4010 	str.w	r4, [r9, #16]
 8002922:	f8c9 8010 	str.w	r8, [r9, #16]
 8002926:	f8c9 0010 	str.w	r0, [r9, #16]
 800292a:	f8ca 5010 	str.w	r5, [sl, #16]
 800292e:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002932:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002936:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800293a:	2240      	movs	r2, #64	; 0x40
 800293c:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002940:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002944:	f8ca 2010 	str.w	r2, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002948:	2220      	movs	r2, #32
 800294a:	f8c9 1010 	str.w	r1, [r9, #16]
 800294e:	f8c9 2010 	str.w	r2, [r9, #16]
 8002952:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002954:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002958:	f8cb 2010 	str.w	r2, [fp, #16]
 800295c:	2201      	movs	r2, #1
 800295e:	f8cb 3010 	str.w	r3, [fp, #16]
 8002962:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002966:	f8cb e010 	str.w	lr, [fp, #16]
 800296a:	f8ca 7010 	str.w	r7, [sl, #16]
 800296e:	f8ca 4010 	str.w	r4, [sl, #16]
 8002972:	f8c9 6010 	str.w	r6, [r9, #16]
 8002976:	f8c9 5010 	str.w	r5, [r9, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800297a:	9b00      	ldr	r3, [sp, #0]
 800297c:	f8c9 7010 	str.w	r7, [r9, #16]
 8002980:	f8c9 4010 	str.w	r4, [r9, #16]
 8002984:	f8c9 8010 	str.w	r8, [r9, #16]
 8002988:	f8c9 0010 	str.w	r0, [r9, #16]
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 8283 	beq.w	8002e98 <LCD_Line.constprop.1+0xa20>
    GPIOx->BSRR = GPIO_Pin;
 8002992:	2304      	movs	r3, #4
 8002994:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002998:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800299a:	f013 0001 	ands.w	r0, r3, #1
 800299e:	bf1c      	itt	ne
 80029a0:	2308      	movne	r3, #8
 80029a2:	f8ca 3010 	strne.w	r3, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80029a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029a8:	bf08      	it	eq
 80029aa:	f8ca 6010 	streq.w	r6, [sl, #16]
 80029ae:	f013 0301 	ands.w	r3, r3, #1
 80029b2:	930c      	str	r3, [sp, #48]	; 0x30
 80029b4:	bf0c      	ite	eq
 80029b6:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80029ba:	2310      	movne	r3, #16
 80029bc:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80029c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80029c2:	f013 0301 	ands.w	r3, r3, #1
 80029c6:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029c8:	bf0c      	ite	eq
 80029ca:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80029ce:	2320      	movne	r3, #32
 80029d0:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80029d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80029d6:	f013 0301 	ands.w	r3, r3, #1
 80029da:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029dc:	bf0c      	ite	eq
 80029de:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80029e2:	2340      	movne	r3, #64	; 0x40
 80029e4:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80029e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80029ea:	f013 0301 	ands.w	r3, r3, #1
 80029ee:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029f0:	bf0c      	ite	eq
 80029f2:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80029f6:	2380      	movne	r3, #128	; 0x80
 80029f8:	f8ca 3010 	str.w	r3, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80029fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80029fe:	f013 0301 	ands.w	r3, r3, #1
 8002a02:	9308      	str	r3, [sp, #32]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a04:	bf0c      	ite	eq
 8002a06:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002a0a:	2310      	movne	r3, #16
 8002a0c:	f8c9 3010 	str.w	r3, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002a10:	f01c 0301 	ands.w	r3, ip, #1
 8002a14:	9307      	str	r3, [sp, #28]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a16:	bf0c      	ite	eq
 8002a18:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002a1c:	2320      	movne	r3, #32
 8002a1e:	f8c9 3010 	str.w	r3, [r9, #16]
 8002a22:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a24:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002a28:	f8cb 3010 	str.w	r3, [fp, #16]
 8002a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a30:	f8cb 3010 	str.w	r3, [fp, #16]
 8002a34:	2301      	movs	r3, #1
 8002a36:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a3e:	f8cb e010 	str.w	lr, [fp, #16]
 8002a42:	f8ca 7010 	str.w	r7, [sl, #16]
 8002a46:	f8ca 4010 	str.w	r4, [sl, #16]
 8002a4a:	f8c9 6010 	str.w	r6, [r9, #16]
 8002a4e:	f8c9 5010 	str.w	r5, [r9, #16]
 8002a52:	f8c9 7010 	str.w	r7, [r9, #16]
 8002a56:	f8c9 4010 	str.w	r4, [r9, #16]
 8002a5a:	f8c9 8010 	str.w	r8, [r9, #16]
 8002a5e:	f8c9 3010 	str.w	r3, [r9, #16]
 8002a62:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002a64:	b293      	uxth	r3, r2
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002a66:	09d2      	lsrs	r2, r2, #7
 8002a68:	9206      	str	r2, [sp, #24]
    GPIOx->BSRR = GPIO_Pin;
 8002a6a:	bf1c      	itt	ne
 8002a6c:	2204      	movne	r2, #4
 8002a6e:	f8ca 2010 	strne.w	r2, [sl, #16]
 8002a72:	f3c3 1280 	ubfx	r2, r3, #6, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a76:	bf08      	it	eq
 8002a78:	f8ca 5010 	streq.w	r5, [sl, #16]
 8002a7c:	9205      	str	r2, [sp, #20]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002a7e:	065a      	lsls	r2, r3, #25
    GPIOx->BSRR = GPIO_Pin;
 8002a80:	bf4a      	itet	mi
 8002a82:	2208      	movmi	r2, #8
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a84:	f8ca 6010 	strpl.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002a88:	f8ca 2010 	strmi.w	r2, [sl, #16]
 8002a8c:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002a90:	0699      	lsls	r1, r3, #26
 8002a92:	9204      	str	r2, [sp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a94:	bf54      	ite	pl
 8002a96:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002a9a:	2210      	movmi	r2, #16
 8002a9c:	f8ca 2010 	str.w	r2, [sl, #16]
 8002aa0:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8002aa4:	9203      	str	r2, [sp, #12]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002aa6:	06da      	lsls	r2, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002aa8:	bf54      	ite	pl
 8002aaa:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8002aae:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002ab0:	0719      	lsls	r1, r3, #28
 8002ab2:	f8ca 2010 	str.w	r2, [sl, #16]
 8002ab6:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8002aba:	920f      	str	r2, [sp, #60]	; 0x3c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002abc:	bf54      	ite	pl
 8002abe:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8002ac2:	2240      	movmi	r2, #64	; 0x40
 8002ac4:	f8ca 2010 	str.w	r2, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002ac8:	075a      	lsls	r2, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002aca:	bf54      	ite	pl
 8002acc:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8002ad0:	2280      	movmi	r2, #128	; 0x80
 8002ad2:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8002ad6:	f8ca 2010 	str.w	r2, [sl, #16]
 8002ada:	f3c3 0240 	ubfx	r2, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002ade:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ae0:	bf54      	ite	pl
 8002ae2:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002ae6:	2310      	movmi	r3, #16
 8002ae8:	f8c9 3010 	str.w	r3, [r9, #16]
 8002aec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002aee:	fa1f fc83 	uxth.w	ip, r3
 8002af2:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f040 81c9 	bne.w	8002e8e <LCD_Line.constprop.1+0xa16>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002afc:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 8002b00:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002b04:	f04f 0c02 	mov.w	ip, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b08:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002b0c:	f8cb c010 	str.w	ip, [fp, #16]
 8002b10:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8002b14:	f8cb c010 	str.w	ip, [fp, #16]
 8002b18:	f04f 0c01 	mov.w	ip, #1
 8002b1c:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b20:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002b24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b26:	f8cb e010 	str.w	lr, [fp, #16]
 8002b2a:	f8ca 7010 	str.w	r7, [sl, #16]
 8002b2e:	f8ca 4010 	str.w	r4, [sl, #16]
 8002b32:	f8c9 6010 	str.w	r6, [r9, #16]
 8002b36:	f8c9 5010 	str.w	r5, [r9, #16]
 8002b3a:	f8c9 7010 	str.w	r7, [r9, #16]
 8002b3e:	f8c9 4010 	str.w	r4, [r9, #16]
 8002b42:	f8c9 8010 	str.w	r8, [r9, #16]
 8002b46:	f8c9 c010 	str.w	ip, [r9, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 819c 	beq.w	8002e88 <LCD_Line.constprop.1+0xa10>
    GPIOx->BSRR = GPIO_Pin;
 8002b50:	f04f 0c04 	mov.w	ip, #4
 8002b54:	f8ca c010 	str.w	ip, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002b58:	2800      	cmp	r0, #0
 8002b5a:	f040 8191 	bne.w	8002e80 <LCD_Line.constprop.1+0xa08>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b5e:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002b62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f040 8187 	bne.w	8002e78 <LCD_Line.constprop.1+0xa00>
 8002b6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b6e:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f040 817b 	bne.w	8002e70 <LCD_Line.constprop.1+0x9f8>
 8002b7a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002b7e:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f040 816f 	bne.w	8002e68 <LCD_Line.constprop.1+0x9f0>
 8002b8a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002b8e:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f040 8163 	bne.w	8002e60 <LCD_Line.constprop.1+0x9e8>
 8002b9a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002b9e:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002ba2:	9b08      	ldr	r3, [sp, #32]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f040 8157 	bne.w	8002e58 <LCD_Line.constprop.1+0x9e0>
 8002baa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002bae:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002bb2:	9b07      	ldr	r3, [sp, #28]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f040 814b 	bne.w	8002e50 <LCD_Line.constprop.1+0x9d8>
 8002bba:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002bbe:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002bc2:	2002      	movs	r0, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bc4:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002bc8:	f8cb 0010 	str.w	r0, [fp, #16]
 8002bcc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002bd0:	f8cb 0010 	str.w	r0, [fp, #16]
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bda:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8002bde:	9b06      	ldr	r3, [sp, #24]
 8002be0:	f8cb e010 	str.w	lr, [fp, #16]
 8002be4:	f8ca 7010 	str.w	r7, [sl, #16]
 8002be8:	f8ca 4010 	str.w	r4, [sl, #16]
 8002bec:	f8c9 6010 	str.w	r6, [r9, #16]
 8002bf0:	f8c9 5010 	str.w	r5, [r9, #16]
 8002bf4:	f8c9 7010 	str.w	r7, [r9, #16]
 8002bf8:	f8c9 4010 	str.w	r4, [r9, #16]
 8002bfc:	f8c9 8010 	str.w	r8, [r9, #16]
 8002c00:	f8c9 0010 	str.w	r0, [r9, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8120 	beq.w	8002e4a <LCD_Line.constprop.1+0x9d2>
    GPIOx->BSRR = GPIO_Pin;
 8002c0a:	2004      	movs	r0, #4
 8002c0c:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8002c10:	9b05      	ldr	r3, [sp, #20]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f040 8115 	bne.w	8002e42 <LCD_Line.constprop.1+0x9ca>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c18:	f8ca 6010 	str.w	r6, [sl, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8002c1c:	9b04      	ldr	r3, [sp, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f040 810b 	bne.w	8002e3a <LCD_Line.constprop.1+0x9c2>
 8002c24:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002c28:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8002c2c:	9b03      	ldr	r3, [sp, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f040 80ff 	bne.w	8002e32 <LCD_Line.constprop.1+0x9ba>
 8002c34:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002c38:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8002c3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f040 80f3 	bne.w	8002e2a <LCD_Line.constprop.1+0x9b2>
 8002c44:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002c48:	f8ca 0010 	str.w	r0, [sl, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8002c4c:	2900      	cmp	r1, #0
 8002c4e:	f040 80e8 	bne.w	8002e22 <LCD_Line.constprop.1+0x9aa>
 8002c52:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8002c56:	f8ca 1010 	str.w	r1, [sl, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8002c5a:	2a00      	cmp	r2, #0
 8002c5c:	f040 80dd 	bne.w	8002e1a <LCD_Line.constprop.1+0x9a2>
 8002c60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c64:	f8c9 2010 	str.w	r2, [r9, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8002c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f040 80d1 	bne.w	8002e12 <LCD_Line.constprop.1+0x99a>
 8002c70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c74:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002c78:	2202      	movs	r2, #2
 8002c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c7e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c82:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002c86:	f8cb 2010 	str.w	r2, [fp, #16]
 8002c8a:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c8e:	f8cb 4010 	str.w	r4, [fp, #16]
 8002c92:	f8cb e010 	str.w	lr, [fp, #16]
 8002c96:	f8ca 7010 	str.w	r7, [sl, #16]
 8002c9a:	f8ca 4010 	str.w	r4, [sl, #16]
 8002c9e:	f8c9 6010 	str.w	r6, [r9, #16]
 8002ca2:	f8c9 5010 	str.w	r5, [r9, #16]
 8002ca6:	f8c9 7010 	str.w	r7, [r9, #16]
 8002caa:	f8c9 4010 	str.w	r4, [r9, #16]
 8002cae:	f8c9 8010 	str.w	r8, [r9, #16]
 8002cb2:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002cb6:	2010      	movs	r0, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cb8:	f8ca 5010 	str.w	r5, [sl, #16]
 8002cbc:	f8ca 6010 	str.w	r6, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002cc0:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cc4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002cc8:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002ccc:	2040      	movs	r0, #64	; 0x40
 8002cce:	f8ca 0010 	str.w	r0, [sl, #16]
 8002cd2:	2080      	movs	r0, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cd4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002cd8:	f8ca 0010 	str.w	r0, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cdc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002ce0:	f8c9 1010 	str.w	r1, [r9, #16]
 8002ce4:	f8c9 0010 	str.w	r0, [r9, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002ce8:	2001      	movs	r0, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cea:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002cee:	f8cb 2010 	str.w	r2, [fp, #16]
 8002cf2:	f8cb 3010 	str.w	r3, [fp, #16]
 8002cf6:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cfa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cfe:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002d02:	f04f 0c20 	mov.w	ip, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d06:	f8ca 7010 	str.w	r7, [sl, #16]
 8002d0a:	f8ca 4010 	str.w	r4, [sl, #16]
 8002d0e:	f8c9 6010 	str.w	r6, [r9, #16]
 8002d12:	f8c9 5010 	str.w	r5, [r9, #16]
 8002d16:	f8c9 7010 	str.w	r7, [r9, #16]
 8002d1a:	f8c9 4010 	str.w	r4, [r9, #16]
 8002d1e:	f8c9 8010 	str.w	r8, [r9, #16]
 8002d22:	f8c9 0010 	str.w	r0, [r9, #16]
 8002d26:	f8ca 5010 	str.w	r5, [sl, #16]
 8002d2a:	f8ca 6010 	str.w	r6, [sl, #16]
 8002d2e:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002d32:	2140      	movs	r1, #64	; 0x40
 8002d34:	f8ca c010 	str.w	ip, [sl, #16]
 8002d38:	2010      	movs	r0, #16
 8002d3a:	f8ca 1010 	str.w	r1, [sl, #16]
 8002d3e:	2180      	movs	r1, #128	; 0x80
 8002d40:	f8ca 1010 	str.w	r1, [sl, #16]
 8002d44:	f8c9 0010 	str.w	r0, [r9, #16]
 8002d48:	f8c9 c010 	str.w	ip, [r9, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d4c:	f8cb 7010 	str.w	r7, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8002d50:	f8cb 2010 	str.w	r2, [fp, #16]
		if (x1 == x2 && y1 == y2)
 8002d54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002d56:	f8cb 3010 	str.w	r3, [fp, #16]
 8002d5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	f000 80e5 	beq.w	8002f2c <LCD_Line.constprop.1+0xab4>
		if (error2 > -deltaY)
 8002d62:	9825      	ldr	r0, [sp, #148]	; 0x94
		error2 = error * 2;
 8002d64:	9902      	ldr	r1, [sp, #8]
		if (error2 > -deltaY)
 8002d66:	4243      	negs	r3, r0
 8002d68:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
		error2 = error * 2;
 8002d6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
		if (error2 > -deltaY)
 8002d70:	da24      	bge.n	8002dbc <LCD_Line.constprop.1+0x944>
			x1 += signX;
 8002d72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002d74:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
			error -= deltaY;
 8002d78:	1a09      	subs	r1, r1, r0
			x1 += signX;
 8002d7a:	4463      	add	r3, ip
			error -= deltaY;
 8002d7c:	9102      	str	r1, [sp, #8]
			x1 += signX;
 8002d7e:	b299      	uxth	r1, r3
 8002d80:	9110      	str	r1, [sp, #64]	; 0x40
 8002d82:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002d86:	9113      	str	r1, [sp, #76]	; 0x4c
 8002d88:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 8002d8c:	9100      	str	r1, [sp, #0]
 8002d8e:	f3c3 3181 	ubfx	r1, r3, #14, #2
 8002d92:	911f      	str	r1, [sp, #124]	; 0x7c
 8002d94:	f3c3 3142 	ubfx	r1, r3, #13, #3
 8002d98:	911d      	str	r1, [sp, #116]	; 0x74
 8002d9a:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8002d9e:	911b      	str	r1, [sp, #108]	; 0x6c
 8002da0:	f3c3 21c4 	ubfx	r1, r3, #11, #5
 8002da4:	9119      	str	r1, [sp, #100]	; 0x64
 8002da6:	f3c3 2185 	ubfx	r1, r3, #10, #6
 8002daa:	9117      	str	r1, [sp, #92]	; 0x5c
 8002dac:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8002db0:	9115      	str	r1, [sp, #84]	; 0x54
 8002db2:	b2d9      	uxtb	r1, r3
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	9121      	str	r1, [sp, #132]	; 0x84
 8002dba:	9311      	str	r3, [sp, #68]	; 0x44
		if (error2 < deltaX)
 8002dbc:	9926      	ldr	r1, [sp, #152]	; 0x98
 8002dbe:	4291      	cmp	r1, r2
 8002dc0:	f77f abbe 	ble.w	8002540 <LCD_Line.constprop.1+0xc8>
			y1 += signY;
 8002dc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002dc6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002dc8:	4413      	add	r3, r2
			error += deltaX;
 8002dca:	9a02      	ldr	r2, [sp, #8]
 8002dcc:	440a      	add	r2, r1
 8002dce:	9202      	str	r2, [sp, #8]
			y1 += signY;
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	9223      	str	r2, [sp, #140]	; 0x8c
 8002dd4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002dd8:	9214      	str	r2, [sp, #80]	; 0x50
 8002dda:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002dde:	9201      	str	r2, [sp, #4]
 8002de0:	f3c3 3281 	ubfx	r2, r3, #14, #2
 8002de4:	9220      	str	r2, [sp, #128]	; 0x80
 8002de6:	f3c3 3242 	ubfx	r2, r3, #13, #3
 8002dea:	921e      	str	r2, [sp, #120]	; 0x78
 8002dec:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8002df0:	921c      	str	r2, [sp, #112]	; 0x70
 8002df2:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 8002df6:	921a      	str	r2, [sp, #104]	; 0x68
 8002df8:	f3c3 2285 	ubfx	r2, r3, #10, #6
 8002dfc:	9218      	str	r2, [sp, #96]	; 0x60
 8002dfe:	f3c3 2246 	ubfx	r2, r3, #9, #7
 8002e02:	9216      	str	r2, [sp, #88]	; 0x58
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	9222      	str	r2, [sp, #136]	; 0x88
 8002e0c:	9312      	str	r3, [sp, #72]	; 0x48
 8002e0e:	f7ff bb97 	b.w	8002540 <LCD_Line.constprop.1+0xc8>
 8002e12:	2320      	movs	r3, #32
 8002e14:	f8c9 3010 	str.w	r3, [r9, #16]
 8002e18:	e72e      	b.n	8002c78 <LCD_Line.constprop.1+0x800>
 8002e1a:	2210      	movs	r2, #16
 8002e1c:	f8c9 2010 	str.w	r2, [r9, #16]
 8002e20:	e722      	b.n	8002c68 <LCD_Line.constprop.1+0x7f0>
 8002e22:	2180      	movs	r1, #128	; 0x80
 8002e24:	f8ca 1010 	str.w	r1, [sl, #16]
 8002e28:	e717      	b.n	8002c5a <LCD_Line.constprop.1+0x7e2>
 8002e2a:	2040      	movs	r0, #64	; 0x40
 8002e2c:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e30:	e70c      	b.n	8002c4c <LCD_Line.constprop.1+0x7d4>
 8002e32:	2020      	movs	r0, #32
 8002e34:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e38:	e700      	b.n	8002c3c <LCD_Line.constprop.1+0x7c4>
 8002e3a:	2010      	movs	r0, #16
 8002e3c:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e40:	e6f4      	b.n	8002c2c <LCD_Line.constprop.1+0x7b4>
 8002e42:	2008      	movs	r0, #8
 8002e44:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e48:	e6e8      	b.n	8002c1c <LCD_Line.constprop.1+0x7a4>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e4a:	f8ca 5010 	str.w	r5, [sl, #16]
 8002e4e:	e6df      	b.n	8002c10 <LCD_Line.constprop.1+0x798>
    GPIOx->BSRR = GPIO_Pin;
 8002e50:	2020      	movs	r0, #32
 8002e52:	f8c9 0010 	str.w	r0, [r9, #16]
 8002e56:	e6b4      	b.n	8002bc2 <LCD_Line.constprop.1+0x74a>
 8002e58:	2010      	movs	r0, #16
 8002e5a:	f8c9 0010 	str.w	r0, [r9, #16]
 8002e5e:	e6a8      	b.n	8002bb2 <LCD_Line.constprop.1+0x73a>
 8002e60:	2080      	movs	r0, #128	; 0x80
 8002e62:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e66:	e69c      	b.n	8002ba2 <LCD_Line.constprop.1+0x72a>
 8002e68:	2040      	movs	r0, #64	; 0x40
 8002e6a:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e6e:	e690      	b.n	8002b92 <LCD_Line.constprop.1+0x71a>
 8002e70:	2020      	movs	r0, #32
 8002e72:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e76:	e684      	b.n	8002b82 <LCD_Line.constprop.1+0x70a>
 8002e78:	2010      	movs	r0, #16
 8002e7a:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e7e:	e678      	b.n	8002b72 <LCD_Line.constprop.1+0x6fa>
 8002e80:	2008      	movs	r0, #8
 8002e82:	f8ca 0010 	str.w	r0, [sl, #16]
 8002e86:	e66c      	b.n	8002b62 <LCD_Line.constprop.1+0x6ea>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e88:	f8ca 5010 	str.w	r5, [sl, #16]
 8002e8c:	e664      	b.n	8002b58 <LCD_Line.constprop.1+0x6e0>
    GPIOx->BSRR = GPIO_Pin;
 8002e8e:	f04f 0c20 	mov.w	ip, #32
 8002e92:	f8c9 c010 	str.w	ip, [r9, #16]
 8002e96:	e635      	b.n	8002b04 <LCD_Line.constprop.1+0x68c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e98:	f8ca 5010 	str.w	r5, [sl, #16]
 8002e9c:	e57c      	b.n	8002998 <LCD_Line.constprop.1+0x520>
    GPIOx->BSRR = GPIO_Pin;
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	f8c9 3010 	str.w	r3, [r9, #16]
 8002ea4:	e51a      	b.n	80028dc <LCD_Line.constprop.1+0x464>
 8002ea6:	2210      	movs	r2, #16
 8002ea8:	f8c9 2010 	str.w	r2, [r9, #16]
 8002eac:	e50e      	b.n	80028cc <LCD_Line.constprop.1+0x454>
 8002eae:	2180      	movs	r1, #128	; 0x80
 8002eb0:	f8ca 1010 	str.w	r1, [sl, #16]
 8002eb4:	e503      	b.n	80028be <LCD_Line.constprop.1+0x446>
 8002eb6:	2040      	movs	r0, #64	; 0x40
 8002eb8:	f8ca 0010 	str.w	r0, [sl, #16]
 8002ebc:	e4f8      	b.n	80028b0 <LCD_Line.constprop.1+0x438>
 8002ebe:	2020      	movs	r0, #32
 8002ec0:	f8ca 0010 	str.w	r0, [sl, #16]
 8002ec4:	e4ec      	b.n	80028a0 <LCD_Line.constprop.1+0x428>
 8002ec6:	2010      	movs	r0, #16
 8002ec8:	f8ca 0010 	str.w	r0, [sl, #16]
 8002ecc:	e4e0      	b.n	8002890 <LCD_Line.constprop.1+0x418>
 8002ece:	2008      	movs	r0, #8
 8002ed0:	f8ca 0010 	str.w	r0, [sl, #16]
 8002ed4:	e4cc      	b.n	8002870 <LCD_Line.constprop.1+0x3f8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ed6:	f8ca 5010 	str.w	r5, [sl, #16]
 8002eda:	e4c3      	b.n	8002864 <LCD_Line.constprop.1+0x3ec>
    GPIOx->BSRR = GPIO_Pin;
 8002edc:	2020      	movs	r0, #32
 8002ede:	f8c9 0010 	str.w	r0, [r9, #16]
 8002ee2:	e498      	b.n	8002816 <LCD_Line.constprop.1+0x39e>
 8002ee4:	2010      	movs	r0, #16
 8002ee6:	f8c9 0010 	str.w	r0, [r9, #16]
 8002eea:	e48c      	b.n	8002806 <LCD_Line.constprop.1+0x38e>
 8002eec:	2080      	movs	r0, #128	; 0x80
 8002eee:	f8ca 0010 	str.w	r0, [sl, #16]
 8002ef2:	e480      	b.n	80027f6 <LCD_Line.constprop.1+0x37e>
 8002ef4:	2040      	movs	r0, #64	; 0x40
 8002ef6:	f8ca 0010 	str.w	r0, [sl, #16]
 8002efa:	e474      	b.n	80027e6 <LCD_Line.constprop.1+0x36e>
 8002efc:	2020      	movs	r0, #32
 8002efe:	f8ca 0010 	str.w	r0, [sl, #16]
 8002f02:	e468      	b.n	80027d6 <LCD_Line.constprop.1+0x35e>
 8002f04:	2010      	movs	r0, #16
 8002f06:	f8ca 0010 	str.w	r0, [sl, #16]
 8002f0a:	e45c      	b.n	80027c6 <LCD_Line.constprop.1+0x34e>
 8002f0c:	2008      	movs	r0, #8
 8002f0e:	f8ca 0010 	str.w	r0, [sl, #16]
 8002f12:	e450      	b.n	80027b6 <LCD_Line.constprop.1+0x33e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f14:	f8ca 5010 	str.w	r5, [sl, #16]
 8002f18:	e448      	b.n	80027ac <LCD_Line.constprop.1+0x334>
    GPIOx->BSRR = GPIO_Pin;
 8002f1a:	f04f 0c20 	mov.w	ip, #32
 8002f1e:	f8c9 c010 	str.w	ip, [r9, #16]
 8002f22:	e419      	b.n	8002758 <LCD_Line.constprop.1+0x2e0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f24:	f8ca 5010 	str.w	r5, [sl, #16]
 8002f28:	f7ff bb60 	b.w	80025ec <LCD_Line.constprop.1+0x174>
		if (x1 == x2 && y1 == y2)
 8002f2c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8002f2e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8002f30:	4293      	cmp	r3, r2
 8002f32:	f47f af16 	bne.w	8002d62 <LCD_Line.constprop.1+0x8ea>
}
 8002f36:	b02b      	add	sp, #172	; 0xac
 8002f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002f3c <I2C_RequestMemoryWrite.constprop.0>:
  * @param  MemAddSize Size of internal memory address
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
 8002f3c:	b470      	push	{r4, r5, r6}
{
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f3e:	4c6c      	ldr	r4, [pc, #432]	; (80030f0 <I2C_RequestMemoryWrite.constprop.0+0x1b4>)
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
 8002f40:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f42:	6822      	ldr	r2, [r4, #0]
 8002f44:	6813      	ldr	r3, [r2, #0]
 8002f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	e003      	b.n	8002f56 <I2C_RequestMemoryWrite.constprop.0+0x1a>
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002f4e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f50:	1a5b      	subs	r3, r3, r1
 8002f52:	2b64      	cmp	r3, #100	; 0x64
 8002f54:	d834      	bhi.n	8002fc0 <I2C_RequestMemoryWrite.constprop.0+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f56:	6953      	ldr	r3, [r2, #20]
 8002f58:	07db      	lsls	r3, r3, #31
 8002f5a:	d5f8      	bpl.n	8002f4e <I2C_RequestMemoryWrite.constprop.0+0x12>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f5c:	23ae      	movs	r3, #174	; 0xae
 8002f5e:	6113      	str	r3, [r2, #16]
 8002f60:	e00a      	b.n	8002f78 <I2C_RequestMemoryWrite.constprop.0+0x3c>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f62:	6953      	ldr	r3, [r2, #20]
 8002f64:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002f68:	d157      	bne.n	800301a <I2C_RequestMemoryWrite.constprop.0+0xde>
 8002f6a:	6d65      	ldr	r5, [r4, #84]	; 0x54
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6c:	eba5 0c01 	sub.w	ip, r5, r1
 8002f70:	f1bc 0f64 	cmp.w	ip, #100	; 0x64
 8002f74:	f200 80a0 	bhi.w	80030b8 <I2C_RequestMemoryWrite.constprop.0+0x17c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f78:	6953      	ldr	r3, [r2, #20]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	f013 0302 	ands.w	r3, r3, #2
 8002f80:	d1ef      	bne.n	8002f62 <I2C_RequestMemoryWrite.constprop.0+0x26>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	6953      	ldr	r3, [r2, #20]
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	6993      	ldr	r3, [r2, #24]
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f8e:	6953      	ldr	r3, [r2, #20]
 8002f90:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8002f94:	d159      	bne.n	800304a <I2C_RequestMemoryWrite.constprop.0+0x10e>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f96:	6955      	ldr	r5, [r2, #20]
 8002f98:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
 8002f9c:	d127      	bne.n	8002fee <I2C_RequestMemoryWrite.constprop.0+0xb2>
 8002f9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa0:	1a5b      	subs	r3, r3, r1
 8002fa2:	2b64      	cmp	r3, #100	; 0x64
 8002fa4:	d9f3      	bls.n	8002f8e <I2C_RequestMemoryWrite.constprop.0+0x52>
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fa6:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fa8:	6325      	str	r5, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002faa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fae:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002fb4:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fb8:	f043 0320 	orr.w	r3, r3, #32
 8002fbc:	6423      	str	r3, [r4, #64]	; 0x40
 8002fbe:	e025      	b.n	800300c <I2C_RequestMemoryWrite.constprop.0+0xd0>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fc0:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fc2:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fc4:	6321      	str	r1, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fca:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fce:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002fd0:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fd4:	f043 0320 	orr.w	r3, r3, #32
 8002fd8:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fda:	6813      	ldr	r3, [r2, #0]
 8002fdc:	05da      	lsls	r2, r3, #23
 8002fde:	d54f      	bpl.n	8003080 <I2C_RequestMemoryWrite.constprop.0+0x144>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8002fe4:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fe6:	6423      	str	r3, [r4, #64]	; 0x40
}
 8002fe8:	b003      	add	sp, #12
 8002fea:	bc70      	pop	{r4, r5, r6}
 8002fec:	4770      	bx	lr
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fee:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff0:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8002ff4:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff6:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ff8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ffc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003000:	6c21      	ldr	r1, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003002:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003006:	f041 0104 	orr.w	r1, r1, #4
 800300a:	6421      	str	r1, [r4, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800300c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800300e:	2b04      	cmp	r3, #4
 8003010:	d067      	beq.n	80030e2 <I2C_RequestMemoryWrite.constprop.0+0x1a6>
    return HAL_ERROR;
 8003012:	2001      	movs	r0, #1
}
 8003014:	b003      	add	sp, #12
 8003016:	bc70      	pop	{r4, r5, r6}
 8003018:	4770      	bx	lr
      hi2c->PreviousState       = I2C_STATE_NONE;
 800301a:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800301c:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003020:	2520      	movs	r5, #32
    return HAL_ERROR;
 8003022:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003024:	6813      	ldr	r3, [r2, #0]
 8003026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800302a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800302c:	6156      	str	r6, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800302e:	6321      	str	r1, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003030:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003034:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003038:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800303a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800303e:	f043 0304 	orr.w	r3, r3, #4
 8003042:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003044:	b003      	add	sp, #12
 8003046:	bc70      	pop	{r4, r5, r6}
 8003048:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800304a:	0a03      	lsrs	r3, r0, #8
 800304c:	6113      	str	r3, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800304e:	6953      	ldr	r3, [r2, #20]
 8003050:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003054:	d13f      	bne.n	80030d6 <I2C_RequestMemoryWrite.constprop.0+0x19a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003056:	6955      	ldr	r5, [r2, #20]
 8003058:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
 800305c:	d114      	bne.n	8003088 <I2C_RequestMemoryWrite.constprop.0+0x14c>
 800305e:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003060:	1a5b      	subs	r3, r3, r1
 8003062:	2b64      	cmp	r3, #100	; 0x64
 8003064:	d9f3      	bls.n	800304e <I2C_RequestMemoryWrite.constprop.0+0x112>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003066:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003068:	6325      	str	r5, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800306a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800306e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003072:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003074:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003078:	f043 0320 	orr.w	r3, r3, #32
 800307c:	6423      	str	r3, [r4, #64]	; 0x40
 800307e:	e012      	b.n	80030a6 <I2C_RequestMemoryWrite.constprop.0+0x16a>
    return HAL_TIMEOUT;
 8003080:	2003      	movs	r0, #3
}
 8003082:	b003      	add	sp, #12
 8003084:	bc70      	pop	{r4, r5, r6}
 8003086:	4770      	bx	lr
    hi2c->State               = HAL_I2C_STATE_READY;
 8003088:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800308a:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 800308e:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003090:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003092:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003096:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800309a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800309c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030a0:	f041 0104 	orr.w	r1, r1, #4
 80030a4:	6421      	str	r1, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d1b2      	bne.n	8003012 <I2C_RequestMemoryWrite.constprop.0+0xd6>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ac:	6813      	ldr	r3, [r2, #0]
      return HAL_ERROR;
 80030ae:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e7c5      	b.n	8003044 <I2C_RequestMemoryWrite.constprop.0+0x108>
        hi2c->State               = HAL_I2C_STATE_READY;
 80030b8:	2220      	movs	r2, #32
    return HAL_ERROR;
 80030ba:	2001      	movs	r0, #1
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030bc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030be:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(hi2c);
 80030c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030cc:	4313      	orrs	r3, r2
 80030ce:	6423      	str	r3, [r4, #64]	; 0x40
}
 80030d0:	b003      	add	sp, #12
 80030d2:	bc70      	pop	{r4, r5, r6}
 80030d4:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030d6:	b2c3      	uxtb	r3, r0
  return HAL_OK;
 80030d8:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030da:	6113      	str	r3, [r2, #16]
}
 80030dc:	b003      	add	sp, #12
 80030de:	bc70      	pop	{r4, r5, r6}
 80030e0:	4770      	bx	lr
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e2:	6813      	ldr	r3, [r2, #0]
    return HAL_ERROR;
 80030e4:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	e7aa      	b.n	8003044 <I2C_RequestMemoryWrite.constprop.0+0x108>
 80030ee:	bf00      	nop
 80030f0:	20000200 	.word	0x20000200

080030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>:
  __IO uint32_t count = 0U;
 80030f4:	2200      	movs	r2, #0
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 80030f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030f8:	4ba1      	ldr	r3, [pc, #644]	; (8003380 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x28c>)
 80030fa:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 80030fc:	9200      	str	r2, [sp, #0]
 80030fe:	6d5d      	ldr	r5, [r3, #84]	; 0x54
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003100:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8003104:	2a20      	cmp	r2, #32
 8003106:	d001      	beq.n	800310c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x18>
}
 8003108:	b007      	add	sp, #28
 800310a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	e003      	b.n	8003118 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x24>
 8003110:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003112:	1b64      	subs	r4, r4, r5
 8003114:	2c19      	cmp	r4, #25
 8003116:	d86a      	bhi.n	80031ee <HAL_I2C_Mem_Read.constprop.0.isra.0+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003118:	6994      	ldr	r4, [r2, #24]
 800311a:	ea6f 0c04 	mvn.w	ip, r4
 800311e:	f01c 0c02 	ands.w	ip, ip, #2
 8003122:	d0f5      	beq.n	8003110 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1c>
    __HAL_LOCK(hi2c);
 8003124:	f893 403c 	ldrb.w	r4, [r3, #60]	; 0x3c
 8003128:	2c01      	cmp	r4, #1
 800312a:	d0ed      	beq.n	8003108 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
 800312c:	2401      	movs	r4, #1
 800312e:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003132:	6814      	ldr	r4, [r2, #0]
 8003134:	07e7      	lsls	r7, r4, #31
 8003136:	d555      	bpl.n	80031e4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xf0>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003138:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800313c:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003140:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 8003142:	2601      	movs	r6, #1
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003144:	6814      	ldr	r4, [r2, #0]
 8003146:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 800314a:	6014      	str	r4, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800314c:	4c8d      	ldr	r4, [pc, #564]	; (8003384 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x290>)
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800314e:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003152:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003156:	641f      	str	r7, [r3, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003158:	855e      	strh	r6, [r3, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800315a:	6259      	str	r1, [r3, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800315c:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800315e:	62dc      	str	r4, [r3, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003160:	6814      	ldr	r4, [r2, #0]
    hi2c->XferSize    = hi2c->XferCount;
 8003162:	b289      	uxth	r1, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003164:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    hi2c->XferSize    = hi2c->XferCount;
 8003168:	8519      	strh	r1, [r3, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800316a:	6014      	str	r4, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800316c:	6814      	ldr	r4, [r2, #0]
 800316e:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8003172:	6014      	str	r4, [r2, #0]
 8003174:	e003      	b.n	800317e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x8a>
 8003176:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003178:	1b64      	subs	r4, r4, r5
 800317a:	2c64      	cmp	r4, #100	; 0x64
 800317c:	d85e      	bhi.n	800323c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800317e:	6954      	ldr	r4, [r2, #20]
 8003180:	07e6      	lsls	r6, r4, #31
 8003182:	d5f8      	bpl.n	8003176 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003184:	24ae      	movs	r4, #174	; 0xae
 8003186:	6114      	str	r4, [r2, #16]
 8003188:	e008      	b.n	800319c <HAL_I2C_Mem_Read.constprop.0.isra.0+0xa8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800318a:	6954      	ldr	r4, [r2, #20]
 800318c:	f414 6480 	ands.w	r4, r4, #1024	; 0x400
 8003190:	d169      	bne.n	8003266 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x172>
 8003192:	6d5e      	ldr	r6, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003194:	1b76      	subs	r6, r6, r5
 8003196:	2e64      	cmp	r6, #100	; 0x64
 8003198:	f200 8089 	bhi.w	80032ae <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800319c:	6954      	ldr	r4, [r2, #20]
 800319e:	43e4      	mvns	r4, r4
 80031a0:	f014 0402 	ands.w	r4, r4, #2
 80031a4:	d1f1      	bne.n	800318a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x96>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a6:	9405      	str	r4, [sp, #20]
 80031a8:	6954      	ldr	r4, [r2, #20]
 80031aa:	9405      	str	r4, [sp, #20]
 80031ac:	6994      	ldr	r4, [r2, #24]
 80031ae:	9405      	str	r4, [sp, #20]
 80031b0:	9c05      	ldr	r4, [sp, #20]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031b2:	6954      	ldr	r4, [r2, #20]
 80031b4:	f014 0480 	ands.w	r4, r4, #128	; 0x80
 80031b8:	d16a      	bne.n	8003290 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x19c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031ba:	6956      	ldr	r6, [r2, #20]
 80031bc:	f416 6680 	ands.w	r6, r6, #1024	; 0x400
 80031c0:	d124      	bne.n	800320c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x118>
 80031c2:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c4:	1b64      	subs	r4, r4, r5
 80031c6:	2c64      	cmp	r4, #100	; 0x64
 80031c8:	d9f3      	bls.n	80031b2 <HAL_I2C_Mem_Read.constprop.0.isra.0+0xbe>
        hi2c->State             = HAL_I2C_STATE_READY;
 80031ca:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031cc:	631e      	str	r6, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031ce:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031d2:	f883 603e 	strb.w	r6, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80031d8:	f883 603c 	strb.w	r6, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031dc:	f041 0120 	orr.w	r1, r1, #32
 80031e0:	6419      	str	r1, [r3, #64]	; 0x40
 80031e2:	e022      	b.n	800322a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x136>
      __HAL_I2C_ENABLE(hi2c);
 80031e4:	6814      	ldr	r4, [r2, #0]
 80031e6:	f044 0401 	orr.w	r4, r4, #1
 80031ea:	6014      	str	r4, [r2, #0]
 80031ec:	e7a4      	b.n	8003138 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x44>
        hi2c->State             = HAL_I2C_STATE_READY;
 80031ee:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031f0:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031f8:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80031fe:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003202:	f042 0220 	orr.w	r2, r2, #32
 8003206:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003208:	b007      	add	sp, #28
 800320a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State               = HAL_I2C_STATE_READY;
 800320c:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800320e:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8003212:	6150      	str	r0, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003214:	631c      	str	r4, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003216:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800321a:	f883 403e 	strb.w	r4, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800321e:	6c19      	ldr	r1, [r3, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003220:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003224:	f041 0104 	orr.w	r1, r1, #4
 8003228:	6419      	str	r1, [r3, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	2b04      	cmp	r3, #4
 800322e:	f47f af6b 	bne.w	8003108 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003232:	6813      	ldr	r3, [r2, #0]
 8003234:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e765      	b.n	8003108 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800323c:	2000      	movs	r0, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800323e:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003240:	6318      	str	r0, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003242:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003246:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800324a:	6c19      	ldr	r1, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800324c:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003250:	f041 0120 	orr.w	r1, r1, #32
 8003254:	6419      	str	r1, [r3, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	05d5      	lsls	r5, r2, #23
 800325a:	f57f af55 	bpl.w	8003108 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800325e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003262:	641a      	str	r2, [r3, #64]	; 0x40
 8003264:	e750      	b.n	8003108 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003266:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003268:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 800326c:	2420      	movs	r4, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326e:	6810      	ldr	r0, [r2, #0]
 8003270:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8003274:	6010      	str	r0, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003276:	6155      	str	r5, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003278:	6319      	str	r1, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800327a:	f883 403d 	strb.w	r4, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327e:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003284:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003288:	f042 0204 	orr.w	r2, r2, #4
 800328c:	641a      	str	r2, [r3, #64]	; 0x40
 800328e:	e73b      	b.n	8003108 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003290:	0a04      	lsrs	r4, r0, #8
 8003292:	6114      	str	r4, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003294:	6954      	ldr	r4, [r2, #20]
 8003296:	f014 0480 	ands.w	r4, r4, #128	; 0x80
 800329a:	d115      	bne.n	80032c8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1d4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800329c:	6956      	ldr	r6, [r2, #20]
 800329e:	f416 6680 	ands.w	r6, r6, #1024	; 0x400
 80032a2:	d1b3      	bne.n	800320c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x118>
 80032a4:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a6:	1b64      	subs	r4, r4, r5
 80032a8:	2c64      	cmp	r4, #100	; 0x64
 80032aa:	d9f3      	bls.n	8003294 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1a0>
 80032ac:	e78d      	b.n	80031ca <HAL_I2C_Mem_Read.constprop.0.isra.0+0xd6>
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ae:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032b0:	631c      	str	r4, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b6:	f883 403e 	strb.w	r4, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80032bc:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c0:	f042 0220 	orr.w	r2, r2, #32
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
 80032c6:	e71f      	b.n	8003108 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032c8:	b2c0      	uxtb	r0, r0
 80032ca:	6110      	str	r0, [r2, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032cc:	6950      	ldr	r0, [r2, #20]
 80032ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032d2:	d124      	bne.n	800331e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x22a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032d4:	6954      	ldr	r4, [r2, #20]
 80032d6:	f414 6480 	ands.w	r4, r4, #1024	; 0x400
 80032da:	d110      	bne.n	80032fe <HAL_I2C_Mem_Read.constprop.0.isra.0+0x20a>
 80032dc:	6d58      	ldr	r0, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032de:	1b40      	subs	r0, r0, r5
 80032e0:	2864      	cmp	r0, #100	; 0x64
 80032e2:	d9f3      	bls.n	80032cc <HAL_I2C_Mem_Read.constprop.0.isra.0+0x1d8>
        hi2c->State             = HAL_I2C_STATE_READY;
 80032e4:	2120      	movs	r1, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032e6:	631c      	str	r4, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032e8:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032ec:	f883 403e 	strb.w	r4, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032f0:	6c19      	ldr	r1, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80032f2:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032f6:	f041 0120 	orr.w	r1, r1, #32
 80032fa:	6419      	str	r1, [r3, #64]	; 0x40
 80032fc:	e795      	b.n	800322a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x136>
    hi2c->State               = HAL_I2C_STATE_READY;
 80032fe:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003300:	f46f 6480 	mvn.w	r4, #1024	; 0x400
 8003304:	6154      	str	r4, [r2, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003306:	6318      	str	r0, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003308:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800330c:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003310:	6c19      	ldr	r1, [r3, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003312:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003316:	f041 0104 	orr.w	r1, r1, #4
 800331a:	6419      	str	r1, [r3, #64]	; 0x40
 800331c:	e785      	b.n	800322a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x136>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800331e:	6810      	ldr	r0, [r2, #0]
 8003320:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8003324:	6010      	str	r0, [r2, #0]
 8003326:	e003      	b.n	8003330 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x23c>
 8003328:	6d58      	ldr	r0, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332a:	1b40      	subs	r0, r0, r5
 800332c:	2864      	cmp	r0, #100	; 0x64
 800332e:	d885      	bhi.n	800323c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003330:	6950      	ldr	r0, [r2, #20]
 8003332:	07c4      	lsls	r4, r0, #31
 8003334:	d5f8      	bpl.n	8003328 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x234>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003336:	20af      	movs	r0, #175	; 0xaf
 8003338:	6110      	str	r0, [r2, #16]
 800333a:	e007      	b.n	800334c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x258>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800333c:	6950      	ldr	r0, [r2, #20]
 800333e:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8003342:	d190      	bne.n	8003266 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x172>
 8003344:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003346:	1b64      	subs	r4, r4, r5
 8003348:	2c64      	cmp	r4, #100	; 0x64
 800334a:	d81d      	bhi.n	8003388 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x294>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800334c:	6950      	ldr	r0, [r2, #20]
 800334e:	43c0      	mvns	r0, r0
 8003350:	f010 0002 	ands.w	r0, r0, #2
 8003354:	d1f2      	bne.n	800333c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x248>
    if (hi2c->XferSize == 0U)
 8003356:	bb29      	cbnz	r1, 80033a4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2b0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003358:	9104      	str	r1, [sp, #16]
 800335a:	6951      	ldr	r1, [r2, #20]
 800335c:	9104      	str	r1, [sp, #16]
 800335e:	6991      	ldr	r1, [r2, #24]
 8003360:	9104      	str	r1, [sp, #16]
 8003362:	9904      	ldr	r1, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003364:	6811      	ldr	r1, [r2, #0]
 8003366:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800336a:	6011      	str	r1, [r2, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800336c:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800336e:	2120      	movs	r1, #32
    __HAL_UNLOCK(hi2c);
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003374:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    return HAL_OK;
 800337c:	e6c4      	b.n	8003108 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x14>
 800337e:	bf00      	nop
 8003380:	20000200 	.word	0x20000200
 8003384:	ffff0000 	.word	0xffff0000
        hi2c->State             = HAL_I2C_STATE_READY;
 8003388:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800338a:	6318      	str	r0, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003390:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003394:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003396:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800339a:	f042 0220 	orr.w	r2, r2, #32
 800339e:	641a      	str	r2, [r3, #64]	; 0x40
}
 80033a0:	b007      	add	sp, #28
 80033a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (hi2c->XferSize == 1U)
 80033a4:	2901      	cmp	r1, #1
 80033a6:	f000 80d8 	beq.w	800355a <HAL_I2C_Mem_Read.constprop.0.isra.0+0x466>
    else if (hi2c->XferSize == 2U)
 80033aa:	2902      	cmp	r1, #2
 80033ac:	f000 80ec 	beq.w	8003588 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x494>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b0:	6814      	ldr	r4, [r2, #0]
 80033b2:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 80033b6:	6014      	str	r4, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b8:	9001      	str	r0, [sp, #4]
 80033ba:	6950      	ldr	r0, [r2, #20]
 80033bc:	9001      	str	r0, [sp, #4]
 80033be:	6990      	ldr	r0, [r2, #24]
 80033c0:	9001      	str	r0, [sp, #4]
 80033c2:	9801      	ldr	r0, [sp, #4]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033c4:	4e79      	ldr	r6, [pc, #484]	; (80035ac <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4b8>)
 80033c6:	4c7a      	ldr	r4, [pc, #488]	; (80035b0 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x4bc>)
      if (hi2c->XferSize <= 3U)
 80033c8:	2903      	cmp	r1, #3
 80033ca:	d83c      	bhi.n	8003446 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x352>
        if (hi2c->XferSize == 1U)
 80033cc:	2901      	cmp	r1, #1
 80033ce:	f000 809a 	beq.w	8003506 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x412>
        else if (hi2c->XferSize == 2U)
 80033d2:	2902      	cmp	r1, #2
 80033d4:	d005      	beq.n	80033e2 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2ee>
 80033d6:	e053      	b.n	8003480 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x38c>
 80033d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033da:	1b49      	subs	r1, r1, r5
 80033dc:	2964      	cmp	r1, #100	; 0x64
 80033de:	f200 8097 	bhi.w	8003510 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x41c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033e2:	6951      	ldr	r1, [r2, #20]
 80033e4:	0748      	lsls	r0, r1, #29
 80033e6:	d5f7      	bpl.n	80033d8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2e4>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033e8:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ea:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ee:	6811      	ldr	r1, [r2, #0]
 80033f0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80033f4:	6011      	str	r1, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f6:	6912      	ldr	r2, [r2, #16]
 80033f8:	7002      	strb	r2, [r0, #0]
          hi2c->pBuffPtr++;
 80033fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033fc:	3201      	adds	r2, #1
 80033fe:	625a      	str	r2, [r3, #36]	; 0x24
          hi2c->XferSize--;
 8003400:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8003402:	3a01      	subs	r2, #1
 8003404:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003406:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8003408:	3a01      	subs	r2, #1
 800340a:	b292      	uxth	r2, r2
 800340c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800340e:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	6911      	ldr	r1, [r2, #16]
 8003414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003416:	7011      	strb	r1, [r2, #0]
          hi2c->pBuffPtr++;
 8003418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
          hi2c->XferSize--;
 800341a:	8d19      	ldrh	r1, [r3, #40]	; 0x28
          hi2c->pBuffPtr++;
 800341c:	3201      	adds	r2, #1
 800341e:	625a      	str	r2, [r3, #36]	; 0x24
          hi2c->XferCount--;
 8003420:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
          hi2c->XferSize--;
 8003422:	3901      	subs	r1, #1
          hi2c->XferCount--;
 8003424:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 8003426:	b289      	uxth	r1, r1
          hi2c->XferCount--;
 8003428:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 800342a:	8519      	strh	r1, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800342c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800342e:	2900      	cmp	r1, #0
 8003430:	d09c      	beq.n	800336c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x278>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	e7c8      	b.n	80033c8 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2d4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003436:	6950      	ldr	r0, [r2, #20]
 8003438:	f010 0010 	ands.w	r0, r0, #16
 800343c:	d177      	bne.n	800352e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x43a>
 800343e:	6d59      	ldr	r1, [r3, #84]	; 0x54
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003440:	1b49      	subs	r1, r1, r5
 8003442:	2964      	cmp	r1, #100	; 0x64
 8003444:	d8a0      	bhi.n	8003388 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x294>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003446:	6951      	ldr	r1, [r2, #20]
 8003448:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 800344c:	d0f3      	beq.n	8003436 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x342>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800344e:	6911      	ldr	r1, [r2, #16]
 8003450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003452:	7011      	strb	r1, [r2, #0]
        hi2c->XferCount--;
 8003454:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8003456:	6a58      	ldr	r0, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003458:	3a01      	subs	r2, #1
 800345a:	b292      	uxth	r2, r2
 800345c:	855a      	strh	r2, [r3, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800345e:	681a      	ldr	r2, [r3, #0]
        hi2c->XferSize--;
 8003460:	8d19      	ldrh	r1, [r3, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003462:	1c47      	adds	r7, r0, #1
 8003464:	625f      	str	r7, [r3, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003466:	6957      	ldr	r7, [r2, #20]
        hi2c->XferSize--;
 8003468:	3901      	subs	r1, #1
 800346a:	b289      	uxth	r1, r1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800346c:	077f      	lsls	r7, r7, #29
        hi2c->XferSize--;
 800346e:	8519      	strh	r1, [r3, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003470:	d5dd      	bpl.n	800342e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x33a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003472:	6912      	ldr	r2, [r2, #16]
 8003474:	7042      	strb	r2, [r0, #1]
 8003476:	e7cf      	b.n	8003418 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x324>
 8003478:	6d59      	ldr	r1, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347a:	1b49      	subs	r1, r1, r5
 800347c:	2964      	cmp	r1, #100	; 0x64
 800347e:	d847      	bhi.n	8003510 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x41c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003480:	6951      	ldr	r1, [r2, #20]
 8003482:	0749      	lsls	r1, r1, #29
 8003484:	d5f8      	bpl.n	8003478 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x384>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003486:	6811      	ldr	r1, [r2, #0]
 8003488:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800348c:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800348e:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	6910      	ldr	r0, [r2, #16]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003494:	6832      	ldr	r2, [r6, #0]
 8003496:	08d2      	lsrs	r2, r2, #3
 8003498:	fba4 1202 	umull	r1, r2, r4, r2
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800349c:	6a59      	ldr	r1, [r3, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800349e:	0a12      	lsrs	r2, r2, #8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a0:	7008      	strb	r0, [r1, #0]
          hi2c->XferCount--;
 80034a2:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
          hi2c->XferCount--;
 80034a8:	3901      	subs	r1, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034aa:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
          hi2c->XferCount--;
 80034ae:	b289      	uxth	r1, r1
 80034b0:	8559      	strh	r1, [r3, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034b2:	9200      	str	r2, [sp, #0]
          hi2c->XferSize--;
 80034b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
          hi2c->pBuffPtr++;
 80034b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
          hi2c->XferSize--;
 80034b8:	3a01      	subs	r2, #1
 80034ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->pBuffPtr++;
 80034bc:	1c42      	adds	r2, r0, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80034be:	6819      	ldr	r1, [r3, #0]
          hi2c->pBuffPtr++;
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24
 80034c2:	e002      	b.n	80034ca <HAL_I2C_Mem_Read.constprop.0.isra.0+0x3d6>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80034c4:	694a      	ldr	r2, [r1, #20]
 80034c6:	0752      	lsls	r2, r2, #29
 80034c8:	d440      	bmi.n	800354c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x458>
            count--;
 80034ca:	9a00      	ldr	r2, [sp, #0]
 80034cc:	3a01      	subs	r2, #1
 80034ce:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 80034d0:	9a00      	ldr	r2, [sp, #0]
 80034d2:	2a00      	cmp	r2, #0
 80034d4:	d1f6      	bne.n	80034c4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x3d0>
              hi2c->State               = HAL_I2C_STATE_READY;
 80034d6:	2120      	movs	r1, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80034d8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80034da:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034e2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80034e4:	f041 0120 	orr.w	r1, r1, #32
 80034e8:	6419      	str	r1, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80034ea:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80034f0:	b007      	add	sp, #28
 80034f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034f4:	6950      	ldr	r0, [r2, #20]
 80034f6:	f010 0010 	ands.w	r0, r0, #16
 80034fa:	d118      	bne.n	800352e <HAL_I2C_Mem_Read.constprop.0.isra.0+0x43a>
 80034fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fe:	1b49      	subs	r1, r1, r5
 8003500:	2964      	cmp	r1, #100	; 0x64
 8003502:	f63f af41 	bhi.w	8003388 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x294>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003506:	6951      	ldr	r1, [r2, #20]
 8003508:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 800350c:	d0f2      	beq.n	80034f4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x400>
 800350e:	e780      	b.n	8003412 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x31e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003510:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003512:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003514:	6319      	str	r1, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800351a:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800351e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003520:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003524:	f042 0220 	orr.w	r2, r2, #32
 8003528:	641a      	str	r2, [r3, #64]	; 0x40
}
 800352a:	b007      	add	sp, #28
 800352c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800352e:	f06f 0410 	mvn.w	r4, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8003532:	2020      	movs	r0, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003534:	6154      	str	r4, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003536:	6319      	str	r1, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003538:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800353c:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003542:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003546:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003548:	b007      	add	sp, #28
 800354a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354c:	680a      	ldr	r2, [r1, #0]
 800354e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003552:	600a      	str	r2, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003554:	690a      	ldr	r2, [r1, #16]
 8003556:	7042      	strb	r2, [r0, #1]
 8003558:	e74f      	b.n	80033fa <HAL_I2C_Mem_Read.constprop.0.isra.0+0x306>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800355a:	6811      	ldr	r1, [r2, #0]
 800355c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003560:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003562:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	9003      	str	r0, [sp, #12]
 8003568:	6951      	ldr	r1, [r2, #20]
 800356a:	9103      	str	r1, [sp, #12]
 800356c:	6991      	ldr	r1, [r2, #24]
 800356e:	9103      	str	r1, [sp, #12]
 8003570:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003572:	6811      	ldr	r1, [r2, #0]
 8003574:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003578:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800357a:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 800357c:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 800357e:	2900      	cmp	r1, #0
 8003580:	f43f aef4 	beq.w	800336c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x278>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	e71d      	b.n	80033c4 <HAL_I2C_Mem_Read.constprop.0.isra.0+0x2d0>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003588:	6811      	ldr	r1, [r2, #0]
 800358a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800358e:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003590:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	9002      	str	r0, [sp, #8]
 8003596:	6951      	ldr	r1, [r2, #20]
 8003598:	9102      	str	r1, [sp, #8]
 800359a:	6991      	ldr	r1, [r2, #24]
 800359c:	9102      	str	r1, [sp, #8]
 800359e:	9902      	ldr	r1, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a0:	6811      	ldr	r1, [r2, #0]
 80035a2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80035a6:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035a8:	b662      	cpsie	i
}
 80035aa:	e7e7      	b.n	800357c <HAL_I2C_Mem_Read.constprop.0.isra.0+0x488>
 80035ac:	20000000 	.word	0x20000000
 80035b0:	14f8b589 	.word	0x14f8b589

080035b4 <AT24XX_Update>:
    } else
        return false;
}

uint8_t AT24XX_Read(uint16_t address) {
    uint16_t dt[1] = {0};
 80035b4:	2300      	movs	r3, #0
void AT24XX_Write(uint16_t address, uint8_t val) {
    uint8_t save[] = {val};
    AT24XX_Save(address, save, 1);
}

void AT24XX_Update(uint16_t address, uint8_t val) {
 80035b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035b8:	460d      	mov	r5, r1
 80035ba:	b083      	sub	sp, #12
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80035bc:	a901      	add	r1, sp, #4
    uint16_t dt[1] = {0};
 80035be:	f8ad 3004 	strh.w	r3, [sp, #4]
void AT24XX_Update(uint16_t address, uint8_t val) {
 80035c2:	4606      	mov	r6, r0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80035c4:	f7ff fd96 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 80035c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80035cc:	429d      	cmp	r5, r3
 80035ce:	d101      	bne.n	80035d4 <AT24XX_Update+0x20>
}
 80035d0:	b003      	add	sp, #12
 80035d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035d4:	4c61      	ldr	r4, [pc, #388]	; (800375c <AT24XX_Update+0x1a8>)
    uint8_t save[] = {val};
 80035d6:	f88d 5004 	strb.w	r5, [sp, #4]
 80035da:	6d65      	ldr	r5, [r4, #84]	; 0x54
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035dc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80035e0:	2b20      	cmp	r3, #32
 80035e2:	d1f5      	bne.n	80035d0 <AT24XX_Update+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e4:	6821      	ldr	r1, [r4, #0]
 80035e6:	e004      	b.n	80035f2 <AT24XX_Update+0x3e>
 80035e8:	6d62      	ldr	r2, [r4, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ea:	1b52      	subs	r2, r2, r5
 80035ec:	2a19      	cmp	r2, #25
 80035ee:	f200 80a7 	bhi.w	8003740 <AT24XX_Update+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f2:	698b      	ldr	r3, [r1, #24]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	f013 0302 	ands.w	r3, r3, #2
 80035fa:	d0f5      	beq.n	80035e8 <AT24XX_Update+0x34>
    __HAL_LOCK(hi2c);
 80035fc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003600:	2b01      	cmp	r3, #1
 8003602:	d0e5      	beq.n	80035d0 <AT24XX_Update+0x1c>
 8003604:	2301      	movs	r3, #1
 8003606:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800360a:	680b      	ldr	r3, [r1, #0]
 800360c:	07da      	lsls	r2, r3, #31
 800360e:	d403      	bmi.n	8003618 <AT24XX_Update+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8003610:	680b      	ldr	r3, [r1, #0]
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	600b      	str	r3, [r1, #0]
    hi2c->XferCount   = Size;
 8003618:	2201      	movs	r2, #1
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800361a:	4630      	mov	r0, r6
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800361c:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003620:	2740      	movs	r7, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003622:	2600      	movs	r6, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003624:	680b      	ldr	r3, [r1, #0]
 8003626:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800362a:	600b      	str	r3, [r1, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800362c:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    hi2c->pBuffPtr    = pData;
 8003630:	ab01      	add	r3, sp, #4
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003632:	f884 703e 	strb.w	r7, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003636:	6426      	str	r6, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003638:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800363a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800363c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800363e:	4b48      	ldr	r3, [pc, #288]	; (8003760 <AT24XX_Update+0x1ac>)
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003640:	4629      	mov	r1, r5
    hi2c->XferSize    = hi2c->XferCount;
 8003642:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003644:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003646:	f7ff fc79 	bl	8002f3c <I2C_RequestMemoryWrite.constprop.0>
 800364a:	2800      	cmp	r0, #0
 800364c:	d1c0      	bne.n	80035d0 <AT24XX_Update+0x1c>
    while (hi2c->XferSize > 0U)
 800364e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8003650:	2800      	cmp	r0, #0
 8003652:	f000 8081 	beq.w	8003758 <AT24XX_Update+0x1a4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003656:	6821      	ldr	r1, [r4, #0]
 8003658:	694b      	ldr	r3, [r1, #20]
 800365a:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800365e:	d114      	bne.n	800368a <AT24XX_Update+0xd6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003660:	694a      	ldr	r2, [r1, #20]
 8003662:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8003666:	d130      	bne.n	80036ca <AT24XX_Update+0x116>
 8003668:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366a:	1b5b      	subs	r3, r3, r5
 800366c:	2b64      	cmp	r3, #100	; 0x64
 800366e:	d9f3      	bls.n	8003658 <AT24XX_Update+0xa4>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003670:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003672:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003674:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003678:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800367c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800367e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003682:	f043 0320 	orr.w	r3, r3, #32
 8003686:	6423      	str	r3, [r4, #64]	; 0x40
 8003688:	e02e      	b.n	80036e8 <AT24XX_Update+0x134>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800368a:	6a66      	ldr	r6, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800368c:	1e42      	subs	r2, r0, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800368e:	4633      	mov	r3, r6
 8003690:	f813 7b01 	ldrb.w	r7, [r3], #1
      hi2c->XferSize--;
 8003694:	b292      	uxth	r2, r2
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003696:	610f      	str	r7, [r1, #16]
      hi2c->pBuffPtr++;
 8003698:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800369a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800369c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036a4:	694b      	ldr	r3, [r1, #20]
 80036a6:	075b      	lsls	r3, r3, #29
 80036a8:	d427      	bmi.n	80036fa <AT24XX_Update+0x146>
      hi2c->XferSize--;
 80036aa:	4610      	mov	r0, r2
    while (hi2c->XferSize > 0U)
 80036ac:	2800      	cmp	r0, #0
 80036ae:	d1d3      	bne.n	8003658 <AT24XX_Update+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036b0:	694b      	ldr	r3, [r1, #20]
 80036b2:	f013 0304 	ands.w	r3, r3, #4
 80036b6:	d130      	bne.n	800371a <AT24XX_Update+0x166>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036b8:	694a      	ldr	r2, [r1, #20]
 80036ba:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 80036be:	d104      	bne.n	80036ca <AT24XX_Update+0x116>
 80036c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c2:	1b5b      	subs	r3, r3, r5
 80036c4:	2b64      	cmp	r3, #100	; 0x64
 80036c6:	d9f3      	bls.n	80036b0 <AT24XX_Update+0xfc>
 80036c8:	e7d2      	b.n	8003670 <AT24XX_Update+0xbc>
    hi2c->State               = HAL_I2C_STATE_READY;
 80036ca:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036cc:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 80036d0:	6148      	str	r0, [r1, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80036d2:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036d4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80036de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036e2:	f042 0204 	orr.w	r2, r2, #4
 80036e6:	6422      	str	r2, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	f47f af70 	bne.w	80035d0 <AT24XX_Update+0x1c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f0:	680b      	ldr	r3, [r1, #0]
 80036f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036f6:	600b      	str	r3, [r1, #0]
 80036f8:	e76a      	b.n	80035d0 <AT24XX_Update+0x1c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036fa:	2a00      	cmp	r2, #0
 80036fc:	d0d8      	beq.n	80036b0 <AT24XX_Update+0xfc>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036fe:	7873      	ldrb	r3, [r6, #1]
        hi2c->XferSize--;
 8003700:	3802      	subs	r0, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003702:	610b      	str	r3, [r1, #16]
        hi2c->XferCount--;
 8003704:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003706:	b280      	uxth	r0, r0
        hi2c->XferCount--;
 8003708:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 800370a:	3602      	adds	r6, #2
        hi2c->XferCount--;
 800370c:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 800370e:	6266      	str	r6, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003710:	8520      	strh	r0, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003712:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003714:	2800      	cmp	r0, #0
 8003716:	d19f      	bne.n	8003658 <AT24XX_Update+0xa4>
 8003718:	e7ca      	b.n	80036b0 <AT24XX_Update+0xfc>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800371a:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800371c:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371e:	680b      	ldr	r3, [r1, #0]
 8003720:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003724:	600b      	str	r3, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003726:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800372a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800372e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 8003732:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003734:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (wait < HAL_MAX_DELAY)
  {
    wait += (uint32_t)(uwTickFreq);
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	2b05      	cmp	r3, #5
 800373a:	d9fb      	bls.n	8003734 <AT24XX_Update+0x180>
}
 800373c:	b003      	add	sp, #12
 800373e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 8003740:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003742:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003744:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003748:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(hi2c);
 800374c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003750:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003752:	4313      	orrs	r3, r2
 8003754:	6423      	str	r3, [r4, #64]	; 0x40
 8003756:	e73b      	b.n	80035d0 <AT24XX_Update+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003758:	6821      	ldr	r1, [r4, #0]
 800375a:	e7a9      	b.n	80036b0 <AT24XX_Update+0xfc>
 800375c:	20000200 	.word	0x20000200
 8003760:	ffff0000 	.word	0xffff0000

08003764 <HAL_I2C_Master_Receive.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8003764:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8003766:	2400      	movs	r4, #0
  return uwTick;
 8003768:	4b8b      	ldr	r3, [pc, #556]	; (8003998 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x234>)
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 800376a:	b087      	sub	sp, #28
  __IO uint32_t count = 0U;
 800376c:	9400      	str	r4, [sp, #0]
 800376e:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003770:	f893 403d 	ldrb.w	r4, [r3, #61]	; 0x3d
 8003774:	2c20      	cmp	r4, #32
 8003776:	d001      	beq.n	800377c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x18>
}
 8003778:	b007      	add	sp, #28
 800377a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800377c:	681c      	ldr	r4, [r3, #0]
 800377e:	e004      	b.n	800378a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x26>
 8003780:	6d5d      	ldr	r5, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003782:	1bad      	subs	r5, r5, r6
 8003784:	2d19      	cmp	r5, #25
 8003786:	f200 80b3 	bhi.w	80038f0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800378a:	69a5      	ldr	r5, [r4, #24]
 800378c:	ea6f 0c05 	mvn.w	ip, r5
 8003790:	f01c 0c02 	ands.w	ip, ip, #2
 8003794:	d0f4      	beq.n	8003780 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1c>
    __HAL_LOCK(hi2c);
 8003796:	f893 503c 	ldrb.w	r5, [r3, #60]	; 0x3c
 800379a:	2d01      	cmp	r5, #1
 800379c:	d0ec      	beq.n	8003778 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
 800379e:	2501      	movs	r5, #1
 80037a0:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037a4:	6825      	ldr	r5, [r4, #0]
 80037a6:	07ed      	lsls	r5, r5, #31
 80037a8:	d55d      	bpl.n	8003866 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x102>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80037aa:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037ae:	f04f 0c10 	mov.w	ip, #16
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037b2:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b4:	6825      	ldr	r5, [r4, #0]
 80037b6:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 80037ba:	6025      	str	r5, [r4, #0]
    hi2c->pBuffPtr    = pData;
 80037bc:	6259      	str	r1, [r3, #36]	; 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037be:	4977      	ldr	r1, [pc, #476]	; (800399c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x238>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80037c0:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037c4:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037c8:	641f      	str	r7, [r3, #64]	; 0x40
    hi2c->XferCount   = Size;
 80037ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037cc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ce:	62d9      	str	r1, [r3, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037d0:	6add      	ldr	r5, [r3, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d2:	6821      	ldr	r1, [r4, #0]
    hi2c->XferSize    = hi2c->XferCount;
 80037d4:	b292      	uxth	r2, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d6:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037da:	2d08      	cmp	r5, #8
    hi2c->XferSize    = hi2c->XferCount;
 80037dc:	851a      	strh	r2, [r3, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037de:	6021      	str	r1, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037e0:	d007      	beq.n	80037f2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8e>
 80037e2:	2d01      	cmp	r5, #1
 80037e4:	d005      	beq.n	80037f2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8e>
 80037e6:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 80037ea:	d002      	beq.n	80037f2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x8e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80037ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037ee:	2911      	cmp	r1, #17
 80037f0:	d109      	bne.n	8003806 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037f2:	6821      	ldr	r1, [r4, #0]
 80037f4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80037f8:	6021      	str	r1, [r4, #0]
 80037fa:	e004      	b.n	8003806 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xa2>
 80037fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fe:	1b89      	subs	r1, r1, r6
 8003800:	2964      	cmp	r1, #100	; 0x64
 8003802:	f200 8084 	bhi.w	800390e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1aa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003806:	6961      	ldr	r1, [r4, #20]
 8003808:	07cf      	lsls	r7, r1, #31
 800380a:	d5f7      	bpl.n	80037fc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x98>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800380c:	6919      	ldr	r1, [r3, #16]
 800380e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8003812:	d12d      	bne.n	8003870 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x10c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003814:	f040 0001 	orr.w	r0, r0, #1
 8003818:	b2c0      	uxtb	r0, r0
 800381a:	6120      	str	r0, [r4, #16]
 800381c:	e008      	b.n	8003830 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xcc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800381e:	6961      	ldr	r1, [r4, #20]
 8003820:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003824:	f040 8088 	bne.w	8003938 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d4>
 8003828:	6d58      	ldr	r0, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382a:	1b80      	subs	r0, r0, r6
 800382c:	2864      	cmp	r0, #100	; 0x64
 800382e:	d851      	bhi.n	80038d4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003830:	6961      	ldr	r1, [r4, #20]
 8003832:	43c9      	mvns	r1, r1
 8003834:	f011 0102 	ands.w	r1, r1, #2
 8003838:	d1f1      	bne.n	800381e <HAL_I2C_Master_Receive.constprop.0.isra.0+0xba>
    if (hi2c->XferSize == 0U)
 800383a:	2a00      	cmp	r2, #0
 800383c:	f040 8092 	bne.w	8003964 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x200>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003840:	9204      	str	r2, [sp, #16]
 8003842:	6962      	ldr	r2, [r4, #20]
 8003844:	9204      	str	r2, [sp, #16]
 8003846:	69a2      	ldr	r2, [r4, #24]
 8003848:	9204      	str	r2, [sp, #16]
 800384a:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384c:	6822      	ldr	r2, [r4, #0]
 800384e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003852:	6022      	str	r2, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003854:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003856:	2120      	movs	r1, #32
    __HAL_UNLOCK(hi2c);
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800385c:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    return HAL_OK;
 8003864:	e788      	b.n	8003778 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
      __HAL_I2C_ENABLE(hi2c);
 8003866:	6825      	ldr	r5, [r4, #0]
 8003868:	f045 0501 	orr.w	r5, r5, #1
 800386c:	6025      	str	r5, [r4, #0]
 800386e:	e79c      	b.n	80037aa <HAL_I2C_Master_Receive.constprop.0.isra.0+0x46>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003870:	21f0      	movs	r1, #240	; 0xf0
 8003872:	6121      	str	r1, [r4, #16]
 8003874:	e007      	b.n	8003886 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x122>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003876:	6961      	ldr	r1, [r4, #20]
 8003878:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 800387c:	d15c      	bne.n	8003938 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d4>
 800387e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003880:	1bad      	subs	r5, r5, r6
 8003882:	2d64      	cmp	r5, #100	; 0x64
 8003884:	d826      	bhi.n	80038d4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003886:	6961      	ldr	r1, [r4, #20]
 8003888:	070d      	lsls	r5, r1, #28
 800388a:	d5f4      	bpl.n	8003876 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x112>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800388c:	6120      	str	r0, [r4, #16]
 800388e:	e007      	b.n	80038a0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x13c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003890:	6961      	ldr	r1, [r4, #20]
 8003892:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003896:	d14f      	bne.n	8003938 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1d4>
 8003898:	6d58      	ldr	r0, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389a:	1b80      	subs	r0, r0, r6
 800389c:	2864      	cmp	r0, #100	; 0x64
 800389e:	d819      	bhi.n	80038d4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038a0:	6961      	ldr	r1, [r4, #20]
 80038a2:	43c9      	mvns	r1, r1
 80038a4:	f011 0102 	ands.w	r1, r1, #2
 80038a8:	d1f2      	bne.n	8003890 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x12c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038aa:	9105      	str	r1, [sp, #20]
 80038ac:	6961      	ldr	r1, [r4, #20]
 80038ae:	9105      	str	r1, [sp, #20]
 80038b0:	69a1      	ldr	r1, [r4, #24]
 80038b2:	9105      	str	r1, [sp, #20]
 80038b4:	9905      	ldr	r1, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038b6:	6821      	ldr	r1, [r4, #0]
 80038b8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80038bc:	6021      	str	r1, [r4, #0]
 80038be:	e003      	b.n	80038c8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x164>
 80038c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c2:	1b89      	subs	r1, r1, r6
 80038c4:	2964      	cmp	r1, #100	; 0x64
 80038c6:	d822      	bhi.n	800390e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x1aa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c8:	6961      	ldr	r1, [r4, #20]
 80038ca:	07c9      	lsls	r1, r1, #31
 80038cc:	d5f8      	bpl.n	80038c0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x15c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80038ce:	21f1      	movs	r1, #241	; 0xf1
 80038d0:	6121      	str	r1, [r4, #16]
 80038d2:	e7ad      	b.n	8003830 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xcc>
        hi2c->State             = HAL_I2C_STATE_READY;
 80038d4:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038d6:	6319      	str	r1, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038dc:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80038e2:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038e6:	f042 0220 	orr.w	r2, r2, #32
 80038ea:	641a      	str	r2, [r3, #64]	; 0x40
}
 80038ec:	b007      	add	sp, #28
 80038ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 80038f0:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038f2:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038fa:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003900:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003904:	f042 0220 	orr.w	r2, r2, #32
 8003908:	641a      	str	r2, [r3, #64]	; 0x40
}
 800390a:	b007      	add	sp, #28
 800390c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 800390e:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003910:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003912:	6319      	str	r1, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003918:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800391c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800391e:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003922:	f042 0220 	orr.w	r2, r2, #32
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003928:	6822      	ldr	r2, [r4, #0]
 800392a:	05d0      	lsls	r0, r2, #23
 800392c:	f57f af24 	bpl.w	8003778 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003934:	641a      	str	r2, [r3, #64]	; 0x40
 8003936:	e71f      	b.n	8003778 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003938:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800393a:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 800393e:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003940:	6822      	ldr	r2, [r4, #0]
 8003942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003946:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003948:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800394a:	6319      	str	r1, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800394c:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003950:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003956:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800395a:	f042 0204 	orr.w	r2, r2, #4
 800395e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003960:	b007      	add	sp, #28
 8003962:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (hi2c->XferSize == 1U)
 8003964:	2a01      	cmp	r2, #1
 8003966:	f000 80fc 	beq.w	8003b62 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3fe>
    else if (hi2c->XferSize == 2U)
 800396a:	2a02      	cmp	r2, #2
 800396c:	f000 80be 	beq.w	8003aec <HAL_I2C_Master_Receive.constprop.0.isra.0+0x388>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003970:	6820      	ldr	r0, [r4, #0]
 8003972:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8003976:	6020      	str	r0, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003978:	9101      	str	r1, [sp, #4]
 800397a:	6961      	ldr	r1, [r4, #20]
 800397c:	9101      	str	r1, [sp, #4]
 800397e:	69a1      	ldr	r1, [r4, #24]
 8003980:	9101      	str	r1, [sp, #4]
 8003982:	9901      	ldr	r1, [sp, #4]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003984:	4d06      	ldr	r5, [pc, #24]	; (80039a0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x23c>)
 8003986:	4807      	ldr	r0, [pc, #28]	; (80039a4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x240>)
      if (hi2c->XferSize <= 3U)
 8003988:	2a03      	cmp	r2, #3
 800398a:	d847      	bhi.n	8003a1c <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2b8>
        if (hi2c->XferSize == 1U)
 800398c:	2a01      	cmp	r2, #1
 800398e:	f000 80a5 	beq.w	8003adc <HAL_I2C_Master_Receive.constprop.0.isra.0+0x378>
        else if (hi2c->XferSize == 2U)
 8003992:	2a02      	cmp	r2, #2
 8003994:	d00d      	beq.n	80039b2 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x24e>
 8003996:	e05e      	b.n	8003a56 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2f2>
 8003998:	20000200 	.word	0x20000200
 800399c:	ffff0000 	.word	0xffff0000
 80039a0:	20000000 	.word	0x20000000
 80039a4:	14f8b589 	.word	0x14f8b589
 80039a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039aa:	1b92      	subs	r2, r2, r6
 80039ac:	2a64      	cmp	r2, #100	; 0x64
 80039ae:	f200 80b4 	bhi.w	8003b1a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b2:	6962      	ldr	r2, [r4, #20]
 80039b4:	0757      	lsls	r7, r2, #29
 80039b6:	d5f7      	bpl.n	80039a8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x244>
  __ASM volatile ("cpsid i" : : : "memory");
 80039b8:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ba:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039bc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039be:	6811      	ldr	r1, [r2, #0]
 80039c0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80039c4:	6011      	str	r1, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c6:	6912      	ldr	r2, [r2, #16]
 80039c8:	7022      	strb	r2, [r4, #0]
          hi2c->pBuffPtr++;
 80039ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039cc:	3201      	adds	r2, #1
 80039ce:	625a      	str	r2, [r3, #36]	; 0x24
          hi2c->XferSize--;
 80039d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80039d2:	3a01      	subs	r2, #1
 80039d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039d6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80039d8:	3a01      	subs	r2, #1
 80039da:	b292      	uxth	r2, r2
 80039dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039de:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	6911      	ldr	r1, [r2, #16]
 80039e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039e6:	7011      	strb	r1, [r2, #0]
          hi2c->pBuffPtr++;
 80039e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
          hi2c->XferCount--;
 80039ea:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80039ec:	3201      	adds	r2, #1
 80039ee:	625a      	str	r2, [r3, #36]	; 0x24
          hi2c->XferSize--;
 80039f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039f2:	3901      	subs	r1, #1
          hi2c->XferSize--;
 80039f4:	3a01      	subs	r2, #1
 80039f6:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 80039f8:	b289      	uxth	r1, r1
          hi2c->XferSize--;
 80039fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039fc:	8559      	strh	r1, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039fe:	2a00      	cmp	r2, #0
 8003a00:	f43f af28 	beq.w	8003854 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a04:	681c      	ldr	r4, [r3, #0]
 8003a06:	e7bf      	b.n	8003988 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x224>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a08:	6961      	ldr	r1, [r4, #20]
 8003a0a:	f011 0110 	ands.w	r1, r1, #16
 8003a0e:	f040 8093 	bne.w	8003b38 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3d4>
 8003a12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a14:	1b92      	subs	r2, r2, r6
 8003a16:	2a64      	cmp	r2, #100	; 0x64
 8003a18:	f63f af5c 	bhi.w	80038d4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a1c:	6962      	ldr	r2, [r4, #20]
 8003a1e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8003a22:	d0f1      	beq.n	8003a08 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2a4>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a24:	6921      	ldr	r1, [r4, #16]
 8003a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a28:	7011      	strb	r1, [r2, #0]
        hi2c->XferCount--;
 8003a2a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8003a2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a2e:	3a01      	subs	r2, #1
 8003a30:	b292      	uxth	r2, r2
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a32:	681c      	ldr	r4, [r3, #0]
        hi2c->XferCount--;
 8003a34:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8003a36:	1c4f      	adds	r7, r1, #1
        hi2c->XferSize--;
 8003a38:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003a3a:	625f      	str	r7, [r3, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a3c:	6967      	ldr	r7, [r4, #20]
        hi2c->XferSize--;
 8003a3e:	3a01      	subs	r2, #1
 8003a40:	b292      	uxth	r2, r2
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a42:	077f      	lsls	r7, r7, #29
        hi2c->XferSize--;
 8003a44:	851a      	strh	r2, [r3, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a46:	d5da      	bpl.n	80039fe <HAL_I2C_Master_Receive.constprop.0.isra.0+0x29a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a48:	6922      	ldr	r2, [r4, #16]
 8003a4a:	704a      	strb	r2, [r1, #1]
 8003a4c:	e7cc      	b.n	80039e8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x284>
 8003a4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a50:	1b92      	subs	r2, r2, r6
 8003a52:	2a64      	cmp	r2, #100	; 0x64
 8003a54:	d861      	bhi.n	8003b1a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a56:	6962      	ldr	r2, [r4, #20]
 8003a58:	0751      	lsls	r1, r2, #29
 8003a5a:	d5f8      	bpl.n	8003a4e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x2ea>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a5c:	6822      	ldr	r2, [r4, #0]
 8003a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a62:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a64:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	6914      	ldr	r4, [r2, #16]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a6a:	682a      	ldr	r2, [r5, #0]
 8003a6c:	08d2      	lsrs	r2, r2, #3
 8003a6e:	fba0 1202 	umull	r1, r2, r0, r2
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a72:	6a59      	ldr	r1, [r3, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a74:	0a12      	lsrs	r2, r2, #8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a76:	700c      	strb	r4, [r1, #0]
          hi2c->XferCount--;
 8003a78:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a7a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
          hi2c->XferCount--;
 8003a7e:	3901      	subs	r1, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a80:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
          hi2c->XferCount--;
 8003a84:	b289      	uxth	r1, r1
 8003a86:	8559      	strh	r1, [r3, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a88:	9200      	str	r2, [sp, #0]
          hi2c->XferSize--;
 8003a8a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
          hi2c->pBuffPtr++;
 8003a8c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
          hi2c->XferSize--;
 8003a8e:	3a01      	subs	r2, #1
 8003a90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->pBuffPtr++;
 8003a92:	1c62      	adds	r2, r4, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a94:	6819      	ldr	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24
 8003a98:	e002      	b.n	8003aa0 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x33c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a9a:	694a      	ldr	r2, [r1, #20]
 8003a9c:	0752      	lsls	r2, r2, #29
 8003a9e:	d459      	bmi.n	8003b54 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3f0>
            count--;
 8003aa0:	9a00      	ldr	r2, [sp, #0]
 8003aa2:	3a01      	subs	r2, #1
 8003aa4:	9200      	str	r2, [sp, #0]
            if (count == 0U)
 8003aa6:	9a00      	ldr	r2, [sp, #0]
 8003aa8:	2a00      	cmp	r2, #0
 8003aaa:	d1f6      	bne.n	8003a9a <HAL_I2C_Master_Receive.constprop.0.isra.0+0x336>
              hi2c->State               = HAL_I2C_STATE_READY;
 8003aac:	2120      	movs	r1, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003ab0:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003aba:	f041 0120 	orr.w	r1, r1, #32
 8003abe:	6419      	str	r1, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003ac0:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003ac6:	b007      	add	sp, #28
 8003ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003aca:	6961      	ldr	r1, [r4, #20]
 8003acc:	f011 0110 	ands.w	r1, r1, #16
 8003ad0:	d132      	bne.n	8003b38 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3d4>
 8003ad2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad4:	1b92      	subs	r2, r2, r6
 8003ad6:	2a64      	cmp	r2, #100	; 0x64
 8003ad8:	f63f aefc 	bhi.w	80038d4 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003adc:	6962      	ldr	r2, [r4, #20]
 8003ade:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8003ae2:	d0f2      	beq.n	8003aca <HAL_I2C_Master_Receive.constprop.0.isra.0+0x366>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae4:	6921      	ldr	r1, [r4, #16]
 8003ae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ae8:	7011      	strb	r1, [r2, #0]
 8003aea:	e77d      	b.n	80039e8 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x284>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aec:	6822      	ldr	r2, [r4, #0]
 8003aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003af2:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003af4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	9102      	str	r1, [sp, #8]
 8003afa:	6951      	ldr	r1, [r2, #20]
 8003afc:	9102      	str	r1, [sp, #8]
 8003afe:	6991      	ldr	r1, [r2, #24]
 8003b00:	9102      	str	r1, [sp, #8]
 8003b02:	9902      	ldr	r1, [sp, #8]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b04:	6811      	ldr	r1, [r2, #0]
 8003b06:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003b0a:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b0c:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 8003b0e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8003b10:	2a00      	cmp	r2, #0
 8003b12:	f43f ae9f 	beq.w	8003854 <HAL_I2C_Master_Receive.constprop.0.isra.0+0xf0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b16:	681c      	ldr	r4, [r3, #0]
 8003b18:	e734      	b.n	8003984 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x220>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b1a:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b1c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b1e:	6319      	str	r1, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b24:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003b2a:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b2e:	f042 0220 	orr.w	r2, r2, #32
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003b34:	b007      	add	sp, #28
 8003b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b38:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b3a:	f06f 0010 	mvn.w	r0, #16
 8003b3e:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b42:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b4a:	6c19      	ldr	r1, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b50:	6419      	str	r1, [r3, #64]	; 0x40
 8003b52:	e611      	b.n	8003778 <HAL_I2C_Master_Receive.constprop.0.isra.0+0x14>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b54:	680a      	ldr	r2, [r1, #0]
 8003b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5a:	600a      	str	r2, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5c:	690a      	ldr	r2, [r1, #16]
 8003b5e:	7062      	strb	r2, [r4, #1]
 8003b60:	e733      	b.n	80039ca <HAL_I2C_Master_Receive.constprop.0.isra.0+0x266>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b62:	6822      	ldr	r2, [r4, #0]
 8003b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b68:	6022      	str	r2, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b6a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	9103      	str	r1, [sp, #12]
 8003b70:	6951      	ldr	r1, [r2, #20]
 8003b72:	9103      	str	r1, [sp, #12]
 8003b74:	6991      	ldr	r1, [r2, #24]
 8003b76:	9103      	str	r1, [sp, #12]
 8003b78:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7a:	6811      	ldr	r1, [r2, #0]
 8003b7c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003b80:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b82:	b662      	cpsie	i
}
 8003b84:	e7c3      	b.n	8003b0e <HAL_I2C_Master_Receive.constprop.0.isra.0+0x3aa>
 8003b86:	bf00      	nop

08003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8003b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b8a:	4b97      	ldr	r3, [pc, #604]	; (8003de8 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x260>)
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b90:	f893 403d 	ldrb.w	r4, [r3, #61]	; 0x3d
 8003b94:	2c20      	cmp	r4, #32
 8003b96:	d001      	beq.n	8003b9c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x14>
}
 8003b98:	b003      	add	sp, #12
 8003b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b9c:	681c      	ldr	r4, [r3, #0]
 8003b9e:	e004      	b.n	8003baa <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22>
 8003ba0:	6d5d      	ldr	r5, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba2:	1bad      	subs	r5, r5, r6
 8003ba4:	2d19      	cmp	r5, #25
 8003ba6:	f200 80cc 	bhi.w	8003d42 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003baa:	69a5      	ldr	r5, [r4, #24]
 8003bac:	ea6f 0c05 	mvn.w	ip, r5
 8003bb0:	f01c 0c02 	ands.w	ip, ip, #2
 8003bb4:	d0f4      	beq.n	8003ba0 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18>
    __HAL_LOCK(hi2c);
 8003bb6:	f893 503c 	ldrb.w	r5, [r3, #60]	; 0x3c
 8003bba:	2d01      	cmp	r5, #1
 8003bbc:	d0ec      	beq.n	8003b98 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
 8003bbe:	2501      	movs	r5, #1
 8003bc0:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bc4:	6825      	ldr	r5, [r4, #0]
 8003bc6:	07ed      	lsls	r5, r5, #31
 8003bc8:	f140 80a7 	bpl.w	8003d1a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x192>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bcc:	f04f 0e21 	mov.w	lr, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bd0:	f04f 0c10 	mov.w	ip, #16
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bd4:	2700      	movs	r7, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bd6:	6825      	ldr	r5, [r4, #0]
 8003bd8:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8003bdc:	6025      	str	r5, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bde:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003be2:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003be6:	641f      	str	r7, [r3, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003be8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bea:	4a80      	ldr	r2, [pc, #512]	; (8003dec <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x264>)
    hi2c->XferSize    = hi2c->XferCount;
 8003bec:	8d5d      	ldrh	r5, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bee:	62da      	str	r2, [r3, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003bf2:	b2ad      	uxth	r5, r5
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bf4:	2a08      	cmp	r2, #8
    hi2c->pBuffPtr    = pData;
 8003bf6:	6259      	str	r1, [r3, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8003bf8:	851d      	strh	r5, [r3, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bfa:	d007      	beq.n	8003c0c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
 8003bfc:	2a01      	cmp	r2, #1
 8003bfe:	d005      	beq.n	8003c0c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
 8003c00:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003c04:	d002      	beq.n	8003c0c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x84>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c08:	2a12      	cmp	r2, #18
 8003c0a:	d109      	bne.n	8003c20 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x98>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c0c:	6822      	ldr	r2, [r4, #0]
 8003c0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c12:	6022      	str	r2, [r4, #0]
 8003c14:	e004      	b.n	8003c20 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x98>
 8003c16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c18:	1b92      	subs	r2, r2, r6
 8003c1a:	2a64      	cmp	r2, #100	; 0x64
 8003c1c:	f200 80a0 	bhi.w	8003d60 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1d8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c20:	6962      	ldr	r2, [r4, #20]
 8003c22:	07d2      	lsls	r2, r2, #31
 8003c24:	d5f7      	bpl.n	8003c16 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x8e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003c2c:	d17a      	bne.n	8003d24 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x19c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c2e:	6120      	str	r0, [r4, #16]
 8003c30:	e009      	b.n	8003c46 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xbe>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c32:	6962      	ldr	r2, [r4, #20]
 8003c34:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8003c38:	f040 80a7 	bne.w	8003d8a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x202>
 8003c3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3e:	1b89      	subs	r1, r1, r6
 8003c40:	2964      	cmp	r1, #100	; 0x64
 8003c42:	f200 80b8 	bhi.w	8003db6 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c46:	6962      	ldr	r2, [r4, #20]
 8003c48:	43d2      	mvns	r2, r2
 8003c4a:	f012 0202 	ands.w	r2, r2, #2
 8003c4e:	d1f0      	bne.n	8003c32 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xaa>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c50:	9201      	str	r2, [sp, #4]
 8003c52:	6962      	ldr	r2, [r4, #20]
 8003c54:	9201      	str	r2, [sp, #4]
 8003c56:	69a2      	ldr	r2, [r4, #24]
 8003c58:	9201      	str	r2, [sp, #4]
 8003c5a:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8003c5c:	2d00      	cmp	r5, #0
 8003c5e:	f000 80b6 	beq.w	8003dce <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c62:	6962      	ldr	r2, [r4, #20]
 8003c64:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8003c68:	d12c      	bne.n	8003cc4 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x13c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c6a:	6961      	ldr	r1, [r4, #20]
 8003c6c:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003c70:	d110      	bne.n	8003c94 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10c>
 8003c72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c74:	1b92      	subs	r2, r2, r6
 8003c76:	2a64      	cmp	r2, #100	; 0x64
 8003c78:	d9f3      	bls.n	8003c62 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xda>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c7a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c7c:	6319      	str	r1, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c82:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003c88:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c8c:	f042 0220 	orr.w	r2, r2, #32
 8003c90:	641a      	str	r2, [r3, #64]	; 0x40
 8003c92:	e00e      	b.n	8003cb2 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x12a>
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c94:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c96:	f46f 6080 	mvn.w	r0, #1024	; 0x400
 8003c9a:	6160      	str	r0, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c9e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ca6:	6c19      	ldr	r1, [r3, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cac:	f041 0104 	orr.w	r1, r1, #4
 8003cb0:	6419      	str	r1, [r3, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	f47f af6f 	bne.w	8003b98 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cc0:	6023      	str	r3, [r4, #0]
 8003cc2:	e769      	b.n	8003b98 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc4:	6a5f      	ldr	r7, [r3, #36]	; 0x24
      hi2c->XferSize--;
 8003cc6:	1e6a      	subs	r2, r5, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc8:	4638      	mov	r0, r7
 8003cca:	f810 1b01 	ldrb.w	r1, [r0], #1
      hi2c->XferSize--;
 8003cce:	b292      	uxth	r2, r2
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cd0:	6121      	str	r1, [r4, #16]
      hi2c->XferCount--;
 8003cd2:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003cd4:	6258      	str	r0, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003cd6:	3901      	subs	r1, #1
 8003cd8:	b289      	uxth	r1, r1
 8003cda:	8559      	strh	r1, [r3, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cdc:	6961      	ldr	r1, [r4, #20]
      hi2c->XferSize--;
 8003cde:	851a      	strh	r2, [r3, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ce0:	0749      	lsls	r1, r1, #29
 8003ce2:	d518      	bpl.n	8003d16 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18e>
 8003ce4:	b1ba      	cbz	r2, 8003d16 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x18e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ce6:	787a      	ldrb	r2, [r7, #1]
        hi2c->XferSize--;
 8003ce8:	3d02      	subs	r5, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cea:	6122      	str	r2, [r4, #16]
        hi2c->XferCount--;
 8003cec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003cee:	b2ad      	uxth	r5, r5
        hi2c->XferCount--;
 8003cf0:	3a01      	subs	r2, #1
        hi2c->pBuffPtr++;
 8003cf2:	3702      	adds	r7, #2
        hi2c->XferCount--;
 8003cf4:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8003cf6:	625f      	str	r7, [r3, #36]	; 0x24
        hi2c->XferSize--;
 8003cf8:	851d      	strh	r5, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cfc:	6962      	ldr	r2, [r4, #20]
 8003cfe:	f012 0204 	ands.w	r2, r2, #4
 8003d02:	d1ab      	bne.n	8003c5c <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xd4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d04:	6961      	ldr	r1, [r4, #20]
 8003d06:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8003d0a:	d1c3      	bne.n	8003c94 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10c>
 8003d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d0e:	1b92      	subs	r2, r2, r6
 8003d10:	2a64      	cmp	r2, #100	; 0x64
 8003d12:	d9f3      	bls.n	8003cfc <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x174>
 8003d14:	e7b1      	b.n	8003c7a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xf2>
 8003d16:	4615      	mov	r5, r2
 8003d18:	e7f0      	b.n	8003cfc <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x174>
      __HAL_I2C_ENABLE(hi2c);
 8003d1a:	6825      	ldr	r5, [r4, #0]
 8003d1c:	f045 0501 	orr.w	r5, r5, #1
 8003d20:	6025      	str	r5, [r4, #0]
 8003d22:	e753      	b.n	8003bcc <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x44>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d24:	22f0      	movs	r2, #240	; 0xf0
 8003d26:	6122      	str	r2, [r4, #16]
 8003d28:	e007      	b.n	8003d3a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1b2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d2a:	6962      	ldr	r2, [r4, #20]
 8003d2c:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8003d30:	d12b      	bne.n	8003d8a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x202>
 8003d32:	6d59      	ldr	r1, [r3, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d34:	1b89      	subs	r1, r1, r6
 8003d36:	2964      	cmp	r1, #100	; 0x64
 8003d38:	d83d      	bhi.n	8003db6 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x22e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d3a:	6962      	ldr	r2, [r4, #20]
 8003d3c:	0717      	lsls	r7, r2, #28
 8003d3e:	d5f4      	bpl.n	8003d2a <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x1a2>
 8003d40:	e775      	b.n	8003c2e <HAL_I2C_Master_Transmit.constprop.0.isra.0+0xa6>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d42:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d44:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d4c:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003d52:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d56:	f042 0220 	orr.w	r2, r2, #32
 8003d5a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003d5c:	b003      	add	sp, #12
 8003d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d60:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d62:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d64:	6319      	str	r1, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d6a:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003d70:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d74:	f042 0220 	orr.w	r2, r2, #32
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d7a:	6822      	ldr	r2, [r4, #0]
 8003d7c:	05d1      	lsls	r1, r2, #23
 8003d7e:	f57f af0b 	bpl.w	8003b98 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40
 8003d88:	e706      	b.n	8003b98 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d8a:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d8c:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d90:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d92:	6822      	ldr	r2, [r4, #0]
 8003d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d98:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d9a:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9c:	6319      	str	r1, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d9e:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da2:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003da8:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dac:	f042 0204 	orr.w	r2, r2, #4
 8003db0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003db2:	b003      	add	sp, #12
 8003db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->State               = HAL_I2C_STATE_READY;
 8003db6:	2120      	movs	r1, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003db8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dba:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        __HAL_UNLOCK(hi2c);
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	641a      	str	r2, [r3, #64]	; 0x40
 8003dcc:	e6e4      	b.n	8003b98 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dce:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003dd0:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd2:	6822      	ldr	r2, [r4, #0]
 8003dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd8:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003dda:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003dde:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de2:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
    return HAL_OK;
 8003de6:	e6d7      	b.n	8003b98 <HAL_I2C_Master_Transmit.constprop.0.isra.0+0x10>
 8003de8:	20000200 	.word	0x20000200
 8003dec:	ffff0000 	.word	0xffff0000

08003df0 <DS3231_Update>:
uint8_t bcdToDec(uint8_t val) {
    return ((val / 16 * 10) + (val % 16));
}

void DS3231_Update(void) {
    uint8_t cmd = 0;
 8003df0:	2300      	movs	r3, #0
void DS3231_Update(void) {
 8003df2:	b510      	push	{r4, lr}
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8003df4:	4c0e      	ldr	r4, [pc, #56]	; (8003e30 <DS3231_Update+0x40>)
void DS3231_Update(void) {
 8003df6:	b082      	sub	sp, #8
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8003df8:	f10d 0107 	add.w	r1, sp, #7
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	20d0      	movs	r0, #208	; 0xd0
    uint8_t cmd = 0;
 8003e00:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8003e04:	f7ff fec0 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8003e08:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8003e0c:	2213      	movs	r2, #19
 8003e0e:	20d0      	movs	r0, #208	; 0xd0
 8003e10:	f7ff fca8 	bl	8003764 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    rtcBufferSet[1] = rtcBuffer[0];
 8003e14:	e9d4 0217 	ldrd	r0, r2, [r4, #92]	; 0x5c
 8003e18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e1a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003e1c:	f8c4 0071 	str.w	r0, [r4, #113]	; 0x71
 8003e20:	f8c4 106d 	str.w	r1, [r4, #109]	; 0x6d
 8003e24:	f8c4 2075 	str.w	r2, [r4, #117]	; 0x75
 8003e28:	f8c4 3079 	str.w	r3, [r4, #121]	; 0x79
    rtcBufferSet[12] = rtcBuffer[11];
    rtcBufferSet[13] = rtcBuffer[12];
    rtcBufferSet[14] = rtcBuffer[13];
    rtcBufferSet[15] = rtcBuffer[14];
    rtcBufferSet[16] = rtcBuffer[15];
}
 8003e2c:	b002      	add	sp, #8
 8003e2e:	bd10      	pop	{r4, pc}
 8003e30:	20000200 	.word	0x20000200

08003e34 <LCD_Char.constprop.1.isra.0>:
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
}

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
 8003e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e38:	469b      	mov	fp, r3
	uint8_t  *bitmap = font -> bitmap;
	uint16_t bo = glyph -> bitmapOffset;
	uint8_t bits = 0, bit = 0;
	uint16_t set_pixels = 0;
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003e3a:	78d3      	ldrb	r3, [r2, #3]
static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
 8003e3c:	b085      	sub	sp, #20
 8003e3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
	uint16_t bo = glyph -> bitmapOffset;
 8003e42:	f8b2 8000 	ldrh.w	r8, [r2]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003e46:	b38b      	cbz	r3, 8003eac <LCD_Char.constprop.1.isra.0+0x78>
	uint8_t bits = 0, bit = 0;
 8003e48:	2600      	movs	r6, #0
 8003e4a:	4691      	mov	r9, r2
 8003e4c:	4637      	mov	r7, r6
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003e4e:	46b2      	mov	sl, r6
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8003e50:	f899 1002 	ldrb.w	r1, [r9, #2]
 8003e54:	b351      	cbz	r1, 8003eac <LCD_Char.constprop.1.isra.0+0x78>
 8003e56:	2400      	movs	r4, #0
 8003e58:	4622      	mov	r2, r4
		{
			if(bit == 0)
 8003e5a:	2e00      	cmp	r6, #0
 8003e5c:	d045      	beq.n	8003eea <LCD_Char.constprop.1.isra.0+0xb6>
			else if (set_pixels > 0)
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
				set_pixels = 0;
			}
			bit >>= 1;
 8003e5e:	4633      	mov	r3, r6
 8003e60:	0876      	lsrs	r6, r6, #1
			if(bits & bit)
 8003e62:	ea17 0503 	ands.w	r5, r7, r3
				set_pixels++;
 8003e66:	f102 0301 	add.w	r3, r2, #1
			if(bits & bit)
 8003e6a:	d022      	beq.n	8003eb2 <LCD_Char.constprop.1.isra.0+0x7e>
				set_pixels++;
 8003e6c:	b29a      	uxth	r2, r3
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8003e6e:	3401      	adds	r4, #1
 8003e70:	b2e4      	uxtb	r4, r4
 8003e72:	42a1      	cmp	r1, r4
 8003e74:	d8f1      	bhi.n	8003e5a <LCD_Char.constprop.1.isra.0+0x26>
		}
		if (set_pixels > 0)
 8003e76:	b18a      	cbz	r2, 8003e9c <LCD_Char.constprop.1.isra.0+0x68>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8003e78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	f999 0005 	ldrsb.w	r0, [r9, #5]
 8003e80:	9b02      	ldr	r3, [sp, #8]
 8003e82:	4420      	add	r0, r4
 8003e84:	f999 1006 	ldrsb.w	r1, [r9, #6]
 8003e88:	1a80      	subs	r0, r0, r2
 8003e8a:	4418      	add	r0, r3
 8003e8c:	9b03      	ldr	r3, [sp, #12]
 8003e8e:	4451      	add	r1, sl
 8003e90:	4419      	add	r1, r3
 8003e92:	b280      	uxth	r0, r0
 8003e94:	2301      	movs	r3, #1
 8003e96:	b289      	uxth	r1, r1
 8003e98:	f7fc fe16 	bl	8000ac8 <LCD_Rect_Fill>
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8003e9c:	f899 3003 	ldrb.w	r3, [r9, #3]
 8003ea0:	f10a 0a01 	add.w	sl, sl, #1
 8003ea4:	fa5f fa8a 	uxtb.w	sl, sl
 8003ea8:	459a      	cmp	sl, r3
 8003eaa:	d3d1      	bcc.n	8003e50 <LCD_Char.constprop.1.isra.0+0x1c>
			set_pixels = 0;
		}
	}
}
 8003eac:	b005      	add	sp, #20
 8003eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else if (set_pixels > 0)
 8003eb2:	2a00      	cmp	r2, #0
 8003eb4:	d0db      	beq.n	8003e6e <LCD_Char.constprop.1.isra.0+0x3a>
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8003eb6:	f999 1006 	ldrsb.w	r1, [r9, #6]
 8003eba:	f999 0005 	ldrsb.w	r0, [r9, #5]
 8003ebe:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003ec2:	4451      	add	r1, sl
 8003ec4:	4461      	add	r1, ip
 8003ec6:	4420      	add	r0, r4
 8003ec8:	f8dd c008 	ldr.w	ip, [sp, #8]
 8003ecc:	1a80      	subs	r0, r0, r2
 8003ece:	4460      	add	r0, ip
 8003ed0:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8003ed4:	b289      	uxth	r1, r1
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	f8cd c000 	str.w	ip, [sp]
 8003edc:	b280      	uxth	r0, r0
 8003ede:	f7fc fdf3 	bl	8000ac8 <LCD_Rect_Fill>
				set_pixels = 0;
 8003ee2:	462a      	mov	r2, r5
 8003ee4:	f899 1002 	ldrb.w	r1, [r9, #2]
 8003ee8:	e7c1      	b.n	8003e6e <LCD_Char.constprop.1.isra.0+0x3a>
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8003eea:	f108 0001 	add.w	r0, r8, #1
 8003eee:	f81b 7008 	ldrb.w	r7, [fp, r8]
				bit  = 0x80;
 8003ef2:	2380      	movs	r3, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8003ef4:	2640      	movs	r6, #64	; 0x40
 8003ef6:	fa1f f880 	uxth.w	r8, r0
 8003efa:	e7b2      	b.n	8003e62 <LCD_Char.constprop.1.isra.0+0x2e>

08003efc <HAL_UART_Transmit.part.0.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8003efc:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efe:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f00:	2521      	movs	r5, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f02:	4c32      	ldr	r4, [pc, #200]	; (8003fcc <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xd0>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f04:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f08:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f0c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f10:	f884 50bd 	strb.w	r5, [r4, #189]	; 0xbd
    huart->TxXferSize = Size;
 8003f14:	f8a4 10a4 	strh.w	r1, [r4, #164]	; 0xa4
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8003f18:	4605      	mov	r5, r0
 8003f1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 8003f1c:	f8a4 10a6 	strh.w	r1, [r4, #166]	; 0xa6
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f20:	d049      	beq.n	8003fb6 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xba>
      pdata16bits = NULL;
 8003f22:	469c      	mov	ip, r3
    __HAL_UNLOCK(huart);
 8003f24:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8003f26:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    __HAL_UNLOCK(huart);
 8003f2a:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
    while (huart->TxXferCount > 0U)
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d047      	beq.n	8003fc4 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xc8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f34:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003f38:	e003      	b.n	8003f42 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x46>
 8003f3a:	6d62      	ldr	r2, [r4, #84]	; 0x54
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f3c:	1a12      	subs	r2, r2, r0
 8003f3e:	2a64      	cmp	r2, #100	; 0x64
 8003f40:	d823      	bhi.n	8003f8a <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x8e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f42:	680b      	ldr	r3, [r1, #0]
 8003f44:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003f48:	d0f7      	beq.n	8003f3a <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x3e>
      if (pdata8bits == NULL)
 8003f4a:	b37d      	cbz	r5, 8003fac <HAL_UART_Transmit.part.0.constprop.0.isra.0+0xb0>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f4c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003f50:	604b      	str	r3, [r1, #4]
      huart->TxXferCount--;
 8003f52:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
    while (huart->TxXferCount > 0U)
 8003f5e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1ec      	bne.n	8003f42 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x46>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f68:	680b      	ldr	r3, [r1, #0]
 8003f6a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003f6e:	d107      	bne.n	8003f80 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x84>
 8003f70:	6d62      	ldr	r2, [r4, #84]	; 0x54
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f72:	1a12      	subs	r2, r2, r0
 8003f74:	2a64      	cmp	r2, #100	; 0x64
 8003f76:	d808      	bhi.n	8003f8a <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x8e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f78:	680b      	ldr	r3, [r1, #0]
 8003f7a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003f7e:	d0f7      	beq.n	8003f70 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x74>
    huart->gState = HAL_UART_STATE_READY;
 8003f80:	2320      	movs	r3, #32
 8003f82:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
}
 8003f86:	bc30      	pop	{r4, r5}
 8003f88:	4770      	bx	lr
        huart->gState  = HAL_UART_STATE_READY;
 8003f8a:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f8c:	68ca      	ldr	r2, [r1, #12]
 8003f8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f92:	60ca      	str	r2, [r1, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f94:	694a      	ldr	r2, [r1, #20]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	614a      	str	r2, [r1, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003f9c:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
        __HAL_UNLOCK(huart);
 8003fa0:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
        huart->RxState = HAL_UART_STATE_READY;
 8003fa4:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
}
 8003fa8:	bc30      	pop	{r4, r5}
 8003faa:	4770      	bx	lr
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fac:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8003fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb4:	e7cc      	b.n	8003f50 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x54>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003fba:	2a00      	cmp	r2, #0
 8003fbc:	d1b1      	bne.n	8003f22 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x26>
      pdata16bits = (uint16_t *) pData;
 8003fbe:	46ac      	mov	ip, r5
      pdata8bits  = NULL;
 8003fc0:	4615      	mov	r5, r2
 8003fc2:	e7af      	b.n	8003f24 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x28>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003fc8:	e7d6      	b.n	8003f78 <HAL_UART_Transmit.part.0.constprop.0.isra.0+0x7c>
 8003fca:	bf00      	nop
 8003fcc:	20000200 	.word	0x20000200

08003fd0 <HAL_InitTick.isra.0>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 8003fd0:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fd2:	4d10      	ldr	r5, [pc, #64]	; (8004014 <HAL_InitTick.isra.0+0x44>)
 8003fd4:	4a10      	ldr	r2, [pc, #64]	; (8004018 <HAL_InitTick.isra.0+0x48>)
 8003fd6:	682b      	ldr	r3, [r5, #0]
 8003fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fdc:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fe4:	d20e      	bcs.n	8004004 <HAL_InitTick.isra.0+0x34>
 8003fe6:	4604      	mov	r4, r0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fe8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fec:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ff0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ff2:	2107      	movs	r1, #7
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff4:	4e09      	ldr	r6, [pc, #36]	; (800401c <HAL_InitTick.isra.0+0x4c>)
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ff6:	2c0f      	cmp	r4, #15
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ff8:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ffa:	f886 c023 	strb.w	ip, [r6, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ffe:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004000:	6111      	str	r1, [r2, #16]
 8004002:	d900      	bls.n	8004006 <HAL_InitTick.isra.0+0x36>
}
 8004004:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004006:	4621      	mov	r1, r4
 8004008:	f04f 30ff 	mov.w	r0, #4294967295
 800400c:	f7fd fba2 	bl	8001754 <HAL_NVIC_SetPriority.constprop.0>
    uwTickPrio = TickPriority;
 8004010:	606c      	str	r4, [r5, #4]
}
 8004012:	bd70      	pop	{r4, r5, r6, pc}
 8004014:	20000000 	.word	0x20000000
 8004018:	10624dd3 	.word	0x10624dd3
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <LCD_Font.constprop.0>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8004020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	int16_t cursor_x = x;
 8004024:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8004028:	b085      	sub	sp, #20
	int16_t cursor_y = y;
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800402a:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 800402c:	460d      	mov	r5, r1
 800402e:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004030:	f002 f91c 	bl	800626c <strlen>
 8004034:	b3a8      	cbz	r0, 80040a2 <LCD_Font.constprop.0+0x82>
 8004036:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 8004038:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 800403a:	2682      	movs	r6, #130	; 0x82
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800403c:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
		}
		else if(c >= font.first && c <= font.last && c != '\r')
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800403e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80040a8 <LCD_Font.constprop.0+0x88>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8004042:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <LCD_Font.constprop.0+0x8c>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8004044:	f10d 0b08 	add.w	fp, sp, #8
 8004048:	e01c      	b.n	8004084 <LCD_Font.constprop.0+0x64>
		else if(c >= font.first && c <= font.last && c != '\r')
 800404a:	f1bc 0f5e 	cmp.w	ip, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800404e:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 8004052:	d812      	bhi.n	800407a <LCD_Font.constprop.0+0x5a>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8004054:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8004058:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800405c:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800405e:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8004062:	4638      	mov	r0, r7
 8004064:	4631      	mov	r1, r6
 8004066:	f7ff fee5 	bl	8003e34 <LCD_Char.constprop.1.isra.0>
			cursor_x += glyph.xAdvance * size;
 800406a:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800406e:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 8004070:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004072:	f002 f8fb 	bl	800626c <strlen>
 8004076:	4b0d      	ldr	r3, [pc, #52]	; (80040ac <LCD_Font.constprop.0+0x8c>)
			cursor_x += glyph.xAdvance * size;
 8004078:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800407a:	3401      	adds	r4, #1
 800407c:	b2a4      	uxth	r4, r4
 800407e:	4284      	cmp	r4, r0
 8004080:	4622      	mov	r2, r4
 8004082:	d20e      	bcs.n	80040a2 <LCD_Font.constprop.0+0x82>
		char c = text[text_pos];
 8004084:	5ca9      	ldrb	r1, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 8004086:	f1a1 0220 	sub.w	r2, r1, #32
		if(c == '\n')
 800408a:	290a      	cmp	r1, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 800408c:	fa5f fc82 	uxtb.w	ip, r2
		if(c == '\n')
 8004090:	d1db      	bne.n	800404a <LCD_Font.constprop.0+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004092:	3401      	adds	r4, #1
 8004094:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 8004096:	362b      	adds	r6, #43	; 0x2b
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004098:	4284      	cmp	r4, r0
			cursor_x = x;
 800409a:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800409c:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 800409e:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80040a0:	d3f0      	bcc.n	8004084 <LCD_Font.constprop.0+0x64>
		}
	}
}
 80040a2:	b005      	add	sp, #20
 80040a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a8:	0800d648 	.word	0x0800d648
 80040ac:	0801cba0 	.word	0x0801cba0

080040b0 <LCD_Font.constprop.1>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80040b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 80040b4:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80040b8:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80040ba:	4608      	mov	r0, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 80040bc:	460d      	mov	r5, r1
 80040be:	4692      	mov	sl, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80040c0:	f002 f8d4 	bl	800626c <strlen>
 80040c4:	b3b8      	cbz	r0, 8004136 <LCD_Font.constprop.1+0x86>
 80040c6:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 80040c8:	4647      	mov	r7, r8
	int16_t cursor_y = y;
 80040ca:	2664      	movs	r6, #100	; 0x64
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80040cc:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80040ce:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800413c <LCD_Font.constprop.1+0x8c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80040d2:	4b1b      	ldr	r3, [pc, #108]	; (8004140 <LCD_Font.constprop.1+0x90>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80040d4:	f10d 0b08 	add.w	fp, sp, #8
 80040d8:	e01d      	b.n	8004116 <LCD_Font.constprop.1+0x66>
 80040da:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 80040de:	295e      	cmp	r1, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80040e0:	f502 723c 	add.w	r2, r2, #752	; 0x2f0
		else if(c >= font.first && c <= font.last && c != '\r')
 80040e4:	d812      	bhi.n	800410c <LCD_Font.constprop.1+0x5c>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80040e6:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80040ea:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80040ee:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80040f0:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80040f4:	4638      	mov	r0, r7
 80040f6:	4631      	mov	r1, r6
 80040f8:	f7ff fe9c 	bl	8003e34 <LCD_Char.constprop.1.isra.0>
			cursor_x += glyph.xAdvance * size;
 80040fc:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004100:	4628      	mov	r0, r5
			cursor_x += glyph.xAdvance * size;
 8004102:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004104:	f002 f8b2 	bl	800626c <strlen>
 8004108:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <LCD_Font.constprop.1+0x90>)
			cursor_x += glyph.xAdvance * size;
 800410a:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800410c:	3401      	adds	r4, #1
 800410e:	b2a4      	uxth	r4, r4
 8004110:	4284      	cmp	r4, r0
 8004112:	4622      	mov	r2, r4
 8004114:	d20f      	bcs.n	8004136 <LCD_Font.constprop.1+0x86>
		char c = text[text_pos];
 8004116:	f815 c002 	ldrb.w	ip, [r5, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 800411a:	f1ac 0220 	sub.w	r2, ip, #32
		if(c == '\n')
 800411e:	f1bc 0f0a 	cmp.w	ip, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 8004122:	b2d1      	uxtb	r1, r2
		if(c == '\n')
 8004124:	d1d9      	bne.n	80040da <LCD_Font.constprop.1+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004126:	3401      	adds	r4, #1
 8004128:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 800412a:	3696      	adds	r6, #150	; 0x96
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800412c:	4284      	cmp	r4, r0
			cursor_x = x;
 800412e:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004130:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 8004132:	b236      	sxth	r6, r6
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004134:	d3ef      	bcc.n	8004116 <LCD_Font.constprop.1+0x66>
}
 8004136:	b005      	add	sp, #20
 8004138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800413c:	0800d648 	.word	0x0800d648
 8004140:	0800dc8c 	.word	0x0800dc8c

08004144 <LCD_Font.constprop.2>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8004144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_y = y;
 8004148:	b20b      	sxth	r3, r1
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 800414a:	b09f      	sub	sp, #124	; 0x7c
	int16_t cursor_x = x;
 800414c:	b204      	sxth	r4, r0
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800414e:	4610      	mov	r0, r2
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8004150:	9216      	str	r2, [sp, #88]	; 0x58
	int16_t cursor_x = x;
 8004152:	9418      	str	r4, [sp, #96]	; 0x60
	int16_t cursor_y = y;
 8004154:	9308      	str	r3, [sp, #32]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004156:	f002 f889 	bl	800626c <strlen>
 800415a:	2800      	cmp	r0, #0
 800415c:	d068      	beq.n	8004230 <LCD_Font.constprop.2+0xec>
 800415e:	2300      	movs	r3, #0
 8004160:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8004238 <LCD_Font.constprop.2+0xf4>
 8004164:	4f35      	ldr	r7, [pc, #212]	; (800423c <LCD_Font.constprop.2+0xf8>)
 8004166:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8004240 <LCD_Font.constprop.2+0xfc>
 800416a:	9307      	str	r3, [sp, #28]
		char c = text[text_pos];
 800416c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800416e:	5cd3      	ldrb	r3, [r2, r3]
		if(c == '\n')
 8004170:	2b0a      	cmp	r3, #10
 8004172:	d052      	beq.n	800421a <LCD_Font.constprop.2+0xd6>
		else if(c >= font.first && c <= font.last && c != '\r')
 8004174:	3b20      	subs	r3, #32
 8004176:	b2da      	uxtb	r2, r3
 8004178:	2a5e      	cmp	r2, #94	; 0x5e
 800417a:	d853      	bhi.n	8004224 <LCD_Font.constprop.2+0xe0>
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800417c:	4a31      	ldr	r2, [pc, #196]	; (8004244 <LCD_Font.constprop.2+0x100>)
 800417e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004182:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004186:	ab1e      	add	r3, sp, #120	; 0x78
 8004188:	e903 0003 	stmdb	r3, {r0, r1}
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 800418c:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
	uint16_t bo = glyph -> bitmapOffset;
 8004190:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8004194:	9317      	str	r3, [sp, #92]	; 0x5c
	uint16_t bo = glyph -> bitmapOffset;
 8004196:	9205      	str	r2, [sp, #20]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8004198:	2b00      	cmp	r3, #0
 800419a:	f001 8151 	beq.w	8005440 <LCD_Font.constprop.2+0x12fc>
			cursor_x += glyph.xAdvance * size;
 800419e:	b2a3      	uxth	r3, r4
 80041a0:	9315      	str	r3, [sp, #84]	; 0x54
 80041a2:	2300      	movs	r3, #0
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80041a4:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
	uint8_t bits = 0, bit = 0;
 80041a8:	e9cd 3301 	strd	r3, r3, [sp, #4]
			cursor_x += glyph.xAdvance * size;
 80041ac:	9306      	str	r3, [sp, #24]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80041ae:	9204      	str	r2, [sp, #16]
 80041b0:	9b04      	ldr	r3, [sp, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 846d 	beq.w	8004a92 <LCD_Font.constprop.2+0x94e>
 80041b8:	2300      	movs	r3, #0
 80041ba:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80041be:	469e      	mov	lr, r3
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	e011      	b.n	80041e8 <LCD_Font.constprop.2+0xa4>
			bit >>= 1;
 80041c4:	0852      	lsrs	r2, r2, #1
 80041c6:	9201      	str	r2, [sp, #4]
			if(bits & bit)
 80041c8:	9a02      	ldr	r2, [sp, #8]
 80041ca:	421a      	tst	r2, r3
 80041cc:	d01d      	beq.n	800420a <LCD_Font.constprop.2+0xc6>
				set_pixels++;
 80041ce:	f10e 0201 	add.w	r2, lr, #1
 80041d2:	4673      	mov	r3, lr
 80041d4:	fa1f fe82 	uxth.w	lr, r2
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80041d8:	9a00      	ldr	r2, [sp, #0]
 80041da:	9904      	ldr	r1, [sp, #16]
 80041dc:	3201      	adds	r2, #1
 80041de:	9200      	str	r2, [sp, #0]
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	428a      	cmp	r2, r1
 80041e4:	f080 8451 	bcs.w	8004a8a <LCD_Font.constprop.2+0x946>
			if(bit == 0)
 80041e8:	9a01      	ldr	r2, [sp, #4]
 80041ea:	4613      	mov	r3, r2
 80041ec:	2a00      	cmp	r2, #0
 80041ee:	d1e9      	bne.n	80041c4 <LCD_Font.constprop.2+0x80>
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 80041f0:	2340      	movs	r3, #64	; 0x40
 80041f2:	9301      	str	r3, [sp, #4]
				bit  = 0x80;
 80041f4:	2380      	movs	r3, #128	; 0x80
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 80041f6:	9905      	ldr	r1, [sp, #20]
 80041f8:	4813      	ldr	r0, [pc, #76]	; (8004248 <LCD_Font.constprop.2+0x104>)
 80041fa:	1c4a      	adds	r2, r1, #1
 80041fc:	5c09      	ldrb	r1, [r1, r0]
 80041fe:	b292      	uxth	r2, r2
 8004200:	9102      	str	r1, [sp, #8]
 8004202:	9205      	str	r2, [sp, #20]
			if(bits & bit)
 8004204:	9a02      	ldr	r2, [sp, #8]
 8004206:	421a      	tst	r2, r3
 8004208:	d1e1      	bne.n	80041ce <LCD_Font.constprop.2+0x8a>
			else if (set_pixels > 0)
 800420a:	f1be 0f00 	cmp.w	lr, #0
 800420e:	d11d      	bne.n	800424c <LCD_Font.constprop.2+0x108>
				set_pixels++;
 8004210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004214:	f04f 0e00 	mov.w	lr, #0
 8004218:	e7de      	b.n	80041d8 <LCD_Font.constprop.2+0x94>
			cursor_y += font.yAdvance * size;
 800421a:	9b08      	ldr	r3, [sp, #32]
			cursor_x = x;
 800421c:	9c18      	ldr	r4, [sp, #96]	; 0x60
			cursor_y += font.yAdvance * size;
 800421e:	332b      	adds	r3, #43	; 0x2b
 8004220:	b21b      	sxth	r3, r3
 8004222:	9308      	str	r3, [sp, #32]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004224:	9b07      	ldr	r3, [sp, #28]
 8004226:	3301      	adds	r3, #1
 8004228:	b29b      	uxth	r3, r3
 800422a:	4283      	cmp	r3, r0
 800422c:	9307      	str	r3, [sp, #28]
 800422e:	d39d      	bcc.n	800416c <LCD_Font.constprop.2+0x28>
}
 8004230:	b01f      	add	sp, #124	; 0x7c
 8004232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004236:	bf00      	nop
 8004238:	40010c00 	.word	0x40010c00
 800423c:	40010800 	.word	0x40010800
 8004240:	40011000 	.word	0x40011000
 8004244:	0800d648 	.word	0x0800d648
 8004248:	0801cba0 	.word	0x0801cba0
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 800424c:	9c00      	ldr	r4, [sp, #0]
 800424e:	f99d 3075 	ldrsb.w	r3, [sp, #117]	; 0x75
 8004252:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004256:	4423      	add	r3, r4
 8004258:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800425a:	eba3 030e 	sub.w	r3, r3, lr
 800425e:	4423      	add	r3, r4
 8004260:	fa1f fa83 	uxth.w	sl, r3
 8004264:	9c06      	ldr	r4, [sp, #24]
 8004266:	f99d 3076 	ldrsb.w	r3, [sp, #118]	; 0x76
 800426a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800426e:	4423      	add	r3, r4
 8004270:	9c08      	ldr	r4, [sp, #32]
 8004272:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8004276:	4423      	add	r3, r4
 8004278:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800427c:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
 8004280:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8004284:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004288:	f04f 0910 	mov.w	r9, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800428c:	f8cb c010 	str.w	ip, [fp, #16]
 8004290:	613e      	str	r6, [r7, #16]
 8004292:	613a      	str	r2, [r7, #16]
 8004294:	f8c8 0010 	str.w	r0, [r8, #16]
 8004298:	f8c8 1010 	str.w	r1, [r8, #16]
 800429c:	f8c8 6010 	str.w	r6, [r8, #16]
 80042a0:	f8c8 2010 	str.w	r2, [r8, #16]
 80042a4:	f8c8 5010 	str.w	r5, [r8, #16]
 80042a8:	f8c8 4010 	str.w	r4, [r8, #16]
 80042ac:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80042b0:	6139      	str	r1, [r7, #16]
 80042b2:	6138      	str	r0, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80042b4:	f8c7 9010 	str.w	r9, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042b8:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80042ba:	2440      	movs	r4, #64	; 0x40
 80042bc:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042be:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 80042c2:	613c      	str	r4, [r7, #16]
 80042c4:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80042c8:	f8c8 9010 	str.w	r9, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042cc:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80042d0:	2402      	movs	r4, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042d2:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80042d6:	f8cb 4010 	str.w	r4, [fp, #16]
 80042da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80042de:	f8cb 4010 	str.w	r4, [fp, #16]
 80042e2:	2401      	movs	r4, #1
 80042e4:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042e8:	f8cb c010 	str.w	ip, [fp, #16]
 80042ec:	613e      	str	r6, [r7, #16]
 80042ee:	613a      	str	r2, [r7, #16]
 80042f0:	f8c8 0010 	str.w	r0, [r8, #16]
 80042f4:	f8c8 1010 	str.w	r1, [r8, #16]
 80042f8:	f8c8 6010 	str.w	r6, [r8, #16]
 80042fc:	f8c8 2010 	str.w	r2, [r8, #16]
 8004300:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004304:	f8c8 5010 	str.w	r5, [r8, #16]
 8004308:	f8c8 2010 	str.w	r2, [r8, #16]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 800430c:	f10e 32ff 	add.w	r2, lr, #4294967295
 8004310:	4452      	add	r2, sl
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004312:	f3c3 34c0 	ubfx	r4, r3, #15, #1
	data[0] = x1 >> 8;
 8004316:	f3c3 2007 	ubfx	r0, r3, #8, #8
	LCD_Window(y, x, y + h - 1, x + w - 1);
 800431a:	fa1f f982 	uxth.w	r9, r2
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 800431e:	b29a      	uxth	r2, r3
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004320:	041b      	lsls	r3, r3, #16
    GPIOx->BSRR = GPIO_Pin;
 8004322:	bf48      	it	mi
 8004324:	2304      	movmi	r3, #4
 8004326:	9403      	str	r4, [sp, #12]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004328:	bf54      	ite	pl
 800432a:	6139      	strpl	r1, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 800432c:	613b      	strmi	r3, [r7, #16]
 800432e:	f3c2 3380 	ubfx	r3, r2, #14, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004332:	0455      	lsls	r5, r2, #17
 8004334:	9309      	str	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004336:	bf54      	ite	pl
 8004338:	f44f 2300 	movpl.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800433c:	2308      	movmi	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800433e:	0494      	lsls	r4, r2, #18
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	f3c2 3340 	ubfx	r3, r2, #13, #1
 8004346:	930a      	str	r3, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004348:	bf54      	ite	pl
 800434a:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800434e:	2310      	movmi	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004350:	04d1      	lsls	r1, r2, #19
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	f3c2 3300 	ubfx	r3, r2, #12, #1
 8004358:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800435a:	bf54      	ite	pl
 800435c:	f44f 1300 	movpl.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004360:	2320      	movmi	r3, #32
 8004362:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004364:	0513      	lsls	r3, r2, #20
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004366:	bf54      	ite	pl
 8004368:	f44f 0380 	movpl.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800436c:	2340      	movmi	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800436e:	0555      	lsls	r5, r2, #21
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	f3c2 2380 	ubfx	r3, r2, #10, #1
 8004376:	9310      	str	r3, [sp, #64]	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004378:	bf54      	ite	pl
 800437a:	f44f 0300 	movpl.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800437e:	2380      	movmi	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004380:	0594      	lsls	r4, r2, #22
 8004382:	613b      	str	r3, [r7, #16]
 8004384:	f3c2 2340 	ubfx	r3, r2, #9, #1
 8004388:	9311      	str	r3, [sp, #68]	; 0x44
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800438a:	bf54      	ite	pl
 800438c:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004390:	2310      	movmi	r3, #16
 8004392:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004396:	f010 0301 	ands.w	r3, r0, #1
 800439a:	9312      	str	r3, [sp, #72]	; 0x48
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800439c:	bf0c      	ite	eq
 800439e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80043a2:	2320      	movne	r3, #32
 80043a4:	f8c8 3010 	str.w	r3, [r8, #16]
 80043a8:	2302      	movs	r3, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043aa:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80043ae:	f8cb 3010 	str.w	r3, [fp, #16]
 80043b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043b6:	f8cb 3010 	str.w	r3, [fp, #16]
 80043ba:	2301      	movs	r3, #1
 80043bc:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80043c4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80043c8:	f8cb 3010 	str.w	r3, [fp, #16]
 80043cc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80043d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80043d4:	f3c2 14c0 	ubfx	r4, r2, #7, #1
 80043d8:	613e      	str	r6, [r7, #16]
 80043da:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80043de:	6139      	str	r1, [r7, #16]
 80043e0:	f8c8 3010 	str.w	r3, [r8, #16]
 80043e4:	9413      	str	r4, [sp, #76]	; 0x4c
 80043e6:	f8c8 0010 	str.w	r0, [r8, #16]
 80043ea:	f8c8 6010 	str.w	r6, [r8, #16]
 80043ee:	f8c8 1010 	str.w	r1, [r8, #16]
 80043f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80043f6:	f8c8 5010 	str.w	r5, [r8, #16]
 80043fa:	f8c8 1010 	str.w	r1, [r8, #16]
 80043fe:	0611      	lsls	r1, r2, #24
    GPIOx->BSRR = GPIO_Pin;
 8004400:	bf48      	it	mi
 8004402:	2104      	movmi	r1, #4
 8004404:	b2d3      	uxtb	r3, r2
 8004406:	bf4c      	ite	mi
 8004408:	6139      	strmi	r1, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800440a:	6138      	strpl	r0, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800440c:	065d      	lsls	r5, r3, #25
 800440e:	bf54      	ite	pl
 8004410:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004414:	2108      	movmi	r1, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004416:	0698      	lsls	r0, r3, #26
 8004418:	6139      	str	r1, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800441a:	bf54      	ite	pl
 800441c:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004420:	2110      	movmi	r1, #16
 8004422:	6139      	str	r1, [r7, #16]
 8004424:	f3c3 1100 	ubfx	r1, r3, #4, #1
 8004428:	9114      	str	r1, [sp, #80]	; 0x50
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800442a:	06d9      	lsls	r1, r3, #27
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800442c:	bf54      	ite	pl
 800442e:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004432:	2120      	movmi	r1, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004434:	0718      	lsls	r0, r3, #28
 8004436:	6139      	str	r1, [r7, #16]
 8004438:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 800443c:	910e      	str	r1, [sp, #56]	; 0x38
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800443e:	bf54      	ite	pl
 8004440:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004444:	2140      	movmi	r1, #64	; 0x40
 8004446:	6139      	str	r1, [r7, #16]
 8004448:	f3c3 0180 	ubfx	r1, r3, #2, #1
 800444c:	910d      	str	r1, [sp, #52]	; 0x34
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800444e:	0759      	lsls	r1, r3, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004450:	bf54      	ite	pl
 8004452:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004456:	2180      	movmi	r1, #128	; 0x80
 8004458:	f3c3 1480 	ubfx	r4, r3, #6, #1
 800445c:	6139      	str	r1, [r7, #16]
 800445e:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8004462:	f3c3 0140 	ubfx	r1, r3, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004466:	079b      	lsls	r3, r3, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004468:	bf54      	ite	pl
 800446a:	f44f 1380 	movpl.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800446e:	2310      	movmi	r3, #16
 8004470:	910b      	str	r1, [sp, #44]	; 0x2c
 8004472:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004476:	f012 0301 	ands.w	r3, r2, #1
 800447a:	930c      	str	r3, [sp, #48]	; 0x30
 800447c:	f3c2 2cc0 	ubfx	ip, r2, #11, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004480:	bf0c      	ite	eq
 8004482:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004486:	2320      	movne	r3, #32
 8004488:	2202      	movs	r2, #2
 800448a:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800448e:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004492:	f8cb 2010 	str.w	r2, [fp, #16]
 8004496:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800449a:	f8cb 2010 	str.w	r2, [fp, #16]
 800449e:	2201      	movs	r2, #1
 80044a0:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80044a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044ac:	f8cb 2010 	str.w	r2, [fp, #16]
 80044b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80044b4:	613e      	str	r6, [r7, #16]
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	f8c8 2010 	str.w	r2, [r8, #16]
 80044bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80044c0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80044c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80044c8:	f8c8 2010 	str.w	r2, [r8, #16]
 80044cc:	f8c8 6010 	str.w	r6, [r8, #16]
 80044d0:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80044d4:	9b03      	ldr	r3, [sp, #12]
 80044d6:	f8c8 0010 	str.w	r0, [r8, #16]
 80044da:	f8c8 1010 	str.w	r1, [r8, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 8721 	beq.w	8005326 <LCD_Font.constprop.2+0x11e2>
    GPIOx->BSRR = GPIO_Pin;
 80044e4:	2304      	movs	r3, #4
 80044e6:	613b      	str	r3, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80044e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f040 8720 	bne.w	8005330 <LCD_Font.constprop.2+0x11ec>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80044f4:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80044f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f040 871f 	bne.w	800533c <LCD_Font.constprop.2+0x11f8>
 80044fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004502:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004504:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004506:	2b00      	cmp	r3, #0
 8004508:	f040 871e 	bne.w	8005348 <LCD_Font.constprop.2+0x1204>
 800450c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004510:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004512:	f1bc 0f00 	cmp.w	ip, #0
 8004516:	f040 871d 	bne.w	8005354 <LCD_Font.constprop.2+0x1210>
 800451a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800451e:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004520:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004522:	2b00      	cmp	r3, #0
 8004524:	f040 871c 	bne.w	8005360 <LCD_Font.constprop.2+0x121c>
 8004528:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800452c:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800452e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004530:	2b00      	cmp	r3, #0
 8004532:	f040 871b 	bne.w	800536c <LCD_Font.constprop.2+0x1228>
 8004536:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800453a:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800453e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004540:	2b00      	cmp	r3, #0
 8004542:	f040 871a 	bne.w	800537a <LCD_Font.constprop.2+0x1236>
 8004546:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800454a:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800454e:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004550:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004554:	f8cb 2010 	str.w	r2, [fp, #16]
 8004558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800455c:	f8cb 2010 	str.w	r2, [fp, #16]
 8004560:	2201      	movs	r2, #1
 8004562:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004566:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800456a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800456e:	f8cb 2010 	str.w	r2, [fp, #16]
 8004572:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004576:	613e      	str	r6, [r7, #16]
 8004578:	613b      	str	r3, [r7, #16]
 800457a:	f8c8 2010 	str.w	r2, [r8, #16]
 800457e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004582:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004586:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800458a:	f8c8 2010 	str.w	r2, [r8, #16]
 800458e:	f8c8 6010 	str.w	r6, [r8, #16]
 8004592:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004596:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004598:	f8c8 0010 	str.w	r0, [r8, #16]
 800459c:	f8c8 1010 	str.w	r1, [r8, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 8718 	beq.w	80053d6 <LCD_Font.constprop.2+0x1292>
    GPIOx->BSRR = GPIO_Pin;
 80045a6:	2304      	movs	r3, #4
 80045a8:	613b      	str	r3, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80045aa:	2c00      	cmp	r4, #0
 80045ac:	f040 86ea 	bne.w	8005384 <LCD_Font.constprop.2+0x1240>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80045b4:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80045b6:	2d00      	cmp	r5, #0
 80045b8:	f040 86e9 	bne.w	800538e <LCD_Font.constprop.2+0x124a>
 80045bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80045c0:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80045c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f040 86e8 	bne.w	800539a <LCD_Font.constprop.2+0x1256>
 80045ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80045ce:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80045d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f040 86e7 	bne.w	80053a6 <LCD_Font.constprop.2+0x1262>
 80045d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80045dc:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80045de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f040 86e6 	bne.w	80053b2 <LCD_Font.constprop.2+0x126e>
 80045e6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80045ea:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80045ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f040 86e5 	bne.w	80053be <LCD_Font.constprop.2+0x127a>
 80045f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80045f8:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80045fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f040 86e4 	bne.w	80053cc <LCD_Font.constprop.2+0x1288>
 8004604:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004608:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800460c:	2502      	movs	r5, #2
 800460e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004612:	f8cb 6010 	str.w	r6, [fp, #16]
 8004616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 800461a:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800461e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004622:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004626:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800462a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800462e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004632:	f8cb 3010 	str.w	r3, [fp, #16]
 8004636:	f8cb 0010 	str.w	r0, [fp, #16]
 800463a:	613e      	str	r6, [r7, #16]
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	f8c8 1010 	str.w	r1, [r8, #16]
 8004642:	f8c8 2010 	str.w	r2, [r8, #16]
 8004646:	f8c8 6010 	str.w	r6, [r8, #16]
 800464a:	f8c8 3010 	str.w	r3, [r8, #16]
 800464e:	f8c8 4010 	str.w	r4, [r8, #16]
 8004652:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8004656:	f04f 0c10 	mov.w	ip, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800465a:	f8c8 4010 	str.w	r4, [r8, #16]
 800465e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8004662:	613a      	str	r2, [r7, #16]
 8004664:	6139      	str	r1, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004666:	f8c7 c010 	str.w	ip, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800466a:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 800466c:	2440      	movs	r4, #64	; 0x40
 800466e:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004670:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 8004674:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004676:	f8c8 c010 	str.w	ip, [r8, #16]
 800467a:	f04f 0c20 	mov.w	ip, #32
 800467e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004682:	f8c8 c010 	str.w	ip, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004686:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800468a:	f8cb 5010 	str.w	r5, [fp, #16]
 800468e:	2501      	movs	r5, #1
 8004690:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004694:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    GPIOx->BSRR = GPIO_Pin;
 8004698:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800469c:	f8cb 0010 	str.w	r0, [fp, #16]
 80046a0:	613e      	str	r6, [r7, #16]
 80046a2:	613b      	str	r3, [r7, #16]
 80046a4:	f8c8 1010 	str.w	r1, [r8, #16]
 80046a8:	f8c8 2010 	str.w	r2, [r8, #16]
 80046ac:	f8c8 6010 	str.w	r6, [r8, #16]
 80046b0:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80046b4:	ea5f 33da 	movs.w	r3, sl, lsr #15
 80046b8:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80046bc:	bf18      	it	ne
 80046be:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046c0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80046c4:	f8c8 4010 	str.w	r4, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80046c8:	bf14      	ite	ne
 80046ca:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046cc:	613a      	streq	r2, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80046ce:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
 80046d2:	bf0c      	ite	eq
 80046d4:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80046d8:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80046da:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 80046de:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046e0:	bf0c      	ite	eq
 80046e2:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80046e6:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80046e8:	f41a 5f80 	tst.w	sl, #4096	; 0x1000
 80046ec:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046ee:	bf0c      	ite	eq
 80046f0:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80046f4:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80046f6:	f41a 6f00 	tst.w	sl, #2048	; 0x800
 80046fa:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046fc:	bf0c      	ite	eq
 80046fe:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004702:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004704:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8004708:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800470a:	bf0c      	ite	eq
 800470c:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004710:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004712:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8004716:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004718:	bf0c      	ite	eq
 800471a:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800471e:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004720:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004724:	f8c8 3010 	str.w	r3, [r8, #16]
 8004728:	f04f 0202 	mov.w	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800472c:	bf0c      	ite	eq
 800472e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004732:	2320      	movne	r3, #32
 8004734:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004738:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800473c:	f8cb 2010 	str.w	r2, [fp, #16]
 8004740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004744:	f8cb 2010 	str.w	r2, [fp, #16]
 8004748:	2201      	movs	r2, #1
 800474a:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800474e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004752:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004756:	f8cb 2010 	str.w	r2, [fp, #16]
 800475a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800475e:	613e      	str	r6, [r7, #16]
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	f8c8 2010 	str.w	r2, [r8, #16]
 8004766:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800476a:	f01a 0f80 	tst.w	sl, #128	; 0x80
 800476e:	f8c8 2010 	str.w	r2, [r8, #16]
 8004772:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004776:	f8c8 6010 	str.w	r6, [r8, #16]
 800477a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800477e:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004782:	bf18      	it	ne
 8004784:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004786:	f8c8 0010 	str.w	r0, [r8, #16]
 800478a:	f8c8 1010 	str.w	r1, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800478e:	bf14      	ite	ne
 8004790:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004792:	613a      	streq	r2, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004794:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8004798:	bf0c      	ite	eq
 800479a:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800479e:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80047a0:	f01a 0f20 	tst.w	sl, #32
 80047a4:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047a6:	bf0c      	ite	eq
 80047a8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80047ac:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80047ae:	f01a 0f10 	tst.w	sl, #16
 80047b2:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047b4:	bf0c      	ite	eq
 80047b6:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80047ba:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80047bc:	f01a 0f08 	tst.w	sl, #8
 80047c0:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047c2:	bf0c      	ite	eq
 80047c4:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80047c8:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80047ca:	f01a 0f04 	tst.w	sl, #4
 80047ce:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047d0:	bf0c      	ite	eq
 80047d2:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80047d6:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80047d8:	f01a 0f02 	tst.w	sl, #2
 80047dc:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047de:	bf0c      	ite	eq
 80047e0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80047e4:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80047e6:	f01a 0f01 	tst.w	sl, #1
 80047ea:	f8c8 3010 	str.w	r3, [r8, #16]
 80047ee:	f04f 0202 	mov.w	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047f2:	bf0c      	ite	eq
 80047f4:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80047f8:	2320      	movne	r3, #32
 80047fa:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047fe:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004802:	f8cb 2010 	str.w	r2, [fp, #16]
 8004806:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800480a:	f8cb 2010 	str.w	r2, [fp, #16]
 800480e:	2201      	movs	r2, #1
 8004810:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004814:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800481c:	f8cb 2010 	str.w	r2, [fp, #16]
 8004820:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004824:	613e      	str	r6, [r7, #16]
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	f8c8 2010 	str.w	r2, [r8, #16]
 800482c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004830:	f8c8 2010 	str.w	r2, [r8, #16]
 8004834:	f8c8 6010 	str.w	r6, [r8, #16]
 8004838:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800483c:	ea5f 33d9 	movs.w	r3, r9, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8004840:	bf18      	it	ne
 8004842:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004844:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004848:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800484c:	f8c8 0010 	str.w	r0, [r8, #16]
 8004850:	f8c8 1010 	str.w	r1, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004854:	bf14      	ite	ne
 8004856:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004858:	613a      	streq	r2, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 800485a:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 800485e:	bf0c      	ite	eq
 8004860:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004864:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004866:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 800486a:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800486c:	bf0c      	ite	eq
 800486e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004872:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004874:	f419 5f80 	tst.w	r9, #4096	; 0x1000
 8004878:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800487a:	bf0c      	ite	eq
 800487c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004880:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004882:	f419 6f00 	tst.w	r9, #2048	; 0x800
 8004886:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004888:	bf0c      	ite	eq
 800488a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 800488e:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004890:	f419 6f80 	tst.w	r9, #1024	; 0x400
 8004894:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004896:	bf0c      	ite	eq
 8004898:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 800489c:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 800489e:	f419 7f00 	tst.w	r9, #512	; 0x200
 80048a2:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048a4:	bf0c      	ite	eq
 80048a6:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80048aa:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80048ac:	f419 7f80 	tst.w	r9, #256	; 0x100
 80048b0:	f8c8 3010 	str.w	r3, [r8, #16]
 80048b4:	f04f 0202 	mov.w	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048b8:	bf0c      	ite	eq
 80048ba:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80048be:	2320      	movne	r3, #32
 80048c0:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048c4:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80048c8:	f8cb 2010 	str.w	r2, [fp, #16]
 80048cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048d0:	f8cb 2010 	str.w	r2, [fp, #16]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80048de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048e2:	f8cb 2010 	str.w	r2, [fp, #16]
 80048e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80048ea:	613e      	str	r6, [r7, #16]
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	f8c8 2010 	str.w	r2, [r8, #16]
 80048f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80048f6:	f019 0f80 	tst.w	r9, #128	; 0x80
 80048fa:	f8c8 2010 	str.w	r2, [r8, #16]
 80048fe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004902:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004906:	f8c8 6010 	str.w	r6, [r8, #16]
 800490a:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800490e:	bf18      	it	ne
 8004910:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004912:	f8c8 0010 	str.w	r0, [r8, #16]
 8004916:	f8c8 1010 	str.w	r1, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800491a:	bf14      	ite	ne
 800491c:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800491e:	613a      	streq	r2, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004920:	f019 0f40 	tst.w	r9, #64	; 0x40
 8004924:	bf0c      	ite	eq
 8004926:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800492a:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 800492c:	f019 0f20 	tst.w	r9, #32
 8004930:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004932:	bf0c      	ite	eq
 8004934:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004938:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800493a:	f019 0f10 	tst.w	r9, #16
 800493e:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004940:	bf0c      	ite	eq
 8004942:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004946:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004948:	f019 0f08 	tst.w	r9, #8
 800494c:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800494e:	bf0c      	ite	eq
 8004950:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004954:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004956:	f019 0f04 	tst.w	r9, #4
 800495a:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800495c:	bf0c      	ite	eq
 800495e:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004962:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004964:	f019 0f02 	tst.w	r9, #2
 8004968:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800496a:	bf0c      	ite	eq
 800496c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004970:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004972:	f019 0f01 	tst.w	r9, #1
 8004976:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800497a:	bf0c      	ite	eq
 800497c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004980:	2320      	movne	r3, #32
 8004982:	f04f 0902 	mov.w	r9, #2
 8004986:	f8c8 3010 	str.w	r3, [r8, #16]
 800498a:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800498e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004992:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 8004996:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800499a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800499e:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80049a2:	f8cb 9010 	str.w	r9, [fp, #16]
 80049a6:	f8cb a010 	str.w	sl, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049aa:	f8cb 3010 	str.w	r3, [fp, #16]
 80049ae:	f8cb 0010 	str.w	r0, [fp, #16]
 80049b2:	613e      	str	r6, [r7, #16]
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	f8c8 4010 	str.w	r4, [r8, #16]
 80049ba:	f8c8 1010 	str.w	r1, [r8, #16]
 80049be:	f8c8 6010 	str.w	r6, [r8, #16]
 80049c2:	f8c8 3010 	str.w	r3, [r8, #16]
 80049c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049ca:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80049ce:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80049d2:	2310      	movs	r3, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049d4:	f8c8 5010 	str.w	r5, [r8, #16]
 80049d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80049dc:	6139      	str	r1, [r7, #16]
 80049de:	613c      	str	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	2340      	movs	r3, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049e4:	613a      	str	r2, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 80049e6:	613b      	str	r3, [r7, #16]
 80049e8:	2380      	movs	r3, #128	; 0x80
 80049ea:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80049f0:	f04f 0c00 	mov.w	ip, #0
 80049f4:	f8c8 3010 	str.w	r3, [r8, #16]
 80049f8:	f8c8 2010 	str.w	r2, [r8, #16]
 80049fc:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004a00:	f8cb 9010 	str.w	r9, [fp, #16]
 8004a04:	f8cb a010 	str.w	sl, [fp, #16]
 8004a08:	f8cd e00c 	str.w	lr, [sp, #12]
 8004a0c:	2301      	movs	r3, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a0e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004a12:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a16:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004a1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004a1e:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8004a22:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 8004a26:	f8cb 3010 	str.w	r3, [fp, #16]
 8004a2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a2e:	613e      	str	r6, [r7, #16]
 8004a30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a34:	6138      	str	r0, [r7, #16]
 8004a36:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
 8004a3a:	f8c8 4010 	str.w	r4, [r8, #16]
 8004a3e:	f8c8 1010 	str.w	r1, [r8, #16]
 8004a42:	f8c8 6010 	str.w	r6, [r8, #16]
 8004a46:	f8c8 0010 	str.w	r0, [r8, #16]
 8004a4a:	f8c8 a010 	str.w	sl, [r8, #16]
 8004a4e:	f8c8 9010 	str.w	r9, [r8, #16]
 8004a52:	6139      	str	r1, [r7, #16]
 8004a54:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8004a58:	613c      	str	r4, [r7, #16]
 8004a5a:	613a      	str	r2, [r7, #16]
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	613d      	str	r5, [r7, #16]
 8004a60:	6139      	str	r1, [r7, #16]
 8004a62:	f8c8 2010 	str.w	r2, [r8, #16]
 8004a66:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a70:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004a74:	f8cb 3010 	str.w	r3, [fp, #16]
 8004a78:	9b03      	ldr	r3, [sp, #12]
 8004a7a:	f10c 0c01 	add.w	ip, ip, #1
 8004a7e:	4563      	cmp	r3, ip
 8004a80:	f8cb e010 	str.w	lr, [fp, #16]
 8004a84:	d1c2      	bne.n	8004a0c <LCD_Font.constprop.2+0x8c8>
 8004a86:	f7ff bbc3 	b.w	8004210 <LCD_Font.constprop.2+0xcc>
		if (set_pixels > 0)
 8004a8a:	4672      	mov	r2, lr
 8004a8c:	f8cd e000 	str.w	lr, [sp]
 8004a90:	b98a      	cbnz	r2, 8004ab6 <LCD_Font.constprop.2+0x972>
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8004a92:	9b06      	ldr	r3, [sp, #24]
 8004a94:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004a96:	3301      	adds	r3, #1
 8004a98:	9306      	str	r3, [sp, #24]
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	f63f ab87 	bhi.w	80041b0 <LCD_Font.constprop.2+0x6c>
			cursor_x += glyph.xAdvance * size;
 8004aa2:	f89d 4074 	ldrb.w	r4, [sp, #116]	; 0x74
 8004aa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004aa8:	9816      	ldr	r0, [sp, #88]	; 0x58
			cursor_x += glyph.xAdvance * size;
 8004aaa:	4423      	add	r3, r4
 8004aac:	b21c      	sxth	r4, r3
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004aae:	f001 fbdd 	bl	800626c <strlen>
 8004ab2:	f7ff bbb7 	b.w	8004224 <LCD_Font.constprop.2+0xe0>
 8004ab6:	460e      	mov	r6, r1
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004ab8:	f99d 2075 	ldrsb.w	r2, [sp, #117]	; 0x75
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004abc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004ac0:	4432      	add	r2, r6
 8004ac2:	9e00      	ldr	r6, [sp, #0]
 8004ac4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004ac8:	1b92      	subs	r2, r2, r6
 8004aca:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8004acc:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8004ad0:	4432      	add	r2, r6
 8004ad2:	fa1f fa82 	uxth.w	sl, r2
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8004ad6:	4453      	add	r3, sl
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004ad8:	f99d 2076 	ldrsb.w	r2, [sp, #118]	; 0x76
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8004adc:	fa1f f983 	uxth.w	r9, r3
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004ae0:	9b06      	ldr	r3, [sp, #24]
 8004ae2:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8004ae6:	441a      	add	r2, r3
 8004ae8:	9b08      	ldr	r3, [sp, #32]
 8004aea:	f8cb 1010 	str.w	r1, [fp, #16]
 8004aee:	441a      	add	r2, r3
 8004af0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004af4:	f8cb 3010 	str.w	r3, [fp, #16]
 8004af8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004afc:	6138      	str	r0, [r7, #16]
 8004afe:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8004b02:	6139      	str	r1, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004b04:	f04f 0e10 	mov.w	lr, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b08:	f8c8 5010 	str.w	r5, [r8, #16]
 8004b0c:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
 8004b10:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b14:	f8c8 0010 	str.w	r0, [r8, #16]
 8004b18:	f8c8 1010 	str.w	r1, [r8, #16]
 8004b1c:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004b20:	2340      	movs	r3, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b22:	f8c8 6010 	str.w	r6, [r8, #16]
 8004b26:	613c      	str	r4, [r7, #16]
 8004b28:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004b2a:	f8c7 e010 	str.w	lr, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b2e:	f8c7 c010 	str.w	ip, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004b32:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b34:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004b38:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b40:	f8c8 c010 	str.w	ip, [r8, #16]
 8004b44:	f8cb 0010 	str.w	r0, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004b48:	f8cb 3010 	str.w	r3, [fp, #16]
 8004b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b50:	f8cb 3010 	str.w	r3, [fp, #16]
 8004b54:	2301      	movs	r3, #1
 8004b56:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004b5e:	f8cb 3010 	str.w	r3, [fp, #16]
 8004b62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b66:	6138      	str	r0, [r7, #16]
 8004b68:	6139      	str	r1, [r7, #16]
 8004b6a:	f8c8 5010 	str.w	r5, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004b6e:	0415      	lsls	r5, r2, #16
 8004b70:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b74:	f8c8 0010 	str.w	r0, [r8, #16]
 8004b78:	f8c8 1010 	str.w	r1, [r8, #16]
 8004b7c:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8004b80:	f8c8 3010 	str.w	r3, [r8, #16]
	data[0] = x1 >> 8;
 8004b84:	f3c2 2107 	ubfx	r1, r2, #8, #8
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004b88:	b293      	uxth	r3, r2
    GPIOx->BSRR = GPIO_Pin;
 8004b8a:	bf48      	it	mi
 8004b8c:	2204      	movmi	r2, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b8e:	f8c8 6010 	str.w	r6, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004b92:	900f      	str	r0, [sp, #60]	; 0x3c
 8004b94:	bf54      	ite	pl
 8004b96:	613c      	strpl	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004b98:	613a      	strmi	r2, [r7, #16]
 8004b9a:	f3c3 3280 	ubfx	r2, r3, #14, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004b9e:	0458      	lsls	r0, r3, #17
 8004ba0:	9219      	str	r2, [sp, #100]	; 0x64
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ba2:	bf54      	ite	pl
 8004ba4:	f44f 2200 	movpl.w	r2, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004ba8:	2208      	movmi	r2, #8
 8004baa:	613a      	str	r2, [r7, #16]
 8004bac:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8004bb0:	9214      	str	r2, [sp, #80]	; 0x50
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004bb2:	049a      	lsls	r2, r3, #18
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004bb4:	bf54      	ite	pl
 8004bb6:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004bba:	2210      	movmi	r2, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004bbc:	04de      	lsls	r6, r3, #19
 8004bbe:	613a      	str	r2, [r7, #16]
 8004bc0:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8004bc4:	920e      	str	r2, [sp, #56]	; 0x38
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004bc6:	bf54      	ite	pl
 8004bc8:	f44f 1200 	movpl.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004bcc:	2220      	movmi	r2, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004bce:	051d      	lsls	r5, r3, #20
 8004bd0:	613a      	str	r2, [r7, #16]
 8004bd2:	f3c3 22c0 	ubfx	r2, r3, #11, #1
 8004bd6:	9213      	str	r2, [sp, #76]	; 0x4c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004bd8:	bf54      	ite	pl
 8004bda:	f44f 0280 	movpl.w	r2, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004bde:	2240      	movmi	r2, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004be0:	055c      	lsls	r4, r3, #21
 8004be2:	613a      	str	r2, [r7, #16]
 8004be4:	f3c3 2280 	ubfx	r2, r3, #10, #1
 8004be8:	920d      	str	r2, [sp, #52]	; 0x34
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004bea:	bf54      	ite	pl
 8004bec:	f44f 0200 	movpl.w	r2, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004bf0:	2280      	movmi	r2, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004bf2:	0598      	lsls	r0, r3, #22
 8004bf4:	613a      	str	r2, [r7, #16]
 8004bf6:	f3c3 2240 	ubfx	r2, r3, #9, #1
 8004bfa:	9212      	str	r2, [sp, #72]	; 0x48
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004bfc:	bf54      	ite	pl
 8004bfe:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004c02:	2210      	movmi	r2, #16
 8004c04:	f8c8 2010 	str.w	r2, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004c08:	f011 0201 	ands.w	r2, r1, #1
 8004c0c:	921a      	str	r2, [sp, #104]	; 0x68
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c0e:	bf0c      	ite	eq
 8004c10:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004c14:	2220      	movne	r2, #32
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004c16:	f3c3 15c0 	ubfx	r5, r3, #7, #1
 8004c1a:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c1e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8004c22:	950c      	str	r5, [sp, #48]	; 0x30
    GPIOx->BSRR = GPIO_Pin;
 8004c24:	2502      	movs	r5, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c26:	f8cb 1010 	str.w	r1, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004c2a:	f8cb 5010 	str.w	r5, [fp, #16]
 8004c2e:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c32:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8004c36:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c3a:	f44f 2480 	mov.w	r4, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004c3e:	2501      	movs	r5, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c40:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
 8004c44:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004c48:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c4c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004c50:	f8cb e010 	str.w	lr, [fp, #16]
 8004c54:	6139      	str	r1, [r7, #16]
 8004c56:	6138      	str	r0, [r7, #16]
 8004c58:	f8c8 c010 	str.w	ip, [r8, #16]
 8004c5c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c60:	f8c8 1010 	str.w	r1, [r8, #16]
 8004c64:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004c68:	f8c8 0010 	str.w	r0, [r8, #16]
 8004c6c:	f8c8 6010 	str.w	r6, [r8, #16]
 8004c70:	f8c8 1010 	str.w	r1, [r8, #16]
 8004c74:	0619      	lsls	r1, r3, #24
    GPIOx->BSRR = GPIO_Pin;
 8004c76:	bf48      	it	mi
 8004c78:	2104      	movmi	r1, #4
 8004c7a:	b2da      	uxtb	r2, r3
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c7c:	bf54      	ite	pl
 8004c7e:	613c      	strpl	r4, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004c80:	6139      	strmi	r1, [r7, #16]
 8004c82:	f3c2 1180 	ubfx	r1, r2, #6, #1
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004c86:	0656      	lsls	r6, r2, #25
 8004c88:	9111      	str	r1, [sp, #68]	; 0x44
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c8a:	bf54      	ite	pl
 8004c8c:	f44f 2100 	movpl.w	r1, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004c90:	2108      	movmi	r1, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004c92:	0695      	lsls	r5, r2, #26
 8004c94:	6139      	str	r1, [r7, #16]
 8004c96:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8004c9a:	910b      	str	r1, [sp, #44]	; 0x2c
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c9c:	bf54      	ite	pl
 8004c9e:	f44f 1180 	movpl.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004ca2:	2110      	movmi	r1, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004ca4:	06d4      	lsls	r4, r2, #27
 8004ca6:	6139      	str	r1, [r7, #16]
 8004ca8:	f3c2 1100 	ubfx	r1, r2, #4, #1
 8004cac:	9110      	str	r1, [sp, #64]	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cae:	bf54      	ite	pl
 8004cb0:	f44f 1100 	movpl.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004cb4:	2120      	movmi	r1, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004cb6:	0710      	lsls	r0, r2, #28
 8004cb8:	6139      	str	r1, [r7, #16]
 8004cba:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 8004cbe:	910a      	str	r1, [sp, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cc0:	bf54      	ite	pl
 8004cc2:	f44f 0180 	movpl.w	r1, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004cc6:	2140      	movmi	r1, #64	; 0x40
 8004cc8:	6139      	str	r1, [r7, #16]
 8004cca:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8004cce:	911b      	str	r1, [sp, #108]	; 0x6c
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004cd0:	0751      	lsls	r1, r2, #29
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cd2:	bf54      	ite	pl
 8004cd4:	f44f 0100 	movpl.w	r1, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004cd8:	2180      	movmi	r1, #128	; 0x80
 8004cda:	6139      	str	r1, [r7, #16]
 8004cdc:	f3c2 0140 	ubfx	r1, r2, #1, #1
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004ce0:	0792      	lsls	r2, r2, #30
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ce2:	bf54      	ite	pl
 8004ce4:	f44f 1280 	movpl.w	r2, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004ce8:	2210      	movmi	r2, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004cea:	f013 0301 	ands.w	r3, r3, #1
 8004cee:	9109      	str	r1, [sp, #36]	; 0x24
 8004cf0:	f8c8 2010 	str.w	r2, [r8, #16]
 8004cf4:	9303      	str	r3, [sp, #12]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cf6:	bf0c      	ite	eq
 8004cf8:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004cfc:	2320      	movne	r3, #32
 8004cfe:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8004d02:	f8c8 3010 	str.w	r3, [r8, #16]
 8004d06:	f04f 0e02 	mov.w	lr, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004d12:	f8cb 3010 	str.w	r3, [fp, #16]
 8004d16:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8004d1a:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d1e:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004d22:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d26:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004d2a:	f04f 0c01 	mov.w	ip, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d2e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004d32:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8004d36:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d3a:	f8cb 6010 	str.w	r6, [fp, #16]
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	613a      	str	r2, [r7, #16]
 8004d42:	f8c8 5010 	str.w	r5, [r8, #16]
 8004d46:	f8c8 1010 	str.w	r1, [r8, #16]
 8004d4a:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004d4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d50:	f8c8 2010 	str.w	r2, [r8, #16]
 8004d54:	f8c8 4010 	str.w	r4, [r8, #16]
 8004d58:	f8c8 0010 	str.w	r0, [r8, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 836d 	beq.w	800543c <LCD_Font.constprop.2+0x12f8>
    GPIOx->BSRR = GPIO_Pin;
 8004d62:	2304      	movs	r3, #4
 8004d64:	613b      	str	r3, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004d66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f040 8364 	bne.w	8005436 <LCD_Font.constprop.2+0x12f2>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d6e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004d72:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004d74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f040 835a 	bne.w	8005430 <LCD_Font.constprop.2+0x12ec>
 8004d7c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d80:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004d82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f040 8350 	bne.w	800542a <LCD_Font.constprop.2+0x12e6>
 8004d8a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d8e:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004d90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f040 8346 	bne.w	8005424 <LCD_Font.constprop.2+0x12e0>
 8004d98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d9c:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f040 833c 	bne.w	800541e <LCD_Font.constprop.2+0x12da>
 8004da6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004daa:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004dac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f040 8331 	bne.w	8005416 <LCD_Font.constprop.2+0x12d2>
 8004db4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004db8:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004dbc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f040 8325 	bne.w	800540e <LCD_Font.constprop.2+0x12ca>
 8004dc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004dc8:	f8c8 3010 	str.w	r3, [r8, #16]
 8004dcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8004dd0:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8004dd4:	f04f 0e02 	mov.w	lr, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004dd8:	f8cb 3010 	str.w	r3, [fp, #16]
 8004ddc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8004de0:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004de4:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8004de8:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004dec:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8004df0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004df4:	f04f 0c01 	mov.w	ip, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004df8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004dfc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 8004e00:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e04:	f8cb 6010 	str.w	r6, [fp, #16]
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	613a      	str	r2, [r7, #16]
 8004e0c:	f8c8 5010 	str.w	r5, [r8, #16]
 8004e10:	f8c8 1010 	str.w	r1, [r8, #16]
 8004e14:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e1a:	f8c8 2010 	str.w	r2, [r8, #16]
 8004e1e:	f8c8 4010 	str.w	r4, [r8, #16]
 8004e22:	f8c8 0010 	str.w	r0, [r8, #16]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 82ef 	beq.w	800540a <LCD_Font.constprop.2+0x12c6>
    GPIOx->BSRR = GPIO_Pin;
 8004e2c:	2304      	movs	r3, #4
 8004e2e:	613b      	str	r3, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004e30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f040 82e6 	bne.w	8005404 <LCD_Font.constprop.2+0x12c0>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004e3c:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004e3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f040 82dc 	bne.w	80053fe <LCD_Font.constprop.2+0x12ba>
 8004e46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e4a:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004e4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f040 82d2 	bne.w	80053f8 <LCD_Font.constprop.2+0x12b4>
 8004e54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e58:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f040 82c8 	bne.w	80053f2 <LCD_Font.constprop.2+0x12ae>
 8004e62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e66:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004e68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f040 82be 	bne.w	80053ec <LCD_Font.constprop.2+0x12a8>
 8004e70:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004e74:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f040 82b3 	bne.w	80053e4 <LCD_Font.constprop.2+0x12a0>
 8004e7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e82:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004e86:	9b03      	ldr	r3, [sp, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f040 82a7 	bne.w	80053dc <LCD_Font.constprop.2+0x1298>
 8004e8e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e92:	f8c8 3010 	str.w	r3, [r8, #16]
 8004e96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 8004e9a:	2602      	movs	r6, #2
 8004e9c:	f44f 6580 	mov.w	r5, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ea0:	f8cb 3010 	str.w	r3, [fp, #16]
 8004ea4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8004ea8:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004eac:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004eb0:	f8cb 5010 	str.w	r5, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004eb4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004eb8:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8004ebc:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8004ec0:	f8cb 2010 	str.w	r2, [fp, #16]
 8004ec4:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 8004ec8:	f8cb 4010 	str.w	r4, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004ecc:	f04f 0c10 	mov.w	ip, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	613a      	str	r2, [r7, #16]
 8004ed4:	f8c8 0010 	str.w	r0, [r8, #16]
 8004ed8:	f8c8 1010 	str.w	r1, [r8, #16]
 8004edc:	f8c8 3010 	str.w	r3, [r8, #16]
 8004ee0:	f8c8 2010 	str.w	r2, [r8, #16]
 8004ee4:	f8c8 5010 	str.w	r5, [r8, #16]
 8004ee8:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
 8004eec:	f8c8 e010 	str.w	lr, [r8, #16]
 8004ef0:	6139      	str	r1, [r7, #16]
 8004ef2:	6138      	str	r0, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004ef4:	f8c7 c010 	str.w	ip, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ef8:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004efa:	2540      	movs	r5, #64	; 0x40
 8004efc:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004efe:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
 8004f02:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004f04:	f8c8 c010 	str.w	ip, [r8, #16]
 8004f08:	f04f 0c20 	mov.w	ip, #32
 8004f0c:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8004f10:	f8c8 c010 	str.w	ip, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f14:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004f18:	f8cb 6010 	str.w	r6, [fp, #16]
 8004f1c:	2601      	movs	r6, #1
 8004f1e:	f8cb 5010 	str.w	r5, [fp, #16]
 8004f22:	f8cb 6010 	str.w	r6, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f26:	f8cb 4010 	str.w	r4, [fp, #16]
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	613a      	str	r2, [r7, #16]
 8004f2e:	f8c8 0010 	str.w	r0, [r8, #16]
 8004f32:	f8c8 1010 	str.w	r1, [r8, #16]
 8004f36:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004f3a:	ea5f 33da 	movs.w	r3, sl, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 8004f3e:	bf18      	it	ne
 8004f40:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f42:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8004f46:	f8c8 2010 	str.w	r2, [r8, #16]
 8004f4a:	f8c8 5010 	str.w	r5, [r8, #16]
 8004f4e:	f8c8 e010 	str.w	lr, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8004f52:	bf14      	ite	ne
 8004f54:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f56:	6139      	streq	r1, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8004f58:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
 8004f5c:	bf0c      	ite	eq
 8004f5e:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004f62:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8004f64:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8004f68:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f6a:	bf0c      	ite	eq
 8004f6c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004f70:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8004f72:	f41a 5f80 	tst.w	sl, #4096	; 0x1000
 8004f76:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f78:	bf0c      	ite	eq
 8004f7a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004f7e:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8004f80:	f41a 6f00 	tst.w	sl, #2048	; 0x800
 8004f84:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f86:	bf0c      	ite	eq
 8004f88:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8004f8c:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8004f8e:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8004f92:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f94:	bf0c      	ite	eq
 8004f96:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8004f9a:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8004f9c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8004fa0:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fa2:	bf0c      	ite	eq
 8004fa4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8004fa8:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8004faa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004fae:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fb2:	bf0c      	ite	eq
 8004fb4:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8004fb8:	2320      	movne	r3, #32
 8004fba:	f04f 0e02 	mov.w	lr, #2
 8004fbe:	f8c8 3010 	str.w	r3, [r8, #16]
 8004fc2:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004fce:	f8cb 3010 	str.w	r3, [fp, #16]
 8004fd2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8004fd6:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fda:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8004fde:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fe2:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 8004fe6:	f04f 0c01 	mov.w	ip, #1
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8004fea:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8004fee:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ff2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004ff6:	f8cb 6010 	str.w	r6, [fp, #16]
 8004ffa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	613a      	str	r2, [r7, #16]
 8005002:	f8c8 5010 	str.w	r5, [r8, #16]
 8005006:	f8c8 1010 	str.w	r1, [r8, #16]
 800500a:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800500e:	bf18      	it	ne
 8005010:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005012:	f8c8 2010 	str.w	r2, [r8, #16]
 8005016:	f8c8 4010 	str.w	r4, [r8, #16]
 800501a:	f8c8 0010 	str.w	r0, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 800501e:	bf14      	ite	ne
 8005020:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005022:	6139      	streq	r1, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8005024:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005028:	bf0c      	ite	eq
 800502a:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800502e:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8005030:	f01a 0f20 	tst.w	sl, #32
 8005034:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005036:	bf0c      	ite	eq
 8005038:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800503c:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800503e:	f01a 0f10 	tst.w	sl, #16
 8005042:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005044:	bf0c      	ite	eq
 8005046:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800504a:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800504c:	f01a 0f08 	tst.w	sl, #8
 8005050:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005052:	bf0c      	ite	eq
 8005054:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8005058:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800505a:	f01a 0f04 	tst.w	sl, #4
 800505e:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005060:	bf0c      	ite	eq
 8005062:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8005066:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8005068:	f01a 0f02 	tst.w	sl, #2
 800506c:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800506e:	bf0c      	ite	eq
 8005070:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8005074:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8005076:	f01a 0f01 	tst.w	sl, #1
 800507a:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800507e:	bf0c      	ite	eq
 8005080:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8005084:	2320      	movne	r3, #32
 8005086:	f04f 0e02 	mov.w	lr, #2
 800508a:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 800508e:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005092:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005096:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800509a:	f8cb 3010 	str.w	r3, [fp, #16]
 800509e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80050a2:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050a6:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 80050aa:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050ae:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80050b2:	f04f 0c01 	mov.w	ip, #1
 80050b6:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050ba:	f8cb 6010 	str.w	r6, [fp, #16]
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	613a      	str	r2, [r7, #16]
 80050c2:	f8c8 5010 	str.w	r5, [r8, #16]
 80050c6:	f8c8 1010 	str.w	r1, [r8, #16]
 80050ca:	f8c8 3010 	str.w	r3, [r8, #16]
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 80050ce:	ea5f 33d9 	movs.w	r3, r9, lsr #15
    GPIOx->BSRR = GPIO_Pin;
 80050d2:	bf18      	it	ne
 80050d4:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050d6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80050da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80050de:	f8c8 2010 	str.w	r2, [r8, #16]
 80050e2:	f8c8 4010 	str.w	r4, [r8, #16]
 80050e6:	f8c8 0010 	str.w	r0, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80050ea:	bf14      	ite	ne
 80050ec:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050ee:	6139      	streq	r1, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80050f0:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 80050f4:	bf0c      	ite	eq
 80050f6:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80050fa:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80050fc:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8005100:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005102:	bf0c      	ite	eq
 8005104:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8005108:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 800510a:	f419 5f80 	tst.w	r9, #4096	; 0x1000
 800510e:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005110:	bf0c      	ite	eq
 8005112:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8005116:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 8005118:	f419 6f00 	tst.w	r9, #2048	; 0x800
 800511c:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800511e:	bf0c      	ite	eq
 8005120:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 8005124:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8005126:	f419 6f80 	tst.w	r9, #1024	; 0x400
 800512a:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800512c:	bf0c      	ite	eq
 800512e:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 8005132:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8005134:	f419 7f00 	tst.w	r9, #512	; 0x200
 8005138:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800513a:	bf0c      	ite	eq
 800513c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8005140:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8005142:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005146:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800514a:	bf0c      	ite	eq
 800514c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8005150:	2320      	movne	r3, #32
 8005152:	f04f 0e02 	mov.w	lr, #2
 8005156:	f8c8 3010 	str.w	r3, [r8, #16]
 800515a:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800515e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005162:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005166:	f8cb 3010 	str.w	r3, [fp, #16]
 800516a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 800516e:	f8cb e010 	str.w	lr, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005172:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
    GPIOx->BSRR = GPIO_Pin;
 8005176:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800517a:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800517e:	f04f 0c01 	mov.w	ip, #1
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 8005182:	f019 0f80 	tst.w	r9, #128	; 0x80
 8005186:	f8cb c010 	str.w	ip, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800518a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800518e:	f8cb 6010 	str.w	r6, [fp, #16]
 8005192:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005196:	613b      	str	r3, [r7, #16]
 8005198:	613a      	str	r2, [r7, #16]
 800519a:	f8c8 5010 	str.w	r5, [r8, #16]
 800519e:	f8c8 1010 	str.w	r1, [r8, #16]
 80051a2:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80051a6:	bf18      	it	ne
 80051a8:	2304      	movne	r3, #4
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051aa:	f8c8 2010 	str.w	r2, [r8, #16]
 80051ae:	f8c8 4010 	str.w	r4, [r8, #16]
 80051b2:	f8c8 0010 	str.w	r0, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 80051b6:	bf14      	ite	ne
 80051b8:	613b      	strne	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051ba:	6139      	streq	r1, [r7, #16]
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80051bc:	f019 0f40 	tst.w	r9, #64	; 0x40
 80051c0:	bf0c      	ite	eq
 80051c2:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 80051c6:	2308      	movne	r3, #8
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80051c8:	f019 0f20 	tst.w	r9, #32
 80051cc:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051ce:	bf0c      	ite	eq
 80051d0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 80051d4:	2310      	movne	r3, #16
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 80051d6:	f019 0f10 	tst.w	r9, #16
 80051da:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051dc:	bf0c      	ite	eq
 80051de:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 80051e2:	2320      	movne	r3, #32
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 80051e4:	f019 0f08 	tst.w	r9, #8
 80051e8:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051ea:	bf0c      	ite	eq
 80051ec:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    GPIOx->BSRR = GPIO_Pin;
 80051f0:	2340      	movne	r3, #64	; 0x40
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80051f2:	f019 0f04 	tst.w	r9, #4
 80051f6:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051f8:	bf0c      	ite	eq
 80051fa:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
    GPIOx->BSRR = GPIO_Pin;
 80051fe:	2380      	movne	r3, #128	; 0x80
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8005200:	f019 0f02 	tst.w	r9, #2
 8005204:	613b      	str	r3, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005206:	bf0c      	ite	eq
 8005208:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 800520c:	2310      	movne	r3, #16
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 800520e:	f019 0f01 	tst.w	r9, #1
 8005212:	f8c8 3010 	str.w	r3, [r8, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005216:	bf0c      	ite	eq
 8005218:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 800521c:	2320      	movne	r3, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800521e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    GPIOx->BSRR = GPIO_Pin;
 8005222:	f8c8 3010 	str.w	r3, [r8, #16]
 8005226:	f04f 0902 	mov.w	r9, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800522a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    GPIOx->BSRR = GPIO_Pin;
 800522e:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005232:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8005236:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800523a:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 800523e:	f8cb 3010 	str.w	r3, [fp, #16]
 8005242:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8005246:	f8cb 9010 	str.w	r9, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800524a:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
    GPIOx->BSRR = GPIO_Pin;
 800524e:	f8cb a010 	str.w	sl, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005252:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 8005256:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 800525a:	2610      	movs	r6, #16
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800525c:	f8cb 4010 	str.w	r4, [fp, #16]
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	613a      	str	r2, [r7, #16]
 8005264:	f8c8 5010 	str.w	r5, [r8, #16]
 8005268:	f8c8 0010 	str.w	r0, [r8, #16]
 800526c:	f8c8 3010 	str.w	r3, [r8, #16]
 8005270:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005274:	2240      	movs	r2, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005276:	f8c8 e010 	str.w	lr, [r8, #16]
 800527a:	f8c8 c010 	str.w	ip, [r8, #16]
 800527e:	6138      	str	r0, [r7, #16]
 8005280:	613d      	str	r5, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005282:	613e      	str	r6, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005284:	6139      	str	r1, [r7, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005286:	613a      	str	r2, [r7, #16]
 8005288:	2280      	movs	r2, #128	; 0x80
 800528a:	613a      	str	r2, [r7, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800528c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8005290:	f04f 0c00 	mov.w	ip, #0
 8005294:	f8c8 2010 	str.w	r2, [r8, #16]
 8005298:	f8c8 1010 	str.w	r1, [r8, #16]
 800529c:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 80052a0:	f8cb 9010 	str.w	r9, [fp, #16]
 80052a4:	f8cb a010 	str.w	sl, [fp, #16]
 80052a8:	2201      	movs	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80052aa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80052ae:	f8cb 2010 	str.w	r2, [fp, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80052b2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80052b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80052ba:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80052be:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 80052c2:	f8cb 2010 	str.w	r2, [fp, #16]
 80052c6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80052ca:	613b      	str	r3, [r7, #16]
 80052cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80052d0:	613c      	str	r4, [r7, #16]
 80052d2:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 80052d6:	f8c8 5010 	str.w	r5, [r8, #16]
 80052da:	f8c8 0010 	str.w	r0, [r8, #16]
 80052de:	f8c8 3010 	str.w	r3, [r8, #16]
 80052e2:	f8c8 4010 	str.w	r4, [r8, #16]
 80052e6:	f8c8 9010 	str.w	r9, [r8, #16]
 80052ea:	f8c8 e010 	str.w	lr, [r8, #16]
 80052ee:	6138      	str	r0, [r7, #16]
 80052f0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80052f4:	613d      	str	r5, [r7, #16]
 80052f6:	6139      	str	r1, [r7, #16]
 80052f8:	613a      	str	r2, [r7, #16]
 80052fa:	613e      	str	r6, [r7, #16]
 80052fc:	6138      	str	r0, [r7, #16]
 80052fe:	f8c8 1010 	str.w	r1, [r8, #16]
 8005302:	f8c8 2010 	str.w	r2, [r8, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005306:	2202      	movs	r2, #2
 8005308:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800530c:	f8cb 3010 	str.w	r3, [fp, #16]
    GPIOx->BSRR = GPIO_Pin;
 8005310:	f8cb 2010 	str.w	r2, [fp, #16]
 8005314:	9a00      	ldr	r2, [sp, #0]
 8005316:	f10c 0c01 	add.w	ip, ip, #1
 800531a:	4562      	cmp	r2, ip
 800531c:	f8cb a010 	str.w	sl, [fp, #16]
 8005320:	d1c2      	bne.n	80052a8 <LCD_Font.constprop.2+0x1164>
 8005322:	f7ff bbb6 	b.w	8004a92 <LCD_Font.constprop.2+0x94e>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 8005326:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005328:	613a      	str	r2, [r7, #16]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f43f a8e0 	beq.w	80044f0 <LCD_Font.constprop.2+0x3ac>
    GPIOx->BSRR = GPIO_Pin;
 8005330:	2308      	movs	r3, #8
 8005332:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8005334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005336:	2b00      	cmp	r3, #0
 8005338:	f43f a8e1 	beq.w	80044fe <LCD_Font.constprop.2+0x3ba>
 800533c:	2310      	movs	r3, #16
 800533e:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8005340:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005342:	2b00      	cmp	r3, #0
 8005344:	f43f a8e2 	beq.w	800450c <LCD_Font.constprop.2+0x3c8>
 8005348:	2320      	movs	r3, #32
 800534a:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800534c:	f1bc 0f00 	cmp.w	ip, #0
 8005350:	f43f a8e3 	beq.w	800451a <LCD_Font.constprop.2+0x3d6>
 8005354:	2340      	movs	r3, #64	; 0x40
 8005356:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 8005358:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	f43f a8e4 	beq.w	8004528 <LCD_Font.constprop.2+0x3e4>
 8005360:	2380      	movs	r3, #128	; 0x80
 8005362:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8005364:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005366:	2b00      	cmp	r3, #0
 8005368:	f43f a8e5 	beq.w	8004536 <LCD_Font.constprop.2+0x3f2>
 800536c:	2310      	movs	r3, #16
 800536e:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8005372:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005374:	2b00      	cmp	r3, #0
 8005376:	f43f a8e6 	beq.w	8004546 <LCD_Font.constprop.2+0x402>
 800537a:	2320      	movs	r3, #32
 800537c:	f8c8 3010 	str.w	r3, [r8, #16]
 8005380:	f7ff b8e5 	b.w	800454e <LCD_Font.constprop.2+0x40a>
 8005384:	2308      	movs	r3, #8
 8005386:	613b      	str	r3, [r7, #16]
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 8005388:	2d00      	cmp	r5, #0
 800538a:	f43f a917 	beq.w	80045bc <LCD_Font.constprop.2+0x478>
 800538e:	2310      	movs	r3, #16
 8005390:	613b      	str	r3, [r7, #16]
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8005392:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005394:	2b00      	cmp	r3, #0
 8005396:	f43f a918 	beq.w	80045ca <LCD_Font.constprop.2+0x486>
 800539a:	2320      	movs	r3, #32
 800539c:	613b      	str	r3, [r7, #16]
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800539e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f43f a919 	beq.w	80045d8 <LCD_Font.constprop.2+0x494>
 80053a6:	2340      	movs	r3, #64	; 0x40
 80053a8:	613b      	str	r3, [r7, #16]
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 80053aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f43f a91a 	beq.w	80045e6 <LCD_Font.constprop.2+0x4a2>
 80053b2:	2380      	movs	r3, #128	; 0x80
 80053b4:	613b      	str	r3, [r7, #16]
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 80053b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f43f a91b 	beq.w	80045f4 <LCD_Font.constprop.2+0x4b0>
 80053be:	2310      	movs	r3, #16
 80053c0:	f8c8 3010 	str.w	r3, [r8, #16]
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80053c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f43f a91c 	beq.w	8004604 <LCD_Font.constprop.2+0x4c0>
 80053cc:	2320      	movs	r3, #32
 80053ce:	f8c8 3010 	str.w	r3, [r8, #16]
 80053d2:	f7ff b91b 	b.w	800460c <LCD_Font.constprop.2+0x4c8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053d6:	613a      	str	r2, [r7, #16]
 80053d8:	f7ff b8e7 	b.w	80045aa <LCD_Font.constprop.2+0x466>
    GPIOx->BSRR = GPIO_Pin;
 80053dc:	2320      	movs	r3, #32
 80053de:	f8c8 3010 	str.w	r3, [r8, #16]
 80053e2:	e558      	b.n	8004e96 <LCD_Font.constprop.2+0xd52>
 80053e4:	2310      	movs	r3, #16
 80053e6:	f8c8 3010 	str.w	r3, [r8, #16]
 80053ea:	e54c      	b.n	8004e86 <LCD_Font.constprop.2+0xd42>
 80053ec:	2380      	movs	r3, #128	; 0x80
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	e541      	b.n	8004e76 <LCD_Font.constprop.2+0xd32>
 80053f2:	2340      	movs	r3, #64	; 0x40
 80053f4:	613b      	str	r3, [r7, #16]
 80053f6:	e537      	b.n	8004e68 <LCD_Font.constprop.2+0xd24>
 80053f8:	2320      	movs	r3, #32
 80053fa:	613b      	str	r3, [r7, #16]
 80053fc:	e52d      	b.n	8004e5a <LCD_Font.constprop.2+0xd16>
 80053fe:	2310      	movs	r3, #16
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	e523      	b.n	8004e4c <LCD_Font.constprop.2+0xd08>
 8005404:	2308      	movs	r3, #8
 8005406:	613b      	str	r3, [r7, #16]
 8005408:	e519      	b.n	8004e3e <LCD_Font.constprop.2+0xcfa>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800540a:	6139      	str	r1, [r7, #16]
 800540c:	e510      	b.n	8004e30 <LCD_Font.constprop.2+0xcec>
    GPIOx->BSRR = GPIO_Pin;
 800540e:	2320      	movs	r3, #32
 8005410:	f8c8 3010 	str.w	r3, [r8, #16]
 8005414:	e4da      	b.n	8004dcc <LCD_Font.constprop.2+0xc88>
 8005416:	2310      	movs	r3, #16
 8005418:	f8c8 3010 	str.w	r3, [r8, #16]
 800541c:	e4ce      	b.n	8004dbc <LCD_Font.constprop.2+0xc78>
 800541e:	2380      	movs	r3, #128	; 0x80
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	e4c3      	b.n	8004dac <LCD_Font.constprop.2+0xc68>
 8005424:	2340      	movs	r3, #64	; 0x40
 8005426:	613b      	str	r3, [r7, #16]
 8005428:	e4b9      	b.n	8004d9e <LCD_Font.constprop.2+0xc5a>
 800542a:	2320      	movs	r3, #32
 800542c:	613b      	str	r3, [r7, #16]
 800542e:	e4af      	b.n	8004d90 <LCD_Font.constprop.2+0xc4c>
 8005430:	2310      	movs	r3, #16
 8005432:	613b      	str	r3, [r7, #16]
 8005434:	e4a5      	b.n	8004d82 <LCD_Font.constprop.2+0xc3e>
 8005436:	2308      	movs	r3, #8
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	e49b      	b.n	8004d74 <LCD_Font.constprop.2+0xc30>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800543c:	6139      	str	r1, [r7, #16]
 800543e:	e492      	b.n	8004d66 <LCD_Font.constprop.2+0xc22>
			cursor_x += glyph.xAdvance * size;
 8005440:	b2a3      	uxth	r3, r4
 8005442:	9315      	str	r3, [sp, #84]	; 0x54
 8005444:	f7ff bb2d 	b.w	8004aa2 <LCD_Font.constprop.2+0x95e>

08005448 <LCD_Font.constprop.3>:
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t cursor_x = x;
 800544c:	fa0f f880 	sxth.w	r8, r0
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005450:	b085      	sub	sp, #20
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005452:	4610      	mov	r0, r2
void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
 8005454:	4616      	mov	r6, r2
 8005456:	469a      	mov	sl, r3
	int16_t cursor_y = y;
 8005458:	b20d      	sxth	r5, r1
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800545a:	f000 ff07 	bl	800626c <strlen>
 800545e:	b3a0      	cbz	r0, 80054ca <LCD_Font.constprop.3+0x82>
 8005460:	2400      	movs	r4, #0
	int16_t cursor_x = x;
 8005462:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005464:	4622      	mov	r2, r4
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005466:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80054d0 <LCD_Font.constprop.3+0x88>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800546a:	4b1a      	ldr	r3, [pc, #104]	; (80054d4 <LCD_Font.constprop.3+0x8c>)
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800546c:	f10d 0b08 	add.w	fp, sp, #8
 8005470:	e01c      	b.n	80054ac <LCD_Font.constprop.3+0x64>
		else if(c >= font.first && c <= font.last && c != '\r')
 8005472:	f1bc 0f5e 	cmp.w	ip, #94	; 0x5e
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005476:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
		else if(c >= font.first && c <= font.last && c != '\r')
 800547a:	d812      	bhi.n	80054a2 <LCD_Font.constprop.3+0x5a>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800547c:	f8cd a000 	str.w	sl, [sp]
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005480:	e892 0003 	ldmia.w	r2, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005484:	465a      	mov	r2, fp
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005486:	e88b 0003 	stmia.w	fp, {r0, r1}
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800548a:	4638      	mov	r0, r7
 800548c:	4629      	mov	r1, r5
 800548e:	f7fe fcd1 	bl	8003e34 <LCD_Char.constprop.1.isra.0>
			cursor_x += glyph.xAdvance * size;
 8005492:	f89d 200c 	ldrb.w	r2, [sp, #12]
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005496:	4630      	mov	r0, r6
			cursor_x += glyph.xAdvance * size;
 8005498:	4417      	add	r7, r2
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800549a:	f000 fee7 	bl	800626c <strlen>
 800549e:	4b0d      	ldr	r3, [pc, #52]	; (80054d4 <LCD_Font.constprop.3+0x8c>)
			cursor_x += glyph.xAdvance * size;
 80054a0:	b23f      	sxth	r7, r7
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80054a2:	3401      	adds	r4, #1
 80054a4:	b2a4      	uxth	r4, r4
 80054a6:	4284      	cmp	r4, r0
 80054a8:	4622      	mov	r2, r4
 80054aa:	d20e      	bcs.n	80054ca <LCD_Font.constprop.3+0x82>
		char c = text[text_pos];
 80054ac:	5cb1      	ldrb	r1, [r6, r2]
		else if(c >= font.first && c <= font.last && c != '\r')
 80054ae:	f1a1 0220 	sub.w	r2, r1, #32
		if(c == '\n')
 80054b2:	290a      	cmp	r1, #10
		else if(c >= font.first && c <= font.last && c != '\r')
 80054b4:	fa5f fc82 	uxtb.w	ip, r2
		if(c == '\n')
 80054b8:	d1db      	bne.n	8005472 <LCD_Font.constprop.3+0x2a>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80054ba:	3401      	adds	r4, #1
 80054bc:	b2a4      	uxth	r4, r4
			cursor_y += font.yAdvance * size;
 80054be:	352b      	adds	r5, #43	; 0x2b
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80054c0:	4284      	cmp	r4, r0
			cursor_x = x;
 80054c2:	4647      	mov	r7, r8
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80054c4:	4622      	mov	r2, r4
			cursor_y += font.yAdvance * size;
 80054c6:	b22d      	sxth	r5, r5
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80054c8:	d3f0      	bcc.n	80054ac <LCD_Font.constprop.3+0x64>
}
 80054ca:	b005      	add	sp, #20
 80054cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d0:	0800d648 	.word	0x0800d648
 80054d4:	0801cba0 	.word	0x0801cba0

080054d8 <bme280.part.0>:
		rx_buffer[rx_index++] = rx_data;
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
	}
}

void bme280(void) {
 80054d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	temperature = BME280_getTemperature(-1);
	humidity = BME280_getHumidity(-1);
	pressure = (uint16_t)BME280_getPressure();

	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 80054dc:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80056a8 <bme280.part.0+0x1d0>
void bme280(void) {
 80054e0:	b087      	sub	sp, #28
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 80054e2:	e9d8 6732 	ldrd	r6, r7, [r8, #200]	; 0xc8
 80054e6:	2200      	movs	r2, #0
 80054e8:	4630      	mov	r0, r6
 80054ea:	4639      	mov	r1, r7
 80054ec:	4b6f      	ldr	r3, [pc, #444]	; (80056ac <bme280.part.0+0x1d4>)
 80054ee:	f001 faf3 	bl	8006ad8 <__aeabi_dcmplt>
 80054f2:	2800      	cmp	r0, #0
 80054f4:	f000 80d4 	beq.w	80056a0 <bme280.part.0+0x1c8>
 80054f8:	2200      	movs	r2, #0
 80054fa:	4630      	mov	r0, r6
 80054fc:	4639      	mov	r1, r7
 80054fe:	4b6c      	ldr	r3, [pc, #432]	; (80056b0 <bme280.part.0+0x1d8>)
 8005500:	f001 fb08 	bl	8006b14 <__aeabi_dcmpgt>
 8005504:	2800      	cmp	r0, #0
 8005506:	f000 80cb 	beq.w	80056a0 <bme280.part.0+0x1c8>
 800550a:	e9d8 4534 	ldrd	r4, r5, [r8, #208]	; 0xd0
 800550e:	2200      	movs	r2, #0
 8005510:	2300      	movs	r3, #0
 8005512:	4620      	mov	r0, r4
 8005514:	4629      	mov	r1, r5
 8005516:	f001 fafd 	bl	8006b14 <__aeabi_dcmpgt>
 800551a:	2800      	cmp	r0, #0
 800551c:	f000 80c0 	beq.w	80056a0 <bme280.part.0+0x1c8>
 8005520:	2200      	movs	r2, #0
 8005522:	4620      	mov	r0, r4
 8005524:	4629      	mov	r1, r5
 8005526:	4b63      	ldr	r3, [pc, #396]	; (80056b4 <bme280.part.0+0x1dc>)
 8005528:	f001 fad6 	bl	8006ad8 <__aeabi_dcmplt>
 800552c:	2800      	cmp	r0, #0
 800552e:	f000 80b7 	beq.w	80056a0 <bme280.part.0+0x1c8>

		if (temperature != temperatureLast && temperature >= -40 && temperature <= 40) {
 8005532:	f108 09d8 	add.w	r9, r8, #216	; 0xd8
 8005536:	e9d9 8900 	ldrd	r8, r9, [r9]
 800553a:	4630      	mov	r0, r6
 800553c:	4639      	mov	r1, r7
 800553e:	4642      	mov	r2, r8
 8005540:	464b      	mov	r3, r9
 8005542:	f001 fabf 	bl	8006ac4 <__aeabi_dcmpeq>
 8005546:	2800      	cmp	r0, #0
 8005548:	f040 80be 	bne.w	80056c8 <bme280.part.0+0x1f0>
 800554c:	2200      	movs	r2, #0
 800554e:	4630      	mov	r0, r6
 8005550:	4639      	mov	r1, r7
 8005552:	4b59      	ldr	r3, [pc, #356]	; (80056b8 <bme280.part.0+0x1e0>)
 8005554:	f001 faca 	bl	8006aec <__aeabi_dcmple>
 8005558:	2800      	cmp	r0, #0
 800555a:	f000 80b5 	beq.w	80056c8 <bme280.part.0+0x1f0>

			char weatherPrintT[8];

			if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 800555e:	2200      	movs	r2, #0
 8005560:	4640      	mov	r0, r8
 8005562:	4649      	mov	r1, r9
 8005564:	4b55      	ldr	r3, [pc, #340]	; (80056bc <bme280.part.0+0x1e4>)
 8005566:	f001 facb 	bl	8006b00 <__aeabi_dcmpge>
 800556a:	2800      	cmp	r0, #0
 800556c:	f040 82f6 	bne.w	8005b5c <bme280.part.0+0x684>
 8005570:	2200      	movs	r2, #0
 8005572:	2300      	movs	r3, #0
 8005574:	4640      	mov	r0, r8
 8005576:	4649      	mov	r1, r9
 8005578:	f001 faae 	bl	8006ad8 <__aeabi_dcmplt>
 800557c:	2200      	movs	r2, #0
 800557e:	2800      	cmp	r0, #0
 8005580:	f040 831d 	bne.w	8005bbe <bme280.part.0+0x6e6>
				sprintf(weatherPrintT, "%.1f 'C", temperatureLast);
				LCD_Font(3, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
			}
			else if (temperatureLast < 10 && temperatureLast > 0) {
 8005584:	2300      	movs	r3, #0
 8005586:	4640      	mov	r0, r8
 8005588:	4649      	mov	r1, r9
 800558a:	f001 fac3 	bl	8006b14 <__aeabi_dcmpgt>
 800558e:	2800      	cmp	r0, #0
 8005590:	f040 833f 	bne.w	8005c12 <bme280.part.0+0x73a>
				sprintf(weatherPrintT, "%.1f 'C", temperatureLast);
				LCD_Font(29, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
			}
			else if (temperatureLast <= -10) {
 8005594:	2200      	movs	r2, #0
 8005596:	4640      	mov	r0, r8
 8005598:	4649      	mov	r1, r9
 800559a:	4b49      	ldr	r3, [pc, #292]	; (80056c0 <bme280.part.0+0x1e8>)
 800559c:	f001 faa6 	bl	8006aec <__aeabi_dcmple>
 80055a0:	2800      	cmp	r0, #0
 80055a2:	f040 831a 	bne.w	8005bda <bme280.part.0+0x702>
 80055a6:	ac03      	add	r4, sp, #12
				sprintf(weatherPrintT, "%2d", (int8_t)temperatureLast);
				LCD_Font(3, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
			}

			if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 80055a8:	2200      	movs	r2, #0
 80055aa:	4630      	mov	r0, r6
 80055ac:	4639      	mov	r1, r7
 80055ae:	4b43      	ldr	r3, [pc, #268]	; (80056bc <bme280.part.0+0x1e4>)
 80055b0:	f001 faa6 	bl	8006b00 <__aeabi_dcmpge>
 80055b4:	2800      	cmp	r0, #0
 80055b6:	f040 82c1 	bne.w	8005b3c <bme280.part.0+0x664>
 80055ba:	2200      	movs	r2, #0
 80055bc:	2300      	movs	r3, #0
 80055be:	4630      	mov	r0, r6
 80055c0:	4639      	mov	r1, r7
 80055c2:	f001 fa89 	bl	8006ad8 <__aeabi_dcmplt>
 80055c6:	2200      	movs	r2, #0
 80055c8:	2800      	cmp	r0, #0
 80055ca:	f040 82df 	bne.w	8005b8c <bme280.part.0+0x6b4>
				sprintf(weatherPrintT, "%.1f 'C", temperature);
				LCD_Font(3, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
			}
			else if (temperature < 10 && temperature > 0) {
 80055ce:	2300      	movs	r3, #0
 80055d0:	4630      	mov	r0, r6
 80055d2:	4639      	mov	r1, r7
 80055d4:	f001 fa9e 	bl	8006b14 <__aeabi_dcmpgt>
 80055d8:	2800      	cmp	r0, #0
 80055da:	f040 830a 	bne.w	8005bf2 <bme280.part.0+0x71a>
				sprintf(weatherPrintT, "%.1f 'C", temperature);
				LCD_Font(29, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
			}
			else if (temperature <= -10) {
 80055de:	2200      	movs	r2, #0
 80055e0:	4630      	mov	r0, r6
 80055e2:	4639      	mov	r1, r7
 80055e4:	4b36      	ldr	r3, [pc, #216]	; (80056c0 <bme280.part.0+0x1e8>)
 80055e6:	f001 fa81 	bl	8006aec <__aeabi_dcmple>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	f040 82dc 	bne.w	8005ba8 <bme280.part.0+0x6d0>
				sprintf(weatherPrintT, "%2d 'C", (int8_t)temperature);
				LCD_Font(3, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
			}

			temperatureLast = temperature;
 80055f0:	4b2d      	ldr	r3, [pc, #180]	; (80056a8 <bme280.part.0+0x1d0>)
		}

		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 80055f2:	e9d3 8934 	ldrd	r8, r9, [r3, #208]	; 0xd0
			temperatureLast = temperature;
 80055f6:	e9c3 6736 	strd	r6, r7, [r3, #216]	; 0xd8
		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 80055fa:	e9d3 6738 	ldrd	r6, r7, [r3, #224]	; 0xe0
 80055fe:	4640      	mov	r0, r8
 8005600:	4649      	mov	r1, r9
 8005602:	4632      	mov	r2, r6
 8005604:	463b      	mov	r3, r7
 8005606:	f001 fa5d 	bl	8006ac4 <__aeabi_dcmpeq>
 800560a:	2800      	cmp	r0, #0
 800560c:	d168      	bne.n	80056e0 <bme280.part.0+0x208>
 800560e:	2200      	movs	r2, #0
 8005610:	2300      	movs	r3, #0
 8005612:	4640      	mov	r0, r8
 8005614:	4649      	mov	r1, r9
 8005616:	f001 fa73 	bl	8006b00 <__aeabi_dcmpge>
 800561a:	2800      	cmp	r0, #0
 800561c:	d060      	beq.n	80056e0 <bme280.part.0+0x208>
 800561e:	4640      	mov	r0, r8
 8005620:	4649      	mov	r1, r9
 8005622:	2200      	movs	r2, #0
 8005624:	4b23      	ldr	r3, [pc, #140]	; (80056b4 <bme280.part.0+0x1dc>)
 8005626:	f001 fa57 	bl	8006ad8 <__aeabi_dcmplt>
 800562a:	2800      	cmp	r0, #0
 800562c:	d058      	beq.n	80056e0 <bme280.part.0+0x208>

			char weatherPrintH[7];

			sprintf(weatherPrintH, "%.1f %%H", humidityLast);
 800562e:	4632      	mov	r2, r6
 8005630:	463b      	mov	r3, r7
 8005632:	4924      	ldr	r1, [pc, #144]	; (80056c4 <bme280.part.0+0x1ec>)
 8005634:	4620      	mov	r0, r4
 8005636:	f004 f9b5 	bl	80099a4 <siprintf>
			if (humidityLast >= 10)
 800563a:	491b      	ldr	r1, [pc, #108]	; (80056a8 <bme280.part.0+0x1d0>)
 800563c:	2200      	movs	r2, #0
 800563e:	e9d1 0138 	ldrd	r0, r1, [r1, #224]	; 0xe0
 8005642:	4b1e      	ldr	r3, [pc, #120]	; (80056bc <bme280.part.0+0x1e4>)
 8005644:	f001 fa5c 	bl	8006b00 <__aeabi_dcmpge>
				LCD_Font(162, 187, weatherPrintH, &DejaVu_Sans_36, 1, BLACK);
 8005648:	4622      	mov	r2, r4
 800564a:	21bb      	movs	r1, #187	; 0xbb
			if (humidityLast >= 10)
 800564c:	2800      	cmp	r0, #0
 800564e:	f000 8299 	beq.w	8005b84 <bme280.part.0+0x6ac>
				LCD_Font(162, 187, weatherPrintH, &DejaVu_Sans_36, 1, BLACK);
 8005652:	20a2      	movs	r0, #162	; 0xa2
 8005654:	f7fe fd76 	bl	8004144 <LCD_Font.constprop.2>
			else LCD_Font(188, 187, weatherPrintH, &DejaVu_Sans_36, 1, BLACK);

			sprintf(weatherPrintH, "%.1f %%H", humidity);
 8005658:	4b13      	ldr	r3, [pc, #76]	; (80056a8 <bme280.part.0+0x1d0>)
 800565a:	491a      	ldr	r1, [pc, #104]	; (80056c4 <bme280.part.0+0x1ec>)
 800565c:	461d      	mov	r5, r3
 800565e:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8005662:	4620      	mov	r0, r4
 8005664:	f004 f99e 	bl	80099a4 <siprintf>
			if (humidity >= 10)
 8005668:	e9d5 6734 	ldrd	r6, r7, [r5, #208]	; 0xd0
 800566c:	2200      	movs	r2, #0
 800566e:	4639      	mov	r1, r7
 8005670:	4b12      	ldr	r3, [pc, #72]	; (80056bc <bme280.part.0+0x1e4>)
 8005672:	4630      	mov	r0, r6
 8005674:	f001 fa44 	bl	8006b00 <__aeabi_dcmpge>
				LCD_Font(162, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 8005678:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800567c:	4622      	mov	r2, r4
 800567e:	21bb      	movs	r1, #187	; 0xbb
			if (humidity >= 10)
 8005680:	2800      	cmp	r0, #0
 8005682:	f000 827b 	beq.w	8005b7c <bme280.part.0+0x6a4>
				LCD_Font(162, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 8005686:	20a2      	movs	r0, #162	; 0xa2
 8005688:	f7ff fede 	bl	8005448 <LCD_Font.constprop.3>
			else LCD_Font(188, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);

			humidityLast = humidity;
 800568c:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <bme280.part.0+0x1d0>)
 800568e:	e9c3 6738 	strd	r6, r7, [r3, #224]	; 0xe0
 8005692:	e025      	b.n	80056e0 <bme280.part.0+0x208>
			}

			viewGraphs = 0;
		}

		if (!viewGraphs) {
 8005694:	4b04      	ldr	r3, [pc, #16]	; (80056a8 <bme280.part.0+0x1d0>)
 8005696:	f893 34a2 	ldrb.w	r3, [r3, #1186]	; 0x4a2
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 8151 	beq.w	8005942 <bme280.part.0+0x46a>
			}

			viewGraphs = 1;
		}
	}
}
 80056a0:	b007      	add	sp, #28
 80056a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a6:	bf00      	nop
 80056a8:	20000200 	.word	0x20000200
 80056ac:	40554000 	.word	0x40554000
 80056b0:	c0440000 	.word	0xc0440000
 80056b4:	40590000 	.word	0x40590000
 80056b8:	40440000 	.word	0x40440000
 80056bc:	40240000 	.word	0x40240000
 80056c0:	c0240000 	.word	0xc0240000
 80056c4:	0801df4c 	.word	0x0801df4c
		if (humidity != humidityLast && humidity >= 0 && humidity < 100) {
 80056c8:	4bd2      	ldr	r3, [pc, #840]	; (8005a14 <bme280.part.0+0x53c>)
 80056ca:	4620      	mov	r0, r4
 80056cc:	e9d3 6738 	ldrd	r6, r7, [r3, #224]	; 0xe0
 80056d0:	4629      	mov	r1, r5
 80056d2:	4632      	mov	r2, r6
 80056d4:	463b      	mov	r3, r7
 80056d6:	f001 f9f5 	bl	8006ac4 <__aeabi_dcmpeq>
 80056da:	ac03      	add	r4, sp, #12
 80056dc:	2800      	cmp	r0, #0
 80056de:	d0a6      	beq.n	800562e <bme280.part.0+0x156>
		if (pressureLast != pressure) {
 80056e0:	4bcc      	ldr	r3, [pc, #816]	; (8005a14 <bme280.part.0+0x53c>)
 80056e2:	f8b3 20e8 	ldrh.w	r2, [r3, #232]	; 0xe8
 80056e6:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 80056ea:	429a      	cmp	r2, r3
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	d025      	beq.n	800573c <bme280.part.0+0x264>
			if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d HP", pressureLast);
 80056f0:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80056f4:	bf2c      	ite	cs
 80056f6:	49c8      	ldrcs	r1, [pc, #800]	; (8005a18 <bme280.part.0+0x540>)
			else sprintf(weatherPrintP, " %02d HP", pressureLast);
 80056f8:	49c8      	ldrcc	r1, [pc, #800]	; (8005a1c <bme280.part.0+0x544>)
			if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d HP", pressureLast);
 80056fa:	4620      	mov	r0, r4
			else sprintf(weatherPrintP, " %02d HP", pressureLast);
 80056fc:	f004 f952 	bl	80099a4 <siprintf>
			LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_36, 1, BLACK);
 8005700:	21bb      	movs	r1, #187	; 0xbb
 8005702:	4622      	mov	r2, r4
 8005704:	f240 1041 	movw	r0, #321	; 0x141
 8005708:	f7fe fd1c 	bl	8004144 <LCD_Font.constprop.2>
			if (pressure >= 1000) sprintf(weatherPrintP, "%02d HP", pressure);
 800570c:	4bc1      	ldr	r3, [pc, #772]	; (8005a14 <bme280.part.0+0x53c>)
 800570e:	4620      	mov	r0, r4
 8005710:	f8b3 20ea 	ldrh.w	r2, [r3, #234]	; 0xea
 8005714:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005718:	bf2c      	ite	cs
 800571a:	49bf      	ldrcs	r1, [pc, #764]	; (8005a18 <bme280.part.0+0x540>)
			else sprintf(weatherPrintP, " %02d HP", pressure);
 800571c:	49bf      	ldrcc	r1, [pc, #764]	; (8005a1c <bme280.part.0+0x544>)
 800571e:	f004 f941 	bl	80099a4 <siprintf>
			LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_36, 1, GRAY);
 8005722:	4622      	mov	r2, r4
 8005724:	4bbe      	ldr	r3, [pc, #760]	; (8005a20 <bme280.part.0+0x548>)
 8005726:	21bb      	movs	r1, #187	; 0xbb
 8005728:	f240 1041 	movw	r0, #321	; 0x141
 800572c:	f7ff fe8c 	bl	8005448 <LCD_Font.constprop.3>
			pressureLast = pressure;
 8005730:	4bb8      	ldr	r3, [pc, #736]	; (8005a14 <bme280.part.0+0x53c>)
 8005732:	f8b3 20ea 	ldrh.w	r2, [r3, #234]	; 0xea
 8005736:	9200      	str	r2, [sp, #0]
 8005738:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
    uint16_t dt[1] = {0};
 800573c:	2600      	movs	r6, #0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800573e:	4621      	mov	r1, r4
 8005740:	4630      	mov	r0, r6
    uint16_t dt[1] = {0};
 8005742:	f8ad 600c 	strh.w	r6, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8005746:	f7fd fcd5 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
		if (AT24XX_Read(0) != rtcHrs) {
 800574a:	4ab2      	ldr	r2, [pc, #712]	; (8005a14 <bme280.part.0+0x53c>)
    return dt[0];
 800574c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005750:	f892 10ec 	ldrb.w	r1, [r2, #236]	; 0xec
 8005754:	4299      	cmp	r1, r3
 8005756:	d09d      	beq.n	8005694 <bme280.part.0+0x1bc>
			AT24XX_Update(0, rtcHrs);
 8005758:	f102 05ee 	add.w	r5, r2, #238	; 0xee
 800575c:	46a9      	mov	r9, r5
 800575e:	4630      	mov	r0, r6
 8005760:	f7fd ff28 	bl	80035b4 <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8005764:	b2ab      	uxth	r3, r5
 8005766:	f5c3 777a 	rsb	r7, r3, #1000	; 0x3e8
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800576a:	f5c3 7b7a 	rsb	fp, r3, #1000	; 0x3e8
 800576e:	9301      	str	r3, [sp, #4]
 8005770:	b2bf      	uxth	r7, r7
 8005772:	f10b 0b01 	add.w	fp, fp, #1
 8005776:	f505 789d 	add.w	r8, r5, #314	; 0x13a
 800577a:	fa1f fa89 	uxth.w	sl, r9
 800577e:	eb0a 0007 	add.w	r0, sl, r7
 8005782:	4621      	mov	r1, r4
 8005784:	b280      	uxth	r0, r0
    uint16_t dt[1] = {0};
 8005786:	f8ad 600c 	strh.w	r6, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800578a:	f7fd fcb3 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
 800578e:	eb0a 000b 	add.w	r0, sl, fp
 8005792:	4621      	mov	r1, r4
    return dt[0];
 8005794:	f8bd a00c 	ldrh.w	sl, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8005798:	b280      	uxth	r0, r0
    uint16_t dt[1] = {0};
 800579a:	f8ad 600c 	strh.w	r6, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800579e:	f7fd fca9 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 80057a2:	f89d 300c 	ldrb.w	r3, [sp, #12]
	return (byteH << 8) | byteL;
 80057a6:	fa5f fa8a 	uxtb.w	sl, sl
 80057aa:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80057ae:	f829 af02 	strh.w	sl, [r9, #2]!
 80057b2:	45c8      	cmp	r8, r9
 80057b4:	d1e1      	bne.n	800577a <bme280.part.0+0x2a2>
			for (uint16_t i = 1; i < 156; i++) hT[i] = hT[i + 1];
 80057b6:	499b      	ldr	r1, [pc, #620]	; (8005a24 <bme280.part.0+0x54c>)
 80057b8:	9b01      	ldr	r3, [sp, #4]
			hT[155] = (uint16_t) (temperature * 10);
 80057ba:	4e96      	ldr	r6, [pc, #600]	; (8005a14 <bme280.part.0+0x53c>)
			for (uint16_t i = 1; i < 156; i++) hT[i] = hT[i + 1];
 80057bc:	f44f 729b 	mov.w	r2, #310	; 0x136
 80057c0:	1e88      	subs	r0, r1, #2
 80057c2:	f5c3 7979 	rsb	r9, r3, #996	; 0x3e4
 80057c6:	f007 f92d 	bl	800ca24 <memmove>
			hT[155] = (uint16_t) (temperature * 10);
 80057ca:	e9d6 0132 	ldrd	r0, r1, [r6, #200]	; 0xc8
 80057ce:	2200      	movs	r2, #0
 80057d0:	4b95      	ldr	r3, [pc, #596]	; (8005a28 <bme280.part.0+0x550>)
 80057d2:	f000 ff0f 	bl	80065f4 <__aeabi_dmul>
 80057d6:	f001 f9e5 	bl	8006ba4 <__aeabi_d2uiz>
 80057da:	f109 0903 	add.w	r9, r9, #3
 80057de:	f8a6 0226 	strh.w	r0, [r6, #550]	; 0x226
				AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 80057e2:	1978      	adds	r0, r7, r5
 80057e4:	f835 6f02 	ldrh.w	r6, [r5, #2]!
 80057e8:	b280      	uxth	r0, r0
 80057ea:	b2f1      	uxtb	r1, r6
 80057ec:	f7fd fee2 	bl	80035b4 <AT24XX_Update>
				AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 80057f0:	eb09 0005 	add.w	r0, r9, r5
 80057f4:	0a31      	lsrs	r1, r6, #8
 80057f6:	b280      	uxth	r0, r0
 80057f8:	f7fd fedc 	bl	80035b4 <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 80057fc:	45a8      	cmp	r8, r5
 80057fe:	d1f0      	bne.n	80057e2 <bme280.part.0+0x30a>
 8005800:	4d8a      	ldr	r5, [pc, #552]	; (8005a2c <bme280.part.0+0x554>)
    uint16_t dt[1] = {0};
 8005802:	f04f 0800 	mov.w	r8, #0
 8005806:	46a9      	mov	r9, r5
 8005808:	b2ab      	uxth	r3, r5
 800580a:	f5c3 66fa 	rsb	r6, r3, #2000	; 0x7d0
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800580e:	f5c3 6bfa 	rsb	fp, r3, #2000	; 0x7d0
 8005812:	f505 779d 	add.w	r7, r5, #314	; 0x13a
 8005816:	9301      	str	r3, [sp, #4]
 8005818:	b2b6      	uxth	r6, r6
 800581a:	f10b 0b01 	add.w	fp, fp, #1
			for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 800581e:	fa1f fa89 	uxth.w	sl, r9
 8005822:	eb06 000a 	add.w	r0, r6, sl
 8005826:	4621      	mov	r1, r4
 8005828:	b280      	uxth	r0, r0
    uint16_t dt[1] = {0};
 800582a:	f8ad 800c 	strh.w	r8, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800582e:	f7fd fc61 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
 8005832:	eb0a 000b 	add.w	r0, sl, fp
 8005836:	4621      	mov	r1, r4
    return dt[0];
 8005838:	f8bd a00c 	ldrh.w	sl, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800583c:	b280      	uxth	r0, r0
    uint16_t dt[1] = {0};
 800583e:	f8ad 800c 	strh.w	r8, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8005842:	f7fd fc57 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8005846:	f89d 300c 	ldrb.w	r3, [sp, #12]
	return (byteH << 8) | byteL;
 800584a:	fa5f fa8a 	uxtb.w	sl, sl
 800584e:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8005852:	f829 af02 	strh.w	sl, [r9, #2]!
 8005856:	454f      	cmp	r7, r9
 8005858:	d1e1      	bne.n	800581e <bme280.part.0+0x346>
			for (uint16_t i = 1; i < 156; i++) hH[i] = hH[i + 1];
 800585a:	4975      	ldr	r1, [pc, #468]	; (8005a30 <bme280.part.0+0x558>)
 800585c:	9b01      	ldr	r3, [sp, #4]
			hH[155] = (uint16_t) (humidity * 10);
 800585e:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8005a14 <bme280.part.0+0x53c>
			for (uint16_t i = 1; i < 156; i++) hH[i] = hH[i + 1];
 8005862:	f44f 729b 	mov.w	r2, #310	; 0x136
 8005866:	1e88      	subs	r0, r1, #2
 8005868:	f5c3 69f9 	rsb	r9, r3, #1992	; 0x7c8
 800586c:	f007 f8da 	bl	800ca24 <memmove>
			hH[155] = (uint16_t) (humidity * 10);
 8005870:	e9d8 0134 	ldrd	r0, r1, [r8, #208]	; 0xd0
 8005874:	2200      	movs	r2, #0
 8005876:	4b6c      	ldr	r3, [pc, #432]	; (8005a28 <bme280.part.0+0x550>)
 8005878:	f000 febc 	bl	80065f4 <__aeabi_dmul>
 800587c:	f001 f992 	bl	8006ba4 <__aeabi_d2uiz>
 8005880:	f109 0907 	add.w	r9, r9, #7
 8005884:	f8a8 0362 	strh.w	r0, [r8, #866]	; 0x362
				AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 8005888:	1970      	adds	r0, r6, r5
 800588a:	f835 8f02 	ldrh.w	r8, [r5, #2]!
 800588e:	b280      	uxth	r0, r0
 8005890:	fa5f f188 	uxtb.w	r1, r8
 8005894:	f7fd fe8e 	bl	80035b4 <AT24XX_Update>
				AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8005898:	eb09 0005 	add.w	r0, r9, r5
 800589c:	ea4f 2118 	mov.w	r1, r8, lsr #8
 80058a0:	b280      	uxth	r0, r0
 80058a2:	f7fd fe87 	bl	80035b4 <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 80058a6:	42af      	cmp	r7, r5
 80058a8:	d1ee      	bne.n	8005888 <bme280.part.0+0x3b0>
 80058aa:	4d62      	ldr	r5, [pc, #392]	; (8005a34 <bme280.part.0+0x55c>)
    uint16_t dt[1] = {0};
 80058ac:	f04f 0800 	mov.w	r8, #0
 80058b0:	46a9      	mov	r9, r5
 80058b2:	b2ab      	uxth	r3, r5
 80058b4:	f5c3 663b 	rsb	r6, r3, #2992	; 0xbb0
 80058b8:	3608      	adds	r6, #8
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80058ba:	f5c3 6b3b 	rsb	fp, r3, #2992	; 0xbb0
 80058be:	f505 779d 	add.w	r7, r5, #314	; 0x13a
 80058c2:	9301      	str	r3, [sp, #4]
 80058c4:	b2b6      	uxth	r6, r6
 80058c6:	f10b 0b09 	add.w	fp, fp, #9
			for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 80058ca:	fa1f fa89 	uxth.w	sl, r9
 80058ce:	eb06 000a 	add.w	r0, r6, sl
 80058d2:	4621      	mov	r1, r4
 80058d4:	b280      	uxth	r0, r0
    uint16_t dt[1] = {0};
 80058d6:	f8ad 800c 	strh.w	r8, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80058da:	f7fd fc0b 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
 80058de:	eb0a 000b 	add.w	r0, sl, fp
 80058e2:	4621      	mov	r1, r4
    return dt[0];
 80058e4:	f8bd a00c 	ldrh.w	sl, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80058e8:	b280      	uxth	r0, r0
    uint16_t dt[1] = {0};
 80058ea:	f8ad 800c 	strh.w	r8, [sp, #12]
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80058ee:	f7fd fc01 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 80058f2:	f89d 300c 	ldrb.w	r3, [sp, #12]
	return (byteH << 8) | byteL;
 80058f6:	fa5f fa8a 	uxtb.w	sl, sl
 80058fa:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 80058fe:	f829 af02 	strh.w	sl, [r9, #2]!
 8005902:	454f      	cmp	r7, r9
 8005904:	d1e1      	bne.n	80058ca <bme280.part.0+0x3f2>
			for (uint16_t i = 1; i < 156; i++) hP[i] = hP[i + 1];
 8005906:	494c      	ldr	r1, [pc, #304]	; (8005a38 <bme280.part.0+0x560>)
 8005908:	9b01      	ldr	r3, [sp, #4]
 800590a:	f44f 729b 	mov.w	r2, #310	; 0x136
 800590e:	1e88      	subs	r0, r1, #2
 8005910:	f5c3 693b 	rsb	r9, r3, #2992	; 0xbb0
 8005914:	f007 f886 	bl	800ca24 <memmove>
			hP[155] = (uint16_t)pressure;
 8005918:	4b3e      	ldr	r3, [pc, #248]	; (8005a14 <bme280.part.0+0x53c>)
 800591a:	9a00      	ldr	r2, [sp, #0]
 800591c:	f109 0907 	add.w	r9, r9, #7
 8005920:	f8a3 249e 	strh.w	r2, [r3, #1182]	; 0x49e
				AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 8005924:	1970      	adds	r0, r6, r5
 8005926:	f835 4f02 	ldrh.w	r4, [r5, #2]!
 800592a:	b280      	uxth	r0, r0
 800592c:	b2e1      	uxtb	r1, r4
 800592e:	f7fd fe41 	bl	80035b4 <AT24XX_Update>
				AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8005932:	eb09 0005 	add.w	r0, r9, r5
 8005936:	0a21      	lsrs	r1, r4, #8
 8005938:	b280      	uxth	r0, r0
 800593a:	f7fd fe3b 	bl	80035b4 <AT24XX_Update>
			for (uint16_t i = 0; i < 157; i++) {
 800593e:	42af      	cmp	r7, r5
 8005940:	d1f0      	bne.n	8005924 <bme280.part.0+0x44c>
	LCD_Line(x, y, x + w, y, size, color24);
 8005942:	23be      	movs	r3, #190	; 0xbe
 8005944:	229f      	movs	r2, #159	; 0x9f
 8005946:	4619      	mov	r1, r3
 8005948:	2002      	movs	r0, #2
 800594a:	f7fc fd95 	bl	8002478 <LCD_Line.constprop.1>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 800594e:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8005952:	229f      	movs	r2, #159	; 0x9f
 8005954:	4619      	mov	r1, r3
 8005956:	2002      	movs	r0, #2
 8005958:	f7fc fd8e 	bl	8002478 <LCD_Line.constprop.1>
	LCD_Line(x, y, x, y + h, size, color24);
 800595c:	2202      	movs	r2, #2
 800595e:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8005962:	4610      	mov	r0, r2
 8005964:	21be      	movs	r1, #190	; 0xbe
 8005966:	f7fc fd87 	bl	8002478 <LCD_Line.constprop.1>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 800596a:	229f      	movs	r2, #159	; 0x9f
 800596c:	4e33      	ldr	r6, [pc, #204]	; (8005a3c <bme280.part.0+0x564>)
 800596e:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8005972:	21be      	movs	r1, #190	; 0xbe
 8005974:	4610      	mov	r0, r2
 8005976:	2503      	movs	r5, #3
				int16_t val = map(((int16_t)hT[i] / 10), MIN_TEMPERATURE, MAX_TEMPERATURE, 0, 127);
 8005978:	4f31      	ldr	r7, [pc, #196]	; (8005a40 <bme280.part.0+0x568>)
 800597a:	f506 789c 	add.w	r8, r6, #312	; 0x138
 800597e:	f7fc fd7b 	bl	8002478 <LCD_Line.constprop.1>
 8005982:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
				LCD_Line(3 + i, 191, 3 + i, 318, 1, BLACK);
 8005986:	462a      	mov	r2, r5
				int16_t val = map(((int16_t)hT[i] / 10), MIN_TEMPERATURE, MAX_TEMPERATURE, 0, 127);
 8005988:	fb87 3001 	smull	r3, r0, r7, r1
 800598c:	17cb      	asrs	r3, r1, #31
 800598e:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005992:	b29b      	uxth	r3, r3
 8005994:	3b14      	subs	r3, #20
 8005996:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 800599a:	fb87 1003 	smull	r1, r0, r7, r3
 800599e:	17dc      	asrs	r4, r3, #31
 80059a0:	ebc4 04a0 	rsb	r4, r4, r0, asr #2
 80059a4:	b224      	sxth	r4, r4
				LCD_Line(3 + i, 191, 3 + i, 318, 1, BLACK);
 80059a6:	4628      	mov	r0, r5
 80059a8:	2300      	movs	r3, #0
 80059aa:	21bf      	movs	r1, #191	; 0xbf
 80059ac:	f384 0407 	usat	r4, #7, r4
 80059b0:	f7fb fefc 	bl	80017ac <LCD_Line.constprop.0>
				LCD_Line(3 + i, 191 + (127 - val), 3 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 80059b4:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	b2db      	uxtb	r3, r3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 80059bc:	f083 0cff 	eor.w	ip, r3, #255	; 0xff
 80059c0:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 80059c4:	462a      	mov	r2, r5
 80059c6:	4628      	mov	r0, r5
 80059c8:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 80059cc:	b289      	uxth	r1, r1
 80059ce:	f7fb feed 	bl	80017ac <LCD_Line.constprop.0>
			for (uint16_t i = 0; i < 156 ; i++) {
 80059d2:	3501      	adds	r5, #1
 80059d4:	4546      	cmp	r6, r8
 80059d6:	b2ad      	uxth	r5, r5
 80059d8:	d1d3      	bne.n	8005982 <bme280.part.0+0x4aa>
	LCD_Line(x, y, x + w, y, size, color24);
 80059da:	23be      	movs	r3, #190	; 0xbe
 80059dc:	f44f 729f 	mov.w	r2, #318	; 0x13e
 80059e0:	4619      	mov	r1, r3
 80059e2:	20a1      	movs	r0, #161	; 0xa1
 80059e4:	f7fc fd48 	bl	8002478 <LCD_Line.constprop.1>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 80059e8:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80059ec:	20a1      	movs	r0, #161	; 0xa1
 80059ee:	461a      	mov	r2, r3
 80059f0:	4619      	mov	r1, r3
 80059f2:	f7fc fd41 	bl	8002478 <LCD_Line.constprop.1>
	LCD_Line(x, y, x, y + h, size, color24);
 80059f6:	22a1      	movs	r2, #161	; 0xa1
 80059f8:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80059fc:	4610      	mov	r0, r2
 80059fe:	21be      	movs	r1, #190	; 0xbe
 8005a00:	f7fc fd3a 	bl	8002478 <LCD_Line.constprop.1>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8005a04:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8005a08:	4e08      	ldr	r6, [pc, #32]	; (8005a2c <bme280.part.0+0x554>)
 8005a0a:	21be      	movs	r1, #190	; 0xbe
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	4618      	mov	r0, r3
 8005a10:	25a2      	movs	r5, #162	; 0xa2
 8005a12:	e017      	b.n	8005a44 <bme280.part.0+0x56c>
 8005a14:	20000200 	.word	0x20000200
 8005a18:	0801df58 	.word	0x0801df58
 8005a1c:	0801df60 	.word	0x0801df60
 8005a20:	007f7f7f 	.word	0x007f7f7f
 8005a24:	200002f4 	.word	0x200002f4
 8005a28:	40240000 	.word	0x40240000
 8005a2c:	2000042a 	.word	0x2000042a
 8005a30:	20000430 	.word	0x20000430
 8005a34:	20000566 	.word	0x20000566
 8005a38:	2000056c 	.word	0x2000056c
 8005a3c:	200002ee 	.word	0x200002ee
 8005a40:	66666667 	.word	0x66666667
				int16_t val = map(((int16_t)hH[i] / 10), MIN_HUMIDITY, MAX_HUMIDITY, 0, 127);
 8005a44:	4f7b      	ldr	r7, [pc, #492]	; (8005c34 <bme280.part.0+0x75c>)
 8005a46:	f506 789c 	add.w	r8, r6, #312	; 0x138
 8005a4a:	f7fc fd15 	bl	8002478 <LCD_Line.constprop.1>
 8005a4e:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
				LCD_Line(162 + i, 191, 162 + i, 318, 1, BLACK);
 8005a52:	462a      	mov	r2, r5
				int16_t val = map(((int16_t)hH[i] / 10), MIN_HUMIDITY, MAX_HUMIDITY, 0, 127);
 8005a54:	fb87 3001 	smull	r3, r0, r7, r1
 8005a58:	17cb      	asrs	r3, r1, #31
 8005a5a:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3b0a      	subs	r3, #10
 8005a62:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 8005a66:	fb87 1003 	smull	r1, r0, r7, r3
 8005a6a:	17dc      	asrs	r4, r3, #31
 8005a6c:	ebc4 1460 	rsb	r4, r4, r0, asr #5
 8005a70:	b224      	sxth	r4, r4
				LCD_Line(162 + i, 191, 162 + i, 318, 1, BLACK);
 8005a72:	4628      	mov	r0, r5
 8005a74:	2300      	movs	r3, #0
 8005a76:	21bf      	movs	r1, #191	; 0xbf
 8005a78:	f384 0407 	usat	r4, #7, r4
 8005a7c:	f7fb fe96 	bl	80017ac <LCD_Line.constprop.0>
				LCD_Line(162 + i, 191 + (127 - val), 162 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 8005a80:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	b2db      	uxtb	r3, r3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8005a88:	f083 0cff 	eor.w	ip, r3, #255	; 0xff
 8005a8c:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 8005a90:	462a      	mov	r2, r5
 8005a92:	4628      	mov	r0, r5
 8005a94:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 8005a98:	b289      	uxth	r1, r1
 8005a9a:	f7fb fe87 	bl	80017ac <LCD_Line.constprop.0>
			for (uint16_t i = 0; i < 156 ; i++) {
 8005a9e:	3501      	adds	r5, #1
 8005aa0:	4546      	cmp	r6, r8
 8005aa2:	b2ad      	uxth	r5, r5
 8005aa4:	d1d3      	bne.n	8005a4e <bme280.part.0+0x576>
	LCD_Line(x, y, x + w, y, size, color24);
 8005aa6:	23be      	movs	r3, #190	; 0xbe
 8005aa8:	f240 12dd 	movw	r2, #477	; 0x1dd
 8005aac:	4619      	mov	r1, r3
 8005aae:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8005ab2:	f7fc fce1 	bl	8002478 <LCD_Line.constprop.1>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8005ab6:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8005aba:	f240 12dd 	movw	r2, #477	; 0x1dd
 8005abe:	4619      	mov	r1, r3
 8005ac0:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8005ac4:	f7fc fcd8 	bl	8002478 <LCD_Line.constprop.1>
	LCD_Line(x, y, x, y + h, size, color24);
 8005ac8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005acc:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	21be      	movs	r1, #190	; 0xbe
 8005ad4:	f7fc fcd0 	bl	8002478 <LCD_Line.constprop.1>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8005ad8:	f240 12dd 	movw	r2, #477	; 0x1dd
 8005adc:	4e56      	ldr	r6, [pc, #344]	; (8005c38 <bme280.part.0+0x760>)
 8005ade:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8005ae2:	21be      	movs	r1, #190	; 0xbe
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	f44f 75a1 	mov.w	r5, #322	; 0x142
 8005aea:	f506 779c 	add.w	r7, r6, #312	; 0x138
 8005aee:	f7fc fcc3 	bl	8002478 <LCD_Line.constprop.1>
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005af2:	f836 4f02 	ldrh.w	r4, [r6, #2]!
				LCD_Line(322 + i, 191, 322 + i, 318, 1, BLACK);
 8005af6:	462a      	mov	r2, r5
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005af8:	f5a4 7466 	sub.w	r4, r4, #920	; 0x398
 8005afc:	b224      	sxth	r4, r4
				LCD_Line(322 + i, 191, 322 + i, 318, 1, BLACK);
 8005afe:	4628      	mov	r0, r5
 8005b00:	2300      	movs	r3, #0
 8005b02:	21bf      	movs	r1, #191	; 0xbf
 8005b04:	f384 0407 	usat	r4, #7, r4
 8005b08:	f7fb fe50 	bl	80017ac <LCD_Line.constprop.0>
				LCD_Line(322 + i, 191 + (127 - val), 322 + i, 318, 1, RGB(255 - ((127 - val) * 2), 0, 255 - (255 - ((127 - val) * 2))));
 8005b0c:	f1c4 037f 	rsb	r3, r4, #127	; 0x7f
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	b2db      	uxtb	r3, r3
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8005b14:	f083 0cff 	eor.w	ip, r3, #255	; 0xff
 8005b18:	f5c4 719f 	rsb	r1, r4, #318	; 0x13e
 8005b1c:	462a      	mov	r2, r5
 8005b1e:	4628      	mov	r0, r5
 8005b20:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 8005b24:	b289      	uxth	r1, r1
 8005b26:	f7fb fe41 	bl	80017ac <LCD_Line.constprop.0>
			for (uint16_t i = 0; i < 156 ; i++) {
 8005b2a:	3501      	adds	r5, #1
 8005b2c:	42be      	cmp	r6, r7
 8005b2e:	b2ad      	uxth	r5, r5
 8005b30:	d1df      	bne.n	8005af2 <bme280.part.0+0x61a>
			viewGraphs = 1;
 8005b32:	2301      	movs	r3, #1
 8005b34:	4a41      	ldr	r2, [pc, #260]	; (8005c3c <bme280.part.0+0x764>)
 8005b36:	f882 34a2 	strb.w	r3, [r2, #1186]	; 0x4a2
}
 8005b3a:	e5b1      	b.n	80056a0 <bme280.part.0+0x1c8>
				sprintf(weatherPrintT, "%.1f 'C", temperature);
 8005b3c:	4632      	mov	r2, r6
 8005b3e:	463b      	mov	r3, r7
 8005b40:	4620      	mov	r0, r4
 8005b42:	493f      	ldr	r1, [pc, #252]	; (8005c40 <bme280.part.0+0x768>)
 8005b44:	f003 ff2e 	bl	80099a4 <siprintf>
				LCD_Font(3, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
 8005b48:	4b3e      	ldr	r3, [pc, #248]	; (8005c44 <bme280.part.0+0x76c>)
 8005b4a:	4622      	mov	r2, r4
 8005b4c:	21bb      	movs	r1, #187	; 0xbb
 8005b4e:	2003      	movs	r0, #3
 8005b50:	f7ff fc7a 	bl	8005448 <LCD_Font.constprop.3>
			temperatureLast = temperature;
 8005b54:	4b39      	ldr	r3, [pc, #228]	; (8005c3c <bme280.part.0+0x764>)
 8005b56:	e9d3 6732 	ldrd	r6, r7, [r3, #200]	; 0xc8
 8005b5a:	e549      	b.n	80055f0 <bme280.part.0+0x118>
				sprintf(weatherPrintT, "%.1f 'C", temperatureLast);
 8005b5c:	ac03      	add	r4, sp, #12
 8005b5e:	4642      	mov	r2, r8
 8005b60:	464b      	mov	r3, r9
 8005b62:	4620      	mov	r0, r4
 8005b64:	4936      	ldr	r1, [pc, #216]	; (8005c40 <bme280.part.0+0x768>)
 8005b66:	f003 ff1d 	bl	80099a4 <siprintf>
				LCD_Font(3, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
 8005b6a:	4622      	mov	r2, r4
 8005b6c:	21bb      	movs	r1, #187	; 0xbb
 8005b6e:	2003      	movs	r0, #3
 8005b70:	f7fe fae8 	bl	8004144 <LCD_Font.constprop.2>
			if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8005b74:	4b31      	ldr	r3, [pc, #196]	; (8005c3c <bme280.part.0+0x764>)
 8005b76:	e9d3 6732 	ldrd	r6, r7, [r3, #200]	; 0xc8
 8005b7a:	e515      	b.n	80055a8 <bme280.part.0+0xd0>
			else LCD_Font(188, 187, weatherPrintH, &DejaVu_Sans_36, 1, CYAN);
 8005b7c:	20bc      	movs	r0, #188	; 0xbc
 8005b7e:	f7ff fc63 	bl	8005448 <LCD_Font.constprop.3>
 8005b82:	e583      	b.n	800568c <bme280.part.0+0x1b4>
			else LCD_Font(188, 187, weatherPrintH, &DejaVu_Sans_36, 1, BLACK);
 8005b84:	20bc      	movs	r0, #188	; 0xbc
 8005b86:	f7fe fadd 	bl	8004144 <LCD_Font.constprop.2>
 8005b8a:	e565      	b.n	8005658 <bme280.part.0+0x180>
			if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	4639      	mov	r1, r7
 8005b90:	4b2d      	ldr	r3, [pc, #180]	; (8005c48 <bme280.part.0+0x770>)
 8005b92:	f000 ffbf 	bl	8006b14 <__aeabi_dcmpgt>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	d1d0      	bne.n	8005b3c <bme280.part.0+0x664>
			else if (temperature < 10 && temperature > 0) {
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	4639      	mov	r1, r7
 8005ba2:	f000 ffb7 	bl	8006b14 <__aeabi_dcmpgt>
 8005ba6:	bb20      	cbnz	r0, 8005bf2 <bme280.part.0+0x71a>
				sprintf(weatherPrintT, "%2d 'C", (int8_t)temperature);
 8005ba8:	4639      	mov	r1, r7
 8005baa:	4630      	mov	r0, r6
 8005bac:	f000 ffd2 	bl	8006b54 <__aeabi_d2iz>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	4926      	ldr	r1, [pc, #152]	; (8005c4c <bme280.part.0+0x774>)
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	b252      	sxtb	r2, r2
 8005bb8:	f003 fef4 	bl	80099a4 <siprintf>
 8005bbc:	e7c4      	b.n	8005b48 <bme280.part.0+0x670>
			if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	4649      	mov	r1, r9
 8005bc2:	4b21      	ldr	r3, [pc, #132]	; (8005c48 <bme280.part.0+0x770>)
 8005bc4:	f000 ffa6 	bl	8006b14 <__aeabi_dcmpgt>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d1c7      	bne.n	8005b5c <bme280.part.0+0x684>
			else if (temperatureLast < 10 && temperatureLast > 0) {
 8005bcc:	2200      	movs	r2, #0
 8005bce:	2300      	movs	r3, #0
 8005bd0:	4640      	mov	r0, r8
 8005bd2:	4649      	mov	r1, r9
 8005bd4:	f000 ff9e 	bl	8006b14 <__aeabi_dcmpgt>
 8005bd8:	b9d8      	cbnz	r0, 8005c12 <bme280.part.0+0x73a>
				sprintf(weatherPrintT, "%2d", (int8_t)temperatureLast);
 8005bda:	4649      	mov	r1, r9
 8005bdc:	4640      	mov	r0, r8
 8005bde:	f000 ffb9 	bl	8006b54 <__aeabi_d2iz>
 8005be2:	4602      	mov	r2, r0
 8005be4:	ac03      	add	r4, sp, #12
 8005be6:	4620      	mov	r0, r4
 8005be8:	4919      	ldr	r1, [pc, #100]	; (8005c50 <bme280.part.0+0x778>)
 8005bea:	b252      	sxtb	r2, r2
 8005bec:	f003 feda 	bl	80099a4 <siprintf>
 8005bf0:	e7bb      	b.n	8005b6a <bme280.part.0+0x692>
				sprintf(weatherPrintT, "%.1f 'C", temperature);
 8005bf2:	4632      	mov	r2, r6
 8005bf4:	463b      	mov	r3, r7
 8005bf6:	4912      	ldr	r1, [pc, #72]	; (8005c40 <bme280.part.0+0x768>)
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f003 fed3 	bl	80099a4 <siprintf>
				LCD_Font(29, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
 8005bfe:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <bme280.part.0+0x76c>)
 8005c00:	4622      	mov	r2, r4
 8005c02:	21bb      	movs	r1, #187	; 0xbb
 8005c04:	201d      	movs	r0, #29
 8005c06:	f7ff fc1f 	bl	8005448 <LCD_Font.constprop.3>
			temperatureLast = temperature;
 8005c0a:	4b0c      	ldr	r3, [pc, #48]	; (8005c3c <bme280.part.0+0x764>)
 8005c0c:	e9d3 6732 	ldrd	r6, r7, [r3, #200]	; 0xc8
				LCD_Font(29, 187, weatherPrintT, &DejaVu_Sans_36, 1, ORANGE);
 8005c10:	e4ee      	b.n	80055f0 <bme280.part.0+0x118>
				sprintf(weatherPrintT, "%.1f 'C", temperatureLast);
 8005c12:	ac03      	add	r4, sp, #12
 8005c14:	464b      	mov	r3, r9
 8005c16:	4642      	mov	r2, r8
 8005c18:	4909      	ldr	r1, [pc, #36]	; (8005c40 <bme280.part.0+0x768>)
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	f003 fec2 	bl	80099a4 <siprintf>
				LCD_Font(29, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
 8005c20:	4622      	mov	r2, r4
 8005c22:	21bb      	movs	r1, #187	; 0xbb
 8005c24:	201d      	movs	r0, #29
 8005c26:	f7fe fa8d 	bl	8004144 <LCD_Font.constprop.2>
			if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8005c2a:	4b04      	ldr	r3, [pc, #16]	; (8005c3c <bme280.part.0+0x764>)
 8005c2c:	e9d3 6732 	ldrd	r6, r7, [r3, #200]	; 0xc8
				LCD_Font(29, 187, weatherPrintT, &DejaVu_Sans_36, 1, BLACK);
 8005c30:	e4ba      	b.n	80055a8 <bme280.part.0+0xd0>
 8005c32:	bf00      	nop
 8005c34:	66666667 	.word	0x66666667
 8005c38:	20000566 	.word	0x20000566
 8005c3c:	20000200 	.word	0x20000200
 8005c40:	0801df38 	.word	0x0801df38
 8005c44:	00ffa500 	.word	0x00ffa500
 8005c48:	c0240000 	.word	0xc0240000
 8005c4c:	0801df44 	.word	0x0801df44
 8005c50:	0801df40 	.word	0x0801df40

08005c54 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005c54:	e7fe      	b.n	8005c54 <NMI_Handler>
 8005c56:	bf00      	nop

08005c58 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c58:	e7fe      	b.n	8005c58 <HardFault_Handler>
 8005c5a:	bf00      	nop

08005c5c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c5c:	e7fe      	b.n	8005c5c <MemManage_Handler>
 8005c5e:	bf00      	nop

08005c60 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c60:	e7fe      	b.n	8005c60 <BusFault_Handler>
 8005c62:	bf00      	nop

08005c64 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c64:	e7fe      	b.n	8005c64 <UsageFault_Handler>
 8005c66:	bf00      	nop

08005c68 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop

08005c6c <DebugMon_Handler>:
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop

08005c70 <PendSV_Handler>:
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop

08005c74 <SysTick_Handler>:
  uwTick += uwTickFreq;
 8005c74:	4a02      	ldr	r2, [pc, #8]	; (8005c80 <SysTick_Handler+0xc>)
 8005c76:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005c78:	3301      	adds	r3, #1
 8005c7a:	6553      	str	r3, [r2, #84]	; 0x54
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	20000200 	.word	0x20000200

08005c84 <DMA1_Channel4_IRQHandler>:
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005c84:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005c86:	4b4d      	ldr	r3, [pc, #308]	; (8005dbc <DMA1_Channel4_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005c88:	b470      	push	{r4, r5, r6}
 8005c8a:	f8d3 6568 	ldr.w	r6, [r3, #1384]	; 0x568
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005c8e:	f8d3 056c 	ldr.w	r0, [r3, #1388]	; 0x56c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005c92:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005c94:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005c98:	4081      	lsls	r1, r0
 8005c9a:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005c9c:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005c9e:	d01f      	beq.n	8005ce0 <DMA1_Channel4_IRQHandler+0x5c>
 8005ca0:	0769      	lsls	r1, r5, #29
 8005ca2:	d51d      	bpl.n	8005ce0 <DMA1_Channel4_IRQHandler+0x5c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ca4:	6811      	ldr	r1, [r2, #0]
 8005ca6:	0688      	lsls	r0, r1, #26
 8005ca8:	d403      	bmi.n	8005cb2 <DMA1_Channel4_IRQHandler+0x2e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005caa:	6811      	ldr	r1, [r2, #0]
 8005cac:	f021 0104 	bic.w	r1, r1, #4
 8005cb0:	6011      	str	r1, [r2, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005cb2:	4943      	ldr	r1, [pc, #268]	; (8005dc0 <DMA1_Channel4_IRQHandler+0x13c>)
 8005cb4:	428a      	cmp	r2, r1
 8005cb6:	d060      	beq.n	8005d7a <DMA1_Channel4_IRQHandler+0xf6>
 8005cb8:	3114      	adds	r1, #20
 8005cba:	428a      	cmp	r2, r1
 8005cbc:	d067      	beq.n	8005d8e <DMA1_Channel4_IRQHandler+0x10a>
 8005cbe:	3114      	adds	r1, #20
 8005cc0:	428a      	cmp	r2, r1
 8005cc2:	d06e      	beq.n	8005da2 <DMA1_Channel4_IRQHandler+0x11e>
 8005cc4:	3114      	adds	r1, #20
 8005cc6:	428a      	cmp	r2, r1
 8005cc8:	d071      	beq.n	8005dae <DMA1_Channel4_IRQHandler+0x12a>
 8005cca:	3114      	adds	r1, #20
 8005ccc:	428a      	cmp	r2, r1
 8005cce:	d063      	beq.n	8005d98 <DMA1_Channel4_IRQHandler+0x114>
 8005cd0:	3114      	adds	r1, #20
 8005cd2:	428a      	cmp	r2, r1
 8005cd4:	bf0c      	ite	eq
 8005cd6:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8005cda:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8005cde:	e04d      	b.n	8005d7c <DMA1_Channel4_IRQHandler+0xf8>
      hdma->XferHalfCpltCallback(hdma);
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005ce0:	2102      	movs	r1, #2
 8005ce2:	4081      	lsls	r1, r0
 8005ce4:	4221      	tst	r1, r4
 8005ce6:	d022      	beq.n	8005d2e <DMA1_Channel4_IRQHandler+0xaa>
 8005ce8:	07a9      	lsls	r1, r5, #30
 8005cea:	d520      	bpl.n	8005d2e <DMA1_Channel4_IRQHandler+0xaa>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005cec:	6811      	ldr	r1, [r2, #0]
 8005cee:	0688      	lsls	r0, r1, #26
 8005cf0:	d406      	bmi.n	8005d00 <DMA1_Channel4_IRQHandler+0x7c>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cf2:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005cf4:	6811      	ldr	r1, [r2, #0]
 8005cf6:	f021 010a 	bic.w	r1, r1, #10
 8005cfa:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005cfc:	f883 054d 	strb.w	r0, [r3, #1357]	; 0x54d
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005d00:	492f      	ldr	r1, [pc, #188]	; (8005dc0 <DMA1_Channel4_IRQHandler+0x13c>)
 8005d02:	428a      	cmp	r2, r1
 8005d04:	d02d      	beq.n	8005d62 <DMA1_Channel4_IRQHandler+0xde>
 8005d06:	3114      	adds	r1, #20
 8005d08:	428a      	cmp	r2, r1
 8005d0a:	d048      	beq.n	8005d9e <DMA1_Channel4_IRQHandler+0x11a>
 8005d0c:	3114      	adds	r1, #20
 8005d0e:	428a      	cmp	r2, r1
 8005d10:	d04a      	beq.n	8005da8 <DMA1_Channel4_IRQHandler+0x124>
 8005d12:	3114      	adds	r1, #20
 8005d14:	428a      	cmp	r2, r1
 8005d16:	d03c      	beq.n	8005d92 <DMA1_Channel4_IRQHandler+0x10e>
 8005d18:	3114      	adds	r1, #20
 8005d1a:	428a      	cmp	r2, r1
 8005d1c:	d04a      	beq.n	8005db4 <DMA1_Channel4_IRQHandler+0x130>
 8005d1e:	3114      	adds	r1, #20
 8005d20:	428a      	cmp	r2, r1
 8005d22:	bf0c      	ite	eq
 8005d24:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8005d28:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8005d2c:	e01a      	b.n	8005d64 <DMA1_Channel4_IRQHandler+0xe0>
      hdma->XferCpltCallback(hdma);
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005d2e:	2108      	movs	r1, #8
 8005d30:	4081      	lsls	r1, r0
 8005d32:	4221      	tst	r1, r4
 8005d34:	d01f      	beq.n	8005d76 <DMA1_Channel4_IRQHandler+0xf2>
 8005d36:	0729      	lsls	r1, r5, #28
 8005d38:	d51d      	bpl.n	8005d76 <DMA1_Channel4_IRQHandler+0xf2>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d3a:	6811      	ldr	r1, [r2, #0]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d3c:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d40:	f021 010e 	bic.w	r1, r1, #14
 8005d44:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005d46:	2201      	movs	r2, #1

    if (hdma->XferErrorCallback != NULL)
 8005d48:	f8d3 155c 	ldr.w	r1, [r3, #1372]	; 0x55c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005d4c:	fa02 f000 	lsl.w	r0, r2, r0
 8005d50:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005d52:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
    __HAL_UNLOCK(hdma);
 8005d56:	f8a3 454c 	strh.w	r4, [r3, #1356]	; 0x54c
    if (hdma->XferErrorCallback != NULL)
 8005d5a:	b161      	cbz	r1, 8005d76 <DMA1_Channel4_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005d5c:	bc70      	pop	{r4, r5, r6}
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d5e:	4819      	ldr	r0, [pc, #100]	; (8005dc4 <DMA1_Channel4_IRQHandler+0x140>)
 8005d60:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005d62:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8005d64:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005d66:	4c18      	ldr	r4, [pc, #96]	; (8005dc8 <DMA1_Channel4_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8005d68:	f8d3 1554 	ldr.w	r1, [r3, #1364]	; 0x554
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005d6c:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8005d6e:	f883 054c 	strb.w	r0, [r3, #1356]	; 0x54c
    if(hdma->XferCpltCallback != NULL)
 8005d72:	2900      	cmp	r1, #0
 8005d74:	d1f2      	bne.n	8005d5c <DMA1_Channel4_IRQHandler+0xd8>
 8005d76:	bc70      	pop	{r4, r5, r6}
 8005d78:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005d7a:	2204      	movs	r2, #4
 8005d7c:	4912      	ldr	r1, [pc, #72]	; (8005dc8 <DMA1_Channel4_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 8005d7e:	f8d3 3558 	ldr.w	r3, [r3, #1368]	; 0x558
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005d82:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0f6      	beq.n	8005d76 <DMA1_Channel4_IRQHandler+0xf2>
 8005d88:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 8005d8a:	480e      	ldr	r0, [pc, #56]	; (8005dc4 <DMA1_Channel4_IRQHandler+0x140>)
 8005d8c:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005d8e:	2240      	movs	r2, #64	; 0x40
 8005d90:	e7f4      	b.n	8005d7c <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d96:	e7e5      	b.n	8005d64 <DMA1_Channel4_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005d98:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005d9c:	e7ee      	b.n	8005d7c <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005d9e:	2220      	movs	r2, #32
 8005da0:	e7e0      	b.n	8005d64 <DMA1_Channel4_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005da2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005da6:	e7e9      	b.n	8005d7c <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dac:	e7da      	b.n	8005d64 <DMA1_Channel4_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005dae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005db2:	e7e3      	b.n	8005d7c <DMA1_Channel4_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005db4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005db8:	e7d4      	b.n	8005d64 <DMA1_Channel4_IRQHandler+0xe0>
 8005dba:	bf00      	nop
 8005dbc:	20000200 	.word	0x20000200
 8005dc0:	40020008 	.word	0x40020008
 8005dc4:	2000072c 	.word	0x2000072c
 8005dc8:	40020000 	.word	0x40020000

08005dcc <DMA1_Channel5_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005dcc:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005dce:	4b4d      	ldr	r3, [pc, #308]	; (8005f04 <DMA1_Channel5_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005dd0:	b470      	push	{r4, r5, r6}
 8005dd2:	f8d3 65ac 	ldr.w	r6, [r3, #1452]	; 0x5ac
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005dd6:	f8d3 05b0 	ldr.w	r0, [r3, #1456]	; 0x5b0
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005dda:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005ddc:	f8d3 2570 	ldr.w	r2, [r3, #1392]	; 0x570
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005de0:	4081      	lsls	r1, r0
 8005de2:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005de4:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005de6:	d01f      	beq.n	8005e28 <DMA1_Channel5_IRQHandler+0x5c>
 8005de8:	0769      	lsls	r1, r5, #29
 8005dea:	d51d      	bpl.n	8005e28 <DMA1_Channel5_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005dec:	6811      	ldr	r1, [r2, #0]
 8005dee:	0688      	lsls	r0, r1, #26
 8005df0:	d403      	bmi.n	8005dfa <DMA1_Channel5_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005df2:	6811      	ldr	r1, [r2, #0]
 8005df4:	f021 0104 	bic.w	r1, r1, #4
 8005df8:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005dfa:	4943      	ldr	r1, [pc, #268]	; (8005f08 <DMA1_Channel5_IRQHandler+0x13c>)
 8005dfc:	428a      	cmp	r2, r1
 8005dfe:	d060      	beq.n	8005ec2 <DMA1_Channel5_IRQHandler+0xf6>
 8005e00:	3114      	adds	r1, #20
 8005e02:	428a      	cmp	r2, r1
 8005e04:	d067      	beq.n	8005ed6 <DMA1_Channel5_IRQHandler+0x10a>
 8005e06:	3114      	adds	r1, #20
 8005e08:	428a      	cmp	r2, r1
 8005e0a:	d06e      	beq.n	8005eea <DMA1_Channel5_IRQHandler+0x11e>
 8005e0c:	3114      	adds	r1, #20
 8005e0e:	428a      	cmp	r2, r1
 8005e10:	d071      	beq.n	8005ef6 <DMA1_Channel5_IRQHandler+0x12a>
 8005e12:	3114      	adds	r1, #20
 8005e14:	428a      	cmp	r2, r1
 8005e16:	d063      	beq.n	8005ee0 <DMA1_Channel5_IRQHandler+0x114>
 8005e18:	3114      	adds	r1, #20
 8005e1a:	428a      	cmp	r2, r1
 8005e1c:	bf0c      	ite	eq
 8005e1e:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8005e22:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8005e26:	e04d      	b.n	8005ec4 <DMA1_Channel5_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005e28:	2102      	movs	r1, #2
 8005e2a:	4081      	lsls	r1, r0
 8005e2c:	4221      	tst	r1, r4
 8005e2e:	d022      	beq.n	8005e76 <DMA1_Channel5_IRQHandler+0xaa>
 8005e30:	07a9      	lsls	r1, r5, #30
 8005e32:	d520      	bpl.n	8005e76 <DMA1_Channel5_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e34:	6811      	ldr	r1, [r2, #0]
 8005e36:	0688      	lsls	r0, r1, #26
 8005e38:	d406      	bmi.n	8005e48 <DMA1_Channel5_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 8005e3a:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005e3c:	6811      	ldr	r1, [r2, #0]
 8005e3e:	f021 010a 	bic.w	r1, r1, #10
 8005e42:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005e44:	f883 0591 	strb.w	r0, [r3, #1425]	; 0x591
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005e48:	492f      	ldr	r1, [pc, #188]	; (8005f08 <DMA1_Channel5_IRQHandler+0x13c>)
 8005e4a:	428a      	cmp	r2, r1
 8005e4c:	d02d      	beq.n	8005eaa <DMA1_Channel5_IRQHandler+0xde>
 8005e4e:	3114      	adds	r1, #20
 8005e50:	428a      	cmp	r2, r1
 8005e52:	d048      	beq.n	8005ee6 <DMA1_Channel5_IRQHandler+0x11a>
 8005e54:	3114      	adds	r1, #20
 8005e56:	428a      	cmp	r2, r1
 8005e58:	d04a      	beq.n	8005ef0 <DMA1_Channel5_IRQHandler+0x124>
 8005e5a:	3114      	adds	r1, #20
 8005e5c:	428a      	cmp	r2, r1
 8005e5e:	d03c      	beq.n	8005eda <DMA1_Channel5_IRQHandler+0x10e>
 8005e60:	3114      	adds	r1, #20
 8005e62:	428a      	cmp	r2, r1
 8005e64:	d04a      	beq.n	8005efc <DMA1_Channel5_IRQHandler+0x130>
 8005e66:	3114      	adds	r1, #20
 8005e68:	428a      	cmp	r2, r1
 8005e6a:	bf0c      	ite	eq
 8005e6c:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8005e70:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8005e74:	e01a      	b.n	8005eac <DMA1_Channel5_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005e76:	2108      	movs	r1, #8
 8005e78:	4081      	lsls	r1, r0
 8005e7a:	4221      	tst	r1, r4
 8005e7c:	d01f      	beq.n	8005ebe <DMA1_Channel5_IRQHandler+0xf2>
 8005e7e:	0729      	lsls	r1, r5, #28
 8005e80:	d51d      	bpl.n	8005ebe <DMA1_Channel5_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e82:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 8005e84:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e88:	f021 010e 	bic.w	r1, r1, #14
 8005e8c:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005e8e:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8005e90:	f8d3 15a0 	ldr.w	r1, [r3, #1440]	; 0x5a0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005e94:	fa02 f000 	lsl.w	r0, r2, r0
 8005e98:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e9a:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
    __HAL_UNLOCK(hdma);
 8005e9e:	f8a3 4590 	strh.w	r4, [r3, #1424]	; 0x590
    if (hdma->XferErrorCallback != NULL)
 8005ea2:	b161      	cbz	r1, 8005ebe <DMA1_Channel5_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005ea4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005ea6:	4819      	ldr	r0, [pc, #100]	; (8005f0c <DMA1_Channel5_IRQHandler+0x140>)
 8005ea8:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005eaa:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8005eac:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005eae:	4c18      	ldr	r4, [pc, #96]	; (8005f10 <DMA1_Channel5_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8005eb0:	f8d3 1598 	ldr.w	r1, [r3, #1432]	; 0x598
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005eb4:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8005eb6:	f883 0590 	strb.w	r0, [r3, #1424]	; 0x590
    if(hdma->XferCpltCallback != NULL)
 8005eba:	2900      	cmp	r1, #0
 8005ebc:	d1f2      	bne.n	8005ea4 <DMA1_Channel5_IRQHandler+0xd8>
 8005ebe:	bc70      	pop	{r4, r5, r6}
 8005ec0:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005ec2:	2204      	movs	r2, #4
 8005ec4:	4912      	ldr	r1, [pc, #72]	; (8005f10 <DMA1_Channel5_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 8005ec6:	f8d3 359c 	ldr.w	r3, [r3, #1436]	; 0x59c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005eca:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d0f6      	beq.n	8005ebe <DMA1_Channel5_IRQHandler+0xf2>
 8005ed0:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 8005ed2:	480e      	ldr	r0, [pc, #56]	; (8005f0c <DMA1_Channel5_IRQHandler+0x140>)
 8005ed4:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005ed6:	2240      	movs	r2, #64	; 0x40
 8005ed8:	e7f4      	b.n	8005ec4 <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005eda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ede:	e7e5      	b.n	8005eac <DMA1_Channel5_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005ee0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005ee4:	e7ee      	b.n	8005ec4 <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	e7e0      	b.n	8005eac <DMA1_Channel5_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005eea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005eee:	e7e9      	b.n	8005ec4 <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ef4:	e7da      	b.n	8005eac <DMA1_Channel5_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005ef6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005efa:	e7e3      	b.n	8005ec4 <DMA1_Channel5_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005efc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f00:	e7d4      	b.n	8005eac <DMA1_Channel5_IRQHandler+0xe0>
 8005f02:	bf00      	nop
 8005f04:	20000200 	.word	0x20000200
 8005f08:	40020008 	.word	0x40020008
 8005f0c:	20000770 	.word	0x20000770
 8005f10:	40020000 	.word	0x40020000

08005f14 <DMA1_Channel6_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005f14:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005f16:	4b4d      	ldr	r3, [pc, #308]	; (800604c <DMA1_Channel6_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005f18:	b470      	push	{r4, r5, r6}
 8005f1a:	f8d3 64e0 	ldr.w	r6, [r3, #1248]	; 0x4e0
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005f1e:	f8d3 04e4 	ldr.w	r0, [r3, #1252]	; 0x4e4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005f22:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005f24:	f8d3 24a4 	ldr.w	r2, [r3, #1188]	; 0x4a4
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005f28:	4081      	lsls	r1, r0
 8005f2a:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005f2c:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005f2e:	d01f      	beq.n	8005f70 <DMA1_Channel6_IRQHandler+0x5c>
 8005f30:	0769      	lsls	r1, r5, #29
 8005f32:	d51d      	bpl.n	8005f70 <DMA1_Channel6_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f34:	6811      	ldr	r1, [r2, #0]
 8005f36:	0688      	lsls	r0, r1, #26
 8005f38:	d403      	bmi.n	8005f42 <DMA1_Channel6_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f3a:	6811      	ldr	r1, [r2, #0]
 8005f3c:	f021 0104 	bic.w	r1, r1, #4
 8005f40:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005f42:	4943      	ldr	r1, [pc, #268]	; (8006050 <DMA1_Channel6_IRQHandler+0x13c>)
 8005f44:	428a      	cmp	r2, r1
 8005f46:	d060      	beq.n	800600a <DMA1_Channel6_IRQHandler+0xf6>
 8005f48:	3114      	adds	r1, #20
 8005f4a:	428a      	cmp	r2, r1
 8005f4c:	d067      	beq.n	800601e <DMA1_Channel6_IRQHandler+0x10a>
 8005f4e:	3114      	adds	r1, #20
 8005f50:	428a      	cmp	r2, r1
 8005f52:	d06e      	beq.n	8006032 <DMA1_Channel6_IRQHandler+0x11e>
 8005f54:	3114      	adds	r1, #20
 8005f56:	428a      	cmp	r2, r1
 8005f58:	d071      	beq.n	800603e <DMA1_Channel6_IRQHandler+0x12a>
 8005f5a:	3114      	adds	r1, #20
 8005f5c:	428a      	cmp	r2, r1
 8005f5e:	d063      	beq.n	8006028 <DMA1_Channel6_IRQHandler+0x114>
 8005f60:	3114      	adds	r1, #20
 8005f62:	428a      	cmp	r2, r1
 8005f64:	bf0c      	ite	eq
 8005f66:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 8005f6a:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8005f6e:	e04d      	b.n	800600c <DMA1_Channel6_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005f70:	2102      	movs	r1, #2
 8005f72:	4081      	lsls	r1, r0
 8005f74:	4221      	tst	r1, r4
 8005f76:	d022      	beq.n	8005fbe <DMA1_Channel6_IRQHandler+0xaa>
 8005f78:	07a9      	lsls	r1, r5, #30
 8005f7a:	d520      	bpl.n	8005fbe <DMA1_Channel6_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f7c:	6811      	ldr	r1, [r2, #0]
 8005f7e:	0688      	lsls	r0, r1, #26
 8005f80:	d406      	bmi.n	8005f90 <DMA1_Channel6_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 8005f82:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005f84:	6811      	ldr	r1, [r2, #0]
 8005f86:	f021 010a 	bic.w	r1, r1, #10
 8005f8a:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005f8c:	f883 04c5 	strb.w	r0, [r3, #1221]	; 0x4c5
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005f90:	492f      	ldr	r1, [pc, #188]	; (8006050 <DMA1_Channel6_IRQHandler+0x13c>)
 8005f92:	428a      	cmp	r2, r1
 8005f94:	d02d      	beq.n	8005ff2 <DMA1_Channel6_IRQHandler+0xde>
 8005f96:	3114      	adds	r1, #20
 8005f98:	428a      	cmp	r2, r1
 8005f9a:	d048      	beq.n	800602e <DMA1_Channel6_IRQHandler+0x11a>
 8005f9c:	3114      	adds	r1, #20
 8005f9e:	428a      	cmp	r2, r1
 8005fa0:	d04a      	beq.n	8006038 <DMA1_Channel6_IRQHandler+0x124>
 8005fa2:	3114      	adds	r1, #20
 8005fa4:	428a      	cmp	r2, r1
 8005fa6:	d03c      	beq.n	8006022 <DMA1_Channel6_IRQHandler+0x10e>
 8005fa8:	3114      	adds	r1, #20
 8005faa:	428a      	cmp	r2, r1
 8005fac:	d04a      	beq.n	8006044 <DMA1_Channel6_IRQHandler+0x130>
 8005fae:	3114      	adds	r1, #20
 8005fb0:	428a      	cmp	r2, r1
 8005fb2:	bf0c      	ite	eq
 8005fb4:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8005fb8:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8005fbc:	e01a      	b.n	8005ff4 <DMA1_Channel6_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005fbe:	2108      	movs	r1, #8
 8005fc0:	4081      	lsls	r1, r0
 8005fc2:	4221      	tst	r1, r4
 8005fc4:	d01f      	beq.n	8006006 <DMA1_Channel6_IRQHandler+0xf2>
 8005fc6:	0729      	lsls	r1, r5, #28
 8005fc8:	d51d      	bpl.n	8006006 <DMA1_Channel6_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fca:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 8005fcc:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fd0:	f021 010e 	bic.w	r1, r1, #14
 8005fd4:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005fd6:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8005fd8:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	; 0x4d4
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005fdc:	fa02 f000 	lsl.w	r0, r2, r0
 8005fe0:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fe2:	f8c3 24dc 	str.w	r2, [r3, #1244]	; 0x4dc
    __HAL_UNLOCK(hdma);
 8005fe6:	f8a3 44c4 	strh.w	r4, [r3, #1220]	; 0x4c4
    if (hdma->XferErrorCallback != NULL)
 8005fea:	b161      	cbz	r1, 8006006 <DMA1_Channel6_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005fec:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005fee:	4819      	ldr	r0, [pc, #100]	; (8006054 <DMA1_Channel6_IRQHandler+0x140>)
 8005ff0:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ff2:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8005ff4:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ff6:	4c18      	ldr	r4, [pc, #96]	; (8006058 <DMA1_Channel6_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8005ff8:	f8d3 14cc 	ldr.w	r1, [r3, #1228]	; 0x4cc
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ffc:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8005ffe:	f883 04c4 	strb.w	r0, [r3, #1220]	; 0x4c4
    if(hdma->XferCpltCallback != NULL)
 8006002:	2900      	cmp	r1, #0
 8006004:	d1f2      	bne.n	8005fec <DMA1_Channel6_IRQHandler+0xd8>
 8006006:	bc70      	pop	{r4, r5, r6}
 8006008:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800600a:	2204      	movs	r2, #4
 800600c:	4912      	ldr	r1, [pc, #72]	; (8006058 <DMA1_Channel6_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 800600e:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006012:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8006014:	2b00      	cmp	r3, #0
 8006016:	d0f6      	beq.n	8006006 <DMA1_Channel6_IRQHandler+0xf2>
 8006018:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 800601a:	480e      	ldr	r0, [pc, #56]	; (8006054 <DMA1_Channel6_IRQHandler+0x140>)
 800601c:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800601e:	2240      	movs	r2, #64	; 0x40
 8006020:	e7f4      	b.n	800600c <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006022:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006026:	e7e5      	b.n	8005ff4 <DMA1_Channel6_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006028:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800602c:	e7ee      	b.n	800600c <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800602e:	2220      	movs	r2, #32
 8006030:	e7e0      	b.n	8005ff4 <DMA1_Channel6_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006032:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006036:	e7e9      	b.n	800600c <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800603c:	e7da      	b.n	8005ff4 <DMA1_Channel6_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800603e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006042:	e7e3      	b.n	800600c <DMA1_Channel6_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006044:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006048:	e7d4      	b.n	8005ff4 <DMA1_Channel6_IRQHandler+0xe0>
 800604a:	bf00      	nop
 800604c:	20000200 	.word	0x20000200
 8006050:	40020008 	.word	0x40020008
 8006054:	200006a4 	.word	0x200006a4
 8006058:	40020000 	.word	0x40020000

0800605c <DMA1_Channel7_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800605c:	2104      	movs	r1, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800605e:	4b4d      	ldr	r3, [pc, #308]	; (8006194 <DMA1_Channel7_IRQHandler+0x138>)

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8006060:	b470      	push	{r4, r5, r6}
 8006062:	f8d3 6524 	ldr.w	r6, [r3, #1316]	; 0x524
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006066:	f8d3 0528 	ldr.w	r0, [r3, #1320]	; 0x528
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800606a:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800606c:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006070:	4081      	lsls	r1, r0
 8006072:	4221      	tst	r1, r4
  uint32_t source_it = hdma->Instance->CCR;
 8006074:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006076:	d01f      	beq.n	80060b8 <DMA1_Channel7_IRQHandler+0x5c>
 8006078:	0769      	lsls	r1, r5, #29
 800607a:	d51d      	bpl.n	80060b8 <DMA1_Channel7_IRQHandler+0x5c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800607c:	6811      	ldr	r1, [r2, #0]
 800607e:	0688      	lsls	r0, r1, #26
 8006080:	d403      	bmi.n	800608a <DMA1_Channel7_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006082:	6811      	ldr	r1, [r2, #0]
 8006084:	f021 0104 	bic.w	r1, r1, #4
 8006088:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800608a:	4943      	ldr	r1, [pc, #268]	; (8006198 <DMA1_Channel7_IRQHandler+0x13c>)
 800608c:	428a      	cmp	r2, r1
 800608e:	d060      	beq.n	8006152 <DMA1_Channel7_IRQHandler+0xf6>
 8006090:	3114      	adds	r1, #20
 8006092:	428a      	cmp	r2, r1
 8006094:	d067      	beq.n	8006166 <DMA1_Channel7_IRQHandler+0x10a>
 8006096:	3114      	adds	r1, #20
 8006098:	428a      	cmp	r2, r1
 800609a:	d06e      	beq.n	800617a <DMA1_Channel7_IRQHandler+0x11e>
 800609c:	3114      	adds	r1, #20
 800609e:	428a      	cmp	r2, r1
 80060a0:	d071      	beq.n	8006186 <DMA1_Channel7_IRQHandler+0x12a>
 80060a2:	3114      	adds	r1, #20
 80060a4:	428a      	cmp	r2, r1
 80060a6:	d063      	beq.n	8006170 <DMA1_Channel7_IRQHandler+0x114>
 80060a8:	3114      	adds	r1, #20
 80060aa:	428a      	cmp	r2, r1
 80060ac:	bf0c      	ite	eq
 80060ae:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 80060b2:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 80060b6:	e04d      	b.n	8006154 <DMA1_Channel7_IRQHandler+0xf8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80060b8:	2102      	movs	r1, #2
 80060ba:	4081      	lsls	r1, r0
 80060bc:	4221      	tst	r1, r4
 80060be:	d022      	beq.n	8006106 <DMA1_Channel7_IRQHandler+0xaa>
 80060c0:	07a9      	lsls	r1, r5, #30
 80060c2:	d520      	bpl.n	8006106 <DMA1_Channel7_IRQHandler+0xaa>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060c4:	6811      	ldr	r1, [r2, #0]
 80060c6:	0688      	lsls	r0, r1, #26
 80060c8:	d406      	bmi.n	80060d8 <DMA1_Channel7_IRQHandler+0x7c>
      hdma->State = HAL_DMA_STATE_READY;
 80060ca:	2001      	movs	r0, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80060cc:	6811      	ldr	r1, [r2, #0]
 80060ce:	f021 010a 	bic.w	r1, r1, #10
 80060d2:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80060d4:	f883 0509 	strb.w	r0, [r3, #1289]	; 0x509
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80060d8:	492f      	ldr	r1, [pc, #188]	; (8006198 <DMA1_Channel7_IRQHandler+0x13c>)
 80060da:	428a      	cmp	r2, r1
 80060dc:	d02d      	beq.n	800613a <DMA1_Channel7_IRQHandler+0xde>
 80060de:	3114      	adds	r1, #20
 80060e0:	428a      	cmp	r2, r1
 80060e2:	d048      	beq.n	8006176 <DMA1_Channel7_IRQHandler+0x11a>
 80060e4:	3114      	adds	r1, #20
 80060e6:	428a      	cmp	r2, r1
 80060e8:	d04a      	beq.n	8006180 <DMA1_Channel7_IRQHandler+0x124>
 80060ea:	3114      	adds	r1, #20
 80060ec:	428a      	cmp	r2, r1
 80060ee:	d03c      	beq.n	800616a <DMA1_Channel7_IRQHandler+0x10e>
 80060f0:	3114      	adds	r1, #20
 80060f2:	428a      	cmp	r2, r1
 80060f4:	d04a      	beq.n	800618c <DMA1_Channel7_IRQHandler+0x130>
 80060f6:	3114      	adds	r1, #20
 80060f8:	428a      	cmp	r2, r1
 80060fa:	bf0c      	ite	eq
 80060fc:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8006100:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8006104:	e01a      	b.n	800613c <DMA1_Channel7_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006106:	2108      	movs	r1, #8
 8006108:	4081      	lsls	r1, r0
 800610a:	4221      	tst	r1, r4
 800610c:	d01f      	beq.n	800614e <DMA1_Channel7_IRQHandler+0xf2>
 800610e:	0729      	lsls	r1, r5, #28
 8006110:	d51d      	bpl.n	800614e <DMA1_Channel7_IRQHandler+0xf2>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006112:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(hdma);
 8006114:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006118:	f021 010e 	bic.w	r1, r1, #14
 800611c:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800611e:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8006120:	f8d3 1518 	ldr.w	r1, [r3, #1304]	; 0x518
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006124:	fa02 f000 	lsl.w	r0, r2, r0
 8006128:	6070      	str	r0, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800612a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    __HAL_UNLOCK(hdma);
 800612e:	f8a3 4508 	strh.w	r4, [r3, #1288]	; 0x508
    if (hdma->XferErrorCallback != NULL)
 8006132:	b161      	cbz	r1, 800614e <DMA1_Channel7_IRQHandler+0xf2>
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8006134:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8006136:	4819      	ldr	r0, [pc, #100]	; (800619c <DMA1_Channel7_IRQHandler+0x140>)
 8006138:	4708      	bx	r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800613a:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 800613c:	2000      	movs	r0, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800613e:	4c18      	ldr	r4, [pc, #96]	; (80061a0 <DMA1_Channel7_IRQHandler+0x144>)
    if(hdma->XferCpltCallback != NULL)
 8006140:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006144:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8006146:	f883 0508 	strb.w	r0, [r3, #1288]	; 0x508
    if(hdma->XferCpltCallback != NULL)
 800614a:	2900      	cmp	r1, #0
 800614c:	d1f2      	bne.n	8006134 <DMA1_Channel7_IRQHandler+0xd8>
 800614e:	bc70      	pop	{r4, r5, r6}
 8006150:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006152:	2204      	movs	r2, #4
 8006154:	4912      	ldr	r1, [pc, #72]	; (80061a0 <DMA1_Channel7_IRQHandler+0x144>)
    if(hdma->XferHalfCpltCallback != NULL)
 8006156:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800615a:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0f6      	beq.n	800614e <DMA1_Channel7_IRQHandler+0xf2>
 8006160:	bc70      	pop	{r4, r5, r6}
      hdma->XferHalfCpltCallback(hdma);
 8006162:	480e      	ldr	r0, [pc, #56]	; (800619c <DMA1_Channel7_IRQHandler+0x140>)
 8006164:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006166:	2240      	movs	r2, #64	; 0x40
 8006168:	e7f4      	b.n	8006154 <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800616a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800616e:	e7e5      	b.n	800613c <DMA1_Channel7_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006170:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006174:	e7ee      	b.n	8006154 <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006176:	2220      	movs	r2, #32
 8006178:	e7e0      	b.n	800613c <DMA1_Channel7_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800617a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800617e:	e7e9      	b.n	8006154 <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006184:	e7da      	b.n	800613c <DMA1_Channel7_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006186:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800618a:	e7e3      	b.n	8006154 <DMA1_Channel7_IRQHandler+0xf8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800618c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006190:	e7d4      	b.n	800613c <DMA1_Channel7_IRQHandler+0xe0>
 8006192:	bf00      	nop
 8006194:	20000200 	.word	0x20000200
 8006198:	40020008 	.word	0x40020008
 800619c:	200006e8 	.word	0x200006e8
 80061a0:	40020000 	.word	0x40020000

080061a4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80061a4:	2001      	movs	r0, #1
 80061a6:	4770      	bx	lr

080061a8 <_kill>:

int _kill(int pid, int sig)
{
 80061a8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80061aa:	f002 fd57 	bl	8008c5c <__errno>
 80061ae:	2216      	movs	r2, #22
 80061b0:	4603      	mov	r3, r0
	return -1;
}
 80061b2:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 80061b6:	601a      	str	r2, [r3, #0]
}
 80061b8:	bd08      	pop	{r3, pc}
 80061ba:	bf00      	nop

080061bc <_exit>:

void _exit (int status)
{
 80061bc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80061be:	f002 fd4d 	bl	8008c5c <__errno>
 80061c2:	2316      	movs	r3, #22
 80061c4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80061c6:	e7fe      	b.n	80061c6 <_exit+0xa>

080061c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80061c8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061ca:	1e16      	subs	r6, r2, #0
 80061cc:	dd07      	ble.n	80061de <_read+0x16>
 80061ce:	460c      	mov	r4, r1
 80061d0:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80061d2:	f3af 8000 	nop.w
 80061d6:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061da:	42a5      	cmp	r5, r4
 80061dc:	d1f9      	bne.n	80061d2 <_read+0xa>
	}

return len;
}
 80061de:	4630      	mov	r0, r6
 80061e0:	bd70      	pop	{r4, r5, r6, pc}
 80061e2:	bf00      	nop

080061e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80061e4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061e6:	1e16      	subs	r6, r2, #0
 80061e8:	dd07      	ble.n	80061fa <_write+0x16>
 80061ea:	460c      	mov	r4, r1
 80061ec:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80061ee:	f814 0b01 	ldrb.w	r0, [r4], #1
 80061f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061f6:	42ac      	cmp	r4, r5
 80061f8:	d1f9      	bne.n	80061ee <_write+0xa>
	}
	return len;
}
 80061fa:	4630      	mov	r0, r6
 80061fc:	bd70      	pop	{r4, r5, r6, pc}
 80061fe:	bf00      	nop

08006200 <_close>:

int _close(int file)
{
	return -1;
}
 8006200:	f04f 30ff 	mov.w	r0, #4294967295
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop

08006208 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8006208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800620c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800620e:	604b      	str	r3, [r1, #4]
}
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop

08006214 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8006214:	2001      	movs	r0, #1
 8006216:	4770      	bx	lr

08006218 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8006218:	2000      	movs	r0, #0
 800621a:	4770      	bx	lr

0800621c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800621c:	490e      	ldr	r1, [pc, #56]	; (8006258 <_sbrk+0x3c>)
{
 800621e:	4603      	mov	r3, r0
 8006220:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006222:	4a0e      	ldr	r2, [pc, #56]	; (800625c <_sbrk+0x40>)
 8006224:	4c0e      	ldr	r4, [pc, #56]	; (8006260 <_sbrk+0x44>)
  if (NULL == __sbrk_heap_end)
 8006226:	f8d1 06e8 	ldr.w	r0, [r1, #1768]	; 0x6e8
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800622a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800622c:	b128      	cbz	r0, 800623a <_sbrk+0x1e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800622e:	4403      	add	r3, r0
 8006230:	4293      	cmp	r3, r2
 8006232:	d809      	bhi.n	8006248 <_sbrk+0x2c>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8006234:	f8c1 36e8 	str.w	r3, [r1, #1768]	; 0x6e8

  return (void *)prev_heap_end;
}
 8006238:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800623a:	4c0a      	ldr	r4, [pc, #40]	; (8006264 <_sbrk+0x48>)
 800623c:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 800623e:	4403      	add	r3, r0
 8006240:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8006242:	f8c1 46e8 	str.w	r4, [r1, #1768]	; 0x6e8
  if (__sbrk_heap_end + incr > max_heap)
 8006246:	d9f5      	bls.n	8006234 <_sbrk+0x18>
    errno = ENOMEM;
 8006248:	f002 fd08 	bl	8008c5c <__errno>
 800624c:	220c      	movs	r2, #12
 800624e:	4603      	mov	r3, r0
 8006250:	f04f 30ff 	mov.w	r0, #4294967295
 8006254:	601a      	str	r2, [r3, #0]
}
 8006256:	bd10      	pop	{r4, pc}
 8006258:	20000200 	.word	0x20000200
 800625c:	20005000 	.word	0x20005000
 8006260:	00000400 	.word	0x00000400
 8006264:	20000900 	.word	0x20000900

08006268 <SystemInit>:
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop

0800626c <strlen>:
 800626c:	4603      	mov	r3, r0
 800626e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006272:	2a00      	cmp	r2, #0
 8006274:	d1fb      	bne.n	800626e <strlen+0x2>
 8006276:	1a18      	subs	r0, r3, r0
 8006278:	3801      	subs	r0, #1
 800627a:	4770      	bx	lr

0800627c <__aeabi_drsub>:
 800627c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006280:	e002      	b.n	8006288 <__adddf3>
 8006282:	bf00      	nop

08006284 <__aeabi_dsub>:
 8006284:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006288 <__adddf3>:
 8006288:	b530      	push	{r4, r5, lr}
 800628a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800628e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006292:	ea94 0f05 	teq	r4, r5
 8006296:	bf08      	it	eq
 8006298:	ea90 0f02 	teqeq	r0, r2
 800629c:	bf1f      	itttt	ne
 800629e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80062a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80062a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80062aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80062ae:	f000 80e2 	beq.w	8006476 <__adddf3+0x1ee>
 80062b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80062b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80062ba:	bfb8      	it	lt
 80062bc:	426d      	neglt	r5, r5
 80062be:	dd0c      	ble.n	80062da <__adddf3+0x52>
 80062c0:	442c      	add	r4, r5
 80062c2:	ea80 0202 	eor.w	r2, r0, r2
 80062c6:	ea81 0303 	eor.w	r3, r1, r3
 80062ca:	ea82 0000 	eor.w	r0, r2, r0
 80062ce:	ea83 0101 	eor.w	r1, r3, r1
 80062d2:	ea80 0202 	eor.w	r2, r0, r2
 80062d6:	ea81 0303 	eor.w	r3, r1, r3
 80062da:	2d36      	cmp	r5, #54	; 0x36
 80062dc:	bf88      	it	hi
 80062de:	bd30      	pophi	{r4, r5, pc}
 80062e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80062e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80062e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80062ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80062f0:	d002      	beq.n	80062f8 <__adddf3+0x70>
 80062f2:	4240      	negs	r0, r0
 80062f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80062f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80062fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006300:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006304:	d002      	beq.n	800630c <__adddf3+0x84>
 8006306:	4252      	negs	r2, r2
 8006308:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800630c:	ea94 0f05 	teq	r4, r5
 8006310:	f000 80a7 	beq.w	8006462 <__adddf3+0x1da>
 8006314:	f1a4 0401 	sub.w	r4, r4, #1
 8006318:	f1d5 0e20 	rsbs	lr, r5, #32
 800631c:	db0d      	blt.n	800633a <__adddf3+0xb2>
 800631e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006322:	fa22 f205 	lsr.w	r2, r2, r5
 8006326:	1880      	adds	r0, r0, r2
 8006328:	f141 0100 	adc.w	r1, r1, #0
 800632c:	fa03 f20e 	lsl.w	r2, r3, lr
 8006330:	1880      	adds	r0, r0, r2
 8006332:	fa43 f305 	asr.w	r3, r3, r5
 8006336:	4159      	adcs	r1, r3
 8006338:	e00e      	b.n	8006358 <__adddf3+0xd0>
 800633a:	f1a5 0520 	sub.w	r5, r5, #32
 800633e:	f10e 0e20 	add.w	lr, lr, #32
 8006342:	2a01      	cmp	r2, #1
 8006344:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006348:	bf28      	it	cs
 800634a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800634e:	fa43 f305 	asr.w	r3, r3, r5
 8006352:	18c0      	adds	r0, r0, r3
 8006354:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006358:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800635c:	d507      	bpl.n	800636e <__adddf3+0xe6>
 800635e:	f04f 0e00 	mov.w	lr, #0
 8006362:	f1dc 0c00 	rsbs	ip, ip, #0
 8006366:	eb7e 0000 	sbcs.w	r0, lr, r0
 800636a:	eb6e 0101 	sbc.w	r1, lr, r1
 800636e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006372:	d31b      	bcc.n	80063ac <__adddf3+0x124>
 8006374:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006378:	d30c      	bcc.n	8006394 <__adddf3+0x10c>
 800637a:	0849      	lsrs	r1, r1, #1
 800637c:	ea5f 0030 	movs.w	r0, r0, rrx
 8006380:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006384:	f104 0401 	add.w	r4, r4, #1
 8006388:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800638c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006390:	f080 809a 	bcs.w	80064c8 <__adddf3+0x240>
 8006394:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006398:	bf08      	it	eq
 800639a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800639e:	f150 0000 	adcs.w	r0, r0, #0
 80063a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80063a6:	ea41 0105 	orr.w	r1, r1, r5
 80063aa:	bd30      	pop	{r4, r5, pc}
 80063ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80063b0:	4140      	adcs	r0, r0
 80063b2:	eb41 0101 	adc.w	r1, r1, r1
 80063b6:	3c01      	subs	r4, #1
 80063b8:	bf28      	it	cs
 80063ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80063be:	d2e9      	bcs.n	8006394 <__adddf3+0x10c>
 80063c0:	f091 0f00 	teq	r1, #0
 80063c4:	bf04      	itt	eq
 80063c6:	4601      	moveq	r1, r0
 80063c8:	2000      	moveq	r0, #0
 80063ca:	fab1 f381 	clz	r3, r1
 80063ce:	bf08      	it	eq
 80063d0:	3320      	addeq	r3, #32
 80063d2:	f1a3 030b 	sub.w	r3, r3, #11
 80063d6:	f1b3 0220 	subs.w	r2, r3, #32
 80063da:	da0c      	bge.n	80063f6 <__adddf3+0x16e>
 80063dc:	320c      	adds	r2, #12
 80063de:	dd08      	ble.n	80063f2 <__adddf3+0x16a>
 80063e0:	f102 0c14 	add.w	ip, r2, #20
 80063e4:	f1c2 020c 	rsb	r2, r2, #12
 80063e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80063ec:	fa21 f102 	lsr.w	r1, r1, r2
 80063f0:	e00c      	b.n	800640c <__adddf3+0x184>
 80063f2:	f102 0214 	add.w	r2, r2, #20
 80063f6:	bfd8      	it	le
 80063f8:	f1c2 0c20 	rsble	ip, r2, #32
 80063fc:	fa01 f102 	lsl.w	r1, r1, r2
 8006400:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006404:	bfdc      	itt	le
 8006406:	ea41 010c 	orrle.w	r1, r1, ip
 800640a:	4090      	lslle	r0, r2
 800640c:	1ae4      	subs	r4, r4, r3
 800640e:	bfa2      	ittt	ge
 8006410:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006414:	4329      	orrge	r1, r5
 8006416:	bd30      	popge	{r4, r5, pc}
 8006418:	ea6f 0404 	mvn.w	r4, r4
 800641c:	3c1f      	subs	r4, #31
 800641e:	da1c      	bge.n	800645a <__adddf3+0x1d2>
 8006420:	340c      	adds	r4, #12
 8006422:	dc0e      	bgt.n	8006442 <__adddf3+0x1ba>
 8006424:	f104 0414 	add.w	r4, r4, #20
 8006428:	f1c4 0220 	rsb	r2, r4, #32
 800642c:	fa20 f004 	lsr.w	r0, r0, r4
 8006430:	fa01 f302 	lsl.w	r3, r1, r2
 8006434:	ea40 0003 	orr.w	r0, r0, r3
 8006438:	fa21 f304 	lsr.w	r3, r1, r4
 800643c:	ea45 0103 	orr.w	r1, r5, r3
 8006440:	bd30      	pop	{r4, r5, pc}
 8006442:	f1c4 040c 	rsb	r4, r4, #12
 8006446:	f1c4 0220 	rsb	r2, r4, #32
 800644a:	fa20 f002 	lsr.w	r0, r0, r2
 800644e:	fa01 f304 	lsl.w	r3, r1, r4
 8006452:	ea40 0003 	orr.w	r0, r0, r3
 8006456:	4629      	mov	r1, r5
 8006458:	bd30      	pop	{r4, r5, pc}
 800645a:	fa21 f004 	lsr.w	r0, r1, r4
 800645e:	4629      	mov	r1, r5
 8006460:	bd30      	pop	{r4, r5, pc}
 8006462:	f094 0f00 	teq	r4, #0
 8006466:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800646a:	bf06      	itte	eq
 800646c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006470:	3401      	addeq	r4, #1
 8006472:	3d01      	subne	r5, #1
 8006474:	e74e      	b.n	8006314 <__adddf3+0x8c>
 8006476:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800647a:	bf18      	it	ne
 800647c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006480:	d029      	beq.n	80064d6 <__adddf3+0x24e>
 8006482:	ea94 0f05 	teq	r4, r5
 8006486:	bf08      	it	eq
 8006488:	ea90 0f02 	teqeq	r0, r2
 800648c:	d005      	beq.n	800649a <__adddf3+0x212>
 800648e:	ea54 0c00 	orrs.w	ip, r4, r0
 8006492:	bf04      	itt	eq
 8006494:	4619      	moveq	r1, r3
 8006496:	4610      	moveq	r0, r2
 8006498:	bd30      	pop	{r4, r5, pc}
 800649a:	ea91 0f03 	teq	r1, r3
 800649e:	bf1e      	ittt	ne
 80064a0:	2100      	movne	r1, #0
 80064a2:	2000      	movne	r0, #0
 80064a4:	bd30      	popne	{r4, r5, pc}
 80064a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80064aa:	d105      	bne.n	80064b8 <__adddf3+0x230>
 80064ac:	0040      	lsls	r0, r0, #1
 80064ae:	4149      	adcs	r1, r1
 80064b0:	bf28      	it	cs
 80064b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80064b6:	bd30      	pop	{r4, r5, pc}
 80064b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80064bc:	bf3c      	itt	cc
 80064be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80064c2:	bd30      	popcc	{r4, r5, pc}
 80064c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80064c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80064cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80064d0:	f04f 0000 	mov.w	r0, #0
 80064d4:	bd30      	pop	{r4, r5, pc}
 80064d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80064da:	bf1a      	itte	ne
 80064dc:	4619      	movne	r1, r3
 80064de:	4610      	movne	r0, r2
 80064e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80064e4:	bf1c      	itt	ne
 80064e6:	460b      	movne	r3, r1
 80064e8:	4602      	movne	r2, r0
 80064ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80064ee:	bf06      	itte	eq
 80064f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80064f4:	ea91 0f03 	teqeq	r1, r3
 80064f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80064fc:	bd30      	pop	{r4, r5, pc}
 80064fe:	bf00      	nop

08006500 <__aeabi_ui2d>:
 8006500:	f090 0f00 	teq	r0, #0
 8006504:	bf04      	itt	eq
 8006506:	2100      	moveq	r1, #0
 8006508:	4770      	bxeq	lr
 800650a:	b530      	push	{r4, r5, lr}
 800650c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006510:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006514:	f04f 0500 	mov.w	r5, #0
 8006518:	f04f 0100 	mov.w	r1, #0
 800651c:	e750      	b.n	80063c0 <__adddf3+0x138>
 800651e:	bf00      	nop

08006520 <__aeabi_i2d>:
 8006520:	f090 0f00 	teq	r0, #0
 8006524:	bf04      	itt	eq
 8006526:	2100      	moveq	r1, #0
 8006528:	4770      	bxeq	lr
 800652a:	b530      	push	{r4, r5, lr}
 800652c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006530:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006534:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006538:	bf48      	it	mi
 800653a:	4240      	negmi	r0, r0
 800653c:	f04f 0100 	mov.w	r1, #0
 8006540:	e73e      	b.n	80063c0 <__adddf3+0x138>
 8006542:	bf00      	nop

08006544 <__aeabi_f2d>:
 8006544:	0042      	lsls	r2, r0, #1
 8006546:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800654a:	ea4f 0131 	mov.w	r1, r1, rrx
 800654e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006552:	bf1f      	itttt	ne
 8006554:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006558:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800655c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006560:	4770      	bxne	lr
 8006562:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8006566:	bf08      	it	eq
 8006568:	4770      	bxeq	lr
 800656a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800656e:	bf04      	itt	eq
 8006570:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8006574:	4770      	bxeq	lr
 8006576:	b530      	push	{r4, r5, lr}
 8006578:	f44f 7460 	mov.w	r4, #896	; 0x380
 800657c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006584:	e71c      	b.n	80063c0 <__adddf3+0x138>
 8006586:	bf00      	nop

08006588 <__aeabi_ul2d>:
 8006588:	ea50 0201 	orrs.w	r2, r0, r1
 800658c:	bf08      	it	eq
 800658e:	4770      	bxeq	lr
 8006590:	b530      	push	{r4, r5, lr}
 8006592:	f04f 0500 	mov.w	r5, #0
 8006596:	e00a      	b.n	80065ae <__aeabi_l2d+0x16>

08006598 <__aeabi_l2d>:
 8006598:	ea50 0201 	orrs.w	r2, r0, r1
 800659c:	bf08      	it	eq
 800659e:	4770      	bxeq	lr
 80065a0:	b530      	push	{r4, r5, lr}
 80065a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80065a6:	d502      	bpl.n	80065ae <__aeabi_l2d+0x16>
 80065a8:	4240      	negs	r0, r0
 80065aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80065ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80065b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80065b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80065ba:	f43f aed8 	beq.w	800636e <__adddf3+0xe6>
 80065be:	f04f 0203 	mov.w	r2, #3
 80065c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80065c6:	bf18      	it	ne
 80065c8:	3203      	addne	r2, #3
 80065ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80065ce:	bf18      	it	ne
 80065d0:	3203      	addne	r2, #3
 80065d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80065d6:	f1c2 0320 	rsb	r3, r2, #32
 80065da:	fa00 fc03 	lsl.w	ip, r0, r3
 80065de:	fa20 f002 	lsr.w	r0, r0, r2
 80065e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80065e6:	ea40 000e 	orr.w	r0, r0, lr
 80065ea:	fa21 f102 	lsr.w	r1, r1, r2
 80065ee:	4414      	add	r4, r2
 80065f0:	e6bd      	b.n	800636e <__adddf3+0xe6>
 80065f2:	bf00      	nop

080065f4 <__aeabi_dmul>:
 80065f4:	b570      	push	{r4, r5, r6, lr}
 80065f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80065fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80065fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006602:	bf1d      	ittte	ne
 8006604:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006608:	ea94 0f0c 	teqne	r4, ip
 800660c:	ea95 0f0c 	teqne	r5, ip
 8006610:	f000 f8de 	bleq	80067d0 <__aeabi_dmul+0x1dc>
 8006614:	442c      	add	r4, r5
 8006616:	ea81 0603 	eor.w	r6, r1, r3
 800661a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800661e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006622:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006626:	bf18      	it	ne
 8006628:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800662c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006630:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006634:	d038      	beq.n	80066a8 <__aeabi_dmul+0xb4>
 8006636:	fba0 ce02 	umull	ip, lr, r0, r2
 800663a:	f04f 0500 	mov.w	r5, #0
 800663e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006642:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8006646:	fbe0 e503 	umlal	lr, r5, r0, r3
 800664a:	f04f 0600 	mov.w	r6, #0
 800664e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006652:	f09c 0f00 	teq	ip, #0
 8006656:	bf18      	it	ne
 8006658:	f04e 0e01 	orrne.w	lr, lr, #1
 800665c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006660:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006664:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006668:	d204      	bcs.n	8006674 <__aeabi_dmul+0x80>
 800666a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800666e:	416d      	adcs	r5, r5
 8006670:	eb46 0606 	adc.w	r6, r6, r6
 8006674:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006678:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800667c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006680:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006684:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006688:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800668c:	bf88      	it	hi
 800668e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006692:	d81e      	bhi.n	80066d2 <__aeabi_dmul+0xde>
 8006694:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006698:	bf08      	it	eq
 800669a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800669e:	f150 0000 	adcs.w	r0, r0, #0
 80066a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80066ac:	ea46 0101 	orr.w	r1, r6, r1
 80066b0:	ea40 0002 	orr.w	r0, r0, r2
 80066b4:	ea81 0103 	eor.w	r1, r1, r3
 80066b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80066bc:	bfc2      	ittt	gt
 80066be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80066c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80066c6:	bd70      	popgt	{r4, r5, r6, pc}
 80066c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80066cc:	f04f 0e00 	mov.w	lr, #0
 80066d0:	3c01      	subs	r4, #1
 80066d2:	f300 80ab 	bgt.w	800682c <__aeabi_dmul+0x238>
 80066d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80066da:	bfde      	ittt	le
 80066dc:	2000      	movle	r0, #0
 80066de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80066e2:	bd70      	pople	{r4, r5, r6, pc}
 80066e4:	f1c4 0400 	rsb	r4, r4, #0
 80066e8:	3c20      	subs	r4, #32
 80066ea:	da35      	bge.n	8006758 <__aeabi_dmul+0x164>
 80066ec:	340c      	adds	r4, #12
 80066ee:	dc1b      	bgt.n	8006728 <__aeabi_dmul+0x134>
 80066f0:	f104 0414 	add.w	r4, r4, #20
 80066f4:	f1c4 0520 	rsb	r5, r4, #32
 80066f8:	fa00 f305 	lsl.w	r3, r0, r5
 80066fc:	fa20 f004 	lsr.w	r0, r0, r4
 8006700:	fa01 f205 	lsl.w	r2, r1, r5
 8006704:	ea40 0002 	orr.w	r0, r0, r2
 8006708:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800670c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006714:	fa21 f604 	lsr.w	r6, r1, r4
 8006718:	eb42 0106 	adc.w	r1, r2, r6
 800671c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006720:	bf08      	it	eq
 8006722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006726:	bd70      	pop	{r4, r5, r6, pc}
 8006728:	f1c4 040c 	rsb	r4, r4, #12
 800672c:	f1c4 0520 	rsb	r5, r4, #32
 8006730:	fa00 f304 	lsl.w	r3, r0, r4
 8006734:	fa20 f005 	lsr.w	r0, r0, r5
 8006738:	fa01 f204 	lsl.w	r2, r1, r4
 800673c:	ea40 0002 	orr.w	r0, r0, r2
 8006740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006748:	f141 0100 	adc.w	r1, r1, #0
 800674c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006750:	bf08      	it	eq
 8006752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006756:	bd70      	pop	{r4, r5, r6, pc}
 8006758:	f1c4 0520 	rsb	r5, r4, #32
 800675c:	fa00 f205 	lsl.w	r2, r0, r5
 8006760:	ea4e 0e02 	orr.w	lr, lr, r2
 8006764:	fa20 f304 	lsr.w	r3, r0, r4
 8006768:	fa01 f205 	lsl.w	r2, r1, r5
 800676c:	ea43 0302 	orr.w	r3, r3, r2
 8006770:	fa21 f004 	lsr.w	r0, r1, r4
 8006774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006778:	fa21 f204 	lsr.w	r2, r1, r4
 800677c:	ea20 0002 	bic.w	r0, r0, r2
 8006780:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006788:	bf08      	it	eq
 800678a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800678e:	bd70      	pop	{r4, r5, r6, pc}
 8006790:	f094 0f00 	teq	r4, #0
 8006794:	d10f      	bne.n	80067b6 <__aeabi_dmul+0x1c2>
 8006796:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800679a:	0040      	lsls	r0, r0, #1
 800679c:	eb41 0101 	adc.w	r1, r1, r1
 80067a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80067a4:	bf08      	it	eq
 80067a6:	3c01      	subeq	r4, #1
 80067a8:	d0f7      	beq.n	800679a <__aeabi_dmul+0x1a6>
 80067aa:	ea41 0106 	orr.w	r1, r1, r6
 80067ae:	f095 0f00 	teq	r5, #0
 80067b2:	bf18      	it	ne
 80067b4:	4770      	bxne	lr
 80067b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80067ba:	0052      	lsls	r2, r2, #1
 80067bc:	eb43 0303 	adc.w	r3, r3, r3
 80067c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80067c4:	bf08      	it	eq
 80067c6:	3d01      	subeq	r5, #1
 80067c8:	d0f7      	beq.n	80067ba <__aeabi_dmul+0x1c6>
 80067ca:	ea43 0306 	orr.w	r3, r3, r6
 80067ce:	4770      	bx	lr
 80067d0:	ea94 0f0c 	teq	r4, ip
 80067d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80067d8:	bf18      	it	ne
 80067da:	ea95 0f0c 	teqne	r5, ip
 80067de:	d00c      	beq.n	80067fa <__aeabi_dmul+0x206>
 80067e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80067e4:	bf18      	it	ne
 80067e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80067ea:	d1d1      	bne.n	8006790 <__aeabi_dmul+0x19c>
 80067ec:	ea81 0103 	eor.w	r1, r1, r3
 80067f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80067f4:	f04f 0000 	mov.w	r0, #0
 80067f8:	bd70      	pop	{r4, r5, r6, pc}
 80067fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80067fe:	bf06      	itte	eq
 8006800:	4610      	moveq	r0, r2
 8006802:	4619      	moveq	r1, r3
 8006804:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006808:	d019      	beq.n	800683e <__aeabi_dmul+0x24a>
 800680a:	ea94 0f0c 	teq	r4, ip
 800680e:	d102      	bne.n	8006816 <__aeabi_dmul+0x222>
 8006810:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006814:	d113      	bne.n	800683e <__aeabi_dmul+0x24a>
 8006816:	ea95 0f0c 	teq	r5, ip
 800681a:	d105      	bne.n	8006828 <__aeabi_dmul+0x234>
 800681c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006820:	bf1c      	itt	ne
 8006822:	4610      	movne	r0, r2
 8006824:	4619      	movne	r1, r3
 8006826:	d10a      	bne.n	800683e <__aeabi_dmul+0x24a>
 8006828:	ea81 0103 	eor.w	r1, r1, r3
 800682c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006830:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006834:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006838:	f04f 0000 	mov.w	r0, #0
 800683c:	bd70      	pop	{r4, r5, r6, pc}
 800683e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006842:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8006846:	bd70      	pop	{r4, r5, r6, pc}

08006848 <__aeabi_ddiv>:
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800684e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006852:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006856:	bf1d      	ittte	ne
 8006858:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800685c:	ea94 0f0c 	teqne	r4, ip
 8006860:	ea95 0f0c 	teqne	r5, ip
 8006864:	f000 f8a7 	bleq	80069b6 <__aeabi_ddiv+0x16e>
 8006868:	eba4 0405 	sub.w	r4, r4, r5
 800686c:	ea81 0e03 	eor.w	lr, r1, r3
 8006870:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006874:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006878:	f000 8088 	beq.w	800698c <__aeabi_ddiv+0x144>
 800687c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006880:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006884:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006888:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800688c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006890:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006894:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006898:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800689c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80068a0:	429d      	cmp	r5, r3
 80068a2:	bf08      	it	eq
 80068a4:	4296      	cmpeq	r6, r2
 80068a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80068aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80068ae:	d202      	bcs.n	80068b6 <__aeabi_ddiv+0x6e>
 80068b0:	085b      	lsrs	r3, r3, #1
 80068b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80068b6:	1ab6      	subs	r6, r6, r2
 80068b8:	eb65 0503 	sbc.w	r5, r5, r3
 80068bc:	085b      	lsrs	r3, r3, #1
 80068be:	ea4f 0232 	mov.w	r2, r2, rrx
 80068c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80068c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80068ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80068ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80068d2:	bf22      	ittt	cs
 80068d4:	1ab6      	subcs	r6, r6, r2
 80068d6:	4675      	movcs	r5, lr
 80068d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80068dc:	085b      	lsrs	r3, r3, #1
 80068de:	ea4f 0232 	mov.w	r2, r2, rrx
 80068e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80068e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80068ea:	bf22      	ittt	cs
 80068ec:	1ab6      	subcs	r6, r6, r2
 80068ee:	4675      	movcs	r5, lr
 80068f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80068f4:	085b      	lsrs	r3, r3, #1
 80068f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80068fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80068fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006902:	bf22      	ittt	cs
 8006904:	1ab6      	subcs	r6, r6, r2
 8006906:	4675      	movcs	r5, lr
 8006908:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800690c:	085b      	lsrs	r3, r3, #1
 800690e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006912:	ebb6 0e02 	subs.w	lr, r6, r2
 8006916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800691a:	bf22      	ittt	cs
 800691c:	1ab6      	subcs	r6, r6, r2
 800691e:	4675      	movcs	r5, lr
 8006920:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006924:	ea55 0e06 	orrs.w	lr, r5, r6
 8006928:	d018      	beq.n	800695c <__aeabi_ddiv+0x114>
 800692a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800692e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006932:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006936:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800693a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800693e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006942:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006946:	d1c0      	bne.n	80068ca <__aeabi_ddiv+0x82>
 8006948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800694c:	d10b      	bne.n	8006966 <__aeabi_ddiv+0x11e>
 800694e:	ea41 0100 	orr.w	r1, r1, r0
 8006952:	f04f 0000 	mov.w	r0, #0
 8006956:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800695a:	e7b6      	b.n	80068ca <__aeabi_ddiv+0x82>
 800695c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006960:	bf04      	itt	eq
 8006962:	4301      	orreq	r1, r0
 8006964:	2000      	moveq	r0, #0
 8006966:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800696a:	bf88      	it	hi
 800696c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006970:	f63f aeaf 	bhi.w	80066d2 <__aeabi_dmul+0xde>
 8006974:	ebb5 0c03 	subs.w	ip, r5, r3
 8006978:	bf04      	itt	eq
 800697a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800697e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006982:	f150 0000 	adcs.w	r0, r0, #0
 8006986:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800698a:	bd70      	pop	{r4, r5, r6, pc}
 800698c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8006990:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006994:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006998:	bfc2      	ittt	gt
 800699a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800699e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80069a2:	bd70      	popgt	{r4, r5, r6, pc}
 80069a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80069a8:	f04f 0e00 	mov.w	lr, #0
 80069ac:	3c01      	subs	r4, #1
 80069ae:	e690      	b.n	80066d2 <__aeabi_dmul+0xde>
 80069b0:	ea45 0e06 	orr.w	lr, r5, r6
 80069b4:	e68d      	b.n	80066d2 <__aeabi_dmul+0xde>
 80069b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80069ba:	ea94 0f0c 	teq	r4, ip
 80069be:	bf08      	it	eq
 80069c0:	ea95 0f0c 	teqeq	r5, ip
 80069c4:	f43f af3b 	beq.w	800683e <__aeabi_dmul+0x24a>
 80069c8:	ea94 0f0c 	teq	r4, ip
 80069cc:	d10a      	bne.n	80069e4 <__aeabi_ddiv+0x19c>
 80069ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80069d2:	f47f af34 	bne.w	800683e <__aeabi_dmul+0x24a>
 80069d6:	ea95 0f0c 	teq	r5, ip
 80069da:	f47f af25 	bne.w	8006828 <__aeabi_dmul+0x234>
 80069de:	4610      	mov	r0, r2
 80069e0:	4619      	mov	r1, r3
 80069e2:	e72c      	b.n	800683e <__aeabi_dmul+0x24a>
 80069e4:	ea95 0f0c 	teq	r5, ip
 80069e8:	d106      	bne.n	80069f8 <__aeabi_ddiv+0x1b0>
 80069ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80069ee:	f43f aefd 	beq.w	80067ec <__aeabi_dmul+0x1f8>
 80069f2:	4610      	mov	r0, r2
 80069f4:	4619      	mov	r1, r3
 80069f6:	e722      	b.n	800683e <__aeabi_dmul+0x24a>
 80069f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80069fc:	bf18      	it	ne
 80069fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006a02:	f47f aec5 	bne.w	8006790 <__aeabi_dmul+0x19c>
 8006a06:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8006a0a:	f47f af0d 	bne.w	8006828 <__aeabi_dmul+0x234>
 8006a0e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006a12:	f47f aeeb 	bne.w	80067ec <__aeabi_dmul+0x1f8>
 8006a16:	e712      	b.n	800683e <__aeabi_dmul+0x24a>

08006a18 <__gedf2>:
 8006a18:	f04f 3cff 	mov.w	ip, #4294967295
 8006a1c:	e006      	b.n	8006a2c <__cmpdf2+0x4>
 8006a1e:	bf00      	nop

08006a20 <__ledf2>:
 8006a20:	f04f 0c01 	mov.w	ip, #1
 8006a24:	e002      	b.n	8006a2c <__cmpdf2+0x4>
 8006a26:	bf00      	nop

08006a28 <__cmpdf2>:
 8006a28:	f04f 0c01 	mov.w	ip, #1
 8006a2c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006a3c:	bf18      	it	ne
 8006a3e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006a42:	d01b      	beq.n	8006a7c <__cmpdf2+0x54>
 8006a44:	b001      	add	sp, #4
 8006a46:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006a4a:	bf0c      	ite	eq
 8006a4c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006a50:	ea91 0f03 	teqne	r1, r3
 8006a54:	bf02      	ittt	eq
 8006a56:	ea90 0f02 	teqeq	r0, r2
 8006a5a:	2000      	moveq	r0, #0
 8006a5c:	4770      	bxeq	lr
 8006a5e:	f110 0f00 	cmn.w	r0, #0
 8006a62:	ea91 0f03 	teq	r1, r3
 8006a66:	bf58      	it	pl
 8006a68:	4299      	cmppl	r1, r3
 8006a6a:	bf08      	it	eq
 8006a6c:	4290      	cmpeq	r0, r2
 8006a6e:	bf2c      	ite	cs
 8006a70:	17d8      	asrcs	r0, r3, #31
 8006a72:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006a76:	f040 0001 	orr.w	r0, r0, #1
 8006a7a:	4770      	bx	lr
 8006a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006a84:	d102      	bne.n	8006a8c <__cmpdf2+0x64>
 8006a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006a8a:	d107      	bne.n	8006a9c <__cmpdf2+0x74>
 8006a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006a94:	d1d6      	bne.n	8006a44 <__cmpdf2+0x1c>
 8006a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006a9a:	d0d3      	beq.n	8006a44 <__cmpdf2+0x1c>
 8006a9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop

08006aa4 <__aeabi_cdrcmple>:
 8006aa4:	4684      	mov	ip, r0
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	4662      	mov	r2, ip
 8006aaa:	468c      	mov	ip, r1
 8006aac:	4619      	mov	r1, r3
 8006aae:	4663      	mov	r3, ip
 8006ab0:	e000      	b.n	8006ab4 <__aeabi_cdcmpeq>
 8006ab2:	bf00      	nop

08006ab4 <__aeabi_cdcmpeq>:
 8006ab4:	b501      	push	{r0, lr}
 8006ab6:	f7ff ffb7 	bl	8006a28 <__cmpdf2>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	bf48      	it	mi
 8006abe:	f110 0f00 	cmnmi.w	r0, #0
 8006ac2:	bd01      	pop	{r0, pc}

08006ac4 <__aeabi_dcmpeq>:
 8006ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006ac8:	f7ff fff4 	bl	8006ab4 <__aeabi_cdcmpeq>
 8006acc:	bf0c      	ite	eq
 8006ace:	2001      	moveq	r0, #1
 8006ad0:	2000      	movne	r0, #0
 8006ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8006ad6:	bf00      	nop

08006ad8 <__aeabi_dcmplt>:
 8006ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006adc:	f7ff ffea 	bl	8006ab4 <__aeabi_cdcmpeq>
 8006ae0:	bf34      	ite	cc
 8006ae2:	2001      	movcc	r0, #1
 8006ae4:	2000      	movcs	r0, #0
 8006ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8006aea:	bf00      	nop

08006aec <__aeabi_dcmple>:
 8006aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006af0:	f7ff ffe0 	bl	8006ab4 <__aeabi_cdcmpeq>
 8006af4:	bf94      	ite	ls
 8006af6:	2001      	movls	r0, #1
 8006af8:	2000      	movhi	r0, #0
 8006afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8006afe:	bf00      	nop

08006b00 <__aeabi_dcmpge>:
 8006b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006b04:	f7ff ffce 	bl	8006aa4 <__aeabi_cdrcmple>
 8006b08:	bf94      	ite	ls
 8006b0a:	2001      	movls	r0, #1
 8006b0c:	2000      	movhi	r0, #0
 8006b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006b12:	bf00      	nop

08006b14 <__aeabi_dcmpgt>:
 8006b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006b18:	f7ff ffc4 	bl	8006aa4 <__aeabi_cdrcmple>
 8006b1c:	bf34      	ite	cc
 8006b1e:	2001      	movcc	r0, #1
 8006b20:	2000      	movcs	r0, #0
 8006b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8006b26:	bf00      	nop

08006b28 <__aeabi_dcmpun>:
 8006b28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006b2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b30:	d102      	bne.n	8006b38 <__aeabi_dcmpun+0x10>
 8006b32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006b36:	d10a      	bne.n	8006b4e <__aeabi_dcmpun+0x26>
 8006b38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006b3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b40:	d102      	bne.n	8006b48 <__aeabi_dcmpun+0x20>
 8006b42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006b46:	d102      	bne.n	8006b4e <__aeabi_dcmpun+0x26>
 8006b48:	f04f 0000 	mov.w	r0, #0
 8006b4c:	4770      	bx	lr
 8006b4e:	f04f 0001 	mov.w	r0, #1
 8006b52:	4770      	bx	lr

08006b54 <__aeabi_d2iz>:
 8006b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006b58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006b5c:	d215      	bcs.n	8006b8a <__aeabi_d2iz+0x36>
 8006b5e:	d511      	bpl.n	8006b84 <__aeabi_d2iz+0x30>
 8006b60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006b64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006b68:	d912      	bls.n	8006b90 <__aeabi_d2iz+0x3c>
 8006b6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006b6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8006b7e:	bf18      	it	ne
 8006b80:	4240      	negne	r0, r0
 8006b82:	4770      	bx	lr
 8006b84:	f04f 0000 	mov.w	r0, #0
 8006b88:	4770      	bx	lr
 8006b8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006b8e:	d105      	bne.n	8006b9c <__aeabi_d2iz+0x48>
 8006b90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8006b94:	bf08      	it	eq
 8006b96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8006b9a:	4770      	bx	lr
 8006b9c:	f04f 0000 	mov.w	r0, #0
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop

08006ba4 <__aeabi_d2uiz>:
 8006ba4:	004a      	lsls	r2, r1, #1
 8006ba6:	d211      	bcs.n	8006bcc <__aeabi_d2uiz+0x28>
 8006ba8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006bac:	d211      	bcs.n	8006bd2 <__aeabi_d2uiz+0x2e>
 8006bae:	d50d      	bpl.n	8006bcc <__aeabi_d2uiz+0x28>
 8006bb0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006bb4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006bb8:	d40e      	bmi.n	8006bd8 <__aeabi_d2uiz+0x34>
 8006bba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006bbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bc2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8006bca:	4770      	bx	lr
 8006bcc:	f04f 0000 	mov.w	r0, #0
 8006bd0:	4770      	bx	lr
 8006bd2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006bd6:	d102      	bne.n	8006bde <__aeabi_d2uiz+0x3a>
 8006bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bdc:	4770      	bx	lr
 8006bde:	f04f 0000 	mov.w	r0, #0
 8006be2:	4770      	bx	lr

08006be4 <__aeabi_d2f>:
 8006be4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006be8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8006bec:	bf24      	itt	cs
 8006bee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8006bf2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8006bf6:	d90d      	bls.n	8006c14 <__aeabi_d2f+0x30>
 8006bf8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006bfc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006c00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8006c04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8006c08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8006c0c:	bf08      	it	eq
 8006c0e:	f020 0001 	biceq.w	r0, r0, #1
 8006c12:	4770      	bx	lr
 8006c14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8006c18:	d121      	bne.n	8006c5e <__aeabi_d2f+0x7a>
 8006c1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8006c1e:	bfbc      	itt	lt
 8006c20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8006c24:	4770      	bxlt	lr
 8006c26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006c2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8006c2e:	f1c2 0218 	rsb	r2, r2, #24
 8006c32:	f1c2 0c20 	rsb	ip, r2, #32
 8006c36:	fa10 f30c 	lsls.w	r3, r0, ip
 8006c3a:	fa20 f002 	lsr.w	r0, r0, r2
 8006c3e:	bf18      	it	ne
 8006c40:	f040 0001 	orrne.w	r0, r0, #1
 8006c44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006c48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8006c4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8006c50:	ea40 000c 	orr.w	r0, r0, ip
 8006c54:	fa23 f302 	lsr.w	r3, r3, r2
 8006c58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006c5c:	e7cc      	b.n	8006bf8 <__aeabi_d2f+0x14>
 8006c5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8006c62:	d107      	bne.n	8006c74 <__aeabi_d2f+0x90>
 8006c64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8006c68:	bf1e      	ittt	ne
 8006c6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8006c6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8006c72:	4770      	bxne	lr
 8006c74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8006c78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006c7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop

08006c84 <__aeabi_d2lz>:
 8006c84:	b538      	push	{r3, r4, r5, lr}
 8006c86:	4605      	mov	r5, r0
 8006c88:	460c      	mov	r4, r1
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	4628      	mov	r0, r5
 8006c90:	4621      	mov	r1, r4
 8006c92:	f7ff ff21 	bl	8006ad8 <__aeabi_dcmplt>
 8006c96:	b928      	cbnz	r0, 8006ca4 <__aeabi_d2lz+0x20>
 8006c98:	4628      	mov	r0, r5
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ca0:	f000 b80a 	b.w	8006cb8 <__aeabi_d2ulz>
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8006caa:	f000 f805 	bl	8006cb8 <__aeabi_d2ulz>
 8006cae:	4240      	negs	r0, r0
 8006cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006cb4:	bd38      	pop	{r3, r4, r5, pc}
 8006cb6:	bf00      	nop

08006cb8 <__aeabi_d2ulz>:
 8006cb8:	b5d0      	push	{r4, r6, r7, lr}
 8006cba:	2200      	movs	r2, #0
 8006cbc:	4b0b      	ldr	r3, [pc, #44]	; (8006cec <__aeabi_d2ulz+0x34>)
 8006cbe:	4606      	mov	r6, r0
 8006cc0:	460f      	mov	r7, r1
 8006cc2:	f7ff fc97 	bl	80065f4 <__aeabi_dmul>
 8006cc6:	f7ff ff6d 	bl	8006ba4 <__aeabi_d2uiz>
 8006cca:	4604      	mov	r4, r0
 8006ccc:	f7ff fc18 	bl	8006500 <__aeabi_ui2d>
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <__aeabi_d2ulz+0x38>)
 8006cd4:	f7ff fc8e 	bl	80065f4 <__aeabi_dmul>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4630      	mov	r0, r6
 8006cde:	4639      	mov	r1, r7
 8006ce0:	f7ff fad0 	bl	8006284 <__aeabi_dsub>
 8006ce4:	f7ff ff5e 	bl	8006ba4 <__aeabi_d2uiz>
 8006ce8:	4621      	mov	r1, r4
 8006cea:	bdd0      	pop	{r4, r6, r7, pc}
 8006cec:	3df00000 	.word	0x3df00000
 8006cf0:	41f00000 	.word	0x41f00000

08006cf4 <__aeabi_fmul>:
 8006cf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8006cfc:	bf1e      	ittt	ne
 8006cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8006d02:	ea92 0f0c 	teqne	r2, ip
 8006d06:	ea93 0f0c 	teqne	r3, ip
 8006d0a:	d06f      	beq.n	8006dec <__aeabi_fmul+0xf8>
 8006d0c:	441a      	add	r2, r3
 8006d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8006d12:	0240      	lsls	r0, r0, #9
 8006d14:	bf18      	it	ne
 8006d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8006d1a:	d01e      	beq.n	8006d5a <__aeabi_fmul+0x66>
 8006d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8006d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8006d28:	fba0 3101 	umull	r3, r1, r0, r1
 8006d2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8006d30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8006d34:	bf3e      	ittt	cc
 8006d36:	0049      	lslcc	r1, r1, #1
 8006d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8006d3c:	005b      	lslcc	r3, r3, #1
 8006d3e:	ea40 0001 	orr.w	r0, r0, r1
 8006d42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8006d46:	2afd      	cmp	r2, #253	; 0xfd
 8006d48:	d81d      	bhi.n	8006d86 <__aeabi_fmul+0x92>
 8006d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8006d52:	bf08      	it	eq
 8006d54:	f020 0001 	biceq.w	r0, r0, #1
 8006d58:	4770      	bx	lr
 8006d5a:	f090 0f00 	teq	r0, #0
 8006d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8006d62:	bf08      	it	eq
 8006d64:	0249      	lsleq	r1, r1, #9
 8006d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8006d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8006d6e:	3a7f      	subs	r2, #127	; 0x7f
 8006d70:	bfc2      	ittt	gt
 8006d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8006d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8006d7a:	4770      	bxgt	lr
 8006d7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006d80:	f04f 0300 	mov.w	r3, #0
 8006d84:	3a01      	subs	r2, #1
 8006d86:	dc5d      	bgt.n	8006e44 <__aeabi_fmul+0x150>
 8006d88:	f112 0f19 	cmn.w	r2, #25
 8006d8c:	bfdc      	itt	le
 8006d8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8006d92:	4770      	bxle	lr
 8006d94:	f1c2 0200 	rsb	r2, r2, #0
 8006d98:	0041      	lsls	r1, r0, #1
 8006d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8006d9e:	f1c2 0220 	rsb	r2, r2, #32
 8006da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8006da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8006daa:	f140 0000 	adc.w	r0, r0, #0
 8006dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8006db2:	bf08      	it	eq
 8006db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8006db8:	4770      	bx	lr
 8006dba:	f092 0f00 	teq	r2, #0
 8006dbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8006dc2:	bf02      	ittt	eq
 8006dc4:	0040      	lsleq	r0, r0, #1
 8006dc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8006dca:	3a01      	subeq	r2, #1
 8006dcc:	d0f9      	beq.n	8006dc2 <__aeabi_fmul+0xce>
 8006dce:	ea40 000c 	orr.w	r0, r0, ip
 8006dd2:	f093 0f00 	teq	r3, #0
 8006dd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006dda:	bf02      	ittt	eq
 8006ddc:	0049      	lsleq	r1, r1, #1
 8006dde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8006de2:	3b01      	subeq	r3, #1
 8006de4:	d0f9      	beq.n	8006dda <__aeabi_fmul+0xe6>
 8006de6:	ea41 010c 	orr.w	r1, r1, ip
 8006dea:	e78f      	b.n	8006d0c <__aeabi_fmul+0x18>
 8006dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8006df0:	ea92 0f0c 	teq	r2, ip
 8006df4:	bf18      	it	ne
 8006df6:	ea93 0f0c 	teqne	r3, ip
 8006dfa:	d00a      	beq.n	8006e12 <__aeabi_fmul+0x11e>
 8006dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8006e00:	bf18      	it	ne
 8006e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8006e06:	d1d8      	bne.n	8006dba <__aeabi_fmul+0xc6>
 8006e08:	ea80 0001 	eor.w	r0, r0, r1
 8006e0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006e10:	4770      	bx	lr
 8006e12:	f090 0f00 	teq	r0, #0
 8006e16:	bf17      	itett	ne
 8006e18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8006e1c:	4608      	moveq	r0, r1
 8006e1e:	f091 0f00 	teqne	r1, #0
 8006e22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8006e26:	d014      	beq.n	8006e52 <__aeabi_fmul+0x15e>
 8006e28:	ea92 0f0c 	teq	r2, ip
 8006e2c:	d101      	bne.n	8006e32 <__aeabi_fmul+0x13e>
 8006e2e:	0242      	lsls	r2, r0, #9
 8006e30:	d10f      	bne.n	8006e52 <__aeabi_fmul+0x15e>
 8006e32:	ea93 0f0c 	teq	r3, ip
 8006e36:	d103      	bne.n	8006e40 <__aeabi_fmul+0x14c>
 8006e38:	024b      	lsls	r3, r1, #9
 8006e3a:	bf18      	it	ne
 8006e3c:	4608      	movne	r0, r1
 8006e3e:	d108      	bne.n	8006e52 <__aeabi_fmul+0x15e>
 8006e40:	ea80 0001 	eor.w	r0, r0, r1
 8006e44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006e48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006e50:	4770      	bx	lr
 8006e52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006e56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8006e5a:	4770      	bx	lr

08006e5c <__aeabi_frsub>:
 8006e5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8006e60:	e002      	b.n	8006e68 <__addsf3>
 8006e62:	bf00      	nop

08006e64 <__aeabi_fsub>:
 8006e64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08006e68 <__addsf3>:
 8006e68:	0042      	lsls	r2, r0, #1
 8006e6a:	bf1f      	itttt	ne
 8006e6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8006e70:	ea92 0f03 	teqne	r2, r3
 8006e74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8006e78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8006e7c:	d06a      	beq.n	8006f54 <__addsf3+0xec>
 8006e7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8006e82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8006e86:	bfc1      	itttt	gt
 8006e88:	18d2      	addgt	r2, r2, r3
 8006e8a:	4041      	eorgt	r1, r0
 8006e8c:	4048      	eorgt	r0, r1
 8006e8e:	4041      	eorgt	r1, r0
 8006e90:	bfb8      	it	lt
 8006e92:	425b      	neglt	r3, r3
 8006e94:	2b19      	cmp	r3, #25
 8006e96:	bf88      	it	hi
 8006e98:	4770      	bxhi	lr
 8006e9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8006e9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006ea2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006ea6:	bf18      	it	ne
 8006ea8:	4240      	negne	r0, r0
 8006eaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006eae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8006eb2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8006eb6:	bf18      	it	ne
 8006eb8:	4249      	negne	r1, r1
 8006eba:	ea92 0f03 	teq	r2, r3
 8006ebe:	d03f      	beq.n	8006f40 <__addsf3+0xd8>
 8006ec0:	f1a2 0201 	sub.w	r2, r2, #1
 8006ec4:	fa41 fc03 	asr.w	ip, r1, r3
 8006ec8:	eb10 000c 	adds.w	r0, r0, ip
 8006ecc:	f1c3 0320 	rsb	r3, r3, #32
 8006ed0:	fa01 f103 	lsl.w	r1, r1, r3
 8006ed4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006ed8:	d502      	bpl.n	8006ee0 <__addsf3+0x78>
 8006eda:	4249      	negs	r1, r1
 8006edc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8006ee0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006ee4:	d313      	bcc.n	8006f0e <__addsf3+0xa6>
 8006ee6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006eea:	d306      	bcc.n	8006efa <__addsf3+0x92>
 8006eec:	0840      	lsrs	r0, r0, #1
 8006eee:	ea4f 0131 	mov.w	r1, r1, rrx
 8006ef2:	f102 0201 	add.w	r2, r2, #1
 8006ef6:	2afe      	cmp	r2, #254	; 0xfe
 8006ef8:	d251      	bcs.n	8006f9e <__addsf3+0x136>
 8006efa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8006efe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8006f02:	bf08      	it	eq
 8006f04:	f020 0001 	biceq.w	r0, r0, #1
 8006f08:	ea40 0003 	orr.w	r0, r0, r3
 8006f0c:	4770      	bx	lr
 8006f0e:	0049      	lsls	r1, r1, #1
 8006f10:	eb40 0000 	adc.w	r0, r0, r0
 8006f14:	3a01      	subs	r2, #1
 8006f16:	bf28      	it	cs
 8006f18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8006f1c:	d2ed      	bcs.n	8006efa <__addsf3+0x92>
 8006f1e:	fab0 fc80 	clz	ip, r0
 8006f22:	f1ac 0c08 	sub.w	ip, ip, #8
 8006f26:	ebb2 020c 	subs.w	r2, r2, ip
 8006f2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8006f2e:	bfaa      	itet	ge
 8006f30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8006f34:	4252      	neglt	r2, r2
 8006f36:	4318      	orrge	r0, r3
 8006f38:	bfbc      	itt	lt
 8006f3a:	40d0      	lsrlt	r0, r2
 8006f3c:	4318      	orrlt	r0, r3
 8006f3e:	4770      	bx	lr
 8006f40:	f092 0f00 	teq	r2, #0
 8006f44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8006f48:	bf06      	itte	eq
 8006f4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8006f4e:	3201      	addeq	r2, #1
 8006f50:	3b01      	subne	r3, #1
 8006f52:	e7b5      	b.n	8006ec0 <__addsf3+0x58>
 8006f54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8006f58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8006f5c:	bf18      	it	ne
 8006f5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8006f62:	d021      	beq.n	8006fa8 <__addsf3+0x140>
 8006f64:	ea92 0f03 	teq	r2, r3
 8006f68:	d004      	beq.n	8006f74 <__addsf3+0x10c>
 8006f6a:	f092 0f00 	teq	r2, #0
 8006f6e:	bf08      	it	eq
 8006f70:	4608      	moveq	r0, r1
 8006f72:	4770      	bx	lr
 8006f74:	ea90 0f01 	teq	r0, r1
 8006f78:	bf1c      	itt	ne
 8006f7a:	2000      	movne	r0, #0
 8006f7c:	4770      	bxne	lr
 8006f7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8006f82:	d104      	bne.n	8006f8e <__addsf3+0x126>
 8006f84:	0040      	lsls	r0, r0, #1
 8006f86:	bf28      	it	cs
 8006f88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8006f8c:	4770      	bx	lr
 8006f8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8006f92:	bf3c      	itt	cc
 8006f94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8006f98:	4770      	bxcc	lr
 8006f9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006f9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8006fa2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006fa6:	4770      	bx	lr
 8006fa8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8006fac:	bf16      	itet	ne
 8006fae:	4608      	movne	r0, r1
 8006fb0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8006fb4:	4601      	movne	r1, r0
 8006fb6:	0242      	lsls	r2, r0, #9
 8006fb8:	bf06      	itte	eq
 8006fba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8006fbe:	ea90 0f01 	teqeq	r0, r1
 8006fc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8006fc6:	4770      	bx	lr

08006fc8 <__aeabi_ui2f>:
 8006fc8:	f04f 0300 	mov.w	r3, #0
 8006fcc:	e004      	b.n	8006fd8 <__aeabi_i2f+0x8>
 8006fce:	bf00      	nop

08006fd0 <__aeabi_i2f>:
 8006fd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8006fd4:	bf48      	it	mi
 8006fd6:	4240      	negmi	r0, r0
 8006fd8:	ea5f 0c00 	movs.w	ip, r0
 8006fdc:	bf08      	it	eq
 8006fde:	4770      	bxeq	lr
 8006fe0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8006fe4:	4601      	mov	r1, r0
 8006fe6:	f04f 0000 	mov.w	r0, #0
 8006fea:	e01c      	b.n	8007026 <__aeabi_l2f+0x2a>

08006fec <__aeabi_ul2f>:
 8006fec:	ea50 0201 	orrs.w	r2, r0, r1
 8006ff0:	bf08      	it	eq
 8006ff2:	4770      	bxeq	lr
 8006ff4:	f04f 0300 	mov.w	r3, #0
 8006ff8:	e00a      	b.n	8007010 <__aeabi_l2f+0x14>
 8006ffa:	bf00      	nop

08006ffc <__aeabi_l2f>:
 8006ffc:	ea50 0201 	orrs.w	r2, r0, r1
 8007000:	bf08      	it	eq
 8007002:	4770      	bxeq	lr
 8007004:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8007008:	d502      	bpl.n	8007010 <__aeabi_l2f+0x14>
 800700a:	4240      	negs	r0, r0
 800700c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007010:	ea5f 0c01 	movs.w	ip, r1
 8007014:	bf02      	ittt	eq
 8007016:	4684      	moveq	ip, r0
 8007018:	4601      	moveq	r1, r0
 800701a:	2000      	moveq	r0, #0
 800701c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8007020:	bf08      	it	eq
 8007022:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8007026:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800702a:	fabc f28c 	clz	r2, ip
 800702e:	3a08      	subs	r2, #8
 8007030:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8007034:	db10      	blt.n	8007058 <__aeabi_l2f+0x5c>
 8007036:	fa01 fc02 	lsl.w	ip, r1, r2
 800703a:	4463      	add	r3, ip
 800703c:	fa00 fc02 	lsl.w	ip, r0, r2
 8007040:	f1c2 0220 	rsb	r2, r2, #32
 8007044:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007048:	fa20 f202 	lsr.w	r2, r0, r2
 800704c:	eb43 0002 	adc.w	r0, r3, r2
 8007050:	bf08      	it	eq
 8007052:	f020 0001 	biceq.w	r0, r0, #1
 8007056:	4770      	bx	lr
 8007058:	f102 0220 	add.w	r2, r2, #32
 800705c:	fa01 fc02 	lsl.w	ip, r1, r2
 8007060:	f1c2 0220 	rsb	r2, r2, #32
 8007064:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8007068:	fa21 f202 	lsr.w	r2, r1, r2
 800706c:	eb43 0002 	adc.w	r0, r3, r2
 8007070:	bf08      	it	eq
 8007072:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8007076:	4770      	bx	lr

08007078 <__aeabi_f2uiz>:
 8007078:	0042      	lsls	r2, r0, #1
 800707a:	d20e      	bcs.n	800709a <__aeabi_f2uiz+0x22>
 800707c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8007080:	d30b      	bcc.n	800709a <__aeabi_f2uiz+0x22>
 8007082:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8007086:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800708a:	d409      	bmi.n	80070a0 <__aeabi_f2uiz+0x28>
 800708c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8007090:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007094:	fa23 f002 	lsr.w	r0, r3, r2
 8007098:	4770      	bx	lr
 800709a:	f04f 0000 	mov.w	r0, #0
 800709e:	4770      	bx	lr
 80070a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80070a4:	d101      	bne.n	80070aa <__aeabi_f2uiz+0x32>
 80070a6:	0242      	lsls	r2, r0, #9
 80070a8:	d102      	bne.n	80070b0 <__aeabi_f2uiz+0x38>
 80070aa:	f04f 30ff 	mov.w	r0, #4294967295
 80070ae:	4770      	bx	lr
 80070b0:	f04f 0000 	mov.w	r0, #0
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop

080070b8 <main>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070b8:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80070bc:	4859      	ldr	r0, [pc, #356]	; (8007224 <main+0x16c>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070be:	495a      	ldr	r1, [pc, #360]	; (8007228 <main+0x170>)
 80070c0:	6802      	ldr	r2, [r0, #0]
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80070c2:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80070c6:	f042 0210 	orr.w	r2, r2, #16
 80070ca:	6002      	str	r2, [r0, #0]
 80070cc:	68ca      	ldr	r2, [r1, #12]
  reg_value  =  (reg_value                                   |
 80070ce:	4b57      	ldr	r3, [pc, #348]	; (800722c <main+0x174>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070d0:	4022      	ands	r2, r4
  reg_value  =  (reg_value                                   |
 80070d2:	4313      	orrs	r3, r2
 80070d4:	b0a5      	sub	sp, #148	; 0x94
  SCB->AIRCR =  reg_value;
 80070d6:	60cb      	str	r3, [r1, #12]
  HAL_InitTick(TICK_INT_PRIORITY);
 80070d8:	200f      	movs	r0, #15
 80070da:	f7fc ff79 	bl	8003fd0 <HAL_InitTick.isra.0>
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80070de:	4b54      	ldr	r3, [pc, #336]	; (8007230 <main+0x178>)

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80070e0:	4954      	ldr	r1, [pc, #336]	; (8007234 <main+0x17c>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 80070e2:	699a      	ldr	r2, [r3, #24]
 80070e4:	f042 0201 	orr.w	r2, r2, #1
 80070e8:	619a      	str	r2, [r3, #24]
 80070ea:	699a      	ldr	r2, [r3, #24]
 80070ec:	f002 0201 	and.w	r2, r2, #1
 80070f0:	9211      	str	r2, [sp, #68]	; 0x44
 80070f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  __HAL_RCC_PWR_CLK_ENABLE();
 80070f4:	69da      	ldr	r2, [r3, #28]
 80070f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80070fa:	61da      	str	r2, [r3, #28]
 80070fc:	69da      	ldr	r2, [r3, #28]
 80070fe:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8007102:	9210      	str	r2, [sp, #64]	; 0x40
 8007104:	9a10      	ldr	r2, [sp, #64]	; 0x40
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007106:	684a      	ldr	r2, [r1, #4]
 8007108:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800710c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8007110:	604a      	str	r2, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	f002 020c 	and.w	r2, r2, #12
 8007118:	2a04      	cmp	r2, #4
 800711a:	d062      	beq.n	80071e2 <main+0x12a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	f002 020c 	and.w	r2, r2, #12
 8007122:	2a08      	cmp	r2, #8
 8007124:	d05a      	beq.n	80071dc <main+0x124>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007126:	4a42      	ldr	r2, [pc, #264]	; (8007230 <main+0x178>)
  return uwTick;
 8007128:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8007238 <main+0x180>
 800712c:	6813      	ldr	r3, [r2, #0]
 800712e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007132:	6013      	str	r3, [r2, #0]
 8007134:	f8db 1054 	ldr.w	r1, [fp, #84]	; 0x54
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007138:	e004      	b.n	8007144 <main+0x8c>
 800713a:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800713e:	1a5b      	subs	r3, r3, r1
 8007140:	2b64      	cmp	r3, #100	; 0x64
 8007142:	d849      	bhi.n	80071d8 <main+0x120>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007144:	6813      	ldr	r3, [r2, #0]
 8007146:	039f      	lsls	r7, r3, #14
 8007148:	d5f7      	bpl.n	800713a <main+0x82>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800714a:	4a39      	ldr	r2, [pc, #228]	; (8007230 <main+0x178>)
 800714c:	6853      	ldr	r3, [r2, #4]
 800714e:	f003 030c 	and.w	r3, r3, #12
 8007152:	2b08      	cmp	r3, #8
 8007154:	d038      	beq.n	80071c8 <main+0x110>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007156:	2100      	movs	r1, #0
 8007158:	4b38      	ldr	r3, [pc, #224]	; (800723c <main+0x184>)
 800715a:	6619      	str	r1, [r3, #96]	; 0x60
 800715c:	f8db 1054 	ldr.w	r1, [fp, #84]	; 0x54

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007160:	e004      	b.n	800716c <main+0xb4>
 8007162:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007166:	1a5b      	subs	r3, r3, r1
 8007168:	2b02      	cmp	r3, #2
 800716a:	d835      	bhi.n	80071d8 <main+0x120>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800716c:	6813      	ldr	r3, [r2, #0]
 800716e:	019e      	lsls	r6, r3, #6
 8007170:	d4f7      	bmi.n	8007162 <main+0xaa>

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007172:	2001      	movs	r0, #1
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007174:	6853      	ldr	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8007176:	4931      	ldr	r1, [pc, #196]	; (800723c <main+0x184>)
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007178:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800717c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800717e:	6853      	ldr	r3, [r2, #4]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007180:	4c2b      	ldr	r4, [pc, #172]	; (8007230 <main+0x178>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007182:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8007186:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800718a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800718c:	6608      	str	r0, [r1, #96]	; 0x60
 800718e:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007192:	e004      	b.n	800719e <main+0xe6>
 8007194:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007198:	1a9b      	subs	r3, r3, r2
 800719a:	2b02      	cmp	r3, #2
 800719c:	d81c      	bhi.n	80071d8 <main+0x120>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	019d      	lsls	r5, r3, #6
 80071a2:	d5f7      	bpl.n	8007194 <main+0xdc>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071a4:	4b1f      	ldr	r3, [pc, #124]	; (8007224 <main+0x16c>)
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	f012 0f06 	tst.w	r2, #6
 80071ac:	d11e      	bne.n	80071ec <main+0x134>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	f022 0207 	bic.w	r2, r2, #7
 80071b4:	f042 0202 	orr.w	r2, r2, #2
 80071b8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0307 	and.w	r3, r3, #7
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d013      	beq.n	80071ec <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 80071c4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80071c6:	e7fe      	b.n	80071c6 <main+0x10e>
        pll_config = RCC->CFGR;
 80071c8:	6853      	ldr	r3, [r2, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071ca:	03d8      	lsls	r0, r3, #15
 80071cc:	d504      	bpl.n	80071d8 <main+0x120>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80071ce:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071d2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80071d6:	d0e5      	beq.n	80071a4 <main+0xec>
 80071d8:	b672      	cpsid	i
 80071da:	e7fe      	b.n	80071da <main+0x122>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	03db      	lsls	r3, r3, #15
 80071e0:	d5a1      	bpl.n	8007126 <main+0x6e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071e2:	4b13      	ldr	r3, [pc, #76]	; (8007230 <main+0x178>)
 80071e4:	f8df b050 	ldr.w	fp, [pc, #80]	; 8007238 <main+0x180>
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	e7ae      	b.n	800714a <main+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071ec:	4a10      	ldr	r2, [pc, #64]	; (8007230 <main+0x178>)
 80071ee:	6853      	ldr	r3, [r2, #4]
 80071f0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80071f4:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071f6:	6853      	ldr	r3, [r2, #4]
 80071f8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80071fc:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071fe:	6853      	ldr	r3, [r2, #4]
 8007200:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007204:	6053      	str	r3, [r2, #4]
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007206:	6813      	ldr	r3, [r2, #0]
 8007208:	0199      	lsls	r1, r3, #6
 800720a:	d5db      	bpl.n	80071c4 <main+0x10c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800720c:	6853      	ldr	r3, [r2, #4]
    /* Get Start Tick */
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800720e:	f241 3088 	movw	r0, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007212:	f023 0303 	bic.w	r3, r3, #3
 8007216:	f043 0302 	orr.w	r3, r3, #2
 800721a:	6053      	str	r3, [r2, #4]
 800721c:	f8db 1054 	ldr.w	r1, [fp, #84]	; 0x54
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007220:	e013      	b.n	800724a <main+0x192>
 8007222:	bf00      	nop
 8007224:	40022000 	.word	0x40022000
 8007228:	e000ed00 	.word	0xe000ed00
 800722c:	05fa0300 	.word	0x05fa0300
 8007230:	40021000 	.word	0x40021000
 8007234:	40010000 	.word	0x40010000
 8007238:	20000200 	.word	0x20000200
 800723c:	42420000 	.word	0x42420000
 8007240:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007244:	1a5b      	subs	r3, r3, r1
 8007246:	4283      	cmp	r3, r0
 8007248:	d8bc      	bhi.n	80071c4 <main+0x10c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800724a:	6853      	ldr	r3, [r2, #4]
 800724c:	f003 030c 	and.w	r3, r3, #12
 8007250:	2b08      	cmp	r3, #8
 8007252:	d1f5      	bne.n	8007240 <main+0x188>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007254:	4ab2      	ldr	r2, [pc, #712]	; (8007520 <main+0x468>)
 8007256:	6813      	ldr	r3, [r2, #0]
 8007258:	f003 0307 	and.w	r3, r3, #7
 800725c:	2b02      	cmp	r3, #2
 800725e:	d90a      	bls.n	8007276 <main+0x1be>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007260:	6813      	ldr	r3, [r2, #0]
 8007262:	f023 0307 	bic.w	r3, r3, #7
 8007266:	f043 0302 	orr.w	r3, r3, #2
 800726a:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800726c:	6813      	ldr	r3, [r2, #0]
 800726e:	f003 0307 	and.w	r3, r3, #7
 8007272:	2b02      	cmp	r3, #2
 8007274:	d1a6      	bne.n	80071c4 <main+0x10c>

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007276:	4cab      	ldr	r4, [pc, #684]	; (8007524 <main+0x46c>)
{
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007278:	4aab      	ldr	r2, [pc, #684]	; (8007528 <main+0x470>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800727a:	6863      	ldr	r3, [r4, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800727c:	ad1e      	add	r5, sp, #120	; 0x78
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800727e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007286:	6063      	str	r3, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007288:	6863      	ldr	r3, [r4, #4]
 800728a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800728e:	6063      	str	r3, [r4, #4]
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007290:	f240 2301 	movw	r3, #513	; 0x201
 8007294:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007298:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800729a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  uint32_t sysclockfreq = 0U;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800729e:	6863      	ldr	r3, [r4, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80072a0:	f003 020c 	and.w	r2, r3, #12
 80072a4:	2a08      	cmp	r2, #8
 80072a6:	f001 832d 	beq.w	8008904 <main+0x184c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80072aa:	4ea0      	ldr	r6, [pc, #640]	; (800752c <main+0x474>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072ac:	2500      	movs	r5, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80072ae:	4c9d      	ldr	r4, [pc, #628]	; (8007524 <main+0x46c>)
 80072b0:	4a9f      	ldr	r2, [pc, #636]	; (8007530 <main+0x478>)
 80072b2:	6863      	ldr	r3, [r4, #4]
 80072b4:	4f9f      	ldr	r7, [pc, #636]	; (8007534 <main+0x47c>)
 80072b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80072ba:	4413      	add	r3, r2
 80072bc:	f893 35e0 	ldrb.w	r3, [r3, #1504]	; 0x5e0
 80072c0:	f8df 8274 	ldr.w	r8, [pc, #628]	; 8007538 <main+0x480>
 80072c4:	40de      	lsrs	r6, r3
 80072c6:	4b9d      	ldr	r3, [pc, #628]	; (800753c <main+0x484>)
  GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 80072c8:	f04f 0900 	mov.w	r9, #0
  HAL_InitTick(uwTickPrio);
 80072cc:	6858      	ldr	r0, [r3, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80072ce:	601e      	str	r6, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80072d0:	f7fc fe7e 	bl	8003fd0 <HAL_InitTick.isra.0>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072d4:	9520      	str	r5, [sp, #128]	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80072d6:	69a3      	ldr	r3, [r4, #24]
 80072d8:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 80072dc:	f043 0310 	orr.w	r3, r3, #16
 80072e0:	61a3      	str	r3, [r4, #24]
 80072e2:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072e4:	2202      	movs	r2, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80072e6:	f003 0310 	and.w	r3, r3, #16
 80072ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80072ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80072ee:	69a3      	ldr	r3, [r4, #24]
 80072f0:	4893      	ldr	r0, [pc, #588]	; (8007540 <main+0x488>)
 80072f2:	f043 0320 	orr.w	r3, r3, #32
 80072f6:	61a3      	str	r3, [r4, #24]
 80072f8:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 80072fa:	f04f 0a03 	mov.w	sl, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80072fe:	f003 0320 	and.w	r3, r3, #32
 8007302:	930e      	str	r3, [sp, #56]	; 0x38
 8007304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007306:	69a3      	ldr	r3, [r4, #24]
 8007308:	f043 0304 	orr.w	r3, r3, #4
 800730c:	61a3      	str	r3, [r4, #24]
 800730e:	69a3      	ldr	r3, [r4, #24]
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	930d      	str	r3, [sp, #52]	; 0x34
 8007316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007318:	69a3      	ldr	r3, [r4, #24]
 800731a:	f043 0308 	orr.w	r3, r3, #8
 800731e:	61a3      	str	r3, [r4, #24]
 8007320:	69a3      	ldr	r3, [r4, #24]
 8007322:	f003 0308 	and.w	r3, r3, #8
 8007326:	930c      	str	r3, [sp, #48]	; 0x30
 8007328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800732a:	4b86      	ldr	r3, [pc, #536]	; (8007544 <main+0x48c>)
 800732c:	6103      	str	r3, [r0, #16]
 800732e:	4b86      	ldr	r3, [pc, #536]	; (8007548 <main+0x490>)
 8007330:	f8c8 1010 	str.w	r1, [r8, #16]
 8007334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pin = LED_Pin;
 8007336:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007338:	9221      	str	r2, [sp, #132]	; 0x84
  GPIO_InitStruct.Pin = LED_Pin;
 800733a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800733e:	a91e      	add	r1, sp, #120	; 0x78
  GPIO_InitStruct.Pin = LED_Pin;
 8007340:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8007344:	f7fa f8b6 	bl	80014b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DB_08_Pin|LCD_DB_09_Pin|LCD_DB_10_Pin|LCD_DB_11_Pin
 8007348:	f24c 023f 	movw	r2, #49215	; 0xc03f
 800734c:	2301      	movs	r3, #1
 800734e:	e9cd 9a20 	strd	r9, sl, [sp, #128]	; 0x80
 8007352:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007356:	f7fa f8ad 	bl	80014b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 800735a:	22ff      	movs	r2, #255	; 0xff
 800735c:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800735e:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LCD_DB_14_Pin|LCD_DB_15_Pin|LCD_DB_07_Pin|LCD_DB_06_Pin
 8007360:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8007364:	e9cd 9a20 	strd	r9, sl, [sp, #128]	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007368:	f7fa f8a4 	bl	80014b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 800736c:	f640 4203 	movw	r2, #3075	; 0xc03
 8007370:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007372:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8007374:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8007378:	e9cd 9a20 	strd	r9, sl, [sp, #128]	; 0x80
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800737c:	f7fa f89a 	bl	80014b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 8007380:	2300      	movs	r3, #0
 8007382:	2204      	movs	r2, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007384:	9520      	str	r5, [sp, #128]	; 0x80
  GPIO_InitStruct.Pin = SYSTEM_RESERVED_Pin;
 8007386:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(SYSTEM_RESERVED_GPIO_Port, &GPIO_InitStruct);
 800738a:	f7fa f893 	bl	80014b4 <HAL_GPIO_Init>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800738e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 8007392:	4f6e      	ldr	r7, [pc, #440]	; (800754c <main+0x494>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007394:	f8cb 3010 	str.w	r3, [fp, #16]
  hi2c1.Init.ClockSpeed = 400000;
 8007398:	4b6d      	ldr	r3, [pc, #436]	; (8007550 <main+0x498>)
  hi2c1.Init.OwnAddress1 = 0;
 800739a:	e9cb 5502 	strd	r5, r5, [fp, #8]
  hi2c1.Init.ClockSpeed = 400000;
 800739e:	e9cb 7300 	strd	r7, r3, [fp]
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80073a2:	f89b 303d 	ldrb.w	r3, [fp, #61]	; 0x3d
  hi2c1.Init.OwnAddress2 = 0;
 80073a6:	e9cb 5505 	strd	r5, r5, [fp, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80073aa:	e9cb 5507 	strd	r5, r5, [fp, #28]
 80073ae:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f001 82c4 	beq.w	8008940 <main+0x1888>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80073b8:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80073ba:	f8db 0000 	ldr.w	r0, [fp]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80073be:	f88b 303d 	strb.w	r3, [fp, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80073c2:	6803      	ldr	r3, [r0, #0]
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80073c4:	4a57      	ldr	r2, [pc, #348]	; (8007524 <main+0x46c>)
 80073c6:	f023 0301 	bic.w	r3, r3, #1
 80073ca:	6003      	str	r3, [r0, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80073cc:	6803      	ldr	r3, [r0, #0]
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80073ce:	f8db 5004 	ldr.w	r5, [fp, #4]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80073d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073d6:	6003      	str	r3, [r0, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80073d8:	6803      	ldr	r3, [r0, #0]
 80073da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073de:	6003      	str	r3, [r0, #0]
 80073e0:	6853      	ldr	r3, [r2, #4]
 80073e2:	4a53      	ldr	r2, [pc, #332]	; (8007530 <main+0x478>)
 80073e4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80073e8:	4413      	add	r3, r2
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80073ea:	4a5a      	ldr	r2, [pc, #360]	; (8007554 <main+0x49c>)
 80073ec:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 80073f0:	4295      	cmp	r5, r2
 80073f2:	bf94      	ite	ls
 80073f4:	4a58      	ldrls	r2, [pc, #352]	; (8007558 <main+0x4a0>)
 80073f6:	4a59      	ldrhi	r2, [pc, #356]	; (800755c <main+0x4a4>)
 80073f8:	fa26 f303 	lsr.w	r3, r6, r3
 80073fc:	4293      	cmp	r3, r2
 80073fe:	bf8c      	ite	hi
 8007400:	2200      	movhi	r2, #0
 8007402:	2201      	movls	r2, #1
 8007404:	2a00      	cmp	r2, #0
 8007406:	f041 827b 	bne.w	8008900 <main+0x1848>
  freqrange = I2C_FREQRANGE(pclk1);
 800740a:	4a55      	ldr	r2, [pc, #340]	; (8007560 <main+0x4a8>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800740c:	6841      	ldr	r1, [r0, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800740e:	fbb3 f2f2 	udiv	r2, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007412:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8007416:	4311      	orrs	r1, r2
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007418:	4c4e      	ldr	r4, [pc, #312]	; (8007554 <main+0x49c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800741a:	6041      	str	r1, [r0, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800741c:	6a01      	ldr	r1, [r0, #32]
 800741e:	42a5      	cmp	r5, r4
 8007420:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8007424:	f201 82fb 	bhi.w	8008a1e <main+0x1966>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007428:	3b01      	subs	r3, #1
 800742a:	006d      	lsls	r5, r5, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800742c:	3201      	adds	r2, #1
 800742e:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007430:	fbb3 f3f5 	udiv	r3, r3, r5
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007434:	6202      	str	r2, [r0, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007436:	f640 72fc 	movw	r2, #4092	; 0xffc
 800743a:	69c1      	ldr	r1, [r0, #28]
 800743c:	3301      	adds	r3, #1
 800743e:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8007442:	4213      	tst	r3, r2
 8007444:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8007448:	f041 832a 	bne.w	8008aa0 <main+0x19e8>
 800744c:	2304      	movs	r3, #4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800744e:	2400      	movs	r4, #0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007450:	430b      	orrs	r3, r1
  hi2c->State = HAL_I2C_STATE_READY;
 8007452:	2120      	movs	r1, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007454:	61c3      	str	r3, [r0, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007456:	6805      	ldr	r5, [r0, #0]
 8007458:	e9db 3207 	ldrd	r3, r2, [fp, #28]
 800745c:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8007460:	4313      	orrs	r3, r2
 8007462:	432b      	orrs	r3, r5
 8007464:	6003      	str	r3, [r0, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007466:	6885      	ldr	r5, [r0, #8]
 8007468:	e9db 2303 	ldrd	r2, r3, [fp, #12]
 800746c:	f425 4503 	bic.w	r5, r5, #33536	; 0x8300
 8007470:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007474:	4313      	orrs	r3, r2
 8007476:	432b      	orrs	r3, r5
 8007478:	6083      	str	r3, [r0, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800747a:	68c5      	ldr	r5, [r0, #12]
 800747c:	e9db 3205 	ldrd	r3, r2, [fp, #20]
 8007480:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007484:	4313      	orrs	r3, r2
 8007486:	432b      	orrs	r3, r5
 8007488:	60c3      	str	r3, [r0, #12]
  __HAL_I2C_ENABLE(hi2c);
 800748a:	6803      	ldr	r3, [r0, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800748c:	4f25      	ldr	r7, [pc, #148]	; (8007524 <main+0x46c>)
 800748e:	f043 0301 	orr.w	r3, r3, #1
 8007492:	6003      	str	r3, [r0, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007494:	f8cb 4040 	str.w	r4, [fp, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007498:	f88b 103d 	strb.w	r1, [fp, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800749c:	f8cb 4030 	str.w	r4, [fp, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a0:	f88b 403e 	strb.w	r4, [fp, #62]	; 0x3e
 80074a4:	697b      	ldr	r3, [r7, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80074a6:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80074a8:	f043 0301 	orr.w	r3, r3, #1
 80074ac:	617b      	str	r3, [r7, #20]
 80074ae:	697b      	ldr	r3, [r7, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80074b0:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80074b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80074ba:	f7fa f94b 	bl	8001754 <HAL_NVIC_SetPriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80074c2:	4d28      	ldr	r5, [pc, #160]	; (8007564 <main+0x4ac>)
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80074c4:	4621      	mov	r1, r4
 80074c6:	602b      	str	r3, [r5, #0]
 80074c8:	200f      	movs	r0, #15
 80074ca:	f7fa f943 	bl	8001754 <HAL_NVIC_SetPriority.constprop.0>
 80074ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80074d2:	4621      	mov	r1, r4
 80074d4:	602b      	str	r3, [r5, #0]
 80074d6:	2010      	movs	r0, #16
 80074d8:	f7fa f93c 	bl	8001754 <HAL_NVIC_SetPriority.constprop.0>
 80074dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80074e0:	4621      	mov	r1, r4
 80074e2:	602b      	str	r3, [r5, #0]
 80074e4:	2011      	movs	r0, #17
 80074e6:	f7fa f935 	bl	8001754 <HAL_NVIC_SetPriority.constprop.0>
 80074ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074ee:	602b      	str	r3, [r5, #0]
  huart1.Init.BaudRate = 115200;
 80074f0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 80074f4:	250c      	movs	r5, #12
  huart1.Init.BaudRate = 115200;
 80074f6:	f8cb 3084 	str.w	r3, [fp, #132]	; 0x84
  huart1.Instance = USART1;
 80074fa:	4b1b      	ldr	r3, [pc, #108]	; (8007568 <main+0x4b0>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80074fc:	e9cb 4422 	strd	r4, r4, [fp, #136]	; 0x88
  huart1.Instance = USART1;
 8007500:	f8cb 3080 	str.w	r3, [fp, #128]	; 0x80
  if (huart->gState == HAL_UART_STATE_RESET)
 8007504:	f89b 30bd 	ldrb.w	r3, [fp, #189]	; 0xbd
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007508:	e9cb 4426 	strd	r4, r4, [fp, #152]	; 0x98
  huart1.Init.Parity = UART_PARITY_NONE;
 800750c:	f8cb 4090 	str.w	r4, [fp, #144]	; 0x90
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007510:	f8cb 5094 	str.w	r5, [fp, #148]	; 0x94
 8007514:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8007518:	2b00      	cmp	r3, #0
 800751a:	f001 82ca 	beq.w	8008ab2 <main+0x19fa>
 800751e:	e025      	b.n	800756c <main+0x4b4>
 8007520:	40022000 	.word	0x40022000
 8007524:	40021000 	.word	0x40021000
 8007528:	0801dfac 	.word	0x0801dfac
 800752c:	007a1200 	.word	0x007a1200
 8007530:	0800d648 	.word	0x0800d648
 8007534:	40010c00 	.word	0x40010c00
 8007538:	40010800 	.word	0x40010800
 800753c:	20000000 	.word	0x20000000
 8007540:	40011000 	.word	0x40011000
 8007544:	e03f0000 	.word	0xe03f0000
 8007548:	0c030000 	.word	0x0c030000
 800754c:	40005400 	.word	0x40005400
 8007550:	00061a80 	.word	0x00061a80
 8007554:	000186a0 	.word	0x000186a0
 8007558:	001e847f 	.word	0x001e847f
 800755c:	003d08ff 	.word	0x003d08ff
 8007560:	000f4240 	.word	0x000f4240
 8007564:	e000e100 	.word	0xe000e100
 8007568:	40013800 	.word	0x40013800
  huart->gState = HAL_UART_STATE_BUSY;
 800756c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800756e:	f8db 2080 	ldr.w	r2, [fp, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007572:	f88b 30bd 	strb.w	r3, [fp, #189]	; 0xbd
  __HAL_UART_DISABLE(huart);
 8007576:	68d3      	ldr	r3, [r2, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007578:	f8db 108c 	ldr.w	r1, [fp, #140]	; 0x8c
  __HAL_UART_DISABLE(huart);
 800757c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007580:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007582:	6913      	ldr	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007584:	f8db 0090 	ldr.w	r0, [fp, #144]	; 0x90
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007588:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800758c:	430b      	orrs	r3, r1
 800758e:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007590:	f8db 3088 	ldr.w	r3, [fp, #136]	; 0x88
  MODIFY_REG(huart->Instance->CR1,
 8007594:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007596:	4303      	orrs	r3, r0
 8007598:	f8db 0094 	ldr.w	r0, [fp, #148]	; 0x94
  MODIFY_REG(huart->Instance->CR1,
 800759c:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80075a0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80075a4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80075a6:	430b      	orrs	r3, r1
 80075a8:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075aa:	6953      	ldr	r3, [r2, #20]
 80075ac:	f8db 1098 	ldr.w	r1, [fp, #152]	; 0x98
 80075b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075b4:	430b      	orrs	r3, r1
 80075b6:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80075b8:	4bd3      	ldr	r3, [pc, #844]	; (8007908 <main+0x850>)
 80075ba:	429a      	cmp	r2, r3
 80075bc:	f001 82f4 	beq.w	8008ba8 <main+0x1af0>
 80075c0:	4bd2      	ldr	r3, [pc, #840]	; (800790c <main+0x854>)
 80075c2:	49d3      	ldr	r1, [pc, #844]	; (8007910 <main+0x858>)
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80075ca:	440b      	add	r3, r1
 80075cc:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 80075d0:	40de      	lsrs	r6, r3
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075d2:	2319      	movs	r3, #25
 80075d4:	fb03 f606 	mul.w	r6, r3, r6
 80075d8:	f8db 3084 	ldr.w	r3, [fp, #132]	; 0x84
 80075dc:	2764      	movs	r7, #100	; 0x64
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	fbb6 f3f3 	udiv	r3, r6, r3
 80075e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80075e8:	fb07 3316 	mls	r3, r7, r6, r3
 80075ec:	011b      	lsls	r3, r3, #4
 80075ee:	3332      	adds	r3, #50	; 0x32
 80075f0:	fbb3 f3f7 	udiv	r3, r3, r7
  huart->gState = HAL_UART_STATE_READY;
 80075f4:	2120      	movs	r1, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f6:	2500      	movs	r5, #0
 80075f8:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075fc:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8007600:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007602:	6913      	ldr	r3, [r2, #16]
 8007604:	48c3      	ldr	r0, [pc, #780]	; (8007914 <main+0x85c>)
 8007606:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800760a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800760c:	6953      	ldr	r3, [r2, #20]
 800760e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007612:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8007614:	68d3      	ldr	r3, [r2, #12]
 8007616:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800761a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800761c:	f8cb 50c0 	str.w	r5, [fp, #192]	; 0xc0
  huart->gState = HAL_UART_STATE_READY;
 8007620:	f88b 10bd 	strb.w	r1, [fp, #189]	; 0xbd
  huart->RxState = HAL_UART_STATE_READY;
 8007624:	f88b 10be 	strb.w	r1, [fp, #190]	; 0xbe
 8007628:	6104      	str	r4, [r0, #16]
 800762a:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
 800762e:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
  while ((HAL_GetTick() - tickstart) < wait)
 8007632:	1a9b      	subs	r3, r3, r2
 8007634:	2bc8      	cmp	r3, #200	; 0xc8
 8007636:	d9fa      	bls.n	800762e <main+0x576>
    GPIOx->BSRR = GPIO_Pin;
 8007638:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800763c:	4bb5      	ldr	r3, [pc, #724]	; (8007914 <main+0x85c>)
{	
	LCD_RST_R
	HAL_Delay(200);
	LCD_RST_S
	
  LCD_Send_Cmd(HX8357_SLPOUT);
 800763e:	2011      	movs	r0, #17
 8007640:	611a      	str	r2, [r3, #16]
 8007642:	f7f8 fd85 	bl	8000150 <LCD_Send_Cmd>
  return uwTick;
 8007646:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
 800764a:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
  while ((HAL_GetTick() - tickstart) < wait)
 800764e:	1a9b      	subs	r3, r3, r2
 8007650:	2b78      	cmp	r3, #120	; 0x78
 8007652:	d9fa      	bls.n	800764a <main+0x592>
  HAL_Delay(120);
	LCD_Send_Cmd(HX8357_COLMOD);
 8007654:	203a      	movs	r0, #58	; 0x3a
 8007656:	f7f8 fd7b 	bl	8000150 <LCD_Send_Cmd>
	LCD_Send_Dat(0x55);
 800765a:	2055      	movs	r0, #85	; 0x55
 800765c:	f7f8 fdd8 	bl	8000210 <LCD_Send_Dat>
  return uwTick;
 8007660:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
 8007664:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
  while ((HAL_GetTick() - tickstart) < wait)
 8007668:	1a9b      	subs	r3, r3, r2
 800766a:	2b05      	cmp	r3, #5
 800766c:	d9fa      	bls.n	8007664 <main+0x5ac>
  HAL_Delay(5);
  LCD_Send_Cmd(HX8357_DISPON);
 800766e:	2029      	movs	r0, #41	; 0x29
 8007670:	f7f8 fd6e 	bl	8000150 <LCD_Send_Cmd>
	LCD_Orientation(DEFAULT_ORIENTATION);
}

void LCD_Orientation(uint8_t orientation)
{
	LCD_Send_Cmd(HX8357_MADCTL);
 8007674:	2036      	movs	r0, #54	; 0x36
 8007676:	f7f8 fd6b 	bl	8000150 <LCD_Send_Cmd>
	switch (orientation)
	{
	case 0:
	if (BGR) LCD_Send_Dat(MADCTL_BGR);
 800767a:	2008      	movs	r0, #8
 800767c:	f7f8 fdc8 	bl	8000210 <LCD_Send_Dat>
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8007680:	2100      	movs	r1, #0
 8007682:	f240 13df 	movw	r3, #479	; 0x1df
 8007686:	f240 123f 	movw	r2, #319	; 0x13f
 800768a:	4608      	mov	r0, r1
 800768c:	f7f8 fe48 	bl	8000320 <LCD_Window>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007690:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8007694:	f44f 3c16 	mov.w	ip, #153600	; 0x25800
 8007698:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    GPIOx->BSRR = GPIO_Pin;
 800769c:	4c9d      	ldr	r4, [pc, #628]	; (8007914 <main+0x85c>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800769e:	4b9e      	ldr	r3, [pc, #632]	; (8007918 <main+0x860>)
 80076a0:	f8df a278 	ldr.w	sl, [pc, #632]	; 800791c <main+0x864>
    GPIOx->BSRR = GPIO_Pin;
 80076a4:	2201      	movs	r2, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80076a6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 80076aa:	6122      	str	r2, [r4, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80076ac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80076b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80076b4:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80076b8:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 80076bc:	6122      	str	r2, [r4, #16]
 80076be:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 80076c2:	611e      	str	r6, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80076c4:	2220      	movs	r2, #32
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80076c6:	6118      	str	r0, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80076c8:	2740      	movs	r7, #64	; 0x40
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80076ca:	f8ca 5010 	str.w	r5, [sl, #16]
 80076ce:	f8ca 1010 	str.w	r1, [sl, #16]
 80076d2:	f8ca 6010 	str.w	r6, [sl, #16]
 80076d6:	f8ca 0010 	str.w	r0, [sl, #16]
 80076da:	f8ca 9010 	str.w	r9, [sl, #16]
 80076de:	f8ca 8010 	str.w	r8, [sl, #16]
 80076e2:	6119      	str	r1, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80076e4:	2180      	movs	r1, #128	; 0x80
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80076e6:	611d      	str	r5, [r3, #16]
 80076e8:	f8c3 e010 	str.w	lr, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 80076ec:	611a      	str	r2, [r3, #16]
 80076ee:	611f      	str	r7, [r3, #16]
 80076f0:	6119      	str	r1, [r3, #16]
 80076f2:	2110      	movs	r1, #16
 80076f4:	f8ca 1010 	str.w	r1, [sl, #16]
 80076f8:	f8ca 2010 	str.w	r2, [sl, #16]
 80076fc:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80076fe:	6126      	str	r6, [r4, #16]
    GPIOx->BSRR = GPIO_Pin;
 8007700:	6122      	str	r2, [r4, #16]
 8007702:	f44f 6280 	mov.w	r2, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8007706:	f1bc 0c01 	subs.w	ip, ip, #1
 800770a:	6122      	str	r2, [r4, #16]
 800770c:	d1ca      	bne.n	80076a4 <main+0x5ec>
	LCD_Window(y, x, y + h - 1, x + w - 1);
 800770e:	2101      	movs	r1, #1
 8007710:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8007714:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8007718:	4608      	mov	r0, r1
 800771a:	f7f8 fe01 	bl	8000320 <LCD_Window>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800771e:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 8007722:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 8007726:	4e7e      	ldr	r6, [pc, #504]	; (8007920 <main+0x868>)
    GPIOx->BSRR = GPIO_Pin;
 8007728:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 8007914 <main+0x85c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800772c:	4a7a      	ldr	r2, [pc, #488]	; (8007918 <main+0x860>)
 800772e:	4b7b      	ldr	r3, [pc, #492]	; (800791c <main+0x864>)
    GPIOx->BSRR = GPIO_Pin;
 8007730:	2101      	movs	r1, #1
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007732:	f44f 2480 	mov.w	r4, #262144	; 0x40000
    GPIOx->BSRR = GPIO_Pin;
 8007736:	f8ca 1010 	str.w	r1, [sl, #16]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800773a:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800773e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8007742:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8007746:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 800774a:	f8ca 1010 	str.w	r1, [sl, #16]
 800774e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007752:	f8c2 c010 	str.w	ip, [r2, #16]
 8007756:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800775a:	6115      	str	r5, [r2, #16]
 800775c:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
 8007760:	611f      	str	r7, [r3, #16]
 8007762:	611c      	str	r4, [r3, #16]
 8007764:	f8c3 c010 	str.w	ip, [r3, #16]
 8007768:	611d      	str	r5, [r3, #16]
 800776a:	f8c3 9010 	str.w	r9, [r3, #16]
 800776e:	f8c3 8010 	str.w	r8, [r3, #16]
 8007772:	6114      	str	r4, [r2, #16]
 8007774:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 8007778:	6117      	str	r7, [r2, #16]
 800777a:	6110      	str	r0, [r2, #16]
 800777c:	6111      	str	r1, [r2, #16]
 800777e:	f8c2 e010 	str.w	lr, [r2, #16]
 8007782:	6114      	str	r4, [r2, #16]
 8007784:	6118      	str	r0, [r3, #16]
 8007786:	6119      	str	r1, [r3, #16]
    GPIOx->BSRR = GPIO_Pin;
 8007788:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800778a:	f8ca c010 	str.w	ip, [sl, #16]
    GPIOx->BSRR = GPIO_Pin;
 800778e:	f8ca 1010 	str.w	r1, [sl, #16]
 8007792:	f44f 6180 	mov.w	r1, #1024	; 0x400
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8007796:	3e01      	subs	r6, #1
 8007798:	f8ca 1010 	str.w	r1, [sl, #16]
 800779c:	d1c8      	bne.n	8007730 <main+0x678>
    uint16_t dt[1] = {0};
 800779e:	4634      	mov	r4, r6
 80077a0:	4e60      	ldr	r6, [pc, #384]	; (8007924 <main+0x86c>)
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_36, 1, RED);
 80077a2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80077a6:	217f      	movs	r1, #127	; 0x7f
 80077a8:	2014      	movs	r0, #20
	LCD_Font(20, 127, "Waiting for I2C devices", &DejaVu_Sans_36, 1, RED);
 80077aa:	46b1      	mov	r9, r6
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_36, 1, RED);
 80077ac:	4a5e      	ldr	r2, [pc, #376]	; (8007928 <main+0x870>)
 80077ae:	f7fd fe4b 	bl	8005448 <LCD_Font.constprop.3>
	LCD_Font(20, 127, "Clearing EEPROM", &DejaVu_Sans_36, 1, BLACK);
 80077b2:	217f      	movs	r1, #127	; 0x7f
 80077b4:	2014      	movs	r0, #20
 80077b6:	4a5c      	ldr	r2, [pc, #368]	; (8007928 <main+0x870>)
 80077b8:	f7fc fcc4 	bl	8004144 <LCD_Font.constprop.2>
	LCD_Font(20, 127, "Waiting for I2C devices", &DejaVu_Sans_36, 1, RED);
 80077bc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80077c0:	217f      	movs	r1, #127	; 0x7f
 80077c2:	2014      	movs	r0, #20
 80077c4:	4a59      	ldr	r2, [pc, #356]	; (800792c <main+0x874>)
 80077c6:	f7fd fe3f 	bl	8005448 <LCD_Font.constprop.3>
	for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80077ca:	fa1f f589 	uxth.w	r5, r9
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80077ce:	f5c5 777a 	rsb	r7, r5, #1000	; 0x3e8
 80077d2:	463d      	mov	r5, r7
 80077d4:	f506 769d 	add.w	r6, r6, #314	; 0x13a
 80077d8:	3701      	adds	r7, #1
 80077da:	fa1f f889 	uxth.w	r8, r9
 80077de:	eb08 0005 	add.w	r0, r8, r5
 80077e2:	b280      	uxth	r0, r0
 80077e4:	a91e      	add	r1, sp, #120	; 0x78
    uint16_t dt[1] = {0};
 80077e6:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80077ea:	f7fb fc83 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
 80077ee:	eb08 0007 	add.w	r0, r8, r7
 80077f2:	b280      	uxth	r0, r0
    return dt[0];
 80077f4:	f8bd 8078 	ldrh.w	r8, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80077f8:	a91e      	add	r1, sp, #120	; 0x78
    uint16_t dt[1] = {0};
 80077fa:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80077fe:	f7fb fc79 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8007802:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
	return (byteH << 8) | byteL;
 8007806:	fa5f f888 	uxtb.w	r8, r8
 800780a:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
	for (uint16_t i = 0; i < 157; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 800780e:	f829 8f02 	strh.w	r8, [r9, #2]!
 8007812:	454e      	cmp	r6, r9
 8007814:	d1e1      	bne.n	80077da <main+0x722>
 8007816:	4e46      	ldr	r6, [pc, #280]	; (8007930 <main+0x878>)
    uint16_t dt[1] = {0};
 8007818:	2400      	movs	r4, #0
 800781a:	46b1      	mov	r9, r6
 800781c:	fa1f f589 	uxth.w	r5, r9
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007820:	f5c5 67fa 	rsb	r7, r5, #2000	; 0x7d0
 8007824:	463d      	mov	r5, r7
 8007826:	f506 769d 	add.w	r6, r6, #314	; 0x13a
 800782a:	3701      	adds	r7, #1
	for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 800782c:	fa1f f889 	uxth.w	r8, r9
 8007830:	eb08 0005 	add.w	r0, r8, r5
 8007834:	b280      	uxth	r0, r0
 8007836:	a91e      	add	r1, sp, #120	; 0x78
    uint16_t dt[1] = {0};
 8007838:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800783c:	f7fb fc5a 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
 8007840:	eb08 0007 	add.w	r0, r8, r7
 8007844:	b280      	uxth	r0, r0
    return dt[0];
 8007846:	f8bd 8078 	ldrh.w	r8, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800784a:	a91e      	add	r1, sp, #120	; 0x78
    uint16_t dt[1] = {0};
 800784c:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007850:	f7fb fc50 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 8007854:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
	return (byteH << 8) | byteL;
 8007858:	fa5f f888 	uxtb.w	r8, r8
 800785c:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
	for (uint16_t i = 0; i < 157; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8007860:	f829 8f02 	strh.w	r8, [r9, #2]!
 8007864:	454e      	cmp	r6, r9
 8007866:	d1e1      	bne.n	800782c <main+0x774>
 8007868:	4e32      	ldr	r6, [pc, #200]	; (8007934 <main+0x87c>)
    uint16_t dt[1] = {0};
 800786a:	2400      	movs	r4, #0
 800786c:	46b2      	mov	sl, r6
 800786e:	fa1f f58a 	uxth.w	r5, sl
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007872:	f5c5 673b 	rsb	r7, r5, #2992	; 0xbb0
 8007876:	463d      	mov	r5, r7
 8007878:	f506 769d 	add.w	r6, r6, #314	; 0x13a
 800787c:	3708      	adds	r7, #8
 800787e:	3509      	adds	r5, #9
	for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8007880:	fa1f f98a 	uxth.w	r9, sl
 8007884:	eb09 0007 	add.w	r0, r9, r7
 8007888:	b280      	uxth	r0, r0
 800788a:	a91e      	add	r1, sp, #120	; 0x78
    uint16_t dt[1] = {0};
 800788c:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8007890:	f7fb fc30 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
 8007894:	eb09 0005 	add.w	r0, r9, r5
 8007898:	b280      	uxth	r0, r0
    return dt[0];
 800789a:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800789e:	a91e      	add	r1, sp, #120	; 0x78
    uint16_t dt[1] = {0};
 80078a0:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80078a4:	f7fb fc26 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 80078a8:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
	return (byteH << 8) | byteL;
 80078ac:	fa5f f989 	uxtb.w	r9, r9
 80078b0:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
	for (uint16_t i = 0; i < 157; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 80078b4:	f82a 9f02 	strh.w	r9, [sl, #2]!
 80078b8:	4556      	cmp	r6, sl
    uint16_t dt[1] = {0};
 80078ba:	f04f 0800 	mov.w	r8, #0
 80078be:	d1df      	bne.n	8007880 <main+0x7c8>
	LCD_Font(20, 127, "Waiting for I2C devices", &DejaVu_Sans_36, 1, BLACK);
 80078c0:	217f      	movs	r1, #127	; 0x7f
 80078c2:	2014      	movs	r0, #20
 80078c4:	4a19      	ldr	r2, [pc, #100]	; (800792c <main+0x874>)
 80078c6:	f7fc fc3d 	bl	8004144 <LCD_Font.constprop.2>
}

void BME280_Init(void) {
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 80078ca:	f240 53f2 	movw	r3, #1522	; 0x5f2
    cmd[1] = 0x05; // Humidity oversampling x16
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80078ce:	2202      	movs	r2, #2
 80078d0:	20ec      	movs	r0, #236	; 0xec
 80078d2:	a91e      	add	r1, sp, #120	; 0x78
    cmd[0] = 0xF2; // ctrl_hum
 80078d4:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80078d8:	f7fc f956 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF4; // ctrl_meas
 80078dc:	f24b 73f4 	movw	r3, #47092	; 0xb7f4
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80078e0:	2202      	movs	r2, #2
 80078e2:	20ec      	movs	r0, #236	; 0xec
 80078e4:	a91e      	add	r1, sp, #120	; 0x78
    cmd[0] = 0xF4; // ctrl_meas
 80078e6:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80078ea:	f7fc f94d 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0xF5; // config
 80078ee:	f24a 03f5 	movw	r3, #41205	; 0xa0f5
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80078f2:	2202      	movs	r2, #2
 80078f4:	20ec      	movs	r0, #236	; 0xec
 80078f6:	a91e      	add	r1, sp, #120	; 0x78
    cmd[0] = 0xF5; // config
 80078f8:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80078fc:	f7fc f944 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>

    cmd[0] = 0x88; // read dig_T regs
 8007900:	2388      	movs	r3, #136	; 0x88
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007902:	2201      	movs	r2, #1
 8007904:	20ec      	movs	r0, #236	; 0xec
 8007906:	e017      	b.n	8007938 <main+0x880>
 8007908:	40013800 	.word	0x40013800
 800790c:	40021000 	.word	0x40021000
 8007910:	0800d648 	.word	0x0800d648
 8007914:	40010c00 	.word	0x40010c00
 8007918:	40010800 	.word	0x40010800
 800791c:	40011000 	.word	0x40011000
 8007920:	000251c4 	.word	0x000251c4
 8007924:	200002ee 	.word	0x200002ee
 8007928:	0801df6c 	.word	0x0801df6c
 800792c:	0801df7c 	.word	0x0801df7c
 8007930:	2000042a 	.word	0x2000042a
 8007934:	20000566 	.word	0x20000566
 8007938:	a91e      	add	r1, sp, #120	; 0x78
    cmd[0] = 0x88; // read dig_T regs
 800793a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800793e:	f7fc f923 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 8007942:	2206      	movs	r2, #6
 8007944:	20ec      	movs	r0, #236	; 0xec
 8007946:	a91e      	add	r1, sp, #120	; 0x78
 8007948:	f7fb ff0c 	bl	8003764 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_T1 = (cmd[1] << 8) | cmd[0];
    dig_T2 = (cmd[3] << 8) | cmd[2];
    dig_T3 = (cmd[5] << 8) | cmd[4];

    cmd[0] = 0x8E; // read dig_P regs
 800794c:	238e      	movs	r3, #142	; 0x8e
    dig_T1 = (cmd[1] << 8) | cmd[0];
 800794e:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    cmd[0] = 0x8E; // read dig_P regs
 8007952:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8007956:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800795a:	20ec      	movs	r0, #236	; 0xec
    dig_T2 = (cmd[3] << 8) | cmd[2];
 800795c:	f8ab 35b6 	strh.w	r3, [fp, #1462]	; 0x5b6
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8007960:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    dig_T1 = (cmd[1] << 8) | cmd[0];
 8007964:	f8ab 25b4 	strh.w	r2, [fp, #1460]	; 0x5b4
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007968:	a91e      	add	r1, sp, #120	; 0x78
 800796a:	2201      	movs	r2, #1
    dig_T3 = (cmd[5] << 8) | cmd[4];
 800796c:	f8ab 35b8 	strh.w	r3, [fp, #1464]	; 0x5b8
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8007970:	f7fc f90a 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 8007974:	2212      	movs	r2, #18
 8007976:	20ec      	movs	r0, #236	; 0xec
 8007978:	a91e      	add	r1, sp, #120	; 0x78
 800797a:	f7fb fef3 	bl	8003764 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    dig_P6 = (cmd[11] << 8) | cmd[10];
    dig_P7 = (cmd[13] << 8) | cmd[12];
    dig_P8 = (cmd[15] << 8) | cmd[14];
    dig_P9 = (cmd[17] << 8) | cmd[16];

    cmd[0] = 0xA1; // read dig_H regs
 800797e:	23a1      	movs	r3, #161	; 0xa1
    dig_P1 = (cmd[1] << 8) | cmd[0];
 8007980:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    cmd[0] = 0xA1; // read dig_H regs
 8007984:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
    dig_P2 = (cmd[3] << 8) | cmd[2];
 8007988:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800798c:	20ec      	movs	r0, #236	; 0xec
    dig_P2 = (cmd[3] << 8) | cmd[2];
 800798e:	f8ab 35bc 	strh.w	r3, [fp, #1468]	; 0x5bc
    dig_P3 = (cmd[5] << 8) | cmd[4];
 8007992:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    dig_P1 = (cmd[1] << 8) | cmd[0];
 8007996:	f8ab 25ba 	strh.w	r2, [fp, #1466]	; 0x5ba
    dig_P3 = (cmd[5] << 8) | cmd[4];
 800799a:	f8ab 35be 	strh.w	r3, [fp, #1470]	; 0x5be
    dig_P4 = (cmd[7] << 8) | cmd[6];
 800799e:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80079a2:	2201      	movs	r2, #1
    dig_P4 = (cmd[7] << 8) | cmd[6];
 80079a4:	f8ab 35c0 	strh.w	r3, [fp, #1472]	; 0x5c0
    dig_P5 = (cmd[9] << 8) | cmd[8];
 80079a8:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80079ac:	a91e      	add	r1, sp, #120	; 0x78
    dig_P5 = (cmd[9] << 8) | cmd[8];
 80079ae:	f8ab 35c2 	strh.w	r3, [fp, #1474]	; 0x5c2
    dig_P6 = (cmd[11] << 8) | cmd[10];
 80079b2:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 80079b6:	f8ab 35c4 	strh.w	r3, [fp, #1476]	; 0x5c4
    dig_P7 = (cmd[13] << 8) | cmd[12];
 80079ba:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 80079be:	f8ab 35c6 	strh.w	r3, [fp, #1478]	; 0x5c6
    dig_P8 = (cmd[15] << 8) | cmd[14];
 80079c2:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
 80079c6:	f8ab 35c8 	strh.w	r3, [fp, #1480]	; 0x5c8
    dig_P9 = (cmd[17] << 8) | cmd[16];
 80079ca:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 80079ce:	f8ab 35ca 	strh.w	r3, [fp, #1482]	; 0x5ca
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80079d2:	f7fc f8d9 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80079d6:	2201      	movs	r2, #1
 80079d8:	20ec      	movs	r0, #236	; 0xec
 80079da:	a91e      	add	r1, sp, #120	; 0x78
 80079dc:	f7fb fec2 	bl	8003764 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    cmd[1] = 0xE1; // read dig_H regs
 80079e0:	23e1      	movs	r3, #225	; 0xe1

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 80079e2:	2201      	movs	r2, #1
 80079e4:	20ec      	movs	r0, #236	; 0xec
 80079e6:	f10d 0179 	add.w	r1, sp, #121	; 0x79
    cmd[1] = 0xE1; // read dig_H regs
 80079ea:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 80079ee:	f7fc f8cb 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 80079f2:	2207      	movs	r2, #7
 80079f4:	20ec      	movs	r0, #236	; 0xec
 80079f6:	f10d 0179 	add.w	r1, sp, #121	; 0x79
 80079fa:	f7fb feb3 	bl	8003764 <HAL_I2C_Master_Receive.constprop.0.isra.0>

    dig_H1 = cmd[0];
 80079fe:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
    dig_H2 = (cmd[2] << 8) | cmd[1];
    dig_H3 = cmd[3];
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8007a02:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
    dig_H1 = cmd[0];
 8007a06:	f8ab 25cc 	strh.w	r2, [fp, #1484]	; 0x5cc
    dig_H2 = (cmd[2] << 8) | cmd[1];
 8007a0a:	f8bd 2079 	ldrh.w	r2, [sp, #121]	; 0x79
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8007a0e:	f89d 007c 	ldrb.w	r0, [sp, #124]	; 0x7c
    dig_H2 = (cmd[2] << 8) | cmd[1];
 8007a12:	f8ab 25ce 	strh.w	r2, [fp, #1486]	; 0x5ce
    dig_H3 = cmd[3];
 8007a16:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8007a1a:	f89d 107e 	ldrb.w	r1, [sp, #126]	; 0x7e
    dig_H3 = cmd[3];
 8007a1e:	f8ab 25d0 	strh.w	r2, [fp, #1488]	; 0x5d0
    dig_H6 = cmd[7];
 8007a22:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8007a26:	f8ab 25d6 	strh.w	r2, [fp, #1494]	; 0x5d6
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8007a2a:	f003 020f 	and.w	r2, r3, #15
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8007a2e:	091b      	lsrs	r3, r3, #4
 8007a30:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8007a34:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 8007a38:	f8ab 35d4 	strh.w	r3, [fp, #1492]	; 0x5d4
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 8007a3c:	f8ab 25d2 	strh.w	r2, [fp, #1490]	; 0x5d2
	DS3231_Update();
 8007a40:	f7fc f9d6 	bl	8003df0 <DS3231_Update>
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a44:	f89b 30be 	ldrb.w	r3, [fp, #190]	; 0xbe
 8007a48:	2b20      	cmp	r3, #32
 8007a4a:	d122      	bne.n	8007a92 <main+0x9da>
    __HAL_LOCK(huart);
 8007a4c:	f89b 30bc 	ldrb.w	r3, [fp, #188]	; 0xbc
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d01e      	beq.n	8007a92 <main+0x9da>
  huart->RxXferSize = Size;
 8007a54:	2201      	movs	r2, #1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a56:	2122      	movs	r1, #34	; 0x22
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a58:	f8db 3080 	ldr.w	r3, [fp, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5c:	f8cb 40b0 	str.w	r4, [fp, #176]	; 0xb0
  __HAL_UNLOCK(huart);
 8007a60:	f88b 80bc 	strb.w	r8, [fp, #188]	; 0xbc
  huart->RxXferCount = Size;
 8007a64:	f8ab 20ae 	strh.w	r2, [fp, #174]	; 0xae
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a68:	f8cb 40c0 	str.w	r4, [fp, #192]	; 0xc0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a6c:	f88b 10be 	strb.w	r1, [fp, #190]	; 0xbe
  huart->RxXferSize = Size;
 8007a70:	f8ab 20ac 	strh.w	r2, [fp, #172]	; 0xac
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a74:	68da      	ldr	r2, [r3, #12]
  huart->pRxBuffPtr = pData;
 8007a76:	48b3      	ldr	r0, [pc, #716]	; (8007d44 <main+0xc8c>)
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  huart->pRxBuffPtr = pData;
 8007a7c:	f8cb 00a8 	str.w	r0, [fp, #168]	; 0xa8
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a80:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007a82:	695a      	ldr	r2, [r3, #20]
 8007a84:	f042 0201 	orr.w	r2, r2, #1
 8007a88:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007a8a:	68da      	ldr	r2, [r3, #12]
 8007a8c:	f042 0220 	orr.w	r2, r2, #32
 8007a90:	60da      	str	r2, [r3, #12]
	uint8_t uartTransmit[] = "UART OK\r\n";
 8007a92:	4aad      	ldr	r2, [pc, #692]	; (8007d48 <main+0xc90>)
 8007a94:	ab17      	add	r3, sp, #92	; 0x5c
 8007a96:	ca07      	ldmia	r2, {r0, r1, r2}
  if (huart->gState == HAL_UART_STATE_READY)
 8007a98:	f89b 40bd 	ldrb.w	r4, [fp, #189]	; 0xbd
 8007a9c:	c303      	stmia	r3!, {r0, r1}
 8007a9e:	2c20      	cmp	r4, #32
 8007aa0:	801a      	strh	r2, [r3, #0]
 8007aa2:	d107      	bne.n	8007ab4 <main+0x9fc>
    __HAL_LOCK(huart);
 8007aa4:	f89b 30bc 	ldrb.w	r3, [fp, #188]	; 0xbc
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d003      	beq.n	8007ab4 <main+0x9fc>
 8007aac:	210a      	movs	r1, #10
 8007aae:	a817      	add	r0, sp, #92	; 0x5c
 8007ab0:	f7fc fa24 	bl	8003efc <HAL_UART_Transmit.part.0.constprop.0.isra.0>
	uint8_t uartTransmitDMA[] = "UART DMA OK\r\n";
 8007ab4:	ad1a      	add	r5, sp, #104	; 0x68
 8007ab6:	462c      	mov	r4, r5
 8007ab8:	4ba4      	ldr	r3, [pc, #656]	; (8007d4c <main+0xc94>)
  if (huart->gState == HAL_UART_STATE_READY)
 8007aba:	f89b 60bd 	ldrb.w	r6, [fp, #189]	; 0xbd
 8007abe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ac0:	c407      	stmia	r4!, {r0, r1, r2}
 8007ac2:	2e20      	cmp	r6, #32
 8007ac4:	8023      	strh	r3, [r4, #0]
 8007ac6:	d153      	bne.n	8007b70 <main+0xab8>
    __HAL_LOCK(huart);
 8007ac8:	f89b 30bc 	ldrb.w	r3, [fp, #188]	; 0xbc
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d04f      	beq.n	8007b70 <main+0xab8>
    huart->TxXferSize = Size;
 8007ad0:	260e      	movs	r6, #14
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ad2:	2200      	movs	r2, #0
    __HAL_LOCK(huart);
 8007ad4:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ad6:	f04f 0e21 	mov.w	lr, #33	; 0x21
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007ada:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007ade:	4c9c      	ldr	r4, [pc, #624]	; (8007d50 <main+0xc98>)
    huart->TxXferCount = Size;
 8007ae0:	f8ab 60a6 	strh.w	r6, [fp, #166]	; 0xa6
    __HAL_LOCK(huart);
 8007ae4:	f88b 10bc 	strb.w	r1, [fp, #188]	; 0xbc
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ae8:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
    huart->pTxBuffPtr = pData;
 8007aec:	f8cb 50a0 	str.w	r5, [fp, #160]	; 0xa0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007af0:	f88b e0bd 	strb.w	lr, [fp, #189]	; 0xbd
    huart->TxXferSize = Size;
 8007af4:	f8ab 60a4 	strh.w	r6, [fp, #164]	; 0xa4
    huart->hdmatx->XferAbortCallback = NULL;
 8007af8:	e9c3 420c 	strd	r4, r2, [r3, #48]	; 0x30
  __HAL_LOCK(hdma);
 8007afc:	f893 4020 	ldrb.w	r4, [r3, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007b00:	f8df c250 	ldr.w	ip, [pc, #592]	; 8007d54 <main+0xc9c>
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007b04:	4f94      	ldr	r7, [pc, #592]	; (8007d58 <main+0xca0>)
 8007b06:	428c      	cmp	r4, r1
 8007b08:	e9c3 c70a 	strd	ip, r7, [r3, #40]	; 0x28
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007b0c:	f8db 0080 	ldr.w	r0, [fp, #128]	; 0x80
 8007b10:	d024      	beq.n	8007b5c <main+0xaa4>
  if(HAL_DMA_STATE_READY == hdma->State)
 8007b12:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
  __HAL_LOCK(hdma);
 8007b16:	f883 1020 	strb.w	r1, [r3, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8007b1a:	428c      	cmp	r4, r1
 8007b1c:	f041 805c 	bne.w	8008bd8 <main+0x1b20>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b20:	639a      	str	r2, [r3, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b22:	2202      	movs	r2, #2
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007b24:	6c19      	ldr	r1, [r3, #64]	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    __HAL_DMA_DISABLE(hdma);
 8007b2a:	681a      	ldr	r2, [r3, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007b2c:	408c      	lsls	r4, r1
    __HAL_DMA_DISABLE(hdma);
 8007b2e:	6811      	ldr	r1, [r2, #0]
 8007b30:	f021 0101 	bic.w	r1, r1, #1
 8007b34:	6011      	str	r1, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007b36:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007b38:	604c      	str	r4, [r1, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b3a:	6859      	ldr	r1, [r3, #4]
 8007b3c:	1d03      	adds	r3, r0, #4
 8007b3e:	2910      	cmp	r1, #16
  hdma->Instance->CNDTR = DataLength;
 8007b40:	6056      	str	r6, [r2, #4]
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007b42:	bf0b      	itete	eq
 8007b44:	6093      	streq	r3, [r2, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8007b46:	6095      	strne	r5, [r2, #8]
    hdma->Instance->CMAR = SrcAddress;
 8007b48:	60d5      	streq	r5, [r2, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8007b4a:	60d3      	strne	r3, [r2, #12]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b4c:	6813      	ldr	r3, [r2, #0]
 8007b4e:	f043 030e 	orr.w	r3, r3, #14
 8007b52:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8007b54:	6813      	ldr	r3, [r2, #0]
 8007b56:	f043 0301 	orr.w	r3, r3, #1
 8007b5a:	6013      	str	r3, [r2, #0]
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007b5c:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8007b60:	6003      	str	r3, [r0, #0]
    __HAL_UNLOCK(huart);
 8007b62:	2300      	movs	r3, #0
 8007b64:	f88b 30bc 	strb.w	r3, [fp, #188]	; 0xbc
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b68:	6943      	ldr	r3, [r0, #20]
 8007b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b6e:	6143      	str	r3, [r0, #20]
		if (rx_index != 0) {
 8007b70:	f89b 35d9 	ldrb.w	r3, [fp, #1497]	; 0x5d9
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f040 8409 	bne.w	800838c <main+0x12d4>
		DS3231_Update();
 8007b7a:	f7fc f939 	bl	8003df0 <DS3231_Update>

uint8_t DS3231_getSec(void) {
    return bcdToDec(rtcBuffer[0]);
 8007b7e:	f89b 6058 	ldrb.w	r6, [fp, #88]	; 0x58
}

uint8_t DS3231_getMin(void) {
    return bcdToDec(rtcBuffer[1]);
 8007b82:	f89b 5059 	ldrb.w	r5, [fp, #89]	; 0x59
    return ((val / 16 * 10) + (val % 16));
 8007b86:	0937      	lsrs	r7, r6, #4
 8007b88:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8007b8c:	f006 060f 	and.w	r6, r6, #15
 8007b90:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 8007b94:	b2f7      	uxtb	r7, r6
 8007b96:	092e      	lsrs	r6, r5, #4
 8007b98:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8007b9c:	f005 050f 	and.w	r5, r5, #15
}

uint8_t DS3231_getHrs(void) {
    return bcdToDec(rtcBuffer[2]);
 8007ba0:	f89b 405a 	ldrb.w	r4, [fp, #90]	; 0x5a
    return ((val / 16 * 10) + (val % 16));
 8007ba4:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 8007ba8:	b2ed      	uxtb	r5, r5
 8007baa:	9507      	str	r5, [sp, #28]
		rtcMin = DS3231_getMin();
 8007bac:	f88b 55db 	strb.w	r5, [fp, #1499]	; 0x5db
 8007bb0:	0925      	lsrs	r5, r4, #4
}

uint8_t DS3231_getDay(void) {
    return bcdToDec(rtcBuffer[3]);
 8007bb2:	f89b 005b 	ldrb.w	r0, [fp, #91]	; 0x5b
    return ((val / 16 * 10) + (val % 16));
 8007bb6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8007bba:	f004 040f 	and.w	r4, r4, #15
 8007bbe:	eb04 0445 	add.w	r4, r4, r5, lsl #1
		rtcHrs = DS3231_getHrs();
 8007bc2:	f88b 40ec 	strb.w	r4, [fp, #236]	; 0xec
 8007bc6:	0904      	lsrs	r4, r0, #4
}

uint8_t DS3231_getDate(void) {
    return bcdToDec(rtcBuffer[4]);
 8007bc8:	f89b 105c 	ldrb.w	r1, [fp, #92]	; 0x5c
    return ((val / 16 * 10) + (val % 16));
 8007bcc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8007bd0:	f000 000f 	and.w	r0, r0, #15
 8007bd4:	eb00 0044 	add.w	r0, r0, r4, lsl #1
		rtcDay = DS3231_getDay();
 8007bd8:	f88b 05dc 	strb.w	r0, [fp, #1500]	; 0x5dc
 8007bdc:	0908      	lsrs	r0, r1, #4
}

uint8_t DS3231_getMonth(void) {
    return bcdToDec(rtcBuffer[5]);
 8007bde:	f89b 205d 	ldrb.w	r2, [fp, #93]	; 0x5d
    return ((val / 16 * 10) + (val % 16));
 8007be2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007be6:	f001 010f 	and.w	r1, r1, #15
 8007bea:	eb01 0140 	add.w	r1, r1, r0, lsl #1
		rtcDate = DS3231_getDate();
 8007bee:	f88b 15dd 	strb.w	r1, [fp, #1501]	; 0x5dd
 8007bf2:	0911      	lsrs	r1, r2, #4
}

uint8_t DS3231_getYear(void) {
    return bcdToDec(rtcBuffer[6]);
 8007bf4:	f89b 305e 	ldrb.w	r3, [fp, #94]	; 0x5e
    return ((val / 16 * 10) + (val % 16));
 8007bf8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007bfc:	f002 020f 	and.w	r2, r2, #15
 8007c00:	eb02 0241 	add.w	r2, r2, r1, lsl #1
		rtcMonth = DS3231_getMonth();
 8007c04:	f88b 25de 	strb.w	r2, [fp, #1502]	; 0x5de
 8007c08:	091a      	lsrs	r2, r3, #4
 8007c0a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007c0e:	f003 030f 	and.w	r3, r3, #15
 8007c12:	eb03 0342 	add.w	r3, r3, r2, lsl #1
		rtcYear = DS3231_getYear();
 8007c16:	f88b 35df 	strb.w	r3, [fp, #1503]	; 0x5df
		if (rtcSecLast != rtcSec) {
 8007c1a:	4b50      	ldr	r3, [pc, #320]	; (8007d5c <main+0xca4>)
 8007c1c:	9708      	str	r7, [sp, #32]
 8007c1e:	7a1b      	ldrb	r3, [r3, #8]
		rtcSec = DS3231_getSec();
 8007c20:	f88b 75da 	strb.w	r7, [fp, #1498]	; 0x5da
		if (rtcSecLast != rtcSec) {
 8007c24:	42bb      	cmp	r3, r7
 8007c26:	d0a3      	beq.n	8007b70 <main+0xab8>
 8007c28:	2200      	movs	r2, #0
 8007c2a:	2308      	movs	r3, #8
	P = 1 - radius;
 8007c2c:	2401      	movs	r4, #1
 8007c2e:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8007c32:	f06f 0206 	mvn.w	r2, #6
 8007c36:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8007c3a:	469b      	mov	fp, r3
 8007c3c:	e9cd 2405 	strd	r2, r4, [sp, #20]
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8007c40:	4d47      	ldr	r5, [pc, #284]	; (8007d60 <main+0xca8>)
 8007c42:	2301      	movs	r3, #1
 8007c44:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8007c48:	f10b 0723 	add.w	r7, fp, #35	; 0x23
 8007c4c:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 8007c50:	b2bf      	uxth	r7, r7
 8007c52:	fa1f f989 	uxth.w	r9, r9
 8007c56:	4639      	mov	r1, r7
 8007c58:	461a      	mov	r2, r3
 8007c5a:	4648      	mov	r0, r9
 8007c5c:	9500      	str	r5, [sp, #0]
 8007c5e:	f7f8 ff33 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8007c62:	2301      	movs	r3, #1
 8007c64:	f104 0a23 	add.w	sl, r4, #35	; 0x23
 8007c68:	f10b 06ac 	add.w	r6, fp, #172	; 0xac
 8007c6c:	b2b6      	uxth	r6, r6
 8007c6e:	fa1f fa8a 	uxth.w	sl, sl
 8007c72:	4630      	mov	r0, r6
 8007c74:	461a      	mov	r2, r3
 8007c76:	4651      	mov	r1, sl
 8007c78:	9500      	str	r5, [sp, #0]
 8007c7a:	f7f8 ff25 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8007c7e:	2301      	movs	r3, #1
 8007c80:	f1c4 08ac 	rsb	r8, r4, #172	; 0xac
 8007c84:	fa1f f888 	uxth.w	r8, r8
 8007c88:	4639      	mov	r1, r7
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	4640      	mov	r0, r8
 8007c8e:	9500      	str	r5, [sp, #0]
 8007c90:	f7f8 ff1a 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8007c94:	2301      	movs	r3, #1
 8007c96:	f1cb 07ac 	rsb	r7, fp, #172	; 0xac
 8007c9a:	b2bf      	uxth	r7, r7
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	4651      	mov	r1, sl
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	9500      	str	r5, [sp, #0]
 8007ca4:	f7f8 ff10 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8007ca8:	2301      	movs	r3, #1
 8007caa:	f1c4 0423 	rsb	r4, r4, #35	; 0x23
 8007cae:	b2a4      	uxth	r4, r4
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	9500      	str	r5, [sp, #0]
 8007cb8:	f7f8 ff06 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	f1cb 0623 	rsb	r6, fp, #35	; 0x23
 8007cc2:	b2b6      	uxth	r6, r6
 8007cc4:	4631      	mov	r1, r6
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	4648      	mov	r0, r9
 8007cca:	9500      	str	r5, [sp, #0]
 8007ccc:	f7f8 fefc 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	4631      	mov	r1, r6
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	4640      	mov	r0, r8
 8007cd8:	9500      	str	r5, [sp, #0]
 8007cda:	f7f8 fef5 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8007cde:	2301      	movs	r3, #1
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	9500      	str	r5, [sp, #0]
 8007ce8:	f7f8 feee 	bl	8000ac8 <LCD_Rect_Fill>
			P = (P + 5) + (2 * (a_ - b_));
 8007cec:	e9dd 4603 	ldrd	r4, r6, [sp, #12]
 8007cf0:	9b05      	ldr	r3, [sp, #20]
 8007cf2:	1ba1      	subs	r1, r4, r6
		if (P < 0)
 8007cf4:	2b00      	cmp	r3, #0
			P = (P + 5) + (2 * (a_ - b_));
 8007cf6:	f103 0205 	add.w	r2, r3, #5
			P = (P + 3) + (2 * a_);
 8007cfa:	f103 0003 	add.w	r0, r3, #3
		if (P < 0)
 8007cfe:	f2c0 84ad 	blt.w	800865c <main+0x15a4>
			a_++;
 8007d02:	9c06      	ldr	r4, [sp, #24]
			P = (P + 5) + (2 * (a_ - b_));
 8007d04:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			a_++;
 8007d08:	4623      	mov	r3, r4
			P = (P + 5) + (2 * (a_ - b_));
 8007d0a:	9205      	str	r2, [sp, #20]
	while (a_ <= b_)
 8007d0c:	9a03      	ldr	r2, [sp, #12]
			b_--;
 8007d0e:	1e70      	subs	r0, r6, #1
	while (a_ <= b_)
 8007d10:	3201      	adds	r2, #1
 8007d12:	3301      	adds	r3, #1
 8007d14:	4284      	cmp	r4, r0
			b_--;
 8007d16:	9004      	str	r0, [sp, #16]
	while (a_ <= b_)
 8007d18:	9203      	str	r2, [sp, #12]
 8007d1a:	fa1f fb80 	uxth.w	fp, r0
 8007d1e:	9306      	str	r3, [sp, #24]
 8007d20:	dd8f      	ble.n	8007c42 <main+0xb8a>
 8007d22:	2200      	movs	r2, #0
 8007d24:	2308      	movs	r3, #8
 8007d26:	2001      	movs	r0, #1
 8007d28:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8007d2c:	f06f 0206 	mvn.w	r2, #6
 8007d30:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8007d34:	e9cd 2005 	strd	r2, r0, [sp, #20]
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8007d38:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8007d3c:	469b      	mov	fp, r3
 8007d3e:	4d08      	ldr	r5, [pc, #32]	; (8007d60 <main+0xca8>)
 8007d40:	e010      	b.n	8007d64 <main+0xcac>
 8007d42:	bf00      	nop
 8007d44:	200007d8 	.word	0x200007d8
 8007d48:	0801dfc0 	.word	0x0801dfc0
 8007d4c:	0801dfcc 	.word	0x0801dfcc
 8007d50:	080016d9 	.word	0x080016d9
 8007d54:	080016b5 	.word	0x080016b5
 8007d58:	080016b1 	.word	0x080016b1
 8007d5c:	20000000 	.word	0x20000000
 8007d60:	00ffa500 	.word	0x00ffa500
 8007d64:	2301      	movs	r3, #1
 8007d66:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8007d6a:	f10b 074b 	add.w	r7, fp, #75	; 0x4b
 8007d6e:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 8007d72:	b2bf      	uxth	r7, r7
 8007d74:	fa1f f989 	uxth.w	r9, r9
 8007d78:	4639      	mov	r1, r7
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	4648      	mov	r0, r9
 8007d7e:	9500      	str	r5, [sp, #0]
 8007d80:	f7f8 fea2 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8007d84:	2301      	movs	r3, #1
 8007d86:	f104 0a4b 	add.w	sl, r4, #75	; 0x4b
 8007d8a:	f10b 06ac 	add.w	r6, fp, #172	; 0xac
 8007d8e:	b2b6      	uxth	r6, r6
 8007d90:	fa1f fa8a 	uxth.w	sl, sl
 8007d94:	4630      	mov	r0, r6
 8007d96:	461a      	mov	r2, r3
 8007d98:	4651      	mov	r1, sl
 8007d9a:	9500      	str	r5, [sp, #0]
 8007d9c:	f7f8 fe94 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8007da0:	2301      	movs	r3, #1
 8007da2:	f1c4 08ac 	rsb	r8, r4, #172	; 0xac
 8007da6:	fa1f f888 	uxth.w	r8, r8
 8007daa:	4639      	mov	r1, r7
 8007dac:	461a      	mov	r2, r3
 8007dae:	4640      	mov	r0, r8
 8007db0:	9500      	str	r5, [sp, #0]
 8007db2:	f7f8 fe89 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8007db6:	2301      	movs	r3, #1
 8007db8:	f1cb 07ac 	rsb	r7, fp, #172	; 0xac
 8007dbc:	b2bf      	uxth	r7, r7
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	4651      	mov	r1, sl
 8007dc2:	4638      	mov	r0, r7
 8007dc4:	9500      	str	r5, [sp, #0]
 8007dc6:	f7f8 fe7f 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8007dca:	2301      	movs	r3, #1
 8007dcc:	f1c4 044b 	rsb	r4, r4, #75	; 0x4b
 8007dd0:	b2a4      	uxth	r4, r4
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	9500      	str	r5, [sp, #0]
 8007dda:	f7f8 fe75 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8007dde:	2301      	movs	r3, #1
 8007de0:	f1cb 064b 	rsb	r6, fp, #75	; 0x4b
 8007de4:	b2b6      	uxth	r6, r6
 8007de6:	4631      	mov	r1, r6
 8007de8:	461a      	mov	r2, r3
 8007dea:	4648      	mov	r0, r9
 8007dec:	9500      	str	r5, [sp, #0]
 8007dee:	f7f8 fe6b 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8007df2:	2301      	movs	r3, #1
 8007df4:	4631      	mov	r1, r6
 8007df6:	461a      	mov	r2, r3
 8007df8:	4640      	mov	r0, r8
 8007dfa:	9500      	str	r5, [sp, #0]
 8007dfc:	f7f8 fe64 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8007e00:	2301      	movs	r3, #1
 8007e02:	4621      	mov	r1, r4
 8007e04:	461a      	mov	r2, r3
 8007e06:	4638      	mov	r0, r7
 8007e08:	9500      	str	r5, [sp, #0]
 8007e0a:	f7f8 fe5d 	bl	8000ac8 <LCD_Rect_Fill>
			P = (P + 5) + (2 * (a_ - b_));
 8007e0e:	e9dd 4603 	ldrd	r4, r6, [sp, #12]
 8007e12:	9b05      	ldr	r3, [sp, #20]
 8007e14:	1ba1      	subs	r1, r4, r6
		if (P < 0)
 8007e16:	2b00      	cmp	r3, #0
			P = (P + 5) + (2 * (a_ - b_));
 8007e18:	f103 0205 	add.w	r2, r3, #5
			P = (P + 3) + (2 * a_);
 8007e1c:	f103 0003 	add.w	r0, r3, #3
		if (P < 0)
 8007e20:	f2c0 837a 	blt.w	8008518 <main+0x1460>
			a_++;
 8007e24:	9c06      	ldr	r4, [sp, #24]
			P = (P + 5) + (2 * (a_ - b_));
 8007e26:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			a_++;
 8007e2a:	4623      	mov	r3, r4
			P = (P + 5) + (2 * (a_ - b_));
 8007e2c:	9205      	str	r2, [sp, #20]
	while (a_ <= b_)
 8007e2e:	9a03      	ldr	r2, [sp, #12]
			b_--;
 8007e30:	1e70      	subs	r0, r6, #1
	while (a_ <= b_)
 8007e32:	3201      	adds	r2, #1
 8007e34:	3301      	adds	r3, #1
 8007e36:	4284      	cmp	r4, r0
			b_--;
 8007e38:	9004      	str	r0, [sp, #16]
	while (a_ <= b_)
 8007e3a:	9203      	str	r2, [sp, #12]
 8007e3c:	fa1f fb80 	uxth.w	fp, r0
 8007e40:	9306      	str	r3, [sp, #24]
 8007e42:	dd8f      	ble.n	8007d64 <main+0xcac>
			if (rtcSec % 2 != 0) {
 8007e44:	e9dd 3b08 	ldrd	r3, fp, [sp, #32]
 8007e48:	f013 0601 	ands.w	r6, r3, #1
 8007e4c:	f000 8376 	beq.w	800853c <main+0x1484>
	b_ = radius;
 8007e50:	f04f 0807 	mov.w	r8, #7
 8007e54:	f04f 0a00 	mov.w	sl, #0
 8007e58:	2601      	movs	r6, #1
	P = 1 - radius;
 8007e5a:	f06f 0705 	mvn.w	r7, #5
 8007e5e:	46c1      	mov	r9, r8
 8007e60:	f8cd b00c 	str.w	fp, [sp, #12]
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8007e64:	ea4f 0449 	mov.w	r4, r9, lsl #1
 8007e68:	f8df c374 	ldr.w	ip, [pc, #884]	; 80081e0 <main+0x1128>
 8007e6c:	b2b5      	uxth	r5, r6
 8007e6e:	f10a 0201 	add.w	r2, sl, #1
 8007e72:	3401      	adds	r4, #1
 8007e74:	b2a4      	uxth	r4, r4
 8007e76:	fa1f fb82 	uxth.w	fp, r2
 8007e7a:	f1c9 0123 	rsb	r1, r9, #35	; 0x23
 8007e7e:	f1c5 00ad 	rsb	r0, r5, #173	; 0xad
 8007e82:	4623      	mov	r3, r4
 8007e84:	465a      	mov	r2, fp
 8007e86:	b289      	uxth	r1, r1
 8007e88:	b280      	uxth	r0, r0
 8007e8a:	f8cd c000 	str.w	ip, [sp]
 8007e8e:	f7f8 fe1b 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8007e92:	f8df c34c 	ldr.w	ip, [pc, #844]	; 80081e0 <main+0x1128>
 8007e96:	f1c9 00ac 	rsb	r0, r9, #172	; 0xac
 8007e9a:	f1c5 0124 	rsb	r1, r5, #36	; 0x24
 8007e9e:	4622      	mov	r2, r4
 8007ea0:	b289      	uxth	r1, r1
 8007ea2:	465b      	mov	r3, fp
 8007ea4:	f8cd c000 	str.w	ip, [sp]
 8007ea8:	b280      	uxth	r0, r0
 8007eaa:	f7f8 fe0d 	bl	8000ac8 <LCD_Rect_Fill>
 8007eae:	1e74      	subs	r4, r6, #1
		if (P < 0)
 8007eb0:	2f00      	cmp	r7, #0
			P = (P + 5) + (2 * (a_ - b_));
 8007eb2:	eba4 0408 	sub.w	r4, r4, r8
 8007eb6:	f107 0205 	add.w	r2, r7, #5
			P = (P + 3) + (2 * a_);
 8007eba:	f107 0103 	add.w	r1, r7, #3
		if (P < 0)
 8007ebe:	f2c0 83e5 	blt.w	800868c <main+0x15d4>
			b_--;
 8007ec2:	f108 38ff 	add.w	r8, r8, #4294967295
	while (a_ <= b_)
 8007ec6:	4546      	cmp	r6, r8
			P = (P + 5) + (2 * (a_ - b_));
 8007ec8:	eb02 0744 	add.w	r7, r2, r4, lsl #1
	while (a_ <= b_)
 8007ecc:	f10a 0a02 	add.w	sl, sl, #2
 8007ed0:	fa1f f988 	uxth.w	r9, r8
 8007ed4:	f106 0601 	add.w	r6, r6, #1
 8007ed8:	ddc4      	ble.n	8007e64 <main+0xdac>
 8007eda:	f04f 0807 	mov.w	r8, #7
 8007ede:	f04f 0a00 	mov.w	sl, #0
 8007ee2:	2601      	movs	r6, #1
 8007ee4:	f06f 0705 	mvn.w	r7, #5
 8007ee8:	46c1      	mov	r9, r8
 8007eea:	f8dd b00c 	ldr.w	fp, [sp, #12]
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8007eee:	f8cd b00c 	str.w	fp, [sp, #12]
 8007ef2:	ea4f 0449 	mov.w	r4, r9, lsl #1
 8007ef6:	f8df c2e8 	ldr.w	ip, [pc, #744]	; 80081e0 <main+0x1128>
 8007efa:	b2b5      	uxth	r5, r6
 8007efc:	f10a 0201 	add.w	r2, sl, #1
 8007f00:	3401      	adds	r4, #1
 8007f02:	b2a4      	uxth	r4, r4
 8007f04:	fa1f fb82 	uxth.w	fp, r2
 8007f08:	f1c9 014b 	rsb	r1, r9, #75	; 0x4b
 8007f0c:	f1c5 00ad 	rsb	r0, r5, #173	; 0xad
 8007f10:	4623      	mov	r3, r4
 8007f12:	465a      	mov	r2, fp
 8007f14:	b289      	uxth	r1, r1
 8007f16:	b280      	uxth	r0, r0
 8007f18:	f8cd c000 	str.w	ip, [sp]
 8007f1c:	f7f8 fdd4 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8007f20:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 80081e0 <main+0x1128>
 8007f24:	f1c9 00ac 	rsb	r0, r9, #172	; 0xac
 8007f28:	f1c5 014c 	rsb	r1, r5, #76	; 0x4c
 8007f2c:	4622      	mov	r2, r4
 8007f2e:	b289      	uxth	r1, r1
 8007f30:	465b      	mov	r3, fp
 8007f32:	f8cd c000 	str.w	ip, [sp]
 8007f36:	b280      	uxth	r0, r0
 8007f38:	f7f8 fdc6 	bl	8000ac8 <LCD_Rect_Fill>
 8007f3c:	1e74      	subs	r4, r6, #1
		if (P < 0)
 8007f3e:	2f00      	cmp	r7, #0
			P = (P + 5) + (2 * (a_ - b_));
 8007f40:	eba4 0408 	sub.w	r4, r4, r8
 8007f44:	f107 0205 	add.w	r2, r7, #5
			P = (P + 3) + (2 * a_);
 8007f48:	f107 0103 	add.w	r1, r7, #3
		if (P < 0)
 8007f4c:	f2c0 8394 	blt.w	8008678 <main+0x15c0>
			b_--;
 8007f50:	f108 38ff 	add.w	r8, r8, #4294967295
	while (a_ <= b_)
 8007f54:	4546      	cmp	r6, r8
			P = (P + 5) + (2 * (a_ - b_));
 8007f56:	eb02 0744 	add.w	r7, r2, r4, lsl #1
	while (a_ <= b_)
 8007f5a:	f10a 0a02 	add.w	sl, sl, #2
 8007f5e:	fa1f f988 	uxth.w	r9, r8
 8007f62:	f106 0601 	add.w	r6, r6, #1
 8007f66:	ddc4      	ble.n	8007ef2 <main+0xe3a>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007f68:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007f6c:	4a9d      	ldr	r2, [pc, #628]	; (80081e4 <main+0x112c>)
 8007f6e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007f72:	6113      	str	r3, [r2, #16]
			if (rtcMinLast != rtcMin) {
 8007f74:	4c9c      	ldr	r4, [pc, #624]	; (80081e8 <main+0x1130>)
 8007f76:	9b07      	ldr	r3, [sp, #28]
 8007f78:	7a62      	ldrb	r2, [r4, #9]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	f000 80aa 	beq.w	80080d4 <main+0x101c>
				sprintf(clockPrint, "%02d", rtcMinLast);
 8007f80:	499a      	ldr	r1, [pc, #616]	; (80081ec <main+0x1134>)
 8007f82:	a81e      	add	r0, sp, #120	; 0x78
 8007f84:	f001 fd0e 	bl	80099a4 <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8007f88:	2200      	movs	r2, #0
 8007f8a:	20b4      	movs	r0, #180	; 0xb4
 8007f8c:	a91e      	add	r1, sp, #120	; 0x78
 8007f8e:	f7fc f88f 	bl	80040b0 <LCD_Font.constprop.1>
				sprintf(clockPrint, "%02d", rtcMin);
 8007f92:	f89b 25db 	ldrb.w	r2, [fp, #1499]	; 0x5db
 8007f96:	4995      	ldr	r1, [pc, #596]	; (80081ec <main+0x1134>)
 8007f98:	a81e      	add	r0, sp, #120	; 0x78
 8007f9a:	f001 fd03 	bl	80099a4 <siprintf>
				LCD_Font(180, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8007f9e:	4a90      	ldr	r2, [pc, #576]	; (80081e0 <main+0x1128>)
 8007fa0:	20b4      	movs	r0, #180	; 0xb4
 8007fa2:	a91e      	add	r1, sp, #120	; 0x78
 8007fa4:	f7fc f884 	bl	80040b0 <LCD_Font.constprop.1>
				if (rtcHrsLast != rtcHrs) {
 8007fa8:	7aa2      	ldrb	r2, [r4, #10]
 8007faa:	f89b 30ec 	ldrb.w	r3, [fp, #236]	; 0xec
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	f000 808c 	beq.w	80080cc <main+0x1014>
					sprintf(clockPrint, "%02d", rtcHrsLast);
 8007fb4:	498d      	ldr	r1, [pc, #564]	; (80081ec <main+0x1134>)
 8007fb6:	a81e      	add	r0, sp, #120	; 0x78
 8007fb8:	f001 fcf4 	bl	80099a4 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	a91e      	add	r1, sp, #120	; 0x78
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	f7fc f875 	bl	80040b0 <LCD_Font.constprop.1>
					sprintf(clockPrint, "%02d", rtcHrs);
 8007fc6:	f89b 20ec 	ldrb.w	r2, [fp, #236]	; 0xec
 8007fca:	4988      	ldr	r1, [pc, #544]	; (80081ec <main+0x1134>)
 8007fcc:	a81e      	add	r0, sp, #120	; 0x78
 8007fce:	f001 fce9 	bl	80099a4 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	4a82      	ldr	r2, [pc, #520]	; (80081e0 <main+0x1128>)
 8007fd6:	a91e      	add	r1, sp, #120	; 0x78
 8007fd8:	f7fc f86a 	bl	80040b0 <LCD_Font.constprop.1>
					if (rtcDayLast != rtcDay) {
 8007fdc:	f89b 45dc 	ldrb.w	r4, [fp, #1500]	; 0x5dc
 8007fe0:	f89b 36e0 	ldrb.w	r3, [fp, #1760]	; 0x6e0
 8007fe4:	42a3      	cmp	r3, r4
 8007fe6:	d061      	beq.n	80080ac <main+0xff4>
						LCD_Font(2, 130, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_36, 1, BLACK);
 8007fe8:	2607      	movs	r6, #7
 8007fea:	1d63      	adds	r3, r4, #5
 8007fec:	fbb3 f1f6 	udiv	r1, r3, r6
 8007ff0:	4f7f      	ldr	r7, [pc, #508]	; (80081f0 <main+0x1138>)
 8007ff2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007ff6:	1a5b      	subs	r3, r3, r1
 8007ff8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007ffc:	f8d3 15f8 	ldr.w	r1, [r3, #1528]	; 0x5f8
 8008000:	2200      	movs	r2, #0
 8008002:	2002      	movs	r0, #2
						LCD_Font(2, 130, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_36, 1, GRAY);
 8008004:	3406      	adds	r4, #6
						LCD_Font(2, 130, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_36, 1, BLACK);
 8008006:	f7fc f80b 	bl	8004020 <LCD_Font.constprop.0>
						LCD_Font(2, 130, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_36, 1, GRAY);
 800800a:	fbb4 f6f6 	udiv	r6, r4, r6
						LCD_Font(280, 130, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_36, 1, BLACK);
 800800e:	250c      	movs	r5, #12
						LCD_Font(2, 130, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_36, 1, GRAY);
 8008010:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8008014:	1ba4      	subs	r4, r4, r6
 8008016:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 800801a:	f8d3 15f8 	ldr.w	r1, [r3, #1528]	; 0x5f8
 800801e:	2002      	movs	r0, #2
 8008020:	4a74      	ldr	r2, [pc, #464]	; (80081f4 <main+0x113c>)
 8008022:	f7fb fffd 	bl	8004020 <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 8008026:	f89b 36e3 	ldrb.w	r3, [fp, #1763]	; 0x6e3
 800802a:	4973      	ldr	r1, [pc, #460]	; (80081f8 <main+0x1140>)
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	f89b 36e1 	ldrb.w	r3, [fp, #1761]	; 0x6e1
 8008032:	f89b 26e2 	ldrb.w	r2, [fp, #1762]	; 0x6e2
 8008036:	a81e      	add	r0, sp, #120	; 0x78
 8008038:	f001 fcb4 	bl	80099a4 <siprintf>
						LCD_Font(100, 130, clockPrint, &DejaVu_Sans_36, 1, BLACK);
 800803c:	2200      	movs	r2, #0
 800803e:	2064      	movs	r0, #100	; 0x64
 8008040:	a91e      	add	r1, sp, #120	; 0x78
 8008042:	f7fb ffed 	bl	8004020 <LCD_Font.constprop.0>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear);
 8008046:	f89b 35df 	ldrb.w	r3, [fp, #1503]	; 0x5df
 800804a:	496b      	ldr	r1, [pc, #428]	; (80081f8 <main+0x1140>)
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	f89b 35de 	ldrb.w	r3, [fp, #1502]	; 0x5de
 8008052:	f89b 25dd 	ldrb.w	r2, [fp, #1501]	; 0x5dd
 8008056:	a81e      	add	r0, sp, #120	; 0x78
 8008058:	f001 fca4 	bl	80099a4 <siprintf>
						LCD_Font(100, 130, clockPrint, &DejaVu_Sans_36, 1, GRAY);
 800805c:	2064      	movs	r0, #100	; 0x64
 800805e:	4a65      	ldr	r2, [pc, #404]	; (80081f4 <main+0x113c>)
 8008060:	a91e      	add	r1, sp, #120	; 0x78
 8008062:	f7fb ffdd 	bl	8004020 <LCD_Font.constprop.0>
						LCD_Font(280, 130, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_36, 1, BLACK);
 8008066:	f89b 45de 	ldrb.w	r4, [fp, #1502]	; 0x5de
 800806a:	2200      	movs	r2, #0
 800806c:	f104 030a 	add.w	r3, r4, #10
 8008070:	fbb3 f1f5 	udiv	r1, r3, r5
 8008074:	fb05 3311 	mls	r3, r5, r1, r3
 8008078:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800807c:	f8d3 1614 	ldr.w	r1, [r3, #1556]	; 0x614
 8008080:	f44f 708c 	mov.w	r0, #280	; 0x118
						LCD_Font(280, 130, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_36, 1, GRAY);
 8008084:	340b      	adds	r4, #11
						LCD_Font(280, 130, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_36, 1, BLACK);
 8008086:	f7fb ffcb 	bl	8004020 <LCD_Font.constprop.0>
						LCD_Font(280, 130, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_36, 1, GRAY);
 800808a:	fbb4 f3f5 	udiv	r3, r4, r5
 800808e:	fb05 4413 	mls	r4, r5, r3, r4
 8008092:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 8008096:	f8d3 1614 	ldr.w	r1, [r3, #1556]	; 0x614
 800809a:	f44f 708c 	mov.w	r0, #280	; 0x118
 800809e:	4a55      	ldr	r2, [pc, #340]	; (80081f4 <main+0x113c>)
 80080a0:	f7fb ffbe 	bl	8004020 <LCD_Font.constprop.0>
						rtcDayLast = rtcDay;
 80080a4:	f89b 35dc 	ldrb.w	r3, [fp, #1500]	; 0x5dc
 80080a8:	f88b 36e0 	strb.w	r3, [fp, #1760]	; 0x6e0
					rtcDateLast = rtcDate;
 80080ac:	f89b 35dd 	ldrb.w	r3, [fp, #1501]	; 0x5dd
					rtcHrsLast = rtcHrs;
 80080b0:	4a4d      	ldr	r2, [pc, #308]	; (80081e8 <main+0x1130>)
					rtcDateLast = rtcDate;
 80080b2:	f88b 36e2 	strb.w	r3, [fp, #1762]	; 0x6e2
					rtcMonthLast = rtcMonth;
 80080b6:	f89b 35de 	ldrb.w	r3, [fp, #1502]	; 0x5de
 80080ba:	f88b 36e1 	strb.w	r3, [fp, #1761]	; 0x6e1
					rtcYearLast = rtcYear;
 80080be:	f89b 35df 	ldrb.w	r3, [fp, #1503]	; 0x5df
 80080c2:	f88b 36e3 	strb.w	r3, [fp, #1763]	; 0x6e3
					rtcHrsLast = rtcHrs;
 80080c6:	f89b 30ec 	ldrb.w	r3, [fp, #236]	; 0xec
 80080ca:	7293      	strb	r3, [r2, #10]
				rtcMinLast = rtcMin;
 80080cc:	f89b 35db 	ldrb.w	r3, [fp, #1499]	; 0x5db
 80080d0:	4a45      	ldr	r2, [pc, #276]	; (80081e8 <main+0x1130>)
 80080d2:	7253      	strb	r3, [r2, #9]
    cmd[0] = 0xFA; // temp_msb
 80080d4:	23fa      	movs	r3, #250	; 0xfa
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80080d6:	2201      	movs	r2, #1
 80080d8:	20ec      	movs	r0, #236	; 0xec
 80080da:	a916      	add	r1, sp, #88	; 0x58
    cmd[0] = 0xFA; // temp_msb
 80080dc:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80080e0:	f7fb fd52 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 80080e4:	2203      	movs	r2, #3
 80080e6:	20ec      	movs	r0, #236	; 0xec
 80080e8:	f10d 0159 	add.w	r1, sp, #89	; 0x59
 80080ec:	f7fb fb3a 	bl	8003764 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80080f0:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 80080f4:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
 80080f8:	011b      	lsls	r3, r3, #4
 80080fa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80080fe:	f89d 105b 	ldrb.w	r1, [sp, #91]	; 0x5b
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8008102:	f8bb 25b4 	ldrh.w	r2, [fp, #1460]	; 0x5b4
    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8008106:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 800810a:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
 800810e:	fb03 f303 	mul.w	r3, r3, r3
 8008112:	0b1c      	lsrs	r4, r3, #12
 8008114:	f9bb 35b8 	ldrsh.w	r3, [fp, #1464]	; 0x5b8
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8008118:	0052      	lsls	r2, r2, #1
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 800811a:	fb03 f404 	mul.w	r4, r3, r4
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800811e:	f9bb 35b6 	ldrsh.w	r3, [fp, #1462]	; 0x5b6
 8008122:	ebc2 02d1 	rsb	r2, r2, r1, lsr #3
 8008126:	fb02 f303 	mul.w	r3, r2, r3
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 800812a:	0ba4      	lsrs	r4, r4, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800812c:	eb04 24d3 	add.w	r4, r4, r3, lsr #11
    temp = (temp * 5 + 128) >> 8;
 8008130:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8008134:	3080      	adds	r0, #128	; 0x80
    t_fine = temp;
 8008136:	f8cb 46e4 	str.w	r4, [fp, #1764]	; 0x6e4
    tempf = (float) temp;
 800813a:	1200      	asrs	r0, r0, #8
 800813c:	f7fe ff48 	bl	8006fd0 <__aeabi_i2f>
    return round_nth((tempf / 100.0f), n);
 8008140:	492e      	ldr	r1, [pc, #184]	; (80081fc <main+0x1144>)
 8008142:	f7fe fdd7 	bl	8006cf4 <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8008146:	f7fe f9fd 	bl	8006544 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 800814a:	2200      	movs	r2, #0
 800814c:	4b2c      	ldr	r3, [pc, #176]	; (8008200 <main+0x1148>)
 800814e:	f7fe fa51 	bl	80065f4 <__aeabi_dmul>
 8008152:	2200      	movs	r2, #0
 8008154:	4b2b      	ldr	r3, [pc, #172]	; (8008204 <main+0x114c>)
 8008156:	f7fe f897 	bl	8006288 <__adddf3>
 800815a:	f005 f9ed 	bl	800d538 <floor>
 800815e:	a31e      	add	r3, pc, #120	; (adr r3, 80081d8 <main+0x1120>)
 8008160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008164:	f7fe fa46 	bl	80065f4 <__aeabi_dmul>
 8008168:	f7fe fd3c 	bl	8006be4 <__aeabi_d2f>
	temperature = BME280_getTemperature(-1);
 800816c:	f7fe f9ea 	bl	8006544 <__aeabi_f2d>
    cmd[0] = 0xFD; // hum_msb
 8008170:	23fd      	movs	r3, #253	; 0xfd
 8008172:	e9cb 0132 	strd	r0, r1, [fp, #200]	; 0xc8
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8008176:	2201      	movs	r2, #1
 8008178:	20ec      	movs	r0, #236	; 0xec
 800817a:	a916      	add	r1, sp, #88	; 0x58
    cmd[0] = 0xFD; // hum_msb
 800817c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8008180:	f7fb fd02 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 8008184:	2202      	movs	r2, #2
 8008186:	20ec      	movs	r0, #236	; 0xec
 8008188:	f10d 0159 	add.w	r1, sp, #89	; 0x59
 800818c:	f7fb faea 	bl	8003764 <HAL_I2C_Master_Receive.constprop.0.isra.0>
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8008190:	f8bb 35d0 	ldrh.w	r3, [fp, #1488]	; 0x5d0
    v_x1 = t_fine - 76800;
 8008194:	f5a4 3196 	sub.w	r1, r4, #76800	; 0x12c00
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8008198:	f9bb 25d6 	ldrsh.w	r2, [fp, #1494]	; 0x5d6
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800819c:	fb01 f303 	mul.w	r3, r1, r3
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80081a0:	fb01 f202 	mul.w	r2, r1, r2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80081a4:	12db      	asrs	r3, r3, #11
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80081a6:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80081a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 80081ac:	fb02 f303 	mul.w	r3, r2, r3
    hum_raw = (cmd[1] << 8) | cmd[2];
 80081b0:	f8bd 2059 	ldrh.w	r2, [sp, #89]	; 0x59
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80081b4:	129b      	asrs	r3, r3, #10
    hum_raw = (cmd[1] << 8) | cmd[2];
 80081b6:	ba52      	rev16	r2, r2
 80081b8:	b290      	uxth	r0, r2
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 80081ba:	f9bb 25d2 	ldrsh.w	r2, [fp, #1490]	; 0x5d2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 80081be:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 80081c2:	0512      	lsls	r2, r2, #20
 80081c4:	ebc2 3280 	rsb	r2, r2, r0, lsl #14
                                            (int32_t) dig_H2 + 8192) >> 14));
 80081c8:	f9bb 05ce 	ldrsh.w	r0, [fp, #1486]	; 0x5ce
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 80081cc:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80081d0:	e01a      	b.n	8008208 <main+0x1150>
 80081d2:	bf00      	nop
 80081d4:	f3af 8000 	nop.w
 80081d8:	9999999a 	.word	0x9999999a
 80081dc:	3fb99999 	.word	0x3fb99999
 80081e0:	00ffa500 	.word	0x00ffa500
 80081e4:	40011000 	.word	0x40011000
 80081e8:	20000000 	.word	0x20000000
 80081ec:	0801df94 	.word	0x0801df94
 80081f0:	0800d648 	.word	0x0800d648
 80081f4:	007f7f7f 	.word	0x007f7f7f
 80081f8:	0801df9c 	.word	0x0801df9c
 80081fc:	3c23d70a 	.word	0x3c23d70a
 8008200:	40240000 	.word	0x40240000
 8008204:	3fe00000 	.word	0x3fe00000
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8008208:	fb00 f303 	mul.w	r3, r0, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 800820c:	f9bb 05d4 	ldrsh.w	r0, [fp, #1492]	; 0x5d4
                                            (int32_t) dig_H2 + 8192) >> 14));
 8008210:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8008214:	fb01 2210 	mls	r2, r1, r0, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 8008218:	139b      	asrs	r3, r3, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 800821a:	0bd2      	lsrs	r2, r2, #15
 800821c:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8008220:	13da      	asrs	r2, r3, #15
 8008222:	fb02 f202 	mul.w	r2, r2, r2
 8008226:	f8bb 15cc 	ldrh.w	r1, [fp, #1484]	; 0x5cc
 800822a:	11d0      	asrs	r0, r2, #7
 800822c:	fb01 f000 	mul.w	r0, r1, r0
 8008230:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 8008234:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 8008238:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 800823c:	bfa8      	it	ge
 800823e:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
    humf = (float) (v_x1 >> 12);
 8008242:	1300      	asrs	r0, r0, #12
 8008244:	f7fe fec4 	bl	8006fd0 <__aeabi_i2f>
    return round_nth((humf / 1024.0f), n);
 8008248:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 800824c:	f7fe fd52 	bl	8006cf4 <__aeabi_fmul>
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8008250:	f7fe f978 	bl	8006544 <__aeabi_f2d>
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8008254:	2200      	movs	r2, #0
 8008256:	4ba8      	ldr	r3, [pc, #672]	; (80084f8 <main+0x1440>)
 8008258:	f7fe f9cc 	bl	80065f4 <__aeabi_dmul>
 800825c:	2200      	movs	r2, #0
 800825e:	4ba7      	ldr	r3, [pc, #668]	; (80084fc <main+0x1444>)
 8008260:	f7fe f812 	bl	8006288 <__adddf3>
 8008264:	f005 f968 	bl	800d538 <floor>
 8008268:	a3a1      	add	r3, pc, #644	; (adr r3, 80084f0 <main+0x1438>)
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	f7fe f9c1 	bl	80065f4 <__aeabi_dmul>
 8008272:	f7fe fcb7 	bl	8006be4 <__aeabi_d2f>
	humidity = BME280_getHumidity(-1);
 8008276:	f7fe f965 	bl	8006544 <__aeabi_f2d>
    cmd[0] = 0xF7; // press_msb
 800827a:	23f7      	movs	r3, #247	; 0xf7
 800827c:	e9cb 0134 	strd	r0, r1, [fp, #208]	; 0xd0
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8008280:	2201      	movs	r2, #1
 8008282:	20ec      	movs	r0, #236	; 0xec
 8008284:	a916      	add	r1, sp, #88	; 0x58
    cmd[0] = 0xF7; // press_msb
 8008286:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800828a:	f7fb fc7d 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 800828e:	2203      	movs	r2, #3
 8008290:	20ec      	movs	r0, #236	; 0xec
 8008292:	f10d 0159 	add.w	r1, sp, #89	; 0x59
 8008296:	f7fb fa65 	bl	8003764 <HAL_I2C_Master_Receive.constprop.0.isra.0>
    var1 = (t_fine >> 1) - 64000;
 800829a:	1061      	asrs	r1, r4, #1
 800829c:	f5a1 417a 	sub.w	r1, r1, #64000	; 0xfa00
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80082a0:	1088      	asrs	r0, r1, #2
 80082a2:	fb00 f000 	mul.w	r0, r0, r0
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80082a6:	f9bb 35bc 	ldrsh.w	r3, [fp, #1468]	; 0x5bc
 80082aa:	f9bb 25be 	ldrsh.w	r2, [fp, #1470]	; 0x5be
 80082ae:	fb01 f303 	mul.w	r3, r1, r3
 80082b2:	1344      	asrs	r4, r0, #13
 80082b4:	fb04 f202 	mul.w	r2, r4, r2
 80082b8:	105b      	asrs	r3, r3, #1
 80082ba:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 80082be:	149b      	asrs	r3, r3, #18
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80082c0:	f8bb 25ba 	ldrh.w	r2, [fp, #1466]	; 0x5ba
 80082c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80082c8:	fb02 f303 	mul.w	r3, r2, r3
    if (var1 == 0) {
 80082cc:	13da      	asrs	r2, r3, #15
 80082ce:	f000 826e 	beq.w	80087ae <main+0x16f6>
    var2 = var2 + ((var1 * dig_P5) << 1);
 80082d2:	f9bb 35c2 	ldrsh.w	r3, [fp, #1474]	; 0x5c2
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80082d6:	12c0      	asrs	r0, r0, #11
    var2 = var2 + ((var1 * dig_P5) << 1);
 80082d8:	fb03 f101 	mul.w	r1, r3, r1
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 80082dc:	f9bb 35c4 	ldrsh.w	r3, [fp, #1476]	; 0x5c4
    var2 = var2 + ((var1 * dig_P5) << 1);
 80082e0:	0049      	lsls	r1, r1, #1
 80082e2:	fb03 1100 	mla	r1, r3, r0, r1
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80082e6:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 80082ea:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
 80082ee:	091b      	lsrs	r3, r3, #4
 80082f0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    var2 = (var2 >> 2) + (dig_P4 << 16);
 80082f4:	f9bb 05c0 	ldrsh.w	r0, [fp, #1472]	; 0x5c0
 80082f8:	0400      	lsls	r0, r0, #16
 80082fa:	eb00 01a1 	add.w	r1, r0, r1, asr #2
    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 80082fe:	f89d 0059 	ldrb.w	r0, [sp, #89]	; 0x59
 8008302:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 8008306:	eb03 3321 	add.w	r3, r3, r1, asr #12
 800830a:	497d      	ldr	r1, [pc, #500]	; (8008500 <main+0x1448>)
 800830c:	fb01 f303 	mul.w	r3, r1, r3
 8008310:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8008314:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    if (press < 0x80000000) {
 8008318:	2b00      	cmp	r3, #0
        press = (press / var1) * 2;
 800831a:	bfb3      	iteet	lt
 800831c:	fbb3 f3f2 	udivlt	r3, r3, r2
        press = (press << 1) / var1;
 8008320:	005b      	lslge	r3, r3, #1
 8008322:	fbb3 f3f2 	udivge	r3, r3, r2
        press = (press / var1) * 2;
 8008326:	005b      	lsllt	r3, r3, #1
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8008328:	08da      	lsrs	r2, r3, #3
 800832a:	fb02 f202 	mul.w	r2, r2, r2
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800832e:	f9bb 15c8 	ldrsh.w	r1, [fp, #1480]	; 0x5c8
 8008332:	0898      	lsrs	r0, r3, #2
 8008334:	fb01 f000 	mul.w	r0, r1, r0
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8008338:	f9bb 15ca 	ldrsh.w	r1, [fp, #1482]	; 0x5ca
 800833c:	0b52      	lsrs	r2, r2, #13
 800833e:	fb01 f202 	mul.w	r2, r1, r2
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8008342:	1340      	asrs	r0, r0, #13
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8008344:	eb00 3022 	add.w	r0, r0, r2, asr #12
 8008348:	f9bb 25c6 	ldrsh.w	r2, [fp, #1478]	; 0x5c6
 800834c:	4410      	add	r0, r2
    pressf = (float) press;
 800834e:	eb03 1020 	add.w	r0, r3, r0, asr #4
 8008352:	f7fe fe39 	bl	8006fc8 <__aeabi_ui2f>
    return (pressf / 100.0f);
 8008356:	496b      	ldr	r1, [pc, #428]	; (8008504 <main+0x144c>)
 8008358:	f7fe fccc 	bl	8006cf4 <__aeabi_fmul>
	pressure = (uint16_t)BME280_getPressure();
 800835c:	f7fe fe8c 	bl	8007078 <__aeabi_f2uiz>
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8008360:	f46f 7196 	mvn.w	r1, #300	; 0x12c
 8008364:	f240 321e 	movw	r2, #798	; 0x31e
	pressure = (uint16_t)BME280_getPressure();
 8008368:	b283      	uxth	r3, r0
 800836a:	f8ab 30ea 	strh.w	r3, [fp, #234]	; 0xea
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 800836e:	440b      	add	r3, r1
 8008370:	b29b      	uxth	r3, r3
 8008372:	4293      	cmp	r3, r2
 8008374:	d801      	bhi.n	800837a <main+0x12c2>
 8008376:	f7fd f8af 	bl	80054d8 <bme280.part.0>
			rtcSecLast = rtcSec;
 800837a:	f89b 35da 	ldrb.w	r3, [fp, #1498]	; 0x5da
 800837e:	4a62      	ldr	r2, [pc, #392]	; (8008508 <main+0x1450>)
 8008380:	7213      	strb	r3, [r2, #8]
		if (rx_index != 0) {
 8008382:	f89b 35d9 	ldrb.w	r3, [fp, #1497]	; 0x5d9
 8008386:	2b00      	cmp	r3, #0
 8008388:	f43f abf7 	beq.w	8007b7a <main+0xac2>
  return uwTick;
 800838c:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
 8008390:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
  while ((HAL_GetTick() - tickstart) < wait)
 8008394:	1a9b      	subs	r3, r3, r2
 8008396:	2bc8      	cmp	r3, #200	; 0xc8
 8008398:	d9fa      	bls.n	8008390 <main+0x12d8>
		if (memcmp(rx_buffer, "CE", 2) == 0) {
 800839a:	f244 5343 	movw	r3, #17731	; 0x4543
			rx_index = 0;
 800839e:	2700      	movs	r7, #0
		if (memcmp(rx_buffer, "CE", 2) == 0) {
 80083a0:	f8bb 25e0 	ldrh.w	r2, [fp, #1504]	; 0x5e0
			rx_index = 0;
 80083a4:	f88b 75d9 	strb.w	r7, [fp, #1497]	; 0x5d9
		if (memcmp(rx_buffer, "CE", 2) == 0) {
 80083a8:	429a      	cmp	r2, r3
 80083aa:	f040 8093 	bne.w	80084d4 <main+0x141c>
    __HAL_LOCK(hi2c);
 80083ae:	2501      	movs	r5, #1
 80083b0:	463c      	mov	r4, r7
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80083b2:	f8df a158 	ldr.w	sl, [pc, #344]	; 800850c <main+0x1454>
 80083b6:	fa1f f887 	uxth.w	r8, r7
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80083ba:	4640      	mov	r0, r8
 80083bc:	a91e      	add	r1, sp, #120	; 0x78
    uint16_t dt[1] = {0};
 80083be:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 80083c2:	f7fa fe97 	bl	80030f4 <HAL_I2C_Mem_Read.constprop.0.isra.0>
    return dt[0];
 80083c6:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d06c      	beq.n	80084a8 <main+0x13f0>
  return uwTick;
 80083ce:	f8db 6054 	ldr.w	r6, [fp, #84]	; 0x54
  if (hi2c->State == HAL_I2C_STATE_READY)
 80083d2:	f89b 303d 	ldrb.w	r3, [fp, #61]	; 0x3d
    uint8_t save[] = {val};
 80083d6:	f88d 4078 	strb.w	r4, [sp, #120]	; 0x78
 80083da:	2b20      	cmp	r3, #32
 80083dc:	d164      	bne.n	80084a8 <main+0x13f0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083de:	f8db 1000 	ldr.w	r1, [fp]
 80083e2:	e005      	b.n	80083f0 <main+0x1338>
 80083e4:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083e8:	1b92      	subs	r2, r2, r6
 80083ea:	2a19      	cmp	r2, #25
 80083ec:	f200 81d0 	bhi.w	8008790 <main+0x16d8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083f0:	698b      	ldr	r3, [r1, #24]
 80083f2:	43db      	mvns	r3, r3
 80083f4:	f013 0302 	ands.w	r3, r3, #2
 80083f8:	d0f4      	beq.n	80083e4 <main+0x132c>
    __HAL_LOCK(hi2c);
 80083fa:	f89b 303c 	ldrb.w	r3, [fp, #60]	; 0x3c
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d052      	beq.n	80084a8 <main+0x13f0>
 8008402:	f88b 503c 	strb.w	r5, [fp, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008406:	680b      	ldr	r3, [r1, #0]
 8008408:	07d8      	lsls	r0, r3, #31
 800840a:	d403      	bmi.n	8008414 <main+0x135c>
      __HAL_I2C_ENABLE(hi2c);
 800840c:	680b      	ldr	r3, [r1, #0]
 800840e:	f043 0301 	orr.w	r3, r3, #1
 8008412:	600b      	str	r3, [r1, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008414:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008418:	2240      	movs	r2, #64	; 0x40
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800841a:	680b      	ldr	r3, [r1, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800841c:	4640      	mov	r0, r8
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800841e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008422:	600b      	str	r3, [r1, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008424:	f88b c03d 	strb.w	ip, [fp, #61]	; 0x3d
    hi2c->pBuffPtr    = pData;
 8008428:	ab1e      	add	r3, sp, #120	; 0x78
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800842a:	f88b 203e 	strb.w	r2, [fp, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800842e:	f8cb 4040 	str.w	r4, [fp, #64]	; 0x40
    hi2c->XferCount   = Size;
 8008432:	f8ab 502a 	strh.w	r5, [fp, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8008436:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800843a:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800843e:	4631      	mov	r1, r6
    hi2c->XferSize    = hi2c->XferCount;
 8008440:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008444:	f8cb a02c 	str.w	sl, [fp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008448:	f7fa fd78 	bl	8002f3c <I2C_RequestMemoryWrite.constprop.0>
 800844c:	bb60      	cbnz	r0, 80084a8 <main+0x13f0>
    while (hi2c->XferSize > 0U)
 800844e:	f8bb 0028 	ldrh.w	r0, [fp, #40]	; 0x28
 8008452:	2800      	cmp	r0, #0
 8008454:	f000 8251 	beq.w	80088fa <main+0x1842>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008458:	f8db 1000 	ldr.w	r1, [fp]
 800845c:	694b      	ldr	r3, [r1, #20]
 800845e:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8008462:	f040 8130 	bne.w	80086c6 <main+0x160e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008466:	694a      	ldr	r2, [r1, #20]
 8008468:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 800846c:	f040 8169 	bne.w	8008742 <main+0x168a>
 8008470:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008474:	1b9b      	subs	r3, r3, r6
 8008476:	2b64      	cmp	r3, #100	; 0x64
 8008478:	d9f0      	bls.n	800845c <main+0x13a4>
        hi2c->State             = HAL_I2C_STATE_READY;
 800847a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800847c:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008480:	f88b 303d 	strb.w	r3, [fp, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008484:	f88b 203e 	strb.w	r2, [fp, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008488:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800848c:	f88b 203c 	strb.w	r2, [fp, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008490:	f043 0320 	orr.w	r3, r3, #32
 8008494:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008498:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
 800849c:	2b04      	cmp	r3, #4
 800849e:	d103      	bne.n	80084a8 <main+0x13f0>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084a0:	680b      	ldr	r3, [r1, #0]
 80084a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084a6:	600b      	str	r3, [r1, #0]
			for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 80084a8:	3701      	adds	r7, #1
 80084aa:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 80084ae:	d182      	bne.n	80083b6 <main+0x12fe>
			uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 80084b0:	4d17      	ldr	r5, [pc, #92]	; (8008510 <main+0x1458>)
 80084b2:	ac1e      	add	r4, sp, #120	; 0x78
 80084b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  if (huart->gState == HAL_UART_STATE_READY)
 80084b8:	f89b 60bd 	ldrb.w	r6, [fp, #189]	; 0xbd
 80084bc:	682b      	ldr	r3, [r5, #0]
 80084be:	2e20      	cmp	r6, #32
 80084c0:	6023      	str	r3, [r4, #0]
 80084c2:	d107      	bne.n	80084d4 <main+0x141c>
    __HAL_LOCK(huart);
 80084c4:	f89b 30bc 	ldrb.w	r3, [fp, #188]	; 0xbc
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d003      	beq.n	80084d4 <main+0x141c>
 80084cc:	2114      	movs	r1, #20
 80084ce:	a81e      	add	r0, sp, #120	; 0x78
 80084d0:	f7fb fd14 	bl	8003efc <HAL_UART_Transmit.part.0.constprop.0.isra.0>
		if (memcmp(rx_buffer, "RT", 2) == 0) {
 80084d4:	f245 4352 	movw	r3, #21586	; 0x5452
 80084d8:	f8bb 25e0 	ldrh.w	r2, [fp, #1504]	; 0x5e0
 80084dc:	429a      	cmp	r2, r3
 80084de:	f000 8169 	beq.w	80087b4 <main+0x16fc>
		for (uint8_t i = 0; i < 255; i++) rx_buffer[i] = 0;
 80084e2:	22ff      	movs	r2, #255	; 0xff
 80084e4:	2100      	movs	r1, #0
 80084e6:	480b      	ldr	r0, [pc, #44]	; (8008514 <main+0x145c>)
 80084e8:	f000 fbe2 	bl	8008cb0 <memset>
 80084ec:	f7ff bb45 	b.w	8007b7a <main+0xac2>
 80084f0:	9999999a 	.word	0x9999999a
 80084f4:	3fb99999 	.word	0x3fb99999
 80084f8:	40240000 	.word	0x40240000
 80084fc:	3fe00000 	.word	0x3fe00000
 8008500:	fffff3cb 	.word	0xfffff3cb
 8008504:	3c23d70a 	.word	0x3c23d70a
 8008508:	20000000 	.word	0x20000000
 800850c:	ffff0000 	.word	0xffff0000
 8008510:	0801dfdc 	.word	0x0801dfdc
 8008514:	200007e0 	.word	0x200007e0
			a_++;
 8008518:	9906      	ldr	r1, [sp, #24]
			P = (P + 3) + (2 * a_);
 800851a:	eb00 0244 	add.w	r2, r0, r4, lsl #1
			a_++;
 800851e:	460b      	mov	r3, r1
			P = (P + 3) + (2 * a_);
 8008520:	9205      	str	r2, [sp, #20]
	while (a_ <= b_)
 8008522:	3301      	adds	r3, #1
 8008524:	1c62      	adds	r2, r4, #1
 8008526:	428e      	cmp	r6, r1
 8008528:	9203      	str	r2, [sp, #12]
 800852a:	9306      	str	r3, [sp, #24]
 800852c:	f6bf ac1a 	bge.w	8007d64 <main+0xcac>
			if (rtcSec % 2 != 0) {
 8008530:	e9dd 3b08 	ldrd	r3, fp, [sp, #32]
 8008534:	f013 0601 	ands.w	r6, r3, #1
 8008538:	f47f ac8a 	bne.w	8007e50 <main+0xd98>
	b_ = radius;
 800853c:	f04f 0907 	mov.w	r9, #7
 8008540:	2701      	movs	r7, #1
	P = 1 - radius;
 8008542:	f06f 0805 	mvn.w	r8, #5
 8008546:	46ca      	mov	sl, r9
 8008548:	f8cd b00c 	str.w	fp, [sp, #12]
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 800854c:	f04f 0c00 	mov.w	ip, #0
 8008550:	ea4f 044a 	mov.w	r4, sl, lsl #1
 8008554:	b2bd      	uxth	r5, r7
 8008556:	1c72      	adds	r2, r6, #1
 8008558:	3401      	adds	r4, #1
 800855a:	b2a4      	uxth	r4, r4
 800855c:	fa1f fb82 	uxth.w	fp, r2
 8008560:	f1ca 0123 	rsb	r1, sl, #35	; 0x23
 8008564:	f1c5 00ad 	rsb	r0, r5, #173	; 0xad
 8008568:	4623      	mov	r3, r4
 800856a:	465a      	mov	r2, fp
 800856c:	b289      	uxth	r1, r1
 800856e:	b280      	uxth	r0, r0
 8008570:	f8cd c000 	str.w	ip, [sp]
 8008574:	f7f8 faa8 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8008578:	f04f 0c00 	mov.w	ip, #0
 800857c:	f1ca 00ac 	rsb	r0, sl, #172	; 0xac
 8008580:	f1c5 0124 	rsb	r1, r5, #36	; 0x24
 8008584:	4622      	mov	r2, r4
 8008586:	b289      	uxth	r1, r1
 8008588:	465b      	mov	r3, fp
 800858a:	f8cd c000 	str.w	ip, [sp]
 800858e:	b280      	uxth	r0, r0
 8008590:	f7f8 fa9a 	bl	8000ac8 <LCD_Rect_Fill>
 8008594:	1e7c      	subs	r4, r7, #1
		if (P < 0)
 8008596:	f1b8 0f00 	cmp.w	r8, #0
			P = (P + 5) + (2 * (a_ - b_));
 800859a:	eba4 0409 	sub.w	r4, r4, r9
 800859e:	f108 0205 	add.w	r2, r8, #5
			P = (P + 3) + (2 * a_);
 80085a2:	f108 0103 	add.w	r1, r8, #3
		if (P < 0)
 80085a6:	f2c0 8084 	blt.w	80086b2 <main+0x15fa>
			b_--;
 80085aa:	f109 39ff 	add.w	r9, r9, #4294967295
	while (a_ <= b_)
 80085ae:	454f      	cmp	r7, r9
			P = (P + 5) + (2 * (a_ - b_));
 80085b0:	eb02 0844 	add.w	r8, r2, r4, lsl #1
	while (a_ <= b_)
 80085b4:	f106 0602 	add.w	r6, r6, #2
 80085b8:	fa1f fa89 	uxth.w	sl, r9
 80085bc:	f107 0701 	add.w	r7, r7, #1
 80085c0:	ddc4      	ble.n	800854c <main+0x1494>
 80085c2:	f04f 0807 	mov.w	r8, #7
 80085c6:	f04f 0a00 	mov.w	sl, #0
 80085ca:	2601      	movs	r6, #1
 80085cc:	f06f 0705 	mvn.w	r7, #5
 80085d0:	46c1      	mov	r9, r8
 80085d2:	f8dd b00c 	ldr.w	fp, [sp, #12]
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 80085d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80085da:	f04f 0c00 	mov.w	ip, #0
 80085de:	ea4f 0449 	mov.w	r4, r9, lsl #1
 80085e2:	b2b5      	uxth	r5, r6
 80085e4:	f10a 0201 	add.w	r2, sl, #1
 80085e8:	3401      	adds	r4, #1
 80085ea:	b2a4      	uxth	r4, r4
 80085ec:	fa1f fb82 	uxth.w	fp, r2
 80085f0:	f1c9 014b 	rsb	r1, r9, #75	; 0x4b
 80085f4:	f1c5 00ad 	rsb	r0, r5, #173	; 0xad
 80085f8:	4623      	mov	r3, r4
 80085fa:	465a      	mov	r2, fp
 80085fc:	b289      	uxth	r1, r1
 80085fe:	b280      	uxth	r0, r0
 8008600:	f8cd c000 	str.w	ip, [sp]
 8008604:	f7f8 fa60 	bl	8000ac8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8008608:	f04f 0c00 	mov.w	ip, #0
 800860c:	f1c9 00ac 	rsb	r0, r9, #172	; 0xac
 8008610:	f1c5 014c 	rsb	r1, r5, #76	; 0x4c
 8008614:	4622      	mov	r2, r4
 8008616:	b289      	uxth	r1, r1
 8008618:	465b      	mov	r3, fp
 800861a:	f8cd c000 	str.w	ip, [sp]
 800861e:	b280      	uxth	r0, r0
 8008620:	f7f8 fa52 	bl	8000ac8 <LCD_Rect_Fill>
 8008624:	1e74      	subs	r4, r6, #1
		if (P < 0)
 8008626:	2f00      	cmp	r7, #0
			P = (P + 5) + (2 * (a_ - b_));
 8008628:	eba4 0408 	sub.w	r4, r4, r8
 800862c:	f107 0205 	add.w	r2, r7, #5
			P = (P + 3) + (2 * a_);
 8008630:	f107 0103 	add.w	r1, r7, #3
		if (P < 0)
 8008634:	db34      	blt.n	80086a0 <main+0x15e8>
			b_--;
 8008636:	f108 38ff 	add.w	r8, r8, #4294967295
	while (a_ <= b_)
 800863a:	4546      	cmp	r6, r8
			P = (P + 5) + (2 * (a_ - b_));
 800863c:	eb02 0744 	add.w	r7, r2, r4, lsl #1
	while (a_ <= b_)
 8008640:	f10a 0a02 	add.w	sl, sl, #2
 8008644:	fa1f f988 	uxth.w	r9, r8
 8008648:	f106 0601 	add.w	r6, r6, #1
 800864c:	ddc5      	ble.n	80085da <main+0x1522>
    GPIOx->BSRR = GPIO_Pin;
 800864e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008652:	4ab8      	ldr	r2, [pc, #736]	; (8008934 <main+0x187c>)
 8008654:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008658:	6113      	str	r3, [r2, #16]
 800865a:	e48b      	b.n	8007f74 <main+0xebc>
			a_++;
 800865c:	9906      	ldr	r1, [sp, #24]
			P = (P + 3) + (2 * a_);
 800865e:	eb00 0244 	add.w	r2, r0, r4, lsl #1
			a_++;
 8008662:	460b      	mov	r3, r1
			P = (P + 3) + (2 * a_);
 8008664:	9205      	str	r2, [sp, #20]
	while (a_ <= b_)
 8008666:	3301      	adds	r3, #1
 8008668:	1c62      	adds	r2, r4, #1
 800866a:	428e      	cmp	r6, r1
 800866c:	9203      	str	r2, [sp, #12]
 800866e:	9306      	str	r3, [sp, #24]
 8008670:	f6bf aae7 	bge.w	8007c42 <main+0xb8a>
 8008674:	f7ff bb55 	b.w	8007d22 <main+0xc6a>
 8008678:	45b0      	cmp	r8, r6
			P = (P + 3) + (2 * a_);
 800867a:	eb0a 0701 	add.w	r7, sl, r1
	while (a_ <= b_)
 800867e:	f106 0601 	add.w	r6, r6, #1
 8008682:	f10a 0a02 	add.w	sl, sl, #2
 8008686:	f6bf ac34 	bge.w	8007ef2 <main+0xe3a>
 800868a:	e46d      	b.n	8007f68 <main+0xeb0>
 800868c:	45b0      	cmp	r8, r6
			P = (P + 3) + (2 * a_);
 800868e:	eb0a 0701 	add.w	r7, sl, r1
	while (a_ <= b_)
 8008692:	f106 0601 	add.w	r6, r6, #1
 8008696:	f10a 0a02 	add.w	sl, sl, #2
 800869a:	f6bf abe3 	bge.w	8007e64 <main+0xdac>
 800869e:	e41c      	b.n	8007eda <main+0xe22>
 80086a0:	45b0      	cmp	r8, r6
			P = (P + 3) + (2 * a_);
 80086a2:	eb0a 0701 	add.w	r7, sl, r1
	while (a_ <= b_)
 80086a6:	f106 0601 	add.w	r6, r6, #1
 80086aa:	f10a 0a02 	add.w	sl, sl, #2
 80086ae:	da94      	bge.n	80085da <main+0x1522>
 80086b0:	e7cd      	b.n	800864e <main+0x1596>
 80086b2:	45b9      	cmp	r9, r7
			P = (P + 3) + (2 * a_);
 80086b4:	eb06 0801 	add.w	r8, r6, r1
	while (a_ <= b_)
 80086b8:	f107 0701 	add.w	r7, r7, #1
 80086bc:	f106 0602 	add.w	r6, r6, #2
 80086c0:	f6bf af44 	bge.w	800854c <main+0x1494>
 80086c4:	e77d      	b.n	80085c2 <main+0x150a>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086c6:	f8db e024 	ldr.w	lr, [fp, #36]	; 0x24
      hi2c->XferSize--;
 80086ca:	1e43      	subs	r3, r0, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086cc:	46f4      	mov	ip, lr
 80086ce:	f81c 2b01 	ldrb.w	r2, [ip], #1
      hi2c->XferSize--;
 80086d2:	b29b      	uxth	r3, r3
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086d4:	610a      	str	r2, [r1, #16]
      hi2c->XferCount--;
 80086d6:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80086da:	f8cb c024 	str.w	ip, [fp, #36]	; 0x24
      hi2c->XferCount--;
 80086de:	3a01      	subs	r2, #1
 80086e0:	b292      	uxth	r2, r2
 80086e2:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80086e6:	694a      	ldr	r2, [r1, #20]
      hi2c->XferSize--;
 80086e8:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80086ec:	0752      	lsls	r2, r2, #29
 80086ee:	d43b      	bmi.n	8008768 <main+0x16b0>
      hi2c->XferSize--;
 80086f0:	4618      	mov	r0, r3
    while (hi2c->XferSize > 0U)
 80086f2:	2800      	cmp	r0, #0
 80086f4:	f47f aeb2 	bne.w	800845c <main+0x13a4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80086f8:	694b      	ldr	r3, [r1, #20]
 80086fa:	f013 0304 	ands.w	r3, r3, #4
 80086fe:	d10d      	bne.n	800871c <main+0x1664>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008700:	694a      	ldr	r2, [r1, #20]
 8008702:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 8008706:	d11c      	bne.n	8008742 <main+0x168a>
 8008708:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800870c:	1b9b      	subs	r3, r3, r6
 800870e:	2b64      	cmp	r3, #100	; 0x64
 8008710:	f63f aeb3 	bhi.w	800847a <main+0x13c2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008714:	694b      	ldr	r3, [r1, #20]
 8008716:	f013 0304 	ands.w	r3, r3, #4
 800871a:	d0f1      	beq.n	8008700 <main+0x1648>
    hi2c->State = HAL_I2C_STATE_READY;
 800871c:	2220      	movs	r2, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800871e:	680b      	ldr	r3, [r1, #0]
 8008720:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008724:	600b      	str	r3, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008726:	f88b 203d 	strb.w	r2, [fp, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800872a:	f88b 403e 	strb.w	r4, [fp, #62]	; 0x3e
 800872e:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
    __HAL_UNLOCK(hi2c);
 8008732:	f88b 403c 	strb.w	r4, [fp, #60]	; 0x3c
 8008736:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
  while ((HAL_GetTick() - tickstart) < wait)
 800873a:	1a9b      	subs	r3, r3, r2
 800873c:	2b05      	cmp	r3, #5
 800873e:	d9fa      	bls.n	8008736 <main+0x167e>
 8008740:	e6b2      	b.n	80084a8 <main+0x13f0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008742:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008746:	614a      	str	r2, [r1, #20]
    hi2c->State               = HAL_I2C_STATE_READY;
 8008748:	2220      	movs	r2, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800874a:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800874e:	f88b 203d 	strb.w	r2, [fp, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008752:	f88b 303e 	strb.w	r3, [fp, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8008756:	f88b 303c 	strb.w	r3, [fp, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800875a:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
 800875e:	f043 0304 	orr.w	r3, r3, #4
 8008762:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 8008766:	e697      	b.n	8008498 <main+0x13e0>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008768:	2b00      	cmp	r3, #0
 800876a:	d0c5      	beq.n	80086f8 <main+0x1640>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800876c:	f89e 3001 	ldrb.w	r3, [lr, #1]
        hi2c->XferSize--;
 8008770:	3802      	subs	r0, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008772:	610b      	str	r3, [r1, #16]
        hi2c->XferCount--;
 8008774:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
        hi2c->XferSize--;
 8008778:	b280      	uxth	r0, r0
        hi2c->XferCount--;
 800877a:	3a01      	subs	r2, #1
        hi2c->pBuffPtr++;
 800877c:	f10e 0302 	add.w	r3, lr, #2
        hi2c->XferCount--;
 8008780:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8008782:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
        hi2c->XferSize--;
 8008786:	f8ab 0028 	strh.w	r0, [fp, #40]	; 0x28
        hi2c->XferCount--;
 800878a:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
 800878e:	e7b0      	b.n	80086f2 <main+0x163a>
        hi2c->State             = HAL_I2C_STATE_READY;
 8008790:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008792:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008796:	f88b 203d 	strb.w	r2, [fp, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800879a:	f88b 303e 	strb.w	r3, [fp, #62]	; 0x3e
        __HAL_UNLOCK(hi2c);
 800879e:	f88b 303c 	strb.w	r3, [fp, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80087a2:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
 80087a6:	4313      	orrs	r3, r2
 80087a8:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 80087ac:	e67c      	b.n	80084a8 <main+0x13f0>
	pressure = (uint16_t)BME280_getPressure();
 80087ae:	f8ab 20ea 	strh.w	r2, [fp, #234]	; 0xea
	if (pressure > 300 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 80087b2:	e5e2      	b.n	800837a <main+0x12c2>
			val[0] = rx_buffer[2];
 80087b4:	f8bb 35e2 	ldrh.w	r3, [fp, #1506]	; 0x5e2
			DS3231_setHrs(atoi(val));
 80087b8:	a81e      	add	r0, sp, #120	; 0x78
			val[0] = rx_buffer[2];
 80087ba:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
			DS3231_setHrs(atoi(val));
 80087be:	f000 fa48 	bl	8008c52 <atoi>
    return ((val / 10 * 16) + (val % 10));
 80087c2:	240a      	movs	r4, #10
 80087c4:	b2c5      	uxtb	r5, r0
    rtcBufferSet[2] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
}

void DS3231_setHrs(uint8_t value) {
    DS3231_Update();
 80087c6:	f7fb fb13 	bl	8003df0 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80087ca:	fbb5 f6f4 	udiv	r6, r5, r4
 80087ce:	fb04 5316 	mls	r3, r4, r6, r5
 80087d2:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    rtcBufferSet[3] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80087d6:	2211      	movs	r2, #17
 80087d8:	4957      	ldr	r1, [pc, #348]	; (8008938 <main+0x1880>)
    rtcBufferSet[3] = decToBcd(value);
 80087da:	f88b 306f 	strb.w	r3, [fp, #111]	; 0x6f
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80087de:	20d0      	movs	r0, #208	; 0xd0
 80087e0:	f7fb f9d2 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[0] = rx_buffer[4];
 80087e4:	f8bb 35e4 	ldrh.w	r3, [fp, #1508]	; 0x5e4
			DS3231_setMin(atoi(val));
 80087e8:	a81e      	add	r0, sp, #120	; 0x78
			val[0] = rx_buffer[4];
 80087ea:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
			DS3231_setMin(atoi(val));
 80087ee:	f000 fa30 	bl	8008c52 <atoi>
 80087f2:	b2c5      	uxtb	r5, r0
    DS3231_Update();
 80087f4:	f7fb fafc 	bl	8003df0 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80087f8:	fbb5 f6f4 	udiv	r6, r5, r4
 80087fc:	fb04 5316 	mls	r3, r4, r6, r5
 8008800:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008804:	2211      	movs	r2, #17
 8008806:	494c      	ldr	r1, [pc, #304]	; (8008938 <main+0x1880>)
    rtcBufferSet[2] = decToBcd(value);
 8008808:	f88b 306e 	strb.w	r3, [fp, #110]	; 0x6e
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800880c:	20d0      	movs	r0, #208	; 0xd0
 800880e:	f7fb f9bb 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[0] = rx_buffer[6];
 8008812:	f8bb 35e6 	ldrh.w	r3, [fp, #1510]	; 0x5e6
			DS3231_setSec(atoi(val));
 8008816:	a81e      	add	r0, sp, #120	; 0x78
			val[0] = rx_buffer[6];
 8008818:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
			DS3231_setSec(atoi(val));
 800881c:	f000 fa19 	bl	8008c52 <atoi>
 8008820:	b2c5      	uxtb	r5, r0
    DS3231_Update();
 8008822:	f7fb fae5 	bl	8003df0 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8008826:	fbb5 f6f4 	udiv	r6, r5, r4
 800882a:	fb04 5316 	mls	r3, r4, r6, r5
 800882e:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008832:	2211      	movs	r2, #17
 8008834:	4940      	ldr	r1, [pc, #256]	; (8008938 <main+0x1880>)
    rtcBufferSet[1] = decToBcd(value);
 8008836:	f88b 306d 	strb.w	r3, [fp, #109]	; 0x6d
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800883a:	20d0      	movs	r0, #208	; 0xd0
 800883c:	f7fb f9a4 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[0] = rx_buffer[8];
 8008840:	f8bb 35e8 	ldrh.w	r3, [fp, #1512]	; 0x5e8
			DS3231_setDate(atoi(val));
 8008844:	a81e      	add	r0, sp, #120	; 0x78
			val[0] = rx_buffer[8];
 8008846:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
			DS3231_setDate(atoi(val));
 800884a:	f000 fa02 	bl	8008c52 <atoi>
 800884e:	b2c5      	uxtb	r5, r0
    rtcBufferSet[4] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
}

void DS3231_setDate(uint8_t value) {
    DS3231_Update();
 8008850:	f7fb face 	bl	8003df0 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8008854:	fbb5 f6f4 	udiv	r6, r5, r4
 8008858:	fb04 5316 	mls	r3, r4, r6, r5
 800885c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    rtcBufferSet[5] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008860:	2211      	movs	r2, #17
 8008862:	4935      	ldr	r1, [pc, #212]	; (8008938 <main+0x1880>)
    rtcBufferSet[5] = decToBcd(value);
 8008864:	f88b 3071 	strb.w	r3, [fp, #113]	; 0x71
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008868:	20d0      	movs	r0, #208	; 0xd0
 800886a:	f7fb f98d 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[0] = rx_buffer[10];
 800886e:	f8bb 35ea 	ldrh.w	r3, [fp, #1514]	; 0x5ea
			DS3231_setMonth(atoi(val));
 8008872:	a81e      	add	r0, sp, #120	; 0x78
			val[0] = rx_buffer[10];
 8008874:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
			DS3231_setMonth(atoi(val));
 8008878:	f000 f9eb 	bl	8008c52 <atoi>
 800887c:	b2c5      	uxtb	r5, r0
}

void DS3231_setMonth(uint8_t value) {
    DS3231_Update();
 800887e:	f7fb fab7 	bl	8003df0 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 8008882:	fbb5 f6f4 	udiv	r6, r5, r4
 8008886:	fb04 5316 	mls	r3, r4, r6, r5
 800888a:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    rtcBufferSet[6] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 800888e:	2211      	movs	r2, #17
 8008890:	4929      	ldr	r1, [pc, #164]	; (8008938 <main+0x1880>)
    rtcBufferSet[6] = decToBcd(value);
 8008892:	f88b 3072 	strb.w	r3, [fp, #114]	; 0x72
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8008896:	20d0      	movs	r0, #208	; 0xd0
 8008898:	f7fb f976 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[0] = rx_buffer[12];
 800889c:	f8bb 35ec 	ldrh.w	r3, [fp, #1516]	; 0x5ec
			DS3231_setYear(atoi(val));
 80088a0:	a81e      	add	r0, sp, #120	; 0x78
			val[0] = rx_buffer[12];
 80088a2:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
			DS3231_setYear(atoi(val));
 80088a6:	f000 f9d4 	bl	8008c52 <atoi>
 80088aa:	b2c5      	uxtb	r5, r0
}

void DS3231_setYear(uint8_t value) {
    DS3231_Update();
 80088ac:	f7fb faa0 	bl	8003df0 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80088b0:	fbb5 f6f4 	udiv	r6, r5, r4
 80088b4:	fb04 5316 	mls	r3, r4, r6, r5
 80088b8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    rtcBufferSet[7] = decToBcd(value);
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80088bc:	2211      	movs	r2, #17
 80088be:	491e      	ldr	r1, [pc, #120]	; (8008938 <main+0x1880>)
    rtcBufferSet[7] = decToBcd(value);
 80088c0:	f88b 3073 	strb.w	r3, [fp, #115]	; 0x73
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80088c4:	20d0      	movs	r0, #208	; 0xd0
 80088c6:	f7fb f95f 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
			val[1] = rx_buffer[14];
 80088ca:	f89b 35ee 	ldrb.w	r3, [fp, #1518]	; 0x5ee
			DS3231_setDay(atoi(val));
 80088ce:	a81e      	add	r0, sp, #120	; 0x78
			val[1] = rx_buffer[14];
 80088d0:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
			DS3231_setDay(atoi(val));
 80088d4:	f000 f9bd 	bl	8008c52 <atoi>
 80088d8:	b2c5      	uxtb	r5, r0
    DS3231_Update();
 80088da:	f7fb fa89 	bl	8003df0 <DS3231_Update>
    return ((val / 10 * 16) + (val % 10));
 80088de:	fbb5 f2f4 	udiv	r2, r5, r4
 80088e2:	fb04 5312 	mls	r3, r4, r2, r5
 80088e6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80088ea:	20d0      	movs	r0, #208	; 0xd0
 80088ec:	2211      	movs	r2, #17
 80088ee:	4912      	ldr	r1, [pc, #72]	; (8008938 <main+0x1880>)
    rtcBufferSet[4] = decToBcd(value);
 80088f0:	f88b 3070 	strb.w	r3, [fp, #112]	; 0x70
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80088f4:	f7fb f948 	bl	8003b88 <HAL_I2C_Master_Transmit.constprop.0.isra.0>
 80088f8:	e5f3      	b.n	80084e2 <main+0x142a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088fa:	f8db 1000 	ldr.w	r1, [fp]
 80088fe:	e6fb      	b.n	80086f8 <main+0x1640>
 8008900:	b672      	cpsid	i
	while (1)
 8008902:	e7fe      	b.n	8008902 <main+0x184a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008904:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8008908:	3290      	adds	r2, #144	; 0x90
 800890a:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800890c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800890e:	f812 6c18 	ldrb.w	r6, [r2, #-24]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008912:	f140 80c9 	bpl.w	8008aa8 <main+0x19f0>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008916:	6863      	ldr	r3, [r4, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008918:	4a08      	ldr	r2, [pc, #32]	; (800893c <main+0x1884>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800891a:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800891e:	fb02 f606 	mul.w	r6, r2, r6
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008922:	3390      	adds	r3, #144	; 0x90
 8008924:	446b      	add	r3, sp
 8008926:	f813 3c28 	ldrb.w	r3, [r3, #-40]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800892a:	fbb6 f6f3 	udiv	r6, r6, r3
 800892e:	f7fe bcbd 	b.w	80072ac <main+0x1f4>
 8008932:	bf00      	nop
 8008934:	40011000 	.word	0x40011000
 8008938:	2000026c 	.word	0x2000026c
 800893c:	007a1200 	.word	0x007a1200
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008940:	2203      	movs	r2, #3
    hi2c->Lock = HAL_UNLOCKED;
 8008942:	f88b 503c 	strb.w	r5, [fp, #60]	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008946:	9520      	str	r5, [sp, #128]	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008948:	69a3      	ldr	r3, [r4, #24]
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800894a:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800894c:	f043 0308 	orr.w	r3, r3, #8
 8008950:	61a3      	str	r3, [r4, #24]
 8008952:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008954:	9221      	str	r2, [sp, #132]	; 0x84
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008956:	f003 0308 	and.w	r3, r3, #8
 800895a:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800895c:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800895e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008960:	2312      	movs	r3, #18
 8008962:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008966:	f7f8 fda5 	bl	80014b4 <HAL_GPIO_Init>
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800896a:	2010      	movs	r0, #16
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800896c:	2214      	movs	r2, #20
  hdma->Lock = HAL_UNLOCKED;
 800896e:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008972:	f04f 0c18 	mov.w	ip, #24
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008976:	69e3      	ldr	r3, [r4, #28]
 8008978:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800897c:	61e3      	str	r3, [r4, #28]
 800897e:	69e3      	ldr	r3, [r4, #28]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008980:	f8cb 04a8 	str.w	r0, [fp, #1192]	; 0x4a8
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008988:	9312      	str	r3, [sp, #72]	; 0x48
 800898a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  hdma->DmaBaseAddress = DMA1;
 800898c:	4b94      	ldr	r3, [pc, #592]	; (8008be0 <main+0x1b28>)
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800898e:	f8cb 54ac 	str.w	r5, [fp, #1196]	; 0x4ac
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008992:	f8cb 54b4 	str.w	r5, [fp, #1204]	; 0x4b4
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008996:	f8cb 24e4 	str.w	r2, [fp, #1252]	; 0x4e4
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800899a:	f8cb 74b0 	str.w	r7, [fp, #1200]	; 0x4b0
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800899e:	f8cb 54b8 	str.w	r5, [fp, #1208]	; 0x4b8
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80089a2:	f8cb 54bc 	str.w	r5, [fp, #1212]	; 0x4bc
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80089a6:	f8cb 54c0 	str.w	r5, [fp, #1216]	; 0x4c0
  tmp = hdma->Instance->CCR;
 80089aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80089ac:	488d      	ldr	r0, [pc, #564]	; (8008be4 <main+0x1b2c>)
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80089ae:	4c8e      	ldr	r4, [pc, #568]	; (8008be8 <main+0x1b30>)
 80089b0:	4002      	ands	r2, r0
  tmp |=  hdma->Init.Direction        |
 80089b2:	f042 0290 	orr.w	r2, r2, #144	; 0x90
 80089b6:	f8cb 44a4 	str.w	r4, [fp, #1188]	; 0x4a4
  hdma->DmaBaseAddress = DMA1;
 80089ba:	f8cb 34e0 	str.w	r3, [fp, #1248]	; 0x4e0
  hdma->Instance->CCR = tmp;
 80089be:	66da      	str	r2, [r3, #108]	; 0x6c

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80089c0:	f8cb 74f4 	str.w	r7, [fp, #1268]	; 0x4f4
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80089c4:	f8cb c528 	str.w	ip, [fp, #1320]	; 0x528
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80089c8:	f8cb 54dc 	str.w	r5, [fp, #1244]	; 0x4dc
  hdma->Lock = HAL_UNLOCKED;
 80089cc:	f8ab 14c4 	strh.w	r1, [fp, #1220]	; 0x4c4
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80089d0:	f8cb 54ec 	str.w	r5, [fp, #1260]	; 0x4ec
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80089d4:	f8cb 54f0 	str.w	r5, [fp, #1264]	; 0x4f0
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80089d8:	f8cb 54f8 	str.w	r5, [fp, #1272]	; 0x4f8
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80089dc:	f8cb 54fc 	str.w	r5, [fp, #1276]	; 0x4fc
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80089e0:	f8cb 5500 	str.w	r5, [fp, #1280]	; 0x500
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80089e4:	f8cb 5504 	str.w	r5, [fp, #1284]	; 0x504
  tmp = hdma->Instance->CCR;
 80089e8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80089ec:	3414      	adds	r4, #20
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80089ee:	4002      	ands	r2, r0
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80089f0:	487e      	ldr	r0, [pc, #504]	; (8008bec <main+0x1b34>)
  tmp |=  hdma->Init.Direction        |
 80089f2:	433a      	orrs	r2, r7
 80089f4:	f8cb 0034 	str.w	r0, [fp, #52]	; 0x34
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80089f8:	3044      	adds	r0, #68	; 0x44
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80089fa:	f8cb b4c8 	str.w	fp, [fp, #1224]	; 0x4c8
  hdma->DmaBaseAddress = DMA1;
 80089fe:	f8cb 3524 	str.w	r3, [fp, #1316]	; 0x524
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8008a02:	f8cb 44e8 	str.w	r4, [fp, #1256]	; 0x4e8
  hdma->Instance->CCR = tmp;
 8008a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a0a:	f8cb 5520 	str.w	r5, [fp, #1312]	; 0x520
  hdma->Lock = HAL_UNLOCKED;
 8008a0e:	f8ab 1508 	strh.w	r1, [fp, #1288]	; 0x508
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8008a12:	f8cb 0038 	str.w	r0, [fp, #56]	; 0x38
 8008a16:	f8cb b50c 	str.w	fp, [fp, #1292]	; 0x50c
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008a1a:	f7fe bccd 	b.w	80073b8 <main+0x300>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008a1e:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8008a22:	fb04 f202 	mul.w	r2, r4, r2
 8008a26:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8008a2a:	fbb2 f2f4 	udiv	r2, r2, r4
 8008a2e:	3201      	adds	r2, #1
 8008a30:	430a      	orrs	r2, r1
 8008a32:	6202      	str	r2, [r0, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008a34:	69c1      	ldr	r1, [r0, #28]
 8008a36:	f8db c008 	ldr.w	ip, [fp, #8]
 8008a3a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8008a3e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8008a42:	f1bc 0f00 	cmp.w	ip, #0
 8008a46:	d11d      	bne.n	8008a84 <main+0x19cc>
 8008a48:	1e5f      	subs	r7, r3, #1
 8008a4a:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8008a4e:	fbb7 f4f4 	udiv	r4, r7, r4
 8008a52:	0524      	lsls	r4, r4, #20
 8008a54:	f514 1f80 	cmn.w	r4, #1048576	; 0x100000
 8008a58:	bf14      	ite	ne
 8008a5a:	2400      	movne	r4, #0
 8008a5c:	2401      	moveq	r4, #1
 8008a5e:	006a      	lsls	r2, r5, #1
 8008a60:	b96c      	cbnz	r4, 8008a7e <main+0x19c6>
 8008a62:	f1bc 0f00 	cmp.w	ip, #0
 8008a66:	f040 80ab 	bne.w	8008bc0 <main+0x1b08>
 8008a6a:	1953      	adds	r3, r2, r5
 8008a6c:	fbb7 f3f3 	udiv	r3, r7, r3
 8008a70:	3301      	adds	r3, #1
 8008a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a7a:	f7fe bce8 	b.w	800744e <main+0x396>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	f7fe bce5 	b.w	800744e <main+0x396>
 8008a84:	2419      	movs	r4, #25
 8008a86:	fb05 f404 	mul.w	r4, r5, r4
 8008a8a:	1e5f      	subs	r7, r3, #1
 8008a8c:	fbb7 f4f4 	udiv	r4, r7, r4
 8008a90:	0524      	lsls	r4, r4, #20
 8008a92:	f514 1f80 	cmn.w	r4, #1048576	; 0x100000
 8008a96:	bf14      	ite	ne
 8008a98:	2400      	movne	r4, #0
 8008a9a:	2401      	moveq	r4, #1
 8008a9c:	006a      	lsls	r2, r5, #1
 8008a9e:	e7df      	b.n	8008a60 <main+0x19a8>
 8008aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008aa4:	f7fe bcd3 	b.w	800744e <main+0x396>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008aa8:	4b51      	ldr	r3, [pc, #324]	; (8008bf0 <main+0x1b38>)
 8008aaa:	fb03 f606 	mul.w	r6, r3, r6
 8008aae:	f7fe bbfd 	b.w	80072ac <main+0x1f4>
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008ab2:	2203      	movs	r2, #3
    huart->Lock = HAL_UNLOCKED;
 8008ab4:	f88b 40bc 	strb.w	r4, [fp, #188]	; 0xbc
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ab8:	9420      	str	r4, [sp, #128]	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8008aba:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008abc:	484d      	ldr	r0, [pc, #308]	; (8008bf4 <main+0x1b3c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8008abe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ac2:	61bb      	str	r3, [r7, #24]
 8008ac4:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ac6:	a91e      	add	r1, sp, #120	; 0x78
    __HAL_RCC_USART1_CLK_ENABLE();
 8008ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008acc:	9315      	str	r3, [sp, #84]	; 0x54
 8008ace:	9b15      	ldr	r3, [sp, #84]	; 0x54
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ad0:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8008ad2:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8008bf8 <main+0x1b40>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ad6:	f043 0304 	orr.w	r3, r3, #4
 8008ada:	61bb      	str	r3, [r7, #24]
 8008adc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008ade:	9221      	str	r2, [sp, #132]	; 0x84
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ae0:	f003 0304 	and.w	r3, r3, #4
 8008ae4:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008aea:	9b14      	ldr	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008aec:	2302      	movs	r3, #2
 8008aee:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008af2:	f7f8 fcdf 	bl	80014b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008af6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008afa:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008afc:	9420      	str	r4, [sp, #128]	; 0x80
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008afe:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b02:	f7f8 fcd7 	bl	80014b4 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008b06:	f04f 0e80 	mov.w	lr, #128	; 0x80
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008b0a:	f04f 0c10 	mov.w	ip, #16
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008b0e:	f8cb 556c 	str.w	r5, [fp, #1388]	; 0x56c
  hdma->Lock = HAL_UNLOCKED;
 8008b12:	f44f 7580 	mov.w	r5, #256	; 0x100
  hdma->DmaBaseAddress = DMA1;
 8008b16:	4b32      	ldr	r3, [pc, #200]	; (8008be0 <main+0x1b28>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b18:	f8cb 4534 	str.w	r4, [fp, #1332]	; 0x534
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008b1c:	f8cb 453c 	str.w	r4, [fp, #1340]	; 0x53c
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008b20:	f8cb 4540 	str.w	r4, [fp, #1344]	; 0x540
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008b24:	f8cb 4544 	str.w	r4, [fp, #1348]	; 0x544
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008b28:	f8cb 4548 	str.w	r4, [fp, #1352]	; 0x548
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008b2c:	f8cb c530 	str.w	ip, [fp, #1328]	; 0x530
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008b30:	f8cb e538 	str.w	lr, [fp, #1336]	; 0x538
  tmp = hdma->Instance->CCR;
 8008b34:	6c59      	ldr	r1, [r3, #68]	; 0x44
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008b36:	4f2b      	ldr	r7, [pc, #172]	; (8008be4 <main+0x1b2c>)
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8008b38:	4a30      	ldr	r2, [pc, #192]	; (8008bfc <main+0x1b44>)
 8008b3a:	4039      	ands	r1, r7
  tmp |=  hdma->Init.Direction        |
 8008b3c:	f041 0190 	orr.w	r1, r1, #144	; 0x90
 8008b40:	f8cb 252c 	str.w	r2, [fp, #1324]	; 0x52c
  hdma->DmaBaseAddress = DMA1;
 8008b44:	f8cb 3568 	str.w	r3, [fp, #1384]	; 0x568
  hdma->Instance->CCR = tmp;
 8008b48:	6459      	str	r1, [r3, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b4a:	f8cb 4564 	str.w	r4, [fp, #1380]	; 0x564
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008b4e:	f8cb e57c 	str.w	lr, [fp, #1404]	; 0x57c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008b52:	f8cb c5b0 	str.w	ip, [fp, #1456]	; 0x5b0
  hdma->Lock = HAL_UNLOCKED;
 8008b56:	f8ab 554c 	strh.w	r5, [fp, #1356]	; 0x54c
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008b5a:	f8cb 4574 	str.w	r4, [fp, #1396]	; 0x574
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b5e:	f8cb 4578 	str.w	r4, [fp, #1400]	; 0x578
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008b62:	f8cb 4580 	str.w	r4, [fp, #1408]	; 0x580
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008b66:	f8cb 4584 	str.w	r4, [fp, #1412]	; 0x584
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8008b6a:	f8cb 4588 	str.w	r4, [fp, #1416]	; 0x588
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008b6e:	f8cb 458c 	str.w	r4, [fp, #1420]	; 0x58c
  tmp = hdma->Instance->CCR;
 8008b72:	6d99      	ldr	r1, [r3, #88]	; 0x58
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008b74:	4a22      	ldr	r2, [pc, #136]	; (8008c00 <main+0x1b48>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008b76:	4039      	ands	r1, r7
 8008b78:	f2a2 40ac 	subw	r0, r2, #1196	; 0x4ac
 8008b7c:	f8cb 20b4 	str.w	r2, [fp, #180]	; 0xb4
  tmp |=  hdma->Init.Direction        |
 8008b80:	ea41 010e 	orr.w	r1, r1, lr
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008b84:	3244      	adds	r2, #68	; 0x44
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8008b86:	f8cb 8570 	str.w	r8, [fp, #1392]	; 0x570
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008b8a:	f8cb 0550 	str.w	r0, [fp, #1360]	; 0x550
  hdma->DmaBaseAddress = DMA1;
 8008b8e:	f8cb 35ac 	str.w	r3, [fp, #1452]	; 0x5ac
  hdma->Instance->CCR = tmp;
 8008b92:	6599      	str	r1, [r3, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b94:	f8cb 45a8 	str.w	r4, [fp, #1448]	; 0x5a8
  hdma->Lock = HAL_UNLOCKED;
 8008b98:	f8ab 5590 	strh.w	r5, [fp, #1424]	; 0x590
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008b9c:	f8cb 20b8 	str.w	r2, [fp, #184]	; 0xb8
 8008ba0:	f8cb 0594 	str.w	r0, [fp, #1428]	; 0x594
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008ba4:	f7fe bce2 	b.w	800756c <main+0x4b4>
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008ba8:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	4915      	ldr	r1, [pc, #84]	; (8008c04 <main+0x1b4c>)
 8008bb0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8008bb4:	440b      	add	r3, r1
 8008bb6:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 8008bba:	40de      	lsrs	r6, r3
 8008bbc:	f7fe bd09 	b.w	80075d2 <main+0x51a>
 8008bc0:	2319      	movs	r3, #25
 8008bc2:	fb05 f303 	mul.w	r3, r5, r3
 8008bc6:	fbb7 f3f3 	udiv	r3, r7, r3
 8008bca:	3301      	adds	r3, #1
 8008bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008bd4:	f7fe bc3b 	b.w	800744e <main+0x396>
    __HAL_UNLOCK(hdma); 
 8008bd8:	f883 2020 	strb.w	r2, [r3, #32]
 8008bdc:	f7fe bfbe 	b.w	8007b5c <main+0xaa4>
 8008be0:	40020000 	.word	0x40020000
 8008be4:	ffffc00f 	.word	0xffffc00f
 8008be8:	4002006c 	.word	0x4002006c
 8008bec:	200006a4 	.word	0x200006a4
 8008bf0:	003d0900 	.word	0x003d0900
 8008bf4:	40010800 	.word	0x40010800
 8008bf8:	40020058 	.word	0x40020058
 8008bfc:	40020044 	.word	0x40020044
 8008c00:	2000072c 	.word	0x2000072c
 8008c04:	0800d648 	.word	0x0800d648

08008c08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008c08:	480c      	ldr	r0, [pc, #48]	; (8008c3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008c0a:	490d      	ldr	r1, [pc, #52]	; (8008c40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008c0c:	4a0d      	ldr	r2, [pc, #52]	; (8008c44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008c10:	e002      	b.n	8008c18 <LoopCopyDataInit>

08008c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008c16:	3304      	adds	r3, #4

08008c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008c1c:	d3f9      	bcc.n	8008c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008c1e:	4a0a      	ldr	r2, [pc, #40]	; (8008c48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008c20:	4c0a      	ldr	r4, [pc, #40]	; (8008c4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008c24:	e001      	b.n	8008c2a <LoopFillZerobss>

08008c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008c28:	3204      	adds	r2, #4

08008c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008c2c:	d3fb      	bcc.n	8008c26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008c2e:	f7fd fb1b 	bl	8006268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008c32:	f000 f819 	bl	8008c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008c36:	f7fe fa3f 	bl	80070b8 <main>
  bx lr
 8008c3a:	4770      	bx	lr
  ldr r0, =_sdata
 8008c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008c40:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8008c44:	0801e554 	.word	0x0801e554
  ldr r2, =_sbss
 8008c48:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8008c4c:	200008fc 	.word	0x200008fc

08008c50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008c50:	e7fe      	b.n	8008c50 <ADC1_2_IRQHandler>

08008c52 <atoi>:
 8008c52:	220a      	movs	r2, #10
 8008c54:	2100      	movs	r1, #0
 8008c56:	f001 bd53 	b.w	800a700 <strtol>
	...

08008c5c <__errno>:
 8008c5c:	4b01      	ldr	r3, [pc, #4]	; (8008c64 <__errno+0x8>)
 8008c5e:	6818      	ldr	r0, [r3, #0]
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	2000000c 	.word	0x2000000c

08008c68 <__libc_init_array>:
 8008c68:	b570      	push	{r4, r5, r6, lr}
 8008c6a:	2600      	movs	r6, #0
 8008c6c:	4d0c      	ldr	r5, [pc, #48]	; (8008ca0 <__libc_init_array+0x38>)
 8008c6e:	4c0d      	ldr	r4, [pc, #52]	; (8008ca4 <__libc_init_array+0x3c>)
 8008c70:	1b64      	subs	r4, r4, r5
 8008c72:	10a4      	asrs	r4, r4, #2
 8008c74:	42a6      	cmp	r6, r4
 8008c76:	d109      	bne.n	8008c8c <__libc_init_array+0x24>
 8008c78:	f004 fcda 	bl	800d630 <_init>
 8008c7c:	2600      	movs	r6, #0
 8008c7e:	4d0a      	ldr	r5, [pc, #40]	; (8008ca8 <__libc_init_array+0x40>)
 8008c80:	4c0a      	ldr	r4, [pc, #40]	; (8008cac <__libc_init_array+0x44>)
 8008c82:	1b64      	subs	r4, r4, r5
 8008c84:	10a4      	asrs	r4, r4, #2
 8008c86:	42a6      	cmp	r6, r4
 8008c88:	d105      	bne.n	8008c96 <__libc_init_array+0x2e>
 8008c8a:	bd70      	pop	{r4, r5, r6, pc}
 8008c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c90:	4798      	blx	r3
 8008c92:	3601      	adds	r6, #1
 8008c94:	e7ee      	b.n	8008c74 <__libc_init_array+0xc>
 8008c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c9a:	4798      	blx	r3
 8008c9c:	3601      	adds	r6, #1
 8008c9e:	e7f2      	b.n	8008c86 <__libc_init_array+0x1e>
 8008ca0:	0801e54c 	.word	0x0801e54c
 8008ca4:	0801e54c 	.word	0x0801e54c
 8008ca8:	0801e54c 	.word	0x0801e54c
 8008cac:	0801e550 	.word	0x0801e550

08008cb0 <memset>:
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	4402      	add	r2, r0
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d100      	bne.n	8008cba <memset+0xa>
 8008cb8:	4770      	bx	lr
 8008cba:	f803 1b01 	strb.w	r1, [r3], #1
 8008cbe:	e7f9      	b.n	8008cb4 <memset+0x4>

08008cc0 <__cvt>:
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc6:	461f      	mov	r7, r3
 8008cc8:	bfbb      	ittet	lt
 8008cca:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008cce:	461f      	movlt	r7, r3
 8008cd0:	2300      	movge	r3, #0
 8008cd2:	232d      	movlt	r3, #45	; 0x2d
 8008cd4:	b088      	sub	sp, #32
 8008cd6:	4614      	mov	r4, r2
 8008cd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008cda:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008cdc:	7013      	strb	r3, [r2, #0]
 8008cde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ce0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008ce4:	f023 0820 	bic.w	r8, r3, #32
 8008ce8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008cec:	d005      	beq.n	8008cfa <__cvt+0x3a>
 8008cee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008cf2:	d100      	bne.n	8008cf6 <__cvt+0x36>
 8008cf4:	3501      	adds	r5, #1
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	e000      	b.n	8008cfc <__cvt+0x3c>
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	aa07      	add	r2, sp, #28
 8008cfe:	9204      	str	r2, [sp, #16]
 8008d00:	aa06      	add	r2, sp, #24
 8008d02:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008d06:	e9cd 3500 	strd	r3, r5, [sp]
 8008d0a:	4622      	mov	r2, r4
 8008d0c:	463b      	mov	r3, r7
 8008d0e:	f001 fd8f 	bl	800a830 <_dtoa_r>
 8008d12:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d16:	4606      	mov	r6, r0
 8008d18:	d102      	bne.n	8008d20 <__cvt+0x60>
 8008d1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d1c:	07db      	lsls	r3, r3, #31
 8008d1e:	d522      	bpl.n	8008d66 <__cvt+0xa6>
 8008d20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d24:	eb06 0905 	add.w	r9, r6, r5
 8008d28:	d110      	bne.n	8008d4c <__cvt+0x8c>
 8008d2a:	7833      	ldrb	r3, [r6, #0]
 8008d2c:	2b30      	cmp	r3, #48	; 0x30
 8008d2e:	d10a      	bne.n	8008d46 <__cvt+0x86>
 8008d30:	2200      	movs	r2, #0
 8008d32:	2300      	movs	r3, #0
 8008d34:	4620      	mov	r0, r4
 8008d36:	4639      	mov	r1, r7
 8008d38:	f7fd fec4 	bl	8006ac4 <__aeabi_dcmpeq>
 8008d3c:	b918      	cbnz	r0, 8008d46 <__cvt+0x86>
 8008d3e:	f1c5 0501 	rsb	r5, r5, #1
 8008d42:	f8ca 5000 	str.w	r5, [sl]
 8008d46:	f8da 3000 	ldr.w	r3, [sl]
 8008d4a:	4499      	add	r9, r3
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	2300      	movs	r3, #0
 8008d50:	4620      	mov	r0, r4
 8008d52:	4639      	mov	r1, r7
 8008d54:	f7fd feb6 	bl	8006ac4 <__aeabi_dcmpeq>
 8008d58:	b108      	cbz	r0, 8008d5e <__cvt+0x9e>
 8008d5a:	f8cd 901c 	str.w	r9, [sp, #28]
 8008d5e:	2230      	movs	r2, #48	; 0x30
 8008d60:	9b07      	ldr	r3, [sp, #28]
 8008d62:	454b      	cmp	r3, r9
 8008d64:	d307      	bcc.n	8008d76 <__cvt+0xb6>
 8008d66:	4630      	mov	r0, r6
 8008d68:	9b07      	ldr	r3, [sp, #28]
 8008d6a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008d6c:	1b9b      	subs	r3, r3, r6
 8008d6e:	6013      	str	r3, [r2, #0]
 8008d70:	b008      	add	sp, #32
 8008d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d76:	1c59      	adds	r1, r3, #1
 8008d78:	9107      	str	r1, [sp, #28]
 8008d7a:	701a      	strb	r2, [r3, #0]
 8008d7c:	e7f0      	b.n	8008d60 <__cvt+0xa0>

08008d7e <__exponent>:
 8008d7e:	4603      	mov	r3, r0
 8008d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d82:	2900      	cmp	r1, #0
 8008d84:	f803 2b02 	strb.w	r2, [r3], #2
 8008d88:	bfb6      	itet	lt
 8008d8a:	222d      	movlt	r2, #45	; 0x2d
 8008d8c:	222b      	movge	r2, #43	; 0x2b
 8008d8e:	4249      	neglt	r1, r1
 8008d90:	2909      	cmp	r1, #9
 8008d92:	7042      	strb	r2, [r0, #1]
 8008d94:	dd2b      	ble.n	8008dee <__exponent+0x70>
 8008d96:	f10d 0407 	add.w	r4, sp, #7
 8008d9a:	46a4      	mov	ip, r4
 8008d9c:	270a      	movs	r7, #10
 8008d9e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008da2:	460a      	mov	r2, r1
 8008da4:	46a6      	mov	lr, r4
 8008da6:	fb07 1516 	mls	r5, r7, r6, r1
 8008daa:	2a63      	cmp	r2, #99	; 0x63
 8008dac:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008db0:	4631      	mov	r1, r6
 8008db2:	f104 34ff 	add.w	r4, r4, #4294967295
 8008db6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008dba:	dcf0      	bgt.n	8008d9e <__exponent+0x20>
 8008dbc:	3130      	adds	r1, #48	; 0x30
 8008dbe:	f1ae 0502 	sub.w	r5, lr, #2
 8008dc2:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	1c44      	adds	r4, r0, #1
 8008dca:	4561      	cmp	r1, ip
 8008dcc:	d30a      	bcc.n	8008de4 <__exponent+0x66>
 8008dce:	f10d 0209 	add.w	r2, sp, #9
 8008dd2:	eba2 020e 	sub.w	r2, r2, lr
 8008dd6:	4565      	cmp	r5, ip
 8008dd8:	bf88      	it	hi
 8008dda:	2200      	movhi	r2, #0
 8008ddc:	4413      	add	r3, r2
 8008dde:	1a18      	subs	r0, r3, r0
 8008de0:	b003      	add	sp, #12
 8008de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008de4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008de8:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008dec:	e7ed      	b.n	8008dca <__exponent+0x4c>
 8008dee:	2330      	movs	r3, #48	; 0x30
 8008df0:	3130      	adds	r1, #48	; 0x30
 8008df2:	7083      	strb	r3, [r0, #2]
 8008df4:	70c1      	strb	r1, [r0, #3]
 8008df6:	1d03      	adds	r3, r0, #4
 8008df8:	e7f1      	b.n	8008dde <__exponent+0x60>
	...

08008dfc <_printf_float>:
 8008dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e00:	b091      	sub	sp, #68	; 0x44
 8008e02:	460c      	mov	r4, r1
 8008e04:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008e08:	4616      	mov	r6, r2
 8008e0a:	461f      	mov	r7, r3
 8008e0c:	4605      	mov	r5, r0
 8008e0e:	f002 fe63 	bl	800bad8 <_localeconv_r>
 8008e12:	6803      	ldr	r3, [r0, #0]
 8008e14:	4618      	mov	r0, r3
 8008e16:	9309      	str	r3, [sp, #36]	; 0x24
 8008e18:	f7fd fa28 	bl	800626c <strlen>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	930e      	str	r3, [sp, #56]	; 0x38
 8008e20:	f8d8 3000 	ldr.w	r3, [r8]
 8008e24:	900a      	str	r0, [sp, #40]	; 0x28
 8008e26:	3307      	adds	r3, #7
 8008e28:	f023 0307 	bic.w	r3, r3, #7
 8008e2c:	f103 0208 	add.w	r2, r3, #8
 8008e30:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008e34:	f8d4 b000 	ldr.w	fp, [r4]
 8008e38:	f8c8 2000 	str.w	r2, [r8]
 8008e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e40:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008e44:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008e48:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008e4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e52:	4640      	mov	r0, r8
 8008e54:	4b9c      	ldr	r3, [pc, #624]	; (80090c8 <_printf_float+0x2cc>)
 8008e56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e58:	f7fd fe66 	bl	8006b28 <__aeabi_dcmpun>
 8008e5c:	bb70      	cbnz	r0, 8008ebc <_printf_float+0xc0>
 8008e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e62:	4640      	mov	r0, r8
 8008e64:	4b98      	ldr	r3, [pc, #608]	; (80090c8 <_printf_float+0x2cc>)
 8008e66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e68:	f7fd fe40 	bl	8006aec <__aeabi_dcmple>
 8008e6c:	bb30      	cbnz	r0, 8008ebc <_printf_float+0xc0>
 8008e6e:	2200      	movs	r2, #0
 8008e70:	2300      	movs	r3, #0
 8008e72:	4640      	mov	r0, r8
 8008e74:	4651      	mov	r1, sl
 8008e76:	f7fd fe2f 	bl	8006ad8 <__aeabi_dcmplt>
 8008e7a:	b110      	cbz	r0, 8008e82 <_printf_float+0x86>
 8008e7c:	232d      	movs	r3, #45	; 0x2d
 8008e7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e82:	4b92      	ldr	r3, [pc, #584]	; (80090cc <_printf_float+0x2d0>)
 8008e84:	4892      	ldr	r0, [pc, #584]	; (80090d0 <_printf_float+0x2d4>)
 8008e86:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008e8a:	bf94      	ite	ls
 8008e8c:	4698      	movls	r8, r3
 8008e8e:	4680      	movhi	r8, r0
 8008e90:	2303      	movs	r3, #3
 8008e92:	f04f 0a00 	mov.w	sl, #0
 8008e96:	6123      	str	r3, [r4, #16]
 8008e98:	f02b 0304 	bic.w	r3, fp, #4
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	4633      	mov	r3, r6
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	9700      	str	r7, [sp, #0]
 8008ea6:	aa0f      	add	r2, sp, #60	; 0x3c
 8008ea8:	f000 f9d4 	bl	8009254 <_printf_common>
 8008eac:	3001      	adds	r0, #1
 8008eae:	f040 8090 	bne.w	8008fd2 <_printf_float+0x1d6>
 8008eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb6:	b011      	add	sp, #68	; 0x44
 8008eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ebc:	4642      	mov	r2, r8
 8008ebe:	4653      	mov	r3, sl
 8008ec0:	4640      	mov	r0, r8
 8008ec2:	4651      	mov	r1, sl
 8008ec4:	f7fd fe30 	bl	8006b28 <__aeabi_dcmpun>
 8008ec8:	b148      	cbz	r0, 8008ede <_printf_float+0xe2>
 8008eca:	f1ba 0f00 	cmp.w	sl, #0
 8008ece:	bfb8      	it	lt
 8008ed0:	232d      	movlt	r3, #45	; 0x2d
 8008ed2:	4880      	ldr	r0, [pc, #512]	; (80090d4 <_printf_float+0x2d8>)
 8008ed4:	bfb8      	it	lt
 8008ed6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008eda:	4b7f      	ldr	r3, [pc, #508]	; (80090d8 <_printf_float+0x2dc>)
 8008edc:	e7d3      	b.n	8008e86 <_printf_float+0x8a>
 8008ede:	6863      	ldr	r3, [r4, #4]
 8008ee0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008ee4:	1c5a      	adds	r2, r3, #1
 8008ee6:	d142      	bne.n	8008f6e <_printf_float+0x172>
 8008ee8:	2306      	movs	r3, #6
 8008eea:	6063      	str	r3, [r4, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	9206      	str	r2, [sp, #24]
 8008ef0:	aa0e      	add	r2, sp, #56	; 0x38
 8008ef2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008ef6:	aa0d      	add	r2, sp, #52	; 0x34
 8008ef8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008efc:	9203      	str	r2, [sp, #12]
 8008efe:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008f02:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008f06:	6023      	str	r3, [r4, #0]
 8008f08:	6863      	ldr	r3, [r4, #4]
 8008f0a:	4642      	mov	r2, r8
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	4628      	mov	r0, r5
 8008f10:	4653      	mov	r3, sl
 8008f12:	910b      	str	r1, [sp, #44]	; 0x2c
 8008f14:	f7ff fed4 	bl	8008cc0 <__cvt>
 8008f18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f1a:	4680      	mov	r8, r0
 8008f1c:	2947      	cmp	r1, #71	; 0x47
 8008f1e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008f20:	d108      	bne.n	8008f34 <_printf_float+0x138>
 8008f22:	1cc8      	adds	r0, r1, #3
 8008f24:	db02      	blt.n	8008f2c <_printf_float+0x130>
 8008f26:	6863      	ldr	r3, [r4, #4]
 8008f28:	4299      	cmp	r1, r3
 8008f2a:	dd40      	ble.n	8008fae <_printf_float+0x1b2>
 8008f2c:	f1a9 0902 	sub.w	r9, r9, #2
 8008f30:	fa5f f989 	uxtb.w	r9, r9
 8008f34:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008f38:	d81f      	bhi.n	8008f7a <_printf_float+0x17e>
 8008f3a:	464a      	mov	r2, r9
 8008f3c:	3901      	subs	r1, #1
 8008f3e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f42:	910d      	str	r1, [sp, #52]	; 0x34
 8008f44:	f7ff ff1b 	bl	8008d7e <__exponent>
 8008f48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f4a:	4682      	mov	sl, r0
 8008f4c:	1813      	adds	r3, r2, r0
 8008f4e:	2a01      	cmp	r2, #1
 8008f50:	6123      	str	r3, [r4, #16]
 8008f52:	dc02      	bgt.n	8008f5a <_printf_float+0x15e>
 8008f54:	6822      	ldr	r2, [r4, #0]
 8008f56:	07d2      	lsls	r2, r2, #31
 8008f58:	d501      	bpl.n	8008f5e <_printf_float+0x162>
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	6123      	str	r3, [r4, #16]
 8008f5e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d09b      	beq.n	8008e9e <_printf_float+0xa2>
 8008f66:	232d      	movs	r3, #45	; 0x2d
 8008f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f6c:	e797      	b.n	8008e9e <_printf_float+0xa2>
 8008f6e:	2947      	cmp	r1, #71	; 0x47
 8008f70:	d1bc      	bne.n	8008eec <_printf_float+0xf0>
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1ba      	bne.n	8008eec <_printf_float+0xf0>
 8008f76:	2301      	movs	r3, #1
 8008f78:	e7b7      	b.n	8008eea <_printf_float+0xee>
 8008f7a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008f7e:	d118      	bne.n	8008fb2 <_printf_float+0x1b6>
 8008f80:	2900      	cmp	r1, #0
 8008f82:	6863      	ldr	r3, [r4, #4]
 8008f84:	dd0b      	ble.n	8008f9e <_printf_float+0x1a2>
 8008f86:	6121      	str	r1, [r4, #16]
 8008f88:	b913      	cbnz	r3, 8008f90 <_printf_float+0x194>
 8008f8a:	6822      	ldr	r2, [r4, #0]
 8008f8c:	07d0      	lsls	r0, r2, #31
 8008f8e:	d502      	bpl.n	8008f96 <_printf_float+0x19a>
 8008f90:	3301      	adds	r3, #1
 8008f92:	440b      	add	r3, r1
 8008f94:	6123      	str	r3, [r4, #16]
 8008f96:	f04f 0a00 	mov.w	sl, #0
 8008f9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8008f9c:	e7df      	b.n	8008f5e <_printf_float+0x162>
 8008f9e:	b913      	cbnz	r3, 8008fa6 <_printf_float+0x1aa>
 8008fa0:	6822      	ldr	r2, [r4, #0]
 8008fa2:	07d2      	lsls	r2, r2, #31
 8008fa4:	d501      	bpl.n	8008faa <_printf_float+0x1ae>
 8008fa6:	3302      	adds	r3, #2
 8008fa8:	e7f4      	b.n	8008f94 <_printf_float+0x198>
 8008faa:	2301      	movs	r3, #1
 8008fac:	e7f2      	b.n	8008f94 <_printf_float+0x198>
 8008fae:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fb4:	4299      	cmp	r1, r3
 8008fb6:	db05      	blt.n	8008fc4 <_printf_float+0x1c8>
 8008fb8:	6823      	ldr	r3, [r4, #0]
 8008fba:	6121      	str	r1, [r4, #16]
 8008fbc:	07d8      	lsls	r0, r3, #31
 8008fbe:	d5ea      	bpl.n	8008f96 <_printf_float+0x19a>
 8008fc0:	1c4b      	adds	r3, r1, #1
 8008fc2:	e7e7      	b.n	8008f94 <_printf_float+0x198>
 8008fc4:	2900      	cmp	r1, #0
 8008fc6:	bfcc      	ite	gt
 8008fc8:	2201      	movgt	r2, #1
 8008fca:	f1c1 0202 	rsble	r2, r1, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	e7e0      	b.n	8008f94 <_printf_float+0x198>
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	055a      	lsls	r2, r3, #21
 8008fd6:	d407      	bmi.n	8008fe8 <_printf_float+0x1ec>
 8008fd8:	6923      	ldr	r3, [r4, #16]
 8008fda:	4642      	mov	r2, r8
 8008fdc:	4631      	mov	r1, r6
 8008fde:	4628      	mov	r0, r5
 8008fe0:	47b8      	blx	r7
 8008fe2:	3001      	adds	r0, #1
 8008fe4:	d12b      	bne.n	800903e <_printf_float+0x242>
 8008fe6:	e764      	b.n	8008eb2 <_printf_float+0xb6>
 8008fe8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008fec:	f240 80dd 	bls.w	80091aa <_printf_float+0x3ae>
 8008ff0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	f7fd fd64 	bl	8006ac4 <__aeabi_dcmpeq>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d033      	beq.n	8009068 <_printf_float+0x26c>
 8009000:	2301      	movs	r3, #1
 8009002:	4631      	mov	r1, r6
 8009004:	4628      	mov	r0, r5
 8009006:	4a35      	ldr	r2, [pc, #212]	; (80090dc <_printf_float+0x2e0>)
 8009008:	47b8      	blx	r7
 800900a:	3001      	adds	r0, #1
 800900c:	f43f af51 	beq.w	8008eb2 <_printf_float+0xb6>
 8009010:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009014:	429a      	cmp	r2, r3
 8009016:	db02      	blt.n	800901e <_printf_float+0x222>
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	07d8      	lsls	r0, r3, #31
 800901c:	d50f      	bpl.n	800903e <_printf_float+0x242>
 800901e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009022:	4631      	mov	r1, r6
 8009024:	4628      	mov	r0, r5
 8009026:	47b8      	blx	r7
 8009028:	3001      	adds	r0, #1
 800902a:	f43f af42 	beq.w	8008eb2 <_printf_float+0xb6>
 800902e:	f04f 0800 	mov.w	r8, #0
 8009032:	f104 091a 	add.w	r9, r4, #26
 8009036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009038:	3b01      	subs	r3, #1
 800903a:	4543      	cmp	r3, r8
 800903c:	dc09      	bgt.n	8009052 <_printf_float+0x256>
 800903e:	6823      	ldr	r3, [r4, #0]
 8009040:	079b      	lsls	r3, r3, #30
 8009042:	f100 8102 	bmi.w	800924a <_printf_float+0x44e>
 8009046:	68e0      	ldr	r0, [r4, #12]
 8009048:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800904a:	4298      	cmp	r0, r3
 800904c:	bfb8      	it	lt
 800904e:	4618      	movlt	r0, r3
 8009050:	e731      	b.n	8008eb6 <_printf_float+0xba>
 8009052:	2301      	movs	r3, #1
 8009054:	464a      	mov	r2, r9
 8009056:	4631      	mov	r1, r6
 8009058:	4628      	mov	r0, r5
 800905a:	47b8      	blx	r7
 800905c:	3001      	adds	r0, #1
 800905e:	f43f af28 	beq.w	8008eb2 <_printf_float+0xb6>
 8009062:	f108 0801 	add.w	r8, r8, #1
 8009066:	e7e6      	b.n	8009036 <_printf_float+0x23a>
 8009068:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800906a:	2b00      	cmp	r3, #0
 800906c:	dc38      	bgt.n	80090e0 <_printf_float+0x2e4>
 800906e:	2301      	movs	r3, #1
 8009070:	4631      	mov	r1, r6
 8009072:	4628      	mov	r0, r5
 8009074:	4a19      	ldr	r2, [pc, #100]	; (80090dc <_printf_float+0x2e0>)
 8009076:	47b8      	blx	r7
 8009078:	3001      	adds	r0, #1
 800907a:	f43f af1a 	beq.w	8008eb2 <_printf_float+0xb6>
 800907e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009082:	4313      	orrs	r3, r2
 8009084:	d102      	bne.n	800908c <_printf_float+0x290>
 8009086:	6823      	ldr	r3, [r4, #0]
 8009088:	07d9      	lsls	r1, r3, #31
 800908a:	d5d8      	bpl.n	800903e <_printf_float+0x242>
 800908c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009090:	4631      	mov	r1, r6
 8009092:	4628      	mov	r0, r5
 8009094:	47b8      	blx	r7
 8009096:	3001      	adds	r0, #1
 8009098:	f43f af0b 	beq.w	8008eb2 <_printf_float+0xb6>
 800909c:	f04f 0900 	mov.w	r9, #0
 80090a0:	f104 0a1a 	add.w	sl, r4, #26
 80090a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090a6:	425b      	negs	r3, r3
 80090a8:	454b      	cmp	r3, r9
 80090aa:	dc01      	bgt.n	80090b0 <_printf_float+0x2b4>
 80090ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090ae:	e794      	b.n	8008fda <_printf_float+0x1de>
 80090b0:	2301      	movs	r3, #1
 80090b2:	4652      	mov	r2, sl
 80090b4:	4631      	mov	r1, r6
 80090b6:	4628      	mov	r0, r5
 80090b8:	47b8      	blx	r7
 80090ba:	3001      	adds	r0, #1
 80090bc:	f43f aef9 	beq.w	8008eb2 <_printf_float+0xb6>
 80090c0:	f109 0901 	add.w	r9, r9, #1
 80090c4:	e7ee      	b.n	80090a4 <_printf_float+0x2a8>
 80090c6:	bf00      	nop
 80090c8:	7fefffff 	.word	0x7fefffff
 80090cc:	0801e040 	.word	0x0801e040
 80090d0:	0801e044 	.word	0x0801e044
 80090d4:	0801e04c 	.word	0x0801e04c
 80090d8:	0801e048 	.word	0x0801e048
 80090dc:	0801e050 	.word	0x0801e050
 80090e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090e4:	429a      	cmp	r2, r3
 80090e6:	bfa8      	it	ge
 80090e8:	461a      	movge	r2, r3
 80090ea:	2a00      	cmp	r2, #0
 80090ec:	4691      	mov	r9, r2
 80090ee:	dc37      	bgt.n	8009160 <_printf_float+0x364>
 80090f0:	f04f 0b00 	mov.w	fp, #0
 80090f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090f8:	f104 021a 	add.w	r2, r4, #26
 80090fc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009100:	ebaa 0309 	sub.w	r3, sl, r9
 8009104:	455b      	cmp	r3, fp
 8009106:	dc33      	bgt.n	8009170 <_printf_float+0x374>
 8009108:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800910c:	429a      	cmp	r2, r3
 800910e:	db3b      	blt.n	8009188 <_printf_float+0x38c>
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	07da      	lsls	r2, r3, #31
 8009114:	d438      	bmi.n	8009188 <_printf_float+0x38c>
 8009116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009118:	990d      	ldr	r1, [sp, #52]	; 0x34
 800911a:	eba3 020a 	sub.w	r2, r3, sl
 800911e:	eba3 0901 	sub.w	r9, r3, r1
 8009122:	4591      	cmp	r9, r2
 8009124:	bfa8      	it	ge
 8009126:	4691      	movge	r9, r2
 8009128:	f1b9 0f00 	cmp.w	r9, #0
 800912c:	dc34      	bgt.n	8009198 <_printf_float+0x39c>
 800912e:	f04f 0800 	mov.w	r8, #0
 8009132:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009136:	f104 0a1a 	add.w	sl, r4, #26
 800913a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800913e:	1a9b      	subs	r3, r3, r2
 8009140:	eba3 0309 	sub.w	r3, r3, r9
 8009144:	4543      	cmp	r3, r8
 8009146:	f77f af7a 	ble.w	800903e <_printf_float+0x242>
 800914a:	2301      	movs	r3, #1
 800914c:	4652      	mov	r2, sl
 800914e:	4631      	mov	r1, r6
 8009150:	4628      	mov	r0, r5
 8009152:	47b8      	blx	r7
 8009154:	3001      	adds	r0, #1
 8009156:	f43f aeac 	beq.w	8008eb2 <_printf_float+0xb6>
 800915a:	f108 0801 	add.w	r8, r8, #1
 800915e:	e7ec      	b.n	800913a <_printf_float+0x33e>
 8009160:	4613      	mov	r3, r2
 8009162:	4631      	mov	r1, r6
 8009164:	4642      	mov	r2, r8
 8009166:	4628      	mov	r0, r5
 8009168:	47b8      	blx	r7
 800916a:	3001      	adds	r0, #1
 800916c:	d1c0      	bne.n	80090f0 <_printf_float+0x2f4>
 800916e:	e6a0      	b.n	8008eb2 <_printf_float+0xb6>
 8009170:	2301      	movs	r3, #1
 8009172:	4631      	mov	r1, r6
 8009174:	4628      	mov	r0, r5
 8009176:	920b      	str	r2, [sp, #44]	; 0x2c
 8009178:	47b8      	blx	r7
 800917a:	3001      	adds	r0, #1
 800917c:	f43f ae99 	beq.w	8008eb2 <_printf_float+0xb6>
 8009180:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009182:	f10b 0b01 	add.w	fp, fp, #1
 8009186:	e7b9      	b.n	80090fc <_printf_float+0x300>
 8009188:	4631      	mov	r1, r6
 800918a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800918e:	4628      	mov	r0, r5
 8009190:	47b8      	blx	r7
 8009192:	3001      	adds	r0, #1
 8009194:	d1bf      	bne.n	8009116 <_printf_float+0x31a>
 8009196:	e68c      	b.n	8008eb2 <_printf_float+0xb6>
 8009198:	464b      	mov	r3, r9
 800919a:	4631      	mov	r1, r6
 800919c:	4628      	mov	r0, r5
 800919e:	eb08 020a 	add.w	r2, r8, sl
 80091a2:	47b8      	blx	r7
 80091a4:	3001      	adds	r0, #1
 80091a6:	d1c2      	bne.n	800912e <_printf_float+0x332>
 80091a8:	e683      	b.n	8008eb2 <_printf_float+0xb6>
 80091aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091ac:	2a01      	cmp	r2, #1
 80091ae:	dc01      	bgt.n	80091b4 <_printf_float+0x3b8>
 80091b0:	07db      	lsls	r3, r3, #31
 80091b2:	d537      	bpl.n	8009224 <_printf_float+0x428>
 80091b4:	2301      	movs	r3, #1
 80091b6:	4642      	mov	r2, r8
 80091b8:	4631      	mov	r1, r6
 80091ba:	4628      	mov	r0, r5
 80091bc:	47b8      	blx	r7
 80091be:	3001      	adds	r0, #1
 80091c0:	f43f ae77 	beq.w	8008eb2 <_printf_float+0xb6>
 80091c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091c8:	4631      	mov	r1, r6
 80091ca:	4628      	mov	r0, r5
 80091cc:	47b8      	blx	r7
 80091ce:	3001      	adds	r0, #1
 80091d0:	f43f ae6f 	beq.w	8008eb2 <_printf_float+0xb6>
 80091d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80091d8:	2200      	movs	r2, #0
 80091da:	2300      	movs	r3, #0
 80091dc:	f7fd fc72 	bl	8006ac4 <__aeabi_dcmpeq>
 80091e0:	b9d8      	cbnz	r0, 800921a <_printf_float+0x41e>
 80091e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091e4:	f108 0201 	add.w	r2, r8, #1
 80091e8:	3b01      	subs	r3, #1
 80091ea:	4631      	mov	r1, r6
 80091ec:	4628      	mov	r0, r5
 80091ee:	47b8      	blx	r7
 80091f0:	3001      	adds	r0, #1
 80091f2:	d10e      	bne.n	8009212 <_printf_float+0x416>
 80091f4:	e65d      	b.n	8008eb2 <_printf_float+0xb6>
 80091f6:	2301      	movs	r3, #1
 80091f8:	464a      	mov	r2, r9
 80091fa:	4631      	mov	r1, r6
 80091fc:	4628      	mov	r0, r5
 80091fe:	47b8      	blx	r7
 8009200:	3001      	adds	r0, #1
 8009202:	f43f ae56 	beq.w	8008eb2 <_printf_float+0xb6>
 8009206:	f108 0801 	add.w	r8, r8, #1
 800920a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800920c:	3b01      	subs	r3, #1
 800920e:	4543      	cmp	r3, r8
 8009210:	dcf1      	bgt.n	80091f6 <_printf_float+0x3fa>
 8009212:	4653      	mov	r3, sl
 8009214:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009218:	e6e0      	b.n	8008fdc <_printf_float+0x1e0>
 800921a:	f04f 0800 	mov.w	r8, #0
 800921e:	f104 091a 	add.w	r9, r4, #26
 8009222:	e7f2      	b.n	800920a <_printf_float+0x40e>
 8009224:	2301      	movs	r3, #1
 8009226:	4642      	mov	r2, r8
 8009228:	e7df      	b.n	80091ea <_printf_float+0x3ee>
 800922a:	2301      	movs	r3, #1
 800922c:	464a      	mov	r2, r9
 800922e:	4631      	mov	r1, r6
 8009230:	4628      	mov	r0, r5
 8009232:	47b8      	blx	r7
 8009234:	3001      	adds	r0, #1
 8009236:	f43f ae3c 	beq.w	8008eb2 <_printf_float+0xb6>
 800923a:	f108 0801 	add.w	r8, r8, #1
 800923e:	68e3      	ldr	r3, [r4, #12]
 8009240:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009242:	1a5b      	subs	r3, r3, r1
 8009244:	4543      	cmp	r3, r8
 8009246:	dcf0      	bgt.n	800922a <_printf_float+0x42e>
 8009248:	e6fd      	b.n	8009046 <_printf_float+0x24a>
 800924a:	f04f 0800 	mov.w	r8, #0
 800924e:	f104 0919 	add.w	r9, r4, #25
 8009252:	e7f4      	b.n	800923e <_printf_float+0x442>

08009254 <_printf_common>:
 8009254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009258:	4616      	mov	r6, r2
 800925a:	4699      	mov	r9, r3
 800925c:	688a      	ldr	r2, [r1, #8]
 800925e:	690b      	ldr	r3, [r1, #16]
 8009260:	4607      	mov	r7, r0
 8009262:	4293      	cmp	r3, r2
 8009264:	bfb8      	it	lt
 8009266:	4613      	movlt	r3, r2
 8009268:	6033      	str	r3, [r6, #0]
 800926a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800926e:	460c      	mov	r4, r1
 8009270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009274:	b10a      	cbz	r2, 800927a <_printf_common+0x26>
 8009276:	3301      	adds	r3, #1
 8009278:	6033      	str	r3, [r6, #0]
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	0699      	lsls	r1, r3, #26
 800927e:	bf42      	ittt	mi
 8009280:	6833      	ldrmi	r3, [r6, #0]
 8009282:	3302      	addmi	r3, #2
 8009284:	6033      	strmi	r3, [r6, #0]
 8009286:	6825      	ldr	r5, [r4, #0]
 8009288:	f015 0506 	ands.w	r5, r5, #6
 800928c:	d106      	bne.n	800929c <_printf_common+0x48>
 800928e:	f104 0a19 	add.w	sl, r4, #25
 8009292:	68e3      	ldr	r3, [r4, #12]
 8009294:	6832      	ldr	r2, [r6, #0]
 8009296:	1a9b      	subs	r3, r3, r2
 8009298:	42ab      	cmp	r3, r5
 800929a:	dc28      	bgt.n	80092ee <_printf_common+0x9a>
 800929c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092a0:	1e13      	subs	r3, r2, #0
 80092a2:	6822      	ldr	r2, [r4, #0]
 80092a4:	bf18      	it	ne
 80092a6:	2301      	movne	r3, #1
 80092a8:	0692      	lsls	r2, r2, #26
 80092aa:	d42d      	bmi.n	8009308 <_printf_common+0xb4>
 80092ac:	4649      	mov	r1, r9
 80092ae:	4638      	mov	r0, r7
 80092b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092b4:	47c0      	blx	r8
 80092b6:	3001      	adds	r0, #1
 80092b8:	d020      	beq.n	80092fc <_printf_common+0xa8>
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	68e5      	ldr	r5, [r4, #12]
 80092be:	f003 0306 	and.w	r3, r3, #6
 80092c2:	2b04      	cmp	r3, #4
 80092c4:	bf18      	it	ne
 80092c6:	2500      	movne	r5, #0
 80092c8:	6832      	ldr	r2, [r6, #0]
 80092ca:	f04f 0600 	mov.w	r6, #0
 80092ce:	68a3      	ldr	r3, [r4, #8]
 80092d0:	bf08      	it	eq
 80092d2:	1aad      	subeq	r5, r5, r2
 80092d4:	6922      	ldr	r2, [r4, #16]
 80092d6:	bf08      	it	eq
 80092d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092dc:	4293      	cmp	r3, r2
 80092de:	bfc4      	itt	gt
 80092e0:	1a9b      	subgt	r3, r3, r2
 80092e2:	18ed      	addgt	r5, r5, r3
 80092e4:	341a      	adds	r4, #26
 80092e6:	42b5      	cmp	r5, r6
 80092e8:	d11a      	bne.n	8009320 <_printf_common+0xcc>
 80092ea:	2000      	movs	r0, #0
 80092ec:	e008      	b.n	8009300 <_printf_common+0xac>
 80092ee:	2301      	movs	r3, #1
 80092f0:	4652      	mov	r2, sl
 80092f2:	4649      	mov	r1, r9
 80092f4:	4638      	mov	r0, r7
 80092f6:	47c0      	blx	r8
 80092f8:	3001      	adds	r0, #1
 80092fa:	d103      	bne.n	8009304 <_printf_common+0xb0>
 80092fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009304:	3501      	adds	r5, #1
 8009306:	e7c4      	b.n	8009292 <_printf_common+0x3e>
 8009308:	2030      	movs	r0, #48	; 0x30
 800930a:	18e1      	adds	r1, r4, r3
 800930c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009310:	1c5a      	adds	r2, r3, #1
 8009312:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009316:	4422      	add	r2, r4
 8009318:	3302      	adds	r3, #2
 800931a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800931e:	e7c5      	b.n	80092ac <_printf_common+0x58>
 8009320:	2301      	movs	r3, #1
 8009322:	4622      	mov	r2, r4
 8009324:	4649      	mov	r1, r9
 8009326:	4638      	mov	r0, r7
 8009328:	47c0      	blx	r8
 800932a:	3001      	adds	r0, #1
 800932c:	d0e6      	beq.n	80092fc <_printf_common+0xa8>
 800932e:	3601      	adds	r6, #1
 8009330:	e7d9      	b.n	80092e6 <_printf_common+0x92>
	...

08009334 <_printf_i>:
 8009334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009338:	7e0f      	ldrb	r7, [r1, #24]
 800933a:	4691      	mov	r9, r2
 800933c:	2f78      	cmp	r7, #120	; 0x78
 800933e:	4680      	mov	r8, r0
 8009340:	460c      	mov	r4, r1
 8009342:	469a      	mov	sl, r3
 8009344:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009346:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800934a:	d807      	bhi.n	800935c <_printf_i+0x28>
 800934c:	2f62      	cmp	r7, #98	; 0x62
 800934e:	d80a      	bhi.n	8009366 <_printf_i+0x32>
 8009350:	2f00      	cmp	r7, #0
 8009352:	f000 80d9 	beq.w	8009508 <_printf_i+0x1d4>
 8009356:	2f58      	cmp	r7, #88	; 0x58
 8009358:	f000 80a4 	beq.w	80094a4 <_printf_i+0x170>
 800935c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009360:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009364:	e03a      	b.n	80093dc <_printf_i+0xa8>
 8009366:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800936a:	2b15      	cmp	r3, #21
 800936c:	d8f6      	bhi.n	800935c <_printf_i+0x28>
 800936e:	a101      	add	r1, pc, #4	; (adr r1, 8009374 <_printf_i+0x40>)
 8009370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009374:	080093cd 	.word	0x080093cd
 8009378:	080093e1 	.word	0x080093e1
 800937c:	0800935d 	.word	0x0800935d
 8009380:	0800935d 	.word	0x0800935d
 8009384:	0800935d 	.word	0x0800935d
 8009388:	0800935d 	.word	0x0800935d
 800938c:	080093e1 	.word	0x080093e1
 8009390:	0800935d 	.word	0x0800935d
 8009394:	0800935d 	.word	0x0800935d
 8009398:	0800935d 	.word	0x0800935d
 800939c:	0800935d 	.word	0x0800935d
 80093a0:	080094ef 	.word	0x080094ef
 80093a4:	08009411 	.word	0x08009411
 80093a8:	080094d1 	.word	0x080094d1
 80093ac:	0800935d 	.word	0x0800935d
 80093b0:	0800935d 	.word	0x0800935d
 80093b4:	08009511 	.word	0x08009511
 80093b8:	0800935d 	.word	0x0800935d
 80093bc:	08009411 	.word	0x08009411
 80093c0:	0800935d 	.word	0x0800935d
 80093c4:	0800935d 	.word	0x0800935d
 80093c8:	080094d9 	.word	0x080094d9
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	1d1a      	adds	r2, r3, #4
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	602a      	str	r2, [r5, #0]
 80093d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093dc:	2301      	movs	r3, #1
 80093de:	e0a4      	b.n	800952a <_printf_i+0x1f6>
 80093e0:	6820      	ldr	r0, [r4, #0]
 80093e2:	6829      	ldr	r1, [r5, #0]
 80093e4:	0606      	lsls	r6, r0, #24
 80093e6:	f101 0304 	add.w	r3, r1, #4
 80093ea:	d50a      	bpl.n	8009402 <_printf_i+0xce>
 80093ec:	680e      	ldr	r6, [r1, #0]
 80093ee:	602b      	str	r3, [r5, #0]
 80093f0:	2e00      	cmp	r6, #0
 80093f2:	da03      	bge.n	80093fc <_printf_i+0xc8>
 80093f4:	232d      	movs	r3, #45	; 0x2d
 80093f6:	4276      	negs	r6, r6
 80093f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093fc:	230a      	movs	r3, #10
 80093fe:	485e      	ldr	r0, [pc, #376]	; (8009578 <_printf_i+0x244>)
 8009400:	e019      	b.n	8009436 <_printf_i+0x102>
 8009402:	680e      	ldr	r6, [r1, #0]
 8009404:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009408:	602b      	str	r3, [r5, #0]
 800940a:	bf18      	it	ne
 800940c:	b236      	sxthne	r6, r6
 800940e:	e7ef      	b.n	80093f0 <_printf_i+0xbc>
 8009410:	682b      	ldr	r3, [r5, #0]
 8009412:	6820      	ldr	r0, [r4, #0]
 8009414:	1d19      	adds	r1, r3, #4
 8009416:	6029      	str	r1, [r5, #0]
 8009418:	0601      	lsls	r1, r0, #24
 800941a:	d501      	bpl.n	8009420 <_printf_i+0xec>
 800941c:	681e      	ldr	r6, [r3, #0]
 800941e:	e002      	b.n	8009426 <_printf_i+0xf2>
 8009420:	0646      	lsls	r6, r0, #25
 8009422:	d5fb      	bpl.n	800941c <_printf_i+0xe8>
 8009424:	881e      	ldrh	r6, [r3, #0]
 8009426:	2f6f      	cmp	r7, #111	; 0x6f
 8009428:	bf0c      	ite	eq
 800942a:	2308      	moveq	r3, #8
 800942c:	230a      	movne	r3, #10
 800942e:	4852      	ldr	r0, [pc, #328]	; (8009578 <_printf_i+0x244>)
 8009430:	2100      	movs	r1, #0
 8009432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009436:	6865      	ldr	r5, [r4, #4]
 8009438:	2d00      	cmp	r5, #0
 800943a:	bfa8      	it	ge
 800943c:	6821      	ldrge	r1, [r4, #0]
 800943e:	60a5      	str	r5, [r4, #8]
 8009440:	bfa4      	itt	ge
 8009442:	f021 0104 	bicge.w	r1, r1, #4
 8009446:	6021      	strge	r1, [r4, #0]
 8009448:	b90e      	cbnz	r6, 800944e <_printf_i+0x11a>
 800944a:	2d00      	cmp	r5, #0
 800944c:	d04d      	beq.n	80094ea <_printf_i+0x1b6>
 800944e:	4615      	mov	r5, r2
 8009450:	fbb6 f1f3 	udiv	r1, r6, r3
 8009454:	fb03 6711 	mls	r7, r3, r1, r6
 8009458:	5dc7      	ldrb	r7, [r0, r7]
 800945a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800945e:	4637      	mov	r7, r6
 8009460:	42bb      	cmp	r3, r7
 8009462:	460e      	mov	r6, r1
 8009464:	d9f4      	bls.n	8009450 <_printf_i+0x11c>
 8009466:	2b08      	cmp	r3, #8
 8009468:	d10b      	bne.n	8009482 <_printf_i+0x14e>
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	07de      	lsls	r6, r3, #31
 800946e:	d508      	bpl.n	8009482 <_printf_i+0x14e>
 8009470:	6923      	ldr	r3, [r4, #16]
 8009472:	6861      	ldr	r1, [r4, #4]
 8009474:	4299      	cmp	r1, r3
 8009476:	bfde      	ittt	le
 8009478:	2330      	movle	r3, #48	; 0x30
 800947a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800947e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009482:	1b52      	subs	r2, r2, r5
 8009484:	6122      	str	r2, [r4, #16]
 8009486:	464b      	mov	r3, r9
 8009488:	4621      	mov	r1, r4
 800948a:	4640      	mov	r0, r8
 800948c:	f8cd a000 	str.w	sl, [sp]
 8009490:	aa03      	add	r2, sp, #12
 8009492:	f7ff fedf 	bl	8009254 <_printf_common>
 8009496:	3001      	adds	r0, #1
 8009498:	d14c      	bne.n	8009534 <_printf_i+0x200>
 800949a:	f04f 30ff 	mov.w	r0, #4294967295
 800949e:	b004      	add	sp, #16
 80094a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094a4:	4834      	ldr	r0, [pc, #208]	; (8009578 <_printf_i+0x244>)
 80094a6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80094aa:	6829      	ldr	r1, [r5, #0]
 80094ac:	6823      	ldr	r3, [r4, #0]
 80094ae:	f851 6b04 	ldr.w	r6, [r1], #4
 80094b2:	6029      	str	r1, [r5, #0]
 80094b4:	061d      	lsls	r5, r3, #24
 80094b6:	d514      	bpl.n	80094e2 <_printf_i+0x1ae>
 80094b8:	07df      	lsls	r7, r3, #31
 80094ba:	bf44      	itt	mi
 80094bc:	f043 0320 	orrmi.w	r3, r3, #32
 80094c0:	6023      	strmi	r3, [r4, #0]
 80094c2:	b91e      	cbnz	r6, 80094cc <_printf_i+0x198>
 80094c4:	6823      	ldr	r3, [r4, #0]
 80094c6:	f023 0320 	bic.w	r3, r3, #32
 80094ca:	6023      	str	r3, [r4, #0]
 80094cc:	2310      	movs	r3, #16
 80094ce:	e7af      	b.n	8009430 <_printf_i+0xfc>
 80094d0:	6823      	ldr	r3, [r4, #0]
 80094d2:	f043 0320 	orr.w	r3, r3, #32
 80094d6:	6023      	str	r3, [r4, #0]
 80094d8:	2378      	movs	r3, #120	; 0x78
 80094da:	4828      	ldr	r0, [pc, #160]	; (800957c <_printf_i+0x248>)
 80094dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094e0:	e7e3      	b.n	80094aa <_printf_i+0x176>
 80094e2:	0659      	lsls	r1, r3, #25
 80094e4:	bf48      	it	mi
 80094e6:	b2b6      	uxthmi	r6, r6
 80094e8:	e7e6      	b.n	80094b8 <_printf_i+0x184>
 80094ea:	4615      	mov	r5, r2
 80094ec:	e7bb      	b.n	8009466 <_printf_i+0x132>
 80094ee:	682b      	ldr	r3, [r5, #0]
 80094f0:	6826      	ldr	r6, [r4, #0]
 80094f2:	1d18      	adds	r0, r3, #4
 80094f4:	6961      	ldr	r1, [r4, #20]
 80094f6:	6028      	str	r0, [r5, #0]
 80094f8:	0635      	lsls	r5, r6, #24
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	d501      	bpl.n	8009502 <_printf_i+0x1ce>
 80094fe:	6019      	str	r1, [r3, #0]
 8009500:	e002      	b.n	8009508 <_printf_i+0x1d4>
 8009502:	0670      	lsls	r0, r6, #25
 8009504:	d5fb      	bpl.n	80094fe <_printf_i+0x1ca>
 8009506:	8019      	strh	r1, [r3, #0]
 8009508:	2300      	movs	r3, #0
 800950a:	4615      	mov	r5, r2
 800950c:	6123      	str	r3, [r4, #16]
 800950e:	e7ba      	b.n	8009486 <_printf_i+0x152>
 8009510:	682b      	ldr	r3, [r5, #0]
 8009512:	2100      	movs	r1, #0
 8009514:	1d1a      	adds	r2, r3, #4
 8009516:	602a      	str	r2, [r5, #0]
 8009518:	681d      	ldr	r5, [r3, #0]
 800951a:	6862      	ldr	r2, [r4, #4]
 800951c:	4628      	mov	r0, r5
 800951e:	f002 faf9 	bl	800bb14 <memchr>
 8009522:	b108      	cbz	r0, 8009528 <_printf_i+0x1f4>
 8009524:	1b40      	subs	r0, r0, r5
 8009526:	6060      	str	r0, [r4, #4]
 8009528:	6863      	ldr	r3, [r4, #4]
 800952a:	6123      	str	r3, [r4, #16]
 800952c:	2300      	movs	r3, #0
 800952e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009532:	e7a8      	b.n	8009486 <_printf_i+0x152>
 8009534:	462a      	mov	r2, r5
 8009536:	4649      	mov	r1, r9
 8009538:	4640      	mov	r0, r8
 800953a:	6923      	ldr	r3, [r4, #16]
 800953c:	47d0      	blx	sl
 800953e:	3001      	adds	r0, #1
 8009540:	d0ab      	beq.n	800949a <_printf_i+0x166>
 8009542:	6823      	ldr	r3, [r4, #0]
 8009544:	079b      	lsls	r3, r3, #30
 8009546:	d413      	bmi.n	8009570 <_printf_i+0x23c>
 8009548:	68e0      	ldr	r0, [r4, #12]
 800954a:	9b03      	ldr	r3, [sp, #12]
 800954c:	4298      	cmp	r0, r3
 800954e:	bfb8      	it	lt
 8009550:	4618      	movlt	r0, r3
 8009552:	e7a4      	b.n	800949e <_printf_i+0x16a>
 8009554:	2301      	movs	r3, #1
 8009556:	4632      	mov	r2, r6
 8009558:	4649      	mov	r1, r9
 800955a:	4640      	mov	r0, r8
 800955c:	47d0      	blx	sl
 800955e:	3001      	adds	r0, #1
 8009560:	d09b      	beq.n	800949a <_printf_i+0x166>
 8009562:	3501      	adds	r5, #1
 8009564:	68e3      	ldr	r3, [r4, #12]
 8009566:	9903      	ldr	r1, [sp, #12]
 8009568:	1a5b      	subs	r3, r3, r1
 800956a:	42ab      	cmp	r3, r5
 800956c:	dcf2      	bgt.n	8009554 <_printf_i+0x220>
 800956e:	e7eb      	b.n	8009548 <_printf_i+0x214>
 8009570:	2500      	movs	r5, #0
 8009572:	f104 0619 	add.w	r6, r4, #25
 8009576:	e7f5      	b.n	8009564 <_printf_i+0x230>
 8009578:	0801e052 	.word	0x0801e052
 800957c:	0801e063 	.word	0x0801e063

08009580 <_scanf_float>:
 8009580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009584:	b087      	sub	sp, #28
 8009586:	9303      	str	r3, [sp, #12]
 8009588:	688b      	ldr	r3, [r1, #8]
 800958a:	4617      	mov	r7, r2
 800958c:	1e5a      	subs	r2, r3, #1
 800958e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009592:	bf85      	ittet	hi
 8009594:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009598:	195b      	addhi	r3, r3, r5
 800959a:	2300      	movls	r3, #0
 800959c:	9302      	strhi	r3, [sp, #8]
 800959e:	bf88      	it	hi
 80095a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80095a4:	468b      	mov	fp, r1
 80095a6:	f04f 0500 	mov.w	r5, #0
 80095aa:	bf8c      	ite	hi
 80095ac:	608b      	strhi	r3, [r1, #8]
 80095ae:	9302      	strls	r3, [sp, #8]
 80095b0:	680b      	ldr	r3, [r1, #0]
 80095b2:	4680      	mov	r8, r0
 80095b4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80095b8:	f84b 3b1c 	str.w	r3, [fp], #28
 80095bc:	460c      	mov	r4, r1
 80095be:	465e      	mov	r6, fp
 80095c0:	46aa      	mov	sl, r5
 80095c2:	46a9      	mov	r9, r5
 80095c4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80095c8:	9501      	str	r5, [sp, #4]
 80095ca:	68a2      	ldr	r2, [r4, #8]
 80095cc:	b152      	cbz	r2, 80095e4 <_scanf_float+0x64>
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	2b4e      	cmp	r3, #78	; 0x4e
 80095d4:	d864      	bhi.n	80096a0 <_scanf_float+0x120>
 80095d6:	2b40      	cmp	r3, #64	; 0x40
 80095d8:	d83c      	bhi.n	8009654 <_scanf_float+0xd4>
 80095da:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80095de:	b2c8      	uxtb	r0, r1
 80095e0:	280e      	cmp	r0, #14
 80095e2:	d93a      	bls.n	800965a <_scanf_float+0xda>
 80095e4:	f1b9 0f00 	cmp.w	r9, #0
 80095e8:	d003      	beq.n	80095f2 <_scanf_float+0x72>
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095f0:	6023      	str	r3, [r4, #0]
 80095f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095f6:	f1ba 0f01 	cmp.w	sl, #1
 80095fa:	f200 8113 	bhi.w	8009824 <_scanf_float+0x2a4>
 80095fe:	455e      	cmp	r6, fp
 8009600:	f200 8105 	bhi.w	800980e <_scanf_float+0x28e>
 8009604:	2501      	movs	r5, #1
 8009606:	4628      	mov	r0, r5
 8009608:	b007      	add	sp, #28
 800960a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800960e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009612:	2a0d      	cmp	r2, #13
 8009614:	d8e6      	bhi.n	80095e4 <_scanf_float+0x64>
 8009616:	a101      	add	r1, pc, #4	; (adr r1, 800961c <_scanf_float+0x9c>)
 8009618:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800961c:	0800975b 	.word	0x0800975b
 8009620:	080095e5 	.word	0x080095e5
 8009624:	080095e5 	.word	0x080095e5
 8009628:	080095e5 	.word	0x080095e5
 800962c:	080097bb 	.word	0x080097bb
 8009630:	08009793 	.word	0x08009793
 8009634:	080095e5 	.word	0x080095e5
 8009638:	080095e5 	.word	0x080095e5
 800963c:	08009769 	.word	0x08009769
 8009640:	080095e5 	.word	0x080095e5
 8009644:	080095e5 	.word	0x080095e5
 8009648:	080095e5 	.word	0x080095e5
 800964c:	080095e5 	.word	0x080095e5
 8009650:	08009721 	.word	0x08009721
 8009654:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009658:	e7db      	b.n	8009612 <_scanf_float+0x92>
 800965a:	290e      	cmp	r1, #14
 800965c:	d8c2      	bhi.n	80095e4 <_scanf_float+0x64>
 800965e:	a001      	add	r0, pc, #4	; (adr r0, 8009664 <_scanf_float+0xe4>)
 8009660:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009664:	08009713 	.word	0x08009713
 8009668:	080095e5 	.word	0x080095e5
 800966c:	08009713 	.word	0x08009713
 8009670:	080097a7 	.word	0x080097a7
 8009674:	080095e5 	.word	0x080095e5
 8009678:	080096c1 	.word	0x080096c1
 800967c:	080096fd 	.word	0x080096fd
 8009680:	080096fd 	.word	0x080096fd
 8009684:	080096fd 	.word	0x080096fd
 8009688:	080096fd 	.word	0x080096fd
 800968c:	080096fd 	.word	0x080096fd
 8009690:	080096fd 	.word	0x080096fd
 8009694:	080096fd 	.word	0x080096fd
 8009698:	080096fd 	.word	0x080096fd
 800969c:	080096fd 	.word	0x080096fd
 80096a0:	2b6e      	cmp	r3, #110	; 0x6e
 80096a2:	d809      	bhi.n	80096b8 <_scanf_float+0x138>
 80096a4:	2b60      	cmp	r3, #96	; 0x60
 80096a6:	d8b2      	bhi.n	800960e <_scanf_float+0x8e>
 80096a8:	2b54      	cmp	r3, #84	; 0x54
 80096aa:	d077      	beq.n	800979c <_scanf_float+0x21c>
 80096ac:	2b59      	cmp	r3, #89	; 0x59
 80096ae:	d199      	bne.n	80095e4 <_scanf_float+0x64>
 80096b0:	2d07      	cmp	r5, #7
 80096b2:	d197      	bne.n	80095e4 <_scanf_float+0x64>
 80096b4:	2508      	movs	r5, #8
 80096b6:	e029      	b.n	800970c <_scanf_float+0x18c>
 80096b8:	2b74      	cmp	r3, #116	; 0x74
 80096ba:	d06f      	beq.n	800979c <_scanf_float+0x21c>
 80096bc:	2b79      	cmp	r3, #121	; 0x79
 80096be:	e7f6      	b.n	80096ae <_scanf_float+0x12e>
 80096c0:	6821      	ldr	r1, [r4, #0]
 80096c2:	05c8      	lsls	r0, r1, #23
 80096c4:	d51a      	bpl.n	80096fc <_scanf_float+0x17c>
 80096c6:	9b02      	ldr	r3, [sp, #8]
 80096c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80096cc:	6021      	str	r1, [r4, #0]
 80096ce:	f109 0901 	add.w	r9, r9, #1
 80096d2:	b11b      	cbz	r3, 80096dc <_scanf_float+0x15c>
 80096d4:	3b01      	subs	r3, #1
 80096d6:	3201      	adds	r2, #1
 80096d8:	9302      	str	r3, [sp, #8]
 80096da:	60a2      	str	r2, [r4, #8]
 80096dc:	68a3      	ldr	r3, [r4, #8]
 80096de:	3b01      	subs	r3, #1
 80096e0:	60a3      	str	r3, [r4, #8]
 80096e2:	6923      	ldr	r3, [r4, #16]
 80096e4:	3301      	adds	r3, #1
 80096e6:	6123      	str	r3, [r4, #16]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	3b01      	subs	r3, #1
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	607b      	str	r3, [r7, #4]
 80096f0:	f340 8084 	ble.w	80097fc <_scanf_float+0x27c>
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	3301      	adds	r3, #1
 80096f8:	603b      	str	r3, [r7, #0]
 80096fa:	e766      	b.n	80095ca <_scanf_float+0x4a>
 80096fc:	eb1a 0f05 	cmn.w	sl, r5
 8009700:	f47f af70 	bne.w	80095e4 <_scanf_float+0x64>
 8009704:	6822      	ldr	r2, [r4, #0]
 8009706:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800970a:	6022      	str	r2, [r4, #0]
 800970c:	f806 3b01 	strb.w	r3, [r6], #1
 8009710:	e7e4      	b.n	80096dc <_scanf_float+0x15c>
 8009712:	6822      	ldr	r2, [r4, #0]
 8009714:	0610      	lsls	r0, r2, #24
 8009716:	f57f af65 	bpl.w	80095e4 <_scanf_float+0x64>
 800971a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800971e:	e7f4      	b.n	800970a <_scanf_float+0x18a>
 8009720:	f1ba 0f00 	cmp.w	sl, #0
 8009724:	d10e      	bne.n	8009744 <_scanf_float+0x1c4>
 8009726:	f1b9 0f00 	cmp.w	r9, #0
 800972a:	d10e      	bne.n	800974a <_scanf_float+0x1ca>
 800972c:	6822      	ldr	r2, [r4, #0]
 800972e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009732:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009736:	d108      	bne.n	800974a <_scanf_float+0x1ca>
 8009738:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800973c:	f04f 0a01 	mov.w	sl, #1
 8009740:	6022      	str	r2, [r4, #0]
 8009742:	e7e3      	b.n	800970c <_scanf_float+0x18c>
 8009744:	f1ba 0f02 	cmp.w	sl, #2
 8009748:	d055      	beq.n	80097f6 <_scanf_float+0x276>
 800974a:	2d01      	cmp	r5, #1
 800974c:	d002      	beq.n	8009754 <_scanf_float+0x1d4>
 800974e:	2d04      	cmp	r5, #4
 8009750:	f47f af48 	bne.w	80095e4 <_scanf_float+0x64>
 8009754:	3501      	adds	r5, #1
 8009756:	b2ed      	uxtb	r5, r5
 8009758:	e7d8      	b.n	800970c <_scanf_float+0x18c>
 800975a:	f1ba 0f01 	cmp.w	sl, #1
 800975e:	f47f af41 	bne.w	80095e4 <_scanf_float+0x64>
 8009762:	f04f 0a02 	mov.w	sl, #2
 8009766:	e7d1      	b.n	800970c <_scanf_float+0x18c>
 8009768:	b97d      	cbnz	r5, 800978a <_scanf_float+0x20a>
 800976a:	f1b9 0f00 	cmp.w	r9, #0
 800976e:	f47f af3c 	bne.w	80095ea <_scanf_float+0x6a>
 8009772:	6822      	ldr	r2, [r4, #0]
 8009774:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009778:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800977c:	f47f af39 	bne.w	80095f2 <_scanf_float+0x72>
 8009780:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009784:	2501      	movs	r5, #1
 8009786:	6022      	str	r2, [r4, #0]
 8009788:	e7c0      	b.n	800970c <_scanf_float+0x18c>
 800978a:	2d03      	cmp	r5, #3
 800978c:	d0e2      	beq.n	8009754 <_scanf_float+0x1d4>
 800978e:	2d05      	cmp	r5, #5
 8009790:	e7de      	b.n	8009750 <_scanf_float+0x1d0>
 8009792:	2d02      	cmp	r5, #2
 8009794:	f47f af26 	bne.w	80095e4 <_scanf_float+0x64>
 8009798:	2503      	movs	r5, #3
 800979a:	e7b7      	b.n	800970c <_scanf_float+0x18c>
 800979c:	2d06      	cmp	r5, #6
 800979e:	f47f af21 	bne.w	80095e4 <_scanf_float+0x64>
 80097a2:	2507      	movs	r5, #7
 80097a4:	e7b2      	b.n	800970c <_scanf_float+0x18c>
 80097a6:	6822      	ldr	r2, [r4, #0]
 80097a8:	0591      	lsls	r1, r2, #22
 80097aa:	f57f af1b 	bpl.w	80095e4 <_scanf_float+0x64>
 80097ae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80097b2:	6022      	str	r2, [r4, #0]
 80097b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80097b8:	e7a8      	b.n	800970c <_scanf_float+0x18c>
 80097ba:	6822      	ldr	r2, [r4, #0]
 80097bc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80097c0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80097c4:	d006      	beq.n	80097d4 <_scanf_float+0x254>
 80097c6:	0550      	lsls	r0, r2, #21
 80097c8:	f57f af0c 	bpl.w	80095e4 <_scanf_float+0x64>
 80097cc:	f1b9 0f00 	cmp.w	r9, #0
 80097d0:	f43f af0f 	beq.w	80095f2 <_scanf_float+0x72>
 80097d4:	0591      	lsls	r1, r2, #22
 80097d6:	bf58      	it	pl
 80097d8:	9901      	ldrpl	r1, [sp, #4]
 80097da:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80097de:	bf58      	it	pl
 80097e0:	eba9 0101 	subpl.w	r1, r9, r1
 80097e4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80097e8:	f04f 0900 	mov.w	r9, #0
 80097ec:	bf58      	it	pl
 80097ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80097f2:	6022      	str	r2, [r4, #0]
 80097f4:	e78a      	b.n	800970c <_scanf_float+0x18c>
 80097f6:	f04f 0a03 	mov.w	sl, #3
 80097fa:	e787      	b.n	800970c <_scanf_float+0x18c>
 80097fc:	4639      	mov	r1, r7
 80097fe:	4640      	mov	r0, r8
 8009800:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009804:	4798      	blx	r3
 8009806:	2800      	cmp	r0, #0
 8009808:	f43f aedf 	beq.w	80095ca <_scanf_float+0x4a>
 800980c:	e6ea      	b.n	80095e4 <_scanf_float+0x64>
 800980e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009812:	463a      	mov	r2, r7
 8009814:	4640      	mov	r0, r8
 8009816:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800981a:	4798      	blx	r3
 800981c:	6923      	ldr	r3, [r4, #16]
 800981e:	3b01      	subs	r3, #1
 8009820:	6123      	str	r3, [r4, #16]
 8009822:	e6ec      	b.n	80095fe <_scanf_float+0x7e>
 8009824:	1e6b      	subs	r3, r5, #1
 8009826:	2b06      	cmp	r3, #6
 8009828:	d825      	bhi.n	8009876 <_scanf_float+0x2f6>
 800982a:	2d02      	cmp	r5, #2
 800982c:	d836      	bhi.n	800989c <_scanf_float+0x31c>
 800982e:	455e      	cmp	r6, fp
 8009830:	f67f aee8 	bls.w	8009604 <_scanf_float+0x84>
 8009834:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009838:	463a      	mov	r2, r7
 800983a:	4640      	mov	r0, r8
 800983c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009840:	4798      	blx	r3
 8009842:	6923      	ldr	r3, [r4, #16]
 8009844:	3b01      	subs	r3, #1
 8009846:	6123      	str	r3, [r4, #16]
 8009848:	e7f1      	b.n	800982e <_scanf_float+0x2ae>
 800984a:	9802      	ldr	r0, [sp, #8]
 800984c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009850:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009854:	463a      	mov	r2, r7
 8009856:	9002      	str	r0, [sp, #8]
 8009858:	4640      	mov	r0, r8
 800985a:	4798      	blx	r3
 800985c:	6923      	ldr	r3, [r4, #16]
 800985e:	3b01      	subs	r3, #1
 8009860:	6123      	str	r3, [r4, #16]
 8009862:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009866:	fa5f fa8a 	uxtb.w	sl, sl
 800986a:	f1ba 0f02 	cmp.w	sl, #2
 800986e:	d1ec      	bne.n	800984a <_scanf_float+0x2ca>
 8009870:	3d03      	subs	r5, #3
 8009872:	b2ed      	uxtb	r5, r5
 8009874:	1b76      	subs	r6, r6, r5
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	05da      	lsls	r2, r3, #23
 800987a:	d52f      	bpl.n	80098dc <_scanf_float+0x35c>
 800987c:	055b      	lsls	r3, r3, #21
 800987e:	d510      	bpl.n	80098a2 <_scanf_float+0x322>
 8009880:	455e      	cmp	r6, fp
 8009882:	f67f aebf 	bls.w	8009604 <_scanf_float+0x84>
 8009886:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800988a:	463a      	mov	r2, r7
 800988c:	4640      	mov	r0, r8
 800988e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009892:	4798      	blx	r3
 8009894:	6923      	ldr	r3, [r4, #16]
 8009896:	3b01      	subs	r3, #1
 8009898:	6123      	str	r3, [r4, #16]
 800989a:	e7f1      	b.n	8009880 <_scanf_float+0x300>
 800989c:	46aa      	mov	sl, r5
 800989e:	9602      	str	r6, [sp, #8]
 80098a0:	e7df      	b.n	8009862 <_scanf_float+0x2e2>
 80098a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80098a6:	6923      	ldr	r3, [r4, #16]
 80098a8:	2965      	cmp	r1, #101	; 0x65
 80098aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80098ae:	f106 35ff 	add.w	r5, r6, #4294967295
 80098b2:	6123      	str	r3, [r4, #16]
 80098b4:	d00c      	beq.n	80098d0 <_scanf_float+0x350>
 80098b6:	2945      	cmp	r1, #69	; 0x45
 80098b8:	d00a      	beq.n	80098d0 <_scanf_float+0x350>
 80098ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098be:	463a      	mov	r2, r7
 80098c0:	4640      	mov	r0, r8
 80098c2:	4798      	blx	r3
 80098c4:	6923      	ldr	r3, [r4, #16]
 80098c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	1eb5      	subs	r5, r6, #2
 80098ce:	6123      	str	r3, [r4, #16]
 80098d0:	463a      	mov	r2, r7
 80098d2:	4640      	mov	r0, r8
 80098d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098d8:	4798      	blx	r3
 80098da:	462e      	mov	r6, r5
 80098dc:	6825      	ldr	r5, [r4, #0]
 80098de:	f015 0510 	ands.w	r5, r5, #16
 80098e2:	d155      	bne.n	8009990 <_scanf_float+0x410>
 80098e4:	7035      	strb	r5, [r6, #0]
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80098ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098f0:	d11b      	bne.n	800992a <_scanf_float+0x3aa>
 80098f2:	9b01      	ldr	r3, [sp, #4]
 80098f4:	454b      	cmp	r3, r9
 80098f6:	eba3 0209 	sub.w	r2, r3, r9
 80098fa:	d123      	bne.n	8009944 <_scanf_float+0x3c4>
 80098fc:	2200      	movs	r2, #0
 80098fe:	4659      	mov	r1, fp
 8009900:	4640      	mov	r0, r8
 8009902:	f000 fe79 	bl	800a5f8 <_strtod_r>
 8009906:	6822      	ldr	r2, [r4, #0]
 8009908:	9b03      	ldr	r3, [sp, #12]
 800990a:	f012 0f02 	tst.w	r2, #2
 800990e:	4606      	mov	r6, r0
 8009910:	460f      	mov	r7, r1
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	d021      	beq.n	800995a <_scanf_float+0x3da>
 8009916:	1d1a      	adds	r2, r3, #4
 8009918:	9903      	ldr	r1, [sp, #12]
 800991a:	600a      	str	r2, [r1, #0]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	e9c3 6700 	strd	r6, r7, [r3]
 8009922:	68e3      	ldr	r3, [r4, #12]
 8009924:	3301      	adds	r3, #1
 8009926:	60e3      	str	r3, [r4, #12]
 8009928:	e66d      	b.n	8009606 <_scanf_float+0x86>
 800992a:	9b04      	ldr	r3, [sp, #16]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d0e5      	beq.n	80098fc <_scanf_float+0x37c>
 8009930:	9905      	ldr	r1, [sp, #20]
 8009932:	230a      	movs	r3, #10
 8009934:	462a      	mov	r2, r5
 8009936:	4640      	mov	r0, r8
 8009938:	3101      	adds	r1, #1
 800993a:	f000 fedf 	bl	800a6fc <_strtol_r>
 800993e:	9b04      	ldr	r3, [sp, #16]
 8009940:	9e05      	ldr	r6, [sp, #20]
 8009942:	1ac2      	subs	r2, r0, r3
 8009944:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009948:	429e      	cmp	r6, r3
 800994a:	bf28      	it	cs
 800994c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009950:	4630      	mov	r0, r6
 8009952:	4910      	ldr	r1, [pc, #64]	; (8009994 <_scanf_float+0x414>)
 8009954:	f000 f826 	bl	80099a4 <siprintf>
 8009958:	e7d0      	b.n	80098fc <_scanf_float+0x37c>
 800995a:	f012 0f04 	tst.w	r2, #4
 800995e:	f103 0204 	add.w	r2, r3, #4
 8009962:	d1d9      	bne.n	8009918 <_scanf_float+0x398>
 8009964:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009968:	f8cc 2000 	str.w	r2, [ip]
 800996c:	f8d3 8000 	ldr.w	r8, [r3]
 8009970:	4602      	mov	r2, r0
 8009972:	460b      	mov	r3, r1
 8009974:	f7fd f8d8 	bl	8006b28 <__aeabi_dcmpun>
 8009978:	b128      	cbz	r0, 8009986 <_scanf_float+0x406>
 800997a:	4807      	ldr	r0, [pc, #28]	; (8009998 <_scanf_float+0x418>)
 800997c:	f000 f80e 	bl	800999c <nanf>
 8009980:	f8c8 0000 	str.w	r0, [r8]
 8009984:	e7cd      	b.n	8009922 <_scanf_float+0x3a2>
 8009986:	4630      	mov	r0, r6
 8009988:	4639      	mov	r1, r7
 800998a:	f7fd f92b 	bl	8006be4 <__aeabi_d2f>
 800998e:	e7f7      	b.n	8009980 <_scanf_float+0x400>
 8009990:	2500      	movs	r5, #0
 8009992:	e638      	b.n	8009606 <_scanf_float+0x86>
 8009994:	0801e074 	.word	0x0801e074
 8009998:	0801e4e8 	.word	0x0801e4e8

0800999c <nanf>:
 800999c:	4800      	ldr	r0, [pc, #0]	; (80099a0 <nanf+0x4>)
 800999e:	4770      	bx	lr
 80099a0:	7fc00000 	.word	0x7fc00000

080099a4 <siprintf>:
 80099a4:	b40e      	push	{r1, r2, r3}
 80099a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80099aa:	b500      	push	{lr}
 80099ac:	b09c      	sub	sp, #112	; 0x70
 80099ae:	ab1d      	add	r3, sp, #116	; 0x74
 80099b0:	9002      	str	r0, [sp, #8]
 80099b2:	9006      	str	r0, [sp, #24]
 80099b4:	9107      	str	r1, [sp, #28]
 80099b6:	9104      	str	r1, [sp, #16]
 80099b8:	4808      	ldr	r0, [pc, #32]	; (80099dc <siprintf+0x38>)
 80099ba:	4909      	ldr	r1, [pc, #36]	; (80099e0 <siprintf+0x3c>)
 80099bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80099c0:	9105      	str	r1, [sp, #20]
 80099c2:	6800      	ldr	r0, [r0, #0]
 80099c4:	a902      	add	r1, sp, #8
 80099c6:	9301      	str	r3, [sp, #4]
 80099c8:	f002 fec4 	bl	800c754 <_svfiprintf_r>
 80099cc:	2200      	movs	r2, #0
 80099ce:	9b02      	ldr	r3, [sp, #8]
 80099d0:	701a      	strb	r2, [r3, #0]
 80099d2:	b01c      	add	sp, #112	; 0x70
 80099d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80099d8:	b003      	add	sp, #12
 80099da:	4770      	bx	lr
 80099dc:	2000000c 	.word	0x2000000c
 80099e0:	ffff0208 	.word	0xffff0208

080099e4 <sulp>:
 80099e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e8:	460f      	mov	r7, r1
 80099ea:	4690      	mov	r8, r2
 80099ec:	f002 fc1e 	bl	800c22c <__ulp>
 80099f0:	4604      	mov	r4, r0
 80099f2:	460d      	mov	r5, r1
 80099f4:	f1b8 0f00 	cmp.w	r8, #0
 80099f8:	d011      	beq.n	8009a1e <sulp+0x3a>
 80099fa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80099fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	dd0b      	ble.n	8009a1e <sulp+0x3a>
 8009a06:	2400      	movs	r4, #0
 8009a08:	051b      	lsls	r3, r3, #20
 8009a0a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009a0e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009a12:	4622      	mov	r2, r4
 8009a14:	462b      	mov	r3, r5
 8009a16:	f7fc fded 	bl	80065f4 <__aeabi_dmul>
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	460d      	mov	r5, r1
 8009a1e:	4620      	mov	r0, r4
 8009a20:	4629      	mov	r1, r5
 8009a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009a28 <_strtod_l>:
 8009a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2c:	469b      	mov	fp, r3
 8009a2e:	2300      	movs	r3, #0
 8009a30:	b09f      	sub	sp, #124	; 0x7c
 8009a32:	931a      	str	r3, [sp, #104]	; 0x68
 8009a34:	4b9e      	ldr	r3, [pc, #632]	; (8009cb0 <_strtod_l+0x288>)
 8009a36:	4682      	mov	sl, r0
 8009a38:	681f      	ldr	r7, [r3, #0]
 8009a3a:	460e      	mov	r6, r1
 8009a3c:	4638      	mov	r0, r7
 8009a3e:	9215      	str	r2, [sp, #84]	; 0x54
 8009a40:	f7fc fc14 	bl	800626c <strlen>
 8009a44:	f04f 0800 	mov.w	r8, #0
 8009a48:	4604      	mov	r4, r0
 8009a4a:	f04f 0900 	mov.w	r9, #0
 8009a4e:	9619      	str	r6, [sp, #100]	; 0x64
 8009a50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a52:	781a      	ldrb	r2, [r3, #0]
 8009a54:	2a2b      	cmp	r2, #43	; 0x2b
 8009a56:	d04c      	beq.n	8009af2 <_strtod_l+0xca>
 8009a58:	d83a      	bhi.n	8009ad0 <_strtod_l+0xa8>
 8009a5a:	2a0d      	cmp	r2, #13
 8009a5c:	d833      	bhi.n	8009ac6 <_strtod_l+0x9e>
 8009a5e:	2a08      	cmp	r2, #8
 8009a60:	d833      	bhi.n	8009aca <_strtod_l+0xa2>
 8009a62:	2a00      	cmp	r2, #0
 8009a64:	d03d      	beq.n	8009ae2 <_strtod_l+0xba>
 8009a66:	2300      	movs	r3, #0
 8009a68:	930a      	str	r3, [sp, #40]	; 0x28
 8009a6a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009a6c:	782b      	ldrb	r3, [r5, #0]
 8009a6e:	2b30      	cmp	r3, #48	; 0x30
 8009a70:	f040 80aa 	bne.w	8009bc8 <_strtod_l+0x1a0>
 8009a74:	786b      	ldrb	r3, [r5, #1]
 8009a76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a7a:	2b58      	cmp	r3, #88	; 0x58
 8009a7c:	d166      	bne.n	8009b4c <_strtod_l+0x124>
 8009a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a80:	4650      	mov	r0, sl
 8009a82:	9301      	str	r3, [sp, #4]
 8009a84:	ab1a      	add	r3, sp, #104	; 0x68
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	4a8a      	ldr	r2, [pc, #552]	; (8009cb4 <_strtod_l+0x28c>)
 8009a8a:	f8cd b008 	str.w	fp, [sp, #8]
 8009a8e:	ab1b      	add	r3, sp, #108	; 0x6c
 8009a90:	a919      	add	r1, sp, #100	; 0x64
 8009a92:	f001 fd23 	bl	800b4dc <__gethex>
 8009a96:	f010 0607 	ands.w	r6, r0, #7
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	d005      	beq.n	8009aaa <_strtod_l+0x82>
 8009a9e:	2e06      	cmp	r6, #6
 8009aa0:	d129      	bne.n	8009af6 <_strtod_l+0xce>
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	3501      	adds	r5, #1
 8009aa6:	9519      	str	r5, [sp, #100]	; 0x64
 8009aa8:	930a      	str	r3, [sp, #40]	; 0x28
 8009aaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f040 858a 	bne.w	800a5c6 <_strtod_l+0xb9e>
 8009ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ab4:	b1d3      	cbz	r3, 8009aec <_strtod_l+0xc4>
 8009ab6:	4642      	mov	r2, r8
 8009ab8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009abc:	4610      	mov	r0, r2
 8009abe:	4619      	mov	r1, r3
 8009ac0:	b01f      	add	sp, #124	; 0x7c
 8009ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac6:	2a20      	cmp	r2, #32
 8009ac8:	d1cd      	bne.n	8009a66 <_strtod_l+0x3e>
 8009aca:	3301      	adds	r3, #1
 8009acc:	9319      	str	r3, [sp, #100]	; 0x64
 8009ace:	e7bf      	b.n	8009a50 <_strtod_l+0x28>
 8009ad0:	2a2d      	cmp	r2, #45	; 0x2d
 8009ad2:	d1c8      	bne.n	8009a66 <_strtod_l+0x3e>
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	920a      	str	r2, [sp, #40]	; 0x28
 8009ad8:	1c5a      	adds	r2, r3, #1
 8009ada:	9219      	str	r2, [sp, #100]	; 0x64
 8009adc:	785b      	ldrb	r3, [r3, #1]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1c3      	bne.n	8009a6a <_strtod_l+0x42>
 8009ae2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ae4:	9619      	str	r6, [sp, #100]	; 0x64
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f040 856b 	bne.w	800a5c2 <_strtod_l+0xb9a>
 8009aec:	4642      	mov	r2, r8
 8009aee:	464b      	mov	r3, r9
 8009af0:	e7e4      	b.n	8009abc <_strtod_l+0x94>
 8009af2:	2200      	movs	r2, #0
 8009af4:	e7ef      	b.n	8009ad6 <_strtod_l+0xae>
 8009af6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009af8:	b13a      	cbz	r2, 8009b0a <_strtod_l+0xe2>
 8009afa:	2135      	movs	r1, #53	; 0x35
 8009afc:	a81c      	add	r0, sp, #112	; 0x70
 8009afe:	f002 fc99 	bl	800c434 <__copybits>
 8009b02:	4650      	mov	r0, sl
 8009b04:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009b06:	f002 f861 	bl	800bbcc <_Bfree>
 8009b0a:	3e01      	subs	r6, #1
 8009b0c:	2e04      	cmp	r6, #4
 8009b0e:	d806      	bhi.n	8009b1e <_strtod_l+0xf6>
 8009b10:	e8df f006 	tbb	[pc, r6]
 8009b14:	1714030a 	.word	0x1714030a
 8009b18:	0a          	.byte	0x0a
 8009b19:	00          	.byte	0x00
 8009b1a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009b1e:	0721      	lsls	r1, r4, #28
 8009b20:	d5c3      	bpl.n	8009aaa <_strtod_l+0x82>
 8009b22:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009b26:	e7c0      	b.n	8009aaa <_strtod_l+0x82>
 8009b28:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009b2a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009b2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009b32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009b36:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009b3a:	e7f0      	b.n	8009b1e <_strtod_l+0xf6>
 8009b3c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009cb8 <_strtod_l+0x290>
 8009b40:	e7ed      	b.n	8009b1e <_strtod_l+0xf6>
 8009b42:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009b46:	f04f 38ff 	mov.w	r8, #4294967295
 8009b4a:	e7e8      	b.n	8009b1e <_strtod_l+0xf6>
 8009b4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b4e:	1c5a      	adds	r2, r3, #1
 8009b50:	9219      	str	r2, [sp, #100]	; 0x64
 8009b52:	785b      	ldrb	r3, [r3, #1]
 8009b54:	2b30      	cmp	r3, #48	; 0x30
 8009b56:	d0f9      	beq.n	8009b4c <_strtod_l+0x124>
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d0a6      	beq.n	8009aaa <_strtod_l+0x82>
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	9307      	str	r3, [sp, #28]
 8009b60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b62:	220a      	movs	r2, #10
 8009b64:	9308      	str	r3, [sp, #32]
 8009b66:	2300      	movs	r3, #0
 8009b68:	469b      	mov	fp, r3
 8009b6a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009b6e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009b70:	7805      	ldrb	r5, [r0, #0]
 8009b72:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009b76:	b2d9      	uxtb	r1, r3
 8009b78:	2909      	cmp	r1, #9
 8009b7a:	d927      	bls.n	8009bcc <_strtod_l+0x1a4>
 8009b7c:	4622      	mov	r2, r4
 8009b7e:	4639      	mov	r1, r7
 8009b80:	f002 fefe 	bl	800c980 <strncmp>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	d033      	beq.n	8009bf0 <_strtod_l+0x1c8>
 8009b88:	2000      	movs	r0, #0
 8009b8a:	462a      	mov	r2, r5
 8009b8c:	465c      	mov	r4, fp
 8009b8e:	4603      	mov	r3, r0
 8009b90:	9004      	str	r0, [sp, #16]
 8009b92:	2a65      	cmp	r2, #101	; 0x65
 8009b94:	d001      	beq.n	8009b9a <_strtod_l+0x172>
 8009b96:	2a45      	cmp	r2, #69	; 0x45
 8009b98:	d114      	bne.n	8009bc4 <_strtod_l+0x19c>
 8009b9a:	b91c      	cbnz	r4, 8009ba4 <_strtod_l+0x17c>
 8009b9c:	9a07      	ldr	r2, [sp, #28]
 8009b9e:	4302      	orrs	r2, r0
 8009ba0:	d09f      	beq.n	8009ae2 <_strtod_l+0xba>
 8009ba2:	2400      	movs	r4, #0
 8009ba4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009ba6:	1c72      	adds	r2, r6, #1
 8009ba8:	9219      	str	r2, [sp, #100]	; 0x64
 8009baa:	7872      	ldrb	r2, [r6, #1]
 8009bac:	2a2b      	cmp	r2, #43	; 0x2b
 8009bae:	d079      	beq.n	8009ca4 <_strtod_l+0x27c>
 8009bb0:	2a2d      	cmp	r2, #45	; 0x2d
 8009bb2:	f000 8083 	beq.w	8009cbc <_strtod_l+0x294>
 8009bb6:	2700      	movs	r7, #0
 8009bb8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009bbc:	2909      	cmp	r1, #9
 8009bbe:	f240 8083 	bls.w	8009cc8 <_strtod_l+0x2a0>
 8009bc2:	9619      	str	r6, [sp, #100]	; 0x64
 8009bc4:	2500      	movs	r5, #0
 8009bc6:	e09f      	b.n	8009d08 <_strtod_l+0x2e0>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	e7c8      	b.n	8009b5e <_strtod_l+0x136>
 8009bcc:	f1bb 0f08 	cmp.w	fp, #8
 8009bd0:	bfd5      	itete	le
 8009bd2:	9906      	ldrle	r1, [sp, #24]
 8009bd4:	9905      	ldrgt	r1, [sp, #20]
 8009bd6:	fb02 3301 	mlale	r3, r2, r1, r3
 8009bda:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009bde:	f100 0001 	add.w	r0, r0, #1
 8009be2:	bfd4      	ite	le
 8009be4:	9306      	strle	r3, [sp, #24]
 8009be6:	9305      	strgt	r3, [sp, #20]
 8009be8:	f10b 0b01 	add.w	fp, fp, #1
 8009bec:	9019      	str	r0, [sp, #100]	; 0x64
 8009bee:	e7be      	b.n	8009b6e <_strtod_l+0x146>
 8009bf0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009bf2:	191a      	adds	r2, r3, r4
 8009bf4:	9219      	str	r2, [sp, #100]	; 0x64
 8009bf6:	5d1a      	ldrb	r2, [r3, r4]
 8009bf8:	f1bb 0f00 	cmp.w	fp, #0
 8009bfc:	d036      	beq.n	8009c6c <_strtod_l+0x244>
 8009bfe:	465c      	mov	r4, fp
 8009c00:	9004      	str	r0, [sp, #16]
 8009c02:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009c06:	2b09      	cmp	r3, #9
 8009c08:	d912      	bls.n	8009c30 <_strtod_l+0x208>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e7c1      	b.n	8009b92 <_strtod_l+0x16a>
 8009c0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c10:	3001      	adds	r0, #1
 8009c12:	1c5a      	adds	r2, r3, #1
 8009c14:	9219      	str	r2, [sp, #100]	; 0x64
 8009c16:	785a      	ldrb	r2, [r3, #1]
 8009c18:	2a30      	cmp	r2, #48	; 0x30
 8009c1a:	d0f8      	beq.n	8009c0e <_strtod_l+0x1e6>
 8009c1c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009c20:	2b08      	cmp	r3, #8
 8009c22:	f200 84d5 	bhi.w	800a5d0 <_strtod_l+0xba8>
 8009c26:	9004      	str	r0, [sp, #16]
 8009c28:	2000      	movs	r0, #0
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c2e:	9308      	str	r3, [sp, #32]
 8009c30:	3a30      	subs	r2, #48	; 0x30
 8009c32:	f100 0301 	add.w	r3, r0, #1
 8009c36:	d013      	beq.n	8009c60 <_strtod_l+0x238>
 8009c38:	9904      	ldr	r1, [sp, #16]
 8009c3a:	1905      	adds	r5, r0, r4
 8009c3c:	4419      	add	r1, r3
 8009c3e:	9104      	str	r1, [sp, #16]
 8009c40:	4623      	mov	r3, r4
 8009c42:	210a      	movs	r1, #10
 8009c44:	42ab      	cmp	r3, r5
 8009c46:	d113      	bne.n	8009c70 <_strtod_l+0x248>
 8009c48:	1823      	adds	r3, r4, r0
 8009c4a:	2b08      	cmp	r3, #8
 8009c4c:	f104 0401 	add.w	r4, r4, #1
 8009c50:	4404      	add	r4, r0
 8009c52:	dc1b      	bgt.n	8009c8c <_strtod_l+0x264>
 8009c54:	230a      	movs	r3, #10
 8009c56:	9906      	ldr	r1, [sp, #24]
 8009c58:	fb03 2301 	mla	r3, r3, r1, r2
 8009c5c:	9306      	str	r3, [sp, #24]
 8009c5e:	2300      	movs	r3, #0
 8009c60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009c62:	4618      	mov	r0, r3
 8009c64:	1c51      	adds	r1, r2, #1
 8009c66:	9119      	str	r1, [sp, #100]	; 0x64
 8009c68:	7852      	ldrb	r2, [r2, #1]
 8009c6a:	e7ca      	b.n	8009c02 <_strtod_l+0x1da>
 8009c6c:	4658      	mov	r0, fp
 8009c6e:	e7d3      	b.n	8009c18 <_strtod_l+0x1f0>
 8009c70:	2b08      	cmp	r3, #8
 8009c72:	dc04      	bgt.n	8009c7e <_strtod_l+0x256>
 8009c74:	9f06      	ldr	r7, [sp, #24]
 8009c76:	434f      	muls	r7, r1
 8009c78:	9706      	str	r7, [sp, #24]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	e7e2      	b.n	8009c44 <_strtod_l+0x21c>
 8009c7e:	1c5f      	adds	r7, r3, #1
 8009c80:	2f10      	cmp	r7, #16
 8009c82:	bfde      	ittt	le
 8009c84:	9f05      	ldrle	r7, [sp, #20]
 8009c86:	434f      	mulle	r7, r1
 8009c88:	9705      	strle	r7, [sp, #20]
 8009c8a:	e7f6      	b.n	8009c7a <_strtod_l+0x252>
 8009c8c:	2c10      	cmp	r4, #16
 8009c8e:	bfdf      	itttt	le
 8009c90:	230a      	movle	r3, #10
 8009c92:	9905      	ldrle	r1, [sp, #20]
 8009c94:	fb03 2301 	mlale	r3, r3, r1, r2
 8009c98:	9305      	strle	r3, [sp, #20]
 8009c9a:	e7e0      	b.n	8009c5e <_strtod_l+0x236>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	9304      	str	r3, [sp, #16]
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e77b      	b.n	8009b9c <_strtod_l+0x174>
 8009ca4:	2700      	movs	r7, #0
 8009ca6:	1cb2      	adds	r2, r6, #2
 8009ca8:	9219      	str	r2, [sp, #100]	; 0x64
 8009caa:	78b2      	ldrb	r2, [r6, #2]
 8009cac:	e784      	b.n	8009bb8 <_strtod_l+0x190>
 8009cae:	bf00      	nop
 8009cb0:	0801e30c 	.word	0x0801e30c
 8009cb4:	0801e07c 	.word	0x0801e07c
 8009cb8:	7ff00000 	.word	0x7ff00000
 8009cbc:	2701      	movs	r7, #1
 8009cbe:	e7f2      	b.n	8009ca6 <_strtod_l+0x27e>
 8009cc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009cc2:	1c51      	adds	r1, r2, #1
 8009cc4:	9119      	str	r1, [sp, #100]	; 0x64
 8009cc6:	7852      	ldrb	r2, [r2, #1]
 8009cc8:	2a30      	cmp	r2, #48	; 0x30
 8009cca:	d0f9      	beq.n	8009cc0 <_strtod_l+0x298>
 8009ccc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009cd0:	2908      	cmp	r1, #8
 8009cd2:	f63f af77 	bhi.w	8009bc4 <_strtod_l+0x19c>
 8009cd6:	f04f 0e0a 	mov.w	lr, #10
 8009cda:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009cde:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009ce0:	9209      	str	r2, [sp, #36]	; 0x24
 8009ce2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009ce4:	1c51      	adds	r1, r2, #1
 8009ce6:	9119      	str	r1, [sp, #100]	; 0x64
 8009ce8:	7852      	ldrb	r2, [r2, #1]
 8009cea:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009cee:	2d09      	cmp	r5, #9
 8009cf0:	d935      	bls.n	8009d5e <_strtod_l+0x336>
 8009cf2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009cf4:	1b49      	subs	r1, r1, r5
 8009cf6:	2908      	cmp	r1, #8
 8009cf8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009cfc:	dc02      	bgt.n	8009d04 <_strtod_l+0x2dc>
 8009cfe:	4565      	cmp	r5, ip
 8009d00:	bfa8      	it	ge
 8009d02:	4665      	movge	r5, ip
 8009d04:	b107      	cbz	r7, 8009d08 <_strtod_l+0x2e0>
 8009d06:	426d      	negs	r5, r5
 8009d08:	2c00      	cmp	r4, #0
 8009d0a:	d14c      	bne.n	8009da6 <_strtod_l+0x37e>
 8009d0c:	9907      	ldr	r1, [sp, #28]
 8009d0e:	4301      	orrs	r1, r0
 8009d10:	f47f aecb 	bne.w	8009aaa <_strtod_l+0x82>
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	f47f aee4 	bne.w	8009ae2 <_strtod_l+0xba>
 8009d1a:	2a69      	cmp	r2, #105	; 0x69
 8009d1c:	d026      	beq.n	8009d6c <_strtod_l+0x344>
 8009d1e:	dc23      	bgt.n	8009d68 <_strtod_l+0x340>
 8009d20:	2a49      	cmp	r2, #73	; 0x49
 8009d22:	d023      	beq.n	8009d6c <_strtod_l+0x344>
 8009d24:	2a4e      	cmp	r2, #78	; 0x4e
 8009d26:	f47f aedc 	bne.w	8009ae2 <_strtod_l+0xba>
 8009d2a:	499d      	ldr	r1, [pc, #628]	; (8009fa0 <_strtod_l+0x578>)
 8009d2c:	a819      	add	r0, sp, #100	; 0x64
 8009d2e:	f001 fe23 	bl	800b978 <__match>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	f43f aed5 	beq.w	8009ae2 <_strtod_l+0xba>
 8009d38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	2b28      	cmp	r3, #40	; 0x28
 8009d3e:	d12c      	bne.n	8009d9a <_strtod_l+0x372>
 8009d40:	4998      	ldr	r1, [pc, #608]	; (8009fa4 <_strtod_l+0x57c>)
 8009d42:	aa1c      	add	r2, sp, #112	; 0x70
 8009d44:	a819      	add	r0, sp, #100	; 0x64
 8009d46:	f001 fe2b 	bl	800b9a0 <__hexnan>
 8009d4a:	2805      	cmp	r0, #5
 8009d4c:	d125      	bne.n	8009d9a <_strtod_l+0x372>
 8009d4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d50:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009d54:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009d58:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009d5c:	e6a5      	b.n	8009aaa <_strtod_l+0x82>
 8009d5e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8009d62:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009d66:	e7bc      	b.n	8009ce2 <_strtod_l+0x2ba>
 8009d68:	2a6e      	cmp	r2, #110	; 0x6e
 8009d6a:	e7dc      	b.n	8009d26 <_strtod_l+0x2fe>
 8009d6c:	498e      	ldr	r1, [pc, #568]	; (8009fa8 <_strtod_l+0x580>)
 8009d6e:	a819      	add	r0, sp, #100	; 0x64
 8009d70:	f001 fe02 	bl	800b978 <__match>
 8009d74:	2800      	cmp	r0, #0
 8009d76:	f43f aeb4 	beq.w	8009ae2 <_strtod_l+0xba>
 8009d7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d7c:	498b      	ldr	r1, [pc, #556]	; (8009fac <_strtod_l+0x584>)
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	a819      	add	r0, sp, #100	; 0x64
 8009d82:	9319      	str	r3, [sp, #100]	; 0x64
 8009d84:	f001 fdf8 	bl	800b978 <__match>
 8009d88:	b910      	cbnz	r0, 8009d90 <_strtod_l+0x368>
 8009d8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	9319      	str	r3, [sp, #100]	; 0x64
 8009d90:	f04f 0800 	mov.w	r8, #0
 8009d94:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009fb0 <_strtod_l+0x588>
 8009d98:	e687      	b.n	8009aaa <_strtod_l+0x82>
 8009d9a:	4886      	ldr	r0, [pc, #536]	; (8009fb4 <_strtod_l+0x58c>)
 8009d9c:	f002 fdda 	bl	800c954 <nan>
 8009da0:	4680      	mov	r8, r0
 8009da2:	4689      	mov	r9, r1
 8009da4:	e681      	b.n	8009aaa <_strtod_l+0x82>
 8009da6:	9b04      	ldr	r3, [sp, #16]
 8009da8:	f1bb 0f00 	cmp.w	fp, #0
 8009dac:	bf08      	it	eq
 8009dae:	46a3      	moveq	fp, r4
 8009db0:	1aeb      	subs	r3, r5, r3
 8009db2:	2c10      	cmp	r4, #16
 8009db4:	9806      	ldr	r0, [sp, #24]
 8009db6:	4626      	mov	r6, r4
 8009db8:	9307      	str	r3, [sp, #28]
 8009dba:	bfa8      	it	ge
 8009dbc:	2610      	movge	r6, #16
 8009dbe:	f7fc fb9f 	bl	8006500 <__aeabi_ui2d>
 8009dc2:	2c09      	cmp	r4, #9
 8009dc4:	4680      	mov	r8, r0
 8009dc6:	4689      	mov	r9, r1
 8009dc8:	dd13      	ble.n	8009df2 <_strtod_l+0x3ca>
 8009dca:	4b7b      	ldr	r3, [pc, #492]	; (8009fb8 <_strtod_l+0x590>)
 8009dcc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009dd0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009dd4:	f7fc fc0e 	bl	80065f4 <__aeabi_dmul>
 8009dd8:	4680      	mov	r8, r0
 8009dda:	9805      	ldr	r0, [sp, #20]
 8009ddc:	4689      	mov	r9, r1
 8009dde:	f7fc fb8f 	bl	8006500 <__aeabi_ui2d>
 8009de2:	4602      	mov	r2, r0
 8009de4:	460b      	mov	r3, r1
 8009de6:	4640      	mov	r0, r8
 8009de8:	4649      	mov	r1, r9
 8009dea:	f7fc fa4d 	bl	8006288 <__adddf3>
 8009dee:	4680      	mov	r8, r0
 8009df0:	4689      	mov	r9, r1
 8009df2:	2c0f      	cmp	r4, #15
 8009df4:	dc36      	bgt.n	8009e64 <_strtod_l+0x43c>
 8009df6:	9b07      	ldr	r3, [sp, #28]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f43f ae56 	beq.w	8009aaa <_strtod_l+0x82>
 8009dfe:	dd22      	ble.n	8009e46 <_strtod_l+0x41e>
 8009e00:	2b16      	cmp	r3, #22
 8009e02:	dc09      	bgt.n	8009e18 <_strtod_l+0x3f0>
 8009e04:	496c      	ldr	r1, [pc, #432]	; (8009fb8 <_strtod_l+0x590>)
 8009e06:	4642      	mov	r2, r8
 8009e08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e0c:	464b      	mov	r3, r9
 8009e0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e12:	f7fc fbef 	bl	80065f4 <__aeabi_dmul>
 8009e16:	e7c3      	b.n	8009da0 <_strtod_l+0x378>
 8009e18:	9a07      	ldr	r2, [sp, #28]
 8009e1a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	db20      	blt.n	8009e64 <_strtod_l+0x43c>
 8009e22:	4d65      	ldr	r5, [pc, #404]	; (8009fb8 <_strtod_l+0x590>)
 8009e24:	f1c4 040f 	rsb	r4, r4, #15
 8009e28:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009e2c:	4642      	mov	r2, r8
 8009e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e32:	464b      	mov	r3, r9
 8009e34:	f7fc fbde 	bl	80065f4 <__aeabi_dmul>
 8009e38:	9b07      	ldr	r3, [sp, #28]
 8009e3a:	1b1c      	subs	r4, r3, r4
 8009e3c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009e40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e44:	e7e5      	b.n	8009e12 <_strtod_l+0x3ea>
 8009e46:	9b07      	ldr	r3, [sp, #28]
 8009e48:	3316      	adds	r3, #22
 8009e4a:	db0b      	blt.n	8009e64 <_strtod_l+0x43c>
 8009e4c:	9b04      	ldr	r3, [sp, #16]
 8009e4e:	4640      	mov	r0, r8
 8009e50:	1b5d      	subs	r5, r3, r5
 8009e52:	4b59      	ldr	r3, [pc, #356]	; (8009fb8 <_strtod_l+0x590>)
 8009e54:	4649      	mov	r1, r9
 8009e56:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009e5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e5e:	f7fc fcf3 	bl	8006848 <__aeabi_ddiv>
 8009e62:	e79d      	b.n	8009da0 <_strtod_l+0x378>
 8009e64:	9b07      	ldr	r3, [sp, #28]
 8009e66:	1ba6      	subs	r6, r4, r6
 8009e68:	441e      	add	r6, r3
 8009e6a:	2e00      	cmp	r6, #0
 8009e6c:	dd74      	ble.n	8009f58 <_strtod_l+0x530>
 8009e6e:	f016 030f 	ands.w	r3, r6, #15
 8009e72:	d00a      	beq.n	8009e8a <_strtod_l+0x462>
 8009e74:	4950      	ldr	r1, [pc, #320]	; (8009fb8 <_strtod_l+0x590>)
 8009e76:	4642      	mov	r2, r8
 8009e78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e80:	464b      	mov	r3, r9
 8009e82:	f7fc fbb7 	bl	80065f4 <__aeabi_dmul>
 8009e86:	4680      	mov	r8, r0
 8009e88:	4689      	mov	r9, r1
 8009e8a:	f036 060f 	bics.w	r6, r6, #15
 8009e8e:	d052      	beq.n	8009f36 <_strtod_l+0x50e>
 8009e90:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009e94:	dd27      	ble.n	8009ee6 <_strtod_l+0x4be>
 8009e96:	f04f 0b00 	mov.w	fp, #0
 8009e9a:	f8cd b010 	str.w	fp, [sp, #16]
 8009e9e:	f8cd b020 	str.w	fp, [sp, #32]
 8009ea2:	f8cd b018 	str.w	fp, [sp, #24]
 8009ea6:	2322      	movs	r3, #34	; 0x22
 8009ea8:	f04f 0800 	mov.w	r8, #0
 8009eac:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009fb0 <_strtod_l+0x588>
 8009eb0:	f8ca 3000 	str.w	r3, [sl]
 8009eb4:	9b08      	ldr	r3, [sp, #32]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f43f adf7 	beq.w	8009aaa <_strtod_l+0x82>
 8009ebc:	4650      	mov	r0, sl
 8009ebe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009ec0:	f001 fe84 	bl	800bbcc <_Bfree>
 8009ec4:	4650      	mov	r0, sl
 8009ec6:	9906      	ldr	r1, [sp, #24]
 8009ec8:	f001 fe80 	bl	800bbcc <_Bfree>
 8009ecc:	4650      	mov	r0, sl
 8009ece:	9904      	ldr	r1, [sp, #16]
 8009ed0:	f001 fe7c 	bl	800bbcc <_Bfree>
 8009ed4:	4650      	mov	r0, sl
 8009ed6:	9908      	ldr	r1, [sp, #32]
 8009ed8:	f001 fe78 	bl	800bbcc <_Bfree>
 8009edc:	4659      	mov	r1, fp
 8009ede:	4650      	mov	r0, sl
 8009ee0:	f001 fe74 	bl	800bbcc <_Bfree>
 8009ee4:	e5e1      	b.n	8009aaa <_strtod_l+0x82>
 8009ee6:	4b35      	ldr	r3, [pc, #212]	; (8009fbc <_strtod_l+0x594>)
 8009ee8:	4640      	mov	r0, r8
 8009eea:	9305      	str	r3, [sp, #20]
 8009eec:	2300      	movs	r3, #0
 8009eee:	4649      	mov	r1, r9
 8009ef0:	461f      	mov	r7, r3
 8009ef2:	1136      	asrs	r6, r6, #4
 8009ef4:	2e01      	cmp	r6, #1
 8009ef6:	dc21      	bgt.n	8009f3c <_strtod_l+0x514>
 8009ef8:	b10b      	cbz	r3, 8009efe <_strtod_l+0x4d6>
 8009efa:	4680      	mov	r8, r0
 8009efc:	4689      	mov	r9, r1
 8009efe:	4b2f      	ldr	r3, [pc, #188]	; (8009fbc <_strtod_l+0x594>)
 8009f00:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009f04:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009f08:	4642      	mov	r2, r8
 8009f0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f0e:	464b      	mov	r3, r9
 8009f10:	f7fc fb70 	bl	80065f4 <__aeabi_dmul>
 8009f14:	4b26      	ldr	r3, [pc, #152]	; (8009fb0 <_strtod_l+0x588>)
 8009f16:	460a      	mov	r2, r1
 8009f18:	400b      	ands	r3, r1
 8009f1a:	4929      	ldr	r1, [pc, #164]	; (8009fc0 <_strtod_l+0x598>)
 8009f1c:	4680      	mov	r8, r0
 8009f1e:	428b      	cmp	r3, r1
 8009f20:	d8b9      	bhi.n	8009e96 <_strtod_l+0x46e>
 8009f22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009f26:	428b      	cmp	r3, r1
 8009f28:	bf86      	itte	hi
 8009f2a:	f04f 38ff 	movhi.w	r8, #4294967295
 8009f2e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009fc4 <_strtod_l+0x59c>
 8009f32:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009f36:	2300      	movs	r3, #0
 8009f38:	9305      	str	r3, [sp, #20]
 8009f3a:	e07f      	b.n	800a03c <_strtod_l+0x614>
 8009f3c:	07f2      	lsls	r2, r6, #31
 8009f3e:	d505      	bpl.n	8009f4c <_strtod_l+0x524>
 8009f40:	9b05      	ldr	r3, [sp, #20]
 8009f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f46:	f7fc fb55 	bl	80065f4 <__aeabi_dmul>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	9a05      	ldr	r2, [sp, #20]
 8009f4e:	3701      	adds	r7, #1
 8009f50:	3208      	adds	r2, #8
 8009f52:	1076      	asrs	r6, r6, #1
 8009f54:	9205      	str	r2, [sp, #20]
 8009f56:	e7cd      	b.n	8009ef4 <_strtod_l+0x4cc>
 8009f58:	d0ed      	beq.n	8009f36 <_strtod_l+0x50e>
 8009f5a:	4276      	negs	r6, r6
 8009f5c:	f016 020f 	ands.w	r2, r6, #15
 8009f60:	d00a      	beq.n	8009f78 <_strtod_l+0x550>
 8009f62:	4b15      	ldr	r3, [pc, #84]	; (8009fb8 <_strtod_l+0x590>)
 8009f64:	4640      	mov	r0, r8
 8009f66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f6a:	4649      	mov	r1, r9
 8009f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f70:	f7fc fc6a 	bl	8006848 <__aeabi_ddiv>
 8009f74:	4680      	mov	r8, r0
 8009f76:	4689      	mov	r9, r1
 8009f78:	1136      	asrs	r6, r6, #4
 8009f7a:	d0dc      	beq.n	8009f36 <_strtod_l+0x50e>
 8009f7c:	2e1f      	cmp	r6, #31
 8009f7e:	dd23      	ble.n	8009fc8 <_strtod_l+0x5a0>
 8009f80:	f04f 0b00 	mov.w	fp, #0
 8009f84:	f8cd b010 	str.w	fp, [sp, #16]
 8009f88:	f8cd b020 	str.w	fp, [sp, #32]
 8009f8c:	f8cd b018 	str.w	fp, [sp, #24]
 8009f90:	2322      	movs	r3, #34	; 0x22
 8009f92:	f04f 0800 	mov.w	r8, #0
 8009f96:	f04f 0900 	mov.w	r9, #0
 8009f9a:	f8ca 3000 	str.w	r3, [sl]
 8009f9e:	e789      	b.n	8009eb4 <_strtod_l+0x48c>
 8009fa0:	0801e04d 	.word	0x0801e04d
 8009fa4:	0801e090 	.word	0x0801e090
 8009fa8:	0801e045 	.word	0x0801e045
 8009fac:	0801e1d4 	.word	0x0801e1d4
 8009fb0:	7ff00000 	.word	0x7ff00000
 8009fb4:	0801e4e8 	.word	0x0801e4e8
 8009fb8:	0801e3c8 	.word	0x0801e3c8
 8009fbc:	0801e3a0 	.word	0x0801e3a0
 8009fc0:	7ca00000 	.word	0x7ca00000
 8009fc4:	7fefffff 	.word	0x7fefffff
 8009fc8:	f016 0310 	ands.w	r3, r6, #16
 8009fcc:	bf18      	it	ne
 8009fce:	236a      	movne	r3, #106	; 0x6a
 8009fd0:	4640      	mov	r0, r8
 8009fd2:	9305      	str	r3, [sp, #20]
 8009fd4:	4649      	mov	r1, r9
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	4fb0      	ldr	r7, [pc, #704]	; (800a29c <_strtod_l+0x874>)
 8009fda:	07f2      	lsls	r2, r6, #31
 8009fdc:	d504      	bpl.n	8009fe8 <_strtod_l+0x5c0>
 8009fde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fe2:	f7fc fb07 	bl	80065f4 <__aeabi_dmul>
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	1076      	asrs	r6, r6, #1
 8009fea:	f107 0708 	add.w	r7, r7, #8
 8009fee:	d1f4      	bne.n	8009fda <_strtod_l+0x5b2>
 8009ff0:	b10b      	cbz	r3, 8009ff6 <_strtod_l+0x5ce>
 8009ff2:	4680      	mov	r8, r0
 8009ff4:	4689      	mov	r9, r1
 8009ff6:	9b05      	ldr	r3, [sp, #20]
 8009ff8:	b1c3      	cbz	r3, 800a02c <_strtod_l+0x604>
 8009ffa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009ffe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a002:	2b00      	cmp	r3, #0
 800a004:	4649      	mov	r1, r9
 800a006:	dd11      	ble.n	800a02c <_strtod_l+0x604>
 800a008:	2b1f      	cmp	r3, #31
 800a00a:	f340 8127 	ble.w	800a25c <_strtod_l+0x834>
 800a00e:	2b34      	cmp	r3, #52	; 0x34
 800a010:	bfd8      	it	le
 800a012:	f04f 33ff 	movle.w	r3, #4294967295
 800a016:	f04f 0800 	mov.w	r8, #0
 800a01a:	bfcf      	iteee	gt
 800a01c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a020:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a024:	fa03 f202 	lslle.w	r2, r3, r2
 800a028:	ea02 0901 	andle.w	r9, r2, r1
 800a02c:	2200      	movs	r2, #0
 800a02e:	2300      	movs	r3, #0
 800a030:	4640      	mov	r0, r8
 800a032:	4649      	mov	r1, r9
 800a034:	f7fc fd46 	bl	8006ac4 <__aeabi_dcmpeq>
 800a038:	2800      	cmp	r0, #0
 800a03a:	d1a1      	bne.n	8009f80 <_strtod_l+0x558>
 800a03c:	9b06      	ldr	r3, [sp, #24]
 800a03e:	465a      	mov	r2, fp
 800a040:	9300      	str	r3, [sp, #0]
 800a042:	4650      	mov	r0, sl
 800a044:	4623      	mov	r3, r4
 800a046:	9908      	ldr	r1, [sp, #32]
 800a048:	f001 fe28 	bl	800bc9c <__s2b>
 800a04c:	9008      	str	r0, [sp, #32]
 800a04e:	2800      	cmp	r0, #0
 800a050:	f43f af21 	beq.w	8009e96 <_strtod_l+0x46e>
 800a054:	9b04      	ldr	r3, [sp, #16]
 800a056:	f04f 0b00 	mov.w	fp, #0
 800a05a:	1b5d      	subs	r5, r3, r5
 800a05c:	9b07      	ldr	r3, [sp, #28]
 800a05e:	f8cd b010 	str.w	fp, [sp, #16]
 800a062:	2b00      	cmp	r3, #0
 800a064:	bfb4      	ite	lt
 800a066:	462b      	movlt	r3, r5
 800a068:	2300      	movge	r3, #0
 800a06a:	930e      	str	r3, [sp, #56]	; 0x38
 800a06c:	9b07      	ldr	r3, [sp, #28]
 800a06e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a072:	9314      	str	r3, [sp, #80]	; 0x50
 800a074:	9b08      	ldr	r3, [sp, #32]
 800a076:	4650      	mov	r0, sl
 800a078:	6859      	ldr	r1, [r3, #4]
 800a07a:	f001 fd67 	bl	800bb4c <_Balloc>
 800a07e:	9006      	str	r0, [sp, #24]
 800a080:	2800      	cmp	r0, #0
 800a082:	f43f af10 	beq.w	8009ea6 <_strtod_l+0x47e>
 800a086:	9b08      	ldr	r3, [sp, #32]
 800a088:	300c      	adds	r0, #12
 800a08a:	691a      	ldr	r2, [r3, #16]
 800a08c:	f103 010c 	add.w	r1, r3, #12
 800a090:	3202      	adds	r2, #2
 800a092:	0092      	lsls	r2, r2, #2
 800a094:	f001 fd4c 	bl	800bb30 <memcpy>
 800a098:	ab1c      	add	r3, sp, #112	; 0x70
 800a09a:	9301      	str	r3, [sp, #4]
 800a09c:	ab1b      	add	r3, sp, #108	; 0x6c
 800a09e:	9300      	str	r3, [sp, #0]
 800a0a0:	4642      	mov	r2, r8
 800a0a2:	464b      	mov	r3, r9
 800a0a4:	4650      	mov	r0, sl
 800a0a6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800a0aa:	f002 f939 	bl	800c320 <__d2b>
 800a0ae:	901a      	str	r0, [sp, #104]	; 0x68
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	f43f aef8 	beq.w	8009ea6 <_strtod_l+0x47e>
 800a0b6:	2101      	movs	r1, #1
 800a0b8:	4650      	mov	r0, sl
 800a0ba:	f001 fe87 	bl	800bdcc <__i2b>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	9004      	str	r0, [sp, #16]
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	f43f aeef 	beq.w	8009ea6 <_strtod_l+0x47e>
 800a0c8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a0ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a0cc:	2d00      	cmp	r5, #0
 800a0ce:	bfab      	itete	ge
 800a0d0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a0d2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800a0d4:	18ee      	addge	r6, r5, r3
 800a0d6:	1b5c      	sublt	r4, r3, r5
 800a0d8:	9b05      	ldr	r3, [sp, #20]
 800a0da:	bfa8      	it	ge
 800a0dc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800a0de:	eba5 0503 	sub.w	r5, r5, r3
 800a0e2:	4415      	add	r5, r2
 800a0e4:	4b6e      	ldr	r3, [pc, #440]	; (800a2a0 <_strtod_l+0x878>)
 800a0e6:	f105 35ff 	add.w	r5, r5, #4294967295
 800a0ea:	bfb8      	it	lt
 800a0ec:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a0ee:	429d      	cmp	r5, r3
 800a0f0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a0f4:	f280 80c4 	bge.w	800a280 <_strtod_l+0x858>
 800a0f8:	1b5b      	subs	r3, r3, r5
 800a0fa:	2b1f      	cmp	r3, #31
 800a0fc:	f04f 0701 	mov.w	r7, #1
 800a100:	eba2 0203 	sub.w	r2, r2, r3
 800a104:	f300 80b1 	bgt.w	800a26a <_strtod_l+0x842>
 800a108:	2500      	movs	r5, #0
 800a10a:	fa07 f303 	lsl.w	r3, r7, r3
 800a10e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a110:	18b7      	adds	r7, r6, r2
 800a112:	9b05      	ldr	r3, [sp, #20]
 800a114:	42be      	cmp	r6, r7
 800a116:	4414      	add	r4, r2
 800a118:	441c      	add	r4, r3
 800a11a:	4633      	mov	r3, r6
 800a11c:	bfa8      	it	ge
 800a11e:	463b      	movge	r3, r7
 800a120:	42a3      	cmp	r3, r4
 800a122:	bfa8      	it	ge
 800a124:	4623      	movge	r3, r4
 800a126:	2b00      	cmp	r3, #0
 800a128:	bfc2      	ittt	gt
 800a12a:	1aff      	subgt	r7, r7, r3
 800a12c:	1ae4      	subgt	r4, r4, r3
 800a12e:	1af6      	subgt	r6, r6, r3
 800a130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a132:	2b00      	cmp	r3, #0
 800a134:	dd17      	ble.n	800a166 <_strtod_l+0x73e>
 800a136:	461a      	mov	r2, r3
 800a138:	4650      	mov	r0, sl
 800a13a:	9904      	ldr	r1, [sp, #16]
 800a13c:	f001 ff04 	bl	800bf48 <__pow5mult>
 800a140:	9004      	str	r0, [sp, #16]
 800a142:	2800      	cmp	r0, #0
 800a144:	f43f aeaf 	beq.w	8009ea6 <_strtod_l+0x47e>
 800a148:	4601      	mov	r1, r0
 800a14a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a14c:	4650      	mov	r0, sl
 800a14e:	f001 fe53 	bl	800bdf8 <__multiply>
 800a152:	9009      	str	r0, [sp, #36]	; 0x24
 800a154:	2800      	cmp	r0, #0
 800a156:	f43f aea6 	beq.w	8009ea6 <_strtod_l+0x47e>
 800a15a:	4650      	mov	r0, sl
 800a15c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a15e:	f001 fd35 	bl	800bbcc <_Bfree>
 800a162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a164:	931a      	str	r3, [sp, #104]	; 0x68
 800a166:	2f00      	cmp	r7, #0
 800a168:	f300 808e 	bgt.w	800a288 <_strtod_l+0x860>
 800a16c:	9b07      	ldr	r3, [sp, #28]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	dd08      	ble.n	800a184 <_strtod_l+0x75c>
 800a172:	4650      	mov	r0, sl
 800a174:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a176:	9906      	ldr	r1, [sp, #24]
 800a178:	f001 fee6 	bl	800bf48 <__pow5mult>
 800a17c:	9006      	str	r0, [sp, #24]
 800a17e:	2800      	cmp	r0, #0
 800a180:	f43f ae91 	beq.w	8009ea6 <_strtod_l+0x47e>
 800a184:	2c00      	cmp	r4, #0
 800a186:	dd08      	ble.n	800a19a <_strtod_l+0x772>
 800a188:	4622      	mov	r2, r4
 800a18a:	4650      	mov	r0, sl
 800a18c:	9906      	ldr	r1, [sp, #24]
 800a18e:	f001 ff35 	bl	800bffc <__lshift>
 800a192:	9006      	str	r0, [sp, #24]
 800a194:	2800      	cmp	r0, #0
 800a196:	f43f ae86 	beq.w	8009ea6 <_strtod_l+0x47e>
 800a19a:	2e00      	cmp	r6, #0
 800a19c:	dd08      	ble.n	800a1b0 <_strtod_l+0x788>
 800a19e:	4632      	mov	r2, r6
 800a1a0:	4650      	mov	r0, sl
 800a1a2:	9904      	ldr	r1, [sp, #16]
 800a1a4:	f001 ff2a 	bl	800bffc <__lshift>
 800a1a8:	9004      	str	r0, [sp, #16]
 800a1aa:	2800      	cmp	r0, #0
 800a1ac:	f43f ae7b 	beq.w	8009ea6 <_strtod_l+0x47e>
 800a1b0:	4650      	mov	r0, sl
 800a1b2:	9a06      	ldr	r2, [sp, #24]
 800a1b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a1b6:	f001 ffad 	bl	800c114 <__mdiff>
 800a1ba:	4683      	mov	fp, r0
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	f43f ae72 	beq.w	8009ea6 <_strtod_l+0x47e>
 800a1c2:	2400      	movs	r4, #0
 800a1c4:	68c3      	ldr	r3, [r0, #12]
 800a1c6:	9904      	ldr	r1, [sp, #16]
 800a1c8:	60c4      	str	r4, [r0, #12]
 800a1ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1cc:	f001 ff86 	bl	800c0dc <__mcmp>
 800a1d0:	42a0      	cmp	r0, r4
 800a1d2:	da6b      	bge.n	800a2ac <_strtod_l+0x884>
 800a1d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1d6:	ea53 0308 	orrs.w	r3, r3, r8
 800a1da:	f040 8091 	bne.w	800a300 <_strtod_l+0x8d8>
 800a1de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f040 808c 	bne.w	800a300 <_strtod_l+0x8d8>
 800a1e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a1ec:	0d1b      	lsrs	r3, r3, #20
 800a1ee:	051b      	lsls	r3, r3, #20
 800a1f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a1f4:	f240 8084 	bls.w	800a300 <_strtod_l+0x8d8>
 800a1f8:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a1fc:	b91b      	cbnz	r3, 800a206 <_strtod_l+0x7de>
 800a1fe:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a202:	2b01      	cmp	r3, #1
 800a204:	dd7c      	ble.n	800a300 <_strtod_l+0x8d8>
 800a206:	4659      	mov	r1, fp
 800a208:	2201      	movs	r2, #1
 800a20a:	4650      	mov	r0, sl
 800a20c:	f001 fef6 	bl	800bffc <__lshift>
 800a210:	9904      	ldr	r1, [sp, #16]
 800a212:	4683      	mov	fp, r0
 800a214:	f001 ff62 	bl	800c0dc <__mcmp>
 800a218:	2800      	cmp	r0, #0
 800a21a:	dd71      	ble.n	800a300 <_strtod_l+0x8d8>
 800a21c:	9905      	ldr	r1, [sp, #20]
 800a21e:	464b      	mov	r3, r9
 800a220:	4a20      	ldr	r2, [pc, #128]	; (800a2a4 <_strtod_l+0x87c>)
 800a222:	2900      	cmp	r1, #0
 800a224:	f000 808c 	beq.w	800a340 <_strtod_l+0x918>
 800a228:	ea02 0109 	and.w	r1, r2, r9
 800a22c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a230:	f300 8086 	bgt.w	800a340 <_strtod_l+0x918>
 800a234:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a238:	f77f aeaa 	ble.w	8009f90 <_strtod_l+0x568>
 800a23c:	4640      	mov	r0, r8
 800a23e:	4649      	mov	r1, r9
 800a240:	4b19      	ldr	r3, [pc, #100]	; (800a2a8 <_strtod_l+0x880>)
 800a242:	2200      	movs	r2, #0
 800a244:	f7fc f9d6 	bl	80065f4 <__aeabi_dmul>
 800a248:	460b      	mov	r3, r1
 800a24a:	4303      	orrs	r3, r0
 800a24c:	bf08      	it	eq
 800a24e:	2322      	moveq	r3, #34	; 0x22
 800a250:	4680      	mov	r8, r0
 800a252:	4689      	mov	r9, r1
 800a254:	bf08      	it	eq
 800a256:	f8ca 3000 	streq.w	r3, [sl]
 800a25a:	e62f      	b.n	8009ebc <_strtod_l+0x494>
 800a25c:	f04f 32ff 	mov.w	r2, #4294967295
 800a260:	fa02 f303 	lsl.w	r3, r2, r3
 800a264:	ea03 0808 	and.w	r8, r3, r8
 800a268:	e6e0      	b.n	800a02c <_strtod_l+0x604>
 800a26a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a26e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a272:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a276:	35e2      	adds	r5, #226	; 0xe2
 800a278:	fa07 f505 	lsl.w	r5, r7, r5
 800a27c:	970f      	str	r7, [sp, #60]	; 0x3c
 800a27e:	e747      	b.n	800a110 <_strtod_l+0x6e8>
 800a280:	2301      	movs	r3, #1
 800a282:	2500      	movs	r5, #0
 800a284:	930f      	str	r3, [sp, #60]	; 0x3c
 800a286:	e743      	b.n	800a110 <_strtod_l+0x6e8>
 800a288:	463a      	mov	r2, r7
 800a28a:	4650      	mov	r0, sl
 800a28c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a28e:	f001 feb5 	bl	800bffc <__lshift>
 800a292:	901a      	str	r0, [sp, #104]	; 0x68
 800a294:	2800      	cmp	r0, #0
 800a296:	f47f af69 	bne.w	800a16c <_strtod_l+0x744>
 800a29a:	e604      	b.n	8009ea6 <_strtod_l+0x47e>
 800a29c:	0801e0a8 	.word	0x0801e0a8
 800a2a0:	fffffc02 	.word	0xfffffc02
 800a2a4:	7ff00000 	.word	0x7ff00000
 800a2a8:	39500000 	.word	0x39500000
 800a2ac:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a2b0:	d165      	bne.n	800a37e <_strtod_l+0x956>
 800a2b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2b8:	b35a      	cbz	r2, 800a312 <_strtod_l+0x8ea>
 800a2ba:	4a99      	ldr	r2, [pc, #612]	; (800a520 <_strtod_l+0xaf8>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d12b      	bne.n	800a318 <_strtod_l+0x8f0>
 800a2c0:	9b05      	ldr	r3, [sp, #20]
 800a2c2:	4641      	mov	r1, r8
 800a2c4:	b303      	cbz	r3, 800a308 <_strtod_l+0x8e0>
 800a2c6:	464a      	mov	r2, r9
 800a2c8:	4b96      	ldr	r3, [pc, #600]	; (800a524 <_strtod_l+0xafc>)
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d4:	d81b      	bhi.n	800a30e <_strtod_l+0x8e6>
 800a2d6:	0d1b      	lsrs	r3, r3, #20
 800a2d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e0:	4299      	cmp	r1, r3
 800a2e2:	d119      	bne.n	800a318 <_strtod_l+0x8f0>
 800a2e4:	4b90      	ldr	r3, [pc, #576]	; (800a528 <_strtod_l+0xb00>)
 800a2e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d102      	bne.n	800a2f2 <_strtod_l+0x8ca>
 800a2ec:	3101      	adds	r1, #1
 800a2ee:	f43f adda 	beq.w	8009ea6 <_strtod_l+0x47e>
 800a2f2:	f04f 0800 	mov.w	r8, #0
 800a2f6:	4b8b      	ldr	r3, [pc, #556]	; (800a524 <_strtod_l+0xafc>)
 800a2f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2fa:	401a      	ands	r2, r3
 800a2fc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a300:	9b05      	ldr	r3, [sp, #20]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d19a      	bne.n	800a23c <_strtod_l+0x814>
 800a306:	e5d9      	b.n	8009ebc <_strtod_l+0x494>
 800a308:	f04f 33ff 	mov.w	r3, #4294967295
 800a30c:	e7e8      	b.n	800a2e0 <_strtod_l+0x8b8>
 800a30e:	4613      	mov	r3, r2
 800a310:	e7e6      	b.n	800a2e0 <_strtod_l+0x8b8>
 800a312:	ea53 0308 	orrs.w	r3, r3, r8
 800a316:	d081      	beq.n	800a21c <_strtod_l+0x7f4>
 800a318:	b1e5      	cbz	r5, 800a354 <_strtod_l+0x92c>
 800a31a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a31c:	421d      	tst	r5, r3
 800a31e:	d0ef      	beq.n	800a300 <_strtod_l+0x8d8>
 800a320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a322:	4640      	mov	r0, r8
 800a324:	4649      	mov	r1, r9
 800a326:	9a05      	ldr	r2, [sp, #20]
 800a328:	b1c3      	cbz	r3, 800a35c <_strtod_l+0x934>
 800a32a:	f7ff fb5b 	bl	80099e4 <sulp>
 800a32e:	4602      	mov	r2, r0
 800a330:	460b      	mov	r3, r1
 800a332:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a336:	f7fb ffa7 	bl	8006288 <__adddf3>
 800a33a:	4680      	mov	r8, r0
 800a33c:	4689      	mov	r9, r1
 800a33e:	e7df      	b.n	800a300 <_strtod_l+0x8d8>
 800a340:	4013      	ands	r3, r2
 800a342:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a346:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a34a:	f04f 38ff 	mov.w	r8, #4294967295
 800a34e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a352:	e7d5      	b.n	800a300 <_strtod_l+0x8d8>
 800a354:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a356:	ea13 0f08 	tst.w	r3, r8
 800a35a:	e7e0      	b.n	800a31e <_strtod_l+0x8f6>
 800a35c:	f7ff fb42 	bl	80099e4 <sulp>
 800a360:	4602      	mov	r2, r0
 800a362:	460b      	mov	r3, r1
 800a364:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a368:	f7fb ff8c 	bl	8006284 <__aeabi_dsub>
 800a36c:	2200      	movs	r2, #0
 800a36e:	2300      	movs	r3, #0
 800a370:	4680      	mov	r8, r0
 800a372:	4689      	mov	r9, r1
 800a374:	f7fc fba6 	bl	8006ac4 <__aeabi_dcmpeq>
 800a378:	2800      	cmp	r0, #0
 800a37a:	d0c1      	beq.n	800a300 <_strtod_l+0x8d8>
 800a37c:	e608      	b.n	8009f90 <_strtod_l+0x568>
 800a37e:	4658      	mov	r0, fp
 800a380:	9904      	ldr	r1, [sp, #16]
 800a382:	f002 f829 	bl	800c3d8 <__ratio>
 800a386:	2200      	movs	r2, #0
 800a388:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a38c:	4606      	mov	r6, r0
 800a38e:	460f      	mov	r7, r1
 800a390:	f7fc fbac 	bl	8006aec <__aeabi_dcmple>
 800a394:	2800      	cmp	r0, #0
 800a396:	d070      	beq.n	800a47a <_strtod_l+0xa52>
 800a398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d042      	beq.n	800a424 <_strtod_l+0x9fc>
 800a39e:	2600      	movs	r6, #0
 800a3a0:	4f62      	ldr	r7, [pc, #392]	; (800a52c <_strtod_l+0xb04>)
 800a3a2:	4d62      	ldr	r5, [pc, #392]	; (800a52c <_strtod_l+0xb04>)
 800a3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3aa:	0d1b      	lsrs	r3, r3, #20
 800a3ac:	051b      	lsls	r3, r3, #20
 800a3ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a3b2:	4b5f      	ldr	r3, [pc, #380]	; (800a530 <_strtod_l+0xb08>)
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	f040 80c3 	bne.w	800a540 <_strtod_l+0xb18>
 800a3ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3bc:	4640      	mov	r0, r8
 800a3be:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a3c2:	4649      	mov	r1, r9
 800a3c4:	f001 ff32 	bl	800c22c <__ulp>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	4639      	mov	r1, r7
 800a3d0:	f7fc f910 	bl	80065f4 <__aeabi_dmul>
 800a3d4:	4642      	mov	r2, r8
 800a3d6:	464b      	mov	r3, r9
 800a3d8:	f7fb ff56 	bl	8006288 <__adddf3>
 800a3dc:	460b      	mov	r3, r1
 800a3de:	4951      	ldr	r1, [pc, #324]	; (800a524 <_strtod_l+0xafc>)
 800a3e0:	4a54      	ldr	r2, [pc, #336]	; (800a534 <_strtod_l+0xb0c>)
 800a3e2:	4019      	ands	r1, r3
 800a3e4:	4291      	cmp	r1, r2
 800a3e6:	4680      	mov	r8, r0
 800a3e8:	d95d      	bls.n	800a4a6 <_strtod_l+0xa7e>
 800a3ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3ec:	4b4e      	ldr	r3, [pc, #312]	; (800a528 <_strtod_l+0xb00>)
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d103      	bne.n	800a3fa <_strtod_l+0x9d2>
 800a3f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	f43f ad56 	beq.w	8009ea6 <_strtod_l+0x47e>
 800a3fa:	f04f 38ff 	mov.w	r8, #4294967295
 800a3fe:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a528 <_strtod_l+0xb00>
 800a402:	4650      	mov	r0, sl
 800a404:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a406:	f001 fbe1 	bl	800bbcc <_Bfree>
 800a40a:	4650      	mov	r0, sl
 800a40c:	9906      	ldr	r1, [sp, #24]
 800a40e:	f001 fbdd 	bl	800bbcc <_Bfree>
 800a412:	4650      	mov	r0, sl
 800a414:	9904      	ldr	r1, [sp, #16]
 800a416:	f001 fbd9 	bl	800bbcc <_Bfree>
 800a41a:	4659      	mov	r1, fp
 800a41c:	4650      	mov	r0, sl
 800a41e:	f001 fbd5 	bl	800bbcc <_Bfree>
 800a422:	e627      	b.n	800a074 <_strtod_l+0x64c>
 800a424:	f1b8 0f00 	cmp.w	r8, #0
 800a428:	d119      	bne.n	800a45e <_strtod_l+0xa36>
 800a42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a42c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a430:	b9e3      	cbnz	r3, 800a46c <_strtod_l+0xa44>
 800a432:	2200      	movs	r2, #0
 800a434:	4630      	mov	r0, r6
 800a436:	4639      	mov	r1, r7
 800a438:	4b3c      	ldr	r3, [pc, #240]	; (800a52c <_strtod_l+0xb04>)
 800a43a:	f7fc fb4d 	bl	8006ad8 <__aeabi_dcmplt>
 800a43e:	b9c8      	cbnz	r0, 800a474 <_strtod_l+0xa4c>
 800a440:	2200      	movs	r2, #0
 800a442:	4630      	mov	r0, r6
 800a444:	4639      	mov	r1, r7
 800a446:	4b3c      	ldr	r3, [pc, #240]	; (800a538 <_strtod_l+0xb10>)
 800a448:	f7fc f8d4 	bl	80065f4 <__aeabi_dmul>
 800a44c:	4604      	mov	r4, r0
 800a44e:	460d      	mov	r5, r1
 800a450:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a454:	9416      	str	r4, [sp, #88]	; 0x58
 800a456:	9317      	str	r3, [sp, #92]	; 0x5c
 800a458:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800a45c:	e7a2      	b.n	800a3a4 <_strtod_l+0x97c>
 800a45e:	f1b8 0f01 	cmp.w	r8, #1
 800a462:	d103      	bne.n	800a46c <_strtod_l+0xa44>
 800a464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a466:	2b00      	cmp	r3, #0
 800a468:	f43f ad92 	beq.w	8009f90 <_strtod_l+0x568>
 800a46c:	2600      	movs	r6, #0
 800a46e:	2400      	movs	r4, #0
 800a470:	4f32      	ldr	r7, [pc, #200]	; (800a53c <_strtod_l+0xb14>)
 800a472:	e796      	b.n	800a3a2 <_strtod_l+0x97a>
 800a474:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a476:	4d30      	ldr	r5, [pc, #192]	; (800a538 <_strtod_l+0xb10>)
 800a478:	e7ea      	b.n	800a450 <_strtod_l+0xa28>
 800a47a:	4b2f      	ldr	r3, [pc, #188]	; (800a538 <_strtod_l+0xb10>)
 800a47c:	2200      	movs	r2, #0
 800a47e:	4630      	mov	r0, r6
 800a480:	4639      	mov	r1, r7
 800a482:	f7fc f8b7 	bl	80065f4 <__aeabi_dmul>
 800a486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a488:	4604      	mov	r4, r0
 800a48a:	460d      	mov	r5, r1
 800a48c:	b933      	cbnz	r3, 800a49c <_strtod_l+0xa74>
 800a48e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a492:	9010      	str	r0, [sp, #64]	; 0x40
 800a494:	9311      	str	r3, [sp, #68]	; 0x44
 800a496:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a49a:	e783      	b.n	800a3a4 <_strtod_l+0x97c>
 800a49c:	4602      	mov	r2, r0
 800a49e:	460b      	mov	r3, r1
 800a4a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a4a4:	e7f7      	b.n	800a496 <_strtod_l+0xa6e>
 800a4a6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a4aa:	9b05      	ldr	r3, [sp, #20]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1a8      	bne.n	800a402 <_strtod_l+0x9da>
 800a4b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a4b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4b6:	0d1b      	lsrs	r3, r3, #20
 800a4b8:	051b      	lsls	r3, r3, #20
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d1a1      	bne.n	800a402 <_strtod_l+0x9da>
 800a4be:	4620      	mov	r0, r4
 800a4c0:	4629      	mov	r1, r5
 800a4c2:	f7fc fbdf 	bl	8006c84 <__aeabi_d2lz>
 800a4c6:	f7fc f867 	bl	8006598 <__aeabi_l2d>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	4629      	mov	r1, r5
 800a4d2:	f7fb fed7 	bl	8006284 <__aeabi_dsub>
 800a4d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4dc:	ea43 0308 	orr.w	r3, r3, r8
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	4604      	mov	r4, r0
 800a4e4:	460d      	mov	r5, r1
 800a4e6:	d066      	beq.n	800a5b6 <_strtod_l+0xb8e>
 800a4e8:	a309      	add	r3, pc, #36	; (adr r3, 800a510 <_strtod_l+0xae8>)
 800a4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ee:	f7fc faf3 	bl	8006ad8 <__aeabi_dcmplt>
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	f47f ace2 	bne.w	8009ebc <_strtod_l+0x494>
 800a4f8:	a307      	add	r3, pc, #28	; (adr r3, 800a518 <_strtod_l+0xaf0>)
 800a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fe:	4620      	mov	r0, r4
 800a500:	4629      	mov	r1, r5
 800a502:	f7fc fb07 	bl	8006b14 <__aeabi_dcmpgt>
 800a506:	2800      	cmp	r0, #0
 800a508:	f43f af7b 	beq.w	800a402 <_strtod_l+0x9da>
 800a50c:	e4d6      	b.n	8009ebc <_strtod_l+0x494>
 800a50e:	bf00      	nop
 800a510:	94a03595 	.word	0x94a03595
 800a514:	3fdfffff 	.word	0x3fdfffff
 800a518:	35afe535 	.word	0x35afe535
 800a51c:	3fe00000 	.word	0x3fe00000
 800a520:	000fffff 	.word	0x000fffff
 800a524:	7ff00000 	.word	0x7ff00000
 800a528:	7fefffff 	.word	0x7fefffff
 800a52c:	3ff00000 	.word	0x3ff00000
 800a530:	7fe00000 	.word	0x7fe00000
 800a534:	7c9fffff 	.word	0x7c9fffff
 800a538:	3fe00000 	.word	0x3fe00000
 800a53c:	bff00000 	.word	0xbff00000
 800a540:	9b05      	ldr	r3, [sp, #20]
 800a542:	b313      	cbz	r3, 800a58a <_strtod_l+0xb62>
 800a544:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a546:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a54a:	d81e      	bhi.n	800a58a <_strtod_l+0xb62>
 800a54c:	a326      	add	r3, pc, #152	; (adr r3, 800a5e8 <_strtod_l+0xbc0>)
 800a54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a552:	4620      	mov	r0, r4
 800a554:	4629      	mov	r1, r5
 800a556:	f7fc fac9 	bl	8006aec <__aeabi_dcmple>
 800a55a:	b190      	cbz	r0, 800a582 <_strtod_l+0xb5a>
 800a55c:	4629      	mov	r1, r5
 800a55e:	4620      	mov	r0, r4
 800a560:	f7fc fb20 	bl	8006ba4 <__aeabi_d2uiz>
 800a564:	2801      	cmp	r0, #1
 800a566:	bf38      	it	cc
 800a568:	2001      	movcc	r0, #1
 800a56a:	f7fb ffc9 	bl	8006500 <__aeabi_ui2d>
 800a56e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a570:	4604      	mov	r4, r0
 800a572:	460d      	mov	r5, r1
 800a574:	b9d3      	cbnz	r3, 800a5ac <_strtod_l+0xb84>
 800a576:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a57a:	9012      	str	r0, [sp, #72]	; 0x48
 800a57c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a57e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a582:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a584:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a588:	1a9f      	subs	r7, r3, r2
 800a58a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a58e:	f001 fe4d 	bl	800c22c <__ulp>
 800a592:	4602      	mov	r2, r0
 800a594:	460b      	mov	r3, r1
 800a596:	4630      	mov	r0, r6
 800a598:	4639      	mov	r1, r7
 800a59a:	f7fc f82b 	bl	80065f4 <__aeabi_dmul>
 800a59e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a5a2:	f7fb fe71 	bl	8006288 <__adddf3>
 800a5a6:	4680      	mov	r8, r0
 800a5a8:	4689      	mov	r9, r1
 800a5aa:	e77e      	b.n	800a4aa <_strtod_l+0xa82>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a5b4:	e7e3      	b.n	800a57e <_strtod_l+0xb56>
 800a5b6:	a30e      	add	r3, pc, #56	; (adr r3, 800a5f0 <_strtod_l+0xbc8>)
 800a5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5bc:	f7fc fa8c 	bl	8006ad8 <__aeabi_dcmplt>
 800a5c0:	e7a1      	b.n	800a506 <_strtod_l+0xade>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	930a      	str	r3, [sp, #40]	; 0x28
 800a5c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a5c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a5ca:	6013      	str	r3, [r2, #0]
 800a5cc:	f7ff ba71 	b.w	8009ab2 <_strtod_l+0x8a>
 800a5d0:	2a65      	cmp	r2, #101	; 0x65
 800a5d2:	f43f ab63 	beq.w	8009c9c <_strtod_l+0x274>
 800a5d6:	2a45      	cmp	r2, #69	; 0x45
 800a5d8:	f43f ab60 	beq.w	8009c9c <_strtod_l+0x274>
 800a5dc:	2301      	movs	r3, #1
 800a5de:	f7ff bb95 	b.w	8009d0c <_strtod_l+0x2e4>
 800a5e2:	bf00      	nop
 800a5e4:	f3af 8000 	nop.w
 800a5e8:	ffc00000 	.word	0xffc00000
 800a5ec:	41dfffff 	.word	0x41dfffff
 800a5f0:	94a03595 	.word	0x94a03595
 800a5f4:	3fcfffff 	.word	0x3fcfffff

0800a5f8 <_strtod_r>:
 800a5f8:	4b01      	ldr	r3, [pc, #4]	; (800a600 <_strtod_r+0x8>)
 800a5fa:	f7ff ba15 	b.w	8009a28 <_strtod_l>
 800a5fe:	bf00      	nop
 800a600:	20000074 	.word	0x20000074

0800a604 <_strtol_l.constprop.0>:
 800a604:	2b01      	cmp	r3, #1
 800a606:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a60a:	4680      	mov	r8, r0
 800a60c:	d001      	beq.n	800a612 <_strtol_l.constprop.0+0xe>
 800a60e:	2b24      	cmp	r3, #36	; 0x24
 800a610:	d906      	bls.n	800a620 <_strtol_l.constprop.0+0x1c>
 800a612:	f7fe fb23 	bl	8008c5c <__errno>
 800a616:	2316      	movs	r3, #22
 800a618:	6003      	str	r3, [r0, #0]
 800a61a:	2000      	movs	r0, #0
 800a61c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a620:	460d      	mov	r5, r1
 800a622:	4f35      	ldr	r7, [pc, #212]	; (800a6f8 <_strtol_l.constprop.0+0xf4>)
 800a624:	4628      	mov	r0, r5
 800a626:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a62a:	5de6      	ldrb	r6, [r4, r7]
 800a62c:	f016 0608 	ands.w	r6, r6, #8
 800a630:	d1f8      	bne.n	800a624 <_strtol_l.constprop.0+0x20>
 800a632:	2c2d      	cmp	r4, #45	; 0x2d
 800a634:	d12f      	bne.n	800a696 <_strtol_l.constprop.0+0x92>
 800a636:	2601      	movs	r6, #1
 800a638:	782c      	ldrb	r4, [r5, #0]
 800a63a:	1c85      	adds	r5, r0, #2
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d057      	beq.n	800a6f0 <_strtol_l.constprop.0+0xec>
 800a640:	2b10      	cmp	r3, #16
 800a642:	d109      	bne.n	800a658 <_strtol_l.constprop.0+0x54>
 800a644:	2c30      	cmp	r4, #48	; 0x30
 800a646:	d107      	bne.n	800a658 <_strtol_l.constprop.0+0x54>
 800a648:	7828      	ldrb	r0, [r5, #0]
 800a64a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a64e:	2858      	cmp	r0, #88	; 0x58
 800a650:	d149      	bne.n	800a6e6 <_strtol_l.constprop.0+0xe2>
 800a652:	2310      	movs	r3, #16
 800a654:	786c      	ldrb	r4, [r5, #1]
 800a656:	3502      	adds	r5, #2
 800a658:	2700      	movs	r7, #0
 800a65a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a65e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a662:	fbbe f9f3 	udiv	r9, lr, r3
 800a666:	4638      	mov	r0, r7
 800a668:	fb03 ea19 	mls	sl, r3, r9, lr
 800a66c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a670:	f1bc 0f09 	cmp.w	ip, #9
 800a674:	d814      	bhi.n	800a6a0 <_strtol_l.constprop.0+0x9c>
 800a676:	4664      	mov	r4, ip
 800a678:	42a3      	cmp	r3, r4
 800a67a:	dd22      	ble.n	800a6c2 <_strtol_l.constprop.0+0xbe>
 800a67c:	2f00      	cmp	r7, #0
 800a67e:	db1d      	blt.n	800a6bc <_strtol_l.constprop.0+0xb8>
 800a680:	4581      	cmp	r9, r0
 800a682:	d31b      	bcc.n	800a6bc <_strtol_l.constprop.0+0xb8>
 800a684:	d101      	bne.n	800a68a <_strtol_l.constprop.0+0x86>
 800a686:	45a2      	cmp	sl, r4
 800a688:	db18      	blt.n	800a6bc <_strtol_l.constprop.0+0xb8>
 800a68a:	2701      	movs	r7, #1
 800a68c:	fb00 4003 	mla	r0, r0, r3, r4
 800a690:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a694:	e7ea      	b.n	800a66c <_strtol_l.constprop.0+0x68>
 800a696:	2c2b      	cmp	r4, #43	; 0x2b
 800a698:	bf04      	itt	eq
 800a69a:	782c      	ldrbeq	r4, [r5, #0]
 800a69c:	1c85      	addeq	r5, r0, #2
 800a69e:	e7cd      	b.n	800a63c <_strtol_l.constprop.0+0x38>
 800a6a0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a6a4:	f1bc 0f19 	cmp.w	ip, #25
 800a6a8:	d801      	bhi.n	800a6ae <_strtol_l.constprop.0+0xaa>
 800a6aa:	3c37      	subs	r4, #55	; 0x37
 800a6ac:	e7e4      	b.n	800a678 <_strtol_l.constprop.0+0x74>
 800a6ae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a6b2:	f1bc 0f19 	cmp.w	ip, #25
 800a6b6:	d804      	bhi.n	800a6c2 <_strtol_l.constprop.0+0xbe>
 800a6b8:	3c57      	subs	r4, #87	; 0x57
 800a6ba:	e7dd      	b.n	800a678 <_strtol_l.constprop.0+0x74>
 800a6bc:	f04f 37ff 	mov.w	r7, #4294967295
 800a6c0:	e7e6      	b.n	800a690 <_strtol_l.constprop.0+0x8c>
 800a6c2:	2f00      	cmp	r7, #0
 800a6c4:	da07      	bge.n	800a6d6 <_strtol_l.constprop.0+0xd2>
 800a6c6:	2322      	movs	r3, #34	; 0x22
 800a6c8:	4670      	mov	r0, lr
 800a6ca:	f8c8 3000 	str.w	r3, [r8]
 800a6ce:	2a00      	cmp	r2, #0
 800a6d0:	d0a4      	beq.n	800a61c <_strtol_l.constprop.0+0x18>
 800a6d2:	1e69      	subs	r1, r5, #1
 800a6d4:	e005      	b.n	800a6e2 <_strtol_l.constprop.0+0xde>
 800a6d6:	b106      	cbz	r6, 800a6da <_strtol_l.constprop.0+0xd6>
 800a6d8:	4240      	negs	r0, r0
 800a6da:	2a00      	cmp	r2, #0
 800a6dc:	d09e      	beq.n	800a61c <_strtol_l.constprop.0+0x18>
 800a6de:	2f00      	cmp	r7, #0
 800a6e0:	d1f7      	bne.n	800a6d2 <_strtol_l.constprop.0+0xce>
 800a6e2:	6011      	str	r1, [r2, #0]
 800a6e4:	e79a      	b.n	800a61c <_strtol_l.constprop.0+0x18>
 800a6e6:	2430      	movs	r4, #48	; 0x30
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d1b5      	bne.n	800a658 <_strtol_l.constprop.0+0x54>
 800a6ec:	2308      	movs	r3, #8
 800a6ee:	e7b3      	b.n	800a658 <_strtol_l.constprop.0+0x54>
 800a6f0:	2c30      	cmp	r4, #48	; 0x30
 800a6f2:	d0a9      	beq.n	800a648 <_strtol_l.constprop.0+0x44>
 800a6f4:	230a      	movs	r3, #10
 800a6f6:	e7af      	b.n	800a658 <_strtol_l.constprop.0+0x54>
 800a6f8:	0801e0d1 	.word	0x0801e0d1

0800a6fc <_strtol_r>:
 800a6fc:	f7ff bf82 	b.w	800a604 <_strtol_l.constprop.0>

0800a700 <strtol>:
 800a700:	4613      	mov	r3, r2
 800a702:	460a      	mov	r2, r1
 800a704:	4601      	mov	r1, r0
 800a706:	4802      	ldr	r0, [pc, #8]	; (800a710 <strtol+0x10>)
 800a708:	6800      	ldr	r0, [r0, #0]
 800a70a:	f7ff bf7b 	b.w	800a604 <_strtol_l.constprop.0>
 800a70e:	bf00      	nop
 800a710:	2000000c 	.word	0x2000000c

0800a714 <quorem>:
 800a714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a718:	6903      	ldr	r3, [r0, #16]
 800a71a:	690c      	ldr	r4, [r1, #16]
 800a71c:	4607      	mov	r7, r0
 800a71e:	42a3      	cmp	r3, r4
 800a720:	f2c0 8082 	blt.w	800a828 <quorem+0x114>
 800a724:	3c01      	subs	r4, #1
 800a726:	f100 0514 	add.w	r5, r0, #20
 800a72a:	f101 0814 	add.w	r8, r1, #20
 800a72e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a732:	9301      	str	r3, [sp, #4]
 800a734:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a738:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a73c:	3301      	adds	r3, #1
 800a73e:	429a      	cmp	r2, r3
 800a740:	fbb2 f6f3 	udiv	r6, r2, r3
 800a744:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a748:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a74c:	d331      	bcc.n	800a7b2 <quorem+0x9e>
 800a74e:	f04f 0e00 	mov.w	lr, #0
 800a752:	4640      	mov	r0, r8
 800a754:	46ac      	mov	ip, r5
 800a756:	46f2      	mov	sl, lr
 800a758:	f850 2b04 	ldr.w	r2, [r0], #4
 800a75c:	b293      	uxth	r3, r2
 800a75e:	fb06 e303 	mla	r3, r6, r3, lr
 800a762:	0c12      	lsrs	r2, r2, #16
 800a764:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a768:	b29b      	uxth	r3, r3
 800a76a:	fb06 e202 	mla	r2, r6, r2, lr
 800a76e:	ebaa 0303 	sub.w	r3, sl, r3
 800a772:	f8dc a000 	ldr.w	sl, [ip]
 800a776:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a77a:	fa1f fa8a 	uxth.w	sl, sl
 800a77e:	4453      	add	r3, sl
 800a780:	f8dc a000 	ldr.w	sl, [ip]
 800a784:	b292      	uxth	r2, r2
 800a786:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a78a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a78e:	b29b      	uxth	r3, r3
 800a790:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a794:	4581      	cmp	r9, r0
 800a796:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a79a:	f84c 3b04 	str.w	r3, [ip], #4
 800a79e:	d2db      	bcs.n	800a758 <quorem+0x44>
 800a7a0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a7a4:	b92b      	cbnz	r3, 800a7b2 <quorem+0x9e>
 800a7a6:	9b01      	ldr	r3, [sp, #4]
 800a7a8:	3b04      	subs	r3, #4
 800a7aa:	429d      	cmp	r5, r3
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	d32f      	bcc.n	800a810 <quorem+0xfc>
 800a7b0:	613c      	str	r4, [r7, #16]
 800a7b2:	4638      	mov	r0, r7
 800a7b4:	f001 fc92 	bl	800c0dc <__mcmp>
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	db25      	blt.n	800a808 <quorem+0xf4>
 800a7bc:	4628      	mov	r0, r5
 800a7be:	f04f 0c00 	mov.w	ip, #0
 800a7c2:	3601      	adds	r6, #1
 800a7c4:	f858 1b04 	ldr.w	r1, [r8], #4
 800a7c8:	f8d0 e000 	ldr.w	lr, [r0]
 800a7cc:	b28b      	uxth	r3, r1
 800a7ce:	ebac 0303 	sub.w	r3, ip, r3
 800a7d2:	fa1f f28e 	uxth.w	r2, lr
 800a7d6:	4413      	add	r3, r2
 800a7d8:	0c0a      	lsrs	r2, r1, #16
 800a7da:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a7de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7e8:	45c1      	cmp	r9, r8
 800a7ea:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a7ee:	f840 3b04 	str.w	r3, [r0], #4
 800a7f2:	d2e7      	bcs.n	800a7c4 <quorem+0xb0>
 800a7f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7fc:	b922      	cbnz	r2, 800a808 <quorem+0xf4>
 800a7fe:	3b04      	subs	r3, #4
 800a800:	429d      	cmp	r5, r3
 800a802:	461a      	mov	r2, r3
 800a804:	d30a      	bcc.n	800a81c <quorem+0x108>
 800a806:	613c      	str	r4, [r7, #16]
 800a808:	4630      	mov	r0, r6
 800a80a:	b003      	add	sp, #12
 800a80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a810:	6812      	ldr	r2, [r2, #0]
 800a812:	3b04      	subs	r3, #4
 800a814:	2a00      	cmp	r2, #0
 800a816:	d1cb      	bne.n	800a7b0 <quorem+0x9c>
 800a818:	3c01      	subs	r4, #1
 800a81a:	e7c6      	b.n	800a7aa <quorem+0x96>
 800a81c:	6812      	ldr	r2, [r2, #0]
 800a81e:	3b04      	subs	r3, #4
 800a820:	2a00      	cmp	r2, #0
 800a822:	d1f0      	bne.n	800a806 <quorem+0xf2>
 800a824:	3c01      	subs	r4, #1
 800a826:	e7eb      	b.n	800a800 <quorem+0xec>
 800a828:	2000      	movs	r0, #0
 800a82a:	e7ee      	b.n	800a80a <quorem+0xf6>
 800a82c:	0000      	movs	r0, r0
	...

0800a830 <_dtoa_r>:
 800a830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a834:	4616      	mov	r6, r2
 800a836:	461f      	mov	r7, r3
 800a838:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a83a:	b099      	sub	sp, #100	; 0x64
 800a83c:	4605      	mov	r5, r0
 800a83e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a842:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a846:	b974      	cbnz	r4, 800a866 <_dtoa_r+0x36>
 800a848:	2010      	movs	r0, #16
 800a84a:	f001 f949 	bl	800bae0 <malloc>
 800a84e:	4602      	mov	r2, r0
 800a850:	6268      	str	r0, [r5, #36]	; 0x24
 800a852:	b920      	cbnz	r0, 800a85e <_dtoa_r+0x2e>
 800a854:	21ea      	movs	r1, #234	; 0xea
 800a856:	4ba8      	ldr	r3, [pc, #672]	; (800aaf8 <_dtoa_r+0x2c8>)
 800a858:	48a8      	ldr	r0, [pc, #672]	; (800aafc <_dtoa_r+0x2cc>)
 800a85a:	f002 f8b3 	bl	800c9c4 <__assert_func>
 800a85e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a862:	6004      	str	r4, [r0, #0]
 800a864:	60c4      	str	r4, [r0, #12]
 800a866:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a868:	6819      	ldr	r1, [r3, #0]
 800a86a:	b151      	cbz	r1, 800a882 <_dtoa_r+0x52>
 800a86c:	685a      	ldr	r2, [r3, #4]
 800a86e:	2301      	movs	r3, #1
 800a870:	4093      	lsls	r3, r2
 800a872:	604a      	str	r2, [r1, #4]
 800a874:	608b      	str	r3, [r1, #8]
 800a876:	4628      	mov	r0, r5
 800a878:	f001 f9a8 	bl	800bbcc <_Bfree>
 800a87c:	2200      	movs	r2, #0
 800a87e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a880:	601a      	str	r2, [r3, #0]
 800a882:	1e3b      	subs	r3, r7, #0
 800a884:	bfaf      	iteee	ge
 800a886:	2300      	movge	r3, #0
 800a888:	2201      	movlt	r2, #1
 800a88a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a88e:	9305      	strlt	r3, [sp, #20]
 800a890:	bfa8      	it	ge
 800a892:	f8c8 3000 	strge.w	r3, [r8]
 800a896:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a89a:	4b99      	ldr	r3, [pc, #612]	; (800ab00 <_dtoa_r+0x2d0>)
 800a89c:	bfb8      	it	lt
 800a89e:	f8c8 2000 	strlt.w	r2, [r8]
 800a8a2:	ea33 0309 	bics.w	r3, r3, r9
 800a8a6:	d119      	bne.n	800a8dc <_dtoa_r+0xac>
 800a8a8:	f242 730f 	movw	r3, #9999	; 0x270f
 800a8ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a8ae:	6013      	str	r3, [r2, #0]
 800a8b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8b4:	4333      	orrs	r3, r6
 800a8b6:	f000 857f 	beq.w	800b3b8 <_dtoa_r+0xb88>
 800a8ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a8bc:	b953      	cbnz	r3, 800a8d4 <_dtoa_r+0xa4>
 800a8be:	4b91      	ldr	r3, [pc, #580]	; (800ab04 <_dtoa_r+0x2d4>)
 800a8c0:	e022      	b.n	800a908 <_dtoa_r+0xd8>
 800a8c2:	4b91      	ldr	r3, [pc, #580]	; (800ab08 <_dtoa_r+0x2d8>)
 800a8c4:	9303      	str	r3, [sp, #12]
 800a8c6:	3308      	adds	r3, #8
 800a8c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a8ca:	6013      	str	r3, [r2, #0]
 800a8cc:	9803      	ldr	r0, [sp, #12]
 800a8ce:	b019      	add	sp, #100	; 0x64
 800a8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d4:	4b8b      	ldr	r3, [pc, #556]	; (800ab04 <_dtoa_r+0x2d4>)
 800a8d6:	9303      	str	r3, [sp, #12]
 800a8d8:	3303      	adds	r3, #3
 800a8da:	e7f5      	b.n	800a8c8 <_dtoa_r+0x98>
 800a8dc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a8e0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a8e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	f7fc f8ea 	bl	8006ac4 <__aeabi_dcmpeq>
 800a8f0:	4680      	mov	r8, r0
 800a8f2:	b158      	cbz	r0, 800a90c <_dtoa_r+0xdc>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a8f8:	6013      	str	r3, [r2, #0]
 800a8fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f000 8558 	beq.w	800b3b2 <_dtoa_r+0xb82>
 800a902:	4882      	ldr	r0, [pc, #520]	; (800ab0c <_dtoa_r+0x2dc>)
 800a904:	6018      	str	r0, [r3, #0]
 800a906:	1e43      	subs	r3, r0, #1
 800a908:	9303      	str	r3, [sp, #12]
 800a90a:	e7df      	b.n	800a8cc <_dtoa_r+0x9c>
 800a90c:	ab16      	add	r3, sp, #88	; 0x58
 800a90e:	9301      	str	r3, [sp, #4]
 800a910:	ab17      	add	r3, sp, #92	; 0x5c
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	4628      	mov	r0, r5
 800a916:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a91a:	f001 fd01 	bl	800c320 <__d2b>
 800a91e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a922:	4683      	mov	fp, r0
 800a924:	2c00      	cmp	r4, #0
 800a926:	d07f      	beq.n	800aa28 <_dtoa_r+0x1f8>
 800a928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a92c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a92e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a932:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a936:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a93a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a93e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a942:	2200      	movs	r2, #0
 800a944:	4b72      	ldr	r3, [pc, #456]	; (800ab10 <_dtoa_r+0x2e0>)
 800a946:	f7fb fc9d 	bl	8006284 <__aeabi_dsub>
 800a94a:	a365      	add	r3, pc, #404	; (adr r3, 800aae0 <_dtoa_r+0x2b0>)
 800a94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a950:	f7fb fe50 	bl	80065f4 <__aeabi_dmul>
 800a954:	a364      	add	r3, pc, #400	; (adr r3, 800aae8 <_dtoa_r+0x2b8>)
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	f7fb fc95 	bl	8006288 <__adddf3>
 800a95e:	4606      	mov	r6, r0
 800a960:	4620      	mov	r0, r4
 800a962:	460f      	mov	r7, r1
 800a964:	f7fb fddc 	bl	8006520 <__aeabi_i2d>
 800a968:	a361      	add	r3, pc, #388	; (adr r3, 800aaf0 <_dtoa_r+0x2c0>)
 800a96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96e:	f7fb fe41 	bl	80065f4 <__aeabi_dmul>
 800a972:	4602      	mov	r2, r0
 800a974:	460b      	mov	r3, r1
 800a976:	4630      	mov	r0, r6
 800a978:	4639      	mov	r1, r7
 800a97a:	f7fb fc85 	bl	8006288 <__adddf3>
 800a97e:	4606      	mov	r6, r0
 800a980:	460f      	mov	r7, r1
 800a982:	f7fc f8e7 	bl	8006b54 <__aeabi_d2iz>
 800a986:	2200      	movs	r2, #0
 800a988:	4682      	mov	sl, r0
 800a98a:	2300      	movs	r3, #0
 800a98c:	4630      	mov	r0, r6
 800a98e:	4639      	mov	r1, r7
 800a990:	f7fc f8a2 	bl	8006ad8 <__aeabi_dcmplt>
 800a994:	b148      	cbz	r0, 800a9aa <_dtoa_r+0x17a>
 800a996:	4650      	mov	r0, sl
 800a998:	f7fb fdc2 	bl	8006520 <__aeabi_i2d>
 800a99c:	4632      	mov	r2, r6
 800a99e:	463b      	mov	r3, r7
 800a9a0:	f7fc f890 	bl	8006ac4 <__aeabi_dcmpeq>
 800a9a4:	b908      	cbnz	r0, 800a9aa <_dtoa_r+0x17a>
 800a9a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9aa:	f1ba 0f16 	cmp.w	sl, #22
 800a9ae:	d858      	bhi.n	800aa62 <_dtoa_r+0x232>
 800a9b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9b4:	4b57      	ldr	r3, [pc, #348]	; (800ab14 <_dtoa_r+0x2e4>)
 800a9b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9be:	f7fc f88b 	bl	8006ad8 <__aeabi_dcmplt>
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	d04f      	beq.n	800aa66 <_dtoa_r+0x236>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a9d0:	1b1c      	subs	r4, r3, r4
 800a9d2:	1e63      	subs	r3, r4, #1
 800a9d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9d6:	bf49      	itett	mi
 800a9d8:	f1c4 0301 	rsbmi	r3, r4, #1
 800a9dc:	2300      	movpl	r3, #0
 800a9de:	9306      	strmi	r3, [sp, #24]
 800a9e0:	2300      	movmi	r3, #0
 800a9e2:	bf54      	ite	pl
 800a9e4:	9306      	strpl	r3, [sp, #24]
 800a9e6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a9e8:	f1ba 0f00 	cmp.w	sl, #0
 800a9ec:	db3d      	blt.n	800aa6a <_dtoa_r+0x23a>
 800a9ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9f0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a9f4:	4453      	add	r3, sl
 800a9f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	930a      	str	r3, [sp, #40]	; 0x28
 800a9fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9fe:	2b09      	cmp	r3, #9
 800aa00:	f200 808c 	bhi.w	800ab1c <_dtoa_r+0x2ec>
 800aa04:	2b05      	cmp	r3, #5
 800aa06:	bfc4      	itt	gt
 800aa08:	3b04      	subgt	r3, #4
 800aa0a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800aa0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa0e:	bfc8      	it	gt
 800aa10:	2400      	movgt	r4, #0
 800aa12:	f1a3 0302 	sub.w	r3, r3, #2
 800aa16:	bfd8      	it	le
 800aa18:	2401      	movle	r4, #1
 800aa1a:	2b03      	cmp	r3, #3
 800aa1c:	f200 808a 	bhi.w	800ab34 <_dtoa_r+0x304>
 800aa20:	e8df f003 	tbb	[pc, r3]
 800aa24:	5b4d4f2d 	.word	0x5b4d4f2d
 800aa28:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800aa2c:	441c      	add	r4, r3
 800aa2e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800aa32:	2b20      	cmp	r3, #32
 800aa34:	bfc3      	ittte	gt
 800aa36:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aa3a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800aa3e:	fa09 f303 	lslgt.w	r3, r9, r3
 800aa42:	f1c3 0320 	rsble	r3, r3, #32
 800aa46:	bfc6      	itte	gt
 800aa48:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aa4c:	4318      	orrgt	r0, r3
 800aa4e:	fa06 f003 	lslle.w	r0, r6, r3
 800aa52:	f7fb fd55 	bl	8006500 <__aeabi_ui2d>
 800aa56:	2301      	movs	r3, #1
 800aa58:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800aa5c:	3c01      	subs	r4, #1
 800aa5e:	9313      	str	r3, [sp, #76]	; 0x4c
 800aa60:	e76f      	b.n	800a942 <_dtoa_r+0x112>
 800aa62:	2301      	movs	r3, #1
 800aa64:	e7b2      	b.n	800a9cc <_dtoa_r+0x19c>
 800aa66:	900f      	str	r0, [sp, #60]	; 0x3c
 800aa68:	e7b1      	b.n	800a9ce <_dtoa_r+0x19e>
 800aa6a:	9b06      	ldr	r3, [sp, #24]
 800aa6c:	eba3 030a 	sub.w	r3, r3, sl
 800aa70:	9306      	str	r3, [sp, #24]
 800aa72:	f1ca 0300 	rsb	r3, sl, #0
 800aa76:	930a      	str	r3, [sp, #40]	; 0x28
 800aa78:	2300      	movs	r3, #0
 800aa7a:	930e      	str	r3, [sp, #56]	; 0x38
 800aa7c:	e7be      	b.n	800a9fc <_dtoa_r+0x1cc>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	dc58      	bgt.n	800ab3a <_dtoa_r+0x30a>
 800aa88:	f04f 0901 	mov.w	r9, #1
 800aa8c:	464b      	mov	r3, r9
 800aa8e:	f8cd 9020 	str.w	r9, [sp, #32]
 800aa92:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800aa96:	2200      	movs	r2, #0
 800aa98:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800aa9a:	6042      	str	r2, [r0, #4]
 800aa9c:	2204      	movs	r2, #4
 800aa9e:	f102 0614 	add.w	r6, r2, #20
 800aaa2:	429e      	cmp	r6, r3
 800aaa4:	6841      	ldr	r1, [r0, #4]
 800aaa6:	d94e      	bls.n	800ab46 <_dtoa_r+0x316>
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	f001 f84f 	bl	800bb4c <_Balloc>
 800aaae:	9003      	str	r0, [sp, #12]
 800aab0:	2800      	cmp	r0, #0
 800aab2:	d14c      	bne.n	800ab4e <_dtoa_r+0x31e>
 800aab4:	4602      	mov	r2, r0
 800aab6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aaba:	4b17      	ldr	r3, [pc, #92]	; (800ab18 <_dtoa_r+0x2e8>)
 800aabc:	e6cc      	b.n	800a858 <_dtoa_r+0x28>
 800aabe:	2301      	movs	r3, #1
 800aac0:	e7de      	b.n	800aa80 <_dtoa_r+0x250>
 800aac2:	2300      	movs	r3, #0
 800aac4:	930b      	str	r3, [sp, #44]	; 0x2c
 800aac6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aac8:	eb0a 0903 	add.w	r9, sl, r3
 800aacc:	f109 0301 	add.w	r3, r9, #1
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	9308      	str	r3, [sp, #32]
 800aad4:	bfb8      	it	lt
 800aad6:	2301      	movlt	r3, #1
 800aad8:	e7dd      	b.n	800aa96 <_dtoa_r+0x266>
 800aada:	2301      	movs	r3, #1
 800aadc:	e7f2      	b.n	800aac4 <_dtoa_r+0x294>
 800aade:	bf00      	nop
 800aae0:	636f4361 	.word	0x636f4361
 800aae4:	3fd287a7 	.word	0x3fd287a7
 800aae8:	8b60c8b3 	.word	0x8b60c8b3
 800aaec:	3fc68a28 	.word	0x3fc68a28
 800aaf0:	509f79fb 	.word	0x509f79fb
 800aaf4:	3fd34413 	.word	0x3fd34413
 800aaf8:	0801e1de 	.word	0x0801e1de
 800aafc:	0801e1f5 	.word	0x0801e1f5
 800ab00:	7ff00000 	.word	0x7ff00000
 800ab04:	0801e1da 	.word	0x0801e1da
 800ab08:	0801e1d1 	.word	0x0801e1d1
 800ab0c:	0801e051 	.word	0x0801e051
 800ab10:	3ff80000 	.word	0x3ff80000
 800ab14:	0801e3c8 	.word	0x0801e3c8
 800ab18:	0801e273 	.word	0x0801e273
 800ab1c:	2401      	movs	r4, #1
 800ab1e:	2300      	movs	r3, #0
 800ab20:	940b      	str	r4, [sp, #44]	; 0x2c
 800ab22:	9322      	str	r3, [sp, #136]	; 0x88
 800ab24:	f04f 39ff 	mov.w	r9, #4294967295
 800ab28:	2200      	movs	r2, #0
 800ab2a:	2312      	movs	r3, #18
 800ab2c:	f8cd 9020 	str.w	r9, [sp, #32]
 800ab30:	9223      	str	r2, [sp, #140]	; 0x8c
 800ab32:	e7b0      	b.n	800aa96 <_dtoa_r+0x266>
 800ab34:	2301      	movs	r3, #1
 800ab36:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab38:	e7f4      	b.n	800ab24 <_dtoa_r+0x2f4>
 800ab3a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800ab3e:	464b      	mov	r3, r9
 800ab40:	f8cd 9020 	str.w	r9, [sp, #32]
 800ab44:	e7a7      	b.n	800aa96 <_dtoa_r+0x266>
 800ab46:	3101      	adds	r1, #1
 800ab48:	6041      	str	r1, [r0, #4]
 800ab4a:	0052      	lsls	r2, r2, #1
 800ab4c:	e7a7      	b.n	800aa9e <_dtoa_r+0x26e>
 800ab4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab50:	9a03      	ldr	r2, [sp, #12]
 800ab52:	601a      	str	r2, [r3, #0]
 800ab54:	9b08      	ldr	r3, [sp, #32]
 800ab56:	2b0e      	cmp	r3, #14
 800ab58:	f200 80a8 	bhi.w	800acac <_dtoa_r+0x47c>
 800ab5c:	2c00      	cmp	r4, #0
 800ab5e:	f000 80a5 	beq.w	800acac <_dtoa_r+0x47c>
 800ab62:	f1ba 0f00 	cmp.w	sl, #0
 800ab66:	dd34      	ble.n	800abd2 <_dtoa_r+0x3a2>
 800ab68:	4a9a      	ldr	r2, [pc, #616]	; (800add4 <_dtoa_r+0x5a4>)
 800ab6a:	f00a 030f 	and.w	r3, sl, #15
 800ab6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ab72:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ab76:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab7a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ab7e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800ab82:	d016      	beq.n	800abb2 <_dtoa_r+0x382>
 800ab84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ab88:	4b93      	ldr	r3, [pc, #588]	; (800add8 <_dtoa_r+0x5a8>)
 800ab8a:	2703      	movs	r7, #3
 800ab8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab90:	f7fb fe5a 	bl	8006848 <__aeabi_ddiv>
 800ab94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab98:	f004 040f 	and.w	r4, r4, #15
 800ab9c:	4e8e      	ldr	r6, [pc, #568]	; (800add8 <_dtoa_r+0x5a8>)
 800ab9e:	b954      	cbnz	r4, 800abb6 <_dtoa_r+0x386>
 800aba0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aba4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aba8:	f7fb fe4e 	bl	8006848 <__aeabi_ddiv>
 800abac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abb0:	e029      	b.n	800ac06 <_dtoa_r+0x3d6>
 800abb2:	2702      	movs	r7, #2
 800abb4:	e7f2      	b.n	800ab9c <_dtoa_r+0x36c>
 800abb6:	07e1      	lsls	r1, r4, #31
 800abb8:	d508      	bpl.n	800abcc <_dtoa_r+0x39c>
 800abba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800abbe:	e9d6 2300 	ldrd	r2, r3, [r6]
 800abc2:	f7fb fd17 	bl	80065f4 <__aeabi_dmul>
 800abc6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800abca:	3701      	adds	r7, #1
 800abcc:	1064      	asrs	r4, r4, #1
 800abce:	3608      	adds	r6, #8
 800abd0:	e7e5      	b.n	800ab9e <_dtoa_r+0x36e>
 800abd2:	f000 80a5 	beq.w	800ad20 <_dtoa_r+0x4f0>
 800abd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800abda:	f1ca 0400 	rsb	r4, sl, #0
 800abde:	4b7d      	ldr	r3, [pc, #500]	; (800add4 <_dtoa_r+0x5a4>)
 800abe0:	f004 020f 	and.w	r2, r4, #15
 800abe4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abec:	f7fb fd02 	bl	80065f4 <__aeabi_dmul>
 800abf0:	2702      	movs	r7, #2
 800abf2:	2300      	movs	r3, #0
 800abf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abf8:	4e77      	ldr	r6, [pc, #476]	; (800add8 <_dtoa_r+0x5a8>)
 800abfa:	1124      	asrs	r4, r4, #4
 800abfc:	2c00      	cmp	r4, #0
 800abfe:	f040 8084 	bne.w	800ad0a <_dtoa_r+0x4da>
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d1d2      	bne.n	800abac <_dtoa_r+0x37c>
 800ac06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f000 808b 	beq.w	800ad24 <_dtoa_r+0x4f4>
 800ac0e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ac12:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ac16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	4b6f      	ldr	r3, [pc, #444]	; (800addc <_dtoa_r+0x5ac>)
 800ac1e:	f7fb ff5b 	bl	8006ad8 <__aeabi_dcmplt>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	d07e      	beq.n	800ad24 <_dtoa_r+0x4f4>
 800ac26:	9b08      	ldr	r3, [sp, #32]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d07b      	beq.n	800ad24 <_dtoa_r+0x4f4>
 800ac2c:	f1b9 0f00 	cmp.w	r9, #0
 800ac30:	dd38      	ble.n	800aca4 <_dtoa_r+0x474>
 800ac32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac36:	2200      	movs	r2, #0
 800ac38:	4b69      	ldr	r3, [pc, #420]	; (800ade0 <_dtoa_r+0x5b0>)
 800ac3a:	f7fb fcdb 	bl	80065f4 <__aeabi_dmul>
 800ac3e:	464c      	mov	r4, r9
 800ac40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac44:	f10a 38ff 	add.w	r8, sl, #4294967295
 800ac48:	3701      	adds	r7, #1
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	f7fb fc68 	bl	8006520 <__aeabi_i2d>
 800ac50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac54:	f7fb fcce 	bl	80065f4 <__aeabi_dmul>
 800ac58:	2200      	movs	r2, #0
 800ac5a:	4b62      	ldr	r3, [pc, #392]	; (800ade4 <_dtoa_r+0x5b4>)
 800ac5c:	f7fb fb14 	bl	8006288 <__adddf3>
 800ac60:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ac64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ac68:	9611      	str	r6, [sp, #68]	; 0x44
 800ac6a:	2c00      	cmp	r4, #0
 800ac6c:	d15d      	bne.n	800ad2a <_dtoa_r+0x4fa>
 800ac6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac72:	2200      	movs	r2, #0
 800ac74:	4b5c      	ldr	r3, [pc, #368]	; (800ade8 <_dtoa_r+0x5b8>)
 800ac76:	f7fb fb05 	bl	8006284 <__aeabi_dsub>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac82:	4633      	mov	r3, r6
 800ac84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ac86:	f7fb ff45 	bl	8006b14 <__aeabi_dcmpgt>
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	f040 829c 	bne.w	800b1c8 <_dtoa_r+0x998>
 800ac90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ac96:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ac9a:	f7fb ff1d 	bl	8006ad8 <__aeabi_dcmplt>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	f040 8290 	bne.w	800b1c4 <_dtoa_r+0x994>
 800aca4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800aca8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800acac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f2c0 8152 	blt.w	800af58 <_dtoa_r+0x728>
 800acb4:	f1ba 0f0e 	cmp.w	sl, #14
 800acb8:	f300 814e 	bgt.w	800af58 <_dtoa_r+0x728>
 800acbc:	4b45      	ldr	r3, [pc, #276]	; (800add4 <_dtoa_r+0x5a4>)
 800acbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800acc2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800acc6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800acca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800accc:	2b00      	cmp	r3, #0
 800acce:	f280 80db 	bge.w	800ae88 <_dtoa_r+0x658>
 800acd2:	9b08      	ldr	r3, [sp, #32]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f300 80d7 	bgt.w	800ae88 <_dtoa_r+0x658>
 800acda:	f040 8272 	bne.w	800b1c2 <_dtoa_r+0x992>
 800acde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ace2:	2200      	movs	r2, #0
 800ace4:	4b40      	ldr	r3, [pc, #256]	; (800ade8 <_dtoa_r+0x5b8>)
 800ace6:	f7fb fc85 	bl	80065f4 <__aeabi_dmul>
 800acea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acee:	f7fb ff07 	bl	8006b00 <__aeabi_dcmpge>
 800acf2:	9c08      	ldr	r4, [sp, #32]
 800acf4:	4626      	mov	r6, r4
 800acf6:	2800      	cmp	r0, #0
 800acf8:	f040 8248 	bne.w	800b18c <_dtoa_r+0x95c>
 800acfc:	2331      	movs	r3, #49	; 0x31
 800acfe:	9f03      	ldr	r7, [sp, #12]
 800ad00:	f10a 0a01 	add.w	sl, sl, #1
 800ad04:	f807 3b01 	strb.w	r3, [r7], #1
 800ad08:	e244      	b.n	800b194 <_dtoa_r+0x964>
 800ad0a:	07e2      	lsls	r2, r4, #31
 800ad0c:	d505      	bpl.n	800ad1a <_dtoa_r+0x4ea>
 800ad0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad12:	f7fb fc6f 	bl	80065f4 <__aeabi_dmul>
 800ad16:	2301      	movs	r3, #1
 800ad18:	3701      	adds	r7, #1
 800ad1a:	1064      	asrs	r4, r4, #1
 800ad1c:	3608      	adds	r6, #8
 800ad1e:	e76d      	b.n	800abfc <_dtoa_r+0x3cc>
 800ad20:	2702      	movs	r7, #2
 800ad22:	e770      	b.n	800ac06 <_dtoa_r+0x3d6>
 800ad24:	46d0      	mov	r8, sl
 800ad26:	9c08      	ldr	r4, [sp, #32]
 800ad28:	e78f      	b.n	800ac4a <_dtoa_r+0x41a>
 800ad2a:	9903      	ldr	r1, [sp, #12]
 800ad2c:	4b29      	ldr	r3, [pc, #164]	; (800add4 <_dtoa_r+0x5a4>)
 800ad2e:	4421      	add	r1, r4
 800ad30:	9112      	str	r1, [sp, #72]	; 0x48
 800ad32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad38:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ad3c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad40:	2900      	cmp	r1, #0
 800ad42:	d055      	beq.n	800adf0 <_dtoa_r+0x5c0>
 800ad44:	2000      	movs	r0, #0
 800ad46:	4929      	ldr	r1, [pc, #164]	; (800adec <_dtoa_r+0x5bc>)
 800ad48:	f7fb fd7e 	bl	8006848 <__aeabi_ddiv>
 800ad4c:	463b      	mov	r3, r7
 800ad4e:	4632      	mov	r2, r6
 800ad50:	f7fb fa98 	bl	8006284 <__aeabi_dsub>
 800ad54:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ad58:	9f03      	ldr	r7, [sp, #12]
 800ad5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad5e:	f7fb fef9 	bl	8006b54 <__aeabi_d2iz>
 800ad62:	4604      	mov	r4, r0
 800ad64:	f7fb fbdc 	bl	8006520 <__aeabi_i2d>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad70:	f7fb fa88 	bl	8006284 <__aeabi_dsub>
 800ad74:	4602      	mov	r2, r0
 800ad76:	460b      	mov	r3, r1
 800ad78:	3430      	adds	r4, #48	; 0x30
 800ad7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ad7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad82:	f807 4b01 	strb.w	r4, [r7], #1
 800ad86:	f7fb fea7 	bl	8006ad8 <__aeabi_dcmplt>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	d174      	bne.n	800ae78 <_dtoa_r+0x648>
 800ad8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad92:	2000      	movs	r0, #0
 800ad94:	4911      	ldr	r1, [pc, #68]	; (800addc <_dtoa_r+0x5ac>)
 800ad96:	f7fb fa75 	bl	8006284 <__aeabi_dsub>
 800ad9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad9e:	f7fb fe9b 	bl	8006ad8 <__aeabi_dcmplt>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	f040 80b7 	bne.w	800af16 <_dtoa_r+0x6e6>
 800ada8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800adaa:	429f      	cmp	r7, r3
 800adac:	f43f af7a 	beq.w	800aca4 <_dtoa_r+0x474>
 800adb0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800adb4:	2200      	movs	r2, #0
 800adb6:	4b0a      	ldr	r3, [pc, #40]	; (800ade0 <_dtoa_r+0x5b0>)
 800adb8:	f7fb fc1c 	bl	80065f4 <__aeabi_dmul>
 800adbc:	2200      	movs	r2, #0
 800adbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800adc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800adc6:	4b06      	ldr	r3, [pc, #24]	; (800ade0 <_dtoa_r+0x5b0>)
 800adc8:	f7fb fc14 	bl	80065f4 <__aeabi_dmul>
 800adcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800add0:	e7c3      	b.n	800ad5a <_dtoa_r+0x52a>
 800add2:	bf00      	nop
 800add4:	0801e3c8 	.word	0x0801e3c8
 800add8:	0801e3a0 	.word	0x0801e3a0
 800addc:	3ff00000 	.word	0x3ff00000
 800ade0:	40240000 	.word	0x40240000
 800ade4:	401c0000 	.word	0x401c0000
 800ade8:	40140000 	.word	0x40140000
 800adec:	3fe00000 	.word	0x3fe00000
 800adf0:	4630      	mov	r0, r6
 800adf2:	4639      	mov	r1, r7
 800adf4:	f7fb fbfe 	bl	80065f4 <__aeabi_dmul>
 800adf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800adfa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800adfe:	9c03      	ldr	r4, [sp, #12]
 800ae00:	9314      	str	r3, [sp, #80]	; 0x50
 800ae02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae06:	f7fb fea5 	bl	8006b54 <__aeabi_d2iz>
 800ae0a:	9015      	str	r0, [sp, #84]	; 0x54
 800ae0c:	f7fb fb88 	bl	8006520 <__aeabi_i2d>
 800ae10:	4602      	mov	r2, r0
 800ae12:	460b      	mov	r3, r1
 800ae14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae18:	f7fb fa34 	bl	8006284 <__aeabi_dsub>
 800ae1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae1e:	4606      	mov	r6, r0
 800ae20:	3330      	adds	r3, #48	; 0x30
 800ae22:	f804 3b01 	strb.w	r3, [r4], #1
 800ae26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae28:	460f      	mov	r7, r1
 800ae2a:	429c      	cmp	r4, r3
 800ae2c:	f04f 0200 	mov.w	r2, #0
 800ae30:	d124      	bne.n	800ae7c <_dtoa_r+0x64c>
 800ae32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ae36:	4bb0      	ldr	r3, [pc, #704]	; (800b0f8 <_dtoa_r+0x8c8>)
 800ae38:	f7fb fa26 	bl	8006288 <__adddf3>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	460b      	mov	r3, r1
 800ae40:	4630      	mov	r0, r6
 800ae42:	4639      	mov	r1, r7
 800ae44:	f7fb fe66 	bl	8006b14 <__aeabi_dcmpgt>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d163      	bne.n	800af14 <_dtoa_r+0x6e4>
 800ae4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ae50:	2000      	movs	r0, #0
 800ae52:	49a9      	ldr	r1, [pc, #676]	; (800b0f8 <_dtoa_r+0x8c8>)
 800ae54:	f7fb fa16 	bl	8006284 <__aeabi_dsub>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	4639      	mov	r1, r7
 800ae60:	f7fb fe3a 	bl	8006ad8 <__aeabi_dcmplt>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	f43f af1d 	beq.w	800aca4 <_dtoa_r+0x474>
 800ae6a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ae6c:	1e7b      	subs	r3, r7, #1
 800ae6e:	9314      	str	r3, [sp, #80]	; 0x50
 800ae70:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800ae74:	2b30      	cmp	r3, #48	; 0x30
 800ae76:	d0f8      	beq.n	800ae6a <_dtoa_r+0x63a>
 800ae78:	46c2      	mov	sl, r8
 800ae7a:	e03b      	b.n	800aef4 <_dtoa_r+0x6c4>
 800ae7c:	4b9f      	ldr	r3, [pc, #636]	; (800b0fc <_dtoa_r+0x8cc>)
 800ae7e:	f7fb fbb9 	bl	80065f4 <__aeabi_dmul>
 800ae82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae86:	e7bc      	b.n	800ae02 <_dtoa_r+0x5d2>
 800ae88:	9f03      	ldr	r7, [sp, #12]
 800ae8a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ae8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae92:	4640      	mov	r0, r8
 800ae94:	4649      	mov	r1, r9
 800ae96:	f7fb fcd7 	bl	8006848 <__aeabi_ddiv>
 800ae9a:	f7fb fe5b 	bl	8006b54 <__aeabi_d2iz>
 800ae9e:	4604      	mov	r4, r0
 800aea0:	f7fb fb3e 	bl	8006520 <__aeabi_i2d>
 800aea4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aea8:	f7fb fba4 	bl	80065f4 <__aeabi_dmul>
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	4640      	mov	r0, r8
 800aeb2:	4649      	mov	r1, r9
 800aeb4:	f7fb f9e6 	bl	8006284 <__aeabi_dsub>
 800aeb8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800aebc:	f807 6b01 	strb.w	r6, [r7], #1
 800aec0:	9e03      	ldr	r6, [sp, #12]
 800aec2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800aec6:	1bbe      	subs	r6, r7, r6
 800aec8:	45b4      	cmp	ip, r6
 800aeca:	4602      	mov	r2, r0
 800aecc:	460b      	mov	r3, r1
 800aece:	d136      	bne.n	800af3e <_dtoa_r+0x70e>
 800aed0:	f7fb f9da 	bl	8006288 <__adddf3>
 800aed4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aed8:	4680      	mov	r8, r0
 800aeda:	4689      	mov	r9, r1
 800aedc:	f7fb fe1a 	bl	8006b14 <__aeabi_dcmpgt>
 800aee0:	bb58      	cbnz	r0, 800af3a <_dtoa_r+0x70a>
 800aee2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aee6:	4640      	mov	r0, r8
 800aee8:	4649      	mov	r1, r9
 800aeea:	f7fb fdeb 	bl	8006ac4 <__aeabi_dcmpeq>
 800aeee:	b108      	cbz	r0, 800aef4 <_dtoa_r+0x6c4>
 800aef0:	07e1      	lsls	r1, r4, #31
 800aef2:	d422      	bmi.n	800af3a <_dtoa_r+0x70a>
 800aef4:	4628      	mov	r0, r5
 800aef6:	4659      	mov	r1, fp
 800aef8:	f000 fe68 	bl	800bbcc <_Bfree>
 800aefc:	2300      	movs	r3, #0
 800aefe:	703b      	strb	r3, [r7, #0]
 800af00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800af02:	f10a 0001 	add.w	r0, sl, #1
 800af06:	6018      	str	r0, [r3, #0]
 800af08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	f43f acde 	beq.w	800a8cc <_dtoa_r+0x9c>
 800af10:	601f      	str	r7, [r3, #0]
 800af12:	e4db      	b.n	800a8cc <_dtoa_r+0x9c>
 800af14:	4627      	mov	r7, r4
 800af16:	463b      	mov	r3, r7
 800af18:	461f      	mov	r7, r3
 800af1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af1e:	2a39      	cmp	r2, #57	; 0x39
 800af20:	d107      	bne.n	800af32 <_dtoa_r+0x702>
 800af22:	9a03      	ldr	r2, [sp, #12]
 800af24:	429a      	cmp	r2, r3
 800af26:	d1f7      	bne.n	800af18 <_dtoa_r+0x6e8>
 800af28:	2230      	movs	r2, #48	; 0x30
 800af2a:	9903      	ldr	r1, [sp, #12]
 800af2c:	f108 0801 	add.w	r8, r8, #1
 800af30:	700a      	strb	r2, [r1, #0]
 800af32:	781a      	ldrb	r2, [r3, #0]
 800af34:	3201      	adds	r2, #1
 800af36:	701a      	strb	r2, [r3, #0]
 800af38:	e79e      	b.n	800ae78 <_dtoa_r+0x648>
 800af3a:	46d0      	mov	r8, sl
 800af3c:	e7eb      	b.n	800af16 <_dtoa_r+0x6e6>
 800af3e:	2200      	movs	r2, #0
 800af40:	4b6e      	ldr	r3, [pc, #440]	; (800b0fc <_dtoa_r+0x8cc>)
 800af42:	f7fb fb57 	bl	80065f4 <__aeabi_dmul>
 800af46:	2200      	movs	r2, #0
 800af48:	2300      	movs	r3, #0
 800af4a:	4680      	mov	r8, r0
 800af4c:	4689      	mov	r9, r1
 800af4e:	f7fb fdb9 	bl	8006ac4 <__aeabi_dcmpeq>
 800af52:	2800      	cmp	r0, #0
 800af54:	d09b      	beq.n	800ae8e <_dtoa_r+0x65e>
 800af56:	e7cd      	b.n	800aef4 <_dtoa_r+0x6c4>
 800af58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af5a:	2a00      	cmp	r2, #0
 800af5c:	f000 80d0 	beq.w	800b100 <_dtoa_r+0x8d0>
 800af60:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800af62:	2a01      	cmp	r2, #1
 800af64:	f300 80ae 	bgt.w	800b0c4 <_dtoa_r+0x894>
 800af68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800af6a:	2a00      	cmp	r2, #0
 800af6c:	f000 80a6 	beq.w	800b0bc <_dtoa_r+0x88c>
 800af70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800af74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800af76:	9f06      	ldr	r7, [sp, #24]
 800af78:	9a06      	ldr	r2, [sp, #24]
 800af7a:	2101      	movs	r1, #1
 800af7c:	441a      	add	r2, r3
 800af7e:	9206      	str	r2, [sp, #24]
 800af80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af82:	4628      	mov	r0, r5
 800af84:	441a      	add	r2, r3
 800af86:	9209      	str	r2, [sp, #36]	; 0x24
 800af88:	f000 ff20 	bl	800bdcc <__i2b>
 800af8c:	4606      	mov	r6, r0
 800af8e:	2f00      	cmp	r7, #0
 800af90:	dd0c      	ble.n	800afac <_dtoa_r+0x77c>
 800af92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af94:	2b00      	cmp	r3, #0
 800af96:	dd09      	ble.n	800afac <_dtoa_r+0x77c>
 800af98:	42bb      	cmp	r3, r7
 800af9a:	bfa8      	it	ge
 800af9c:	463b      	movge	r3, r7
 800af9e:	9a06      	ldr	r2, [sp, #24]
 800afa0:	1aff      	subs	r7, r7, r3
 800afa2:	1ad2      	subs	r2, r2, r3
 800afa4:	9206      	str	r2, [sp, #24]
 800afa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afa8:	1ad3      	subs	r3, r2, r3
 800afaa:	9309      	str	r3, [sp, #36]	; 0x24
 800afac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afae:	b1f3      	cbz	r3, 800afee <_dtoa_r+0x7be>
 800afb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	f000 80a8 	beq.w	800b108 <_dtoa_r+0x8d8>
 800afb8:	2c00      	cmp	r4, #0
 800afba:	dd10      	ble.n	800afde <_dtoa_r+0x7ae>
 800afbc:	4631      	mov	r1, r6
 800afbe:	4622      	mov	r2, r4
 800afc0:	4628      	mov	r0, r5
 800afc2:	f000 ffc1 	bl	800bf48 <__pow5mult>
 800afc6:	465a      	mov	r2, fp
 800afc8:	4601      	mov	r1, r0
 800afca:	4606      	mov	r6, r0
 800afcc:	4628      	mov	r0, r5
 800afce:	f000 ff13 	bl	800bdf8 <__multiply>
 800afd2:	4680      	mov	r8, r0
 800afd4:	4659      	mov	r1, fp
 800afd6:	4628      	mov	r0, r5
 800afd8:	f000 fdf8 	bl	800bbcc <_Bfree>
 800afdc:	46c3      	mov	fp, r8
 800afde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afe0:	1b1a      	subs	r2, r3, r4
 800afe2:	d004      	beq.n	800afee <_dtoa_r+0x7be>
 800afe4:	4659      	mov	r1, fp
 800afe6:	4628      	mov	r0, r5
 800afe8:	f000 ffae 	bl	800bf48 <__pow5mult>
 800afec:	4683      	mov	fp, r0
 800afee:	2101      	movs	r1, #1
 800aff0:	4628      	mov	r0, r5
 800aff2:	f000 feeb 	bl	800bdcc <__i2b>
 800aff6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aff8:	4604      	mov	r4, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	f340 8086 	ble.w	800b10c <_dtoa_r+0x8dc>
 800b000:	461a      	mov	r2, r3
 800b002:	4601      	mov	r1, r0
 800b004:	4628      	mov	r0, r5
 800b006:	f000 ff9f 	bl	800bf48 <__pow5mult>
 800b00a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b00c:	4604      	mov	r4, r0
 800b00e:	2b01      	cmp	r3, #1
 800b010:	dd7f      	ble.n	800b112 <_dtoa_r+0x8e2>
 800b012:	f04f 0800 	mov.w	r8, #0
 800b016:	6923      	ldr	r3, [r4, #16]
 800b018:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b01c:	6918      	ldr	r0, [r3, #16]
 800b01e:	f000 fe87 	bl	800bd30 <__hi0bits>
 800b022:	f1c0 0020 	rsb	r0, r0, #32
 800b026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b028:	4418      	add	r0, r3
 800b02a:	f010 001f 	ands.w	r0, r0, #31
 800b02e:	f000 8092 	beq.w	800b156 <_dtoa_r+0x926>
 800b032:	f1c0 0320 	rsb	r3, r0, #32
 800b036:	2b04      	cmp	r3, #4
 800b038:	f340 808a 	ble.w	800b150 <_dtoa_r+0x920>
 800b03c:	f1c0 001c 	rsb	r0, r0, #28
 800b040:	9b06      	ldr	r3, [sp, #24]
 800b042:	4407      	add	r7, r0
 800b044:	4403      	add	r3, r0
 800b046:	9306      	str	r3, [sp, #24]
 800b048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b04a:	4403      	add	r3, r0
 800b04c:	9309      	str	r3, [sp, #36]	; 0x24
 800b04e:	9b06      	ldr	r3, [sp, #24]
 800b050:	2b00      	cmp	r3, #0
 800b052:	dd05      	ble.n	800b060 <_dtoa_r+0x830>
 800b054:	4659      	mov	r1, fp
 800b056:	461a      	mov	r2, r3
 800b058:	4628      	mov	r0, r5
 800b05a:	f000 ffcf 	bl	800bffc <__lshift>
 800b05e:	4683      	mov	fp, r0
 800b060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b062:	2b00      	cmp	r3, #0
 800b064:	dd05      	ble.n	800b072 <_dtoa_r+0x842>
 800b066:	4621      	mov	r1, r4
 800b068:	461a      	mov	r2, r3
 800b06a:	4628      	mov	r0, r5
 800b06c:	f000 ffc6 	bl	800bffc <__lshift>
 800b070:	4604      	mov	r4, r0
 800b072:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b074:	2b00      	cmp	r3, #0
 800b076:	d070      	beq.n	800b15a <_dtoa_r+0x92a>
 800b078:	4621      	mov	r1, r4
 800b07a:	4658      	mov	r0, fp
 800b07c:	f001 f82e 	bl	800c0dc <__mcmp>
 800b080:	2800      	cmp	r0, #0
 800b082:	da6a      	bge.n	800b15a <_dtoa_r+0x92a>
 800b084:	2300      	movs	r3, #0
 800b086:	4659      	mov	r1, fp
 800b088:	220a      	movs	r2, #10
 800b08a:	4628      	mov	r0, r5
 800b08c:	f000 fdc0 	bl	800bc10 <__multadd>
 800b090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b092:	4683      	mov	fp, r0
 800b094:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f000 8194 	beq.w	800b3c6 <_dtoa_r+0xb96>
 800b09e:	4631      	mov	r1, r6
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	220a      	movs	r2, #10
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	f000 fdb3 	bl	800bc10 <__multadd>
 800b0aa:	f1b9 0f00 	cmp.w	r9, #0
 800b0ae:	4606      	mov	r6, r0
 800b0b0:	f300 8093 	bgt.w	800b1da <_dtoa_r+0x9aa>
 800b0b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	dc57      	bgt.n	800b16a <_dtoa_r+0x93a>
 800b0ba:	e08e      	b.n	800b1da <_dtoa_r+0x9aa>
 800b0bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b0be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b0c2:	e757      	b.n	800af74 <_dtoa_r+0x744>
 800b0c4:	9b08      	ldr	r3, [sp, #32]
 800b0c6:	1e5c      	subs	r4, r3, #1
 800b0c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0ca:	42a3      	cmp	r3, r4
 800b0cc:	bfb7      	itett	lt
 800b0ce:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b0d0:	1b1c      	subge	r4, r3, r4
 800b0d2:	1ae2      	sublt	r2, r4, r3
 800b0d4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b0d6:	bfbe      	ittt	lt
 800b0d8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b0da:	189b      	addlt	r3, r3, r2
 800b0dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b0de:	9b08      	ldr	r3, [sp, #32]
 800b0e0:	bfb8      	it	lt
 800b0e2:	2400      	movlt	r4, #0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	bfbb      	ittet	lt
 800b0e8:	9b06      	ldrlt	r3, [sp, #24]
 800b0ea:	9a08      	ldrlt	r2, [sp, #32]
 800b0ec:	9f06      	ldrge	r7, [sp, #24]
 800b0ee:	1a9f      	sublt	r7, r3, r2
 800b0f0:	bfac      	ite	ge
 800b0f2:	9b08      	ldrge	r3, [sp, #32]
 800b0f4:	2300      	movlt	r3, #0
 800b0f6:	e73f      	b.n	800af78 <_dtoa_r+0x748>
 800b0f8:	3fe00000 	.word	0x3fe00000
 800b0fc:	40240000 	.word	0x40240000
 800b100:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b102:	9f06      	ldr	r7, [sp, #24]
 800b104:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b106:	e742      	b.n	800af8e <_dtoa_r+0x75e>
 800b108:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b10a:	e76b      	b.n	800afe4 <_dtoa_r+0x7b4>
 800b10c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b10e:	2b01      	cmp	r3, #1
 800b110:	dc19      	bgt.n	800b146 <_dtoa_r+0x916>
 800b112:	9b04      	ldr	r3, [sp, #16]
 800b114:	b9bb      	cbnz	r3, 800b146 <_dtoa_r+0x916>
 800b116:	9b05      	ldr	r3, [sp, #20]
 800b118:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b11c:	b99b      	cbnz	r3, 800b146 <_dtoa_r+0x916>
 800b11e:	9b05      	ldr	r3, [sp, #20]
 800b120:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b124:	0d1b      	lsrs	r3, r3, #20
 800b126:	051b      	lsls	r3, r3, #20
 800b128:	b183      	cbz	r3, 800b14c <_dtoa_r+0x91c>
 800b12a:	f04f 0801 	mov.w	r8, #1
 800b12e:	9b06      	ldr	r3, [sp, #24]
 800b130:	3301      	adds	r3, #1
 800b132:	9306      	str	r3, [sp, #24]
 800b134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b136:	3301      	adds	r3, #1
 800b138:	9309      	str	r3, [sp, #36]	; 0x24
 800b13a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f47f af6a 	bne.w	800b016 <_dtoa_r+0x7e6>
 800b142:	2001      	movs	r0, #1
 800b144:	e76f      	b.n	800b026 <_dtoa_r+0x7f6>
 800b146:	f04f 0800 	mov.w	r8, #0
 800b14a:	e7f6      	b.n	800b13a <_dtoa_r+0x90a>
 800b14c:	4698      	mov	r8, r3
 800b14e:	e7f4      	b.n	800b13a <_dtoa_r+0x90a>
 800b150:	f43f af7d 	beq.w	800b04e <_dtoa_r+0x81e>
 800b154:	4618      	mov	r0, r3
 800b156:	301c      	adds	r0, #28
 800b158:	e772      	b.n	800b040 <_dtoa_r+0x810>
 800b15a:	9b08      	ldr	r3, [sp, #32]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	dc36      	bgt.n	800b1ce <_dtoa_r+0x99e>
 800b160:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b162:	2b02      	cmp	r3, #2
 800b164:	dd33      	ble.n	800b1ce <_dtoa_r+0x99e>
 800b166:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b16a:	f1b9 0f00 	cmp.w	r9, #0
 800b16e:	d10d      	bne.n	800b18c <_dtoa_r+0x95c>
 800b170:	4621      	mov	r1, r4
 800b172:	464b      	mov	r3, r9
 800b174:	2205      	movs	r2, #5
 800b176:	4628      	mov	r0, r5
 800b178:	f000 fd4a 	bl	800bc10 <__multadd>
 800b17c:	4601      	mov	r1, r0
 800b17e:	4604      	mov	r4, r0
 800b180:	4658      	mov	r0, fp
 800b182:	f000 ffab 	bl	800c0dc <__mcmp>
 800b186:	2800      	cmp	r0, #0
 800b188:	f73f adb8 	bgt.w	800acfc <_dtoa_r+0x4cc>
 800b18c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b18e:	9f03      	ldr	r7, [sp, #12]
 800b190:	ea6f 0a03 	mvn.w	sl, r3
 800b194:	f04f 0800 	mov.w	r8, #0
 800b198:	4621      	mov	r1, r4
 800b19a:	4628      	mov	r0, r5
 800b19c:	f000 fd16 	bl	800bbcc <_Bfree>
 800b1a0:	2e00      	cmp	r6, #0
 800b1a2:	f43f aea7 	beq.w	800aef4 <_dtoa_r+0x6c4>
 800b1a6:	f1b8 0f00 	cmp.w	r8, #0
 800b1aa:	d005      	beq.n	800b1b8 <_dtoa_r+0x988>
 800b1ac:	45b0      	cmp	r8, r6
 800b1ae:	d003      	beq.n	800b1b8 <_dtoa_r+0x988>
 800b1b0:	4641      	mov	r1, r8
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	f000 fd0a 	bl	800bbcc <_Bfree>
 800b1b8:	4631      	mov	r1, r6
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	f000 fd06 	bl	800bbcc <_Bfree>
 800b1c0:	e698      	b.n	800aef4 <_dtoa_r+0x6c4>
 800b1c2:	2400      	movs	r4, #0
 800b1c4:	4626      	mov	r6, r4
 800b1c6:	e7e1      	b.n	800b18c <_dtoa_r+0x95c>
 800b1c8:	46c2      	mov	sl, r8
 800b1ca:	4626      	mov	r6, r4
 800b1cc:	e596      	b.n	800acfc <_dtoa_r+0x4cc>
 800b1ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f000 80fd 	beq.w	800b3d4 <_dtoa_r+0xba4>
 800b1da:	2f00      	cmp	r7, #0
 800b1dc:	dd05      	ble.n	800b1ea <_dtoa_r+0x9ba>
 800b1de:	4631      	mov	r1, r6
 800b1e0:	463a      	mov	r2, r7
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	f000 ff0a 	bl	800bffc <__lshift>
 800b1e8:	4606      	mov	r6, r0
 800b1ea:	f1b8 0f00 	cmp.w	r8, #0
 800b1ee:	d05c      	beq.n	800b2aa <_dtoa_r+0xa7a>
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	6871      	ldr	r1, [r6, #4]
 800b1f4:	f000 fcaa 	bl	800bb4c <_Balloc>
 800b1f8:	4607      	mov	r7, r0
 800b1fa:	b928      	cbnz	r0, 800b208 <_dtoa_r+0x9d8>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b202:	4b7f      	ldr	r3, [pc, #508]	; (800b400 <_dtoa_r+0xbd0>)
 800b204:	f7ff bb28 	b.w	800a858 <_dtoa_r+0x28>
 800b208:	6932      	ldr	r2, [r6, #16]
 800b20a:	f106 010c 	add.w	r1, r6, #12
 800b20e:	3202      	adds	r2, #2
 800b210:	0092      	lsls	r2, r2, #2
 800b212:	300c      	adds	r0, #12
 800b214:	f000 fc8c 	bl	800bb30 <memcpy>
 800b218:	2201      	movs	r2, #1
 800b21a:	4639      	mov	r1, r7
 800b21c:	4628      	mov	r0, r5
 800b21e:	f000 feed 	bl	800bffc <__lshift>
 800b222:	46b0      	mov	r8, r6
 800b224:	4606      	mov	r6, r0
 800b226:	9b03      	ldr	r3, [sp, #12]
 800b228:	3301      	adds	r3, #1
 800b22a:	9308      	str	r3, [sp, #32]
 800b22c:	9b03      	ldr	r3, [sp, #12]
 800b22e:	444b      	add	r3, r9
 800b230:	930a      	str	r3, [sp, #40]	; 0x28
 800b232:	9b04      	ldr	r3, [sp, #16]
 800b234:	f003 0301 	and.w	r3, r3, #1
 800b238:	9309      	str	r3, [sp, #36]	; 0x24
 800b23a:	9b08      	ldr	r3, [sp, #32]
 800b23c:	4621      	mov	r1, r4
 800b23e:	3b01      	subs	r3, #1
 800b240:	4658      	mov	r0, fp
 800b242:	9304      	str	r3, [sp, #16]
 800b244:	f7ff fa66 	bl	800a714 <quorem>
 800b248:	4603      	mov	r3, r0
 800b24a:	4641      	mov	r1, r8
 800b24c:	3330      	adds	r3, #48	; 0x30
 800b24e:	9006      	str	r0, [sp, #24]
 800b250:	4658      	mov	r0, fp
 800b252:	930b      	str	r3, [sp, #44]	; 0x2c
 800b254:	f000 ff42 	bl	800c0dc <__mcmp>
 800b258:	4632      	mov	r2, r6
 800b25a:	4681      	mov	r9, r0
 800b25c:	4621      	mov	r1, r4
 800b25e:	4628      	mov	r0, r5
 800b260:	f000 ff58 	bl	800c114 <__mdiff>
 800b264:	68c2      	ldr	r2, [r0, #12]
 800b266:	4607      	mov	r7, r0
 800b268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b26a:	bb02      	cbnz	r2, 800b2ae <_dtoa_r+0xa7e>
 800b26c:	4601      	mov	r1, r0
 800b26e:	4658      	mov	r0, fp
 800b270:	f000 ff34 	bl	800c0dc <__mcmp>
 800b274:	4602      	mov	r2, r0
 800b276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b278:	4639      	mov	r1, r7
 800b27a:	4628      	mov	r0, r5
 800b27c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b280:	f000 fca4 	bl	800bbcc <_Bfree>
 800b284:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b286:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b288:	9f08      	ldr	r7, [sp, #32]
 800b28a:	ea43 0102 	orr.w	r1, r3, r2
 800b28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b290:	430b      	orrs	r3, r1
 800b292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b294:	d10d      	bne.n	800b2b2 <_dtoa_r+0xa82>
 800b296:	2b39      	cmp	r3, #57	; 0x39
 800b298:	d029      	beq.n	800b2ee <_dtoa_r+0xabe>
 800b29a:	f1b9 0f00 	cmp.w	r9, #0
 800b29e:	dd01      	ble.n	800b2a4 <_dtoa_r+0xa74>
 800b2a0:	9b06      	ldr	r3, [sp, #24]
 800b2a2:	3331      	adds	r3, #49	; 0x31
 800b2a4:	9a04      	ldr	r2, [sp, #16]
 800b2a6:	7013      	strb	r3, [r2, #0]
 800b2a8:	e776      	b.n	800b198 <_dtoa_r+0x968>
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	e7b9      	b.n	800b222 <_dtoa_r+0x9f2>
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	e7e2      	b.n	800b278 <_dtoa_r+0xa48>
 800b2b2:	f1b9 0f00 	cmp.w	r9, #0
 800b2b6:	db06      	blt.n	800b2c6 <_dtoa_r+0xa96>
 800b2b8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b2ba:	ea41 0909 	orr.w	r9, r1, r9
 800b2be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2c0:	ea59 0101 	orrs.w	r1, r9, r1
 800b2c4:	d120      	bne.n	800b308 <_dtoa_r+0xad8>
 800b2c6:	2a00      	cmp	r2, #0
 800b2c8:	ddec      	ble.n	800b2a4 <_dtoa_r+0xa74>
 800b2ca:	4659      	mov	r1, fp
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	9308      	str	r3, [sp, #32]
 800b2d2:	f000 fe93 	bl	800bffc <__lshift>
 800b2d6:	4621      	mov	r1, r4
 800b2d8:	4683      	mov	fp, r0
 800b2da:	f000 feff 	bl	800c0dc <__mcmp>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	9b08      	ldr	r3, [sp, #32]
 800b2e2:	dc02      	bgt.n	800b2ea <_dtoa_r+0xaba>
 800b2e4:	d1de      	bne.n	800b2a4 <_dtoa_r+0xa74>
 800b2e6:	07da      	lsls	r2, r3, #31
 800b2e8:	d5dc      	bpl.n	800b2a4 <_dtoa_r+0xa74>
 800b2ea:	2b39      	cmp	r3, #57	; 0x39
 800b2ec:	d1d8      	bne.n	800b2a0 <_dtoa_r+0xa70>
 800b2ee:	2339      	movs	r3, #57	; 0x39
 800b2f0:	9a04      	ldr	r2, [sp, #16]
 800b2f2:	7013      	strb	r3, [r2, #0]
 800b2f4:	463b      	mov	r3, r7
 800b2f6:	461f      	mov	r7, r3
 800b2f8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b2fc:	3b01      	subs	r3, #1
 800b2fe:	2a39      	cmp	r2, #57	; 0x39
 800b300:	d050      	beq.n	800b3a4 <_dtoa_r+0xb74>
 800b302:	3201      	adds	r2, #1
 800b304:	701a      	strb	r2, [r3, #0]
 800b306:	e747      	b.n	800b198 <_dtoa_r+0x968>
 800b308:	2a00      	cmp	r2, #0
 800b30a:	dd03      	ble.n	800b314 <_dtoa_r+0xae4>
 800b30c:	2b39      	cmp	r3, #57	; 0x39
 800b30e:	d0ee      	beq.n	800b2ee <_dtoa_r+0xabe>
 800b310:	3301      	adds	r3, #1
 800b312:	e7c7      	b.n	800b2a4 <_dtoa_r+0xa74>
 800b314:	9a08      	ldr	r2, [sp, #32]
 800b316:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b318:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b31c:	428a      	cmp	r2, r1
 800b31e:	d02a      	beq.n	800b376 <_dtoa_r+0xb46>
 800b320:	4659      	mov	r1, fp
 800b322:	2300      	movs	r3, #0
 800b324:	220a      	movs	r2, #10
 800b326:	4628      	mov	r0, r5
 800b328:	f000 fc72 	bl	800bc10 <__multadd>
 800b32c:	45b0      	cmp	r8, r6
 800b32e:	4683      	mov	fp, r0
 800b330:	f04f 0300 	mov.w	r3, #0
 800b334:	f04f 020a 	mov.w	r2, #10
 800b338:	4641      	mov	r1, r8
 800b33a:	4628      	mov	r0, r5
 800b33c:	d107      	bne.n	800b34e <_dtoa_r+0xb1e>
 800b33e:	f000 fc67 	bl	800bc10 <__multadd>
 800b342:	4680      	mov	r8, r0
 800b344:	4606      	mov	r6, r0
 800b346:	9b08      	ldr	r3, [sp, #32]
 800b348:	3301      	adds	r3, #1
 800b34a:	9308      	str	r3, [sp, #32]
 800b34c:	e775      	b.n	800b23a <_dtoa_r+0xa0a>
 800b34e:	f000 fc5f 	bl	800bc10 <__multadd>
 800b352:	4631      	mov	r1, r6
 800b354:	4680      	mov	r8, r0
 800b356:	2300      	movs	r3, #0
 800b358:	220a      	movs	r2, #10
 800b35a:	4628      	mov	r0, r5
 800b35c:	f000 fc58 	bl	800bc10 <__multadd>
 800b360:	4606      	mov	r6, r0
 800b362:	e7f0      	b.n	800b346 <_dtoa_r+0xb16>
 800b364:	f1b9 0f00 	cmp.w	r9, #0
 800b368:	bfcc      	ite	gt
 800b36a:	464f      	movgt	r7, r9
 800b36c:	2701      	movle	r7, #1
 800b36e:	f04f 0800 	mov.w	r8, #0
 800b372:	9a03      	ldr	r2, [sp, #12]
 800b374:	4417      	add	r7, r2
 800b376:	4659      	mov	r1, fp
 800b378:	2201      	movs	r2, #1
 800b37a:	4628      	mov	r0, r5
 800b37c:	9308      	str	r3, [sp, #32]
 800b37e:	f000 fe3d 	bl	800bffc <__lshift>
 800b382:	4621      	mov	r1, r4
 800b384:	4683      	mov	fp, r0
 800b386:	f000 fea9 	bl	800c0dc <__mcmp>
 800b38a:	2800      	cmp	r0, #0
 800b38c:	dcb2      	bgt.n	800b2f4 <_dtoa_r+0xac4>
 800b38e:	d102      	bne.n	800b396 <_dtoa_r+0xb66>
 800b390:	9b08      	ldr	r3, [sp, #32]
 800b392:	07db      	lsls	r3, r3, #31
 800b394:	d4ae      	bmi.n	800b2f4 <_dtoa_r+0xac4>
 800b396:	463b      	mov	r3, r7
 800b398:	461f      	mov	r7, r3
 800b39a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b39e:	2a30      	cmp	r2, #48	; 0x30
 800b3a0:	d0fa      	beq.n	800b398 <_dtoa_r+0xb68>
 800b3a2:	e6f9      	b.n	800b198 <_dtoa_r+0x968>
 800b3a4:	9a03      	ldr	r2, [sp, #12]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d1a5      	bne.n	800b2f6 <_dtoa_r+0xac6>
 800b3aa:	2331      	movs	r3, #49	; 0x31
 800b3ac:	f10a 0a01 	add.w	sl, sl, #1
 800b3b0:	e779      	b.n	800b2a6 <_dtoa_r+0xa76>
 800b3b2:	4b14      	ldr	r3, [pc, #80]	; (800b404 <_dtoa_r+0xbd4>)
 800b3b4:	f7ff baa8 	b.w	800a908 <_dtoa_r+0xd8>
 800b3b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f47f aa81 	bne.w	800a8c2 <_dtoa_r+0x92>
 800b3c0:	4b11      	ldr	r3, [pc, #68]	; (800b408 <_dtoa_r+0xbd8>)
 800b3c2:	f7ff baa1 	b.w	800a908 <_dtoa_r+0xd8>
 800b3c6:	f1b9 0f00 	cmp.w	r9, #0
 800b3ca:	dc03      	bgt.n	800b3d4 <_dtoa_r+0xba4>
 800b3cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b3ce:	2b02      	cmp	r3, #2
 800b3d0:	f73f aecb 	bgt.w	800b16a <_dtoa_r+0x93a>
 800b3d4:	9f03      	ldr	r7, [sp, #12]
 800b3d6:	4621      	mov	r1, r4
 800b3d8:	4658      	mov	r0, fp
 800b3da:	f7ff f99b 	bl	800a714 <quorem>
 800b3de:	9a03      	ldr	r2, [sp, #12]
 800b3e0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b3e4:	f807 3b01 	strb.w	r3, [r7], #1
 800b3e8:	1aba      	subs	r2, r7, r2
 800b3ea:	4591      	cmp	r9, r2
 800b3ec:	ddba      	ble.n	800b364 <_dtoa_r+0xb34>
 800b3ee:	4659      	mov	r1, fp
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	220a      	movs	r2, #10
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	f000 fc0b 	bl	800bc10 <__multadd>
 800b3fa:	4683      	mov	fp, r0
 800b3fc:	e7eb      	b.n	800b3d6 <_dtoa_r+0xba6>
 800b3fe:	bf00      	nop
 800b400:	0801e273 	.word	0x0801e273
 800b404:	0801e050 	.word	0x0801e050
 800b408:	0801e1d1 	.word	0x0801e1d1

0800b40c <rshift>:
 800b40c:	6903      	ldr	r3, [r0, #16]
 800b40e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b412:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b416:	f100 0414 	add.w	r4, r0, #20
 800b41a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b41e:	dd46      	ble.n	800b4ae <rshift+0xa2>
 800b420:	f011 011f 	ands.w	r1, r1, #31
 800b424:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b428:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b42c:	d10c      	bne.n	800b448 <rshift+0x3c>
 800b42e:	4629      	mov	r1, r5
 800b430:	f100 0710 	add.w	r7, r0, #16
 800b434:	42b1      	cmp	r1, r6
 800b436:	d335      	bcc.n	800b4a4 <rshift+0x98>
 800b438:	1a9b      	subs	r3, r3, r2
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	1eea      	subs	r2, r5, #3
 800b43e:	4296      	cmp	r6, r2
 800b440:	bf38      	it	cc
 800b442:	2300      	movcc	r3, #0
 800b444:	4423      	add	r3, r4
 800b446:	e015      	b.n	800b474 <rshift+0x68>
 800b448:	46a1      	mov	r9, r4
 800b44a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b44e:	f1c1 0820 	rsb	r8, r1, #32
 800b452:	40cf      	lsrs	r7, r1
 800b454:	f105 0e04 	add.w	lr, r5, #4
 800b458:	4576      	cmp	r6, lr
 800b45a:	46f4      	mov	ip, lr
 800b45c:	d816      	bhi.n	800b48c <rshift+0x80>
 800b45e:	1a9a      	subs	r2, r3, r2
 800b460:	0092      	lsls	r2, r2, #2
 800b462:	3a04      	subs	r2, #4
 800b464:	3501      	adds	r5, #1
 800b466:	42ae      	cmp	r6, r5
 800b468:	bf38      	it	cc
 800b46a:	2200      	movcc	r2, #0
 800b46c:	18a3      	adds	r3, r4, r2
 800b46e:	50a7      	str	r7, [r4, r2]
 800b470:	b107      	cbz	r7, 800b474 <rshift+0x68>
 800b472:	3304      	adds	r3, #4
 800b474:	42a3      	cmp	r3, r4
 800b476:	eba3 0204 	sub.w	r2, r3, r4
 800b47a:	bf08      	it	eq
 800b47c:	2300      	moveq	r3, #0
 800b47e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b482:	6102      	str	r2, [r0, #16]
 800b484:	bf08      	it	eq
 800b486:	6143      	streq	r3, [r0, #20]
 800b488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b48c:	f8dc c000 	ldr.w	ip, [ip]
 800b490:	fa0c fc08 	lsl.w	ip, ip, r8
 800b494:	ea4c 0707 	orr.w	r7, ip, r7
 800b498:	f849 7b04 	str.w	r7, [r9], #4
 800b49c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b4a0:	40cf      	lsrs	r7, r1
 800b4a2:	e7d9      	b.n	800b458 <rshift+0x4c>
 800b4a4:	f851 cb04 	ldr.w	ip, [r1], #4
 800b4a8:	f847 cf04 	str.w	ip, [r7, #4]!
 800b4ac:	e7c2      	b.n	800b434 <rshift+0x28>
 800b4ae:	4623      	mov	r3, r4
 800b4b0:	e7e0      	b.n	800b474 <rshift+0x68>

0800b4b2 <__hexdig_fun>:
 800b4b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b4b6:	2b09      	cmp	r3, #9
 800b4b8:	d802      	bhi.n	800b4c0 <__hexdig_fun+0xe>
 800b4ba:	3820      	subs	r0, #32
 800b4bc:	b2c0      	uxtb	r0, r0
 800b4be:	4770      	bx	lr
 800b4c0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b4c4:	2b05      	cmp	r3, #5
 800b4c6:	d801      	bhi.n	800b4cc <__hexdig_fun+0x1a>
 800b4c8:	3847      	subs	r0, #71	; 0x47
 800b4ca:	e7f7      	b.n	800b4bc <__hexdig_fun+0xa>
 800b4cc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b4d0:	2b05      	cmp	r3, #5
 800b4d2:	d801      	bhi.n	800b4d8 <__hexdig_fun+0x26>
 800b4d4:	3827      	subs	r0, #39	; 0x27
 800b4d6:	e7f1      	b.n	800b4bc <__hexdig_fun+0xa>
 800b4d8:	2000      	movs	r0, #0
 800b4da:	4770      	bx	lr

0800b4dc <__gethex>:
 800b4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e0:	b08b      	sub	sp, #44	; 0x2c
 800b4e2:	9305      	str	r3, [sp, #20]
 800b4e4:	4bb2      	ldr	r3, [pc, #712]	; (800b7b0 <__gethex+0x2d4>)
 800b4e6:	9002      	str	r0, [sp, #8]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	468b      	mov	fp, r1
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	4690      	mov	r8, r2
 800b4f0:	9303      	str	r3, [sp, #12]
 800b4f2:	f7fa febb 	bl	800626c <strlen>
 800b4f6:	4682      	mov	sl, r0
 800b4f8:	9b03      	ldr	r3, [sp, #12]
 800b4fa:	f8db 2000 	ldr.w	r2, [fp]
 800b4fe:	4403      	add	r3, r0
 800b500:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b504:	9306      	str	r3, [sp, #24]
 800b506:	1c93      	adds	r3, r2, #2
 800b508:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b50c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b510:	32fe      	adds	r2, #254	; 0xfe
 800b512:	18d1      	adds	r1, r2, r3
 800b514:	461f      	mov	r7, r3
 800b516:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b51a:	9101      	str	r1, [sp, #4]
 800b51c:	2830      	cmp	r0, #48	; 0x30
 800b51e:	d0f8      	beq.n	800b512 <__gethex+0x36>
 800b520:	f7ff ffc7 	bl	800b4b2 <__hexdig_fun>
 800b524:	4604      	mov	r4, r0
 800b526:	2800      	cmp	r0, #0
 800b528:	d13a      	bne.n	800b5a0 <__gethex+0xc4>
 800b52a:	4652      	mov	r2, sl
 800b52c:	4638      	mov	r0, r7
 800b52e:	9903      	ldr	r1, [sp, #12]
 800b530:	f001 fa26 	bl	800c980 <strncmp>
 800b534:	4605      	mov	r5, r0
 800b536:	2800      	cmp	r0, #0
 800b538:	d166      	bne.n	800b608 <__gethex+0x12c>
 800b53a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b53e:	eb07 060a 	add.w	r6, r7, sl
 800b542:	f7ff ffb6 	bl	800b4b2 <__hexdig_fun>
 800b546:	2800      	cmp	r0, #0
 800b548:	d060      	beq.n	800b60c <__gethex+0x130>
 800b54a:	4633      	mov	r3, r6
 800b54c:	7818      	ldrb	r0, [r3, #0]
 800b54e:	461f      	mov	r7, r3
 800b550:	2830      	cmp	r0, #48	; 0x30
 800b552:	f103 0301 	add.w	r3, r3, #1
 800b556:	d0f9      	beq.n	800b54c <__gethex+0x70>
 800b558:	f7ff ffab 	bl	800b4b2 <__hexdig_fun>
 800b55c:	2301      	movs	r3, #1
 800b55e:	fab0 f480 	clz	r4, r0
 800b562:	4635      	mov	r5, r6
 800b564:	0964      	lsrs	r4, r4, #5
 800b566:	9301      	str	r3, [sp, #4]
 800b568:	463a      	mov	r2, r7
 800b56a:	4616      	mov	r6, r2
 800b56c:	7830      	ldrb	r0, [r6, #0]
 800b56e:	3201      	adds	r2, #1
 800b570:	f7ff ff9f 	bl	800b4b2 <__hexdig_fun>
 800b574:	2800      	cmp	r0, #0
 800b576:	d1f8      	bne.n	800b56a <__gethex+0x8e>
 800b578:	4652      	mov	r2, sl
 800b57a:	4630      	mov	r0, r6
 800b57c:	9903      	ldr	r1, [sp, #12]
 800b57e:	f001 f9ff 	bl	800c980 <strncmp>
 800b582:	b980      	cbnz	r0, 800b5a6 <__gethex+0xca>
 800b584:	b94d      	cbnz	r5, 800b59a <__gethex+0xbe>
 800b586:	eb06 050a 	add.w	r5, r6, sl
 800b58a:	462a      	mov	r2, r5
 800b58c:	4616      	mov	r6, r2
 800b58e:	7830      	ldrb	r0, [r6, #0]
 800b590:	3201      	adds	r2, #1
 800b592:	f7ff ff8e 	bl	800b4b2 <__hexdig_fun>
 800b596:	2800      	cmp	r0, #0
 800b598:	d1f8      	bne.n	800b58c <__gethex+0xb0>
 800b59a:	1bad      	subs	r5, r5, r6
 800b59c:	00ad      	lsls	r5, r5, #2
 800b59e:	e004      	b.n	800b5aa <__gethex+0xce>
 800b5a0:	2400      	movs	r4, #0
 800b5a2:	4625      	mov	r5, r4
 800b5a4:	e7e0      	b.n	800b568 <__gethex+0x8c>
 800b5a6:	2d00      	cmp	r5, #0
 800b5a8:	d1f7      	bne.n	800b59a <__gethex+0xbe>
 800b5aa:	7833      	ldrb	r3, [r6, #0]
 800b5ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b5b0:	2b50      	cmp	r3, #80	; 0x50
 800b5b2:	d139      	bne.n	800b628 <__gethex+0x14c>
 800b5b4:	7873      	ldrb	r3, [r6, #1]
 800b5b6:	2b2b      	cmp	r3, #43	; 0x2b
 800b5b8:	d02a      	beq.n	800b610 <__gethex+0x134>
 800b5ba:	2b2d      	cmp	r3, #45	; 0x2d
 800b5bc:	d02c      	beq.n	800b618 <__gethex+0x13c>
 800b5be:	f04f 0900 	mov.w	r9, #0
 800b5c2:	1c71      	adds	r1, r6, #1
 800b5c4:	7808      	ldrb	r0, [r1, #0]
 800b5c6:	f7ff ff74 	bl	800b4b2 <__hexdig_fun>
 800b5ca:	1e43      	subs	r3, r0, #1
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	2b18      	cmp	r3, #24
 800b5d0:	d82a      	bhi.n	800b628 <__gethex+0x14c>
 800b5d2:	f1a0 0210 	sub.w	r2, r0, #16
 800b5d6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b5da:	f7ff ff6a 	bl	800b4b2 <__hexdig_fun>
 800b5de:	1e43      	subs	r3, r0, #1
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	2b18      	cmp	r3, #24
 800b5e4:	d91b      	bls.n	800b61e <__gethex+0x142>
 800b5e6:	f1b9 0f00 	cmp.w	r9, #0
 800b5ea:	d000      	beq.n	800b5ee <__gethex+0x112>
 800b5ec:	4252      	negs	r2, r2
 800b5ee:	4415      	add	r5, r2
 800b5f0:	f8cb 1000 	str.w	r1, [fp]
 800b5f4:	b1d4      	cbz	r4, 800b62c <__gethex+0x150>
 800b5f6:	9b01      	ldr	r3, [sp, #4]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	bf14      	ite	ne
 800b5fc:	2700      	movne	r7, #0
 800b5fe:	2706      	moveq	r7, #6
 800b600:	4638      	mov	r0, r7
 800b602:	b00b      	add	sp, #44	; 0x2c
 800b604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b608:	463e      	mov	r6, r7
 800b60a:	4625      	mov	r5, r4
 800b60c:	2401      	movs	r4, #1
 800b60e:	e7cc      	b.n	800b5aa <__gethex+0xce>
 800b610:	f04f 0900 	mov.w	r9, #0
 800b614:	1cb1      	adds	r1, r6, #2
 800b616:	e7d5      	b.n	800b5c4 <__gethex+0xe8>
 800b618:	f04f 0901 	mov.w	r9, #1
 800b61c:	e7fa      	b.n	800b614 <__gethex+0x138>
 800b61e:	230a      	movs	r3, #10
 800b620:	fb03 0202 	mla	r2, r3, r2, r0
 800b624:	3a10      	subs	r2, #16
 800b626:	e7d6      	b.n	800b5d6 <__gethex+0xfa>
 800b628:	4631      	mov	r1, r6
 800b62a:	e7e1      	b.n	800b5f0 <__gethex+0x114>
 800b62c:	4621      	mov	r1, r4
 800b62e:	1bf3      	subs	r3, r6, r7
 800b630:	3b01      	subs	r3, #1
 800b632:	2b07      	cmp	r3, #7
 800b634:	dc0a      	bgt.n	800b64c <__gethex+0x170>
 800b636:	9802      	ldr	r0, [sp, #8]
 800b638:	f000 fa88 	bl	800bb4c <_Balloc>
 800b63c:	4604      	mov	r4, r0
 800b63e:	b940      	cbnz	r0, 800b652 <__gethex+0x176>
 800b640:	4602      	mov	r2, r0
 800b642:	21de      	movs	r1, #222	; 0xde
 800b644:	4b5b      	ldr	r3, [pc, #364]	; (800b7b4 <__gethex+0x2d8>)
 800b646:	485c      	ldr	r0, [pc, #368]	; (800b7b8 <__gethex+0x2dc>)
 800b648:	f001 f9bc 	bl	800c9c4 <__assert_func>
 800b64c:	3101      	adds	r1, #1
 800b64e:	105b      	asrs	r3, r3, #1
 800b650:	e7ef      	b.n	800b632 <__gethex+0x156>
 800b652:	f04f 0b00 	mov.w	fp, #0
 800b656:	f100 0914 	add.w	r9, r0, #20
 800b65a:	f1ca 0301 	rsb	r3, sl, #1
 800b65e:	f8cd 9010 	str.w	r9, [sp, #16]
 800b662:	f8cd b004 	str.w	fp, [sp, #4]
 800b666:	9308      	str	r3, [sp, #32]
 800b668:	42b7      	cmp	r7, r6
 800b66a:	d33f      	bcc.n	800b6ec <__gethex+0x210>
 800b66c:	9f04      	ldr	r7, [sp, #16]
 800b66e:	9b01      	ldr	r3, [sp, #4]
 800b670:	f847 3b04 	str.w	r3, [r7], #4
 800b674:	eba7 0709 	sub.w	r7, r7, r9
 800b678:	10bf      	asrs	r7, r7, #2
 800b67a:	6127      	str	r7, [r4, #16]
 800b67c:	4618      	mov	r0, r3
 800b67e:	f000 fb57 	bl	800bd30 <__hi0bits>
 800b682:	017f      	lsls	r7, r7, #5
 800b684:	f8d8 6000 	ldr.w	r6, [r8]
 800b688:	1a3f      	subs	r7, r7, r0
 800b68a:	42b7      	cmp	r7, r6
 800b68c:	dd62      	ble.n	800b754 <__gethex+0x278>
 800b68e:	1bbf      	subs	r7, r7, r6
 800b690:	4639      	mov	r1, r7
 800b692:	4620      	mov	r0, r4
 800b694:	f000 fef1 	bl	800c47a <__any_on>
 800b698:	4682      	mov	sl, r0
 800b69a:	b1a8      	cbz	r0, 800b6c8 <__gethex+0x1ec>
 800b69c:	f04f 0a01 	mov.w	sl, #1
 800b6a0:	1e7b      	subs	r3, r7, #1
 800b6a2:	1159      	asrs	r1, r3, #5
 800b6a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b6a8:	f003 021f 	and.w	r2, r3, #31
 800b6ac:	fa0a f202 	lsl.w	r2, sl, r2
 800b6b0:	420a      	tst	r2, r1
 800b6b2:	d009      	beq.n	800b6c8 <__gethex+0x1ec>
 800b6b4:	4553      	cmp	r3, sl
 800b6b6:	dd05      	ble.n	800b6c4 <__gethex+0x1e8>
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	1eb9      	subs	r1, r7, #2
 800b6bc:	f000 fedd 	bl	800c47a <__any_on>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	d144      	bne.n	800b74e <__gethex+0x272>
 800b6c4:	f04f 0a02 	mov.w	sl, #2
 800b6c8:	4639      	mov	r1, r7
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f7ff fe9e 	bl	800b40c <rshift>
 800b6d0:	443d      	add	r5, r7
 800b6d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6d6:	42ab      	cmp	r3, r5
 800b6d8:	da4a      	bge.n	800b770 <__gethex+0x294>
 800b6da:	4621      	mov	r1, r4
 800b6dc:	9802      	ldr	r0, [sp, #8]
 800b6de:	f000 fa75 	bl	800bbcc <_Bfree>
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b6e6:	27a3      	movs	r7, #163	; 0xa3
 800b6e8:	6013      	str	r3, [r2, #0]
 800b6ea:	e789      	b.n	800b600 <__gethex+0x124>
 800b6ec:	1e73      	subs	r3, r6, #1
 800b6ee:	9a06      	ldr	r2, [sp, #24]
 800b6f0:	9307      	str	r3, [sp, #28]
 800b6f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d019      	beq.n	800b72e <__gethex+0x252>
 800b6fa:	f1bb 0f20 	cmp.w	fp, #32
 800b6fe:	d107      	bne.n	800b710 <__gethex+0x234>
 800b700:	9b04      	ldr	r3, [sp, #16]
 800b702:	9a01      	ldr	r2, [sp, #4]
 800b704:	f843 2b04 	str.w	r2, [r3], #4
 800b708:	9304      	str	r3, [sp, #16]
 800b70a:	2300      	movs	r3, #0
 800b70c:	469b      	mov	fp, r3
 800b70e:	9301      	str	r3, [sp, #4]
 800b710:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b714:	f7ff fecd 	bl	800b4b2 <__hexdig_fun>
 800b718:	9b01      	ldr	r3, [sp, #4]
 800b71a:	f000 000f 	and.w	r0, r0, #15
 800b71e:	fa00 f00b 	lsl.w	r0, r0, fp
 800b722:	4303      	orrs	r3, r0
 800b724:	9301      	str	r3, [sp, #4]
 800b726:	f10b 0b04 	add.w	fp, fp, #4
 800b72a:	9b07      	ldr	r3, [sp, #28]
 800b72c:	e00d      	b.n	800b74a <__gethex+0x26e>
 800b72e:	9a08      	ldr	r2, [sp, #32]
 800b730:	1e73      	subs	r3, r6, #1
 800b732:	4413      	add	r3, r2
 800b734:	42bb      	cmp	r3, r7
 800b736:	d3e0      	bcc.n	800b6fa <__gethex+0x21e>
 800b738:	4618      	mov	r0, r3
 800b73a:	4652      	mov	r2, sl
 800b73c:	9903      	ldr	r1, [sp, #12]
 800b73e:	9309      	str	r3, [sp, #36]	; 0x24
 800b740:	f001 f91e 	bl	800c980 <strncmp>
 800b744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b746:	2800      	cmp	r0, #0
 800b748:	d1d7      	bne.n	800b6fa <__gethex+0x21e>
 800b74a:	461e      	mov	r6, r3
 800b74c:	e78c      	b.n	800b668 <__gethex+0x18c>
 800b74e:	f04f 0a03 	mov.w	sl, #3
 800b752:	e7b9      	b.n	800b6c8 <__gethex+0x1ec>
 800b754:	da09      	bge.n	800b76a <__gethex+0x28e>
 800b756:	1bf7      	subs	r7, r6, r7
 800b758:	4621      	mov	r1, r4
 800b75a:	463a      	mov	r2, r7
 800b75c:	9802      	ldr	r0, [sp, #8]
 800b75e:	f000 fc4d 	bl	800bffc <__lshift>
 800b762:	4604      	mov	r4, r0
 800b764:	1bed      	subs	r5, r5, r7
 800b766:	f100 0914 	add.w	r9, r0, #20
 800b76a:	f04f 0a00 	mov.w	sl, #0
 800b76e:	e7b0      	b.n	800b6d2 <__gethex+0x1f6>
 800b770:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b774:	42a8      	cmp	r0, r5
 800b776:	dd72      	ble.n	800b85e <__gethex+0x382>
 800b778:	1b45      	subs	r5, r0, r5
 800b77a:	42ae      	cmp	r6, r5
 800b77c:	dc35      	bgt.n	800b7ea <__gethex+0x30e>
 800b77e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b782:	2b02      	cmp	r3, #2
 800b784:	d029      	beq.n	800b7da <__gethex+0x2fe>
 800b786:	2b03      	cmp	r3, #3
 800b788:	d02b      	beq.n	800b7e2 <__gethex+0x306>
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d11c      	bne.n	800b7c8 <__gethex+0x2ec>
 800b78e:	42ae      	cmp	r6, r5
 800b790:	d11a      	bne.n	800b7c8 <__gethex+0x2ec>
 800b792:	2e01      	cmp	r6, #1
 800b794:	d112      	bne.n	800b7bc <__gethex+0x2e0>
 800b796:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b79a:	9a05      	ldr	r2, [sp, #20]
 800b79c:	2762      	movs	r7, #98	; 0x62
 800b79e:	6013      	str	r3, [r2, #0]
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	6123      	str	r3, [r4, #16]
 800b7a4:	f8c9 3000 	str.w	r3, [r9]
 800b7a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b7aa:	601c      	str	r4, [r3, #0]
 800b7ac:	e728      	b.n	800b600 <__gethex+0x124>
 800b7ae:	bf00      	nop
 800b7b0:	0801e30c 	.word	0x0801e30c
 800b7b4:	0801e273 	.word	0x0801e273
 800b7b8:	0801e284 	.word	0x0801e284
 800b7bc:	4620      	mov	r0, r4
 800b7be:	1e71      	subs	r1, r6, #1
 800b7c0:	f000 fe5b 	bl	800c47a <__any_on>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d1e6      	bne.n	800b796 <__gethex+0x2ba>
 800b7c8:	4621      	mov	r1, r4
 800b7ca:	9802      	ldr	r0, [sp, #8]
 800b7cc:	f000 f9fe 	bl	800bbcc <_Bfree>
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b7d4:	2750      	movs	r7, #80	; 0x50
 800b7d6:	6013      	str	r3, [r2, #0]
 800b7d8:	e712      	b.n	800b600 <__gethex+0x124>
 800b7da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d1f3      	bne.n	800b7c8 <__gethex+0x2ec>
 800b7e0:	e7d9      	b.n	800b796 <__gethex+0x2ba>
 800b7e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d1d6      	bne.n	800b796 <__gethex+0x2ba>
 800b7e8:	e7ee      	b.n	800b7c8 <__gethex+0x2ec>
 800b7ea:	1e6f      	subs	r7, r5, #1
 800b7ec:	f1ba 0f00 	cmp.w	sl, #0
 800b7f0:	d132      	bne.n	800b858 <__gethex+0x37c>
 800b7f2:	b127      	cbz	r7, 800b7fe <__gethex+0x322>
 800b7f4:	4639      	mov	r1, r7
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f000 fe3f 	bl	800c47a <__any_on>
 800b7fc:	4682      	mov	sl, r0
 800b7fe:	2101      	movs	r1, #1
 800b800:	117b      	asrs	r3, r7, #5
 800b802:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b806:	f007 071f 	and.w	r7, r7, #31
 800b80a:	fa01 f707 	lsl.w	r7, r1, r7
 800b80e:	421f      	tst	r7, r3
 800b810:	f04f 0702 	mov.w	r7, #2
 800b814:	4629      	mov	r1, r5
 800b816:	4620      	mov	r0, r4
 800b818:	bf18      	it	ne
 800b81a:	f04a 0a02 	orrne.w	sl, sl, #2
 800b81e:	1b76      	subs	r6, r6, r5
 800b820:	f7ff fdf4 	bl	800b40c <rshift>
 800b824:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b828:	f1ba 0f00 	cmp.w	sl, #0
 800b82c:	d048      	beq.n	800b8c0 <__gethex+0x3e4>
 800b82e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b832:	2b02      	cmp	r3, #2
 800b834:	d015      	beq.n	800b862 <__gethex+0x386>
 800b836:	2b03      	cmp	r3, #3
 800b838:	d017      	beq.n	800b86a <__gethex+0x38e>
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d109      	bne.n	800b852 <__gethex+0x376>
 800b83e:	f01a 0f02 	tst.w	sl, #2
 800b842:	d006      	beq.n	800b852 <__gethex+0x376>
 800b844:	f8d9 0000 	ldr.w	r0, [r9]
 800b848:	ea4a 0a00 	orr.w	sl, sl, r0
 800b84c:	f01a 0f01 	tst.w	sl, #1
 800b850:	d10e      	bne.n	800b870 <__gethex+0x394>
 800b852:	f047 0710 	orr.w	r7, r7, #16
 800b856:	e033      	b.n	800b8c0 <__gethex+0x3e4>
 800b858:	f04f 0a01 	mov.w	sl, #1
 800b85c:	e7cf      	b.n	800b7fe <__gethex+0x322>
 800b85e:	2701      	movs	r7, #1
 800b860:	e7e2      	b.n	800b828 <__gethex+0x34c>
 800b862:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b864:	f1c3 0301 	rsb	r3, r3, #1
 800b868:	9315      	str	r3, [sp, #84]	; 0x54
 800b86a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d0f0      	beq.n	800b852 <__gethex+0x376>
 800b870:	f04f 0c00 	mov.w	ip, #0
 800b874:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b878:	f104 0314 	add.w	r3, r4, #20
 800b87c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b880:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b884:	4618      	mov	r0, r3
 800b886:	f853 2b04 	ldr.w	r2, [r3], #4
 800b88a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b88e:	d01c      	beq.n	800b8ca <__gethex+0x3ee>
 800b890:	3201      	adds	r2, #1
 800b892:	6002      	str	r2, [r0, #0]
 800b894:	2f02      	cmp	r7, #2
 800b896:	f104 0314 	add.w	r3, r4, #20
 800b89a:	d13d      	bne.n	800b918 <__gethex+0x43c>
 800b89c:	f8d8 2000 	ldr.w	r2, [r8]
 800b8a0:	3a01      	subs	r2, #1
 800b8a2:	42b2      	cmp	r2, r6
 800b8a4:	d10a      	bne.n	800b8bc <__gethex+0x3e0>
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	1171      	asrs	r1, r6, #5
 800b8aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b8ae:	f006 061f 	and.w	r6, r6, #31
 800b8b2:	fa02 f606 	lsl.w	r6, r2, r6
 800b8b6:	421e      	tst	r6, r3
 800b8b8:	bf18      	it	ne
 800b8ba:	4617      	movne	r7, r2
 800b8bc:	f047 0720 	orr.w	r7, r7, #32
 800b8c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b8c2:	601c      	str	r4, [r3, #0]
 800b8c4:	9b05      	ldr	r3, [sp, #20]
 800b8c6:	601d      	str	r5, [r3, #0]
 800b8c8:	e69a      	b.n	800b600 <__gethex+0x124>
 800b8ca:	4299      	cmp	r1, r3
 800b8cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b8d0:	d8d8      	bhi.n	800b884 <__gethex+0x3a8>
 800b8d2:	68a3      	ldr	r3, [r4, #8]
 800b8d4:	459b      	cmp	fp, r3
 800b8d6:	db17      	blt.n	800b908 <__gethex+0x42c>
 800b8d8:	6861      	ldr	r1, [r4, #4]
 800b8da:	9802      	ldr	r0, [sp, #8]
 800b8dc:	3101      	adds	r1, #1
 800b8de:	f000 f935 	bl	800bb4c <_Balloc>
 800b8e2:	4681      	mov	r9, r0
 800b8e4:	b918      	cbnz	r0, 800b8ee <__gethex+0x412>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	2184      	movs	r1, #132	; 0x84
 800b8ea:	4b19      	ldr	r3, [pc, #100]	; (800b950 <__gethex+0x474>)
 800b8ec:	e6ab      	b.n	800b646 <__gethex+0x16a>
 800b8ee:	6922      	ldr	r2, [r4, #16]
 800b8f0:	f104 010c 	add.w	r1, r4, #12
 800b8f4:	3202      	adds	r2, #2
 800b8f6:	0092      	lsls	r2, r2, #2
 800b8f8:	300c      	adds	r0, #12
 800b8fa:	f000 f919 	bl	800bb30 <memcpy>
 800b8fe:	4621      	mov	r1, r4
 800b900:	9802      	ldr	r0, [sp, #8]
 800b902:	f000 f963 	bl	800bbcc <_Bfree>
 800b906:	464c      	mov	r4, r9
 800b908:	6923      	ldr	r3, [r4, #16]
 800b90a:	1c5a      	adds	r2, r3, #1
 800b90c:	6122      	str	r2, [r4, #16]
 800b90e:	2201      	movs	r2, #1
 800b910:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b914:	615a      	str	r2, [r3, #20]
 800b916:	e7bd      	b.n	800b894 <__gethex+0x3b8>
 800b918:	6922      	ldr	r2, [r4, #16]
 800b91a:	455a      	cmp	r2, fp
 800b91c:	dd0b      	ble.n	800b936 <__gethex+0x45a>
 800b91e:	2101      	movs	r1, #1
 800b920:	4620      	mov	r0, r4
 800b922:	f7ff fd73 	bl	800b40c <rshift>
 800b926:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b92a:	3501      	adds	r5, #1
 800b92c:	42ab      	cmp	r3, r5
 800b92e:	f6ff aed4 	blt.w	800b6da <__gethex+0x1fe>
 800b932:	2701      	movs	r7, #1
 800b934:	e7c2      	b.n	800b8bc <__gethex+0x3e0>
 800b936:	f016 061f 	ands.w	r6, r6, #31
 800b93a:	d0fa      	beq.n	800b932 <__gethex+0x456>
 800b93c:	4453      	add	r3, sl
 800b93e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b942:	f000 f9f5 	bl	800bd30 <__hi0bits>
 800b946:	f1c6 0620 	rsb	r6, r6, #32
 800b94a:	42b0      	cmp	r0, r6
 800b94c:	dbe7      	blt.n	800b91e <__gethex+0x442>
 800b94e:	e7f0      	b.n	800b932 <__gethex+0x456>
 800b950:	0801e273 	.word	0x0801e273

0800b954 <L_shift>:
 800b954:	f1c2 0208 	rsb	r2, r2, #8
 800b958:	0092      	lsls	r2, r2, #2
 800b95a:	b570      	push	{r4, r5, r6, lr}
 800b95c:	f1c2 0620 	rsb	r6, r2, #32
 800b960:	6843      	ldr	r3, [r0, #4]
 800b962:	6804      	ldr	r4, [r0, #0]
 800b964:	fa03 f506 	lsl.w	r5, r3, r6
 800b968:	432c      	orrs	r4, r5
 800b96a:	40d3      	lsrs	r3, r2
 800b96c:	6004      	str	r4, [r0, #0]
 800b96e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b972:	4288      	cmp	r0, r1
 800b974:	d3f4      	bcc.n	800b960 <L_shift+0xc>
 800b976:	bd70      	pop	{r4, r5, r6, pc}

0800b978 <__match>:
 800b978:	b530      	push	{r4, r5, lr}
 800b97a:	6803      	ldr	r3, [r0, #0]
 800b97c:	3301      	adds	r3, #1
 800b97e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b982:	b914      	cbnz	r4, 800b98a <__match+0x12>
 800b984:	6003      	str	r3, [r0, #0]
 800b986:	2001      	movs	r0, #1
 800b988:	bd30      	pop	{r4, r5, pc}
 800b98a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b98e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b992:	2d19      	cmp	r5, #25
 800b994:	bf98      	it	ls
 800b996:	3220      	addls	r2, #32
 800b998:	42a2      	cmp	r2, r4
 800b99a:	d0f0      	beq.n	800b97e <__match+0x6>
 800b99c:	2000      	movs	r0, #0
 800b99e:	e7f3      	b.n	800b988 <__match+0x10>

0800b9a0 <__hexnan>:
 800b9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a4:	2500      	movs	r5, #0
 800b9a6:	680b      	ldr	r3, [r1, #0]
 800b9a8:	4682      	mov	sl, r0
 800b9aa:	115e      	asrs	r6, r3, #5
 800b9ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b9b0:	f013 031f 	ands.w	r3, r3, #31
 800b9b4:	bf18      	it	ne
 800b9b6:	3604      	addne	r6, #4
 800b9b8:	1f37      	subs	r7, r6, #4
 800b9ba:	46b9      	mov	r9, r7
 800b9bc:	463c      	mov	r4, r7
 800b9be:	46ab      	mov	fp, r5
 800b9c0:	b087      	sub	sp, #28
 800b9c2:	4690      	mov	r8, r2
 800b9c4:	6802      	ldr	r2, [r0, #0]
 800b9c6:	9301      	str	r3, [sp, #4]
 800b9c8:	f846 5c04 	str.w	r5, [r6, #-4]
 800b9cc:	9502      	str	r5, [sp, #8]
 800b9ce:	7851      	ldrb	r1, [r2, #1]
 800b9d0:	1c53      	adds	r3, r2, #1
 800b9d2:	9303      	str	r3, [sp, #12]
 800b9d4:	b341      	cbz	r1, 800ba28 <__hexnan+0x88>
 800b9d6:	4608      	mov	r0, r1
 800b9d8:	9205      	str	r2, [sp, #20]
 800b9da:	9104      	str	r1, [sp, #16]
 800b9dc:	f7ff fd69 	bl	800b4b2 <__hexdig_fun>
 800b9e0:	2800      	cmp	r0, #0
 800b9e2:	d14f      	bne.n	800ba84 <__hexnan+0xe4>
 800b9e4:	9904      	ldr	r1, [sp, #16]
 800b9e6:	9a05      	ldr	r2, [sp, #20]
 800b9e8:	2920      	cmp	r1, #32
 800b9ea:	d818      	bhi.n	800ba1e <__hexnan+0x7e>
 800b9ec:	9b02      	ldr	r3, [sp, #8]
 800b9ee:	459b      	cmp	fp, r3
 800b9f0:	dd13      	ble.n	800ba1a <__hexnan+0x7a>
 800b9f2:	454c      	cmp	r4, r9
 800b9f4:	d206      	bcs.n	800ba04 <__hexnan+0x64>
 800b9f6:	2d07      	cmp	r5, #7
 800b9f8:	dc04      	bgt.n	800ba04 <__hexnan+0x64>
 800b9fa:	462a      	mov	r2, r5
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	4620      	mov	r0, r4
 800ba00:	f7ff ffa8 	bl	800b954 <L_shift>
 800ba04:	4544      	cmp	r4, r8
 800ba06:	d950      	bls.n	800baaa <__hexnan+0x10a>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	f1a4 0904 	sub.w	r9, r4, #4
 800ba0e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba12:	461d      	mov	r5, r3
 800ba14:	464c      	mov	r4, r9
 800ba16:	f8cd b008 	str.w	fp, [sp, #8]
 800ba1a:	9a03      	ldr	r2, [sp, #12]
 800ba1c:	e7d7      	b.n	800b9ce <__hexnan+0x2e>
 800ba1e:	2929      	cmp	r1, #41	; 0x29
 800ba20:	d156      	bne.n	800bad0 <__hexnan+0x130>
 800ba22:	3202      	adds	r2, #2
 800ba24:	f8ca 2000 	str.w	r2, [sl]
 800ba28:	f1bb 0f00 	cmp.w	fp, #0
 800ba2c:	d050      	beq.n	800bad0 <__hexnan+0x130>
 800ba2e:	454c      	cmp	r4, r9
 800ba30:	d206      	bcs.n	800ba40 <__hexnan+0xa0>
 800ba32:	2d07      	cmp	r5, #7
 800ba34:	dc04      	bgt.n	800ba40 <__hexnan+0xa0>
 800ba36:	462a      	mov	r2, r5
 800ba38:	4649      	mov	r1, r9
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	f7ff ff8a 	bl	800b954 <L_shift>
 800ba40:	4544      	cmp	r4, r8
 800ba42:	d934      	bls.n	800baae <__hexnan+0x10e>
 800ba44:	4623      	mov	r3, r4
 800ba46:	f1a8 0204 	sub.w	r2, r8, #4
 800ba4a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ba4e:	429f      	cmp	r7, r3
 800ba50:	f842 1f04 	str.w	r1, [r2, #4]!
 800ba54:	d2f9      	bcs.n	800ba4a <__hexnan+0xaa>
 800ba56:	1b3b      	subs	r3, r7, r4
 800ba58:	f023 0303 	bic.w	r3, r3, #3
 800ba5c:	3304      	adds	r3, #4
 800ba5e:	3401      	adds	r4, #1
 800ba60:	3e03      	subs	r6, #3
 800ba62:	42b4      	cmp	r4, r6
 800ba64:	bf88      	it	hi
 800ba66:	2304      	movhi	r3, #4
 800ba68:	2200      	movs	r2, #0
 800ba6a:	4443      	add	r3, r8
 800ba6c:	f843 2b04 	str.w	r2, [r3], #4
 800ba70:	429f      	cmp	r7, r3
 800ba72:	d2fb      	bcs.n	800ba6c <__hexnan+0xcc>
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	b91b      	cbnz	r3, 800ba80 <__hexnan+0xe0>
 800ba78:	4547      	cmp	r7, r8
 800ba7a:	d127      	bne.n	800bacc <__hexnan+0x12c>
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	603b      	str	r3, [r7, #0]
 800ba80:	2005      	movs	r0, #5
 800ba82:	e026      	b.n	800bad2 <__hexnan+0x132>
 800ba84:	3501      	adds	r5, #1
 800ba86:	2d08      	cmp	r5, #8
 800ba88:	f10b 0b01 	add.w	fp, fp, #1
 800ba8c:	dd06      	ble.n	800ba9c <__hexnan+0xfc>
 800ba8e:	4544      	cmp	r4, r8
 800ba90:	d9c3      	bls.n	800ba1a <__hexnan+0x7a>
 800ba92:	2300      	movs	r3, #0
 800ba94:	2501      	movs	r5, #1
 800ba96:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba9a:	3c04      	subs	r4, #4
 800ba9c:	6822      	ldr	r2, [r4, #0]
 800ba9e:	f000 000f 	and.w	r0, r0, #15
 800baa2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800baa6:	6022      	str	r2, [r4, #0]
 800baa8:	e7b7      	b.n	800ba1a <__hexnan+0x7a>
 800baaa:	2508      	movs	r5, #8
 800baac:	e7b5      	b.n	800ba1a <__hexnan+0x7a>
 800baae:	9b01      	ldr	r3, [sp, #4]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d0df      	beq.n	800ba74 <__hexnan+0xd4>
 800bab4:	f04f 32ff 	mov.w	r2, #4294967295
 800bab8:	f1c3 0320 	rsb	r3, r3, #32
 800babc:	fa22 f303 	lsr.w	r3, r2, r3
 800bac0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bac4:	401a      	ands	r2, r3
 800bac6:	f846 2c04 	str.w	r2, [r6, #-4]
 800baca:	e7d3      	b.n	800ba74 <__hexnan+0xd4>
 800bacc:	3f04      	subs	r7, #4
 800bace:	e7d1      	b.n	800ba74 <__hexnan+0xd4>
 800bad0:	2004      	movs	r0, #4
 800bad2:	b007      	add	sp, #28
 800bad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bad8 <_localeconv_r>:
 800bad8:	4800      	ldr	r0, [pc, #0]	; (800badc <_localeconv_r+0x4>)
 800bada:	4770      	bx	lr
 800badc:	20000164 	.word	0x20000164

0800bae0 <malloc>:
 800bae0:	4b02      	ldr	r3, [pc, #8]	; (800baec <malloc+0xc>)
 800bae2:	4601      	mov	r1, r0
 800bae4:	6818      	ldr	r0, [r3, #0]
 800bae6:	f000 bd65 	b.w	800c5b4 <_malloc_r>
 800baea:	bf00      	nop
 800baec:	2000000c 	.word	0x2000000c

0800baf0 <__ascii_mbtowc>:
 800baf0:	b082      	sub	sp, #8
 800baf2:	b901      	cbnz	r1, 800baf6 <__ascii_mbtowc+0x6>
 800baf4:	a901      	add	r1, sp, #4
 800baf6:	b142      	cbz	r2, 800bb0a <__ascii_mbtowc+0x1a>
 800baf8:	b14b      	cbz	r3, 800bb0e <__ascii_mbtowc+0x1e>
 800bafa:	7813      	ldrb	r3, [r2, #0]
 800bafc:	600b      	str	r3, [r1, #0]
 800bafe:	7812      	ldrb	r2, [r2, #0]
 800bb00:	1e10      	subs	r0, r2, #0
 800bb02:	bf18      	it	ne
 800bb04:	2001      	movne	r0, #1
 800bb06:	b002      	add	sp, #8
 800bb08:	4770      	bx	lr
 800bb0a:	4610      	mov	r0, r2
 800bb0c:	e7fb      	b.n	800bb06 <__ascii_mbtowc+0x16>
 800bb0e:	f06f 0001 	mvn.w	r0, #1
 800bb12:	e7f8      	b.n	800bb06 <__ascii_mbtowc+0x16>

0800bb14 <memchr>:
 800bb14:	4603      	mov	r3, r0
 800bb16:	b510      	push	{r4, lr}
 800bb18:	b2c9      	uxtb	r1, r1
 800bb1a:	4402      	add	r2, r0
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	4618      	mov	r0, r3
 800bb20:	d101      	bne.n	800bb26 <memchr+0x12>
 800bb22:	2000      	movs	r0, #0
 800bb24:	e003      	b.n	800bb2e <memchr+0x1a>
 800bb26:	7804      	ldrb	r4, [r0, #0]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	428c      	cmp	r4, r1
 800bb2c:	d1f6      	bne.n	800bb1c <memchr+0x8>
 800bb2e:	bd10      	pop	{r4, pc}

0800bb30 <memcpy>:
 800bb30:	440a      	add	r2, r1
 800bb32:	4291      	cmp	r1, r2
 800bb34:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb38:	d100      	bne.n	800bb3c <memcpy+0xc>
 800bb3a:	4770      	bx	lr
 800bb3c:	b510      	push	{r4, lr}
 800bb3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb42:	4291      	cmp	r1, r2
 800bb44:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb48:	d1f9      	bne.n	800bb3e <memcpy+0xe>
 800bb4a:	bd10      	pop	{r4, pc}

0800bb4c <_Balloc>:
 800bb4c:	b570      	push	{r4, r5, r6, lr}
 800bb4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb50:	4604      	mov	r4, r0
 800bb52:	460d      	mov	r5, r1
 800bb54:	b976      	cbnz	r6, 800bb74 <_Balloc+0x28>
 800bb56:	2010      	movs	r0, #16
 800bb58:	f7ff ffc2 	bl	800bae0 <malloc>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	6260      	str	r0, [r4, #36]	; 0x24
 800bb60:	b920      	cbnz	r0, 800bb6c <_Balloc+0x20>
 800bb62:	2166      	movs	r1, #102	; 0x66
 800bb64:	4b17      	ldr	r3, [pc, #92]	; (800bbc4 <_Balloc+0x78>)
 800bb66:	4818      	ldr	r0, [pc, #96]	; (800bbc8 <_Balloc+0x7c>)
 800bb68:	f000 ff2c 	bl	800c9c4 <__assert_func>
 800bb6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb70:	6006      	str	r6, [r0, #0]
 800bb72:	60c6      	str	r6, [r0, #12]
 800bb74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb76:	68f3      	ldr	r3, [r6, #12]
 800bb78:	b183      	cbz	r3, 800bb9c <_Balloc+0x50>
 800bb7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb82:	b9b8      	cbnz	r0, 800bbb4 <_Balloc+0x68>
 800bb84:	2101      	movs	r1, #1
 800bb86:	fa01 f605 	lsl.w	r6, r1, r5
 800bb8a:	1d72      	adds	r2, r6, #5
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	0092      	lsls	r2, r2, #2
 800bb90:	f000 fc94 	bl	800c4bc <_calloc_r>
 800bb94:	b160      	cbz	r0, 800bbb0 <_Balloc+0x64>
 800bb96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb9a:	e00e      	b.n	800bbba <_Balloc+0x6e>
 800bb9c:	2221      	movs	r2, #33	; 0x21
 800bb9e:	2104      	movs	r1, #4
 800bba0:	4620      	mov	r0, r4
 800bba2:	f000 fc8b 	bl	800c4bc <_calloc_r>
 800bba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bba8:	60f0      	str	r0, [r6, #12]
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d1e4      	bne.n	800bb7a <_Balloc+0x2e>
 800bbb0:	2000      	movs	r0, #0
 800bbb2:	bd70      	pop	{r4, r5, r6, pc}
 800bbb4:	6802      	ldr	r2, [r0, #0]
 800bbb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bbba:	2300      	movs	r3, #0
 800bbbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bbc0:	e7f7      	b.n	800bbb2 <_Balloc+0x66>
 800bbc2:	bf00      	nop
 800bbc4:	0801e1de 	.word	0x0801e1de
 800bbc8:	0801e320 	.word	0x0801e320

0800bbcc <_Bfree>:
 800bbcc:	b570      	push	{r4, r5, r6, lr}
 800bbce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bbd0:	4605      	mov	r5, r0
 800bbd2:	460c      	mov	r4, r1
 800bbd4:	b976      	cbnz	r6, 800bbf4 <_Bfree+0x28>
 800bbd6:	2010      	movs	r0, #16
 800bbd8:	f7ff ff82 	bl	800bae0 <malloc>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	6268      	str	r0, [r5, #36]	; 0x24
 800bbe0:	b920      	cbnz	r0, 800bbec <_Bfree+0x20>
 800bbe2:	218a      	movs	r1, #138	; 0x8a
 800bbe4:	4b08      	ldr	r3, [pc, #32]	; (800bc08 <_Bfree+0x3c>)
 800bbe6:	4809      	ldr	r0, [pc, #36]	; (800bc0c <_Bfree+0x40>)
 800bbe8:	f000 feec 	bl	800c9c4 <__assert_func>
 800bbec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbf0:	6006      	str	r6, [r0, #0]
 800bbf2:	60c6      	str	r6, [r0, #12]
 800bbf4:	b13c      	cbz	r4, 800bc06 <_Bfree+0x3a>
 800bbf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bbf8:	6862      	ldr	r2, [r4, #4]
 800bbfa:	68db      	ldr	r3, [r3, #12]
 800bbfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc00:	6021      	str	r1, [r4, #0]
 800bc02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc06:	bd70      	pop	{r4, r5, r6, pc}
 800bc08:	0801e1de 	.word	0x0801e1de
 800bc0c:	0801e320 	.word	0x0801e320

0800bc10 <__multadd>:
 800bc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc14:	4607      	mov	r7, r0
 800bc16:	460c      	mov	r4, r1
 800bc18:	461e      	mov	r6, r3
 800bc1a:	2000      	movs	r0, #0
 800bc1c:	690d      	ldr	r5, [r1, #16]
 800bc1e:	f101 0c14 	add.w	ip, r1, #20
 800bc22:	f8dc 3000 	ldr.w	r3, [ip]
 800bc26:	3001      	adds	r0, #1
 800bc28:	b299      	uxth	r1, r3
 800bc2a:	fb02 6101 	mla	r1, r2, r1, r6
 800bc2e:	0c1e      	lsrs	r6, r3, #16
 800bc30:	0c0b      	lsrs	r3, r1, #16
 800bc32:	fb02 3306 	mla	r3, r2, r6, r3
 800bc36:	b289      	uxth	r1, r1
 800bc38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc3c:	4285      	cmp	r5, r0
 800bc3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc42:	f84c 1b04 	str.w	r1, [ip], #4
 800bc46:	dcec      	bgt.n	800bc22 <__multadd+0x12>
 800bc48:	b30e      	cbz	r6, 800bc8e <__multadd+0x7e>
 800bc4a:	68a3      	ldr	r3, [r4, #8]
 800bc4c:	42ab      	cmp	r3, r5
 800bc4e:	dc19      	bgt.n	800bc84 <__multadd+0x74>
 800bc50:	6861      	ldr	r1, [r4, #4]
 800bc52:	4638      	mov	r0, r7
 800bc54:	3101      	adds	r1, #1
 800bc56:	f7ff ff79 	bl	800bb4c <_Balloc>
 800bc5a:	4680      	mov	r8, r0
 800bc5c:	b928      	cbnz	r0, 800bc6a <__multadd+0x5a>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	21b5      	movs	r1, #181	; 0xb5
 800bc62:	4b0c      	ldr	r3, [pc, #48]	; (800bc94 <__multadd+0x84>)
 800bc64:	480c      	ldr	r0, [pc, #48]	; (800bc98 <__multadd+0x88>)
 800bc66:	f000 fead 	bl	800c9c4 <__assert_func>
 800bc6a:	6922      	ldr	r2, [r4, #16]
 800bc6c:	f104 010c 	add.w	r1, r4, #12
 800bc70:	3202      	adds	r2, #2
 800bc72:	0092      	lsls	r2, r2, #2
 800bc74:	300c      	adds	r0, #12
 800bc76:	f7ff ff5b 	bl	800bb30 <memcpy>
 800bc7a:	4621      	mov	r1, r4
 800bc7c:	4638      	mov	r0, r7
 800bc7e:	f7ff ffa5 	bl	800bbcc <_Bfree>
 800bc82:	4644      	mov	r4, r8
 800bc84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc88:	3501      	adds	r5, #1
 800bc8a:	615e      	str	r6, [r3, #20]
 800bc8c:	6125      	str	r5, [r4, #16]
 800bc8e:	4620      	mov	r0, r4
 800bc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc94:	0801e273 	.word	0x0801e273
 800bc98:	0801e320 	.word	0x0801e320

0800bc9c <__s2b>:
 800bc9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bca0:	4615      	mov	r5, r2
 800bca2:	2209      	movs	r2, #9
 800bca4:	461f      	mov	r7, r3
 800bca6:	3308      	adds	r3, #8
 800bca8:	460c      	mov	r4, r1
 800bcaa:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcae:	4606      	mov	r6, r0
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	db09      	blt.n	800bccc <__s2b+0x30>
 800bcb8:	4630      	mov	r0, r6
 800bcba:	f7ff ff47 	bl	800bb4c <_Balloc>
 800bcbe:	b940      	cbnz	r0, 800bcd2 <__s2b+0x36>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	21ce      	movs	r1, #206	; 0xce
 800bcc4:	4b18      	ldr	r3, [pc, #96]	; (800bd28 <__s2b+0x8c>)
 800bcc6:	4819      	ldr	r0, [pc, #100]	; (800bd2c <__s2b+0x90>)
 800bcc8:	f000 fe7c 	bl	800c9c4 <__assert_func>
 800bccc:	0052      	lsls	r2, r2, #1
 800bcce:	3101      	adds	r1, #1
 800bcd0:	e7f0      	b.n	800bcb4 <__s2b+0x18>
 800bcd2:	9b08      	ldr	r3, [sp, #32]
 800bcd4:	2d09      	cmp	r5, #9
 800bcd6:	6143      	str	r3, [r0, #20]
 800bcd8:	f04f 0301 	mov.w	r3, #1
 800bcdc:	6103      	str	r3, [r0, #16]
 800bcde:	dd16      	ble.n	800bd0e <__s2b+0x72>
 800bce0:	f104 0909 	add.w	r9, r4, #9
 800bce4:	46c8      	mov	r8, r9
 800bce6:	442c      	add	r4, r5
 800bce8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bcec:	4601      	mov	r1, r0
 800bcee:	220a      	movs	r2, #10
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	3b30      	subs	r3, #48	; 0x30
 800bcf4:	f7ff ff8c 	bl	800bc10 <__multadd>
 800bcf8:	45a0      	cmp	r8, r4
 800bcfa:	d1f5      	bne.n	800bce8 <__s2b+0x4c>
 800bcfc:	f1a5 0408 	sub.w	r4, r5, #8
 800bd00:	444c      	add	r4, r9
 800bd02:	1b2d      	subs	r5, r5, r4
 800bd04:	1963      	adds	r3, r4, r5
 800bd06:	42bb      	cmp	r3, r7
 800bd08:	db04      	blt.n	800bd14 <__s2b+0x78>
 800bd0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd0e:	2509      	movs	r5, #9
 800bd10:	340a      	adds	r4, #10
 800bd12:	e7f6      	b.n	800bd02 <__s2b+0x66>
 800bd14:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bd18:	4601      	mov	r1, r0
 800bd1a:	220a      	movs	r2, #10
 800bd1c:	4630      	mov	r0, r6
 800bd1e:	3b30      	subs	r3, #48	; 0x30
 800bd20:	f7ff ff76 	bl	800bc10 <__multadd>
 800bd24:	e7ee      	b.n	800bd04 <__s2b+0x68>
 800bd26:	bf00      	nop
 800bd28:	0801e273 	.word	0x0801e273
 800bd2c:	0801e320 	.word	0x0801e320

0800bd30 <__hi0bits>:
 800bd30:	0c02      	lsrs	r2, r0, #16
 800bd32:	0412      	lsls	r2, r2, #16
 800bd34:	4603      	mov	r3, r0
 800bd36:	b9ca      	cbnz	r2, 800bd6c <__hi0bits+0x3c>
 800bd38:	0403      	lsls	r3, r0, #16
 800bd3a:	2010      	movs	r0, #16
 800bd3c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bd40:	bf04      	itt	eq
 800bd42:	021b      	lsleq	r3, r3, #8
 800bd44:	3008      	addeq	r0, #8
 800bd46:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bd4a:	bf04      	itt	eq
 800bd4c:	011b      	lsleq	r3, r3, #4
 800bd4e:	3004      	addeq	r0, #4
 800bd50:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bd54:	bf04      	itt	eq
 800bd56:	009b      	lsleq	r3, r3, #2
 800bd58:	3002      	addeq	r0, #2
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	db05      	blt.n	800bd6a <__hi0bits+0x3a>
 800bd5e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bd62:	f100 0001 	add.w	r0, r0, #1
 800bd66:	bf08      	it	eq
 800bd68:	2020      	moveq	r0, #32
 800bd6a:	4770      	bx	lr
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	e7e5      	b.n	800bd3c <__hi0bits+0xc>

0800bd70 <__lo0bits>:
 800bd70:	6803      	ldr	r3, [r0, #0]
 800bd72:	4602      	mov	r2, r0
 800bd74:	f013 0007 	ands.w	r0, r3, #7
 800bd78:	d00b      	beq.n	800bd92 <__lo0bits+0x22>
 800bd7a:	07d9      	lsls	r1, r3, #31
 800bd7c:	d421      	bmi.n	800bdc2 <__lo0bits+0x52>
 800bd7e:	0798      	lsls	r0, r3, #30
 800bd80:	bf49      	itett	mi
 800bd82:	085b      	lsrmi	r3, r3, #1
 800bd84:	089b      	lsrpl	r3, r3, #2
 800bd86:	2001      	movmi	r0, #1
 800bd88:	6013      	strmi	r3, [r2, #0]
 800bd8a:	bf5c      	itt	pl
 800bd8c:	2002      	movpl	r0, #2
 800bd8e:	6013      	strpl	r3, [r2, #0]
 800bd90:	4770      	bx	lr
 800bd92:	b299      	uxth	r1, r3
 800bd94:	b909      	cbnz	r1, 800bd9a <__lo0bits+0x2a>
 800bd96:	2010      	movs	r0, #16
 800bd98:	0c1b      	lsrs	r3, r3, #16
 800bd9a:	b2d9      	uxtb	r1, r3
 800bd9c:	b909      	cbnz	r1, 800bda2 <__lo0bits+0x32>
 800bd9e:	3008      	adds	r0, #8
 800bda0:	0a1b      	lsrs	r3, r3, #8
 800bda2:	0719      	lsls	r1, r3, #28
 800bda4:	bf04      	itt	eq
 800bda6:	091b      	lsreq	r3, r3, #4
 800bda8:	3004      	addeq	r0, #4
 800bdaa:	0799      	lsls	r1, r3, #30
 800bdac:	bf04      	itt	eq
 800bdae:	089b      	lsreq	r3, r3, #2
 800bdb0:	3002      	addeq	r0, #2
 800bdb2:	07d9      	lsls	r1, r3, #31
 800bdb4:	d403      	bmi.n	800bdbe <__lo0bits+0x4e>
 800bdb6:	085b      	lsrs	r3, r3, #1
 800bdb8:	f100 0001 	add.w	r0, r0, #1
 800bdbc:	d003      	beq.n	800bdc6 <__lo0bits+0x56>
 800bdbe:	6013      	str	r3, [r2, #0]
 800bdc0:	4770      	bx	lr
 800bdc2:	2000      	movs	r0, #0
 800bdc4:	4770      	bx	lr
 800bdc6:	2020      	movs	r0, #32
 800bdc8:	4770      	bx	lr
	...

0800bdcc <__i2b>:
 800bdcc:	b510      	push	{r4, lr}
 800bdce:	460c      	mov	r4, r1
 800bdd0:	2101      	movs	r1, #1
 800bdd2:	f7ff febb 	bl	800bb4c <_Balloc>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	b928      	cbnz	r0, 800bde6 <__i2b+0x1a>
 800bdda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bdde:	4b04      	ldr	r3, [pc, #16]	; (800bdf0 <__i2b+0x24>)
 800bde0:	4804      	ldr	r0, [pc, #16]	; (800bdf4 <__i2b+0x28>)
 800bde2:	f000 fdef 	bl	800c9c4 <__assert_func>
 800bde6:	2301      	movs	r3, #1
 800bde8:	6144      	str	r4, [r0, #20]
 800bdea:	6103      	str	r3, [r0, #16]
 800bdec:	bd10      	pop	{r4, pc}
 800bdee:	bf00      	nop
 800bdf0:	0801e273 	.word	0x0801e273
 800bdf4:	0801e320 	.word	0x0801e320

0800bdf8 <__multiply>:
 800bdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdfc:	4691      	mov	r9, r2
 800bdfe:	690a      	ldr	r2, [r1, #16]
 800be00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be04:	460c      	mov	r4, r1
 800be06:	429a      	cmp	r2, r3
 800be08:	bfbe      	ittt	lt
 800be0a:	460b      	movlt	r3, r1
 800be0c:	464c      	movlt	r4, r9
 800be0e:	4699      	movlt	r9, r3
 800be10:	6927      	ldr	r7, [r4, #16]
 800be12:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800be16:	68a3      	ldr	r3, [r4, #8]
 800be18:	6861      	ldr	r1, [r4, #4]
 800be1a:	eb07 060a 	add.w	r6, r7, sl
 800be1e:	42b3      	cmp	r3, r6
 800be20:	b085      	sub	sp, #20
 800be22:	bfb8      	it	lt
 800be24:	3101      	addlt	r1, #1
 800be26:	f7ff fe91 	bl	800bb4c <_Balloc>
 800be2a:	b930      	cbnz	r0, 800be3a <__multiply+0x42>
 800be2c:	4602      	mov	r2, r0
 800be2e:	f240 115d 	movw	r1, #349	; 0x15d
 800be32:	4b43      	ldr	r3, [pc, #268]	; (800bf40 <__multiply+0x148>)
 800be34:	4843      	ldr	r0, [pc, #268]	; (800bf44 <__multiply+0x14c>)
 800be36:	f000 fdc5 	bl	800c9c4 <__assert_func>
 800be3a:	f100 0514 	add.w	r5, r0, #20
 800be3e:	462b      	mov	r3, r5
 800be40:	2200      	movs	r2, #0
 800be42:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be46:	4543      	cmp	r3, r8
 800be48:	d321      	bcc.n	800be8e <__multiply+0x96>
 800be4a:	f104 0314 	add.w	r3, r4, #20
 800be4e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800be52:	f109 0314 	add.w	r3, r9, #20
 800be56:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800be5a:	9202      	str	r2, [sp, #8]
 800be5c:	1b3a      	subs	r2, r7, r4
 800be5e:	3a15      	subs	r2, #21
 800be60:	f022 0203 	bic.w	r2, r2, #3
 800be64:	3204      	adds	r2, #4
 800be66:	f104 0115 	add.w	r1, r4, #21
 800be6a:	428f      	cmp	r7, r1
 800be6c:	bf38      	it	cc
 800be6e:	2204      	movcc	r2, #4
 800be70:	9201      	str	r2, [sp, #4]
 800be72:	9a02      	ldr	r2, [sp, #8]
 800be74:	9303      	str	r3, [sp, #12]
 800be76:	429a      	cmp	r2, r3
 800be78:	d80c      	bhi.n	800be94 <__multiply+0x9c>
 800be7a:	2e00      	cmp	r6, #0
 800be7c:	dd03      	ble.n	800be86 <__multiply+0x8e>
 800be7e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be82:	2b00      	cmp	r3, #0
 800be84:	d059      	beq.n	800bf3a <__multiply+0x142>
 800be86:	6106      	str	r6, [r0, #16]
 800be88:	b005      	add	sp, #20
 800be8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8e:	f843 2b04 	str.w	r2, [r3], #4
 800be92:	e7d8      	b.n	800be46 <__multiply+0x4e>
 800be94:	f8b3 a000 	ldrh.w	sl, [r3]
 800be98:	f1ba 0f00 	cmp.w	sl, #0
 800be9c:	d023      	beq.n	800bee6 <__multiply+0xee>
 800be9e:	46a9      	mov	r9, r5
 800bea0:	f04f 0c00 	mov.w	ip, #0
 800bea4:	f104 0e14 	add.w	lr, r4, #20
 800bea8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800beac:	f8d9 1000 	ldr.w	r1, [r9]
 800beb0:	fa1f fb82 	uxth.w	fp, r2
 800beb4:	b289      	uxth	r1, r1
 800beb6:	fb0a 110b 	mla	r1, sl, fp, r1
 800beba:	4461      	add	r1, ip
 800bebc:	f8d9 c000 	ldr.w	ip, [r9]
 800bec0:	0c12      	lsrs	r2, r2, #16
 800bec2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bec6:	fb0a c202 	mla	r2, sl, r2, ip
 800beca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bece:	b289      	uxth	r1, r1
 800bed0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bed4:	4577      	cmp	r7, lr
 800bed6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800beda:	f849 1b04 	str.w	r1, [r9], #4
 800bede:	d8e3      	bhi.n	800bea8 <__multiply+0xb0>
 800bee0:	9a01      	ldr	r2, [sp, #4]
 800bee2:	f845 c002 	str.w	ip, [r5, r2]
 800bee6:	9a03      	ldr	r2, [sp, #12]
 800bee8:	3304      	adds	r3, #4
 800beea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800beee:	f1b9 0f00 	cmp.w	r9, #0
 800bef2:	d020      	beq.n	800bf36 <__multiply+0x13e>
 800bef4:	46ae      	mov	lr, r5
 800bef6:	f04f 0a00 	mov.w	sl, #0
 800befa:	6829      	ldr	r1, [r5, #0]
 800befc:	f104 0c14 	add.w	ip, r4, #20
 800bf00:	f8bc b000 	ldrh.w	fp, [ip]
 800bf04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bf08:	b289      	uxth	r1, r1
 800bf0a:	fb09 220b 	mla	r2, r9, fp, r2
 800bf0e:	4492      	add	sl, r2
 800bf10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bf14:	f84e 1b04 	str.w	r1, [lr], #4
 800bf18:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bf1c:	f8be 1000 	ldrh.w	r1, [lr]
 800bf20:	0c12      	lsrs	r2, r2, #16
 800bf22:	fb09 1102 	mla	r1, r9, r2, r1
 800bf26:	4567      	cmp	r7, ip
 800bf28:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bf2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bf30:	d8e6      	bhi.n	800bf00 <__multiply+0x108>
 800bf32:	9a01      	ldr	r2, [sp, #4]
 800bf34:	50a9      	str	r1, [r5, r2]
 800bf36:	3504      	adds	r5, #4
 800bf38:	e79b      	b.n	800be72 <__multiply+0x7a>
 800bf3a:	3e01      	subs	r6, #1
 800bf3c:	e79d      	b.n	800be7a <__multiply+0x82>
 800bf3e:	bf00      	nop
 800bf40:	0801e273 	.word	0x0801e273
 800bf44:	0801e320 	.word	0x0801e320

0800bf48 <__pow5mult>:
 800bf48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf4c:	4615      	mov	r5, r2
 800bf4e:	f012 0203 	ands.w	r2, r2, #3
 800bf52:	4606      	mov	r6, r0
 800bf54:	460f      	mov	r7, r1
 800bf56:	d007      	beq.n	800bf68 <__pow5mult+0x20>
 800bf58:	4c25      	ldr	r4, [pc, #148]	; (800bff0 <__pow5mult+0xa8>)
 800bf5a:	3a01      	subs	r2, #1
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf62:	f7ff fe55 	bl	800bc10 <__multadd>
 800bf66:	4607      	mov	r7, r0
 800bf68:	10ad      	asrs	r5, r5, #2
 800bf6a:	d03d      	beq.n	800bfe8 <__pow5mult+0xa0>
 800bf6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bf6e:	b97c      	cbnz	r4, 800bf90 <__pow5mult+0x48>
 800bf70:	2010      	movs	r0, #16
 800bf72:	f7ff fdb5 	bl	800bae0 <malloc>
 800bf76:	4602      	mov	r2, r0
 800bf78:	6270      	str	r0, [r6, #36]	; 0x24
 800bf7a:	b928      	cbnz	r0, 800bf88 <__pow5mult+0x40>
 800bf7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bf80:	4b1c      	ldr	r3, [pc, #112]	; (800bff4 <__pow5mult+0xac>)
 800bf82:	481d      	ldr	r0, [pc, #116]	; (800bff8 <__pow5mult+0xb0>)
 800bf84:	f000 fd1e 	bl	800c9c4 <__assert_func>
 800bf88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf8c:	6004      	str	r4, [r0, #0]
 800bf8e:	60c4      	str	r4, [r0, #12]
 800bf90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bf94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf98:	b94c      	cbnz	r4, 800bfae <__pow5mult+0x66>
 800bf9a:	f240 2171 	movw	r1, #625	; 0x271
 800bf9e:	4630      	mov	r0, r6
 800bfa0:	f7ff ff14 	bl	800bdcc <__i2b>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	4604      	mov	r4, r0
 800bfa8:	f8c8 0008 	str.w	r0, [r8, #8]
 800bfac:	6003      	str	r3, [r0, #0]
 800bfae:	f04f 0900 	mov.w	r9, #0
 800bfb2:	07eb      	lsls	r3, r5, #31
 800bfb4:	d50a      	bpl.n	800bfcc <__pow5mult+0x84>
 800bfb6:	4639      	mov	r1, r7
 800bfb8:	4622      	mov	r2, r4
 800bfba:	4630      	mov	r0, r6
 800bfbc:	f7ff ff1c 	bl	800bdf8 <__multiply>
 800bfc0:	4680      	mov	r8, r0
 800bfc2:	4639      	mov	r1, r7
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	f7ff fe01 	bl	800bbcc <_Bfree>
 800bfca:	4647      	mov	r7, r8
 800bfcc:	106d      	asrs	r5, r5, #1
 800bfce:	d00b      	beq.n	800bfe8 <__pow5mult+0xa0>
 800bfd0:	6820      	ldr	r0, [r4, #0]
 800bfd2:	b938      	cbnz	r0, 800bfe4 <__pow5mult+0x9c>
 800bfd4:	4622      	mov	r2, r4
 800bfd6:	4621      	mov	r1, r4
 800bfd8:	4630      	mov	r0, r6
 800bfda:	f7ff ff0d 	bl	800bdf8 <__multiply>
 800bfde:	6020      	str	r0, [r4, #0]
 800bfe0:	f8c0 9000 	str.w	r9, [r0]
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	e7e4      	b.n	800bfb2 <__pow5mult+0x6a>
 800bfe8:	4638      	mov	r0, r7
 800bfea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfee:	bf00      	nop
 800bff0:	0801e490 	.word	0x0801e490
 800bff4:	0801e1de 	.word	0x0801e1de
 800bff8:	0801e320 	.word	0x0801e320

0800bffc <__lshift>:
 800bffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c000:	460c      	mov	r4, r1
 800c002:	4607      	mov	r7, r0
 800c004:	4691      	mov	r9, r2
 800c006:	6923      	ldr	r3, [r4, #16]
 800c008:	6849      	ldr	r1, [r1, #4]
 800c00a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c00e:	68a3      	ldr	r3, [r4, #8]
 800c010:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c014:	f108 0601 	add.w	r6, r8, #1
 800c018:	42b3      	cmp	r3, r6
 800c01a:	db0b      	blt.n	800c034 <__lshift+0x38>
 800c01c:	4638      	mov	r0, r7
 800c01e:	f7ff fd95 	bl	800bb4c <_Balloc>
 800c022:	4605      	mov	r5, r0
 800c024:	b948      	cbnz	r0, 800c03a <__lshift+0x3e>
 800c026:	4602      	mov	r2, r0
 800c028:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c02c:	4b29      	ldr	r3, [pc, #164]	; (800c0d4 <__lshift+0xd8>)
 800c02e:	482a      	ldr	r0, [pc, #168]	; (800c0d8 <__lshift+0xdc>)
 800c030:	f000 fcc8 	bl	800c9c4 <__assert_func>
 800c034:	3101      	adds	r1, #1
 800c036:	005b      	lsls	r3, r3, #1
 800c038:	e7ee      	b.n	800c018 <__lshift+0x1c>
 800c03a:	2300      	movs	r3, #0
 800c03c:	f100 0114 	add.w	r1, r0, #20
 800c040:	f100 0210 	add.w	r2, r0, #16
 800c044:	4618      	mov	r0, r3
 800c046:	4553      	cmp	r3, sl
 800c048:	db37      	blt.n	800c0ba <__lshift+0xbe>
 800c04a:	6920      	ldr	r0, [r4, #16]
 800c04c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c050:	f104 0314 	add.w	r3, r4, #20
 800c054:	f019 091f 	ands.w	r9, r9, #31
 800c058:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c05c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c060:	d02f      	beq.n	800c0c2 <__lshift+0xc6>
 800c062:	468a      	mov	sl, r1
 800c064:	f04f 0c00 	mov.w	ip, #0
 800c068:	f1c9 0e20 	rsb	lr, r9, #32
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	fa02 f209 	lsl.w	r2, r2, r9
 800c072:	ea42 020c 	orr.w	r2, r2, ip
 800c076:	f84a 2b04 	str.w	r2, [sl], #4
 800c07a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c07e:	4298      	cmp	r0, r3
 800c080:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c084:	d8f2      	bhi.n	800c06c <__lshift+0x70>
 800c086:	1b03      	subs	r3, r0, r4
 800c088:	3b15      	subs	r3, #21
 800c08a:	f023 0303 	bic.w	r3, r3, #3
 800c08e:	3304      	adds	r3, #4
 800c090:	f104 0215 	add.w	r2, r4, #21
 800c094:	4290      	cmp	r0, r2
 800c096:	bf38      	it	cc
 800c098:	2304      	movcc	r3, #4
 800c09a:	f841 c003 	str.w	ip, [r1, r3]
 800c09e:	f1bc 0f00 	cmp.w	ip, #0
 800c0a2:	d001      	beq.n	800c0a8 <__lshift+0xac>
 800c0a4:	f108 0602 	add.w	r6, r8, #2
 800c0a8:	3e01      	subs	r6, #1
 800c0aa:	4638      	mov	r0, r7
 800c0ac:	4621      	mov	r1, r4
 800c0ae:	612e      	str	r6, [r5, #16]
 800c0b0:	f7ff fd8c 	bl	800bbcc <_Bfree>
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800c0be:	3301      	adds	r3, #1
 800c0c0:	e7c1      	b.n	800c046 <__lshift+0x4a>
 800c0c2:	3904      	subs	r1, #4
 800c0c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0c8:	4298      	cmp	r0, r3
 800c0ca:	f841 2f04 	str.w	r2, [r1, #4]!
 800c0ce:	d8f9      	bhi.n	800c0c4 <__lshift+0xc8>
 800c0d0:	e7ea      	b.n	800c0a8 <__lshift+0xac>
 800c0d2:	bf00      	nop
 800c0d4:	0801e273 	.word	0x0801e273
 800c0d8:	0801e320 	.word	0x0801e320

0800c0dc <__mcmp>:
 800c0dc:	4603      	mov	r3, r0
 800c0de:	690a      	ldr	r2, [r1, #16]
 800c0e0:	6900      	ldr	r0, [r0, #16]
 800c0e2:	b530      	push	{r4, r5, lr}
 800c0e4:	1a80      	subs	r0, r0, r2
 800c0e6:	d10d      	bne.n	800c104 <__mcmp+0x28>
 800c0e8:	3314      	adds	r3, #20
 800c0ea:	3114      	adds	r1, #20
 800c0ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c0f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c0f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c0f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c0fc:	4295      	cmp	r5, r2
 800c0fe:	d002      	beq.n	800c106 <__mcmp+0x2a>
 800c100:	d304      	bcc.n	800c10c <__mcmp+0x30>
 800c102:	2001      	movs	r0, #1
 800c104:	bd30      	pop	{r4, r5, pc}
 800c106:	42a3      	cmp	r3, r4
 800c108:	d3f4      	bcc.n	800c0f4 <__mcmp+0x18>
 800c10a:	e7fb      	b.n	800c104 <__mcmp+0x28>
 800c10c:	f04f 30ff 	mov.w	r0, #4294967295
 800c110:	e7f8      	b.n	800c104 <__mcmp+0x28>
	...

0800c114 <__mdiff>:
 800c114:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c118:	460d      	mov	r5, r1
 800c11a:	4607      	mov	r7, r0
 800c11c:	4611      	mov	r1, r2
 800c11e:	4628      	mov	r0, r5
 800c120:	4614      	mov	r4, r2
 800c122:	f7ff ffdb 	bl	800c0dc <__mcmp>
 800c126:	1e06      	subs	r6, r0, #0
 800c128:	d111      	bne.n	800c14e <__mdiff+0x3a>
 800c12a:	4631      	mov	r1, r6
 800c12c:	4638      	mov	r0, r7
 800c12e:	f7ff fd0d 	bl	800bb4c <_Balloc>
 800c132:	4602      	mov	r2, r0
 800c134:	b928      	cbnz	r0, 800c142 <__mdiff+0x2e>
 800c136:	f240 2132 	movw	r1, #562	; 0x232
 800c13a:	4b3a      	ldr	r3, [pc, #232]	; (800c224 <__mdiff+0x110>)
 800c13c:	483a      	ldr	r0, [pc, #232]	; (800c228 <__mdiff+0x114>)
 800c13e:	f000 fc41 	bl	800c9c4 <__assert_func>
 800c142:	2301      	movs	r3, #1
 800c144:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c148:	4610      	mov	r0, r2
 800c14a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c14e:	bfa4      	itt	ge
 800c150:	4623      	movge	r3, r4
 800c152:	462c      	movge	r4, r5
 800c154:	4638      	mov	r0, r7
 800c156:	6861      	ldr	r1, [r4, #4]
 800c158:	bfa6      	itte	ge
 800c15a:	461d      	movge	r5, r3
 800c15c:	2600      	movge	r6, #0
 800c15e:	2601      	movlt	r6, #1
 800c160:	f7ff fcf4 	bl	800bb4c <_Balloc>
 800c164:	4602      	mov	r2, r0
 800c166:	b918      	cbnz	r0, 800c170 <__mdiff+0x5c>
 800c168:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c16c:	4b2d      	ldr	r3, [pc, #180]	; (800c224 <__mdiff+0x110>)
 800c16e:	e7e5      	b.n	800c13c <__mdiff+0x28>
 800c170:	f102 0814 	add.w	r8, r2, #20
 800c174:	46c2      	mov	sl, r8
 800c176:	f04f 0c00 	mov.w	ip, #0
 800c17a:	6927      	ldr	r7, [r4, #16]
 800c17c:	60c6      	str	r6, [r0, #12]
 800c17e:	692e      	ldr	r6, [r5, #16]
 800c180:	f104 0014 	add.w	r0, r4, #20
 800c184:	f105 0914 	add.w	r9, r5, #20
 800c188:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c18c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c190:	3410      	adds	r4, #16
 800c192:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c196:	f859 3b04 	ldr.w	r3, [r9], #4
 800c19a:	fa1f f18b 	uxth.w	r1, fp
 800c19e:	448c      	add	ip, r1
 800c1a0:	b299      	uxth	r1, r3
 800c1a2:	0c1b      	lsrs	r3, r3, #16
 800c1a4:	ebac 0101 	sub.w	r1, ip, r1
 800c1a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c1ac:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c1b0:	b289      	uxth	r1, r1
 800c1b2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c1b6:	454e      	cmp	r6, r9
 800c1b8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c1bc:	f84a 3b04 	str.w	r3, [sl], #4
 800c1c0:	d8e7      	bhi.n	800c192 <__mdiff+0x7e>
 800c1c2:	1b73      	subs	r3, r6, r5
 800c1c4:	3b15      	subs	r3, #21
 800c1c6:	f023 0303 	bic.w	r3, r3, #3
 800c1ca:	3515      	adds	r5, #21
 800c1cc:	3304      	adds	r3, #4
 800c1ce:	42ae      	cmp	r6, r5
 800c1d0:	bf38      	it	cc
 800c1d2:	2304      	movcc	r3, #4
 800c1d4:	4418      	add	r0, r3
 800c1d6:	4443      	add	r3, r8
 800c1d8:	461e      	mov	r6, r3
 800c1da:	4605      	mov	r5, r0
 800c1dc:	4575      	cmp	r5, lr
 800c1de:	d30e      	bcc.n	800c1fe <__mdiff+0xea>
 800c1e0:	f10e 0103 	add.w	r1, lr, #3
 800c1e4:	1a09      	subs	r1, r1, r0
 800c1e6:	f021 0103 	bic.w	r1, r1, #3
 800c1ea:	3803      	subs	r0, #3
 800c1ec:	4586      	cmp	lr, r0
 800c1ee:	bf38      	it	cc
 800c1f0:	2100      	movcc	r1, #0
 800c1f2:	4419      	add	r1, r3
 800c1f4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c1f8:	b18b      	cbz	r3, 800c21e <__mdiff+0x10a>
 800c1fa:	6117      	str	r7, [r2, #16]
 800c1fc:	e7a4      	b.n	800c148 <__mdiff+0x34>
 800c1fe:	f855 8b04 	ldr.w	r8, [r5], #4
 800c202:	fa1f f188 	uxth.w	r1, r8
 800c206:	4461      	add	r1, ip
 800c208:	140c      	asrs	r4, r1, #16
 800c20a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c20e:	b289      	uxth	r1, r1
 800c210:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c214:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c218:	f846 1b04 	str.w	r1, [r6], #4
 800c21c:	e7de      	b.n	800c1dc <__mdiff+0xc8>
 800c21e:	3f01      	subs	r7, #1
 800c220:	e7e8      	b.n	800c1f4 <__mdiff+0xe0>
 800c222:	bf00      	nop
 800c224:	0801e273 	.word	0x0801e273
 800c228:	0801e320 	.word	0x0801e320

0800c22c <__ulp>:
 800c22c:	4b11      	ldr	r3, [pc, #68]	; (800c274 <__ulp+0x48>)
 800c22e:	400b      	ands	r3, r1
 800c230:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c234:	2b00      	cmp	r3, #0
 800c236:	dd02      	ble.n	800c23e <__ulp+0x12>
 800c238:	2000      	movs	r0, #0
 800c23a:	4619      	mov	r1, r3
 800c23c:	4770      	bx	lr
 800c23e:	425b      	negs	r3, r3
 800c240:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c244:	f04f 0000 	mov.w	r0, #0
 800c248:	f04f 0100 	mov.w	r1, #0
 800c24c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c250:	da04      	bge.n	800c25c <__ulp+0x30>
 800c252:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c256:	fa43 f102 	asr.w	r1, r3, r2
 800c25a:	4770      	bx	lr
 800c25c:	f1a2 0314 	sub.w	r3, r2, #20
 800c260:	2b1e      	cmp	r3, #30
 800c262:	bfd6      	itet	le
 800c264:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c268:	2301      	movgt	r3, #1
 800c26a:	fa22 f303 	lsrle.w	r3, r2, r3
 800c26e:	4618      	mov	r0, r3
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	7ff00000 	.word	0x7ff00000

0800c278 <__b2d>:
 800c278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c27c:	6907      	ldr	r7, [r0, #16]
 800c27e:	f100 0914 	add.w	r9, r0, #20
 800c282:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c286:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c28a:	f1a7 0804 	sub.w	r8, r7, #4
 800c28e:	4630      	mov	r0, r6
 800c290:	f7ff fd4e 	bl	800bd30 <__hi0bits>
 800c294:	f1c0 0320 	rsb	r3, r0, #32
 800c298:	280a      	cmp	r0, #10
 800c29a:	600b      	str	r3, [r1, #0]
 800c29c:	491f      	ldr	r1, [pc, #124]	; (800c31c <__b2d+0xa4>)
 800c29e:	dc17      	bgt.n	800c2d0 <__b2d+0x58>
 800c2a0:	45c1      	cmp	r9, r8
 800c2a2:	bf28      	it	cs
 800c2a4:	2200      	movcs	r2, #0
 800c2a6:	f1c0 0c0b 	rsb	ip, r0, #11
 800c2aa:	fa26 f30c 	lsr.w	r3, r6, ip
 800c2ae:	bf38      	it	cc
 800c2b0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c2b4:	ea43 0501 	orr.w	r5, r3, r1
 800c2b8:	f100 0315 	add.w	r3, r0, #21
 800c2bc:	fa06 f303 	lsl.w	r3, r6, r3
 800c2c0:	fa22 f20c 	lsr.w	r2, r2, ip
 800c2c4:	ea43 0402 	orr.w	r4, r3, r2
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	4629      	mov	r1, r5
 800c2cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2d0:	45c1      	cmp	r9, r8
 800c2d2:	bf2e      	itee	cs
 800c2d4:	2200      	movcs	r2, #0
 800c2d6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c2da:	f1a7 0808 	subcc.w	r8, r7, #8
 800c2de:	f1b0 030b 	subs.w	r3, r0, #11
 800c2e2:	d016      	beq.n	800c312 <__b2d+0x9a>
 800c2e4:	f1c3 0720 	rsb	r7, r3, #32
 800c2e8:	fa22 f107 	lsr.w	r1, r2, r7
 800c2ec:	45c8      	cmp	r8, r9
 800c2ee:	fa06 f603 	lsl.w	r6, r6, r3
 800c2f2:	ea46 0601 	orr.w	r6, r6, r1
 800c2f6:	bf94      	ite	ls
 800c2f8:	2100      	movls	r1, #0
 800c2fa:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c2fe:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c302:	fa02 f003 	lsl.w	r0, r2, r3
 800c306:	40f9      	lsrs	r1, r7
 800c308:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c30c:	ea40 0401 	orr.w	r4, r0, r1
 800c310:	e7da      	b.n	800c2c8 <__b2d+0x50>
 800c312:	4614      	mov	r4, r2
 800c314:	ea46 0501 	orr.w	r5, r6, r1
 800c318:	e7d6      	b.n	800c2c8 <__b2d+0x50>
 800c31a:	bf00      	nop
 800c31c:	3ff00000 	.word	0x3ff00000

0800c320 <__d2b>:
 800c320:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c324:	2101      	movs	r1, #1
 800c326:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c32a:	4690      	mov	r8, r2
 800c32c:	461d      	mov	r5, r3
 800c32e:	f7ff fc0d 	bl	800bb4c <_Balloc>
 800c332:	4604      	mov	r4, r0
 800c334:	b930      	cbnz	r0, 800c344 <__d2b+0x24>
 800c336:	4602      	mov	r2, r0
 800c338:	f240 310a 	movw	r1, #778	; 0x30a
 800c33c:	4b24      	ldr	r3, [pc, #144]	; (800c3d0 <__d2b+0xb0>)
 800c33e:	4825      	ldr	r0, [pc, #148]	; (800c3d4 <__d2b+0xb4>)
 800c340:	f000 fb40 	bl	800c9c4 <__assert_func>
 800c344:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c348:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c34c:	bb2d      	cbnz	r5, 800c39a <__d2b+0x7a>
 800c34e:	9301      	str	r3, [sp, #4]
 800c350:	f1b8 0300 	subs.w	r3, r8, #0
 800c354:	d026      	beq.n	800c3a4 <__d2b+0x84>
 800c356:	4668      	mov	r0, sp
 800c358:	9300      	str	r3, [sp, #0]
 800c35a:	f7ff fd09 	bl	800bd70 <__lo0bits>
 800c35e:	9900      	ldr	r1, [sp, #0]
 800c360:	b1f0      	cbz	r0, 800c3a0 <__d2b+0x80>
 800c362:	9a01      	ldr	r2, [sp, #4]
 800c364:	f1c0 0320 	rsb	r3, r0, #32
 800c368:	fa02 f303 	lsl.w	r3, r2, r3
 800c36c:	430b      	orrs	r3, r1
 800c36e:	40c2      	lsrs	r2, r0
 800c370:	6163      	str	r3, [r4, #20]
 800c372:	9201      	str	r2, [sp, #4]
 800c374:	9b01      	ldr	r3, [sp, #4]
 800c376:	2b00      	cmp	r3, #0
 800c378:	bf14      	ite	ne
 800c37a:	2102      	movne	r1, #2
 800c37c:	2101      	moveq	r1, #1
 800c37e:	61a3      	str	r3, [r4, #24]
 800c380:	6121      	str	r1, [r4, #16]
 800c382:	b1c5      	cbz	r5, 800c3b6 <__d2b+0x96>
 800c384:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c388:	4405      	add	r5, r0
 800c38a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c38e:	603d      	str	r5, [r7, #0]
 800c390:	6030      	str	r0, [r6, #0]
 800c392:	4620      	mov	r0, r4
 800c394:	b002      	add	sp, #8
 800c396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c39a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c39e:	e7d6      	b.n	800c34e <__d2b+0x2e>
 800c3a0:	6161      	str	r1, [r4, #20]
 800c3a2:	e7e7      	b.n	800c374 <__d2b+0x54>
 800c3a4:	a801      	add	r0, sp, #4
 800c3a6:	f7ff fce3 	bl	800bd70 <__lo0bits>
 800c3aa:	2101      	movs	r1, #1
 800c3ac:	9b01      	ldr	r3, [sp, #4]
 800c3ae:	6121      	str	r1, [r4, #16]
 800c3b0:	6163      	str	r3, [r4, #20]
 800c3b2:	3020      	adds	r0, #32
 800c3b4:	e7e5      	b.n	800c382 <__d2b+0x62>
 800c3b6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c3ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c3be:	6038      	str	r0, [r7, #0]
 800c3c0:	6918      	ldr	r0, [r3, #16]
 800c3c2:	f7ff fcb5 	bl	800bd30 <__hi0bits>
 800c3c6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c3ca:	6031      	str	r1, [r6, #0]
 800c3cc:	e7e1      	b.n	800c392 <__d2b+0x72>
 800c3ce:	bf00      	nop
 800c3d0:	0801e273 	.word	0x0801e273
 800c3d4:	0801e320 	.word	0x0801e320

0800c3d8 <__ratio>:
 800c3d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3dc:	4688      	mov	r8, r1
 800c3de:	4669      	mov	r1, sp
 800c3e0:	4681      	mov	r9, r0
 800c3e2:	f7ff ff49 	bl	800c278 <__b2d>
 800c3e6:	460f      	mov	r7, r1
 800c3e8:	4604      	mov	r4, r0
 800c3ea:	460d      	mov	r5, r1
 800c3ec:	4640      	mov	r0, r8
 800c3ee:	a901      	add	r1, sp, #4
 800c3f0:	f7ff ff42 	bl	800c278 <__b2d>
 800c3f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3f8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c3fc:	468b      	mov	fp, r1
 800c3fe:	eba3 0c02 	sub.w	ip, r3, r2
 800c402:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c406:	1a9b      	subs	r3, r3, r2
 800c408:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	bfd5      	itete	le
 800c410:	460a      	movle	r2, r1
 800c412:	462a      	movgt	r2, r5
 800c414:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c418:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c41c:	bfd8      	it	le
 800c41e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c422:	465b      	mov	r3, fp
 800c424:	4602      	mov	r2, r0
 800c426:	4639      	mov	r1, r7
 800c428:	4620      	mov	r0, r4
 800c42a:	f7fa fa0d 	bl	8006848 <__aeabi_ddiv>
 800c42e:	b003      	add	sp, #12
 800c430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c434 <__copybits>:
 800c434:	3901      	subs	r1, #1
 800c436:	b570      	push	{r4, r5, r6, lr}
 800c438:	1149      	asrs	r1, r1, #5
 800c43a:	6914      	ldr	r4, [r2, #16]
 800c43c:	3101      	adds	r1, #1
 800c43e:	f102 0314 	add.w	r3, r2, #20
 800c442:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c446:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c44a:	1f05      	subs	r5, r0, #4
 800c44c:	42a3      	cmp	r3, r4
 800c44e:	d30c      	bcc.n	800c46a <__copybits+0x36>
 800c450:	1aa3      	subs	r3, r4, r2
 800c452:	3b11      	subs	r3, #17
 800c454:	f023 0303 	bic.w	r3, r3, #3
 800c458:	3211      	adds	r2, #17
 800c45a:	42a2      	cmp	r2, r4
 800c45c:	bf88      	it	hi
 800c45e:	2300      	movhi	r3, #0
 800c460:	4418      	add	r0, r3
 800c462:	2300      	movs	r3, #0
 800c464:	4288      	cmp	r0, r1
 800c466:	d305      	bcc.n	800c474 <__copybits+0x40>
 800c468:	bd70      	pop	{r4, r5, r6, pc}
 800c46a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c46e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c472:	e7eb      	b.n	800c44c <__copybits+0x18>
 800c474:	f840 3b04 	str.w	r3, [r0], #4
 800c478:	e7f4      	b.n	800c464 <__copybits+0x30>

0800c47a <__any_on>:
 800c47a:	f100 0214 	add.w	r2, r0, #20
 800c47e:	6900      	ldr	r0, [r0, #16]
 800c480:	114b      	asrs	r3, r1, #5
 800c482:	4298      	cmp	r0, r3
 800c484:	b510      	push	{r4, lr}
 800c486:	db11      	blt.n	800c4ac <__any_on+0x32>
 800c488:	dd0a      	ble.n	800c4a0 <__any_on+0x26>
 800c48a:	f011 011f 	ands.w	r1, r1, #31
 800c48e:	d007      	beq.n	800c4a0 <__any_on+0x26>
 800c490:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c494:	fa24 f001 	lsr.w	r0, r4, r1
 800c498:	fa00 f101 	lsl.w	r1, r0, r1
 800c49c:	428c      	cmp	r4, r1
 800c49e:	d10b      	bne.n	800c4b8 <__any_on+0x3e>
 800c4a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d803      	bhi.n	800c4b0 <__any_on+0x36>
 800c4a8:	2000      	movs	r0, #0
 800c4aa:	bd10      	pop	{r4, pc}
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	e7f7      	b.n	800c4a0 <__any_on+0x26>
 800c4b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c4b4:	2900      	cmp	r1, #0
 800c4b6:	d0f5      	beq.n	800c4a4 <__any_on+0x2a>
 800c4b8:	2001      	movs	r0, #1
 800c4ba:	e7f6      	b.n	800c4aa <__any_on+0x30>

0800c4bc <_calloc_r>:
 800c4bc:	b570      	push	{r4, r5, r6, lr}
 800c4be:	fba1 5402 	umull	r5, r4, r1, r2
 800c4c2:	b934      	cbnz	r4, 800c4d2 <_calloc_r+0x16>
 800c4c4:	4629      	mov	r1, r5
 800c4c6:	f000 f875 	bl	800c5b4 <_malloc_r>
 800c4ca:	4606      	mov	r6, r0
 800c4cc:	b928      	cbnz	r0, 800c4da <_calloc_r+0x1e>
 800c4ce:	4630      	mov	r0, r6
 800c4d0:	bd70      	pop	{r4, r5, r6, pc}
 800c4d2:	220c      	movs	r2, #12
 800c4d4:	2600      	movs	r6, #0
 800c4d6:	6002      	str	r2, [r0, #0]
 800c4d8:	e7f9      	b.n	800c4ce <_calloc_r+0x12>
 800c4da:	462a      	mov	r2, r5
 800c4dc:	4621      	mov	r1, r4
 800c4de:	f7fc fbe7 	bl	8008cb0 <memset>
 800c4e2:	e7f4      	b.n	800c4ce <_calloc_r+0x12>

0800c4e4 <_free_r>:
 800c4e4:	b538      	push	{r3, r4, r5, lr}
 800c4e6:	4605      	mov	r5, r0
 800c4e8:	2900      	cmp	r1, #0
 800c4ea:	d040      	beq.n	800c56e <_free_r+0x8a>
 800c4ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4f0:	1f0c      	subs	r4, r1, #4
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	bfb8      	it	lt
 800c4f6:	18e4      	addlt	r4, r4, r3
 800c4f8:	f000 faae 	bl	800ca58 <__malloc_lock>
 800c4fc:	4a1c      	ldr	r2, [pc, #112]	; (800c570 <_free_r+0x8c>)
 800c4fe:	6813      	ldr	r3, [r2, #0]
 800c500:	b933      	cbnz	r3, 800c510 <_free_r+0x2c>
 800c502:	6063      	str	r3, [r4, #4]
 800c504:	6014      	str	r4, [r2, #0]
 800c506:	4628      	mov	r0, r5
 800c508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c50c:	f000 baaa 	b.w	800ca64 <__malloc_unlock>
 800c510:	42a3      	cmp	r3, r4
 800c512:	d908      	bls.n	800c526 <_free_r+0x42>
 800c514:	6820      	ldr	r0, [r4, #0]
 800c516:	1821      	adds	r1, r4, r0
 800c518:	428b      	cmp	r3, r1
 800c51a:	bf01      	itttt	eq
 800c51c:	6819      	ldreq	r1, [r3, #0]
 800c51e:	685b      	ldreq	r3, [r3, #4]
 800c520:	1809      	addeq	r1, r1, r0
 800c522:	6021      	streq	r1, [r4, #0]
 800c524:	e7ed      	b.n	800c502 <_free_r+0x1e>
 800c526:	461a      	mov	r2, r3
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	b10b      	cbz	r3, 800c530 <_free_r+0x4c>
 800c52c:	42a3      	cmp	r3, r4
 800c52e:	d9fa      	bls.n	800c526 <_free_r+0x42>
 800c530:	6811      	ldr	r1, [r2, #0]
 800c532:	1850      	adds	r0, r2, r1
 800c534:	42a0      	cmp	r0, r4
 800c536:	d10b      	bne.n	800c550 <_free_r+0x6c>
 800c538:	6820      	ldr	r0, [r4, #0]
 800c53a:	4401      	add	r1, r0
 800c53c:	1850      	adds	r0, r2, r1
 800c53e:	4283      	cmp	r3, r0
 800c540:	6011      	str	r1, [r2, #0]
 800c542:	d1e0      	bne.n	800c506 <_free_r+0x22>
 800c544:	6818      	ldr	r0, [r3, #0]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	4401      	add	r1, r0
 800c54a:	6011      	str	r1, [r2, #0]
 800c54c:	6053      	str	r3, [r2, #4]
 800c54e:	e7da      	b.n	800c506 <_free_r+0x22>
 800c550:	d902      	bls.n	800c558 <_free_r+0x74>
 800c552:	230c      	movs	r3, #12
 800c554:	602b      	str	r3, [r5, #0]
 800c556:	e7d6      	b.n	800c506 <_free_r+0x22>
 800c558:	6820      	ldr	r0, [r4, #0]
 800c55a:	1821      	adds	r1, r4, r0
 800c55c:	428b      	cmp	r3, r1
 800c55e:	bf01      	itttt	eq
 800c560:	6819      	ldreq	r1, [r3, #0]
 800c562:	685b      	ldreq	r3, [r3, #4]
 800c564:	1809      	addeq	r1, r1, r0
 800c566:	6021      	streq	r1, [r4, #0]
 800c568:	6063      	str	r3, [r4, #4]
 800c56a:	6054      	str	r4, [r2, #4]
 800c56c:	e7cb      	b.n	800c506 <_free_r+0x22>
 800c56e:	bd38      	pop	{r3, r4, r5, pc}
 800c570:	200008ec 	.word	0x200008ec

0800c574 <sbrk_aligned>:
 800c574:	b570      	push	{r4, r5, r6, lr}
 800c576:	4e0e      	ldr	r6, [pc, #56]	; (800c5b0 <sbrk_aligned+0x3c>)
 800c578:	460c      	mov	r4, r1
 800c57a:	6831      	ldr	r1, [r6, #0]
 800c57c:	4605      	mov	r5, r0
 800c57e:	b911      	cbnz	r1, 800c586 <sbrk_aligned+0x12>
 800c580:	f000 f9ee 	bl	800c960 <_sbrk_r>
 800c584:	6030      	str	r0, [r6, #0]
 800c586:	4621      	mov	r1, r4
 800c588:	4628      	mov	r0, r5
 800c58a:	f000 f9e9 	bl	800c960 <_sbrk_r>
 800c58e:	1c43      	adds	r3, r0, #1
 800c590:	d00a      	beq.n	800c5a8 <sbrk_aligned+0x34>
 800c592:	1cc4      	adds	r4, r0, #3
 800c594:	f024 0403 	bic.w	r4, r4, #3
 800c598:	42a0      	cmp	r0, r4
 800c59a:	d007      	beq.n	800c5ac <sbrk_aligned+0x38>
 800c59c:	1a21      	subs	r1, r4, r0
 800c59e:	4628      	mov	r0, r5
 800c5a0:	f000 f9de 	bl	800c960 <_sbrk_r>
 800c5a4:	3001      	adds	r0, #1
 800c5a6:	d101      	bne.n	800c5ac <sbrk_aligned+0x38>
 800c5a8:	f04f 34ff 	mov.w	r4, #4294967295
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	bd70      	pop	{r4, r5, r6, pc}
 800c5b0:	200008f0 	.word	0x200008f0

0800c5b4 <_malloc_r>:
 800c5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5b8:	1ccd      	adds	r5, r1, #3
 800c5ba:	f025 0503 	bic.w	r5, r5, #3
 800c5be:	3508      	adds	r5, #8
 800c5c0:	2d0c      	cmp	r5, #12
 800c5c2:	bf38      	it	cc
 800c5c4:	250c      	movcc	r5, #12
 800c5c6:	2d00      	cmp	r5, #0
 800c5c8:	4607      	mov	r7, r0
 800c5ca:	db01      	blt.n	800c5d0 <_malloc_r+0x1c>
 800c5cc:	42a9      	cmp	r1, r5
 800c5ce:	d905      	bls.n	800c5dc <_malloc_r+0x28>
 800c5d0:	230c      	movs	r3, #12
 800c5d2:	2600      	movs	r6, #0
 800c5d4:	603b      	str	r3, [r7, #0]
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5dc:	4e2e      	ldr	r6, [pc, #184]	; (800c698 <_malloc_r+0xe4>)
 800c5de:	f000 fa3b 	bl	800ca58 <__malloc_lock>
 800c5e2:	6833      	ldr	r3, [r6, #0]
 800c5e4:	461c      	mov	r4, r3
 800c5e6:	bb34      	cbnz	r4, 800c636 <_malloc_r+0x82>
 800c5e8:	4629      	mov	r1, r5
 800c5ea:	4638      	mov	r0, r7
 800c5ec:	f7ff ffc2 	bl	800c574 <sbrk_aligned>
 800c5f0:	1c43      	adds	r3, r0, #1
 800c5f2:	4604      	mov	r4, r0
 800c5f4:	d14d      	bne.n	800c692 <_malloc_r+0xde>
 800c5f6:	6834      	ldr	r4, [r6, #0]
 800c5f8:	4626      	mov	r6, r4
 800c5fa:	2e00      	cmp	r6, #0
 800c5fc:	d140      	bne.n	800c680 <_malloc_r+0xcc>
 800c5fe:	6823      	ldr	r3, [r4, #0]
 800c600:	4631      	mov	r1, r6
 800c602:	4638      	mov	r0, r7
 800c604:	eb04 0803 	add.w	r8, r4, r3
 800c608:	f000 f9aa 	bl	800c960 <_sbrk_r>
 800c60c:	4580      	cmp	r8, r0
 800c60e:	d13a      	bne.n	800c686 <_malloc_r+0xd2>
 800c610:	6821      	ldr	r1, [r4, #0]
 800c612:	3503      	adds	r5, #3
 800c614:	1a6d      	subs	r5, r5, r1
 800c616:	f025 0503 	bic.w	r5, r5, #3
 800c61a:	3508      	adds	r5, #8
 800c61c:	2d0c      	cmp	r5, #12
 800c61e:	bf38      	it	cc
 800c620:	250c      	movcc	r5, #12
 800c622:	4638      	mov	r0, r7
 800c624:	4629      	mov	r1, r5
 800c626:	f7ff ffa5 	bl	800c574 <sbrk_aligned>
 800c62a:	3001      	adds	r0, #1
 800c62c:	d02b      	beq.n	800c686 <_malloc_r+0xd2>
 800c62e:	6823      	ldr	r3, [r4, #0]
 800c630:	442b      	add	r3, r5
 800c632:	6023      	str	r3, [r4, #0]
 800c634:	e00e      	b.n	800c654 <_malloc_r+0xa0>
 800c636:	6822      	ldr	r2, [r4, #0]
 800c638:	1b52      	subs	r2, r2, r5
 800c63a:	d41e      	bmi.n	800c67a <_malloc_r+0xc6>
 800c63c:	2a0b      	cmp	r2, #11
 800c63e:	d916      	bls.n	800c66e <_malloc_r+0xba>
 800c640:	1961      	adds	r1, r4, r5
 800c642:	42a3      	cmp	r3, r4
 800c644:	6025      	str	r5, [r4, #0]
 800c646:	bf18      	it	ne
 800c648:	6059      	strne	r1, [r3, #4]
 800c64a:	6863      	ldr	r3, [r4, #4]
 800c64c:	bf08      	it	eq
 800c64e:	6031      	streq	r1, [r6, #0]
 800c650:	5162      	str	r2, [r4, r5]
 800c652:	604b      	str	r3, [r1, #4]
 800c654:	4638      	mov	r0, r7
 800c656:	f104 060b 	add.w	r6, r4, #11
 800c65a:	f000 fa03 	bl	800ca64 <__malloc_unlock>
 800c65e:	f026 0607 	bic.w	r6, r6, #7
 800c662:	1d23      	adds	r3, r4, #4
 800c664:	1af2      	subs	r2, r6, r3
 800c666:	d0b6      	beq.n	800c5d6 <_malloc_r+0x22>
 800c668:	1b9b      	subs	r3, r3, r6
 800c66a:	50a3      	str	r3, [r4, r2]
 800c66c:	e7b3      	b.n	800c5d6 <_malloc_r+0x22>
 800c66e:	6862      	ldr	r2, [r4, #4]
 800c670:	42a3      	cmp	r3, r4
 800c672:	bf0c      	ite	eq
 800c674:	6032      	streq	r2, [r6, #0]
 800c676:	605a      	strne	r2, [r3, #4]
 800c678:	e7ec      	b.n	800c654 <_malloc_r+0xa0>
 800c67a:	4623      	mov	r3, r4
 800c67c:	6864      	ldr	r4, [r4, #4]
 800c67e:	e7b2      	b.n	800c5e6 <_malloc_r+0x32>
 800c680:	4634      	mov	r4, r6
 800c682:	6876      	ldr	r6, [r6, #4]
 800c684:	e7b9      	b.n	800c5fa <_malloc_r+0x46>
 800c686:	230c      	movs	r3, #12
 800c688:	4638      	mov	r0, r7
 800c68a:	603b      	str	r3, [r7, #0]
 800c68c:	f000 f9ea 	bl	800ca64 <__malloc_unlock>
 800c690:	e7a1      	b.n	800c5d6 <_malloc_r+0x22>
 800c692:	6025      	str	r5, [r4, #0]
 800c694:	e7de      	b.n	800c654 <_malloc_r+0xa0>
 800c696:	bf00      	nop
 800c698:	200008ec 	.word	0x200008ec

0800c69c <__ssputs_r>:
 800c69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6a0:	688e      	ldr	r6, [r1, #8]
 800c6a2:	4682      	mov	sl, r0
 800c6a4:	429e      	cmp	r6, r3
 800c6a6:	460c      	mov	r4, r1
 800c6a8:	4690      	mov	r8, r2
 800c6aa:	461f      	mov	r7, r3
 800c6ac:	d838      	bhi.n	800c720 <__ssputs_r+0x84>
 800c6ae:	898a      	ldrh	r2, [r1, #12]
 800c6b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c6b4:	d032      	beq.n	800c71c <__ssputs_r+0x80>
 800c6b6:	6825      	ldr	r5, [r4, #0]
 800c6b8:	6909      	ldr	r1, [r1, #16]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	eba5 0901 	sub.w	r9, r5, r1
 800c6c0:	6965      	ldr	r5, [r4, #20]
 800c6c2:	444b      	add	r3, r9
 800c6c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c6cc:	106d      	asrs	r5, r5, #1
 800c6ce:	429d      	cmp	r5, r3
 800c6d0:	bf38      	it	cc
 800c6d2:	461d      	movcc	r5, r3
 800c6d4:	0553      	lsls	r3, r2, #21
 800c6d6:	d531      	bpl.n	800c73c <__ssputs_r+0xa0>
 800c6d8:	4629      	mov	r1, r5
 800c6da:	f7ff ff6b 	bl	800c5b4 <_malloc_r>
 800c6de:	4606      	mov	r6, r0
 800c6e0:	b950      	cbnz	r0, 800c6f8 <__ssputs_r+0x5c>
 800c6e2:	230c      	movs	r3, #12
 800c6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e8:	f8ca 3000 	str.w	r3, [sl]
 800c6ec:	89a3      	ldrh	r3, [r4, #12]
 800c6ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6f2:	81a3      	strh	r3, [r4, #12]
 800c6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6f8:	464a      	mov	r2, r9
 800c6fa:	6921      	ldr	r1, [r4, #16]
 800c6fc:	f7ff fa18 	bl	800bb30 <memcpy>
 800c700:	89a3      	ldrh	r3, [r4, #12]
 800c702:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c70a:	81a3      	strh	r3, [r4, #12]
 800c70c:	6126      	str	r6, [r4, #16]
 800c70e:	444e      	add	r6, r9
 800c710:	6026      	str	r6, [r4, #0]
 800c712:	463e      	mov	r6, r7
 800c714:	6165      	str	r5, [r4, #20]
 800c716:	eba5 0509 	sub.w	r5, r5, r9
 800c71a:	60a5      	str	r5, [r4, #8]
 800c71c:	42be      	cmp	r6, r7
 800c71e:	d900      	bls.n	800c722 <__ssputs_r+0x86>
 800c720:	463e      	mov	r6, r7
 800c722:	4632      	mov	r2, r6
 800c724:	4641      	mov	r1, r8
 800c726:	6820      	ldr	r0, [r4, #0]
 800c728:	f000 f97c 	bl	800ca24 <memmove>
 800c72c:	68a3      	ldr	r3, [r4, #8]
 800c72e:	2000      	movs	r0, #0
 800c730:	1b9b      	subs	r3, r3, r6
 800c732:	60a3      	str	r3, [r4, #8]
 800c734:	6823      	ldr	r3, [r4, #0]
 800c736:	4433      	add	r3, r6
 800c738:	6023      	str	r3, [r4, #0]
 800c73a:	e7db      	b.n	800c6f4 <__ssputs_r+0x58>
 800c73c:	462a      	mov	r2, r5
 800c73e:	f000 f997 	bl	800ca70 <_realloc_r>
 800c742:	4606      	mov	r6, r0
 800c744:	2800      	cmp	r0, #0
 800c746:	d1e1      	bne.n	800c70c <__ssputs_r+0x70>
 800c748:	4650      	mov	r0, sl
 800c74a:	6921      	ldr	r1, [r4, #16]
 800c74c:	f7ff feca 	bl	800c4e4 <_free_r>
 800c750:	e7c7      	b.n	800c6e2 <__ssputs_r+0x46>
	...

0800c754 <_svfiprintf_r>:
 800c754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c758:	4698      	mov	r8, r3
 800c75a:	898b      	ldrh	r3, [r1, #12]
 800c75c:	4607      	mov	r7, r0
 800c75e:	061b      	lsls	r3, r3, #24
 800c760:	460d      	mov	r5, r1
 800c762:	4614      	mov	r4, r2
 800c764:	b09d      	sub	sp, #116	; 0x74
 800c766:	d50e      	bpl.n	800c786 <_svfiprintf_r+0x32>
 800c768:	690b      	ldr	r3, [r1, #16]
 800c76a:	b963      	cbnz	r3, 800c786 <_svfiprintf_r+0x32>
 800c76c:	2140      	movs	r1, #64	; 0x40
 800c76e:	f7ff ff21 	bl	800c5b4 <_malloc_r>
 800c772:	6028      	str	r0, [r5, #0]
 800c774:	6128      	str	r0, [r5, #16]
 800c776:	b920      	cbnz	r0, 800c782 <_svfiprintf_r+0x2e>
 800c778:	230c      	movs	r3, #12
 800c77a:	603b      	str	r3, [r7, #0]
 800c77c:	f04f 30ff 	mov.w	r0, #4294967295
 800c780:	e0d1      	b.n	800c926 <_svfiprintf_r+0x1d2>
 800c782:	2340      	movs	r3, #64	; 0x40
 800c784:	616b      	str	r3, [r5, #20]
 800c786:	2300      	movs	r3, #0
 800c788:	9309      	str	r3, [sp, #36]	; 0x24
 800c78a:	2320      	movs	r3, #32
 800c78c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c790:	2330      	movs	r3, #48	; 0x30
 800c792:	f04f 0901 	mov.w	r9, #1
 800c796:	f8cd 800c 	str.w	r8, [sp, #12]
 800c79a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c940 <_svfiprintf_r+0x1ec>
 800c79e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7a2:	4623      	mov	r3, r4
 800c7a4:	469a      	mov	sl, r3
 800c7a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7aa:	b10a      	cbz	r2, 800c7b0 <_svfiprintf_r+0x5c>
 800c7ac:	2a25      	cmp	r2, #37	; 0x25
 800c7ae:	d1f9      	bne.n	800c7a4 <_svfiprintf_r+0x50>
 800c7b0:	ebba 0b04 	subs.w	fp, sl, r4
 800c7b4:	d00b      	beq.n	800c7ce <_svfiprintf_r+0x7a>
 800c7b6:	465b      	mov	r3, fp
 800c7b8:	4622      	mov	r2, r4
 800c7ba:	4629      	mov	r1, r5
 800c7bc:	4638      	mov	r0, r7
 800c7be:	f7ff ff6d 	bl	800c69c <__ssputs_r>
 800c7c2:	3001      	adds	r0, #1
 800c7c4:	f000 80aa 	beq.w	800c91c <_svfiprintf_r+0x1c8>
 800c7c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7ca:	445a      	add	r2, fp
 800c7cc:	9209      	str	r2, [sp, #36]	; 0x24
 800c7ce:	f89a 3000 	ldrb.w	r3, [sl]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	f000 80a2 	beq.w	800c91c <_svfiprintf_r+0x1c8>
 800c7d8:	2300      	movs	r3, #0
 800c7da:	f04f 32ff 	mov.w	r2, #4294967295
 800c7de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7e2:	f10a 0a01 	add.w	sl, sl, #1
 800c7e6:	9304      	str	r3, [sp, #16]
 800c7e8:	9307      	str	r3, [sp, #28]
 800c7ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7ee:	931a      	str	r3, [sp, #104]	; 0x68
 800c7f0:	4654      	mov	r4, sl
 800c7f2:	2205      	movs	r2, #5
 800c7f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7f8:	4851      	ldr	r0, [pc, #324]	; (800c940 <_svfiprintf_r+0x1ec>)
 800c7fa:	f7ff f98b 	bl	800bb14 <memchr>
 800c7fe:	9a04      	ldr	r2, [sp, #16]
 800c800:	b9d8      	cbnz	r0, 800c83a <_svfiprintf_r+0xe6>
 800c802:	06d0      	lsls	r0, r2, #27
 800c804:	bf44      	itt	mi
 800c806:	2320      	movmi	r3, #32
 800c808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c80c:	0711      	lsls	r1, r2, #28
 800c80e:	bf44      	itt	mi
 800c810:	232b      	movmi	r3, #43	; 0x2b
 800c812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c816:	f89a 3000 	ldrb.w	r3, [sl]
 800c81a:	2b2a      	cmp	r3, #42	; 0x2a
 800c81c:	d015      	beq.n	800c84a <_svfiprintf_r+0xf6>
 800c81e:	4654      	mov	r4, sl
 800c820:	2000      	movs	r0, #0
 800c822:	f04f 0c0a 	mov.w	ip, #10
 800c826:	9a07      	ldr	r2, [sp, #28]
 800c828:	4621      	mov	r1, r4
 800c82a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c82e:	3b30      	subs	r3, #48	; 0x30
 800c830:	2b09      	cmp	r3, #9
 800c832:	d94e      	bls.n	800c8d2 <_svfiprintf_r+0x17e>
 800c834:	b1b0      	cbz	r0, 800c864 <_svfiprintf_r+0x110>
 800c836:	9207      	str	r2, [sp, #28]
 800c838:	e014      	b.n	800c864 <_svfiprintf_r+0x110>
 800c83a:	eba0 0308 	sub.w	r3, r0, r8
 800c83e:	fa09 f303 	lsl.w	r3, r9, r3
 800c842:	4313      	orrs	r3, r2
 800c844:	46a2      	mov	sl, r4
 800c846:	9304      	str	r3, [sp, #16]
 800c848:	e7d2      	b.n	800c7f0 <_svfiprintf_r+0x9c>
 800c84a:	9b03      	ldr	r3, [sp, #12]
 800c84c:	1d19      	adds	r1, r3, #4
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	9103      	str	r1, [sp, #12]
 800c852:	2b00      	cmp	r3, #0
 800c854:	bfbb      	ittet	lt
 800c856:	425b      	neglt	r3, r3
 800c858:	f042 0202 	orrlt.w	r2, r2, #2
 800c85c:	9307      	strge	r3, [sp, #28]
 800c85e:	9307      	strlt	r3, [sp, #28]
 800c860:	bfb8      	it	lt
 800c862:	9204      	strlt	r2, [sp, #16]
 800c864:	7823      	ldrb	r3, [r4, #0]
 800c866:	2b2e      	cmp	r3, #46	; 0x2e
 800c868:	d10c      	bne.n	800c884 <_svfiprintf_r+0x130>
 800c86a:	7863      	ldrb	r3, [r4, #1]
 800c86c:	2b2a      	cmp	r3, #42	; 0x2a
 800c86e:	d135      	bne.n	800c8dc <_svfiprintf_r+0x188>
 800c870:	9b03      	ldr	r3, [sp, #12]
 800c872:	3402      	adds	r4, #2
 800c874:	1d1a      	adds	r2, r3, #4
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	9203      	str	r2, [sp, #12]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	bfb8      	it	lt
 800c87e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c882:	9305      	str	r3, [sp, #20]
 800c884:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c944 <_svfiprintf_r+0x1f0>
 800c888:	2203      	movs	r2, #3
 800c88a:	4650      	mov	r0, sl
 800c88c:	7821      	ldrb	r1, [r4, #0]
 800c88e:	f7ff f941 	bl	800bb14 <memchr>
 800c892:	b140      	cbz	r0, 800c8a6 <_svfiprintf_r+0x152>
 800c894:	2340      	movs	r3, #64	; 0x40
 800c896:	eba0 000a 	sub.w	r0, r0, sl
 800c89a:	fa03 f000 	lsl.w	r0, r3, r0
 800c89e:	9b04      	ldr	r3, [sp, #16]
 800c8a0:	3401      	adds	r4, #1
 800c8a2:	4303      	orrs	r3, r0
 800c8a4:	9304      	str	r3, [sp, #16]
 800c8a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8aa:	2206      	movs	r2, #6
 800c8ac:	4826      	ldr	r0, [pc, #152]	; (800c948 <_svfiprintf_r+0x1f4>)
 800c8ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8b2:	f7ff f92f 	bl	800bb14 <memchr>
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	d038      	beq.n	800c92c <_svfiprintf_r+0x1d8>
 800c8ba:	4b24      	ldr	r3, [pc, #144]	; (800c94c <_svfiprintf_r+0x1f8>)
 800c8bc:	bb1b      	cbnz	r3, 800c906 <_svfiprintf_r+0x1b2>
 800c8be:	9b03      	ldr	r3, [sp, #12]
 800c8c0:	3307      	adds	r3, #7
 800c8c2:	f023 0307 	bic.w	r3, r3, #7
 800c8c6:	3308      	adds	r3, #8
 800c8c8:	9303      	str	r3, [sp, #12]
 800c8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8cc:	4433      	add	r3, r6
 800c8ce:	9309      	str	r3, [sp, #36]	; 0x24
 800c8d0:	e767      	b.n	800c7a2 <_svfiprintf_r+0x4e>
 800c8d2:	460c      	mov	r4, r1
 800c8d4:	2001      	movs	r0, #1
 800c8d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8da:	e7a5      	b.n	800c828 <_svfiprintf_r+0xd4>
 800c8dc:	2300      	movs	r3, #0
 800c8de:	f04f 0c0a 	mov.w	ip, #10
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	3401      	adds	r4, #1
 800c8e6:	9305      	str	r3, [sp, #20]
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8ee:	3a30      	subs	r2, #48	; 0x30
 800c8f0:	2a09      	cmp	r2, #9
 800c8f2:	d903      	bls.n	800c8fc <_svfiprintf_r+0x1a8>
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d0c5      	beq.n	800c884 <_svfiprintf_r+0x130>
 800c8f8:	9105      	str	r1, [sp, #20]
 800c8fa:	e7c3      	b.n	800c884 <_svfiprintf_r+0x130>
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	2301      	movs	r3, #1
 800c900:	fb0c 2101 	mla	r1, ip, r1, r2
 800c904:	e7f0      	b.n	800c8e8 <_svfiprintf_r+0x194>
 800c906:	ab03      	add	r3, sp, #12
 800c908:	9300      	str	r3, [sp, #0]
 800c90a:	462a      	mov	r2, r5
 800c90c:	4638      	mov	r0, r7
 800c90e:	4b10      	ldr	r3, [pc, #64]	; (800c950 <_svfiprintf_r+0x1fc>)
 800c910:	a904      	add	r1, sp, #16
 800c912:	f7fc fa73 	bl	8008dfc <_printf_float>
 800c916:	1c42      	adds	r2, r0, #1
 800c918:	4606      	mov	r6, r0
 800c91a:	d1d6      	bne.n	800c8ca <_svfiprintf_r+0x176>
 800c91c:	89ab      	ldrh	r3, [r5, #12]
 800c91e:	065b      	lsls	r3, r3, #25
 800c920:	f53f af2c 	bmi.w	800c77c <_svfiprintf_r+0x28>
 800c924:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c926:	b01d      	add	sp, #116	; 0x74
 800c928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c92c:	ab03      	add	r3, sp, #12
 800c92e:	9300      	str	r3, [sp, #0]
 800c930:	462a      	mov	r2, r5
 800c932:	4638      	mov	r0, r7
 800c934:	4b06      	ldr	r3, [pc, #24]	; (800c950 <_svfiprintf_r+0x1fc>)
 800c936:	a904      	add	r1, sp, #16
 800c938:	f7fc fcfc 	bl	8009334 <_printf_i>
 800c93c:	e7eb      	b.n	800c916 <_svfiprintf_r+0x1c2>
 800c93e:	bf00      	nop
 800c940:	0801e49c 	.word	0x0801e49c
 800c944:	0801e4a2 	.word	0x0801e4a2
 800c948:	0801e4a6 	.word	0x0801e4a6
 800c94c:	08008dfd 	.word	0x08008dfd
 800c950:	0800c69d 	.word	0x0800c69d

0800c954 <nan>:
 800c954:	2000      	movs	r0, #0
 800c956:	4901      	ldr	r1, [pc, #4]	; (800c95c <nan+0x8>)
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop
 800c95c:	7ff80000 	.word	0x7ff80000

0800c960 <_sbrk_r>:
 800c960:	b538      	push	{r3, r4, r5, lr}
 800c962:	2300      	movs	r3, #0
 800c964:	4d05      	ldr	r5, [pc, #20]	; (800c97c <_sbrk_r+0x1c>)
 800c966:	4604      	mov	r4, r0
 800c968:	4608      	mov	r0, r1
 800c96a:	602b      	str	r3, [r5, #0]
 800c96c:	f7f9 fc56 	bl	800621c <_sbrk>
 800c970:	1c43      	adds	r3, r0, #1
 800c972:	d102      	bne.n	800c97a <_sbrk_r+0x1a>
 800c974:	682b      	ldr	r3, [r5, #0]
 800c976:	b103      	cbz	r3, 800c97a <_sbrk_r+0x1a>
 800c978:	6023      	str	r3, [r4, #0]
 800c97a:	bd38      	pop	{r3, r4, r5, pc}
 800c97c:	200008f4 	.word	0x200008f4

0800c980 <strncmp>:
 800c980:	4603      	mov	r3, r0
 800c982:	b510      	push	{r4, lr}
 800c984:	b172      	cbz	r2, 800c9a4 <strncmp+0x24>
 800c986:	3901      	subs	r1, #1
 800c988:	1884      	adds	r4, r0, r2
 800c98a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c98e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c992:	4290      	cmp	r0, r2
 800c994:	d101      	bne.n	800c99a <strncmp+0x1a>
 800c996:	42a3      	cmp	r3, r4
 800c998:	d101      	bne.n	800c99e <strncmp+0x1e>
 800c99a:	1a80      	subs	r0, r0, r2
 800c99c:	bd10      	pop	{r4, pc}
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	d1f3      	bne.n	800c98a <strncmp+0xa>
 800c9a2:	e7fa      	b.n	800c99a <strncmp+0x1a>
 800c9a4:	4610      	mov	r0, r2
 800c9a6:	e7f9      	b.n	800c99c <strncmp+0x1c>

0800c9a8 <__ascii_wctomb>:
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	4608      	mov	r0, r1
 800c9ac:	b141      	cbz	r1, 800c9c0 <__ascii_wctomb+0x18>
 800c9ae:	2aff      	cmp	r2, #255	; 0xff
 800c9b0:	d904      	bls.n	800c9bc <__ascii_wctomb+0x14>
 800c9b2:	228a      	movs	r2, #138	; 0x8a
 800c9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b8:	601a      	str	r2, [r3, #0]
 800c9ba:	4770      	bx	lr
 800c9bc:	2001      	movs	r0, #1
 800c9be:	700a      	strb	r2, [r1, #0]
 800c9c0:	4770      	bx	lr
	...

0800c9c4 <__assert_func>:
 800c9c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9c6:	4614      	mov	r4, r2
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	4b09      	ldr	r3, [pc, #36]	; (800c9f0 <__assert_func+0x2c>)
 800c9cc:	4605      	mov	r5, r0
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	68d8      	ldr	r0, [r3, #12]
 800c9d2:	b14c      	cbz	r4, 800c9e8 <__assert_func+0x24>
 800c9d4:	4b07      	ldr	r3, [pc, #28]	; (800c9f4 <__assert_func+0x30>)
 800c9d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c9da:	9100      	str	r1, [sp, #0]
 800c9dc:	462b      	mov	r3, r5
 800c9de:	4906      	ldr	r1, [pc, #24]	; (800c9f8 <__assert_func+0x34>)
 800c9e0:	f000 f80e 	bl	800ca00 <fiprintf>
 800c9e4:	f000 fa8a 	bl	800cefc <abort>
 800c9e8:	4b04      	ldr	r3, [pc, #16]	; (800c9fc <__assert_func+0x38>)
 800c9ea:	461c      	mov	r4, r3
 800c9ec:	e7f3      	b.n	800c9d6 <__assert_func+0x12>
 800c9ee:	bf00      	nop
 800c9f0:	2000000c 	.word	0x2000000c
 800c9f4:	0801e4ad 	.word	0x0801e4ad
 800c9f8:	0801e4ba 	.word	0x0801e4ba
 800c9fc:	0801e4e8 	.word	0x0801e4e8

0800ca00 <fiprintf>:
 800ca00:	b40e      	push	{r1, r2, r3}
 800ca02:	b503      	push	{r0, r1, lr}
 800ca04:	4601      	mov	r1, r0
 800ca06:	ab03      	add	r3, sp, #12
 800ca08:	4805      	ldr	r0, [pc, #20]	; (800ca20 <fiprintf+0x20>)
 800ca0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca0e:	6800      	ldr	r0, [r0, #0]
 800ca10:	9301      	str	r3, [sp, #4]
 800ca12:	f000 f883 	bl	800cb1c <_vfiprintf_r>
 800ca16:	b002      	add	sp, #8
 800ca18:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca1c:	b003      	add	sp, #12
 800ca1e:	4770      	bx	lr
 800ca20:	2000000c 	.word	0x2000000c

0800ca24 <memmove>:
 800ca24:	4288      	cmp	r0, r1
 800ca26:	b510      	push	{r4, lr}
 800ca28:	eb01 0402 	add.w	r4, r1, r2
 800ca2c:	d902      	bls.n	800ca34 <memmove+0x10>
 800ca2e:	4284      	cmp	r4, r0
 800ca30:	4623      	mov	r3, r4
 800ca32:	d807      	bhi.n	800ca44 <memmove+0x20>
 800ca34:	1e43      	subs	r3, r0, #1
 800ca36:	42a1      	cmp	r1, r4
 800ca38:	d008      	beq.n	800ca4c <memmove+0x28>
 800ca3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca42:	e7f8      	b.n	800ca36 <memmove+0x12>
 800ca44:	4601      	mov	r1, r0
 800ca46:	4402      	add	r2, r0
 800ca48:	428a      	cmp	r2, r1
 800ca4a:	d100      	bne.n	800ca4e <memmove+0x2a>
 800ca4c:	bd10      	pop	{r4, pc}
 800ca4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca56:	e7f7      	b.n	800ca48 <memmove+0x24>

0800ca58 <__malloc_lock>:
 800ca58:	4801      	ldr	r0, [pc, #4]	; (800ca60 <__malloc_lock+0x8>)
 800ca5a:	f000 bc0b 	b.w	800d274 <__retarget_lock_acquire_recursive>
 800ca5e:	bf00      	nop
 800ca60:	200008f8 	.word	0x200008f8

0800ca64 <__malloc_unlock>:
 800ca64:	4801      	ldr	r0, [pc, #4]	; (800ca6c <__malloc_unlock+0x8>)
 800ca66:	f000 bc06 	b.w	800d276 <__retarget_lock_release_recursive>
 800ca6a:	bf00      	nop
 800ca6c:	200008f8 	.word	0x200008f8

0800ca70 <_realloc_r>:
 800ca70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca74:	4680      	mov	r8, r0
 800ca76:	4614      	mov	r4, r2
 800ca78:	460e      	mov	r6, r1
 800ca7a:	b921      	cbnz	r1, 800ca86 <_realloc_r+0x16>
 800ca7c:	4611      	mov	r1, r2
 800ca7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca82:	f7ff bd97 	b.w	800c5b4 <_malloc_r>
 800ca86:	b92a      	cbnz	r2, 800ca94 <_realloc_r+0x24>
 800ca88:	f7ff fd2c 	bl	800c4e4 <_free_r>
 800ca8c:	4625      	mov	r5, r4
 800ca8e:	4628      	mov	r0, r5
 800ca90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca94:	f000 fc56 	bl	800d344 <_malloc_usable_size_r>
 800ca98:	4284      	cmp	r4, r0
 800ca9a:	4607      	mov	r7, r0
 800ca9c:	d802      	bhi.n	800caa4 <_realloc_r+0x34>
 800ca9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800caa2:	d812      	bhi.n	800caca <_realloc_r+0x5a>
 800caa4:	4621      	mov	r1, r4
 800caa6:	4640      	mov	r0, r8
 800caa8:	f7ff fd84 	bl	800c5b4 <_malloc_r>
 800caac:	4605      	mov	r5, r0
 800caae:	2800      	cmp	r0, #0
 800cab0:	d0ed      	beq.n	800ca8e <_realloc_r+0x1e>
 800cab2:	42bc      	cmp	r4, r7
 800cab4:	4622      	mov	r2, r4
 800cab6:	4631      	mov	r1, r6
 800cab8:	bf28      	it	cs
 800caba:	463a      	movcs	r2, r7
 800cabc:	f7ff f838 	bl	800bb30 <memcpy>
 800cac0:	4631      	mov	r1, r6
 800cac2:	4640      	mov	r0, r8
 800cac4:	f7ff fd0e 	bl	800c4e4 <_free_r>
 800cac8:	e7e1      	b.n	800ca8e <_realloc_r+0x1e>
 800caca:	4635      	mov	r5, r6
 800cacc:	e7df      	b.n	800ca8e <_realloc_r+0x1e>

0800cace <__sfputc_r>:
 800cace:	6893      	ldr	r3, [r2, #8]
 800cad0:	b410      	push	{r4}
 800cad2:	3b01      	subs	r3, #1
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	6093      	str	r3, [r2, #8]
 800cad8:	da07      	bge.n	800caea <__sfputc_r+0x1c>
 800cada:	6994      	ldr	r4, [r2, #24]
 800cadc:	42a3      	cmp	r3, r4
 800cade:	db01      	blt.n	800cae4 <__sfputc_r+0x16>
 800cae0:	290a      	cmp	r1, #10
 800cae2:	d102      	bne.n	800caea <__sfputc_r+0x1c>
 800cae4:	bc10      	pop	{r4}
 800cae6:	f000 b949 	b.w	800cd7c <__swbuf_r>
 800caea:	6813      	ldr	r3, [r2, #0]
 800caec:	1c58      	adds	r0, r3, #1
 800caee:	6010      	str	r0, [r2, #0]
 800caf0:	7019      	strb	r1, [r3, #0]
 800caf2:	4608      	mov	r0, r1
 800caf4:	bc10      	pop	{r4}
 800caf6:	4770      	bx	lr

0800caf8 <__sfputs_r>:
 800caf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cafa:	4606      	mov	r6, r0
 800cafc:	460f      	mov	r7, r1
 800cafe:	4614      	mov	r4, r2
 800cb00:	18d5      	adds	r5, r2, r3
 800cb02:	42ac      	cmp	r4, r5
 800cb04:	d101      	bne.n	800cb0a <__sfputs_r+0x12>
 800cb06:	2000      	movs	r0, #0
 800cb08:	e007      	b.n	800cb1a <__sfputs_r+0x22>
 800cb0a:	463a      	mov	r2, r7
 800cb0c:	4630      	mov	r0, r6
 800cb0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb12:	f7ff ffdc 	bl	800cace <__sfputc_r>
 800cb16:	1c43      	adds	r3, r0, #1
 800cb18:	d1f3      	bne.n	800cb02 <__sfputs_r+0xa>
 800cb1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cb1c <_vfiprintf_r>:
 800cb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb20:	460d      	mov	r5, r1
 800cb22:	4614      	mov	r4, r2
 800cb24:	4698      	mov	r8, r3
 800cb26:	4606      	mov	r6, r0
 800cb28:	b09d      	sub	sp, #116	; 0x74
 800cb2a:	b118      	cbz	r0, 800cb34 <_vfiprintf_r+0x18>
 800cb2c:	6983      	ldr	r3, [r0, #24]
 800cb2e:	b90b      	cbnz	r3, 800cb34 <_vfiprintf_r+0x18>
 800cb30:	f000 fb02 	bl	800d138 <__sinit>
 800cb34:	4b89      	ldr	r3, [pc, #548]	; (800cd5c <_vfiprintf_r+0x240>)
 800cb36:	429d      	cmp	r5, r3
 800cb38:	d11b      	bne.n	800cb72 <_vfiprintf_r+0x56>
 800cb3a:	6875      	ldr	r5, [r6, #4]
 800cb3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb3e:	07d9      	lsls	r1, r3, #31
 800cb40:	d405      	bmi.n	800cb4e <_vfiprintf_r+0x32>
 800cb42:	89ab      	ldrh	r3, [r5, #12]
 800cb44:	059a      	lsls	r2, r3, #22
 800cb46:	d402      	bmi.n	800cb4e <_vfiprintf_r+0x32>
 800cb48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb4a:	f000 fb93 	bl	800d274 <__retarget_lock_acquire_recursive>
 800cb4e:	89ab      	ldrh	r3, [r5, #12]
 800cb50:	071b      	lsls	r3, r3, #28
 800cb52:	d501      	bpl.n	800cb58 <_vfiprintf_r+0x3c>
 800cb54:	692b      	ldr	r3, [r5, #16]
 800cb56:	b9eb      	cbnz	r3, 800cb94 <_vfiprintf_r+0x78>
 800cb58:	4629      	mov	r1, r5
 800cb5a:	4630      	mov	r0, r6
 800cb5c:	f000 f960 	bl	800ce20 <__swsetup_r>
 800cb60:	b1c0      	cbz	r0, 800cb94 <_vfiprintf_r+0x78>
 800cb62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb64:	07dc      	lsls	r4, r3, #31
 800cb66:	d50e      	bpl.n	800cb86 <_vfiprintf_r+0x6a>
 800cb68:	f04f 30ff 	mov.w	r0, #4294967295
 800cb6c:	b01d      	add	sp, #116	; 0x74
 800cb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb72:	4b7b      	ldr	r3, [pc, #492]	; (800cd60 <_vfiprintf_r+0x244>)
 800cb74:	429d      	cmp	r5, r3
 800cb76:	d101      	bne.n	800cb7c <_vfiprintf_r+0x60>
 800cb78:	68b5      	ldr	r5, [r6, #8]
 800cb7a:	e7df      	b.n	800cb3c <_vfiprintf_r+0x20>
 800cb7c:	4b79      	ldr	r3, [pc, #484]	; (800cd64 <_vfiprintf_r+0x248>)
 800cb7e:	429d      	cmp	r5, r3
 800cb80:	bf08      	it	eq
 800cb82:	68f5      	ldreq	r5, [r6, #12]
 800cb84:	e7da      	b.n	800cb3c <_vfiprintf_r+0x20>
 800cb86:	89ab      	ldrh	r3, [r5, #12]
 800cb88:	0598      	lsls	r0, r3, #22
 800cb8a:	d4ed      	bmi.n	800cb68 <_vfiprintf_r+0x4c>
 800cb8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb8e:	f000 fb72 	bl	800d276 <__retarget_lock_release_recursive>
 800cb92:	e7e9      	b.n	800cb68 <_vfiprintf_r+0x4c>
 800cb94:	2300      	movs	r3, #0
 800cb96:	9309      	str	r3, [sp, #36]	; 0x24
 800cb98:	2320      	movs	r3, #32
 800cb9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb9e:	2330      	movs	r3, #48	; 0x30
 800cba0:	f04f 0901 	mov.w	r9, #1
 800cba4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cba8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800cd68 <_vfiprintf_r+0x24c>
 800cbac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cbb0:	4623      	mov	r3, r4
 800cbb2:	469a      	mov	sl, r3
 800cbb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbb8:	b10a      	cbz	r2, 800cbbe <_vfiprintf_r+0xa2>
 800cbba:	2a25      	cmp	r2, #37	; 0x25
 800cbbc:	d1f9      	bne.n	800cbb2 <_vfiprintf_r+0x96>
 800cbbe:	ebba 0b04 	subs.w	fp, sl, r4
 800cbc2:	d00b      	beq.n	800cbdc <_vfiprintf_r+0xc0>
 800cbc4:	465b      	mov	r3, fp
 800cbc6:	4622      	mov	r2, r4
 800cbc8:	4629      	mov	r1, r5
 800cbca:	4630      	mov	r0, r6
 800cbcc:	f7ff ff94 	bl	800caf8 <__sfputs_r>
 800cbd0:	3001      	adds	r0, #1
 800cbd2:	f000 80aa 	beq.w	800cd2a <_vfiprintf_r+0x20e>
 800cbd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbd8:	445a      	add	r2, fp
 800cbda:	9209      	str	r2, [sp, #36]	; 0x24
 800cbdc:	f89a 3000 	ldrb.w	r3, [sl]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	f000 80a2 	beq.w	800cd2a <_vfiprintf_r+0x20e>
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbf0:	f10a 0a01 	add.w	sl, sl, #1
 800cbf4:	9304      	str	r3, [sp, #16]
 800cbf6:	9307      	str	r3, [sp, #28]
 800cbf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbfc:	931a      	str	r3, [sp, #104]	; 0x68
 800cbfe:	4654      	mov	r4, sl
 800cc00:	2205      	movs	r2, #5
 800cc02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc06:	4858      	ldr	r0, [pc, #352]	; (800cd68 <_vfiprintf_r+0x24c>)
 800cc08:	f7fe ff84 	bl	800bb14 <memchr>
 800cc0c:	9a04      	ldr	r2, [sp, #16]
 800cc0e:	b9d8      	cbnz	r0, 800cc48 <_vfiprintf_r+0x12c>
 800cc10:	06d1      	lsls	r1, r2, #27
 800cc12:	bf44      	itt	mi
 800cc14:	2320      	movmi	r3, #32
 800cc16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc1a:	0713      	lsls	r3, r2, #28
 800cc1c:	bf44      	itt	mi
 800cc1e:	232b      	movmi	r3, #43	; 0x2b
 800cc20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc24:	f89a 3000 	ldrb.w	r3, [sl]
 800cc28:	2b2a      	cmp	r3, #42	; 0x2a
 800cc2a:	d015      	beq.n	800cc58 <_vfiprintf_r+0x13c>
 800cc2c:	4654      	mov	r4, sl
 800cc2e:	2000      	movs	r0, #0
 800cc30:	f04f 0c0a 	mov.w	ip, #10
 800cc34:	9a07      	ldr	r2, [sp, #28]
 800cc36:	4621      	mov	r1, r4
 800cc38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc3c:	3b30      	subs	r3, #48	; 0x30
 800cc3e:	2b09      	cmp	r3, #9
 800cc40:	d94e      	bls.n	800cce0 <_vfiprintf_r+0x1c4>
 800cc42:	b1b0      	cbz	r0, 800cc72 <_vfiprintf_r+0x156>
 800cc44:	9207      	str	r2, [sp, #28]
 800cc46:	e014      	b.n	800cc72 <_vfiprintf_r+0x156>
 800cc48:	eba0 0308 	sub.w	r3, r0, r8
 800cc4c:	fa09 f303 	lsl.w	r3, r9, r3
 800cc50:	4313      	orrs	r3, r2
 800cc52:	46a2      	mov	sl, r4
 800cc54:	9304      	str	r3, [sp, #16]
 800cc56:	e7d2      	b.n	800cbfe <_vfiprintf_r+0xe2>
 800cc58:	9b03      	ldr	r3, [sp, #12]
 800cc5a:	1d19      	adds	r1, r3, #4
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	9103      	str	r1, [sp, #12]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	bfbb      	ittet	lt
 800cc64:	425b      	neglt	r3, r3
 800cc66:	f042 0202 	orrlt.w	r2, r2, #2
 800cc6a:	9307      	strge	r3, [sp, #28]
 800cc6c:	9307      	strlt	r3, [sp, #28]
 800cc6e:	bfb8      	it	lt
 800cc70:	9204      	strlt	r2, [sp, #16]
 800cc72:	7823      	ldrb	r3, [r4, #0]
 800cc74:	2b2e      	cmp	r3, #46	; 0x2e
 800cc76:	d10c      	bne.n	800cc92 <_vfiprintf_r+0x176>
 800cc78:	7863      	ldrb	r3, [r4, #1]
 800cc7a:	2b2a      	cmp	r3, #42	; 0x2a
 800cc7c:	d135      	bne.n	800ccea <_vfiprintf_r+0x1ce>
 800cc7e:	9b03      	ldr	r3, [sp, #12]
 800cc80:	3402      	adds	r4, #2
 800cc82:	1d1a      	adds	r2, r3, #4
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	9203      	str	r2, [sp, #12]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	bfb8      	it	lt
 800cc8c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc90:	9305      	str	r3, [sp, #20]
 800cc92:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800cd6c <_vfiprintf_r+0x250>
 800cc96:	2203      	movs	r2, #3
 800cc98:	4650      	mov	r0, sl
 800cc9a:	7821      	ldrb	r1, [r4, #0]
 800cc9c:	f7fe ff3a 	bl	800bb14 <memchr>
 800cca0:	b140      	cbz	r0, 800ccb4 <_vfiprintf_r+0x198>
 800cca2:	2340      	movs	r3, #64	; 0x40
 800cca4:	eba0 000a 	sub.w	r0, r0, sl
 800cca8:	fa03 f000 	lsl.w	r0, r3, r0
 800ccac:	9b04      	ldr	r3, [sp, #16]
 800ccae:	3401      	adds	r4, #1
 800ccb0:	4303      	orrs	r3, r0
 800ccb2:	9304      	str	r3, [sp, #16]
 800ccb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccb8:	2206      	movs	r2, #6
 800ccba:	482d      	ldr	r0, [pc, #180]	; (800cd70 <_vfiprintf_r+0x254>)
 800ccbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ccc0:	f7fe ff28 	bl	800bb14 <memchr>
 800ccc4:	2800      	cmp	r0, #0
 800ccc6:	d03f      	beq.n	800cd48 <_vfiprintf_r+0x22c>
 800ccc8:	4b2a      	ldr	r3, [pc, #168]	; (800cd74 <_vfiprintf_r+0x258>)
 800ccca:	bb1b      	cbnz	r3, 800cd14 <_vfiprintf_r+0x1f8>
 800cccc:	9b03      	ldr	r3, [sp, #12]
 800ccce:	3307      	adds	r3, #7
 800ccd0:	f023 0307 	bic.w	r3, r3, #7
 800ccd4:	3308      	adds	r3, #8
 800ccd6:	9303      	str	r3, [sp, #12]
 800ccd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccda:	443b      	add	r3, r7
 800ccdc:	9309      	str	r3, [sp, #36]	; 0x24
 800ccde:	e767      	b.n	800cbb0 <_vfiprintf_r+0x94>
 800cce0:	460c      	mov	r4, r1
 800cce2:	2001      	movs	r0, #1
 800cce4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cce8:	e7a5      	b.n	800cc36 <_vfiprintf_r+0x11a>
 800ccea:	2300      	movs	r3, #0
 800ccec:	f04f 0c0a 	mov.w	ip, #10
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	3401      	adds	r4, #1
 800ccf4:	9305      	str	r3, [sp, #20]
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccfc:	3a30      	subs	r2, #48	; 0x30
 800ccfe:	2a09      	cmp	r2, #9
 800cd00:	d903      	bls.n	800cd0a <_vfiprintf_r+0x1ee>
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d0c5      	beq.n	800cc92 <_vfiprintf_r+0x176>
 800cd06:	9105      	str	r1, [sp, #20]
 800cd08:	e7c3      	b.n	800cc92 <_vfiprintf_r+0x176>
 800cd0a:	4604      	mov	r4, r0
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd12:	e7f0      	b.n	800ccf6 <_vfiprintf_r+0x1da>
 800cd14:	ab03      	add	r3, sp, #12
 800cd16:	9300      	str	r3, [sp, #0]
 800cd18:	462a      	mov	r2, r5
 800cd1a:	4630      	mov	r0, r6
 800cd1c:	4b16      	ldr	r3, [pc, #88]	; (800cd78 <_vfiprintf_r+0x25c>)
 800cd1e:	a904      	add	r1, sp, #16
 800cd20:	f7fc f86c 	bl	8008dfc <_printf_float>
 800cd24:	4607      	mov	r7, r0
 800cd26:	1c78      	adds	r0, r7, #1
 800cd28:	d1d6      	bne.n	800ccd8 <_vfiprintf_r+0x1bc>
 800cd2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd2c:	07d9      	lsls	r1, r3, #31
 800cd2e:	d405      	bmi.n	800cd3c <_vfiprintf_r+0x220>
 800cd30:	89ab      	ldrh	r3, [r5, #12]
 800cd32:	059a      	lsls	r2, r3, #22
 800cd34:	d402      	bmi.n	800cd3c <_vfiprintf_r+0x220>
 800cd36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd38:	f000 fa9d 	bl	800d276 <__retarget_lock_release_recursive>
 800cd3c:	89ab      	ldrh	r3, [r5, #12]
 800cd3e:	065b      	lsls	r3, r3, #25
 800cd40:	f53f af12 	bmi.w	800cb68 <_vfiprintf_r+0x4c>
 800cd44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd46:	e711      	b.n	800cb6c <_vfiprintf_r+0x50>
 800cd48:	ab03      	add	r3, sp, #12
 800cd4a:	9300      	str	r3, [sp, #0]
 800cd4c:	462a      	mov	r2, r5
 800cd4e:	4630      	mov	r0, r6
 800cd50:	4b09      	ldr	r3, [pc, #36]	; (800cd78 <_vfiprintf_r+0x25c>)
 800cd52:	a904      	add	r1, sp, #16
 800cd54:	f7fc faee 	bl	8009334 <_printf_i>
 800cd58:	e7e4      	b.n	800cd24 <_vfiprintf_r+0x208>
 800cd5a:	bf00      	nop
 800cd5c:	0801e50c 	.word	0x0801e50c
 800cd60:	0801e52c 	.word	0x0801e52c
 800cd64:	0801e4ec 	.word	0x0801e4ec
 800cd68:	0801e49c 	.word	0x0801e49c
 800cd6c:	0801e4a2 	.word	0x0801e4a2
 800cd70:	0801e4a6 	.word	0x0801e4a6
 800cd74:	08008dfd 	.word	0x08008dfd
 800cd78:	0800caf9 	.word	0x0800caf9

0800cd7c <__swbuf_r>:
 800cd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7e:	460e      	mov	r6, r1
 800cd80:	4614      	mov	r4, r2
 800cd82:	4605      	mov	r5, r0
 800cd84:	b118      	cbz	r0, 800cd8e <__swbuf_r+0x12>
 800cd86:	6983      	ldr	r3, [r0, #24]
 800cd88:	b90b      	cbnz	r3, 800cd8e <__swbuf_r+0x12>
 800cd8a:	f000 f9d5 	bl	800d138 <__sinit>
 800cd8e:	4b21      	ldr	r3, [pc, #132]	; (800ce14 <__swbuf_r+0x98>)
 800cd90:	429c      	cmp	r4, r3
 800cd92:	d12b      	bne.n	800cdec <__swbuf_r+0x70>
 800cd94:	686c      	ldr	r4, [r5, #4]
 800cd96:	69a3      	ldr	r3, [r4, #24]
 800cd98:	60a3      	str	r3, [r4, #8]
 800cd9a:	89a3      	ldrh	r3, [r4, #12]
 800cd9c:	071a      	lsls	r2, r3, #28
 800cd9e:	d52f      	bpl.n	800ce00 <__swbuf_r+0x84>
 800cda0:	6923      	ldr	r3, [r4, #16]
 800cda2:	b36b      	cbz	r3, 800ce00 <__swbuf_r+0x84>
 800cda4:	6923      	ldr	r3, [r4, #16]
 800cda6:	6820      	ldr	r0, [r4, #0]
 800cda8:	b2f6      	uxtb	r6, r6
 800cdaa:	1ac0      	subs	r0, r0, r3
 800cdac:	6963      	ldr	r3, [r4, #20]
 800cdae:	4637      	mov	r7, r6
 800cdb0:	4283      	cmp	r3, r0
 800cdb2:	dc04      	bgt.n	800cdbe <__swbuf_r+0x42>
 800cdb4:	4621      	mov	r1, r4
 800cdb6:	4628      	mov	r0, r5
 800cdb8:	f000 f92a 	bl	800d010 <_fflush_r>
 800cdbc:	bb30      	cbnz	r0, 800ce0c <__swbuf_r+0x90>
 800cdbe:	68a3      	ldr	r3, [r4, #8]
 800cdc0:	3001      	adds	r0, #1
 800cdc2:	3b01      	subs	r3, #1
 800cdc4:	60a3      	str	r3, [r4, #8]
 800cdc6:	6823      	ldr	r3, [r4, #0]
 800cdc8:	1c5a      	adds	r2, r3, #1
 800cdca:	6022      	str	r2, [r4, #0]
 800cdcc:	701e      	strb	r6, [r3, #0]
 800cdce:	6963      	ldr	r3, [r4, #20]
 800cdd0:	4283      	cmp	r3, r0
 800cdd2:	d004      	beq.n	800cdde <__swbuf_r+0x62>
 800cdd4:	89a3      	ldrh	r3, [r4, #12]
 800cdd6:	07db      	lsls	r3, r3, #31
 800cdd8:	d506      	bpl.n	800cde8 <__swbuf_r+0x6c>
 800cdda:	2e0a      	cmp	r6, #10
 800cddc:	d104      	bne.n	800cde8 <__swbuf_r+0x6c>
 800cdde:	4621      	mov	r1, r4
 800cde0:	4628      	mov	r0, r5
 800cde2:	f000 f915 	bl	800d010 <_fflush_r>
 800cde6:	b988      	cbnz	r0, 800ce0c <__swbuf_r+0x90>
 800cde8:	4638      	mov	r0, r7
 800cdea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdec:	4b0a      	ldr	r3, [pc, #40]	; (800ce18 <__swbuf_r+0x9c>)
 800cdee:	429c      	cmp	r4, r3
 800cdf0:	d101      	bne.n	800cdf6 <__swbuf_r+0x7a>
 800cdf2:	68ac      	ldr	r4, [r5, #8]
 800cdf4:	e7cf      	b.n	800cd96 <__swbuf_r+0x1a>
 800cdf6:	4b09      	ldr	r3, [pc, #36]	; (800ce1c <__swbuf_r+0xa0>)
 800cdf8:	429c      	cmp	r4, r3
 800cdfa:	bf08      	it	eq
 800cdfc:	68ec      	ldreq	r4, [r5, #12]
 800cdfe:	e7ca      	b.n	800cd96 <__swbuf_r+0x1a>
 800ce00:	4621      	mov	r1, r4
 800ce02:	4628      	mov	r0, r5
 800ce04:	f000 f80c 	bl	800ce20 <__swsetup_r>
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d0cb      	beq.n	800cda4 <__swbuf_r+0x28>
 800ce0c:	f04f 37ff 	mov.w	r7, #4294967295
 800ce10:	e7ea      	b.n	800cde8 <__swbuf_r+0x6c>
 800ce12:	bf00      	nop
 800ce14:	0801e50c 	.word	0x0801e50c
 800ce18:	0801e52c 	.word	0x0801e52c
 800ce1c:	0801e4ec 	.word	0x0801e4ec

0800ce20 <__swsetup_r>:
 800ce20:	4b32      	ldr	r3, [pc, #200]	; (800ceec <__swsetup_r+0xcc>)
 800ce22:	b570      	push	{r4, r5, r6, lr}
 800ce24:	681d      	ldr	r5, [r3, #0]
 800ce26:	4606      	mov	r6, r0
 800ce28:	460c      	mov	r4, r1
 800ce2a:	b125      	cbz	r5, 800ce36 <__swsetup_r+0x16>
 800ce2c:	69ab      	ldr	r3, [r5, #24]
 800ce2e:	b913      	cbnz	r3, 800ce36 <__swsetup_r+0x16>
 800ce30:	4628      	mov	r0, r5
 800ce32:	f000 f981 	bl	800d138 <__sinit>
 800ce36:	4b2e      	ldr	r3, [pc, #184]	; (800cef0 <__swsetup_r+0xd0>)
 800ce38:	429c      	cmp	r4, r3
 800ce3a:	d10f      	bne.n	800ce5c <__swsetup_r+0x3c>
 800ce3c:	686c      	ldr	r4, [r5, #4]
 800ce3e:	89a3      	ldrh	r3, [r4, #12]
 800ce40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce44:	0719      	lsls	r1, r3, #28
 800ce46:	d42c      	bmi.n	800cea2 <__swsetup_r+0x82>
 800ce48:	06dd      	lsls	r5, r3, #27
 800ce4a:	d411      	bmi.n	800ce70 <__swsetup_r+0x50>
 800ce4c:	2309      	movs	r3, #9
 800ce4e:	6033      	str	r3, [r6, #0]
 800ce50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ce54:	f04f 30ff 	mov.w	r0, #4294967295
 800ce58:	81a3      	strh	r3, [r4, #12]
 800ce5a:	e03e      	b.n	800ceda <__swsetup_r+0xba>
 800ce5c:	4b25      	ldr	r3, [pc, #148]	; (800cef4 <__swsetup_r+0xd4>)
 800ce5e:	429c      	cmp	r4, r3
 800ce60:	d101      	bne.n	800ce66 <__swsetup_r+0x46>
 800ce62:	68ac      	ldr	r4, [r5, #8]
 800ce64:	e7eb      	b.n	800ce3e <__swsetup_r+0x1e>
 800ce66:	4b24      	ldr	r3, [pc, #144]	; (800cef8 <__swsetup_r+0xd8>)
 800ce68:	429c      	cmp	r4, r3
 800ce6a:	bf08      	it	eq
 800ce6c:	68ec      	ldreq	r4, [r5, #12]
 800ce6e:	e7e6      	b.n	800ce3e <__swsetup_r+0x1e>
 800ce70:	0758      	lsls	r0, r3, #29
 800ce72:	d512      	bpl.n	800ce9a <__swsetup_r+0x7a>
 800ce74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce76:	b141      	cbz	r1, 800ce8a <__swsetup_r+0x6a>
 800ce78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce7c:	4299      	cmp	r1, r3
 800ce7e:	d002      	beq.n	800ce86 <__swsetup_r+0x66>
 800ce80:	4630      	mov	r0, r6
 800ce82:	f7ff fb2f 	bl	800c4e4 <_free_r>
 800ce86:	2300      	movs	r3, #0
 800ce88:	6363      	str	r3, [r4, #52]	; 0x34
 800ce8a:	89a3      	ldrh	r3, [r4, #12]
 800ce8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce90:	81a3      	strh	r3, [r4, #12]
 800ce92:	2300      	movs	r3, #0
 800ce94:	6063      	str	r3, [r4, #4]
 800ce96:	6923      	ldr	r3, [r4, #16]
 800ce98:	6023      	str	r3, [r4, #0]
 800ce9a:	89a3      	ldrh	r3, [r4, #12]
 800ce9c:	f043 0308 	orr.w	r3, r3, #8
 800cea0:	81a3      	strh	r3, [r4, #12]
 800cea2:	6923      	ldr	r3, [r4, #16]
 800cea4:	b94b      	cbnz	r3, 800ceba <__swsetup_r+0x9a>
 800cea6:	89a3      	ldrh	r3, [r4, #12]
 800cea8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ceac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ceb0:	d003      	beq.n	800ceba <__swsetup_r+0x9a>
 800ceb2:	4621      	mov	r1, r4
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	f000 fa05 	bl	800d2c4 <__smakebuf_r>
 800ceba:	89a0      	ldrh	r0, [r4, #12]
 800cebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cec0:	f010 0301 	ands.w	r3, r0, #1
 800cec4:	d00a      	beq.n	800cedc <__swsetup_r+0xbc>
 800cec6:	2300      	movs	r3, #0
 800cec8:	60a3      	str	r3, [r4, #8]
 800ceca:	6963      	ldr	r3, [r4, #20]
 800cecc:	425b      	negs	r3, r3
 800cece:	61a3      	str	r3, [r4, #24]
 800ced0:	6923      	ldr	r3, [r4, #16]
 800ced2:	b943      	cbnz	r3, 800cee6 <__swsetup_r+0xc6>
 800ced4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ced8:	d1ba      	bne.n	800ce50 <__swsetup_r+0x30>
 800ceda:	bd70      	pop	{r4, r5, r6, pc}
 800cedc:	0781      	lsls	r1, r0, #30
 800cede:	bf58      	it	pl
 800cee0:	6963      	ldrpl	r3, [r4, #20]
 800cee2:	60a3      	str	r3, [r4, #8]
 800cee4:	e7f4      	b.n	800ced0 <__swsetup_r+0xb0>
 800cee6:	2000      	movs	r0, #0
 800cee8:	e7f7      	b.n	800ceda <__swsetup_r+0xba>
 800ceea:	bf00      	nop
 800ceec:	2000000c 	.word	0x2000000c
 800cef0:	0801e50c 	.word	0x0801e50c
 800cef4:	0801e52c 	.word	0x0801e52c
 800cef8:	0801e4ec 	.word	0x0801e4ec

0800cefc <abort>:
 800cefc:	2006      	movs	r0, #6
 800cefe:	b508      	push	{r3, lr}
 800cf00:	f000 fa50 	bl	800d3a4 <raise>
 800cf04:	2001      	movs	r0, #1
 800cf06:	f7f9 f959 	bl	80061bc <_exit>
	...

0800cf0c <__sflush_r>:
 800cf0c:	898a      	ldrh	r2, [r1, #12]
 800cf0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf10:	4605      	mov	r5, r0
 800cf12:	0710      	lsls	r0, r2, #28
 800cf14:	460c      	mov	r4, r1
 800cf16:	d457      	bmi.n	800cfc8 <__sflush_r+0xbc>
 800cf18:	684b      	ldr	r3, [r1, #4]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	dc04      	bgt.n	800cf28 <__sflush_r+0x1c>
 800cf1e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	dc01      	bgt.n	800cf28 <__sflush_r+0x1c>
 800cf24:	2000      	movs	r0, #0
 800cf26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf2a:	2e00      	cmp	r6, #0
 800cf2c:	d0fa      	beq.n	800cf24 <__sflush_r+0x18>
 800cf2e:	2300      	movs	r3, #0
 800cf30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf34:	682f      	ldr	r7, [r5, #0]
 800cf36:	602b      	str	r3, [r5, #0]
 800cf38:	d032      	beq.n	800cfa0 <__sflush_r+0x94>
 800cf3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf3c:	89a3      	ldrh	r3, [r4, #12]
 800cf3e:	075a      	lsls	r2, r3, #29
 800cf40:	d505      	bpl.n	800cf4e <__sflush_r+0x42>
 800cf42:	6863      	ldr	r3, [r4, #4]
 800cf44:	1ac0      	subs	r0, r0, r3
 800cf46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf48:	b10b      	cbz	r3, 800cf4e <__sflush_r+0x42>
 800cf4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf4c:	1ac0      	subs	r0, r0, r3
 800cf4e:	2300      	movs	r3, #0
 800cf50:	4602      	mov	r2, r0
 800cf52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf54:	4628      	mov	r0, r5
 800cf56:	6a21      	ldr	r1, [r4, #32]
 800cf58:	47b0      	blx	r6
 800cf5a:	1c43      	adds	r3, r0, #1
 800cf5c:	89a3      	ldrh	r3, [r4, #12]
 800cf5e:	d106      	bne.n	800cf6e <__sflush_r+0x62>
 800cf60:	6829      	ldr	r1, [r5, #0]
 800cf62:	291d      	cmp	r1, #29
 800cf64:	d82c      	bhi.n	800cfc0 <__sflush_r+0xb4>
 800cf66:	4a29      	ldr	r2, [pc, #164]	; (800d00c <__sflush_r+0x100>)
 800cf68:	40ca      	lsrs	r2, r1
 800cf6a:	07d6      	lsls	r6, r2, #31
 800cf6c:	d528      	bpl.n	800cfc0 <__sflush_r+0xb4>
 800cf6e:	2200      	movs	r2, #0
 800cf70:	6062      	str	r2, [r4, #4]
 800cf72:	6922      	ldr	r2, [r4, #16]
 800cf74:	04d9      	lsls	r1, r3, #19
 800cf76:	6022      	str	r2, [r4, #0]
 800cf78:	d504      	bpl.n	800cf84 <__sflush_r+0x78>
 800cf7a:	1c42      	adds	r2, r0, #1
 800cf7c:	d101      	bne.n	800cf82 <__sflush_r+0x76>
 800cf7e:	682b      	ldr	r3, [r5, #0]
 800cf80:	b903      	cbnz	r3, 800cf84 <__sflush_r+0x78>
 800cf82:	6560      	str	r0, [r4, #84]	; 0x54
 800cf84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf86:	602f      	str	r7, [r5, #0]
 800cf88:	2900      	cmp	r1, #0
 800cf8a:	d0cb      	beq.n	800cf24 <__sflush_r+0x18>
 800cf8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf90:	4299      	cmp	r1, r3
 800cf92:	d002      	beq.n	800cf9a <__sflush_r+0x8e>
 800cf94:	4628      	mov	r0, r5
 800cf96:	f7ff faa5 	bl	800c4e4 <_free_r>
 800cf9a:	2000      	movs	r0, #0
 800cf9c:	6360      	str	r0, [r4, #52]	; 0x34
 800cf9e:	e7c2      	b.n	800cf26 <__sflush_r+0x1a>
 800cfa0:	6a21      	ldr	r1, [r4, #32]
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	47b0      	blx	r6
 800cfa8:	1c41      	adds	r1, r0, #1
 800cfaa:	d1c7      	bne.n	800cf3c <__sflush_r+0x30>
 800cfac:	682b      	ldr	r3, [r5, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d0c4      	beq.n	800cf3c <__sflush_r+0x30>
 800cfb2:	2b1d      	cmp	r3, #29
 800cfb4:	d001      	beq.n	800cfba <__sflush_r+0xae>
 800cfb6:	2b16      	cmp	r3, #22
 800cfb8:	d101      	bne.n	800cfbe <__sflush_r+0xb2>
 800cfba:	602f      	str	r7, [r5, #0]
 800cfbc:	e7b2      	b.n	800cf24 <__sflush_r+0x18>
 800cfbe:	89a3      	ldrh	r3, [r4, #12]
 800cfc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfc4:	81a3      	strh	r3, [r4, #12]
 800cfc6:	e7ae      	b.n	800cf26 <__sflush_r+0x1a>
 800cfc8:	690f      	ldr	r7, [r1, #16]
 800cfca:	2f00      	cmp	r7, #0
 800cfcc:	d0aa      	beq.n	800cf24 <__sflush_r+0x18>
 800cfce:	0793      	lsls	r3, r2, #30
 800cfd0:	bf18      	it	ne
 800cfd2:	2300      	movne	r3, #0
 800cfd4:	680e      	ldr	r6, [r1, #0]
 800cfd6:	bf08      	it	eq
 800cfd8:	694b      	ldreq	r3, [r1, #20]
 800cfda:	1bf6      	subs	r6, r6, r7
 800cfdc:	600f      	str	r7, [r1, #0]
 800cfde:	608b      	str	r3, [r1, #8]
 800cfe0:	2e00      	cmp	r6, #0
 800cfe2:	dd9f      	ble.n	800cf24 <__sflush_r+0x18>
 800cfe4:	4633      	mov	r3, r6
 800cfe6:	463a      	mov	r2, r7
 800cfe8:	4628      	mov	r0, r5
 800cfea:	6a21      	ldr	r1, [r4, #32]
 800cfec:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800cff0:	47e0      	blx	ip
 800cff2:	2800      	cmp	r0, #0
 800cff4:	dc06      	bgt.n	800d004 <__sflush_r+0xf8>
 800cff6:	89a3      	ldrh	r3, [r4, #12]
 800cff8:	f04f 30ff 	mov.w	r0, #4294967295
 800cffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d000:	81a3      	strh	r3, [r4, #12]
 800d002:	e790      	b.n	800cf26 <__sflush_r+0x1a>
 800d004:	4407      	add	r7, r0
 800d006:	1a36      	subs	r6, r6, r0
 800d008:	e7ea      	b.n	800cfe0 <__sflush_r+0xd4>
 800d00a:	bf00      	nop
 800d00c:	20400001 	.word	0x20400001

0800d010 <_fflush_r>:
 800d010:	b538      	push	{r3, r4, r5, lr}
 800d012:	690b      	ldr	r3, [r1, #16]
 800d014:	4605      	mov	r5, r0
 800d016:	460c      	mov	r4, r1
 800d018:	b913      	cbnz	r3, 800d020 <_fflush_r+0x10>
 800d01a:	2500      	movs	r5, #0
 800d01c:	4628      	mov	r0, r5
 800d01e:	bd38      	pop	{r3, r4, r5, pc}
 800d020:	b118      	cbz	r0, 800d02a <_fflush_r+0x1a>
 800d022:	6983      	ldr	r3, [r0, #24]
 800d024:	b90b      	cbnz	r3, 800d02a <_fflush_r+0x1a>
 800d026:	f000 f887 	bl	800d138 <__sinit>
 800d02a:	4b14      	ldr	r3, [pc, #80]	; (800d07c <_fflush_r+0x6c>)
 800d02c:	429c      	cmp	r4, r3
 800d02e:	d11b      	bne.n	800d068 <_fflush_r+0x58>
 800d030:	686c      	ldr	r4, [r5, #4]
 800d032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d0ef      	beq.n	800d01a <_fflush_r+0xa>
 800d03a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d03c:	07d0      	lsls	r0, r2, #31
 800d03e:	d404      	bmi.n	800d04a <_fflush_r+0x3a>
 800d040:	0599      	lsls	r1, r3, #22
 800d042:	d402      	bmi.n	800d04a <_fflush_r+0x3a>
 800d044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d046:	f000 f915 	bl	800d274 <__retarget_lock_acquire_recursive>
 800d04a:	4628      	mov	r0, r5
 800d04c:	4621      	mov	r1, r4
 800d04e:	f7ff ff5d 	bl	800cf0c <__sflush_r>
 800d052:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d054:	4605      	mov	r5, r0
 800d056:	07da      	lsls	r2, r3, #31
 800d058:	d4e0      	bmi.n	800d01c <_fflush_r+0xc>
 800d05a:	89a3      	ldrh	r3, [r4, #12]
 800d05c:	059b      	lsls	r3, r3, #22
 800d05e:	d4dd      	bmi.n	800d01c <_fflush_r+0xc>
 800d060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d062:	f000 f908 	bl	800d276 <__retarget_lock_release_recursive>
 800d066:	e7d9      	b.n	800d01c <_fflush_r+0xc>
 800d068:	4b05      	ldr	r3, [pc, #20]	; (800d080 <_fflush_r+0x70>)
 800d06a:	429c      	cmp	r4, r3
 800d06c:	d101      	bne.n	800d072 <_fflush_r+0x62>
 800d06e:	68ac      	ldr	r4, [r5, #8]
 800d070:	e7df      	b.n	800d032 <_fflush_r+0x22>
 800d072:	4b04      	ldr	r3, [pc, #16]	; (800d084 <_fflush_r+0x74>)
 800d074:	429c      	cmp	r4, r3
 800d076:	bf08      	it	eq
 800d078:	68ec      	ldreq	r4, [r5, #12]
 800d07a:	e7da      	b.n	800d032 <_fflush_r+0x22>
 800d07c:	0801e50c 	.word	0x0801e50c
 800d080:	0801e52c 	.word	0x0801e52c
 800d084:	0801e4ec 	.word	0x0801e4ec

0800d088 <std>:
 800d088:	2300      	movs	r3, #0
 800d08a:	b510      	push	{r4, lr}
 800d08c:	4604      	mov	r4, r0
 800d08e:	e9c0 3300 	strd	r3, r3, [r0]
 800d092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d096:	6083      	str	r3, [r0, #8]
 800d098:	8181      	strh	r1, [r0, #12]
 800d09a:	6643      	str	r3, [r0, #100]	; 0x64
 800d09c:	81c2      	strh	r2, [r0, #14]
 800d09e:	6183      	str	r3, [r0, #24]
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	2208      	movs	r2, #8
 800d0a4:	305c      	adds	r0, #92	; 0x5c
 800d0a6:	f7fb fe03 	bl	8008cb0 <memset>
 800d0aa:	4b05      	ldr	r3, [pc, #20]	; (800d0c0 <std+0x38>)
 800d0ac:	6224      	str	r4, [r4, #32]
 800d0ae:	6263      	str	r3, [r4, #36]	; 0x24
 800d0b0:	4b04      	ldr	r3, [pc, #16]	; (800d0c4 <std+0x3c>)
 800d0b2:	62a3      	str	r3, [r4, #40]	; 0x28
 800d0b4:	4b04      	ldr	r3, [pc, #16]	; (800d0c8 <std+0x40>)
 800d0b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d0b8:	4b04      	ldr	r3, [pc, #16]	; (800d0cc <std+0x44>)
 800d0ba:	6323      	str	r3, [r4, #48]	; 0x30
 800d0bc:	bd10      	pop	{r4, pc}
 800d0be:	bf00      	nop
 800d0c0:	0800d3dd 	.word	0x0800d3dd
 800d0c4:	0800d3ff 	.word	0x0800d3ff
 800d0c8:	0800d437 	.word	0x0800d437
 800d0cc:	0800d45b 	.word	0x0800d45b

0800d0d0 <_cleanup_r>:
 800d0d0:	4901      	ldr	r1, [pc, #4]	; (800d0d8 <_cleanup_r+0x8>)
 800d0d2:	f000 b8af 	b.w	800d234 <_fwalk_reent>
 800d0d6:	bf00      	nop
 800d0d8:	0800d011 	.word	0x0800d011

0800d0dc <__sfmoreglue>:
 800d0dc:	2268      	movs	r2, #104	; 0x68
 800d0de:	b570      	push	{r4, r5, r6, lr}
 800d0e0:	1e4d      	subs	r5, r1, #1
 800d0e2:	4355      	muls	r5, r2
 800d0e4:	460e      	mov	r6, r1
 800d0e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d0ea:	f7ff fa63 	bl	800c5b4 <_malloc_r>
 800d0ee:	4604      	mov	r4, r0
 800d0f0:	b140      	cbz	r0, 800d104 <__sfmoreglue+0x28>
 800d0f2:	2100      	movs	r1, #0
 800d0f4:	e9c0 1600 	strd	r1, r6, [r0]
 800d0f8:	300c      	adds	r0, #12
 800d0fa:	60a0      	str	r0, [r4, #8]
 800d0fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d100:	f7fb fdd6 	bl	8008cb0 <memset>
 800d104:	4620      	mov	r0, r4
 800d106:	bd70      	pop	{r4, r5, r6, pc}

0800d108 <__sfp_lock_acquire>:
 800d108:	4801      	ldr	r0, [pc, #4]	; (800d110 <__sfp_lock_acquire+0x8>)
 800d10a:	f000 b8b3 	b.w	800d274 <__retarget_lock_acquire_recursive>
 800d10e:	bf00      	nop
 800d110:	200008f9 	.word	0x200008f9

0800d114 <__sfp_lock_release>:
 800d114:	4801      	ldr	r0, [pc, #4]	; (800d11c <__sfp_lock_release+0x8>)
 800d116:	f000 b8ae 	b.w	800d276 <__retarget_lock_release_recursive>
 800d11a:	bf00      	nop
 800d11c:	200008f9 	.word	0x200008f9

0800d120 <__sinit_lock_acquire>:
 800d120:	4801      	ldr	r0, [pc, #4]	; (800d128 <__sinit_lock_acquire+0x8>)
 800d122:	f000 b8a7 	b.w	800d274 <__retarget_lock_acquire_recursive>
 800d126:	bf00      	nop
 800d128:	200008fa 	.word	0x200008fa

0800d12c <__sinit_lock_release>:
 800d12c:	4801      	ldr	r0, [pc, #4]	; (800d134 <__sinit_lock_release+0x8>)
 800d12e:	f000 b8a2 	b.w	800d276 <__retarget_lock_release_recursive>
 800d132:	bf00      	nop
 800d134:	200008fa 	.word	0x200008fa

0800d138 <__sinit>:
 800d138:	b510      	push	{r4, lr}
 800d13a:	4604      	mov	r4, r0
 800d13c:	f7ff fff0 	bl	800d120 <__sinit_lock_acquire>
 800d140:	69a3      	ldr	r3, [r4, #24]
 800d142:	b11b      	cbz	r3, 800d14c <__sinit+0x14>
 800d144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d148:	f7ff bff0 	b.w	800d12c <__sinit_lock_release>
 800d14c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d150:	6523      	str	r3, [r4, #80]	; 0x50
 800d152:	4b13      	ldr	r3, [pc, #76]	; (800d1a0 <__sinit+0x68>)
 800d154:	4a13      	ldr	r2, [pc, #76]	; (800d1a4 <__sinit+0x6c>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	62a2      	str	r2, [r4, #40]	; 0x28
 800d15a:	42a3      	cmp	r3, r4
 800d15c:	bf08      	it	eq
 800d15e:	2301      	moveq	r3, #1
 800d160:	4620      	mov	r0, r4
 800d162:	bf08      	it	eq
 800d164:	61a3      	streq	r3, [r4, #24]
 800d166:	f000 f81f 	bl	800d1a8 <__sfp>
 800d16a:	6060      	str	r0, [r4, #4]
 800d16c:	4620      	mov	r0, r4
 800d16e:	f000 f81b 	bl	800d1a8 <__sfp>
 800d172:	60a0      	str	r0, [r4, #8]
 800d174:	4620      	mov	r0, r4
 800d176:	f000 f817 	bl	800d1a8 <__sfp>
 800d17a:	2200      	movs	r2, #0
 800d17c:	2104      	movs	r1, #4
 800d17e:	60e0      	str	r0, [r4, #12]
 800d180:	6860      	ldr	r0, [r4, #4]
 800d182:	f7ff ff81 	bl	800d088 <std>
 800d186:	2201      	movs	r2, #1
 800d188:	2109      	movs	r1, #9
 800d18a:	68a0      	ldr	r0, [r4, #8]
 800d18c:	f7ff ff7c 	bl	800d088 <std>
 800d190:	2202      	movs	r2, #2
 800d192:	2112      	movs	r1, #18
 800d194:	68e0      	ldr	r0, [r4, #12]
 800d196:	f7ff ff77 	bl	800d088 <std>
 800d19a:	2301      	movs	r3, #1
 800d19c:	61a3      	str	r3, [r4, #24]
 800d19e:	e7d1      	b.n	800d144 <__sinit+0xc>
 800d1a0:	0801e03c 	.word	0x0801e03c
 800d1a4:	0800d0d1 	.word	0x0800d0d1

0800d1a8 <__sfp>:
 800d1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1aa:	4607      	mov	r7, r0
 800d1ac:	f7ff ffac 	bl	800d108 <__sfp_lock_acquire>
 800d1b0:	4b1e      	ldr	r3, [pc, #120]	; (800d22c <__sfp+0x84>)
 800d1b2:	681e      	ldr	r6, [r3, #0]
 800d1b4:	69b3      	ldr	r3, [r6, #24]
 800d1b6:	b913      	cbnz	r3, 800d1be <__sfp+0x16>
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	f7ff ffbd 	bl	800d138 <__sinit>
 800d1be:	3648      	adds	r6, #72	; 0x48
 800d1c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d1c4:	3b01      	subs	r3, #1
 800d1c6:	d503      	bpl.n	800d1d0 <__sfp+0x28>
 800d1c8:	6833      	ldr	r3, [r6, #0]
 800d1ca:	b30b      	cbz	r3, 800d210 <__sfp+0x68>
 800d1cc:	6836      	ldr	r6, [r6, #0]
 800d1ce:	e7f7      	b.n	800d1c0 <__sfp+0x18>
 800d1d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d1d4:	b9d5      	cbnz	r5, 800d20c <__sfp+0x64>
 800d1d6:	4b16      	ldr	r3, [pc, #88]	; (800d230 <__sfp+0x88>)
 800d1d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d1dc:	60e3      	str	r3, [r4, #12]
 800d1de:	6665      	str	r5, [r4, #100]	; 0x64
 800d1e0:	f000 f847 	bl	800d272 <__retarget_lock_init_recursive>
 800d1e4:	f7ff ff96 	bl	800d114 <__sfp_lock_release>
 800d1e8:	2208      	movs	r2, #8
 800d1ea:	4629      	mov	r1, r5
 800d1ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d1f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d1f4:	6025      	str	r5, [r4, #0]
 800d1f6:	61a5      	str	r5, [r4, #24]
 800d1f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d1fc:	f7fb fd58 	bl	8008cb0 <memset>
 800d200:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d204:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d208:	4620      	mov	r0, r4
 800d20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d20c:	3468      	adds	r4, #104	; 0x68
 800d20e:	e7d9      	b.n	800d1c4 <__sfp+0x1c>
 800d210:	2104      	movs	r1, #4
 800d212:	4638      	mov	r0, r7
 800d214:	f7ff ff62 	bl	800d0dc <__sfmoreglue>
 800d218:	4604      	mov	r4, r0
 800d21a:	6030      	str	r0, [r6, #0]
 800d21c:	2800      	cmp	r0, #0
 800d21e:	d1d5      	bne.n	800d1cc <__sfp+0x24>
 800d220:	f7ff ff78 	bl	800d114 <__sfp_lock_release>
 800d224:	230c      	movs	r3, #12
 800d226:	603b      	str	r3, [r7, #0]
 800d228:	e7ee      	b.n	800d208 <__sfp+0x60>
 800d22a:	bf00      	nop
 800d22c:	0801e03c 	.word	0x0801e03c
 800d230:	ffff0001 	.word	0xffff0001

0800d234 <_fwalk_reent>:
 800d234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d238:	4606      	mov	r6, r0
 800d23a:	4688      	mov	r8, r1
 800d23c:	2700      	movs	r7, #0
 800d23e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d242:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d246:	f1b9 0901 	subs.w	r9, r9, #1
 800d24a:	d505      	bpl.n	800d258 <_fwalk_reent+0x24>
 800d24c:	6824      	ldr	r4, [r4, #0]
 800d24e:	2c00      	cmp	r4, #0
 800d250:	d1f7      	bne.n	800d242 <_fwalk_reent+0xe>
 800d252:	4638      	mov	r0, r7
 800d254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d258:	89ab      	ldrh	r3, [r5, #12]
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d907      	bls.n	800d26e <_fwalk_reent+0x3a>
 800d25e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d262:	3301      	adds	r3, #1
 800d264:	d003      	beq.n	800d26e <_fwalk_reent+0x3a>
 800d266:	4629      	mov	r1, r5
 800d268:	4630      	mov	r0, r6
 800d26a:	47c0      	blx	r8
 800d26c:	4307      	orrs	r7, r0
 800d26e:	3568      	adds	r5, #104	; 0x68
 800d270:	e7e9      	b.n	800d246 <_fwalk_reent+0x12>

0800d272 <__retarget_lock_init_recursive>:
 800d272:	4770      	bx	lr

0800d274 <__retarget_lock_acquire_recursive>:
 800d274:	4770      	bx	lr

0800d276 <__retarget_lock_release_recursive>:
 800d276:	4770      	bx	lr

0800d278 <__swhatbuf_r>:
 800d278:	b570      	push	{r4, r5, r6, lr}
 800d27a:	460e      	mov	r6, r1
 800d27c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d280:	4614      	mov	r4, r2
 800d282:	2900      	cmp	r1, #0
 800d284:	461d      	mov	r5, r3
 800d286:	b096      	sub	sp, #88	; 0x58
 800d288:	da08      	bge.n	800d29c <__swhatbuf_r+0x24>
 800d28a:	2200      	movs	r2, #0
 800d28c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d290:	602a      	str	r2, [r5, #0]
 800d292:	061a      	lsls	r2, r3, #24
 800d294:	d410      	bmi.n	800d2b8 <__swhatbuf_r+0x40>
 800d296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d29a:	e00e      	b.n	800d2ba <__swhatbuf_r+0x42>
 800d29c:	466a      	mov	r2, sp
 800d29e:	f000 f903 	bl	800d4a8 <_fstat_r>
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	dbf1      	blt.n	800d28a <__swhatbuf_r+0x12>
 800d2a6:	9a01      	ldr	r2, [sp, #4]
 800d2a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d2ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d2b0:	425a      	negs	r2, r3
 800d2b2:	415a      	adcs	r2, r3
 800d2b4:	602a      	str	r2, [r5, #0]
 800d2b6:	e7ee      	b.n	800d296 <__swhatbuf_r+0x1e>
 800d2b8:	2340      	movs	r3, #64	; 0x40
 800d2ba:	2000      	movs	r0, #0
 800d2bc:	6023      	str	r3, [r4, #0]
 800d2be:	b016      	add	sp, #88	; 0x58
 800d2c0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d2c4 <__smakebuf_r>:
 800d2c4:	898b      	ldrh	r3, [r1, #12]
 800d2c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d2c8:	079d      	lsls	r5, r3, #30
 800d2ca:	4606      	mov	r6, r0
 800d2cc:	460c      	mov	r4, r1
 800d2ce:	d507      	bpl.n	800d2e0 <__smakebuf_r+0x1c>
 800d2d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d2d4:	6023      	str	r3, [r4, #0]
 800d2d6:	6123      	str	r3, [r4, #16]
 800d2d8:	2301      	movs	r3, #1
 800d2da:	6163      	str	r3, [r4, #20]
 800d2dc:	b002      	add	sp, #8
 800d2de:	bd70      	pop	{r4, r5, r6, pc}
 800d2e0:	466a      	mov	r2, sp
 800d2e2:	ab01      	add	r3, sp, #4
 800d2e4:	f7ff ffc8 	bl	800d278 <__swhatbuf_r>
 800d2e8:	9900      	ldr	r1, [sp, #0]
 800d2ea:	4605      	mov	r5, r0
 800d2ec:	4630      	mov	r0, r6
 800d2ee:	f7ff f961 	bl	800c5b4 <_malloc_r>
 800d2f2:	b948      	cbnz	r0, 800d308 <__smakebuf_r+0x44>
 800d2f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2f8:	059a      	lsls	r2, r3, #22
 800d2fa:	d4ef      	bmi.n	800d2dc <__smakebuf_r+0x18>
 800d2fc:	f023 0303 	bic.w	r3, r3, #3
 800d300:	f043 0302 	orr.w	r3, r3, #2
 800d304:	81a3      	strh	r3, [r4, #12]
 800d306:	e7e3      	b.n	800d2d0 <__smakebuf_r+0xc>
 800d308:	4b0d      	ldr	r3, [pc, #52]	; (800d340 <__smakebuf_r+0x7c>)
 800d30a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d30c:	89a3      	ldrh	r3, [r4, #12]
 800d30e:	6020      	str	r0, [r4, #0]
 800d310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d314:	81a3      	strh	r3, [r4, #12]
 800d316:	9b00      	ldr	r3, [sp, #0]
 800d318:	6120      	str	r0, [r4, #16]
 800d31a:	6163      	str	r3, [r4, #20]
 800d31c:	9b01      	ldr	r3, [sp, #4]
 800d31e:	b15b      	cbz	r3, 800d338 <__smakebuf_r+0x74>
 800d320:	4630      	mov	r0, r6
 800d322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d326:	f000 f8d1 	bl	800d4cc <_isatty_r>
 800d32a:	b128      	cbz	r0, 800d338 <__smakebuf_r+0x74>
 800d32c:	89a3      	ldrh	r3, [r4, #12]
 800d32e:	f023 0303 	bic.w	r3, r3, #3
 800d332:	f043 0301 	orr.w	r3, r3, #1
 800d336:	81a3      	strh	r3, [r4, #12]
 800d338:	89a0      	ldrh	r0, [r4, #12]
 800d33a:	4305      	orrs	r5, r0
 800d33c:	81a5      	strh	r5, [r4, #12]
 800d33e:	e7cd      	b.n	800d2dc <__smakebuf_r+0x18>
 800d340:	0800d0d1 	.word	0x0800d0d1

0800d344 <_malloc_usable_size_r>:
 800d344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d348:	1f18      	subs	r0, r3, #4
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	bfbc      	itt	lt
 800d34e:	580b      	ldrlt	r3, [r1, r0]
 800d350:	18c0      	addlt	r0, r0, r3
 800d352:	4770      	bx	lr

0800d354 <_raise_r>:
 800d354:	291f      	cmp	r1, #31
 800d356:	b538      	push	{r3, r4, r5, lr}
 800d358:	4604      	mov	r4, r0
 800d35a:	460d      	mov	r5, r1
 800d35c:	d904      	bls.n	800d368 <_raise_r+0x14>
 800d35e:	2316      	movs	r3, #22
 800d360:	6003      	str	r3, [r0, #0]
 800d362:	f04f 30ff 	mov.w	r0, #4294967295
 800d366:	bd38      	pop	{r3, r4, r5, pc}
 800d368:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d36a:	b112      	cbz	r2, 800d372 <_raise_r+0x1e>
 800d36c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d370:	b94b      	cbnz	r3, 800d386 <_raise_r+0x32>
 800d372:	4620      	mov	r0, r4
 800d374:	f000 f830 	bl	800d3d8 <_getpid_r>
 800d378:	462a      	mov	r2, r5
 800d37a:	4601      	mov	r1, r0
 800d37c:	4620      	mov	r0, r4
 800d37e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d382:	f000 b817 	b.w	800d3b4 <_kill_r>
 800d386:	2b01      	cmp	r3, #1
 800d388:	d00a      	beq.n	800d3a0 <_raise_r+0x4c>
 800d38a:	1c59      	adds	r1, r3, #1
 800d38c:	d103      	bne.n	800d396 <_raise_r+0x42>
 800d38e:	2316      	movs	r3, #22
 800d390:	6003      	str	r3, [r0, #0]
 800d392:	2001      	movs	r0, #1
 800d394:	e7e7      	b.n	800d366 <_raise_r+0x12>
 800d396:	2400      	movs	r4, #0
 800d398:	4628      	mov	r0, r5
 800d39a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d39e:	4798      	blx	r3
 800d3a0:	2000      	movs	r0, #0
 800d3a2:	e7e0      	b.n	800d366 <_raise_r+0x12>

0800d3a4 <raise>:
 800d3a4:	4b02      	ldr	r3, [pc, #8]	; (800d3b0 <raise+0xc>)
 800d3a6:	4601      	mov	r1, r0
 800d3a8:	6818      	ldr	r0, [r3, #0]
 800d3aa:	f7ff bfd3 	b.w	800d354 <_raise_r>
 800d3ae:	bf00      	nop
 800d3b0:	2000000c 	.word	0x2000000c

0800d3b4 <_kill_r>:
 800d3b4:	b538      	push	{r3, r4, r5, lr}
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	4d06      	ldr	r5, [pc, #24]	; (800d3d4 <_kill_r+0x20>)
 800d3ba:	4604      	mov	r4, r0
 800d3bc:	4608      	mov	r0, r1
 800d3be:	4611      	mov	r1, r2
 800d3c0:	602b      	str	r3, [r5, #0]
 800d3c2:	f7f8 fef1 	bl	80061a8 <_kill>
 800d3c6:	1c43      	adds	r3, r0, #1
 800d3c8:	d102      	bne.n	800d3d0 <_kill_r+0x1c>
 800d3ca:	682b      	ldr	r3, [r5, #0]
 800d3cc:	b103      	cbz	r3, 800d3d0 <_kill_r+0x1c>
 800d3ce:	6023      	str	r3, [r4, #0]
 800d3d0:	bd38      	pop	{r3, r4, r5, pc}
 800d3d2:	bf00      	nop
 800d3d4:	200008f4 	.word	0x200008f4

0800d3d8 <_getpid_r>:
 800d3d8:	f7f8 bee4 	b.w	80061a4 <_getpid>

0800d3dc <__sread>:
 800d3dc:	b510      	push	{r4, lr}
 800d3de:	460c      	mov	r4, r1
 800d3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3e4:	f000 f894 	bl	800d510 <_read_r>
 800d3e8:	2800      	cmp	r0, #0
 800d3ea:	bfab      	itete	ge
 800d3ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d3ee:	89a3      	ldrhlt	r3, [r4, #12]
 800d3f0:	181b      	addge	r3, r3, r0
 800d3f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d3f6:	bfac      	ite	ge
 800d3f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d3fa:	81a3      	strhlt	r3, [r4, #12]
 800d3fc:	bd10      	pop	{r4, pc}

0800d3fe <__swrite>:
 800d3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d402:	461f      	mov	r7, r3
 800d404:	898b      	ldrh	r3, [r1, #12]
 800d406:	4605      	mov	r5, r0
 800d408:	05db      	lsls	r3, r3, #23
 800d40a:	460c      	mov	r4, r1
 800d40c:	4616      	mov	r6, r2
 800d40e:	d505      	bpl.n	800d41c <__swrite+0x1e>
 800d410:	2302      	movs	r3, #2
 800d412:	2200      	movs	r2, #0
 800d414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d418:	f000 f868 	bl	800d4ec <_lseek_r>
 800d41c:	89a3      	ldrh	r3, [r4, #12]
 800d41e:	4632      	mov	r2, r6
 800d420:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d424:	81a3      	strh	r3, [r4, #12]
 800d426:	4628      	mov	r0, r5
 800d428:	463b      	mov	r3, r7
 800d42a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d42e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d432:	f000 b817 	b.w	800d464 <_write_r>

0800d436 <__sseek>:
 800d436:	b510      	push	{r4, lr}
 800d438:	460c      	mov	r4, r1
 800d43a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d43e:	f000 f855 	bl	800d4ec <_lseek_r>
 800d442:	1c43      	adds	r3, r0, #1
 800d444:	89a3      	ldrh	r3, [r4, #12]
 800d446:	bf15      	itete	ne
 800d448:	6560      	strne	r0, [r4, #84]	; 0x54
 800d44a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d44e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d452:	81a3      	strheq	r3, [r4, #12]
 800d454:	bf18      	it	ne
 800d456:	81a3      	strhne	r3, [r4, #12]
 800d458:	bd10      	pop	{r4, pc}

0800d45a <__sclose>:
 800d45a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d45e:	f000 b813 	b.w	800d488 <_close_r>
	...

0800d464 <_write_r>:
 800d464:	b538      	push	{r3, r4, r5, lr}
 800d466:	4604      	mov	r4, r0
 800d468:	4608      	mov	r0, r1
 800d46a:	4611      	mov	r1, r2
 800d46c:	2200      	movs	r2, #0
 800d46e:	4d05      	ldr	r5, [pc, #20]	; (800d484 <_write_r+0x20>)
 800d470:	602a      	str	r2, [r5, #0]
 800d472:	461a      	mov	r2, r3
 800d474:	f7f8 feb6 	bl	80061e4 <_write>
 800d478:	1c43      	adds	r3, r0, #1
 800d47a:	d102      	bne.n	800d482 <_write_r+0x1e>
 800d47c:	682b      	ldr	r3, [r5, #0]
 800d47e:	b103      	cbz	r3, 800d482 <_write_r+0x1e>
 800d480:	6023      	str	r3, [r4, #0]
 800d482:	bd38      	pop	{r3, r4, r5, pc}
 800d484:	200008f4 	.word	0x200008f4

0800d488 <_close_r>:
 800d488:	b538      	push	{r3, r4, r5, lr}
 800d48a:	2300      	movs	r3, #0
 800d48c:	4d05      	ldr	r5, [pc, #20]	; (800d4a4 <_close_r+0x1c>)
 800d48e:	4604      	mov	r4, r0
 800d490:	4608      	mov	r0, r1
 800d492:	602b      	str	r3, [r5, #0]
 800d494:	f7f8 feb4 	bl	8006200 <_close>
 800d498:	1c43      	adds	r3, r0, #1
 800d49a:	d102      	bne.n	800d4a2 <_close_r+0x1a>
 800d49c:	682b      	ldr	r3, [r5, #0]
 800d49e:	b103      	cbz	r3, 800d4a2 <_close_r+0x1a>
 800d4a0:	6023      	str	r3, [r4, #0]
 800d4a2:	bd38      	pop	{r3, r4, r5, pc}
 800d4a4:	200008f4 	.word	0x200008f4

0800d4a8 <_fstat_r>:
 800d4a8:	b538      	push	{r3, r4, r5, lr}
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	4d06      	ldr	r5, [pc, #24]	; (800d4c8 <_fstat_r+0x20>)
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	4608      	mov	r0, r1
 800d4b2:	4611      	mov	r1, r2
 800d4b4:	602b      	str	r3, [r5, #0]
 800d4b6:	f7f8 fea7 	bl	8006208 <_fstat>
 800d4ba:	1c43      	adds	r3, r0, #1
 800d4bc:	d102      	bne.n	800d4c4 <_fstat_r+0x1c>
 800d4be:	682b      	ldr	r3, [r5, #0]
 800d4c0:	b103      	cbz	r3, 800d4c4 <_fstat_r+0x1c>
 800d4c2:	6023      	str	r3, [r4, #0]
 800d4c4:	bd38      	pop	{r3, r4, r5, pc}
 800d4c6:	bf00      	nop
 800d4c8:	200008f4 	.word	0x200008f4

0800d4cc <_isatty_r>:
 800d4cc:	b538      	push	{r3, r4, r5, lr}
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	4d05      	ldr	r5, [pc, #20]	; (800d4e8 <_isatty_r+0x1c>)
 800d4d2:	4604      	mov	r4, r0
 800d4d4:	4608      	mov	r0, r1
 800d4d6:	602b      	str	r3, [r5, #0]
 800d4d8:	f7f8 fe9c 	bl	8006214 <_isatty>
 800d4dc:	1c43      	adds	r3, r0, #1
 800d4de:	d102      	bne.n	800d4e6 <_isatty_r+0x1a>
 800d4e0:	682b      	ldr	r3, [r5, #0]
 800d4e2:	b103      	cbz	r3, 800d4e6 <_isatty_r+0x1a>
 800d4e4:	6023      	str	r3, [r4, #0]
 800d4e6:	bd38      	pop	{r3, r4, r5, pc}
 800d4e8:	200008f4 	.word	0x200008f4

0800d4ec <_lseek_r>:
 800d4ec:	b538      	push	{r3, r4, r5, lr}
 800d4ee:	4604      	mov	r4, r0
 800d4f0:	4608      	mov	r0, r1
 800d4f2:	4611      	mov	r1, r2
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	4d05      	ldr	r5, [pc, #20]	; (800d50c <_lseek_r+0x20>)
 800d4f8:	602a      	str	r2, [r5, #0]
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	f7f8 fe8c 	bl	8006218 <_lseek>
 800d500:	1c43      	adds	r3, r0, #1
 800d502:	d102      	bne.n	800d50a <_lseek_r+0x1e>
 800d504:	682b      	ldr	r3, [r5, #0]
 800d506:	b103      	cbz	r3, 800d50a <_lseek_r+0x1e>
 800d508:	6023      	str	r3, [r4, #0]
 800d50a:	bd38      	pop	{r3, r4, r5, pc}
 800d50c:	200008f4 	.word	0x200008f4

0800d510 <_read_r>:
 800d510:	b538      	push	{r3, r4, r5, lr}
 800d512:	4604      	mov	r4, r0
 800d514:	4608      	mov	r0, r1
 800d516:	4611      	mov	r1, r2
 800d518:	2200      	movs	r2, #0
 800d51a:	4d05      	ldr	r5, [pc, #20]	; (800d530 <_read_r+0x20>)
 800d51c:	602a      	str	r2, [r5, #0]
 800d51e:	461a      	mov	r2, r3
 800d520:	f7f8 fe52 	bl	80061c8 <_read>
 800d524:	1c43      	adds	r3, r0, #1
 800d526:	d102      	bne.n	800d52e <_read_r+0x1e>
 800d528:	682b      	ldr	r3, [r5, #0]
 800d52a:	b103      	cbz	r3, 800d52e <_read_r+0x1e>
 800d52c:	6023      	str	r3, [r4, #0]
 800d52e:	bd38      	pop	{r3, r4, r5, pc}
 800d530:	200008f4 	.word	0x200008f4
 800d534:	00000000 	.word	0x00000000

0800d538 <floor>:
 800d538:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d53e:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
 800d542:	2d13      	cmp	r5, #19
 800d544:	460b      	mov	r3, r1
 800d546:	4684      	mov	ip, r0
 800d548:	460c      	mov	r4, r1
 800d54a:	4606      	mov	r6, r0
 800d54c:	dc30      	bgt.n	800d5b0 <floor+0x78>
 800d54e:	2d00      	cmp	r5, #0
 800d550:	db1e      	blt.n	800d590 <floor+0x58>
 800d552:	4f35      	ldr	r7, [pc, #212]	; (800d628 <floor+0xf0>)
 800d554:	412f      	asrs	r7, r5
 800d556:	ea01 0207 	and.w	r2, r1, r7
 800d55a:	4302      	orrs	r2, r0
 800d55c:	d015      	beq.n	800d58a <floor+0x52>
 800d55e:	a330      	add	r3, pc, #192	; (adr r3, 800d620 <floor+0xe8>)
 800d560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d564:	f7f8 fe90 	bl	8006288 <__adddf3>
 800d568:	2200      	movs	r2, #0
 800d56a:	2300      	movs	r3, #0
 800d56c:	f7f9 fad2 	bl	8006b14 <__aeabi_dcmpgt>
 800d570:	b148      	cbz	r0, 800d586 <floor+0x4e>
 800d572:	2c00      	cmp	r4, #0
 800d574:	da04      	bge.n	800d580 <floor+0x48>
 800d576:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d57a:	fa43 f505 	asr.w	r5, r3, r5
 800d57e:	442c      	add	r4, r5
 800d580:	2600      	movs	r6, #0
 800d582:	ea24 0407 	bic.w	r4, r4, r7
 800d586:	4623      	mov	r3, r4
 800d588:	46b4      	mov	ip, r6
 800d58a:	4660      	mov	r0, ip
 800d58c:	4619      	mov	r1, r3
 800d58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d590:	a323      	add	r3, pc, #140	; (adr r3, 800d620 <floor+0xe8>)
 800d592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d596:	f7f8 fe77 	bl	8006288 <__adddf3>
 800d59a:	2200      	movs	r2, #0
 800d59c:	2300      	movs	r3, #0
 800d59e:	f7f9 fab9 	bl	8006b14 <__aeabi_dcmpgt>
 800d5a2:	2800      	cmp	r0, #0
 800d5a4:	d0ef      	beq.n	800d586 <floor+0x4e>
 800d5a6:	2c00      	cmp	r4, #0
 800d5a8:	db24      	blt.n	800d5f4 <floor+0xbc>
 800d5aa:	2600      	movs	r6, #0
 800d5ac:	4634      	mov	r4, r6
 800d5ae:	e7ea      	b.n	800d586 <floor+0x4e>
 800d5b0:	2d33      	cmp	r5, #51	; 0x33
 800d5b2:	dd08      	ble.n	800d5c6 <floor+0x8e>
 800d5b4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800d5b8:	d1e7      	bne.n	800d58a <floor+0x52>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	f7f8 fe64 	bl	8006288 <__adddf3>
 800d5c0:	4684      	mov	ip, r0
 800d5c2:	460b      	mov	r3, r1
 800d5c4:	e7e1      	b.n	800d58a <floor+0x52>
 800d5c6:	f04f 37ff 	mov.w	r7, #4294967295
 800d5ca:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800d5ce:	40d7      	lsrs	r7, r2
 800d5d0:	4207      	tst	r7, r0
 800d5d2:	d0da      	beq.n	800d58a <floor+0x52>
 800d5d4:	a312      	add	r3, pc, #72	; (adr r3, 800d620 <floor+0xe8>)
 800d5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5da:	f7f8 fe55 	bl	8006288 <__adddf3>
 800d5de:	2200      	movs	r2, #0
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	f7f9 fa97 	bl	8006b14 <__aeabi_dcmpgt>
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	d0cd      	beq.n	800d586 <floor+0x4e>
 800d5ea:	2c00      	cmp	r4, #0
 800d5ec:	db0b      	blt.n	800d606 <floor+0xce>
 800d5ee:	ea26 0607 	bic.w	r6, r6, r7
 800d5f2:	e7c8      	b.n	800d586 <floor+0x4e>
 800d5f4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d5f8:	4a0c      	ldr	r2, [pc, #48]	; (800d62c <floor+0xf4>)
 800d5fa:	431e      	orrs	r6, r3
 800d5fc:	2e00      	cmp	r6, #0
 800d5fe:	bf18      	it	ne
 800d600:	4614      	movne	r4, r2
 800d602:	2600      	movs	r6, #0
 800d604:	e7bf      	b.n	800d586 <floor+0x4e>
 800d606:	2d14      	cmp	r5, #20
 800d608:	d008      	beq.n	800d61c <floor+0xe4>
 800d60a:	2301      	movs	r3, #1
 800d60c:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 800d610:	fa03 f505 	lsl.w	r5, r3, r5
 800d614:	19ae      	adds	r6, r5, r6
 800d616:	bf28      	it	cs
 800d618:	18e4      	addcs	r4, r4, r3
 800d61a:	e7e8      	b.n	800d5ee <floor+0xb6>
 800d61c:	3401      	adds	r4, #1
 800d61e:	e7e6      	b.n	800d5ee <floor+0xb6>
 800d620:	8800759c 	.word	0x8800759c
 800d624:	7e37e43c 	.word	0x7e37e43c
 800d628:	000fffff 	.word	0x000fffff
 800d62c:	bff00000 	.word	0xbff00000

0800d630 <_init>:
 800d630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d632:	bf00      	nop
 800d634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d636:	bc08      	pop	{r3}
 800d638:	469e      	mov	lr, r3
 800d63a:	4770      	bx	lr

0800d63c <_fini>:
 800d63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d63e:	bf00      	nop
 800d640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d642:	bc08      	pop	{r3}
 800d644:	469e      	mov	lr, r3
 800d646:	4770      	bx	lr
